ProjectContractInvoice is a BusinessClass
    owned by Projects
    prefix is PRJCI

    Ontology
        symbolic key is ProjectContractInvoice

    Patterns
    
    Persistent Fields
    	InvoiceDate			is Date
    	Status				is Numeric size 1
    		States
    			Created		value is 0
    			Journalized	value is 1
    			InProgress	value is 2
    	RunGroup			is a ProjectContractRunGroup
    		default label is "InvoiceGroup"
    	JournalizeGroup
    	InvoiceType			is a ProjectInvoiceType
		VendorInvoiceLink 	is an URL
		CFDANumber			is Alpha 30
			default label is "A\L\N"
#ifdef module idm
    	GeneratedInvoice	is an AlternateAttachment
#endif
#ifndef module idm
		GeneratedInvoice	is an Attachment
#endif		
  		IDMDocumentPID      is an DocumentPID
			protected
			restricted	
		ProjectJurisdictionCode 
		JurisdictionInvoiceNumber	is Numeric 7	
		ApprovalStatus				is Numeric size 1				
			States	
				SubmittedForApproval	value is 1
				Approved				value is 2  
				Rejected				value is 3
				RevenueReversalApproved value is 4
				InvoiceReversalApproved value is 5				
#ifdef module idm				
		IDMJob
			protected
#endif	
#ifndef module idm				
		IDMJob						is UniqueID
			protected
#endif		
		RetainageInvoice			is Numeric size 8
		CertificationNumber	
		CertificationDate			is Date	
    	PrintStatus				    is Numeric size 1
    		default label is "PrintStatus"
    		States
    			DoNotPrint	value is 0
    			Print		value is 1
    			Printed 	value is 2
    	EmailCount					is Numeric size 3
    		protected
		TotalInvoiceAmount			is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalUnits					is like UnitsAmount
			disable Auditing		
		TotalTax					is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing		
		TotalFees					is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing		
		TotalRetainer				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalAllowance				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalRetainage				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalRetainedTax			is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalAdvance				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalPassThrough			is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalAdjustment				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		BillingGroup				is a ProjectBillingGroup

	Context Fields
		SearchDateRange			    is a DateRange
		CurrencyTable

	Transient Fields		
		PrinterEmailAddress	is an EmailAddress 
			holds pii
		PrintOrEmail		is Boolean	
		BypassStructureRelationEdit
		BypassActiveCodeBlockEdit

	Local Fields
		LocalType  					is Numeric size 1
			States	
				Billing						value is 1
				Revenue						value is 2   
		LocalFinanceDimension2      is a FinanceDimension2
		LocalAccountingEntity		is like AccountingEntity					
		LocalInvoiceNumber			is Numeric 12
		LocalCreditNumber			is Numeric 12	
		LocalInvoiceType 			is AlphaUpper size 1
		LocalReceivableInvoice		is AlphaUpper 22
		LocalInvoiceTotalAmount 	is like CurrencyAmount
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalTaxAmount 	is like CurrencyAmount
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalFinanceCodeBlock		is a FinanceCodeBlock
		LocalProjectCodeBlock		is a ProjectCodeBlock
		LocalRevenueCodeBlock		is a FinanceCodeBlock
		IsRetainer					is Boolean
		LocalRevenueAmount			is like InternationalAmount
		LocalTableType				is Numeric size 1
		LocalValidation				is Boolean
		LocalReportingChart			is like ReportingChart
		LocalGeneralLedgerChartAccount is a GeneralLedgerChartAccount
		TopNodeFound				is Boolean		
   		LocalProject				is a Project
		LocalInvoiceTotalAmounts    is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalUnitsAmount is like UnitsAmount
		LocalInvoiceTotalRetainerAmount is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalAllowance	is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalRetainage	is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalTaxAmounts	is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalFees		is like InternationalAmount			
			precision is ProjectContract.Currency.NumberOfDecimals


		LocalInvoiceTotalAdvance	is like InternationalAmount
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalPassThrough is like InternationalAmount
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceTotalAdjustment	is like InternationalAmount
			precision is ProjectContract.Currency.NumberOfDecimals
		LocalInvoiceReversalTotalAmounts	 is like InternationalAmount	
			precision is ProjectContract.Currency.NumberOfDecimals		
		LocalInvoiceReversalTotalUnitsAmount is like UnitsAmount
		LocalInvoiceReversalTotalTaxAmounts  is like InternationalAmount	
			precision is ProjectContract.Currency.NumberOfDecimals				
		LocalInvoiceSummaryTotalAmounts	 is like InternationalAmount	
			precision is ProjectContract.Currency.NumberOfDecimals		
		LocalInvoiceSummaryTotalUnitsAmount is like UnitsAmount
		LocalInvoiceSummaryTotalTaxAmounts  is like InternationalAmount	
			precision is ProjectContract.Currency.NumberOfDecimals				
		LocalInvoiceTotalsComputed	is Boolean	
		LocalInvoiceReversalTotalsComputed	is Boolean	
		LocalInvoiceSummaryTotalsComputed is Boolean	
		CompletionMessage			is Alpha size 100
		ToEmailAddress				is an EmailAddressMulti 
			holds pii
		PrinterName					is Alpha size 20
		LocalRunGroup				is like ProjectContractRunGroup
		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
		LocalProjectContract		is like ProjectContract
		AsyncId						is an AsyncActionRequest
		LocalFromAccountingEntity	is like AccountingEntity
		LocalCodeBlock				is a FinanceCodeBlock
		RecordCount					is Numeric size 4
		LocalTransCounter			is Numeric size 8
		LocalGLTransactionDetail	is like GLTransactionDetail
		LocalProjectStructureValidationResult is a ProjectStructureValidationResult
#ifdef module idm		
		IDMAttributes
		IDMGenerateDocument
		IDMItem
		IDMXMLDefinition
		AttributeCtr				is Numeric 2
		LocalExecute				is Boolean	
		LocalAttributeCtr           is Numeric 2	
#endif		
#ifdef module ar
		LocalAlternateReceivableInvoiceType is an AlternateReceivableInvoiceType
		LocalReleaseReceivableInvoice 		is a ReceivableInvoice view
		LocalReceivableGLDistribution		is a ReceivableGLDistribution view
		LocalCalculateReceivableFinanceStructure	is a CalculateReceivableFinanceStructure
		LocalAnswer 								is Alpha size 1
		LocalCreditDebitMemoReason			is like ReceivableReason	
		ProcessTaxHistory
		LocalTaxHistoryProcessed			is Alpha size 1				
#endif
#ifdef module tx
		LocalOneSourceTaxAttribute 			is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText		is Text
		LocalTaxEntity						is a TaxEntity
#endif
		LocalTaxCode						is AlphaUpper size 15
		LocalServiceTaxCode					is AlphaUpper size 15
		LocalBuyerTaxCode					is AlphaUpper size 15
		LocalProductTaxCategory				is AlphaUpper size 15
		LocalAddressCode					is an AddressCode
		LocalServiceAddressCode				is an AddressCode
		LocalTaxCodeBlock					is a FinanceCodeBlock
		LocalTaxRate						is Percent size 7.5
		LocalTaxCounter						is Numeric size 8
		AttributeCounter					is Numeric 2
		LocalIDMEmailSubject			is Alpha 255
    		Text Variables
				Contract				value is ProjectContract.Project.DisplayProject	
#ifdef module ar 					
				ProjectContractInvoice  value is DerivedInvoicePrintNumber
#endif				
				InvoiceDate				value is InvoiceDate

		LocalIDMAttachmentCtr			is Numeric size 3
		LocalIDMAttachmentSize			is Numeric size 11
		LocalMaxAttachmentsReached		is Boolean
		
	Rule Blocks
		SetLocalProjectCodeBlock
			initialize LocalProjectCodeBlock
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
				LocalReportingChart = FinanceEnterpriseGroup.EnterpriseChart
				LocalProjectCodeBlock.GeneralLedgerChartAccount = LocalFinanceCodeBlock.GeneralLedgerChartAccount
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!ReportingChartAccountRel.ParentChartAccount.ChartType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.GeneralLedgerChartAccount = ReportingChartAccountRel.ParentChartAccount
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension1)
				LocalProjectCodeBlock.FinanceDimension1 = LocalFinanceCodeBlock.FinanceDimension1
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension1HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension1 = FinanceDimension1HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
				LocalProjectCodeBlock.FinanceDimension3 = LocalFinanceCodeBlock.FinanceDimension3
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension3HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension3 = FinanceDimension3HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
				LocalProjectCodeBlock.FinanceDimension4 = LocalFinanceCodeBlock.FinanceDimension4
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension4HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension4 = FinanceDimension4HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension5)
				LocalProjectCodeBlock.FinanceDimension5 = LocalFinanceCodeBlock.FinanceDimension5
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension5HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension5 = FinanceDimension5HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension6)
				LocalProjectCodeBlock.FinanceDimension6 = LocalFinanceCodeBlock.FinanceDimension6
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension6HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension6 = FinanceDimension6HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension7)
				LocalProjectCodeBlock.FinanceDimension7 = LocalFinanceCodeBlock.FinanceDimension7
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension7HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension7 = FinanceDimension7HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension8)
				LocalProjectCodeBlock.FinanceDimension8 = LocalFinanceCodeBlock.FinanceDimension8
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension8HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension8 = FinanceDimension8HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension9)
				LocalProjectCodeBlock.FinanceDimension9 = LocalFinanceCodeBlock.FinanceDimension9
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension9HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension9 = FinanceDimension9HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension10)
				LocalProjectCodeBlock.FinanceDimension10 = LocalFinanceCodeBlock.FinanceDimension10
				if (LocalProjectCodeBlock entered)
					if (ProjectBillingOverrideRel not exists)
						TopNodeFound = false
						while (!TopNodeFound)
							if (!FinanceDimension10HierarchyRel.ParentDimension.DimensionType.Summary)
								TopNodeFound = true
							else
								LocalProjectCodeBlock.FinanceDimension10 = FinanceDimension10HierarchyRel.ParentDimension
							if (ProjectBillingOverrideRel exists)
								TopNodeFound = true
				
		CalculateInvoiceTotals
			if (not LocalInvoiceTotalsComputed)
				for each ProjectContractInvoiceLine set
					LocalInvoiceTotalAmounts	 += each.Amount 
					LocalInvoiceTotalUnitsAmount += each.UnitsAmount
					LocalInvoiceTotalTaxAmounts  += each.TaxAmount					
					if (each.ProjectContractRetainer entered)
						LocalInvoiceTotalRetainerAmount += each.Amount
					if (each.IsAllowance)
						LocalInvoiceTotalAllowance += each.Amount
					if (each.IsRetainage)
						LocalInvoiceTotalRetainage   += each.Amount

					if (each.FeeCode entered)
						LocalInvoiceTotalFees += each.Amount
					if (each.ProjectContractAdvance entered
					or  each.AppliedProjectContractAdvance entered)
						LocalInvoiceTotalAdvance += each.Amount
					if (each.BillingMethod.PassThrough)
						LocalInvoiceTotalPassThrough += each.Amount
					if  (each.Adjusted
					and !each.Deferred
					and !each.BillingMethod.PassThrough)
						LocalInvoiceTotalAdjustment += each.AdjustmentAmount
				LocalInvoiceTotalsComputed = true					

		CalculateInvoiceReversalTotals
			if (not LocalInvoiceReversalTotalsComputed)
				for each ProjectContractReversalLine set
					LocalInvoiceReversalTotalAmounts	 += each.Amount 
					LocalInvoiceReversalTotalUnitsAmount += each.UnitsAmount
					LocalInvoiceReversalTotalTaxAmounts  += each.TaxAmount					
				LocalInvoiceReversalTotalsComputed = true					

		CalculateInvoiceSummaryTotals
			if (not LocalInvoiceSummaryTotalsComputed)
				for each ProjectContractInvoiceSummary set
					LocalInvoiceSummaryTotalAmounts	 += each.Amount 
					LocalInvoiceSummaryTotalUnitsAmount += each.UnitsAmount
					LocalInvoiceSummaryTotalTaxAmounts  += each.TaxAmount					
				LocalInvoiceSummaryTotalsComputed = true					


#ifdef module tx		
		LoadOneSourceTaxAttribute  	 
			initialize LocalOneSourceTaxAttribute
			initialize AttributeCounter
			if (TaxAttributesRel exists)				 
				for each TaxAttributesRel.OneSourceProjectTaxAttributeByNumberRel
					if (each.Value entered
					or  each.LoadDynamicField entered)
						AttributeCounter +=1	
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Number	= each.AttributeNumber 
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Name	= each.UserAttributeName
						if (each.LoadDynamicField.ValueIs.ContractType)
							if (ProjectContract.ContractType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProjectContract.ContractType
						else		
						if (each.LoadDynamicField.ValueIs.CustomerType)						
							if (ProjectFundingSource.CustomerType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProjectFundingSource.CustomerType
						else
						if (each.LoadDynamicField.ValueIs.Project)						
							if (LocalProject entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject
						else		
						if (each.LoadDynamicField.ValueIs.WorkType)						
							if (LocalProject.WorkType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.WorkType
						else				
						if (each.LoadDynamicField.ValueIs.ServiceType)						
							if (LocalProject.ServiceType entered)															
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.ServiceType
						else			
						if (each.LoadDynamicField.ValueIs.UsageType)						
							if (LocalProject.UsageType entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.UsageType
						else			
						if (each.LoadDynamicField.ValueIs.AccountSubType)						
							if (LocalGeneralLedgerChartAccount.AccountSubType entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalGeneralLedgerChartAccount.AccountSubType
						else	
						if (each.LoadDynamicField.ValueIs.Latitude)						
							if (ProcessTaxHistory.ToAddress entered and ProcessTaxHistory.ToAddress.GeoLatitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProcessTaxHistory.ToAddress.GeoLatitude
						else			
						if (each.LoadDynamicField.ValueIs.Longitude)						
							if (ProcessTaxHistory.ToAddress entered and ProcessTaxHistory.ToAddress.GeoLongitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProcessTaxHistory.ToAddress.GeoLongitude
						else			
						if (each.LoadDynamicField.ValueIs.Altitude)						
							if (ProcessTaxHistory.ToAddress entered and ProcessTaxHistory.ToAddress.GeoAltitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProcessTaxHistory.ToAddress.GeoAltitude
						else	
							LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value		= each.Value
#endif		

#ifdef module intercobilling
		CreateIntercompanyTransaction
			if (!IsRetainer)
				LocalFinanceCodeBlock = ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount
				if (LocalFinanceCodeBlock.Ledger not entered)
					LocalFinanceCodeBlock.Ledger = LocalRevenueCodeBlock.Ledger
				if (LocalFinanceCodeBlock.ToAccountingEntity not entered)
					LocalFinanceCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.ToAccountingEntity
				if (LocalFinanceCodeBlock.AccountingUnit not entered)
					LocalFinanceCodeBlock.AccountingUnit = LocalRevenueCodeBlock.AccountingUnit
				if (LocalFinanceCodeBlock.GeneralLedgerChartAccount not entered)
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.GeneralLedgerChartAccount
				if (LocalFinanceCodeBlock.Project not entered)
					LocalFinanceCodeBlock.Project = LocalRevenueCodeBlock.Project
				if (LocalFinanceCodeBlock.FinanceDimension1 not entered)
					LocalFinanceCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension1
				if (LocalFinanceCodeBlock.FinanceDimension2 not entered)
					LocalFinanceCodeBlock.FinanceDimension2 = LocalRevenueCodeBlock.FinanceDimension2
				if (LocalFinanceCodeBlock.FinanceDimension3 not entered)
					LocalFinanceCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3
				if (LocalFinanceCodeBlock.FinanceDimension4 not entered)
					LocalFinanceCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4
				if (LocalFinanceCodeBlock.FinanceDimension5 not entered)
					LocalFinanceCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension5
				if (LocalFinanceCodeBlock.FinanceDimension6 not entered)
					LocalFinanceCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension6
				if (LocalFinanceCodeBlock.FinanceDimension7 not entered)
					LocalFinanceCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension7
				if (LocalFinanceCodeBlock.FinanceDimension8 not entered)
					LocalFinanceCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension8
				if (LocalFinanceCodeBlock.FinanceDimension9 not entered)
					LocalFinanceCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension9
				if (LocalFinanceCodeBlock.FinanceDimension10 not entered)
					LocalFinanceCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension10
				LocalRevenueCodeBlock = LocalFinanceCodeBlock
			LocalFinanceCodeBlock = ProjectFundingSource.IntercompanyBillingRechargeItem.ToPayablePLAccount
			if (LocalFinanceCodeBlock.Ledger not entered)
				LocalFinanceCodeBlock.Ledger = ProjectFundingSource.OffsetAccount.Ledger
			if (LocalFinanceCodeBlock.ToAccountingEntity not entered)
				LocalFinanceCodeBlock.ToAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
			if (LocalFinanceCodeBlock.AccountingUnit not entered)
				LocalFinanceCodeBlock.AccountingUnit = ProjectFundingSource.OffsetAccount.AccountingUnit
			if (LocalFinanceCodeBlock.GeneralLedgerChartAccount not entered)
				LocalFinanceCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.OffsetAccount.GeneralLedgerChartAccount
			if (LocalFinanceCodeBlock.Project not entered)
				LocalFinanceCodeBlock.Project = ProjectFundingSource.OffsetAccount.Project
			if (LocalFinanceCodeBlock.FinanceDimension1 not entered)
				LocalFinanceCodeBlock.FinanceDimension1 = ProjectFundingSource.OffsetAccount.FinanceDimension1


			if (LocalFinanceCodeBlock.FinanceDimension3 not entered)
				LocalFinanceCodeBlock.FinanceDimension3 = ProjectFundingSource.OffsetAccount.FinanceDimension3
			if (LocalFinanceCodeBlock.FinanceDimension4 not entered)
				LocalFinanceCodeBlock.FinanceDimension4 = ProjectFundingSource.OffsetAccount.FinanceDimension4
			if (LocalFinanceCodeBlock.FinanceDimension5 not entered)
				LocalFinanceCodeBlock.FinanceDimension5 = ProjectFundingSource.OffsetAccount.FinanceDimension5
			if (LocalFinanceCodeBlock.FinanceDimension6 not entered)
				LocalFinanceCodeBlock.FinanceDimension6 = ProjectFundingSource.OffsetAccount.FinanceDimension6
			if (LocalFinanceCodeBlock.FinanceDimension7 not entered)
				LocalFinanceCodeBlock.FinanceDimension7 = ProjectFundingSource.OffsetAccount.FinanceDimension7
			if (LocalFinanceCodeBlock.FinanceDimension8 not entered)
				LocalFinanceCodeBlock.FinanceDimension8 = ProjectFundingSource.OffsetAccount.FinanceDimension8
			if (LocalFinanceCodeBlock.FinanceDimension9 not entered)
				LocalFinanceCodeBlock.FinanceDimension9 = ProjectFundingSource.OffsetAccount.FinanceDimension9
			if (LocalFinanceCodeBlock.FinanceDimension10 not entered)
				LocalFinanceCodeBlock.FinanceDimension10 = ProjectFundingSource.OffsetAccount.FinanceDimension10
			invoke Create IntercompanyBillingTransaction
				invoked.IntercompanyBillingGroup		= FinanceEnterpriseGroup
				invoked.FromCompany						= ProjectFundingSource.FromCompany
				invoked.ToCompany						= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
				invoked.Description						= LocalInvoiceDescription
				invoked.IntercompanyBillingRechargeItem	= ProjectFundingSource.IntercompanyBillingRechargeItem
				invoked.OriginatingDocument				= reference to this instance
				invoked.TransactionAmount				= LocalAmount
				invoked.TransactionCurrency				= ProjectContract.Currency
				invoked.CurrencyTable					= ProjectContract.CurrencyTable
				invoked.TransactionDate					= InvoiceDate
				invoked.PostingDate						= PostingDate
				invoked.ReceivablesRevenueAccount		= LocalRevenueCodeBlock
				invoked.PayablesExpenseAccount			= LocalFinanceCodeBlock
			if (TranCount = 50)
				commit transaction
				initialize TranCount
			TranCount += 1
			
		ValidateIntercompanyTransaction
			if (IsRetainer)
				LocalCodeBlock = LocalRevenueCodeBlock
			else
				LocalFinanceCodeBlock = ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount
				if (LocalFinanceCodeBlock.Ledger not entered)
					LocalFinanceCodeBlock.Ledger = LocalRevenueCodeBlock.Ledger
				if (LocalFinanceCodeBlock.ToAccountingEntity not entered)
					LocalFinanceCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.ToAccountingEntity
				if (LocalFinanceCodeBlock.AccountingUnit not entered)
					LocalFinanceCodeBlock.AccountingUnit = LocalRevenueCodeBlock.AccountingUnit
				if (LocalFinanceCodeBlock.GeneralLedgerChartAccount not entered)
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.GeneralLedgerChartAccount
				if (LocalFinanceCodeBlock.Project not entered)
					LocalFinanceCodeBlock.Project = LocalRevenueCodeBlock.Project
				if (LocalFinanceCodeBlock.FinanceDimension1 not entered)
					LocalFinanceCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension1
				if (LocalFinanceCodeBlock.FinanceDimension2 not entered)
					LocalFinanceCodeBlock.FinanceDimension2 = LocalRevenueCodeBlock.FinanceDimension2
				if (LocalFinanceCodeBlock.FinanceDimension3 not entered)
					LocalFinanceCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3
				if (LocalFinanceCodeBlock.FinanceDimension4 not entered)
					LocalFinanceCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4
				if (LocalFinanceCodeBlock.FinanceDimension5 not entered)
					LocalFinanceCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension5
				if (LocalFinanceCodeBlock.FinanceDimension6 not entered)
					LocalFinanceCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension6
				if (LocalFinanceCodeBlock.FinanceDimension7 not entered)
					LocalFinanceCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension7
				if (LocalFinanceCodeBlock.FinanceDimension8 not entered)
					LocalFinanceCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension8
				if (LocalFinanceCodeBlock.FinanceDimension9 not entered)
					LocalFinanceCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension9
				if (LocalFinanceCodeBlock.FinanceDimension10 not entered)
					LocalFinanceCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension10
				LocalCodeBlock			= LocalFinanceCodeBlock
			LocalFromAccountingEntity	= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.AccountingEntity  
			include AddToTable
			LocalFinanceCodeBlock = ProjectFundingSource.IntercompanyBillingRechargeItem.ToPayablePLAccount
			if (LocalFinanceCodeBlock.Ledger not entered)
				LocalFinanceCodeBlock.Ledger = ProjectFundingSource.OffsetAccount.Ledger
			if (LocalFinanceCodeBlock.ToAccountingEntity not entered)
				LocalFinanceCodeBlock.ToAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
			if (LocalFinanceCodeBlock.AccountingUnit not entered)
				LocalFinanceCodeBlock.AccountingUnit = ProjectFundingSource.OffsetAccount.AccountingUnit
			if (LocalFinanceCodeBlock.GeneralLedgerChartAccount not entered)
				LocalFinanceCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.OffsetAccount.GeneralLedgerChartAccount
			if (LocalFinanceCodeBlock.Project not entered)
				LocalFinanceCodeBlock.Project = ProjectFundingSource.OffsetAccount.Project
			if (LocalFinanceCodeBlock.FinanceDimension1 not entered)
				LocalFinanceCodeBlock.FinanceDimension1 = ProjectFundingSource.OffsetAccount.FinanceDimension1
			if (LocalFinanceCodeBlock.FinanceDimension3 not entered)
				LocalFinanceCodeBlock.FinanceDimension3 = ProjectFundingSource.OffsetAccount.FinanceDimension3
			if (LocalFinanceCodeBlock.FinanceDimension4 not entered)
				LocalFinanceCodeBlock.FinanceDimension4 = ProjectFundingSource.OffsetAccount.FinanceDimension4
			if (LocalFinanceCodeBlock.FinanceDimension5 not entered)
				LocalFinanceCodeBlock.FinanceDimension5 = ProjectFundingSource.OffsetAccount.FinanceDimension5
			if (LocalFinanceCodeBlock.FinanceDimension6 not entered)
				LocalFinanceCodeBlock.FinanceDimension6 = ProjectFundingSource.OffsetAccount.FinanceDimension6
			if (LocalFinanceCodeBlock.FinanceDimension7 not entered)
				LocalFinanceCodeBlock.FinanceDimension7 = ProjectFundingSource.OffsetAccount.FinanceDimension7
			if (LocalFinanceCodeBlock.FinanceDimension8 not entered)
				LocalFinanceCodeBlock.FinanceDimension8 = ProjectFundingSource.OffsetAccount.FinanceDimension8
			if (LocalFinanceCodeBlock.FinanceDimension9 not entered)
				LocalFinanceCodeBlock.FinanceDimension9 = ProjectFundingSource.OffsetAccount.FinanceDimension9
			if (LocalFinanceCodeBlock.FinanceDimension10 not entered)
				LocalFinanceCodeBlock.FinanceDimension10 = ProjectFundingSource.OffsetAccount.FinanceDimension10
			LocalFromAccountingEntity	= ProjectFundingSource.FromCompany.AccountingEntity  
			LocalCodeBlock				= LocalFinanceCodeBlock
			include AddToTable
#endif
		AddToRevenueTable
			if (ProjectInvoiceRevenueLineOTORel not exists)
				RevenueCounter += 1
				invoke Create ProjectInvoiceRevenueLine set
					invoked.RevenueLineKey.Validation	  = LocalValidation
					invoked.RevenueLineKey.TableType	  = LocalTableType
					invoked.RevenueLineKey.SequenceNumber = RevenueCounter
					invoked.RevenueLine.FinanceCodeBlock  = LocalRevenueCodeBlock
					invoked.RevenueLine.Amount			  = LocalRevenueAmount
			else
				invoke Update first ProjectInvoiceRevenueLineOTORel
					invoked.RevenueLine.Amount			  += LocalRevenueAmount

		AddToTable
			LocalProjectStructureValidationResult = ProjectStructureValidationResultView.ProjectStructureValidationResult
			if (ProjectStructureValidationLineOTORel not exists)
				LineCount += 1
				invoke Create ProjectStructureValidationLine
					invoked.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
					invoked.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult
					invoked.SequenceNumber						 = LineCount
					invoked.ValidationCodeBlock.AccountingEntity = LocalAccountingEntity
					invoked.ValidationCodeBlock.FinanceCodeBlock = LocalCodeBlock
				if (TranCount = 50)
					commit transaction
					initialize TranCount
				TranCount += 1

    Derived Fields
#ifdef module ar    
    	PhoneDerivedCust is a DerivedField
    		type is Alpha size 30
    		return FinanceDimension2.CompanyCustomerGroup.Customer + "-" + FinanceDimension2.CompanyCustomerGroup.Customer.Name
#endif    		
    	RecordType is a DerivedField
    		type is Numeric size 1
    		if (InvoiceType.Bill
			or  InvoiceType.Retainer
			or  InvoiceType.Retainage)
				return 0
			else
			if (InvoiceType.RevenueRecognition)
				return 1
				
    	ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforProjectContractInvoice"
			
		ContextMessageText is a StringField
			type is Alpha 30
			restricted
			"ProjectContractInvoice<ProjectContractInvoice>"
			
		DerivedEmailSubject is a MessageField
			restricted
			"Project_Contract_Invoice_<ProjectContractInvoice>"
		
		DerivedEmailSubjectForReversal is a MessageField
			restricted
			"Project_Contract_Invoice_Reversal_<ProjectContractInvoice>"
			
		DerivedEmailSubjectContinuation is a MessageField
			restricted
			"Project_Contract_Invoice_<ProjectContractInvoice>_Cont."
		
		DerivedEmailSubjectContinuationForReversal is a MessageField
			restricted
			"Project_Contract_Invoice_Reversal_<ProjectContractInvoice>_Cont."
		
		DerivedDefaultEmailSubject is a DerivedField
			type is MessageField
			restricted
			if (ResendEmail)
				return DerivedEmailSubjectContinuation
			else
				return DerivedEmailSubject

		DerivedDefaultEmailSubjectForReversal is a DerivedField
			type is MessageField
			restricted
			if (ResendEmail)
				return DerivedEmailSubjectContinuationForReversal
			else
				return DerivedEmailSubjectForReversal
			
		DerivedEmailBody is a MessageField
			restricted
			"Project_Contract_Invoice_<ProjectContractInvoice>Attached."
		
		DerivedEmailBodyForReversal is a MessageField
			restricted
			"Project_Contract_Invoice_Reversal_<ProjectContractInvoice>Attached."
				
    	DerivedProjectInvoiceIDMEmailSubject is a DerivedField 
    		type is Alpha size 255
    		restricted
    		if (InvoiceType.Reversal)
	    		LocalIDMEmailSubject = ProjectFundingSource.ProjectInvoiceReversalIDMEmailSubject
	    	else
	    		LocalIDMEmailSubject = ProjectFundingSource.ProjectInvoiceIDMEmailSubject
    		return LocalIDMEmailSubject text
    		
    	DerivedProjectInvoiceIDMEmailSubjectContinuation is a StringField
    		type is Alpha size 255
    		restricted
    		DerivedProjectInvoiceIDMEmailSubject[0:249]
    		" Cont."
    	
    	DerivedCustomEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			if (ResendEmail)
				return DerivedProjectInvoiceIDMEmailSubjectContinuation
			else
				return DerivedProjectInvoiceIDMEmailSubject

		SubmitForApprovalMF is a MessageField
			restricted
			"This_request_will_be_routed_for_approval;_after_it_is_reviewed_this_record_will_be_updated"
			
		DerivedGenerationNotification is a MessageField
			"Generate_Invoice_from_Project_Contract."
	    	
		DerivedGenerationNotificationForReversal is a MessageField
			"Generate_Invoice_Reversal_from_Project_Contract."
		
		DerivedGenerationNotificationForSummary is a MessageField
			"Generate_Invoice_Summary_from_Project_Contract."
	    	
		DerivedGenerationNotificationForSummaryReversal is a MessageField
			"Generate_Invoice_Summary_Reversal_from_Project_Contract."
		
		DerivedGenerationNotificationForIDM is a DerivedField
			type is MessageField
			if (InvoiceType.Reversal)
				if (ProjectContract.CreateSummarizedInvoices)
					return DerivedGenerationNotificationForSummaryReversal
				else
					return DerivedGenerationNotificationForReversal
			else
				if (ProjectContract.CreateSummarizedInvoices)
					return DerivedGenerationNotificationForSummary		
				else
					return DerivedGenerationNotification
					
		DerivedGenerationWithMaxAttachmentsNotification is a MessageField
			"Generate_Invoice_from_Project_Contract._Maximum_attachment_limit_reached._Some_attachments_may_not_be_sent_through_email."
	    			
		DerivedGenerationWithMaxAttachmentsNotificationForSummary is a MessageField
			"Generate_Invoice_Summary_from_Project_Contract._Maximum_attachment_limit_reached._Some_attachments_may_not_be_sent_through_email."
	    			
		DerivedGenerationWithMaxAttachmentsNotificationForIDM is a DerivedField
			type is MessageField
			if (ProjectContract.CreateSummarizedInvoices)
				return DerivedGenerationWithMaxAttachmentsNotificationForSummary		
			else
				return DerivedGenerationWithMaxAttachmentsNotification

		DerivedEmailNotification is a MessageField
			"Invoice_was_emailed."

		DerivedEmailNotificationForReversal is a MessageField
			"Invoice_Reversal_was_emailed."

		DerivedEmailNotificationForIDM is a DerivedField
			type is MessageField
			if (InvoiceType.Reversal)
				return DerivedEmailNotificationForReversal
			else
				return DerivedEmailNotification

		DerivedEmailWithMaxAttachmentsNotification is a MessageField
			"Invoice_was_emailed._Maximum_attachment_limit_reached._Some_attachments_may_not_be_sent_through_email."

		DerivedEmailWithMaxAttachmentsNotificationForReversal is a MessageField
			"Invoice_Reversal_was_emailed._Maximum_attachment_limit_reached._Some_attachments_may_not_be_sent_through_email."

		DerivedEmailWithMaxAttachmentsNotificationForIDM is a DerivedField
			type is MessageField
			if (InvoiceType.Reversal)
				return DerivedEmailWithMaxAttachmentsNotificationForReversal
			else
				return DerivedEmailWithMaxAttachmentsNotification
		
		DerivedPrintNotification is a MessageField
			"Invoice_was_printed_to_<PrinterName>."
			
		DerivedPrintNotificationForReversal is a MessageField
			"Invoice_Reversal_was_printed_to_<PrinterName>."

		DerivedPrintNotificationForIDM is a DerivedField
			type is MessageField
			if (InvoiceType.Reversal)
				return DerivedPrintNotificationForReversal
			else
				return DerivedPrintNotification

		DerivedFromEmail is a DerivedField
			type is like EmailAddress
			restricted
			if (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress entered)
				return FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
			else
				return config.DefaultFromEmailAddress	

		ReversalText is a DerivedField
			type is MessageField
			restricted
			if (FinanceDimension2.FundingType.IntercompanyBilling)
				return IntercompanyBillReversalMF
			else
				return InvoiceReversalMF
				
		IntercompanyBillReversalMF is a MessageField
			restricted
			"IntercompanyBillReversal"
			
		InvoiceReversalMF is a MessageField
			restricted
			"InvoiceReversal"

		InvoiceNotCreatedMF is a MessageField
			restricted
			"ReceivableInvoiceNotCreated"

		InvoiceNotReleasedMF is a MessageField
			restricted
			"ReceivableInvoiceNotReleased"

		DistributionNotCreatedMF is a MessageField
			restricted
			"ReceivableDistributionNotCreated"

		ErrorSuspenseCreatedMF is a MessageField
			restricted
			"ErrorSuspenseTransactionMayHaveBeenCreated"
			
		PassThroughErrorMF is a MessageField
			restricted
			"PassThroughFinanceStructureMissingOrIncorrect;_ErrorSuspenseTransactionCreated"

		AdjustmentErrorMF is a MessageField
			restricted
			"RevenueAdjustmentFinanceStructureMissingOrIncorrect;_ErrorSuspenseTransactionCreated"

		RevenueErrorText is a DerivedField
			type is MessageField
			if (LocalTableType = 2)
				return AdjustmentErrorMF
			else
			if (LocalTableType = 1)
				return PassThroughErrorMF
			else
				return ErrorSuspenseCreatedMF
#ifdef module ar			
		CashApplied is a DerivedField	
			type is like CurrencyAmount		
			return sum ReceivableInvoiceRel.ProjectAppliedReceivableInvoiceDetailAmount
#endif			
		InvoiceTotalAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return TotalInvoiceAmount
		InvoiceReversalTotalAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include CalculateInvoiceReversalTotals	
			return LocalInvoiceReversalTotalAmounts		
		InvoiceSummaryTotalAmounts is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include CalculateInvoiceSummaryTotals	
			return LocalInvoiceSummaryTotalAmounts		
		InvoiceSummaryTotalUnitsAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include CalculateInvoiceSummaryTotals	
			return LocalInvoiceSummaryTotalUnitsAmount		
		InvoiceSummaryTotalTaxAmounts is a DerivedField	 					
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include CalculateInvoiceSummaryTotals	
			return LocalInvoiceSummaryTotalTaxAmounts		
		InvoiceTotalSummaryAmountAndTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return InvoiceSummaryTotalAmounts + InvoiceSummaryTotalTaxAmounts
		InvoiceTotalUnitsAmount is a DerivedField
			type is like UnitsAmount
			return TotalUnits
		InvoiceTotalRetainerAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalRetainer
		InvoiceBilledAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return (InvoiceTotalAmount - InvoiceTotalRetainerAmount - InvoiceTotalAllowance - InvoiceTotalPassThrough)
		InvoiceTotalAllowance is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalAllowance
		InvoiceTotalRetainage is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalRetainage
		InvoiceTotalRetainedTax is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return TotalRetainedTax
		InvoiceTotalTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return TotalTax
		InvoiceTotalReversalTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include CalculateInvoiceReversalTotals				
			return LocalInvoiceReversalTotalTaxAmounts
		InvoiceTotalAmountaAndTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return InvoiceTotalAmount + InvoiceTotalTaxAmount
		InvoiceReversalTotalAmountaAndTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return InvoiceReversalTotalAmount + InvoiceTotalReversalTaxAmount
		InvoiceReversalTotalAmountAndTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return InvoiceReversalTotalAmount + InvoiceTotalReversalTaxAmount
		InvoiceTotalFees is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return TotalFees
		InvoiceTotalAdvance is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalAdvance
		InvoiceTotalPassThrough is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalPassThrough
		InvoiceTotalAdjustment is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (!InvoiceType.Retainer)
				return TotalAdjustment
		RetainerText is a ConditionalField
			type is Alpha size 25
			restricted
			if (InvoiceType.Retainer
			and InvoiceTotalAmount >= 0)			
				RetainerMF
			else
				AdjustmentMF
		RetainerMF is a MessageField
			restricted
			"Retainer"
		AdjustmentMF is a MessageField
			restricted
			"RetainerAdjustment"			
		PostingDate is a DerivedField
			type is Date
			if (JournalizeGroup entered)
				return first GLTransactionJournalizeGroupRel.PostingDate
#ifdef module intercobilling
			else
			if (Status.Journalized)
				return first IntercompanyBillingTransactionRel.PostingDate
#endif
#ifdef module ar		
		DerivedInvoiceNumber is a StringField
			type is AlphaUpper 22
			FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectInvoicePrefix
			LocalInvoiceNumber

		DerivedCreditNumber is a StringField
			type is AlphaUpper 22
			FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditMemoPrefix
			LocalCreditNumber
			
		DerivedRemitTo is a DerivedField
			type is Alpha 500
			if (FinanceDimension2.CompanyCustomerGroup.CompanyCustomer.ReceivableLockBox.PostalAddress entered)
				return FinanceDimension2.CompanyCustomerGroup.CompanyCustomer.ReceivableLockBox.PostalAddress
			else
				return FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.PostalAddress
				
		DerivedTermsCode is a DerivedField
			type is like TermsCode
			if (InvoiceType.Retainer
			and first ProjectContractInvoiceLine set.ProjectContractRetainer.TermsCode entered)
				return first ProjectContractInvoiceLine set.ProjectContractRetainer.TermsCode
			else
			if (ProjectFundingSource.TermsCode entered)
				return ProjectFundingSource.TermsCode
			else	
				return CompanyCustomerRel.TermsCode
				
		DerivedInvoiceTypeCode is a DerivedField
			type is like InvoiceTypeCode
			if (ProjectFundingSource.CompanyCustomerGroup.InvoiceTypeCode entered)
				return ProjectFundingSource.CompanyCustomerGroup.InvoiceTypeCode
			else	
				return FinanceDimension2.CompanyCustomerGroup.InvoiceTypeCode
						
		DerivedDraftInvoiceNumber is a StringField
			type is AlphaUpper 22
			"DRAFT"
			ProjectContractInvoice
				
		DerivedInvoicePrintNumber is a DerivedField				
	        type is AlphaUpper size 22
	        if (Status.Created)
	        	return DerivedDraftInvoiceNumber
	        else	
				return first ReceivableInvoiceRel.ReceivableInvoice

		DerivedDueDate is a DerivedField
			type is Date
	        if (Status.Created)
	        	return blank
	        else	
				return first ReceivableInvoiceRel.DerivedDueDate

		DerivedBillToName is a DerivedField 
			type is like Name
			holds pii
			if (ProjectFundingSource.CompanyCustomerGroup.CustomerBillTo.Name entered)
				return ProjectFundingSource.CompanyCustomerGroup.CustomerBillTo.Name
			else
				return ProjectFundingSource.CompanyCustomerGroup.Customer.Name 

		DerivedParallelReferenceLabel is a DerivedField
			type is like Description
			if (first ReceivableInvoiceRel.ParallelReference entered)
				return "Parallel Reference"
			else
				return blank	

		DerivedParallelReference is a DerivedField
			type is AlphaUpper 100
			return first ReceivableInvoiceRel.ParallelReference							
#endif		
#ifdef module idm
     	DerivedFileName is a StringField
    		type is like IDMFileName
    		restricted
#ifdef module ar    		
    		DerivedBillToName    		
			"_"
#endif
    		FinanceDimension2.DisplayDimension
    		"_"
#ifdef module ar    		
    		DerivedInvoicePrintNumber   
#endif    
			DerivedOutputFormat

     	DerivedFileNameForReversal is a StringField
    		type is like IDMFileName
    		restricted
#ifdef module ar    		
    		DerivedBillToName    		
			"_"
#endif
    		FinanceDimension2.DisplayDimension
    		"_"
#ifdef module ar    		
    		DerivedInvoicePrintNumber   
#endif
			"_Reversal"
			DerivedOutputFormat
			
     	DerivedFileNameForSummary is a StringField
    		type is like IDMFileName
    		restricted
#ifdef module ar    		
    		DerivedBillToName    		
			"_"
#endif
    		FinanceDimension2.DisplayDimension
    		"_"
#ifdef module ar    		
    		DerivedInvoicePrintNumber   
#endif
			"_Summary"
			DerivedOutputFormat

     	DerivedFileNameForSummaryReversal is a StringField
    		type is like IDMFileName
    		restricted
#ifdef module ar    		
    		DerivedBillToName    		
			"_"
#endif
    		FinanceDimension2.DisplayDimension
    		"_"
#ifdef module ar    		
    		DerivedInvoicePrintNumber   
#endif
			"_SummaryReversal"
			DerivedOutputFormat

		DerivedFileNameForIDM is a DerivedField
    		type is like IDMFileName
			restricted
			if (InvoiceType.Reversal)
				if (ProjectContract.CreateSummarizedInvoices)
					return DerivedFileNameForSummaryReversal
				else
					return DerivedFileNameForReversal
			else	
				if (ProjectContract.CreateSummarizedInvoices)
					return DerivedFileNameForSummary
				else
					return DerivedFileName

		DerivedOutputFormat is a DerivedField
			type is Alpha size 50
			if (InvoiceType.Retainer
			and first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectContractInvoiceTemplate entered)
				return first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectContractInvoiceTemplate.DerivedOutputFormat
			else
				return ProjectContract.ProjectContractInvoiceTemplate.DerivedOutputFormat
				
		DerivedIDMPrinter is a DerivedField
			type is like IDMPrinter
			restricted
			if (FinanceEnterpriseGroup.EnterpriseProjectStructure.IDMPrinter entered)
				return FinanceEnterpriseGroup.EnterpriseProjectStructure.IDMPrinter
			else
				return UserDefaultPrinterRel.IDMPrinter

		DerivedIDMInvoiceLink is a DerivedField
			type is Alpha 2083
    		if (IDMDocumentPID entered) 
    			IDMItem.DocumentType	= "FSM_ProjectContractInvoice"
    			IDMItem.IDMUniqueId		= IDMDocumentPID 
	   			return IDMItem.GetLink
			return blank
#endif

		DerivedInvoiceType is a DerivedField
			type is Alpha 30
			if (InvoiceType.Bill)
				return "Bill"
			else
			if (InvoiceType.RevenueRecognition)
				return "RevenueRecognition"
			else
    		if (InvoiceType.Retainer)
    			return "Retainer"					
    		else
    		if (InvoiceType.Reversal)					
				return "Reversal"
			else
			if (InvoiceType.Retainage)
				return "Retainage"

		DerivedStatus is a DerivedField
			type is Alpha 15
    		if (Status.Created)
	    		return "Created"		
    		else
    		if (Status.Journalized)
    			return "Journalized"

		DerivedCustomerPoNumber is a DerivedField
			type is Alpha 22
			if (ProjectFundingSource.CustomerPoNumber entered)
				return ProjectFundingSource.CustomerPoNumber
			else
				return FinanceDimension2.CustomerPoNumber

    	LineCount is a DerivedField
    		type is Numeric size 8
    		return instance count of ProjectContractInvoiceLine set

		BlankField is a DerivedField
			type is Alpha 1
			return blank
  		
	Conditions
		DisplayProjectContractCommentSection
			when (ProjectContractCommentRel exists)
		DisplayProjectContractInvoiceCommentSection
			when (ProjectContractInvoiceCommentRel exists)
		JournalizeGroupEnteredBill
			restricted
			when (JournalizeGroup entered
			and  (InvoiceType.Bill
			or    InvoiceType.Retainer
			or    InvoiceType.Retainage
			or    InvoiceType.Reversal))
		JournalizeGroupEnteredRevenue
			restricted
			when (JournalizeGroup entered
			and   InvoiceType.RevenueRecognition)
		JournalizeGroupEntered
			restricted
			when (JournalizeGroup entered)
		HasProjectContractInvoiceComment
			restricted
			when (ProjectContractInvoiceComment set exists)
		URLEntered
			restricted
			when (VendorInvoiceLink entered)
		IsJournalizedNotInternalFund
			restricted
			when (Status.Journalized
			and   CFDANumber entered
			and   !FinanceDimension2.FundingType.InternalFund)
		WithinSearchDateRange		
			restricted	
			when ((IsJournalizedNotInternalFund
			and    FinanceDimension2.SEFAFlag = true   
			and    InvoiceDate entered
			and    SearchDateRange not entered)
			or 	 (IsJournalizedNotInternalFund
   			and   FinanceDimension2.SEFAFlag = true
			and   InvoiceDate entered	
			and   SearchDateRange entered
			and   InvoiceDate within SearchDateRange))
		HasProjectContractInvoiceLineBill
			restricted
			when (ProjectContractInvoiceLineRel exists
			and   InvoiceType.Bill)
		HasProjectContractInvoiceLineRevenue
			restricted
			when (ProjectContractInvoiceLineRel exists
			and   InvoiceType.RevenueRecognition)
		HasRemovedRetainerAmounts
			restricted
			when (Status.Created
			and   InvoiceType.Bill
			and  (InvoiceTotalAmount > 0
			or    ProjectContractInvoiceAllowanceRel exists)
			and   ProjectContractInvoiceRemovedRetainerAmountsRel exists)
		HasUnbilledRetainage
			restricted
			when (RetainageInvoice not entered
			and   ProjectContractInvoiceRetainageRel exists)
		HasTax
			restricted
			when (any ProjectContractInvoiceLine set.BuyerTaxCode entered)
		HasReversalLines
			restricted
			when (InvoiceType.Reversal
			and   ProjectContractReversalLine set exists)
		HasSummaryLines
			restricted
			when (ProjectContractInvoiceSummary set exists)
		GeneratedInvoiceExists
			restricted
			when (GeneratedInvoice entered
			and  not ProjectContract.UseIDM)
		GeneratedIDMInvoiceExists
			restricted
			when (IDMDocumentPID entered
			and   ProjectContract.UseIDM)
		EligibleToEmailOrPrint
			restricted
			when (GeneratedInvoiceExists
			or GeneratedIDMInvoiceExists)
		InvoicesNeedsApproval
			restricted
			when (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)
		RevenueNeedsApproval
			restricted
			when (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)
		AnyFeeMaxed
			restricted
			when (ProjectContractInvoiceFeeMaxedRel exists)
		FundAccounting
			restricted
			when (FinanceEnterpriseGroup.FundAccounting
			and   ProjectContract.RevenueRecognition.Combined			
			and  (FinanceDimension2.FundingType.ExternalGrant
	        or    FinanceDimension2.FundingType.ExternalCustomer))
				
		OpenOrJorunalizedAndSubmittedInvoices
			restricted
			when (ApprovalStatus = 1				
			and  (InvoiceType.Bill
			or    InvoiceType.Retainer
			or    InvoiceType.Retainage))

		OpenOrJorunalizedAndSubmittedRevenue
			restricted
			when (ApprovalStatus = 1
			and   InvoiceType.RevenueRecognition)
			
		OpenOrJorunalizedAndSubmitted
			restricted
			when (OpenOrJorunalizedAndSubmittedInvoices	
			or    OpenOrJorunalizedAndSubmittedRevenue)
					
		IsGreenApprovalTag
			restricted	
			when (ApprovalStatus.Approved
			or    ApprovalStatus.RevenueReversalApproved
			or    ApprovalStatus.InvoiceReversalApproved)
		IsCredit
			restricted
			when (InvoiceTotalAmount < 0)		
		IsCreated
			restricted
			when (Status.Created
			and   !InApprovalProcess)	
			
		InApprovalProcess				
			restricted	
			when (ApprovalStatus.SubmittedForApproval
			or    ApprovalStatus.Approved)

		IsThirdPartyInvoicePrint	
			restricted
			when (FinanceEnterpriseGroup.ThirdPartyInvoicePrint)

		ThirdPartyInvoicePrinted
			restricted
			when (IsThirdPartyInvoicePrint
			and   URLEntered)

		EligableToSetPrinterStatus	
			restricted
			when (IsThirdPartyInvoicePrint
			and   ProjectFundingSource.IsExternalFund)

		RegeneratePrintableInvoiceOk
			restricted
			when (InvoiceType.Bill
			and  (FinanceDimension2.FundingType.ExternalGrant
	        or    FinanceDimension2.FundingType.ExternalCustomer)
			and  (ProjectContract.UseIDM
			or    ProjectContract.ProjectInvoiceFormat entered))





		RegeneratePrintableReversalInvoiceOk
			restricted
			when (InvoiceType.Reversal
			and  (FinanceDimension2.FundingType.ExternalGrant
	        or    FinanceDimension2.FundingType.ExternalCustomer)
			and  (ProjectContract.UseIDM
			or    ProjectContract.ProjectInvoiceReversalFormat entered))
			
		OkToCreateSummary
			restricted
			when (ProjectContract.CreateSummarizedInvoices
			and  (InvoiceType.Bill
			or    InvoiceType.Retainer
			or    InvoiceType.Retainage))

		ShowEmailCount
			restricted
			when (ProjectContract.UseIDM
			and	  EmailCount > 0)
			
		ResendEmail
			restricted
			when (ProjectContractInvoiceCommentAttachmentsResendRel exists)

		HasInvoiceComments
			restricted
			when (ProjectContractInvoiceCommentAllRel exists)
			
#ifdef module intercobilling		
		IntercompanyBillingTransactionsExist
			restricted
			when (IntercompanyBillingTransactionRel exists)
#endif
		ProjectStructureValidationPassedInvoice
			when (ProjectStructureValidationResultInvoiceRel exists
			and  ! first ProjectStructureValidationResultInvoiceRel.ErrorsExist)			

		ProjectStructureValidationFailedInvoice
			when (ProjectStructureValidationResultInvoiceRel exists
			and   first ProjectStructureValidationResultInvoiceRel.ErrorsExist)			

		ProjectStructureValidationPassedRevenue
			when (ProjectStructureValidationResultRevenueRel exists
			and  ! first ProjectStructureValidationResultRevenueRel.ErrorsExist)

		ProjectStructureValidationFailedRevenue
			when (ProjectStructureValidationResultRevenueRel exists
			and   first ProjectStructureValidationResultRevenueRel.ErrorsExist)




































					
    Relations
		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "PS"
#ifdef module ar
		SystemClosingControlARRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "AR"
		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode			= "AR"
				related.Company							= LocalAccountingEntity
#endif
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode         = "PS"				
		JournalizeGroupResultRel
			one-to-one relation to JournalizeGroupResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroupResult	= JournalizeGroup
		GLTransactionJournalizeGroupRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroup			= JournalizeGroup
		GLTransactionJournalizeGroupRevenueRel
			one-to-many relation using GLTransactionJournalizeGroupRel
			Instance Selection
				where (related.GeneralLedgerEvent = "RE")
		GLTransactionJournalizeGroupInvoiceRel
			one-to-many relation using GLTransactionJournalizeGroupRel
			Instance Selection
				where (related.GeneralLedgerEvent = "BI"
				or     related.GeneralLedgerEvent = "PE"
				or     related.GeneralLedgerEvent = "AR")
    	GLTransactionDetailRel
    		one-to-many relation to GLTransactionDetail
    		Field Mapping uses symbolic key
    			related.GLTransactionDetail = ProjectContractInvoiceLine set.GLTransactionDetail
    	ProjectContractInvoiceLineRel
    		one-to-many relation to ProjectContractInvoiceLine
    		Field Mapping uses ByProject
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice  = ProjectContractInvoice
    	ProjectContractInvoiceSummaryRel
    		one-to-many relation to ProjectContractInvoiceSummary
    		Field Mapping uses ByProject
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice  = ProjectContractInvoice
    	ProjectContractReversalLineRel
    		one-to-many relation to ProjectContractReversalLine
    		Field Mapping uses ByProject
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice  = ProjectContractInvoice
		ProjectContractInvoiceFeesRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.FeeCode entered)
		ProjectContractInvoiceAllowanceRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.IsAllowance)
		ProjectContractInvoiceRetainageRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.IsRetainage)
		ProjectContractInvoiceNonAllowanceRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (!related.IsAllowance)
		ProjectContractInvoiceFeeMaxedRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.FeeMaxed)
		ProjectContractInvoiceBaseTaxLinesRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.SingleTaxOnly)
		ProjectContractInvoiceTaxLineRel
			one-to-many relation to ProjectContractInvoiceTaxLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
		ProjectInvoiceTaxSummaryOTORel
			one-to-one relation to ProjectInvoiceTaxSummary
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = LocalServiceTaxCode
				related.TaxSummaryKey.ProductTaxCategory = LocalProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = LocalAddressCode
				related.TaxSummaryKey.ServiceAddressCode = LocalServiceAddressCode
		ProjectInvoiceTaxSummaryLineOTORel
			one-to-one relation to ProjectInvoiceTaxSummaryLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = LocalServiceTaxCode
				related.TaxSummaryKey.ProductTaxCategory = LocalProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = LocalAddressCode
				related.TaxSummaryKey.ServiceAddressCode = LocalServiceAddressCode
				related.TaxCounter				= LocalTaxCounter
		ProjectInvoiceAllocationTransactionRel
			one-to-many relation to ProjectInvoiceAllocationTransaction
			Field Mapping uses ByGLTransactionDetail
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.GLTransactionDetail		= LocalGLTransactionDetail				
		ProjectContractInvoiceAppliedRetainersRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.ProjectContractRetainer entered)
		ProjectContractInvoiceRemovedRetainerAmountsRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.AmountRemoved
				and    related.RetainerAmountAvailable)
		ProjectContractInvoiceAppliedAdvanceRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.ProjectContractAdvance.Status.Applied)
		ProjectContractInvoiceLineGLRel is a ProjectContractInvoiceLine set
			Instance Selection
				where (related.GLTransactionDetail entered)
		AppliedAdvanceInvoiceRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
			Instance Selection
				where (related.AppliedProjectContractAdvance = first ProjectContractInvoiceAppliedAdvanceRel.ProjectContractAdvance)
		ProjectContractInvoiceBalanceRel
			one-to-many relation to ProjectContractInvoiceBalance
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
			Instance Selection
				where (related.FinanceCodeBlock	= LocalFinanceCodeBlock)
		ProjectBillingOverrideRel
			one-to-one relation to ProjectBillingOverride
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.ProjectCodeBlock		= LocalProjectCodeBlock
		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= LocalReportingChart
				related.GeneralLedgerChartAccount	= LocalProjectCodeBlock.GeneralLedgerChartAccount
		FinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1			= LocalProjectCodeBlock.FinanceDimension1
		FinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceEnterpriseGroup.EnterpriseDim3Structure
				related.FinanceDimension3			= LocalProjectCodeBlock.FinanceDimension3
		FinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceEnterpriseGroup.EnterpriseDim4Structure
				related.FinanceDimension4			= LocalProjectCodeBlock.FinanceDimension4
		FinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceEnterpriseGroup.EnterpriseDim5Structure
				related.FinanceDimension5			= LocalProjectCodeBlock.FinanceDimension5
		FinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceEnterpriseGroup.EnterpriseDim6Structure
				related.FinanceDimension6			= LocalProjectCodeBlock.FinanceDimension6
		FinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceEnterpriseGroup.EnterpriseDim7Structure
				related.FinanceDimension7			= LocalProjectCodeBlock.FinanceDimension7
		FinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceEnterpriseGroup.EnterpriseDim8Structure
				related.FinanceDimension8			= LocalProjectCodeBlock.FinanceDimension8
		FinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceEnterpriseGroup.EnterpriseDim9Structure
				related.FinanceDimension9			= LocalProjectCodeBlock.FinanceDimension9
		FinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceEnterpriseGroup.EnterpriseDim10Structure
				related.FinanceDimension10			= LocalProjectCodeBlock.FinanceDimension10
		ProjectHierarchyRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ProjectStructure			= FinanceEnterpriseGroup.EnterpriseProjectStructure
				related.Project						= LocalProject

#ifndef module ar
		EnterpriseSystemAcctUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingUnitStructure = FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity        = LocalAccountingEntity
#endif
		ProjectContractMilestoneRel
			one-to-many relation to ProjectContractMilestone
			Field Mapping uses ByMilestoneType
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2       = LocalFinanceDimension2
    			related.MilestoneType			= LocalType
    		Instance Selection
    			where (related.Status = 4)

#ifdef module ar
		CompanyCustomerRel
	    	one-to-one relation to CompanyCustomer
            Field Mapping uses symbolic key
	            related.Company  = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
	            related.Customer = FinanceDimension2.CompanyCustomerGroup.Customer
	            
        ReceivableInvoiceRel
            one-to-many relation to ReceivableInvoice
            Field Mapping uses ByProjectContractInvoice
          	    related.ProjectContract             = ProjectContract
                related.FinanceDimension2           = FinanceDimension2
                related.ProjectContractInvoice      = ProjectContractInvoice
            Instance Selection
	          	where (related.Company.CustomerBusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
#endif
#ifdef module tx
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxEntity				= LocalTaxEntity
 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
       	CompanyTaxCodeRel
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.TaxEntity 				= LocalTaxEntity
                related.TaxCode					= LocalTaxCode 
#endif
#ifdef module idm
		UserDefaultPrinterRel
			one-to-one relation to UserDefaultPrinter
			Field Mapping uses symbolic key
				related.UserDefaultPrinter.Actor = actor

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_ProjectContractInvoice"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)
#endif	

		RetainedInvoicesRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRetainageInvoice
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.RetainageInvoice		= ProjectContractInvoice

		RetainageInvoiceRel
			one-to-one relation to ProjectContractInvoice
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= RetainageInvoice
							
		ApprovedInvoicesRel 
            one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
          	    related.ProjectContract        = ProjectContract
				related.RunGroup               = LocalRunGroup          	    
			Instance Selection
				where (related.ApprovalStatus = 2)

		ApprovedRevenueReversalRel 
            one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
          	    related.ProjectContract        = ProjectContract
				related.RunGroup               = LocalRunGroup          	    
			Instance Selection
				where (related.ApprovalStatus = 4)

		ApprovedInvoiceReversalRel 
            one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
          	    related.ProjectContract        = ProjectContract
				related.RunGroup               = LocalRunGroup          	    
			Instance Selection
				where (related.ApprovalStatus = 5)

		RejectedInvoicesRel 
            one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
          	    related.ProjectContract        = ProjectContract
				related.RunGroup               = LocalRunGroup          	    
			Instance Selection
				where (related.ApprovalStatus = 3)

		SubmittedForApprovalInvoicesRel 
            one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
          	    related.ProjectContract        = ProjectContract
				related.RunGroup               = LocalRunGroup          	    
			Instance Selection
				where (related.ApprovalStatus = 1)
				
		ProjectContractRunGroupRel
			one-to-one relation to ProjectContractRunGroup
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
          	    related.ProjectContract			= LocalProjectContract
				related.ProjectContractRunGroup = LocalRunGroup          	    

		RunGroupInvoicesRel
			one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
          	    related.ProjectContract			= LocalProjectContract
				related.RunGroup				= LocalRunGroup          	    

		ReverseInvoiceFormatRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRunGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.RunGroup				= LocalRunGroup
			Instance Selection
				where (related.ProjectFundingSource.IsExternalFund)
				
		ProjectContractCommentAttachmentsRel
			one-to-many relation to ProjectContractComment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
			Instance Selection
				where (related.Attachment entered
				and	   related.SendToCustomer)
				
		ProjectContractInvoiceCommentAttachmentsRel
			one-to-many relation to ProjectContractInvoiceComment
            Field Mapping uses ByProjectContractCommentDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract      	= ProjectContract				
				related.ProjectContractInvoice	= ProjectContractInvoice
			Instance Selection
				where (related.Attachment entered
				and	   related.SendToCustomer)				
		
		ProjectContractInvoiceCommentAttachmentsResendRel
			one-to-many relation to ProjectContractInvoiceComment
            Field Mapping uses ByProjectContractCommentDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract      	= ProjectContract
				related.ProjectContractInvoice	= ProjectContractInvoice
			Instance Selection
				where (related.Attachment entered
				and	   related.SendToCustomer
				and    related.AttachmentForResend)
				
		ProjectContractCommentRel
			one-to-many relation to ProjectContractComment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
			Instance Selection
				where (related.PrintOnInvoice)
				
		ProjectContractInvoiceCommentRel
			one-to-many relation to ProjectContractInvoiceComment
            Field Mapping uses ByProjectContractCommentDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract      	= ProjectContract
				related.ProjectContractInvoice	= ProjectContractInvoice
			Instance Selection
				where (related.PrintOnInvoice)	

		ProjectContractInvoiceCommentAllRel
			one-to-many relation to ProjectContractInvoiceComment
            Field Mapping uses ByProjectContractCommentDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract      	= ProjectContract
				related.ProjectContractInvoice	= ProjectContractInvoice

#ifdef module intercobilling
		IntercompanyBillingTransactionRel
			one-to-many relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingDocument
				related.IntercompanyBillingGroup	= FinanceEnterpriseGroup
				related.OriginatingDocument			= reference to this instance
#endif
    	ProjectStructureValidationResultInvoiceRel
    		one-to-many relation to ProjectStructureValidationResult
    		Field Mapping uses ByContractAndInvoice
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Contract			    = ProjectContract.DisplayProject
				related.Invoice                 = ProjectContractInvoice
			Instance Selection
				where (related.TestType.Invoice)
    	ProjectStructureValidationResultRevenueRel
    		one-to-many relation to ProjectStructureValidationResult
    		Field Mapping uses ByContractAndInvoice
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Contract			    = ProjectContract.DisplayProject
				related.Invoice                 = ProjectContractInvoice
			Instance Selection
				where (related.TestType.Revenue)
		ProjectStructureValidationErrorInvoiceRel
    		one-to-many relation to ProjectStructureValidationError
 			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectStructureValidationResult = first ProjectStructureValidationResultInvoiceRel.ProjectStructureValidationResult
		ProjectStructureValidationErrorRevenueRel
    		one-to-many relation to ProjectStructureValidationError
 			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectStructureValidationResult = first ProjectStructureValidationResultRevenueRel.ProjectStructureValidationResult				
		ProjectStructureValidationLineOTORel
			one-to-many relation to ProjectStructureValidationLine
			Field Mapping uses ByValidationCodeBlock
				related.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
				related.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult
				related.ValidationCodeBlock.AccountingEntity = LocalAccountingEntity
				related.ValidationCodeBlock.FinanceCodeBlock = LocalCodeBlock
		ProjectStructureValidationLineRel
			one-to-many relation to ProjectStructureValidationLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
				related.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult
		ProjectInvoiceRevenueLineOTORel
			one-to-many relation to ProjectInvoiceRevenueLine
			Field Mapping uses ByFinanceCodeBlock
    			related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ProjectContract				 = ProjectContract
				related.FinanceDimension2			 = FinanceDimension2
				related.ProjectContractInvoice  	 = ProjectContractInvoice
				related.RevenueLineKey.Validation	 = LocalValidation
				related.RevenueLineKey.TableType	 = LocalTableType
				related.RevenueLine.FinanceCodeBlock = LocalRevenueCodeBlock
		ProjectInvoiceRevenueLineNormalRel
			one-to-many relation to ProjectInvoiceRevenueLine
			Field Mapping uses ByFinanceCodeBlock
    			related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ProjectContract				 = ProjectContract
				related.FinanceDimension2			 = FinanceDimension2
				related.ProjectContractInvoice  	 = ProjectContractInvoice
				related.RevenueLineKey.Validation	 = LocalValidation
				related.RevenueLineKey.TableType	 = 0
		ProjectInvoiceRevenueLineNoPTRel
			one-to-many relation to ProjectInvoiceRevenueLine
			Field Mapping uses ByFinanceCodeBlock
    			related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ProjectContract				 = ProjectContract
				related.FinanceDimension2			 = FinanceDimension2
				related.ProjectContractInvoice  	 = ProjectContractInvoice
				related.RevenueLineKey.Validation	 = LocalValidation
			Instance Selection
				where (related.RevenueLineKey.TableType != 1)
		ProjectInvoiceRevenueLineAllRel
			one-to-many relation to ProjectInvoiceRevenueLine
			Field Mapping uses ByFinanceCodeBlock
    			related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ProjectContract				 = ProjectContract
				related.FinanceDimension2			 = FinanceDimension2
				related.ProjectContractInvoice  	 = ProjectContractInvoice
				related.RevenueLineKey.Validation	 = LocalValidation

	Sets
		ByRunGroup
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				RunGroup
				ProjectContractInvoice
				FinanceDimension2
		ByRunGroupAndFD2
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				RunGroup
				FinanceDimension2
				ProjectContractInvoice
		ByCFDANumber
			duplicates		
			Sort Order		
				FinanceEnterpriseGroup
				CFDANumber
		ByRetainageInvoice
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				FinanceDimension2
				RetainageInvoice
				ProjectContractInvoice
				
    Field Rules
    	InvoiceDate
    		if (Status.Journalized)
    			cannot be changed

#ifdef module idm
	Create Rules  
        include IDM.CreateRules 
            replace AttachmentField with GeneratedInvoice  

    Delete Rules
        include IDM.DeleteNoArchiveRules
            replace AttachmentField with GeneratedInvoice

    Commit Rules
        include IDM.CommitRules
            replace AttachmentField with GeneratedInvoice
#endif	

	Actions
		Create is a Create Action
			restricted

		UpdateProjectInvoiceTemplate is an Update Action
			restricted
			Action Rules	
				initialize GeneratedInvoice.File
				initialize GeneratedInvoice.Title
				initialize GeneratedInvoice.MimeType
				if (InvoiceType.Retainer
				and first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat entered)
					GeneratedInvoice.File	  = first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.File document
					if (first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType = "application/pdf")
						GeneratedInvoice.Title = "ProjectContractInvoiceTemplate.pdf"
					else	
					if (first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType = "application/rtf")
						GeneratedInvoice.Title = "ProjectContractInvoiceTemplate.rtf"				
					GeneratedInvoice.MimeType = first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType
				else				
					GeneratedInvoice.File	  = ProjectContract.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.File document
					if (ProjectContract.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType = "application/pdf")
						GeneratedInvoice.Title = "ProjectContractInvoiceTemplate.pdf"
					else	
					if (ProjectContract.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType = "application/rtf")
						GeneratedInvoice.Title = "ProjectContractInvoiceTemplate.rtf"				
					GeneratedInvoice.MimeType = ProjectContract.ProjectInvoiceFormat.ProjectContractInvoiceTemplate.MimeType
				if (PrintOrEmail)
					if (ProjectFundingSource.InvoiceIssueMethod.Email)
			        	send email
			            	to ProjectFundingSource.BillToEmailAddress
			                from FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
			                subject "ProjectContractInvoice<ProjectContractInvoice>"
			                Attachments
			                	attachment GeneratedInvoice.File
				              		name is GeneratedInvoice.Title
			                  	  	mime type is GeneratedInvoice.MimeType
			                Contents 
			                	"ProjectContractInvoice<ProjectContractInvoice>Attached."
					if (ProjectFundingSource.InvoiceIssueMethod.Print)
			        	send email
			            	to PrinterEmailAddress
			                from FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
			                subject "ProjectContractInvoice<ProjectContractInvoice>"
			                Attachments
			                	attachment GeneratedInvoice.File
				              		name is GeneratedInvoice.Title
			                  	  	mime type is GeneratedInvoice.MimeType
			                Contents 
			                	"ProjectContractInvoice<ProjectContractInvoice>Attached."

		UpdateProjectInvoiceReversalTemplate is an Update Action
			restricted
			Action Rules	
				initialize GeneratedInvoice.File
				initialize GeneratedInvoice.Title
				initialize GeneratedInvoice.MimeType
				GeneratedInvoice.File	  = ProjectContract.ProjectInvoiceReversalFormat.ProjectContractInvoiceReversalTemplate.File document
				if (ProjectContract.ProjectInvoiceReversalFormat.ProjectContractInvoiceReversalTemplate.MimeType = "application/pdf")
					GeneratedInvoice.Title = "ProjectContractInvoiceReversalTemplate.pdf"
				else	
				if (ProjectContract.ProjectInvoiceReversalFormat.ProjectContractInvoiceReversalTemplate.MimeType = "application/rtf")
					GeneratedInvoice.Title = "ProjectContractInvoiceReversalTemplate.rtf"				
				GeneratedInvoice.MimeType = ProjectContract.ProjectInvoiceReversalFormat.ProjectContractInvoiceReversalTemplate.MimeType
				if (PrintOrEmail)
					if (ProjectFundingSource.InvoiceIssueMethod.Email)
			        	send email
			            	to ProjectFundingSource.BillToEmailAddress
			                from FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
			                subject "ProjectContractInvoiceReversal<ProjectContractInvoice>"
			                Attachments
			                	attachment GeneratedInvoice.File
				              		name is GeneratedInvoice.Title
			                  	  	mime type is GeneratedInvoice.MimeType
			                Contents 
			                	"ProjectContractInvoiceReversal<ProjectContractInvoice>Attached."
					if (ProjectFundingSource.InvoiceIssueMethod.Print)
			        	send email
			            	to PrinterEmailAddress
			                from FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
			                subject "ProjectContractInvoiceReversal<ProjectContractInvoice>"
			                Attachments
			                	attachment GeneratedInvoice.File
				              		name is GeneratedInvoice.Title
			                  	  	mime type is GeneratedInvoice.MimeType
			                Contents 
			                	"ProjectContractInvoiceReversal<ProjectContractInvoice>Attached."

					
		EmailInvoice is an Instance Action	
			valid when (EligibleToEmailOrPrint)
			
			Local Fields
#ifdef module idm			
				IDMJobView	 is an IDMJob view
#endif				
			Parameters
				PrmFromEmailAddress is an EmailAddress	
					default label is "FromEmail"		
				PrmToEmailAddress   is an EmailAddressMulti 
					holds pii
					default label is "ToEmail"
				PrmCcEmailAddress	is an EmailAddressMulti 
					holds pii
					default label is "CcEmail"
			Parameter Rules
				PrmFromEmailAddress
					required
					default to DerivedFromEmail
					initial value is DerivedFromEmail
				PrmToEmailAddress
					required	
					default to ProjectFundingSource.BillToEmailAddress
					initial value is ProjectFundingSource.BillToEmailAddress
				PrmCcEmailAddress
					initial value is FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress					
			Action Rules	
#ifdef module idm			
				if (GeneratedIDMInvoiceExists)
					initialize IDMGenerateDocument
    				IDMGenerateDocument.IDMXMLDefinition.Busclass									 = reference to this instance
	    		
					if (InvoiceType.Reversal)
						if (ProjectContract.CreateSummarizedInvoices)
							IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractSummaryInvoiceReversalForIDMDoc"
			    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractSummaryInvoiceReversal"				    		
			
			       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceSummaryRel"
			    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractSummaryInvoiceReversalLineForIDMDoc"
			    		
						else
			    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractInvoiceReversalForIDMDoc"
			    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractInvoiceReversal"				    		
			
			       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractReversalLineRel"
			    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractReversalLineForIDMDoc"
			    					
					
					else
						if (ProjectContract.CreateSummarizedInvoices)
			    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractSummaryInvoiceForIDMDoc"
			    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractSummaryInvoice"				    		
			
			       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceSummaryRel"
			    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractSummaryInvoiceLineForIDMDoc"
			    		
						else
			    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractInvoiceForIDMDoc"
			    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractInvoice"				    		
			
			       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceLineRel"
			    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractInvoiceLineForIDMDoc"
			    	
			    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 = 1
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag		 = "Lines"
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag		 = "Line"
					
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName	 = "ProjectContractInvoiceCommentRel"
			    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName 	 = "ProjectContractInvoiceCommentForIDM"
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 = 2
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag		 = "ProjectContractInvoiceComments"
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag		 = "InvoiceContractComments"
					
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName	 = "ProjectContractCommentRel"
			    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName 	 = "ProjectContractCommentForIDM"
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1 = 3
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag		 = "ProjectContractComments"
					IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag		 = "ContractComments"
											
					initialize IDMItem
					IDMItem.DocumentType  	 = "FSM_ProjectContractInvoice"
					IDMItem.IDMUniqueId	  	 = IDMDocumentPID
					IDMItem.IDMXMLDefinition = IDMGenerateDocument.IDMXMLDefinition
					IDMItem.IDMEmail.From 	 = PrmFromEmailAddress
					IDMItem.IDMEmail.To   	 = PrmToEmailAddress
					IDMItem.IDMEmail.Cc		 = PrmCcEmailAddress
					ToEmailAddress			 = PrmToEmailAddress
					
					if (InvoiceType.Reversal)		    			
		    			if (ProjectFundingSource.ProjectInvoiceIDMEmailTemplate entered)
							IDMItem.EmailTemplateUniqueID	= ProjectFundingSource.ProjectInvoiceReversalIDMEmailTemplate.IDMUniqueId	
		    			else
		    				IDMItem.IDMEmail.Body			= DerivedEmailBodyForReversal	    			
	    			
		    			if (ProjectFundingSource.ProjectInvoiceIDMEmailSubject entered)
		    				IDMItem.IDMEmail.Subject        = DerivedCustomEmailSubject
		    			else
		    				IDMItem.IDMEmail.Subject		= DerivedDefaultEmailSubjectForReversal
		    				
		    		else
		    			if (ProjectFundingSource.ProjectInvoiceReversalIDMEmailTemplate entered)
							IDMItem.EmailTemplateUniqueID	= ProjectFundingSource.ProjectInvoiceIDMEmailTemplate.IDMUniqueId
		    			else
		    				IDMItem.IDMEmail.Body			= DerivedEmailBody			    			
	    			
		    			if (ProjectFundingSource.ProjectInvoiceReversalIDMEmailSubject entered)
		    				IDMItem.IDMEmail.Subject        = DerivedCustomEmailSubject
		    			else
		    				IDMItem.IDMEmail.Subject		= DerivedDefaultEmailSubject
		    			
		    		initialize LocalIDMAttachmentSize
		    		LocalIDMAttachmentCtr = 1	
		    			
					if (ResendEmail)
						for each ProjectContractInvoiceCommentAttachmentsResendRel
							if (LocalIDMAttachmentCtr > 100)
								end for each
							if ((LocalIDMAttachmentSize + each.Attachment.FileSizeBytes) <= 10485760)
								IDMItem.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
								LocalIDMAttachmentCtr += 1
								LocalIDMAttachmentSize  += each.Attachment.FileSizeBytes
								invoke FastUpdate each.ProjectContractInvoiceComment
									invoked.AttachmentForResend = false
									
					else
						for each ProjectContractCommentAttachmentsRel
							if (LocalIDMAttachmentCtr > 100)
								end for each
							if ((LocalIDMAttachmentSize + each.Attachment.FileSizeBytes) <= 10485760) 
								IDMItem.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
								LocalIDMAttachmentCtr += 1
								LocalIDMAttachmentSize += each.Attachment.FileSizeBytes
								
						for each ProjectContractInvoiceCommentAttachmentsRel
							if (LocalIDMAttachmentCtr > 100)
								end for each
							if ((LocalIDMAttachmentSize + each.Attachment.FileSizeBytes) <= 10485760) 
								IDMItem.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
								LocalIDMAttachmentCtr += 1
								LocalIDMAttachmentSize += each.Attachment.FileSizeBytes
							else
								invoke FastUpdate each.ProjectContractInvoiceComment
									invoked.AttachmentForResend = true									
										
					constraint (IDMItem.GetItemDetails)
						"DocumentDoesNotExistInIDM"
					
					IDMItem.IDMPID    = IDMItem.IDMItemDetails.PID
						
					invoke SendToEmail IDMJob
						assign result to IDMJobView
						if (LocalIDMAttachmentCtr = 101)
							invoked.LongDescription = DerivedEmailWithMaxAttachmentsNotificationForIDM
						else
		   					invoked.Description = DerivedEmailNotificationForIDM
						invoked.FileName    = DerivedFileNameForIDM
						invoked.IDMItem		= IDMItem
						
					invoke UpdateEmailCount in background
						run after IDMJobView.IDMJob.AsyncId
						invoked.PrmIDMJob = IDMJobView.IDMJob
					
					invoke CheckResendEmail in background
						run after IDMJobView.IDMJob.AsyncId
						invoked.PrmFromEmailAddress = PrmFromEmailAddress
						invoked.PrmToEmailAddress 	= PrmToEmailAddress
						invoked.PrmCcEmailAddress 	= PrmCcEmailAddress						
#endif				
				if (GeneratedInvoiceExists)
		        	send email
		            	to PrmToEmailAddress
		                from PrmFromEmailAddress
		                subject "ProjectContractInvoice<ProjectContractInvoice>"
		                Attachments
		                	attachment GeneratedInvoice.File
			              		name is GeneratedInvoice.Title
		                  	  	mime type is GeneratedInvoice.MimeType
		                Contents 
		                	"ProjectContractInvoice<ProjectContractInvoice>Attached."

		SendInvoiceToPrinter is an Instance Action	
			valid when (EligibleToEmailOrPrint)	
			Local Fields
							
			Parameters
				PrmFromEmailAddress 	 is an EmailAddress	
					default label is "FromEmail"		
				PrmToPrinterEmailAddress is an EmailAddress 
					holds pii
					default label is "ToPrinter"
#ifdef module idm					
				PrmIDMPrinter			 is an IDMPrinter
					default label is "ToIDMPrinter"
#endif				
			Parameter Rules					
				PrmFromEmailAddress
					initial value is FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress					
					default to FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
					if (!ProjectContract.UseIDM)
						required
				PrmToPrinterEmailAddress
					initial value is FinanceEnterpriseGroup.EnterpriseProjectStructure.InvoicePrinterEmailAddress					
					default to FinanceEnterpriseGroup.EnterpriseProjectStructure.InvoicePrinterEmailAddress
					if (!ProjectContract.UseIDM)
						required
#ifdef module idm	
				PrmIDMPrinter
					initial value is DerivedIDMPrinter
					if (ProjectContract.UseIDM)
						required
#endif
			Action Rules		
#ifdef module idm			
				if (GeneratedIDMInvoiceExists)
					initialize IDMItem
					IDMItem.DocumentType = "FSM_ProjectContractInvoice"		
					IDMItem.IDMUniqueId	 = IDMDocumentPID
	   				IDMItem.FileName     = DerivedFileNameForIDM
	   				IDMItem.IDMPrinter	 = PrmIDMPrinter 
	   				PrinterName			 = PrmIDMPrinter
	   				
					constraint (IDMItem.GetItemDetails)
						"DocumentDoesNotExistInIDM"
					
					IDMItem.IDMPID       = IDMItem.IDMItemDetails.PID
						
	   				invoke SendToPrinter IDMJob
	   					invoked.Description = DerivedPrintNotificationForIDM
   						invoked.FileName    = DerivedFileNameForIDM
	   					invoked.IDMItem		= IDMItem
				else
#endif
				if (GeneratedInvoiceExists)
		        	send email
		            	to PrmToPrinterEmailAddress
		                from PrmFromEmailAddress
		                subject "ProjectContractInvoice<ProjectContractInvoice>"
		                Attachments
		                	attachment GeneratedInvoice.File
			              		name is GeneratedInvoice.Title
		                  	  	mime type is GeneratedInvoice.MimeType
		                Contents 
		                	"ProjectContractInvoice<ProjectContractInvoice>Attached."

		DeleteInvoiceRecords is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmProjectContract			is a ProjectContract
				PrmRunGroup					is a ProjectContractRunGroup
				PrmRecordType				is Numeric size 1
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				RunGroup
				ProjectContractInvoice
				FinanceDimension2
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    ProjectContract			= PrmProjectContract
				and    Status = 0
				and   (RunGroup = PrmRunGroup
				or     PrmRunGroup not entered)
				and   (ApprovalStatus = blank
				or     ApprovalStatus = 3)
				and    RecordType = PrmRecordType)
			Action Rules
				ProjectContract Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						LocalProjectContract		= ProjectContract
				RunGroup Set Rules
					Entrance Rules
						LocalRunGroup				= RunGroup
					Exit Rules
						if (RunGroupInvoicesRel not exists)
							invoke Delete ProjectContractRunGroupRel
				Instance Rules

					invoke DeleteInvoiceLines ProjectContractInvoiceLine
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmProjectContract			= ProjectContract
						invoked.PrmFinanceDimension2		= FinanceDimension2
						invoked.PrmProjectFundingSource		= ProjectFundingSource
						invoked.PrmProjectContractInvoice	= ProjectContractInvoice


											
		Delete is a Delete Action
			restricted
			Action Rules
				if (InvoiceType.Bill)
					LocalInvoiceTotalAmount = ((TotalInvoiceAmount - TotalRetainer - TotalAllowance - TotalPassThrough) + TotalRetainage)
					invoke UpdateTotalBilledAmount ProjectFundingSource
						invoked.BilledAmount		= LocalInvoiceTotalAmount * -1
						invoked.BilledFees			= TotalFees * -1
						invoked.BilledAllowance		= TotalAllowance * -1
						invoked.BilledRetainage		= TotalRetainage * -1
						invoked.BilledPassThrough	= TotalPassThrough * -1
						invoked.AdjustmentAmount    = TotalAdjustment * -1
					invoke UpdateTotalBilledAmount ProjectContract
						invoked.BilledAmount		= LocalInvoiceTotalAmount * -1
						invoked.BilledFees			= TotalFees * -1
						invoked.BilledAllowance		= TotalAllowance * -1
						invoked.BilledRetainage		= TotalRetainage * -1
						invoked.BilledPassThrough	= TotalPassThrough * -1
				if (InvoiceType.Retainage)
					invoke UpdateTotalBilledAmount ProjectFundingSource
						invoked.BilledRetainage	   = TotalInvoiceAmount
					invoke UpdateTotalBilledAmount ProjectContract
						invoked.BilledRetainage	   = TotalInvoiceAmount
					invoke FastUpdate RetainedInvoicesRel
						invoked.RetainageInvoice = blank
				if (InvoiceType.RevenueRecognition)
					LocalInvoiceTotalAmount = (TotalInvoiceAmount - TotalAllowance - TotalPassThrough)
					invoke UpdateTotalRecognizedAmount ProjectFundingSource
						invoked.RecognizedAmount		= LocalInvoiceTotalAmount * -1
						invoked.RecognizedAllowance		= TotalAllowance * -1
						invoked.RecognizedPassThrough	= TotalPassThrough * -1
					invoke UpdateTotalRecognizedAmount ProjectContract
						invoked.RecognizedAmount		= LocalInvoiceTotalAmount * -1
						invoked.RecognizedFees			= TotalFees * -1
						invoked.RecognizedAllowance		= TotalAllowance * -1
						invoked.RecognizedPassThrough	= TotalPassThrough * -1

		SubmitInvoicesForApproval is an Instance Action
			restricted		
			completion message is "<CompletionMessage>"
			Parameters
			Action Rules
				CompletionMessage = SubmitForApprovalMF
				ApprovalStatus    = 1				
			Exit Rules
				trigger "JournalizeInvoiceApproval" PA service
					title is "JournalizeInvoiceApproval"
					Variables
						FinanceEnterpriseGroup
						FinanceDimension2
						ProjectContract
						ProjectContractInvoice	
						RunGroup
					URLs
						"<linkback(webapp is ProjectAccountant navigation is ProjectContractInvoiceNav text is \"ProjectContractInvoiceJournalizeApproval\")>"

		SubmitRevenueForApproval is an Instance Action
			restricted		
			completion message is "<CompletionMessage>"
			Parameters
			Action Rules
				CompletionMessage = SubmitForApprovalMF
				ApprovalStatus    = 1				
			Exit Rules
				trigger "JournalizeRevenueApproval" PA service
					title is "JournalizeRevenueApproval"
					Variables
						FinanceEnterpriseGroup
						FinanceDimension2
						ProjectContract
						ProjectContractInvoice	
						RunGroup
					URLs
						"<linkback(webapp is ProjectAccountant navigation is ProjectContractRevenueNav text is \"ProjectContractRevenueJournalizeApproval\")>"

		SubmitRevenueReversalForApproval is an Instance Action
			restricted		
			completion message is "<CompletionMessage>"
			Parameters
			Action Rules
				CompletionMessage = SubmitForApprovalMF
				ApprovalStatus    = 1				
			Exit Rules
				trigger "ReverseProjectContractRevenueApproval" PA service
					title is "ReverseProjectContractRevenueApproval"
					Variables
						FinanceEnterpriseGroup
						FinanceDimension2
						ProjectContract
						ProjectContractInvoice	
						RunGroup
					URLs
						"<linkback(webapp is ProjectAccountant navigation is ProjectContractRevenueReversalNav text is \"ProjectContractJournalizeRevenueReversalApproval\")>"

		SubmitInvoiceReversalForApproval is an Instance Action
			restricted		
			completion message is "<CompletionMessage>"
			Parameters
			Action Rules
				CompletionMessage = SubmitForApprovalMF
				ApprovalStatus    = 1				
			Exit Rules
				trigger "ReverseProjectContractInvoiceApproval" PA service
					title is "ReverseProjectContractInvoiceApproval"
					Variables
						FinanceEnterpriseGroup
						FinanceDimension2
						ProjectContract
						ProjectContractInvoice	
						RunGroup
					URLs
						"<linkback(webapp is ProjectAccountant navigation is ProjectContractInvoiceReversalNav text is \"ProjectContractJournalizedInvoiceReversalApproval\")>"
		
		RejectJournalizeInvoice is an Instance Action
			restricted
			action comment required		
			Action Rules
				ApprovalStatus = 3	
			Exit Rules			
				LocalRunGroup = RunGroup
				for each ApprovedInvoicesRel
					invoke SetToRejected each.ProjectContractInvoice

		RejectRevenueReversal is an Instance Action
			restricted
			action comment required		
			Action Rules
				ApprovalStatus = 3	
			Exit Rules			
				LocalRunGroup = RunGroup
				for each ApprovedRevenueReversalRel
					invoke SetToRejected each.ProjectContractInvoice

		RejectInvoiceReversal is an Instance Action
			restricted
			action comment required		
			Action Rules
				ApprovalStatus = 3	
			Exit Rules			
				LocalRunGroup = RunGroup
				for each ApprovedInvoiceReversalRel
					invoke SetToRejected each.ProjectContractInvoice

		ApproveJournalizeInvoice is an Instance Action
			restricted
			Action Rules
				LocalRunGroup = RunGroup			
				if (RejectedInvoicesRel exists)			
					ApprovalStatus = 3
				else
					ApprovalStatus = 2	

		ApproveRevenueReversal is an Instance Action
			restricted
			Action Rules
				LocalRunGroup = RunGroup			
				if (RejectedInvoicesRel exists)			
					ApprovalStatus = 3
				else
					ApprovalStatus = 4	

		ApproveInvoiceReversal is an Instance Action
			restricted
			Action Rules
				LocalRunGroup = RunGroup			
				if (RejectedInvoicesRel exists)			
					ApprovalStatus = 3
				else
					ApprovalStatus = 5	
			

		ResetApprovalStatus is an Instance Action
			valid when (OpenOrJorunalizedAndSubmitted)		
			Action Rules
				ApprovalStatus = blank
		
		SetToRejected is an Instance Action
			restricted
			Action Rules
				ApprovalStatus = 3

		UpdateCertificationNumber is an Instance Action
			valid when (IsCreated)
			Parameters
				PrmCertificationNumber	is a CertificationNumber	
				PrmCertificationDate	is Date
			Parameter Rules
				PrmCertificationNumber
					initial value is CertificationNumber
				PrmCertificationDate
					initial value is CertificationDate	
			Action Rules
				CertificationNumber = PrmCertificationNumber
				CertificationDate   = PrmCertificationDate

		GenerateJournalEntries is an Instance Action
			run in background
			valid when (Status.Created)
			restricted
			Parameters
				PostingDate is Date
		    	PrmPrintStatus	    is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				PrinterEmailAddress     is an EmailAddress	
#ifdef module idm			
				PrmIDMPrinter			is an IDMPrinter		
#endif					
			Parameter Rules
				PostingDate
					required
					default to InvoiceDate
					initial value is InvoiceDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar
					if (SystemClosingControlARRel exists
					and SystemClosingControlARRel.Control)
						constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control)
						constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#ifndef property federal
					if (ProjectFundingSource.IsExternalFund
					and ProjectFundingSource.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
						constraint (ProjectFundingSource.InvoiceFinanceCodeBlock entered)
							"ReceivableFinanceStructureRequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
#endif
#endif							
					if  (ProjectContract.RevenueRecognition.Separate
					and !ProjectFundingSource.RevenueCodeBlockOption.None)
						constraint (ProjectFundingSource.ClearingProject entered)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
							
				PrinterEmailAddress				
					if (ProjectFundingSource.InvoiceIssueMethod.Print)	
						default to FinanceEnterpriseGroup.EnterpriseProjectStructure.InvoicePrinterEmailAddress		
#ifdef module idm					
				PrmIDMPrinter
					if (PrmIDMPrinter not entered
					and ProjectFundingSource.InvoiceIssueMethod.Print)
						default to FinanceEnterpriseGroup.EnterpriseProjectStructure.IDMPrinter		
#endif						
									
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup
        		LocalAmount				is an InternationalAmount
        		LocalInvoiceAmount		is an InternationalAmount
        		LocalTaxAmount			is an InternationalAmount
        		LocalInvoiceTaxAmount	is an InternationalAmount
				LocalInvoiceTotal		is an InternationalAmount
				LocalTotalBilled		is an InternationalAmount
				LocalTotalRecognized	is an InternationalAmount
				LocalInvoiceDescription	is like Description
				LocalProjectIsPositive	is Boolean
				LocalProjectIsNegative	is Boolean
				LocalIsPositive			is Boolean
				LocalIsNegative			is Boolean
				Counter					is Numeric size 4
				BilledToDate			is like InternationalAmount
				EarnedUnbilledAmount	is like InternationalAmount
				BilledUnearnedAmount	is like InternationalAmount
				PassThroughAmount		is like InternationalAmount
				LocalVariance			is like InternationalAmount
        		RemainingAmount			is like InternationalAmount
        		TotalAmount				is like InternationalAmount
        		Distribute100Percent	is Boolean
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
				LocalLineNumber			is Numeric size 8
				RevenueCounter			is like SequenceNumber
				LocalJurisdictionInvoiceNumber	is Numeric 7
				TranCount				is Numeric size 2
				CreatedCount			is Numeric size 4
				TaxCodeEntered			is Boolean
				CreateReceivableLine	is Boolean
				CreateReceivableTrans	is Boolean
				LocalEvent				is like GeneralLedgerEvent
				DefaultedArray

			Entrance Rules
				if (!FinanceDimension2.FundingType.IntercompanyBilling)
		            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
					LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
					if (ProjectJurisdictionCode entered)
						increment ProjectJurisdictionCode.LastInvoiceNumber
						LocalJurisdictionInvoiceNumber = ProjectJurisdictionCode.LastInvoiceNumber
				LocalValidation = false
				invoke Purge ProjectInvoiceRevenueLineAllRel

				initialize LocalInvoiceTotalAmounts
				initialize LocalInvoiceTotalUnitsAmount
				initialize LocalInvoiceTotalTaxAmounts
				initialize LocalInvoiceTotalRetainerAmount
				initialize LocalInvoiceTotalAllowance
				initialize LocalInvoiceTotalRetainage

				initialize LocalInvoiceTotalFees
				initialize LocalInvoiceTotalAdvance
				initialize LocalInvoiceTotalPassThrough
				initialize LocalInvoiceTotalAdjustment
				LocalInvoiceTotalsComputed = true
			Action Rules
#ifdef module ar				
				if (FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject)
					initialize LocalProject
					for each ProjectContractInvoiceLineRel
						if (each.Project != LocalProject)
							if (LocalAmount > 0
							or  LocalTaxAmount > 0)
								LocalProjectIsPositive = true	
							if (LocalAmount < 0
							or  LocalTaxAmount < 0)
								LocalProjectIsNegative = true								
							LocalProject   = each.Project
							LocalTaxAmount = each.TaxAmount
							LocalAmount    = each.Amount								
						else
							LocalTaxAmount += each.TaxAmount
							LocalAmount    += each.Amount
						if (LocalProjectIsPositive and LocalProjectIsNegative)
							end for each
					if (LocalAmount    > 0
					or  LocalTaxAmount > 0)
						LocalProjectIsPositive = true	
					if (LocalAmount    < 0
					or  LocalTaxAmount < 0)
						LocalProjectIsNegative = true								
#endif				
				for each ProjectContractInvoiceLine set
					if (TranCount >= 3)
						commit transaction
						initialize TranCount
					TranCount += 1
					IsRetainer = false
					if (each.BuyerTaxCode entered)
						TaxCodeEntered = true
					LocalInvoiceDescription		  = each.DerivedInvoiceDescription
					LocalInvoiceTotalAmounts	 += each.Amount 
					LocalInvoiceTotalUnitsAmount += each.UnitsAmount
					LocalInvoiceTotalTaxAmounts  += each.TaxAmount					
					if (each.ProjectContractRetainer entered)
						LocalInvoiceTotalRetainerAmount += each.Amount
					if (each.IsAllowance)
						LocalInvoiceTotalAllowance += each.Amount
					if (each.IsRetainage)
						LocalInvoiceTotalRetainage   += each.Amount

					if (each.FeeCode entered)
						LocalInvoiceTotalFees += each.Amount
					if (each.ProjectContractAdvance entered
					or  each.AppliedProjectContractAdvance entered)
						LocalInvoiceTotalAdvance += each.Amount
					if (each.BillingMethod.PassThrough)
						LocalInvoiceTotalPassThrough += each.Amount
					if  (each.Adjusted
					and !each.Deferred
					and !each.BillingMethod.PassThrough)
						LocalInvoiceTotalAdjustment += each.AdjustmentAmount
					LocalLineNumber = each.SequenceNumber
					if (each.ProjectContractMilestone entered)
						invoke UpdateStatus each.ProjectContractMilestone
							invoked.PrmStatus = 2
					else
					if (InvoiceType.Retainer)
						invoke UpdateStatus each.ProjectContractRetainer
							invoked.PrmStatus = 2
					else
					if (each.ProjectContractAdvance entered)
						invoke Update each.ProjectContractAdvance
							invoked.Status = 1
					else
					if (each.GLTransactionDetail entered)
						if (ProjectContract.RevenueRecognition.Combined)
							if (!each.GLTransactionDetail.Billed.Processed)
								invoke UpdateBilledStatus each.GLTransactionDetail
									invoked.PrmBilled = 3
						if (ProjectContract.RevenueRecognition.Separate)
							if (!each.GLTransactionDetail.Billed.Processed
							and each.GLTransactionDetail.RevenueRecognized.Processed)
								invoke UpdateBilledStatus each.GLTransactionDetail
									invoked.PrmBilled = 3
						LocalFinanceCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
						LocalAmount = each.Amount - each.RetainedAmount
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.Amount			+= each.Amount
								invoked.UnitsAmount		+= each.UnitsAmount
								invoked.TaxAmount		+= each.TaxAmount
								invoked.BillableAmount	+= each.BillableAmount
								if (ProjectContract.RevenueRecognition.Combined)
									invoked.RevenueAmount += each.Amount
						else
							invoke Create ProjectContractInvoiceBalance
								fill in fields from each
								invoked.FinanceCodeBlock = LocalFinanceCodeBlock
								if (ProjectContract.RevenueRecognition.Combined)
									invoked.RevenueAmount = each.Amount
					if (each.Amount > 0
					or  each.TaxAmount > 0)
						LocalIsPositive = true	
					else
					if (each.Amount < 0
					or  each.TaxAmount < 0)
						LocalIsNegative = true
					if (each.ProjectContractMilestone entered
					and each.ProjectContractRetainer not entered
					and ProjectContract.RevenueRecognition.Combined
					and each.ProjectContractMilestone.TotalDistributionPercent entered
					and (!FinanceDimension2.IsInternalFund
					or   !ProjectFundingSource.RevenueCodeBlockOption.None))
						RemainingAmount = each.Amount
						TotalAmount		= each.Amount
						LocalProject	= each.Project
						RecordCount		= each.ProjectContractMilestone.RecordCount
						initialize Counter
						initialize Distribute100Percent
						if (each.ProjectContractMilestone.TotalDistributionPercent = 1)
							Distribute100Percent = true
						for each each.ProjectContractMilestone.ProjectContractMilestoneDistribution set
							Counter += 1
							LocalAmount = TotalAmount * each.Percent
							RemainingAmount -= LocalAmount
							if (Distribute100Percent
							and Counter = RecordCount
							and RemainingAmount entered)
								LocalAmount += RemainingAmount
								RemainingAmount = 0
							LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							if (each.RevenueFullAccount entered)
								LocalRevenueCodeBlock = each.RevenueFullAccount
							else
							if (each.RevenuePartialAccount entered)
								if (each.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = each.RevenuePartialAccount.ToAccountingEntity
								if (each.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
								if (each.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.RevenuePartialAccount.GeneralLedgerChartAccount
								if (each.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
								if (each.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = each.RevenuePartialAccount.FinanceDimension3
								if (each.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = each.RevenuePartialAccount.FinanceDimension4
								if (each.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = each.RevenuePartialAccount.FinanceDimension5
								if (each.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = each.RevenuePartialAccount.FinanceDimension6
								if (each.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = each.RevenuePartialAccount.FinanceDimension7
								if (each.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = each.RevenuePartialAccount.FinanceDimension8
								if (each.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = each.RevenuePartialAccount.FinanceDimension9
								if (each.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = each.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= LocalProject
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FundAccounting
							or  FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include CreateIntercompanyTransaction
							else
#endif										
							if (FinanceDimension2.RevenueRecognitionOption.Detail
							and LocalAmount entered)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.TransactionAmount		= LocalAmount * -1
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1
									invoked.Description				= "ProjectBilling"
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1
						if (RemainingAmount entered)
							LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
							LocalRevenueCodeBlock.Project			= LocalProject
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FundAccounting
							or  FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = RemainingAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include CreateIntercompanyTransaction
							else
#endif										
							if (FinanceDimension2.RevenueRecognitionOption.Detail)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.TransactionAmount		= RemainingAmount * -1
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1
									invoked.Description				= "ProjectBilling"									
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1
					else
						if ((InvoiceType.Retainer
						or  each.ProjectContractRetainer entered
						or (ProjectContract.RevenueRecognition.Combined
						and !each.BillingMethod.PassThrough)
						or  InvoiceType.Retainage
						or  each.IsRetainage
						or  each.ProjectContractAdvance entered
						or  each.AppliedProjectContractAdvance entered)
						and (!FinanceDimension2.IsInternalFund
						or   !ProjectFundingSource.RevenueCodeBlockOption.None))
							if (FinanceDimension2.FundingType.IntercompanyBilling)
								LocalAmount = each.Amount
							else
							if  (each.Adjusted
							and !each.Deferred)
								LocalAmount = each.OriginalAmount
							else
								LocalAmount = each.Amount
							if (InvoiceType.Retainer
							or  each.ProjectContractRetainer entered)
								LocalRevenueCodeBlock	 	= each.ProjectContractRetainer.RetainerFullAccount
								IsRetainer 					= true
							else
#ifndef property federal
							if (InvoiceType.Retainage)
								LocalRevenueCodeBlock	 	= ProjectFundingSource.RetainageCodeBlock
							else
#endif
							if (each.ProjectContractAdvance entered)
								LocalRevenueCodeBlock		= each.ProjectContractAdvance.AdvanceFullAccount
							else
							if (each.AppliedProjectContractAdvance entered)
								LocalRevenueCodeBlock		= each.AppliedProjectContractAdvance.AdvanceFullAccount
							else
								LocalProject				= each.Project
								include SetLocalProjectCodeBlock
								LocalRevenueCodeBlock		= each.GLTransactionDetail.FinanceCodeBlock
								LocalRevenueCodeBlock.Ledger = FinanceEnterpriseGroup.CoreLedger
								if  (each.FeeCode entered
								and (each.ProjectContractFeeRel.RevenueFullAccount entered
								or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
									if (each.ProjectContractFeeRel.RevenueFullAccount entered)
										LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
									else
									if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
										if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
										if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
										if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
								else
#ifndef property federal								
								if  (each.IsAllowance
								and  ProjectFundingSource.AllowanceFullAccount entered)
									LocalRevenueCodeBlock = ProjectFundingSource.AllowanceFullAccount
								else
								if  (each.IsRetainage
								and  ProjectFundingSource.RetainageCodeBlock entered)
									LocalRevenueCodeBlock = ProjectFundingSource.RetainageCodeBlock
								else
#endif
								if (ProjectBillingOverrideRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
								else
								if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
									if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
									if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
									if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
								else
								if (LocalProject.RevenueFullAccount entered)
									LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
								else
								if (LocalProject.RevenuePartialAccount entered)
									if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
									if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
									if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
									if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
									if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
									if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
									if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
									if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
									if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
									if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
									if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
									if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
								else
								if (ProjectFundingSource.RevenueFullAccount entered)
									LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
								else
									initialize DefaultedArray
									if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
									and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
											DefaultedArray.Defaulted[1] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
											DefaultedArray.Defaulted[2] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
											DefaultedArray.Defaulted[3] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
											DefaultedArray.Defaulted[4] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
											DefaultedArray.Defaulted[5] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
											DefaultedArray.Defaulted[6] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
											DefaultedArray.Defaulted[7] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
											DefaultedArray.Defaulted[8] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
											DefaultedArray.Defaulted[9] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
											DefaultedArray.Defaulted[10] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
											DefaultedArray.Defaulted[11] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
											DefaultedArray.Defaulted[12] = true
									if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
									and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
											DefaultedArray.Defaulted[1] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
											DefaultedArray.Defaulted[2] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
											DefaultedArray.Defaulted[3] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
											DefaultedArray.Defaulted[4] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
											DefaultedArray.Defaulted[5] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
											DefaultedArray.Defaulted[6] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
											DefaultedArray.Defaulted[7] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
											DefaultedArray.Defaulted[8] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
											DefaultedArray.Defaulted[9] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
											DefaultedArray.Defaulted[10] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
											DefaultedArray.Defaulted[11] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
											DefaultedArray.Defaulted[12] = true
									if (ProjectFundingSource.RevenuePartialAccount entered)
										if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
										and !DefaultedArray.Defaulted[1])
											LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
										if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
										and !DefaultedArray.Defaulted[2])
											LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
										if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
										and !DefaultedArray.Defaulted[3])
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
										and !DefaultedArray.Defaulted[4])
											LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
										and !DefaultedArray.Defaulted[5])
											LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
										and !DefaultedArray.Defaulted[6])
											LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
										and !DefaultedArray.Defaulted[7])
											LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
										and !DefaultedArray.Defaulted[8])
											LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
										and !DefaultedArray.Defaulted[9])
											LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
										and !DefaultedArray.Defaulted[10])
											LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
										and !DefaultedArray.Defaulted[11])
											LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
										and !DefaultedArray.Defaulted[12])
											LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FundAccounting
							or  FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType     = 0
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include CreateIntercompanyTransaction
							else
#endif
							if (FinanceDimension2.RevenueRecognitionOption.Detail
							and LocalAmount entered)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.TransactionAmount	 	= LocalAmount * -1
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1
									invoked.Description				= "ProjectBilling"									
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1

						if  (each.BillingMethod.PassThrough
						and !FinanceDimension2.FundingType.IntercompanyBilling)
							if  (each.Adjusted
							and !each.Deferred)
								LocalAmount = each.OriginalAmount
							else
								LocalAmount = each.Amount
							LocalRevenueCodeBlock = ProjectFundingSource.PassThroughAccount
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 1
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
							else
							if (LocalAmount entered)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + PassThroughErrorMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.TransactionAmount	 	= LocalAmount * -1
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1			
									invoked.Description				= "ProjectBilling"																
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1

						if  (each.RevenueAdjusted
						and !FinanceDimension2.FundingType.IntercompanyBilling
						and  each.Project entered)
							LocalProject			= each.Project
							include SetLocalProjectCodeBlock
							LocalRevenueCodeBlock	= each.GLTransactionDetail.FinanceCodeBlock
							if (ProjectFundingSource.RevenueAdjFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueAdjFullAccount
							else
							if (ProjectFundingSource.RevenueAdjPartialAccount entered)
								if (ProjectFundingSource.RevenueAdjPartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenueAdjPartialAccount.ToAccountingEntity
								if (ProjectFundingSource.RevenueAdjPartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenueAdjPartialAccount.AccountingUnit
								if (ProjectFundingSource.RevenueAdjPartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenueAdjPartialAccount.GeneralLedgerChartAccount
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension1
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension3
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension4
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension5
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension6
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension7
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension8
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension9
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension10
							else
							if  (each.FeeCode entered
							and (each.ProjectContractFeeRel.RevenueFullAccount entered
							or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
								if (each.ProjectContractFeeRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
								else
								if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
									if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
									if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
									if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectBillingOverrideRel.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
							else
							if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
								if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
								if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
								if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
							else
							if (LocalProject.RevenueFullAccount entered)
								LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
							else
							if (LocalProject.RevenuePartialAccount entered)
								if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
								if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
								if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
								if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
								if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
								if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
								if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
								if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
								if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
								if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
								if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
								if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectFundingSource.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							else
								initialize DefaultedArray
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
								and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
								and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (ProjectFundingSource.RevenuePartialAccount entered)
									if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
									and !DefaultedArray.Defaulted[1])
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
									if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
									and !DefaultedArray.Defaulted[2])
										LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
									if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
									and !DefaultedArray.Defaulted[3])
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
									and !DefaultedArray.Defaulted[4])
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
									and !DefaultedArray.Defaulted[5])
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
									and !DefaultedArray.Defaulted[6])
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
									and !DefaultedArray.Defaulted[7])
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
									and !DefaultedArray.Defaulted[8])
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
									and !DefaultedArray.Defaulted[9])
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
									and !DefaultedArray.Defaulted[10])
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
									and !DefaultedArray.Defaulted[11])
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
									and !DefaultedArray.Defaulted[12])
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FundAccounting
							or  FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 2
								LocalRevenueAmount = each.AdjustmentAmount
								include AddToRevenueTable
							if (FinanceDimension2.RevenueRecognitionOption.Detail
							and each.AdjustmentAmount entered)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + AdjustmentMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.TransactionAmount	 	= each.AdjustmentAmount * -1
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "AR"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1										
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1

				if  (FinanceDimension2.RevenueRecognitionOption.Summary
				and !FinanceDimension2.FundingType.IntercompanyBilling)
					for each ProjectInvoiceRevenueLine set
						LocalTableType = each.RevenueLineKey.TableType
						if (LocalTableType = 2)
							LocalEvent = "AR"
						else
							LocalEvent = "BI"
						if (each.RevenueLine.Amount entered)
							initialize ErrorFound
							invoke Released.Create GLTransactionDetail
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + RevenueErrorText
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.AccountingEntity		= LocalAccountingEntity
								invoked.PostingDate				= PostingDate
								invoked.TransactionAmount		= each.RevenueLine.Amount * -1								
								invoked.FinanceCodeBlock		= each.RevenueLine.FinanceCodeBlock
								invoked.System					= "PS"
								invoked.GeneralLedgerEvent		= LocalEvent
								invoked.TransactionDate			= InvoiceDate
								invoked.CurrencyCode			= ProjectContract.Currency
								invoked.Reference				= "ProjectBilling"
								invoked.Billed					= 4 
								invoked.RevenueRecognized		= 1
								if (LocalEvent = "BI")
									invoked.Description			= "ProjectBilling"
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage	= LocalErrorMessage
									invoked.JournalizeGroup	= LocalJournalizeGroup
							else
								CreatedCount += 1
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
#ifdef module intercobilling
				if  (FinanceDimension2.RevenueRecognitionOption.Summary
				and  FinanceDimension2.FundingType.IntercompanyBilling)				
					for each ProjectInvoiceRevenueLineNormalRel
						if (each.RevenueLine.Amount entered)
							LocalRevenueCodeBlock	= each.RevenueLine.FinanceCodeBlock
							LocalInvoiceDescription	= "Summarized"
							LocalAmount				= each.RevenueLine.Amount
							include CreateIntercompanyTransaction
#endif						
				if (ProjectContract.RevenueRecognition.Separate
				and ProjectFundingSource.IsExternalFund
				and !InvoiceType.Retainer
				and !InvoiceType.Retainage)
					LocalInvoiceTotal = InvoiceBilledAmount + InvoiceTotalAllowance + InvoiceTotalRetainage - InvoiceTotalAdvance - InvoiceTotalAdjustment
					LocalTotalBilled = ProjectFundingSource.TotalBilledAmount +	ProjectFundingSource.TotalBilledAllowance - ProjectFundingSource.TotalUnappliedAdvanceBillingAmount - ProjectFundingSource.TotalBillingAdjustments
					LocalTotalRecognized = ProjectFundingSource.TotalRecognizedAmount + ProjectFundingSource.TotalRecognizedAllowance
					BilledToDate = LocalTotalBilled - LocalInvoiceTotal
					LocalVariance = BilledToDate - LocalTotalRecognized
					if (LocalVariance >= 0)
						BilledUnearnedAmount = LocalInvoiceTotal
						EarnedUnbilledAmount = 0
					else
						if (LocalInvoiceTotal + LocalVariance <= 0)
							EarnedUnbilledAmount = LocalInvoiceTotal
							BilledUnearnedAmount = 0
						else
							BilledUnearnedAmount = LocalInvoiceTotal + LocalVariance
							EarnedUnbilledAmount = LocalInvoiceTotal - BilledUnearnedAmount						
						
				if   (!InvoiceType.Retainer
				and   !InvoiceType.Retainage
				and   ProjectContract.RevenueRecognition.Separate
				and ((ProjectFundingSource.IsInternalFund
				and  !ProjectFundingSource.RevenueCodeBlockOption.None
				and   InvoiceBilledAmount entered)
				or   (ProjectFundingSource.IsExternalFund
				and  (EarnedUnbilledAmount entered
				or    BilledUnearnedAmount entered))))
					initialize ErrorFound
					invoke Released.Create GLTransactionDetail
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.JournalizeGroup			= LocalJournalizeGroup
						invoked.AccountingEntity		= LocalAccountingEntity
						invoked.PostingDate				= PostingDate
						if (ProjectFundingSource.IsInternalFund)
							invoked.FinanceCodeBlock	= ProjectFundingSource.RevenueClearingAccount
							invoked.TransactionAmount	= InvoiceBilledAmount * -1
						else
							if (EarnedUnbilledAmount entered)
								invoked.FinanceCodeBlock	= ProjectFundingSource.EarnedUnbilledAccount
								invoked.TransactionAmount	= EarnedUnbilledAmount * -1
							else
								invoked.FinanceCodeBlock	= ProjectFundingSource.BilledUnearnedAccount
								invoked.TransactionAmount	= BilledUnearnedAmount * -1
						invoked.FinanceCodeBlock.Project			= ProjectFundingSource.ClearingProject
						invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2
						invoked.System					= "PS"
						invoked.GeneralLedgerEvent		= "BI"
						invoked.TransactionDate			= InvoiceDate
						invoked.CurrencyCode			= ProjectContract.Currency
						invoked.Reference				= "ProjectBilling"
						invoked.Billed					= 4 
						invoked.RevenueRecognized		= 1
						invoked.Description				= "ProjectBilling"						
					if (ErrorFound)
						invoke Create ProjectContractInvoiceError
							fill in fields from this instance
							invoked.ErrorMessage	= LocalErrorMessage
							invoked.JournalizeGroup	= LocalJournalizeGroup
					else
						CreatedCount += 1
					if (ProjectFundingSource.IsExternalFund
					and BilledUnearnedAmount entered
					and EarnedUnbilledAmount entered)
						initialize ErrorFound
						invoke Released.Create GLTransactionDetail
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.JournalizeGroup			= LocalJournalizeGroup
							invoked.PostingDate				= PostingDate
							invoked.AccountingEntity		= LocalAccountingEntity
							invoked.FinanceCodeBlock		= ProjectFundingSource.BilledUnearnedAccount
							invoked.TransactionAmount		= BilledUnearnedAmount * -1
							invoked.FinanceCodeBlock.Project			= ProjectFundingSource.ClearingProject
							invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2
							invoked.System					= "PS"
							invoked.GeneralLedgerEvent		= "BI"
							invoked.TransactionDate			= InvoiceDate
							invoked.CurrencyCode			= ProjectContract.Currency
							invoked.Reference				= "ProjectBilling"
							invoked.Billed					= 4 
							invoked.RevenueRecognized		= 1
							invoked.Description				= "ProjectBilling"							
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage	= LocalErrorMessage
								invoked.JournalizeGroup	= LocalJournalizeGroup
						else
							CreatedCount += 1
					
				if  (InvoiceTotalAmount + InvoiceTotalTaxAmount not = 0
				and !FundAccounting
				and !FinanceDimension2.FundingType.IntercompanyBilling
				and (!FinanceDimension2.IsInternalFund
				or   !ProjectFundingSource.RevenueCodeBlockOption.None))
					initialize LocalFinanceCodeBlock
#ifdef module ar
#ifndef property federal
					if (ProjectFundingSource.IsExternalFund
					and FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
					and ProjectFundingSource.InvoiceFinanceCodeBlock.Project entered)
						LocalFinanceCodeBlock		= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
                    if (ProjectFundingSource.IsExternalFund)
						if (!FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							LocalFinanceCodeBlock	= FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode.DistributionAccount
					else
						LocalFinanceCodeBlock		= ProjectFundingSource.OffsetAccount
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalFinanceCodeBlock.AccountingUnit			= EnterpriseSystemAcctUnitRel.AccountingUnit
						LocalFinanceCodeBlock.GeneralLedgerChartAccount	= FinanceEnterpriseGroup.DerivedInterEntityReceivables
					else
						LocalFinanceCodeBlock	= ProjectFundingSource.OffsetAccount
#endif
					if (LocalFinanceCodeBlock entered)
						initialize ErrorFound
						invoke Released.Create GLTransactionDetail
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.JournalizeGroup			= LocalJournalizeGroup
							invoked.PostingDate				= PostingDate
							invoked.AccountingEntity		= LocalAccountingEntity
							invoked.FinanceCodeBlock		= LocalFinanceCodeBlock
							invoked.System					= "PS"
							invoked.GeneralLedgerEvent		= "BI"
							invoked.TransactionDate			= InvoiceDate
							invoked.CurrencyCode			= ProjectContract.Currency
							invoked.TransactionAmount		= InvoiceTotalAmount + InvoiceTotalTaxAmount
							invoked.Reference				= "ProjectBilling"
							invoked.Billed					= 4 
							invoked.RevenueRecognized		= 1
							invoked.Description				= "ProjectBilling"							
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage 	= LocalErrorMessage
								invoked.JournalizeGroup	= LocalJournalizeGroup
						else
							CreatedCount += 1
				if (ProjectContract.RevenueRecognition.Combined
				and !InvoiceType.Retainer)

					invoke UpdateTotalRecognizedAmount ProjectFundingSource
						invoked.RecognizedAmount    	= InvoiceBilledAmount
						invoked.RecognizedAllowance 	= InvoiceTotalAllowance
						invoked.RecognizedPassThrough	= InvoiceTotalPassThrough
					invoke UpdateTotalRecognizedAmount ProjectContract
						invoked.RecognizedAmount    	= InvoiceBilledAmount
						invoked.RecognizedFees	    	= InvoiceTotalFees
						invoked.RecognizedAllowance		= InvoiceTotalAllowance
						invoked.RecognizedPassThrough	= InvoiceTotalPassThrough
#ifdef module ar
				if (FinanceDimension2.FundingType.ExternalGrant
				or  FinanceDimension2.FundingType.ExternalCustomer)
					if ((FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
					and  LocalProjectIsPositive
					and  LocalProjectIsNegative)
					or  (FinanceDimension2.ARInterfaceOption.Detail
					and  LocalIsPositive
					and  LocalIsNegative))
						LocalInvoiceType = "M"		
					if (InvoiceTotalAmount < 0)
						increment FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditNumber
						LocalCreditNumber 	   = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditNumber
						LocalReceivableInvoice = DerivedCreditNumber	
						if (LocalInvoiceType = "M")
							LocalAlternateReceivableInvoiceType = "C"	
						else						
							LocalInvoiceType = "C"
							LocalAlternateReceivableInvoiceType	= blank	
						LocalInvoiceTotalAmount	   = InvoiceTotalAmount * -1
						LocalInvoiceTotalTaxAmount = InvoiceTotalTaxAmount * -1						
						LocalCreditDebitMemoReason = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditDebitMemoReason
					else	
						increment FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectInvoiceNumber								
						LocalInvoiceNumber     = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectInvoiceNumber
						LocalReceivableInvoice = DerivedInvoiceNumber	
						if (LocalInvoiceType = "M")	
							LocalAlternateReceivableInvoiceType = "I"												
						else						
							LocalInvoiceType = "I"
							LocalAlternateReceivableInvoiceType	= blank							
						LocalCreditDebitMemoReason = blank
						LocalInvoiceTotalAmount	= InvoiceTotalAmount
						LocalInvoiceTotalTaxAmount = InvoiceTotalTaxAmount
					initialize ErrorFound												
					invoke Create ReceivableInvoice
						assign result to LocalReleaseReceivableInvoice
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message + "; " + InvoiceNotCreatedMF
						invoked.Company							= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
						invoked.ReceivableInvoiceType			= LocalInvoiceType
						invoked.ReceivableInvoice				= LocalReceivableInvoice
						invoked.BatchNumber						= 999999
						invoked.ReceivableProcessLevel			= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
						invoked.Customer						= FinanceDimension2.CompanyCustomerGroup.Customer
						invoked.InvoiceTypeCode                 = DerivedInvoiceTypeCode
						invoked.TransactionDate					= InvoiceDate
						invoked.GeneralLedgerDate				= PostingDate
						invoked.InvoiceAmount.CurrencyAmount	= LocalInvoiceTotalAmount + LocalInvoiceTotalTaxAmount
						invoked.OriginalCurrency				= ProjectContract.Currency
						invoked.TermsCode						= DerivedTermsCode
						invoked.Description						= "ProjectToAccountsReceivableInvoice"
						if (!FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							invoked.ReceivableGeneralLedgerCode	= FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode
#ifndef property federal
						else
						if (FinanceDimension2.ARInterfaceOption.Summary)
							invoked.InvoiceFinanceCodeBlock		= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
						invoked.Origin							= "J"
						invoked.System							= "PS"
						invoked.ProjectContract					= ProjectContract
						invoked.ProjectContractInvoice			= ProjectContractInvoice
						invoked.FinanceDimension2				= FinanceDimension2
						invoked.CreditDebitMemoReason			= LocalCreditDebitMemoReason
						invoked.AlternateReceivableInvoiceType	= LocalAlternateReceivableInvoiceType
						if (ProjectJurisdictionCode entered)
							invoked.CustomerPurchaseOrder		= LocalJurisdictionInvoiceNumber
						else
							invoked.CustomerPurchaseOrder		= DerivedCustomerPoNumber
						invoked.TransientHSNSACCode             = ProjectFundingSource.HSNSACCode
						invoked.CertificationNumber				= CertificationNumber
						invoked.CertificationDate				= CertificationDate
					if (ErrorFound)
						invoke Create ProjectContractInvoiceError
							fill in fields from this instance
							invoked.ErrorMessage = LocalErrorMessage
					if (FinanceDimension2.ARInterfaceOption.Summary
					and LocalReleaseReceivableInvoice entered)
						invoke Create ReceivableInvoiceLineItem
							invoked.Company						= LocalReleaseReceivableInvoice.Company
							invoked.ReceivableInvoiceType		= LocalReleaseReceivableInvoice.ReceivableInvoiceType
							invoked.ReceivableInvoice			= LocalReleaseReceivableInvoice.ReceivableInvoice
							invoked.TransactionAmount			= LocalInvoiceTotalAmount
							invoked.Description					= ProjectContract.Project.Description
#ifndef property federal
							if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
								invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
						if (InvoiceTotalTaxAmount entered)
							invoke Create ReceivableInvoiceLineItem
								invoked.Company						= LocalReleaseReceivableInvoice.Company
								invoked.ReceivableInvoiceType		= LocalReleaseReceivableInvoice.ReceivableInvoiceType
								invoked.ReceivableInvoice			= LocalReleaseReceivableInvoice.ReceivableInvoice
								invoked.TransactionAmount			= LocalInvoiceTotalTaxAmount
								invoked.Description					= ProjectContract.Project.Description + "_Tax"							
#ifndef property federal
								if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
									invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
					if (FinanceDimension2.ARInterfaceOption.Detail
					and LocalReleaseReceivableInvoice entered)					
						for each ProjectContractInvoiceLine set
							if (LocalInvoiceType = "C"
							or  LocalAlternateReceivableInvoiceType = "C")
								LocalInvoiceAmount 	  = each.Amount * -1
								LocalInvoiceTaxAmount = each.TaxAmount * -1	
							else											
								LocalInvoiceAmount    = each.Amount
								LocalInvoiceTaxAmount = each.TaxAmount						
							if (LocalInvoiceAmount entered)
								invoke Create ReceivableInvoiceLineItem
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceAmount
									invoked.Project					= each.Project
									invoked.Description				= each.DerivedInvoiceDescription
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
										if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
											invoked.InvoiceFinanceCodeBlock.Project = each.Project
#endif
							if (each.TaxAmount entered)
								invoke Create ReceivableInvoiceLineItem
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceTaxAmount
									invoked.Project					= each.Project
									invoked.Description				= each.DerivedInvoiceDescription + "_Tax"
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
										if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
											invoked.InvoiceFinanceCodeBlock.Project = each.Project
#endif
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
#ifdef property federal
					if (FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
					and LocalReleaseReceivableInvoice entered)
						CreateReceivableLine = true
#endif
#ifndef property federal
					if ((FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
					and  LocalReleaseReceivableInvoice entered)
					or  (ProjectFundingSource.IsExternalFund
					and  FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
					and  ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered))
						if (FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
						and LocalReleaseReceivableInvoice entered)
							CreateReceivableLine = true
						if (ProjectFundingSource.IsExternalFund
						and FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
						and ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
							CreateReceivableTrans = true
#endif
						initialize LocalProject
						initialize LocalAmount
						initialize LocalTaxAmount
						for each ProjectContractInvoiceLineRel
							if (each.Project != LocalProject)
								if (LocalProject entered
								or  LocalTaxAmount entered)
									if (LocalInvoiceType = "C"
									or  LocalAlternateReceivableInvoiceType = "C")
										LocalInvoiceAmount 	  = LocalAmount * -1
										LocalInvoiceTaxAmount = LocalTaxAmount * -1	
									else											
										LocalInvoiceAmount    = LocalAmount
										LocalInvoiceTaxAmount = LocalTaxAmount
									if (LocalAmount entered
									and CreateReceivableLine)
										invoke Create ReceivableInvoiceLineItem
											invoked.Company					= LocalReleaseReceivableInvoice.Company
											invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
											invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
											invoked.TransactionAmount		= LocalInvoiceAmount
											invoked.Project					= LocalProject
											invoked.Description				= LocalProject.Description
#ifndef property federal
											if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
												invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
												if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
													invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
									if (LocalTaxAmount entered
									and CreateReceivableLine)
										invoke Create ReceivableInvoiceLineItem
											invoked.Company					= LocalReleaseReceivableInvoice.Company
											invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
											invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
											invoked.TransactionAmount		= LocalInvoiceTaxAmount
											invoked.Project					= LocalProject
											invoked.Description				= LocalProject.Description + "_Tax"
#ifndef property federal
											if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
												invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
												if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
													invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
									if (TranCount = 50)
										commit transaction
										initialize TranCount
									TranCount += 1
#ifndef property federal									
									if ((LocalAmount entered
									or   LocalTaxAmount entered)
									and CreateReceivableTrans)
										initialize ErrorFound
										invoke Released.Create GLTransactionDetail
					        				resume on error
												ErrorFound = true
												LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.JournalizeGroup			= LocalJournalizeGroup
											invoked.PostingDate				= PostingDate
											invoked.AccountingEntity		= LocalAccountingEntity
											invoked.FinanceCodeBlock		= ProjectFundingSource.InvoiceFinanceCodeBlock
											invoked.FinanceCodeBlock.Project = LocalProject
											invoked.System					= "PS"
											invoked.GeneralLedgerEvent		= "BI"
											invoked.TransactionDate			= InvoiceDate
											invoked.CurrencyCode			= ProjectContract.Currency
											invoked.TransactionAmount		= LocalAmount + LocalTaxAmount
											invoked.Reference				= "ProjectBilling"
											invoked.Billed					= 4 
											invoked.RevenueRecognized		= 1
											invoked.Description				= "ProjectBilling"													
										if (ErrorFound)
											invoke Create ProjectContractInvoiceError
												fill in fields from this instance
												invoked.ErrorMessage 	= LocalErrorMessage
												invoked.JournalizeGroup	= LocalJournalizeGroup
										else
											CreatedCount += 1									
										if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.InterfaceTransDistribCreate)
											invoke CreateHistoricalOnly ReceivableGLDistribution
												invoked.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
												invoked.GeneralLedgerDate									= PostingDate
												invoked.ReceivableCompanyDataGroup.TransactionCompany		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
												invoked.ReceivableCompanyDataGroup.Customer					= FinanceDimension2.CompanyCustomerGroup.Customer
												invoked.ReceivableCompanyGroup.OriginCompany				= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
												invoked.ReceivableCompanyGroup.GlCompany					= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
												invoked.BatchNumber											= 999999
												invoked.TransType											= LocalInvoiceType
												invoked.Invoice												= LocalReceivableInvoice
												invoked.TransactionDate										= InvoiceDate						
												invoked.OriginalCurrency									= ProjectContract.Currency
												invoked.DistributionAmount.CurrencyAmount					= LocalAmount + LocalTaxAmount
												invoked.GeneralLedgerAccount								= ProjectFundingSource.InvoiceFinanceCodeBlock
												invoked.GeneralLedgerAccount.Project						= LocalProject
												invoked.Origin												= "RI"
												invoked.DistributionSource 									= "A"
												invoked.AccumulationType									= "S"
												invoked.Status												= 9
												invoked.HSNSACCode											= ProjectFundingSource.HSNSACCode
#endif
								LocalProject 	= each.Project
								LocalAmount  	= each.Amount
								LocalTaxAmount  = each.TaxAmount
							else
								LocalAmount    += each.Amount
								LocalTaxAmount += each.TaxAmount
						if (LocalProject entered
						or  LocalTaxAmount entered)
							if (LocalInvoiceType = "C"
							or  LocalAlternateReceivableInvoiceType = "C")
								LocalInvoiceAmount 	  = LocalAmount * -1
								LocalInvoiceTaxAmount = LocalTaxAmount * -1	
							else											
								LocalInvoiceAmount    = LocalAmount
								LocalInvoiceTaxAmount = LocalTaxAmount
							if (LocalAmount entered
							and CreateReceivableLine)							
								invoke Create ReceivableInvoiceLineItem						
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceAmount
									invoked.Project					= LocalProject
									invoked.Description				= LocalProject.Description
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
										if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
											invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
							if (LocalTaxAmount entered
							and CreateReceivableLine)
								invoke Create ReceivableInvoiceLineItem
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceTaxAmount
									invoked.Project					= LocalProject
									invoked.Description				= LocalProject.Description + "_Tax"
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
										if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
											invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
#ifndef property federal									
							if ((LocalAmount entered
							or   LocalTaxAmount entered)
							and CreateReceivableTrans)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.FinanceCodeBlock		= ProjectFundingSource.InvoiceFinanceCodeBlock
									invoked.FinanceCodeBlock.Project = LocalProject
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.TransactionAmount		= LocalAmount + LocalTaxAmount
									invoked.Reference				= "ProjectBilling"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1
									invoked.Description				= "ProjectBilling"									
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1									
								if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.InterfaceTransDistribCreate)
									invoke CreateHistoricalOnly ReceivableGLDistribution
										invoked.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
										invoked.GeneralLedgerDate									= PostingDate
										invoked.ReceivableCompanyDataGroup.TransactionCompany		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
										invoked.ReceivableCompanyDataGroup.Customer					= FinanceDimension2.CompanyCustomerGroup.Customer
										invoked.ReceivableCompanyGroup.OriginCompany				= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
										invoked.ReceivableCompanyGroup.GlCompany					= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
										invoked.BatchNumber											= 999999
										invoked.TransType											= LocalInvoiceType
										invoked.Invoice												= LocalReceivableInvoice
										invoked.TransactionDate										= InvoiceDate						
										invoked.OriginalCurrency									= ProjectContract.Currency
										invoked.DistributionAmount.CurrencyAmount					= LocalAmount + LocalTaxAmount
										invoked.GeneralLedgerAccount								= ProjectFundingSource.InvoiceFinanceCodeBlock
										invoked.GeneralLedgerAccount.Project						= LocalProject
										invoked.Origin												= "RI"
										invoked.DistributionSource 									= "A"
										invoked.AccumulationType									= "S"
										invoked.Status												= 9
										invoked.HSNSACCode											= ProjectFundingSource.HSNSACCode
#endif
					if (LocalReleaseReceivableInvoice entered)
						initialize ErrorFound
						invoke Unreleased.Release LocalReleaseReceivableInvoice.ReceivableInvoice
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + InvoiceNotReleasedMF
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage = LocalErrorMessage

				LocalTaxEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
				if  (TaxCodeEntered
				and !LocalTaxEntity.ThirdParty.Sabrix
				and !FinanceDimension2.FundingType.IntercompanyBilling)				
					if (ProjectInvoiceTaxSummary set not exists)
						invoke GenerateTaxSummaryData
					for each ProjectInvoiceTaxSummary set
						LocalTaxCode			= each.TaxSummaryKey.BuyerTaxCode
						LocalServiceTaxCode		= each.TaxSummaryKey.ServiceTaxCode
						LocalProductTaxCategory	= each.TaxSummaryKey.ProductTaxCategory
						LocalAddressCode		= each.TaxSummaryKey.BuyerAddressCode
						LocalServiceAddressCode	= each.TaxSummaryKey.ServiceAddressCode
						if (each.ProjectInvoiceTaxSummaryLine set not exists)
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
							if (each.TaxAmount entered)
								if (FundAccounting)
									LocalTableType		  = 0
									LocalRevenueCodeBlock = LocalFinanceCodeBlock
									LocalRevenueAmount    = each.TaxAmount
									include AddToRevenueTable
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.PostingDate				= PostingDate
									invoked.AccountingEntity 		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
									invoked.FinanceCodeBlock 		= LocalFinanceCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "BI"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.TransactionAmount		= each.TaxAmount * -1
									invoked.Reference				= "ProjectBillingTax"
									invoked.Billed					= 4 
									invoked.RevenueRecognized		= 1
									invoked.Description				= "ProjectBillingTax"																		
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1
								if (TranCount >= 10)
									commit transaction
									initialize TranCount
								TranCount += 1
							initialize ProcessTaxHistory
							ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							ProcessTaxHistory.TaxEntity					= LocalTaxEntity
							ProcessTaxHistory.TaxCode					= LocalTaxCode
							ProcessTaxHistory.ToAddress					= LocalAddressCode.PostalAddress
							ProcessTaxHistory.POATaxCode				= LocalServiceTaxCode
							ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress
							ProcessTaxHistory.ProductTaxCategory		= LocalProductTaxCategory
							ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode
							ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress
							ProcessTaxHistory.SystemCode				= "AR"
							ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
							ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
							ProcessTaxHistory.Invoice					= LocalReceivableInvoice
							if (each.TaxableAmount < 0)
								ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
							else
								ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
							ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
							ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							ProcessTaxHistory.InvoiceDate				= InvoiceDate
							ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
							ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
							ProcessTaxHistory.TaxPointDate				= InvoiceDate
							ProcessTaxHistory.PostDate					= PostingDate
							ProcessTaxHistory.TransactionSource			= "O"
							ProcessTaxHistory.TransactionInvoiceAmount	= each.TaxableAmount + each.TaxAmount
							ProcessTaxHistory.TransactionTaxableAmount	= each.TaxableAmount
							ProcessTaxHistory.TransactionTaxAmount		= each.TaxAmount
							ProcessTaxHistory.TaxRate					= each.TaxRate
							ProcessTaxHistory.AccruedOrInvoiced 		= "I"
							ProcessTaxHistory.TaxTransFunction			= "A"	
							if (ProcessTaxHistory.TransactionInvoiceAmount entered
							or  ProcessTaxHistory.TransactionTaxableAmount entered)
								LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
								if (ProcessTaxHistory.OutputErrorMessage entered)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage
								if (TranCount >= 10)
									commit transaction
									initialize TranCount
								TranCount += 1
						else
							for each each.ProjectInvoiceTaxSummaryLine set
								if (each.TaxCodeBlock entered)
									LocalFinanceCodeBlock = each.TaxCodeBlock
								else
								if (LocalTaxEntity.UseTaxCodeAccounts)
									LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
								else
									LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
								if (each.TaxAmount entered)
									if (FundAccounting)
										LocalTableType		  = 0
										LocalRevenueCodeBlock = LocalFinanceCodeBlock
										LocalRevenueAmount    = each.TaxAmount
										include AddToRevenueTable
									initialize ErrorFound
									invoke Released.Create GLTransactionDetail
				        				resume on error
											ErrorFound = true
											LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.JournalizeGroup			= LocalJournalizeGroup
										invoked.PostingDate				= PostingDate
										invoked.AccountingEntity 		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
										invoked.FinanceCodeBlock 		= LocalFinanceCodeBlock
										invoked.System					= "PS"
										invoked.GeneralLedgerEvent		= "BI"
										invoked.TransactionDate			= InvoiceDate
										invoked.CurrencyCode			= ProjectContract.Currency
										invoked.TransactionAmount		= each.TaxAmount * -1
										invoked.Reference				= "ProjectBillingTax"
										invoked.Billed					= 4 
										invoked.RevenueRecognized		= 1
										invoked.Description				= "ProjectBillingTax"																												
									if (ErrorFound)
										invoke Create ProjectContractInvoiceError
											fill in fields from this instance
											invoked.ErrorMessage 	= LocalErrorMessage
											invoked.JournalizeGroup	= LocalJournalizeGroup
									else
										CreatedCount += 1
									if (TranCount >= 10)
										commit transaction
										initialize TranCount
									TranCount += 1
								initialize ProcessTaxHistory
								ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
								ProcessTaxHistory.TaxEntity					= LocalTaxEntity
								ProcessTaxHistory.TaxCode					= each.BuyerTaxCode
								ProcessTaxHistory.ToAddress					= LocalAddressCode.PostalAddress
								ProcessTaxHistory.POATaxCode				= LocalServiceTaxCode
								ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress
								ProcessTaxHistory.ProductTaxCategory		= LocalProductTaxCategory
								ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode
								ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress
								ProcessTaxHistory.SystemCode				= "AR"
								ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
								ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
								ProcessTaxHistory.Invoice					= LocalReceivableInvoice
								if (each.TaxableAmount < 0)
									ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
								else
									ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
								ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
								ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
								ProcessTaxHistory.InvoiceDate				= InvoiceDate
								ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
								ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
								ProcessTaxHistory.TaxPointDate				= InvoiceDate
								ProcessTaxHistory.PostDate					= PostingDate
								ProcessTaxHistory.TransactionSource			= "O"
								ProcessTaxHistory.TransactionInvoiceAmount	= each.TaxableAmount + each.TaxAmount
								ProcessTaxHistory.TransactionTaxableAmount	= each.TaxableAmount
								ProcessTaxHistory.TransactionTaxAmount		= each.TaxAmount
								ProcessTaxHistory.TaxRate					= each.TaxRate
								ProcessTaxHistory.AccruedOrInvoiced 		= "I"
								ProcessTaxHistory.TaxTransFunction			= "A"	
								if (ProcessTaxHistory.TransactionInvoiceAmount entered
								or  ProcessTaxHistory.TransactionTaxableAmount entered)
									LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
									if (ProcessTaxHistory.OutputErrorMessage entered)
										invoke Create ProjectContractInvoiceError
											fill in fields from this instance
											invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage
									if (TranCount >= 10)
										commit transaction
										initialize TranCount
									TranCount += 1
				if  (TaxCodeEntered
				and  LocalTaxEntity.ThirdParty.Sabrix
				and !FinanceDimension2.FundingType.IntercompanyBilling)				
					initialize LocalInvoiceAmount
					initialize LocalTaxAmount
					for each ProjectContractInvoiceLine set
						if (each.BuyerTaxCode entered)
							LocalInvoiceAmount = each.Amount
							LocalTaxAmount     = each.TaxAmount
							LocalProject	   = each.Project
							LocalGeneralLedgerChartAccount = each.GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
							LocalTaxCode = each.BuyerTaxCode
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
						if (each.TaxAmount entered)
							if (FundAccounting)
								LocalTableType		  = 0
								LocalRevenueCodeBlock = LocalFinanceCodeBlock
								LocalRevenueAmount    = each.TaxAmount
								include AddToRevenueTable
							initialize ErrorFound
							invoke Released.Create GLTransactionDetail
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.PostingDate				= PostingDate
								invoked.AccountingEntity 		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
								invoked.FinanceCodeBlock 		= LocalFinanceCodeBlock
								invoked.System					= "PS"
								invoked.GeneralLedgerEvent		= "BI"
								invoked.TransactionDate			= InvoiceDate
								invoked.CurrencyCode			= ProjectContract.Currency
								invoked.TransactionAmount		= each.TaxAmount * -1
								invoked.Reference				= "ProjectBillingTax"
								invoked.Billed					= 4 
								invoked.RevenueRecognized		= 1
								invoked.Description				= "ProjectBillingTax"																										
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage 	= LocalErrorMessage
									invoked.JournalizeGroup	= LocalJournalizeGroup
							else
								CreatedCount += 1
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
						if (each.BuyerTaxCode entered)
							LocalServiceAddressCode						= each.ServiceAddressCode
							initialize ProcessTaxHistory
							ProcessTaxHistory.UserElementLevel			= "L"

							ProcessTaxHistory.Invoice		      		= LocalReleaseReceivableInvoice.ReceivableInvoice

							ProcessTaxHistory.LineNumber				= each.SequenceNumber
							if (each.AddressCode entered)
								ProcessTaxHistory.ToAddress  			= each.AddressCode.PostalAddress
							else	
							if (ProjectFundingSource.BuyerTaxLocation entered)	
								ProcessTaxHistory.ToAddress  			= ProjectFundingSource.BuyerTaxLocation.AddressCode.PostalAddress	
							else								
								ProcessTaxHistory.ToAddress  			= ProjectFundingSource.CompanyCustomerGroup.CustomerBillTo.PostalAddress
							ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
							ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							ProcessTaxHistory.TaxEntity					= LocalTaxEntity
							ProcessTaxHistory.TaxCode					= LocalTaxCode
							ProcessTaxHistory.POATaxCode				= each.TaxCode
							ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress				
							ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode
							ProcessTaxHistory.SystemCode				= "AR"
							ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
							ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
							ProcessTaxHistory.Invoice					= LocalReceivableInvoice
							if (LocalInvoiceAmount < 0)
								ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
							else
								ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
							ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
							ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							ProcessTaxHistory.InvoiceDate				= InvoiceDate
							ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
							ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
							ProcessTaxHistory.TaxPointDate				= InvoiceDate
							ProcessTaxHistory.PostDate					= PostingDate
							ProcessTaxHistory.TransactionSource			= "O"
							ProcessTaxHistory.TransactionInvoiceAmount	= LocalInvoiceAmount + LocalTaxAmount
							ProcessTaxHistory.TransactionTaxableAmount	= LocalInvoiceAmount
							ProcessTaxHistory.TransactionTaxAmount		= LocalTaxAmount
							ProcessTaxHistory.TaxRate					= each.TaxRate 
							ProcessTaxHistory.AccruedOrInvoiced 		= "I"
							ProcessTaxHistory.TaxTransFunction			= "A"	
							include LoadOneSourceTaxAttribute
							ProcessTaxHistory.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute
							if (ProcessTaxHistory.TransactionInvoiceAmount entered
							or  ProcessTaxHistory.TransactionTaxableAmount entered)
								LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
								if (ProcessTaxHistory.OutputErrorMessage entered)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage

				if  (FundAccounting
				and !FinanceDimension2.FundingType.IntercompanyBilling)
					for each ProjectInvoiceRevenueLineNoPTRel
						if (each.RevenueLine.Amount entered)
							invoke CreateHistoricalOnly ReceivableGLDistribution
								assign result to LocalReceivableGLDistribution
								invoked.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
								invoked.GeneralLedgerDate									= PostingDate
								invoked.ReceivableCompanyDataGroup.TransactionCompany		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
								invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
								invoked.ReceivableCompanyDataGroup.Customer					= FinanceDimension2.CompanyCustomerGroup.Customer
								invoked.ReceivableCompanyGroup.OriginCompany				= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
								invoked.ReceivableCompanyGroup.GlCompany					= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
								invoked.BatchNumber											= 999999
								invoked.TransType											= LocalInvoiceType
								invoked.Invoice												= LocalReceivableInvoice
								invoked.TransactionDate										= InvoiceDate						
								invoked.OriginalCurrency									= ProjectContract.Currency
								invoked.DistributionAmount.CurrencyAmount					= each.RevenueLine.Amount * -1
								invoked.GeneralLedgerAccount								= each.RevenueLine.FinanceCodeBlock
								invoked.Origin												= "RI"
								invoked.DistributionSource 									= "A"
								invoked.AccumulationType									= "D"								
								invoked.Status												= 9
								invoked.HSNSACCode											= ProjectFundingSource.HSNSACCode

							initialize LocalCalculateReceivableFinanceStructure
							LocalCalculateReceivableFinanceStructure.InputReceivableCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							LocalCalculateReceivableFinanceStructure.InputReceivableInvoiceType		= LocalInvoiceType
							LocalCalculateReceivableFinanceStructure.InputReceivableInvoice			= LocalReceivableInvoice
							LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution	= LocalReceivableGLDistribution.ReceivableGLDistribution
							LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
							LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock			= FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode.DistributionAccount
							LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

							if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.InterfaceTransDistribCreate)
								invoke CreateHistoricalOnly ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
									invoked.GeneralLedgerDate									= PostingDate
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
									invoked.ReceivableCompanyDataGroup.Customer					= FinanceDimension2.CompanyCustomerGroup.Customer
									invoked.ReceivableCompanyGroup.OriginCompany				= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
									invoked.ReceivableCompanyGroup.GlCompany					= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
									invoked.BatchNumber											= 999999
									invoked.TransType											= LocalInvoiceType
									invoked.Invoice												= LocalReceivableInvoice
									invoked.TransactionDate										= InvoiceDate						
									invoked.OriginalCurrency									= ProjectContract.Currency
									invoked.DistributionAmount.CurrencyAmount					= each.RevenueLine.Amount
									invoked.GeneralLedgerAccount								= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
									invoked.Origin												= "RI"
									invoked.DistributionSource 									= "A"
									invoked.AccumulationType									= "S"							
									invoked.Status												= 9
									invoked.HSNSACCode											= ProjectFundingSource.HSNSACCode

							initialize ErrorFound
							invoke Released.Create GLTransactionDetail
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.PostingDate				= PostingDate
								invoked.AccountingEntity		= LocalAccountingEntity
								invoked.System					= "PS"
								invoked.GeneralLedgerEvent		= "BI"
								invoked.TransactionDate			= InvoiceDate
								invoked.CurrencyCode			= ProjectContract.Currency
								invoked.TransactionAmount		= each.RevenueLine.Amount
								invoked.FinanceCodeBlock		= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
								invoked.Reference				= "ProjectBilling"
								invoked.Billed					= 4 
								invoked.RevenueRecognized		= 1
								invoked.Description				= "ProjectBilling"								
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage 	= LocalErrorMessage
									invoked.JournalizeGroup	= LocalJournalizeGroup
							else
								CreatedCount += 1
							
				if ((FinanceDimension2.FundingType.ExternalGrant
				or   FinanceDimension2.FundingType.ExternalCustomer)
				and  FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.InterfaceTransDistribCreate
				and !FundAccounting)
					initialize LocalFinanceCodeBlock
#ifndef property federal
					if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
					and ProjectFundingSource.InvoiceFinanceCodeBlock.Project entered)
						LocalFinanceCodeBlock = ProjectFundingSource.InvoiceFinanceCodeBlock
#endif					
					if (!FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
						LocalFinanceCodeBlock = FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode.DistributionAccount
					if (LocalFinanceCodeBlock entered)					
						invoke CreateHistoricalOnly ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
							invoked.GeneralLedgerDate									= PostingDate
							invoked.ReceivableCompanyDataGroup.TransactionCompany		= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							invoked.ReceivableCompanyDataGroup.Customer					= FinanceDimension2.CompanyCustomerGroup.Customer
							invoked.ReceivableCompanyGroup.OriginCompany				= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							invoked.ReceivableCompanyGroup.GlCompany					= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							invoked.BatchNumber											= 999999
							invoked.TransType											= LocalInvoiceType
							invoked.Invoice												= LocalReceivableInvoice
							invoked.TransactionDate										= InvoiceDate						
							invoked.OriginalCurrency									= ProjectContract.Currency
							invoked.DistributionAmount.CurrencyAmount					= InvoiceTotalAmount + InvoiceTotalTaxAmount
							invoked.GeneralLedgerAccount								= LocalFinanceCodeBlock
							invoked.Origin												= "RI"
							invoked.DistributionSource 									= "A"
							invoked.AccumulationType									= "S"
							invoked.Status												= 9
							invoked.HSNSACCode											= ProjectFundingSource.HSNSACCode
#endif
				if  (InvoiceType.Bill
				and  ProjectContract.AllocateExpenditures
				and  ProjectContract.MultipleFundingSources
				and !ProjectContract.FrontEndSplitsEnabled)
					BypassStructureRelationEdit = true
					BypassActiveCodeBlockEdit	= true
					for each ProjectContractInvoiceLine set
						if (each.GLTransactionDetail entered)
							LocalGLTransactionDetail = each.GLTransactionDetail
							if (ProjectInvoiceAllocationTransactionRel exists)
								invoke Update first ProjectInvoiceAllocationTransactionRel
									invoked.Amount 		+= each.BillableAmount
									invoked.UnitsAmount += each.UnitsAmount
							else
								LocalTransCounter += 1
								invoke Create ProjectInvoiceAllocationTransactionRel
									invoked.Counter = LocalTransCounter
									invoked.Amount		= each.BillableAmount
									invoked.UnitsAmount	= each.UnitsAmount
							if (each.BillableAmount entered
							or  each.UnitsAmount entered)
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
									resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									fill in fields from each.GLTransactionDetail
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.AutoReverse
									invoked.TransactionAmount 					= each.BillableAmount
									invoked.PostingDate							= PostingDate
									invoked.GeneralLedgerEvent					= "PE"
									invoked.Reference							= "ProjectContractAllocatedExpenditure"
									invoked.JournalizeGroup						= LocalJournalizeGroup
									invoked.UnitsAmount							= each.UnitsAmount
									invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2
									invoked.Billed								= 4 
									invoked.RevenueRecognized					= 1
									invoked.LaborDistribution					= 0
									invoked.Capitalize							= 0
									invoked.BypassActiveCodeBlockEdit			= true
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.JournalizeGroup	= LocalJournalizeGroup
								else
									CreatedCount += 1
								if (TranCount = 50)
									commit transaction
									initialize TranCount
								TranCount += 1
					for each ProjectInvoiceAllocationTransaction set
						if (each.Amount entered
						or  each.UnitsAmount entered)
							initialize ErrorFound
							invoke Released.Create GLTransactionDetail
								resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
								fill in fields from each.GLTransactionDetail
									except invoked.ReportCurrencyAmount
									except invoked.OriginatingTransaction
									except invoked.AutoReverse
								invoked.TransactionAmount 					= each.Amount * -1
								invoked.PostingDate							= PostingDate
								invoked.GeneralLedgerEvent					= "PE"
								invoked.Reference							= "ProjectContractAllocatedExpenditure"
								invoked.JournalizeGroup						= LocalJournalizeGroup
								invoked.UnitsAmount							= each.UnitsAmount * -1
								invoked.Billed								= 4 
								invoked.RevenueRecognized					= 1
								invoked.LaborDistribution					= 0
								invoked.Capitalize							= 0
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage 	= LocalErrorMessage
									invoked.JournalizeGroup	= LocalJournalizeGroup
							else
								CreatedCount += 1
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
					BypassStructureRelationEdit = false
					BypassActiveCodeBlockEdit	= false
					invoke PurgeAll ProjectInvoiceAllocationTransaction
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmProjectContract			= ProjectContract
						invoked.PrmFinanceDimension2	 	= FinanceDimension2
						invoked.PrmProjectContractInvoice	= ProjectContractInvoice
#ifdef module intercobilling
				if (FinanceDimension2.FundingType.IntercompanyBilling)
					for each IntercompanyBillingTransactionRel
						invoke MakeReleased each
						if (TranCount = 50)
							commit transaction
							initialize TranCount
						TranCount += 1				
#endif
				Status = 1
				JurisdictionInvoiceNumber = LocalJurisdictionInvoiceNumber
				if  (CreatedCount = 0
				and !FinanceDimension2.FundingType.IntercompanyBilling
				and !ProjectFundingSource.RevenueCodeBlockOption.None)
					invoke Create ProjectContractInvoiceError
						fill in fields from this instance
						invoked.ErrorMessage 	= "NoGLTransactionDetailRecordsWereCreated;JournalizeGroupIsEmpty;CorrectErrors,Reverse,AndRerunJournalizeAction"
						invoked.JournalizeGroup	= LocalJournalizeGroup
				if (!FinanceDimension2.IsInternalFund
				or  !ProjectFundingSource.RevenueCodeBlockOption.None)
					JournalizeGroup = LocalJournalizeGroup
				if (TotalInvoiceAmount not entered)
					TotalInvoiceAmount = LocalInvoiceTotalAmounts
					TotalUnits = LocalInvoiceTotalUnitsAmount
					TotalTax = LocalInvoiceTotalTaxAmounts
					TotalFees = LocalInvoiceTotalFees
					if (!InvoiceType.Retainer)
						TotalRetainer = LocalInvoiceTotalRetainerAmount
						TotalAllowance = LocalInvoiceTotalAllowance
						TotalRetainage = LocalInvoiceTotalRetainage * -1
						TotalAdvance = LocalInvoiceTotalAdvance
						TotalPassThrough = LocalInvoiceTotalPassThrough
						TotalAdjustment = LocalInvoiceTotalAdjustment
				if (IsThirdPartyInvoicePrint)	
					if (FinanceDimension2.FundingType.ExternalGrant
					or  FinanceDimension2.FundingType.ExternalCustomer)
						PrintStatus = PrmPrintStatus
			Exit Rules
				invoke PurgeAll ProjectInvoiceRevenueLine
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmProjectContract			= ProjectContract
					invoked.PrmFinanceDimension2	 	= FinanceDimension2
					invoked.PrmProjectContractInvoice	= ProjectContractInvoice
					invoked.PrmValidation				= LocalValidation
				if (!FinanceDimension2.FundingType.IntercompanyBilling)
					invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
						invoked.PrmJournalizeGroup	= LocalJournalizeGroup
#ifdef module intercobilling
				else
					invoke ProcessIntoBillingDocuments IntercompanyBillingTransaction
						invoked.PrmIntercompanyBillingGroup	= FinanceEnterpriseGroup
						invoked.PrmOriginatingDocument		= reference to this instance
#endif					 
				if (FinanceDimension2.FundingType.ExternalGrant
	            or  FinanceDimension2.FundingType.ExternalCustomer)
#ifdef module idm	            
	            	if (ProjectContract.UseIDM)
						if (ProjectContract.ProjectContractInvoiceTemplate entered
						or (InvoiceType.Retainer
						and first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectContractInvoiceTemplate entered))
							PrintOrEmail = true	            			
	            			invoke UploadProjectContractInvoiceDocumentInIDM
	            				invoked.PrmIDMPrinter = PrmIDMPrinter
	            	else
#endif	            	
					if (ProjectContract.ProjectInvoiceFormat entered
					or (InvoiceType.Retainer
					and first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectInvoiceFormat entered))
						invoke UpdateProjectInvoiceTemplate 
							invoked.PrinterEmailAddress = PrinterEmailAddress
							invoked.PrintOrEmail        = true

		ValidateInvoiceJournalEntries is an Instance Action
			run in background
			valid when (Status.Created)
			restricted
			Parameters
				PostingDate is Date
			Parameter Rules
				PostingDate
					required
					default to InvoiceDate
					initial value is InvoiceDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar
					if (SystemClosingControlARRel exists
					and SystemClosingControlARRel.Control)
						constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control)
						constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#ifndef property federal
					if (ProjectFundingSource.IsExternalFund
					and ProjectFundingSource.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
						constraint (ProjectFundingSource.InvoiceFinanceCodeBlock entered)
							"ReceivableFinanceStructureRequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
#endif
#endif							
					if  (ProjectContract.RevenueRecognition.Separate
					and !ProjectFundingSource.RevenueCodeBlockOption.None)
						constraint (ProjectFundingSource.ClearingProject entered)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
							
			Local Fields
        		LocalAmount				is an InternationalAmount
				LocalInvoiceTotal		is an InternationalAmount
				LocalTotalBilled		is an InternationalAmount
				LocalTotalRecognized	is an InternationalAmount
				Counter					is Numeric size 4
				BilledToDate			is like InternationalAmount
				EarnedUnbilledAmount	is like InternationalAmount
				BilledUnearnedAmount	is like InternationalAmount
				LocalVariance			is like InternationalAmount
        		RemainingAmount			is like InternationalAmount
        		TotalAmount				is like InternationalAmount
        		Distribute100Percent	is Boolean
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
				RevenueCounter			is like SequenceNumber
				TranCount				is Numeric size 2
				CreatedCount			is Numeric size 4
				ProjectStructureValidationTestView		is a ProjectStructureValidationTest view
				ProjectStructureValidationResultView	is a ProjectStructureValidationResult view
				ErrorCounter			is like SequenceNumber
				LineCount				is like SequenceNumber
				LoadDetailDistributions	is Boolean
				DefaultedArray
			Entrance Rules
				LocalValidation = true
				invoke Purge ProjectInvoiceRevenueLineAllRel
			Action Rules
				LocalFromAccountingEntity			= LocalAccountingEntity			
				invoke Create ProjectStructureValidationResult
					assign result to ProjectStructureValidationResultView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.RunTime				   	= current timestamp
					invoked.TestType				= 1
					invoked.Contract				= ProjectContract.DisplayProject
					invoked.Invoice					= ProjectContractInvoice			

				commit transaction

#ifndef property federal
#ifdef module ar
				if (ProjectFundingSource.IsExternalFund
				and FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
				and ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
					LocalCodeBlock			= ProjectFundingSource.InvoiceFinanceCodeBlock
					LoadDetailDistributions = true
#endif
#endif		
				for each ProjectContractInvoiceLine set
#ifndef property federal
#ifdef module ar
					if (LoadDetailDistributions
					and each.Project entered)
						LocalCodeBlock.Project = each.Project
						include AddToTable
#endif
#endif					
					IsRetainer = false
					if (each.ProjectContractMilestone entered
					and each.ProjectContractRetainer not entered
					and ProjectContract.RevenueRecognition.Combined
					and each.ProjectContractMilestone.TotalDistributionPercent entered
					and (!FinanceDimension2.IsInternalFund
					or   !ProjectFundingSource.RevenueCodeBlockOption.None))
						RemainingAmount = each.Amount
						TotalAmount		= each.Amount
						LocalProject	= each.Project
						RecordCount		= each.ProjectContractMilestone.RecordCount
						initialize Counter
						initialize Distribute100Percent
						if (each.ProjectContractMilestone.TotalDistributionPercent = 1)
							Distribute100Percent = true
						for each each.ProjectContractMilestone.ProjectContractMilestoneDistribution set
							Counter += 1
							LocalAmount = TotalAmount * each.Percent
							RemainingAmount -= LocalAmount
							if (Distribute100Percent
							and Counter = RecordCount
							and RemainingAmount entered)
								LocalAmount += RemainingAmount
								RemainingAmount = 0
							LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							if (each.RevenueFullAccount entered)
								LocalRevenueCodeBlock = each.RevenueFullAccount
							else
							if (each.RevenuePartialAccount entered)
								if (each.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = each.RevenuePartialAccount.ToAccountingEntity
								if (each.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
								if (each.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.RevenuePartialAccount.GeneralLedgerChartAccount
								if (each.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
								if (each.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = each.RevenuePartialAccount.FinanceDimension3
								if (each.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = each.RevenuePartialAccount.FinanceDimension4
								if (each.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = each.RevenuePartialAccount.FinanceDimension5
								if (each.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = each.RevenuePartialAccount.FinanceDimension6
								if (each.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = each.RevenuePartialAccount.FinanceDimension7
								if (each.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = each.RevenuePartialAccount.FinanceDimension8
								if (each.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = each.RevenuePartialAccount.FinanceDimension9
								if (each.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = each.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= LocalProject
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include ValidateIntercompanyTransaction
							else
#endif										
							if (FinanceDimension2.RevenueRecognitionOption.Detail)
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable

						if (RemainingAmount entered)
							LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
							LocalRevenueCodeBlock.Project			= LocalProject
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = RemainingAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include ValidateIntercompanyTransaction
							else
#endif										
							if (FinanceDimension2.RevenueRecognitionOption.Detail)
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable
					else
						if ((InvoiceType.Retainer
						or  each.ProjectContractRetainer entered
						or (ProjectContract.RevenueRecognition.Combined
						and !each.BillingMethod.PassThrough)
						or  InvoiceType.Retainage
						or  each.IsRetainage
						or  each.ProjectContractAdvance entered
						or  each.AppliedProjectContractAdvance entered)
						and (!FinanceDimension2.IsInternalFund
						or   !ProjectFundingSource.RevenueCodeBlockOption.None)
						and each.Project entered)
							if (FinanceDimension2.FundingType.IntercompanyBilling)
								LocalAmount = each.Amount
							else
							if  (each.Adjusted
							and !each.Deferred)
								LocalAmount = each.OriginalAmount
							else
								LocalAmount = each.Amount
							if (InvoiceType.Retainer
							or  each.ProjectContractRetainer entered)
								LocalRevenueCodeBlock	 	= each.ProjectContractRetainer.RetainerFullAccount
								IsRetainer					= true
							else
#ifndef property federal
							if (InvoiceType.Retainage)
								LocalRevenueCodeBlock	 	= ProjectFundingSource.RetainageCodeBlock
							else
#endif
							if (each.ProjectContractAdvance entered)
								LocalRevenueCodeBlock		= each.ProjectContractAdvance.AdvanceFullAccount
							else
							if (each.AppliedProjectContractAdvance entered)
								LocalRevenueCodeBlock		= each.AppliedProjectContractAdvance.AdvanceFullAccount
							else
								LocalProject				= each.Project
								include SetLocalProjectCodeBlock
								LocalRevenueCodeBlock		= each.GLTransactionDetail.FinanceCodeBlock
								LocalRevenueCodeBlock.Ledger = FinanceEnterpriseGroup.CoreLedger
								if  (each.FeeCode entered
								and (each.ProjectContractFeeRel.RevenueFullAccount entered
								or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
									if (each.ProjectContractFeeRel.RevenueFullAccount entered)
										LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
									else
									if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
										if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
										if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
										if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
										if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
								else
#ifndef property federal								
								if  (each.IsAllowance
								and  ProjectFundingSource.AllowanceFullAccount entered)
									LocalRevenueCodeBlock = ProjectFundingSource.AllowanceFullAccount
								else
								if  (each.IsRetainage
								and  ProjectFundingSource.RetainageCodeBlock entered)
									LocalRevenueCodeBlock = ProjectFundingSource.RetainageCodeBlock
								else
#endif
								if (ProjectBillingOverrideRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
								else
								if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
									if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
									if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
									if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
									if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
								else
								if (LocalProject.RevenueFullAccount entered)
									LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
								else
								if (LocalProject.RevenuePartialAccount entered)
									if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
									if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
									if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
									if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
									if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
									if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
									if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
									if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
									if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
									if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
									if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
									if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
								else
								if (ProjectFundingSource.RevenueFullAccount entered)
									LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
								else
									initialize DefaultedArray
									if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
									and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
											DefaultedArray.Defaulted[1] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
											DefaultedArray.Defaulted[2] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
											DefaultedArray.Defaulted[3] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
											DefaultedArray.Defaulted[4] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
											DefaultedArray.Defaulted[5] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
											DefaultedArray.Defaulted[6] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
											DefaultedArray.Defaulted[7] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
											DefaultedArray.Defaulted[8] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
											DefaultedArray.Defaulted[9] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
											DefaultedArray.Defaulted[10] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
											DefaultedArray.Defaulted[11] = true
										if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
											DefaultedArray.Defaulted[12] = true
									if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
									and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
											DefaultedArray.Defaulted[1] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
											DefaultedArray.Defaulted[2] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
											DefaultedArray.Defaulted[3] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
											DefaultedArray.Defaulted[4] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
											DefaultedArray.Defaulted[5] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
											DefaultedArray.Defaulted[6] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
											DefaultedArray.Defaulted[7] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
											DefaultedArray.Defaulted[8] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
											DefaultedArray.Defaulted[9] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
											DefaultedArray.Defaulted[10] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
											DefaultedArray.Defaulted[11] = true
										if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
											DefaultedArray.Defaulted[12] = true
									if (ProjectFundingSource.RevenuePartialAccount entered)
										if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
										and !DefaultedArray.Defaulted[1])
											LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
										if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
										and !DefaultedArray.Defaulted[2])
											LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
										if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
										and !DefaultedArray.Defaulted[3])
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
										and !DefaultedArray.Defaulted[4])
											LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
										and !DefaultedArray.Defaulted[5])
											LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
										and !DefaultedArray.Defaulted[6])
											LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
										and !DefaultedArray.Defaulted[7])
											LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
										and !DefaultedArray.Defaulted[8])
											LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
										and !DefaultedArray.Defaulted[9])
											LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
										and !DefaultedArray.Defaulted[10])
											LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
										and !DefaultedArray.Defaulted[11])
											LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
										if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
										and !DefaultedArray.Defaulted[12])
											LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Summary)
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project entered)
									LocalRevenueCodeBlock.Project			= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.Project
								if (ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2 entered)
									LocalRevenueCodeBlock.FinanceDimension2	= ProjectFundingSource.IntercompanyBillingRechargeItem.FromReceivablePLAccount.FinanceDimension2
#endif
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
#ifdef module intercobilling
							if (FinanceDimension2.FundingType.IntercompanyBilling
							and FinanceDimension2.RevenueRecognitionOption.Detail)
								include ValidateIntercompanyTransaction
							else
#endif
							if (FinanceDimension2.RevenueRecognitionOption.Detail)
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable

						if  (each.BillingMethod.PassThrough
						and !FinanceDimension2.FundingType.IntercompanyBilling)
							if  (each.Adjusted
							and !each.Deferred)
								LocalAmount = each.OriginalAmount
							else
								LocalAmount = each.Amount
							LocalRevenueCodeBlock = ProjectFundingSource.PassThroughAccount
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 1
								LocalRevenueAmount = LocalAmount
								include AddToRevenueTable
							else
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable

						if  (each.RevenueAdjusted
						and !FinanceDimension2.FundingType.IntercompanyBilling
						and each.Project entered)
							LocalProject			= each.Project
							include SetLocalProjectCodeBlock
							LocalRevenueCodeBlock	= each.GLTransactionDetail.FinanceCodeBlock
							if (ProjectFundingSource.RevenueAdjFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueAdjFullAccount
							else
							if (ProjectFundingSource.RevenueAdjPartialAccount entered)
								if (ProjectFundingSource.RevenueAdjPartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenueAdjPartialAccount.ToAccountingEntity
								if (ProjectFundingSource.RevenueAdjPartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenueAdjPartialAccount.AccountingUnit
								if (ProjectFundingSource.RevenueAdjPartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenueAdjPartialAccount.GeneralLedgerChartAccount
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension1
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension3
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension4
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension5
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension6
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension7
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension8
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension9
								if (ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenueAdjPartialAccount.FinanceDimension10
							else
							if  (each.FeeCode entered
							and (each.ProjectContractFeeRel.RevenueFullAccount entered
							or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
								if (each.ProjectContractFeeRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
								else
								if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
									if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
									if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
									if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectBillingOverrideRel.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
							else
							if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
								if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
								if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
								if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
							else
							if (LocalProject.RevenueFullAccount entered)
								LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
							else
							if (LocalProject.RevenuePartialAccount entered)
								if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
								if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
								if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
								if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
								if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
								if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
								if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
								if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
								if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
								if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
								if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
								if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectFundingSource.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							else
								initialize DefaultedArray
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
								and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
								and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (ProjectFundingSource.RevenuePartialAccount entered)
									if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
									and !DefaultedArray.Defaulted[1])
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
									if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
									and !DefaultedArray.Defaulted[2])
										LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
									if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
									and !DefaultedArray.Defaulted[3])
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
									and !DefaultedArray.Defaulted[4])
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
									and !DefaultedArray.Defaulted[5])
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
									and !DefaultedArray.Defaulted[6])
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
									and !DefaultedArray.Defaulted[7])
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
									and !DefaultedArray.Defaulted[8])
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
									and !DefaultedArray.Defaulted[9])
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
									and !DefaultedArray.Defaulted[10])
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
									and !DefaultedArray.Defaulted[11])
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
									and !DefaultedArray.Defaulted[12])
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 2
								LocalRevenueAmount = each.AdjustmentAmount
								include AddToRevenueTable
							if (FinanceDimension2.RevenueRecognitionOption.Detail
							and each.AdjustmentAmount entered)
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable

				if  (FinanceDimension2.RevenueRecognitionOption.Summary
				and !FinanceDimension2.FundingType.IntercompanyBilling)				
					for each ProjectInvoiceRevenueLineAllRel
						if (each.RevenueLine.Amount entered)
							LocalCodeBlock			= each.RevenueLine.FinanceCodeBlock
							include AddToTable
#ifdef module intercobilling
				if  (FinanceDimension2.RevenueRecognitionOption.Summary
				and  FinanceDimension2.FundingType.IntercompanyBilling)				
					for each ProjectInvoiceRevenueLineNormalRel
						if (each.RevenueLine.Amount entered)
							LocalRevenueCodeBlock	= each.RevenueLine.FinanceCodeBlock
							include ValidateIntercompanyTransaction
#endif						
				if (ProjectContract.RevenueRecognition.Separate
				and ProjectFundingSource.IsExternalFund
				and !InvoiceType.Retainer
				and !InvoiceType.Retainage)
					LocalInvoiceTotal = InvoiceBilledAmount + InvoiceTotalAllowance + InvoiceTotalRetainage - InvoiceTotalAdvance - InvoiceTotalAdjustment
					LocalTotalBilled = ProjectFundingSource.TotalBilledAmount +	ProjectFundingSource.TotalBilledAllowance - ProjectFundingSource.TotalUnappliedAdvanceBillingAmount - ProjectFundingSource.TotalBillingAdjustments
					LocalTotalRecognized = ProjectFundingSource.TotalRecognizedAmount + ProjectFundingSource.TotalRecognizedAllowance
					BilledToDate = LocalTotalBilled - LocalInvoiceTotal
					LocalVariance = BilledToDate - LocalTotalRecognized
					if (LocalVariance >= 0)
						BilledUnearnedAmount = LocalInvoiceTotal
						EarnedUnbilledAmount = 0
					else
						if (LocalInvoiceTotal + LocalVariance <= 0)
							EarnedUnbilledAmount = LocalInvoiceTotal
							BilledUnearnedAmount = 0
						else
							BilledUnearnedAmount = LocalInvoiceTotal + LocalVariance
							EarnedUnbilledAmount = LocalInvoiceTotal - BilledUnearnedAmount						
						
				if   (!InvoiceType.Retainer
				and   !InvoiceType.Retainage
				and   ProjectContract.RevenueRecognition.Separate
				and ((ProjectFundingSource.IsInternalFund
				and  !ProjectFundingSource.RevenueCodeBlockOption.None
				and   InvoiceBilledAmount entered)
				or   (ProjectFundingSource.IsExternalFund
				and  (EarnedUnbilledAmount entered
				or    BilledUnearnedAmount entered))))
					if (ProjectFundingSource.IsInternalFund)
						LocalCodeBlock					= ProjectFundingSource.RevenueClearingAccount
					else
						if (EarnedUnbilledAmount entered)
							LocalCodeBlock				= ProjectFundingSource.EarnedUnbilledAccount
						else
							LocalCodeBlock				= ProjectFundingSource.BilledUnearnedAccount
					LocalCodeBlock.Project				= ProjectFundingSource.ClearingProject
					LocalCodeBlock.FinanceDimension2	= FinanceDimension2
					include AddToTable
					if (ProjectFundingSource.IsExternalFund
					and BilledUnearnedAmount entered
					and EarnedUnbilledAmount entered)
						LocalCodeBlock						= ProjectFundingSource.BilledUnearnedAccount
						LocalCodeBlock.Project				= ProjectFundingSource.ClearingProject
						LocalCodeBlock.FinanceDimension2	= FinanceDimension2
						include AddToTable
					
				if  (InvoiceTotalAmount + InvoiceTotalTaxAmount not = 0
				and !FundAccounting
				and !FinanceDimension2.FundingType.IntercompanyBilling
				and (!FinanceDimension2.IsInternalFund
				or   !ProjectFundingSource.RevenueCodeBlockOption.None))
					initialize LocalCodeBlock
#ifdef module ar
#ifndef property federal
					if (ProjectFundingSource.IsExternalFund
					and FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions
					and ProjectFundingSource.InvoiceFinanceCodeBlock.Project entered)
						LocalCodeBlock					= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
                    if (ProjectFundingSource.IsExternalFund)
						if (!FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							LocalCodeBlock				= FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode.DistributionAccount
					else
						LocalCodeBlock					= ProjectFundingSource.OffsetAccount
#endif					
#ifndef module ar
	                if (FinanceDimension2.FundingType.ExternalGrant
	                or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalCodeBlock.AccountingUnit				= EnterpriseSystemAcctUnitRel.AccountingUnit
						LocalCodeBlock.GeneralLedgerChartAccount	= FinanceEnterpriseGroup.DerivedInterEntityReceivables
					else
						LocalCodeBlock	= ProjectFundingSource.OffsetAccount
#endif
					if (LocalCodeBlock entered)
						include AddToTable
#ifdef module ar
				LocalTaxEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
				if  (InvoiceTotalTaxAmount entered
				and !LocalTaxEntity.ThirdParty.Sabrix
				and !FinanceDimension2.FundingType.IntercompanyBilling)				
					if (ProjectInvoiceTaxSummary set not exists)
						invoke GenerateTaxSummaryData
					for each ProjectInvoiceTaxSummary set
						LocalTaxCode			= each.TaxSummaryKey.BuyerTaxCode
						LocalServiceTaxCode		= each.TaxSummaryKey.ServiceTaxCode
						LocalProductTaxCategory	= each.TaxSummaryKey.ProductTaxCategory
						LocalAddressCode		= each.TaxSummaryKey.BuyerAddressCode
						LocalServiceAddressCode	= each.TaxSummaryKey.ServiceAddressCode
						if (each.ProjectInvoiceTaxSummaryLine set not exists)
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
							if (each.TaxAmount entered)
								LocalFromAccountingEntity			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
								LocalCodeBlock						= LocalFinanceCodeBlock
								include AddToTable
						else
							for each each.ProjectInvoiceTaxSummaryLine set
								if (each.TaxCodeBlock entered)
									LocalFinanceCodeBlock = each.TaxCodeBlock
								else
								if (LocalTaxEntity.UseTaxCodeAccounts)
									LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
								else
									LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
								if (each.TaxAmount entered)
									LocalFromAccountingEntity			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
									LocalCodeBlock						= LocalFinanceCodeBlock
									include AddToTable
				if  (InvoiceTotalTaxAmount entered
				and  LocalTaxEntity.ThirdParty.Sabrix
				and !FinanceDimension2.FundingType.IntercompanyBilling)				
					for each ProjectContractInvoiceLine set
						if (each.TaxAmount entered)
							LocalProject	   = each.Project
							LocalGeneralLedgerChartAccount = each.GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
							LocalTaxCode = each.BuyerTaxCode
							include LoadOneSourceTaxAttribute
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
							LocalFromAccountingEntity			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
							LocalCodeBlock						= LocalFinanceCodeBlock
							include AddToTable
#endif
				LocalProjectStructureValidationResult = ProjectStructureValidationResultView.ProjectStructureValidationResult
				for each ProjectStructureValidationLineRel
					initialize ErrorFound
					invoke Create ProjectStructureValidationTest
						assign result to ProjectStructureValidationTestView
						resume on error
							ErrorFound = true
							LocalErrorMessage = error message
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PostingDate				= PostingDate									
						invoked.AccountingEntity		= each.ValidationCodeBlock.AccountingEntity
						invoked.FinanceCodeBlock		= each.ValidationCodeBlock.FinanceCodeBlock
						invoked.System					= "PS"
						invoked.TransactionDate			= InvoiceDate
						invoked.BypassUnitAndAmountEdit	= true
						invoked.ValidateProjectFinanceStructure = true
					if (ErrorFound)
						ErrorCounter += 1
						invoke Create ProjectStructureValidationError
							fill in fields from ProjectStructureValidationResultView.ProjectStructureValidationResult
							invoked.Error				= ErrorCounter
							invoked.ErrorMessage 		= LocalErrorMessage
							invoked.FinanceCodeBlock	= each.ValidationCodeBlock.FinanceCodeBlock
					else
						invoke Purge ProjectStructureValidationTestView.ProjectStructureValidationTest
					invoke Purge each
					if (TranCount = 50)
						commit transaction
						initialize TranCount
					TranCount += 1
			Exit Rules
				invoke PurgeAll ProjectInvoiceRevenueLine
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmProjectContract			= ProjectContract
					invoked.PrmFinanceDimension2	 	= FinanceDimension2
					invoked.PrmProjectContractInvoice	= ProjectContractInvoice
					invoked.PrmValidation				= LocalValidation

		GenerateTaxSummaryData is an Instance Action
			restricted
			Action Rules
				for each ProjectContractInvoiceBaseTaxLinesRel
					LocalBuyerTaxCode		= each.BuyerTaxCode
					LocalServiceTaxCode		= each.TaxCode
					LocalProductTaxCategory	= each.ProductTaxCategory
					LocalAddressCode		= each.AddressCode
					LocalServiceAddressCode	= each.ServiceAddressCode
					if (ProjectInvoiceTaxSummaryOTORel not exists)
						invoke Create ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount = each.Amount
							invoked.TaxAmount	  = each.TaxAmount
							invoked.TaxRate		  = each.TaxRate
					else
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += each.Amount
							invoked.TaxAmount	  += each.TaxAmount
					if (RecordCount >= 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1
				for each ProjectContractInvoiceTaxLineRel
					LocalBuyerTaxCode		= each.ProjectContractInvoiceLine.BuyerTaxCode
					LocalServiceTaxCode		= each.ProjectContractInvoiceLine.TaxCode
					LocalProductTaxCategory	= each.ProjectContractInvoiceLine.ProductTaxCategory
					LocalAddressCode		= each.ProjectContractInvoiceLine.AddressCode
					LocalServiceAddressCode = each.ProjectContractInvoiceLine.ServiceAddressCode
					if (ProjectInvoiceTaxSummaryOTORel not exists)
						invoke Create ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount = each.ProjectContractInvoiceLine.Amount
							invoked.TaxAmount	  = each.ProjectContractInvoiceLine.TaxAmount
							invoked.TaxRate		  = each.ProjectContractInvoiceLine.TaxRate
							invoked.Generating	  = true
					else
					if (each.LineNumber = 1)
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += each.ProjectContractInvoiceLine.Amount
							invoked.TaxAmount	  += each.ProjectContractInvoiceLine.TaxAmount
							invoked.Generating	  = true
					LocalTaxCounter = each.LineNumber				
					if (ProjectInvoiceTaxSummaryLineOTORel not exists)
						invoke Create ProjectInvoiceTaxSummaryLineOTORel
							invoked.BuyerTaxCode	= each.BuyerTaxCode
							invoked.TaxCodeBlock	= each.TaxCodeBlock
							invoked.TaxRate			= each.TaxRate
							invoked.TaxableAmount	= each.TaxableAmount
							invoked.TaxAmount		= each.TaxAmount
							invoked.Generating		= true
					else
						invoke Update ProjectInvoiceTaxSummaryLineOTORel
							invoked.TaxableAmount += each.TaxableAmount
							invoked.TaxAmount	  += each.TaxAmount
							invoked.Generating	  = true
					if (RecordCount >= 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1

		GenerateRevenueJournalEntries is an Instance Action
			run in background
			valid when (Status.Created)
			restricted
			Parameters
				PostingDate is Date
			Parameter Rules
				PostingDate
					required
					default to InvoiceDate
					initial value is InvoiceDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if  (ProjectContract.RevenueRecognition.Separate
					and !ProjectFundingSource.RevenueCodeBlockOption.None)
						constraint (ProjectFundingSource.ClearingProject entered)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup
        		LocalAmount				is an InternationalAmount
				LocalTotalBilled		is an InternationalAmount
				LocalTotalRecognized	is an InternationalAmount
				LocalInvoiceTotal		is an InternationalAmount
				Counter					is Numeric size 4
				RecognizedToDate		is like InternationalAmount
				EarnedUnbilledAmount	is like InternationalAmount
				BilledUnearnedAmount	is like InternationalAmount
				PassThroughAmount		is like InternationalAmount
				LocalVariance			is like InternationalAmount
        		RemainingAmount			is like InternationalAmount
        		TotalAmount				is like InternationalAmount
        		Distribute100Percent	is Boolean
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
				LocalLineNumber			is Numeric size 8
				TranCount				is Numeric size 2
				RevenueCounter			is like SequenceNumber
				DefaultedArray

			Entrance Rules
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				LocalValidation = false
				invoke Purge ProjectInvoiceRevenueLineAllRel

				initialize LocalInvoiceTotalAmounts
				initialize LocalInvoiceTotalUnitsAmount
				initialize LocalInvoiceTotalTaxAmounts
				initialize LocalInvoiceTotalRetainerAmount
				initialize LocalInvoiceTotalAllowance
				initialize LocalInvoiceTotalRetainage

				initialize LocalInvoiceTotalFees
				initialize LocalInvoiceTotalAdvance
				initialize LocalInvoiceTotalPassThrough
				initialize LocalInvoiceTotalAdjustment
				LocalInvoiceTotalsComputed = true

			Action Rules
				for each ProjectContractInvoiceLine set
					if (TranCount >= 3)
						commit transaction
						initialize TranCount
					TranCount += 1
					LocalInvoiceTotalAmounts	 += each.Amount 
					LocalInvoiceTotalUnitsAmount += each.UnitsAmount
					LocalInvoiceTotalTaxAmounts  += each.TaxAmount					
					if (each.ProjectContractRetainer entered)
						LocalInvoiceTotalRetainerAmount += each.Amount
					if (each.IsAllowance)
						LocalInvoiceTotalAllowance += each.Amount
					if (each.IsRetainage)
						LocalInvoiceTotalRetainage   += each.Amount

					if (each.FeeCode entered)
						LocalInvoiceTotalFees += each.Amount
					if (each.ProjectContractAdvance entered
					or  each.AppliedProjectContractAdvance entered)
						LocalInvoiceTotalAdvance += each.Amount
					if (each.BillingMethod.PassThrough)
						LocalInvoiceTotalPassThrough += each.Amount
					if  (each.Adjusted
					and !each.Deferred
					and !each.BillingMethod.PassThrough)
						LocalInvoiceTotalAdjustment += each.AdjustmentAmount
					LocalLineNumber = each.SequenceNumber
					if (each.ProjectContractMilestone entered)
						invoke UpdateStatus each.ProjectContractMilestone
							invoked.PrmStatus = 2
					else
					if (each.GLTransactionDetail entered)
						if (each.GLTransactionDetail.RevenueRecognized.Draft)
							invoke UpdateRecognizedStatus each.GLTransactionDetail
								invoked.PrmRecognized = 1
						LocalFinanceCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.RevenueAmount += each.Amount
						else
							invoke Create ProjectContractInvoiceBalance
								fill in fields from each
									except invoked.Amount
									except invoked.BillableAmount
									except invoked.UnitsAmount
									except invoked.TaxAmount
								invoked.FinanceCodeBlock = LocalFinanceCodeBlock
								invoked.RevenueAmount    = each.Amount

					if (!FinanceDimension2.IsInternalFund
					or  !ProjectFundingSource.RevenueCodeBlockOption.None)
						if (each.ProjectContractMilestone entered)
							if (each.ProjectContractMilestone.TotalDistributionPercent entered)
								RemainingAmount = each.Amount
								TotalAmount		= each.Amount
								LocalProject	= each.Project
								RecordCount		= each.ProjectContractMilestone.RecordCount
								initialize Counter
								initialize Distribute100Percent
								if (each.ProjectContractMilestone.TotalDistributionPercent = 1)
									Distribute100Percent = true
								for each each.ProjectContractMilestone.ProjectContractMilestoneDistribution set
									Counter += 1
									LocalAmount = TotalAmount * each.Percent
									RemainingAmount -= LocalAmount
									if (Distribute100Percent
									and Counter = RecordCount
									and RemainingAmount entered)
										LocalAmount += RemainingAmount
										RemainingAmount = 0
									LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
									if (each.RevenueFullAccount entered)
										LocalRevenueCodeBlock = each.RevenueFullAccount
									else
									if (each.RevenuePartialAccount entered)
										if (each.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = each.RevenuePartialAccount.ToAccountingEntity
										if (each.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
										if (each.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.RevenuePartialAccount.GeneralLedgerChartAccount
										if (each.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
										if (each.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = each.RevenuePartialAccount.FinanceDimension3
										if (each.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = each.RevenuePartialAccount.FinanceDimension4
										if (each.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = each.RevenuePartialAccount.FinanceDimension5
										if (each.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = each.RevenuePartialAccount.FinanceDimension6
										if (each.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = each.RevenuePartialAccount.FinanceDimension7
										if (each.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = each.RevenuePartialAccount.FinanceDimension8
										if (each.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = each.RevenuePartialAccount.FinanceDimension9
										if (each.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = each.RevenuePartialAccount.FinanceDimension10
									LocalRevenueCodeBlock.Project			= LocalProject
									LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
									if (FinanceDimension2.RevenueRecognitionOption.Summary)
										LocalTableType	   = 0
										LocalRevenueAmount = LocalAmount
										include AddToRevenueTable
									else
										initialize ErrorFound
										invoke Released.Create GLTransactionDetail
					        				resume on error
												ErrorFound = true
												LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.JournalizeGroup			= LocalJournalizeGroup
											invoked.AccountingEntity		= LocalAccountingEntity
											invoked.PostingDate				= PostingDate									
											invoked.TransactionAmount		= LocalAmount * -1
											invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
											invoked.System					= "PS"
											invoked.GeneralLedgerEvent		= "RE"
											invoked.TransactionDate			= InvoiceDate
											invoked.CurrencyCode			= ProjectContract.Currency
											invoked.Reference				= "ProjectRevenueRecognition"
											invoked.Billed					= 4 
											invoked.Description				= "ProjectRevenueRecognition"											
										if (ErrorFound)
											invoke Create ProjectContractInvoiceError
												fill in fields from this instance
												invoked.ErrorMessage 	= LocalErrorMessage
												invoked.LineNumber   	= LocalLineNumber
												invoked.JournalizeGroup	= LocalJournalizeGroup
								if (RemainingAmount entered)
									LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
									LocalRevenueCodeBlock.Project			= LocalProject
									LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
									if (FinanceDimension2.RevenueRecognitionOption.Summary)
										LocalTableType	   = 0
										LocalRevenueAmount = RemainingAmount
										include AddToRevenueTable
									else
										initialize ErrorFound
										invoke Released.Create GLTransactionDetail
					        				resume on error
												ErrorFound = true
												LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.JournalizeGroup			= LocalJournalizeGroup
											invoked.PostingDate				= PostingDate
											invoked.AccountingEntity		= LocalAccountingEntity
											invoked.TransactionAmount		= RemainingAmount * -1
											invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
											invoked.System					= "PS"
											invoked.GeneralLedgerEvent		= "RE"
											invoked.TransactionDate			= InvoiceDate
											invoked.CurrencyCode			= ProjectContract.Currency
											invoked.Reference				= "ProjectRevenueRecognition"
											invoked.Billed					= 4 
											invoked.Description				= "ProjectRevenueRecognition"																						
										if (ErrorFound)
											invoke Create ProjectContractInvoiceError
												fill in fields from this instance
												invoked.ErrorMessage 	= LocalErrorMessage
												invoked.LineNumber   	= LocalLineNumber
												invoked.JournalizeGroup	= LocalJournalizeGroup
							else
								LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
								LocalRevenueCodeBlock.Project			= each.Project
								LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
								if (FinanceDimension2.RevenueRecognitionOption.Summary)
									LocalTableType	   = 0
									LocalRevenueAmount = each.Amount
									include AddToRevenueTable
								else
									initialize ErrorFound
									invoke Released.Create GLTransactionDetail
				        				resume on error
											ErrorFound = true
											LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.JournalizeGroup			= LocalJournalizeGroup
										invoked.AccountingEntity		= LocalAccountingEntity
										invoked.PostingDate				= PostingDate
										invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
										invoked.System					= "PS"
										invoked.GeneralLedgerEvent		= "RE"
										invoked.TransactionDate			= InvoiceDate
										invoked.CurrencyCode			= ProjectContract.Currency
										invoked.TransactionAmount		= each.Amount * -1
										invoked.Reference				= "ProjectRevenueRecognition"
										invoked.Billed					= 4 
										invoked.Description				= "ProjectRevenueRecognition"																					
									if (ErrorFound)
										invoke Create ProjectContractInvoiceError
											fill in fields from this instance
											invoked.ErrorMessage 	= LocalErrorMessage
											invoked.LineNumber   	= LocalLineNumber
											invoked.JournalizeGroup	= LocalJournalizeGroup
						else
							LocalProject = each.Project
							include SetLocalProjectCodeBlock
							LocalRevenueCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
							if  (each.FeeCode entered
							and (each.ProjectContractFeeRel.RevenueFullAccount entered
							or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
								if (each.ProjectContractFeeRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
								else
								if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
									if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
									if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
									if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
							else
#ifndef property federal
							if (each.IsAllowance
							and ProjectFundingSource.AllowanceFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.AllowanceFullAccount
							else
#endif
							if (ProjectBillingOverrideRel.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
							else
							if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
								if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
								if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
								if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
							else
							if (LocalProject.RevenueFullAccount entered)
								LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
							else
							if (LocalProject.RevenuePartialAccount entered)
								if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
								if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
								if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
								if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
								if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
								if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
								if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
								if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
								if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
								if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
								if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
								if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectFundingSource.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							else
								initialize DefaultedArray
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
								and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
								and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (ProjectFundingSource.RevenuePartialAccount entered)
									if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
									and !DefaultedArray.Defaulted[1])
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
									if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
									and !DefaultedArray.Defaulted[2])
										LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
									if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
									and !DefaultedArray.Defaulted[3])
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
									and !DefaultedArray.Defaulted[4])
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
									and !DefaultedArray.Defaulted[5])
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
									and !DefaultedArray.Defaulted[6])
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
									and !DefaultedArray.Defaulted[7])
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
									and !DefaultedArray.Defaulted[8])
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
									and !DefaultedArray.Defaulted[9])
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
									and !DefaultedArray.Defaulted[10])
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
									and !DefaultedArray.Defaulted[11])
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
									and !DefaultedArray.Defaulted[12])
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = each.Amount
								include AddToRevenueTable
							else
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
			        				resume on error
										ErrorFound = true
										LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.JournalizeGroup			= LocalJournalizeGroup
									invoked.AccountingEntity		= LocalAccountingEntity
									invoked.PostingDate				= PostingDate
									invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
									invoked.System					= "PS"
									invoked.GeneralLedgerEvent		= "RE"
									invoked.TransactionDate			= InvoiceDate
									invoked.CurrencyCode			= ProjectContract.Currency
									invoked.TransactionAmount		= each.Amount * -1
									invoked.Reference				= "ProjectRevenueRecognition"
									invoked.Billed					= 4 
									invoked.Description				= "ProjectRevenueRecognition"																				
								if (ErrorFound)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage 	= LocalErrorMessage
										invoked.LineNumber   	= LocalLineNumber
										invoked.JournalizeGroup	= LocalJournalizeGroup
								
							if (each.BillingMethod.PassThrough)
								LocalRevenueCodeBlock = ProjectFundingSource.PassThroughAccount
								LocalRevenueCodeBlock.Project			= each.Project
								LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
								LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
								if (FinanceDimension2.RevenueRecognitionOption.Summary)
									LocalTableType	   = 1
									LocalRevenueAmount = each.Amount
									include AddToRevenueTable
								else
									initialize ErrorFound
									invoke Released.Create GLTransactionDetail
				        				resume on error
											ErrorFound = true
											LocalErrorMessage = error message + "; " + PassThroughErrorMF
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.JournalizeGroup			= LocalJournalizeGroup
										invoked.AccountingEntity		= LocalAccountingEntity
										invoked.PostingDate				= PostingDate
										invoked.FinanceCodeBlock		= LocalRevenueCodeBlock
										invoked.System					= "PS"
										invoked.GeneralLedgerEvent		= "RE"
										invoked.TransactionDate			= InvoiceDate
										invoked.CurrencyCode			= ProjectContract.Currency
										invoked.TransactionAmount		= each.Amount
										invoked.Reference				= "ProjectRevenueRecognition"
										invoked.Billed					= 4 
										invoked.Description				= "ProjectRevenueRecognition"																					
									if (ErrorFound)
										invoke Create ProjectContractInvoiceError
											fill in fields from this instance
											invoked.ErrorMessage 	= LocalErrorMessage
											invoked.LineNumber   	= LocalLineNumber
											invoked.JournalizeGroup	= LocalJournalizeGroup
								
				if (FinanceDimension2.RevenueRecognitionOption.Summary)
					for each ProjectInvoiceRevenueLineAllRel
						LocalTableType = each.RevenueLineKey.TableType
						if (each.RevenueLine.Amount entered)
							initialize ErrorFound
							invoke Released.Create GLTransactionDetail
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + RevenueErrorText
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.JournalizeGroup			= LocalJournalizeGroup
								invoked.AccountingEntity		= LocalAccountingEntity
								invoked.PostingDate				= PostingDate
								invoked.FinanceCodeBlock		= each.RevenueLine.FinanceCodeBlock
								invoked.System					= "PS"
								invoked.GeneralLedgerEvent		= "RE"
								invoked.TransactionDate			= InvoiceDate
								invoked.CurrencyCode			= ProjectContract.Currency
								if (LocalTableType = 0)
									invoked.TransactionAmount	= each.RevenueLine.Amount * -1
								else
									invoked.TransactionAmount	= each.RevenueLine.Amount
								invoked.Reference				= "ProjectRevenueRecognition"
								invoked.Billed					= 4 
								invoked.Description				= "ProjectRevenueRecognition"																			
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage 	= LocalErrorMessage
									invoked.JournalizeGroup	= LocalJournalizeGroup
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
					
				if (ProjectFundingSource.IsExternalFund)
					LocalTotalBilled = ProjectFundingSource.TotalBilledAmount +	ProjectFundingSource.TotalBilledAllowance - ProjectFundingSource.TotalBillingAdjustments
					LocalTotalRecognized = ProjectFundingSource.TotalRecognizedAmount + ProjectFundingSource.TotalRecognizedAllowance
					LocalInvoiceTotal = InvoiceTotalAmount - InvoiceTotalPassThrough
					RecognizedToDate = LocalTotalRecognized - LocalInvoiceTotal
					LocalVariance = RecognizedToDate - LocalTotalBilled
					if (LocalVariance >= 0)
						EarnedUnbilledAmount = LocalInvoiceTotal
						BilledUnearnedAmount = 0
					else
						if (LocalInvoiceTotal + LocalVariance <= 0)
							BilledUnearnedAmount = LocalInvoiceTotal
							EarnedUnbilledAmount = 0
						else
							EarnedUnbilledAmount = LocalInvoiceTotal + LocalVariance
							BilledUnearnedAmount = LocalInvoiceTotal - EarnedUnbilledAmount

				if ((ProjectFundingSource.IsInternalFund
				and !ProjectFundingSource.RevenueCodeBlockOption.None
				and  InvoiceTotalAmount entered)
				or  (ProjectFundingSource.IsExternalFund
				and (EarnedUnbilledAmount entered
				or   BilledUnearnedAmount entered)))
					initialize ErrorFound
					invoke Released.Create GLTransactionDetail
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.JournalizeGroup			= LocalJournalizeGroup
						invoked.AccountingEntity		= LocalAccountingEntity
						invoked.PostingDate				= PostingDate
						if (ProjectFundingSource.IsInternalFund)
							invoked.FinanceCodeBlock	= ProjectFundingSource.RevenueClearingAccount
							invoked.TransactionAmount	= InvoiceTotalAmount
						else
							if (EarnedUnbilledAmount entered)
								invoked.FinanceCodeBlock	= ProjectFundingSource.EarnedUnbilledAccount
								invoked.TransactionAmount	= EarnedUnbilledAmount
							else
								invoked.FinanceCodeBlock	= ProjectFundingSource.BilledUnearnedAccount
								invoked.TransactionAmount	= BilledUnearnedAmount
						invoked.FinanceCodeBlock.Project			= ProjectFundingSource.ClearingProject
						invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2
						invoked.System					= "PS"
						invoked.GeneralLedgerEvent		= "RE"
						invoked.TransactionDate			= InvoiceDate
						invoked.CurrencyCode			= ProjectContract.Currency
						invoked.Reference				= "ProjectRevenueRecognition"
						invoked.Billed					= 4 
						invoked.Description				= "ProjectRevenueRecognition"																	
					if (ErrorFound)
						invoke Create ProjectContractInvoiceError
							fill in fields from this instance
							invoked.ErrorMessage 	= LocalErrorMessage
							invoked.JournalizeGroup	= LocalJournalizeGroup
					if (ProjectFundingSource.IsExternalFund
					and BilledUnearnedAmount entered
					and EarnedUnbilledAmount entered)
						initialize ErrorFound
						invoke Released.Create GLTransactionDetail
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.JournalizeGroup			= LocalJournalizeGroup
							invoked.PostingDate				= PostingDate
							invoked.AccountingEntity		= LocalAccountingEntity
							invoked.FinanceCodeBlock		= ProjectFundingSource.BilledUnearnedAccount
							invoked.TransactionAmount		= BilledUnearnedAmount
							invoked.FinanceCodeBlock.Project			= ProjectFundingSource.ClearingProject
							invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2
							invoked.System					= "PS"
							invoked.GeneralLedgerEvent		= "RE"
							invoked.TransactionDate			= InvoiceDate
							invoked.CurrencyCode			= ProjectContract.Currency
							invoked.Reference				= "ProjectRevenueRecognition"
							invoked.Billed					= 4 
							invoked.Description				= "ProjectRevenueRecognition"																		
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage 	= LocalErrorMessage
								invoked.JournalizeGroup	= LocalJournalizeGroup
				Status = 1
				if (!FinanceDimension2.IsInternalFund
				or  !ProjectFundingSource.RevenueCodeBlockOption.None)
					JournalizeGroup = LocalJournalizeGroup
				if (TotalInvoiceAmount not entered)
					TotalInvoiceAmount = LocalInvoiceTotalAmounts
					TotalUnits = LocalInvoiceTotalUnitsAmount
					TotalTax = LocalInvoiceTotalTaxAmounts
					TotalFees = LocalInvoiceTotalFees
					if (!InvoiceType.Retainer)
						TotalRetainer = LocalInvoiceTotalRetainerAmount
						TotalAllowance = LocalInvoiceTotalAllowance
						TotalRetainage = LocalInvoiceTotalRetainage * -1
						TotalAdvance = LocalInvoiceTotalAdvance
						TotalPassThrough = LocalInvoiceTotalPassThrough
						TotalAdjustment = LocalInvoiceTotalAdjustment
			Exit Rules
				invoke PurgeAll ProjectInvoiceRevenueLine
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmProjectContract			= ProjectContract
					invoked.PrmFinanceDimension2	 	= FinanceDimension2
					invoked.PrmProjectContractInvoice	= ProjectContractInvoice
					invoked.PrmValidation				= LocalValidation
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup		

		ValidateRevenueJournalEntries is an Instance Action
			run in background
			valid when (Status.Created)
			restricted
			Parameters
				PostingDate is Date
			Parameter Rules
				PostingDate
					required
					default to InvoiceDate
					initial value is InvoiceDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if  (ProjectContract.RevenueRecognition.Separate
					and !ProjectFundingSource.RevenueCodeBlockOption.None)
						constraint (ProjectFundingSource.ClearingProject entered)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<ProjectFundingSource.FinanceDimension2>"
			Local Fields
        		LocalAmount				is an InternationalAmount
				LocalTotalBilled		is an InternationalAmount
				LocalTotalRecognized	is an InternationalAmount
				LocalInvoiceTotal		is an InternationalAmount
				Counter					is Numeric size 4
				RecognizedToDate		is like InternationalAmount
				EarnedUnbilledAmount	is like InternationalAmount
				BilledUnearnedAmount	is like InternationalAmount
				LocalVariance			is like InternationalAmount
        		RemainingAmount			is like InternationalAmount
        		TotalAmount				is like InternationalAmount
        		Distribute100Percent	is Boolean
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
				LocalLineNumber			is Numeric size 8
				TranCount				is Numeric size 2
				RevenueCounter			is like SequenceNumber
				ProjectStructureValidationTestView		is a ProjectStructureValidationTest view
				ProjectStructureValidationResultView	is a ProjectStructureValidationResult view
				ErrorCounter			is like SequenceNumber
				LineCount				is like SequenceNumber
				DefaultedArray
			Entrance Rules
				LocalValidation = true
				invoke Purge ProjectInvoiceRevenueLineAllRel
			Action Rules
				LocalFromAccountingEntity			= LocalAccountingEntity
				invoke Create ProjectStructureValidationResult
					assign result to ProjectStructureValidationResultView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.RunTime				   	= current timestamp
					invoked.TestType				= 2
					invoked.Contract				= ProjectContract.DisplayProject
					invoked.Invoice					= ProjectContractInvoice			

				commit transaction

				for each ProjectContractInvoiceLine set
					if (!FinanceDimension2.IsInternalFund
					or  !ProjectFundingSource.RevenueCodeBlockOption.None)
						if (each.ProjectContractMilestone entered)
							if (each.ProjectContractMilestone.TotalDistributionPercent entered)
								RemainingAmount = each.Amount
								TotalAmount		= each.Amount
								LocalProject	= each.Project
								RecordCount		= each.ProjectContractMilestone.RecordCount
								initialize Counter
								initialize Distribute100Percent
								if (each.ProjectContractMilestone.TotalDistributionPercent = 1)
									Distribute100Percent = true
								for each each.ProjectContractMilestone.ProjectContractMilestoneDistribution set
									Counter += 1
									LocalAmount = TotalAmount * each.Percent
									RemainingAmount -= LocalAmount
									if (Distribute100Percent
									and Counter = RecordCount
									and RemainingAmount entered)
										LocalAmount += RemainingAmount
										RemainingAmount = 0
									LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
									if (each.RevenueFullAccount entered)
										LocalRevenueCodeBlock = each.RevenueFullAccount
									else
									if (each.RevenuePartialAccount entered)
										if (each.RevenuePartialAccount.ToAccountingEntity entered)
											LocalRevenueCodeBlock.ToAccountingEntity = each.RevenuePartialAccount.ToAccountingEntity
										if (each.RevenuePartialAccount.AccountingUnit entered)
											LocalRevenueCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
										if (each.RevenuePartialAccount.GeneralLedgerChartAccount entered)
											LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.RevenuePartialAccount.GeneralLedgerChartAccount
										if (each.RevenuePartialAccount.FinanceDimension1 entered)
											LocalRevenueCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
										if (each.RevenuePartialAccount.FinanceDimension3 entered)
											LocalRevenueCodeBlock.FinanceDimension3 = each.RevenuePartialAccount.FinanceDimension3
										if (each.RevenuePartialAccount.FinanceDimension4 entered)
											LocalRevenueCodeBlock.FinanceDimension4 = each.RevenuePartialAccount.FinanceDimension4
										if (each.RevenuePartialAccount.FinanceDimension5 entered)
											LocalRevenueCodeBlock.FinanceDimension5 = each.RevenuePartialAccount.FinanceDimension5
										if (each.RevenuePartialAccount.FinanceDimension6 entered)
											LocalRevenueCodeBlock.FinanceDimension6 = each.RevenuePartialAccount.FinanceDimension6
										if (each.RevenuePartialAccount.FinanceDimension7 entered)
											LocalRevenueCodeBlock.FinanceDimension7 = each.RevenuePartialAccount.FinanceDimension7
										if (each.RevenuePartialAccount.FinanceDimension8 entered)
											LocalRevenueCodeBlock.FinanceDimension8 = each.RevenuePartialAccount.FinanceDimension8
										if (each.RevenuePartialAccount.FinanceDimension9 entered)
											LocalRevenueCodeBlock.FinanceDimension9 = each.RevenuePartialAccount.FinanceDimension9
										if (each.RevenuePartialAccount.FinanceDimension10 entered)
											LocalRevenueCodeBlock.FinanceDimension10 = each.RevenuePartialAccount.FinanceDimension10
									LocalRevenueCodeBlock.Project			= LocalProject
									LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
									if (FinanceDimension2.RevenueRecognitionOption.Summary)
										LocalTableType	   = 0
										LocalRevenueAmount = LocalAmount
										include AddToRevenueTable
									else
										LocalCodeBlock			= LocalRevenueCodeBlock
										include AddToTable
								if (RemainingAmount entered)
									LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
									LocalRevenueCodeBlock.Project			= LocalProject
									LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
									if (FinanceDimension2.RevenueRecognitionOption.Summary)
										LocalTableType	   = 0
										LocalRevenueAmount = RemainingAmount
										include AddToRevenueTable
									else
										LocalCodeBlock			= LocalRevenueCodeBlock
										include AddToTable
							else
								LocalRevenueCodeBlock					= ProjectFundingSource.RevenueFullAccount
								LocalRevenueCodeBlock.Project			= each.Project
								LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
								if (FinanceDimension2.RevenueRecognitionOption.Summary)
									LocalTableType	   = 0
									LocalRevenueAmount = each.Amount
									include AddToRevenueTable
								else
									LocalCodeBlock			= LocalRevenueCodeBlock
									include AddToTable
						else
							LocalProject = each.Project
							include SetLocalProjectCodeBlock
							LocalRevenueCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
							if  (each.FeeCode entered
							and (each.ProjectContractFeeRel.RevenueFullAccount entered
							or   each.ProjectContractFeeRel.RevenuePartialAccount entered))
								if (each.ProjectContractFeeRel.RevenueFullAccount entered)
									LocalRevenueCodeBlock = each.ProjectContractFeeRel.RevenueFullAccount
								else
								if (each.ProjectContractFeeRel.RevenuePartialAccount entered)
									if (each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = each.ProjectContractFeeRel.RevenuePartialAccount.ToAccountingEntity
									if (each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = each.ProjectContractFeeRel.RevenuePartialAccount.AccountingUnit
									if (each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = each.ProjectContractFeeRel.RevenuePartialAccount.GeneralLedgerChartAccount
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension1
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension3
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension4
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension5
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension6
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension7
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension8
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension9
									if (each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = each.ProjectContractFeeRel.RevenuePartialAccount.FinanceDimension10
							else
#ifndef property federal
							if (each.IsAllowance
							and ProjectFundingSource.AllowanceFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.AllowanceFullAccount
							else
#endif
							if (ProjectBillingOverrideRel.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectBillingOverrideRel.RevenueFullAccount
							else
							if (ProjectBillingOverrideRel.RevenuePartialAccount entered)
								if (ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = ProjectBillingOverrideRel.RevenuePartialAccount.ToAccountingEntity
								if (ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = ProjectBillingOverrideRel.RevenuePartialAccount.AccountingUnit
								if (ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectBillingOverrideRel.RevenuePartialAccount.GeneralLedgerChartAccount
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension1
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension3
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension4
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension5
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension6
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension7
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension8
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension9
								if (ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = ProjectBillingOverrideRel.RevenuePartialAccount.FinanceDimension10
							else
							if (LocalProject.RevenueFullAccount entered)
								LocalRevenueCodeBlock = LocalProject.RevenueFullAccount
							else
							if (LocalProject.RevenuePartialAccount entered)
								if (LocalProject.RevenuePartialAccount.ToAccountingEntity entered)
									LocalRevenueCodeBlock.ToAccountingEntity = LocalProject.RevenuePartialAccount.ToAccountingEntity
								if (LocalProject.RevenuePartialAccount.AccountingUnit entered)
									LocalRevenueCodeBlock.AccountingUnit = LocalProject.RevenuePartialAccount.AccountingUnit
								if (LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount entered)
									LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalProject.RevenuePartialAccount.GeneralLedgerChartAccount
								if (LocalProject.RevenuePartialAccount.FinanceDimension1 entered)
									LocalRevenueCodeBlock.FinanceDimension1 = LocalProject.RevenuePartialAccount.FinanceDimension1
								if (LocalProject.RevenuePartialAccount.FinanceDimension3 entered)
									LocalRevenueCodeBlock.FinanceDimension3 = LocalProject.RevenuePartialAccount.FinanceDimension3
								if (LocalProject.RevenuePartialAccount.FinanceDimension4 entered)
									LocalRevenueCodeBlock.FinanceDimension4 = LocalProject.RevenuePartialAccount.FinanceDimension4
								if (LocalProject.RevenuePartialAccount.FinanceDimension5 entered)
									LocalRevenueCodeBlock.FinanceDimension5 = LocalProject.RevenuePartialAccount.FinanceDimension5
								if (LocalProject.RevenuePartialAccount.FinanceDimension6 entered)
									LocalRevenueCodeBlock.FinanceDimension6 = LocalProject.RevenuePartialAccount.FinanceDimension6
								if (LocalProject.RevenuePartialAccount.FinanceDimension7 entered)
									LocalRevenueCodeBlock.FinanceDimension7 = LocalProject.RevenuePartialAccount.FinanceDimension7
								if (LocalProject.RevenuePartialAccount.FinanceDimension8 entered)
									LocalRevenueCodeBlock.FinanceDimension8 = LocalProject.RevenuePartialAccount.FinanceDimension8
								if (LocalProject.RevenuePartialAccount.FinanceDimension9 entered)
									LocalRevenueCodeBlock.FinanceDimension9 = LocalProject.RevenuePartialAccount.FinanceDimension9
								if (LocalProject.RevenuePartialAccount.FinanceDimension10 entered)
									LocalRevenueCodeBlock.FinanceDimension10 = LocalProject.RevenuePartialAccount.FinanceDimension10
							else
							if (ProjectFundingSource.RevenueFullAccount entered)
								LocalRevenueCodeBlock = ProjectFundingSource.RevenueFullAccount
							else
								initialize DefaultedArray
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3
								and LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension3.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4
								and LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount entered)
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity entered)
										LocalRevenueCodeBlock.ToAccountingEntity = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.ToAccountingEntity
										DefaultedArray.Defaulted[1] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit entered)
										LocalRevenueCodeBlock.AccountingUnit = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.AccountingUnit
										DefaultedArray.Defaulted[2] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount entered)
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.GeneralLedgerChartAccount
										DefaultedArray.Defaulted[3] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1 entered)
										LocalRevenueCodeBlock.FinanceDimension1 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension1
										DefaultedArray.Defaulted[4] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3 entered)
										LocalRevenueCodeBlock.FinanceDimension3 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension3
										DefaultedArray.Defaulted[5] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4 entered)
										LocalRevenueCodeBlock.FinanceDimension4 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension4
										DefaultedArray.Defaulted[6] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5 entered)
										LocalRevenueCodeBlock.FinanceDimension5 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension5
										DefaultedArray.Defaulted[7] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6 entered)
										LocalRevenueCodeBlock.FinanceDimension6 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension6
										DefaultedArray.Defaulted[8] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7 entered)
										LocalRevenueCodeBlock.FinanceDimension7 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension7
										DefaultedArray.Defaulted[9] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8 entered)
										LocalRevenueCodeBlock.FinanceDimension8 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension8
										DefaultedArray.Defaulted[10] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9 entered)
										LocalRevenueCodeBlock.FinanceDimension9 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension9
										DefaultedArray.Defaulted[11] = true
									if (LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10 entered)
										LocalRevenueCodeBlock.FinanceDimension10 = LocalRevenueCodeBlock.FinanceDimension4.RevenuePartialAccount.FinanceDimension10
										DefaultedArray.Defaulted[12] = true
								if (ProjectFundingSource.RevenuePartialAccount entered)
									if (ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity entered
									and !DefaultedArray.Defaulted[1])
										LocalRevenueCodeBlock.ToAccountingEntity = ProjectFundingSource.RevenuePartialAccount.ToAccountingEntity
									if (ProjectFundingSource.RevenuePartialAccount.AccountingUnit entered
									and !DefaultedArray.Defaulted[2])
										LocalRevenueCodeBlock.AccountingUnit = ProjectFundingSource.RevenuePartialAccount.AccountingUnit
									if (ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount entered
									and !DefaultedArray.Defaulted[3])
										LocalRevenueCodeBlock.GeneralLedgerChartAccount = ProjectFundingSource.RevenuePartialAccount.GeneralLedgerChartAccount
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension1 entered
									and !DefaultedArray.Defaulted[4])
										LocalRevenueCodeBlock.FinanceDimension1 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension1
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension3 entered
									and !DefaultedArray.Defaulted[5])
										LocalRevenueCodeBlock.FinanceDimension3 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension3
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension4 entered
									and !DefaultedArray.Defaulted[6])
										LocalRevenueCodeBlock.FinanceDimension4 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension4
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension5 entered
									and !DefaultedArray.Defaulted[7])
										LocalRevenueCodeBlock.FinanceDimension5 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension5
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension6 entered
									and !DefaultedArray.Defaulted[8])
										LocalRevenueCodeBlock.FinanceDimension6 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension6
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension7 entered
									and !DefaultedArray.Defaulted[9])
										LocalRevenueCodeBlock.FinanceDimension7 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension7
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension8 entered
									and !DefaultedArray.Defaulted[10])
										LocalRevenueCodeBlock.FinanceDimension8 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension8
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension9 entered
									and !DefaultedArray.Defaulted[11])
										LocalRevenueCodeBlock.FinanceDimension9 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension9
									if (ProjectFundingSource.RevenuePartialAccount.FinanceDimension10 entered
									and !DefaultedArray.Defaulted[12])
										LocalRevenueCodeBlock.FinanceDimension10 = ProjectFundingSource.RevenuePartialAccount.FinanceDimension10
							LocalRevenueCodeBlock.Project			= each.Project
							LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
							LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
							if (FinanceDimension2.RevenueRecognitionOption.Summary)
								LocalTableType	   = 0
								LocalRevenueAmount = each.Amount
								include AddToRevenueTable
							else
								LocalCodeBlock			= LocalRevenueCodeBlock
								include AddToTable
							if (each.BillingMethod.PassThrough)
								LocalRevenueCodeBlock = ProjectFundingSource.PassThroughAccount
								LocalRevenueCodeBlock.Project			= each.Project
								LocalRevenueCodeBlock.FinanceDimension2	= FinanceDimension2
								LocalRevenueCodeBlock.Ledger			= FinanceEnterpriseGroup.CoreLedger
								if (FinanceDimension2.RevenueRecognitionOption.Summary)
									LocalTableType	   = 1
									LocalRevenueAmount = each.Amount
									include AddToRevenueTable
								else
									LocalCodeBlock			= LocalRevenueCodeBlock
									include AddToTable
								
				if (FinanceDimension2.RevenueRecognitionOption.Summary)
					for each ProjectInvoiceRevenueLineAllRel
						if (each.RevenueLine.Amount entered)
							LocalCodeBlock			= each.RevenueLine.FinanceCodeBlock
							include AddToTable
					
				if (ProjectFundingSource.IsExternalFund)
					LocalTotalBilled = ProjectFundingSource.TotalBilledAmount +	ProjectFundingSource.TotalBilledAllowance - ProjectFundingSource.TotalBillingAdjustments
					LocalTotalRecognized = ProjectFundingSource.TotalRecognizedAmount + ProjectFundingSource.TotalRecognizedAllowance
					LocalInvoiceTotal = InvoiceTotalAmount - InvoiceTotalPassThrough
					RecognizedToDate = LocalTotalRecognized - LocalInvoiceTotal
					LocalVariance = RecognizedToDate - LocalTotalBilled
					if (LocalVariance >= 0)
						EarnedUnbilledAmount = LocalInvoiceTotal
						BilledUnearnedAmount = 0
					else
						if (LocalInvoiceTotal + LocalVariance <= 0)
							BilledUnearnedAmount = LocalInvoiceTotal
							EarnedUnbilledAmount = 0
						else
							EarnedUnbilledAmount = LocalInvoiceTotal + LocalVariance
							BilledUnearnedAmount = LocalInvoiceTotal - EarnedUnbilledAmount

				if ((ProjectFundingSource.IsInternalFund
				and !ProjectFundingSource.RevenueCodeBlockOption.None
				and  InvoiceTotalAmount entered)
				or  (ProjectFundingSource.IsExternalFund
				and (EarnedUnbilledAmount entered
				or   BilledUnearnedAmount entered)))
					if (ProjectFundingSource.IsInternalFund)
						LocalCodeBlock			= ProjectFundingSource.RevenueClearingAccount
					else
						if (EarnedUnbilledAmount entered)
							LocalCodeBlock			= ProjectFundingSource.EarnedUnbilledAccount
						else
							LocalCodeBlock			= ProjectFundingSource.BilledUnearnedAccount
					LocalCodeBlock.Project				= ProjectFundingSource.ClearingProject
					LocalCodeBlock.FinanceDimension2	= FinanceDimension2
					include AddToTable
					if (ProjectFundingSource.IsExternalFund
					and BilledUnearnedAmount entered
					and EarnedUnbilledAmount entered)
						LocalCodeBlock						= ProjectFundingSource.BilledUnearnedAccount
						LocalCodeBlock.Project				= ProjectFundingSource.ClearingProject
						LocalCodeBlock.FinanceDimension2	= FinanceDimension2
						include AddToTable

				LocalProjectStructureValidationResult = ProjectStructureValidationResultView.ProjectStructureValidationResult
				for each ProjectStructureValidationLineRel
					initialize ErrorFound
					invoke Create ProjectStructureValidationTest
						assign result to ProjectStructureValidationTestView
						resume on error
							ErrorFound = true
							LocalErrorMessage = error message
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PostingDate				= PostingDate									
						invoked.AccountingEntity		= each.ValidationCodeBlock.AccountingEntity
						invoked.FinanceCodeBlock		= each.ValidationCodeBlock.FinanceCodeBlock
						invoked.System					= "PS"
						invoked.TransactionDate			= InvoiceDate
						invoked.BypassUnitAndAmountEdit	= true
						invoked.ValidateProjectFinanceStructure = true
					if (ErrorFound)
						ErrorCounter += 1
						invoke Create ProjectStructureValidationError
							fill in fields from ProjectStructureValidationResultView.ProjectStructureValidationResult
							invoked.Error				= ErrorCounter
							invoked.ErrorMessage 		= LocalErrorMessage
							invoked.FinanceCodeBlock	= each.ValidationCodeBlock.FinanceCodeBlock
					else
						invoke Purge ProjectStructureValidationTestView.ProjectStructureValidationTest
					invoke Purge each
					if (TranCount = 50)
						commit transaction
						initialize TranCount
					TranCount += 1
			Exit Rules
				invoke PurgeAll ProjectInvoiceRevenueLine
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmProjectContract			= ProjectContract
					invoked.PrmFinanceDimension2	 	= FinanceDimension2
					invoked.PrmProjectContractInvoice	= ProjectContractInvoice
					invoked.PrmValidation				= LocalValidation

		ReverseJournalizedRevenue is an Instance Action
			restricted
			Parameters
				PostingDate is Date
			Parameter Rules
				PostingDate
					required
					default to first GLTransactionJournalizeGroupRevenueRel.PostingDate
					initial value is first GLTransactionJournalizeGroupRevenueRel.PostingDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
			Action Rules
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				BypassStructureRelationEdit = true
				BypassActiveCodeBlockEdit	= true
				for each GLTransactionJournalizeGroupRevenueRel
					initialize ErrorFound
					invoke Released.Create GLTransactionDetail
						resume on error
							ErrorFound = true
							LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
						fill in fields from each
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.AutoReverse
						invoked.JournalizeGroup		= LocalJournalizeGroup
						invoked.PostingDate			= PostingDate									
						invoked.TransactionAmount	= each.TransactionAmount * -1
						invoked.UnitsAmount			= each.UnitsAmount * -1
						invoked.GeneralLedgerEvent	= "RER"
						invoked.BypassActiveCodeBlockEdit = true
					if (ErrorFound)
						invoke Create ProjectContractInvoiceError
							fill in fields from this instance
							invoked.ErrorMessage 	= LocalErrorMessage
							invoked.JournalizeGroup	= LocalJournalizeGroup
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1						
				for each ProjectContractInvoiceLine set
					if (each.ProjectContractMilestone entered)
						invoke UpdateStatus each.ProjectContractMilestone
							invoked.PrmStatus = 4
					else
					if (each.GLTransactionDetail entered)
						if (each.GLTransactionDetail.RevenueRecognized.Processed)
							invoke UpdateRecognizedStatus each.GLTransactionDetail
								invoked.PrmRecognized = 2
						LocalFinanceCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.RevenueAmount -= each.Amount
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1
				initialize Status
				initialize JournalizeGroup
				initialize ApprovalStatus 
				
			Exit Rules
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup		
							
		ReverseJournalizedInvoice is an Instance Action
			restricted
			Parameters
				PostingDate is Date
		    	PrmPrintStatus	    is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				PrinterEmailAddress     is an EmailAddress	
#ifdef module idm			
				PrmIDMPrinter			is an IDMPrinter		
#endif					
			Parameter Rules
				PostingDate
					required
					default to first GLTransactionJournalizeGroupInvoiceRel.PostingDate
					initial value is first GLTransactionJournalizeGroupInvoiceRel.PostingDate
#ifdef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
                    if (FinanceDimension2.FundingType.ExternalGrant
                    or  FinanceDimension2.FundingType.ExternalCustomer)
						LocalAccountingEntity = first ProjectContractInvoiceLine set.DerivedAccountingEntity
					else
						LocalAccountingEntity = ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar
					if (SystemClosingControlARRel exists
					and SystemClosingControlARRel.Control)
						constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control)
						constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#endif							
#ifdef module idm					
				PrmIDMPrinter
					initial value is DerivedIDMPrinter
					default to DerivedIDMPrinter
#endif
			Local Fields
        		LocalJournalizeGroup			is a JournalizeGroup
        		ReversedAmount					is an InternationalAmount
        		ReversedTaxAmount				is an InternationalAmount
				ReversedInvoiceTotalAmount		is an InternationalAmount
				ReversedInvoiceTotalTaxAmount	is an InternationalAmount
        		LocalAmount						is an InternationalAmount
        		LocalInvoiceAmount				is an InternationalAmount
        		LocalTaxAmount					is an InternationalAmount
        		LocalInvoiceTaxAmount			is an InternationalAmount
				LocalProjectIsPositive			is Boolean
				LocalProjectIsNegative			is Boolean
				LocalIsPositive					is Boolean
				LocalIsNegative					is Boolean
				NewProjectContractInvoice		is a ProjectContractInvoice view
				ErrorFound						is Boolean
				LocalErrorMessage				is Text
				TaxCodeEntered					is Boolean
#ifdef module ar
				ReversedReceivableCompany		is a ReceivableCompany
				ReversedReceivableInvoiceType	is a ReceivableInvoiceType
				ReversedAlternateReceivableInvoiceType is like ReceivableInvoiceType
				ReversedReceivableInvoice		is a ReceivableInvoice				
#endif
			Action Rules
				if (!FinanceDimension2.FundingType.IntercompanyBilling)
		            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
					LocalJournalizeGroup		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
					BypassStructureRelationEdit = true
					BypassActiveCodeBlockEdit	= true
					for each GLTransactionJournalizeGroupInvoiceRel
						initialize ErrorFound
						invoke Released.Create GLTransactionDetail
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + ErrorSuspenseCreatedMF
							fill in fields from each
								except invoked.ReportCurrencyAmount
								except invoked.OriginatingTransaction
								except invoked.AutoReverse
							invoked.JournalizeGroup		= LocalJournalizeGroup
							invoked.PostingDate			= PostingDate									
							invoked.TransactionAmount	= each.TransactionAmount * -1
							invoked.UnitsAmount			= each.UnitsAmount * -1
							invoked.GeneralLedgerEvent	= "BIR"
							invoked.BypassActiveCodeBlockEdit = true
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage	= LocalErrorMessage
								invoked.JournalizeGroup	= LocalJournalizeGroup
						if (RecordCount = 50)
							commit transaction
							initialize RecordCount
						RecordCount += 1		
				for each ProjectContractInvoiceLine set
					if (each.BuyerTaxCode entered)
						TaxCodeEntered = true
					if (each.ProjectContractMilestone entered)
						invoke UpdateStatus each.ProjectContractMilestone
							invoked.PrmStatus = 4
					else
					if (InvoiceType.Retainer)
						invoke UpdateStatus each.ProjectContractRetainer
							invoked.PrmStatus = 4
					else
					if (each.ProjectContractAdvance entered)
						invoke Update each.ProjectContractAdvance
							invoked.Status = 0
					else
					if (each.GLTransactionDetail entered)
						if (each.GLTransactionDetail.Billed.Processed)
							invoke UpdateBilledStatus each.GLTransactionDetail
								invoked.PrmBilled = 1					
						LocalFinanceCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.Amount			-= each.Amount
								invoked.UnitsAmount		-= each.UnitsAmount
								invoked.TaxAmount		-= each.TaxAmount
								invoked.BillableAmount	-= each.BillableAmount
								if (ProjectContract.RevenueRecognition.Combined)
									invoked.RevenueAmount -= each.Amount
					ReversedAmount = each.Amount * -1								
					if (ReversedAmount > 0)
						LocalIsPositive = true	
					else
					if (ReversedAmount < 0)
						LocalIsNegative = true
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1
				if (ProjectContract.RevenueRecognition.Combined
				and !InvoiceType.Retainer)

					invoke UpdateTotalRecognizedAmount ProjectFundingSource
						invoked.RecognizedAmount    	= InvoiceBilledAmount * -1
						invoked.RecognizedAllowance 	= InvoiceTotalAllowance * -1
						invoked.RecognizedPassThrough	= InvoiceTotalPassThrough * -1
					invoke UpdateTotalRecognizedAmount ProjectContract
						invoked.RecognizedAmount    	= InvoiceBilledAmount * -1
						invoked.RecognizedFees	    	= InvoiceTotalFees * -1
						invoked.RecognizedAllowance 	= InvoiceTotalAllowance * -1
						invoked.RecognizedPassThrough	= InvoiceTotalPassThrough * -1
#ifdef module ar
				if (ReceivableInvoiceRel exists
				or  FinanceDimension2.FundingType.IntercompanyBilling)
					if (ProjectJurisdictionCode entered)
						increment ProjectJurisdictionCode.LastInvoiceNumber
					increment ProjectContract.LastRunGroup
					LocalRunGroup = ProjectContract.LastRunGroup
					invoke Create ProjectContractInvoice
						assign result to NewProjectContractInvoice
						fill in fields from this instance
							except invoked.GeneratedInvoice
							except invoked.IDMDocumentPID
							except invoked.EmailCount
							except invoked.TotalInvoiceAmount
							except invoked.TotalUnits
							except invoked.TotalTax
							except invoked.TotalFees
							except invoked.TotalRetainer
							except invoked.TotalAllowance
							except invoked.TotalRetainage
							except invoked.TotalRetainedTax
							except invoked.TotalAdvance
							except invoked.TotalPassThrough
							except invoked.TotalAdjustment
						invoked.InvoiceType		= 5
						invoked.RunGroup		= ProjectContract.LastRunGroup
						invoked.JurisdictionInvoiceNumber = ProjectJurisdictionCode.LastInvoiceNumber
						invoked.JournalizeGroup	= LocalJournalizeGroup
						if (IsThirdPartyInvoicePrint)	
							if (FinanceDimension2.FundingType.ExternalGrant
							or  FinanceDimension2.FundingType.ExternalCustomer)
								invoked.PrintStatus = PrmPrintStatus
					for each ProjectContractInvoiceLine set
						invoke Create ProjectContractReversalLine
							fill in fields from each
							invoked.ProjectContractInvoice	= NewProjectContractInvoice.ProjectContractInvoice
							invoked.Amount 					= each.Amount * -1
							invoked.UnitsAmount				= each.UnitsAmount * -1
							invoked.TaxAmount				= each.TaxAmount * -1
							invoked.BillableAmount			= each.BillableAmount * -1
							invoked.Description				= each.DerivedInvoiceDescription
							invoked.TransactionDate			= each.DerivedInvoiceDate
							invoked.FinanceCodeBlock		= each.GLTransactionDetail.FinanceCodeBlock
							invoked.Resource				= each.GLTransactionDetail.Resource
							invoked.VendorGroupAndVendor	= each.GLTransactionDetail.VendorGroupAndVendor
						if (RecordCount = 50)
							commit transaction
							initialize RecordCount
						RecordCount += 1
					for each ProjectContractInvoiceSummary set
						invoke Create ProjectContractInvoiceSummary
							fill in fields from each
								except invoked.LTDAmount
							invoked.ProjectContractInvoice	= NewProjectContractInvoice.ProjectContractInvoice
							invoked.Amount 					= each.Amount * -1
							invoked.UnitsAmount				= each.UnitsAmount * -1
							invoked.TaxAmount				= each.TaxAmount * -1
							invoked.BillableAmount			= each.BillableAmount * -1
							invoked.RetainedAmount			= each.RetainedAmount * -1
							invoked.IsReversal				= true
						if (RecordCount = 50)
							commit transaction
							initialize RecordCount
						RecordCount += 1
#ifdef module intercobilling
					if (FinanceDimension2.FundingType.IntercompanyBilling)
						for each IntercompanyBillingTransactionRel
							invoke Create IntercompanyBillingTransaction
								fill in fields from each
									except invoked.Status
									except invoked.OriginatingTransaction
									except invoked.TransactionAmount
									except invoked.PostingDate
								invoked.OriginatingDocument	= reference to NewProjectContractInvoice.ProjectContractInvoice
								invoked.TransactionAmount	= each.TransactionAmount * -1
								invoked.PostingDate			= PostingDate
							invoke DeleteTransaction each
							if (RecordCount = 50)
								commit transaction
								initialize RecordCount
							RecordCount += 1
					else
#endif					
					if (FinanceDimension2.FundingType.ExternalGrant
					or  FinanceDimension2.FundingType.ExternalCustomer)
						ReversedReceivableCompany	  = first ReceivableInvoiceRel.Company
						ReversedReceivableInvoice 	  = first ReceivableInvoiceRel.ReceivableInvoice
						ReversedReceivableInvoiceType = first ReceivableInvoiceRel.ReceivableInvoiceType
						ReversedAlternateReceivableInvoiceType = first ReceivableInvoiceRel.AlternateReceivableInvoiceType
						if (FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject)
							initialize LocalProject
							for each ProjectContractInvoiceLineRel
								ReversedAmount    = each.Amount * -1
								ReversedTaxAmount = each.TaxAmount * -1
								if (each.Project != LocalProject)
									if (LocalAmount    > 0
									or  LocalTaxAmount > 0)
										LocalProjectIsPositive = true	
									if (LocalAmount    < 0
									or  LocalTaxAmount < 0)
										LocalProjectIsNegative = true								
									LocalProject   = each.Project
									LocalTaxAmount = ReversedTaxAmount
									LocalAmount    = ReversedAmount
								else
									LocalTaxAmount += ReversedTaxAmount
									LocalAmount    += ReversedAmount
								if (LocalProjectIsPositive and LocalProjectIsNegative)
									end for each
							if (LocalAmount    > 0
							or  LocalTaxAmount > 0)
								LocalProjectIsPositive = true	
							if (LocalAmount    < 0
							or  LocalTaxAmount < 0)
								LocalProjectIsNegative = true					
						ReversedInvoiceTotalAmount 		= InvoiceTotalAmount * -1
						ReversedInvoiceTotalTaxAmount	= InvoiceTotalTaxAmount * -1
						if ((FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
						and  LocalProjectIsPositive
						and  LocalProjectIsNegative)
						or  (FinanceDimension2.ARInterfaceOption.Detail
						and  LocalIsPositive
						and  LocalIsNegative))
							LocalInvoiceType = "M"		
						if (ReversedInvoiceTotalAmount < 0)
							increment FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditNumber
							LocalCreditNumber 	   = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditNumber
							LocalReceivableInvoice = DerivedCreditNumber	
							if (LocalInvoiceType = "M")
								LocalAlternateReceivableInvoiceType = "C"	
							else						
								LocalInvoiceType = "C"
								LocalAlternateReceivableInvoiceType	= blank	
							LocalInvoiceTotalAmount	   = ReversedInvoiceTotalAmount * -1
							LocalInvoiceTotalTaxAmount = ReversedInvoiceTotalTaxAmount * -1						
							LocalCreditDebitMemoReason = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectCreditDebitMemoReason
						else	
							increment FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectInvoiceNumber								
							LocalInvoiceNumber     = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.ProjectInvoiceNumber
							LocalReceivableInvoice = DerivedInvoiceNumber	
							if (LocalInvoiceType = "M")	
								LocalAlternateReceivableInvoiceType = "I"												
							else						
								LocalInvoiceType = "I"
								LocalAlternateReceivableInvoiceType	= blank							
							LocalCreditDebitMemoReason	= blank
							LocalInvoiceTotalAmount		= ReversedInvoiceTotalAmount
							LocalInvoiceTotalTaxAmount	= ReversedInvoiceTotalTaxAmount												
						invoke Create ReceivableInvoice
							assign result to LocalReleaseReceivableInvoice
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message + "; " + InvoiceNotCreatedMF
							invoked.Company							= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							invoked.ReceivableInvoiceType			= LocalInvoiceType
							invoked.ReceivableInvoice				= LocalReceivableInvoice
							invoked.BatchNumber						= 999999
							invoked.ReceivableProcessLevel			= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							invoked.Customer						= FinanceDimension2.CompanyCustomerGroup.Customer
							invoked.InvoiceTypeCode                 = DerivedInvoiceTypeCode
							invoked.TransactionDate					= InvoiceDate
							invoked.GeneralLedgerDate				= PostingDate
							invoked.InvoiceAmount.CurrencyAmount	= LocalInvoiceTotalAmount + LocalInvoiceTotalTaxAmount
							invoked.OriginalCurrency				= ProjectContract.Currency
							invoked.TermsCode						= DerivedTermsCode
							invoked.Description						= "ProjectToAccountsReceivableInvoiceReversal"
							if (!FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
								invoked.ReceivableGeneralLedgerCode	= FinanceDimension2.CompanyCustomerGroup.ReceivableGeneralLedgerCode
#ifndef property federal
							else
							if (FinanceDimension2.ARInterfaceOption.Summary)
								invoked.InvoiceFinanceCodeBlock		= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
							invoked.Origin							= "J"
							invoked.System							= "PS"
							invoked.ProjectContract					= ProjectContract
							invoked.ProjectContractInvoice			= NewProjectContractInvoice.ProjectContractInvoice
							invoked.FinanceDimension2				= FinanceDimension2
							invoked.CreditDebitMemoReason			= LocalCreditDebitMemoReason
							invoked.AlternateReceivableInvoiceType	= LocalAlternateReceivableInvoiceType
							invoked.TransientHSNSACCode             = ProjectFundingSource.HSNSACCode
							if (ProjectJurisdictionCode entered)
								invoked.CustomerPurchaseOrder		= NewProjectContractInvoice.JurisdictionInvoiceNumber
							else
								invoked.CustomerPurchaseOrder		= DerivedCustomerPoNumber
							invoked.ReceivableCrossReference.Company				= ReversedReceivableCompany
							invoked.ReceivableCrossReference.ReceivableInvoiceType	= ReversedAlternateReceivableInvoiceType
							invoked.ReceivableCrossReference.ReceivableInvoice		= ReversedReceivableInvoice
							invoked.ReceivableCrossReference.Customer				= FinanceDimension2.CompanyCustomerGroup.Customer
							if (LocalInvoiceType = "I"
							or  LocalInvoiceType = "D")
								invoked.AutomaticCashApplication	= false
							else
							if (ReversedReceivableInvoiceType = "I"
							or  ReversedReceivableInvoiceType = "D")
								if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.AutomaticMemoApplication)
									invoked.AutomaticCashApplication	= true
								else
									invoked.AutomaticCashApplication	= false									
						if (ErrorFound)
							invoke Create ProjectContractInvoiceError
								fill in fields from this instance
								invoked.ErrorMessage = LocalErrorMessage
						if (FinanceDimension2.ARInterfaceOption.Summary
						and LocalReleaseReceivableInvoice entered)
							invoke Create ReceivableInvoiceLineItem
								invoked.Company						= LocalReleaseReceivableInvoice.Company
								invoked.ReceivableInvoiceType		= LocalReleaseReceivableInvoice.ReceivableInvoiceType
								invoked.ReceivableInvoice			= LocalReleaseReceivableInvoice.ReceivableInvoice
								invoked.TransactionAmount			= LocalInvoiceTotalAmount
								invoked.Description					= ProjectContract.Project.Description
#ifndef property federal
								if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
									invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
							if (InvoiceTotalTaxAmount entered)
								invoke Create ReceivableInvoiceLineItem
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceTotalTaxAmount
									invoked.Description				= ProjectContract.Project.Description + "_Tax"							
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
#endif
						else
						if (FinanceDimension2.ARInterfaceOption.Detail
						and LocalReleaseReceivableInvoice entered)
							for each ProjectContractInvoiceLine set
								ReversedAmount		= each.Amount * -1
								ReversedTaxAmount	= each.TaxAmount * -1
								if (LocalInvoiceType = "C"
								or  LocalAlternateReceivableInvoiceType = "C")
									LocalInvoiceAmount 	  = ReversedAmount * -1
									LocalInvoiceTaxAmount = ReversedTaxAmount * -1	
								else											
									LocalInvoiceAmount    = ReversedAmount
									LocalInvoiceTaxAmount = ReversedTaxAmount						
								invoke Create ReceivableInvoiceLineItem
									invoked.Company					= LocalReleaseReceivableInvoice.Company
									invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
									invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
									invoked.TransactionAmount		= LocalInvoiceAmount
									invoked.Project					= each.Project
									invoked.Description				= each.DerivedInvoiceDescription
#ifndef property federal
									if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
										invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
										if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
											invoked.InvoiceFinanceCodeBlock.Project = each.Project
#endif
								if (each.TaxAmount entered)
									invoke Create ReceivableInvoiceLineItem
										invoked.Company					= LocalReleaseReceivableInvoice.Company
										invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
										invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
										invoked.TransactionAmount		= LocalInvoiceTaxAmount
										invoked.Project					= each.Project
										invoked.Description				= each.DerivedInvoiceDescription + "_Tax"
#ifndef property federal
										if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
											invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
											if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
												invoked.InvoiceFinanceCodeBlock.Project = each.Project
#endif
								if (RecordCount = 50)
									commit transaction
									initialize RecordCount
								RecordCount += 1
						else					
						if (FinanceDimension2.ARInterfaceOption.SummarizeByPostingProject
						and LocalReleaseReceivableInvoice entered)
							initialize LocalProject
							initialize LocalAmount
							initialize LocalTaxAmount
							for each ProjectContractInvoiceLineRel
								ReversedAmount		= each.Amount * -1
								ReversedTaxAmount	= each.TaxAmount * -1
								if (each.Project != LocalProject)
									if (LocalProject entered
									or  LocalTaxAmount entered)
										if (LocalInvoiceType = "C"
										or  LocalAlternateReceivableInvoiceType = "C")
											LocalInvoiceAmount 	  = LocalAmount * -1
											LocalInvoiceTaxAmount = LocalTaxAmount * -1	
										else											
											LocalInvoiceAmount    = LocalAmount
											LocalInvoiceTaxAmount = LocalTaxAmount
										if (LocalAmount entered)								
											invoke Create ReceivableInvoiceLineItem
												invoked.Company					= LocalReleaseReceivableInvoice.Company
												invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
												invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
												invoked.TransactionAmount		= LocalInvoiceAmount
												invoked.Project					= LocalProject
												invoked.Description				= LocalProject.Description
#ifndef property federal
												if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
													invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
													if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
														invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
										if (LocalTaxAmount entered)
											invoke Create ReceivableInvoiceLineItem
												invoked.Company					= LocalReleaseReceivableInvoice.Company
												invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
												invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
												invoked.TransactionAmount		= LocalInvoiceTaxAmount
												invoked.Project					= LocalProject
												invoked.Description				= LocalProject.Description + "_Tax"
#ifndef property federal
												if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
													invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
													if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
														invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
									LocalProject 	= each.Project
									LocalAmount  	= ReversedAmount
									LocalTaxAmount  = ReversedTaxAmount
								else
									LocalAmount    += ReversedAmount
									LocalTaxAmount += ReversedTaxAmount
								if (RecordCount = 50)
									commit transaction
									initialize RecordCount
								RecordCount += 1
							if (LocalProject entered
							or  LocalTaxAmount entered)
								if (LocalInvoiceType = "C"
								or  LocalAlternateReceivableInvoiceType = "C")
									LocalInvoiceAmount 	  = LocalAmount * -1
									LocalInvoiceTaxAmount = LocalTaxAmount * -1	
								else											
									LocalInvoiceAmount    = LocalAmount
									LocalInvoiceTaxAmount = LocalTaxAmount
								if (LocalAmount entered)						
									invoke Create ReceivableInvoiceLineItem						
										invoked.Company					= LocalReleaseReceivableInvoice.Company
										invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
										invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
										invoked.TransactionAmount		= LocalInvoiceAmount
										invoked.Project					= LocalProject
										invoked.Description				= LocalProject.Description
#ifndef property federal
										if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
											invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
											if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
												invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
								if (LocalTaxAmount entered)
									invoke Create ReceivableInvoiceLineItem
										invoked.Company					= LocalReleaseReceivableInvoice.Company
										invoked.ReceivableInvoiceType	= LocalReleaseReceivableInvoice.ReceivableInvoiceType
										invoked.ReceivableInvoice		= LocalReleaseReceivableInvoice.ReceivableInvoice
										invoked.TransactionAmount		= LocalInvoiceTaxAmount
										invoked.Project					= LocalProject
										invoked.Description				= LocalProject.Description + "_Tax"
#ifndef property federal
										if (FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
											invoked.InvoiceFinanceCodeBlock	= ProjectFundingSource.InvoiceFinanceCodeBlock
											if (ProjectFundingSource.InvoiceFinanceCodeBlock.Project not entered)
												invoked.InvoiceFinanceCodeBlock.Project = LocalProject
#endif
						if (LocalReleaseReceivableInvoice entered)
							initialize ErrorFound
							invoke Unreleased.Release LocalReleaseReceivableInvoice.ReceivableInvoice
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + InvoiceNotReleasedMF
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage = LocalErrorMessage
						for each ReversedReceivableInvoice.ReceivableGLDistributionRel
							initialize ErrorFound
							invoke CreateHistoricalOnly ReceivableGLDistribution
		        				resume on error
									ErrorFound = true
									LocalErrorMessage = error message + "; " + DistributionNotCreatedMF
								fill in fields from each
									except invoked.DistributionAmount
								invoked.GeneralLedgerDate					= PostingDate
								invoked.TransType							= LocalInvoiceType
								invoked.Invoice								= LocalReceivableInvoice
								invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
							if (ErrorFound)
								invoke Create ProjectContractInvoiceError
									fill in fields from this instance
									invoked.ErrorMessage = LocalErrorMessage
						invoke FastUpdate ReversedReceivableInvoice
							invoked.ProjectContractInvoice = blank
							invoked.CertificationNumber	   = blank
							invoked.CertificationDate	   = blank
				LocalTaxEntity = FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
				if  (TaxCodeEntered
				and !LocalTaxEntity.ThirdParty.Sabrix)
					if (ProjectInvoiceTaxSummary set not exists)
						invoke GenerateTaxSummaryData
					for each ProjectInvoiceTaxSummary set
						ReversedAmount			= each.TaxableAmount * -1
						ReversedTaxAmount		= each.TaxAmount * -1
						LocalTaxCode			= each.TaxSummaryKey.BuyerTaxCode
						LocalServiceTaxCode		= each.TaxSummaryKey.ServiceTaxCode
						LocalProductTaxCategory	= each.TaxSummaryKey.ProductTaxCategory
						LocalAddressCode		= each.TaxSummaryKey.BuyerAddressCode
						LocalServiceAddressCode	= each.TaxSummaryKey.ServiceAddressCode
						if (each.ProjectInvoiceTaxSummaryLine set not exists)
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
							initialize ProcessTaxHistory
							ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							ProcessTaxHistory.TaxEntity					= LocalTaxEntity
							ProcessTaxHistory.TaxCode					= LocalTaxCode
							ProcessTaxHistory.ToAddress					= LocalAddressCode.PostalAddress
							ProcessTaxHistory.POATaxCode				= LocalServiceTaxCode
							ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress
							ProcessTaxHistory.ProductTaxCategory		= LocalProductTaxCategory
							ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode
							ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress
							ProcessTaxHistory.SystemCode				= "AR"
							ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
							ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
							ProcessTaxHistory.Invoice					= LocalReceivableInvoice
							if (ReversedAmount < 0)
								ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
							else
								ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
							ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
							ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							ProcessTaxHistory.InvoiceDate				= InvoiceDate
							ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
							ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
							ProcessTaxHistory.TaxPointDate				= InvoiceDate
							ProcessTaxHistory.PostDate					= PostingDate
							ProcessTaxHistory.TransactionSource			= "O"
							ProcessTaxHistory.TransactionInvoiceAmount	= ReversedAmount + ReversedTaxAmount
							ProcessTaxHistory.TransactionTaxableAmount	= ReversedAmount
							ProcessTaxHistory.TransactionTaxAmount		= ReversedTaxAmount
							ProcessTaxHistory.TaxRate					= each.TaxRate
							ProcessTaxHistory.AccruedOrInvoiced 		= "I"
							ProcessTaxHistory.TaxTransFunction			= "A"	
							if (ProcessTaxHistory.TransactionInvoiceAmount entered
							or  ProcessTaxHistory.TransactionTaxableAmount entered)
								LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
								if (ProcessTaxHistory.OutputErrorMessage entered)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage
								if (RecordCount >= 10)
									commit transaction
									initialize RecordCount
								RecordCount += 1
						else
							for each each.ProjectInvoiceTaxSummaryLine set
								ReversedAmount		= each.TaxableAmount * -1
								ReversedTaxAmount	= each.TaxAmount * -1
								if (each.TaxCodeBlock entered)
									LocalFinanceCodeBlock = each.TaxCodeBlock
								else
								if (LocalTaxEntity.UseTaxCodeAccounts)
									LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
								else
									LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
								if (ReversedAmount entered
								or  ReversedTaxAmount entered)
									initialize ProcessTaxHistory
									ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
									ProcessTaxHistory.TaxEntity					= LocalTaxEntity
									ProcessTaxHistory.TaxCode					= each.BuyerTaxCode
									ProcessTaxHistory.ToAddress					= LocalAddressCode.PostalAddress
									ProcessTaxHistory.POATaxCode				= LocalServiceTaxCode
									ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress
									ProcessTaxHistory.ProductTaxCategory		= LocalProductTaxCategory
									ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode
									ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress
									ProcessTaxHistory.SystemCode				= "AR"
									ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
									ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
									ProcessTaxHistory.Invoice					= LocalReceivableInvoice
									if (ReversedAmount < 0)
										ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
									else
										ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
									ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
									ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
									ProcessTaxHistory.InvoiceDate				= InvoiceDate
									ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
									ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
									ProcessTaxHistory.TaxPointDate				= InvoiceDate
									ProcessTaxHistory.PostDate					= PostingDate
									ProcessTaxHistory.TransactionSource			= "O"
									ProcessTaxHistory.TransactionInvoiceAmount	= ReversedAmount + ReversedTaxAmount
									ProcessTaxHistory.TransactionTaxableAmount	= ReversedAmount
									ProcessTaxHistory.TransactionTaxAmount		= ReversedTaxAmount
									ProcessTaxHistory.TaxRate					= each.TaxRate
									ProcessTaxHistory.AccruedOrInvoiced 		= "I"
									ProcessTaxHistory.TaxTransFunction			= "A"	
									if (ProcessTaxHistory.TransactionInvoiceAmount entered
									or  ProcessTaxHistory.TransactionTaxableAmount entered)
										LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
										if (ProcessTaxHistory.OutputErrorMessage entered)
											invoke Create ProjectContractInvoiceError
												fill in fields from this instance
												invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage
										if (RecordCount >= 10)
											commit transaction
											initialize RecordCount
										RecordCount += 1
					
				if (TaxCodeEntered
				and LocalTaxEntity.ThirdParty.Sabrix)
					initialize LocalInvoiceAmount
					initialize LocalTaxAmount
					for each ProjectContractInvoiceLine set
						if (each.BuyerTaxCode entered)
							LocalInvoiceAmount = each.Amount * -1
							LocalTaxAmount     = each.TaxAmount * -1
							LocalProject	   = each.Project
							LocalGeneralLedgerChartAccount = each.GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
							LocalTaxCode = each.BuyerTaxCode
							LocalServiceAddressCode = each.ServiceAddressCode
							if (LocalTaxEntity.UseTaxCodeAccounts)
								LocalFinanceCodeBlock = CompanyTaxCodeRel.TaxOutputAccount
							else
								LocalFinanceCodeBlock = LocalTaxEntity.TaxOutputAccount
							initialize ProcessTaxHistory
							ProcessTaxHistory.UserElementLevel			= "L"

							ProcessTaxHistory.Invoice		      		= LocalReleaseReceivableInvoice.ReceivableInvoice

							ProcessTaxHistory.LineNumber				= each.SequenceNumber
							if (each.AddressCode entered)
								ProcessTaxHistory.ToAddress  			= each.AddressCode.PostalAddress
							else	
							if (ProjectFundingSource.BuyerTaxLocation entered)	
								ProcessTaxHistory.ToAddress  			= ProjectFundingSource.BuyerTaxLocation.AddressCode.PostalAddress	
							else								
								ProcessTaxHistory.ToAddress  			= ProjectFundingSource.CompanyCustomerGroup.CustomerBillTo.PostalAddress
							ProcessTaxHistory.FromAddress				= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
							ProcessTaxHistory.InvoiceCompany			= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany
							ProcessTaxHistory.TaxEntity					= LocalTaxEntity
							ProcessTaxHistory.TaxCode					= LocalTaxCode
							ProcessTaxHistory.POATaxCode				= each.TaxCode
							ProcessTaxHistory.POAAddress				= LocalServiceAddressCode.PostalAddress
							ProcessTaxHistory.FromTaxCode				= ProjectContract.DerivedSellerTaxCode							
							ProcessTaxHistory.SystemCode				= "AR"
							ProcessTaxHistory.VendorCustomer			= FinanceDimension2.CompanyCustomerGroup.Customer
							ProcessTaxHistory.VendorOrCustomerName		= FinanceDimension2.CompanyCustomerGroup.Customer.Name
							ProcessTaxHistory.Invoice					= LocalReceivableInvoice
							if (LocalInvoiceAmount < 0)
								ProcessTaxHistory.InvoicedOrCreditMemo	= "C"
							else
								ProcessTaxHistory.InvoicedOrCreditMemo	= "I"
							ProcessTaxHistory.TaxTransactionAccount		= LocalFinanceCodeBlock
							ProcessTaxHistory.ProcessLevel				= FinanceDimension2.CompanyCustomerGroup.ReceivableProcessLevel
							ProcessTaxHistory.InvoiceDate				= InvoiceDate
							ProcessTaxHistory.TransactionCurrency		= ProjectContract.Currency
							ProcessTaxHistory.TransactionNumberOfDecimals = ProjectContract.Currency.NumberOfDecimals
							ProcessTaxHistory.TaxPointDate				= InvoiceDate
							ProcessTaxHistory.PostDate					= PostingDate
							ProcessTaxHistory.TransactionSource			= "O"
							ProcessTaxHistory.TransactionInvoiceAmount	= LocalInvoiceAmount + LocalTaxAmount
							ProcessTaxHistory.TransactionTaxableAmount	= LocalInvoiceAmount
							ProcessTaxHistory.TransactionTaxAmount		= LocalTaxAmount
							ProcessTaxHistory.TaxRate					= each.TaxRate 
							ProcessTaxHistory.AccruedOrInvoiced 		= "I"
							ProcessTaxHistory.TaxTransFunction			= "A"	
							include LoadOneSourceTaxAttribute
							ProcessTaxHistory.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute
							if (ProcessTaxHistory.TransactionInvoiceAmount entered
							or  ProcessTaxHistory.TransactionTaxableAmount entered)
								LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	
								if (ProcessTaxHistory.OutputErrorMessage entered)
									invoke Create ProjectContractInvoiceError
										fill in fields from this instance
										invoked.ErrorMessage = ProcessTaxHistory.OutputErrorMessage
						if (RecordCount = 50)
							commit transaction
							initialize RecordCount
						RecordCount += 1
#endif
#ifdef module intercobilling
				if (FinanceDimension2.FundingType.IntercompanyBilling)
					for each NewProjectContractInvoice.ProjectContractInvoice.IntercompanyBillingTransactionRel
						invoke MakeReleased each
						if (RecordCount = 50)
							commit transaction
							initialize RecordCount
						RecordCount += 1				
#endif
				initialize Status
				initialize JournalizeGroup
				initialize ApprovalStatus
				initialize PrintStatus
				
			Exit Rules
				if (!FinanceDimension2.FundingType.IntercompanyBilling)
					invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
						invoked.PrmJournalizeGroup	= LocalJournalizeGroup		
#ifdef module intercobilling
				else
					invoke ProcessIntoBillingDocuments IntercompanyBillingTransaction
						invoked.PrmIntercompanyBillingGroup	= FinanceEnterpriseGroup
						invoked.PrmOriginatingDocument		= reference to NewProjectContractInvoice.ProjectContractInvoice
#endif	
				if (FinanceDimension2.FundingType.ExternalGrant
	            or  FinanceDimension2.FundingType.ExternalCustomer)
#ifdef module idm					
					if (ProjectContract.UseIDM)
						if (ProjectContract.ProjectContractInvoiceReversalTemplate entered)
							invoke UploadProjectContractInvoiceDocumentInIDM ReverseInvoiceFormatRel
	            				invoked.PrmIDMPrinter 	= PrmIDMPrinter
	            				invoked.PrmPrintOrEmail = true
					else
#endif							
					if (ProjectContract.ProjectInvoiceReversalFormat entered) 					
						invoke UpdateProjectInvoiceReversalTemplate ReverseInvoiceFormatRel
							invoked.PrinterEmailAddress = PrinterEmailAddress
							invoked.PrintOrEmail        = true
	            








				
		UpdateInvoiceLink is an Instance Action
			valid when (EligableToSetPrinterStatus)
			Parameters
				PrmUpdateInvoiceLink	is an URL
					default label is "UpdateInvoiceLink"
			Parameter Rules
				PrmUpdateInvoiceLink
			Action Rules
				VendorInvoiceLink = PrmUpdateInvoiceLink

		SetPrintStatus is an Instance Action
			valid when (EligableToSetPrinterStatus)		
			Parameters
		    	PrmPrintStatus				is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
			Parameter Rules
			Action Rules
				PrintStatus = PrmPrintStatus

		SetPrintStatusToPrinted is an Instance Action
			valid when (EligableToSetPrinterStatus)		
			Parameters
		    	PrmPrintStatus				is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			Printed 	value is 2
			Parameter Rules
				PrmPrintStatus
					default to 2	
					initial value is 2					
				
			Action Rules
				PrintStatus = PrmPrintStatus

		RegeneratePrintableInvoice is an Instance Action
			valid when (RegeneratePrintableInvoiceOk)
			Action Rules
				if (OkToCreateSummary
				and ProjectContractInvoiceSummary set not exists)
					invoke CreateInvoiceSummary
				if (FinanceDimension2.FundingType.ExternalGrant
	            or  FinanceDimension2.FundingType.ExternalCustomer)
#ifdef module idm	            
	            	if (ProjectContract.UseIDM)
						if (ProjectContract.ProjectContractInvoiceTemplate entered)
							PrintOrEmail = true	            			
	            			invoke UploadProjectContractInvoiceDocumentInIDM
	            	else
#endif	            	
					if (ProjectContract.ProjectInvoiceFormat entered)
						invoke UpdateProjectInvoiceTemplate 

		RegeneratePrintableReversalInvoice is an Instance Action
			valid when (RegeneratePrintableReversalInvoiceOk)
			Action Rules
				if (FinanceDimension2.FundingType.ExternalGrant
	            or  FinanceDimension2.FundingType.ExternalCustomer)
#ifdef module idm					
					if (ProjectContract.UseIDM)
						if (ProjectContract.ProjectContractInvoiceReversalTemplate entered)
							PrintOrEmail = true
							invoke UploadProjectContractInvoiceDocumentInIDM
					else
#endif							
					if (ProjectContract.ProjectInvoiceReversalFormat entered) 					
						invoke UpdateProjectInvoiceReversalTemplate
				
		CreateComments is an Instance Action
			Parameters
				PrmSubject	 			is a CommentName
		    	PrmComment				is Text
				PrmFrom					is Alpha size 230
				PrmCommentDate			is TimeStamp
				PrmDocumentURL			is URL	
				PrmAttachment			is an Attachment
				PrmPrintOnInvoice       is Boolean
				PrmSendToCustomer		is Boolean		
					default label is "SendToCustomer"			
			Parameter Rules
				PrmSubject
					required
		    	PrmComment
		    		required
				PrmFrom	
					initial value is actor
					required
				PrmCommentDate
		    		default to current timestamp
			Action Rules
				invoke Create ProjectContractInvoiceComment
					invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.FinanceDimension2      = FinanceDimension2					
					invoked.ProjectContract		   = ProjectContract
					invoked.ProjectContractInvoice = ProjectContractInvoice
					invoked.Subject				   = PrmSubject
			    	invoked.Comment                = PrmComment
					invoked.From                   = PrmFrom	
					invoked.CommentDate            = PrmCommentDate
					invoked.DocumentURL			   = PrmDocumentURL					
			    	invoked.Attachment             = PrmAttachment
					invoked.PrintOnInvoice		   = PrmPrintOnInvoice
					invoked.SendToCustomer		   = PrmSendToCustomer			
					
#ifdef module idm	
		GenerateIDMProjectInvoiceDocument		is a Set Action
			default label is untranslatable
			run in background
			restricted
				
			Parameters
				PrmFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
				PrmProjectContract				is like ProjectContract
				PrmRunGroup						is like ProjectContractRunGroup
			
			Local Fields
				LocalAsyncID					is an AsyncActionRequest

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ProjectContract		  = PrmProjectContract
				and    RunGroup				  = PrmRunGroup
				and    ProjectFundingSource.IsExternalFund)
				
			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id
							
					Exit Rules
						invoke GetStatusOfProjectInvoice in background
							run after LocalAsyncID	
							invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							invoked.PrmProjectContract 		  = PrmProjectContract
							invoked.PrmRunGroup		   		  = PrmRunGroup
											
				Instance Rules
					invoke UploadProjectContractInvoiceDocumentInIDM
						invoked.PrmBatch		= true


						
		GetStatusOfProjectInvoice 	is a Set Action
			default label is untranslatable
			restricted	
			Parameters	
				PrmFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
				PrmProjectContract				is like ProjectContract
				PrmRunGroup						is like ProjectContractRunGroup	
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ProjectContract		  = PrmProjectContract
				and    RunGroup				  = PrmRunGroup
				and    ProjectFundingSource.IsExternalFund)		
				
			Action Rules
				Instance Rules							
					if (IDMJob entered)
						invoke GetStatus IDMJob
							invoked.PrmFromGenerateDocument = true
						
						if (IDMJob.GenerationStatus.Finished
						and IDMJob.MDSID entered)
							IDMDocumentPID = IDMJob.MDSID
		

								
		UploadProjectContractInvoiceDocumentInIDM is an Instance Action
			restricted
			Local Fields
				IDMJobView						is an IDMJob view
								
			Parameters
				PrmIDMPrinter 	is an IDMPrinter
				PrmPrintOrEmail	is Boolean
				PrmBatch		is Boolean

    		Action Rules
				initialize IDMGenerateDocument
    			IDMGenerateDocument.IDMXMLDefinition.Busclass									 = reference to this instance
	    		
				if (InvoiceType.Reversal)
					if (ProjectContract.CreateSummarizedInvoices)
						IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractSummaryInvoiceReversalForIDMDoc"
		    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractSummaryInvoiceReversal"				    		
		
		       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceSummaryRel"
		    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractSummaryInvoiceReversalLineForIDMDoc"
					
					else
		    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractInvoiceReversalForIDMDoc"
		    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractInvoiceReversal"				    		
		
		       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractReversalLineRel"
		    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractReversalLineForIDMDoc"
								
				
				else
					if (ProjectContract.CreateSummarizedInvoices)
		    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractSummaryInvoiceForIDMDoc"
		    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractSummaryInvoice"				    		
		
		       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceSummaryRel"
		    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractSummaryInvoiceLineForIDMDoc"
					
					else
		    			IDMGenerateDocument.IDMXMLDefinition.ListName								     = "ProjectContractInvoiceForIDMDoc"
		    			IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "ProjectContractInvoice"				    		
		
		       			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ProjectContractInvoiceLineRel"
		    			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 	 = "ProjectContractInvoiceLineForIDMDoc"

		    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 = 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag		 = "Lines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag		 = "Line"
				
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName	 = "ProjectContractInvoiceCommentRel"
		    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName 	 = "ProjectContractInvoiceCommentForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 = 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag		 = "ProjectContractInvoiceComments"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag		 = "InvoiceContractComments"
				
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName	 = "ProjectContractCommentRel"
		    	IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName 	 = "ProjectContractCommentForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1 = 3
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag		 = "ProjectContractComments"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag		 = "ContractComments"
						
				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName		= "FinanceEnterpriseGroup"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue		= FinanceEnterpriseGroup
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName		= "Project"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue		= ProjectContract.Project    		
 				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName		= "FinanceDimension2"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue		= FinanceDimension2  
  				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName		= "ProjectContractInvoice"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue		= ProjectContractInvoice  
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName		= "InvoiceGroup"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue		= RunGroup
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName		= "InvoiceDate"
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeDate		= InvoiceDate
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName		= "InvoiceType"
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue		= DerivedInvoiceType
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName		= "Status"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue		= DerivedStatus
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName		= "Customer"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue		= FinanceDimension2.CompanyCustomerGroup.Customer
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName		= "CustomerName"
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue	= FinanceDimension2.CompanyCustomerGroup.Customer.Name
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeName		= "ReceivableInvoiceNumber"
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeValue	= DerivedInvoicePrintNumber
				
				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 12
					include IDM.IDMAdditionalAttributes

    			IDMGenerateDocument.IDMAttributes	 = IDMAttributes

    			if (InvoiceType.Reversal)
    				IDMGenerateDocument.TemplateUniqueId = ProjectContract.ProjectContractInvoiceReversalTemplate.IDMUniqueId
		    	else
					if (InvoiceType.Retainer
					and first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectContractInvoiceTemplate entered)
		    			IDMGenerateDocument.TemplateUniqueId = first ProjectContractInvoiceLine set.ProjectContractRetainer.ProjectContractInvoiceTemplate.IDMUniqueId
					else
		    			IDMGenerateDocument.TemplateUniqueId = ProjectContract.ProjectContractInvoiceTemplate.IDMUniqueId	    				    		
	    		
	    		IDMGenerateDocument.DocumentType	 = "FSM_ProjectContractInvoice"
    			IDMGenerateDocument.FileName		 = DerivedFileNameForIDM
    			
    			if (PrmPrintOrEmail)
	    			PrintOrEmail = PrmPrintOrEmail

				if (PrintOrEmail)
					if (ProjectFundingSource.InvoiceIssueMethod.Email)
		    			IDMGenerateDocument.IDMEmail.From				= DerivedFromEmail
		    			IDMGenerateDocument.IDMEmail.To					= ProjectFundingSource.BillToEmailAddress
						IDMGenerateDocument.IDMEmail.Cc					= FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress
		    			
						if (InvoiceType.Reversal)		    			
			    			if (ProjectFundingSource.ProjectInvoiceIDMEmailTemplate entered)
								IDMGenerateDocument.EmailTemplateUniqueID	= ProjectFundingSource.ProjectInvoiceReversalIDMEmailTemplate.IDMUniqueId	
			    			else
			    				IDMGenerateDocument.IDMEmail.Body			= DerivedEmailBodyForReversal			    			
		    			
			    			if (ProjectFundingSource.ProjectInvoiceIDMEmailSubject entered)
			    				IDMGenerateDocument.IDMEmail.Subject        = DerivedCustomEmailSubject
			    			else
			    				IDMGenerateDocument.IDMEmail.Subject		= DerivedDefaultEmailSubjectForReversal
			    				
			    		else
			    			if (ProjectFundingSource.ProjectInvoiceReversalIDMEmailTemplate entered)
								IDMGenerateDocument.EmailTemplateUniqueID	= ProjectFundingSource.ProjectInvoiceIDMEmailTemplate.IDMUniqueId
			    			else
			    				IDMGenerateDocument.IDMEmail.Body			= DerivedEmailBody    			
		    			
			    			if (ProjectFundingSource.ProjectInvoiceReversalIDMEmailSubject entered)
			    				IDMGenerateDocument.IDMEmail.Subject        = DerivedCustomEmailSubject
			    			else
			    				IDMGenerateDocument.IDMEmail.Subject		= DerivedDefaultEmailSubject
			    		
			    		initialize LocalIDMAttachmentSize
			    		LocalIDMAttachmentCtr = 1
						for each ProjectContractCommentAttachmentsRel
							if (LocalIDMAttachmentCtr > 100)
								end for each
							if ((LocalIDMAttachmentSize + each.Attachment.FileSizeBytes) <= 10485760) 
								IDMGenerateDocument.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
								LocalIDMAttachmentCtr += 1
								LocalIDMAttachmentSize += each.Attachment.FileSizeBytes
	    				
	    				for each ProjectContractInvoiceCommentAttachmentsRel
							if (LocalIDMAttachmentCtr > 100)
								end for each
							if ((LocalIDMAttachmentSize + each.Attachment.FileSizeBytes) <= 10485760) 
								IDMGenerateDocument.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
								LocalIDMAttachmentCtr += 1
								LocalIDMAttachmentSize += each.Attachment.FileSizeBytes
							else
								invoke FastUpdate each.ProjectContractInvoiceComment
									invoked.AttachmentForResend = true
							
	    			if (ProjectFundingSource.InvoiceIssueMethod.Print)
	   					IDMGenerateDocument.IDMPrinter	 = PrmIDMPrinter 

    			IDMGenerateDocument.IDMAccessControlList = "CSFDefined"
    			
    			invoke CreateFromGenerateDocument IDMJob
    				assign result to IDMJobView
    				invoked.Actor				= actor
    				if (LocalIDMAttachmentCtr = 101)
    					invoked.LongDescription 	= DerivedGenerationWithMaxAttachmentsNotificationForIDM
    				else
	    				invoked.Description			= DerivedGenerationNotificationForIDM
    				invoked.IDMGenerateDocument	= IDMGenerateDocument
    				invoked.BypassGetStatus     = PrmBatch
 
  				IDMJob = IDMJobView.IDMJob 

				if (not PrmBatch) 
					invoke UpdateIDMDocumentPID in background
						run after IDMJob.AsyncId
				
					if (PrintOrEmail)
						if (ProjectFundingSource.InvoiceIssueMethod.Email)
							invoke UpdateEmailCount in background
								run after IDMJob.AsyncId
								invoked.PrmIDMJob = IDMJob
								
							invoke CheckResendEmail in background
								run after IDMJob.AsyncId
								invoked.PrmFromEmailAddress	= DerivedFromEmail
								invoked.PrmToEmailAddress 	= ProjectFundingSource.BillToEmailAddress
								invoked.PrmCcEmailAddress 	= FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectInvoiceFromEmailAddress


		UpdateIDMDocumentPID is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (IDMJob.GenerationStatus.Finished)
					invoke FastUpdate
           				invoked.IDMDocumentPID = IDMJob.MDSID	 
           				
       	UpdateEmailCount is an Instance Action
			default label is untranslatable
       		restricted
       		Parameters
       			PrmIDMJob		is an IDMJob
       				
       		Action Rules
	       		if (PrmIDMJob.EmailStatus.Finished)
	   				EmailCount = EmailCount + 1
	   				
	   	CheckResendEmail is an Instance Action
	   		default label is untranslatable
       		restricted
       		Parameters
				PrmFromEmailAddress is an EmailAddress 
					holds pii
				PrmToEmailAddress   is an EmailAddressMulti 
					holds pii
				PrmCcEmailAddress	is an EmailAddressMulti 
					holds pii
       				
       		Action Rules
	   			if (ResendEmail)
					invoke EmailInvoice in background
						invoked.PrmFromEmailAddress = PrmFromEmailAddress
						invoked.PrmToEmailAddress 	= PrmToEmailAddress
						invoked.PrmCcEmailAddress 	= PrmCcEmailAddress
	   		
	   				
#endif

		InitializeInvoiceFile is an Instance Action
			restricted
			Action Rules
				initialize GeneratedInvoice
				initialize IDMDocumentPID
				if (PrintStatus = 2)
					PrintStatus = 1
				
		FastUpdate is an Update Action
			restricted
			bypass field rules
			
		CreateInvoiceSummary is an Instance Action
			valid when (OkToCreateSummary)
			Local Fields
				InvoiceSummaryTable
				Counter					is Numeric size 4
				LastCounter				is Numeric size 4
				LocalDimension			is like GeneralLedgerChartAccount
				LocalDisplayDimension	is like GeneralLedgerChartAccount				
				LocalResource			is like Employee
				LocalRate				is Decimal size 22.6
				LocalFeeCode			is like ProjectFeeCode
				SpecialTypes			is Boolean
				TranCount				is Numeric size 2
			Entrance Rules
				invoke Delete ProjectContractInvoiceSummary set
			Action Rules
				for each ProjectContractInvoiceLine set
					initialize LocalProject
					initialize LocalDimension
					initialize LocalResource
					initialize LocalRate
					initialize LocalFeeCode
					if (each.GLTransactionDetail entered)
						if (ProjectContract.SummarizeByProject entered)
							LocalProject = each.Project
							if (ProjectContract.SummarizeByProject.SummaryParent)
								if (ProjectHierarchyRel.ParentProject.ProjectType.Summary)
									LocalProject = ProjectHierarchyRel.ParentProject
							if (ProjectContract.SummarizeByProject.Contract)
								LocalProject = blank
						if (ProjectContract.SummarizeByDimension entered)
							LocalProjectCodeBlock = each.GLTransactionDetail.FinanceCodeBlock
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
								LocalDimension = LocalProjectCodeBlock.GeneralLedgerChartAccount
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (ProjectContract.AlternateChart entered)
										LocalReportingChart = ProjectContract.AlternateChart
									else
										LocalReportingChart = FinanceEnterpriseGroup.EnterpriseChart
									if (ReportingChartAccountRel.ParentChartAccount.ChartType.Summary)
										LocalDimension = ReportingChartAccountRel.ParentChartAccount
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension1)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension1
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension1HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension1HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension3
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension3HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension3HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension4
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension4HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension4HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension5)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension5
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension5HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension5HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension6)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension6
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension6HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension6HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension7)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension7
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension7HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension7HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension8)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension8
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension8HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension8HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension9)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension9
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension9HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension9HierarchyRel.ParentDimension
							else
							if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension10)
								LocalDimension = LocalProjectCodeBlock.FinanceDimension10
								if (ProjectContract.SummarizeByDimension.SummaryParent)
									if (FinanceDimension10HierarchyRel.ParentDimension.DimensionType.Summary)
										LocalDimension = FinanceDimension10HierarchyRel.ParentDimension
						if (ProjectContract.SummarizeByResource)
							LocalResource = each.GLTransactionDetail.Resource
						if (ProjectContract.SummarizeByRate)
							LocalRate = each.BillableRate
						if (ProjectContract.SummarizeByFeeCode)
							LocalFeeCode = each.FeeCode
						Counter = 1
						while (Counter < 1000)
							if (InvoiceSummaryTable.InvoiceSummaryLine[Counter] not entered)
								if (ProjectContract.SummarizeByProject entered)
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].Project		= LocalProject
								if (ProjectContract.SummarizeByDimension entered)
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].Dimension	= LocalDimension
								if (ProjectContract.SummarizeByResource)								
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].Resource	= LocalResource
								if (ProjectContract.SummarizeByRate)								
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].Rate		= LocalRate
								if (ProjectContract.SummarizeByFeeCode)								
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].FeeCode		= LocalFeeCode
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].Amount			= each.Amount
								if (each.LineType.Standard)
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].UnitsAmount	= each.UnitsAmount
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].BillableAmount	= each.BillableAmount								
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].TaxAmount		= each.TaxAmount
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].RetainedAmount	= each.RetainedAmount								
								invoke UpdateSummaryKey each
									invoked.SummaryKey	= Counter
								if (TranCount = 50)
									commit transaction
									initialize TranCount
								TranCount += 1
								LastCounter = Counter
								Counter = 1000
							else
							if (InvoiceSummaryTable.InvoiceSummaryLine[Counter].Project   = LocalProject
							and InvoiceSummaryTable.InvoiceSummaryLine[Counter].Dimension = LocalDimension
							and InvoiceSummaryTable.InvoiceSummaryLine[Counter].Resource  = LocalResource
							and InvoiceSummaryTable.InvoiceSummaryLine[Counter].Rate	  = LocalRate
							and InvoiceSummaryTable.InvoiceSummaryLine[Counter].FeeCode	  = LocalFeeCode)
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].Amount			+= each.Amount
								if (each.LineType.Standard)
									InvoiceSummaryTable.InvoiceSummaryLine[Counter].UnitsAmount	+= each.UnitsAmount
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].BillableAmount	+= each.BillableAmount
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].TaxAmount		+= each.TaxAmount
								InvoiceSummaryTable.InvoiceSummaryLine[Counter].RetainedAmount	+= each.RetainedAmount								
								invoke UpdateSummaryKey each
									invoked.SummaryKey	= Counter
								if (TranCount = 50)
									commit transaction
									initialize TranCount
								TranCount += 1
								Counter = 1000
							else
								Counter +=1
					else
						SpecialTypes = true
				Counter = 1
				while (Counter < 1000)
					if (InvoiceSummaryTable.InvoiceSummaryLine[Counter] not entered)
						Counter = 1000
					else
					if (InvoiceSummaryTable.InvoiceSummaryLine[Counter].Amount entered
					or  InvoiceSummaryTable.InvoiceSummaryLine[Counter].UnitsAmount entered)
						invoke Create ProjectContractInvoiceSummary
							fill in fields from this instance
							invoked.Project				= InvoiceSummaryTable.InvoiceSummaryLine[Counter].Project
							invoked.Dimension			= InvoiceSummaryTable.InvoiceSummaryLine[Counter].Dimension
							invoked.Resource			= InvoiceSummaryTable.InvoiceSummaryLine[Counter].Resource
							invoked.ProjectType			= ProjectContract.SummarizeByProject
							invoked.DimensionType		= ProjectContract.SummarizeByDimension
							invoked.Amount				= InvoiceSummaryTable.InvoiceSummaryLine[Counter].Amount
							invoked.UnitsAmount			= InvoiceSummaryTable.InvoiceSummaryLine[Counter].UnitsAmount
							invoked.BillableAmount		= InvoiceSummaryTable.InvoiceSummaryLine[Counter].BillableAmount
							invoked.TaxAmount			= InvoiceSummaryTable.InvoiceSummaryLine[Counter].TaxAmount
							invoked.RetainedAmount		= InvoiceSummaryTable.InvoiceSummaryLine[Counter].RetainedAmount
							invoked.BillableRate		= InvoiceSummaryTable.InvoiceSummaryLine[Counter].Rate
							invoked.FeeCode				= InvoiceSummaryTable.InvoiceSummaryLine[Counter].FeeCode
							invoked.SequenceNumber		= Counter
						if (TranCount = 50)
							commit transaction
							initialize TranCount
						TranCount += 1
					Counter += 1
				if (SpecialTypes)
					for each ProjectContractInvoiceLine set
						if (each.GLTransactionDetail not entered)
							LastCounter += 1
							invoke UpdateSummaryKey each
								invoked.SummaryKey	= LastCounter
							invoke Create ProjectContractInvoiceSummary
								fill in fields from this instance
								invoked.Project			= each.Project
								invoked.ProjectType		= 1
								invoked.Amount			= each.Amount
								invoked.UnitsAmount		= each.UnitsAmount
								invoked.BillableAmount	= each.BillableAmount
								invoked.TaxAmount		= each.TaxAmount
								invoked.RetainedAmount	= each.RetainedAmount
								invoked.LineType		= each.LineType
								invoked.SequenceNumber	= LastCounter
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1
			Exit Rules
				initialize GeneratedInvoice
				initialize IDMDocumentPID
			
		ResetInvoiceType is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
			Instance Selection
				where ((FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				or      PrmFinanceEnterpriseGroup not entered)
				and    (InvoiceType = 2
				or      InvoiceType = 3))
			Action Rules
				Instance Rules
					if (InvoiceType = 2)
						InvoiceType = 0
					if (InvoiceType = 3)
						InvoiceType = 1

		ComputeInvoiceTotals is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
			Instance Selection
				where ((FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				or      PrmFinanceEnterpriseGroup not entered)
				and     TotalInvoiceAmount not entered)
			Action Rules
				Instance Rules
					initialize LocalInvoiceTotalsComputed
					initialize LocalInvoiceTotalAmounts
					initialize LocalInvoiceTotalUnitsAmount
					initialize LocalInvoiceTotalTaxAmounts
					initialize LocalInvoiceTotalRetainerAmount
					initialize LocalInvoiceTotalAllowance
					initialize LocalInvoiceTotalRetainage
					initialize LocalInvoiceTotalFees
					initialize LocalInvoiceTotalAdvance
					initialize LocalInvoiceTotalPassThrough
					initialize LocalInvoiceTotalAdjustment
					include CalculateInvoiceTotals
					TotalInvoiceAmount = LocalInvoiceTotalAmounts
					TotalUnits = LocalInvoiceTotalUnitsAmount
					TotalTax = LocalInvoiceTotalTaxAmounts
					TotalFees = LocalInvoiceTotalFees
					if (!InvoiceType.Retainer)
						TotalRetainer = LocalInvoiceTotalRetainerAmount
						TotalAllowance = LocalInvoiceTotalAllowance
						TotalRetainage = LocalInvoiceTotalRetainage * -1
						TotalAdvance = LocalInvoiceTotalAdvance
						TotalPassThrough = LocalInvoiceTotalPassThrough
						TotalAdjustment = LocalInvoiceTotalAdjustment
						
#ifdef module idm  
		UploadToIDM is an Instance Action  
            valid when (GeneratedInvoice.ValidForIDMUpload)
            Action Rules
                include IDM.MoveAttachmentsToIDM
                    replace AttachmentField   with GeneratedInvoice 
                                                
        MoveAttachmentsToIDM is a Set Action
            restricted
            Instance Selection
                where (GeneratedInvoice.IsLocal)
            Accumulators
                InstanceCount
				
            Action Rules
                Instance Rules
                    increment InstanceCount 

                    include IDM.MoveAttachmentsToIDM
                        replace AttachmentField   with GeneratedInvoice  

                    commit transaction

                    if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
                        end set action instance loop
#endif
