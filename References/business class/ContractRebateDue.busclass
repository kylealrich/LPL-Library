ContractRebateDue is a BusinessClass
	owned by po
	prefix is DUE
	classic name is POREBDUE
	rpg name is DBPODUE

	Ontology
		symbolic key is ContractRebateDue
			classic set name is DUESET1
			sql set name is DUESET1


	Patterns
		implements StaticJava
		disable AuditIndex

	Persistent Fields
		ExpectedAmount						is an InternationalAmount
			classic name is EXPECTED-AMT
		ReceivedAmt							is an InternationalAmount
			classic name is RECEIVED-AMT
		Status								is Numeric size 1
			States
				Open							value is 0
				Closed							value is 1
				Paid							value is 2
				NotPaid							value is 3
				NotEarned						value is 4
				Terminated						value is 5
		CurrentPurchases					is an InternationalAmount
			classic name is CURR-PURCHASES
		RebateAmount						is an InternationalAmount
			classic name is REBATE-AMT
		GrowthRebatePercent					is Percent size 10.3
			classic name is GROWTH-PERCENT
		CurrentBaseOfPurchases				is an InternationalAmount
			classic name is CURR-BASE-PUR
		RebateExpectedDate					is Date
			default label is "PaymentExpectedDate"
			classic name is REB-EXP-DATE

	Transient Fields
		CreatedFromContractRebate			is Boolean
		GrowthQualifierArray
		ArrayCount 							is Numeric size 3
		QualifierFound						is Boolean
		MatchedFirstGrowthParameter			is Boolean
		MatchedSecondGrowthParameter		is Boolean

	Local Fields
	 	LocalContractRebateQualifier					is a ContractRebateQualifier
		LocalContractRebateDue							is a ContractRebateDue
		LocalTotalsAccumulated							is Boolean
		LocalAmount1Total								is like InternationalAmount
		LocalAmount2Total								is like InternationalAmount
		LocalReceivedTotalsAccumulated					is Boolean
		LocalReceivedAmount1Total						is like InternationalAmount
		LocalReceivedAmount2Total						is like InternationalAmount
		LocalQualifiedBasicRebateAmountPerUnitAmount	is like InternationalAmount
		LocalPreviousContractRebateDue					is Date
		LocalSupplementalBasisRebateTotalExpectedAmount is like InternationalAmount

	Context Fields
		RebateDueDateRange					is a DateRange

	Derived Fields
		DerivedManufacturerExtendedAmount is a DerivedField
			type is like InternationalCost
			return sum PayablesInvoiceDetailRel.DerivedExtendedMatchAmount

		TotalRebatesReceived is a DerivedField
			type is like InternationalAmount
			return (CalculatedManualRebateReceivedAmount + CalculatedAPRebateReceivedAmount + CalculatedARRebateReceivedAmount + CalculatedCLRebateReceivedAmount)

		ComputeRemainingAmt is a DerivedField
			type is like InternationalAmount
			if (TotalRebatesReceived > ExpectedAmount)
				return 0
			else
				return (ExpectedAmount - TotalRebatesReceived)

		TotalReceivedRebateDistributions is a DerivedField
			type is like InternationalAmount
			return ((sum ContractRebateReceived set.TotalRebateDistributions) + CalculatedAPRebateReceivedAmount + CalculatedARRebateReceivedAmount + CalculatedCLRebateReceivedAmount)

		ComputeRemainingDistribAmt is a DerivedField
			type is like InternationalAmount
   			if  (TotalReceivedRebateDistributions > TotalRebatesReceived)
				return 0
			else
   				return (TotalRebatesReceived - TotalReceivedRebateDistributions)

		CalculatedExpectedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (GrowthRebate)
   				return ((CurrentPurchases - CurrentBaseOfPurchases)* GrowthRebatePercent)
			else
			if (LoyaltyRebate)
   				return ((CurrentPurchases - CurrentBaseOfPurchases)* DerivedLoyaltyRebatePercent)
			else
			if (ContractRebate.RebatePercent entered)
   				return ((CurrentPurchases - CurrentBaseOfPurchases)* ContractRebate.RebatePercent)
   			else
   			if (ContractRebate.PotentialPeriodRebateAmount entered)
   				return RebateAmount
   			else
   				return LocalQualifiedBasicRebateAmountPerUnitAmount

		ManualRebateReceivedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (!LocalReceivedTotalsAccumulated)
				for each ContractRebateReceived set
					LocalReceivedAmount1Total		= each.NotVoidedTransactionAmount
					LocalReceivedAmount2Total		= each.TotalRebateDistributions
				LocalReceivedTotalsAccumulated		= true
			return LocalReceivedAmount1Total

		ContractRebateReceivedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (!LocalReceivedTotalsAccumulated)
				for each ContractRebateReceived set
					LocalReceivedAmount1Total		= each.NotVoidedTransactionAmount
					LocalReceivedAmount2Total		= each.TotalRebateDistributions
				LocalReceivedTotalsAccumulated		= true
			return LocalReceivedAmount2Total

		CalculatedManualRebateReceivedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ContractRebateReceived set.NotVoidedTransactionAmount)

		CalculatedAPRebateReceivedAmount is a DerivedField
   			type is like InternationalAmount
   			restricted
   			return (sum APRebateReceivedRel.ReverseDistributionAmount)

		CalculatedARRebateReceivedAmount is a DerivedField
   			type is like InternationalAmount
   			restricted
   			return (sum ARRebateReceivedRel.TransactionAmount)

   		CalculatedCLRebateReceivedAmount is a DerivedField
   			type is like InternationalAmount
   			restricted
   			return (sum CLRebateReceivedRel.ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount)

		DerivedCalculatedExpectedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (CalculatedExpectedAmount < 0)
				return 0
			else
				return CalculatedExpectedAmount

		DerivedCurrentPurchases is a DerivedField
			type is like InternationalAmount
			if (DerivedCalculatedExpectedAmount = 0)
				return 0



			else
				return CurrentPurchases - CurrentBaseOfPurchases

		ReceivedAmount is a DerivedField
			type is like InternationalAmount
   			return (ReceivedAmt * 1)

		DerivedGrowthPercent is a ConditionalField
			type is Percent size 6.2
			if (GrowthRebate)
				if (CurrentPurchases <= CurrentBaseOfPurchases)
	   				0
				else
				if (CurrentBaseOfPurchases > 0)
	   				((CurrentPurchases - CurrentBaseOfPurchases) / (CurrentBaseOfPurchases))
	   			else
	   				0
			else
				0

		DerivedGrowthAmount is a DerivedField
			type is like InternationalAmount
			if (GrowthRebate)
				if (ShowQualifierProgress)
					if (DerivedGrowthQualifierSpendForRebateDue <= DerivedGrowthQualifierBaseOfGrowthForRebateDue)
	   					return 0
					else
					if (DerivedGrowthQualifierBaseOfGrowthForRebateDue = 0)
	   					return 0
					else
	   					return (DerivedGrowthQualifierSpendForRebateDue - DerivedGrowthQualifierBaseOfGrowthForRebateDue)
				else
					return 0
			else
				return 0

		DerivedGrowthUnits is a ConditionalField
			type is Decimal size 18.2
			if (GrowthRebate)
				if (ShowQualifierProgress)
					if (DerivedGrowthQualifierSpendForRebateDueInUnits <= DerivedGrowthQualifierBaseOfGrowthForRebateDueInUnits)
	   					0
					else
					if (DerivedGrowthQualifierBaseOfGrowthForRebateDueInUnits = 0)
	   					0
					else
	   					(DerivedGrowthQualifierSpendForRebateDueInUnits - DerivedGrowthQualifierBaseOfGrowthForRebateDueInUnits)
				else
					0
			else
				0

		DerivedGrowthQualifierSpendForRebateDue is a DerivedField
			type is like InternationalAmount
			restricted
			if (!LocalTotalsAccumulated)
				for each ContractRebateDueQualifiersForRebateDueRel
					LocalAmount1Total		= each.QualifierContractSpend
					LocalAmount2Total		= each.BaseOfPurchases
				LocalTotalsAccumulated		= true
			return LocalAmount1Total

		DerivedGrowthQualifierBaseOfGrowthForRebateDue is a DerivedField
			type is like InternationalAmount
			restricted
			if (!LocalTotalsAccumulated)
				for each ContractRebateDueQualifiersForRebateDueRel
					LocalAmount1Total		= each.QualifierContractSpend
					LocalAmount2Total		= each.BaseOfPurchases
				LocalTotalsAccumulated		= true
			return LocalAmount2Total

		DerivedGrowthQualifierSpendForRebateDueInUnits is a ComputeField
			type is Decimal size 18.2
			(sum ContractRebateDueQualifiersForRebateDueRel.QualifierContractSpendInUnits)

		DerivedGrowthQualifierBaseOfGrowthForRebateDueInUnits is a ComputeField
			type is Decimal size 18.2
			(sum ContractRebateDueQualifiersForRebateDueRel.BaseOfPurchasesInUnits)

  		CalculatedGrowthExpectedAmount  is a DerivedField
			type is like InternationalAmount
			restricted
			if (GrowthRebatePercent > 0)
   				return ((CurrentPurchases - CurrentBaseOfPurchases) * GrowthRebatePercent)
   			else
   				return ExpectedAmount

		DerivedGrowthCalculatedExpectedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (CalculatedGrowthExpectedAmount < 0)
				return 0
			else
				return CalculatedGrowthExpectedAmount

		DerivedRunCalculateRebatesMessage is a ConditionalField
			type is Alpha size up to 200
			if (Contract.LastRebateCalculationRunDate < first ContractRebateDueInvoiceLinesByUpdateTimestampRel.UpdateTimeStamp)
				DerivedCalculateRebateNeedsRunningMessage
			else
				blank

		DerivedCalculateRebateNeedsRunningMessage is a MessageField
			restricted
			"YouNeedToRun_'Calculate_Expected_Rebate_Due_Amount'_forThisContract"

		DerivedCurrentPurchasesLabel is a LabelField
			restricted
			"CurrentPurchases"

		DerivedCurrentCalculationPurchasesLabel is a LabelField
			restricted
			"CurrentCalculationPurchases"

		DerivedCurrentNetPurchasesLabel is a LabelField
			restricted
			"CurrentNetPurchases"

		DerivedCurrentQualifierPurchasesLabel is a LabelField
			restricted
			"QualifierPurchases"

		DerivedCurrentPurchasesColumnHeading is a ConditionalField
			type is Alpha size up to 200
			if (ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
				DerivedCurrentCalculationPurchasesLabel
			else
			if (ContractRebate.MultipleThresholdRebateOrSupplementalRebate)
				DerivedCurrentNetPurchasesLabel
			else
				DerivedCurrentPurchasesLabel

		DerivedCurrentCalculationPurchases is a ComputeField 
			type is like InternationalAmount
			(CurrentPurchases - CurrentBaseOfPurchases)			
		
		DerivedRebateEarnedOrNotMessage is a ConditionalField
			type is Alpha size up to 60
			if (RebateEarned)
				DerivedRebateEarnedMessage
			else
				DerivedRebateNotEarnedMessage

		DerivedRebateEarnedMessage is a MessageField
			restricted
			"TheRebateAmountHasBeenEarnedForThisPeriod"

		DerivedRebateNotEarnedMessage is a MessageField
			restricted
			"TheRebateAmountHasNotYetBeenEarnedForThisPeriod"

		DerivedLoyaltyPercent is a ConditionalField
			type is Percent size 6.2
			if (LoyaltyRebate)
				if (CurrentBaseOfPurchases > 0)
	   				(CurrentPurchases / CurrentBaseOfPurchases)
	   			else
	   				0
			else
				0

		DerivedLoyaltyAmount is a DerivedField
			type is like InternationalAmount
			if (LoyaltyRebate)
	   				return CurrentPurchases
			else
				return 0

		LoyaltyCalculatedExpectedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if  (DerivedLoyaltyRebatePercent > 0)
   				return ((CurrentPurchases - CurrentBaseOfPurchases) * DerivedLoyaltyRebatePercent)
   			else
   				return 0

		DerivedLoyaltyCalculatedExpectedAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (LoyaltyCalculatedExpectedAmount < 0)
				return 0
			else
				return LoyaltyCalculatedExpectedAmount

		DerivedLoyaltyRebatePercent is a DerivedField
			type is Percent size 10.3
			return first ContractRebateDueQualifiersForRebateDueRel.LoyaltyPercentToBePaid

		DerivedGrowthMessage	is a ConditionalField
			type is Alpha size up to 150
			if (ContractRebate.CalculateGrowthInSpendFromLastYearToThisYearOnly)
				DerivedYearGrowthMessage
			else
				DerivedPeriodGrowthMessage

		DerivedPeriodGrowthMessage	is a MessageField
			restricted
			"ForThisGrowthRebateThereIsNoRebateEarnedInTheFirstRebatePeriod"

		DerivedYearGrowthMessage	is a MessageField
			restricted
			"ForThisGrowthRebateThereIsNoRebateEarnedInTheFirstYear"

		DerivedLoyaltyMessage	is a MessageField
			"ForThisLoyaltyRebateThereIsNoRebateEarnedInTheFirstRebatePeriod"

		DerivedGrowthRebateToBePaid is a ComputeField
			type is Percent size 10.3
			(GrowthRebatePercent / 100)

		DerivedGrowthAmountPerUnitToBePaid is a DerivedField
			type is Decimal size 19.3
			return first ContractRebateDueQualifiersForRebateDueRel.AmountPerUnitEarned

		DerivedLoyaltyAmountPerUnitToBePaid is a DerivedField
			type is Decimal size 19.3
			return first ContractRebateDueQualifiersForRebateDueRel.AmountPerUnitEarned

		DerivedLoyaltyQualifierSpendForRebateDueInUnits is a ComputeField
			type is Decimal size 18.2
			(sum ContractRebateDueQualifiersForRebateDueRel.QualifierContractSpendInUnits)

		DerivedQualifierSpendForRebateDueInUnits is a ComputeField
			type is Numeric size 10
			(sum ContractRebateDueQualifiersForRebateDueRel.QualifierContractSpendInUnits)

		DerivedSupplementalBasisRebateTotalExpectedAmount is a DerivedField

			type is like InternationalAmount
			initialize LocalSupplementalBasisRebateTotalExpectedAmount
			LocalPreviousContractRebateDue				= last PreviousContractRebateDuesRel.ContractRebateDue
			for each ContractRebateDuesForSupplementalBasisRebateRel
				LocalSupplementalBasisRebateTotalExpectedAmount	+= each.ExpectedAmount
			return LocalSupplementalBasisRebateTotalExpectedAmount

		DerivedThresholdQualifierSpendForRebateDueInUnits is a ComputeField
			type is Decimal size 18.2
			(sum ContractRebateDueQualifiersForRebateDueRel.QualifierContractSpendInUnits)

		DerivedThresholdAmountPerUnitToBePaid is a DerivedField
			type is Decimal size 19.3
			return first ContractRebateDueQualifiersForRebateDueRel.AmountPerUnitEarned

	Conditions
		Open
			restricted
			when (Status.Open)
		GrowthRebate
			restricted
			when (ContractRebateTypeRel.RebateType.GrowthRebate)
		GrowthRebateWithPercentRebate
			restricted
			when (GrowthRebate
			and   ContractRebateGrowthQualifierByPercentRel exists)
		GrowthOnLastYearContractRebateDue
			restricted
			when (GrowthRebate
			and  ContractRebate.CalculateExpectedRebateForGrowth)
		GrowthOnPriorContractRebateDue
			restricted
			when (GrowthRebate
			and  !ContractRebate.CalculateExpectedRebateForGrowth)
		NotGrowthRebate
			restricted
			when (!ContractRebateTypeRel.RebateType.GrowthRebate)
		DueBeforeExpirationDate
			restricted
			when (ContractRebateDue <= Contract.ExpirationDate)
		DueAfterEffectiveDate
			restricted
			when (ContractRebateDue >= Contract.EffectiveDate)
		CalculateForGrowthOverLastYear
			restricted
			when (ContractRebate.CalculateExpectedRebateForGrowth)
		HasCurrentPurchases
			restricted
			when (CurrentPurchases	> 0)
		HasInvoiceLineDetails
			restricted
			when (ContractRebateDueInvoiceLinesRel exists)
		AllInvoicesForSupplierRebate
			restricted
			when (ContractRebate.AllInvoicesForSupplierQualifierExists)
		ShowInvoiceLineDetails
			restricted
			when (!AllInvoicesForSupplierRebate
			and    HasInvoiceLineDetails)
		ShowInvoiceDetails
			restricted
			when (AllInvoicesForSupplierRebate
			and   HasInvoiceLineDetails)
		CalculationNeeded
			restricted
			when (ExpectedAmount = 0
			and   current corporate date > ContractRebateDue)
		RemainingToBeReceived
			restricted
			when (ComputeRemainingAmt > 0)
		HasRebateReceipts
			restricted
			when (ContractRebateReceived set exists)
		WithinParameterDateRange
			restricted
			when (ContractRebateDue	within RebateDueDateRange)
		HasQualifierWithChanges
			restricted
			when (ContractRebate.QualifierChanged
			and   Contract.RebateEligible)
		CalculateRebatesEligible
			restricted
			when (ContractRebate.QualifierChanged = false
			and   Contract.RebateEligible
			and   NotFixedRebate
			and   ContractRebateDueInvoiceLinesRel exists)
		RebateDueExists
			restricted
			when (ContractRebateDue exists)
		NotFixedRebate
			restricted
			when (!ContractRebateType.RebateType.FixedRebateAmount)
		FixedRebate
			restricted
			when (ContractRebateType.RebateType.FixedRebateAmount)
		DisplayPercentage
			restricted
			when (!ContractRebateType.RebateType.GrowthRebate
			and   NotFixedRebate)
		HasNoPercentage
			restricted
			when (ContractRebate.RebatePercent not entered)
		HasNoPercentageAndNotFixed
			restricted
			when (NotFixedRebate
			and   HasNoPercentage)
		NeedToRunCalculateRebates
			when (Contract.LastRebateCalculationRunDate < first ContractRebateDueInvoiceLinesByUpdateTimestampRel.UpdateTimeStamp)
		CalculateRebateOnAllContractSpend
			restricted
			when (ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
		PercentageBased
			restricted
			when (ContractRebate.RebatePercent entered)
		AmountBased
			restricted
			when (ContractRebate.PotentialPeriodRebateAmount entered)
		AmountPerUnitBased
			restricted
			when (ContractRebate.PotentialRebateAmountPerUnit entered)
		RebateEarned
			restricted
			when ((CurrentPurchases	>= CurrentBaseOfPurchases)
			and   (CurrentPurchases > 0))
		QualifiersExistWithPercentOfAllPurhcases
			restricted
			when (QualifiersWithPercentOfAllPurchasesRel exists)
		HasQualifiersWithUnits
			restricted
			when (QualifiersWithUnitsRel exists)
		LoyaltyRebate
			restricted
			when (ContractRebateTypeRel.RebateType.LoyaltyRebate)
		LoyaltyRebateWithPercentRebate
			restricted
			when (LoyaltyRebate
			and   ContractRebateLoyaltyQualifierByPercentRel exists)
		AllowDeleteOfRebateDueDates
			restricted
			when (Contract.CanAmend
			and  !HasInvoiceLineDetails)
		FirstRebateDueDate
			restricted
			when (RebateDueExists
			and   ContractRebateDue			= ContractRebate.FirstRebateDueDate)
		ShowQualifierProgress
			restricted
			when ((NotFixedRebate)
			and  (((!LoyaltyRebate)
			and    (!GrowthRebate))
			or    (((LoyaltyRebate)
			or      (GrowthRebate))
			and     (!FirstRebateDueDate))))
		HasCurrentBaseOfPurchases
			restricted
			when (CurrentBaseOfPurchases	> 0)
		GrowthOrLoyaltyRebate
			restricted
			when (GrowthRebate
			or    LoyaltyRebate)
		HasAPRebateReceipts
			when (APRebateReceivedRel exists)
		HasARRebateReceipts
			when (ARRebateReceivedRel exists)
		HasCLRebateReceipts
			when (CLRebateReceivedRel exists)
		HasUnitsBasedQualifier
			when (ContractRebate.HasUnitsBasedQualifier)
		HasCurrencyBasedQualifier
			when (ContractRebate.HasCurrencyBasedQualifier)
		HasAmountPerUnitBasedQualifier
			when (ContractRebate.HasAmountPerUnitBasedQualifier)
		MultipleThresholdRebate
			when (ContractRebateTypeRel.RebateType.MultipleThresholdRebate)
		SupplementalRebate
			when (ContractRebateTypeRel.RebateType.SupplementalRebate)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
		 	and   ContractGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))
			
		MyContract
			default label is "MyContracts"
			when (PrimaryContactRel.Contact = actor.agent(Employee).Employee)

	Relations
		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Contract = Contract
				and    related.PayablesInvoice.DerivedContractRebateDue = ContractRebateDue)

		ContractRebateTypeRel
			one-to-one relation to ContractRebateType
			Field Mapping uses symbolic key
				related.ContractGroup      = ContractGroup
				related.ContractRebateType = ContractRebateType

		ContractRebateDueInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ContractRebateType	= ContractRebateType
				related.ContractRebate		= blank
				related.ContractRebateDue	= ContractRebateDue

		ContractRebateQualifiersRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank

		ContractRebateDueQualifiersRel	is a ContractRebateDueQualifier set

		QualifiersWithPercentOfAllPurchasesRel
			one-to-many relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
				related.ContractRebateDue			= ContractRebateDue
			Instance Selection
				where (related.QualifierIsPercentOfAllPurchases)

		ContractRebateDueQualifiersForRebateDueRel
			one-to-many relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
				related.ContractRebateDue			= ContractRebateDue

		ContractRebateDueQualifiersForRebateDueAndQualifierRel
			one-to-one relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
				related.ContractRebateDue			= ContractRebateDue
				related.ContractRebateQualifier		= LocalContractRebateQualifier
				related.ContractRebateDueQualifier	= blank

		ContractRebateGrowthQualifierByPercentRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
			Instance Selection
				where (related.PercentPaid entered)

		ContractRebateLoyaltyQualifierByPercentRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
			Instance Selection
				where (related.RebatePercentToBePaid entered)

		ContractRebateReceivedRel
			one-to-many relation to ContractRebateReceived
			Field Mapping uses ByRebDue
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebateDue			= ContractRebateDue

		ContractRebateDueInvoiceLinesByUpdateTimestampRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByUpdateTimestamp
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ContractRebateType		= ContractRebateType
				related.ContractRebate			= blank
				related.ContractRebateDue		= ContractRebateDue

		APRebateReceivedRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByRebate
				related.ContractRebateGroup.ContractGroup      = ContractGroup
				related.ContractRebateGroup.Contract   	       = Contract
				related.ContractRebateGroup.ContractRebateType = ContractRebateType
				related.ContractRebateGroup.ContractRebateDue  = ContractRebateDue
			Instance Selection
				where (related.PayablesInvoice.CancelDate !entered
				and    related.IsDistributionType)

		ARRebateReceivedRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses ByRebate
				related.ContractRebateGroup.ContractGroup      = ContractGroup
				related.ContractRebateGroup.Contract   	       = Contract
				related.ContractRebateGroup.ContractRebateType = ContractRebateType
				related.ContractRebateGroup.ContractRebateDue  = ContractRebateDue

		CLRebateReceivedRel
			one-to-many relation to CashLedgerCashReceiptDetail
			Field Mapping uses ByRebate
				related.ContractRebateGroup.ContractGroup      = ContractGroup
				related.ContractRebateGroup.Contract   	       = Contract
				related.ContractRebateGroup.ContractRebateType = ContractRebateType
				related.ContractRebateGroup.ContractRebateDue  = ContractRebateDue

		ContractRebateDueRelForCurrentBaseOfPurchases
			one-to-one relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateDue			= LocalContractRebateDue

		ContractRebateDuesRelForCurrentBaseOfPurchases
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.ContractRebateDue	> LocalContractRebateDue)

		QualifiersWithUnitsRel
			one-to-many relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
				related.ContractRebateDue			= ContractRebateDue
			Instance Selection
				where (related.QualifierIsUnitsBased)

		ContractRebateDuesForSupplementalBasisRebateRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebate.SupplementalBasisRebate.ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where ((related.ContractRebateDue	>= LocalPreviousContractRebateDue)
				and    (related.ContractRebateDue	<= ContractRebateDue))

		PreviousContractRebateDuesRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.ContractRebateDue	< ContractRebateDue)
				
		PrimaryContactRel
			one-to-one relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

	Field Rules
		Status
			default to Status.Open

		CreatedFromContractRebate
			default to false

		CurrentBaseOfPurchases
			if (!CreatedFromContractRebate)
				if (ContractRebate.CalculateExpectedRebateForGrowth
				and ContractRebate.GrowthByPercent)
					if (CurrentBaseOfPurchases not entered
					or  CurrentBaseOfPurchases = 0)
						confirmation required
							"Warning;PriorYearsBasePurchasesAmountIsRequiredWhenVolumeGrowthQualifiersAreUsingPercents;DoYouWantToContinue?"
				else
				if (ContractRebate.CalculateExpectedRebateForGrowth)
					if (CurrentBaseOfPurchases not entered
					or  CurrentBaseOfPurchases = 0)
						confirmation required
							"Warning;PriorYearsBasePurchasesAmountIsRequiredWhenCalculateGrowthInSpendFromLastYearToThisYearOnlyIsSelected;DoYouWantToContinue?"
				else
				if (ContractRebate.GrowthByPercent)
					if (CurrentBaseOfPurchases not entered
					or  CurrentBaseOfPurchases = 0)
						confirmation required
							"Warning;PriorYearsBasePurchasesAmountIsRequiredWhenVolumeGrowthQualifiersAreUsingPercents;DoYouWantToContinue?"

			if (GrowthOrLoyaltyRebate)
				if (CurrentBaseOfPurchases changed
				and CurrentBaseOfPurchases entered)
					invoke Update ContractRebateDueQualifiersForRebateDueRel
						invoked.BaseOfPurchases		 = CurrentBaseOfPurchases

		CurrentPurchases
			if (ContractRebate.GrowthRebate)
				if ((CurrentPurchases changed
				and CurrentPurchases > 0)
				or (CurrentBaseOfPurchases changed
				and CurrentBaseOfPurchases > 0))
					ExpectedAmount = DerivedGrowthCalculatedExpectedAmount
			else
			if (ContractRebate.LoyaltyRebate)
				if ((CurrentPurchases changed
				and CurrentPurchases > 0)
				or (CurrentBaseOfPurchases changed
				and CurrentBaseOfPurchases > 0))
					ExpectedAmount = DerivedLoyaltyCalculatedExpectedAmount

		GrowthRebatePercent
			if (ContractRebate.GrowthRebate
			and ContractRebate.RebateByAmount)
				constraint (GrowthRebatePercent = 0)
					"CannotEnterPercent,RebateIsByAmount"

	Actions
		Create is a Create Action
			valid when (Contract.CanAmend)
			Action Rules
				constraint (Contract.CanAmend)
					"ContractMustBeInDraftOrAddendumOrAmendmentStatusToAddRebateDueDates"
				constraint (ContractRebate.Active)
					"ContractRebateMustBeActiveToAddRebateDueDates"
				if (RebateExpectedDate not entered)
					if (Contract.PaymentDueDays entered)
	   		  			RebateExpectedDate    = ContractRebateDue + Contract.PaymentDueDays

			Exit Rules
				if (ExpectedAmount entered
				and FixedRebate)
					invoke UpdateTotalExpectedAmount ContractRebate

				for each ContractRebateQualifiersRel
					LocalContractRebateQualifier			= each.ContractRebateQualifier
					invoke Create ContractRebateDueQualifier
						invoked.ContractGroup				= ContractGroup
						invoked.Contract					= Contract
						invoked.ContractRebateType			= ContractRebateType
						invoked.ContractRebate				= blank
						invoked.ContractRebateDue			= ContractRebateDue
						invoked.ContractRebateQualifier		= LocalContractRebateQualifier
						invoked.ContractRebateDueQualifier	= blank

		Update is an Update Action
			valid when (Contract.CanAmend)
			Action Rules
				constraint (Contract.CanAmend)
					"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyRebateDueDates"
				constraint (ContractRebate.Active)
					"ContractRebateMustBeActiveToModifyRebateDueDates"
				if (AmountBased)
					constraint (RebateAmount entered)
						"RebateAmountRequiredWhenRebateIsNotPercent-Based"
				if (RebateExpectedDate not entered)
					if (Contract.PaymentDueDays entered)
	   		  			RebateExpectedDate    = ContractRebateDue + Contract.PaymentDueDays

	   		Exit Rules
	   			if (ExpectedAmount entered
				and FixedRebate)
					invoke UpdateTotalExpectedAmount ContractRebate

		UpdateExpectedDate is an Instance Action 
			restricted 
			Parameters 
				ParmPaymentDueDays is Numeric size 4
			
			Action Rules 
	   			RebateExpectedDate    = ContractRebateDue + ParmPaymentDueDays				

		FastUpdateCurrentPurchases is an Instance Action
			restricted
			Parameters
				PrmUpdateCurrentPurchases 		is an InternationalAmount

			Action Rules
				CurrentPurchases 		= PrmUpdateCurrentPurchases

				if (GrowthRebate)
					if (GrowthOnLastYearContractRebateDue)
						LocalContractRebateDue		= ContractRebateDue + 1 year
						invoke FastUpdateCurrentBaseOfPurchases ContractRebateDueRelForCurrentBaseOfPurchases	
							invoked.PrmUpdateCurrentBaseOfPurchases		= PrmUpdateCurrentPurchases
					else
					if (GrowthOnPriorContractRebateDue)
						LocalContractRebateDue		= ContractRebateDue
						invoke FastUpdateCurrentBaseOfPurchases first ContractRebateDuesRelForCurrentBaseOfPurchases	
							invoked.PrmUpdateCurrentBaseOfPurchases		= PrmUpdateCurrentPurchases
				else
				if (LoyaltyRebate)
					LocalContractRebateDue		= ContractRebateDue
					invoke FastUpdateCurrentBaseOfPurchases first ContractRebateDuesRelForCurrentBaseOfPurchases		
						invoked.PrmUpdateCurrentBaseOfPurchases		= PrmUpdateCurrentPurchases

		FastUpdateCurrentBaseOfPurchases is an Instance Action
			restricted
			Parameters
				PrmUpdateCurrentBaseOfPurchases 		is an InternationalAmount

			Action Rules
				CurrentBaseOfPurchases 		= PrmUpdateCurrentBaseOfPurchases

		UpdateExpectedAmount is an Instance Action
			restricted
			Parameters
				QualifierConditionsMet      				is Boolean
				QualifiedGrowthRebatePercent				is Percent size 10.3
				QualifiedGrowthRebateAmount					is an InternationalAmount
				PrmQualifiedLoyaltyPercentToBePaid			is Percent size 10.3
				PrmQualifiedLoyaltyAmountToBePaid			is an InternationalAmount
				PrmQualifiedThresholdPercentToBePaid		is Percent size 10.3
				PrmQualifiedThresholdAmountToBePaid			is an InternationalAmount
				PrmQualifiedBasicRebateAmountPerUnitAmount 	is an InternationalAmount

			Action Rules
				GrowthRebatePercent						= QualifiedGrowthRebatePercent

				if (QualifierConditionsMet)
					if (ContractRebateTypeRel.RebateType.GrowthRebate)
						if (QualifiedGrowthRebateAmount		> 0)
							ExpectedAmount	= QualifiedGrowthRebateAmount
						else
							ExpectedAmount	= DerivedGrowthCalculatedExpectedAmount
					else
					if (ContractRebateTypeRel.RebateType.LoyaltyRebate)
						if (PrmQualifiedLoyaltyAmountToBePaid		> 0)
							ExpectedAmount	= PrmQualifiedLoyaltyAmountToBePaid
						else
							ExpectedAmount	= DerivedLoyaltyCalculatedExpectedAmount
					else
					if (ContractRebateTypeRel.RebateType.MultipleThresholdRebate
					or  ContractRebateTypeRel.RebateType.SupplementalRebate)
						if (PrmQualifiedThresholdAmountToBePaid		> 0)
							ExpectedAmount	= PrmQualifiedThresholdAmountToBePaid
						else
							ExpectedAmount	= ((CurrentPurchases - CurrentBaseOfPurchases) * PrmQualifiedThresholdPercentToBePaid)
							if (ExpectedAmount < 0)
								ExpectedAmount = 0
					else

						LocalQualifiedBasicRebateAmountPerUnitAmount	= PrmQualifiedBasicRebateAmountPerUnitAmount
						ExpectedAmount									= DerivedCalculatedExpectedAmount
				else
					ExpectedAmount			= 0

		UpdateReceivedAmount is an Instance Action
			restricted
			Action Rules
				ReceivedAmt = TotalRebatesReceived

		Delete is a Delete Action
			valid when (Contract.CanAmend)
			Entrance Rules
				for each ContractRebateQualifiersRel
					LocalContractRebateQualifier			= each.ContractRebateQualifier
					invoke Delete ContractRebateDueQualifiersForRebateDueAndQualifierRel

			Action Rules
				constraint (AllowDeleteOfRebateDueDates)
					"ContractMustBeInDraftOrInAddendumOrAmendmentStatusWithoutRebateInvoiceDetailsInOrderToDeleteRebateDueDates"
				constraint (TotalRebatesReceived = 0)
					"CannotDeleteRecord;RebateMoniesHaveBeenReceived"
				constraint (ContractRebate.Active)
					"ContractRebateMustBeActiveToDeleteRebateDueDates"

			Exit Rules
				if (ExpectedAmount entered
				and FixedRebate)
					invoke UpdateTotalExpectedAmount ContractRebate


		CalculateExpectedRebateDueAmount is an Instance Action
			completion message is "RebateCalculationsStarted;Check'MyScheduledActions'ForCompletion"
			valid when (CalculateRebatesEligible)

			Action Rules
				invoke CalculateExpectedRebateDueAmounts ContractRebateDueInvoiceLine in background
					invoked.PrmContractGroup			= ContractGroup
					invoked.PrmContract					= Contract
					initialize invoked.PrmBeginDueDate
					initialize invoked.PrmEndDueDate

		ReloadRebateDueRebatesForQualifierChanges	is an Instance Action
			completion message is "ReloadRebateInvoicesForQualifierChangesHasStarted.Check'MyScheduledActions'ForCompletion"
			valid when (HasQualifierWithChanges)

			Action Rules
				constraint (Contract.RebateEligible)
					"ContractMustBeReleasedAndNotClosedOrInactive"
				invoke ReloadRebateInvoicesForQualifierChanges ContractRebateDueInvoiceLine in background
					invoked.PrmContractGroup		= ContractGroup
					invoked.PrmContract				= Contract

		ClearExpectedAmount is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract
				PrmBeginDueDate			is Date
				PrmEndDueDate			is Date

			Instance Selection
				where (((ContractRebateDue.ContractGroup	= PrmContractGroup
				and      ContractRebateDue.Contract			= PrmContract)
				or       PrmContract						not entered)
				and      ContractRebateDue					>= PrmBeginDueDate
				and      ContractRebateDue  				<= PrmEndDueDate)

			Action Rules
				Instance Rules
					if (NotFixedRebate)
						initialize	CurrentPurchases
						initialize	ExpectedAmount

		BuildContractRebateDueQualifier is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract

			Local Fields
				LocalSetActionContractRebateType			is a ContractRebateType
				LocalSetActionContractRebate				is a ContractRebate
				LocalSetActionContractRebateDue				is a ContractRebateDue
				LocalSetActionContractRebateQualifier		is a ContractRebateQualifier

			Instance Selection
				where  ((ContractRebateDue.ContractGroup	= PrmContractGroup)
				and    ((ContractRebateDue.Contract			= PrmContract)
				or      (PrmContract						not entered)))

			Action Rules
				Instance Rules
					LocalSetActionContractRebateType		= ContractRebateType
					LocalSetActionContractRebate			= ContractRebate
					LocalSetActionContractRebateDue			= ContractRebateDue
					for each ContractRebateQualifiersRel
						LocalSetActionContractRebateQualifier	= each.ContractRebateQualifier
						LocalContractRebateQualifier			= each.ContractRebateQualifier
						if (ContractRebateDueQualifiersForRebateDueAndQualifierRel exists)   
							invoke Update ContractRebateDueQualifiersForRebateDueAndQualifierRel		
								invoked.ContractGroup				= ContractGroup
								invoked.Contract					= Contract
								invoked.ContractRebateType			= ContractRebateType
								invoked.ContractRebate				= blank
								invoked.ContractRebateDue			= LocalSetActionContractRebateDue
								invoked.ContractRebateQualifier		= LocalSetActionContractRebateQualifier
						else
							invoke Create ContractRebateDueQualifier	
								invoked.ContractGroup				= ContractGroup
								invoked.Contract					= Contract
								invoked.ContractRebateType			= ContractRebateType
								invoked.ContractRebate				= blank
								invoked.ContractRebateDue			= ContractRebateDue		
								invoked.ContractRebateQualifier		= LocalSetActionContractRebateQualifier

		InitializePurchases is an Instance Action
			restricted
			Action Rules
				initialize ExpectedAmount
				initialize CurrentPurchases
				initialize CurrentBaseOfPurchases
				initialize GrowthRebatePercent
