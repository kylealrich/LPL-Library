GeneralLedgerChartAccount is a BusinessClass
	default label is "GlobalLedgerChartAccount"
	owned by GeneralLedger
	prefix is GLGDT
	representative text is "<DerivedRepresentativeText>"   


	Ontology
    	symbolic key is GeneralLedgerChartAccount

    Patterns
		implements StaticJava
		implements BODId
		implements ChildHierarchy
			children are ChartAccountChildrenRel
			child set is ChartAccountHierarchyDetailRel
				child is GeneralLedgerChartAccount
			top node when (ChartType.Node)
			descendants are DescendantsRel
           	  
   	Context Fields
		ContextAccount	is a GLChartAccountContextValue 
		ReportingChart
		AccountingEntity
		InvokedByUnusedStructure

		AllocationContext

		AccountAnalysisSettings
		BypassActiveCodeBlockEdit    
		SkipShadow
		
    Persistent Fields
    	DisplayAccount			    is like GeneralLedgerChartAccount
    		translatable
		ChartSection
		AccountType
		AccountSubType
		ChartType
    	AccountDescription
		AllowUnits					is Numeric 1			
			States
				NotRequired 			value is 0
				No             			value is 1
				Required    			value is 2
		TranslationCode				is a GeneralLedgerTranslationCode	
		Revalue						is Boolean				
		NaturalBalance				is Numeric 1			
			States
				None	 			value is 0
				Debit          		value is 1
				Credit  			value is 2
		Active
		SystemRestriction			is a GeneralLedgerSystemCode group
		SystemAccount
		IsTopNode					is Boolean
		SummaryChartAccountMaintenance is a GeneralLedgerChartAccount group			
		TopNode						is AlphaUpper 26 
		XbrlTag						is Alpha 60
		Account
		GeneralLedgerSubAccount
			default label is "GlobalLedgerSubAccount"
		SequenceNumber              is Numeric 7
    	Level						is Numeric 3 
    	ParentChartAccount			is a LikeChartAccountInGroup 
 		BudgetIdentifier
 		Currency 
 		InterfaceInDetail			is Boolean
 		IsReconcilable				is Boolean
    	RequireProject				is Boolean
 		  		
    Transient Fields


    	TransientContextAccount 	is a GLChartAccountContextValue
    		derive value from GeneralLedgerChartAccount
    	UpdatedByAccount			is Boolean

		DisplayChartType		    is Numeric 1
			derive value from DerivedChartType		
	    	States
	    		Summary				value is 1
				Posting				value is 2
		DisplayChartSection		    is Numeric 1
			derive value from DerivedChartSection		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		ParentAccount				is like GeneralLedgerChartAccount
		SkipHierarchy				is Boolean
		InvokedByCreateWithin		is Boolean
		SkipPropagate				is Boolean

		NewUnrealizedGainDescription	is an AccountDescription
			derive value from DerivedUnrealizedGainDescription		
		NewUnrealizedLossDescription	is an AccountDescription
			derive value from DerivedUnrealizedLossDescription		
		NewTranslationGainDescription	is an AccountDescription
			derive value from DerivedTranslationGainDescription		
		NewTranslationLossDescription	is an AccountDescription
			derive value from DerivedTranslationLossDescription	

		NewDisplayOrder				is Numeric 6

		NewUnrealizedGainAccount	is a GainLossAccount
			derive value from DerivedUnrealizedGainAccount		
		NewUnrealizedLossAccount	is a GainLossAccount
			derive value from DerivedUnrealizedLossAccount		
		NewTranslationGainAccount	is a GainLossAccount
			derive value from DerivedTranslationGainAccount		
		NewTranslationLossAccount	is a GainLossAccount
			derive value from DerivedTranslationLossAccount		
		NewTranslationCode			is a GeneralLedgerTranslationCode
			derive value from DerivedTranslationCode		
		NewRevalue					is Boolean
			derive value from DerivedRevalue		
		NewRequireProject			is Boolean
			derive value from DerivedRequireProject
		NewXbrlTag					is Alpha 60
			derive value from DerivedXbrlTag		
		NewCloseToAccount			is a GainLossAccount
			derive value from DerivedCloseToAccount		
		NewAccount			 		is like GeneralLedgerChartAccount
		NewIsGainLossAccount		is Boolean
			derive value from DerivedIsGainLossAccount		
		BypassNewStructureNotification is Boolean
		IncludeInBudgetEdit			is Boolean
    		derive value from DerivedIncludeInBudgetEdit  
		TransientYTDPeriod			is a GeneralLedgerCalendarPeriod
			derive value from DerivedYTDPeriod
		TransientNextYearYTDPeriod  is a GeneralLedgerCalendarPeriod
			derive value from DerivedNextYearYTDPeriod		




					
	Local Fields
		LocalNextYear					is Numeric 4
		LocalNextYearAlpha				is Alpha 4
		LocalNextYearBeginningBalance	is like TotalAmount	
		LocalSecurityGroupAllowsMaintenance is Boolean
		LocalSystemAccount 				is a SystemAccount
		LocalTopNode					is AlphaUpper 26
		LocalGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
		LocalReportChartAccount			is a GeneralLedgerChartAccount
		LocalUpdateChartAccount			is a GeneralLedgerChartAccount
		LocalUnrealizedGainAccount		is a GeneralLedgerChartAccount
		LocalUnrealizedLossAccount		is a GeneralLedgerChartAccount
		LocalTranslationGainAccount		is a GeneralLedgerChartAccount
		LocalTranslationLossAccount		is a GeneralLedgerChartAccount
		LocalTranslationCode			is a GeneralLedgerTranslationCode
		LocalRevalue					is Boolean
		LocalRequireProject				is Boolean
		LocalIncludeInBudgetEdit		is Boolean
		LocalXbrlTag					is Alpha 60
		LocalCurrencyAccount			is a GeneralLedgerChartAccount
		ChildAccount					is a GeneralLedgerChartAccount
		TopNodeFound					is Boolean
		LevelCalcAccount				is a GeneralLedgerChartAccount
		LocalLevel						is Numeric 3
		LocalCloseToAccount				is a GeneralLedgerChartAccount
		BudgetIdentifierArray
		I1								is Numeric 2
		I2								is Numeric 2
		LocalFirstTime					is Boolean		
		UseInputValue					is Boolean
		LocalActionCode					is an ActionCode
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		LocalInvokedByUnusedStructure 	is Boolean
		CopyStructureMode				is Boolean
		LocalDisplayOrder				is Numeric 6
		LocalReportingBasis				is a ReportingBasis
		LocalAccountingUnitStructure	is an AccountingUnitStructure
		LocalFinanceDimension1Structure is a FinanceDimension1Structure
		LocalFinanceDimension2Structure is a FinanceDimension2Structure
		LocalFinanceDimension3Structure is a FinanceDimension3Structure
		LocalFinanceDimension4Structure is a FinanceDimension4Structure
		LocalFinanceDimension5Structure is a FinanceDimension5Structure
		LocalFinanceDimension6Structure is a FinanceDimension6Structure
		LocalFinanceDimension7Structure is a FinanceDimension7Structure
		LocalFinanceDimension8Structure is a FinanceDimension8Structure
		LocalFinanceDimension9Structure is a FinanceDimension9Structure
		LocalFinanceDimension10Structure is a FinanceDimension10Structure
		LocalProjectStructure			is a ProjectStructure
		LocalActualPeriodAmount			is like TotalAmount
		LocalAccountDebitAmount			is like TotalAmount
		LocalAccountCreditAmount		is like TotalAmount
		LocalBdugetPeriodAmount			is like TotalAmount		
		LocalActualPeriodAmountTwo		is like TotalAmount
		LocalEncumbrancePeriodAmount	is like TotalAmount
		LocalCommitmentPeriodAmount		is like TotalAmount						
		LocalActualYTDAmount			is like TotalAmount
		LocalBudgetYTDAmount			is like TotalAmount		
		LocalActualYTDAmountTwo			is like TotalAmount	
		LocalEncumbranceYTDAmount		is like TotalAmount	
		LocalCommitmentYTDAmount		is like TotalAmount				
		LocalReportingPeriod			is a GeneralLedgerCalendarPeriod
		LocalSummaryEntity				is like AccountingEntity
		LocalSummaryAcctUnit			is like AccountingUnit
		LocalPostingEntity				is like AccountingEntity
		LocalSummaryDimension1			is like FinanceDimension1				
		LocalSummaryDimension2			is like FinanceDimension2
		LocalSummaryDimension3			is like FinanceDimension3
		LocalSummaryDimension4			is like FinanceDimension4				
		LocalSummaryDimension5			is like FinanceDimension5
		LocalSummaryDimension6			is like FinanceDimension6
		LocalSummaryDimension7			is like FinanceDimension7				
		LocalSummaryDimension8			is like FinanceDimension8
		LocalSummaryDimension9			is like FinanceDimension9
		LocalSummaryDimension10 		is like FinanceDimension10
		LocalNotAllAcctUnitsInStructure	is Boolean
		LocalCurrency					is a Currency
		LocalActualCalculated			is Boolean
		LocalGetAccountDebit			is Boolean
		LocalGetAccountCredit			is Boolean
		LocalGetAccountNet				is Boolean
		LocalGetAccountYTD				is Boolean
		LocalAccountDebitCalculated		is Boolean
		LocalAccountCreditCalculated	is Boolean
		LocalBudgetCalculated			is Boolean		
		LocalBudgetYTDCalculated		is Boolean	
		LocalActualYTDCalculated		is Boolean	
		LocalActualYTDTwoCalculated		is Boolean	
		LocalEncumbranceYTDCalculated	is Boolean
		LocalCommitmentYTDCalculated	is Boolean	
		LocalActualTwoCalculated		is Boolean
		LocalEncumbranceCalculated		is Boolean
		LocalCommitmentCalculated		is Boolean	
		Counter							is Numeric 6
		LocalParentAccount				is like GeneralLedgerChartAccount					
		BypassSecurityEdit           is Boolean			
		LocalCodeBlockRelation			is a CodeBlockRelation
		LocalKeyFromValue				is Alpha 200
		LocalKeyToValue					is Alpha 200
	Derived Fields

		DynamicMapAccountingUnitShadowRel is a DerivedField
			type is LPLText
			DynamicMapAccountingUnitShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicMapAccountingUnitShadowRel += "related.SummaryEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
				else
					DynamicMapAccountingUnitShadowRel += "related.SummaryEntity = any AccountingEntityDirectShadowRel.AccountingEntity\n"
			else
				DynamicMapAccountingUnitShadowRel += "related.SummaryEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitTopNodeGroup.DimensionEntity\n"
			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				DynamicMapAccountingUnitShadowRel += "related.SummaryAccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicMapAccountingUnitShadowRel += "related.SummaryAccountingUnit = EntityNodeString\n"
				else
					DynamicMapAccountingUnitShadowRel += "related.SummaryAccountingUnit = any AccountingEntityDirectShadowRel.DerivedUnitStructureEntityString\n"
			else
				DynamicMapAccountingUnitShadowRel += "related.SummaryAccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitTopNodeGroup.DimensionNode\n"
			return DynamicMapAccountingUnitShadowRel

		DynamicMapFinanceDimension1ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension1ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				DynamicMapFinanceDimension1ShadowRel += "related.SummaryFinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
				DynamicMapFinanceDimension1ShadowRel += "related.SummaryFinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"
			return DynamicMapFinanceDimension1ShadowRel

		DynamicMapFinanceDimension2ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension2ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				DynamicMapFinanceDimension2ShadowRel += "related.SummaryFinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else
				DynamicMapFinanceDimension2ShadowRel += "related.SummaryFinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"
			return DynamicMapFinanceDimension2ShadowRel

		DynamicMapFinanceDimension3ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension3ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				DynamicMapFinanceDimension3ShadowRel += "related.SummaryFinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
				DynamicMapFinanceDimension3ShadowRel += "related.SummaryFinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"
			return DynamicMapFinanceDimension3ShadowRel

		DynamicMapFinanceDimension4ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension4ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				DynamicMapFinanceDimension4ShadowRel += "related.SummaryFinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
				DynamicMapFinanceDimension4ShadowRel += "related.SummaryFinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"
			return DynamicMapFinanceDimension4ShadowRel

		DynamicMapFinanceDimension5ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension5ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				DynamicMapFinanceDimension5ShadowRel += "related.SummaryFinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
				DynamicMapFinanceDimension5ShadowRel += "related.SummaryFinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"
			return DynamicMapFinanceDimension5ShadowRel

		DynamicMapFinanceDimension6ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension6ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				DynamicMapFinanceDimension6ShadowRel += "related.SummaryFinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
				DynamicMapFinanceDimension6ShadowRel += "related.SummaryFinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"
			return DynamicMapFinanceDimension6ShadowRel

		DynamicMapFinanceDimension7ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension7ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				DynamicMapFinanceDimension7ShadowRel += "related.SummaryFinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
				DynamicMapFinanceDimension7ShadowRel += "related.SummaryFinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"
			return DynamicMapFinanceDimension7ShadowRel

		DynamicMapFinanceDimension8ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension8ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				DynamicMapFinanceDimension8ShadowRel += "related.SummaryFinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
				DynamicMapFinanceDimension8ShadowRel += "related.SummaryFinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"
			return DynamicMapFinanceDimension8ShadowRel

		DynamicMapFinanceDimension9ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension9ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				DynamicMapFinanceDimension9ShadowRel += "related.SummaryFinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
				DynamicMapFinanceDimension9ShadowRel += "related.SummaryFinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"
			return DynamicMapFinanceDimension9ShadowRel

		DynamicMapFinanceDimension10ShadowRel is a DerivedField
			type is LPLText
			DynamicMapFinanceDimension10ShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				DynamicMapFinanceDimension10ShadowRel += "related.SummaryFinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
				DynamicMapFinanceDimension10ShadowRel += "related.SummaryFinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"
			return DynamicMapFinanceDimension10ShadowRel

		DynamicMapProjectShadowRel is a DerivedField
			type is LPLText
			DynamicMapProjectShadowRel = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"
			if (AccountAnalysisSettingsRel.Project entered)
				DynamicMapProjectShadowRel += "related.SummaryProject = AccountAnalysisSettingsRel.Project\n"
			else
				DynamicMapProjectShadowRel += "related.SummaryProject = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"
			return DynamicMapProjectShadowRel


		DerivedSummaryMinusPrefix is a DerivedField
			type is like GeneralLedgerChartAccount
			I2 = GeneralLedgerChartAccount size
			I1 = 1
			if (ChartType.Summary)
				while (GeneralLedgerChartAccount[I1] != "_")
					I1 += 1
				I1 += 1
			return GeneralLedgerChartAccount[I1:I2]
		DerivedParentMinusPrefix is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalGeneralLedgerChartAccount = SubordinateInTopNodeRel.ParentChartAccount
			if (LocalGeneralLedgerChartAccount like "*TOP_NODE"
			or  LocalGeneralLedgerChartAccount = blank)
				return blank
			I2 = LocalGeneralLedgerChartAccount size
			I1 = 1
			while (LocalGeneralLedgerChartAccount[I1] != "_")
				I1 += 1
			I1 += 1
			return LocalGeneralLedgerChartAccount[I1:I2]
		DerivedSecurityGroupAllowsAccess is a DerivedField
			type is Boolean
			if (ChartType.Node)
				LocalSecurityGroupAllowsMaintenance = true
				return true
			if (ActorSecurityGroup not entered)
				LocalSecurityGroupAllowsMaintenance = true
				return true
			if (SecurityGroupDetailRel exists)
				if (parentcontext.name != "AccountAnalysisSettings"
				and parentcontext.name != "ProjectReportingSettings"
				and parentcontext.name != "ProjectReportingSettingsAll")
					if (!SecurityGroupDetailRel.CreatedForHierarchyAccess)
						LocalSecurityGroupAllowsMaintenance = true
					return true
				else
					if (!SecurityGroupDetailRel.CreatedForHierarchyAccess)
						return true	
			return false
				
		ActorSecurityGroup is a DerivedField
			type is like ChartAccountSecurityGroup
			return actor.context.ChartAccountSecurityGroup
				
 		DerivedRepresentativeText	is a DerivedField
			type is Alpha 120
			restricted
			if (IsTopNode)
				return AccountDescription
			else				
				return DerivedRepresentativeTextString
		DerivedRepresentativeTextString is a StringField	
			type is Alpha 120
			restricted
			DisplayAccount
			" - "
			AccountDescription
		DerivedShadowCount 				is a DerivedField
			type is Numeric 8
			restricted
			return (instance count of GLChartAccountShadow(SummaryGeneralLedgerChartAccount) set)
		DerivedCountOfDescendants		is a DerivedField
			type is Numeric 8
			return (instance count of DescendantsRel)
		DerivedSiblingsCount			is a DerivedField
			type is Numeric 8
			restricted
			return (instance count of SiblingsRel)
		RowName							is a StringField
			type is AlphaUpper 35
			restricted
			ChartSection
			"-"
			GeneralLedgerChartAccount
		ReportingChartAccountExists 	 is a DerivedField
			type is Boolean
			restricted
			if (SubordinateInTopNodeRel exists)
				return true
		DerivedParentAccount		 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			return ParentRel.ParentChartAccount 
		DerivedChartType			 is a DerivedField
			type is Numeric 1
			restricted
			return ChartType 
		DerivedChartSection			 is a DerivedField
			type is Numeric 1
			restricted
			return ChartSection
		DerivedTopNode	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			return ReportingChart.ChartAccountNode				
		SummaryNodeString	    is a StringField
			type is AlphaUpper 26
			restricted
			ReportingChart.ChartSequence
			"_"
			NewAccount
			
		DerivedUnrealizedGainAccount	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentAccount entered)
				if (ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel.UnrealizedGainAccount entered)
						return ReportingChartAccountDefaultRel.UnrealizedGainAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedGain
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
    		else
				LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
				if (ReportingChartAccountDefaultRel.UnrealizedGainAccount entered)
					return ReportingChartAccountDefaultRel.UnrealizedGainAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedGain
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
		DerivedUnrealizedLossAccount	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentAccount entered)
				if (ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel.UnrealizedLossAccount entered)
						return ReportingChartAccountDefaultRel.UnrealizedLossAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedLoss
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
    		else
				LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
				if (ReportingChartAccountDefaultRel.UnrealizedLossAccount entered)
					return ReportingChartAccountDefaultRel.UnrealizedLossAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedLoss
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
		DerivedTranslationGainAccount	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentAccount entered)
				if (ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel.TranslationGainAccount entered)
						return ReportingChartAccountDefaultRel.TranslationGainAccount
				else
					LocalSystemAccount = SystemAccount.TranslationGain 
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.TranslationGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
    		else
				LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
				if (ReportingChartAccountDefaultRel.TranslationGainAccount entered)
					return ReportingChartAccountDefaultRel.TranslationGainAccount
				else
					LocalSystemAccount = SystemAccount.TranslationGain 
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.TranslationGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
		DerivedTranslationLossAccount	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentAccount entered)
				if (ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel.TranslationLossAccount entered)
						return ReportingChartAccountDefaultRel.TranslationLossAccount
				else
					LocalSystemAccount = SystemAccount.TranslationLoss 
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.TranslationGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
				if (ReportingChartAccountDefaultRel.TranslationLossAccount entered)
					return ReportingChartAccountDefaultRel.TranslationLossAccount
				else
					LocalSystemAccount = SystemAccount.TranslationLoss 
					if (SystemAccountRel exists)
						return SystemAccountRel.GeneralLedgerChartAccount
					else
						LocalSystemAccount = SystemAccount.TranslationGainAndLoss
						return SystemAccountRel.GeneralLedgerChartAccount

		DerivedUnrealizedGainDescription	is a DerivedField
			type is like Description
			restricted
			LocalCurrencyAccount = NewUnrealizedGainAccount
			if (LocalCurrencyAccount exists)
				return LocalCurrencyAccount.AccountDescription
			else
				return blank
		DerivedUnrealizedLossDescription	is a DerivedField
			type is like Description
			restricted
			LocalCurrencyAccount = NewUnrealizedLossAccount
			if (LocalCurrencyAccount exists)
				return LocalCurrencyAccount.AccountDescription
			else
				return blank
		DerivedTranslationGainDescription	is a DerivedField
			type is like Description
			restricted
			LocalCurrencyAccount = NewTranslationGainAccount
			if (LocalCurrencyAccount exists)
				return LocalCurrencyAccount.AccountDescription
			else
				return blank
		DerivedTranslationLossDescription	is a DerivedField
			type is like Description
			restricted
			LocalCurrencyAccount = NewTranslationLossAccount
			if (LocalCurrencyAccount exists)
				return LocalCurrencyAccount.AccountDescription
			else
				return blank

		DerivedTranslationCode	is a DerivedField
			type is AlphaUpper 15
			restricted
    		if (UseInputValue)
    			return blank
    		else
				if (ParentAccount entered
				and ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.TranslationCode
				else
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.TranslationCode

		DerivedRevalue	is a DerivedField
			type is Boolean
			restricted
    		if (UseInputValue)
    			return false
    		else
				if (ParentAccount entered
				and ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.Revalue
				else
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.Revalue

		DerivedRequireProject	is a DerivedField
			type is Boolean
			restricted
    		if (UseInputValue)
    			return false
    		else
				if (ParentAccount entered
				and ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.RequireProject
				else
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.RequireProject

		DerivedXbrlTag	is a DerivedField
			type is Alpha 60
			restricted
    		if (UseInputValue)
    			return blank
    		else
				if (ParentAccount entered
				and ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.XbrlTag
				else
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.XbrlTag
		DerivedReportingChart	is a DerivedField
			type is AlphaUpper 15
			restricted
			if (ReportingChart entered)
				return ReportingChart
			else
				return first ReportingChartRel.ReportingChart				
        DerivedSequenceNumber   is a DerivedField
            type is AlphaRight 7
            restricted
            return DerivedAlphaSequence[2:8]
        DerivedAlphaSequence    is a DerivedField
            type is AlphaRight 8
            restricted
            return (10000000 + SequenceNumber)
		DerivedCloseToAccount				is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
    		if (UseInputValue)
    			return blank
    		else
				if (ParentAccount entered
				and ParentAccount != TopNode)
					LocalGeneralLedgerChartAccount = ParentAccount
					if (ReportingChartAccountDefaultRel.CloseToAccount entered)
						return ReportingChartAccountDefaultRel.CloseToAccount
				else
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (ReportingChartAccountDefaultRel exists)
						return ReportingChartAccountDefaultRel.CloseToAccount
		DerivedIsGainLossAccount			is a DerivedField
			type is Boolean
			restricted
    		if (UseInputValue)
    			return false
    		else
				LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
				if (ReportingChartAccountDefaultRel exists)
					return ReportingChartAccountDefaultRel.IsGainLossAccount
		DerivedIncludeInBudgetEdit is a DerivedField
			type is Boolean
			restricted
    		if (UseInputValue)
    			return false
    		else
    			return HierarchyRecordRel.IncludeInBudgetEdit
    	DerivedReportingChartFutureChanges is a DerivedField
    		type is Boolean
    		restricted
    		LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount
    		if (ReportingChartAccountDefaultRel exists)
    			return ReportingChartAccountDefaultRel.DerivedFutureChanges
    	DerivedFutureChangesAll is a DerivedField
    		type is Boolean
    		if (DerivedReportingChartFutureChanges
    		or has future changes)
    				return true
		FutureChangesLabel is a LabelField
			"FutureChanges"
		FutureChangesDisplayTag is a DerivedField
			type is MessageField
			default label is "FutureChanges"
			if (DerivedFutureChangesAll)
				return FutureChangesLabel
		ActiveLabel is a LabelField
			"Active"
		ActiveDisplayTag is a DerivedField
			type is MessageField
			if (Active)
				return ActiveLabel
		PostingAccountInSameSection is a DerivedField
			type is Boolean
			restricted
			if  (ChartType.Posting)
				if (!ContextAccount entered)
					return true
				if (ChartSection = ContextAccountRel.ChartSection)
					return true
		DescendantOfContextAccount is a DerivedField
			type is Boolean
			if (DescendantOfContextAccountShadowRel exists)
				return true

		DerivedActor				is a DerivedField
			type is like Actor
			return actor
			
		DerivedStartDateJulian 		is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			return AccountAnalysisSettingsRel.ReportingPeriod.StartDateJulian
			
		DerivedEndDateJulian		is a DerivedField
			type is like GeneralLedgerCalendarPeriod


			if (AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				return AccountAnalysisSettingsRel.ThruReportingPeriod.EndDateJulian
			else
				return AccountAnalysisSettingsRel.ReportingPeriod.EndDateJulian
							
		DerivedSummaryEntity		is a DerivedField
			type is like AccountingEntity
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				return AccountAnalysisSettingsRel.AccountingEntity
			else
				return AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitTopNodeGroup.DimensionEntity
				
		DerivedSummaryAccountingUnit is a DerivedField
			type is like AccountingUnit
			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				return AccountAnalysisSettingsRel.AccountingUnit
			else
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				return EntityNodeString
			else
				return AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitTopNodeGroup.DimensionNode			

		DerivedSummaryFinanceDimension1 is a DerivedField
			type is like FinanceDimension1
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				return AccountAnalysisSettingsRel.FinanceDimension1
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode

		DerivedSummaryFinanceDimension2 is a DerivedField
			type is like FinanceDimension2
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				return AccountAnalysisSettingsRel.FinanceDimension2
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode
				
		DerivedSummaryFinanceDimension3 is a DerivedField
			type is like FinanceDimension3
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				return AccountAnalysisSettingsRel.FinanceDimension3
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode

		DerivedSummaryFinanceDimension4 is a DerivedField
			type is like FinanceDimension4
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				return AccountAnalysisSettingsRel.FinanceDimension4
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode

		DerivedSummaryFinanceDimension5 is a DerivedField
			type is like FinanceDimension5
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				return AccountAnalysisSettingsRel.FinanceDimension5
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode												

		DerivedSummaryFinanceDimension6 is a DerivedField
			type is like FinanceDimension6
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				return AccountAnalysisSettingsRel.FinanceDimension6
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode
				
		DerivedSummaryFinanceDimension7 is a DerivedField
			type is like FinanceDimension7
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				return AccountAnalysisSettingsRel.FinanceDimension7
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode
								
		DerivedSummaryFinanceDimension8 is a DerivedField
			type is like FinanceDimension8
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				return AccountAnalysisSettingsRel.FinanceDimension8
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode
				
		DerivedSummaryFinanceDimension9 is a DerivedField
			type is like FinanceDimension9
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				return AccountAnalysisSettingsRel.FinanceDimension9
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode

		DerivedSummaryFinanceDimension10 is a DerivedField
			type is like FinanceDimension10
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				return AccountAnalysisSettingsRel.FinanceDimension10
			else
				return AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode

		DerivedSummaryProject is a DerivedField
			type is like Project
			if (AccountAnalysisSettingsRel.Project entered)
				return AccountAnalysisSettingsRel.Project
			else
				return AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode
																											
		EntityNodeString			is a StringField
			type is AlphaUpper 25
			restricted
			AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.StructureSequence
			"_"
			AccountAnalysisSettingsRel.AccountingEntity
			"_ENTITY"
		
		DerivedBeginningBalancePeriod is a StringField
			type is AlphaUpper 7
			DerivedBeginingBalanceYear
			"000"

		DerivedBeginingBalanceYear is a DerivedField
			type is Year
			if (AccountAnalysisSettings entered)
				if (AccountAnalysisSettingsRel.Year entered)
					return AccountAnalysisSettingsRel.Year
				else
					return AccountAnalysisSettingsRel.ReportingPeriod.Year

		DerivedPeriodAmountLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>Activity"

		DerivedEndingBalanceLabel is a LabelField
			"<DerivedEndingBalancePrefix>EndingBalance"


		DerivedPeriodActualLTDLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>LTDActual"

		DerivedPeriodActualLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>Actual"					

		DerivedPeriodBudgetAmountLTDLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>LTDBudget"

		DerivedPeriodBudgetAmountLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>Budget"				
			
		DerivedPeriodEncumbranceAmountLTDLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>LTDEncumbrance"

		DerivedPeriodEncumbranceAmountLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>Encumbrance"				

		DerivedPeriodCommitmentAmountLTDLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>LTDCommitment"

		DerivedPeriodCommitmentAmountLabel is a LabelField
			"<DerivedRangeOrPeriodPrefix>Commitment"	

		SummaryChartAccountTitle is a LabelField
			"Chart<FinanceEnterpriseGroup.AccountLabel>_<ReportingChart>_<AccountDescription>"

		SummaryChartAccountTitleNoRecord is a LabelField
			"CreateChartAccount"

		SummaryChartAccountFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return SummaryChartAccountTitle
			else
				return SummaryChartAccountTitleNoRecord			
			
		TotalObligations is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			return  (DerivedEndingActualBalance + DerivedEndingBalanceEncumbrance + DerivedEndingBalanceCommitment)				
			
		DerivedAccountBudgetVariance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals			
			return (DerivedEndingBudgetBalance - TotalObligations)

		AccountBudgetVariance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals	

			return DerivedAccountBudgetVariance


		DerivedAccountBudgetVariancePercent is a DerivedField
			type is Percent 20.2
			return (AccountBudgetVariance / DerivedEndingBudgetBalance)
			
		AccountBudgetVariancePercent is a DerivedField
			type is Percent 20.2
			if (DerivedEndingBudgetBalance not entered)

				return blank	
			else
			if (DerivedEndingBudgetBalance entered	
			and TotalObligations not entered)				

				return 100%	
			else	
				return DerivedAccountBudgetVariancePercent
			
		DerivedRangeOrPeriodPrefix is a DerivedField
			type is Alpha 30
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				return AccountAnalysisSettingsRel.ReportingPeriod.DisplayPeriod //<AccountAnalysisSettingsRel.ReportingCurrency>"
			
		DerivedEndingBalancePrefix is a DerivedField
			type is Alpha 30	
			if (AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				return AccountAnalysisSettingsRel.ThruReportingPeriod.DisplayPeriod
			else
				return AccountAnalysisSettingsRel.ReportingPeriod.DisplayPeriod
											
		DerivedYTDPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			
			if (AccountAnalysisSettings entered)
				if (AccountAnalysisSettingsRel.ReportingPeriod.PeriodType.Year
				or ((AccountAnalysisSettingsRel.ReportingPeriod.PeriodType.Quarter
				and  AccountAnalysisSettingsRel.ReportingPeriod.Quarter.Quarter1)
				or  (AccountAnalysisSettingsRel.ReportingPeriod.PeriodType.Month
				and  AccountAnalysisSettingsRel.ReportingPeriod.Month.Period1)
				or  (AccountAnalysisSettingsRel.ReportingPeriod.PeriodType.Week
				and  AccountAnalysisSettingsRel.ReportingPeriod.Week.Week1)))
					if (ChartSection.IncomeStatement
					and AccountAnalysisSettingsRel.UseLTDBeginningBalance)
						return (last PreviousPeriodRel.GeneralLedgerCalendarPeriod + "_LTD")
					else
						return DerivedBeginningBalancePeriod
				else
					if (ChartSection.IncomeStatement
					and AccountAnalysisSettingsRel.UseLTDBeginningBalance)
						return (last PreviousPeriodRel.GeneralLedgerCalendarPeriod + "_LTD")
					else
						return (last PreviousPeriodRel.GeneralLedgerCalendarPeriod + "_YTD")
					
		DerivedNextYearYTDPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			LocalNextYear 	   = TransientYTDPeriod.Year
			LocalNextYear 	   += 1
			LocalNextYearAlpha = LocalNextYear
			return LocalNextYearAlpha + "000"
						
		TotalsDetailsForCubeMap is a DerivedField
			type is LPLText

			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure

			TotalsDetailsForCubeMap = "related.FinanceEnterpriseGroup = FinanceEnterpriseGroup\n"					

			TotalsDetailsForCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"			
			
			if (ChartType.Posting)
				TotalsDetailsForCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			else
				TotalsDetailsForCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount\n"
			












		ActualCubeMap is a DerivedField
			type is LPLText

			
			ActualCubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = LocalReportingPeriod\n"							
			
			ActualCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
		    ActualCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"// and children.Scenario"			
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				ActualCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				ActualCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				ActualCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				ActualCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				ActualCubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				ActualCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				ActualCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				ActualCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				ActualCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				ActualCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				ActualCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				ActualCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				ActualCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				ActualCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				ActualCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				ActualCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				ActualCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				ActualCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				ActualCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				ActualCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				ActualCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				ActualCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				ActualCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				ActualCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				ActualCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				ActualCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				ActualCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"

		ActualYTDCubeMap is a DerivedField
			type is LPLText

			ActualYTDCubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = TransientYTDPeriod\n"
			ActualYTDCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
		    ActualYTDCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"// and children.Scenario"			
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				ActualYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				ActualYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				ActualYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				ActualYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				ActualYTDCubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				ActualYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				ActualYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				ActualYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				ActualYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				ActualYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				ActualYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				ActualYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				ActualYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				ActualYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				ActualYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				ActualYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				ActualYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				ActualYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"



		NextYearActualYTDCubeMap is a DerivedField
			type is LPLText

			NextYearActualYTDCubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = TransientNextYearYTDPeriod\n"
			NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			NextYearActualYTDCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"// and children.Scenario"
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				NextYearActualYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				NextYearActualYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				NextYearActualYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				NextYearActualYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"
				
		BudgetCubeMap is a DerivedField
			type is LPLText

			BudgetCubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = LocalReportingPeriod\n"							
			BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
		    BudgetCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"			
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				BudgetCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				BudgetCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				BudgetCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				BudgetCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				BudgetCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				BudgetCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				BudgetCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				BudgetCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				BudgetCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				BudgetCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				BudgetCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				BudgetCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				BudgetCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				BudgetCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				BudgetCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				BudgetCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				BudgetCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				BudgetCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				BudgetCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				BudgetCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				BudgetCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				BudgetCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"



		BudgetYTDCubeMap is a DerivedField
			type is LPLText

			BudgetYTDCubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = TransientYTDPeriod\n"
			BudgetYTDCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
		    BudgetYTDCubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"			
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				BudgetYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				BudgetYTDCubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				BudgetYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				BudgetYTDCubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				BudgetYTDCubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				BudgetYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				BudgetYTDCubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				BudgetYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				BudgetYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				BudgetYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				BudgetYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				BudgetYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				BudgetYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				BudgetYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				BudgetYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				BudgetYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				BudgetYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				BudgetYTDCubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"



		ActualBCECubeMap is a DerivedField
			type is LPLText

			ActualBCECubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = LocalReportingPeriod\n"							
			ActualBCECubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				ActualBCECubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				ActualBCECubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				ActualBCECubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				ActualBCECubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				ActualBCECubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				ActualBCECubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				ActualBCECubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				ActualBCECubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				ActualBCECubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				ActualBCECubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				ActualBCECubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				ActualBCECubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				ActualBCECubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				ActualBCECubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				ActualBCECubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				ActualBCECubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				ActualBCECubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				ActualBCECubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"



		ActualYTDBCECubeMap is a DerivedField
			type is LPLText

			ActualYTDBCECubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = TransientYTDPeriod\n"
			ActualYTDBCECubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount\n"
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				ActualYTDBCECubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
				ActualYTDBCECubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				ActualYTDBCECubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)



				ActualYTDBCECubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				ActualYTDBCECubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				ActualYTDBCECubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
				ActualYTDBCECubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				ActualYTDBCECubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
			if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
				ActualYTDBCECubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"



		DynamicTotalsDrillRelCondition is a DerivedField
			type is LPLText
			is condition for "GeneralLedgerTotal"
			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure
			
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and !AccountAnalysisSettingsRel.AccountingEntity entered)
				if (LocalAccountingUnitStructure.NotInDimensionStructureRel	exists)
					LocalNotAllAcctUnitsInStructure = true
			
			DynamicTotalsDrillRelCondition = "("

			DynamicTotalsDrillRelCondition += "(GeneralLedgerTotalActualsRel.FinanceEnterpriseGroup = FinanceEnterpriseGroup)"					


			if (AccountAnalysisSettingsRel.Scenario.CommitmentType.Rollup
			or  AccountAnalysisSettingsRel.Scenario.CommitmentType.Budget)
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.Scenario = any ScenarioChildrensRel.Scenario)"
			else	
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.Scenario = AccountAnalysisSettingsRel.Scenario)"
										
			if (AccountAnalysisSettingsRel.System entered)
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System)"

			if (ChartType.Posting)
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount)"
			else
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount)"
			
			DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Ledger = any AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode.ChildrenRel.Ledger)"
			
			DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.EntityYearPeriod>=\""
			DynamicTotalsDrillRelCondition += DerivedStartDateJulian
			DynamicTotalsDrillRelCondition += "\")"
			DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.EntityYearPeriod<=\""
			DynamicTotalsDrillRelCondition += DerivedEndDateJulian
			DynamicTotalsDrillRelCondition += "\")"
			DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.NotBeginningBalancePeriod"
			DynamicTotalsDrillRelCondition += ")"
						
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.AccountingEntity=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.AccountingEntity
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.AccountingEntity = any AccountingEntityDirectShadowRel.AccountingEntity)"
			else
			if (!FinanceEnterpriseGroup.AccountingUnitLabelExists
			or  (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and  !LocalNotAllAcctUnitsInStructure)) 
				DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				if (AccountAnalysisSettingsRel.AccountingUnit.AccountingUnitType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.AccountingUnit
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
			else
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists)
				if (AccountAnalysisSettingsRel.AccountingEntity entered)
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit = blank))" 
				else	
				if (LocalNotAllAcctUnitsInStructure) 
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit = blank))"					




















					
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension1.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension1=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension1
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"
			else
			if (FinanceEnterpriseGroup.Dimension1LabelExists)
				if (LocalFinanceDimension1Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension1 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension2.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension2=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension2
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"
			else
			if (FinanceEnterpriseGroup.Dimension2LabelExists)
				if (LocalFinanceDimension2Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension2 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension3.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension3=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension3
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"
			else
			if (FinanceEnterpriseGroup.Dimension3LabelExists)
				if (LocalFinanceDimension3Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension3 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension4.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension4=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension4
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"
			else
			if (FinanceEnterpriseGroup.Dimension4LabelExists)
				if (LocalFinanceDimension4Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension4 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension5.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension5=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension5
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"
			else
			if (FinanceEnterpriseGroup.Dimension5LabelExists)
				if (LocalFinanceDimension5Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension5 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension6.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension6=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension6
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"
			else
			if (FinanceEnterpriseGroup.Dimension6LabelExists)
				if (LocalFinanceDimension6Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension6 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension7.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension7=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension7
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"
			else
			if (FinanceEnterpriseGroup.Dimension7LabelExists)
				if (LocalFinanceDimension7Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension7 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension8.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension8=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension8
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"
			else
			if (FinanceEnterpriseGroup.Dimension8LabelExists)
				if (LocalFinanceDimension8Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension8 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension9.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension9=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension9
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"
			else
			if (FinanceEnterpriseGroup.Dimension9LabelExists)
				if (LocalFinanceDimension9Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension9 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension10.DimensionType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension10=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension10
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"
			else
			if (FinanceEnterpriseGroup.Dimension10LabelExists)
				if (LocalFinanceDimension10Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.FinanceDimension10 = blank))"
					
			if (AccountAnalysisSettingsRel.Project entered)
				if (AccountAnalysisSettingsRel.Project.ProjectType.Posting)
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Project=\""
					DynamicTotalsDrillRelCondition += AccountAnalysisSettingsRel.Project
					DynamicTotalsDrillRelCondition += "\")"
				else
					DynamicTotalsDrillRelCondition += " and (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"
			else
			if (FinanceEnterpriseGroup.ProjectLabelExists)
				if (LocalProjectStructure.NotInProjectStructureRel exists) 
					DynamicTotalsDrillRelCondition += " and ((GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"	
					DynamicTotalsDrillRelCondition += " or (GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Project = blank))"
					


			DynamicTotalsDrillRelCondition += ")"

		DynamicTransactionsDrillRelCondition is a DerivedField
			type is LPLText
			is condition for "GeneralLedgerTransaction"
			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure
			
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and !AccountAnalysisSettingsRel.AccountingEntity entered)
				if (LocalAccountingUnitStructure.NotInDimensionStructureRel	exists)
					LocalNotAllAcctUnitsInStructure = true
			
			DynamicTransactionsDrillRelCondition = "("

			DynamicTransactionsDrillRelCondition += "(GeneralLedgerTransactionActualsRel.FinanceEnterpriseGroup = FinanceEnterpriseGroup)"	

			if (AccountAnalysisSettingsRel.Scenario.CommitmentType.Rollup
			or  AccountAnalysisSettingsRel.Scenario.CommitmentType.Budget)
				DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.GeneralLedgerTotalRel.Scenario = any ScenarioChildrensRel.Scenario)"
			else	
				DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.GeneralLedgerTotalRel.Scenario = AccountAnalysisSettingsRel.Scenario)"

			if (AccountAnalysisSettingsRel.System entered)
				DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.System = AccountAnalysisSettingsRel.System)"

			if (ChartType.Posting)
				DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount)"
			else
				DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount)"

			DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.Ledger = any AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode.ChildrenRel.Ledger)"
			
			DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.GeneralLedgerCalendarPeriod>=\""
			DynamicTransactionsDrillRelCondition += DerivedStartDateJulian
			DynamicTransactionsDrillRelCondition += "\")"
			DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.GeneralLedgerCalendarPeriod<=\""
			DynamicTransactionsDrillRelCondition += DerivedEndDateJulian
			DynamicTransactionsDrillRelCondition += "\")"
			DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.NotBeginningBalancePeriod"
			DynamicTransactionsDrillRelCondition += ")"
			
			if (AccountAnalysisSettingsRel.AccountingEntity entered)
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.AccountingEntity=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.AccountingEntity
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.AccountingEntity = any AccountingEntityDirectShadowRel.AccountingEntity)"
			else
				if (!FinanceEnterpriseGroup.AccountingUnitLabelExists
				or  (FinanceEnterpriseGroup.AccountingUnitLabelExists
				and  !LocalNotAllAcctUnitsInStructure))
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				if (AccountAnalysisSettingsRel.AccountingUnit.AccountingUnitType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.AccountingUnit
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
			else
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists)
				if (AccountAnalysisSettingsRel.AccountingEntity entered)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit = blank))" 
				else	
				if (LocalNotAllAcctUnitsInStructure)		
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.AccountingUnit = blank))"					
		
			if (AccountAnalysisSettingsRel.Project entered)
				if (AccountAnalysisSettingsRel.Project.ProjectType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.Project=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.Project
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.Project = any ProjectShadowRel.Project)"
			else
			if (FinanceEnterpriseGroup.ProjectLabelExists)
				if (LocalProjectStructure.NotInProjectStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.Project = any ProjectShadowRel.Project)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.Project = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension1.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension1=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension1
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"
			else
			if (FinanceEnterpriseGroup.Dimension1LabelExists)
				if (LocalFinanceDimension1Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension1 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension2.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension2=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension2
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"
			else
			if (FinanceEnterpriseGroup.Dimension2LabelExists)
				if (LocalFinanceDimension2Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension2 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension3.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension3=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension3
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"
			else
			if (FinanceEnterpriseGroup.Dimension3LabelExists)
				if (LocalFinanceDimension3Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension3 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension4.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension4=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension4
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"
			else
			if (FinanceEnterpriseGroup.Dimension4LabelExists)
				if (LocalFinanceDimension4Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension4 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension5.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension5=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension5
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"
			else
			if (FinanceEnterpriseGroup.Dimension5LabelExists)
				if (LocalFinanceDimension5Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension5 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension6.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension6=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension6
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"
			else
			if (FinanceEnterpriseGroup.Dimension6LabelExists)
				if (LocalFinanceDimension6Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension6 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension7.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension7=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension7
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"
			else
			if (FinanceEnterpriseGroup.Dimension7LabelExists)
				if (LocalFinanceDimension7Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension7 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension8.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension8=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension8
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"
			else
			if (FinanceEnterpriseGroup.Dimension8LabelExists)
				if (LocalFinanceDimension8Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension8 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension9.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension9=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension9
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"
			else
			if (FinanceEnterpriseGroup.Dimension9LabelExists)
				if (LocalFinanceDimension9Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension9 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension10.DimensionType.Posting)
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension10=\""
					DynamicTransactionsDrillRelCondition += AccountAnalysisSettingsRel.FinanceDimension10
					DynamicTransactionsDrillRelCondition += "\")"
				else
					DynamicTransactionsDrillRelCondition += " and (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"
			else
			if (FinanceEnterpriseGroup.Dimension10LabelExists)
				if (LocalFinanceDimension10Structure.NotInDimensionStructureRel exists)
					DynamicTransactionsDrillRelCondition += " and ((GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"	
					DynamicTransactionsDrillRelCondition += " or (GeneralLedgerTransactionActualsRel.FinanceCodeBlock.FinanceDimension10 = blank))"

			DynamicTransactionsDrillRelCondition += ")"

		
		DynamicTotalsDrillRelConditionTwo is a DerivedField
			type is LPLText
			is condition for "GeneralLedgerTotal"
			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure

			if (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and !AccountAnalysisSettingsRel.AccountingEntity entered)
				if (LocalAccountingUnitStructure.NotInDimensionStructureRel	exists)
					LocalNotAllAcctUnitsInStructure = true
			
			DynamicTotalsDrillRelConditionTwo = "("

			DynamicTotalsDrillRelConditionTwo += "(GeneralLedgerTotalActualsTwoRel.FinanceEnterpriseGroup = FinanceEnterpriseGroup)"					

			DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.Scenario = FinanceEnterpriseGroup.ActualsScenario)"			
			
			if (AccountAnalysisSettingsRel.System entered)
				DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System)"

			if (ChartType.Posting)
				DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount)"
			else
				DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount)"
			
			DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.Ledger = any AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode.ChildrenRel.Ledger)"
			
			DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.EntityYearPeriod>=\""
			DynamicTotalsDrillRelConditionTwo += DerivedStartDateJulian
			DynamicTotalsDrillRelConditionTwo += "\")"
			DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.EntityYearPeriod<=\""
			DynamicTotalsDrillRelConditionTwo += DerivedEndDateJulian
			DynamicTotalsDrillRelConditionTwo += "\")"
			DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.NotBeginningBalancePeriod"
			DynamicTotalsDrillRelConditionTwo += ")"
						
			if (AccountAnalysisSettingsRel.AccountingEntity entered)				
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.AccountingEntity=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.AccountingEntity
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.AccountingEntity = any AccountingEntityDirectShadowRel.AccountingEntity)"
			else
			if (!FinanceEnterpriseGroup.AccountingUnitLabelExists
			or  (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and  !LocalNotAllAcctUnitsInStructure)) 
				DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				if (AccountAnalysisSettingsRel.AccountingUnit.AccountingUnitType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.AccountingUnit
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
			else
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists)
				if (AccountAnalysisSettingsRel.AccountingEntity entered)
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit = blank))" 
				else	
				if (LocalNotAllAcctUnitsInStructure) 
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.AccountingUnit = blank))"					




















					
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension1.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension1=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension1
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"
			else
			if (FinanceEnterpriseGroup.Dimension1LabelExists)
				if (LocalFinanceDimension1Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension1 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension2.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension2=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension2
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"
			else
			if (FinanceEnterpriseGroup.Dimension2LabelExists)
				if (LocalFinanceDimension2Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension2 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension3.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension3=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension3
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"
			else
			if (FinanceEnterpriseGroup.Dimension3LabelExists)
				if (LocalFinanceDimension3Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension3 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension4.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension4=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension4
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"
			else
			if (FinanceEnterpriseGroup.Dimension4LabelExists)
				if (LocalFinanceDimension4Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension4 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension5.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension5=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension5
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"
			else
			if (FinanceEnterpriseGroup.Dimension5LabelExists)
				if (LocalFinanceDimension5Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension5 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension6.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension6=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension6
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"
			else
			if (FinanceEnterpriseGroup.Dimension6LabelExists)
				if (LocalFinanceDimension6Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension6 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension7.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension7=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension7
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"
			else
			if (FinanceEnterpriseGroup.Dimension7LabelExists)
				if (LocalFinanceDimension7Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension7 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension8.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension8=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension8
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"
			else
			if (FinanceEnterpriseGroup.Dimension8LabelExists)
				if (LocalFinanceDimension8Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension8 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension9.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension9=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension9
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"
			else
			if (FinanceEnterpriseGroup.Dimension9LabelExists)
				if (LocalFinanceDimension9Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension9 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension10.DimensionType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension10=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.FinanceDimension10
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"
			else
			if (FinanceEnterpriseGroup.Dimension10LabelExists)
				if (LocalFinanceDimension10Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.FinanceDimension10 = blank))"
					
			if (AccountAnalysisSettingsRel.Project entered)
				if (AccountAnalysisSettingsRel.Project.ProjectType.Posting)
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.Project=\""
					DynamicTotalsDrillRelConditionTwo += AccountAnalysisSettingsRel.Project
					DynamicTotalsDrillRelConditionTwo += "\")"
				else
					DynamicTotalsDrillRelConditionTwo += " and (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"
			else
			if (FinanceEnterpriseGroup.ProjectLabelExists)
				if (LocalProjectStructure.NotInProjectStructureRel exists) 
					DynamicTotalsDrillRelConditionTwo += " and ((GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"	
					DynamicTotalsDrillRelConditionTwo += " or (GeneralLedgerTotalActualsTwoRel.GeneralLedgerTotal.Project = blank))"
					
			DynamicTotalsDrillRelConditionTwo += ")"	

		DynamicTotalsDrillRelConditionEncumbrance is a DerivedField
			type is LPLText
			is condition for "GeneralLedgerTotal"
			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure

			if (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and !AccountAnalysisSettingsRel.AccountingEntity entered)
				if (LocalAccountingUnitStructure.NotInDimensionStructureRel	exists)
					LocalNotAllAcctUnitsInStructure = true
			
			DynamicTotalsDrillRelConditionEncumbrance = "("

			DynamicTotalsDrillRelConditionEncumbrance += "(GeneralLedgerTotalEncumbranceRel.FinanceEnterpriseGroup = FinanceEnterpriseGroup)"					

			DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.Scenario = FinanceEnterpriseGroup.EncumbrancesScenario)"			
			
			if (AccountAnalysisSettingsRel.System entered)
				DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System)"
				
			if (ChartType.Posting)
				DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount)"
			else
				DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount)"
			
			DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.Ledger = any AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode.ChildrenRel.Ledger)"
			
			DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.EntityYearPeriod>=\""
			DynamicTotalsDrillRelConditionEncumbrance += DerivedStartDateJulian
			DynamicTotalsDrillRelConditionEncumbrance += "\")"
			DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.EntityYearPeriod<=\""
			DynamicTotalsDrillRelConditionEncumbrance += DerivedEndDateJulian
			DynamicTotalsDrillRelConditionEncumbrance += "\")"
			DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.NotBeginningBalancePeriod"
			DynamicTotalsDrillRelConditionEncumbrance += ")"
						
			if (AccountAnalysisSettingsRel.AccountingEntity entered)				
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.AccountingEntity=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.AccountingEntity
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.AccountingEntity = any AccountingEntityDirectShadowRel.AccountingEntity)"
			else
			if (!FinanceEnterpriseGroup.AccountingUnitLabelExists
			or  (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and  !LocalNotAllAcctUnitsInStructure)) 
				DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				if (AccountAnalysisSettingsRel.AccountingUnit.AccountingUnitType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.AccountingUnit
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
			else
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists)
				if (AccountAnalysisSettingsRel.AccountingEntity entered)
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit = blank))" 
				else	
				if (LocalNotAllAcctUnitsInStructure) 
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.AccountingUnit = blank))"					





















					
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension1.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension1=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension1
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"
			else
			if (FinanceEnterpriseGroup.Dimension1LabelExists)
				if (LocalFinanceDimension1Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension1 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension2.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension2=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension2
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"
			else
			if (FinanceEnterpriseGroup.Dimension2LabelExists)
				if (LocalFinanceDimension2Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension2 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension3.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension3=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension3
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"
			else
			if (FinanceEnterpriseGroup.Dimension3LabelExists)
				if (LocalFinanceDimension3Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension3 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension4.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension4=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension4
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"
			else
			if (FinanceEnterpriseGroup.Dimension4LabelExists)
				if (LocalFinanceDimension4Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension4 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension5.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension5=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension5
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"
			else
			if (FinanceEnterpriseGroup.Dimension5LabelExists)
				if (LocalFinanceDimension5Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension5 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension6.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension6=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension6
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"
			else
			if (FinanceEnterpriseGroup.Dimension6LabelExists)
				if (LocalFinanceDimension6Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension6 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension7.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension7=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension7
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"
			else
			if (FinanceEnterpriseGroup.Dimension7LabelExists)
				if (LocalFinanceDimension7Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension7 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension8.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension8=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension8
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"
			else
			if (FinanceEnterpriseGroup.Dimension8LabelExists)
				if (LocalFinanceDimension8Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension8 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension9.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension9=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension9
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"
			else
			if (FinanceEnterpriseGroup.Dimension9LabelExists)
				if (LocalFinanceDimension9Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension9 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension10.DimensionType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension10=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.FinanceDimension10
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"
			else
			if (FinanceEnterpriseGroup.Dimension10LabelExists)
				if (LocalFinanceDimension10Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.FinanceDimension10 = blank))"
					
			if (AccountAnalysisSettingsRel.Project entered)
				if (AccountAnalysisSettingsRel.Project.ProjectType.Posting)
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.Project=\""
					DynamicTotalsDrillRelConditionEncumbrance += AccountAnalysisSettingsRel.Project
					DynamicTotalsDrillRelConditionEncumbrance += "\")"
				else
					DynamicTotalsDrillRelConditionEncumbrance += " and (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"
			else
			if (FinanceEnterpriseGroup.ProjectLabelExists)
				if (LocalProjectStructure.NotInProjectStructureRel exists) 
					DynamicTotalsDrillRelConditionEncumbrance += " and ((GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"	
					DynamicTotalsDrillRelConditionEncumbrance += " or (GeneralLedgerTotalEncumbranceRel.GeneralLedgerTotal.Project = blank))"
					
			DynamicTotalsDrillRelConditionEncumbrance += ")"	

		DynamicTotalsDrillRelConditionCommitment is a DerivedField
			type is LPLText
			is condition for "GeneralLedgerTotal"
			LocalReportingBasis 			 = AccountAnalysisSettingsRel.ReportingBasis
			LocalAccountingUnitStructure 	 = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure
			LocalFinanceDimension1Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1Structure
			LocalFinanceDimension2Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2Structure
			LocalFinanceDimension3Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3Structure
			LocalFinanceDimension4Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4Structure
			LocalFinanceDimension5Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5Structure
			LocalFinanceDimension6Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6Structure
			LocalFinanceDimension7Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7Structure
			LocalFinanceDimension8Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8Structure
			LocalFinanceDimension9Structure  = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9Structure
			LocalFinanceDimension10Structure = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10Structure
			LocalProjectStructure			 = AccountAnalysisSettingsRel.ReportingBasis.ProjectStructure

			if (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and !AccountAnalysisSettingsRel.AccountingEntity entered)
				if (LocalAccountingUnitStructure.NotInDimensionStructureRel	exists)
					LocalNotAllAcctUnitsInStructure = true
			
			DynamicTotalsDrillRelConditionCommitment = "("

			DynamicTotalsDrillRelConditionCommitment += "(GeneralLedgerTotalCommitmentRel.FinanceEnterpriseGroup = FinanceEnterpriseGroup)"					

			DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.Scenario = FinanceEnterpriseGroup.CommitmentsScenario)"			
			
			if (AccountAnalysisSettingsRel.System entered)
				DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System)"
				
			if (ChartType.Posting)
				DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccount)"
			else
				DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.GeneralLedgerChartAccount = any SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount)"
			
			DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.Ledger = any AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode.ChildrenRel.Ledger)"
			
			DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.EntityYearPeriod>=\""
			DynamicTotalsDrillRelConditionCommitment += DerivedStartDateJulian
			DynamicTotalsDrillRelConditionCommitment += "\")"
			DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.EntityYearPeriod<=\""
			DynamicTotalsDrillRelConditionCommitment += DerivedEndDateJulian
			DynamicTotalsDrillRelConditionCommitment += "\")"
			DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.NotBeginningBalancePeriod"
			DynamicTotalsDrillRelConditionCommitment += ")"
						
			if (AccountAnalysisSettingsRel.AccountingEntity entered)				
				if (AccountAnalysisSettingsRel.AccountingEntity.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.AccountingEntity=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.AccountingEntity
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.AccountingEntity = any AccountingEntityDirectShadowRel.AccountingEntity)"
			else
			if (!FinanceEnterpriseGroup.AccountingUnitLabelExists
			or  (FinanceEnterpriseGroup.AccountingUnitLabelExists
			and  !LocalNotAllAcctUnitsInStructure)) 
				DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				if (AccountAnalysisSettingsRel.AccountingUnit.AccountingUnitType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.AccountingUnit
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
			else
			if (FinanceEnterpriseGroup.AccountingUnitLabelExists)
				if (AccountAnalysisSettingsRel.AccountingEntity entered)
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit = blank))" 
				else	
				if (LocalNotAllAcctUnitsInStructure) 
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.AccountingEntity = any AccountingEntityTopNodeShadowRel.AccountingEntity)"

					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit = any AccountingUnitShadowRel.AccountingUnit)"
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.AccountingUnit = blank))"					




















					
			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension1.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension1=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension1
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"
			else
			if (FinanceEnterpriseGroup.Dimension1LabelExists)
				if (LocalFinanceDimension1Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension1 = any FinanceDimension1ShadowRel.FinanceDimension1)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension1 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension2.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension2=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension2
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"
			else
			if (FinanceEnterpriseGroup.Dimension2LabelExists)
				if (LocalFinanceDimension2Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension2 = any FinanceDimension2ShadowRel.FinanceDimension2)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension2 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension3.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension3=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension3
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"
			else
			if (FinanceEnterpriseGroup.Dimension3LabelExists)
				if (LocalFinanceDimension3Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension3 = any FinanceDimension3ShadowRel.FinanceDimension3)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension3 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension4.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension4=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension4
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"
			else
			if (FinanceEnterpriseGroup.Dimension4LabelExists)
				if (LocalFinanceDimension4Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension4 = any FinanceDimension4ShadowRel.FinanceDimension4)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension4 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension5.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension5=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension5
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"
			else
			if (FinanceEnterpriseGroup.Dimension5LabelExists)
				if (LocalFinanceDimension5Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension5 = any FinanceDimension5ShadowRel.FinanceDimension5)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension5 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension6.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension6=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension6
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"
			else
			if (FinanceEnterpriseGroup.Dimension6LabelExists)
				if (LocalFinanceDimension6Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension6 = any FinanceDimension6ShadowRel.FinanceDimension6)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension6 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension7.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension7=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension7
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"
			else
			if (FinanceEnterpriseGroup.Dimension7LabelExists)
				if (LocalFinanceDimension7Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension7 = any FinanceDimension7ShadowRel.FinanceDimension7)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension7 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension8.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension8=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension8
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"
			else
			if (FinanceEnterpriseGroup.Dimension8LabelExists)
				if (LocalFinanceDimension8Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension8 = any FinanceDimension8ShadowRel.FinanceDimension8)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension8 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension9.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension9=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension9
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"
			else
			if (FinanceEnterpriseGroup.Dimension9LabelExists)
				if (LocalFinanceDimension9Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension9 = any FinanceDimension9ShadowRel.FinanceDimension9)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension9 = blank))"
					
			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				if (AccountAnalysisSettingsRel.FinanceDimension10.DimensionType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension10=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.FinanceDimension10
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"
			else
			if (FinanceEnterpriseGroup.Dimension10LabelExists)
				if (LocalFinanceDimension10Structure.NotInDimensionStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.FinanceDimension10 = any FinanceDimension10ShadowRel.FinanceDimension10)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.FinanceDimension10 = blank))"
					
			if (AccountAnalysisSettingsRel.Project entered)
				if (AccountAnalysisSettingsRel.Project.ProjectType.Posting)
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.Project=\""
					DynamicTotalsDrillRelConditionCommitment += AccountAnalysisSettingsRel.Project
					DynamicTotalsDrillRelConditionCommitment += "\")"
				else
					DynamicTotalsDrillRelConditionCommitment += " and (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"
			else
			if (FinanceEnterpriseGroup.ProjectLabelExists)
				if (LocalProjectStructure.NotInProjectStructureRel exists) 
					DynamicTotalsDrillRelConditionCommitment += " and ((GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.Project = any ProjectShadowRel.Project)"	
					DynamicTotalsDrillRelConditionCommitment += " or (GeneralLedgerTotalCommitmentRel.GeneralLedgerTotal.Project = blank))"
					
			DynamicTotalsDrillRelConditionCommitment += ")"	
														
		DynamicMeasure is a DerivedField
			type is LPLText
			restricted
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report1)
				DynamicMeasure = "NetReportAmount1"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report2)	
				DynamicMeasure = "NetReportAmount2"					
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report3)
				DynamicMeasure = "NetReportAmount3"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report4)
				DynamicMeasure = "NetReportAmount4"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report5)
				DynamicMeasure = "NetReportAmount5"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Functional)
				DynamicMeasure = "NetFunctionalAmount"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate)
				DynamicMeasure = "NetAlternateAmount"	
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate2)
				DynamicMeasure = "NetAlternateAmount2"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate3)
				DynamicMeasure = "NetAlternateAmount3"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Units)
				DynamicMeasure = "NetUnitsAmount"	
							
		AccountActualAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalActualCalculated)
				return LocalActualPeriodAmount
			LocalActualCalculated = true
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount1
				else  			
				if (DynamicMeasure = "NetReportAmount2")
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount2
				else						
				if (DynamicMeasure = "NetReportAmount3")
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount3
				else										
				if (DynamicMeasure = "NetReportAmount4")
					LocalActualPeriodAmount	= AccountActualRel.NetReportAmount4
				else								
				if (DynamicMeasure = "NetReportAmount5")
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalActualPeriodAmount = AccountActualRel.NetFunctionalAmount 
				else
				if (DynamicMeasure = "NetAlternateAmount")
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount
				else
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount2 
				else	
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount3
				else	
				if (DynamicMeasure = "NetUnitsAmount")
					LocalActualPeriodAmount = AccountActualRel.NetUnitsAmount	
			else
				if (DynamicMeasure = "NetReportAmount1")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetReportAmount1
				else   			
				if (DynamicMeasure = "NetReportAmount2")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount2
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetReportAmount2
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetReportAmount2					
				else
				if (DynamicMeasure = "NetReportAmount3")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount3
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetReportAmount3
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetReportAmount3										
				else
				if (DynamicMeasure = "NetReportAmount4")	
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount4
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetReportAmount4
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetReportAmount4						
				else
				if (DynamicMeasure = "NetReportAmount5")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetReportAmount5
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetReportAmount5
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetFunctionalAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetAlternateAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetAlternateAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount2
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetAlternateAmount2
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetAlternateAmount2
				else				
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetAlternateAmount3
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetAlternateAmount3
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetAlternateAmount3
				else				
				if (DynamicMeasure = "NetUnitsAmount")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalActualPeriodAmount = AccountActualRel.NetUnitsAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalActualPeriodAmount += AccountActualRel.NetUnitsAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalActualPeriodAmount -= AccountActualRel.NetUnitsAmount
			
			return LocalActualPeriodAmount

		AccountActualDebitAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if(AccountAnalysisSettingsRel.DetailTrialBalance)
				return AccountDebitAmount
			else
				if (AccountActualAmount >= 0)
					return AccountActualAmount
				else
					return blank

		AccountActualCreditAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if(AccountAnalysisSettingsRel.DetailTrialBalance)
				return AccountCreditAmount
			else
				if (AccountActualAmount < 0)
					return AccountActualAmount
				else
					return blank

		DynamicMeasures is a DerivedField
			type is LPLText
			restricted
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report1)
				DynamicMeasures = "NetReportAmount1\n"
				DynamicMeasures += "NetReportAmount1Debit\n"
				DynamicMeasures += "NetReportAmount1Credit"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Functional)
				DynamicMeasures = "NetFunctionalAmount\n"
				DynamicMeasures += "NetFunctionalAmountDebit\n"
				DynamicMeasures += "NetFunctionalAmountCredit"

		
		AccountDebitAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			restricted
			if (LocalAccountDebitCalculated)
				return LocalAccountDebitAmount
			LocalAccountDebitCalculated = true
			LocalAccountCreditCalculated = true
			LocalActualCalculated = true
			
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalAccountDebitAmount = DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount = DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount = DetailAccountActualRel.NetReportAmount1
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalAccountDebitAmount = DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount = DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount = DetailAccountActualRel.NetFunctionalAmount
			else
				if (DynamicMeasure = "NetReportAmount1")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalAccountDebitAmount = DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount = DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount = DetailAccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalAccountDebitAmount += DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount += DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount += DetailAccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalAccountDebitAmount -= DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount -= DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount -= DetailAccountActualRel.NetReportAmount1
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalAccountDebitAmount = DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount = DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount = DetailAccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalAccountDebitAmount += DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount += DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount += DetailAccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalAccountDebitAmount -= DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount -= DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount -= DetailAccountActualRel.NetFunctionalAmount
			return LocalAccountDebitAmount

		AccountCreditAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			restricted
			if (LocalAccountCreditCalculated)
				return LocalAccountCreditAmount
			LocalAccountDebitCalculated = true
			LocalAccountCreditCalculated = true
			LocalActualCalculated = true
			
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalAccountDebitAmount = DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount = DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount = DetailAccountActualRel.NetReportAmount1
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalAccountDebitAmount = DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount = DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount = DetailAccountActualRel.NetFunctionalAmount
			else
				if (DynamicMeasure = "NetReportAmount1")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalAccountDebitAmount = DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount = DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount = DetailAccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalAccountDebitAmount += DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount += DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount += DetailAccountActualRel.NetReportAmount1
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalAccountDebitAmount -= DetailAccountActualRel.NetReportAmount1Debit
					LocalAccountCreditAmount -= DetailAccountActualRel.NetReportAmount1Credit
					LocalActualPeriodAmount -= DetailAccountActualRel.NetReportAmount1
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalReportingPeriod = AccountAnalysisSettingsRel.ThruReportingPeriod + "_LTD"
					LocalAccountDebitAmount = DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount = DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount = DetailAccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
					LocalAccountDebitAmount += DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount += DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount += DetailAccountActualRel.NetFunctionalAmount
					LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod + "_LTD"
					LocalAccountDebitAmount -= DetailAccountActualRel.NetFunctionalAmountDebit
					LocalAccountCreditAmount -= DetailAccountActualRel.NetFunctionalAmountCredit
					LocalActualPeriodAmount -= DetailAccountActualRel.NetFunctionalAmount
			return LocalAccountCreditAmount

		AccountBudgetAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalBudgetCalculated)
				return LocalBdugetPeriodAmount
			
			LocalBudgetCalculated = true
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetReportAmount1
				else  			
				if (DynamicMeasure = "NetReportAmount2")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetReportAmount2
				else						
				if (DynamicMeasure = "NetReportAmount3")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetReportAmount3
				else										
				if (DynamicMeasure = "NetReportAmount4")
					LocalBdugetPeriodAmount	= AccountBudgetRel.NetReportAmount4
				else								
				if (DynamicMeasure = "NetReportAmount5")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetFunctionalAmount 
				else
				if (DynamicMeasure = "NetAlternateAmount")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetAlternateAmount
				else
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetAlternateAmount2 
				else	
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetAlternateAmount3
				else	
				if (DynamicMeasure = "NetUnitsAmount")
					LocalBdugetPeriodAmount = AccountBudgetRel.NetUnitsAmount	
					
			else
				if (DynamicMeasure = "NetReportAmount1")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetReportAmount1
				else   			
				if (DynamicMeasure = "NetReportAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetReportAmount2						
				else
				if (DynamicMeasure = "NetReportAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetReportAmount3										
				else
				if (DynamicMeasure = "NetReportAmount4")	
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetReportAmount4								
				else
				if (DynamicMeasure = "NetReportAmount5")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetFunctionalAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetAlternateAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetAlternateAmount2
				else				
				if (DynamicMeasure = "NetAlternateAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetAlternateAmount3
				else				
				if (DynamicMeasure = "NetUnitsAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalBdugetPeriodAmount += AccountBudgetRel.NetUnitsAmount
			
			return LocalBdugetPeriodAmount
				
		AccountActualYTDAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalActualYTDCalculated)
				return LocalActualYTDAmount
			
			LocalActualYTDCalculated = true
			if (DynamicMeasure = "NetReportAmount1")
				LocalActualYTDAmount = AccountActualYTDRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalActualYTDAmount = AccountActualYTDRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalActualYTDAmount = AccountActualYTDRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalActualYTDAmount = AccountActualYTDRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalActualYTDAmount = AccountActualYTDRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalActualYTDAmount = AccountActualYTDRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalActualYTDAmount = AccountActualYTDRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalActualYTDAmount = AccountActualYTDRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalActualYTDAmount = AccountActualYTDRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalActualYTDAmount = AccountActualYTDRel.NetUnitsAmount	
				
			return LocalActualYTDAmount

		AccountBudgetYTDAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalBudgetYTDCalculated)
				return LocalBudgetYTDAmount
			
			LocalBudgetYTDCalculated = true
			if (DynamicMeasure = "NetReportAmount1")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalBudgetYTDAmount = AccountBudgetYTDRel.NetUnitsAmount	
			
			return LocalBudgetYTDAmount

		AccountActualYTDAmountTwo is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalActualYTDTwoCalculated)
				return LocalActualYTDAmountTwo
			
			LocalActualYTDTwoCalculated = true
			if (DynamicMeasure = "NetReportAmount1")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalActualYTDAmountTwo = AccountActualYTDTwoRel.NetUnitsAmount	
			
			return LocalActualYTDAmountTwo

		AccountEncumbranceYTDAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalEncumbranceYTDCalculated)
				return LocalEncumbranceYTDAmount
			
			LocalEncumbranceYTDCalculated = true
			if (DynamicMeasure = "NetReportAmount1")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalEncumbranceYTDAmount = AccountEncumbranceYTDRel.NetUnitsAmount	
			
			return LocalEncumbranceYTDAmount

		AccountCommitmentYTDAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalCommitmentYTDCalculated)
				return LocalCommitmentYTDAmount
			
			LocalCommitmentYTDCalculated = true
			if (DynamicMeasure = "NetReportAmount1")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalCommitmentYTDAmount = AccountCommitmentYTDRel.NetUnitsAmount	
			
			return LocalCommitmentYTDAmount

		AccountActualAmountTwo is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalActualTwoCalculated)
				return LocalActualPeriodAmountTwo
			
			LocalActualTwoCalculated = true
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetReportAmount1
				else  			
				if (DynamicMeasure = "NetReportAmount2")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetReportAmount2
				else						
				if (DynamicMeasure = "NetReportAmount3")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetReportAmount3
				else										
				if (DynamicMeasure = "NetReportAmount4")
					LocalActualPeriodAmountTwo	= AccountActualTwoRel.NetReportAmount4
				else								
				if (DynamicMeasure = "NetReportAmount5")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetFunctionalAmount 
				else
				if (DynamicMeasure = "NetAlternateAmount")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetAlternateAmount
				else
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetAlternateAmount2 
				else	
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetAlternateAmount3
				else	
				if (DynamicMeasure = "NetUnitsAmount")
					LocalActualPeriodAmountTwo = AccountActualTwoRel.NetUnitsAmount	
			else
				if (DynamicMeasure = "NetReportAmount1")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetReportAmount1
				else   			
				if (DynamicMeasure = "NetReportAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetReportAmount2						
				else
				if (DynamicMeasure = "NetReportAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetReportAmount3										
				else
				if (DynamicMeasure = "NetReportAmount4")	
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetReportAmount4								
				else
				if (DynamicMeasure = "NetReportAmount5")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetFunctionalAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetAlternateAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetAlternateAmount2
				else				
				if (DynamicMeasure = "NetAlternateAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetAlternateAmount3
				else				
				if (DynamicMeasure = "NetUnitsAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalActualPeriodAmountTwo += AccountActualTwoRel.NetUnitsAmount		
			
			return LocalActualPeriodAmountTwo
			
		AccountEncumbranceAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalEncumbranceCalculated)
				return LocalEncumbrancePeriodAmount
			
			LocalEncumbranceCalculated = true
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetReportAmount1
				else  			
				if (DynamicMeasure = "NetReportAmount2")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetReportAmount2
				else						
				if (DynamicMeasure = "NetReportAmount3")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetReportAmount3
				else										
				if (DynamicMeasure = "NetReportAmount4")
					LocalEncumbrancePeriodAmount	= AccountEncumbranceRel.NetReportAmount4
				else								
				if (DynamicMeasure = "NetReportAmount5")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetFunctionalAmount 
				else
				if (DynamicMeasure = "NetAlternateAmount")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetAlternateAmount
				else
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetAlternateAmount2 
				else	
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetAlternateAmount3
				else	
				if (DynamicMeasure = "NetUnitsAmount")
					LocalEncumbrancePeriodAmount = AccountEncumbranceRel.NetUnitsAmount	
			else
				if (DynamicMeasure = "NetReportAmount1")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetReportAmount1
				else   			
				if (DynamicMeasure = "NetReportAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetReportAmount2						
				else
				if (DynamicMeasure = "NetReportAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetReportAmount3										
				else
				if (DynamicMeasure = "NetReportAmount4")	
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetReportAmount4								
				else
				if (DynamicMeasure = "NetReportAmount5")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetFunctionalAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetAlternateAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetAlternateAmount2
				else				
				if (DynamicMeasure = "NetAlternateAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetAlternateAmount3
				else				
				if (DynamicMeasure = "NetUnitsAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalEncumbrancePeriodAmount += AccountEncumbranceRel.NetUnitsAmount		
			
			return LocalEncumbrancePeriodAmount

		AccountCommitmentAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (LocalCommitmentCalculated)
				return LocalCommitmentPeriodAmount
			
			LocalCommitmentCalculated = true
			if (!AccountAnalysisSettingsRel.ThruReportingPeriod entered)
				LocalReportingPeriod = AccountAnalysisSettingsRel.ReportingPeriod
				if (DynamicMeasure = "NetReportAmount1")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetReportAmount1
				else  			
				if (DynamicMeasure = "NetReportAmount2")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetReportAmount2
				else						
				if (DynamicMeasure = "NetReportAmount3")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetReportAmount3
				else										
				if (DynamicMeasure = "NetReportAmount4")
					LocalCommitmentPeriodAmount	= AccountCommitmentRel.NetReportAmount4
				else								
				if (DynamicMeasure = "NetReportAmount5")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetFunctionalAmount 
				else
				if (DynamicMeasure = "NetAlternateAmount")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetAlternateAmount
				else
				if (DynamicMeasure = "NetAlternateAmount2")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetAlternateAmount2 
				else	
				if (DynamicMeasure = "NetAlternateAmount3")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetAlternateAmount3
				else	
				if (DynamicMeasure = "NetUnitsAmount")
					LocalCommitmentPeriodAmount = AccountCommitmentRel.NetUnitsAmount	
			else
				if (DynamicMeasure = "NetReportAmount1")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetReportAmount1
				else   			
				if (DynamicMeasure = "NetReportAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetReportAmount2						
				else
				if (DynamicMeasure = "NetReportAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetReportAmount3										
				else
				if (DynamicMeasure = "NetReportAmount4")	
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetReportAmount4								
				else
				if (DynamicMeasure = "NetReportAmount5")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetReportAmount5
				else
				if (DynamicMeasure = "NetFunctionalAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetFunctionalAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetAlternateAmount
				else				
				if (DynamicMeasure = "NetAlternateAmount2")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetAlternateAmount2
				else				
				if (DynamicMeasure = "NetAlternateAmount3")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetAlternateAmount3
				else				
				if (DynamicMeasure = "NetUnitsAmount")
					for each AnalysisPeriodRangeRel
						LocalReportingPeriod = each.GeneralLedgerCalendarPeriod
						LocalCommitmentPeriodAmount += AccountCommitmentRel.NetUnitsAmount		
			
			return LocalCommitmentPeriodAmount

		NextYearBeginningBalance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals

			if (DynamicMeasure = "NetReportAmount1")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetReportAmount1
			else  			
			if (DynamicMeasure = "NetReportAmount2")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetReportAmount2
			else						
			if (DynamicMeasure = "NetReportAmount3")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetReportAmount3
			else										
			if (DynamicMeasure = "NetReportAmount4")	
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetReportAmount4
			else								
			if (DynamicMeasure = "NetReportAmount5")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetReportAmount5
			else
			if (DynamicMeasure = "NetFunctionalAmount")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetFunctionalAmount
			else
			if (DynamicMeasure = "NetAlternateAmount")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetAlternateAmount
			else
			if (DynamicMeasure = "NetAlternateAmount2")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetAlternateAmount2
			else	
			if (DynamicMeasure = "NetAlternateAmount3")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetAlternateAmount3
			else	
			if (DynamicMeasure = "NetUnitsAmount")
				LocalNextYearBeginningBalance = NextYearAccountActualYTDRel.NetUnitsAmount	
			
			return LocalNextYearBeginningBalance
									
		AccountActualCurrency is a DerivedField
			type is like Currency
			return AccountAnalysisSettingsRel.DisplayReportingCurrency


















						
		DerivedEndingBudgetBalance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (AccountAnalysisSettingsRel.UseLTDBeginningBalance)				
				return (AccountBudgetYTDAmount + AccountBudgetAmount)
			else	
				return AccountBudgetAmount
				
		DerivedEndingActualBalance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (AccountAnalysisSettingsRel.UseLTDBeginningBalance)				
				return (AccountActualYTDAmountTwo + AccountActualAmountTwo)
			else	
				return AccountActualAmountTwo
							
		DerivedEndingBalanceEncumbrance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (AccountAnalysisSettingsRel.UseLTDBeginningBalance)				
				return (AccountEncumbranceYTDAmount + AccountEncumbranceAmount)
			else	
				return AccountEncumbranceAmount
				
		DerivedEndingBalanceCommitment is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			if (AccountAnalysisSettingsRel.UseLTDBeginningBalance)				
				return (AccountCommitmentYTDAmount + AccountCommitmentAmount)
			else
				return AccountCommitmentAmount				
			
		DerivedEndingBalance is a DerivedField
			type is like TotalAmount
				precision is DerivedActualAmountDecimals
			return (AccountActualYTDAmount + AccountActualAmount)
			
		DerivedActualAmountDecimals is a DerivedField
			type is Numeric 1
			LocalCurrency = AccountActualCurrency
			return LocalCurrency.NumberOfDecimals


















																																								
	Conditions
		UnusedPostingAccountInChartSection
			restricted
			when (PostingAccountInSameSection
			and  !HierarchyRecordRel exists) 
		IsAchild
			restricted
			when (HierarchyRecordRel exists)
		RecordExists
			restricted
			when (GeneralLedgerChartAccount exists)
		HasChildren
			restricted
			when (ChartAccountHierarchyDetailRel exists)
		IsASystemAccount
			restricted
			when (SystemAccount entered)
		NodeChartAccount
			restricted
			when (ChartType.Node)
		SummaryAccountOrNodeInReportingChart
			restricted
			when ((GeneralLedgerChartAccount != ContextAccount)
			and   (TopNode                    = DerivedTopNode
			and   (ChartType.Node)
			or    (ChartType.Summary
			and    HelperListChartAccountRel exists
			and    ChartSection = ContextAccountRel.ChartSection)))
		ProjectSummaryAccountInReportingChart
			restricted
			when (GeneralLedgerChartAccount != ContextAccount
			and   ChartType.Summary)
		ProjectSummaryPostAccountInReportingChart
			restricted
			when (GeneralLedgerChartAccount != ContextAccount
			and  (ChartType.Summary
			or    ChartType.Posting))
		AnySummaryAccountInReportingChart
			restricted
			when (ChartType.Summary			
			and   first ReportingChartRel.ReportingChart = ReportingChart) 
		SummaryAccountInReportingChart
			restricted
			when (GeneralLedgerChartAccount != ContextAccount
			and   GeneralLedgerChartAccount != ContextAccountRel.DerivedParentAccount
			and   ChartType.Summary			
			and   first ReportingChartRel.ReportingChart = ReportingChart

			and   HelperListChartAccountRel exists
			and   ChartSection = ContextAccountRel.ChartSection
			and   !DescendantOfContextAccount)
		HelperListAccount
			restricted
			when (ChartType.Posting
			and  !HelperListChartAccountRel exists)
		NotUsedInHierarchy
			restricted
			when (ChartType.Posting
			and   !SubordinateInTopNodeRel exists)
		NotUsedInAChart
			restricted
			when (ChartType.Posting
			and   !ReportingChartAccount(GeneralLedgerChartAccount) set exists)
		SummaryWithinTopNode
			restricted
			when (!ChartType.Posting
			and   TopNode = DerivedTopNode)	
		SummaryWithGroup
			restricted
			when (ChartType.Summary
			and   SummaryChartAccountMaintenance entered)
		BalanceSheetTranslationCodes
			restricted
			when (TranslationCode = "BS"
			or    TranslationCode = "HB" )
		CurrencyDefaultSetup
			restricted
			when (FinanceEnterpriseGroup.CurrencyTranslationAndRevalue
			and   ReportingChart entered)
		EligibleToActivate
			restricted
			when (!Active
			and   Account.Active
			and   !ReportingChart entered
			and  (!GeneralLedgerSubAccount entered
			or    GeneralLedgerSubAccount.Active))
		EligibleToDeactivate
			restricted
			when (Active
			and   SystemAccount.No
			and   !ReportingChart entered)
		PostingAccountNoChartInContext
			restricted
			when (ChartType.Posting
			and   !ReportingChart entered)
		SummaryInEnterpriseChart
			restricted
			when (ChartType.Summary
			and   TopNode = FinanceEnterpriseGroup.EnterpriseChart.ChartAccountNode)
		BalanceSheetAccount
			restricted
			when (DisplayChartSection.BalanceSheet)
		PostingBalanceSheetAccount
			restricted
			when (ChartSection.BalanceSheet
			and   ChartType.Posting)
		PostingIncomeStatementAccount
			restricted
			when (ChartSection.IncomeStatement
			and   ChartType.Posting)
		PostingLiabilityAccount
			restricted
			when (AccountType.Liability
			and   ChartType.Posting)
		NoSubAccountsForMajor
			restricted
			when (!GLChartAccountMajorRel exists)
		EligibleToRemove
			restricted
			when (!ChartAccountChildrenRel exists)		
		EligibleToDelete
			restricted
			when (ChartType.Posting
			and  !UsedByATransaction)
		FutureChanges
			restricted
			when (this instance.has future changes)
		FutureChangesForReportingChart
			restricted
			when (ReportingChartAccountDefaultRel.has future changes)
		InterEntityAccount
			restricted
			when (SystemAccount.InterEntityPayables
			or    SystemAccount.InterEntityReceivables
			or    SystemAccount.InterEntityPayablesAndReceivables)
		IsPosting
			restricted
			when (ChartType.Posting)
		ZoneAccount
			restricted
			when (SystemAccount.ZonePayables
			or    SystemAccount.ZoneReceivables
			or    SystemAccount.ZonePayablesAndReceivables)
#ifdef module reconciliation			
		ExistsOnReconciliationStructure
			when (ReconciliationAccountRel exists)
#endif			
		IncomeStatementAccount
			restricted
			when (DisplayChartSection.IncomeStatement)
		PostingRetainedEarningAccount
			restricted
			when (SystemAccount			= 11		
			and   ChartType.Posting
			and   GeneralLedgerSubAccount entered
			and  !GeneralLedgerSubAccount = FinanceEnterpriseGroup.SystemSubAccount)
		InterEntityAndRetainEarningAccount
			restricted
			when (SystemAccount.InterEntityPayables
			or    SystemAccount.InterEntityReceivables
			or    SystemAccount.InterEntityPayablesAndReceivables
			or    SystemAccount.RetainedEarnings)
#ifdef module ad
		ADBAccountMasterAccount
			restricted
			when (ChartType.Posting
			and   ADBAccountMasterRel exists)
#endif
		SkipAnalysisList
			when (ChartType.Posting
          	and   AccountAnalysisSettingsRel.SuppressZeroRows
			and   GeneralLedgerChartAccount != AccountAnalysisSettingsRel.GeneralLedgerChartAccount			
			and   DerivedEndingBalance = 0
			and   AccountActualAmount = 0)

		SkipPostingAnalysisList
			when (AccountAnalysisSettingsRel.SuppressZeroRows
			and   GeneralLedgerChartAccount != AccountAnalysisSettingsRel.GeneralLedgerChartAccount			
			and   DerivedEndingBalance = 0
			and   AccountActualAmount = 0)

		SkipAnalysisBudgetList
			when (ChartType.Posting
          	and   AccountAnalysisSettingsRel.SuppressZeroRows
			and   GeneralLedgerChartAccount != AccountAnalysisSettingsRel.GeneralLedgerChartAccount	
			and   DerivedEndingBudgetBalance = 0
			and   DerivedEndingActualBalance = 0
			and   DerivedEndingBalanceEncumbrance = 0
			and   DerivedEndingBalanceCommitment = 0)
			
		SecurityGroupAllowsAccess
		    when ((actor.context.ChartAccountSecurityGroup = "")
		    or    (actor.context.ChartAccountSecurityGroup != ""
		    and   (ChartType.Node
			or     BypassActiveCodeBlockEdit
		    or    (SecurityGroupDetailRel exists
		    and   !SecurityGroupDetailRel.CreatedForHierarchyAccess))))

		SecurityGroupAllowsMaintenance
			when (LocalSecurityGroupAllowsMaintenance)
			
		DisplayTotalLink				
			when (!AccountAnalysisSettingsRel.UseLTDBeginningBalance)
			
		HideTotalLink				
			when (AccountAnalysisSettingsRel.UseLTDBeginningBalance)			

		IsAInterEntityAccount
			restricted
			when (SystemAccount.InterEntityPayables
			or    SystemAccount.InterEntityReceivables
			or    SystemAccount.InterEntityPayablesAndReceivables)

		IsAInterDepartmentAccount
			restricted
			when (SystemAccount.DepartmentPayables
			or    SystemAccount.DepartmentReceivables
			or    SystemAccount.DepartmentPayablesAndReceivables)
			
		IsNegativeDisplayOrder
			restricted
			when (ReportingChart entered
			and   any ByDistinctOrderRel.DisplayOrder <= 0)
		
		HasDisplayOrder
			restricted
			when (ReportingChart entered
			and   any ByDistinctOrderRel.DisplayOrder > 0)
							
    	BudgetAccountAnalysisSettingsNotExists
    		when (AccountAnalysisSettingsRel exists
    		and  !AccountAnalysisSettingsRel.IsBudgetScenario)  

	Relations
		AccountAnalysisSettingsRel
			one-to-one relation to AccountAnalysisSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Actor				    = actor
				related.AccountAnalysisSettings = AccountAnalysisSettings
		
		SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 14
				related.FinanceDimensionSecurityGroup   	= actor.context.ChartAccountSecurityGroup
				related.FinanceDimensionSecurityGroupDetail = GeneralLedgerChartAccount
					
		ContextAccountRel
			one-to-one relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= ContextAccount
		PostingAccountsInContextChartSectionRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.ChartSection    = ContextAccountRel.ChartSection
				and   !related.HierarchyRecordRel exists)			
		AccountRel
			one-to-many relation to Account
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Account						= GeneralLedgerChartAccount
		ChartAccountChildrenRel
			one-to-many relation to GeneralLedgerChartAccount
			disable subset select on dependent relation			
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= ChartAccountHierarchyDetailRel.GeneralLedgerChartAccount
		NotInChartAccountStructureRel		
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.NotUsedInHierarchy)
		ChartAccountHierarchyDetailRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByParentAccount
				related.FinanceEnterpriseGroup	    = FinanceEnterpriseGroup
				related.ParentChartAccount			= GeneralLedgerChartAccount
		
		ReportingChartAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
			Instance Selection
				where (related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				and	   related.GeneralLedgerChartAccount= GeneralLedgerChartAccount)
		
		HelperListChartAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ChartAccountNode 			= ReportingChart.ChartAccountNode 
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount 
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount
		ParentRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
				related.ReportingChart						 = ReportingChart
				related.GeneralLedgerChartAccount 			 = GeneralLedgerChartAccount
		UnusedLeafRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
		SubordinateInTopNodeRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ChartAccountNode 			= DerivedTopNode
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount			
		SummariesWithGroupsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses SummaryWithGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		SubordinateInLocalTopNodeRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ChartAccountNode 			= LocalTopNode
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount			
		HierarchyRecordRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart 
				related.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount 								
		ReportingChartAccountDefaultRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.ChartAccountNode 			= DerivedTopNode
				related.GeneralLedgerChartAccount 	= LocalGeneralLedgerChartAccount 								
		NextLevelChildRecordsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ChildrenInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ChartAccountNode   			= DerivedTopNode
				related.ParentChartAccount 			= LocalReportChartAccount
		UpdateReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.GeneralLedgerChartAccount 	= LocalUpdateChartAccount
		IncludedInChartsRel 
			one-to-many relation to ReportingChart
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChartAccount(GeneralLedgerChartAccount) set.ReportingChart 								
		SiblingsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ChildrenInTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ChartAccountNode					= DerivedTopNode
				related.ParentChartAccount					= DerivedParentAccount	
		AllSiblingsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ChildrenInTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ChartAccountNode					= DerivedTopNode
				related.ParentChartAccount					= LocalParentAccount			
		ByDistinctOrderRel		
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ChildrenInTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ChartAccountNode					= DerivedTopNode















		ReportingChartRel
			one-to-many relation to ReportingChart
			Field Mapping uses ByChartAccountNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ChartAccountNode		    = TopNode
		GLChartAccountShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
		SettingsGLChartAccountShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses BySummaryAccount
				related.FinanceEnterpriseGroup		     = FinanceEnterpriseGroup

				related.SummaryGeneralLedgerChartAccount= GeneralLedgerChartAccount
			Instance Selection
				where (related.ChartType.Posting)
		SettingsGLChartAccountPostingRel
			one-to-many relation to GeneralLedgerChartAccount
			disable subset select on dependent relation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= SettingsGLChartAccountShadowRel.GeneralLedgerChartAccount
		DescendantInShadowRel
			one-to-one relation to GLChartAccountShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 = FinanceEnterpriseGroup
				related.ReportingChart					 = ReportingChart
				related.GeneralLedgerChartAccount		 = LocalGeneralLedgerChartAccount
				related.SummaryGeneralLedgerChartAccount = GeneralLedgerChartAccount
		DescendantOfContextAccountShadowRel
			one-to-one relation to GLChartAccountShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 = FinanceEnterpriseGroup
				related.ReportingChart					 = ReportingChart
				related.GeneralLedgerChartAccount		 = GeneralLedgerChartAccount
				related.SummaryGeneralLedgerChartAccount = ContextAccount													
		GLChartAccountMajorRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Account						= Account
			Instance Selection
				where (related.UniqueID				!= UniqueID)
		NotifyBudgetTemplateRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.NotifyOnAccount
				and related.AccountStructure	= ReportingChart)
		NotifyBudgetTemplateRemoveRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.NotifyOnAccountRemove
				and related.AccountStructure	= ReportingChart)
		
		AnyGLChartAccountShadowRel is a GLChartAccountShadow(GeneralLedgerChartAccount) set
										
		DescendantsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	  = FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount = ShadowDescendantsRel.GeneralLedgerChartAccount
		
		ShadowDescendantsRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses BySummaryAccount 
				related.FinanceEnterpriseGroup			 = FinanceEnterpriseGroup

				related.SummaryGeneralLedgerChartAccount = GeneralLedgerChartAccount	
		InterEntityAccountTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario									    = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.AccountingEntity							!= AccountingEntity
				and   ((AccountingEntity.SubAccount entered
				and     related.GeneralLedgerSubAccount					 = AccountingEntity.SubAccount)
				or     (AccountingEntity.FinanceDimension1 entered
				and     related.FinanceDimension1						 = AccountingEntity.FinanceDimension1)
				or     (AccountingEntity.FinanceDimension2 entered
				and     related.FinanceDimension2						 = AccountingEntity.FinanceDimension2)
				or     (AccountingEntity.FinanceDimension3 entered
				and     related.FinanceDimension3						 = AccountingEntity.FinanceDimension3)
				or     (AccountingEntity.FinanceDimension4 entered
				and     related.FinanceDimension4						 = AccountingEntity.FinanceDimension4)
				or     (AccountingEntity.FinanceDimension5 entered
				and     related.FinanceDimension5						 = AccountingEntity.FinanceDimension5)
				or     (AccountingEntity.FinanceDimension6 entered
				and     related.FinanceDimension6						 = AccountingEntity.FinanceDimension6)
				or     (AccountingEntity.FinanceDimension7 entered
				and     related.FinanceDimension7						 = AccountingEntity.FinanceDimension7)
				or     (AccountingEntity.FinanceDimension8 entered
				and     related.FinanceDimension8						 = AccountingEntity.FinanceDimension8)
				or     (AccountingEntity.FinanceDimension9 entered
				and     related.FinanceDimension9						 = AccountingEntity.FinanceDimension9)
				or     (AccountingEntity.FinanceDimension10 entered
				and     related.FinanceDimension10						 = AccountingEntity.FinanceDimension10)))

		InterEntityAccountCloseTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario									    = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.AccountingEntity							!= AccountingEntity
				and   ((AccountingEntity.SubAccount entered
				and     related.GeneralLedgerSubAccount					 = AccountingEntity.SubAccount)
				or     (AccountingEntity.FinanceDimension1 entered
				and     related.FinanceDimension1						 = AccountingEntity.FinanceDimension1)
				or     (AccountingEntity.FinanceDimension2 entered
				and     related.FinanceDimension2						 = AccountingEntity.FinanceDimension2)
				or     (AccountingEntity.FinanceDimension3 entered
				and     related.FinanceDimension3						 = AccountingEntity.FinanceDimension3)
				or     (AccountingEntity.FinanceDimension4 entered
				and     related.FinanceDimension4						 = AccountingEntity.FinanceDimension4)
				or     (AccountingEntity.FinanceDimension5 entered
				and     related.FinanceDimension5						 = AccountingEntity.FinanceDimension5)
				or     (AccountingEntity.FinanceDimension6 entered
				and     related.FinanceDimension6						 = AccountingEntity.FinanceDimension6)
				or     (AccountingEntity.FinanceDimension7 entered
				and     related.FinanceDimension7						 = AccountingEntity.FinanceDimension7)
				or     (AccountingEntity.FinanceDimension8 entered
				and     related.FinanceDimension8						 = AccountingEntity.FinanceDimension8)
				or     (AccountingEntity.FinanceDimension9 entered
				and     related.FinanceDimension9						 = AccountingEntity.FinanceDimension9)
				or     (AccountingEntity.FinanceDimension10 entered
				and     related.FinanceDimension10						 = AccountingEntity.FinanceDimension10))
				and    (related.GeneralLedgerTotal.Ledger.CloseLedger    = false))
				
		InterDepartmentAccountTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario									    = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.AccountingEntity							= AccountingEntity)
				
		InterDepartmentAccountCloseTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario									    = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.AccountingEntity							= AccountingEntity
				and    related.GeneralLedgerTotal.Ledger.CloseLedger    = false)
				
		SingleSystemAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SystemAccount			= LocalSystemAccount
			Instance Selection
				where (related.GeneralLedgerChartAccount	!= GeneralLedgerChartAccount)
		DisplayAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByDisplayAccount
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.DisplayAccount   			= DisplayAccount
			Instance Selection
				where (related.GeneralLedgerChartAccount != GeneralLedgerChartAccount)
#ifdef module reconciliation
		ReconciliationAccountRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = FinanceEnterpriseGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount
#endif				
		RetainedEarningAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= 11		
			Instance Selection
				where (related.GeneralLedgerChartAccount	= LocalUpdateChartAccount
				and   !related.GeneralLedgerSubAccount 		= FinanceEnterpriseGroup.SystemSubAccount)
		ReportingChartCloseToAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByCloseToAccount
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ReportingChart					= ReportingChart
				related.CloseToAccount					= GeneralLedgerChartAccount
#ifdef module ad
		ADBAccountMasterRel
			one-to-many relation to ADBAccountMaster
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount 								
#endif
				












		AccountAnalysisTransactionsRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGeneralLedgerTotalOrder
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= GeneralLedgerTotalActualsRel.AccountingEntity
				related.GeneralLedgerCalendarPeriod					= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.EntityYearPeriod				
				related.FinanceCodeBlock.Ledger						= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Ledger
				related.System										= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.System
				related.CurrencyCode								= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Currency
				related.FinanceCodeBlock.AccountingUnit				= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.AccountingUnit
				related.FinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.GeneralLedgerChartAccount
				related.FinanceCodeBlock.Project					= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.Project
				related.DimensionCode								= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.DimensionCode
				related.PrimaryLedger								= GeneralLedgerTotalActualsRel.GeneralLedgerTotal.PrimaryLedger
			Instance Selection
				where (related.Status.Posted)

		GeneralLedgerTransactionActualsRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGeneralLedgerTotalOrder
			Instance Selection
				where (DynamicTransactionsDrillRelCondition and related.Status.Posted)
		
		GeneralLedgerTotalActualsRel
			one-to-many relation to GeneralLedgerTotal

			Field Mapping uses ByGeneralLedgerChartAccountPeriod


			Instance Selection
				where (DynamicTotalsDrillRelCondition)



		GeneralLedgerTotalActualsDebitRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
			Instance Selection
				where (DynamicTotalsDrillRelCondition
				and related.NetTransactionAmount >= 0)

		GeneralLedgerTotalActualsCreditRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByGeneralLedgerChartAccountPeriod
			Instance Selection
				where (DynamicTotalsDrillRelCondition
				and related.NetTransactionAmount < 0)

		GeneralLedgerTotalActualsTwoRel
			one-to-many relation to GeneralLedgerTotal

			Field Mapping uses ByGeneralLedgerChartAccountPeriod


			Instance Selection
				where (DynamicTotalsDrillRelConditionTwo)



		GeneralLedgerTotalEncumbranceRel
			one-to-many relation to GeneralLedgerTotal

			Field Mapping uses ByGeneralLedgerChartAccountPeriod


			Instance Selection
				where (DynamicTotalsDrillRelConditionEncumbrance)



		GeneralLedgerTotalCommitmentRel
			one-to-many relation to GeneralLedgerTotal

			Field Mapping uses ByGeneralLedgerChartAccountPeriod


			Instance Selection
				where (DynamicTotalsDrillRelConditionCommitment)



		EndDatesWithinRange
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod >= DerivedStartDateJulian
				and    related.GeneralLedgerCalendarPeriod <= DerivedEndDateJulian)

		PreviousPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = AccountAnalysisSettingsRel.ReportingBasis.CalendarTopNode
				related.PeriodType			   = AccountAnalysisSettingsRel.ReportingPeriod.PeriodType
			Instance Selection	
				where (related.GeneralLedgerCalendarPeriod < AccountAnalysisSettingsRel.ReportingPeriod)

		AnalysisPeriodRangeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = AccountAnalysisSettingsRel.ReportingBasis.CalendarTopNode
				related.PeriodType			   = AccountAnalysisSettingsRel.ReportingPeriod.PeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod >= AccountAnalysisSettingsRel.ReportingPeriod
				and    related.GeneralLedgerCalendarPeriod <= AccountAnalysisSettingsRel.ThruReportingPeriod)
								
		AnalysisYearPeriodRangeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = AccountAnalysisSettingsRel.ReportingBasis.CalendarTopNode
				related.PeriodType			   = 3
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.Year = AccountAnalysisSettingsRel.ReportingPeriod.Year)

		ScenarioChildrensRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.Parent = AccountAnalysisSettingsRel.Scenario)
		
		AccountingEntityDirectShadowRel
			one-to-many relation to AccountingEntityShadow
			Field Mapping uses BySummaryEntity
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryEntity			= AccountAnalysisSettingsRel.AccountingEntity
			Instance Selection
				where (related.DimensionType.Posting)

		AccountingEntityTopNodeShadowRel
			one-to-many relation to AccountingEntityShadow
			Field Mapping uses BySummaryEntity
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryEntity 			= AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode
			Instance Selection
				where (related.DimensionType.Posting)

		AccountingUnitShadowRel
			one-to-many relation to AccountingUnitShadow
			Field Mapping uses BySummaryAccountingUnit
			dynamic mapping is DynamicMapAccountingUnitShadowRel
			Instance Selection
				where (related.AccountingUnitType.Posting)

		FinanceDimension1ShadowRel
			one-to-many relation to FinanceDimension1Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension1ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)								

		FinanceDimension2ShadowRel
			one-to-many relation to FinanceDimension2Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension2ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)
				
		FinanceDimension3ShadowRel
			one-to-many relation to FinanceDimension3Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension3ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension4ShadowRel
			one-to-many relation to FinanceDimension4Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension4ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension5ShadowRel
			one-to-many relation to FinanceDimension5Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension5ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension6ShadowRel
			one-to-many relation to FinanceDimension6Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension6ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension7ShadowRel
			one-to-many relation to FinanceDimension7Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension7ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension8ShadowRel
			one-to-many relation to FinanceDimension8Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension8ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)
				
		FinanceDimension9ShadowRel
			one-to-many relation to FinanceDimension9Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension9ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)

		FinanceDimension10ShadowRel
			one-to-many relation to FinanceDimension10Shadow
			Field Mapping uses BySummaryDimension
			dynamic mapping is DynamicMapFinanceDimension10ShadowRel
			Instance Selection
				where (related.DimensionType.Posting)
		ProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
			dynamic mapping is DynamicMapProjectShadowRel
			Instance Selection
				where (related.ProjectType.Posting)

		TemplatesWithIdentifierRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup 
			Instance Selection
				where (related.Status 				= 2 
				and related.AccountStructure		= ReportingChart 
				and related.AccountIdentifier		= old BudgetIdentifier)

		CodeBlockRelationDetailFromToRel
			one-to-one relation to CodeBlockRelationDetail
			Field Mapping uses ByKeyValues
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.CodeBlockRelation					= LocalCodeBlockRelation
				related.KeyFromValue						= LocalKeyFromValue
				related.KeyToValue							= LocalKeyToValue
			
	Cube Relations

		AccountActualRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualCubeMap
			Dimension Mapping

				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		DetailAccountActualRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is ActualCubeMap
			Dimension Mapping
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode
			dynamic preload measures are DynamicMeasures

		AccountActualYTDRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualYTDCubeMap
			Dimension Mapping

				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		NextYearAccountActualYTDRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is NextYearActualYTDCubeMap
			Dimension Mapping

				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure
			
		AccountBudgetRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is BudgetCubeMap
			Dimension Mapping

				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountBudgetYTDRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is BudgetYTDCubeMap
			Dimension Mapping

				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountActualYTDTwoRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualYTDBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure


		AccountEncumbranceYTDRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualYTDBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.EncumbrancesScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountCommitmentYTDRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualYTDBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.CommitmentsScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountActualTwoRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountEncumbranceRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.EncumbrancesScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



		AccountCommitmentRel
			cell relation to GeneralLedgerTotal

			dynamic mapping is ActualBCECubeMap
			Dimension Mapping
				related.Scenario	                        = FinanceEnterpriseGroup.CommitmentsScenario
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode

			dynamic preload measures are DynamicMeasure



	Sets
		BySystemAccount

			Sort Order
				FinanceEnterpriseGroup
				SystemAccount
				GeneralLedgerChartAccount
		LeafRecords
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerChartAccount
			Instance Selection
				where (ChartType.Posting)
		SummaryWithGroup
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerChartAccount
			Instance Selection
				where (SummaryWithGroup)
		ByTopNode
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				GeneralLedgerChartAccount				
		ByAccount
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Account
				GeneralLedgerChartAccount






													
	Field Rules
		ChartSection
		SystemAccount
			if (ChartType.Posting
			and SystemAccount entered
			and !InterEntityAndRetainEarningAccount)
				if (FinanceEnterpriseGroup.SystemSubAccount entered)
					if (!GeneralLedgerSubAccount = FinanceEnterpriseGroup.SystemSubAccount)
						initialize SystemAccount
				else
					if (GeneralLedgerSubAccount entered)
						initialize SystemAccount





				LocalSystemAccount		= SystemAccount
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.RetainedEarnings
			or  SystemAccount.UndistributedRetainedEarnings)
				constraint (ChartSection.BalanceSheet)
					"<SystemAccount>MustBeABalanceSheet<FinanceEnterpriseGroup.AccountLabel>"

			if (SystemAccount.TranslationGain
			or  SystemAccount.TranslationLoss)
				LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.TranslationGainAndLoss)
				LocalSystemAccount		= SystemAccount.TranslationGain
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
				LocalSystemAccount		= SystemAccount.TranslationLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"

			if (SystemAccount.RealizedGain
			or  SystemAccount.RealizedLoss)
				LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.RealizedGainAndLoss)
				LocalSystemAccount		= SystemAccount.RealizedGain
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
				LocalSystemAccount		= SystemAccount.RealizedLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"

			if (SystemAccount.UnrealizedGain
			or  SystemAccount.UnrealizedLoss)
				LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.UnrealizedGainAndLoss)
				LocalSystemAccount		= SystemAccount.UnrealizedGain
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
				LocalSystemAccount		= SystemAccount.UnrealizedLoss
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"

			if (SystemAccount.ZonePayables
			or  SystemAccount.ZoneReceivables)
				LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.ZonePayablesAndReceivables)
				LocalSystemAccount		= SystemAccount.ZonePayables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
				LocalSystemAccount		= SystemAccount.ZoneReceivables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"

			if (SystemAccount.InterEntityPayables
			or  SystemAccount.InterEntityReceivables)
				LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
			if (SystemAccount.InterEntityPayablesAndReceivables)
				LocalSystemAccount		= SystemAccount.InterEntityPayables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
				LocalSystemAccount		= SystemAccount.InterEntityReceivables
				constraint (!SingleSystemAccountsRel exists)
					"<SystemAccount>AlreadyExists"
		
			if (InterEntityAccount
			or  ZoneAccount)
				constraint (ChartSection.BalanceSheet)
					"ChartSectionMustBeBalanceSheetFor<SystemAccount>"

		AccountDescription
			required
			if (AccountDescription changed)
				if (UpdatedByAccount)
					if (GeneralLedgerSubAccount entered)
						AccountDescription = Account.AccountDescription + "-" + GeneralLedgerSubAccount.Description

		DisplayAccount
			if (!CopyStructureMode)
				constraint (!DisplayAccountRel exists)
					"DisplayValueAlreadyExistsFor<first DisplayAccountRel.GeneralLedgerChartAccount>"
								
		ChartType
			if (!ChartType.Node)
				constraint (ChartSection entered)
					"ChartSectionIsRequired"
 
 		ParentAccount
			default to DerivedTopNode
									
		AccountType
			if (!ChartType.Node)
				required
			if (AccountType.Equity
			or  AccountType.Asset
			or  AccountType.Liability)
				constraint (ChartSection.BalanceSheet)
					"IncorrectTypeForChartSection<AccountType>_<FinanceEnterpriseGroup.AccountLabel>"

			if (AccountType.Revenue
			or  AccountType.Expense)
				constraint (ChartSection.IncomeStatement)
					"IncorrectTypeForChartSection<AccountType>_<FinanceEnterpriseGroup.AccountLabel>"
					
		AccountSubType
			constraint (AccountSubType.AccountType = AccountType)
				"<FinanceEnterpriseGroup.AccountLabel>TypeDoesNotMatch<FinanceEnterpriseGroup.AccountLabel>TypeOnSubType"
			constraint (ChartType.Posting)
				"<FinanceEnterpriseGroup.AccountLabel>SubTypeAllowedOnPostingOnly"
			
		TranslationCode
			if (AccountType.Equity)
				default to "HB"
			else
				if (AccountType.Asset
				or  AccountType.Liability)
					default to "BS"
					constraint (TranslationCode != "IS")
						"CannotUseIncomeStatementTranslationCodeOnBalanceSheetAccounts"
				else
					if (AccountType.Revenue
					or  AccountType.Expense)
						default to "IS"
						constraint (!BalanceSheetTranslationCodes)
							"CannotUseBalanceSheetTranslationCodeOnIncomeStatementAccounts"
					else
						if (ChartSection.IncomeStatement)
							default to "IS"
							constraint (!BalanceSheetTranslationCodes)
								"CannotUseBalanceSheetTranslationCodeOnIncomeStatementAccounts"
						else
							if (ChartSection.BalanceSheet)
								default to "BS"
								constraint (TranslationCode != "IS")
									"CannotUseIncomeStatementTranslationCodeOnBalanceSheetAccounts"
									
		Active
			if (!ChartType.Summary)
				if (!Account.Active
				or (GeneralLedgerSubAccount entered 
				and !GeneralLedgerSubAccount.Active))
					Active = false
			
			if (ChartType.Summary 
			or !SystemAccount.No)
				Active = true
		NewCloseToAccount
			constraint (NewCloseToAccount.ChartSection.BalanceSheet)
				"CanOnlyEnterBalanceSheet<FinanceEnterpriseGroup.AccountLabel>"
			constraint (!ReportingChartCloseToAccountRel exists)
				"CannotEnterCloseTo<FinanceEnterpriseGroup.AccountLabel>"
			LocalUpdateChartAccount = NewCloseToAccount				
			constraint (UpdateReportingChartAccountRel exists)
				"<NewCloseToAccount>_<FinanceEnterpriseGroup.AccountLabel>DoesNotExistInChart"
			if (NewCloseToAccount.ChartSection.BalanceSheet)
				constraint (NewCloseToAccount	!= GeneralLedgerChartAccount)
					"<NewCloseToAccount>_<FinanceEnterpriseGroup.AccountLabel>ItselfCannotBeACloseTo"
			if (GeneralLedgerChartAccount.ChartSection.IncomeStatement)
				constraint (RetainedEarningAccountRel exists)
					"CanEnterOnlyRetainedEarningSub<FinanceEnterpriseGroup.AccountLabel>"

		BudgetIdentifier
			constraint (ChartType.Summary)
				"BudgetIdentifierOnlyValidForSummary<FinanceEnterpriseGroup.AccountLabel>"
			if (BudgetIdentifier changed)
				if (BudgetIdentifier entered)
					if (old BudgetIdentifier entered)
						Counter		= instance count of TemplatesWithIdentifierRel
						if (Counter	= 1)
							confirmation required
								"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>RefersToBudgetIdentifier<old BudgetIdentifier>._Proceed?"
						else
						if (Counter > 1)
							Counter -= 1
							if (Counter = 1)
								confirmation required
									"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>And<Counter>OtherReferToBudgetIdentifier<old BudgetIdentifier>._Proceed?"					
							else
								confirmation required
									"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>And<Counter>OthersReferToBudgetIdentifier<old BudgetIdentifier>._Proceed?"					
					LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount			
					TopNodeFound   				   = false
					while (!TopNodeFound)
						if (LocalGeneralLedgerChartAccount.ChartType.Node) 
							TopNodeFound = true
						else
							constraint (BudgetIdentifier != LocalGeneralLedgerChartAccount.BudgetIdentifier) 
								"BudgetIdentifier<BudgetIdentifier>AlreadyInUseBy<LocalGeneralLedgerChartAccount.DisplayAccount>" //.SubordinateInTopNodeRel.ParentChartAccount.DisplayAccount>"  
							LocalGeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount	
					BudgetIdentifierArray.BudgetIdentifier[1] = BudgetIdentifier				
					invoke EditDescendantsBudgetIdentifier
						invoked.PrmBudgetIdentifierArray = BudgetIdentifierArray
						invoked.PrmBudgetIdentifierCount = 1
				else
				if (old BudgetIdentifier entered)
					Counter		= instance count of TemplatesWithIdentifierRel
					if (Counter	= 1)
						confirmation required
							"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>RefersToBudgetIdentifier<old BudgetIdentifier>.Proceed?"
					else
					if (Counter > 1)
						Counter -= 1
						if (Counter = 1)
							confirmation required
								"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>And<last TemplatesWithIdentifierRel.BudgetTemplate>ReferToBudgetIdentifier<old BudgetIdentifier>.Proceed?"					
						else
							confirmation required
								"BudgetTemplate<first TemplatesWithIdentifierRel.BudgetTemplate>And<Counter>OtherTemplatesReferToBudgetIdentifier<old BudgetIdentifier>.Proceed?"					

				else
				if (ReportingChart not entered)
					confirmation required
						"ReportingChartNotAvailableInThisContext._BudgetTemplatesMayReferToThisIdentifier._Proceed?"									
				invoke NotifyChangeIdentifierAccount NotifyBudgetTemplateRel
					invoked.PrmAccount				= GeneralLedgerChartAccount
					invoked.PrmOldIdentifier		= old BudgetIdentifier
						
		IncludeInBudgetEdit
			constraint (ChartType.Posting)
				"NotValidForSummary<FinanceEnterpriseGroup.AccountLabel>"

		NewDisplayOrder
			if (NewDisplayOrder entered)
				constraint (NewDisplayOrder > 0)
					"NewDisplayOrderCannotBeNegative"

		RequireProject
			if (!SystemAccount.No)
				RequireProject = false
						
#ifdef module reconciliation		
		IsReconcilable
			if (IsReconcilable changed
			and !IsReconcilable)
				constraint (!ExistsOnReconciliationStructure)
					"CannotChangeReconcilableOptionIfAReconciliationAccountHasBeenSetup"
			constraint (ChartType.Posting)	
				"IsReconciliableFlagCanOnlyBeCheckedForPostingAccounts"
#endif				
									
	Attach Rules
		if (ChartType.Posting)
			if (!parentcontext.name = "GeneralLedgerTotal"
			and !parentcontext.name = "ReportingChartAccount"
			and !parentcontext.name = "ReportingChart"
			and !parentcontext.name = "GeneralLedgerChartAccount"
			and !parentcontext.name = "GeneralLedgerSubAccount"	
			and !parentcontext.name = "GLChartAccountShadow"
			and !parentcontext.name = "ReportingChartAccountUpload"
			and !parentcontext.name = "AccountAnalysisSettings"
			and !parentcontext.name = "BudgetGroup"
			and !parentcontext.name = "BudgetTemplateMember"
			and !parentcontext.name = "BudgetTemplatePending"
			and !parentcontext.name = "BudgetTemplateRemove"
			and !parentcontext.name = "BudgetChange"
			and !parentcontext.name = "BudgetImport"
			and !parentcontext.name = "ReconciliationAccount"
			and !parentcontext.name = "ContractLineDistribution"
			and !parentcontext.name = "AllocationLineSourceValue"
			and !parentcontext.name = "AllocationLineValue"			
			and !parentcontext.name = "AllocationLineSingleOverride"
			and !parentcontext.name = "AllocationLineTempOverride"
			and !parentcontext.name = "AllocationRunWeightDetail"
			and !parentcontext.name = "GLReport"
			and !parentcontext.name = "GLReportGrouping"
			and !parentcontext.name = "GLReportGroupingDetail"
			and !parentcontext.name = "GLReportFilterDimension"
			and !parentcontext.name = "GLColumnFilterDimension"
#ifdef module tx
			and !parentcontext.name = "TaxTransaction"
#endif			
#ifdef module am
			and !parentcontext.name = "AssetTransactionSummary"
			and !parentcontext.name = "AssetTransactionBeginningBalance"
#endif
			and !BypassActiveCodeBlockEdit)
				constraint (Active)
					"CannotAttachAnInactive<GeneralLedgerChartAccount>_<FinanceEnterpriseGroup.AccountLabel>"
		if (!parentcontext.name = "GeneralLedgerTotal"
		and !parentcontext.name = "ReportingChartAccount"
		and !parentcontext.name = "ReportingChart"
		and !parentcontext.name = "ReportingChartAccountUpload"
		and !parentcontext.name = "ReportingBasisYearTotal"
		and !parentcontext.name = "Account"				
		and !parentcontext.name = "GeneralLedgerChartAccount"				
		and !parentcontext.name = "GeneralLedgerSubAccount"				
		and !parentcontext.name = "GLChartAccountShadow"
		and !parentcontext.name = "AccountAnalysisSettings"
		and !parentcontext.name = "ADBAccountMaster"
		and !parentcontext.name = "AverageDailyBalanceAccount"
		and !parentcontext.name = "ResetAverageDailyBalance"
#ifdef module reconciliation
		and !parentcontext.name = "ReconciliationAccount"
		and !parentcontext.name = "PeriodEndReconciliation"
		and !parentcontext.name = "PeriodEndTransReconDetail"
#endif
		and !parentcontext.name = "ProjectReportingSettings"
		and !parentcontext.name = "ProjectReportingSettingsAll")
			constraint (!SystemAccount.UndistributedRetainedEarnings)
				"CannotPostTo<SystemAccount>_<FinanceEnterpriseGroup.AccountLabel>"
		
	Action Exit Rules
								
	Rule Blocks
		TriggerBODForCreateOrUpdate
			if (FinanceEnterpriseGroup.BODTrigger)
				if (action type.Create)
					LocalActionCode = LocalActionCode.Create
				else
					LocalActionCode = LocalActionCode.Update
	
				increment bod id.VariationID
	
				trigger "GeneralLedgerChartAccountService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from GeneralLedgerChartAccount
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp	
		
		CheckValidContext	
			if (ReportingChart.UnusedDimensionStructure)
				constraint (InvokedByUnusedStructure
				or			LocalInvokedByUnusedStructure)
					"ActionNotValidForThisChart"	
						
		CreateShadowForAccount

			if (!SkipShadow)
				ChildAccount = LocalGeneralLedgerChartAccount
				TopNodeFound = false
				invoke Delete GLChartAccountShadowRel
				while (!TopNodeFound)
					invoke Create GLChartAccountShadow
						invoked.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
						invoked.ReportingChart	  			   	   = ReportingChart
						invoked.GeneralLedgerChartAccount		   = ChildAccount
						invoked.ChartType						   = ChildAccount.ChartType
						invoked.SummaryGeneralLedgerChartAccount   = LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount
	
					if (LocalGeneralLedgerChartAccount.ChartType.Summary)
						invoke SetLevel LocalGeneralLedgerChartAccount
					if (LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.ChartType.Node)
						TopNodeFound = true
					else
						LocalGeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount			

 		DeleteRules
			if (FinanceEnterpriseGroup.BODTrigger)
				LocalActionCode = LocalActionCode.Delete
	
				increment bod id.VariationID
	
				trigger "GeneralLedgerChartAccountService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from GeneralLedgerChartAccount
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp
							
    Apply Pending Effective Rules
		invoke TriggerChartOfAccountBOD ReportingChartAccountRel		
	
	Audit Entry Rules
		if(not audit period.Future)
			invoke TriggerChartOfAccountBOD ReportingChartAccountRel
    
    Actions
		T2VCreate is a Create Action
			restricted
			default label is untranslatable
            Field Rules
                SequenceNumber autosequence using FinanceEnterpriseGroup.GeneralLedgerChartAccountLastSeq

			Action Rules
				if (!ChartType.Node)
					include CheckValidContext
							
				if (!IsTopNode)
					if (NewAccount entered)
						GeneralLedgerChartAccount	= SummaryNodeString				
						ChartType					= ChartType.Summary
						ChartSection				= DisplayChartSection
						TopNode 					= DerivedTopNode
						if (!DisplayAccount entered)
							DisplayAccount				= NewAccount
						 
				if (IsTopNode
				or  ChartType.Summary)
					Active					= true
						
				if (NewTranslationCode not entered)
					NewTranslationCode			= DerivedTranslationCode
				if (NewRevalue not entered)
					NewRevalue					= DerivedRevalue
				if (NewRequireProject not entered)
					NewRequireProject			= DerivedRequireProject
				if (NewXbrlTag not entered)
					NewXbrlTag					= DerivedXbrlTag
				else
					XbrlTag						= NewXbrlTag
				if (NewUnrealizedGainAccount not entered)
					NewUnrealizedGainAccount = DerivedUnrealizedGainAccount		
				if (NewUnrealizedLossAccount not entered)
					NewUnrealizedLossAccount = DerivedUnrealizedLossAccount		
				if (NewTranslationGainAccount not entered)
					NewTranslationGainAccount = DerivedTranslationGainAccount		
				if (NewTranslationLossAccount not entered)
					NewTranslationLossAccount = DerivedTranslationLossAccount
				if (NewCloseToAccount		  not entered
				and NewCloseToAccount		!= GeneralLedgerChartAccount)
					NewCloseToAccount		  = DerivedCloseToAccount

				if (ChartType.Posting
				and SystemAccount entered
				and !InterEntityAndRetainEarningAccount)
					if (FinanceEnterpriseGroup.SystemSubAccount entered)
						if (!GeneralLedgerSubAccount = FinanceEnterpriseGroup.SystemSubAccount)
							initialize SystemAccount
					else
						if (GeneralLedgerSubAccount entered)
							initialize SystemAccount






			Exit Rules
	
				if (NewTranslationCode not entered)
					NewTranslationCode			= TranslationCode
				if (NewRevalue not entered)
					NewRevalue					= Revalue
				if (NewRequireProject not entered)
					NewRequireProject			= RequireProject

				if (ReportingChart entered)
					if (!IsTopNode)
						if (NewAccount entered)
							invoke SetLevel
						LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount
						include CreateShadowForAccount
				





				include TriggerBODForCreateOrUpdate

		Create is a Create Action
		
            Field Rules
                SequenceNumber autosequence using FinanceEnterpriseGroup.GeneralLedgerChartAccountLastSeq

			Action Rules
				if (!ChartType.Node)
					include CheckValidContext
							
				if (!IsTopNode)
					if (NewAccount entered)
						GeneralLedgerChartAccount	= SummaryNodeString				
						ChartType					= ChartType.Summary
						ChartSection				= DisplayChartSection
						TopNode 					= DerivedTopNode
						if (!DisplayAccount entered)
							DisplayAccount				= NewAccount
						 
				if (IsTopNode
				or  ChartType.Summary)
					Active					= true
						
				if (NewTranslationCode not entered)
					NewTranslationCode			= DerivedTranslationCode
				if (NewRevalue not entered)
					NewRevalue					= DerivedRevalue
				if (NewRequireProject not entered)
					NewRequireProject			= DerivedRequireProject
				if (NewXbrlTag not entered)
					NewXbrlTag					= DerivedXbrlTag
				else
					XbrlTag						= NewXbrlTag
				if (NewUnrealizedGainAccount not entered)
					NewUnrealizedGainAccount = DerivedUnrealizedGainAccount		
				if (NewUnrealizedLossAccount not entered)
					NewUnrealizedLossAccount = DerivedUnrealizedLossAccount		
				if (NewTranslationGainAccount not entered)
					NewTranslationGainAccount = DerivedTranslationGainAccount		
				if (NewTranslationLossAccount not entered)
					NewTranslationLossAccount = DerivedTranslationLossAccount
				if (NewCloseToAccount		  not entered
				and NewCloseToAccount		!= GeneralLedgerChartAccount)
					NewCloseToAccount		  = DerivedCloseToAccount

				if (ChartType.Posting
				and SystemAccount entered
				and !InterEntityAndRetainEarningAccount)
					if (FinanceEnterpriseGroup.SystemSubAccount entered)
						if (!GeneralLedgerSubAccount = FinanceEnterpriseGroup.SystemSubAccount)
							initialize SystemAccount
					else
						if (GeneralLedgerSubAccount entered)
							initialize SystemAccount






			Exit Rules
	
				if (NewTranslationCode not entered)
					NewTranslationCode			= TranslationCode
				if (NewRevalue not entered)
					NewRevalue					= Revalue
				if (NewRequireProject not entered)
					NewRequireProject			= RequireProject

				if (!SkipHierarchy)
					if (!ChartType.Posting
					or  InvokedByCreateWithin)
						invoke Create ReportingChartAccount
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingChart			    = ReportingChart
							invoked.ParentChartAccount 			= ParentAccount 
							invoked.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
							invoked.ChartAccountNode 			= DerivedTopNode
							invoked.TranslationCode				= NewTranslationCode
							invoked.Revalue						= NewRevalue
							invoked.RequireProject				= NewRequireProject
							invoked.XbrlTag						= NewXbrlTag
							invoked.DisplayAccount				= DisplayAccount
							invoked.UnrealizedGainAccount  		= NewUnrealizedGainAccount
							invoked.UnrealizedLossAccount  		= NewUnrealizedLossAccount
							invoked.TranslationGainAccount		= NewTranslationGainAccount
							invoked.TranslationLossAccount 		= NewTranslationLossAccount
							invoked.CloseToAccount 				= NewCloseToAccount

							invoked.NewDisplayOrder				= NewDisplayOrder
							invoked.BypassNewStructureNotification = BypassNewStructureNotification
							invoked.IncludeInBudgetEdit			= IncludeInBudgetEdit
						if (SummaryChartAccountMaintenance entered)
							for each UnusedLeafRel
								if (each.NotUsedInHierarchy
								and ChartSection = each.GeneralLedgerChartAccount.ChartSection
								and each within SummaryChartAccountMaintenance)
									invoke Create ReportingChartAccount
										invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
										invoked.ParentChartAccount			= GeneralLedgerChartAccount
										invoked.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
										invoked.ChartAccountNode   			= DerivedTopNode
										invoked.Revalue						= each.Revalue
										invoked.RequireProject				= each.RequireProject
										invoked.XbrlTag						= each.XbrlTag
										invoked.TranslationCode				= each.TranslationCode
										invoked.DisplayAccount				= each.DisplayAccount
										invoked.UnrealizedGainAccount  		= NewUnrealizedGainAccount
										invoked.UnrealizedLossAccount  		= NewUnrealizedLossAccount
										invoked.TranslationGainAccount 		= NewTranslationGainAccount
										invoked.TranslationLossAccount 		= NewTranslationLossAccount
										invoked.CloseToAccount 				= NewCloseToAccount
										invoked.IncludeInBudgetEdit			= IncludeInBudgetEdit
					else
					if (!SkipPropagate)
						for each SummariesWithGroupsRel
							if (GeneralLedgerChartAccount within each.SummaryChartAccountMaintenance)
								LocalTopNode = each.TopNode
								if (!SubordinateInLocalTopNodeRel exists
								and ChartSection		=  each.GeneralLedgerChartAccount.ChartSection)
									ParentAccount = each.GeneralLedgerChartAccount
									invoke Create ReportingChartAccount
										invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
										invoked.ReportingChart				= ReportingChart
										invoked.ParentChartAccount 			= each.GeneralLedgerChartAccount
										invoked.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
										invoked.ChartAccountNode 			= LocalTopNode
										invoked.Revalue						= Revalue
										invoked.RequireProject				= RequireProject
										invoked.XbrlTag						= XbrlTag
										invoked.TranslationCode				= TranslationCode
										invoked.DisplayAccount				= DisplayAccount
										invoked.UnrealizedGainAccount  		= NewUnrealizedGainAccount
										invoked.UnrealizedLossAccount  		= NewUnrealizedLossAccount
										invoked.TranslationGainAccount 		= NewTranslationGainAccount
										invoked.TranslationLossAccount 		= NewTranslationLossAccount
										invoked.CloseToAccount 				= NewCloseToAccount
										invoked.IncludeInBudgetEdit			= IncludeInBudgetEdit
			
				if (ReportingChart entered)
					if (!IsTopNode)
						if (NewAccount entered)
							invoke SetLevel
						LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount
						include CreateShadowForAccount
				





				include TriggerBODForCreateOrUpdate
															
		CreateCopy is a Create Action
			restricted
            Field Rules
                SequenceNumber autosequence using FinanceEnterpriseGroup.GeneralLedgerChartAccountLastSeq
			Entrance Rules
				include CheckValidContext
				CopyStructureMode = true
			Exit Rules
				include TriggerBODForCreateOrUpdate
					
		Update is an Update Action
		
			Local Fields
				LocalRevalue				is Boolean
				LocalRequireProject			is Boolean
				LocalXbrlTag				is Alpha 60
				LocalIsGainLossAccount		is Boolean
				RetainDefaultValues 		is Boolean
				LocalNewCloseToAccount		is like GeneralLedgerChartAccount
			Field Rules
			Action Rules
				if (ChartType.Posting
				and SystemAccount entered
				and !InterEntityAndRetainEarningAccount)
					if (FinanceEnterpriseGroup.SystemSubAccount entered)
						if (!GeneralLedgerSubAccount = FinanceEnterpriseGroup.SystemSubAccount)
							initialize SystemAccount
					else
						if (GeneralLedgerSubAccount entered)
							initialize SystemAccount





				UseInputValue = true
				LocalNewCloseToAccount	= NewCloseToAccount
				if (ChartType.Summary)

					ChartSection			= DisplayChartSection
					ChartType				= DisplayChartType
					TranslationCode			= NewTranslationCode
					Revalue					= NewRevalue
					RequireProject			= NewRequireProject
					XbrlTag					= NewXbrlTag
				else
					LocalTranslationCode	= NewTranslationCode
					LocalRevalue			= NewRevalue
					LocalRequireProject		= NewRequireProject
					LocalXbrlTag			= NewXbrlTag
					LocalIsGainLossAccount	= NewIsGainLossAccount
					LocalIncludeInBudgetEdit = IncludeInBudgetEdit

			Exit Rules
				
				UseInputValue = false
				ParentAccount	= ParentRel.ParentChartAccount
				LocalUpdateChartAccount = GeneralLedgerChartAccount
				if (ChartType.Summary)
					LocalTranslationCode	= TranslationCode
					LocalRevalue			= Revalue
					LocalRequireProject		= RequireProject
					LocalXbrlTag			= XbrlTag
				if (!ChartType.Summary)
					if (!LocalTranslationCode entered)
						LocalTranslationCode	= TranslationCode
						NewTranslationCode		= TranslationCode
					if (!LocalXbrlTag entered)
						LocalXbrlTag			= XbrlTag
						NewXbrlTag				= XbrlTag
				RetainDefaultValues		= false
				if (NewDisplayOrder entered)

					RetainDefaultValues		= true
				invoke Update UpdateReportingChartAccountRel
					invoked.DisplayAccount			= DisplayAccount
					invoked.TranslationCode			= LocalTranslationCode
					invoked.Revalue					= LocalRevalue
					invoked.RequireProject			= LocalRequireProject
					invoked.XbrlTag					= LocalXbrlTag
					invoked.UnrealizedGainAccount	= NewUnrealizedGainAccount
					invoked.UnrealizedLossAccount	= NewUnrealizedLossAccount
					invoked.TranslationGainAccount	= NewTranslationGainAccount
					invoked.TranslationLossAccount	= NewTranslationLossAccount
					invoked.CloseToAccount 			= LocalNewCloseToAccount
					invoked.IsGainLossAccount		= LocalIsGainLossAccount

					invoked.IncludeInBudgetEdit		= LocalIncludeInBudgetEdit
					invoked.RetainDefaultValues		= RetainDefaultValues
					if ((NewDisplayOrder entered)
					and (NewDisplayOrder != HierarchyRecordRel.DisplayOrder))
						invoked.NewDisplayOrder			= NewDisplayOrder
				UseInputValue = true
				NewCloseToAccount		= LocalNewCloseToAccount
				
				

				include TriggerBODForCreateOrUpdate
				
		Delete is a Delete Action
			valid when (EligibleToDelete)
		
			Entrance Rules

			    if (ChartType != 1
				and ChartType != 2)
					constraint (!Active)
						"CannotDeleteActiveChartAccount"

				invoke Delete ReportingChartAccount(GeneralLedgerChartAccount) set
				invoke Delete ReportingChartAccount(GeneralLedgerChartAccount) set 
				include DeleteRules
			Action Rules

		ClearUsedByATransaction is a Set Action 
			restricted 
			Parameters 
				PrmFinanceEnterpriseGroup	 is a FinanceEnterpriseGroup
				PrmChartAccountNode			 is a GeneralLedgerChartAccount
			Instance Selection 
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    TopNode = PrmChartAccountNode
				and    ChartType.Summary)
			Action Rules 
				Instance Rules
					UsedByATransaction = false

		DeleteAll is a Delete Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				include DeleteRules
		
		DeleteAllChartAccount is a Set Action 
			restricted 
			
			Parameters 
				PrmFinanceEnterpriseGroup	 is a FinanceEnterpriseGroup
				PrmChartAccountNode			 is a GeneralLedgerChartAccount
				PrmReportingChart			 is a ReportingChart
			Instance Selection 
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    TopNode = PrmChartAccountNode)
				
			Action Rules 
				Set Rules 
					Exit Rules 		
						invoke Delete PrmReportingChart 
				
				Instance Rules 
					invoke DeleteAll  	 	
		
		UpdateChartAccount is an Instance Action
			restricted
			Parameters
				PrmTranslationCode 			is like GeneralLedgerTranslationCode
					default label is "TranslationCode"
				PrmRevalue 					is Boolean
					default label is "Revalue"
				PrmRequireProject			is Boolean
					default label is "Require_<FinanceEnterpriseGroup.ProjectLabel>"
				PrmXbrlTag		 			is Alpha 60
					default label is "XbrlTag"
				PrmUnrealizedGainAccount	is like GeneralLedgerChartAccount
					default label is "UnrealizedGainAccount"
				PrmUnrealizedLossAccount	is like GeneralLedgerChartAccount
					default label is "UnrealizedLossAccount"
				PrmTranslationGainAccount	is like GeneralLedgerChartAccount
					default label is "TranslationGainAccount"
				PrmTranslationLossAccount	is like GeneralLedgerChartAccount
					default label is "TranslationLossAccount"
				PrmCloseToAccount			is like GeneralLedgerChartAccount
					default label is "CloseToAccount"
				RetainDefaultValues 		is Boolean
			Action Rules
				if (ChartType.Summary)
					if (!RetainDefaultValues)
						TranslationCode			= PrmTranslationCode
						Revalue					= PrmRevalue
						RequireProject			= PrmRequireProject
						XbrlTag					= PrmXbrlTag
			Exit Rules
				LocalReportChartAccount 	= GeneralLedgerChartAccount 
				for each NextLevelChildRecordsRel
					LocalUpdateChartAccount		= each.GeneralLedgerChartAccount
					invoke UpdateReportChartAccount UpdateReportingChartAccountRel
						if (!RetainDefaultValues)
							invoked.PrmTranslationCode			= TranslationCode
							invoked.PrmRevalue					= PrmRevalue
							invoked.PrmRequireProject			= PrmRequireProject
							invoked.PrmXbrlTag					= XbrlTag
							invoked.PrmUnrealizedGainAccount	= PrmUnrealizedGainAccount
							invoked.PrmUnrealizedLossAccount	= PrmUnrealizedLossAccount
							invoked.PrmTranslationGainAccount	= PrmTranslationGainAccount
							invoked.PrmTranslationLossAccount	= PrmTranslationLossAccount
							invoked.PrmCloseToAccount 			= PrmCloseToAccount
						invoked.RetainDefaultValues			= RetainDefaultValues
				include TriggerBODForCreateOrUpdate
				
		AddPostingAccountToChart is an Instance Action
			valid when (ChartType.Posting)
			Parameters
				PrmChart					is a ReportingChart
					default label is "Chart"
				PrmParentChartAccount		is a GeneralLedgerChartAccount
					default label is "ParentChartAccount"

			Parameter Rules
				PrmChart
					required
					LocalTopNode			= PrmChart.ChartAccountNode
					constraint (!SubordinateInLocalTopNodeRel exists)
						"AlreadyExistsInChart"
					if (PrmChart = FinanceEnterpriseGroup.UnusedAccountChart)
						constraint (InvokedByUnusedStructure)
							"ActionNotValidForThisChart"

				PrmParentChartAccount

					default to PrmChart.ChartAccountNode
					constraint (PrmParentChartAccount != GeneralLedgerChartAccount)
						"CannotCreateWithinSelf"
					constraint (!PrmParentChartAccount.ChartType.Posting)	
						"CannotBePostingLevel"	
					if (!ReportingChart.UnusedDimensionStructure)
						if (!PrmParentChartAccount = PrmChart.ChartAccountNode) 			
							constraint (PrmParentChartAccount.ChartSection = ChartSection)
								"ChartSectionMustBe<ChartSection>"

			Action Rules
				
				invoke Create ReportingChartAccount
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.ParentChartAccount 			= PrmParentChartAccount
					invoked.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
					invoked.DisplayAccount				= GeneralLedgerChartAccount
					invoked.ChartAccountNode 			= PrmChart.ChartAccountNode
					invoked.DefaultSettings				= true











				invoke BuildShadowFileForAccount PrmChart
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmAccount				  = GeneralLedgerChartAccount

		AddPostingToSummary is an Instance Action

			Action Rules
				include CheckValidContext
							
				ParentAccount = ContextAccount
				invoke Create ReportingChartAccount
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.ParentChartAccount 			= ContextAccount
					invoked.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
					invoked.DisplayAccount				= GeneralLedgerChartAccount
					invoked.ChartAccountNode 			= ReportingChart.ChartAccountNode
					invoked.TranslationCode				= DerivedTranslationCode
					invoked.Revalue						= DerivedRevalue
					invoked.RequireProject				= DerivedRequireProject
					invoked.XbrlTag						= DerivedXbrlTag
					invoked.UnrealizedGainAccount  		= DerivedUnrealizedGainAccount
					invoked.UnrealizedLossAccount  		= DerivedUnrealizedLossAccount
					invoked.TranslationGainAccount 		= DerivedTranslationGainAccount
					invoked.TranslationLossAccount 		= DerivedTranslationLossAccount
					if (DerivedCloseToAccount			!= GeneralLedgerChartAccount)
						invoked.CloseToAccount 			= DerivedCloseToAccount
				LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount					
				include CreateShadowForAccount
				
		CreateChildWithin is an Instance Action
			valid when (ChartType.Summary)
			default label is "CreateChildAccount"
			Parameters
				AccountType					is Numeric 1
					States

						Asset 					value is 1
						Liability				value is 2
						Equity 					value is 3
						Revenue					value is 4
						Expense					value is 5

						StatCumulative			value is 6
						StatNonCumulative		value is 7
				NewSummaryAccount	 		is AlphaUpper 26 
				NewDisplayAccount	 		is AlphaUpper 26
				NewDescription 	 	 		is like Description
				NewDisplayOrder				is Numeric 6
					default label is "DisplayOrder"
				NewSummaryChartAccountMaintenance   is a GeneralLedgerChartAccount group
				NewTranslationCode			is a GeneralLedgerTranslationCode
				NewRevalue					is Boolean
				NewRequireProject			is Boolean
				NewXbrlTag					is Alpha 60
				NewBudgetIdentifier			is a BudgetIdentifier

			Parameter Rules
				NewSummaryAccount
					required		
				NewDescription		
					required
				NewDisplayAccount
					default to NewSummaryAccount
			
			Action Rules
				include CheckValidContext
							
			Exit Rules
				invoke Create
					invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.DisplayChartSection				= GeneralLedgerChartAccount.ChartSection						
					invoked.AccountType						= AccountType
					invoked.ChartType						= ChartType.Summary
					invoked.NewAccount			  			= NewSummaryAccount
					invoked.AccountDescription     			= NewDescription
					invoked.DisplayAccount		  			= NewDisplayAccount
					invoked.NewDisplayOrder					= NewDisplayOrder
					invoked.TranslationCode     			= NewTranslationCode
					invoked.Revalue     					= NewRevalue
					invoked.RequireProject					= NewRequireProject
					invoked.XbrlTag     					= NewXbrlTag
					invoked.SummaryChartAccountMaintenance	= NewSummaryChartAccountMaintenance
					invoked.ParentAccount					= GeneralLedgerChartAccount
					invoked.BudgetIdentifier			    = NewBudgetIdentifier
					invoked.SkipPropagate		  			= true 
					invoked.InvokedByCreateWithin 			= true
					
		Move is an Instance Action
			Parameters
				PrmContextAccount	is a GLChartAccountContextValue
				NewParent 			is a GeneralLedgerChartAccount
				RetainDefaultValues is Boolean
							
			Parameter Rules
				PrmContextAccount
					initial value is GeneralLedgerChartAccount			
				NewParent
					default to DerivedTopNode
					constraint (NewParent != GeneralLedgerChartAccount)
						"CannotMoveToSelf"
					constraint (NewParent.ChartType.Summary
					or			NewParent.ChartType.Node)
						"ParentMustBeASummaryNode"
					constraint (NewParent.TopNode = DerivedTopNode)
						"ParentDoesNotBelongToThisChart"
					if (!parentcontext.name = "ReportingChartAccountUpload")
						if (ChartType.Summary)
							constraint (DerivedCountOfDescendants < 300)
								"BranchIsTooLargeToMoveOnline;UseChartExport/uploadToAssignNewParent"
					if (!NewParent.ChartSection = 0)
						constraint (NewParent.ChartSection = GeneralLedgerChartAccount.ChartSection)
							"CannotMoveToADifferentChartSection"
					if (!NewParent.ChartType.Node)
						LocalGeneralLedgerChartAccount = NewParent
						constraint (!DescendantInShadowRel exists)
							"<GeneralLedgerChartAccount>MayNotBeMovedToADescendantOfItsOwnBranch" 
						TopNodeFound = false
						while (!TopNodeFound)
							constraint (GeneralLedgerChartAccount != LocalGeneralLedgerChartAccount.HierarchyRecordRel.ParentChartAccount)
								"<GeneralLedgerChartAccount>MayNotBeMovedToADescendantOfItsOwnBranch" 
							if (LocalGeneralLedgerChartAccount.HierarchyRecordRel.ParentChartAccount.ChartType.Node)
								TopNodeFound = true
							else
								LocalGeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.HierarchyRecordRel.ParentChartAccount																

			Local Fields
				OldParent is like GeneralLedgerChartAccount
																		
			Entrance Rules
				include CheckValidContext
				
				OldParent = DerivedParentAccount
				
				if (RetainDefaultValues)
					LocalUnrealizedGainAccount	= ParentRel.UnrealizedGainAccount
					LocalUnrealizedLossAccount	= ParentRel.UnrealizedLossAccount
					LocalTranslationGainAccount	= ParentRel.TranslationGainAccount
					LocalTranslationLossAccount	= ParentRel.TranslationLossAccount
					LocalTranslationCode		= ParentRel.TranslationCode
					LocalRevalue				= ParentRel.Revalue
					LocalRequireProject			= ParentRel.RequireProject
					LocalXbrlTag				= ParentRel.XbrlTag
					LocalCloseToAccount			= ParentRel.CloseToAccount
				else
					ParentAccount				= NewParent
					LocalUnrealizedGainAccount	= DerivedUnrealizedGainAccount
					LocalUnrealizedLossAccount	= DerivedUnrealizedLossAccount
					LocalTranslationGainAccount	= DerivedTranslationGainAccount
					LocalTranslationLossAccount	= DerivedTranslationLossAccount
					LocalTranslationCode		= DerivedTranslationCode
					LocalRevalue				= DerivedRevalue
					LocalRequireProject			= DerivedRequireProject
					LocalXbrlTag				= DerivedXbrlTag
					LocalCloseToAccount			= DerivedCloseToAccount

			Action Rules
				TranslationCode	= LocalTranslationCode
				Revalue			= LocalRevalue
				RequireProject	= LocalRequireProject
				XbrlTag			= LocalXbrlTag
				ParentAccount 	= NewParent
				LocalUpdateChartAccount = GeneralLedgerChartAccount				
				invoke Update UpdateReportingChartAccountRel
					invoked.ParentChartAccount		 	= NewParent
					invoked.TranslationCode 			= LocalTranslationCode
					invoked.Revalue     				= LocalRevalue
					invoked.RequireProject				= LocalRequireProject
					invoked.XbrlTag     				= LocalXbrlTag
					invoked.UnrealizedGainAccount  		= LocalUnrealizedGainAccount
					invoked.UnrealizedLossAccount  		= LocalUnrealizedLossAccount
					invoked.TranslationGainAccount 		= LocalTranslationGainAccount
					invoked.TranslationLossAccount 		= LocalTranslationLossAccount
					invoked.CloseToAccount 				= LocalCloseToAccount
					invoked.RetainDefaultValues			= RetainDefaultValues
					invoked.DisplayOrder				= blank
					invoked.NewDisplayOrder				= NewDisplayOrder

			Exit Rules
 				LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount
 							
				include CreateShadowForAccount		
				if (ChartType.Summary)
					TopNodeFound = false
					while (!TopNodeFound)
						if (LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.ChartType.Summary)
							if (BudgetIdentifier entered)	
								constraint (BudgetIdentifier != LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.BudgetIdentifier)
									"BudgetIdentifier<BudgetIdentifier>AlreadyInUseBy<LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.DisplayAccount>"  
							if (LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.BudgetIdentifier entered)
								I1 += 1
								BudgetIdentifierArray.BudgetIdentifier[I1] = LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.BudgetIdentifier				

						if (LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount.ChartType.Node)
							TopNodeFound = true
						else
							LocalGeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.SubordinateInTopNodeRel.ParentChartAccount	
						
					invoke WalkDownHierarchy
						invoked.PrmBudgetIdentifierArray = BudgetIdentifierArray	
						invoked.PrmBudgetIdentifierCount = I1					
				
				invoke NotifyMoveAccount NotifyBudgetTemplateRel
					invoked.PrmAccount   = GeneralLedgerChartAccount
					invoked.PrmOldParent = OldParent
					invoked.PrmNewParent = NewParent				  
				include TriggerBODForCreateOrUpdate
				
		WalkDownHierarchy is an Instance Action
			restricted
			
			Parameters
				PrmBudgetIdentifierArray	is a BudgetIdentifierArray
					default label is "BudgetIdentifierArray"
				PrmBudgetIdentifierCount	is Numeric 3
					default label is "BudgetIdentifierCount"
							
			Action Rules
				invoke SetLevel
				
				for each ChartAccountChildrenRel
 					LocalGeneralLedgerChartAccount = each.GeneralLedgerChartAccount
					include CreateShadowForAccount							
					if (ChartType.Summary)
						if (PrmBudgetIdentifierArray entered)
							if (each.BudgetIdentifier entered)
								I2 = 1
								while (I2 <= PrmBudgetIdentifierCount)
									constraint (PrmBudgetIdentifierArray.BudgetIdentifier[I2] != each.BudgetIdentifier)
										"BudgetIdentifier<each.BudgetIdentifier>AlreadyInUseBy<each.DisplayAccount>" 
									I2 += 1 					
						invoke WalkDownHierarchy each.GeneralLedgerChartAccount	
							invoked.PrmBudgetIdentifierArray = PrmBudgetIdentifierArray	
							invoked.PrmBudgetIdentifierCount = PrmBudgetIdentifierCount							

		EditDescendantsBudgetIdentifier is an Instance Action
			restricted
			
			Parameters
				PrmBudgetIdentifierArray	is a BudgetIdentifierArray
					default label is "BudgetIdentifierArray"
				PrmBudgetIdentifierCount	is Numeric 3
					default label is "BudgetIdentifierCount"
					
			Action Rules
				
				for each ChartAccountChildrenRel
					if (each.ChartType.Summary)
						if (each.BudgetIdentifier entered)
							I2 = 1
							while (I2 <= PrmBudgetIdentifierCount)
								constraint (PrmBudgetIdentifierArray.BudgetIdentifier[I2] != each.BudgetIdentifier)
									"BudgetIdentifier<each.BudgetIdentifier>AlreadyInUseBy<each.DisplayAccount>" 
								I2 += 1 					
						invoke EditDescendantsBudgetIdentifier each.GeneralLedgerChartAccount
							invoked.PrmBudgetIdentifierArray = PrmBudgetIdentifierArray	
							invoked.PrmBudgetIdentifierCount = PrmBudgetIdentifierCount	

		SetIncludeBudgetEditOnPostingAccounts is an Instance Action
			valid when (ChartType.Summary)
			
			Parameters
				IncludeOrExclude	is Numeric 1
					States
						Include		value is 1
						Exclude		value is 2
			
			Parameter Rules
				IncludeOrExclude
					required
					
			Action Rules
			
				for each GLChartAccountShadow(SummaryGeneralLedgerChartAccount) set
					if (each.ChartType.Posting)
						invoke Update each.GeneralLedgerChartAccount
							if (IncludeOrExclude.Include)
								invoked.IncludeInBudgetEdit = true
							else
								invoked.IncludeInBudgetEdit = false

		RemoveBranch	is an Instance Action
			valid when (ChartType.Summary)
			disable multiple instance selection
			confirmation required
				"ThisWillRemoveTheEntireBranchOfTheHierarchy.ItMayTakeSomeTimeForItToBeRemoved."
			completion message is "Remove_BranchSubmitted"			
			
			Action Rules
				constraint (DerivedShadowCount < 1000)
					"BranchIsTooLargeToRemove"
							
				invoke DeleteAllPostingsForSummary GLChartAccountShadow
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmReportingChart			= ReportingChart
					invoked.PrmParentChartAccount		= GeneralLedgerChartAccount
				
		RecursiveRemove is an Instance Action
			restricted
			
			Action Rules
				if (ChartType.Summary)
					for each ChartAccountChildrenRel
						invoke RecursiveRemove each
					
				invoke RemoveFromChart
																			
		RemoveFromChart is an Instance Action
			valid when (EligibleToRemove)
			
			Local Fields
				OldParent is like GeneralLedgerChartAccount
																		
			Entrance Rules
				include CheckValidContext

				constraint (!ChartAccountHierarchyDetailRel exists)
					"CannotRemove,ChildrenExist"
				OldParent = DerivedParentAccount
									
				invoke NotifyRemoveAccount NotifyBudgetTemplateRemoveRel
					invoked.PrmAccount   = GeneralLedgerChartAccount
					invoked.PrmOldParent = OldParent
				invoke Delete HierarchyRecordRel
				LocalGeneralLedgerChartAccount = GeneralLedgerChartAccount
				invoke Delete GLChartAccountShadowRel
			
			Action Rules
				if (ChartType.Summary)
					invoke Delete
					
			Exit Rules




												
		AddAccountToCharts is an Instance Action
			valid when (ChartType.Posting)
			
			Parameters
				LikeChartAccount is a GeneralLedgerChartAccount
				
			Parameter Rules
				LikeChartAccount
					initial value is Account.LikeChartAccount
					required
					constraint (LikeChartAccount.ChartType.Posting)
						"MustBePostingType"
					constraint (LikeChartAccount.ChartSection = ChartSection)
						"<FinanceEnterpriseGroup.AccountLabel>_<LikeChartAccount>ChartSectionMustBe<ChartSection>"
						
			Action Rules
				for each LikeChartAccount.ReportingChartAccount(GeneralLedgerChartAccount) set
					LocalTopNode = each.ChartAccountNode
					if (!each.ReportingChart.UnusedDimensionStructure)
						if (!SubordinateInLocalTopNodeRel exists)						
							invoke Create ReportingChartAccount
								fill in fields from each
								invoked.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
								invoked.ReportingChart						 = each.ReportingChart
								invoked.ChartAccountNode					 = each.ChartAccountNode
								invoked.GeneralLedgerChartAccount 			 = GeneralLedgerChartAccount
								invoked.ParentChartAccount 			 		 = each.ParentChartAccount							
								invoked.DisplayAccount					     = GeneralLedgerChartAccount
						invoke BuildShadowFileForAccount each.ReportingChart
							invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
							invoked.PrmAccount				  = GeneralLedgerChartAccount		

		Activate is an Instance Action
			valid when (EligibleToActivate)
			Action Rules
				Active = true
			Exit Rules
				include TriggerBODForCreateOrUpdate
						
		Deactivate is an Instance Action
			valid when (EligibleToDeactivate)
			Action Rules
				Active = false	
			Exit Rules
				include TriggerBODForCreateOrUpdate
					
		ResequencePeers is an Instance Action
			valid when (ReportingChart entered)
			
			Action Rules
								
				for each SiblingsRel
					LocalDisplayOrder += 1
					invoke UpdateDisplayOrder each
						invoked.PrmDisplayOrder = LocalDisplayOrder 

		ResequenceAllDisplayOrders is an Instance Action
			valid when (ReportingChart entered)
			Action Rules
				constraint (IsNegativeDisplayOrder)
					"ActionIsNotAllowed"
				for each distinct ParentChartAccount in ByDistinctOrderRel
					LocalParentAccount = each.ParentChartAccount
					initialize LocalDisplayOrder
					for each AllSiblingsRel
						LocalDisplayOrder += 1
						invoke UpdateDisplayOrder each
							invoked.PrmDisplayOrder = LocalDisplayOrder

		ResequencePeersByDisplayOrder is an Instance Action
			restricted
			
			Parameters
				PrmDisplayOrder		is Numeric 6
					default label is "DisplayOrder"
				NewRecord			is Boolean
					
			Parameter Rules
				PrmDisplayOrder
					required
			
			Local Fields
				TempDisplayOrder	is Numeric 6
				OldDisplayOrder		is Numeric 6
				
			Action Rules
				constraint (!any SiblingsRel.DisplayOrder < 1)
					"MustRunResequencePeersActionFirst;_NonPositiveDisplayOrderValuesExist"
				if (!NewRecord)
					constraint (PrmDisplayOrder <= DerivedSiblingsCount)
						"NewDisplayOrderMustBeLessThanOrEqualTo<DerivedSiblingsCount>"
					
				OldDisplayOrder = HierarchyRecordRel.DisplayOrder
				
				for each SiblingsRel
					TempDisplayOrder = each.DisplayOrder
					if (each.GeneralLedgerChartAccount != GeneralLedgerChartAccount)
						if (each.DisplayOrder >= PrmDisplayOrder)
							if (each.DisplayOrder < OldDisplayOrder
							or  NewRecord)
								TempDisplayOrder = each.DisplayOrder + 1
						if (each.DisplayOrder <= PrmDisplayOrder
						and each.DisplayOrder > OldDisplayOrder)
							TempDisplayOrder = each.DisplayOrder - 1
						if (TempDisplayOrder != each.DisplayOrder)
							invoke UpdateDisplayOrder each
								invoked.PrmDisplayOrder = TempDisplayOrder
 												 		
				invoke UpdateDisplayOrder HierarchyRecordRel
					invoked.PrmDisplayOrder		= PrmDisplayOrder

        FixupSequenceNumbers is a Set Action
            restricted

            Parameters
                PrmFinanceEnterpriseGroup              is a FinanceEnterpriseGroup
                	default label is "FinanceEnterpriseGroup"
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
            Action Rules
                Instance Rules
                    if (SequenceNumber = 0 )
                        increment FinanceEnterpriseGroup.GeneralLedgerChartAccountLastSeq                    
                        SequenceNumber = FinanceEnterpriseGroup.GeneralLedgerChartAccountLastSeq
                         					
		SetLevel is an Instance Action
			restricted
			
			Action Rules	
				if (!ChartType.Posting)
					LevelCalcAccount = GeneralLedgerChartAccount
					LocalLevel		 = 0
					while (!LevelCalcAccount = DerivedTopNode)
						LevelCalcAccount	 = LevelCalcAccount.SubordinateInTopNodeRel.ParentChartAccount
						LocalLevel			 += 1
					Level 					 = LocalLevel
					ParentChartAccount.GeneralLedgerChartAccount = DerivedParentAccount		
		
		UpdateLevel is an Instance Action
			restricted
			
			Parameters
				PrmLevel			is Numeric 3
					default label is "Level"
				PrmParentAccount	is like GeneralLedgerChartAccount
					default label is "ParentAccount"
				
			Action Rules
				if (!ChartType.Posting)	
					Level										 = PrmLevel
					ParentChartAccount.GeneralLedgerChartAccount = PrmParentAccount	

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord			
				
		CleanupUnusedAccounts is a Set Action
			restricted
			
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    NotUsedInAChart)

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart		  is a ReportingChart
					default label is "Chart"					
									
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmReportingChart
					required
					constraint (PrmReportingChart.UnusedDimensionStructure)
						"ActionNotValidForChart<PrmReportingChart>"
						
			Action Rules
				Instance Rules
					LocalInvokedByUnusedStructure = true
					invoke AddPostingAccountToChart
						invoked.PrmChart			  = PrmReportingChart
						invoked.PrmParentChartAccount = PrmReportingChart.ChartAccountNode			
					
		RebuildDisplayAccount is a Set Action
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
					
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
					
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
				
			Local Fields
				I1					is Numeric 2
				I2					is Numeric 2
				
			Action Rules
				Instance Rules
					if (ChartType.Posting)
						DisplayAccount 		= GeneralLedgerChartAccount
					else
					if (ChartType.Summary)
						I1 = 1
						I2 = GeneralLedgerChartAccount size
						while (GeneralLedgerChartAccount[I1] != "_")
							I1 += 1
						I1 +=1
						DisplayAccount = GeneralLedgerChartAccount[I1:I2]
												
		ExportToUpload is an Instance Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup  is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart		   is a ReportingChart
					default label is "ReportingChart"
				PrmCopyToChart			   is like ReportingChart
					default label is "CopyToChart"
				SingleRecordOnly 	is Boolean
					default label is "SingleRecordOnly"

			Local Fields
				RecordCount			is Numeric 6
													
			Action Rules
				if (!ChartType.Node)
					invoke Create ReportingChartAccountUpload
						fill in fields from this instance
						fill in fields from SubordinateInTopNodeRel
						invoked.FinanceEnterpriseGroup		 = PrmFinanceEnterpriseGroup
						if (PrmCopyToChart entered)
							invoked.ReportingChart 			 = PrmCopyToChart
						else
							invoked.ReportingChart		     = PrmReportingChart
						invoked.ParentAccount		= DerivedParentMinusPrefix 
						if (ChartType.Summary)
							invoked.SummaryAccount  = DerivedSummaryMinusPrefix 

						else
							invoked.SubAccount	    = GeneralLedgerSubAccount
						
				if ((!SingleRecordOnly)
				and (!ChartType.Posting))
					for each ChartAccountChildrenRel
						invoke ExportToUpload each in foreground
							invoked.PrmFinanceEnterpriseGroup		 = PrmFinanceEnterpriseGroup
							invoked.PrmReportingChart				 = PrmReportingChart
							invoked.PrmCopyToChart					 = PrmCopyToChart
						RecordCount += 1
						if (RecordCount = 100)
							commit transaction
							RecordCount = 0				
					commit transaction

		UpdateGLChartAccount is an Update Action
			restricted
			bypass field rules
			
			Exit Rules
				include TriggerBODForCreateOrUpdate
				
		DeleteChartAccountsForAccount is a Set Action
			restricted
			disable checkpoint
			
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccount						is an Account
					default label is "Account"				
			
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccount
					required
			
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	   Account 				  = PrmAccount)
			
			Sort Order
				FinanceEnterpriseGroup
				Account
				GeneralLedgerChartAccount
					
			Action Rules
				Set Rules
					Exit Rules
						invoke Delete PrmAccount
						
				Instance Rules
					invoke Delete
					
			


		CreateOrDeleteAccByGrpRelFromAccountToBlank is a Set Action
            restricted
			Parameters
				PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalCommitCounter				is Numeric 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyFromValue			= GeneralLedgerChartAccount
					LocalKeyToValue				= blank
					if(PrmDeleteFlag)
						invoke Delete CodeBlockRelationDetailFromToRel
					else
						invoke Update CodeBlockRelationDetailFromToRel
							invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
							invoked.CodeBlockRelation                   = PrmCodeBlockRelation
							invoked.GeneralLedgerChartAccount          	= GeneralLedgerChartAccount
							invoked.DefaultToValue                      = PrmDefaultToValue
					increment LocalCommitCounter
					if (LocalCommitCounter > 50)
						commit transaction
						initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromAccountToEntity is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmAccountingEntityRule         is an AccountingEntity group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmAccountingEntityRule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteEntityByGrpRelFromAccountToEntity AccountingEntity
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmAccountingEntityRule	       	= PrmAccountingEntityRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteEntityByGrpRelFromAccountToEntity AccountingEntity
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmAccountingEntityRule	       	= PrmAccountingEntityRule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

		CreateOrDeleteAccByGrpRelFromAccountToUnit is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmAccountingUnitRule         	is an AccountingUnit group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmAccountingUnitRule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteUnitByGrpRelFromAccountToUnit AccountingUnit
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmAccountingUnitRule	       	= PrmAccountingUnitRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteUnitByGrpRelFromAccountToUnit AccountingUnit
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmAccountingUnitRule	       	= PrmAccountingUnitRule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount


        CreateAccountsForCodeBlockDetails is a Set Action
            restricted
            
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmGeneralLedgerChartAccount    is an GeneralLedgerChartAccount
                PrmAccountRule                  is a GeneralLedgerChartAccount group
                PrmProjectRule                  is a Project group
                PrmDefaultToValue               is Alpha 200
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmCreateBlankTo				is Boolean					
                PrmUniqueID						is a UniqueID

            Set Is
                PrmFinanceEnterpriseGroup
                PrmGeneralLedgerChartAccount
                PrmAccountRule
                PrmProjectRule
                PrmDefaultToValue
                PrmCodeBlockRelation
                PrmUniqueID
                                
            Local Fields
            	AccountCounter					is Numeric 5
            	SequenceCounter					is Numeric 5
				LocalAccountArray				is a AccountArray
				LocalChartAccount               is an GeneralLedgerChartAccount
            
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and    SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and    GeneralLedgerChartAccount within PrmAccountRule
                and    Active
                and    ChartType.Posting)
            
            Sort Order
                FinanceEnterpriseGroup
                Account
                GeneralLedgerChartAccount
                    
            Action Rules
                Set Rules
					Exit Rules
						if (AccountCounter > 0)
							invoke CreateCodeBlockRelationDetails Project
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmProjectRule                  = PrmProjectRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmGeneralLedgerChartAccount	= LocalAccountArray.GeneralLedgerChartAccount[1]
                            	invoked.PrmSequenceNumber				= SequenceCounter
                            	invoked.PrmCreateBlankTo				= PrmCreateBlankTo	
                            	invoked.PrmUniqueID						= PrmUniqueID
                        
                Instance Rules
					if (GeneralLedgerChartAccount within PrmAccountRule)
						AccountCounter += 1
						SequenceCounter += 1
						if (AccountCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
							LocalAccountArray.GeneralLedgerChartAccount[AccountCounter] = GeneralLedgerChartAccount
						else
							invoke CreateCodeBlockRelationDetails Project
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmProjectRule                  = PrmProjectRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmGeneralLedgerChartAccount	= LocalAccountArray.GeneralLedgerChartAccount[AccountCounter-1]
                            	invoked.PrmSequenceNumber				= SequenceCounter
                            	invoked.PrmCreateBlankTo				= PrmCreateBlankTo	
                            	invoked.PrmUniqueID						= PrmUniqueID
							initialize LocalAccountArray
							initialize AccountCounter

							AccountCounter = 1
							LocalAccountArray.GeneralLedgerChartAccount[AccountCounter] = GeneralLedgerChartAccount
							


        DeleteAccountsForCodeBlockDetails is a Set Action
            restricted
            
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmGeneralLedgerChartAccount    is an GeneralLedgerChartAccount
                PrmAccountRule                  is a GeneralLedgerChartAccount group
                PrmProjectRule                  is a Project group
                PrmDefaultToValue               is Alpha 200
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmCreateBlankTo				is Boolean
                PrmUniqueID						is a UniqueID

            Set Is
                PrmFinanceEnterpriseGroup
                PrmGeneralLedgerChartAccount
                PrmAccountRule
                PrmProjectRule
                PrmDefaultToValue
                PrmCodeBlockRelation
                PrmUniqueID
                                
            Local Fields
            	AccountCounter					is Numeric 5
            	SequenceCounter					is Numeric 5
				LocalAccountArray				is a AccountArray
				LocalChartAccount               is an GeneralLedgerChartAccount
            
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and    SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and    GeneralLedgerChartAccount within PrmAccountRule
                and    Active
                and    ChartType.Posting)
            
            Sort Order
                FinanceEnterpriseGroup
                Account
                GeneralLedgerChartAccount
                    
            Action Rules
                Set Rules
					Exit Rules
						if (AccountCounter > 0)
							invoke DeleteCodeBlockRelationDetails Project
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmProjectRule                  = PrmProjectRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmGeneralLedgerChartAccount	= LocalAccountArray.GeneralLedgerChartAccount[1]
                            	invoked.PrmSequenceNumber				= SequenceCounter
                            	invoked.PrmCreateBlankTo				= PrmCreateBlankTo
                            	invoked.PrmUniqueID						= PrmUniqueID
                        
                Instance Rules
					if (GeneralLedgerChartAccount within PrmAccountRule)
						AccountCounter += 1
						SequenceCounter += 1
						if (AccountCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
							LocalAccountArray.GeneralLedgerChartAccount[AccountCounter] = GeneralLedgerChartAccount
						else
							invoke DeleteCodeBlockRelationDetails Project
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmProjectRule                  = PrmProjectRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmGeneralLedgerChartAccount	= LocalAccountArray.GeneralLedgerChartAccount[AccountCounter-1]
                            	invoked.PrmSequenceNumber				= SequenceCounter
                            	invoked.PrmCreateBlankTo				= PrmCreateBlankTo 
                            	invoked.PrmUniqueID						= PrmUniqueID
							initialize LocalAccountArray
							initialize AccountCounter

							AccountCounter = 1
							LocalAccountArray.GeneralLedgerChartAccount[AccountCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToProject is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmProjectRule                  is a Project group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmProjectRule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteProjByGrpRelFromAccountToProject Project
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmProjectRule	           		= PrmProjectRule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteProjByGrpRelFromAccountToProject Project
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmProjectRule	           		= PrmProjectRule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension1 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension1Rule               is a FinanceDimension1 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension1Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim1ByGrpRelFromAccountToDimension1 FinanceDimension1
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension1Rule	            = PrmDimension1Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim1ByGrpRelFromAccountToDimension1 FinanceDimension1
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension1Rule	            = PrmDimension1Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension2 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension2Rule               is a FinanceDimension2 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension2Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim2ByGrpRelFromAccountToDimension2 FinanceDimension2
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension2Rule	            = PrmDimension2Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim2ByGrpRelFromAccountToDimension2 FinanceDimension2
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension2Rule	            = PrmDimension2Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension3 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension3Rule               is a FinanceDimension3 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension3Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim3ByGrpRelFromAccountToDimension3 FinanceDimension3
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension3Rule	            = PrmDimension3Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim3ByGrpRelFromAccountToDimension3 FinanceDimension3
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension3Rule	            = PrmDimension3Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension4 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension4Rule               is a FinanceDimension4 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension4Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim4ByGrpRelFromAccountToDimension4 FinanceDimension4
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension4Rule	            = PrmDimension4Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim4ByGrpRelFromAccountToDimension4 FinanceDimension4
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension4Rule	            = PrmDimension4Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension5 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension5Rule               is a FinanceDimension5 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension5Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim5ByGrpRelFromAccountToDimension5 FinanceDimension5
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension5Rule	            = PrmDimension5Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim5ByGrpRelFromAccountToDimension5 FinanceDimension5
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension5Rule	            = PrmDimension5Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension6 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension6Rule               is a FinanceDimension6 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension6Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim6ByGrpRelFromAccountToDimension6 FinanceDimension6
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension6Rule	            = PrmDimension6Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim6ByGrpRelFromAccountToDimension6 FinanceDimension6
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension6Rule	            = PrmDimension6Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

        CreateOrDeleteAccByGrpRelFromAccountToDimension7 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension7Rule               is a FinanceDimension7 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension7Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim7ByGrpRelFromAccountToDimension7 FinanceDimension7
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension7Rule	            = PrmDimension7Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim7ByGrpRelFromAccountToDimension7 FinanceDimension7
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension7Rule	            = PrmDimension7Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

		CreateOrDeleteAccByGrpRelFromAccountToDimension8 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension8Rule               is a FinanceDimension8 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension8Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim8ByGrpRelFromAccountToDimension8 FinanceDimension8
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension8Rule	            = PrmDimension8Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim8ByGrpRelFromAccountToDimension8 FinanceDimension8
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension8Rule	            = PrmDimension8Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

		CreateOrDeleteAccByGrpRelFromAccountToDimension9 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension9Rule               is a FinanceDimension9 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension9Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim9ByGrpRelFromAccountToDimension9 FinanceDimension9
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension9Rule	            = PrmDimension9Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim9ByGrpRelFromAccountToDimension9 FinanceDimension9
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension9Rule	            = PrmDimension9Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount

		CreateOrDeleteAccByGrpRelFromAccountToDimension10 is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
				PrmDimension10Rule               is a FinanceDimension10 group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
                PrmDimension10Rule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalArrayCounter				is Numeric 5
				LocalAccountArray				is a AccountArray
            Instance Selection
            	where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
					Exit Rules
						if (LocalArrayCounter > 0)
							invoke CreateOrDeleteDim10ByGrpRelFromAccountToDimension10 FinanceDimension10
								invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            	invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
                            	invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[1]
								invoked.PrmAccountArray    			    = LocalAccountArray
                            	invoked.PrmDimension10Rule	            = PrmDimension10Rule
                            	invoked.PrmDefaultToValue               = PrmDefaultToValue
								invoked.PrmDeleteFlag					= PrmDeleteFlag
                            	invoked.PrmUniqueID						= PrmUniqueID	
                Instance Rules
					LocalArrayCounter += 1
					if (LocalArrayCounter < FinanceEnterpriseGroup.StructureRelationArraySize)
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount
					else
						invoke CreateOrDeleteDim10ByGrpRelFromAccountToDimension10 FinanceDimension10
							invoked.PrmFinanceEnterpriseGroup       = PrmFinanceEnterpriseGroup
                            invoked.PrmCodeBlockRelation            = PrmCodeBlockRelation
							invoked.PrmAccountArray    			    = LocalAccountArray
                            invoked.PrmAccount						= LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter-1]
                            invoked.PrmDimension10Rule	            = PrmDimension10Rule
                            invoked.PrmDefaultToValue               = PrmDefaultToValue
							invoked.PrmDeleteFlag					= PrmDeleteFlag
                            invoked.PrmUniqueID						= PrmUniqueID	
						initialize LocalAccountArray
						initialize LocalArrayCounter

						LocalArrayCounter = 1
						LocalAccountArray.GeneralLedgerChartAccount[LocalArrayCounter] = GeneralLedgerChartAccount


		CreateOrDeleteAccByGrpRelFromBlankToAccount is a Set Action
            restricted
			Parameters
				PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountRule    				is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
            Set Is
                PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
                PrmAccountRule
				PrmDeleteFlag
                PrmUniqueID
            Local Fields
            	LocalCommitCounter				is Numeric 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyFromValue			= blank
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						invoke Delete CodeBlockRelationDetailFromToRel
					else
						invoke Update CodeBlockRelationDetailFromToRel
							invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
							invoked.CodeBlockRelation                   = PrmCodeBlockRelation
							invoked.GeneralLedgerChartAccount          	= GeneralLedgerChartAccount
							invoked.DefaultToValue                      = PrmDefaultToValue
					increment LocalCommitCounter
					if (LocalCommitCounter > 50)
						commit transaction
						initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromEntityToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountingEntity				is like AccountingEntity
                PrmAccountingEntityArray		is like AccountingEntityArray
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmAccountingEntity
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmAccountingEntityArray.AccountingEntity[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmAccountingEntityArray.AccountingEntity[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmAccountingEntityArray.AccountingEntity[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmAccountingEntityArray.AccountingEntity[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.AccountingEntity           			= PrmAccountingEntityArray.AccountingEntity[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromUnitToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmAccountingEntity				is like AccountingEntity
                PrmAccountingUnit				is like AccountingUnit
                PrmAccountingUnitArray			is like AccountingUnitArray
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmAccountingEntity
				PrmAccountingUnit
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].AccountingUnit entered)
							LocalKeyFromValue	= PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].DerivedEntityAccountingUnit
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].AccountingUnit entered)
							LocalKeyFromValue	= PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].DerivedEntityAccountingUnit
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.AccountingEntity           			= PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].AccountingEntity
								invoked.AccountingUnit						= PrmAccountingUnitArray.AccountingEntityAndUnit[LocalArrayCounter].AccountingUnit
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromProjectToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmProject						is like Project
                PrmProjectArray					is like ProjectArray
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmProject
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmProjectArray.Project[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmProjectArray.Project[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmProjectArray.Project[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmProjectArray.Project[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Project           					= PrmProjectArray.Project[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension1ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension1					is like FinanceDimension1
                PrmDimension1Array				is like FinanceDimension1Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension1
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension1Array.FinanceDimension1[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension1Array.FinanceDimension1[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension1Array.FinanceDimension1[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension1Array.FinanceDimension1[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension1           				= PrmDimension1Array.FinanceDimension1[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension2ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension2					is like FinanceDimension2
                PrmDimension2Array				is like FinanceDimension2Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension2
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension2Array.FinanceDimension2[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension2Array.FinanceDimension2[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension2Array.FinanceDimension2[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension2Array.FinanceDimension2[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension2           				= PrmDimension2Array.FinanceDimension2[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
								
		CreateOrDeleteAccByGrpRelFromDimension3ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension3					is like FinanceDimension3
                PrmDimension3Array				is like FinanceDimension3Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension3
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension3Array.FinanceDimension3[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension3Array.FinanceDimension3[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension3Array.FinanceDimension3[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension3Array.FinanceDimension3[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension3          				= PrmDimension3Array.FinanceDimension3[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension4ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension4					is like FinanceDimension4
                PrmDimension4Array				is like FinanceDimension4Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension4
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension4Array.FinanceDimension4[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension4Array.FinanceDimension4[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension4Array.FinanceDimension4[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension4Array.FinanceDimension4[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension4           				= PrmDimension4Array.FinanceDimension4[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension5ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension5					is like FinanceDimension5
                PrmDimension5Array				is like FinanceDimension5Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension5
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension5Array.FinanceDimension5[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension5Array.FinanceDimension5[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension5Array.FinanceDimension5[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension5Array.FinanceDimension5[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension5           				= PrmDimension5Array.FinanceDimension5[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
		
		CreateOrDeleteAccByGrpRelFromDimension6ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension6					is like FinanceDimension6
                PrmDimension6Array				is like FinanceDimension6Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension6
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension6Array.FinanceDimension6[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension6Array.FinanceDimension6[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension6Array.FinanceDimension6[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension6Array.FinanceDimension6[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension6           				= PrmDimension6Array.FinanceDimension6[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension7ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension7					is like FinanceDimension7
                PrmDimension7Array				is like FinanceDimension7Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension7
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension7Array.FinanceDimension7[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension7Array.FinanceDimension7[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension7Array.FinanceDimension7[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension7Array.FinanceDimension7[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension7           				= PrmDimension7Array.FinanceDimension7[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
		
		CreateOrDeleteAccByGrpRelFromDimension8ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension8					is like FinanceDimension8
                PrmDimension8Array				is like FinanceDimension8Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension8
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension8Array.FinanceDimension8[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension8Array.FinanceDimension8[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension8Array.FinanceDimension8[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension8Array.FinanceDimension8[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension8           				= PrmDimension8Array.FinanceDimension8[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension9ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension9					is like FinanceDimension9
                PrmDimension9Array				is like FinanceDimension9Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension9
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension9Array.FinanceDimension9[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension9Array.FinanceDimension9[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension9Array.FinanceDimension9[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension9Array.FinanceDimension9[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension9           				= PrmDimension9Array.FinanceDimension9[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

		CreateOrDeleteAccByGrpRelFromDimension10ToAccount is a Set Action
            restricted
            Parameters
                PrmFinanceEnterpriseGroup       is a FinanceEnterpriseGroup
                PrmCodeBlockRelation			is a CodeBlockRelation
                PrmDimension10					is like FinanceDimension10
                PrmDimension10Array				is like FinanceDimension10Array
                PrmAccountRule	            	is a GeneralLedgerChartAccount group
                PrmDefaultToValue               is Alpha 200
				PrmDeleteFlag					is Boolean
                PrmUniqueID						is a UniqueID
			Set Is
				PrmFinanceEnterpriseGroup
				PrmCodeBlockRelation
				PrmDimension10
				PrmAccountRule
				PrmDeleteFlag
				PrmUniqueID
			Local Fields
				LocalArrayCounter				is Numeric 5
				LocalCommitCounter				is Numeric size 3
            Instance Selection
                where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
                and	GeneralLedgerChartAccount within PrmAccountRule
                and	SystemAccount != SystemAccount.UndistributedRetainedEarnings
                and	Active
                and	ChartType.Posting)
            Sort Order
                FinanceEnterpriseGroup
				GeneralLedgerChartAccount
            Action Rules
                Set Rules
                	Exit Rules
                		if (LocalCommitCounter > 0)
                			commit transaction
                Instance Rules
					LocalArrayCounter = 1
                    initialize LocalCommitCounter      
					LocalCodeBlockRelation 		= PrmCodeBlockRelation
					LocalKeyToValue				= GeneralLedgerChartAccount
					if(PrmDeleteFlag)
						while (PrmDimension10Array.FinanceDimension10[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension10Array.FinanceDimension10[LocalArrayCounter]
							invoke Delete CodeBlockRelationDetailFromToRel 
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter
					else
						while (PrmDimension10Array.FinanceDimension10[LocalArrayCounter] entered)
							LocalKeyFromValue	= PrmDimension10Array.FinanceDimension10[LocalArrayCounter]
							invoke Update CodeBlockRelationDetailFromToRel
								invoked.FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
								invoked.CodeBlockRelation                   = PrmCodeBlockRelation
								invoked.Dimension10           				= PrmDimension10Array.FinanceDimension10[LocalArrayCounter]
								invoked.GeneralLedgerChartAccount			= GeneralLedgerChartAccount    
								invoked.DefaultToValue                      = PrmDefaultToValue
							LocalArrayCounter += 1
							increment LocalCommitCounter
							if (LocalCommitCounter > 50)
								commit transaction
								initialize LocalCommitCounter

FileCreationLogic.GeneralLedgerChartAccount is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
		GeneralLedgerChartAccountHash is a NativeField
			type is Numeric 8
			restricted	
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"GeneralLedgerChartAccount_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation
				FileCreationSetupPrm	is a FileCreationSetup
#endif
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation
				LocalGeneralLedgerChartAccountGroupSelection		is a GeneralLedgerChartAccount group in subject FileCreationGeneralLedgerChartAccount
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      GeneralLedgerChartAccountHash % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation
					LocalGeneralLedgerChartAccountGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalGeneralLedgerChartAccountGroupSelection not entered
					or	GeneralLedgerChartAccount within LocalGeneralLedgerChartAccountGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= GeneralLedgerChartAccount
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
#endif
