CustomerRepresentativeContact is a BusinessClass
	owned by ar
	prefix is CRCNT

	Ontology
		symbolic key is CustomerRepresentativeContact

	Patterns
		implements Proxy for CustomerRepresentative


	Persistent Fields
		LoginName										is LoginName  
			default label is "UserName"
		Password										is Password
		ConfirmPassword									is Password
		MainContact										is an PersonName 
			holds pii
		TelephoneNumber
		EmailAddress
		ReceiveEmailNotification						is Boolean
		Active											is Boolean
		PortalInactiveSource							is Numeric size 1
			States
				Internal	value is 1
				Customer	value is 2
		InactiveTimeStamp								is TimeStamp
		PrimaryContact									is Boolean
		ReceivableCompany								is a snapshot of CustomerRepresentative.ReceivableCompany
		Customer										is a snapshot of CustomerRepresentative.Customer
		AllowPortalApplyCashAcrossReceivableCompanies	is a snapshot of CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies	
		ReceivablePortalPaymentHeader					is Numeric size 12	
			disable Auditing												
			restricted	
		ThirdPartyPaymentProcessingTransactionApiId		is Numeric size 15	
			default label is "TransactionApiId"
			disable Auditing

		ThirdPartyPaymentProcessingResponseReasonCodeId				is a PayaResponseReasonCode	
			default label is "ResponseReasonCodeId"	
			disable Auditing	
		ThirdPartyPaymentProcessingResponseStatusId					is a PayaResponseStatusId	
			default label is "ResponseStatusId"	
			disable Auditing	
		ThirdPartyPaymentProcessResponseTransactionAmount			is Decimal 10.2	
			default label is "ResponseTransactionAmount"	
			disable Auditing	
		ThirdPartyPaymentProcessResponseTransactionApiId			is Numeric size 15	
			default label is "ResponseTransactionApiId"	
			disable Auditing	

		MigratedToExternalUser							is Boolean
			default label is "Migrated"
		ExternalUserMigrationMismatch					is Boolean
		NotifiedMigrationChangedSignIn					is Boolean
		ConvertedLowerCaseEmailAddress					is an EmailAddress 
			holds pii

	Transient Fields

		TransientSingleJSONNode					is Alpha 400
		TransientNextAction						is Alpha 100
		TransientUserVerificationId				is Alpha 100
		TransientUserIdentity					is Alpha 50
		TransientResponseStatus					is Alpha 100
		TransientAutogeneratedActorId			is Alpha 30
		TransientVerificationCode				is Alpha 20
		TransientUserRegistered					is Boolean
		TransientUserVerified					is Boolean
		FieldToConvert							is Alpha 250
		TransientNewEmailAddress				is an EmailAddress
		TransientEmailPassword					is Password
		TransientSendVerificationCode			is Boolean
		TransientResendVerificationCode			is Boolean
		TransientUserUpdateInitiated			is Boolean
		TransientStringHolder					is Alpha 3000
		TransientVerificationCodeResent			is Boolean
		TransientRawText						is RichText
		TransientDefaultDevice					is Alpha 400
		TransientMFAEnforced					is Boolean
		TransientHasRegisteredDevice			is Boolean





	Local Fields
		LocalContactInfo								is a ContactInfo
		LocalPrimaryContactChanged						is Boolean
		LocalService									is a Service
		LocalIdentity									is an Identity
		LocalLastPaymentDate							is Date
		LocalLastInvoiceDate							is Date
		LocalLastStatementDate							is Date
		LocalNewLine									is LPLText
		LocalText										is Text	
		LocalText2										is Text	
		SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelAmountsDone					is Boolean
		SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelPortalRequestedAppliedAmount	is an InternationalAmount
		SumOfReceivablePortalPaymentDetail1RelAmountsDone						is Boolean
		SumOfReceivablePortalPaymentDetail1RelPortalRequestedAppliedAmount		is an InternationalAmount

		JSONResponse				is JSONObject
		LocalCreateIdentity			is Boolean
		LocalEmailAddress			is an EmailAddress
		LocalExternalUserEmail		is like EmailAddress
		LocalExternalUserActorId	is like Actor
		LocalElementCounter			is Numeric size 4
		LocalArraySize				is Numeric size 4

	Rule Blocks
		SumInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelAmounts	
			if (!SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelAmountsDone)
				initialize SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelPortalRequestedAppliedAmount
					for each InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRel
						SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelPortalRequestedAppliedAmount	 += each.PortalRequestedAppliedAmount
				SumOfInvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelAmountsDone = true

		SumReceivablePortalPaymentDetail1RelAmounts	
			if (!SumOfReceivablePortalPaymentDetail1RelAmountsDone)
				initialize SumOfReceivablePortalPaymentDetail1RelPortalRequestedAppliedAmount
					for each ReceivablePortalPaymentDetail1Rel
						SumOfReceivablePortalPaymentDetail1RelPortalRequestedAppliedAmount	 += each.PortalRequestedAppliedAmount
				SumOfReceivablePortalPaymentDetail1RelAmountsDone = true


	Derived Fields
		SummaryText is a ConditionalField
			type is Alpha size 250
			restricted
			if (RegistrationComplete)
				CustomerGroup.CompleteAccessRequestText
			else
				CustomerGroup.IncompleteAccessRequestText

		NotCompleteQuestionMessage is a MessageField
			restricted
			"-\YouHaveNotAnsweredAllRequiredQuestionsAsPartOfTheAccessRequestProcess."

		NotCompleteQuestions is a ConditionalField
			type is Text
			restricted
			if (IncompleteQuestions)
				NotCompleteQuestionMessage
			else
				blank

		NotCompleteQuestionAttachmentMessage is a MessageField
			restricted
			"-\YouHaveNotEnteredAnAttachmentForAllQuestionsRequiringAttachementsAsPartOfTheAccessRequestProcess."

		NotCompleteQuestionAttachments is a ConditionalField
			type is Text
			restricted
			if (IncompleteQuestionAttachments)
				NotCompleteQuestionAttachmentMessage
			else
				blank

		CompleteMessage is a MessageField
			restricted
			"Complete"

		NotCompleteMessage is a MessageField
			restricted
			"NotComplete"

		RegistrationStatus is a DerivedField
			type is like Description
			if (RegistrationComplete)
				return CompleteMessage
			else
				return NotCompleteMessage

		IsRegistrationIncomplete is a ConditionalField
			type is Numeric 1
			restricted
			if (!RegistrationComplete)
				1
			else
				blank

		DerivedActive is a StringField
			type is Boolean
			Active

		UpdateLinkback is a MessageField	
			restricted
			"<linkback(webapp is BillingReceivablesPortal navigation is UpdateContactInformation text is \"Billing&ReceivablesPortal\" session key CustomerGroup is CustomerGroup)>"

		CustomerRepresentativeService is a DerivedField
			type is AlphaUpper size 100
			restricted
			return config.CUSTOMERREPRESENTATIVE_SERVICE

		YesMessage is a MessageField
			restricted
			"Yes"

		NoMessage is a MessageField
			restricted
			"No"

		FromGroupMessage is a MessageField
			restricted
			"CustomerGroup"

		FromContactMessage is a MessageField
			restricted
			"Contact"

		ItemHistoryAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryItemHistoryAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerItemHistoryAccess)
			or   CustomerRepresentativeContactItemHistoryRel exists)
				YesMessage
			else
				NoMessage

		ItemHistoryAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryItemHistoryAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerItemHistoryAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactItemHistoryRel exists)
				FromContactMessage
			else
				blank

		PaymentsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryPaymentAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerPaymentAccess)
			or   CustomerRepresentativeContactPaymentRel exists)
				YesMessage
			else
				NoMessage

		PaymentsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryPaymentAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerPaymentAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactPaymentRel exists)
				FromContactMessage
			else
				blank

		InvoicesAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryInvoiceAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerInvoiceAccess)
			or   CustomerRepresentativeContactInvoiceRel exists)
				YesMessage
			else
				NoMessage

		InvoicesAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryInvoiceAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerInvoiceAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactInvoiceRel exists)
				FromContactMessage
			else
				blank

		InvoicePaymentAccess is a ConditionalField	
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryInvoicePaymentAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerInvoicePaymentAccess)
			or   CustomerRepresentativeContactInvoicePaymentRel exists)
				YesMessage
			else
				NoMessage

		InvoicePaymentAccessFrom is a ConditionalField	
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryInvoicePaymentAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerInvoicePaymentAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactInvoicePaymentRel exists)
				FromContactMessage
			else
				blank


		OrdersAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryOrderAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerOrderAccess)
			or   CustomerRepresentativeContactOrderRel exists)
				YesMessage
			else
				NoMessage

		OrdersAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryOrderAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerOrderAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactOrderRel exists)
				FromContactMessage
			else
				blank

		ReturnsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryReturnAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerReturnAccess)
			or   CustomerRepresentativeContactReturnRel exists)
				YesMessage
			else
				NoMessage

		ReturnsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and CustomerGroup.CustomerPrimaryReturnAccess)
				FromGroupMessage
			else
			if (!PrimaryContact
			and CustomerGroup.CustomerReturnAccess)
				FromGroupMessage
			else
			if (CustomerRepresentativeContactReturnRel exists)
				FromContactMessage
			else
				blank

		DerivedCustomerName is a DerivedField
			type is Alpha size 35
			return (CustomerRepresentative.CustomerName + CustomerRepresentativeContact)

		DerivedTelephoneNumber is a StringField
			type is Alpha size 60
			default label is "TelephoneNumber"
			TelephoneNumber.InternationalPrefix + " " + TelephoneNumber.SubscriberNumber + " " + TelephoneNumber.Extension

		LastPaymentDateForNationalAccount is a DerivedField
			type is Date
			default label is "LastPaymentDate"
			return NationalAccountBalanceRel.DerivedLastPaymentDate	






		LastInvoiceDateForNationalAccount is a DerivedField
			type is Date
			default label is "LastInvoiceDate"
			return NationalAccountBalanceRel.DerivedLastInvoiceDate	






		LastStatementDateForNationalAccount is a DerivedField
			type is Date
			default label is "LastStatementDate"
			return NationalAccountBalanceRel.DerivedLastStatementDate	







		CityStateZIPDisplay is a DerivedField
			type is Text
			restricted
			initialize LocalText2

			if (CustomerRepresentative.MailingAddress.Municipality entered)
				LocalText2 += CustomerRepresentative.MailingAddress.Municipality
				if (CustomerRepresentative.MailingAddress.StateProvince entered
				or  CustomerRepresentative.MailingAddress.PostalCode entered)
					LocalText2 += ", "

			if (CustomerRepresentative.MailingAddress.StateProvince entered
			and CustomerRepresentative.MailingAddress.PostalCode entered)
				LocalText2 += CustomerRepresentative.MailingAddress.StateProvince + " " + CustomerRepresentative.MailingAddress.PostalCode
			else
				LocalText2 += CustomerRepresentative.MailingAddress.StateProvince + CustomerRepresentative.MailingAddress.PostalCode
			return LocalText2

		CustomerCityStateZIPDisplay is a DerivedField
			type is Text
			restricted
			initialize LocalText2

			if (Customer.PostalAddress.Municipality entered)
				LocalText2 += Customer.PostalAddress.Municipality
				if (Customer.PostalAddress.StateProvince entered
				or  Customer.PostalAddress.PostalCode entered)
					LocalText2 += ", "

			if (Customer.PostalAddress.StateProvince entered
			and Customer.PostalAddress.PostalCode entered)
				LocalText2 += Customer.PostalAddress.StateProvince + " " + Customer.PostalAddress.PostalCode
			else
				LocalText2 += Customer.PostalAddress.StateProvince + Customer.PostalAddress.PostalCode
			return LocalText2


		FullAddressDisplay is a DerivedField
			type is Text
			default label is "MailingAddress"
			initialize LocalText
			LocalNewLine = "\u000a"

			if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine1 entered)
				LocalText += CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine1
				if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine2 entered
				or  CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine3 entered
				or  CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine4 entered
				or  CityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine2 entered)
				LocalText += CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine2
				if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine3 entered
				or  CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine4 entered
				or  CityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine3 entered)
				LocalText += CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine3
				if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine4 entered
				or  CityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine4 entered)
				LocalText += CustomerRepresentative.MailingAddress.DeliveryAddress.AddressLine4
				if (CityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (CityStateZIPDisplayEntered)
				LocalText += CityStateZIPDisplay
			return LocalText

		CustomerFullAddressDisplay is a DerivedField
			type is Text
			default label is "MailingAddress"
			initialize LocalText
			LocalNewLine = "\u000a"

			if (Customer.PostalAddress.DeliveryAddress.AddressLine1 entered)
				LocalText += Customer.PostalAddress.DeliveryAddress.AddressLine1
				if (Customer.PostalAddress.DeliveryAddress.AddressLine2 entered
				or  Customer.PostalAddress.DeliveryAddress.AddressLine3 entered
				or  Customer.PostalAddress.DeliveryAddress.AddressLine4 entered
				or  CustomerCityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (Customer.PostalAddress.DeliveryAddress.AddressLine2 entered)
				LocalText += Customer.PostalAddress.DeliveryAddress.AddressLine2
				if (Customer.PostalAddress.DeliveryAddress.AddressLine3 entered
				or  Customer.PostalAddress.DeliveryAddress.AddressLine4 entered
				or  CustomerCityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (Customer.PostalAddress.DeliveryAddress.AddressLine3 entered)
				LocalText += Customer.PostalAddress.DeliveryAddress.AddressLine3
				if (Customer.PostalAddress.DeliveryAddress.AddressLine4 entered
				or  CustomerCityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (Customer.PostalAddress.DeliveryAddress.AddressLine4 entered)
				LocalText += Customer.PostalAddress.DeliveryAddress.AddressLine4
				if (CustomerCityStateZIPDisplayEntered)
					LocalText += LocalNewLine

			if (CustomerCityStateZIPDisplayEntered)
				LocalText += CustomerCityStateZIPDisplay	
			return LocalText


		DerivedTotalPortalRequestedAppliedAmount is a DerivedField
			type is like InternationalAmount
			default label is "TotalRequestedAmountToPay"
			include SumReceivablePortalPaymentDetail1RelAmounts
			return (SumOfReceivablePortalPaymentDetail1RelPortalRequestedAppliedAmount)

		DerivedThirdPartyPaymentProcessingCompany is a DerivedField
			type is like ReceivableCompany
			return CashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRel.LegalEntity

		DerivedReceivablePortalPaymentDetail1RelCount is a DerivedField
			type is Numeric size 21
			restricted
			return (instance count of ReceivablePortalPaymentDetail1Rel)


		FormTitleCustomerOnly is a LabelField
			restricted
			"Invoices_for_<Customer.Name>"

		DerivedFormTitle		is a DerivedField
			type is MessageField

			if (IsLoggedInAndActive)
				return FormTitleCustomerOnly
			else
				return blank

		DerivedCustomerFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return CustomerFormTitle
			else
				return blank	

		AnonymousMessage is a LabelField	
			restricted
			"Anonymous"

		CustomerFormTitle is a LabelField	
			restricted
			"Customer_-<CustomerRepresentative.CustomerName>"

		DerivedItemHistoryFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return ItemHistoryFormTitle
			else
				return blank

		ItemHistoryFormTitle is a LabelField	
			restricted
			"ItemHistory"

		DerivedInvoiceFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return InvoiceFormTitle
			else
				return blank

		InvoiceFormTitle is a LabelField	
			restricted
			"Invoices"

		DerivedPaymentsFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return PaymentsFormTitle
			else
				return blank

		PaymentsFormTitle is a LabelField	
			restricted
			"Payments"

		DerivedContractsFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return ContractsFormTitle
			else
				return blank

		ContractsFormTitle is a LabelField	
			restricted
			"Contracts"

		DerivedProjectsFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return ProjectsFormTitle
			else
				return blank

		ProjectsFormTitle is a LabelField	
			restricted
			"Projects"

		DerivedOrdersFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return OrdersFormTitle
			else
				return blank

		OrdersFormTitle is a LabelField	
			restricted
			"Orders"

		DerivedReturnsFormTitle is a DerivedField	
			type is MessageField
			if (IsLoggedInAndActive)
				return ReturnsFormTitle
			else
				return blank

		ReturnsFormTitle is a LabelField	
			restricted
			"Returns"


		DerivedConfirmPaymentAmountFormTitle is a DerivedField	
			type is MessageField
			if (ReceivablePortalPaymentDetail1RelExist)
				return ConfirmPaymentAmountFormTitle
			else
			if (CustGroupNotReleasePortalPayTrxApiIdRecPayRelExistsAndRPortalPayDetail1RelNotExist)
				return PaymentCreatedFormTitle
			else
			if (CustGroupReleasePortalPayTrxApiIdRecPayRelExistsAndRPortalPayDetail1RelNotExist)
				return PaymentAppliedFormTitle
			else
			if (TransactionApiIdReceivablePaymentRelAndReceivablePortalPaymentDetail1RelNotExist)
				return PaymentDeniedFormTitle

		ConfirmPaymentAmountFormTitle is a LabelField	
			restricted
			"ConfirmPaymentAmount"

		PaymentCreatedFormTitle is a LabelField	
			restricted
			"PaymentCreated"

		PaymentAppliedFormTitle is a LabelField	
			restricted
			"PaymentApplied"

		PaymentDeniedFormTitle is a LabelField	
			restricted
			"PaymentDenied"


		DerivedCustomerGroupActorContextValue is a DerivedField	
			type is AlphaUpper size 5	
			default label is "CustomerGroup"	
			return CustomerGroupActorContextRel.Value	

		DerivedCustomerRepresentativeActorContextValue is a DerivedField	
			type is Numeric size 9	
			default label is "CustomerRepresentative"	
			return CustomerRepresentativeActorContextRel.Value	

		DerivedCustomerRepresentativeContactActorContextValue is a DerivedField	
			type is Numeric size 9	
			default label is "CustomerContact"	
			return CustomerRepresentativeContactActorContextRel.Value	


		DerivedNationalCompany is a DerivedField	
			type is like Company
			restricted
			if (CompanyCustomerRel exists)
				return CompanyCustomerRel.DerivedNationalCompany
			else
				return 0

		DerivedNationalCustomer is a DerivedField	
			type is like Customer
			restricted
			if (CompanyCustomerRel exists)
				return CompanyCustomerRel.DerivedNationalCustomer
			else
				return 0




















		ConvertToLowerCase is a NativeField
			type is Alpha 250
			restricted

		LowerCaseEmailAddress is a DerivedField
			type is LoginName
			restricted
			LowerCaseEmailAddress = ConvertToLowerCase

		DerivedVerificationCodeRequired is a DerivedField
			type is Boolean
			default label is untranslatable
			if (CustomerRepresentative.BillingRecvExtEntityEnabled)
				invoke GetExternalEntity ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId = CustomerRepresentative.BillingRecvExtEntityGUID
				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					return JSONResponse select "$.response.externalentity.enableuserverification"
				else
					return false
			else
				return false

		DerivedContactRegisteredInIFS is a DerivedField
			type is Boolean
			default label is untranslatable
			if (CustomerRepresentative.BillingRecvExtEntityEnabled)
				if (LoginName not entered)
					return false
				else
					if (LoginName = EmailAddress)
						return false
					else
						invoke GetUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId				= CustomerRepresentative.BillingRecvExtEntityGUID
							invoked.UserIdentity			= LoginName
						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							return true
						else
							return false
			else
				return false

		DerivedVerificationCodeRequiredEmailChange is a DerivedField
			type is Alpha 250
			default label is untranslatable

			initialize TransientStringHolder

			if (TransientNewEmailAddress not entered)
				TransientStringHolder = "New email address is required"
				return DerivedVerificationCodeRequiredEmailChange

			if (TransientNewEmailAddress = EmailAddress)
				TransientStringHolder = "New email address is the same as the current email address"
				return DerivedVerificationCodeRequiredEmailChange

			if (TransientEmailPassword not entered)
				TransientStringHolder = "Password is required"
				return DerivedVerificationCodeRequiredEmailChange

			if (DerivedVerificationCodeRequired)
				if (TransientNewEmailAddress entered
				and TransientEmailPassword entered
				and !TransientUserUpdateInitiated)

					FieldToConvert				= TransientNewEmailAddress
					TransientNewEmailAddress	= LowerCaseEmailAddress

					invoke UpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= CustomerRepresentative.BillingRecvExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= TransientNewEmailAddress
						invoked.IsPrimary		= true
						invoked.Password		= TransientEmailPassword

					TransientResponseStatus = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
						TransientUserUpdateInitiated	= true
						TransientSendVerificationCode	= true
						TransientNextAction			= JSONResponse select "$.response.nextaction.action"
						TransientUserVerificationId	= JSONResponse select "$.response.nextaction.userverificationid"
						TransientUserIdentity		= JSONResponse select "$.response.nextaction.useridentity"
					else
						TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
			return DerivedVerificationCodeRequiredEmailChange

		DerivedResendVerificationCode is a DerivedField
		 	type is Alpha 250
			default label is untranslatable
			if (TransientUserIdentity entered
			and TransientUserVerificationId entered
			and !TransientVerificationCodeResent)
				invoke ResendVerification ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId			= CustomerRepresentative.BillingRecvExtEntityGUID
					invoked.UserIdentity 		= TransientUserIdentity
					invoked.VerificationId 		= TransientUserVerificationId

				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					TransientResendVerificationCode = true
					TransientVerificationCodeResent	= true
				else
					TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
					TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
			return DerivedResendVerificationCode

		DerivedContactCompleteRegistrationURL is a DerivedField
			type is RichText
			restricted
			return CustomerGroup.BillingReceivablesPortalBaseURL + "/BillingReceivablesPortal/form/CustomerRepresentative.ExternalEntityRegistrationProfile?action=CustomerCreateImport&csk.CustomerGroup="+CustomerGroup+"&csk.CustomerRepresentative="+CustomerRepresentative+"&csk.CustomerRepresentativeContact="+CustomerRepresentativeContact

		DerivedClickHereText is a MessageField
			restricted
			"Click_Here"

		DerivedRegisterHereLink is a StringField
			type is RichText
			restricted
			"<a target='_blank' href='"+DerivedContactCompleteRegistrationURL+"'>" +DerivedClickHereText+"</a>"

		MigrationLowerCaseEmailAddress is a DerivedField
			type is LoginName
			restricted
			FieldToConvert					= EmailAddress
			MigrationLowerCaseEmailAddress	= LowerCaseEmailAddress

		DerivedIdentity is a StringField
			type is Alpha 200
			"User:" + LoginName

		DerivedMFAEnabled is a DerivedField
			type is Boolean
			default label is untranslatable
			if (CustomerRepresentative.BillingRecvExtEntityEnabled)
				invoke GetExternalEntity ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId = CustomerRepresentative.BillingRecvExtEntityGUID
				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					TransientSingleJSONNode	= JSONResponse select "$.response.externalentity.mfaenable"
					TransientMFAEnforced = JSONResponse select "$.response.externalentity.mfaenforce"
					return JSONResponse select "$.response.externalentity.mfaenable"
				else
					return false
			else
				return false

		DerivedRegisteredMFADevices is a DerivedField
			type is RichText
			default label is untranslatable
			if (CustomerRepresentative.BillingRecvExtEntityEnabled)
				if (CustomerRepresentative.BillingRecvExtEntityGUID != blank)
					invoke GetRegisteredMFADeviceInfo ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= CustomerRepresentative.BillingRecvExtEntityGUID
						invoked.UserIdentity	= LoginName

					LocalElementCounter		= 0
					TransientSingleJSONNode	= JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientSingleJSONNode, "Success"))
						TransientRawText = blank
						if (!com.lawson.apps.security.base.JSON_ActionBase.isArrayEmpty(JSONResponse, "mfaprovider"))
							TransientHasRegisteredDevice = true
							TransientSingleJSONNode = JSONResponse select "$..mfaprovider[*]"
							if (com.lawson.apps.security.base.Security_ActionBase.isNumeric(TransientSingleJSONNode))
								LocalArraySize = java.lang.Integer.parseInt(TransientSingleJSONNode)
							else
								LocalArraySize = 1
							while (LocalElementCounter < LocalArraySize)
								TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].providerName"
								if (TransientSingleJSONNode = "EMAIL")
									TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].identifiervalue"
								else
									TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].deviceName"
								TransientDefaultDevice = JSONResponse select "$..mfaprovider[<LocalElementCounter>].isDefault"
								if (TransientDefaultDevice = "true")
									TransientSingleJSONNode = TransientSingleJSONNode + "<span style=\"color:#FFFFFF;display:inline-block;outline:none;border:1px solid transparent;padding:0px 10px;background-color:#0066D4 !important;font-size:14px;border-radius:20px;margin-left:10px\">" + DefaultMF + "</span>"
								TransientRawText += TransientSingleJSONNode + DerivedNewLineMF
								LocalElementCounter += 1
					else
						TransientRawText = RegisteredMFADevicesErrorMF
				else
					TransientRawText = MissingIdentityMF
			return TransientRawText

		DerivedNewLineMF is a DerivedField
			type is RichText
			restricted
			return "<br>"

		MissingIdentityMF is a MessageField
			restricted
			"MissingExternalEntityIdentityId"

		RegisteredMFADevicesErrorMF is a MessageField
			restricted
			"RegisteredMFADevicesCannotBeDisplayedAtThisTime"

		DefaultMF is a MessageField

			"Default"

		MFARequiredMF is a MessageField
			"Required_For_Your_Account"

		MFAAddDeviceMF is a MessageField
			"AddADeviceForVerification"

		MFASecureAccountMF is a MessageField
			"Secure_Your_Account"

		MFAAccountProtectedMF is a MessageField
			"Your_Account_Is_Protected"

		MFAVerificationCodeMF is a MessageField
			"VerificationCodesCanBeSentTo:"

		MFASecureAccountFullMF is a MessageField
			"SecureYourAccountByAddingADeviceForVerification"

		MFAAccountProtectedFullMF is a MessageField
			"YourAccountIsCurrentlyProtected._VerificationCodesCanBeSentTo:"

		MFADeviceRequiredMF is a MessageField
			"AMultifactorAuthenticationDeviceIsRequiredForYourAccount."


	Conditions
		HasContactRoles
			restricted
			when (HasLocalItemHistoryAccess
			or	HasLocalPaymentsAccess
			or	HasLocalInvoicesAccess
			or	HasLocalOrdersAccess
			or	HasLocalReturnsAccess)

		ActorContextValuesDoNotMatchActuals	
			when (DerivedCustomerGroupActorContextValue != CustomerGroup	
			or DerivedCustomerRepresentativeActorContextValue != CustomerRepresentative	
			or DerivedCustomerRepresentativeContactActorContextValue != CustomerRepresentativeContact)	

		NoItemHistoryAccess
			restricted
			when (ItemHistoryAccessFrom = blank)

		HasLocalItemHistoryAccess
			restricted
			when (ItemHistoryAccessFrom = FromContactMessage)

		NoPaymentsAccess
			restricted
			when (PaymentsAccessFrom = blank)

		HasLocalPaymentsAccess
			restricted
			when (PaymentsAccessFrom = FromContactMessage)

		NoInvoicesAccess
			restricted
			when (InvoicesAccessFrom = blank)

		HasLocalInvoicesAccess
			restricted
			when (InvoicesAccessFrom = FromContactMessage)

		NoInvoicePaymentAccess	
			restricted	
			when (InvoicePaymentAccessFrom = blank)	

		HasLocalInvoicePaymentAccess	
			restricted	
			when (InvoicePaymentAccessFrom = FromContactMessage)	


		NoOrdersAccess
			restricted
			when (OrdersAccessFrom = blank)

		HasLocalOrdersAccess
			restricted
			when (OrdersAccessFrom = FromContactMessage)

		NoReturnsAccess
			restricted
			when (ReturnsAccessFrom = blank)

		HasLocalReturnsAccess
			restricted
			when (ReturnsAccessFrom = FromContactMessage)

		IsPrimary
			restricted
			when (PrimaryContact)

		ShowUpdateContactButton
			restricted
			when (Customer entered
			and   Active)

		ShowUpdateAccountButton
			restricted
			when (PrimaryContact
			and	  Active)

		RegistrationComplete
			restricted
			when  ((IsPrimary
			and		CustomerRepresentative.AnsweredRequiredQuestions
			and		CustomerRepresentative.AttachedRequiredQuestionAttachments)
			or 		!IsPrimary)

		MissingRequiredAnswers
			restricted
			when (IsPrimary
			and	  !CustomerRepresentative.AnsweredRequiredQuestions
			or	  !CustomerRepresentative.AttachedRequiredQuestionAttachments)

		ShowQuestionResponse
			restricted
			when (Customer entered
			and   PrimaryQuestionResponse
			and   IsLoggedInAndActive)	

		ShowBalances
			restricted
			when (CustomerRepresentative.ReceivableCompany entered
			and   CustomerRepresentative.Customer entered
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated)	

		PrimaryQuestionResponse
			restricted
			when (IsPrimary
			and   CustomerGroup.QuestionsExist)

		ContactExists
			restricted
			when (CustomerRepresentativeContact exists)











		NewContactValid
			restricted
			when (CustomerRepresentative.IsUpdatable
			and   actor.agent(CustomerRepresentativeContact).CustomerRepresentativeContact exists)

		PortalCustomer
			restricted
			when (CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup
			and   CustomerRepresentative = actor.agent(CustomerRepresentativeContact).CustomerRepresentative)

		PortalContact
			restricted
			when (CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup
			and   CustomerRepresentative = actor.agent(CustomerRepresentativeContact).CustomerRepresentative
			and	  CustomerRepresentativeContact	= actor.agent(CustomerRepresentativeContact).CustomerRepresentativeContact)

		PrimaryContactLoggedIn
			restricted
			when (actor.agent(CustomerRepresentativeContact).CustomerRepresentativeContact.IsPrimary)

		PortalCustomerCanActivate
			restricted
			when (PrimaryContactLoggedIn
			and	  !Active
			and	  PortalInactiveSource.Customer)

		PortalCustomerCanInactivate
			restricted
			when (PrimaryContactLoggedIn
			and	  Active
			and	  !IsPrimary)

		IsBillingReceivablesPortal
			restricted
			when (actor.agent(CustomerRepresentativeContact).CustomerRepresentativeContact entered)

		CanActivateContact
			restricted
			when (AllowInternalUserToActivateContact
			or	  AllowCustomerRepresentativeToActivateContact)

		AllowInternalUserToInactivateContact
			restricted
			when (Active
			and	  !IsBillingReceivablesPortal)

		AllowInternalUserToActivateContact
			restricted
			when (!Active
			and	  !IsBillingReceivablesPortal)

		AllowCustomerRepresentativeToInactivateContact
			restricted
			when (Active
			and	  IsBillingReceivablesPortal)

		AllowCustomerRepresentativeToActivateContact
			restricted
			when (!Active
			and	  IsBillingReceivablesPortal
			and   !IsPrimary)

		EmailToCustomerContactsValid
			restricted
			when (ReceiveEmailNotification)

		CreationRequiredFieldsEntered
			restricted
			when (LoginName entered
			and	  Password entered
			and	  MainContact entered)

		IncompleteQuestions
			restricted
			when (!RegistrationComplete
			and   IsPrimary
			and	  !CustomerRepresentative.AnsweredRequiredQuestions)

		IncompleteQuestionAttachments
			restricted
			when (!RegistrationComplete
			and   IsPrimary
			and	  !CustomerRepresentative.AttachedRequiredQuestionAttachments)

		UsesBillingReceivablesPortal
			restricted
			when (CustomerGroup.UseBillingReceivablesPortal)

		CanUpdateCustomer
			restricted
			when (PortalContact
			and	  Customer entered
			and   IsPrimary
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated)	

		CanResetPassword	
			restricted
			when (IsLoggedInAndActive	
			and	  CustomerRepresentativeService entered)

		CanUpdateAccountInformation
			restricted
			when (PrimaryContactLoggedIn	
			and	  Customer entered)

		CityStateZIPDisplayEntered
			restricted
			when (CustomerRepresentative.MailingAddress.Municipality entered
			or	  CustomerRepresentative.MailingAddress.StateProvince entered
			or	  CustomerRepresentative.MailingAddress.PostalCode entered)

		CustomerCityStateZIPDisplayEntered
			restricted
			when (Customer.PostalAddress.Municipality entered
			or	  Customer.PostalAddress.StateProvince entered
			or	  Customer.PostalAddress.PostalCode entered)

		IsAnonymousOrLoggedInAndActive
			restricted
			when (CustomerRepresentative.IsAnonymous
			or	  IsLoggedInAndActive)

		IsLoggedInAndActive
			restricted
			when (!CustomerRepresentative.IsAnonymous
			and   Active)

		IsLoggedInAndInactive
			restricted
			when (!CustomerRepresentative.IsAnonymous
			and   !Active)

		IsActiveButIsNotValidated	
			restricted	
			when(IsLoggedInAndActive	
			and !CustomerRepresentative.HasBeenValidated)	

		IsActiveAndHasBeenValidated	
			restricted	
			when(IsLoggedInAndActive	
			and CustomerRepresentative.HasBeenValidated)	


		IsActiveNationalAccountParent
			restricted
			when (CustomerRepresentative.IsNationalAccountParent
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated)	

		IsActiveInvoiceCustomer
			restricted
			when (CustomerRepresentative.IsInvoiceCustomer
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated)	


		IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			restricted
			when (CustomerRepresentative.IsInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated  
			and	  !IsActiveNationalAccountParent) 

		IsActiveInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies
			restricted
			when (CustomerRepresentative.IsInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies
			and   IsLoggedInAndActive	
			and   CustomerRepresentative.HasBeenValidated  
			and   !IsActiveNationalAccountParent) 

		CustomerEnteredAndCompanyIsNotApplyCashAcrossReceivableCompanies
			restricted
			when (Customer entered
			and (ReceivableCompany entered
			and !CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies 
			and !CustomerEnteredAndCustomerIsANationalAccountParent  
			and !CustomerEnteredAndCustomerIsANationalAccountParentWithoutFlags))  

		CustomerEnteredAndCompanyIsApplyCashAcrossReceivableCompanies
			restricted
			when (CustomerRepresentative.Customer entered
			and (CustomerRepresentative.ReceivableCompany entered
			and CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies  
			and !CustomerEnteredAndCustomerIsANationalAccountParent  
			and !CustomerEnteredAndCustomerIsANationalAccountParentWithoutFlags))  

		CustomerEnteredAndCustomerIsANationalAccountParent  
			restricted
			when (CustomerRepresentative.Customer entered
			and   IsActiveNationalAccountParent
			and   CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and   ReceivableCompany.ApplyCashAcrossReceivableCompanies)

		CustomerEnteredAndCustomerIsANationalAccountParentWithoutFlags 
			restricted
			when (CustomerRepresentative.Customer entered
			and   IsActiveNationalAccountParent
			and  (!CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			or   !ReceivableCompany.ApplyCashAcrossReceivableCompanies))

		DerivedTotalPortalRequestedAppliedAmountGreaterThanZero
			restricted
			when (DerivedTotalPortalRequestedAppliedAmount > 0)

		DerivedTotalPortalRequestedAppliedAmountGreaterThanZeroAndPaymentBatchNumberingEnabledInThirdPartyPaymentProcessingCompany	
			restricted
			when (DerivedTotalPortalRequestedAppliedAmount > 0
			and	  CustomerRepresentative.ThirdPartyPaymentProcessingCompanyRel.PaymentBatchNumbering)

		DerivedTotalPortalRequestedAppliedAmountGreaterThanZeroAndThirdPartyPaymentProcessingGeneratedPayFormLinkDoesExist
			restricted
			when (DerivedTotalPortalRequestedAppliedAmount > 0
			and ReceivablePortalPaymentHeader1Rel.ThirdPartyPaymentProcessingGeneratedPayFormLink entered)	

		DerivedTotalPortalRequestedAppliedAmountGreaterThanZeroAndThirdPartyPaymentProcessingGeneratedPayFormLinkDoesNotExist
			restricted
			when (DerivedTotalPortalRequestedAppliedAmount > 0
			and ReceivablePortalPaymentHeader1Rel.ThirdPartyPaymentProcessingGeneratedPayFormLink not entered) 

		PaymentMethodIsACH
			restricted
			when (ReceivablePortalPaymentHeader1Rel.ThirdPartyPaymentProcessingPaymentMethod = "ach")

		PaymentMethodIsCreditCard
			restricted
			when (ReceivablePortalPaymentHeader1Rel.ThirdPartyPaymentProcessingPaymentMethod = "cc")

		PaymentInProgress
			when (ReceivablePortalPaymentHeader1Rel exists)

		ReceivablePortalPaymentDetail1RelExist
			when (ReceivablePortalPaymentDetail1Rel exists)

		MultipleReceivablePortalPaymentDetail1RelExist
			when (DerivedReceivablePortalPaymentDetail1RelCount > 1)

		InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelExist
			when (InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRel exists)

		InvoiceCustomerReceivableInvoiceDetailCompanyOnlyPortalPaymentSelectedRelExist
			when (InvoiceCustomerReceivableInvoiceDetailCompanyOnlyPortalPaymentSelectedRel exists)

		InvoiceCustomerNationalAccountTransactionPortalPaymentSelectedExist	
			when (InvoiceCustomerNationalAccountTransactionPortalPaymentSelectedRel exists)

		CustomerEnteredAndMainThirdPartyPaymentProcessingSetupsComplete	
			when (IsActiveAndHasBeenValidated	
			and Customer entered
			and CustomerGroup.MainThirdPartyPaymentProcessingSetupsComplete
			and ((PrimaryContact
			and  CustomerGroup.CustomerPrimaryInvoicePaymentAccess)
			or  (!PrimaryContact
			and  CustomerGroup.CustomerInvoicePaymentAccess)))

		CustGroupReleasePortalPayTrxApiIdRecPayRelExistsAndRPortalPayDetail1RelNotExist	
			when (CustomerGroup.ReleasePortalPaymentProcessAutoCashApplication
			and ThirdPartyPaymentProcessingTransactionApiIdReceivablePaymentRel exists
			and ReceivablePortalPaymentDetail1Rel not exists)

		CustGroupNotReleasePortalPayTrxApiIdRecPayRelExistsAndRPortalPayDetail1RelNotExist	
			when (!CustomerGroup.ReleasePortalPaymentProcessAutoCashApplication
			and ThirdPartyPaymentProcessingTransactionApiIdReceivablePaymentRel exists
			and ReceivablePortalPaymentDetail1Rel not exists)

		TransactionApiIdReceivablePaymentRelExistsAndReceivablePortalPaymentDetail1RelNotExist
			when (ThirdPartyPaymentProcessingTransactionApiIdReceivablePaymentRel exists
			and ReceivablePortalPaymentDetail1Rel not exists)

		TransactionApiIdReceivablePaymentRelAndReceivablePortalPaymentDetail1RelNotExist
			when (ThirdPartyPaymentProcessingTransactionApiIdReceivablePaymentRel not exists
			and ReceivablePortalPaymentDetail1Rel not exists)


		AutogeneratedActorIDExists
			restricted
			when (ActorByAutogeneratedActorId exists)

		DisplayForVerification
			restricted
			when (DerivedVerificationCodeRequired)

		ContactIsMe
			restricted
			when (CustomerGroup					= actor.agent(CustomerRepresentativeContact).CustomerGroup
			and   CustomerRepresentativeContact	= actor.agent(CustomerRepresentativeContact).CustomerRepresentativeContact)

		MFADeviceRequired
			when (DerivedMFAEnabled
			and   TransientMFAEnforced
			and   DerivedRegisteredMFADevices not entered)

		ValidToSendUsernameMismatchEmail
			restricted
			when (Active
			and   ExternalUserMigrationMismatch)

	Form Invokes






		DeleteReceivablePortalPaymentHeader
			if (PaymentInProgress)
				invoke Delete ReceivablePortalPaymentHeader1Rel
			else
				constraint (PaymentInProgress)
					"ActionNotAvailableWhileNoPaymentsAreInProgress"





	Relations

		ExistingPrimaryContactRel
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup			= CustomerGroup
				related.CustomerRepresentative	= CustomerRepresentative
			Instance Selection
				where (related.PrimaryContact
				and	related.CustomerRepresentativeContact != CustomerRepresentativeContact)

		OtherContactsRel
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup			= CustomerGroup
				related.CustomerRepresentative	= CustomerRepresentative
			Instance Selection
				where (related.CustomerRepresentativeContact != CustomerRepresentativeContact)


		AllCustomerRepresentativeContactRel
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup					= CustomerGroup
				related.CustomerRepresentative			= CustomerRepresentative





		CustomerRepresentativeContactItemHistoryRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalItemHistory_ST"

		CustomerRepresentativeContactPaymentRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalPayments_ST"

		CustomerRepresentativeContactInvoiceRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalInvoices_ST"

		CustomerRepresentativeContactInvoicePaymentRel	
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalInvoicePayment_ST"

		CustomerRepresentativeContactOrderRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalOrders_ST"

		CustomerRepresentativeContactReturnRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "BillingReceivablesPortalReturns_ST"

		CustomerRepresentativePrimaryContactSTRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "CustomerRepresentativePrimaryContact_ST"

		CustomerRepresentativeContactSTRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			 = agent(Actor).Actor 
				related.ActorRole.Role	 = "CustomerRepresentativeContact_ST"

		ContactRolesRel
			one-to-many relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			 = agent(Actor).Actor 

		ActorGroupMemberRel
			one-to-one relation to ActorGroupMember
			Field Mapping uses part of key
				related.ActorGroup		 = "InactiveCustomerRepresentative"
				related.Actor			 = agent(Actor).Actor 

		CustomLandingPageRel is a LandingPage set
			Instance Selection
				where (related.Actor	 = agent(Actor).Actor 
				and	related.Description	 = "InactiveCustomerRepresentative")

		NationalAccountCustomerOrderLineRel 
			one-to-many relation to CustomerOrderLine
			Field Mapping uses Set3
			Instance Selection
				where (related.DerivedNationalCompany	 = ReceivableCompany
				and	related.DerivedNationalCustomer		 = Customer)

		NationalAccountReceivableInvoiceOpenRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where (related.Status.Released
				and	  related.IsOpenReceivableInvoiceDetailRel
				and	  related.DerivedNationalCustomer		 = DerivedNationalCustomer)	






		NationalAccountReceivableInvoiceOpenRelWithoutFlagsRel   
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company = ReceivableCompany
			Instance Selection
				where (related.Status.Released
				and	  related.IsOpenReceivableInvoiceDetailRel
				and	  (related.DerivedNationalCompany		 = DerivedNationalCompany		
				and	  related.DerivedNationalCustomer		 = DerivedNationalCustomer))	







		NationalAccountReceivableInvoicePaidWithFlagsRel	
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where ((related.Status.Released
				and		related.DerivedNationalCustomer		 = DerivedNationalCustomer)	
				and	  (!related.IsOpenReceivableInvoiceDetailRel
				or	   related.IsPortalParialOpenReceivableInvoiceDetail))

		NationalAccountReceivableInvoicePaidWithoutFlagsRel	
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company = ReceivableCompany
			Instance Selection
				where ((related.Status.Released
				and	   related.DerivedNationalCompany		 = DerivedNationalCompany	
				and		related.DerivedNationalCustomer		 = DerivedNationalCustomer)	
				and	  (!related.IsOpenReceivableInvoiceDetailRel
				or	   related.IsPortalParialOpenReceivableInvoiceDetail))



		NationalAccountInvoiceRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		 = ReceivableCompany
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer

		NationalAccountTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company					 = DerivedNationalCompany
				related.NationalAccount.Customer				 = DerivedNationalCustomer

		NationalAccountTransactionsAcrossCompaniesRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company					 = any CompanyCustomerRel.DerivedNationalCompany	
				related.NationalAccount.Customer				 = DerivedNationalCustomer	

		InvoiceCustomerNationalAccountTransactionPortalPaymentSelectedRel 
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company					 = DerivedNationalCompany
				related.NationalAccount.Customer				 = DerivedNationalCustomer
			Instance Selection
				where (related.ReceivableInvoiceDetail.PortalPaymentSelected)


		NationalAccountReceivableInvoiceOpenProjectRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where (related.Status.Released
				and	   related.ProjectContractInvoiceEntered
				and	   related.IsOpenReceivableInvoiceDetailRel
				and	   related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountReceivableInvoicePaidProjectRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where (related.Status.Released
				and	   related.ProjectContractInvoiceEntered
				and	  !related.IsOpenReceivableInvoiceDetailRel
				and	   related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountReceivablePaymentRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountReceivablePaymentProjectRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
			Instance Selection
				where (related.IsProjectContract
				and	   related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountCustomerOpenOrderRel 
			one-to-many relation to CustomerOrder
			Field Mapping uses Set2
			Instance Selection
				where (related.PortalOpenOrders
				and	   related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountCustomerCompletedOrderRel 
			one-to-many relation to CustomerOrder
			Field Mapping uses Set2
			Instance Selection
				where (related.PortalCompletedOrders
				and	   related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountCustomerOrderReturnRel 
			one-to-many relation to CustomerOrderReturn
			Field Mapping uses ByCompanyCustomer
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		NationalAccountProjectContractRel 
			one-to-many relation to ProjectFundingSource
			Field Mapping uses ByCompanyCustomer
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany	
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)	

		InvoiceCustomerOrderLineRel 
			one-to-many relation to CustomerOrderLine
			Field Mapping uses Set3
				related.Company		= ReceivableCompany
				related.Customer	= Customer

		InvoiceCustomerReceivableInvoiceOpenRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.Status.Released
				and	   related.IsOpenReceivableInvoiceDetailRel)

		InvoiceCustomerReceivableInvoiceOpenApplyCashAcrossReceivableCompaniesRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where (related.Customer	= Customer
				and	   related.Status.Released
				and	   related.IsOpenReceivableInvoiceDetailRel)

		InvoiceCustomerReceivableInvoiceDetailCompanyOnlyOpenRel 
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer	= Customer
			Instance Selection
				where (related.Company = ReceivableCompany)



		InvoiceCustomerReceivableInvoiceDetailCompanyOnlyPortalPaymentSelectedRel 
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer	= Customer
			Instance Selection
				where (!ReceivableCompany.ApplyCashAcrossReceivableCompanies
				and related.Company = ReceivableCompany
				and related.PortalPaymentSelected)

		InvoiceCustomerReceivableInvoiceDetailApplyCashAcrossReceivableCompaniesRel 
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer	= Customer

		NationalAccountCustomerReceivableInvoiceDetailRel   
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
			Instance Selection
				where   ((related.DerivedNationalCompany	 = ReceivableCompany
				or		related.DerivedNationalCustomer		 = Customer)
				and 	related.Status.OpenTransaction)

		NationalAccountCustomerReceivableInvoiceDetailFlagsNotCheckedRel   
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
			Instance Selection
				where   (related.DerivedNationalCompany	 = ReceivableCompany
				and		related.DerivedNationalCustomer		 = Customer
				and 	related.Status.OpenTransaction
				and 	related.Company =ReceivableCompany)


		InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRel 
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer	= Customer
			Instance Selection
				where (related.PortalPaymentSelected)

		InvoiceCustomerReceivableInvoicePaidRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.Status.Released
				and	  (!related.IsOpenReceivableInvoiceDetailRel
				or	   related.IsPortalParialOpenReceivableInvoiceDetail))	

		InvoiceCustomerReceivableInvoicePaidApplyCashAcrossReceivableCompaniesRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
			Instance Selection
				where (related.Customer	= Customer
				and	   related.Status.Released
				and	   (!related.IsOpenReceivableInvoiceDetailRel
				or		related.IsPortalParialOpenReceivableInvoiceDetail))	

		InvoiceCustomerReceivableInvoiceOpenProjectRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.Status.Released
				and	   related.ProjectContractInvoiceEntered
				and	   related.IsOpenReceivableInvoiceDetailRel)

		InvoiceCustomerReceivableInvoicePaidProjectRel 
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set4
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.Status.Released
				and	   related.ProjectContractInvoiceEntered
				and	  !related.IsOpenReceivableInvoiceDetailRel)

		InvoiceCustomerReceivablePaymentRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company		= ReceivableCompany
				related.Customer	= Customer

		InvoiceCustomerAllCompanyReceivablePaymentRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
			Instance Selection
				where (related.Customer	= Customer)

		ThirdPartyPaymentProcessingTransactionApiIdReceivablePaymentRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
			Instance Selection
				where (related.Customer		 = Customer
				and related.PaymentNumber	 = ThirdPartyPaymentProcessingTransactionApiId
				and related.Origin = "T")


		InvoiceCustomerReceivablePaymentProjectRel 
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.IsProjectContract)

		InvoiceCustomerOpenOrderRel 
			one-to-many relation to CustomerOrder
			Field Mapping uses Set2
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.PortalOpenOrders)

		InvoiceCustomerCompletedOrderRel 
			one-to-many relation to CustomerOrder
			Field Mapping uses Set2
				related.Company		= ReceivableCompany
				related.Customer	= Customer
			Instance Selection
				where (related.PortalCompletedOrders)

		InvoiceCustomerOrderReturnRel 
			one-to-many relation to CustomerOrderReturn
			Field Mapping uses ByCompanyCustomer
				related.Company		= ReceivableCompany
				related.Customer	= Customer

		InvoiceCustomerProjectContractRel 
			one-to-many relation to ProjectFundingSource
			Field Mapping uses ByCompanyCustomer
				related.CompanyCustomerGroup.ReceivableCompany	= ReceivableCompany
				related.CompanyCustomerGroup.Customer			= Customer

		IdentityRel							
			one-to-one relation to Identity
			Field Mapping uses symbolic key
				related.Service		= LocalService
				related.Identity	= LocalIdentity

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		= ReceivableCompany
				related.Customer	= Customer

		NationalAccountCompanyCustomerRel
			one-to-many relation to CompanyCustomer
			Field Mapping uses Set3
			Instance Selection
				where (related.DerivedNationalCompany	 = ReceivableCompany
				and	related.DerivedNationalCustomer		 = Customer)

		NationalAccountBalanceRel
			one-to-one relation to NationalAccountBalance
			Field Mapping uses symbolic key
				related.Company		= ReceivableCompany
				related.Customer	= Customer

		CashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup		= ReceivableCompany.FinanceEnterpriseGroup
			Instance Selection
				where (related.ThirdPartyPaymentProcessingReceivableProcessLevel exists)

		ReceivablePortalPaymentHeaderRel is a ReceivablePortalPaymentHeader set	

		ReceivablePortalPaymentHeader1Rel
			one-to-one relation to ReceivablePortalPaymentHeader
			Field Mapping uses symbolic key
				related.CustomerGroup					= actor.context.CustomerGroup
				related.CustomerRepresentative			= actor.context.CustomerRepresentative
				related.CustomerRepresentativeContact	= actor.context.CustomerRepresentativeContact
				related.ReceivablePortalPaymentHeader	= ReceivablePortalPaymentHeader

		ReceivablePortalPaymentHeader2Rel	
			one-to-one relation to ReceivablePortalPaymentHeader	
			Field Mapping uses symbolic key	
				related.CustomerGroup					= CustomerGroup	
				related.CustomerRepresentative			= CustomerRepresentative	
				related.CustomerRepresentativeContact	= CustomerRepresentativeContact	
				related.ReceivablePortalPaymentHeader	= ReceivablePortalPaymentHeader	

		ReceivablePortalPaymentDetailRel is a ReceivablePortalPaymentDetail set	

		ReceivablePortalPaymentDetail1Rel
			one-to-many relation to ReceivablePortalPaymentDetail
			Field Mapping uses symbolic key
				related.CustomerGroup					= actor.context.CustomerGroup
				related.CustomerRepresentative			= actor.context.CustomerRepresentative
				related.CustomerRepresentativeContact	= actor.context.CustomerRepresentativeContact
				related.ReceivablePortalPaymentHeader	= ReceivablePortalPaymentHeader




		ActorRel	
			one-to-one relation to Actor	
			Field Mapping uses symbolic key	
				related.Actor				= agent(Actor).Actor 


		CustomerGroupContextPropertyRel	
			one-to-one relation to ContextProperty	
			Field Mapping uses ByKeyField	
				related.KeyField = "CustomerGroup"	
				related.DataArea = parentcontext.dataarea

		CustomerRepresentativeContextPropertyRel	
			one-to-one relation to ContextProperty	
			Field Mapping uses ByKeyField	
				related.KeyField = "CustomerRepresentative"	
				related.DataArea = parentcontext.dataarea

		CustomerRepresentativeContactContextPropertyRel	
			one-to-one relation to ContextProperty	
			Field Mapping uses ByKeyField	
				related.KeyField = "CustomerRepresentativeContact"	
				related.DataArea = parentcontext.dataarea

		CustomerGroupActorContextRel	
			one-to-one relation to ActorContext	
			Field Mapping uses symbolic key	
				related.Actor			= agent(Actor).Actor 
				related.ContextProperty	= CustomerGroupContextPropertyRel.ContextProperty	





		CustomerGroupActorContextCreateRel	
			one-to-one relation to ActorContext	
			Field Mapping uses ByPropertyValueActor	
				related.ContextProperty	= CustomerGroupContextPropertyRel.ContextProperty	
				related.Value			= CustomerGroup	
				related.Actor			= agent(Actor).Actor 


		CustomerRepresentativeActorContextRel	
			one-to-one relation to ActorContext	
			Field Mapping uses symbolic key	
				related.Actor			= agent(Actor).Actor 
				related.ContextProperty	= CustomerRepresentativeContextPropertyRel.ContextProperty	


		CustomerRepresentativeActorContextCreateRel	
			one-to-one relation to ActorContext	
			Field Mapping uses ByPropertyValueActor	
				related.ContextProperty	= CustomerRepresentativeContextPropertyRel.ContextProperty	
				related.Value			= CustomerRepresentative	
				related.Actor			= agent(Actor).Actor 


		CustomerRepresentativeContactActorContextRel	
			one-to-one relation to ActorContext	
			Field Mapping uses symbolic key	
				related.Actor			= agent(Actor).Actor 
				related.ContextProperty	= CustomerRepresentativeContactContextPropertyRel.ContextProperty	


		CustomerRepresentativeContactActorContextCreateRel	
			one-to-one relation to ActorContext	
			Field Mapping uses ByPropertyValueActor	
				related.ContextProperty	= CustomerRepresentativeContactContextPropertyRel.ContextProperty	
				related.Value			= CustomerRepresentativeContact	
				related.Actor			= agent(Actor).Actor 


		ActorByAutogeneratedActorId
			one-to-many relation to Actor
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Actor like TransientAutogeneratedActorId)

		CustomerRepresentativeContactEmailExistsRel
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup		= CustomerGroup
			Instance Selection
				where (related.EmailAddress = LocalEmailAddress)

		MigrationExternalUserRel
			one-to-one relation to CustomerRepresentativeContact
			Field Mapping uses ByEmailAddress
				related.EmailAddress	= LocalExternalUserEmail
				related.LoginName		= LocalExternalUserActorId



		CustomerRepContactPreMigrationIssuesAllRel
			one-to-many relation to CustomerRepContactPreMigrationIssues
			Field Mapping uses symbolic key

		CustomerRepContactPreMigrationIssuesSummaryRel
			one-to-one relation to CustomerRepContactPreMigrationIssues
			Field Mapping uses symbolic key
				related.CustomerRepContactPreMigrationIssues.RecordType	= 1 
				related.CustomerRepContactPreMigrationIssues.Sequence	= 1

		EEMigrationActorRel
	 		one-to-one relation to Actor
	 		Field Mapping uses symbolic key
	 			related.Actor				= LoginName  

		EEMigrationDuplicateEmailRel
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses ByEEMigrationEmailAddress
				related.ConvertedLowerCaseEmailAddress = ConvertedLowerCaseEmailAddress
			Instance Selection
				where (related.UniqueID	!= UniqueID)

		MFAIdentityRel
			one-to-one relation to Identity
			Field Mapping uses symbolic key
				related.Service		= CustomerRepresentative.BillingReceivablesPortalService  //use "SSOPV2" for sandbox testing
				related.Identity	= DerivedIdentity  //"User:" + LoginName

	Sets
		IsPrimaryContact
			indexed
			Sort Order
				CustomerGroup
				CustomerRepresentative
			Instance Selection
				where (PrimaryContact)

		ByEmailAddress
			Sort Order
				EmailAddress
				LoginName

		ByEEMigrationEmailAddress
			indexed
			duplicates
			Sort Order
				ConvertedLowerCaseEmailAddress
				CustomerGroup
				CustomerRepresentative
				CustomerRepresentativeContact

	Field Rules
		ReceiveEmailNotification
			default to true

		LoginName
			if (true)
				if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
					required
						"UserNameIsRequired"
					cannot be changed

		Password
			if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
				if (LoginName entered)
					required
						"PasswordIsRequired"
				cannot be changed

		ConfirmPassword
			if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
				if (Password entered)
					required
						"ConfirmPasswordIsRequired"
				constraint (Password = ConfirmPassword)
					"ConfirmPasswordDoesNotMatchPassword"
				cannot be changed



	Attach Rules
		if (!parentcontext.name = "CustomerRepContactPreMigrationIssues")
			constraint (Active)
				"CustomerRepresentativeContactIsInactive"



	Actions

		GiveItemHistoryAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor			 = agent(Actor).Actor 
					invoked.ActorRole.Role	 = "BillingReceivablesPortalItemHistory_ST"


		RemoveItemHistoryAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactItemHistoryRel


		GivePaymentsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor			 = agent(Actor).Actor 
					invoked.ActorRole.Role	 = "BillingReceivablesPortalPayments_ST"


		RemovePaymentsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactPaymentRel


		GiveInvoicesAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor			 = agent(Actor).Actor 
					invoked.ActorRole.Role	 = "BillingReceivablesPortalInvoices_ST"


		GiveInvoicePaymentAccess is an Instance Action	
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor			 = agent(Actor).Actor 
					invoked.ActorRole.Role	 = "BillingReceivablesPortalInvoicePayment_ST"


		RemoveInvoicesAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactInvoiceRel


		RemoveInvoicePaymentAccess is an Instance Action	
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactInvoicePaymentRel


		GiveOrdersAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor		  = agent(Actor).Actor 
					invoked.ActorRole.Role = "BillingReceivablesPortalOrders_ST"


		RemoveOrdersAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactOrderRel


		GiveReturnsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor			 = agent(Actor).Actor 
					invoked.ActorRole.Role	 = "BillingReceivablesPortalReturns_ST"


		RemoveReturnsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete CustomerRepresentativeContactReturnRel


		ForgotUserName is a Set Action
			completion message is "YourUserIDInformationWillBeSentIfAValidEmailAddressIsFound"
			restricted
			run in foreground
			allow anonymous access
			Parameters
				ParameterEmailAddress 			is an EmailAddress 
					holds pii
				ParameterConfirmEmailAddress	is an EmailAddress 
					holds pii

			Parameter Rules
				ParameterEmailAddress
					required
						"Email_AddressIsRequired"	
				ParameterConfirmEmailAddress
					required
						"Confirm_Email_AddressIsRequired"	
					constraint (ParameterEmailAddress = ParameterConfirmEmailAddress)
						"Confirm_Email_AddressDoesNotMatch_Email_Address"

			Sort Order
				EmailAddress
				CustomerGroup
				CustomerRepresentative
				CustomerRepresentativeContact

			Action Rules

				Instance Rules
					if (EmailAddress = ParameterEmailAddress)
						send email
							to ParameterEmailAddress
							from CustomerGroup.AdminEmailAddress
							subject "<CustomerGroup.ForgotUsernameEmailSubject>"
							Contents
								"<CustomerGroup.ForgotUsernameEmailContent>"
								"<LoginName>"


		Create is a Create Action 
			allow anonymous access
			Field Rules
				LoginName
					if (true)
						if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password
					if (!CustomerRepresentative.CreatedInternally)
						if (LoginName entered)
							required
								"PasswordIsRequired"
				ConfirmPassword
					if (!CustomerRepresentative.CreatedInternally)
						if (Password entered)
							required
								"ConfirmPasswordIsRequired"
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"
				MainContact
					if (true)
						required
				EmailAddress	
					LocalEmailAddress = EmailAddress	
					constraint (!CustomerRepresentativeContactEmailExistsRel exists)	
						"Either_Login_NameOr_Email_Address_already_exists.PleaseTryAgain."	


			Action Rules
				if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (CreationRequiredFieldsEntered)
						constraint (TelephoneNumber entered)
							"PhoneNumberIsRequired"
						constraint (EmailAddress entered)
							"EmailAddressIsRequired"

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					constraint (TelephoneNumber entered)
						"PhoneNumberIsRequired"
					constraint (EmailAddress entered)
						"EmailAddressIsRequired"

				Active = true
				PrimaryContact = true


				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (!TransientUserRegistered)
						FieldToConvert	= EmailAddress
						EmailAddress	= LowerCaseEmailAddress

						if (!CustomerRepresentative.CreatedInternally)   
							invoke RegisterUser ExternalUserExecutor
								resume on error
								assign result to JSONResponse
								invoked.EntityId				= CustomerRepresentative.BillingRecvExtEntityGUID
								invoked.IdentifierId 			= "PrimaryEmail"
								invoked.IdentifierValue 		= EmailAddress
								invoked.Password 				= Password
								invoked.EnableUserVerification	= false
								invoked.FirstName				= MainContact.GivenName
								invoked.LastName				= MainContact.FamilyName


							TransientResponseStatus = JSONResponse select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
								TransientSingleJSONNode = JSONResponse select "$.response.user.userIdentity"

								LoginName = TransientSingleJSONNode

								invoke QuickUpdate CustomerRepresentative
									invoked.LoginName			= TransientSingleJSONNode
									invoked.ContactIsRegistered	= true
									initialize invoked.RegistrationPassword
									initialize invoked.RegistrationConfirmPassword
							else
								TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
								TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
								constraint (false)
									"<TransientStringHolder>"
					else
						if (TransientVerificationCode entered
						and !TransientUserVerified)
							invoke VerifyUser ExternalUserExecutor
								resume on error
								assign result to JSONResponse
								invoked.EntityId			= CustomerRepresentative.BillingRecvExtEntityGUID
								invoked.UserIdentity		= TransientUserIdentity
								invoked.VerificationId		= TransientUserVerificationId
								invoked.VerificationCode	= TransientVerificationCode
							TransientResponseStatus = JSONResponse select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
								TransientUserVerified	= true
								TransientSingleJSONNode = TransientUserIdentity
								LoginName				= TransientUserIdentity

								invoke QuickUpdate CustomerRepresentative
									invoked.LoginName				= TransientSingleJSONNode
									invoked.ContactIsRegistered		= true
									invoked.TransientUserVerified	= TransientUserVerified
									initialize invoked.RegistrationPassword
									initialize invoked.RegistrationConfirmPassword
							else
								TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
								TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
								constraint (false)
									"<TransientStringHolder>"

			Exit Rules

				if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (EmailAddress entered
					and	ReceiveEmailNotification)
						if (!CustomerRepresentative.CreatedInternally
						or (CustomerRepresentative.CreatedInternally
						and CustomerGroup.SendForInternallyCreatedCustomer))
							send email
								to EmailAddress
								from CustomerGroup.AdminEmailAddress
								subject "<CustomerGroup.AccessRequestEmailSubject>"
								Contents
									"<CustomerGroup.AccessRequestEmailContent>"
									"<LoginName>"

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (CustomerRepresentative.CreatedInternally)
						send email
							to EmailAddress
							from CustomerGroup.AdminEmailAddress
							subject "Complete_Your_Registration"
							Contents
								"<CustomerGroup.AccessRequestEmailContent>"
								"_"
								"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
								"_"
								"<DerivedRegisterHereLink>"
					else
						if (ReceiveEmailNotification)
							send email
								to EmailAddress
								from CustomerGroup.AdminEmailAddress
								subject "<CustomerGroup.AccessRequestEmailSubject>"
								Contents
									"<CustomerGroup.AccessRequestEmailContent>"
									"<EmailAddress>"

				LocalContactInfo.EmailAddress = EmailAddress
				LocalContactInfo.TelephoneNumber = TelephoneNumber

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)

					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					if	(!CustomerRepresentative.CreatedInternally)
						register new actor
							login name is TransientAutogeneratedActorId
							password is Password
							webapp is BillingReceivablesPortal
							role is "CustomerRepresentativePrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is true
							user identity is TransientSingleJSONNode

					else
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is BillingReceivablesPortal
							role is "CustomerRepresentativePrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
				else
					constraint (LoginName != actor)	
						"UserNameCannotBeSameAsLoggedInActor"	
					register new actor
						login name is LoginName
						password is Password
						webapp is BillingReceivablesPortal
						person name is MainContact
						role is "CustomerRepresentativePrimaryContact_ST"

				invoke Update agent(Actor).Actor
					invoked.PersonName					 = MainContact
					invoked.ContactInfo.EmailAddress	 = EmailAddress
					invoked.ContactInfo.TelephoneNumber	 = TelephoneNumber

				if (CustomerGroup.NotificationEmailAddress entered)
					send email
						to CustomerGroup.NotificationEmailAddress
						from CustomerGroup.AdminEmailAddress
						subject "ANewCustomerRepresentativeHasRequestedAccessToThe_\Billing&Receivables_\Portal"
						Contents
							"ANewCustomerRepresentativeHasRequestedAccessToThe_\Billing&Receivables_\Portal._ValidationIsRequiredFor:"
							"CustomerRepresentative:<CustomerRepresentative>_<CustomerRepresentative.CustomerName>"
				if (CustomerGroup.MainThirdPartyPaymentProcessingSetupsComplete)	
					invoke CreateActorContextForEachNewCustomerRepresentativeContact	



		NewContact is a Create Action 
			default label is "CreateContact"
			valid when (NewContactValid)

			Field Rules
				LoginName
					if (true)
						if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (LoginName entered)
							required
								"PasswordIsRequired"
				ConfirmPassword
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (Password entered)
							required
								"ConfirmPasswordIsRequired"
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"
				EmailAddress
					LocalEmailAddress = EmailAddress
					constraint (!CustomerRepresentativeContactEmailExistsRel exists)	
						"EmailAddressAlreadyExistsAsAContactInTheSystem"	
				MainContact
					if (true)
						required

			Action Rules
				if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (CreationRequiredFieldsEntered)
						constraint (TelephoneNumber entered)
							"PhoneNumberIsRequired"
						constraint (EmailAddress entered)
							"EmailAddressIsRequired"

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
						constraint (EmailAddress entered)
							"EmailAddressIsRequired"

						FieldToConvert		= EmailAddress
						EmailAddress		= LowerCaseEmailAddress

						LocalEmailAddress = EmailAddress
						constraint (!CustomerRepresentativeContactEmailExistsRel exists)
							"EmailAddressAlreadyExistsAsAContactInTheSystem"

				Active = true

			Exit Rules
				if (CustomerRepresentative.BillingRecvExtEntityEnabled)

					send email
						to EmailAddress
						from CustomerGroup.AdminEmailAddress
						subject "Complete_Your_Registration"
						Contents
							"<CustomerGroup.AccessRequestEmailContent>"
							"_"
							"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
							"_"
							"<DerivedRegisterHereLink>"

					LocalContactInfo.EmailAddress	= EmailAddress
					LocalContactInfo.TelephoneNumber = TelephoneNumber


					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					register new actor
						login name is TransientAutogeneratedActorId
						webapp is BillingReceivablesPortal
						role is "CustomerRepresentativeContact_ST"
						person name is MainContact
						contact info is LocalContactInfo
						self register is false
				else
					constraint (LoginName != actor)	
						"UserNameCannotBeSameAsLoggedInActor"	
					if (LoginName entered)
						register new actor
							login name is LoginName
							password is Password
							webapp is BillingReceivablesPortal
							person name is MainContact
							role is "CustomerRepresentativeContact_ST"

				invoke Update agent(Actor).Actor
					invoked.PersonName					 = MainContact
					invoked.ContactInfo.EmailAddress	 = EmailAddress
					invoked.ContactInfo.TelephoneNumber	 = TelephoneNumber

				if (EmailAddress entered
				and	ReceiveEmailNotification)
					invoke SendValidateEmail
				if (CustomerGroup.MainThirdPartyPaymentProcessingSetupsComplete)	
					invoke CreateActorContextForEachNewCustomerRepresentativeContact	


		InternallyCreateContacts is a Create Action 
			default label is "CreateContact"
			valid when (CustomerRepresentative.IsUpdatable)
			Field Rules
				LoginName
					if (true)
						if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (LoginName entered)
							required
								"PasswordIsRequired"
				ConfirmPassword
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (Password entered)
							required
								"ConfirmPasswordIsRequired"
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"
				MainContact
					if (true)
						required
				EmailAddress	
					LocalEmailAddress = EmailAddress	
					constraint (!CustomerRepresentativeContactEmailExistsRel exists)	
						"EmailAddressAlreadyExistsAsAContactInTheSystem"	


			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"
				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					FieldToConvert		= EmailAddress
					EmailAddress		= LowerCaseEmailAddress

					LocalEmailAddress = EmailAddress
					constraint (!CustomerRepresentativeContactEmailExistsRel exists)
						"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (PrimaryContact
				and ExistingPrimaryContactRel exists)
					confirmation required
						"Warning:TheExistingPrimaryContactOf<first ExistingPrimaryContactRel.MainContact.FirstAndLastName>WillChangeToNoLongerBeThePrimaryContact;DoYouWantToContinue?"
					invoke UpdatePrimaryContact ExistingPrimaryContactRel
						invoked.PrimaryContact	= false

				Active = true

			Exit Rules
				if (CustomerRepresentative.BillingRecvExtEntityEnabled)

					LocalContactInfo.EmailAddress		= EmailAddress
					LocalContactInfo.TelephoneNumber	= TelephoneNumber


					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					if (PrimaryContact)
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is BillingReceivablesPortal
							role is "CustomerRepresentativePrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
					else
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is BillingReceivablesPortal
							role is "CustomerRepresentativeContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
				else
					if (LoginName entered)
						constraint (LoginName != actor)	
							"UserNameCannotBeSameAsLoggedInActor"	
						if (PrimaryContact)
							register new actor
								login name is LoginName
								password is Password
								webapp is BillingReceivablesPortal
								person name is MainContact
								role is "CustomerRepresentativePrimaryContact_ST"
						else
		 					register new actor
								login name is LoginName
								password is Password
								webapp is BillingReceivablesPortal
								person name is MainContact
								role is "CustomerRepresentativeContact_ST"

				invoke Update agent(Actor).Actor
					invoked.PersonName					 = MainContact
					invoked.ContactInfo.EmailAddress	 = EmailAddress
					invoked.ContactInfo.TelephoneNumber	 = TelephoneNumber

				if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
					if (EmailAddress entered
					and ReceiveEmailNotification
					and CustomerGroup.SendForInternallyCreatedCustomer)
						invoke SendValidateEmail

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					send email
						to EmailAddress
						from CustomerGroup.AdminEmailAddress
						subject "Complete_Your_Registration"
						Contents
							"<CustomerGroup.AccessRequestEmailContent>"
							"_"
							"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
							"_"
							"<DerivedRegisterHereLink>"

				if (CustomerGroup.MainThirdPartyPaymentProcessingSetupsComplete)	
					invoke CreateActorContextForEachNewCustomerRepresentativeContact	


		Update is an Update Action 
			valid when (CustomerRepresentative.IsUpdatable)
			Field Rules
				LoginName
					if (old LoginName entered)
						cannot be changed
							"UserNameCannotBeChanged"

				Password
					if (old LoginName entered) 
						cannot be changed
							"PasswordCannotBeChanged-SeeSecurityAdministrator"

				ConfirmPassword
					if (old LoginName entered) 
						cannot be changed
							"PasswordCannotBeChanged-SeeSecurityAdministrator"

				MainContact
					required

			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"

				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (!Active
				and PrimaryContact changed)
					constraint (!PrimaryContact)
						"CannotMakeAnInactiveContactThePrimaryContact"

				if (PrimaryContact
				and PrimaryContact changed)
					LocalPrimaryContactChanged = true

					invoke Delete CustomerRepresentativeContactSTRel
					invoke Create ActorRole
						invoked.Actor			= agent(Actor).Actor 
						invoked.ActorRole.Role	= "CustomerRepresentativePrimaryContact_ST"

					if (ReceiveEmailNotification
					and CustomerGroup.NotifyNewPrimaryContact)
						send email
							to EmailAddress
							from CustomerGroup.AdminEmailAddress
							subject "<CustomerGroup.PrimaryContactEmailSubject>"
							Contents
								"<CustomerGroup.PrimaryContactEmailContent>"

				if (PrimaryContact changed)
					constraint (!old PrimaryContact)
						"MustHaveAPrimaryContact"

				if (ConvertedLowerCaseEmailAddress entered
				and EmailAddress changed)
					FieldToConvert					= EmailAddress
					ConvertedLowerCaseEmailAddress	= LowerCaseEmailAddress

			Exit Rules
				if (PrimaryContact
				and LocalPrimaryContactChanged)
					confirmation required
						"Warning:TheExistingPrimaryContactOf<first ExistingPrimaryContactRel.MainContact.FirstAndLastName>WillChangeToNoLongerBeThePrimaryContact;DoYouWantToContinue?"
					invoke UpdatePrimaryContact ExistingPrimaryContactRel
						invoked.PrimaryContact	= false

				if (MainContact changed
				or	EmailAddress changed
				or  TelephoneNumber changed)
					invoke Update agent(Actor).Actor
						invoked.PersonName					= MainContact
						invoked.ContactInfo.EmailAddress	= EmailAddress
						invoked.ContactInfo.TelephoneNumber = TelephoneNumber


		CustomerUpdate is an Update Action   
			default label is "UpdateContact"
			valid when (Active)
			completion message is "UpdateIsCompleteSomeChangesMayNotTakeEffectUntilYourNextLogin"
			Field Rules
				LoginName
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (IsPrimary)
							required
								"UserNameIsRequired"
				Password
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (IsPrimary)
							required
								"PasswordIsRequired"
				ConfirmPassword
					if (!CustomerRepresentative.BillingRecvExtEntityEnabled)
						if (Password entered)
							required
								"ConfirmPasswordIsRequired"
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"
				MainContact
					if (true)
						required

			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"
				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (ConvertedLowerCaseEmailAddress entered
				and EmailAddress changed)
					FieldToConvert					= EmailAddress
					ConvertedLowerCaseEmailAddress	= LowerCaseEmailAddress

			Exit Rules
				if (MainContact changed
				or	EmailAddress changed
				or  TelephoneNumber changed)
					invoke Update agent(Actor).Actor
						invoked.PersonName					 = MainContact
						invoked.ContactInfo.EmailAddress	 = EmailAddress
						invoked.ContactInfo.TelephoneNumber	 = TelephoneNumber


		RegisterCustomerRepresentativeContact is an Update Action  
			restricted
			bypass field rules
			Action Rules
				if (!TransientUserRegistered)
					if (!DerivedContactRegisteredInIFS)				
						invoke RegisterUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId				= CustomerRepresentative.BillingRecvExtEntityGUID
							invoked.IdentifierId 			= "PrimaryEmail"
							invoked.IdentifierValue 		= EmailAddress
							invoked.Password 				= Password
							invoked.EnableUserVerification	= false
							invoked.FirstName				= MainContact.GivenName
							invoked.LastName				= MainContact.FamilyName


						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							TransientSingleJSONNode = JSONResponse select "$.response.user.userIdentity"

							LoginName = TransientSingleJSONNode

							invoke QuickUpdate CustomerRepresentative
								invoked.LoginName			= TransientSingleJSONNode
								invoked.ContactIsRegistered	= true
								initialize invoked.RegistrationPassword
								initialize invoked.RegistrationConfirmPassword

							LocalCreateIdentity = true
						else
							TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolder>"
				else
					if (TransientVerificationCode entered
					and !TransientUserVerified)
						invoke VerifyUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId			= CustomerRepresentative.BillingRecvExtEntityGUID
							invoked.UserIdentity		= TransientUserIdentity
							invoked.VerificationId		= TransientUserVerificationId
							invoked.VerificationCode	= TransientVerificationCode
						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							TransientUserVerified	= true
							TransientSingleJSONNode = TransientUserIdentity
							LoginName				= TransientUserIdentity

							invoke QuickUpdate CustomerRepresentative
								invoked.LoginName				= TransientSingleJSONNode
								invoked.ContactIsRegistered		= true
								invoked.TransientUserVerified	= TransientUserVerified
								initialize invoked.RegistrationPassword
								initialize invoked.RegistrationConfirmPassword

							LocalCreateIdentity = true
						else
							TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolder>"
			Exit Rules
				if (LocalCreateIdentity)
						invoke CreateFormBasedIdentity Identity
							assign result to LocalIdentity
							invoked.Service									= CustomerRepresentative.BillingReceivablesPortalService  
							invoked.FormBasedIdentityProperties.User		= TransientSingleJSONNode
							invoked.FormBasedIdentityProperties.Password	= "ThisFieldNotUsedForExternalEntity"

						invoke Create IdentityActor
							invoked.Service									= CustomerRepresentative.BillingReceivablesPortalService
							invoked.Identity								= LocalIdentity
							invoked.Actor									= agent(Actor).Actor


		UpdatePrimaryContact is an Update Action
			restricted

			Action Rules
				invoke Delete CustomerRepresentativePrimaryContactSTRel
				invoke Create ActorRole
					invoked.Actor			= agent(Actor).Actor 
					invoked.ActorRole.Role	= "CustomerRepresentativeContact_ST"

				if (ReceiveEmailNotification
				and CustomerGroup.NotifyPreviousPrimaryContact)
					send email
						to EmailAddress
						from CustomerGroup.AdminEmailAddress
						subject "<CustomerGroup.ContactEmailSubject>"
						Contents
							"<CustomerGroup.ContactEmailContent>"


		Delete is an Action
			valid when (CustomerRepresentative.IsUpdatable)
			Action Rules
				if (!CustomerRepresentative.DeleteCustomerRepresentative)
					if (OtherContactsRel exists)
						constraint (!PrimaryContact)
							"CannotDeletePrimaryContact;MustDesignateAnotherContactAsThePrimaryContactBeforeDeletingThisContact"
						invoke DeleteActorContextForEachDeletedCustomerRepresentativeContact
					else
						constraint (!PrimaryContact)
							"CannotDeletePrimaryContact;MustDeleteCustomerRepresentative"
				else
					invoke DeleteActorContextForEachDeletedCustomerRepresentativeContact


		ActivateCustomerContact is an Instance Action
			default label is "ActivateContact"
			valid when (CanActivateContact)

			Action Rules
				constraint (CustomerRepresentative.Active)
					"CannotActivateContact;CustomerRepresentativeIsInactive"

				Active = true
				if (IsBillingReceivablesPortal)
					PortalInactiveSource = 2 
				else
					PortalInactiveSource = 1 
				InactiveTimeStamp = ""

			Exit Rules
				if (CustomerRepresentative.Active)
					invoke UpdateLandingPageForActive

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					invoke EnableActor agent(Actor).Actor

		InactivateCustomerContact is an Instance Action 
			default label is "InactivateContact"
			valid when (AllowInternalUserToInactivateContact)

			subject is CustomerRepresentativeContactInternalInactivate
			reason code required
			confirmation required
				"InactivatingThisContactWillPreventAccessToThe_\Billing&Receivables_\Portal;DoYouWantToContinue?"
			Action Rules
				if (PrimaryContact)
					confirmation required
						"YouAreInactivatingThePrimaryContact;DoYouWantToContinue?"

				Active = false
				InactiveTimeStamp = current timestamp
				PortalInactiveSource = 1 
				if (CustomerRepresentative.Active)
					invoke UpdateLandingPageForInactive

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					invoke DisableActor agent(Actor).Actor


		InactivateContact is an Instance Action 
			valid when (AllowCustomerRepresentativeToInactivateContact)
			subject is CustomerRepresentativeContactCustomerInactivate
			reason code required
			confirmation required
				"InactivatingThisContactWillPreventAccessToThe_\Billing&Receivables_\Portal;DoYouWantToContinue?"
			Action Rules
				Active = false
				InactiveTimeStamp = current timestamp
				PortalInactiveSource = 2 
				if (CustomerRepresentative.Active)
					invoke UpdateLandingPageForInactive

				if (CustomerRepresentative.BillingRecvExtEntityEnabled)
					invoke DisableActor agent(Actor).Actor

		UpdateLandingPageForActive is an Instance Action
			restricted
			Action Rules
				invoke Delete ActorGroupMemberRel

				if (CustomLandingPageRel exists)
					invoke Update CustomLandingPageRel
						invoked.Active			 = true
						invoked.effective date	 = current corporate date

		UpdateLandingPageForInactive is an Instance Action
			restricted
			Action Rules
				invoke Create ActorGroupMember
					invoked.ActorGroup	 = "InactiveCustomerRepresentative"
					invoked.Actor		 = agent(Actor).Actor 

				if (CustomLandingPageRel exists)
					invoke Update CustomLandingPageRel
						invoked.Active			 = false
						invoked.effective date	 = current corporate date


		EmailToCustomerContacts is an Instance Action
			default label is "SendEmail"
			valid when (EmailToCustomerContactsValid)
			Parameters
				ToEmail			is an EmailAddress 
					holds pii
				FromEmail		is an EmailAddress 
					holds pii
				Subject			is Text
				EmailContents	is Text

			Parameter Rules
				ToEmail
					initial value is CustomerRepresentativeContact.EmailAddress
				FromEmail
					initial value is actor.ContactInfo.EmailAddress
					required
				Subject
					required
				EmailContents
					required

			Action Rules
				send email
					to ToEmail
					from CustomerGroup.AdminEmailAddress
					cc FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"

				invoke Create CustomerRepresentativeContactMessage
					invoked.CustomerGroup 					= CustomerGroup
					invoked.CustomerRepresentative 			= CustomerRepresentative
					invoked.CustomerRepresentativeContact	= CustomerRepresentativeContact
					invoked.CreationDateTime				= current timestamp
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2





































































		UpdateMyContactInformation is an Instance Action 
			valid when (IsLoggedInAndActive)	
			completion message is "ContactInformationHasBeenUpdated"

			Parameters
				NewMainContact					is an PersonName 
					holds pii
				NewEmailAddress					is an EmailAddress 
					holds pii
				NewTelephoneNumber				is a TelephoneNumber 
					holds pii
				NewReceiveEmailNotification		is Boolean

			Parameter Rules
				NewMainContact
					initial value is MainContact
				NewEmailAddress
					initial value is EmailAddress
				NewTelephoneNumber
					initial value is TelephoneNumber
				NewReceiveEmailNotification
					initial value is ReceiveEmailNotification

			Action Rules
				invoke CustomerUpdate CustomerRepresentativeContact
					invoked.MainContact					= NewMainContact
					invoked.EmailAddress				= NewEmailAddress
					invoked.TelephoneNumber				= NewTelephoneNumber
					invoked.ReceiveEmailNotification	= NewReceiveEmailNotification


		ResetCustomerContactPassword is an Instance Action	
			restricted
			Action Rules



		ResetCustomerContactPasswordSetAction is a Set Action	
			restricted
			Instance Selection
				where (false)

			Action Rules
				Empty Set Rules



		SendValidateEmail is an Instance Action
			restricted
			Action Rules
				send email
					to EmailAddress
					from CustomerGroup.AdminEmailAddress
					subject "<CustomerGroup.FinalNewValidationEmailSubject>"
					Contents
						"<CustomerGroup.FinalNewValidationEmailContent>"
						"<current timestamp>"


		CustomerUpdateRequest is an Instance Action
			valid when (CanUpdateAccountInformation)
			default label is "UpdateAccountInformation"
			Parameters
				NewPostalAddress	is a PostalAddressV2 
					holds pii
				NewContact			is a Contact 
					holds pii
				NewTaxID			is a TaxID 
					holds pii
				NewEmailAddress		is an EmailAddress 
					holds pii
				NewContactTitle		is a Title
				NewPhoneNumber		is a TelephoneNumber 
					holds pii
				NewURLAddress		is a URLAddress
				NewMobileNumber		is a MobilePhone 
					holds pii
				NewFaxNumber 		is a FaxNumber
					holds pii
				NewTwitterID 		is a TwitterID
					holds pii
				NewSocialNetworkID2	is a SocialNetworkID2 
					holds pii
				NewSocialNetworkID3 is a SocialNetworkID3
					holds pii
				NewSocialNetworkID4 is a SocialNetworkID4
					holds pii
				NewSocialNetworkID5 is a SocialNetworkID5
					holds pii

			Parameter Rules
				NewPostalAddress
					initial value is Customer.PostalAddress

				NewContact
					initial value is Customer.Contact

				NewTaxID
					initial value is Customer.TaxID

				NewEmailAddress
					initial value is Customer.EmailAddress

				NewContactTitle
					initial value is Customer.ContactTitle

				NewPhoneNumber
					initial value is Customer.PhoneNumber

				NewURLAddress
					initial value is Customer.URLAddress

				NewMobileNumber
					initial value is Customer.MobileNumber

				NewFaxNumber
					initial value is Customer.FaxNumber

				NewTwitterID
					initial value is Customer.TwitterID

				NewSocialNetworkID2
					initial value is Customer.SocialNetworkID2

				NewSocialNetworkID3
					initial value is Customer.SocialNetworkID3

				NewSocialNetworkID4
					initial value is Customer.SocialNetworkID4

				NewSocialNetworkID5
					initial value is Customer.SocialNetworkID5

			Action Rules
				invoke PortalCustomerUpdateRequest Customer
					invoked.CustomerGroup		= CustomerGroup
					invoked.Customer			= Customer
					invoked.PrmPostalAddress	= NewPostalAddress
					invoked.PrmContact			= NewContact
					invoked.PrmTaxID			= NewTaxID
					invoked.PrmEmailAddress		= NewEmailAddress
					invoked.ContactTitle		= NewContactTitle
					invoked.PhoneNumber			= NewPhoneNumber
					invoked.URLAddress			= NewURLAddress
					invoked.MobileNumber		= NewMobileNumber
					invoked.FaxNumber			= NewFaxNumber
					invoked.TwitterID			= NewTwitterID
					invoked.SocialNetworkID2	= NewSocialNetworkID2
					invoked.SocialNetworkID3	= NewSocialNetworkID3
					invoked.SocialNetworkID4	= NewSocialNetworkID4
					invoked.SocialNetworkID5	= NewSocialNetworkID5


		Anonymize is an Instance Action	
			restricted
			Action Rules
				initialize MainContact
				MainContact.FamilyName	= Customer

				initialize Password
				initialize ConfirmPassword
				initialize TelephoneNumber
				initialize EmailAddress
				initialize ConvertedLowerCaseEmailAddress

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup			= CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup
					invoked.Status							= 1
					invoked.AffectedBusinessClass			= "AR6"
					invoked.CustomerGroup					= CustomerGroup
					invoked.CustomerRepresentative			= CustomerRepresentative
					invoked.CustomerRepresentativeContact	= CustomerRepresentativeContact


		PurgeAuditLog is an Instance Action	
			restricted
			Action Rules
				invoke purge audit log entries

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup			= CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup
					invoked.Status							= 2
					invoked.AffectedBusinessClass			= "AR6"
					invoked.CustomerGroup					= CustomerGroup
					invoked.CustomerRepresentative			= CustomerRepresentative
					invoked.CustomerRepresentativeContact	= CustomerRepresentativeContact



		SelectPaymentMethod is an Instance Action	
			valid when (DerivedTotalPortalRequestedAppliedAmountGreaterThanZero)
			Parameters
				PrmPaymentMethod				is Alpha size 5
					default label is "PaymentMethod"
					States
						ACH						value is "ACH"
						CreditCard				value is "CC"

			Parameter Rules
				PrmPaymentMethod
					required
						"PleaseSelectA_\Payment_\MethodBeforeClickingSubmit."	

			Local Fields
				NewReceivablePortalPaymentHeader	is a ReceivablePortalPaymentHeader view

			Entrance Rules

				constraint (DerivedTotalPortalRequestedAppliedAmountGreaterThanZero)
					"BeforeSelectingAPaymentMethod,TheTotalRequestedAmountMustBeGreaterThanZero."
				invoke IncrementTransactionApiId actor.context.CustomerGroup	
				ThirdPartyPaymentProcessingTransactionApiId = actor.context.CustomerGroup.ThirdPartyPaymentProcessingTransactionApiId	

				invoke Update ReceivablePortalPaymentHeader1Rel	
					invoked.ThirdPartyPaymentProcessingTransactionApiId = actor.context.CustomerGroup.ThirdPartyPaymentProcessingTransactionApiId 

			Action Rules
				if (DerivedTotalPortalRequestedAppliedAmountGreaterThanZero)
					if (PrmPaymentMethod.ACH)
						invoke Update ReceivablePortalPaymentHeader1Rel	
							invoked.ThirdPartyPaymentProcessingPaymentMethod = "ach"
							invoked.ThirdPartyPaymentProcessingAction = "debit"
							invoked.ThirdPartyPaymentProcessingProductTransactionId = actor.context.CustomerGroup.ThirdPartyPaymentProcessingProductTransactionIdACH




					if (PrmPaymentMethod.CreditCard)
						invoke Update ReceivablePortalPaymentHeader1Rel	
							invoked.ThirdPartyPaymentProcessingPaymentMethod = "cc"
							invoked.ThirdPartyPaymentProcessingAction = "sale"
							invoked.ThirdPartyPaymentProcessingProductTransactionId = actor.context.CustomerGroup.ThirdPartyPaymentProcessingProductTransactionIdCC




					invoke UpdateTransactionAmount ReceivablePortalPaymentHeader1Rel	
					invoke UpdateProcessLevel ReceivablePortalPaymentHeader1Rel	

			Exit Rules
				if (DerivedTotalPortalRequestedAppliedAmountGreaterThanZero)
					invoke BuildPayFormURL ReceivablePortalPaymentHeader1Rel


		InitializeReceivablePortalPaymentHeader is an Instance Action	
			restricted	
			Action Rules
				initialize ReceivablePortalPaymentHeader








		UnwindDeclinedPaymentRequest is an Instance Action

			completion message is "PaymentDeclined"
			Action Rules



				invoke GetResponseFromThirdPartyPaymentProcessing ReceivablePortalPaymentHeader2Rel	

			Exit Rules
				if (InvoiceCustomerNationalAccountTransactionPortalPaymentSelectedExist)	

					for each InvoiceCustomerNationalAccountTransactionPortalPaymentSelectedRel
						invoke UnSelectForCreditCardOrACHPayment each
				else
				if (IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies)
					if (InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRelExist)

						for each InvoiceCustomerReceivableInvoiceDetailPortalPaymentSelectedRel
							invoke UnSelectForCreditCardOrACHPayment each
				else
					if (InvoiceCustomerReceivableInvoiceDetailCompanyOnlyPortalPaymentSelectedRelExist)

						for each InvoiceCustomerReceivableInvoiceDetailCompanyOnlyPortalPaymentSelectedRel
							invoke UnSelectForCreditCardOrACHPayment each





















		CreateActorContextForEachCustomerRepresentativeContact is an Instance Action	
			default label is "SynchronizeCustomerContacts"
			restricted	
			completion message is "ActorContextsCreated"	
			Action Rules	

				for each AllCustomerRepresentativeContactRel	

					if (each.CustomerGroupActorContextRel exists)	
						invoke Update each.CustomerGroupActorContextRel	
							invoked.Value	= each.CustomerGroup	

					if (each.CustomerRepresentativeActorContextRel exists)	
						invoke Update each.CustomerRepresentativeActorContextRel	
							invoked.Value	= each.CustomerRepresentative	

					if (each.CustomerRepresentativeContactActorContextRel exists)	
						invoke Update each.CustomerRepresentativeContactActorContextRel	
							invoked.Value	= each.CustomerRepresentativeContact	

					if (!each.CustomerGroupActorContextRel exists)	
						invoke Create each.CustomerGroupActorContextRel	
							invoked.Value	= each.CustomerGroup	

					if (!each.CustomerRepresentativeActorContextRel exists)	
						invoke Create each.CustomerRepresentativeActorContextRel	
							invoked.Value	= each.CustomerRepresentative	

					if (!each.CustomerRepresentativeContactActorContextRel exists)	
						invoke Create each.CustomerRepresentativeContactActorContextRel	
							invoked.Value	= each.CustomerRepresentativeContact	




		CreateActorContextForEachNewCustomerRepresentativeContact is an Instance Action	
			restricted	
			completion message is "ActorContextsCreated"	
			Action Rules	

				for each AllCustomerRepresentativeContactRel	

					if (!each.CustomerGroupActorContextCreateRel exists)	
						invoke Create each.CustomerGroupActorContextCreateRel	


					if (!each.CustomerRepresentativeActorContextCreateRel exists)	
						invoke Create each.CustomerRepresentativeActorContextCreateRel


					if (!each.CustomerRepresentativeContactActorContextCreateRel exists)
						invoke Create each.CustomerRepresentativeContactActorContextCreateRel




		DeleteActorContextForEachDeletedCustomerRepresentativeContact is an Instance Action	
			restricted	
			completion message is "ActorContextsDeleted"	
			Action Rules	





				if (CustomerGroupActorContextCreateRel exists)	
					invoke Delete CustomerGroupActorContextCreateRel	


				if (CustomerRepresentativeActorContextCreateRel exists)	
					invoke Delete CustomerRepresentativeActorContextCreateRel


				if (CustomerRepresentativeContactActorContextCreateRel exists)
					invoke Delete CustomerRepresentativeContactActorContextCreateRel







































		UpdateEmail is an Update Action  
			restricted
			Action Rules
				confirmation required
					"SignInAuthenticationIsAffectedByChangingTheEmailAddress.Continue?"

				constraint (TransientNewEmailAddress entered)
					"NewEmailAddressIsRequired"
				constraint (TransientEmailPassword entered)
					"PasswordIsRequired"

				FieldToConvert				= TransientNewEmailAddress
				TransientNewEmailAddress	= LowerCaseEmailAddress

				constraint (TransientNewEmailAddress != EmailAddress)
					"NewEmailAddressIsTheSameAsTheCurrentEmailAddress"

				LocalEmailAddress = TransientNewEmailAddress
				constraint (!CustomerRepresentativeContactEmailExistsRel exists)
					"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (DerivedVerificationCodeRequired)
					constraint (TransientVerificationCode entered)
						"VerificationCodeIsRequired"

				if (!TransientUserUpdateInitiated)
					invoke UpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= CustomerRepresentative.BillingRecvExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= TransientNewEmailAddress
						invoked.IsPrimary		= true
						invoked.Password		= TransientEmailPassword

					TransientResponseStatus = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
						EmailAddress = TransientNewEmailAddress
						invoke Update agent(Actor).Actor
							invoked.ContactInfo.EmailAddress	= EmailAddress
					else
						TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
						constraint (false)
							"<TransientStringHolder>"
				else
					if (TransientVerificationCode entered
					and !TransientUserVerified)
						invoke VerifyUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId			= CustomerRepresentative.BillingRecvExtEntityGUID
							invoked.UserIdentity		= TransientUserIdentity
							invoked.VerificationId		= TransientUserVerificationId
							invoked.VerificationCode	= TransientVerificationCode
						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							TransientUserVerified	= true
							EmailAddress			= TransientNewEmailAddress
							invoke Update agent(Actor).Actor
								invoked.ContactInfo.EmailAddress	= EmailAddress
						else
							TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolder>"
						TransientResendVerificationCode	= false

			Exit Rules
				if (EmailAddress changed
				and DerivedMFAEnabled)
					invoke LoadDevices


		AdminUpdateEmail is an Instance Action
			restricted
			Parameters
				PrmNewEmailAddress			is an EmailAddress

			Parameter Rules
				PrmNewEmailAddress
					required
						"NewEmailAddressIsRequired"

			Action Rules
				confirmation required
					"SignInAuthenticationIsAffectedByChangingTheEmailAddress.Continue?"

				FieldToConvert		= PrmNewEmailAddress
				PrmNewEmailAddress	= LowerCaseEmailAddress

				constraint (PrmNewEmailAddress != EmailAddress)
					"NewEmailAddressIsTheSameAsTheCurrentEmailAddress"

				LocalEmailAddress = PrmNewEmailAddress
				constraint (!CustomerRepresentativeContactEmailExistsRel exists)
					"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (DerivedContactRegisteredInIFS)
					invoke AdminUpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= CustomerRepresentative.BillingRecvExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= PrmNewEmailAddress
						invoked.IsPrimary		= true

					TransientResponseStatus = JSONResponse select "$.responsestatus"

					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
						EmailAddress = PrmNewEmailAddress
						invoke Update agent(Actor).Actor
							invoked.ContactInfo.EmailAddress	= EmailAddress
					else
						TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
						constraint (false)
							"<TransientStringHolder>"
				else
					EmailAddress = PrmNewEmailAddress
					invoke Update agent(Actor).Actor
						invoked.ContactInfo.EmailAddress	= EmailAddress
			Exit Rules
				if (EmailAddress changed)
					if (DerivedContactRegisteredInIFS)
						if (CustomerRepresentative.DerivedVerificationCodeRequired)
							send email
								to EmailAddress
								from CustomerGroup.AdminEmailAddress
								subject "Your_Access_Information_Has_Changed"
								Contents
									"ToCompleteTheChange,PleaseUseThe_Forgot_PasswordLinkTheNextTimeYouSignIn"
						else
							send email
								to EmailAddress
								from CustomerGroup.AdminEmailAddress
								subject "Your_Access_Information_Has_Changed"
								Contents
									"PleaseUseTheNewEmailAddressTheNextTimeYouSignIn"
					else
						send email
							to EmailAddress
							from CustomerGroup.AdminEmailAddress
							subject "Complete_Your_Registration;_Access_Information_Change"
							Contents
								"<CustomerGroup.AccessRequestEmailContent>"
								"_"
								"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
								"_"
								"<DerivedRegisterHereLink>"
					if (DerivedMFAEnabled)
						invoke LoadDevices


		LoadDevices is an Instance Action
			restricted
			Action Rules
				invoke LoadRegisteredMFADevices MFAIdentityRel


		ExternalUserMigration is an Import Action  
			restricted
			Parameters
				PrmExternalUserEmail	is like EmailAddress
				PrmExternalUserActorId	is like Actor
				PrmExternalUserGUID		is like Identity

			Parameter Rules
				PrmExternalUserEmail
					required
				PrmExternalUserActorId
					required
				PrmExternalUserGUID
					required

			Action Rules
				LocalExternalUserEmail		= PrmExternalUserEmail
				LocalExternalUserActorId	= PrmExternalUserActorId

				if (MigrationExternalUserRel exists)
					if (PrmExternalUserEmail != PrmExternalUserActorId)
						if (MigrationExternalUserRel.Active)
							invoke RestrictedBypassUpdate MigrationExternalUserRel
								invoked.LoginName 						= PrmExternalUserGUID
								invoked.MigratedToExternalUser			= true
								invoked.ExternalUserMigrationMismatch	= true
								invoked.NotifiedMigrationChangedSignIn	= true

							CustomerGroup = MigrationExternalUserRel.CustomerGroup
							send email
								to PrmExternalUserEmail
								from CustomerGroup.EEMigrationUsernameChangeFromEmailAddress
								subject "<CustomerGroup.EEMigrationUsernameChangeEmailSubject>"
								Contents
									"<CustomerGroup.EEMigrationUsernameChangeEmailContent>"
									"<current timestamp>"
						else
							invoke RestrictedBypassUpdate MigrationExternalUserRel
								invoked.LoginName 						= PrmExternalUserGUID
								invoked.MigratedToExternalUser			= true
								invoked.ExternalUserMigrationMismatch	= true
					else
						invoke RestrictedBypassUpdate MigrationExternalUserRel
							invoked.LoginName 					= PrmExternalUserGUID
							invoked.MigratedToExternalUser		= true
				else
					constraint (false)
						"ApplicationRecordNotFound;ActorEmailAddressAndActorIdDoNotMatchAnyCustomerContactEmailAddressAndLoginName"


		SendEmailForExternalUserMigrationUsernameChange is an Instance Action
			valid when (ValidToSendUsernameMismatchEmail)
			Parameters
				ToEmail			is an EmailAddress 
					holds pii
				FromEmail		is an EmailAddress 
					holds pii
				Subject			is Text
				EmailContents	is Text

			Parameter Rules
				ToEmail
					initial value is EmailAddress
					required
				FromEmail
					initial value is CustomerGroup.EEMigrationUsernameChangeFromEmailAddress
					required
				Subject
					initial value is CustomerGroup.EEMigrationUsernameChangeEmailSubject
					required
				EmailContents
					initial value is CustomerGroup.EEMigrationUsernameChangeEmailContent
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"
						"<current timestamp>"


		RestrictedBypassUpdate is an Update Action
			restricted
			bypass field rules


		ExternalEntityPreMigrationCheck is a Set Action
			restricted
			Parameters
				PrmRunMode			is Numeric 1
					States
						ReportOnly			value is 0
						ReportAndUpdate		value is 1

			Local Fields
				LocalCustomerRepresentativeContactCount			is Numeric 9
				LocalCustomerRepresentativeContactErrorCount	is Numeric 9
				LocalMissingActorCount							is Numeric 9
				LocalContactAndActorMissingEmailCount			is Numeric 9
				LocalContactMissingEmailCount					is Numeric 9
				LocalActorMissingEmailCount						is Numeric 9
				LocalContactAndActorEmailMismatchCount			is Numeric 9
				LocalContactAndActorMissingFirstNameCount		is Numeric 9
				LocalContactMissingFirstNameCount				is Numeric 9
				LocalActorMissingFirstNameCount					is Numeric 9
				LocalContactAndActorFirstNameMismatchCount		is Numeric 9
				LocalContactAndActorMissingLastNameCount		is Numeric 9
				LocalContactMissingLastNameCount				is Numeric 9
				LocalActorMissingLastNameCount					is Numeric 9
				LocalContactAndActorLastNameMismatchCount		is Numeric 9
				LocalDuplicateEmailAddressCount					is Numeric 9
				IssueEncountered								is Boolean
				LocalUpdateContactEmailAddress					is Boolean
				LocalUpdateContactFirstName						is Boolean
				LocalUpdateContactLastName						is Boolean
				LocalUpdateActorEmailAddress					is Boolean
				LocalUpdateActorFirstName						is Boolean
				LocalUpdateActorLastName						is Boolean

			Sort Order
				CustomerGroup
				CustomerRepresentative
				CustomerRepresentativeContact

			Instance Selection
				where (MigratedToExternalUser = false)

			Action Rules
				Set Rules
					Entrance Rules

						invoke Purge CustomerRepContactPreMigrationIssuesAllRel

						invoke Create CustomerRepContactPreMigrationIssues
							invoked.CustomerRepContactPreMigrationIssues.RecordType	= 1 
							invoked.CustomerRepContactPreMigrationIssues.Sequence	= 1
							invoked.RunMode											= PrmRunMode
							invoked.RunDateStart									= current timestamp

					Exit Rules

						invoke Update CustomerRepContactPreMigrationIssuesSummaryRel
							invoked.CustomerRepresentativeContactCount		= LocalCustomerRepresentativeContactCount
							invoked.CustomerRepresentativeContactErrorCount	= LocalCustomerRepresentativeContactErrorCount
							invoked.MissingActorCount						= LocalMissingActorCount
							invoked.ContactAndActorMissingEmailCount		= LocalContactAndActorMissingEmailCount
							invoked.ContactMissingEmailCount				= LocalContactMissingEmailCount
							invoked.ActorMissingEmailCount					= LocalActorMissingEmailCount
							invoked.ContactAndActorEmailMismatchCount		= LocalContactAndActorEmailMismatchCount
							invoked.ContactAndActorMissingFirstNameCount	= LocalContactAndActorMissingFirstNameCount
							invoked.ContactMissingFirstNameCount			= LocalContactMissingFirstNameCount
							invoked.ActorMissingFirstNameCount				= LocalActorMissingFirstNameCount
							invoked.ContactAndActorFirstNameMismatchCount	= LocalContactAndActorFirstNameMismatchCount
							invoked.ContactAndActorMissingLastNameCount		= LocalContactAndActorMissingLastNameCount
							invoked.ContactMissingLastNameCount				= LocalContactMissingLastNameCount
							invoked.ActorMissingLastNameCount				= LocalActorMissingLastNameCount
							invoked.ContactAndActorLastNameMismatchCount	= LocalContactAndActorLastNameMismatchCount
							invoked.DuplicateEmailAddressCount				= LocalDuplicateEmailAddressCount
							invoked.RunDateEnd = current timestamp

				Instance Rules
					LocalCustomerRepresentativeContactCount = LocalCustomerRepresentativeContactCount + 1
					IssueEncountered				= false
					LocalUpdateContactEmailAddress	= false
					LocalUpdateContactFirstName		= false
					LocalUpdateContactLastName		= false
					LocalUpdateActorEmailAddress	= false
					LocalUpdateActorFirstName		= false
					LocalUpdateActorLastName		= false

					if (EEMigrationActorRel not exists)
						LocalMissingActorCount = LocalMissingActorCount + 1
						IssueEncountered = true

						invoke Create CustomerRepContactPreMigrationIssues
							invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
							invoked.CustomerGroup									= CustomerGroup
							invoked.CustomerRepresentative							= CustomerRepresentative
							invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
							invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
							invoked.CustomerRepresentativeContactName				= MainContact
							invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
							invoked.ActorName										= EEMigrationActorRel.PersonName
							invoked.PreventsMigration								= true
							invoked.ProcessMessage									= "Actor record does not exist.  Manual correction is required."
					else

						if (EmailAddress not entered
						and EEMigrationActorRel.ContactInfo.EmailAddress not entered)
							LocalContactAndActorMissingEmailCount = LocalContactAndActorMissingEmailCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.PreventsMigration								= true
								invoked.ProcessMessage									= "Contact and Actor records are missing email address.  Manual correction is required. "

						if (EmailAddress not entered
						and EEMigrationActorRel.ContactInfo.EmailAddress entered)
							LocalContactMissingEmailCount = LocalContactMissingEmailCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing email address.  Email exists on Actor.  System will update Contact with Actor email address."
								else
									invoked.ProcessMessage								= "Contact record was missing email address.  System updated Contact with Actor email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactEmailAddress = true

						if (EEMigrationActorRel.ContactInfo.EmailAddress not entered
						and EmailAddress entered)
							LocalActorMissingEmailCount = LocalActorMissingEmailCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing email address.  Email exists on Contact.  System will update Actor with Contact email address."
								else
									invoked.ProcessMessage								= "Actor record was missing email address.  System updated Actor with Contact email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorEmailAddress = true

						if (EmailAddress entered
						and EEMigrationActorRel.ContactInfo.EmailAddress entered
						and EmailAddress != EEMigrationActorRel.ContactInfo.EmailAddress)
							LocalContactAndActorEmailMismatchCount = LocalContactAndActorEmailMismatchCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor email address does not match Contact email address.  System will update Actor with Contact email address."
								else
									invoked.ProcessMessage								= "Actor email address did not match Contact email address.  System updated Actor with Contact email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorEmailAddress = true

						if (MainContact.GivenName not entered
						and EEMigrationActorRel.PersonName.GivenName not entered)
							LocalContactAndActorMissingFirstNameCount = LocalContactAndActorMissingFirstNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.ProcessMessage									= "Contact and Actor records are missing first name.  Manual correction is required."

						if (MainContact.GivenName not entered
						and EEMigrationActorRel.PersonName.GivenName entered)
							LocalContactMissingFirstNameCount = LocalContactMissingFirstNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing first name.  Name exists on Actor.  System will update Contact with Actor first name."
								else
									invoked.ProcessMessage								= "Contact record was missing first name.  System updated Contact with Actor first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactFirstName = true

						if (EEMigrationActorRel.PersonName.GivenName not entered
						and MainContact.GivenName entered)
							LocalActorMissingFirstNameCount = LocalActorMissingFirstNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing first name.  Name exists on Contact.  System will update Actor with Contact first name."
								else
									invoked.ProcessMessage								= "Actor record was missing first name.  System updated Actor with Contact first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorFirstName = true

						if (MainContact.GivenName entered
						and EEMigrationActorRel.PersonName.GivenName entered
						and MainContact.GivenName != EEMigrationActorRel.PersonName.GivenName)
							LocalContactAndActorFirstNameMismatchCount = LocalContactAndActorFirstNameMismatchCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor first name does not match Contact first name.  System will update Actor with Contact first name."
								else
									invoked.ProcessMessage								= "Actor first name did not match Contact first name.  System updated Actor with Contact first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorFirstName = true

						if (MainContact.FamilyName not entered
						and EEMigrationActorRel.PersonName.FamilyName not entered)
							LocalContactAndActorMissingLastNameCount = LocalContactAndActorMissingLastNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.ProcessMessage									= "Contact and Actor records are missing last name.  Manual correction is required."

						if (MainContact.FamilyName not entered
						and EEMigrationActorRel.PersonName.FamilyName entered)
							LocalContactMissingLastNameCount = LocalContactMissingLastNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing last name.  Name exists on Actor.  System will update Contact with Actor last name."
								else
									invoked.ProcessMessage								= "Contact record was missing last name.  System updated Contact with Actor last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactLastName = true

						if (EEMigrationActorRel.PersonName.FamilyName not entered
						and MainContact.FamilyName entered)
							LocalActorMissingLastNameCount = LocalActorMissingLastNameCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing last name.  Name exists on Contact.  System will update Actor with Contact last name."
								else
									invoked.ProcessMessage								= "Actor record was missing last name.  System updated Actor with Contact last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorLastName = true

						if (MainContact.FamilyName entered
						and EEMigrationActorRel.PersonName.FamilyName entered
						and MainContact.FamilyName != EEMigrationActorRel.PersonName.FamilyName)
							LocalContactAndActorLastNameMismatchCount = LocalContactAndActorLastNameMismatchCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor last name does not match Contact last name.  System will update Actor with Contact last name."
								else
									invoked.ProcessMessage								= "Actor last name did not match Contact last name.  System updated Actor with Contact last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorLastName = true

					if (EmailAddress entered)
						if (EEMigrationDuplicateEmailRel exists)
							LocalDuplicateEmailAddressCount = LocalDuplicateEmailAddressCount + 1
							IssueEncountered = true

							invoke Create CustomerRepContactPreMigrationIssues
								invoked.CustomerRepContactPreMigrationIssues.RecordType	= 2 
								invoked.CustomerGroup									= CustomerGroup
								invoked.CustomerRepresentative							= CustomerRepresentative
								invoked.CustomerRepresentativeContact					= CustomerRepresentativeContact
								invoked.CustomerRepresentativeContactEmailAddress		= EmailAddress
								invoked.CustomerRepresentativeContactName				= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.DuplicateCustomerGroup							= EEMigrationDuplicateEmailRel.CustomerGroup
								invoked.DuplicateCustomerRepresentative					= EEMigrationDuplicateEmailRel.CustomerRepresentative
								invoked.DuplicateCustomerRepresentativeContact			= EEMigrationDuplicateEmailRel.CustomerRepresentativeContact
								invoked.DuplicateEmailAddress							= EEMigrationDuplicateEmailRel.EmailAddress
								invoked.DuplicateName									= EEMigrationDuplicateEmailRel.MainContact
								invoked.PreventsMigration								= true
								invoked.ProcessMessage									= "Duplicate email address found on another Contact.  Manual correction is required."

					if (IssueEncountered)
						LocalCustomerRepresentativeContactErrorCount = LocalCustomerRepresentativeContactErrorCount + 1

					if (PrmRunMode.ReportAndUpdate)
						if (LocalUpdateActorEmailAddress
						or  LocalUpdateActorFirstName
						or  LocalUpdateActorLastName)
							invoke Update EEMigrationActorRel
								if (LocalUpdateActorEmailAddress)
									invoked.ContactInfo.EmailAddress	= EmailAddress
								if (LocalUpdateActorFirstName)
									invoked.PersonName.GivenName		= MainContact.GivenName
								if (LocalUpdateActorLastName)
									invoked.PersonName.FamilyName		= MainContact.FamilyName

						if (LocalUpdateContactEmailAddress
						or  LocalUpdateContactFirstName
						or  LocalUpdateContactLastName)
							invoke RestrictedBypassUpdate
								if (LocalUpdateContactEmailAddress)
									invoked.EmailAddress			= EEMigrationActorRel.ContactInfo.EmailAddress
								if (LocalUpdateContactFirstName)
									invoked.MainContact.GivenName	= EEMigrationActorRel.PersonName.GivenName
								if (LocalUpdateContactLastName)
									invoked.MainContact.FamilyName	= EEMigrationActorRel.PersonName.FamilyName


		StoreEmailAddressInLowerCase is a Set Action
			restricted
			disable checkpoint
			Sort Order
				CustomerGroup
				CustomerRepresentative
				CustomerRepresentativeContact

			Instance Selection
				where (ConvertedLowerCaseEmailAddress not entered)

			Action Rules
				Instance Rules
					FieldToConvert		= EmailAddress

					invoke RestrictedBypassUpdate in background
						invoked.ConvertedLowerCaseEmailAddress 	= LowerCaseEmailAddress
