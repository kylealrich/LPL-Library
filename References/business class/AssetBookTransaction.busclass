AssetBookTransaction is a BusinessClass
    owned by am
    prefix is ABK
    classic name is AMBKTRANS

    Ontology
        symbolic key is AssetBookTransaction
            classic set name is ABKSET1
            classic name is SEQ-NUMBER

    Patterns
        implements StaticJava
        disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals


    Persistent Fields
		TransactionStatus
        TransactionAmount           is an InternationalAmount
            classic name is TRAN-AMOUNT
            precision is TransientBookCurrency.NumberOfDecimals
        TransactionNumberOfDecimals is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        AssetLease					is like AssetLease
		AssetProcess
        TransactionDate             is Date
            classic name is TRANS-DATE
        PostingDate					is Date
		AssetTransactionAmount		is a CurrencyExchangeDateGroup
        ProcessDate                 is Date
        ProcessSequence             is a Sequence
        Reference
        AssetAccountType
            classic name is ACC-TYPE
        CreationDate                is TimeStamp
        CreatedBy                   is an Operator 
        	holds pii
            classic name is CREATOR-ID
        DistributionAccount         is a FinanceCodeBlock
            classic name for DistributionAccount.AccountingUnit is ACCT-UNIT
            classic name for DistributionAccount.GeneralLedgerChartAccount is ACCOUNT
            classic name for DistributionAccount.Project is ACTIVITY

		AssetManagementInterfaceResult
			delete ignored
		AssetImpairment
			context of Asset
		FundTransactionSequence		is Numeric 2
		YearEndDate					is Date
		BatchUpdateResult			is like AssetBatchUpdateResult


    Context Fields

		AssetBook
		AssetTransfer	
		DateRangeFilter						is a DateRange


	Transient Fields
		TransientCurrencyTable				is a CurrencyTable
   		TransientDistributionAccount		is a FinanceCodeBlock
		TransientBookCurrency				is a FromCurrency
			derive value from AssetBookRel.PostingCurrency
		TransientAssetLease					is like AssetLease
			derive value from Asset.AssetLease
   		TransientACMAccount					is a FinanceCodeBlock
		TransientEXPAccount					is a FinanceCodeBlock
		TransientExchangeDate             	is an ExchangeDate
		TransientExchangeRate				is a CurrencyExchangeRate
		TransientCreateFromBatch			is Boolean
		TransientAccountingEntity			is an AccountingEntity
			derive value from Company.AccountingEntity
		TransientTransactionAmount			is an InternationalAmount
            derive value from TransactionAmount
            precision is OutputNumberOfDecimals
		TransientTransactionDate				is Date
		TransientTransferFromOrTo			is Numeric 1
			States
				From		value is 1
				To			value is 2
		TransientTransactionCurrency		is a Currency
			derive value from TransactionCurrency

   	Local Fields
  		LocalPostingDate					is Date
		I1									is Numeric 2
		F1									is Numeric 2
		LocalYearEndDate					is Date
		LocalCalendarPeriod					is Numeric 2
		LocalFullyDepreciated				is Boolean
		LocalSkipCheckACM					is Boolean
		BookDepreciationDifference			is an InternationalAmount
		LocalDepreciationDifference			is an InternationalAmount
		TotalDepreciationDifference			is an InternationalAmount
		SavedDepreciationDifference			is an InternationalAmount
		LocalPreviousYTDAmount				is an InternationalAmount
		LocalCurrencyAmount					is like InternationalAmount
		LocalAssetFund						is like AssetFund
		LocalLastAssetFund					is like AssetFund
		LocalLastProcessedFund				is like AssetFund
		LocalFundPercent					is Percent size 9.6
		LocalSkipUpdateBookHistory			is Boolean
		LocalDepreciationPeriodDates		is a DepreciationPeriodDates
		LocalDepreciationPeriodBeginDate	is Date
		LocalLifeRemaining					is like LifeRemaining
		LocalExpenseTransactionCreated		is Boolean
		SavedAsset							is an Asset
		LocalBookCalendarEndDate			is Date
		LocalCompany						is like Company
		LocalBook				 			is like Book
		LocalDistributionAccount			is a FinanceCodeBlock
		LocalLedger							is like Ledger
		LocalToAccountingEntity				is like AccountingEntity
        LocalAccountingUnit					is like AccountingUnit
        LocalChartAccount					is like GeneralLedgerChartAccount
        LocalProject						is like Project
		LocalDimensionCode					is like DimensionCode
		EntryStatus							is like TransactionStatus
		GetDefaultAccounts					is Boolean
		LocalAccountType					is like AssetAccountType
		LocalCurrencyTable					is a CurrencyTable
		LocalEnterpriseGroup				is a EnterpriseGroup
		LocalBaseAmount						is a CurrencyExchange
		LocalCurrencyExchange				is a CurrencyExchangeGroup
		LocalCurrencyRate					is a CurrencyExchangeRate
		LocalFromCurrency					is a FromCurrency
		LocalAsset							is like Asset
		LocalAssetBook						is like Book
		CreateFromBatch						is Boolean
		BypassActiveCodeBlockEdit
		BypassStructureRelationEdit
		FundTransactionTotal				is an InternationalAmount
		LocalTransactionAmount				is an InternationalAmount
		LocalFundAmount						is an InternationalAmount
		TotalForLocalFund					is an InternationalAmount
		TotalNewFunds 						is an InternationalAmount
		LocalAdjustmentAmount				is an InternationalAmount
		NetAdjustment						is an InternationalAmount
		NumberOfFunds						is Numeric 3
  		FundCount							is Numeric 3
		EachFundTransactionAmount 			is an InternationalAmount
		EachFundPercent						is Percent size 9.6
		LocalPercent						is Percent size 9.6
		LocalItem							is like AssetItem
		LocalAccountingEntity				is an AccountingEntity
		LocalLastAccountingEntity			is like AccountingEntity
		LocalLastAccountingUnit				is like AccountingUnit
		LocalFund 							is an AssetFundField
  		LocalLastFund 						is an AssetFundField
		LocalLastProject					is like Project
  		LocalLastFinanceDimension1			is like FinanceDimension1
  		LocalLastFinanceDimension2			is like FinanceDimension2
  		LocalLastFinanceDimension3			is like FinanceDimension3
  		LocalLastFinanceDimension4			is like FinanceDimension4
  		LocalLastFinanceDimension5			is like FinanceDimension5
  		LocalLastFinanceDimension6			is like FinanceDimension6
  		LocalLastFinanceDimension7			is like FinanceDimension7
  		LocalLastFinanceDimension8			is like FinanceDimension8
  		LocalLastFinanceDimension9			is like FinanceDimension9
  		LocalLastFinanceDimension10			is like FinanceDimension10
  		LocalFinanceDimension1				is like FinanceDimension1
  		LocalFinanceDimension2				is like FinanceDimension2
  		LocalFinanceDimension3				is like FinanceDimension3
  		LocalFinanceDimension4				is like FinanceDimension4
   		LocalFinanceDimension5				is like FinanceDimension5
  		LocalFinanceDimension6				is like FinanceDimension6
  		LocalFinanceDimension7				is like FinanceDimension7
  		LocalFinanceDimension8				is like FinanceDimension8
  		LocalFinanceDimension9				is like FinanceDimension9
  		LocalFinanceDimension10				is like FinanceDimension10

		LocalDeprExpSum						is an InternationalAmount
		UpdateAssetBookEXP					is Boolean
		UpdateAssetBookACM					is Boolean
		ClearLocalVariables					is Boolean
		ToFundAllocationRequired			is Boolean
		LocalIncrementalEXP					is an InternationalAmount
		LocalIncrementalACM					is an InternationalAmount
		LocalCreditChange					is an InternationalAmount
		LocalDebitChange					is an InternationalAmount
		LocalTransferAsset					is an Asset
		LocalHistoryBeginDate				is Date
		LocalAdjustmentUpdate				is Boolean
		LocalCreateHistory					is Boolean
		UseHistoryDate						is Boolean
		AssetBookTransactionView			is an AssetBookTransaction	view
		TransferBalancingTransactionView	is an AssetBookTransaction view
		LocalParentAssetType				is AlphaUpper size 10
		LocalTransferOutAccount				is like GeneralLedgerChartAccount
		LocalTransferInAccount           	is like GeneralLedgerChartAccount
		LocalCount							is Numeric 2
		LocalBatchUpdateResult				is a AssetBatchUpdateResult
		LocalAssetBookTransactionView		is an AssetBookTransaction	view
		LocalBeginDate						is Date

	Derived Fields
		CompanyCurrency is a StringField
            type is Alpha size 5
            classic name is GL-CURR-CODE
            Company.Currency

		AssetBookTransactionCreditAmount is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (TransactionAmount < 0)
				return TransactionAmount

		AssetBookTransactionDebitAmount is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (TransactionAmount > 0)
				return TransactionAmount

		AssetBookTransactionBaseCreditAmount is a DerivedField
			type is like InternationalAmount
				precision is Book.Currency.NumberOfDecimals
			if (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount < 0)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		AssetBookTransactionBaseDebitAmount is a DerivedField
			type is like InternationalAmount
				precision is Book.Currency.NumberOfDecimals
			if (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount > 0)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
		DerivedDimensionCode		is a StringField
			type is Alpha 70
			restricted
			DistributionAccount.DimensionCode

 		GetHistoryTransCodeBlocks is a DerivedField
 			type is Boolean
 			restricted
 			if (GetDefaultAccounts)
 				invoke DefaultAccounts Asset
				TransientACMAccount 	= Asset.TranAccumulatedDepreciationAccount
				TransientEXPAccount 	= Asset.TranDepreciationExpenseAccount
				if (Book.Ledger not entered)
					TransientACMAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
					TransientEXPAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
				else
					TransientACMAccount.Ledger	= Book.Ledger
					TransientEXPAccount.Ledger	= Book.Ledger
			return true

 		DeriveCodeBlock is a DerivedField
 			type is Boolean
 			restricted
			invoke DefaultAccounts Asset
			if (AssetAccountType.Asset)
				TransientDistributionAccount = Asset.TranAssetAccount
			if (AssetAccountType.AccumulatedDepreciation)
				TransientDistributionAccount = Asset.TranAccumulatedDepreciationAccount
			if (AssetAccountType.DepreciationExpense)
				TransientDistributionAccount = Asset.TranDepreciationExpenseAccount
			if (AssetAccountType.Proceeds)
				TransientDistributionAccount = Asset.TranProceedsAccount
			if (AssetAccountType.Gain)
				TransientDistributionAccount = Asset.TranGainAccount
			if (AssetAccountType.Loss)
				TransientDistributionAccount = Asset.TranLossAccount
			if (AssetAccountType.Clearing
			or	AssetAccountType.Intercompany)
				TransientDistributionAccount = Asset.TranClearingAccount
			if (AssetAccountType.DisposalExpense)
				TransientDistributionAccount = Asset.TranDisposalExpenseAccount
			if (AssetAccountType.DeferredGain)
				TransientDistributionAccount = Asset.TranDeferredGainAccount
			if (AssetAccountType.DeferredLoss)
				TransientDistributionAccount = Asset.TranDeferredLossAccount
			if (AssetAccountType.RevalueSurplus)
				TransientDistributionAccount = Asset.TranRevalueSurplusAccount
			if (AssetAccountType.RevalueLoss)
				TransientDistributionAccount = Asset.TranRevalueLossAccount
            if (AssetAccountType.RevalueAmortization)
				TransientDistributionAccount = Asset.TranRevalueAmortization
            if (AssetAccountType.RevaluationReserve)
				TransientDistributionAccount = Asset.TranRevalueReserve
            if (AssetAccountType.ImpairmentLoss)
				TransientDistributionAccount = Asset.TranImpairmentLoss
            if (AssetAccountType.AccumulatedImpairmentLoss)
				TransientDistributionAccount = Asset.TranAccumulatedImpairmentLoss
            if (AssetAccountType.ImpairmentAmortization)
				TransientDistributionAccount = Asset.TranImpairmentAmortization
			if (Book.Ledger not entered)
				TransientDistributionAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
			else
				TransientDistributionAccount.Ledger	= Book.Ledger
			return true

		DisplayOnlyTransactionDate is a DerivedField
			type is Date
			return TransactionDate

		DisplayOnlyPostingDate is a DerivedField
			type is Date
			return PostingDate

		DisplayOnlyAssetAccountType is a DerivedField
			type is like AssetAccountType
			return AssetAccountType

		DisplayOnlyBookCurrency is a StringField
			type is Alpha size 5
			default label is "BookCurrency"
			Book.Currency

		DerivedAssetAccountType is a DerivedField
			type is Alpha 30
			if (AssetAccountType = blank)
				return "Manual Entry"
			if (AssetAccountType = "AST")
				return "Asset"
            if (AssetAccountType = "ACM")
           		return "Accumulated Depreciation"
            if (AssetAccountType = "EXP")
            	return "Depreciation Expense"
            if (AssetAccountType = "PRO")
            	return "Proceeds"
            if (AssetAccountType = "GAN")
            	return "Gain"
            if (AssetAccountType = "LOS")
            	return "Loss"
            if (AssetAccountType = "CLR")
            	return "Clearing"
            if (AssetAccountType = "COS")
            	return "Disposal Expense"
            if (AssetAccountType = "DGN")
            	return "Deferred Gain"
            if (AssetAccountType = "DLS")
            	return "Deferred Loss"
            if (AssetAccountType = "RVS")
            	return "Revalue Surplus"
            if (AssetAccountType = "RVL")
            	return "Revalue Loss"
			if (AssetAccountType = "ICO")
				return "Intercompany"
            if (AssetAccountType = "RVA")
            	return "Revalue Amortization"
            if (AssetAccountType = "RRA")
            	return "Revaluation Reserve"
            if (AssetAccountType = "IML")
	  	        return "ImpairmentCharge/Reversal"
            if (AssetAccountType = "IMT")
            	return "AccumulatedAmortization"
			if (AssetAccountType = "IMW")
	  	    	return "Impairment Write Off"
            if (AssetAccountType = "IMA")
            	return "Impairment Amortization"
            if (AssetAccountType = "EQU")
            	return "Equity"
            if (AssetAccountType = "DEB")
            	return "Lease Liability"
            if (AssetAccountType = "IMD")
            	return "Impairment Disposal"
            if (AssetAccountType = "IGL")
            	return "Impairment Disposal Gain Loss"
            if (AssetAccountType = "LIM")
            	return "Lease Impairment"
			if (AssetAccountType = "LAD")
            	return "Lease Adjustment"
            if (AssetAccountType = "DER")
            	return "Deferred Rent"
			if (AssetAccountType = "ATI")
				return "Transfer In"
			if (AssetAccountType = "ATO")
				return "Transfer Out"
			if (AssetAccountType = "STL")
				return "Short Term Liability"
			if (AssetAccountType = "LTL")
				return "Long Term Liability"

		CurrentDate is a DerivedField
			type is Date
			restricted
			return CurrentDate

		CurrentMonth is a DerivedField
			type is Numeric 3
			restricted
			return CurrentDate month

		CurrentYear is a DerivedField
			type is Numeric 4
			restricted
			return CurrentDate year


		TransactionYear is a DerivedField
			type is Numeric 4
			restricted
			return PostingDate year

		TransactionMonth is a DerivedField
			type is Numeric 2
			restricted
			return PostingDate month

		TransactionDay is a DerivedField
			type is Numeric 3
			restricted
			default label is "Day/Year"
			return PostingDate year day

		DerivedAdditions is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Addition)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedReinstatements is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Reinstatement)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedRevaluations is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Revalue)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

 		DerivedReAdds is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.ReAdd)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

    	DerivedDepreciation is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Depreciation)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

 		DerivedAdjustments is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Adjustment)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedTransfers is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Transfer)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedDisposals is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Disposal)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		AssetCurrencyDerivedAdditions is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Addition)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedReinstatements is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Reinstatement)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedRevaluations is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Revalue)
				return (TransactionAmount)
			else
				return 0

 		AssetCurrencyDerivedReAdds is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.ReAdd)
				return (TransactionAmount)
			else
				return 0

    	AssetCurrencyDerivedDepreciation is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Depreciation)
				return (TransactionAmount)
			else
				return 0

 		AssetCurrencyDerivedAdjustments is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Adjustment)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedTransfers is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Transfer)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedDisposals is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Disposal)
				return (TransactionAmount)
			else
				return 0


		DerivedCalendarEndDate is a DerivedField
			type is Date
			return first BookCalendarsRel.YearEndDate

		LastAssetImpairment is a DerivedField
			type is like AssetImpairment
			restricted
			return first AssetImpairmentBooksRel.AssetImpairment

		TransactionCurrency is a DerivedField
			type is like FromCurrency
			if (Book.PostCurrency.Book)
				return Book.Currency
			else
				return Asset.Currency

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (Book.PostCurrency.Book)
				return Book.Currency.NumberOfDecimals
			else
				return Asset.Currency.NumberOfDecimals

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		RoundedCurrencyAmount is a DerivedField
			type is like InternationalAmount
    		restricted
    		if (LocalCurrencyAmount entered)
	    		RoundedCurrencyAmount	      = LocalCurrencyAmount
	    		round RoundedCurrencyAmount to nearest DerivedRoundTo
	    		return RoundedCurrencyAmount

	    DerivedTransactionAmount is a DerivedField
	    	type is like InternationalAmount
	    		precision is OutputNumberOfDecimals
	    	return TransactionAmount

		DerivedFundAccountType is a DerivedField
			type is Boolean
			restricted
			return FundAccountType

		DerivedCompany is a DerivedField
			type is like Company
			default label is "Company"
			return Asset.Company

		DerivedAsset is a DerivedField
			type is like Asset
			default label is "Asset"
			return Asset

		DerivedAssetEndBalance is a DerivedField
			type is like InternationalAmount
			restricted
			if((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Depreciation
			or AssetProcess.Transfer
			or AssetProcess.Disposal
			or AssetProcess.Revalue)
			and AssetAccountType.Asset)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		DerivedDepreciationEndBalance is a DerivedField
			type is like InternationalAmount
			restricted
			if((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Depreciation
			or AssetProcess.Transfer
			or AssetProcess.Disposal
			or AssetProcess.Revalue)
			and AssetAccountType.AccumulatedDepreciation)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		DerivedAssetBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedAssetEndBalance + DerivedDepreciationEndBalance)

		DerivedNumberOfYearsPrior      is a DerivedField
			type is Numeric size 3
			restricted
			return (CurrentBookCalendarRel.YearBeginDate year - PostingDate year)

		DerivedPeriodNumber			is a DerivedField
       	 	type is Numeric size 2
			restricted
       	 	LocalCount = 1
			if (BookCalendarsRel exists)
				while(BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= PostingDate)
					if(PostingDate <= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
						return (LocalCount)
					else
						LocalCount += 1
				return LocalCount
			else
				LocalPostingDate = PostingDate + DerivedNumberOfYearsPrior as years
				if(LocalPostingDate >= CurrentBookCalendarRel.YearBeginDate
				and LocalPostingDate <= CurrentBookCalendarRel.YearEndDate)
					while(CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= LocalPostingDate)
						if(LocalPostingDate <= CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
							return (LocalCount)
						else
							LocalCount += 1
						if(LocalCount > 55)
							return
					return LocalCount
				if(LocalPostingDate >= CurrentBookCalendarRel.YearEndDate)
					return 1
				if(LocalPostingDate <= CurrentBookCalendarRel.YearBeginDate)
					while(CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= CurrentBookCalendarRel.YearEndDate)
						if(CurrentBookCalendarRel.YearEndDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
							return (LocalCount)
						else
							LocalCount += 1
						if(LocalCount > 55)
							return

		DerivedBookAmount is a DerivedField
			type is like InternationalAmount
				precision is Book.Currency.NumberOfDecimals
			return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

	Dimensions
		DistributionAccount.GeneralLedgerChartAccount
			dimension name is ChartAccount
			caption is representative text
			Attributes
				AccountDescription
		Company
			dimension name is AssetCompany
		Book

			dimension name is AssetBook
		AssetAccountType
			dimension name is AccountType
		Asset
			dimension name is Asset
    	TransactionMonth
	    	is a monthly period dimension with year of TransactionYear
	    		current year is CurrentYear
	    		current period is CurrentMonth

		TransactionStatus
			dimension name is Status
			Instance Selection
				where (TransactionStatus.History)

	Measures
		DerivedAdditions
	    	measure name is Additions
    	DerivedDepreciation
	    	measure name is Depreciation
 		DerivedAdjustments
	    	measure name is Adjustments
		DerivedTransfers
	    	measure name is Transfers
		DerivedDisposals
	    	measure name is Disposals

    Sets

        Set2
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Company
                DistributionAccount.AccountingUnit
                DistributionAccount.GeneralLedgerChartAccount
                PostingDate
                Book
                Asset
                AssetBookTransaction

        Set3
            indexed
            Sort Order
            	FinanceEnterpriseGroup
                Company
                TransactionStatus
                AssetProcess
                Book
                Asset
                AssetBookTransaction

        Set5
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Asset
                AssetBookTransaction descending
                Company
                Book
                TransactionStatus

        Set6
            indexed
            Sort Order
            	FinanceEnterpriseGroup
                TransactionStatus
                AssetProcess
                Asset
                Book
                AssetBookTransaction
                Company

        ByCompanyBookAccountAndProcess
        	duplicates
        	Sort Order
                Company
                Book
                DistributionAccount.ToAccountingEntity
                DistributionAccount.AccountingUnit
                DistributionAccount.GeneralLedgerChartAccount
                DistributionAccount.Project
				DistributionAccount.FinanceDimension1
				DistributionAccount.FinanceDimension2
				DistributionAccount.FinanceDimension3
				DistributionAccount.FinanceDimension4
				DistributionAccount.FinanceDimension5
				DistributionAccount.FinanceDimension6
				DistributionAccount.FinanceDimension7
				DistributionAccount.FinanceDimension8
				DistributionAccount.FinanceDimension9
				DistributionAccount.FinanceDimension10
				TransactionStatus
				YearEndDate
				AssetProcess

		ByCompanyBookAssetAccountType
			indexed
			Sort Order
				FinanceEnterpriseGroup
				Company
				Book
				Asset
				AssetAccountType
				PostingDate
				AssetBookTransaction

		AssetBookTransactionByAccountSet
			indexed
			Sort Order
				FinanceEnterpriseGroup
				Company
				Book
                DistributionAccount.GeneralLedgerChartAccount
				Asset
				AssetAccountType
				AssetBookTransaction


		ByAssetBookCompany
			Sort Order
				FinanceEnterpriseGroup
                Asset
				Book
                Company
                TransactionStatus
                AssetProcess
                AssetBookTransaction

       	ByBookCompany
			Sort Order
				FinanceEnterpriseGroup
				Book
                Company
                TransactionStatus
                AssetProcess
                Asset
                AssetBookTransaction descending

     	ByDisposalSequenceDescending
			Sort Order
				FinanceEnterpriseGroup
                Asset
                Book
                Company
                AssetBookTransaction descending
			Instance Selection
				where (DisposalHistory)

		ByAssetManagementInterfaceResult
			Sort Order
				FinanceEnterpriseGroup
				AssetManagementInterfaceResult
	            Asset
	            Book
	            Company
				AssetBookTransaction


	Relations
		CurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company	= Company
				related.Book	= Book

		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= Company
				related.Book					= Book
				related.CalendarStatus			= "F"

		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book

		BookRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book

		CurrentAssetTypeAllocationsRel
			one-to-many relation to AssetTypeAllocation
			Field Mapping uses Set2
				related.Company		= Company
				related.AssetType	= Asset.AssetType
			Instance Selection
				where (related.Status.Released
				and    related.AssetTypeAllocation.StartDate <= current corporate date
				and   (related.EndDate not entered
				or     related.EndDate >= current corporate date))

		AssetTypeAllocationDetailsRel
			one-to-many relation to AssetTypeAllocationDetail
			Field Mapping uses symbolic key
				related.Company								= Company
				related.AssetType							= Asset.AssetType
				related.AssetTypeAllocation.StartDate		= first CurrentAssetTypeAllocationsRel.AssetTypeAllocation.StartDate
				related.AssetTypeAllocation.SequenceNumber	= first CurrentAssetTypeAllocationsRel.AssetTypeAllocation.SequenceNumber

		AssetTransactionSummaryNavigationRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger

		AssetTransactionSummariesRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set0
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
               	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
			Instance Selection
				where (related.YearEndDate <= CurrentBookCalendarRel.YearEndDate)

		AssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
                related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
              	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.YearEndDate											= LocalYearEndDate

		LocalAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses ByTransactionDimensions
				related.Company												= LocalCompany
				related.Book												= LocalBook
				related.AssetTransactionSummary.Ledger						= LocalLedger
				related.AssetTransactionSummary.AccountingEntity			= LocalToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= LocalAccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalChartAccount
               	related.AssetTransactionSummary.Project						= LocalProject
				related.AssetTransactionSummary.DimensionCode				= LocalDimensionCode
				related.YearEndDate 										= LocalBookCalendarEndDate

		AssetPostingDateSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
				related.YearEndDate 										= YearEndDate

		ACMAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalAssetBookTransactionView.YearEndDate

		EXPAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalAssetBookTransactionView.YearEndDate

		LocalTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
			   	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalYearEndDate

		BookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
          	Instance Selection
          		where (related.YearBeginDate <= PostingDate
          		and related.YearEndDate	>= PostingDate)

		BookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Company					= Company
				related.YearEndDate 			= YearEndDate

		LocalBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Company					= Company
				related.YearEndDate 			= LocalYearEndDate

		PostingDateBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
          	Instance Selection
          		where (related.YearBeginDate <= PostingDate)

        HistoryYearBookCalendarsRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set3
				related.CalendarStatus					= "H"
				related.Book 							= Book
				related.Company 			 			= Company
				related.YearEndDate						= LocalYearEndDate


		LocalPostingDateBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
          	Instance Selection
          		where (related.YearBeginDate <= LocalPostingDate)

		LocalCompanyBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= LocalBook
				related.Company					= LocalCompany
          	Instance Selection
          		where (related.YearBeginDate <= LocalPostingDate)

		AssetBookHistoryRel
			one-to-one relation to AssetBookHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
				related.Book							= Book
				related.Company							= Company
				related.YearEndDate						= LocalYearEndDate

		AssetBookPeriodHistoryRel
			one-to-one relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Asset							= Asset
				related.Book							= Book
				related.YearEndDate						= LocalYearEndDate
				related.AssetBookPeriodHistory.Period	= LocalCalendarPeriod

		AssetBookPeriodHistoriesRel
			one-to-many relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Asset							= Asset
				related.Book							= Book
				related.YearEndDate						= LocalYearEndDate

		UnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.TransactionStatus		= "U"

		DisplayUpdatePostingDateActionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.PostingDate = blank)

		GeneralLedgerTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"


		AllAssetTransactionSummariesRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
                related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
              	related.AssetTransactionSummary.Project						= DistributionAccount.Project


		LocalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	= LocalAsset
				related.Book	= LocalAssetBook

		AssetAdjustmentRel
			one-to-one relation to AssetAdjustment
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetAdjustment 		= Asset.LastAssetSequence

		AssetTransferRel
			one-to-one relation to AssetTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= Asset.LastAssetSequence

		FromAssetTransferRel	
			one-to-many relation to AssetTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.Asset = Asset
			Instance Selection
				where (related.Company = Company
					and related.IsReleased = false)

		CompanyAssetTransferRel		
			one-to-many relation to AssetTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where ((related.Company = Company
						or related.AssetTransferTo.ToAssetCompany = Company)
					and related.AssetTransfer = AssetTransfer
					and related.IsReleased = false)

		AssetDisposalRel
			one-to-one relation to AssetDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetDisposal 			= Asset.LastAssetSequence

		AssetBookDisposalRel
			one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
				related.Book					= Book
			Instance Selection
				where (related.AssetDisposalRel.DisposalStatus.Unreleased)

		AssetReinstatementRel
			one-to-many relation to AssetReinstatement
			Field Mapping uses Set7
				related.Asset					= Asset

		AssetRevaluationRel
			one-to-many relation to AssetRevaluation
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
                related.AssetRevaluation		= Asset.LastAssetSequence

        UnreleasedAssetBookRevaluationRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.RevalueStatus	= "U")

		AssetImpairmentRel
			one-to-many relation to AssetImpairment
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
                related.AssetImpairment			= Asset.LastAssetSequence

		LastAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

		PriorAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
	      		where (related.AssetImpairment not = AssetImpairment)

		OtherAssetImpairmentsRel
       		one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetImpairment	!= AssetImpairment)

		AssetImpairmentBooksRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
                related.Book						= Book


		ImpairmentBooksRel 
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetImpairmentBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.ImpairmentBook				= Book

 		ToAssetDisposalRel
			one-to-many relation to AssetDisposal
            Field Mapping uses ByDisposalAsset
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.DisposalAsset			= Asset
	      	Instance Selection
	      		where (related.IsReleased = false)

        ToAssetTransferRel
        	one-to-many relation to AssetTransfer
        	Field Mapping uses ToAssetTransfer
				related.AssetTransferTo.ToAssetCompany	= Company
	            related.AssetTransferTo.ToAsset			= Asset
	      	Instance Selection
	      		where (related.IsReleased = false)

		BookPYIMADepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "IMA"
			Instance Selection
				where (related.PostingDate = LocalYearEndDate)

		BookPYIMTDepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "IMT"
			Instance Selection
				where (related.PostingDate = LocalYearEndDate)

		IMTImpairmentBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Company
               	related.Book					= Book
               	related.Asset					= Asset
				related.AssetAccountType		= "IMT"
			Instance Selection
				where (related.AssetImpairment	= AssetImpairment)

		IMAImpairmentBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Company
               	related.Book					= Book
               	related.Asset					= Asset
				related.AssetAccountType		= "IMA"
			Instance Selection
				where (related.AssetImpairment	= AssetImpairment)

		AssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset
				related.RecordType		 			= 0

		NewAssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetRecordFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset
				related.RecordType		 			= 0

		TransferAssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.IsTransferred)

		AssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		FromAssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= LocalTransferAsset

		NextAssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetRecordFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset
				related.RecordType					= 0
			Instance Selection
				where (related.AssetFund > LocalLastProcessedFund)

		AdjustmentItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset				= Asset
				related.RecordType			= 0
				related.AccountingEntity	= LocalAccountingEntity
				related.AccountingUnit		= LocalAccountingUnit
				related.Project				= LocalProject
				related.FinanceDimension1	= LocalFinanceDimension1
				related.FinanceDimension2	= LocalFinanceDimension2
				related.FinanceDimension3	= LocalFinanceDimension3
				related.FinanceDimension4	= LocalFinanceDimension4
				related.FinanceDimension5	= LocalFinanceDimension5
				related.FinanceDimension6	= LocalFinanceDimension6
				related.FinanceDimension7	= LocalFinanceDimension7
				related.FinanceDimension8	= LocalFinanceDimension8
				related.FinanceDimension9	= LocalFinanceDimension9
				related.FinanceDimension10	= LocalFinanceDimension10
			Instance Selection
				where (related.NewAssetItemFund)

		AssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10

		AssetFundsByFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0
				related.AccountingEntity		= DistributionAccount.ToAccountingEntity
				related.AccountingUnit			= DistributionAccount.AccountingUnit
				related.Project					= DistributionAccount.Project
				related.FinanceDimension1		= DistributionAccount.FinanceDimension1
				related.FinanceDimension2		= DistributionAccount.FinanceDimension2
				related.FinanceDimension3		= DistributionAccount.FinanceDimension3
				related.FinanceDimension4		= DistributionAccount.FinanceDimension4
				related.FinanceDimension5		= DistributionAccount.FinanceDimension5
				related.FinanceDimension6		= DistributionAccount.FinanceDimension6
				related.FinanceDimension7		= DistributionAccount.FinanceDimension7
				related.FinanceDimension8		= DistributionAccount.FinanceDimension8
				related.FinanceDimension9		= DistributionAccount.FinanceDimension9
				related.FinanceDimension10		= DistributionAccount.FinanceDimension10


		UnreleasedAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses Set7
				related.Asset					= Asset

		LocalItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10
			Instance Selection
				where (related.NewAssetItemFund)

		NewAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.NewAssetItemFund)

		AssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
				related.Asset					= Asset
				related.AssetItem				= LocalItem
				related.RecordType				= 0

		AssetFundControlRel
			one-to-one relation to AssetFundControl
			Field Mapping uses symbolic key
				related.AssetFundControl		= FinanceEnterpriseGroup

		EXPAssetTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Company
               	related.Book					= Book
               	related.Asset					= Asset
				related.AssetAccountType		= "EXP"

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset

		UnreleaseAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetAdjustment			= Asset.LastAssetSequence

		UnreleasedAssetBookAdjustmentRel
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetAdjustment			= UnreleaseAssetAdjustmentRel.AssetAdjustment
				related.Book					= Book

		LocalCompanyParentAssetTypeRel
			one-to-one relation to AssetType
			Field Mapping uses symbolic key
				related.Company						= LocalCompany
				related.AssetType.Type 				= LocalParentAssetType
				related.AssetType.SubType        	= blank

		ParentAssetTypeRel
			one-to-one relation to AssetType
			Field Mapping uses symbolic key
				related.Company						= Company
				related.AssetType.Type 				= LocalParentAssetType
				related.AssetType.SubType        	= blank

		AssetBeginBalanceRel						
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Revalue)
				and related.PostingDate < DateRangeFilter.Begin
				and related.AssetAccountType.Asset)

		AssetAdditionBalanceRel						
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment)
				and related.AssetAccountType.Asset
				and related.PostingDate >= DateRangeFilter.Begin)

		AssetDisposalBalanceRel						
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Disposal
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		AssetTransferBalanceRel						
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Transfer
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		AssetRevalueBalanceRel						
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Revalue
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		AssetEndBalanceRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and related.AssetAccountType.Asset)

		AssetDepreciationEndBalanceRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and related.AssetAccountType.AccumulatedDepreciation)
		
		AssetBalanceRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction		= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and (related.AssetAccountType.Asset
				or related.AssetAccountType.AccumulatedDepreciation))

		DepreciationBeginBalanceRel				
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Revalue)
				and related.PostingDate < DateRangeFilter.Begin
				and related.AssetAccountType.AccumulatedDepreciation)

		DepreciationAdditionBalanceRel				
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation
				or (related.AssetProcess.Disposal
				and related.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount < 0))
				and related.PostingDate >= DateRangeFilter.Begin
				and related.AssetAccountType.AccumulatedDepreciation)

		DepreciationDisposalBalanceRel				
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Disposal
				and related.AssetAccountType.AccumulatedDepreciation
				and related.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount > 0
				and related.PostingDate within DateRangeFilter)

		DepreciationTransferBalanceRel				
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Transfer
				and related.AssetAccountType.AccumulatedDepreciation
				and related.PostingDate within DateRangeFilter)

		DepreciationRevalueBalanceRel				
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetBookTransaction	= AssetBookTransaction
			Instance Selection
				where(related.AssetProcess.Revalue
				and related.AssetAccountType.AccumulatedDepreciation
				and related.PostingDate within DateRangeFilter)

		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= Company
				related.Book					= Book
				related.CalendarStatus			= "C"

		SummaryRecordsRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set0
				related.Company												= LocalCompany
				related.Book												= LocalBook
			Instance Selection
				where (related.YearEndDate >= LocalBeginDate
				and    related.YearEndDate < LocalYearEndDate)

	Conditions
		FundAccountType
			restricted
			when ((AssetAccountType	= blank
			and AssetFundControlRel.FundAccountTypes.ManualEntry)
			or (AssetAccountType 	= "AST"
			and AssetFundControlRel.FundAccountTypes.Asset)
			or (AssetAccountType 	= "CLR"
			and AssetFundControlRel.FundAccountTypes.Clearing)
			or (AssetAccountType 	= "EXP"
			and AssetFundControlRel.FundAccountTypes.DepreciationExpense)
			or (AssetAccountType 	= "ACM"
			and AssetFundControlRel.FundAccountTypes.AccumulatedDepreciation)
			or ((AssetAccountType 	= "PRO"
			or  AssetAccountType 	= "COS")
			and AssetFundControlRel.FundAccountTypes.DisposalProceedsLoss)
			or ((AssetAccountType 	= "GAN"
			or  AssetAccountType 	= "LOS")
			and AssetFundControlRel.FundAccountTypes.GainLoss)
			or ((AssetAccountType 	= "DGN"
			or  AssetAccountType 	= "DGL")
			and AssetFundControlRel.FundAccountTypes.DeferredGainLoss)
			or ((AssetAccountType 	= "RVS"
			or  AssetAccountType 	= "RVL"
			or  AssetAccountType 	= "RVA"
			or  AssetAccountType 	= "RRA")
			and AssetFundControlRel.FundAccountTypes.Revaluation)
			or ((AssetAccountType 	= "IML"
			or  AssetAccountType 	= "IMT"
			or  AssetAccountType 	= "IMA"
			or  AssetAccountType 	= "IMW"
			or 	AssetAccountType 	= "AAD"
			or 	AssetAccountType 	= "ATD"
			or 	AssetAccountType 	= "ATC"
			or 	AssetAccountType 	= "ADD"
			or 	AssetAccountType 	= "ADC"
			or 	AssetAccountType 	= "IMD"
			or 	AssetAccountType 	= "IGL")
			and AssetFundControlRel.FundAccountTypes.Impairment)
			or (AssetAccountType 	= "EQU"
			and AssetFundControlRel.FundAccountTypes.LeaseEquity)
			or (AssetAccountType 	= "DEB"
			and AssetFundControlRel.FundAccountTypes.LeaseDebt)
			or (AssetAccountType 	= "LIM"
			and AssetFundControlRel.FundAccountTypes.LeaseImpairment)
			or (AssetAccountType 	= "LAD"
			and AssetFundControlRel.FundAccountTypes.LeaseAdjustment)
			or (AssetAccountType 	= "ICO"
			and AssetFundControlRel.FundAccountTypes.Intercompany)
			or (AssetAccountType 	= "STL"
			and AssetFundControlRel.FundAccountTypes.ShortTermLiability)
			or (AssetAccountType 	= "LTL"
			and AssetFundControlRel.FundAccountTypes.LongTermLiability))

		AssetFundAllocationRequired
			when (Asset.FundAllocationRequired)
		IsIncludedWithinRange
			restricted
			when (TransactionDate within DateRangeFilter)

		LocalFundAccountType

			when ((LocalAccountType	= blank
			and AssetFundControlRel.FundAccountTypes.ManualEntry)
			or (LocalAccountType 	= "AST"
			and AssetFundControlRel.FundAccountTypes.Asset)
			or (LocalAccountType 	= "CLR"
			and AssetFundControlRel.FundAccountTypes.Clearing)
			or (LocalAccountType 	= "EXP"
			and AssetFundControlRel.FundAccountTypes.DepreciationExpense)
			or (LocalAccountType 	= "ACM"
			and AssetFundControlRel.FundAccountTypes.AccumulatedDepreciation)
			or ((LocalAccountType 	= "PRO"
			or  LocalAccountType 	= "COS")
			and AssetFundControlRel.FundAccountTypes.DisposalProceedsLoss)
			or ((LocalAccountType 	= "GAN"
			or  LocalAccountType 	= "LOS")
			and AssetFundControlRel.FundAccountTypes.GainLoss)
			or ((LocalAccountType 	= "DGN"
			or  LocalAccountType 	= "DGL")
			and AssetFundControlRel.FundAccountTypes.DeferredGainLoss)
			or ((LocalAccountType 	= "RVS"
			or  LocalAccountType 	= "RVL"
			or  LocalAccountType 	= "RVA"
			or  LocalAccountType 	= "RRA")
			and AssetFundControlRel.FundAccountTypes.Revaluation)
			or ((LocalAccountType 	= "IML"
			or  LocalAccountType 	= "IMT"
			or  LocalAccountType 	= "IMA"
			or  LocalAccountType 	= "IMW"
			or 	LocalAccountType 	= "AAD"
			or 	LocalAccountType 	= "ATD"
			or 	LocalAccountType 	= "ATC"
			or 	LocalAccountType 	= "ADD"
			or 	LocalAccountType 	= "ADC"
			or 	LocalAccountType 	= "IMD"
			or 	LocalAccountType 	= "IGL")
			and AssetFundControlRel.FundAccountTypes.Impairment)
			or (LocalAccountType 	= "EQU"
			and AssetFundControlRel.FundAccountTypes.LeaseEquity)
			or (LocalAccountType 	= "DEB"
			and AssetFundControlRel.FundAccountTypes.LeaseDebt)
			or (AssetAccountType 	= "LIM"
			and AssetFundControlRel.FundAccountTypes.LeaseImpairment)
			or (AssetAccountType 	= "LAD"
			and AssetFundControlRel.FundAccountTypes.LeaseAdjustment)
			or (LocalAccountType 	= "ICO"
			and AssetFundControlRel.FundAccountTypes.Intercompany)
			or (LocalAccountType 	= "STL"
			and AssetFundControlRel.FundAccountTypes.ShortTermLiability)
			or (LocalAccountType 	= "LTL"
			and AssetFundControlRel.FundAccountTypes.LongTermLiability))


		CanBeDeleted
			restricted
			when (AssetBookTransaction.TransactionStatus.Unreleased)

		CreateAllowed
			restricted
			when ((Asset.Status.Unreleased
			or Asset.Status.PostRelease)
			and !ImpairmentInProgress)

		ImpairmentInProgress
			when (first LastAssetImpairmentRel.Status.PostRelease
			and first LastAssetImpairmentRel.UnReleasedTransactionsExist)

		DisposalHistory
			restricted
			when (TransactionStatus.History
   			and AssetProcess.Disposal)

		AssetBookHistoryExists
			when (AssetBookHistoryRel exists)

		IsIncludedInSearch
			restricted
			when ((TransactionStatus.History)
			and (DateRangeFilter not entered
			or PostingDate within DateRangeFilter))

		CalendarExists
			restricted
			when (first BookCalendarsRel exists)

		DeleteAllowed
			restricted
			when (AssetAccountType = blank
			and TransactionStatus.Unreleased)

		IsManualEntry
			restricted
			when (AssetAccountType = blank)

		UpdateAllowed
			restricted
			when (TransactionStatus.Unreleased
			and !ImpairmentInProgress)

		ApprovalUpdateAllowed
			restricted
			when (UpdateAllowed
			and !Asset.ApprovalStatus.Submitted)

		ManualEntryAllow
			when (!Asset.ApprovalStatus.Submitted)

		ApprovalImpairmentInProgress
			when (!ImpairmentInProgress
			and !Asset.ApprovalStatus.Submitted)


		UpdatePostDateAllowed
			restricted
			when (!Asset.Status.Disposed)

		IsImpairmentTransaction
			restricted
			when (AssetAccountType.ImpairmentLoss
			or AssetAccountType.AccumulatedImpairmentLoss
			or AssetAccountType.ImpairmentAmortization)

		IsRevalueReserve
			restricted
			when (AssetAccountType.RevaluationReserve)

        IsImpairmentLossTransaction
			restricted
			when (AssetAccountType.ImpairmentLoss)

		IsImpairmentAmortizationTransaction
			restricted
			when (AssetAccountType.ImpairmentAmortization)

		IsCurrentYearTransaction
			restricted
			when (PostingDate >= CurrentBookCalendarRel.YearBeginDate
			and PostingDate <= CurrentBookCalendarRel.YearEndDate)

		DisplayUpdatePostingDateAction
			restricted
			when (DisplayUpdatePostingDateActionRel exists)

		OtherImpairmentsExist
			restricted
			when (OtherAssetImpairmentsRel exist)

		IsFirstAssetImpairment
			restricted
			when (AssetProcess.Impairment
			and	 !OtherImpairmentsExist)

		IsFirstAssetImpairmentAdjustment
			restricted
			when (Book.Impairment
			and  AssetProcess.Adjustment
			and  !OtherImpairmentsExist)

		IsZeroImpairment
			restricted
			when (ImpairmentBooksRel exist
			and (first ImpairmentBooksRel.ImpairmentAmount = 0))

		PriorZeroImpairment
			restricted
			when (first PriorAssetImpairmentRel.HasZeroImpairmentBooks)

		IsFutureInServiceDate
			restricted
			when (AssetBookRel.InServiceDate > CurrentBookCalendarRel.LastPeriodDate
			and   AssetProcess.Adjustment
			and   UnreleasedAssetBookAdjustmentRel.IsInServiceDateAdjusted)

		AssetDisposed
			restricted
			when (Asset.AssetProcess.Disposal
			and Asset.Status.PostRelease)

		DisplayDisposalTransactions
			restricted
			when (TransactionStatus.Unreleased
			and (!AssetDisposed
			or (AssetDisposed
			and (AssetBookDisposalRel.Dispose = true
			or !AssetBookDisposalRel.IsBookDisposal))))

		IsHistoryOrReleased
			restricted
			when (TransactionStatus.History
			or TransactionStatus.Released)

		IsIncludedInDateRange
			restricted
			when (PostingDate <= DateRangeFilter.End
			and DateRangeFilter.End >= DateRangeFilter.Begin
			and IsHistoryOrReleased
			and (((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Disposal
			or AssetProcess.Transfer
			or AssetProcess.Revalue)
			and AssetAccountType.Asset)
			or ((AssetProcess.Depreciation
			or AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Disposal
			or AssetProcess.Transfer
			or AssetProcess.Revalue)
			and AssetAccountType.AccumulatedDepreciation)))


		IsBookDisposalTransaction
			restricted
			when (AssetBookRel.Disposed)

		RevalueTransactionExist
			restricted
			when (AssetProcess.Revalue
			or	(AssetProcess.Revalue
			and TransactionStatus.Unreleased))

	Rule Blocks
		UpdateCreditAndDebitBalances
			initialize LocalCreditChange
			initialize LocalDebitChange
			if (TransactionAmount changed)
				if (old TransactionAmount 		> 0)
					if (TransactionAmount 		> 0)
						LocalDebitChange 	= (TransactionAmount - old TransactionAmount)
					else
						LocalDebitChange 		= (old TransactionAmount * -1)
						LocalCreditChange 		= TransactionAmount

					if (AssetControlTransactionRel not exists)
						invoke BalanceUpdate AssetBookRel
							invoked.DebitBalance  += LocalDebitChange
							invoked.CreditBalance += LocalCreditChange

				if (old TransactionAmount 		< 0)
					if (TransactionAmount 		< 0)
						LocalCreditChange 	= (old TransactionAmount - TransactionAmount)
					else
						LocalCreditChange 		= old TransactionAmount
						LocalDebitChange 		= TransactionAmount
					if (AssetControlTransactionRel not exists)
						invoke BalanceUpdate AssetBookRel
							invoked.DebitBalance  += LocalDebitChange
							invoked.CreditBalance -= LocalCreditChange

			else
				if (action type.Create)
					if (TransactionAmount 		> 0)
						LocalDebitChange 		= TransactionAmount
					else
						LocalCreditChange 		= TransactionAmount

					if (AssetControlTransactionRel not exists)
						invoke BalanceUpdate AssetBookRel
							if (TransactionAmount > 0)
								invoked.DebitBalance  += LocalDebitChange
							else
								invoked.CreditBalance += LocalCreditChange

		CheckACM								
			initialize LocalSkipCheckACM
			initialize LocalFullyDepreciated
			if (AssetAccountType.Asset)
				if ((AssetBookRel.LifeToDateDepreciation not entered
				or  AssetBookRel.YearToDateDepreciation entered)
				and !LocalCreateHistory)
					LocalSkipCheckACM = true
				else
					if (AssetProcess.Addition)
						if (AssetBookRel.LifeToDateDepreciation entered
						and AssetBookRel.LifeToDateDepreciation = AssetBookRel.Basis)
							LocalFullyDepreciated = true


			if (Asset.FundAllocationRequired)
				LocalLastAssetFund = last NewAssetFundsRel.AssetFund
				if (LocalLastAssetFund = AssetBookRel.LastDepreciationFund)
					LocalSkipCheckACM = true

			if (!LocalSkipCheckACM)
				if (AssetProcess.Addition
				or	IsFirstAssetImpairment
				or	IsFirstAssetImpairmentAdjustment
				or  IsZeroImpairment
				or	PriorZeroImpairment
				or LocalAdjustmentUpdate)
					LocalYearEndDate = CurrentBookCalendarRel.YearBeginDate - 1 day
					if (AssetBookRel.InServiceDate <= LocalYearEndDate
					or  IsFutureInServiceDate)
						if (AssetBookRel.LifeToDateDepreciation != AssetBookRel.YearToDateDepreciation
						or IsZeroImpairment
						or IsFutureInServiceDate)
							if	(Book.Impairment
							and (AssetProcess.Impairment
							or	AssetProcess.Adjustment))
								if (AssetAccountType.ImpairmentLoss)
									if (IsZeroImpairment)
										if (AssetImpairment.Status.Released
										and OtherImpairmentsExist)
											LocalDepreciationDifference	= sum BookPYIMTDepreciationTransactionsRel.TransactionAmount
											LocalDepreciationDifference	= LocalDepreciationDifference * -1
										else
											LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
									else
									if (PriorZeroImpairment)
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation + (sum IMTImpairmentBookTransactionsRel.TransactionAmount)
										LocalDepreciationDifference = LocalDepreciationDifference * -1
									else
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation + (sum BookPYIMTDepreciationTransactionsRel.TransactionAmount)
										LocalDepreciationDifference = LocalDepreciationDifference * -1


								else
								if (AssetAccountType.ImpairmentWriteOff)
									if (IsZeroImpairment)
										if (AssetImpairment.Status.Released
										and OtherImpairmentsExist)
											LocalDepreciationDifference	= sum BookPYIMADepreciationTransactionsRel.TransactionAmount
											LocalDepreciationDifference	= LocalDepreciationDifference * -1
										else
											LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
											LocalDepreciationDifference = LocalDepreciationDifference * -1
									else
									if (PriorZeroImpairment)
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - (sum IMAImpairmentBookTransactionsRel.TransactionAmount)
									else
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (sum BookPYIMADepreciationTransactionsRel.TransactionAmount)
							else
								if (LocalAdjustmentUpdate)
									LocalDepreciationDifference		= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (UnreleasedAssetBookAdjustmentRel.LifeToDateDepreciation - UnreleasedAssetBookAdjustmentRel.YearToDateDepreciation)
								else
									LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
							if (AssetAccountType.Asset
							or  AssetAccountType.AccumulatedDepreciation
							or  TransactionAmount < 1)
								if (!Book.Impairment)
									LocalDepreciationDifference = LocalDepreciationDifference * -1
							invoke DefaultAccounts Asset
						 	GetDefaultAccounts = true
							LocalCurrencyAmount 		= LocalDepreciationDifference
							LocalDepreciationDifference	= RoundedCurrencyAmount
							if (GetHistoryTransCodeBlocks = true
							and LocalDepreciationDifference entered)
								invoke Create AssetBookTransaction
									assign result to LocalAssetBookTransactionView
									fill in fields from this instance
										except invoked.YearEndDate
									initialize invoked.AssetBookTransaction
									initialize invoked.AssetTransactionAmount
									invoked.TransactionStatus				= "H"
									invoked.ProcessDate						= LocalYearEndDate
									if (!IsZeroImpairment)
										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.PriorYearEndDate)
											invoked.PostingDate						= LocalYearEndDate


										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.DefaultPostingDate
										and UnreleasedAssetBookTransactionsRel exists)
												invoked.PostingDate					= PostingDate
										else
											if ((AssetProcess.Adjustment
											or  LocalAdjustmentUpdate)
											and AssetBookRel.HistoryPostingDate.DefaultPostingDate)
												invoked.PostingDate					= AssetAdjustmentRel.PostingDate

									invoked.ProcessDate						= LocalYearEndDate
									if (Book.Impairment)
										if (AssetAccountType.ImpairmentLoss)
											invoked.AssetAccountType				= "IMT"
											LocalAccountType						= "IMT"
											invoked.DistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											LocalDistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
										else
										if (AssetAccountType.ImpairmentWriteOff)
											invoked.AssetAccountType				= "IMA"
											LocalAccountType						= "IMA"
											invoked.DistributionAccount				= AssetBookRel.TranImpairmentAmortization
											LocalDistributionAccount				= AssetBookRel.TranImpairmentAmortization
										invoked.ProcessSequence						= Asset.LastAssetImpairment
										if	(AssetProcess.Adjustment)
											invoked.AssetProcess					= "ADJ"
										else
											invoked.AssetProcess					= "IMA"
									else
										if (LocalAdjustmentUpdate)
											invoked.AssetProcess				= "ADJ"
											invoked.Reference                       = "Adjustment"
										invoked.AssetAccountType					= "ACM"
										LocalAccountType							= "ACM"
										invoked.DistributionAccount					= TransientACMAccount
										LocalDistributionAccount					= TransientACMAccount
									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate						= TransactionDate
										LocalCurrencyExchange.TransactionAmount		= LocalDepreciationDifference

										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference

									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency				= Book.Currency
									else
										invoked.TransientBookCurrency				= Asset.Currency
									invoked.BatchUpdateResult						= LocalBatchUpdateResult
									if (AssetFundAllocationRequired
									and LocalFundAccountType
									and AssetFundsRel exists)
										LocalLastAssetFund					= last NewAssetFundsRel.AssetFund
										LocalAssetFund						= first NewAssetFundsRel.AssetFund
										if (AssetBookRel.LastDepreciationFund entered)
											LocalLastProcessedFund				= AssetBookRel.LastDepreciationFund
											LocalAssetFund						= first NextAssetFundRel.AssetFund
											LocalFundPercent					= first NextAssetFundRel.PercentContribution
											LocalAccountingEntity				= first NextAssetFundRel.AccountingEntity
											LocalAccountingUnit					= first NextAssetFundRel.AccountingUnit
											LocalFund							= first NextAssetFundRel.Fund
											LocalProject						= first NextAssetFundRel.Project
									  		LocalFinanceDimension1				= first NextAssetFundRel.FinanceDimension1
									  		LocalFinanceDimension2				= first NextAssetFundRel.FinanceDimension2
									  		LocalFinanceDimension3				= first NextAssetFundRel.FinanceDimension3
									  		LocalFinanceDimension4				= first NextAssetFundRel.FinanceDimension4
									  		LocalFinanceDimension5				= first NextAssetFundRel.FinanceDimension5
									   		LocalFinanceDimension6				= first NextAssetFundRel.FinanceDimension6
									   		LocalFinanceDimension7				= first NextAssetFundRel.FinanceDimension7
									  		LocalFinanceDimension8				= first NextAssetFundRel.FinanceDimension8
									  		LocalFinanceDimension9				= first NextAssetFundRel.FinanceDimension9
									  		LocalFinanceDimension10				= first NextAssetFundRel.FinanceDimension10
										else
											LocalAssetFund						= first NewAssetFundsRel.AssetFund
											LocalFundPercent					= first NewAssetFundsRel.PercentContribution
											LocalAccountingEntity				= first NewAssetFundsRel.AccountingEntity
											LocalAccountingUnit					= first NewAssetFundsRel.AccountingUnit
											LocalFund							= first NewAssetFundsRel.Fund
											LocalProject						= first NewAssetFundsRel.Project
									  		LocalFinanceDimension1				= first NewAssetFundsRel.FinanceDimension1
									  		LocalFinanceDimension2				= first NewAssetFundsRel.FinanceDimension2
									  		LocalFinanceDimension3				= first NewAssetFundsRel.FinanceDimension3
									  		LocalFinanceDimension4				= first NewAssetFundsRel.FinanceDimension4
									  		LocalFinanceDimension5				= first NewAssetFundsRel.FinanceDimension5
									   		LocalFinanceDimension6				= first NewAssetFundsRel.FinanceDimension6
									   		LocalFinanceDimension7				= first NewAssetFundsRel.FinanceDimension7
									  		LocalFinanceDimension8				= first NewAssetFundsRel.FinanceDimension8
									  		LocalFinanceDimension9				= first NewAssetFundsRel.FinanceDimension9
									  		LocalFinanceDimension10				= first NewAssetFundsRel.FinanceDimension10

										if (LocalAccountingEntity entered)
											LocalDistributionAccount.ToAccountingEntity	= LocalAccountingEntity
										if (LocalAccountingUnit		entered)
											LocalDistributionAccount.AccountingUnit		= LocalAccountingUnit
										if (LocalProject			entered)
											LocalDistributionAccount.Project			= LocalProject
										if (LocalFinanceDimension1	entered)
											LocalDistributionAccount.FinanceDimension1	= LocalFinanceDimension1
										if (LocalFinanceDimension2	entered)
											LocalDistributionAccount.FinanceDimension2	= LocalFinanceDimension2
										if (LocalFinanceDimension3	entered)
											LocalDistributionAccount.FinanceDimension3	= LocalFinanceDimension3
										if (LocalFinanceDimension4	entered)
											LocalDistributionAccount.FinanceDimension4	= LocalFinanceDimension4
										if (LocalFinanceDimension5	entered)
											LocalDistributionAccount.FinanceDimension5	= LocalFinanceDimension5
										if (LocalFinanceDimension6	entered)
											LocalDistributionAccount.FinanceDimension6	= LocalFinanceDimension6
										if (LocalFinanceDimension7	entered)
											LocalDistributionAccount.FinanceDimension7	= LocalFinanceDimension7
										if (LocalFinanceDimension8	entered)
											LocalDistributionAccount.FinanceDimension8	= LocalFinanceDimension8
										if (LocalFinanceDimension9	entered)
											LocalDistributionAccount.FinanceDimension9	= LocalFinanceDimension9
										if (LocalFinanceDimension10	entered)
											LocalDistributionAccount.FinanceDimension10	= LocalFinanceDimension10
										if (LocalAssetFund				  				= LocalLastAssetFund)
											LocalDepreciationDifference 				= (LocalDepreciationDifference - AssetBookRel.IncrementalDepreciation)  
											BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
										else
											LocalDepreciationDifference 				= (LocalDepreciationDifference * LocalFundPercent)	
											BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
											LocalIncrementalACM							= LocalDepreciationDifference
											UpdateAssetBookACM			 				= true

										invoked.DistributionAccount 					= LocalDistributionAccount
										invoked.TransactionAmount						= LocalDepreciationDifference
									else
										invoked.TransactionAmount						= LocalDepreciationDifference
										LocalIncrementalACM								= LocalDepreciationDifference
										LocalAssetFund									= LocalLastAssetFund
										UpdateAssetBookACM			 					= true

									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency					= Book.Currency

									else
										invoked.TransientBookCurrency					= Asset.Currency
									invoked.AssetTransactionAmount.TransactionAmount 	= LocalDepreciationDifference
									invoked.AssetTransactionAmount.ExchangeDate 		= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

								if (UpdateAssetBookACM)			
									invoke IncrementHistoryAmount AssetBookRel
										invoked.PrmIncrementalDepreciation  			= LocalIncrementalACM
										invoked.PrmLastDepreciationFund					= LocalAssetFund
									initialize UpdateAssetBookACM
								if (LocalAssetBookTransactionView.YearEndDate entered)



















									invoke Update ACMAssetTransactionSummaryRel  
										invoked.FinanceDimension1					= LocalDistributionAccount.FinanceDimension1
										invoked.FinanceDimension2					= LocalDistributionAccount.FinanceDimension2
										invoked.FinanceDimension3					= LocalDistributionAccount.FinanceDimension3
										invoked.FinanceDimension4					= LocalDistributionAccount.FinanceDimension4
										invoked.FinanceDimension5					= LocalDistributionAccount.FinanceDimension5
										invoked.FinanceDimension6					= LocalDistributionAccount.FinanceDimension6
										invoked.FinanceDimension7					= LocalDistributionAccount.FinanceDimension7
										invoked.FinanceDimension8					= LocalDistributionAccount.FinanceDimension8
										invoked.FinanceDimension9					= LocalDistributionAccount.FinanceDimension9
										invoked.FinanceDimension10					= LocalDistributionAccount.FinanceDimension10
										invoked.BaseNumberOfDecimals				= Book.Currency.NumberOfDecimals

										invoked.InputProcess = AssetProcess
										if (BookDepreciationDifference entered)
											invoked.InputAmount						= BookDepreciationDifference
										else
											invoked.InputAmount						= LocalDepreciationDifference

		UpdateBookHistory					
			if (!AssetProcess.Addition
			and !Book.TrackDepreciationHistory
			and !LocalAdjustmentUpdate)
				LocalSkipUpdateBookHistory = true
			if (AssetAccountType.Asset
			and !LocalFullyDepreciated
			and (AssetBookRel.LifeToDateDepreciation not entered
			or   AssetBookRel.YearToDateDepreciation entered)
			and !LocalCreateHistory)
				LocalSkipUpdateBookHistory = true

			if (Asset.FundAllocationRequired)
				LocalLastAssetFund = last NewAssetFundsRel.AssetFund
				if ((AssetBookRel.IncrementalExpense entered
				and AssetBookRel.LastExpenseFund = blank)
				or LocalLastAssetFund = AssetBookRel.LastExpenseFund)  
					LocalSkipUpdateBookHistory = true
			if (!LocalSkipUpdateBookHistory)
				LocalYearEndDate = CurrentBookCalendarRel.YearEndDate

				if (AssetProcess.Addition
				or  AssetProcess.ReAdd
				or AssetProcess.Impairment
				or LocalAdjustmentUpdate)

					if (AssetProcess.Addition
					or AssetProcess.Impairment
					or LocalAdjustmentUpdate)
						LocalYearEndDate = CurrentBookCalendarRel.YearBeginDate - 1 day

						if (AssetBookRel.InServiceDate <= LocalYearEndDate
						or  IsFutureInServiceDate)
							if ((AssetBookRel.LifeToDateDepreciation != AssetBookRel.YearToDateDepreciation
							and !LocalExpenseTransactionCreated)
							or   IsFutureInServiceDate)
								if (LocalAdjustmentUpdate)
									LocalDepreciationDifference		= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (UnreleasedAssetBookAdjustmentRel.LifeToDateDepreciation - UnreleasedAssetBookAdjustmentRel.YearToDateDepreciation)
								else
									LocalDepreciationDifference			= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
								invoke DefaultAccounts Asset
							 	GetDefaultAccounts = true
								LocalCurrencyAmount 		= LocalDepreciationDifference
								LocalDepreciationDifference	= RoundedCurrencyAmount
								if (GetHistoryTransCodeBlocks = true
								and LocalDepreciationDifference entered)
									invoke Create AssetBookTransaction
										assign result to LocalAssetBookTransactionView
										fill in fields from this instance
											except invoked.YearEndDate
										initialize invoked.AssetBookTransaction
										initialize invoked.AssetTransactionAmount
										invoked.DistributionAccount					= TransientEXPAccount
										invoked.TransactionStatus					= "H"
										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.PriorYearEndDate)
											invoked.PostingDate						= LocalYearEndDate


										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.DefaultPostingDate
										and UnreleasedAssetBookTransactionsRel exists)
												invoked.PostingDate					= PostingDate
										else
											if ((AssetProcess.Adjustment
											or  LocalAdjustmentUpdate)
											and AssetBookRel.HistoryPostingDate.DefaultPostingDate)
												invoked.PostingDate					= AssetAdjustmentRel.PostingDate

										invoked.ProcessDate							= LocalYearEndDate
										if (Book.Impairment)
											invoked.AssetAccountType				= "IMT"
											LocalAccountType						= "IMT"
											invoked.DistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											LocalDistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											invoked.ProcessSequence					= Asset.LastAssetImpairment
											invoked.AssetProcess					= "IMA"
										else
											if (LocalAdjustmentUpdate)
												invoked.AssetProcess				= "ADJ"
											    invoked.Reference                   = "Adjustment"
											invoked.AssetAccountType				= "EXP"
											LocalAccountType						= "EXP"
											invoked.DistributionAccount				= TransientEXPAccount
											LocalDistributionAccount				= TransientEXPAccount

										invoked.BatchUpdateResult					= LocalBatchUpdateResult
										if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
											TransientExchangeDate					= TransactionDate
											LocalCurrencyExchange.TransactionAmount	= LocalDepreciationDifference
											include ConvertLocalDepreciationDifference
										else
											initialize BookDepreciationDifference
										if (AssetFundAllocationRequired
										and LocalFundAccountType
										and AssetFundsRel exists)
											LocalLastAssetFund					= last NewAssetFundsRel.AssetFund
											LocalAssetFund						= first NewAssetFundsRel.AssetFund
											if (AssetBookRel.LastExpenseFund entered)
												LocalLastProcessedFund				= AssetBookRel.LastExpenseFund
												LocalAccountingEntity				= first NextAssetFundRel.AccountingEntity
												LocalAssetFund						= first NextAssetFundRel.AssetFund
												LocalFundPercent					= first NextAssetFundRel.PercentContribution
												LocalAccountingEntity				= first NextAssetFundRel.AccountingEntity
												LocalAccountingUnit					= first NextAssetFundRel.AccountingUnit
												LocalFund							= first NextAssetFundRel.Fund
												LocalProject						= first NextAssetFundRel.Project
										  		LocalFinanceDimension1				= first NextAssetFundRel.FinanceDimension1
										  		LocalFinanceDimension2				= first NextAssetFundRel.FinanceDimension2
										  		LocalFinanceDimension3				= first NextAssetFundRel.FinanceDimension3
										  		LocalFinanceDimension4				= first NextAssetFundRel.FinanceDimension4
										  		LocalFinanceDimension5				= first NextAssetFundRel.FinanceDimension5
										   		LocalFinanceDimension6				= first NextAssetFundRel.FinanceDimension6
										   		LocalFinanceDimension7				= first NextAssetFundRel.FinanceDimension7
										  		LocalFinanceDimension8				= first NextAssetFundRel.FinanceDimension8
										  		LocalFinanceDimension9				= first NextAssetFundRel.FinanceDimension9
										  		LocalFinanceDimension10				= first NextAssetFundRel.FinanceDimension10
											else
												LocalAssetFund						= first NewAssetFundsRel.AssetFund
												LocalFundPercent					= first NewAssetFundsRel.PercentContribution
												LocalAccountingEntity				= first NewAssetFundsRel.AccountingEntity
												LocalAccountingUnit					= first NewAssetFundsRel.AccountingUnit
												LocalFund							= first NewAssetFundsRel.Fund
												LocalProject						= first NewAssetFundsRel.Project
										  		LocalFinanceDimension1				= first NewAssetFundsRel.FinanceDimension1
										  		LocalFinanceDimension2				= first NewAssetFundsRel.FinanceDimension2
										  		LocalFinanceDimension3				= first NewAssetFundsRel.FinanceDimension3
										  		LocalFinanceDimension4				= first NewAssetFundsRel.FinanceDimension4
										  		LocalFinanceDimension5				= first NewAssetFundsRel.FinanceDimension5
										   		LocalFinanceDimension6				= first NewAssetFundsRel.FinanceDimension6
										   		LocalFinanceDimension7				= first NewAssetFundsRel.FinanceDimension7
										  		LocalFinanceDimension8				= first NewAssetFundsRel.FinanceDimension8
										  		LocalFinanceDimension9				= first NewAssetFundsRel.FinanceDimension9
										  		LocalFinanceDimension10				= first NewAssetFundsRel.FinanceDimension10

											if (LocalAccountingEntity entered)
												LocalDistributionAccount.ToAccountingEntity	= LocalAccountingEntity
											if (LocalAccountingUnit		entered)
												LocalDistributionAccount.AccountingUnit		= LocalAccountingUnit
											if (LocalProject			entered)
												LocalDistributionAccount.Project			= LocalProject
											if (LocalFinanceDimension1	entered)
												LocalDistributionAccount.FinanceDimension1	= LocalFinanceDimension1
											if (LocalFinanceDimension2	entered)
												LocalDistributionAccount.FinanceDimension2	= LocalFinanceDimension2
											if (LocalFinanceDimension3	entered)
												LocalDistributionAccount.FinanceDimension3	= LocalFinanceDimension3
											if (LocalFinanceDimension4	entered)
												LocalDistributionAccount.FinanceDimension4	= LocalFinanceDimension4
											if (LocalFinanceDimension5	entered)
												LocalDistributionAccount.FinanceDimension5	= LocalFinanceDimension5
											if (LocalFinanceDimension6	entered)
												LocalDistributionAccount.FinanceDimension6	= LocalFinanceDimension6
											if (LocalFinanceDimension7	entered)
												LocalDistributionAccount.FinanceDimension7	= LocalFinanceDimension7
											if (LocalFinanceDimension8	entered)
												LocalDistributionAccount.FinanceDimension8	= LocalFinanceDimension8
											if (LocalFinanceDimension9	entered)
												LocalDistributionAccount.FinanceDimension9	= LocalFinanceDimension9
											if (LocalFinanceDimension10	entered)
												LocalDistributionAccount.FinanceDimension10	= LocalFinanceDimension10

											if (LocalAssetFund				  					= LocalLastAssetFund)
												LocalDepreciationDifference 					= (LocalDepreciationDifference - AssetBookRel.IncrementalExpense)  
												BookDepreciationDifference                      = (BookDepreciationDifference * LocalFundPercent)

											else
												LocalDepreciationDifference 					= (LocalDepreciationDifference * LocalFundPercent)	
												BookDepreciationDifference                      = (BookDepreciationDifference * LocalFundPercent)
												LocalIncrementalEXP								= LocalDepreciationDifference
												UpdateAssetBookEXP			 					= true
											invoked.DistributionAccount 						= LocalDistributionAccount
											invoked.TransactionAmount							= LocalDepreciationDifference
										else
											invoked.TransactionAmount							= LocalDepreciationDifference
											LocalIncrementalEXP									= LocalDepreciationDifference
											LocalAssetFund										= LocalLastAssetFund
											UpdateAssetBookEXP			 						= true

										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency						= Book.Currency
										else
											invoked.TransientBookCurrency						= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= LocalDepreciationDifference
										invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

									if (UpdateAssetBookEXP)			
										invoke IncrementExpenseAmount AssetBookRel
											invoked.PrmIncrementalExpense  						= LocalIncrementalEXP
											invoked.PrmLastExpenseFund							= LocalAssetFund
										initialize UpdateAssetBookEXP
									if (LocalAssetBookTransactionView.YearEndDate entered)




















										invoke Update EXPAssetTransactionSummaryRel
											invoked.FinanceDimension1							= LocalDistributionAccount.FinanceDimension1
											invoked.FinanceDimension2							= LocalDistributionAccount.FinanceDimension2
											invoked.FinanceDimension3							= LocalDistributionAccount.FinanceDimension3
											invoked.FinanceDimension4							= LocalDistributionAccount.FinanceDimension4
											invoked.FinanceDimension5							= LocalDistributionAccount.FinanceDimension5
											invoked.FinanceDimension6							= LocalDistributionAccount.FinanceDimension6
											invoked.FinanceDimension7							= LocalDistributionAccount.FinanceDimension7
											invoked.FinanceDimension8							= LocalDistributionAccount.FinanceDimension8
											invoked.FinanceDimension9							= LocalDistributionAccount.FinanceDimension9
											invoked.FinanceDimension10							= LocalDistributionAccount.FinanceDimension10
											invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals

											invoked.InputProcess = AssetProcess
											if (BookDepreciationDifference entered)
												invoked.InputAmount								= BookDepreciationDifference
											else
												invoked.InputAmount								= LocalDepreciationDifference



								LocalExpenseTransactionCreated = true
								SavedAsset = Asset

								if (Book.TrackDepreciationHistory)
									invoke Update AssetBookHistoryRel
										invoked.Life	= AssetBookRel.Life

									LocalCalendarPeriod = CurrentBookCalendarRel.NumberOfPeriods

									initialize LocalLifeRemaining
									if (AssetBookRel.LifeRemaining entered)
										LocalLifeRemaining	= (((AssetBookRel.LifeRemaining * CurrentBookCalendarRel.DepreciationPeriodsPerYear) + (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed * 12)) / CurrentBookCalendarRel.DepreciationPeriodsPerYear)

									if (AssetBookPeriodHistoryRel not exists)

										if (HistoryYearBookCalendarsRel exists)
											LocalHistoryBeginDate = HistoryYearBookCalendarsRel.YearBeginDate
										else
											LocalHistoryBeginDate = CurrentBookCalendarRel.YearBeginDate
										invoke Update AssetBookHistoryRel
											invoked.YearToDateDepreciation			= LocalDepreciationDifference
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < LocalHistoryBeginDate
											and !AssetAccountType.Asset)
												LocalDeprExpSum = (sum EXPAssetTransactionRel.DerivedTransactionAmount)
												invoked.LifeToDateDepreciation			= LocalDeprExpSum
												invoked.BeginningLifeToDateDepreciation	= DerivedTransactionAmount
											else
												invoked.LifeToDateDepreciation			= LocalDepreciationDifference

										invoke Create AssetBookPeriodHistory
											invoked.Asset							= Asset
											invoked.Book							= Book
											invoked.Company							= Company
											invoked.YearEndDate						= LocalYearEndDate
											invoked.AssetBookPeriodHistory.Period	= LocalCalendarPeriod
											invoked.CurrentPeriodDepreciation		= LocalDepreciationDifference
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < LocalYearEndDate
											and LocalHistoryBeginDate <= PostingDate
											and !AssetAccountType.Asset)
												invoked.YearToDatePeriodDepreciation	= (DerivedTransactionAmount + LocalDepreciationDifference)
											else
												invoked.YearToDatePeriodDepreciation	= LocalDepreciationDifference
											invoked.Basis							= AssetBookRel.Basis
											invoked.LifeRemaining					= LocalLifeRemaining

									else
										invoke Update AssetBookPeriodHistoryRel
											invoked.CurrentPeriodDepreciation		+= LocalDepreciationDifference
											invoked.YearToDatePeriodDepreciation	+= LocalDepreciationDifference
											invoked.Basis							= AssetBookRel.Basis
											invoked.LifeRemaining					= LocalLifeRemaining

										if (AssetBookPeriodHistoryRel.CurrentPeriodDepreciation not entered)
											invoke Delete AssetBookPeriodHistoryRel



				else		
					if (!AssetProcess.Adjustment)
						invoke Update AssetBookHistoryRel
							invoked.Life	= AssetBookRel.Life



				if (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed !=0
				and AssetBookRel.YearToDateDepreciation !=0)
					if (Book.TrackDepreciationHistory)
						initialize LocalDepreciationPeriodDates
						initialize LocalDepreciationPeriodBeginDate
						I1	= 1
						while (I1 <= 55)
							if (I1 = 1)
								LocalDepreciationPeriodDates.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]			= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
								LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]	= BookCalendarsRel.YearBeginDate
								LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]		= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
							else
								LocalDepreciationPeriodDates.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]			= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
								LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]	= LocalDepreciationPeriodBeginDate
								LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]		= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]

							LocalDepreciationPeriodBeginDate = BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] + 1 day
							I1 += 1

						I1 = 1
						while (I1 <= 54
						and LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
							if (LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
								if (PostingDate	>= LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]
								and PostingDate <= LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1])

									LocalYearEndDate	= BookCalendarsRel.YearEndDate
									LocalCalendarPeriod	= I1

									if (AssetBookPeriodHistoryRel not exists)
										initialize LocalPreviousYTDAmount
										if (I1 = 1)
											initialize LocalPreviousYTDAmount
										else
											LocalPreviousYTDAmount	= last AssetBookPeriodHistoriesRel.YearToDatePeriodDepreciation

										if (AssetBookHistoryRel not exists
										and !(PostingDate < LocalHistoryBeginDate))
											LocalDeprExpSum = (sum EXPAssetTransactionRel.DerivedTransactionAmount)
											invoke Update AssetBookHistoryRel
												invoked.Asset							= Asset
												invoked.Book							= Book
												invoked.Company							= Company
												invoked.YearEndDate						= LocalYearEndDate
												invoked.YearToDateDepreciation			+= DerivedTransactionAmount
												invoked.LifeToDateDepreciation			= LocalDeprExpSum
												invoked.BeginningLifeToDateDepreciation	= LocalDeprExpSum - DerivedTransactionAmount
												invoked.Life							= AssetBookRel.Life
										else
											invoke Update AssetBookHistoryRel
												invoked.Asset							= Asset
												invoked.Book							= Book
												invoked.Company							= Company
												invoked.YearEndDate						= LocalYearEndDate
												invoked.YearToDateDepreciation			+= DerivedTransactionAmount
												invoked.LifeToDateDepreciation			+= DerivedTransactionAmount
												invoked.Life							= AssetBookRel.Life

										invoke Create AssetBookPeriodHistory
											invoked.Asset							= Asset
											invoked.Book							= Book
											invoked.Company							= Company
											invoked.YearEndDate						= LocalYearEndDate
											invoked.AssetBookPeriodHistory.Period	= LocalCalendarPeriod
											invoked.CurrentPeriodDepreciation		= DerivedTransactionAmount
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < CurrentBookCalendarRel.YearBeginDate)
												invoked.YearToDatePeriodDepreciation	= DerivedTransactionAmount
												invoked.LifeRemaining					= LocalLifeRemaining
											else
												invoked.YearToDatePeriodDepreciation	= (LocalPreviousYTDAmount + DerivedTransactionAmount)
												invoked.LifeRemaining					= AssetBookRel.LifeRemaining
											invoked.Basis							= AssetBookRel.Basis

									else
										invoke Update AssetBookHistoryRel
											invoked.YearToDateDepreciation			+= DerivedTransactionAmount
											invoked.LifeToDateDepreciation			+= DerivedTransactionAmount
										invoke Update AssetBookPeriodHistoryRel
											invoked.CurrentPeriodDepreciation		+= DerivedTransactionAmount
											if (!(Company.DefaultPostingDate.PurchaseDate
											and PostingDate < CurrentBookCalendarRel.YearBeginDate))
												invoked.YearToDatePeriodDepreciation	+= DerivedTransactionAmount
												invoked.LifeRemaining					= AssetBookRel.LifeRemaining
											invoked.Basis							= AssetBookRel.Basis

										if (AssetBookPeriodHistoryRel.CurrentPeriodDepreciation not entered)
											invoke Delete AssetBookPeriodHistoryRel
							I1 += 1

		ConvertLocalDepreciationDifference
			LocalFromCurrency           			= Asset.Currency
			LocalBaseAmount.ToCurrency				= Book.Currency
			LocalCurrencyExchange.BaseAmount.ToCurrency = Book.Currency
			LocalCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
			if (Book.CurrencyTable entered)
				LocalCurrencyTable	= Book.CurrencyTable
			else
				LocalCurrencyTable	= Asset.CurrencyTable
			LocalEnterpriseGroup					= Asset.Company.FinanceEnterpriseGroup
			LocalBaseAmount.EnteredCurrencyRate	 	= LocalCurrencyRate
			TransientExchangeRate					= LocalCurrencyRate
			BookDepreciationDifference				= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount


		RefreshCurrencyExchangeRate
			if (Asset.Currency not = Book.Currency)
				if (Book.PostCurrency.Asset)
					initialize AssetTransactionAmount
					AssetTransactionAmount.TransactionAmount 		= TransactionAmount
					AssetTransactionAmount.ExchangeDate 			= Asset.LastAssetItemPurchaseDate
					AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

		RefreshAssetAmountFromBatch
			if (Asset.Currency not = Book.Currency)
				LocalFromCurrency = Asset.Currency
			else
				LocalFromCurrency = Book.Currency

			AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
			AssetTransactionAmount.ExchangeDate			 = TransactionDate
			AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
			if (LocalFromCurrency = Book.Currency)
				AssetTransactionAmount.BaseAmount.EnteredCurrencyRate = 1
				AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = TransactionAmount
			else
				AssetTransactionAmount.BaseAmount.EnteredCurrencyRate = AssetTransactionAmount.BaseAmount.OutputCurrencyRate
				AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = AssetTransactionAmount.BaseAmount.OutputCurrencyAmount


	Field Rules
		Asset
			if (TransactionStatus not entered)
				TransactionStatus = "U"

		AssetLease
			default to Asset.AssetLease

		Company
			initial value is Asset.Company
			default to Asset.Company

		AssetProcess
			default to Asset.AssetProcess

			if (Book.PostCurrency.Book)
				TransientBookCurrency = Book.Currency
			else
				TransientBookCurrency = Asset.Currency


		DistributionAccount.AccountingUnit
			required
				"AccountingUnitIsRequired"				//"FieldIsRequired"          

			constraint (Asset.IsEnteredOrPostActiveProcess)
				"CannotMaintainAssetBookTransaction;AssetIsReleasedOrDisposedOff"				//"@E.AMABK.106"

		DistributionAccount
			constraint(DistributionAccount.GeneralLedgerChartAccount entered)
				"GeneralLedgerChartAccountIsRequired"
			if(FinanceEnterpriseGroup.AccountingUnitRequired)
				constraint(DistributionAccount.AccountingUnit entered)
					"<FinanceEnterpriseGroup.AccountingUnitLabel>IsRequired"
			if(FinanceEnterpriseGroup.ProjectRequired)
				constraint(DistributionAccount.Project entered)
					"<FinanceEnterpriseGroup.ProjectLabel>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension1Required)
				constraint(DistributionAccount.FinanceDimension1 entered)
					"<FinanceEnterpriseGroup.FinanceDimension1Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension2Required)
				constraint(DistributionAccount.FinanceDimension2 entered)
					"<FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension3Required)
				constraint(DistributionAccount.FinanceDimension3 entered)
					"<FinanceEnterpriseGroup.FinanceDimension3Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension4Required)
				constraint(DistributionAccount.FinanceDimension4 entered)
					"<FinanceEnterpriseGroup.FinanceDimension4Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension5Required)
				constraint(DistributionAccount.FinanceDimension5 entered)
					"<FinanceEnterpriseGroup.FinanceDimension5Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension6Required)
				constraint(DistributionAccount.FinanceDimension6 entered)
					"<FinanceEnterpriseGroup.FinanceDimension6Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension7Required)
				constraint(DistributionAccount.FinanceDimension7 entered)
					"<FinanceEnterpriseGroup.FinanceDimension7Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension8Required)
				constraint(DistributionAccount.FinanceDimension8 entered)
					"<FinanceEnterpriseGroup.FinanceDimension8Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension9Required)
				constraint(DistributionAccount.FinanceDimension9 entered)
					"<FinanceEnterpriseGroup.FinanceDimension9Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension10Required)
				constraint(DistributionAccount.FinanceDimension10 entered)
					"<FinanceEnterpriseGroup.FinanceDimension10Label>IsRequired"
			required
				"AccountIsRequired"						//"FieldIsRequired"               

		TransientCurrencyTable

			default to Book.CurrencyTable
			default to Asset.CurrencyTable

		TransactionDate
			if (Book.PostCurrency.Asset
			and Asset.Currency != Book.Currency)
				TransactionDate = Asset.LastAssetItemPurchaseDate 
			else
				if (Asset.AssetProcess.Addition)
					if (AssetManagementInterfaceResult not entered)
						TransactionDate = Asset.LastAssetItemPurchaseDate 
				if (AssetProcess.Transfer
				and TransactionDate not entered)
					if (ToAssetTransferRel exists)
						TransactionDate = first ToAssetTransferRel.TransferDate  
					else
						if AssetTransferRel.TransferDate entered
							TransactionDate = AssetTransferRel.TransferDate
				if (AssetProcess.Disposal)
					if (ToAssetDisposalRel exists)
						TransactionDate = first ToAssetDisposalRel.DisposalDate
					else
						if (TransientTransactionDate not entered)
							TransactionDate = AssetDisposalRel.DisposalDate
				if (AssetProcess.Adjustment)
					TransactionDate = AssetAdjustmentRel.AdjustmentDate
				if (AssetProcess.Adjustment
				and (AssetAccountType.ImpairmentAmortization
				or  AssetAccountType.AccumulatedImpairmentLoss))
					if (first LastAssetImpairmentRel.Status.PostRelease)
						TransactionDate	= LastAssetImpairmentRel.ImpairmentDate
					else
						TransactionDate	= AssetAdjustmentRel.AdjustmentDate


				if (Asset.AssetProcess.ReAdd)
					TransactionDate = AssetReinstatementRel.ReinstatementDate
				if (Asset.AssetProcess.Revalue)
					if (TransactionDate not entered)
						TransactionDate = AssetRevaluationRel.RevalueDate
				if (Asset.AssetProcess.Impairment)
				 	TransactionDate = AssetImpairmentRel.ImpairmentDate
				if (Asset.AssetProcess.Depreciation
				or Asset.AssetProcess.RevalueAmortization
				or Asset.AssetProcess.ImpairmentAmortization)
					TransactionDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			initial value is CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			default to CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			if (Asset.Status.Unreleased)
				if (TransactionStatus.Unreleased
				and TransactionDate changed)
					include RefreshCurrencyExchangeRate
			AssetTransactionAmount.ExchangeDate = TransactionDate

		PostingDate
			if (action type.Create
			and PostingDate not entered)
				if (!CreateFromBatch)
					if (UnreleasedAssetBookTransactionsRel exists)
						PostingDate 			= first UnreleasedAssetBookTransactionsRel.PostingDate
					else
						if (AssetProcess.Adjustment)
							if (AssetAdjustmentRel.PostingDate entered)
								PostingDate = AssetAdjustmentRel.PostingDate
							else
								PostingDate = AssetAdjustmentRel.AdjustmentDate
						if (AssetProcess.Transfer)
							if (ToAssetTransferRel exists)
								if (first ToAssetTransferRel.PostingDate entered)
									PostingDate = first ToAssetTransferRel.PostingDate
								else
									PostingDate = first ToAssetTransferRel.TransferDate
							else
								if (AssetTransferRel.PostingDate entered)
									PostingDate = AssetTransferRel.PostingDate
								else
									PostingDate = AssetTransferRel.TransferDate
						if (AssetProcess.Disposal)
							if (ToAssetDisposalRel exists)
								if (first ToAssetDisposalRel.PostingDate entered)
									PostingDate = first ToAssetDisposalRel.PostingDate
								else
									PostingDate = first ToAssetDisposalRel.DisposalDate
							else
								if (AssetDisposalRel.PostingDate entered)
									PostingDate = AssetDisposalRel.PostingDate
								else
									PostingDate = AssetDisposalRel.DisposalDate
						if (AssetProcess.ReAdd
						or AssetProcess.Reinstatement)
							if (AssetReinstatementRel.PostingDate entered)
								PostingDate = AssetReinstatementRel.PostingDate
							else
								PostingDate = AssetReinstatementRel.ReinstatementDate
						if (AssetProcess.Revalue)
							if (UnreleasedAssetBookRevaluationRel.PostingDate entered)
								PostingDate = UnreleasedAssetBookRevaluationRel.PostingDate
							else
								PostingDate = AssetRevaluationRel.RevalueDate
						if (AssetProcess.Impairment)
				        	if (AssetImpairmentRel.PostingDate entered)
								PostingDate = AssetImpairmentRel.PostingDate
							else
								PostingDate = AssetImpairmentRel.ImpairmentDate
						if (Book.Impairment
						and IsZeroImpairment)
							PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
				        if (AssetProcess.Addition)
							if (Company.DefaultPostingDate.PurchaseDate)
								PostingDate = TransactionDate
							else
								if (Company.DefaultPostingDate.CurrentDate)
									PostingDate	= current corporate date
								else
									PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
						if (AssetProcess.Depreciation
						or  AssetProcess.RevalueAmortization
						or  AssetProcess.ImpairmentAmortization
						or  AssetAccountType.ImpairmentAmortization
						or  AssetAccountType.AccumulatedImpairmentLoss)
							PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
 						default to CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			if (ProcessDate entered)
				if (PostingDate not entered)
					PostingDate = ProcessDate
			else
				if (PostingDate entered)
					ProcessDate = PostingDate
			if (PostingDate changed)
				YearEndDate		= DerivedCalendarEndDate

		TransactionAmount
			if (action type.Update
			and TransactionAmount changed)
				constraint (IsManualEntry)
					"TransactionAmountCannotBeChanged"
			required
				"TransactionAmountIsRequired"

		CreationDate
			default to current timestamp

		CreatedBy
			default to actor

		Reference
			if (Asset.AssetProcess.Addition)
				Reference	= "Addition"
			else
				if (Asset.AssetProcess.Adjustment)
					if (CreateFromBatch = true)
						Reference 	= "Mass Asset Adjustment"
					else
						Reference	= "Adjustment"
				else
					if (Asset.AssetProcess.Transfer)
						if (TransientCreateFromBatch = true)
							if (TransientTransferFromOrTo.From)
								Reference 	= "Mass Transfer From"
							if (TransientTransferFromOrTo.To)
								Reference 	= "Mass Transfer To"
						else
							if (Reference not entered)
								Reference	= "Transfer"
					else
						if (Asset.AssetProcess.Disposal)
							if (CreateFromBatch = true)
								Reference 	= "Mass Asset Disposal"
							else
								Reference	= "Disposal"
						else
							if (Asset.AssetProcess.Impairment)
								Reference	= "Impairment"
							else
								if (Asset.AssetProcess.Reinstatement)
									Reference	= "Reinstatement"
		YearEndDate
			initial value is DerivedCalendarEndDate
			default to DerivedCalendarEndDate
			if (!BookCalendarsRel exists)
				YearEndDate = blank

	Create Rules
		if (Book.Ledger not entered)
			DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
		else
			DistributionAccount.Ledger			= Book.Ledger

	Actions
		Create is a Create Action
			valid when (CreateAllowed)
			Local Fields
				LocalGeneralLedgerChartAccount		is like GeneralLedgerChartAccount

			Entrance Rules
				if (Book.PostCurrency.Book)
					TransientBookCurrency = Book.Currency
				else
					TransientBookCurrency = Asset.Currency
			Action Rules
				if (PostingDate not entered)
					if (TransactionStatus.Unreleased
					and (AssetAccountType.ImpairmentAmortization
					or  AssetAccountType.AccumulatedImpairmentLoss)
					and !AssetProcess.Disposal)
						PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
				AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
				AssetTransactionAmount.ExchangeDate			 = TransactionDate
				AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
				constraint (CurrentBookCalendarRel exists)
					"CalendarNotFound"
				constraint (!CurrentBookCalendarRel.IsPostingBook)
					"Book<Book>MustBeANonPostingBook"




			Exit Rules
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment = AssetBookRel.DerivedAssetImpairment
				if (!CreateFromBatch)
					include UpdateCreditAndDebitBalances



		WizardCreate is a Create Action
			default label is "Create"
			valid when (ApprovalImpairmentInProgress)
			Local Fields
				LocalGeneralLedgerChartAccount is like GeneralLedgerChartAccount

			Entrance Rules

				if (AssetTransfer entered
						and AssetTransfer != first FromAssetTransferRel.AssetTransfer
						and AssetTransfer != first ToAssetTransferRel.AssetTransfer)
					if (CompanyAssetTransferRel exists)	
						constraint (false)
							"Asset_<Asset>InvalidForThis_Asset_Book_Transfer"
					else								
						constraint (false)
							"Company_<Company>InvalidForThis_Asset_Book_Transfer"

				if (AssetAccountType = blank)
					if (Asset.AssetProcess.Transfer
					and ToAssetTransferRel exists)
						ProcessSequence = ToAssetTransferRel.Asset.LastAssetSequence
					else
						ProcessSequence = Asset.LastAssetSequence

				if (Book.PostCurrency.Book)
					TransientBookCurrency = Book.Currency
				else
					TransientBookCurrency = Asset.Currency

			Action Rules
				if (TransientTransactionAmount entered)
					TransactionAmount		= TransientTransactionAmount
				if (PostingDate not entered)
					if (TransactionStatus.Unreleased
						and (AssetAccountType.ImpairmentAmortization
							or AssetAccountType.AccumulatedImpairmentLoss)
						and !AssetProcess.Disposal)
						PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
				AssetTransactionAmount.TransactionAmount		= TransactionAmount
				AssetTransactionAmount.ExchangeDate				= TransactionDate
				AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
				constraint (CurrentBookCalendarRel exists)
					"CalendarNotFound"
				constraint (!CurrentBookCalendarRel.IsPostingBook)
					"Book<Book>MustBeANonPostingBook"




			Exit Rules
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment = AssetBookRel.DerivedAssetImpairment
				if (!CreateFromBatch)
					include UpdateCreditAndDebitBalances

		ManualTransactionEntry is an Update Action
			valid when (ManualEntryAllow)
			restricted
			Action Rules
				if (TransactionAmount changed)
					initialize AssetTransactionAmount
					AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
					AssetTransactionAmount.ExchangeDate			 = TransactionDate
					AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
			Exit Rules
				include UpdateCreditAndDebitBalances



		CreateAllocation is a Create Action
			restricted
			Action Rules


		CreateFromBatch is a Create Action
			restricted
			Action Rules
				CreateFromBatch = true
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true
				invoke Create this instance

		CreateTransactionPeriodClose is a Create Action
			restricted
			Entrance Rules
				if (Book.PostCurrency.Book)
					TransientBookCurrency = Book.Currency
				else
					TransientBookCurrency = Asset.Currency

			Action Rules
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true
				AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
				AssetTransactionAmount.ExchangeDate			 = TransactionDate
				AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

			Exit Rules
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment	= AssetBookRel.DerivedAssetImpairment

		UpdateFieldsFromAssetPeriodClose is an Instance Action
			restricted
			Action Rules
				include RefreshAssetAmountFromBatch

				if (Book.Ledger entered)
					DistributionAccount.Ledger			= Book.Ledger
				if (TransactionDate not entered)
					TransactionDate = Asset.LastAssetItemPurchaseDate 

		UpdateAssetAmountFromBatch is an Instance Action
			restricted
			Action Rules
				include RefreshAssetAmountFromBatch
				if (Book.Ledger entered)
					DistributionAccount.Ledger			= Book.Ledger

		UpdateFromTransfer is an Instance Action
			restricted
			Parameters
				PrmTransactionAmount	is an InternationalAmount

			Action Rules
				if (AssetAccountType.Asset)
					TransactionAmount	+= PrmTransactionAmount
				else
					TransactionAmount	-= PrmTransactionAmount

		Update is an Update Action
			valid when (ApprovalUpdateAllowed)
			Action Rules
				if (TransactionAmount changed)
					constraint (Asset.Status.Unreleased
					or          Asset.Status.PostRelease)
						"CannotUpdateAssetBookTransaction;AssetHasBeenReleasedOrDisposed"		//"CannotUpdateAssetTransactions;AssetHasBeenUpdated"   
				if(IsManualEntry)
					if (TransactionAmount changed)
						initialize AssetTransactionAmount
						AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
						AssetTransactionAmount.ExchangeDate			 = TransactionDate
						AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
			Exit Rules
				include UpdateCreditAndDebitBalances

		Delete is a Delete Action
			valid when (DeleteAllowed)
			Entrance Rules
				if (AssetControlTransactionRel not exists)
					invoke BalanceUpdate AssetBookRel
						if (TransactionAmount 	> 0)
							invoked.DebitBalance 	-= TransactionAmount
						else
							invoked.CreditBalance 	-= TransactionAmount




		CreateFundTransactions is an Instance Action
			restricted
			Parameters
				AdjustmentItemsAdded 		is Numeric 3
				AdjustmentAmount			is an InternationalAmount
				AdjustmentItemTotal   		is an InternationalAmount
				PrmReportMode				is AlphaUpper size 1
				PrmAPC						is an AssetBatchUpdateResult
				LocalAssetBookTransaction	is an AssetBookTransaction
		        TransferFromAsset			is like Asset
		        PrmTransactionDate			is Date
				PrmAssetType				is an AssetType
				PrmToCompany				is like Company
				PrmBatchRelease				is Numeric 1

			Action Rules
				if (PrmTransactionDate entered)
					TransientTransactionDate	= PrmTransactionDate
				else
					TransientTransactionDate 	= TransactionDate
				if (Asset.UnreleasedAssetTransferRel exists)
					TransferFromAsset = Asset
				else
					if (Asset.ToAssetTransferRel exists)
						TransferFromAsset = first Asset.ToAssetTransferRel.Asset

				LocalAccountType 	= AssetAccountType
				if ((AssetProcess.Addition
				and LocalFundAccountType
				and AssetFundsRel exists)
				and (AssetAccountType.Clearing
				or AssetAccountType.Asset))
					initialize FundCount
					NumberOfFunds = instance count of AssetFundsRel
					LocalTransactionAmount		= TransactionAmount
					for each AssetFundsRel
						FundCount += 1
						LocalPercent					= each.PercentContribution
						if (NumberOfFunds = FundCount)
							EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
						else
							EachFundTransactionAmount 	= (TransactionAmount * LocalPercent)
							LocalCurrencyAmount 		= EachFundTransactionAmount
							EachFundTransactionAmount	= RoundedCurrencyAmount
							FundTransactionTotal 		+= EachFundTransactionAmount
						if (EachFundTransactionAmount != 0)
							invoke RestrictedCreate
								assign result to LocalAssetBookTransaction
								if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
									TransientExchangeDate								= TransactionDate
									LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
									include ConvertLocalDepreciationDifference
								else
									initialize BookDepreciationDifference

								invoked.TransactionAmount								= EachFundTransactionAmount
								if (Book.PostCurrency.Book)
									invoked.TransientBookCurrency						= Book.Currency
								else
									invoked.TransientBookCurrency						= Asset.Currency
								invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
								invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
								invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
								if (PrmTransactionDate entered)
									invoked.TransactionDate								= PrmTransactionDate
								invoked.DistributionAccount								= DistributionAccount
								invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
								if (each.AccountingUnit entered)
									invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
								if (each.Project entered)
									invoked.DistributionAccount.Project 				= each.Project
								if (each.FinanceDimension1 entered)
									invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
								if (each.FinanceDimension2 entered)
									invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
								if (each.FinanceDimension3 entered)
									invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
								if (each.FinanceDimension4 entered)
									invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
								if (each.FinanceDimension5 entered)
									invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
								if (each.FinanceDimension6 entered)
									invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
								if (each.FinanceDimension7 entered)
									invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
								if (each.FinanceDimension8 entered)
									invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
								if (each.FinanceDimension9 entered)
									invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
								if (each.FinanceDimension10 entered)
									invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
								fill in fields from this instance
							if (PrmReportMode entered
							and PrmReportMode = "Y"
							and PrmAPC entered)
								invoke Create AssetTransactionDetail
									invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
									invoked.AssetBatchUpdateResult					= PrmAPC
									invoked.AssetCompany							= Asset.Company
									invoked.Asset									= Asset
									invoked.Book									= Book
									invoked.AssetBookTransaction					= LocalAssetBookTransaction
									invoked.RecordType								= 1
							initialize LocalAssetBookTransaction
				else
					LocalAccountType = AssetAccountType
					if (!Asset.FundOverride
					and AdjustmentItemsAdded entered
					and LocalFundAccountType
					and AssetFundsRel exists)	




						if (AdjustmentItemsAdded = 1)
							NumberOfFunds 				= instance count of NewAssetItemFundsRel
							for each NewAssetItemFundsRel
								FundCount 				+= 1
								LocalAccountingEntity	= each.AccountingEntity
								LocalAccountingUnit		= each.AccountingUnit
								LocalFund 				= each.Fund
								LocalProject			= each.Project
								LocalFinanceDimension1	= each.FinanceDimension1
								LocalFinanceDimension2	= each.FinanceDimension2
								LocalFinanceDimension3	= each.FinanceDimension3
								LocalFinanceDimension4	= each.FinanceDimension4
								LocalFinanceDimension5	= each.FinanceDimension5
								LocalFinanceDimension6	= each.FinanceDimension6
								LocalFinanceDimension7	= each.FinanceDimension7
								LocalFinanceDimension8	= each.FinanceDimension8
								LocalFinanceDimension9 	= each.FinanceDimension9
								LocalFinanceDimension10 = each.FinanceDimension10
								LocalTransactionAmount	= each.TransactionAmount
								LocalPercent		 	= each.PercentContribution
								LocalFundAmount  		= each.TransactionAmount
								if (AssetAccountType.Clearing
								or AssetAccountType.Asset)
									EachFundTransactionAmount 		= LocalFundAmount
								else    									
									if (FundCount < NumberOfFunds)
										EachFundTransactionAmount 	= (TransactionAmount * LocalPercent)
										FundTransactionTotal		+= EachFundTransactionAmount
									else
										EachFundTransactionAmount 	= (TransactionAmount - FundTransactionTotal)
								if (AssetAccountType.Clearing)
									EachFundTransactionAmount 		= (EachFundTransactionAmount * -1)
								if (EachFundTransactionAmount != 0)
									invoke RestrictedCreate
										assign result to LocalAssetBookTransaction
										invoked.TransactionAmount								= EachFundTransactionAmount
										if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
											TransientExchangeDate								= TransactionDate
											LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
											include ConvertLocalDepreciationDifference
										else
											initialize BookDepreciationDifference
										invoked.TransactionAmount								= EachFundTransactionAmount

										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency						= Book.Currency
										else
											invoked.TransientBookCurrency						= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
										invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
										if (PrmTransactionDate entered)
											invoked.TransactionDate								= PrmTransactionDate
										invoked.DistributionAccount								= DistributionAccount
										invoked.DistributionAccount.ToAccountingEntity			= LocalAccountingEntity
										if (LocalAccountingUnit entered)
											invoked.DistributionAccount.AccountingUnit			= LocalAccountingUnit
										if (LocalProject entered)
											invoked.DistributionAccount.Project					= LocalProject
										if (LocalFinanceDimension1 entered)
											invoked.DistributionAccount.FinanceDimension1		= LocalFinanceDimension1
										if (LocalFinanceDimension2 entered)
											invoked.DistributionAccount.FinanceDimension2		= LocalFinanceDimension2
										if (LocalFinanceDimension3 entered)
											invoked.DistributionAccount.FinanceDimension3		= LocalFinanceDimension3
										if (LocalFinanceDimension4 entered)
											invoked.DistributionAccount.FinanceDimension4		= LocalFinanceDimension4
										if (LocalFinanceDimension5 entered)
											invoked.DistributionAccount.FinanceDimension5		= LocalFinanceDimension5
										if (LocalFinanceDimension6 entered)
											invoked.DistributionAccount.FinanceDimension6		= LocalFinanceDimension6
										if (LocalFinanceDimension7 entered)
											invoked.DistributionAccount.FinanceDimension7		= LocalFinanceDimension7
										if (LocalFinanceDimension8 entered)
											invoked.DistributionAccount.FinanceDimension8		= LocalFinanceDimension8
										if (LocalFinanceDimension9 entered)
											invoked.DistributionAccount.FinanceDimension9		= LocalFinanceDimension9
										if (LocalFinanceDimension10 entered)
											invoked.DistributionAccount.FinanceDimension10		= LocalFinanceDimension10
										fill in fields from this instance
									if (PrmReportMode entered
									and PrmReportMode = "Y"
									and PrmAPC entered)
										invoke Create AssetTransactionDetail
											invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
											invoked.AssetBatchUpdateResult						= PrmAPC
											invoked.AssetCompany								= Asset.Company
											invoked.Asset										= Asset
											invoked.Book										= Book
											invoked.AssetBookTransaction						= LocalAssetBookTransaction
											invoked.RecordType									= 1

						TotalNewFunds 					= sum NewAssetItemFundsRel.TransactionAmount
						if (AdjustmentItemsAdded > 1)
							initialize FundCount
							initialize FundTransactionTotal
							initialize TotalForLocalFund
							for each distinct FundFieldGroup in NewAssetItemFundsRel
								NumberOfFunds						+= 1
							for each distinct FundFieldGroup in NewAssetItemFundsRel
								FundCount 							+= 1
								LocalAccountingEntity				= each.AccountingEntity
								LocalAccountingUnit					= each.AccountingUnit
								if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
									LocalFund						= each.AccountingUnit
								else
									LocalFund						= each.FinanceDimension1
								LocalProject						= each.Project
						  		LocalFinanceDimension1				= each.FinanceDimension1
						  		LocalFinanceDimension2				= each.FinanceDimension2
						  		LocalFinanceDimension3				= each.FinanceDimension3
						  		LocalFinanceDimension4				= each.FinanceDimension4
						  		LocalFinanceDimension5				= each.FinanceDimension5
						   		LocalFinanceDimension6				= each.FinanceDimension6
						   		LocalFinanceDimension7				= each.FinanceDimension7
						  		LocalFinanceDimension8				= each.FinanceDimension8
						  		LocalFinanceDimension9				= each.FinanceDimension9
						  		LocalFinanceDimension10				= each.FinanceDimension10
								TotalForLocalFund 					= sum LocalItemFundsRel.TransactionAmount
						  		if (FundCount = NumberOfFunds)
						  			EachFundTransactionAmount		= TransactionAmount - FundTransactionTotal
						  		else
									EachFundTransactionAmount		= TransactionAmount * (TotalForLocalFund / TotalNewFunds)
									FundTransactionTotal			+= EachFundTransactionAmount
								if (EachFundTransactionAmount != 0)
									invoke RestrictedCreate
										assign result to LocalAssetBookTransaction
										invoked.TransactionAmount								= EachFundTransactionAmount
										if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
											TransientExchangeDate								= TransactionDate
											LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
											include ConvertLocalDepreciationDifference
										else
											initialize BookDepreciationDifference
										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency						= Book.Currency
										else
											invoked.TransientBookCurrency						= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
										invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
										if (PrmTransactionDate entered)
											invoked.TransactionDate								= PrmTransactionDate
										invoked.DistributionAccount								= DistributionAccount
										invoked.DistributionAccount.ToAccountingEntity			= LocalAccountingEntity
										if (LocalAccountingUnit entered)
											invoked.DistributionAccount.AccountingUnit			= LocalAccountingUnit
										if (LocalProject entered)
											invoked.DistributionAccount.Project					= LocalProject
										if (LocalFinanceDimension1 entered)
											invoked.DistributionAccount.FinanceDimension1		= LocalFinanceDimension1
										if (LocalFinanceDimension2 entered)
											invoked.DistributionAccount.FinanceDimension2		= LocalFinanceDimension2
										if (LocalFinanceDimension3 entered)
											invoked.DistributionAccount.FinanceDimension3		= LocalFinanceDimension3
										if (LocalFinanceDimension4 entered)
											invoked.DistributionAccount.FinanceDimension4		= LocalFinanceDimension4
										if (LocalFinanceDimension5 entered)
											invoked.DistributionAccount.FinanceDimension5		= LocalFinanceDimension5
										if (LocalFinanceDimension6 entered)
											invoked.DistributionAccount.FinanceDimension6		= LocalFinanceDimension6
										if (LocalFinanceDimension7 entered)
											invoked.DistributionAccount.FinanceDimension7		= LocalFinanceDimension7
										if (LocalFinanceDimension8 entered)
											invoked.DistributionAccount.FinanceDimension8		= LocalFinanceDimension8
										if (LocalFinanceDimension9 entered)
											invoked.DistributionAccount.FinanceDimension9		= LocalFinanceDimension9
										if (LocalFinanceDimension10 entered)
											invoked.DistributionAccount.FinanceDimension10		= LocalFinanceDimension10
										invoked.FundTransactionSequence							= FundTransactionSequence + 1
										fill in fields from this instance
									if (PrmReportMode entered
									and PrmReportMode = "Y"
									and PrmAPC entered)
										invoke Create AssetTransactionDetail
											invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
											invoked.AssetBatchUpdateResult							= PrmAPC
											invoked.AssetCompany									= Asset.Company
											invoked.Asset											= Asset
											invoked.Book											= Book
											invoked.AssetBookTransaction							= LocalAssetBookTransaction
											invoked.RecordType										= 1
									initialize LocalAssetBookTransaction

					else
						if (!Reference = "Transfer To"
						and !Reference = "Mass Transfer To")
							if ((!Asset.FundOverride
							and !AssetProcess.Transfer)
							or (Asset.FundOverride)
							or (AssetTransferRel exists
							and AssetTransferRel.FullOrPartial.Full))
								LocalAccountType = AssetAccountType
								if (AssetFundAllocationRequired
								and LocalFundAccountType
								and AssetFundsRel exists)
									initialize F1
									LocalTransactionAmount				= TransactionAmount
									FundCount							= instance count of AssetFundsRel
									for each AssetFundsRel
										F1 += 1
										EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
										LocalCurrencyAmount 			= EachFundTransactionAmount
										LocalAccountingEntity			= each.AccountingEntity
										LocalAccountingUnit				= each.AccountingUnit
										LocalFund						= each.Fund
										LocalFundPercent				= each.PercentContribution
										EachFundTransactionAmount		= RoundedCurrencyAmount
										if (F1 < FundCount)
											FundTransactionTotal		+= EachFundTransactionAmount
										else
											EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
										initialize LocalAssetBookTransaction
										if (EachFundTransactionAmount != 0)
											invoke RestrictedCreate

												assign result to AssetBookTransactionView
												invoked.TransactionAmount								= EachFundTransactionAmount
												if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
													TransientExchangeDate								= TransactionDate
													LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
													include ConvertLocalDepreciationDifference
												else
													initialize BookDepreciationDifference
												if (Book.PostCurrency.Book)
													invoked.TransientBookCurrency						= Book.Currency
												else
													invoked.TransientBookCurrency						= Asset.Currency
												invoked.TransactionAmount								= EachFundTransactionAmount
												invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
												invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
												invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
												if (PrmTransactionDate entered)
													invoked.TransactionDate								= PrmTransactionDate
												else
													invoked.TransactionDate									= TransactionDate
												invoked.DistributionAccount								= DistributionAccount
												invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
												if (each.AccountingUnit entered)
													invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
												if (each.Project entered)
													invoked.DistributionAccount.Project 				= each.Project
												if (each.FinanceDimension1 entered)
													invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
												if (each.FinanceDimension2 entered)
													invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
												if (each.FinanceDimension3 entered)
													invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
												if (each.FinanceDimension4 entered)
													invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
												if (each.FinanceDimension5 entered)
													invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
												if (each.FinanceDimension6 entered)
													invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
												if (each.FinanceDimension7 entered)
													invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
												if (each.FinanceDimension8 entered)
													invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
												if (each.FinanceDimension9 entered)
													invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
												if (each.FinanceDimension10 entered)
													invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
												fill in fields from this instance
												invoked.FundTransactionSequence							= FundTransactionSequence + 1
												fill in fields from this instance
											if (PrmReportMode entered
											and PrmReportMode = "Y"
											and PrmAPC entered)
												invoke Create AssetTransactionDetail
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.AssetBatchUpdateResult							= PrmAPC
													invoked.AssetCompany									= Asset.Company
													invoked.Asset											= Asset
													invoked.Book											= Book
													invoked.AssetBookTransaction							= AssetBookTransactionView.AssetBookTransaction
													invoked.RecordType										= 1


											if (Company.BalanceTransfers.Yes
											and (Reference = "Transfer From"
											or Reference = "Mass Transfer From"))
												if (Asset.AssetType.TransferOutATORel.DistributionAccount entered)
													LocalTransferOutAccount			= AssetTransferRel.AssetType.ATOTransferAccount
												else
													LocalCompany				= AssetTransferRel.Company
													LocalParentAssetType		= AssetTransferRel.AssetType.Type
													LocalTransferOutAccount  	= LocalCompanyParentAssetTypeRel.ATOTransferAccount
												invoke RestrictedCreate AssetBookTransaction
													assign result to TransferBalancingTransactionView
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.Book											= Book
													invoked.Company											= Company
													invoked.DistributionAccount								= AssetBookTransactionView.DistributionAccount
													invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferOutAccount
													invoked.TransactionAmount  								= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
													invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
													invoked.Reference        								= "Transfer From Balancing Entry"
													invoked.AssetProcess									= "ATB"
													invoked.AssetAccountType 								= "ATO"
													invoked.FundTransactionSequence							= FundTransactionSequence + 1
													fill in fields from AssetBookTransactionView.AssetBookTransaction

												LocalAssetBookTransaction = TransferBalancingTransactionView.AssetBookTransaction
												if (PrmReportMode entered
												and PrmReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetBookTransaction							= LocalAssetBookTransaction
														invoked.RecordType										= 1

										initialize LocalAssetBookTransaction
										initialize AssetBookTransactionView
										initialize TransferBalancingTransactionView


							else 									
								initialize F1
								LocalTransactionAmount				= TransactionAmount
								FundCount							= instance count of TransferAssetFundsRel
								if(LocalFundAccountType)
									for each TransferAssetFundsRel
										if (each.TransferredAssetItemsRel exists)
											F1 += 1
											EachFundTransactionAmount 		= (each.TransferFundPercentOfTotal * LocalTransactionAmount)
											LocalCurrencyAmount 			= EachFundTransactionAmount
											LocalAccountingEntity			= each.AccountingEntity
											LocalAccountingUnit				= each.AccountingUnit
											LocalFund						= each.Fund
											LocalFundPercent				= each.PercentContribution
											EachFundTransactionAmount		= RoundedCurrencyAmount
											if (F1 < FundCount)
												FundTransactionTotal		+= EachFundTransactionAmount
											else
												EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
											initialize LocalAssetBookTransaction
											invoke RestrictedCreate
												assign result to AssetBookTransactionView
												invoked.TransactionAmount								= EachFundTransactionAmount
												if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
													TransientExchangeDate								= TransactionDate
													LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
													include ConvertLocalDepreciationDifference
												else
													initialize BookDepreciationDifference
												invoked.TransactionAmount								= EachFundTransactionAmount
												if (Book.PostCurrency.Book)
													invoked.TransientBookCurrency						= Book.Currency
												else
													invoked.TransientBookCurrency						= Asset.Currency
												invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
												invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
												invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
												if (PrmTransactionDate entered)
													invoked.TransactionDate								= PrmTransactionDate
												invoked.DistributionAccount								= DistributionAccount
												invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
												if (each.AccountingUnit entered)
													invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
												if (each.Project entered)
													invoked.DistributionAccount.Project 				= each.Project
												if (each.FinanceDimension1 entered)
													invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
												if (each.FinanceDimension2 entered)
													invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
												if (each.FinanceDimension3 entered)
													invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
												if (each.FinanceDimension4 entered)
													invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
												if (each.FinanceDimension5 entered)
													invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
												if (each.FinanceDimension6 entered)
													invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
												if (each.FinanceDimension7 entered)
													invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
												if (each.FinanceDimension8 entered)
													invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
												if (each.FinanceDimension9 entered)
													invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
												if (each.FinanceDimension10 entered)
													invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
												invoked.FundTransactionSequence							= FundTransactionSequence + 1
												fill in fields from this instance

											LocalAssetBookTransaction = AssetBookTransactionView.AssetBookTransaction
											if (PrmReportMode entered
											and PrmReportMode = "Y"
											and PrmAPC entered)
												invoke Create AssetTransactionDetail
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.AssetBatchUpdateResult							= PrmAPC
													invoked.AssetCompany									= Asset.Company
													invoked.Asset											= Asset
													invoked.Book											= Book
													invoked.AssetBookTransaction							= LocalAssetBookTransaction
													invoked.RecordType										= 1
											initialize LocalAssetBookTransaction


											if (Company.BalanceTransfers.Yes
											and (Reference = "Transfer From"
											or Reference = "Mass Transfer From"))
												if (Asset.AssetType.TransferOutATORel.DistributionAccount entered)
													LocalTransferOutAccount  		= Asset.AssetType.ATOTransferAccount
												else
													LocalParentAssetType		= Asset.AssetType.Type
													LocalTransferOutAccount  	= ParentAssetTypeRel.ATOTransferAccount
												invoke RestrictedCreate AssetBookTransaction
													assign result to TransferBalancingTransactionView
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.Book											= Book
													invoked.Company											= Company
													invoked.DistributionAccount								= AssetBookTransactionView.DistributionAccount
													invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferOutAccount
													invoked.TransactionAmount  								= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
													invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
													invoked.Reference        								= "Transfer From Balancing Entry"
													invoked.AssetProcess									= "ATB"
													invoked.AssetAccountType 								= "ATO"
													invoked.FundTransactionSequence							= FundTransactionSequence + 1
													fill in fields from AssetBookTransactionView.AssetBookTransaction


												LocalAssetBookTransaction = TransferBalancingTransactionView.AssetBookTransaction
												if (PrmReportMode entered
												and PrmReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetBookTransaction							= LocalAssetBookTransaction
														invoked.RecordType										= 1

										initialize LocalAssetBookTransaction
										initialize AssetBookTransactionView
										initialize TransferBalancingTransactionView


						if (Reference = "Transfer To"
						or Reference = "Mass Transfer To")
							if (Asset.FundOverride)
								if (AssetTransferRel.FullOrPartial.Full)
									LocalTransferAsset					= Asset
								else
									LocalTransferAsset					= TransferFromAsset
							else
								LocalTransferAsset						= TransferFromAsset
							if (Reference = "Mass Transfer To")
								FundCount								= instance count of AssetFundsRel
							else
								FundCount								= instance count of FromAssetTransferFundsRel
							if (FundCount > 0)
								ToFundAllocationRequired 				= true
								LocalAccountType 						= AssetAccountType
								if (LocalFundAccountType)
									initialize F1
									LocalTransactionAmount				= TransactionAmount
									if (Reference = "Transfer To")
										for each FromAssetTransferFundsRel
											F1 += 1
											LocalPercent = each.PercentContribution
											EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
											LocalCurrencyAmount 			= EachFundTransactionAmount
											LocalAccountingEntity			= each.AccountingEntity
											LocalAccountingUnit				= each.AccountingUnit
											LocalFund						= each.Fund
											LocalFundPercent				= each.PercentContribution
											EachFundTransactionAmount		= RoundedCurrencyAmount
											if (F1 < FundCount)
												FundTransactionTotal		+= EachFundTransactionAmount
											else
												EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
											initialize LocalAssetBookTransaction
											if (EachFundTransactionAmount != 0)
												invoke RestrictedCreate
													assign result to AssetBookTransactionView
													invoked.TransactionAmount								= EachFundTransactionAmount
													if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
														TransientExchangeDate								= TransactionDate
														LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
														include ConvertLocalDepreciationDifference
													else
														initialize BookDepreciationDifference

													if (Book.PostCurrency.Book)
														invoked.TransientBookCurrency						= Book.Currency
													else
														invoked.TransientBookCurrency						= Asset.Currency
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
													invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
													if (PrmTransactionDate entered)
														invoked.TransactionDate								= PrmTransactionDate
													invoked.DistributionAccount								= DistributionAccount
													invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
													if (each.AccountingUnit entered)
														invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
													if (each.Project entered)
														invoked.DistributionAccount.Project 				= each.Project
													if (each.FinanceDimension1 entered)
														invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
													if (each.FinanceDimension2 entered)
														invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
													if (each.FinanceDimension3 entered)
														invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
													if (each.FinanceDimension4 entered)
														invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
													if (each.FinanceDimension5 entered)
														invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
													if (each.FinanceDimension6 entered)
														invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
													if (each.FinanceDimension7 entered)
														invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
													if (each.FinanceDimension8 entered)
														invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
													if (each.FinanceDimension9 entered)
														invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
													if (each.FinanceDimension10 entered)
														invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
													invoked.FundTransactionSequence							= FundTransactionSequence + 1
													fill in fields from this instance

												LocalAssetBookTransaction = AssetBookTransactionView.AssetBookTransaction
												if (PrmReportMode entered
												and PrmReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetBookTransaction							= LocalAssetBookTransaction
														invoked.RecordType										= 1



												if (Company.BalanceTransfers.Yes)

													if (AssetTransferRel.AssetTransferTo.ToAssetType.ATITransferAccount entered)
														LocalTransferInAccount 			= AssetTransferRel.AssetTransferTo.ToAssetType.ATITransferAccount
													else

														if (LocalTransferInAccount not entered)
															LocalCompany				= AssetTransferRel.AssetTransferTo.ToAssetCompany
															LocalParentAssetType		= AssetTransferRel.AssetTransferTo.ToAssetType
															LocalTransferInAccount  	= LocalCompanyParentAssetTypeRel.ATITransferAccount
														if (LocalTransferInAccount not entered)
															LocalTransferInAccount 		= Asset.AssetType.ATITransferAccount
													invoke RestrictedCreate AssetBookTransaction
														assign result to TransferBalancingTransactionView
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.Book											= Book
														invoked.Company											= Company
														invoked.DistributionAccount								= AssetBookTransactionView.DistributionAccount
														invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferInAccount
														invoked.TransactionAmount  								= EachFundTransactionAmount * -1
														invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
														invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
														invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
														invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
														invoked.Reference        								= "Transfer To Balancing Entry"
														invoked.AssetProcess									= "ATB"
														invoked.AssetAccountType 								= "ATI"
														invoked.FundTransactionSequence							= FundTransactionSequence + 1
														fill in fields from AssetBookTransactionView.AssetBookTransaction

													LocalAssetBookTransaction = TransferBalancingTransactionView.AssetBookTransaction
													if (PrmReportMode entered
													and PrmReportMode = "Y"
													and PrmAPC entered)
														invoke Create AssetTransactionDetail
															invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
															invoked.AssetBatchUpdateResult							= PrmAPC
															invoked.AssetCompany									= Asset.Company
															invoked.Asset											= Asset
															invoked.Book											= Book
															invoked.AssetBookTransaction							= LocalAssetBookTransaction
															invoked.RecordType										= 1
											initialize LocalAssetBookTransaction
											initialize AssetBookTransactionView
											initialize TransferBalancingTransactionView

									else
										for each AssetFundsRel
											F1 += 1
											LocalPercent = each.PercentContribution
											EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
											LocalCurrencyAmount 			= EachFundTransactionAmount
											LocalAccountingEntity			= each.AccountingEntity
											LocalAccountingUnit				= each.AccountingUnit
											LocalFund						= each.Fund
											LocalFundPercent				= each.PercentContribution
											EachFundTransactionAmount		= RoundedCurrencyAmount
											if (F1 < FundCount)
												FundTransactionTotal		+= EachFundTransactionAmount
											else
												EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
											initialize LocalAssetBookTransaction
											if (EachFundTransactionAmount != 0)
												invoke RestrictedCreate
													assign result to AssetBookTransactionView
													invoked.TransactionAmount								= EachFundTransactionAmount
													if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
														TransientExchangeDate								= TransactionDate
														LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
														include ConvertLocalDepreciationDifference
													else
														initialize BookDepreciationDifference

													if (Book.PostCurrency.Book)
														invoked.TransientBookCurrency						= Book.Currency
													else
														invoked.TransientBookCurrency						= Asset.Currency
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
													invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
													if (PrmTransactionDate entered)
														invoked.TransactionDate								= PrmTransactionDate
													invoked.DistributionAccount								= DistributionAccount
													invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
													if (each.AccountingUnit entered)
														invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
													if (each.Project entered)
														invoked.DistributionAccount.Project 				= each.Project
													if (each.FinanceDimension1 entered)
														invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
													if (each.FinanceDimension2 entered)
														invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
													if (each.FinanceDimension3 entered)
														invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
													if (each.FinanceDimension4 entered)
														invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
													if (each.FinanceDimension5 entered)
														invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
													if (each.FinanceDimension6 entered)
														invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
													if (each.FinanceDimension7 entered)
														invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
													if (each.FinanceDimension8 entered)
														invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
													if (each.FinanceDimension9 entered)
														invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
													if (each.FinanceDimension10 entered)
														invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
													invoked.FundTransactionSequence							= FundTransactionSequence + 1
													fill in fields from this instance

												LocalAssetBookTransaction = AssetBookTransactionView.AssetBookTransaction
												if (PrmReportMode entered
												and PrmReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetBookTransaction							= LocalAssetBookTransaction
														invoked.RecordType										= 1



												if (Company.BalanceTransfers.Yes)

													if (AssetTransferRel.AssetTransferTo.ToAssetType.ATITransferAccount entered)
														LocalTransferInAccount 			= AssetTransferRel.AssetTransferTo.ToAssetType.ATITransferAccount
													else

														if (LocalTransferInAccount not entered)
															LocalCompany				= AssetTransferRel.AssetTransferTo.ToAssetCompany
															LocalParentAssetType		= AssetTransferRel.AssetTransferTo.ToAssetType
															LocalTransferInAccount  	= LocalCompanyParentAssetTypeRel.ATITransferAccount
														if (LocalTransferInAccount not entered)
															LocalTransferInAccount 		= Asset.AssetType.ATITransferAccount
													invoke RestrictedCreate AssetBookTransaction
														assign result to TransferBalancingTransactionView
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.Book											= Book
														invoked.Company											= Company
														invoked.DistributionAccount								= AssetBookTransactionView.DistributionAccount
														invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferInAccount
														invoked.TransactionAmount  								= EachFundTransactionAmount * -1
														invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
														invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
														invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
														invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
														invoked.Reference        								= "Transfer To Balancing Entry"
														invoked.AssetProcess									= "ATB"
														invoked.AssetAccountType 								= "ATI"
														invoked.FundTransactionSequence							= FundTransactionSequence + 1
														fill in fields from AssetBookTransactionView.AssetBookTransaction

													LocalAssetBookTransaction = TransferBalancingTransactionView.AssetBookTransaction
													if (PrmReportMode entered
													and PrmReportMode = "Y"
													and PrmAPC entered)
														invoke Create AssetTransactionDetail
															invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
															invoked.AssetBatchUpdateResult							= PrmAPC
															invoked.AssetCompany									= Asset.Company
															invoked.Asset											= Asset
															invoked.Book											= Book
															invoked.AssetBookTransaction							= LocalAssetBookTransaction
															invoked.RecordType										= 1
											initialize LocalAssetBookTransaction
											initialize AssetBookTransactionView
											initialize TransferBalancingTransactionView



			Exit Rules
				if ((AssetFundAllocationRequired
				or (Reference = "Transfer To"
				and ToFundAllocationRequired))
				and LocalFundAccountType)
					invoke FundDelete



		RestrictedCreate is a Create Action
			restricted
			Action Rules

			Exit Rules
				if (TransactionAmount entered)
					AssetAccountType = AssetAccountType

		CreateTransferBalancingTransactions is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmAsset                    is an Asset
				TransferOutAccount          is like GeneralLedgerChartAccount
				TransferInAccount           is like GeneralLedgerChartAccount

			Action Rules
				invoke RestrictedCreate AssetBookTransaction
					invoked.TransactionAmount   					= TransactionAmount * -1
					invoked.AssetTransactionAmount.TransactionAmount 		= TransactionAmount * -1
					invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
					invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
					invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAccount 	= DistributionAccount
					invoked.AssetProcess			= "ATB"
					if (Reference = "Transfer From"
					or Reference = "Mass Transfer From")
						invoked.DistributionAccount.GeneralLedgerChartAccount = TransferOutAccount
						invoked.Reference         	= "Transfer From Balancing Entry"
						invoked.AssetAccountType  	= "ATO"
					if (Reference = "Transfer To"
					or Reference = "Mass Transfer To")
						invoked.DistributionAccount.GeneralLedgerChartAccount = TransferInAccount
						invoked.Reference         	= "Transfer To Balancing Entry"
						invoked.AssetAccountType	= "ATI"
					fill in fields from this instance

		FundDelete is a Delete Action
			restricted


		Release is an Instance Action
			restricted
			Parameters
				PrmAssetBatchUpdateResult 	is like AssetBatchUpdateResult
			Entrance Rules
				if (PostingDate not entered)
					if (UnreleasedAssetBookTransactionsRel exists)
						PostingDate 			= first UnreleasedAssetBookTransactionsRel.PostingDate
					else
						PostingDate				= TransactionDate
			Action Rules
				BatchUpdateResult		= PrmAssetBatchUpdateResult
				LocalBatchUpdateResult	= PrmAssetBatchUpdateResult
				EntryStatus 	= TransactionStatus


				AssetBookTransaction.TransactionStatus = "H"
				initialize I1
				I1 				= CurrentBookCalendarRel.NumberOfPeriodCloseRuns
				if (ProcessDate not entered)
					if (I1 entered
					and !AssetProcess.Disposal
					and !AssetProcess.ReAdd)
						ProcessDate				= CurrentBookCalendarRel.CurrentPeriodDate
					else
						ProcessDate				= PostingDate
				LocalPostingDate 				= PostingDate

				if (!BookCalendarsRel exists)

					YearEndDate = blank
				else
				if (YearEndDate not entered)
					YearEndDate					= BookCalendarsRel.YearEndDate

				if (EntryStatus = "U"
				and YearEndDate entered)
					invoke Update AssetPostingDateSummaryRel
						invoked.FinanceDimension1							= DistributionAccount.FinanceDimension1
						invoked.FinanceDimension2							= DistributionAccount.FinanceDimension2
						invoked.FinanceDimension3							= DistributionAccount.FinanceDimension3
						invoked.FinanceDimension4							= DistributionAccount.FinanceDimension4
						invoked.FinanceDimension5							= DistributionAccount.FinanceDimension5
						invoked.FinanceDimension6							= DistributionAccount.FinanceDimension6
						invoked.FinanceDimension7							= DistributionAccount.FinanceDimension7
						invoked.FinanceDimension8							= DistributionAccount.FinanceDimension8
						invoked.FinanceDimension9							= DistributionAccount.FinanceDimension9
						invoked.FinanceDimension10							= DistributionAccount.FinanceDimension10
				        invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals
						invoked.InputProcess = AssetProcess
						invoked.InputAmount = AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

				if (AssetProcess.Adjustment
				and UnreleaseAssetAdjustmentRel exists
				and (UnreleasedAssetBookAdjustmentRel.IsYearToDateDepreciationAdjusted
				or UnreleasedAssetBookAdjustmentRel.IsLifeToDateDepreciationAdjusted)
				and AssetBookRel.AdjustPriorYearHistoryTransactions.YesWithTransactions)
					LocalAdjustmentUpdate = true

				if	(AssetProcess.Impairment
				or 	(Book.Impairment
				and AssetProcess.Adjustment
				and (AssetAccountType.ImpairmentLoss
				or	AssetAccountType.ImpairmentWriteOff)))
					invoke GetDefaultAccounts AssetBookRel
					include CheckACM



				if (AssetAccountType.AccumulatedDepreciation
				and !AssetProcess.Reinstatement)

					include CheckACM
				if (AssetAccountType.DepreciationExpense
				and !AssetProcess.Reinstatement)
					if (Asset != SavedAsset)
						initialize LocalExpenseTransactionCreated
						initialize SavedAsset
					include UpdateBookHistory

				if (AssetAccountType.Asset
				and (AssetProcess.Addition
				or   AssetProcess.ReAdd
				or 	LocalAdjustmentUpdate))
					include CheckACM
					include UpdateBookHistory
				initialize LocalExpenseTransactionCreated
				initialize SavedAsset

		CreateHistory is an Instance Action
			restricted
			Parameters
				PrmAssetBatchUpdateResult 	is like AssetBatchUpdateResult
			Action Rules
				LocalAdjustmentUpdate = true
				LocalCreateHistory = true
				LocalBatchUpdateResult	= PrmAssetBatchUpdateResult
				include CheckACM
				include UpdateBookHistory

		UpdateTransactionDate is an Update Action
			restricted
			valid when (UpdatePostDateAllowed)
			Action Rules
				YearEndDate	= DerivedCalendarEndDate


		UpdateStatus is an Instance Action
			restricted
			Parameters
				PrmStatus			is a TransactionStatus
				PrmAssetBatchUpdateResult 	is like AssetBatchUpdateResult

			Entrance Rules
				EntryStatus = TransactionStatus
			Action Rules
				TransactionStatus	 		= PrmStatus
				BatchUpdateResult			= PrmAssetBatchUpdateResult
				if (YearEndDate entered)

					if (EntryStatus = "U")
						if (PrmStatus = "H"
						and !AssetProcess.Reinstatement)
							invoke Update AssetPostingDateSummaryRel
								invoked.FinanceDimension1							= DistributionAccount.FinanceDimension1
								invoked.FinanceDimension2							= DistributionAccount.FinanceDimension2
								invoked.FinanceDimension3							= DistributionAccount.FinanceDimension3
								invoked.FinanceDimension4							= DistributionAccount.FinanceDimension4
								invoked.FinanceDimension5							= DistributionAccount.FinanceDimension5
								invoked.FinanceDimension6							= DistributionAccount.FinanceDimension6
								invoked.FinanceDimension7							= DistributionAccount.FinanceDimension7
								invoked.FinanceDimension8							= DistributionAccount.FinanceDimension8
								invoked.FinanceDimension9							= DistributionAccount.FinanceDimension9
								invoked.FinanceDimension10							= DistributionAccount.FinanceDimension10
						        invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals

								invoked.InputProcess = AssetProcess
								invoked.InputAmount									= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

	  				else
	  					if (PrmStatus = "U")
							invoke Update AssetPostingDateSummaryRel
								invoked.Company										= Company
								invoked.Book										= Book
								invoked.YearEndDate									= LocalBookCalendarEndDate
								invoked.AssetTransactionSummary.DimensionCode		= DistributionAccount.DimensionCode
								invoked.AssetTransactionSummary.Ledger 				= DistributionAccount.Ledger
								invoked.AssetTransactionSummary.AccountingEntity	= DistributionAccount.ToAccountingEntity
								invoked.AssetTransactionSummary.AccountingUnit		= DistributionAccount.AccountingUnit
								invoked.AssetTransactionSummary.GeneralLedgerChartAccount = DistributionAccount.GeneralLedgerChartAccount
								invoked.AssetTransactionSummary.Project				= DistributionAccount.Project
								invoked.FinanceDimension1							= DistributionAccount.FinanceDimension1
								invoked.FinanceDimension2							= DistributionAccount.FinanceDimension2
								invoked.FinanceDimension3							= DistributionAccount.FinanceDimension3
								invoked.FinanceDimension4							= DistributionAccount.FinanceDimension4
								invoked.FinanceDimension5							= DistributionAccount.FinanceDimension5
								invoked.FinanceDimension6							= DistributionAccount.FinanceDimension6
								invoked.FinanceDimension7							= DistributionAccount.FinanceDimension7
								invoked.FinanceDimension8							= DistributionAccount.FinanceDimension8
								invoked.FinanceDimension9							= DistributionAccount.FinanceDimension9
								invoked.FinanceDimension10							= DistributionAccount.FinanceDimension10
						        invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals

								invoked.InputProcess = AssetProcess
								invoked.InputAmount									= (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1)


		RebuildSummaryBalances is an Instance Action
			restricted
			Action Rules
				invoke RebuildAssetTransactionSummary

		RebuildAssetTransactionSummary is a Set Action	
			restricted
			completion message is "Rebuild_of_Asset_Transaction_Summary_Balances_Complete"

			Parameters			
				PrmSetAction				is Boolean
				PrmAssetBatchUpdateResult	is like AssetBatchUpdateResult
				PrmCompany					is like AssetCompany
				PrmBook						is like Book
				PrmUpdateDateFlag			is Boolean

			Local Fields
				LocalInCalendarEndDate		is Date	
				LocalInCompany				is like Company	
				LocalInBook				 	is like Book	
				LocalInDimensionCode		is Alpha 70
				LocalInLedger				is like Ledger
				LocalInAccountingEntity		is like AccountingEntity
				LocalInAccountingUnit		is like AccountingUnit
				LocalInChartAccount			is like GeneralLedgerChartAccount
				LocalInProject				is like Project
				LocalInDim1					is like FinanceDimension1
				LocalInDim2 				is like FinanceDimension2
				LocalInDim3 				is like FinanceDimension3
				LocalInDim4 				is like FinanceDimension4
				LocalInDim5 				is like FinanceDimension5
				LocalInDim6 				is like FinanceDimension6
				LocalInDim7 				is like FinanceDimension7
				LocalInDim8 				is like FinanceDimension8
				LocalInDim9 				is like FinanceDimension9
				LocalInDim10 				is like FinanceDimension10
				LocalInTransactionAmount	is an InternationalAmount	

			Instance Selection
				where ((PrmUpdateDateFlag
				and Company = PrmCompany
				and Book = PrmBook
				and YearEndDate entered)
				or	(TransactionStatus = "H"
					and YearEndDate entered
					and !PrmSetAction
					and !PrmUpdateDateFlag)
				or (PrmSetAction
					and BatchUpdateResult = PrmAssetBatchUpdateResult))

			Sort Order
                Company
                Book
                DistributionAccount.ToAccountingEntity
                DistributionAccount.AccountingUnit
                DistributionAccount.GeneralLedgerChartAccount
                DistributionAccount.Project
				DistributionAccount.FinanceDimension1
				DistributionAccount.FinanceDimension2
				DistributionAccount.FinanceDimension3
				DistributionAccount.FinanceDimension4
				DistributionAccount.FinanceDimension5
				DistributionAccount.FinanceDimension6
				DistributionAccount.FinanceDimension7
				DistributionAccount.FinanceDimension8
				DistributionAccount.FinanceDimension9
				DistributionAccount.FinanceDimension10
				YearEndDate

			Accumulators
				AdditionSummaryBalance
				AdjustmentSummaryBalance
				TransferSummaryBalance
				DisposalSummaryBalance
				ReinstatementSummaryBalance
				DepreciationSummaryBalance
				RevalueSummaryBalance
				RevalueAmortizationSummaryBalance
				ImpairmentSummaryBalance
				ImpairmentAmortizationSummaryBalance
				TransferBalancingSummaryBalance
				TransactionSummaryBalance

			Action Rules
				Set Rules
				YearEndDate Set Rules
					Entrance Rules













						LocalInLedger				= DistributionAccount.Ledger
						LocalInAccountingEntity		= DistributionAccount.ToAccountingEntity
						LocalInAccountingUnit		= DistributionAccount.AccountingUnit
						LocalInChartAccount			= DistributionAccount.GeneralLedgerChartAccount
						LocalInProject				= DistributionAccount.Project
						LocalInDim1					= DistributionAccount.FinanceDimension1
						LocalInDim2 				= DistributionAccount.FinanceDimension2
						LocalInDim3 				= DistributionAccount.FinanceDimension3
						LocalInDim4 				= DistributionAccount.FinanceDimension4
						LocalInDim5 				= DistributionAccount.FinanceDimension5
						LocalInDim6 				= DistributionAccount.FinanceDimension6
						LocalInDim7 				= DistributionAccount.FinanceDimension7
						LocalInDim8 				= DistributionAccount.FinanceDimension8
						LocalInDim9 				= DistributionAccount.FinanceDimension9
						LocalInDim10 				= DistributionAccount.FinanceDimension10

					Exit Rules
						LocalCompany				= Company
						LocalBook					= Book
						LocalLedger					= LocalInLedger
						LocalToAccountingEntity		= LocalInAccountingEntity
						LocalAccountingUnit			= LocalInAccountingUnit
						LocalChartAccount 			= LocalInChartAccount
						LocalProject				= LocalInProject
						LocalDimensionCode			= LocalInDimensionCode
						LocalDistributionAccount	= DistributionAccount
						LocalBookCalendarEndDate	= YearEndDate
						invoke Update LocalAssetTransactionSummaryRel	
							invoked.Company										= LocalCompany
							invoked.Book										= LocalBook
							invoked.AssetTransactionSummary.Ledger				= LocalLedger
							invoked.AssetTransactionSummary.AccountingEntity	= LocalToAccountingEntity
							invoked.AssetTransactionSummary.AccountingUnit		= LocalAccountingUnit
							invoked.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalChartAccount
							invoked.AssetTransactionSummary.Project				= LocalProject
							invoked.AssetTransactionSummary.DimensionCode		= LocalDimensionCode
							invoked.YearEndDate 								= LocalBookCalendarEndDate
							invoked.FinanceDimension1							= LocalInDim1
							invoked.FinanceDimension2							= LocalInDim2
							invoked.FinanceDimension3							= LocalInDim3
							invoked.FinanceDimension4							= LocalInDim4
							invoked.FinanceDimension5							= LocalInDim5
							invoked.FinanceDimension6							= LocalInDim6
							invoked.FinanceDimension7							= LocalInDim7
							invoked.FinanceDimension8							= LocalInDim8
							invoked.FinanceDimension9							= LocalInDim9
							invoked.FinanceDimension10							= LocalInDim10
					        invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals


							if (!PrmSetAction)
								invoked.AdditionBalance						= AdditionSummaryBalance
								invoked.AdjustmentBalance					= AdjustmentSummaryBalance
								invoked.TransferBalance						= TransferSummaryBalance
								invoked.DisposalBalance						= DisposalSummaryBalance
								invoked.ReinstatementBalance				= ReinstatementSummaryBalance
								invoked.DepreciationBalance					= DepreciationSummaryBalance
								invoked.RevalueBalance						= RevalueSummaryBalance
								invoked.RevalueAmortizationBalance			= RevalueAmortizationSummaryBalance
								invoked.ImpairmentBalance					= ImpairmentSummaryBalance
								invoked.ImpairmentAmortizationBalance		= ImpairmentAmortizationSummaryBalance
								invoked.TransferBalancingBalance			= TransferBalancingSummaryBalance
								invoked.TransactionBalance					= TransactionSummaryBalance
							else
								invoked.DepreciationBalance 				+= DepreciationSummaryBalance
								invoked.RevalueAmortizationBalance 			+= RevalueAmortizationSummaryBalance
								invoked.ImpairmentAmortizationBalance 		+= ImpairmentAmortizationSummaryBalance
								invoked.TransactionBalance 					+= TransactionSummaryBalance




				Instance Rules
					LocalInDimensionCode = DistributionAccount.DimensionCode

					if (!PrmSetAction)
						if (AssetProcess.Addition)
							AdditionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Adjustment)
							AdjustmentSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Transfer)
							TransferSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Disposal or AssetProcess.Reinstatement)
							DisposalSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ReAdd)
							ReinstatementSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Depreciation)
							DepreciationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Revalue)
							RevalueSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.RevalueAmortization)
							RevalueAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Impairment)
							ImpairmentSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ImpairmentAmortization)
							ImpairmentAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.TransferBalancing)
							TransferBalancingSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
							AdditionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
					else
						if (AssetProcess.Depreciation)
							DepreciationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.RevalueAmortization)
							RevalueAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ImpairmentAmortization)
							ImpairmentAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

					TransactionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount


		AssetReleaseTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)
			Action Rules
				invoke PostRelease.Release Asset

		AssetResetTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)
			Parameters
				EnablePopUpActionform is Numeric 1  
			Action Rules
				invoke PostRelease.ResetTransfer Asset





		UpdatePostingDate is a Set Action
			default label is untranslatable
			restricted
			run in background
        	Instance Selection
        		where (PostingDate 	= blank)
			Action Rules
				Instance Rules
					PostingDate	= TransactionDate






		UpdateYearEndDate is a Set Action
			restricted
        	Instance Selection
        		where (YearEndDate 	= blank)
			Action Rules
				Instance Rules
					YearEndDate = DerivedCalendarEndDate




		DeleteAssetTransactions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmCompany						is like Company
				PrmAsset						is an Asset
				PrmBook							is a Book

			Instance Selection
				where(FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	  Book						= PrmBook
				and   Company 					= PrmCompany
				and   Asset						= PrmAsset)

			Action Rules
				Instance Rules
					invoke Delete


		PurgeAssetBookTransactions is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType

			Instance Selection
				include deleted records
				where (Company = PrmCompany
				and    (PrmFromDate not entered or TransactionDate >= PrmFromDate)
				and    (PrmToDate not entered or TransactionDate <=	PrmToDate)
				and    (PrmAssetGroup not entered or Asset.AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or Asset.AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or Asset.AssetType.SubType = PrmAssetSubType))

			Action Rules
				Instance Rules
					invoke Purge

		PurgeDisposedAssetBookTransactions is a Set Action
			restricted
			Parameters
				PrmCompany					is an AssetCompany
				PrmAsset					is an Asset
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmLeaseCompany				is like GeneralLedgerCompany
				PrmLocationName				is like AssetLocation
				PrmDivision					is like AssetDivision
				PrmAssetGroup				is like AssetGroup
				PrmFromDate					is Date
				PrmToDate					is Date

			Instance Selection
				include deleted records
				where (Asset.Company = PrmCompany
				and   (PrmAsset not entered or (Asset = PrmAsset and Asset.Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup))
				and   (PrmLeaseCompany not entered or Asset.AssetLease.LeaseCompany = PrmLeaseCompany)
				and   (PrmLocationName not entered or Asset.AssetLocation = PrmLocationName)
				and   (PrmDivision not entered or Asset.AssetDivision = PrmDivision)
				and   (PrmAssetGroup not entered or Asset.AssetGroup = PrmAssetGroup)
				and   (PrmFromDate not entered or Asset.AssetDisposalDate >= PrmFromDate)
				and   (PrmToDate not entered or Asset.AssetDisposalDate <= PrmToDate)
				and   Asset.Status.Disposed)

			Action Rules
				Instance Rules
					invoke Purge


		AssetBookTransactionsPurge is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmAsset								is like Asset
				PrmBook									is like Book
				PrmPurgeOption					is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
		        PrmCompany                 				is an AssetCompany



			Instance Selection
				include deleted records
				where (FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    Company									= PrmCompany
				and	   Book										= PrmBook
				and   (PrmAsset not entered
				or 	   Asset									= PrmAsset))

			Action Rules
				Set Rules
					Exit Rules
				Instance Rules
					if(PrmPurgeOption.PurgeRecords)
						if (PrmAsset entered
						and IsHistoryOrReleased)
							if (AssetPostingDateSummaryRel exists)
								invoke Update AssetPostingDateSummaryRel
									invoked.InputProcess = AssetProcess
									invoked.InputAmount = (-1 * AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
						invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AM_ST"

				constraint (RepSet.ReplicationIsValid)
					"A\M_ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet

		UpdateTransDate is a Set Action
			restricted
			Parameters
				PrmCompany		is an AssetCompany
				PrmBook			is a Book
				PrmYearBeginDate	is Date
				PrmYearEndDate		is Date
				PrmQueue			is Numeric 2
				PrmThread			is Numeric 2
			Instance Selection
				where (Book = PrmBook
				and   Company = PrmCompany
				and   (PostingDate >= PrmYearBeginDate
				and   PostingDate <= PrmYearEndDate)
				and   YearEndDate != PrmYearEndDate
				and   (PrmQueue               <=1
                or  Asset % PrmQueue        = PrmThread))
			Action Rules
				Instance Rules
					YearEndDate = PrmYearEndDate

		UpdateCurrentYearTransDate is a Set Action
			restricted
			Parameters
				PrmCompany		is an AssetCompany
				PrmBook			is a Book
				PrmYearBeginDate	is Date
				PrmYearEndDate		is Date
			Instance Selection
				where (Book = PrmBook
				and   Company = PrmCompany
				and   (PostingDate >= PrmYearBeginDate
				and   PostingDate <= PrmYearEndDate))
			Action Rules
				Set Rules
					Entrance Rules
						LocalBeginDate	= PrmYearBeginDate
						LocalYearEndDate	= PrmYearEndDate
						LocalCompany		= PrmCompany
						LocalBook			= PrmBook
						invoke Delete SummaryRecordsRel
					Exit Rules
						invoke RebuildAssetTransactionSummary
							invoked.PrmCompany	= PrmCompany
							invoked.PrmBook		= PrmBook
							invoked.PrmUpdateDateFlag	= true
				Instance Rules
					YearEndDate = PrmYearEndDate
