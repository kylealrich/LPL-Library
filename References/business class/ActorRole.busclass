ActorRole is a BusinessClass
    owned by security
    prefix is ACTRL
    stored in environment
    framework type is Security 

    Ontology
        symbolic key is ActorRole 

    Patterns
        implements CRUD
        implements SecurityCache
        disable AuditIndex
        implements AuditLogEntryActions

	Derived Fields
		SecUserMasterBOD is a NativeField	
			type is Text
            default label is "SecurityUserMasterBOD"
		
		IsSecIFSUserProvEnabled is a NativeField
			type is Boolean
            default label is "SecurityIFSUserProvisioningEnabled"
            
    	IsServerOnCloud is a NativeField
			type is Boolean
			default label is "ServerOnCloud"
				
	Conditions
	    UpdatedLastFourteenDays
            when (current timestamp - update stamp <= 1209600)  

        RecentConfigurationChanges
            when (UpdatedLastFourteenDays)

        ActorIsUpdateActor
            when (authenticated actor = update stamp.actor)

	Audit Entry Rules
		if (IsSecIFSUserProvEnabled
			and (action = "Create"
			or action = "Update"
			or action = "Delete"
			or action = "AssignExistingRoleToActor")
			and Actor.IsMingleUser
			and not Actor.IsActorDisabled
			and not audit period.Future
			and not action tag.IFS
			and (not IsServerOnCloud or (IsServerOnCloud and not com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(Actor, "lawson")))
			and SecurityBodUpdateRel not exist)
				invoke Create SecurityBodUpdate
					invoked.SecurityBodUpdate = Actor
					
	Apply Pending Effective Rules
		if (IsSecIFSUserProvEnabled
			and (action = "Create"
			or action = "Update"
			or action = "Delete"
			or action = "AssignExistingRoleToActor")
			and Actor.IsMingleUser
			and not Actor.IsActorDisabled
			and not action tag.IFS
			and (not IsServerOnCloud or (IsServerOnCloud and not com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(Actor, "lawson")))
			and SecurityBodUpdateRel not exist)
				invoke Create SecurityBodUpdate
					invoked.SecurityBodUpdate = Actor
			
    Actions
        Create is an Action
			Exit Rules
				invoke FireConfigurableFeatureChangeEvent ActorRole.Role 
					invoked.Type = 1
					invoked.ActorId = Actor
					
        Update is an Action




					
        Delete is an Action
        	Entrance Rules				 
				if (ProxyRoleRel exists)
					confirmation required
						"ProxyRoleExists.AreYouSureYouWantToDelete?"
        	Exit Rules
    			invoke FireConfigurableFeatureChangeEvent ActorRole.Role 
					invoked.Type = 3
					invoked.ActorId = Actor
					
        AssignExistingRoleToActor is a Create Action
        	Exit Rules
    			invoke FireConfigurableFeatureChangeEvent ActorRole.Role 
					invoked.Type = 1
					invoked.ActorId = Actor
				
    Relations
        RoleSecurityClassRel
            one-to-many relation to RoleSecurityClass
            Field Mapping uses symbolic key
                related.Role  = ActorRole.Role

        SecurityBodUpdateRel
        	one-to-one relation to SecurityBodUpdate
        	Field Mapping uses symbolic key
        		related.SecurityBodUpdate = Actor
        		
        ProxyRoleRel
			one-to-many relation to ProxyRole
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ActorRole.Role = ActorRole.Role
				and related.Actor = Actor)
        
    Sets
        ByActorAndRole
            Sort Order
                Actor
                ActorRole.Role

        ByRoleAndActor
            Sort Order
                ActorRole.Role
                Actor

		ByRecentlyUpdated
			Sort Order
			    update stamp
                Actor
                ActorRole.Role
