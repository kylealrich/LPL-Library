WorkOrderItemBinLotSerial is a BusinessClass
    owned by wo
    prefix is WOD
    classic name is WODETAIL

    Ontology
        symbolic key is WorkOrderItemBinLotSerial
            classic set name is WODNEWPRIMARYINDEX
            classic name for WorkOrderItemBinLotSerial.UnitOfMeasure is UOM
            classic name for InventoryLocation is LOCATION
            classic name for WorkOrder is WORK-ORDER
            classic name for WorkOrderItem is COMPONENT-SEQ

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        UOMMultiplier
            classic name is UOM-MULT
			protected
        ActualQuantity				is a Quantity
        	classic name is ACTUAL-QTY
        ActualCatchWeightQuantity   is a Quantity
        	classic name is ACT-CTW-QTY
        Quantity
        CatchWeightQuantity			is a Quantity
            classic name is CATCH-WT-QTY
        KitSerial					is an ItemSerialNumber
        WasteQuantity               is a Quantity
        	classic name is WASTE-QTY
        WasteCatchWeightQuantity    is a Quantity
        	classic name is WST-CTW-QTY
        Item
        	protected
        LotExpirationDate			is Date
            classic name is EXPIRE-DATE

	Derived Fields 
		
		FinishedGoodMessage 					is a MessageField
			restricted
			"CannotReverse;NotAllFinishedGoodDetailAvailable"
		ByProductMessage						is a MessageField
			restricted
			"CannotReverse;NotAllByproductDetailAvailable"
		DerivedMessageForNonAvailableDetail		is a DerivedField
			type is Alpha size up to 200	
			restricted
			if (WorkOrderItemBinLotSerial.DetailType.FinishedGood)
				return FinishedGoodMessage
			else
				if (ForDetailTypeByproduct)
					return ByProductMessage
		DerivedDetailType                    is a DerivedField
            type is Alpha size 13
            if (WorkOrderItem exists)
                return "Component"
            else
            if (WorkOrderByproduct exists)
                return "Byproduct"
            else
            	return "FinishedGood"
		DerivedItem                    is a DerivedField
            type is AlphaUpper 32
            if (WorkOrderItem exists)
                return WorkOrderItem.Item
            else
            if (WorkOrderByproduct exists)
                return WorkOrderByproduct.Item
            else
            	return WorkOrder.Item
		DerivedTotalDetailCatchWeightQuantity	is a DerivedField
			type is like Quantity
			restricted
			return sum ComponentDetailsRel.CatchWeightQuantity
	
	Local Fields
		ItemLocation
		LocalConvertedQuantity 				is like Quantity 
		UOMCalculation
		TempCounter  						is Numeric 2
		LocalTotalDetailQuantity     	 	is like Quantity  
		LocalInputQuantity           	 	is like Quantity
		LocalUOM  					 	 	is a UnitOfMeasure
		LocalAllocatedDetailQuantity	 	is like Quantity
		LocalSerialNumber				 	is like ItemSerialNumber
	    LocalDetailType    					is AlphaUpper size 1
            States
                Byproduct    value is "B"
                Component    value is "C"
                FinishedGood value is "F"
		SerialActualQuantity				is Boolean
		SerialWasteQuantity					is Boolean
		TotalAllocatedDetailQuantity		is like Quantity
		LocalQuantity						is like Quantity
		LocalActualQuantity					is like Quantity
		LocalWasteQuantity					is like Quantity
		LocalActualCatchWeightQuantity		is like Quantity
		LocalWasteCatchWeightQuantity		is like Quantity
		ReverseByWorkOrder					is Boolean
		LocalTotalDetailCatchWeightQuantity	is like Quantity
		LocalSecondaryQuantity				is like Quantity
		LocalCatchWeightQuantity			is like Quantity

	Context Fields
		ContextSerial						is an ItemSerialNumber
		DateUsedRange				 		is a DateRange

	Transient Fields
    	TransientAvailableQuantity   		is a Quantity
    		derive value from StockOnHandDetailRel.Available  
    	AutoAssignQuantity           		is a Quantity
    	TransientDetailType					is AlphaUpper size 1
    		derive value from DerivedDetailType
    		States
                    Byproduct    value is "B"
                    Component    value is "C"
                    FinishedGood value is "F"

    Conditions
    
    	RecordExists
			restricted	
			when (WorkOrderItemBinLotSerial exists)

        IsFinishedGoodSerial
        	restricted
            when (WorkOrderItemBinLotSerial.DetailType.FinishedGood
            and   WorkOrderItemBinLotSerial.Serial entered)
            
		IsSerial
			restricted
            when (WorkOrderItemBinLotSerial.Serial entered)
            
        IsLot
        	restricted
            when (WorkOrderItemBinLotSerial.Lot entered
            or    WorkOrderItemBinLotSerial.Sublot entered)
		
		IsLotTracked
            when (ItemLocation.LotTracked.LotRequiredAtIssue
            or    ItemLocation.LotTracked.LotRequiredAtReceipt)



		
		IsSerialTracked
            when (ItemLocation.IsSerialTracked)
		
		IsBinTrackedAndNotLotOrSerialTracked
			restricted
            when (ItemLocation.BinTracked
            and  !ItemLocation.IsSerialTracked
            and  !ItemLocation.IsLotTracked)
        
        ForProductionFeedback
        	restricted
			when (WorkOrderItemBinLotSerial.DetailType.FinishedGood)
		
		ForDetailTypeComponent	
			restricted														
			when (WorkOrderItemBinLotSerial.DetailType.Component)
			
		ForDetailTypeByproduct
			restricted
			when (WorkOrderItemBinLotSerial.DetailType.Byproduct)
			
		IsSerialTrackedAtIssue
			restricted
			when (ItemLocation.SerialTracked.SerialRequiredAtIssue)
			
		IsLotTrackedAndNotSerialTracked
			restricted
			when (ItemLocation.IsLotTracked
			and ItemLocation.IsNotSerialTracked)
        
		IsLotTrackedAtReceipts
			restricted
        	when (ItemLocation.LotTracked.LotRequiredAtReceipt)
        
        IsSerialTrackedAtReceipts
        	restricted
        	when (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
        	
        IsLotRequiredAtIssue
        	restricted
        	when (ItemLocation.LotTracked.LotRequiredAtIssue)
        	
        IsBinTracked
        	restricted
        	when (ItemLocation.BinTracked)

		IsCatchWeightItem
			restricted
			when (Item.IsCatchWeightItem)

        IsActualCatchWeightQuantityRequired
			restricted
			when (IsCatchWeightItem 
			and   ActualQuantity entered)

		IsWasteCatchWeightQuantityRequired
			restricted
			when (IsCatchWeightItem 
			and   WasteQuantity entered)

		IsWasteQuantityRequired
			restricted
			when (IsCatchWeightItem 
			and   WasteCatchWeightQuantity entered)

		IsCatchWeightQuantityEntered
			restricted
			when (CatchWeightQuantity entered)

		IsCatchWeightQuantityRequired
			restricted
			when (IsCatchWeightItem 
			and   Quantity entered)

		IsActualQuantityRequired
			restricted
			when (ActualCatchWeightQuantity entered
			and   not SerialWasteQuantity)

		IsUnitOfMeasureIsRequired
			restricted
			when (WorkOrderItemBinLotSerial.UnitOfMeasure not entered
			and   not IsSerialTracked)
			
		IsProductionFeedabckInProcess
			restricted
			when (WorkOrder.ProductionFeedbackStatus.InProcess)			

		IsPickingFeedbackNotStartedOrCompleted
			restricted
			when (WorkOrder.PickingFeedbackStatus.NotStarted
			or    WorkOrder.PickingFeedbackStatus.Complete)
 
		IsTrackedInAndAlternateStockUOM
			restricted
			when (ItemUOMRel.TrackedIn
			and   ItemUOMRel.ItemUOM.UnitOfMeasure != Item.StockUOM)             


		IsOnlySerialTracked
			restricted
			when (ItemLocation.IsSerialTracked
			and  !ItemLocation.BinTracked)
		
		IsPlainCatchWeightItem
			restricted
			when (IsCatchWeightItem
			and  !ItemLocation.BinTracked
			and  !IsLotTracked
			and  !IsSerialTracked
			and  !IsTrackedInAndAlternateStockUOM)
			
		IsPlainItem
			restricted
			when (!ItemLocation.BinTracked
			and   !IsLotTracked
			and   !IsSerialTracked
			and   !Item.IsTrackedInAlternateUOM)

		DetailTracked
			restricted
			when (!IsPlainItem)

		IsPickingFeedbackInProcess
			restricted
			when (WorkOrderItem.IsPickingFeedbackInProcess)
			
		IsProductionFeedbackInProcess
			restricted
			when (WorkOrderItem.IsProductionFeedbackInProcess)

 		WithinDateUsed
 			restricted
 			when (DateUsedRange not entered
			or	 WorkOrder.EndDate within DateUsedRange)

		IsValidForSerialCrossReference
			restricted
			when (IsProductionFeedabckInProcess
			and   WorkOrderItemBinLotSerial.DetailType.FinishedGood)
			
    Relations
    	ItemLocationRel
    		one-to-one relation to ItemLocation
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.InventoryLocation	= InventoryLocation
    			related.Item				= WorkOrder.Item
    			
       	ItemUOMRel
			one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.ItemGroup
    			related.Item			= Item
    			related.UnitOfMeasure 	= WorkOrderItemBinLotSerial.UnitOfMeasure		

        ItemSerialNumberRel
       		one-to-one relation to ItemSerialNumber
            Field Mapping uses symbolic key
            	related.Company                         = Company
            	related.Item                            = Item
            	related.ItemSerialNumber                = LocalSerialNumber
         
		StockOnHandDetailRel
            one-to-one relation to StockOnHandDetail
            Field Mapping uses symbolic key
                related.Company                         = Company
                related.InventoryLocation               = InventoryLocation
                related.Item                            = Item
                related.StockOnHandDetail.UnitOfMeasure = LocalUOM
                related.StockOnHandDetail.Lot           = WorkOrderItemBinLotSerial.Lot
                related.StockOnHandDetail.Sublot        = WorkOrderItemBinLotSerial.Sublot
                related.StockOnHandDetail.Bin           = WorkOrderItemBinLotSerial.Bin

		ComponentItemsHelperListRel
			one-to-many relation to WorkOrderItemBinLotSerial
			Field Mapping uses Set1
				related.Company							= Company
                related.InventoryLocation				= InventoryLocation
                related.WorkOrder						= WorkOrder
			Instance Selection
				where (related.WorkOrderItemBinLotSerial.DetailType.Component
				and    related.KitSerial not entered)

		CrossReferencedComponentItemsRel	
			one-to-many relation to WorkOrderItemBinLotSerial
			Field Mapping uses Set1
				related.Company							= Company
                related.InventoryLocation				= InventoryLocation
                related.WorkOrder						= WorkOrder
			Instance Selection
				where (related.WorkOrderItemBinLotSerial.DetailType.Component
				and    related.KitSerial = ContextSerial)
				
		ComponentDetailsRel
			one-to-many relation to WorkOrderItemBinLotSerial
			Field Mapping uses Set1
				related.Company							= Company
                related.InventoryLocation				= InventoryLocation
                related.WorkOrder						= WorkOrder
			Instance Selection
				where (related.WorkOrderItem				= WorkOrderItem
				and    related.WorkOrderItemBinLotSerial	!= WorkOrderItemBinLotSerial)
						
        CrossReferencedItemSerialNumberRel
       		one-to-one relation to ItemSerialNumber
            Field Mapping uses symbolic key
            	related.Company                         = Company
            	related.Item                            = WorkOrderItem.Item
            	related.ItemSerialNumber                = WorkOrderItemBinLotSerial.Serial
            	
        WorkOrderItemSerialNumberRel
       		one-to-many relation to ItemSerialNumber
            Field Mapping uses symbolic key
            	related.Company                         = Company
            	related.Item                            = DerivedItem
            	related.ItemSerialNumber                = WorkOrderItemBinLotSerial.Serial

    Sets
        Set1
            Sort Order
                Company
                InventoryLocation
                WorkOrder
                WorkOrderItemBinLotSerial.DetailType
                WorkOrderItem
                WorkOrderItemBinLotSerial.Bin
                WorkOrderItemBinLotSerial.Lot
                WorkOrderItemBinLotSerial.Sublot
                WorkOrderItemBinLotSerial.Serial
                WorkOrderItemBinLotSerial.UnitOfMeasure
                WorkOrderByproduct
		
	Rule Blocks
		ConversionOfQuantityToStock
 			initialize UOMCalculation
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.InputUOM                         = WorkOrderItemBinLotSerial.UnitOfMeasure
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			LocalConvertedQuantity						    = UOMCalculation.OutputQuantity
	
		CreateOrUpdateItemLot
			if (WorkOrderItemBinLotSerial.Lot not exists)
				invoke Create ItemLot
					invoked.Company				= Company
					invoked.InventoryLocation	= InventoryLocation
					invoked.Item				= Item
					invoked.ItemLot				= WorkOrderItemBinLotSerial.Lot
					invoked.LotExpirationDate	= LotExpirationDate
			else
				if (LotExpirationDate entered)
					invoke Update WorkOrderItemBinLotSerial.Lot
						invoked.LotExpirationDate   = LotExpirationDate
						
		ValidatePickingFeedback
			constraint (WorkOrder.ProductionFeedbackStatus.NotStarted)             
				"ProductionFeedbackBegunPickingNotAllowed"                                           




			constraint (WorkOrder.IsInProduction)
				"WorkOrderMustBeInInproductionStatus"                                                 

			constraint (!WorkOrder.IsPickingFeedbackFinishedOrComplete)
				"WorkOrderPickingFeedbackHasBeenCompleted"                                            
			
			if (IsSerialTracked)
				Quantity = 1
			
			if (Quantity changed
			and Quantity != old Quantity)	
				TotalAllocatedDetailQuantity = Quantity - old Quantity
			else
				TotalAllocatedDetailQuantity = Quantity
				
			if (!IsSerialTracked)
				if (IsTrackedInAndAlternateStockUOM
				or  WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM)
					LocalUOM = WorkOrderItemBinLotSerial.UnitOfMeasure
				else
					LocalUOM = Item.StockUOM
					LocalInputQuantity = TotalAllocatedDetailQuantity
					include ConversionOfQuantityToStock
					TotalAllocatedDetailQuantity = LocalConvertedQuantity
			else
			if (IsSerialTracked
			and IsBinTracked)
				LocalUOM = Item.StockUOM
			
			if (!IsOnlySerialTracked
			and !IsLotRequiredAtIssue)											
				constraint (TotalAllocatedDetailQuantity <= StockOnHandDetailRel.AvailableQuantity)               			
					"InsufficientQuantityAvailableAtStockOnHandAtUOM:<LocalUOM>"

		CreateItemSerialNumber
			if (ItemSerialNumberRel not exists)
				invoke Create ItemSerialNumber
					invoked.Company				= Company
					invoked.InventoryLocation   = InventoryLocation
					invoked.Bin                 = WorkOrderItemBinLotSerial.Bin
					invoked.Item				= Item
					invoked.ItemSerialNumber 	= LocalSerialNumber
					if (WorkOrderItemBinLotSerial.DetailType.Component)
						invoked.Status				= 1
					else
						invoked.Status				= 3
			else
				invoke Update WorkOrderItemBinLotSerial.Serial
					if (WorkOrderItemBinLotSerial.DetailType.Component)
						invoked.Status				= 1
					else
						invoked.Status				= 3			
				
		UpdateWorkOrderItem
			invoke UpdateDetailQuantityFromDetail WorkOrderItem
				invoked.PrmDetailQuantity  = Quantity - old Quantity
				
		DeleteWorkOrderItem
			invoke UpdateDetailQuantityFromDetail WorkOrderItem
				invoked.PrmDetailQuantity  = Quantity * -1
			
		ComponentFeedbackValidations			
			constraint (!WorkOrderItem.ComponentType.Offsite)
				"CannotCreateDetail;WorkOrderItemComponentTypeIsOffsite"									
				
			TotalAllocatedDetailQuantity = ActualQuantity + WasteQuantity 
			 
			if (IsTrackedInAndAlternateStockUOM
			or  WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM)
				LocalUOM = WorkOrderItemBinLotSerial.UnitOfMeasure
			else
				LocalUOM = Item.StockUOM
				LocalInputQuantity = TotalAllocatedDetailQuantity
				include ConversionOfQuantityToStock
				TotalAllocatedDetailQuantity = LocalConvertedQuantity
					
			if(!IsLotRequiredAtIssue)
				constraint (TotalAllocatedDetailQuantity <= StockOnHandDetailRel.AvailableQuantity)               			
					"InsufficientQuantityAvailableAtStockOnHandAtUOM<LocalUOM>"

		StockOnHandDetailUpdate
			initialize LocalUOM
			if (!IsSerialTracked)
				if (IsTrackedInAndAlternateStockUOM
				or  WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM)
					LocalUOM = WorkOrderItemBinLotSerial.UnitOfMeasure
				else
					LocalUOM = Item.StockUOM
					LocalInputQuantity = TotalAllocatedDetailQuantity
					include ConversionOfQuantityToStock
					TotalAllocatedDetailQuantity = LocalConvertedQuantity
			else
			if (IsSerialTracked
			and IsBinTracked)
				LocalUOM = Item.StockUOM
			
			invoke UpdateFromWorkOrderDetail StockOnHandDetailRel
				invoked.PrmAllocatedQuantity += TotalAllocatedDetailQuantity

		AutoAssignSerialNumber
			constraint (WorkOrderItemBinLotSerial.Serial is numeric) 
            	"SerialMustBeNumeric"

			LocalSerialNumber = WorkOrderItemBinLotSerial.Serial
			TempCounter = 1

			while (TempCounter < AutoAssignQuantity)
				TempCounter += 1
				LocalSerialNumber += 1

				constraint (ItemSerialNumberRel not exists)
					"SerialNumber<LocalSerialNumber>FoundInTheRange"

				invoke CreateWorkOrderDetail WorkOrderItemBinLotSerial
					fill in fields from this instance
					invoked.DetailType                                      = LocalDetailType
					invoked.WorkOrderItemBinLotSerial.Serial       			= LocalSerialNumber

				TotalAllocatedDetailQuantity = 1
				
				include CreateItemSerialNumber 
				if (ForDetailTypeComponent)
					include StockOnHandDetailUpdate
				
					if (!IsProductionFeedabckInProcess)	
						include UpdateWorkOrderItem
				
			initialize AutoAssignQuantity
		
				 					
	Field Rules
		Item
			if (WorkOrderItem exists)
				force default to WorkOrderItem.Item
				
				constraint (Item = WorkOrderItem.Item)
					"ItemMustBeEqualToWorkOrderItem"
			else
			if (WorkOrderByproduct exists)
				force default to WorkOrderByproduct.Item
				
				constraint (Item = WorkOrderByproduct.Item)
					"ItemMustBeEqualToWorkOrderByproductItem"
			else
				force default to WorkOrder.Item
				
				constraint (Item = WorkOrder.Item)
					"ItemMustBeEqualToWorkOrderItem"
					
			cannot be changed
				"ItemCannotBeChanged;DeleteAndReAdd"
					
		WorkOrderItemBinLotSerial
			if (!ReverseByWorkOrder)
				constraint (WorkOrder.Status.InProduction)
					"WorkOrderMustBeInInproductionStatus"									
				
				if (ForProductionFeedback)
					constraint (WorkOrder.ProductionFeedbackStatus.InProcess)
						"Change/DeleteProhibited;ProductionFeedbackNotInProcess"			
			
			if (IsLotTracked)
				constraint (WorkOrderItemBinLotSerial.Lot entered)
					"LotIsRequired"
				
				if (ForDetailTypeComponent)									
					if (IsLotRequiredAtIssue)
						include CreateOrUpdateItemLot
					
					if (!ReverseByWorkOrder)	
						if (IsLotTrackedAtReceipts)
							constraint (WorkOrderItemBinLotSerial.Lot exist)
								"LotDoesNotExist"
						
					if (WorkOrderItemBinLotSerial.Lot.LotExpirationDate entered)
						constraint (WorkOrderItemBinLotSerial.Lot.LotExpirationDate >= current corporate date)
							"LotHasExpired"                                                     

					constraint (!WorkOrderItemBinLotSerial.Lot.LotOnHold)
						"LotIsOnHold"	                                                        

			if (!IsSerialTracked)
				constraint (WorkOrderItemBinLotSerial.UnitOfMeasure entered)
					"UnitOfMeasureIsRequired"
					
				if (IsLotRequiredAtIssue)
					if (WorkOrderItemBinLotSerial.UnitOfMeasure not entered)
						WorkOrderItemBinLotSerial.UnitOfMeasure  = Item.StockUOM
					
				if (IsCatchWeightItem)
					constraint (WorkOrderItemBinLotSerial.UnitOfMeasure = Item.SecondaryUOM)
						"CatchWeightItem;UnitOfMeasureShouldBeEqualToItemSecondaryUnitOfMeasure"

				if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
					constraint (ItemUOMRel exists)
						"InvalidUnitOfMeasureEntered"
			else
				constraint (WorkOrderItemBinLotSerial.UnitOfMeasure not entered)
					"UnitOfMeasureCannotBeEntered"
				
				constraint (WorkOrderItemBinLotSerial.Serial entered)
					"SerialIsRequired"

				if (!ReverseByWorkOrder)
					if (IsSerialTrackedAtIssue)
						if(action type.Create)
							constraint (CrossReferencedItemSerialNumberRel not exists)
								"SerialAlreadyExists"
		
						if (AutoAssignQuantity not entered)
							LocalSerialNumber = WorkOrderItemBinLotSerial.Serial
								
					else
					if (IsSerialTrackedAtReceipts)
						if (ForDetailTypeComponent)
							constraint (WorkOrderItemBinLotSerial.Serial exists)                                
								"SerialDoesNotExist"

						LocalSerialNumber = WorkOrderItemBinLotSerial.Serial

					include CreateItemSerialNumber										

			if (IsBinTracked)
				constraint (WorkOrderItemBinLotSerial.Bin entered)
					"BinIsRequired"
				





			else
				constraint (WorkOrderItemBinLotSerial.Bin not entered)																					
					"Item<Item>IsNotBinTrackedAtLocation<InventoryLocation>;BinIsNotAllowed"				


		UOMMultiplier
			if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
				default to ItemUOMRel.UOMConversion
			else 
				default to 1

	    CatchWeightQuantity		
			constraint (IsCatchWeightItem)
				"ItemIsNotDefinedAsCatchWeightItem"

	    	if (ForDetailTypeComponent)
				if (Item.CatchWeightCode.ReceiptRequiresBoth
				and Quantity entered)
					LocalInputQuantity = Quantity
					include ConversionOfQuantityToStock 
					default to LocalConvertedQuantity
				
				if (IsCatchWeightItem
				and Quantity entered)
					required
				
				if (!IsSerialTracked)
					if (WorkOrderItem.Item.IsCatchWeightItem
					and !ReverseByWorkOrder)
						LocalTotalDetailCatchWeightQuantity = DerivedTotalDetailCatchWeightQuantity	+ CatchWeightQuantity




						constraint (LocalTotalDetailCatchWeightQuantity <= WorkOrderItem.CatchWeightQuantity)
							"DetailsCatchWeightQuantityIsGreaterThanComponentTotal"
								
				
		Quantity
			if (ForDetailTypeComponent)	
				if (IsSerialTracked)
					default to 1
				
				if (CatchWeightQuantity entered)
					required 

				if (Quantity changed
				and Quantity != old Quantity)
					LocalQuantity = Quantity - old Quantity
				else
					LocalQuantity = Quantity

				if (!IsSerialTracked)
					if (WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM
					or  WorkOrderItem.Item.IsCatchWeightItem)
						LocalTotalDetailQuantity	= Quantity
					else
						if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
							LocalInputQuantity = LocalQuantity
							include ConversionOfQuantityToStock
							LocalTotalDetailQuantity = LocalConvertedQuantity
				
				if (!ReverseByWorkOrder)
					if (WorkOrderItem.PickedQuantity entered)
						constraint (LocalTotalDetailQuantity <= WorkOrderItem.PickedQuantity)
							"QuantityMismatch;QuantityForUnitOfMeasure<WorkOrderItemBinLotSerial.UnitOfMeasure>GreaterThanWorkOrderItemPickedQuantity"
					
		AutoAssignQuantity
			if (!IsSerialTrackedAtIssue)
				cannot be entered
					"AutoAssignmentOnlyApplicableForIssueTrackedSerials"                                 
			
			constraint (WorkOrderItemBinLotSerial.Serial entered)
				"SerialNumberIsRequiredForAutoAssignment"                                      
			
		ActualQuantity
			if (!ReverseByWorkOrder)


				
				if (ForProductionFeedback
				or  ForDetailTypeByproduct)
					if (IsSerialTracked)
						if (IsProductionFeedabckInProcess)
							default to 1
						else
							cannot be entered
								"ProductionFeedabckNotInProcess;CannotEnterActualQuantity"
	
				if (ForDetailTypeComponent)
					if (IsProductionFeedabckInProcess)
						constraint (IsPickingFeedbackNotStartedOrCompleted)
							"CannotAdd/Update;PickingFeedbackStartedButNotCompleted"
		
						if (ActualCatchWeightQuantity entered)
							if (!SerialWasteQuantity)
									required
		
						if (IsSerialTracked)
							if (IsProductionFeedabckInProcess)
								if (!SerialWasteQuantity)
									default to 1
		
						if (ActualQuantity changed
						and ActualQuantity != old ActualQuantity)
							LocalActualQuantity = ActualQuantity - old ActualQuantity
						else
							LocalActualQuantity = ActualQuantity
						if (!IsSerialTracked)
							if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)	
								LocalInputQuantity = LocalActualQuantity
								include ConversionOfQuantityToStock
								LocalActualQuantity = LocalConvertedQuantity
		
						constraint (LocalActualQuantity <= WorkOrderItem.ActualQuantity)										
							"QuantityMismatch;ActualQuantityForUnitOfMeasure<WorkOrderItemBinLotSerial.UnitOfMeasure>GreaterThanWorkOrderItemActualQuantity"
					else
						cannot be entered
							"ProductionFeedabckNotInProcess;CannotEnterActualQuantity"
						
		ActualCatchWeightQuantity
			if (!ReverseByWorkOrder)
				if (!IsCatchWeightItem)
					cannot be entered
						"CannotEnterActualCatchWeightQuantity;ItemIsNotACatchWeightItem"				
				else
				if (ForDetailTypeComponent)
					if (IsProductionFeedabckInProcess)
						if (Item.CatchWeightCode.ReceiptRequiresBoth
						and ActualQuantity entered)
							LocalInputQuantity = ActualQuantity
							include ConversionOfQuantityToStock 
							default to LocalConvertedQuantity
		
						if (IsCatchWeightItem																
						and ActualQuantity entered)
							required
						
						constraint (IsPickingFeedbackNotStartedOrCompleted)
							"CannotAdd/Update;PickingFeedbackStartedButNotCompleted"
		
						if (ActualCatchWeightQuantity changed
						and ActualCatchWeightQuantity != old ActualCatchWeightQuantity)
							LocalActualCatchWeightQuantity = ActualCatchWeightQuantity - old ActualCatchWeightQuantity
						else
							LocalActualCatchWeightQuantity = ActualCatchWeightQuantity
						
						if (!IsSerialTracked)
							if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
								LocalInputQuantity = LocalActualCatchWeightQuantity
								include ConversionOfQuantityToStock
								LocalActualCatchWeightQuantity = LocalConvertedQuantity
		
							
						constraint (LocalActualCatchWeightQuantity <= WorkOrderItem.ActualCatchWeightQuantity)										
							"QuantityMismatch;ActualCatchWeightQuantityForUnitOfMeasure<WorkOrderItemBinLotSerial.UnitOfMeasure>GreaterThanWorkOrderItemActualCatchWeightQuantity"
					else
						cannot be entered
							"ProductionFeedbackNotInProcess;CannotEnterActualCatchWeightQuantity"



		WasteQuantity
			if (ForDetailTypeComponent)
				if (IsProductionFeedabckInProcess)
					if (IsCatchWeightItem																
					and WasteCatchWeightQuantity entered)
						required
	
					if (!ReverseByWorkOrder)
						constraint (IsPickingFeedbackNotStartedOrCompleted)
							"CannotAdd/Update;PickingFeedbackStartedButNotCompleted"
	
					if (IsSerialTracked
					and IsProductionFeedabckInProcess)
						if (SerialWasteQuantity)
							default to 1
	
					if (WasteQuantity changed
					and WasteQuantity != old WasteQuantity)
						LocalWasteQuantity = WasteQuantity - old WasteQuantity
					else
						LocalWasteQuantity = WasteQuantity
	
					if (!IsSerialTracked)
						if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
							LocalInputQuantity = LocalWasteQuantity
							include ConversionOfQuantityToStock
							LocalWasteQuantity = LocalConvertedQuantity
	
	
					constraint (LocalWasteQuantity <= WorkOrderItem.WasteQuantity)										
						"QuantityMismatch;WasteQuantityForUnitOfMeasure<WorkOrderItemBinLotSerial.UnitOfMeasure>GreaterThanWorkOrderItemWasteQuantity"
				else
					cannot be entered
						"ProductionFeedabckNotInProcess;CannotEnterWasteQuantity"

		WasteCatchWeightQuantity
			if (ForDetailTypeComponent)
				if (IsProductionFeedabckInProcess)
					if (Item.CatchWeightCode.ReceiptRequiresBoth
					and WasteQuantity entered)
						LocalInputQuantity = WasteQuantity
						include ConversionOfQuantityToStock 
						default to LocalConvertedQuantity
						
					if (IsCatchWeightItem																
					and WasteQuantity entered)
						required
	
					if (!ReverseByWorkOrder)
						constraint (IsPickingFeedbackNotStartedOrCompleted)
							"CannotAdd/Update;PickingFeedbackStartedButNotCompleted"
	
					if (WasteCatchWeightQuantity changed
					and WasteCatchWeightQuantity != old WasteCatchWeightQuantity)
						LocalWasteCatchWeightQuantity = WasteCatchWeightQuantity - old WasteCatchWeightQuantity
					else
						LocalWasteCatchWeightQuantity = WasteCatchWeightQuantity

					if (!IsSerialTracked)	
						if (WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
							LocalInputQuantity = LocalWasteCatchWeightQuantity
							include ConversionOfQuantityToStock
							LocalWasteCatchWeightQuantity = LocalConvertedQuantity
	
					constraint (LocalWasteCatchWeightQuantity <= WorkOrderItem.WasteCatchWeightQuantity)										
						"QuantityMismatch;WasteCatchWeightQuantityForUnitOfMeasure<WorkOrderItemBinLotSerial.UnitOfMeasure>GreaterThanWorkOrderItemWasteCatchWeightQuantity"
				else
					cannot be entered
						"ProductionFeedabckNotInProcess;CannotEnterWasteCatchWeightQuantity"


	Actions
		CreateWorkOrderDetail is a Create Action
			restricted

		Purge is a Purge Action 
			restricted 
			bypass relational integrity rules
			
					
		Create is a Create Action
			Action Rules
				if (!ReverseByWorkOrder)
					if (WorkOrderItem exists)
						Item = WorkOrderItem.Item
					else
					if (WorkOrderByproduct exists)
						Item = WorkOrderByproduct.Item
					else
						Item = WorkOrder.Item
				
				WorkOrderItemBinLotSerial.DetailType = TransientDetailType
					

				constraint (DetailTracked)
					"CannotCreateDetail;ItemIsNotDetailTracked"

				if (ForDetailTypeComponent)
					if (!IsProductionFeedabckInProcess)
						if (!ReverseByWorkOrder)
							include ValidatePickingFeedback
	
							include UpdateWorkOrderItem

						TotalAllocatedDetailQuantity = Quantity
						
						include StockOnHandDetailUpdate
						
						if (AutoAssignQuantity entered)
							if (!IsOnlySerialTracked)
								constraint (AutoAssignQuantity <= StockOnHandDetailRel.AvailableQuantity)
									"InsufficientQuantityAvailableAtStockOnHandAtBin:<WorkOrderItemBinLotSerial.Bin>"
															
							LocalDetailType = "C"
							include AutoAssignSerialNumber

					else
						include ComponentFeedbackValidations

						TotalAllocatedDetailQuantity = ActualQuantity + WasteQuantity
						
						include StockOnHandDetailUpdate

						if (AutoAssignQuantity entered)
							if (SerialActualQuantity)
								constraint (AutoAssignQuantity <= WorkOrderItem.ActualQuantity)
									"QuantityMismatch;AutoAssignQuantityGreaterThanWorkOrderItemActualQuantity"
							if (SerialWasteQuantity)
								constraint (AutoAssignQuantity <= WorkOrderItem.WasteQuantity)
									"QuantityMismatch;AutoAssignQuantityGreaterThanWorkOrderItemWasteQuantity"
							if (!IsOnlySerialTracked)
								constraint (AutoAssignQuantity <= StockOnHandDetailRel.AvailableQuantity)
									"InsufficientQuantityAvailableAtStockOnHandAtBin:<WorkOrderItemBinLotSerial.Bin>"
							
							LocalDetailType = "C"	
							include AutoAssignSerialNumber
								

				else					
				if (AutoAssignQuantity entered)
					constraint (AutoAssignQuantity <= WorkOrder.ActualQuantity)
						"AutoAssignQtyCannotBeGreaterThanActualQuantity"
				
					if (ForProductionFeedback)
						LocalDetailType = "F"
					
					if (ForDetailTypeByproduct)
						LocalDetailType = "B"
						
					include AutoAssignSerialNumber			
								
		Update is an Update Action
			Action Rules
				if (ForDetailTypeComponent)
					if (!IsProductionFeedabckInProcess)
						include ValidatePickingFeedback
						
						if (ActualQuantity not entered)												
							LocalAllocatedDetailQuantity = Quantity - (old Quantity + WasteQuantity)
						else
							LocalAllocatedDetailQuantity = Quantity - (ActualQuantity + WasteQuantity)

						include StockOnHandDetailUpdate
						include UpdateWorkOrderItem
					else
						include ComponentFeedbackValidations

						initialize LocalActualQuantity
						initialize LocalWasteQuantity
						
						if (ActualQuantity changed
						and ActualQuantity != old ActualQuantity)
							LocalActualQuantity = ActualQuantity - old ActualQuantity

						if (WasteQuantity changed
						and WasteQuantity != old WasteQuantity)
							LocalWasteQuantity = WasteQuantity - old WasteQuantity
														
						TotalAllocatedDetailQuantity = LocalActualQuantity + LocalWasteQuantity

						if (ActualQuantity changed
						or  WasteQuantity changed)
							include StockOnHandDetailUpdate
				
		Delete is a Delete Action
			Entrance Rules
				if (ForDetailTypeComponent)
					if (!IsProductionFeedabckInProcess)

						include ValidatePickingFeedback

						TotalAllocatedDetailQuantity -= Quantity
						
						include StockOnHandDetailUpdate




						include DeleteWorkOrderItem
					else
						constraint (Quantity not entered)
							"DetailHasPickingFeedback;CannotDeleteDetail"							
						
						TotalAllocatedDetailQuantity -= (ActualQuantity + WasteQuantity)
						
						include StockOnHandDetailUpdate					
			Exit Rules								
				if (ForDetailTypeComponent)
					if (IsSerialTrackedAtIssue)
						invoke Delete WorkOrderItemBinLotSerial.Serial
					else
					if (IsSerialTrackedAtReceipts)
						invoke Update WorkOrderItemBinLotSerial.Serial
							initialize invoked.Status
				else
					invoke Delete WorkOrderItemBinLotSerial.Serial
				
		UpdateFromWorkOrder is an Instance Action
			restricted
			Action Rules
				if (Quantity entered)
					initialize ActualQuantity
					initialize ActualCatchWeightQuantity
					initialize WasteQuantity
					initialize WasteCatchWeightQuantity
			Exit Rules
				invoke Delete
					
				
		UpdateInitializeQuantities is an Instance Action
			restricted
			Action Rules
				initialize ActualQuantity
				initialize ActualCatchWeightQuantity
				initialize WasteQuantity
				initialize WasteCatchWeightQuantity
				
		UpdateAllocatedFromWorkOrder is an Instance Action
			restricted
			Action Rules

				TotalAllocatedDetailQuantity -= (ActualQuantity + WasteQuantity)
				
				include StockOnHandDetailUpdate

				invoke UpdateFromWorkOrder 
		
		UpdateActualQuantityFromWorkOrderItem is an Instance Action
			restricted
			Action Rules
				if (Quantity entered)                                   
					ActualQuantity   			= Quantity
				if (CatchWeightQuantity entered)                        
					ActualCatchWeightQuantity	= CatchWeightQuantity
				
		AddCrossReferenceSerial is an Instance Action
			Parameters
				PrmItem			is an Item
				PrmKitSerial	is a ItemSerialNumber
					default label is "KitSerial"
			Action Rules
				constraint (CrossReferencedItemSerialNumberRel.KitItemSerial not entered)
					"SerialIsAlreadyAssignedToKit"
				
				KitSerial	= PrmKitSerial	

				invoke Update CrossReferencedItemSerialNumberRel
					invoked.KitItemSerial.KitItem   = WorkOrder.Item
					invoked.KitItemSerial.KitSerial = PrmKitSerial
					
		DeleteCrossReferencedSerial is an Instance Action
			valid when (CrossReferencedItemSerialNumberRel.KitItemSerial entered)
			Action Rules
				confirmation required
					"CrossReferencedSerialWillBeDeleted;Continue?"

				initialize KitSerial 
				
				invoke Update CrossReferencedItemSerialNumberRel
					initialize invoked.KitItemSerial.KitItem   
					initialize invoked.KitItemSerial.KitSerial 

		ReverseWorkOrderDetail is an Instance Action
			restricted
			Parameters
				PrmWorkOrder			is a WorkOrder
				PrmItem					is an Item
				PrmWorkOrderItem 		is a WorkOrderItem
				PrmWorkOrderByproduct	is a WorkOrderByproduct
			Action Rules
				if (!ForDetailTypeComponent)
					if (!IsSerialTracked)
						if (IsTrackedInAndAlternateStockUOM
						or  WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM)
							LocalUOM = WorkOrderItemBinLotSerial.UnitOfMeasure
						else
							LocalUOM = Item.StockUOM
							LocalInputQuantity = TotalAllocatedDetailQuantity
							include ConversionOfQuantityToStock
							TotalAllocatedDetailQuantity = LocalConvertedQuantity
	
						constraint (StockOnHandDetailRel.AvailableQuantity >= ActualQuantity)
							"<DerivedMessageForNonAvailableDetail>"
					else
						constraint (WorkOrderItemBinLotSerial.Serial.Status.OnHand)
							"<DerivedMessageForNonAvailableDetail>"					

				invoke Create WorkOrderItemBinLotSerial	
					fill in fields from this instance
					invoked.Company						= Company
					invoked.InventoryLocation			= InventoryLocation					
					invoked.WorkOrder					= PrmWorkOrder
					invoked.Item						= PrmItem
					invoked.WorkOrderItem				= PrmWorkOrderItem
					invoked.WorkOrderByproduct			= PrmWorkOrderByproduct
					invoked.ReverseByWorkOrder			= true
					invoked.ActualQuantity				= ActualQuantity * -1
					invoked.ActualCatchWeightQuantity	= ActualCatchWeightQuantity * -1
					invoked.Quantity					= Quantity * -1
					invoked.CatchWeightQuantity			= CatchWeightQuantity * -1
					invoked.WasteQuantity				= WasteQuantity * -1
					invoked.WasteCatchWeightQuantity	= WasteCatchWeightQuantity * -1		

		CreateDistributions	is an Instance Action
			restricted
			Parameters
				PrmInventoryTransaction					is a InventoryTransaction
				PrmInventoryTransactionLine				is a LineNumber
			Action Rules
				if (WorkOrderItemBinLotSerial.DetailType.Component and Quantity not entered)	
					LocalQuantity	 			= ActualQuantity + WasteQuantity				
				if (WorkOrder.OriginalWorkOrder entered)
					LocalQuantity				= ((ActualQuantity + WasteQuantity) * -1)
				if (WorkOrderItemBinLotSerial.DetailType.Byproduct)
					LocalQuantity	 			= ActualQuantity + WasteQuantity
				if (Item.IsCatchWeightItem)				
					if (LocalQuantity entered)
						LocalSecondaryQuantity	= LocalQuantity
					else
					if (Quantity entered)
						LocalSecondaryQuantity	= Quantity
					else
					if (ActualQuantity entered)
						LocalSecondaryQuantity	= ActualQuantity

					if (ActualCatchWeightQuantity entered)
						LocalCatchWeightQuantity	 		= ActualCatchWeightQuantity
					else
						LocalCatchWeightQuantity	 		= CatchWeightQuantity

				invoke Unreleased.Create InventoryTransactionLineDetail
					fill in fields from this instance
					invoked.TransactionSystemCode	 			= "WO" 
					invoked.InventoryTransaction	 			= PrmInventoryTransaction
					invoked.InventoryTransactionLine.LineNumber = PrmInventoryTransactionLine
					invoked.Item					 			= Item
					invoked.Bin						 			= WorkOrderItemBinLotSerial.Bin
					invoked.Lot						 			= WorkOrderItemBinLotSerial.Lot
					invoked.Sublot					 			= WorkOrderItemBinLotSerial.Sublot
					invoked.Serial					 			= WorkOrderItemBinLotSerial.Serial
					invoked.UnitOfMeasure			 			= WorkOrderItemBinLotSerial.UnitOfMeasure
					if (Item.IsCatchWeightItem)	
						invoked.SecondaryQuantity				= LocalSecondaryQuantity
						if (WorkOrder.OriginalWorkOrder entered)
							invoked.Quantity					= LocalCatchWeightQuantity * -1
						else
							invoked.Quantity					= LocalCatchWeightQuantity
					else
					if (LocalQuantity entered)
						invoked.Quantity						= LocalQuantity
				if (ForDetailTypeComponent)
					if (!IsProductionFeedabckInProcess)
						TotalAllocatedDetailQuantity -= Quantity
					else
						TotalAllocatedDetailQuantity -= (ActualQuantity + WasteQuantity)
					include StockOnHandDetailUpdate
