VendorReturnLine is a BusinessClass
    owned by po
    prefix is PTL
    classic name is PORETURNLN

    Ontology
        symbolic key is VendorReturnLine
            classic set name is PTLSET1
            classic name is RET-LINE-NBR
            classic name for VendorReturn is RETURN-NUMBER

    Patterns
        implements ContextualParent
        implements AnalyticCube
	    	disable continuous update
			dynamically calculate totals
			write to base level only 
		implements StaticJava
        disable AuditIndex
        implements Archivable

    Persistent Fields
    	Vendor									   is a snapshot of VendorReturn.Vendor				
        ReturnNumberAlpha                          is AlphaRight size 10									
            classic name is RETURN-NUMBERA
        ReferenceNumber
            classic name is REFERENCE-NO
        OriginalPurchaseOrder                      is a PurchaseOrder



        OriginalPurchaseOrderLine                  is a PurchaseOrderLine
            classic name is ORIG-PO-LN-NBR
        DocumentNumberNumeric
            classic name is DOC-NBR-NUM
        PurchaseOrderReceipt
            classic name is REC-NUMBER
        Item
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        Description
        ItemType								   is a BillingLineType
        ReturnQuantity                             is a Quantity
            classic name is RETURN-QTY
            precision is DerivedNumberOfDecimalsQuantity
        CatchWeightQuantity                        is a Quantity		
            classic name is CATCH-WT-QTY
            precision is DerivedNumberOfDecimalsQuantity
        CancelQuantity 			                   is a Quantity		
            classic name is ADJUSTMENT-QTY
            precision is DerivedNumberOfDecimalsQuantity
		CatchWeightCancelQuantity				   is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
        DetailsInBalance                           is Boolean
            classic name is DETAIL-BAL-FL
        EnteredUOM                                 is a UnitOfMeasure
        EnteredUOMMultiplier                       is an UOMMultiplier
            classic name is ENT-UOM-MULT
        VendorPriceUOM                             is a UnitOfMeasure
            classic name is VPRI-UOM
        VendorPriceUOMMultiplier                   is an UOMMultiplier
            classic name is VPRI-UOM-MULT
        UnitCost                                   is an InternationalCost  
        	precision is DerivedNumberOfDecimalsCost
        InspectionRequired                         is Boolean
            classic name is INSP-REQ-FL
        HSNSACCode
        TaxCode
        TaxUsageCode
            classic name is TAX-USAGE-CD
        LastDistributionSequence                   is a PurchaseSequence
            classic name is LAST-DST-SEQ
            disable Auditing
        LastPurchaseOrderTransactionDetail												
            sql name is LPOrderTransactionDetail
            classic name is LAST-POT-SEQ
            disable Auditing
        Canceled                                   is Boolean
            classic name is CANCEL-OPTIONS
        ICNCode
        SupplementaryQuantity                      is a Quantity
            classic name is SUPLMNTARY-QTY
            precision is DerivedNumberOfDecimalsQuantity
        StockWeight
            classic name is WEIGHT
        IntrastatNumber
            classic name is INTRASTAT-NBR
        ReturnStockToInventoryOnVendorReturnCancel is Boolean
            sql name is RSTIOnVendorReturnCancel
            classic name is VR-CXL-UPD-SOH
        VendorItem								   
            classic name is VEN-ITEM
        Contract
        ContractLine
        	context of Contract
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        ManufacturerContract                       is a Contract
            classic name is MFG-CONTRACT
        ItemGTIN
            classic name is GTIN
        CreatedBy                                  is an Operator 
        	holds pii
        LastUpdateDate                             is TimeStamp
            classic name is LAST-UPDT-DATE
        LastUpdateBy                               is an Operator 
        	holds pii
        GlobalLineType							   
            classic name is GLBL-LINE-TYPE
     	ReplacementPurchaseOrderLine			   is a PurchaseOrderLine 
     		delete ignored
     	TemporaryHold                 			   is AlphaUpper size 1
            classic name is TEMP-HOLD	
            States
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
                SentForApproval  value is "S"
                    default label is "Sent for Approval"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"
     	
	Local Fields
		CalculateTax
		UOMCalculation
		CurrencyExchange
		LocalCountry								is like Country
		LocalRegionCode								is like Region
		LocalCatchWeightItem						is Boolean
		LocalCatchWeightQuantity					is Boolean
		LocalBin									is a Bin
		I1											is Numeric 2
		I2											is Numeric 2
		LocalUnitCost								is like UnitCost
		LocalTaxCode								is like TaxCode

		LocalTaxOnUnitCost							is like UnitCost
		LocalRoundedAmountX							is an InternalAmount	
			precision is VendorReturn.Currency.NumberOfDecimals
		LocalReturnQuantity2						is like Quantity

		LocalBuyUOM									is a UnitOfMeasure
		LocalVendorReturnLine						is Numeric size 6
		LocalDocumentNumberNumeric					is Numeric size 10
		LocalIntrastat								is Boolean
		LocalZeroCost								is Boolean
		LocalPercent								is Percent size 6.3
		LocalCalculateTaxExecuted					is Alpha 1
		NewPayablesInvoice    						is a PayablesInvoice view
		NewPayablesInvoiceDistribution  			is a PayablesInvoiceDistribution view
		NewPurchaseOrderLineView      				is a PurchaseOrderLine view	
		NewInventoryTransaction    					is an InventoryTransaction view
		LocalInventoryTransaction					is an InventoryTransaction
		NewInventoryTransactionLine					is an InventoryTransactionLine view
		LocalInventoryTransactionLine				is like InventoryTransactionLine
		LocalTotalReturnQuantity					is like Quantity
		LocalDistributionQuantity					is like Quantity
		LocalInputQuantity							is like Quantity
		LocalReturnQuantity							is like Quantity
		LocalOutputQuantity							is like Quantity
		TotalQuantity								is like Quantity
		TotalUDIQuantity							is like Quantity
		TotalSecondaryQuantity						is like Quantity
		TotalCatchWeightQuantity					is like Quantity
		LocalOldQuantity							is like Quantity
		LocalInventoryCostHistoryRemainingQuantity	is like Quantity
		LocalRemainingQuantity						is like Quantity
		LocalChangedQuantity						is like Quantity
		LocalInventoryCostHistoryQuantity			is like Quantity
		LocalCancelQuantity							is like Quantity
		LocalCatchWeightCancelQuantity				is like Quantity
		LocalTotalQuantity							is like Quantity
		LocalBuyUOMQuantity							is like Quantity
		LocalInventoryCostHistoryCost				is an InternationalCost
		LocalTotalInventoryHistoryCost				is an InternationalCost
		LocalInputCost								is an InternationalCost
		LocalOutputUnitCost							is an InternationalCost
		LocalDistributionPercent					is like TotalPercent
		LocalDistributionAmount						is an InternationalAmount
		LocalDistributionsAmount					is an InternationalAmount
		LocalAmount									is an InternationalAmount
		LocalReturnValue							is an InternationalAmount



		LocalOldAmount								is an InternationalAmount
		LocalReferenceAmount						is an InternationalAmount
		LocalCreditAmount							is an InternationalAmount
		LocalTaxTable								is a TaxTableField
		LocalLandedTaxOnUnitCost					is an InternationalCost 
		LocalInvoicedTaxAmount						is an InternalAmount 
			precision is TransientVendorReturnCurrency.NumberOfDecimals
				round to precision
		LocalTotalTaxAmount							is an InternalAmount 
			precision is TransientVendorReturnCurrency.NumberOfDecimals
				round to precision
		LocalTaxableAmount							is an InternalAmount 
			precision is TransientVendorReturnCurrency.NumberOfDecimals
				round to precision
		LocalTotalTaxableAmount						is an InternalAmount
			precision is TransientVendorReturnCurrency.NumberOfDecimals
				round to precision
		LocalDistributionTaxableAmount				is an InternalAmount
			precision is TransientVendorReturnCurrency.NumberOfDecimals
				round to precision
		AccountingEntity 							
		LocalContractGroup							is AlphaUpper size 4
		LocalContract								is a Contract
		LocalQuantity								is Decimal size 13.4
		LocalMfgContract							is Numeric size 15
		LocalCmContract								is Numeric size 15
		LocalPayablesInvoice						is like PayablesInvoice
		LocalPayablesInvoiceDetail					is like PayablesInvoiceDetail
		LocalPurchaseOrder							is like PurchaseOrder
		LocalPurchaseOrderLine						is like PurchaseOrderLine
		LocalOriginalContract						is Numeric size 15
		LocalLocation								is AlphaUpper size 5
    	LocalManufacturerInformation				is a Manufacturer
    	LocalPoDate									is Date
		LocalManufacturerUnitCost					is an InternationalCost
		LocalReturnUnitCost							is an InternationalCost
		LocalReturnCreditAmount						is an InternationalAmount
		LocalItem									is like Item
		LocalCommodityCode							is a CommodityCode
		LocalPOLineCommodityCode					is a CommodityCode
		LocalPurchMajcl								is Alpha 4
		LocalPurchMincl								is Alpha 4
		LocalIcItemCode								is a UNSPSCCode
		LocalInvoiceNumber							is Alpha size 22
		LocalCurrencyCode							is like Currency
		LocalExchangeRate							is Decimal size 14.7
		LocalCommCodes								is Alpha size 35
		LocalAddOnChargeAmount						is like CurrencyAmount
		LocalDetailQuantity							is like Quantity
		IntrastatProcessing
		LocalInspectionReject						is Boolean
		LocalCostHistoryUpdated						is Boolean
		DoDebug										is Boolean
		LocalVariancePercent						is like CatchWeightVariancePercent
		
		SavedTransactionAmount						is a CurrencyAmount
		SavedExchangeDate							is an ExchangeDate
		SavedFromCurrency							is a FromCurrency

		LocalDelimiter								is Alpha size 60
		LocalAccountingEntity						is Alpha size 100

		RoundedValue
		LocalConfigurationParameter					is Alpha size up to 200
		LocalQuantityDifference						is like Quantity
		LocalCatchweightQuantityDifference			is like Quantity
		LocalPercentage								is Percent size 6.3
		LocalAdjustmentLineAmount					is an InternationalAmount
		LocalExtendedAmount							is an InternationalAmount
		LocalTransactionUnitCost					is like UnitCost
		LocalTransactionDate						is Date
		LocalOffsetUnitCost 						is like UnitCost
		LocalTransactionQuantity					is like Quantity
		LocalFromCurrency							is like Currency
		LocalToCurrency 							is like Currency
		LocalReopenFromInvoice						is Boolean
	Context Fields
		Currency

	Transient Fields
		TransientGLCalendarPeriod 					is a GeneralLedgerCalendarPeriod	
			derive value from VendorReturn.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		TransientVendorReturnCurrency				is a Currency
			derive value from VendorReturn.Currency

	Rule Blocks
		ValidateOngoingCalculation
			constraint (not IsOngoingAverageCalculation)
				"Global_\Average_\CostCalculationIsInProgress._\PleaseTryAgain."

		ConvertQuantityToStock
			initialize UOMCalculation
			UOMCalculation.InputUOM							= EnteredUOM
			UOMCalculation.InputToUOM						= Item.StockUOM
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.InputUnitCost					= LocalInputCost
			LocalOutputQuantity								= UOMCalculation.OutputQuantity
			LocalOutputUnitCost								= UOMCalculation.OutputUnitCost	
		
		ConvertQuantityToAlternate
			initialize UOMCalculation
			UOMCalculation.InputUOM							= Item.StockUOM
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.InputUnitCost					= LocalInputCost
			UOMCalculation.InputToUOM						= EnteredUOM
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity
			LocalOutputUnitCost								= UOMCalculation.OutputUnitCost	
		
		ConvertQuantityToAlternateVendorUOM
			initialize UOMCalculation
			UOMCalculation.InputUOM							= EnteredUOM
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.InputUnitCost					= LocalInputCost
			UOMCalculation.InputToUOM						= VendorPriceUOM
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity
			LocalOutputUnitCost								= UOMCalculation.OutputUnitCost	
			
		CloseActionToUpdateAmounts
			if (VendorReturn.VendorClaimType.Chargeback)
				LocalOldAmount = ReturnQuantity * UnitCost *(EnteredUOMMultiplier / VendorPriceUOMMultiplier)
				LocalReferenceAmount = LocalOldAmount
			else
			if (VendorReturn.VendorClaimType.CreditMemo)
				LocalOldAmount = ReturnQuantity * UnitCost * (EnteredUOMMultiplier / VendorPriceUOMMultiplier)
				LocalReferenceAmount = LocalOldAmount
			
			if (LocalCreditAmount entered)
				LocalReferenceAmount 	= LocalCreditAmount
			else
				LocalOldQuantity		= ReturnQuantity
		
			if (VendorReturn.VendorClaimType.Chargeback
			or (VendorReturn.VendorClaimType.CreditMemo
			and	LocalCreditAmount	= VendorReturn.CreditReceived)) 
				LocalOldQuantity	= ReturnQuantity
			if (ContractLine entered)
				invoke UpdateAmountsAndQuantities	ContractLine
					if (LocalReopenFromInvoice)
						invoked.InAmount   					= LocalReferenceAmount
						invoked.InQuantity 					= LocalOldQuantity
						invoked.InDate 						= current corporate date
					else
						invoked.InAmount   					= (LocalReferenceAmount * -1)
						invoked.InQuantity 					= (LocalOldQuantity * -1)
						invoked.InDate 						= VendorReturn.CloseDate
					invoked.InCurrency 					= VendorReturn.Currency
					invoked.InUOM      					= EnteredUOM
			else
				invoke UpdateContractAmounts	Contract
					if (LocalReopenFromInvoice)
						invoked.InAmount   					= LocalReferenceAmount
						invoked.InTransactionDate 			= current corporate date
					else
						invoked.InAmount   					= (LocalReferenceAmount * -1)
						invoked.InTransactionDate 			= VendorReturn.CloseDate
					invoked.InCurrency 					= VendorReturn.Currency
					
		UpdateInventoryCostHistory
			if (Company.InventoryCompany.CostingMethod.LastInFirstOut)
				for each InventoryCostHistoryForLIFORel
					include DecreaseInventoryCostHistory
			else
				for each InventoryCostHistoryExceptLIFORel
					include DecreaseInventoryCostHistory
		
		DecreaseInventoryCostHistory								
			LocalInventoryCostHistoryRemainingQuantity = each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity	

			if (LocalRemainingQuantity <= LocalInventoryCostHistoryRemainingQuantity)
				LocalInventoryCostHistoryQuantity 	= LocalRemainingQuantity
			else
				LocalInventoryCostHistoryQuantity	= LocalInventoryCostHistoryRemainingQuantity

			LocalInventoryCostHistoryCost 			= LocalInventoryCostHistoryQuantity * each.UnitCost
			LocalTotalInventoryHistoryCost 		   += LocalInventoryCostHistoryCost
			
			invoke UpdateFromTransaction each
				invoked.PrmUsedQuantity				= LocalInventoryCostHistoryQuantity
			
			LocalRemainingQuantity 			   		-= LocalInventoryCostHistoryQuantity		
			
			if (LocalRemainingQuantity not entered)
				LocalCostHistoryUpdated = true
				end for each	
		
		ProcessContractRebateQualifiers
			invoke UpdateContractRebateDueInvoiceLine each
				invoked.ParameterManufacturerContract		= LocalOriginalContract
		    	invoked.ParameterInvoiceDte					= PayablesInvoiceRel.InvoiceDate
		    	invoked.ParameterCompany					= Company
		    	invoked.ParameterVendor						= Vendor
		    	invoked.ParameterInvoice 					= LocalInvoiceNumber
		        invoked.ParameterPoNumber  					= LocalPurchaseOrder
		        invoked.ParameterLineNbr   					= LocalPurchaseOrderLine
    			invoked.ParameterManufacturerUnitCost		= LocalManufacturerUnitCost
    			invoked.ParameterMatchUnitCost				= LocalReturnUnitCost
    			invoked.ParameterMatchedQty					= LocalQuantity
    			invoked.ParameterEntUnitCst					= LocalUnitCost
    			invoked.ParameterCmContract					= LocalCmContract
    			invoked.ParameterProcureGroup				= LocalContractGroup
    			invoked.ParameterMfgContract				= LocalMfgContract
    			invoked.ParameterLocation					= LocalLocation
    			invoked.ParameterManufCode					= LocalManufacturerInformation.ManufacturerCode
    			invoked.ParameterManufDivision				= LocalManufacturerInformation.ManufacturerDivision
    			invoked.ParameterServiceTypeContract		= false
    			invoked.ParameterPoDate						= LocalPoDate
    			invoked.ParameterVendorReturn				= true
				invoked.ParameterCurrencyCode				= LocalCurrencyCode
				invoked.ParameterExchangeRate				= LocalExchangeRate
				invoked.ParameterCurrencyTable				= Company.CurrencyTable
				invoked.ParameterPurchFrLocation			= VendorReturn.PurchaseFromLocation
				initialize invoked.ParameterInvoiceStatus
				invoked.ParameterPayablesCompany			= Company
				invoked.ParameterPayablesInvoice			= LocalPayablesInvoice			
				invoked.ParameterPurchaseOrder				= LocalPurchaseOrder
				invoked.ParameterPurchaseOrderLine			= LocalPurchaseOrderLine
				invoked.ParameterPayablesInvoiceDetail		= LocalPayablesInvoiceDetail

		CalculateTaxAmount
			if (TaxCode  entered
			and UnitCost entered
			and LocalReturnQuantity entered)
				initialize LocalInvoicedTaxAmount
				initialize LocalLandedTaxOnUnitCost
				initialize CalculateTax

				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.TaxCode 					= LocalTaxCode
				CalculateTax.TaxableAmount				= LocalTaxableAmount
				CalculateTax.Quantity					= LocalReturnQuantity
				CalculateTax.ProductTaxCategory			= ProductTaxCategory
				
				if (OriginalPurchaseOrder entered)
					if (OriginalPurchaseOrderLine.EarlyDeliveryDate entered)
						CalculateTax.TaxDate			= OriginalPurchaseOrderLine.EarlyDeliveryDate
						CalculateTax.InvoiceDate		= OriginalPurchaseOrderLine.EarlyDeliveryDate
						CalculateTax.PaymentDate		= OriginalPurchaseOrderLine.EarlyDeliveryDate
						CalculateTax.GeneralLedgerDate	= OriginalPurchaseOrderLine.EarlyDeliveryDate
					else
						CalculateTax.TaxDate			= OriginalPurchaseOrder.PurchaseOrderDate
						CalculateTax.InvoiceDate		= OriginalPurchaseOrder.PurchaseOrderDate
						CalculateTax.PaymentDate		= OriginalPurchaseOrder.PurchaseOrderDate
						CalculateTax.GeneralLedgerDate	= OriginalPurchaseOrder.PurchaseOrderDate
				else
					CalculateTax.TaxDate				= VendorReturn.ReturnAuthorizationDate
					CalculateTax.InvoiceDate			= VendorReturn.ReturnAuthorizationDate
					CalculateTax.PaymentDate			= VendorReturn.ReturnAuthorizationDate
					CalculateTax.GeneralLedgerDate		= VendorReturn.ReturnAuthorizationDate

				CalculateTax.ThirdPartyFunction			= "I"	
				CalculateTax.System						= "PO"
				
				CalculateTax.Location					= VendorReturn.ReturnFromLocation
				CalculateTax.PostalAddress				= VendorReturn.ReturnFromLocation.PostalAddress
				CalculateTax.Function 					= "C"

				if (TaxEntityRel.ThirdParty.Sabrix)
					CalculateTax.CallingModule				= "Vendor_Return"
					CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					CalculateTax.InvoiceCompany				= Company
					CalculateTax.ProcessLevel				= VendorReturn.ProcessLevel
					CalculateTax.Invoice					= VendorReturn

					CalculateTax.RelatedObjectReference			= reference to this instance
					CalculateTax.InputVertexRequest				= "P" 
					CalculateTax.TransactionSource				= "I"	
					CalculateTax.InputReturnVertexTaxIn			= "D" 
					CalculateTax.Vendor							= VendorReturn.Vendor 
					CalculateTax.VendorCustomerName				= VendorReturn.Vendor.VendorName 	
					CalculateTax.LineNumber						= VendorReturnLine		
					CalculateTax.CommodityCode					= ICNCode				
					CalculateTax.TaxUsageCode					= TaxUsageCode					
					CalculateTax.DeliveryTerms          		= VendorReturn.ShipTerm	
					CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
					CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (VendorReturn.PurchaseFromLocation entered
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRelExists
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= VendorReturn.PurchaseFromLocation.VendorLocationRel.VendorAddress 
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationCountry			
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= VendorReturn.Vendor.VendorAddress		
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.Vendor.VATRegistrationCountry					
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.Vendor.VATRegistrationNumber					
					CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= OriginalPurchaseOrder.EnteredCurrencyConversionRate 		
					CalculateTax.TransactionCurrency 			= VendorReturn.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= VendorReturn.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
					
				LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"
				
				LocalTaxTable = CalculateTax.TaxTable
				for each LocalTaxTable.TaxTableOutput
					if (each.AccrualFlag = "I")
						LocalInvoicedTaxAmount += each.TaxAmount5DP
					if (each.LandCostFlag)
						LocalLandedTaxOnUnitCost += (each.TaxAmount5DP / LocalReturnQuantity)





				
	Derived Fields
	
		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
		
		DerivedOriginalPurchaseOrder is a DerivedField
			type is like PurchaseOrder
			return OriginalPurchaseOrder

		DerivedItemGTINUOM is a DerivedField
			type is like UnitOfMeasure
			if (VendorItem.VendorBuyUOM entered)
				return VendorItem.VendorBuyUOM
			else
				return EnteredUOM
		 

		DerivedDisplayUnitCost is a DerivedField
			type is like UnitCost
				precision is Item.NumberOfDecimalsCost
			default label is "UnitCost"
			if (VendorReturn.VendorClaimType.NoCharge)
				return 0
			else
				return UnitCost
		
		TotalLineReturnQuantityInStock is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
    		restricted
    		for each OtherVendorReturnLinesRel
    			if (each.Item = Item)
	    			if (each.Item.StockUOM != each.EnteredUOM)
		    			initialize UOMCalculation
						UOMCalculation.InputUOM							= each.EnteredUOM
						UOMCalculation.InputQuantity					= each.ReturnQuantity
						UOMCalculation.InputToUOM						= each.Item.StockUOM
						UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
						LocalOutputQuantity								= UOMCalculation.OutputQuantity
	    				LocalTotalQuantity	+= LocalOutputQuantity	
	    			else
	    				LocalTotalQuantity	+= each.ReturnQuantity
	    	return LocalTotalQuantity
	    	
	    TotalLineReturnQuantityInLineUOM is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
    		restricted
    		for each OtherVendorReturnLinesRel
    			if (each.Item = Item)
	    				LocalTotalQuantity	+= each.ReturnQuantity
	    	return LocalTotalQuantity
	    
	    BuyUOM is a DerivedField
    		type is like UnitOfMeasure
    		if (ItemType.Inventoried
    		or  ItemType.NonStock)
    			if (ValidBuyingUOMRel.UnitOfMeasure = EnteredUOM)
    				LocalBuyUOM = EnteredUOM
    			else	
	    			LocalBuyUOM	= Item.DefaultBuyUOM
	    	return LocalBuyUOM
	    	
	    BuyUOMQuantity is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
    		if (ItemType.Inventoried
    		or  ItemType.NonStock)
    			if (EnteredUOM = ValidBuyingUOMRel.UnitOfMeasure)
    				LocalBuyUOMQuantity = ReturnQuantity
    			else	
	    			if (EnteredUOM = Item.DefaultBuyUOM)
	    				LocalBuyUOMQuantity = ReturnQuantity
	    			else
	    				initialize UOMCalculation
						UOMCalculation.InputUOM							= EnteredUOM
						UOMCalculation.InputQuantity					= ReturnQuantity
						UOMCalculation.InputToUOM						= Item.DefaultBuyUOM
						UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
						LocalBuyUOMQuantity								= UOMCalculation.OutputQuantity
	    	return LocalBuyUOMQuantity
	    	
	    LineCostDifferesPOCostMessage									is a MessageField
	    	restricted
	    	"UnitCostEnteredIsNotEqualToPurchaseOrderLineUnitCost"
	    
	    LineCostDiffersMatchCostMessage									is a MessageField
	    	restricted
	    	"UnitCostEnteredIsNotEqualToPayablesInvoiceDetailMatchUnitCost"

	    										
		CatchWeightQuantityMessage										is a MessageField
			restricted
			"Line<VendorReturnLine>Item<Item>HasCatchWeightQuantityOutOfBalance"
		SecondaryQuantityMessage										is a MessageField
			restricted
			"Line<VendorReturnLine>Item<Item>HasSecondaryQuantityOutOfBalance"
		QuantityMessage													is a MessageField
			restricted
			"Line<VendorReturnLine>Item<Item>HasQuantityOutOfBalance"
		
		DerivedMessageForQuantityOutOfBalance							is a DerivedField
			type is Alpha size up to 200
			restricted	

			if (LocalCatchWeightQuantity)
				return CatchWeightQuantityMessage
			else
				return QuantityMessage		

		DerivedLineCostDiffersMatchOrPOCostMessage							is a DerivedField
			type is Alpha size 80
			restricted
			if (LineCostDiffersPOCost)
				return LineCostDifferesPOCostMessage
			else
			if (LineCostDiffersMatchCost)
				return LineCostDiffersMatchCostMessage

		BinDetailsMessage is a MessageField
			restricted
			"BinDetails"

		SerialDetailsMessage is a MessageField
			restricted
			"SerialDetails"
			
		LotDetailsMessage is a MessageField
			restricted
			"LotDetails"
			
		SerialAndBinDetailsMessage is a MessageField
			restricted
			"SerialAndBinDetails"
			
		LotAndBinDetailsMessage is a MessageField
			restricted
			"LotAndBinDetails"
		
		UDIDetailsMessage is a MessageField
			restricted
			"UDIDetails"

		SerialAndUDIDetailsMessage is a MessageField
			restricted
			"SerialAnd\/\OrUDIDetails"
		
		LotAndUDIDetailsMessage is a MessageField
			restricted
			"LotAnd\/\OrUDIDetails"

		QuantityNotEqual is a MessageField
			restricted
			"QuantityDoesNotEqualReturnQuantity"
		
		DerivedLineNumber is a MessageField
			restricted
			"From_Line<VendorReturnLine>:_"
    
    	ReturnDetailMessage is a DerivedField
    		type is Alpha size 25
    		restricted
    		if (IsBinTracked)
    			if (IsSerialRequiredAtReceipt)
    				return SerialAndBinDetailsMessage
    			else
    			if (IsLotRequiredAtReceipt)
    				return LotAndBinDetailsMessage
    			else
    				return BinDetailsMessage
    		else
    			if (IsSerialRequiredAtReceipt and !IsUDIRequiredAtReceipt)
    				return SerialDetailsMessage
    			else
    			if (IsSerialRequiredAtReceipt and IsUDIRequiredAtReceipt)
    				return SerialAndUDIDetailsMessage
    			else
    			if (IsLotRequiredAtReceipt and !IsUDIRequiredAtReceipt)
    				return LotDetailsMessage
				else
    			if (IsLotRequiredAtReceipt and IsUDIRequiredAtReceipt)
    				return LotAndUDIDetailsMessage
				else
    			if (IsUDIRequiredAtReceipt and !IsSerialRequiredAtReceipt and !IsLotRequiredAtReceipt)
    				return UDIDetailsMessage
    			
    	OutOfBalanceMessage is a MessageField
    		restricted
    		"<ReturnDetailMessage>QuantityDoesNotEqualReturnQuantity"
    		
    	QuantityRedAlertMessage is a DerivedField
    		type is Alpha size 80
    		restricted
    		if (ShowQuantityRedAlert)
    			return OutOfBalanceMessage
			
		VendorItemDescription is a DerivedField
			type is Alpha size 60
			return VendorItem.VendorItemDescription

		ItemDescription is a DerivedField
			type is Alpha size 60
			return Item.Description    	
    	
		ItemStockUOM is a DerivedField
			type is Alpha size 10
			return Item.StockUOM

    	POLineNumber is a DerivedField
    		type is Numeric size 6
    		return OriginalPurchaseOrderLine.LineNumber
    	
    	TotalDetailQuantity is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
    		restricted
    		for each VendorReturnCancelDetailsRel
    			LocalDetailQuantity += each.Quantity
			return LocalDetailQuantity
   
     	DerivedManufacturerUnitCost is a DerivedField
			type is like InternationalCost
			restricted

			if  (OriginalPurchaseOrderLineRel exists
			and  OriginalPurchaseOrderLineRel.ManufacturerContract	entered)
				if (OriginalPurchaseOrderLineRel.ContractLineMemberRel		exists)
					return OriginalPurchaseOrderLineRel.ContractLineMemberRel.BaseCost
				else
					return OriginalPurchaseOrderLineRel.ManufacturerContractLineRel.CurrentNetCost
			else
				if (OriginalPurchaseOrderLineRel			exists)
					return OriginalPurchaseOrderLineRel.EnteredUnitCost
				else
					return UnitCost	
					
		DerivedReturnUnitCost is a DerivedField
			type is like InternationalCost
			restricted

			if (OriginalPurchaseOrderLineRel exists
			and OriginalPurchaseOrderLineRel.ManufacturerContract	entered)
				return DerivedManufacturerUnitCost
			else
				return UnitCost

		DerivedCatchWeightStockUOM  is a DerivedField
			type is like UnitOfMeasure
    		if (IsCatchWeightItem) 
    			return Item.StockUOM
		
		DerivedCatchWeightUnitCost is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (IsCatchWeightItem) 
				return UnitCost / EnteredUOMMultiplier
		
		DerivedUnitCost is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (IsCatchWeightItem
			and UnitCost entered)
				if (PurchaseOrderReceiptLineRel exists) 
					return PurchaseOrderReceiptLineRel.OriginalUnitCost
				else
					RoundedValue.RoundInput						= (UnitCost / EnteredUOMMultiplier)
					RoundedValue.RoundingType					= RoundedValue.RoundingType.Normal
					RoundedValue.RoundTo						= (1/10^DerivedNumberOfDecimalsCost)
					RoundedValue.RoundingMethodFW				= RoundedValue.RoundingMethodFW.MultipleOf
					return RoundedValue.RoundResult
			else
				return UnitCost

		DerivedLocalUnitCostInBaseCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (VendorReturn.Currency = Company.Currency)
				return LocalUnitCost
			else
				initialize CurrencyExchange
				SavedFromCurrency 				= VendorReturn.Currency
				CurrencyExchange.ToCurrency		= Company.Currency
				SavedTransactionAmount			= LocalUnitCost
				if (OriginalPurchaseOrder entered)
					if (OriginalPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						if (PurchaseOrderReceipt entered
						and PurchaseOrderReceiptLineRel exists)
							SavedExchangeDate	= PurchaseOrderReceiptLineRel.ReceivedDate
						else
							SavedExchangeDate	= first OriginalPurchaseOrderLine.ReleasedPurchaseOrderReceiptLinesRel.ReceivedDate
					else
						SavedExchangeDate		= OriginalPurchaseOrder.PurchaseOrderDate
				else
					if (VendorReturn.ShipmentDate entered)
						SavedExchangeDate		= VendorReturn.ShipmentDate
					else
						SavedExchangeDate		= current corporate date
				LocalFromCurrency	      		= VendorReturn.Currency
				LocalToCurrency	      			= Company.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					return (LocalUnitCost / CurrencyExchange.OutputCurrencyRate)
				else
					return (LocalUnitCost * CurrencyExchange.OutputCurrencyRate)

		DerivedOffsetUnitCostInBaseCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (VendorReturn.Currency = Company.Currency)
				return LocalOffsetUnitCost
			else
				initialize CurrencyExchange
				SavedFromCurrency 				= VendorReturn.Currency
				CurrencyExchange.ToCurrency		= Company.Currency
				SavedTransactionAmount			= LocalOffsetUnitCost
				if (OriginalPurchaseOrder entered)
					if (OriginalPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						if (PurchaseOrderReceipt entered
						and PurchaseOrderReceiptLineRel exists)
							SavedExchangeDate	= PurchaseOrderReceiptLineRel.ReceivedDate
						else
							SavedExchangeDate	= first OriginalPurchaseOrderLine.ReleasedPurchaseOrderReceiptLinesRel.ReceivedDate
					else
						SavedExchangeDate		= OriginalPurchaseOrder.PurchaseOrderDate
				else
					if (VendorReturn.ShipmentDate entered)
						SavedExchangeDate		= VendorReturn.ShipmentDate
					else
						SavedExchangeDate		= current corporate date
				LocalFromCurrency	      		= VendorReturn.Currency
				LocalToCurrency	      			= Company.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					return (LocalOffsetUnitCost / CurrencyExchange.OutputCurrencyRate)
				else
					return (LocalOffsetUnitCost * CurrencyExchange.OutputCurrencyRate)

		DerivedNonCreditMemoInvoiceAmount is a DerivedField			
			type is like InternationalAmount
			restricted
			if (CreditMemoPayablesInvoiceRel exists)
				return ((ReturnQuantity * UnitCost) + CreditMemoPayablesInvoiceRel.InvoiceAmount)
				
		DerivedAddOnChargeEnteredUnitCost is a DerivedField
			type is like InternationalCost
			restricted
			if (PurchaseOrderLineAddOnChargesRel exists)
				return first PurchaseOrderLineAddOnChargesRel.EnteredUnitCost
		
		DerivedAddOnChargeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			for each PurchaseOrderLineAddOnChargesRel
				LocalAddOnChargeAmount += each.TotalAddOnChargeAmount
			return LocalAddOnChargeAmount

		VendorReturnLineCount is a DerivedField
			type is Numeric 1
			restricted
			return 1
			
		ReturnLineExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return  ReturnQuantity * UnitCost
			
		ReturnQuantityInStockUOM is a DerivedField
			type is like InternationalAmount
			restricted			
			return ReturnQuantity * EnteredUOMMultiplier		
			
		ReturnUnitCostPerStockUOM is a DerivedField
			type is like InternationalAmount
			restricted
			if (!EnteredUOMMultiplier = 0)
				return UnitCost / EnteredUOMMultiplier


		DerivedVendorReturnLine is a DerivedField
			type is like VendorReturnLine
			return VendorReturnLine

		DerivedTaxType is a DerivedField
			type is like TaxMethod
			return EntityTaxCodeRel.AccruedOrInvoiced

    	DerivedReturnQuantity is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
    		restricted
			return ReturnQuantity - CancelQuantity

    	DerivedReturnCatchWeightQuantity is a DerivedField 
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
			return CatchWeightQuantity - CatchWeightCancelQuantity
		
		DerivedReturnQuantityInStockUOM is a DerivedField
			type is like Quantity
			restricted
			if (IsCatchWeightItem)
				return CatchWeightQuantity
			else
				return ReturnQuantityInStockUOM
		
		DerivedStandardCostInVRCurrency is a DerivedField
			type is like UnitCost
			restricted
			if (VendorReturn.Currency = Company.Currency)
				return ItemLocationRel.StandardCost
			else
				initialize CurrencyExchange
				SavedFromCurrency				= Company.Currency
				CurrencyExchange.ToCurrency		= VendorReturn.Currency
				SavedTransactionAmount			= ItemLocationRel.StandardCost
				if (OriginalPurchaseOrder entered)
					if (OriginalPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						if (PurchaseOrderReceipt entered
						and PurchaseOrderReceiptLineRel exists)
							SavedExchangeDate	= PurchaseOrderReceiptLineRel.ReceivedDate
						else
							SavedExchangeDate	= first OriginalPurchaseOrderLine.ReleasedPurchaseOrderReceiptLinesRel.ReceivedDate
					else
						SavedExchangeDate		= OriginalPurchaseOrder.PurchaseOrderDate
				else
					if (VendorReturn.ShipmentDate entered)
						SavedExchangeDate		= VendorReturn.ShipmentDate
					else
						SavedExchangeDate		= current corporate date
				LocalFromCurrency	      		= Company.Currency
				LocalToCurrency	      			= VendorReturn.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					return (ItemLocationRel.StandardCost / CurrencyExchange.OutputCurrencyRate)
				else
					return (ItemLocationRel.StandardCost * CurrencyExchange.OutputCurrencyRate)

		
		DerivedLandedUnitCost is a DerivedField 
			type is like UnitCost
			restricted
			if (TaxCode  entered
			and UnitCost entered)
				LocalReturnQuantity					= DerivedReturnQuantity
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= TaxCode
				if (OriginalPurchaseOrder.DefaultDeliveryDate entered)
					CalculateTax.TaxDate			= OriginalPurchaseOrder.DefaultDeliveryDate
				else
					CalculateTax.TaxDate			= OriginalPurchaseOrder.PurchaseOrderDate
				
				if (OriginalPurchaseOrder not entered)
					CalculateTax.TaxDate			= VendorReturn.ReturnAuthorizationDate
					
				CalculateTax.TaxableAmount			= OriginalPurchaseOrderLine.TaxableUnitCost * LocalReturnQuantity 
      			CalculateTax.Function				= "C"
				CalculateTax.ThirdPartyFunction		= "I"
				CalculateTax.System					= "PO"
				CalculateTax.Quantity				= LocalReturnQuantity
				CalculateTax.Location				= VendorReturn.ReturnFromLocation
				CalculateTax.PostalAddress			= VendorReturn.ReturnFromLocation.PostalAddress

				if (TaxEntityRel.ThirdParty.Sabrix)
					CalculateTax.CallingModule				= "Vendor_Return"
					CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					CalculateTax.InvoiceCompany				= Company
					CalculateTax.ProcessLevel				= VendorReturn.ProcessLevel
					CalculateTax.Invoice					= VendorReturn

					CalculateTax.RelatedObjectReference			= reference to this instance
					CalculateTax.InputVertexRequest				= "P" 
					CalculateTax.TransactionSource				= "I"	
					CalculateTax.InputReturnVertexTaxIn			= "D" 
					CalculateTax.Vendor							= VendorReturn.Vendor 
					CalculateTax.VendorCustomerName				= VendorReturn.Vendor.VendorName 	
					CalculateTax.LineNumber						= VendorReturnLine		
					CalculateTax.CommodityCode					= ICNCode				
					CalculateTax.TaxUsageCode					= TaxUsageCode					
					CalculateTax.DeliveryTerms          		= VendorReturn.ShipTerm	
					CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
					CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (VendorReturn.PurchaseFromLocation entered
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRelExists
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= VendorReturn.PurchaseFromLocation.VendorLocationRel.VendorAddress 
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationCountry			
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= VendorReturn.Vendor.VendorAddress		
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.Vendor.VATRegistrationCountry					
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.Vendor.VATRegistrationNumber					
					CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= OriginalPurchaseOrder.EnteredCurrencyConversionRate 		
					CalculateTax.TransactionCurrency 			= VendorReturn.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= VendorReturn.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
					
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
      			constraint (CalculateTax.OutputErrorNumber not entered) 
					"<CalculateTax.OutputErrorMessage>"
				initialize LocalTaxOnUnitCost
				
				for each CalculateTax.TaxTable.TaxTableOutput
					if (each.LandCostFlag)
						LocalTaxOnUnitCost += (each.TaxAmount5DP / LocalReturnQuantity)
				
				return UnitCost + LocalTaxOnUnitCost
			else
				return UnitCost

		DerivedInvoicedUnitCost is a DerivedField 
			type is like UnitCost
			restricted
			if (TaxCode  entered
			and UnitCost entered)
				LocalReturnQuantity					= DerivedReturnQuantity
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= TaxCode
				if (OriginalPurchaseOrder.DefaultDeliveryDate entered)
					CalculateTax.TaxDate			= OriginalPurchaseOrder.DefaultDeliveryDate
				else
					CalculateTax.TaxDate			= OriginalPurchaseOrder.PurchaseOrderDate
				
				if (OriginalPurchaseOrder not entered)
					CalculateTax.TaxDate			= VendorReturn.ReturnAuthorizationDate
					
				CalculateTax.TaxableAmount			= OriginalPurchaseOrderLine.TaxableUnitCost * LocalReturnQuantity 
      			CalculateTax.Function				= "C"
				CalculateTax.ThirdPartyFunction		= "I"
				CalculateTax.System					= "PO"
				CalculateTax.Quantity				= LocalReturnQuantity
				CalculateTax.Location				= VendorReturn.ReturnFromLocation
				CalculateTax.PostalAddress			= VendorReturn.ReturnFromLocation.PostalAddress

				if (TaxEntityRel.ThirdParty.Sabrix)
					CalculateTax.CallingModule				= "Vendor_Return"
					CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					CalculateTax.InvoiceCompany				= Company
					CalculateTax.ProcessLevel				= VendorReturn.ProcessLevel
					CalculateTax.Invoice					= VendorReturn

					CalculateTax.RelatedObjectReference			= reference to this instance
					CalculateTax.InputVertexRequest				= "P" 
					CalculateTax.TransactionSource				= "I"	
					CalculateTax.InputReturnVertexTaxIn			= "D" 
					CalculateTax.Vendor							= VendorReturn.Vendor 
					CalculateTax.VendorCustomerName				= VendorReturn.Vendor.VendorName 	
					CalculateTax.LineNumber						= VendorReturnLine		
					CalculateTax.CommodityCode					= ICNCode				
					CalculateTax.TaxUsageCode					= TaxUsageCode					
					CalculateTax.DeliveryTerms          		= VendorReturn.ShipTerm	
					CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
					CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (VendorReturn.PurchaseFromLocation entered
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRelExists
					and VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= VendorReturn.PurchaseFromLocation.VendorLocationRel.VendorAddress 
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationCountry			
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.PurchaseFromLocation.VendorLocationRel.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= VendorReturn.Vendor.VendorAddress		
						CalculateTax.FromVATRegistrationCountry 	= VendorReturn.Vendor.VATRegistrationCountry					
						CalculateTax.FromVATRegistrationNumber		= VendorReturn.Vendor.VATRegistrationNumber					
					CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= OriginalPurchaseOrder.EnteredCurrencyConversionRate 		
					CalculateTax.TransactionCurrency 			= VendorReturn.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= VendorReturn.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
					
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
      			constraint (CalculateTax.OutputErrorNumber not entered) 
					"<CalculateTax.OutputErrorMessage>"
				initialize LocalTaxOnUnitCost
				initialize LocalRoundedAmountX	
				
				for each CalculateTax.TaxTable.TaxTableOutput
					if (each.AccrualFlag = "I")
						LocalRoundedAmountX	   += each.TaxAmount5DP 
				
				return ((UnitCost * LocalReturnQuantity2) + LocalRoundedAmountX)
			else
				return (UnitCost * LocalReturnQuantity2)


		DerivedCalculatedTax is a DerivedField 
			type is like InternalAmount	
			restricted
			
			initialize LocalRoundedAmountX
			initialize CalculateTax

			CalculateTax.TaxEntity				= Company.AccountingEntity
			CalculateTax.TaxCode				= LocalTaxCode
			if (OriginalPurchaseOrder.DefaultDeliveryDate entered)
				CalculateTax.TaxDate			= OriginalPurchaseOrder.DefaultDeliveryDate
			else
				CalculateTax.TaxDate			= OriginalPurchaseOrder.PurchaseOrderDate
			
			if (OriginalPurchaseOrder not entered)
				CalculateTax.TaxDate			= VendorReturn.ReturnAuthorizationDate
			
			LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
  			constraint (CalculateTax.OutputErrorNumber not entered) 
				"<CalculateTax.OutputErrorMessage>"
		
		DerivedPOLineCostInReturnUOM is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			restricted
			if (EnteredUOM = OriginalPurchaseOrderLine.EnteredBuyUOM)
				return OriginalPurchaseOrderLine.VendorBuyUnitCost
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM				= OriginalPurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputUnitCost		= OriginalPurchaseOrderLine.VendorBuyUnitCost
				UOMCalculation.InputToUOM			= EnteredUOM
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputUnitCost
		
		DerivedPOLineReceivedQuantityInReturnUOM is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "QuantityReceived"
			
			if (EnteredUOM = OriginalPurchaseOrderLine.EnteredBuyUOM)
				return OriginalPurchaseOrderLine.ReceivedQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM				= OriginalPurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputQuantity		= OriginalPurchaseOrderLine.ReceivedQuantity
				UOMCalculation.InputToUOM			= EnteredUOM
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
		
		DerivedReturnQuantityInPOUOM is a DerivedField
			type is like Quantity
			restricted
			
			if (EnteredUOM = OriginalPurchaseOrderLine.EnteredBuyUOM)
				return ReturnQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM				= EnteredUOM
				UOMCalculation.InputQuantity		= ReturnQuantity
				UOMCalculation.InputToUOM			= OriginalPurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
		
		DerivedCancelQuantityInPOUOM is a DerivedField
			type is like Quantity
			restricted
			
			if (EnteredUOM = OriginalPurchaseOrderLine.EnteredBuyUOM)
				return CancelQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM				= EnteredUOM
				UOMCalculation.InputQuantity		= CancelQuantity
				UOMCalculation.InputToUOM			= OriginalPurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity

		DisplayVendorReturnLine is a LabelField
			"Return:<VendorReturn>_|_Line:<VendorReturnLine>"

		VendorReturnLineDisplay is a LabelField
			"Line:<VendorReturnLine>"

		DisplayOriginalPOLine is a LabelField
			"OriginalPO:<OriginalPurchaseOrder>_|_Line:<OriginalPurchaseOrderLine.LineNumber>"

		DisplayUnitCostUOM is a LabelField
			"UnitCost:<UnitCost>_|_UOM:<EnteredUOM>"
		
		DisplayReceivedReturned is a LabelField
			"Received:<OriginalPurchaseOrderLine.ReceivedQuantity>_|_Returned:<ReturnQuantity>"

		MobileBuyUOMQuantity is a StringField
			type is Alpha 100
			default label is "BuyUOM"
			BuyUOMQuantity
			" | "
			BuyUOM

		MobileReturnQuantityDisplay is a LabelField
			"<ReturnQuantity>_<EnteredUOM>"
		MobileUnitCostDisplay is a LabelField
			"<UnitCost>_<Currency>"
		MobileVendorReturnLine is a DerivedField
			type is Alpha 6
			restricted
			if (VendorReturnLineExists)
				return VendorReturnLine
			else
				return blank




		DerivedChargebackTaxDate is a DerivedField
			type is Date
			if (OriginalPurchaseOrder.DefaultDeliveryDate entered)
				return OriginalPurchaseOrder.DefaultDeliveryDate
			else
				return OriginalPurchaseOrder.PurchaseOrderDate
			if (OriginalPurchaseOrder not entered)
				return VendorReturn.ReturnAuthorizationDate
		
		DerivedQuantityDifference is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return OriginalPurchaseOrderLine.ReceivedQuantity - ReturnQuantity
			
		DerivedTaxAmountPerUnit is a DerivedField
			type is like UnitCost
			return OriginalPurchaseOrderLineRel.TaxableUnitCost * DerivedLineTaxRateIDM
			
		DerivedLineTaxTotalForIDM is a DerivedField
			type is like UnitCost
			if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
				return ((DerivedTaxAmountPerUnit * ReturnQuantity) * -1)
			
		DerivedCostDifference is a DerivedField
			type is like Cost
			return 0.00
			
		DerivedExtentedAmount is a DerivedField
			type is like InternationalAmount
			return DerivedDisplayUnitCost * ReturnQuantity
			
		DerivedLineTaxRateIDM is a DerivedField
			type is like ChrgRate
				precision is 2
			if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
				return first ChargebackTaxRateRel.Rate
			
		DerivedLineTotalAmount is a DerivedField
			type is like InternationalAmount
			if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
				return DerivedExtentedAmount + DerivedLineTaxTotalForIDM
			else
				return DerivedExtentedAmount
				
		DerivedReturnedQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return ReturnQuantity
			
		DerivedInvoicedTaxCode is a DerivedField
			type is like TaxCode
			if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
				return TaxCode

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8

		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedItemID is a DerivedField	
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return Item
			else
				return Company.FinanceEnterpriseGroup + LocalDelimiter + DerivedBusinessGroup + LocalDelimiter + Item
				
		DerivedCrossAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			return VendorReturn.DerivedBODCrossAccountingEntity
	
		DerivedBusinessGroup is a DerivedField
			type is Alpha size 5
			restricted
			return Company.GeneralLedgerCompany.BusinessGroup
		
		DerivedCompany is a DerivedField
			type is Alpha size 4
			restricted
			return Company using "%d"
		
		DerivedOriginalPO is a DerivedField
			type is Alpha size 12
			restricted
			return OriginalPurchaseOrder using "%d"
			
		DerivedGroupPONumber is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedOriginalPO
			else 
				return DerivedCompany + LocalDelimiter + DerivedOriginalPO

        DerivedCatchWeightVariancePercent		is a DerivedField
            type is Decimal size 5.2
        	restricted
            LocalVariancePercent = (((CatchWeightQuantity - ReturnQuantityInStockUOM)/ReturnQuantityInStockUOM) * 100)
            if (LocalVariancePercent < 0)
                LocalVariancePercent = LocalVariancePercent * -1
            return LocalVariancePercent   

        CatchWeightOutOfToleranceMessage		is a MessageField
            restricted
            "CatchWeightQuantityIsOutsideOfTolerance"

		DerivedInspectionRejectedQuantity is a DerivedField
			type is like Quantity
			restricted
			if (IsCatchWeightItem) 
				return RejectedInspectionLineForReturnLineRel.Quantity
			else
				if (DerivedInspectionRejectedUOM = Item.StockUOM)
					return RejectedInspectionLineForReturnLineRel.Quantity
				else
					return RejectedInspectionLineForReturnLineRel.DerivedRejectedQuantityInStockUOM

		DerivedInspectionRejectedCatchWeightQuantity is a DerivedField
			type is like Quantity
			restricted
			return RejectedInspectionLineForReturnLineRel.CatchWeightQuantity

		DerivedInspectionRejectedUOM is a DerivedField
			type is AlphaUpper size 4
			restricted
			return RejectedInspectionLineForReturnLineRel.DerivedReceivedUOM
		DerivedReturnQuantityDifference is a DerivedField
			type is like Quantity
			restricted
			if (Item.IsCatchWeightItem)
				return CatchWeightQuantity - ReplacementPurchaseOrderLineRel.CatchWeightQuantity
			else
				return ReturnQuantity - ReplacementPurchaseOrderLineRel.ReceivedQuantity

	Dimensions	
		VendorReturn.ReplacementPurchaseOrderBuyer
			dimension name is Buyer

		Contract

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays




		Item
			caption is "<ItemLongName>"
			Attributes
				ItemLongName
				ItemGroup
				Item				
				Description
				Description2
				StockUOM
				GenericName
				MajorPurchasingClass
				MajorPurchasingClassDesc
				MinorPurchasingClass
				MinorPurchasingClassDesc
				MajorInventoryClass
				MajorInventoryClassDesc
				MinorInventoryClass
				MinorInventoryClassDesc
				UNSPSCCode.UNSPSCSegment
				UNSPSCCode.UNSPSCFamily
				UNSPSCCode.UNSPSCClass
				UNSPSCCode.UNSPSCCommodity
				Active
				AddedDate
				CommodityCode
				Consignment	    		
				HazardCode	    		
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
			Hierarchies 
				PurchasingClass 
					base level included
					Attributes 
						ItemGroup 
						MajorPurchasingClass 
						MinorPurchasingClass
				InventoryClass 
					base level included
					Attributes 
						ItemGroup 
						MajorInventoryClass 
						MinorInventoryClass
				UNSPSC 
					base level included
					Attributes 
						ItemGroup 
						UNSPSCCode.UNSPSCSegment 
						UNSPSCCode.UNSPSCFamily
						UNSPSCCode.UNSPSCClass
						UNSPSCCode.UNSPSCCommodity
				Manufacturer 
					base level included
					Attributes 
						ItemGroup 
						Manufacturer.ManufacturerCode 
						Manufacturer.ManufacturerDivision
						ManufacturerNumber
				HazardCode
					base level included
					Attributes 
						ItemGroup 
						HazardCode

		ItemType
		ItemGTIN		
		
        OriginalPurchaseOrderLine
        	dimension name is PONumber
        	
		VendorReturn.PurchaseFromLocation
			dimension name is PurchaseFromLocation

        VendorReturn.ReasonCode
        	dimension name is ReasonCode

        VendorReturn.Status			
        	dimension name is ReturnStatus
		
		TaxCode
		
		VendorReturn.Vendor
        	dimension name is Vendor
        	caption is representative text
        	

		
		VendorReturnLine
			dimension name is VendorReturn
			Attributes
				Description
		
    Measures
    	ReturnLineExtendedAmount
    	UnitCost
    		measure name is ReturnUnitCost
        ReturnQuantity
        CancelQuantity
        	measure name is ReturnCancelQuantity
        EnteredUOMMultiplier
        	measure name is ReturnEntUOMMult
        VendorReturnLineCount
        	measure name is ReturnLineCount
        ReturnQuantityInStockUOM
        ReturnUnitCostPerStockUOM
        
        
    Conditions
		IsOngoingAverageCalculation
			restricted
			when (InventoryCompanyRel.UseGlobalAverageCost
			and   GlobalAverageCostAndSOHRel.AverageComputation.Ongoing)

    	VendorReturnLineExists
    		restricted
    		when (VendorReturnLine exists)
    		
        FromPurchaseOrder
        	restricted
            when (OriginalPurchaseOrder entered)

        InventoryItem
        	restricted
            when (ItemType.Inventoried)

        InventoryOrNonstockItem
        	restricted
            when (ItemType.Inventoried
            or    ItemType.NonStock)

		HasDistribution
			restricted
			when (LocalDistributionQuantity entered
			or 	  LocalPercent entered
			or	  LocalDistributionAmount entered)
		CanCreateDistributions
			restricted
			when (!InventoryItem
			and   !VendorReturn.Status.Closed)			
		IsDetailRequired
			restricted
			when (ItemLocationRel.LotTracked.LotRequiredAtReceipt    
			or 	  ItemLocationRel.SerialTracked.SerialRequiredAtReceipt
			or    ItemLocationRel.BinTracked)
		IsUDIRequired
			restricted
			when (ItemLocationRel.UDITracked.UDIRequiredAtReceipt)    
		IsDetailRequiredForCancel
			restricted
			when (IsDetailRequired
			and	  CancelQuantity entered)
		IsSerialRequiredAtReceipt
			restricted
			when (ItemLocationRel.SerialTracked.SerialRequiredAtReceipt
			and	  InventoryItem)

		IsUDIRequiredAtReceipt
			restricted
			when (ItemLocationRel.UDITracked.UDIRequiredAtReceipt
			and	  InventoryItem)
			
		IsLotRequiredAtReceipt
			restricted
			when (ItemLocationRel.LotTracked.LotRequiredAtReceipt
			and	  InventoryItem)
			
		IsBinTracked
			restricted
			when (ItemLocationRel.BinTracked
			and	  InventoryItem)
		
		HasCreatedFromPurchaseOrder
			restricted
			when (VendorReturn.CreatedFromPurchaseOrder entered)
		

		IsCreatedFromInspectionWithRejectedQuantity
			restricted
			when (RejectedInspectionLineRel exists)
		
		IsCreatedFromRejectedInspection
			restricted
			when (RejectedInspectionLineForReturnLineRel exists)
				
		IsCreatedFromPOWithCost
			restricted
			when (OriginalPurchaseOrderLine entered
			and   not OriginalPurchaseOrderLine.CostOption.NoCharge)

		CreditExists
			when (ProcessedCreditMemoPayablesInvoiceRel exists)
		
		InventoryItemDetailRequired
			restricted
			when (InventoryItem
			and  (IsDetailRequired
			or    IsUDIRequired))
		
		ShowQuantityRedAlert
			restricted
			when (InventoryItemDetailRequired
    		and   not DetailsInBalance)

		LineCostDiffers
			restricted
			when (LineCostDiffersPOCost or LineCostDiffersMatchCost)
    		
    	LineCostDiffersMatchCost
    		restricted
    		when (OriginalPurchaseOrderLine entered
    		and	  PayablesInvoiceDetailsWithDifferentUnitCostRel exists)


		LineCostDiffersPOCost
			restricted
			when (OriginalPurchaseOrderLine entered
			and	  OriginalPurchaseOrderLine.MatchedQuantity not entered
			and   DerivedPOLineCostInReturnUOM != UnitCost)
			
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
			
		InventoryOrNonstockOrSpecialItem
        	restricted
            when (ItemType.Inventoried
            or    ItemType.NonStock
            or	  ItemType.Special)
            
		IsCatchWeightItem
			restricted
			when (InventoryOrNonstockItem
			and   Item.IsCatchWeightItem)

		IsCatchWeightQuantityOutOfTolerance
			restricted
			when (CatchWeightQuantity entered
			and   DerivedCatchWeightVariancePercent > Item.CatchWeightVariancePercent)

		HasDetailWithExpiredLot
			restricted
			when (not VendorReturn.Canceled
			and	  VendorReturnLineDetailWithExpiringLotRel exists)
		
		HasQuantityForAdjustment
			restricted
			when (DerivedReturnQuantityDifference > 0)
    Relations
		GlobalAverageCostAndSOHRel
            one-to-one relation to GlobalAverageCostAndSOH
            Field Mapping uses symbolic key
                related.Company           = Company
                related.Item              = Item
				
        ItemLocationRel
            one-to-one relation to ItemLocation
            Field Mapping uses symbolic key
                related.Company           		= Company
                related.InventoryLocation 		= VendorReturn.ReturnFromLocation
                related.Item              		= Item

		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company          = Company
                
    	CountryCodeRel
    		one-to-one relation to Country
    		Field Mapping uses symbolic key

    			related.Country				= LocalCountry
    	
    	RegionCodeRel
    		one-to-one relation to Region
    		Field Mapping uses symbolic key

    			related.Country				= LocalCountry
    			related.Region				= LocalRegionCode
    				
    	TaxEntityRel
    		one-to-one relation to TaxEntity
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
    			related.TaxEntity				= Company.AccountingEntity
    			
		VendorPriceUOMRel											
        	one-to-one relation to ItemUOM
        	Field Mapping uses symbolic key
        		related.ItemGroup         		= Company.InventoryCompany.ItemGroup
        		related.Item              		= Item
        		related.UnitOfMeasure     		= VendorPriceUOM
                
    	ItemUOMsRel	is an ItemUOM set
    		Instance Selection
    			where (related.ItemGroup  		= Company.InventoryCompany.ItemGroup)
    	
    	ValidBuyingUOMRel is an ItemUOM set												
    		Instance Selection 
    			where (related.ItemGroup  		= Company.InventoryCompany.ItemGroup
    			and    related.ValidForBuying.Valid)
    	
    	DefaultTransactionUOMRel is an ItemUOM set										
    		Instance Selection 
    			where (related.ItemGroup  		= Company.InventoryCompany.ItemGroup
    			and    related.ValidForInventoryTransactions.Default)
    			
    	VendorReturnLineDistributionsRel is a VendorReturnLineDistribution set
    	
    	FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
    	
    	OtherVendorReturnLinesForOriginalPurchaseOrderRel
        	one-to-many relation to VendorReturnLine
        	Field Mapping uses Set3
        		related.Company						= Company
        		related.OriginalPurchaseOrder		= OriginalPurchaseOrder
        		related.OriginalPurchaseOrderLine	= OriginalPurchaseOrderLine
        
        ReturnLinesForPurchaseOrderLineRel
            one-to-many relation to VendorReturnLine
        	Field Mapping uses Set3
        		related.Company						= Company
        		related.OriginalPurchaseOrder		= OriginalPurchaseOrder
        		related.OriginalPurchaseOrderLine	= OriginalPurchaseOrderLine
        	Instance Selection
        		where (not related.VendorReturn.Status.Added)
        
        PurchaseOrderLineAssetRel
			one-to-one relation to PurchaseOrderLineAsset
			Field Mapping uses symbolic key
				related.Company				  		=  Company
				related.PurchaseOrder				=  OriginalPurchaseOrder
				related.PurchaseOrderLine			=  OriginalPurchaseOrderLine
				
        PurchaseOrderReceiptLineRel
            one-to-one relation to PurchaseOrderReceiptLine
            Field Mapping uses symbolic key
                related.Company                  = Company
                related.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = OriginalPurchaseOrderLine

        VendorReturnLineDetailsRel is a VendorReturnLineDetail set
            Instance Selection
                where (related.DocumentType.VendorReturn)
		
		VendorReturnCancelDetailsRel is a VendorReturnLineDetail set
            Instance Selection
                where (related.DocumentType.VendorReturnCancel)
                
        VendorReturnLineDetailsWithMissingBinRel is a VendorReturnLineDetail set
            Instance Selection
                where (related.Bin not entered)
                
		VendorReturnLineDetailMultipleBinsRel is a VendorReturnLineDetail set
			Instance Selection
				where (related.DocumentType.VendorReturn
				and    related.Bin != LocalBin)

	    PurchaseOrderUDIDetailReturnRel  
            one-to-many relation to PurchaseOrderUDIDetail
            delete cascades
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrderUDIDetail.PurchaseTransactionDocumentType	= "VR"
                and   related.PurchaseOrderUDIDetail.DocumentNumberNumeric				= VendorReturn
                and   related.PurchaseOrderUDIDetail.LineNumber							= VendorReturnLine)
				
		ReplacementPurchaseOrderLineRel 
        	one-to-one relation to PurchaseOrderLine
        	Field Mapping uses symbolic key
                related.Company               = Company
                related.PurchaseOrder         = VendorReturn.ReplacementPurchaseOrder
                related.PurchaseOrderLine     = ReplacementPurchaseOrderLine
                
		PurchaseOrderLineDistributionsRel 
			one-to-many relation to PurchaseOrderLineDistribution
        	Field Mapping uses symbolic key
                related.Company               = Company
                related.PurchaseOrder         = OriginalPurchaseOrder
                related.PurchaseOrderLine     = OriginalPurchaseOrderLine

        NonAddOnChargeDistributionsRel
        	one-to-many relation to PurchaseOrderLineDistribution
        	Field Mapping uses symbolic key
                related.Company               = Company
                related.PurchaseOrder         = OriginalPurchaseOrder
                related.PurchaseOrderLine     = OriginalPurchaseOrderLine
                related.AddOnCharge			  = blank
		
		VendorReturnLineAdjustmentAndInspectionLineRel
            one-to-one relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set1
                related.Company                          = Company
                related.AdjustmentInspectionDocumentType = "IN"
                related.POReceiptAdjustmentAndInspection = LocalDocumentNumberNumeric
                related.PurchaseOrderReceiptLine         = LocalVendorReturnLine
                
        OriginalPurchaseOrderLineAdjustmentAndInspectionLineRel
            one-to-one relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set1
                related.Company                          = Company
                related.AdjustmentInspectionDocumentType = "RA"
                related.POReceiptAdjustmentAndInspection = DocumentNumberNumeric
                related.PurchaseOrderReceiptLine         = OriginalPurchaseOrderLine
        
        RejectedInspectionLineForReturnLineRel
        	one-to-many relation to POReceiptAdjustmentAndInspectionLine
        	Field Mapping uses Set5
        		related.Company								 = Company
                related.PurchaseOrderReceipt				 = PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine			 = OriginalPurchaseOrderLine
                related.POReceiptAdjustmentAndInspection	 = DocumentNumberNumeric
            Instance Selection
            	where (related.IsInspection
                and	   related.POReceiptAdjustmentAndInspectionLine = OriginalPurchaseOrderLine
            	and    related.Quantity entered)
        
		CreditMemoPayablesInvoiceRel
        	one-to-many relation to PayablesInvoice
            Field Mapping uses ByReturnNumber           	
				related.Company               	= Company                
                related.VendorReturn          	= VendorReturn
				related.Vendor         	  		= VendorReturn.Vendor
            Instance Selection
                where (related.InvoiceType     	= "C")    
                
		PayablesInvoiceRel
        	one-to-one relation to PayablesInvoice
            Field Mapping uses symbolic key           	
				related.Company               = Company                
                related.PayablesInvoice       = LocalPayablesInvoice
		
		PayablesInvoiceDetailsRel
        	one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByPurchaseOrderLine
            	related.Company               = Company
                related.PurchaseOrder         = OriginalPurchaseOrder
                related.PurchaseOrderLine     = OriginalPurchaseOrderLine

		PayablesInvoiceDetailsWithDifferentUnitCostRel
        	one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByPurchaseOrderLine
            	related.Company               = Company
                related.PurchaseOrder         = OriginalPurchaseOrder
                related.PurchaseOrderLine     = OriginalPurchaseOrderLine
			Instance Selection
				where (related.MatchUnitCost != UnitCost)
				        
		ReturnLinePayablesInvoiceDetailsRel
        	one-to-many relation to PayablesInvoiceDetail
        	Field Mapping uses ByCompanyVendorPayablesInvoice        
            	related.Company               	= Company
				related.Vendor					= VendorReturn.Vendor
				related.PayablesInvoice			= LocalPayablesInvoice
                related.PurchaseOrder         	= LocalPurchaseOrder
                related.PurchaseOrderLine     	= LocalPurchaseOrderLine

    	OtherVendorReturnLinesRel
    		one-to-many relation to VendorReturnLine
            Field Mapping uses symbolic key 
            	related.Company             = Company
                related.VendorReturn        = VendorReturn
       
       	InventoryCostHistoryForLIFORel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set5
				related.Company 			= Company
				related.InventoryLocation	= VendorReturn.ReturnFromLocation
				related.Item				= Item
		
		InventoryCostHistoryExceptLIFORel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set3
				related.Company 			= Company
				related.InventoryLocation	= VendorReturn.ReturnFromLocation
				related.Item				= Item
				
		InventoryCostHistoryForPOReceiptRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set3
				related.Company 			= Company
				related.InventoryLocation	= VendorReturn.ReturnFromLocation
				related.Item				= Item
			Instance Selection
				where (related.ValidPurchaseOrderTransaction
				and    related.DerivedOriginatingTransaction = PurchaseOrderReceipt)
		
		OriginalPurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= OriginalPurchaseOrder
				related.PurchaseOrderLine	= OriginalPurchaseOrderLine 

 		CommodityCodeRel
			one-to-one relation to CommodityCode
			Field Mapping uses ByCommCodes
				related.ItemGroup					= Company.InventoryCompany.ItemGroup
				related.CommCodes					= OriginalPurchaseOrderLineRel.CommodityCode
	
		QualifierItemsForContractRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItemNumber
				related.ItemNumber					= LocalItem
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract

		QualifierCodesLocalCommodityCodeForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByCommCode
				related.CommodityCode		= LocalPOLineCommodityCode.CommodityCode
				related.ContractGroup		= LocalContractGroup
				related.Contract			= LocalContract
			Instance Selection
				where (related.ItemCategory.CommodityCode)

		QualifierCodesManufInfoLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= LocalManufacturerInformation.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= LocalManufacturerInformation.ManufacturerDivision
				related.ContractGroup							= LocalContractGroup
				related.Contract								= LocalContract
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation)

		QualifierCodesManufInfoLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= LocalManufacturerInformation.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= blank
				related.ContractGroup							= LocalContractGroup
				related.Contract								= LocalContract
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation)

		QualifierCodesPurchClassLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= LocalPurchMajcl
				related.MinorPurchasingClass		= LocalPurchMincl
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
	    		where (related.ItemCategory.PurchasingClass)
    											
		QualifierCodesPurchClassLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= LocalPurchMajcl
				related.MinorPurchasingClass		= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
	    		where (related.ItemCategory.PurchasingClass)
    											
		QualifierCodesUnspscCodeLevel4ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= LocalIcItemCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= LocalIcItemCode.UNSPSCFamily 
				related.UnspscCode.UNSPSCClass			= LocalIcItemCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= LocalIcItemCode.UNSPSCCommodity
				related.ContractGroup					= LocalContractGroup
				related.Contract						= LocalContract
			Instance Selection
	    		where (related.ItemCategory.UNSPSCCode)
    											
		QualifierCodesUnspscCodeLevel3ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment	= LocalIcItemCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily		= LocalIcItemCode.UNSPSCFamily 
				related.UnspscCode.UNSPSCClass		= LocalIcItemCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity	= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
	    		where (related.ItemCategory.UNSPSCCode)
    											
		QualifierCodesUnspscCodeLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment	= LocalIcItemCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily		= LocalIcItemCode.UNSPSCFamily 
				related.UnspscCode.UNSPSCClass		= blank
				related.UnspscCode.UNSPSCCommodity	= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
	    		where (related.ItemCategory.UNSPSCCode)
    											
		QualifierCodesUnspscCodeLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment	= LocalIcItemCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily		= blank
				related.UnspscCode.UNSPSCClass		= blank
				related.UnspscCode.UNSPSCCommodity	= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
	    		where (related.ItemCategory.UNSPSCCode)
    											
		ProcessedCreditMemoPayablesInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByReturnNumber           	
				related.Company               	= Company                
				related.VendorReturn          	= VendorReturn
				related.Vendor         	  		= Vendor
			Instance Selection
				where (related.InvoiceType     	= "C"
				and    !related.Status.Unreleased)

    	PayablesInvoicesRel
    		one-to-many relation to PayablesInvoice
    		Field Mapping uses ByVendor2
    			related.Company						= Company
    			related.Vendor						= Vendor
    		Instance Selection
    			where (related.Status				= 1
    			and    related.VendorReturn			= VendorReturn)	
    			
    	PurchaseOrderLineAddOnChargesRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= OriginalPurchaseOrder
                related.PurchaseOrderLine 		= OriginalPurchaseOrderLine			
    	
    	VendorReturnLineItemUOMRel
			one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.InventoryCompany.ItemGroup
    			related.Item			= Item
    			related.UnitOfMeasure	= EnteredUOM


		GTINMatchingVendorItemRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Company.InventoryCompany.ItemGroup
                related.Manufacturer		= VendorItem.Manufacturer
                related.ManufacturerNumber	= VendorItem.ManufacturerNumber
                related.Item				= Item
                related.UnitOfMeasure		= DerivedItemGTINUOM
			Instance Selection
				where (related.Active
				and    related.UseAsDefaultPerUOM)

    	InventoryTransactionLineRel
			one-to-one relation to InventoryTransactionLine
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= VendorReturn.ReturnFromLocation								
              	related.InventoryTransaction								= VendorReturn.RelatedInventoryTransaction
            	related.TransactionSystemCode								= "PO"
				related.InventoryTransactionLine.WarehouseShipment 			= blank
            	related.InventoryTransactionLine.LineNumber		    		= VendorReturnLine
            	related.InventoryTransactionLine.ComponentSequence   		= blank

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				related.TaxCode 				= TaxCode
				

		ChargebackTaxRateRel
            one-to-many relation to TaxRate
            Field Mapping uses Set4
            Instance Selection
                where (related.TaxRate.TaxCode 				= TaxCode
				and		related.EffectiveDate				<= DerivedChargebackTaxDate)
		
		VendorReturnHeaderChargebackCommentsRel
			one-to-many relation to VendorReturnComment
			Field Mapping uses symbolic key
				related.Company					= Company
				related.VendorReturn			= VendorReturn
			Instance Selection
				where (related.Type.PrintOnChargeback)
				
		VendorReturnLineChargebackCommentsRel
			one-to-many relation to VendorReturnLineComment
			Field Mapping uses symbolic key
				related.Company					= Company
				related.VendorReturn			= VendorReturn
				related.VendorReturnLine		= VendorReturnLine
			Instance Selection
				where (related.Type.PrintOnChargeback)

		VendorReturnLineDetailWithExpiringLotRel
			one-to-many relation to VendorReturnLineDetail
			Field Mapping uses symbolic key
				related.Company					= Company
				related.VendorReturn			= VendorReturn
				related.VendorReturnLine		= VendorReturnLine
			Instance Selection
				where (related.IsLotExpired)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CurrencyRelationship.FromCurrency	 = LocalFromCurrency
				related.CurrencyRelationship.ToCurrency		 = LocalToCurrency


		PurgeVendorReturnLineCommentRel is a VendorReturnLineComment set
			Instance Selection
				include deleted records
				
		PurgeVendorReturnLineDistributionsRel is a VendorReturnLineDistribution set
			Instance Selection
				include deleted records
				
        PurgeVendorReturnLineDetailRel is a VendorReturnLineDetail set
			Instance Selection
				include deleted records


        RejectedInspectionLineRel	
        	one-to-many relation to POReceiptAdjustmentAndInspectionLine
        	Field Mapping uses Set5
        		related.Company								= Company
                related.PurchaseOrderReceipt				= PurchaseOrderReceipt
                related.PurchaseOrderReceiptLine			= OriginalPurchaseOrderLine
                related.POReceiptAdjustmentAndInspection	= DocumentNumberNumeric
            Instance Selection
            	where (related.IsInspection
            	and    related.POReceiptAdjustmentAndInspectionLine		= VendorReturnLine
            	and    related.Quantity entered)


				
    Sets

        Set2
            indexed
            Instance Selection
                where (InventoryItem)
            Sort Order
                Company
                ReturnNumberAlpha
                VendorReturnLine

        Set3
            indexed
            Instance Selection
                where (FromPurchaseOrder)
            Sort Order
                Company
                OriginalPurchaseOrder
                OriginalPurchaseOrderLine
                VendorReturn
                VendorReturnLine

        Set4
            indexed
            Sort Order
                Company
                VendorReturn
                VendorReturnLine
                ItemType
                
        ByCompanyAndVendorReturnLine
        	not indexed        	
        	Sort Order
        		Company
        		VendorReturnLine
        		VendorReturn
	

									
	Field Rules
		ReturnNumberAlpha
			default to VendorReturn
			
		ItemType
			required
			cannot be changed
				"ItemTypeCannotBeChanged"
				
		Item
			required
            			
			if (OriginalPurchaseOrder entered)
				cannot be changed
					"ItemFromOriginalPurchaseOrderCannotBeChanged"															
			
			if (VendorReturn.ReturnMaterialAuthorizationPrinted)
				cannot be changed
					"CannotChangeItemAfterReturnMaterialAuthorizationPrinted"												
			
			if (VendorReturn.ShippedStatus)
				cannot be changed
					"CannotChangeItemAfterShippedToVendor"																	
			
			if (InventoryOrNonstockItem)
				cannot be changed 
					"CannotChangeItemForInventoriedOrNonstockTypeItems"	
					
			if (ItemType.Inventoried)           
            	constraint (ItemLocationRel exists)
            		"Item<Item>DoesNotExistAtThisLocation<VendorReturn.ReturnFromLocation>"			   												
		
		Description
			if (!InventoryOrNonstockItem)
				required
					"DescriptionIsRequiredForSpecialItem"
				
			if (InventoryOrNonstockItem)
				default to Item.Description
				
				cannot be changed
					"DescriptionCannotBeChangedForInventoriedAndNonStockItems"      										
					
			if (OriginalPurchaseOrder entered)
				constraint (Description = OriginalPurchaseOrderLine.Description
				or 			Description = Item.Description)
					"DescriptionMustBeEqualToOriginalPurchaseOrderDescriptionOrItemMasterDescription"      					
			
			if (VendorReturn.ReturnMaterialAuthorizationPrinted)
				cannot be changed
					"CannotChangeDescriptionAfterReturnMaterialAuthorizationPrinted"										
			
			if (VendorReturn.ShippedStatus)
				cannot be changed
					"CannotChangeDescriptionAfterShippedToVendor"															
									
		MatchDetailKey
			if (InventoryOrNonstockItem)
				default to Item
			else
				default to Description
				
		ItemGTIN
			if (OriginalPurchaseOrder entered)
				cannot be changed
					"GTINCannotBeChanged,LineHasPurchaseOrderReference"														
			else 
				if (Company.InventoryCompany.ItemGroup.AllowMultipleGTINs)
					default to GTINMatchingVendorItemRel.ItemGTIN

		VendorItem
			if (OriginalPurchaseOrder entered)
				cannot be changed
					"VendorItemFromOriginalPurchaseOrderCannotBeChanged"													
		
		EnteredUOM
			required
			
			if (ItemType.Inventoried)
				if (Item.IsCatchWeightItem)
					default to Item.SecondaryUOM											
				else
					default to Item.StockUOM
					
			if (ItemType.NonStock)
				default to Item.DefaultBuyUOMRel.ItemUOM.UnitOfMeasure
			
			if (OriginalPurchaseOrder entered)	
				cannot be changed
					"UnitOfMeasureFromOriginalPurchaseOrderCannotBeChanged"														
			
			if (InventoryOrNonstockItem)
				if (action type.Update)
					cannot be changed 
						"CannotChangeUnitOfMeasureForInventoriedOrNonstockTypeItems"		   									
				
				if (Item.IsCatchWeightItem)
					constraint (EnteredUOM = Item.SecondaryUOM)
						"UnitOfMeasureForCatchweightItemMustBeSecondaryUnitOfMeasure"									
				
				constraint (VendorReturnLineItemUOMRel exists)
					"<EnteredUOM>IsNotAValidUOMForVendorReturn"	
				
			if (VendorReturn.ReturnMaterialAuthorizationPrinted)
				cannot be changed
					"CannotChangeUnitOfMeasureAfterReturnMaterialAuthorizationPrinted"											
			
			if (VendorReturn.ShippedStatus)
				cannot be changed
					"CannotChangeUnitOfMeasureAfterShippedToVendor"																
			
		EnteredUOMMultiplier
			if (OriginalPurchaseOrderLine entered)
				default to OriginalPurchaseOrderLine.EnteredBuyUOMMultiplier
			else
			if (InventoryOrNonstockItem and VendorReturnLineItemUOMRel exists)
				force default to VendorReturnLineItemUOMRel.UOMConversion
			else
				force default to 1
				
	
		VendorPriceUOM
			if (OriginalPurchaseOrderLine entered)
				default to OriginalPurchaseOrderLine.VendorPriceUOM
			else
			if (InventoryOrNonstockItem and VendorItem.VendorPriceUOM entered)
				force default to VendorItem.VendorPriceUOM
			else
				force default to EnteredUOM			
		
		VendorPriceUOMMultiplier
			if (OriginalPurchaseOrderLine entered)
				default to OriginalPurchaseOrderLine.VendorPriceUOMMultiplier
			else
			if (InventoryOrNonstockItem and VendorPriceUOMRel exists)
				force default to VendorPriceUOMRel.UOMConversion
			else
				force default to 1			
		
		ReturnQuantity
			required
			
			if (VendorReturn.ShippedStatus)
				cannot be changed
					"CannotChangeReturnQuantityAfterShippedToVendor"															
					




			if (VendorReturn.Status.AuthorizedByVendor
			and ReturnQuantity changed)
				constraint (ReturnQuantity <= old ReturnQuantity)
					"CannotIncreaseReturnQuantityAfterAuthorization"																
					
			constraint(ReturnQuantity>=0)
				"CannotEnterNegativeValue"

		CancelQuantity									
			if (!VendorReturn.Status.WaitingForVendorAction
			or  !VendorReturn.Status.Closed)
				cannot be changed
					"CancelQuantityCanOnlyBeChangedAfterShippedToVendor"																		
					
			constraint (CancelQuantity <= ReturnQuantity)
				"CancelQuantityCannotBeGreaterThanReturnQuantity"					

			if (CatchWeightCancelQuantity entered
			and IsCatchWeightItem)
				required

		CatchWeightCancelQuantity									
			if (!VendorReturn.Status.WaitingForVendorAction
			or  !VendorReturn.Status.Closed)
				cannot be changed
					"CancelQuantityCanOnlyBeChangedAfterShippedToVendor"																		
					
			constraint (CatchWeightCancelQuantity <= CatchWeightQuantity)
				"CancelQuantityCannotBeGreaterThanReturnQuantity"	
				
			if (IsCatchWeightItem)
				if (CancelQuantity entered)
					required
			else
				cannot be entered
					"CannotEnterCatchWeightCancelQuantity;Item<Item>NotSetUpForCatchWeight"

		DetailsInBalance
			if (InventoryItemDetailRequired)
				initialize TotalQuantity
				initialize TotalUDIQuantity
				initialize TotalCatchWeightQuantity
				initialize DetailsInBalance				
				if (IsDetailRequired)
					for each VendorReturnLineDetailsRel
						if (IsCatchWeightItem)
							TotalQuantity 				+= each.SecondaryQuantity	
							TotalCatchWeightQuantity 	+= each.Quantity 			
						else
							TotalQuantity 			 	+= each.Quantity
				else
					TotalQuantity					= ReturnQuantity

				if (IsUDIRequired)
					for each PurchaseOrderUDIDetailReturnRel
						TotalUDIQuantity 			+= each.Quantity
				else
					TotalUDIQuantity				= ReturnQuantity 
						
				if (TotalQuantity 					= ReturnQuantity
				and TotalUDIQuantity            	= ReturnQuantity)
					if (IsCatchWeightItem)
						LocalCatchWeightQuantity 	= true	
						if (TotalCatchWeightQuantity	= CatchWeightQuantity)
							DetailsInBalance 		= true
					else
						DetailsInBalance 			= true
						
		ReturnStockToInventoryOnVendorReturnCancel
			if (ItemType.Inventoried)
				default to VendorReturn.ReturnStockToInventoryOnVendorReturnCancel
			else  
				constraint (not ReturnStockToInventoryOnVendorReturnCancel)
					"OnlyInventoryTrackedItemsCanBeReturnedToInventory"	

			if (CancelQuantity entered)
				cannot be changed
					"CannotChangeReturnStockToInventoryOnVendorReturnCancel;CancelledQuantityExists"																	
		
		UnitCost
			if (!VendorReturn.VendorClaimType.NoCharge
			and Company.InventoryCompany.CostingMethod.AverageCosting
			and OriginalPurchaseOrder not entered
			and ItemType.Inventoried)
				LocalInputCost = ItemLocationRel.DerivedItemAverageCost 
				include ConvertQuantityToAlternate
				default to LocalOutputUnitCost
			
			if (!VendorReturn.VendorClaimType.NoCharge
			and Company.InventoryCompany.CostingMethod.StandardCosting
			and OriginalPurchaseOrder not entered
			and ItemType.Inventoried)
				LocalInputCost = DerivedStandardCostInVRCurrency
				include ConvertQuantityToAlternate
				default to LocalOutputUnitCost	
				
			

				
			if (!VendorReturn.Status.Added
			and !VendorReturn.VendorClaimType.NoCharge)
				required
					"UnitCostIsRequiredAfterAuthorize"													
			
			if (VendorReturn.VendorClaimType.NoCharge)
				initialize UnitCost																		
			
			if (VendorReturn.ShippedStatus
			and !VendorReturn.VendorClaimType.NoCharge)
				cannot be changed
					"CannotChangeUnitCostAfterShippedToVendor"																	
					









					
		ICNCode
			if (LocalIntrastat)
				if (InventoryOrNonstockItem)
					required
						"ICNCodeIsRequired"																		
						
					constraint (ICNCode = Item.ICNCode)
						"CannotOverrideItemICNCode"														
		
		SupplementaryQuantity
			if (LocalIntrastat)
				if (InventoryOrNonstockItem)
					if (ICNCode.SupplementaryUOM entered)
						initialize UOMCalculation
						UOMCalculation.InputUOM							= EnteredUOM
						UOMCalculation.InputQuantity					= ReturnQuantity
						UOMCalculation.InputToUOM						= ICNCode.SupplementaryUOM
						UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
						SupplementaryQuantity							= UOMCalculation.OutputQuantity			



						
				if (ICNCode.SupplementaryUOM entered)
					required
						"SupplementaryQuantityIsRequired"													

		StockWeight
			if (InventoryOrNonstockItem)
				LocalInputQuantity = ReturnQuantity
				include ConvertQuantityToStock
				default to Item.StockWeight * LocalOutputQuantity
		
		CreatedBy
			default to actor
			
		LastUpdateDate
			force default to current corporate date

		OriginalPurchaseOrder
			constraint (OriginalPurchaseOrder = VendorReturn.CreatedFromPurchaseOrder)
				"OriginalPurchaseOrderShouldBeSameAsHeader"

		OriginalPurchaseOrderLine
			constraint (OriginalPurchaseOrderLineRel exists)
				"LineIsNotInOriginalPurchaseOrder"

		HSNSACCode
			if (IsHSNSACCodeEnabled
			and InventoryOrNonstockOrSpecialItem)
				if (VendorReturn.VendorClaimType.CreditMemo
				or IsCreatedFromInspectionWithRejectedQuantity
				or (VendorReturn.VendorClaimType.NoCharge
				and VendorReturn.ReplaceGoods
				and VendorReturn.ShipOrHold.Ship)
				or (VendorReturn.VendorClaimType.Chargeback
				and VendorReturn.ReplaceGoods
				and VendorReturn.ShipOrHold.Ship))
					default to OriginalPurchaseOrderLine.HSNSACCode
				
				default to Item.HSNSACCode
				
				required
					"HSN_/SACCodeIsRequired"
			else
    			cannot be entered	
    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
    				
		TaxCode
			if (TaxEntityRel.ThirdParty.InforTax
			and IsHSNSACCodeEnabled
			and (OriginalPurchaseOrderLine.Taxable
			or   OriginalPurchaseOrderLine not entered))
				if (VendorReturn.PurchaseFromLocation entered)
					if (VendorReturn.PurchaseFromLocation.VendorLocationRel.TaxRegistrationType.CompositeDealer)
        				default to HSNSACCode.NoTaxTaxCode
        			if (VendorReturn.PurchaseFromLocation.VendorLocationRel.TaxRegistrationType.SpecialEconomicZone)
        				default to HSNSACCode.ImportTaxCode
        			if (VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode entered
        			and VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRel.PostalAddress.Country.IsoCountryCode entered)
	        			if (VendorReturn.PurchaseFromLocation.VendorLocationRel.TaxRegistrationType.Registered)
							if (VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode = "IN")
								if (VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN")
									if (VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRel.PostalAddress.StateProvince entered
									and VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.StateProvince entered) 
										if (VendorReturn.PurchaseFromLocation.VendorLocationRel.CurrentAddressRel.PostalAddress.StateProvince = VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.StateProvince)
											default to HSNSACCode.IntrastateTaxCode
										else
											default to HSNSACCode.InterstateTaxCode
								else
									default to HSNSACCode.ImportTaxCode	
				else
					if (VendorReturn.Vendor.TaxRegistrationType.CompositeDealer)
						default to HSNSACCode.NoTaxTaxCode
					if (VendorReturn.Vendor.TaxRegistrationType.SpecialEconomicZone)
						default to HSNSACCode.ImportTaxCode
					if (VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode entered
					and VendorReturn.Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode entered)
						if (VendorReturn.Vendor.TaxRegistrationType.Registered)
	    					if (VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode = "IN")
	    						if (VendorReturn.Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN")
		    						if (VendorReturn.Vendor.CurrentAddressRel.PostalAddress.StateProvince entered
		    						and VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.StateProvince entered)
			    						if (VendorReturn.Vendor.CurrentAddressRel.PostalAddress.StateProvince = VendorReturn.ReturnFromLocation.PostalAddressForPurchaseOrder.StateProvince)
			    							default to HSNSACCode.IntrastateTaxCode
			    						else
			    							default to HSNSACCode.InterstateTaxCode
			    				else
		        					default to HSNSACCode.ImportTaxCode
        		required
        			"TaxCodeIsRequired"

		CatchWeightQuantity
			if (IsCatchWeightItem)
				required
					"CatchWeightItem,EnterCatchweightStockQuantity"
        	else
				cannot be entered
					"CannotEnterCatchWeightStockQuantity;ItemNotSetUpForCatchWeight"


	Actions
		PopulateBlankItem is a Set Action
			restricted
    		Parameters
    			PrmCompany		is a PurchasingCompany
    		Instance Selection
    			where (Company = PrmCompany
    			and	   ItemType.Special
    			and	   Item not entered)
    		Action Rules
    			Instance Rules
    				if (VendorItem entered)
						Item = VendorItem
					else
						Item = Description
					
		Create is a Create Action
			valid when (VendorReturn.Status.Added)
			
			Action Rules
				include ValidateOngoingCalculation

				constraint (VendorReturn.Status.Added)
					"CannotAddLineToReturnAfterAuthorization"
				
			Exit Rules
				if (IsCatchWeightItem)
					LocalReturnQuantity  	= CatchWeightQuantity
				else
					LocalReturnQuantity  	= ReturnQuantity
					
				LocalTaxCode 				= TaxCode
				LocalTaxableAmount			= DerivedUnitCost * LocalReturnQuantity
				include CalculateTaxAmount
				LocalReturnValue			= ((DerivedUnitCost * LocalReturnQuantity) + LocalInvoicedTaxAmount)
				
				invoke UpdateReturnValue VendorReturn
					invoked.PrmReturnValue 	= LocalReturnValue
				
				invoke FromVendorReturnLine PurchaseOrderLineAssetRel
					invoked.PrmReturnQuantity += ReturnQuantity   
			
				if (ItemLocationRel.BinTracked
				and ItemLocationRel.PreferredBin entered 
				and ItemLocationRel.SerialTracked.NotSerialTracked
				and ItemLocationRel.LotTracked.NotLotTracked
				and	not LocalInspectionReject)
					invoke Create VendorReturnLineDetail
						fill in fields from this instance
						invoked.Company				= Company
						invoked.VendorReturn		= VendorReturn
						invoked.VendorReturnLine	= VendorReturnLine
						invoked.DocumentType		= VendorReturnLineDetail.DocumentType.VendorReturn
						invoked.Bin					= ItemLocationRel.PreferredBin
						invoked.UnitOfMeasure		= EnteredUOM
						if (IsCatchWeightItem)
							invoked.Quantity			= CatchWeightQuantity
							invoked.SecondaryQuantity 	= ReturnQuantity
						else
							invoked.Quantity			= ReturnQuantity
						invoked.LocalSystemCreate	= true
											
				if (NonAddOnChargeDistributionsRel exists)												
					for each NonAddOnChargeDistributionsRel
						invoke Create VendorReturnLineDistribution
							fill in fields from each
							invoked.Company             = Company
							invoked.VendorReturn 		= VendorReturn
							invoked.VendorReturnLine 	= VendorReturnLine
							invoked.PostingType			= "A"
							invoked.DistributionAccount = each.DistributionAccount
							invoked.AssetInformation	= each.AssetInformation
							if (each.DistributionByPercent)
								invoked.DistributionPercent = each.DistributionPercent
							if (each.DistributionByQuantity)	
								invoked.DistributionQuantity= each.DistributionQuantity
							if (each.DistributionByAmount)	
				    			invoked.DistributionAmount	= each.DistributionAmount
							
		Update is an Update Action
			valid when (not VendorReturn.ShippedStatus)
			Action Rules
				constraint (not TemporaryHold.SentForApproval)
					"CannotUpdateWhileAwaitingApproval"

				if (OriginalPurchaseOrderLine.Item 			!= Item
				or  OriginalPurchaseOrderLine.Description 	!= Description
				or  OriginalPurchaseOrderLine.ItemType 		!= ItemType)
					initialize OriginalPurchaseOrder
					initialize OriginalPurchaseOrderLine 
				
				if  (not VendorReturn.VendorClaimType.NoCharge
				and	(ReturnQuantity changed
				or   UnitCost changed
				or   CancelQuantity changed
				or   CatchWeightQuantity changed))
					if (IsCatchWeightItem)
						LocalReturnQuantity 	= DerivedReturnCatchWeightQuantity		
					else
						LocalReturnQuantity  	= DerivedReturnQuantity

					LocalTaxCode 				= TaxCode
					LocalTaxableAmount			= DerivedUnitCost * LocalReturnQuantity
					include CalculateTaxAmount
					LocalReturnValue			+= (LocalTaxableAmount + LocalInvoicedTaxAmount)
					 
					if (IsCatchWeightItem)
						LocalReturnQuantity 	= old CatchWeightQuantity - (old CancelQuantity * EnteredUOMMultiplier)
					else
						LocalReturnQuantity 	= old ReturnQuantity - old CancelQuantity
					LocalTaxableAmount			= old DerivedUnitCost * LocalReturnQuantity
					include CalculateTaxAmount
					LocalReturnValue			-= (LocalTaxableAmount + LocalInvoicedTaxAmount)

					invoke UpdateReturnValue VendorReturn
						invoked.PrmReturnValue 	 = LocalReturnValue
						
				invoke FromVendorReturnLine PurchaseOrderLineAssetRel
					invoked.PrmReturnQuantity	+= ReturnQuantity - old ReturnQuantity
			Exit Rules
				if (ItemType.Inventoried 
					and !VendorReturn.VendorClaimType.NoCharge
					and VendorReturnLineDistributionsRel exists)
						invoke UpdateForInventoriedItem VendorReturnLineDistributionsRel
							invoked.DistributionAccount	= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
							invoked.DistributionAmount  = UnitCost * ReturnQuantity
				else
					if (!VendorReturn.VendorClaimType.NoCharge
					and VendorReturnLineDistributionsRel exists)												
						for each VendorReturnLineDistributionsRel
							invoke Update each
								invoked.DistributionAccount = each.GLTransactionDetailRel.FinanceCodeBlock
				
		Delete is a Delete Action
			valid when (!VendorReturn.ShippedStatus)
					
			Action Rules
				constraint (!VendorReturn.ShippedStatus)
					"LineCannotBeDeletedAfterShippedToVendor"			

				constraint (not TemporaryHold.SentForApproval)
					"LineCannotBeDeletedWhileAwaitingApproval"									

				constraint (not TemporaryHold.ApprovedByEngine)
					"LineCannotBeDeletedOnceApproved"	
				
				if (ItemType.Inventoried)
					constraint (PurchaseOrderReceipt not entered
					or          DocumentNumberNumeric not entered)
						"CannotDeleteRejectedItem,MustProcessReturnAndCancel"								
				
				if (PurchaseOrderReceiptLineRel.VendorReturn entered)
					constraint (!PurchaseOrderReceiptLineRel.InspectionRequired)
						"CannotCancel,PurchaseOrderReceiptLineRequiresInspection"							

				if (IsCatchWeightItem)
					LocalReturnQuantity 	= DerivedReturnCatchWeightQuantity		
				else
					LocalReturnQuantity  	= DerivedReturnQuantity				

				LocalTaxCode 				 = TaxCode
				LocalTaxableAmount			 = DerivedUnitCost * LocalReturnQuantity
				include CalculateTaxAmount
				LocalReturnValue			-= (LocalTaxableAmount + LocalInvoicedTaxAmount)
				
				invoke UpdateReturnValue VendorReturn
					invoked.PrmReturnValue 		= LocalReturnValue		
				
				invoke FromVendorReturnLine PurchaseOrderLineAssetRel
					invoked.PrmReturnQuantity	-= ReturnQuantity 
									
		
		Cancel is an Instance Action	
			valid when (VendorReturn.ShippedNotClosed)
			Parameters
				PrmCancelNewQuantity 							is a Quantity
				PrmCatchWeightCancelQuantity					is a Quantity
				PrmInventoryTransactionRequired					is Boolean
				PrmIsCancelFromPOLine							is Boolean    
			
			Action Rules
				constraint (PrmCancelNewQuantity <= ReturnQuantity)
					"CannotCancelMoreThanReturnQuantity"
				if (not PrmIsCancelFromPOLine)													
					constraint (VendorReturn.IsValidForCancel)   
						"CannotCancelReturn;CreditHasBeenReceived"												
		
				if (PrmCancelNewQuantity entered)
					LocalCancelQuantity 			= PrmCancelNewQuantity - CancelQuantity
					CancelQuantity      			= PrmCancelNewQuantity
				else
					LocalCancelQuantity = ReturnQuantity - CancelQuantity
					if (ReplacementPurchaseOrderLine entered)
						CancelQuantity  = ReturnQuantity - ReplacementPurchaseOrderLineRel.ReceivedQuantity
					else
						CancelQuantity  = ReturnQuantity
					
				if (IsCatchWeightItem)
					if (PrmCatchWeightCancelQuantity entered)
						LocalCatchWeightCancelQuantity 	= PrmCatchWeightCancelQuantity - CatchWeightCancelQuantity
						CatchWeightCancelQuantity 		= PrmCatchWeightCancelQuantity
					else
						LocalCatchWeightCancelQuantity	= CatchWeightQuantity - CatchWeightCancelQuantity
					if (ReplacementPurchaseOrderLine entered)
						CatchWeightCancelQuantity	= CatchWeightQuantity - ReplacementPurchaseOrderLineRel.CatchWeightQuantity
					else	
						CatchWeightCancelQuantity	= CatchWeightQuantity
					
				constraint (CancelQuantity <= ReturnQuantity)
					"CancelQuantityCannotBeGreaterThanReturnQuantity"		
				constraint (CatchWeightCancelQuantity <= CatchWeightQuantity)
					"CancelQuantityCannotBeGreaterThanReturnQuantity"	

				if (CancelQuantity = ReturnQuantity)
					Canceled = true

				if (IsCatchWeightItem)
					LocalReturnQuantity  	= LocalCatchWeightCancelQuantity
				else
					LocalReturnQuantity  	= LocalCancelQuantity
				LocalTaxCode 				= TaxCode
				LocalTaxableAmount			= DerivedUnitCost * LocalReturnQuantity
				include CalculateTaxAmount
				LocalReturnValue			-= (LocalTaxableAmount + LocalInvoicedTaxAmount)


				if (ReturnStockToInventoryOnVendorReturnCancel
				and IsDetailRequired)
					if (PrmCancelNewQuantity entered)
						if (TotalDetailQuantity entered)
							constraint (TotalDetailQuantity = PrmCancelNewQuantity)
								"CancelQuantityMustBeEqualToDetailQuantityToBeCancelled;TotalDetailQuantityIs<TotalDetailQuantity>"
						constraint (TotalDetailQuantity = PrmCancelNewQuantity)
							"CancelQuantityMustbeEqualToDetailQuantityToBeCancelled;MustCreateDetailsForCancel"
					else
						for each VendorReturnLineDetailsRel
							invoke CreateForCancel VendorReturnLineDetail
								fill in fields from each
								invoked.DocumentType  = "VI"
			
				invoke UpdateReturnValue VendorReturn
					invoked.PrmReturnValue 	= LocalReturnValue
				
			Exit Rules
				if (OriginalPurchaseOrderLine entered)
					invoke FastUpdate OriginalPurchaseOrderLine
						invoked.ReturnQuantity					-= CancelQuantity
						invoked.CatchWeightReturnedQuantity		-= CatchWeightCancelQuantity	

				
				if (ItemType.Inventoried
				and LocalCancelQuantity entered)
				
					invoke Unreleased.Create InventoryTransaction
						assign result to NewInventoryTransaction
						fill in fields from this instance
						invoked.InventoryLocation							= VendorReturn.ReturnFromLocation
						if (ReturnStockToInventoryOnVendorReturnCancel)
							invoked.InventoryDocumentType  					= "VI"
						else
							invoked.InventoryDocumentType  					= "VA"
						invoked.RelatedVendorReturn							= VendorReturn
						invoked.OriginatingTransaction 						= reference to VendorReturn
					
					LocalInventoryTransaction = NewInventoryTransaction.InventoryTransaction				

					LocalBin 				  = first VendorReturnLineDetailsRel.Bin

					invoke Unreleased.Create InventoryTransactionLine	
						assign result to NewInventoryTransactionLine
						fill in fields from this instance
						invoked.TransactionSystemCode 						= "PO"
						invoked.InventoryLocation						 	= VendorReturn.ReturnFromLocation
						invoked.InventoryTransaction						= LocalInventoryTransaction
						invoked.InventoryTransactionLine.LineNumber			= VendorReturnLine
						invoked.StockOnHandQuantity							= ItemLocationRel.StockOnHandQuantity
						invoked.OriginatingTransaction						= reference to this instance 
						invoked.EAMWorkOrder								= OriginalPurchaseOrderLine.EAMWorkOrder
						invoked.EAMWorkOrderActivity						= OriginalPurchaseOrderLine.EAMWorkOrderActivity
						if (Item.IsCatchWeightItem)
	        				invoked.SecondaryUOM							= EnteredUOM
	        				invoked.SecondaryUOMMultiplier					= EnteredUOMMultiplier
							invoked.SecondaryQuantity						= LocalCancelQuantity				
							invoked.TransactionUOM							= Item.StockUOM
							invoked.TransactionUOMMultiplier				= 1
							invoked.Quantity 								= LocalCatchWeightCancelQuantity	
							invoked.UnitCostInTransactionCurrency			= DerivedUnitCost					
							invoked.UnitCost								= DerivedUnitCost					
						else
							invoked.TransactionUOM							= EnteredUOM
							invoked.TransactionUOMMultiplier				= EnteredUOMMultiplier
							invoked.Quantity								= LocalCancelQuantity
							invoked.UnitCostInTransactionCurrency			= UnitCost
							invoked.UnitCost								= UnitCost
						if (VendorReturnLineDetailMultipleBinsRel exists)
							invoked.MultipleBins							= true
						else
							invoked.Bin										= LocalBin
							
					LocalInventoryTransactionLine								= NewInventoryTransactionLine.InventoryTransactionLine
					
					if (VendorReturnCancelDetailsRel exists)	
						invoke ShipFromVendorReturn VendorReturnCancelDetailsRel  
							invoked.PrmInventoryLocation						= VendorReturn.ReturnFromLocation
							invoked.PrmInventoryTransaction			    		= LocalInventoryTransaction
							invoked.PrmTransactionSystemCode					= "PO"
							invoked.PrmInventoryTransactionLine 				= LocalInventoryTransactionLine		
					
					invoke FinalRelease LocalInventoryTransaction

					if (not PrmIsCancelFromPOLine
					and (VendorReturn.VendorClaimType.NoCharge or VendorReturn.VendorClaimType.CreditMemo))	
						if (ReplacementPurchaseOrderLineRel.PurchaseOrderLineEligibleToBeCancelled)

							invoke CancelLine ReplacementPurchaseOrderLineRel
								invoked.PrmFromVendorReturn	= true
						if (not VendorReturn.ReplacementPurchaseOrder.PurchaseOrderLifeCycleState.Released)
							invoke Release VendorReturn.ReplacementPurchaseOrder
				




		Ship is an Instance Action
			restricted
			Parameters
				PrmPayablesInvoice is a PayablesInvoice
				PrmCreateIntrastatDetail					is Boolean
        		PrmIntrastatNumber							is an IntrastatNumber
        		PrmDestinationCountry						is like Country
        		PrmDestinationRegion						is like Region
        		PrmOriginCountry							is like Country
        		PrmOriginRegion								is like Region
			Local Fields
				LocalTrigger								is Alpha 1
			Action Rules


				
				if (IsBinTracked)
					constraint (VendorReturnLineDetailsWithMissingBinRel not exists)
						"VendorReturnLineDetailsWithMissingBinExistForLine<VendorReturnLine>" 
				
				if (InventoryItemDetailRequired)
					constraint (DetailsInBalance)
						"<DerivedMessageForQuantityOutOfBalance>"	
									
				if (PurchaseOrderReceipt entered)
					constraint (!PurchaseOrderReceipt.Status.Unreleased)
						"CannotShipVendorReturnUntilPurchaseOrderReceiptsAreReleased"							
						
					if (OriginalPurchaseOrderLineAdjustmentAndInspectionLineRel.PurchaseOrderReceipt = PurchaseOrderReceipt)
						constraint (OriginalPurchaseOrderLineAdjustmentAndInspectionLineRel.Status.Released)
							"CannotShipVendorReturnUntilAdjustmentLinesReleased"								

				if (ItemType.Inventoried)									
					if (VendorReturn.VendorClaimType.NoCharge)													
						if (DocumentNumberNumeric entered)
							LocalUnitCost = PurchaseOrderReceiptLineRel.DerivedUnitCostInReceivedUOM
						else
							constraint (ItemLocationRel exists)
								"ItemLocationDoesNotExists"
							if (ItemLocationRel.NoCharge)
								LocalZeroCost = true
							else	
								if (Company.InventoryCompany.CostingMethod.AverageCosting)
									LocalUnitCost = ItemLocationRel.DerivedItemAverageCost
								if (Company.InventoryCompany.CostingMethod.StandardCosting)
									LocalUnitCost = ItemLocationRel.StandardCost
								if (Company.InventoryCompany.CostingMethod.FirstInFirstOut
								or  Company.InventoryCompany.CostingMethod.LastInFirstOut)
									if (DerivedReturnQuantityInStockUOM < 0)
										LocalRemainingQuantity = DerivedReturnQuantityInStockUOM * -1
									else	
										LocalRemainingQuantity = DerivedReturnQuantityInStockUOM
									
									include UpdateInventoryCostHistory
									
									LocalChangedQuantity = DerivedReturnQuantityInStockUOM
									
									if (LocalRemainingQuantity entered)
										LocalChangedQuantity = DerivedReturnQuantityInStockUOM - LocalRemainingQuantity
									if (LocalChangedQuantity < 0)
										LocalUnitCost = LocalTotalInventoryHistoryCost /(LocalChangedQuantity * -1)
									if (LocalChangedQuantity = 0)
										initialize LocalUnitCost
									if (LocalChangedQuantity > 0)
										LocalUnitCost = LocalTotalInventoryHistoryCost / LocalChangedQuantity
							
							if (LocalUnitCost entered
							and EnteredUOM entered
							and EnteredUOM != Item.StockUOM)
								LocalInputCost = LocalUnitCost
								include ConvertQuantityToAlternate
								LocalUnitCost =	LocalOutputUnitCost
						
						if (LocalUnitCost not entered
						and ItemLocationRel.StockOnHandQuantity > 0)
							LocalZeroCost = true
							
						if (LocalUnitCost > 0			
						or (LocalUnitCost = 0
						and LocalZeroCost))
							UnitCost = LocalUnitCost


					

					if (CatchWeightQuantity entered)
						LocalReturnQuantity 	= DerivedReturnCatchWeightQuantity		
					else
						LocalReturnQuantity  	= DerivedReturnQuantity

					LocalTaxCode 				= TaxCode
					LocalTaxableAmount			= DerivedUnitCost * LocalReturnQuantity
					include CalculateTaxAmount
					LocalUnitCost				= DerivedUnitCost + LocalLandedTaxOnUnitCost					
					
					LocalBin					= first VendorReturnLineDetailsRel.Bin


					invoke Unreleased.Create InventoryTransactionLine	
						assign result to NewInventoryTransactionLine
						fill in fields from this instance
						invoked.OriginatingTransaction 							= reference to this instance
						invoked.TransactionSystemCode 							= "PO"
						invoked.InventoryLocation						 		= VendorReturn.ReturnFromLocation
						invoked.InventoryTransaction							= VendorReturn.RelatedInventoryTransaction
						invoked.InventoryTransactionLine.LineNumber				= VendorReturnLine
						invoked.StockUOM										= Item.StockUOM
						invoked.UnitCostInTransactionCurrency					= LocalUnitCost	
						invoked.CurrentCost										= DerivedLocalUnitCostInBaseCurrency
						invoked.BaseCost										= DerivedLocalUnitCostInBaseCurrency
						invoked.UnitCost										= DerivedLocalUnitCostInBaseCurrency 
						invoked.FromCurrency									= VendorReturn.Currency
						invoked.ToCurrency										= Company.Currency	
						invoked.StockOnHandQuantity								= ItemLocationRel.StockOnHandQuantity	
						if (IsCatchWeightItem)
	        				invoked.SecondaryUOM								= EnteredUOM
	        				invoked.SecondaryUOMMultiplier						= EnteredUOMMultiplier
	        				invoked.SecondaryQuantity							= DerivedReturnQuantity 
							invoked.TransactionUOM								= Item.StockUOM
							invoked.TransactionUOMMultiplier					= 1
						else									
							invoked.TransactionUOM								= EnteredUOM
							invoked.TransactionUOMMultiplier					= EnteredUOMMultiplier 
						invoked.Quantity										= LocalReturnQuantity
						if (VendorReturnLineDetailMultipleBinsRel exists)
							invoked.MultipleBins								= true
						else
							invoked.Bin											= LocalBin
						invoked.OffsetAccount 									= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
						if (PurchaseOrderLineAddOnChargesRel exists)
							invoked.AddOnChargeUnitCost							= DerivedAddOnChargeEnteredUnitCost
							invoked.AddOnCostAccount							= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
						invoked.OriginatingTransaction							= reference to this instance 
						invoked.EAMWorkOrder								    = OriginalPurchaseOrderLine.EAMWorkOrder
						invoked.EAMWorkOrderActivity						    = OriginalPurchaseOrderLine.EAMWorkOrderActivity

					LocalInventoryTransactionLine								= NewInventoryTransactionLine.InventoryTransactionLine
					

					if (VendorReturnLineDetailsRel exists)
						invoke ShipFromVendorReturn VendorReturnLineDetailsRel  
							invoked.PrmInventoryLocation						= VendorReturn.ReturnFromLocation
							invoked.PrmInventoryTransaction			    		= VendorReturn.RelatedInventoryTransaction
							invoked.PrmTransactionSystemCode					= "PO"
							invoked.PrmInventoryTransactionLine 				= LocalInventoryTransactionLine							
					
					if (Company.InventoryCompany.CostingMethod.StandardCosting and ItemLocationRel.StandardCost entered
					and not IsCreatedFromRejectedInspection)
						LocalOffsetUnitCost = DerivedStandardCostInVRCurrency 
					else
					if (VendorReturn.VendorClaimType.NoCharge)
						LocalOffsetUnitCost = OriginalPurchaseOrderLine.DerivedLandedUnitCostInStockUOM 

					if (OriginalPurchaseOrder entered)
						if (OriginalPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
							if (PurchaseOrderReceipt entered
							and PurchaseOrderReceiptLineRel exists)
								LocalTransactionDate	= PurchaseOrderReceiptLineRel.ReceivedDate
							else
								LocalTransactionDate	= first OriginalPurchaseOrderLine.ReleasedPurchaseOrderReceiptLinesRel.ReceivedDate
						else
							LocalTransactionDate		= OriginalPurchaseOrder.PurchaseOrderDate
					else
						if (VendorReturn.ShipmentDate entered)
							LocalTransactionDate		= VendorReturn.ShipmentDate


					invoke Release NewInventoryTransactionLine.InventoryTransactionLine
						invoked.PrmTransactionCurrency			= VendorReturn.Currency
						invoked.PrmOverrideCreditAccount		= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
						if (IsCreatedFromRejectedInspection)
							invoked.PrmOverrideOffsetAccount	= VendorReturn.ReturnFromLocation.InspectionHoldAccount
							invoked.PrmInspectionHoldQuantity				= DerivedInspectionRejectedQuantity
							invoked.PrmInspectionHoldCatchWeightQuantity	= DerivedInspectionRejectedCatchWeightQuantity
						invoked.PrmOffsetUnitCost							= DerivedOffsetUnitCostInBaseCurrency
						invoked.PrmOffsetUnitCostInTransactionCurrency		= LocalOffsetUnitCost
						invoked.PrmTransactionDate							= LocalTransactionDate
					

					if (PurchaseOrderReceipt entered) 
						invoke UpdateFromTransaction InventoryCostHistoryForPOReceiptRel
							invoked.PrmReceivedQuantity		= DerivedReturnQuantityInStockUOM * -1
					else	
						if (not LocalCostHistoryUpdated)
							LocalRemainingQuantity			= DerivedReturnQuantityInStockUOM
							include UpdateInventoryCostHistory
				
				else 
					if (VendorReturnLineDistributionsRel exists)
						invoke Release VendorReturnLineDistributionsRel
				
				if (OriginalPurchaseOrderLine entered)
					invoke FastUpdate OriginalPurchaseOrderLine
						invoked.ReturnQuantity					+= ReturnQuantity
						invoked.CatchWeightReturnedQuantity		+= CatchWeightQuantity	

				
				if (VendorReturn.VendorClaimType.Chargeback)
					if (VendorReturn.RelatedPayablesInvoice not entered)  
						for each VendorReturn.VendorReturnLinesRel
							if (each.TaxCode  entered
							and each.UnitCost entered)
								LocalTaxCode			= each.TaxCode
								if (each.IsCatchWeightItem)
									LocalReturnQuantity = each.DerivedReturnCatchWeightQuantity
								else
									LocalReturnQuantity	= each.DerivedReturnQuantity
								LocalTaxableAmount		= each.DerivedUnitCost * LocalReturnQuantity


								include CalculateTaxAmount

								LocalTotalTaxableAmount	+= LocalTaxableAmount
								LocalTotalTaxAmount     += LocalInvoicedTaxAmount
						





						
						invoke Unreleased.CreateInvoice PayablesInvoice
							assign result to NewPayablesInvoice 
							fill in fields from this instance
								except invoked.TaxCode
							invoked.Company							= Company
							invoked.ProcessLevel					= VendorReturn.ProcessLevel
							invoked.DueDate							= current corporate date
							invoked.Invoice							= VendorReturn
							invoked.InvoiceDate						= current corporate date
							invoked.InvoiceType						= "C"
							invoked.InvoiceSource					= "N"	
							invoked.InvoiceCurrency					= VendorReturn.Currency
							invoked.TransientLineTax				= true						
							invoked.TaxAmount						= LocalTotalTaxAmount
							invoked.TaxableAmount					= LocalTotalTaxableAmount
							invoked.ReasonCode						= VendorReturn.ReasonCode
							invoked.InvoiceAmount.CurrencyAmount	= VendorReturn.ReturnValue 
						

						invoke UpdatePayablesInvoice VendorReturn
							invoked.PrmRelatedPayablesInvoice   	= NewPayablesInvoice.PayablesInvoice
						
						invoke UpdateCreditReceived VendorReturn
							invoked.PrmCreditReceived   += VendorReturn.ReturnValue
						

						if (VendorReturnHeaderChargebackCommentsRel exists)
							for each VendorReturnHeaderChargebackCommentsRel
								invoke SystemCreate PayablesInvoiceComment
									invoked.Company							= Company
									invoked.PayablesInvoice					= VendorReturn.RelatedPayablesInvoice
									invoked.Title							= each.Name
									invoked.Comment							= each.Comment
									invoked.Type							= PayablesInvoiceComment.Type.VendorReturn
					

					if (VendorReturnLineChargebackCommentsRel exists)
						for each VendorReturnLineChargebackCommentsRel
							invoke SystemCreate PayablesInvoiceComment
								invoked.Company							= Company
								invoked.PayablesInvoice					= VendorReturn.RelatedPayablesInvoice
								invoked.Title							= each.Name
								invoked.Comment							= DerivedLineNumber + each.Comment
								invoked.Type							= PayablesInvoiceComment.Type.VendorReturn
					

					if (CatchWeightQuantity entered)
						LocalReturnQuantity 	= DerivedReturnCatchWeightQuantity		
					else
						LocalReturnQuantity  	= DerivedReturnQuantity
					if (TaxCode entered)
						LocalTaxableAmount 		= (DerivedUnitCost * LocalReturnQuantity)



						
					if (ItemType.Inventoried)
						invoke Create PayablesInvoiceDistribution
							invoked.Company								= Company
							invoked.Vendor								= Vendor
							invoked.PayablesInvoice						= VendorReturn.RelatedPayablesInvoice
							invoked.DistributionAmount.CurrencyAmount 	= ((LocalReturnQuantity * DerivedUnitCost) * -1)
							invoked.GLTransactionAmount					= ((LocalReturnQuantity * DerivedUnitCost) * -1)
							invoked.GLFinanceCodeBlock					= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
							invoked.DistributionAmount.ExchangeDate		= VendorReturn.ReturnAuthorizationDate
							invoked.DistributionAccount					= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
							invoked.HSNSACCode							= HSNSACCode

							if (TaxCode entered)	
								invoked.TaxCode							= TaxCode
								invoked.TaxIndicator           			= TaxIndicator.Taxable
								invoked.TaxType							= DerivedTaxType
								invoked.TaxableAmount 					= (LocalTaxableAmount * -1)
					else 
						if (VendorReturnLineDistributionsRel exists)
							for each VendorReturnLineDistributionsRel
								if (each.DistributionPercent entered)
									LocalDistributionPercent 	= (each.DistributionPercent / 100)								
								LocalDistributionsAmount 		= each.DistributionAmount
								AccountingEntity 				= Company.AccountingEntity

								if (TaxCode entered)



									if (LocalTaxableAmount entered)
										if (LocalTaxableAmount <= LocalDistributionsAmount)
											LocalDistributionTaxableAmount 		= LocalTaxableAmount
										else
											LocalDistributionTaxableAmount		= LocalDistributionsAmount
										LocalTaxableAmount -= LocalDistributionsAmount
										if (LocalTaxableAmount < 0)
											initialize LocalTaxableAmount										
									else
										initialize LocalDistributionTaxableAmount								



								

								invoke Create PayablesInvoiceDistribution
									assign result to NewPayablesInvoiceDistribution								
									fill in fields from each								
									invoked.PayablesInvoice 		 				= VendorReturn.RelatedPayablesInvoice
									invoked.GLFinanceCodeBlock						= each.DistributionAccount	
									invoked.DistributionAmount.CurrencyAmount	 	= (LocalDistributionsAmount * -1)
									invoked.DistributionAmount.ExchangeDate		 	= VendorReturn.ReturnAuthorizationDate
									invoked.GLTransactionAmount 	 				= (LocalDistributionsAmount * -1)
									invoked.HSNSACCode							    = HSNSACCode														
									if (each.DistributionPercent entered)
										invoked.DistributionAmount.CurrencyAmount 	-= LocalDistributionAmount * LocalDistributionPercent
									else
									if (each.DistributionQuantity entered)
										invoked.DistributionAmount.CurrencyAmount 	-= UnitCost * each.DistributionQuantity
									else	
										invoked.DistributionAmount.CurrencyAmount 	-= LocalDistributionsAmount
									if (TaxCode entered)							
										invoked.TaxIndicator						= TaxIndicator.Taxable	
										invoked.TaxCode								= TaxCode	
										invoked.TaxType								= DerivedTaxType
										invoked.TaxableAmount 						= (LocalDistributionTaxableAmount * -1)
										
								

				IntrastatNumber = PrmIntrastatNumber
				if (PrmCreateIntrastatDetail)
					initialize IntrastatProcessing
					IntrastatProcessing.InFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					IntrastatProcessing.TaxEntity						= Company.AccountingEntity
					IntrastatProcessing.DetailFc						= IntrastatProcessing.DetailFc.Create
					IntrastatProcessing.DestinationCountry				= PrmDestinationCountry
					IntrastatProcessing.DestinationRegion				= PrmDestinationRegion
					IntrastatProcessing.OriginCountry					= PrmOriginCountry
					IntrastatProcessing.OriginRegion					= PrmOriginRegion
					LocalTrigger										= IntrastatProcessing.CheckCountries
					IntrastatProcessing.FiscalYear						= current year
					IntrastatProcessing.IntrastatNumber					= IntrastatNumber
					IntrastatProcessing.BaseAmount						= ReturnLineExtendedAmount
					IntrastatProcessing.ICNCode				  			= ICNCode
					IntrastatProcessing.StockWeight						= StockWeight
					IntrastatProcessing.SupplementaryUOM				= ICNCode.SupplementaryUOM
					IntrastatProcessing.SupplementaryQuantity 			= SupplementaryQuantity
					IntrastatProcessing.LineNumber						= VendorReturnLine
					LocalTrigger 										= IntrastatProcessing.MainTrigger
				
					if (IntrastatProcessing.OutputErrorNumber entered)
						constraint (IntrastatProcessing.OutputErrorMessage not entered)
							"<IntrastatProcessing.OutputErrorMessage>"
					
				
					
		Authorize is an Instance Action
			restricted
			Action Rules
				if (InventoryOrNonstockItem
				and ReturnQuantity entered
				and Item.IsCatchWeightItem)
					constraint (CatchWeightQuantity entered)
						"CatchWeightQuantityIsRequiredForLine<VendorReturnLine>"	
			
				if (OriginalPurchaseOrder entered
				and OriginalPurchaseOrderLine entered)
					LocalTotalReturnQuantity     += DerivedReturnQuantityInPOUOM - DerivedCancelQuantityInPOUOM
					
					for each ReturnLinesForPurchaseOrderLineRel	
						LocalTotalReturnQuantity += each.DerivedReturnQuantityInPOUOM - each.DerivedCancelQuantityInPOUOM
					
					if (!VendorReturn.Dropship)
						constraint (LocalTotalReturnQuantity <= OriginalPurchaseOrderLine.ReceivedQuantity)
							"CannotReturnMoreThanWhatWasReceivedForPurchaseOrderOnLine<VendorReturnLine>"		
				
				if (!ItemType.Inventoried)
					for each VendorReturnLineDistributionsRel
						LocalDistributionQuantity 	+= each.DistributionQuantity
						LocalPercent 				+= each.DistributionPercent
						LocalDistributionAmount		+= each.DistributionAmount
																									
					constraint (HasDistribution)
						"CannotAuthorize,MissingDistributionsForLine<VendorReturnLine>" 			
						
					if (LocalDistributionQuantity entered)	
						constraint (ReturnQuantity = LocalDistributionQuantity)
							"CannotAuthorize,Line<VendorReturnLine>DistributionsOutOfBalance"		
					else
					if (LocalPercent entered)
						constraint (LocalPercent = 100%)
							"CannotAuthorize,Line<VendorReturnLine>DistributionsOutOfBalance"		
					else
					if (LocalDistributionAmount entered)
						LocalAmount = ReturnQuantity * UnitCost
						constraint (LocalDistributionAmount = LocalAmount)
							"CannotAuthorize,Line<VendorReturnLine>DistributionsOutOfBalance"		
				
				if (VendorReturn.Dropship)
					constraint (!ItemType.Inventoried)
						"CannotAuthorize,DropshipWithInventoriedItemOnLine<VendorReturnLine>"			
				
				

		AutoClose is an Instance Action
			restricted
			Parameters
		 		PrmCreditAmount			is an InternationalAmount
			
			Action Rules
				LocalCreditAmount = PrmCreditAmount
				if (Contract entered)
					include CloseActionToUpdateAmounts
				
		Close is an Instance Action
			restricted
			Parameters
				PrmInventoryTransaction is like InventoryTransaction
			Action Rules
				if (Contract entered)
					include CloseActionToUpdateAmounts

				if (TaxEntityRel.ThirdParty.TaxEngine)
					TemporaryHold = TemporaryHold.ApprovedByEngine
				
				if (PrmInventoryTransaction entered
				and	VendorReturn.VendorClaimType.CreditMemo)
					if (ItemType.Inventoried)
						LocalQuantityDifference	= ReturnQuantity - ReplacementPurchaseOrderLineRel.ReceivedQuantity
						if (Item.IsCatchWeightItem)
							LocalCatchweightQuantityDifference	= CatchWeightQuantity - ReplacementPurchaseOrderLineRel.CatchWeightQuantity
					if (VendorReturn.ReturnValue != VendorReturn.CreditReceived)

						LocalAdjustmentLineAmount = ((VendorReturn.ReturnValue - VendorReturn.CreditReceived) / VendorReturn.DerivedTotalLineCount)
































					if (Item.IsCatchWeightItem)
						LocalTransactionQuantity = LocalCatchweightQuantityDifference
					else
						LocalTransactionQuantity = LocalQuantityDifference
					AccountingEntity = Company.AccountingEntity	
					if (ItemType.Inventoried 
					and HasQuantityForAdjustment 
					and VendorReturn.ReturnLossCost not = 0)
						if (LocalUnitCost entered)
							LocalTransactionUnitCost  =  LocalUnitCost / LocalTransactionQuantity
						else
							LocalTransactionUnitCost  =  LocalAdjustmentLineAmount / LocalTransactionQuantity
						invoke Unreleased.Create InventoryTransactionLine			
							assign result to NewInventoryTransactionLine
							fill in fields from this instance
							invoked.OriginatingTransaction 							= reference to this instance
							invoked.TransactionSystemCode 							= "PO"
							invoked.InventoryLocation						 		= VendorReturn.ReturnFromLocation
							invoked.InventoryTransaction							= PrmInventoryTransaction
							invoked.InventoryTransactionLine.LineNumber				= VendorReturnLine
							invoked.StockUOM										= Item.StockUOM
							invoked.StockOnHandQuantity								= ItemLocationRel.StockOnHandQuantity
							invoked.UnitCost										= LocalTransactionUnitCost
							invoked.UnitCostInTransactionCurrency   				= LocalTransactionUnitCost
							invoked.BaseCost										= LocalTransactionUnitCost
							invoked.CurrentCost										= LocalTransactionUnitCost
							invoked.Quantity										= LocalTransactionQuantity
							if (Item.IsCatchWeightItem)
								invoked.SecondaryQuantity							= LocalQuantityDifference
								invoked.TransactionUOM								= Item.StockUOM
								invoked.TransactionUOMMultiplier					= 1
								invoked.SecondaryUOM								= EnteredUOM
								invoked.SecondaryUOMMultiplier						= EnteredUOMMultiplier		
							else
								invoked.TransactionUOM								= EnteredUOM
								invoked.TransactionUOMMultiplier					= EnteredUOMMultiplier
							if (ItemLocationRel.BinTracked)
								invoked.MultipleBins							= true
		
		ReopenFromInvoice is an Instance Action
			restricted
			Action Rules
				if (Contract entered)
					LocalReopenFromInvoice = true
					include CloseActionToUpdateAmounts

		UpdateReturnStockToInventoryOnVendorReturnCancel is an Instance Action
			restricted
			Parameters
				PrmReturnStockToInventoryOnVendorReturnCancel	is Boolean
				
			Action Rules
				if (CancelQuantity not entered
				and ItemType.Inventoried)
					ReturnStockToInventoryOnVendorReturnCancel = PrmReturnStockToInventoryOnVendorReturnCancel
					
		UpdateReplacementPurchaseOrderLines is an Instance Action
			restricted
			Action Rules
				if (ReplacementPurchaseOrderLineRel not exists)
					invoke Unreleased.Create PurchaseOrderLine
						assign result to NewPurchaseOrderLineView
						fill in fields from this instance
							except invoked.ReturnQuantity
							except invoked.ItemGTIN
						invoked.PurchaseOrder 			= VendorReturn.ReplacementPurchaseOrder
						invoked.BypassDistributionCreation = true 
						invoked.Quantity				= ReturnQuantity
						invoked.ShipToLocation			= VendorReturn.ReturnFromLocation
						if (VendorReturn.VendorRequestedReplacementDate entered)
							invoked.EarlyDeliveryDate = VendorReturn.VendorRequestedReplacementDate
						else
							invoked.EarlyDeliveryDate = VendorReturn.ShipmentDate
						
						if (VendorReturn.VendorClaimType.NoCharge)
							invoked.CostOption			= CostOption.NoCharge
							initialize invoked.Contract
							initialize invoked.ContractLine
						else
							if (TaxCode entered)                 
								invoked.Taxable           = true
							
						invoked.EnteredBuyUOM					= EnteredUOM			
						invoked.VendorBuyUnitCost				= UnitCost
						invoked.CostCode						= CostCode.Entered
						invoked.TransientBypassCostDefaulting	= true
						if (OriginalPurchaseOrderLine.DistributionBy entered)
							invoked.DistributionBy			= OriginalPurchaseOrderLine.DistributionBy
						else
							if (first VendorReturnLineDistributionsRel.DistributionByQuantity)								
								invoked.DistributionBy = 2
							else
							if (first VendorReturnLineDistributionsRel.DistributionByAmount)								
								invoked.DistributionBy = 1
							else 								
								invoked.DistributionBy = 0	
						invoked.EAMWorkOrder					= OriginalPurchaseOrderLine.EAMWorkOrder
						invoked.EAMWorkOrderActivity			= OriginalPurchaseOrderLine.EAMWorkOrderActivity	
						invoked.CommodityCode					= OriginalPurchaseOrderLine.CommodityCode
					ReplacementPurchaseOrderLine 		= NewPurchaseOrderLineView.PurchaseOrderLine
					
					if (VendorReturnLineDistributionsRel exists)						
						for each VendorReturnLineDistributionsRel							
				  			LocalDistributionQuantity 	+= each.DistributionQuantity
							LocalPercent 				+= each.DistributionPercent
							LocalDistributionAmount		+= each.DistributionAmount				  			
				  			if (!ItemType.Inventoried)
					  			invoke Create PurchaseOrderLineDistribution

				  					invoked.Company					= Company
				    				invoked.PurchaseOrder			= VendorReturn.ReplacementPurchaseOrder 
				    				invoked.PurchaseOrderLine		= ReplacementPurchaseOrderLine
				    				invoked.DistributionAccount 	= each.DistributionAccount					    				

				    				if (OriginalPurchaseOrderLine.DistributionBy.ByPercent
				    				or each.DistributionByPercent)				    					
										invoked.DistributionPercent = each.DistributionPercent
									if (OriginalPurchaseOrderLine.DistributionBy.ByQuantity
									or each.DistributionByQuantity)	
										invoked.DistributionQuantity= each.DistributionQuantity
									if (OriginalPurchaseOrderLine.DistributionBy.ByAmount
									or each.DistributionByAmount)	
						    			invoked.DistributionAmount	= each.DistributionAmount
						    		invoked.TransientBypassCommittedContractValidation = true
					
					else                                                 
						if(NonAddOnChargeDistributionsRel exists)
							for each NonAddOnChargeDistributionsRel					  			
					  			if (not OriginalPurchaseOrderLine.IsInventoryType)
						  			invoke Create PurchaseOrderLineDistribution

					  					invoked.Company					= OriginalPurchaseOrder.Company
					    				invoked.PurchaseOrder			= VendorReturn.ReplacementPurchaseOrder 
					    				invoked.PurchaseOrderLine		= ReplacementPurchaseOrderLine
					    				invoked.DistributionAccount 	= each.DistributionAccount				    				
					    				if (OriginalPurchaseOrderLine.DistributionBy.ByPercent)				    					
											invoked.DistributionPercent = each.DistributionPercent
										if (OriginalPurchaseOrderLine.DistributionBy.ByQuantity)	
											invoked.DistributionQuantity= each.DistributionQuantity
										if (OriginalPurchaseOrderLine.DistributionBy.ByAmount)	
							    			invoked.DistributionAmount	= each.DistributionAmount				    					
							    		invoked.TransientBypassCommittedContractValidation = true
				else
					if (VendorReturn.VendorClaimType.NoCharge)
						if (ReplacementPurchaseOrderLineRel.CostOption.NoCharge)
							if (GlobalLineType entered)
								invoke Update ReplacementPurchaseOrderLineRel
									invoked.GlobalLineType = GlobalLineType			
						else
							invoke Update ReplacementPurchaseOrderLineRel
								invoked.GlobalLineType 	= GlobalLineType
								invoked.CostOption		= "2"

		SetDetailsInBalance is an Instance Action
			restricted
			Action Rules
				if (InventoryItemDetailRequired)
					initialize TotalQuantity
					initialize TotalUDIQuantity
					initialize TotalCatchWeightQuantity
					initialize DetailsInBalance				
					if (IsDetailRequired)
						for each VendorReturnLineDetailsRel
							if (IsCatchWeightItem)
								TotalQuantity 				+= each.SecondaryQuantity	
								TotalCatchWeightQuantity 	+= each.Quantity 			
							else
								TotalQuantity 			 	+= each.Quantity
					else
						TotalQuantity					= ReturnQuantity
	
					if (IsUDIRequired)
						for each PurchaseOrderUDIDetailReturnRel
							TotalUDIQuantity 			+= each.Quantity
					else
						TotalUDIQuantity				= ReturnQuantity 
							
					if (TotalQuantity 					= ReturnQuantity
					and TotalUDIQuantity            	= ReturnQuantity)
						if (IsCatchWeightItem)
							LocalCatchWeightQuantity 	= true	
							if (TotalCatchWeightQuantity	= CatchWeightQuantity)
								DetailsInBalance 		= true
						else
							DetailsInBalance 			= true
					
		CreateDistributions is an Instance Action
			valid when (CanCreateDistributions)
			Parameters
				PrmDistributionCode			is a PayablesDistributionCode
			
			Parameter Rules
				PrmDistributionCode
					required
					
			Action Rules
				constraint (!VendorReturnLine.VendorReturn.ShippedStatus)
					"CannotCreateDistributionsOnShippedReturns"									
				
				for each PrmDistributionCode.PayablesDistributionCodeDetailRel
					invoke Create VendorReturnLineDistribution
						fill in fields from each
						invoked.Company				= Company
						invoked.VendorReturn		= VendorReturn
						invoked.VendorReturnLine	= VendorReturnLine
						invoked.DistributionPercent = each.DistributionPercent
						invoked.PostingType			= "I1"
							
		BuildReturnRebateInvoiceLinesForOneContract is a Set Action			
			completion message is "LoadOfReturnRebatesInvoiceLinesForAContractHasStarted;Check'MyScheduledActions'ForCompletion"
			restricted
			run in foreground
			Parameters
				PrmContractGroup			is a ContractGroup	
				PrmContract					is a Contract
				PrmCompany					is Numeric size 4
				PrmPoNumber					is like PurchaseOrder
				PrmPoRelease				is Numeric size 4
				PrmPoCode					is AlphaUpper size 4
				PrmLineNbr					is like PurchaseOrderLine
				PrmEffectiveDate 			is Date
				PrmExpirationDate   		is Date
				PrmCommCodes				is Alpha size 35
				PrmManufacturerInformation	is a Manufacturer
				PrmPurchMajcl				is Alpha size 4
				PrmPurchMincl				is Alpha size 4
				PrmIcsegment				is AlphaUpper size 2
				PrmIcfamily					is AlphaUpper size 2
				PrmIcclass					is AlphaUpper size 2
				PrmIccommodity				is AlphaUpper size 2
    			PrmMfgContract				is Numeric size 15
    			PrmLocation					is AlphaUpper size 5

			Instance Selection
				where ((PrmCompany					= Company
				and     PrmPoNumber					= OriginalPurchaseOrder
				and     PrmLineNbr					= OriginalPurchaseOrderLine)
				and    (VendorReturn.CreditReceived	entered
				and    !VendorReturn.VendorClaimType.NoCharge)
				and  (((VendorReturn.CloseDate		entered)
				and    (VendorReturn.CloseDate		>= PrmEffectiveDate	
				and     VendorReturn.CloseDate		<= PrmExpirationDate)
				and    (VendorReturn.Status.Closed))
				or    ((VendorReturn.CloseDate		not entered)
				and    (VendorReturn.ReturnAuthorizationDate	> PrmEffectiveDate - 6 months))))

			Sort Order
				Company
				OriginalPurchaseOrder
				OriginalPurchaseOrderLine

			Action Rules
				Instance Rules
					LocalContractGroup			= PrmContractGroup
					LocalContract				= PrmContract

					if (VendorReturn.VendorClaimType.CreditMemo)
						LocalInvoiceNumber				= first PayablesInvoicesRel.Invoice
						LocalReturnCreditAmount			= (first PayablesInvoicesRel.InvoiceAmount * -1)
					else
						LocalInvoiceNumber				= VendorReturn
						LocalReturnCreditAmount			= VendorReturn.CreditReceived
						
					LocalMfgContract				= PrmMfgContract
					LocalCmContract					= PrmContract
					LocalOriginalContract			= OriginalPurchaseOrderLine.DerivedManufacturerContract
					LocalUnitCost					= DerivedManufacturerUnitCost * -1
					if (VendorPriceUOMMultiplier	entered)
						LocalQuantity				= ReturnQuantity * EnteredUOMMultiplier / VendorPriceUOMMultiplier
					else
						LocalQuantity				= ReturnQuantity

					if (LocalReturnCreditAmount		!= VendorReturn.ReturnValue)
						LocalQuantity				= (LocalReturnCreditAmount / (UnitCost * VendorPriceUOMMultiplier))							

					LocalPurchaseOrder				= OriginalPurchaseOrder
					LocalPurchaseOrderLine			= OriginalPurchaseOrderLine
					if (CreditMemoPayablesInvoiceRel exists)
						LocalPayablesInvoice		= first CreditMemoPayablesInvoiceRel.PayablesInvoice
					else
						LocalPayablesInvoice		= first PayablesInvoicesRel.PayablesInvoice
					LocalPayablesInvoiceDetail		= first ReturnLinePayablesInvoiceDetailsRel.PayablesInvoiceDetail
					LocalLocation					= PrmLocation
					LocalManufacturerInformation	= PrmManufacturerInformation
					LocalManufacturerUnitCost		= DerivedManufacturerUnitCost * -1
					LocalReturnUnitCost				= DerivedReturnUnitCost * -1
					LocalItem						= Item
					LocalCommCodes					= PrmCommCodes
					LocalPOLineCommodityCode		= CommodityCodeRel.CommodityCode
					LocalPurchMajcl					= PrmPurchMajcl
					LocalPurchMincl					= PrmPurchMincl
					LocalIcItemCode.UNSPSCSegment	= PrmIcsegment
					LocalIcItemCode.UNSPSCFamily	= PrmIcfamily
					LocalIcItemCode.UNSPSCClass		= PrmIcclass
					LocalIcItemCode.UNSPSCCommodity	= PrmIccommodity
					LocalPoDate						= OriginalPurchaseOrder.PurchaseOrderDate
    				LocalCurrencyCode				= OriginalPurchaseOrder.Currency
	    			LocalExchangeRate				= OriginalPurchaseOrder.ReceiptCurrencyConversionRate
					for each QualifierItemsForContractRel
						include ProcessContractRebateQualifiers
						
					if (LocalCommCodes entered)
						I1 = 1
						while (I1 < 7)
							if (LocalPOLineCommodityCode.Segment[I1] entered)
								initialize LocalCommodityCode
								I2 = 1
								while (I2 <= I1)
									LocalCommodityCode.Segment[I2]  	= LocalPOLineCommodityCode.Segment[I2]
									I2									+= 1
								for each QualifierCodesLocalCommodityCodeForContractRel
									include ProcessContractRebateQualifiers
							I1	+= 1
																	
					if (LocalManufacturerInformation.ManufacturerCode		entered)
						for each QualifierCodesManufInfoLevel1ForContractRel
							include ProcessContractRebateQualifiers
							
						if (LocalManufacturerInformation.ManufacturerDivision		entered)
							for each QualifierCodesManufInfoLevel2ForContractRel
								include ProcessContractRebateQualifiers
								
					if (LocalPurchMajcl 	entered)
						for each QualifierCodesPurchClassLevel1ForContractRel
							include ProcessContractRebateQualifiers
							
						if (LocalPurchMincl	entered)
							for each QualifierCodesPurchClassLevel2ForContractRel
								include ProcessContractRebateQualifiers
								
					if (LocalIcItemCode.UNSPSCSegment 		entered)
						for each QualifierCodesUnspscCodeLevel1ForContractRel
							include ProcessContractRebateQualifiers
							
						if (LocalIcItemCode.UNSPSCFamily		entered)
							for each QualifierCodesUnspscCodeLevel2ForContractRel
								include ProcessContractRebateQualifiers
								
							if (LocalIcItemCode.UNSPSCClass		entered)
								for each QualifierCodesUnspscCodeLevel3ForContractRel
									include ProcessContractRebateQualifiers
									
								if (LocalIcItemCode.UNSPSCCommodity		entered)
									for each QualifierCodesUnspscCodeLevel4ForContractRel
										include ProcessContractRebateQualifiers

		PutOnHold is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.SentForApproval
					
		TaxEngineApprove is an Instance Action 
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.ApprovedByEngine
					
		TaxEngineReject is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.RejectedByEngine

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeVendorReturnLineCommentRel
				invoke Purge PurgeVendorReturnLineDistributionsRel
				invoke Purge PurgeVendorReturnLineDetailRel
		
					
