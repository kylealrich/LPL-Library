BudgetImport is a BusinessClass
	owned by GeneralLedger
	prefix is BUDI

	Ontology
		symbolic key is BudgetImport

    Patterns
 		disable Auditing 
 		disable EffectiveDated

 		implements LazyUniqueID


	Persistent Fields
		RunGroup
		Amount						is an InternationalAmount
			precision is Currency.NumberOfDecimals
		UnitsAmount
		Currency
		BudgetPeriod				is a GeneralLedgerCalendarPeriod
			delete ignored
		AccountingEntity
        AccountingUnit
        GeneralLedgerChartAccount
        	default label is "GlobalLedgerChartAccount"
        Project
		FinanceDimension1
		FinanceDimension2
		FinanceDimension3
		FinanceDimension4
		FinanceDimension5
		FinanceDimension6
		FinanceDimension7
		FinanceDimension8
		FinanceDimension9
		FinanceDimension10
		DimensionCode				is Alpha 105
		ErrorMessage				is Alpha 150
		ClearBudget					is Numeric size 1
			States
				No					value is 0
				AmountOnly			value is 1
				UnitsOnly			value is 2
				AmountAndUnits		value is 3

	Relations
		EndDatesForBudgetPeriodRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = Scenario.Basis.GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = LocalPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)
		GeneralLedgerCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= Scenario.Basis.GeneralLedgerCalendar.TopNode
				related.PeriodType		 			= 3 
				related.EndDateJulian				>= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian		<= LocalJulianDate)
		AccountingEntityInBasisRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.AccountingEntityTopNode
				related.SubordinateAccountingEntity		= AccountingEntity
		AccountingUnitInBasisRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AccountingUnitStructure = Scenario.Basis.AccountingUnitStructure
				related.AccountingEntity		= AccountingEntity
				related.AccountingUnit		    = AccountingUnit
		ProjectInBasisRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ProjectStructure		= Scenario.Basis.ProjectStructure
				related.Project				    = Project
		AccountInBasisRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ReportingChart			= Scenario.Basis.ReportingChart
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
		Dimension1InBasisRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= Scenario.Basis.FinanceDimension1Structure
				related.FinanceDimension1			= FinanceDimension1
		Dimension2InBasisRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= Scenario.Basis.FinanceDimension2Structure
				related.FinanceDimension2			= FinanceDimension2
		Dimension3InBasisRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= Scenario.Basis.FinanceDimension3Structure
				related.FinanceDimension3			= FinanceDimension3
		Dimension4InBasisRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= Scenario.Basis.FinanceDimension4Structure
				related.FinanceDimension4			= FinanceDimension4
		Dimension5InBasisRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= Scenario.Basis.FinanceDimension5Structure
				related.FinanceDimension5			= FinanceDimension5
		Dimension6InBasisRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= Scenario.Basis.FinanceDimension6Structure
				related.FinanceDimension6			= FinanceDimension6
		Dimension7InBasisRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= Scenario.Basis.FinanceDimension7Structure
				related.FinanceDimension7			= FinanceDimension7
		Dimension8InBasisRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= Scenario.Basis.FinanceDimension8Structure
				related.FinanceDimension8			= FinanceDimension8
		Dimension9InBasisRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= Scenario.Basis.FinanceDimension9Structure
				related.FinanceDimension9			= FinanceDimension9
		Dimension10InBasisRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= Scenario.Basis.FinanceDimension10Structure
				related.FinanceDimension10			= FinanceDimension10
		ChangeLinesWithSamePeriodRel
			one-to-many relation to BudgetChangeOrderLine
			Field Mapping uses ByPeriodAndDims
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
				related.GeneralLedgerCalendarPeriod = BudgetPeriod			
		ChangeLinesWithSamePeriodAndDimensionsRel
			one-to-many relation to BudgetChangeOrderLine
			Field Mapping uses ByPeriodAndDims
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
				related.GeneralLedgerCalendarPeriod = BudgetPeriod 
				related.DimensionCode			= DimensionCode
				
    Derived Fields
		DerivedDimensionCode	is a StringField
			type is Alpha 105
			restricted
            AccountingEntity.DerivedSequenceNumber
            AccountingUnit.DerivedSequenceNumber
            GeneralLedgerChartAccount.DerivedSequenceNumber
            Project.DerivedSequenceNumber
			FinanceDimension1.DerivedSequenceNumber
			FinanceDimension2.DerivedSequenceNumber
			FinanceDimension3.DerivedSequenceNumber
			FinanceDimension4.DerivedSequenceNumber
			FinanceDimension5.DerivedSequenceNumber
			FinanceDimension6.DerivedSequenceNumber
			FinanceDimension7.DerivedSequenceNumber
			FinanceDimension8.DerivedSequenceNumber
			FinanceDimension9.DerivedSequenceNumber
			FinanceDimension10.DerivedSequenceNumber
		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted

    		if (!Currency exists)
    			return .01
    		if (Currency.NumberOfDecimals = 2)
    			return .01
    		if (Currency.NumberOfDecimals = 0)
    			return 1
    		if (Currency.NumberOfDecimals = 3)
    			return .001
    		if (Currency.NumberOfDecimals = 4)
    			return .0001
		JulianDate is a DerivedField
			type is Alpha 7
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			JulianDate = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				JulianDate += "00"
			else
			if (LocalAlphaDay size = 2)
				JulianDate += "0"
			JulianDate += LocalAlphaDay 
		CanOnlyLoadToBudgetScenarios				is a MessageField
			restricted
			"CanOnlyLoadToBudgetScenarios"
		ValidBudgetPeriodIsRequired					is a MessageField
			restricted
			"ValidBudgetPeriodIsRequired"
		BudgetPeriodMustBeOfTypeMonth				is a MessageField
			restricted
			"BudgetPeriodMustBeOfTypeMonth"
		BudgetPeriodMustBeInScenarioBasisCalendar	is a MessageField
			restricted
			"BudgetPeriodMustBeInScenarioBasisCalendar"
		BudgetPeriodMustBeWithinIncrementalLoadRange is a MessageField
			restricted
			"BudgetPeriodMustBeWithinIncrementalLoadRange"
		MustIncludeValidAccountingEntityDimension	is a MessageField
			restricted
			"MustIncludeValidAccountingEntityDimension"
		ScenarioDoesNotIncludeAccountingEntityDimension	is a MessageField
			restricted
			"ScenarioDoesNotIncludeAccountingEntityDimension"
		MustIncludeValidAccountingUnitDimension		is a MessageField
			restricted
			"MustIncludeValidAccountingUnitDimension"
		AccountingUnitMustBePosting					is a MessageField
			restricted
			"AccountingUnitMustBePosting"
		ScenarioDoesNotIncludeAccountingUnitDimension	is a MessageField
			restricted
			"ScenarioDoesNotIncludeAccountingUnitDimension"
		MustIncludeValidAccountDimension			is a MessageField
			restricted
			"MustIncludeValidGlobalLedgerChartAccount"
		AccountMustBePosting						is a MessageField
			restricted
			"GlobalLedgerChartAccountMustBePosting"
		ScenarioDoesNotIncludeAccountDimension		is a MessageField
			restricted
			"ScenarioDoesNotIncludeAccountDimension"
		MustIncludeValidProjectDimension			is a MessageField
			restricted
			"MustIncludeValidProjectDimension"
		ProjectMustBePosting						is a MessageField
			restricted
			"ProjectMustBePosting"
		ScenarioDoesNotIncludeProjectDimension		is a MessageField
			restricted
			"ScenarioDoesNotIncludeProjectDimension"
		CouldNotFindCalendarPeriodForProjectBeginDate is a MessageField
			restricted
			"CouldNotFindCalendarPeriodForProjectBeginDate"
		CouldNotFindCalendarPeriodForProjectEndDate is a MessageField
			restricted
			"CouldNotFindCalendarPeriodForProjectEndDate"
		BudgetPeriodOutsideProjectDateRange			 is a MessageField
			restricted
			"BudgetPeriodOutsideProjectDateRange"
		MustIncludeValidFinanceDimension1			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension1"
		FinanceDimension1MustBePosting				is a MessageField
			restricted
			"FinanceDimension1MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension1		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension1"
		MustIncludeValidFinanceDimension2			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension2"
		FinanceDimension2MustBePosting				is a MessageField
			restricted
			"FinanceDimension2MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension2		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension2"
		MustIncludeValidFinanceDimension3			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension3"
		FinanceDimension3MustBePosting				is a MessageField
			restricted
			"FinanceDimension3MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension3		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension3"
		MustIncludeValidFinanceDimension4			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension4"
		FinanceDimension4MustBePosting				is a MessageField
			restricted
			"FinanceDimension4MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension4		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension4"
		MustIncludeValidFinanceDimension5			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension5"
		FinanceDimension5MustBePosting				is a MessageField
			restricted
			"FinanceDimension5MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension5		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension5"
		MustIncludeValidFinanceDimension6			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension6"
		FinanceDimension6MustBePosting				is a MessageField
			restricted
			"FinanceDimension6MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension6		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension6"
		MustIncludeValidFinanceDimension7			is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension7"
		FinanceDimension7MustBePosting				is a MessageField
			restricted
			"FinanceDimension7MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension7		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension7"
		MustIncludeValidFinanceDimension8			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension8"
		FinanceDimension8MustBePosting				is a MessageField
			restricted
			"FinanceDimension8MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension8		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension8"
		MustIncludeValidFinanceDimension9			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension9"
		FinanceDimension9MustBePosting				is a MessageField
			restricted
			"FinanceDimension9MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension9		is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension9"
		MustIncludeValidFinanceDimension10			is a MessageField
			restricted
			"MustIncludeValidFinanceDimension10"
		FinanceDimension10MustBePosting				is a MessageField
			restricted
			"FinanceDimension10MustBePosting"
		ScenarioDoesNotIncludeFinanceDimension10	is a MessageField
			restricted
			"ScenarioDoesNotIncludeFinanceDimension10"
		CouldNotFindEndDateForPeriod				is a MessageField
			restricted
			"CouldNotFindEndDateForPeriod"
		EitherAmountOrUnitsAmountRequired			is a MessageField
			restricted
			"EitherAmountOrUnitsAmountRequired"
		AccountingEntityMustBeInScenarioBasis		is a MessageField
			restricted
			"AccountingEntityMustBeInScenarioBasis"
		AccountingEntityMustBePosting				is a MessageField
			restricted
			"AccountingEntityMustBePosting"
		AccountingUnitMustBeInScenarioBasisStructure is a MessageField
			restricted
			"AccountingUnitMustBeInScenarioBasisStructure"
		AccountMustBeInScenarioBasisStructure		is a MessageField
			restricted
			"AccountMustBeInScenarioBasisStructure"
		ProjectMustBeInScenarioBasisStructure		is a MessageField
			restricted
			"ProjectMustBeInScenarioBasisStructure"
		Dimension1MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension1MustBeInScenarioBasisStructure"
		Dimension2MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension2MustBeInScenarioBasisStructure"
		Dimension3MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension3MustBeInScenarioBasisStructure"
		Dimension4MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension4MustBeInScenarioBasisStructure"
		Dimension5MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension5MustBeInScenarioBasisStructure"
		Dimension6MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension6MustBeInScenarioBasisStructure"
		Dimension7MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension7MustBeInScenarioBasisStructure"
		Dimension8MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension8MustBeInScenarioBasisStructure"
		Dimension9MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension9MustBeInScenarioBasisStructure"
		Dimension10MustBeInScenarioBasisStructure	is a MessageField
			restricted
			"FinanceDimension10MustBeInScenarioBasisStructure"
		AccountingUnitRequired	is a MessageField
			restricted
			"AccountingUnitRequired"
		AccountingEntityRequired	is a MessageField
			restricted
			"AccountingEntityRequired"
		AccountRequired	is a MessageField
			restricted
			"AccountRequired"
		ProjectRequired	is a MessageField
			restricted
			"ProjectRequired"
		FinanceDimension1Required	is a MessageField
			restricted
			"FinanceDimension1Required"
		FinanceDimension2Required	is a MessageField
			restricted
			"FinanceDimension2Required"
		FinanceDimension3Required	is a MessageField
			restricted
			"FinanceDimension3Required"
		FinanceDimension4Required	is a MessageField
			restricted
			"FinanceDimension4Required"
		FinanceDimension5Required	is a MessageField
			restricted
			"FinanceDimension5Required"
		FinanceDimension6Required	is a MessageField
			restricted
			"FinanceDimension6Required"
		FinanceDimension7Required	is a MessageField
			restricted
			"FinanceDimension7Required"
		FinanceDimension8Required	is a MessageField
			restricted
			"FinanceDimension8Required"
		FinanceDimension9Required	is a MessageField
			restricted
			"FinanceDimension9Required"
		FinanceDimension10Required	is a MessageField
			restricted
			"FinanceDimension10Required"
		ValidCurrencyRequired	is a MessageField
			restricted
			"ValidCurrencyRequired"
		NoFunctionalTranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoProjectTranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoAlternateTranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoAlternate2TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoAlternate3TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoEnterpriseCurrency1TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoEnterpriseCurrency2TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoEnterpriseCurrency3TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoEnterpriseCurrency4TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		NoEnterpriseCurrency5TranslationRate	is a MessageField
			restricted
			"TranslationRateDoesNotExistFrom<Currency>To<TargetCurrency>"
		ChangeLineOverlap						is a MessageField
			restricted
			"ExistingChangeRequestLinesWithSamePeriodExist:_\Line<ChangeLine>InRequest<ChangeLine.BudgetChangeOrder>"
		AccountCannotBeURE					is a MessageField
			restricted
			"CannotPostTo<GeneralLedgerChartAccount.SystemAccount>_<FinanceEnterpriseGroup.AccountLabel>"
		AmountAndUnitsShouldBeZero				is a MessageField
			restricted
			"AmountAndUnitsAmountShouldBeZero"
		UnitsShouldBeZero						is a MessageField
			restricted
			"UnitsAmountShouldBeZero"
		AmountShouldBeZero						is a MessageField
			restricted
			"AmountShouldBeZero"

	Conditions
		HasError
			when (ErrorMessage entered)
			
		SecurityGroupAllowsAccess
            when (AccountingEntity not entered
            or   (AccountingEntity entered 
            and   AccountingEntity.AccountingEntitySecurityGroupAllowsAccess))

		ClearBudgetAlert
			restricted
			when (BudgetImport entered
			and ClearBudget entered)

	Local Fields
		LocalDate						is Date
		LocalAlphaDay					is Alpha 3
		LocalAlphaYear					is Alpha 4
		LocalJulianDate					is Alpha 7
		ProjectPeriod					is a GeneralLedgerCalendarPeriod
		LocalPeriod						is a GeneralLedgerCalendarPeriod
		TotalGroup						is a GeneralLedgerTotalScenarioGroup
		TargetCurrency					is like Currency
		ClusterCounter					is Decimal 4
		BackgroundGroup					is AlphaUpper 27
		CheckChangeLines				is Boolean
		ChangeLine						is a BudgetChangeOrderLine
		ChangeOrder						is a BudgetChangeOrder		

		TempMessage						is Alpha 150
		BudgetCodeBlock
		BudgetCodeBlockStructureValidation	
		LocalBypassEdits			    is Boolean
		BudgetCodeBlockUnitAmountEdit

	Field Rules
		Scenario
			if (not LocalBypassEdits)
				constraint (Scenario.CommitmentType.Budget)
					"NotAValidBudgetScenario"
		Currency
			if (not LocalBypassEdits)
				if (Amount entered
				or  ClearBudget.AmountOnly
				or  ClearBudget.AmountAndUnits) 
					required

		ClearBudget
			if (ClearBudget not entered)
				if (not LocalBypassEdits)
					constraint (Amount entered or UnitsAmount entered)
						"EitherAmountOrUnitsRequired"
			
			if (Scenario.AllowZeroBudget)
				if (ClearBudget.AmountOnly)
					constraint (Amount not entered)
						"<AmountShouldBeZero>"
				else
				if (ClearBudget.UnitsOnly)
					constraint (UnitsAmount not entered)
						"<UnitsShouldBeZero>"			
				if (ClearBudget.AmountAndUnits)
					constraint (Amount not entered and UnitsAmount not entered)
						"<AmountAndUnitsShouldBeZero>"
			else
				cannot be entered
					"ClearBudgetCannotBeEnteredForBudgetScenarioNotAllowingZeroBudget"

	Sets
		ByDimensionCodeAndPeriod
			no duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				DimensionCode
				BudgetPeriod
		
	Rule Blocks
		LoadInstanceRules
			DimensionCode = DerivedDimensionCode
			initialize ErrorMessage	
			if (ChangeLinesWithSamePeriodAndDimensionsRel exists)
				ChangeOrder	= first ChangeLinesWithSamePeriodAndDimensionsRel.BudgetChangeOrder
				ChangeLine	= first ChangeLinesWithSamePeriodAndDimensionsRel.BudgetChangeOrderLine
				if (ChangeOrder.Status != 0) 
					ErrorMessage = ChangeLineOverlap
			if (BudgetPeriod.TopNode != Scenario.Basis.GeneralLedgerCalendar.TopNode)
				ErrorMessage = BudgetPeriodMustBeInScenarioBasisCalendar
			if (not BudgetPeriod.PeriodType.Month)
				ErrorMessage = BudgetPeriodMustBeOfTypeMonth
			if (BudgetPeriod not exists)
				ErrorMessage = ValidBudgetPeriodIsRequired
			if (!Scenario.IncrementalLoadStatus.Inactive)
				if (BudgetPeriod < Scenario.IncrementalLoadStartPeriod)
					ErrorMessage = BudgetPeriodMustBeWithinIncrementalLoadRange
				if (BudgetPeriod > Scenario.IncrementalLoadEndPeriod)
					ErrorMessage = BudgetPeriodMustBeWithinIncrementalLoadRange
		    if (Scenario.HasPostingAccountingUnit)
				if (AccountingUnit not entered)
					if (FinanceEnterpriseGroup.AccountingUnitRequired)
						ErrorMessage = AccountingUnitRequired
				else
			    	if (AccountingUnitInBasisRel not exists)
			    		ErrorMessage = AccountingUnitMustBeInScenarioBasisStructure
		        	if (not AccountingUnit.PostingAccountingUnit)
			        	ErrorMessage = AccountingUnitMustBePosting
		        	if (AccountingUnit not exists)
			        	ErrorMessage = MustIncludeValidAccountingUnitDimension
			else
		        if (AccountingUnit entered)
			        ErrorMessage = ScenarioDoesNotIncludeAccountingUnitDimension
		    if (Scenario.HasAccountingEntity)
				if (AccountingEntity not entered)
					ErrorMessage = AccountingEntityRequired
				else
			    	if (AccountingEntityInBasisRel not exists)
			    		ErrorMessage = AccountingEntityMustBeInScenarioBasis
					if (not AccountingEntity.DimensionType.Posting)
						ErrorMessage = AccountingEntityMustBePosting
		        	if (AccountingEntity not exists)
			        	ErrorMessage = MustIncludeValidAccountingEntityDimension
			else
		        if (AccountingEntity entered)
			        ErrorMessage = ScenarioDoesNotIncludeAccountingEntityDimension
		    if (Scenario.HasPostingAccount)
				if (GeneralLedgerChartAccount not entered)
					ErrorMessage = AccountRequired
				else
			    	if (AccountInBasisRel not exists)
			    		ErrorMessage = AccountMustBeInScenarioBasisStructure
		        	if (not GeneralLedgerChartAccount.ChartType.Posting)
			        	ErrorMessage = AccountMustBePosting
		        	if (GeneralLedgerChartAccount not exists)
			        	ErrorMessage = MustIncludeValidAccountDimension
			        if(GeneralLedgerChartAccount.SystemAccount.UndistributedRetainedEarnings)
			        	ErrorMessage = AccountCannotBeURE
					include ValidateGeneralLedgerChartAccountUnitAmount

			else
		        if (GeneralLedgerChartAccount entered)
			        ErrorMessage = ScenarioDoesNotIncludeAccountDimension
		    if (Scenario.HasPostingProject)
				if (Project not entered)
					if (FinanceEnterpriseGroup.ProjectRequired)
						ErrorMessage = ProjectRequired
				else
			    	if (ProjectInBasisRel not exists)
			    		ErrorMessage = ProjectMustBeInScenarioBasisStructure
		        	if (not Project.IsPostingProject)
			        	ErrorMessage = ProjectMustBePosting
		        	if (Project not exists)
			        	ErrorMessage = MustIncludeValidProjectDimension
			        LocalDate					= Project.ProjectDateRange.BeginDate
					LocalJulianDate				= JulianDate
					ProjectPeriod				= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod

					if (ProjectPeriod not exists)
						ErrorMessage			= CouldNotFindCalendarPeriodForProjectBeginDate
					else
						if (BudgetPeriod < ProjectPeriod)
							ErrorMessage		= BudgetPeriodOutsideProjectDateRange
			        LocalDate					= Project.ProjectDateRange.EndDate
					LocalJulianDate				= JulianDate
					ProjectPeriod				= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod

					if (ProjectPeriod not exists)
						ErrorMessage			= CouldNotFindCalendarPeriodForProjectEndDate
					else
						if (BudgetPeriod > ProjectPeriod)
							ErrorMessage		= BudgetPeriodOutsideProjectDateRange
			else
		        if (Project entered)
			        ErrorMessage = ScenarioDoesNotIncludeProjectDimension
		    if (Scenario.HasPostingDimension1)
				if (FinanceDimension1 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension1Required)
						ErrorMessage = FinanceDimension1Required
				else
			    	if (Dimension1InBasisRel not exists)
			    		ErrorMessage = Dimension1MustBeInScenarioBasisStructure
		        	if (not FinanceDimension1.PostingDimension)
			        	ErrorMessage = FinanceDimension1MustBePosting
		        	if (FinanceDimension1 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension1
			else
		        if (FinanceDimension1 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension1
		    if (Scenario.HasPostingDimension2)
				if (FinanceDimension2 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension2Required)
						ErrorMessage = FinanceDimension2Required
				else
			    	if (Dimension2InBasisRel not exists)
			    		ErrorMessage = Dimension2MustBeInScenarioBasisStructure
		        	if (not FinanceDimension2.PostingDimension)
			        	ErrorMessage = FinanceDimension2MustBePosting
		        	if (FinanceDimension2 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension2
			else
		        if (FinanceDimension2 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension2
		    if (Scenario.HasPostingDimension3)
				if (FinanceDimension3 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension3Required)
						ErrorMessage = FinanceDimension3Required
				else
			    	if (Dimension3InBasisRel not exists)
			    		ErrorMessage = Dimension3MustBeInScenarioBasisStructure
		        	if (not FinanceDimension3.PostingDimension)
			        	ErrorMessage = FinanceDimension3MustBePosting
		        	if (FinanceDimension3 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension3
			else
		        if (FinanceDimension3 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension3
		    if (Scenario.HasPostingDimension4)
				if (FinanceDimension4 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension4Required)
						ErrorMessage = FinanceDimension4Required
				else
			    	if (Dimension4InBasisRel not exists)
			    		ErrorMessage = Dimension4MustBeInScenarioBasisStructure
		        	if (not FinanceDimension4.PostingDimension)
			        	ErrorMessage = FinanceDimension4MustBePosting
		        	if (FinanceDimension4 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension4
			else
		        if (FinanceDimension4 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension4
		    if (Scenario.HasPostingDimension5)
				if (FinanceDimension5 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension5Required)
						ErrorMessage = FinanceDimension5Required
				else
			    	if (Dimension5InBasisRel not exists)
			    		ErrorMessage = Dimension5MustBeInScenarioBasisStructure
		        	if (not FinanceDimension5.PostingDimension)
			        	ErrorMessage = FinanceDimension5MustBePosting
		        	if (FinanceDimension5 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension5
			else
		        if (FinanceDimension5 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension5
		    if (Scenario.HasPostingDimension6)
				if (FinanceDimension6 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension6Required)
						ErrorMessage = FinanceDimension6Required
				else
			    	if (Dimension6InBasisRel not exists)
			    		ErrorMessage = Dimension6MustBeInScenarioBasisStructure
		        	if (not FinanceDimension6.PostingDimension)
			        	ErrorMessage = FinanceDimension6MustBePosting
		        	if (FinanceDimension6 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension6
			else
		        if (FinanceDimension6 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension6
		    if (Scenario.HasPostingDimension7)
				if (FinanceDimension7 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension7Required)
						ErrorMessage = FinanceDimension7Required
				else
			    	if (Dimension7InBasisRel not exists)
			    		ErrorMessage = Dimension7MustBeInScenarioBasisStructure
		        	if (not FinanceDimension7.PostingDimension)
			        	ErrorMessage = FinanceDimension7MustBePosting
		        	if (FinanceDimension7 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension7
			else
		        if (FinanceDimension7 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension7
		    if (Scenario.HasPostingDimension8)
				if (FinanceDimension8 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension8Required)
						ErrorMessage = FinanceDimension8Required
				else
			    	if (Dimension8InBasisRel not exists)
			    		ErrorMessage = Dimension8MustBeInScenarioBasisStructure
		        	if (not FinanceDimension8.PostingDimension)
			        	ErrorMessage = FinanceDimension8MustBePosting
		        	if (FinanceDimension8 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension8
			else
		        if (FinanceDimension8 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension8
		    if (Scenario.HasPostingDimension9)
				if (FinanceDimension9 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension9Required)
						ErrorMessage = FinanceDimension9Required
				else
			    	if (Dimension9InBasisRel not exists)
			    		ErrorMessage = Dimension9MustBeInScenarioBasisStructure
		        	if (not FinanceDimension9.PostingDimension)
			        	ErrorMessage = FinanceDimension9MustBePosting
		        	if (FinanceDimension9 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension9
			else
		        if (FinanceDimension9 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension9
		    if (Scenario.HasPostingDimension10)
				if (FinanceDimension10 not entered)
					if (FinanceEnterpriseGroup.FinanceDimension10Required)
						ErrorMessage = FinanceDimension10Required
				else
			    	if (Dimension10InBasisRel not exists)
			    		ErrorMessage = Dimension10MustBeInScenarioBasisStructure
		        	if (not FinanceDimension10.PostingDimension)
			        	ErrorMessage = FinanceDimension10MustBePosting
		        	if (FinanceDimension10 not exists)
			        	ErrorMessage = MustIncludeValidFinanceDimension10
			else
		        if (FinanceDimension10 entered)
			        ErrorMessage = ScenarioDoesNotIncludeFinanceDimension10
			
			LocalPeriod													= BudgetPeriod
			TotalGroup.AccountingEntity									= AccountingEntity
			TotalGroup.Scenario											= Scenario.OriginalScenario
			TotalGroup.GeneralLedgerTotal.Ledger						= FinanceEnterpriseGroup.CoreLedger
			TotalGroup.GeneralLedgerTotal.System						= "GL"
			if (Amount entered or ClearBudget entered)
				TotalGroup.GeneralLedgerTotal.Currency					= Currency
			TotalGroup.GeneralLedgerTotal.DimensionCode					= DimensionCode[29:98]
			TotalGroup.GeneralLedgerTotal.AccountingUnit				= AccountingUnit
			TotalGroup.GeneralLedgerTotal.Project						= Project
			TotalGroup.GeneralLedgerTotal.GeneralLedgerChartAccount		= GeneralLedgerChartAccount
			TotalGroup.GeneralLedgerTotal.EntityYearPeriod				= last EndDatesForBudgetPeriodRel.GeneralLedgerCalendarPeriod
			TotalGroup.GeneralLedgerTotal.PrimaryLedger					= FinanceEnterpriseGroup.CoreLedger
			if (TotalGroup.GeneralLedgerTotal.EntityYearPeriod not entered)
				ErrorMessage = CouldNotFindEndDateForPeriod
			if (Amount entered
			and Currency not exists)
				ErrorMessage = ValidCurrencyRequired

			if (ClearBudget.No
			or  not Scenario.AllowZeroBudget)
				if (Amount not entered
				and UnitsAmount not entered)
					ErrorMessage = EitherAmountOrUnitsAmountRequired
			
			if (ErrorMessage not entered)
				include ValidateStructureRelations

			if (ClearBudget entered)
				if (ClearBudget.AmountOnly
				and Amount entered)
					ErrorMessage = AmountShouldBeZero
				else
				if (ClearBudget.UnitsOnly
				and UnitsAmount entered)
					ErrorMessage = UnitsShouldBeZero
				else
				if (ClearBudget.AmountAndUnits
				and (Amount entered
				or  UnitsAmount entered))
					ErrorMessage = AmountAndUnitsShouldBeZero
	
			if (ErrorMessage not entered)
				if (ClearBudget.AmountAndUnits
				or (ClearBudget.AmountOnly and UnitsAmount = 0 and TotalGroup.GeneralLedgerTotal.NetUnitsAmount = 0)	
				or (ClearBudget.UnitsOnly  and Amount = 0 and TotalGroup.GeneralLedgerTotal.NetTransactionAmount = 0))  

					if (Scenario.RetainZeroBudget)
						if (TotalGroup.GeneralLedgerTotal exists)
							invoke InitializeAmountsNoRules TotalGroup.GeneralLedgerTotal
						else
							include PostTransactions
					else
						invoke Delete TotalGroup.GeneralLedgerTotal

				else
					include PostTransactions

		            if (Amount entered
		            and TransactionErrorMessage not entered)
		            	invoke CalculateMeasuresForBudgetRecord TotalGroup.GeneralLedgerTotal
		            	if (AccountingEntity entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetFunctionalAmount not entered)
		            			TargetCurrency = AccountingEntity.FunctionalCurrency
		            			ErrorMessage = NoFunctionalTranslationRate
		            		if (AccountingEntity.AlternateCurrency entered)
		            			if (TotalGroup.GeneralLedgerTotal.NetAlternateAmount not entered)
		            				TargetCurrency = AccountingEntity.AlternateCurrency
		            				ErrorMessage = NoAlternateTranslationRate
		            		if (AccountingEntity.AlternateCurrency2 entered)
		            			if (TotalGroup.GeneralLedgerTotal.NetAlternateAmount2 not entered)
		            				TargetCurrency = AccountingEntity.AlternateCurrency2
		            				ErrorMessage = NoAlternate2TranslationRate
		            		if (AccountingEntity.AlternateCurrency3 entered)
		            			if (TotalGroup.GeneralLedgerTotal.NetAlternateAmount3 not entered)
		            				TargetCurrency = AccountingEntity.AlternateCurrency3
		            				ErrorMessage = NoAlternate3TranslationRate
		            	if (Project entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetProjectAmount not entered)
		            			TargetCurrency = Project.Currency
		            			ErrorMessage = NoProjectTranslationRate
		            	if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetReportAmount1 not entered)
		            			TargetCurrency = FinanceEnterpriseGroup.ReportCurrencyOne
		            			ErrorMessage = NoEnterpriseCurrency1TranslationRate
		            	if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetReportAmount2 not entered)
		            			TargetCurrency = FinanceEnterpriseGroup.ReportCurrencyTwo
		            			ErrorMessage = NoEnterpriseCurrency2TranslationRate
		            	if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetReportAmount3 not entered)
		            			TargetCurrency = FinanceEnterpriseGroup.ReportCurrencyThree
		            			ErrorMessage = NoEnterpriseCurrency3TranslationRate
		            	if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetReportAmount4 not entered)
		            			TargetCurrency = FinanceEnterpriseGroup.ReportCurrencyFour
		            			ErrorMessage = NoEnterpriseCurrency4TranslationRate
		            	if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
		            		if (TotalGroup.GeneralLedgerTotal.NetReportAmount5 not entered)
		            			TargetCurrency = FinanceEnterpriseGroup.ReportCurrencyFive
		            			ErrorMessage = NoEnterpriseCurrency5TranslationRate
		            	if (ErrorMessage entered)
		            		invoke Delete TotalGroup.GeneralLedgerTotal
			if (ErrorMessage entered)
				FailedRecordCount += 1
			else
				PassedRecordCount += 1
				invoke Purge
				
		LoadEntranceRules
			invoke Create BudgetImportResult
				assign result to BudgetImportResultView
				invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoked.Scenario				= Scenario
				invoked.RunGroup 				= PrmRunGroup
			BudgetImportResult	=  BudgetImportResultView.BudgetImportResult

		LoadExitRules
			if (PassedRecordCount entered) 
				increment BudgetImportResult.PassedCount by PassedRecordCount
			if (FailedRecordCount entered) 
				increment BudgetImportResult.FailedCount by FailedRecordCount
			invoke SetRunTime BudgetImportResult

		ValidateStructureRelations
			if (Scenario.ValidateStructureRelations)
				BudgetCodeBlock.AccountingEntity			= AccountingEntity
				BudgetCodeBlock.AccountingUnit				= AccountingUnit
				BudgetCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
				BudgetCodeBlock.Project						= Project
				BudgetCodeBlock.FinanceDimension1			= FinanceDimension1
				BudgetCodeBlock.FinanceDimension2			= FinanceDimension2
				BudgetCodeBlock.FinanceDimension3			= FinanceDimension3
				BudgetCodeBlock.FinanceDimension4			= FinanceDimension4
				BudgetCodeBlock.FinanceDimension5			= FinanceDimension5
				BudgetCodeBlock.FinanceDimension6			= FinanceDimension6
				BudgetCodeBlock.FinanceDimension7			= FinanceDimension7
				BudgetCodeBlock.FinanceDimension8			= FinanceDimension8
				BudgetCodeBlock.FinanceDimension9			= FinanceDimension9
				BudgetCodeBlock.FinanceDimension10			= FinanceDimension10
				BudgetCodeBlock.LocalUseErrorMessage				= true

				BudgetCodeBlockStructureValidation	= true
				BudgetCodeBlockUnitAmountEdit		= Scenario.ValidateUnitControl				
				BudgetCodeBlock.LocalBudgetPeriod	= BudgetPeriod
				
				TempMessage							= BudgetCodeBlock.EditCodeBlockRelationDetail 
				if (TempMessage != "" and BudgetCodeBlock.LocalUseErrorMessage)
					ErrorMessage					= TempMessage
				initialize BudgetCodeBlockStructureValidation
				initialize BudgetCodeBlock.LocalUseErrorMessage
				initialize BudgetCodeBlockUnitAmountEdit

		ValidateGeneralLedgerChartAccountUnitAmount
			if (GeneralLedgerChartAccount entered
			and Scenario.HasPostingAccount
			and Scenario.ValidateUnitControl
			and FinanceEnterpriseGroup.UnitControl.Account)			
				BudgetCodeBlock.LocalUseErrorMessage	    = true
				BudgetCodeBlockUnitAmountEdit			    = Scenario.ValidateUnitControl
				BudgetCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
				TempMessage				    				= BudgetCodeBlock.GeneralLedgerChartAccountUnitAmountEdit
				if (TempMessage != "" and BudgetCodeBlock.LocalUseErrorMessage)
					ErrorMessage						    = TempMessage			
				initialize BudgetCodeBlockUnitAmountEdit
				initialize BudgetCodeBlock.LocalUseErrorMessage
		
		PostTransactions
			invoke PostTransactions TotalGroup.GeneralLedgerTotal
				resume on error
					TransactionErrorMessage	= error message
				if (Amount entered)
					invoked.NetTransactionAmount	= Amount
					
				if (ClearBudget.AmountOnly)
					initialize invoked.NetTransactionAmount
					initialize invoked.NetFunctionalAmount
					initialize invoked.NetAlternateAmount
					initialize invoked.NetAlternateAmount2
					initialize invoked.NetAlternateAmount3
					initialize invoked.NetProjectAmount
					initialize invoked.NetReportAmount1
					initialize invoked.NetReportAmount2
					initialize invoked.NetReportAmount3	
					initialize invoked.NetReportAmount4
					initialize invoked.NetReportAmount5

				if (UnitsAmount entered
				or ClearBudget.UnitsOnly)
					invoked.NetUnitsAmount			= UnitsAmount
				invoked.FinanceDimension1		= FinanceDimension1
				invoked.FinanceDimension2		= FinanceDimension2
				invoked.FinanceDimension3		= FinanceDimension3
				invoked.FinanceDimension4		= FinanceDimension4
				invoked.FinanceDimension5		= FinanceDimension5
				invoked.FinanceDimension6		= FinanceDimension6
				invoked.FinanceDimension7		= FinanceDimension7
				invoked.FinanceDimension8		= FinanceDimension8
				invoked.FinanceDimension9		= FinanceDimension9
				invoked.FinanceDimension10		= FinanceDimension10
				invoked.PeriodEndingDate		= last EndDatesForBudgetPeriodRel.GeneralLedgerCalendarPeriod.Date

			if (TransactionErrorMessage entered) 
				ErrorMessage = TransactionErrorMessage
	Actions
		Create is a Create Action

			Entrance Rules
				include ValidateGeneralLedgerChartAccountUnitAmount			
				include ValidateStructureRelations
			Action Rules
				round Amount to nearest DerivedRoundTo
			Exit Rules
				DimensionCode = DerivedDimensionCode
				
		Update is an Update Action

			Entrance Rules
				include ValidateGeneralLedgerChartAccountUnitAmount			
				include ValidateStructureRelations
			Action Rules
				round Amount to nearest DerivedRoundTo
			Exit Rules
				DimensionCode = DerivedDimensionCode

		Delete is a Delete Action


		Purge is a Purge Action
			restricted
			
		Load is a Set Action
			restricted
			allow unlimited concurrency

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario	is a Scenario
					default label is "Scenario"
				PrmNumClusters	is Decimal 4
					default label is "NumberOfClustersInParallel"
				PrmCluster	is Decimal 4
					default label is "Cluster"
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"					
			Parameter Rules
				PrmNumClusters
					default to 1
				PrmCluster
					default to 0
			Local Fields				
				TestCluster is Decimal 4
				FailedRecordCount			is Numeric 12
				PassedRecordCount			is Numeric 12
				BudgetImportResult
				BudgetImportResultView		is a BudgetImportResult view
				TransactionErrorMessage		is Alpha 150
			Instance Selection
				where (Scenario	= PrmScenario
				and FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and PrmCluster = BudgetImport % PrmNumClusters
				and RunGroup = PrmRunGroup) 
			Sort Order
				FinanceEnterpriseGroup
				Scenario
			Action Rules
				Set Rules
					Entrance Rules

						TestCluster = BudgetImport % PrmNumClusters

						constraint (PrmCluster= TestCluster)
							"InstanceSelectionError","<Cluster>","<PrmCluster>"!="<TestCluster>"
						include LoadEntranceRules
					Exit Rules
						include LoadExitRules
						
				Instance Rules
					include LoadInstanceRules

		LoadNoParallel is a Set Action
			restricted

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario	is a Scenario
					default label is "Scenario"
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"					


			Local Fields				
				TestCluster is Decimal 4
				FailedRecordCount			is Numeric 12
				PassedRecordCount			is Numeric 12
				BudgetImportResult
				BudgetImportResultView		is a BudgetImportResult view
				TransactionErrorMessage		is Alpha 150
			Instance Selection
				where (Scenario	= PrmScenario
				and FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and RunGroup = PrmRunGroup) 
			Sort Order
				FinanceEnterpriseGroup
				Scenario
			Action Rules
				Set Rules
					Entrance Rules
						include LoadEntranceRules
					Exit Rules
						include LoadExitRules
				Instance Rules
					include LoadInstanceRules

		DeleteScenarioImports is a Set Action
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario)
			Action Rules
				Instance Rules
					invoke Delete BudgetImport

		PurgeData is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Scenario					= PrmScenario)
			Action Rules
				Instance Rules
					invoke Purge
			
