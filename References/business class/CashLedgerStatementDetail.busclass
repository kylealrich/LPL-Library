CashLedgerStatementDetail is a BusinessClass	
    owned by cb
    prefix is CSD
    classic name is CBSTMTDTL

    Ontology
        symbolic key is CashLedgerStatementDetail
            classic set name is CSDSET1
            classic name is LINE-NBR
            classic name for CashLedgerStatement is RECON-STMT-NBR

    Patterns
        implements StaticJava
        disable AuditIndex
		enable explicit context override        

    Persistent Fields

        TransactionType          is AlphaUpper size 1
            classic name is TRANS-TYPE
            States
                Customer       value is "C"
                Vendor         value is "V"
                Generalledger  value is "G"
                    default label is "GlobalLedger"
                Reconciliation value is "R"
        Company                  is a GeneralLedgerCompany
        BankTransactionCode
            classic name is BANK-INST-CODE
        Customer
        Vendor
        VendorLocation
            classic name is REMIT-TO-CODE
        PaymentNumber       	 is a PaymentNbr
            classic name is PAYMENT-NBR
        Currency				 is a FromCurrency
            classic name is ORIG-CURRENCY
        AmountTransactionCurrency is a CurrencyAmount
            classic name is ORIG-AMT
            	precision is CashCode.BankAccountNumber.Currency.NumberOfDecimals
        AmountCompanyCurrency     is a CurrencyExchange
        	context of Company	
            classic name is TRAN-AMT
        TransactionDate          is Date
            classic name is TRANS-DATE
        BatchNumber
            classic name is BATCH-NBR
        ProcessLevel             is a PayablesProcessLevel
            classic name is PROC-LEVEL
        PayGroup
        TransactionIDNumber
            classic name is TRANS-IDENT

	Transient Fields
		ReceivableProcessLevel
		CashLedgerSourceRecord
		CashLedgerTransaction

	Local Fields
		GeneratedNumberFound 		is Boolean	
		LocalCashLedgerTransaction 	is a CashLedgerTransaction
		NewReceivablePaymentHeader 	is a ReceivablePaymentHeader view
		LocalStatementBalanceDelta	is an InternationalAmount
		LocalStatementCreditDelta	is an InternationalAmount
		LocalStatementDebitDelta	is an InternationalAmount
		LocalPaymentNumber			is like TransactionIDNumber
		LocalActionType				is AlphaUpper size 1
			States
				Create				value is "C"
				Update      	  	value is "U"
				Delete		  		value is "D"
				
	Derived Fields
		
		NotAddedMessage 	is a MessageField
			restricted
			"NotAdded"
		UnreleasedMessage 	is a MessageField
			restricted
			"Unreleased"
		ReleasedMessage 	is a MessageField
			restricted
			"Released"
		OpenPaymentMessage 	is a MessageField
			restricted
			"OpenPayment"
		OpenMessage			is a MessageField
			restricted
			"Open"
		AppliedMessage 		is a MessageField
			restricted
			"Applied"
		ClosedMessage 		is a MessageField
			restricted
			"Closed"
		HistoricalMessage 	is a MessageField
			restricted
			"Historical"
		ReconciledMessage 	is a MessageField
			restricted
			"Reconciled"
		VoidedMessage		is a MessageField
			restricted
			"Voided"
		StopPaymentMessage	is a MessageField
			restricted
			"StopPayment"
		StaleDatedMessage 	is a MessageField
			restricted
			"StaleDated"
		EscheatedMessage	is a MessageField
			restricted
			"Escheated"
		



		
		OrigAmountToPass is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsGeneralLedgerType)
				if (BankTransactionCode.TransactionType.DebitTransaction)
					return AmountTransactionCurrency * -1
			else
			if (IsVendorType 
			or IsReconciliationType)
				return AmountTransactionCurrency * -1
			return AmountTransactionCurrency		
		
		PaymentStatus is a DerivedField
			type is Alpha 25
			restricted
			if (IsCustomerType)
				if (ReceivablePaymentRel not exists)
					return NotAddedMessage
				else
				if (ReceivablePaymentRel.Status.Unreleased)
					return UnreleasedMessage
				else
				if (ReceivablePaymentRel.Status.ReleasedUnassigned)
					return ReleasedMessage
				else
				if (ReceivablePaymentRel.Status.Open)
					return OpenPaymentMessage
				else
				if (ReceivablePaymentRel.Status.FullyApplied)
					return AppliedMessage
				else
				if (ReceivablePaymentRel.Status.Closed)
					return ClosedMessage
				else
				if (ReceivablePaymentRel.Status.Historical)
					return HistoricalMessage
			else
			if (IsVendorType)
				if (CashLedgerPayablesPaymentsRel not exists)
					return NotAddedMessage
				else
					if (first CashLedgerPayablesPaymentsRel.ReleasedStatus.Released)
						return ReleasedMessage
					else
						return UnreleasedMessage
			else
			if (IsGeneralLedgerType 
			or  IsReconciliationType)
				if (IsReconciliationType 
				and TransactionIDNumber entered) 



					LocalCashLedgerTransaction = first CashLedgerTransactionsByTransactionIdRel.CashLedgerTransaction
				else
					if (CashLedgerTransactionsRel not exists)
						return NotAddedMessage
					LocalCashLedgerTransaction = first CashLedgerTransactionsRel.CashLedgerTransaction
				if (LocalCashLedgerTransaction.Status.Unreleased)
					return UnreleasedMessage
				else
				if (LocalCashLedgerTransaction.Status.Open)
					return OpenMessage
				else
				if (LocalCashLedgerTransaction.Status.Reconciled)
					return ReconciledMessage
				else
				if (LocalCashLedgerTransaction.Status.Voided)
					return VoidedMessage
				else
				if (LocalCashLedgerTransaction.Status.StopPayment)
					return StopPaymentMessage
				else
				if (LocalCashLedgerTransaction.Status.StaleDated)
					return StaleDatedMessage
				else
				if (LocalCashLedgerTransaction.Status.Escheated)
					return EscheatedMessage

    Sets

        Set2
            indexed
            Sort Order
                BankTransactionCode
                CashLedgerStatement
                PaymentNumber
                TransactionType
                CashCode
                CashLedgerStatementDetail

	Field Rules

		ReceivableProcessLevel
			if (IsCustomerType)
				if (CashLedgerStatement.ReceivableProcessLevel entered)
					ReceivableProcessLevel = CashLedgerStatement.ReceivableProcessLevel
				required
					"BankStatementProcessLevelIsRequiredBeforeBankStatementDetailTransactionTypeOfCustomerCanBeEntered"
			else
				cannot be entered
			
		Company
			initial value is CashLedgerStatement.Company
			default to CashLedgerStatement.Company
			cannot be changed
			
		TransactionDate
			default to CashLedgerStatement.ReconciliationStatementDate
			required

		BankTransactionCode
			cannot be changed
			if (IsCustomerType)
				default to CashLedgerStatement.CustomerBankTransactionCode
				constraint (BankTransactionCode.BankTransactionType.BankService)
					"MustBeABankServiceTypePayCode"                           
			if (IsVendorType)
				default to CashLedgerStatement.VendorBankTransactionCode
				constraint (BankTransactionCode.BankTransactionType.CashPayment)
					"MustBeACashTypePayCode"                                  
			if (IsGeneralLedgerType)
				default to CashLedgerStatement.BankTransactionCode
				constraint (BankTransactionCode.BankTransactionType.BankService)
					"MustBeABankServiceTypePayCode"                           
			if (IsReconciliationType)
				default to CashLedgerStatement.ReconciliationBankTransactionCode
			required
			if (!IsReconciliationType)
				constraint (BankTransactionCode.AutomaticReconciliation)
					"InvalidPayCode;MustBeSetForAutoReconcile"                
			else
				constraint (!BankTransactionCode.AutomaticReconciliation)
					"InvalidPayCode;MustNotBeSetForReconcile"                 
		
		Customer
			if (IsCustomerType)
				required
			else
				cannot be entered
					"CustomerNumberMustBeBlankForThisTransactionType"         
			cannot be changed
				"CannotChange;PaymentAlreadyExistsIn_\A\R"                 
		
		ProcessLevel
			if (IsVendorType)
				required
			else
				cannot be entered
					"A/\PProcessLevelMustBeBlankForThisTransactionType"       
			cannot be changed
			
		Vendor
			constraint(IsVendorType)
				"VendorNumberMustBeBlankForThisTransactionType"            
			if (IsVendorType)
				required
			else
				cannot be entered
					"VendorNumberMustBeBlankForThisTransactionType"           
			cannot be changed
				"CannotChange;PaymentAlreadyExistsIn_\A\P"                 
			constraint(!Vendor.VendorStatus.Inactive)
				"VendorIsInactive"                                         
				
		VendorLocation
			if (!IsVendorType)
				cannot be entered
					"Remit_\To_\LocationMustBeBlankForThisTransactionType"    
			constraint(!VendorLocation.LocationType.PurchaseFrom)
				"VendorLocationCannotBePurchaseFromLocation"	
					
		AmountTransactionCurrency
			if (IsVendorType)
				constraint (AmountTransactionCurrency < 0)
					"AmountsFor_\A\PStatementRecordsMustBeEnteredAsACredit"   
			if (IsCustomerType)
				constraint (AmountTransactionCurrency >= 0)
					"AmountMustBePositiveForTransactionType_\C"               
			if (IsGeneralLedgerType)
				if (BankTransactionCode.TransactionType.CreditTransaction)
					constraint (AmountTransactionCurrency >= 0)
						"AmountMustBePositiveForCreditTypeBankTransactionCode"
				if (BankTransactionCode.TransactionType.DebitTransaction)
					constraint (AmountTransactionCurrency <= 0)
						"AmountMustBeNegativeForDebitTypeBankTransactionCode"
			if (IsReconciliationType)
				if (BankTransactionCode.TransactionType.DebitTransaction)
					constraint (AmountTransactionCurrency <= 0)				
						"AmtMustBeNegativeForDebitTypePayCodeOf"	                
				if (BankTransactionCode.TransactionType.CreditTransaction)
					constraint (AmountTransactionCurrency >= 0)				
						"AmtMustBePositiveForCreditTypePayCodeOf"                
			if (AmountTransactionCurrency changed)
				initialize AmountCompanyCurrency
			
			AmountCompanyCurrency.EnteredCurrencyRate = CashLedgerStatement.CurrencyRate
			AmountCompanyCurrency.ToCurrency			 = Company.Currency
		










		PaymentNumber
			if (IsReconciliationType)



				required
					"PaymentNumberIsRequiredForThisTransactionType"             
			if (action type.Create
			and !IsReconciliationType)
				constraint (PaymentNumber not entered)
					"PaymentNbrMustBeBlankForThisTransactionType"				           
			cannot be changed







	











		TransactionType
			required
			cannot be changed









			if (IsReconciliationType)
				constraint (!BankTransactionCode.TransactionOrigin.Payable or AmountTransactionCurrency < 0)				
					"AmountsFor_\A\PStatementRecordsMustBeEnteredAsACredit"   
				if (CashLedgerStatementDetailsRelExist) 
					constraint (CashLedgerTransaction not = TransactionIDNumber)
						"CannotAdd;PaymentNumberAlreadyEntered"                  

		PayGroup
			if (IsVendorType)
				required
					"PayGroupIsRequiredForTransactionType_\V"                 
			else
				cannot be entered
					"Pay_\GroupMustBeBlankForThisTransactionType"
					
		Currency
			default to CashCode.Currency
			cannot be changed		

	Conditions
		IsCustomerType
			restricted
			when (TransactionType.Customer)
		IsVendorType
			restricted
			when (TransactionType.Vendor)
		IsGeneralLedgerType
			restricted
			when (TransactionType.Generalledger)
		IsReconciliationType
			restricted
			when (TransactionType.Reconciliation)
		ReceivablePaymentRelExist
			restricted
			when (ReceivablePaymentRel exists)
		PayablesInvoicesRelExist
			restricted
			when (PayablesInvoicesRel exists)
		CashLedgerTransactionsRelExist
			restricted
			when (CashLedgerTransactionsRel exists)
		CashLedgerTransactionsFormRelExist
			restricted
			when (CashLedgerTransactionsFormRel exists)
		CashLedgerPayablesPaymentsRelExist
			restricted
			when (CashLedgerPayablesPaymentsRel exists)
		ReceivableCompanyRelExist
			restricted
			when (ReceivableCompanyRel exists)
		CashLedgerStatementDetailsRelExist
			restricted
			when (CashLedgerStatementDetailsRel exists)
		CashLedgerStatementDetailExist
			restricted
			when (CashLedgerStatementDetail exist)
		ReceivableProcessLevelEditable
			restricted
			when (!CashLedgerStatement.ReceivableProcessLevel entered)
	
    Relations

		ReceivablePaymentRel
            one-to-one relation to ReceivablePayment
            Field Mapping uses Set2
				related.Company 				  = Company
				related.ReceivablePaymentHeader	  = CashLedgerStatement.ReceivablePaymentHeader
                related.TypeOfPayment			  = "P"
                related.PaymentNumber			  = PaymentNumber
				related.Customer				  = Customer

		PayablesInvoicesRel
            one-to-many relation to PayablesInvoice
            Field Mapping uses Set13
                related.Company          = Company
                related.Vendor			 = Vendor

		CashLedgerTransactionsFormRel
            one-to-many relation to CashLedgerTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup		= CashManagementGroup	
				related.BankTransactionCode		= BankTransactionCode

		CashLedgerTransactionsOpenRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set6
				related.CashManagementGroup		= CashManagementGroup	
				related.CashCode				= CashCode
			Instance Selection
				where (related.Status.Open)                
    
		CashLedgerTransactionsRel
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set6
            	related.CashManagementGroup		= CashManagementGroup	
				related.CashCode				= CashCode
            	related.BankTransactionCode		= BankTransactionCode
				related.TransactionNumber		= PaymentNumber

		CashLedgerTransactionsByTransactionIdRel
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set6
            	related.CashManagementGroup		= CashManagementGroup	
				related.CashCode				= CashCode
            	related.BankTransactionCode		= BankTransactionCode
				related.TransactionNumber		= PaymentNumber
			Instance Selection
				where (related.CashLedgerTransaction = TransactionIDNumber)

		CashLedgerPayablesPaymentsRel
            one-to-many relation to CashLedgerPayablesPayment
            Field Mapping uses Set2
            	related.CashManagementGroup								= CashManagementGroup
				related.PayGroup 										= PayGroup
				related.CashCode										= CashCode
                related.CashLedgerPayablesPayment.BankTransactionCode	= BankTransactionCode
                related.TransactionNumber								= PaymentNumber


		ReceivableCompanyRel
            one-to-one relation to ReceivableCompany
            Field Mapping uses symbolic key
                related.Company   = Company

        PayablesCompanyRel
        	one-to-one relation to PayablesCompany
        	Field Mapping uses symbolic key
        		related.Company = Company

		CashLedgerStatementDetailsRel
            one-to-many relation to CashLedgerStatementDetail
            Field Mapping uses Set2
				related.BankTransactionCode 	= BankTransactionCode
				related.CashLedgerStatement	  	= CashLedgerStatement
                related.PaymentNumber			= PaymentNumber
                related.TransactionType			= TransactionType
				related.CashCode				= CashCode
			Instance Selection
				where (related.CashLedgerStatementDetail != CashLedgerStatementDetail)

		CashLedgerFundTransferHeaderRel
			one-to-one relation to CashLedgerFundTransferHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup				= CashCode.CashManagementGroup	
				related.CashCode						= CashCode
				related.CashLedgerFundTransferHeader	= PaymentNumber
		
		CashLedgerFundTransferDetailsRel
            one-to-many relation to CashLedgerFundTransferDetail
            Field Mapping uses Set3
				related.CashLedgerFundTransferDetail = CashCode
            	related.CashLedgerFundTransferHeader = PaymentNumber
				
		
		CashLedgerCashReceiptHeaderRel
			one-to-one relation to CashLedgerCashReceiptHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashCode.CashManagementGroup	
				related.CashCode										= CashCode
				related.CashLedgerCashReceiptHeader.BankTransactionCode	= BankTransactionCode
				related.CashLedgerCashReceiptHeader.TransactionNumber	= PaymentNumber
				
		ReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company = Company
				related.ReceivablePaymentHeader = BatchNumber
				
	Rule Blocks			
		GeneratePaymentNumber
			GeneratedNumberFound = false
			increment BankTransactionCode.TransactionIDNumber
			initialize LocalPaymentNumber
			LocalPaymentNumber = BankTransactionCode.TransactionIDNumber
			if (LocalPaymentNumber = 0)
				LocalPaymentNumber = 1
			PaymentNumber = LocalPaymentNumber
			while (!GeneratedNumberFound)
				if (IsCustomerType)

					GeneratedNumberFound = true




				else
				if (IsVendorType)
					if (CashLedgerPayablesPaymentsRel not exists
					and CashLedgerStatementDetailsRel not exists)
						GeneratedNumberFound = true
				else
				if (IsGeneralLedgerType)
					if (CashLedgerTransactionsRel not exists and
						CashLedgerStatementDetailsRel not exists)
						if (CashLedgerFundTransferHeaderRel not exists
						and CashLedgerFundTransferDetailsRel not exists
						and CashLedgerCashReceiptHeaderRel not exists)
							GeneratedNumberFound = true
				if (!GeneratedNumberFound)
					LocalPaymentNumber += 1
					PaymentNumber = LocalPaymentNumber
		
		RevertOldAmounts
			if (LocalActionType.Delete)  
				initialize LocalStatementBalanceDelta
				initialize LocalStatementDebitDelta
				initialize LocalStatementCreditDelta
				LocalStatementBalanceDelta 	= CashLedgerStatement.StatementBalanceEntered
				LocalStatementDebitDelta 	= CashLedgerStatement.StatementEnteredDebit
				LocalStatementCreditDelta	= CashLedgerStatement.StatementEnteredCredit
			
			LocalStatementBalanceDelta  -= old AmountTransactionCurrency
			if (IsVendorType or IsReconciliationType or IsGeneralLedgerType)
				if (old AmountCompanyCurrency.EnteredCurrencyAmount < 0)
					LocalStatementCreditDelta -= old AmountTransactionCurrency * -1
				else
					LocalStatementDebitDelta  -= old AmountTransactionCurrency
			else 
				if (old AmountCompanyCurrency.EnteredCurrencyAmount > 0)
					LocalStatementDebitDelta  -= old AmountTransactionCurrency
				else
					LocalStatementCreditDelta -= old AmountTransactionCurrency * -1
				
		
		UpdateCashLedgerStatement
			initialize LocalStatementBalanceDelta
			initialize LocalStatementDebitDelta
			initialize LocalStatementCreditDelta
			LocalStatementBalanceDelta 	= CashLedgerStatement.StatementBalanceEntered
			LocalStatementDebitDelta 	= CashLedgerStatement.StatementEnteredDebit
			LocalStatementCreditDelta	= CashLedgerStatement.StatementEnteredCredit
			if (AmountTransactionCurrency changed)
				include RevertOldAmounts
			LocalStatementBalanceDelta 	  += AmountTransactionCurrency
			if (IsCustomerType or IsVendorType or IsReconciliationType)
				if (AmountTransactionCurrency > 0)
					LocalStatementDebitDelta  += AmountTransactionCurrency
				else
					LocalStatementCreditDelta += AmountTransactionCurrency * -1
			else 
				if (BankTransactionCode.TransactionType.CreditTransaction)
					LocalStatementDebitDelta  += AmountTransactionCurrency
				else
					LocalStatementCreditDelta += AmountTransactionCurrency * -1
			invoke UpdateTotals CashLedgerStatement
				invoked.PrmStatementBalanceEntered 	= LocalStatementBalanceDelta
				invoked.PrmStatementEnteredDebit	= LocalStatementDebitDelta
				invoked.PrmStatementEnteredCredit	= LocalStatementCreditDelta
				
		
		EditData

			if (IsCustomerType)
				constraint (ReceivablePaymentRelExist)			
					"PaymentHasNotBeenAddedOn_\A\R\P\A\Y\M\E\N\TFile"	        
				constraint (ReceivablePaymentRel.Status.Unreleased)		
					"CannotMaintain_PaymentIsReleased"
				constraint (ReceivablePaymentRel.BaseAppliedAmount <= AmountTransactionCurrency)		
					"PaymentAmtCannotBeLessThanAppliedAmt"                    
			else
			if (IsVendorType)			
				constraint (CashLedgerPayablesPaymentsRelExist)			
					"PaymentHasNotBeenAddedOn_\C\B\C\H\E\C\KFile"	            
				constraint (first CashLedgerPayablesPaymentsRel.ReleasedStatus != "Y")	
					"CannotMaintain;CheckIsReleased"	                         
				if (first CashLedgerPayablesPaymentsRel.PaidAmountInvoiceCurrency !=0)
					if (LocalActionType.Update)  
						constraint (first CashLedgerPayablesPaymentsRel.PaidAmountInvoiceCurrency <= AmountTransactionCurrency * -1)	
							"PaymentAmtCannotBeLessThanAppliedAmt"                  
			else
			if (IsGeneralLedgerType)
				if (LocalActionType.Update) 
					constraint (CashLedgerTransactionsRelExist)
						"PaymentHasNotBeenAddedOn_\C\B\T\R\A\N\SFile"            
				if (CashLedgerTransactionsRelExist)	
					constraint (first CashLedgerTransactionsRel.Status.Unreleased)	
						"CannotMaintain;TransactionIsReleased"	                  
					if (BankTransactionCode.TransactionType.DebitTransaction)	
						constraint (first CashLedgerTransactionsRel.AppliedDistributionBaseAmount <= AmountTransactionCurrency * -1)	
							"PaymentAmtCannotBeLessThanAmtOfDistribs"               
					else
						constraint (first CashLedgerTransactionsRel.AppliedDistributionBaseAmount <= AmountTransactionCurrency)	
							"PaymentAmtCannotBeLessThanAmtOfDistribs"               
			else			
			if (IsReconciliationType)
				if (LocalActionType.Update)  
					if (TransactionIDNumber entered)
						constraint(CashLedgerTransactionsByTransactionIdRel exists)
							"PaymentHasNotBeenAdded"                                



				if (CashLedgerTransactionsByTransactionIdRel exists)
					constraint(first CashLedgerTransactionsByTransactionIdRel.Status.Open
					or first CashLedgerTransactionsRel.ReinstateStatus)
						"ValidOnlyForOpenTransactions"                           








					
	Form Invokes
		ReceivablePaymentDetail
			if (ReceivablePaymentRel exists)
				invoke Update ReceivablePaymentRel
			else
				invoke CreateCustomerPaymentFromCashApplication ReceivablePaymentRel
					invoked.Customer      			= Customer
					invoked.TypeOfPayment 			= "P"
					invoked.ReceivablePaymentHeader = CashLedgerStatement.ReceivablePaymentHeader
					invoked.PaymentNumber 			= PaymentNumber
					invoked.GeneralLedgerDate 		= TransactionDate
					invoked.TransactionAmount       = OrigAmountToPass
					
		
		PayablePaymentDetail
			if (CashLedgerPayablesPaymentsRel exists)
				invoke Update first CashLedgerPayablesPaymentsRel


			else
				invoke Create CashLedgerPayablesPaymentsRel
					invoked.VendorGroup 					= Vendor.VendorGroup
					invoked.PaidVendor  					= Vendor
					invoked.PaymentDate 					= TransactionDate
					invoked.RemitToCode 					= VendorLocation
					invoked.PaymentAmount 					= OrigAmountToPass
					invoked.BasePaymentAmount				= AmountCompanyCurrency.EnteredCurrencyAmount * -1
					invoked.PayCurrency   					= Currency	
					invoked.CashLedgerStatement 			= CashLedgerStatement	
					invoked.PayGroup     					= PayGroup	
					invoked.BaseCurrencyNumberOfDecimals 	= CashLedgerStatement.CurrencyDecimalsNumber
					
		CashLedgerTransactionDetail
			if (CashLedgerTransactionsRel exists)
				invoke Update first CashLedgerTransactionsRel
			else
				display "PassingOrigAmount<OrigAmountToPass>"
				invoke Create CashLedgerTransactionsRel
					invoked.CashManagementGroup			 = CashCode.CashManagementGroup	
					invoked.Company						 = Company
					invoked.IssueDate 					 = TransactionDate
					invoked.IssuedBankAmount  			 = OrigAmountToPass
					invoked.TransactionNumber   		 = PaymentNumber
					invoked.CashLedgerStatement 		 = CashLedgerStatement
					invoked.BaseCurrencyNumberOfDecimals = CashLedgerStatement.CurrencyDecimalsNumber
					invoked.BankAccountCurrencyNumberOfDecimals = CashLedgerStatement.CurrencyDecimalsNumber
 					







					
	Actions
		CreateCustomerReceipt is a Create Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			Entrance Rules
				constraint (CashLedgerStatement.StatementStatus.Open)
					"BankStatementClosed_-InquiryOnly"                        
				Company 		= CashLedgerStatement.Company
				TransactionType = "C"
			Exit Rules
				
				if (CashLedgerStatement.ReceivablePaymentHeader not entered)
					increment BankTransactionCode.TransactionIDNumber
					PaymentNumber = BankTransactionCode.TransactionIDNumber
					invoke Create ReceivablePaymentHeader
						assign result to NewReceivablePaymentHeader
						invoked.Company       			= Company
						invoked.ReceivableProcessLevel  = ReceivableProcessLevel
						invoked.ReceivedNotAppliedReceivableGeneralLedgerCode  = CashLedgerStatement.ReceivableProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
						invoked.CashCode			    = CashCode
						invoked.CashLedgerStatement		= CashLedgerStatement
						invoked.Currency				= Currency
						invoked.CurrencyDecimalsNumber  = CashLedgerStatement.CurrencyDecimalsNumber

						invoked.DepositBankCode			= BankTransactionCode
						invoked.DepositDate				= TransactionDate
						invoked.GeneralLedgerDate		= CashLedgerStatement.ReconciliationStatementDate
						invoked.CurrencyRate			= CashLedgerStatement.CurrencyRate
						
					invoke UpdateReceipt CashLedgerStatement
						invoked.PrmReceivableCompany       = Company
						invoked.PrmReceivableProcessLevel  = ReceivableProcessLevel
						invoked.PrmReceivablePaymentHeader = NewReceivablePaymentHeader.ReceivablePaymentHeader
				include UpdateCashLedgerStatement


				increment CashLedgerStatement.NumberOfLines

		CreateVendorPayment is a Create Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			Entrance Rules
				constraint (CashLedgerStatement.StatementStatus.Open)
					"BankStatementClosed_-InquiryOnly"                        
				constraint (PaymentNumber not entered)
					"PaymtNbrMustBeBlankForThisTransactionType"					          
				Company 		= CashLedgerStatement.Company
				TransactionType = "V"
			Action Rules
				include GeneratePaymentNumber
				include UpdateCashLedgerStatement		
				invoke UpdateTransactionIdNumber BankTransactionCode
					invoked.PrmTransactionIDNumber = LocalPaymentNumber
				increment CashLedgerStatement.NumberOfLines

		CreateGeneralLedgerTransaction is a Create Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			default label is "CreateGlobalLedgerTransaction"
			Entrance Rules
				constraint (CashLedgerStatement.StatementStatus.Open)
					"BankStatementClosed_-InquiryOnly"                        
				constraint (PaymentNumber not entered)
					"PaymtNbrMustBeBlankForThisTransactionType"	
				Company 		= CashLedgerStatement.Company
				TransactionType = "G"
			Action Rules
				if (BankTransactionCode not entered)
					BankTransactionCode = CashLedgerStatement.BankTransactionCode
				include GeneratePaymentNumber
				include UpdateCashLedgerStatement
				invoke UpdateTransactionIdNumber BankTransactionCode
					invoked.PrmTransactionIDNumber = LocalPaymentNumber
				increment CashLedgerStatement.NumberOfLines

		CreateReconciliation is a Create Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			Entrance Rules


				Company 		= CashLedgerStatement.Company
				TransactionType = "R"
			Action Rules

				increment CashLedgerStatement.NumberOfLines

		Create is a Create Action
			restricted		
					
		Update is an Update Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			Entrance Rules
				constraint (CashLedgerStatement.StatementStatus.Open)
					"BankStatementClosed_-InquiryOnly"                        
				LocalActionType = LocalActionType.Update					
				include EditData					
			Action Rules
				if (AmountTransactionCurrency changed)
					include UpdateCashLedgerStatement
					if (IsCustomerType)
						invoke CashLedgerTransactionAmountUpdate ReceivablePaymentRel
							invoked.TransactionAmount = AmountTransactionCurrency
					if (IsGeneralLedgerType)
						invoke Update first CashLedgerTransactionsRel
							invoked.IssueDate 					 = TransactionDate
							invoked.IssuedBankAmount  			 = OrigAmountToPass
							invoked.CashLedgerStatement 		 = CashLedgerStatement
					if (IsVendorType)
						invoke Update first CashLedgerPayablesPaymentsRel
							invoked.PaymentAmount 					= OrigAmountToPass

													
		Delete is a Delete Action
			valid when (CashLedgerStatement.StatementStatus.Open)
			Entrance Rules
				constraint (CashLedgerStatement.StatementStatus.Open)
					"BankStatementClosed_-InquiryOnly" 
				LocalActionType = LocalActionType.Delete
				include EditData					
			Action Rules
				include RevertOldAmounts
				invoke UpdateTotals CashLedgerStatement
					invoked.PrmStatementBalanceEntered 	= LocalStatementBalanceDelta
					invoked.PrmStatementEnteredDebit	= LocalStatementDebitDelta
					invoked.PrmStatementEnteredCredit	= LocalStatementCreditDelta
				if (IsCustomerType)
					invoke Delete ReceivablePaymentRel
				else
				if (IsVendorType)
					invoke Delete CashLedgerPayablesPaymentsRel
				else
				if (IsGeneralLedgerType)
					invoke Delete CashLedgerTransactionsRel
					
		ReopenDelete is a Delete Action  
			default label is untranslatable
			restricted
			Action Rules

		
									
