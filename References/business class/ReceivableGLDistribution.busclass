ReceivableGLDistribution is a BusinessClass
	owned by ar
	prefix is AMD

	default label is "ReceivableDistribution"

	Ontology
		symbolic key is ReceivableGLDistribution


	Patterns
		implements StaticJava
		disable AuditIndex
		implements ContextualParent
		implements Archivable

	Persistent Fields


		GeneralLedgerDate					is a PostingDate
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		ProgramSequence
			classic name is PROG-SEQ-NBR
		ReceivableCompanyDataGroup
		ReceivableCompanyGroup
		BatchNumber
			classic name is BATCH-NBR





		TransType							is AlphaUpper size 1
			States
				CreditMemo				value is "C"
				DebitMemo				value is "D"
				Invoice					value is "I"
				MixedSignLines			value is "M"
				NonArPayment			value is "N"
				CustomerPayment			value is "P"
				BillOfExchangePayment	value is "B"
				CustomerDraftRemittance	value is "R"
		Invoice
		TransactionDate						is an ExchangeDate
			classic name is TRANS-DATE
		LastDistributionSequence			is a DistSeq
			classic name is DIST-SEQ
		Origin								is a DstType
			classic name is DST-TYPE
		SequenceNumber						is a Sequence
			classic name is PAYMENT-SEQ
		AccumulationType					is AlphaUpper size 1
			classic name is ACCUM-TYPE
			States
				Summary	value is "S"
				Detail	value is "D"
		ToCompanyBaseAmount					is an InternationalAmount
			classic name is TO-COMP-AMT
			precision is ReceivableCompanyDataGroup.TransactionCompany.Currency.NumberOfDecimals
		Units								is a Unit
		Description
			classic name is DESC
		Status								is Numeric size 1
			States
				Unreleased	value is 0
				Released	value is 2
				Posted		value is 9
		OriginalCurrency					is a FromCurrency
			classic name is ORIG-CURRENCY
			default label is "TransactionCurrency"	
		GeneralLedgerAccount				is a TransactionCodeBlock	
			classic name for GeneralLedgerAccount.AccountingUnit is ACCT-UNIT
			classic name for GeneralLedgerAccount.GeneralLedgerChartAccount is ACCOUNT
			classic name for GeneralLedgerAccount.Project is ACTIVITY
			default label is "GlobalLedgerAccount"
		DistributionAmount					is a FinanceCurrencyAmountGroup
			default label is "DistributionAmount"
			classic name for DistributionAmount.CurrencyAmount is ORIG-AMT
			classic name for DistributionAmount.FunctionalAmount.EnteredCurrencyAmount is TRAN-AMT
		CategoryType						is AlphaUpper size 1 //relates to IEFIN-116496 "N" used for Non-AR Fund Accounting processing
			classic name is CAT-TYPE


		TaxCode
		BaseTaxableAmount					is an InternationalAmount
			classic name is TRAN-TAXABLE
			precision is ReceivableCompanyDataGroup.TransactionCompany.Currency.NumberOfDecimals
		AuditSummaryIndicator				is AlphaUpper size 2
			classic name is UPDATE-SUM
			States
				Invoice					value is "01"
				Memos					value is "02"
				Cash					value is "03"
				CreditsApplied			value is "04"
				Chargebacks				value is "06"
				Discounts				value is "07"
				WriteOffs				value is "08"
					default label is "Write-offs"
				GainLossOnCurrencyConv	value is "09"
					default label is "Gain/Loss on currency conv."
				CashedBillOfExchange	value is "10"
					default label is "Cashed Bill of Exchange"
				MarkedAsPaid			value is "13"	
					default label is "Marked As Paid"	
				TaxWithholding			value is "15"	
					default label is "Tax Withholding"	
		CurrencyDecimalsNumber				is an OrigNd
			classic name is ORIG-ND
		AutoReverseUnrealizedGainLoss		is AlphaUpper size 1
			classic name is AUTO-REV
			States
				Yes			value is "Y"
				No			value is "N"
				Currency	value is "C"


		TransactionTaxableAmount			is an InternationalAmount
			classic name is ORIG-TAXABLE
		DocumentNumber
			classic name is DOCUMENT-NBR
		DistributionSource					is AlphaUpper size 1
			classic name is DST-SOURCE
			States
				AccountsReceivable	value is "A"
				BillOfExchange		value is "B"
					default label is "Bill of Exchange"
		JournalBook							is AlphaUpper size 12
			classic name is JRNL-BOOK-NBR
			restricted
		MxValues							is a MxValueX3InArdistrib
			classic name is MX-VALUE
		GltObjId							is an ObjId
		DraftSource
		AtnObjId							is an ObjId
		TaxPoint							is AlphaUpper size 1
			States
				InvoiceDate		value is "I"
				PaymentDate		value is "P"
				ShippingDate	value is "S"
				GlDate			value is "G"
					default label is "GlobalLedgerDate"
		JournalBookSequenceNumber			is a JbkSeqNbr
			classic name is JBK-SEQ-NBR
			restricted
		LineType							is AlphaUpper size 1
			States
				Goods		value is "G"
				Services	value is "S"
		StockWeight
			classic name is WEIGHT
		ICNCode
		SupplementaryQuantity				is a Quantity
			classic name is SUPLMNTARY-QTY
		BalanceCreateDate					is Date
			classic name is BAL-DATE
		ReceivableApplicationOjectID		is an ObjId
			classic name is ARA-OBJ-ID
		CreateDate							is TimeStamp


		ProductTaxCategory
		TaxUsageCode
		VATInputTaxAmount					is an InternationalAmount
		RecoverableTaxAreaId				is like TaxCode
		RecoverableJurisLevel				is a VertexJurisdictionLevel
		RecoverableImpositionType			is a VertexImpositionType
		RecoverablePercent					is a Percent
		RecoverableAmount					is an InternationalAmount
		UnrecoverableAmount					is an InternationalAmount
		RecoverableDate						is Date
		BlockingOverridePercent				is a TaxRateValue
		PartialExemptRecvblOvrdPct			is a TaxRateValue
		ForeignOrDomestic					is Numeric 1
			States
				Domestic	value is 0
				Foreign		value is 1
		IsService							is Boolean
		VertexSimplificationCode			is a SimplificationCode
		Imposition							is a VertexImpositionType
		RateClassificationText				is a RateClassification
		ReturnedTaxType						is a VertexTaxType
		InputOutputType						is a VertexInputOutputType
		InvoiceTextCode						is a InvoiceTextCodeOut
		SummaryInvoiceTextOut				is a SummaryInvoiceText
		VertexVATType						is a VatType
		OriginatingInterfaceRun				is like ReceivablesInterfaceResult
		ApplicationCloseResult
			delete ignored


		AllocationType
		FundAppliedAmount 					is an InternationalAmount 
		AssociatedLine						is like UniqueID 
		LinkedTaxGroup 


		OneSourceCreatedTaxDistribution		is Boolean 
		CurrencyRate						is an OrigRate				
			classic name is ORIG-RATE
			restricted													
		TransactionAmount					is a CurrencyAmount			
			classic name is ORIG-AMT
			restricted													
		BaseAmount							is an InternationalAmount	
			classic name is TRAN-AMT
			precision is ReceivableCompanyDataGroup.TransactionCompany.Currency.NumberOfDecimals
			restricted													
		TaxRecovery							is Boolean  
		HSNSACCode
		ApplicationID						is Numeric 12
		TaxOriginCrossReference	 			is like ReceivableGLDistribution
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected


	Context Fields


		ReceivableInvoiceBatch
		RTMPayment


		ContextInvoiceDetailTypeForApplication 			is an InvoiceDetailTypeForApplication
		ContextInvoiceDetailSequenceForApplication 		is an InvoiceDetailSequenceForApplication
		ContextReceivableApplicationSequenceForContext 	is a ReceivableApplicationSequenceForContext
		ContextReceivableCompanyForContext				is a ReceivableCompanyForContext
		ContextReceivableBatchForContext				is a ReceivableBatchForContext
		ContextReceivableInvoiceForContext				is a ReceivableInvoiceForContext
		ContextInvoiceDetailTypeForContext				is an InvoiceDetailTypeForContext
		ContextInvoiceDetailSequenceForContext			is an InvoiceDetailSequenceForContext
		ContextSettlementIDForContext					is a SettlementIDForContext
		ContextDocumentHeaderForContext					is a DocumentHeaderForContext
		ContextFundDistributionSetState					is a FundDistributionSetState


		GeneralLedgerCompanyGroup
			default label is "GlobalLedgerCompanyGroup"	
		GeneralLedgerDateRange				is a DateRange



	Local Fields
		CalculateTax
		LocalTaxRate						is like ChrgRate 



		I2									is Numeric 3
		LocalCalculateTaxExecuted			is Alpha 1
		ProcessTaxHistory
		LocalTaxHistoryProcessed			is Alpha 1						
		CurrencyWork						is a CurrencyExchangeGroup

		LocalProcessLevel					is like ReceivableProcessLevel

		LocalFinanceCodeBlock				is a DefaultCodeBlock
		LocalStructureDefaultCode			is a StructureDefaultCode
		LocalDefaultReturn					is Alpha 1
		IntrastatProcessing

		LocalEnterpriseGroup				is like FinanceEnterpriseGroup	
		LocalJournalizeGroup				is a JournalizeGroup			

		LocalCompany						is like ReceivableCompany
		LocalReceivableTransactionSummary	is AlphaUpper size 2

		NextSentence						is Boolean

		CurrentYear							is Numeric 4
		CurrentPeriod						is Numeric 2
		LocalTransactionDate				is Date
		LocalGeneralLedgerEvent				is like GeneralLedgerEvent
		LocalGeneralLedgerSystemCode		is a GeneralLedgerSystemCode
		BypassUnitAndAmountEdit
		LocalCreateFromBatch				is Boolean
		LocalTermsDiscount					is an InternationalAmount
		LocalCurrentAmount 					is an InternationalAmount 
		LocalUnappliedRemittanceTotalAmount is an InternationalAmount 
		CalculateTerms
		LocalTermsCalTrigger				is Alpha 1
		LocalTermsCode						is an TermsCode
		LocalTaxableAmount					is an InternationalAmount

		LocalRecoverableAccount				is a FinanceCodeBlockFull	
		LocalUnRecoverableAccount			is a FinanceCodeBlockFull	
		LocalForeignRecoverableAccount		is a FinanceCodeBlockFull	
		LocalForeignUnRecoverableAccount	is a FinanceCodeBlockFull	
		LocalJurisdictionLookupKey			is Alpha 200				





		NegativeFinanceCurrencyAmountGroup
		LocalReceivableCompany				is like ReceivableCompany
		LocalTransType						is like TransType
		LocalInvoice						is like ReceivableInvoice
		LocalBoolean						is Boolean
		LocalDescription					is like Description
		LocalCurrencyWork					is a ReceivableExchange
		LocalCurrencyCalculationGroup		is a CurrencyCalculationGroup
		LocalReceivableGeneralLedgerCode	is like ReceivableGeneralLedgerCode
		LocalCalculateTaxEffectiveDate		is Date
		LocalPrmReceivableCompany			is a ReceivableCompany
		LocalSystemAccount					is a SystemAccount
		ReceivablesGainLossCalculation
		LocalGeneralLedgerCompanyGroup				is a GeneralLedgerCompanyGroup
		LocalMajClass								is a CustomerMajorClass
		LocalMinClass								is a CustomerMinorClass
		LocalCreditAnalyst							is a CreditAnalyst
		LocalSalesRepresentative					is a SalesRepresentative
		LocalActor									is Actor
		LocalCalculateReceivableFinanceStructure	is a CalculateReceivableFinanceStructure
		LocalAnswer 								is Alpha size 1

		LocalAccountingUnit							is like AccountingUnit
		LocalFinanceDimension1						is a FinanceDimension1
		LocalGLFinanceCodeBlock						is a FinanceCodeBlock
		LocalBatchNumber							is a BatchNumber		



		LocalTaxSequenceCount				is Numeric size 9
		LocalOriginalCurrency				is Alpha size 5
		LocalBasecurrency					is Alpha size 5
		LocalBODAccountingEntity			is Alpha size 22
		LocalDistAccountingEntity			is Alpha size 22
		LocalTaxExempt						is Boolean
		LocalFunctionalCurrency				is Alpha size 5
		LocalAlternateCurrency				is Alpha size 5
		LocalAlternateCurrency2				is Alpha size 5
		LocalTriggerFrom					is Alpha size 100
		NativeLPLBODTrigger					is Boolean
		LocalInvoiceDummyLineSequence		is Numeric size 9
		LocalLineDescriptionIN				is Alpha size 60
		LocalDummyLineTaxSequence			is Numeric size 9
		LocalInvoiceLineSequence			is Numeric size 9
		LocalDummyLineDistCurrAmount		is an InternationalAmount
		LocalTaxExemptionID					is Alpha size 10
		LocalDummyLineLastSeq	is Numeric size 9
		LocalDummyQuantity					is Decimal size 13.4


		LocalPaymentType					is Alpha size 50
		LocalPaymentStatus					is Alpha size 50
		LocalCompanyCurrency				is AlphaUpper size 5
		LocalBODCompany						is Numeric size 4
		LocalCustomer						is Numeric size 9
		LocalDistributionSequence 			is Numeric size 9
		LocalTransactionAmount				is Decimal size 19.3
		LocalSkipGLTransFromBatch			is Boolean

		LocalFEGtext						is like FinanceEnterpriseGroup
		LocalDerivedFESKey 					is a FrontEndSplitKey
#ifdef module cam
		LocalFinanceDimension10				is a FinanceDimension10
#endif
		LocalTrigger								is Alpha size 1
		Idx									is Numeric 2
		LocalInquire						is Boolean			

	Transient Fields
		AdditionalTaxCode					is a TaxCode


		TransientTaxRate					is Percent 7.5
		TransientAccrualFlag				is Alpha size 1

		BypassStructureRelationEdit
		TransientFinanceCodeBlock			is a TransactionCodeBlock	
			derive value from GeneralLedgerAccount
		TransientAccountingEntity			is an AccountingEntity
			derive value from ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity



		TransientRunGroup					is AlphaUpper size 30
			derive value from GLTransactionDetailRel.JournalizeGroup
		TransientReferenceToThisInstance	is BusinessObjectReference
			derive value from reference to this instance
		FromInterface						is Boolean
		BypassProjectDateEdit
		DoTaxHistory						is Boolean
		BypassCalculateBaseAmounts			is Boolean
		TransientTaxable					is like InternationalAmount
		KeepFunctionalRate					is Boolean
		FlipAmounts							is Boolean
		TransientCurrencyTable				is a CurrencyTable
		TransientReportCurrencyAmount		is a AnyFinanceCurrencyAmount
		TransientRoundingDistrib			is Boolean
		BypassGLDateEdit					is Boolean
		BypassStatusEdit					is Boolean
		TransientBODTriggeredFlag			is Boolean
		DoGLUpdate							is Boolean
		TransientPaymentDate				is an ExchangeDate
		TransientIntercompanyBillingSettlementHeader is like IntercompanyBillingSettlementHeader 
			derive value from ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader
		BypassInvoiceCommonEdits			is Boolean
		UnitsAmount
			derive value from Units
		TransientHSNSACCode					is Boolean
		TransientUpdateCashCodeFund			is Boolean
		BypassNegativeRateEdit
		TransientNonARCashOffset			is Boolean		
		PaymentApplyDistributionSelectAmount			is like InternationalAmount 
			derive value from DerivedPaymentApplyDistributionSelectAmount
		RemittanceApplyDistributionSelectAmount			is like InternationalAmount 
			derive value from DerivedRemittanceApplyDistributionSelectAmount
		SettlementDetailApplyDistributionSelectAmount	is like InternationalAmount 
			derive value from DerivedSettlementDetailApplyDistributionSelectAmount
		FundApplyDistributionSelectAmount				is like InternationalAmount 
			derive value from DerivedFundApplyDistributionSelectAmount
		SkipTaxOriginCrossReference			is Boolean
		BypassCreateTaxDistribution			is Boolean
		AllowLinkedTaxDeletion				is Boolean
		AllowLinkedTaxUpdate				is Boolean
		BypassProcessTaxCode				is Boolean
		BypassActiveCodeBlockEdit							
		TransientSetPaymentBatchNumber		is Boolean			
		TransientPaymentBatchNumber			is a BatchNumber	
		TransientPrepaymentTax				is Boolean					
		TransientTransactionTaxAmount		is an InternationalAmount	


	Derived Fields
		DerivedCurrencyTable is a DerivedField
			type is like CurrencyTable

			if (IsInvoiceBased)
				return ReceivableInvoiceRel.CurrencyTable
			else
			if  (Origin.Payment)
				return ReceivablePaymentHeaderRel.CurrencyTable
			else
			if  (CompanySystemClosingControlRel exists)
				return CompanySystemClosingControlRel.CurrencyTable
			else
				return ReceivableCompanyGroup.GlCompany.CurrencyTable

		ThisProgramNameText is a MessageField
			restricted
			"ReceivableGLDistribution"

		ReceivablesDistributionPostingMessage is a MessageField
			restricted
			"ReceivablesDistributionPosting"

		DerivedTransactionAmount is a DerivedField
			type is like InternationalAmount

			if  ((Origin.Invoicing
			and   ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice)
			or   (Origin.DebitCreditMemo
			and   ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
			or   (Origin.Payment))
				return DistributionAmount.CurrencyAmount * -1
			else
				return DistributionAmount.CurrencyAmount

		DerivedTransactionTaxableAmount is a DerivedField
			type is like InternationalAmount
			if  ((Origin.Invoicing
			and   ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice)
			or   (Origin.DebitCreditMemo
			and   ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
			or   (Origin.Payment))
				return TransactionTaxableAmount * -1
			else
				return TransactionTaxableAmount

		DerivedFiscalYear is a DerivedField
			type is Numeric 4
			restricted
			if (ReceivableCompanyGroup.GlCompany.PeriodsPerYear.Twelve)
				CurrentYear = current year
				LocalTransactionDate = current corporate date
				CurrentPeriod = LocalTransactionDate month
				if (ReceivableCompanyGroup.GlCompany.PeriodOffset entered)
					CurrentPeriod += ReceivableCompanyGroup.GlCompany.PeriodOffset
					if (CurrentPeriod > 12)
						CurrentYear += 1
						CurrentPeriod -=12
			else
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate week / 4

			return CurrentYear

		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"ReceivableGLDistribution"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

		DerivedCompanyWithinGLCompanyGroup is a DerivedField
			type is Boolean
			if (GeneralLedgerCompanyGroup not entered)
				return true
			if (GLCompanyGroupMemberRelExists)
				return true
			return false


		DerivedDistStatus is a DerivedField
			type is Alpha size 22
			restricted
			if(Status.Unreleased)
				return "Unreleased"
			else
			if(Status.Released)
				return "Released"
			else
				return "Posted"

		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCurrentTimeStamp = current timestamp
			return BODCurrentTimeStamp

		DerivedCreateDate is a DerivedField
			type is Alpha size 25
			restricted
			return CreateDate

		DerivedDistCreateDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedCreateDate[1:4] + "-" + DerivedCreateDate[5:6] + "-" + DerivedCreateDate[7:8] + "T" + DerivedCreateDate[9:10] + ":" + DerivedCreateDate[11:12] + ":" + DerivedCreateDate[13:14] + "Z"

		DerivedTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return TransactionDate

		DerivedDistTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedTransactionDate[1:4] + "-" + DerivedTransactionDate[5:6] + "-" + DerivedTransactionDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedGeneralLedgerDate is a DerivedField
			type is Alpha size 25
			restricted
			return GeneralLedgerDate

		DerivedDistGeneralLedgerDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedGeneralLedgerDate[1:4] + "-" + DerivedGeneralLedgerDate[5:6] + "-" + DerivedGeneralLedgerDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedTransactionTaxableBasisAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return TransactionTaxableAmount * -1

		DerivedTransactionTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return DerivedTransactionTaxableBasisAmount * DistributionAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return DistributionAmount.CurrencyAmount  * (DistributionAmount.FunctionalAmount.EnteredCurrencyRate * -1)

		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return DistributionAmount.CurrencyAmount * -1

		DerivedTaxDistributionBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1

		DerivedTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			if(TaxRateRel exists)
				return last TaxRateRel.Rate * 100
			else
				return ""


		DerivedReceivableInvoice is a DerivedField
			type is Alpha size 25
			restricted
			return ReceivableInvoiceRel.ReceivableInvoice

		DerivedDummyBaseUOMQuantity is a DerivedField
			type is Decimal size 13.4
			restricted
			if(ReceivableInvoiceRel.ReceivableInvoiceType.CreditMemo)
				return -1
			else
				return 1


		DerivedFundDistributionOpenAmount is a DerivedField 
			type is like InternationalAmount
			return (DistributionAmount.CurrencyAmount - FundAppliedAmount)


		DerivedAllowSelectDistributionOpenAmount is a DerivedField 
			type is Boolean
			restricted
			if (AllowSelectDistributionSet)
				if (OnSettlementDetailSelectDistributionForm)
					if  (ContextSettlementDetailLineRel exists
					and	!ICBReceivableApplyDistributionContextRel exists
					and  DerivedFundDistributionOpenAmount != 0)
						return true
					else
						return false
				else
				if (OnReceivablePaymentRemittanceDetailForm)
					if  (ReceivableInvoiceDetailContextRel.ReceivablePaymentRemittanceDetailContextRel exists
					and !RemittanceApplyDistributionRel exists
					and  DerivedRemittanceApplyDistributionAvailableAmount != 0)
						return true
					else
						return false
				else
				if (OnReceivableApplicationSelectDetailForm)
					if (!PaymentApplyDistributionRel exists
					and  DerivedFundDistributionOpenAmount != 0)
						return true
					else
						return false
				else
				if (OnReceivableApplicationReviewWriteoffForm
				or  OnReceivableApplicationReviewPaymentApplyForm
				or  OnReceivableApplicationReviewRemittanceApplyForm
				or  OnReceivableApplicationReviewCreditApplicationForm)
					if (!FundApplyDistributionRel exists
					and  DerivedFundDistributionOpenAmount != 0)
						return true
					else
						return false
				else
					return false
			else
				return false


		DerivedAllowUnselectDistributionOpenAmount is a DerivedField 
			type is Boolean
			restricted
			if (AllowSelectDistributionSet)
				if (OnSettlementDetailSelectDistributionForm)
					if (ICBReceivableApplyDistributionContextRel exists)
						if (ICBReceivableApplyDistributionContextRel.IntercompanyBillingSettlementHeader.Status.Unreleased)
							return true
					else
						return false
				else
				if (OnReceivablePaymentRemittanceDetailForm)
					if (RemittanceApplyDistributionRel exists)
						if (RemittanceApplyDistributionRel.ReceivablePayment.Status.Unreleased)
							return true
						else
							return false
					else
						return false
				else
				if (OnReceivableApplicationSelectDetailForm)
					if (PaymentApplyDistributionRel exists)
						return true
					else
						return false
				else
				if (OnReceivableApplicationReviewWriteoffForm
				or  OnReceivableApplicationReviewPaymentApplyForm
				or  OnReceivableApplicationReviewRemittanceApplyForm
				or  OnReceivableApplicationReviewCreditApplicationForm)
					if (FundApplyDistributionRel exists)
						return true
					else
						return false
				else
					return false
			else
				return false

		DerivedAllowDistributionSetUpdate is a DerivedField 
			type is Boolean
			restricted
			if (ContextFundDistributionSetState.NeedsPaymentApply
			or  ContextFundDistributionSetState.NeedsRemittanceApply
			or  ContextFundDistributionSetState.NeedsWriteoffApply
			or  ContextFundDistributionSetState.NeedsCreditMemoApply
			or	ContextFundDistributionSetState.NeedsSettlementDetailApply)
				return true
			else
				return false


		DerivedReceivableInvoiceTransType is a DerivedField
			type is Alpha size 25
			restricted
			return ReceivableInvoiceRel.DerivedReceivableTransType

		DerivedDummyReceivableGLDistAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceRel.ReceivableInvoiceType.CreditMemo)
				return DistributionAmount.CurrencyAmount * -1
			else
				return DistributionAmount.CurrencyAmount

		DerivedDummyTransactionTaxableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceRel.ReceivableInvoiceType.CreditMemo)
				return TransactionTaxableAmount * -1
			else
				return TransactionTaxableAmount

		DerivedUNSPSCCodeNoDash is a StringField
			type is Alpha 35
			ReceivableCompanyDataGroup.UNSPSCCode.UNSPSCSegment
			ReceivableCompanyDataGroup.UNSPSCCode.UNSPSCFamily
			ReceivableCompanyDataGroup.UNSPSCCode.UNSPSCClass
			ReceivableCompanyDataGroup.UNSPSCCode.UNSPSCCommodity

		DerivedUnitCost is a DerivedField
			type is like UnitCost
			restricted
			if (Units entered)
				return DistributionAmount.FunctionalAmount.EnteredCurrencyAmount / Units
			else
				return blank

		DerivedTaxDifference is a DerivedField
			type is like InternationalAmount
			restricted
			if (CalculateTax.OutputlTaxToleranceDiff < 0)
				return -1 * CalculateTax.OutputlTaxToleranceDiff
			else
				return CalculateTax.OutputlTaxToleranceDiff

		FlipDistributionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return -1 * DistributionAmount.CurrencyAmount

		FlipCalculatedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return -1 * CalculateTax.LocalSaveTaxAmount

		DerivedCustomerName			is a DerivedField
			type is Alpha size 120
			restricted
			return CustomerRel.Name

		DerivedCustomerAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return CustomerRel.PostalAddress.Municipality

		DerivedCustomerStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.StateProvince

		DerivedCustomerPostalCode	is a DerivedField
			type is Alpha size 40
			restricted
			return CustomerRel.PostalAddress.PostalCode

		DerivedCustomerCountry	is a DerivedField
			type is Alpha size 5
			restricted
			return CustomerRel.PostalAddress.Country

		DerivedProcessLevelName			is a DerivedField
			type is Alpha size 120
			restricted
			return ReceivableProcessLevelRel.Name

		DerivedPLevelStateProvinceIDNumber			is a DerivedField
			type is Alpha size 25
			restricted
			return ReceivableProcessLevelRel.PostalAddress.StateProvinceIDNumber

		DerivedProcessLevelAddress1	is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.DeliveryAddress.AddressLine1

		DerivedProcessLevelAddress2	is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.DeliveryAddress.AddressLine2

		DerivedProcessLevelAddress3	is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.DeliveryAddress.AddressLine3

		DerivedProcessLevelAddress4	is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.DeliveryAddress.AddressLine4

		DerivedProcessLevelMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return ReceivableProcessLevelRel.PostalAddress.Municipality

		DerivedProcessLevelStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.StateProvince

		DerivedProcessLevelPostalCode	is a DerivedField
			type is Alpha size 40
			restricted
			return ReceivableProcessLevelRel.PostalAddress.PostalCode

		DerivedProcessLevelCountry	is a DerivedField
			type is Alpha size 5
			restricted
			return ReceivableProcessLevelRel.PostalAddress.Country

		DerivedBODAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			return ReceivableInvoiceRel.DerivedBODAccountingEntity

		ReceivableInvoiceGLDDummyLineTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			initialize LocalInvoiceLineSequence
			if(ReceivableGLDistributionDummyTaxRel exist)
				for each ReceivableGLDistributionDummyTaxRel
					if (each.AccumulationType.Detail)
						if(each.TaxCode not entered)
							LocalInvoiceLineSequence +=1
							LocalDummyLineDistCurrAmount = each.DistributionAmount.CurrencyAmount
							LocalDummyLineLastSeq = each.LastDistributionSequence
						if (each.TaxCode entered)
							each.LocalDummyLineTaxSequence = each.LastDistributionSequence -LocalDummyLineLastSeq
							if(LocalDummyLineDistCurrAmount - each.TransactionTaxableAmount = 0)
								each.LocalTaxExemptionID ="Taxable"
							else
								each.LocalTaxExemptionID ="Exempt"
							if(LocalInvoiceLineSequence = LocalInvoiceDummyLineSequence)
								ReceivableInvoiceGLDDummyLineTaxXMLBOD 	+= 	template.IONInvoiceXML_ReceivableInvoiceGLDDummyLineTaxXMLBOD_ST document for each
				return ReceivableInvoiceGLDDummyLineTaxXMLBOD



		DerivedBasisBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return BaseTaxableAmount * -1


		DerivedGLTransactionAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			return DistributionAmount.CurrencyAmount

		DerivedPaymentApplyDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (PaymentApplyDistributionRel exists)
				return PaymentApplyDistributionRel.DistributionAmount.CurrencyAmount
			else
				return 0

		DerivedRemittanceApplyDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (RemittanceApplyDistributionRel exists)
				return RemittanceApplyDistributionRel.DistributionAmount.CurrencyAmount
			else
				return 0

		DerivedSettlementDetailApplyDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ICBReceivableApplyDistributionContextRel exists)
				return ICBReceivableApplyDistributionContextRel.DistributionAmount.CurrencyAmount
			else
				return 0

		DerivedRemittanceApplyDistributionAvailableAmount is a DerivedField 
			type is like InternationalAmount
			LocalUnappliedRemittanceTotalAmount = sum RemittanceApplyDistributionByInvoiceThisDistributionRel.DistributionAmount.CurrencyAmount
			return DerivedFundDistributionOpenAmount - LocalUnappliedRemittanceTotalAmount

		DerivedFundApplyDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (FundApplyDistributionRel exists)
				return FundApplyDistributionRel.DistributionAmount.CurrencyAmount
			else
				return 0

		DerivedDistributionStatus	is a DerivedField
			type is Alpha size 22
			restricted
			if(Status.Unreleased)
				return "Unreleased"
			if(Status.Released)
				return "Released"
			if(Status.Posted)
				return "Posted"


		CashFundMsg is a MessageField
			restricted
			"FundAccounting_-_CashAllocation"

		ARFundMsg is a MessageField
			restricted
			"FundAccounting_-_AccountsReceivableAllocation"

		AdjustmentFundMsg is a MessageField
			restricted
			"FundAccounting_-_AdjustmentAllocation"

	Field Rules

		GeneralLedgerDate
			if (action type.Create				
			or  GeneralLedgerDate changed)		
				if ((CompanySystemClosingControlRel.Control and CompanyRel.VerifyGLDateWithinGLDateRange) and !BypassGLDateEdit)
					constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
						"Global_\Ledger_\Date<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<ReceivableCompanyGroup.GlCompany>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

		CurrencyRate
			if (ReceivableInvoiceRel exists)
				default to ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
		ReceivableCompanyDataGroup
			required
		ReceivableCompanyGroup
			required

		ReceivableCompanyGroup.GlCompany
			if (ReceivableCompanyGroup.GlCompany not entered)
				ReceivableCompanyGroup.GlCompany = ReceivableInvoiceRel.Company
			if (ReceivableCompanyGroup.GlCompany not entered)
				ReceivableCompanyGroup.GlCompany = ReceivablePaymentHeaderRel.Company
			if (ReceivableCompanyGroup.GlCompany not entered)
				ReceivableCompanyGroup.GlCompany = ReceivablePaymentRel.Company
			if (ReceivableCompanyGroup.GlCompany not entered)
				ReceivableCompanyGroup.GlCompany = BillOfExchangeRel.Company
			if (ReceivableCompanyGroup.GlCompany not entered)
				ReceivableCompanyGroup.GlCompany = ReceivableCompanyDataGroup.TransactionCompany
			constraint (ReceivableCompanyGroup.GlCompany entered)
				"GlCompanyIsRequired"

		GeneralLedgerAccount
			required

			if (Status.Unreleased)
				LocalGeneralLedgerSystemCode = "AR"
				if (TransactionCompanyRel.Company.AccountingEntity.ValidSystems entered)
					constraint (LocalGeneralLedgerSystemCode within TransactionCompanyRel.Company.AccountingEntity.ValidSystems)
						"InvalidSystemFor<TransactionCompanyRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GeneralLedgerAccount.ToAccountingEntity.ValidSystems entered)
					constraint (LocalGeneralLedgerSystemCode within GeneralLedgerAccount.ToAccountingEntity.ValidSystems)
						"InvalidSystemForPosting<TransactionCompanyRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GeneralLedgerAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within GeneralLedgerAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemForAccount"
#ifdef module cam
				if (FinanceEnterpriseGroup.CustodialAccountManagement
				and GeneralLedgerAccount.FinanceDimension10 entered)
					LocalFinanceDimension10	= GeneralLedgerAccount.FinanceDimension10
					constraint (CustodialDetailAmountRel exists)
						"<FinanceEnterpriseGroup.FinanceDimension10Label>:<LocalFinanceDimension10>_MustBeSetupUnderCustodialAccounts"
#endif

		LastDistributionSequence
			autosequence when blank using Set2
				minimize contention and gaps

		ProgramSequence
			autosequence when blank using Set1
				minimize contention and gaps

		DistributionAmount

			if (GeneralLedgerAccount.AccountingEntity != GeneralLedgerAccount.ToAccountingEntity)
				if (GeneralLedgerAccount.AccountingEntity.FunctionalCurrency = GeneralLedgerAccount.ToAccountingEntity.FunctionalCurrency)
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate = DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency)
					DistributionAmount.ToAlternateAmount.EnteredCurrencyRate = DistributionAmount.AlternateAmount.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = DistributionAmount.AlternateAmount.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency2 = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency2)
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate = DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency3 = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency3)
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate = DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = DistributionAmount.AlternateAmount3.EnteredCurrencyAmount

			if  (!AuditSummaryIndicator.GainLossOnCurrencyConv
			and  !Origin.Invoicing
			and  !TransientRoundingDistrib
			and  !Origin.DebitCreditMemo
			and  !BypassDistributionAmountEditForZeroTax)
				constraint (DistributionAmount.CurrencyAmount entered)
					"Distribution_\AmountIsRequired"

			if (action type.Update)
				if  (DistributionAmount.CurrencyAmount entered)
					constraint (old DistributionAmount.CurrencyAmount entered)
						"CannotChangeFromZeroAmountToNonZeroAmount;MustDeleteAndRecreate"
				else
					constraint (old DistributionAmount.CurrencyAmount not entered)
						"CannotChangeFromNonZeroAmountToZeroAmount;MustDeleteAndRecreate"

			if  ((action type.Update
			and  (!DistributionAmount.FunctionalAmount.EnteredCurrencyRate changed
			or	  !DistributionAmount.AlternateAmount.EnteredCurrencyRate changed
			or	  !DistributionAmount.AlternateAmount2.EnteredCurrencyRate changed
			or	  !DistributionAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	  !DistributionAmount.ReportAmount1.EnteredCurrencyRate changed
			or	  !DistributionAmount.ReportAmount2.EnteredCurrencyRate changed
			or	  !DistributionAmount.ReportAmount3.EnteredCurrencyRate changed
			or	  !DistributionAmount.ReportAmount4.EnteredCurrencyRate changed
			or	  !DistributionAmount.ReportAmount5.EnteredCurrencyRate changed))
			or   (action type.Create
			and  (DistributionAmount.FunctionalAmount.EnteredCurrencyRate entered
			or	  DistributionAmount.AlternateAmount.EnteredCurrencyRate entered
			or	  DistributionAmount.AlternateAmount2.EnteredCurrencyRate entered
			or	  DistributionAmount.AlternateAmount3.EnteredCurrencyRate entered
			or	  DistributionAmount.ReportAmount1.EnteredCurrencyRate entered
			or	  DistributionAmount.ReportAmount2.EnteredCurrencyRate entered
			or	  DistributionAmount.ReportAmount3.EnteredCurrencyRate entered
			or	  DistributionAmount.ReportAmount4.EnteredCurrencyRate entered
			or	  DistributionAmount.ReportAmount5.EnteredCurrencyRate entered)))
				DistributionAmount.KeepRateOnly = true

			if (IsInvoiceBased)
				if  (DistributionAmount.CurrencyAmount not entered
				and  ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					if (TransactionTaxableAmount entered)
						constraint (TaxCode entered)
							"Tax_\CodeRequiredIf_\Taxable_\AmountEntered"

					if (TaxCode entered)
						constraint (TransactionTaxableAmount entered)
							"TransactionOr_\Taxable_\AmountRequiredIf_\Tax_\CodeEntered"






			if (TransactionTaxableAmount not entered
			and TaxCode entered)
				constraint (DistributionAmount.CurrencyAmount entered)
					"Distribution_\AmountOr_\Taxable_\AmountRequired"

		TransactionTaxableAmount
			if (DistributionAmount.CurrencyAmount not entered
			and TaxCode entered)
				constraint (TransactionTaxableAmount entered)
					"Taxable_\Transaction_\AmountOr_\Distribution_\AmountRequired"

			if (TransactionTaxableAmount entered)
				initialize CurrencyWork
				CurrencyWork.TransactionAmount							= TransactionTaxableAmount
				if (ReceivableCompanyDataGroup.TransactionCompany entered)
					CurrencyWork.BaseAmount.ToCurrency					= TransactionCompanyRel.Currency
				else
				if (Origin.Payment
				or  Origin.RTMPayment)
					CurrencyWork.BaseAmount.ToCurrency					= ReceivablePaymentHeaderRel.Company.Currency
				else
				if (Origin.Invoicing
				or  Origin.DebitCreditMemo)
					CurrencyWork.BaseAmount.ToCurrency					= ReceivableInvoiceRel.Company.Currency

				if (Origin.Payment
				or  Origin.RTMPayment)
					CurrencyWork.BaseAmount.EnteredCurrencyRate			= ReceivablePaymentHeaderRel.CurrencyRate
				else
				if (Origin.Invoicing
				or  Origin.DebitCreditMemo)
					CurrencyWork.BaseAmount.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
				if (IsFromBOE)
					CurrencyWork.BaseAmount.EnteredCurrencyRate			= first BillOfExchangeRel.CurrencyRate

				BaseTaxableAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount


		ReceivableCompanyDataGroup.ReceivableDistributionCategory
			if (IsInvoiceBased)
				if  (DistributionAmount.CurrencyAmount not entered
				and  ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					if (TransactionTaxableAmount entered)
						constraint (TaxCode entered)
							"Tax_\CodeRequiredIf_\Taxable_\AmountEntered"

					if (TaxCode entered)
						constraint (TransactionTaxableAmount entered)
							"TransactionOr_\Taxable_\AmountRequiredIf_\Tax_\CodeEntered"

				constraint (ReceivableCompanyDataGroup.ReceivableDistributionCategory not changed)
					"CannotChange_\Distribution_\Category"									
			
			if (IsNonArPayment)
				constraint (ReceivableCompanyDataGroup.ReceivableDistributionCategory not changed)
					"CannotChange_\Distribution_\Category"

		TaxPoint
			if (TaxCode entered)
				if (TaxEntityRel.UseTaxCodeAccounts)
					TaxPoint = EntityTaxCodeGlCompanyRel.TaxPoint
				else
					TaxPoint = TaxEntityRel.TaxPoint

		CreateDate
			default to current timestamp

		CurrencyDecimalsNumber
			default to OriginalCurrency.NumberOfDecimals

		HSNSACCode
			if (IsHSNSACCodeEnabled
			and TransientHSNSACCode)
				if (!IsNonArPayment
				and !ReceivableInvoiceRel.Origin.ProformaInvoice
				and !TransientNonARCashOffset)	
					required
						"HSN_/SACCodeIsRequired"
			else
				cannot be entered
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"

			if (!Status.Unreleased)
				cannot be changed
					"DistributionIsReleased;CannotChangeHSN_/SACCode"

		TaxOriginCrossReference
			if (ReceivableInvoiceRel.IsAllocateForTaxPointPaymentSupported
			and TaxCode entered
			and (TaxPoint ="P"
			or (TaxCode.IsTaxTable
			and IsTaxCodeSetToTaxPoint))
			and invoking action != "CreateTaxDistribution"
			and invoking action != "CreateFromApplicationClose"
			and !FromInterface)
				if (!SkipTaxOriginCrossReference)
					default to ReceivableGLDistribution
					required
						"TaxOriginCrossReferenceIsRequired;AndMustBeSameValueAsCorrespondingOwningDistribution'sValue"

		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(GeneralLedgerAccount.Ledger changed
			or	GeneralLedgerAccount.ToAccountingEntity changed
			or	GeneralLedgerAccount.AccountingUnit changed
			or	GeneralLedgerAccount.GeneralLedgerChartAccount changed
			or	GeneralLedgerAccount.Project changed
			or	GeneralLedgerAccount.FinanceDimension1 changed
			or	GeneralLedgerAccount.FinanceDimension2 changed
			or	GeneralLedgerAccount.FinanceDimension3 changed
			or	GeneralLedgerAccount.FinanceDimension4 changed
			or	GeneralLedgerAccount.FinanceDimension5 changed
			or	GeneralLedgerAccount.FinanceDimension6 changed
			or	GeneralLedgerAccount.FinanceDimension7 changed
			or	GeneralLedgerAccount.FinanceDimension8 changed
			or	GeneralLedgerAccount.FinanceDimension9 changed
			or	GeneralLedgerAccount.FinanceDimension10 changed
			or	(DistributionAmount.CurrencyAmount changed
			and	DistributionAmount.CurrencyAmount != old DistributionAmount.CurrencyAmount*-1)))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true

	Conditions
		IsTaxCodeSetToTaxPoint
			restricted
			when ((TaxTableRel.TaxCode1.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode1.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode2.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode2.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode3.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode3.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode4.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode4.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode5.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode5.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode6.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode6.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode7.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode7.TaxCodeAccountsRel.TaxPoint = "P")
			or (TaxTableRel.TaxCode8.TaxEntityRel.TaxPoint = "P"
			or TaxTableRel.TaxCode8.TaxCodeAccountsRel.TaxPoint = "P"))

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	   CompanySecurityGroupMemberRel exists)


		CompanyCashCodeRelExists
			when (CompanyCashCodeRel exists)

		CompanyWithinGLCompanyGroup		
			when (GeneralLedgerCompanyGroup not entered
			or	  GLCompanyGroupMemberRel exists)

		IsDocumentBased
			restricted
			classic name is AMDSET2
			when (Origin.Invoicing
			or	Origin.Payment
			or	Origin.DebitCreditMemo)

		IsDocumentBasedOrFinCharge
			restricted
			classic name is AMDSET10
			when (IsDocumentBased
			or Origin.FinanceCharge)

		IsInvoiceBased
			restricted
			classic name is AMDSET2
			when (Origin.Invoicing
			or	Origin.DebitCreditMemo)

		IsFromBOE
			restricted
			when (Origin.BOECashingExpense
			or	Origin.BOEBankPresentationCashing
			or	Origin.BOEAccepted
			or	Origin.BOECancellation
			or	Origin.BOECashing
			or	Origin.BOEDishonored
			or	Origin.BOEDiscountedRemittance
			or	Origin.BOECashingWithRemittance
			or	Origin.BOEGainLoss)

		IsReleased1
			restricted
			classic name is AMDSET3
			when (Status.Released)

		IsUnrealizedGainLoss
			restricted
			classic name is AMDSET4
			when (Origin.UnrealizedGainLoss)

		IsTaxPointPaymentDate
			restricted
			classic name is AMDSET6
			when (TaxPoint.PaymentDate)





		IsCreditMemo
			restricted
			classic name is ARCRMEMO
			when (TransType.CreditMemo)

		HasGLTransactionDetail  
			restricted
			when (GLTransactionDetailRel exists)

		HasReceivableInvoice
			restricted
			classic name is AROIHDR-EXISTS
			when (ReceivableInvoiceRel exists)

		HasOpenItems
			restricted
			when (OpenItemsNavRel exists)

		IsNonArPayment
			restricted
			classic name is ARPAYMENT
			when (TransType.NonArPayment)

		IsNotBalanceCreateDate
			restricted
			classic name is BAL-DATE
			when (BalanceCreateDate not entered
			and   Status.Posted)

		IsCustomer
			restricted
			classic name is CUSTDESC
			when (ReceivableCompanyDataGroup.Customer entered
			or	ReceivableCompanyDataGroup.Customer != "000000000")

		IsReceivableApplicationOjectID
			restricted
			classic name is OBJ-ID-EXISTS
			when (ReceivableApplicationOjectID entered)

		IsApplicationID
			restricted
			when (ApplicationID entered)

		IsReceivablePaymentDistribution
			restricted
			classic name is PAYMENT-EXISTS
			when (Origin.Payment)	


		IsNonArPaymentDistribution
			restricted
			when (NonArPaymentNavRel exists)

		IsReleased2
			restricted
			classic name is POSTED
			when (Status.Released)

		IsReleased3
			restricted
			classic name is RELEASED
			when (Status = 1)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		PaymentDistrib
			restricted
			when (Origin.Payment
			and   DistributionSource.AccountsReceivable
			and   Invoice entered)

		BatchPaymentDistrib
			restricted
			when (Origin.Payment
			and   DistributionSource.AccountsReceivable
			and   Invoice not entered)

		IsReleasedOrPosted
			restricted
			when (Status = 2
			or	Status = 9)

		TaxEntityUsesVertex										
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		CallVertexByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction)

		JurisResultsExists										
			restricted
			when (JurisdictionResultsRel exist)

		VertexAllowProcessTaxHistory
			restricted
			when (TaxOriginCrossReference not entered
			or    ReceivableGLDistribution = first ReceivableGLDistributionSameTaxOriginCrossReferenceRel.ReceivableGLDistribution)

		WithinGeneralLedgerDateRange
			restricted
			when (GeneralLedgerDateRange not entered
			or	GeneralLedgerDate within GeneralLedgerDateRange)

		IsPaymentType
			restricted
			when (TransType.CustomerPayment or TransType.NonArPayment or TransType.BillOfExchangePayment)

		IsTransTypeCutomerPayment	
			restricted
			when (TransType.CustomerPayment)

		ValidForPaymentActorContext
			restricted
			when (ReceivablePaymentRel2.IsValidForActorContext and HasReceivableInvoice)

		ZeroAmountDistribution
			when (DistributionAmount.CurrencyAmount not entered)

		IsDebitTransferTriggered
			restricted
			when (TransientBODTriggeredFlag)

		IsZeroAmountTaxDistribution
			restricted
			when (DistributionAmount.CurrencyAmount not entered
			and   TransactionTaxableAmount entered
			and   TaxCode entered)

		IsNonARInterfaceZeroTaxDistribution
			restricted
			when (DistributionAmount.CurrencyAmount not entered
			and   TransactionTaxableAmount entered
			and   AdditionalTaxCode entered)

		BypassDistributionAmountEditForZeroTax
			restricted
			when ((IsZeroAmountTaxDistribution
			and  (action = "CreateTaxDistribution"
			or   !action type.Create))
			or   (IsNonARInterfaceZeroTaxDistribution
			and   action = "CreateInterfacedNonARPaymentDistribution"))

		IsValidForActorContext
			restricted
			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		TaxEntityUsesOneSource
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		TaxEntityUsesInforTax
			restricted
			when (TaxEntityRel.ThirdParty.InforTax)

		FundApplyDistributionRelExists 
			restricted
			when (FundApplyDistributionRel exists)

		PaymentApplyDistributionRelExists 
			restricted
			when (PaymentApplyDistributionRel exists)

		RemittanceApplyDistributionRelExists 
			restricted
			when (RemittanceApplyDistributionRel exists)

		ICBReceivableApplyDistributionContextRelExists 
			restricted
			when (ICBReceivableApplyDistributionContextRel exists)

		AllowSelectDistributionSet 
			restricted
			when ((Status.Released
			or	  Status.Posted)
			and	  FinanceEnterpriseGroup.FundAccounting
			and   ReceivableCompanyDataGroup.TransactionCompany.SelectFundDistributionSet
			and   ContextFundDistributionSetState entered
			and   DerivedAllowDistributionSetUpdate)

		AllowUnrestrictedUpdate 
			restricted
			when (Status.Unreleased
			or	 AllowSelectDistributionSet)

		AllowSelectDistributionOpenAmount 
			restricted
			when (DerivedAllowSelectDistributionOpenAmount)

		AllowUnselectFundDistribution 
			restricted
			when (DerivedAllowUnselectDistributionOpenAmount)

		HasFundApplyDistributions 
			restricted
			when(first ReceivableApplicationFundRel.FundApplyDistribution set exists
			and ((AllocationType.AR
			and first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel exists)
			or  (AllocationType.RNA
			and first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel exists)
			or  (AllocationType.Adjust
			and first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel exists)
			or  (AllocationType.Credit
			and first ReceivableApplicationFundRel.FundApplyCreditDistributionRel exists)))

		OnReceivableApplicationSelectDetailForm 
			restricted
			when (ContextFundDistributionSetState = "NP"
			and ContextReceivableApplicationSequenceForContext not entered)

		OnReceivableApplicationReviewPaymentApplyForm 
			restricted
			when (ContextFundDistributionSetState = "NP"
			and ContextReceivableApplicationSequenceForContext entered)

		OnReceivablePaymentRemittanceDetailForm 
			restricted
			when (ContextFundDistributionSetState = "NR")

		OnSettlementDetailSelectDistributionForm 
			restricted
			when (ContextFundDistributionSetState = "NS")

		OnReceivableApplicationReviewRemittanceApplyForm 
			restricted
			when (ContextFundDistributionSetState = "NP"
			and ContextReceivableApplicationSequenceForContext entered)

		OnReceivableApplicationReviewWriteoffForm 
			restricted
			when (ContextFundDistributionSetState = "NW")

		OnReceivableApplicationReviewCreditApplicationForm 
			restricted
			when (ContextFundDistributionSetState = "NC")

		OnReceivableApplicationReviewCreditApplicationTransactionList 
			restricted
			when (OnReceivableApplicationReviewCreditApplicationForm
			and   ReceivableApplicationContextRel.ReceivableInvoiceDetailRel.ReceivableInvoiceRel.Company 				= ReceivableCompanyDataGroup.TransactionCompany
			and   ReceivableApplicationContextRel.ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType = TransType
			and   ReceivableApplicationContextRel.ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoice 	= Invoice)

		OnReceivableApplicationReviewCreditApplicationCreditList 
			restricted
			when (OnReceivableApplicationReviewCreditApplicationForm
			and   ReceivableApplicationContextRel.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.Company 				= ReceivableCompanyDataGroup.TransactionCompany
			and   ReceivableApplicationContextRel.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType 	= TransType
			and   ReceivableApplicationContextRel.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ReceivableInvoice 		= Invoice)

		DisplayOnJournalizePreview
			when  (IsValidForActorContext
			and	Status.Released
			and	WithinGeneralLedgerDateRange
			and	CompanyWithinGLCompanyGroup) 

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		IsManualOrExternal
			restricted
			when (ReceivableInvoiceRel.Origin = "B"
			or	ReceivableInvoiceRel.Origin = "M"
			or 	 ReceivableInvoiceRel.Origin = "O")

		IsHSNSACCodeEnabled
			restricted
			when (ReceivableCompanyDataGroup.TransactionCompany.GeneralLedgerCompany.RequireHSNSACCode)

		CustodialAccountRequiredForFund			
            when (GeneralLedgerAccount.FinanceDimension10 !entered
			and  FinanceEnterpriseGroup.FundAccounting
            and  (CashCodeFundByAccountingUnitRel.FundUsedForCustodialAccounting
			or    CashCodeFundByFinanceDimension1Rel.FundUsedForCustodialAccounting))


		FrontEndSplitsEnabled
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits)

		ForRTMPayment
			restricted
			when (invoking action = "RTMPayment.ReleaseUnreleasedRtm")

		PostedHistoricalDistribution
			restricted
			when (Status = 9
			and (ReceivableCompanyDataGroup.TransactionCompany.InterfaceTransDistribCreate
			or ReceivableCompanyDataGroup.TransactionCompany.InterfaceTransDistribSummary))

		IsIntrastatDetailEntered
			restricted
			when (ICNCode entered
			or	 StockWeight entered)

		IsIntrastatDetailExist
			restricted
			when (LineType.Goods
			or   ICNCode entered
			or   StockWeight entered
			or   SupplementaryQuantity entered)

		IsProjectSetNotToAllowPurge
			restricted
			when (GeneralLedgerAccount.Project entered
			and !GeneralLedgerAccount.Project.ProjectStatus.AllowPurge)

		IsGLRecordProjectSetNotToAllowPurge
			restricted
			when (any ReceivableGLDistributionNotToPurgeRel.IsProjectSetNotToAllowPurge)
	
	Relations
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= LocalPrmReceivableCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = ReceivableCompanyGroup.GlCompany

		LocalGeneralLedgerEventRel
			one-to-one relation to GeneralLedgerEvent
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerEvent			= LocalGeneralLedgerEvent

		ReceivableApplicationARRel
			classic name is ARAPPLIED-AR
			one-to-many relation to ReceivableApplication
			valid when (IsReceivableApplicationOjectID)
			Field Mapping uses ByApplicationCloseResult
				related.ApplicationCloseResult	 = ApplicationCloseResult
			Instance Selection
				where (related.AmdArObjId		 = ReceivableApplicationOjectID)

		ReceivableApplicationOffSetRel
			classic name is ARAPPLIED-OFF
			one-to-many relation to ReceivableApplication
			valid when (IsReceivableApplicationOjectID)
			Field Mapping uses ByApplicationCloseResult
				related.ApplicationCloseResult	 =	ApplicationCloseResult
			Instance Selection
				where (related.AmdOffObjId		 =	ReceivableApplicationOjectID)

		ReceivableApplicationFundRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses ByApplicationCloseResult
				related.ApplicationCloseResult	 =	ApplicationCloseResult
			Instance Selection
				where (related.ApplicationID	 = ApplicationID)


		PaymentApplyDistributionRel
			one-to-one relation to PaymentApplyDistribution
			Field Mapping uses ByReceivableGLDistribution
				related.Company													 							= ContextReceivableCompanyForContext		
				related.ReceivablePaymentHeader									 							= ContextReceivableBatchForContext		
				related.ReceivablePayment										 							= ContextReceivableInvoiceForContext		
				related.ReceivableApplicationSelect.TransactionCompany									 	= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 	= ContextInvoiceDetailTypeForApplication
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 	= Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 	= ContextInvoiceDetailSequenceForApplication
				related.OriginalLastDistributionSequence													= LastDistributionSequence
				related.OriginalReceivableGLDistribution													= ReceivableGLDistribution

		ReceivableApplicationSelectContextRel
			one-to-one relation to ReceivableApplicationSelect
			Field Mapping uses symbolic key
				related.Company													 							= ContextReceivableCompanyForContext		
				related.ReceivablePaymentHeader									 							= ContextReceivableBatchForContext		
				related.ReceivablePayment										 							= ContextReceivableInvoiceForContext		
				related.ReceivableApplicationSelect.TransactionCompany									 	= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 	= ContextInvoiceDetailTypeForApplication
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 	= Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 	= ContextInvoiceDetailSequenceForApplication


		FundApplyDistributionRel
			one-to-one relation to FundApplyDistribution
			Field Mapping uses ByReceivableGLDistribution
				related.Company										 = ContextReceivableCompanyForContext			
				related.ReceivableApplication.TransType				 = ContextInvoiceDetailTypeForApplication
				related.ReceivableApplication.Invoice				 = ContextReceivableInvoiceForContext			
				related.ReceivableApplication.PaymentSeq			 = ContextInvoiceDetailSequenceForApplication
				related.ReceivableApplication.BatchNumber			 = ContextReceivableBatchForContext			
				related.ReceivableApplication.ApplicationSequence	 = ContextReceivableApplicationSequenceForContext
				related.OriginalLastDistributionSequence			 = LastDistributionSequence
				related.OriginalReceivableGLDistribution			 = ReceivableGLDistribution

		ReceivableInvoiceDetailContextRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 =	ReceivableCompanyDataGroup.TransactionCompany			
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ContextInvoiceDetailTypeForContext
				related.ReceivableInvoiceDetail.Invoice						 =	Invoice			
				related.ReceivableInvoiceDetail.PaymentSeq					 =	ContextInvoiceDetailSequenceForContext

		RemittanceApplyDistributionRel
			one-to-one relation to RemittanceApplyDistribution
			Field Mapping uses ByReceivableGLDistribution
				related.Company													 							= ContextReceivableCompanyForContext
				related.ReceivablePaymentHeader									 							= ContextReceivableBatchForContext
				related.ReceivablePayment										 							= ContextReceivableInvoiceForContext
				related.InvoiceCompany																		= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableInvoiceType																= ReceivableInvoiceDetailContextRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice																	= Invoice
				related.InvoiceDetail																		= ReceivableInvoiceDetailContextRel.ReceivableInvoiceDetail.PaymentSeq
				related.OriginalLastDistributionSequence													= LastDistributionSequence
				related.OriginalReceivableGLDistribution													= ReceivableGLDistribution

		RemittanceApplyDistributionByInvoiceThisDistributionRel
			one-to-many relation to RemittanceApplyDistribution
			Field Mapping uses ByInvoice
				related.InvoiceCompany																		= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableInvoiceType																= ReceivableInvoiceDetailContextRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice																	= Invoice
				related.OriginalLastDistributionSequence													= LastDistributionSequence
				related.OriginalReceivableGLDistribution													= ReceivableGLDistribution
			Instance Selection
				where ((related.ReceivablePaymentRemittance.Status.Unapplied
				or	   related.ReceivablePaymentRemittance.Status.ApplicationNotPerfomed)
				and	   related.Company													 					= ContextReceivableCompanyForContext
				and	   related.ReceivablePaymentHeader									 					= ContextReceivableBatchForContext
				and	   related.ReceivablePayment										 					= ContextReceivableInvoiceForContext)

		ReceivableApplicationContextRel						
			one-to-one relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company										 = ContextReceivableCompanyForContext			
				related.ReceivableApplication.TransType				 = ContextInvoiceDetailTypeForApplication
				related.ReceivableApplication.Invoice				 = ContextReceivableInvoiceForContext			
				related.ReceivableApplication.PaymentSeq			 = ContextInvoiceDetailSequenceForApplication
				related.ReceivableApplication.BatchNumber			 = ContextReceivableBatchForContext			
				related.ReceivableApplication.ApplicationSequence	 = ContextReceivableApplicationSequenceForContext

		ICBReceivableApplyDistributionContextRel
			one-to-one relation to ICBReceivableApplyDistribution
			Field Mapping uses ByReceivableGLDistribution
				related.IntercompanyBillingGroup							= FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= ContextDocumentHeaderForContext
				related.InvoiceLine											= ReceivableInvoiceDetailContextRel.ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableEntity.Company							= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableEntity.ReceivableInvoiceType				= TransType
				related.ReceivableEntity.ReceivableInvoice					= Invoice
				related.OriginalLastDistributionSequence					= LastDistributionSequence
				related.OriginalReceivableGLDistribution					= ReceivableGLDistribution

		ContextSettlementDetailRel
			one-to-one relation to IntercompanyBillingSettlementDetail
			Field Mapping uses ByBillingDocument
				related.IntercompanyBillingGroup							= FinanceEnterpriseGroup
				related.IntercompanyBillingDocumentHeader					= ContextDocumentHeaderForContext
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext

		ContextSettlementDetailLineRel
			one-to-one relation to IntercompanyBillingSettlementDetailLine
			Field Mapping uses ByReceivableInvoiceLine
				related.IntercompanyBillingGroup							= FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= ContextDocumentHeaderForContext
				related.InvoiceLine											= ReceivableInvoiceDetailContextRel.ReceivableInvoiceDetail.PaymentSeq



		ReceivableDistributionCategoryRel
			classic name is ARCATEGORY
			one-to-one relation to ReceivableDistributionCategory
			Field Mapping uses symbolic key
				related.Company							 =	ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableDistributionCategory	 =	ReceivableCompanyDataGroup.ReceivableDistributionCategory

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 =	ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableInvoiceType	 =	TransType
				related.ReceivableInvoice		 =	Invoice

		OneSourceReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 =	LocalReceivableCompany
				related.ReceivableInvoiceType	 =	LocalTransType
				related.ReceivableInvoice		 =	LocalInvoice

		OpenItemsNavRel
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses Set3
				related.Company					 =	ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber				 =	BatchNumber
				related.Customer				 =	ReceivableCompanyDataGroup.Customer
				related.ReceivableInvoiceType	 =	TransType
				related.ReceivableInvoice		 =	Invoice


		ReceivablePaymentHeaderFundRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key

				related.Company					 = ReceivableCompanyGroup.GlCompany
				related.ReceivablePaymentHeader	 = LocalBatchNumber

		ReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company					 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivablePaymentHeader	 = BatchNumber

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivablePaymentHeader	 = BatchNumber
				related.ReceivablePayment		 = SequenceNumber

		ReceivablePaymentRel2
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivablePaymentHeader	 = BatchNumber
				related.ReceivablePayment		 = ProgramSequence

		NonArPaymentNavRel
			one-to-one relation to ReceivablePayment
			valid when (IsNonArPayment)
			required
			Field Mapping uses Set2
				related.Company					 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivablePaymentHeader	 = BatchNumber
				related.TypeOfPayment			 = TransType
				related.PaymentNumber			 = Invoice
				related.Customer				 = ReceivableCompanyDataGroup.Customer


		CompanyRel
			one-to-one relation to ReceivableCompany
			required
			Field Mapping uses symbolic key
				related.Company	 = ReceivableCompanyDataGroup.TransactionCompany

		CompanyCustomerRel
			classic name is CUSTOMER
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company		 = ReceivableCompanyDataGroup.TransactionCompany
				related.Customer	 = ReceivableCompanyDataGroup.Customer









		EntityTaxCodeGlCompanyRel
			one-to-one relation to EntityTaxCode

			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = ReceivableCompanyGroup.GlCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxEntity				 = ReceivableCompanyGroup.GlCompany.AccountingEntity
				related.TaxCode					 = TaxCode

		CustomerRel
			classic name is CUSTDESC
			one-to-one relation to Customer
			valid when (IsCustomer)
			required
			Field Mapping uses symbolic key
				related.CustomerGroup	 = CompanyRel.CustomerGroupField.CustomerGroup
				related.Customer		 = ReceivableCompanyDataGroup.Customer

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company			 = ReceivablePaymentHeaderRel.Company
				related.CashCode		 = ReceivablePaymentHeaderRel.CashCode

		CompanyCashCodeFundRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company			 = ReceivablePaymentHeaderFundRel.Company
				related.CashCode		 = ReceivablePaymentHeaderFundRel.CashCode

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= FinanceEnterpriseGroup
				related.CashCode				= ReceivablePaymentHeaderFundRel.CashCode
				related.AccountingEntity		= GeneralLedgerAccount.ToAccountingEntity 
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundByAccountingUnitRel			
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= FinanceEnterpriseGroup
				related.CashCode				= ReceivablePaymentHeaderRel.CashCode
				related.AccountingEntity		= GeneralLedgerAccount.ToAccountingEntity
				related.AccountingUnit			= GeneralLedgerAccount.AccountingUnit
				related.FinanceDimension1		= blank

		CashCodeFundByFinanceDimension1Rel		
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= FinanceEnterpriseGroup
				related.CashCode				= ReceivablePaymentHeaderRel.CashCode
				related.AccountingEntity		= GeneralLedgerAccount.ToAccountingEntity
				related.AccountingUnit			= blank
				related.FinanceDimension1		= GeneralLedgerAccount.FinanceDimension1

		CashLedgerGLDistributionsRel
			if (ForRTMPayment)
				RTMPaymentCashLedgerGLDistributionsRel
			else
				OriginalCashLedgerGLDistributionsRel

		OriginalCashLedgerGLDistributionsRel							
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= FinanceEnterpriseGroup
				related.CashCode 				= ReceivablePaymentHeaderFundRel.CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode = ReceivablePaymentHeaderFundRel.DepositBankCode
				and	  related.CashLedgerGLDistribution.TransactionIDNumber  = ReceivablePaymentHeaderFundRel.TransactionIDNumber
				and	  related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		RTMPaymentCashLedgerGLDistributionsRel
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= FinanceEnterpriseGroup
				related.CashCode 				= ReceivablePaymentHeaderFundRel.CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode = ReceivableCompanyDataGroup.TransactionCompany.RTMPaymentBankCode
				and	  related.CashLedgerGLDistribution.TransactionIDNumber  = RTMPaymentRel.TransactionIDNumber
				and	  related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		CashLedgerGLDistributionByAccountRel
			if (ForRTMPayment)
				RTMPaymentCashLedgerGLDistributionByAccountRel
			else
				OriginalCashLedgerGLDistributionByAccountRel

		OriginalCashLedgerGLDistributionByAccountRel					
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= FinanceEnterpriseGroup
				related.CashCode 				= ReceivablePaymentHeaderFundRel.CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode	= ReceivablePaymentHeaderFundRel.DepositBankCode
				and	   related.CashLedgerGLDistribution.TransactionIDNumber	= ReceivablePaymentHeaderFundRel.TransactionIDNumber
				and	   related.CashLedgerGLDistribution.DistributionType.FundCashPayment
				and	   related.Company.OrigCompany							= ReceivablePaymentHeaderFundRel.Company
				and	   related.PostDate										= GeneralLedgerDate
				and    related.GLFinanceCodeBlock.Ledger					= LocalGLFinanceCodeBlock.Ledger
				and    related.GLFinanceCodeBlock.ToAccountingEntity		= LocalGLFinanceCodeBlock.ToAccountingEntity
				and    related.GLFinanceCodeBlock.AccountingUnit			= LocalGLFinanceCodeBlock.AccountingUnit
				and    related.GLFinanceCodeBlock.GeneralLedgerChartAccount	= LocalGLFinanceCodeBlock.GeneralLedgerChartAccount
				and    related.GLFinanceCodeBlock.Project					= LocalGLFinanceCodeBlock.Project
				and    related.GLFinanceCodeBlock.FinanceDimension1			= LocalGLFinanceCodeBlock.FinanceDimension1
				and    related.GLFinanceCodeBlock.FinanceDimension2			= LocalGLFinanceCodeBlock.FinanceDimension2
				and    related.GLFinanceCodeBlock.FinanceDimension3			= LocalGLFinanceCodeBlock.FinanceDimension3
				and    related.GLFinanceCodeBlock.FinanceDimension4			= LocalGLFinanceCodeBlock.FinanceDimension4
				and    related.GLFinanceCodeBlock.FinanceDimension5			= LocalGLFinanceCodeBlock.FinanceDimension5
				and    related.GLFinanceCodeBlock.FinanceDimension6			= LocalGLFinanceCodeBlock.FinanceDimension6
				and    related.GLFinanceCodeBlock.FinanceDimension7			= LocalGLFinanceCodeBlock.FinanceDimension7
				and    related.GLFinanceCodeBlock.FinanceDimension8			= LocalGLFinanceCodeBlock.FinanceDimension8
				and    related.GLFinanceCodeBlock.FinanceDimension9			= LocalGLFinanceCodeBlock.FinanceDimension9
				and    related.GLFinanceCodeBlock.FinanceDimension10		= LocalGLFinanceCodeBlock.FinanceDimension10)

		RTMPaymentCashLedgerGLDistributionByAccountRel
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= FinanceEnterpriseGroup
				related.CashCode 				= ReceivablePaymentHeaderFundRel.CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode	= ReceivableCompanyDataGroup.TransactionCompany.RTMPaymentBankCode
				and	   related.CashLedgerGLDistribution.TransactionIDNumber	= RTMPaymentRel.TransactionIDNumber
				and	   related.CashLedgerGLDistribution.DistributionType.FundCashPayment
				and	   related.Company.OrigCompany							= ReceivablePaymentHeaderFundRel.Company
				and	   related.PostDate										= GeneralLedgerDate
				and    related.GLFinanceCodeBlock.Ledger					= LocalGLFinanceCodeBlock.Ledger
				and    related.GLFinanceCodeBlock.ToAccountingEntity		= LocalGLFinanceCodeBlock.ToAccountingEntity
				and    related.GLFinanceCodeBlock.AccountingUnit			= LocalGLFinanceCodeBlock.AccountingUnit
				and    related.GLFinanceCodeBlock.GeneralLedgerChartAccount	= LocalGLFinanceCodeBlock.GeneralLedgerChartAccount
				and    related.GLFinanceCodeBlock.Project					= LocalGLFinanceCodeBlock.Project
				and    related.GLFinanceCodeBlock.FinanceDimension1			= LocalGLFinanceCodeBlock.FinanceDimension1
				and    related.GLFinanceCodeBlock.FinanceDimension2			= LocalGLFinanceCodeBlock.FinanceDimension2
				and    related.GLFinanceCodeBlock.FinanceDimension3			= LocalGLFinanceCodeBlock.FinanceDimension3
				and    related.GLFinanceCodeBlock.FinanceDimension4			= LocalGLFinanceCodeBlock.FinanceDimension4
				and    related.GLFinanceCodeBlock.FinanceDimension5			= LocalGLFinanceCodeBlock.FinanceDimension5
				and    related.GLFinanceCodeBlock.FinanceDimension6			= LocalGLFinanceCodeBlock.FinanceDimension6
				and    related.GLFinanceCodeBlock.FinanceDimension7			= LocalGLFinanceCodeBlock.FinanceDimension7
				and    related.GLFinanceCodeBlock.FinanceDimension8			= LocalGLFinanceCodeBlock.FinanceDimension8
				and    related.GLFinanceCodeBlock.FinanceDimension9			= LocalGLFinanceCodeBlock.FinanceDimension9
				and    related.GLFinanceCodeBlock.FinanceDimension10		= LocalGLFinanceCodeBlock.FinanceDimension10)

		TaxTableTaxCodeRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = TaxCode.FinanceEnterpriseGroup	
				related.TaxCode					 = TaxCode






		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = ReceivableCompanyGroup.GlCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxEntity				 = ReceivableCompanyGroup.GlCompany.AccountingEntity

		TaxAttributesRel
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= ReceivableCompanyGroup.GlCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
	 			related.TaxAttribute			= TaxEntityRel.TaxAttributeCode

		TaxLineItemRel
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= ReceivableCompanyGroup.GlCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= ReceivableInvoiceRel.UniqueID
			Instance Selection
				where(related.RelatedLineItemUniqueId		= UniqueID)

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= OneSourceReceivableInvoiceRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= OneSourceReceivableInvoiceRel.UniqueID

		NonARPaymentTaxLineItemRel
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= ReceivableCompanyGroup.GlCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= NonArPaymentNavRel.UniqueID
			Instance Selection
				where(related.RelatedLineItemUniqueId		= UniqueID)

		TaxRateRel
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.TaxRate.TaxCode = TaxCode)

		GlCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company	 = ReceivableCompanyGroup.GlCompany

		TransactionCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company	 = ReceivableCompanyDataGroup.TransactionCompany

		ReceivableProcessLevelRel
			one-to-one relation to ReceivableProcessLevel
			Field Mapping uses symbolic key
				related.Company					 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableProcessLevel	 = ReceivableCompanyDataGroup.ReceivableProcessLevel

		BillOfExchangeRel
			one-to-many relation to CustomerDraft
			Field Mapping uses symbolic key
				related.Company										 = ReceivableCompanyDataGroup.TransactionCompany
				related.Customer									 = ReceivableCompanyDataGroup.Customer
			Instance Selection
				where (related.CustomerDraft.DraftNumber			 = Invoice
				and	related.CustomerDraft.DraftSource.Receivable)

		GLTransactionDetailRel
			one-to-one relation to GLTransactionDetail
			valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction

				related.OriginatingTransaction	= reference to this instance			

		GLTransactionDetailForRunGroupRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	 = LocalEnterpriseGroup
				related.JournalizeGroup			 = LocalJournalizeGroup

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		 = "AR"

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= ReceivableCompanyDataGroup.TransactionCompany

		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= ReceivableCompanyDataGroup.TransactionCompany

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	 = GeneralLedgerCompanyGroup
				related.Company						 = ReceivableCompanyDataGroup.TransactionCompany

		LocalTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							 = LocalCompany
				related.ReceivableProcessLevel			 = LocalProcessLevel
				related.ReceivableTransactionSummary	 = LocalReceivableTransactionSummary


		VertexConfigRel
			one-to-one relation to VertexConfig
			Field Mapping uses symbolic key
				related.VertexConfig						= FinanceEnterpriseGroup
		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey			= reference to this instance)


		CustomerMajorClassRel
			one-to-one relation to CustomerMajorClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = ReceivableCompanyDataGroup.TransactionCompany.FinanceEnterpriseGroup
				related.CustomerMajorClass 		 = LocalMajClass

		CustomerMinorClassRel
			one-to-one relation to CustomerMinorClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = ReceivableCompanyDataGroup.TransactionCompany.FinanceEnterpriseGroup
				related.CustomerMajorClass 		 = LocalMajClass
				related.CustomerMinorClass 		 = LocalMinClass

		ReceivableCreditAnalystRel
			one-to-many relation to CreditAnalyst
			Field Mapping uses symbolic key
				related.Company	 		= ReceivableCompanyDataGroup.TransactionCompany
				related.CreditAnalyst	= LocalCreditAnalyst

		ReceivableSalesRepresentativeRel
			one-to-many relation to SalesRepresentative
			Field Mapping uses symbolic key
				related.Company	 = ReceivableCompanyDataGroup.TransactionCompany
				related.SalesRepresentative = LocalSalesRepresentative

		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= ReceivableCompanyDataGroup.TransactionCompany

		ReceivableGLDistributionTaxPointPaymentRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber										 = BatchNumber
				related.TransType										 = TransType
				related.Invoice											 = Invoice
				related.ReceivableCompanyDataGroup.Customer				 = ReceivableCompanyDataGroup.Customer
			Instance Selection
				where (related.TaxOriginCrossReference = TaxOriginCrossReference
				and	related.TaxCode	= blank)

		ReceivableGLDistributionSameTaxOriginCrossReferenceRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber										 = BatchNumber
				related.TransType										 = TransType
				related.Invoice											 = Invoice
				related.ReceivableCompanyDataGroup.Customer				 = ReceivableCompanyDataGroup.Customer
			Instance Selection
				where (related.TaxOriginCrossReference 					 = TaxOriginCrossReference
				and	   related.TaxCode entered)

		TaxOriginCrossReferenceGroupExceptSelfRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber										 = BatchNumber
				related.TransType										 = TransType
				related.Invoice											 = Invoice
				related.ReceivableCompanyDataGroup.Customer				 = ReceivableCompanyDataGroup.Customer
			Instance Selection
				where (related.TaxOriginCrossReference 					 = TaxOriginCrossReference
				and    related.UniqueID									!= UniqueID)

		TaxTableRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxCode					= TaxCode


		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
				related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
				related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
				related.FrontEndSplitDistributions.Distribution		= ReceivableGLDistribution

#ifdef module cam
		CustodialDetailAmountRel	
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity = GeneralLedgerAccount.ToAccountingEntity
				and	   related.CustodialPosting = LocalFinanceDimension10
				and	   related.EditLevel.Individual)

		ReceivableApplicationForCustodialRel		
			one-to-many relation to ReceivableApplication
			Field Mapping uses ByApplicationCloseResult
				related.ApplicationCloseResult	 =	ApplicationCloseResult
			Instance Selection
				where (related.ReceivableApplication.Invoice	 = Invoice)
#endif

		ReceivableGLDistributionDummyTaxRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber										 = BatchNumber
				related.TransType										 = TransType
				related.Invoice											 = Invoice

		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 				= ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivableGeneralLedgerCode 			= LocalReceivableGeneralLedgerCode

		RTMPaymentRel			
			one-to-one relation to RTMPayment
			Field Mapping uses symbolic key
				related.Company							 = ReceivableCompanyDataGroup.TransactionCompany
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeaderRel.ReceivablePaymentHeader
				related.Customer						 = ReceivableCompanyDataGroup.Customer
				related.RTMPayment						 = RTMPayment

		ReceivableGLDistributionNotToPurgeRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableCompanyDataGroup.TransactionCompany
				related.BatchNumber										 = BatchNumber
				related.TransType										 = TransType
				related.Invoice											 = Invoice
			Instance Selection
				where (related.DocumentNumber	= DocumentNumber)

		GeneralLedgerCompanyGroupMembersRel
            one-to-many relation to GeneralLedgerCompanyGroupMember
            Field Mapping uses Set2
                related.GeneralLedgerCompanyGroup = LocalGeneralLedgerCompanyGroup
	
	Sets
		Set2
			indexed
			Instance Selection
				where (IsDocumentBased)
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				BatchNumber
				TransType
				Invoice
				ReceivableCompanyDataGroup.Customer
				LastDistributionSequence
				ReceivableGLDistribution

		Set4
			indexed
			Instance Selection
				where (IsUnrealizedGainLoss)
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				ReceivableCompanyDataGroup.Customer
				TransType
				Invoice
				SequenceNumber
				LastDistributionSequence
				ReceivableGLDistribution

		Set6
			indexed
			Instance Selection
				where (IsTaxPointPaymentDate)
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				ReceivableCompanyDataGroup.Customer
				TransType
				Invoice
				LastDistributionSequence
				ReceivableGLDistribution






















		Set1
			indexed

			Sort Order
				ReceivableCompanyGroup.GlCompany
				GeneralLedgerAccount.AccountingUnit
				GeneralLedgerAccount.GeneralLedgerChartAccount

				GeneralLedgerDate
				CreateDate
				ReceivableGLDistribution

		SET0
			Sort Order
				ReceivableCompanyGroup.GlCompany
				GeneralLedgerAccount.AccountingUnit
				GeneralLedgerAccount.GeneralLedgerChartAccount
				GeneralLedgerAccount.Project
				GeneralLedgerDate
				CreateDate
				ProgramSequence
				ReceivableGLDistribution

		Set3
			indexed
			Instance Selection
				where (IsReleased1)
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				GeneralLedgerAccount.AccountingUnit
				GeneralLedgerAccount.GeneralLedgerChartAccount
				GeneralLedgerAccount.ToAccountingEntity
				ReceivableCompanyGroup.GlCompany
				GeneralLedgerDate
				CreateDate
				ProgramSequence
				ReceivableGLDistribution

		Set10
			indexed
			Instance Selection
				where (IsDocumentBasedOrFinCharge)
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				TransType
				Invoice
				ReceivableCompanyDataGroup.Customer
				LastDistributionSequence
				ProgramSequence
				Origin
				BatchNumber
				ReceivableGLDistribution

		Set5
			indexed
			Sort Order
				ReceivableCompanyGroup.GlCompany

				GeneralLedgerAccount.AccountingUnit
				GeneralLedgerAccount.GeneralLedgerChartAccount
				GeneralLedgerAccount.ToAccountingEntity
				GeneralLedgerDate
				GltObjId
				CreateDate
				ProgramSequence
				ReceivableGLDistribution

		Set8
			indexed
			Instance Selection
				where (IsNotBalanceCreateDate)
			Sort Order
				ReceivableCompanyGroup.GlCompany
				GeneralLedgerAccount.AccountingUnit
				GeneralLedgerAccount.GeneralLedgerChartAccount
				GeneralLedgerAccount.ToAccountingEntity
				Origin
				GeneralLedgerDate
				CreateDate
				ProgramSequence
				ReceivableGLDistribution

		ByReceivableInvoice
			indexed
			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				BatchNumber
				TransType
				Invoice
				ReceivableCompanyDataGroup.Customer
				LastDistributionSequence
				ReceivableGLDistribution

		ByPaymentSequence	
			indexed


			Sort Order
				ReceivableCompanyDataGroup.TransactionCompany
				BatchNumber
				SequenceNumber
				ReceivableGLDistribution

		ByAccount
			duplicates
			Sort Order
				GeneralLedgerAccount.GeneralLedgerChartAccount

		ByGLCompany
			duplicates
			Sort Order
				ReceivableCompanyGroup.GlCompany

		ByAccountingUnit
			duplicates
			Sort Order
				GeneralLedgerAccount.AccountingUnit

		ByPosDate
			duplicates
			Sort Order
				GeneralLedgerDate

		ByApplicationCloseResult
			Sort Order
				FinanceEnterpriseGroup
				ApplicationCloseResult
				ReceivableCompanyGroup.GlCompany
				Origin
				DocumentNumber
				ProgramSequence
				ReceivableGLDistribution

	Rule Blocks

		GetGeneralLedgerEvent
			if (Origin.Invoicing)
				LocalGeneralLedgerEvent		 =	"RI"
			if (Origin.CashApplication)
				LocalGeneralLedgerEvent		 =	"RL"
			if (Origin.DebitCreditMemo)
				LocalGeneralLedgerEvent		 =	"RM"
			if (Origin.FinanceCharge)
				LocalGeneralLedgerEvent		 =	"RN"
			if (Origin.Payment)
				if (TransType.NonArPayment
				or (TransientNonARCashOffset
				and Invoice entered))
					LocalGeneralLedgerEvent	 =	"NP"
					if (LocalGeneralLedgerEventRel not exists)
						LocalGeneralLedgerEvent	= "RP"
				else
					LocalGeneralLedgerEvent	 =	"RP"
			if (Origin.RTMPayment)
				LocalGeneralLedgerEvent		 =	"RV"
			if (Origin.UnrealizedGainLoss)
				LocalGeneralLedgerEvent		 =	"RU"
			if (Origin.BOECashingExpense)
				LocalGeneralLedgerEvent		 =	"BE"
			if (Origin.BOEBankPresentationCashing)
				LocalGeneralLedgerEvent		 =	"BG"
			if (Origin.BOEAccepted)
				LocalGeneralLedgerEvent		 =	"DA"
			if (Origin.BOECancellation)
				LocalGeneralLedgerEvent		 =	"DB"
			if (Origin.BOECashing)
				LocalGeneralLedgerEvent		 =	"DC"
			if (Origin.BOEDishonored)
				LocalGeneralLedgerEvent		 =	"DH"
			if (Origin.BOEDiscountedRemittance)
				LocalGeneralLedgerEvent		 =	"DK"
			if (Origin.BOECashingWithRemittance)
				LocalGeneralLedgerEvent		 =	"DR"
			if (Origin.BOEGainLoss)
				LocalGeneralLedgerEvent		 =	"EC"
			if (Origin.ApplicationReversal)
				LocalGeneralLedgerEvent		 =	"RY"
			if (Origin.ApplicationAdjustment)
				LocalGeneralLedgerEvent		 =	"RQ"
			if (Origin.AdjustmentReversal)
				LocalGeneralLedgerEvent		 =	"RX"

		CreateGLTransactionDetail

			if (GeneralLedgerAccount.AccountingEntity != GeneralLedgerAccount.ToAccountingEntity)
				if (GeneralLedgerAccount.AccountingEntity.FunctionalCurrency = GeneralLedgerAccount.ToAccountingEntity.FunctionalCurrency)
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate = DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency)
					DistributionAmount.ToAlternateAmount.EnteredCurrencyRate = DistributionAmount.AlternateAmount.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = DistributionAmount.AlternateAmount.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency2 = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency2)
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate = DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				if (GeneralLedgerAccount.AccountingEntity.AlternateCurrency3 = GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency3)
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate = DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = DistributionAmount.AlternateAmount3.EnteredCurrencyAmount

			if  (ZeroAmountDistribution
			and !AuditSummaryIndicator.GainLossOnCurrencyConv
			and !IsZeroAmountTaxDistribution)
				NextSentence = true
			else
				include GetGeneralLedgerEvent

				if (AuditSummaryIndicator.GainLossOnCurrencyConv
				or  IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit = true
























				invoke Unreleased.Create GLTransactionDetail
					fill in fields from this instance
					invoked.OriginatingTransaction 										= reference to this instance
					invoked.FinanceEnterpriseGroup										= TransactionCompanyRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					invoked.System														= "AR"	
					invoked.Reference													= ThisProgramNameText				
					invoked.AccountingEntity											= TransactionCompanyRel.Company.AccountingEntity
					invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
					invoked.CurrencyCode												= OriginalCurrency
					invoked.TransactionDate												= TransactionDate
					invoked.PostingDate													= GeneralLedgerDate
					invoked.FinanceCodeBlock											= GeneralLedgerAccount
					invoked.ReportCurrencyAmount										= DistributionAmount
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
					if (Origin.UnrealizedGainLoss
					or  Origin.BOEGainLoss
					or  AuditSummaryIndicator.GainLossOnCurrencyConv)
						invoked.ReportCurrencyAmount.KeepRateOnly						= false
					else
						invoked.ReportCurrencyAmount.KeepRateOnly						= true		
					invoked.ControlDocumentNumber										= BatchNumber
					invoked.DocumentNumber												= Invoice
					invoked.GeneralLedgerEvent											= LocalGeneralLedgerEvent

					invoked.Description													= Description
					if (Origin.UnrealizedGainLoss
					or Origin.BOEGainLoss)
						invoked.TransactionAmount										=  0
					invoked.AutoReverse 												= false
					invoked.UnitsAmount													= Units
					if (ReceivableInvoiceRel.Origin.IntercompanyBilling
					and ReceivableInvoiceRel.ProjectContract entered)
						invoked.Billed													= 4 
						invoked.RevenueRecognized										= 1 

		CreateHistoricalGLTransactionDetail

			if  (ZeroAmountDistribution
			and !AuditSummaryIndicator.GainLossOnCurrencyConv
			and !IsZeroAmountTaxDistribution)
				NextSentence = true
			else
				include GetGeneralLedgerEvent

				if (AuditSummaryIndicator.GainLossOnCurrencyConv
				or  IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit = true

				invoke History.Create GLTransactionDetail
					fill in fields from this instance
					invoked.OriginatingTransaction 										= reference to this instance
					invoked.FinanceEnterpriseGroup										= TransactionCompanyRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					invoked.System														= "AR"	
					invoked.Reference													= ThisProgramNameText				
					invoked.AccountingEntity											= TransactionCompanyRel.Company.AccountingEntity
					invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
					invoked.CurrencyCode												= OriginalCurrency
					invoked.TransactionDate												= TransactionDate
					invoked.PostingDate													= GeneralLedgerDate
					invoked.FinanceCodeBlock											= GeneralLedgerAccount
					invoked.ReportCurrencyAmount										= DistributionAmount
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
					if (Origin.UnrealizedGainLoss
					or  Origin.BOEGainLoss
					or  AuditSummaryIndicator.GainLossOnCurrencyConv)
						invoked.ReportCurrencyAmount.KeepRateOnly						= false
					else
						invoked.ReportCurrencyAmount.KeepRateOnly						= true		

					invoked.ControlDocumentNumber										= BatchNumber
					invoked.DocumentNumber												= Invoice
					invoked.GeneralLedgerEvent											= LocalGeneralLedgerEvent

					invoked.Description													= Description
					if (Origin.UnrealizedGainLoss
					or Origin.BOEGainLoss)
						invoked.TransactionAmount										=  0
					invoked.AutoReverse 												= false
					invoked.UnitsAmount													= Units

		UpdateGLTransactionDetail
			if  (ZeroAmountDistribution
			and !AuditSummaryIndicator.GainLossOnCurrencyConv
			and !IsZeroAmountTaxDistribution)
				NextSentence = true
			else
				invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
					invoked.PostingDate				= GeneralLedgerDate
					invoked.TransactionAmount		= DistributionAmount.CurrencyAmount
					invoked.FinanceCodeBlock		= GeneralLedgerAccount
					invoked.ReportCurrencyAmount	= DistributionAmount
					invoked.Description				= Description
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.KeepRateAndAmount						= true

		ReleaseGLTransactionDetail
			if  (ZeroAmountDistribution
			and !AuditSummaryIndicator.GainLossOnCurrencyConv
			and !IsZeroAmountTaxDistribution)
				NextSentence = true
			else
			if (GLTransactionDetailRel exist)
				invoke Release GLTransactionDetailRel


		ProcessTaxCode

			if ((ZeroAmountDistribution
			and TransactionTaxableAmount not entered)
			or TaxEntityUsesOneSource
			or CallVertexByTransaction
			or BypassProcessTaxCode)
				if (CallVertexByTransaction
				or  TaxEntityUsesOneSource)
					LinkedTaxGroup.Indicator								= "X" 
					LinkedTaxGroup.TaxCode 									= TaxCode
					if (TransactionTaxableAmount entered)
						LinkedTaxGroup.TaxableAmount						= TransactionTaxableAmount
					else
						LinkedTaxGroup.TaxableAmount						= DistributionAmount.CurrencyAmount
						TransactionTaxableAmount							= DistributionAmount.CurrencyAmount
			else
				initialize CalculateTax
				include InitializeVATFields
				CalculateTax.TaxCode										= TaxCode
				CalculateTax.TaxEntity										= ReceivableCompanyGroup.OriginCompany.AccountingEntity

				CalculateTax.TaxDate										= TransactionDate
				CalculateTax.InvoiceDate									= TransactionDate
				CalculateTax.PaymentDate									= TransactionDate
				CalculateTax.ShipmentDate									= TransactionDate
				CalculateTax.GeneralLedgerDate							= GeneralLedgerDate
				if (DistributionAmount.CurrencyAmount	 entered
				and TransactionTaxableAmount not entered)
					CalculateTax.TaxableAmount								= DistributionAmount.CurrencyAmount
				if (TransactionTaxableAmount entered)
					CalculateTax.TaxableAmount								= TransactionTaxableAmount
				CalculateTax.PostalAddress									= ReceivableCompanyDataGroup.Customer.PostalAddress
				CalculateTax.ProcessLevel									= ReceivableCompanyDataGroup.ReceivableProcessLevel
				CalculateTax.Invoice										= Invoice
				CalculateTax.Customer										= ReceivableCompanyDataGroup.Customer
				CalculateTax.FromPostalAddress								= GlCompanyRel.PostalAddress
				if (IsInvoiceBased)
					CalculateTax.Location									= ReceivableInvoiceRel.DestinationIntrastatCountry

				CalculateTax.TaxCodeAccount									= GeneralLedgerAccount
				CalculateTax.ProductTaxCategory								= blank

				CalculateTax.Quantity										= Units
				CalculateTax.Exempt											= CompanyCustomerRel.TaxExempt
				if (LocalInquire)			
					CalculateTax.Function										= "I"
				else
					CalculateTax.Function										= "C"
				CalculateTax.System										= "AR"
				CalculateTax.InputReturnVertexTaxIn							= "D"	

				include LoadVertexGlobalInputFields						
				include VertexFlexibleFields
				LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
				if (!CalculateTax.DoTaxCalculation)
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"
				if (!LocalInquire)		
					I2 = 1
					while (I2 < 9)
						if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount entered
						or (CalculateTax.TaxTable.TaxTableOutput[I2].TaxCode entered
						and CalculateTax.TaxTable.TaxTableOutput[I2].TaxRate = 0
						and TaxEntityUsesInforTax))
							invoke CreateTaxDistribution ReceivableGLDistribution
								fill in fields from this instance
									except invoked.TransactionTaxableAmount
									except invoked.DistributionAmount
									except invoked.ProgramSequence
									except invoked.LastDistributionSequence
									except invoked.GeneralLedgerAccount
									except invoked.LineType
									except invoked.ICNCode
									except invoked.StockWeight
									except invoked.SupplementaryQuantity
								initialize invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory
								if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxPoint = "P"
								and !IsNonArPayment) 
									invoked.GeneralLedgerAccount				= CalculateTax.TaxTable.TaxTableOutput[I2].TaxOutputDueAccount
								else
									invoked.GeneralLedgerAccount				= CalculateTax.TaxTable.TaxTableOutput[I2].TaxOutputAccount

								invoked.TaxCode									= CalculateTax.TaxTable.TaxTableOutput[I2].TaxCode

								if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxTerms.Taxafterterms)

									CalculateTerms.TransactionAmount			= CalculateTax.TaxTable.TaxTableOutput[I2].TaxableAmount
									LocalTermsCode								= ReceivableInvoiceRel.TermsCode
									LocalTermsCalTrigger						= CalculateTerms.TermsCalTrigger
									constraint (CalculateTerms.OutputErrorNumber not entered)
										"<CalculateTerms.OutputErrorMessage>"
									LocalTermsDiscount							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[I2].DiscountAmount
									LocalTaxableAmount							= CalculateTax.TaxTable.TaxTableOutput[I2].TaxableAmount - LocalTermsDiscount
									invoked.TransactionTaxableAmount			= LocalTaxableAmount
									invoked.DistributionAmount.CurrencyAmount	= LocalTaxableAmount * CalculateTax.TaxTable.TaxTableOutput[I2].TaxRate
								else
									invoked.TransactionTaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[I2].TaxableAmount
									invoked.DistributionAmount.CurrencyAmount	= CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount

								invoked.TransientTaxRate						= CalculateTax.TaxTable.TaxTableOutput[I2].TaxRate
								invoked.TransientAccrualFlag					= CalculateTax.TaxTable.TaxTableOutput[I2].AccrualFlag
								if (TaxEntityUsesVertex)
									invoked.Imposition							= CalculateTax.TaxTable.TaxTableOutput[I2].ImpositionType
								invoked.TaxOriginCrossReference 				= ReceivableGLDistribution

							TaxOriginCrossReference = ReceivableGLDistribution

						I2 +=1

					include LoadVtxReturnedFieldsFromCalculateTax 

		VerifyTaxCodeForNonARPaymentInterface

			constraint (TransactionTaxableAmount entered)
				"Taxable_\AmountIsRequiredIf_\Tax_\CodeIsEntered"

			initialize CalculateTax
			CalculateTax.TaxCode							= TaxCode
			CalculateTax.TaxEntity							= ReceivableCompanyGroup.OriginCompany.AccountingEntity
			CalculateTax.TaxDate							= TransactionDate
			CalculateTax.InvoiceDate						= TransactionDate
			CalculateTax.PaymentDate						= TransactionDate
			CalculateTax.ShipmentDate						= TransactionDate
			CalculateTax.GeneralLedgerDate					= GeneralLedgerDate
			CalculateTax.TaxAmount							= DistributionAmount.CurrencyAmount
			CalculateTax.TaxableAmount						= TransactionTaxableAmount
			CalculateTax.PostalAddress						= GlCompanyRel.PostalAddress
			CalculateTax.ProcessLevel						= ReceivableCompanyDataGroup.ReceivableProcessLevel
			CalculateTax.Invoice							= Invoice
			CalculateTax.FromPostalAddress					= GlCompanyRel.PostalAddress
			CalculateTax.TaxCodeAccount						= GeneralLedgerAccount
			CalculateTax.ProductTaxCategory					= blank
			CalculateTax.Quantity							= Units
			CalculateTax.Function							= "V"		
			CalculateTax.System								= "AR"

			if (TaxEntityUsesVertex)
				CalculateTax.TransactionSource			 	= "O"
				CalculateTax.CallingModule				 	= "Receivable_GL_Distribution"
				CalculateTax.InvoiceCompany				 	= ReceivableCompanyGroup.GlCompany
				CalculateTax.ProcessLevel				 	= ReceivableCompanyDataGroup.ReceivableProcessLevel
				CalculateTax.Invoice					 	= Invoice
				CalculateTax.LineNumber					 	= ReceivableGLDistribution
				CalculateTax.FromVATRegistrationCountry	 	= TaxEntityRel.VATRegistrationCountry
				CalculateTax.FromVATRegistrationNumber	 	= TaxEntityRel.VATRegistrationNumber
				CalculateTax.DefaultFilingCurrency		 	= TransactionCompanyRel.Currency
				CalculateTax.CurrencyRate				 	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				CalculateTax.TransactionCurrency		 	= OriginalCurrency
				CalculateTax.BaseCurrency				 	= TransactionCompanyRel.Currency

				include LoadVertexAdditionalFields
			LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

			constraint (CalculateTax.OutputErrorNumber != 205)			
				"TheDifference<DerivedTaxDifference>BetweenGiven_\Tax_\Amount<FlipDistributionAmount>AndCalculatedAmount<FlipCalculatedTaxAmount>IsGreaterThanTheToleranceLimit"

			constraint (CalculateTax.OutputErrorNumber not entered)
				"<CalculateTax.OutputErrorMessage>"

			constraint (!CalculateTax.WebServiceError)
				"<CalculateTax.WebServiceErrorMessage>"

		ProcessTaxHistoryRuleBlock
			if (ZeroAmountDistribution
			and TransactionTaxableAmount not entered)
				NextSentence = true
			else
				initialize ProcessTaxHistory
				ProcessTaxHistory.FromAddress					= CompanyRel.PostalAddress
				ProcessTaxHistory.HistoryType					= "O"
				ProcessTaxHistory.InTransactionId				= blank
				ProcessTaxHistory.InvoiceCompany				= ReceivableCompanyDataGroup.TransactionCompany
				ProcessTaxHistory.TaxEntity						= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
				ProcessTaxHistory.TaxCode						= TaxCode
				ProcessTaxHistory.SystemCode					= "AR"
				ProcessTaxHistory.VendorCustomer				= ReceivableCompanyDataGroup.Customer
				if (TransType.Invoice
				or  TransType.CreditMemo
				or  TransType.DebitMemo
				or  TransType.MixedSignLines
				or  (TransType.CustomerPayment
				and TransientPrepaymentTax))		
					ProcessTaxHistory.VendorOrCustomerName		= ReceivableCompanyDataGroup.Customer.Name
				else
					ProcessTaxHistory.VendorOrCustomerName		= "NonARPayment"
				ProcessTaxHistory.Invoice						= Invoice
				ProcessTaxHistory.TaxEntity						= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
				ProcessTaxHistory.InvoiceCompany				= ReceivableCompanyDataGroup.TransactionCompany
				ProcessTaxHistory.TaxTransactionAccount		= GeneralLedgerAccount
				ProcessTaxHistory.ProcessLevel					= ReceivableCompanyDataGroup.ReceivableProcessLevel
				ProcessTaxHistory.InvoiceDate					= TransactionDate
				ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
				ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
				ProcessTaxHistory.TaxPointDate					= CalculateTax.EffectiveDate
				if (TaxPoint.GlDate)
					ProcessTaxHistory.TaxPointDate				= GeneralLedgerDate
				ProcessTaxHistory.PostDate						= GeneralLedgerDate
				ProcessTaxHistory.TransactionSource				= "O"
				ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
				ProcessTaxHistory.RelatedObjectReference		= reference to this instance
				ProcessTaxHistory.TransactionTaxableAmount		= TransactionTaxableAmount
				ProcessTaxHistory.TransactionTaxAmount			= DistributionAmount.CurrencyAmount
				if (!CalculateTax.TaxType.TableMember)
					ProcessTaxHistory.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
					ProcessTaxHistory.AccruedOrInvoiced			= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag





				else
					if (TaxEntityRel.UseTaxCodeAccounts)
						ProcessTaxHistory.AccruedOrInvoiced	= EntityTaxCodeGlCompanyRel.AccruedOrInvoiced
					else
						ProcessTaxHistory.AccruedOrInvoiced = TaxEntityRel.AccruedOrInvoiced
					LocalTaxRate = DistributionAmount.CurrencyAmount/TransactionTaxableAmount

					ProcessTaxHistory.TaxRate			= LocalTaxRate


				if (TransType.Invoice
				or  TransType.CreditMemo
				or  TransType.DebitMemo
				or  TransType.MixedSignLines)
					if (ReceivableInvoiceRel.Origin.IntercompanyBilling)
						ProcessTaxHistory.TransactionTaxableAmount			= TransactionTaxableAmount
						ProcessTaxHistory.TransactionTaxAmount				= DistributionAmount.CurrencyAmount
						ProcessTaxHistory.TransactionInvoiceAmount			= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount
					else
						if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice
						or  ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
							if (DistributionAmount.CurrencyAmount > 0
							or  DistributionAmount.CurrencyAmount = 0)
								ProcessTaxHistory.TransactionInvoiceAmount	= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount * -1
								ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount * -1
								ProcessTaxHistory.TransactionTaxAmount		= DistributionAmount.CurrencyAmount * -1
							else
								ProcessTaxHistory.TransactionInvoiceAmount	= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount
								ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount * -1
								ProcessTaxHistory.TransactionTaxAmount		= DistributionAmount.CurrencyAmount * -1
						if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
							if (DistributionAmount.CurrencyAmount > 0
							or  DistributionAmount.CurrencyAmount = 0)
								ProcessTaxHistory.TransactionInvoiceAmount	= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount
								ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount
								ProcessTaxHistory.TransactionTaxAmount		= DistributionAmount.CurrencyAmount
							else
								ProcessTaxHistory.TransactionInvoiceAmount	= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount * -1
								ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount
								ProcessTaxHistory.TransactionTaxAmount		= DistributionAmount.CurrencyAmount


				if (NonArPaymentNavRel exists
				and IsNonArPayment) 	
					ProcessTaxHistory.TransactionTaxableAmount		= TransactionTaxableAmount * -1
					ProcessTaxHistory.TransactionTaxAmount			= DistributionAmount.CurrencyAmount	* -1
					if (DistributionAmount.CurrencyAmount >= 0)
						ProcessTaxHistory.TransactionInvoiceAmount	= NonArPaymentNavRel.TransactionAmount * -1
					else
						ProcessTaxHistory.TransactionInvoiceAmount	= NonArPaymentNavRel.TransactionAmount

					if (NonArPaymentNavRel.TransferDate entered) 
						ProcessTaxHistory.TransactionTaxableAmount		= TransactionTaxableAmount
						ProcessTaxHistory.TransactionTaxAmount			= DistributionAmount.CurrencyAmount
						ProcessTaxHistory.TransactionInvoiceAmount		= NonArPaymentNavRel.TransactionAmount

				else
				if (ReceivablePaymentRel exists)
					if (Origin.RTMPayment)
						if (DistributionAmount.CurrencyAmount < 0)
							ProcessTaxHistory.TransactionInvoiceAmount	= ReceivablePaymentRel.PaymentOpen * -1
						else
							ProcessTaxHistory.TransactionInvoiceAmount	= ReceivablePaymentRel.PaymentOpen
					else
						if (DistributionAmount.CurrencyAmount < 0)
							ProcessTaxHistory.TransactionInvoiceAmount	= ReceivablePaymentRel.TransactionAmount * -1
						else
							ProcessTaxHistory.TransactionInvoiceAmount	= ReceivablePaymentRel.TransactionAmount

					if (DistributionAmount.CurrencyAmount < 0
					and TransactionTaxableAmount > 0)
						ProcessTaxHistory.TransactionTaxableAmount	= BaseTaxableAmount * -1

					if (DistributionAmount.CurrencyAmount > 0
					and TransactionTaxableAmount < 0)
						ProcessTaxHistory.TransactionTaxableAmount	= BaseTaxableAmount

					if  (TransType.CustomerPayment
					and TransientPrepaymentTax)		
						ProcessTaxHistory.TransactionTaxAmount			= TransientTransactionTaxAmount


				if  (TransType.CreditMemo)
					ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
				else
					ProcessTaxHistory.InvoicedOrCreditMemo		= "I"

				if (ProcessTaxHistory.TransactionTaxableAmount  > 0
				and ProcessTaxHistory.TransactionInvoiceAmount  < 0)
					ProcessTaxHistory.TransactionInvoiceAmount *= -1
				if (ProcessTaxHistory.TransactionTaxableAmount  < 0
				and ProcessTaxHistory.TransactionInvoiceAmount  > 0)
					ProcessTaxHistory.TransactionInvoiceAmount *= -1


				ProcessTaxHistory.VATRegistrationCountry		= CompanyCustomerRel.VATRegistrationCountry
				ProcessTaxHistory.VATRegistrationNumber			= CompanyCustomerRel.VATRegistrationNumber


				ProcessTaxHistory.DeliveryTerms				= ReceivableInvoiceRel.ShipTerm
				ProcessTaxHistory.DefaultFilingCurrency		= TaxEntityRel.DefaultFilingCurrency
				ProcessTaxHistory.BaseCurrency					= TransactionCompanyRel.Currency
				ProcessTaxHistory.VATInputTaxAmount				= VATInputTaxAmount
				ProcessTaxHistory.ChargedTaxAmount				= DistributionAmount.CurrencyAmount
				ProcessTaxHistory.RecoverableTaxAreaId			= RecoverableTaxAreaId
				ProcessTaxHistory.RecoverableJurisLevel		= RecoverableJurisLevel
				ProcessTaxHistory.RecoverableImpositionType	= RecoverableImpositionType
				ProcessTaxHistory.RecoverablePercent			= RecoverablePercent
				ProcessTaxHistory.RecoverableAmount			= RecoverableAmount
				ProcessTaxHistory.UnrecoverableAmount			= UnrecoverableAmount
				ProcessTaxHistory.RecoverableDate				= RecoverableDate
				ProcessTaxHistory.BlockingOverridePercent		= BlockingOverridePercent
				ProcessTaxHistory.PartialExemptRecvblOvrdPct	= PartialExemptRecvblOvrdPct
				ProcessTaxHistory.VertexSimplificationCode		= VertexSimplificationCode
				ProcessTaxHistory.VertexVATType					= VertexVATType


				if (TaxEntityUsesVertex)

					if (TransType.Invoice
					or  TransType.CreditMemo
					or  TransType.DebitMemo
					or  TransType.MixedSignLines)

						if (ReceivableInvoiceRel.Origin.IntercompanyBilling
						and ReceivableInvoiceRel.IntercompanyBillingDocumentByDateRel exists)

							if (ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)
								ProcessTaxHistory.FromAddress 	= ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress
							else
								ProcessTaxHistory.FromAddress 	= ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

							if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
								ProcessTaxHistory.ToAddress 	= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
							else
								ProcessTaxHistory.ToAddress 	= ReceivableInvoiceRel.Customer.PostalAddress
						else
							ProcessTaxHistory.FromAddress       = ReceivableCompanyDataGroup.TransactionCompany.PostalAddress
							ProcessTaxHistory.ToAddress         = ReceivableCompanyDataGroup.Customer.PostalAddress
							if (IsInvoiceBased
							and ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
								ProcessTaxHistory.ToAddress     = ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
					else
						ProcessTaxHistory.FromAddress           = ReceivableCompanyDataGroup.TransactionCompany.PostalAddress
						ProcessTaxHistory.ToAddress             = ReceivableCompanyDataGroup.Customer.PostalAddress

					ProcessTaxHistory.TransactionInvoiceAmount  = ProcessTaxHistory.TransactionInvoiceAmount * -1
					ProcessTaxHistory.TransactionTaxableAmount  = ProcessTaxHistory.TransactionTaxableAmount * -1
					ProcessTaxHistory.TransactionTaxAmount      = ProcessTaxHistory.TransactionTaxAmount * -1

					ProcessTaxHistory.ProductTaxCategory        = ProductTaxCategory
					ProcessTaxHistory.FromTaxCode               = TaxCode

					if (IsHSNSACCodeEnabled)
						ProcessTaxHistory.CommodityCodeType      	= "HSN"
						ProcessTaxHistory.HSNSACCode				= HSNSACCode
					else
						ProcessTaxHistory.CommodityCodeType      	= "UNSPSC"
						ProcessTaxHistory.UNSPSCCode				= DerivedUNSPSCCodeNoDash
					if (TransType.CreditMemo)
						ProcessTaxHistory.DocumentType				= "CreditMemo"
					else
					if (TransType.DebitMemo)
						ProcessTaxHistory.DocumentType				= "DebitMemo"
					else
					if (TransType.Invoice)
						ProcessTaxHistory.DocumentType				= "Invoice"
					else
					if (TransType.MixedSignLines)
						ProcessTaxHistory.DocumentType				= "MixedSignLines"
					else
					if (TransType.NonArPayment)
						ProcessTaxHistory.DocumentType				= "NonArPayment"
					else
					if (TransType.CustomerPayment)
						ProcessTaxHistory.DocumentType				= "CustomerPayment"
					else
					if (TransType.BillOfExchangePayment)
						ProcessTaxHistory.DocumentType				= "BillOfExchangePayment"
					else
					if (TransType.CustomerDraftRemittance)
						ProcessTaxHistory.DocumentType				= "CustomerDraftRemittance"

					include ProcessTaxHistoryVertexFlexibleFields

				if (TaxEntityUsesOneSource)

					if (TaxEntityRel.UseTaxCodeAccounts)
						ProcessTaxHistory.AccruedOrInvoiced		= EntityTaxCodeGlCompanyRel.AccruedOrInvoiced
					else
						ProcessTaxHistory.AccruedOrInvoiced 	= TaxEntityRel.AccruedOrInvoiced

					LocalTaxRate 								= DistributionAmount.CurrencyAmount / TransactionTaxableAmount
					ProcessTaxHistory.TaxRate					= LocalTaxRate
					ProcessTaxHistory.ChargedTaxAmount			= blank
					ProcessTaxHistory.DeliveryTerms				= blank

					if (TransType.Invoice
					or  TransType.CreditMemo
					or  TransType.DebitMemo
					or  TransType.MixedSignLines)

						if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							ProcessTaxHistory.ToAddress 		= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							ProcessTaxHistory.ToAddress 		= ReceivableInvoiceRel.Customer.PostalAddress

						if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered)
							ProcessTaxHistory.FromAddress 		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
						else
							ProcessTaxHistory.FromAddress 		= GlCompanyRel.PostalAddress

						if (ReceivableInvoiceRel.Origin.IntercompanyBilling
						and ReceivableInvoiceRel.IntercompanyBillingDocumentByDateRel exists)
							if (ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)
								ProcessTaxHistory.FromAddress 	= ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress
							else
								ProcessTaxHistory.FromAddress 	= ReceivableInvoiceRel.first IntercompanyBillingDocumentByDateRel.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

					else
					if (NonArPaymentNavRel exists)

						if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered)
							ProcessTaxHistory.FromAddress 		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
							ProcessTaxHistory.ToAddress 		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
						else
							ProcessTaxHistory.FromAddress 		= GlCompanyRel.PostalAddress
							ProcessTaxHistory.ToAddress 		= GlCompanyRel.PostalAddress


				ProcessTaxHistory.TaxTransFunction				= "A"	
				LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed

		ProcessTaxHistoryFromApplicationClose


			initialize ProcessTaxHistory
			ProcessTaxHistory.FromAddress					= CompanyRel.PostalAddress
			ProcessTaxHistory.HistoryType					= "O"
			ProcessTaxHistory.InTransactionId				= blank
			ProcessTaxHistory.InvoiceCompany				= ReceivableCompanyDataGroup.TransactionCompany
			ProcessTaxHistory.TaxEntity						= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
			ProcessTaxHistory.TaxCode						= TaxCode
			ProcessTaxHistory.SystemCode					= "AR"
			ProcessTaxHistory.VendorCustomer				= ReceivableCompanyDataGroup.Customer
			if (TransType.Invoice
			or  TransType.CreditMemo
			or  TransType.DebitMemo
			or  TransType.MixedSignLines
			or  (TransType.CustomerPayment
			and TransientPrepaymentTax))		
				ProcessTaxHistory.VendorOrCustomerName		= ReceivableCompanyDataGroup.Customer.Name
			else
				ProcessTaxHistory.VendorOrCustomerName		= "NonARPayment"
			ProcessTaxHistory.Invoice						= Invoice
			ProcessTaxHistory.TaxEntity						= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
			ProcessTaxHistory.InvoiceCompany				= ReceivableCompanyDataGroup.TransactionCompany
			ProcessTaxHistory.TaxTransactionAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
			ProcessTaxHistory.ProcessLevel					= ReceivableCompanyDataGroup.ReceivableProcessLevel
			ProcessTaxHistory.InvoiceDate					= TransactionDate
			ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
			ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
			LocalCalculateTaxEffectiveDate 					= CalculateTax.EffectiveDate
			ProcessTaxHistory.TaxPointDate					= LocalCalculateTaxEffectiveDate
			if (TaxPoint.GlDate)
				ProcessTaxHistory.TaxPointDate				= GeneralLedgerDate
			ProcessTaxHistory.PostDate						= GeneralLedgerDate
			ProcessTaxHistory.TransactionSource				= "O"
			ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
			ProcessTaxHistory.RelatedObjectReference		= reference to this instance
			if (!CalculateTax.TaxType.TableMember)
				ProcessTaxHistory.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
				ProcessTaxHistory.AccruedOrInvoiced			= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag
			else
				if (TaxEntityRel.UseTaxCodeAccounts)
					ProcessTaxHistory.AccruedOrInvoiced	= EntityTaxCodeGlCompanyRel.AccruedOrInvoiced
				else
					ProcessTaxHistory.AccruedOrInvoiced = TaxEntityRel.AccruedOrInvoiced
				LocalTaxRate = DistributionAmount.CurrencyAmount/TransactionTaxableAmount
				ProcessTaxHistory.TaxRate			= LocalTaxRate





			if (ReceivableCompanyDataGroup.TransactionCompany.Currency != ReceivableInvoiceRel.OriginalCurrency
			or  ReceivableCompanyDataGroup.TransactionCompany.Currency != ReceivablePaymentRel.OriginalCurrency)
				ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount
			else
				ProcessTaxHistory.TransactionTaxableAmount	= TransientTaxable

			if (ReceivablePaymentRel exists
			and TransType.CustomerPayment
			and TransientPrepaymentTax)		
					ProcessTaxHistory.TransactionInvoiceAmount	= TransientTaxable
					ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount
			else
			if (TransType.Invoice
			or  TransType.DebitMemo)
				ProcessTaxHistory.TransactionInvoiceAmount		= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount * -1
			else
				ProcessTaxHistory.TransactionInvoiceAmount		= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount
			ProcessTaxHistory.TransactionTaxAmount			= DistributionAmount.CurrencyAmount 

			if  (TransType.CreditMemo)
				ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
			else
				ProcessTaxHistory.InvoicedOrCreditMemo		= "I"


			ProcessTaxHistory.VATRegistrationCountry		= CompanyCustomerRel.VATRegistrationCountry
			ProcessTaxHistory.VATRegistrationNumber			= CompanyCustomerRel.VATRegistrationNumber
			ProcessTaxHistory.DeliveryTerms					= ReceivableInvoiceRel.ShipTerm
			ProcessTaxHistory.DefaultFilingCurrency			= TaxEntityRel.DefaultFilingCurrency
			ProcessTaxHistory.BaseCurrency					= TransactionCompanyRel.Currency
			ProcessTaxHistory.VATInputTaxAmount				= VATInputTaxAmount
			ProcessTaxHistory.ChargedTaxAmount				= DistributionAmount.CurrencyAmount
			ProcessTaxHistory.RecoverableTaxAreaId			= RecoverableTaxAreaId
			ProcessTaxHistory.RecoverableJurisLevel			= RecoverableJurisLevel
			ProcessTaxHistory.RecoverableImpositionType		= RecoverableImpositionType
			ProcessTaxHistory.RecoverablePercent			= RecoverablePercent
			ProcessTaxHistory.RecoverableAmount				= RecoverableAmount
			ProcessTaxHistory.UnrecoverableAmount			= UnrecoverableAmount
			ProcessTaxHistory.RecoverableDate				= RecoverableDate
			ProcessTaxHistory.BlockingOverridePercent		= BlockingOverridePercent
			ProcessTaxHistory.PartialExemptRecvblOvrdPct	= PartialExemptRecvblOvrdPct
			ProcessTaxHistory.VertexSimplificationCode		= VertexSimplificationCode
			ProcessTaxHistory.VertexVATType					= VertexVATType


			if (TaxEntityUsesVertex)
				if (IsHSNSACCodeEnabled)
					ProcessTaxHistory.CommodityCodeType      	= "HSN"
					ProcessTaxHistory.HSNSACCode				= HSNSACCode
				else
					ProcessTaxHistory.CommodityCodeType      	= "UNSPSC"
					ProcessTaxHistory.UNSPSCCode				= DerivedUNSPSCCodeNoDash
				if (TransType.CreditMemo)
					ProcessTaxHistory.DocumentType				= "CreditMemo"
				else
				if (TransType.DebitMemo)
					ProcessTaxHistory.DocumentType				= "DebitMemo"
				else
				if (TransType.Invoice)
					ProcessTaxHistory.DocumentType				= "Invoice"
				else
				if (TransType.MixedSignLines)
					ProcessTaxHistory.DocumentType				= "MixedSignLines"
				else
				if (TransType.NonArPayment)
					ProcessTaxHistory.DocumentType				= "NonArPayment"
				else
				if (TransType.CustomerPayment)
					ProcessTaxHistory.DocumentType				= "CustomerPayment"
				else
				if (TransType.BillOfExchangePayment)
					ProcessTaxHistory.DocumentType				= "BillOfExchangePayment"
				else
				if (TransType.CustomerDraftRemittance)
					ProcessTaxHistory.DocumentType				= "CustomerDraftRemittance"

				ProcessTaxHistory.ToAddress                 	= ReceivableCompanyDataGroup.Customer.PostalAddress
				if (IsInvoiceBased
				and ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
					ProcessTaxHistory.ToAddress         		= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress

				include ProcessTaxHistoryVertexFlexibleFields

			ProcessTaxHistory.TaxTransFunction				= "A"	
			LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed

		DoDocumentPrefix
			if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice)
				DocumentNumber								= "1-" + Invoice
			else
			if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
				DocumentNumber								= "2-" + Invoice
			if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
				DocumentNumber								= "3-" + Invoice

		TaxProcessingUpdateRules
			if (LinkedTaxGroup.Indicator entered)
				if (LinkedTaxGroup.Indicator.Taxable)
					LinkedTaxGroup.TaxCode 									= TaxCode
					LinkedTaxGroup.TaxableAmount 							= TransactionTaxableAmount
					if (TaxCode not entered)
						initialize TransactionTaxableAmount
						initialize LinkedTaxGroup
					else
						if (TransactionTaxableAmount not entered)
							LinkedTaxGroup.TaxableAmount					= DistributionAmount.CurrencyAmount
							TransactionTaxableAmount						= DistributionAmount.CurrencyAmount
				if ((LinkedTaxGroup.Indicator.SourceDistribution
				or   LinkedTaxGroup.Indicator.CreatedTaxDistribution)
				and !AllowLinkedTaxUpdate)
					constraint (false)
						"CannotChangeDistributionsAfterTaxProcessingHasOccurred.DeleteDistributionsAndAddThemAgain."
			else
				if (TaxCode entered)
					LinkedTaxGroup.Indicator								= "X" 
					LinkedTaxGroup.TaxCode 									= TaxCode
					if (TransactionTaxableAmount entered)
						LinkedTaxGroup.TaxableAmount						= TransactionTaxableAmount
					else
						LinkedTaxGroup.TaxableAmount						= DistributionAmount.CurrencyAmount
						TransactionTaxableAmount							= DistributionAmount.CurrencyAmount
				else
					if (TransactionTaxableAmount entered)
						initialize TransactionTaxableAmount


		TaxProcessingDeleteRules
			if (LinkedTaxGroup.Indicator entered)
				if (LinkedTaxGroup.Indicator.SourceDistribution)
					invoke RemoveLinkedTaxDistributions
				if  (LinkedTaxGroup.Indicator.CreatedTaxDistribution
				and !AllowLinkedTaxDeletion)
					if (IsNonArPayment)
						if (NonArPaymentNavRel.Origin.PaymentInterface)
							AllowLinkedTaxDeletion = true
					else
						if (ReceivableInvoiceRel.Origin.External)
							AllowLinkedTaxDeletion = true
				if  (LinkedTaxGroup.Indicator.CreatedTaxDistribution
				and !AllowLinkedTaxDeletion)
					constraint (false)
						"CannotDeleteTaxDistributionsAfterTaxProcessingHasOccurred.DeleteTaxableDistributionsAndAddThemAgain."
				if (IsNonArPayment)
					for each NonARPaymentTaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each
				else
					for each TaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

		UpdateFundApplyDistributionSet 
			DistributionAmount.KeepRateAndAmount		= true 
			initialize LocalGeneralLedgerSystemCode
			initialize TransientCurrencyTable
			initialize TransientFinanceCodeBlock
			if (OnSettlementDetailSelectDistributionForm)

				constraint (ContextSettlementDetailLineRel exists)
					"LineMustBeSelectedToAddDistributions"

				constraint (SettlementDetailApplyDistributionSelectAmount != 0)
					"Selected_\AmountMustBeEntered"

				if (ICBReceivableApplyDistributionContextRel exists)
					LocalCurrentAmount = ICBReceivableApplyDistributionContextRel.DistributionAmount.CurrencyAmount + DerivedFundDistributionOpenAmount
				else
					LocalCurrentAmount = DerivedFundDistributionOpenAmount

				if (DistributionAmount.CurrencyAmount > 0)
					constraint (SettlementDetailApplyDistributionSelectAmount > 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (SettlementDetailApplyDistributionSelectAmount <= LocalCurrentAmount)
						"Selected_\Amount<SettlementDetailApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
				else
				if (DistributionAmount.CurrencyAmount < 0)
					constraint (SettlementDetailApplyDistributionSelectAmount < 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (SettlementDetailApplyDistributionSelectAmount >= LocalCurrentAmount)
						"Selected_\Amount<SettlementDetailApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"

				if (ICBReceivableApplyDistributionContextRel exists)
					invoke Update ICBReceivableApplyDistributionContextRel
						invoked.DistributionAmount.CurrencyAmount = SettlementDetailApplyDistributionSelectAmount
				else
					invoke Create ICBReceivableApplyDistributionContextRel
						invoked.IntercompanyBillingSettlementHeader		= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
						invoked.IntercompanyBillingSettlementDetail		= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
						invoked.IntercompanyBillingSettlementDetailLine = ContextSettlementDetailLineRel.IntercompanyBillingSettlementDetailLine
						invoked.ReceivableEntity						= ReceivableInvoiceDetailContextRel.ContextSettlementDetailRel.ReceivableEntity
						invoked.ApplyFundDistributionAccount			= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 		= SettlementDetailApplyDistributionSelectAmount
						invoked.DistributionAmount.ExchangeDate			= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency						= OriginalCurrency
						invoked.Description								= Description

			else
			if (OnReceivablePaymentRemittanceDetailForm)

				constraint (RemittanceApplyDistributionSelectAmount != 0)
					"Selected_\AmountMustBeEntered"

				LocalUnappliedRemittanceTotalAmount = sum RemittanceApplyDistributionByInvoiceThisDistributionRel.DistributionAmount.CurrencyAmount

				if (RemittanceApplyDistributionRel exists)
					LocalCurrentAmount = RemittanceApplyDistributionRel.DistributionAmount.CurrencyAmount + DerivedFundDistributionOpenAmount - LocalUnappliedRemittanceTotalAmount
				else
					LocalCurrentAmount = DerivedFundDistributionOpenAmount - LocalUnappliedRemittanceTotalAmount

				if (DistributionAmount.CurrencyAmount > 0)
					constraint (RemittanceApplyDistributionSelectAmount > 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (RemittanceApplyDistributionSelectAmount <= LocalCurrentAmount)
						"Selected_\Amount<RemittanceApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
				else
				if (DistributionAmount.CurrencyAmount < 0)
					constraint (RemittanceApplyDistributionSelectAmount < 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (RemittanceApplyDistributionSelectAmount >= LocalCurrentAmount)
						"Selected_\Amount<RemittanceApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"

				if (RemittanceApplyDistributionRel exists)
					invoke Update RemittanceApplyDistributionRel
						invoked.DistributionAmount.CurrencyAmount = RemittanceApplyDistributionSelectAmount
				else
					invoke Create RemittanceApplyDistributionRel
						invoked.ReceivablePaymentRemittance			= ReceivableInvoiceDetailContextRel.first ReceivablePaymentRemittanceDetailContextRel.ReceivablePaymentRemittance
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= RemittanceApplyDistributionSelectAmount
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
						invoked.Customer							= ReceivableCompanyDataGroup.Customer
			else
			if (OnReceivableApplicationSelectDetailForm)

				constraint (PaymentApplyDistributionSelectAmount != 0)
					"Selected_\AmountMustBeEntered"

				if (PaymentApplyDistributionRel exists)
					LocalCurrentAmount = PaymentApplyDistributionRel.DistributionAmount.CurrencyAmount + DerivedFundDistributionOpenAmount
				else
					LocalCurrentAmount = DerivedFundDistributionOpenAmount

				if (DistributionAmount.CurrencyAmount > 0)
					constraint (PaymentApplyDistributionSelectAmount > 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (PaymentApplyDistributionSelectAmount <= LocalCurrentAmount)
						"Selected_\Amount<PaymentApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
				else
				if (DistributionAmount.CurrencyAmount < 0)
					constraint (PaymentApplyDistributionSelectAmount < 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (PaymentApplyDistributionSelectAmount >= LocalCurrentAmount)
						"Selected_\Amount<PaymentApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"

				if (PaymentApplyDistributionRel exists)
					invoke Update PaymentApplyDistributionRel
						invoked.DistributionAmount.CurrencyAmount = PaymentApplyDistributionSelectAmount
				else
					invoke Create PaymentApplyDistributionRel
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= PaymentApplyDistributionSelectAmount
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
			else
			if (OnReceivableApplicationReviewWriteoffForm
			or  OnReceivableApplicationReviewPaymentApplyForm
			or  OnReceivableApplicationReviewRemittanceApplyForm
			or  OnReceivableApplicationReviewCreditApplicationTransactionList
			or  OnReceivableApplicationReviewCreditApplicationCreditList)

				constraint (FundApplyDistributionSelectAmount != 0)
					"Selected_\AmountMustBeEntered"

				if (FundApplyDistributionRel exists)
					LocalCurrentAmount = FundApplyDistributionRel.DistributionAmount.CurrencyAmount + DerivedFundDistributionOpenAmount
				else
					LocalCurrentAmount = DerivedFundDistributionOpenAmount

				if (DistributionAmount.CurrencyAmount > 0)
					constraint (FundApplyDistributionSelectAmount > 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (FundApplyDistributionSelectAmount <= LocalCurrentAmount)
						"Selected_\Amount<FundApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
				else
				if (DistributionAmount.CurrencyAmount < 0)
					constraint (FundApplyDistributionSelectAmount < 0)
						"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
					constraint (FundApplyDistributionSelectAmount >= LocalCurrentAmount)
						"Selected_\Amount<FundApplyDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"

				if (FundApplyDistributionRel exists)
					invoke Update FundApplyDistributionRel
						invoked.DistributionAmount.CurrencyAmount = FundApplyDistributionSelectAmount
				else
					invoke Create FundApplyDistributionRel
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= FundApplyDistributionSelectAmount
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
						invoked.Type								= "T"
						if (OnReceivableApplicationReviewCreditApplicationForm)
							if (OnReceivableApplicationReviewCreditApplicationTransactionList)
								invoked.Type							= "T"
							else
								invoked.Type							= "C"
						invoked.ReceivableInvoiceType				= TransType
						invoked.Customer							= ReceivableCompanyDataGroup.Customer

		ProcessIntrastat
			if (ZeroAmountDistribution)
				NextSentence = true
			else

				IntrastatProcessing.TaxEntity				  = ReceivableCompanyGroup.OriginCompany.AccountingEntity 

				IntrastatProcessing.FiscalYear				  = CurrentYear
				IntrastatProcessing.OriginCountry			   = FromCountry
				IntrastatProcessing.DestinationCountry		  = ToCountry
				LocalTrigger								   = IntrastatProcessing.CheckCountries
				constraint (IntrastatProcessing.OutputErrorNumber not entered)			 
					"<IntrastatProcessing.OutputErrorMessage>"
				if (IntrastatProcessing.SoftMessageNumber entered)	 
					CreationCompleteMessage = IntrastatProcessing.OutputErrorMessage


				IntrastatProcessing.TaxEntity				   = ReceivableCompanyGroup.OriginCompany.AccountingEntity

				IntrastatProcessing.FiscalYear				  = FiscalYear
				NewIntrastatNumber							= IntrastatProcessing.GetNextIntrastatNumber
					constraint (IntrastatProcessing.OutputErrorNumber not entered)
						"<IntrastatProcessing.OutputErrorMessage>"

				IntrastatProcessing.TaxEntity				   = ReceivableCompanyGroup.OriginCompany.AccountingEntity	

				IntrastatProcessing.FiscalYear				  = FiscalYear
				(Load Header data, set HeaderFc)
				(Load Detail data, set DetailFc)
				NewIntrastatNumber							= IntrastatProcessing.MainTrigger
					constraint (IntrastatProcessing.OutputErrorNumber not entered)
						"<IntrastatProcessing.OutputErrorMessage>"





		InitializeVATFields
			initialize RecoverableTaxAreaId
			initialize RecoverableJurisLevel
			initialize RecoverableImpositionType
			initialize RecoverableAmount
			initialize RecoverablePercent
			initialize UnrecoverableAmount
			initialize RateClassificationText
			initialize InvoiceTextCode
			initialize ForeignOrDomestic
			initialize Imposition
			initialize ReturnedTaxType
			initialize InputOutputType
			IsService = false

		LoadVertexGlobalInputFields
			if (TaxEntityUsesVertex)
				CalculateTax.TransactionSource			 = "O"
				CalculateTax.CallingModule				 = "Receivable_GL_Distribution"
				CalculateTax.InvoiceCompany				 = ReceivableCompanyGroup.GlCompany
				CalculateTax.ProcessLevel				 = ReceivableCompanyDataGroup.ReceivableProcessLevel
				CalculateTax.Vendor						 = ReceivableCompanyDataGroup.Customer
				CalculateTax.Invoice					 = Invoice
				CalculateTax.LineNumber					 = ReceivableGLDistribution

				CalculateTax.PostalAddress				 = ReceivableCompanyDataGroup.Customer.PostalAddress
				if (IsInvoiceBased
				and ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
                    CalculateTax.PostalAddress       	 = ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
				CalculateTax.FromPostalAddress			 = GlCompanyRel.PostalAddress
				CalculateTax.ProductTaxCategory			 = ProductTaxCategory
				CalculateTax.TaxUsageCode				 = TaxUsageCode
				CalculateTax.DeliveryTerms				 = ReceivableInvoiceRel.ShipTerm
				CalculateTax.VATRegistrationCountry		 = CompanyCustomerRel.VATRegistrationCountry 
				CalculateTax.VATRegistrationNumber		 = CompanyCustomerRel.VATRegistrationNumber 
				CalculateTax.FromVATRegistrationCountry	 = TaxEntityRel.VATRegistrationCountry 
				CalculateTax.FromVATRegistrationNumber	 = TaxEntityRel.VATRegistrationNumber 
				CalculateTax.DefaultFilingCurrency		 = TransactionCompanyRel.Currency
				CalculateTax.CurrencyRate				 = ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				CalculateTax.TransactionCurrency		 = OriginalCurrency
				CalculateTax.BaseCurrency				 = TransactionCompanyRel.Currency

				include LoadVertexAdditionalFields
				include LoadVertexDebugOptions

		LoadVertexAdditionalFields
			if (TaxEntityUsesVertex)
				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= DerivedUNSPSCCodeNoDash
				if (TransType.CreditMemo)
					CalculateTax.DocumentType				= "CreditMemo"
				else
				if (TransType.DebitMemo)
					CalculateTax.DocumentType				= "DebitMemo"
				else
				if (TransType.Invoice)
					CalculateTax.DocumentType				= "Invoice"
				else
				if (TransType.MixedSignLines)
					CalculateTax.DocumentType				= "MixedSignLines"
				else
				if (TransType.NonArPayment)
					CalculateTax.DocumentType				= "NonArPayment"
				else
				if (TransType.CustomerPayment)
					CalculateTax.DocumentType				= "CustomerPayment"
				else
				if (TransType.BillOfExchangePayment)
					CalculateTax.DocumentType				= "BillOfExchangePayment"
				else
				if (TransType.CustomerDraftRemittance)
					CalculateTax.DocumentType				= "CustomerDraftRemittance"

				include VertexFlexibleFields

		LoadVertexDebugOptions
			if (TaxEntityUsesVertex)
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey
					CalculateTax.AppendToJurisFile			= true
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey
					CalculateTax.RelatedObjectReference	 = reference to this instance
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel

		VertexFlexibleFields
			if (TaxEntityUsesVertex
			and TaxAttributesRel.VertexFlexibleFieldExist)
				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
					if (each.Code entered
					or  each.ExternalValue entered)
						Idx +=1
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyGroup.OriginCompany.AccountingEntity
						else
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyGroup.GlCompany
						else
						if (each.ExternalValue.ValueIs.Description)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else
						if (each.ExternalValue.ValueIs.Customer)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyDataGroup.Customer
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.Currency)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OriginalCurrency
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableInvoiceRel.DerivedDiscountAmountOverride
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUnitCost
						else
						if (each.ExternalValue.ValueIs.ContractType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
						else
						if (each.ExternalValue.ValueIs.WorkType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.WorkType
						else
						if (each.ExternalValue.ValueIs.ServiceType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ServiceType
						else
						if (each.ExternalValue.ValueIs.AccountSubType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
						else
						if (each.ExternalValue.ValueIs.UsageType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.UsageType
						else
						if (each.ExternalValue.ValueIs.CustomerType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.Project)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project
						else
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
						else
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension1
						else
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension2
						else
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension3
						else
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension4
						else
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension5
						else
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension6
						else
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension7
						else
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension8
						else
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension9
						else
						if (each.ExternalValue.ValueIs.FinanceDimension10)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension10
						else
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
					if (each.NumericValue entered
					or  each.ExternalValue entered)
						Idx +=1
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivableCompanyGroup.GlCompany
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = GeneralLedgerAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = GeneralLedgerAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivableInvoiceRel.DerivedDiscountAmountOverride
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = DerivedUnitCost
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 8
						else
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
					if (each.DateValue entered
					or  each.ExternalValue entered)
						Idx +=1
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
						if (each.ExternalValue.ValueIs.PostingDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = TransactionDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = TransactionDate
						else
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		ProcessTaxHistoryVertexFlexibleFields
			if (TaxEntityUsesVertex
			and TaxAttributesRel.VertexFlexibleFieldExist)
				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
					if (each.Code entered
					or  each.ExternalValue entered)
						Idx +=1
						ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
						ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyGroup.OriginCompany.AccountingEntity
						else
						if (each.ExternalValue.ValueIs.Company)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyGroup.GlCompany
						else
						if (each.ExternalValue.ValueIs.Description)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else
						if (each.ExternalValue.ValueIs.Customer)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableCompanyDataGroup.Customer
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.Currency)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OriginalCurrency
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivableInvoiceRel.DerivedDiscountAmountOverride
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUnitCost
						else
						if (each.ExternalValue.ValueIs.ContractType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
						else
						if (each.ExternalValue.ValueIs.WorkType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.WorkType
						else
						if (each.ExternalValue.ValueIs.ServiceType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ServiceType
						else
						if (each.ExternalValue.ValueIs.AccountSubType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
						else
						if (each.ExternalValue.ValueIs.UsageType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.UsageType
						else
						if (each.ExternalValue.ValueIs.CustomerType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.Project)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.Project
						else
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
						else
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension1
						else
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension2
						else
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension3
						else
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension4
						else
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension5
						else
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension6
						else
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension7
						else
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension8
						else
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension9
						else
						if (each.ExternalValue.ValueIs.FinanceDimension10)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerAccount.FinanceDimension10
						else
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
					if (each.NumericValue entered
					or  each.ExternalValue entered)
						Idx +=1
						ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
						ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
						if (each.ExternalValue.ValueIs.Company)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivableCompanyGroup.GlCompany
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = GeneralLedgerAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = GeneralLedgerAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivableInvoiceRel.DerivedDiscountAmountOverride
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = DerivedUnitCost
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 8
						else
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
					if (each.DateValue entered
					or  each.ExternalValue entered)
						Idx +=1
						ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
						ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
						if (each.ExternalValue.ValueIs.PostingDate)
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = TransactionDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = TransactionDate
						else
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		LoadVtxReturnedFieldsFromCalculateTax
			if (TaxEntityUsesVertex)
				RateClassificationText				= CalculateTax.RateClassificationText
				InvoiceTextCode						= CalculateTax.InvoiceTextCode
				ForeignOrDomestic					= CalculateTax.ForeignOrDomestic

				ReturnedTaxType						= CalculateTax.ReturnedTaxType
				InputOutputType						= CalculateTax.InputOutputType
				IsService							= CalculateTax.IsService
				LocalRecoverableAccount				= CalculateTax.RecoverableAccount
				LocalUnRecoverableAccount			= CalculateTax.NonRecoverableAccount
				LocalForeignRecoverableAccount		= CalculateTax.ForeignRecoverableAccount
				LocalForeignUnRecoverableAccount	= CalculateTax.ForeignNonRecoverableAccount
				if (CalculateTax.Imposition			= "VAT"
				or  CalculateTax.ReturnedTaxType	= "VAT")
					RecoverableTaxAreaId			= CalculateTax.OutputGeoCode
					RecoverableJurisLevel			= CalculateTax.ReturnedJurisLevel
					RecoverableImpositionType		= CalculateTax.Imposition
					RecoverableAmount				= CalculateTax.RecoverableAmount
					RecoverablePercent				= CalculateTax.RecoverablePercent
					UnrecoverableAmount				= CalculateTax.UnrecoverableAmount
					VATInputTaxAmount				= CalculateTax.RecoverableAmount
					if (ForeignOrDomestic.Domestic)
						VertexVATType = "D"
					if (RecoverableAmount entered)
						if (ForeignOrDomestic.Foreign
						and LocalForeignRecoverableAccount entered)
							GeneralLedgerAccount		= LocalForeignRecoverableAccount
						else
						if (ForeignOrDomestic.Domestic
						and LocalRecoverableAccount entered)
							GeneralLedgerAccount		= LocalRecoverableAccount

		CreateRules  



			if (ReceivableInvoiceRel exists
			and (invoking action = "Create"
			or invoking action = "CreateInvoiceDistribution"
			or invoking action = "CreateManualInvoiceDistribution"))
				constraint (BatchNumber = ReceivableInvoiceRel.BatchNumber)
					"Batch_\Number<BatchNumber>NotSameAsInvoice<Invoice>Batch_\Number<ReceivableInvoiceRel.BatchNumber>"

			if (IsNonArPayment

			and SequenceNumber not entered)
				SequenceNumber = NonArPaymentNavRel.ReceivablePayment

			if (IsNonArPayment  
			and ReceivableCompanyDataGroup.TransactionCompany.DetailGLTransPerPayment.NoDetailAccrualInterfacing

			and ReceivableCompanyDataGroup.TransactionCompany.FinanceEnterpriseGroup.FundAccounting)

				CategoryType = "N"

			if (FinanceEnterpriseGroup not entered)
				FinanceEnterpriseGroup				= actor.context.FinanceEnterpriseGroup

			if (FinanceEnterpriseGroup not entered)
				FinanceEnterpriseGroup				= TransactionCompanyRel.Company.CustomerBusinessGroup.FinanceEnterpriseGroup

			TransientCurrencyTable						= DerivedCurrencyTable

			LocalGeneralLedgerSystemCode 				= "AR"

			TransientFinanceCodeBlock					= GeneralLedgerAccount

			if  (DistributionAmount.ExchangeDate not entered)
				DistributionAmount.ExchangeDate			= TransactionDate

			if (!AuditSummaryIndicator.GainLossOnCurrencyConv)

				if (LocalCreateFromBatch
				or  Origin.CashApplication)
					DistributionAmount.FunctionalAmount.ToCurrency 				= OriginalCurrency

				else
				if (KeepFunctionalRate
				and DistributionAmount.FunctionalAmount.EnteredCurrencyRate entered)
					DistributionAmount.FunctionalAmount.ToCurrency 				= OriginalCurrency
				else
				if (Origin.Payment
				or  Origin.RTMPayment)
					DistributionAmount.FunctionalAmount.ToCurrency 				= ReceivablePaymentHeaderRel.Company.Currency
					DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivablePaymentHeaderRel.CurrencyRate
				else
				if ((Origin.Invoicing
				or  Origin.DebitCreditMemo)
				and !LocalCreateFromBatch)		
					DistributionAmount.FunctionalAmount.ToCurrency 				= ReceivableInvoiceRel.Company.Currency
					DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					DistributionAmount.AlternateAmount.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					DistributionAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					DistributionAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
					DistributionAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
					DistributionAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
					DistributionAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
				else
				if (IsFromBOE)
					DistributionAmount.FunctionalAmount.ToCurrency				= first BillOfExchangeRel.Company.Currency
					DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= first BillOfExchangeRel.CurrencyRate
				else
				if (ReceivableCompanyDataGroup.TransactionCompany entered)
					DistributionAmount.FunctionalAmount.ToCurrency				= TransactionCompanyRel.Currency

				initialize LocalFinanceCodeBlock
				if (ReceivableInvoiceRel exists)
					LocalStructureDefaultCode									= "ARManualInvoiceDlts"
					LocalFinanceCodeBlock.FinanceCodeBlockArray.Block[1]		= ReceivableDistributionCategoryRel.DistributionAccount
					LocalFinanceCodeBlock.FinanceCodeBlockArray.Block[2]		= ReceivableDistributionCategoryRel.DistributionAccount
					LocalDefaultReturn											= LocalFinanceCodeBlock.CalculateDefaults



		ValidateWithReceivableInvoiceDefaults
			if(HasReceivableInvoice
			and ReceivableInvoiceRel.Status.Unreleased
			and IsManualOrExternal
			and !BypassInvoiceCommonEdits)
				constraint (GeneralLedgerDate = ReceivableInvoiceRel.GeneralLedgerDate)
					"Global_\Ledger_\DateOn_\DistributionNotSameAsOn_\Invoice<Invoice>"
				constraint (ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableInvoiceRel.ReceivableProcessLevel)
					"Receivable_\Process_\LevelOn_\DistributionNotSameAsOn_\Invoice<Invoice>"
				constraint (OriginalCurrency = ReceivableInvoiceRel.OriginalCurrency)
					"Transaction_\CurrencyOn_\DistributionNotSameAsOn_\Invoice<Invoice>"
				constraint (TransactionDate = ReceivableInvoiceRel.TransactionDate)
					"Transaction_\DateOn_\DistributionNotSameAsOn_\Invoice<Invoice>"
				constraint (DistributionAmount.ExchangeDate = ReceivableInvoiceRel.TransactionDate)
					"Exchange_\DateOn_\DistributionNotSameAsOn_\Invoice<Invoice>"

	Create Exit Rules
		if ((Origin.Invoicing
		or   Origin.DebitCreditMemo)
		and  ReceivableInvoiceRel exists
		and  LastDistributionSequence > ReceivableInvoiceRel.LastDistributionSequence)
			invoke FastUpdate ReceivableInvoiceRel
				invoked.LastDistributionSequence = LastDistributionSequence

		if (TransientUpdateCashCodeFund)
			if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				LocalAccountingUnit		= GeneralLedgerAccount.AccountingUnit
			else
				LocalFinanceDimension1	= GeneralLedgerAccount.FinanceDimension1
			if (TransientSetPaymentBatchNumber)					
				LocalBatchNumber = TransientPaymentBatchNumber
			else
				LocalBatchNumber = BatchNumber
			if (CashCodeFundRel !exist)
				invoke Create CashCodeFundRel
					invoked.PostedAmount = DistributionAmount.CurrencyAmount
			else
				invoke UpdatePostedAmount CashCodeFundRel
					invoked.PrmPostedAmount = DistributionAmount.CurrencyAmount
			LocalGLFinanceCodeBlock = GeneralLedgerAccount

			if (CashLedgerGLDistributionByAccountRel exists)
				invoke AddAmountsToExistingDistribution CashLedgerGLDistributionByAccountRel
					invoked.PrmDistributionAmount				= DistributionAmount
					invoked.PrmDistributionAmount.ExchangeDate	= ReceivablePaymentHeaderFundRel.DepositDate
			else
				invoke CreateFundHistoryDistribution CashLedgerGLDistribution
					invoked.CashManagementGroup										= FinanceEnterpriseGroup
					invoked.CashCode												= ReceivablePaymentHeaderFundRel.CashCode
					invoked.CashLedgerSourceRecord									= "CBT"
					if (ForRTMPayment)
						invoked.CashLedgerGLDistribution.BankTransactionCode		= ReceivableCompanyDataGroup.TransactionCompany.RTMPaymentBankCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber		= RTMPaymentRel.TransactionIDNumber
					else
						invoked.CashLedgerGLDistribution.BankTransactionCode		= ReceivablePaymentHeaderFundRel.DepositBankCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber		= ReceivablePaymentHeaderFundRel.TransactionIDNumber
					invoked.CashLedgerGLDistribution.DistributionType   			= "F"
					invoked.CashLedgerGLDistribution.SequenceNumber					= (last CashLedgerGLDistributionsRel.CashLedgerGLDistribution.SequenceNumber + 1)
					invoked.Company													= ReceivablePaymentHeaderFundRel.Company
					invoked.Status 	 												= 9 

					invoked.PostDate												= GeneralLedgerDate
					invoked.Description												= "Cash Receipt"
					invoked.GLFinanceCodeBlock										= GeneralLedgerAccount
					invoked.TransactionNumber										= "AR-" + ReceivablePaymentHeaderFundRel.PaymentHeaderString
					invoked.GeneralLedgerSourceCode									= "RP"
					invoked.GLTransactionAmount										= DistributionAmount.CurrencyAmount
					invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount 		= DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					invoked.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					invoked.GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount 	= DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					invoked.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					invoked.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					invoked.GLBaseAmount.ProjectAmount.EnteredCurrencyAmount	 	= DistributionAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount		= DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount		= DistributionAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.LocalExchangeDate										= ReceivablePaymentHeaderFundRel.DepositDate
					invoked.LocalCurrencyTable										= ReceivablePaymentHeaderFundRel.CurrencyTable
					invoked.LocalControlDocumentNumber								= "AR-" + ReceivablePaymentHeaderFundRel.PaymentHeaderString
					invoked.LocalDocumentNumber										= "AR-" + ReceivablePaymentHeaderFundRel.PaymentHeaderString

#ifdef module cam
			if (FinanceEnterpriseGroup.CustodialAccountManagement)
				LocalFinanceDimension10	= GeneralLedgerAccount.FinanceDimension10
				if (CustodialDetailAmountRel exists)
					invoke UpdateDeposits CustodialDetailAmountRel
						invoked.PrmDeposits += DistributionAmount.CurrencyAmount

					invoke Create CustodialActivity
						invoked.FinanceEnterpriseGroup  	= FinanceEnterpriseGroup
						invoked.CustodialActivity.CustodialAccountManagement	= CustodialDetailAmountRel.CustodialAccountManagement
						invoked.CustodialPosting			= LocalFinanceDimension10
						invoked.ActivityDate				= GeneralLedgerDate
						invoked.ActivityType				= 1
						if (ReceivablePaymentRel.TypeOfPayment.NonArPayment)
							invoked.DocumentNumber				= Invoice
							invoked.CustodialTransType			= TransType.NonArPayment
							invoked.CustodialCreditBatch		= BatchNumber
							invoked.CustodialCreditSequence		= SequenceNumber
						else
							invoked.DocumentNumber				= ReceivableApplicationForCustodialRel.CreditTransaction.CreditNumber
							invoked.CustodialTransType			= TransType
							invoked.CustodialCreditBatch		= ReceivableApplicationForCustodialRel.CreditTransaction.CreditBatch
							invoked.CustodialCreditSequence		= ReceivableApplicationForCustodialRel.CreditTransaction.CreditSequence
						invoked.Description 				= Description
						invoked.Amount						= DistributionAmount.CurrencyAmount
						invoked.CustodialCompany			= ReceivablePaymentHeaderFundRel.Company
#endif

	Actions
		Create	is a Create Action

			Entrance Rules
				if (ReceivableInvoiceRel exists
				and !BypassStatusEdit
				and !Status.Unreleased
				and !FromInterface)
					constraint (ReceivableInvoiceRel.Status.Released)
						"CannotAdd_\Released_\DistributionsTo_\Unreleased_\Invoices"
				include CreateRules

			Exit Rules
				if (!LocalSkipGLTransFromBatch)
					include CreateGLTransactionDetail
				include ValidateWithReceivableInvoiceDefaults

				if (Status.Released)

					include ReleaseGLTransactionDetail


		ReleaseGLTransactionDetailForCreditMemo	is an Instance Action
			restricted
			Action Rules
				if (GLTransactionDetailRel.Status.Unreleased)
					invoke Release GLTransactionDetailRel

		CreateFromARLL	is a Create Action
			restricted
			Action Rules
				LocalCreateFromBatch			= true
				LocalSkipGLTransFromBatch		= true
				BypassStructureRelationEdit		= true 
				invoke Create this instance


		CreateGainLossFromBatch	is a Create Action
			restricted
			Entrance Rules
				BypassStructureRelationEdit		= true
				BypassUnitAndAmountEdit			= true
				BypassProjectDateEdit			= true	
				LocalCreateFromBatch			= true
			Action Rules
				invoke Create this instance






		CreateFromBatchProgram	is a Create Action		
			restricted
			Entrance Rules
				LocalCreateFromBatch			= true
				include CreateRules
			Action Rules
			Exit Rules
				include CreateGLTransactionDetail

				if (Status.Released
				and !IsReceivablePaymentDistribution)
					include ReleaseGLTransactionDetail


		CreateInvoiceDistribution	is a Create Action
			Entrance Rules
				if (IsHSNSACCodeEnabled)
					TransientHSNSACCode = true
				if (ReceivableInvoiceRel exists
				and !BypassStatusEdit
				and !Status.Unreleased
				and !FromInterface)
					constraint (ReceivableInvoiceRel.Status.Released)
						"CannotAdd_\Released_\DistributionsTo_\Unreleased_\Invoices"
				if (ReceivableInvoiceRel.IsInvoiceIdentity)
					Origin										= "RI"
				else
					Origin										= "RM"

				ReceivableCompanyDataGroup.ReceivableProcessLevel	 = ReceivableInvoiceRel.ReceivableProcessLevel
				TransactionDate										 = ReceivableInvoiceRel.TransactionDate
				DistributionAmount.ExchangeDate						 = TransactionDate
				OriginalCurrency									 = ReceivableInvoiceRel.OriginalCurrency
				AccumulationType									 = "D"
				DistributionSource									 = "A"
				if (!FromInterface)
					Description											 = ReceivableDistributionCategoryRel.Description

				include CreateRules
			Action Rules
				if  (DistributionAmount.CurrencyAmount not entered
				and  ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					if (TransactionTaxableAmount entered)
						constraint (TaxCode entered)
							"Tax_\CodeRequiredIf_\Taxable_\AmountEntered"

					if (TaxCode entered)
						constraint (TransactionTaxableAmount entered)
							"TransactionOr_\Taxable_\AmountRequiredIf_\Tax_\CodeEntered"

				if (ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					if (ReceivableDistributionCategoryRel.TaxExempt
					and ReceivableInvoiceRel.CompanyCustomerRel.TaxExempt)
						if (TaxCode entered)
							constraint (TransactionTaxableAmount not entered)
								"CustomerAnd_\CategoryPrevent_\Tax_\CodeDefaulting,CannotEnterTaxFields"	 
						if (TransactionTaxableAmount entered)
							constraint (TaxCode not entered)
								"CustomerAnd_\CategoryPrevent_\Tax_\CodeDefaulting,CannotEnterTaxFields"	 

				include DoDocumentPrefix


			Exit Rules
				if (!FromInterface)
					if (TaxCode not entered)
						if (ReceivableDistributionCategoryRel.TaxCode entered)
							TaxCode		= ReceivableDistributionCategoryRel.TaxCode

						else
							if (!ReceivableDistributionCategoryRel.TaxExempt
							and ReceivableInvoiceRel.CompanyCustomerRel.TaxCode entered)
								TaxCode	= ReceivableInvoiceRel.CompanyCustomerRel.TaxCode

					if (TaxCode entered)
						include ProcessTaxCode






				if (!Status.Posted)	
					include CreateGLTransactionDetail	
					if (Status.Released)	
						invoke Release GLTransactionDetailRel	


		CreatePaymentDistribution	is a Create Action
			Entrance Rules
				constraint (BatchNumber entered)
					"PaymentHeaderRequired"
				if (IsNonArPayment)
					constraint	(!ReceivablePaymentHeaderRel.Status.ReleasedBatch)
						"BatchIsReleased;CannotAddDistributions"
					if (IsHSNSACCodeEnabled)	
						TransientHSNSACCode = true
				Origin														= "RP"
				BypassProjectDateEdit										= true	
				include CreateRules

				if (ReceivableCompanyGroup.OriginCompany not entered)
					ReceivableCompanyGroup.OriginCompany  = ReceivablePaymentRel.Company

				DistributionSource											= "A"
				if (ReceivableCompanyDataGroup.ReceivableProcessLevel not entered)
					ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivablePaymentHeaderRel.ReceivableProcessLevel
				if (GeneralLedgerDate not entered)
					GeneralLedgerDate										= ReceivablePaymentHeaderRel.GeneralLedgerDate
				if (TransactionDate not entered)
					TransactionDate											= ReceivablePaymentHeaderRel.DepositDate

				DistributionAmount.ExchangeDate								= TransactionDate

				if (CurrencyDecimalsNumber not entered)
					CurrencyDecimalsNumber									= ReceivablePaymentHeaderRel.CurrencyDecimalsNumber
				if (OriginalCurrency not entered)
					OriginalCurrency										= ReceivablePaymentHeaderRel.Currency
				AccumulationType											= "D"
				if (Invoice not entered)
					Invoice													= ReceivablePaymentRel.PaymentNumber
				if (TransType not entered
				and !TransientNonARCashOffset)								
					TransType												= ReceivablePaymentRel.TypeOfPayment
				if (ReceivablePaymentRel.TypeOfPayment.CustomerPayment)
					ReceivableCompanyDataGroup.Customer						= ReceivablePaymentRel.Customer
				if (IsNonArPayment) 
					if (ReceivableCompanyGroup.OriginCompany.FinanceEnterpriseGroup.FundAccounting)
						CategoryType = "N"

			Field Rules
				GeneralLedgerAccount
					if (IsNonArPayment
					and ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
						if (ReceivableDistributionCategoryRel.AllowProcessLevelFinanceCodeBlockOverride)
							default to ReceivableProcessLevelRel.AccountingUnitFinanceCodeBlock
								default individual fields
							default to ReceivableDistributionCategoryRel.DistributionAccount
								default individual fields
						if (ReceivableDistributionCategoryRel.PreventProcessLevelFinanceCodeBlockOverride)
							default to ReceivableDistributionCategoryRel.DistributionAccount
			Exit Rules

				if  (IsNonArPayment
				and  ReceivableCompanyDataGroup.ReceivableDistributionCategory entered
				and !ReceivableDistributionCategoryRel.TaxExempt
				and  TaxCode not entered
				and  ReceivableDistributionCategoryRel.TaxCode entered)
					TaxCode = ReceivableDistributionCategoryRel.TaxCode


				if (Status.Unreleased
				and ReceivablePaymentRel.TypeOfPayment.NonArPayment)
					increment ReceivablePaymentRel.BalancingDistributionAmountCompanyCurrency by DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

				if (AdditionalTaxCode entered)
					TaxCode													= AdditionalTaxCode
					include ProcessTaxCode


				if (TaxCode entered
				and !FromInterface
				and !TransientPrepaymentTax)   
					include ProcessTaxCode

				if (TransientPrepaymentTax)			
					LocalInquire				= true
					include ProcessTaxCode
					include ProcessTaxHistoryRuleBlock

				if (!TaxEntityUsesOneSource
				and !CallVertexByTransaction
				and !BypassProcessTaxCode
				and !TransientPrepaymentTax)
					TaxCode = blank
					TransactionTaxableAmount = blank
				include CreateGLTransactionDetail
				if (Status.Released)
					include ReleaseGLTransactionDetail

		CreateInterfacedNonARPaymentDistribution	is a Create Action
			restricted
			Entrance Rules
				constraint (BatchNumber entered)
					"PaymentHeaderRequired"
				constraint	(!ReceivablePaymentHeaderRel.Status.ReleasedBatch)
					"BatchIsReleased;CannotAddDistributions"

				Origin														= "RP"
				include CreateRules

				if (ReceivableCompanyGroup.OriginCompany not entered)
					ReceivableCompanyGroup.OriginCompany  = ReceivablePaymentRel.Company

				DistributionSource											= "A"
				if (ReceivableCompanyDataGroup.ReceivableProcessLevel not entered)
					ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivablePaymentHeaderRel.ReceivableProcessLevel
				if (GeneralLedgerDate not entered)
					GeneralLedgerDate										= ReceivablePaymentHeaderRel.GeneralLedgerDate
				if (TransactionDate not entered)
					TransactionDate											= ReceivablePaymentHeaderRel.DepositDate

				DistributionAmount.ExchangeDate								= TransactionDate

				if (CurrencyDecimalsNumber not entered)
					CurrencyDecimalsNumber									= ReceivablePaymentHeaderRel.CurrencyDecimalsNumber
				if (OriginalCurrency not entered)
					OriginalCurrency										= ReceivablePaymentHeaderRel.Currency
				AccumulationType											= "D"
				if (Invoice not entered)
					Invoice													= ReceivablePaymentRel.PaymentNumber
				if (TransType not entered
				and !TransientNonARCashOffset)								
					TransType												= ReceivablePaymentRel.TypeOfPayment

				if (IsNonArPayment) 
					if (ReceivableCompanyGroup.OriginCompany.FinanceEnterpriseGroup.FundAccounting)
						CategoryType = "N"

			Field Rules
				GeneralLedgerAccount
					if (IsNonArPayment
					and ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
						if (ReceivableDistributionCategoryRel.AllowProcessLevelFinanceCodeBlockOverride)
							default to ReceivableProcessLevelRel.AccountingUnitFinanceCodeBlock
								default individual fields
							default to ReceivableDistributionCategoryRel.DistributionAccount
								default individual fields
						if (ReceivableDistributionCategoryRel.PreventProcessLevelFinanceCodeBlockOverride)
							default to ReceivableDistributionCategoryRel.DistributionAccount
			Exit Rules
				if (AdditionalTaxCode entered)
					TaxCode													= AdditionalTaxCode
					if (!TaxEntityUsesOneSource
					and !CallVertexByTransaction)
						include VerifyTaxCodeForNonARPaymentInterface

				increment ReceivablePaymentRel.BalancingDistributionAmountCompanyCurrency by DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				include CreateGLTransactionDetail

		CreateTaxDistribution	is a Create Action
			restricted

			Entrance Rules
				include CreateRules
			Exit Rules
				if (Status.Unreleased
				and Origin.Payment
				and ReceivablePaymentRel.TypeOfPayment.NonArPayment)
					increment ReceivablePaymentRel.BalancingDistributionAmountCompanyCurrency by DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

				if  (Status.Released)
					initialize CalculateTax 		 
					CalculateTax.TaxEntity			= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
					CalculateTax.TaxCode			= TaxCode
					CalculateTax.InvoiceDate		= TransactionDate
					CalculateTax.ShipmentDate		= TransactionDate
					CalculateTax.PaymentDate		= TransactionDate
					CalculateTax.GeneralLedgerDate	= GeneralLedgerDate
					CalculateTax.Function			= "I"
					CalculateTax.System				= "AR"
					CalculateTax.BypassMemberEdit	= true
					include LoadVertexAdditionalFields
					LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
					if (!CalculateTax.DoTaxCalculation)
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
					TransientTaxRate				= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
					TransientAccrualFlag			= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag

					include ProcessTaxHistoryRuleBlock
				include CreateGLTransactionDetail
				if (Status.Released)
					include ReleaseGLTransactionDetail


		CreateManualInvoiceDistribution	is a Create Action
			valid when (ReceivableInvoiceRel.Status.Unreleased)
			Entrance Rules
				if (IsHSNSACCodeEnabled)
					TransientHSNSACCode = true
				if (ReceivableInvoiceRel exists
				and !BypassStatusEdit
				and !Status.Unreleased
				and !FromInterface)
					constraint (ReceivableInvoiceRel.Status.Released)
						"CannotAdd_\Released_\DistributionsTo_\Unreleased_\Invoices"

				ReceivableGLDistribution.GeneralLedgerDate			= ReceivableInvoiceRel.GeneralLedgerDate
				if (ReceivableInvoiceRel.IsInvoiceIdentity)
					Origin											= "RI"
				else
					Origin											= "RM"
				ReceivableCompanyGroup.OriginCompany				= ReceivableInvoiceRel.Company

				ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceRel.ReceivableProcessLevel
				TransactionDate										= ReceivableInvoiceRel.TransactionDate
				DistributionAmount.ExchangeDate						= TransactionDate
				OriginalCurrency									= ReceivableInvoiceRel.OriginalCurrency
				AccumulationType									= "D"
				DistributionSource									= "A"
				Description											= ReceivableDistributionCategoryRel.Description
				ReceivableCompanyGroup.OriginCompany				= ReceivableInvoiceRel.Company

				include CreateRules


			Field Rules
				GeneralLedgerAccount

					if (ReceivableDistributionCategoryRel.AllowProcessLevelFinanceCodeBlockOverride)
						default to ReceivableProcessLevelRel.AccountingUnitFinanceCodeBlock
							default individual fields
						default to ReceivableDistributionCategoryRel.DistributionAccount
							default individual fields
					if (ReceivableDistributionCategoryRel.PreventProcessLevelFinanceCodeBlockOverride)
						default to ReceivableDistributionCategoryRel.DistributionAccount

					TransientFinanceCodeBlock = GeneralLedgerAccount

			Action Rules

				constraint (ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					"DistributionCategoryRequired"

				if  (DistributionAmount.CurrencyAmount not entered
				and  ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
					if (TransactionTaxableAmount entered)
						constraint (TaxCode entered)
							"Tax_\CodeRequiredIf_\Taxable_\AmountEntered"

					if (TaxCode entered)
						constraint (TransactionTaxableAmount entered)
							"TransactionOr_\Taxable_\AmountRequiredIf_\Tax_\CodeEntered"

				if (TaxCode not entered)
					constraint (TransactionTaxableAmount not entered)
						"Taxable_\AmountNotAllowed;Tax_\CodeIsNotEntered"	 

				if (ReceivableDistributionCategoryRel.TaxExempt
				and ReceivableInvoiceRel.CompanyCustomerRel.TaxExempt)
					if (TaxCode entered)
						constraint (TransactionTaxableAmount entered)
							"CustomerAndCategoryPreventTaxCodeDefaulting,CannotEnterTaxFields"	 

				include DoDocumentPrefix
			Exit Rules


				if (ReceivableDistributionCategoryRel.TaxExempt = false
				and ReceivableInvoiceRel.CompanyCustomerRel.TaxExempt = false)
					if (TaxCode not entered)
						if (ReceivableDistributionCategoryRel.TaxCode entered)
							TaxCode = ReceivableDistributionCategoryRel.TaxCode
						if (TaxCode not entered)
							TaxCode = ReceivableInvoiceRel.CompanyCustomerRel.TaxCode
						if (ReceivableInvoiceRel.IsAllocateForTaxPointPaymentSupported)
							if (TaxEntityRel.UseTaxCodeAccounts)
								TaxPoint = EntityTaxCodeGlCompanyRel.TaxPoint
							else
								TaxPoint = TaxEntityRel.TaxPoint
						if (ReceivableInvoiceRel.IsAllocateForTaxPointPaymentSupported
						and TaxCode entered
						and (TaxPoint ="P"
						or (TaxCode.IsTaxTable
						and IsTaxCodeSetToTaxPoint))
						and TaxOriginCrossReference not entered
						and !FromInterface)
							if (!SkipTaxOriginCrossReference)
								TaxOriginCrossReference = ReceivableGLDistribution
				if (TaxCode entered)
					include ProcessTaxCode
				if (!TaxEntityUsesOneSource
				and !CallVertexByTransaction
				and !BypassProcessTaxCode)
					TaxCode = blank
					TransactionTaxableAmount = blank
				include CreateGLTransactionDetail
				if (ReceivableInvoiceRel.ErrorMessageEntered)
					invoke ValidateReleaseErrors ReceivableInvoiceRel


		CreateManualInvoiceDistributionOffset	is a Create Action
			restricted

			Entrance Rules
				if (ReceivableInvoiceRel.IsInvoiceIdentity)
					Origin										= "RI"
				else
					Origin										= "RM"

				include CreateRules
			Action Rules

				DistributionSource								= "A"
				if (!PostedHistoricalDistribution)
					Status											= 2 
				include DoDocumentPrefix

			Exit Rules
				if (!Status.Posted) 
					include CreateGLTransactionDetail
					if (Status.Released)
						invoke Release GLTransactionDetailRel


		CreateSummarizedOffset	is a Create Action
			restricted

			Entrance Rules
				include CreateRules
			Exit Rules
				if (!Status.Posted) 
					include CreateGLTransactionDetail
					invoke Release GLTransactionDetailRel


		ReturnToMakerCreate	is a Create Action

			Entrance Rules
				if (invoking action != "RTMPayment.ReleaseUnreleasedRtm"
				and invoking action != "RTMPayment.CreateDistributionsFromNonARPaymentUnreleasedRtm")	
					Origin											= "RV"
					ReceivableCompanyGroup.GlCompany				= RTMPaymentRel.Company
					ReceivableCompanyDataGroup.TransactionCompany	= RTMPaymentRel.Company
					ReceivableCompanyGroup.OriginCompany			= RTMPaymentRel.Company
					GeneralLedgerDate								= RTMPaymentRel.GeneralLedgerDate
					ReceivableCompanyDataGroup.Customer				= RTMPaymentRel.Customer
					OriginalCurrency								= RTMPaymentRel.ReceivablePaymentRel.OriginalCurrency
					AccumulationType								= "D"
					DistributionSource								= "A"
					if (RTMPaymentRel.Description entered)
						Description									= RTMPaymentRel.Description
					else
						Description									= RTMPaymentRel.BatchText + RTMPaymentRel.ReceivablePaymentHeader + RTMPaymentRel.NumberText + RTMPaymentRel.RTMPayment
					DocumentNumber									= "8-" +  RTMPaymentRel.ReceivablePaymentHeader + "-" + RTMPaymentRel.ReceivablePaymentRel.ReceivablePayment

					Status											= 0

					GeneralLedgerAccount							= GeneralLedgerAccount
					BypassStructureRelationEdit						= false
					DistributionAmount.ExchangeDate					= RTMPaymentRel.ReceivablePaymentRel.DepositDate
					DistributionAmount.CurrencyAmount				= DistributionAmount.CurrencyAmount
					if (RTMPaymentRel.IsCurrencyRateOverriddenAtPayment)
						DistributionAmount.FunctionalAmount.EnteredCurrencyRate = RTMPaymentRel.ReceivablePaymentRel.CurrencyRate
					BatchNumber										= RTMPaymentRel.ReceivablePaymentHeader
					SequenceNumber									= RTMPaymentRel.ReceivablePaymentRel.ReceivablePayment  
					Invoice											= RTMPaymentRel.RTMPayment
					TransType										= RTMPaymentRel.TransactionType
					TransactionDate									= RTMPaymentRel.GeneralLedgerDate

				include CreateRules

			Exit Rules
				if (TransientPrepaymentTax)			
					LocalInquire				= true
					include ProcessTaxCode
					include ProcessTaxHistoryRuleBlock
				
				include CreateGLTransactionDetail
				if (Status.Released)
					include ReleaseGLTransactionDetail


		CreateIntercompanyInvoiceDistribution	is a Create Action  
			restricted 
			Entrance Rules
				if (IsHSNSACCodeEnabled)
					TransientHSNSACCode = true
				AccumulationType	= "D"

				include CreateRules
			Action Rules

				include DoDocumentPrefix

			Exit Rules
				include CreateGLTransactionDetail


		CreateFromApplicationClose	is a Create Action
			restricted
			Entrance Rules

				BypassGLDateEdit = true
				BypassProjectDateEdit = true
				BypassNegativeRateEdit = true
				BypassStructureRelationEdit = true 

				include CreateRules

				if (FinanceEnterpriseGroup.FundAccounting							
				and invoking action = "ReceivableApplication.ApplicationClose"
				and Status.Released
				and AllocationType entered
				and !AuditSummaryIndicator.GainLossOnCurrencyConv
				and ReceivableInvoiceRel.AllowFundAccountingReallocations)
					Status = Status.Unreleased 

				if  (FlipAmounts)
					TransactionTaxableAmount									*= -1
					BaseTaxableAmount											*= -1

					DistributionAmount.CurrencyAmount							*= -1
					DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
					DistributionAmount.ProjectAmount.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount1.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount2.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount3.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount4.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount5.EnteredCurrencyAmount		*= -1

				DistributionAmount.KeepRateAndAmount = true

			Action Rules


			Exit Rules


				include CreateGLTransactionDetail

				if (Status.Released)
					include ReleaseGLTransactionDetail


				if (DoTaxHistory
				and (TaxCode entered
				or  TransactionTaxableAmount entered))

					initialize CalculateTax
					CalculateTax.TaxEntity			= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
					CalculateTax.TaxCode			= TaxCode
					CalculateTax.InvoiceDate		= TransactionDate
					CalculateTax.ShipmentDate		= TransactionDate
					if (TransientPaymentDate entered)
						CalculateTax.PaymentDate		= TransientPaymentDate
					else
						CalculateTax.PaymentDate		= TransactionDate
					CalculateTax.GeneralLedgerDate	= GeneralLedgerDate
					CalculateTax.InvoiceAmount		= DistributionAmount.CurrencyAmount
					CalculateTax.TaxableAmount		= TransactionTaxableAmount
					CalculateTax.BypassMemberEdit	= true
					CalculateTax.Function			= "I"
					include LoadVertexAdditionalFields
					LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
					LocalTaxRate					= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
					if (!CalculateTax.DoTaxCalculation)
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
					include ProcessTaxHistoryFromApplicationClose


		CreateGainLossReversal	is an Instance Action
			restricted
			Parameters
				PrmReversalDate		is Date
			Entrance Rules
			Action Rules
				BypassUnitAndAmountEdit			= true
				LocalCreateFromBatch			= true
				NegativeFinanceCurrencyAmountGroup = DistributionAmount



				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
				LocalDescription = Description + " Reversal"

				invoke Create ReceivableGLDistribution

					fill in fields from this instance
						except invoked.DistributionAmount
						except invoked.GeneralLedgerDate
						except invoked.TransactionDate
						except invoked.AutoReverseUnrealizedGainLoss
						except invoked.Status
						except invoked.TransientReferenceToThisInstance
						except invoked.Description
						except invoked.ProgramSequence
						except invoked.LastDistributionSequence
					invoked.BypassStructureRelationEdit	 = true
					invoked.DistributionAmount = NegativeFinanceCurrencyAmountGroup
					invoked.GeneralLedgerDate  = PrmReversalDate
					invoked.TransactionDate	 = PrmReversalDate
					invoked.AutoReverseUnrealizedGainLoss = "N"
					invoked.Status = Status.Released
					invoked.DistributionAmount.KeepRateAndAmount = true
					invoked.Description = LocalDescription






		Update	is an Update Action
			valid when (AllowUnrestrictedUpdate) 
			Entrance Rules
				if (Status.Unreleased) 
					TransientCurrencyTable				= DerivedCurrencyTable
					if (IsHSNSACCodeEnabled)
						TransientHSNSACCode = true
			Action Rules
				if (Status.Unreleased) 
					LocalGeneralLedgerSystemCode = "AR"

					TransientFinanceCodeBlock	= GeneralLedgerAccount

					if (IsZeroAmountTaxDistribution)
						BypassUnitAndAmountEdit = true

					if (Origin.Invoicing
					or  Origin.DebitCreditMemo)
						if (IsInvoiceBased
						and ReceivableCompanyDataGroup.ReceivableDistributionCategory entered)
							if (!TaxEntityUsesOneSource
							and !CallVertexByTransaction)
								constraint (TaxCode not entered)
									"TaxCodeMustBeBlank"															 
							if (DistributionAmount.CurrencyAmount not entered)
								constraint (old DistributionAmount.CurrencyAmount not entered)
									"CannotChangeFromNonZeroToZeroAmountDistribution;PleaseDeleteAndRecreate"	 
							if (DistributionAmount.CurrencyAmount entered)
								constraint (old DistributionAmount.CurrencyAmount entered)
									"CannotChangeFromZeroToNonZeroAmountDistribution;PleaseDeleteAndRecreate"	 
						if (!TaxEntityUsesOneSource
						and !CallVertexByTransaction)
							constraint (TaxCode not changed)
								"CannotChangeTaxCode;DeleteAndAddTaxDistrib"

					if (CallVertexByTransaction
					or  TaxEntityUsesOneSource)
						include TaxProcessingUpdateRules
				else
				if (AllowSelectDistributionSet) 
					include UpdateFundApplyDistributionSet
			Exit Rules
				if (Status.Unreleased) 

					include UpdateGLTransactionDetail
					include ValidateWithReceivableInvoiceDefaults

					if (ReceivableInvoiceRel.ErrorMessageEntered)
						invoke ValidateReleaseErrors ReceivableInvoiceRel
					if  (Origin.Payment
					and  ReceivablePaymentRel.TypeOfPayment.NonArPayment)
						increment ReceivablePaymentRel.BalancingDistributionAmountCompanyCurrency by (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount - old DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
						if (AdditionalTaxCode entered and AdditionalTaxCode != TaxCode)













							include ProcessTaxCode



		UnselectFundDistribution is an Instance Action 
			default label is "Unselect"
			valid when (AllowUnselectFundDistribution)
			Action Rules
				if (OnSettlementDetailSelectDistributionForm)
					invoke Delete ICBReceivableApplyDistributionContextRel
				else
				if (OnReceivablePaymentRemittanceDetailForm)
					invoke Delete RemittanceApplyDistributionRel
				else
				if (OnReceivableApplicationSelectDetailForm)
					invoke Delete PaymentApplyDistributionRel
				else
				if (OnReceivableApplicationReviewWriteoffForm
				or  OnReceivableApplicationReviewPaymentApplyForm
				or  OnReceivableApplicationReviewRemittanceApplyForm
				or  OnReceivableApplicationReviewCreditApplicationTransactionList
				or  OnReceivableApplicationReviewCreditApplicationCreditList)
					invoke Delete FundApplyDistributionRel


		SelectOpenFundDistributionAmount is an Instance Action 
			default label is "SelectAvailableAmount"
			valid when (AllowSelectDistributionOpenAmount)
			Action Rules
				if (OnSettlementDetailSelectDistributionForm)
					invoke Create ICBReceivableApplyDistributionContextRel
						invoked.IntercompanyBillingSettlementHeader		= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
						invoked.IntercompanyBillingSettlementDetail		= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
						invoked.IntercompanyBillingSettlementDetailLine = ContextSettlementDetailLineRel.IntercompanyBillingSettlementDetailLine
						invoked.ReceivableEntity						= ReceivableInvoiceDetailContextRel.ContextSettlementDetailRel.ReceivableEntity
						invoked.ApplyFundDistributionAccount			= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 		= DerivedFundDistributionOpenAmount
						invoked.DistributionAmount.ExchangeDate			= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency						= OriginalCurrency
						invoked.Description								= Description
				else
				if (OnReceivablePaymentRemittanceDetailForm)
					invoke Create RemittanceApplyDistributionRel
						invoked.ReceivablePaymentRemittance			= ReceivableInvoiceDetailContextRel.first ReceivablePaymentRemittanceDetailContextRel.ReceivablePaymentRemittance
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= DerivedRemittanceApplyDistributionAvailableAmount 
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
						invoked.Customer							= ReceivableCompanyDataGroup.Customer
				else
				if (OnReceivableApplicationSelectDetailForm)
					invoke Create PaymentApplyDistributionRel
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= DerivedFundDistributionOpenAmount 
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
				else
				if (OnReceivableApplicationReviewWriteoffForm
				or  OnReceivableApplicationReviewPaymentApplyForm
				or  OnReceivableApplicationReviewCreditApplicationTransactionList
				or  OnReceivableApplicationReviewCreditApplicationCreditList)
					invoke Create FundApplyDistributionRel
						invoked.ApplyFundDistributionAccount		= GeneralLedgerAccount
						invoked.DistributionAmount.CurrencyAmount 	= DerivedFundDistributionOpenAmount
						invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
						invoked.OriginalCurrency					= OriginalCurrency
						invoked.Type								= "T"
						if (OnReceivableApplicationReviewCreditApplicationForm)
							if (OnReceivableApplicationReviewCreditApplicationTransactionList)
								invoked.Type							= "T"
							else
								invoked.Type							= "C"
						invoked.ReceivableInvoiceType				= TransType
						invoked.Customer							= ReceivableCompanyDataGroup.Customer


		AddToFundAppliedAmount is an Instance Action 
			restricted
			Parameters
				PrmAmount is like InternationalAmount
			Action Rules
				FundAppliedAmount += PrmAmount


		RemoteGLTransactionDetailUpdate	is an Update Action
			restricted
			Entrance Rules
				TransientCurrencyTable				= DerivedCurrencyTable
			Action Rules
				LocalGeneralLedgerSystemCode = "AR"

				TransientFinanceCodeBlock	= GeneralLedgerAccount

				if (IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit = true

				include UpdateGLTransactionDetail


		ReleaseGLTransactionDetailUpdate	is an Update Action
			restricted
			Entrance Rules
				TransientCurrencyTable = DerivedCurrencyTable
				if (IsHSNSACCodeEnabled)
					TransientHSNSACCode = true
			Action Rules





				LocalGeneralLedgerSystemCode = "AR"

				TransientFinanceCodeBlock	= GeneralLedgerAccount

				if (AuditSummaryIndicator.GainLossOnCurrencyConv
				or  IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit = true

				if  (FlipAmounts)
					TransactionTaxableAmount									*= -1
					BaseTaxableAmount											*= -1

					DistributionAmount.CurrencyAmount							*= -1
					DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
					DistributionAmount.ProjectAmount.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount1.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount2.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount3.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount4.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount5.EnteredCurrencyAmount		*= -1
					DistributionAmount.KeepRateAndAmount						= true




			Exit Rules

				if  (FlipAmounts)
					invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
						invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
						invoked.ReportCurrencyAmount										= DistributionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true

				else
					invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= DistributionAmount.AlternateAmount3.EnteredCurrencyAmount


				include ReleaseGLTransactionDetail


		CreateFromBatch	is a Create Action
			restricted
			Parameters
				PrmToAccountingEntity			is like ToAccountingEntity
				PrmAccountingUnit				is like AccountingUnit
				PrmAccount					is like GeneralLedgerChartAccount
				PrmProject					is like Project

			Entrance Rules
				LocalGeneralLedgerSystemCode = "AR"	
			Action Rules

				invoke Create this instance
					invoked.GeneralLedgerAccount.ToAccountingEntity				= PrmToAccountingEntity
					invoked.GeneralLedgerAccount.AccountingUnit					= PrmAccountingUnit
					invoked.GeneralLedgerAccount.GeneralLedgerChartAccount		= PrmAccount
					invoked.GeneralLedgerAccount.Project						= PrmProject


		CreateConversionDistribution	is a Create Action
			restricted
			Entrance Rules
				include CreateRules

			Exit Rules
				include CreateHistoricalGLTransactionDetail

		CreateHistoricalOnly	is a Create Action
			restricted
			Entrance Rules
				BypassStructureRelationEdit	= true 
				include CreateRules

		FastUpdate	is an Update Action  
			bypass field rules
			restricted
			Action Rules
				if  (GeneralLedgerDate != old GeneralLedgerDate
				or   GeneralLedgerAccount != old GeneralLedgerAccount
				or   DistributionAmount.CurrencyAmount != old DistributionAmount.CurrencyAmount)
					DoGLUpdate = true

			Exit Rules
				if  (DoGLUpdate)
					include UpdateGLTransactionDetail
				if (invoking action = "RTMPayment.ReleaseUnreleasedRtm"
				and Status.Released)		
					include ReleaseGLTransactionDetail


		RestrictedUpdate	is an Update Action
			restricted
			Action Rules
				LocalGeneralLedgerSystemCode = "AR"

				TransientFinanceCodeBlock	= GeneralLedgerAccount

				if (IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit  = true

				if  (FlipAmounts)
					TransactionTaxableAmount									*= -1
					BaseTaxableAmount											*= -1

					DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	*= -1
					DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
					DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
					DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
					DistributionAmount.ProjectAmount.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount1.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount2.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount3.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount4.EnteredCurrencyAmount		*= -1
					DistributionAmount.ReportAmount5.EnteredCurrencyAmount		*= -1
					DistributionAmount.KeepRateOnly								= true

			Exit Rules
				invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
					invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
					invoked.ReportCurrencyAmount										= DistributionAmount
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
					invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true


		NonArPaymentRelease	is an Instance Action
			restricted
			Action Rules
				if (IsHSNSACCodeEnabled)	
					TransientHSNSACCode = true	

				Status								= Status.Released


				if (Description not entered)
					Description = "Batch " + ReceivablePaymentHeaderRel.ReceivablePaymentHeader + " Payment"

				if (GlCompanyRel.DetailGLTransPerPayment.NoDetailAccrualInterfacing)
					DocumentNumber	= "5-" + ReceivablePaymentHeaderRel.ReceivablePaymentHeader.PaymentHeaderString
				else
					DocumentNumber	= "6-" + ReceivablePaymentHeaderRel.ReceivablePaymentHeader.PaymentHeaderString + "-" + ReceivablePaymentRel.ReceivablePayment.PaymentString

				if  (TaxCode entered)

					if (CallVertexByTransaction
					or  TaxEntityUsesOneSource)
						NextSentence = true
					else
						if  (TaxEntityUsesInforTax
						or  (TaxEntityUsesVertex
						and  VertexAllowProcessTaxHistory))
							if (TaxEntityUsesInforTax)
								initialize CalculateTax
								CalculateTax.TaxEntity			= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity 

								CalculateTax.TaxCode			= TaxCode
								CalculateTax.InvoiceDate		= TransactionDate
								CalculateTax.ShipmentDate		= TransactionDate
								CalculateTax.PaymentDate		= TransactionDate
								CalculateTax.GeneralLedgerDate	= GeneralLedgerDate
								CalculateTax.Function			= "I"
								CalculateTax.System				= "AR"
								CalculateTax.BypassMemberEdit	= true
								include LoadVertexAdditionalFields
								LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
								if (!CalculateTax.DoTaxCalculation)
									constraint (CalculateTax.OutputErrorNumber not entered)
										"<CalculateTax.OutputErrorMessage>"

								TransientTaxRate				= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
								TransientAccrualFlag			= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag

							include ProcessTaxHistoryRuleBlock

					TransactionTaxableAmount = TransactionTaxableAmount * -1	
					BaseTaxableAmount		 = BaseTaxableAmount * -1





		UpdateTaxTransaction	is an Instance Action
			restricted

			Action Rules
				if (TaxCode entered
				or  TransactionTaxableAmount entered)

					if  (!IsTaxPointPaymentDate
					and (!TaxEntityUsesVertex
					or    VertexAllowProcessTaxHistory))
						if (!TaxEntityUsesOneSource
						and !TaxEntityUsesVertex)
							initialize CalculateTax
							CalculateTax.TaxEntity			= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
							CalculateTax.TaxCode			= TaxCode
							CalculateTax.InvoiceDate		= TransactionDate
							CalculateTax.ShipmentDate		= TransactionDate
							CalculateTax.PaymentDate		= TransactionDate
							CalculateTax.GeneralLedgerDate	= GeneralLedgerDate
							CalculateTax.InvoiceAmount		= DistributionAmount.CurrencyAmount
							CalculateTax.TaxableAmount		= TransactionTaxableAmount
							CalculateTax.Function			= "I"
							CalculateTax.BypassMemberEdit	= true 	
							include LoadVertexAdditionalFields
							LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
							LocalTaxRate					= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
							if (!CalculateTax.DoTaxCalculation)
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"
						include ProcessTaxHistoryRuleBlock


		RoundingUpdate	is an Instance Action
			restricted
			Parameters
				RoundAmount	 is a RoundedCurrencyAmountGroup

			Action Rules
				if (IsZeroAmountTaxDistribution)
					BypassUnitAndAmountEdit = true
				if (RoundAmount entered)
					DistributionAmount.KeepRateAndAmount							 = true
					DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= RoundAmount.FunctionalAmount
					DistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= RoundAmount.AlternateAmount
					DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= RoundAmount.AlternateAmount2
					DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= RoundAmount.AlternateAmount3
					if (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
						DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= RoundAmount.ToFunctionalAmount
					if (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
						DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	-= RoundAmount.ToAlternateAmount
					if (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
						DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	-= RoundAmount.ToAlternateAmount2
					if (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
						DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	-= RoundAmount.ToAlternateAmount3
					DistributionAmount.ReportAmount1.EnteredCurrencyAmount			-= RoundAmount.ReportAmount1
					DistributionAmount.ReportAmount2.EnteredCurrencyAmount			-= RoundAmount.ReportAmount2
					DistributionAmount.ReportAmount3.EnteredCurrencyAmount			-= RoundAmount.ReportAmount3
					DistributionAmount.ReportAmount4.EnteredCurrencyAmount			-= RoundAmount.ReportAmount4
					DistributionAmount.ReportAmount5.EnteredCurrencyAmount			-= RoundAmount.ReportAmount5


			Exit Rules
				if (GLTransactionDetailRel.Status.Unreleased)
					invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
						invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
						invoked.ReportCurrencyAmount										= DistributionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true
				else
				if (GLTransactionDetailRel.Status.Released)
					invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel
						invoked.TransactionAmount											= DistributionAmount.CurrencyAmount
						invoked.ReportCurrencyAmount										= DistributionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= DistributionAmount.AlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= DistributionAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= DistributionAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate
						invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true


		Delete	is a Delete Action
			valid when (Status.Unreleased)
			Entrance Rules
				if (CallVertexByTransaction
				or  TaxEntityUsesOneSource)
					include TaxProcessingDeleteRules
			Action Rules
				if (GLTransactionDetailRel exist)
					if (GLTransactionDetailRel.Status.Unreleased)
						invoke Unreleased.Delete GLTransactionDetailRel
					else
						invoke Released.Delete GLTransactionDetailRel

				if  (Origin.Payment
				and  ReceivablePaymentRel.TypeOfPayment.NonArPayment)
					decrement ReceivablePaymentRel.BalancingDistributionAmountCompanyCurrency by old DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				if (TaxCode entered
				and !BypassCreateTaxDistribution)
					invoke FastUpdate ReceivableInvoiceRel


		Purge	is a Purge Action
			restricted
			valid when (Status.Posted)


			Entrance Rules
				invoke PurgeValidSubLedgerTrx GLTransactionDetailRel


		RemoveLinkedTaxDistributions is an Instance Action
			restricted
			Action Rules
				for each TaxOriginCrossReferenceGroupExceptSelfRel
					invoke FastUpdate each
						invoked.AllowLinkedTaxDeletion = true
					invoke Delete each


		JournalizeDistributionsForBatch	is an Instance Action 
			restricted
			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmReceivableCompany	is a ReceivableCompany
				PrmPostThruDate			is Date
			Action Rules
				invoke JournalizeDistributions ReceivableGLDistribution
					invoked.PrmEnterpriseGroup	 = PrmEnterpriseGroup
					invoked.PrmReceivableCompany = PrmReceivableCompany
					invoked.PrmPostThruDate		 = PrmPostThruDate




		JournalizeDistributions	is a Set Action

			completion message is "ReceivablesInvoiceDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>"
			run in foreground	

			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReceivableCompany	is a ReceivableCompany
					default label is "ReceivableCompany"
				PrmPostThruDate			is Date
					default label is "ThroughPostDate"
			Parameter Rules


				PrmReceivableCompany
					required
				PrmPostThruDate
					required

			Local Fields

				LocalSystemCode				is a GeneralLedgerSystemCode
					context of PrmEnterpriseGroup
				MyJournalizeGroup			is like JournalizeGroup


			Instance Selection
				where (Status.Released
				and	ReceivableCompanyDataGroup.TransactionCompany = PrmReceivableCompany
				and	GeneralLedgerDate		<= PrmPostThruDate)

			Sort Order
				Status
				ReceivableCompanyDataGroup.TransactionCompany
				ReceivableCompanyDataGroup.ReceivableProcessLevel
				GeneralLedgerDate

			Action Rules
				Set Rules
					Entrance Rules




						LocalSystemCode = "AR"
						increment LocalSystemCode.LastJournalizeGroup
						MyJournalizeGroup = LocalSystemCode.DerivedJournalizeGroup


					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmEnterpriseGroup in background
							invoked.PrmJournalizeGroup		= MyJournalizeGroup

				Instance Rules




					Status = Status.Posted

					if(Status.Posted
					and AccumulationType.Summary)
						invoke TriggerReceivableInvoice ReceivableInvoiceRel






					if(IsNonArPayment and (!IsDebitTransferTriggered))
						invoke TriggerDebitTransferForNonArPayment ReceivablePaymentHeaderRel

					if (GLTransactionDetailRel exist)
						invoke UpdateJournalizeGroup GLTransactionDetailRel
							invoked.PrmJournalizeGroup		= MyJournalizeGroup


		NewJournalizeDistributions	is a Set Action

			default label is "JournalizeDistributions"
			completion message is "ReceivablesInvoiceDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>"


			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReceivableCompany	is a ReceivableCompany
					default label is "ReceivableCompany"
				GeneralLedgerCompanyGroup										
					default label is "CompanyGroup"
				PrmPostThruDate			is Date
					default label is "ThroughPostDate"						
				PrmDescription			is a Description
					default label is "Description"
			Parameter Rules
				PrmEnterpriseGroup
					constraint (PrmReceivableCompany entered or GeneralLedgerCompanyGroup entered)
						"CompanyOr_\Company_\GroupIsRequired"
					if (PrmReceivableCompany entered)
						PrmEnterpriseGroup 					= PrmReceivableCompany.FinanceEnterpriseGroup
					else
					if (GeneralLedgerCompanyGroup entered)
						PrmEnterpriseGroup 					= GeneralLedgerCompanyGroup.first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup
					if (PrmEnterpriseGroup not entered)
						PrmEnterpriseGroup 					= actor.context.FinanceEnterpriseGroup
					constraint (PrmEnterpriseGroup entered)
						"Finance_\Enterprise_\GroupIsRequired"
				PrmReceivableCompany
					if (GeneralLedgerCompanyGroup not entered)		
						required
							"CompanyOr_\Company_\GroupIsRequired"
				GeneralLedgerCompanyGroup
					if (PrmReceivableCompany entered)
						cannot be entered
							"CannotEnter_\Company_\GroupIf_\CompanyEntered"			
				PrmPostThruDate
					required
				PrmDescription
					initial value is ReceivablesDistributionPostingMessage

			Local Fields
				LocalSystemCode				is a GeneralLedgerSystemCode
					context of PrmEnterpriseGroup
				MyJournalizeGroup			is like JournalizeGroup
				CompletionMessage			is Alpha 150
				RecordCount					is Numeric 10

			Instance Selection
				where (Status.Released
				and   ((ReceivableCompanyDataGroup.TransactionCompany = PrmReceivableCompany)
				or	 (GeneralLedgerCompanyGroup	entered
				and	 GeneralLedgerCompanyGroup = GeneralLedgerCompanyGroup
				and	 GLCompanyGroupMemberRelExists))
				and	GeneralLedgerDate		<= PrmPostThruDate)

			Sort Order
				Status
				ReceivableCompanyDataGroup.TransactionCompany
				ReceivableCompanyDataGroup.ReceivableProcessLevel
				GeneralLedgerDate




			Action Rules
				Empty Set Rules
					CompletionMessage = "ReceivablesInvoiceDistributionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
				Set Rules
					Entrance Rules
						LocalSystemCode = "AR"
						increment LocalSystemCode.LastJournalizeGroup
						MyJournalizeGroup = LocalSystemCode.DerivedJournalizeGroup

						LocalEnterpriseGroup	= PrmEnterpriseGroup	
						LocalJournalizeGroup	= MyJournalizeGroup		

					Exit Rules
						invoke Create JournalizeGroupResult
							invoked.FinanceEnterpriseGroup		  = PrmEnterpriseGroup
							invoked.JournalizeGroupResult		  = MyJournalizeGroup
							invoked.RunTime						  = current timestamp
							invoked.Status						  = 2
							invoked.Description					  = PrmDescription

						LocalEnterpriseGroup	= PrmEnterpriseGroup	
						LocalJournalizeGroup	= MyJournalizeGroup		

						for each distinct FEGAndEntity in GLTransactionDetailForRunGroupRel
							invoke InitiateJournalize each.AccountingEntity
								invoked.PrmJournalizeGroup			= MyJournalizeGroup
								invoked.PrmJournalizeGroupDescription = PrmDescription
								invoked.PrmInterfaceInDetail		  = true

						CompletionMessage = "ReceivablesInvoiceDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"

				Instance Rules
					BypassProjectDateEdit = true

					increment RecordCount

					Status = Status.Posted
					if  (AutoReverseUnrealizedGainLoss.Currency)
						initialize AutoReverseUnrealizedGainLoss
					if(Status.Posted and AccumulationType.Summary and (TransType.DebitMemo or TransType.Invoice or TransType.CreditMemo))
						invoke TriggerReceivableInvoice ReceivableInvoiceRel





					if(IsNonArPayment and (!IsDebitTransferTriggered))
						invoke TriggerDebitTransferForNonArPayment ReceivablePaymentHeaderRel

					if  (AuditSummaryIndicator entered
					and  !AuditSummaryIndicator.Invoice
					and  !AuditSummaryIndicator.Memos
					and  !AuditSummaryIndicator.Cash
					and  !AuditSummaryIndicator.CreditsApplied)
						LocalCompany						= ReceivableCompanyGroup.GlCompany
						LocalProcessLevel					= ReceivableCompanyDataGroup.ReceivableProcessLevel
						LocalReceivableTransactionSummary	= AuditSummaryIndicator

						if (!LocalTransactionSummaryRel exists)
							invoke Create LocalTransactionSummaryRel

						invoke AddAmount LocalTransactionSummaryRel
							if  (AuditSummaryIndicator.GainLossOnCurrencyConv)
								invoked.Amount				= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							else
								invoked.Amount				= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

						if  (AuditSummaryIndicator.Chargebacks)
							LocalReceivableTransactionSummary	= "02"	
							if (!LocalTransactionSummaryRel exists)
								invoke Create LocalTransactionSummaryRel

							invoke AddAmount LocalTransactionSummaryRel
								invoked.Amount			 =	DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1

					if (GLTransactionDetailRel exist)
						invoke UpdateJournalizeGroup GLTransactionDetailRel
							invoked.PrmJournalizeGroup	 =	MyJournalizeGroup




		DeleteDistributionsForInvoice	is a Set Action
			restricted
			Parameters
				PrmReceivableCompany	is a ReceivableCompany
				PrmReceivableInvoice	is an Invoice
				PrmCustomer				is a Customer

			Parameter Rules
				PrmReceivableCompany
					required
				PrmReceivableInvoice
					required

			Instance Selection
				where (ReceivableCompanyDataGroup.TransactionCompany	 =	PrmReceivableCompany
				and	Invoice												 =	PrmReceivableInvoice
				and	ReceivableCompanyDataGroup.Customer					 =	PrmCustomer)

			Action Rules
				Instance Rules
					invoke Delete






















		RealizedProrateDistributions is a Set Action	
			restricted
			Parameters
				PrmReceivableCompany		is a ReceivableCompany
				PrmBatchNumber				is a BatchNumber
				PrmReceivableInvoice		is an Invoice
				PrmTransType				is a TransType
				PrmCustomer					is a Customer
				PrmReceivableApplication	is a ReceivableApplication
				PrmCreateDate				is Date
				PrmWsProgramSequence		is like ProgramSequence
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmApplicationCloseResult	is an ApplicationCloseResult
					context of PrmFinanceEnterpriseGroup
				PrmProrateLevel				is AlphaUpper size 4
					States
						RNA			value is "RNA"

						CreditRNA	value is "CRNA"


			Set Is  
				PrmReceivableCompany		
				PrmBatchNumber				
				PrmTransType				
				PrmReceivableInvoice		
				PrmFinanceEnterpriseGroup	
				PrmReceivableApplication	
				PrmApplicationCloseResult	
				PrmProrateLevel				
				ReceivableGLDistribution

			Local Fields
				WsProgramSequence					is like ProgramSequence
				LocalAppSource						is Alpha 2
				LocalDistributionPercentage			is Decimal size 31.15
				LocalCurrencyAmountTotal			is Decimal size 21.3
				LocalFunctionalAmountTotal			is Decimal size 21.3
				LocalAlternateAmountTotal			is Decimal size 21.3
				LocalAlternateAmount2Total			is Decimal size 21.3
				LocalAlternateAmount3Total			is Decimal size 21.3
				LocalToFunctionalAmountTotal		is Decimal size 21.3
				LocalToAlternateAmountTotal			is Decimal size 21.3
				LocalToAlternateAmount2Total		is Decimal size 21.3
				LocalToAlternateAmount3Total		is Decimal size 21.3
				LocalProjectAmountTotal				is Decimal size 21.3
				LocalReportAmount1Total				is Decimal size 21.3
				LocalReportAmount2Total				is Decimal size 21.3
				LocalReportAmount3Total				is Decimal size 21.3
				LocalReportAmount4Total				is Decimal size 21.3
				LocalReportAmount5Total				is Decimal size 21.3
				LocalProrateDistributionSequence	is Numeric size 6
				ProrateDistributionsRelCount		is Numeric size 6
				UseApplicationAmount				is Boolean
				UseCreditApplicationAmount			is Boolean
				LocalGLAccount						is a FinanceCodeBlockFull
				LocalNegative						is Boolean
				LocalFlipAmount						is Boolean
				NewGLDistribution					is a ReceivableGLDistribution view
				LocalProrateDescription				is like Description

				LocalSkipNegative					is Boolean

			Rule Blocks
				InitializeLocalProrateFields
					initialize LocalCurrencyAmountTotal
					initialize LocalFunctionalAmountTotal
					initialize LocalAlternateAmountTotal
					initialize LocalAlternateAmount2Total
					initialize LocalAlternateAmount3Total
					initialize LocalToFunctionalAmountTotal
					initialize LocalToAlternateAmountTotal
					initialize LocalToAlternateAmount2Total
					initialize LocalToAlternateAmount3Total
					initialize LocalProjectAmountTotal
					initialize LocalReportAmount1Total
					initialize LocalReportAmount2Total
					initialize LocalReportAmount3Total
					initialize LocalReportAmount4Total
					initialize LocalReportAmount5Total
					initialize LocalProrateDistributionSequence

				SetProrateTotalAmount
					if (UseApplicationAmount)
						LocalCurrencyAmountTotal		= PrmReceivableApplication.ApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount
						LocalFunctionalAmountTotal		= PrmReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		= PrmReceivableApplication.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		= PrmReceivableApplication.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		= PrmReceivableApplication.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	= PrmReceivableApplication.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			= PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount
					else
					if (UseCreditApplicationAmount)
						LocalCurrencyAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.CreditAdjustAmount
						LocalFunctionalAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount

				AdjustCumulativeDistributionAmount
					if (LocalFlipAmount = true)
						LocalCurrencyAmountTotal		+= NewGLDistribution.DistributionAmount.CurrencyAmount
						LocalFunctionalAmountTotal		+= NewGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		+= NewGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		+= NewGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		+= NewGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	+= NewGLDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		+= NewGLDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	+= NewGLDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	+= NewGLDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			+= NewGLDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			+= NewGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			+= NewGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			+= NewGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			+= NewGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			+= NewGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalCurrencyAmountTotal		-= NewGLDistribution.DistributionAmount.CurrencyAmount
						LocalFunctionalAmountTotal		-= NewGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		-= NewGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		-= NewGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		-= NewGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	-= NewGLDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		-= NewGLDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	-= NewGLDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	-= NewGLDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			-= NewGLDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			-= NewGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			-= NewGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			-= NewGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			-= NewGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			-= NewGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

			Instance Selection
				where (ReceivableCompanyDataGroup.TransactionCompany =	PrmReceivableCompany
				and BatchNumber							 = PrmBatchNumber
				and TransType							 = PrmTransType
				and Invoice								 = PrmReceivableInvoice
				and ReceivableCompanyDataGroup.Customer	 = PrmCustomer
				and AccumulationType.Detail
				and DistributionSource.AccountsReceivable
				and DistributionAmount.CurrencyAmount entered)

			Action Rules
				Set Rules
					Entrance Rules
						if (PrmReceivableApplication.ApplicationSource.ReversalOfApplications)
							LocalAppSource		= "RY"
						else
							LocalAppSource		= "RL"
						WsProgramSequence	= PrmWsProgramSequence
						initialize LocalDistributionPercentage
						include InitializeLocalProrateFields
						ProrateDistributionsRelCount = ReceivableInvoiceRel.ProrateDistributionsRelCount

						if (PrmProrateLevel = "RNA"
						or PrmProrateLevel = "CRNA")
							UseCreditApplicationAmount = true
							LocalProrateDescription	= PrmReceivableApplication.RealizedRNACashMsg + " " + current date






						include SetProrateTotalAmount

					Exit Rules

						if (PrmProrateLevel = "RNA"
						or PrmProrateLevel = "CRNA")
							invoke RealizedProrateDistributionsARCAndCARC ReceivableGLDistribution
								invoked.PrmReceivableCompany		= PrmReceivableCompany
								invoked.PrmBatchNumber				= PrmBatchNumber
								invoked.PrmReceivableInvoice		= PrmReceivableInvoice
								invoked.PrmTransType				= PrmTransType
								invoked.PrmCustomer					= PrmCustomer
								invoked.PrmReceivableApplication	= PrmReceivableApplication
								invoked.PrmCreateDate				= PrmCreateDate
								invoked.PrmWsProgramSequence		= WsProgramSequence
								invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
								if (PrmProrateLevel = "RNA")
									invoked.PrmProrateLevel				= "ARC"
								else
								if (PrmProrateLevel = "CRNA")
									invoked.PrmProrateLevel				= "CARC"








				Instance Rules
					LocalDistributionPercentage  = ((DistributionAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * -1)
					LocalProrateDistributionSequence += 1
					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					LocalGLAccount				 = GeneralLedgerAccount
					LocalPrmReceivableCompany	 = PrmReceivableCompany
					LocalSystemAccount			 = SystemAccount.RealizedGainAndLoss
					if (SystemAccountRel not exists)
						ReceivablesGainLossCalculation.PaymentCurrencyAmount	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount
						ReceivablesGainLossCalculation.InvoiceCurrencyAmount	= PrmReceivableApplication.ApplicationAmount
						if (PrmReceivableApplication.ApplicationSource.ReversalOfApplications)
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.CurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

						ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= LocalGLAccount
						if  (PrmReceivableApplication.PaymentAppliedToCreditMemo)
							ReceivablesGainLossCalculation.PaymentAppliedToCreditMemo = true

						LocalBoolean	 = ReceivablesGainLossCalculation.CalculateGainLoss
						LocalGLAccount	 = ReceivablesGainLossCalculation.GLAccountCodeBlock
					else
						ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= LocalGLAccount
						LocalBoolean 								= ReceivablesGainLossCalculation.SystemCodeBlockDefaults
						LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
						LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount

					LocalNegative					= true
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup							= PrmReceivableApplication.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence		= WsProgramSequence
						invoked.LastDistributionSequence						= 1
						invoked.CreateDate										= PrmCreateDate

						invoked.ReceivableCompanyDataGroup.TransactionCompany	= PrmReceivableApplication.Company
						invoked.GeneralLedgerAccount							= LocalGLAccount
						invoked.GeneralLedgerDate								= PrmReceivableApplication.GeneralLedgerDate
						invoked.TransactionDate									= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate  
						invoked.Origin											= LocalAppSource
						invoked.Status											= 2
						if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
							invoked.DistributionAmount.CurrencyAmount							= LocalCurrencyAmountTotal
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctionalAmountTotal
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateAmountTotal
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateAmount2Total
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateAmount3Total





							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1Total
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2Total
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3Total
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4Total
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5Total

						if (PrmProrateLevel = "RNA"
						or PrmProrateLevel = "CRNA")
							invoked.ReceivableCompanyGroup.GlCompany				= PrmReceivableApplication.Company
							invoked.DistributionAmount.ExchangeDate					= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate
							invoked.OriginalCurrency								= PrmReceivableApplication.ApplicationCurrency

							if (ProrateDistributionsRelCount != LocalProrateDistributionSequence)
								invoked.DistributionAmount.CurrencyAmount							= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.CreditAdjustAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount	+ PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								if (PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
								and PrmReceivableApplication.OverAppliedAdjustmentRel exists)
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								else
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= (PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= ((PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount) * LocalDistributionPercentage)

							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

							if (PrmProrateLevel = "RNA")


								if (PrmReceivableApplication.TransType.CustomerPayment)
									if (!LocalNegative)
										invoked.FlipAmounts								= true
										LocalFlipAmount									= true
								else
									if (LocalNegative)
										invoked.FlipAmounts								= true
										LocalFlipAmount									= true
										if (PrmReceivableApplication.TransType.CreditMemo			
										and !ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines)
											LocalFlipAmount								= false
											if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
												invoked.FlipAmounts						= false
										else
										if (ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines)		
											if (PrmReceivableApplication.TransType.CreditMemo)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts								= true
													LocalFlipAmount									= false
													if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
														invoked.FlipAmounts						= false
												else
													invoked.FlipAmounts								= false
													LocalFlipAmount									= false
											else
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												invoked.FlipAmounts								= false
												LocalFlipAmount									= true
												if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
													invoked.FlipAmounts						= true
							else
							if (PrmProrateLevel = "CRNA")
								if  (PrmReceivableApplication.TransType.CreditMemo
								or   PrmReceivableApplication.TransType.CustomerPayment)
									invoked.FlipAmounts									= true
									LocalFlipAmount										= true
									if (!LocalNegative)
										invoked.FlipAmounts								= false
										LocalFlipAmount									= false
								else
									if (LocalNegative)
										invoked.FlipAmounts								= true
										LocalFlipAmount									= true
										if (ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines		
										and ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
											invoked.FlipAmounts							= false
											LocalFlipAmount								= true
											if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
												invoked.FlipAmounts						= true

							initialize LocalSkipNegative
							if  (PrmReceivableApplication.Company != PrmReceivableApplication.CreditTransaction.CreditCompany
							and (PrmReceivableApplication.TransType.CreditMemo
							or   PrmReceivableApplication.TransType.CustomerPayment
							or ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines))
								LocalSkipNegative = true

							if  (PrmReceivableApplication.Company != PrmReceivableApplication.CreditTransaction.CreditCompany)
								invoked.ToCompanyBaseAmount							= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount  * LocalDistributionPercentage
								if (LocalNegative
								and !LocalSkipNegative)
									invoked.FlipAmounts								= true
									LocalFlipAmount									= true

























































						invoked.AuditSummaryIndicator							= "09"
						invoked.Description										= LocalProrateDescription
						invoked.TransType										= PrmReceivableApplication.TransType
						invoked.Invoice											= PrmReceivableApplication.Invoice
						invoked.BatchNumber										= PrmReceivableApplication.BatchNumber

						if  (PrmReceivableApplication.TransType.CustomerPayment)
							invoked.ReceivableCompanyDataGroup.Customer					= PrmReceivableApplication.ReceivablePaymentDebitRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= PrmReceivableApplication.ReceivablePaymentDebitRel.ReceivableProcessLevel
						else
							invoked.ReceivableCompanyDataGroup.Customer					= PrmReceivableApplication.ReceivableInvoiceDetailRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= PrmReceivableApplication.ReceivableInvoiceDetailRel.ReceivableProcessLevel

						invoked.AccumulationType								= "D"
						invoked.DocumentNumber									= "7-" + PrmReceivableApplication.DerivedDocumentNumberWithLeadingZeros
						invoked.ApplicationCloseResult							= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader	= PrmReceivableApplication.ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 
						invoked.ApplicationID									= PrmReceivableApplication.ApplicationID

					include AdjustCumulativeDistributionAmount
					initialize LocalNegative
					initialize LocalGLAccount

		ProrateForFundApplications is a Set Action
			restricted
			Parameters
				PrmReceivableCompany		is a ReceivableCompany
				PrmTransType				is a TransType
				PrmReceivableInvoice		is an Invoice
				PrmCustomer					is a Customer
				PrmReceivableApplication	is a ReceivableApplication
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmApplicationCloseResult	is an ApplicationCloseResult
					context of PrmFinanceEnterpriseGroup
				PrmProcessAllInSingleAction	is Boolean 

			Set Is  
				PrmFinanceEnterpriseGroup
				PrmApplicationCloseResult
				PrmReceivableCompany
				PrmTransType
				PrmReceivableInvoice
				PrmFinanceEnterpriseGroup
				PrmReceivableApplication


			Sort Order is ByApplicationCloseResult

			Local Fields
				LocalAdjustmentPercent	   is a Percent
				LocalCreditAdjustmentPercent is a Percent
				LocalNumberOfDistributions   is Numeric size 6
				LocalDistributionAmount	  is a FinanceCurrencyAmountGroup
				SumTotalDistributionAmount is a FinanceCurrencyAmountGroup
				LocalDistributionCount	   is Numeric size 6
				LocalSign 					is Numeric size 2
				OriginalDistributionAmount   is a FinanceCurrencyAmountGroup
				LocalApplicationID			 is Numeric size 12
				LocalCommitCounter			is Numeric 6
				LocalSameCurrency 			is Boolean
				LocalSkipProcessing			is Boolean

			Rule Blocks
				IncreaseSumTotalDistributionAmount
					SumTotalDistributionAmount.CurrencyAmount += LocalDistributionAmount.CurrencyAmount
					SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount += LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount += LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount += LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount += LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount += LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount += LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount += LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount += LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount += LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount += LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount += LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount += LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount += LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount += LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

				DecreaseSumTotalDistributionAmount
					SumTotalDistributionAmount.CurrencyAmount -= LocalDistributionAmount.CurrencyAmount
					SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount -= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount -= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount -= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount -= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount -= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount -= LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount -= LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount -= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount -= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount -= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount -= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount -= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount -= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
					SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount -= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

			Instance Selection
				where (FinanceEnterpriseGroup 							= PrmFinanceEnterpriseGroup
				and    ApplicationCloseResult 							= PrmApplicationCloseResult
				and   (PrmProcessAllInSingleAction 
				or    (ReceivableCompanyDataGroup.TransactionCompany 	= PrmReceivableCompany
				and    TransType							 			= PrmTransType
				and    Invoice								 			= PrmReceivableInvoice
				and    ReceivableCompanyDataGroup.Customer	 			= PrmCustomer))
				and   (AllocationType.AR
				or     AllocationType.Credit
				or     AllocationType.RNA
				or     AllocationType.Adjust))

			Action Rules
				Empty Set Rules
					if (PrmProcessAllInSingleAction)
						invoke UpdateStatusOnResult PrmApplicationCloseResult
				Set Rules
					Exit Rules
						if (PrmProcessAllInSingleAction)
							invoke UpdateStatusOnResult PrmApplicationCloseResult

				Instance Rules
					if (AuditSummaryIndicator.GainLossOnCurrencyConv
					or  not ReceivableInvoiceRel.AllowFundAccountingReallocations)
						LocalSkipProcessing = true
					else
						OriginalDistributionAmount = DistributionAmount
						LocalAdjustmentPercent = (DistributionAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)
						LocalCreditAdjustmentPercent = (DistributionAmount.CurrencyAmount / ReceivableApplicationFundRel.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)
						LocalNumberOfDistributions = instance count of ReceivableInvoiceRel.ProrateDistributionsRel
						LocalApplicationID	= ApplicationID
						LocalBatchNumber = BatchNumber			
						initialize LocalDistributionCount
						initialize SumTotalDistributionAmount
						initialize LocalSign
						if (TransType.Invoice or  TransType.DebitMemo)
							LocalSign = -1
						else
						if (TransType.CreditMemo)
							LocalSign = 1
						else
							if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
								LocalSign = 1
							else
								LocalSign = -1

						if (HasFundApplyDistributions) 
							LocalNumberOfDistributions = instance count of first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel
							if (AllocationType.AR)
								for each first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else
										LocalDistributionAmount.CurrencyAmount = each.DistributionAmount.CurrencyAmount * LocalSign
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalSign

										round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo)
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany 		= each.ReceivableApplication.Company
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution 	= each.OriginalReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock 			= ReceivableInvoiceRel.ReceivableGeneralLedgerCodeRel.DistributionAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = ARFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationCloseResult = ApplicationCloseResult
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedAR
											invoked.BypassInvoiceCommonEdits = true
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail 
								invoke Delete

							if (AllocationType.Credit)
								for each ReceivableApplicationFundRel
									LocalNumberOfDistributions = instance count of first ReceivableApplicationFundRel.FundApplyCreditDistributionRel

									if ((each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo
									and !ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
									or (!each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo
									and ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo))
										LocalSign = -1 * LocalSign

									for each each.FundApplyCreditDistributionRel
										initialize LocalDistributionAmount
										LocalDistributionCount += 1

										if (LocalDistributionCount = LocalNumberOfDistributions)
											LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
											LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
										else
											LocalDistributionAmount.CurrencyAmount = each.DistributionAmount.CurrencyAmount * LocalSign
											LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalSign
											LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalSign

											round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

										if (LocalDistributionAmount.CurrencyAmount != 0)
											if (each.CreditReceivableGLDistributionRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

											initialize LocalCalculateReceivableFinanceStructure
											LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.CreditReceivableGLDistributionRel.ReceivableCompanyDataGroup.TransactionCompany
											LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.CreditReceivableGLDistributionRel.ReceivableGLDistribution
											if (ReceivableInvoiceRel.System = "AR"
											or  ReceivableInvoiceRel.System = "PS"
											or  ReceivableInvoiceRel.System = "IB") 
												LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
											if (ReceivableInvoiceRel.System = "BL")
												LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "B"
											LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = each.CreditReceivableGLDistributionRel.ReceivableInvoiceRel.ReceivableGeneralLedgerCodeRel.DistributionAccount
											LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

											increment LocalCommitCounter
											invoke CreateFromApplicationClose ReceivableGLDistribution
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
												invoked.ProgramSequence = ProgramSequence
												invoked.CreateDate = CreateDate
												invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
												invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
												invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
												invoked.GeneralLedgerDate = GeneralLedgerDate
												invoked.TransactionDate = TransactionDate
												invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
												invoked.Origin = Origin
												invoked.Status = 2
												invoked.OriginalCurrency = OriginalCurrency
												invoked.DistributionAmount = LocalDistributionAmount
												if (each.CreditReceivableGLDistributionRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
												else
													invoked.FlipAmounts = true
												invoked.Description = CashFundMsg
												invoked.TransType = TransType
												invoked.Invoice = Invoice
												invoked.BatchNumber = BatchNumber
												invoked.DocumentNumber = DocumentNumber
												invoked.AuditSummaryIndicator = AuditSummaryIndicator
												invoked.AccumulationType = AccumulationType
												invoked.ApplicationCloseResult = ApplicationCloseResult
												invoked.ApplicationID = LocalApplicationID
												invoked.AllocationType = AllocationType.CompletedCredit
												invoked.BypassInvoiceCommonEdits = true
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail  
								invoke Delete

							if (AllocationType.RNA)

								if (Status.Unreleased) 
									Status = Status.Released
									include ReleaseGLTransactionDetail

								AllocationType = AllocationType.CompletedRNA

								increment LocalCommitCounter
								invoke CreateFromApplicationClose ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
									invoked.ProgramSequence = ProgramSequence
									invoked.CreateDate = CreateDate
									invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
									invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
									invoked.GeneralLedgerAccount = CompanyCashCodeFundRel.CashAccount
									invoked.TransactionDate = TransactionDate
									invoked.GeneralLedgerDate = GeneralLedgerDate
									invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
									invoked.Origin = Origin
									invoked.Status = 2
									invoked.OriginalCurrency = OriginalCurrency
									invoked.DistributionAmount = DistributionAmount
									invoked.FlipAmounts = true
									invoked.Description = CashFundMsg
									invoked.TransType = TransType
									invoked.Invoice = Invoice
									invoked.BatchNumber = BatchNumber
									invoked.DocumentNumber = DocumentNumber
									invoked.AuditSummaryIndicator = AuditSummaryIndicator
									invoked.AccumulationType = AccumulationType
									invoked.ApplicationCloseResult = ApplicationCloseResult
									invoked.ApplicationID = LocalApplicationID
									invoked.AllocationType = AllocationType.CompletedRNA
									invoked.BypassInvoiceCommonEdits = true
									invoked.TransientUpdateCashCodeFund = true





								initialize LocalDistributionCount
								for each first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else

										LocalDistributionAmount.CurrencyAmount = each.DistributionAmount.CurrencyAmount * LocalSign * -1
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalSign * -1
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalSign * -1































































										round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo) 		
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableApplication.Company
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.OriginalReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = CompanyCashCodeFundRel.CashAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											invoked.TransType = TransType
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = CashFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedRNA
											invoked.ApplicationCloseResult = ApplicationCloseResult
											invoked.BypassInvoiceCommonEdits = true
											invoked.TransientUpdateCashCodeFund = true



















							if (AllocationType.Adjust)

								if (!AuditSummaryIndicator.WriteOffs
								and !AuditSummaryIndicator.MarkedAsPaid)
									LocalSign *= -1

								for each first ReceivableApplicationFundRel.FundApplyTransactionDistributionRel
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)

										if (!AuditSummaryIndicator.WriteOffs
										and !AuditSummaryIndicator.MarkedAsPaid)
											LocalSign *= -1

										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else
										LocalDistributionAmount.CurrencyAmount = each.DistributionAmount.CurrencyAmount * LocalSign
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalSign
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalSign

										round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
										round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo)
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableApplication.Company
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.OriginalReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = GeneralLedgerAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = AdjustmentFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedAdjust
											invoked.ApplicationCloseResult = ApplicationCloseResult
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail  
								invoke Delete
						else 
							if (AllocationType.AR)
								for each ReceivableInvoiceRel.ProrateDistributionsRel 
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else
										LocalDistributionAmount.CurrencyAmount = (each.DistributionAmount.CurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalAdjustmentPercent)

										if (LocalAdjustmentPercent != 1)
											round LocalDistributionAmount.CurrencyAmount to nearest 0.01
											round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo)
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany 		= each.ReceivableCompanyDataGroup.TransactionCompany
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution 	= each.ReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock 			= ReceivableInvoiceRel.ReceivableGeneralLedgerCodeRel.DistributionAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = ARFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationCloseResult = ApplicationCloseResult
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedAR
											invoked.BypassInvoiceCommonEdits = true
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail 
								invoke Delete

							if (AllocationType.Credit)
								for each ReceivableApplicationFundRel
									LocalNumberOfDistributions = instance count of each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel

									if ((each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo
									and !ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
									or (!each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo
									and ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo))
										LocalSign = -1 * LocalSign

									for each each.ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
										initialize LocalDistributionAmount
										LocalDistributionCount += 1

										if (LocalDistributionCount = LocalNumberOfDistributions)
											LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
											LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
											LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
										else
											LocalDistributionAmount.CurrencyAmount = (each.DistributionAmount.CurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)
											LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalCreditAdjustmentPercent)

											if (LocalCreditAdjustmentPercent != 1)
												round LocalDistributionAmount.CurrencyAmount to nearest 0.01
												round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
												round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

										if (LocalDistributionAmount.CurrencyAmount != 0)
											if (each.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

											initialize LocalCalculateReceivableFinanceStructure
											LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
											LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
											if (ReceivableInvoiceRel.System = "AR"
											or  ReceivableInvoiceRel.System = "PS"
											or  ReceivableInvoiceRel.System = "IB") 
												LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
											if (ReceivableInvoiceRel.System = "BL")
												LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "B"
											LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = each.ReceivableInvoiceRel.ReceivableGeneralLedgerCodeRel.DistributionAccount
											LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

											increment LocalCommitCounter
											invoke CreateFromApplicationClose ReceivableGLDistribution
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
												invoked.ProgramSequence = ProgramSequence
												invoked.CreateDate = CreateDate
												invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
												invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
												invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
												invoked.GeneralLedgerDate = GeneralLedgerDate
												invoked.TransactionDate = TransactionDate
												invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
												invoked.Origin = Origin
												invoked.Status = 2
												invoked.OriginalCurrency = OriginalCurrency
												invoked.DistributionAmount = LocalDistributionAmount
												if (each.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
												else
													invoked.FlipAmounts = true
												invoked.Description = CashFundMsg
												invoked.TransType = TransType
												invoked.Invoice = Invoice
												invoked.BatchNumber = BatchNumber
												invoked.DocumentNumber = DocumentNumber
												invoked.AuditSummaryIndicator = AuditSummaryIndicator
												invoked.AccumulationType = AccumulationType
												invoked.ApplicationCloseResult = ApplicationCloseResult
												invoked.ApplicationID = LocalApplicationID
												invoked.AllocationType = AllocationType.CompletedCredit
												invoked.BypassInvoiceCommonEdits = true
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail  
								invoke Delete

							if (AllocationType.RNA)

								if (Status.Unreleased) 
									Status = Status.Released
									include ReleaseGLTransactionDetail

								AllocationType = AllocationType.CompletedRNA

								increment LocalCommitCounter
								invoke CreateFromApplicationClose ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
									invoked.ProgramSequence = ProgramSequence
									invoked.CreateDate = CreateDate
									invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
									invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
									invoked.GeneralLedgerAccount = CompanyCashCodeFundRel.CashAccount
									invoked.TransactionDate = TransactionDate
									invoked.GeneralLedgerDate = GeneralLedgerDate
									invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
									invoked.Origin = Origin
									invoked.Status = 2
									invoked.OriginalCurrency = OriginalCurrency
									invoked.DistributionAmount = DistributionAmount
									invoked.FlipAmounts = true
									invoked.Description = CashFundMsg
									invoked.TransType = TransType
									invoked.Invoice = Invoice
									invoked.BatchNumber = BatchNumber
									invoked.DocumentNumber = DocumentNumber
									invoked.AuditSummaryIndicator = AuditSummaryIndicator
									invoked.AccumulationType = AccumulationType
									invoked.ApplicationCloseResult = ApplicationCloseResult
									invoked.ApplicationID = LocalApplicationID
									invoked.AllocationType = AllocationType.CompletedRNA
									invoked.BypassInvoiceCommonEdits = true
									invoked.TransientUpdateCashCodeFund = true

								initialize LocalDistributionCount
								for each ReceivableInvoiceRel.ProrateDistributionsRel 
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else
										LocalDistributionAmount.CurrencyAmount = (each.DistributionAmount.CurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalAdjustmentPercent)
										if (LocalAdjustmentPercent != 1)
											round LocalDistributionAmount.CurrencyAmount to nearest 0.01
											round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo) 		
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = CompanyCashCodeFundRel.CashAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											invoked.TransType = TransType
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = CashFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedRNA
											invoked.ApplicationCloseResult = ApplicationCloseResult
											invoked.BypassInvoiceCommonEdits = true
											invoked.TransientUpdateCashCodeFund = true



















							if (AllocationType.Adjust)
								for each ReceivableInvoiceRel.ProrateDistributionsRel 
									initialize LocalDistributionAmount
									LocalDistributionCount += 1

									if (LocalDistributionCount = LocalNumberOfDistributions)
										LocalDistributionAmount.CurrencyAmount = LocalSign * (DistributionAmount.CurrencyAmount + SumTotalDistributionAmount.CurrencyAmount)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ProjectAmount.EnteredCurrencyAmount + SumTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount1.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount2.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount3.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount4.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = LocalSign * (DistributionAmount.ReportAmount5.EnteredCurrencyAmount + SumTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount)
									else
										LocalDistributionAmount.CurrencyAmount = (each.DistributionAmount.CurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount = (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalAdjustmentPercent)
										LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalAdjustmentPercent)

										if (LocalAdjustmentPercent != 1)
											round LocalDistributionAmount.CurrencyAmount to nearest 0.01
											round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest 0.01
											round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest 0.01

									if (LocalDistributionAmount.CurrencyAmount != 0)
										if (TransType.Invoice or  TransType.DebitMemo)
											include IncreaseSumTotalDistributionAmount
										if (TransType.CreditMemo)
											include DecreaseSumTotalDistributionAmount
										if (TransType.MixedSignLines)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												include DecreaseSumTotalDistributionAmount
											else
												include IncreaseSumTotalDistributionAmount

										initialize LocalCalculateReceivableFinanceStructure
										LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
										LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
										if (ReceivableInvoiceRel.System = "AR"
										or  ReceivableInvoiceRel.System = "PS"
										or  ReceivableInvoiceRel.System = "IB") 
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
										if (ReceivableInvoiceRel.System = "BL")
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "B"
										LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = GeneralLedgerAccount
										LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

										increment LocalCommitCounter
										invoke CreateFromApplicationClose ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.ProgramSequence = ProgramSequence
											invoked.CreateDate = CreateDate
											invoked.ReceivableCompanyGroup.GlCompany = ReceivableCompanyGroup.GlCompany
											invoked.ReceivableCompanyDataGroup.TransactionCompany = ReceivableCompanyDataGroup.TransactionCompany
											invoked.GeneralLedgerAccount = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											invoked.GeneralLedgerDate = GeneralLedgerDate
											invoked.TransactionDate = TransactionDate
											invoked.ReceivableCompanyDataGroup.Customer = ReceivableCompanyDataGroup.Customer
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableCompanyDataGroup.ReceivableProcessLevel
											invoked.Origin = Origin
											invoked.Status = 2
											invoked.OriginalCurrency = OriginalCurrency
											invoked.DistributionAmount = LocalDistributionAmount
											if (TransType.Invoice or  TransType.DebitMemo)
												invoked.FlipAmounts = true
											if (TransType.CreditMemo)
												invoked.FlipAmounts = false
											if (TransType.MixedSignLines)
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.Invoice or
												ReceivableInvoiceRel.AlternateReceivableInvoiceType.DebitMemo)
													invoked.FlipAmounts = true
												if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.FlipAmounts = false
											invoked.Description = AdjustmentFundMsg
											invoked.TransType = TransType
											invoked.Invoice = Invoice
											invoked.BatchNumber = BatchNumber
											invoked.DocumentNumber = DocumentNumber
											invoked.AuditSummaryIndicator = AuditSummaryIndicator
											invoked.AccumulationType = AccumulationType
											invoked.ApplicationID = LocalApplicationID
											invoked.AllocationType = AllocationType.CompletedAdjust
											invoked.ApplicationCloseResult = ApplicationCloseResult
								invoke Delete GLTransactionDetailRel.ICBSettlementGLTransactionDetail  
								invoke Delete

						if (LocalCommitCounter > 50) 
							commit transaction 
							initialize LocalCommitCounter 


		RealizedProrateDistributionsARCAndCARC is a Set Action	
			restricted
			Parameters
				PrmReceivableCompany		is a ReceivableCompany
				PrmBatchNumber				is a BatchNumber
				PrmReceivableInvoice		is an Invoice
				PrmTransType				is a TransType
				PrmCustomer					is a Customer
				PrmReceivableApplication	is a ReceivableApplication
				PrmCreateDate				is Date
				PrmWsProgramSequence		is like ProgramSequence
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmApplicationCloseResult	is an ApplicationCloseResult
					context of PrmFinanceEnterpriseGroup
				PrmProrateLevel				is AlphaUpper size 4
					States

						ARC			value is "ARC"

						CreditARC	value is "CARC"

			Set Is  
				PrmReceivableCompany
				PrmBatchNumber
				PrmTransType
				PrmReceivableInvoice
				PrmFinanceEnterpriseGroup
				PrmReceivableApplication
				PrmApplicationCloseResult
				PrmProrateLevel
				ReceivableGLDistribution


			Local Fields
				WsProgramSequence					is like ProgramSequence
				LocalAppSource						is Alpha 2
				LocalDistributionPercentage			is Decimal size 31.15
				LocalCurrencyAmountTotal			is Decimal size 21.3
				LocalFunctionalAmountTotal			is Decimal size 21.3
				LocalAlternateAmountTotal			is Decimal size 21.3
				LocalAlternateAmount2Total			is Decimal size 21.3
				LocalAlternateAmount3Total			is Decimal size 21.3
				LocalToFunctionalAmountTotal		is Decimal size 21.3
				LocalToAlternateAmountTotal			is Decimal size 21.3
				LocalToAlternateAmount2Total		is Decimal size 21.3
				LocalToAlternateAmount3Total		is Decimal size 21.3
				LocalProjectAmountTotal				is Decimal size 21.3
				LocalReportAmount1Total				is Decimal size 21.3
				LocalReportAmount2Total				is Decimal size 21.3
				LocalReportAmount3Total				is Decimal size 21.3
				LocalReportAmount4Total				is Decimal size 21.3
				LocalReportAmount5Total				is Decimal size 21.3
				LocalProrateDistributionSequence	is Numeric size 6
				ProrateDistributionsRelCount		is Numeric size 6
				UseApplicationAmount				is Boolean
				UseCreditApplicationAmount			is Boolean
				LocalGLAccount 						is a FinanceCodeBlockFull
				LocalNegative						is Boolean
				LocalFlipAmount						is Boolean
				NewGLDistribution					is a ReceivableGLDistribution view
				LocalProrateDescription				is like Description


			Rule Blocks
				InitializeLocalProrateFields
					initialize LocalCurrencyAmountTotal
					initialize LocalFunctionalAmountTotal
					initialize LocalAlternateAmountTotal
					initialize LocalAlternateAmount2Total
					initialize LocalAlternateAmount3Total
					initialize LocalToFunctionalAmountTotal
					initialize LocalToAlternateAmountTotal
					initialize LocalToAlternateAmount2Total
					initialize LocalToAlternateAmount3Total
					initialize LocalProjectAmountTotal
					initialize LocalReportAmount1Total
					initialize LocalReportAmount2Total
					initialize LocalReportAmount3Total
					initialize LocalReportAmount4Total
					initialize LocalReportAmount5Total
					initialize LocalProrateDistributionSequence

				SetProrateTotalAmount
					if (UseApplicationAmount)
						LocalCurrencyAmountTotal		= PrmReceivableApplication.ApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount
						LocalFunctionalAmountTotal		= PrmReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		= PrmReceivableApplication.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		= PrmReceivableApplication.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		= PrmReceivableApplication.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	= PrmReceivableApplication.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			= PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			= PrmReceivableApplication.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount
					else
					if (UseCreditApplicationAmount)
						LocalCurrencyAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.CreditAdjustAmount
						LocalFunctionalAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total = PrmReceivableApplication.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount

				AdjustCumulativeDistributionAmount
					if (LocalFlipAmount = true)
						LocalCurrencyAmountTotal		+= NewGLDistribution.DistributionAmount.CurrencyAmount
						LocalFunctionalAmountTotal		+= NewGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		+= NewGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		+= NewGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		+= NewGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	+= NewGLDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		+= NewGLDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	+= NewGLDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	+= NewGLDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			+= NewGLDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			+= NewGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			+= NewGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			+= NewGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			+= NewGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			+= NewGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalCurrencyAmountTotal		-= NewGLDistribution.DistributionAmount.CurrencyAmount
						LocalFunctionalAmountTotal		-= NewGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalAlternateAmountTotal		-= NewGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalAlternateAmount2Total		-= NewGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalAlternateAmount3Total		-= NewGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalToFunctionalAmountTotal	-= NewGLDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalToAlternateAmountTotal		-= NewGLDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalToAlternateAmount2Total	-= NewGLDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalToAlternateAmount3Total	-= NewGLDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalProjectAmountTotal			-= NewGLDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalReportAmount1Total			-= NewGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalReportAmount2Total			-= NewGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalReportAmount3Total			-= NewGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalReportAmount4Total			-= NewGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalReportAmount5Total			-= NewGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

			Instance Selection
				where (ReceivableCompanyDataGroup.TransactionCompany =	PrmReceivableCompany
				and BatchNumber		= PrmBatchNumber
				and TransType		= PrmTransType
				and Invoice			= PrmReceivableInvoice
				and ReceivableCompanyDataGroup.Customer	=	PrmCustomer
				and AccumulationType.Detail
				and DistributionSource.AccountsReceivable
				and DistributionAmount.CurrencyAmount entered)

			Action Rules
				Set Rules
					Entrance Rules
						if (PrmReceivableApplication.ApplicationSource.ReversalOfApplications)
							LocalAppSource		= "RY"
						else
							LocalAppSource		= "RL"
						WsProgramSequence 	= PrmWsProgramSequence
						initialize LocalDistributionPercentage
						include InitializeLocalProrateFields
						ProrateDistributionsRelCount = ReceivableInvoiceRel.ProrateDistributionsRelCount






						if (PrmProrateLevel = "ARC"
						or PrmProrateLevel = "CARC")
							UseApplicationAmount = true
							LocalProrateDescription	= PrmReceivableApplication.RealizedARCCashMsg + " " + current date

						include SetProrateTotalAmount

					Exit Rules




















						if (PrmProrateLevel = "ARC"
						or PrmProrateLevel = "CARC")
							invoke UpdateStatus PrmReceivableApplication
								invoked.PrmStatus = 5 

							invoke UpdateStatusOnResult PrmApplicationCloseResult

				Instance Rules
					LocalDistributionPercentage  = ((DistributionAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * -1)
					LocalProrateDistributionSequence += 1
					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					LocalGLAccount					= GeneralLedgerAccount
					LocalPrmReceivableCompany		= PrmReceivableCompany
					LocalSystemAccount = SystemAccount.RealizedGainAndLoss
					if (SystemAccountRel not exists)
						ReceivablesGainLossCalculation.PaymentCurrencyAmount	= PrmReceivableApplication.CreditTransaction.CreditApplicationAmount
						ReceivablesGainLossCalculation.InvoiceCurrencyAmount	= PrmReceivableApplication.ApplicationAmount
						if (PrmReceivableApplication.ApplicationSource.ReversalOfApplications)
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.CurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

						ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= LocalGLAccount
						if  (PrmReceivableApplication.PaymentAppliedToCreditMemo)
							ReceivablesGainLossCalculation.PaymentAppliedToCreditMemo = true

						LocalBoolean = ReceivablesGainLossCalculation.CalculateGainLoss
						LocalGLAccount		= ReceivablesGainLossCalculation.GLAccountCodeBlock
					else
						ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= LocalGLAccount
						LocalBoolean 								= ReceivablesGainLossCalculation.SystemCodeBlockDefaults
						LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
						LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount

					LocalNegative					= true
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup							= PrmReceivableApplication.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence		= WsProgramSequence
						invoked.LastDistributionSequence						= 1
						invoked.CreateDate										= PrmCreateDate

						invoked.ReceivableCompanyDataGroup.TransactionCompany	= PrmReceivableApplication.Company
						invoked.GeneralLedgerAccount							= LocalGLAccount
						invoked.GeneralLedgerDate								= PrmReceivableApplication.GeneralLedgerDate
						invoked.TransactionDate									= PrmReceivableApplication.ApplicationAmount.ExchangeDate  
						invoked.Origin											= LocalAppSource
						invoked.Status											= 2
						if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
							invoked.DistributionAmount.CurrencyAmount							= LocalCurrencyAmountTotal
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctionalAmountTotal
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateAmountTotal
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateAmount2Total
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateAmount3Total





							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1Total
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2Total
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3Total
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4Total
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5Total










































































						if (PrmProrateLevel = "ARC"
						or PrmProrateLevel = "CARC")
							invoked.ReceivableCompanyGroup.GlCompany				= PrmReceivableApplication.Company
							invoked.DistributionAmount.ExchangeDate					= PrmReceivableApplication.ApplicationAmount.ExchangeDate
							invoked.OriginalCurrency								= PrmReceivableApplication.DebitCurrency
							if (ProrateDistributionsRelCount != LocalProrateDistributionSequence)
								invoked.DistributionAmount.CurrencyAmount							= ((PrmReceivableApplication.ApplicationAmount.CurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ((PrmReceivableApplication.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								if (PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
								and PrmReceivableApplication.OverAppliedAdjustmentRel exists)
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								else
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= (PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= ((PrmReceivableApplication.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount + PrmReceivableApplication.OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount) * LocalDistributionPercentage)

							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= PrmReceivableApplication.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= PrmReceivableApplication.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= PrmReceivableApplication.ApplicationAmount.ReportAmount5.EnteredCurrencyRate



							if (PrmReceivableApplication.TransType.CustomerPayment)
								invoked.FlipAmounts									= false
								LocalFlipAmount										= false
								if (LocalNegative)
									invoked.FlipAmounts								= true
									LocalFlipAmount									= true
							else
								invoked.FlipAmounts									= true
								LocalFlipAmount										= true
								if (LocalNegative)
									invoked.FlipAmounts								= false
									LocalFlipAmount									= false
									if (PrmReceivableApplication.TransType.CreditMemo			
									and !ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines)
										LocalFlipAmount									= true
										if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
											invoked.FlipAmounts								= true
									else
									if (ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines)		
										if (PrmReceivableApplication.TransType.CreditMemo)
											if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
												invoked.FlipAmounts								= false
												LocalFlipAmount									= true
												if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
													invoked.FlipAmounts						= true
											else
												invoked.FlipAmounts								= true
												LocalFlipAmount									= true
										else
										if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
											invoked.FlipAmounts								= true
											LocalFlipAmount									= false
											if (ProrateDistributionsRelCount = LocalProrateDistributionSequence)
												invoked.FlipAmounts						= false
						invoked.AuditSummaryIndicator							= "09"
						invoked.Description										= LocalProrateDescription
						invoked.TransType										= PrmReceivableApplication.TransType
						invoked.Invoice											= PrmReceivableApplication.Invoice
						invoked.BatchNumber										= PrmReceivableApplication.BatchNumber

						if  (PrmReceivableApplication.TransType.CustomerPayment)
							invoked.ReceivableCompanyDataGroup.Customer					= PrmReceivableApplication.ReceivablePaymentDebitRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= PrmReceivableApplication.ReceivablePaymentDebitRel.ReceivableProcessLevel
						else
							invoked.ReceivableCompanyDataGroup.Customer					= PrmReceivableApplication.ReceivableInvoiceDetailRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= PrmReceivableApplication.ReceivableInvoiceDetailRel.ReceivableProcessLevel

						invoked.AccumulationType								= "D"
						invoked.DocumentNumber									= "7-" + PrmReceivableApplication.DerivedDocumentNumberWithLeadingZeros
						invoked.ApplicationCloseResult							= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader	= PrmReceivableApplication.ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 
						invoked.ApplicationID									= PrmReceivableApplication.ApplicationID

					include AdjustCumulativeDistributionAmount
					initialize LocalNegative
					initialize LocalGLAccount

		ReceivableGLDistributionRecordsPurge is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmDistribDate				is Date
				PrmCustomer					is a Customer
				PrmMajClass					is a CustomerMajorClass
				PrmMinClass					is a CustomerMinorClass
				PrmCreditAnlyst				is a CreditAnalyst
				PrmSalesman					is a SalesRepresentative

			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterCompanyIfCompanyGroupEntered"

					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
					if (PrmCompanyGroup entered)
						constraint (PrmCustomer not entered or PrmMajClass not entered or PrmCreditAnlyst not entered or PrmSalesman not entered)
							"CannotEnterCustomerSelectionsWhenCompanyGroupEntered"
					if (PrmCompany not entered and PrmCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupIsRequired"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup
					
					constraint (GeneralLedgerCompanyGroupMembersRel exists)
						"CompanyGroup<PrmCompanyGroup>ContainsNoCompanies"
					
					constraint (first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup.PurgeCutOffDate entered)
						"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup>"

				PrmDistribDate

					initial value is actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					default to actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					
				PrmCustomer
					if (PrmCustomer entered)
						constraint (PrmMajClass not entered or PrmCreditAnlyst not entered or PrmSalesman not entered)
							"CustomerEntered-DoNotEnterAnalyst,MajClassOrSalesrep"

				PrmMajClass
					if (PrmMinClass entered)
						required
							"MajorClassRequired;MinorClassEntered"
						LocalMajClass = PrmMajClass
						constraint (CustomerMajorClassRel exists)
							"MajorClass<PrmMajClass>DoesNotExist"

				PrmMinClass
					if (PrmMinClass entered)
						LocalMinClass = PrmMinClass
						constraint (CustomerMajorClassRel exists)
							"MajorClass<PrmMajClass>DoesNotExist"

				PrmCreditAnlyst
					if (PrmCreditAnlyst entered)
						LocalCreditAnalyst = PrmCreditAnlyst
						constraint (ReceivableCreditAnalystRel exists)
							"CreditAnalystDoesNotExist"

				PrmSalesman
					if (PrmSalesman entered)
						LocalSalesRepresentative = PrmSalesman
						constraint (ReceivableSalesRepresentativeRel exists)
							"SalesRepDoesNotExist"

			Local Fields
				RecordCount			is Numeric 10

			Instance Selection
				include deleted records
				where ((PrmCompany not entered or ReceivableCompanyDataGroup.TransactionCompany = PrmCompany)
				and	(PrmCompanyGroup not entered or GeneralLedgerCompanyGroupRel exists)
				and	(PrmDistribDate entered and GeneralLedgerDate <= PrmDistribDate)
				and	(PrmCustomer not entered or ReceivableCompanyDataGroup.Customer = PrmCustomer)
				and	Status.Posted)




			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoDistributionsRecordsFoundToPurge"
						priority is high
						detail is "DistributionsPurged=<RecordCount>"
				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivableGLDistributionsPurgeHasCompleted"
							priority is high
							detail is "DistributionsPurged=<RecordCount>"

				Instance Rules
					if (!IsGLRecordProjectSetNotToAllowPurge)
						if (PrmCreditAnlyst entered
						or  PrmMajClass entered
						or  PrmSalesman entered)
							if (PrmCreditAnlyst = CompanyCustomerRel.CreditAnalyst
							or  PrmMajClass = CompanyCustomerRel.CustomerMajorClass
							or  PrmSalesman = CompanyCustomerRel.SalesRepresentative)
								increment RecordCount
								invoke Purge
						else
							increment RecordCount
							invoke Purge


		CreateTaxLineItem is an Instance Action
			restricted
			Local Fields
				TaxLineItemView								is a TaxLineItem view
				AttributeCounter							is Numeric 5
				Idx											is Numeric size 2
			Action Rules
				initialize AttributeCounter
				for each TaxLineItemRel
					invoke Delete each.LineItemUserFieldsRel
					invoke Delete each

				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.TaxLineItem.UniqueIdOfRelatedObject = ReceivableInvoiceRel.UniqueID
					invoked.RelatedObjectReference 				= reference to this instance
					invoked.InvoiceNumber						= ReceivableInvoiceRel.ReceivableInvoice
					invoked.LineItemId							= LastDistributionSequence 
					invoked.LineItemNumber						= LastDistributionSequence
					invoked.RelatedLineItemUniqueId				= UniqueID
					invoked.InvoiceDate							= TransactionDate
					invoked.TaxEntity							= ReceivableCompanyGroup.OriginCompany.AccountingEntity
					invoked.ProductTaxCategory					= ProductTaxCategory
					invoked.CommodityCodeType					= "UNSPSC"
					invoked.CommodityCode						= DerivedUNSPSCCodeNoDash
					invoked.ShipToTaxCode						= TaxCode
					invoked.ShipToTaxCodeDescription			= TaxCode.Description
					if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
						invoked.InvoiceAmount					= DistributionAmount.CurrencyAmount * -1
						if (TransactionTaxableAmount entered)
							invoked.TaxableAmount				= TransactionTaxableAmount * -1
						else
							invoked.TaxableAmount				= DistributionAmount.CurrencyAmount * -1
					else
						invoked.InvoiceAmount					= DistributionAmount.CurrencyAmount
						if (TransactionTaxableAmount entered)
							invoked.TaxableAmount				= TransactionTaxableAmount
						else
							invoked.TaxableAmount				= DistributionAmount.CurrencyAmount
					if (TaxEntityUsesOneSource)
						if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered)
							invoked.ShipFromAddress 			= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
						else
							invoked.ShipFromAddress 			= GlCompanyRel.PostalAddress
						if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							invoked.ShipToAddress				= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							invoked.ShipToAddress				= ReceivableInvoiceRel.Customer.PostalAddress

				if (TaxEntityUsesOneSource
				and TaxAttributesRel.OneSourceTaxAttributeRel exists)
					initialize Idx
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= ReceivableInvoiceRel.UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.OneSourceTaxAttributeRel
							if ((each.LoadDynamicField.System	= "AR"
							or   each.LoadDynamicField.System not entered)
							and Idx < 25)
								increment Idx
								invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
								invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyGroup.OriginCompany.AccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.Company)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyGroup.GlCompany
								else
								if (each.LoadDynamicField.ValueIs.Description)
									invoked.UserElementGroup.UserElement[Idx].Value		= Description
								else
								if (each.LoadDynamicField.ValueIs.Customer)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyDataGroup.Customer
								else
								if (each.LoadDynamicField.ValueIs.PostingDate)
									invoked.UserElementGroup.UserElement[Idx].Value		= TransactionDate
								else
								if (each.LoadDynamicField.ValueIs.TaxDate)
									invoked.UserElementGroup.UserElement[Idx].Value		= TransactionDate
								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.LoadDynamicField.ValueIs.Currency)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.OriginalCurrency
								else
								if (each.LoadDynamicField.ValueIs.DiscountAmount
								and ReceivableInvoiceRel.DerivedDiscountAmountOverride entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.DerivedDiscountAmountOverride
								else
								if (each.LoadDynamicField.ValueIs.UnitCost
								and Units entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUnitCost
								else
								if (each.LoadDynamicField.ValueIs.AccountSubType
								and GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.LoadDynamicField.ValueIs.Project
								and GeneralLedgerAccount.Project entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project
								else
								if (each.LoadDynamicField.ValueIs.WorkType
								and GeneralLedgerAccount.Project.WorkType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.WorkType
								else
								if (each.LoadDynamicField.ValueIs.ServiceType
								and GeneralLedgerAccount.Project.ServiceType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ServiceType
								else
								if (each.LoadDynamicField.ValueIs.UsageType
								and GeneralLedgerAccount.Project.UsageType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.UsageType
								else
								if (each.LoadDynamicField.ValueIs.ContractType
								and GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.LoadDynamicField.ValueIs.CustomerType
								and GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.LoadDynamicField.ValueIs.CommodityCode
								and ReceivableCompanyDataGroup.UNSPSCCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUNSPSCCodeNoDash
								else
								if (each.LoadDynamicField.ValueIs.UNSPSC
								and ReceivableCompanyDataGroup.UNSPSCCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUNSPSCCodeNoDash
								else
								if (each.LoadDynamicField.ValueIs.ShipToName)
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
										invoked.UserElementGroup.UserElement[Idx].Value	= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.Name
									else
										invoked.UserElementGroup.UserElement[Idx].Value	= ReceivableInvoiceRel.Customer.Name
								else
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory
								and ProductTaxCategory entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= ProductTaxCategory
								else
								if (each.LoadDynamicField.ValueIs.TaxUsageCode
								and TaxUsageCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= TaxUsageCode
								else
								if (each.LoadDynamicField.ValueIs.Latitude)
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered
									and	ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoLatitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoLatitude
									else
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress not entered
									and	ReceivableInvoiceRel.Customer.PostalAddress.GeoLatitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.Customer.PostalAddress.GeoLatitude
								else
								if (each.LoadDynamicField.ValueIs.Longitude)
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered
									and	ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoLongitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoLongitude
									else
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress not entered
									and	ReceivableInvoiceRel.Customer.PostalAddress.GeoLongitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.Customer.PostalAddress.GeoLongitude
								else
								if (each.LoadDynamicField.ValueIs.Altitude)
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered
									and	ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoAltitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.GeoAltitude
									else
									if (ReceivableInvoiceRel.ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress not entered
									and	ReceivableInvoiceRel.Customer.PostalAddress.GeoAltitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableInvoiceRel.Customer.PostalAddress.GeoAltitude
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1
								and GeneralLedgerAccount.FinanceDimension1 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2
								and GeneralLedgerAccount.FinanceDimension2 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3
								and GeneralLedgerAccount.FinanceDimension3 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4
								and GeneralLedgerAccount.FinanceDimension4 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5
								and GeneralLedgerAccount.FinanceDimension5 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6
								and GeneralLedgerAccount.FinanceDimension6 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7
								and GeneralLedgerAccount.FinanceDimension7 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8
								and GeneralLedgerAccount.FinanceDimension8 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9
								and GeneralLedgerAccount.FinanceDimension9 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10
								and GeneralLedgerAccount.FinanceDimension10 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension10
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.ToAccountingEntity
								if (each.Value entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= each.Value

				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist)
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 		= ReceivableInvoiceRel.UniqueID
						invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence
						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyGroup.OriginCompany.AccountingEntity
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyGroup.GlCompany
								else
								if (each.ExternalValue.ValueIs.Description)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Description
								else
								if (each.ExternalValue.ValueIs.Customer)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyDataGroup.Customer
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = OriginalCurrency
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableInvoiceRel.DerivedDiscountAmountOverride
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedUnitCost
								else
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.WorkType
								else
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ServiceType
								else
								if (each.ExternalValue.ValueIs.AccountSubType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.ExternalValue.ValueIs.UsageType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.UsageType
								else
								if (each.ExternalValue.ValueIs.CustomerType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.ToAccountingEntity
								else
								if (each.ExternalValue.ValueIs.Project)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project
								else
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
								else
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension1
								else
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension2
								else
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension3
								else
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension4
								else
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension5
								else
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension6
								else
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension7
								else
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension8
								else
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension9
								else
								if (each.ExternalValue.ValueIs.FinanceDimension10)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension10
								else
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code

						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = ReceivableCompanyGroup.GlCompany
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = GeneralLedgerAccount.ToAccountingEntity
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = ReceivableInvoiceRel.DerivedDiscountAmountOverride
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 3
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = DerivedUnitCost
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue

						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = TransactionDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = TransactionDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue

		NonARPaymentCreateTaxLineItem is an Instance Action
			restricted
			Local Fields
				TaxLineItemView								is a TaxLineItem view
				AttributeCounter							is Numeric 5
				Idx											is Numeric size 2
			Action Rules
				initialize AttributeCounter
				for each NonARPaymentTaxLineItemRel
					invoke Delete each.LineItemUserFieldsRel
					invoke Delete each

				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.TaxLineItem.UniqueIdOfRelatedObject = NonArPaymentNavRel.UniqueID
					invoked.RelatedObjectReference 				= reference to this instance
					invoked.InvoiceNumber						= NonArPaymentNavRel.PaymentNumber
					invoked.LineItemId							= LastDistributionSequence 
					invoked.LineItemNumber						= LastDistributionSequence
					invoked.RelatedLineItemUniqueId				= UniqueID
					invoked.InvoiceDate							= TransactionDate
					invoked.TaxEntity							= ReceivableCompanyGroup.OriginCompany.AccountingEntity
					invoked.InvoiceAmount						= DistributionAmount.CurrencyAmount
					invoked.ProductTaxCategory					= ProductTaxCategory
					invoked.CommodityCodeType					= "UNSPSC"
					invoked.CommodityCode						= DerivedUNSPSCCodeNoDash
					invoked.ShipToTaxCode						= TaxCode
					invoked.ShipToTaxCodeDescription			= TaxCode.Description
					if (TransactionTaxableAmount entered)
						invoked.TaxableAmount					= TransactionTaxableAmount
					else
						invoked.TaxableAmount					= DistributionAmount.CurrencyAmount
					if (TaxEntityUsesOneSource)
						if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered)
							invoked.ShipFromAddress 			= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
							invoked.ShipToAddress				= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress
						else
							invoked.ShipFromAddress 			= GlCompanyRel.PostalAddress
							invoked.ShipToAddress				= GlCompanyRel.PostalAddress

				if (TaxEntityUsesOneSource
				and TaxAttributesRel.OneSourceTaxAttributeRel exists)
					initialize Idx
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= NonArPaymentNavRel.UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.OneSourceTaxAttributeRel
							if ((each.LoadDynamicField.System	= "AR"
							or   each.LoadDynamicField.System not entered)
							and Idx < 25)
								increment Idx
								invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
								invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyGroup.OriginCompany.AccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.Company)
									invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyGroup.GlCompany
								else
								if (each.LoadDynamicField.ValueIs.Description)
									invoked.UserElementGroup.UserElement[Idx].Value		= Description
								else
								if (each.LoadDynamicField.ValueIs.PostingDate)
									invoked.UserElementGroup.UserElement[Idx].Value		= TransactionDate
								else
								if (each.LoadDynamicField.ValueIs.TaxDate)
									invoked.UserElementGroup.UserElement[Idx].Value		= TransactionDate
								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.LoadDynamicField.ValueIs.Currency)
									invoked.UserElementGroup.UserElement[Idx].Value		= NonArPaymentNavRel.OriginalCurrency
								else
								if (each.LoadDynamicField.ValueIs.UnitCost
								and Units entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUnitCost
								else
								if (each.LoadDynamicField.ValueIs.AccountSubType
								and GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.LoadDynamicField.ValueIs.Project
								and GeneralLedgerAccount.Project entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project
								else
								if (each.LoadDynamicField.ValueIs.WorkType
								and GeneralLedgerAccount.Project.WorkType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.WorkType
								else
								if (each.LoadDynamicField.ValueIs.ServiceType
								and GeneralLedgerAccount.Project.ServiceType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ServiceType
								else
								if (each.LoadDynamicField.ValueIs.UsageType
								and GeneralLedgerAccount.Project.UsageType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.UsageType
								else
								if (each.LoadDynamicField.ValueIs.ContractType
								and GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.LoadDynamicField.ValueIs.CustomerType
								and GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.LoadDynamicField.ValueIs.CommodityCode
								and ReceivableCompanyDataGroup.UNSPSCCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUNSPSCCodeNoDash
								else
								if (each.LoadDynamicField.ValueIs.UNSPSC
								and ReceivableCompanyDataGroup.UNSPSCCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUNSPSCCodeNoDash
								else
								if (each.LoadDynamicField.ValueIs.ShipToName)
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered)
										invoked.UserElementGroup.UserElement[Idx].Value	= ReceivableCompanyDataGroup.ReceivableProcessLevel.Name
									else
										invoked.UserElementGroup.UserElement[Idx].Value	= GlCompanyRel.Name
								else
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory
								and ProductTaxCategory entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= ProductTaxCategory
								else
								if (each.LoadDynamicField.ValueIs.TaxUsageCode
								and TaxUsageCode entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= TaxUsageCode
								else
								if (each.LoadDynamicField.ValueIs.Latitude)
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered
									and	ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoLatitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoLatitude
									else
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress not entered
									and	GlCompanyRel.PostalAddress.GeoLatitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= GlCompanyRel.PostalAddress.GeoLatitude
								else
								if (each.LoadDynamicField.ValueIs.Longitude)
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered
									and	ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoLongitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoLongitude
									else
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress not entered
									and	GlCompanyRel.PostalAddress.GeoLongitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= GlCompanyRel.PostalAddress.GeoLongitude
								else
								if (each.LoadDynamicField.ValueIs.Altitude)
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress entered
									and	ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoAltitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress.GeoAltitude
									else
									if (ReceivableCompanyDataGroup.ReceivableProcessLevel.PostalAddress not entered
									and	GlCompanyRel.PostalAddress.GeoAltitude entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= GlCompanyRel.PostalAddress.GeoAltitude
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1
								and GeneralLedgerAccount.FinanceDimension1 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2
								and GeneralLedgerAccount.FinanceDimension2 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3
								and GeneralLedgerAccount.FinanceDimension3 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4
								and GeneralLedgerAccount.FinanceDimension4 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5
								and GeneralLedgerAccount.FinanceDimension5 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6
								and GeneralLedgerAccount.FinanceDimension6 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7
								and GeneralLedgerAccount.FinanceDimension7 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8
								and GeneralLedgerAccount.FinanceDimension8 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9
								and GeneralLedgerAccount.FinanceDimension9 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10
								and GeneralLedgerAccount.FinanceDimension10 entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= GeneralLedgerAccount.FinanceDimension10
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
									invoked.UserElementGroup.UserElement[Idx].Value		 = GeneralLedgerAccount.ToAccountingEntity
								else
								if (each.Value entered)
									invoked.UserElementGroup.UserElement[Idx].Value		= each.Value

				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist)
					initialize Idx
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= NonArPaymentNavRel.UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyGroup.OriginCompany.AccountingEntity
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyGroup.GlCompany
								else
								if (each.ExternalValue.ValueIs.Description)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Description
								else
								if (each.ExternalValue.ValueIs.Customer)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivableCompanyDataGroup.Customer
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = OriginalCurrency
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedUnitCost
								else
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.WorkType
								else
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ServiceType
								else
								if (each.ExternalValue.ValueIs.AccountSubType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.ExternalValue.ValueIs.UsageType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.UsageType
								else
								if (each.ExternalValue.ValueIs.CustomerType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.ToAccountingEntity
								else
								if (each.ExternalValue.ValueIs.Project)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.Project
								else
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
								else
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension1
								else
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension2
								else
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension3
								else
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension4
								else
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension5
								else
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension6
								else
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension7
								else
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension8
								else
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension9
								else
								if (each.ExternalValue.ValueIs.FinanceDimension10)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerAccount.FinanceDimension10
								else
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code

						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = ReceivableCompanyGroup.GlCompany
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = GeneralLedgerAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = GeneralLedgerAccount.ToAccountingEntity
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = DerivedUnitCost
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue

						initialize Idx
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								increment Idx
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = TransactionDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = TransactionDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue


		OneSourceProcessDistributionForTax is an Instance Action
			restricted
			Action Rules
				invoke CreateTaxDistribution ReceivableGLDistribution
					fill in fields from this instance
						except invoked.TaxCode
						except invoked.TransactionTaxableAmount
						except invoked.DistributionAmount
						except invoked.ProgramSequence
						except invoked.LastDistributionSequence
						except invoked.GeneralLedgerAccount
						except invoked.LineType
						except invoked.ICNCode
						except invoked.StockWeight
						except invoked.SupplementaryQuantity
						except invoked.ReceivableCompanyDataGroup.UNSPSCCode
					initialize invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory
					invoked.GeneralLedgerAccount					= first TaxLineItemRel.TaxDetailOutRel.TaxOutputAccount
					if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
					and first TaxLineItemRel.ReturnedErpTaxCode entered)
						LocalReceivableGeneralLedgerCode 			= first TaxLineItemRel.ReturnedErpTaxCode
						constraint (LocalReceivableGeneralLedgerCodeRel exists)
							"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<ReceivableCompanyDataGroup.TransactionCompany>"
						invoked.GeneralLedgerAccount				= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
					invoked.TaxCode									= first TaxLineItemRel.TaxDetailOutRel.TaxCode
					if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
						invoked.DistributionAmount.CurrencyAmount	= first TaxLineItemRel.TaxDetailOutRel.TaxAmount * -1
						invoked.TransactionTaxableAmount			= first TaxLineItemRel.TaxableAmount * -1
					else
						invoked.DistributionAmount.CurrencyAmount	= first TaxLineItemRel.TaxDetailOutRel.TaxAmount
						invoked.TransactionTaxableAmount			= first TaxLineItemRel.TaxableAmount
					invoked.TransientTaxRate						= first TaxLineItemRel.TaxDetailOutRel.TaxRate
					invoked.TransientAccrualFlag					= first TaxLineItemRel.TaxDetailOutRel.AccrualFlag
					invoked.LinkedTaxGroup.Indicator                = "T"
					invoked.TaxOriginCrossReference                 = ReceivableGLDistribution

				LinkedTaxGroup.Indicator    = "S"
				TaxOriginCrossReference     = ReceivableGLDistribution
				initialize TaxCode
				initialize TransactionTaxableAmount


		OneSourceProcessNonARDistributionForTax is an Instance Action
			restricted
			Action Rules
				invoke CreateTaxDistribution ReceivableGLDistribution
					fill in fields from this instance
						except invoked.TaxCode
						except invoked.TransactionTaxableAmount
						except invoked.DistributionAmount
						except invoked.ProgramSequence
						except invoked.LastDistributionSequence
						except invoked.GeneralLedgerAccount
						except invoked.LineType
						except invoked.ICNCode
						except invoked.StockWeight
						except invoked.SupplementaryQuantity
						except invoked.ReceivableCompanyDataGroup.UNSPSCCode
					initialize invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory
					invoked.GeneralLedgerAccount					= first NonARPaymentTaxLineItemRel.TaxDetailOutRel.TaxOutputAccount
					if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
					and first NonARPaymentTaxLineItemRel.ReturnedErpTaxCode entered)
						LocalReceivableGeneralLedgerCode 			= first NonARPaymentTaxLineItemRel.ReturnedErpTaxCode
						constraint (LocalReceivableGeneralLedgerCodeRel exists)
							"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<ReceivableCompanyDataGroup.TransactionCompany>"
						invoked.GeneralLedgerAccount				= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
					invoked.TaxCode									= first NonARPaymentTaxLineItemRel.TaxDetailOutRel.TaxCode
					invoked.DistributionAmount.CurrencyAmount		= first NonARPaymentTaxLineItemRel.TaxDetailOutRel.TaxAmount
					invoked.TransactionTaxableAmount				= first NonARPaymentTaxLineItemRel.TaxableAmount
					invoked.TransientTaxRate						= first NonARPaymentTaxLineItemRel.TaxDetailOutRel.TaxRate
					invoked.TransientAccrualFlag					= first NonARPaymentTaxLineItemRel.TaxDetailOutRel.AccrualFlag
					invoked.LinkedTaxGroup.Indicator                = "T"
					invoked.TaxOriginCrossReference                 = ReceivableGLDistribution

				LinkedTaxGroup.Indicator    = "S"
				TaxOriginCrossReference     = ReceivableGLDistribution
				initialize TaxCode
				initialize TransactionTaxableAmount


		VertexProcessDistributionForTax is an Instance Action
			restricted
			default label is untranslatable
			Local Fields
				LocalReturnedTaxCode		is like TaxCode
				LocalReturnedTaxable		is like InternationalAmount
			Action Rules
				LocalReturnedTaxCode = first TaxLineItemRel.ShipToTaxCode
				LocalReturnedTaxable = first TaxLineItemRel.TaxableAmount

				for each first TaxLineItemRel.TaxDetailOutRel
					if (each.TaxAmount entered)
						invoke CreateTaxDistribution ReceivableGLDistribution
							fill in fields from this instance
								except invoked.TaxCode
								except invoked.TransactionTaxableAmount
								except invoked.DistributionAmount
								except invoked.ProgramSequence
								except invoked.LastDistributionSequence
								except invoked.GeneralLedgerAccount
								except invoked.LineType
								except invoked.ICNCode
								except invoked.StockWeight
								except invoked.SupplementaryQuantity
								except invoked.ReceivableCompanyDataGroup.UNSPSCCode
							initialize invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory
							invoked.GeneralLedgerAccount					= each.TaxOutputAccount
							invoked.TaxCode									= LocalReturnedTaxCode
							if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
								invoked.DistributionAmount.CurrencyAmount	= each.TaxAmount * -1
								invoked.TransactionTaxableAmount			= LocalReturnedTaxable * -1
							else
								invoked.DistributionAmount.CurrencyAmount	= each.TaxAmount
								invoked.TransactionTaxableAmount			= LocalReturnedTaxable
							invoked.TransientTaxRate						= each.TaxRate
							invoked.TransientAccrualFlag					= each.AccrualFlag
							invoked.LinkedTaxGroup.Indicator                = "T"
							invoked.TaxOriginCrossReference                 = ReceivableGLDistribution

				LinkedTaxGroup.Indicator    = "S"
				TaxOriginCrossReference     = ReceivableGLDistribution
				initialize TaxCode
				initialize TransactionTaxableAmount


		VertexProcessNonARPaymentDistributionForTax is an Instance Action
			restricted
			default label is untranslatable
			Local Fields
				LocalReturnedTaxCode		is like TaxCode
				LocalReturnedTaxable		is like InternationalAmount
			Action Rules
				LocalReturnedTaxCode = first NonARPaymentTaxLineItemRel.ShipToTaxCode
				LocalReturnedTaxable = first NonARPaymentTaxLineItemRel.TaxableAmount

				for each first NonARPaymentTaxLineItemRel.TaxDetailOutRel
					if (each.TaxAmount entered)
						invoke CreateTaxDistribution ReceivableGLDistribution
							fill in fields from this instance
								except invoked.TaxCode
								except invoked.TransactionTaxableAmount
								except invoked.DistributionAmount
								except invoked.ProgramSequence
								except invoked.LastDistributionSequence
								except invoked.GeneralLedgerAccount
								except invoked.LineType
								except invoked.ICNCode
								except invoked.StockWeight
								except invoked.SupplementaryQuantity
								except invoked.ReceivableCompanyDataGroup.UNSPSCCode
							initialize invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory
							invoked.GeneralLedgerAccount					= each.TaxOutputAccount
							invoked.TaxCode									= LocalReturnedTaxCode
							invoked.DistributionAmount.CurrencyAmount		= each.TaxAmount
							invoked.TransactionTaxableAmount				= LocalReturnedTaxable
							invoked.TransientTaxRate						= each.TaxRate
							invoked.TransientAccrualFlag					= each.AccrualFlag
							invoked.LinkedTaxGroup.Indicator                = "T"
							invoked.TaxOriginCrossReference                 = ReceivableGLDistribution

				LinkedTaxGroup.Indicator    = "S"
				TaxOriginCrossReference     = ReceivableGLDistribution
				initialize TaxCode
				initialize TransactionTaxableAmount


		ResetSourceOfLinkedTaxDistributions is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				invoke RemoveLinkedTaxDistributions

				if (IsNonArPayment)
					for each NonARPaymentTaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each
				else
					for each TaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

				initialize TaxOriginCrossReference
				LinkedTaxGroup.Indicator    = "X"
				TaxCode						= LinkedTaxGroup.TaxCode
				TransactionTaxableAmount	= LinkedTaxGroup.TaxableAmount


		ClearTaxCodeAndTaxableAmount is an Instance Action
			restricted
			Action Rules
				if (TaxCode entered)
					TaxCode 					= blank
					TransactionTaxableAmount 	= blank

		ChangeAssociatedLine is an Instance Action
			restricted
			Parameters
				PrmAssociatedLine is like UniqueID
			Action Rules
				AssociatedLine = PrmAssociatedLine


		FrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a ReceivableCompany
				PrmBatchNumber							is a BatchNumber
				PrmTransType							is a TransType
				PrmInvoice								is an Invoice
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBatchNumber
					required
				PrmTransType
					required
				PrmInvoice
					required
			Sort Order is Set2
			Local Fields
				LocalForEachSumFESAmount					is an InternationalAmount
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and ReceivableCompanyDataGroup.TransactionCompany = PrmCompany
				and BatchNumber = PrmBatchNumber
				and TransType = PrmTransType
				and Invoice = PrmInvoice
				and Status.Unreleased
				and	DistributionAmount.CurrencyAmount entered
				and not CreatedByFES
				and GeneralLedgerAccount.FinanceDimension2 not entered
				and GeneralLedgerAccount.Project entered
				and !GeneralLedgerAccount.Project.ExcludeFromFES
				and GeneralLedgerAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalFEGtext		= PrmFinanceEnterpriseGroup
						LocalDerivedFESKey	= "AR-"+PrmCompany+"-"+PrmBatchNumber+"-"+PrmTransType+"-"+PrmInvoice
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						LocalFEGtext		= PrmFinanceEnterpriseGroup
						LocalDerivedFESKey	= "AR-"+PrmCompany+"-"+PrmBatchNumber+"-"+PrmTransType+"-"+PrmInvoice
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					LocalFEGtext		= PrmFinanceEnterpriseGroup
					LocalDerivedFESKey	= "AR-"+PrmCompany+"-"+PrmBatchNumber+"-"+PrmTransType+"-"+PrmInvoice
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= GeneralLedgerAccount.AccountingEntity
						invoked.PrmDistribution					= ReceivableGLDistribution
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= DistributionAmount.CurrencyAmount
						invoked.PrmDistributionAmountWithTax	= DistributionAmount.CurrencyAmount
						invoked.PrmTransactionDate				= TransactionDate
						invoked.PrmPostingDate					= GeneralLedgerDate
						invoked.PrmTransactionCurrencyCode		= OriginalCurrency
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
						invoked.PrmTransactionCodeBlock			= GeneralLedgerAccount
					initialize LocalForEachSumFESAmount
					if(FESDistByDistributionRel exists)
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount += each.FESAmount
							invoke Create ReceivableGLDistribution
								fill in fields from this instance
									except invoked.LastDistributionSequence
								invoked.GeneralLedgerAccount			= each.CodeBlock
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.DistributionAmount.CurrencyAmount		= each.FESAmount + (DistributionAmount.CurrencyAmount - LocalForEachSumFESAmount)
								else
									invoked.DistributionAmount.CurrencyAmount		= each.FESAmount
								invoked.CreatedByFES					= true
						invoke Delete 

		DeleteFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a ReceivableCompany
				PrmBatchNumber							is a BatchNumber
				PrmTransType							is a TransType
				PrmInvoice								is an Invoice
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBatchNumber
					required
				PrmTransType
					required
				PrmInvoice
					required
			Sort Order is Set2
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and ReceivableCompanyDataGroup.TransactionCompany = PrmCompany
				and BatchNumber = PrmBatchNumber
				and TransType = PrmTransType
				and Invoice = PrmInvoice
				and Status.Unreleased
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Delete


		CreateIntrastatDetail	is an Instance Action
			restricted
			Parameters
				PrmIntrastatFiscalYear   				is Year
				PrmIntrastatNumber						is an IntrastatNumber
				PrmOriginIntrastatCountry							is a Country
				PrmDestinationIntrastatCountry						is a Country
				PrmOriginIntrastatRegion							is a Region
					context of PrmOriginIntrastatCountry
				PrmDestinationIntrastatRegion						is a Region
					context of PrmDestinationIntrastatCountry
			Action Rules
				IntrastatProcessing.HeaderFc					= blank
				IntrastatProcessing.DetailFc					= "C"
				IntrastatProcessing.TaxEntity					= ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
				IntrastatProcessing.FiscalYear					= PrmIntrastatFiscalYear
				IntrastatProcessing.IntrastatNumber 			= PrmIntrastatNumber
				IntrastatProcessing.ICNCode						= ICNCode
				IntrastatProcessing.SupplementaryUOM			= ICNCode.SupplementaryUOM
				IntrastatProcessing.LineNumber					= LastDistributionSequence
				IntrastatProcessing.StockWeight					= StockWeight
				IntrastatProcessing.SupplementaryQuantity		= SupplementaryQuantity
				IntrastatProcessing.DestinationCountry			= PrmDestinationIntrastatCountry
				IntrastatProcessing.DestinationRegion			= PrmDestinationIntrastatRegion
				IntrastatProcessing.OriginCountry				= PrmOriginIntrastatCountry
				IntrastatProcessing.OriginRegion				= PrmOriginIntrastatRegion
				IntrastatProcessing.BaseAmount					= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalTrigger									= IntrastatProcessing.MainTrigger
				constraint (IntrastatProcessing.LocalErrorNumber not entered)
					"<IntrastatProcessing.OutputErrorMessage>"

