ReportingBasis is a BusinessClass
    owned by GeneralLedger
    prefix is GLRBD
	representative text is "<ReportingBasis>-<Description>"

    Ontology
    	symbolic key is ReportingBasis
        
	Patterns
		implements BODId
	
    Persistent Fields
        Description
		Status							is Numeric 1
			States
				Inactive				value is 0
				Active					value is 1 
				Delete					value is 2
		ReportingChart
		GeneralLedgerCalendar
			default label is "GlobalLedgerCalendar"
		AccountingUnitStructure
		ProjectStructure	
		FinanceDimension1Structure
		FinanceDimension2Structure
		FinanceDimension3Structure
		FinanceDimension4Structure
		FinanceDimension5Structure
		FinanceDimension6Structure
		FinanceDimension7Structure
		FinanceDimension8Structure
		FinanceDimension9Structure
		FinanceDimension10Structure											
		BasisYear					is a GeneralLedgerCalendarYear
		CurrencyRevaulationSequence	is Numeric 15
		CalendarTopNode				is a GeneralLedgerCalendarPeriod
		CalendarTopNodeYTD			is a GeneralLedgerCalendarPeriod
		CalendarTopNodeLTD			is a GeneralLedgerCalendarPeriod		
		ChartAccountTopNode 		is a GeneralLedgerChartAccount
		LedgerTopNode				is a Ledger
			delete ignored
		AccountingEntityTopNode		is an AccountingEntity
			delete ignored
		ProjectTopNode				is a Project
		AccountingUnitTopNodeGroup
		FinanceDimension1TopNode	is a FinanceDimension1
		FinanceDimension2TopNode	is a FinanceDimension2
		FinanceDimension3TopNode	is a FinanceDimension3
		FinanceDimension4TopNode	is a FinanceDimension4
		FinanceDimension5TopNode	is a FinanceDimension5
		FinanceDimension6TopNode	is a FinanceDimension6
		FinanceDimension7TopNode	is a FinanceDimension7
		FinanceDimension8TopNode	is a FinanceDimension8
		FinanceDimension9TopNode	is a FinanceDimension9
		FinanceDimension10TopNode	is a FinanceDimension10		
		CalendarTopNodeCubeValue 			is Alpha up to 100
		CalendarTopNodeYTDCubeValue 		is Alpha up to 100
		CalendarTopNodeLTDCubeValue 		is Alpha up to 100			
		ChartAccountTopNodeCubeValue		is Alpha up to 100 
		LedgerTopNodeCubeValue			    is Alpha up to 100
		AccountingEntityTopNodeCubeValue 	is Alpha up to 100
		ProjectTopNodeCubeValue				is Alpha up to 100
		AccountingUnitTopNodeCubeValue		is Alpha up to 100
		FinanceDimension1TopNodeCubeValue	is Alpha up to 100
		FinanceDimension2TopNodeCubeValue	is Alpha up to 100
		FinanceDimension3TopNodeCubeValue	is Alpha up to 100
		FinanceDimension4TopNodeCubeValue	is Alpha up to 100
		FinanceDimension5TopNodeCubeValue	is Alpha up to 100
		FinanceDimension6TopNodeCubeValue	is Alpha up to 100
		FinanceDimension7TopNodeCubeValue	is Alpha up to 100
		FinanceDimension8TopNodeCubeValue	is Alpha up to 100
		FinanceDimension9TopNodeCubeValue	is Alpha up to 100
		FinanceDimension10TopNodeCubeValue	is Alpha up to 100		
		BasisSequence				is Numeric 4
        	disable Auditing
		IsABudgetBasis				is Boolean
		AsyncId						is a AsyncActionRequest
			delete ignored
		UseForBudgetEdit			is Boolean
		AverageDailyBalanceStatus	is Numeric 1		
			default label is "ADBForAllDimensionsStatus"
			protected
			States
				Inactive			value is 0
				Initiating			value is 1
				Active				value is 9
		AverageDailyBalance			is Boolean
		ADBRunDate					is Date	
		JournalReference			is Boolean
			default label is "AssignJournalReference"
		JournalReferenceLastRunDate is Date
			protected
			default label is "LastRunDate"
		JournalReferenceLastPeriodEndDate is Date
			protected
			default label is "LastPeriodEndDateProcessed"
		JournalReferenceFormat		is AlphaUpper 50
    		Text Variables
				YearYYYY
				YearYY
				MonthMM
				999999999999
				000000000009
				999999
				000009
				Ledger
				System
		ResetNumericSequence		is Numeric 1
			States
				PerLedger	 		value is 1
				PerSystem	  		value is 2
				PerLedgerAndSystem  value is 3
		YearEndJournalReports		is Boolean				
			default label is "GenerateYearEndJournals"
		ProcessRetainedEarnings		is Boolean	
		AccountAnalysisString		is Alpha 45

	Context Fields
		AccountingEntity
			
	Transient Fields
		EndDate						is Date

	Local Fields
		LocalEndDate				is Date
		LocalCount					is Numeric 3
		LocalStartDate				is Date
		LocalTopNode				is AlphaUpper 20
		LocalLedger					is a Ledger
		LocalBasisYear				is Year
		LocalYear					is Year
		LocalSystemAccount			is a SystemAccount
		LocalDateRange				is a DateRange
		LocalCurrencyLedger			is a Ledger
		LocalAccountingEntityGroup	is like AccountingEntityGroup
		LocalAccountingEntity		is like AccountingEntity
		LocalCloseConfiguration		is a GeneralLedgerCloseConfiguration
		LocalBasisDateRange			is a DateRange
		LocalActionCode				is an ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalAlphaDay				is Alpha 3
		LocalAlphaYear				is Alpha 4
		LocalJulianDate				is AlphaUpper 7		
    	LocalPeriodType	        	is Numeric 1
			States
				Quarter		  value is 2
				Month		  value is 3
				Week		  value is 4
				Day			  value is 8		
		LocalSampleJournalReference	is AlphaUpper 50
    		Text Variables
				YearYYYY	  value is DerivedCurrentDate year
				YearYY		  value is DerivedYear[3:4]
				MonthMM		  value is DerivedPaddedMonth
				999999999999  value is MessageSequence12
				000000000009  value is MessageZeroPaddedSequenceNum12
				999999		  value is MessageSequence6
				000009		  value is MessageZeroPaddedSequenceNum6
				Ledger		  value is FinanceEnterpriseGroup.CoreLedger
				System		  value is MessageSystem		
		LocalActor					is an Actor	
		LocalStartDateJulian		is Numeric 7
		LocalEndDateJulian			is Numeric 7				
		LocalAsyncId				is an AsyncActionRequest	
		LocalReportingBasisYearEndJournal  is Numeric 1								
			States
				BalanceSheetOpening	value is 1
				ProfitAndLoss		value is 2
				BalanceSheetClosing	value is 3
		LocalTempYearEndJournalReference	is AlphaUpper 50								
    		Text Variables
				YearYYYY		  value is LocalYear
				YearYY			  value is DerivedYearEndYear[3:4]
				MonthMM			  value is DerivedYearEndPaddedMonth
				999999999999	  value is LocalSequenceNum12
				000000000009	  value is DerivedZeroPaddedSequenceNum12
				999999			  value is LocalSequenceNum6
				000009			  value is DerivedZeroPaddedSequenceNum6
				Ledger			  value is LocalYearEndLedger
				System			  value is LocalYearEndSystem
		LocalSequenceNum6				is AlphaUpper 6
		LocalSequenceNum12				is AlphaUpper 12		
		LocalYearEndSystem				is a GeneralLedgerSystemCode
		LocalYearEndLedger				is a Ledger				
		LocalInstGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
		LocalInstAccountingEntity			is like AccountingEntity
		LocalInstAccountingUnit				is like AccountingUnit
		LocalInstFinanceDimension1			is like FinanceDimension1
		StructuresChanged				is Boolean
		LocalADBDimension1				is like AccountingUnit
		LocalADBDimension2				is like AccountingUnit
		LocalADBDimension3				is like AccountingUnit
		LocalProcessBasisYear			is Year
		BypassActiveCodeBlockEdit
		LocalDisplayAccount         	is like GeneralLedgerChartAccount
		LocalGeneralLedgerCalendarDate			is a GeneralLedgerCalendarDate
		LocalLikeLedger					is like Ledger
			
	Derived Fields
		RepresentativeText is a StringField
			type is Text
			default label is "ReportingBasis"
			ReportingBasis " - " Description
 		Active		 			is a DerivedField
			type is Boolean
			restricted
			if (Status.Active)
				return true
		DerivedCloseLedger		is a DerivedField
			type is AlphaUpper 20
			return ReportingBasis + " CLOSE"
		DerivedCurrencyLedger	is a DerivedField
			type is AlphaUpper 20
			restricted
			return ReportingBasis + " CURRENCY"
		DerivedRetainedEarningsLedger		is a DerivedField		
			type is AlphaUpper 20
			return ReportingBasis + " RE"
		DerivedCurrencyLedgerDescription is a DerivedField
			type is AlphaUpper 60
			restricted
			if (FinanceEnterpriseGroup.CurrencyTranslationAndRevalue)
				return ReportingBasis + " " + CurrencyLedgerMessage
		DerivedCloseLedgerDescription is a DerivedField
			type is AlphaUpper 60
			restricted
			return ReportingBasis + " " + CloseLedgerMessage
		DerivedRetainedEarningsLedgerDescription is a DerivedField		
			type is AlphaUpper 60
			restricted
			return ReportingBasis + " " + RetainedEarningsLedgerMessage
		BasisStartDate		is a DerivedField
			type is Date
			restricted
			if (!LocalBasisYear entered)
				LocalBasisYear	= BasisYear - 1
			if (last PeriodShadowForYearRel exists)
				return last PeriodShadowForYearRel.GeneralLedgerCalendarPeriod.Date + 1
			else
				LocalBasisYear	+= 1
				return first PeriodShadowForYearRel.GeneralLedgerCalendarPeriod.Date
		BasisEndDate		is a DerivedField
			type is Date
			if (!LocalBasisYear entered)
				LocalBasisYear	= BasisYear
			return last PeriodShadowForYearRel.GeneralLedgerCalendarPeriod.Date
		BasisYearEndDate	is a DerivedField
			type is Date
			restricted
			LocalBasisYear = BasisYear
			return last PeriodShadowForYearRel.GeneralLedgerCalendarPeriod.Date
		DerivedCalendarYears	is a DerivedField
			type is Numeric 3
			restricted
			return instance count of CalendarYearsNotInBasisRel
		DerivedBasisYears	is a DerivedField
			type is Numeric 3
			restricted
			return instance count of ReportingBasisYearForCountRel
		DerivedGainLossRunSequence		is a DerivedField
			type is Alpha 5
			restricted
			return 10000 + ReportingBasisYearRel.GainLossRunSequence
		DerivedRunSequence		is a StringField
			type is Alpha 10
			restricted
			ReportingBasisYearRel.ReportingBasisYear
			"-"
			DerivedGainLossRunSequence[2:5]
		DerivedCalendarNode		is a DerivedField
			type is AlphaUpper 20
			restricted
			return GeneralLedgerCalendar.TopNode
		CurrencyLedgerMessage	is a MessageField
			restricted
			"CurrencyLedger"
		CloseLedgerMessage	is a MessageField	
			restricted
			"CloseLedger"
		RetainedEarningsLedgerMessage	is a MessageField	
			restricted
			"RetainedEarningsLedger"
		DerivedAccountingEntityLabel	is a DerivedField
			type is Alpha 25
			restricted
			return FinanceEnterpriseGroup.AccountingEntityLabel

		SkippingMessage		is a MessageField
			restricted
			"Skipping"
		NotInBasisMessage	is a MessageField
			restricted
			";NotValidForBasis"
		SkippingAccountingEntityError	is a MessageField	

			restricted
			"Skipping<FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalAccountingEntity>;NotInBasis"







		SkippingLedgerInActiveError	is a MessageField
			restricted
			"Skipping_\Ledger<LocalLikeLedger>;Inactive"
		DerivedBeginingBalancePeriodString is a StringField
			type is AlphaUpper 20
			restricted
			LocalYear
			"000"
		BasisNodeString	    is a StringField
			type is AlphaUpper 12
			restricted
			BasisSequence
			"_NODE"
		DerivedBasisYearKey			is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"
			LocalBasisYear
		DerivedNewYear		is a DerivedField
			type is Year
			restricted
			return BasisYear + 1
		DerivedCalendarPeriodString is a StringField
			type is AlphaUpper 20
			restricted
			DerivedNewYear
			"000"














		DerivedLastEndDate		is a DerivedField
			type is Date
			restricted
			return last AllRecordsForPeriodShadowRel.GeneralLedgerCalendarPeriod.Date
		CardViewReportingBasisLabel is a StringField
			type is Alpha 40 
			ReportingBasis
			" "
			Description
		CardViewBasisYearLabel is a StringField
			type is Alpha 40 
			"Basis Year "
			" "
			BasisYear
		CardViewBasisLastRunDateLabel is a StringField
			type is Alpha 40 
			"Last Run Date "
			" "
			DerivedADBRunDate

		DerivedADBRunDate		is a DerivedField
			type is Alpha 10
			restricted
			return ADBRunDate
		CurrentBeginBalancePeriod is a StringField
			type is AlphaUpper 20
			restricted
			BasisYear
			"000"

		DerivedCurrentDate is a DerivedField
			type is Date
			restricted
			return current corporate date
					
		DerivedYear is a DerivedField
			type is AlphaUpper size 4
			restricted
			return current year

		DerivedMonth is a DerivedField
			type is Numeric size 2
			restricted
			return DerivedCurrentDate month
			
		MessageSequence6 is a MessageField
			restricted
			"123456"

		MessageSequence12 is a MessageField
			restricted
			"123456789012"

 		DerivedPaddedMonth is a DerivedField
			type is AlphaUpper 2
			restricted
			if (DerivedCurrentDate month < 10)
				DerivedPaddedMonth	= "0" + DerivedMonth
			else
				return DerivedCurrentDate month
            
 		MessageZeroPaddedSequenceNum12 is a MessageField
 			restricted
 			"000000000001"
 			
		MessageZeroPaddedSequenceNum6 is a MessageField
  			restricted
 			"000001"
 			
 		MessageSystem is a MessageField
 			restricted
 			"GL"

		IsBasisIncompleteMF is a MessageField		

			"Basis_Definition_Is_Incomplete"

  		DerivedStructuredJournalReferenceNumber is a DerivedField
 			type is AlphaUpper size 50 		
  			restricted
  			LocalSampleJournalReference				= JournalReferenceFormat
  			DerivedStructuredJournalReferenceNumber = LocalSampleJournalReference text

		JulianDate is a DerivedField
			type is AlphaUpper 7
			restricted
			LocalAlphaYear = LocalEndDate year
			LocalAlphaDay  = LocalEndDate year day
			JulianDate = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				JulianDate += "00"
			else
			if (LocalAlphaDay size = 2)
				JulianDate += "0"
			JulianDate += LocalAlphaDay 

  		DerivedYearEndStructuredJournalReferenceNumber is a DerivedField		
 			type is AlphaUpper size 50 		
  			restricted
  			DerivedYearEndStructuredJournalReferenceNumber = LocalTempYearEndJournalReference text

		DerivedYearEndYear is a DerivedField									
			type is AlphaUpper size 4
			restricted
			return LocalYear

 		DerivedYearEndPaddedMonth is a MessageField
			restricted
			"00"   
 
 		DerivedSequence6 is a DerivedField
			type is AlphaRight size 6
			restricted
			return LocalSequenceNum6

		DerivedSequence12 is a DerivedField
			type is AlphaRight size 12
			restricted
			return LocalSequenceNum12
			           
 		DerivedZeroPaddedSequenceNum12 is a DerivedField
 			type is AlphaUpper size 12
 			restricted
 			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence12)
 			
		DerivedZeroPaddedSequenceNum6 is a DerivedField
 			type is AlphaUpper size 6
  			restricted
 			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence6)

		ActiveLabel is a LabelField
			"Active"

		InactiveLabel is a LabelField
			"Inactive"
		DeleteLabel is a LabelField
			"Delete"

		StatusDisplayTag is a DerivedField
			type is MessageField
			if (Status.Active)
				return ActiveLabel
			if (Status.Inactive)
				return InactiveLabel
			if (Status.Delete)
				return DeleteLabel
		
		BudgetBasisLabel is a LabelField
			"BudgetBasis"

		BudgetBasisDisplayTag is a DerivedField
			type is MessageField
			if (IsABudgetBasis)
				return BudgetBasisLabel
		
		BudgetEditLabel is a LabelField
			"BudgetEdit"
		
		BudgetEditDisplayTag is a DerivedField
			type is MessageField
			if (UseForBudgetEdit)
				return BudgetEditLabel

	Sets
		ByBasisSequence
			Sort Order
				FinanceEnterpriseGroup
				BasisSequence
		ByLedgerTopNode
			Sort Order
				FinanceEnterpriseGroup
				LedgerTopNode
				AccountAnalysisString 
		ByAccountingEntityTopNode
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntityTopNode
				AccountAnalysisString 

    Conditions
		BasisExists

			when (ReportingBasis exists)
		TranslationAndRevalueSetupComplete
			restricted
			when (FinanceEnterpriseGroup.CurrencyTranslationAndRevalue
			and   AccountingEntityHierarchyDetailRel exists
			and   LedgerHierarchyDetailRel exists)
		ValidForTranslationAndRevalue
			restricted
			when (TranslationAndRevalueSetupComplete
			and   Active
			and  !IsForAccountAnalysis)
		CalendarSetupChanged
			restricted
			when (DerivedCalendarYears !=  DerivedBasisYears)
		GainLossTotalExist
			restricted
			when (TranslationAndRevalueSetupComplete
			and   GainLossTotalRel exists)
		GainLossResultsExist
			restricted
			when (TranslationAndRevalueSetupComplete
			and   GainLossResultRel exists)
		BasisYearProcessed	
			restricted
			when (ReportingBasisYearTotalRel exists
			or 	  GainLossTotalExist)



		DefinedAsBudgetBasis
			restricted
			when (IsABudgetBasis
			and  !UseForBudgetEdit)
		DefinedAsBudgetEdit
			restricted
			when (IsABudgetBasis
			and   UseForBudgetEdit)
		ValidToRebuildBudgetEntity
			restricted
			when (UseForBudgetEdit)




		GeneralLedgerJournalControlRefExist
			restricted
			when (GeneralLedgerJournalControlRefPerReportingBasisRel exists)

		AllowedToAssignJournalReferenceNumber
			restricted
			when (JournalReference
			and  !IsForAccountAnalysis) 



		BasisIsIncomplete
			when ((FinanceEnterpriseGroup.AccountingUnitSelected
			and    AccountingUnitStructure not entered)
			or	  (FinanceEnterpriseGroup.ProjectEntry
			and    ProjectStructure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension1Entry
			and    FinanceDimension1Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension2Entry
			and    FinanceDimension2Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension3Entry
			and    FinanceDimension3Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension4Entry
			and    FinanceDimension4Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension5Entry
			and    FinanceDimension5Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension6Entry
			and    FinanceDimension6Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension7Entry
			and    FinanceDimension7Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension8Entry
			and    FinanceDimension8Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension9Entry
			and    FinanceDimension9Structure not entered)
			or    (FinanceEnterpriseGroup.FinanceDimension10Entry
			and    FinanceDimension10Structure not entered))
		AllowBuildDailyTotalForADB
			restricted
			when (FinanceEnterpriseGroup.UseAverageDailyBalance
			and   AverageDailyBalanceStatus.Inactive)
		IsForAccountAnalysis
			when (AccountAnalysisString entered)
		CanDelete
			when (Status.Delete
			and !IsForAccountAnalysis)
		InactiveStatus
			when (Status.Inactive)																								
	
	Relations
		LedgerRel
			one-to-one relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= LocalLedger
		LedgerHierarchyRel
			one-to-many relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Ledger				!= LedgerHierarchyDetailRel.SubordinateLedger)
		LedgerHierarchyDetailRel  
			one-to-many relation to LedgerHierarchy
			Field Mapping uses ByParent  
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= LedgerTopNode
		AccountingEntityHierarchyRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AccountingEntity		!= AccountingEntityHierarchyDetailRel.SubordinateAccountingEntity)
		AccountingEntityHierarchyDetailRel  
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode  
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AccountingEntityTopNode
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByLedgerEntity
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= LocalLedger
		AccountingEntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntityTopNode
		AccountingEntityHierarchyLookupRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AccountingEntityTopNode
				related.SubordinateAccountingEntity = LocalAccountingEntity 
		LedgerHierarchyRecordRel
			one-to-many relation to LedgerHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.TopNode           			 = LedgerTopNode
		EntityHierarchyRecordRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.TopNode           			 = AccountingEntityTopNode
		PeriodShadowForYearRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = DerivedBasisYearKey
		AllYearsForCalendarRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.PeriodType				= 1
				and    related.Year						<= BasisYear)
		FromBasisYearOnwardsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.PeriodType				= 1
				and    related.Year					   >= BasisYear)
		ReportingBasisYearRel
			one-to-one relation to ReportingBasisYear
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= ReportingBasis
				related.ReportingBasisYear			= LocalYear
		ReportingBasisYearForCountRel
			one-to-many relation to ReportingBasisYear
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= ReportingBasis
			Instance Selection
				where (related.ReportingBasisYear	<= BasisYear)
		CalendarYearsNotInBasisRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.Year						<= BasisYear
				and	   related.PeriodType				= 1)
		ValidCalendarYearsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.PeriodType				= 1
				and    related.Year						>= BasisYear)
		GeneralLedgerCalendarPeriodYearRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.PeriodType.Year
				and    related.Year					= LocalYear)
		GeneralLedgerCalendarPeriodBasisYearRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= ReportingBasis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where ((related.PeriodType.Year
				or      related.PeriodType.Quarter
				or	    related.PeriodType.Month
				or      related.PeriodType.Week
				or      related.PeriodType.Day)
				and     related.Year				= BasisYear)		
		MatchingGeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= ReportingBasis.GeneralLedgerCalendar.TopNode
				related.PeriodType					= LocalPeriodType
				related.EndDateJulian			   >= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian	   <= LocalJulianDate)										
		SystemDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure  = FinanceDimension1Structure
		DefaultZoneDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByDefaultZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure  = FinanceDimension1Structure
		EnterpriseZoneDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByEnterpriseZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceDimension1Structure
		SystemDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure  = FinanceDimension2Structure
		SystemDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure  = FinanceDimension3Structure
		SystemDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure  = FinanceDimension4Structure
		SystemDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure  = FinanceDimension5Structure
		SystemDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure  = FinanceDimension6Structure
		SystemDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure  = FinanceDimension7Structure
		SystemDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure  = FinanceDimension8Structure
		SystemDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure  = FinanceDimension9Structure
		SystemDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure = FinanceDimension10Structure
		SystemAccountCheckRel
			one-to-many relation to Account
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SystemAccount				= LocalSystemAccount
		CheckLedgerHierarchyRel
			one-to-one relation to LedgerHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.TopNode           			 = LedgerTopNode
				related.SubordinateLedger  			 = LocalLedger
		ReportingChartAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart           	= ReportingChart
		GainLossTotalRel
			one-to-many relation to GainLossTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= ReportingBasis
		GainLossResultRel
			one-to-many relation to GainLossResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= ReportingBasis
		AccountingEntityGroupMemberRel
			one-to-many relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntityGroup		= LocalAccountingEntityGroup
		AccountingEntityHierarchyRecordRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AccountingEntityTopNode
				related.SubordinateAccountingEntity	= LocalAccountingEntity
		ReportingBasisYearTotalRel
			one-to-many relation to ReportingBasisYearTotal
			Field Mapping uses ByBasisEntityYear
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
				related.ReportingBasisYearTotal.EntityYear	= DerivedBeginingBalancePeriodString
		UnrealizedGainAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
				related.ChartType					= 2 
			Instance Selection
				where (related.Revalue
				and	  !related.UnrealizedGainAccount entered)
		UnrealizedLossAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
				related.ChartType					= 2 
			Instance Selection
				where (related.Revalue
				and	  !related.UnrealizedLossAccount entered)
		TranslationGainAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
				related.ChartType					= 2 
			Instance Selection
				where (!related.TranslationGainAccount entered)
		TranslationLossAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
				related.ChartType					= 2 
			Instance Selection
				where (!related.TranslationLossAccount entered)
		AllReportingBasisYearRel
			one-to-many relation to ReportingBasisYear
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= ReportingBasis
		PostingReportingChartAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart           	= ReportingChart
				related.ChartType					= 2
		BudgetScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Basis				= ReportingBasis)
		BudgetTemplateRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario.Basis		= ReportingBasis)
		DEPMDimensionMapRel
			one-to-one relation to DEPMDimensionMap
			Field Mapping uses symbolic key
				related.DEPMDimensionMap		= FinanceEnterpriseGroup
		BasisYearTotalRel
			one-to-many relation to ReportingBasisYearTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
		GeneralLedgerTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.Scenario							= FinanceEnterpriseGroup.ActualsScenario
			Instance Selection
				where (related.GeneralLedgerTotal.Ledger	= DerivedCurrencyLedger
				or     related.GeneralLedgerTotal.Ledger	= DerivedCloseLedger)
		GeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGainLossRunSequence
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Ledger				= DerivedCurrencyLedger
		AllRecordsForPeriodShadowRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = GeneralLedgerCalendar
		AccountGroupRel
			one-to-many relation to BusinessClassGroup
			Field Mapping uses symbolic key
				related.BusinessClass = "GeneralLedgerTotal"
			Instance Selection
				where (related.BusinessClassGroup < "_")
		IncomeStatmementAccountsWithCloseToAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByCloseToAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ReportingChart			= ReportingChart
			Instance Selection
				where (related.CloseToAccount entered
				and	   related.ChartType.Posting				
				and    related.GeneralLedgerChartAccount.ChartSection.IncomeStatement)
								
#ifdef module ad
		ADBDailyAmountRel
			one-to-many relation to ADBDailyAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
		AverageDailyBalanceAmountRel
			one-to-many relation to AverageDailyBalanceAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
		ADBAggregateBalanceRel
			one-to-many relation to ADBAggregateBalance
			Field Mapping uses ByGeneralLedgerCalendarPeriod
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
		AverageDailyBalanceAggregateRel
			one-to-many relation to AverageDailyBalanceAggregate
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
		ByBasisLedgerADBAggregateRel
			one-to-many relation to AverageDailyBalanceAggregate
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
			Instance Selection
				where (related.LedgerForBasis)
#endif
		AllBasisRel
			one-to-many relation to ReportingBasis
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
	
		AllShadowAccountAnalysisRel
			one-to-many relation to AccountAnalysisSettings
			Field Mapping uses ByOriginalBasis
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.OriginalBasis						= ReportingBasis
	
		GeneralLedgerJournalControlRefPerReportingBasisRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByPostingDate
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.ReportingBasis = ReportingBasis

		AllGeneralLedgerJournalControlRefRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByPostingDate
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.ReportingBasis = ReportingBasis
				related.BasisYear      = LocalProcessBasisYear
				
		GeneralLedgerJournalControlRefRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByPostingDate
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup			
				related.ReportingBasis = ReportingBasis				
				related.BasisYear      = LocalProcessBasisYear
				related.AccountingEntity = LocalAccountingEntity

		GeneralLedgerJournalControlRefByLedgerRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ReportingBasis			= ReportingBasis
				related.AccountingEntity		= LocalAccountingEntity
				related.BasisYear				= LocalYear
				related.Ledger					= LocalLedger

		GeneralLedgerJournalControlRefByLedgerYearEndRel												
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByLedgerYearEnd
				related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ReportingBasis				 = ReportingBasis
				related.AccountingEntity			 = LocalAccountingEntity
				related.BasisYear					 = LocalYear
			Instance Selection
				where (related.Ledger				 	 = DerivedCloseLedger
				and related.ReportingBasisYear		     = LocalYear
				and related.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal)	

		ReportingBasisYearEndJournalRel															  
			one-to-one relation to  ReportingBasisYearEndJournal					
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = FinanceEnterpriseGroup
				related.ReportingBasis				 = ReportingBasis
				related.ReportingBasisYear			 = LocalYear
				related.AccountingEntity			 = LocalAccountingEntity
				related.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal  

		ReportingBasisYearEndJournalTransactionByLedgerRel										
			one-to-many relation to ReportingBasisYearEndJournalTransaction
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup		 = ReportingBasisYearEndJournalRel.FinanceEnterpriseGroup
				related.ReportingBasis				 = ReportingBasisYearEndJournalRel.ReportingBasis
				related.ReportingBasisYear			 = LocalYear
				related.AccountingEntity			 = ReportingBasisYearEndJournalRel.AccountingEntity
				related.ReportingBasisYearEndJournal = ReportingBasisYearEndJournalRel.ReportingBasisYearEndJournal  
			Instance Selection
				where (related.ReportingBasisYearEndJournalTransaction.Ledger	=	DerivedCloseLedger)

		ControllerRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "Controller_ST"
				
		FinancialBusinessAnalystRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "FinancialBusinessAnalyst_ST"	
		
		ApplicationAdministratorRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "ApplicationAdministrator_ST"	
		
		GeneralLedgerJournalControlRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByEntityLedgerJournal
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= LocalAccountingEntity
				related.Ledger						= LocalLedger
			Instance Selection
				where ((related.NumericGeneralLedgerCalendarPeriod >= LocalStartDateJulian
				and    related.NumericGeneralLedgerCalendarPeriod  <= LocalEndDateJulian)
				and	   related.Status.Posted)

		AverageDailyBalanceEntityInBasisRel	
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AccountingEntityTopNode
			Instance Selection
				where (related.SubordinateAccountingEntity.AverageDailyBalance)

		AverageDailyBalanceEntityInOtherBasisRel 
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SubordinateAccountingEntity	= AverageDailyBalanceEntityInBasisRel.SubordinateAccountingEntity
			Instance Selection
				where (related.ReportingBasisRel.ReportingBasis.AverageDailyBalance)
#ifdef module ad
		ADBAccountMasterByAccountRel
			one-to-one relation to ADBAccountMaster
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AccountingEntity			= LocalInstAccountingEntity
				related.AccountingUnit				= LocalInstAccountingUnit
				related.FinanceDimension1			= LocalInstFinanceDimension1

		ADBAccountMasterByEntityAccountRel
			one-to-many relation to ADBAccountMaster
			Field Mapping uses ByEntityAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= LocalInstAccountingEntity
				related.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
		AverageDailyBalanceAccountRel
			one-to-many relation to AverageDailyBalanceAccount
			Field Mapping uses ByEntityAccountADBDimensions
				related.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
				related.AccountingEntity										= LocalInstAccountingEntity
				related.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
			Instance Selection
				where ((LocalADBDimension1 not entered or related.ADBDimension1	= LocalADBDimension1)
				and    (LocalADBDimension2 not entered or related.ADBDimension2	= LocalADBDimension2)
				and    (LocalADBDimension3 not entered or related.ADBDimension3	= LocalADBDimension3))
#endif
		PeriodBasisYearRel						
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= ReportingBasis.GeneralLedgerCalendar.TopNode
				related.Year							= LocalProcessBasisYear
				related.PeriodType						= 1				

		ChartSectionBalanceSheetRel
    		one-to-many relation to GeneralLedgerChartAccount
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
    		Instance Selection
        		where (related.ChartSection.BalanceSheet)
        		
        ChartSectionIncomeStatementRel
    		one-to-many relation to GeneralLedgerChartAccount
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
    		Instance Selection
        		where (related.ChartSection.IncomeStatement)
        		
        ValidateBalanceSheetRel
    		one-to-many relation to GeneralLedgerChartAccount
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
        		related.GeneralLedgerChartAccount = LocalDisplayAccount
    		Instance Selection
        		where (related.ChartSection.BalanceSheet)	
        		
       	ValidateIncomeStatementRel
    		one-to-many relation to GeneralLedgerChartAccount
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
        		related.GeneralLedgerChartAccount = LocalDisplayAccount
    		Instance Selection
        		where (related.ChartSection.IncomeStatement)

	Field Rules
		Status
			initial value is Status.Active
		ReportingChart
			initial value is FinanceEnterpriseGroup.EnterpriseChart
			default to FinanceEnterpriseGroup.EnterpriseChart
			required
		ChartAccountTopNode
			ChartAccountTopNode = ReportingChart.ChartAccountNode
		GeneralLedgerCalendar
			required
		CalendarTopNode
			CalendarTopNode = GeneralLedgerCalendar.TopNode	
		CalendarTopNodeYTD
			CalendarTopNodeYTD = GeneralLedgerCalendar.YTDTopNode
		CalendarTopNodeLTD
			CalendarTopNodeLTD = GeneralLedgerCalendar.LTDTopNode					
		BasisYear
			constraint (AllYearsForCalendarRel exists)
				"BasisYearNotInCalendar"
			constraint (ValidCalendarYearsRel exists)
				"BasisYearNotInCalendar"
			required
		AccountingUnitStructure
			initial value is FinanceEnterpriseGroup.EnterpriseAUStructure
			default to FinanceEnterpriseGroup.EnterpriseAUStructure

			if (FinanceEnterpriseGroup.AccountingUnitSelected)
				required
		AccountingUnitTopNodeGroup
			AccountingUnitTopNodeGroup = AccountingUnitStructure.AccountingUnitTopNodeGroup
		ProjectStructure
			initial value is FinanceEnterpriseGroup.EnterpriseProjectStructure
			default to FinanceEnterpriseGroup.EnterpriseProjectStructure

			if (FinanceEnterpriseGroup.ProjectEntry)
				required
		ProjectTopNode
			ProjectTopNode = ProjectStructure.ProjectNode
		FinanceDimension1Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim1Structure
			default to FinanceEnterpriseGroup.EnterpriseDim1Structure

			if (FinanceEnterpriseGroup.FinanceDimension1Entry)
				required
		FinanceDimension2Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim2Structure
			default to FinanceEnterpriseGroup.EnterpriseDim2Structure

			if (FinanceEnterpriseGroup.FinanceDimension2Entry)
				required
		FinanceDimension3Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim3Structure
			default to FinanceEnterpriseGroup.EnterpriseDim3Structure

			if (FinanceEnterpriseGroup.FinanceDimension3Entry)
				required
		FinanceDimension4Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim4Structure
			default to FinanceEnterpriseGroup.EnterpriseDim4Structure

			if (FinanceEnterpriseGroup.FinanceDimension4Entry)
				required
		FinanceDimension5Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim5Structure
			default to FinanceEnterpriseGroup.EnterpriseDim5Structure

			if (FinanceEnterpriseGroup.FinanceDimension5Entry)
				required
		FinanceDimension6Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim6Structure
			default to FinanceEnterpriseGroup.EnterpriseDim6Structure

			if (FinanceEnterpriseGroup.FinanceDimension6Entry)
				required
		FinanceDimension7Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim7Structure
			default to FinanceEnterpriseGroup.EnterpriseDim7Structure

			if (FinanceEnterpriseGroup.FinanceDimension7Entry)
				required
		FinanceDimension8Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim8Structure
			default to FinanceEnterpriseGroup.EnterpriseDim8Structure

			if (FinanceEnterpriseGroup.FinanceDimension8Entry)
				required
		FinanceDimension9Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim9Structure
			default to FinanceEnterpriseGroup.EnterpriseDim9Structure

			if (FinanceEnterpriseGroup.FinanceDimension9Entry)
				required
		FinanceDimension10Structure
			initial value is FinanceEnterpriseGroup.EnterpriseDim10Structure
			default to FinanceEnterpriseGroup.EnterpriseDim10Structure																										

			if (FinanceEnterpriseGroup.FinanceDimension10Entry)
				required
		FinanceDimension1TopNode
			FinanceDimension1TopNode    = FinanceDimension1Structure.DimensionNode
		FinanceDimension2TopNode
			FinanceDimension2TopNode	= FinanceDimension2Structure.DimensionNode
		FinanceDimension3TopNode
			FinanceDimension3TopNode    = FinanceDimension3Structure.DimensionNode
		FinanceDimension4TopNode
			FinanceDimension4TopNode	= FinanceDimension4Structure.DimensionNode
		FinanceDimension5TopNode
			FinanceDimension5TopNode    = FinanceDimension5Structure.DimensionNode
		FinanceDimension6TopNode
			FinanceDimension6TopNode	= FinanceDimension6Structure.DimensionNode
		FinanceDimension7TopNode
			FinanceDimension7TopNode    = FinanceDimension7Structure.DimensionNode
		FinanceDimension8TopNode
			FinanceDimension8TopNode	= FinanceDimension8Structure.DimensionNode
		FinanceDimension9TopNode
			FinanceDimension9TopNode    = FinanceDimension9Structure.DimensionNode
		FinanceDimension10TopNode
			FinanceDimension10TopNode	= FinanceDimension10Structure.DimensionNode	
		CalendarTopNodeCubeValue														
			CalendarTopNodeCubeValue 	  		= CalendarTopNode cube dimension value
		CalendarTopNodeYTDCubeValue														
			CalendarTopNodeYTDCubeValue 	  	= CalendarTopNodeYTD cube dimension value
		CalendarTopNodeLTDCubeValue											
			CalendarTopNodeLTDCubeValue 	  	= CalendarTopNodeLTD cube dimension value							
		ChartAccountTopNodeCubeValue
			ChartAccountTopNodeCubeValue 		= ChartAccountTopNode cube dimension value
		LedgerTopNodeCubeValue
			LedgerTopNodeCubeValue				= LedgerTopNode cube dimension value
		AccountingEntityTopNodeCubeValue
			AccountingEntityTopNodeCubeValue 	= AccountingEntityTopNode cube dimension value
		ProjectTopNodeCubeValue
			ProjectTopNodeCubeValue				= ProjectTopNode cube dimension value
		AccountingUnitTopNodeCubeValue
			if (FinanceEnterpriseGroup.AccountingUnitLabel entered) 
				AccountingUnitTopNodeCubeValue  = AccountingUnitTopNodeGroup.DimensionNode cube dimension value 
			else 
				AccountingUnitTopNodeCubeValue  = FinanceEnterpriseGroup cube dimension value		
		FinanceDimension1TopNodeCubeValue
			FinanceDimension1TopNodeCubeValue	= FinanceDimension1TopNode cube dimension value
		FinanceDimension2TopNodeCubeValue
			FinanceDimension2TopNodeCubeValue	= FinanceDimension2TopNode cube dimension value	
		FinanceDimension3TopNodeCubeValue
			FinanceDimension3TopNodeCubeValue	= FinanceDimension3TopNode cube dimension value	
		FinanceDimension4TopNodeCubeValue
			FinanceDimension4TopNodeCubeValue	= FinanceDimension4TopNode cube dimension value	
		FinanceDimension5TopNodeCubeValue
			FinanceDimension5TopNodeCubeValue	= FinanceDimension5TopNode cube dimension value	
		FinanceDimension6TopNodeCubeValue
			FinanceDimension6TopNodeCubeValue	= FinanceDimension6TopNode cube dimension value	
		FinanceDimension7TopNodeCubeValue
			FinanceDimension7TopNodeCubeValue	= FinanceDimension7TopNode cube dimension value	
		FinanceDimension8TopNodeCubeValue
			FinanceDimension8TopNodeCubeValue	= FinanceDimension8TopNode cube dimension value	
		FinanceDimension9TopNodeCubeValue			
			FinanceDimension9TopNodeCubeValue	= FinanceDimension9TopNode cube dimension value	
		FinanceDimension10TopNodeCubeValue
			FinanceDimension10TopNodeCubeValue	= FinanceDimension10TopNode cube dimension value		
		BasisSequence
			autosequence using ByBasisSequence
		UseForBudgetEdit
			constraint (IsABudgetBasis)
				"UseForBudgetEditValidWithIsABudgetBasis"


		JournalReferenceFormat
			if (JournalReference)
				required

	Attach Rules
		constraint (Active)
			"BasisIsInactive"

	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger)
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
		
					increment bod id.VariationID
		
					trigger "ReportingBasisService" PA service
						resume on error
						title is "EG:<FinanceEnterpriseGroup>RB:<ReportingBasis>"
						Criteria
							FinanceEnterpriseGroup
							ReportingBasis
						Variables
							LocalActionCode
								variable name is ActionCode
							include persistent fields from FinanceEnterpriseGroup
							include persistent fields from ReportingBasis
							LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
								variable name is CurrentTimeStamp

	Rule Blocks
 		DeleteRules
			if (FinanceEnterpriseGroup.BODTrigger)
				LocalActionCode = LocalActionCode.Delete
	
				increment bod id.VariationID
	
				trigger "ReportingBasisService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>RB:<ReportingBasis>"
					Criteria
						FinanceEnterpriseGroup
						ReportingBasis
					Variables
						LocalActionCode
							variable name is ActionCode	
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from ReportingBasis
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp

		CreateBasisYearsRules
			for each AllYearsForCalendarRel
				invoke Create ReportingBasisYear
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.ReportingBasis						= ReportingBasis
					invoked.ReportingBasisYear					= each.Year


    	CreateCommonRules
			LocalTopNode			= ReportingBasis + "_NODE"
			LedgerTopNode			= LocalTopNode
			AccountingEntityTopNode	= BasisNodeString //"NODE_" + ReportingBasis
			LocalCloseConfiguration	= first FinanceEnterpriseGroup.GeneralLedgerCloseConfiguration set.GeneralLedgerCloseConfiguration
			invoke Create AccountingEntity
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.AccountingEntity					= AccountingEntityTopNode
				invoked.Name								= Description
				invoked.Name								+= " Top Level"

				invoked.TopNode								= AccountingEntityTopNode
				invoked.IsTopNode							= true
				invoked.DimensionType						= DimensionType.Node
				invoked.LastYearClosed						= current year
				invoked.CloseConfiguration					= LocalCloseConfiguration
				invoked.FiscalYear							= LocalCloseConfiguration.first GeneralLedgerCloseYear set.GeneralLedgerCloseYear
			
			invoke Create Ledger
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.Ledger								= LedgerTopNode
				invoked.Description							= Description
				invoked.Description							+= " Top Level"

				invoked.RecordType							= 1
				invoked.Active								= true
				invoked.TopNode								= LedgerTopNode
				invoked.IsTopNode							= true

			invoke Create Ledger
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.Ledger								= DerivedCloseLedger
				invoked.Description							= DerivedCloseLedgerDescription
				invoked.RecordType							= 1
				invoked.Active								= true
				invoked.CloseLedger							= true

			LocalLedger		= FinanceEnterpriseGroup.CoreLedger
			invoke Update LedgerRel
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.Ledger								= FinanceEnterpriseGroup.CoreLedger
				invoked.Description							= FinanceEnterpriseGroup.CoreLedgerDescription
				invoked.RecordType							= 1
				invoked.Active								= true
								


			if (FinanceEnterpriseGroup.CurrencyTranslationAndRevalue)
				invoke Create Ledger
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.Ledger								= DerivedCurrencyLedger
					invoked.Description							= DerivedCurrencyLedgerDescription
					invoked.RecordType							= 1
					invoked.Active								= true
					invoked.CurrencyLedger						= true
				invoke Create LedgerHierarchy
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup				
					invoked.Ledger								= LedgerTopNode 
					invoked.SubordinateLedger					= DerivedCurrencyLedger
					invoked.TopNode								= LedgerTopNode
			invoke Create LedgerHierarchy
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup				
				invoked.Ledger								= LedgerTopNode 
				invoked.SubordinateLedger					= DerivedCloseLedger
				invoked.TopNode								= LedgerTopNode
			invoke Create LedgerHierarchy
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup				
				invoked.Ledger								= LedgerTopNode 
				invoked.SubordinateLedger					= FinanceEnterpriseGroup.CoreLedger
				invoked.TopNode								= LedgerTopNode
			if (ProcessRetainedEarnings)	
				invoke Create Ledger
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.Ledger								= DerivedRetainedEarningsLedger
					invoked.Description							= DerivedRetainedEarningsLedgerDescription
					invoked.RecordType							= 1
					invoked.Active								= true
					invoked.RetainedEarningsLedger				= true

				invoke Create LedgerHierarchy			
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.Ledger								= LedgerTopNode 
					invoked.SubordinateLedger					= DerivedRetainedEarningsLedger
					invoked.TopNode								= LedgerTopNode
			LedgerTopNodeCubeValue				= LedgerTopNode cube dimension value
			AccountingEntityTopNodeCubeValue 	= AccountingEntityTopNode cube dimension value
    
		DeleteCommonEntranceRules
			constraint (!GainLossTotalRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!BasisYearTotalRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!GeneralLedgerTotalRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!GeneralLedgerTransactionRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
#ifdef module ad
				constraint (!ADBDailyAmountRel exists)
					"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!ADBAggregateBalanceRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!AverageDailyBalanceAmountRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
			constraint (!AverageDailyBalanceAggregateRel exists)
				"RunDeleteTransactionDataActionBeforeDelete"
#endif
				invoke DeleteBudgetEntityLedger LedgerHierarchyRecordRel
				invoke Delete LedgerHierarchyRecordRel
				invoke Delete EntityHierarchyRecordRel
				LocalLedger		= DerivedCloseLedger
				invoke DeleteSystemLedger LedgerRel
				if (FinanceEnterpriseGroup.CurrencyTranslationAndRevalue)
					LocalLedger				= DerivedCurrencyLedger
					invoke DeleteSystemLedger LedgerRel
				LocalLedger		= LedgerTopNode
				invoke DeleteSystemLedger LedgerRel	
				invoke DeleteTopNode AccountingEntityRel
				include DeleteRules

		DeleteCommonActionRules
			LocalBusinessClass            = "GeneralLedgerTotal"
			LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
			invoke Delete LocalLedgerGroup

    Actions
		YearEndClose is an Instance Action
			restricted
			Action Rules
				BasisYear	+= 1

		CreateNoInit is a Create Action
			restricted
			Action Rules

				BypassActiveCodeBlockEdit = true

 			Exit Rules
 				include CreateBasisYearsRules

		Create is a Create Action
			Entrance Rules

			Action Rules
				Status	= Status.Active

 			Exit Rules
 				LocalSystemAccount	= SystemAccount.ErrorSuspense 
				constraint (first SystemAccountCheckRel exists)
					"ErrorSuspenseAccountNotSetup"

				LocalSystemAccount	= SystemAccount.RetainedEarnings
				constraint (first SystemAccountCheckRel exists)
					"RetainedEarningsAccountNotSetup"
				LocalSystemAccount	= SystemAccount.UndistributedRetainedEarnings 
				constraint (first SystemAccountCheckRel exists)
					"UndistributedRetainedEarningsAccountNotSetup"
				if (FinanceEnterpriseGroup.FinanceDimension1Required)
					constraint (SystemDimension1Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension1Label>"
				if (FinanceEnterpriseGroup.FinanceDimension2Required)
					constraint (SystemDimension2Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension2Label>"

				if (FinanceEnterpriseGroup.FinanceDimension3Required)
					constraint (SystemDimension3Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension3Label>"
				if (FinanceEnterpriseGroup.FinanceDimension4Required)
					constraint (SystemDimension4Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension4Label>"
				if (FinanceEnterpriseGroup.FinanceDimension5Required)
					constraint (SystemDimension5Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension5Label>"
				if (FinanceEnterpriseGroup.FinanceDimension6Required)
					constraint (SystemDimension6Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension6Label>"
				if (FinanceEnterpriseGroup.FinanceDimension7Required)
					constraint (SystemDimension7Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension7Label>"
				if (FinanceEnterpriseGroup.FinanceDimension8Required)
					constraint (SystemDimension8Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension8Label>"
				if (FinanceEnterpriseGroup.FinanceDimension9Required)
					constraint (SystemDimension9Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension9Label>"
				if (FinanceEnterpriseGroup.FinanceDimension10Required)
					constraint (SystemDimension10Rel exists)
						"NotSetup:_System<FinanceEnterpriseGroup.FinanceDimension10Label>"			
 				include CreateCommonRules
				include CreateBasisYearsRules

		UpdateNoRules is an Update Action
			restricted
			bypass field rules
			Exit Rules

							
		Update is an Update Action
			valid when (!IsForAccountAnalysis)
			Entrance Rules
			Action Rules
				if (Status.Delete)
					constraint (!IsABudgetBasis)
						"CannotDeleteBudgetBasis"
				if (ReportingChart changed
				or GeneralLedgerCalendar changed
				or AccountingUnitStructure changed
				or ProjectStructure changed
				or FinanceDimension1Structure changed
				or FinanceDimension2Structure changed
				or FinanceDimension3Structure changed
				or FinanceDimension4Structure changed
				or FinanceDimension5Structure changed
				or FinanceDimension6Structure changed
				or FinanceDimension7Structure changed
				or FinanceDimension8Structure changed
				or FinanceDimension9Structure changed
				or FinanceDimension10Structure changed)
					StructuresChanged	= true					
					if (IsABudgetBasis)
						confirmation required
					 		"ChangingBasisStructuresOrCalendarMayCauseIncorrectResultsIfBudgetingHasBeenSetUp.DoYouWantToProceed?"

				if (!IsForAccountAnalysis)
#ifdef module ad
					if (AverageDailyBalance changed)
						if (AverageDailyBalance)
							constraint (!AverageDailyBalanceEntityInOtherBasisRel exists)
								"CannotChange_Average_Daily_Balance;<FinanceEnterpriseGroup.AccountingEntityLabel>AlreadyExistsInReportingBasisWithAverageDailyBalanceEnabled"
						else
							constraint (!ADBDailyAmountRel exists)
								"CannotChangeAverageDailyBalanceWhenCalculationsExist"
							constraint (!AverageDailyBalanceAmountRel exists)
								"CannotChangeAverageDailyBalanceWhenCalculationsExist"
#endif				
					if (GeneralLedgerCalendar changed)
						LocalYear		= first AllReportingBasisYearRel.ReportingBasisYear	
						while (LocalYear	<= old BasisYear)
				 			LocalBasisYear				= LocalYear
							LocalBasisDateRange.End		= BasisEndDate
							LocalBasisYear				= LocalYear - 1
							LocalBasisDateRange.Begin	= BasisStartDate
							constraint (!BasisYearProcessed)
								"<LocalYear>_BasisYearIsProcessed,CannotChange"
							invoke Delete ReportingBasisYearRel
							LocalYear	+= 1
						include CreateBasisYearsRules
					else
						if (BasisYear changed)
							constraint (BasisYear		< old BasisYear)
								"CannotChangeBasisYear"
							if (BasisYear		< old BasisYear)
								LocalYear		= old BasisYear	
								while (LocalYear	> BasisYear)
						 			LocalBasisYear				= LocalYear
									LocalBasisDateRange.End		= BasisEndDate
									LocalBasisYear				= LocalYear - 1
									LocalBasisDateRange.Begin	= BasisStartDate
									constraint (!BasisYearProcessed)
										"<LocalYear>_BasisYearIsProcessed,CannotChange"
									invoke Delete ReportingBasisYearRel
									LocalYear	-= 1
									invoke OpenBasisYear ReportingBasisYearRel
					
					if  (IsABudgetBasis changed
					and !IsABudgetBasis)
						constraint (BudgetScenarioRel not exists)
							"BudgetScenariosUsingThisBasisExist"
						UseForBudgetEdit = false
					if (UseForBudgetEdit changed)
						if (UseForBudgetEdit)
							invoke CreateBudgetEntityLedger LedgerHierarchyRecordRel
						else
							constraint (BudgetTemplateRel not exists)
								"BudgetTemplatesUsingThisBasisExist"
							invoke DeleteBudgetEntityLedger LedgerHierarchyRecordRel
	
					invoke Update AccountingEntityTopNode
						invoked.Name								= Description
						invoked.Name								+= " Top Level"
					invoke Update LedgerTopNode
						invoked.Description							= Description
						invoked.Description							+= " Top Level"
	
					if (ProcessRetainedEarnings)	
						LocalLedger = DerivedRetainedEarningsLedger
						if (LedgerRel !exists)
							invoke Create Ledger
								invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
								invoked.Ledger								= DerivedRetainedEarningsLedger
								invoked.Description							= DerivedRetainedEarningsLedgerDescription
								invoked.RecordType							= 1
								invoked.Active								= true
								invoked.RetainedEarningsLedger				= true
							invoke Create LedgerHierarchy
								invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
								invoked.Ledger								= LedgerTopNode
								invoked.SubordinateLedger					= DerivedRetainedEarningsLedger
								invoked.TopNode								= LedgerTopNode
	
					if (Status.Delete)
		 				LocalLedger					= DerivedCurrencyLedger
		 				invoke Update LocalLedger
		 					invoked.UsedByATransaction		= false
		 				LocalLedger					= DerivedCloseLedger
		 				invoke Update LocalLedger
		 					invoked.UsedByATransaction		= false
		 			invoke TriggerReportingBasisLedger LedgerHierarchyRecordRel		
	 		Exit Rules
	 			if (!IsForAccountAnalysis
	 			and StructuresChanged)
	 				for each AllShadowAccountAnalysisRel
	 					invoke Update each.AccountAnalysisSettings 
	 						invoked.TransientUpdateFromOriginal		= true
							if (ReportingChart changed)
								invoked.NotifyAccountStructure		= ReportingChart
							if (AccountingUnitStructure changed)
								invoked.NotifyAccountingUnitStructure	= AccountingUnitStructure
							if (ProjectStructure changed)
								invoked.NotifyProjectStructure		= ProjectStructure
							if (FinanceDimension1Structure changed)
								invoked.NotifyDimension1Structure	= FinanceDimension1Structure
							if (FinanceDimension2Structure changed)
								invoked.NotifyDimension2Structure	= FinanceDimension2Structure
							if (FinanceDimension3Structure changed)
								invoked.NotifyDimension3Structure	= FinanceDimension3Structure
							if (FinanceDimension4Structure changed)
								invoked.NotifyDimension4Structure	= FinanceDimension4Structure
							if (FinanceDimension5Structure changed)
								invoked.NotifyDimension5Structure	= FinanceDimension5Structure
							if (FinanceDimension6Structure changed)
								invoked.NotifyDimension6Structure	= FinanceDimension6Structure
							if (FinanceDimension7Structure changed)
								invoked.NotifyDimension7Structure	= FinanceDimension7Structure
							if (FinanceDimension8Structure changed)
								invoked.NotifyDimension8Structure	= FinanceDimension8Structure
							if (FinanceDimension9Structure changed)
								invoked.NotifyDimension9Structure	= FinanceDimension9Structure
							if (FinanceDimension10Structure changed)
								invoked.NotifyDimension10Structure	= FinanceDimension10Structure
					
		Delete is a Delete Action
			valid when (CanDelete)
			Local Fields
				LocalBusinessClass		is a BusinessClass
				LocalLedgerGroup 		is a BusinessClassGroup			
			Entrance Rules
	 			if (!IsForAccountAnalysis)
					include DeleteCommonEntranceRules			
			Action Rules
	 			if (!IsForAccountAnalysis)
					include DeleteCommonActionRules

		Purge is a Purge Action
			restricted
							
		BasisYearSetup is an Instance Action
			valid when (CalendarSetupChanged)

 			Action Rules 	
				for each AllYearsForCalendarRel
					LocalYear				= each.Year
					if (ReportingBasisYearRel exists)
						invoke Update ReportingBasisYearRel
							invoked.YearClosed							= false
					else
						invoke Create ReportingBasisYear
							invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
							invoked.ReportingBasis						= ReportingBasis
							invoked.ReportingBasisYear					= each.Year

		CurrencyLedgerSetup is an Instance Action
			valid when (ValidForTranslationAndRevalue)
			
 			Action Rules
				LocalLedger				= DerivedCurrencyLedger
				if (LocalLedger exists)
					invoke Update LocalLedger
						invoked.Description							= DerivedCurrencyLedgerDescription
						invoked.RecordType							= 1
						invoked.Active								= true
						invoked.CurrencyLedger						= true
				else
					invoke Create Ledger
						invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
						invoked.Ledger								= DerivedCurrencyLedger
						invoked.Description							= DerivedCurrencyLedgerDescription
						invoked.RecordType							= 1
						invoked.Active								= true
						invoked.CurrencyLedger						= true
				if (!CheckLedgerHierarchyRel exists)
					invoke Create LedgerHierarchy
						invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup				
						invoked.Ledger								= LedgerTopNode 
						invoked.SubordinateLedger					= DerivedCurrencyLedger
						invoked.TopNode								= LedgerTopNode

		AddEntitiesFromGroup is an Instance Action
			valid when(!IsForAccountAnalysis)
			run in background
			Parameters
				PrmAccountingEntityGroup		is an AccountingEntityGroup
					default label is "<FinanceEnterpriseGroup.AccountingEntityLabel>Group"
					
			Action Rules
				for each PrmAccountingEntityGroup.AccountingEntityGroupMember set
					LocalAccountingEntity = each.AccountingEntity
					if (each.AccountingEntity.Status.Active)
						if (!AccountingEntityHierarchyLookupRel exists)
							invoke AddToReportingBasis each.AccountingEntity
							commit transaction

		CreateSummaryAccountingEntity is an Instance Action
			default label is "CreateSummary"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is like AccountingEntity
					default label is "Summary<FinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmName 					is a Name
					default label is "Name"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmName
					required
			Local Fields
				LocalAccountingEntityView is a AccountingEntity view
			Action Rules
				invoke Create AccountingEntity
					assign result to LocalAccountingEntityView
					invoked.FinanceEnterpriseGroup 			= PrmFinanceEnterpriseGroup
					invoked.AccountingEntity				= BasisSequence + "_" + PrmAccountingEntity
					invoked.DisplayAccountingEntity			= PrmAccountingEntity
					invoked.Name							= PrmName
					invoked.DimensionType					= DimensionType.Summary
					invoked.EntityBasis						= ReportingBasis
					invoked.ParentAccountingEntity			= AccountingEntityTopNode

				invoke CreateSummary AccountingEntityHierarchy
					invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
					invoked.AccountingEntity				= AccountingEntityTopNode
					invoked.SubordinateAccountingEntity   	= LocalAccountingEntityView.AccountingEntity 
					invoked.TopNode							= AccountingEntityTopNode

				invoke BuildShadowFile AccountingEntityHierarchy in foreground
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingBasis	  	  = ReportingBasis
					invoked.PrmAccountingEntity		  = LocalAccountingEntityView.AccountingEntity 

		CurrencyRevaluation is an Instance Action
			valid when (ValidForTranslationAndRevalue)
			completion message is "RunSequence<LocalRunSequence>CurrencyRevaluationComplete"
			Parameters
				PrmYear							is a GeneralLedgerCalendarYear
					default label is "Year"
				PrmSelectLedger					is a Ledger
					default label is "SelectLedger"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup		is a AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmAccount						is a GeneralLedgerChartAccount
					default label is "Account"
				PrmGeneralLedgerTotalGroup		is a GeneralLedgerTotal group
					default label is "AccountGroup"
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmPeriodOption					is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
				PrmRateOption					is Numeric 1
					default label is "RateOption"
					States
						DailyRate				value is 0
						PeriodRate				value is 1
				PrmAutoReverse					is Boolean
					default label is "AutoReverse"
				PrmFunctional					is Boolean
					default label is "Functional"
				PrmAlternate					is Boolean
					default label is "Alternate"
				PrmAlternate2					is Boolean
					default label is "Alternate2"
				PrmAlternate3					is Boolean
					default label is "Alternate3"
				PrmProject						is Boolean
					default label is "Project"
				PrmReport1						is Boolean
					default label is "Report1"
				PrmReport2						is Boolean
					default label is "Report2"
				PrmReport3						is Boolean
					default label is "Report3"
				PrmReport4						is Boolean
					default label is "Report4"
				PrmReport5						is Boolean
					default label is "Report5"
				PrmPostOption					is Numeric 1
					default label is "PostOption"
					States
						ZoneOrSystem			value is 0
						OriginatingDimension	value is 1
				PrmBySystemCode					is Boolean
					default label is "BySystemCode"
				PrmReleased						is Boolean
					default label is "CreateReleased"
				PrmSaveCalculation				is Boolean
					default label is "SaveCalculationAmount"
				PrmChangesOnly					is Boolean
					default label is "ChangedTotalsOnly"
				PrmChartSection				is Numeric 1
					default label is "ChartSection"
					States
						BalanceSheet    	value is 1
						IncomeStatement 	value is 2	
				PrmOtherDimensions				is Boolean
					default label is "OtherDimensions"
			Parameter Rules
				PrmYear
					initial value is BasisYear
					default to BasisYear
				PrmSelectLedger
					constraint (!PrmSelectLedger.CurrencyLedger)
						"CannotEnterACurrencyLedger"
					constraint (!PrmSelectLedger.CloseLedger)
						"CannotEnterACloseLedgerLedger"
				PrmAccountingEntity
					constraint (!PrmAccountingEntityGroup entered)
						"<FinanceEnterpriseGroup.AccountingEntityLabel>,_<FinanceEnterpriseGroup.AccountingEntityLabel>Group:_EnterAValueInOnlyOneOfTheseFields"
				PrmAccount
					constraint (!PrmGeneralLedgerTotalGroup entered)
						"<FinanceEnterpriseGroup.AccountLabel>,_<FinanceEnterpriseGroup.AccountLabel>Group:_EnterAValueInOnlyOneOfTheseFields"
				PrmAutoReverse
					constraint (PrmReleased)
						"AutoReverseRequiresCreateReleasedToBeSelected"

			Local Fields
				LocalRunSequence			is like RunSequence
				LocalGainLossResultView		is a GainLossResult view
				LocalLedgerForUpdate		is a Ledger
				LocalBusinessClass			is a BusinessClass
				LocalLedgerGroup			is a BusinessClassGroup
				LocalDateRange				is a DateRange

			Entrance Rules
				if (!PrmYear entered)
					PrmYear					= BasisYear
 				LocalYear				= BasisYear + 1
				constraint (!PrmYear	> LocalYear)
					"YearCannotBeGreaterThan<LocalYear>"
				if (PrmSelectLedger entered)
					LocalLedger				= PrmSelectLedger
					constraint (CheckLedgerHierarchyRel exists)
						"LedgerNotValidForBasis"
				if (PrmAccountingEntity entered)
					LocalAccountingEntity	= PrmAccountingEntity
					constraint (AccountingEntityHierarchyRecordRel exists)
						"NotValidForBasis<FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalAccountingEntity>"
				if (PrmPeriodOption entered)
					constraint (!PrmDateRange.Begin entered)
						"CannotEnterBothPeriodOptionAndDateRange"
				if (!PrmPeriodOption entered)
					constraint (PrmDateRange.Begin entered)
						"PeriodOptionOrDateRangeIsRequired"
				constraint (PrmFunctional	entered
					or 		PrmAlternate	entered
					or		PrmAlternate2	entered
					or		PrmAlternate3	entered
					or 		PrmProject		entered
					or 		PrmReport1		entered
					or		PrmReport2		entered
					or		PrmReport3		entered
					or		PrmReport4		entered
					or		PrmReport5		entered)
						"AtLeastOneCurrencyMustBeSelected"
				constraint (!UnrealizedGainAccountRel exists)
					"<first UnrealizedGainAccountRel.GeneralLedgerChartAccount>HasBlankUnrealizedGain<FinanceEnterpriseGroup.AccountLabel>"
				constraint (!UnrealizedLossAccountRel exists)
					"<first UnrealizedLossAccountRel.GeneralLedgerChartAccount>HasBlankUnrealizedLoss<FinanceEnterpriseGroup.AccountLabel>"
				constraint (PostingReportingChartAccountRel exists)
					"ChartHasNoPosting<FinanceEnterpriseGroup.AccountLabel>"

 				if (PrmProject entered)
					constraint (PrmFunctional	entered
						or 		PrmAlternate	entered
						or		PrmAlternate2	entered
						or		PrmAlternate3	entered
						or 		PrmReport1		entered
						or		PrmReport2		entered
						or		PrmReport3		entered
						or		PrmReport4		entered
						or		PrmReport5		entered)
							"AtLeastOneCurrencyMustBeSelectedWithProjectCurrency"

 				if (PrmDateRange entered)
	 				LocalBasisYear			= PrmYear
					LocalDateRange.End		= BasisEndDate
	 				LocalBasisYear			= PrmYear - 1
					LocalDateRange.Begin	= BasisStartDate
					constraint (PrmDateRange.Begin	within LocalDateRange)
						"BeginDateNotWithinBasisYearDateRange"
					constraint (PrmDateRange.End	within LocalDateRange)
						"EndDateNotWithinBasisYearDateRange"
				
				if(PrmAccount entered)		
					if (PrmChartSection.BalanceSheet)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateBalanceSheetRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromBalanceSheet"	
					if (PrmChartSection.IncomeStatement)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateIncomeStatementRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromIncomeStatement"					

 			Action Rules
				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
				if (!LocalLedgerGroup exists)
					invoke BuildLedgerBusClassGroup

				if (PrmYear			> BasisYear)
					LocalYear				= PrmYear
					if (!ReportingBasisYearRel exists)
						invoke Create ReportingBasisYear
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis				= ReportingBasis
							invoked.ReportingBasisYear			= PrmYear

 				LocalLedgerForUpdate		= DerivedCurrencyLedger
				if (!LocalLedgerForUpdate.UsedByATransaction)
	 				invoke Update LocalLedgerForUpdate
	 					invoked.UsedByATransaction		= true
 				LocalYear				= PrmYear
				invoke UpdateGainLossRunSequence ReportingBasisYearRel
				LocalRunSequence		= DerivedRunSequence
 				LocalBasisYear			= PrmYear
				LocalEndDate			= BasisEndDate
 				LocalBasisYear			= PrmYear - 1
				LocalStartDate			= BasisStartDate

				invoke Create GainLossResult
					assign result to LocalGainLossResultView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.ReportingBasis			= ReportingBasis
					invoked.GainLossResult		  	= LocalRunSequence
					invoked.RunTime				  	= current timestamp
					invoked.Ledger					= PrmSelectLedger
					invoked.AccountingEntity		= PrmAccountingEntity
					invoked.AccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.Account					= PrmAccount
					invoked.AccountGroup			= PrmGeneralLedgerTotalGroup
					invoked.DateRange				= PrmDateRange
					invoked.AutoReverse				= PrmAutoReverse
					invoked.Functional				= PrmFunctional
					invoked.Alternate				= PrmAlternate
					invoked.Alternate2				= PrmAlternate2
					invoked.Alternate3				= PrmAlternate3
					invoked.Project					= PrmProject
					invoked.Report1					= PrmReport1
					invoked.Report2					= PrmReport2
					invoked.Report3					= PrmReport3
					invoked.Report4					= PrmReport4
					invoked.Report5					= PrmReport5
					invoked.PeriodOption			= PrmPeriodOption
					invoked.RunOption				= 1
					invoked.RateOption				= PrmRateOption
					invoked.PostOption				= PrmPostOption
					invoked.BySystemCode			= PrmBySystemCode
					invoked.Released				= PrmReleased
					invoked.ChangesOnly     		= PrmChangesOnly
					invoked.SaveCalculation    		= PrmSaveCalculation
					invoked.ChartSection            = PrmChartSection
					invoked.OtherDimensions			= PrmOtherDimensions

				if(PrmSelectLedger not entered)
					for each LedgerTopNode.ChildrenRel
						if (!each.Active)
							LocalLikeLedger = each.Ledger
							invoke Create GainLossResultDetail
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ReportingBasis			= ReportingBasis
								invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
								invoked.ErrorMessage		  	= SkippingLedgerInActiveError

				if (PrmAccountingEntityGroup	entered)
					LocalAccountingEntityGroup		= PrmAccountingEntityGroup
					for each AccountingEntityGroupMemberRel
						LocalAccountingEntity		= each.AccountingEntity 
						if (each.AccountingEntity.Status.Active)						
							if (!AccountingEntityHierarchyRecordRel exists)
								invoke Create GainLossResultDetail
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ReportingBasis			= ReportingBasis
									invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
									invoked.ErrorMessage		  	= SkippingAccountingEntityError

				invoke ProcessCurrencyBasisEntity AccountingEntityHierarchy in background
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmReportingBasis			= ReportingBasis
					invoked.PrmSelectLedger				= PrmSelectLedger
					invoked.PrmCurrencyLedger			= DerivedCurrencyLedger
					invoked.PrmCloseLedger				= DerivedCloseLedger
					invoked.PrmAccountingEntity			= PrmAccountingEntity
					invoked.PrmAccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.PrmAccount					= PrmAccount
					invoked.PrmGeneralLedgerTotalGroup	= PrmGeneralLedgerTotalGroup
					invoked.PrmDateRange				= PrmDateRange
					invoked.PrmPeriodOption				= PrmPeriodOption
					invoked.PrmYearToDate.Begin			= LocalStartDate
					invoked.PrmYearToDate.End			= LocalEndDate
					invoked.PrmOption					= 1
					invoked.PrmRunSequence				= LocalRunSequence
					invoked.PrmRateOption				= PrmRateOption
					invoked.PrmPostOption				= PrmPostOption
					invoked.PrmAutoReverse				= PrmAutoReverse
					invoked.PrmFunctional				= PrmFunctional
					invoked.PrmAlternate				= PrmAlternate
					invoked.PrmAlternate2				= PrmAlternate2
					invoked.PrmAlternate3				= PrmAlternate3
					invoked.PrmProject					= PrmProject
					invoked.PrmReport1					= PrmReport1
					invoked.PrmReport2					= PrmReport2
					invoked.PrmReport3					= PrmReport3
					invoked.PrmReport4					= PrmReport4
					invoked.PrmReport5					= PrmReport5
					invoked.PrmGainLossResult			= LocalGainLossResultView.GainLossResult
					invoked.PrmBySystemCode				= PrmBySystemCode
					invoked.PrmReleased					= PrmReleased
					invoked.PrmSaveCalculation			= PrmSaveCalculation
					invoked.PrmLedgerGroup				= ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
					invoked.PrmChangesOnly     			= PrmChangesOnly
					invoked.PrmChartSection             = PrmChartSection
					invoked.PrmOtherDimensions			= PrmOtherDimensions

		CurrencyTranslation is an Instance Action
			valid when (ValidForTranslationAndRevalue)
			completion message is "RunSequence<LocalRunSequence>CurrencyTranslationComplete"
			Parameters
				PrmYear							is a GeneralLedgerCalendarYear
					default label is "Year"
				PrmSelectLedger					is a Ledger
					default label is "SelectLedger"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup		is a AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmAccount						is a GeneralLedgerChartAccount
					default label is "Account"
				PrmGeneralLedgerTotalGroup		is a GeneralLedgerTotal group
					default label is "AccountGroup"
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmPeriodOption					is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
				PrmRateOption					is Numeric 1
					default label is "RateOption"
					States
						DailyRate				value is 0
						PeriodRate				value is 1
				PrmAlternate					is Boolean
					default label is "Alternate"
				PrmAlternate2					is Boolean
					default label is "Alternat2"
				PrmAlternate3					is Boolean
					default label is "Alternate3"
				PrmProject						is Boolean
					default label is "Project"
				PrmReport1						is Boolean
					default label is "Report1"
				PrmReport2						is Boolean
					default label is "Report2"
				PrmReport3						is Boolean
					default label is "Report3"
				PrmReport4						is Boolean
					default label is "Report4"
				PrmReport5						is Boolean
					default label is "Report5"
				PrmPostOption					is Numeric 1
					default label is "PostOption"
					States
						ZoneOrSystem			value is 0
						OriginatingDimension	value is 1
				PrmBySystemCode					is Boolean
					default label is "BySystemCode"
				PrmReleased						is Boolean
					default label is "CreateReleased"
				PrmSaveCalculation				is Boolean
					default label is "SaveCalculationAmount"
				PrmChangesOnly					is Boolean
					default label is "ChangedTotalsOnly"
				PrmChartSection				is Numeric 1
					default label is "ChartSection"
					States
						BalanceSheet    	value is 1
						IncomeStatement 	value is 2	
				PrmOtherDimensions				is Boolean
					default label is "OtherDimensions"		

			Parameter Rules
				PrmYear
					initial value is BasisYear
					default to BasisYear
				PrmSelectLedger
					constraint (!PrmSelectLedger.CurrencyLedger)
						"CannotEnterACurrencyLedger"
					constraint (!PrmSelectLedger.CloseLedger)
						"CannotEnterACloseLedgerLedger"
				PrmAccountingEntity
					constraint (!PrmAccountingEntityGroup entered)
						"<FinanceEnterpriseGroup.AccountingEntityLabel>,_<FinanceEnterpriseGroup.AccountingEntityLabel>Group:_EnterAValueInOnlyOneOfTheseFields"


				PrmAccount
					constraint (!PrmGeneralLedgerTotalGroup entered)
						"<FinanceEnterpriseGroup.AccountLabel>,_<FinanceEnterpriseGroup.AccountLabel>Group:_EnterAValueInOnlyOneOfTheseFields"

			Local Fields
				LocalRunSequence			is like RunSequence
				LocalGainLossResultView		is a GainLossResult view
				LocalLedgerForUpdate		is a Ledger
				LocalBusinessClass			is a BusinessClass
				LocalLedgerGroup			is a BusinessClassGroup
				LocalDateRange				is a DateRange

			Entrance Rules
				if (!PrmYear entered)
					PrmYear					= BasisYear
 				LocalYear				= BasisYear + 1
				constraint (!PrmYear	> LocalYear)
					"YearCannotBeGreaterThan<LocalYear>"
				if (PrmSelectLedger entered)
					LocalLedger				= PrmSelectLedger
					constraint (CheckLedgerHierarchyRel exists)
						"LedgerNotValidForBasis"
				if (PrmAccountingEntity entered)
					LocalAccountingEntity	= PrmAccountingEntity
					constraint (AccountingEntityHierarchyRecordRel exists)
						"NotValidForBasis:_<FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (PrmPeriodOption entered)
					constraint (!PrmDateRange.Begin entered)
						"CannotEnterBothPeriodOptionAndDateRange"
				if (!PrmPeriodOption entered)
					constraint (PrmDateRange.Begin entered)
						"PeriodOptionOrDateRangeIsRequired"
				constraint (PrmAlternate	entered
					or		PrmAlternate2	entered
					or		PrmAlternate3	entered
					or 		PrmProject		entered
					or 		PrmReport1		entered
					or		PrmReport2		entered
					or		PrmReport3		entered
					or		PrmReport4		entered
					or		PrmReport5		entered)
						"AtLeastOneCurrencyMustBeSelected"
				constraint (!TranslationGainAccountRel exists)
					"<first TranslationGainAccountRel.GeneralLedgerChartAccount>HasBlankTranslationGain<FinanceEnterpriseGroup.AccountLabel>"
				constraint (!TranslationLossAccountRel exists)
					"<first TranslationLossAccountRel.GeneralLedgerChartAccount>HasBlankTranslationLoss<FinanceEnterpriseGroup.AccountLabel>"
				constraint (PostingReportingChartAccountRel exists)
					"ChartHasNoPosting<FinanceEnterpriseGroup.AccountLabel>"

 				if (PrmProject entered)
					constraint (PrmAlternate	entered
						or		PrmAlternate2	entered
						or		PrmAlternate3	entered
						or 		PrmReport1		entered
						or		PrmReport2		entered
						or		PrmReport3		entered
						or		PrmReport4		entered
						or		PrmReport5		entered)
							"AtLeastOneCurrencyMustBeSelectedWithProjectCurrency"

				if (PrmDateRange entered)
	 				LocalBasisYear			= PrmYear
					LocalDateRange.End		= BasisEndDate
	 				LocalBasisYear			= PrmYear - 1
					LocalDateRange.Begin	= BasisStartDate
					constraint (PrmDateRange.Begin	within LocalDateRange)
						"BeginDateNotWithinBasisYearDateRange"
					constraint (PrmDateRange.End	within LocalDateRange)
						"EndDateNotWithinBasisYearDateRange"
						
				if(PrmAccount entered)		
					if (PrmChartSection.BalanceSheet)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateBalanceSheetRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromBalanceSheet"	
					if (PrmChartSection.IncomeStatement)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateIncomeStatementRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromIncomeStatement"
									
 			Action Rules
				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
				if (!LocalLedgerGroup exists)
					invoke BuildLedgerBusClassGroup
				if (PrmYear			> BasisYear)
					LocalYear				= PrmYear
					if (!ReportingBasisYearRel exists)
						invoke Create ReportingBasisYear
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis				= ReportingBasis
							invoked.ReportingBasisYear			= PrmYear

 				LocalLedgerForUpdate		= DerivedCurrencyLedger
				if (!LocalLedgerForUpdate.UsedByATransaction)
	 				invoke Update LocalLedgerForUpdate
	 					invoked.UsedByATransaction		= true
 				LocalYear				= PrmYear
				invoke UpdateGainLossRunSequence ReportingBasisYearRel
				LocalRunSequence		= DerivedRunSequence
 				LocalBasisYear			= PrmYear
				LocalEndDate			= BasisEndDate
 				LocalBasisYear			= PrmYear - 1
				LocalStartDate			= BasisStartDate

				invoke Create GainLossResult
					assign result to LocalGainLossResultView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.ReportingBasis			= ReportingBasis
					invoked.GainLossResult		  	= LocalRunSequence
					invoked.RunTime				  	= current timestamp
					invoked.Ledger					= PrmSelectLedger
					invoked.AccountingEntity		= PrmAccountingEntity
					invoked.AccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.Account					= PrmAccount
					invoked.AccountGroup			= PrmGeneralLedgerTotalGroup
					invoked.DateRange				= PrmDateRange
					invoked.AutoReverse				= false
					invoked.Functional				= false
					invoked.Alternate				= PrmAlternate
					invoked.Alternate2				= PrmAlternate2
					invoked.Alternate3				= PrmAlternate3
					invoked.Project					= PrmProject
					invoked.Report1					= PrmReport1
					invoked.Report2					= PrmReport2
					invoked.Report3					= PrmReport3
					invoked.Report4					= PrmReport4
					invoked.Report5					= PrmReport5
					invoked.PeriodOption			= PrmPeriodOption
					invoked.RunOption				= 2
					invoked.RateOption				= 1
					invoked.PostOption				= PrmPostOption
					invoked.BySystemCode			= PrmBySystemCode
					invoked.Released				= PrmReleased
					invoked.ChangesOnly     		= PrmChangesOnly
					invoked.SaveCalculation    		= PrmSaveCalculation
					invoked.ChartSection            = PrmChartSection
					invoked.OtherDimensions			= PrmOtherDimensions

				if(PrmSelectLedger not entered)
					for each LedgerTopNode.ChildrenRel
						if (!each.Active)
							LocalLikeLedger = each.Ledger
							invoke Create GainLossResultDetail
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ReportingBasis			= ReportingBasis
								invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
								invoked.ErrorMessage		  	= SkippingLedgerInActiveError

				if (PrmAccountingEntityGroup	entered)
					LocalAccountingEntityGroup		= PrmAccountingEntityGroup
					for each AccountingEntityGroupMemberRel
						LocalAccountingEntity		= each.AccountingEntity
						if (each.AccountingEntity.Status.Active)						 
							if (!AccountingEntityHierarchyRecordRel exists)
								invoke Create GainLossResultDetail
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ReportingBasis			= ReportingBasis
									invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
									invoked.ErrorMessage		  	= SkippingAccountingEntityError


				invoke ProcessCurrencyBasisEntity AccountingEntityHierarchy in background
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmReportingBasis			= ReportingBasis
					invoked.PrmSelectLedger				= PrmSelectLedger
					invoked.PrmCurrencyLedger			= DerivedCurrencyLedger
					invoked.PrmCloseLedger				= DerivedCloseLedger
					invoked.PrmAccountingEntity			= PrmAccountingEntity
					invoked.PrmAccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.PrmAccount					= PrmAccount
					invoked.PrmGeneralLedgerTotalGroup	= PrmGeneralLedgerTotalGroup
					invoked.PrmDateRange				= PrmDateRange
					invoked.PrmPeriodOption				= PrmPeriodOption
					invoked.PrmYearToDate.Begin			= LocalStartDate
					invoked.PrmYearToDate.End			= LocalEndDate
					invoked.PrmOption					= 2
					invoked.PrmRunSequence				= LocalRunSequence
					invoked.PrmRateOption				= 1
					invoked.PrmPostOption				= PrmPostOption
					invoked.PrmAutoReverse				= false
					invoked.PrmFunctional				= false
					invoked.PrmAlternate				= PrmAlternate
					invoked.PrmAlternate2				= PrmAlternate2
					invoked.PrmAlternate3				= PrmAlternate3
					invoked.PrmProject					= PrmProject
					invoked.PrmReport1					= PrmReport1
					invoked.PrmReport2					= PrmReport2
					invoked.PrmReport3					= PrmReport3
					invoked.PrmReport4					= PrmReport4
					invoked.PrmReport5					= PrmReport5
					invoked.PrmGainLossResult			= LocalGainLossResultView.GainLossResult
					invoked.PrmBySystemCode				= PrmBySystemCode
					invoked.PrmReleased					= PrmReleased
					invoked.PrmSaveCalculation			= PrmSaveCalculation
					invoked.PrmLedgerGroup				= ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
					invoked.PrmChangesOnly     			= PrmChangesOnly
					invoked.PrmChartSection          	= PrmChartSection
					invoked.PrmOtherDimensions			= PrmOtherDimensions

		DeleteTransactionData is an Instance Action
			valid when (Status.Delete)
			confirmation required
				"AllRecordsAssociatedWithThisReportingBasisWillBeDeleted"
			Action Rules
				invoke DeleteData GainLossResult in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData GainLossResultDetail in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData GainLossTotal in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 
					initialize invoked.PrmAccountingEntity 
					initialize invoked.PrmCurrencyLedger 

				invoke DeleteData ReportingBasisCloseResult in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData ReportingBasisCloseDetail in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData ReportingBasisYearTotal in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

#ifdef module ad
				invoke DeleteData ADBDailyAmount in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData ADBAggregateBalance in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData AverageDailyBalanceAmount in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 

				invoke DeleteData AverageDailyBalanceAggregate in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmReportingBasis			= ReportingBasis 
#endif
				for each EntityHierarchyRecordRel
					invoke DeleteData GeneralLedgerJournalControl in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
						invoked.PrmLedger					= DerivedCurrencyLedger 

					invoke DeleteData GeneralLedgerTransaction in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
						invoked.PrmLedger					= DerivedCurrencyLedger 

					invoke PurgeData GLTransactionDetail in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
						invoked.PrmLedger					= DerivedCurrencyLedger 
						invoked.PrmPostingDate	 			= DerivedLastEndDate
						invoked.PrmBusinessClassName		= "GeneralLedgerTransaction"

					invoke DeleteData GeneralLedgerTotal in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
						invoked.PrmCurrencyLedger			= DerivedCurrencyLedger 
						invoked.PrmCloseLedger				= DerivedCloseLedger 

		PurgeGainLossTransactionDetail is a Set Action
			valid when(!IsForAccountAnalysis)
			confirmation required
				"AllRecordsWillBeDeleted"
			Parameters
				FinanceEnterpriseGroup
				PrmReportingBasis			is a ReportingBasis
					default label is "ReportingBasis"
				PrmReportingBasisGroup		is a ReportingBasis group
					default label is "ReportingBasisGroup"
				PrmPostingDate				is Date
					default label is "PostingDate"

			Parameter Rules
				PrmReportingBasis
					constraint (!PrmReportingBasisGroup entered)
						"CannotEnterBothReportingBasisAndReportingBasisGroup"
				PrmPostingDate
					required

			Instance Selection
				where (FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				and  !IsForAccountAnalysis
				and   ((PrmReportingBasis entered
				and     ReportingBasis			= PrmReportingBasis)
				or     !PrmReportingBasis entered)
				and   ((PrmReportingBasisGroup entered
				and     ReportingBasis within PrmReportingBasisGroup)
				or     !PrmReportingBasisGroup entered))

			Action Rules
				Empty Set Rules

				Set Rules
				Instance Rules
					for each EntityHierarchyRecordRel
						invoke PurgeData GLTransactionDetail in background
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
							invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
							invoked.PrmLedger					= DerivedCurrencyLedger 
							invoked.PrmPostingDate	 			= PrmPostingDate
							invoked.PrmBusinessClassName		= "GeneralLedgerTransaction"
					commit transaction

		DeleteEntityOrLedgerData is an Instance Action
			valid when(!IsForAccountAnalysis)
			confirmation required
				"DeleteDataForSelection"
			Parameters
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup		is a AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmLedger						is a Ledger
					default label is "Ledger"
			Parameter Rules
				PrmAccountingEntity
					constraint (!PrmAccountingEntityGroup entered)
						"CannotEnterBoth_\Accounting_\EntityAnd_\Accounting_\Entity_\Group"
					LocalAccountingEntity	= PrmAccountingEntity
					constraint (AccountingEntityHierarchyRecordRel exists)
						"NotValidForBasis:_<FinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmLedger
					constraint (!PrmAccountingEntity entered)
						"CannotEnterLedgerAndAccountingEntity"
					constraint (!PrmAccountingEntityGroup entered)
						"CannotEnterLedgerAndAccountingEntityGroup"
					LocalLedger			= PrmLedger
					constraint (CheckLedgerHierarchyRel exists)
						"LedgerNotValidForBasis"
					constraint (PrmLedger.UserDefinedLedger)
						"OnlyUserDefinedLedgerValid"

			Action Rules
				if (PrmAccountingEntityGroup entered)
					LocalAccountingEntityGroup		= PrmAccountingEntityGroup
					for each AccountingEntityGroupMemberRel
						LocalAccountingEntity		= each.AccountingEntity 
						if (each.AccountingEntity.Status.Active)						
							if (AccountingEntityHierarchyRecordRel exists)
								invoke DeleteData ReportingBasisYearTotal in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmReportingBasis			= ReportingBasis 
									invoked.PrmAccountingEntity			= LocalAccountingEntity 
								invoke DeleteData GeneralLedgerJournalControl in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmAccountingEntity			= LocalAccountingEntity 
									invoked.PrmLedger					= DerivedCurrencyLedger 
								invoke DeleteData GeneralLedgerTransaction in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmAccountingEntity			= LocalAccountingEntity 
									invoked.PrmLedger					= DerivedCurrencyLedger 
								invoke PurgeData GLTransactionDetail in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmAccountingEntity			= LocalAccountingEntity
									invoked.PrmLedger					= DerivedCurrencyLedger 
									invoked.PrmPostingDate	 			= DerivedLastEndDate
									invoked.PrmBusinessClassName		= "GeneralLedgerTransaction"
								invoke DeleteData GeneralLedgerTotal in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmAccountingEntity			= LocalAccountingEntity
									invoked.PrmCurrencyLedger			= DerivedCurrencyLedger 
									invoked.PrmCloseLedger				= DerivedCloseLedger 
								invoke DeleteData GainLossTotal in background
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
									invoked.PrmReportingBasis			= ReportingBasis 
									invoked.PrmAccountingEntity 		= LocalAccountingEntity
									invoked.PrmCurrencyLedger			= DerivedCurrencyLedger

				if (PrmAccountingEntity entered
				or	PrmLedger entered)
					invoke DeleteData ReportingBasisYearTotal in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmReportingBasis			= ReportingBasis 
						invoked.PrmAccountingEntity			= PrmAccountingEntity 
						invoked.PrmPrimaryLedger			= PrmLedger
				if (PrmAccountingEntity entered)
					invoke DeleteData GeneralLedgerJournalControl in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= PrmAccountingEntity 
						invoked.PrmLedger					= DerivedCurrencyLedger 
					invoke DeleteData GeneralLedgerTransaction in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= PrmAccountingEntity 
						invoked.PrmLedger					= DerivedCurrencyLedger 
					invoke PurgeData GLTransactionDetail in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmLedger					= DerivedCurrencyLedger 
						invoked.PrmPostingDate	 			= DerivedLastEndDate
						invoked.PrmBusinessClassName		= "GeneralLedgerTransaction"
					invoke DeleteData GeneralLedgerTotal in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmCurrencyLedger			= DerivedCurrencyLedger 
						invoked.PrmCloseLedger				= DerivedCloseLedger 
					invoke DeleteData GainLossTotal in background
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmReportingBasis			= ReportingBasis 
						invoked.PrmAccountingEntity 		= PrmAccountingEntity
						invoked.PrmCurrencyLedger			= DerivedCurrencyLedger
				if (PrmLedger entered)
					for each EntityHierarchyRecordRel
						invoke DeleteData GeneralLedgerJournalControl in background
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
							invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
							invoked.PrmLedger					= DerivedCurrencyLedger 
							invoked.PrmPrimaryLedger			= PrmLedger
						invoke DeleteData GeneralLedgerTransaction in background
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
							invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity 
							invoked.PrmLedger					= DerivedCurrencyLedger 
							invoked.PrmPrimaryLedger			= PrmLedger 
						invoke PurgeData GLTransactionDetail in background
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
							invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
							invoked.PrmLedger					= DerivedCurrencyLedger 
							invoked.PrmPostingDate	 			= DerivedLastEndDate
							invoked.PrmBusinessClassName		= "GeneralLedgerTransaction"
							invoked.PrmPrimaryLedger			= PrmLedger 
						invoke DeleteData GeneralLedgerTotal in background
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
							invoked.PrmAccountingEntity			= each.SubordinateAccountingEntity
							invoked.PrmCurrencyLedger			= DerivedCurrencyLedger 
							invoked.PrmCloseLedger				= DerivedCloseLedger 
							invoked.PrmPrimaryLedger			= PrmLedger 

		BuildRetainedEarningsBusClassGroup is an Instance Action		
			restricted
			Parameters
			Local Fields
				LocalBusinessClass			is a BusinessClass
				LocalLedgerGroup			is a BusinessClassGroup
				LocalLedgerCondition		is LPLText
				LocalQuote					is Alpha 1
			Action Rules
				LocalQuote				= "\""
				LocalLedgerCondition	= "(("
				for each LedgerTopNode.RetainedEarningsProcessRel
					if (LocalLedgerCondition = "((")
						LocalLedgerCondition += "(GeneralLedgerTotal.Ledger="
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += each.Ledger
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += ")"
					else
						LocalLedgerCondition += " or (GeneralLedgerTotal.Ledger="
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += each.Ledger
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += ")"
				LocalLedgerCondition += ") and ((GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Revenue) or (GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Expense)))"
				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "/" + "RE" + "_")
				if (!LocalLedgerGroup exists)
					invoke Create BusinessClassGroup
						invoked.BusinessClass         = LocalBusinessClass
						invoked.BusinessClassGroup    = LocalLedgerGroup
						invoked.Description           = ("Group For RE Process " + ReportingBasis)
						invoked.Active                = true
						invoked.Condition             = LocalLedgerCondition
				else
					invoke Update LocalLedgerGroup
						invoked.Condition             = LocalLedgerCondition

		BuildLedgerBusClassGroup is an Instance Action
			restricted
			Parameters
			Local Fields
				LocalBusinessClass			is a BusinessClass
				LocalLedgerGroup			is a BusinessClassGroup
				LocalPmyLedgerCondition		is LPLText
				LocalLedgerCondition		is LPLText
				LocalQuote					is Alpha 1

			Action Rules
				LocalQuote				= "\""
				LocalPmyLedgerCondition	= "("
				LocalLedgerCondition	= "("
				for each LedgerTopNode.ChildrenRel
					if (LocalPmyLedgerCondition = "(")
						LocalPmyLedgerCondition += "(GeneralLedgerTotal.PrimaryLedger="
						LocalPmyLedgerCondition += LocalQuote
						LocalPmyLedgerCondition += each.Ledger
						LocalPmyLedgerCondition += LocalQuote
						LocalPmyLedgerCondition += ")"
						
						LocalLedgerCondition += "(GeneralLedgerTotal.Ledger="
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += each.Ledger
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += ")"
					else
						LocalPmyLedgerCondition += " or (GeneralLedgerTotal.PrimaryLedger="
						LocalPmyLedgerCondition += LocalQuote
						LocalPmyLedgerCondition += each.Ledger
						LocalPmyLedgerCondition += LocalQuote
						LocalPmyLedgerCondition += ")"
						
						LocalLedgerCondition += " or (GeneralLedgerTotal.Ledger="
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += each.Ledger
						LocalLedgerCondition += LocalQuote
						LocalLedgerCondition += ")"
				LocalPmyLedgerCondition += ")"
				LocalLedgerCondition += ")"

				LocalPmyLedgerCondition += " and "
				LocalPmyLedgerCondition += LocalLedgerCondition

				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")

				if (!LocalLedgerGroup exists)
					invoke Create BusinessClassGroup
						invoked.BusinessClass         = LocalBusinessClass
						invoked.BusinessClassGroup    = LocalLedgerGroup
						invoked.Description           = ("Group For Basis " + ReportingBasis)
						invoked.Active                = true
						invoked.Condition             = LocalPmyLedgerCondition
				else
					invoke Update LocalLedgerGroup
						invoked.Condition             = LocalPmyLedgerCondition							


		BuildAccountBusClassGroup is an Instance Action
			restricted
			Local Fields
				LocalBusinessClass			is a BusinessClass
				LocalISAccountGroup			is a BusinessClassGroup
				LocalPmyAccountCondition	is LPLText
				LocalQuote					is Alpha 1
				
			Action Rules
				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalISAccountGroup           = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_IS_")
									
				if (IncomeStatmementAccountsWithCloseToAccountRel exists)
					LocalQuote				 = "\""
					LocalPmyAccountCondition = "("
					for each IncomeStatmementAccountsWithCloseToAccountRel
						if (LocalPmyAccountCondition = "(")
							LocalPmyAccountCondition += "(GeneralLedgerTotal.GeneralLedgerChartAccount="
							LocalPmyAccountCondition += LocalQuote
							LocalPmyAccountCondition += each.GeneralLedgerChartAccount
							LocalPmyAccountCondition += LocalQuote
							LocalPmyAccountCondition += ")"
						else
							LocalPmyAccountCondition += " or (GeneralLedgerTotal.GeneralLedgerChartAccount="
							LocalPmyAccountCondition += LocalQuote
							LocalPmyAccountCondition += each.GeneralLedgerChartAccount
							LocalPmyAccountCondition += LocalQuote
							LocalPmyAccountCondition += ")"
	
					LocalPmyAccountCondition += ")"
					
					if (!LocalISAccountGroup exists)
						invoke Create BusinessClassGroup
							invoked.BusinessClass         = LocalBusinessClass
							invoked.BusinessClassGroup    = LocalISAccountGroup
							invoked.Description           = ("Close-to Account Group For Basis " + ReportingBasis)
							invoked.Active                = true
							invoked.Condition             = LocalPmyAccountCondition
					else
						invoke Update LocalISAccountGroup
							invoked.Condition             = LocalPmyAccountCondition
				else
					if (LocalISAccountGroup exists)
						invoke Delete LocalISAccountGroup	
						

		ProcessDailyAverage is an Instance Action
			valid when (AverageDailyBalance)
			completion message is "ProcessDailyAverageComplete"
			Parameters
				FinanceEnterpriseGroup
				ReportingBasis
				PrmRunDate				is Date
					default label is "RunDate"
			Parameter Rules
				FinanceEnterpriseGroup
					force default to this instance.FinanceEnterpriseGroup
				ReportingBasis
					force default to this instance.ReportingBasis
				PrmRunDate
					initial value is ADBRunDate
					default to ADBRunDate
					if (ADBRunDate entered)
						constraint (ADBRunDate		<= PrmRunDate)
							"RunDateCannotBeLessThanLastRunDate"
			Local Fields
				LocalAsyncActionRequestId			is a AsyncActionRequest
				LocalBasisYearDateRange				is a DateRange
 			Action Rules
				LocalEndDate 		 			= PrmRunDate	
				LocalJulianDate		 			= JulianDate
				LocalPeriodType		 			= 1			
				LocalProcessBasisYear			= BasisYear
				LocalBasisYearDateRange.End		= first PeriodBasisYearRel.DerivedEndDate
				LocalBasisYearDateRange.Begin	= first PeriodBasisYearRel.DerivedStartDate
				constraint (MatchingGeneralLedgerCalendarPeriodRel exists)
					"RunDateNotInCalendar"
				if (ADBRunDate not entered)
					constraint (PrmRunDate within LocalBasisYearDateRange)
						"FirstTimeRunDateMustBeWithinCurrentBasisYear"

				LocalGeneralLedgerCalendarDate = PrmRunDate
				if (!LocalGeneralLedgerCalendarDate exists
				and FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
					invoke PurgeData GeneralLedgerCalendarDate in background
						assign async action request id to LocalAsyncActionRequestId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmCalendar					= GeneralLedgerCalendar
					invoke BuildCalendarDateAndPeriod GeneralLedgerCalendarPeriod in background
						run after LocalAsyncActionRequestId
						assign async action request id to LocalAsyncActionRequestId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmCalendar					= GeneralLedgerCalendar

#ifdef module ad
				invoke ProcessDailyAverage AccountingEntityHierarchy in background
					run after LocalAsyncActionRequestId
					invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmReportingBasis		= ReportingBasis
	 				if (ADBRunDate			!= PrmRunDate)
						invoked.PrmADBFirstRun		= true
 					else
						invoked.PrmADBFirstRun		= false
					invoked.PrmLastRunDate			= ADBRunDate
					invoked.PrmRunDate				= PrmRunDate
 				ADBRunDate				= PrmRunDate
#endif
#ifdef module ad
		BuildDailyTotalForADB is an Instance Action
			default label is "EnableADB"
			valid when (AllowBuildDailyTotalForADB)

			Local Fields
				BackgroundGroupAsyncId			is a AsyncActionRequest
			Action Rules
				initialize BackgroundGroupAsyncId
				LocalProcessBasisYear	= BasisYear	

				AverageDailyBalanceStatus = AverageDailyBalanceStatus.Initiating

				invoke BuildDailyPeriod GeneralLedgerCalendarPeriod in background
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar               = GeneralLedgerCalendar
					invoked.PrmYear                   = BasisYear
					invoked.PrmCreateTopNodes		  = true

				for each FromBasisYearOnwardsRel
					invoke PurgeDayPeriodType DailyCalendarPeriod			
						run after action background group BackgroundGroupAsyncId
						assign async background group id to BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmCalendarTopNode			= GeneralLedgerCalendar.TopNode
						invoked.PrmYear						= each.Year
					invoke BuildDailyPeriod each in background
						run after action background group BackgroundGroupAsyncId
						assign async background group id to BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmCalendar               = GeneralLedgerCalendar
						invoked.PrmYear                   = each.Year
						invoked.PrmEndYear				  = each.Year
						invoked.PrmCreateBeginningBalance = true
						invoked.PrmCreateDailyPeriods	  = true

				invoke ProcessBuildDailyTotal AccountingEntity in background
					run after action background group BackgroundGroupAsyncId
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingBasis         = ReportingBasis
					invoked.PrmBeginBalancePeriod     = CurrentBeginBalancePeriod
					invoked.PrmStartPeriod            = first PeriodBasisYearRel.StartDateJulian
					invoked.PrmEndPeriod              = last ValidCalendarYearsRel.EndDateJulian

				invoke BuildDailyTotalForADBCompleted in background
					run after action background group BackgroundGroupAsyncId

		BuildDailyTotalForADBCompleted is an Instance Action
			restricted
			Action Rules
				AverageDailyBalanceStatus = AverageDailyBalanceStatus.Active

		BuildADBByYear is an Instance Action
			default label is "RebuildADBByYear"
			valid when (AverageDailyBalanceStatus.Active)
			Parameters
				PrmYear						is a GeneralLedgerCalendarYear
					default label is "Year"
				EntityOption			is Numeric 1
					States
						All				value is 0
						Single			value is 1
				PrmAccountingEntity			is an AccountingEntity
					default label is "AccountingEntity"
				PrmSystemUREAccountOnly		is Boolean
					default label is "SystemUREAccountOnly"

			Parameter Rules
				PrmYear
					required
				PrmAccountingEntity
					if (EntityOption.Single)
						required
							"<FinanceEnterpriseGroup.AccountingEntityLabel>IsRequired"
					else
						PrmAccountingEntity = blank
			Local Fields
				BackgroundGroupAsyncId			is a AsyncActionRequest
			Action Rules
				initialize BackgroundGroupAsyncId
				LocalYear				= PrmYear		
				LocalProcessBasisYear	= PrmYear		

				AverageDailyBalanceStatus = AverageDailyBalanceStatus.Initiating

				invoke PurgeDayPeriodType DailyCalendarPeriod			
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmCalendarTopNode			= GeneralLedgerCalendar.TopNode
					invoked.PrmYear						= PrmYear

				invoke BuildDailyPeriod GeneralLedgerCalendarPeriod in background
					run after action background group BackgroundGroupAsyncId
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar               = GeneralLedgerCalendar
					invoked.PrmYear                   = PrmYear
					invoked.PrmEndYear				  = PrmYear
					invoked.PrmCreateBeginningBalance = true
					invoked.PrmCreateDailyPeriods	  = true

				if (AccountingEntity entered)
					if (not PrmSystemUREAccountOnly)	
						invoke GetBeginBalance GeneralLedgerTotal in background
							run after action background group BackgroundGroupAsyncId
							invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
							invoked.PrmAccountingEntity       = PrmAccountingEntity
							invoked.PrmReportingBasis         = ReportingBasis
							invoked.PrmBeginBalancePeriod     = DerivedBeginingBalancePeriodString
					invoke InitializeTotals DailyPeriodTotal in background
						run after action background group BackgroundGroupAsyncId	
						assign async action request id to BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmAccountingEntity       = PrmAccountingEntity
						invoked.PrmStartPeriod            = first PeriodBasisYearRel.StartDateJulian
						invoked.PrmEndPeriod              = first PeriodBasisYearRel.EndDateJulian
						invoked.PrmSystemUREAccountOnly   = PrmSystemUREAccountOnly
					invoke BuildDailyTotal GeneralLedgerTransaction in background
						run after action background group BackgroundGroupAsyncId
						assign async action request id to BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmAccountingEntity       = PrmAccountingEntity
						invoked.PrmStartPeriod            = first PeriodBasisYearRel.StartDateJulian
						invoked.PrmEndPeriod              = first PeriodBasisYearRel.EndDateJulian
						invoked.PrmSystemUREAccountOnly   = PrmSystemUREAccountOnly
				else
					invoke ProcessBuildDailyTotal AccountingEntity in background
						run after action background group BackgroundGroupAsyncId
						assign async action request id to BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmReportingBasis         = ReportingBasis
						invoked.PrmBeginBalancePeriod     = DerivedBeginingBalancePeriodString
						invoked.PrmStartPeriod            = first PeriodBasisYearRel.StartDateJulian
						invoked.PrmEndPeriod              = first PeriodBasisYearRel.EndDateJulian
						invoked.PrmSystemUREAccountOnly   = PrmSystemUREAccountOnly	
				
				invoke BuildDailyTotalForADBCompleted in background
					run after action background group BackgroundGroupAsyncId
#endif

		AssignJournalReferenceNumber is an Instance Action
			completion message is "AssignJournalReferenceNumberSubmitted"			
			valid when (AllowedToAssignJournalReferenceNumber)
			Parameters
				PrmYearOption				is Numeric 1
					default label is "YearOption"
					States
						CurrentYear	  value is 1
						PreviousYear  value is 2
				PrmPeriodEndDate			is Date
					default label is "PeriodEndDate"
				PrmAccountingEntityOption	is Numeric 1
					default label is "AccountingEntityOption"
        			States
        				All		  	  value is 1
        				Single	  	  value is 2
				PrmAccountingEntity			is a AccountingEntity	
					default label is "AccountingEntity"
						
			Parameter Rules
				PrmYearOption
					required
					
				PrmPeriodEndDate
					if (PrmYearOption.CurrentYear)
						LocalProcessBasisYear    = BasisYear

						LocalEndDate 		 = PrmPeriodEndDate
						LocalJulianDate		 = JulianDate
						LocalStartDateJulian = PeriodBasisYearRel.StartDateJulian
						LocalEndDateJulian	 = PeriodBasisYearRel.EndDateJulian		
															
						constraint (LocalStartDateJulian <= LocalJulianDate
						and LocalEndDateJulian >= LocalJulianDate)
							"PeriodEndDateMustBeWithinTheBasisYear"
						required
							
        		PrmAccountingEntityOption 
 					required
				
				PrmAccountingEntity
					if (PrmAccountingEntityOption.Single)
    	    			LocalAccountingEntity = PrmAccountingEntity
						constraint (AccountingEntityHierarchyLookupRel exists)	
							"AccountingEntityMustBeUnderTheReportingBasis"
						required	
					
			Local Fields
    	        LocalDate				is Date
						
			Entrance Rules
				if (PrmYearOption.CurrentYear)
					LocalEndDate 		 = PrmPeriodEndDate
					LocalJulianDate		 = JulianDate
					LocalYear 	   		 = BasisYear
					LocalBasisYear		 = BasisYear													
					LocalPeriodType		 = last GeneralLedgerCalendarPeriodBasisYearRel.PeriodType
					LocalDate			 = MatchingGeneralLedgerCalendarPeriodRel.DerivedEndDate
					LocalStartDateJulian = first GeneralLedgerCalendarPeriodYearRel.StartDateJulian		
					LocalEndDateJulian	 = first MatchingGeneralLedgerCalendarPeriodRel.EndDateJulian   
				
				if (PrmYearOption.PreviousYear)
					LocalProcessBasisYear = (BasisYear - 1)
					LocalStartDateJulian = PeriodBasisYearRel.StartDateJulian
					LocalEndDateJulian	 = PeriodBasisYearRel.EndDateJulian
					
			Action Rules
			
				if (PrmYearOption.PreviousYear)
					confirmation required
						"Warning:_\AllJournalRecordsFromPreviousYearWillBeResequenced._\Continue?"		
						
				if (PrmYearOption.CurrentYear)
					confirmation required
						"Warning:_\AllJournalRecordsUpTo_<LocalDate>_periodEndDateWillBeResequenced._\Continue?"					
							
				if (PrmAccountingEntity entered)
					LocalAccountingEntity = PrmAccountingEntity
					invoke Delete GeneralLedgerJournalControlRefRel
				else
					invoke Delete AllGeneralLedgerJournalControlRefRel	
			Exit Rules	
    	    	if (PrmAccountingEntityOption.Single)	    	
    	    		LocalAccountingEntity = PrmAccountingEntity
					invoke CreateJournalControlRef in background
						assign async action request id to LocalAsyncId
						invoked.PrmAccountingEntity			= LocalAccountingEntity
						invoked.PrmStartDateJulian			= LocalStartDateJulian
						invoked.PrmEndDateJulian			= LocalEndDateJulian	
						invoked.PrmBasisYear				= LocalProcessBasisYear	

				else
					for each AccountingEntityHierarchyDetailRel
						LocalAccountingEntity	=	each.SubordinateAccountingEntity
						invoke CreateJournalControlRef in background
							invoked.PrmAccountingEntity			= LocalAccountingEntity
							invoked.PrmStartDateJulian			= LocalStartDateJulian
							invoked.PrmEndDateJulian			= LocalEndDateJulian	
							invoked.PrmBasisYear				= LocalProcessBasisYear						
    	            		
				invoke Update 
					if (PrmPeriodEndDate entered)
						invoked.JournalReferenceLastPeriodEndDate = LocalDate
					invoked.JournalReferenceLastRunDate = current corporate date
					
				invoke JournalReferenceNumberNotification in background
					run after LocalAsyncId	
					
		JournalReferenceNumberNotification is an Instance Action
			restricted
			run in background
			Action Rules
				LocalActor = actor	
				send notification												
					to LocalActor
					description is "AssignJournalReferenceNumberCompleted"
					priority is medium
					detail is "ResultsCanBeSeenInJournalReferenceReport"										

		CreateJournalControlRef is an Instance Action
			restricted
			run in background
			Parameters
				PrmAccountingEntity				is a AccountingEntity
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
    	        PrmBasisYear					is a Year
    	        PrmLedger						is like Ledger
 			Action Rules
				if (ReportingBasis.ResetNumericSequence.PerLedger)
					invoke CreateJournalControlRefPerLedger in foreground
						invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmStartDateJulian			= PrmStartDateJulian
						invoked.PrmEndDateJulian			= PrmEndDateJulian	
						invoked.PrmBasisYear				= PrmBasisYear
						invoked.PrmFirstProcessing			= true
				else
				if (ReportingBasis.ResetNumericSequence.PerSystem)
					invoke CreateGeneralLedgerJournalControlRefPerSystem GeneralLedgerJournalControl
						invoked.PrmReportingBasis 				= ReportingBasis	
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= PrmAccountingEntity
						invoked.PrmLedgerTopNode				= LedgerTopNode
						invoked.PrmStartDateJulian	 			= PrmStartDateJulian
						invoked.PrmEndDateJulian				= PrmEndDateJulian	
						invoked.PrmBasisYear					= PrmBasisYear
				else
				if (ReportingBasis.ResetNumericSequence.PerLedgerAndSystem)
					invoke CreateJournalControlRefPerLedgerSystem in foreground
						invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmBasisYear				= PrmBasisYear
						invoked.PrmStartDateJulian			= PrmStartDateJulian
						invoked.PrmEndDateJulian			= PrmEndDateJulian	
						invoked.PrmFirstProcessing			= true
				else				
					invoke CreateGeneralLedgerJournalControlRef GeneralLedgerJournalControl
						invoked.PrmReportingBasis 				= ReportingBasis	
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= PrmAccountingEntity
						invoked.PrmLedgerTopNode				= LedgerTopNode
						invoked.PrmStartDateJulian				= PrmStartDateJulian
						invoked.PrmEndDateJulian				= PrmEndDateJulian	
						invoked.PrmBasisYear					= PrmBasisYear
							
		CreateJournalControlRefPerLedger is an Instance Action
			restricted
			run in foreground
			Parameters
				PrmAccountingEntity				is a AccountingEntity
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
    	        PrmBasisYear					is a Year
    	        PrmFirstProcessing				is Boolean
    	        PrmLedger						is a Ledger
    	        PrmStartingNumber				is Numeric 14
    	    Parameter Rules
    	    	PrmAccountingEntity
    	    		LocalAccountingEntity 	= PrmAccountingEntity
    	    	PrmBasisYear
    	    		LocalYear			  	= PrmBasisYear
    	    	PrmStartDateJulian
    	    		LocalStartDateJulian	= PrmStartDateJulian
    	    	PrmEndDateJulian
    	    		LocalEndDateJulian		= PrmEndDateJulian
    	    	PrmLedger
    	    		LocalLedger 			= PrmLedger
				PrmStartingNumber
					LocalStartingNumber		= PrmStartingNumber
    	    Local Fields
    	    	LocalSubordinateLedger			is a Ledger
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6				
				LocalStartingNumber				is Numeric 14
			Action Rules
				initialize LocalSubordinateLedger

				if (PrmFirstProcessing)
					LocalSubordinateLedger = first LedgerHierarchyDetailRel.SubordinateLedger
				else
					for each LedgerHierarchyDetailRel
						LocalLedger = each.SubordinateLedger		

						if (YearEndJournalReports
						and LocalLedger.CloseLedger)	

							LocalYearEndSystem					= "GL"
							LocalStartingNumber		  			= PrmStartingNumber	
							initialize LocalLineCounter6
							initialize LocalLineCounter12
							
							LocalReportingBasisYearEndJournal 	=	LocalReportingBasisYearEndJournal.BalanceSheetOpening							
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 			 = DerivedCloseLedger						
								LocalLineCounter6  			    += 1
								LocalSequenceNum6				 = LocalLineCounter6
								LocalLineCounter12 			    += 1	
								LocalSequenceNum12				 = LocalLineCounter12
								LocalStartingNumber			    += 1
								LocalTempYearEndJournalReference = JournalReferenceFormat
			
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.ReportingBasis 				= ReportingBasis
									invoked.AccountingEntity 			= LocalAccountingEntity
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger						= LocalYearEndLedger
									invoked.System						= LocalYearEndSystem
									initialize invoked.PostingDate
									invoked.BasisYear					= LocalYear
									invoked.ReportingBasisYear			= LocalYear								
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal
									initialize invoked.GeneralLedgerClosePeriod											
									invoked.GeneralLedgerCalendarPeriod = ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence 	= LocalStartingNumber
			
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.ProfitAndLoss
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 			 = DerivedCloseLedger						
								LocalLineCounter6  		  	   	 += 1
								LocalSequenceNum6				 = LocalLineCounter6
								LocalLineCounter12 		   		 += 1	
								LocalSequenceNum12				 = LocalLineCounter12
								LocalStartingNumber			 	 += 1
								LocalTempYearEndJournalReference = JournalReferenceFormat
								
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.ReportingBasis 					= ReportingBasis
									invoked.AccountingEntity 				= LocalAccountingEntity
									invoked.JournalReferenceNumber			= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 							= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger							= LocalYearEndLedger
									invoked.System							= LocalYearEndSystem
									initialize invoked.PostingDate										
									invoked.BasisYear						= LocalYear
									invoked.ReportingBasisYear				= LocalYear									
									invoked.ReportingBasisYearEndJournal 	= LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 	= ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod										
									invoked.GeneralLedgerCalendarPeriod 	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence 		= LocalStartingNumber
									
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetClosing
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 				= DerivedCloseLedger
								LocalLineCounter6  			   		+= 1
								LocalSequenceNum6					= LocalLineCounter6
								LocalLineCounter12 			   		+= 1	
								LocalSequenceNum12					= LocalLineCounter12
								LocalStartingNumber					+= 1
								LocalTempYearEndJournalReference	= JournalReferenceFormat
						
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.ReportingBasis 					= ReportingBasis
									invoked.AccountingEntity 				= LocalAccountingEntity
									invoked.JournalReferenceNumber			= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 							= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger							= LocalYearEndLedger
									invoked.System							= LocalYearEndSystem
									initialize invoked.PostingDate										
									invoked.BasisYear						= LocalYear
									invoked.ReportingBasisYear				= LocalYear							
									invoked.ReportingBasisYearEndJournal 	= LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 	= ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod																														
									invoked.GeneralLedgerCalendarPeriod		= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod					
									invoked.JournalReferenceSequence 		= LocalStartingNumber

						else	
							if (PrmLedger not = LocalLedger
							and GeneralLedgerJournalControlRel exists
							and GeneralLedgerJournalControlRefByLedgerRel not exists)	
								LocalSubordinateLedger = each.SubordinateLedger
								end for each

				if (LocalSubordinateLedger entered)
					invoke CreateGeneralLedgerJournalControlRefPerLedger GeneralLedgerJournalControl in foreground
						invoked.PrmFinanceEnterpriseGroup								 = FinanceEnterpriseGroup
						invoked.PrmReportingBasis 										 = ReportingBasis	
						invoked.PrmAccountingEntity										 = LocalAccountingEntity
						invoked.PrmLedger												 = LocalSubordinateLedger
						invoked.PrmStartDateJulian										 = LocalStartDateJulian
						invoked.PrmEndDateJulian										 = LocalEndDateJulian	
						invoked.PrmBasisYear											 = LocalYear
						invoked.PrmGLJournalControlCallBackReportingBasis.ReportingBasis = ReportingBasis
						invoked.PrmGLJournalControlCallBackReportingBasis.FinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmStartingNumber										 = LocalStartingNumber
									
		CreateJournalControlRefPerLedgerSystem is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity				is a AccountingEntity
    	        PrmBasisYear					is a Year
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
    	        PrmFirstProcessing				is Boolean
    	        PrmLedger						is a Ledger		
    	        PrmStartingNumber				is Numeric 14	
    	    Parameter Rules
    	    	PrmAccountingEntity
    	    		LocalAccountingEntity 	= PrmAccountingEntity
    	    	PrmBasisYear
    	    		LocalYear			  	= PrmBasisYear
    	    	PrmStartDateJulian
    	    		LocalStartDateJulian	= PrmStartDateJulian
    	    	PrmEndDateJulian
    	    		LocalEndDateJulian		= PrmEndDateJulian
    	    	PrmLedger
    	    		LocalLedger 			= PrmLedger
    	    	PrmStartingNumber
    	    		LocalStartingNumber		= PrmStartingNumber
    	    Local Fields
    	    	LocalSubordinateLedger			is a Ledger
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6				
				LocalStartingNumber				is Numeric size 14
			Action Rules
				initialize LocalSubordinateLedger
				
				if (PrmFirstProcessing)
					LocalSubordinateLedger = first LedgerHierarchyDetailRel.SubordinateLedger
				else
					for each LedgerHierarchyDetailRel
						LocalLedger = each.SubordinateLedger	
					
						if (YearEndJournalReports
						and LocalLedger.CloseLedger)		

							LocalYearEndSystem					= "GL"
							LocalStartingNumber					= PrmStartingNumber	
							initialize LocalLineCounter6
							initialize LocalLineCounter12
							
							LocalReportingBasisYearEndJournal 	=	LocalReportingBasisYearEndJournal.BalanceSheetOpening							
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 			 = DerivedCloseLedger						
								LocalLineCounter6  			    += 1
								LocalSequenceNum6				 = LocalLineCounter6
								LocalLineCounter12 			    += 1	
								LocalSequenceNum12				 = LocalLineCounter12
								LocalStartingNumber			    += 1
								LocalTempYearEndJournalReference = JournalReferenceFormat
			
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.ReportingBasis 				= ReportingBasis
									invoked.AccountingEntity 			= LocalAccountingEntity
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger						= LocalYearEndLedger
									invoked.System						= LocalYearEndSystem
									initialize invoked.PostingDate
									invoked.BasisYear					= LocalYear
									invoked.ReportingBasisYear			= LocalYear								
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal
									initialize invoked.GeneralLedgerClosePeriod											
									invoked.GeneralLedgerCalendarPeriod = ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence 	= LocalStartingNumber
			
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.ProfitAndLoss
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 			    = DerivedCloseLedger						
								LocalLineCounter6  		  	   	 	+= 1
								LocalSequenceNum6					= LocalLineCounter6
								LocalLineCounter12 		   		 	+= 1	
								LocalSequenceNum12				 	= LocalLineCounter12
								LocalStartingNumber			 	 	+= 1
								LocalTempYearEndJournalReference 	= JournalReferenceFormat
								
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.ReportingBasis 					= ReportingBasis
									invoked.AccountingEntity 				= LocalAccountingEntity
									invoked.JournalReferenceNumber			= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 							= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger							= LocalYearEndLedger
									invoked.System							= LocalYearEndSystem
									initialize invoked.PostingDate										
									invoked.BasisYear						= LocalYear
									invoked.ReportingBasisYear				= LocalYear									
									invoked.ReportingBasisYearEndJournal 	= LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 	= ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod										
									invoked.GeneralLedgerCalendarPeriod 	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence 		= LocalStartingNumber
									
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetClosing
							if (GeneralLedgerJournalControlRefByLedgerYearEndRel not exists											
							and ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger	 				= DerivedCloseLedger
								LocalLineCounter6  			   		+= 1
								LocalSequenceNum6					= LocalLineCounter6
								LocalLineCounter12 			   		+= 1	
								LocalSequenceNum12					= LocalLineCounter12
								LocalStartingNumber					+= 1
								LocalTempYearEndJournalReference	= JournalReferenceFormat
						
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.ReportingBasis 					= ReportingBasis
									invoked.AccountingEntity 				= LocalAccountingEntity
									invoked.JournalReferenceNumber			= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 							= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger							= LocalYearEndLedger
									invoked.System							= LocalYearEndSystem
									initialize invoked.PostingDate										
									invoked.BasisYear						= LocalYear
									invoked.ReportingBasisYear				= LocalYear							
									invoked.ReportingBasisYearEndJournal 	= LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 	= ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod																														
									invoked.GeneralLedgerCalendarPeriod		= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod					
									invoked.JournalReferenceSequence 		= LocalStartingNumber

						else	
							if (PrmLedger not = LocalLedger
							and GeneralLedgerJournalControlRel exists
							and GeneralLedgerJournalControlRefByLedgerRel not exists)	
								LocalSubordinateLedger = each.SubordinateLedger
								end for each

				if (LocalSubordinateLedger entered)
					invoke CreateGeneralLedgerJournalControlRefPerLedgerAndSystem GeneralLedgerJournalControl in foreground
						invoked.PrmFinanceEnterpriseGroup								 	= FinanceEnterpriseGroup
						invoked.PrmReportingBasis 										 	= ReportingBasis	
						invoked.PrmAccountingEntity											= LocalAccountingEntity
						invoked.PrmLedgerTopNode										 	= LedgerTopNode
						invoked.PrmLedger												 	= LocalSubordinateLedger
						invoked.PrmStartDateJulian										 	= LocalStartDateJulian
						invoked.PrmEndDateJulian										 	= LocalEndDateJulian	
						invoked.PrmBasisYear											 	= LocalYear
						invoked.PrmGLJournalControlCallBackReportingBasis.ReportingBasis 	= ReportingBasis
						invoked.PrmGLJournalControlCallBackReportingBasis.FinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmStartingNumber										 	= LocalStartingNumber
			
#ifdef module ad
		ResetDailyBalance is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup

			Local Fields
				LocalAsyncId					is a AsyncActionRequest

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and !IsForAccountAnalysis)

			Action Rules

				Set Rules
					Entrance Rules
						if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
							invoke PurgeData ADBDailyAmount in background
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup			
							invoke PurgeData ADBAggregateBalance in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup			
							invoke PurgeData ADBTransaction in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						else
						if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
							invoke PurgeData AverageDailyBalanceAmount in background
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup			
							invoke PurgeData AverageDailyBalanceAggregate in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup			
							invoke PurgeData AverageDailyBalanceTransaction in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							invoke PurgeData AverageDailyBalanceAccount in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup

				Instance Rules
					initialize ADBRunDate
#endif

#ifdef module ad
		RecalculateDailyBalance is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmReportingBasis						is a ReportingBasis
				PrmFiscalYear							is like GeneralLedgerCloseYear
				PrmRecalculateOption                    is Numeric 1
					States
						RecalculateUre					value 2	
						SpecificADBAccount				value 3
						PreviousYear					value 4
						CurrentYear						value 5
				PrmAccountingEntity						is like AccountingEntity
				PrmAccount								is like GeneralLedgerChartAccount
				PrmADBOrganizationDimension				is like AccountingUnit
				PrmADBCodeBlock							is like ADBCodeBlock
				PrmDimension1							is like AccountingUnit
				PrmDimension2							is like AccountingUnit
				PrmDimension3							is like AccountingUnit
				PrmADBAccount							is a ADBAccountType

			Parameter Rules
				PrmAccount
					if (PrmRecalculateOption.SpecificADBAccount)
						LocalInstGeneralLedgerChartAccount	= PrmAccount
						LocalInstAccountingEntity			= PrmAccountingEntity
						if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
							if (PrmADBOrganizationDimension entered)
								if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
									LocalInstAccountingUnit			= PrmADBOrganizationDimension
								if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
									LocalInstFinanceDimension1		= PrmADBOrganizationDimension
								constraint (ADBAccountMasterByAccountRel exists)
									"MustBeAnExistingAverageDailyBalanceAccount"
							else
								constraint (ADBAccountMasterByEntityAccountRel exists)
									"MustBeAnExistingAverageDailyBalanceAccountAnd<PrmFinanceEnterpriseGroup.AccountingEntityLabel>"
						else
						if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
							LocalADBDimension1 = PrmDimension1
							LocalADBDimension2 = PrmDimension2
							LocalADBDimension3 = PrmDimension3
							constraint (AverageDailyBalanceAccountRel exists)
								"MustBeAnExistingAverageDailyBalanceAccount"

			Local Fields
				LocalAsyncId						is a AsyncActionRequest
				LocalAccount						is like GeneralLedgerChartAccount
				LocalStartDate						is Date
				LocalEndDate						is Date
				LocalRunDate						is Date
				LocalFiscalYearEndDate				is Date
				LocalSystemUreAccount				is like GeneralLedgerChartAccount
				LocalAccountingUnit					is like AccountingUnit			
				LocalDimension1						is like FinanceDimension1		

			Entrance Rules
				initialize LocalSystemUreAccount
				initialize LocalAccount
				LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
				constraint (first SystemAccountCheckRel.Account entered)
					"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
				LocalSystemUreAccount = first SystemAccountCheckRel.Account
				LocalProcessBasisYear = PrmFiscalYear
				constraint (PeriodBasisYearRel exists)
					"FiscalYearIsNotDefinedInTheCalendar"
				if (PrmRecalculateOption.RecalculateUre)
					LocalAccount = LocalSystemUreAccount
				else
					LocalAccount = PrmAccount

 			Action Rules
				LocalYear      			= PrmFiscalYear
				LocalStartDate 			= GeneralLedgerCalendarPeriodYearRel.DerivedStartDate
				LocalFiscalYearEndDate	= GeneralLedgerCalendarPeriodYearRel.DerivedEndDate
				LocalRunDate         	= ADBRunDate
				LocalEndDate	     	= ADBRunDate
				if (LocalAccount     	= LocalSystemUreAccount)	
					LocalEndDate     	= GeneralLedgerCalendarPeriodYearRel.DerivedEndDate 
            		if (LocalEndDate < ADBRunDate)
            			LocalRunDate = LocalEndDate
				else
				if (PrmRecalculateOption.PreviousYear)
					LocalEndDate		= LocalFiscalYearEndDate

				if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
					invoke PurgeData ADBDailyAmount in background
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmReportingBasis			= ReportingBasis
						invoked.PrmAccount					= LocalAccount
						invoked.PrmStartDate				= LocalStartDate
						invoked.PrmEndDate					= LocalEndDate
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmADBOrganizationDimension	= PrmADBOrganizationDimension	
					invoke PurgeData ADBAggregateBalance in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmReportingBasis			= ReportingBasis
						invoked.PrmAccount					= LocalAccount
						invoked.PrmFiscalYear				= PrmFiscalYear
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmADBOrganizationDimension	= PrmADBOrganizationDimension
						if (LocalAccount = LocalSystemUreAccount)
							invoked.PrmAccountToPurge       = ADBAccountType.SystemUndistributedRetainedEarnings
						else
							invoked.PrmAccountToPurge       = ADBAccountType.NormalBalanceSheet 
					invoke PurgeData ADBTransaction in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmAccount					= LocalAccount
						invoked.PrmStartDate				= LocalStartDate
						invoked.PrmEndDate					= LocalFiscalYearEndDate	
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmADBOrganizationDimension	= PrmADBOrganizationDimension
				else
				if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess
				and not PrmRecalculateOption.PreviousYear
				and	not PrmRecalculateOption.CurrentYear)
					invoke PurgeData AverageDailyBalanceAmount in background
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmReportingBasis			= ReportingBasis
						invoked.PrmAccount					= LocalAccount
						invoked.PrmStartDate				= LocalStartDate
						invoked.PrmEndDate					= LocalEndDate
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmDimension1				= PrmDimension1
	            		invoked.PrmDimension2				= PrmDimension2
	            		invoked.PrmDimension3				= PrmDimension3
					invoke PurgeData AverageDailyBalanceAggregate in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmReportingBasis			= ReportingBasis
						invoked.PrmAccount					= LocalAccount
						invoked.PrmFiscalYear				= PrmFiscalYear
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmDimension1				= PrmDimension1
	            		invoked.PrmDimension2				= PrmDimension2
	            		invoked.PrmDimension3				= PrmDimension3
						invoked.PrmIncludeFutureYears       = false
					invoke PurgeData AverageDailyBalanceTransaction in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmAccount					= LocalAccount
						invoked.PrmStartDate				= LocalStartDate
						invoked.PrmEndDate					= LocalFiscalYearEndDate	
	            		invoked.PrmAccountingEntity			= PrmAccountingEntity
	            		invoked.PrmDimension1				= PrmDimension1
	            		invoked.PrmDimension2				= PrmDimension2
	            		invoked.PrmDimension3				= PrmDimension3
				if (PrmRecalculateOption.PreviousYear
				or  PrmRecalculateOption.CurrentYear)
					invoke ProcessDailyAverage AccountingEntityHierarchy in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmReportingBasis		= ReportingBasis
						invoked.PrmBeginBalancePeriod	= DerivedBeginingBalancePeriodString
						invoked.PrmFiscalYear			= PrmFiscalYear
						invoked.PrmRunDate				= LocalEndDate
						invoked.PrmStartDate			= LocalStartDate
						invoked.PrmProcessingType		= PrmRecalculateOption
						invoked.PrmFiscalYearEndDate	= LocalFiscalYearEndDate
				else
				if (PrmRecalculateOption.RecalculateUre)
					invoke RecalculateUreDailyBalance AccountingEntityHierarchy in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
	            		invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
	            		invoked.PrmReportingBasis         = ReportingBasis
						invoked.PrmAccount                = LocalAccount	
	            		invoked.PrmFiscalYear             = PrmFiscalYear
	            		invoked.PrmRunDate                = LocalRunDate
						invoked.PrmDateRange.Begin        = LocalStartDate
						invoked.PrmDateRange.End          = LocalFiscalYearEndDate
				else
				if (PrmRecalculateOption.SpecificADBAccount)
					invoke RebuildADBTransaction GeneralLedgerTransaction in background
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmFiscalYear				= PrmFiscalYear
	            		invoked.PrmADBCodeBlock         	= PrmADBCodeBlock
						invoked.PrmDateRange.Begin          = LocalStartDate
						invoked.PrmDateRange.End            = LocalFiscalYearEndDate
						invoked.PrmADBAccount               = PrmADBAccount
						if (not PrmADBAccount.SystemUndistributedRetainedEarnings)
							invoked.PrmAccount       = LocalAccount 
					if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
						invoke UpdateDailyAggregateAmount ADBAccountMaster in background
							run after LocalAsyncId
							assign async action request id to LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmReportingBasis			= PrmReportingBasis
							invoked.PrmAccountingEntity			= PrmAccountingEntity
							invoked.PrmAccount					= LocalAccount
							invoked.PrmAccountingUnit           = PrmADBCodeBlock.AccountingUnit
		            		invoked.PrmFinanceDimension1        = PrmADBCodeBlock.FinanceDimension1
							invoked.PrmLastRunDate				= LocalRunDate
							invoked.PrmRunDate					= LocalRunDate
							invoked.PrmFiscalYear				= PrmFiscalYear
							if (PrmAccount = LocalSystemUreAccount)
								invoked.PrmNonChartAccountOnly      = true		
								invoked.PrmGetAccountBeginBalance	= false
							else
								invoked.PrmGetAccountBeginBalance	= true	
						invoke UpdateDailyAggregateAmount ADBTransaction in background
							run after LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmReportingBasis			= PrmReportingBasis
							invoked.PrmAccountingEntity			= PrmAccountingEntity
							invoked.PrmAccount					= LocalAccount
		            		invoked.PrmADBOrganizationDimension	= PrmADBOrganizationDimension
							invoked.PrmLastRunDate				= LocalRunDate
							invoked.PrmRunDate					= LocalRunDate
							if (PrmAccount = LocalSystemUreAccount)
								invoked.PrmNonChartAccountOnly	= true			
					else
					if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
						invoke UpdateDailyAggregateAmount AverageDailyBalanceAccount in background
							run after LocalAsyncId
							assign async action request id to LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmReportingBasis			= PrmReportingBasis
							invoked.PrmAccountingEntity			= PrmAccountingEntity
							invoked.PrmAccount					= LocalAccount
							invoked.PrmDimension1           	= PrmDimension1
		            		invoked.PrmDimension2        		= PrmDimension2
		            		invoked.PrmDimension3        		= PrmDimension3
							invoked.PrmLastRunDate				= LocalRunDate
							invoked.PrmRunDate					= LocalRunDate
							invoked.PrmFiscalYear				= PrmFiscalYear
							if (PrmAccount = LocalSystemUreAccount)
								invoked.PrmNonChartAccountOnly      = true		
								invoked.PrmGetAccountBeginBalance	= false
							else
								invoked.PrmGetAccountBeginBalance	= true	
						invoke UpdateDailyAggregateAmount AverageDailyBalanceTransaction in background
							run after LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmReportingBasis			= PrmReportingBasis
							invoked.PrmAccountingEntity			= PrmAccountingEntity
							invoked.PrmAccount					= LocalAccount
							invoked.PrmDimension1           	= PrmDimension1
		            		invoked.PrmDimension2        		= PrmDimension2
		            		invoked.PrmDimension3        		= PrmDimension3
							invoked.PrmLastRunDate				= LocalRunDate
							invoked.PrmRunDate					= LocalRunDate
							if (PrmAccount = LocalSystemUreAccount)
								invoked.PrmNonChartAccountOnly	= true			
#endif
		RebuildBudgetEntityLedger is an Instance Action
			valid when (ValidToRebuildBudgetEntity)
			Action Rules
				invoke CreateBudgetEntityLedger LedgerHierarchyRecordRel
				
		FunctionalRevaluation is an Instance Action
			valid when (ValidForTranslationAndRevalue)
			completion message is "RunSequence<LocalRunSequence>CurrencyRevaluationComplete"
			Parameters
				PrmYear							is a GeneralLedgerCalendarYear
					default label is "Year"
				PrmSelectLedger					is a Ledger
					default label is "SelectLedger"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup		is a AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmAccount						is a GeneralLedgerChartAccount
					default label is "Account"
				PrmGeneralLedgerTotalGroup		is a GeneralLedgerTotal group
					default label is "AccountGroup"
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmPeriodOption					is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
				PrmRateOption					is Numeric 1
					default label is "RateOption"
					States
						DailyRate				value is 0
						PeriodRate				value is 1
				PrmAutoReverse					is Boolean
					default label is "AutoReverse"
				PrmFunctional					is Boolean
					default label is "Functional"
				PrmAlternate					is Boolean
					default label is "Alternate"
				PrmAlternate2					is Boolean
					default label is "Alternate2"
				PrmAlternate3					is Boolean
					default label is "Alternate3"
				PrmProject						is Boolean
					default label is "Project"
				PrmReport1						is Boolean
					default label is "Report1"
				PrmReport2						is Boolean
					default label is "Report2"
				PrmReport3						is Boolean
					default label is "Report3"
				PrmReport4						is Boolean
					default label is "Report4"
				PrmReport5						is Boolean
					default label is "Report5"
				PrmPostOption					is Numeric 1
					default label is "PostOption"
					States
						ZoneOrSystem			value is 0
						OriginatingDimension	value is 1
				PrmBySystemCode					is Boolean
					default label is "BySystemCode"
				PrmReleased						is Boolean
					default label is "CreateReleased"
				PrmSaveCalculation				is Boolean
					default label is "SaveCalculationAmount"
				PrmChangesOnly					is Boolean
					default label is "ChangedTotalsOnly"
				PrmChartSection				is Numeric 1
					default label is "ChartSection"
					States
						BalanceSheet    	value is 1
						IncomeStatement 	value is 2	
				PrmOtherDimensions				is Boolean
					default label is "OtherDimensions"
			Parameter Rules
				PrmYear
					initial value is BasisYear
					default to BasisYear
				PrmSelectLedger
					constraint (!PrmSelectLedger.CurrencyLedger)
						"CannotEnterACurrencyLedger"
					constraint (!PrmSelectLedger.CloseLedger)
						"CannotEnterACloseLedgerLedger"
				PrmAccountingEntity
					constraint (!PrmAccountingEntityGroup entered)
						"<FinanceEnterpriseGroup.AccountingEntityLabel>,_<FinanceEnterpriseGroup.AccountingEntityLabel>Group:_EnterAValueInOnlyOneOfTheseFields"
				PrmAccount
					constraint (!PrmGeneralLedgerTotalGroup entered)
						"<FinanceEnterpriseGroup.AccountLabel>,_<FinanceEnterpriseGroup.AccountLabel>Group:_EnterAValueInOnlyOneOfTheseFields"
				PrmAutoReverse
					constraint (PrmReleased)
						"AutoReverseRequiresCreateReleasedToBeSelected"
				PrmFunctional
					initial value is true
					default to true		

			Local Fields
				LocalRunSequence			is like RunSequence
				LocalGainLossResultView		is a GainLossResult view
				LocalLedgerForUpdate		is a Ledger
				LocalBusinessClass			is a BusinessClass
				LocalLedgerGroup			is a BusinessClassGroup
				LocalDateRange				is a DateRange

			Entrance Rules
				if (!PrmYear entered)
					PrmYear					= BasisYear
 				LocalYear				= BasisYear + 1
				constraint (!PrmYear	> LocalYear)
					"YearCannotBeGreaterThan<LocalYear>"
				if (PrmSelectLedger entered)
					LocalLedger				= PrmSelectLedger
					constraint (CheckLedgerHierarchyRel exists)
						"LedgerNotValidForBasis"
				if (PrmAccountingEntity entered)
					LocalAccountingEntity	= PrmAccountingEntity
					constraint (AccountingEntityHierarchyRecordRel exists)
						"NotValidForBasis<FinanceEnterpriseGroup.AccountingEntityLabel>_<LocalAccountingEntity>"
				if (PrmPeriodOption entered)
					constraint (!PrmDateRange.Begin entered)
						"CannotEnterBothPeriodOptionAndDateRange"
				if (!PrmPeriodOption entered)
					constraint (PrmDateRange.Begin entered)
						"PeriodOptionOrDateRangeIsRequired"
				constraint (PrmFunctional	entered
					or 		PrmAlternate	entered
					or		PrmAlternate2	entered
					or		PrmAlternate3	entered
					or 		PrmProject		entered
					or 		PrmReport1		entered
					or		PrmReport2		entered
					or		PrmReport3		entered
					or		PrmReport4		entered
					or		PrmReport5		entered)
						"AtLeastOneCurrencyMustBeSelected"
				constraint (!UnrealizedGainAccountRel exists)
					"<first UnrealizedGainAccountRel.GeneralLedgerChartAccount>HasBlankUnrealizedGain<FinanceEnterpriseGroup.AccountLabel>"
				constraint (!UnrealizedLossAccountRel exists)
					"<first UnrealizedLossAccountRel.GeneralLedgerChartAccount>HasBlankUnrealizedLoss<FinanceEnterpriseGroup.AccountLabel>"
				constraint (PostingReportingChartAccountRel exists)
					"ChartHasNoPosting<FinanceEnterpriseGroup.AccountLabel>"

 				if (PrmProject entered)
					constraint (PrmFunctional	entered
						or 		PrmAlternate	entered
						or		PrmAlternate2	entered
						or		PrmAlternate3	entered
						or 		PrmReport1		entered
						or		PrmReport2		entered
						or		PrmReport3		entered
						or		PrmReport4		entered
						or		PrmReport5		entered)
							"AtLeastOneCurrencyMustBeSelectedWithProjectCurrency"

 				if (PrmDateRange entered)
	 				LocalBasisYear			= PrmYear
					LocalDateRange.End		= BasisEndDate
	 				LocalBasisYear			= PrmYear - 1
					LocalDateRange.Begin	= BasisStartDate
					constraint (PrmDateRange.Begin	within LocalDateRange)
						"BeginDateNotWithinBasisYearDateRange"
					constraint (PrmDateRange.End	within LocalDateRange)
						"EndDateNotWithinBasisYearDateRange"
				
				if(PrmAccount entered)		
					if (PrmChartSection.BalanceSheet)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateBalanceSheetRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromBalanceSheet"	
					if (PrmChartSection.IncomeStatement)
						LocalDisplayAccount	= PrmAccount
						constraint (ValidateIncomeStatementRel exists)
							"Account=<PrmAccount>_notInTheList,_PleaseSelectCorrectAccountFromIncomeStatement"					

 			Action Rules
				LocalBusinessClass            = "GeneralLedgerTotal"
				LocalLedgerGroup              = ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
				if (!LocalLedgerGroup exists)
					invoke BuildLedgerBusClassGroup

				if (PrmYear			> BasisYear)
					LocalYear				= PrmYear
					if (!ReportingBasisYearRel exists)
						invoke Create ReportingBasisYear
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis				= ReportingBasis
							invoked.ReportingBasisYear			= PrmYear

 				LocalLedgerForUpdate		= DerivedCurrencyLedger
				if (!LocalLedgerForUpdate.UsedByATransaction)
	 				invoke Update LocalLedgerForUpdate
	 					invoked.UsedByATransaction		= true
 				LocalYear				= PrmYear
				invoke UpdateGainLossRunSequence ReportingBasisYearRel
				LocalRunSequence		= DerivedRunSequence
 				LocalBasisYear			= PrmYear
				LocalEndDate			= BasisEndDate
 				LocalBasisYear			= PrmYear - 1
				LocalStartDate			= BasisStartDate

				invoke Create GainLossResult
					assign result to LocalGainLossResultView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.ReportingBasis			= ReportingBasis
					invoked.GainLossResult		  	= LocalRunSequence
					invoked.RunTime				  	= current timestamp
					invoked.Ledger					= PrmSelectLedger
					invoked.AccountingEntity		= PrmAccountingEntity
					invoked.AccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.Account					= PrmAccount
					invoked.AccountGroup			= PrmGeneralLedgerTotalGroup
					invoked.DateRange				= PrmDateRange
					invoked.AutoReverse				= PrmAutoReverse
					invoked.Functional				= PrmFunctional
					invoked.Alternate				= PrmAlternate
					invoked.Alternate2				= PrmAlternate2
					invoked.Alternate3				= PrmAlternate3
					invoked.Project					= PrmProject
					invoked.Report1					= PrmReport1
					invoked.Report2					= PrmReport2
					invoked.Report3					= PrmReport3
					invoked.Report4					= PrmReport4
					invoked.Report5					= PrmReport5
					invoked.PeriodOption			= PrmPeriodOption
					invoked.RunOption				= 1
					invoked.RateOption				= PrmRateOption
					invoked.PostOption				= PrmPostOption
					invoked.BySystemCode			= PrmBySystemCode
					invoked.Released				= PrmReleased
					invoked.ChangesOnly     		= PrmChangesOnly
					invoked.SaveCalculation    		= PrmSaveCalculation
					invoked.ChartSection            = PrmChartSection
					invoked.OtherDimensions			= PrmOtherDimensions

				if(PrmSelectLedger not entered)
					for each LedgerTopNode.ChildrenRel
						if (!each.Active)
							LocalLikeLedger = each.Ledger
							invoke Create GainLossResultDetail
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ReportingBasis			= ReportingBasis
								invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
								invoked.ErrorMessage		  	= SkippingLedgerInActiveError

				if (PrmAccountingEntityGroup	entered)
					LocalAccountingEntityGroup		= PrmAccountingEntityGroup
					for each AccountingEntityGroupMemberRel
						LocalAccountingEntity		= each.AccountingEntity 
						if (each.AccountingEntity.Status.Active)						
							if (!AccountingEntityHierarchyRecordRel exists)
								invoke Create GainLossResultDetail
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ReportingBasis			= ReportingBasis
									invoked.GainLossResult		  	= LocalGainLossResultView.GainLossResult
									invoked.ErrorMessage		  	= SkippingAccountingEntityError

				
				invoke ProcessCurrencyBasisEntity AccountingEntityHierarchy in background
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmReportingBasis			= ReportingBasis
					invoked.PrmSelectLedger				= PrmSelectLedger
					invoked.PrmCurrencyLedger			= DerivedCurrencyLedger
					invoked.PrmCloseLedger				= DerivedCloseLedger
					invoked.PrmAccountingEntity			= PrmAccountingEntity
					invoked.PrmAccountingEntityGroup	= PrmAccountingEntityGroup
					invoked.PrmAccount					= PrmAccount
					invoked.PrmGeneralLedgerTotalGroup	= PrmGeneralLedgerTotalGroup
					invoked.PrmDateRange				= PrmDateRange
					invoked.PrmPeriodOption				= PrmPeriodOption
					invoked.PrmYearToDate.Begin			= LocalStartDate
					invoked.PrmYearToDate.End			= LocalEndDate
					invoked.PrmOption					= 1
					invoked.PrmRunSequence				= LocalRunSequence
					invoked.PrmRateOption				= PrmRateOption
					invoked.PrmPostOption				= PrmPostOption
					invoked.PrmAutoReverse				= PrmAutoReverse
					invoked.PrmFunctional				= PrmFunctional
					invoked.PrmAlternate				= PrmAlternate
					invoked.PrmAlternate2				= PrmAlternate2
					invoked.PrmAlternate3				= PrmAlternate3
					invoked.PrmProject					= PrmProject
					invoked.PrmReport1					= PrmReport1
					invoked.PrmReport2					= PrmReport2
					invoked.PrmReport3					= PrmReport3
					invoked.PrmReport4					= PrmReport4
					invoked.PrmReport5					= PrmReport5
					invoked.PrmGainLossResult			= LocalGainLossResultView.GainLossResult
					invoked.PrmBySystemCode				= PrmBySystemCode
					invoked.PrmReleased					= PrmReleased
					invoked.PrmSaveCalculation			= PrmSaveCalculation
					invoked.PrmLedgerGroup				= ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "_")
					invoked.PrmChangesOnly     			= PrmChangesOnly
					invoked.PrmChartSection             = PrmChartSection	
					invoked.PrmFunctionalBoolean	    = true
					invoked.PrmOtherDimensions			= PrmOtherDimensions

		FillEntityBasisForEntityTopNode	is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Instance Selection
				where (AccountingEntityTopNode entered
				and	AccountingEntityTopNode exists
				and Active
				and (PrmFinanceEnterpriseGroup not entered
				or	FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup))
			Action Rules
				Instance Rules
					if(AccountingEntityTopNode.EntityBasis not entered)
						invoke UpdateEntityBasis AccountingEntityTopNode
							invoked.PrmEntityBasis = ReportingBasis
