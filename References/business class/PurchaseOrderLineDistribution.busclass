PurchaseOrderLineDistribution is a BusinessClass
    owned by po
    prefix is PMMD
    
    Ontology
    	symbolic key is PurchaseOrderLineDistribution

    Patterns
    	implements StaticJava
    	disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		implements Archivable

	Persistent Fields
		DistributionAccount				is a TransactionCodeBlock
        DistributionPercent				is Percent size 6.3
        DistributionQuantity			is Decimal size 13.4
        DistributionAmount				is an InternationalAmount
        AssetInformation
		ReportCurrencyAmount            is a FinanceCurrencyAmount
		Contract                        is a snapshot of PurchaseOrderLine.Contract
		GltObjId						is an ObjId		
		AtnObjId						is an ObjId		
		CreatedByFES					is Boolean		
			protected
		FESManuallyUpdated				is Boolean
			protected
		UnitAmount						is like UnitsAmount
			default label is "Units"
		PreviousCommittedAmount			is a FinanceCurrencyAmount
			protected			
		DistributionAggregation			is like PODistributionAggregation

	Transient Fields
		BypassAccountEdit				is Boolean
		StructureDefaultCode
			derive value from Company.PurchaseOrderStructureDefaultCode
		OverwriteDistributionCode		is Boolean
		TransientCurrencyTable              is a CurrencyTable
			derive value from PurchaseOrder.CurrencyTable
		TransientAccountingEntity           is an AccountingEntity  
			derive value from Company.AccountingEntity
		TransientExchangeDate               is an ExchangeDate
			derive value from DerivedEncumbranceDate
		TransientPostingDate                is a PostingDate
			derive value from DerivedEncumbranceDate
		TransientFromCurrency               is a FromCurrency
			derive value from PurchaseOrder.Currency
		TransientCurrencyAmount             is a CurrencyAmount
			derive value from DerivedDistributionAmount
		TransientGeneralLedgerSystemCode	is like GeneralLedgerSystemCode
			default label is "GlobalLedgerSystemCode"
		TransientReversalUpdateReportCurrencyAmount     is a FinanceCurrencyAmount
		TransientRequisitionReportCurrencyAmount        is a FinanceCurrencyAmount
		TransientCostDifferenceReportCurrencyAmount     is a FinanceCurrencyAmount
		TransientIndirectCommitmentIncrease             is a FinanceCurrencyAmount
		TransientInvoiceDetailCurrencyAmount			is a FinanceCurrencyAmount
		TransientServiceCancelReportCurrencyAmount      is a FinanceCurrencyAmount
		TransientBypassCommittedContractValidation	is Boolean
		TransientPayablesInvoice					is a PayablesInvoice
		TransientInvoiceDetailCommitAmount			is an InternationalAmount
		TransientFromMassPOCreateAndRelease is Boolean
		TransientCalendarPeriod is a GeneralLedgerCalendarPeriod	
			derive value from PurchaseOrder.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		UnitsAmount
			derive value from DerivedUnitsAmount	
		BypassSystemRestrictions			is Boolean		

	Context Fields
		PayablesInvoice
		PayablesInvoiceDetail
		
	Local Fields
		LocalSkipQuantity					is a Quantity
		LocalLastQuantity					is a Quantity
		LRNIDistributionQuantity			is a Quantity
		CurrencyExchange
		SavedTransactionAmount				is a CurrencyAmount
		SavedExchangeDate					is a ExchangeDate
		SavedFromCurrency							is a FromCurrency
		LocalCommitmentIncrease                     is an InternationalAmount
		LocalJournalizeGroup						is a JournalizeGroup
		LocalGeneralLedgerSystemCode 				is a GeneralLedgerSystemCode
		LocalCurrentSystemCodeLineNumber			is a LineNumber
		LocalReversalUpdateAmount                   is like InternationalAmount
		LocalDerivedCalculationsComplete            is Boolean
		LocalPeriodOfPerformanceProject			    is like Project
		LocalPostingDate							is a PostingDate
		LocalInvoiceDetailCommitAmount				is like InternationalAmount
		LocalEndDate                    			is a GeneralLedgerCalendarPeriod
		LocalLedger                     			is a Ledger
		LocalCurrAmount								is a CurrencyAmountsGroup

		LocalDeleteDistribution						is Boolean
		LocalByPassPurchaseOrderLineCallback		is Boolean
		LocalFromRecalculate                        is Boolean
		FromCreate									is Boolean
		LocalDerivedFESKey 							is a FrontEndSplitKey
		LocalFEGtext								is like FinanceEnterpriseGroup
		OriginalCreate                              is Boolean
		LocalApplyBudgetTemplateReversal			is Boolean
		LocalReversalGLCommitView					is a GLCommit view
		LocalMatrixDimensionAccount					is a MatrixApprovalLevelDimension
		LocalBoolean								is Boolean
		BypassActiveCodeBlockEdit					is Boolean
		LocalFinanceCodeBlock						is a FinanceCodeBlock
		LocalContractDefaulting						is Boolean
		LocalDistributionAmount						is like InternationalAmount
		
	Derived Fields

		DerivedDistributionBy is a DerivedField
			type is like DistributionBy
			restricted
			if (DistributionByQuantity)
				return DistributionBy.ByQuantity
			else
			if (DistributionByPercent)
				return DistributionBy.ByPercent
			else
				return DistributionBy.ByAmount
				
		CommittedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (GLCommitRel.TransactionAmount)
		
		DerivedEncumbranceDate		is a DerivedField
			type is Date
			restricted
			if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate.PurchaseOrderDate
			or  PurchaseOrderLine !entered)
	        	return PurchaseOrder.PurchaseOrderDate
	        else
	        	return PurchaseOrderLine.EarlyDeliveryDate
	     
	    DerivedOriginalDistributionAmount is a DerivedField   
	    	type is like InternationalAmount
	     	if (DistributionByAmount)
		   		return (DistributionAmount)
	   		if (DistributionByPercent)
	   			return (DistributionPercent * PurchaseOrderLine.ExtendedAmount)
	   		else
	    		return (DistributionQuantity * PurchaseOrderLine.EnteredUnitCost)
	    
	    UncommittedProjectAmount is a DerivedField
	    	type is like InternationalAmount
	    	restricted
			return DerivedOriginalDistributionAmount - GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			
	    DerivedDistributionAmount is a DerivedField   
	    	type is like InternationalAmount
	    	restricted
	     	if (!FromNonLandedAOC) 
		     	if (DistributionByAmount)
			   		return (DistributionAmount/PurchaseOrderLine.ExtendedAmount * (PurchaseOrderLine.ExtendedAmountToCommit))
		   		if (DistributionByPercent)
		   			return (DistributionPercent * PurchaseOrderLine.ExtendedAmountToCommit)
		   		else
		    		return (DistributionQuantity/PurchaseOrderLine.QuantityToProcess * (PurchaseOrderLine.ExtendedAmountToCommit))
		    else 
		    if (FromNonLandedAOC)
		    	return (first PurchaseOrderAndLineAddOnChargeRel.DerivedDistributionAmount)
		    	
		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
		
		DerivedDifferenceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedDistributionAmount - RequisitionDerivedDistributionAmount)
		
		RequisitionDerivedDistributionAmount is a DerivedField   
	    	type is like InternationalAmount
	    	restricted
	     	if (!FromNonLandedAOC) 
		     	if (DistributionByAmount)
			   		return (DistributionAmount/PurchaseOrderLine.ExtendedAmount * (first PurchaseOrderLineSourceRel.DerivedOriginalExtendedAmount))
		   		if (DistributionByPercent)
		   			return (DistributionPercent * first PurchaseOrderLineSourceRel.DerivedOriginalExtendedAmount)
		   		else
		    		return (DistributionQuantity/PurchaseOrderLine.Quantity * first PurchaseOrderLineSourceRel.DerivedOriginalExtendedAmount)
		    else 
		    if (FromNonLandedAOC)
		    	return (first PurchaseOrderAndLineAddOnChargeRel.DerivedDistributionAmount)  
		

		DerivedUnitsAmount is a DerivedField
			type is like UnitsAmount
			restricted
			if (not DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No)
				return 1
			else
				return 0
				
		DerivedDAGeneralLedgerChartAccount is a DerivedField
			type is Alpha size 22
			restricted	
			return DistributionAccount.GeneralLedgerChartAccount
				
		DerivedDAProject is a DerivedField
			type is Alpha size 22
			restricted	
			return	DistributionAccount.Project

		DerivedMatrixDisplayAmount is a DerivedField
			type is like InternationalAmount
			if (DerivedDistributionAmount != 0)
				return DerivedDistributionAmount
			else
			if (AddOnCharge not entered
			and DerivedOriginalDistributionAmount != 0) 
				return DerivedOriginalDistributionAmount


        DerivedLedger is a DerivedField
            type is like Ledger
            return DistributionAccount.Ledger
 
        DerivedToAccountingEntity is a DerivedField
            type is like ToAccountingEntity
            return DistributionAccount.ToAccountingEntity
 
        DerivedAccountingUnit is a DerivedField
            type is like AccountingUnit
            return DistributionAccount.AccountingUnit
 
        DerivedGeneralLedgerChartAccount is a DerivedField
            type is like GeneralLedgerChartAccount
            return DistributionAccount.GeneralLedgerChartAccount

        DerivedProject is a DerivedField
            type is like Project
            return DistributionAccount.Project

		DerivedFinanceDimension1 is a DerivedField
			type is like FinanceDimension1
			return DistributionAccount.FinanceDimension1
		
		DerivedFinanceDimension2 is a DerivedField
			type is like FinanceDimension2
			return DistributionAccount.FinanceDimension2

		DerivedFinanceDimension3 is a DerivedField
			type is like FinanceDimension3
			return DistributionAccount.FinanceDimension3		

		DerivedFinanceDimension4 is a DerivedField
			type is like FinanceDimension4
			return DistributionAccount.FinanceDimension4
		
		DerivedFinanceDimension5 is a DerivedField
			type is like FinanceDimension5
			return DistributionAccount.FinanceDimension5

		DerivedFinanceDimension6 is a DerivedField
			type is like FinanceDimension6
			return DistributionAccount.FinanceDimension6
			
		DerivedFinanceDimension7 is a DerivedField
			type is like FinanceDimension7
			return DistributionAccount.FinanceDimension7

		DerivedFinanceDimension8 is a DerivedField
			type is like FinanceDimension8
			return DistributionAccount.FinanceDimension8

		DerivedFinanceDimension9 is a DerivedField
			type is like FinanceDimension9
			return DistributionAccount.FinanceDimension9

		DerivedFinanceDimension10 is a DerivedField
			type is like FinanceDimension10
			return DistributionAccount.FinanceDimension10



	Dimensions
		GLAccountingUnitRel.AccountingUnit
			dimension name is AccountingUnit
			caption is representative text
			Attributes
				Description
				Level
				SequenceNumber
						
		TransientCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays
				
		PurchaseOrderLine.Buyer
			dimension name is Buyer
		
		PurchaseOrderLine.Contract
			dimension name is Contract

		PurchaseOrder.Currency
			dimension name is CurrencyCode
			
		PurchaseOrderLine.Item
			dimension name is Item
			
		PurchaseOrderLine.Manufacturer
			dimension name is Manufacturer

		PurchaseOrderLine.DerivedPCardDimensionDimension
			dimension name is PCard
			
		PurchaseOrder	
			dimension name is PONumber
			Attributes
				Company
				PurchaseOrder		
				Closed
				Issued
				Released
				Revised
				TaxCode

		PurchaseOrder.ProcessLevel
			dimension name is ProcessLevel

		PurchaseOrderLine.DerivedSourcingEventDimension
			dimension name is SourcingEvent
			
		PurchaseOrderLine.Vendor
			dimension name is Vendor
			caption is representative text

	Measures
		ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount			
	    	measure name is DistributionAmount
	    	
	     		
	Conditions
		IsValidForDistribution
			restricted
			when (!PurchaseOrderLine.Contract.UseCommitments or TransientBypassCommittedContractValidation)
		DistributionByQuantity
			restricted
			when (DistributionQuantity entered)
		DistributionByPercent
			restricted
			when (DistributionPercent entered)
		DistributionByAmount
			restricted
			when (DistributionAmount entered)			
		ClosedPurchaseOrderLine
			restricted
			when (PurchaseOrderLine.Closed.Yes
			or    PurchaseOrderLine.Closed.Historical)
		CommitmentExists
			restricted
			when (GLCommitRel exists)
		CommitmentExistsWithChanges
			restricted
			when (CommitmentExists
			and   GLCommitRel.LastCurrAmountDiff entered)
		HistoryCommitmentExists
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status = 1)
		ReleasedCommitmentExists
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status = 3)
		OpenCommitmentExists
			restricted
			when (CommitmentExists
			and  (GLCommitRel.Status = 3
			or    GLCommitRel.Status = 0))
		Unreleased
			restricted
			when (!PurchaseOrderLine.Released)
		
		RequisitionCommitmentsExist
			restricted
			when (CommitmentsCreatedForRQ
			and   PurchaseOrderLine.FromRequisitions)
		
		CommitmentsCreatedForRQ
			restricted
			when (GeneralLedgerSystemCodeForRQRel.EncumbranceOption.TrackAndEdit
			or    GeneralLedgerSystemCodeForRQRel.EncumbranceOption.Track)
		ContractCommitments
			restricted
			when (CommittedContractLineDistributionsRel exists
			or    CommittedContractRel exists)
		ContractHeaderCommitments 
			restricted 
			when (CommittedContractRel.UseHeaderOnlyCommitments)
		ContractHeaderSpreadCommitments 
			restricted 
			when (CommittedContractRel.UseHeaderSpreadCommitments)
		ContractLineCommitments 
			restricted 
			when (CommittedContractRel.UseOnlyLineCommitments)
		ContractLineSpreadCommitments 
			restricted 
			when (CommittedContractRel.UseLineSpreadCommitments)						
		BudgetErrorExists
			restricted
			when (BudgetEditErrorRel exists)
		FromNonLandedAOC
			restricted
			when (AddOnCharge entered)
		NoUnitCostOrQuantityDifferencesWithRequisitions
			restricted
			when (first PurchaseOrderLineSourceRel.NoUnitCostOrQuantityDifference)
		IsProjectEntered
			restricted
			when (DistributionAccount.Project entered)
		FromRequisitionAddOnCharge
			restricted
			when (AddOnChargeFromRequisitionRel exists)
		FromRequisitionHeaderAddOnCharge
			restricted
			when (HeaderAddOnChargeFromRequisitionRel exists)
		HeaderAOCFromCommittedRequisition
			restricted
			when (CommitmentsCreatedForRQ
	        and   FromRequisitionHeaderAddOnCharge)
	    NonLandedLineAOCFromCommittedRequisition
	    	restricted
	    	when (CommitmentsCreatedForRQ
	    	and   FromRequisitionAddOnCharge)
	    CreatingCommitments
	    	restricted
			when (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	        or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
		UnreleasedPurchaseOrder
			restricted
			when (!PurchaseOrder.Released
			and   !PurchaseOrder.Rejected
			and   !PurchaseOrder.Canceled
			and   !PurchaseOrder.Issued
			and   !PurchaseOrder.Revised
			and   !PurchaseOrder.VendorReturn entered
			and   PurchaseOrder.Closed = "N")

		IsDistributionNotEditable
			restricted
			when (PurchaseOrderLine.FrontEndSplitsEnabled
			and CreatedByFES
			and PurchaseOrderLine.PreviouslyReleased)

		IsValidToUpdate
			restricted
			when (not PurchaseOrderLine.RestrictPOLineChanges
			and not IsDistributionNotEditable)

		IsValidToDelete
			restricted
			when (not PurchaseOrderLine.RestrictPOLineChanges)
			
	Relations
		
		GLAccountingUnitRel
			one-to-one relation to AccountingUnit
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup 
				related.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AccountingUnit				= DistributionAccount.AccountingUnit

		PurchaseOrderLineDistributionErrorRel
			one-to-many relation to PurchaseOrderLineError
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PurchaseOrder						= PurchaseOrder
				related.PurchaseOrderLine					= PurchaseOrderLine
			Instance Selection
				where (related.ErrorType.Distribution)

		PurchaseOrderAndLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set2
				related.Company								= Company
				related.AddOnCharge                         = AddOnCharge
				related.PurchaseOrder						= PurchaseOrder
			Instance Selection
				where (related.PurchaseOrderLine = PurchaseOrderLine)
		
		AddOnChargeFromRequisitionRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set2
				related.Company								= Company
				related.AddOnCharge                         = AddOnCharge
				related.PurchaseOrder						= PurchaseOrder
			Instance Selection
				where (related.FromRequisition entered)
		
		HeaderAddOnChargeFromRequisitionRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set2
				related.Company								= Company
				related.AddOnCharge                         = AddOnCharge
				related.PurchaseOrder						= PurchaseOrder
			Instance Selection
				where (related.FromRequisition entered
				and    PurchaseOrderLine !entered)
		
		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup              = Company.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup     = UniqueID
		
		BudgetEditErrorHeaderRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup              = Company.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup     = PurchaseOrder.UniqueID

		ContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= PurchaseOrderLine.Contract
				related.ContractLine 	= PurchaseOrderLine.ContractLine				
		
		CommittedContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= PurchaseOrderLine.Contract
				related.ContractLine 	= PurchaseOrderLine.ContractLine		
			Instance Selection
				where (related.CommitmentsExist
				or     related.DistSpreadExists)
		
		CommittedContractRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= PurchaseOrderLine.Contract
			Instance Selection
				where (related.UseHeaderCommitments)
				
		ByQuantityPurchaseOrderLineDistributionsRel is a PurchaseOrderLineDistribution set
			Instance Selection
				where (related.PurchaseOrderLineDistribution != PurchaseOrderLineDistribution
				and    related.DistributionByQuantity)
		
		ByAmountPurchaseOrderLineDistributionsRel is a PurchaseOrderLineDistribution set
			Instance Selection
				where (related.PurchaseOrderLineDistribution != PurchaseOrderLineDistribution
				and    related.DistributionByAmount)
		
		ByPercentPurchaseOrderLineDistributionsRel is a PurchaseOrderLineDistribution set
			Instance Selection
				where (related.PurchaseOrderLineDistribution != PurchaseOrderLineDistribution
				and    related.DistributionByPercent)
				
		GeneralLedgerSystemCodeRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"
				
		GeneralLedgerSystemCodeForRQRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "RQ"
		
		GLCommitRel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance
		
		ContractEncumbranceRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup     = Company.ProcurementGroup
				related.Contract          = PurchaseOrderLine.Contract
			Instance Selection
				where (related.UseCommitments)
		
		GLTransactionDetailRel	
			one-to-one relation to GLTransactionDetail
			valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction		 
				related.OriginatingTransaction = reference to this instance   
		
		GLTransDetailByJournalizeGroupRel
			one-to-many relation to GLTransactionDetail
				Field Mapping uses ByJournalizeGroup
					related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
					related.JournalizeGroup						= LocalJournalizeGroup
					
        PurchaseOrderLineSourceRel
			one-to-many relation to PurchaseOrderLineSource
				Field Mapping uses Set1
	                related.Company                 = Company
	                related.PurchaseOrder			= PurchaseOrder
	                related.PurchaseOrderLine       = PurchaseOrderLine

		RequisitionLineDistributionRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.Requisition             = first PurchaseOrderLineSourceRel.PurchaseOrderLineSource.SourceDocumentNumeric
				related.RequisitionLine         = first PurchaseOrderLineSourceRel.PurchaseOrderLineSource.SourceDocumentLineNumber 




		ContractParticipantByCompanyRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= Company.ProcurementGroup
				related.Contract											= PurchaseOrderLine.Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= blank
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)
				
		ContractParticipantByLocationRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= Company.ProcurementGroup
				related.Contract											= PurchaseOrderLine.Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= PurchaseOrderLine.ShipToLocation
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)
				
		POLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution           
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
        
        GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < PurchaseOrderLine.EarlyDeliveryDate
				and	   related.PeriodType.EndDate)
		
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				related.AccountingEntity			= DistributionAccount.ToAccountingEntity 
				related.Ledger						= LocalLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)
        
        ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.Project                 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = "PO"
				
		GLCommitxRel
			one-to-one relation to GLCommitx
			Field Mapping uses symbolic key
				related.GLCommitx				= GltObjId        

		ACCommitxRel
			one-to-one relation to LegacyAccommitx
			Field Mapping uses symbolic key
				related.LegacyAccommitx			= AtnObjId  
				
		PurchaseOrderLineAssetRel
            one-to-one relation to PurchaseOrderLineAsset
            Field Mapping uses symbolic key
                related.Company                 = Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine      

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
		
		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= PurchaseOrderLineDistribution

		ProjectFundingSourceRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.ProjectContract			= DistributionAccount.Project.ParentDisplayContractRel.Project
				related.FinanceDimension2		= DistributionAccount.FinanceDimension2	

		PODistributionAggregationRel
			one-to-many relation to PODistributionAggregation
			Field Mapping uses BySummaryAccount
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.SummaryAccount			= LocalMatrixDimensionAccount

	Sets
	
		ByProject
			Sort Order
				DistributionAccount.Project
				Company
				PurchaseOrder
				PurchaseOrderLine
				PurchaseOrderLineDistribution
				AddOnCharge	
				
		ByContract
			Sort Order
				Contract
				Company
				PurchaseOrder descending
				PurchaseOrderLine
				PurchaseOrderLineDistribution
				AddOnCharge
	
	Field Rules
		DistributionAccount
			required
			
			LocalGeneralLedgerSystemCode = first GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
			
			if (!BypassSystemRestrictions)		
				if (Company.AccountingEntity.ValidSystems entered) 
					constraint (LocalGeneralLedgerSystemCode within Company.AccountingEntity.ValidSystems) 
						"InvalidSystemFor<Company.ProcurementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>" 
				if (DistributionAccount.ToAccountingEntity.ValidSystems entered) 
					constraint (LocalGeneralLedgerSystemCode within DistributionAccount.ToAccountingEntity.ValidSystems) 
						"InvalidSystemForPosting<Company.ProcurementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>" 
				if (DistributionAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered) 
					constraint (LocalGeneralLedgerSystemCode within DistributionAccount.GeneralLedgerChartAccount.Account.SystemRestriction) 
						"InvalidSystemForAccount"
				constraint (not DistributionAccount.GeneralLedgerChartAccount.AccountType.StatCumulative
				and			not DistributionAccount.GeneralLedgerChartAccount.AccountType.StatNonCumulative)
					"StatisticalAccount<DistributionAccount.GeneralLedgerChartAccount>DoesNotAllowAmounts"

		AssetInformation
			if  (not PurchaseOrderLine.IsLineProcessed)
				default AssetInformation.Asset 			to PurchaseOrder.DefaultAsset
				default AssetInformation.AssetTemplate 	to PurchaseOrder.DefaultAssetTemplate
			if (AssetInformation.AssetTemplate entered) 
				if  (DistributionAccount.ToAccountingEntity not = AssetInformation.AssetTemplate.Company.AccountingEntity
				and (action type.Create
				or   AssetInformation.AssetTemplate changed
				or   DistributionAccount.ToAccountingEntity changed))
					confirmation required
						"DistributionAccountingEntityNotEqualToAssetTemplateCompanyAccountingEntity-DoYouWantToContinue?"
				if (PurchaseOrderLine.DistributionBy.ByPercent and DistributionPercent != 100%)
					cannot be entered
						"CannotUseAssetTemplateWhenUsingDistributionPercentage"
				if (PurchaseOrderLine.DistributionBy.ByAmount)
					cannot be entered
						"CannotUseAssetTemplateWhenDistributingByAmounts"
						
			if (AssetInformation changed
			and AssetInformation.AssetTemplate not entered
			and PurchaseOrderLineAssetRel exists)
				constraint (not PurchaseOrderLineAssetRel.HasAssetDetails)
	    			"CannotDeletePurchaseOrderLineAsset:PurchaseOrderLineAssetDetailsExist"
				invoke Delete PurchaseOrderLineAssetRel
				
			if (PurchaseOrderLine.ItemType.Inventoried
			and AddOnCharge not entered)
				cannot be entered
					"CannotEnterAssetInformationForInventoryItems"
			if (PurchaseOrderLine.MatchedQuantity	> 0 
			or  PurchaseOrderLine.ReceivedQuantity	> 0)		
				cannot be changed
					"CannotChangeTemplateAfterLineHasBeenReceivedOrMatched"

           	if (AssetInformation changed
           	and PurchaseOrderLine.UnmatchedPayablesInvoiceDetailsRel exists)
           		confirmation required
           			"UnreleasedInvoiceLinesExist.AssetInformationWillBeUpdatedOnAssociatedDistributions.Continue?"


		DistributionPercent
			if (AddOnCharge entered)
				force default to 100%
			else
				if (PurchaseOrderLine.DistributionBy.ByPercent)
					default to PurchaseOrderLine.RemainingPercentToBeDistributed
					required
				else
					cannot be entered
						"DistributionPercentCannotBeEnteredForCompany<Company>,PO<PurchaseOrder>,Line<PurchaseOrderLine>"

			constraint (DistributionPercent > 0)
				"DistributionPercentMustBeGreaterThanZero"

		DistributionQuantity
			if (PurchaseOrderLine.DistributionBy.ByQuantity and AddOnCharge not entered)
				default to PurchaseOrderLine.RemainingQuantityToBeDistributed
				required
				constraint (DistributionQuantity > 0)
					"DistributionQuantityMustBeGreaterThanZero"
			else
				cannot be entered
					"DistributionQuantityCannotBeEnteredForCompany<Company>,PO<PurchaseOrder>,Line<PurchaseOrderLine>"
					
		
		DistributionAmount
			if (PurchaseOrderLine.DistributionBy.ByAmount and AddOnCharge not entered)
				default to PurchaseOrderLine.RemainingAmountToBeDistributed
				required
				constraint (DistributionAmount > 0)
					"DistributionAmountMustNotBeNegative"
			else
				cannot be entered
					"DistributionAmountCannotBeEnteredForCompany<Company>,PO<PurchaseOrder>,Line<PurchaseOrderLine>"

			
		TransientServiceCancelReportCurrencyAmount

			initialize 	TransientServiceCancelReportCurrencyAmount		
			TransientCurrencyTable  		  							= PurchaseOrder.CurrencyTable
			TransientAccountingEntity         							= Company.AccountingEntity
			TransientExchangeDate    		  							= DerivedEncumbranceDate
			TransientPostingDate                                        = DerivedEncumbranceDate
			TransientFromCurrency             							= PurchaseOrder.Currency
			TransientCurrencyAmount           							= PurchaseOrderLine.ServiceCancelAmount * DistributionPercent 
			if (PurchaseOrder.Currency != Company.Currency)
				TransientServiceCancelReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate
				
		TransientReversalUpdateReportCurrencyAmount
			initialize 
					
			TransientCurrencyTable     											= PurchaseOrder.CurrencyTable
			TransientAccountingEntity  											= Company.AccountingEntity
			TransientExchangeDate      											= DerivedEncumbranceDate
			TransientPostingDate                                                = DerivedEncumbranceDate
			TransientFromCurrency      											= PurchaseOrder.Currency
			TransientCurrencyAmount    											= LocalReversalUpdateAmount
			TransientReversalUpdateReportCurrencyAmount.UseDerivedCalculations 	= true
			LocalDerivedCalculationsComplete                                    = TransientReversalUpdateReportCurrencyAmount.DerivedCalculationsComplete
			if (PurchaseOrder.Currency != Company.Currency)
				TransientReversalUpdateReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate
						
		TransientCostDifferenceReportCurrencyAmount
			initialize
			
			TransientCurrencyTable          	= PurchaseOrder.CurrencyTable
			TransientAccountingEntity           = Company.AccountingEntity
			TransientExchangeDate               = DerivedEncumbranceDate
			TransientPostingDate                = DerivedEncumbranceDate
			TransientFromCurrency               = PurchaseOrder.Currency
			TransientCurrencyAmount             = (DerivedDistributionAmount - RequisitionDerivedDistributionAmount)
			TransientCostDifferenceReportCurrencyAmount.UseDerivedCalculations  = true
			LocalDerivedCalculationsComplete    = TransientCostDifferenceReportCurrencyAmount.DerivedCalculationsComplete
			if (PurchaseOrder.Currency != Company.Currency)
				TransientCostDifferenceReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate
							
        TransientInvoiceDetailCurrencyAmount
        	initialize
            
            TransientCurrencyTable                                      = TransientPayablesInvoice.CurrencyTable
            TransientAccountingEntity                                   = TransientPayablesInvoice.Company.AccountingEntity
            TransientExchangeDate                                       = TransientPayablesInvoice.InvoiceDate
            TransientPostingDate                                        = TransientPayablesInvoice.InvoiceDate
            TransientFromCurrency                                       = TransientPayablesInvoice.InvoiceCurrency
            TransientCurrencyAmount                                     = LocalInvoiceDetailCommitAmount
			TransientInvoiceDetailCurrencyAmount.UseDerivedCalculations  = true
			LocalDerivedCalculationsComplete    = TransientInvoiceDetailCurrencyAmount.DerivedCalculationsComplete
			if (PurchaseOrder.Currency != Company.Currency)
				TransientInvoiceDetailCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate

		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(DistributionAccount.Ledger changed
			or	DistributionAccount.ToAccountingEntity changed
			or	DistributionAccount.AccountingUnit changed
			or	DistributionAccount.GeneralLedgerChartAccount changed
			or	DistributionAccount.Project changed
			or	DistributionAccount.FinanceDimension1 changed
			or	DistributionAccount.FinanceDimension2 changed
			or	DistributionAccount.FinanceDimension3 changed
			or	DistributionAccount.FinanceDimension4 changed
			or	DistributionAccount.FinanceDimension5 changed
			or	DistributionAccount.FinanceDimension6 changed
			or	DistributionAccount.FinanceDimension7 changed
			or	DistributionAccount.FinanceDimension8 changed
			or	DistributionAccount.FinanceDimension9 changed
			or	DistributionAccount.FinanceDimension10 changed
			or	DistributionPercent changed
        	or	DistributionQuantity changed
        	or	DistributionAmount changed))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true
				            			
	Rule Blocks

		CalculateCommitmentAmounts
		






			invoke CreateCommitment

			if (LocalApplyBudgetTemplateReversal
			and PreviousCommittedAmount entered)
				invoke CreateBudgetTemplateReversal LocalReversalGLCommitView.GLCommit
					invoked.PrmFEG              = Company.FinanceEnterpriseGroup
					invoked.PrmUniqueID         = PurchaseOrder.UniqueID
					invoked.PrmCodeBlock        = DistributionAccount
					invoked.PrmGLDate           = DerivedEncumbranceDate
					invoked.PrmTransAmount      = DerivedDistributionAmount
					invoked.PrmCurrencyAmounts.FunctionalAmount   = PreviousCommittedAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ProjectAmount	  = PreviousCommittedAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ReportAmount1      = PreviousCommittedAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ReportAmount2      = PreviousCommittedAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ReportAmount3      = PreviousCommittedAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ReportAmount4      = PreviousCommittedAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.ReportAmount5      = PreviousCommittedAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.AlternateAmount    = PreviousCommittedAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.AlternateAmount2   = PreviousCommittedAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmCurrencyAmounts.AlternateAmount3   = PreviousCommittedAmount.AlternateAmount3.EnteredCurrencyAmount
					invoked.PrmSkipBudgetRebuild                  = false
					invoked.PrmHasPriorYearPOCommit               = true				
			else
			if  (!PurchaseOrderLine.CommittedRequisitionLineSourcesExist
			and  !ContractCommitments
			and   DerivedDistributionAmount > 0
			and  !HeaderAOCFromCommittedRequisition
			and  !TransientFromMassPOCreateAndRelease
			and  !LocalFromRecalculate)
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
	        		invoke PerformBudgetEdit
	        else 
	        if ((PurchaseOrderLine.CommittedRequisitionLineSourcesExist
	        or   HeaderAOCFromCommittedRequisition)
	        and  OriginalCreate)

	        	if ((NoUnitCostOrQuantityDifferencesWithRequisitions
	        	or   FromRequisitionHeaderAddOnCharge
	        	or   NonLandedLineAOCFromCommittedRequisition)
	        	and (!LocalFromRecalculate))
					PreviousCommittedAmount			= ReportCurrencyAmount					
	        		invoke CreateBudgetTemplateReversal GLCommitRel
	      				invoked.PrmFEG              = Company.FinanceEnterpriseGroup
	      				invoked.PrmUniqueID         = PurchaseOrder.UniqueID
	      				invoked.PrmCodeBlock        = DistributionAccount
	      				invoked.PrmGLDate           = DerivedEncumbranceDate
	      				invoked.PrmTransAmount      = DerivedDistributionAmount
	      				invoked.PrmCurrencyAmounts.FunctionalAmount   = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	  = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						invoked.PrmSkipBudgetRebuild                  = true		
	      		else
	      			if (PurchaseOrderLineSourceRel exists) 
		      			initialize TransientRequisitionReportCurrencyAmount		
						TransientCurrencyTable          	= PurchaseOrder.CurrencyTable
						TransientAccountingEntity           = Company.AccountingEntity
						TransientExchangeDate               = DerivedEncumbranceDate
						TransientPostingDate                = DerivedEncumbranceDate
						TransientFromCurrency               = PurchaseOrder.Currency
						TransientCurrencyAmount             = RequisitionDerivedDistributionAmount
						TransientRequisitionReportCurrencyAmount.UseDerivedCalculations  = true
						LocalDerivedCalculationsComplete    = TransientRequisitionReportCurrencyAmount.DerivedCalculationsComplete
						PreviousCommittedAmount				= TransientRequisitionReportCurrencyAmount
		      			invoke CreateBudgetTemplateReversal GLCommitRel
		      				invoked.PrmFEG              = Company.FinanceEnterpriseGroup
		      				invoked.PrmUniqueID         = PurchaseOrder.UniqueID
		      				invoked.PrmCodeBlock        = DistributionAccount
		      				invoked.PrmGLDate           = DerivedEncumbranceDate
		      				invoked.PrmTransAmount      = RequisitionDerivedDistributionAmount
		      				invoked.PrmCurrencyAmounts.FunctionalAmount   = TransientRequisitionReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ProjectAmount	  = TransientRequisitionReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount1      = TransientRequisitionReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount2      = TransientRequisitionReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount3      = TransientRequisitionReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount4      = TransientRequisitionReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount5      = TransientRequisitionReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount    = TransientRequisitionReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount2   = TransientRequisitionReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount3   = TransientRequisitionReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
	        				invoked.PrmSkipBudgetRebuild                  = false
	        				invoked.PrmHasPriorYearPOCommit               = true		
	                  	if (DerivedDistributionAmount > RequisitionDerivedDistributionAmount)
	                   		invoke PerformDifferenceBudgetEdit

		ProcessRNILineDistributionByAmount
			LocalRNILocalFields.MmdBaseAmt = 0
			LocalRNILocalFields.Counter += 1
			LocalRNILocalRD.MmdLineSeq = PurchaseOrderLineDistribution
			if (LocalRNILocalRD.PcrCurrencyCode != Company.GeneralLedgerCompany.Currency)
				initialize CurrencyExchange
                SavedFromCurrency						= LocalRNILocalRD.PcrCurrencyCode
                CurrencyExchange.ToCurrency				= Company.GeneralLedgerCompany.Currency
                SavedExchangeDate						= PurchaseOrderLine.EarlyDeliveryDate
                SavedTransactionAmount					= LocalRNILocalFields.Work1PoCurAmt
                CurrencyExchange.EnteredCurrencyRate 	= LocalRNILocalRD.PcrEntCnvRate
  
				LocalRNILocalRD.PoCurAmt		= LocalRNILocalFields.Work1PoCurAmt
				LocalRNILocalRD.BaseCurAmt 		= CurrencyExchange.OutputCurrencyAmount								
			else
				LocalRNILocalFields.MmdBaseAmt 			= DistributionAmount
				LocalRNILocalFields.Work1BaseCurAmt 	= LocalRNILocalRD.BaseCurAmt * LocalRNILocalFields.MmdBaseAmt / LocalRNILocalFields.TotalPoDistAmt
				LocalRNILocalFields.Work1PoCurAmt   	= LocalRNILocalFields.Work1BaseCurAmt
					
			if (LocalRNILocalFields.Counter = LocalRNILocalFields.DistributionLinesCount)
				LocalRNILocalFields.Work1BaseCurAmt = LocalRNILocalFields.BaseRemainDistAmt
				LocalRNILocalFields.Work1PoCurAmt   = LocalRNILocalFields.TranRemainDistAmt
			else
				LocalRNILocalFields.BaseRemainDistAmt	-= LocalRNILocalFields.Work1BaseCurAmt
				LocalRNILocalFields.TranRemainDistAmt	-= LocalRNILocalFields.Work1PoCurAmt

			invoke Create RNILineDistribution
				invoked.RNILineDistribution 	= PurchaseOrderLineDistribution
				invoked.PurchaseOrderResult		= PrmRNIRun
				invoked.RNILine					= PrmRNILine
				invoked.Company					= Company
				invoked.PurchaseOrder			= PurchaseOrder		
				invoked.PurchaseOrderLine		= PurchaseOrderLine		
				invoked.DistributionCodeBlock	= DistributionAccount
				invoked.AddOnCharge				= AddOnCharge
		        invoked.CurrencyCode			= LocalRNILocalRD.PcrCurrencyCode
		        invoked.BaseCurAmt		 		= LocalRNILocalFields.Work1BaseCurAmt
		        invoked.PoCurAmt		 		= LocalRNILocalFields.Work1PoCurAmt
		        invoked.AccrualCodeBlock 		= LocalRNILocalRD.AccrualCodeBlock
		        invoked.DistributionAmount      = DistributionAmount
		        invoked.DistributionSequence	= PurchaseOrderLineDistribution
		
		ProcessRNILineDistributionByPercent
			
			LocalRNILocalFields.Work1BaseCurAmt	= LocalRNILocalRD.BaseCurAmt * DistributionPercent
			LocalRNILocalFields.Work1PoCurAmt	= LocalRNILocalRD.PoCurAmt * DistributionPercent
			LocalRNILocalRD.MmdLineSeq 			= PurchaseOrderLineDistribution
			invoke Create RNILineDistribution
				invoked.RNILineDistribution 	= PurchaseOrderLineDistribution
				invoked.PurchaseOrderResult		= PrmRNIRun
				invoked.RNILine					= PrmRNILine
				invoked.Company					= Company
				invoked.PurchaseOrder			= PurchaseOrder		
				invoked.PurchaseOrderLine		= PurchaseOrderLine		
				invoked.DistributionCodeBlock	= DistributionAccount
				invoked.AddOnCharge				= AddOnCharge
		        invoked.CurrencyCode			= LocalRNILocalRD.PcrCurrencyCode
		        invoked.BaseCurAmt		 		= LocalRNILocalFields.Work1BaseCurAmt
		        invoked.PoCurAmt		 		= LocalRNILocalFields.Work1PoCurAmt
		        invoked.AccrualCodeBlock 		= LocalRNILocalRD.AccrualCodeBlock
		        invoked.DistributionPercent     = DistributionPercent
		        invoked.DistributionSequence	= PurchaseOrderLineDistribution
		
		ProcessRNILineDistributionByQuantity

			initialize LocalSkipQuantity
			initialize LocalLastQuantity
			initialize LRNIDistributionQuantity
			
			if (LocalTotalSkipQuantity > DistributionQuantity)
				LocalSkipQuantity = DistributionQuantity
			else
				LocalSkipQuantity = LocalTotalSkipQuantity
			
			LocalTotalSkipQuantity -= LocalSkipQuantity
			
			if (LocalTotalLastQuantity > DistributionQuantity)
				LocalLastQuantity = DistributionQuantity
			else
				LocalLastQuantity = LocalTotalLastQuantity
			
			LocalTotalLastQuantity -= LocalLastQuantity
			






			
			LRNIDistributionQuantity = LocalQuantityQuantifier * DistributionQuantity + LocalLastQuantity - LocalSkipQuantity
				
			if (LRNIDistributionQuantity > 0)
				LocalRNILocalFields.Work1PoCurAmt	= LRNIDistributionQuantity * LocalRNILocalRD.PliUnitCost * LocalRNILocalRD.PliEbuyUomMult / LocalRNILocalRD.PliVpriUomMult
				if (LocalRNILocalRD.PcrCurrencyCode != Company.GeneralLedgerCompany.Currency)
					initialize CurrencyExchange
	                SavedFromCurrency				= LocalRNILocalRD.PcrCurrencyCode
	                CurrencyExchange.ToCurrency		= Company.GeneralLedgerCompany.Currency
	                SavedExchangeDate				= PurchaseOrderLine.EarlyDeliveryDate
	                SavedTransactionAmount			= LocalRNILocalFields.Work1PoCurAmt
	                CurrencyExchange.EnteredCurrencyRate = LocalRNILocalRD.PcrEntCnvRate
					
					LocalRNILocalFields.Work1BaseCurAmt = CurrencyExchange.OutputCurrencyAmount
				else
					LocalRNILocalFields.Work1BaseCurAmt = LocalRNILocalFields.Work1PoCurAmt
			
				invoke Create RNILineDistribution
					invoked.RNILineDistribution 	= PurchaseOrderLineDistribution
					invoked.PurchaseOrderResult		= PrmRNIRun
					invoked.RNILine					= PrmRNILine
					invoked.Company					= Company
					invoked.PurchaseOrder			= PurchaseOrder		
					invoked.PurchaseOrderLine		= PurchaseOrderLine		
					invoked.DistributionCodeBlock	= DistributionAccount
					invoked.AddOnCharge				= AddOnCharge
			        invoked.CurrencyCode			= LocalRNILocalRD.PcrCurrencyCode
			        invoked.BaseCurAmt		 		= LocalRNILocalFields.Work1BaseCurAmt
			        invoked.PoCurAmt		 		= LocalRNILocalFields.Work1PoCurAmt
			        invoked.AccrualCodeBlock 		= LocalRNILocalRD.AccrualCodeBlock
			        invoked.DistributionQty			= LRNIDistributionQuantity
			        invoked.DistributionSequence	= PurchaseOrderLineDistribution

		CheckForProjectDateRange
			if (GeneralLedgerSystemCodeRel exists)
				LocalGeneralLedgerSystemCode = GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
			if (DistributionAccount.Project entered)
				if (PurchaseOrderLine.EarlyDeliveryDate entered)
					LocalPostingDate  		= PurchaseOrderLine.EarlyDeliveryDate
				else
					LocalPostingDate  		= current corporate date

















	
	Create Exit Rules

		if (DistributionAccount.Ledger !entered) 
			DistributionAccount.Ledger  = Company.FinanceEnterpriseGroup.CoreLedger

		FromCreate = true
		invoke UpdateReportCurrencyAmountInstance

		if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
        or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        and  DerivedDistributionAmount != 0)

			include CalculateCommitmentAmounts

		if (PurchaseOrderLineDistributionErrorRel exists)
			for each PurchaseOrderLineDistributionErrorRel
				invoke Purge each
				
	Actions
		Create is a Create Action
			valid when (not PurchaseOrderLine.RestrictPOLineChanges)
			Local Fields
				LocalOriginalDistributionAcount		is a TransactionCodeBlock
				LocalCheckIfMultipleDistribution 	is Boolean
				LocalContractGroup 					is a ContractGroup
				LocalContract	 					is a Contract
				LocalContractLine 					is a ContractLine
				LocalContractLineDistribution 		is a ContractLineDistribution
				LocalCounter						is Numeric size 2
				LocalContractParticipantAccount		is a TransactionCodeBlock

			Entrance Rules
				
				constraint (not PurchaseOrderLine.ItemType.Inventoried)
					"CannotEnterDistributionsForInventoryItems"

				if (not OverwriteDistributionCode)
					LocalContractGroup 				= Company.ProcurementGroup
					LocalContract 					= PurchaseOrderLine.Contract
					LocalContractLine 				= PurchaseOrderLine.ContractLine
					LocalContractLineDistribution 	= first ContractLineDistributionsRel.ContractLineDistribution
					DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractLine] 		= LocalContractLineDistribution.DistributionAccount
					
				LocalOriginalDistributionAcount = DistributionAccount
				if (ContractParticipantByCompanyRel exists)
					LocalContractParticipantAccount = ContractParticipantByCompanyRel.AccountingUnit
				else
					if (ContractParticipantByLocationRel exists)
						LocalContractParticipantAccount = first ContractParticipantByLocationRel.AccountingUnit

				DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.PurchaseOrderHeader] 		= PurchaseOrder.DefaultDistributionAccount
				DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.TemplateLine] 				= PurchaseOrderLine.TemplateAccount
				DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.RequestingLocation] 		= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation.IssueAccount
				DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractParticipant] 		= LocalContractParticipantAccount
				if (PurchaseOrderLine.ItemType.NonStock)	
					DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ShipToLocationGLCategory]	= PurchaseOrderLine.ItemLocationRel.GeneralLedgerCategory.IssueAccount
					DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.Item] 						= PurchaseOrderLine.Item.IssueAccount
				
				if (not OverwriteDistributionCode and instance count of ContractLineDistributionsRel > 1)
					DistributionAccount.CheckPositionInUse = AccountDefaultingComponentPO.ContractLine
					LocalCheckIfMultipleDistribution = true 
				
			Action Rules			
				constraint (IsValidForDistribution)
					"CannotCreateDistributionsForPurchaseOrderLinesWithCommittedContracts"
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
        		or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if (DerivedDistributionAmount > 0
					and Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
						LocalEndDate = DerivedEntityCalendarPeriod
						LocalLedger  = Company.FinanceEnterpriseGroup.CoreLedger
						constraint (DerivedEntityCalendarPeriod entered
						and         EntityLedgerPeriodRel exists)
							"PurchaseOrderUsesCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(LineEarlyDeliveryDate)"	
						
				if (GeneralLedgerSystemCodeRel exists)
					LocalGeneralLedgerSystemCode = first GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode					
				if (DistributionAccount.Project entered)					
					if (TransientExchangeDate not entered)
						TransientExchangeDate = PurchaseOrder.PurchaseOrderDate
						TransientPostingDate  = PurchaseOrder.PurchaseOrderDate
						LocalCurrentSystemCodeLineNumber = PurchaseOrderLine
					include CheckForProjectDateRange

				BypassAccountEdit		= true
				
			Exit Rules

				if (LocalCheckIfMultipleDistribution 
				and DistributionAccount.IsUsedInFinanceCodeBlockArray 
				and LocalContractDefaulting)
					LocalCounter = 1
					for each ContractLineDistributionsRel

						if (LocalCounter = 1)
							DistributionPercent = LocalContractLineDistribution.Percent
						else
							invoke Create PurchaseOrderLineDistribution
								fill in fields from this instance
									except invoked.DistributionAccount
									except invoked.DistributionPercent
								invoked.TransientBypassCommittedContractValidation = true
								invoked.OverwriteDistributionCode 	= true
								invoked.DistributionAccount			= LocalOriginalDistributionAcount
								invoked.DistributionPercent 		= each.Percent
								invoked.DistributionAccount.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractLine] = each.DistributionAccount
						LocalCounter += 1

				if (PurchaseOrderLine.PurchaseOrderLineLifeCycleState.Released)
					invoke Released.Update PurchaseOrderLine
					if (PurchaseOrder.PurchaseOrderLifeCycleState.Released)
						if (PurchaseOrder.Issued)
							invoke Released.Update PurchaseOrder
						else
							invoke Released.Unrelease PurchaseOrder
					
		CreateRestricted is a Create Action   
			restricted
			Action Rules
					
				OriginalCreate             = true
				LocalGeneralLedgerSystemCode = TransientGeneralLedgerSystemCode
				if (DistributionAccount.Project entered)
					TransientExchangeDate  = PurchaseOrder.PurchaseOrderDate
					TransientPostingDate   = PurchaseOrder.PurchaseOrderDate
					LocalCurrentSystemCodeLineNumber = PurchaseOrderLine
			
		Update is an Update Action
			valid when (IsValidToUpdate)
			Action Rules


				if (GeneralLedgerSystemCodeRel exists)
					LocalGeneralLedgerSystemCode = first GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode					
				if (DistributionAccount.Project entered)
					TransientExchangeDate  = PurchaseOrder.PurchaseOrderDate
					TransientPostingDate   = PurchaseOrder.PurchaseOrderDate
					include CheckForProjectDateRange				
				BypassAccountEdit		= true


				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
        		or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if (DerivedDistributionAmount > 0
					and Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
						LocalEndDate = DerivedEntityCalendarPeriod
						LocalLedger  = Company.FinanceEnterpriseGroup.CoreLedger
						constraint (DerivedEntityCalendarPeriod entered
						and         EntityLedgerPeriodRel exists)
							"PurchaseOrderUsesCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(LineEarlyDeliveryDate)"
				constraint (!ClosedPurchaseOrderLine)
					"CannotUpdateDistributionForClosedLine"
					
				if (DistributionPercent changed or DistributionQuantity changed or DistributionAmount changed)
					if (PurchaseOrderLine.Contract entered)
						constraint (IsValidForDistribution)
							"CannotUpdateDistributionPercentOrAmountOrQuantityForPurchaseOrderLinesWithCommittedContracts"			
				
				if (DistributionAccount changed)
					if (PurchaseOrderLine.Contract entered)
						if (CommittedContractLineDistributionsRel exists)
							constraint (DistributionAccount = any CommittedContractLineDistributionsRel.DistributionAccount)
								"CannotChangeAccountToAnAccountThatDoesNotExistOnAssociatedCommittedContractLine"
						else		
						if (CommittedContractRel exists)
							constraint (DistributionAccount = CommittedContractRel.CommitmentAccount)
								"CannotChangeAccountToAnAccountThatDoesNotExistOnAssociatedCommittedContract"	
				
			Exit Rules

               	if (AssetInformation changed
               	and PurchaseOrderLine.UnmatchedPayablesInvoiceDetailsRel exists)
	           		for each PurchaseOrderLine.UnmatchedPayablesInvoiceDetailsRel
	           		    for each each.DetailInvoiceDistributionsRel
	    	       			invoke Update each
								invoked.TransientAsset					= AssetInformation.Asset
								invoked.TransientAssetTemplate			= AssetInformation.AssetTemplate

				if (PurchaseOrderLine.PurchaseOrderLineLifeCycleState.Released
				and not LocalByPassPurchaseOrderLineCallback)
					invoke Released.Update PurchaseOrderLine
					if (DistributionAccount changed 
					or  DistributionPercent changed 
					or  DistributionQuantity changed 
					or  DistributionAmount changed
					or  AssetInformation changed)
						if (PurchaseOrder.PurchaseOrderLifeCycleState.Released)
							if (PurchaseOrder.Issued)
								invoke Released.Update PurchaseOrder
							else
								invoke Released.Unrelease PurchaseOrder
					
				invoke UpdateReportCurrencyAmountInstance				
				
				if (CommitmentExists)
						
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					and not TransientFromMassPOCreateAndRelease)
						if (DistributionAccount != GLCommitRel.FinanceCodeBlock)
							invoke Delete BudgetEditErrorRel
							invoke Delete BudgetEditErrorHeaderRel
							invoke FastUpdate PurchaseOrder
								invoked.BudgetEditProcessing = 0
							invoke PerformBudgetEdit
						else
						if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
							invoke Delete BudgetEditErrorRel
							invoke EditCommitmentIncrease 
								invoked.ParmCommitmentIncrease   = (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount - GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
					
					if (!PurchaseOrderAndLineAddOnChargeRel.Canceled)
						if  (ReleasedCommitmentExists)
							invoke ChangeReleasedCommitment
								if (DistributionAccount != GLCommitRel.FinanceCodeBlock)
									invoked.PrmCodeBlockChange = true 
						else
							invoke MaintainUnreleasedCommitment
					
		UpdateFast is an Update Action
			restricted
			bypass field rules
		
		UpdateGLCommitmentIndirect is an Instance Action
			restricted
			Parameters
				PerformBudgetEdit 			is Boolean
				PrmFromCancel     			is Boolean
				PrmFromInvoice    			is Boolean
				PrmFromOverreceiving    	is Boolean
				PrmFromArchive              is Boolean
				PrmReopenClosed         	is Boolean
				RemoveContractReversal 		is Boolean
				AddContractReversal 		is Boolean
				DeleteSourceReversal    	is Boolean
				AddSourceReversal       	is Boolean
				ReduceFromSourceAmount  	is an InternationalAmount
				TransientCurrencyChanged 	is Boolean
				FromDateChange          	is Boolean
				ClearSourceAmount       	is Boolean
				FromRequisitionAOC      	is Boolean
				FromRequisitionCombineLines is Boolean
				PrmQuantityOrCostUpdate		is Boolean
			Action Rules
				BypassSystemRestrictions = true		


				if (!FromDateChange)
					invoke UpdateReportCurrencyAmountInstance
				if ((ContractCommitments
				and !RemoveContractReversal
				and !AddContractReversal)
				or   FromRequisitionAOC
				or   FromRequisitionCombineLines)
		            LocalReversalUpdateAmount = 0
					if (ContractHeaderCommitments)
						if (CommittedContractRel.TotalCommitments > 0)


							if ((DerivedDistributionAmount - GLCommitRel.TransactionAmount) > CommittedContractRel.TotalCommitments)
								LocalReversalUpdateAmount = CommittedContractRel.TotalCommitments   
							else 
								LocalReversalUpdateAmount = DerivedDistributionAmount - GLCommitRel.TransactionAmount 
					else 
					if (ContractLineCommitments
					or  ContractLineSpreadCommitments
					or  ContractLineCommitments)
						LocalReversalUpdateAmount           = DerivedDistributionAmount - GLCommitRel.TransactionAmount				
					if (FromRequisitionAOC
					or  FromRequisitionCombineLines)
						LocalReversalUpdateAmount           = DerivedDistributionAmount - GLCommitRel.TransactionAmount 
					invoke UpdateReportCurrencyAmount


				else
				if (RemoveContractReversal
				or  DeleteSourceReversal)
					LocalReversalUpdateAmount           = GLCommitRel.TransactionAmount * -1
					invoke UpdateReportCurrencyAmount
				else
				if (ClearSourceAmount)
					LocalReversalUpdateAmount           = GLCommitRel.TransactionAmount
				else
				if (AddContractReversal
				or  AddSourceReversal)
					LocalReversalUpdateAmount           = DerivedDistributionAmount
					invoke UpdateReportCurrencyAmount
				else
				if (ReduceFromSourceAmount > 0)

					LocalReversalUpdateAmount           = ReduceFromSourceAmount * -1
					invoke UpdateReportCurrencyAmount
									
			Exit Rules
				
				if (CommitmentExists
				and !DeleteSourceReversal
				and !AddSourceReversal
				and ReduceFromSourceAmount = 0)

					if  (PrmReopenClosed
					or   HistoryCommitmentExists)

						invoke ChangeReleasedCommitment
							invoked.TransientCurrencyChanged = TransientCurrencyChanged
					else
					if  (ReleasedCommitmentExists)

						if  ((PrmFromCancel
						or    PrmFromOverreceiving
						or    PrmFromArchive)
						and !ContractCommitments)
							invoke UpdateTemplateTotals BudgetTemplate
								invoked.PrmFinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
								invoked.PrmTransactionCodeBlock				= DistributionAccount
								if (GLCommitRel.POCommitOrigPeriod entered)
       								invoked.PrmDate      					= GLCommitRel.EntityYearPeriod.Date
								else
									invoked.PrmDate                         = DerivedEncumbranceDate
								invoked.PrmBusinessClassName                = "PurchaseOrder"
								invoked.PrmEditContext                      = "Cancel"								
								if (DerivedDistributionAmount = 0)
									invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1	     		
									invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1   			
									invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.AlternateAmount3	= GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1      		
									invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1     		
									invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1      		
									invoked.PrmReportAmounts.ToAlternateAmount3	= GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.ProjectAmount		= GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1				
									invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1				
									invoked.PrmReportAmounts.ReportAmount3		= GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.ReportAmount4		= GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1			
									invoked.PrmReportAmounts.ReportAmount5		= GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
								else
								if (DerivedDistributionAmount > 0)
									invoked.PrmReportAmounts.FunctionalAmount   = ((GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount - ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount) * -1)	     		
									invoked.PrmReportAmounts.AlternateAmount    = ((GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount - ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount) * -1)   			
									invoked.PrmReportAmounts.AlternateAmount2   = ((GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount - ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.AlternateAmount3	= ((GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount - ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.ToFunctionalAmount = ((GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount - ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount) * -1)      		
									invoked.PrmReportAmounts.ToAlternateAmount  = ((GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount - ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount) * -1)     		
									invoked.PrmReportAmounts.ToAlternateAmount2 = ((GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount - ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount) * -1)      		
									invoked.PrmReportAmounts.ToAlternateAmount3	= ((GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount - ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.ProjectAmount		= ((GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount - ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.ReportAmount1      = ((GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount - ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount) * -1)				
									invoked.PrmReportAmounts.ReportAmount2      = ((GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount - ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount) * -1)				
									invoked.PrmReportAmounts.ReportAmount3		= ((GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount - ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.ReportAmount4		= ((GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount - ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount) * -1)			
									invoked.PrmReportAmounts.ReportAmount5		= ((GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount - ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount) * -1)
						if (!PrmFromInvoice
						and !PrmFromCancel
						and !PrmFromOverreceiving
						and !PrmFromArchive)
							invoke ChangeReleasedCommitment
								invoked.PrmQuantityOrCostUpdate 	= PrmQuantityOrCostUpdate
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							and	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							and	PerformBudgetEdit)
								invoke Delete BudgetEditErrorRel
								invoke EditCommitmentIncrease
									invoked.ParmCommitmentIncrease   = (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount - GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
						if (PrmFromInvoice
						or  PrmFromCancel
						or  PrmFromArchive
						or  PrmFromOverreceiving)

							invoke UpdateReleasedCommitment GLCommitRel

								invoked.TransactionAmount        = DerivedDistributionAmount
								invoked.ReportCurrencyAmount     = ReportCurrencyAmount
								invoked.TransactionDate          = DerivedEncumbranceDate
								invoked.AccountingEntity         = Company.AccountingEntity
								invoked.FinanceCodeBlock         = DistributionAccount
								invoked.CurrencyCode             = PurchaseOrder.Currency 
					else

						invoke MaintainUnreleasedCommitment
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						and PerformBudgetEdit)

							if (!PurchaseOrderLine.CommittedRequisitionLineSourcesExist
							and !ContractCommitments)
								invoke Delete BudgetEditErrorRel
								invoke Delete BudgetEditErrorHeaderRel								
								if (!FromDateChange)
									invoke FastUpdate PurchaseOrder
										invoked.BudgetEditProcessing = 0
								invoke PerformBudgetEdit
									
				else
				if (!CommitmentExists
				and DerivedDistributionAmount > 0)   
					invoke CreateCommitment
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						if (PerformBudgetEdit) 
							invoke PerformBudgetEdit	



		        if (((RemoveContractReversal
				or  DeleteSourceReversal
				or  AddSourceReversal
				or  FromRequisitionCombineLines
				or  ReduceFromSourceAmount > 0
				or  FromRequisitionAOC)
				and !PrmFromCancel
				and !PrmFromInvoice
				and !PrmFromOverreceiving)
				and LocalReversalUpdateAmount > 0)

					invoke CreateBudgetTemplateReversal GLCommitRel
	      				invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
	      				invoked.PrmUniqueID         					= PurchaseOrder.UniqueID
	      				invoked.PrmCodeBlock        					= DistributionAccount
	      				invoked.PrmGLDate           					= DerivedEncumbranceDate
	      				invoked.PrmTransAmount      					= LocalReversalUpdateAmount
	      				invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReversalUpdateReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReversalUpdateReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReversalUpdateReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReversalUpdateReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReversalUpdateReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReversalUpdateReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReversalUpdateReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReversalUpdateReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount				
						invoked.PrmSkipBudgetRebuild                    = true		

		UpdateReportCurrencyAmount is an Update Action   
			restricted
			
			Action Rules
			
				include CheckForProjectDateRange 
		
		UpdateReportCurrencyAmountInstance is an Instance Action
				
			Action Rules	
				if (!FromCreate)
					initialize ReportCurrencyAmount
				
				TransientCurrencyTable  		  							= PurchaseOrder.CurrencyTable
				TransientAccountingEntity         							= Company.AccountingEntity
				TransientExchangeDate    		  							= DerivedEncumbranceDate
				TransientPostingDate                                        = DerivedEncumbranceDate
				TransientFromCurrency             							= PurchaseOrder.Currency
				TransientCurrencyAmount           							= DerivedDistributionAmount
				ReportCurrencyAmount.ReportAmount1.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyFive
				if (PurchaseOrder.Currency != Company.Currency)
					ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate
				ReportCurrencyAmount.UseDerivedCalculations  				= true
				LocalDerivedCalculationsComplete    						= ReportCurrencyAmount.DerivedCalculationsComplete
				

				if (Company.AccountingEntity.AlternateCurrency not entered)
					initialize ReportCurrencyAmount.AlternateAmount
				if (Company.AccountingEntity.AlternateCurrency2 not entered)
					initialize ReportCurrencyAmount.AlternateAmount2
				if (Company.AccountingEntity.AlternateCurrency3 not entered)
					initialize ReportCurrencyAmount.AlternateAmount3
				

				if (Company.AccountingEntity not = DistributionAccount.ToAccountingEntity)
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency not entered)
						initialize ReportCurrencyAmount.ToAlternateAmount
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency2 not entered)
						initialize ReportCurrencyAmount.ToAlternateAmount2
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency3 not entered)
						initialize ReportCurrencyAmount.ToAlternateAmount3
				else 
					initialize ReportCurrencyAmount.ToFunctionalAmount
					initialize ReportCurrencyAmount.ToAlternateAmount
					initialize ReportCurrencyAmount.ToAlternateAmount2
					initialize ReportCurrencyAmount.ToAlternateAmount3


				if (Company.FinanceEnterpriseGroup.ReportCurrencyOne not entered)
					initialize ReportCurrencyAmount.ReportAmount1
				if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo not entered)
					initialize ReportCurrencyAmount.ReportAmount2
				if (Company.FinanceEnterpriseGroup.ReportCurrencyThree not entered)
					initialize ReportCurrencyAmount.ReportAmount3
				if (Company.FinanceEnterpriseGroup.ReportCurrencyFour not entered)
					initialize ReportCurrencyAmount.ReportAmount4
				if (Company.FinanceEnterpriseGroup.ReportCurrencyFive not entered)
					initialize ReportCurrencyAmount.ReportAmount5
				
		UpdateReportCurrencyAmountForMigrate is an Update Action   
			restricted
			
			Action Rules



		RecalculateCommitmentAmounts is an Instance Action
			restricted
			Action Rules
				if (PurchaseOrderLine.PreviouslyReleased = false)
					invoke Purge GLCommitRel
						invoked.PrmPurgeRecalculate = true
					LocalFromRecalculate = true
					LocalApplyBudgetTemplateReversal = true

					include CalculateCommitmentAmounts
				else
				if (GLCommitRel.LastCurrAmountDiff > 0)
					invoke ClearLastCurrencyAmount GLCommitRel
					invoke ChangeReleasedCommitment
		
		UpdateForFieldRules is an Update Action
			restricted
			
		Delete is a Delete Action
			valid when (IsValidToDelete)
			Entrance Rules
				invoke DeletePOCommitment
			
			Action Rules
				constraint (!ClosedPurchaseOrderLine)
					"CannotDeleteDistributionForCancelledOrClosedLine"
				constraint (IsValidForDistribution)
					"CannotDeleteAccountForItemOnCommittedContract"
									
			Exit Rules
				if (not LocalDeleteDistribution)
					if (PurchaseOrderLine.PurchaseOrderLineDistributionsRel not exists)					
						invoke UpdateFromDistribution PurchaseOrderLine
					
					if (PurchaseOrderLineAssetRel exists)
						constraint (not PurchaseOrderLineAssetRel.HasAssetDetails)
							"CannotDeletePurchaseOrderLineAsset:PurchaseOrderLineAssetDetailsExist"
						invoke Delete PurchaseOrderLineAssetRel
					
					if (PurchaseOrderLine.PurchaseOrderLineLifeCycleState.Released)
						invoke Released.Update PurchaseOrderLine
						if (PurchaseOrder.PurchaseOrderLifeCycleState.Released)
							if (PurchaseOrder.Issued)
								invoke Released.Update PurchaseOrder
							else
								invoke Released.Unrelease PurchaseOrder

		CreateCommitment is an Instance Action
			restricted
			
			Exit Rules




				invoke CreateCommitment GLCommit
					assign result to LocalReversalGLCommitView
					invoked.HeaderUniqueID 					= PurchaseOrder.UniqueID
					invoked.AccountingEntity				= Company.AccountingEntity
					invoked.FinanceEnterpriseGroup			= Company.ProcurementGroup.FinanceEnterpriseGroup
					invoked.System							= "PO"
					invoked.FinanceCodeBlock				= DistributionAccount
					invoked.CurrencyCode					= PurchaseOrder.Currency
					invoked.TransactionAmount				= DerivedDistributionAmount
					invoked.ReportCurrencyAmount			= ReportCurrencyAmount     
					invoked.TransactionDate					= DerivedEncumbranceDate
					invoked.OriginatingTransaction			= reference to this instance
					invoked.TransBusinessObjectRef			= reference to PurchaseOrder
					invoked.PrmAllowRebuild                 = true
					if (ContractCommitments
					and !PurchaseOrderLine.CommittedRequisitionLineSourcesExist)
						invoked.TransientFromContract = true 



					if  (LocalFromRecalculate = true
					and (ContractCommitments
					or  (PurchaseOrderLine.CommittedRequisitionLineSourcesExist
					and  NoUnitCostOrQuantityDifferencesWithRequisitions)))
						invoked.TransientSkipRebuild = true
						initialize LocalApplyBudgetTemplateReversal
		
		DeletePOCommitment is an Instance Action 
			restricted
			Parameters
				PrmSkipUpdateTemplateTotals is Boolean
			Action Rules
				if (BudgetErrorExists)
					invoke Delete BudgetEditErrorRel
		
				if (CommitmentExistsWithChanges)

					LocalCurrAmount.FunctionalAmount 	= (GLCommitRel.LastCurrAmountDiff.FunctionalAmount * -1)
					LocalCurrAmount.AlternateAmount  	= (GLCommitRel.LastCurrAmountDiff.AlternateAmount  * -1)
					LocalCurrAmount.AlternateAmount2 	= (GLCommitRel.LastCurrAmountDiff.AlternateAmount2 * -1)
					LocalCurrAmount.AlternateAmount3 	= (GLCommitRel.LastCurrAmountDiff.AlternateAmount3 * -1)
					LocalCurrAmount.ToFunctionalAmount 	= (GLCommitRel.LastCurrAmountDiff.ToFunctionalAmount * -1)
					LocalCurrAmount.ToAlternateAmount  	= (GLCommitRel.LastCurrAmountDiff.ToAlternateAmount  * -1)
					LocalCurrAmount.ToAlternateAmount2 	= (GLCommitRel.LastCurrAmountDiff.ToAlternateAmount2 * -1)
					LocalCurrAmount.ToAlternateAmount3 	= (GLCommitRel.LastCurrAmountDiff.ToAlternateAmount3 * -1)
					LocalCurrAmount.ProjectAmount    	= (GLCommitRel.LastCurrAmountDiff.ProjectAmount    * -1)
					LocalCurrAmount.ReportAmount1    	= (GLCommitRel.LastCurrAmountDiff.ReportAmount1    * -1)
					LocalCurrAmount.ReportAmount2    	= (GLCommitRel.LastCurrAmountDiff.ReportAmount2    * -1)
					LocalCurrAmount.ReportAmount3    	= (GLCommitRel.LastCurrAmountDiff.ReportAmount3    * -1)
					LocalCurrAmount.ReportAmount4    	= (GLCommitRel.LastCurrAmountDiff.ReportAmount4    * -1)
					LocalCurrAmount.ReportAmount5    	= (GLCommitRel.LastCurrAmountDiff.ReportAmount5    * -1)
					LocalEndDate 						= DerivedEntityCalendarPeriod
					invoke UpdateTemplateTotals BudgetTemplate
						invoked.PrmFinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
						invoked.PrmTransactionCodeBlock				= DistributionAccount
						invoked.PrmDate								= DerivedEncumbranceDate		
						invoked.PrmReportAmounts.FunctionalAmount 	= (LocalCurrAmount.FunctionalAmount)
						invoked.PrmReportAmounts.AlternateAmount  	= (LocalCurrAmount.AlternateAmount)
						invoked.PrmReportAmounts.AlternateAmount2 	= (LocalCurrAmount.AlternateAmount2)
						invoked.PrmReportAmounts.AlternateAmount3 	= (LocalCurrAmount.AlternateAmount3)
						invoked.PrmReportAmounts.ToFunctionalAmount = (LocalCurrAmount.ToFunctionalAmount)
						invoked.PrmReportAmounts.ToAlternateAmount  = (LocalCurrAmount.ToAlternateAmount)
						invoked.PrmReportAmounts.ToAlternateAmount2 = (LocalCurrAmount.ToAlternateAmount2)
						invoked.PrmReportAmounts.ToAlternateAmount3 = (LocalCurrAmount.ToAlternateAmount3)
						invoked.PrmReportAmounts.ProjectAmount    	= (LocalCurrAmount.ProjectAmount)
						invoked.PrmReportAmounts.ReportAmount1    	= (LocalCurrAmount.ReportAmount1)
						invoked.PrmReportAmounts.ReportAmount2    	= (LocalCurrAmount.ReportAmount2)
						invoked.PrmReportAmounts.ReportAmount3    	= (LocalCurrAmount.ReportAmount3)
						invoked.PrmReportAmounts.ReportAmount4    	= (LocalCurrAmount.ReportAmount4)
						invoked.PrmReportAmounts.ReportAmount5    	= (LocalCurrAmount.ReportAmount5)				
						invoked.PrmBusinessClassName                = "PurchaseOrder"
						invoked.PrmEditContext                      = "Delete"
				if (GLCommitRel.Status.Released)
					
					invoke UpdateTemplateTotals BudgetTemplate
						invoked.PrmFinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
						invoked.PrmTransactionCodeBlock				= DistributionAccount
						invoked.PrmDate					    		= DerivedEncumbranceDate
						invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1	     		
						invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1    			
						invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1     			
						invoked.PrmReportAmounts.AlternateAmount3	= GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1 			
						invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1       		
						invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1      		
						invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1       		
						invoked.PrmReportAmounts.ToAlternateAmount3	= GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1 			
						invoked.PrmReportAmounts.ProjectAmount		= GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1 			
						invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1 				
						invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1 				
						invoked.PrmReportAmounts.ReportAmount3		= GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1 			
						invoked.PrmReportAmounts.ReportAmount4		= GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1 			
						invoked.PrmReportAmounts.ReportAmount5		= GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1 
						invoked.PrmBusinessClassName                = "PurchaseOrder"
						invoked.PrmEditContext                      = "Cancel"			
				if (GLCommitRel.Status.Unreleased
				and RequisitionCommitmentsExist
				and not PrmSkipUpdateTemplateTotals)
					
					for each RequisitionLineDistributionRel
						if (each.DistributionAccount = DistributionAccount)
							invoke UpdateTemplateTotals BudgetTemplate
								invoked.PrmFinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
								invoked.PrmTransactionCodeBlock				= DistributionAccount
								invoked.PrmDate					    		= DerivedEncumbranceDate
								invoked.PrmReportAmounts.FunctionalAmount   = each.GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1	     		
								invoked.PrmReportAmounts.AlternateAmount    = each.GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1    			
								invoked.PrmReportAmounts.AlternateAmount2   = each.GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1     			
								invoked.PrmReportAmounts.AlternateAmount3	= each.GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1 			
								invoked.PrmReportAmounts.ToFunctionalAmount = each.GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1       		
								invoked.PrmReportAmounts.ToAlternateAmount  = each.GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1      		
								invoked.PrmReportAmounts.ToAlternateAmount2 = each.GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1       		
								invoked.PrmReportAmounts.ToAlternateAmount3	= each.GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1 			
								invoked.PrmReportAmounts.ProjectAmount		= each.GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1 			
								invoked.PrmReportAmounts.ReportAmount1      = each.GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1 				
								invoked.PrmReportAmounts.ReportAmount2      = each.GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1 				
								invoked.PrmReportAmounts.ReportAmount3		= each.GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1 			
								invoked.PrmReportAmounts.ReportAmount4		= each.GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1 			
								invoked.PrmReportAmounts.ReportAmount5		= each.GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1 
								invoked.PrmBusinessClassName                = "PurchaseOrder"
								invoked.PrmEditContext                      = "Delete"		
							end for each

			Exit Rules	
				if (CommitmentExists)
					invoke Purge GLCommitRel
						if (PurchaseOrderLine.Released)
							invoked.PrmPurgeReleased     = true     
						if (ContractCommitments
						or  RequisitionCommitmentsExist)
							for each RequisitionLineDistributionRel
								if (each.DistributionAccount = DistributionAccount
								and not LocalDeleteDistribution) 
									invoked.PrmRelatedCommitment = true
								end for each
				
		MaintainUnreleasedCommitment is an Instance Action
			restricted
			
			Exit Rules



				invoke MaintainUnreleasedCommitment GLCommitRel
					invoked.TransactionAmount        = DerivedDistributionAmount
					invoked.ReportCurrencyAmount     = ReportCurrencyAmount
					invoked.TransactionDate          = DerivedEncumbranceDate
					invoked.AccountingEntity         = Company.AccountingEntity
					invoked.FinanceCodeBlock         = DistributionAccount
					invoked.CurrencyCode             = PurchaseOrder.Currency
					if (ContractCommitments)
						invoked.TransientFromContract = true 

					if (PurchaseOrderLine.FromRequisitions
					or ContractCommitments)
						invoked.PrmSkipForceRebuild = true
		
		ChangeReleasedCommitment is an Instance Action
			restricted
			
			Parameters
				PrmCodeBlockChange       is Boolean
				TransientCurrencyChanged is Boolean
				PrmQuantityOrCostUpdate	 is Boolean
				
			Exit Rules
				invoke ChangeReleasedCommitment GLCommitRel
					if (TransientCurrencyChanged = true)
						invoked.PrmCurrencyCode                     = PurchaseOrder.Currency
					invoked.PrmTransDate                            = DerivedEncumbranceDate
					if (PrmCodeBlockChange)
               			invoked.PrmCodeBlock                        = DistributionAccount
               			invoked.PrmDimensionCode					= DistributionAccount.DimensionCode		
						if (DistributionAccount.ToAccountingEntity changed)
							invoked.PrmEntityChanged				= true
					if (ContractCommitments)
						invoked.PrmTransientFromContract = true 
					invoked.PrmChangedCurrAmount.FunctionalAmount 	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					invoked.PrmLastTransAmount       				= DerivedDistributionAmount
					invoked.PrmChangedCurrAmount.ToFunctionalAmount = ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ToAlternateAmount  = ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ToAlternateAmount2 = ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					invoked.PrmChangedCurrAmount.ToAlternateAmount3 = ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					if (TransientCurrencyChanged = false
					and PrmCodeBlockChange       = false
					and not PrmQuantityOrCostUpdate)
						invoked.ParmAllowRebuild                    = true
					if (PurchaseOrderLine.PurchaseOrderLineUpdateFromUnMatchProcess
					or  PurchaseOrderAndLineAddOnChargeRel.PurchaseOrderLineUpdateFromUnMatchProcess)
						invoked.ParmIsCancelOrDelete = true
		
		InvoiceCancel is an Instance Action
			restricted
			Parameters 
				AOCOnly is Boolean
			Entrance Rules


				initialize ReportCurrencyAmount
				
				TransientCurrencyTable  		  							= PurchaseOrder.CurrencyTable
				TransientAccountingEntity         							= Company.AccountingEntity
				TransientExchangeDate    		  							= DerivedEncumbranceDate
				TransientPostingDate                                        = DerivedEncumbranceDate
				TransientFromCurrency             							= PurchaseOrder.Currency
				TransientCurrencyAmount           							= DerivedDistributionAmount
				ReportCurrencyAmount.ReportAmount1.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency               = Company.FinanceEnterpriseGroup.ReportCurrencyFive
				if (PurchaseOrder.Currency != Company.Currency)
					ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate   = PurchaseOrder.EnteredCurrencyConversionRate
				ReportCurrencyAmount.UseDerivedCalculations  				= true
				LocalDerivedCalculationsComplete    						= ReportCurrencyAmount.DerivedCalculationsComplete
			Exit Rules
				invoke ChangeReleasedCommitment GLCommitRel
					invoked.PrmTransDate                            = DerivedEncumbranceDate
					invoked.PrmChangedCurrAmount.FunctionalAmount 	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 
					invoked.PrmChangedCurrAmount.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 


					invoked.PrmLastTransAmount       				= DerivedDistributionAmount

					invoked.PrmChangedCurrAmount.ToFunctionalAmount = ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount  
					invoked.PrmChangedCurrAmount.ToAlternateAmount  = ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  
					invoked.PrmChangedCurrAmount.ToAlternateAmount2 = ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount  
					invoked.PrmChangedCurrAmount.ToAlternateAmount3 = ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount  
					invoked.ParmAllowRebuild                    	= true         
					invoked.ParmIsCancelOrDelete 					= true
					invoked.PrmPartialCancel						= true 

		PerformBudgetEdit is an Instance Action
			restricted
							
			Exit Rules
				invoke CheckTransaction BudgetTemplate
					invoked.PrmFinanceEnterpriseGroup   		= Company.ProcurementGroup.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup					= UniqueID
					invoked.PrmHeaderUniqueID                   = PurchaseOrder.UniqueID
					invoked.PrmTransactionCodeBlock				= DistributionAccount
					invoked.PrmDate								= DerivedEncumbranceDate
					invoked.PrmReportAmounts.FunctionalAmount 	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					
    			if (BudgetErrorExists)
					confirmation required   
                    	"Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"

		PerformDifferenceBudgetEdit is an Instance Action   
			restricted
							
			Action Rules
				invoke UpdateReportCurrencyAmount
			
			Exit Rules
				invoke CheckTransaction BudgetTemplate
					invoked.PrmFinanceEnterpriseGroup   		= Company.ProcurementGroup.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup					= UniqueID
					invoked.PrmHeaderUniqueID					= PurchaseOrder.UniqueID
					invoked.PrmTransactionCodeBlock				= DistributionAccount
					invoked.PrmDate								= DerivedEncumbranceDate
					invoked.PrmReportAmounts.FunctionalAmount 	= TransientCostDifferenceReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ProjectAmount		= TransientCostDifferenceReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount1      = TransientCostDifferenceReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount2      = TransientCostDifferenceReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount3      = TransientCostDifferenceReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount4      = TransientCostDifferenceReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount5      = TransientCostDifferenceReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount    = TransientCostDifferenceReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount2   = TransientCostDifferenceReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount3   = TransientCostDifferenceReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					
    			if (BudgetErrorExists)
					confirmation required   
                    	"Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"
		
		EditCommitmentIncrease is an Instance Action   
			restricted
			Parameters
				ParmCommitmentIncrease is an InternationalCost 
				FromReceiving          is Boolean
				
			Action Rules
		    	if (FromReceiving)
		    		invoke Delete BudgetEditErrorRel
		    	
		    	if (DistributionByAmount)
			   		LocalCommitmentIncrease = (DistributionAmount/PurchaseOrderLine.ExtendedAmount * (ParmCommitmentIncrease))
	   			if (DistributionByPercent)
	   				LocalCommitmentIncrease = (DistributionPercent * ParmCommitmentIncrease)
	   			else
	    			LocalCommitmentIncrease = (DistributionQuantity/PurchaseOrderLine.Quantity * PurchaseOrderLine.QuantityToCommit * ParmCommitmentIncrease)
				
			Exit Rules
				initialize TransientIndirectCommitmentIncrease
				
				TransientCurrencyTable          	= PurchaseOrder.CurrencyTable
				TransientAccountingEntity           = Company.AccountingEntity
				TransientExchangeDate               = DerivedEncumbranceDate
				TransientPostingDate                = DerivedEncumbranceDate
				TransientFromCurrency               = PurchaseOrder.Currency
				TransientCurrencyAmount             = LocalCommitmentIncrease
				TransientIndirectCommitmentIncrease.UseDerivedCalculations  = true
				LocalDerivedCalculationsComplete    = TransientIndirectCommitmentIncrease.DerivedCalculationsComplete
				
				invoke CheckTransaction BudgetTemplate
					invoked.PrmFinanceEnterpriseGroup   		= Company.ProcurementGroup.FinanceEnterpriseGroup
					invoked.PrmHeaderUniqueID					= PurchaseOrder.UniqueID
					invoked.PrmBudgetEditGroup					= UniqueID
					invoked.PrmTransactionCodeBlock				= DistributionAccount
					invoked.PrmDate								= DerivedEncumbranceDate
					invoked.PrmReportAmounts.FunctionalAmount 	= TransientIndirectCommitmentIncrease.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ProjectAmount		= TransientIndirectCommitmentIncrease.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount1      = TransientIndirectCommitmentIncrease.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount2      = TransientIndirectCommitmentIncrease.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount3      = TransientIndirectCommitmentIncrease.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount4      = TransientIndirectCommitmentIncrease.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount5      = TransientIndirectCommitmentIncrease.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount    = TransientIndirectCommitmentIncrease.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount2   = TransientIndirectCommitmentIncrease.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount3   = TransientIndirectCommitmentIncrease.AlternateAmount3.EnteredCurrencyAmount
				
    			if (BudgetErrorExists
    			and !FromReceiving)
					confirmation required   
                    	"Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"
				
		CreateMNRGlTransDetailFromBatch is an Instance Action
			restricted
			Parameters
				PrmDistributionAccount  is like FinanceCodeBlock
				PrmReference			is Alpha 30
				PrmTransactionDate		is an ExchangeDate
				PrmPostingDate			is an ExchangeDate
				PrmTransactionAmount	is a CurrencyAmount
				PrmCurrency				is a FromCurrency
				PrmJournalizeGroup      is a JournalizeGroup
			Action Rules
				LocalJournalizeGroup = PrmJournalizeGroup
				invoke Unreleased.Create GLTransactionDetail
					invoked.OriginatingTransaction 	= reference to this instance
					invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.System					= "PO"	
					invoked.Reference				= PrmReference 
					invoked.AccountingEntity		= Company.AccountingEntity
					invoked.TransactionAmount		= PrmTransactionAmount
					invoked.CurrencyCode			= PrmCurrency					 
					invoked.TransactionDate			= PrmTransactionDate
					invoked.PostingDate				= PrmPostingDate	 
					invoked.FinanceCodeBlock		= PrmDistributionAccount
					invoked.ReportCurrencyAmount 	= ReportCurrencyAmount 
					invoked.ReportCurrencyAmount.KeepRateOnly = true
		        	invoked.GeneralLedgerEvent 		= "PO" 													
					invoked.AutoReverse 			= true
					invoked.ControlDocumentNumber 	= PurchaseOrderLine.PurchaseOrder
					invoked.DocumentNumber		  	= PurchaseOrderLine.PurchaseOrder
					invoked.JournalizeGroup         = PrmJournalizeGroup		

					fill in fields from this instance	
						
		CreateGlTransDetailFromBatch is an Instance Action
			restricted
			Parameters
				PrmTransactionDate		is an ExchangeDate
				PrmReference			is Alpha 30
				PrmPostingDate			is an ExchangeDate
				PrmTransactionAmount	is a CurrencyAmount
				PrmCurrency				is a FromCurrency
				PrmJournalizeGroup      is a JournalizeGroup
			Action Rules
				LocalJournalizeGroup = PrmJournalizeGroup
				invoke Unreleased.Create GLTransactionDetail
					invoked.OriginatingTransaction 	= reference to this instance
					invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.System					= "PO"	
					invoked.Reference				= PrmReference//**"RecievedNotInvoiced"				
					invoked.AccountingEntity		= Company.AccountingEntity
					invoked.TransactionAmount		= PrmTransactionAmount
					invoked.CurrencyCode			= PrmCurrency					 
					invoked.TransactionDate			= PrmTransactionDate
					invoked.PostingDate				= PrmPostingDate	 
					invoked.FinanceCodeBlock		= DistributionAccount
					invoked.ReportCurrencyAmount 	= ReportCurrencyAmount 
					invoked.ReportCurrencyAmount.KeepRateOnly = true
		        	invoked.GeneralLedgerEvent 		= "PO" 													
					invoked.AutoReverse 			= true
					invoked.ControlDocumentNumber 	= PurchaseOrderLine.PurchaseOrder
					invoked.DocumentNumber		  	= PurchaseOrderLine.PurchaseOrder
					invoked.JournalizeGroup         = PrmJournalizeGroup		

					fill in fields from this instance
			
		ReleaseGLTrans is an Instance Action
			restricted	
			Action Rules
				invoke Unreleased.Release GLTransDetailByJournalizeGroupRel
		
		JournalizeDistributionsForBatch is an Instance Action 
			restricted
			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPurchasingCompany	is a PurchasingCompany
					default label is "PurchasingCompany"
				PrmProcessLevel			is a PayablesProcessLevel
					default label is "ProcessLevel"
				PrmJournalizeGroup       is like JournalizeGroup
			Action Rules
				LocalJournalizeGroup = PrmJournalizeGroup
				invoke JournalizeDistributions PurchaseOrderLineDistributionDetail
					invoked.PrmEnterpriseGroup	 = PrmEnterpriseGroup
					invoked.PrmPurchasingCompany = PrmPurchasingCompany
					invoked.PrmProcessLevel		 = PrmProcessLevel
					invoked.PrmJournalizeGroup	 = PrmJournalizeGroup
					
					

		JournalizeDistributions is a Set Action		

			restricted
			completion message is "<CompletionMessage>"
			run in foreground	 

			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPurchasingCompany    is a PurchasingCompany
					default label is "PurchasingCompany"
				PrmProcessLevel			is a PayablesProcessLevel
					default label is "ProcessLevel"
				PrmDescription			is a Description
					default label is "Description"
				PrmJournalizeGroup       is like JournalizeGroup
			Parameter Rules
				PrmEnterpriseGroup
					initial value is Company.FinanceEnterpriseGroup
					required
				PrmPurchasingCompany 	 
					required
				PrmDescription
					initial value is "RNIPosting"
											
			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10
				MyJournalizeGroup		is like JournalizeGroup

			Instance Selection
				where (Company				        = PrmPurchasingCompany
				and   (PurchaseOrder.ProcessLevel	= PrmProcessLevel
				or     PrmProcessLevel      not entered)
				and    GLTransDetailByJournalizeGroupRel.JournalizeGroup 		= PrmJournalizeGroup)

			Sort Order
				Company
				PurchaseOrder.ProcessLevel
				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "PurchaseOrderLineDistributionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
				
				Set Rules
					Entrance Rules
						MyJournalizeGroup = PrmJournalizeGroup

					Exit Rules
						CompletionMessage = "PurchaseOrderLineDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"
							
				Instance Rules
					invoke InitiateJournalizeForRunGroup PrmEnterpriseGroup in background
						invoked.PrmJournalizeGroup				= MyJournalizeGroup
						invoked.PrmJournalizeGroupDescription	= PrmDescription
						if (Company.PostingOption.Detail)
							invoked.PrmInterfaceInDetail		= true
						else
							invoked.PrmInterfaceInDetail 		= false
						
						CompletionMessage = "PurchaseOrderLineDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>"





		
		UpdateQuantityFromInterface is an Instance Action
			restricted
			Parameters
				PrmDistributionQuantity			is a Quantity
				PrmDistributionAmount			is an InternationalAmount
				PrmDistributionPercent			is Percent size 6.3
    		Action Rules
    			
    			if (DistributionByAmount
    			or  PrmDistributionAmount > 0)
    				DistributionAmount += PrmDistributionAmount
				else
				if (DistributionByQuantity
				or  PrmDistributionQuantity > 0)
					DistributionQuantity += PrmDistributionQuantity
				else
				if (DistributionByPercent
				or	PrmDistributionPercent > 0)
					DistributionPercent += PrmDistributionPercent

			Exit Rules
				
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
    			or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)

					invoke UpdateGLCommitmentIndirect
						invoked.FromRequisitionCombineLines = true
				
    	MoveToDistributionByQuantity is an Instance Action
    		restricted
    		Parameters
    			PrmDistributionQuantity is a Quantity
    			PrmIncrement			is Boolean
    		Action Rules
    			constraint (IsValidForDistribution)
					"CannotUpdateDistributionsForPurchaseOrderLinesWithCommittedContracts"
    			initialize DistributionPercent
    			initialize DistributionAmount
    			if (PrmIncrement)
					DistributionQuantity += PrmDistributionQuantity
				else
					DistributionQuantity  = PrmDistributionQuantity
							
		UpdateQuantities is an Instance Action
			restricted
			Parameters
				PrmCancelQuantity		is a Quantity
			Action Rules
				DistributionQuantity = PrmCancelQuantity
				if (DistributionQuantity = 0)
					LocalDeleteDistribution = true
					invoke Delete
				
		UpdateAmounts is an Instance Action
			restricted
			Parameters
				PrmCancelAmount			is an InternationalAmount
			Action Rules
				DistributionAmount = PrmCancelAmount
				if (DistributionAmount = 0)
					LocalDeleteDistribution = true
					invoke Delete
				
		DeleteBudgetErrors is an Instance Action
			restricted
			
			Action Rules
				invoke Delete BudgetEditErrorRel






		BatchCopyPurchaseOrderLineDistribution is a Set Action
			restricted
			Parameters
				PrmCompany					is a PurchasingCompany
				PrmPurchaseOrder			is like PurchaseOrder 
				PrmCopyFromPurchaseOrder	is a PurchaseOrder
				PrmTransactionDate			is an ExchangeDate
				PrmCopyIgnoreCancelQuantity	is Boolean

			Instance Selection
				where	(Company			= PrmCompany
				and		 PurchaseOrder	= PrmCopyFromPurchaseOrder
				and		(PurchaseOrderLine.HeaderIsFullyCanceledOrLineCanBeCopied
				or 		(PrmCopyIgnoreCancelQuantity and PurchaseOrderLine.ForIgnoreCancelQuantity))
				and		 AddOnCharge not entered)
			Action Rules
				Instance Rules
					invoke CreateRestricted 
						resume on error
						fill in fields from this instance
						invoked.Company					= PrmCompany
						invoked.PurchaseOrder			= PrmPurchaseOrder
						invoked.TransientExchangeDate	= PrmTransactionDate



		CreateDistributions is a Set Action
			restricted
			Parameters
				PrmCompany					is a PurchasingCompany
				PrmPurchaseOrder			is a PurchaseOrder
				PrmPurchaseOrderLine		is a PurchaseOrderLine
				PrmAddOnCharge				is a AddOnCharge
				PrmRNIPostDate				is Date
				PrmRNIRun					is a PurchaseOrderResult
				PrmRNILine					is a RNILine
				PrmRNILocalFields			is a RNIWork
				PrmRNILocalRD				is a RNIData
			
			Instance Selection
				where (Company 				= PrmCompany
				and    PurchaseOrder 		= PrmPurchaseOrder
				and    PurchaseOrderLine 	= PrmPurchaseOrderLine
				and    AddOnCharge 			= PrmAddOnCharge)
			
			Local Fields
				LocalRNILocalFields			is a RNIWork
				LocalRNILocalRD				is a RNIData

				LocalGrossQuantity			is a Quantity
				LocalTotalSkipQuantity 		is a Quantity
				LocalTotalLastQuantity 		is a Quantity
				LocalQuantityQuantifier		is a Quantity
				LocalTempQuantifier			is a Quantity

	       	Action Rules
	       		Set Rules
	       			Entrance Rules
	       				LocalRNILocalFields = PrmRNILocalFields
	       				LocalRNILocalRD		= PrmRNILocalRD
	       				LocalRNILocalFields.Counter = 0
	       				LocalRNILocalFields.PoapproveQtyFinished = false
	       				
	       				LocalTotalSkipQuantity 	= LocalRNILocalRD.PliMatchedQty
	       				if (LocalRNILocalRD.PliMatchedQty = LocalRNILocalRD.PliQuantity)
	       					LocalTotalSkipQuantity = 0
	       				if (LocalRNILocalRD.PliMatchedQty > LocalRNILocalRD.PliQuantity)
	       					LocalQuantityQuantifier = LocalRNILocalRD.PliMatchedQty/LocalRNILocalRD.PliQuantity
							LocalTempQuantifier = LocalQuantityQuantifier
							round LocalQuantityQuantifier down to nearest 1
							if (LocalQuantityQuantifier > LocalTempQuantifier)
								LocalQuantityQuantifier -= 1
							LocalTotalSkipQuantity = LocalRNILocalRD.PliMatchedQty - (LocalQuantityQuantifier * LocalRNILocalRD.PliQuantity)
						
						initialize LocalQuantityQuantifier
						LocalGrossQuantity = LocalRNILocalRD.AccQty + LocalTotalSkipQuantity
						LocalQuantityQuantifier = LocalGrossQuantity/LocalRNILocalRD.PliQuantity
						LocalTempQuantifier = LocalQuantityQuantifier
						round LocalQuantityQuantifier down to nearest 1
						if (LocalQuantityQuantifier > LocalTempQuantifier)
							LocalQuantityQuantifier -= 1
						LocalTotalLastQuantity = LocalGrossQuantity - (LocalQuantityQuantifier * LocalRNILocalRD.PliQuantity)
						
					Exit Rules
						LocalRNILocalFields.PoapproveQtyFinished = true
	       		
	       		Instance Rules
					if (PurchaseOrderLine.DistributionBy.ByAmount)
						include ProcessRNILineDistributionByAmount
					if (PurchaseOrderLine.DistributionBy.ByPercent)
						include ProcessRNILineDistributionByPercent
						

					if (PurchaseOrderLine.DistributionBy.ByQuantity)
						include ProcessRNILineDistributionByQuantity
						
		UpdateAmountServiceCommitments is a Set Action
			restricted
			Instance Selection
				where (PurchaseOrderLine.ServiceCancelAmount > 0
				and    CommitmentExists)
			Action Rules
				Instance Rules
					if (GLCommitRel.TransactionAmount > 0)
						invoke UpdateFromAmountServiceFix GLCommitRel 
							invoked.TransientServiceAmount 				    = PurchaseOrderLine.ServiceCancelAmount * DistributionPercent 						
							invoked.TransientServiceReportCurrencyAmount 	= TransientServiceCancelReportCurrencyAmount 
			
		MigratePOCommitments is a Set Action
			restricted
			completion message is "<CompletionMessage>"
			run in background	 

			Parameters
				PrmPOCompany			is a PurchasingCompany

			Parameter Rules
											
			Local Fields
				LocalTranDate				is a ExchangeDate
				LocalTranAmount				is a CurrencyAmount
				CompletionMessage			is Alpha 150
				LocalGLCommitView			is a GLCommit view
				LocalMigrationResultView	is a MigrationResult view
				LocalErrorMessage 			is Alpha 150
				LocalErrorOccurred			is Boolean
				LocalMigrationJobType		is a MigrationJobType

			Instance Selection
				where (((Company		= PrmPOCompany
				and		 PrmPOCompany entered)
				or	    (!PrmPOCompany entered))
				and	    (!GLCommitRel exists)
				and		(!ClosedPurchaseOrderLine))

			Sort Order
				Company
				GltObjId
				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "PurchaseOrderCommitmentMigration;NoRecordsFoundToProcess"
				
					LocalMigrationJobType = MigrationJobType.MigratePurchaseOrderCommitments
					include Migration.CreateMigrationResult
						replace POCompany with PrmPOCompany
						replace RQCompany with blank
						replace ContractGroup with blank
						replace Contract with blank
						replace CashManagementGroup with blank
						replace PayablesCompany with blank
					invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Set Rules
					Entrance Rules
						LocalMigrationJobType = MigrationJobType.MigratePurchaseOrderCommitments
						include Migration.CreateMigrationResult
							replace POCompany with PrmPOCompany
							replace RQCompany with blank
							replace ContractGroup with blank
							replace Contract with blank
							replace CashManagementGroup with blank
							replace PayablesCompany with blank

					Exit Rules
						invoke SetAsCompleted LocalMigrationResultView.MigrationResult
							
				Instance Rules
					initialize LocalTranAmount
					LocalTranDate				= DerivedEncumbranceDate		
					LocalErrorOccurred			= false

					if (GLCommitxRel exists
					and GLCommitxRel.TransactionAmount > 0)
						LocalTranAmount			= GLCommitxRel.TransactionAmount
					else
						if (!GltObjId entered
						and ACCommitxRel exists
						and ACCommitxRel.TransactionAmount > 0)
							LocalTranAmount		= ACCommitxRel.TransactionAmount
						else
							if (UnreleasedPurchaseOrder)
								LocalTranAmount		= DerivedDistributionAmount
						
					if (LocalTranDate entered
					and LocalTranAmount entered)
						invoke UpdateReportCurrencyAmountInstance	
						invoke CreateCommitment GLCommit
							assign result to LocalGLCommitView
							resume on error
								LocalErrorMessage 					= error message
								LocalErrorOccurred					= true
							invoked.HeaderUniqueID 					= PurchaseOrder.UniqueID
							invoked.AccountingEntity				= Company.AccountingEntity
							invoked.FinanceEnterpriseGroup			= Company.ProcurementGroup.FinanceEnterpriseGroup
							invoked.System							= "PO"
							invoked.FinanceCodeBlock				= DistributionAccount
							invoked.CurrencyCode					= PurchaseOrder.Currency
							invoked.TransactionAmount				= LocalTranAmount
							invoked.ReportCurrencyAmount			= ReportCurrencyAmount     
							invoked.TransactionDate					= LocalTranDate
							invoked.OriginatingTransaction			= reference to this instance
							invoked.TransBusinessObjectRef			= reference to PurchaseOrder
							if (GLCommitxRel exists
							or  ACCommitxRel exists)
								invoked.TransientMigrateAsReleased	= true
							else
								invoked.TransientMigrateAsReleased	= false
						
						include Migration.CreateMigrationResultDetail

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke PurgeValidSubLedgerTrx GLTransactionDetailRel
				
		SplitFESDistributions is a Set Action
			default label is "FrontEndSplitDistributions"
			restricted
			Parameters
				PrmCompany						is a PurchasingCompany
					default label is "Company"
				PrmPurchaseOrder				is a PurchaseOrder
					default label is "PurchaseOrder"
				PrmPurchaseOrderLine			is a PurchaseOrderLine
					default label is "PurchaseOrderLine"
			Parameter Rules
				PrmCompany
					required
				PrmPurchaseOrder
					required
				PrmPurchaseOrderLine
					required
			Local Fields
				LocalRemainingAmount				is an InternationalAmount
				LocalRemainingPercent				is Percent size 6.3
				LocalRemainingQuantity				is like Quantity
					primitive decimal size is PurchaseOrderLine.Item.NumberOfDecimalsQuantity
				LocalForEachSumUnitsAmount			is an UnitsAmount
			Instance Selection
				where (Company = PrmCompany
				and PurchaseOrder = PrmPurchaseOrder
				and PurchaseOrderLine = PrmPurchaseOrderLine
				and DerivedOriginalDistributionAmount != 0
				and DistributionAccount.Project entered
				and !DistributionAccount.Project.ExcludeFromFES
				and DistributionAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits
				and not FromNonLandedAOC
				and not CreatedByFES)
			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
        				LocalDerivedFESKey	= "PO-"+PrmCompany+"-"+PrmPurchaseOrder+"-"+PrmPurchaseOrderLine
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
        				LocalDerivedFESKey	= "PO-"+PrmCompany+"-"+PrmPurchaseOrder+"-"+PrmPurchaseOrderLine
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
        			LocalDerivedFESKey	= "PO-"+PrmCompany+"-"+PrmPurchaseOrder+"-"+PrmPurchaseOrderLine
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= Company.FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= Company.AccountingEntity
						invoked.PrmDistribution					= PurchaseOrderLineDistribution
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= DerivedOriginalDistributionAmount
						invoked.PrmDistributionQuantity			= DistributionQuantity
						invoked.PrmDistributionPercent			= DistributionPercent
						invoked.PrmDistributionAmountWithTax	= DerivedDistributionAmount
						if(UnitAmount entered)
							invoked.PrmDistributionUnitsAmount	= UnitAmount
						invoked.PrmTransactionDate				= DistributionAccount.TransactionDate
						invoked.PrmPostingDate					= DistributionAccount.PostingDate
						invoked.PrmTransactionCurrencyCode		= PurchaseOrder.Currency
						invoked.PrmDistributionBy				= PurchaseOrderLine.DistributionBy
						invoked.PrmNumberOfDecimalsQuantity		= PurchaseOrderLine.Item.NumberOfDecimalsQuantity
						invoked.PrmGeneralLedgerSystemCode		= first GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
						invoked.PrmTransactionCodeBlock			= DistributionAccount
					if(FESDistByDistributionRel exists)
						initialize LocalRemainingPercent
						initialize LocalRemainingQuantity
						initialize LocalRemainingAmount
						initialize LocalForEachSumUnitsAmount
              			for each FESDistByDistributionRel
              				invoke Create PurchaseOrderLineDistribution
								fill in fields from PurchaseOrderLine
								invoked.DistributionAccount			= each.CodeBlock
								invoked.AssetInformation        	= PurchaseOrderLineDistribution.AssetInformation
								invoked.CreatedByFES				= true
								LocalForEachSumUnitsAmount 			+= each.FESUnitsAmount
								if(last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.UnitAmount						= each.FESUnitsAmount + (UnitAmount - LocalForEachSumUnitsAmount)
									if (PurchaseOrderLine.DistributionBy.ByAmount)
										LocalRemainingAmount 					= LocalRemainingAmount + each.FESAmount
										invoked.DistributionAmount				= each.FESAmount + (DistributionAmount - LocalRemainingAmount)
									else
										if(PurchaseOrderLine.DistributionBy.ByPercent)
											LocalRemainingPercent 				= LocalRemainingPercent + each.FESPercent
											invoked.DistributionPercent			= each.FESPercent + (DistributionPercent - LocalRemainingPercent)
										else
											LocalRemainingQuantity				= LocalRemainingQuantity + each.FESQuantity
											invoked.DistributionQuantity		= each.FESQuantity + (DistributionQuantity - LocalRemainingQuantity)
								else
									invoked.UnitAmount						= each.FESUnitsAmount
									if (PurchaseOrderLine.DistributionBy.ByAmount)
										invoked.DistributionAmount				= each.FESAmount
										LocalRemainingAmount 					= LocalRemainingAmount + each.FESAmount
									else
										if(PurchaseOrderLine.DistributionBy.ByPercent)
											invoked.DistributionPercent			= each.FESPercent
											LocalRemainingPercent 				= LocalRemainingPercent + each.FESPercent
										else
											invoked.DistributionQuantity		= each.FESQuantity
											LocalRemainingQuantity				= LocalRemainingQuantity + each.FESQuantity
						invoke Delete

		DeleteFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmCompany						is a PurchasingCompany
					default label is "Company"
				PrmPurchaseOrder				is a PurchaseOrder
					default label is "PurchaseOrder"
				PrmPurchaseOrderLine			is a PurchaseOrderLine
					default label is "PurchaseOrderLine"
			Parameter Rules
				PrmCompany
					required
				PrmPurchaseOrder
					required
				PrmPurchaseOrderLine
					required
			Instance Selection
				where (Company = PrmCompany
				and PurchaseOrder = PrmPurchaseOrder
				and PurchaseOrderLine = PrmPurchaseOrderLine
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Delete

		FinishCommitmentFromMatch  is a Set Action
			restricted
			Parameters
				PrmCompany						is a PurchasingCompany
					default label is "Company"
				PrmPurchaseOrder				is a PurchaseOrder
					default label is "PurchaseOrder"
			Parameter Rules
				PrmCompany
					required
				PrmPurchaseOrder
					required
			Instance Selection
				where (Company = PrmCompany
				and    PurchaseOrder = PrmPurchaseOrder)
			Action Rules
				Instance Rules
					if  (CommitmentExists
					and  !HistoryCommitmentExists)
						invoke UpdateGLCommitmentIndirect
							invoked.PrmFromInvoice = true

		CalculateDistributionAggregation is an Instance Action
			restricted 
			Local Fields
				LocalPODistributionAggregation is a PODistributionAggregation view

			Action Rules
				initialize LocalDistributionAmount

				if (DerivedDistributionAmount != 0)
					LocalDistributionAmount = DerivedDistributionAmount
				else
					if (AddOnCharge not entered
					and DerivedOriginalDistributionAmount != 0) 
						LocalDistributionAmount = DerivedOriginalDistributionAmount

				if (LocalDistributionAmount != 0)
					LocalFinanceCodeBlock		= DistributionAccount
					BypassActiveCodeBlockEdit	= true
					LocalBoolean				= LocalMatrixDimensionAccount.SetMatrixDimensions
					
					if (PODistributionAggregationRel exists)
						invoke CalculateAggregationUpdate first PODistributionAggregationRel
							invoked.InputAmount			= LocalDistributionAmount
						DistributionAggregation = first PODistributionAggregationRel.PODistributionAggregation
					else
						invoke Create PODistributionAggregation
							assign result to LocalPODistributionAggregation
							invoked.Company					= Company
							invoked.PurchaseOrder			= PurchaseOrder
							invoked.SummaryAccount			= LocalMatrixDimensionAccount
							invoked.SummaryAmount			= LocalDistributionAmount
						DistributionAggregation = LocalPODistributionAggregation.PODistributionAggregation

