CashLedgerGLDistribution is a BusinessClass
    owned by cb
    prefix is CBD
    classic name is CBDISTRIB
    default label is "CashLedgerDistribution"

    Ontology
        symbolic key is CashLedgerGLDistribution
            classic set name is CBDSET1
            classic name for CashLedgerGLDistribution.BankTransactionCode is BANK-INST-CODE
            classic name for CashLedgerGLDistribution.TransactionIDNumber is TRANS-IDENT
            classic name for CashLedgerGLDistribution.DistributionType is DIST-TYPE
            classic name for CashLedgerGLDistribution.SequenceNumber is SEQ-NBR

    Patterns
		implements InlineUserFields
			size is 1000	        
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        TransactionNumber
            classic name is TRANS-NBR
        TransactionNumberSuffix               is a Suffix
            classic name is SUFFIX
        GeneralLedgerSourceCode				  is a GeneralLedgerEvent  
            classic name is SOURCE-CODE
            default label is "SourceCode"
        Company                               is a CompanyIsolated  
        RecordType                            is a CashLedgerDistribRecordType  
        Status                                is Numeric size 1
            classic name is REC-STATUS
            States
                Unreleased value is 0
                Released   value is 1
                Posted     value is 9
			disable Auditing
        PostDate                              is a PostingDate















        DistributionToBankAmount              is an InternationalAmount
            classic name is TO-BNK-DST-AMT
                precision is  TransientFromCurrency.NumberOfDecimals	
        Reference
        Description
        TaxCode
        TaxableBankAmount                     is an InternationalAmount
            classic name is TRAN-TAXABLE
				precision is  TransientFromCurrency.NumberOfDecimals	
        TaxType                               is AlphaUpper size 1
            States
                InvoiceTaxIncluded value is "I"
                    default label is "Invoice (Tax Included)"
        ToBaseCurrencyNumberOfDecimals        is an AcctNd
            classic name is TO-BASE-ND
        ToTransactionCurrencyNumberOfDecimals is an AcctNd
            sql name is TTCurrencyNumberOfDecimals
            classic name is TO-TRAN-ND
        TransactionCurrencyNumberOfDecimals   is an AcctNd
            sql name is TCurrencyNumberOfDecimals
            classic name is TRAN-ND
        BaseCurrencyNumberOfDecimals          is a BaseNumberOfDecimals
            classic name is BASE-ND
        JournalEntryTransactionObjID          is an ObjId
            classic name is GLT-OBJ-ID




        CashLedgerStatement					  is like CashLedgerStatement
            classic name is RECON-STMT-NBR
        TaxBankAmount                         is an InternationalAmount
            classic name is TAX-AMOUNT
        TaxBaseAmount                         is an InternationalAmount 
            classic name is BASE-TAX-AMT








		GltObjId							  is an ObjId		
		AtnObjId							  is an ObjId		
		CashAllocationCode					
        CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected
		
	Transient Fields
		TransientFromCurrency				is a FromCurrency
			derive value from DerivedFromCurrency	




		GLFinanceCodeBlock		 			is a  TransactionCodeBlock				 		
			derive value from GLTransactionDetailRel.FinanceCodeBlock 
		GLTransactionAmount		 			is a  CurrencyAmount			
			derive value from GLTransactionDetailRel.TransactionAmount 
        GLBaseAmount						is a  FinanceCurrencyAmount
        	derive value from GLTransactionDetailRel.ReportCurrencyAmount
		GLBaseFunctionalAmount              is an InternationalAmount
			derive value from GLTransactionDetailRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount					 


		GLJournalizeGroup 					is like JournalizeGroup
			derive value from GLTransactionDetailRel.JournalizeGroup
		GLTJournalizeGroup					is like JournalizeGroup
		EftOffsetFlag						is Boolean
		TaxAccountingEntity			    	is a TaxEntity  
			derive value from DerivedTaxAccountingEntity
		CompanyAccountingEntity		    	is an AccountingEntity
			derive value from DerivedCompanyAccountingEntity  			  				        	        	            		
		ReturnedPaymentTransactionIDNumber	is Numeric size 10
		TransferHeaderCashCode 				is AlphaUpper 35
		TransientCreateFromBatchType		is Numeric 2
		TransientReferenceToThisInstance	is BusinessObjectReference
			derive value from reference to this instance
		TransientUnitsAmount				is a UnitsAmount	
			default label is "Units"
			derive value from GLTransactionDetailRel.UnitsAmount
		BypassBudgetAndCommitmentProcessing			is Boolean
		BypassBudgetEditing							is Boolean
		CancelPaymentDistributions					is Boolean
		CancelEFTDistributions						is Boolean	
		VoidEFTDistributions						is Boolean  
		VoidPaymentDistributions					is Boolean	
		ReopenReconDistributions					is Boolean	
		TransientTransactionNumber					is like TransactionNumber
		TransientTransactionDate					is Date
		BypassNegativeRateEdit
		ReconcileGeneralLedgerEntry					is Boolean
			default label is "ReconcileGlobalLedgerEntry"
		BypassStatusEdit							is Boolean	
		InterfaceAsPosted							is Boolean	
		BypassCashFundUpdate						is Boolean	
		SetToHistorical								is Boolean 	
		BypassActiveCodeBlockEdit
		
	Derived Fields
		RelationExists				is a DerivedField 
			type is Boolean
			restricted
			if (GLTransactionDetailRel exist)
				return true
			else
				return false				
				
		DerivedTaxAccountingEntity		is a DerivedField
			type is like TaxEntity
			restricted  
			if (TaxAccountingEntityHasValue)
				return blank
			else
				if (TaxCode entered)
					if (TaxAccountingEntity not entered)
						return GLFinanceCodeBlock.ToAccountingEntity
					
		DerivedCompanyAccountingEntity		is a DerivedField
			type is like AccountingEntity
			restricted
			if (IsCashLedgerReconciliationAdjustment)												
				return CashLedgerReconciliationAdjustmentRel.Company.OrigCompany.AccountingEntity
			else				
			if (CashLedgerCashReceiptHeader entered)
				return CashLedgerCashReceiptHeaderRel.Company.OrigCompany.AccountingEntity
			else				
			if (IsCashLedgerElectronicFundsTransferTransaction)
				return CashLedgerElectronicFundsTransferTransactionRel.Company.OrigCompany.AccountingEntity
			else				
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					return CashLedgerReturnedPaymentForBankExpenseRel.Company.OrigCompany.AccountingEntity
				else
					return CashLedgerReturnedPaymentRel.Company.OrigCompany.AccountingEntity
			else					
			if (IsCashLedgerPayment)
				if (CashLedgerPaymentRel exists)
					return CashLedgerPaymentRel.CompanyBaseData.OverrideCompany.AccountingEntity
				else																		
					return CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity	
			else	
			if (CashLedgerFundTransferDetail entered)
				return CashLedgerFundTransferHeaderRel.Company.OrigCompany.AccountingEntity	
			else				
			if (CashLedgerFundTransferHeader entered)
				return CashLedgerFundTransferHeaderRel.Company.OrigCompany.AccountingEntity
			else				
			if (IsCashLedgerTransaction)
				return CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity
			else
			if (IsCashLedgerPayablesPayment)
				if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
					return Company.OrigCompany.AccountingEntity
				else
					if (CashLedgerPayablesPaymentRel exists)									
						return CashLedgerPayablesPaymentRel.Company.AccountingEntity
					else																		
						return CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity	
																					
		CashLedgerDistributionPostingMessage is a MessageField 
			restricted
			"CashLedgerDistributionPosting"

		DerivedPeriodEndDate	is a DerivedField 
			type is Date
			restricted
			return CurrentGeneralLedgerCalendarPeriodRel.Date

		DerivedFromCurrency 	is a DerivedField  
			type is like FromCurrency
			restricted
			if (IsCashLedgerPayment
			and CashLedgerPaymentRel.UsingBankCurrencyPosting
			and CashLedgerGLDistribution.DistributionType.Entry		
			and !LocalPaymentCloseCashAccount)
				return CashLedgerPaymentRel.BankCurrency
			else
				return CashCode.Currency	
				
		DerivedAmountCurrency is a DerivedField
			type is Alpha size 100
			return CashLedgerElectronicFundsTransferTransactionRel.ReceiptAmount+"-" + CashCode.Currency
				
	Field Groups
		DistribUserFields
			include user fields
			
    Local Fields
        CalculateTax
        TaxTableOutput




        ProcessTaxHistory

		OldGLTransactionAmount					is an InternationalAmount
        TaxAccountingEntityHasValue				is Boolean
        TaxOut 									is Alpha 1
		LocalRecalcCurrencyAmountForAllDistribs	is Boolean

		LocalControlDocumentNumber				is Alpha 30
		LocalDocumentNumber						is Alpha 30
		LocalDocumentCurrencyTotals				is a  DocumentCurrencyTotals

		LocalExchangeDate			 			is an ExchangeDate
		LocalPostingDate			 			is a PostingDate
		LocalGeneralLedgerEvent					is a GeneralLedgerEvent
		LocalReference							is a Reference
		LocalDescription						is a Description
		LocalKeepRateOnly						is Boolean
		LocalCashLedgerGLDistribution			is a CashLedgerGLDistribution view
		CreateFromBatchType						is Numeric 2
			States
				PaymentLoad  					value is 1	
				TransactionLoad					value is 2	
				ReturnedPaymentLoad				value is 3	
				EftLoad							value is 4	
				ReceiptLoad						value is 5	
				StaleDate						value is 6  
				StaleDateReopen					value is 7  

				PaymentClose					value is 9  
				InvoiceReinstatement			value is 10 
				EftExtractUpdate				value is 11 
		LocalSystemCode            				is a GeneralLedgerSystemCode
		LocalCashManagementGroup				is like CashManagementGroup
		LocalCashCode							is like CashCode				
		BypassStructureRelationEdit
		BypassUnitAndAmountEdit
		NewTransactionIDNumber					is like TransactionIDNumber  
		CashLedgerVoidUpdate					is Boolean
		LocalVoidDate							is Date
		RejectCode								is a BankTransactionCode
		CashLedgerTransactionOffsetDistrib		is Boolean
		LocalHeaderUniqueID						is like UniqueID
		LocalHeaderBusinessObjectRef	 	 	is BusinessObjectReference
		LocalReleaseGlTransactionDetail			is Boolean
		LocalCurrencyTable						is a CurrencyTable
		LocalGeneralLedgerCompanyGroup			is a GeneralLedgerCompanyGroup
		LocalCashCodeGroup						is a CashCodeGroup
		LocalAccountingEntity					is like AccountingEntity
		LocalAccountingUnit						is like AccountingUnit
		LocalFinanceDimension1					is a FinanceDimension1
		LocalOriginatingTransaction				is BusinessObjectReference
		LocalPaymentCloseCashAccount			is Boolean	
		LocalCalculateCashFinanceStructure		is a CalculateCashFinanceStructure	
		LocalAnswer 							is Alpha size 1						
		LocalDistribBankAmount					is an InternationalAmount			
		LocalFinanceCurrencyAmount				is a FinanceCurrencyAmount			
		LocalBaseDistribAmount					is a FinanceCurrencyAmount			
		LocalVoidReopen							is Boolean							
#ifdef module cam
		LocalFinanceDimension10					is a FinanceDimension10				
		LocalActivityType						is Numeric size 1					
#endif
		LocalFEGtext							is like FinanceEnterpriseGroup
		LocalDerivedFESKey 						is a FrontEndSplitKey
		LocalCashLedgerJobResult				is a CashLedgerJobResult
		LocalJobResultSummary					is a CashLedgerJobResultSummary
																                				
	Context Fields
		CashLedgerPayment
		CashLedgerPayablesPayment
		CashLedgerTransaction
		CashLedgerReconciliationAdjustment
		CashLedgerElectronicFundsTransferTransaction
		CashLedgerFundTransferHeader
		CashLedgerFundTransferDetail
		CashLedgerReturnedPayment
		CashLedgerCashReceiptHeader
		WireTransferBatchDetail
		CompanyCashCode


				
    Conditions
        IsCashLedgerStatement
        	restricted
            classic name is CSDSET2
            when (CashLedgerStatement entered)

        IsCashLedgerStatement2
        	restricted
            classic name is CSMSET1
            when (CashLedgerStatement entered)

		IsCashLedgerTransactionRel
			restricted
			when (CashLedgerTransactionRel exist)

		IsChangeValidForPayment
			when ((CashLedgerPayment		entered
			or    CashLedgerPaymentRel		exists)
			and   CashLedgerPaymentRel.CanUpdateDistributions)

		IsChangeValidForTransaction
			when ((CashLedgerTransaction	entered
			or    CashLedgerTransactionRel	exists)
			and   CashLedgerTransactionRel.CanUpdateDistributions)

		IsChangeValidForElectronicFundsTransfer
			when ((CashLedgerElectronicFundsTransferTransaction		entered
			or    CashLedgerElectronicFundsTransferTransactionRel	exists)
			and   CashLedgerElectronicFundsTransferTransactionRel.CanUpdateDistributions)

		IsChangeValidForReturnedPayment
			when ((CashLedgerReturnedPayment	entered
			or    CashLedgerReturnedPaymentRel	exists)
			and   CashLedgerReturnedPaymentRel.Status.Unreleased
			and   !CashLedgerReturnedPayment.BudgetEditInProgress)			

		IsChangeValidForReconciliationAdjustment
			when ((CashLedgerReconciliationAdjustment	entered
			or    CashLedgerReconciliationAdjustmentRel	exists)
			and   CashLedgerReconciliationAdjustmentRel.Status.UnreleasedUnreconciled
			and   !CashLedgerReconciliationAdjustmentRel.BudgetEditInProgress)			

		IsChangeValidForAmendedDistribution 
            when (CashLedgerTransactionRel.AmendedDistributions
			and  !CashLedgerTransactionRel.BudgetEditInProgress)			
			
		IsChangeValid	
			restricted
			when (IsChangeValidForPayment
			or    IsChangeValidForTransaction
			or    IsChangeValidForElectronicFundsTransfer
			or    IsChangeValidForReturnedPayment
			or    IsChangeValidForReconciliationAdjustment
			or	  IsChangeValidForAmendedDistribution 
			or    CreateFromBatchType.PaymentClose 
			or    CreateFromBatchType.EftExtractUpdate)

		IsReleased
			restricted
			when (Status.Released)

		IsPosted
			restricted
			when (Status.Posted)

		IsUnpostedForPeriodClose	
			restricted
			when (Status.Released
			and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date) 
		
		ReverseDistributionValidRecordTypes 
			restricted
			when (RecordType.NotACashCodeDistribution
            or    RecordType.CashLedgerPaymentDistribution         	
            or    RecordType.EftExtractDistribution     
            or	  RecordType.WireTransferDistribution)
            
		CanReverseDistribution 
			restricted
			when (Status > 0
			and   CashLedgerGLDistribution.DistributionType.Entry
			and   ReverseDistributionValidRecordTypes
			and   CashLedgerTransactionRel exists)

				
		OutstandingCashLedgerGLDistributionsExist	
			restricted
			when (IsUnpostedForPeriodClose)
				



						
  		InterAccountingEntityTransaction
  			restricted
            when (CompanyAccountingEntity != GLFinanceCodeBlock.ToAccountingEntity)





		IsCreateFromBatch
			restricted
			when (CreateFromBatchType.PaymentLoad
			or    CreateFromBatchType.EftLoad
			or    CreateFromBatchType.ReceiptLoad
			or    CreateFromBatchType.TransactionLoad
			or    CreateFromBatchType.ReturnedPaymentLoad
			or    CreateFromBatchType.StaleDate
			or    CreateFromBatchType.StaleDateReopen

			or    CreateFromBatchType.PaymentClose
			or    CreateFromBatchType.InvoiceReinstatement
			or    CreateFromBatchType.EftExtractUpdate)


		BudgetErrorExists
			restricted
			when (BudgetEditErrorRel exists)
			
		CommitmentExists
			restricted
			when (GLCommitRel exists)
			
		ReleasedCommitmentExists
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status = 3)
			
		OpenCommitmentExists		
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status != 1)	

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		CashCodeGroupDetailRelExists
			restricted
			when (CashCodeGroupDetailRel exists)
			




















		IsCashLedgerPayment	
			when (CashLedgerSourceRecord = "CBM") 

		IsCashLedgerTransaction	
			when (CashLedgerSourceRecord = "CBT") 

		IsCashLedgerElectronicFundsTransferTransaction	
			when (CashLedgerSourceRecord = "CFT") 

		IsCashLedgerReturnedPayment	
			when (CashLedgerSourceRecord = "CRP") 

		IsCashLedgerReconciliationAdjustment	
			when (CashLedgerReconciliationAdjustment	entered
			or    CashLedgerReconciliationAdjustmentRel	exists)
			
		IsCashLedgerPayablesPayment
			when (CashLedgerSourceRecord = "CHK")

	    CreatingCommitments
	    	restricted
			when (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	        or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
	        
	    SecurityGroupAllowsAccess
			when ((actor.context.CashCodeSecurityGroup = "")
			or   (actor.context.CashCodeSecurityGroup != ""
			and   CashCodeSecurityGroupDetailRel exists))

		CompanySecurityGroupAllowsAccess		
			when (actor.context.CompanySecurityGroup = blank
			or    CompanySecurityGroupMemberRel exists)
	        
		HasProjectCashLedgerPayment
			restricted	
			when (CashLedgerPaymentRel exists)	

		PostDatePredatesPeriod	
			restricted
			when (PostDate < CBCompanySystemClosingControlRel.ValidEntryDate.Begin)
	        

		FrontEndSplitsEnabled
			restricted
			when (CashManagementGroup.FinanceEnterpriseGroup.FrontEndSplits)

		CustodialAccountRequiredForFund			
            when (GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension10 !entered
			and  CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
			and	 (CashCodeFundByAccountingUnitRel.FundUsedForCustodialAccounting
			or	  CashCodeFundByFinanceDimension1Rel.FundUsedForCustodialAccounting))

	Relations    

		CashCodeSecurityGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup         = actor.context.FinanceEnterpriseGroup
				related.CashCodeGroup				= actor.context.CashCodeSecurityGroup.FinanceDimensionStructure
				related.CashCode                    = CashCode

        FinancialInstitutionBranchRel
            classic name is CBBANKENT
            one-to-one relation to FinancialInstitutionBranch
            required
            Field Mapping uses symbolic key
            	related.CashManagementGroup	 		= CashManagementGroup	
            	related.FinancialInstitution		= CashCode.FinancialInstitution
                related.FinancialInstitutionBranch	= CashCode.FinancialInstitutionBranch

		CashLedgerTransactionRel	
			one-to-one relation to CashLedgerTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= CashManagementGroup	
				related.BankTransactionCode		= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerSourceRecord	= CashLedgerSourceRecord
				related.CashLedgerTransaction   = CashLedgerGLDistribution.TransactionIDNumber
				
		JobResultSummaryRel
			one-to-many relation to CashLedgerJobResultSummary
			Field Mapping uses ByFinanceCodeBlock
				related.CashManagementGroup 				= CashManagementGroup
				related.CashLedgerJobResult					= LocalCashLedgerJobResult
				related.FinanceCodeBlock					= GLFinanceCodeBlock
    
		JobResultDetailRel
			one-to-many relation to CashLedgerJobResultDetail
			Field Mapping uses ByOriginatingTransaction
				related.CashManagementGroup 				= CashManagementGroup
				related.CashLedgerJobResult					= LocalCashLedgerJobResult
				related.OriginatingTransaction				= reference to CashLedgerPaymentRel.CashLedgerPayment
				related.FinanceCodeBlock					= GLFinanceCodeBlock
		
		CashLedgerPayablesPaymentRel	
			one-to-one relation to CashLedgerPayablesPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode                						= CashCode
				related.CashLedgerSourceRecord							= CashLedgerSourceRecord
				related.CashLedgerPayablesPayment.BankTransactionCode	= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerPayablesPayment.TransactionIDNumber   = CashLedgerGLDistribution.TransactionIDNumber
				
		CashLedgerPaymentRel	
			one-to-one relation to CashLedgerPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 					= CashManagementGroup	
				related.CashCode                				= CashCode
				related.CashLedgerPayment.BankTransactionCode	= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerPayment.TransactionIDNumber   = CashLedgerGLDistribution.TransactionIDNumber
				
		NewCashLedgerPaymentRel	
			one-to-one relation to CashLedgerPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 					= CashManagementGroup	
				related.CashCode                				= CashCode
				related.CashLedgerPayment.BankTransactionCode	= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerPayment.TransactionIDNumber   = NewTransactionIDNumber				
				
		CashLedgerReconciliationAdjustmentRel
			one-to-one relation to CashLedgerReconciliationAdjustment
			Field Mapping uses symbolic key
				related.CashManagementGroup 			   		= CashManagementGroup	
				related.BankTransactionCode		           		= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerSourceRecord					= CashLedgerSourceRecord
				related.CashLedgerReconciliationAdjustment 		= CashLedgerGLDistribution.TransactionIDNumber
				
		CashLedgerElectronicFundsTransferTransactionRel
			one-to-one relation to CashLedgerElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 											 = CashManagementGroup	
				related.CashCode											 			 = CashCode
				related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber = CashLedgerGLDistribution.TransactionIDNumber

		NewCashLedgerElectronicFundsTransferTransactionRel
			one-to-one relation to CashLedgerElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 											 = CashManagementGroup	
				related.CashCode											 			 = CashCode
				related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber = NewTransactionIDNumber

		CashLedgerReturnedPaymentRel
			one-to-one relation to CashLedgerReturnedPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode										= CashCode
				related.CashLedgerReturnedPayment.BankTransactionCode	= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerReturnedPayment.TransactionIDNumber	= CashLedgerGLDistribution.TransactionIDNumber

		CashLedgerReturnedPaymentForBankExpenseRel
			one-to-one relation to CashLedgerReturnedPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode										= CashCode
				related.CashLedgerReturnedPayment.BankTransactionCode	= CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerReturnedPayment.TransactionIDNumber	= ReturnedPaymentTransactionIDNumber
				
		CashLedgerCashReceiptHeaderRel
			one-to-one relation to CashLedgerCashReceiptHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup 							= CashManagementGroup	
				related.CashCode                           				= CashCode
				related.CashLedgerCashReceiptHeader.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode
				related.CashLedgerCashReceiptHeader.TransactionNumber   = CashLedgerGLDistribution.TransactionNumber

        CashLedgerFundTransferHeaderRel
            one-to-one relation to CashLedgerFundTransferHeader
            Field Mapping uses symbolic key
            	related.CashManagementGroup 						 	= CashManagementGroup	
                related.CashCode        							 	= TransferHeaderCashCode  
                related.CashLedgerFundTransferHeader 					= CashLedgerGLDistribution.TransactionNumber

        CashLedgerFundTransferDetailRel
            one-to-one relation to CashLedgerFundTransferDetail
            Field Mapping uses symbolic key
            	related.CashManagementGroup 		 					= CashManagementGroup
            	related.CashCode        								= TransferHeaderCashCode  
                related.CashLedgerFundTransferHeader 					= CashLedgerGLDistribution.TransactionNumber
                related.CashLedgerFundTransferDetail.DetailCashCode		= CashCode
				
        GeneralLedgerCompanyRel
            classic name is GLSYSTEM
            one-to-one relation to GeneralLedgerCompany
            required
            Field Mapping uses symbolic key
                related.Company = Company
				
		GLTransactionDetailRel
			one-to-one relation to GLTransactionDetail
			valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction		 

				related.OriginatingTransaction	= reference to this instance			

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = LocalCashManagementGroup
				related.GeneralLedgerSystemCode         = LocalSystemCode

       	TaxEntitiesRel				 
            one-to-many relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.TaxEntity 				= TaxAccountingEntity  
								
		GLCommitRel
			one-to-one relation to GLCommit
      		valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance

		GLCommitRel2
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance

		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup              = CashManagementGroup
				related.BudgetEditError.BudgetEditGroup     = UniqueID  

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company.OrigCompany

		CashCodeGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashCodeGroup				= LocalCashCodeGroup
				related.CashCode					= CashCode

		WireTransferBatchDetailDistributionRel
			one-to-many relation to WireTransferBatchDetailDistribution
			Field Mapping uses ByBusinessObjectKey
				related.CashManagementGroup						 = CashManagementGroup
				related.RelatedObjectReference.BusinessObjectKey = UniqueID 
				
		GLCommitxRel
			one-to-one relation to GLCommitx
			Field Mapping uses symbolic key
				related.GLCommitx				= GltObjId
        
		ACCommitxRel
			one-to-one relation to LegacyAccommitx
			Field Mapping uses symbolic key
				related.LegacyAccommitx			= AtnObjId

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

 		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= LocalOriginatingTransaction
		 		related.CashCode				= CashCode
		 		related.AccountingEntity		= LocalAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
		 		related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundByAccountingUnitRel				
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= GLFinanceCodeBlock.AccountingUnit
				related.FinanceDimension1		= blank
 
		CashCodeFundByFinanceDimension1Rel			
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= blank
				related.FinanceDimension1		= GLFinanceCodeBlock.FinanceDimension1

		CBCompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= Company

		CurrentGeneralLedgerCalendarPeriodRel	
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.GeneralLedgerCalendarPeriod			= Company.OrigCompany.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod	

#ifdef module cam
		CustodialDetailAmountRel				
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= CashManagementGroup
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity = LocalAccountingEntity
				and    related.CustodialPosting = LocalFinanceDimension10
				and 	related.EditLevel.Individual)
#endif

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= CashLedgerGLDistribution.SequenceNumber

		CompanySecurityGroupMemberRel		
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                     = Company.OrigCompany


    Sets
        Set4
            indexed
            Sort Order
            	CashManagementGroup
                Company.OrigCompany
                Status
                CashCode
                CashLedgerSourceRecord
                CashLedgerGLDistribution

        Alternate1
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                CashLedgerSourceRecord
                CashLedgerGLDistribution.BankTransactionCode
                CashLedgerGLDistribution.TransactionIDNumber
                CashLedgerGLDistribution.DistributionType
                CashLedgerGLDistribution.SequenceNumber

        ByTransactionNumber
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                CashLedgerGLDistribution.BankTransactionCode
                TransactionNumber
                CashLedgerSourceRecord
                CashLedgerGLDistribution.TransactionIDNumber
                CashLedgerGLDistribution.DistributionType
                CashLedgerGLDistribution.SequenceNumber

		ByPostDate
            Sort Order
                CashManagementGroup
                PostDate
                Status
                CashCode
                Company.OrigCompany
                CashLedgerSourceRecord
                CashLedgerGLDistribution


	Rule Blocks

		LoadCashLedgerSourceRecordDefaults	
			if (CashLedgerSourceRecord not entered)
				if (CashLedgerReconciliationAdjustment 	  entered
				or  CashLedgerReconciliationAdjustmentRel exists)
					CashLedgerSourceRecord = CashLedgerReconciliationAdjustmentRel.CashLedgerSourceRecord
				else
				if (CashLedgerPayment 	 entered
				or  CashLedgerPaymentRel exists)
					CashLedgerSourceRecord = "CBM"
				else
				if (CashLedgerElectronicFundsTransferTransaction 	entered
				or  CashLedgerElectronicFundsTransferTransactionRel	exists)
					CashLedgerSourceRecord = "CFT"
				else
				if (CashLedgerReturnedPayment	 entered
				or  CashLedgerReturnedPaymentRel exists)
					CashLedgerSourceRecord = "CRP"
				else
				if (CashLedgerTransaction 	 entered
				or  CashLedgerTransactionRel exists)
					CashLedgerSourceRecord = CashLedgerTransactionRel.CashLedgerSourceRecord

		LoadCBDefaults
			if (IsCashLedgerReconciliationAdjustment)
				LocalHeaderBusinessObjectRef	= reference to CashLedgerReconciliationAdjustmentRel.CashLedgerReconciliationAdjustment
				LocalHeaderUniqueID				= CashLedgerReconciliationAdjustmentRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerReconciliationAdjustmentRel.TransactionNumber 
				LocalDocumentNumber		   		= CashLedgerReconciliationAdjustmentRel.TransactionNumber
				LocalPostingDate				= CashLedgerReconciliationAdjustmentRel.PostDate
				LocalCurrencyTable				= CashLedgerReconciliationAdjustmentRel.CurrencyTable
				LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
				LocalReference					= CashLedgerTransactionRel.Reference
				LocalDescription				= CashLedgerTransactionRel.Description
				LocalGeneralLedgerEvent			= "CL"
				LocalKeepRateOnly 				= false					
				Company							= CashLedgerReconciliationAdjustmentRel.Company
				if (LocalRecalcCurrencyAmountForAllDistribs)
					GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.FunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.AlternateAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.AlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.AlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ToFunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ToAlternateAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ToAlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ToAlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ProjectAmount.EnteredCurrencyRate
					GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ReportAmount1.EnteredCurrencyRate
					GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ReportAmount2.EnteredCurrencyRate
					GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ReportAmount3.EnteredCurrencyRate
					GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ReportAmount4.EnteredCurrencyRate
					GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerReconciliationAdjustmentRel.IssuedBaseAmount.ReportAmount5.EnteredCurrencyRate
					LocalKeepRateOnly 									= true
				else
					if (action type.Update
					and GLTransactionAmount changed)
						initialize GLBaseAmount
			else			
			if (CashLedgerCashReceiptHeader entered)
				LocalHeaderBusinessObjectRef	= reference to CashLedgerCashReceiptHeaderRel.CashLedgerCashReceiptHeader
				LocalHeaderUniqueID				= CashLedgerCashReceiptHeaderRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerCashReceiptHeaderRel.CashLedgerCashReceiptHeader.TransactionNumber 
				LocalDocumentNumber		   		= CashLedgerCashReceiptHeaderRel.CashLedgerCashReceiptHeader.TransactionNumber
				LocalExchangeDate				= CashLedgerCashReceiptHeaderRel.DepositDate
				LocalPostingDate				= CashLedgerCashReceiptHeaderRel.PostDate
				LocalCurrencyTable				= CashLedgerCashReceiptHeaderRel.CurrencyTable
				LocalReference					= CashLedgerTransactionRel.Reference
				LocalDescription				= CashLedgerTransactionRel.Description
				LocalKeepRateOnly 				= false					
				LocalGeneralLedgerEvent			= "CL"
				if (GeneralLedgerSourceCode 	= "CB")
					LocalGeneralLedgerEvent		= "CL"	
				else				
					LocalGeneralLedgerEvent 	= GeneralLedgerSourceCode
				Company							= CashLedgerCashReceiptHeaderRel.Company
			else	
			if (IsCashLedgerElectronicFundsTransferTransaction)

				LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
				LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerElectronicFundsTransferTransactionRel.Reference 
				LocalDocumentNumber		   		= CashLedgerElectronicFundsTransferTransactionRel.Reference
				LocalExchangeDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
				LocalPostingDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
				LocalDescription				= CashLedgerElectronicFundsTransferTransactionRel.Description
				LocalCurrencyTable				= CashLedgerElectronicFundsTransferTransactionRel.CurrencyTable
				LocalReference					= "EftCcExtractEntry"
				LocalKeepRateOnly 				= false					
				if (CashLedgerElectronicFundsTransferTransactionRel.GeneralLedgerSourceCode = "CB")
					LocalGeneralLedgerEvent		= "CL"	
				else				
					LocalGeneralLedgerEvent 	= CashLedgerElectronicFundsTransferTransactionRel.GeneralLedgerSourceCode
				if (Company !entered)
					Company						= CashLedgerElectronicFundsTransferTransactionRel.Company
				if (LocalRecalcCurrencyAmountForAllDistribs)
					GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.AlternateAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ToFunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ToAlternateAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ToAlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ToAlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ProjectAmount.EnteredCurrencyRate
					GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ReportAmount1.EnteredCurrencyRate
					GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ReportAmount2.EnteredCurrencyRate
					GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ReportAmount3.EnteredCurrencyRate
					GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ReportAmount4.EnteredCurrencyRate
					GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerElectronicFundsTransferTransactionRel.ReceiptBaseAmount.ReportAmount5.EnteredCurrencyRate
					LocalKeepRateOnly 									= true
				else
					if (action type.Update
					and GLTransactionAmount changed)	
						initialize GLBaseAmount	
			else							
			if (IsCashLedgerReturnedPayment)

				LocalReference						= "CashLedgerReturnedPayment"
				LocalKeepRateOnly 					= false
				if (ReturnedPaymentTransactionIDNumber entered)
					LocalHeaderBusinessObjectRef	= reference to CashLedgerReturnedPaymentForBankExpenseRel.CashLedgerReturnedPayment
					LocalHeaderUniqueID				= CashLedgerReturnedPaymentForBankExpenseRel.UniqueID	
					LocalControlDocumentNumber 		= CashLedgerReturnedPaymentForBankExpenseRel.TransactionNumber 
					LocalDocumentNumber		   		= CashLedgerReturnedPaymentForBankExpenseRel.TransactionNumber
					LocalExchangeDate				= CashLedgerReturnedPaymentForBankExpenseRel.ReturnDate
					LocalPostingDate				= CashLedgerReturnedPaymentForBankExpenseRel.PostDate
					LocalDescription				= CashLedgerReturnedPaymentForBankExpenseRel.Description
					LocalCurrencyTable				= CashLedgerReturnedPaymentForBankExpenseRel.CurrencyTable
					if (CashLedgerReturnedPaymentForBankExpenseRel.GeneralLedgerSourceCode = "CB")
						LocalGeneralLedgerEvent		= "CL"	
					else				
						LocalGeneralLedgerEvent 	= CashLedgerReturnedPaymentForBankExpenseRel.GeneralLedgerSourceCode	
					Company							= CashLedgerReturnedPaymentForBankExpenseRel.Company
				else
					LocalHeaderBusinessObjectRef	= reference to CashLedgerReturnedPaymentRel.CashLedgerReturnedPayment
					LocalHeaderUniqueID				= CashLedgerReturnedPaymentRel.UniqueID	
					LocalControlDocumentNumber 		= CashLedgerReturnedPaymentRel.TransactionNumber 
					LocalDocumentNumber		   		= CashLedgerReturnedPaymentRel.TransactionNumber
					LocalExchangeDate				= CashLedgerReturnedPaymentRel.ReturnDate
					LocalPostingDate				= CashLedgerReturnedPaymentRel.PostDate
					LocalDescription				= CashLedgerReturnedPaymentRel.Description
					LocalCurrencyTable				= CashLedgerReturnedPaymentRel.CurrencyTable
					if (CashLedgerReturnedPaymentRel.GeneralLedgerSourceCode = "CB")
						LocalGeneralLedgerEvent		= "CL"	
					else				
						LocalGeneralLedgerEvent 	= CashLedgerReturnedPaymentRel.GeneralLedgerSourceCode	
					Company							= CashLedgerReturnedPaymentRel.Company
					if (LocalRecalcCurrencyAmountForAllDistribs)
						GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.FunctionalAmount.EnteredCurrencyRate
						GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.AlternateAmount.EnteredCurrencyRate
						GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.AlternateAmount2.EnteredCurrencyRate
						GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.AlternateAmount3.EnteredCurrencyRate
						GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerReturnedPaymentRel.CompanyReturnAmount.ToFunctionalAmount.EnteredCurrencyRate
						GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ToAlternateAmount.EnteredCurrencyRate
						GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerReturnedPaymentRel.CompanyReturnAmount.ToAlternateAmount2.EnteredCurrencyRate
						GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ToAlternateAmount3.EnteredCurrencyRate
						GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ProjectAmount.EnteredCurrencyRate
						GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ReportAmount1.EnteredCurrencyRate
						GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ReportAmount2.EnteredCurrencyRate
						GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ReportAmount3.EnteredCurrencyRate
						GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ReportAmount4.EnteredCurrencyRate
						GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerReturnedPaymentRel.CompanyReturnAmount.ReportAmount5.EnteredCurrencyRate
						LocalKeepRateOnly 									= true
					else
						if (action type.Update
						and GLTransactionAmount changed)
							initialize GLBaseAmount					
			else
			if (IsCashLedgerPayment)

				LocalKeepRateOnly 					= false					
				if (Company !entered)
					Company							= CashLedgerPaymentRel.CompanyBaseData.OverrideCompany
				if (CreateFromBatchType.PaymentClose)
					LocalControlDocumentNumber 		= CashLedgerPaymentRel.TransactionNumber
					LocalDocumentNumber		   		= CashLedgerPaymentRel.TransactionNumber
					LocalCurrencyTable				= CashLedgerPaymentRel.CurrencyTable	
					LocalExchangeDate				= PostDate
					LocalPostingDate				= PostDate
					LocalReference					= TransactionNumber
					LocalDescription				= Description
					LocalGeneralLedgerEvent			= GeneralLedgerSourceCode  
				else
					LocalHeaderBusinessObjectRef	= reference to CashLedgerPaymentRel.CashLedgerPayment
					LocalHeaderUniqueID				= CashLedgerPaymentRel.UniqueID
					LocalControlDocumentNumber 		= CashLedgerPaymentRel.Reference
					LocalDocumentNumber		   		= CashLedgerPaymentRel.Reference
					LocalExchangeDate				= CashLedgerPaymentRel.PostDate
					LocalPostingDate				= CashLedgerPaymentRel.PostDate
					LocalDescription				= CashLedgerPaymentRel.Description
					LocalCurrencyTable				= CashLedgerPaymentRel.CurrencyTable
					LocalReference					= "CashLedgerPayment"
					if (CashLedgerPaymentRel.GeneralLedgerSourceCode = "CB")
						LocalGeneralLedgerEvent		= "CL"	
					else				
						LocalGeneralLedgerEvent 	= CashLedgerPaymentRel.GeneralLedgerSourceCode						
					if (LocalRecalcCurrencyAmountForAllDistribs)
						if (CashLedgerPaymentRel.UsingBankCurrencyPosting)
							GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.FunctionalAmount.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.AlternateAmount.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.AlternateAmount2.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.AlternateAmount3.EnteredCurrencyRate
							GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ToAlternateAmount.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate
							GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ProjectAmount.EnteredCurrencyRate
							GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ReportAmount1.EnteredCurrencyRate
							GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ReportAmount2.EnteredCurrencyRate
							GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ReportAmount3.EnteredCurrencyRate
							GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ReportAmount4.EnteredCurrencyRate
							GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.ReportAmount5.EnteredCurrencyRate
							LocalKeepRateOnly 									= true
						else
							GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.AlternateAmount.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.AlternateAmount2.EnteredCurrencyRate
							GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.AlternateAmount3.EnteredCurrencyRate
							GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ToAlternateAmount.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate
							GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate
							GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ProjectAmount.EnteredCurrencyRate
							GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ReportAmount1.EnteredCurrencyRate
							GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ReportAmount2.EnteredCurrencyRate
							GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ReportAmount3.EnteredCurrencyRate
							GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ReportAmount4.EnteredCurrencyRate
							GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.ReportAmount5.EnteredCurrencyRate
							LocalKeepRateOnly 									= true
					else
						if (action type.Update
						and GLTransactionAmount changed)
							initialize GLBaseAmount
			else
			if (CashLedgerFundTransferDetail entered)
				LocalHeaderBusinessObjectRef	= reference to CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
				LocalHeaderUniqueID				= CashLedgerFundTransferHeaderRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader 
				LocalDocumentNumber		   		= CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
				LocalExchangeDate				= CashLedgerFundTransferHeaderRel.TransferDate
				LocalPostingDate				= CashLedgerFundTransferHeaderRel.PostDate
				LocalCurrencyTable				= CashLedgerFundTransferHeaderRel.CurrencyTable
				LocalReference					= CashLedgerTransactionRel.Reference
				LocalDescription				= CashLedgerTransactionRel.Description
				LocalGeneralLedgerEvent			= "CL"
				LocalKeepRateOnly 				= false	
				Company							= CashLedgerFundTransferHeaderRel.Company
			else
			if (CashLedgerFundTransferHeader entered)
				LocalHeaderBusinessObjectRef	= reference to CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
				LocalHeaderUniqueID				= CashLedgerFundTransferHeaderRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader 
				LocalDocumentNumber		   		= CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
				LocalExchangeDate				= CashLedgerFundTransferHeaderRel.TransferDate
				LocalPostingDate				= CashLedgerFundTransferHeaderRel.PostDate
				LocalCurrencyTable				= CashLedgerFundTransferHeaderRel.CurrencyTable
				LocalReference					= CashLedgerTransactionRel.Reference
				LocalDescription				= CashLedgerTransactionRel.Description
				LocalGeneralLedgerEvent			= "CL"
				LocalKeepRateOnly 				= false					
				Company							= CashLedgerFundTransferHeaderRel.Company	
			else
			if (IsCashLedgerTransaction
			or  CashLedgerTransactionRel exists)	
				LocalHeaderBusinessObjectRef	= reference to CashLedgerTransactionRel.CashLedgerTransaction
				LocalHeaderUniqueID				= CashLedgerTransactionRel.UniqueID	
				LocalControlDocumentNumber 		= CashLedgerTransactionRel.TransactionNumber 
				LocalDocumentNumber		   		= CashLedgerTransactionRel.TransactionNumber
				LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
				if (ReconcileGeneralLedgerEntry)	
					LocalPostingDate			= PostDate	
				else		
					LocalPostingDate			= CashLedgerTransactionRel.GeneralLedgerPostDate
				LocalReference					= CashLedgerTransactionRel.Reference
				LocalDescription				= CashLedgerTransactionRel.Description
				LocalCurrencyTable				= CashLedgerTransactionRel.CurrencyTable
				if (CashLedgerTransactionRel.GeneralLedgerEvent !entered		
				or  CashLedgerTransactionRel.GeneralLedgerEvent = "CB")
					LocalGeneralLedgerEvent		= "CL"
				else
					LocalGeneralLedgerEvent 	= CashLedgerTransactionRel.GeneralLedgerEvent
				LocalKeepRateOnly 				= false
				Company							= CashLedgerTransactionRel.Company



				if (LocalRecalcCurrencyAmountForAllDistribs)
					GLBaseAmount.FunctionalAmount.EnteredCurrencyRate 	= CashLedgerTransactionRel.IssuedBaseAmount.FunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount.EnteredCurrencyRate 	= CashLedgerTransactionRel.IssuedBaseAmount.AlternateAmount.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 	= CashLedgerTransactionRel.IssuedBaseAmount.AlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 	= CashLedgerTransactionRel.IssuedBaseAmount.AlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate = CashLedgerTransactionRel.IssuedBaseAmount.ToFunctionalAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 	= CashLedgerTransactionRel.IssuedBaseAmount.ToAlternateAmount.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate = CashLedgerTransactionRel.IssuedBaseAmount.ToAlternateAmount2.EnteredCurrencyRate
					GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate	= CashLedgerTransactionRel.IssuedBaseAmount.ToAlternateAmount3.EnteredCurrencyRate
					GLBaseAmount.ProjectAmount.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ProjectAmount.EnteredCurrencyRate
					GLBaseAmount.ReportAmount1.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ReportAmount1.EnteredCurrencyRate
					GLBaseAmount.ReportAmount2.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ReportAmount2.EnteredCurrencyRate
					GLBaseAmount.ReportAmount3.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ReportAmount3.EnteredCurrencyRate
					GLBaseAmount.ReportAmount4.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ReportAmount4.EnteredCurrencyRate
					GLBaseAmount.ReportAmount5.EnteredCurrencyRate 		= CashLedgerTransactionRel.IssuedBaseAmount.ReportAmount5.EnteredCurrencyRate
					LocalKeepRateOnly 									= true
				else
					if (action type.Update
					and GLTransactionAmount changed)
						initialize GLBaseAmount
			if (invoking action = "CashLedgerTransaction.WriteOffTransaction")
				LocalPostingDate	= PostDate
				LocalExchangeDate	= CashLedgerTransactionRel.IssueDate

		CreateGLTransactionDetail


			if (TaxCode entered)	
				BypassUnitAndAmountEdit			= true
			invoke CreateUnreleasedGLTransDetailNoRules GLTransactionDetail		 
				fill in fields from this instance
				fill in user fields from this instance	
				invoked.OriginatingTransaction 	= reference to this instance
				invoked.FinanceEnterpriseGroup	= CashManagementGroup  
				invoked.CurrencyCode			= TransientFromCurrency	
				invoked.System					= "CB"
				invoked.TransactionAmount		= GLTransactionAmount
				invoked.FinanceCodeBlock		= GLFinanceCodeBlock
				invoked.ReportCurrencyAmount 	= GLBaseAmount
				invoked.Reference				= Reference
				invoked.Description			  	= Description		
            	invoked.GeneralLedgerEvent 	    = LocalGeneralLedgerEvent
				invoked.AccountingEntity		= CompanyAccountingEntity  

				invoked.TransactionDate			= LocalExchangeDate
				invoked.PostingDate				= LocalPostingDate
				invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
				invoked.DocumentNumber		  	= LocalDocumentNumber
				invoked.AutoReverse 			= false
				invoked.ReportCurrencyAmount.KeepRateOnly = LocalKeepRateOnly
				invoked.JournalizeGroup			= GLTJournalizeGroup

				invoked.UnitsAmount				= TransientUnitsAmount	
			if (CashLedgerCashReceiptHeader entered
			or  CashLedgerFundTransferHeader entered
			or  CashLedgerFundTransferDetail entered
			or 	(CashLedgerReturnedPayment entered
			and  ReturnedPaymentTransactionIDNumber entered))	
				if (Status.Released)	
					include	ReleaseGLTransactionDetail
					include ReleaseGLCommit
			if (CreateFromBatchType.PaymentLoad
			or  CreateFromBatchType.EftLoad

			or  CreateFromBatchType.ReceiptLoad
			or  CreateFromBatchType.ReturnedPaymentLoad
			or  CreateFromBatchType.StaleDate
			or  CreateFromBatchType.StaleDateReopen
			or  CreateFromBatchType.PaymentClose
			or  LocalReleaseGlTransactionDetail)	

				if (Status.Released)
					include	ReleaseGLTransactionDetail
					
		CreateGLTransactionDetailOffset


			invoke CreateUnreleasedGLTransDetailNoRules GLTransactionDetail		 
				fill in fields from this instance
				invoked.OriginatingTransaction 	= reference to this instance		 
				invoked.FinanceEnterpriseGroup	= CashManagementGroup   
				invoked.CurrencyCode			= TransientFromCurrency	
				invoked.System					= "CB"
				invoked.TransactionAmount		= GLTransactionAmount 
				invoked.FinanceCodeBlock		= GLFinanceCodeBlock  
				invoked.ReportCurrencyAmount 	= GLBaseAmount 		
				invoked.Reference				= LocalReference
				invoked.Description				= LocalDescription
				invoked.GeneralLedgerEvent 		= LocalGeneralLedgerEvent			 
				invoked.AccountingEntity		= CompanyAccountingEntity  

				invoked.TransactionDate			= LocalExchangeDate
				invoked.PostingDate				= LocalPostingDate
				invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
				invoked.DocumentNumber		  	= LocalDocumentNumber					
				invoked.AutoReverse 			= false	
				invoked.ReportCurrencyAmount.KeepRateOnly = LocalKeepRateOnly
				invoked.JournalizeGroup			= GLTJournalizeGroup
				invoked.UnitsAmount				= TransientUnitsAmount	
			invoke Release GLTransactionDetailRel	 

		UpdateGLTransactionDetail

			if (TaxCode entered)	
				BypassUnitAndAmountEdit 		= true
			invoke Update GLTransactionDetailRel
				fill in user fields from this instance
				invoked.Reference				= Reference		 
				invoked.Description			  	= Description	
				invoked.TransactionAmount		= GLTransactionAmount
				invoked.FinanceCodeBlock		= GLFinanceCodeBlock
				invoked.ReportCurrencyAmount 	= GLBaseAmount

				invoked.TransactionDate			= LocalExchangeDate
				invoked.PostingDate				= LocalPostingDate
				invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
				invoked.DocumentNumber		  	= LocalDocumentNumber	
				invoked.ReportCurrencyAmount.KeepRateOnly = LocalKeepRateOnly
				invoked.UnitsAmount				= TransientUnitsAmount	
				
		SaveDocumentCurrencyTotals
			if (IsCashLedgerTransaction 
			or  CashLedgerTransactionRel.ImportStatus entered)
				LocalDocumentCurrencyTotals 					= CashLedgerTransactionRel.AppliedDistributionBaseAmount
				LocalDocumentCurrencyTotals.OldCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount
				if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
                    include ReverseLocaLDocumentOldCurrencyTotals   
			else
			if (IsCashLedgerReconciliationAdjustment)
				LocalDocumentCurrencyTotals 					= CashLedgerReconciliationAdjustmentRel.AppliedDistributionBaseAmount
				LocalDocumentCurrencyTotals.OldCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount
				if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
                    include ReverseLocaLDocumentOldCurrencyTotals
                     
		ReverseLocaLDocumentOldCurrencyTotals
			LocalDocumentCurrencyTotals.OldCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 	*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
			LocalDocumentCurrencyTotals.OldCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1
			
		ReverseLocaLDocumentNewCurrencyTotals
			LocalDocumentCurrencyTotals.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 	*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
			LocalDocumentCurrencyTotals.NewCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1  
			LocalDocumentCurrencyTotals.NewCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1  
								
		ReverseReportCurrencyAmounts
			GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.AlternateAmount.EnteredCurrencyAmount		*= -1
			GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
			GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	*= -1
			GLBaseAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= -1
			GLBaseAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
			GLBaseAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
			GLBaseAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
			GLBaseAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
			GLBaseAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1

		ReleaseGLTransactionDetail				 
			if (GLTransactionDetailRel exist)
				if (TaxCode entered)	
					BypassUnitAndAmountEdit	= true
				invoke Release GLTransactionDetailRel

		UnReleaseGLTransactionDetail				 
			if (GLTransactionDetailRel exist)
				if (TaxCode entered)	
					BypassUnitAndAmountEdit	= true
				invoke Update GLTransactionDetailRel
					invoked.Status 	= Status.Unreleased

		ReleaseGLCommit	

			LocalCashManagementGroup	= CashManagementGroup
			LocalSystemCode				= "CB"
			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke UpdateToReleased GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= CompanyAccountingEntity
					
		ValidateForBudgetProcessing
			if (CashLedgerTransactionOffsetDistrib
			or  EftOffsetFlag
        	or  RecordType.CashCodeDistribution             	
            or  RecordType.OffsetCashLedgerPaymentDistribution 
            or  RecordType.StaleDatingDistribution         	
            or  RecordType.APCashLedgerPaymentDistribution 
            or	RecordType.VoidedCashLedgerPaymentDistribution
			or  CreateFromBatchType.StaleDate
			or  CreateFromBatchType.StaleDateReopen
			or  CreateFromBatchType.PaymentClose
			or  CreateFromBatchType.InvoiceReinstatement
			or  CreateFromBatchType.EftExtractUpdate)
             	BypassBudgetAndCommitmentProcessing = true

		CreateAndUpdateActionRules
			if (IsCashLedgerReconciliationAdjustment)
				constraint (TaxCode not entered
				and			TaxAccountingEntity not entered
				and			TaxableBankAmount not entered)
					"TaxDistributionsNotValidForAdjustments"
				constraint (CashLedgerReconciliationAdjustmentRel.Status.UnreleasedUnreconciled)
					"CannotAddOrUpdateDistributionForReleasedCashLedgerReconciliationAdjustment"									
				DistributionToBankAmount 	= GLTransactionAmount
			else
			if (IsCashLedgerPayment)
				if (!RecordType.OffsetCashLedgerPaymentDistribution
				and !CashLedgerGLDistribution.DistributionType.Reconciliation
				and !IsChangeValidForAmendedDistribution
				and !BypassStatusEdit)	
					constraint (CashLedgerPaymentRel.CanUpdateDistributions)
						"CannotAddOrUpdateDistributionForReleasedPayment"	      
				DistributionToBankAmount	= GLTransactionAmount					
			else
			if (IsCashLedgerElectronicFundsTransferTransaction)
				if (!EftOffsetFlag)
					constraint (CashLedgerElectronicFundsTransferTransactionRel.CanUpdateDistributions)
						"CannotAddOrUpdateDistributionForReleasedRecord"
				DistributionToBankAmount = GLTransactionAmount
			else
			if (IsCashLedgerReturnedPayment)
				if (invoking action != "CashLedgerTransaction.WriteOffTransaction")
					constraint (CashLedgerReturnedPaymentRel.Status.Unreleased
							or  CashLedgerReturnedPaymentRel.Status.PendingApproval)
						"CannotAddOrUpdateDistributionForReleasedCashLedgerReturnedPayment"
				DistributionToBankAmount	= GLTransactionAmount
			if (IsCashLedgerTransaction 
			or  IsCashLedgerReconciliationAdjustment 
			or  IsCashLedgerReturnedPayment
			or  IsCashLedgerPayment 				
			or  IsCashLedgerElectronicFundsTransferTransaction)
				if (TaxCode entered)				
					if (GLFinanceCodeBlock.ToAccountingEntity entered
					and TaxAccountingEntity not entered)	
						TaxAccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity
			
		CreateFromBatchRules
        	if (CashLedgerPaymentRel.UsingBankCurrencyPosting					
			and CashLedgerGLDistribution.DistributionType.Entry)				
        		TransientFromCurrency		= CashLedgerPaymentRel.BankCurrency	
			else
				TransientFromCurrency		= CashCode.Currency
			if (CreateFromBatchType.PaymentLoad)								
				DistributionToBankAmount	= GLTransactionAmount				
			if (CreateFromBatchType.TransactionLoad)
				if (CashLedgerGLDistribution.BankTransactionCode.TransactionType.CreditTransaction)
					GLTransactionAmount 							   	*=-1
					DistributionToBankAmount							 = GLTransactionAmount
					GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	*= -1

				else
					DistributionToBankAmount			= GLTransactionAmount
				if (CreateFromBatchType.TransactionLoad)
					include SaveDocumentCurrencyTotals






			if (CreateFromBatchType.PaymentLoad
			or  CreateFromBatchType.EftLoad
			or  CreateFromBatchType.EftExtractUpdate
			or  CreateFromBatchType.TransactionLoad
			or  CreateFromBatchType.ReturnedPaymentLoad
			or  CreateFromBatchType.StaleDate
			or  CreateFromBatchType.StaleDateReopen)
				if (TaxCode entered)						
					if (GLFinanceCodeBlock.ToAccountingEntity entered
					and TaxAccountingEntity not entered)
						TaxAccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity
					
			if (CreateFromBatchType.StaleDate
			or  CreateFromBatchType.StaleDateReopen)
				LocalCurrencyTable = CashLedgerTransactionRel.CurrencyTable
				if (CashLedgerTransactionRel exists)	
	              	increment CashLedgerTransactionRel.LastDistributionSequence
	              	if (CashLedgerTransactionRel.Type.CashLedgerPayment)	
						increment CashLedgerPaymentRel.LastDistributionSequence	
					CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
				else
					if (CashLedgerPaymentRel exists)	
						increment CashLedgerPaymentRel.LastDistributionSequence
						CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence
							
            if (CreateFromBatchType.PaymentClose)
            	LocalCurrencyTable = CashLedgerPaymentRel.CurrencyTable	
                increment CashLedgerPaymentRel.LastDistributionSequence
                CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence

			if (CreateFromBatchType.EftExtractUpdate	
			and CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
                increment CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
                CashLedgerGLDistribution.SequenceNumber = CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence


        CalculateTax

            if (TaxCode entered 
            and Status.Unreleased
            and (IsCashLedgerPayment 
            or   IsCashLedgerTransaction 
            or   IsCashLedgerElectronicFundsTransferTransaction  
            or   IsCashLedgerReturnedPayment
            or   IsCashLedgerReconciliationAdjustment 
            or   CreateFromBatchType.ReturnedPaymentLoad
            or   CreateFromBatchType.PaymentLoad))
                initialize CalculateTax

				constraint (TaxableBankAmount entered)
					"TaxableAmountRequiredWithTaxCode"  
				constraint (TaxAccountingEntity entered)
					"TaxEntityRequiredWithTaxCode"
                if (GLTransactionAmount entered)
                    CalculateTax.Function       = "V"
                else
                    CalculateTax.Function       = "C"
				CalculateTax.TaxCodeAccount     = GLFinanceCodeBlock 
            	CalculateTax.TaxAmount          = GLTransactionAmount	                    

                CalculateTax.TaxCode            = TaxCode
               	CalculateTax.TaxableAmount      = TaxableBankAmount 
	            if (IsCashLedgerReconciliationAdjustment) 
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity		= TaxAccountingEntity
					else						
						CalculateTax.TaxEntity		= CashLedgerReconciliationAdjustmentRel.Company.OrigCompany.AccountingEntity	            
                	CalculateTax.InvoiceDate        = CashLedgerReconciliationAdjustmentRel.ReconciliationData.ExchangeDate
	                CalculateTax.PaymentDate        = CashLedgerReconciliationAdjustmentRel.ReconciliationData.ExchangeDate
	                CalculateTax.PostalAddress  	= CashLedgerReconciliationAdjustmentRel.Company.OrigCompany.AccountingEntity.AddressCode.PostalAddress
                else
                if (IsCashLedgerPayment 
                or  CreateFromBatchType.PaymentLoad)
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity		= TaxAccountingEntity
					else						
						CalculateTax.TaxEntity		= CashLedgerPaymentRel.CompanyBaseData.OverrideCompany.AccountingEntity                
	                CalculateTax.InvoiceDate        = CashLedgerPaymentRel.PostDate
	                CalculateTax.PaymentDate        = CashLedgerPaymentRel.PostDate
	                CalculateTax.TaxDate            = CashLedgerPaymentRel.PostDate
	                CalculateTax.GeneralLedgerDate  = CashLedgerPaymentRel.PostDate
	                CalculateTax.PostalAddress  	= CashLedgerPaymentRel.CompanyBaseData.OverrideCompany.AccountingEntity.AddressCode.PostalAddress
                else
                if (IsCashLedgerElectronicFundsTransferTransaction) 
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity		= TaxAccountingEntity
					else						
						CalculateTax.TaxEntity		= CashLedgerElectronicFundsTransferTransactionRel.Company.OrigCompany.AccountingEntity                
                	CalculateTax.InvoiceDate        = CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
	                CalculateTax.PaymentDate        = CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
	                CalculateTax.TaxDate            = CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
	                CalculateTax.GeneralLedgerDate  = CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
	                CalculateTax.PostalAddress  	= CashLedgerElectronicFundsTransferTransactionRel.Company.OrigCompany.AccountingEntity.AddressCode.PostalAddress
	            else
                if (IsCashLedgerReturnedPayment 
                or  CreateFromBatchType.ReturnedPaymentLoad)
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity		= TaxAccountingEntity
					else						
						CalculateTax.TaxEntity		= CashLedgerReturnedPaymentRel.Company.OrigCompany.AccountingEntity                
                	CalculateTax.InvoiceDate		= CashLedgerReturnedPaymentRel.ReturnDate
                	CalculateTax.PaymentDate        = CashLedgerReturnedPaymentRel.ReturnDate
                	CalculateTax.GeneralLedgerDate  = CashLedgerReturnedPaymentRel.ReturnDate
                	CalculateTax.TaxDate	        = CashLedgerReturnedPaymentRel.ReturnDate
                	CalculateTax.PostalAddress  	= CashLedgerReturnedPaymentRel.Company.OrigCompany.AccountingEntity.AddressCode.PostalAddress
				else
				if (IsCashLedgerTransaction) 
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity		= TaxAccountingEntity
					else						
						CalculateTax.TaxEntity		= CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity
					CalculateTax.InvoiceDate        = CashLedgerTransactionRel.IssueDate
                	CalculateTax.PaymentDate        = CashLedgerTransactionRel.IssueDate
                	CalculateTax.PostalAddress  	= CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity.AddressCode.PostalAddress              	
                CalculateTax.NbrOfDecimals          = CashCode.BankAccountNumber.Currency.NumberOfDecimals
                CalculateTax.TransactionCurrency    = TransientFromCurrency	
                CalculateTax.BaseCurrency           = GLFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency  
                CalculateTax.System                 = "CB"
                TaxOut            					= CalculateTax.ExecuteCalculateTax
                TaxTableOutput    					= CalculateTax.TaxTable.TaxTableOutput[1]
                constraint (CalculateTax.OutputErrorNumber not entered)
                    "<CalculateTax.OutputErrorMessage>"
                constraint (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode not entered)
                    "TaxCodeCannotBeATaxTable"                 
 				if (IsCashLedgerPayment 
 				or  CreateFromBatchType.PaymentLoad
 				or  IsCashLedgerReturnedPayment
 				or  CreateFromBatchType.ReturnedPaymentLoad)
 					constraint (TaxEntityRel.ThirdParty.InforTax)
 						"TaxSystemForTaxEntityIsNotSetToInforTax,TaxCannotBeApplied"
					constraint (TaxTableOutput.TaxPoint = "P")
                    	"TaxPointMustBe_\P"	
				else
 				if (IsCashLedgerTransaction 
 				or  CreateFromBatchType.TransactionLoad
 				or  IsCashLedgerElectronicFundsTransferTransaction 
 				or  (IsCashLedgerReconciliationAdjustment
 				and  !IsCashLedgerPayment)) 
					constraint (TaxTableOutput.TaxPoint = "I") 
                    	"TaxPointMustBe_\I"  
                constraint (TaxTableOutput.AccrualFlag = "I")
                    "TaxCodeMustBe_\InvoicedTypeTax"           
                constraint (not TaxTableOutput.AccountError)
                    "TaxCodeDoesNotAllowAccountChanges"        
                constraint (CalculateTax.VerifiedOK)
                    "RateDoesNotFallWithinTaxCodeRateRange"   
				if (IsCashLedgerElectronicFundsTransferTransaction)
					if (GLTransactionAmount not entered)
                        GLTransactionAmount			= TaxTableOutput.TaxAmount
                        DistributionToBankAmount	= TaxTableOutput.TaxAmount
                    if (GLFinanceCodeBlock not entered) 
                        GLFinanceCodeBlock			= TaxTableOutput.TaxOutputAccount
                else
                if (IsCashLedgerReconciliationAdjustment) 
                    if (GLTransactionAmount not entered)
                       	GLTransactionAmount 	 	= TaxTableOutput.TaxAmount
                       	DistributionToBankAmount	= TaxTableOutput.TaxAmount
                    if (GLFinanceCodeBlock  not entered)
                    	if (CashLedgerGLDistribution.BankTransactionCode.TransactionType.DebitTransaction)
                        	GLFinanceCodeBlock 		= TaxTableOutput.TaxInputAccount
                        else
                            GLFinanceCodeBlock 		= TaxTableOutput.TaxOutputAccount        
                if (IsCashLedgerPayment 
                or  CreateFromBatchType.PaymentLoad)                        
					if (GLTransactionAmount not entered)
                        GLTransactionAmount 		= TaxTableOutput.TaxAmount
                        DistributionToBankAmount	= TaxTableOutput.TaxAmount
					if (GLFinanceCodeBlock  not entered) 
						GLFinanceCodeBlock 			= TaxTableOutput.TaxInputDueAccount
                else
                if (IsCashLedgerReturnedPayment 
                or  CreateFromBatchType.ReturnedPaymentLoad) 
                    if (GLTransactionAmount not entered)
                       	GLTransactionAmount 	 	= TaxTableOutput.TaxAmount
                       	DistributionToBankAmount	= TaxTableOutput.TaxAmount
                    if (GLFinanceCodeBlock  not entered)
                        GLFinanceCodeBlock 			= TaxTableOutput.TaxOutputAccount                       	
                else
                if (IsCashLedgerTransaction) 
                    if (GLTransactionAmount not entered)
                       	GLTransactionAmount 	 	= TaxTableOutput.TaxAmount
                       	DistributionToBankAmount	= TaxTableOutput.TaxAmount
                    if (GLFinanceCodeBlock  not entered)
                    	if (CashLedgerGLDistribution.BankTransactionCode.TransactionType.DebitTransaction)
                        	GLFinanceCodeBlock 		= TaxTableOutput.TaxInputAccount
                        else
                            GLFinanceCodeBlock 		= TaxTableOutput.TaxOutputAccount
				TaxType = TaxTableOutput.AccrualFlag


        ProcessTaxHistory   
            if (TaxCode entered 
            and (IsCashLedgerTransaction 
            or   IsCashLedgerReconciliationAdjustment
            or   IsCashLedgerReturnedPayment 
            or   IsCashLedgerElectronicFundsTransferTransaction
            or   CreateFromBatchType.PaymentClose
            or   CreateFromBatchType.InvoiceReinstatement))
	            initialize CalculateTax
	            CalculateTax.Function                       = "I"
	            CalculateTax.CallingModule					= "CashLedgerGLDistribution"	
	            CalculateTax.RelatedObjectReference         = reference to this instance
	            if (CreateFromBatchType.PaymentClose
	            or  CreateFromBatchType.InvoiceReinstatement)
	            	CalculateTax.TaxEntity					= GLFinanceCodeBlock.ToAccountingEntity
	            	CalculateTax.InvoiceDate				= PostDate
					CalculateTax.PaymentDate				= CashLedgerPayment.PaymentDate
					CalculateTax.System						= "AP"
				else				
	            	CalculateTax.TaxEntity					= Company
	            CalculateTax.InvoiceCompany             	= Company
	            CalculateTax.TaxCode                        = TaxCode
	            TaxOut                                      = CalculateTax.ExecuteCalculateTax
				TaxTableOutput    						 	= CalculateTax.TaxTable.TaxTableOutput[1]
				TaxType 									= TaxTableOutput.AccrualFlag

	            initialize ProcessTaxHistory
	            ProcessTaxHistory.InvoiceCompany            = Company
	          	ProcessTaxHistory.TaxEntity					= GLFinanceCodeBlock.ToAccountingEntity
	            ProcessTaxHistory.TaxCode                   = TaxCode
	            ProcessTaxHistory.SystemCode                = "CB"
	            ProcessTaxHistory.InTransactionId			= blank
	            if (CreateFromBatchType.PaymentClose
	            or  CreateFromBatchType.InvoiceReinstatement)
	            	ProcessTaxHistory.TaxTransFunction 			= "A"
	            	ProcessTaxHistory.VendorCustomer			= CashLedgerPaymentRel.PayablesData.Vendor
	            	ProcessTaxHistory.Invoice         			= CashLedgerPaymentRel.Reference
	                ProcessTaxHistory.TaxTransactionAccount		= GLFinanceCodeBlock 
	            	ProcessTaxHistory.PostDate           		= PostDate
	            	ProcessTaxHistory.TaxPointDate          	= CashLedgerPaymentRel.PaymentDate
	            	ProcessTaxHistory.InvoiceDate           	= current corporate date
	            	if (CashLedgerPaymentRel.UsingBankCurrencyPosting)	
	            		ProcessTaxHistory.TransactionCurrency		= CashLedgerPaymentRel.BankCurrency
	            		ProcessTaxHistory.CurrencyRate				= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount.FunctionalAmount.EnteredCurrencyRate
	   		         	ProcessTaxHistory.BaseInvoiceAmount			= CashLedgerPaymentRel.BankBaseAmount.BasePaymentAmount
	           			ProcessTaxHistory.TransactionInvoiceAmount  = CashLedgerPaymentRel.BankAmount
	            	else
	            		ProcessTaxHistory.TransactionCurrency		= CashLedgerPaymentRel.Currency
	            		ProcessTaxHistory.CurrencyRate				= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyRate
	   		         	ProcessTaxHistory.BaseInvoiceAmount			= CashLedgerPaymentRel.CompanyBaseData.BasePaymentAmount
	           			ProcessTaxHistory.TransactionInvoiceAmount  = CashLedgerPaymentRel.BankCheckAmount
	            	ProcessTaxHistory.TransactionSource			= "I"
	           		ProcessTaxHistory.TransactionTaxableAmount	= TaxableBankAmount 
	           		ProcessTaxHistory.TransactionTaxAmount		= GLTransactionAmount  
	           		ProcessTaxHistory.BaseTaxAmount				= TaxBaseAmount
	           		if (ProcessTaxHistory.TransactionCurrency not = CashLedgerPaymentRel.PayablesData.PayGroup.BaseCurrency)	
	           			ProcessTaxHistory.BaseTaxable			= ProcessTaxHistory.BaseInvoiceAmount - ProcessTaxHistory.BaseTaxAmount
	           			if (CreateFromBatchType.InvoiceReinstatement
						and !LocalVoidReopen)							
	           				ProcessTaxHistory.BaseTaxable		*= -1	
					else
						ProcessTaxHistory.BaseTaxable			= ProcessTaxHistory.TransactionTaxableAmount
					if (CreateFromBatchType.InvoiceReinstatement
					and !LocalVoidReopen)							
						ProcessTaxHistory.BaseInvoiceAmount			*= -1
	           			ProcessTaxHistory.TransactionTaxableAmount	*= -1 
	           			ProcessTaxHistory.TransactionInvoiceAmount  *= -1
	           			ProcessTaxHistory.TransactionTaxAmount		*= -1
	           			ProcessTaxHistory.BaseTaxAmount				*= -1
				else
					ProcessTaxHistory.HistoryType               = "O"
		       		ProcessTaxHistory.VendorCustomer 		    = ""	
		            ProcessTaxHistory.Invoice                   = TransactionNumber
		            ProcessTaxHistory.Suffix                    = TransactionNumberSuffix
		            ProcessTaxHistory.VoucherNumber             = TransactionNumber
		            ProcessTaxHistory.PostDate                  = PostDate
		            ProcessTaxHistory.TransactionCurrency       = TransientFromCurrency	
		            ProcessTaxHistory.TransactionTaxableAmount  = TaxableBankAmount
		           	ProcessTaxHistory.TransactionTaxAmount  	= GLTransactionAmount
		            ProcessTaxHistory.TransactionNumberOfDecimals = TransactionCurrencyNumberOfDecimals
		            ProcessTaxHistory.TaxRate                   = ProcessTaxHistory.TransactionTaxAmount / ProcessTaxHistory.TransactionTaxableAmount
		            ProcessTaxHistory.AccruedOrInvoiced         = TaxType								
	            if (IsCashLedgerReconciliationAdjustment)
	            	ProcessTaxHistory.InvoiceDate           	= CashLedgerReconciliationAdjustmentRel.ReconciliationData.ExchangeDate
	            	ProcessTaxHistory.TaxPointDate          	= CashLedgerReconciliationAdjustmentRel.ReconciliationData.ExchangeDate
	           		ProcessTaxHistory.TransactionInvoiceAmount  = CashLedgerReconciliationAdjustmentRel.IssuedBankAmount
	                if (CashLedgerGLDistribution.BankTransactionCode.TransactionType.DebitTransaction)
	                    ProcessTaxHistory.TaxTransactionAccount	= TaxTableOutput.TaxInputAccount
	                else
	                    ProcessTaxHistory.TaxTransactionAccount	= TaxTableOutput.TaxOutputAccount
	            else
	            if (IsCashLedgerElectronicFundsTransferTransaction)
	            	ProcessTaxHistory.TaxTransactionAccount 	= GLFinanceCodeBlock  
	            	ProcessTaxHistory.VendorOrCustomerName  	= CashLedgerElectronicFundsTransferTransactionRel.Description
	            	ProcessTaxHistory.TransactionInvoiceAmount 	= CashLedgerElectronicFundsTransferTransactionRel.ReceiptAmount * -1
	            	ProcessTaxHistory.TransactionSource     	= "O"
	            	if (CashLedgerVoidUpdate)
		            	ProcessTaxHistory.InvoiceDate				= LocalVoidDate
	            		ProcessTaxHistory.TaxPointDate				= LocalVoidDate
	            		ProcessTaxHistory.PostDate					= LocalVoidDate
	           			ProcessTaxHistory.TransactionTaxableAmount *= -1 
	           			ProcessTaxHistory.TransactionTaxAmount	   *= -1
	           			ProcessTaxHistory.TransactionInvoiceAmount *= -1
	           		else	
		            	ProcessTaxHistory.InvoiceDate           	= PostDate
		            	ProcessTaxHistory.TaxPointDate          	= PostDate
		            	ProcessTaxHistory.PostDate					= PostDate
	            else
	            if (IsCashLedgerReturnedPayment) 
	            	ProcessTaxHistory.TaxTransactionAccount 	= GLFinanceCodeBlock  
	            	ProcessTaxHistory.VendorOrCustomerName  	= CashLedgerReturnedPaymentRel.Description
	            	ProcessTaxHistory.TaxPointDate				= PostDate
	            	ProcessTaxHistory.InvoiceDate				= PostDate
	            	ProcessTaxHistory.TransactionInvoiceAmount 	= CashLedgerReturnedPaymentRel.BankAccountReturnAmount
	           		ProcessTaxHistory.TransactionSource     	= "O"
	            else
	            if (IsCashLedgerTransaction) 
	            	ProcessTaxHistory.TransactionSource     	= CashLedgerTransactionRel.Source
	        		ProcessTaxHistory.TaxTransactionAccount 	= GLFinanceCodeBlock  
	        		ProcessTaxHistory.VendorOrCustomerName  	= CashLedgerTransactionRel.Description
	            	ProcessTaxHistory.TransactionInvoiceAmount  = CashLedgerTransactionRel.IssuedBankAmount
	            	if (CashLedgerVoidUpdate)
		            	ProcessTaxHistory.InvoiceDate           	= LocalVoidDate
	            		ProcessTaxHistory.TaxPointDate          	= LocalVoidDate
	            		ProcessTaxHistory.PostDate                  = LocalVoidDate
	           			ProcessTaxHistory.TransactionTaxableAmount *= -1 
	           			ProcessTaxHistory.TransactionTaxAmount	   *= -1
	           			ProcessTaxHistory.TransactionInvoiceAmount *= -1
	           		else
	           			ProcessTaxHistory.InvoiceDate           	= CashLedgerTransactionRel.IssueDate
		            	ProcessTaxHistory.TaxPointDate          	= CashLedgerTransactionRel.IssueDate	
	          			if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
	                		ProcessTaxHistory.TransactionInvoiceAmount  = ProcessTaxHistory.TransactionInvoiceAmount  * -1            	
	            TaxOut = ProcessTaxHistory.TaxHistoryProcessed
				constraint (ProcessTaxHistory.OutputErrorMessage not entered)
					"<ProcessTaxHistory.OutputErrorMessage>"


























		ProcessBudgetAndCommitments
			LocalCashManagementGroup	= CashManagementGroup
			LocalSystemCode				= "CB"
			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	        or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				and !BypassBudgetEditing)
		       		invoke PerformBudgetEdit
				if (!InterfaceAsPosted)	
					invoke CreateCommitment

 	Field Rules
		
		CashLedgerSourceRecord
			if (CashLedgerReconciliationAdjustment 	  entered
			or  CashLedgerReconciliationAdjustmentRel exists)
				default to CashLedgerReconciliationAdjustment.CashLedgerSourceRecord
			else
			if (CashLedgerPayment 	 entered
			or  CashLedgerPaymentRel exists)
				default to "CBM"
			else
			if (CashLedgerElectronicFundsTransferTransaction 	entered
			or  CashLedgerElectronicFundsTransferTransactionRel	exists)
				default to "CFT"
			else
			if (CashLedgerReturnedPayment	 entered
			or  CashLedgerReturnedPaymentRel exists)
				default to "CRP"
			else
			if (CashLedgerTransaction 	 entered
			or  CashLedgerTransactionRel exists)
				default to CashLedgerTransaction.CashLedgerSourceRecord
			required	
				"CashLedgerSourceRecordRequired"	

		Company
			cannot be changed
			LocalSystemCode				= "CB"
			if (IsCashLedgerReconciliationAdjustment)
				default to CashLedgerReconciliationAdjustmentRel.Company
			else
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.CompanyBaseData.OverrideCompany
			else
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.Company
			else
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.Company
				else
					default to CashLedgerReturnedPaymentRel.Company	
			else
			if (IsCashLedgerTransaction
			or  CashLedgerTransactionRel exists)	
				default to CashLedgerTransactionRel.Company

								
		PostDate
			if (IsCashLedgerReconciliationAdjustment)
				default to CashLedgerReconciliationAdjustmentRel.PostDate
			else
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.PostDate
				cannot be changed
			else
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
			else
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.PostDate
				else
					default to CashLedgerReturnedPaymentRel.PostDate
			else
			if (IsCashLedgerTransaction
			or  CashLedgerTransactionRel exists)	
				default to CashLedgerTransactionRel.GeneralLedgerPostDate

		RecordType
			cannot be changed
			if (IsCashLedgerReconciliationAdjustment)			
				default to blank
			else	
			if (IsCashLedgerPayment)
				default to RecordType.CashLedgerPaymentDistribution
			else	
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to RecordType.EftPaymentDistribution
			else
			if (WireTransferBatchDetail entered)
				default to RecordType.WireTransferDistribution
			else	
			if (IsCashLedgerReturnedPayment
			or  IsCashLedgerTransaction) 
				default to blank
			if (RecordType.CashCodeDistribution							 	
			or  RecordType.OffsetEftPaymentDistribution						
			or  RecordType.OffsetCashLedgerPaymentDistribution				
			or  RecordType.StaleDatingDistribution							
			or  RecordType.APCashLedgerPaymentDistribution					
			or  RecordType.VoidedCashLedgerPaymentDistribution)				
				BypassStructureRelationEdit = true							
				BypassUnitAndAmountEdit = true								
				
		Reference
			if (IsCashLedgerTransaction
			and !CashLedgerCashReceiptHeader entered)						
				default to CashLedgerTransactionRel.Reference
								
		Description
			if (IsCashLedgerReconciliationAdjustment)
				default to "ReconciliationAdjustment"   
			else	
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.Description
			else	
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.Description
				else			
					default to CashLedgerReturnedPaymentRel.Description
			else		
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.Description
			else		
			if (IsCashLedgerTransaction)		
				default to CashLedgerTransactionRel.Description

		GLTransactionAmount
			if (TaxCode not entered
			and TaxableBankAmount not entered		
			and GLTransactionAmount not entered
			and TransientUnitsAmount not entered
			and !BypassUnitAndAmountEdit)
				required
					"DistributionAmountOrUnitsAmountRequired"

        GLBaseAmount
        	required
        	if (IsCashLedgerPayment	
        	and CashLedgerPaymentRel.UsingBankCurrencyPosting
			and CashLedgerGLDistribution.DistributionType.Entry		
        	and !LocalPaymentCloseCashAccount)
        		TransientFromCurrency	= CashLedgerPaymentRel.BankCurrency
        	else	
       			TransientFromCurrency	= CashCode.Currency
        	BypassNegativeRateEdit	= true
					
		TaxCode
			if (TaxCode not entered)
				constraint (TaxableBankAmount not entered)
					"TaxCodeRequiredWithTaxableAmount" 	
			if (IsCashLedgerReconciliationAdjustment)
				constraint (TaxCode not entered)
					"TaxDistributionsNotValidForAdjustments"					
			if (IsCashLedgerTransaction 
			or  CreateFromBatchType.TransactionLoad)					
				constraint (CashLedgerTransactionRel.Source entered)
					"SourceTypeRequiredForTaxDistributions"    
			if (TaxCode entered)	
				BypassUnitAndAmountEdit = true		
									
		TaxableBankAmount
			if (IsCashLedgerReconciliationAdjustment)
				constraint (TaxCode not entered)
					"TaxDistributionsNotValidForAdjustments"
			if (TaxableBankAmount not entered)
				constraint (TaxCode not entered)
					"TaxableAmountRequiredWithTaxCode" 
			else
				if (GLTransactionAmount < 0)  
		    		constraint (TaxableBankAmount < 0)
						"TaxAndTaxableAmountMustHaveSameSign"	
				else
		    		constraint (TaxableBankAmount > 0)
						"TaxAndTaxableAmountMustHaveSameSign"	
																
		TransactionNumber
			cannot be changed
			if (IsCashLedgerReconciliationAdjustment)
				default to CashLedgerReconciliationAdjustmentRel.TransactionNumber 						
			else
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.Reference
			else
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.Reference
			else	
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.TransactionNumber
				else			
					default to CashLedgerReturnedPaymentRel.TransactionNumber
			else				 						
			if (IsCashLedgerTransaction
			or  CashLedgerTransactionRel exists)	
				default to CashLedgerTransactionRel.TransactionNumber
					
		CashLedgerGLDistribution.TransactionIDNumber
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber
			else	
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.CashLedgerPayment.TransactionIDNumber
			else	
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.CashLedgerReturnedPayment.TransactionIDNumber
				else			
					default to CashLedgerReturnedPaymentRel.CashLedgerReturnedPayment.TransactionIDNumber
		
		GeneralLedgerSourceCode
			if (IsCashLedgerElectronicFundsTransferTransaction)
				default to CashLedgerElectronicFundsTransferTransactionRel.GeneralLedgerSourceCode
			else	
			if (IsCashLedgerPayment)
				default to CashLedgerPaymentRel.GeneralLedgerSourceCode
			else	
			if (IsCashLedgerReturnedPayment)
				if (ReturnedPaymentTransactionIDNumber entered)
					default to CashLedgerReturnedPaymentForBankExpenseRel.GeneralLedgerSourceCode
				else			
					default to CashLedgerReturnedPaymentRel.GeneralLedgerSourceCode
			else		
			if (IsCashLedgerTransaction)

				default to CashLedgerTransactionRel.GeneralLedgerEvent		
				default to "CL"		

		CashLedgerGLDistribution.DistributionType
			if (IsCashLedgerReconciliationAdjustment)
				default to DistType.Reconciliation
			else	
			if (IsCashLedgerElectronicFundsTransferTransaction
			or  IsCashLedgerReturnedPayment		
			or  IsCashLedgerPayment)		
				default to DistType.Entry	
				
		TransactionCurrencyNumberOfDecimals
			if (IsCashLedgerPayment	
        	and CashLedgerPaymentRel.UsingBankCurrencyPosting
			and CashLedgerGLDistribution.DistributionType.Entry		
        	and !LocalPaymentCloseCashAccount)
				TransactionCurrencyNumberOfDecimals = CashLedgerPaymentRel.BankCurrency.Currency.NumberOfDecimals
			else	
				TransactionCurrencyNumberOfDecimals =CashCode.BankAccountNumber.Currency.NumberOfDecimals
				
		ToTransactionCurrencyNumberOfDecimals
			if (IsCashLedgerPayment	
        	and CashLedgerPaymentRel.UsingBankCurrencyPosting
			and CashLedgerGLDistribution.DistributionType.Entry		
        	and !LocalPaymentCloseCashAccount)
				ToTransactionCurrencyNumberOfDecimals = CashLedgerPaymentRel.BankCurrency.Currency.NumberOfDecimals
			else	
				ToTransactionCurrencyNumberOfDecimals = CashCode.BankAccountNumber.Currency.NumberOfDecimals  					

		GLFinanceCodeBlock
			required
			if (IsCashLedgerPayment	
        	and CashLedgerPaymentRel.UsingBankCurrencyPosting
			and CashLedgerGLDistribution.DistributionType.Entry		
        	and !LocalPaymentCloseCashAccount)
        		TransientFromCurrency	= CashLedgerPaymentRel.BankCurrency
        	else	
				TransientFromCurrency	= CashCode.Currency

			if  (Status.Unreleased
			and (RecordType.NotACashCodeDistribution
			or   RecordType.CashLedgerPaymentDistribution
			or   RecordType.EftPaymentDistribution
			or   RecordType.WireTransferDistribution))
				if (CompanyAccountingEntity.ValidSystems entered)
					constraint (LocalSystemCode within CompanyAccountingEntity.ValidSystems)
						"InvalidSystemFor<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GLFinanceCodeBlock.ToAccountingEntity.ValidSystems entered)
					constraint (LocalSystemCode within GLFinanceCodeBlock.ToAccountingEntity.ValidSystems)
						"InvalidSystemForPosting<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GLFinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalSystemCode within GLFinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemForAccount"
										
#ifdef module cam
			if (Status.Unreleased
			and CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement		
			and GLFinanceCodeBlock.FinanceDimension10 entered)
				LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
				LocalFinanceDimension10 = GLFinanceCodeBlock.FinanceDimension10
				constraint (CustodialDetailAmountRel exists)
					"<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension10Label>:<LocalFinanceDimension10>_MustBeSetupUnderCustodialAccounts"
				if (RecordType.CashLedgerPaymentDistribution
				or   RecordType.EftPaymentDistribution
				or   RecordType.WireTransferDistribution
				or   (IsCashLedgerTransaction and CashLedgerTransactionRel.BankTransactionSign.BankDebit))
					if (CashLedgerPaymentRel.PayablesData.Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
						constraint (GLFinanceCodeBlock.FinanceDimension10.Expendable)
							"<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension10Label>:<LocalFinanceDimension10>_MustBeExpendable"
				constraint (CustodialDetailAmountRel.CustodialAccountManagement.BankTransactionCode entered)
					"<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension10Label>:<LocalFinanceDimension10>_BankTransactionCodeMustBeSetup"
#endif

		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(GLFinanceCodeBlock.Ledger != GLTransactionDetailRel.FinanceCodeBlock.Ledger
			or	GLFinanceCodeBlock.ToAccountingEntity != GLTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity
			or	GLFinanceCodeBlock.AccountingUnit != GLTransactionDetailRel.FinanceCodeBlock.AccountingUnit
			or	GLFinanceCodeBlock.GeneralLedgerChartAccount != GLTransactionDetailRel.FinanceCodeBlock.GeneralLedgerChartAccount
			or	GLFinanceCodeBlock.Project != GLTransactionDetailRel.FinanceCodeBlock.Project
			or	GLFinanceCodeBlock.FinanceDimension1 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension1
			or	GLFinanceCodeBlock.FinanceDimension2 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension2
			or	GLFinanceCodeBlock.FinanceDimension3 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension3
			or	GLFinanceCodeBlock.FinanceDimension4 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension4
			or	GLFinanceCodeBlock.FinanceDimension5 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension5
			or	GLFinanceCodeBlock.FinanceDimension6 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension6
			or	GLFinanceCodeBlock.FinanceDimension7 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension7
			or	GLFinanceCodeBlock.FinanceDimension8 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension8
			or	GLFinanceCodeBlock.FinanceDimension9 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension9
			or	GLFinanceCodeBlock.FinanceDimension10 != GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension10
        	or	GLTransactionAmount != GLTransactionDetailRel.TransactionAmount))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true

	Create Rules		
		if (RecordType.CashCodeDistribution
		or  RecordType.OffsetEftPaymentDistribution
		or  RecordType.EftExtractDistribution
		or  RecordType.OffsetCashLedgerPaymentDistribution
		or  RecordType.StaleDatingDistribution
		or  RecordType.APCashLedgerPaymentDistribution
		or  RecordType.VoidedCashLedgerPaymentDistribution)
			BypassActiveCodeBlockEdit = true		
		if (!BypassCashFundUpdate  
		and RecordType.CashCodeDistribution
		and CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)	
			LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
			if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
			else
				LocalFinanceDimension1	= GLFinanceCodeBlock.FinanceDimension1
			if (CashLedgerGLDistribution.DistributionType.CashLedgerVoidUpdate)
				if (CashCodeFundRel !exist)
					invoke Create CashCodeFundRel
						invoked.PostedAmount = GLTransactionAmount *-1
				else
					invoke UpdatePostedAmount CashCodeFundRel
						invoked.PrmPostedAmount = GLTransactionAmount *-1
			else
				if (CashCodeFundRel !exist)
					invoke Create CashCodeFundRel
						invoked.PostedAmount = GLTransactionAmount
				else
					invoke UpdatePostedAmount CashCodeFundRel
						invoked.PrmPostedAmount = GLTransactionAmount
#ifdef module cam
		if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement
		and RecordType.CashCodeDistribution
		and GLFinanceCodeBlock.FinanceDimension10 entered)
			initialize LocalActivityType
			LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
			LocalFinanceDimension10 = GLFinanceCodeBlock.FinanceDimension10
			if (CashLedgerGLDistribution.DistributionType.CashLedgerVoidUpdate)
				if (IsCashLedgerTransaction and !CashLedgerTransactionRel.Type.CashReceiptEntry)
					if (CustodialDetailAmountRel.CustodialAccountManagement.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode)
						LocalActivityType = 7
						invoke UpdateTransfers CustodialDetailAmountRel
							invoked.PrmTransfers += GLTransactionAmount *-1
					else
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						LocalActivityType = 5
						invoke UpdateDeposits CustodialDetailAmountRel
							invoked.PrmDeposits += GLTransactionAmount *-1
					else
					if (CashLedgerTransactionRel.BankTransactionSign.BankDebit)
						LocalActivityType = 6
						invoke UpdateDisbursements CustodialDetailAmountRel
							invoked.PrmDisbursements += GLTransactionAmount
				else
					if (GLTransactionAmount > 0)
						LocalActivityType = 5
						invoke UpdateDeposits CustodialDetailAmountRel
							invoked.PrmDeposits += GLTransactionAmount *-1
					else
					if (GLTransactionAmount < 0)
						LocalActivityType = 6
						invoke UpdateDisbursements CustodialDetailAmountRel
							invoked.PrmDisbursements += GLTransactionAmount
			else
			if (IsCashLedgerTransaction and !CashLedgerTransactionRel.Type.CashReceiptEntry)
				if (CustodialDetailAmountRel.CustodialAccountManagement.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode)
					LocalActivityType = 3
					invoke UpdateTransfers CustodialDetailAmountRel
						invoked.PrmTransfers += GLTransactionAmount
				else
				if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
					LocalActivityType = 1
					invoke UpdateDeposits CustodialDetailAmountRel
						invoked.PrmDeposits += GLTransactionAmount
				else
				if (CashLedgerTransactionRel.BankTransactionSign.BankDebit)
					LocalActivityType = 2
					invoke UpdateDisbursements CustodialDetailAmountRel
						invoked.PrmDisbursements += GLTransactionAmount *-1
			else
				if (GLTransactionAmount > 0)
					LocalActivityType = 1
					invoke UpdateDeposits CustodialDetailAmountRel
						invoked.PrmDeposits += GLTransactionAmount
				else
				if (GLTransactionAmount < 0)
					LocalActivityType = 2
					invoke UpdateDisbursements CustodialDetailAmountRel
						invoked.PrmDisbursements += GLTransactionAmount *-1
							
			if (LocalActivityType entered)
				invoke Create CustodialActivity
					invoked.FinanceEnterpriseGroup  	 = CashManagementGroup
					invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
					invoked.CustodialPosting			 = LocalFinanceDimension10
					invoked.ActivityDate				 = PostDate 		 
					invoked.ActivityType 				 = LocalActivityType
					invoked.DocumentNumber				 = TransactionNumber
					invoked.Description 				 = Description
					if (CashLedgerGLDistribution.DistributionType.CashLedgerVoidUpdate)
						invoked.Amount						 = GLTransactionAmount *-1
					else
						invoked.Amount = GLTransactionAmount
					invoked.CustodialCashCode			 = CashCode
					invoked.CustodialTransactionCode	 = CashLedgerGLDistribution.BankTransactionCode
					invoked.CashLedgerTransactionID		 = CashLedgerGLDistribution.TransactionIDNumber
					invoked.SourceRecord				 = CashLedgerSourceRecord
#endif

	Delete Rules		
		if (!BypassCashFundUpdate
		and CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
		and RecordType.CashCodeDistribution)
			LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
			if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
				LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
			else
				LocalFinanceDimension1	= GLFinanceCodeBlock.FinanceDimension1
			if (CashCodeFundRel !exist)
				invoke Create CashCodeFundRel
					invoked.PostedAmount = GLTransactionAmount *-1
			else
				invoke UpdatePostedAmount CashCodeFundRel
					invoked.PrmPostedAmount = GLTransactionAmount *-1
#ifdef module cam
		if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement
		and RecordType.CashCodeDistribution
		and GLFinanceCodeBlock.FinanceDimension10 exists)
			LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
			LocalFinanceDimension10 = GLFinanceCodeBlock.FinanceDimension10
			initialize LocalActivityType
			if (IsCashLedgerTransaction and !CashLedgerTransactionRel.Type.CashReceiptEntry)
				if (CustodialDetailAmountRel.CustodialAccountManagement.BankTransactionCode = CashLedgerGLDistribution.BankTransactionCode)
					LocalActivityType = 7
					invoke UpdateTransfers CustodialDetailAmountRel
						invoked.PrmTransfers += GLTransactionAmount *-1
				else
				if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
					LocalActivityType = 5
					invoke UpdateDeposits CustodialDetailAmountRel
						invoked.PrmDeposits += GLTransactionAmount *-1
				else
				if (CashLedgerTransactionRel.BankTransactionSign.BankDebit)
					LocalActivityType = 6
					invoke UpdateDisbursements CustodialDetailAmountRel
						invoked.PrmDisbursements += GLTransactionAmount
			else
				if (GLTransactionAmount > 0)
					LocalActivityType = 5
					invoke UpdateDeposits CustodialDetailAmountRel
						invoked.PrmDeposits += GLTransactionAmount *-1
				else
				if (GLTransactionAmount < 0)
					LocalActivityType = 6
					invoke UpdateDisbursements CustodialDetailAmountRel
						invoked.PrmDisbursements += GLTransactionAmount
						
			if (LocalActivityType entered)
				invoke Create CustodialActivity
					invoked.FinanceEnterpriseGroup  	 = CashManagementGroup
					invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
					invoked.CustodialPosting			 = LocalFinanceDimension10
					invoked.ActivityDate				 = PostDate
					invoked.ActivityType			 	 = LocalActivityType
					invoked.DocumentNumber				 = TransactionNumber
					invoked.Description 				 = Description
					invoked.Amount						 = GLTransactionAmount *-1
					invoked.CustodialCashCode			 = CashCode
					invoked.CustodialTransactionCode	 = CashLedgerGLDistribution.BankTransactionCode
					invoked.CashLedgerTransactionID		 = CashLedgerGLDistribution.TransactionIDNumber
					invoked.SourceRecord				 = CashLedgerSourceRecord
#endif

	Actions
		Create is a Create Action
			valid when (IsChangeValid) 
			Entrance Rules
				if (Status.Released	
				or  Status.Posted)
					constraint (BypassStatusEdit)	
						"CannotAddAReleasedOrPostedDistribution"
				include LoadCashLedgerSourceRecordDefaults	
				if (TransientCreateFromBatchType entered)
					CreateFromBatchType 				= TransientCreateFromBatchType
				if (CreateFromBatchType.PaymentLoad)
					BypassBudgetEditing 				= true
					if (LocalHeaderUniqueID not entered)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerPaymentRel.CashLedgerPayment
						LocalHeaderUniqueID				= CashLedgerPaymentRel.UniqueID
				if (CreateFromBatchType.EftLoad)
					BypassBudgetEditing 				= true
					if (LocalHeaderUniqueID not entered)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
						LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID
				if (!IsCreateFromBatch)
					include CreateAndUpdateActionRules
					include SaveDocumentCurrencyTotals


				if (IsCreateFromBatch)
					include CreateFromBatchRules
				include ValidateForBudgetProcessing
			Action Rules
				include CalculateTax
				if (!IsCreateFromBatch)
					include LoadCBDefaults	

					if (IsCashLedgerReconciliationAdjustment)
						if (RecordType.NotACashCodeDistribution)
							increment CashLedgerReconciliationAdjustmentRel.AppliedDistributionBankAmount by GLTransactionAmount	
	                    increment CashLedgerTransactionRel.LastDistributionSequence
	                    CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
	                    if (IsCashLedgerPayment)	
	                    	increment CashLedgerPaymentRel.LastDistributionSequence
	                    	CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence
	                else    
	                if (IsCashLedgerPayment)

	                    increment CashLedgerPaymentRel.LastDistributionSequence
	                    CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence
	                    if (CashLedgerGLDistribution.DistributionType.Reconciliation)
	                    	increment CashLedgerTransactionRel.LastDistributionSequence
	                else
	                if (IsCashLedgerElectronicFundsTransferTransaction)

						BypassBudgetEditing = true
						if (not EftOffsetFlag)
							DistributionToBankAmount = GLTransactionAmount 
	                    if (Description not entered)
	                        Description = CashLedgerElectronicFundsTransferTransactionRel.Description
	                    increment CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
	                    CashLedgerGLDistribution.SequenceNumber = CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
	                else    
	           		if (IsCashLedgerReturnedPayment)

	           			if (CashLedgerGLDistribution.SequenceNumber not entered)
		                    increment CashLedgerReturnedPaymentRel.LastDistributionSequence
		                    CashLedgerGLDistribution.SequenceNumber = CashLedgerReturnedPaymentRel.LastDistributionSequence
		            else        
					if (CashLedgerCashReceiptHeader entered
					or  CashLedgerFundTransferHeader entered
					or  CashLedgerFundTransferDetail entered
					or	WireTransferBatchDetail entered
					or  IsCashLedgerPayablesPayment)
					    increment CashLedgerTransactionRel.LastDistributionSequence
					    CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
	                else    
	                if (IsCashLedgerTransaction)
	                    if (RecordType.NotACashCodeDistribution
	                    and !CashLedgerGLDistribution.DistributionType.Reconciliation 
						and !CashLedgerTransactionRel.AmendedDistributions)	
	                        if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
	                            increment CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount * -1)
	                            include ReverseLocaLDocumentNewCurrencyTotals  
	                        else
	                            increment CashLedgerTransactionRel.AppliedDistributionBankAmount by GLTransactionAmount
	                    increment CashLedgerTransactionRel.LastDistributionSequence
	                    CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
					if (CashLedgerTransactionRel.AmendedDistributions)	
						if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
							increment CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount * -1)
							include ReverseLocaLDocumentNewCurrencyTotals  
						else
							increment CashLedgerTransactionRel.AppliedDistributionBankAmount by GLTransactionAmount					
			Exit Rules
				if (IsCashLedgerTransaction
	        	and CashLedgerTransactionRel.CreatedFromBankStatementLine entered)	
	        		invoke FastUpdate
	        			fill in user fields from CashLedgerTransactionRel.CreatedFromBankStatementLine.CashTransactionCategory
						fill in user fields from CashLedgerTransactionRel.CreatedFromBankStatementLineDetail.OverrideCategory
						fill in user fields from CashLedgerTransactionRel.CreatedFromBankStatement
	        			fill in user fields from CashLedgerTransactionRel.CreatedFromBankStatementLine
						fill in user fields from CashLedgerTransactionRel.CreatedFromBankStatementLineDetail
				if (CreateFromBatchType.TransactionLoad)
					if (RecordType.NotACashCodeDistribution)
                        if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
                            increment CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount * -1)
                            include ReverseLocaLDocumentNewCurrencyTotals  
                        else
                            increment CashLedgerTransactionRel.AppliedDistributionBankAmount by GLTransactionAmount	
				if (CreateFromBatchType.PaymentClose)


					include CreateGLTransactionDetail
				else
					if (RecordType.CashCodeDistribution
					or  RecordType.OffsetCashLedgerPaymentDistribution
					or  EftOffsetFlag)
						include CreateGLTransactionDetailOffset
					else
						include CreateGLTransactionDetail
						LocalDocumentCurrencyTotals.NewCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount
				if (!IsCreateFromBatch)
					if (IsCashLedgerReconciliationAdjustment)
						if (RecordType.NotACashCodeDistribution)
							LocalDocumentCurrencyTotals.PerformUpdate	= true
							if (LocalDocumentCurrencyTotals.UpdateTotals)
								invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
									invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
					else									
					if (IsCashLedgerPayment)
						if (DistribUserFields entered)
							invoke UpdateTextSearchIndexes CashLedgerPaymentRel
					else							
	                if (IsCashLedgerTransaction
	                and !CashLedgerGLDistribution.DistributionType.Reconciliation)	
	                    if (RecordType.NotACashCodeDistribution)
                        	LocalDocumentCurrencyTotals.PerformUpdate	= true
							if (LocalDocumentCurrencyTotals.UpdateTotals)
								invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
									invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals	
						if (DistribUserFields entered)
							invoke UpdateTextSearchIndexes CashLedgerTransactionRel				
				if (CreateFromBatchType.TransactionLoad)
					if (RecordType.NotACashCodeDistribution)
                    	LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals						 									
				if (!BypassBudgetAndCommitmentProcessing)
					include ProcessBudgetAndCommitments		
				if (SetToHistorical)
					invoke InterfaceAsPosted	
				initialize GLBaseAmount						
				
		CreateFromBatch is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmAccountingEntity			is like AccountingEntity  
				PrmCodeBlock         		is like TransactionCodeBlock
				PrmGLTransAmount      		is like CurrencyAmount
				PrmControlDocumentNumber 	is Alpha 30
				PrmDocumentNumber		 	is Alpha 30
				PrmExchangeDate				is Date 
				PrmPostingDate        		is Date
				PrmGeneralLedgerEvent		is like GeneralLedgerEvent
				PrmReference				is AlphaRight 10
				PrmDescription				is a Description
				PrmKeepRateOnly				is Boolean
				PrmCreateFromBatchType		is Numeric 2
				PrmTaxAccountingEntity		is like TaxEntity
				PrmEftOffsetFlag			is Boolean
				PrmJournalizeGroup       	is like JournalizeGroup
				
			Action Rules
				invoke Create this instance

					invoked.CompanyAccountingEntity                         = PrmAccountingEntity
					invoked.GLFinanceCodeBlock                              = PrmCodeBlock
					invoked.GLTransactionAmount 							= PrmGLTransAmount
					invoked.LocalControlDocumentNumber						= PrmControlDocumentNumber
					invoked.LocalDocumentNumber								= PrmDocumentNumber
					invoked.LocalExchangeDate								= PrmExchangeDate
					invoked.LocalPostingDate								= PrmPostingDate
					invoked.LocalGeneralLedgerEvent							= PrmGeneralLedgerEvent
					invoked.LocalReference									= PrmReference
					invoked.LocalDescription								= PrmDescription
					invoked.LocalKeepRateOnly								= PrmKeepRateOnly
					invoked.CreateFromBatchType								= PrmCreateFromBatchType
					invoked.TaxAccountingEntity								= PrmTaxAccountingEntity
					invoked.EftOffsetFlag									= PrmEftOffsetFlag
					invoked.GLTJournalizeGroup                              = PrmJournalizeGroup  
					invoked.BypassBudgetEditing								= true
					invoked.BypassStatusEdit								= true
					if (PrmCreateFromBatchType = 11) 
						invoked.LocalCurrencyTable							= CashLedgerTransactionRel.CurrencyTable

		CreateEscheatDistribFromBankUpdate is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				LocalControlDocumentNumber			= TransientTransactionNumber
				LocalDocumentNumber					= TransientTransactionNumber
				LocalExchangeDate					= TransientTransactionDate
				LocalPostingDate					= TransientTransactionDate
				LocalReference						= TransientTransactionNumber
				LocalGeneralLedgerEvent				= "CL"
				if (Description !entered)										
					Description						= "StaleDating"				
				BypassBudgetEditing					= true
				BypassBudgetAndCommitmentProcessing	= true
				LocalReleaseGlTransactionDetail		= true
				BypassStatusEdit					= true
				TransientCreateFromBatchType		= 6	
				invoke Create this instance

		UpdateOpenPaymentReport is an Instance Action
			restricted
			Parameters
				PrmCashLedgerJobResult	is a CashLedgerJobResult
			Local Fields
				LocalJobResultSummaryView	is a CashLedgerJobResultSummary view
			Action Rules
				LocalCashLedgerJobResult	= PrmCashLedgerJobResult
				if (JobResultSummaryRel exists)
					LocalJobResultSummary	=	first JobResultSummaryRel.CashLedgerJobResultSummary
					invoke UpdateAmounts first JobResultSummaryRel
						invoked.InputTransactionAmount	= (GLTransactionAmount *-1)
						invoked.InputFunctionalAmount	= (GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount *-1)
				else
					invoke Create CashLedgerJobResultSummary
						assign result to LocalJobResultSummaryView
						invoked.CashManagementGroup = CashManagementGroup
						invoked.CashLedgerJobResult	= LocalCashLedgerJobResult
						invoked.FinanceCodeBlock	= GLFinanceCodeBlock
						invoked.TransactionAmount	= (GLTransactionAmount *-1)
						invoked.FunctionalAmount	= (GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount *-1)
					LocalJobResultSummary = LocalJobResultSummaryView.CashLedgerJobResultSummary
				if (JobResultDetailRel exists)
					invoke UpdateAmounts first JobResultDetailRel
						invoked.InputTransactionAmount	= (GLTransactionAmount *-1)
						invoked.InputFunctionalAmount	= (GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount *-1)
				else
					invoke Create CashLedgerJobResultDetail
						invoked.CashManagementGroup 		= CashManagementGroup
						invoked.CashLedgerJobResult			= LocalCashLedgerJobResult
						invoked.OriginatingTransaction		= reference to CashLedgerPaymentRel.CashLedgerPayment
						invoked.CashLedgerJobResultSummary	= LocalJobResultSummary
						invoked.Company						= Company
						invoked.CashCode					= CashCode
						invoked.BankTransactionCode			= CashLedgerGLDistribution.BankTransactionCode
						invoked.Reference					= CashLedgerPaymentRel.Reference
						invoked.FinanceCodeBlock			= GLFinanceCodeBlock
						invoked.TransactionAmount			= (GLTransactionAmount *-1)
						invoked.FunctionalAmount			= (GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount *-1)

		ProcessTaxDistribsFromBatch is an Instance Action   
			default label is untranslatable
			restricted
			Parameters
				PrmCreateFromBatchType		is Numeric 2			
				PrmJournalizeGroup       	is like JournalizeGroup
			Action Rules
				CreateFromBatchType			= PrmCreateFromBatchType
				GLTJournalizeGroup			= PrmJournalizeGroup
				BypassUnitAndAmountEdit 	= true	
				include ProcessTaxHistory					
				if (!TaxTableOutput.LandCostFlag)

               		increment CashLedgerPaymentRel.LastDistributionSequence
					invoke RecreateDistribution 
						assign result to LocalCashLedgerGLDistribution
						fill in fields from this instance
						invoked.CashLedgerGLDistribution.SequenceNumber	= CashLedgerPaymentRel.LastDistributionSequence        						
		    			invoked.RecordType								= RecordType.OffsetCashLedgerPaymentDistribution
						invoked.Status 	 								= Status.Released
						invoked.Description								= "CreatedByPaymentClose"
						invoked.GeneralLedgerSourceCode					= "AP"
					if (GLTransactionDetailRel exists)

						invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
                			fill in fields from GLTransactionDetailRel  
                			invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
							invoked.FinanceCodeBlock					= TaxTableOutput.TaxInputDueAccount
	                		invoked.TransactionDate						= PostDate
							invoked.PostingDate							= PostDate 
							invoked.Reference							= TransactionNumber
							invoked.Description			  				= Description		
	            			invoked.GeneralLedgerEvent 	    			= GeneralLedgerSourceCode
	            			invoked.JournalizeGroup						= GLTJournalizeGroup	

					increment CashLedgerPaymentRel.LastDistributionSequence
					invoke RecreateDistribution
						assign result to LocalCashLedgerGLDistribution  	
						fill in fields from this instance
						invoked.CashLedgerGLDistribution.SequenceNumber	= CashLedgerPaymentRel.LastDistributionSequence
						invoked.DistributionToBankAmount  				*= -1 
						invoked.TaxableBankAmount						*= -1
		    			invoked.RecordType								= RecordType.OffsetCashLedgerPaymentDistribution
						invoked.Status 	 								= Status.Released
						invoked.Description								= "CreatedByPaymentClose"
						invoked.GeneralLedgerSourceCode					= "AP"
	                if (GLTransactionDetailRel exists)
						GLBaseAmount = GLTransactionDetailRel.ReportCurrencyAmount
						include ReverseReportCurrencyAmounts

						invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
							fill in fields from GLTransactionDetailRel 						
	                		invoked.OriginatingTransaction 				= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution
							invoked.TransactionAmount 					*= -1
							invoked.ReportCurrencyAmount				= GLBaseAmount
							invoked.TransactionDate						= PostDate
							invoked.PostingDate							= PostDate 
							invoked.Reference							= TransactionNumber
							invoked.Description			  				= Description		
	            			invoked.GeneralLedgerEvent 	    			= GeneralLedgerSourceCode
	            			invoked.JournalizeGroup						= GLTJournalizeGroup 
            			         
																							
		VoidPaymentDistributions is an Instance Action   
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmCreateFromBatchType		is Numeric 2
				PrmVoidDate					is Date			
				PrmVoidReopen				is Boolean		
			
			Local Fields
				LocalBoolean				is Boolean		
				
			Action Rules
				CreateFromBatchType			= PrmCreateFromBatchType
				GLTJournalizeGroup			= PrmJournalizeGroup

				LocalHeaderBusinessObjectRef	= reference to CashLedgerPayment.CashLedgerPayment
				LocalHeaderUniqueID				= CashLedgerPayment.UniqueID
				LocalExchangeDate				= CashLedgerPayment.PostDate
				LocalPostingDate				= CashLedgerPayment.PostDate
                increment CashLedgerPayment.LastDistributionSequence
                increment CashLedgerTransactionRel.LastDistributionSequence
                if (TaxCode entered)
                	LocalDocumentNumber					= Reference
					LocalControlDocumentNumber			= Reference
					BypassUnitAndAmountEdit 			= true	
				if (RecordType.APCashLedgerPaymentDistribution
				or  RecordType.StaleDatingDistribution)
					LocalDocumentNumber					= TransactionNumber
					LocalControlDocumentNumber			= TransactionNumber
					if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
					and GLFinanceCodeBlock.GeneralLedgerChartAccount = CashLedgerPaymentRel.CompanyCashCode.CashAccount.GeneralLedgerChartAccount)
						invoke UpdateCashCodeFundBalance
							if (PrmVoidReopen)					
								invoked.AddToBalance	= true
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement
						and GLFinanceCodeBlock.FinanceDimension10 exists)
							LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
							LocalFinanceDimension10 = GLFinanceCodeBlock.FinanceDimension10
							if (CustodialDetailAmountRel exists)
								invoke UpdateDisbursements CustodialDetailAmountRel
									invoked.PrmDisbursements += GLTransactionAmount
								invoke Create CustodialActivity
									invoked.FinanceEnterpriseGroup  	 = CashManagementGroup
									invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
									invoked.CustodialPosting			 = LocalFinanceDimension10
									invoked.ActivityDate				 = PostDate 		 
									invoked.ActivityType 				 = 6
									invoked.DocumentNumber				 = TransactionNumber
									invoked.Description 				 = Description
									if (PrmVoidReopen)											
										invoked.Amount					 = GLTransactionAmount
									else
										invoked.Amount					 = GLTransactionAmount * -1
									invoked.CustodialCashCode			 = CashCode
									invoked.CustodialTransactionCode	 = CashLedgerGLDistribution.BankTransactionCode
									invoked.CashLedgerTransactionID		 = CashLedgerGLDistribution.TransactionIDNumber
									invoked.SourceRecord				 = CashLedgerSourceRecord
#endif

				if (!RecordType.CashLedgerPaymentDistribution)	
					BypassBudgetAndCommitmentProcessing	= true
				if (TaxCode entered
				and RecordType.CashLedgerPaymentDistribution)
					if (PrmVoidReopen)						
						LocalVoidReopen	= true
					include ProcessTaxHistory				
				invoke RecreateDistribution 
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.SequenceNumber	= CashLedgerPayment.LastDistributionSequence 
					if (!PrmVoidReopen)						
						invoked.DistributionToBankAmount  	*= -1 
						invoked.TaxableBankAmount			*= -1
					if (TaxCode entered)							
						invoked.GeneralLedgerSourceCode	= "AD"
						invoked.Description				= "VoidPayment"
						invoked.Reference				= "PaymentVoidStopPayUpdate"
					if (RecordType.APCashLedgerPaymentDistribution) 
						invoked.GeneralLedgerSourceCode	= "VP"
						invoked.Description				= "VoidPayment"
						invoked.Reference				= TransactionNumber
					invoked.RecordType					= "V" 
					invoked.Status 	 				 	= Status.Released 
					invoked.PostDate					= PrmVoidDate 
 			Exit Rules
                if (GLTransactionDetailRel exists)
					TransientFromCurrency = GLTransactionDetailRel.CurrencyCode				
					if (PrmVoidReopen)														
						GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount
						GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					else
						GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1	
						GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
						include ReverseReportCurrencyAmounts
					LocalCurrencyTable					= CashLedgerPayment.CurrencyTable			
					GLFinanceCodeBlock 					= GLTransactionDetailRel.FinanceCodeBlock   
					GLBaseAmount.UseDerivedCalculations	= true										
					LocalBoolean						= GLBaseAmount.DerivedCalculationsComplete	
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
                		fill in fields from GLTransactionDetailRel  
                		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.TransactionAmount 		= GLTransactionAmount	
						invoked.ReportCurrencyAmount	= GLBaseAmount                	
						invoked.TransactionDate			= PostDate
						invoked.PostingDate				= PrmVoidDate 
						invoked.Reference				= LocalCashLedgerGLDistribution.CashLedgerGLDistribution.Reference
						invoked.Description				= LocalCashLedgerGLDistribution.CashLedgerGLDistribution.Description
						if (LocalControlDocumentNumber entered)
							invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
							invoked.DocumentNumber		  	= LocalDocumentNumber		
            			invoked.GeneralLedgerEvent 	    = LocalCashLedgerGLDistribution.CashLedgerGLDistribution.GeneralLedgerSourceCode						
						invoked.JournalizeGroup			= GLTJournalizeGroup
					if (!BypassBudgetAndCommitmentProcessing)	
						VoidPaymentDistributions = true
						include ProcessBudgetAndCommitments							
						
		ReinstatePaymentDistributions is an Instance Action  
			default label is untranslatable
			restricted































		ReinstateEftDistributions is an Instance Action  
			default label is untranslatable
			restricted
			Parameters
				PrmTransactionIDNumber		is a TransactionIDNumber
			Action Rules
				NewTransactionIDNumber 		= PrmTransactionIDNumber

				LocalHeaderBusinessObjectRef	= reference to NewCashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
				LocalHeaderUniqueID				= NewCashLedgerElectronicFundsTransferTransactionRel.UniqueID
				LocalExchangeDate				= NewCashLedgerElectronicFundsTransferTransactionRel.TransactionDate	
				LocalPostingDate				= NewCashLedgerElectronicFundsTransferTransactionRel.TransactionDate
				if (TaxCode entered)	
					BypassUnitAndAmountEdit 	= true
				increment NewCashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
				invoke RecreateDistribution  
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.SequenceNumber		 = NewCashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
					invoked.Status 	 				 					 = Status.Unreleased 
					invoked.CashLedgerGLDistribution.TransactionIDNumber = NewTransactionIDNumber
					invoked.PostDate									 = LocalPostingDate	
 			Exit Rules
                if (GLTransactionDetailRel exists)
					invoke Unreleased.CreateUnreleasedGLTransDetailNoRules GLTransactionDetail		 
                		fill in fields from GLTransactionDetailRel   
                		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.JournalizeGroup			= "" 
						invoked.PostingDate			    = LocalPostingDate	
					BypassBudgetEditing = true			
					include ProcessBudgetAndCommitments	
					
		ReinstateRejectedCltDistributions is a Create Action  
			default label is untranslatable
			restricted
			bypass field rules
			Action Rules
				LocalExchangeDate					= CashLedgerTransactionRel.IssueDate
				LocalControlDocumentNumber 			= CashLedgerTransactionRel.TransactionNumber 
				LocalDocumentNumber		   			= CashLedgerTransactionRel.TransactionNumber
				LocalPostingDate					= CashLedgerTransactionRel.GeneralLedgerPostDate
				Company								= CashLedgerTransactionRel.Company
				if (TaxCode entered)	
					BypassUnitAndAmountEdit 		= true

				invoke CreateUnreleasedGLTransDetailNoRules GLTransactionDetail		 
					fill in fields from this instance
					invoked.OriginatingTransaction 	= reference to this instance
					invoked.FinanceEnterpriseGroup	= CashManagementGroup  
					invoked.CurrencyCode			= TransientFromCurrency	
					invoked.System					= "CB"
					invoked.Reference				= Reference
					invoked.Description			  	= Description		
					invoked.TransactionAmount		= GLTransactionAmount
					invoked.FinanceCodeBlock		= GLFinanceCodeBlock  
					invoked.ReportCurrencyAmount 	= GLBaseAmount 
	            	invoked.GeneralLedgerEvent 	    = "CL"
					invoked.AccountingEntity		= CashLedgerTransactionRel.Company.OrigCompany.AccountingEntity	
					invoked.TransactionDate			= LocalExchangeDate
					invoked.PostingDate				= LocalPostingDate
					invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
					invoked.DocumentNumber		  	= LocalDocumentNumber
					invoked.AutoReverse 			= false
					invoked.ReportCurrencyAmount.KeepRateOnly = false
					invoked.UnitsAmount				= TransientUnitsAmount	
				include	ReleaseGLTransactionDetail	
				increment CashLedgerTransactionRel.LastDistributionSequence
				CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence

												
		UpdateJournalizeGroup is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
			Action Rules 
				invoke UpdateJournalizeGroup GLTransactionDetailRel
					invoked.PrmJournalizeGroup		= PrmJournalizeGroup

		
		CreateGainLossDistrib is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				BypassStructureRelationEdit = true
				BypassUnitAndAmountEdit 	= true
				increment CashLedgerTransactionRel.LastDistributionSequence
				invoke Create this instance
					invoked.CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
					invoked.LocalHeaderBusinessObjectRef			= reference to CashLedgerTransactionRel.CashLedgerTransaction
					invoked.LocalHeaderUniqueID						= CashLedgerTransactionRel.UniqueID	
					invoked.LocalControlDocumentNumber				= CashLedgerTransactionRel.TransactionNumber
					invoked.LocalDocumentNumber						= CashLedgerTransactionRel.TransactionNumber
					invoked.LocalExchangeDate						= PostDate
					invoked.LocalPostingDate						= PostDate
					invoked.LocalGeneralLedgerEvent					= "AP"
					invoked.LocalReference							= Reference
					invoked.LocalDescription						= Description
					invoked.LocalKeepRateOnly						= false
					invoked.BypassStatusEdit						= true


		CreateFundHistoryDistribution is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				BypassStructureRelationEdit = true
				BypassUnitAndAmountEdit 	= true
				LocalKeepRateOnly			= false
			Exit Rules
				invoke History.CreateHistoryGLTransDetailNoRules GLTransactionDetail		 
					fill in fields from this instance
					invoked.OriginatingTransaction 				= reference to this instance
					invoked.FinanceEnterpriseGroup				= CashManagementGroup  
					invoked.CurrencyCode						= CashCode.Currency	
					invoked.System								= "CB"
					invoked.TransactionAmount					= GLTransactionAmount
					invoked.FinanceCodeBlock					= GLFinanceCodeBlock
					invoked.ReportCurrencyAmount 				= GLBaseAmount
					invoked.Reference							= Reference
					invoked.Description			  				= Description		
	            	invoked.GeneralLedgerEvent 	    			= GeneralLedgerSourceCode
					invoked.AccountingEntity					= CompanyAccountingEntity  
					invoked.TransactionDate						= PostDate
					invoked.PostingDate							= PostDate
					invoked.ControlDocumentNumber 				= LocalControlDocumentNumber
					invoked.DocumentNumber		  				= LocalDocumentNumber
					invoked.AutoReverse 						= false
					invoked.ReportCurrencyAmount.KeepRateOnly	= false
					invoked.JournalizeGroup						= GLTJournalizeGroup


		Update is an Update Action
			valid when (IsChangeValid) 
			Entrance Rules
				include CreateAndUpdateActionRules
				include SaveDocumentCurrencyTotals
				OldGLTransactionAmount	= GLTransactionDetailRel.TransactionAmount
			Action Rules
				TaxAccountingEntityHasValue = true
				if (TaxCode entered)
					if (TaxCode changed
					or  TaxAccountingEntity not = GLFinanceCodeBlock.ToAccountingEntity)
						initialize GLFinanceCodeBlock
						initialize GLTransactionAmount
				include CalculateTax
				if (IsCashLedgerElectronicFundsTransferTransaction)
					DistributionToBankAmount = GLTransactionAmount	
				include LoadCBDefaults
			Exit Rules
				include UpdateGLTransactionDetail 
				LocalDocumentCurrencyTotals.NewCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount            

                if (IsCashLedgerReconciliationAdjustment
                and not CashLedgerReconciliationAdjustmentRel.Status.ReleasedReconciled)
					increment CashLedgerReconciliationAdjustmentRel.AppliedDistributionBankAmount by (GLTransactionAmount - OldGLTransactionAmount)	
					LocalDocumentCurrencyTotals.PerformUpdate	= true
					if (LocalDocumentCurrencyTotals.UpdateTotals)
						invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
							invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
				else							
				if (IsCashLedgerPayment)
					if (DistribUserFields changed)
						invoke UpdateTextSearchIndexes CashLedgerPaymentRel
				else
                if (IsCashLedgerTransaction)
					if (!CashLedgerTransactionRel.AmendedDistributions)	
						if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
							increment CashLedgerTransactionRel.AppliedDistributionBankAmount by ((GLTransactionAmount * -1) - (OldGLTransactionAmount * -1))
							include ReverseLocaLDocumentNewCurrencyTotals 
							LocalDocumentCurrencyTotals.PerformUpdate	= true 
							if (LocalDocumentCurrencyTotals.UpdateTotals)
								invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
									invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
						else
							increment CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount - OldGLTransactionAmount)
							LocalDocumentCurrencyTotals.PerformUpdate	= true
							if (LocalDocumentCurrencyTotals.UpdateTotals)
								invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
									invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
					if (DistribUserFields changed)
						invoke UpdateTextSearchIndexes CashLedgerTransactionRel									
				if (CashLedgerTransactionRel.AmendedDistributions)	
                    if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
                    	increment CashLedgerTransactionRel.AppliedDistributionBankAmount by ((GLTransactionAmount * -1) - (OldGLTransactionAmount * -1))
                		include ReverseLocaLDocumentNewCurrencyTotals 
                		LocalDocumentCurrencyTotals.PerformUpdate	= true 
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
                    else
                        increment CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount - OldGLTransactionAmount)
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals					
				if (CommitmentExists)
					LocalCashManagementGroup	= CashManagementGroup
					LocalSystemCode				= "CB"
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					and !BypassBudgetEditing)
						if (GLFinanceCodeBlock  != GLCommitRel.FinanceCodeBlock
						or  GLTransactionAmount != GLCommitRel.TransactionAmount
						or  GLBaseAmount 		!= GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
							invoke Delete BudgetEditErrorRel
							invoke PerformBudgetEdit
					invoke MaintainUnreleasedCommitment
				initialize GLBaseAmount
								                						
		FastUpdate is an Update Action	
			restricted
			bypass field rules
			
		Delete is a Delete Action
			valid when (IsChangeValid) 
			Entrance Rules
				if (IsCashLedgerPayment 
				or  IsCashLedgerReconciliationAdjustment 
				or  IsCashLedgerElectronicFundsTransferTransaction 
				or  IsCashLedgerTransaction)
					constraint (Status.Unreleased)
						"CannotDeleteReleasedDistribution"
				if (IsCashLedgerReconciliationAdjustment	
				and !CashLedgerTransactionRel.AmendedDistributions)
					include SaveDocumentCurrencyTotals
					decrement CashLedgerReconciliationAdjustmentRel.AppliedDistributionBankAmount by GLTransactionAmount																																																														
					LocalDocumentCurrencyTotals.PerformUpdate	= true
					if (LocalDocumentCurrencyTotals.UpdateTotals)
						invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
							invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
				else					
				if (IsCashLedgerTransaction	
				or CashLedgerTransactionRel.AmendedDistributions)
					include SaveDocumentCurrencyTotals											
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)										
						decrement CashLedgerTransactionRel.AppliedDistributionBankAmount by (GLTransactionAmount * -1)																																																														
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals						
					else
						decrement CashLedgerTransactionRel.AppliedDistributionBankAmount by GLTransactionAmount
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
				invoke DeleteCBCommitment							
			Action Rules
				if (GLTransactionDetailRel exist) 
					invoke Delete GLTransactionDetailRel					
			










		DeleteCBCommitment is an Instance Action 
			default label is untranslatable
			restricted
			Action Rules
				if (CommitmentExists)
					if (GLCommitRel.Status.Released)
                        invoke PurgeAPEncumbrance GLCommitRel
                    else
                        invoke Purge GLCommitRel
				if (BudgetErrorExists)
					invoke Delete BudgetEditErrorRel
										
		ReopenReconciledReleasedDistributions is a Delete Action	
			default label is untranslatable
			restricted
			valid when (Status.Released)
			Action Rules

				if (IsCashLedgerReconciliationAdjustment)
					LocalHeaderBusinessObjectRef			= reference to CashLedgerReconciliationAdjustmentRel.CashLedgerReconciliationAdjustment
					LocalHeaderUniqueID						= CashLedgerReconciliationAdjustmentRel.UniqueID	
					LocalExchangeDate						= CashLedgerTransactionRel.IssueDate

					if (RecordType.NotACashCodeDistribution)
						if  (GLTransactionDetailRel exist
						and	 GLTransactionDetailRel.TransactionAmount = CashLedgerReconciliationAdjustmentRel.ReconciliationData.CurrencyAmount)
							BypassBudgetAndCommitmentProcessing = true
						else		
							BypassBudgetEditing 				= true	
					else
						BypassBudgetAndCommitmentProcessing = true
				else
					BypassBudgetAndCommitmentProcessing 	= true

				if (GLTransactionDetailRel exist)

					GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1	
					GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					if (!BypassBudgetAndCommitmentProcessing)
						include ProcessBudgetAndCommitments

					invoke Released.Delete GLTransactionDetailRel
					
		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke PurgeValidSubLedgerTrx GLTransactionDetailRel

		ReopenReconciledPostedDistributions is an Instance Action  
			default label is untranslatable
			restricted
			Action Rules

				if (IsCashLedgerReconciliationAdjustment)
					LocalHeaderBusinessObjectRef			= reference to CashLedgerReconciliationAdjustmentRel.CashLedgerReconciliationAdjustment
					LocalHeaderUniqueID						= CashLedgerReconciliationAdjustmentRel.UniqueID	
					LocalExchangeDate						= CashLedgerTransactionRel.IssueDate

					if (RecordType.NotACashCodeDistribution)
						if  (GLTransactionDetailRel exist
						and	 GLTransactionDetailRel.TransactionAmount = CashLedgerReconciliationAdjustmentRel.ReconciliationData.CurrencyAmount)
							BypassBudgetAndCommitmentProcessing = true
						else		
							BypassBudgetEditing 				= true	
					else
						BypassBudgetAndCommitmentProcessing = true
				else
					BypassBudgetAndCommitmentProcessing 	= true

				if (TaxCode entered)	
					BypassUnitAndAmountEdit 				= true
				increment CashLedgerTransactionRel.LastDistributionSequence
				                
				if (IsCashLedgerPayment) 
					increment CashLedgerPaymentRel.LastDistributionSequence

				invoke RecreateDistribution 
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.SequenceNumber	= CashLedgerTransactionRel.LastDistributionSequence        						
					invoked.Status									= Status.Released
					invoked.DistributionToBankAmount 				= DistributionToBankAmount * -1
					if (PostDatePredatesPeriod)	
						invoked.PostDate							= CBCompanySystemClosingControlRel.ValidEntryDate.Begin
 			Exit Rules
                if (GLTransactionDetailRel exists)
                	GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1	
					GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
                		fill in fields from GLTransactionDetailRel
                			except invoked.JournalizeGroup			
                		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.TransactionAmount 		= GLTransactionAmount	
						invoked.ReportCurrencyAmount	= GLBaseAmount                													
					if (!BypassBudgetAndCommitmentProcessing)	
						ReopenReconDistributions = true				
						include ProcessBudgetAndCommitments
														
		DeleteReleaseErrorDistributions is a Delete Action		
			default label is untranslatable
			restricted
			Action Rules
				invoke DeleteCBCommitment
				invoke Released.Delete GLTransactionDetailRel

		VoidReleasedDistributions is a Delete Action	
			default label is untranslatable
			restricted
			valid when (Status.Released)
			Parameters
				PrmActionType					is Numeric 1	
					States
						VoidElectronicFundTransfer	value is 1
						VoidCashLedgerTransaction	value is 2	
				PrmEftOffsetFlag				is Boolean		
				PrmProcessingStaleDateDistribs	is Boolean		
			Action Rules
				if (!PrmProcessingStaleDateDistribs)	
					if (PrmActionType.VoidCashLedgerTransaction)	
						LocalHeaderBusinessObjectRef	= reference to CashLedgerTransactionRel.CashLedgerTransaction
						LocalHeaderUniqueID				= CashLedgerTransactionRel.UniqueID
						LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
						LocalPostingDate				= CashLedgerTransactionRel.GeneralLedgerPostDate
						if (RecordType.NotACashCodeDistribution)	
							BypassBudgetEditing = true	
						else
							BypassBudgetAndCommitmentProcessing = true
						if (RecordType.CashCodeDistribution
						and CashLedgerTransactionRel.GLStaleDateDistributionsRel exists)
							BypassCashFundUpdate					= true
					else
						if (PrmActionType.VoidElectronicFundTransfer)
							LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
							LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID
							LocalExchangeDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate	
							LocalPostingDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
							if (PrmEftOffsetFlag)	
								BypassBudgetAndCommitmentProcessing = true
							else
								BypassBudgetEditing = true	
				if (GLTransactionDetailRel exist)
					invoke DeleteCBCommitment
					invoke Released.Delete GLTransactionDetailRel
					if (RecordType.WireTransferDistribution)	
						if (WireTransferBatchDetailDistributionRel exists)
							invoke VoidReleasedDistributions first WireTransferBatchDetailDistributionRel

		VoidPostedDistributions is an Instance Action  
			default label is untranslatable
			restricted
			Parameters
				PrmActionType					is Numeric 1
					States
						VoidElectronicFundTransfer	value is 1
						VoidCashLedgerTransaction	value is 2	
				PrmVoidDate						is Date
				PrmStaleDate					is Date
				PrmStaleDateAccount				is like FinanceCodeBlock
				PrmEftOffsetFlag				is Boolean	
				PrmProcessingStaleDateDistribs	is Boolean	
				
			Action Rules
				BypassUnitAndAmountEdit 	= true
				LocalVoidDate				= PrmVoidDate	
				if (!PrmProcessingStaleDateDistribs)	
					if (PrmActionType.VoidCashLedgerTransaction)	
						LocalHeaderBusinessObjectRef	= reference to CashLedgerTransactionRel.CashLedgerTransaction
						LocalHeaderUniqueID				= CashLedgerTransactionRel.UniqueID
						LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
						LocalPostingDate				= CashLedgerTransactionRel.GeneralLedgerPostDate
						if (RecordType.NotACashCodeDistribution)	
							BypassBudgetEditing = true	
						else
							BypassBudgetAndCommitmentProcessing = true
					else
						if (PrmActionType.VoidElectronicFundTransfer)
							LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
							LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID
							LocalExchangeDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate	
							LocalPostingDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
							if (PrmEftOffsetFlag)	
								BypassBudgetAndCommitmentProcessing = true
							else
								BypassBudgetEditing = true
				if (PrmActionType.VoidCashLedgerTransaction)
					increment CashLedgerTransactionRel.LastDistributionSequence
				else	
					if (PrmActionType.VoidElectronicFundTransfer)
						increment CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
						if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting			
						and GLFinanceCodeBlock.GeneralLedgerChartAccount = CashLedgerElectronicFundsTransferTransactionRel.CompanyCashCode.CashAccount.GeneralLedgerChartAccount)
							invoke UpdateCashCodeFundBalance
				if (TaxCode entered)
					CashLedgerVoidUpdate 	= true
					GLFinanceCodeBlock		= GLTransactionDetailRel.FinanceCodeBlock
					GLTransactionAmount		= GLTransactionDetailRel.TransactionAmount
					BypassUnitAndAmountEdit = true	
					include ProcessTaxHistory
				invoke RecreateDistribution 
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					if (PrmActionType.VoidCashLedgerTransaction)		
						invoked.CashLedgerGLDistribution.SequenceNumber		= CashLedgerTransactionRel.LastDistributionSequence        						
						invoked.Status										= Status.Released	
						invoked.DistributionToBankAmount 					= DistributionToBankAmount * -1
						invoked.CashLedgerGLDistribution.DistributionType	= DistType.CashLedgerVoidUpdate //"V"
						invoked.Reference									= "CashLedgerVoidUpdate"
						invoked.PostDate 									= PrmVoidDate
						if (RecordType.CashCodeDistribution
						and CashLedgerTransactionRel.GLStaleDateDistributionsRel exists)
							invoked.BypassCashFundUpdate					= true
					else		
						if (PrmActionType.VoidElectronicFundTransfer)
							invoked.CashLedgerGLDistribution.SequenceNumber		= CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence        						
							invoked.Status										= Status.Released	
							invoked.DistributionToBankAmount 					= DistributionToBankAmount * -1
							invoked.CashLedgerGLDistribution.DistributionType	= DistType.CashLedgerVoidUpdate //"V"
							invoked.Reference									= "CashLedgerVoidUpdate"
							invoked.PostDate 									= PrmVoidDate
							
 			Exit Rules
                if (GLTransactionDetailRel exists)
                	GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1	
					GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
                		fill in fields from GLTransactionDetailRel  
                		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.TransactionAmount 		= GLTransactionAmount	
						invoked.ReportCurrencyAmount	= GLBaseAmount 
						invoked.PostingDate				= LocalCashLedgerGLDistribution.PostDate
						invoked.Reference				= "CashLedgerVoidUpdate"
						invoked.JournalizeGroup			= ""
						if (PrmStaleDate entered
						and RecordType.CashCodeDistribution)
							invoked.FinanceCodeBlock	= PrmStaleDateAccount
					if (!PrmProcessingStaleDateDistribs) 
						if (!BypassBudgetAndCommitmentProcessing)	
							if (PrmActionType.VoidElectronicFundTransfer)
								VoidEFTDistributions = true
							else		
								VoidPaymentDistributions = true
							include ProcessBudgetAndCommitments
					if (RecordType.WireTransferDistribution)	
						if (WireTransferBatchDetailDistributionRel exists)
							invoke CreateReleasedDistributionForVoid first WireTransferBatchDetailDistributionRel
								invoked.PrmBusinessObjectKey 	= LocalCashLedgerGLDistribution.UniqueID
															 
		RecreateDistribution is a Create Action
			default label is untranslatable
			restricted
			bypass field rules

		Release is an Instance Action
            default label is untranslatable
            restricted
            Action Rules
				include ReleaseGLTransactionDetail
                Status = Status.Released
                if (TaxCode entered) 
                	if (IsCashLedgerTransaction 
                	or  IsCashLedgerReconciliationAdjustment 
                	or  IsCashLedgerReturnedPayment 
                	or  IsCashLedgerElectronicFundsTransferTransaction)
                    	include ProcessTaxHistory

		InterfaceAsPosted is an Instance Action	
            default label is untranslatable
            restricted
            Action Rules
                if (GLTransactionDetailRel exist)
					invoke Released.UpdateToHistory GLTransactionDetailRel
                Status = Status.Posted
                    	











		CancelPaymentDistributionsSetAction is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup 		is a CashManagementGroup	
                PrmCashCode					is a CashCode
                PrmCashLedgerSourceRecord	is a CashLedgerSourceRecord
                PrmBankTransactionCode 		is a BankTransactionCode
                PrmTransactionIDNumber 		is like TransactionIDNumber
				PrmLastDistributionSequence	is a SequenceNumber	
				
			Instance Selection
				where (CashManagementGroup 							= PrmCashManagementGroup	
                and    CashCode										= PrmCashCode
                and    CashLedgerSourceRecord						= PrmCashLedgerSourceRecord
                and    CashLedgerGLDistribution.BankTransactionCode = PrmBankTransactionCode
                and    CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
                and    CashLedgerGLDistribution.SequenceNumber	   <= PrmLastDistributionSequence)	
                
			Action Rules
				Instance Rules
					invoke CancelPaymentDistributions
						
			
        CancelPaymentDistributions is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules
				LocalHeaderBusinessObjectRef	= reference to CashLedgerPaymentRel.CashLedgerPayment
				LocalHeaderUniqueID				= CashLedgerPaymentRel.UniqueID
				LocalDocumentNumber		   		= CashLedgerPaymentRel.Reference
				LocalExchangeDate				= CashLedgerPaymentRel.PostDate
				if (RecordType.CashLedgerPaymentDistribution)
					BypassBudgetEditing = true
				if (RecordType.OffsetCashLedgerPaymentDistribution)
					BypassBudgetAndCommitmentProcessing = true
				if (TaxCode entered)	
					BypassUnitAndAmountEdit				= true	
			Action Rules
				increment CashLedgerPaymentRel.LastDistributionSequence
				invoke CreateReversePaymentDistribution CashLedgerGLDistribution
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence
				    invoked.RecordType								= RecordType.OffsetCashLedgerPaymentDistribution
					invoked.Status 	 								= Status.Released
					invoked.Reference                               = "CashLedgerPayment"
					invoked.DistributionToBankAmount  				= DistributionToBankAmount * -1
					invoked.TaxableBankAmount						= TaxableBankAmount * -1
 			Exit Rules
                if (GLTransactionDetailRel exists)
                	GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1
					GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
	            		fill in fields from GLTransactionDetailRel
	            			except invoked.JournalizeGroup			
	            		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.Status					= Status.Released
						invoked.TransactionAmount 		= GLTransactionAmount  
						invoked.ReportCurrencyAmount	= GLBaseAmount                													
					if (!BypassBudgetAndCommitmentProcessing)
						CancelPaymentDistributions = true
						include ProcessBudgetAndCommitments	


								
		CreateReversePaymentDistribution is a Create Action 
			default label is untranslatable
			restricted
			bypass field rules

        CancelEFTDistributions is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmEftOffsetFlag				is Boolean
			Entrance Rules
				LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
				LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID
				LocalDocumentNumber		   		= CashLedgerElectronicFundsTransferTransactionRel.Reference
				LocalExchangeDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
				BypassBudgetEditing 			= true
				if (PrmEftOffsetFlag)
					BypassBudgetAndCommitmentProcessing = true
				if (TaxCode entered)	
					BypassUnitAndAmountEdit				= true	
			Action Rules
				increment CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
				invoke CreateReverseEFTDistribution CashLedgerGLDistribution
					assign result to LocalCashLedgerGLDistribution
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.SequenceNumber = CashLedgerElectronicFundsTransferTransactionRel.LastDistributionSequence
				    invoked.RecordType								= RecordType.EftPaymentDistribution	
					invoked.Status 	 								= Status.Released
					invoked.Reference                               = "EftCcExtractEntry"
					invoked.DistributionToBankAmount  				= DistributionToBankAmount * -1
					invoked.TaxableBankAmount						= TaxableBankAmount * -1
 			Exit Rules
                if (GLTransactionDetailRel exists)
                	GLTransactionAmount	= GLTransactionDetailRel.TransactionAmount * -1
					GLBaseAmount 		= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail		 
	            		fill in fields from GLTransactionDetailRel
	            			except invoked.JournalizeGroup			
	            		invoked.OriginatingTransaction 	= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution       						
						invoked.Status					= Status.Released
						invoked.TransactionAmount 		= GLTransactionAmount  
						invoked.ReportCurrencyAmount	= GLBaseAmount                													
					if (!BypassBudgetAndCommitmentProcessing)
						CancelEFTDistributions	= true	
						include ProcessBudgetAndCommitments	
								
		CreateReverseEFTDistribution is a Create Action 
			default label is untranslatable
			restricted
			bypass field rules







						





				
		CreateReconcileAcctDistribution is a Create Action  
			default label is untranslatable
			restricted
			Action Rules

				LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
				LocalCurrencyTable				= CashLedgerTransactionRel.CurrencyTable		
				if (IsCashLedgerReconciliationAdjustment)

					LocalControlDocumentNumber 	= CashLedgerReconciliationAdjustmentRel.TransactionNumber 
					LocalDocumentNumber		   	= CashLedgerReconciliationAdjustmentRel.TransactionNumber
					if (ReconcileGeneralLedgerEntry)	
						LocalPostingDate		= PostDate
					else	
						LocalPostingDate		= CashLedgerReconciliationAdjustmentRel.PostDate
					Company						= CashLedgerReconciliationAdjustmentRel.Company
				else


					LocalControlDocumentNumber 	= CashLedgerTransactionRel.TransactionNumber 
					LocalDocumentNumber		   	= CashLedgerTransactionRel.TransactionNumber
					LocalPostingDate			= PostDate		




					Company						= CashLedgerTransactionRel.Company

			Exit Rules											
				invoke CreateUnreleasedGLTransDetailNoRules GLTransactionDetail		 
					fill in fields from this instance
					invoked.OriginatingTransaction 	= reference to this instance
					invoked.FinanceEnterpriseGroup	= CashManagementGroup  
					invoked.CurrencyCode			= CashCode.Currency	
					invoked.System					= "CB"
					invoked.Reference				= Reference
					invoked.Description			  	= Description		
					invoked.TransactionAmount		= GLTransactionAmount
					invoked.FinanceCodeBlock		= GLFinanceCodeBlock  
					invoked.ReportCurrencyAmount 	= GLBaseAmount 
	            	invoked.GeneralLedgerEvent 	    = "CL"
					invoked.AccountingEntity		= CompanyAccountingEntity  

					invoked.TransactionDate			= LocalExchangeDate
					invoked.PostingDate				= LocalPostingDate
					invoked.ControlDocumentNumber 	= LocalControlDocumentNumber
					invoked.DocumentNumber		  	= LocalDocumentNumber
					invoked.AutoReverse 			= false
					invoked.ReportCurrencyAmount.KeepRateOnly = false
					invoked.UnitsAmount				= TransientUnitsAmount	
				include	ReleaseGLTransactionDetail	
                if (IsCashLedgerPayment)	
                	increment CashLedgerPaymentRel.LastDistributionSequence
                	CashLedgerGLDistribution.SequenceNumber = CashLedgerPaymentRel.LastDistributionSequence
                	increment CashLedgerTransactionRel.LastDistributionSequence
				else
					increment CashLedgerTransactionRel.LastDistributionSequence
					CashLedgerGLDistribution.SequenceNumber = CashLedgerTransactionRel.LastDistributionSequence
				initialize GLBaseAmount									

		UpdateAllDistributions is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmTransactionNumber				is like TransactionNumber
				PrmTransactionNumberChanged			is Boolean
				PrmRecalcAmounts					is Boolean
			Action Rules
				if (PrmTransactionNumberChanged)
					TransactionNumber 	= PrmTransactionNumber
				if (PrmRecalcAmounts)
					invoke RecalcCurrencyAmountsForAllDistributions
				else
					include LoadCBDefaults
					include UpdateGLTransactionDetail
					 	




		RecalcCurrencyAmountsForAllDistributions is an Instance Action
            default label is untranslatable
            restricted
            Action Rules
				LocalRecalcCurrencyAmountForAllDistribs = true
            	include LoadCBDefaults
				if (IsCashLedgerReconciliationAdjustment)
					PostDate = CashLedgerReconciliationAdjustmentRel.PostDate
					include SaveDocumentCurrencyTotals
					include UpdateGLTransactionDetail
					LocalDocumentCurrencyTotals.NewCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						include ReverseLocaLDocumentNewCurrencyTotals  
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals						
                    else
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals	
				else
				if (IsCashLedgerElectronicFundsTransferTransaction)
					PostDate = CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
					include UpdateGLTransactionDetail		
				else
				if (IsCashLedgerReturnedPayment)
					PostDate = CashLedgerReturnedPaymentRel.PostDate
					include UpdateGLTransactionDetail	
				else
				if (IsCashLedgerPayment)
					PostDate = CashLedgerPaymentRel.PostDate
					include UpdateGLTransactionDetail																			
				else
				if (IsCashLedgerTransaction)
					PostDate = CashLedgerTransactionRel.GeneralLedgerPostDate
					include SaveDocumentCurrencyTotals
					include UpdateGLTransactionDetail
					LocalDocumentCurrencyTotals.NewCurrencyAmount	= GLTransactionDetailRel.ReportCurrencyAmount
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						include ReverseLocaLDocumentNewCurrencyTotals 
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals						
                    else
						LocalDocumentCurrencyTotals.PerformUpdate	= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals
								



		AdjustDistributionCurrencyAmounts is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrencyAmountAdjustment	is a DocumentCurrencyTotals
			Action Rules
				include SaveDocumentCurrencyTotals
				initialize GLBaseAmount
				
				GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.FunctionalTotal
				GLBaseAmount.AlternateAmount.EnteredCurrencyAmount 		= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount   		+ PrmCurrencyAmountAdjustment.AlternateTotal
				GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.AlternateTotal2
				GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.AlternateTotal3





				GLBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal1
				GLBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal2
				GLBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal3
				GLBaseAmount.ReportAmount4.EnteredCurrencyAmount		= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal4
				GLBaseAmount.ReportAmount5.EnteredCurrencyAmount		= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal5
				
				if (IsCashLedgerReconciliationAdjustment)
					LocalCurrencyTable									= CashLedgerReconciliationAdjustmentRel.CurrencyTable
				if (IsCashLedgerElectronicFundsTransferTransaction)
					LocalCurrencyTable									= CashLedgerElectronicFundsTransferTransactionRel.CurrencyTable
				if (IsCashLedgerPayment)
					LocalCurrencyTable									= CashLedgerPaymentRel.CurrencyTable
				if (IsCashLedgerTransaction)	
					LocalCurrencyTable									= CashLedgerTransactionRel.CurrencyTable			
				if (TaxCode entered)	
					BypassUnitAndAmountEdit 							= true
				invoke Unreleased.Update GLTransactionDetailRel
					invoked.ReportCurrencyAmount 						= GLBaseAmount
					invoked.ReportCurrencyAmount.KeepRateOnly			= false
					invoked.BypassNegativeRateEdit						= true
				LocalDocumentCurrencyTotals.NewCurrencyAmount			= GLTransactionDetailRel.ReportCurrencyAmount												        			
				if (IsCashLedgerReconciliationAdjustment)
					LocalDocumentCurrencyTotals.PerformUpdate			= true
					if (LocalDocumentCurrencyTotals.UpdateTotals)
						invoke UpdateDocumentTotals CashLedgerReconciliationAdjustmentRel	 											 
							invoked.PrmDocumentCurrencyTotals 			= LocalDocumentCurrencyTotals
				else
				if (IsCashLedgerTransaction)			
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						include ReverseLocaLDocumentNewCurrencyTotals  
						LocalDocumentCurrencyTotals.PerformUpdate		= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals 		= LocalDocumentCurrencyTotals						
                    else
						LocalDocumentCurrencyTotals.PerformUpdate		= true
						if (LocalDocumentCurrencyTotals.UpdateTotals)
							invoke UpdateDocumentTotals CashLedgerTransactionRel	 											 
								invoked.PrmDocumentCurrencyTotals 		= LocalDocumentCurrencyTotals

		AddAmountsToExistingDistribution is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDistributionAmount	is like FinanceCurrencyAmountGroup
			Local Fields
				LocalCurrencyAmount			is a  CurrencyAmount
				LocalFinanceCurrencyAmount	is a  FinanceCurrencyAmount
			Action Rules
				TransientFromCurrency		= CashCode.Currency
				LocalExchangeDate		= PostDate
				initialize LocalFinanceCurrencyAmount
				LocalCurrencyAmount 									= GLTransactionDetailRel.TransactionAmount + PrmDistributionAmount.CurrencyAmount

				LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		+ PrmDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyRate 	= PrmDistributionAmount.FunctionalAmount.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount   		+ PrmDistributionAmount.AlternateAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyRate 		= PrmDistributionAmount.AlternateAmount.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		+ PrmDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyRate 	= PrmDistributionAmount.AlternateAmount2.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		+ PrmDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyRate 	= PrmDistributionAmount.AlternateAmount3.EnteredCurrencyRate
            	LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = GLTransactionDetailRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		+ PrmDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
            	LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate 	= PrmDistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount 	= GLTransactionDetailRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		+ PrmDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate 	= PrmDistributionAmount.ToAlternateAmount.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = GLTransactionDetailRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		+ PrmDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate 	= PrmDistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = GLTransactionDetailRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		+ PrmDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= PrmDistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 			+ PrmDistributionAmount.ProjectAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyRate	 	= PrmDistributionAmount.ProjectAmount.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			+ PrmDistributionAmount.ReportAmount1.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyRate	 	= PrmDistributionAmount.ReportAmount1.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			+ PrmDistributionAmount.ReportAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyRate	 	= PrmDistributionAmount.ReportAmount2.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	 	= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			+ PrmDistributionAmount.ReportAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyRate	 	= PrmDistributionAmount.ReportAmount3.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			+ PrmDistributionAmount.ReportAmount4.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= PrmDistributionAmount.ReportAmount4.EnteredCurrencyRate
				LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			+ PrmDistributionAmount.ReportAmount5.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= PrmDistributionAmount.ReportAmount5.EnteredCurrencyRate

				invoke History.Update GLTransactionDetailRel
					invoked.TransactionAmount							= LocalCurrencyAmount
					invoked.ReportCurrencyAmount 						= LocalFinanceCurrencyAmount
					invoked.ReportCurrencyAmount.KeepRateOnly			= false
					invoked.BypassNegativeRateEdit						= true
							
																											

		JournalizeDistributions is a Set Action		

			completion message is "<CompletionMessage>"


			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"					
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"	
				PrmCompany					is a Company
					default label is "Company"
				PrmGeneralLedgerCompanyGroup is a GeneralLedgerCompanyGroup
					default label is "CompanyGroup"
				PrmPostThruDate				is Date
					default label is "PostThruDate"
				PrmDescription				is a Description
					default label is "Description"

			Parameter Rules
				PrmCashManagementGroup
					initial value is CashManagementGroup
					required
				PrmCompany 	 
					constraint (PrmGeneralLedgerCompanyGroup not entered)
						"CompanyAnd_\Company_\GroupCannotBeEntered."
					if (PrmGeneralLedgerCompanyGroup not entered)
						required
							"CompanyOr_\Company_\GroupMustBeEntered."
				PrmGeneralLedgerCompanyGroup
					constraint (PrmCompany not entered)
						"CompanyAnd_\Company_\GroupCannotBeEntered."
					if (PrmCompany not entered)
						required
							"CompanyOr_\Company_\GroupMustBeEntered."
					LocalGeneralLedgerCompanyGroup = PrmGeneralLedgerCompanyGroup		
				PrmCashCode 	 
					constraint (PrmCashCodeGroup not entered)
						"Cash_\CodeAnd_\Cash_\Code_\GroupCannotBeEntered."
				PrmCashCodeGroup 
					constraint (PrmCashCode not entered)
						"Cash_\CodeAnd_\Cash_\Code_\GroupCannotBeEntered."
					LocalCashCodeGroup = PrmCashCodeGroup
				PrmPostThruDate		 
					required
				PrmDescription
					initial value is CashLedgerDistributionPostingMessage

			Local Fields
				CompletionMessage			is Alpha 150
				RecordCount					is Numeric 10
				MyJournalizeGroup			is a JournalizeGroup
				
			Instance Selection
				where (Status.Released
				and  ((PrmCompany entered
				and	   Company.OrigCompany		= PrmCompany)
				or    (PrmGeneralLedgerCompanyGroup	entered
				and    GLCompanyGroupMemberRelExists))
				and  ((PrmCashCode entered
				and	   CashCode		= PrmCashCode)
				or    (PrmCashCodeGroup	entered
				and    CashCodeGroupDetailRelExists)
				or    (PrmCashCode not entered
				and    PrmCashCodeGroup not entered))
				and    PostDate				   <= PrmPostThruDate

				and    GLTransactionDetailRel.JournalizeGroup not entered)

			Sort Order  
				Status
				Company
				CashCode
				PostDate

			Accumulators

				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "BankTransactionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
					
				Set Rules
					Entrance Rules
						initialize RecordCount
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalSystemCode 		 = "CB"
			            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
						MyJournalizeGroup 		 = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup						 

					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmCashManagementGroup.FinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup	= MyJournalizeGroup
							invoked.PrmJournalizeGroupDescription	= PrmDescription
						
						CompletionMessage = "BankTransactionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"
				
				Company Set Rules
				
				CashCode Set Rules
				
					Entrance Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalSystemCode 		 = "CB"




		 					
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup



													 					
				Instance Rules
					increment RecordCount
					if (GLTransactionDetailRel exist)
						invoke UpdateJournalizeGroup GLTransactionDetailRel	 
							invoked.PrmJournalizeGroup = MyJournalizeGroup  
						Status = Status.Posted
						
						if (RecordType.WireTransferDistribution)
							if (WireTransferBatchDetailDistributionRel exists)
								invoke UpdateReleasedDistributions WireTransferBatchDetailDistributionRel
			



		JournalizeDistributionsForGroup is a Set Action		

			completion message is "<CompletionMessage>"

			default label is "JournalizeDistributionsForGroup"

			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmDescription			is a Description
					default label is "Description"

			Parameter Rules
				PrmCashManagementGroup
					initial value is CashManagementGroup
					required
				PrmJournalizeGroup		 
					required
				PrmDescription
					initial value is CashLedgerDistributionPostingMessage

			Local Fields
				CompletionMessage			is Alpha 150
				RecordCount					is Numeric 10
				MyJournalizeGroup			is a JournalizeGroup
				
			Instance Selection
				where (Status.Released
				and    GLTransactionDetailRel.JournalizeGroup = PrmJournalizeGroup)
				
			Sort Order
				Status
				Company
				CashCode
				PostDate

			Accumulators

				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "BankTransactionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
					
				Set Rules
					Entrance Rules
						initialize RecordCount
						LocalCashManagementGroup 	= PrmCashManagementGroup
						LocalSystemCode 		 	= "CB"
						MyJournalizeGroup			= PrmJournalizeGroup

					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmCashManagementGroup.FinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup	= MyJournalizeGroup
							invoked.PrmJournalizeGroupDescription	= PrmDescription
						
						CompletionMessage = "BankTransactionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"
				
				CashCode Set Rules
				
					Entrance Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashCode			 = CashCode					
						LocalSystemCode 		 = "CB"
		 					
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashCode			 = CashCode	
													 					
				Instance Rules
					increment RecordCount
					if (GLTransactionDetailRel exist)
						Status = Status.Posted
			

		CreateCommitment is an Instance Action
			default label is untranslatable
			restricted
			Entrance Rules
			Exit Rules
				invoke CreateCommitment GLCommit
					invoked.HeaderUniqueID 					= LocalHeaderUniqueID
					invoked.AccountingEntity				= CompanyAccountingEntity
					invoked.FinanceEnterpriseGroup			= CashManagementGroup
					invoked.System							= "CB"
					invoked.FinanceCodeBlock				= GLFinanceCodeBlock
					invoked.CurrencyCode					= TransientFromCurrency	
					invoked.TransactionAmount				= GLTransactionAmount
					invoked.ReportCurrencyAmount			= GLBaseAmount     
					invoked.TransactionDate					= LocalExchangeDate
					if (CancelPaymentDistributions
					or  CancelEFTDistributions		
					or  VoidEFTDistributions		
					or  VoidPaymentDistributions	
					or  ReopenReconDistributions)	
						invoked.OriginatingTransaction		= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution
					else
						invoked.OriginatingTransaction		= reference to this instance
					invoked.DimensionCode					= GLFinanceCodeBlock.DimensionCode
					invoked.TransBusinessObjectRef			= LocalHeaderBusinessObjectRef
					invoked.PrmAllowRebuild                 = true		

		RecalculateCommitmentAmounts is an Instance Action				
			default label is untranslatable
			restricted
			Action Rules			
				if (CommitmentExists						
				and GLCommitRel.Status.Unreleased)			
					invoke Purge GLCommitRel
						invoked.PrmPurgeRecalculate = true
					include LoadCBDefaults					
					invoke CreateCommitment
					
		PerformBudgetEdit is an Instance Action
			default label is untranslatable
			restricted			
			Action Rules
				invoke CheckTransaction BudgetTemplate		
					invoked.PrmFinanceEnterpriseGroup   		= CashManagementGroup
					invoked.PrmBudgetEditGroup					= UniqueID
					invoked.PrmHeaderUniqueID                   = LocalHeaderUniqueID
					invoked.PrmTransactionCodeBlock				= GLFinanceCodeBlock
					invoked.PrmDate								= LocalPostingDate
					invoked.PrmReportAmounts.FunctionalAmount 	= GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount1      = GLBaseAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount2      = GLBaseAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount3      = GLBaseAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount4      = GLBaseAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount5      = GLBaseAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount    = GLBaseAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount2   = GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.AlternateAmount3   = GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount
    			if (BudgetErrorExists)
					confirmation required   
                    	"Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"

		MaintainUnreleasedCommitment is an Instance Action
			default label is untranslatable
			restricted
			Exit Rules
				invoke MaintainUnreleasedCommitment GLCommitRel
					invoked.TransactionAmount        = GLTransactionAmount
					invoked.ReportCurrencyAmount     = GLBaseAmount
					invoked.TransactionDate          = LocalPostingDate
					invoked.AccountingEntity         = CompanyAccountingEntity
					invoked.FinanceCodeBlock         = GLFinanceCodeBlock
					invoked.CurrencyCode             = TransientFromCurrency	

		Recreate is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashCode	is a CashCode
			Action Rules
				CashCode = PrmCashCode

		UpdateCashCodeFundBalance is an Instance Action
			default label is untranslatable
			restricted
			Parameters 
				AddToBalance	is Boolean
			Action Rules
				LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
				if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
				else
					LocalFinanceDimension1	= GLFinanceCodeBlock.FinanceDimension1
				if (CashCodeFundRel !exist)
					invoke Create CashCodeFundRel
						if (AddToBalance)
							invoked.PostedAmount = GLTransactionAmount
						else
							invoked.PostedAmount = GLTransactionAmount * -1
				else
					invoke UpdatePostedAmount CashCodeFundRel
						if (AddToBalance)
							invoked.PrmPostedAmount = GLTransactionAmount
						else
							invoked.PrmPostedAmount = GLTransactionAmount * -1
				
				
			









		UpdateCashLedgerSourceRecord is a Set Action		
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup

			Parameter Rules

			Local Fields
				LocalCashLedgerSourceRecord	is a CashLedgerSourceRecord
				
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    CashLedgerSourceRecord	!entered)

			Sort Order  
				CashManagementGroup
				CashCode
				CashLedgerSourceRecord
				CashLedgerGLDistribution.BankTransactionCode
            	CashLedgerGLDistribution.TransactionIDNumber
            	CashLedgerGLDistribution.DistributionType
            	CashLedgerGLDistribution.SequenceNumber

			Accumulators

				
			Action Rules								
				Empty Set Rules
					
				Set Rules
					Entrance Rules

					Exit Rules
				
				CashLedgerGLDistribution.TransactionIDNumber Set Rules
					Entrance Rules
						initialize LocalCashLedgerSourceRecord
				
													 					
				Instance Rules
					if (LocalCashLedgerSourceRecord !entered)
						if (RecordType.CashLedgerPaymentDistribution
						or  RecordType.OffsetCashLedgerPaymentDistribution)
							LocalCashLedgerSourceRecord	= "CBM"
						else
						if (CashLedgerElectronicFundsTransferTransactionRel exists)
							LocalCashLedgerSourceRecord	= "CFT"
						else
						if (CashLedgerReturnedPaymentRel exists)
							LocalCashLedgerSourceRecord	= "CRP"
						else
						if (CashLedgerTransactionRel.SourceCode = "AP")
							if (CashLedgerTransactionRel.SummaryOption.Summarized)
								LocalCashLedgerSourceRecord	= "CBT"
							else
								if (CashLedgerTransactionRel.Type.CashLedgerPayment)
									LocalCashLedgerSourceRecord	= "CBM"
								else
									LocalCashLedgerSourceRecord	= "CHK"
						else
							LocalCashLedgerSourceRecord	= "CBT"
					CashLedgerSourceRecord	= LocalCashLedgerSourceRecord
					
		UpdateReportCurrencyAmount is an Update Action
			default label is untranslatable
			restricted
			Action Rules

		MigrateCBCommitments is a Set Action
			valid when (CreatingCommitments)
			completion message is "<CompletionMessage>"
			run in background	 

			Parameters
				PrmCashManagementGroup	is a CashManagementGroup
				
			Parameter Rules
											
			Local Fields
				RecordCount					is Numeric 10
				LocalTranDate				is a ExchangeDate
				LocalCurrencyCode			is a FromCurrency	
				LocalTranAmount				is a CurrencyAmount
				CompletionMessage			is Alpha 150
				LocalGLCommitView			is a GLCommit view
				LocalMigrationResultView	is a MigrationResult view
				LocalErrorMessage 			is Alpha 150
				LocalErrorOccurred			is Boolean
				LocalMigrationJobType		is a MigrationJobType

			Instance Selection
				where (!GLCommitRel2 exists
				and	   (GltObjId entered
				or		AtnObjId entered)
				and	   ((PrmCashManagementGroup = CashManagementGroup
				and		 PrmCashManagementGroup entered)
				or		(!PrmCashManagementGroup entered)))

			Sort Order
				GltObjId
				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "CBCommitmentMigration;NoRecordsFoundToProcess"
				
					LocalMigrationJobType = MigrationJobType.MigrateCBCommitments
					include Migration.CreateMigrationResult
						replace POCompany with blank
						replace RQCompany with blank
						replace ContractGroup with blank
						replace Contract with blank
						replace CashManagementGroup with PrmCashManagementGroup
						replace PayablesCompany with blank
					invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Set Rules
					Entrance Rules
						LocalMigrationJobType = MigrationJobType.MigrateCBCommitments
						include Migration.CreateMigrationResult
							replace POCompany with blank
							replace RQCompany with blank
							replace ContractGroup with blank
							replace Contract with blank
							replace CashManagementGroup with PrmCashManagementGroup
							replace PayablesCompany with blank

					Exit Rules
						invoke SetAsCompleted LocalMigrationResultView.MigrationResult
							
				Instance Rules
					LocalErrorOccurred			= false

					if (IsCashLedgerReconciliationAdjustment)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerReconciliationAdjustmentRel.CashLedgerReconciliationAdjustment
						LocalHeaderUniqueID				= CashLedgerReconciliationAdjustmentRel.UniqueID
						LocalPostingDate				= CashLedgerReconciliationAdjustmentRel.PostDate
						LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
					if (CashLedgerCashReceiptHeader entered)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerCashReceiptHeaderRel.CashLedgerCashReceiptHeader
						LocalHeaderUniqueID				= CashLedgerCashReceiptHeaderRel.UniqueID	
						LocalExchangeDate				= CashLedgerCashReceiptHeaderRel.DepositDate
						LocalPostingDate				= CashLedgerCashReceiptHeaderRel.PostDate
					if (IsCashLedgerElectronicFundsTransferTransaction)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerElectronicFundsTransferTransactionRel.CashLedgerElectronicFundsTransferTransaction
						LocalHeaderUniqueID				= CashLedgerElectronicFundsTransferTransactionRel.UniqueID	
						LocalExchangeDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
						LocalPostingDate				= CashLedgerElectronicFundsTransferTransactionRel.TransactionDate
					if (IsCashLedgerReturnedPayment)
						if (ReturnedPaymentTransactionIDNumber entered)
							LocalHeaderBusinessObjectRef	= reference to CashLedgerReturnedPaymentForBankExpenseRel.CashLedgerReturnedPayment
							LocalHeaderUniqueID				= CashLedgerReturnedPaymentForBankExpenseRel.UniqueID	
							LocalExchangeDate				= CashLedgerReturnedPaymentForBankExpenseRel.ReturnDate
							LocalPostingDate				= CashLedgerReturnedPaymentForBankExpenseRel.PostDate
						else
							LocalHeaderBusinessObjectRef	= reference to CashLedgerReturnedPaymentRel.CashLedgerReturnedPayment
							LocalHeaderUniqueID				= CashLedgerReturnedPaymentRel.UniqueID	
							LocalExchangeDate				= CashLedgerReturnedPaymentRel.ReturnDate
							LocalPostingDate				= CashLedgerReturnedPaymentRel.PostDate
					if (IsCashLedgerPayment
					and !CreateFromBatchType.PaymentClose)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerPaymentRel.CashLedgerPayment
						LocalHeaderUniqueID				= CashLedgerPaymentRel.UniqueID
						LocalExchangeDate				= CashLedgerPaymentRel.PostDate
						LocalPostingDate				= CashLedgerPaymentRel.PostDate
					if (CashLedgerFundTransferDetail entered)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
						LocalHeaderUniqueID				= CashLedgerFundTransferHeaderRel.UniqueID	
						LocalExchangeDate				= CashLedgerFundTransferHeaderRel.TransferDate
						LocalPostingDate				= CashLedgerFundTransferHeaderRel.PostDate
					if (CashLedgerFundTransferHeader entered)
						LocalHeaderBusinessObjectRef	= reference to CashLedgerFundTransferHeaderRel.CashLedgerFundTransferHeader
						LocalHeaderUniqueID				= CashLedgerFundTransferHeaderRel.UniqueID	
						LocalExchangeDate				= CashLedgerFundTransferHeaderRel.TransferDate
						LocalPostingDate				= CashLedgerFundTransferHeaderRel.PostDate
					if (IsCashLedgerTransaction)	
						LocalHeaderBusinessObjectRef	= reference to CashLedgerTransactionRel.CashLedgerTransaction
						LocalHeaderUniqueID				= CashLedgerTransactionRel.UniqueID	
						LocalExchangeDate				= CashLedgerTransactionRel.IssueDate
						if (ReconcileGeneralLedgerEntry)	
							LocalPostingDate			= PostDate
						else
							LocalPostingDate			= CashLedgerTransactionRel.GeneralLedgerPostDate	

					LocalTranDate						= LocalExchangeDate		
					initialize LocalTranAmount
					if (GLCommitxRel exists
					and GLCommitxRel.TransactionAmount > 0)
						LocalTranAmount			= GLCommitxRel.TransactionAmount
					else
						if (!GltObjId entered
						and ACCommitxRel exists
						and ACCommitxRel.TransactionAmount > 0)
							LocalTranAmount		= ACCommitxRel.TransactionAmount
					LocalCurrencyCode			= TransientFromCurrency	
					if (LocalTranAmount entered)
						invoke UpdateReportCurrencyAmount
						invoke CreateCommitment GLCommit
							assign result to LocalGLCommitView
							resume on error
								LocalErrorMessage 					= error message
								LocalErrorOccurred					= true
							invoked.HeaderUniqueID 					= LocalHeaderUniqueID
							invoked.AccountingEntity				= CompanyAccountingEntity
							invoked.FinanceEnterpriseGroup			= CashManagementGroup
							invoked.System							= "CB"
							invoked.FinanceCodeBlock				= GLFinanceCodeBlock
							invoked.CurrencyCode					= LocalCurrencyCode	
							invoked.TransactionAmount				= LocalTranAmount
							invoked.ReportCurrencyAmount			= GLBaseAmount     
							invoked.TransactionDate					= LocalExchangeDate
							if (CancelPaymentDistributions
							or  CancelEFTDistributions)	
								invoked.OriginatingTransaction		= reference to LocalCashLedgerGLDistribution.CashLedgerGLDistribution
							else
								invoked.OriginatingTransaction		= reference to this instance
							invoked.DimensionCode					= GLFinanceCodeBlock.DimensionCode
							invoked.TransBusinessObjectRef			= LocalHeaderBusinessObjectRef
							if (GLCommitxRel exists
							or  ACCommitxRel exists)
								invoked.TransientMigrateAsReleased	= true

						include Migration.CreateMigrationResultDetail


		CreateReceiptFundAccountOffsets is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup 			is a CashManagementGroup	
                PrmCashCode						is a CashCode
		        PrmBankTransactionCode 			is a BankTransactionCode
		        PrmTransactionIDNumber 			is a TransactionIDNumber
				PrmCashLedgerSourceRecord		is a CashLedgerSourceRecord	//"CBT"
				PrmTransactionNumber 			is a TransactionNumber
				PrmCashLedgerCashReceiptHeader  is a CashLedgerCashReceiptHeader
				PrmJournalizeGroup				is like JournalizeGroup
				PrmInterfaceAsPosted 			is Boolean	
				
			Instance Selection
                where (CashManagementGroup							= PrmCashManagementGroup
                and    CashCode										= PrmCashCode
                and    CashLedgerSourceRecord						= PrmCashLedgerSourceRecord
                and    CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
                and    CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
				and	   RecordType.NotACashCodeDistribution)										
           
            Local Fields
				
			Action Rules
				Empty Set Rules
					
				Set Rules
					Entrance Rules
												
					Exit Rules
						invoke UpdateCashCodeFundBalancesByTransaction CashCodeFundConsolidatedUpdate
							invoked.PrmCashManagementGroup		= PrmCashManagementGroup
							invoked.PrmOriginatingTransaction	= reference to PrmCashLedgerCashReceiptHeader
			        	
				Instance Rules
					initialize LocalCalculateCashFinanceStructure
					LocalCalculateCashFinanceStructure.InputCashManagementGroup				= PrmCashManagementGroup
					LocalCalculateCashFinanceStructure.InputCashCode						= PrmCashCode
					LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= PrmCashLedgerSourceRecord
					LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= CashLedgerGLDistribution
					LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= GLFinanceCodeBlock
					LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
					if (CashLedgerGLDistribution.BankTransactionCode.AutomaticReconciliation 
					and PrmCashLedgerCashReceiptHeader.CompanyCashCode.ReconcileGeneralLedgerEntry)
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= PrmCashLedgerCashReceiptHeader.CompanyCashCode.ReconciliationAccount
					else
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= PrmCashLedgerCashReceiptHeader.CompanyCashCode.CashAccount
					LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					LocalDistribBankAmount		= GLTransactionAmount * -1
					LocalFinanceCurrencyAmount	= GLBaseAmount
					include ReverseReportCurrencyAmounts
					LocalBaseDistribAmount		= LocalFinanceCurrencyAmount

					invoke Create CashLedgerGLDistribution	
						fill in fields from PrmCashLedgerCashReceiptHeader
						invoked.CashCode										= PrmCashCode
						invoked.CashLedgerSourceRecord							= PrmCashLedgerSourceRecord
						invoked.CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
						invoked.TransactionNumber								= PrmTransactionNumber
						invoked.TransactionNumberSuffix							= 0
						invoked.GeneralLedgerSourceCode							= GeneralLedgerSourceCode
						invoked.Company											= PrmCashLedgerCashReceiptHeader.Company
						invoked.CashLedgerGLDistribution.DistributionType		= "E"
						invoked.RecordType										= CashLedgerDistribRecordType.CashCodeDistribution
						invoked.Status 											= 1
						invoked.PostDate										= PostDate
						invoked.GLFinanceCodeBlock								= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTransactionAmount								= LocalDistribBankAmount
						invoked.DistributionToBankAmount						= LocalDistribBankAmount
						invoked.GLBaseAmount									= LocalBaseDistribAmount
						invoked.Description										= Description
						invoked.ToTransactionCurrencyNumberOfDecimals			= TransactionCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals				= TransactionCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals					= BaseCurrencyNumberOfDecimals
						invoked.BaseCurrencyNumberOfDecimals					= BaseCurrencyNumberOfDecimals
						invoked.GLTJournalizeGroup								= PrmJournalizeGroup
						invoked.BypassStatusEdit								= true
						invoked.BypassCashFundUpdate							= true
						if (LocalDistribBankAmount entered)									
							invoked.BypassUnitAndAmountEdit						= false		
						else																
							invoked.BypassUnitAndAmountEdit						= true		
						if (PrmInterfaceAsPosted)
							invoked.SetToHistorical								= true		

					LocalAccountingEntity	= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
					if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
					else
						LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1
					invoke Create CashCodeFundConsolidatedUpdate
						invoked.CashManagementGroup		= CashManagementGroup
						invoked.OriginatingTransaction	= reference to PrmCashLedgerCashReceiptHeader
						invoked.CashCode				= CashCode
						invoked.AccountingEntity		= LocalAccountingEntity
						invoked.AccountingUnit			= LocalAccountingUnit
						invoked.FinanceDimension1		= LocalFinanceDimension1
						invoked.PostedAmount			= GLTransactionAmount * -1
						if (CashCodeFundEditByFundRel exists)
							invoked.CommittedAmount		= GLTransactionAmount * -1
								
		ReverseDistribution is an Instance Action 
			valid when (CanReverseDistribution)
			Parameters
				PrmPostDate		is Date
				NewAccount		is a FinanceCodeBlock
				
			Parameter Rules
				PrmPostDate
					initial value is CashLedgerTransaction.GeneralLedgerPostDate
					default to CashLedgerTransaction.GeneralLedgerPostDate
					required
						"PostDateIsRequired"
						
			Action Rules
				invoke UpdateAmendedDistributions CashLedgerTransactionRel
					invoked.PrmGeneralLedgerPostDate	= PrmPostDate
					invoked.PrmAmendedDistributions		= true
				
				invoke ReverseOriginalDistribution
					invoked.PrmReversalPostDate		= PrmPostDate
				
				if (NewAccount entered)
					invoke CreateAmendedDistribution				
						invoked.PrmAmendedPostDate	= PrmPostDate
						invoked.NewAccount			= NewAccount
		
		ReverseOriginalDistribution is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				PrmReversalPostDate		is Date
				
			Action Rules
				invoke Create CashLedgerGLDistribution
					fill in user fields from this instance
					fill in fields from this instance
						except invoked.GLBaseAmount
					invoked.CashLedgerGLDistribution.DistributionType	= "E" 
					invoked.BypassStatusEdit							= true
					invoked.Status										= 0 
					invoked.PostDate									= PrmReversalPostDate
					invoked.GLFinanceCodeBlock							= GLFinanceCodeBlock
					invoked.GLTransactionAmount							= (GLTransactionAmount * -1)

		CreateAmendedDistribution is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				PrmAmendedPostDate		is Date
				NewAccount				is a FinanceCodeBlock
				
			Action Rules
				invoke Create CashLedgerGLDistribution
					fill in user fields from this instance
					fill in fields from this instance
					invoked.CashLedgerGLDistribution.DistributionType	= "E" 
					invoked.BypassStatusEdit							= true
					invoked.Status										= 0 
					invoked.PostDate									= PrmAmendedPostDate
					invoked.GLFinanceCodeBlock							= NewAccount
					invoked.GLTransactionAmount							= GLTransactionAmount

		FrontEndSplitDistribtions is a Set Action 
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmCashLedgerSourceRecord			is a CashLedgerSourceRecord
				PrmBankTransactionCode				is a BankTransactionCode
				PrmTransactionIDNumber				is a TransactionIDNumber
        		PrmDistributionType    				is a DistType 
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
			Set Is
				PrmCashManagementGroup
				PrmCashCode
				PrmCashLedgerSourceRecord
				PrmBankTransactionCode
				PrmTransactionIDNumber
        		PrmDistributionType
			Local Fields
				LocalForEachSumFESAmount					is an InternationalAmount
				LocalCommitCounter							is Numeric size 3
			Rule Blocks
				AssignFEGAndFESKeyToLocal
					LocalFEGtext		= PrmCashManagementGroup.FinanceEnterpriseGroup
        			LocalDerivedFESKey	= "CB-"+PrmCashCode+"-"+PrmCashLedgerSourceRecord+""+PrmBankTransactionCode+"-"+PrmTransactionIDNumber+"-"+PrmDistributionType
			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	CashCode = PrmCashCode
				and	CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
				and	CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
				and	CashLedgerGLDistribution.DistributionType		= PrmDistributionType
				and Status.Unreleased
				and ((PrmCashLedgerSourceRecord.CashLedgerTransaction
				and RecordType.NotACashCodeDistribution)
				or (PrmCashLedgerSourceRecord.CashLedgerPayment
				and RecordType.CashLedgerPaymentDistribution))
				and TaxCode not entered
				and GLTransactionDetailRel exists
				and not GLTransactionDetailRel.CreatedByFES
				and GLTransactionDetailRel.FinanceCodeBlock.Project entered
				and GLTransactionDetailRel.TransactionAmount entered
				and GLTransactionDetailRel.FinanceCodeBlock.FinanceDimension2 not entered
				and !GLTransactionDetailRel.FinanceCodeBlock.Project.ExcludeFromFES
        		and GLTransactionDetailRel.FinanceCodeBlock.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Action Rules
				Empty Set Rules	
					display "FESCB:NothingToProcess"
				Set Rules
					Entrance Rules
						include AssignFEGAndFESKeyToLocal
						invoke Purge FESDistributionsByKeyLocalRel
						initialize LocalCommitCounter
					Exit Rules
						include AssignFEGAndFESKeyToLocal
						invoke Purge FESDistributionsByKeyLocalRel
						if (LocalCommitCounter > 0)
                			commit transaction
				Instance Rules
					include AssignFEGAndFESKeyToLocal
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= PrmCashManagementGroup
						invoked.PrmAccountingEntity				= GLTransactionDetailRel.AccountingEntity
						invoked.PrmDistribution					= CashLedgerGLDistribution.SequenceNumber
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= GLTransactionDetailRel.FinanceCodeBlock.TransactionAmount
						invoked.PrmDistributionAmountWithTax	= GLTransactionDetailRel.FinanceCodeBlock.TransactionAmount
						invoked.PrmTransactionDate				= GLTransactionDetailRel.TransactionDate
						invoked.PrmPostingDate					= GLTransactionDetailRel.PostingDate
						invoked.PrmTransactionCurrencyCode		= GLTransactionDetailRel.CurrencyCode
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= GLTransactionDetailRel.System
						invoked.PrmTransactionCodeBlock			= GLTransactionDetailRel.FinanceCodeBlock
					initialize LocalForEachSumFESAmount
					if(FESDistByDistributionRel exists)
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount += each.FESAmount
							invoke Create CashLedgerGLDistribution
								fill in user fields from this instance
								fill in fields from this instance
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.GLTransactionAmount		= each.FESAmount + (GLTransactionAmount - LocalForEachSumFESAmount)
								else
									invoked.GLTransactionAmount		= each.FESAmount
								invoked.GLFinanceCodeBlock							= each.CodeBlock
								invoked.CreatedByFES								= true
								invoked.BypassBudgetEditing							= true
							increment LocalCommitCounter
						if (LocalCommitCounter > 50)
							commit transaction
							initialize LocalCommitCounter
						invoke Delete 

		DeleteFrontEndSplitDistribtions is a Set Action 
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmCashLedgerSourceRecord			is a CashLedgerSourceRecord
				PrmBankTransactionCode				is a BankTransactionCode
				PrmTransactionIDNumber				is a TransactionIDNumber
        		PrmDistributionType    				is a DistType
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	CashCode = PrmCashCode
				and	CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
				and	CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
				and	CashLedgerGLDistribution.DistributionType		= PrmDistributionType
				and Status.Unreleased
				and ((PrmCashLedgerSourceRecord.CashLedgerTransaction
				and RecordType.NotACashCodeDistribution)
				or (PrmCashLedgerSourceRecord.CashLedgerPayment
				and RecordType.CashLedgerPaymentDistribution))
				and GLTransactionDetailRel exists
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Delete

		CreatePaymentOffsetDistributionBackground is a Set Action 		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmCashLedgerPayment				is a CashLedgerPayment
				PrmInputFinanceCodeBlock			is a FinanceCodeBlock
 
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmCashLedgerPayment
					required
				PrmInputFinanceCodeBlock
					required

			Local Fields

			Rule Blocks

			Instance Selection
				where (CashManagementGroup 							= PrmCashManagementGroup
				and	   CashCode										= PrmCashCode
				and    CashLedgerSourceRecord						= "CBM"
				and	   CashLedgerGLDistribution.BankTransactionCode	= PrmCashLedgerPayment.BankTransactionCode
				and	   CashLedgerGLDistribution.TransactionIDNumber	= PrmCashLedgerPayment.TransactionIDNumber
				and    RecordType.CashLedgerPaymentDistribution)

 			Action Rules

				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					if (GLTransactionDetailRel.JournalizeGroup	entered)	
						invoke Update GLTransactionDetailRel				
							initialize invoked.JournalizeGroup
					GLBaseAmount 							= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					initialize LocalCalculateCashFinanceStructure
					LocalCalculateCashFinanceStructure.InputCashManagementGroup				= CashManagementGroup
					LocalCalculateCashFinanceStructure.InputCashCode						= CashCode
					LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= CashLedgerSourceRecord
					LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= CashLedgerGLDistribution
					LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= CashLedgerGLDistribution.GLFinanceCodeBlock
					LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.OffsetCashLedgerPaymentDistribution
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= PrmInputFinanceCodeBlock
					LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					invoke Create CashLedgerGLDistribution
						fill in fields from PrmCashLedgerPayment
						invoked.CashManagementGroup										= PrmCashManagementGroup
						invoked.CashLedgerSourceRecord									= "CBM"
						invoked.CashLedgerGLDistribution.BankTransactionCode 			= PrmCashLedgerPayment.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 			= PrmCashLedgerPayment.TransactionIDNumber
						invoked.CashLedgerGLDistribution.DistributionType    			= "E"
						invoked.Company                                      			= Company
						invoked.CompanyAccountingEntity						 			= CompanyAccountingEntity
						invoked.RecordType									 			= CashLedgerDistribRecordType.OffsetCashLedgerPaymentDistribution
						invoked.Status 	 									 			= Status.Released
						invoked.Reference	                                 			= "PaymentDistribution"
						invoked.PostDate									 			= PostDate
						invoked.GLFinanceCodeBlock							 			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						invoked.TransactionNumber                            			= TransactionNumber
						invoked.GeneralLedgerSourceCode						 			= GeneralLedgerSourceCode
						invoked.GLTransactionAmount    					     			= GLTransactionAmount * -1
						invoked.DistributionToBankAmount  				     			= GLTransactionAmount * -1
						invoked.GLBaseAmount											= GLBaseAmount
						invoked.BaseCurrencyNumberOfDecimals				 			= BaseCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals				 			= ToBaseCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 			= TransactionCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 			= ToTransactionCurrencyNumberOfDecimals
						invoked.BypassStatusEdit							 			= true

		CreateTransactionOffsetDistributionBackground is a Set Action 		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmBankTransactionCode              is a BankTransactionCode
				PrmCashLedgerSourceRecord           is a CashLedgerSourceRecord
				PrmCashLedgerTransaction			is a CashLedgerTransaction
				PrmInputFinanceCodeBlock			is a FinanceCodeBlock
				PrmBypassCashFundUpdate				is Boolean
 
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmCashLedgerTransaction
					required
				PrmInputFinanceCodeBlock
					required

			Local Fields

			Rule Blocks

			Instance Selection
				where (CashManagementGroup 							= PrmCashManagementGroup
				and	   CashCode										= PrmCashCode
				and    CashLedgerSourceRecord						= PrmCashLedgerSourceRecord
				and	   CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
				and	   CashLedgerGLDistribution.TransactionIDNumber	= PrmCashLedgerTransaction
				and    CashLedgerGLDistribution.DistributionType	= "E"
				and    RecordType.NotACashCodeDistribution)

 			Action Rules

				Set Rules
					Entrance Rules

					Exit Rules
						if (!PrmBypassCashFundUpdate)
							invoke UpdateCashCodeFundBalancesByTransaction CashCodeFundConsolidatedUpdate
								invoked.PrmCashManagementGroup		= PrmCashManagementGroup
								invoked.PrmOriginatingTransaction	= reference to PrmCashLedgerTransaction

				Instance Rules
					if (GLTransactionDetailRel.JournalizeGroup	entered)	
						invoke Update GLTransactionDetailRel				
							initialize invoked.JournalizeGroup
					GLBaseAmount 							= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts
					initialize LocalCalculateCashFinanceStructure
					LocalCalculateCashFinanceStructure.InputCashManagementGroup				= CashManagementGroup
					LocalCalculateCashFinanceStructure.InputCashCode						= CashCode
					LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= CashLedgerSourceRecord
					LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= CashLedgerGLDistribution
					LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= CashLedgerGLDistribution.GLFinanceCodeBlock
					LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= PrmInputFinanceCodeBlock
					LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					invoke Create CashLedgerGLDistribution
						fill in fields from PrmCashLedgerTransaction
						invoked.CashManagementGroup										= PrmCashManagementGroup
						invoked.CashLedgerSourceRecord									= PrmCashLedgerSourceRecord
						invoked.CashLedgerGLDistribution.BankTransactionCode 			= PrmBankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 			= PrmCashLedgerTransaction
						invoked.CashLedgerGLDistribution.DistributionType    			= "E"
						invoked.Company                                      			= Company
						invoked.CompanyAccountingEntity						 			= CompanyAccountingEntity
						invoked.RecordType									 			= CashLedgerDistribRecordType.CashCodeDistribution
						invoked.Status 	 									 			= Status.Released
						invoked.PostDate									 			= PostDate
						invoked.GLFinanceCodeBlock							 			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						invoked.TransactionNumber                            			= TransactionNumber
						invoked.GeneralLedgerSourceCode						 			= GeneralLedgerSourceCode
						invoked.GLTransactionAmount    					     			= GLTransactionAmount * -1
						invoked.DistributionToBankAmount  				     			= GLTransactionAmount * -1
						invoked.GLBaseAmount											= GLBaseAmount
						invoked.BaseCurrencyNumberOfDecimals				 			= BaseCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals				 			= ToBaseCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 			= TransactionCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 			= ToTransactionCurrencyNumberOfDecimals
						invoked.CashLedgerTransactionOffsetDistrib						= true
						invoked.BypassStatusEdit							 			= true
						invoked.BypassCashFundUpdate									= true 

					if (!PrmBypassCashFundUpdate)
						LocalAccountingEntity	= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1
						invoke Create CashCodeFundConsolidatedUpdate
							invoked.CashManagementGroup		= CashManagementGroup
							invoked.OriginatingTransaction	= reference to PrmCashLedgerTransaction
							invoked.CashCode				= CashCode
							invoked.AccountingEntity		= LocalAccountingEntity
							invoked.AccountingUnit			= LocalAccountingUnit
							invoked.FinanceDimension1		= LocalFinanceDimension1
							invoked.PostedAmount			= GLTransactionAmount * -1
							if (CashCodeFundEditByFundRel exists)
								invoked.CommittedAmount		= GLTransactionAmount * -1

		CreateClosingDistribsBackground is a Set Action 		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashCode						is a CashCode
				PrmCashLedgerPayment			is a CashLedgerPayment
				PrmCodeBlock         			is like TransactionCodeBlock
				PrmTransactionNumber			is a TransactionNumber
				PrmPaymentDate					is Date
				PrmDescription					is a  Description 
				PrmJournalizeGroup       		is like JournalizeGroup
				PrmCreateFromBatchType			is Numeric 2  
				PrmAccountType					is Numeric 1
					States
						Expense				value is 1	
						Cash				value is 2	
				PrmRecordType					is a CashLedgerDistribRecordType
				PrmPayGroup						is like PayGroup

			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmCashLedgerPayment
					required
				PrmCodeBlock
					required

			Local Fields

			Rule Blocks

			Instance Selection
				where (CashManagementGroup 							= PrmCashManagementGroup
				and	   CashCode										= PrmCashCode
				and    CashLedgerSourceRecord						= "CBM"
				and	   CashLedgerGLDistribution.BankTransactionCode	= PrmCashLedgerPayment.BankTransactionCode
				and	   CashLedgerGLDistribution.TransactionIDNumber	= PrmCashLedgerPayment.TransactionIDNumber
				and    RecordType									= PrmRecordType)

 			Action Rules

				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					GLBaseAmount 							= GLTransactionDetailRel.ReportCurrencyAmount
					include ReverseReportCurrencyAmounts

					if (PrmAccountType.Cash)
						initialize LocalCalculateCashFinanceStructure
						LocalCalculateCashFinanceStructure.InputCashManagementGroup					= CashManagementGroup
						LocalCalculateCashFinanceStructure.InputCashCode							= CashCode
						LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord				= CashLedgerSourceRecord
						LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution			= CashLedgerGLDistribution
						LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock					= CashLedgerGLDistribution.GLFinanceCodeBlock
						LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType		= CashLedgerFinanceStructureType.CashCodeDistribution
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock					= PrmCodeBlock
						LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					invoke Create CashLedgerGLDistribution
						fill in fields from PrmCashLedgerPayment
						invoked.CashLedgerSourceRecord						 = "CBM"
						invoked.CashLedgerGLDistribution.BankTransactionCode = PrmCashLedgerPayment.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber = PrmCashLedgerPayment.TransactionIDNumber
						invoked.CashLedgerGLDistribution.DistributionType    = "E"
						invoked.Company                                      = Company
						invoked.RecordType									 = RecordType.APCashLedgerPaymentDistribution  
						invoked.Status 	 									 = Status.Released
						invoked.Reference                                    = PrmTransactionNumber
						invoked.Description									 = PrmDescription
						invoked.PostDate									 = PrmPaymentDate
						if (PrmAccountType.Cash)
							invoked.GLFinanceCodeBlock						 = LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						else
							invoked.GLFinanceCodeBlock						 = GLFinanceCodeBlock
						invoked.GeneralLedgerSourceCode						 = "AP"
						invoked.GLTransactionAmount    					     = GLTransactionAmount * -1
						invoked.DistributionToBankAmount  				     = GLTransactionAmount * -1
						invoked.GLBaseAmount					 		 	 = GLBaseAmount
						invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
						invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
						invoked.LocalControlDocumentNumber					 = PrmTransactionNumber
						invoked.LocalDocumentNumber							 = PrmTransactionNumber
						invoked.LocalExchangeDate							 = PrmPaymentDate
						invoked.LocalPostingDate							 = PrmPaymentDate
						invoked.LocalGeneralLedgerEvent						 = "AP"
						invoked.LocalCurrencyTable							 = PrmCashLedgerPayment.CurrencyTable
						invoked.BypassStatusEdit							 = true

					if (PrmAccountType.Cash)
						LocalAccountingEntity	= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1










						LocalOriginatingTransaction	= reference to PrmCashLedgerPayment
						invoke Create CashCodeFundConsolidatedUpdate
							invoked.CashManagementGroup		= CashManagementGroup
							invoked.PayGroup				= PrmPayGroup
							invoked.CashCode				= CashCode
							invoked.AccountingEntity		= LocalAccountingEntity
		 					invoked.AccountingUnit			= LocalAccountingUnit
							invoked.FinanceDimension1		= LocalFinanceDimension1
							invoked.PostedAmount			= GLTransactionAmount * -1
							if (CashCodeFundEditByFundRel exists)
								invoked.CommittedAmount		= GLTransactionAmount * -1
