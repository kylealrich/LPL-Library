Contract is a BusinessClass
	owned by po
	prefix is CNTR
	representative text is "<Name>_-_(<Contract>)"

	Ontology
		symbolic key is Contract

	Patterns
		implements CompoundDocument
			Document Components
				ContractLine set
				ContractTier set
				ContractTierMember set
				ContractTierQualifier set
				ContractArticle set
				ContractTermAndCondition set
				ContractRebate set

		implements StaticJava
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		implements BODId

	Persistent Fields
		ContractTemplateName				is a Description
		Name								is Alpha size 120
		Description							is Text
			text searchable
		VendorAgreementReference			is AlphaUpper size 30
		ContractType
		ContractSubtype
		PurchaseType
			protected
		AgreementType						is AlphaUpper size 1	
			States
				Contract		value is "C"
				Blanket			value is "B"
				Standing		value is "S"
				CatalogQuote	value is "T"
				Service			value is "V"
		ContractClassification
		ContractSubclassification
		Supplier
		SupplierSourceId
		Vendor
		ContractTemplate					is Boolean
		ProposalTemplate                    is Boolean 
		ProposedSupplierName                is a VendorName 
		ContractStatus						is Numeric size 2
			States
				Draft			value is 1
				Released		value is 2
				Negotiation		value is 3
				FinalApproval	value is 4
				ReadyToActivate	value is 5
				Active			value is 6
				Inactive		value is 7
				Addendum		value is 8
				Amendment		value is 9
				Closed			value is 10
		InMatrixApprovalProcess             is Boolean 
		FromMatrixApproval                  is Boolean 
		SupplierOriginatedContract			is Boolean
		ProposedContract					is Numeric size 1
			States
				NotApplicable			value is 0
				ProposedSubmitted		value is 1
				Accepted				value is 2
				Rejected				value is 3
				ProposedNotSubmitted	value is 4
		WorkingContractID					is AlphaUpper size 30
		WorkingContractType					is Numeric size 2
			States
				ChildContract					value is 11
				ContractInterfaceCreate			value is 10
				ContractInterfaceDistributor	value is 15
				ContractInterfaceUpdate			value is 12
				CopiedToContract                value is 16
				Distributor						value is 3
	 			GroupPurchasingOrganization		value is 4
				Manufacturer					value is 2
				ParentContract					value is 9
				PreviousContract				value is 6
				Project 						value is 7
				RecallNotice					value is 14
				Requisition						value is 13
				SourcingEvent					value is 5
				Supplier						value is 1
				VendorAgreement                 value is 8
		PreviousState						is Numeric size 2
			States
				Draft					value is 1
				Released				value is 2
				Negotiation				value is 3
				FinalApproval			value is 4
				ReadyToActivate			value is 5
				Active					value is 6
				Inactive				value is 7
				Addendum				value is 8
				Amendment				value is 9
				Closed					value is 10
				MatrixApproval          value is 11
		ApprovalStatus						is Numeric size 1
			States
				NeedsApproval	value is 1
				Approved		value is 2
				ApprovalDenied	value is 3
		NegotiationStatus					is Numeric size 1
			States
				NeedsNegotiation		value is 1
				Negotiated				value is 2
				NegotiationDenied		value is 3
				NeedsSupplierApproval	value is 4
				NeedsInternalApproval	value is 5
				NeedsFinalApproval		value is 6
		PreviousNegotiationStatus			is Numeric size 1
			States
				NeedsNegotiation		value is 1
				Negotiated				value is 2
				NegotiationDenied		value is 3
				NeedsSupplierApproval	value is 4
				NeedsInternalApproval	value is 5
				NeedsFinalApproval		value is 6
		FinalApprovalStatus					is Numeric size 1
			States
				NeedsApproval	value is 1
				Approved		value is 2
				ApprovalDenied	value is 3
		HasBeenActivated					is Boolean
		EffectiveDate						is Date
		ExpirationDate						is Date
		ContractReviewDate					is Date
		RenewalContract						is Boolean
		CurrencyCode                        is a Currency
		ProposedTotalContractAmount			is an UnsignedInternationalAmount
			precision is CurrencyCode.NumberOfDecimals
		MaximumAmount						is an UnsignedInternationalAmount
			default label is "LifetimeMaximumAmount"
			precision is CurrencyCode.NumberOfDecimals
		TotalChildMaximumAmount				is an InternationalAmount
		TotalLineMaximumAmount				is an InternationalAmount
		PreferredContract					is Boolean
		ApPoPurchaseFrom
		TermsCode
		ProcessLevelGroup
		PerOrderMinimumAmount				is an UnsignedInternationalAmount
		PerOrderMaximumAmount				is an UnsignedInternationalAmount
		NotificationPercent					is Percent size 7.3
		CommodityCode
		ManufacturerCodeDivision			is a Manufacturer
		LineLevelBreaks						is Numeric size 1
			States
				ContractTotals	value is 1
				OrderTotals		value is 2
		UOMSMustMatch						is Boolean
			default label is "UO\MsMustMatch_forItemmast"
		UOMSMustMatchForSpecials			is Boolean
			default label is "UO\MsMustMatch_forSpecials"
		UseContractUOM						is Boolean
			default label is "UseContractUOM_forItemmast"
		AllowReferenceOfItemsNotOnContract	is Boolean
			default label is "AllowReference_ofItemsNot_onContract"
		TaxCode
		DefaultTaxable						is Boolean
		DefaultAccount						is a RQHeaderDefaultCodeBlock
		CreateCommitments					is Numeric size 1
			States
				No				value is 0
				Header			value is 1
				Line			value is 2
				HeaderSpread	value is 3
				LineSpread		value is 4
		CommitmentCompany					is an AccountingEntity
		CommitmentAccount					is a TransactionCodeBlock
		CommitmentsClosed					is Boolean
		AllowIncompleteSpread               is Boolean
		ReportCurrencyAmount				is a FinanceCurrencyAmount
		GroupPurchasingOrganization
		Stockless							is Boolean
		Priority							is Numeric size 1
		ConsignCode
		Buyer
		ScheduleFrequency					is Numeric size 1
			States
				Weekly		value is 1
				BiWeekly	value is 2
				Monthly		value is 3
				Quarterly	value is 4
		MaximumReleaseNumber				is Numeric size 4
		LastReleaseDate						is Date
		LastPORelease						is a PORelease
		DoNotIssue							is Boolean	
		OnHold								is Boolean
		FreightTerm
		ShipTerm
		POCode
		LastArticleDisplayOrder				is a SequenceNumber
			disable Auditing
		LastQuestionDisplayOrder			is a SequenceNumber
			disable Auditing
		PoUserField1						is AlphaUpper size 1
		PoUserField3						is AlphaUpper size 10
		PoUserField5						is Alpha size 30
		PayablesDistributionCode
			default label is "DistributionCode"
		DistCodeGroupDefault				is a DistCodeGroup	
		BlanketStandingRequestingLocation	is a RequestingLocationGroup
			default label is "RequestingLocation"
		LifetimeEdit 						is Numeric size 1
			States
				PurchaseOrders			value is 2
				PurchaseOrdersAndReqs	value is 1
		RetainagePercentCompleteTracking	is Numeric size 1
			States
				NoRetainage	value is 0
				HeaderLevel	value is 1
				LineLevel	value is 2
		RetainagePercent1					is Percent size 5.2
		RetainageUpToPercent				is Percent size 5.2
		RetainagePercent2					is Percent size 5.2
		RetainageDueDays					is Numeric size 4
		RetainageOverridePercent			is Percent size 5.2
		RetainageInvoiceAmount				is an InternationalAmount
		ManufacturerOrDistributor
		CreateTermsNeeded					is Boolean
		ContractSource						is Numeric size 2
			States
				Interview		value is 1
				Manual			value is 2
				Copy			value is 3
				Event			value is 4
				Import			value is 5
				Template		value is 6
				Wizard			value is 7
				Supplier		value is 8
				NewItemProposal	value is 9
				Requester		value is 10
		ProposalRequester					is a Requester
		SpreadEdits	
			restricted
		AddendumExists						is Boolean
		AmendmentExists						is Boolean
		ContractDocumentTemplate
			default label is "DocumentTemplate"
		ContractIDMDocumentTemplate			is an IDMOutputSettings
			default label is "DocumentTemplate"
			protected
			restricted
		ArticleDisplayChange				is Boolean
		TierDisplayChange					is Boolean
		SourcingEligible					is Boolean
		ClosedDate							is Date
		FirstInvoiceAllowedDate				is Date
		LastInvoiceAllowedDate				is Date
		YellowAlert							is Numeric size 6
		RedAlert							is Numeric size 6
		EmailedSupplierDate					is Date
		ProcessPricingChanges				is Boolean
		EventTermsNeedToBeNegotiated		is Boolean
		EventTermsHaveBeenNegotiated		is Boolean
		ContractToHaveSubcontractors		is Boolean
		RemoveFromExpireList				is Boolean
		RemoveFromCostDifferenceList        is Boolean
		GPONegotiated						is Boolean
		GPOSupplier
		LastRebateCalculationRunDate		is TimeStamp
		DocMgmtSystemURL					is Alpha size up to 1000
			Text Variables
				ContractNumber value is Contract
		DiversityPctOfProposedTotal			is Percent size 5.2
		PaymentDueDays						is Numeric size 4
		ProcurementReasonCode
			default label is "ReasonForHold"
		TermNegotiationVersion				is a SequenceNumber
		LastNotificationEmail				is Numeric size 7
			disable Auditing
		IncludeAOCInMaxEdits				is Boolean
		IncludeTaxInMaxEdits				is Boolean
		AmountRequested						is an InternationalAmount
			disable Auditing
		AmountOrdered						is an InternationalAmount
			disable Auditing
		AddOnChargeAmountOrdered			is an InternationalAmount
			disable Auditing
		TaxAmountOrdered					is an InternationalAmount
			disable Auditing
		LastTierDisplayOrder				is a SequenceNumber
			disable Auditing
		Picture								is an ImageAttachment	
		BudgetEditProcessing				is Numeric size 1
			States
				NotInProcessing	value is 0
				InProcess		value is 1
				Failure			value is 2
				Success			value is 3
		DoNotDisplayToAll					is Boolean
			default label is "DoNotDisplayToAllSuppliers"
		SetActiveLineToAmendment			is Boolean
			default label is "ChangeToActiveContractLineSetsStatusToAmendment"
		YellowAlertEmailSent				is Boolean
		RedAlertEmailSent					is Boolean
		ContractSearchDocument				is Text
			text searchable
			disable Auditing
		ActivationInProgress				is Boolean
		AllowActiveUpdates                  is Boolean
		AllowChangeOrder                    is Boolean
		BackgroundGroupAsyncId				is an AsyncActionRequest	
			delete ignored
		UseIDM								is Boolean
			protected
			restricted
		IDMDocumentPID						is an DocumentPID  
			protected
			restricted
		IDMDocumentSequence					is Numeric size 3
			restricted
			protected
		UseIDMPerClassificationAndSubClass	is Boolean
			restricted
		IDMJob
		ContractDocumentIDMTemplate			is an IDMTemplate
			default label is "DocumentTemplate"
		EnableClinicalSystemUseLocations    is Boolean 
			default label is "ForClinicalUseSystems"
		CapitatedComponentsOnly             is Boolean 
		SubmittedTimestamp					is TimeStamp
		DaysToSubmit					is Numeric size 4
		AcceptedOrRejectedTimestamp			is TimeStamp
		DaysToAccept					is Numeric size 4
		ReleasedTimestamp					is TimeStamp
		DaysToRelease					is Numeric size 4
		InternalApprovalTimestamp			is TimeStamp
		DaysToInternalApprove			is Numeric size 4
		SupplierApprovalTimestamp			is TimeStamp
		DaysToSupplierApprove			is Numeric size 4
		NegotiationApprovalTimestamp		is TimeStamp
		DaysToApproveNegotiation		is Numeric size 4
		FinalApprovalTimestamp				is TimeStamp
		DaysToFinalApprove				is Numeric size 4
		ActivatedTimestamp					is TimeStamp
		DaysToActivate					is Numeric size 4
		DaysToActivateAfterCreation		is Numeric size 4

		ContractIDMXMLFile					is an Attachment
		PerformanceEvaluationTemplate
		EvaluationDate
		DaysToEvaluate					is Numeric size 4
		SupplierCanViewEvaluation		is Boolean

	Transient Fields
		StandardCommentCode
		CreateByCopy				is Boolean
		UseDisplayOrder				is Boolean
		PurchasingContact			is an Employee
		CreateFromLibrary			is Boolean
		SavedExchangeAmt			is an InternationalCost
		TransientUpdateSpecials		is Boolean
		TransientCopyAllLines		is Boolean
		TransientCRDAttachment		is a IDMAttachment
		TransientCurrencyTable		is a CurrencyTable
			derive value from ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
		TransientAccountingEntity	is an AccountingEntity
			derive value from CommitmentCompany
		TransientExchangeDate		is an ExchangeDate
		TransientFromCurrency		is a FromCurrency
		TransientCurrencyAmount		is a CurrencyAmount

		FromMassDelete				is Boolean
		FromInterfaceActivate		is Boolean
		TransientUsedAmount         is an InternationalAmount
		TransientProposalTemplate   is a Contract 
			default label is "TemplateForProposal"
		ViewVendorOrPurchaseFromLocation	is Numeric 1
			default label is "Vendor_orPurchaseFromLocation"
			derive value from ViewVendorOrPurchaseFromLocationDefaultValue
			States
				PurchaseFrom value is 0
				Vendor value is 1
		LocalForceCalculation       is Boolean

	Local Fields
		LocalEvaluationContactEmailAddressList		is Alpha 1000
		LocalEvaluationContactEmailAddressFound		is Boolean
		LocalPerformanceEvaluatorName				is Alpha 1000
		LocalPerformanceEvaluator					is Boolean
		LocalParticipantGroup						is a ParticipantGroup
		CheckQuestion								is a Question
		OriginalContractAndTier
		OriginalContractAndLine
		NewContractAndNewContractLine
		FromLineClose								is Boolean
		LocalContractRebate
		SavedContractLine							is Numeric size 6
		LocalSupplierSourceId                       is like SupplierSourceId 
		LocalName									is Alpha size 120
		LocalDescription							is Text
		LocalDefaultAccount                     	is a FinanceCodeBlock 
		BypassRequiredEdits
		BypassProjectDateEdit             
		LocalProposalTemplate                       is a Contract
		LocalProposalTemplateName                   is Alpha size 120
		LocalProposedSupplierName                   is a VendorName 
		LocalProposedContact                        is an Employee 
		LocalHasPrimaryContact                      is Boolean
		LocalSetPrimaryContactWithAddtionalSecurity is Boolean
		LocalVendor									is like Vendor
		LocalNewVendor								is like Vendor
		LocalNewPurchaseFrom						is like PurchaseFromLocation
		CreatedFromRenewAction						is Boolean
		LocalNewContact								is like Employee
		LocalCopyContractLines						is Boolean
		LocalCopySelectAll							is Boolean
		LocalCompanyTaxCodeCount					is Numeric 6
		LocalContractArticleForVersions				is like ContractArticle
		LocalContractTermAndConditionForVersions	is like ContractTermAndCondition
		LocalCurrentContractClassification			is AlphaUpper 50
		LocalOldUseSupplierPortalForNegotiations	is Boolean
		LocalOldRequireTermAndConditionApproval		is Boolean
		LocalComment								is Text
		LocalProxyEmailAddressList					is Alpha 1000
		LocalProxyEmailAddressFound					is Boolean
		LocalSecondaryContactEmailAddressList		is Alpha 1000
		LocalSecondaryContactEmailAddressFound		is Boolean
		LocalTaxEntity								is a TaxEntity
		LocalBudgetEditGroup						is UniqueID
		LocalAccountingEntity						is an AccountingEntity
		LocalPostingDate							is a PostingDate
		LocalChangeDates							is Boolean
		LocalAmountUpdateDate						is Date	
		LocalEffectiveDate							is Date
		LocalExpirationDate							is Date
		LocalAmountRemaining						is an InternationalAmount
		ConvertedAmount								is an InternationalAmount
		ConvertedTaxAmount							is an InternationalAmount
		ConvertedAddOnChargeAmount					is an InternationalAmount
		ConvertedRequestedAmount					is an InternationalAmount
		ConvertedInvoiceAmount						is an InternationalAmount
		ConvertedTotalAmount                        is an InternationalAmount
		CurrencyExchange						
		LocalProcurementTemplate					is like ProcurementTemplate
		LocalInternalChange							is Boolean
		LocalChangeCommitAccount					is Boolean
		LocalCloseCommitment						is Boolean
		LocalTier									is like ContractTier
		LocalContract								is Numeric size 15
		LocalDiversityCode							is a PayablesDiversityCode
		LocalOffContractTotaled						is Boolean
		LocalOnContractTotaled						is Boolean
		OffContractAmount							is an InternationalAmount
		OffContractQuantity							is a Quantity
		OnContractAmount							is an InternationalAmount
		OnContractQuantity							is a Quantity
		LocalFromCancelOrDelete						is Boolean
		LocalToContract								is a Contract
		LocalManufacturerContract                   is a Contract
		LocalActionCode								is an ActionCode
		LocalBODCurrentTimeStamp					is a BODCurrentTimeStamp
		LocalFinanceEnterpriseGroup 				is like FinanceEnterpriseGroup
		LocalCompany								is like Company
		BackgroundGroup								is AlphaUpper up to 50
		LocalEndDate								is a GeneralLedgerCalendarPeriod
		LocalLedger									is a Ledger
		LocalInventoryLocation						is like InventoryLocation
		LocalRequestingLocation						is like RequestingLocation
		LocalPurchaseFrom							is AlphaUpper size 4
		FromProposalReject							is Boolean
		LocalBODtrigger								is Boolean
		IDMAttributes
		LocalNotice									is a RecallNotice
		LocalIDMJob									is an IDMJob view
		IDMItem
		IDMSendEmail
 	  	LocalIDMItemDetailsExecuted					is Boolean
		LocalBidSupplier							is like Supplier
		LocalReleaseDistributorMembers				is Boolean
		LocalSupplier								is a Supplier
		LocalColSequence							is Numeric size 3
		LocalCloseContract							is Boolean
		LocalFromUpdateAmount						is Boolean
		AsyncId										is an AsyncActionRequest
		LocalExternalRelease                        is Boolean
		LocalPurgeCount								is Numeric 10
		LocalPurgeRecords							is Boolean
		LocalActor									is an Actor
		FromContractCopy							is Boolean
		FromDateChangeAction                        is Boolean
		LocalSpreadDate                             is Date
		LocalFromRecalculate                        is Boolean
		LocalPricingGroup 							is like PricingGroup 
		LocalPercentOrdered                         is Percent size 7.3
		LocalFromMatrixApproval                     is Boolean

		LocalNativeLPLBODTrigger					is Boolean


		LocalPulseAlertFrom							is Alpha size 100
		LocalPurchaseFromLocation					is Alpha size 22


		LocalContractLineCount						is Numeric 9
        LocalUserTemplate							is like UserTemplate
		LocalNativeBODLinesTrigger					is Boolean

		NewBODTracker  				is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker	is Numeric 15
		Error            			is Boolean
	    ErrorMessage     			is Alpha 300
		LocalConfigurationParameter	is Alpha size up to 200
		LocalFromSupplierChangeOrder 				is Boolean 
		LocalAEAlreadyExecuted		is Boolean
		LocalCrossAE				is Alpha size 100
		TimeStampInGMT
		LocalGenerateXMLFile		is Boolean
		IDMXMLDefinition
		AttributeCtr				is Numeric 2
		LocalExecute				is Boolean
		LocalGeneralLedgerSystemCode 				is a GeneralLedgerSystemCode		
		
	Context Fields
		ExpirationDateRange				is a DateRange
		EffectiveDateRange				is a DateRange
		ContextItem						is an Item
		ContextVendorItem				is a VendorItem
		SupplyManagementReportContext	is a SupplyManagementReport
		AccountingEntity
		AccountingUnit
		Account
		Project
		ContextEmployee					is an Employee
		FinanceDimension1
		FinanceDimension2
		FinanceDimension3
		FinanceDimension4
		FinanceDimension5
		FinanceDimension6
		FinanceDimension7
		FinanceDimension8
		FinanceDimension9
		FinanceDimension10
		PayablesInvoice
		ContractImportDistributor        is a Supplier
		ContractSupplier                 is a Supplier
		FSMInboundBODTracker
		ContextContract                  is a Contract 
		ContextContractTier              is a ContractTier 
		ContextContractTierQualifier     is a ContractTierQualifier

	Field Groups
		RevisionControlled
			Name
			ContractType
			ContractSubtype
			ContractClassification
			ContractSubclassification
			EffectiveDate

		ForTextSearch
			Contract
			Name
			Supplier
			WorkingContractID

	Dimensions
		Buyer
		ContractType
		Contract
			Attributes
				Name
				BudgetEditProcessing
				Vendor
				Supplier
				EffectiveDate
				ContractReviewDate
				ClosedDate
				ApprovalStatus
				ContractStatus
				NegotiationStatus
				FinalApprovalStatus
				ContractType
				ContractSubtype

		Supplier
			Attributes
				SupplierName

		Vendor

	Measures
		AmountRequested
		AmountOrdered
		AddOnChargeAmountOrdered
		TaxAmountOrdered

	Rule Blocks

		PEContactEmailAddress
			LocalEvaluationContactEmailAddressFound = false
			LocalEvaluationContactEmailAddressList = ""
			for each Contract.PerformanceEvaluationContactRel
				if (LocalEvaluationContactEmailAddressFound)
					LocalEvaluationContactEmailAddressList = LocalEvaluationContactEmailAddressList + "," + each.ContractAttachedContact.DerivedEmail
				else
					LocalEvaluationContactEmailAddressList = each.ContractAttachedContact.DerivedEmail
					LocalEvaluationContactEmailAddressFound = true

		NegotiationApprovalDays
			if (NegotiationApprovalTimestamp not entered)
				NegotiationApprovalTimestamp = current timestamp
			if (SupplierApprovalTimestamp date entered)
				DaysToApproveNegotiation = (NegotiationApprovalTimestamp date - SupplierApprovalTimestamp date)
			else
				if (InternalApprovalTimestamp date entered)
					DaysToApproveNegotiation = (NegotiationApprovalTimestamp date - InternalApprovalTimestamp date)
				else
					DaysToApproveNegotiation = (NegotiationApprovalTimestamp date - ReleasedTimestamp date)

		ClearProcessingDays
			initialize ReleasedTimestamp
			initialize DaysToRelease
			initialize InternalApprovalTimestamp
			initialize DaysToInternalApprove
			initialize SupplierApprovalTimestamp
			initialize DaysToSupplierApprove
			initialize NegotiationApprovalTimestamp
			initialize DaysToApproveNegotiation
			initialize FinalApprovalTimestamp
			initialize ActivatedTimestamp
			initialize DaysToActivate
			initialize DaysToActivateAfterCreation

		TriggerProcessContractRules
			trigger "ProcessContractService" PA service
				resume on error
				title is "EG:<LocalFinanceEnterpriseGroup>CG:<ContractGroup>CONTRACT:<Contract>"
				Criteria
					LocalFinanceEnterpriseGroup
					LocalCompany

				Variables
					LocalActionCode
						variable name is ActionCode
					include persistent fields from Contract
					bod id.VariationID
							variable name is BODVariationId
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					LocalAccountingEntity
						variable name is AccountingEntity
					LocalCompany
						variable name is Company

		TriggerContractRules
			trigger "ContractService" PA service
				resume on error
				title is "EG:<ContractGroup.BusinessGroup.FinanceEnterpriseGroup>CG:<ContractGroup>CONTRACT:<Contract>"
				Criteria
					LocalFinanceEnterpriseGroup
					LocalCompany

				Variables
					LocalActionCode
						variable name is ActionCode
					include persistent fields from Contract
					bod id.VariationID
						variable name is BODVariationId
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					LocalAccountingEntity
						variable name is AccountingEntity
					LocalCompany
						variable name is Company
					LocalContractLineCount
						variable name is ContractLineCount

		BuildTextIndexes
			build text search field ContractSearchDocument
				Fields
					Name
					Contract
					WorkingContractID
					PrimaryContact
					Supplier.SupplierName
					Supplier

		ManageCommitments

			if (GLCommitRel !exists
			and !CommitmentsClosed
			and UseHeaderOnlyCommitments)
				
				invoke CreateCommitment GLCommit
					invoked.FinanceEnterpriseGroup  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
					invoked.OriginatingTransaction  = reference to this instance
					invoked.System			 		= "PO"
					invoked.FinanceCodeBlock	 	= CommitmentAccount
					invoked.CurrencyCode		 	= CurrencyCode
					invoked.TransactionAmount       = ChangeOrderAmountRemaining
					invoked.ReportCurrencyAmount	= ReportCurrencyAmount
					invoked.TransactionDate		    = EffectiveDate
					invoked.IsContractManagement    = true
					invoked.AccountingEntity        = CommitmentCompany
					invoked.HeaderUniqueID          = UniqueID
					invoked.TransBusinessObjectRef	= reference to this instance
			else 
			if (ReleasedCommitmentExists
			or  HistoryCommitmentExists)
				if ((LocalInternalChange)
				or  (LocalFromRecalculate)
				or  (HistoryCommitmentExists
				and !LocalCloseCommitment
				and !LocalFromUpdateAmount))
					invoke ChangeReleasedCommitment GLCommitRel
						invoked.PrmChangedCurrAmount.FunctionalAmount 	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						invoked.PrmLastTransAmount                  	= ChangeOrderAmountRemaining
						invoked.PrmTransDate                            = EffectiveDate
						invoked.PrmChangedCurrAmount.ToFunctionalAmount = ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount  = ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount2 = ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount3 = ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						if (LocalChangeCommitAccount)
			   				invoked.PrmCodeBlock                        = CommitmentAccount
			   				invoked.PrmDimensionCode					= CommitmentAccount.DimensionCode		
						if (LocalFromCancelOrDelete = true
						and HistoryCommitmentExists)
							invoked.ParmIsCancelOrDelete = true
					if (ReleasedCommitmentExists
					and LocalChangeDates)  
						invoke UpdateToReleased GLCommit
							invoked.PrmFinanceEnterpriseGroup           = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.PrmUniqueID                         = UniqueID
							invoked.PrmAccountingEntity                 = CommitmentCompany	
							invoked.PrmFromPurchaseOrderInvoiceCancel   = true		

				else
				if  ((LocalCloseCommitment
				and  GLCommitRel.LastCurrAmountDiff !entered
				and  !HistoryCommitmentExists)
				or  !LocalCloseCommitment)
					if (LocalCloseCommitment)
						invoke UpdateTemplateTotals BudgetTemplate
							invoked.PrmFinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.PrmTransactionCodeBlock				= CommitmentAccount
							invoked.PrmDate					    		= GLCommitRel.EntityYearPeriod.Date
							invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.AlternateAmount3	= GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ToAlternateAmount3	= GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ProjectAmount		= GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ReportAmount3		= GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ReportAmount4		= GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.PrmReportAmounts.ReportAmount5		= GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.PrmBusinessClassName                = "Contract"
							invoked.PrmEditContext                      = "Close"
					invoke ModifyReleasedCommitment GLCommitRel in background
						run outside of action background group
						invoked.PrmTransactionAmount    	= ChangeOrderAmountRemaining
						invoked.PrmReportCurrencyAmount     = ReportCurrencyAmount
						invoked.PrmFromContractUpdate		= true
						invoked.PrmTransactionDate          = EffectiveDate
						invoked.PrmAccountingEntity         = CommitmentCompany
						invoked.PrmFinanceCodeBlock         = CommitmentAccount
						invoked.PrmCurrencyCode             = CurrencyCode
				else
				if  (LocalCloseCommitment
				and  GLCommitRel.LastCurrAmountDiff entered)
					invoke FreeUpAllocatedBudgetAmounts GLCommitRel

			else  
			if (UseHeaderOnlyCommitments)
				invoke MaintainUnreleasedCommitment GLCommitRel
					invoked.TransactionAmount    	 = ChangeOrderAmountRemaining
					invoked.ReportCurrencyAmount     = ReportCurrencyAmount
					invoked.TransactionDate          = EffectiveDate
					invoked.AccountingEntity         = CommitmentCompany
					invoked.FinanceCodeBlock         = CommitmentAccount
					invoked.CurrencyCode             = CurrencyCode

		IncomingCurrencyConversion

			if (InCurrency = Contract.CurrencyCode)
					ConvertedAmount            = InAmount
					ConvertedTaxAmount         = InTaxAmount
					ConvertedAddOnChargeAmount = InAddOnChargeAmount
					ConvertedRequestedAmount   = InRequestedAmount
					ConvertedInvoiceAmount     = InInvoiceAmount
			else
				initialize CurrencyExchange
				TransientExchangeDate                   = InTransactionDate
				TransientFromCurrency                   = InCurrency
				CurrencyExchange.ToCurrency 			= Contract.CurrencyCode
				if (InAmount != 0)
					TransientCurrencyAmount             = InAmount
					ConvertedAmount                     = CurrencyExchange.OutputCurrencyAmount
				if 	(InTaxAmount != 0)
					TransientCurrencyAmount             = InTaxAmount
					ConvertedTaxAmount                  = CurrencyExchange.OutputCurrencyAmount
				if  (InAddOnChargeAmount != 0)
					TransientCurrencyAmount             = InAddOnChargeAmount
					ConvertedAddOnChargeAmount          = CurrencyExchange.OutputCurrencyAmount
				if  (InRequestedAmount != 0)
					TransientCurrencyAmount             = InRequestedAmount
					ConvertedRequestedAmount            = CurrencyExchange.OutputCurrencyAmount
				if  (InInvoiceAmount != 0)
					TransientCurrencyAmount             = InInvoiceAmount
					ConvertedInvoiceAmount              = CurrencyExchange.OutputCurrencyAmount

		OnContractTotals
			if (!LocalOnContractTotaled)
				for each ContractLinesWithContractComplianceInvoiceLinesOnContractRel
					OnContractAmount   += each.TotalContractComplianceInvoiceLinesOnContractAmount
					OnContractQuantity += each.TotalContractComplianceInvoiceLinesOnContractQuantity
			LocalOnContractTotaled = true

		OffContractTotals
			if (!LocalOffContractTotaled)
				for each ContractLinesWithContractComplianceInvoiceLinesOffContractRel
					OffContractAmount   += each.TotalContractComplianceInvoiceLinesOffContractAmount
					OffContractQuantity += each.TotalContractComplianceInvoiceLinesOffContractQuantity
			LocalOffContractTotaled = true

		EditSpreads
			if (UseHeaderSpreadCommitments)
				constraint (ContractSpreadRel exists)
					"MustCreateSpreadRecordsIfUsingHeaderSpreadCommitments"
				if (!AllowIncompleteSpread)
					constraint (RemainingToBeSpread = 0)
						"ContractCommitmentSpreadAmountsMustEqualContractMaximumAmountWhenUsingSpreadCommitments"
				if (AllowIncompleteSpread)
					constraint (RemainingToBeSpread >= 0)
						"TotalCommitmentSpreadAmountsCannotBeGreaterThanContractMaximumAmount"
				constraint (ContractSpreadForEffectiveDateRel exists)
					"ASpreadMustExistForContractEffectiveDate"

			else
			if (UseLineMaximums)
				constraint (!ContractLineNotFullySpreadRel exists)
					"SpreadAmountsMustEqualMaximumAmountForLine<first ContractLineNotFullySpreadRel.ContractLine>"
				constraint (!NoContractLineSpreadForEffectiveDateRel exists)
					"ASpreadForLine<first NoContractLineSpreadForEffectiveDateRel.ContractLine>MustExistForTheContractEffectiveDate"
			else
			if (UseLineSpreadCommitments)
				constraint (!ContractDistMissingSpreadRel exists)
					"MustCreateLineDistributionSpreadRecordsForLine<first ContractDistMissingSpreadRel.ContractLine>"
				if (!AllowIncompleteSpread)
					constraint (!ContractDistNotFullySpreadRel exists)
						"CommitmentSpreadAmountsMustEqualDistributionAmountForLine<first ContractDistNotFullySpreadRel.ContractLine>AndDistribution<first ContractDistNotFullySpreadRel.ContractLineDistribution>"
				if (AllowIncompleteSpread)
					constraint (!ContractDistExcessSpreadRel exists)
						"CommitmentSpreadAmountsCannotBeGreaterThanDistributionAmountForLine<first ContractDistExcessSpreadRel.ContractLine>AndDistribution<first ContractDistExcessSpreadRel.ContractLineDistribution>"
				if (!HasBeenActivated)
					constraint (!ContractDistNoEffectiveDateSpreadRel exists)
						"ASpreadMustExistForTheContractLineEffectiveDateForLine<first ContractDistNoEffectiveDateSpreadRel.ContractLine>"

		InitializePriceBreaks
			invoke FastUpdate each
				if (each.NoPriceBreaksAllowed and each.PricingMarkupOrDiscount entered)
					invoked.PricingMarkupOrDiscount = blank
					invoked.LinePriceBreakOn = blank
					invoked.PriceBreak.QuantityPercentPrice[1] = 0
					invoked.PriceBreak.QuantityPercentPrice[2] = 0
					invoked.PriceBreak.QuantityPercentPrice[3] = 0
					invoked.PriceBreak.QuantityPercentPrice[4] = 0
					invoked.PriceBreak.QuantityPercentPrice[5] = 0
				if (each.NoCsnPriceBreaksAllowed and each.ConsignmentPricingMarkupOrDiscount entered)
					invoked.ConsignmentPricingMarkupOrDiscount = blank
					invoked.ConsignmentLinePriceBreakOn 	  = blank
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[1] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[2] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[3] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[4] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[5] = 0

		CertificationEdits
			if (ActiveSupplierCertificationExist)
				for each Supplier.ActiveSupplierCertRel
					constraint (each.SupplierCertification.CertificationEffectiveDate <= EffectiveDate)
						"ContractEffectiveDateIsPriorToEffectiveDateForSupplier<Supplier>Certification<each.SupplierCertification.PayablesCertificationCode>"
					if (each.CertificationExpirationDate entered)
						constraint (each.CertificationExpirationDate >= EffectiveDate)
							"Supplier<Supplier>HasACertification<each.SupplierCertification.PayablesCertificationCode>WhoseExpirationDateIsPriorToContractEffectiveDate"

			if (ActiveSupplierContactCertificationExist)
				for each SupplierSourceId.ActiveSupplierContactCertRel
					constraint (each.SupplierCertification.CertificationEffectiveDate <= EffectiveDate)
						"ContractEffectiveDateIsPriorToEffectiveDateForSupplierContact<SupplierSourceId>Certification<each.SupplierCertification.PayablesCertificationCode>"
					if (each.CertificationExpirationDate entered)
						constraint (each.CertificationExpirationDate >= EffectiveDate)
							"SupplierContact<SupplierSourceId>HasACertification<each.SupplierCertification.PayablesCertificationCode>WhoseExpirationDateIsPriorToContractEffectiveDate"

		ActivateContractEdits
			if (IsManufacturerContract
			and ContractLineTierCostZeroCostRel exists)
				confirmation required 
					"ContractLine<first ContractLineTierCostZeroCostRel.ContractLine>HasATierCostOfZero;DoYouWantToContinue?"

			if (EnableClinicalSystemUseLocations)
				if (!HasClinicalLocations)
					confirmation required 
						"ContractIsAClinicalContractButNoClinicalLocationsExist;DoYouWantToContinue?"
			
				if (!HasLinesForClinicalUse)
					confirmation required 
						"ContractIsAClinicalContractButHasNoLinesForClinicalUse;DoYouWantToContinue?"
			
			constraint (Supplier.Active)
				"SupplierMustBeActive"
			constraint (SupplierSourceId.Active)
				"SupplierContactMustBeActive"
			constraint (Supplier.SupplierStatus.Validated)
				"SupplierMustBeValidated"

			constraint (PrimaryContactRel exists)
				"PrimaryContactIsRequired"
			constraint (PrimaryContactRel.DerivedEmail entered)
				"EmailAddressMustBeEnteredForPrimaryContact"

			if  (CapitatedContract)
				if (!CapitatedComponentsOnly)
					constraint (HasCapitatedProcedures)
						"CapitatedContractMustHaveAtLeastOneLineDefinedAsACapitatedProcedure"
					
					constraint (HasAllCapitatedGroups)
						"AllLinesThatAreCapitatedProceduresMustHaveAtLeastOneComponentGroup"

					constraint (ComponentGroupsHaveComponents) 
						"AllComponentGroupsForCapitatedProceduresMustHaveAtLeastOneComponent"

					constraint (AllLinesHaveComponentGroupItem)
						"AllComponentsMustBeAssociatedWithAComponentGroup"

				constraint (!HasCapitatedComponentItemsWithNoFinalCost)
					"CapitatedComponentItemsExistThatAreMissingFinalCosts;SeeMissingItemsInAlertLinks"

				constraint (!HasCapitatedCompanyLocationItemsWithNoFinalCost)
					"CapitatedComponentItemsExistThatAreMissingFinalCosts;SeeMissingItemsInAlertLinks"

			if (ServicePurchaseType
			or  StandingPurchaseType
			or  UseLineCommitments)
				invoke EditFullAccounts ContractLineDistributionRel

			if (EventTermsNeedToBeNegotiated)
				constraint (EventTermsHaveBeenNegotiated)
					"EventTermsMustBeNegotiated"
			if (IsManufacturerContract)
				constraint (ContractTier set exists)
					"AtLeastOneTierRequired"
				constraint (ContractTierMember set exists)
					"AtLeastOneTierMemberRequired"
				constraint (!TierMemberUnreleasedRel exists)
					"UnreleasedTierMembersExist"

			if (TaxCode entered)
				constraint (!TaxCode.TaxType.CalculatedRate)
					"OnlyAPInvoicesCanUseCalculatedRateTypeTaxCodes.SeeDefaultTaxCode:<TaxCode>"
				initialize LocalCompanyTaxCodeCount
				for each PoCompanyRel
					if (each.TaxEntityRel.UseTaxCodeAccounts)
						LocalTaxEntity = each.TaxEntityRel.TaxEntity
						if (EntityTaxCodeRel exists)
							LocalCompanyTaxCodeCount = LocalCompanyTaxCodeCount + 1
					else
						LocalCompanyTaxCodeCount = LocalCompanyTaxCodeCount + 1
				constraint (LocalCompanyTaxCodeCount > 0)
					"DefaultTaxCode:<TaxCode>IsInvalidForAnyCompanyInThisProcurementGroup"

			if (PayablesDistributionCode entered)
				if (ServicePurchaseType)
					constraint (PayablesDistributionCode.AccountEdit.Contracts)
						"ServiceContractsMustUseDistributionCodeHavingEditAccountFlagSetToContract"
			if (HasAPurchaseType)
				if (IsDistributorContract)
					constraint (ContractDistributorPricing set exists)
						"AtLeastOnePricingIdentifierRequired"
					constraint (!PricingMemberUnreleasedRel exists)
						"UnreleasedDistributorPricingMembersExist"
					if (DistDirectContractLinesRel exists)
						constraint (PricingMembersForDistributorContractExist)
							"AtLeastOnePricingMemberMustExistForDistributorContract;DistributorContractHasLinesNotAssociatedWithManufacturerContract"
					for each OpenManufacturerContractForDistContractRel
						constraint (each.MfgPricingRel exists)
							"EachAssociatedManufacturerContractMustHaveAtLeastOnePricingMemberOnDistributorContract"
						constraint (each.MfgContractLineRel exists)
							"EachAssociatedManufacturerContractMustHaveAtLeastOneContractLineOnDistributorContract;Contract#<each.ManufacturerContractNumber>HasNoLinesOnDistributorContract"
				if (IsManufacturerContract)
					constraint (ContractLine set exists)
						"MustHaveAtLeastOneContractLine"
				if (!AllowReferenceOfItemsNotOnContract)
					if (!IsManufacturerContract
					and !ServicePurchaseType)
						constraint (CanUseForCostDefaultingContractLineRel exists)
							"MustHaveAtLeastOneContractLineThatWillBeUsedForCostDefaulting"
					if (ServicePurchaseType)
						constraint (CanUseForCostDefaultingContractLineRel exists)
							"MustHaveAtLeastOneContractLineThatWillBeUsedForInvoicing"
				if (HasBeenActivated)
					if (MaximumAmount entered)
						if (LifetimeEdit.PurchaseOrdersAndReqs)
							constraint (MaximumAmount >= (AmountOrdered + AmountRequested))
								"LifetimeMaximumAmountCannotBeLessThanAmountOrderedPlusAmountRequested"
						else
						if (LifetimeEdit.PurchaseOrders)
							constraint (MaximumAmount >= AmountOrdered)
								"LifetimeMaximumAmountCannotBeLessThanAmountOrderedOrInvoiced"

			if (HasAPurchaseType)
				constraint (Vendor entered)
					"AVendorMustBeAssociatedWithTheContractSupplierForAContractUsedForPurchasingOrInvoicing"
				constraint (Vendor.VendorStatus.Active or Vendor.VendorStatus.Restricted)
					"VendorCannotBeInactive"
				if (ApPoPurchaseFrom.VendorLocation entered)
					constraint (ApPoPurchaseFrom.VendorLocation.Status.Active)
						"APVendorLocationIsInactive"
					constraint (!ApPoPurchaseFrom.VendorLocation.LocationType.RemitTo)
							"APVendorLocationCannotBeARemit-ToOnlyLocation"
				if (ApPoPurchaseFrom.PurchaseFromLocation entered)
					constraint (PurchaseFromLocationExists)
						"POPurchaseFrom:<ApPoPurchaseFrom.PurchaseFromLocation>DoesNotExist"
					constraint (ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.Status.Active)
						"APVendorLocationForPOVendorLocationIsInactive"
					constraint (!ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.LocationType.RemitTo)
						"APVendorLocationForPOVendorLocationCannotBeARemit-ToOnlyLocation"
				if (PreferredContract)
					if (IsNotDistributorAndNotManufacturer)
						constraint (ContractParticipantsExist)
							"MustHaveAtLeastOneContractParticipantIfContractIsAPreferredContract"
					else
					if (IsManufacturerContract)
						constraint (ContractTierMembersExist)
							"MustHaveAtLeastOneContractMemberIfContractIsAPreferredContract"
					else
					if (IsDistributorContract)
						constraint (ContractPricingMembersExist)
							"MustHaveAtLeastOneContractMemberIfContractIsAPreferredContract"

			for each ContractLineAOCRel
				constraint (each.UnitCost != 0 or each.AOCRate != 0 or each.ZeroCost = true)
					"ForContractLine<each.ContractLine>;AOC<each.AOC>MustEnterEitherTheUnitCost,AddOnCostRateOrSetTheZeroCostFlagToYes"

			if (AllowChangeOrder)
				constraint (NoMissingAllowances)
					"AllLinesThatAreVendorDeterminedMustHaveAnAllowance"

			if (ChangeOrderCreateDocument
			and AllowChangeOrder)
				if (UseIDM
				or  IsUsingIDMTemplate)
					constraint (ContractDocumentIDMTemplate entered)
						"IDMTemplateIsRequired"
				else
					constraint (ContractDocumentTemplate != blank)
						"ADocumentTemplateIsRequired"

		ReleaseEdits
			if (UnresolvedSuggestedLineItemsExist)
				confirmation required
					"UnresolvedLineChangesExist;DoYouWantToContinue?"
			constraint (NumberOfInterviewUnansweredRequiredQuestions = 0 and NumberOfInterviewIncorrectlyAnsweredQuestions = 0)
				"SomeRequiredInterviewQuestionsAreNotAnsweredOrAnsweredIncorrectly.GoToTheQuestionsFormToAnswerThem"
			constraint (!ChangeOrdersNotCompleted)
				"ChangeOrderOrOrdersExistAndMustBeCompletedOrRejectedBeforeRelease"
			if (NotificationPercent > 0)
				constraint (MaximumAmount > 0)
					"LifetimeMaximumAmountIsRequiredWhenEnteringNotificationPercent"
			constraint (!CreateTermsNeeded)
				"InterviewQuestionsOrAnswersHaveChanged;YouMustCreateContractTermsBeforeContinuing"
			constraint (!AllUnansweredRequiredQuestionsRel exists)
				"Question(s)ExistThatRequireAnswers"
			constraint (!AllQuestionsMissingRequiredAttachmentsRel exists)
				"Question(s)ExistThatRequireAttachments"
			constraint (!AllIncorrectlyAnsweredQuestionsRel exists)
				"RequiredQuestion(s)ExistThatHaveIncorrectAnswers"
			if (UseHeaderCommitments)
				constraint (CommitmentAccount entered)
					"CommitmentAccountIsRequiredForHeaderCommitments"
			constraint (!ListQuestionsWithNoValue exists)
				"ListTypeQuestionsExistWithoutAssociatedValuesDefined"
			constraint (EffectiveDate entered)
				"EffectiveDateIsRequired;RunUpdateContractDatesActionToUpdate"
			if (HasNotFixedRebates)
				constraint (AllNotFixedRebatesMustHaveQualifiers)
					"AllRebatesThatAreNotForFixedAmountsRequireQualifiers"
			constraint(!FirstRebateDueDateMissingRel  exists)
				"FirstRebateDueDateIsRequiredForRebate<first FirstRebateDueDateMissingRel.ContractRebateType>ToReleaseContract"
			constraint(!RebateDueDatesMissingRel   exists)
				"RebateDueDateIsRequiredForRebate<first RebateDueDatesMissingRel.ContractRebateType>ToReleaseContract"
			constraint (!GrowthRebateWithNoQualifiersRel exists)
				"Rebate<first GrowthRebateWithNoQualifiersRel.ContractRebateType>MustHaveAtLeastOneGrowthQualifierDefinedToReleaseContract"
			constraint(!RebateQualifierWithoutQualifierContractRel exists)
				"Qualifier<first RebateQualifierWithoutQualifierContractRel.ContractRebateQualifier>ForRebate<first RebateQualifierWithoutQualifierContractRel.ContractRebateType>MustHaveAtLeastOneQualifierContractSelected"
			constraint (!QualifierWithoutItemsAndCodesRel exists)
				"Qualifier<first QualifierWithoutItemsAndCodesRel.ContractRebateQualifier>ForRebate<first QualifierWithoutItemsAndCodesRel.ContractRebateType>MustHaveAtLeastOneQualifierItemOrQualifierCodeSelected"

			if (ServicePurchaseType
			or  StandingPurchaseType
			or  UseLineCommitments)
				invoke EditFullAccounts ContractLineDistributionRel

			if (ContractUsesMatrixApprovals)
				if (StandingPurchaseType)
					constraint (MaximumReleaseNumber > 0)
						"ContractsUsingMatrixApprovalMustUseMaximumReleaseNumberToDetermineNumberOfPurchaseOrders"			
			
				if (StandingPurchaseType
				or  ServicePurchaseType)
					constraint (ContractLineDistMissingErrorRel !exists)
						"ContractsUsingMatrixApprovalMustHaveAtLeastOneDistributionForEachLineOnRelease"

			if (Buyer entered)
				constraint (Buyer.Active)
					"BuyerIsInactive"

			if (ServicePurchaseType)
				constraint (Buyer entered)
					"BuyerIsRequiredForServiceContracts"

			if (StandingPurchaseType)
				if (ProcessLevelGroup.Company entered)
					constraint (StandardParticipantRel exists)
						"ProcessLevelCompanyMustExistAsAContractParticipantForStandingContracts"
				constraint (Buyer entered)
					"BuyerIsRequiredForStandingContracts"
				constraint (ScheduleFrequency entered)
					"ScheduleFrequencyIsRequiredForStandingContract"
				if (MaximumReleaseNumber = blank)
					constraint (ExpirationDate entered)
						"MustEnterEitherAnExpirationDateOrMaximumReleaseNumber"
				constraint (ContractParticipantLocationRel exists)
					"MustHaveAParticipantLocationForStandingContracts"

   			if (!RetainagePercentCompleteTracking.NoRetainage)
				constraint (MaximumAmount !=0)
					"TheMaximumAmountIsRequiredWhenUsingRetainage"

			constraint (PrimaryContactRel exists)
				"PrimaryContactIsRequired"

			constraint (PrimaryContactRel.DerivedEmail entered)
				"EmailAddressMustBeEnteredForPrimaryContact"

			for each SecondaryContactRel
				constraint (each.DerivedEmail entered)
					"EmailAddressMustBeEnteredForAllSecondaryContacts"

			if (IsManufacturerOrDistributorContract)
				constraint (ExpirationDate entered)
					"ExpirationDateIsRequiredForManufacturerOrDistributorContracts;RunUpdateContractDatesActionToUpdate"

			if (RedlineApprovals)
				constraint (RedlineDocumentExists)
					"MustHaveARedlineDocumentForClassificationThatUsesDocumentRedlining"
				constraint (LatestRedlineDocumentRel exists)
					"MustHaveARedlineDocumentThatIsTheLatestRevision"

			if (RedlineApprovals)
				if (!RedlineClassApproval)
					if (ContractSubclassification entered)
						constraint (RedlineAddendumClassApproval)
							"SubclassificationUsesApprovalsWithRedliningOnDocument;MustEnterA_'RequireInternalContractApprovalUsingDocumentRedliningBeforeNegotiations'_OptionOnSubclassification"
					if (ContractClassification entered)
						constraint (RedlineAddendumClassApproval)
							"ClassificationUsesApprovalsWithRedliningOnDocument;MustEnterA_'RequireInternalContractApprovalUsingDocumentRedliningBeforeNegotiations'_OptionOnClassification"

			if (ContractRedlineApprovals)
				if (ContractSubclassification entered)
					constraint (ContractRedlineClassApproval)
						"SubclassificationUsesApprovalsWithRedliningOnContract;MustEnterAnOptionThatAllowsTermAndConditionUpdatesOnSubclassification"
				if (ContractClassification entered)
					constraint (ContractRedlineClassApproval)
						"ClassificationUsesApprovalsWithRedliningOnContract;MustEnterAnOptionThatAllowsTermAndConditionUpdatesOnClassification"

			if (ContractApprovals)
				if (ContractSubclassification entered)
					constraint (ContractClassApproval)
						"SubclassificationUsesApprovals;MustEnterAnApprovalOptionOnSubclassification"
				if (ContractClassification entered)
					constraint (ContractClassApproval)
						"ClassificationUsesApprovals;MustEnterAnApprovalOptionOnClassification"

			for each ContractLineAOCRel
				constraint (each.UnitCost != 0 or each.AOCRate != 0 or each.ZeroCost = true)
					"ForContractLine<each.ContractLine>;AOC<each.AOC>MustEnterEitherTheUnitCost,AddOnCostRateOrSetTheZeroCostFlagToYes"

			if (ContractMilestones)
				if (ContractMilestoneRels.NumberOfDaysToFirstAlert entered)
					constraint (ContractMilestoneRels.MilestoneDate entered)
						"MustEnterMilestoneDateOnContractMilestonesToEnterAlertDays"

			if (ContractDeliverables)
				if (ContractDeliverableRels.NumberOfDaysToFirstAlert entered)
					constraint (ContractDeliverableRels.DueDate entered)
						"MustEnterDueDateOnContractDeliverableToEnterAlertDays"

			if (ApPoPurchaseFrom.PurchaseFromLocation entered)
				constraint (PurchaseFromLocationExists)
					"POPurchaseFrom:<ApPoPurchaseFrom.PurchaseFromLocation>DoesNotExist"
				constraint (ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.Status.Active)
					"APVendorLocationForPOVendorLocationIsInactive"
				constraint (!ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.LocationType.RemitTo)
					"APVendorLocationForPOVendorLocationCannotBeARemit-ToOnlyLocation"

			if (HasAPurchaseType)
				constraint (Vendor entered)
					"AVendorMustBeAssociatedWithTheContractSupplierForAContractUsedForPurchasingOrInvoicing"

			if ((ServicePurchaseType
			or   StandingPurchaseType)
			and	 ContractUsesMatrixApprovals)
				constraint (BusinessGroupRel.FinanceEnterpriseGroup.EnableResponsibilityMatrix)
					"CannotUse_Responsibility_MatrixApprovalsWhenThe_Finance_Enterprise_GroupDoesNotHaveThe_Responsibility_MatrixTurnedOn._PleaseContactYourSystemAdministratorForFurtherAssistance."

		SendEmailFromProposal
			send email
				to PrimaryContactRel.DerivedEmail
				from SupplierSourceIdRel.EmailAddress

				subject "ProposedContractHasBeenSubmittedBySupplier"
				Contents
					"AProposedContractHasBeenSubmitted;ViewInProposedContractsInManageContracts"//BySupplierContact<Supplier>-<Supplier.SupplierName>"


		SendNegotiationEmailMessageToSupplier
			if (UseSupplierPortalForNegotiation)
				send email
					to SupplierSourceId.EmailAddress
					cc DerivedProxyEmailAddressList
					bcc PrimaryAndSecondaryEmailList
					from PrimaryContactRel.DerivedEmail
					subject "<ContractGroupEmailTemplateRel.FinalTermsForReviewEmailSubject>"
					Contents
						"<ContractGroupEmailTemplateRel.FinalTermsForReviewEmailContent>"
						"Click<TermsLinkback>ToReviewInTheSupplierPortal."
				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= Supplier.SupplierGroup
					invoked.Supplier 						= Supplier
					invoked.SupplierSourceId				= SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsForReviewEmailSubject
					invoked.MessageText                     = ContractGroupEmailTemplateRel.FinalTermsForReviewEmailContent
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = PrimaryContactRel.Contact
					invoked.OriginatingContract             = Contract

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
					invoked.SentToCc                        = DerivedProxyEmailAddressList
					invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
					invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsForReviewEmailSubject
					invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsForReviewEmailContent + "Click<TermsLinkback>ToReviewInTheSupplierPortal"
					invoked.NotificationType				= 5

		SubmitDraftTermAndConditionUpdates
			for each DraftTermUpdatesRel
				invoke SubmitDraftTermAndConditionUpdates each
			for each DraftArticleUpdatesRel
				invoke SubmitDraftArticleUpdates each

		ApprovePendingTermAndConditionUpdates
			for each PendingArticleDeletionUpdatesRel
				invoke DeleteArticle each
			for each NoPendingArticleUpdatesRel	
				invoke CreateUnchangedApprovedArticleUpdateRecord each
			for each PendingArticleUpdatesRel
				invoke ApproveAllPendingArticleUpdates each
			for each NoPendingTermUpdatesRel	
				invoke CreateUnchangedApprovedUpdateRecord each
			for each PendingTermUpdatesRel
				invoke ApprovePendingTermAndConditionUpdates each
			invoke Update CurrentContractTermVersionRel
				invoked.ActionTaken 		= 1		
				invoked.VersionCloseStamp	= current timestamp

		DisapprovePendingTermAndConditionUpdates
			for each PendingArticleUpdatesRel
				invoke DisapprovePendingArticleUpdates each
			for each PendingTermUpdatesRel
				invoke DisapprovePendingTermAndConditionUpdates each

		RejectPendingTermAndConditionUpdates
			for each PendingArticleUpdatesRel
				invoke RejectPendingArticleUpdates each
			for each PendingTermUpdatesRel
				invoke RejectPendingTermAndConditionUpdates each

		ApproveNegotiation
			include ApprovePendingTermAndConditionUpdates
			invoke Update NewContractTermVersionRel
				if (AddendumExists)
					invoked.ApprovalStage	= 5   
				else
					invoked.ApprovalStage	= 2		
				invoked.LastAction 		= 7		
				invoked.FinalApproverActor		= actor
			PreviousNegotiationStatus = 6
			make transition to Negotiated

		DisapproveNegotiation
			initialize ApprovalStatus
			initialize NegotiationStatus
			initialize FinalApprovalStatus
			if (AddendumExists)
				for each ReleasedArticleRel
					invoke TransitionToAddendum Released each
			else
				for each ReleasedArticleRel
					invoke TransitionToDraft Released each
			include DisapprovePendingTermAndConditionUpdates
			include ClearProcessingDays
			if (UseSupplierPortalForNegotiation)
				send email
					to SupplierSourceId.EmailAddress
					cc DerivedProxyEmailAddressList
					bcc PrimaryAndSecondaryEmailList
					from PrimaryContactRel.DerivedEmail
					subject "<ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailSubject>"
					Contents
						"<ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailContent>"
						"Comment<action comment>"
				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= Supplier.SupplierGroup
					invoked.Supplier 						= Supplier
					invoked.SupplierSourceId				= SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailSubject
					invoked.MessageText						= ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment" + action comment
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = PrimaryContactRel.Contact
					invoked.OriginatingContract             = Contract

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
					invoked.SentToCc                        = DerivedProxyEmailAddressList
					invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
					invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailSubject
					invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsDisapprovedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment" + action comment
					invoked.NotificationType				= 5

			PreviousNegotiationStatus = 6
			if (AddendumExists)
				make transition to Addendum
			else
				make transition to Draft
				invoke TriggerProcessContractService

		RejectNegotiation
			OnHold = true
			invoke HoldAllContractLinesFromReject ContractLine
				invoked.PrmContractGroup = ContractGroup
				invoked.PrmContract 	 = Contract
			if (IsManufacturerContract)
				invoke HoldAllRelatedDistributorContractLines ContractLine
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract      = Contract
			invoke SetToInactive ContractArticle set
			include RejectPendingTermAndConditionUpdates
			if (UseSupplierPortalForNegotiation)
				send email
					to SupplierSourceId.EmailAddress
					cc DerivedProxyEmailAddressList
					bcc PrimaryAndSecondaryEmailList
					from PrimaryContactRel.DerivedEmail
					subject "<ContractGroupEmailTemplateRel.FinalTermsRejectedEmailSubject>"
					Contents
							"<ContractGroupEmailTemplateRel.FinalTermsRejectedEmailContent>"
							"Comment<action comment>"
				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= Supplier.SupplierGroup
					invoked.Supplier 						= Supplier
					invoked.SupplierSourceId				= SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsRejectedEmailSubject
					invoked.MessageText						= ContractGroupEmailTemplateRel.FinalTermsRejectedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = PrimaryContactRel.Contact
					invoked.OriginatingContract             = Contract

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
					invoked.SentToCc                        = DerivedProxyEmailAddressList
					invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
					invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsRejectedEmailSubject
					invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsRejectedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment" + action comment
					invoked.NotificationType				= 5

			PreviousNegotiationStatus = 6
			make transition to NegotiationDenied	

		SendTermsAndConditionsApprovalMessage
			if (UseSupplierPortalForNegotiation)
				send email
					to SupplierSourceId.EmailAddress
					cc DerivedProxyEmailAddressList
					bcc PrimaryAndSecondaryEmailList
					from PrimaryContactRel.DerivedEmail
					subject "<ContractGroupEmailTemplateRel.FinalTermsApprovedEmailSubject>"
					Contents
						"<ContractGroupEmailTemplateRel.FinalTermsApprovedEmailContent>"
				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= Supplier.SupplierGroup
					invoked.Supplier 						= Supplier
					invoked.SupplierSourceId				= SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsApprovedEmailSubject
					invoked.MessageText						= ContractGroupEmailTemplateRel.FinalTermsApprovedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = PrimaryContactRel.Contact
					invoked.OriginatingContract             = Contract

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
					invoked.SentToCc                        = DerivedProxyEmailAddressList
					invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
					invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsApprovedEmailSubject
					invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsApprovedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment" + action comment
					invoked.NotificationType				= 5

		SupplierApproveTerms

			if (SupplierApprovalTimestamp not entered)
				SupplierApprovalTimestamp = current timestamp
				DaysToSupplierApprove = (SupplierApprovalTimestamp date - InternalApprovalTimestamp date)
			if (AddendumExists)
				if (!DerivedCurrentContractTermVersionApprovalStage = 5)
					invoke CreateNegotiationUpdateContractTermVersion
			else
				if (!DerivedCurrentContractTermVersionApprovalStage = 2)
					invoke CreateNegotiationUpdateContractTermVersion
			invoke Update NewContractTermVersionRel
				invoked.ModificationComment	= blank
				invoked.ModificationActor	= blank
				if (AddendumExists)
					invoked.ApprovalStage	= 5
				else
					invoked.ApprovalStage	= 2		
				invoked.LastAction 				= 4		
				if (action comment entered)
					invoked.SupplierApprovalComment = action comment
				else
				if (LocalComment entered)
					invoked.SupplierApprovalComment	= LocalComment
				invoked.SupplierApprovalActor	= actor
			if (PreviousNegotiationStatus.NeedsFinalApproval)
				PreviousNegotiationStatus = 4
				make transition to NeedsFinalApproval
			else
				PreviousNegotiationStatus = 4
				make transition to NeedsInternalApproval

		BuildProxyEmailAddressList
			LocalProxyEmailAddressFound = false
			LocalProxyEmailAddressList  = ""
			for each SupplierContactProxyRel
				if (LocalProxyEmailAddressFound)
					LocalProxyEmailAddressList = LocalProxyEmailAddressList + "," + each.EmailAddress
				else
					LocalProxyEmailAddressList = each.EmailAddress
					LocalProxyEmailAddressFound = true

		BuildSecondaryContactEmailAddressList
			LocalSecondaryContactEmailAddressFound = false
			LocalSecondaryContactEmailAddressList  = ""
			for each SecondaryContactRel
				if (LocalSecondaryContactEmailAddressFound)
					LocalSecondaryContactEmailAddressList = LocalSecondaryContactEmailAddressList + "," + each.DerivedEmail
				else
					LocalSecondaryContactEmailAddressList = each.DerivedEmail
					LocalSecondaryContactEmailAddressFound = true

		CreateCommentFromCommentCode

			invoke Create ContractComment
				fill in fields from this instance
				invoked.CommentTitle = StandardCommentCodeRel.CommentName
				if (StandardCommentCodeRel.StandardCommentPrintCode.InvoiceComments)
					invoked.CommentUsedFor = 3 
				else
				if (StandardCommentCodeRel.StandardCommentPrintCode.PrintOnPurchaseOrder)
					invoked.CommentUsedFor = 2 
				else
					invoked.CommentUsedFor = 1 
				invoked.Description 	 	= StandardCommentCodeRel.CommentText
				invoked.Attachment.File   	= StandardCommentCodeRel.Attachment.File
				invoked.Attachment.MimeType	= StandardCommentCodeRel.Attachment.MimeType
				invoked.Attachment.Title	= StandardCommentCodeRel.Attachment.Title
			initialize StandardCommentCode

		GetIDMItemDetails
 	  		if (not LocalIDMItemDetailsExecuted
 	  		and LatestRevisionRel.IDMUniqueId entered)
 	  			IDMItem.IDMUniqueId 	= LatestRevisionRel.IDMUniqueId
				IDMItem.DocumentType	= "FSM_ContractRedlineDocument"
 	  			if (IDMItem.GetItemDetails)
 	  				LocalIDMItemDetailsExecuted		= true

		SendEmailUsingIDM
			initialize LocalattachmentUniqueIDindex
			initialize LocaldocumentAttachmentindex
			initialize IDMSendEmail
			LocalMaxAttachment		= 100			


			if (PrmIncludeRedlineDocumentsWithEmail)
				if (HasIDMRedlineDocument)
					constraint (LatestRevisionRel.IDMUniqueId entered)
						"ThereAreNoRedlineDocumentAttachmentsMarkedToEmail"
					LocalattachmentUniqueIDindex				   			   += 1
					IDMItem.IDMUniqueId							= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType						= "FSM_ContractRedlineDocument"

					constraint(IDMItem.GetItemDetails)
						"RedlineDocumentDoesNotExistInIDM"

					IDMSendEmail.PIDAttachment.IDMPID[LocalattachmentUniqueIDindex]	= IDMItem.IDMItemDetails.PID
				else
					LocalattachmentUniqueIDindex				   += 1
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= LatestRevisionRel.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= LatestRevisionRel.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= LatestRevisionRel.Attachment.MimeType



			if (PrmIncludeLatestContractDocument)
				if (HasIDMDocument)
					LocalattachmentUniqueIDindex				   += 1
					IDMItem.IDMUniqueId				= IDMDocumentPID
					IDMItem.DocumentType			= "FSM_ContractDocument"

					constraint(IDMItem.GetItemDetails)
						"ContractDocumentDoesNotExistInIDM"

					IDMSendEmail.PIDAttachment.IDMPID[LocalattachmentUniqueIDindex]	= IDMItem.IDMItemDetails.PID
				else
					LocaldocumentAttachmentindex				   += 1
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= LatestDocumentRevisionRel.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= LatestDocumentRevisionRel.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= LatestDocumentRevisionRel.Attachment.MimeType

			if (PrmIncludeContractAttachmentsWithEmail)
				for each EmailAttachmentsRel
					LocaldocumentAttachmentindex		+= 1
					constraint (LocaldocumentAttachmentindex < LocalMaxAttachment)
						"MaximumNumberOfAttachmentReached"
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= each.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= each.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= each.Attachment.MimeType

				for each EmailCommentsRel
					LocaldocumentAttachmentindex		+= 1
					constraint (LocaldocumentAttachmentindex < LocalMaxAttachment)
						"MaximumNumberOfAttachmentReached"
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= each.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= each.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= each.Attachment.MimeType

			if (PrmIncludeContractLineAttachmentsWithEmail)
				for each LineEmailAttachmentsRel
					LocaldocumentAttachmentindex		+= 1
					constraint (LocaldocumentAttachmentindex < LocalMaxAttachment)
						"MaximumNumberOfAttachmentReached"
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= each.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= each.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= each.Attachment.MimeType

				for each LineEmailCommentsRel
					LocaldocumentAttachmentindex		+= 1
					constraint (LocaldocumentAttachmentindex < LocalMaxAttachment)
						"MaximumNumberOfAttachmentReached"
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].Title 	= each.Attachment.Title
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].File  	= each.Attachment.File
					IDMSendEmail.DocumentAttachment.IDMAttachment[LocaldocumentAttachmentindex].MimeType	= each.Attachment.MimeType

			IDMSendEmail.EmailTo 	  	= PrmToEmail
			IDMSendEmail.EmailFrom	  	= PrmFromEmail
			IDMSendEmail.EmailCc	  	= PrmCcEmail
			IDMSendEmail.EmailBcc		= PrmBccEmail
			IDMSendEmail.EmailSubject  	= PrmSubject
			IDMSendEmail.EmailBody	  	= PrmEmailContents

			invoke CreateFromSendEmail IDMJob
				assign result to LocalIDMJob
				invoked.Actor			 = actor
				invoked.Description		 = DerivedEmailMessage
				invoked.IDMSendEmail	 = IDMSendEmail
				if  (PrmIncludeLatestContractDocument
				or   PrmIncludeRedlineDocumentsWithEmail)
					invoked.FileName	 = IDMItem.IDMItemDetails.FileName
					invoked.DocumentType = IDMItem.DocumentType

			IDMJob = LocalIDMJob

		SetIDMAttributes
			initialize IDMAttributes
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Name"
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Name
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "ContractType"
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= ContractType
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "ContractSubtype"
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= ContractSubtype
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "ContractClassification"
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= ContractClassification
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName  	= "ContractSubclassification"
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue  	= ContractSubclassification
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName  	= "Supplier"
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue  	= Supplier
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName		= "SupplierName"
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue		= Supplier.SupplierName

			initialize LocalColSequence
			for each distinct ContractCommodityCode in ContractLineRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue1.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.CommodityCode
				else
					end for each
			IDMAttributes.MultiValue1.IDMAttributeName = "CommodityCode"

			initialize LocalColSequence
			for each distinct ContractContact in ContractInternalContactsRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue2.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.Contact.FirstLastName
				else
					end for each
			IDMAttributes.MultiValue2.IDMAttributeName = "InternalContact"

			initialize LocalColSequence
			for each distinct ContractName in ContractExternalContactsRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue3.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.Name.FirstAndLastName
				else
					end for each
			IDMAttributes.MultiValue3.IDMAttributeName = "ExternalContact"

			initialize LocalColSequence
			for each distinct DistributionAccount.Project in ContractLineDistributionRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue4.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.Project
				else
					end for each
			IDMAttributes.MultiValue4.IDMAttributeName = "Project"

			initialize LocalColSequence
			for each distinct DistributionAccount.AccountingUnit in ContractLineDistributionRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue5.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.AccountingUnit
				else
					end for each
			IDMAttributes.MultiValue5.IDMAttributeName = "AccountingUnit"

		SetIDMXMLDefinition
			initialize IDMXMLDefinition
			IDMXMLDefinition.Busclass													= reference to this instance
			IDMXMLDefinition.ListName													= "ContractForIDM"
			IDMXMLDefinition.DocumentName												= "ContractDetails"

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName 				= "ContractArticlesByDisplayRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 					= "ContractArticlesForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag						= "Articles"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag						= "Article"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName 				= "ContractLineRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName 					= "ContractLinesForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag						= "Lines"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag						= "Line"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 				= 2

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName 				= "LineCommentPrintOnContractRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName 					= "ContractLineCommentsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag						= "LineComment"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag						= "Comment"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1 				= 2
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection2 				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].RelationName 				= "ContractCommentPrintOnContractRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListName 					= "ContractCommentsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListTag						= "Comments"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ItemTag						= "CommentDetail"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection1 				= 3

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].RelationName 				= "Level1ContractTermsByDisplayRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListName 					= "ContractTermsAndConditionsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListTag						= "TermsAndConditionsDetails"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ItemTag						= "TermsAndConditionsDetail"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].LevelSection1 				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].LevelSection2				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].RelationName 				= "Level2ContractTermsByDisplayRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListName 					= "ContractTermsAndConditionsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListTag						= "TermsAndConditionsLevel2"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ItemTag						= "TermsAndConditionsLevel2Detail"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection1 				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection2				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection3				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].RelationName 				= "Level3ContractTermsByDisplayRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListName 					= "ContractTermsAndConditionsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListTag						= "TermsAndConditionsLevel3"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ItemTag						= "TermsAndConditionsLevel3Detail"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection1 				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection2				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection3				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection4				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].RelationName 				= "Level4ContractTermsByDisplayRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListName 					= "ContractTermsAndConditionsForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListTag						= "TermsAndConditionsLevel4"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ItemTag						= "TermsAndConditionsLevel4Detail"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection1 				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection2				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection3				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection4				= 1
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection5				= 1

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].RelationName 				= "ContractAllowancesRel"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ListName 					= "ContractAllowanceForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ListTag						= "Allowances"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ItemTag						= "Allowance"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].LevelSection1 				= 4

			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].RelationName 				= "ContractMilestoneRels"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ListName 					= "ContractMilestoneForIDM"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ListTag						= "Milestones"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ItemTag						= "Milestone"
			IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].LevelSection1 				= 5

			if (LocalGenerateXMLFile)
				IDMXMLDefinition.OutputFileName	= "ContractGroup_" + ContractGroup + "_Contract_" + Contract + "_" + DerivedCurrentTimestamp + ".xml"

		CreateIDMContractRedlineDocument
			invoke Create ContractRedlineDocument
				invoked.ContractGroup 		= ContractGroup
				invoked.Contract     		= Contract
				invoked.Title				= Title
				invoked.Description			= Description
				invoked.TransientAttachment	= Attachment
				invoked.CreatedBySupplier   = CreatedBySupplier

		DateEdits

			if (ExpirationDate entered)
				constraint (ExpirationDate > EffectiveDate)
					"ExpirationDateMustBeGreaterThanEffectiveDate"
			if (EffectiveDate > 0)
				constraint (!TierQualifierFromDateRel exists)
					"ContractTierQualifiersExistWithTargetedFromDateLessThanContractEffectiveDate"
				constraint (!TierLineQualifierFromDateRel exists)
					"ContractLineTierQualifiersExistWithTargetedFromDateLessThanContractEffectiveDate"
				constraint (!HeaderPricingExistsPriorToEffectiveDate)
					"ContractPricingRecordsExistWithADatePriorToTheNewEffectiveDate"
				constraint (!RebateQualifierFromDateRel exists)
					"ContractRebateQualifiersExistWithTargetedFromDateLessThanTheContractEffectiveDate"
				constraint (AllRebateDueDatesAfterEffectiveDate)
					"ContractRebateDueRecordsExistWithADatePriorToTheNewEffectiveDate"
			if (EffectiveDate changed
			or  FromDateChangeAction)
				if (UseHeaderSpreadCommitments)
					invoke ReValidateSpreadDate ContractSpreadRel
				else
				if (UseLineSpreadCommitments)
					invoke ReValidateSpreadDate ContractLineDistSpreadRel
				else
					invoke ReValidateSpreadDate ContractLineSpreadRel
				if (HeaderPricingExists)
					constraint (EffectiveDate != 0)
						"CannotClearEffectiveDateWhenPricingRecordExists"
				if (RebateDueDatesExist)
					constraint (EffectiveDate != 0)
						"CannotClearEffectiveDateWhenRebateDueDatesExists"
			if (ContractReviewDate != 0)
				if (EffectiveDate != 0)
					constraint (ContractReviewDate >= EffectiveDate)
						"ContractNotEffectiveForTheReviewDate"
				if (ExpirationDate != 0)
					constraint (ContractReviewDate <= ExpirationDate)
						"ContractNotEffectiveForTheReviewDate"
			if (ContractRebateRel exists)
				constraint (ExpirationDate entered)
					"ContractExpirationDateRequiredWhenUsingRebates"
				constraint (AllRebateDatesBeforeExpirationDate)
					"FirstRebateDueDateMustBeLessThanContractExpirationDate"

			if (UseCommitments and NotContractTemplate)
				constraint (ExpirationDate entered)
					"ExpirationDateIsRequiredWhenUsingCommitments"

			if (ExpirationDate > 0)
				constraint (ExpirationDate > EffectiveDate)
					"ExpirationDateMustBeGreaterThanEffectiveDate"
				constraint (!TierQualifierToDateRel exists)
					"ContractTierQualifiersExistWithTargetedToDateGreaterThanContractExpirationDate"
				constraint (!TierLineQualifierToDateRel exists)
					"ContractLineTierQualifiersExistWithTargetedToDateGreaterThanContractExpirationDate"
				constraint (MaximumReleaseNumber not entered)
					"CannotEnterBothAnExpirationDateAndAMaximumNumberOfReleases"
				constraint (!HeaderPricingExistsAfterExpirationDate)
					"ContractPricingRecordExistsWithADateGreaterThanTheNewExpirationDate"
				constraint (!RebateQualifierToDateRel exists)
					"ContractRebateQualifiersExistWithTargetedToDateGreaterThanTheContractExpirationDate"
				constraint (AllRebateDueDatesBeforeExpirationDate)
					"ContractRebateDueRecordsExistWithADateGreaterThanTheNewExpirationDate"

			if (ExpirationDate changed
			or  FromDateChangeAction)
				if (UseHeaderSpreadCommitments)
					invoke ReValidateSpreadDate ContractSpreadRel
				else
				if (UseLineSpreadCommitments)
					invoke ReValidateSpreadDate ContractLineDistSpreadRel
				else
					invoke ReValidateSpreadDate ContractLineSpreadRel

			if (FirstInvoiceAllowedDate > 0)
				constraint (FirstInvoiceAllowedDate < EffectiveDate)
					"FirstInvoiceAllowedDateMustBePriorToEffectiveDate"

			if (LastInvoiceAllowedDate > 0)
				constraint (LastInvoiceAllowedDate >= EffectiveDate)
					"LastInvoiceAllowedDateCannotBePriorToEffectiveDate"

			if (!RetainageDueDays = 0)
				constraint (ExpirationDate > 0)
					"ExpirationDateIsRequiredWithRetainageInvoiceDueDays"

		UpdateRules

			include DateEdits

			if  (DefaultAccount.Project entered
			and  EffectiveDate !entered)
				BypassProjectDateEdit = true

			if (CapitatedComponentsOnly changed
			and CapitatedComponentsOnly)
				confirmation required 
					"IfContractChangedToCapitatedComponentsOnlyComponentGroupMustBeCreatedBeforeAddingLines"

			if (PaymentDueDays changed
			and PaymentDueDays entered)
				for each ContractRebateDueRel 
					invoke UpdateExpectedDate each 
						invoked.ParmPaymentDueDays = PaymentDueDays

			if (CommitmentAccount.Project entered)
				TransientExchangeDate = EffectiveDate
				LocalPostingDate  = EffectiveDate

			if ((CommitmentAccount changed
			or  MaximumAmount changed)
			and CreateCommitments.Header
			and HasBeenActivated)
				constraint (NoUnreleasedInvoiceDetailsExist)
					"CannotChangeCommitmentInformationWhenRelatedUnreleasedInvoiceDetailsExist"

			if (CreateCommitments changed)
				if (CreateCommitments.No)
					constraint (!HasBeenActivated)
						"CannotChangeCreateCommitmentsToNoCommitmentsForAContractThatHasBeenActivated;UseCloseCommitmentsActionIfTryingToClearCommitments"
				if (HasBeenActivated)
					if (!CreateCommitments.No)
						if (old CreateCommitments.No)
							constraint (ContractGroup.AllowCommitmentsForActiveContracts)
								"CannotChangeToCreateCommitmentsForAContractThatHasBeenActivated"
						else
							constraint (!HasReleasedOrHistoryCommitments)
								"CannotChangeCommitmentTypeAfterContractHasBeenActivated"

			if (CreateCommitments changed
		    and UseHeaderCommitments)
			    constraint (CommitmentAccount entered)
					"CommitmentAccountIsRequiredForHeaderCommitments"

			if (CreateCommitments.Header
			and CommitmentCompany entered
			and CommitmentAccount entered)
				LocalEndDate = DerivedEntityCalendarPeriod
				LocalLedger  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CoreLedger
				constraint (DerivedEntityCalendarPeriod entered
				and         EntityLedgerPeriodRel exists)
					"ContractUsesHeaderCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(EffectiveDate)"

			if (((CreateCommitments changed and CreateCommitments.Header and !old CreateCommitments.HeaderSpread)
			or   (CreateCommitments changed and CreateCommitments.HeaderSpread and !old CreateCommitments.Header))
			and   ContractLineDistributionRel exists)
				confirmation required
					"Warning:NowUsingHeaderCommitments,AllDistributionsWillBeDeletedAndRecreatedFromTheHeaderCommitmentValues.DoYouWantToContinue?"

			if (CreateCommitments changed and old CreateCommitments.HeaderSpread
			and ContractSpreadRel exists)
				confirmation required
					"Warning:NoLongerUsingHeaderSpreadCommitments,AllSpreadsWillBeDeleted.DoYouWantToContinue?"

			if   (CreateCommitments changed and old CreateCommitments.LineSpread
			and   ContractLineDistSpreadRel exists)
				confirmation required
					"Warning:NoLongerUsingSpreadLineCommitments,AllSpreadsWillBeDeleted.DoYouWantToContinue?"

			if (CreateCommitments changed
			and  UseCommitments
			and  ContractLineSpreadRel exists)
				confirmation required
					"Warning:NowUsingCommitments,AllLineMaximumSpreadsWillBeDeleted.DoYouWantToContinue?"

			if (CreateCommitments changed)
				invoke Purge GLCommitDrillRel
				invoke DeleteFromContract ContractSpreadRel
				invoke Delete ContractLineDistSpreadRel
				invoke Delete ContractLineSpreadRel
				invoke Delete WarningBudgetEditErrorRel
				invoke Delete BudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				invoke Delete BudgetEditBatchRel
				invoke Delete BudgetRebuildBTGTRel

				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing

				if (!UseHeaderCommitments
				and old UseHeaderCommitments)
					invoke Delete ContractLineDistributionRel

				if ((CreateCommitments.Header and !old CreateCommitments.HeaderSpread)
				or  (CreateCommitments.HeaderSpread and !old CreateCommitments.Header))
					invoke Delete ContractLineDistributionRel

					invoke CreateHeaderCommitmentsForDistribution ContractLine

						invoked.ParmContractGroup       		= ContractGroup
						invoked.ParmContract              		= Contract

				if (CreateCommitments.No)
					if (old CreateCommitments.Line
					or  old CreateCommitments.LineSpread)
						invoke SetUseCommitmentsToFalse ContractLine
							invoked.ParmContractGroup = ContractGroup
							invoked.ParmContract      = Contract

				if ((CreateCommitments.Line
				or   CreateCommitments.LineSpread)
				and  ContractLinesExist)
					if (!old CreateCommitments.Line
					and !old CreateCommitments.LineSpread)
						confirmation required
							"Warning:NowUsingLineCommitments,LineCreateCommitmentsFlagsWillBeSetToTrue.DoYouWantToContinue?"
						invoke SetUseCommitmentsToTrue ContractLine
							invoked.ParmContractGroup = ContractGroup
							invoked.ParmContract      = Contract

				invoke CheckForContractLineErrors

			if (StandardCommentCode entered)
				include CreateCommentFromCommentCode

			if (ParentContract changed
			or  MaximumAmount changed)
				if (ParentContract entered
				and MaximumAmount entered
				and ParentContractRel.MaximumAmount entered)
					if (!DerivedAutomaticUpdateHeaderLifetimeMaximumAmount)
						if (ParentContract changed)
							constraint (MaximumAmount + ParentContractRel.TotalChildMaximumAmount + ParentContractRel.TotalLineMaximumAmount <= ParentContractRel.MaximumAmount)
								"MaximumAmountWillCauseTotalChildMaximumAmountPlusTotalLineMaximumAmountOnParentContractToExceedMaximumAmountOnParentContractOf<ParentContractRel.MaximumAmount>"
						if (MaximumAmount changed)
							constraint ((MaximumAmount - old MaximumAmount + ParentContractRel.TotalChildMaximumAmount + ParentContractRel.TotalLineMaximumAmount) <= ParentContractRel.MaximumAmount)
								"MaximumAmountChangeWillCauseTotalChildMaximumAmountPlusTotalLineMaximumAmountOnParentContractToExceedMaximumAmountOnParentContractOf<ParentContractRel.MaximumAmount>"

			if (ContractTypeOrSubTypeChanged
			and old ContractType !entered
			and (ProposedContract =1
			or   ProposedContract =2))
				if (ServicePurchaseType)
					for each ContractLineRel
						invoke FastUpdateWithoutEdits each
							invoked.UpdateCanUseForInvoicePaymentTrue = true

			if (Supplier changed
			or  Name     changed)
				include BuildTextIndexes

			if (UOMSMustMatch changed
			or  UOMSMustMatchForSpecials changed)
				invoke CheckForContractLineErrors
					invoked.CheckOnlyContractLinesWithErrors = true

			if (CommitmentAccount changed)
				if (UseHeaderCommitments)
					invoke UpdateHeaderCommitmentAccount ContractLineDistribution
						invoked.ParmContractGroup       		= ContractGroup
						invoked.ParmContract              		= Contract
						invoked.ParmDistributionAccount			= CommitmentAccount

			if  ((ContractClassification changed
			or   ContractSubclassification changed)
			and !ClassificationAllowsChangeOrder
			and  AllowChangeOrder = true)
				constraint (!AnyChangeOrderExists)
					"CannotChangeClassificationOrSubclassificationToOneThatDoesNotAllowChangeOrders;ChangeOrdersExist"
				constraint (!HasAllowances)
					"CannotChangeClassificationOrSubclassificationToOneThatDoesNotAllowChangeOrders;AllowancesExist"
				AllowChangeOrder = false

			if (!ContractTemplate)
				if ((ContractClassification changed
				or   ContractSubclassification changed)
				and  ClassificationAllowsChangeOrder
				and  ServicePurchaseType)
					AllowChangeOrder = true

				if (ContractTypeOrSubTypeChanged changed
				and ServicePurchaseType
				and ClassificationAllowsChangeOrder)
					AllowChangeOrder = true

			if (ContractTypeOrSubTypeChanged changed
			and !ServicePurchaseType
			and AllowChangeOrder = true)
				constraint (!HasAllowances)
					"CannotChangeContractTypeToNonService;AllowancesExist"
				AllowChangeOrder = false

			if (ContractTypeOrSubTypeChanged)
				if (!NonServicePurchaseType)
					EnableClinicalSystemUseLocations = false	
			
			if (EnableClinicalSystemUseLocations changed
			and !ContractTemplate)
				if (ContractLinesExist
				or  ParticipantsOrMembersExist)
					constraint (EnableClinicalSystemUseLocationsFalse)
						"CannotChangeForClinicalUseSystemsDirectly;MustRun_Enable_For_Clinical_UseAction"
				if (EnableClinicalSystemUseLocations = false)
					for each ContractHeaderLocationRel
						if (each.TaxRelated)
							invoke Update each 
								invoked.ClinicalSystemUse = false 
						else 
							invoke Delete each	
					invoke UpdateClinicalUse ContractLine 
						invoked.PrmContractGroup 	= ContractGroup 
						invoked.PrmContract         = Contract 
						invoked.PrmSetFlag		    = 2		 		

		UpdateExitRules

			if (CreateCommitments.Header
			or  CreateCommitments.HeaderSpread)
				invoke UpdateReportCurrencyAmountInstance

			if (ParentContract changed)
				if (MaximumAmount entered)
					if (old ParentContract entered)
						invoke CalculateTotalChildMaximumAmount OldParentContractRel
					if (ParentContract entered)
						invoke CalculateTotalChildMaximumAmount ParentContractRel

			if (MaximumAmount changed)
				if (ParentContract entered)
					invoke CalculateTotalChildMaximumAmount ParentContractRel

			if  (CommitmentCompany changed
			or  CommitmentAccount changed
			or  MaximumAmount changed
			or  EffectiveDate changed
			or  CreateCommitments changed)
				if (HeaderCommitmentComponentsEntered)
					LocalInternalChange = true
					if (CommitmentAccount changed)
						LocalChangeCommitAccount = true
					include ManageCommitments
			if (CreateCommitments.HeaderSpread
			and CommitmentAccount changed)
				invoke UpdateCommitmentAccount ContractSpreadRel

			if (ContractRebateRel exists)
				invoke CreateDueDates ContractRecurringRebateRel

	Derived Fields
		DerivedPerformanceEvaluationContactEmailAddressList is a DerivedField
			type is EmailAddressField with multiple addresses
			holds pii 
			restricted
			include PEContactEmailAddress
			return LocalEvaluationContactEmailAddressList

		PerformanceEvaluationLinkback is a MessageField
			restricted
			"<linkback(webapp is ContractManager navigation is ContractEvaluationNav text is \"here\" )>"

		RepresentativeText is a StringField
			type is Text
			default label is "Contract"
			Contract " - " Name

		HoldDate is a DerivedField 
			type is Date 
			for each audit log records
				if (each.OnHold
				and !old each.OnHold)
					return each.effective date			
		
		ShortName is a StringField
			type is AlphaUpper 3
			restricted
			Name

		PrimaryContactPhoneNumber is a StringField
			type is Alpha size 30
			PrimaryContactRel.DerivedPhone

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforContract"

		ActorContractClassificationGroup is a DerivedField
			type is like ContractClassificationGroup
			return actor.context.ContractClassificationGroup

		ContextMessageText is a MessageField
			restricted
			"Contract<Contract>"

		DerivedXMLName			is a DerivedField
			type is Alpha 100
			return "ContractGroup " + ContractGroup + " Contract " + Contract + " - " + IDMDocumentSequence

		DerivedIDMDocumentURL	is a DerivedField
			type is Alpha 1000
			restricted
			return IDMJob.DerivedIDMDocumentURL

		DerivedIDMDocumentLink  is a DerivedField
			type is Alpha 2083
			restricted
			if (IDMRedlineApprovals)
				IDMItem.DocumentType = "FSM_ContractRedlineDocument"
				if (LatestRevisionRel.IDMUniqueId entered)
					IDMItem.IDMUniqueId = LatestRevisionRel.IDMUniqueId
				else
					return blank
			else
				IDMItem.DocumentType = "FSM_ContractDocument"
				if (IDMDocumentPID entered)
					IDMItem.IDMUniqueId = IDMDocumentPID
				else
					if (IDMJob.MDSID entered)
						IDMItem.IDMUniqueId = IDMJob.MDSID
					else
						return blank
			if (IDMItem.GetItemDetails)
				IDMItem.IDMPID = IDMItem.IDMItemDetails.PID
				return IDMItem.DerivedDrillBackLink
			return blank

		FinanceEnterpriseGroupBI is a DerivedField
			type is Alpha size 75
			restricted
			if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup = blank)
				return "None"
			else
				return ContractGroup.BusinessGroup.FinanceEnterpriseGroup

		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod

		NewDerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first NewGeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod

		ChangeOrderContractStatus is a DerivedField
			type is Numeric 1
			restricted
			if (ChangeOrderStateAddendum)
				return 1
			else
			if (ChangeOrderStateAmendment)
				return 2

		DerivedCommittedAllowanceTotal                  is a DerivedField
			type is like UnsignedInternationalAmount
			default label is "CommittedAllowanceTotal"
			return (sum CommittedAllowancesRel.DerivedExtendedAmount)

		DerivedExpirationDate306090 					is a DerivedField
			type is Numeric 6
			if (ExpirationDate entered
			and !ContractStatus.Closed
			and ExpirationDate - current corporate date < 121)
				if (ExpirationDate < current corporate date)
					return 1
				if (ExpirationDate - current corporate date < 31
				and ExpirationDate >= current corporate date)
					return 2
				else
				if (ExpirationDate - current corporate date < 61)
					return 3
				else
				if (ExpirationDate - current corporate date < 91)
					return 4
				else
					return 5

		VendorAgreementReferenceBI is a DerivedField
			type is Alpha size 75
			restricted
			if (VendorAgreementReference = blank)
				return FinanceEnterpriseGroupBI + "/" + "None"
			else
				return FinanceEnterpriseGroupBI + "/" + VendorAgreementReference

		OnContractComplianceReportAmountTotal is a DerivedField
			type is like InternationalAmount
			include OnContractTotals
			return OnContractAmount
		OffContractComplianceReportAmountTotal is a DerivedField
			type is like InternationalAmount
			include OffContractTotals
			return OffContractAmount
		OnContractComplianceReportQuantityTotal is a DerivedField
			type is like InternationalAmount
			include OnContractTotals
			return OnContractQuantity
		OffContractComplianceReportQuantityTotal is a DerivedField
			type is like InternationalAmount
			include OffContractTotals
			return OffContractQuantity
		PercentOfOnContractReportAmountTotal is a DerivedField
			type is like Percent
			return (OnContractComplianceReportAmountTotal/SupplyManagementReportContext.DerivedContractComplianceReportAmountTotal)
		PercentOfOffContractReportAmountTotal is a DerivedField
			type is like Percent
			return (OffContractComplianceReportAmountTotal/SupplyManagementReportContext.DerivedContractComplianceReportAmountTotal)
		ContractComplianceReportTotal is a DerivedField
			type is like InternationalAmount
			restricted
			return (OnContractComplianceReportAmountTotal + OffContractComplianceReportAmountTotal)

		TotalInvoicedAmount is a DerivedField  
			type is like InternationalAmount

			return 0

		MatchesProjectSearch		is a DerivedField
			type is Boolean
			if ((Project entered
			and  ProjectCommitmentRel exists)
			or   !Project entered)
				return true

		MatchesFinDim1Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension1 entered
			and  Dimension1CommitmentRel exists)
			or   !FinanceDimension1 entered)
				return true

		MatchesFinDim2Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension2 entered
			and  Dimension2CommitmentRel exists)
			or   !FinanceDimension2 entered)
				return true

		MatchesFinDim3Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension3 entered
			and  Dimension3CommitmentRel exists)
			or   !FinanceDimension3 entered)
				return true

		MatchesFinDim4Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension4 entered
			and  Dimension4CommitmentRel exists)
			or   !FinanceDimension4 entered)
				return true

		MatchesFinDim5Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension5 entered
			and  Dimension5CommitmentRel exists)
			or   !FinanceDimension5 entered)
				return true

		MatchesFinDim6Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension6 entered
			and  Dimension6CommitmentRel exists)
			or   !FinanceDimension6 entered)
				return true

		MatchesFinDim7Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension7 entered
			and  Dimension7CommitmentRel exists)
			or   !FinanceDimension7 entered)
				return true

		MatchesFinDim8Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension8 entered
			and  Dimension8CommitmentRel exists)
			or   !FinanceDimension8 entered)
				return true

		MatchesFinDim9Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension9 entered
			and  Dimension9CommitmentRel exists)
			or   !FinanceDimension9 entered)
				return true

		MatchesFinDim10Search		is a DerivedField
			type is Boolean
			if ((FinanceDimension10 entered
			and  Dimension10CommitmentRel exists)
			or   !FinanceDimension10 entered)
				return true

		MaximumAmountRemaining      is a DerivedField   
			type is like InternationalAmount
			if (MaximumAmount >= AmountOrdered)
				return (MaximumAmount - AmountOrdered)
			else
				return 0

		MatchesAccountSearch		is a DerivedField
			type is Boolean
			if ((Account entered
			and  AccountCommitmentRel exists)
			or   Account !entered)
				return true

		MatchesAccountingUnitSearch		is a DerivedField
			type is Boolean
			if ((AccountingUnit entered
			and  AccountingUnitCommitmentRel exists)
			or   AccountingUnit !entered)
				return true

		MatchesAccountingEntitySearch	is a DerivedField
			type is Boolean
			if ((AccountingEntity entered
			and  AccountingEntityCommitmentRel exists)
			or   AccountingEntity !entered)
				return true

		DerivedAppsValue                            is a DerivedField
			type is like PfiAppsValue
			return "CMContractAppr" + UniqueID

		UserActionRoutingAsHtml						is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml

		DerivedAppsValue2                            is a DerivedField
			type is like PfiAppsValue
			return "CMContFinalAppr" + UniqueID

		UserActionRoutingAsHtml2						is a DerivedField
			type is RichText
			return first PfiWorkunitRel2.UserActionRoutingAsHtml

		DerivedAppsValue3                            is a DerivedField
			type is like PfiAppsValue
			return "CMContNegFinalAppr" + UniqueID

		UserActionRoutingAsHtml3						is a DerivedField
			type is RichText
			return first PfiWorkunitRel3.UserActionRoutingAsHtml

		DerivedAppsValue4		                     is a DerivedField
			type is like PfiAppsValue
			return "CMContNegFinalApprNoUpdate" + UniqueID

		UserActionRoutingAsHtml4						is a DerivedField
			type is RichText
			return first PfiWorkunitRel4.UserActionRoutingAsHtml

		DerivedAppsValue5                            is a DerivedField
			type is like PfiAppsValue
			return "CMWordAppr" + UniqueID

		UserActionRoutingAsHtml5						is a DerivedField
			type is RichText
			return first PfiWorkunitRel5.UserActionRoutingAsHtml


		CreatingContractMessage						is a MessageField
			"Create_Contract"

		ContractMessage                             is a MessageField
			"Contract"

		ContractNbr 								is a StringField
			type is Alpha size 16
			Contract

		DisplayContract                             is a DerivedField
			type is Alpha size 20
			if (ContractExists)
				return ContractMessage + " " + ContractNbr
			else
				return CreatingContractMessage

		CreatingTemplateMessage						is a MessageField
			"Create_Template"

		TemplateMessage                             is a MessageField
			"Template"

		DisplayTemplate                             is a DerivedField
			type is Alpha size 20
			if (ContractExists)
				return TemplateMessage + " " + ContractNbr
			else
				return CreatingTemplateMessage

		PrimaryContact 								is a DerivedField
			type is Alpha size 153
			if (PrimaryContactRel exists)
				return PrimaryContactRel.DerivedPrimaryName
			else
				return blank

		PrimaryContactEmail 						is a StringField 
			type is EmailAddressField
			holds pii
			PrimaryContactRel.DerivedEmail

		Classification 								is a StringField
			type is AlphaUpper size 50
			ContractClassification

		SupplierName 								is a StringField
			type is AlphaUpper size 30
			Supplier.SupplierName

		Subclass 									is a StringField
			type is AlphaUpper size 50
			ContractSubclassification

		NumberOfUnreleasedTierMembers               is a ComputeField
			type is Numeric 6
			restricted
			(instance count of UnreleasedContractTierMembersRel)

		NumberOfUnreleasedPricingMembers            is a ComputeField
			type is Numeric 6
			restricted
			(instance count of UnreleasedPricingMembersRel)

		NumberOfUnreleasedPricingMembersForAContract is a ComputeField
			type is Numeric 6
			restricted
			(instance count of UnreleasedPricingMembersForAContractRel)
		
		NumberOfAllUnansweredQuestions 				is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AllUnansweredQuestionRels)

		NumberOfAllUnansweredRequiredQuestions 		is a ComputeField
			type is Numeric 6
			(instance count of AllUnansweredRequiredQuestionsRel)

		NumberOfAllQuestionsMissingRequiredAttachments is a ComputeField
			type is Numeric 6
			(instance count of AllQuestionsMissingRequiredAttachmentsRel)

		NumberOfInterviewUnansweredRequiredQuestions 	is a ComputeField
			type is Numeric 6
			restricted
			(instance count of InterviewUnansweredRequiredQuestionsRel)

		NumberOfAllIncorrectlyAnsweredQuestions 	is a ComputeField
			type is Numeric 6
			(instance count of AllIncorrectlyAnsweredQuestionsRel)

		NumberOfInterviewIncorrectlyAnsweredQuestions is a ComputeField
			type is Numeric 6
			restricted
			(instance count of InterviewIncorrectlyAnsweredQuestionsRel)

		NumberOfAllAnsweredQuestionsWithTerms 			is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AllAnsweredQuestionsWithTermsRel)

		DisplayTermsInterviewPanel 						is a ConditionalField
			type is Boolean
			if (AnyUnansweredRequiredQuestionsExist
			or  AnyIncorrectlyAnsweredQuestionsExist
			or  AnsweredQuestionsWithTermsExist
			or  CreateTermsNeeded)
				true
			else
				false

		TotalUsedAmount is a DerivedField
			type is like InternationalAmount
			return (sum ContractSpreadForAmountUpdateRel.UsedAmount)

		MaximumAmountInUseForCommitmentUpdate           is a DerivedField 
			type is like InternationalAmount
			if (!IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested)
			else
			if (IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered)
			else
			if (!IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered)
			else
			if (IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered + AddOnChargeAmountOrdered)

		MaximumAmountInUse 								is a DerivedField
			type is like InternationalAmount
			if (MaxEditPoOnly
			and !IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered)
			else
			if (MaxEditPoAndRq
			and !IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested)
			else
			if (MaxEditPoOnly
			and IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AddOnChargeAmountOrdered)
			else
			if (MaxEditPoAndRq
			and IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered)
			else
			if (MaxEditPoOnly
			and !IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + TaxAmountOrdered)
			else
			if (MaxEditPoAndRq
			and !IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered)
			else
			if (MaxEditPoOnly
			and IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + TaxAmountOrdered + AddOnChargeAmountOrdered)
			else
			if (MaxEditPoAndRq
			and IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered + AddOnChargeAmountOrdered)

		MaximumAmountInUseOrderedOnly						is a DerivedField
			type is like InternationalAmount
			if (!IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered)
			else
			if (IncludeAOCInMaxEdits
			and !IncludeTaxInMaxEdits)
				return (AmountOrdered + AddOnChargeAmountOrdered)
			else
			if (!IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + TaxAmountOrdered)
			else
			if (IncludeAOCInMaxEdits
			and IncludeTaxInMaxEdits)
				return (AmountOrdered + TaxAmountOrdered + AddOnChargeAmountOrdered)

		RetainagePercentComplete 								is a DerivedField
			type is like Percent
			if (RetainagePercentCompleteTracking > 0)
				return (RetainageInvoiceAmount/MaximumAmount)
			else
				return 0

		AmountRemaining 										is a DerivedField
			type is like InternationalAmount
			if (CommitmentsClosed = true)
				return 0
			else
			if (MaximumAmountEntered)
				if (FromContractCopy)
					return MaximumAmount
				if (MaximumAmount > MaximumAmountInUse)
					return (MaximumAmount - MaximumAmountInUse)
				else
					return 0
			else
				return 0

		ChangeOrderAmountRemaining								is a DerivedField
			type is like InternationalAmount
			if (CommitmentsClosed = true)
				return 0
			else
			if (MaximumAmountEntered)
				if (FromContractCopy)
					return MaximumAmount
				if (MaximumAmount > MaximumAmountInUseForCommitmentUpdate)
					return (DerivedCommittedAllowanceTotal + MaximumAmount - MaximumAmountInUseForCommitmentUpdate)
				else
					return 0
			else
				return 0

		SourcingOutputType 										is a ConditionalField
			type is Numeric size 2
			restricted
			if (ContractPurchaseType)
				"2"
			else
			if (BlanketPurchaseType)
				"3"
			else
			if (CatalogQuotePurchaseType)
				"4"
			else
			if (StandingPurchaseType)
				"5"
			else
			if (ServicePurchaseType)
				"6"
			else
				"7"

		ApPoPurchFrom 													is a ConditionalField
			type is Alpha size 4
			restricted
			if (ApPoPurchaseFrom.PurchaseFromLocation entered)
				ApPoPurchaseFrom.PurchaseFromLocation
			else
				ApPoPurchaseFrom.VendorLocation

		ApPoPurchFromName 												is a ConditionalField
			type is Alpha 30
			if (ApPoPurchaseFrom.PurchaseFromLocation entered)
				ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.VendorName
			else
				ApPoPurchaseFrom.VendorLocation.VendorName

		ContractLinePriceBreak 											is a ConditionalField
			type is Numeric size 6
			restricted
			if (ContractLinePriceBreaksRel exists)
				first ContractLinePriceBreaksRel.ContractLine
			else
				blank

		RemainingToBeSpread 											is a DerivedField
			type is like InternationalAmount
			if (CreateCommitments.HeaderSpread)
				return (MaximumAmount - (sum ContractSpreadRel.SpreadAmount))
			else
				return 0

		PercentRequested 												is a DerivedField
			type is Percent size 7.3
			if (MaximumAmount != 0
			and MaxEditPoAndRq)
				return (AmountRequested / MaximumAmount)
			else
				return 0

		PercentOrdered 													is a ConditionalField
			type is Percent size 7.3
			if (MaximumAmount !=0)
				(MaximumAmountInUseOrderedOnly / MaximumAmount)
			else
				0

		TotalPercent 													is a DerivedField
			type is Percent size 7.3
			return (PercentRequested + PercentOrdered)

		PercentRemaining 												is a DerivedField
			type is Percent size 7.3
			if ((100% - TotalPercent) < 0)
				return 0
			else
				return (100% - TotalPercent)

		NumberOfAncestors 												is a ComputeField
			type is Numeric 1
			restricted
			(instance count of Contract ancestors)

		DerivedPrimaryContract 											is a ConditionalField
			type is AlphaUpper size 30
			if (WorkingContractRel exists)
				first WorkingContractRel.RelatedContractID
			else
				Contract

		StatusActivationInProgressMsg                                   is a MessageField
			restricted
			"ActivationInProgress"

		StatusDraftMsg 													is a MessageField
			restricted
			"Draft"

		StatusReleasedMsg 												is a MessageField
			restricted
			"Released"

		StatusNegMsg 													is a MessageField
			restricted
			"Negotiation"

		StatusAppMsg 													is a MessageField
			restricted
			"FinalApproval"

		StatusInMatrixApprovalMessage                                   is a MessageField 
			restricted 
			"InMatrixApproval"
		
		StatusReadyMsg 													is a MessageField
			restricted
			"ReadyToActivate"

		StatusInactiveMsg 												is a MessageField
			restricted
			"Inactive"

		StatusAddendumMsg 												is a MessageField
			restricted
			"Addendum"

		StatusAmendmentMsg 												is a MessageField
			restricted
			"Amendment"

		StatusClosedMsg 												is a MessageField
			restricted
			"Closed"

		Status 															is a ConditionalField
			type is Alpha 55
			if (ActivationInProgress)
				StatusActivationInProgressMsg
			else
			if (ContractStatus.Draft)
				StatusDraftMsg
			else
			if (ContractStatus.Released)
				StatusReleasedMsg
			else
			if (ContractStatus.Negotiation)
				StatusNegMsg
			else
			if (ContractStatus.FinalApproval)
				StatusAppMsg
			else
			if (ContractStatus.ReadyToActivate and !InMatrixApprovalProcess)
				StatusReadyMsg
			else 
			if (InMatrixApprovalProcess)
				StatusInMatrixApprovalMessage
			else
			if (ContractStatus.Active)
				QueueActiveMessage
			else
			if (ContractStatus.Inactive)
				StatusInactiveMsg
			else
			if (ContractStatus.Addendum)
				StatusAddendumMsg
			else
			if (ContractStatus.Amendment)
				StatusAmendmentMsg
			else
			if (ContractStatus.Closed)
				StatusClosedMsg
			else
				blank

		ContractDraftMsg 												is a MessageField
			restricted
			"DraftContracts"

		ContractReleasedMsg 											is a MessageField
			restricted
			"ReleasedContracts"

		ContractNegMsg 													is a MessageField
			restricted
			"NegotiationContracts"

		ContractAppMsg 													is a MessageField
			restricted
			"FinalApprovalContracts"

		ContractReadyMsg												is a MessageField
			restricted
			"ReadyToActivateContracts"

		ContractInactiveMsg												is a MessageField
			restricted
			"InactiveContracts"

		ContractActiveMsg												is a MessageField
			restricted
			"ActiveContracts"

		ContractAddendumMsg												is a MessageField
			restricted
			"AddendumContracts"

		ContractAmendmentMsg											is a MessageField
			restricted
			"AmendmentContracts"

		ContractClosedMsg												is a MessageField
			restricted
			"ClosedContracts"

		ExpiredMessage is a LabelField
			"Expired"

		ExpiringMessage is a LabelField
			"Expiring"

		ChartContractTitle is a ConditionalField
			type is Alpha 70
			if (ContractStatus.Draft)
				ContractDraftMsg
			else
			if (ContractStatus.Released)
				ContractReleasedMsg
			else
			if (ContractStatus.Negotiation)
				ContractNegMsg
			else
			if (ContractStatus.FinalApproval)
				ContractAppMsg
			else
			if (ContractStatus.ReadyToActivate)
				ContractReadyMsg
			else
			if (ContractStatus.Active)
				ContractActiveMsg
			else
			if (ContractStatus.Inactive)
				ContractInactiveMsg
			else
			if (ContractStatus.Addendum)
				ContractAddendumMsg
			else
			if (ContractStatus.Amendment)
				ContractAmendmentMsg
			else
			if (ContractStatus.Closed)
				ContractClosedMsg
			else
				blank

		QueueActiveMessage 												is a MessageField
			restricted
			"Active"

		YellowAlertDate 												is a ComputeField
			type is Date
			restricted
			(ExpirationDate - YellowAlert as days)

		RedAlertDate 													is a ComputeField
			type is Date
			restricted
			(ExpirationDate - RedAlert as days)

		NumberOfActivatedContractLines									is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ActivatedContractLineRel)

		NumberOfParticipants											is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractParticipantsRel)

		NumberOfTierMembers												is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractTierMembersRel)

		NumberOfPricingMembers											is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AnyPricingMembersRel)

		NumberOfTiers 													is a ComputeField
			type is Numeric 6
			(instance count of ContractTier set)

		NumberOfRebates 												is a ComputeField
			type is Numeric 6
			(instance count of ContractRebate set)

		NumberOfLines 													is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractLine set)

		NumberOfLinesQuickApproximation 								is a ComputeField
			type is Numeric 6
			restricted
			(last ContractLine set.ContractLine)

		NumberOfArticles 												is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractArticle set)

		SingleSpace														is a StringField
			type is Alpha size 1
			" "

		SupplierAndName 												is a StringField
			type is Alpha 45
			Contract.Supplier
			", "
			Contract.Supplier.SupplierName

		ContractAndName 												is a StringField
			type is Alpha 70
			Contract
			", "
			Contract.Name

		DerivedDocMgmtSystemURL 										is a DerivedField
			type is Alpha size up to 1000
			return DocMgmtSystemURL text

		ContractCopyWLinesMsg 											is a MessageField
			restricted
			"Contract<Contract>CreationStarted.Check'MyActions'ForCompletion"

		ContractCopyMsg													is a MessageField
			restricted
			"Contract<Contract>Created"

		DerivedCreateContractFromContractCompletionMessage				is a DerivedField
			type is MessageField
			restricted
			if (CopyingContractLines)
				return ContractCopyWLinesMsg
			else
				return ContractCopyMsg

		DerivedFirstPoCompany											is a DerivedField
			type is like Company
			restricted
			return first PoCompanyRel.Company

		TermsLinkback													is a DerivedField
			type is Alpha size up to 1000
			restricted
			if (ContractRedlineApprovals)
				return UpdateLinkback
			else
				return RedlineLinkback

		UpdateLinkback 													is a MessageField
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is ContractSupplierTermVersionsCompositeNav text is \"here\")>"

		RedlineLinkback													is a MessageField
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is ContractSupplierDocumentRedlineNav text is \"here\")>"

		CurrentVersionForChangeOrder                                    is a DerivedField
			type is like ContractTermVersion
			return first ContractVersionDescendingRel.ContractVersion

		CurrentVersionThatHasChangeOrder                                is a DerivedField
			type is like ContractTermVersion
			return first ContractVersionChangeOrderRel.ContractVersion

		LastContractTermVersion 										is a DerivedField
			type is like ContractTermVersion
			restricted
			return last ContractTermVersionRel.ContractTermVersion

		CurrentContractTermVersion 										is a DerivedField
			type is like ContractTermVersion
			restricted
			return last CurrentContractTermVersionRel.ContractTermVersion

		DerivedRequireTermAndConditionApproval 							is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireTermAndConditionApproval
			else
				return ContractClassification.RequireTermAndConditionApproval

		DerivedRequireAddendumTermAndConditionApproval 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireAddendumTermAndConditionApproval
			else
				return ContractClassification.RequireAddendumTermAndConditionApproval

		DerivedUseSupplierPortalForNegotiation 							is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.UseSupplierPortalForNegotiations
			else
				return ContractClassification.UseSupplierPortalForNegotiations

		DerivedHasCostChangeTolerances                                  is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.HasCostChangeTolerances
			else
				return ContractClassification.HasCostChangeTolerances			

		DerivedConnector                                                is a DerivedField
			type is Alpha size 10
			if (ContractSubclassification entered)
				if (ContractSubclassification.Connector entered)
					return ContractSubclassification.Connector
				else
					return blank
			else
				if (ContractClassification.Connector entered)
					return ContractClassification.Connector
				else
					return blank				

		DerivedToleranceAmount                                          is a DerivedField
			type is like InternationalAmount
			if (ContractSubclassification entered)
				return ContractSubclassification.CostChangeToleranceAmount
			else
				return ContractClassification.CostChangeToleranceAmount	
				
		DerivedTolerancePercent                                          is a DerivedField
			type is Percent size 6.3
			if (ContractSubclassification entered)
				return ContractSubclassification.CostChangeTolerancePercent
			else
				return ContractClassification.CostChangeTolerancePercent								

		DerivedToleranceHandling                                        is a DerivedField
			type is Numeric size 1
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.ToleranceHandling
			else
				return ContractClassification.ToleranceHandling

		DerivedRequireAddendumNegotiation 								is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireAddendumNegotiation
			else
				return ContractClassification.RequireAddendumNegotiation

		DerivedUseSupplierPortalForAddendumNegotiation 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.UseSupplierPortalForAddendumNegotiations
			else
				return ContractClassification.UseSupplierPortalForAddendumNegotiations

		DerivedRequireNegotiationFinalApproval 							is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireNegotiationFinalApproval
			else
				return ContractClassification.RequireNegotiationFinalApproval

		DerivedRequireAddendumNegotiationFinalApproval 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireAddendumNegotiationFinalApproval
			else
				return ContractClassification.RequireAddendumNegotiationFinalApproval

		DerivedAllowUpdatesDuringApproval 								is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.AllowUpdatesDuringApproval
			else
				return ContractClassification.AllowUpdatesDuringApproval

		DerivedAllowUpdatesDuringAddendumApproval 						is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.AllowUpdatesDuringAddendumApproval
			else
				return ContractClassification.AllowUpdatesDuringAddendumApproval

		DerivedAllowUpdatesDuringNegotiationApproval 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.AllowUpdatesDuringFinalApproval
			else
				return ContractClassification.AllowUpdatesDuringFinalApproval

		DerivedAllowUpdatesDuringAddendumFinalApproval 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.AllowUpdatesDuringAddendumFinalApproval
			else
				return ContractClassification.AllowUpdatesDuringAddendumFinalApproval

		DerivedRequireContractApproval 									is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireContractApproval
			else
				return ContractClassification.RequireContractApproval

		DerivedRequireContractNegotiation 								is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireContractNegotiation
			else
				return ContractClassification.RequireContractNegotiation

		DerivedRequireFinalApproval 									is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireFinalApproval
			else
				return ContractClassification.RequireFinalApproval

		DerivedRequireAddendumApproval 									is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireAddendumApproval
			else
				return ContractClassification.RequireAddendumApproval

		DerivedRequireFinalAddendumApproval 							is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireFinalAddendumApproval
			else
				return ContractClassification.RequireFinalAddendumApproval

		DerivedCurrentContractTermVersionAction 						is a DerivedField
			type is Numeric 2
			restricted
			return last CurrentContractTermVersionRel.LastAction

		DerivedCurrentContractTermVersionActivated 						is a DerivedField
			type is Boolean
			restricted
			return last CurrentContractTermVersionRel.ActivatedVersion


		DerivedPFFinalApproverTermsModified 							is a DerivedField
			type is Boolean
			restricted
			if (FinalApproverSubmitTermChangesValid)
				return true
			else
				return false

		DerivedCurrentContractTermVersionApprovalStage 					is a DerivedField
			type is Numeric 2
			restricted
			return last CurrentContractTermVersionRel.ApprovalStage

		DerivedLastActivatedContractTermVersion 						is a DerivedField
			type is like ContractTermVersion
			restricted
			return last ActivatedContractTermVersionRel.ContractTermVersion

		NeedsSupplierMsg 												is a MessageField
			restricted
			"NeedsSupplierApproval"

		NeedsAdminMsg 													is a MessageField
			restricted
			"NeedsContractAdministratorApproval"

		DerivedNegotiationStatus 										is a DerivedField
			type is MessageField
			if (NegotiationStatus.NeedsSupplierApproval)
				return NeedsSupplierMsg
			else
			if (NegotiationStatus.NeedsInternalApproval
			or    NegotiationStatus.NeedsFinalApproval
			or    ContractStatus.FinalApproval)
				return NeedsAdminMsg
			else
				return ""

		YesMsg 															is a MessageField
			restricted
			"Yes"

		NoMsg 															is a MessageField
			restricted
			"No"

		DerivedAddendumExists 											is a DerivedField
			type is MessageField
			if (AddendumExists)
				return YesMsg
			else
				return NoMsg

		DerivedHasUnapprovedInternalArticleOrTermChanges 				is a DerivedField
			type is MessageField
			if (!NonDeletedContractArticlesExist)
				return NoMsg
			else
			if (!ContractTermVersionInSupplierNegotiationExist
			or   HasUnapprovedInternalArticleOrTermChanges)
				return YesMsg
			else
				return NoMsg

		DerivedOldRequireTermAndConditionApproval 						is a DerivedField
			type is Boolean
			restricted
			if (old ContractSubclassification entered)
				LocalCurrentContractClassification = ContractClassification
				ContractClassification = old ContractClassification
				LocalOldRequireTermAndConditionApproval = old ContractSubclassification.RequireTermAndConditionApproval
				ContractClassification = LocalCurrentContractClassification
				return LocalOldRequireTermAndConditionApproval
			else
				return old ContractClassification.RequireTermAndConditionApproval

		DerivedNewRequireTermAndConditionApproval 						is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireTermAndConditionApproval
			else
				return ContractClassification.RequireTermAndConditionApproval

		DerivedOldUseSupplierPortalForNegotiations 						is a DerivedField
			type is Boolean
			restricted
			if (old ContractSubclassification entered)
				LocalCurrentContractClassification = ContractClassification
				ContractClassification = old ContractClassification
				LocalOldUseSupplierPortalForNegotiations = old ContractSubclassification.UseSupplierPortalForNegotiations
				ContractClassification = LocalCurrentContractClassification
				return LocalOldUseSupplierPortalForNegotiations
			else
				return old ContractClassification.UseSupplierPortalForNegotiations

		DerivedNewUseSupplierPortalForNegotiations 						is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.UseSupplierPortalForNegotiations
			else
				return ContractClassification.UseSupplierPortalForNegotiations


		DerivedRequireFullDistributionForSpecialItem 						is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireFullDistributionForSpecialItem
			else
				return ContractClassification.RequireFullDistributionForSpecialItem

		DerivedRequireCommodityCodeForNonServiceItem 					is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireCommodityCodeForNonServiceItem
			else
				return ContractClassification.RequireCommodityCodeForNonServiceItem

		DerivedRequireCommodityCodeForServiceItem 						is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireCommodityCodeForServiceItem
			else
				return ContractClassification.RequireCommodityCodeForServiceItem

		DerivedRequireManufacturerCodeForNonServiceItem 				is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireManufacturerCodeForNonServiceItem
			else
				return ContractClassification.RequireManufacturerCodeForNonServiceItem

		DerivedRequireManufacturerNumberForNonServiceItem 				is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.RequireManufacturerNumberForNonServiceItem
			else
				return ContractClassification.RequireManufacturerNumberForNonServiceItem

		DerivedShowHealthcareInformation								is a DerivedField
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.ShowHealthcareInformation
			else
				return ContractClassification.ShowHealthcareInformation

		DerivedAutomaticUpdateHeaderLifetimeMaximumAmount is a DerivedField 
			type is Boolean
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount
			else
				return ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount

		DerivedOldContractSubclassificationString 						is a DerivedField
			type is like Description
			restricted
			if (old ContractSubclassification entered)
				return old ContractSubclassification
			else
				return "No Value"

		DerivedOldContractClassificationString 							is a DerivedField
			type is like Description
			restricted
			if (old ContractClassification entered)
				return old ContractClassification
			else
				return "No Value"

		DerivedContractSubclassificationString 							is a DerivedField
			type is like Description
			restricted
			if (ContractSubclassification entered)
				return ContractSubclassification
			else
				return "No Value"

		ContractApprovalLinkback 										is a DerivedField
			type is Alpha size up to 1000
			restricted
			if (AllowTermUpdatesDuringApproval)
				return UpdateTermLinkback
			else
				return NonUpdateTermLinkback

		RequesterProposedContractLinkback                               is a MessageField 
			restricted 
			"<linkback(webapp is Requester navigation is RequesterProposalNav text is \"ViewProposedContract\")>"			

		AlphaDescription is a DerivedField
			type is Alpha size 250
			restricted
			return Description
		
		UpdateTermLinkback 												is a MessageField
			restricted
			"<linkback(webapp is Approver navigation is ContractApprovalNav text is \"ViewContract\")>"

		NonUpdateTermLinkback 											is a MessageField
			restricted
			"<linkback(webapp is Approver navigation is ContractNonUpdateApprovalNav text is \"ViewContract\")>"

		ConfigContractLocation 											is a MessageField
			restricted
			"<config.CONTRACT_LOCATION>"

		LatestDocumentName 												is a DerivedField
			type is DocumentTitle size 50
			restricted
			if (UseIDMPerClassificationAndSubClass)
				return LatestRevisionRel.Title
			else
				return LatestRevisionRel.Attachment.Title

		LocationOfContract 												is a DerivedField
			type is Alpha size 256
			restricted
			if (UseIDMPerClassificationAndSubClass)
				return LatestRevisionRel.DerivedDrillBack
			else
				return ConfigContractLocation + "/" + LatestDocumentName

		ConfigIpaBaseUrl 												is a MessageField
			restricted
			"<config.ipa_base_url>"

		ConfigIpaDataArea 												is a MessageField
			restricted
			"<config.ipa_data_area>"

		InbasketURL 													is a DerivedField
			type is Alpha size 256
			restricted
			return ConfigIpaBaseUrl + "/Lpa/list/PfiQueueTask.MyWork?menu=ProcessFlowMenu.MyWork&csk.PfiInbasketLandingPage=Infor"

		DerivedParentChildMaxAmounts 									is a DerivedField
			type is like InternationalAmount
			restricted
			return (TotalLineMaximumAmount + TotalChildMaximumAmount)

		DerivedDiversityAmtFromPct 										is a DerivedField
			type is like InternationalAmount
			return (ProposedTotalContractAmount * DiversityPctOfProposedTotal)

		TotalCommitments		is a DerivedField
			type is like InternationalAmount
			return (sum GLCommitDrillRel.TransactionAmount)

		TotalPendingCommitments is a DerivedField
			type is like InternationalAmount
			return (sum BudgetTemplateGroupTotalRel.Amount)

		TotalHeaderAllowances	is a DerivedField
			type is like ContractUnitCost
				precision is CurrencyCode.NumberOfDecimals
			return (sum ContractHeaderAllowancesRel.Amount)

		TotalLineAllowances     is a DerivedField
			type is like ContractUnitCost
				precision is CurrencyCode.NumberOfDecimals
			return (sum ContractLineAllowancesRel.DerivedExtendedAmount)

		AllowancePercent is a DerivedField
			type is like Percent
			return ((TotalHeaderAllowances + TotalLineAllowances)/MaximumAmount)

		LinesForClinicalUseIndicator is a DerivedField 
			type is Alpha size up to 20
			if (HasLinesForClinicalUse)
				return "*"
			else
				return ""

		LinesNotForClinicalUseIndicator is a DerivedField 
			type is Alpha size up to 20
			if (HasLinesNotForClinicalUse)
				return "*"
			else
				return ""		

		ItemMasterLinesIndicator is a DerivedField 
			type is Alpha size up to 20 
			if (HasItemmastLines)
				return "*"
			else 
				return ""
		
		TierIndicator is a 	DerivedField
			type is Alpha size up to 20
			if (ContractTier set exists)
				return "*"
			else
				return ""

		OpenPurchaseOrderIndicator is a DerivedField
			type is Alpha size up to 20
			if (OpenSupplierChangePurchaseOrderLinesRel exists)
				return "*"
			else
				return ""

		OpenRequisitionIndicator is a DerivedField
			type is Alpha size up to 20
			if (OpenSupplierChangeRequisitionLinesRel exists)
				return "*"
			else
				return ""

		UnreleasedInvoiceIndicator is a	DerivedField
			type is Alpha size up to 20
			if (UnreleasedServiceInvoicesRel exists)
				return "*"
			else
				return ""

		PricingIdentifierIndicator 										is a DerivedField
			type is Alpha size up to 20
			if (ContractDistributorPricing set exists)
				return "*"
			else
				return ""

		CommitmentIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (UseCommitments)
				return "*"
			else
				return ""

		ParticipantIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (ContractParticipant set exists)
				return "*"
			else
				return ""

		LocationIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (ContractHeaderLocationRel exists)
				return "*"
			else
				return ""

		TierMemberIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (ContractTierMember set exists)
				return "*"
			else
				return ""

		PricingMemberIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (ContractDistributorPricingMember set exists)
				return "*"
			else
				return ""

		RebateCount 													is a DerivedField
			type is Alpha size up to 20
			if (ContractRebate set exists)
				return "(" + instance count of ContractRebate set + ")"
			else
				return ""

		RelatedDocumentCount 											is a DerivedField
			type is Alpha size up to 20
			if (RelatedContract set exists)
				return "(" + instance count of RelatedContract set + ")"
			else
				return ""

		AttachedContactCount 											is a DerivedField
			type is Alpha size up to 20
			if (ContractAttachedContact set exists)
				return "(" + instance count of ContractAttachedContact set + ")"
			else
				return ""

		CommentCount 													is a DerivedField
			type is Alpha size up to 20
			if (ContractComment set exists)
				return "(" + instance count of ContractComment set + ")"
			else
				return ""

		AttachmentCount 												is a DerivedField
			type is Alpha size up to 20
			if (ContractAttachment set exists)
				return "(" + instance count of ContractAttachment set + ")"
			else
				return ""

		MilestoneCount 													is a DerivedField
			type is Alpha size up to 20
			if (ContractMilestone set exists)
				return "(" + instance count of ContractMilestone set + ")"
			else
				return ""

		DeliverableCount 												is a DerivedField
			type is Alpha size up to 20
			if (ContractDeliverable set exists)
				return "(" + instance count of ContractDeliverable set + ")"
			else
				return ""

		PricingCount	 												is a DerivedField
			type is Alpha size up to 20
			if (ContractPricing set exists)
				return "(" + instance count of ContractPricing set + ")"
			else
				return ""

		QuestionCount 													is a DerivedField
			type is Alpha size up to 20
			restricted
			if (ContractQuestion set exists)
				return "(" + instance count of ContractQuestion set + ")"
			else
				return ""

		ArticleCount 													is a DerivedField
			type is Alpha size up to 20
			restricted
			if (ContractArticle set exists)
				return "*"

		SubcontractorCount 												is a DerivedField
			type is Alpha size up to 20
			if (ContractSubcontractor set exists)
				return "(" + instance count of ContractSubcontractor set + ")"
			else
				return ""

		RedlineCount 													is a DerivedField
			type is Alpha size up to 20
	 		if (ContractRedlineDocument set exists)
				return "(" + instance count of ContractRedlineDocument set + ")"
			else
				return ""

		DiversityCount													is a DerivedField
			type is Alpha size up to 20
			if (ContractExistingDiversityRel exists)
				return "(" + instance count of ContractExistingDiversityRel + ")"
			else
				return ""

		ManufacturerContractCount 										is a DerivedField
			type is Numeric 3
			return instance count of ManufacturerContractForDistContractRel
		
		LineIndicator 													is a DerivedField
			type is Alpha size up to 20
			if (ContractLine set exists)
				return "*"
			else
				return ""

		EmailIndicator 													is a DerivedField
			type is Alpha size up to 20
			if (ContractNotificationEmailRel exists)
				return "*"
			else
				return ""

		RetainageIndicator 												is a DerivedField
			type is Alpha size up to 20
			if (RetainagePercent1 >0)
				return "*"
			else
				return ""

		DerivedProxyEmailAddressList 									is a DerivedField 
			type is EmailAddressField with multiple addresses
			holds pii
			restricted
			include BuildProxyEmailAddressList
			return LocalProxyEmailAddressList

		DerivedSecondaryContactEmailAddressList							is a DerivedField 
			type is EmailAddressField with multiple addresses
			holds pii
			restricted
			include BuildSecondaryContactEmailAddressList
			return LocalSecondaryContactEmailAddressList

		PrimaryAndSecondaryEmailList is a StringField
			type is EmailAddressField with multiple addresses
			restricted
			PrimaryContactRel.DerivedEmail
			","
			DerivedSecondaryContactEmailAddressList

		PurchaseFromIndicator is a DerivedField
			type is Alpha size up to 20
			if (ContractPurchaseFrom set exists)
				return "*"
			else
				return ""

		DerivedHasNoContractRebateWithQualifierModifiedYes is a DerivedField
			type is Boolean
			restricted
			for each ContractRebateNotFixedRel
				if (each.QualifierChanged)
					return false
					end for each
			return true

		ReleaseWithBudgetEditsMessage is a MessageField
			restricted
			"ReleasedComplete;IfAlertListDisplaysBudgetMessagesMayExist"

		ReleaseNoEditsMessage is a MessageField
			restricted
			"ReleaseComplete"

		ReleaseMessage is a DerivedField
			type is Text
			restricted
			if (UseCommitments
			and GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
				return ReleaseWithBudgetEditsMessage
			else
				return ReleaseNoEditsMessage

		ActivateWithBudgetEditsMessage is a MessageField
			restricted
			"ActivationHasStarted;ContractWillBeActivatedIfBudgetEditsArePassed;Check'MyActions'ForCompletion"

		ActivateNoEditsMessage is a MessageField
			restricted
			"ActivationHasStarted;Check'MyActions'ForCompletion"

		ActivationMessage is a DerivedField
			type is Text
			restricted
			if (UseCommitments
			and GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
				return ActivateWithBudgetEditsMessage
			else
				return ActivateNoEditsMessage

		DerivedIDMDocPID		is a DerivedField
			type is Alpha size up to 100
			return blank								

		DerivedVersionNumber  is a DerivedField
			type is Numeric size 3
			return 0									

		DerivedCheckOutByName is a DerivedField
			type is Alpha size up to 100
			return blank								

		DerivedCheckOutTimeStamp is a DerivedField
			type is  TimeStamp
			return 0									

		DerivedLastChangedByName is a DerivedField
			type is Alpha size up to 100
			return blank								

		DerivedLastChangeTimeStamp is a DerivedField
			type is  TimeStamp
			return 0									

		DerivedDrillBack		is a DerivedField
			type is Alpha 2083
			return blank								

		DerivedIsCheckedOut is a DerivedField
			type is Boolean
			if (LatestRevisionRel.IDMUniqueId entered)
				IDMItem.IDMUniqueId 	= LatestRevisionRel.IDMUniqueId
				IDMItem.DocumentType	= "FSM_ContractRedlineDocument"
				if (IDMItem.GetItemDetails)
					return IDMItem.IDMItemDetails.IsCheckedOut

		ManufacturerMessage is a MessageField
			"Manufacturer"

		DistributorMessage is a MessageField
			"Distributor"

		ServiceMessage is a MessageField
			"Service"

		DerivedManufacturerOrDistributorOrService is a DerivedField
			type is Alpha size 20
			if (ManufacturerOrDistributor.ManufacturerContract)
				return ManufacturerMessage
			else
			if (ManufacturerOrDistributor.DistributorContract)
				return DistributorMessage
			else
				return ServiceMessage

		DerivedGPOContract is a DerivedField
			type is Numeric size 15
			restricted
			if (HasGPOSupplier
			and HasGPORelatedContract)
				if (GPORelatedContractCreateRel exists)
					return GPORelatedContractCreateRel.RelatedContractID
				if (DerivedGPOContract !entered)
					if (GPORelatedContractUpdateRel exists)
						return GPORelatedContractUpdateRel.RelatedContractID

		DerivedContractPurchaseType is a DerivedField	
			type is Numeric size 1
			restricted
			if (ContractSubtype entered)
				return ContractSubtype.PurchaseType
			else
				return ContractType.PurchaseType

		DerivedIDMContractRedlineDocumentURL is a DerivedField	
			type is Alpha 2083
			restricted
			return blank	

		DerivedUseIDMMessage					is a DerivedField
			type is MessageField
			if (UseIDMPerClassificationAndSubClass
			or UseIDM
			or IsUsingIDMTemplate)
				return "Use IDM"

		DerivedContractFileName is a StringField
			type is Alpha 100
			restricted
			"Contract Document"
			" "
			"ContractGroup"
			" "
			ContractGroup
			" "
			"Contract"
			" "
			Contract
			"-"
			IDMDocumentSequence
			ContractDocumentIDMTemplate.DerivedOutputFormat

		DerivedContractEffectiveDate is a DerivedField
			type is Date
			return EffectiveDate

		DerivedContractExpirationDate is a DerivedField
			type is Date
			return ExpirationDate

		DerivedIncludeContractCommentHeader	is a DerivedField
			type is Boolean
			if (ContractCommentPrintOnContractRel exists)
				return true

		DerivedCompletionDetailText	is a DerivedField 
			type is RichText
			if (LocalPurgeRecords)
				return DerivedPurgePOText
			else
				return DerivedReportPurgePOText

		DerivedPurgePOText is a MessageField
			"ContractPurgeHasBeenCompletedFor<LocalPurgeCount>Records."

		DerivedReportPurgePOText is a MessageField
			"ThereAre<LocalPurgeCount>ContractRecordsWhichCanBePurged."


		DerivedBODStatusCode is a DerivedField
			type is Alpha 10
			restricted
			if (LocalActionCode = "D" or LocalActionCode.Delete)
				return "Deleted"
			else
				return "Open"

		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (LocalActionCode = "C" or LocalActionCode.Create or action type.Create)
				return "Add"
			else
				return "Replace"

		DerivedBODRevision is a DerivedField
			type is Alpha 25
			restricted
			return ""

		DerivedBODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return  bod id.VariationID

		DerivedEffectiveDate is a DerivedField
			type is Alpha size 25
			restricted
			DerivedEffectiveDate = EffectiveDate
			return DerivedEffectiveDate[1:4] + "-" + DerivedEffectiveDate[5:6] + "-" + DerivedEffectiveDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
        
        DerivedExpirationDateFormatted is a DerivedField
        	type is Alpha size 25
        	restricted
        	if(ExpirationDate entered)
        		DerivedExpirationDateFormatted = ExpirationDate
        	    return DerivedExpirationDateFormatted[5:6] + "/" + DerivedExpirationDateFormatted[7:8] + "/" + DerivedExpirationDateFormatted[1:4]
        	else
        	    return ""
        	 
    	DerivedFEG is a DerivedField
			type is Alpha size 25
			restricted
			return ContractGroup.BusinessGroup.FinanceEnterpriseGroup

		DerivedAccountingEntity is a DerivedField
			type is Alpha size 25
			restricted
			return  PoCompanyRel.Company.GeneralLedgerCompany.AccountingEntity

		DerivedBODAccountingEntity is a DerivedField
			type is Alpha size 25
			restricted
			return  DerivedFEG + DerivedDelimiter + DerivedAccountingEntity

		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return current timestamp

		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			if (DerivedDelimiter="")
				return "-"

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedBODAccountingEntity + "::"  +DerivedDocumentID + ":" +"?Contract&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedDocumentID is a DerivedField
			type is Alpha size 25
			restricted
			return ContractGroup+DerivedDelimiter+Contract

		DerivedContractStatus is a DerivedField
			type is Alpha size 15
			restricted
			if(ContractStatus.Active)
				return "Open"
			else
			if(ContractStatus.Inactive)
				return "Deleted"
			else
			if(ContractStatus.Closed)
				return "Closed"
			else
				return "Pending"

		DerivedBODCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODCreateTimeStamp =  create stamp.timestamp
			return DerivedBODCreateTimeStamp[1:4] + "-" + DerivedBODCreateTimeStamp[5:6] + "-" + DerivedBODCreateTimeStamp[7:8] + "T" + DerivedBODCreateTimeStamp[9:10] + ":" + DerivedBODCreateTimeStamp[11:12] + ":" + DerivedBODCreateTimeStamp[13:14] + "Z"

		DerivedBODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODUpdateTimeStamp =  update stamp.timestamp
			return DerivedBODUpdateTimeStamp[1:4] + "-" + DerivedBODUpdateTimeStamp[5:6] + "-" + DerivedBODUpdateTimeStamp[7:8] + "T" + DerivedBODUpdateTimeStamp[9:10] + ":" + DerivedBODUpdateTimeStamp[11:12] + ":" + DerivedBODUpdateTimeStamp[13:14] + "Z"


		ContractBODXML is a DerivedField
			type is XMLDocument
			restricted
			ContractBODXML = template.IONSyncContract_Contract_Header_ST document for this instance

		ContractLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (ContractLineRel exist)
				for each ContractLineRel
					ContractLineXML += template.IONSyncContract_ContractLine_ST document for each
				return ContractLineXML
			else
				return ""


		DerivedProcessContractBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedBODAccountingEntity + "::"  +DerivedDocumentID + ":" +"?Contract&verb=Process&TrackerID=" + LocalFSMInboundBODTracker

		ProcessContractStatus is a DerivedField
			type is Alpha size 15
			restricted
			if(ContractStatus.Draft or ContractStatus.Released)
				return "Draft"
			else
			if(ContractStatus.Active)
				return "Open"
			else
			if(ContractStatus.Inactive)
				return "Deleted"
			else
			if(ContractStatus.Closed)
				return "Closed"
			else
				return "Pending"

		DerivedCrossAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if(FSMBODCrossReferenceDetailRel exists)
					LocalCrossAE = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalCrossAE
			else
				return LocalCrossAE


		DerivedProcessEffectiveDate is a DerivedField
			type is Alpha size 25
			restricted
			if (EffectiveDate ="00000000")
				return DerivedBODFormattedCurrentTimeStamp
			else
				DerivedProcessEffectiveDate = EffectiveDate
				return DerivedProcessEffectiveDate[1:4] + "-" + DerivedProcessEffectiveDate[5:6] + "-" + DerivedProcessEffectiveDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedExpirationDate is a DerivedField
			type is Alpha size 25
			restricted
			if (ExpirationDate ="00000000")
				return ""
			else
				DerivedExpirationDate = ExpirationDate
				return DerivedExpirationDate[1:4] + "-" + DerivedExpirationDate[5:6] + "-" + DerivedExpirationDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		ProcessContractBODXML is a DerivedField
			type is XMLDocument
			restricted
			ProcessContractBODXML = template.IONProcessContract_Contract_Header_ST document for this instance

		ProcessContractLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (ContractLineRel exist)
				for each ContractLineRel
					ProcessContractLineXML += template.IONProcessContract_ContractLine_ST document for each
				return ProcessContractLineXML
			else
				return ""


		POContractPulseAlertXML is a DerivedField
			type is XMLDocument
			restricted
			POContractPulseAlertXML = template.IONPOContractNotifyAlert_Contract_ST document for this instance
			return POContractPulseAlertXML

		DerivedPulseAlertBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:" + DerivedTenantID +":"+ContractGroup.BusinessGroup.FinanceEnterpriseGroup +":"+ Contract +":"+ "?POContractNotifyAlert&verb=Process"

		POContractPulseAlertDescription is a DerivedField
			type is Alpha size 200
			restricted
			return "PO agreement "+ VendorAgreementReference + " needs your review due to the Percent Ordered reaching or exceeding the Notification %"


		DerivedBudgetEditsInProgressMessage is a MessageField
			"BudgetEditsInProgress"

		DerivedBudgetEditsFailureMessage is a MessageField
			"BudgetsExceeded;SeeBudgetErrorsTab"

		DerivedActivationInProgressMessage is a MessageField
			"ActivationInProgress"

		DerivedReleaseMembersInProgressMessage is a MessageField
			"ReleaseMembersInProgress"


		DerivedPrimaryContactNameID is a DerivedField	
			type is Alpha 115
			restricted
			return PrimaryContactRel.DerivedPrimaryName + " (" + PrimaryContactRel.Contact + ")"

		ViewVendorOrPurchaseFromLocationDefaultValue is a DerivedField
			type is Numeric 1
			if (HasApPurchFrom)
				return 1
			else
				return 0


		AlertTag is a LabelField
			"Alerts"

		OnHoldMessage is a LabelField
			"OnHold"

		DerivedGenerationMessage is a DerivedField
			type is MessageField
			restricted
			if (IDMRedlineApprovals)
				return DerivedGenerationMessageForContractRedlineDocument
			else
				return DerivedGenerationMessageForContractDocument

		DerivedGenerationMessageForContractDocument is a MessageField
			restricted
			"Create_Contract_Document"

		DerivedGenerationMessageForContractRedlineDocument is a MessageField
			restricted
			"Create_Contract_Redline_Document"

		DerivedContractRedlineDocumentDescription is a MessageField
			restricted
			"Generated_Contract_Document"

		DerivedEmailMessage is a DerivedField
			type is MessageField
			restricted
			if (IDMRedlineApprovals)
				return DerivedEmailMessageForContractRedlineDocument
			else
				return DerivedEmailMessageForContractDocument

		DerivedEmailMessageForContractDocument is a MessageField
			restricted
			"Email_Contract_Document"

		DerivedEmailMessageForContractRedlineDocument is a MessageField
			restricted
			"Email_Contract_Redline_Document"

		DerivedNoIDMTemplateWarningMessage is a MessageField
			"NoAssignedIDMTemplate"

		DerivedContractVersionWithLatestAddendumDocument is a DerivedField
			type is like ContractVersion
			restricted
			return first ContractVersionWithLatestAddendumDocumentRel.ContractVersion

        MissingTemplateMsg is a MessageField
            "TheTemplateCouldNotBeFound"

        TermsAndConditionsTemplate is a DerivedField
            type is XMLDocument
            default label is untranslatable
            restricted
            LocalUserTemplate = "ContractTermsAndConditions_ST"
            if (UserTemplateRel exists)
                TermsAndConditionsTemplate = template.ContractTermsAndConditions_ST document for this instance
            else
                TermsAndConditionsTemplate = MissingTemplateMsg
            return TermsAndConditionsTemplate

        ContractTermsAndConditionsArticles is a DerivedField
            type is XMLDocument
            default label is untranslatable
            restricted
            for each ContractArticlesByDisplayRel
                ContractTermsAndConditionsArticles += each.ArticleTemplate

        TermsAndConditionsText is a DerivedField
            type is RichText
            default label is untranslatable
            return TermsAndConditionsTemplate



		DerivedWidgetIsRedAlert is a DerivedField
			type is Boolean
			if (ExpirationDateRedAlert = true)
                return true
            else
                return false

        DerivedWidgetIsYellowAlert is a DerivedField
			type is Boolean
			if (ExpirationDateYellowAlert = true)
                return true
            else
                return false

		DerivedWidgetContractRedlineApprovals is a DerivedField
			type is Boolean
			if (ContractRedlineApprovals = true)
                return true
            else
                return false
                
        DerivedOneYearReplicationData is a DerivedField
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false


		DerivedCurrentTimestamp is a DerivedField
			type is Alpha size 12
			restricted
			return current timestamp
		
		DerivedContractEvaluationTemplate is a DerivedField
			type is Numeric size 8
			if (ContractSubclassification entered)
				return ContractSubclassification.PerformanceEvaluationTemplate
			else 
				return ContractClassification.PerformanceEvaluationTemplate

		DerivedIDMDocumentType is a ConditionalField
			type is Text
			if (IDMRedlineApprovals)
				"FSM_ContractRedlineDocument"
			else
				"FSM_ContractDocument"

		DerivedIDMXMLListNoDataMessage is a MessageField
			restricted
			"ThereAreNo_Contract_XMLFilesYet"
		
		DerivedIDMXMLListNoDataDescriptionMessage is a MessageField
			restricted
			"GenerateOneThroughTheButtonBelow."
		
		DerivedOverwriteIDMXMLConfirmationMessage is a MessageField
			restricted
			"CurrentXML_FileWillBeOverwritten."
		
		DerivedCreateIDMXMLCompletionMessage is a MessageField
			restricted
			"Generated_XMLFileFor_Contract<LocalContract>"
		
		DerivedDeleteIDMXMLCompletionMessage is a MessageField
			restricted
			"Deleted_XMLFileFor_Contract<Contract>"

		DerivedFileExistsInIDM		is a DerivedField
			type is Boolean
			restricted
			if (LatestRevisionRel.IDMUniqueId entered)
				IDMItem.DocumentType  = "FSM_ContractRedlineDocument"
				IDMItem.IDMUniqueId   = LatestRevisionRel.IDMUniqueId
				IDMItem.OverrideUser  = true
				LocalExecute          = IDMItem.GetItemDetails
				return LocalExecute

	Conditions
		CanCreateEvaluation
			when (((ContractSubclassification entered
			and	ContractSubclassification.PerformanceEvaluationTemplate entered)
			or  (ContractClassification entered
			and ContractClassification.PerformanceEvaluationTemplate entered
			and ContractSubclassification !entered)
			and !ContractStatus.Closed
			and !ContractTemplate))

		PerformanceEvaluationExists
			when ((ContractSubclassification entered
			and	ContractSubclassification.PerformanceEvaluationTemplate entered)
			or  (ContractSubclassification !entered
			and ContractClassification.PerformanceEvaluationTemplate entered))

		DistHasLocationMembers   
			restricted
			when (LocationPricingMembersRel exists)

		DistHasCompanyMembers 
			restricted 
			when (CompanyPricingMembersRel exists)

		DistHasPricingGroupMembers 
			restricted
			when (PricingGroupPricingMembersRel exists) 

		EvaluationExists
			when (ContractPerformanceEvaluationRel exists)

		ActivatedTimestampEntered
			restricted
			when (ActivatedTimestamp entered)
			
		HasAggregatedDistributions
			restricted 
			when (ContractDistributionAggregationRel exists)
		
		FinalApprovalTimestampEntered
			restricted
			when (FinalApprovalTimestamp entered)

		NegotiationApprovalTimestampEntered
			restricted
			when (NegotiationApprovalTimestamp entered)

		SupplierApprovalTimestampEntered
			restricted
			when (SupplierApprovalTimestamp entered)

		InternalApprovalTimestampEntered
			restricted
			when (InternalApprovalTimestamp entered)

		ReleasedTimestampEntered
			restricted
			when (ReleasedTimestamp entered)

		AcceptedOrRejectedTimestampEntered
			restricted
			when (AcceptedOrRejectedTimestamp entered)

		SubmittedTimestampEntered
			restricted
			when (SubmittedTimestamp entered)

		ContractSubClassificationEntered
			restricted
			when (ContractSubclassification entered)

		DisplayContractAllowancesSection
			when (ContractAllowancesRel exists
			and ContractType.PurchaseType.Service)

		RolledOverCommitmentsExist 
			when (RolledOverCommitRel exists)
		
		EntityLedgerPeriodRelExists 
			when (EntityLedgerPeriodRel exists)

		NewGeneralLedgerCalendarPeriodRelExists
			when (NewGeneralLedgerCalendarPeriodRel exists)
		
		ContractHasUnansweredConditionalQuestions 
			restricted
			when (ContractConditionalQuestionCreatedRel exists)
		
		ContractHasConditionalQuestions
			restricted 
			when (ContractConditionalQuestionsCreatedRel exists)
		
		DisplayRequesterProposalQuestions 
			restricted 
			when (ContractQuestionsExist
			and  !ContractHasUnansweredConditionalQuestions)
		
        HasAttributeUpdates 
            restricted 
            when (AttributeUpdatesRel exists)

		HasLocations 
			restricted 
			when (ContractLocationRel exists)
		
		ClassificationNotShowingHealthcare 
			restricted 
			when ((ContractSubclassification entered
			and    ContractSubclassification.ShowHealthcareInformation = false)
			or     ContractClassification.ShowHealthcareInformation = false)
		
		ClassificationNotDefaultingClinicalUse
			restricted 
			when ((ContractSubclassification entered
			and    ContractSubclassification.EnableClinicalSystemUseLocations = false)
			or     ContractClassification.EnableClinicalSystemUseLocations = false)
			
		HasLinesForClinicalUse 
			restricted 
			when (LinesForClinicalUseRel exists)

		HasLinesNotForClinicalUse 
			restricted
			when (LinesNotForClinicalUseRel exists)
		
		NoClinicalLocations 
			when (HasBeenActivated
			and   ContractClinicalLocationRel !exists)
		
		HasItemmastLines 
			restricted 
			when (ItemMasterLinesRel exists)
		
		HasClinicalLocations 
			restricted 
			when (ContractClinicalLocationRel exists)
		
        CanMaintainClinical 
            restricted 
            when (NotClosed
            and   EnableClinicalSystemUseLocations)

		EnableClinicalSystemUseLocationsFalse
			restricted 
			when (EnableClinicalSystemUseLocations = false)
		
		HasTaxDefaults 
			restricted 
			when (ContractHeaderLocationForTaxRel exists
			or    ContractLineLocationForTaxRel exists 
			or    ContractLineWithTaxRel exists) 

		HasHeaderTaxLocations 
			restricted 
			when (ContractHeaderLocationForTaxRel exists)

		HasLineTaxLocations 
			restricted 
			when (ContractLineLocationForTaxRel exists )

		HasLineTax 
			restricted 
			when (ContractLineWithTaxRel exists)
		
		HasLocationsNotForClinicalUse
			restricted
			when (ContractLocationNotForClinicalUseRel exists)
		
		CanDisplayClinicalOnList 
			restricted 
			when (EnableClinicalSystemUseLocations
			and  !ContractTemplate
			and  !ContractStatus.Closed)
		
		CanUseClinicalContractLocations   
			restricted 
			when (ContractGroup.EnableClinicalSystemUseLocations
			and  (NonServicePurchaseType
			and  (!IsDistributorContract
			or   (IsDistributorContract
			and   DistDirectContractLinesExist)))
			or    IsManufacturerContract)

		CanMassCreateClinicalContractLocations
			restricted 
			when (EnableClinicalSystemUseLocations)

		CanUseAnyLocations 
			restricted
			when ((EnableClinicalSystemUseLocations
            and    NonServicePurchaseType)
            or    (ContractGroup.EnableTaxOverrideLocations
            and    HasAPurchaseType))
		
		CanEnableForClinicalUse 
			restricted 
			when (!EnableClinicalSystemUseLocations
			and   NotClosed
			and  (NonServicePurchaseType
			and  (!IsDistributorContract
			or   (IsDistributorContract
			and   DistDirectContractLinesExist)))
			or    IsManufacturerContract)

		AllowedForContractRebateReporting
			restricted
			when (ContractRebatePerRebateTypeRel exists
			and  (ContractStatus.Active
			or    ContractStatus.Addendum
			or    ContractStatus.Amendment))

		IsHSNSACCodeEnabled
			restricted
			when (ContractGroup.BusinessGroup.UseHSNSACCode)

		ContractTypeAllowsZeroMaxQuantity
			restricted
			when (((ContractSubtype not entered)
			and    (ContractType.PurchaseType.Service)
			and    (ContractType.AllowNoMaxServiceItems))
			or    ((ContractSubtype entered)
			and    (ContractSubtype.PurchaseType.Service)
			and    (ContractSubtype.AllowNoMaxServiceItems)))

		HasSomeAmountServices 
			restricted 
			when (ServiceAmountLineRel exists)
		
		HasSomeQuantityServices 
			restricted 
			when (ServiceAmountLineRel !exists
			and   ServiceQuantityLineRel exists)

		CanDisplaySpread
			restricted
			when (UseLineSpreadCommitments
			and   NotContractTemplate)		
		
		MultiplePriceProgram
			restricted
			when (IsManufacturerContract
			and   ContractImportTierMemberMPPRel exists)

		HasTotalInvoicedAmount  
			restricted
			when (TotalInvoicedAmount > 0)

		HasLinesWithMismatchedDates
			restricted
			when  (LineDateMismatchRel exists)

		HasReleasedOrHistoryCommitments
			restricted
			when (ReleasedOrHistoryCommitRel exists)

		HasDistributorOnlyLineMembers
			restricted
			when (DistributorOnlyLineMemberRel exists)

		NoMissingAllowances
			restricted
			when (ContractLineVendorDeterminedNoAllowanceRel !exists)

		HasMessageDialog
			restricted
			when (SupplierContactMessageRel exists)

		HasMessageDialogOther
			restricted
			when (SupplierMessageDialogRel exists)

		PrimaryContactCanCreateDialog
			restricted
			when (SupplierGroupRel.CanCreateDialogWithSupplier
			and   SupplierContactHasContractAccess
			and  (ContractStatus.Active
			or    ProposedContract > 0))

		SupplierContactHasContractAccess
			restricted
			when (SupplierSourceId.HasContractAccess)

		ParentChildMaxExceedsMax
			restricted
			when (DerivedParentChildMaxAmounts > MaximumAmount
			and   MaximumAmount > 0)

	    CanUpdateActive
			restricted
			when (AllowActiveUpdates = false
			and   CanModifyActive
			and   NegotiatingOrActive)

		CanModifyActive
			restricted
			when (ContractGroup.AllowActiveUpdate)

		ChangeOrdersForVersion
			restricted
			when (CurrentVersionForChangeOrder = CurrentVersionThatHasChangeOrder)

		VendorEntered
			restricted
			when (Vendor entered)

		CanShowVersion
			restricted
			when (CurrentVersionForChangeOrder > 0)

        CanCreateChangeOrder
            when (AllowChangeOrder
            and  (ContractStatus.Active
            or  ((ContractStatus.Addendum
            or    ContractStatus.Amendment)
            and  (!ChangeOrdersForVersion
            or   (ChangeOrdersForVersion
            and   ChangeOrderAllowMultiples)))))

		SupplierCanCreateChangeOrder
			restricted
			when (CanCreateChangeOrder
			and   ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier			= actor.agent(SupplierSourceId).Supplier
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId)

		ChangeOrdersByRequester
			restricted
			when (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization = actor.agent(Employee).Employee.HROrganization
			and   first ContractVersionDescendingRel.ChangeOrderRequester = actor.agent(Employee).Employee)

		ChangeOrdersByContractOwner
			restricted
			when (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization = actor.agent(Employee).Employee.HROrganization
			and   Contract.PrimaryContactRel.Contact = actor.agent(Employee).Employee)

		AnyChangeOrderExists
			when (ContractVersionsForChangeOrderRel exists)

		ChangeOrdersNotCompleted
			restricted
			when (ContractVersionsForChangeOrderNotCompletedRel exists)

		AnyCompletedOrRejectedChangeOrderExists
			restricted
			when (ContractVersionsForChangeOrderCompletedOrRejectedRel exists)

		HasAllowances
			restricted
			when (ContractAllowance set exists)

		HasCommittedAllowances
			restricted
			when (CommittedAllowancesRel exists)

		HasHeaderOnlyAllowances
			restricted
			when (ContractHeaderAllowancesRel exists)

		HasOpenHeaderOnlyAllowances
			restricted
			when (ContractOpenHeaderAllowancesRel exists)

		UpdateActiveAllowed
			restricted
			when (AllowActiveUpdates
			and   NegotiatingOrActive)

		CanChangeSupplier
			restricted
			when (ContractLinesExist
			and  (HasAPurchaseType
			or    ManufacturerIndirect
			or   (!HasAPurchaseType
			and   ProposedContract = 1))
			and  (DraftOrAddendumOrAmendment
			or   (NegotiatingOrActive
			and   ContractGroup.DisallowSupplierUpdate = false)))
		ManufacturerIndirect
			restricted
			when (IsManufacturerContract
			and   NoPurchaseType)
		CanUpdateDates
			restricted
			when ((!ContractExists
			or     !ContractLinesExist)
			and    !CannotUpdateGPO)
		CanUseUpdateDatesAction
			restricted
			when ((DraftOrAddendumOrAmendment
			or    (NegotiatingOrActive
			and    ContractGroup.DisallowDateUpdate = false))
			and    ContractExists
			and   !CannotUpdateGPO
			and    ContractLinesExist)
		CanUpdateMaximumAmount
			restricted
			when ((DraftOrAddendumOrAmendment
			or   !ContractExists
			or   (NegotiatingAndReady
			and   ContractGroup.DisallowMaxAmountUpdate = false)
			or   (ContractStatus.Active
			and   ContractGroup.DisallowMaxAmountUpdate = false
			and  !CreateCommitments.Header))
			and   ChangeOrderMaxUpdatesAllowed)

		ChangeOrderMaxUpdatesAllowed
			restricted
			when (!HasBeenActivated
			or   !AllowChangeOrder
			or    ChangeOrderAllowUpdates)

		CanUpdateRetainage
			restricted
			when (DraftOrAddendumOrAmendment
			or   !ContractExists
			or   (NegotiatingOrActive
			and   ContractGroup.DisallowRetainageUpdate = false))

		CanUpdateCommitments
			restricted
			when (DraftOrAddendumOrAmendment
			or   (NegotiatingAndReady
			and   ContractGroup.DisallowCommitmentUpdate = false))

		SkipContractPurge
			restricted
			when ((AgreementType.Standing
			and  MaximumReleaseNumber entered
			and  MaximumReleaseNumber != LastPORelease)
			or   (PoCompanyRel exists and OpenPurchaseOrderLineWithContractRel exists))

		HasIDMDocument
			restricted
			when (((UseIDM
			or      IsUsingIDMTemplate)
			and     IDMDocumentPID entered)
			or	   (HasIDMRedlineDocument
			and     IDMRedlineApprovals))

		PaymentTermDifferentFromVendorLocation
			when (TermsCode entered
			and   ApPoPurchaseFrom.VendorLocation entered
			and   ApPoPurchaseFrom.VendorLocation.TermsCode entered
			and   ApPoPurchaseFrom.VendorLocation.TermsCode != TermsCode)

		PaymentTermDifferentFromPurchaseFrom
			when (TermsCode entered
			and   ApPoPurchaseFrom.PurchaseFromLocation entered
			and   ApPoPurchaseFrom.PurchaseFromLocation.TermsCode entered
			and   ApPoPurchaseFrom.PurchaseFromLocation.TermsCode != TermsCode)
		
		PaymentTermDifferentFromVendor
			when (TermsCode entered
			and   ApPoPurchaseFrom.VendorLocation.TermsCode !entered
			and   ApPoPurchaseFrom.PurchaseFromLocation.TermsCode !entered
			and   Vendor.TermsCode entered
			and   Vendor.TermsCode != TermsCode)

		NoUnreleasedInvoiceDetailsExist
			when (UnreleasedPayablesInvoiceDetailRel !exists)

		DistributorLineMembersExist
			restricted
			when (DistributorContractLineMemberForUpdatesRel exists)

		CanDeleteNoTemplates
			restricted
			when (!ProcurementTemplateLinesExist
			and  (ContractStatus.Draft
			or    ContractStatus.ReadyToActivate
			or    ContractStatus.Addendum
			or    ContractStatus.Amendment
			or    ContractStatus.Active))

		CanDeleteWithTemplates
			restricted
			when (ProcurementTemplateLinesExist
			and  (ContractStatus.Draft
			or    ContractStatus.ReadyToActivate
			or    ContractStatus.Addendum
			or    ContractStatus.Amendment
			or    ContractStatus.Active))

		HasUnreleasedPricingMembers
			restricted
			when (DistributorContractUnreleasedPricingMemberRel exists)

		FromCostComparisonExists
			restricted
			when (ContractLineFromCostCompareEmailRel exists)

		UnresolvedSuggestedLineItemsExist
			restricted
			when (UnresolvedSuggestedLineItemsRel exists)

		CanEnterSupplier
			restricted
			when (!CanChangeSupplier
			and   ContractExists)

		HasGPORelatedContract
			restricted
			when (GPORelatedContractCreateRel exists)

		ContractSourceIsSupplier
			restricted
			when (ContractSource = 8)

		HasGPOSupplier
			restricted
			when (GPOSupplier entered)

		ProposedByRequester
			restricted
			when (ProposalRequester entered)

		PrimaryContactEntered
			restricted
			when (PrimaryContactRel exists)

		ResolvedSuggestedLineItemsExist
			restricted
			when (ResolvedSuggestedLineItemsRel exists)

		ToCostComparisonExists
			restricted
			when (ContractCostCompareToRel exists)

		HasContractComplianceInvoiceLinesOnContract
			restricted
			when (ContractLinesWithContractComplianceInvoiceLinesOnContractRel exists)

		HasContractComplianceInvoiceLinesOffContract
			restricted
			when (ContractLinesWithContractComplianceInvoiceLinesOffContractRel exists)

		SuppliersCanViewAllContracts
			restricted
			when (Supplier.SupplierGroup.DisplayContractsToAll = true)

		DisplayPurchaseFroms
			restricted
			when (!ApPoPurchaseFromEntered
			and   Vendor entered
			and   ContractOrBlanketOrCatalog)

		CanCreatePurchaseFroms
			restricted
			when (DisplayPurchaseFroms
			and  !ContractTemplate
			and  !ContractStatus.Closed)

		CanCreatePurchaseFromsAndHasParticipants
			restricted
			when (CanCreatePurchaseFroms
			and   ParticipantsOrMembersExist)

		ApPoPurchaseFromEntered
			restricted
			when (ApPoPurchaseFrom entered)

		HasPurchaseFromInformation
			restricted
			when (ApPoPurchaseFromEntered
			or    ContractPurchaseFromRels exists)

		HasNonFinishedTriggers
			restricted
			when (BackgroundGroupNonFinishedTriggersRel exists)

		HasGroupDefaultCurrency
			restricted
			when (ContractGroup.DefaultCurrency entered)

		SupplierCanViewContract
			restricted
			when  (SupplierGroupRel.DisplayContractsToAll
			or   (!SupplierGroupRel.DisplayContractsToAll
			and    SupplierSameAsContractSupplier))

		ContractsForCostDefaultingCondition
			when  (ExpirationDateWithinRange
			and   (ContractStatus.Active
			or     ContractStatus.Amendment
			or     ContractStatus.Addendum)
			and    ContractOrBlanketOrCatalog
			and   !CapitatedContract)

		ContractsForAssociatedItemCondition
			when  (ContractStatus.Active
			or     ContractStatus.Amendment)

		DocumentTemplateNotEntered
			restricted
			when (ContractDocumentTemplate !entered)

		AtLeastOneDayToExpiration
			when (ExpirationDateEntered
			and   !ContractStatus.Closed
			and  (ExpirationDate - current date = 1 day
			or    ExpirationDate = current date
			or    ExpirationDate < current date))

		OneDayToExpiration
			when (ExpirationDateEntered
			and   ExpirationDate - current corporate date = 1 day
			and   !ContractStatus.Closed)

		PastExpirationDate
			when (ExpirationDateEntered
			and   ExpirationDate < current corporate date
			and   !ContractStatus.Closed)
		
		EffectiveContracts
			when (!ContractStatus.Closed
			and   HasBeenActivated
			and   EffectiveDate <= current corporate date
			and  (ExpirationDate !entered
			or   ExpirationDate >= current corporate date))

		EffectiveDateWithinRange
			restricted
			when (EffectiveDate within EffectiveDateRange)

		BudgetEditingInformationExists
			restricted
			when (BudgetTemplateGroupTotalRel exists)

		RelatedProjectContractsExist
			restricted
			when (ContractExists
			and   ProjectVendorContractsRel exists
			and   ProjectContractsRel exists)

		CommitmentSearchFilter
			restricted
			when (MatchesAccountingEntitySearch
			and	  MatchesAccountingUnitSearch
			and	  MatchesProjectSearch
			and	  MatchesFinDim1Search
			and	  MatchesFinDim2Search
			and	  MatchesFinDim3Search
			and	  MatchesFinDim4Search
			and	  MatchesFinDim5Search
			and	  MatchesFinDim6Search
			and	  MatchesFinDim7Search
			and	  MatchesFinDim8Search
			and	  MatchesFinDim9Search
			and	  MatchesFinDim10Search
			and	  MatchesAccountSearch)

		ApprovalsExist
			restricted
			when (ContractExists
			and  (HasWorkunit
			or    HasWorkunit2
			or    HasWorkunit3
			or    HasWorkunit4
			or    HasWorkunit5))
		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		HasWorkunit2
			restricted
			when (PfiWorkunitRel2 exists)

		HasWorkunit3
			restricted
			when (PfiWorkunitRel3 exists)

		HasWorkunit4
			restricted
			when (PfiWorkunitRel4 exists)

		HasWorkunit5
			restricted
			when (PfiWorkunitRel5 exists)

		MatchProcurementTemplateLineItem
			restricted
			when (ProcurementTemplateContractLineRel exists)

		ProcurementTemplateLineItemExists
			restricted
			when (ContextItem entered)

		ContractLineExists
			restricted
			when (ContractLineRel exists)

		HoldCodeEntered
			restricted
			when (ProcurementReasonCode entered)

		ProcurementTemplateLinesExist
			restricted
			when (ProcurementTemplateLineRel exists)

		AddAddendum
			restricted
			when (ContractStatus.Draft
			or    ContractStatus.Addendum)

		SupplierSameAsContractSupplier
			restricted
			when (Supplier 		= actor.agent(SupplierSourceId).Supplier
			and   ContractGroup = actor.agent(SupplierSourceId).SupplierGroup)

		OpenServiceContractLinesExist
			restricted
			when (OpenServiceContractLinesRel exists)

		HasUnreleasedCommitments
			restricted
			when (UnreleasedGLCommitDrillRel exists)

		HasScheduleFrequency
			restricted
			when (ScheduleFrequency > 0)

		AmountOnlyServiceContract
			restricted
			when (ServicePurchaseType
			and   !ServiceContractQuantityRel exists)

		PricingMembersNeededForDirectBuy
			when (IsDistributorContract
			and   InProgress
			and   ManufacturerPricingMembersExist
			and   DistDirectContractLinesExist)

		ManufacturerPricingMembersExist
			when (ManufacturerPricingMembersRel exists)

		NonManufacturerPricingMembersExist
			when (NonManufacturerPricingMembersRel exists)

		DistDirectContractLinesExist
			when (DistDirectContractLinesRel exists)

		CanAmend
			restricted
			when (ContractStatus.Draft
			or 	  ContractStatus.Addendum
			or    ContractStatus.Amendment)

		IsAddendumOrAmendment
			restricted
			when (ContractStatus.Addendum
			or    ContractStatus.Amendment)

		IsActiveOrAddendumOrAmendment
			restricted
			when (IsAddendumOrAmendment
			or    ContractStatus.Active)

		ContractChangesExist
			restricted
			when (AddendumExists
			or    AmendmentExists)

		InactivateAmendmentContract
			restricted
			when (AmendmentExists
			and  !InMatrixApprovalProcess)

		InactivateAddendumContract
			restricted
			when (AddendumExists
			and  !InMatrixApprovalProcess)

		CanRejectActivation 
			restricted 
			when (!HasBeenActivated
			and   !InMatrixApprovalProcess)
		
		CanDisapprove 
			restricted 
			when (!ContractChangesExist
			and   !InMatrixApprovalProcess)

		CanDisapproveAmendment
			restricted 
			when (AmendmentExists 
			and  !InMatrixApprovalProcess)

		CanDisapproveAddendum 
			restricted 
			when (AddendumExists
			and  !InMatrixApprovalProcess)
		
		ActiveWithMaximumAmount
			restricted
			when (ContractStatus.Active
			and   MaximumAmount > 0)

		ActiveWithMaximumAmountNoPercent
			restricted
			when (ActiveWithMaximumAmount
			and   NotificationPercent = 0)

		ActiveWithMaximumAmountWithPercent
			restricted
			when (ActiveWithMaximumAmount
			and   NotificationPercent > 0)

		NegotiatingOrActive
			restricted
			when ((ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate)
			or   (ContractStatus.Active))

		NegotiatingAndReady
			restricted
			when ((ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate))
		DraftInProgress
			restricted
			when (ContractStatus.Draft
			or	  ContractStatus.Released
			or    ContractStatus.Negotiation
			or    ContractStatus.FinalApproval
			or    ContractStatus.ReadyToActivate)

		DraftOrAddendumOrAmendment
			restricted
			when (ContractStatus.Addendum
			or    ContractStatus.Amendment
			or    ContractStatus.Draft)

		DraftOrAddendumOrAmendmentOrNew
			restricted
			when (DraftOrAddendumOrAmendment
			or   !ContractExists)

		DraftOrNew
			restricted
			when (ContractStatus.Draft
			or   !ContractExists)

		AmendInProgress
			restricted
			when (ContractStatus.Addendum
			or    ContractStatus.Amendment
			or	  ContractStatus.Released
			or    ContractStatus.Negotiation
			or    ContractStatus.FinalApproval
			or    ContractStatus.ReadyToActivate
			and   ContractChangesExist)

		ActiveOrAmendInProgress
			restricted
			when (ContractStatus.Active
			or	  ContractStatus.Addendum
			or    ContractStatus.Amendment
			or	  ContractStatus.Released
			or    ContractStatus.Negotiation
			or    ContractStatus.FinalApproval
			or    ContractStatus.ReadyToActivate
			and   ContractChangesExist)

		InProgress
			restricted
			when ((ContractStatus.Draft)
			or	 (ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate)
			or   (ContractStatus.Addendum)
			or   (ContractStatus.Amendment))

		InProgressOrActive
			restricted
			when ((ContractStatus.Draft)
			or	 (ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate)
			or   (ContractStatus.Addendum)
			or   (ContractStatus.Amendment)
			or   (ContractStatus.Active))

		NotInApprovals
			restricted
			when (ContractStatus.Draft
			or    ContractStatus.Negotiation
			or    ContractStatus.FinalApproval
			or    ContractStatus.Addendum
			or    ContractStatus.Amendment)

		CanActivate
			restricted
			when (!OnHold
			and   !BudgetEditInProgress
			and   !ActivationInProgress
			and   !InMatrixApprovalProcess)

		RebateEligible
			restricted
			when (ContractStatus.Active
			or	  OnceWasActiveAgainRebateEligible)

		ContractIsValidForBackorder	
			restricted
			when (Contract.HasBeenActivated
			and   NonServicePurchaseType
			and   NotClosed
			and  (ExpirationDate !entered
			or    !PastExpirationDate))

		InProcessContracts
			restricted
			when (InProgress
			and  ProposedContract != 1
			and  ProposedContract != 4
			and !ContractTemplate)

		HasSubcontractors
			restricted
			when (ContractSubcontractorRels exists)

		HasCompareContract
			restricted
			when (ContractLineCostCompareContractRel exists)

		HasCompareImport
			restricted
			when (ContractLineCostCompareImportRel exists)

		HasCompareTier
			restricted
			when (ContractLineCostCompareTierRel exists)

		NoPurchaseType
			restricted
			when (((ContractSubtype not entered)
			and    (ContractType.PurchaseType = blank))
			or    ((ContractSubtype entered)
			and    (ContractSubtype.PurchaseType = blank)))

		DisplayNoContractLinesPanel 
			restricted 
			when (NoPurchaseType
			and  !HasGPOSupplier)
		
        DisplayGPOLinesPanel 
            restricted 
            when (!ServicePurchaseType
            and    HasGPOSupplier)

		HasAPurchaseType
			restricted
			when (((ContractSubtype not entered)
			and   (ContractType.HasAPurchaseType))
			or   ((ContractSubtype entered)
			and   (ContractSubtype.HasAPurchaseType)))

		NonServicePurchaseType
			restricted
			when (((ContractSubtype not entered)
			and   (ContractType.NonServicePurchaseType))
			or   ((ContractSubtype entered)
			and   (ContractSubtype.NonServicePurchaseType)))

		NonServicePurchaseTypeNotGPO
			restricted
			when (NonServicePurchaseType
			and  !GPONegotiated
			and  !DisplayCapitatedLines
			and  !DisplayCapitatedComponentLines)

		BlanketOrStandingOrServices
			restricted
			when ((ContractSubtype not entered
			and   ContractType.BlanketOrStandingOrServicesType)
			or   (ContractSubtype entered
			and   ContractSubtype.BlanketOrStandingOrServicesType))

		BlanketOrStanding
			restricted
			when ((ContractSubtype not entered
			and    ContractType.BlanketOrStandingType)
			or    (ContractSubtype entered
			and    ContractSubtype.BlanketOrStandingType))

		StandingOrService
			restricted
			when ((ContractSubtype not entered
			and    ContractType.StandingOrServiceType)
			or    (ContractSubtype entered
			and    ContractSubtype.StandingOrServiceType))

		ServicePurchaseType
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ServiceType)
			or    (ContractSubtype entered
			and    ContractSubtype.ServiceType))

		StandingPurchaseType
			restricted
			when ((ContractSubtype not entered
			and    ContractType.PurchaseType.Standing)
			or    (ContractSubtype entered
			and    ContractSubtype.PurchaseType.Standing))

		ContractPurchaseType
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ContractPurchaseType)
			or    (ContractSubtype entered
			and    ContractSubtype.ContractPurchaseType))

		BlanketPurchaseType
			restricted
			when ((ContractSubtype not entered
			and    ContractType.BlanketType)
			or    (ContractSubtype entered
			and    ContractSubtype.BlanketType))

		CatalogQuotePurchaseType
			restricted
			when ((ContractSubtype not entered
			and    ContractType.CatalogQuoteType)
			or    (ContractSubtype entered
			and    ContractSubtype.CatalogQuoteType))

		ContractOrBlanket
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ContractOrBlanketType)
			or    (ContractSubtype entered
			and    ContractSubtype.ContractOrBlanketType))

		ContractOrBlanketOrService
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ContractOrBlanketOrServiceType)
			or    (ContractSubtype entered
			and    ContractSubtype.ContractOrBlanketOrServiceType))

		ContractOrBlanketOrCatalog
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ContractOrBlanketOrCatalogType)
			or    (ContractSubtype entered
			and    ContractSubtype.ContractOrBlanketOrCatalogType))

		ContractOrCatalog
			restricted
			when ((ContractSubtype not entered
			and    ContractType.ContractOrCatalogType)
			or    (ContractSubtype entered
			and    ContractSubtype.ContractOrCatalogType))

		ContractTypeOrSubTypeChanged
			restricted
			when ((ContractSubtype changed
			or     ContractType changed)
			and    old SourcingOutputType != SourcingOutputType)

		ChangeToHasAPurchaseType
			restricted
			when (ContractTypeOrSubTypeChanged
			and   HasAPurchaseType
			and ((ContractSubtype not entered
			and   old ContractType.NoPurchaseType)
			or   (ContractSubtype entered
			and   old ContractSubtype.NoPurchaseType)))

		NotTemplateAndHasAPurchaseType
			restricted
			when (HasAPurchaseType
			and   NotContractTemplate)

		NotTemplateNotManufacturer
			restricted
			when (NotTemplateAndHasAPurchaseType
			and  !IsManufacturerContract)

		NeedsFullAccountingString
			restricted
			when (ServicePurchaseType
			or    StandingPurchaseType
			or    UseLineCommitments)

		BlanketPurchaseOrdersExist
			restricted
			when (BlanketPurchaseType
			and   PurchaseOrderForBlanketStandingRel exists)

		StandingPurchaseOrdersExist
			restricted
			when (StandingPurchaseType
			and   PurchaseOrderForBlanketStandingRel exists)

		HeaderCommitmentComponentsEntered
			restricted
			when (CreateCommitments.Header
			and   CommitmentCompany entered
			and   CommitmentAccount entered
			and   MaximumAmount entered
			and   EffectiveDate entered)

		CommitmentsExist
			restricted
			when (UseCommitments
			and   HasBeenActivated)

		ReleasedCommitmentExists
			restricted
			when (CommitmentsExist
			and   GLCommitRel.Status = 3)

		HistoryCommitmentExists
			restricted
			when (CommitmentsExist
			and   GLCommitRel.Status = 1)

		NoLinesFromRQ
			restricted
			when (ContractLineFromRQRel !exists)

		UseCommitments
			restricted
			when (CreateCommitments.Header
			or    CreateCommitments.Line
			or    CreateCommitments.HeaderSpread
			or	  CreateCommitments.LineSpread)

		UseSpreadCommitments
			restricted
			when (CreateCommitments.HeaderSpread
			or	  CreateCommitments.LineSpread)

		BudgetErrorsExist
			when (BudgetEditErrorRel exists)

		WarningBudgetErrorsExist
			when (!CreateCommitments.Header
			and   UseCommitments
			and   WarningBudgetEditErrorRel exists)

		BudgetEditInProgress
			restricted
			when (BudgetEditProcessing = 1)

		BudgetEditFailure
			restricted
			when (BudgetEditProcessing = 2
			or    BudgetErrorsExist)

		HasDefaultPricingIdentifier
			restricted
			when (DefaultDistributorPricingRel exists)

		HasDescription 
			restricted 
			when (Description entered)
		
		TransientTemplateEntered 
			restricted 
			when (TransientProposalTemplate entered)
		
		HasItemProposalAttachment 
			restricted 
			when (ContractProposalItemAttachmentRel exists)
		
		HasProposalTemplate 
			restricted 
			when (TemplateRelatedContractRel exists)
		
		NotClosedAndNotTemplate 
			restricted 
			when (NotClosed
			and   ContractTemplate = false)
		
		NotClosedAndNotTemplateAndNotService
			restricted 
			when (NotClosedAndNotTemplate
			and  !ServicePurchaseType)
		
		LineTierCostExists
			restricted
			when (ContractLineTierCostForTierRel exists)

		CompareLineTierCostExists
			restricted
			when (ContractLineTierCostForCompareTierRel exists)

		HasDefaultTier
			restricted
			when (DefaultTierRel exists)
		UseSomeCommitments
			restricted
			when (UseHeaderCommitments
			or    UseLineCommitments)
		UseHeaderOnlyCommitments
			restricted
			when (CreateCommitments.Header)
		UseHeaderCommitments
			restricted
			when (CreateCommitments.Header
			or    CreateCommitments.HeaderSpread)
		UseHeaderSpreadCommitments
			restricted
			when (CreateCommitments.HeaderSpread)
		UseLineCommitments
			restricted
			when (CreateCommitments.Line
			or    CreateCommitments.LineSpread)
		UseOnlyLineCommitments
			restricted
			when (CreateCommitments.Line)
		UseLineSpreadCommitments
			restricted
			when (CreateCommitments.LineSpread)
		AvailableToCreateSpread
			restricted
			when (UseHeaderSpreadCommitments
			and  !ContractSpreadRel exists
			and   NotContractTemplate)
		UseLineMaximums
			restricted
			when (!UseCommitments
			and   ContractSpreadRel exists)

		AvailableToUpdateSpread
			restricted
			when (UseHeaderSpreadCommitments
			and   ContractSpreadRel exists
			and   NotContractTemplate)
		AvailableToCreateLineSpread
			restricted
			when (UseLineSpreadCommitments
			and  !ContractLineDistSpreadRel exists
			and  !CommitmentsClosed
			and   NotContractTemplate)

		AvailableToUpdateLineSpread
			restricted
			when (UseLineSpreadCommitments
			and   ContractLineDistSpreadRel exists
			and  !CommitmentsClosed
			and   NotContractTemplate)
		NotContractTemplate
			restricted
			when (!ContractTemplate)
		NotTemplateNotInProgress
			restricted
			when (NotContractTemplate
			and  !InProgress)

		EligibleForPreferredContract
			restricted
			when (NonServicePurchaseType
			and   NotContractTemplate)

		SupplierHasValidDiversity
			when (SupplierDiversitySelectionRel exists)

		SupplierHasValidDiversityOrExists
			when (SupplierHasValidDiversity
			or    ContractExistingDiversityRel exists)

		SupplierHasValidDiversityOrExistsClosed
			when (SupplierHasValidDiversityOrExists
			and   ContractStatus.Closed)

		SupplierHasValidDiversityOrExistsNotClosed
			when (SupplierHasValidDiversityOrExists
			and  !ContractStatus.Closed)

		IsManufacturerContract
			when (ManufacturerOrDistributor.ManufacturerContract)

		IsDistributorContract
			when (ManufacturerOrDistributor.DistributorContract)

		ContractAndNotManOrDist
			restricted
			when (IsNotDistributorAndNotManufacturer
			and   ContractOrBlanketOrCatalog)

		IsNotDistributorContract
			restricted
			when (!ManufacturerOrDistributor.DistributorContract)

		IsNotDistributorAndNotManufacturer
			restricted
			when ((!ManufacturerOrDistributor.DistributorContract)
			and  (!ManufacturerOrDistributor.ManufacturerContract))

		IsNotDistributorAndNotManufacturerAndNotService
			restricted
			when (IsNotDistributorAndNotManufacturer
			and   !ServicePurchaseType)

		IsNotDistributorAndNotManufacturerAndNotTemplate
			restricted
			when ((IsNotDistributorAndNotManufacturer)
			and  (NotContractTemplate))

		IsManufacturerContractInProgress
			restricted
			when (IsManufacturerContract
			and   InProgress)

		IsDistributorContractInProgress
			restricted
			when (IsDistributorContract
			and   InProgress)

		IsNotManOrDistInProgress
			restricted
			when (IsNotDistributorAndNotManufacturerAndNotService
			and   InProgress)

		IsNotDistributorAndNotManufacturerAndNotTemplateAndPurchaseType
			restricted
			when (IsNotDistributorAndNotManufacturerAndNotTemplate
			and   !ServicePurchaseType
			and   !StandingPurchaseType
			and   UsePricingOnContract)

		IsNotDistributorAndNotManufacturerAndPurchaseType
			restricted
			when (IsNotDistributorAndNotManufacturer
			and   HasAPurchaseType
			and   UseCommitmentsOnContract)

		PricingForContractWizard
			restricted
			when (IsNotDistributorAndNotManufacturerAndNotTemplateAndPurchaseType
			and   ContractGroup.WizardPricing)

		CommitmentForContractWizard
			restricted
			when (IsNotDistributorAndNotManufacturerAndPurchaseType
			and   ContractGroup.WizardCommitments)

		IsNotManDistOrServiceOrStanding
			restricted
			when ((IsNotDistributorAndNotManufacturer)
			and  (!ServicePurchaseType)
			and  (!StandingPurchaseType))

		IsNotManDistOrStanding
			restricted
			when (IsNotDistributorAndNotManufacturer
			and  !StandingPurchaseType)

		IsNotManDistOrService
			restricted
			when ((IsNotDistributorAndNotManufacturer)
			and  (!ServicePurchaseType))

		HasDistributorContract
			restricted
			when (AttachedManufacturerContractsRel exists)

		HasTierQualifierItemForTier
			restricted 
			when (TierQualifierItemForTierRel exists)
		
		HasTierQualifierItems 
			restricted 
			when (TierQualifierItemsRel exists)
		
		HasTierQualifierItemsWithVendorItem 
			restricted 
			when (TierQualifierVendorItemsRel exists)
		
		HasTierQualifier 
			restricted 
			when (TierQualifierRel exists)
		
		OpenHasTierQualifier 
			restricted 
			when (!ContractStatus.Closed
			and    HasTierQualifier)
		
		HasPercentTierQualifier 
			restricted 
			when (ContractTierQualifiersByPurchasePercent exists)

		HasCalculations 
			restricted 
			when (TierQualifierCalculationsRel exists)

		HasTierQualifierContracts 
			restricted 
			when (TierQualifierContractsRel exists)
		
		HasTierQualifierCodes 
			restricted 
			when (TierQualifierCodesRel exists)
		
		CanPerformTierCalculation 
			restricted 
			when (HasTierQualifierItems
			and   IsManufacturerContract)

		HasManufacturerContract
			restricted
			when (ManufacturerContractForDistContractRel exists)

		HasReviewDate
			restricted
			when (ContractReviewDate entered)

		IsManufacturerOrDistributorContract
			restricted
			when (ManufacturerOrDistributor.ManufacturerContract
			or    ManufacturerOrDistributor.DistributorContract)

		ManufacturerWithMembers
			restricted
			when (IsManufacturerContract
			and   AnyTierMembersRel exists)

		ManufacturerWithLineMembers
			restricted
			when (IsManufacturerContract
			and   DistributorContractLineMemberRel exists
			and   TierMemberPurchaseFromDistributorRels exists
			and  !DistributorLineMembersExist)

		DirectPurchaseTierMembersExist
			restricted
			when (TierMemberDirectPurchaseMethodRels exists)

		NotServiceInProgress
			restricted
			when ((!ServicePurchaseType)
		 	and   (InProgress))

		MyContract
			default label is "MyContracts"
			when (PrimaryContactRel.Contact = actor.agent(Employee).Employee)

		ManufacturerModificationsToPush
			when (IsManufacturerContract
			and   HasDistributorContract
			and   DistributorLinesExist)

		DistributorLinesExist
			restricted
			when ((InProgress
           	or     ContractStatus.Active)
           	and    DistributorContractLineRel exists)

		ClassificationAllowsChangeOrder
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.AllowChangeOrder)
			or    (ContractSubclassification !entered
			and    ContractClassification.AllowChangeOrder))

		CapitatedContract 
			when ((ContractSubclassification entered
			and    ContractSubclassification.UseForCapitatedContracts)
			or    (ContractSubclassification !entered
			and    ContractClassification.UseForCapitatedContracts))			
		
		DisplayCapitatedLines 
			restricted 
			when (CapitatedContract
			and  !CapitatedComponentsOnly)

		DisplayCapitatedComponentLines 
			restricted 
			when (CapitatedContract)
		
		HasCapitatedProcedures 
			restricted
			when (CapitatedProcedureRel exists)

		HasAllCapitatedGroups 
			restricted 
			when (CapitatedProcedureNoGroupRel !exists)

		ComponentGroupsHaveComponents 
			restricted  
			when (ComponentGroupNoComponentRel !exists)	

		ContractHasAComponentGroup
			restricted 
			when (NonProcedureComponentGroupRel exists)
		
		ContractHasAComponentOnlyGroup
			restricted 
			when (NoProcedureComponentGroupRel exists)
		
		ContractLinesExistNotCapitated
			restricted 
			when (ContractLinesExist
			and  !DisplayCapitatedLines
			and  !DisplayCapitatedComponentLines)

		HasCapitatedComponentItemsWithNoFinalCost
			restricted
			when (CapitatedContract
			and   ComponentGroupItemsNoFinalCostRel exists)

		HasCapitatedCompanyLocationItemsWithNoFinalCost 
			restricted 
			when (CapitatedContract
			and   CompanyLocationItemsNoFinalCostRel exists)

		AllLinesHaveComponentGroupItem
			restricted 
			when (LineHasNoComponentGroupItemRel !exists)

		HasLinesWithNoComponentGroupItem 
			restricted 
			when (LineHasNoComponentGroupItemRel exists)
		
		ChangeOrderStateAddendum
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderAmendmentAddendum = 1)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderAmendmentAddendum = 1))

		ChangeOrderStateAmendment
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderAmendmentAddendum = 2)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderAmendmentAddendum = 2))

		ChangeOrderMaxAmountUpdate  
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderChangeLifetimeMaximum)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderChangeLifetimeMaximum))

		ChangeOrderAllowUpdates
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderManualUpdates)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderManualUpdates))

		ChangeOrderAllowMultiples
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.MultipleChangeOrdersAllowed)
			or    (ContractSubclassification !entered
			and    ContractClassification.MultipleChangeOrdersAllowed))

		ChangeOrderCreateDocument
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderAutoCreateDocument)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderAutoCreateDocument))

		ChangeOrderEditBudgets
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.ChangeOrderEditBudgets)
			or    (ContractSubclassification !entered
			and    ContractClassification.ChangeOrderEditBudgets))

		HasNotFixedRebates
			restricted
			when (NotFixedRebateRel exists)

		AllNotFixedRebatesMustHaveQualifiers
			restricted
			when (all NotFixedOrSupplementalRebateRel.RebateQualifiersExist)

		AllRebateDatesBeforeExpirationDate
			restricted
			when (all ContractRebateRel.FirstRebateDueDate <= ExpirationDate)

		LineRetainageExists
			restricted
			when (ContractLineHasRetainageRel exists)

		HasModifiedPricing
			restricted
			when (IsManufacturerOrDistributorContract
			and   ModifiedContractLineMemberRel exists)

		HasMembersToRelease
			when ((PricingMemberUnreleasedWithLinesRel exists
			or     TierMemberUnreleasedRel exists)
			and  (!ContractStatus.Closed
			and    NotContractTemplate))

		HasManOrDistMembersToRelease
			restricted
			when ((DistributorContractAnyUnreleasedPricingMemberRel exists
			or     PricingMemberUnreleasedRel exists
			or     TierMemberUnreleasedRel exists)
			and  (!ContractStatus.Closed
			and    NotContractTemplate))

		HasMaxAmount
			restricted
			when (MaximumAmount entered)

		CanReleaseMembers
			restricted
			when (HasMembersToRelease
			and   !HasNonFinishedTriggers)

		HasImportLinesForCreation
			restricted
			when (ImportLinesForCreationRel exists)

		VersionsExist
			restricted
			when (ContractVersionsRel exists)

		RedliningVersions
			restricted
			when (VersionsExist
			and	  UsingAddendumRedlining)

		NonRedliningVersions
			restricted
			when (VersionsExist
			and	  !UsingAddendumRedlining)

		TermsExist
			restricted
			when (NonDeletedContractTermsByDisplayRel exists)

		InterfacedRenewal
			restricted
			when (HasBeenActivated
			and   RenewalContract
			and   !AddendumExists
			and   !AmendmentExists
			and   !InMatrixApprovalProcess)

		CommentsExist
			restricted
			when (ContractComment set exists)

		AttachmentsExist
			restricted
			when (ContractAttachment set exists)

		ContractQuestionsExist
			restricted
			when (ContractQuestion set exists)

		ContractParticipantsExist
			restricted
			when (ContractParticipant set exists)

		NotDistributorOrManufacturerWithParticipants
			restricted
			when (IsNotDistributorAndNotManufacturer
			and   ContractParticipantsExist
			and  !ServicePurchaseType)

		NotDistributorOrManufacturerWithoutParticipants
			restricted
			when (IsNotDistributorAndNotManufacturer
			and  !ContractParticipantsExist
			and  !ServicePurchaseType)

		ContractTierMembersExist
			restricted
			when (ContractTierMember set exists)

		ContractPricingMembersExist
			restricted
			when (ContractDistributorPricingMember set exists)

		ParticipantsOrMembersExist
			restricted
			when (ContractParticipantsExist
			or    ContractTierMembersExist
			or    ContractPricingMembersExist)

		PricingMembersForDistributorContractExist
			restricted
			when (NonManufacturerPricingMembersRel exists)

		RelatedContractExist
			restricted
			when (RelatedContract set exists)

		AllUnansweredQuestionsExist
			restricted
			when (NumberOfAllUnansweredQuestions > 0)
		AnyUnansweredRequiredQuestionsExist
			restricted
			when (NumberOfAllUnansweredRequiredQuestions > 0)
		AnyQuestionsMissingRequiredAttachmentsExist
			restricted
			when (NumberOfAllQuestionsMissingRequiredAttachments > 0)
		AnyUnansweredRequiredQuestionsExistAndNotTemplate
			restricted
			when (NumberOfAllUnansweredRequiredQuestions > 0
			and   NotContractTemplate)
		AnyQuestionsMissingRequiredAttachmentsExistAndNotTemplate
			restricted
			when (NumberOfAllQuestionsMissingRequiredAttachments > 0
			and   NotContractTemplate)

		AnyIncorrectlyAnsweredQuestionsExist
			restricted
			when (NumberOfAllIncorrectlyAnsweredQuestions > 0)

		AnyIncorrectlyAnsweredQuestionsExistAndNotTemplate
			restricted
			when (NumberOfAllIncorrectlyAnsweredQuestions > 0
			and   NotContractTemplate)

		QuestionsRequireAttention
			restricted
			when (AnyIncorrectlyAnsweredQuestionsExistAndNotTemplate
			or   AnyQuestionsMissingRequiredAttachmentsExistAndNotTemplate
			or   AnyUnansweredRequiredQuestionsExistAndNotTemplate)

		AnsweredQuestionsWithTermsExist
			restricted
			when (NumberOfAllAnsweredQuestionsWithTerms > 0)

		RebateQuestionAnswerExists
			restricted
			when (RebateQuestionAnswerRel exists)

		ContractQuestionsExistOrInProgress
			restricted
			when (ContractQuestion set exists
			or    InProgress)

		UseRetainage
			restricted
			when (!RetainagePercentCompleteTracking.NoRetainage)

		RetainageTurnedOn
			restricted
			when (RetainagePercentCompleteTracking changed
			and	  old RetainagePercentCompleteTracking.NoRetainage)

		AnyToleranceErrorsExist
			restricted
			when (ToleranceErrorsExist
			or    ManualToleranceErrorsExist)

		ToleranceErrorsExist
			restricted
			when (ContractLinePriceChangeRel exists)

		ManualToleranceErrorsExist
			restricted
			when (ContractLineManualPriceChangeRel exists)

		HasManualTolerances
			restricted
			when (DerivedHasCostChangeTolerances)
		
		CostComparisonExists
			restricted
			when (ContractLineCostCompareRel exists)

		BidWorksheetExists
			restricted
			when (BidWorksheetRel exists)

		CostSavingsExists
			restricted
			when (CostSavingsRel exists)

		OpenCommitments  
			when (HasBeenActivated = true
			and   ExpirationDate <= current corporate date
			and	  UseCommitments
			and   CommitmentsClosed = false
			and	 !ContractStatus.Closed)
		
		SpreadOpenCommitments 
			restricted 
			when (UseSpreadCommitments
			and   OpenCommitmentsExist)
		
		OpenCommitmentsForContractClose
			restricted
			when (UseCommitments
			and   CommitmentsClosed = false)

		CommitmentsNotClosedContractNotClosed
			restricted
			when (!Contract.ContractStatus.Closed
			and   !CommitmentsClosed)

		TierCopy
			restricted
			when (InProgress and IsManufacturerContract)

		PricingIdentifierCopy
			restricted
			when (InProgress and IsDistributorContract)

		HeaderPricingExists
			restricted
			when (ContractPricingRel exists)

		ValidHeaderPricingExists
			restricted
			when (ContractPricingWithoutDefaultRel exists)

		LinePriceBreaksExist
			restricted
			when (any ContractLine set.PriceBreaksExist)

		HasEligibleContractLineForEvent
			restricted
			when (any ContractLine set.EligibleContractLineForEvent)

		HeaderPricingExistsPriorToEffectiveDate
			restricted
			when (ContractPricingPriorToEffectiveDateRel exists)

		HeaderPricingExistsAfterExpirationDate
			restricted
			when (ContractPricingAfterExpirationDateRel exists)

		ContractPricingPercentExists
			restricted
			when (ContractPricingPercentRel exists)

		LineMarkupPriceBreaksExist
			restricted
			when (ContractLineMarkupRel exists)

		LineDiscountPriceBreaksExist
			restricted
			when (ContractLineDiscountRel exists)

		RebateDueDatesExist
			restricted
			when (any ContractRebateRel.RebateDueDatesExist)
		RebatesExist
			restricted
			when (ContractRebateRel exists)
		AllRebateDueDatesBeforeExpirationDate
			restricted
			when (all ContractRebateRel.RebateDueBeforeExpirationDate)

		AllRebateDueDatesAfterEffectiveDate
			restricted
			when (all ContractRebateRel.RebateDueAfterEffectiveDate)

		ContractLineExistsPriorToEffectiveDate
			restricted
			when (ContractLinePriorToEffectiveDateRel exists)

		ContractLineExistsAfterExpirationDate
			restricted
			when (ContractLineAfterExpirationDateRel exists)

		ContractLineErrorsExist
			when (LineErrorRel exists)

		ContractLineErrorsExistNotInactiveVendorItem
			when (ContractLineOtherErrorRel exists)

		AllErrorsAndAllInactive
			restricted
			when (HasInactiveVendorItems
			and   !HasLinesToActivate
			and   !ContractLineErrorsExistNotInactiveVendorItem)

		HasInactiveVendorItems
			when (ContractLineInactiveErrorRel exists)

		HasLinesToActivate
			restricted
			when (CanUseForCostDefaultingContractLineNoErrorsRel exists)

		SourcingCompanyExists
			restricted
			when (SourcingCompanyRel exists)

		ContractPolinesByContract
			restricted
			when (ContractPolinesByContractRel exists)

		RequisitionLinesByContract
			when (RequisitionLinesByContractRel exists)

		AnyContractPolinesByContract
			restricted
			when (AnyPolinesByContractRel exists)

		ContractDistributorPricingExists
			restricted
			when (ContractDistributorPricingMember(Contract) set exists)

		ContractRebateNotFixedExists
			restricted
			when (ContractRebateNotFixedRel exists)

		ContractRebateExists
			restricted
			when (ContractRebate set exists)

		RebateWithQualifierChanges
			restricted
			when (ContractRebateQualifierChangeRel exists
			and   RebateEligible)

		ContractRebateCalculate
			restricted
			when (ContractRebateNotFixedExists
			and   RebateEligible
			and  !ContractRebateQualifierChangeRel exists)

		TargetedDatesRequired
			restricted
			when (TargetedTierQualifierRel exists
			or    TargetedTierLineQualifierRel exists)

		DisplayProcessingTimes
			restricted
			when (RedlineApprovals
			or    ContractRedlineApprovals
			or    RedlineClassApproval)

		RedlineClassApproval
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.RequireApprovalWithWordDocument)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.RequireApprovalWithWordDocument))

		RedlineAddendumClassApproval
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.RequireApprovalWithWordDocDuringAddendum)
			or    (ContractSubclassification entered
			and    ContractSubclassification.RequireApprovalWithWordDocDuringAddendum))

		AddendumRedline
			restricted
			when (ContractRedlineApprovals
			and   ContractStatus.Addendum)

		ContractRedlineApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type = 4)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type = 4))

		ContractRedlineClassApproval
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.ContractRedlineApprovalsEntered)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.ContractRedlineApprovalsEntered))

		ContractApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type = 2)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type = 2))

		ContractClassApproval
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.ContractApprovalsEntered)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.ContractApprovalsEntered))

		ContractUsesMatrixApprovals 
			restricted 
			when ((ContractSubclassification not entered 
			and   (!ContractChangesExist
			and    ContractClassification.RequireMatrixInitialApproval)
			or    (AddendumExists
			and    ContractClassification.RequireMatrixAddendumApproval)
			or    (AmendmentExists
			and    ContractClassification.RequireMatrixAmendmentApproval))
			or    (ContractSubclassification entered
			and   (!ContractChangesExist
			and    ContractSubclassification.RequireMatrixInitialApproval)
			or    (AddendumExists
			and    ContractSubclassification.RequireMatrixAddendumApproval)
			or    (AmendmentExists
			and    ContractSubclassification.RequireMatrixAmendmentApproval)))		

		ContractUsesMatrixApprovalsForAmendment
			restricted 
			when ((ContractSubclassification not entered 
			and    ContractClassification.RequireMatrixAmendmentApproval)
			or    (ContractSubclassification entered
			and    ContractSubclassification.RequireMatrixAmendmentApproval))		

		ContractUsesMatrixApprovalsForAddendum
			restricted 
			when ((ContractSubclassification not entered 
			and    ContractClassification.RequireMatrixAddendumApproval)
			or    (ContractSubclassification entered
			and    ContractSubclassification.RequireMatrixAddendumApproval))	

		OnlyInitialMatrixApproval 
			restricted 
			when ((ContractSubclassification not entered 
			and   (!ContractChangesExist
			and    ContractClassification.RequireMatrixInitialApproval)
			or    (AddendumExists
			and    !ContractClassification.RequireMatrixAddendumApproval)
			or    (AmendmentExists
			and    !ContractClassification.RequireMatrixAmendmentApproval))
			or    (ContractSubclassification entered
			and   (!ContractChangesExist
			and    ContractSubclassification.RequireMatrixInitialApproval)
			or    (AddendumExists
			and    !ContractSubclassification.RequireMatrixAddendumApproval)
			or    (AmendmentExists
			and    !ContractSubclassification.RequireMatrixAmendmentApproval)))					
		
		DisplaySetCanUseForCostDefaulting
			restricted
			when (InProgress
			and   NotContractTemplate
			and  !IsManufacturerContract
			and  !IsDistributorContract
			and   NonServicePurchaseType
			and   ContractLinesExist)

		DisplaySetCanUseForCostDefaultingManufacturerDistributor
			restricted
			when (InProgress
			and   NotContractTemplate
			and ((IsManufacturerContract
			and   DirectPurchaseTierMembersExist)
			or    IsDistributorContract)
			and   ContractLinesExist)

		DisplaySetCanUseForCostDefaultingNo 
			restricted 
			when (InProgress
			and   NotContractTemplate
			and ((IsManufacturerContract
			and   DirectPurchaseTierMembersExist)
			or   (!IsManufacturerContract
			and   NonServicePurchaseType))
			and   ContractLinesExist)

		DisplaySetPreferredLine
			restricted
			when (NotInactiveOrClosed
			and   NotContractTemplate
			and   NonServicePurchaseType
			and   ContractLinesExist)

		CanSetBillCode
			restricted
			when (NonServicePurchaseType
			and   SpecialContractLinesRel exists
			and   ConsignCode !entered
			and  !ContractStatus.Closed)

		ContractCanMaintainBillCode
			restricted
			when (NonServicePurchaseType
			and  !ContractStatus.Closed)

		DisplaySetDistributorContractLine
			restricted
			when (InProgress
			and   NotContractTemplate
			and   ManufacturerOrDistributor.ManufacturerContract
			and   ContractLineExists)

		ExpirationDateYellowAlert
			when (ExpirationDate entered
			and   YellowAlert != 0
			and   current corporate date >= YellowAlertDate
			and   YellowAlertDate <= RedAlertDate
			and  !ContractStatus.Closed)

		EmailNotSentYellowExpiringContract
			when (ExpirationDateYellowAlert
			and   !YellowAlertEmailSent)

		EmailNotSentRedExpiringContract
			when (ExpirationDateRedAlert
			and   !RedAlertEmailSent)

		ExpirationDateRedAlert
			when (ExpirationDate entered
			and   RedAlert != 0
			and   current corporate date >= RedAlertDate
			and   RedAlertDate <= ExpirationDate
			and  !ContractStatus.Closed)

		YellowAlertExists
			restricted
			when (YellowAlert entered)

		RedAlertExists
			restricted
			when (RedAlert entered)

		CanModifyRebate
			restricted
			when ((ContractStatus.Draft)
			or	 (ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate)
			or   (ContractStatus.Active)
			or   (ContractStatus.Addendum)
			or   (ContractStatus.Amendment))

		ContractComments
			restricted
			when (ContractComment set exists)

		ContractMilestones
			restricted
			when (ContractMilestone set exist)

		ContractDeliverables
			restricted
			when (ContractDeliverable set exist)

		ContractParticipantCond
			restricted
			when (ContractParticipantsRel exist)

		ContactsExist
			restricted
			when (Contacts exist)

		ContractDocumentVersionsExist
			restricted
			when (ContractNonMainDocumentRel exists)

		ContractSpreads
			restricted
			when (ContractSpreadRel exists)

		SupplierCertificationExist
			restricted
			when (ContractSupplierCertificationRel exists)

		ActiveSupplierCertificationExist
			restricted
			when (Supplier.ActiveSupplierCertRel exists)

		ActiveSupplierContactCertificationExist
			restricted
			when (SupplierSourceId.ActiveSupplierContactCertRel exists)

		ContractDocumentExists
			restricted
			when (LatestContractDocumentRel exists)

		HeaderOrLineEmailAttachmentExists
			restricted
			when (EmailAttachmentsExists
			or    LineEmailAttachmentsExists)

		EmailAttachmentsExists
			restricted
			when (EmailAttachmentsRel exists
			or    EmailCommentsRel  exists)

		LineEmailAttachmentsExists
			restricted
			when (LineEmailAttachmentsRel exists
			or    LineEmailCommentsRel exists)

		RedlineEmailAttachmentExists
			restricted
			when (LatestRevisionRel exists)

		PrimaryContactExists
			restricted
			when (PrimaryContactRel exists)

		PrimaryContactEmailAddressExists
			restricted
			when (PrimaryContactEmail entered)

		UpdateRebateQualifierChangedFlag
			restricted
			when (ContractStatus.Addendum or ContractStatus.Amendment)

		ContractInactiveClosed
			restricted
			when (ContractStatus.Inactive
			or	  ContractStatus.Closed)

		ContractActiveOrInactive
			restricted
			when (ContractStatus.Inactive
			or	  ContractStatus.Active)

		ContractActiveOrClosed
			restricted
			when (ContractStatus.Active
			or    ContractStatus.Closed)

		ContractHeldInactiveClosed
			restricted
			when (OnHold = true
			and   ContractStatus.Inactive
			or	  ContractStatus.Closed)

		CanHold
			restricted
			when ((!ContractInactiveClosed
			and    !ContractTemplate)
			and   (!OnHold = true))

		CanRemoveHold
			restricted
			when ((OnHold = true)
			and   (!ContractInactiveClosed
			and    !ContractTemplate))

		HoldEnteredNotCanRemoveHold
			restricted
			when (HoldCodeEntered
			and  !CanRemoveHold)

		CanHoldManufacturerLinesOnly
			restricted
			when (HasBeenActivated
			and   OnHold = false
			and   IsManufacturerContract
			and   HasAPurchaseType
			and   !ContractInactiveClosed
			and   !ContractTemplate)

		CanRemoveHoldManufacturerLinesOnly	
			restricted
			when (HasBeenActivated
			and   OnHold = false
			and   IsManufacturerContract
			and   HasAPurchaseType
			and   !ContractInactiveClosed
			and   !ContractTemplate)

		ContractExists
			restricted
			when (Contract entered)

		CannotUpdateGPO
			restricted
			when (ContractGroup.DoNotAllowGPOUpdates
			and   HasGPORelatedContract
			and   HasGPOSupplier)

		CanClose
			restricted
			when (!ContractStatus.Closed
			and   !ContractTemplate
			and   !CannotUpdateGPO)

		NoOpenPoLinesExist
			restricted
			when (!OpenPolinesByContractRel exists)

		HasUnreleasedPOLines
			restricted
			when (UnreleasedPolinesByContractRel exists)

		HasUnreleasedReqLines
			restricted
			when (UnreleasedReqlinesByContractRel exists)

		HasUnprocessedPOInterface
			restricted
			when (UnprocessedRequestsByContractRel exists)

		NoUnreleasedDistPoLinesExist
			restricted
			when (!DistContractLinesWithUnreleasedPORel exists)

		NoUnreleasedDistReqLinesExist
			restricted
			when (!DistContractLinesWithUnreleasedReqRel exists)

		NoUnprocessedDistRequestsExist
			restricted
			when (DistContractLinesWithUnprocessedPORel !exists)

		ContractAttachedContactExist
			restricted
			when (ContractAttachedContact set exists)

		ContractLinesExist
			restricted
			when (ContractLine set exists)

		CanDisplayInvoiceAllowedDate
			restricted
			when (!ContractTemplate
			and   ServicePurchaseType)

		EmailedToSupplierAlready
			restricted
			when (EmailedSupplierDate != 0)
		AddendumOrAmendment
			restricted
			when (ContractStatus.Addendum
			or    ContractStatus.Amendment)
		InProgressAndNotContractTemplate
			restricted
			when (InProgress
			and	  NotContractTemplate)
		InProgressAndDistributor
			restricted
			when (InProgress
			and   IsDistributorContract)
		NotInProgressAndDistributor
			restricted
			when (!InProgress
			and   IsDistributorContract)
		NotClosedAndDistributor
			restricted
			when (NotClosed
			and   IsDistributorContract)
		ClosedAndDistributor
			restricted
			when (ContractStatus.Closed
			and   IsDistributorContract)
		InProgressOrActiveNotTemplateUseForCostDefaulting
			restricted
			when ((InProgressAndNotContractTemplate
			or     ActiveContract)
			and    HasAPurchaseType)

		IsASupplier
			restricted
			when (actor.agent(SupplierSourceId).Supplier exists)

		IsAnonymous
			restricted
			when (actor has role "SupplierAnonymous_ST")

		IsASupplierOrAnonymous
			restricted
			when (IsASupplier
			or    IsAnonymous)

		ShowInputForRequesterProposedContract
			restricted
			when (!ContractExists
			or    CanUpdateProposedContract)

		CanUpdateProposedContract 
			restricted
			when (ProposedContract = 4)

		ContractBySupplier
			restricted
			when (ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier			= actor.agent(SupplierSourceId).Supplier
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId)

		SupplierCanUpdateProposedContract
			restricted 
			when (CanUpdateProposedContract
			and   ContractBySupplier)

		DisplayTermsNeedToBeNegotiated
			restricted
			when (ContractSource.Event
			and   EventTermsNeedToBeNegotiated)

		SubcontractorContract
			restricted
			when (ContractToHaveSubcontractors)

		SubcontractorContractClosed
			restricted
			when (SubcontractorContract
			and   ContractStatus.Closed)

		SubcontractorContractNotClosed
			when (SubcontractorContract
			and  !ContractStatus.Closed)

		ActiveContract
			restricted
			when (ContractStatus.Active)

		ContractCreatedByEvent
			restricted
			when (EventRelatedContractRel exists
			and   ContractStatus.Draft)

		ContractThatCreatedEvent
			restricted
			when (ContractThatCreatedEventRel exists)

		IsEligibleContractForEvent
			restricted
			when (SourcingEligible
			and   ContractStatus.Active
			and   (NoPurchaseType
			or	   HasBeenActivated))

		ActiveContractBySupplier
			restricted
			when (ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier			= actor.agent(SupplierSourceId).Supplier
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
			and	  ActiveContract)

		ActiveContractBySupplierOnly
			restricted
			when (ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier		= actor.agent(SupplierSourceId).Supplier
			and	  ActiveContract)

		ActiveExpiringContract
			restricted
			when (ActiveContract
			and   ExpiringContract)

		ExpiringContract
			when (ExpirationDateYellowAlert
			or    ExpirationDateRedAlert)

		ExpiringNotExpiredContract
			restricted
			when (ExpiringContract
				and !ExpiredContract)

		ExpiredContract
			restricted
			when (current corporate date >= ExpirationDate)

		ExpiringContractNotRemoved
			restricted
			when (ExpiringContract
			and  !RemoveFromExpireList)

		ActiveExpiringContractSourcingEligible
			restricted
			when (ActiveExpiringContract
			and   SourcingEligible)

		ExpiringContractsBySupplier
			restricted
			when (ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier			= actor.agent(SupplierSourceId).Supplier
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
			and	  ActiveExpiringContract)

		ExpiringContractsBySupplierOnly
			restricted
			when (ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier		= actor.agent(SupplierSourceId).Supplier
			and	  ActiveExpiringContract)

		ContractsInNegotiationBySupplier
			restricted
 			when (!ContractTemplate
   			and	  (ContractStatus.Negotiation
   			or	   ContractStatus.FinalApproval)
  			and	  UseSupplierPortalForNegotiation
 			and	  ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId)

		ContractsInNegotiationBySupplierOnly
			restricted
 			when (!ContractTemplate
   			and	  (ContractStatus.Negotiation
   			or	   ContractStatus.FinalApproval)
  			and	  UseSupplierPortalForNegotiation
 			and	  ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier)

		NegotiatedContractsBySupplier
			restricted
			when (!ContractTemplate
			and	  ContractStatus.ReadyToActivate
			and	  UseSupplierPortalForNegotiation
			and	  ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier			= actor.agent(SupplierSourceId).Supplier
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId)

		NegotiatedContractsBySupplierOnly
			restricted
			when (!ContractTemplate
			and	  ContractStatus.ReadyToActivate
			and	  UseSupplierPortalForNegotiation
			and	  ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
			and   Supplier		= actor.agent(SupplierSourceId).Supplier)

		ProposedContractAnyStatus
			restricted 
			when (ProposedContract > 0)
		
		ProposedSupplierNameEntered 
			restricted
			when (ProposedSupplierName entered)
		
		SupplierNotEntered 
			restricted 
			when (Supplier !entered)
		
		ProposedContracts
			restricted
			when (ProposedContract = 1)

		ProposedSubmittedByRequester 
			restricted 
			when (ProposedContracts
			and   ContractSource = 10)

		ProposedContractsByRequester
			restricted
			when (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization = actor.agent(Employee).Employee.HROrganization
			and   ProposalRequester = actor.agent(Employee).Employee)

		ProposedContractFromSupplier
			restricted
			when (ContractSource = 8
			and  (ProposedContract = 1
			or    ProposedContract = 2))

		ProposedContractsBySupplier
			restricted
 			when (ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier		= actor.agent(SupplierSourceId).Supplier
  			and	  ContractSource = 8
  			and  (ProposedContract = 1
  				or ProposedContract = 4))

		AcceptedContractsBySupplier
			restricted
 			when (ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier		= actor.agent(SupplierSourceId).Supplier
  			and	  ContractSource = 8
  			and   ProposedContract = 2)

  		RejectedContractsBySupplier
			restricted
 			when (ContractGroup	= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier		= actor.agent(SupplierSourceId).Supplier
  			and	  ContractSource = 8
  			and   ProposedContract = 3)

		ProposedContractsBySupplierContact
			restricted
 			when (ContractGroup		= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier			= actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
  			and	  ContractSource = 8
  			and  (ProposedContract = 1
  				or ProposedContract = 4))

		AcceptedContractsBySupplierContact
			restricted
 			when (ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId
  			and	  ContractSource = 8
  			and   ProposedContract = 2)

  		RejectedContractsBySupplierContact
			restricted
 			when (ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId
  			and	  ContractSource = 8
  			and   ProposedContract = 3)

		SubcontractorContractsBySupplier
			restricted
 			when (ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId
  			and	  SubcontractorContract
  			and   !ContractInactiveClosed)


		ContractsInSupplierNegotiation
			restricted
 			when (!ContractTemplate
 			and	  !AmendmentExists
 			and	  ContractStatus.Negotiation
 			and	  NegotiationStatus.NeedsSupplierApproval
 			and	  UseSupplierPortalForNegotiation
 			and	  ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId)

		UserIsSupplier
			restricted
 			when (ContractGroup				  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	     		 	  = actor.agent(SupplierSourceId).Supplier
  			and   SupplierSourceId			  = actor.agent(SupplierSourceId).SupplierSourceId)

		CanSendEmailFromSupplier
			restricted
			when (PrimaryContactEntered
			and   UserIsSupplier)

		HasTiersWithQualifierCodes
			restricted
			when (any ContractTierQualifier set.CodesExist)

		HasPercentBaseQualifiers
			restricted
			when (any ContractTierQualifier set.PurchaseAmtPct.PurchasePercent > 0)

		EligibleForNegotiation
			restricted
			when (NumberOfTiers		<= 2
			and   NumberOfRebates	<= 2)

		ExpirationDateWithinRange
			restricted
			when (ExpirationDate within ExpirationDateRange)

		ExpirationDateEntered
			restricted
			when (ExpirationDate entered)

		HasPoPurchFrom
			restricted
			when (ApPoPurchaseFrom.PurchaseFromLocation exists)

		HasApPurchFrom
			restricted
			when (ApPoPurchaseFrom.VendorLocation exists)

		CostDefaultingAndTemplate
			restricted
			when (HasAPurchaseType
			and   ContractTemplate)

		CostDefaultingButNotTemplate
			restricted
			when (HasAPurchaseType
			and  !ContractTemplate)

		HasLinesWithMatchingVendorAndManufacturerItems
			restricted
			when (ManufacturerOrDistributor.DistributorContract
			and   InProgress
			and   first DistributorContractLinesMfgVendItemAndVendorItemMatchRels exists)

		NotOnHoldAndNewRenewal
			restricted
			when (!OnHold = true
			and    RenewalContract
			and   !HasBeenActivated)

		NotOnHoldAndNotNewRenewal
			restricted
			when (!OnHold = true
			and   !ContractTemplate
			and ((!RenewalContract)
			or    (RenewalContract
			and    HasBeenActivated)))

		NotOnHoldAndNotNewRenewalAndNotProposed
			restricted
			when (NotOnHoldAndNotNewRenewal
			and  (ProposedContract = 0
			or    ProposedContract = 2))

		NotInactiveOrClosed
			restricted
			when ((ContractStatus.Draft)
			or	 (ContractStatus.Released)
			or   (ContractStatus.Negotiation)
			or   (ContractStatus.FinalApproval)
			or   (ContractStatus.ReadyToActivate)
			or   (ContractStatus.Active)
			or   (ContractStatus.Addendum)
			or   (ContractStatus.Amendment))

		NotClosed
			restricted
			when (!ContractStatus.Closed)

		CanReleaseFromContractLine
			restricted
			when (NotOnHoldAndNotNewRenewalAndNotProposed
			and   CanAmend
			and  !ContractTemplate)

		CanActivateFromContractLine
			restricted
			when (!BudgetEditInProgress
			and   !OnHold
			and   !ActivationInProgress
			and   ContractStatus.ReadyToActivate
			and  !InMatrixApprovalProcess)

		DisplayDocumentMgmtButton
			restricted
			when (ContractExists
			and	  DocMgmtSystemURL entered)

		CopyingContractLines
			restricted
			when (LocalCopyContractLines
			or	  LocalCopySelectAll)

		WorkingContractUnique
			restricted
			when (WorkingContractRel exists)

		PreferredMfgContractExists
			restricted
			when (ContractPreferredManufacturerRel exists)

		HasContractDocumentTemplateFile
			restricted
			when (ContractDocumentTemplate.ContractDocumentTemplateGroup.File entered)

		TemplateOrDocumentExists
			restricted

			when (HasDocumentRevisionFile
			or    ContractDocumentTemplate entered)

		HasAttachments
			restricted
			when (ContractAttachmentRel exists)

		HasDocumentRevisionFile
			restricted

			when (LatestDocumentRevisionRel.Attachment.File entered)

		HasActivatedContractTermVersions
			restricted
			when (ActivatedContractTermVersionRel exists)
		ContractTermUpdatesInCurrentVersion
			restricted
			when (ContractTermUpdatesInCurrentVersionRel exists)
		ContractArticleUpdatesInCurrentVersion
			restricted
			when (ContractArticleUpdatesInCurrentVersionRel exists)
		ContractTermOrArticleUpdatesInCurrentVersion
			restricted
			when (ContractTermUpdatesInCurrentVersion
			or	  ContractArticleUpdatesInCurrentVersion)
		SupplierManageRedlineDocumentValid
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			and   SupplierSameAsContractSupplier
			and   RedlineApprovals)
		SupplierApproveTermsValid
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			and	  !ContractTermOrArticleUpdatesInCurrentVersion
			and    SupplierSameAsContractSupplier
			and    ContractRedlineApprovals)
		SupplierManualApproveTermsValid
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			and	  !ContractTermOrArticleUpdatesInCurrentVersion)
		BuyerApproveTermsValid
			restricted
			when   (NegotiationStatus.NeedsInternalApproval
			and	  !ChangesMadeByFinalApproverInCurrentVersion
			and   !SupplierSameAsContractSupplier
			and	  !ContractTermOrArticleUpdatesInCurrentVersion)
		SupplierNegotiateTermsValid
			restricted
			when (NegotiationStatus.NeedsSupplierApproval)
		SupplierSubmitTermChangesValid
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			and	  ContractTermOrArticleUpdatesInCurrentVersion)
		BuyerAddArticleValid
			restricted
			when (NegotiationStatus.NeedsInternalApproval
			or    ContractStatus.Addendum)
		SupplierAddArticleValid
			restricted
			when  (NegotiationStatus.NeedsSupplierApproval)
		ApproverAddArticleValid
			restricted
			when (ContractStatus.Released
			or    ContractStatus.Negotiation)
		BuyerAddArticleFromLibraryValid
			restricted
			when ((NegotiationStatus.NeedsInternalApproval
			or    ContractStatus.Addendum)
			and   !SupplierSameAsContractSupplier)
		BuyerNegotiateTermsValid
			restricted
			when (NegotiationStatus.NeedsInternalApproval)
		BuyerSubmitTermChangesValid
			restricted
			when  (NegotiationStatus.NeedsInternalApproval
			and	  (ContractTermOrArticleUpdatesInCurrentVersion
			or	   ChangesMadeByFinalApproverInCurrentVersion))
		BuyerSubmitRedlineDocumentTermChangesValid
			restricted
			when  (NegotiationStatus.NeedsInternalApproval
			and    RedlineApprovals
			and    CurrentRedlineDocumentNotFromSupplier)
		FinalApproverSubmitTermChangesValid
			restricted
			when (NegotiationStatus.NeedsFinalApproval
			and	  ContractTermOrArticleUpdatesInCurrentVersion)
		ShowBuyerTermNegotiationButton
			restricted
			when ((DerivedUseSupplierPortalForNegotiation
			or	   DerivedUseSupplierPortalForAddendumNegotiation)
			and    ContractRedlineApprovals
			and	  (NegotiationStatus > 0
			or	   PreviousState.Negotiation
			or	   FinalApprovedContractTermVersionRel exists))
		ShowApproverTermNegotiationButton
			restricted
			when ((DerivedUseSupplierPortalForNegotiation
			or	   DerivedUseSupplierPortalForAddendumNegotiation)
			and    ContractRedlineApprovals
			and	   ContractStatus.Released
			and    ApprovalStatus.NeedsApproval)
		ChangesMadeByFinalApproverInCurrentVersion
			restricted
			when (DerivedCurrentContractTermVersionAction = 6)	
		NegotiationSupplierOrFinalApproval
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			or	  NegotiationStatus.NeedsFinalApproval)
		AllowTermUpdatesDuringApproval
			restricted
			when ((!ContractChangesExist
			and	   DerivedAllowUpdatesDuringApproval)
			or	  (AddendumExists
			and	   DerivedAllowUpdatesDuringAddendumApproval))
		UseSupplierPortalForNegotiation    
			restricted
			when (NotContractTemplate
			and	  (!ContractChangesExist
			and	   DerivedUseSupplierPortalForNegotiation)
			or	  (AddendumExists
			and	   DerivedUseSupplierPortalForAddendumNegotiation)
			and    ContractRedlineApprovals)
		UseSupplierPortalForDocumentNegotiation
			restricted
			when (NotContractTemplate
			and	  (!ContractChangesExist
			and	   DerivedUseSupplierPortalForNegotiation)
			or	  (AddendumExists
			and	   DerivedUseSupplierPortalForAddendumNegotiation)
			and    RedlineApprovals)
		RequireNegotiationFinalApproval
			restricted
			when ((!ContractChangesExist
			and	   DerivedRequireNegotiationFinalApproval)
			or	  (AddendumExists
			and	   DerivedRequireAddendumNegotiationFinalApproval))
		RequireTermAndConditionApproval
			restricted
			when (NotContractTemplate
			and	  (!ContractChangesExist
			and	   DerivedRequireTermAndConditionApproval)
			or	  (HasActivatedContractTermVersion	
			and	   UsingAddendumRedlining))		
		AllowTermUpdatesDuringFinalApproval		
			restricted
			when ((!ContractChangesExist
			and	   DerivedAllowUpdatesDuringNegotiationApproval)
			or	  (AddendumExists
			and	   DerivedAllowUpdatesDuringAddendumFinalApproval))
		HasActiveContractTermVersion
			restricted
			when (ActiveContractTermVersionRel exists)
		HasActivatedContractTermVersion
			restricted
			when (ActivatedContractTermVersionRel exists)
		UsingAddendumRedlining
			restricted
			when (DerivedRequireAddendumTermAndConditionApproval
			or	  DerivedUseSupplierPortalForAddendumNegotiation)
		HasUnapprovedArticleChanges
			restricted
			when (DraftArticleUpdatesRel exists
			or	  PendingArticleUpdatesRel exists)
		HasUnapprovedTermChanges
			restricted
			when (DraftTermUpdatesRel exists
			or	  PendingTermUpdatesRel exists)
		HasUnapprovedArticleOrTermChanges
			restricted
			when (HasUnapprovedArticleChanges
			or	  HasUnapprovedTermChanges)
		HasUnapprovedArticleOrTermChangesInProgress
			when (HasUnapprovedArticleOrTermChanges
			and	  InProgress)
		HasUnapprovedInternalArticleChanges
			restricted
			when (DraftArticleInternalUpdatesRel exists
			or	  PendingArticleInternalUpdatesRel exists)
		HasUnapprovedInternalTermChanges
			restricted
			when (DraftTermInternalUpdatesRel exists
			or	  PendingTermInternalUpdatesRel exists)
		HasUnapprovedInternalArticleOrTermChanges
			restricted
			when (HasUnapprovedInternalArticleChanges
			or	  HasUnapprovedInternalTermChanges)
		ContractTermVersionInSupplierNegotiationExist
			restricted
			when (ContractTermVersionInSupplierNegotiationRel exists)
		NonDeletedContractArticlesExist
			restricted
			when (NonDeletedContractArticlesByDisplayRel exists)
		NonDeletedContractArticlesExistOrInProgress
			restricted
			when (NonDeletedContractArticlesByDisplayRel exists
			or    InProgress)
		BuyerAllowedToEditTermsAndConditions
			restricted
			when (Contract.NegotiationStatus.NeedsInternalApproval
			or	  Contract.NegotiationStatus.NeedsFinalApproval
			or	  Contract.ContractStatus.Released)
		ClassActorContextExists 
			restricted
			when (ActorContextClassRel exists)
		SubClassActorContextExists 
			restricted
			when (ActorContextSubClassRel exists)
		IsValidForActorContext
			restricted
		 	when (BusinessGroupRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		IsValidForEmployeeContext
			restricted
		 	when (BusinessGroupRel.FinanceEnterpriseGroup = ContextEmployee.HROrganization.FinanceEnterpriseGroup)
		ContractClassificationGroupAllowsAccess  
			restricted
			when  (ActorContractClassificationGroup entered) 
		ClassActorContextDoesNotExist
			restricted
			when (ActorContextClassRel !exists)
		SubClassActorContextDoesNotExist
			restricted
			when (ActorContextSubClassRel !exists)
		NoClassificationSecurity 
			restricted 
			when (actor.context.ContractClassificationGroup = blank
			and   !ActorContactAnySecurityAccessRel exists)
		AttachedActorContactHasAdditionalSecurityAccess
			restricted
			when (ActorContactAdditionalSecurityAccessRel exists)
		HasSecurityAccess
			restricted
			when (IsValidForActorContext
			and   ContractGroup.BusinessGroupAllowsAccess
			and  (NoClassificationSecurity
			or   (ContractClassification entered
			and   ContractClassificationGroupDetailRel exists)
			or   (ContractSubclassification entered
			and   ContractClassificationGroupSubDetailRel exists)
			or   (AttachedActorContactHasAdditionalSecurityAccess)))
		ActorHasNoClassificationAndSecurityAccess
			restricted
			when (actor.context.ContractClassificationGroup = blank
			and   ActorContactAnySecurityAccessRel exists)
		ContextEmployeeNoClassificationSecurity
			restricted 
			when (ContextEmployee.ContractClassificationGroup = blank
			and   !EmployeeContactAnySecurityAccessRel exists)
		ContextEmployeeContactExists
			restricted
			when (EmployeeContactRel exists)
		ContextEmployeeContactHasAdditionalSecurityAccess
			when (EmployeeContactAdditionalSecurityAccessRel exists)
		EmployeeHasSecurityAccess
			restricted
			when (IsValidForEmployeeContext 
			and   ContractGroup.BusinessGroupAllowsAccess
			and  (ContextEmployeeNoClassificationSecurity
			or   (ContractClassification entered
			and   EmployeeContractClassificationGroupDetailRel exists)
			or   (ContractSubclassification entered
			and   EmployeeContractClassificationGroupSubDetailRel exists)
			or   (ContextEmployeeContactHasAdditionalSecurityAccess)))
		ShowEmployeeAddAdditionalSecurityAccessContact
			when (ContextEmployee entered
			and  !ContextEmployeeContactHasAdditionalSecurityAccess)
		HasChild
			restricted
			when (Contract children exist)
		HasParent
			restricted
			when (ParentContract entered)
		SuppliersMaintainSubcontractorsOnContract
			restricted
			when (ContractToHaveSubcontractors)
		SubcontractorContractAndDiversity
			restricted
			when (SubcontractorContract
			and DiversityPctOfProposedTotal !=0)

		HasDiversity
			when (ContractExistingDiversityRel exists)
		NoLinesWithMaxAmount
			restricted
			when (!LineWithMaxAmountRel exists)

		OnceWasActiveAgainRebateEligible
			restricted
			when ((ContractStatus.Addendum
			or     ContractStatus.Amendment
			or     ContractStatus.Released
			or     ContractStatus.Negotiation
			or     ContractStatus.FinalApproval
			or     ContractStatus.ReadyToActivate)
			and    HasBeenActivated)

		PaymentDueDaysEntered
			restricted
			when (PaymentDueDays entered)
		ParticipantGroupsExist
			restricted
			when (ParticipantGroupContractRel exists)
		FixedTiers
			restricted
			when (ContractTierFixedRel exists)
		ErrorsExistOnContract
			restricted
			when (ToleranceErrorsExist
			or    ContractLineErrorsExist)
		MaxEditPoAndRq
			restricted
			when (LifetimeEdit.PurchaseOrdersAndReqs)

		MaxEditPoOnly
			restricted
			when (LifetimeEdit.PurchaseOrders)
		LineTierCostsExist
			restricted
			when (ContractLineTierCostRel exists)
		TierCostsExist
			restricted
			when (ContractLineTierCostRel exists
			and   first ContractTierRel.FixedTier)

		MaximumAmountEntered
			restricted
			when (MaximumAmount > 0)
		RequestedAmountNonMax
			restricted
			when (MaxEditPoOnly
			and  !ServicePurchaseType)

		LinesAndNotService
			restricted
			when (!ServicePurchaseType
			and    ContractLineRel exists)

		LinesAndService
			restricted
			when (ServicePurchaseType
			and    ContractLineRel exists)

		OpenServiceLinesExist
			restricted
			when (ServicePurchaseType
  			and   OpenServiceContractLinesRel exists)

		EmailExists
			restricted
			when (ContractNotificationEmailRel exists)

		SupplierEmailExists
			restricted
			when (SupplierContractNotificationEmailRel exists)

		SubtypeEntered
			restricted
			when (ContractSubtype entered)

		SpecialItemsWillCostDefault
			restricted
			when ((ContractSubtype not entered
			and    ContractType.CanUseForCostDefaultingOptions.UseAllItems)
			or    (ContractSubtype entered
			and    ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems))

		SpecialItemsWillCreateItems
			restricted
			when ((ContractSubtype not entered
			and    ContractType.SpecialItemOptions.CreateItemOnActivation)
			or    (ContractSubtype entered
			and    ContractSubtype.SpecialItemOptions.CreateItemOnActivation)
			and    ContractLineSpecialItemRel exists)
		SpecialItemsWillCreateItemWorksheet
			restricted
			when ((ContractSubtype not entered
			and    ContractType.SpecialItemOptions.CreateItemWithProcess)
			or    (ContractSubtype entered
			and    ContractSubtype.SpecialItemOptions.CreateItemWithProcess)
			and    ContractLineSpecialItemRel exists)

		UseQuestionsOnContract
			restricted
			when (ContractExists
			and   ContractGroup.UseQuestions
			and   ContractQuestionsExist)
		CanUpdateQuestions
			restricted
			when (ContractExists
			and   ContractGroup.UseQuestions
			and   DraftOrAddendumOrAmendment)
		CannotUpdateQuestions
			restricted
			when (ContractExists
			and   ContractGroup.UseQuestions
			and  !DraftOrAddendumOrAmendment)
		CanUseQuestions
			restricted
			when (ContractGroup.UseQuestions)
		UseRebatesOnContract
			restricted
			when (ContractGroup.UseRebates)
		UseCommentsOnContract
			restricted
			when (ContractGroup.UseComments)
		UseRetainageOnContract
			restricted
			when (ContractGroup.UseRetainage)
		UseMilestonesOnContract
			restricted
			when (ContractGroup.UseMilestones)
		UseDeliverablesOnContract
			restricted
			when (ContractGroup.UseDeliverables)
		UseCommitmentsOnContract
			restricted
			when (ContractGroup.UseCommitments)
		UsePricingOnContract
			restricted
			when (ContractGroup.UsePricing)
		LinesWithNoTemplate
			restricted
			when ((ProcurementTemplatesExist
			or     ProcurementTemplateLinesExist)
			and    LinesWithNoTemplateExist)
		ProcurementTemplatesExist
			restricted
			when (ProcurementTemplateRel exists)
		UniqueTemplateLinesExist
			restricted
			when (!ProcurementTemplatesExist
			and    ProcurementTemplateLinesExist)
		LinesWithNoTemplateExist
			restricted
			when (LinesWithNoTemplateRel exists)
		IsValidForProcurementTemplate
			restricted
			when (HasBeenActivated
			and   !CapitatedContract
			and   !ContractTemplate
			and   ContractLinesExist
			and   (ExpirationDate >= current corporate date
			or     ExpirationDate !entered)
			and   (ContractPurchaseType
			or     CatalogQuotePurchaseType))
		HeaderCommitmentsExist
			restricted
			when (GLCommitRel exists)
		OpenHeaderCommitmentsExist
			restricted 
			when (HeaderCommitmentsExist
			and  (GLCommitRel.Status = 0
			or    GLCommitRel.Status = 3))
		DrillCommitmentsExist
			restricted
			when (GLCommitDrillRel exists)
		OpenCommitmentsExist
			when (OpenGLCommitDrillRel exists)

		HasSupplierContractComments
			restricted
			when (SupplierContractCommentsRel exists)
		HasSupplierContractAttachments
			restricted
			when (SupplierContractAttachmentsRel exists)
		HasSupplierContractLineComments
			restricted
			when (SupplierContractLineCommentsRel exists)
		HasSupplierContractLineAttachments
			restricted
			when (SupplierContractLineAttachmentsRel exists)
		HasNoRebateQualifiersChanged
			restricted
			when (DerivedHasNoContractRebateWithQualifierModifiedYes)
		HasSomeCommitments
			restricted
			when (POCommitmentsExist
			or    RQCommitmentsExist
			or    DrillCommitmentsExist)
		POCommitmentsExist
			restricted
			when (DrillCommitmentsExist
			and   UseHeaderCommitments
			and   ContractPolineDistributionsByContractRel exists)
		OpenPOCommitmentsExist
			restricted
			when (DrillCommitmentsExist
			and   UseHeaderCommitments
			and   OpenContractPolineDistributionsByContractRel exists)
		RQCommitmentsExist
			restricted
			when (DrillCommitmentsExist
			and   UseHeaderCommitments
			and   LifetimeEdit.PurchaseOrdersAndReqs
			and   RequisitionLineDistributionsByContractRel exists)
		OpenRQCommitmentsExist
			restricted
			when (DrillCommitmentsExist
			and   UseHeaderCommitments
			and   LifetimeEdit.PurchaseOrdersAndReqs
			and   OpenRequisitionLineDistributionsByContractRel exists)
		ServiceLinesExist
			restricted
			when (ServiceContractLinesRel exists)
		NonServiceLinesExist
			restricted
			when (NonServiceContractLinesRel exists)
		PrimaryContactIsBuyer
			restricted
			when (PrimaryContactAsBuyerRel exists)
		PurchasingContactIsBuyer
			restricted
			when (PurchasingContactAsBuyerRel exists)
		PricingManagerRoleExists
			restricted
			when (PricingManagerRel exists)
		PricingManagerRoleOnlyExists
			restricted
			when (PricingManagerRoleExists
			and   BuyerRel !exists
			and   ContractManagerRel !exists
			and   ApplicationAdministratorRel !exists
			and   PurchasingManagerRel !exists)
		PurchaseFromLocationExists
			restricted
			when (PurchaseFromLocationRel exists)
		NewPurchaseFromLocationExists
			restricted
			when (NewPurchaseFromLocationRel exists)
		CanCompareContractCosts
			restricted
			when (NotPricingManagerNotTemplate
			and   HasAPurchaseType
			and  !ServicePurchaseType
			and  !IsDistributorContract)
		NotPricingManagerNotTemplate
			restricted
			when (!ContractTemplate
			and   !PricingManagerRoleOnlyExists)

		CurrentRedlineDocumentNotFromSupplier
			restricted
			when (LatestRevisionRel.CreatedBySupplier = false)
		RedlineDocumentsExist
			restricted
			when (ContractRedlineDocumentRel exists)
		SupplierManageRedlineDocumentValidNonIDM
			restricted
			when (NegotiationStatus.NeedsSupplierApproval
			and   SupplierSameAsContractSupplier
			and   RedlineApprovals
			and not UseIDMPerClassificationAndSubClass)
		NonIDMRedlineDocumentExists
			restricted
			when (RedlineAttachmentRels exists
			and not UseIDMPerClassificationAndSubClass)
		NonIDMRedlineApproval
			restricted
			when (RedlineApprovals
			and not UseIDMPerClassificationAndSubClass)
		SupplierOkToCheckOutIDMDoc
			restricted
			when (IsASupplier
			and UseIDMPerClassificationAndSubClass
			and NegotiationStatus.NeedsSupplierApproval
			and not DerivedIsCheckedOut)
		SupplierOkToUndoCheckOutIDMDoc
			restricted
			when (IsASupplier
			and UseIDMPerClassificationAndSubClass
			and NegotiationStatus.NeedsSupplierApproval
			and DerivedIsCheckedOut)
		ViewIDMContractDocument
			restricted
			when (RedlineAttachmentRels exists
			and not ProposedContract.ProposedNotSubmitted
			and UseIDMPerClassificationAndSubClass)
		DisplayRedlineListPanel
			restricted
			when ((NonIDMRedlineApprovals
				or    (ContractRedlineDocumentRel exist
				and   not UseIDMPerClassificationAndSubClass))
			or (IDMRedlineApprovals
				and ContractRedlineDocumentRel not exist))
		DisplayIDMRedlineDocPanel
			restricted
			when (IDMRedlineApprovals
			and  IDMDocumentExists)
		CanDisplayNonIDMRedlinePanel
			restricted
			when ((NonIDMDocumentExists
			or    NonIDMRedlineApprovals)
			and   not UseIDMPerClassificationAndSubClass)
		CanDisplayIDMRedlinePanel
			restricted
			when (CanDisplayRedlinePanel
			and   UseIDMPerClassificationAndSubClass)
		RedlineApprovalsForNonIDM
			restricted
			when (RedlineApprovals
			and  (!IDMRedlineApprovals
			or    NonIDMDocumentExists))
		CanDisplayRedlinePanel
			restricted
			when (RedlineApprovals
			or    RedlineDocumentsExist)
		RedlineDocumentExists
			restricted
			when (RedlineAttachmentRels exists)
		HasIDMRedlineDocument
			restricted
			when (LatestRevisionRel.IDMUniqueId entered)
		RedlineApprovalsForIDM
			restricted
			when (RedlineApprovals
			and UseIDMPerClassificationAndSubClass)
		NonIDMDocumentExists
			restricted
			when (NonIDMDocumentRel exists)
		IDMDocumentExists
			restricted
			when (IDMDocumentRel exists)
		RedlineApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type = 3)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type = 3))
		IDMRedlineApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type.ApprovalsWithRedliningOnDocument
			and    ContractClassification.UseIDM)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type.ApprovalsWithRedliningOnDocument
			and	   ContractSubclassification.UseIDM))
		NonIDMRedlineApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type.ApprovalsWithRedliningOnDocument
			and    not ContractClassification.UseIDM)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type.ApprovalsWithRedliningOnDocument
			and	   not ContractSubclassification.UseIDM))

		OpenSupplierChangePOLinesExist
			restricted
			when (OpenSupplierChangePurchaseOrderLinesRel exists)
		OpenSupplierChangeReqLinesExist
			restricted
			when (OpenSupplierChangeRequisitionLinesRel exists)
		VendorChangeExists
			restricted
			when (ContractVendorChangeRel exists)
		CreateRedlineAction
			restricted
			when (IDMRedlineApprovals
			and   IDMDocumentRel not exist
			and   (ContractStatus.Draft
			or     ContractStatus.Amendment
			or     ContractStatus.Addendum
			or    (ContractStatus.Negotiation
			and   (NegotiationStatus.NeedsNegotiation				
			or     NegotiationStatus.NeedsInternalApproval))))	    
		ForCMUpdate
			restricted
			when (IDMRedlineApprovals
			and   IDMDocumentRel exist
			and  UseIDMPerClassificationAndSubClass
			and (ContractStatus.Draft
			or ContractStatus.Amendment
			or ContractStatus.Addendum
			or (ContractStatus.Negotiation
			and (NegotiationStatus.NeedsNegotiation				
			or   NegotiationStatus.NeedsInternalApproval))))	

		DisplayIDMRedlineDelete
			restricted
			when (ContractStatus.Draft
			and   LatestRevisionRel.IDMSignatureVersion not entered)

		RedlineNotifEmailAttachmentExists
			restricted
			when (ContractRedlineNotifEmailAttachmentRel exists)

		MembersToMaintainForDistributors
			when (ManContractLineNoDistContractLineRel exists)

		ContractDocumentCreated
			restricted
			when (LatestContractDocumentRel exists
			or IDMDocumentPID entered)

		ServiceInvoicesExist 
			restricted
			when (ReleasedServiceInvoicesRel exists)

		AnyReleasedServiceInvoicesExist 
			restricted 
			when (ServiceContractReleasedInvoiceRel exists)
		
		ManufacturerLinkedToGPOImportContract
			restricted
			when (GPOContractImportRel exists
			and   IsManufacturerContract)

		DistributorLinkedToGPOImportContract
			restricted
			when   (IsDistributorContract
			and    first ManufacturerContractForDistContractRel.MfgContractRel.ManufacturerLinkedToGPOImportContract)

		ManufacturerNotLinkedToGPOImportContract
			restricted
			when (GPONegotiated
			and   GPOContractImportRel !exists
			and   IsManufacturerContract)

		DistributorNotLinkedToGPOImportContract
			restricted
			when (GPONegotiated
			and   IsDistributorContract
			and   !first ManufacturerContractForDistContractRel.MfgContractRel.ManufacturerLinkedToGPOImportContract)

		MultiTierDistributorContract
			restricted
			when (GPOContractImportRel.MultiTierDistributor)

		IsUsingIDMTemplate
			restricted
			when ((ContractSubclassification entered
			and    ContractSubclassification.UseIDM)
			or	  (ContractSubclassification not entered
			and    ContractClassification.UseIDM))

		ContractNoApprovals
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type.NoApprovals)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type.NoApprovals))

		VendorValidForInvoice
			restricted
			when (PayablesInvoice.Vendor not entered
			or	  PayablesInvoice.Vendor = Vendor)

		DisplayComments
			restricted
			when (ContractComment set exists
			and   UseCommentsOnContract)

		DisplayRelatedReferences
			restricted
			when (RelatedContract set exists)

		DisplayRedlineDocuments     
			restricted
			when (ContractRedlineDocument set exists
			and   CanDisplayNonIDMRedlinePanel)

		InformationAvaliable
			restricted
			when (HasError
			or ManufacturerWithLineMembers
			or HasModifiedPricing
			or ManufacturerModificationsToPush
			or CostComparisonExists
			or BidWorksheetExists
			or HasModifiedPricing
			or CostSavingsExists
			or ResolvedSuggestedLineItemsExist)

		HasError
			restricted
			when (BudgetErrorsExist
			or WarningBudgetErrorsExist
			or ToleranceErrorsExist
			or ContractLineErrorsExistNotInactiveVendorItem
			or QuestionsRequireAttention
			or (BudgetEditFailure
				and !ActivationInProgress))

		ShowAdditionalInformationLinks
			restricted
			when (HasInactiveVendorItems
			or CostComparisonExists
			or BidWorksheetExists
			or CostSavingsExists
			or UnresolvedSuggestedLineItemsExist
			or ResolvedSuggestedLineItemsExist
			or HasResolvedMatchInvoiceMessage
			or HasUnreleasedPOLines
			or HasUnreleasedReqLines
			or HasUnprocessedPOInterface)

		ShowCreateContractDocument
			restricted
			when (InProgressAndNotContractTemplate
			and  ((ValidForIDMGeneration
			and    ContractDocumentIDMTemplate entered)
			or   (!UseIDM and ContractDocumentTemplate entered)))

		ValidForIDMGeneration
			restricted
			when ((UseIDM or IsUsingIDMTemplate)
			and  ((IDMRedlineApprovals
			and    StatusesForRedlineDocumentGeneration)
			or     not IDMRedlineApprovals))

		StatusesForRedlineDocumentGeneration
			restricted
			when  (ContractStatus.Draft
			or   ((ContractStatus.Amendment
			or     ContractStatus.Addendum)
			and    IDMDocumentRel not exist))

		ShowUpdateIDMTemplate
			restricted
			when (InProgressAndNotContractTemplate
			and   ValidForIDMTemplateUpdate)

		ValidForIDMTemplateUpdate
			restricted
			when ((UseIDM or IsUsingIDMTemplate)
			and   (not IDMRedlineApprovals
			and    StatusesForContractDocumentTemplateUpdate))

		StatusesForContractDocumentTemplateUpdate
			restricted
			when  (ContractStatus.Released
			or	   ContractStatus.Negotiation
			or 	   ContractStatus.FinalApproval
			or	   ContractStatus.ReadyToActivate)

		ShowNoIDMTemplateWarning
			restricted
			when  (ValidForIDMGeneration
			and    ContractDocumentIDMTemplate not entered)

		ShowErrorLinks
			restricted
			when (ContractLineErrorsExistNotInactiveVendorItem
			or QuestionsRequireAttention
			or HasOpenMatchInvoiceMessage
			or UnsupportedIDMAttachmentsExist
			or HasCapitatedComponentItemsWithNoFinalCost
			or HasCapitatedCompanyLocationItemsWithNoFinalCost)





		RequesterExists
			restricted
			when (RequesterRel exists)

		SupplierExists
			restricted
			when (PortalSupplierRel exists)

		ShowInformationLinksForm
			restricted
			when (ContractExists
			and  (ShowErrorLinks
			or    ShowAdditionalInformationLinks))

		HasOpenMatchInvoiceMessage
			restricted
			when (OpenMatchInvoiceMessageRel exists)

		HasResolvedMatchInvoiceMessage
			restricted
			when (ResolvedMatchInvoiceMessageRel exists)

		ShowInformationMultiListPanel	
			restricted
			when (ContractExists
			and   ContractLineExists 
			and  (BudgetErrorsExist
			or    WarningBudgetErrorsExist
			or    ToleranceErrorsExist
			or    ManufacturerWithLineMembers
			or    HasModifiedPricing
			or    HasLinesWithMatchingVendorAndManufacturerItems
			or    ManufacturerModificationsToPush
			or    ManualToleranceErrorsExist))

		IsActiveExpiringOrExpiredContract
			restricted
			when (Contract.NotContractTemplate
			and   !RemoveFromExpireList
			and  (IsAddendumOrAmendment
			or    ContractStatus.Active)
			and  (ExpirationDateYellowAlert
			or    ExpirationDateRedAlert
			or    OneDayToExpiration
			or    PastExpirationDate))

		CanRemoveFromExpireListActionForActive
			restricted
			when (IsActiveExpiringOrExpiredContract
			and   ContractStatus.Active)

		CanRemoveFromExpireListActionForAddendum
			restricted
			when (IsActiveExpiringOrExpiredContract
			and   ContractStatus.Addendum)

		CanRemoveFromExpireListActionForAmendment
			restricted
			when (IsActiveExpiringOrExpiredContract
			and   ContractStatus.Amendment)

		HasPendingCommitments
			restricted
			when (TotalPendingCommitments != 0)

		IDMContractApprovalsWithNoRedlining
			restricted
			when ((ContractSubclassification not entered
			and    ContractClassification.Type.ApprovalsWithNoRedlining
			and    ContractClassification.UseIDM)
			or	  (ContractSubclassification entered
			and    ContractSubclassification.Type.ApprovalsWithNoRedlining
			and	   ContractSubclassification.UseIDM))

		WithoutIDMContractDocument
			restricted
			when (IDMContractApprovalsWithNoRedlining
			and   TermsExist
			and   ContractDocumentIDMTemplate entered
			and   IDMDocumentPID not entered)

		NonIDMContractDocumentExists
			restricted
			when (ContractDocumentRel exists)

		UsingIDMAndNonIDMContractDocumentExists
			restricted
			when (UseIDM
			and   NonIDMContractDocumentExists)

		UsingIDMAndNonIDMRedlineDocumentExists
			restricted
			when (UseIDMPerClassificationAndSubClass
			and   NonIDMDocumentExists)

		IDMArticlesWithValidAttachments 
			restricted
			when (IsUsingIDMTemplate
			and   not NonDeletedContractArticlesWithNonDocxAttachmentRel exists)

		ContractTermAndConditionAttachmentsExist 
			restricted 
			when (ContractTermAndConditionAttachmentRel exists)
		
		UnsupportedIDMAttachmentsExist
			when (ContractExists
			and   ContractTermAndConditionAttachmentsExist
			and   UnsupportedContractTermAndConditionAttachmentsByDisplayRel exists)

		DisplayProcessIndicator
			restricted
			when (first PfiWorkunitRel.HasProcessIndicator
			and   !ContractStatus.Negotiation
			and   !ContractStatus.FinalApproval
			and	  !RedlineApprovals)

		DisplayFinalProcessIndicator
			restricted
			when (first PfiWorkunitRel2.HasProcessIndicator
			and   ContractStatus.FinalApproval)

		DisplayNegotiationsProcessIndicator
			restricted
			when (first PfiWorkunitRel3.HasProcessIndicator
			and   ContractStatus.Negotiation
			and	  AllowTermUpdatesDuringFinalApproval)

		DisplayNegotiationsNoUpdateProcessIndicator
			restricted
			when (first PfiWorkunitRel4.HasProcessIndicator
			and   ContractStatus.Negotiation
			and	  !AllowTermUpdatesDuringFinalApproval)

		PayablesInvoiceAvailable
			restricted
			when (PayablesInvoice in context
			and   PayablesInvoice.IsUpdateable)

		DisplayContractMilestoneSection
			when (ContractMilestoneRels exists)

		CanCreateFromSelectedLines 
			restricted 
			when (ContractLinesExist
			and   !ContractTemplate
			and   (CatalogQuotePurchaseType
			or     ContractPurchaseType))

		HasSelectedLines 
			restricted 
			when (ContractLineSelectedRel exists)

		HasCopiedToContract 
			restricted 
			when (CopiedToContractRel exists)

		DisplayLineSection
			when (ContractLineRel exists)

	Relations
		ContractRebatePerRebateTypeRel is a ContractRebate set
			Instance Selection
				where (related.ContractRebateType = SupplyManagementReportContext.SupplyManagementReportContractGroupField.ContractRebateType
				or     SupplyManagementReportContext.SupplyManagementReportContractGroupField.ContractRebateType not entered)

		ContractPerformanceEvaluationRel
			one-to-many relation to SupplierPerformanceEvaluation
			Field Mapping uses symbolic key
				related.SupplierGroup					= ContractGroup
				related.Supplier						= Supplier
				related.Contract						= Contract
		
		PerformanceEvaluationContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses symbolic key
				related.ContractGroup 						= ContractGroup
				related.Contract 							= Contract
			Instance Selection
				where (related.PerformanceEvaluator)
		BusinessGroupRel						
			one-to-one relation to BusinessGroup
			Field Mapping uses symbolic key
				related.BusinessGroup = ContractGroup

        AttributeUpdatesRel 
            one-to-many relation to ContractLineAttributeUpdate 
            Field Mapping uses ByContractLine 
                related.ContractGroup      = ContractGroup 
                related.Contract           = Contract 

		LocalInventoryCompanyRel 
			one-to-one relation to InventoryCompany 
			Field Mapping uses symbolic key 
				related.Company 		= LocalCompany

		LocalPricingGroupRel 
			one-to-one relation to PricingGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup   = ContractGroup
				related.PricingGroup    = LocalPricingGroup		
		
		TransientProposalTemplateRel 
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup 	= ContractGroup 
				related.Contract        = TransientProposalTemplate 
			Instance Selection 
				where (related.ProposalTemplate = true)
		
		PricingManagerRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "PricingManager_ST"

 		OtherContractsReferencingThisContractRel
            one-to-many relation to RelatedContract
            Field Mapping uses ByID
                related.ContractGroup       = ContractGroup
                related.RelatedContractID   = Contract  
            Instance Selection
                where (related.RelatedContractType = 11
                or     related.RelatedContractType = 16
                or     related.RelatedContractType = 9
                or     related.RelatedContractType =6)
		ContractHeaderAllowancesRel
			one-to-many relation to ContractAllowance
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine !entered)

		ContractOpenHeaderAllowancesRel
			one-to-many relation to ContractAllowance
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine !entered
				and    related.Closed       = false)

		ContractLineAllowancesRel
			one-to-many relation to ContractAllowance
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine entered)

		ContractAllowancesRel
			one-to-many relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract

		CommittedAllowancesRel
			one-to-many relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.Committed)

		ContractLocationLocalRel 
			one-to-one relation to ContractAndLineLocation 
			Field Mapping uses ByContractOnly 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
				related.ContractAndLineLocation.Company				= LocalCompany
				related.ContractAndLineLocation.Location			= LocalInventoryLocation 
				related.ContractAndLineLocation.RequestingLocation	= LocalRequestingLocation  			

		ContractLocationRel 
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract

		ContractLocationNotForClinicalUseRel 
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ContractLine !entered
				and    !related.ClinicalSystemUse)		
		ContractHeaderLocationRel 
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ContractLine !entered)

		ContractClinicalLocationRel
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ContractLine !entered
				and    related.ClinicalSystemUse)			
		
		ContractLocalHeaderLocationRel 
			one-to-one relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= LocalContract
				related.ContractLine                                = blank 
				related.ContractAndLineLocation.Company             = LocalCompany
				related.ContractAndLineLocation.Location            = LocalInventoryLocation
				related.ContractAndLineLocation.RequestingLocation  = LocalRequestingLocation

		ContractHeaderLocationForTaxRel 
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ContractLineNotEntered
				and    related.TaxRelated)
		ContractLineLocationForTaxRel 
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ContractLineEntered
				and    related.TaxRelated)
		ContractLineWithTaxRel 
			one-to-many relation to ContractLine 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where ((related.TaxCode entered
				or      related.Taxable = true)
				and     related.LineNotClosed)	

		LinesForClinicalUseRel
			one-to-many relation to ContractLine 
			delete cascades 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where  (related.ClinicalSystemUse = true
				and     related.LineNotClosed
				and     related.ManufacturerContract = Contract)				

		LinesNotForClinicalUseRel
			one-to-many relation to ContractLine 
			delete cascades 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where  (related.ClinicalSystemUse = false
				and     related.ItemType.Special
				and     related.LineNotClosed
				and     related.ManufacturerContract = Contract)			
		
		ItemMasterLinesRel 
			one-to-many relation to ContractLine 
			delete cascades 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where  (related.ItemType.Itemmast
				and     related.LineNotClosed
				and     related.ManufacturerContract = Contract)		
		ContractLineVendorDeterminedNoAllowanceRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.LineNotClosed
				and    related.CostOption = 3
				and    !related.HasAllowances)

		SupplierContactMessageRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
				related.SupplierGroup				= actor.agent(SupplierSourceId).SupplierGroup
 				related.Supplier  			 		= actor.agent(SupplierSourceId).Supplier
				related.SupplierSourceId            = actor.agent(SupplierSourceId).SupplierSourceId
			Instance Selection
				where (related.SupplierGroup			    = ContractGroup
				and    related.OriginatingContract          = Contract)

		SupplierMessageDialogRel
			one-to-many relation to SupplierMessageDialog
			Field Mapping uses symbolic key
				related.SupplierGroup				= ContractGroup
 				related.Supplier					= Supplier
				related.SupplierSourceId            = SupplierSourceId
			Instance Selection
				where (related.SupplierContactMessage.OriginatingContract = Contract)

		ContractManagerRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			= actor
				related.ActorRole.Role	= "ContractManager_ST"

		ContractVendorChangeRel is a ContractVendorChange set

		EditVendorChangeRel
			one-to-many relation to ContractVendorChange
			Field Mapping uses ByOldVendor
				related.ContractGroup   = ContractGroup
				related.Contract        = Contract
				related.OldVendor       = LocalVendor

		PurchasingContactAsBuyerRel
			one-to-one relation to Buyer
			Field Mapping uses symbolic key
				related.HROrganization   = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer            = PurchasingContact

		ApplicationAdministratorRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "ApplicationAdministrator_ST"

		RequesterRel
            one-to-one relation to Requester
            Field Mapping uses symbolic key
            	related.HROrganization 	= actor.agent(Employee).HROrganization
                related.Requester 		= actor.agent(Employee).Employee

		PurchaseFromLocationRel
			one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup          = ContractGroup
				related.Vendor               = Vendor
				related.PurchaseFromLocation = ApPoPurchaseFrom.PurchaseFromLocation

		NewPurchaseFromLocationRel
			one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup          = ContractGroup
				related.Vendor               = LocalNewVendor
				related.PurchaseFromLocation = LocalNewPurchaseFrom

		RQGeneralLedgerSystemCodeRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= ContractGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "RQ"

		RecallProductRel
			one-to-many relation to RecallProduct
			Field Mapping uses symbolic key
				related.RecallGroup      	= ContractGroup
				related.RecallNotice   		= LocalNotice

		RecallNoticeRel
			one-to-one relation to RecallNotice
			Field Mapping uses symbolic key
				related.RecallGroup      	= ContractGroup
				related.RecallNotice   		= LocalNotice

		BuyerRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			= actor
				related.ActorRole.Role	= "Buyer_ST"

		ContractImportDistributorRel
			one-to-many relation to ContractImportDistributor
			Field Mapping uses ByDistributorContractNumber
				related.ContractGroup    			= ContractGroup
				related.DistributorContractNumber 	= Contract

		ContractImportGPOSupplierForThisContractRel
			one-to-many relation to ContractImportGPOSupplier
			Field Mapping uses ByContractSupplier
				related.SupplierGroup               = ContractGroup
				related.ContractSupplier            = Supplier
			Instance Selection
				where (related.DefaultDistributorContract = Contract)

		PurchasingManagerRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			= actor
				related.ActorRole.Role	= "PurchasingManager_ST"

		SupplierSourceIdRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup    = ContractGroup
				related.Supplier         = Supplier
				related.SupplierSourceId = SupplierSourceId

		ChangeSupplierSourceIdRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup		= ContractGroup
				related.Supplier			= LocalSupplier
				related.SupplierSourceId	= SupplierSourceId

		ContractLineTierMemberQualRel
			one-to-many relation to ContractLineTierMemberQual
			Field Mapping uses ByTierQual
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract

		ContractTierRel	is a ContractTier set

		ContractCommentWordDocRel is a ContractComment set 

		ContractCommentWordDocPrintOnPoRel				
			one-to-many relation to ContractComment
		    Field Mapping uses part of key
		        related.ContractGroup  = ContractGroup
		        related.Contract       = Contract
		    Instance Selection
		        where (related.PrintOnPoOnlyComment)

		ContractPurchaseFromRels is a ContractPurchaseFrom set

		ChildContractRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
			Instance Selection
				where (related.Contract.NotClosed
				and    related.ParentContract = Contract
				and    related.MaximumAmount > 0)

		StandardParticipantRel
			one-to-many relation to ContractParticipant
			Field Mapping uses ByLocReqLocSet
				related.ContractGroup									= ContractGroup
				related.Contract										= Contract
				related.ContractParticipant.ParticipantLocation.Company	= ProcessLevelGroup.Company

		ContractSupplierCertificationRel
			one-to-many relation to SupplierCertification
			Field Mapping uses symbolic key
				related.SupplierGroup									= ContractGroup
				related.Supplier                                        = Supplier
			Instance Selection
				where (related.SupplierSourceId !entered
				or     related.SupplierSourceId = SupplierSourceId)

		ContractPurchFromRel
			one-to-one relation to ContractPurchaseFrom
			Field Mapping uses ByPurchaseFrom
				related.ContractGroup											= ContractGroup
				related.Contract												= Contract
				related.ContractPurchaseFrom.ParticipantLocation.Company		= LocalCompany
				related.ContractPurchaseFrom.ParticipantLocation.Location		= LocalInventoryLocation
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation	= LocalRequestingLocation

		SupplierPurchaseFromRels
			one-to-many relation to SupplierPurchaseFrom
			Field Mapping uses symbolic key
				related.SupplierGroup	= ContractGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.PayablesVendorLocationActive)

		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < EffectiveDate
				and	   related.PeriodType.EndDate)

		NewGeneralLedgerCalendarPeriodRel  
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < LocalSpreadDate
				and	   related.PeriodType.EndDate)				

		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.AccountingEntity			= CommitmentAccount.ToAccountingEntity
				related.Ledger						= LocalLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)

		BackgroundGroupNonFinishedTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = BackgroundGroupAsyncId
			Instance Selection
				where (related.BackgroundGroup entered
				and	   related.NonFinishedTriggersExist)

		OpenSupplierChangePurchaseOrderLinesRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup      = ContractGroup
				related.Contract              = Contract
			Instance Selection
				where (related.Closed = "N")

		OpenSupplierChangeRequisitionLinesRel
			one-to-many relation to RequisitionLine
			Field Mapping uses ByContract
				related.Contract              = Contract
			Instance Selection
				where (!related.SourceRecordExists
				and    related.Closed             = false
				and    related.Company.ItemGroup  = ContractGroup)

		ContractRebateQualifiersRel is a ContractRebateQualifier set
			Instance Selection
				where (related.ContractRebateType = SupplyManagementReportContext.SupplyManagementReportContractGroupField.ContractRebateType
				or SupplyManagementReportContext.SupplyManagementReportContractGroupField.ContractRebateType not entered)

		ContractLinesWithContractComplianceInvoiceLinesOnContractRel is a ContractLine set
			Instance Selection
				where (related.HasContractComplianceInvoiceLinesOnContract)

		ContractLinesWithContractComplianceInvoiceLinesOffContractRel is a ContractLine set
			Instance Selection
				where (related.HasContractComplianceInvoiceLinesOffContract)

		ContractLineRel is a ContractLine set 

		ContractLineSelectedRel is a ContractLine set 
			Instance Selection 
				where (related.SelectedForCopy)
		
		ContractLineReplenishmentItemForParticipantRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup        = ContractGroup
				related.Contract             = Contract
			Instance Selection
				where (related.ParticipantReplenishmentExists)

		ContractCommentRel
			one-to-many relation to ContractComment
			Field Mapping uses part of key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract

		ContractLineMemberRel       is a ContractLineMember(Contract) set
		ContractLineAOCRel          is a ContractLineAOC set
		ContractLineCommentRel		is a ContractLineComment set
		ContractDeliverableRels     is a ContractDeliverable set
		ContractMilestoneRels       is a ContractMilestone set

		LatestContractDocumentRel is a ContractDocument set
			Instance Selection
				where (related.LatestDocumentRevision)

		ContractPreferredManufacturerRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByContractLocation
				related.ContractGroup			=	ContractGroup
  				related.Contract				=	Contract

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CONTRACT"
				related.AppsValue   = DerivedAppsValue

		PfiWorkunitRel2
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CONTRACT"
				related.AppsValue   = DerivedAppsValue2

		PfiWorkunitRel3
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CONTRACT"
				related.AppsValue   = DerivedAppsValue3

		PfiWorkunitRel4
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CONTRACT"
				related.AppsValue   = DerivedAppsValue4

		PfiWorkunitRel5
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CONTRACT"
				related.AppsValue   = DerivedAppsValue5

		ProcurementTemplateRel
			one-to-many relation to ProcurementTemplate
			Field Mapping uses ByContract
				related.ProcurementGroup		=	ContractGroup
  				related.Contract				=	Contract

		ProcurementTemplateLineRel
			one-to-many relation to ProcurementTemplateLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup		=	ContractGroup
  				related.Contract				=	Contract

		LinesWithNoTemplateRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup           = ContractGroup
				related.Contract                = Contract
			Instance Selection
				where (related.LineNotClosed
				and    !related.ErrorsExist
				and    related.CanUseForCostDefaulting
				and    related.HasNoProcurementTemplateLines)	

		PayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByContract
				related.Vendor                  =  Vendor
				related.PurchasingContract      =  Contract
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup)

		UnreleasedServiceInvoicesRel
			one-to-many relation to MatchServiceContractInvoice 
			Field Mapping uses ByVendorGroupContract
				related.VendorGroup             = ContractGroup 
				related.Contract 				= Contract 
			Instance Selection
				where (related.PayablesInvoice.Status     = 0) 

		ReleasedServiceInvoicesRel
			one-to-many relation to MatchServiceContractInvoice
			Field Mapping uses ByVendorGroupContract
				related.VendorGroup             = ContractGroup 
				related.Contract 				= Contract 
			Instance Selection
				where (related.PayablesInvoice.Status     = 1) 

		BuyerVendorsRel
			one-to-many relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization          = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer                   = Buyer
				related.VendorGroup             = ContractGroup
			Instance Selection
				where (related.BuyerVendor.PurchaseFromLocation = blank)

		BuyerVendorRel
			one-to-many relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization          = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer                   = Buyer
				related.VendorGroup             = ContractGroup
			Instance Selection
				where (related.BuyerVendor.Vendor      = Vendor
				and    related.BuyerVendor.PurchaseFromLocation = blank)

		BuyerPurchaseFromsRel
			one-to-many relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization          = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer                   = Buyer
				related.VendorGroup             = ContractGroup
			Instance Selection
				where (related.BuyerVendor.PurchaseFromLocation entered)

		BuyerPurchaseFromRel
			one-to-many relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization          = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer                   			= Buyer
				related.VendorGroup             			= ContractGroup
				related.BuyerVendor.Vendor      			= Vendor
				related.BuyerVendor.PurchaseFromLocation    = ApPoPurchaseFrom.PurchaseFromLocation

		ContractDocumentRel is a ContractDocument set
			Instance Selection
				where (related.IsMainDocument)

		ContractNonMainDocumentRel is a ContractDocument set
			Instance Selection
				where (!related.LatestDocumentRevision
				and    !related.IsAddendumDocument)

		ContractLineRelForContextualItem
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ContextItem
				related.Contract		= Contract

		ContractLineRelForContextualItemAndVendorItem is a ContractLine set
			Instance Selection
				where ((ContextItem not entered 		or related.ItemNumber = ContextItem)
				and    (ContextVendorItem not entered 	or related.VendorItem = ContextVendorItem))

		GLCommitRel   
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance

		GLCommitDrillRel  
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID

		UnreleasedGLCommitDrillRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where (related.Status = 0)

		OpenGLCommitDrillRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where (related.Status != 1)

		ReleasedOrHistoryCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where (related.Status = 1
				or     related.Status = 3)

		RolledOverCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection 
				where (related.POCommitOrigID entered)

		ProjectVendorContractsRel
			one-to-many relation to ProjectVendorContract
			Field Mapping uses ByContractVendor
				related.FinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.ContractGroup           = ContractGroup
				related.Contract				= Contract
				related.Vendor					= Vendor

		ProjectContractsRel
			one-to-many relation to ProjectContract
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= first ProjectVendorContractsRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.ProjectContract.Project = any ProjectVendorContractsRel.Project
				or     related.ProjectContract.Project = any ProjectVendorContractsRel.Project.AncestorContract)

		ContractLinePriceChangeCompareRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses ByFromContract
				related.FromContract             = Contract
			Instance Selection
				where (related.ContractGroup     = ContractGroup
				and    related.Contract          = LocalContract)

		ContractLinePriceChangeTierRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses ByTierOnly
				related.ContractTier             = LocalTier
			Instance Selection
				where (related.ContractGroup     = ContractGroup
				and    related.FromContract      = Contract
				and    related.Contract          = LocalContract)

		UnresolvedSuggestedLineItemsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup           = ContractGroup
				related.Contract      			= Contract
			Instance Selection
				where (related.OpenSuggestedItemsExist)
		CatchweightLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup           = ContractGroup
				related.Contract      			= Contract
			Instance Selection
				where (related.HasCatchweightItem)

		ResolvedSuggestedLineItemsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup           = ContractGroup
				related.Contract      			= Contract
			Instance Selection
				where (related.ResolvedSuggestedItemsExist)

		AccountingEntityCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.ToAccountingEntity = AccountingEntity)

		AccountingUnitCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.AccountingUnit = AccountingUnit)

		AccountCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.GeneralLedgerChartAccount = Account)

		ProjectCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.Project = Project)

		Dimension1CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension1 = FinanceDimension1)

		Dimension2CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension2 = FinanceDimension2)

		Dimension3CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension3 = FinanceDimension3)

		Dimension4CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension4 = FinanceDimension4)

		Dimension5CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension5 = FinanceDimension5)

		Dimension6CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension6 = FinanceDimension6)

		Dimension7CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension7 = FinanceDimension7)

		Dimension8CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension8 = FinanceDimension8)

		Dimension9CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension9 = FinanceDimension9)

		Dimension10CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10)


		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID

		GeneralLedgerSystemCodeRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

		CommittedContractLinesRel is a ContractLine set
			Instance Selection
				where (related.UseCommitments)

		BudgetEditBatchRel
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByDocumentID
				related.DocumentID                         = UniqueID

		BudgetRebuildBTGTRel
			one-to-many relation to BudgetRebuildBTGT
			Field Mapping uses ByDocument
				related.BudgetRebuildBTGT.DocumentID       = UniqueID

		BudgetEditDetailRel
			one-to-many relation to BudgetEditDetail
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.BudgetEditDetail.BudgetEditGroup	= LocalBudgetEditGroup

		ProcurementTemplateContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ContextItem
				related.Contract		= Contract

		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup          = ContractGroup
				related.Vendor               = Vendor

		VendorGroupRel
			one-to-one relation to VendorGroup
			Field Mapping uses symbolic key
				related.VendorGroup          = ContractGroup

		WorkingContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedWorkingContract
				related.ContractGroup 		 = ContractGroup
				related.Contract      	 	 = Contract
				related.WorkingContract 	 = true

		DistDirectContractLinesRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgContractLine
				related.ContractGroup        = ContractGroup
				related.Contract             = Contract
				related.ManufacturerContract = Contract
			Instance Selection
				where (related.LineNotClosed)

		DistContractLinesWithUnreleasedPORel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        = ContractGroup
				related.ManufacturerContract = Contract
			Instance Selection
				where (related.HasUnreleasedPoLine)

		DistContractLinesWithUnreleasedReqRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        = ContractGroup
				related.ManufacturerContract = Contract
			Instance Selection
				where (related.HasUnreleasedReqLine)

		DistContractLinesWithUnprocessedPORel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        = ContractGroup
				related.ManufacturerContract = Contract
			Instance Selection
				where (related.HasPurchaseOrderInterface)

		ServiceAmountLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key 
				related.ContractGroup        = ContractGroup
				related.Contract             = Contract	
			Instance Selection 
				where (related.ServiceCode = "A")		
		ServiceQuantityLineRel 
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key 		
				related.ContractGroup        = ContractGroup
				related.Contract             = Contract	
			Instance Selection 
				where (related.ServiceCode = "Q")								
		ContractTermsByDisplayRel
			one-to-many relation to ContractTermAndCondition
			Field Mapping uses symbolic key
				related.ContractGroup        = ContractGroup
				related.Contract             = Contract

		NonDeletedContractTermsByDisplayRel
			one-to-many relation to ContractTermAndCondition
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (!related.Deleted)

		ContractTermAndConditionAttachmentRel 
			one-to-many relation to ContractTermAndConditionAttachment 
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract		
		UnsupportedContractTermAndConditionAttachmentsByDisplayRel
			one-to-many relation to ContractTermAndConditionAttachment
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.InvalidIDMAttachment)

		ContractArticlesByDisplayRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		NonDeletedContractArticlesByDisplayRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (!related.Deleted)

		NonDeletedContractArticlesWithNonDocxAttachmentRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (not related.Deleted
    			and related.HasTermsWithInvalidAttachment)

		ContractTermUpdatesInCurrentVersionRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TermsUpdatedInThisVersion)

		ContractArticleUpdatesInCurrentVersionRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ArticlesUpdatedInThisVersion)

		PendingTermUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PendingTermAndConditionUpdateExists)

		PendingTermInternalUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.PendingTermAndConditionInternalUpdateExists)

		PendingArticleUpdateExistsRel
			one-to-many relation to ContractArticle
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractArticle	= LocalContractArticleForVersions
			Instance Selection
				where (related.PendingArticleUpdateExists)

		NonAttachmentPendingContractTermAndConditionUpdateExistRel
			one-to-many relation to ContractTermAndCondition
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractArticle				= LocalContractArticleForVersions
				related.ContractTermAndCondition	= LocalContractTermAndConditionForVersions
			Instance Selection
				where (related.NonAttachmentPendingContractTermAndConditionUpdateExist)

		NoPendingTermUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (!related.PendingTermAndConditionUpdateExists)

		NoPendingArticleUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (!related.PendingArticleUpdateExists)

		PendingArticleUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.PendingArticleUpdateExists)

		PendingArticleInternalUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PendingArticleInternalUpdateExists)

		PendingArticleDeletionUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PendingRequestToDelete)

		ContractLineFromCostCompareEmailRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = LocalToContract
			Instance Selection
				where (related.ComparisonOnly)

		DraftTermUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.DraftTermAndConditionUpdateExists)

		DraftTermInternalUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.DraftTermAndConditionInternalUpdateExists)

		DraftArticleUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.DraftArticleUpdateExists)

		DraftArticleInternalUpdatesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.DraftArticleInternalUpdateExists)

		ReleasedArticleRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.IsActive
				and    !related.Deleted
				and    related.ContractStatus.Released)

		ActiveContractArticlesRel is a ContractArticle set
			Instance Selection
				where (related.IsActive
				and	   !related.Deleted)

		AddendumArticlesRel is a ContractVersion set

		ContractLinePriceBreaksRel is a ContractLine set
			Instance Selection
				where (related.PriceBreaksExist)

		EmployeeRel
			one-to-many relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization     = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization

		ParticipantGroupContractRel
			one-to-many relation to ParticipantGroupContract
			delete cascades
			Field Mapping uses ByContract
				related.ProcurementGroup    = ContractGroup
				related.Contract        	= Contract

		LocationOnlyParticipantGroupContractRel
			one-to-many relation to ParticipantGroupContract
			Field Mapping uses ByContract
				related.ProcurementGroup    = ContractGroup
				related.Contract        	= Contract	
			Instance Selection 
				where (related.LocationOnly = true)	

		LocalParticipantGroupContractRel
			one-to-one relation to ParticipantGroupContract
			Field Mapping uses ByContract
				related.ProcurementGroup    = ContractGroup
				related.Contract        	= Contract	
				related.ParticipantGroup	= LocalParticipantGroup	
		
		ContractGroupParticipantGroupRel
			one-to-many relation to ParticipantGroupContract
			delete cascades
			Field Mapping uses ByContract
				related.ProcurementGroup    = ContractGroup
				related.Contract        	= Contract
			Instance Selection 
				where (related.ParticipantGroup = ContractGroup.DefaultParticipantGroupForContractLocations)				

		NonClosedDistPricingMemberRel is a ContractDistributorPricingMember set
			Instance Selection
				where (!related.MfgContractTierInfo.MfgContract.ContractStatus.Closed)

		SupplierDiversitySelectionRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses BySupplier
				related.SupplierGroup      = ContractGroup
				related.Supplier    	   = Supplier
			Instance Selection
				where (((related.EffectiveDate  <= ExpirationDate
				and    related.ExpirationDate >= EffectiveDate)
				or     VendorGroupRel.DiversityValidWhenWithinDates = false)
				and    related.CanUseForDocument = true)

		ContractDiversityRel
			one-to-one relation to ContractDiversity
			Field Mapping uses symbolic key
				related.ContractGroup      		= ContractGroup
				related.Contract           		= Contract
				related.PayablesDiversityCode   = LocalDiversityCode

		ContractExistingDiversityRel
			one-to-many relation to ContractDiversity
			Field Mapping uses symbolic key
				related.ContractGroup      		= ContractGroup
				related.Contract           		= Contract

		SERelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractID   = WorkingContractID
				related.RelatedContractType = 5

		ProjectRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 7
		EventRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 5

		NoticeRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 14

		ParentRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractID   = ParentContract
				related.RelatedContractType = 9

		CopiedToRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 16

		CopiedToContractRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup        = ContractGroup
				related.Contract             = CopiedToRelatedContractRel.RelatedContractID

		GPORelatedContractCreateRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 10

		GPORelatedContractUpdateRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 12

		RelatedContractWithVendorRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.Supplier entered)

		ContractRebateDueRel 
			one-to-many relation to ContractRebateDue 
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract				
		
		CapitatedProcedureNoGroupRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where (related.NoComponentGroup)

		LineHasNoComponentGroupItemRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where (related.OpenAndIsNotComponentGroupItem)			

		CapitatedProcedureRel
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where (related.IsACapitatedProcedure
				and    related.LineNotClosed)	

		ComponentGroupNoComponentRel
			one-to-many relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where (related.NoComponents)

		ComponentGroupRel 
			one-to-many relation to ContractCapitatedComponentGroup
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where (related.UniqueID !=UniqueID)		

		NonProcedureComponentGroupRel 															
			one-to-many relation to ContractCapitatedComponentGroup
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract	

		NoProcedureComponentGroupRel 
			one-to-many relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup						= ContractGroup
				related.Contract							= OriginalContractAndLine.OriginalContract
			Instance Selection 
				where (related.NotForProcedure)
		ComponentGroupItemsNoFinalCostRel 															
			one-to-many relation to ContractCapitatedComponentGroupItem
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where  (related.NeedsCostTestForAll)

		CompanyLocationItemsNoFinalCostRel 															
			one-to-many relation to ContractCapitatedCompanyLocationItem
			Field Mapping uses symbolic key 
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection 
				where  (related.NeedsCostTestForAll)

		ContractRebateNotFixedRel
			one-to-many relation to ContractRebate
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (!related.ContractRebateType.RebateType.FixedRebateAmount)

		TermAndConditionRel is a TermAndCondition set

		TermAndConditionDisplayRel
			one-to-many relation to TermAndCondition
			Field Mapping uses ByDisplayString
				related.ProcurementGroup	= ContractGroup

		ContractLineSpreadRel is a ContractLineSpread set

		ArticleRel is a Article set

		ArticleDisplayRel
			one-to-many relation to Article
			Field Mapping uses ByDisplayOrder
				related.ProcurementGroup	= ContractGroup

		ContractPricingRel is a ContractPricing set

		ParentToChildRelatedDocRel
            one-to-many relation to RelatedContract
            Field Mapping uses ByID
                related.ContractGroup       = ContractGroup
                related.RelatedContractID   = Contract
                related.RelatedContractType = 9
		ContractNotificationEmailRel
			one-to-many relation to ContractNotificationEmail
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract        = Contract

		SupplierContractNotificationEmailRel
			one-to-many relation to ContractNotificationEmail
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract        = Contract
			Instance Selection
				where (related.NotificationType = 5
				or     related.NotificationType = 7
				or     related.NotificationType = 8)

		DefaultDistributorPricingRel is a ContractDistributorPricing set
			Instance Selection
				where (related.DefaultDistributorPricing)

		DefaultTierRel is a ContractTier set
			Instance Selection
				where (related.DefaultTier)

		ContractPricingToInterfaceRel is a ContractPricing set
			Instance Selection
				where (related.ContractPricing 		 != EffectiveDate
				or     related.PricingMarkupDiscount != blank)

		ContractPricingWithoutDefaultRel is a ContractPricing set
			Instance Selection
				where (related.ContractPricing != EffectiveDate)

		NewContractPricingDefaultRel
			one-to-one relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup   = ContractGroup
				related.Contract        = NewContractAndNewContractLine.NewContract
				related.ContractPricing = NewContractAndNewContractLine.NewContract.EffectiveDate

		OriginalContractPricingRel
			one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = OriginalContractAndLine.OriginalContract

		OldContractPricingRel is a ContractPricing set
			Instance Selection
				where (related.ContractPricing = old EffectiveDate)

		OldParentContractRelatedDocRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup       = ContractGroup
				related.Contract            = old ParentContract
				related.RelatedContractID   = Contract
				related.RelatedContractType = 11

		ParentContractRelatedDocRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup       = ContractGroup
				related.Contract            = ParentContract
				related.RelatedContractID   = Contract
				related.RelatedContractType = 11

		OldParentRelatedContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractID   = old ParentContract
				related.RelatedContractType = 9

		TemplateRelatedContractRel 
			one-to-many relation to RelatedContract
			Field Mapping uses ByContractType
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.RelatedContractType = 17	

		ContractPricingWithPriceBreakRel is a ContractPricing set
			Instance Selection
				where (related.PriceBreakAmount1 > 0
				or     related.PriceBreakPercent1 > 0)

		CanUseForCostDefaultingContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCanUseForCostDefaultingErrorsExist
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract

		CanUseForCostDefaultingContractLineNoErrorsRel     
			one-to-many relation to ContractLine
			Field Mapping uses ByCanUseForCostDefaultingErrorsExist
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ErrorsExist				= false

		ServiceContractLinesRel is a ContractLine set
			Instance Selection
				where (related.ItemType.Service)
		NonServiceContractLinesRel is a ContractLine set
			Instance Selection
				where (!related.ItemType.Service)

		SpecialContractLinesRel is a ContractLine set
			Instance Selection
				where (related.ItemType.Special)
		VendorItemContractLineRel is a ContractLine set
			Instance Selection
				where (related.ItemType.Itemmast)

		Contacts
			one-to-many relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization

   		ContractLineDraftRel
   			one-to-many relation to ContractLine
   			Field Mapping uses ByCanUseForCostDefaultingErrorsExist
   				related.ContractGroup				= ContractGroup
   				related.Contract					= Contract
   			Instance Selection
   				where (related.ContractLineState.Draft)

   		ContractTermAddendumRel is a ContractTermAndCondition set
   			Instance Selection
   				where (related.ContractStatus.Addendum)

		ContactTypeRel is a PurchasingContactType set

		ContractVersionsRel is a ContractVersion set

		ContractVersionsForChangeOrderRel is a ContractVersion set
			Instance Selection
				where (related.ChangeOrderStatus > 0)

		ContractVersionsForChangeOrderCreatedRel is a ContractVersion set
			Instance Selection
				where (related.ChangeOrderStatus = 1)

		ContractVersionsForChangeOrderNotCompletedRel is a ContractVersion set
			Instance Selection
				where (related.ChangeOrderStatus = 1
				or     related.ChangeOrderStatus = 2)

		ContractVersionsForChangeOrderBudgetEditRel is a ContractVersion set
			Instance Selection
				where (related.ChangeOrderStatus = 5)

		ContractVersionsForChangeOrderCompletedOrRejectedRel is a ContractVersion set
			Instance Selection
				where (related.ChangeOrderStatus = 3
				or     related.ChangeOrderStatus = 4)

		ContractVersionDescendingRel
			one-to-many relation to ContractVersion
			Field Mapping uses ByVersionDescending
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ContractVersionChangeOrderRel
			one-to-many relation to ContractVersion
			Field Mapping uses ByVersionDescending
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.VersionIsChangeOrder)

		ContractVersionWithLatestAddendumDocumentRel
			one-to-many relation to ContractVersion
			Field Mapping uses ByVersionDescending
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.HasLatestAddendumDocument)

		ContractChangeOrderRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup 	= ContractGroup
				related.Contract      	= Contract
				related.ContractVersion	= CurrentContractTermVersion

		ContractTermAndConditionRel is a ContractTermAndCondition set

		TierMemberUnreleasedRel
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses ByUnReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		AnyTierMembersRel
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		TierMemberReleasedRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		TierMemNoPurchaseMethodRels
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses ByUnReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseMethod not entered)

		TierMemberDirectPurchaseMethodRels
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseMethod.FromManufacturer
				or     related.PurchaseMethod.FromManufacturerAndDistributor)

		TierMemberPurchaseFromDistributorRels
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseMethod.FromDistributor
				or     related.PurchaseMethod.FromManufacturerAndDistributor)

		ManufacturerPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.ManufacturerContract != Contract)

		NonManufacturerPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.ManufacturerContract = Contract)

		AnyPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		PricingMemberUnreleasedRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses ByUnReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

        PricingMemberUnreleasedWithLinesRel
            one-to-many relation to ContractDistributorPricingMember
            delete cascades
            Field Mapping uses ByUnReleased
                related.ContractGroup = ContractGroup
                related.Contract      = Contract
            Instance Selection
                where (related.HasLinesForManufacturerContract
                or    (related.DistOnlyContractLineRelExists
				and   !related.FromMfgContract))

		TierPricingMemberMismatchRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TierMismatch)

		TierQualifierRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		TierQualifierFromDateRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesFromDate > 0
				and    related.TargetedPurchasesFromDate < EffectiveDate)

		TierQualifierToDateRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesToDate > 0
				and    related.TargetedPurchasesToDate >  ExpirationDate)

		TargetedTierQualifierRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseType.TargetedPurchases)

		TargetedTierLineQualifierRel
			one-to-many relation to ContractLineTierMemberQual
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseType.TargetedPurchases)

		TierLineQualifierFromDateRel
			one-to-many relation to ContractLineTierMemberQual
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesFromDate > 0
				and    related.TargetedPurchasesFromDate < EffectiveDate
				and	   related.Modified)

		TierLineQualifierToDateRel
			one-to-many relation to ContractLineTierMemberQual
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesToDate > 0
				and    related.TargetedPurchasesToDate >  ExpirationDate
				and    related.Modified)

		MfgContractsRel
			one-to-many relation to ManufacturerContractPivot
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
		MfgContractRel
			one-to-one relation to ManufacturerContractPivot
			Field Mapping uses symbolic key
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContractPivot 	= Contract

		ContractLocationPricingGroupParticipantsRel 
			one-to-many relation to ContractParticipant 
			Field Mapping uses symbolic key 
				related.ContractGroup 				= ContractGroup
				related.Contract				 	= Contract	
			Instance Selection
				where (related.HasLocOrReqLoc
				or     related.PricingGroupEntered)				
		ContractConditionalQuestionCreatedRel 
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key 
				related.ContractGroup 				= ContractGroup
				related.Contract				 	= Contract	
			Instance Selection 
				where (related.CreatedFromQuestionEntered
				and   !related.QuestionIsAnswered)			

		ContractNonDepartmentParticipantsRel
			one-to-many relation to ContractParticipant 
			Field Mapping uses symbolic key 
				related.ContractGroup 				= ContractGroup
				related.Contract				 	= Contract
			Instance Selection 
				where (!related.HasDeptInfo)		
		ContractParticipantsRel is a ContractParticipant set

		ContractTierMembersRel is a ContractTierMember set

		ContractConditionalQuestionsCreatedRel 
			one-to-many relation to ContractQuestion 
			Field Mapping uses symbolic key 
				related.ContractGroup	= ContractGroup
				related.Contract 		= Contract
			Instance Selection 
				where (related.CreatedFromQuestionEntered)				
		ContractConditionalListQuestionRel 
			one-to-many relation to ContractConditionalListQuestion 
			delete cascades 
			Field Mapping uses symbolic key 
				related.ContractGroup	= ContractGroup
				related.Contract 		= Contract
		ContractQuestionAnswerRels
			one-to-many relation to ContractQuestionAnswer
			delete cascades
			Field Mapping uses ContractQuestionSet
				related.ContractGroup	= ContractGroup
				related.Contract 		= Contract

		ContractSubcontractorRels is a ContractSubcontractor set

		ContractParticipantLocationRel is a ContractParticipant set
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Location != blank)

		ContractParticipantPricingGroupRel is a ContractParticipant set
			Instance Selection
				where (related.PricingGroupEntered)

		ContractParticipantNonStocklessReqLocRel is a ContractParticipant set
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.RequestingLocation entered
				and    !related.ContractParticipant.ParticipantLocation.RequestingLocation.Stockless)

		ContractTierMemberNonStocklessReqLocRel is a ContractTierMember set
			Instance Selection
				where (related.ContractTierMember.RequestingLocation entered
				and    !related.ContractTierMember.RequestingLocation.Stockless)

		ContractPricingMemberNonStocklessReqLocRel is a ContractDistributorPricingMember set
			Instance Selection
				where (related.ContractDistributorPricingMember.RequestingLocation entered
				and    !related.ContractDistributorPricingMember.RequestingLocation.Stockless)

		ContractParticipantWithDeptRel is a ContractParticipant set
			Instance Selection
				where (related.ContractParticipant.ContractCompanyDepartment entered)

		ParticipantGroupRel
			one-to-one relation to ParticipantGroup
			Field Mapping uses symbolic key
				related.ProcurementGroup 				= ContractGroup
				related.ParticipantGroup				= LocalParticipantGroup

		ContractParticipantCompanyOnlyRel is a ContractParticipant set
			Instance Selection
				where (related.LocationCompanyOnly)

		AttachedManufacturerContractsRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses ByMfgNbr
				related.ContractGroup 					= ContractGroup
				related.ManufacturerContractNumber      = Contract
			Instance Selection
				where (related.Contract.NotClosed)

		ManufacturerContractForDistContractRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses symbolic key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract

		OpenManufacturerContractForDistContractRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses symbolic key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection
				where (!related.ManufacturerContractClosed)

		OpenManufacturerContractForDistContractManufRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses symbolic key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection
				where (!related.ManufacturerContractClosed
				and     related.ManufacturerContract = LocalManufacturerContract)

		PrimaryContactRel
			one-to-one relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = ContractGroup
				related.Contract = Contract

		ContractPrimaryContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = ContractGroup
				related.Contract = Contract

		SupplierContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract 	  = Contract
			Instance Selection
				where (related.SupplierCanView = true)

		PrimaryContactAsBuyerRel
			one-to-one relation to Buyer
			Field Mapping uses symbolic key
				related.HROrganization   = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Buyer            = PrimaryContactRel.Contact

		ActorContactAdditionalSecurityAccessRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract = Contract
				related.Contact = actor.agent(Employee).Employee
			Instance Selection
				where (related.AdditionalSecurityAccess)
		
		ActorContactAnySecurityAccessRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContactFirst
				related.Contact = actor.agent(Employee).Employee
			Instance Selection
				where (related.AdditionalSecurityAccess)

		EmployeeContactAdditionalSecurityAccessRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract = Contract
				related.Contact = ContextEmployee
			Instance Selection
				where (related.AdditionalSecurityAccess)

		EmployeeContactAnySecurityAccessRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContactFirst
				related.Contact = ContextEmployee
			Instance Selection
				where (related.AdditionalSecurityAccess)

		EmployeeContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract = Contract
				related.Contact = ContextEmployee

		ContractAttachmentRel
			one-to-many relation to ContractAttachment
			Field Mapping uses part of key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ContractProposalItemAttachmentRel
			one-to-many relation to ContractAttachment
			Field Mapping uses part of key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection 
				where (related.Name = "Line Item Details")

		ContractAttachedContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.Contact		  = PurchasingContact
			Instance Selection
				where (related.ContactType 	  = blank)

		WordDocContactRels is a ContractAttachedContact set

		ContractAttachedContactsRels is a ContractAttachedContact set

		ContractContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses ByContact
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.Contact       = LocalNewContact

		AttachManufacturerRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses symbolic key
				related.ContractGroup 					= ContractGroup
				related.Contract		      			= OriginalContractAndTier.OriginalContract
				related.ManufacturerContract			= Contract


		LocalQuestionRel 
			one-to-one relation to Question 
			Field Mapping uses symbolic key 
				related.ProcurementGroup		= ContractGroup 
				related.Question                = CheckQuestion 
		QuestionsByTypeAndClassRel
			one-to-many relation to Question
			Field Mapping uses ByTypeAndClass
				related.ProcurementGroup 			= ContractGroup
				related.ContractType				= ContractType
				related.ContractSubtype				= ContractSubtype
				related.ContractClassification		= ContractClassification
				related.ContractSubclassification	= ContractSubclassification
			Instance Selection
				where ((related.Question.Active)
				and (!related.IsListQuestionWithoutAnswers)
				and (!related.IsRebateQuestionWithoutAnswers)
				and (!related.NoCorrectAnswerDefined)
				and (related.UsedForContractInterview))

		AllQuestionsRel
			one-to-many relation to Question
			Field Mapping uses symbolic key
				related.ProcurementGroup 			= ContractGroup
			Instance Selection
				where ((related.Question.Active)
				and (!related.IsListQuestionWithoutAnswers)
				and (!related.IsRebateQuestionWithoutAnswers)
				and (!related.NoCorrectAnswerDefined))

		CheckContractQuestionRel
			one-to-many relation to ContractQuestion
			Field Mapping uses ByQuestion
				related.ContractGroup = ContractGroup
				related.Question	  = CheckQuestion
				related.Contract	  = Contract

		AllUnansweredRequiredQuestionsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ResponseRequired
				and    !related.QuestionIsAnswered)

		AllQuestionsMissingRequiredAttachmentsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.AlwaysRequireResponseAttachment
				and    !related.AnswerAttachmentExists)

		AllUnansweredQuestionRels
			one-to-many relation to ContractQuestion
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (!related.QuestionIsAnswered)

		AllAnsweredQuestionsWithTermsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.QuestionIsAnswered
				and    related.QuestionAnswerHasTerms)

		InterviewUnansweredRequiredQuestionsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where ((related.QuestionSource.Interview)
				and   (related.ResponseRequired)
				and   (!related.QuestionIsAnswered)
				and   (related.QuestionAnswerTermExists))

		AllIncorrectlyAnsweredQuestionsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where ((related.ResponseRequired)
				and   (related.QuestionHasCorrectAnswer)
				and   (related.QuestionIsAnsweredIncorrectly))

		InterviewIncorrectlyAnsweredQuestionsRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where ((related.QuestionSource.Interview)
				and   (related.ResponseRequired)
				and   (related.QuestionHasCorrectAnswer)
				and   (related.QuestionIsAnsweredIncorrectly)
				and   (related.QuestionAnswerTermExists))

		RebateQuestionAnswerRel
			one-to-many relation to ContractQuestion
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.IsRebateQuestion
				and    related.QuestionIsAnswered)

		NonRebateQuestionRel
			one-to-many relation to ContractQuestion
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.SSQuestion
				and    !related.IsRebateQuestion)

		ContractManualAssignedQuestionRel
			one-to-many relation to ContractQuestion
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.QuestionSource.Manual)

		ContractQuestionsDisplayRel
			one-to-many relation to ContractQuestion
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ServiceLineRel is a ContractLine set
			Instance Selection
				where (related.ServiceItem)

		NonServiceLineRel is a ContractLine set
			Instance Selection
				where (related.NonServiceItem)

		DistributorContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorModification
				related.ContractGroup			 = ContractGroup
				related.Contract				 = Contract
				related.DistributorModifications = 1

		ManContractLineNoDistContractLineRel is a ContractLine set
			Instance Selection
				where (related.LineAvailableForDistributorNotCreated)

		ContractLineNotFullySpreadRel is a ContractLine set
			Instance Selection
				where (related.LineNotFullySpread)

		NoContractLineSpreadForEffectiveDateRel is a ContractLine set
			Instance Selection
				where (related.NoSpreadForEffectiveDate)

		ContractRebateRel is a ContractRebate set

		NotFixedRebateRel is a ContractRebate set
			Instance Selection
				where (related.NotFixedRebate)

		NotFixedOrSupplementalRebateRel is a ContractRebate set
			Instance Selection
				where (related.NotFixedOrSupplementalRebate)

		ContractRebateQualifierChangeRel is a ContractRebate set
			Instance Selection
				where (related.QualifierChanged)

		ContractRecurringRebateRel is a ContractRebate set
			Instance Selection
				where (related.CanCreateDueDates
				and   (ExpirationDate changed
				or     related.NoRebateDueDatesExist))

		ModifiedContractLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses ByContract
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.Modified	  = "Y"

		DistributorContractLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup  = ContractGroup
				related.Contract       = Contract

		DistributorOnlyLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup  = ContractGroup
				related.Contract       = Contract
			Instance Selection
				where (related.PurchaseMethod = 2) 

		DistributorContractLineMemberForUpdatesRel
			one-to-many relation to ContractLineMember
			Field Mapping uses ByDistContract
				related.ContractGroup  									= ContractGroup
				related.ContractLineMember.ManufacturerContract       	= Contract
			Instance Selection
				where (related.Contract   != Contract)

		RebateQualifierContractRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses symbolic key
				related.ContractGroup					= LocalContractRebate.ContractGroup
				related.Contract						= LocalContractRebate.RebateContract
				related.ContractRebateType		    	= LocalContractRebate.ContractRebateType
				related.ContractRebate					= blank
				related.ContractRebateQualifier		    = LocalContractRebate.ContractRebateQualifier
			Instance Selection
				where (related.OriginalContractNumber	= LocalContractRebate.Contract)

		RebateQualifierFromDateRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesFromDate > 0
				and    related.TargetedPurchasesFromDate < EffectiveDate)

		RebateQualifierToDateRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TargetedPurchasesToDate > 0
				and    related.TargetedPurchasesToDate >  ExpirationDate)

		RebateContractRebateRel
			one-to-one relation to ContractRebate
			Field Mapping uses symbolic key
				related.ContractGroup			= ContractGroup
				related.Contract				= LocalContractRebate.RebateContract
				related.ContractRebateType		= LocalContractRebate.ContractRebateType
				related.ContractRebate			= blank

		PoCompanyRel
			one-to-many relation to PurchasingCompany
			Field Mapping uses Set2
				related.ProcurementGroup = ContractGroup

        EntityTaxCodeRel
            one-to-one relation to EntityTaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup	= LocalTaxEntity.FinanceEnterpriseGroup
                related.TaxEntity 				= LocalTaxEntity
                related.TaxCode 				= TaxCode

		DistributorContractUnreleasedPricingMemberRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByMfgTier
				related.ContractGroup           		= ContractGroup
				related.MfgContractTierInfo.MfgContract	= Contract
			Instance Selection
				where (related.Released = false
				and    related.ContractNotClosed)

		DistributorContractAnyUnreleasedPricingMemberRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByMfgTier
				related.ContractGroup           		= ContractGroup
				related.MfgContractTierInfo.MfgContract	= Contract
			Instance Selection
				where (related.Released = false)

		NoPricingMemberRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PricingIdentifier = blank
				and    !related.Contract.ContractStatus.Closed)

		NoPricingMemberManufRel
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PricingIdentifier = blank
				and    related.ContractDistributorPricingMember.ManufacturerContract = LocalManufacturerContract 
				and    !related.Contract.ContractStatus.Closed)

		LocationPricingMembersRel 
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where ((related.ContractDistributorPricingMember.RequestingLocation entered
				or      related.ContractDistributorPricingMember.Location entered)
				and    !related.FromMfgContract)

		CompanyPricingMembersRel 
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.Company entered
				and	   related.ContractDistributorPricingMember.RequestingLocation !entered
				and    related.ContractDistributorPricingMember.Location !entered
				and   !related.FromMfgContract)

		PricingGroupPricingMembersRel 
			one-to-many relation to ContractDistributorPricingMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.PricingGroup entered
				and   !related.FromMfgContract)

		NoTierMemberRel
			one-to-many relation to ContractTierMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.Tier = blank)

		ContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract

		ContractDistributionAggregationRel
			one-to-many relation to ContractDistributionAggregation
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract

		OpenContractDistributionAggregationRel
			one-to-many relation to ContractDistributionAggregation
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection 
				where (related.Status = 0
				or     related.Status = 8)
		ContractLineDistsCreateCommitmentRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ContractLine.CanUseForCostDefaulting
				and   !related.ContractLine.ErrorsExist
				and    related.ContractLine.UseCommitments
				and    related.ContractLine.LifetimeMaximumAmount > 0)

		ContractSpreadRel is a ContractSpread set

		ContractSpreadForAmountUpdateRel
			one-to-many relation to ContractSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ContractSpreadForEffectiveDateRel
			one-to-many relation to ContractSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.SpreadDate    = EffectiveDate

		SingleSpreadRel
			one-to-many relation to ContractSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup 				= ContractGroup
				related.Contract      				= Contract
				related.SpreadDate    				= LocalSpreadDate

		ContractPricingForAmountUpdateRel
			one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (LocalAmountUpdateDate >= related.ContractPricing)

		LatestDocumentRevisionRel
			one-to-one relation to ContractDocument
			Field Mapping uses ByLatestDocRevision
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract

		LatestRevisionRel
			one-to-one relation to ContractRedlineDocument
			Field Mapping uses ByLatestRevision
				related.ContractGroup = ContractGroup
				related.Contract       = Contract

		ContractRedlineDocumentDescRel
			one-to-many relation to ContractRedlineDocument
			Field Mapping uses NewestToOldest
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ContractRedlineDocumentRel
			one-to-many relation to ContractRedlineDocument
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract       = Contract

		OtherRevisionsRel
			one-to-many relation to ContractRedlineDocument
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract       = Contract
			Instance Selection
				where (not related.LatestRevision)

		ContractRedlineNotifEmailAttachmentRel
			one-to-many relation to ContractNotificationEmailAttachment
			Field Mapping uses ByRedlineDocument
				related.ContractGroup           = ContractGroup
				related.Contract                = Contract
				related.ContractRedlineDocument = LatestRevisionRel.ContractRedlineDocument

		NonIDMDocumentRel
			one-to-many relation to ContractRedlineDocument
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract       = Contract
			Instance Selection
				where (related.IDMUniqueId !entered)

		IDMDocumentRel
			one-to-many relation to ContractRedlineDocument
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract       = Contract
			Instance Selection
				where (related.IDMUniqueId entered)

		ContractLineDistSpreadRel
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses part of key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract

		ContractLineDistSpreadNoErrorsRel
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses part of key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
			Instance Selection
				where ((!related.ContractLine.ErrorsExist
				or      related.ContractLine.HasBeenActivated)
				and     related.ContractLine.CanUseForCostDefaulting)

		ContractLineDistSpreadCreateCommitRel
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses part of key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
			Instance Selection
				where (!related.ContractLine.ErrorsExist
				and     related.ContractLine.CanUseForCostDefaulting)

		ContractDistNotFullySpreadRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
			Instance Selection
				where (related.NotFullySpread)

		ContractDistExcessSpreadRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
			Instance Selection
				where (related.ExcessSpread)

		ContractDistMissingSpreadRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
			Instance Selection
				where (related.MissingSpread)

		ContractDistNoEffectiveDateSpreadRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
			Instance Selection
				where (related.NoDistSpreadForEffectiveDate)

		SSArticles
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.SSArticle)

		ActiveSSArticles
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.SSArticle
				and	   related.IsActive)

		DraftArticlesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractStatus.Draft)

		AddendumNegotiationArticlesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractStatus.Addendum)

		NoStatusArticlesRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractStatus = 0)

		SSContacts is a ContractAttachedContact set
			Instance Selection
				where (related.SSContact)

		SSComments is a ContractComment set
			Instance Selection
				where (related.SSComment)

		SupplierContractAttachmentsRel is a ContractAttachment set
			Instance Selection
				where (related.SupplierCanView)

		SupplierContractCommentsRel is a ContractComment set
			Instance Selection
				where (related.SupplierCanView)

		SupplierContractLineAttachmentsRel
			one-to-many relation to ContractLineAttachment
			Field Mapping uses part of key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection
				where (related.SupplierCanView)

		SupplierContractLineCommentsRel
			one-to-many relation to ContractLineComment
			Field Mapping uses part of key
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection
				where (related.SupplierCanView)

		SSAttachments is a ContractAttachment set
			Instance Selection
				where (related.SSAttachment)

		ManualCommentsRel is a ContractComment set
			Instance Selection
				where (related.ContractCommentType.Manual)

		ContractAttachmentsRel is a ContractAttachment set

		EmailCommentsRel is a ContractComment set
			Instance Selection
				where (related.EmailAttachment)

		EmailAttachmentsRel is a ContractAttachment set
			Instance Selection
				where (related.EmailAttachment)

		RedlineAttachmentRels is a ContractRedlineDocument set

		LatestRedlineDocumentRel is a ContractRedlineDocument set
			Instance Selection
				where (related.LatestRevision)

		LineEmailCommentsRel is a ContractLineComment set
			Instance Selection
				where (related.EmailAttachment)

		LineEmailAttachmentsRel is a ContractLineAttachment set
			Instance Selection
				where (related.EmailAttachment)

		ContractPricingAfterExpirationDateRel is a ContractPricing set
			Instance Selection
				where (related.ContractPricing > ExpirationDate)

		ContractPricingPriorToEffectiveDateRel is a ContractPricing set
			Instance Selection
				where (related.ContractPricing not = old EffectiveDate
				and    related.ContractPricing < EffectiveDate)

		ContractPricingPercentRel is a ContractPricing set
			Instance Selection
				where (related.PricingBasePercent > 0)

		ContractLineMarkupRel
			one-to-many relation to ContractLine
			Field Mapping uses ByLineMarkup
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract

		SubcontractorRels is a Subcontractor set

		ContractLineDiscountRel
			one-to-many relation to ContractLine
			Field Mapping uses ByLineDiscount
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract

		ContractLinesWithHSNSACCodeRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.HSNSACCode not entered)

		ContractLineAfterExpirationDateRel is a ContractLine set
			Instance Selection
				where (related.ExpirationDate > ExpirationDate
				and    related.ExpirationDate not = old ExpirationDate
				and   !related.LineClosed)

		ContractLinePriorToEffectiveDateRel is a ContractLine set
			Instance Selection
				where (related.EffectiveDate < EffectiveDate
				and    related.EffectiveDate not = old EffectiveDate)

		SourcingCompanyRel
			one-to-many relation to SourcingCompany
			Field Mapping uses BySourcingGroup
				related.SourcingGroup	= ContractGroup

  		OldParentContractRel
  			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= old ParentContract
		ParentContractRel
  			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= ParentContract

		ContractsRel
  			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup

		ContractLineSpecialItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCanUseForCostDefaultingErrorsExist
				related.ContractGroup 			= ContractGroup
				related.Contract				= Contract
			Instance Selection
				where (related.ItemType.Special)

		ContractLineServiceItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCanUseForCostDefaultingErrorsExist
				related.ContractGroup 			= ContractGroup
				related.Contract				= Contract
			Instance Selection
				where (related.ItemType.Service)

		ContractLineFromRQRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup 			= ContractGroup
				related.Contract				= Contract
			Instance Selection
				where (related.HasRQLineSource)

   		ContractPolinesByContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
		 		related.ProcurementGroup			= ContractGroup
		 		related.Contract 					= Contract

   		RequisitionLinesByContractRel
   			one-to-many relation to RequisitionLine
   			Field Mapping uses ByContract
   				related.Contract         = Contract
			Instance Selection
				where (related.Company.ItemGroup = ContractGroup)

   		UnreleasedRequisitionLinesByContractRel
   			one-to-many relation to RequisitionLine
   			Field Mapping uses ByContract
   				related.Contract         = Contract
			Instance Selection
				where (ContractExists
				and    related.Status = 0
				and    related.Company.ItemGroup = ContractGroup)

		RequisitionLinesWithNoPORel
 			one-to-many relation to RequisitionLine
   			Field Mapping uses ByContract
   				related.Contract         = Contract
			Instance Selection
				where (related.Status = 9
				and    related.Company.ItemGroup = ContractGroup)

		UnprocessedRequestsByContractRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses ByContractLine
				related.ProcurementGroup = ContractGroup
				related.Contract         = Contract

   		ContractPolineDistributionsByContractRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses ByContract
		 		related.Contract 		= Contract
		 	Instance Selection
		 		where (related.Company.ProcurementGroup = ContractGroup
		 		and    related.CommitmentExists)

   		RequisitionLineDistributionsByContractRel
   			one-to-many relation to RequisitionLineDistribution
   			Field Mapping uses ByContract
   				related.Contract        = Contract
   			Instance Selection
		 		where (related.PurchasingCompanyRel.ProcurementGroup = ContractGroup
		 		and    related.CurrentCommitmentExists)

   		OpenContractPolineDistributionsByContractRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses ByContract
		 		related.Contract 		= Contract
		 	Instance Selection
		 		where (related.Company.ProcurementGroup = ContractGroup
		 		and    related.CommitmentExists
		 		and    related.GLCommitRel.TransactionAmount > 0)

   		OpenRequisitionLineDistributionsByContractRel
   			one-to-many relation to RequisitionLineDistribution
   			Field Mapping uses ByContract
   				related.Contract        = Contract
   			Instance Selection
		 		where (related.PurchasingCompanyRel.ProcurementGroup = ContractGroup
		 		and    related.CurrentCommitmentExists
		 		and    related.GLCommitRel.TransactionAmount > 0)

   		PayablesInvoiceDetailReleasedNoGroupRel 
   			one-to-many relation to PayablesInvoiceDetail
       		Field Mapping uses ByContractLine
				related.Contract      = Contract
			Instance Selection 
				where (related.PayablesInvoice.MatchStatus > 1
				and    related.PayablesInvoice.MatchStatus < 7)	
					
		UnreleasedPayablesInvoiceDetailRel
   			one-to-many relation to PayablesInvoiceDetail
       		Field Mapping uses ByContractLine
				related.Contract      = Contract
   			Instance Selection
   				where (related.Company.VendorGroup   = ContractGroup
   				and    related.Status = 0)

		MatchedPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.MatchObjectID entered)







		OldParentContractRebateQualifierContractsRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses ByContract
				related.ContractGroup			    = ContractGroup
				related.Contract					= old ParentContract
				related.OriginalContractNumber		= Contract

		ContractOnRebateQualifierContractRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses ByOriginalContract
				related.ContractGroup			= ContractGroup
				related.OriginalContractNumber	= Contract

		ContractHasRebateQualifierContractsRel is a RebateQualifierContract set

		SupplierContactProxyRel
			one-to-many relation to SupplierContactProxy
			Field Mapping uses part of key
				related.SupplierGroup		= ContractGroup
				related.Supplier			= Supplier
				related.SupplierSourceId	= SupplierSourceId
			Instance Selection
				where (related.ReceiveEmailNotification)

		SecondaryContactRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.SecondaryContact)

		LineWithMaxAmountRel is a ContractLine set
			Instance Selection
				where (related.LifetimeMaximumAmount !=0)
		MaximumAmountLessThanBaseRel is a ContractLine set
			Instance Selection
				where (related.BaseCost != 0
				and    related.BaseCost > MaximumAmount)
		MaximumAmountLessThanOrderMaxRel is a ContractLine set
			Instance Selection
				where (related.PerOrderMaximumAmount != 0
				and    related.PerOrderMaximumAmount > MaximumAmount)
		MaximumAmountLessThanLineMaxRel is a ContractLine set
			Instance Selection
				where (related.LifetimeMaximumAmount != 0
				and    related.LifetimeMaximumAmount > MaximumAmount
				and   (related.CanUseForCostDefaulting
				or     related.CanUseForInvoicePayment))
		MinimumAmountGreaterThanLineMinRel is a ContractLine set
			Instance Selection
				where (related.PerOrderMinimumAmount != 0
				and    related.PerOrderMinimumAmount < PerOrderMinimumAmount)
		MinimumAmountGreaterThanLineMaxRel is a ContractLine set
			Instance Selection
				where (related.LifetimeMaximumAmount != 0
				and    related.LifetimeMaximumAmount < PerOrderMinimumAmount)

		PerOrderMaximumAmountLessThanBaseRel is a ContractLine set
			Instance Selection
				where (related.BaseCost != 0
				and    related.BaseCost > PerOrderMaximumAmount)
		PerOrderMaximumAmountLessThanOrderMaxRel is a ContractLine set
			Instance Selection
				where (related.PerOrderMaximumAmount != 0
				and    related.PerOrderMaximumAmount > PerOrderMaximumAmount)
		PerOrderMaximumAmountLessThanLineMaxRel is a ContractLine set
			Instance Selection
				where (related.LifetimeMaximumAmount != 0
				and    related.LifetimeMaximumAmount > PerOrderMaximumAmount)
		FirstRebateDueDateMissingRel is a ContractRebate set
			Instance Selection
				where (!related.FirstRebateDueDate entered
				and    !related.RebateDueDatesExist)
		RebateDueDatesMissingRel is a ContractRebate set
			Instance Selection
				where (!related.RebateDueDatesExist)
		GrowthRebateWithNoQualifiersRel is a ContractRebate set
			Instance Selection
				where (related.GrowthRebate
				and   !related.RebateGrowthQualifiersExist)
		RebateQualifierWithoutQualifierContractRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses NotAllForSupplier
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (!related.QualifierContractsExist)
		QualifierWithoutItemsAndCodesRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.NotAllInvoicesForSupplier
				and    !related.QualifierItemsExist
				and    !related.QualifierCodesExist)

   		OpenPolinesByContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup		= ContractGroup
         	    related.Contract				= Contract
         	Instance Selection
         		where (related.Closed.No
         		and    related.Released = true)

   		UnreleasedPolinesByContractRel
        	one-to-many relation to PurchaseOrderLine
        	Field Mapping uses ByContractLine
				related.ProcurementGroup		= ContractGroup
         	    related.Contract				= Contract
         	Instance Selection
         		where (related.Closed.No
         		and    related.Released = false)

		ReleasedPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup			= ContractGroup
				related.Contract					= Contract
			Instance Selection
				where (related.Released     		= true)

   		UnreleasedReqlinesByContractRel
        	one-to-many relation to RequisitionLine
        	Field Mapping uses ByContract
         	    related.Contract				= Contract
         	Instance Selection
         		where (related.Status = 0
         		and    related.Company.ItemGroup = ContractGroup)

        AnyPolinesByContractRel
        	one-to-many relation to PurchaseOrderLine
        	Field Mapping uses ByContractLine
         	    related.ProcurementGroup		= ContractGroup
         	    related.Contract				= Contract

        PurchaseOrderForBlanketStandingRel
        	one-to-many relation to PurchaseOrder
        	Field Mapping uses ByBlanketStandingContract
        		related.BlanketOrStandingContract = Contract
        	Instance Selection
        		where (related.Company.ProcurementGroup = ContractGroup)

		ListQuestionsWithNoValue is a ContractQuestion set
			Instance Selection
				where (related.ResponseType.List
				and	   !related.HasListValues)

		ContractLinePriceChangeRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.UpdateProcessing)

		ContractLineManualPriceChangeRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ManualUpdateProcessing)
				
		ContractLineCostCompareRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ComparisonOnly)

		ContractLineMissingItemsRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup = ContractGroup 
				related.Contract      = Contract 
			Instance Selection 
				where (related.NoPriceChangeExists)

		BidWorksheetRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ProcessingType.BidWorksheet)

		SupplierBidWorksheetRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses ByBidSupplier
				related.BidSupplier = LocalBidSupplier
			Instance Selection
				where (related.ProcessingType.BidWorksheet)

		CostSavingsRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ProcessingType.PreviousCostCompare)

		ContractCostCompareToRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
			Instance Selection
				where (related.Contract = ContractLineFromCostCompareRel.Contract
				and    ContractLineFromCostCompareRel.Contract  != ContractLineFromCostCompareRel.FromContract)

		ContractLineFromCostCompareRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses ByFromContract
				related.FromContract	  = Contract
			Instance Selection
				where (related.ComparisonOnly
				and    related.ContractGroup = ContractGroup)

		ContractLineCostCompareContractRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ComparisonOnly
				and    related.FromContract entered)

		ContractLineCostCompareImportRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ComparisonOnly
				and    related.FromImport entered)

		ContractLineCostCompareTierRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ComparisonOnly
				and    related.ContractTier entered)

		ActivatedContractLineRel is a ContractLine set
			Instance Selection
				where (related.HasBeenActivated)

		PortalSupplierRel
			one-to-one relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup	= actor.agent(SupplierSourceId).SupplierGroup
				related.Supplier		= actor.agent(SupplierSourceId).Supplier

		ContractTierQualifiersByPurchaseAmountRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses ByPurchaseAmount
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract

		ContractRebateDuesWithCurrentPurchasesRel is a ContractRebateDue set
			Instance Selection
				where (related.CurrentPurchases	entered)

		ContractThatCreatedEventRel is a ContractLine set
			Instance Selection
				where (related.ToEventNumber entered)

		DistributorContractLinesMfgVendItemAndVendorItemMatchRels is a ContractLine set
			Instance Selection
				where (related.MfgVendorItemMatchesDistVendorItem)

		ContractLineHasRetainageRel
			one-to-many relation to ContractLine
			Field Mapping uses ByRetainage
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.Retainage		= 1

		LineErrorRel
			one-to-many relation to ContractLine
			Field Mapping uses ByErrorsExist
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ErrorsExist		= true

		LineErrorNotInactiveVendorItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByErrorsExist
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ErrorsExist		= true
			Instance Selection
				where (related.OtherErrorsExist)

		InactiveVendorItemErrorRel
			one-to-many relation to ContractLine
			Field Mapping uses ByErrorsExist
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ErrorsExist			= true
			Instance Selection
				where (related.InactiveErrorsExist)

		CreateDistributorLineErrorRel
			one-to-many relation to ContractLine
			Field Mapping uses ByErrorsExist
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ErrorsExist			= true
			Instance Selection
				where (related.CreateDistributorContractLine)

		ContractLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract

		ContractLineOtherErrorRel
            one-to-many relation to ContractLineError
            Field Mapping uses ByErrorNumber
                related.ContractGroup    = ContractGroup
                related.Contract         = Contract
            Instance Selection
                where (related.ErrorMessageNumber != 25
                and    related.ErrorMessageNumber != 28
                and    related.ErrorMessageNumber != 50
                and    related.ErrorMessageNumber !=192)

        ContractLineInactiveErrorRel
            one-to-many relation to ContractLineError
            Field Mapping uses ByErrorNumber
                related.ContractGroup    = ContractGroup
                related.Contract         = Contract
            Instance Selection
                where (related.ErrorMessageNumber = 25
                or     related.ErrorMessageNumber = 28
                or     related.ErrorMessageNumber = 50
                or     related.ErrorMessageNumber = 192)

		ContractLineDistMissingErrorRel 
            one-to-many relation to ContractLineError
            Field Mapping uses ByErrorNumber
                related.ContractGroup    = ContractGroup
                related.Contract         = Contract
            Instance Selection
                where (related.ErrorMessageNumber = 61)		
		LineNoErrorRel
			one-to-many relation to ContractLine
			Field Mapping uses ByErrorsExist
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ErrorsExist			= false

		ContractTermVersionRel is a ContractTermVersion set

		CurrentContractTermVersionRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ContractTermVersion	= LastContractTermVersion

		NewContractTermVersionRel
			one-to-one relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ContractTermVersion	= TermNegotiationVersion

		FinalApprovedContractTermVersionRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.LastAction.FinalApproval)

		ActivatedContractTermVersionRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.ActivatedVersion)

		ActiveContractTermVersionRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.ContractTermVersion > DerivedLastActivatedContractTermVersion)

		ContractTermVersionWithPendingUpdatesRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.PendingContractTermAndConditionUpdatesExist)

		ContractTermVersionInSupplierNegotiationRel
			one-to-many relation to ContractTermVersion
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.ApprovalStage.SupplierNegotiation)

		ActorRel
			one-to-one relation to Actor
			Field Mapping uses symbolic key
				related.Actor = actor

		ContextPropertyClassRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = "ContractClassification"
				related.DataArea = parentcontext.dataarea

		ContextPropertySubclassRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = "ContractSubclassification"
				related.DataArea = parentcontext.dataarea
		ActorContextClassRel
			one-to-one relation to ActorContext
			Field Mapping uses SymbolicKeyByContextProperty
				related.ContextProperty   = ContextPropertyClassRel.ContextProperty
				related.Actor             = actor

		ActorContextSubClassRel
			one-to-one relation to ActorContext
			Field Mapping uses SymbolicKeyByContextProperty
				related.ContextProperty   = ContextPropertySubclassRel.ContextProperty
				related.Actor             = actor

		ContractClassificationGroupRel 
			one-to-one relation to ContractClassificationGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = actor.context.ContractClassificationGroup				 

		ContractClassificationGroupDetailRel
			one-to-one relation to ContractClassificationGroupMember
			Field Mapping uses ByClassificationOnly
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = actor.context.ContractClassificationGroup
				related.ContractClassification              = ContractClassification

		ContractClassificationGroupSubDetailRel
			one-to-one relation to ContractClassificationGroupMember
			Field Mapping uses BySubclassification
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = actor.context.ContractClassificationGroup
				related.ContractClassification              = ContractClassification
				related.ContractSubclassification           = ContractSubclassification

		EmployeeContractClassificationGroupDetailRel
			one-to-one relation to ContractClassificationGroupMember
			Field Mapping uses ByClassificationOnly
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = ContextEmployee.ContractClassificationGroup
				related.ContractClassification              = ContractClassification

		EmployeeContractClassificationGroupSubDetailRel
			one-to-one relation to ContractClassificationGroupMember
			Field Mapping uses BySubclassification
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = ContextEmployee.ContractClassificationGroup
				related.ContractClassification              = ContractClassification
				related.ContractSubclassification           = ContractSubclassification

		ContractGroupEmailTemplateRel
			one-to-one relation to ContractGroupEmailTemplate
			Field Mapping uses symbolic key
				related.ContractGroup     = ContractGroup

		ContractGroupEmailTemplate2Rel
			one-to-one relation to ContractGroupEmailTemplate2
			Field Mapping uses symbolic key
				related.ContractGroup     = ContractGroup

		SupplierGroupExtensionRel
			one-to-one relation to SupplierGroupExtension
			Field Mapping uses symbolic key
				related.SupplierGroup     = ContractGroup

		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup     = ContractGroup

		PurchaseByManufacturerContractTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByPurchaseMethod
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.PurchaseMethod			= 1

		PurchaseByBothContractTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByPurchaseMethod
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.PurchaseMethod			= 3

		UnreleasedContractTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByUnReleased
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract

		UnreleasedPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByUnReleased
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract

		UnreleasedPricingMembersForAContractRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByUnReleased
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
           		related.MfgContractTierInfo.MfgContract = LocalContract
		
		ContractTierFixedRel
			one-to-many relation to ContractTier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TierMarkupDiscount.Fixed)

		ContractTierNonFixedRel
			one-to-many relation to ContractTier
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.TierMarkupDiscountEntered)

		ExistingContractTierRel
			one-to-one relation to ContractTier 
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = LocalContract		
				related.ContractTier  = LocalTier 

		TierQualifierItemForTierRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByType 
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection 
				where (related.ContractTier entered)

		TierQualifierVendorItemsRel
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByType 
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection 
				where (related.VendorItem entered)
		TierQualifierItemNoTierRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByType 
				related.ContractGroup          = ContractGroup
				related.Contract               = Contract
			Instance Selection 
				where (related.ContractTier !entered)

		TierQualifierContractRel 
			one-to-many relation to TierQualifierContract
			Field Mapping uses BySelectedContract
				related.ContractGroup			= ContractGroup 
				related.SelectedContractNumber  = Contract 
				related.Contract                = LocalContract 


		TierReportingContextRel 
			one-to-many relation to TierQualifierContract 
			Field Mapping uses BySelectedContract 
				related.ContractGroup			= ContractGroup 
				related.SelectedContractNumber  = Contract 
				related.Contract                = ContextContract 			
		TierQualifierContractsRel 
			one-to-many relation to TierQualifierContract
			Field Mapping uses ByReportingContract
				related.ContractGroup			= ContractGroup 
				related.Contract                = Contract 	

		TierQualifierContractsNoItemsRel 
			one-to-many relation to TierQualifierContract
			Field Mapping uses ByReportingContract
				related.ContractGroup			= ContractGroup 
				related.Contract                = Contract 
			Instance Selection 
				where (related.ContractHasNoQualifierItems)					
		
		TierQualifierItemsRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses BySelectedContractLine 
				related.ContractGroup			= ContractGroup 
				related.Contract                = Contract 

		TierQualifierCodesRel 
			one-to-many relation to ContractTierQualifierCode 
			Field Mapping uses symbolic key 
				related.ContractGroup			= ContractGroup 
				related.Contract                = Contract 				

		GMDNPTCodeRel 
			one-to-many relation to GMDNPTCode
			Field Mapping uses symbolic key 
				related.ItemGroup	= ContractGroup		

		TierQualifierCalculationsRel 
			one-to-many relation to TierQualifierCalculation
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup	= ContractGroup 
				related.Contract        = Contract 

		ContractTierQualifiersByPurchasePercent 
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key 
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract	
			Instance Selection 
				where (related.PurchasePercentQualifier)		

		ContractLineTierCostRel
			one-to-many relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		ContractLineTierCostForTierRel
			one-to-many relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup   	= ContractGroup
				related.Contract		  	= Contract
			Instance Selection
				where (related.ContractTier = LocalTier)

		ContractLineTierCostForCompareTierRel
			one-to-many relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup   = ContractGroup
				related.Contract	    = LocalContract
			Instance Selection
				where (related.ContractTier = LocalTier)

		ContractLineTierCostZeroCostRel
			one-to-many relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup   = ContractGroup
				related.Contract	    = Contract
			Instance Selection
				where (related.TierCost = 0
				and    related.ContractLine.CostOption = 1)

		ServiceContractQuantityRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (ServicePurchaseType
				and    related.ServiceCode.Quantity)

		ContractLinesWithMaxAmountRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.LifetimeMaximumAmount > 0
				and   !related.ContractLineState.Closed
				and   (related.CanUseForCostDefaulting
				or     related.CanUseForInvoicePayment))

		ManufacturerNoDateOverlapContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ManufacturerContract != Contract
				and  ((LocalExpirationDate > 0
  				and    related.EffectiveDate > 0
  				and    LocalExpirationDate < related.EffectiveDate)
  				or    (LocalEffectiveDate > 0
  				and    related.ExpirationDate > 0
  				and    LocalEffectiveDate > related.ExpirationDate)))

		LineDateMismatchRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where ((related.EffectiveDate != EffectiveDate
				and     related.EffectiveDate entered
				and     EffectiveDate entered
				and    !IsDistributorContract)
				or     (related.ExpirationDate != ExpirationDate
				and     related.ExpirationDate entered
				and     ExpirationDate entered
				and    !IsDistributorContract))

		ContractApproverChosenRel
			one-to-one relation to ContractApproverChosen
			Field Mapping uses symbolic key
				related.ContractGroup     = ContractGroup
				related.Contract        = Contract

		OpenServiceContractLinesRel is a ContractLine set
			Instance Selection
				where (ServicePurchaseType
				and   ((related.AmountOrdered < related.LifetimeMaximumAmount
				and    related.ServiceCode.Amount)
				or    (related.QuantityOrdered < related.LifetimeMaximumQuantity
				and    related.ServiceCode.Quantity)
				or    (related.ServiceCode.Quantity
				and    ContractTypeAllowsZeroMaxQuantity
				and    related.LineNotClosed)))

		GLCommitDocumentRel
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance

		WarningBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
			Instance Selection
				where (related.BudgetEditError.BudgetEditGroup	= any ContractLineDistributionRel.UniqueID
				or     related.BudgetEditError.BudgetEditGroup	= any ContractSpreadRel.UniqueID
				or     related.BudgetEditError.BudgetEditGroup	= any ContractLineDistSpreadRel.UniqueID)

		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID

		StandardCommentCodeRel
			one-to-many relation to StandardCommentCode
			Field Mapping uses Set1
				related.ProcurementGroup	= ContractGroup
				related.StandardCommentCode	= StandardCommentCode
			Instance Selection
				where (related.IsoLocale not entered)

		GPOContractImportRel
			one-to-one relation to ContractImport
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.ContractImport	= DerivedGPOContract

		ContractImportTierMemberMPPRel
			one-to-many relation to ContractImportTierMember
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.ContractImport      = DerivedGPOContract
			Instance Selection
				where (related.Tier !entered)

		ImportLinesForCreationRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByUpdateFunction
				related.ContractGroup	= ContractGroup
				related.ContractImport	= DerivedGPOContract
				related.UpdateFunction	= "C"
			Instance Selection
				where (!related.ErrorsExist)

		ContractInternalContactsRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.ContactFromRepository)

		ContractExternalContactsRel
			one-to-many relation to ContractAttachedContact
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (not related.ContactFromRepository)

		OpenPurchaseOrderLineWithContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses Set2
				related.ProcurementGroup	= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.Closed = "N")


		PurgeRebateQualifierContractRel is a RebateQualifierContract set
			Instance Selection
				include deleted records

		PurgeContractQuestionAnswerRel is a ContractQuestionAnswer set
			Instance Selection
				include deleted records

		PurgeContractQuestionRel is a ContractQuestion set
			Instance Selection
				include deleted records

		PurgeBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID
			Instance Selection
				include deleted records

		PurgeGLCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.HeaderUniqueID					= UniqueID
			Instance Selection
				include deleted records

		PurgeManufacturerContractPivotRel
			one-to-many relation to ManufacturerContractPivot
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.ManufacturerContractPivot		= Contract
			Instance Selection
				include deleted records

		PurgeManufacturerContractRel is a ManufacturerContract(Contract) set
			Instance Selection
				include deleted records

		PurgeContractPreferredManufacturerRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByContractLocation
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract

		PurgeContractDiversityRel is a ContractDiversity set
			Instance Selection
				include deleted records

		PurgeContractImportDistributorRel
			one-to-many relation to ContractImportDistributor
			Field Mapping uses ByDistributorContractNumber
				related.ContractGroup					= ContractGroup
				related.DistributorContractNumber		= Contract
			Instance Selection
				include deleted records

		PurgeContractParticipantRel is a ContractParticipant set
			Instance Selection
				include deleted records

		PurgeContractPricingRel is a ContractPricing set
			Instance Selection
				include deleted records

		PurgeContractArticleRel is a ContractArticle set
			Instance Selection
				include deleted records

		PurgeContractRebateRel is a ContractRebate set
			Instance Selection
				include deleted records

		PurgeContractTierMemberRel is a ContractTierMember set
			Instance Selection
				include deleted records

		PurgeContractTierRel is a ContractTier set
			Instance Selection
				include deleted records

		PurgeRelatedContractRel is a RelatedContract set
			Instance Selection
				include deleted records

		PurgeContractAttachedContactRel is a ContractAttachedContact set
			Instance Selection
				include deleted records

		PurgeContractCommentRel is a ContractComment set
			Instance Selection
				include deleted records

		PurgeContractAttachmentRel is a ContractAttachment set
			Instance Selection
				include deleted records

		PurgeContractMilestoneRel is a ContractMilestone set
			Instance Selection
				include deleted records

		PurgeContractDeliverableRel is a ContractDeliverable set
			Instance Selection
				include deleted records

		MatchInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses ByContract
				related.Contract 			= Contract
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup)

		OpenMatchInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses ByContract
				related.Contract 			= Contract
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.Status             != 9
				and   !related.PayablesInvoice.InterfaceInProcess)

		ResolvedMatchInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses ByContract
				related.Contract 			= Contract
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.Status              = 9
				and   !related.PayablesInvoice.InterfaceInProcess)

		PurgeContractLineRel is a ContractLine set
			Instance Selection
				include deleted records

		ServiceContractReleasedInvoiceRel
			one-to-many relation to MatchServiceContractInvoice
			Field Mapping uses ByVendorGroupContract
				related.VendorGroup			= ContractGroup 
				related.Contract            = Contract 	
			Instance Selection 
				where (related.PayablesInvoice.MatchStatus > 1
				and    related.PayablesInvoice.MatchStatus < 7)	
		ServiceContractInvoiceRel
			one-to-many relation to MatchServiceContractInvoice
			Field Mapping uses ByVendorGroupContract
				related.VendorGroup			= ContractGroup 
				related.Contract            = Contract 		
		MatchServiceContractInvoiceRel
			one-to-many relation to MatchServiceContractInvoice
			Field Mapping uses ByContract 
				related.Company				= LocalCompany
				related.Contract			= Contract
			Instance Selection
				where (related.PayablesInvoice	= PayablesInvoice)

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "Contract"
				related.FSMBODConfiguration.Direction 	= 1


		FSMBODConfigurationProcessContractRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "Contract"
            	related.FSMBODConfiguration.Direction 	= 1    	
		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField		= "CSFAccountingEntity"
				related.FSMBODCrossReference.DestinationField	= "DestinationAccountingEntity"
			Instance Selection
				where (related.SourceValue	= DerivedBODAccountingEntity)


		FSMBODConfigurationPulseAlertRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 2
				related.FSMBODConfiguration.Noun 		= "PulseAlert"
				related.FSMBODConfiguration.Direction 	= 1

		FSMBODConfigurationDetailPulseAlertRel
			one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 			= 2
				related.FSMBODConfiguration.Noun 			= "PulseAlert"
				related.FSMBODConfiguration.Direction 		= 1
			Instance Selection
				where (related.Alert						= LocalPulseAlertFrom
				and	   related.Enable)

		UserTemplateRel
			one-to-one relation to UserTemplate
			Field Mapping uses symbolic key
				related.UserTemplate = LocalUserTemplate
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = DerivedIDMDocumentType
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)

		ContractCommentPrintOnContractRel
			one-to-many relation to ContractComment
			Field Mapping uses BySequenceNumber
				related.ContractGroup = ContractGroup
				related.Contract 	  = Contract
			Instance Selection
				where (related.PrintOnContract = true)
	Sets
		ByClassification
			Sort Order
				ContractClassification
				ContractSubclassification
				ContractGroup
				Contract

		ByContractType
			Sort Order
				ContractType
				ContractSubtype
				ContractGroup
				Contract

		ByWorkingContract
			Sort Order
				ContractGroup
				WorkingContractID
				Contract

		ByContract
			Sort Order
				ContractGroup
				Contract

		ByContractDescending
			Sort Order
				ContractGroup
				Contract descending

		ByVendor
			Sort Order
				ContractGroup
				Vendor
				Contract

		ForStandingContract
			Sort Order
				ContractGroup
				Contract
			Instance Selection
				where (HasScheduleFrequency)

		BySupplier
			Sort Order
				ContractGroup
				Supplier
				Contract

		ByDistributor
			Sort Order
				ContractGroup
				Contract
				ManufacturerOrDistributor.DistributorContract
		ByManufacturer
			Sort Order
				ContractGroup
				Contract
				ManufacturerOrDistributor.ManufacturerContract

		ByExpirationDate
			Sort Order
				ExpirationDate
				ContractGroup
				Contract

		BySupplierSourceId
			Sort Order
				Supplier
				SupplierSourceId
				ContractGroup
				Contract

		ByBuyer
			duplicates
			Sort Order
				Buyer
				ContractStatus

		ByBuyerExpDate
			duplicates
			Sort Order
				Buyer
				ContractStatus
				ExpirationDate

		OpenBySupplier
			duplicates
			Sort Order
				ContractGroup
				Supplier
			Instance Selection
				where (NotInactiveOrClosed)

		OpenByGPOSupplier
			duplicates
			Sort Order
				ContractGroup
				GPOSupplier
			Instance Selection
				where (NotInactiveOrClosed)

		ByAmountOrdered
			Sort Order
				AmountOrdered descending
				ContractGroup
				Contract

	Field Rules
		Name
			required

 		Supplier
 			if (NotContractTemplate
			and !CanUpdateProposedContract)
				required

			if (Supplier changed)
				constraint (!SupplierOriginatedContract)
					"CannotChangeSupplierOnContractCreatedBySupplier"

				Vendor = Supplier.Vendor 

			if (ContractSource.Event
			and !ServicePurchaseType)
				cannot be changed
					"SupplierCannotBeChangedOnContractsCreatedFromSourcingEvents"

		SupplierSourceId
			if (NotContractTemplate
			and !CanUpdateProposedContract)
				required
					"SupplierContactIsRequired"
			else
			if (Supplier entered)
				required
					"SupplierContactIsRequiredWhenSupplierIsEntered"
			if ((Supplier         changed
			or   SupplierSourceId changed
			or   ChangeToHasAPurchaseType)
			and  ContractGroup.SupplierGroupRel.DefaultSupplierContactLocation
			and  HasAPurchaseType
			and  HasBeenActivated = false)
				ApPoPurchaseFrom.VendorLocation = SupplierSourceId.VendorLocation
				ApPoPurchaseFrom.PurchaseFromLocation = blank

		ContractTemplate
	   		cannot be changed
		ParentContract
			constraint (ParentContract != Contract)
				"AContractCannotBeItsOwnParentContract"
			constraint (!ParentContract.ContractStatus.Closed)
				"AClosedContractCannotBeUsedAsAParentContract"

			constraint (!Supplier.GroupPurchasingOrganization)
				"AContractForA_GPOSupplierCannotHaveAParentContract"

			constraint (!GPONegotiated)
				"A_GPONegotiatedContractCannotHaveAParentContract"

			constraint (!ParentContract.Supplier.GroupPurchasingOrganization)
				"AContractForA_GPOSupplierCannotBeUsedAsAParentContract"

			constraint (all Contract descendants.Contract != ParentContract)
				"WorkingContract<Contract parent.WorkingContractID>CannotBeAParentForWorkingContract<WorkingContractID>.ItIsAlreadyADescendantOf<WorkingContractID>"

			constraint (instance count of ParentContract ancestors < 4)
				"MaximumOfFiveContractLevelsIsExceeded"

			if (ParentContract changed and ParentContract != blank)
				if (OldParentContractRel exists)
					for each Contract descendants
						constraint (ParentContract.NumberOfAncestors - OldParentContractRel.NumberOfAncestors + each.NumberOfAncestors < 4)
							"MoveUnderNewParentContractExceedsMaximumOfFiveContractLevels"
				else
					for each Contract descendants
						constraint (ParentContract.NumberOfAncestors + each.NumberOfAncestors < 4)
							"MoveUnderNewParentContractExceedsMaximumOfFiveContractLevels"

			if (ParentContract changed and ParentContract != blank and old ParentContract != blank)
				constraint (!OldParentContractRebateQualifierContractsRel exists)
					"ParentContractCannotBeChanged;Contract<Contract>IsDefinedWithInARebateQualifierForContract<old ParentContract>"

			if 	(ParentContract entered
			and !ParentContractRelatedDocRel exists)
				invoke CreateRelatedContract RelatedContract
					invoked.ContractGroup	  		   = ContractGroup
					invoked.Contract		  		   = ParentContract
					invoked.RelatedContractID 		   = Contract
					invoked.RelatedContractType		   = 11
					invoked.RelatedSupplierName 	   = Contract.Supplier.SupplierName
					invoked.ManufacturerCodeDivision   = Contract.ManufacturerCodeDivision
					invoked.Supplier				   = Contract.Supplier
					invoked.Vendor					   = Supplier.Vendor
					invoked.RelatedContractDescription = Contract.Description

			if (ParentContract changed
			and old ParentContract entered)
				invoke DeleteParentFromContract OldParentContractRelatedDocRel
				invoke DeleteParentFromContract OldParentRelatedContractRel

		ContractType
			if (NotContractTemplate
			and ProposedContract != 1
			and ProposedContract != 4)
				required
			if (HasBeenActivated)
				constraint (ContractType not changed)
					"CanNotChangeTheContractTypeWhenContractHasBeenActivated"

			if (!HasAPurchaseType)
				constraint (!RenewalContract)
					"RenewalContractMustHaveAContractTypeThatIsUsedForCostDefaulting"

			if (!ContractOrCatalog)
				constraint (!CapitatedContract)
					"CapitatedContractMustBeAContractOrCatalogType"		

		ContractClassification
			if (NotContractTemplate
			and ProposedContract !=1
			and ProposedContract !=4)
				required
			if (old ContractClassification entered
			and	NotContractTemplate
			and	ContractSubclassification not entered
			and	HasUnapprovedArticleOrTermChanges)
				constraint (DerivedOldRequireTermAndConditionApproval = DerivedNewRequireTermAndConditionApproval)
					"CannotChangeContractClassificationAndContractSubclassificationFrom<DerivedOldContractClassificationString>And<DerivedOldContractSubclassificationString>To<ContractClassification>And<DerivedContractSubclassificationString>;RequireApprovalOfTermAndConditionUpdatesSettingsAreNotTheSame"
				constraint (DerivedOldUseSupplierPortalForNegotiations = DerivedNewUseSupplierPortalForNegotiations)
					"CannotChangeContractClassificationAndContractSubclassificationFrom<DerivedOldContractClassificationString>And<DerivedOldContractSubclassificationString>To<ContractClassification>And<DerivedContractSubclassificationString>;UseSupplierPortalForNegotiationsSettingsAreNotTheSame"
			if (ContractSubclassification not entered
			and ContractClassification.UseIDM)
				UseIDM = true
				UseIDMPerClassificationAndSubClass = true

			if (CapitatedContract)
				constraint (ContractOrCatalog)
					"CapitatedContractMustBeAContractOrCatalogType"	

		ContractSubclassification
			if (NotContractTemplate
			and	ContractSubclassification changed
			and	HasUnapprovedArticleOrTermChanges)
				constraint (DerivedOldRequireTermAndConditionApproval = DerivedNewRequireTermAndConditionApproval)
					"CannotChangeContractClassificationAndContractSubclassificationFrom<DerivedOldContractClassificationString>And<DerivedOldContractSubclassificationString>To<ContractClassification>And<DerivedContractSubclassificationString>;RequireApprovalOfTermAndConditionUpdatesSettingsAreNotTheSame"
				constraint (DerivedOldUseSupplierPortalForNegotiations = DerivedNewUseSupplierPortalForNegotiations)
					"CannotChangeContractClassificationAndContractSubclassificationFrom<DerivedOldContractClassificationString>And<DerivedOldContractSubclassificationString>To<ContractClassification>And<DerivedContractSubclassificationString>;UseSupplierPortalForNegotiationsSettingsAreNotTheSame"
			if (ContractSubclassification.UseIDM)
				UseIDM = true
				UseIDMPerClassificationAndSubClass = true

			if (CapitatedContract)
				constraint (ContractOrCatalog)
					"CapitatedContractMustBeAContractOrCatalogType"					

		WorkingContractID
			if (WorkingContractID not entered)
				if (WorkingContractRel exists)
					WorkingContractID   = first WorkingContractRel.RelatedContractID
					WorkingContractType = first WorkingContractRel.RelatedContractType
				else
					default to Contract

		AllowChangeOrder
			if (AllowChangeOrder changed
			and AllowChangeOrder = false)
				constraint (!AnyChangeOrderExists)
					"CannotSetAllowChangeOrderToFalse;ChangeOrdersExist"
				constraint (!HasAllowances)
					"CannotSetAllowChangeOrderToFalse;AllowancesExist"
			constraint (!CapitatedContract)
				"AChangeOrderContractCannotBeACapitatedContract"

		ApPoPurchFrom
			constraint (Vendor entered)
				"CannotEnterPurchaseFromLocationWithoutAVendor"

		ApPoPurchaseFrom
			if (ApPoPurchaseFrom.PurchaseFromLocation changed
			and ApPoPurchaseFrom.PurchaseFromLocation entered)
				initialize ApPoPurchaseFrom.VendorLocation
			if (ApPoPurchaseFrom.VendorLocation changed
			and ApPoPurchaseFrom.VendorLocation entered)
				initialize ApPoPurchaseFrom.PurchaseFromLocation
			if  (ContractTypeOrSubTypeChanged
			and !HasAPurchaseType)
				ApPoPurchaseFrom.VendorLocation  = blank
				ApPoPurchaseFrom.PurchaseFromLocation = blank
			if (ApPoPurchaseFrom.VendorLocation entered
			and SupplierSourceId.VendorLocation entered)
				constraint (ApPoPurchaseFrom.VendorLocation = SupplierSourceId.VendorLocation)
					"CannotEnterVendorLocationThatIsDifferentThanSupplierContactVendorLocation"
			if (ApPoPurchaseFrom.PurchaseFromLocation entered
			and SupplierSourceId.VendorLocation entered)
				constraint (ApPoPurchaseFrom.PurchaseFromLocation = SupplierSourceId.VendorLocation)
					"CannotEnterPurchaseFromLocationThatIsDifferentThanSupplierContactVendorLocation"
			if (ApPoPurchaseFrom entered
			and ContractPurchaseFromRels exists)
				invoke Delete ContractPurchaseFromRels

		LineLevelBreaks
			default to 1

		CreateCommitments

			if (CreateCommitments.Header
			or  CreateCommitments.HeaderSpread
			or  CreateCommitments.Line
			or  CreateCommitments.LineSpread)
				constraint (CommitmentCompany entered)
					"CommitmentCompanyIsRequiredWhenUsingCommitments"

			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				force default to 0
				if (old CreateCommitments.Header
				or  old CreateCommitments.Line
				or  old CreateCommitments.HeaderSpread
				or  old CreateCommitments.LineSpread)
					if (ContractLineDistributionRel exists)
						invoke Delete ContractLineDistributionRel
				if (old CreateCommitments.HeaderSpread
				or  old CreateCommitments.LineSpread)
					invoke Delete ContractSpreadRel
					for each ContractSpreadRel 
						invoke DeleteFromContract each 
					invoke Delete ContractLineDistSpreadRel
			if (HasBeenActivated)
				if (CreateCommitments changed)
					if ((CreateCommitments.Header
					or   CreateCommitments.HeaderSpread)
					and ChangeOrderAmountRemaining = 0)
						cannot be changed
							"CannotChangeCreateCommitmentsToHeaderOrHeaderSpread;InvoicedAmountIsEqualToMaximumAmount"
			if (!CreateCommitments.No and NotContractTemplate)
				constraint (ExpirationDate > 0)
					"ExpirationDateIsRequiredForCommittedContracts"
			if (IsManufacturerOrDistributorContract)
				constraint (CreateCommitments.No)
					"CommitmentsAreNotAllowedOnManufacturerOrDistributorContracts"
			if (CreateCommitments changed and CreateCommitments.Header)
				constraint (NumberOfParticipants <= 1)
					"MultipleParticipantsExist;CannotCommitContract"
			if (CreateCommitments.No
			or  CreateCommitments.Header
			or  CreateCommitments.Line)
				AllowIncompleteSpread = false

		CommitmentCompany
			if (CreateCommitments.Header
			or  CreateCommitments.HeaderSpread
			or  CreateCommitments.Line
			or  CreateCommitments.LineSpread)
				constraint (CommitmentCompany entered)
					"CommitmentCompanyIsRequiredWhenUsingCommitments"
			else
				initialize CommitmentCompany

			if (!CreateCommitments.No
			and HasBeenActivated
			and old CommitmentCompany entered)
				cannot be changed
					"CannotChangeCommitmentCompany"

		UOMSMustMatch
			if (NonServicePurchaseType)
				default to false
			if (ContractTypeOrSubTypeChanged
			and !NonServicePurchaseType)
				force default to false
			if (ServicePurchaseType)
				constraint (UOMSMustMatch = false)
					"CannotSetUOMMustMatchFlagToTrueForServicePurchaseTypes"
			if (StandingPurchaseType)
				constraint (UOMSMustMatch = false)
					"MustSetUOMsMustMatchToFalseForStandingPurchaseTypes"
			if (CatchweightLineRel exists)
				constraint (UOMSMustMatch = false)
					"CannotSetUOMMustMatchFlagToTrueWhenCatchweightItemsExist"

		UOMSMustMatchForSpecials
			if (NonServicePurchaseType)
				default to false
			if (ContractTypeOrSubTypeChanged
			and !NonServicePurchaseType)
				force default to false
			if (ServicePurchaseType)
				constraint (UOMSMustMatchForSpecials = false)
					"CannotSetUOMsMustMatchForSpecialsFlagToTrueForServicePurchaseTypes"
			if (StandingPurchaseType)
				constraint (UOMSMustMatchForSpecials = false)
					"MustSetUOMsMustMatchForSpecialsToFalseForStandingPurchaseTypes"


		UseContractUOM
			if (ContractOrBlanketOrCatalog)
				if (UOMSMustMatch)
					UseContractUOM = true
				else
					default to false
			else
				if  (ContractTypeOrSubTypeChanged)
					force default to false
				else
					default to false
				constraint (UseContractUOM = false)
					"CanOnlySetTheUseContractUOMFlagToTrueForContractOrCatalogOrBlanketPurchaseTypes"
			if (CatchweightLineRel exists)
				constraint (UseContractUOM = false)
					"CannotSetUseContractUOMFlagToTrueWhenCatchweightItemsExist"

		AllowReferenceOfItemsNotOnContract
			default to false
			if (!ContractAndNotManOrDist)
				force default to false

			if (AllowReferenceOfItemsNotOnContract)
				constraint (UseLineCommitments = false)
					"CannotSetAllowReferenceOfItemsNotOnContractIfUsingLineCommitments"

		OnHold
			default to false

		Stockless
			if (ContractTypeOrSubTypeChanged
			and !ContractPurchaseType)
				force default to false
			else
				default to false

			if (Stockless changed)
				for each ContractLine set
					invoke FastUpdateWithoutEdits each
						invoked.UpdateStocklessFlag = true

		Priority
			if (!ContractOrBlanketOrCatalog)
				force default to 0
			else
			if (ContractOrBlanketOrCatalog
			or  ContractType !entered) 
				default to 5
				constraint (Priority > 0)
					"PriorityMustBeAtLeast1"

		DefaultTaxable
			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				force default to false
			default to false
		TaxCode
			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				force default to blank
				DefaultTaxable = false
			if (ServicePurchaseType
			and TaxCode entered)
				DefaultTaxable = true
			constraint(DefaultTaxable)
				"CannotHaveATaxCodeIfTheDefaultTaxableFlagIsNo"
			if (DefaultTaxable = true)
				required
					"TaxCodeIsRequiredWhenTaxableFlagIsYes"

			initialize LocalCompanyTaxCodeCount
			for each PoCompanyRel
				if (each.TaxEntityRel.UseTaxCodeAccounts)
					LocalTaxEntity = each.TaxEntityRel.TaxEntity
					if (EntityTaxCodeRel exists)
						LocalCompanyTaxCodeCount = LocalCompanyTaxCodeCount + 1
				else
					LocalCompanyTaxCodeCount = LocalCompanyTaxCodeCount + 1
			constraint (LocalCompanyTaxCodeCount > 0)
				"TaxCode<TaxCode>IsInvalidForAnyCompanyInThisProcurementGroup"

		GroupPurchasingOrganization
			if  (ContractTypeOrSubTypeChanged
			and !ContractPurchaseType)
				GroupPurchasingOrganization = blank

			if (GPOSupplier entered)
				GroupPurchasingOrganization = GPOSupplier.Supplier.Vendor
				constraint (GroupPurchasingOrganization = GPOSupplier.Supplier.Vendor)
					"GroupPurchasingOrganizationVendorMustBeTheSameAsTheVendorForTheGPOSupplier"

		POCode
			if (ContractTypeOrSubTypeChanged
			and !BlanketOrStandingOrServices)
				force default to blank
			if (BlanketPurchaseType)
				default to ContractGroup.ProcurementGroupRel.BlanketPurchaseTypePOCode
			if (StandingPurchaseType)
				default to ContractGroup.ProcurementGroupRel.StandingPurchaseTypePOCode
			if (HasBeenActivated = true)
				if (AmountOrdered > 0)
					cannot be changed
						"CannotChangeDefaultPoCodeWhenThereArePurchasesAgainstTheContract"

		PreferredContract
			if (!NonServicePurchaseType)
				force default to false

		CurrencyCode
			if (!AddendumOrAmendment)
				if (ApPoPurchaseFrom.VendorLocation entered
				and ApPoPurchaseFrom.VendorLocation.InvoiceCurrency entered)
					CurrencyCode = ApPoPurchaseFrom.VendorLocation.InvoiceCurrency
				else
				if (ApPoPurchaseFrom.PurchaseFromLocation entered
				and ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.InvoiceCurrency entered)
					CurrencyCode = ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.InvoiceCurrency
				else
				if (Supplier.Vendor.InvoiceCurrency entered)
					CurrencyCode = Supplier.Vendor.InvoiceCurrency
				else
					default to ContractGroup.DefaultCurrency
			if (CurrencyCode not entered)
				required
			if (HasBeenActivated
			and ContractType.PurchaseType entered)
				cannot be changed

		Buyer
			if (BlanketOrStandingOrServices)
				if (PurchasingContactIsBuyer)
					default to PurchasingContactAsBuyerRel.Buyer
				else
				if (PrimaryContactIsBuyer)
					default to PrimaryContactAsBuyerRel.Buyer

			if (!BlanketOrStandingOrServices)
				initialize Buyer

			if (Buyer entered)
				if (Vendor entered)
					if (BuyerVendorsRel exists)
						constraint (BuyerVendorRel exists)
							"<Vendor>IsNotAValidVendorForBuyer"
				if (ApPoPurchaseFrom.PurchaseFromLocation entered)
					if (BuyerPurchaseFromsRel exists)
						constraint (BuyerPurchaseFromRel exists)
							"Vendor<Vendor>AndPurchaseFrom<ApPoPurchaseFrom.PurchaseFromLocation>IsNotValidForBuyer"

		ScheduleFrequency
			if (ContractTypeOrSubTypeChanged
			and !StandingPurchaseType)
				force default to blank
		MaximumReleaseNumber
			if (ContractTypeOrSubTypeChanged
			and !StandingPurchaseType)
				force default to 0
		DoNotIssue
			if (ContractTypeOrSubTypeChanged
			and !StandingPurchaseType)
				force default to false
		ShipTerm
			if (ContractTypeOrSubTypeChanged
			and ServicePurchaseType)
				force default to blank
			else
				if (ServicePurchaseType)
					cannot be entered
		FreightTerm
			if  (ContractTypeOrSubTypeChanged
			and  ServicePurchaseType)
				force default to blank
			else
				if (ServicePurchaseType)
					cannot be entered
		ProcessLevelGroup
			if (ContractTypeOrSubTypeChanged
			and !BlanketOrStandingOrServices)
				force default to blank

			if (ProcessLevelGroup.Company entered
			and ServicePurchaseType
			and Vendor entered)
          		if (Vendor.VendorRestrictions.RestrictedProcessLevel entered)                                    
                	constraint (ProcessLevelGroup.ProcessLevel = Vendor.VendorRestrictions.RestrictedProcessLevel)
            	        "VendorIsRestrictedToProcessLevel<Vendor.VendorRestrictions.RestrictedProcessLevel>"			

		Vendor
			Vendor = Supplier.Vendor

		CommodityCode
			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				initialize
		NotificationPercent
			if  (ContractTypeOrSubTypeChanged
			and !ContractOrBlanketOrService)
				force default to 0
			constraint (NotificationPercent >= 0% and NotificationPercent <= 100%)
				"NotificationPercentMustBeAPositiveValueNotGreaterThan100%"


			if (NotificationPercent changed)
				if (PercentOrdered != 0
				and LifetimeEdit.PurchaseOrders)
					constraint (NotificationPercent > (PercentOrdered))
						"NotificationPercentMustBeGreaterThanThePercentOrderedOrInvoiced"
				if (TotalPercent != 0
				and LifetimeEdit.PurchaseOrdersAndReqs)
					constraint (NotificationPercent > (TotalPercent))
						"NotificationPercentMustBeGreaterThanTheTotalPercent"

		MaximumAmount
			if (UseHeaderCommitments)
				required
					"MaximumAmountIsRequiredForHeaderCommitments"
			if (MaximumAmount = 0)
				constraint (!NotificationPercent entered)
					"LifetimeMaximumAmountIsRequiredWhenNotificationPercentIsEntered"
			if (MaximumAmount entered)
				constraint (TotalLineMaximumAmount <= MaximumAmount)
					"TheSumOfTheLineLifetimeMaximumAmountsCannotBeGreaterThanTheLifetimeMaximumAmountAtTheContractHeader"
				if (HasChild)
					if (TotalLineMaximumAmount > 0)
						constraint (DerivedParentChildMaxAmounts <= MaximumAmount)
							"TheSumOfTheLineLifetimeMaximumAmountsAndChildContractMaximumAmountsCannotBeGreaterThanTheLifetimeMaximumAmountAtTheContractHeader"
					else
						constraint (DerivedParentChildMaxAmounts <= MaximumAmount)
							"TheSumOfTheChildContractMaximumAmountsCannotBeGreaterThanTheLifetimeMaximumAmountAtTheContractHeader"

			if (ContractLine set exists)
			  	if (MaximumAmount < old MaximumAmount
			  	or (MaximumAmount != 0
			  	and old MaximumAmount = 0))
			  		constraint (!MaximumAmountLessThanBaseRel exists)
						"MaximumAmountCannotBeLessThanTheBaseCostForLine<first MaximumAmountLessThanBaseRel.ContractLine>"
					constraint (!MaximumAmountLessThanOrderMaxRel exists)
						"MaximumAmountCannotBeLessThanThePerOrderMaximumAmountForLine<first MaximumAmountLessThanOrderMaxRel.ContractLine>"
					constraint (!MaximumAmountLessThanLineMaxRel exists)
						"MaximumAmountCannotBeLessThanTheMaximumAmountForLine<first MaximumAmountLessThanLineMaxRel.ContractLine>"

			if (HasBeenActivated = true)
				if (MaximumAmount changed
				and MaximumAmount = 0)
					constraint (NoLinesWithMaxAmount)
						"CannotSetLifetimeMaximumAmountToZeroWhenLineMaximumAmountsAreEntered"

		PerOrderMinimumAmount
			if  (ContractTypeOrSubTypeChanged
			and (StandingPurchaseType
			or   NoPurchaseType))
				force default to 0
			if (PerOrderMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= PerOrderMaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanThePerOrderMaximumAmount"
			if (MaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= MaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanTheContractMaximumAmount"
			if (ContractLine set exists)
			  	if (PerOrderMinimumAmount > old PerOrderMinimumAmount
			  	or (PerOrderMinimumAmount != 0
			  	and old PerOrderMinimumAmount = 0))
			  		constraint (!MinimumAmountGreaterThanLineMinRel exists)
						"PerOrderMinimumAmountCannotBeGreaterThanThePerOrderMinimumAmountForLine<first MinimumAmountGreaterThanLineMinRel.ContractLine>"
					constraint (!MinimumAmountGreaterThanLineMaxRel exists)
						"PerOrderMinimumAmountCannotBeGreaterThanMaximumAmountForLine<first MinimumAmountGreaterThanLineMaxRel.ContractLine>"
		PerOrderMaximumAmount
			if  (ContractTypeOrSubTypeChanged
			and (StandingPurchaseType
			or   NoPurchaseType))
				force default to 0
			if (MaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= MaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanTheContractMaximumAmount"
			if (ContractLine set exists)
			  	if (PerOrderMaximumAmount changed
			  	and PerOrderMaximumAmount != 0)
			  		constraint (!PerOrderMaximumAmountLessThanBaseRel exists)
						"PerOrderMaximumAmountCannotBeLessThanTheBaseCostForLine<first PerOrderMaximumAmountLessThanBaseRel.ContractLine>"
					constraint (!PerOrderMaximumAmountLessThanOrderMaxRel exists)
						"PerOrderMaximumAmountCannotBeLessThanThePerOrderMaximumAmountForLine<first PerOrderMaximumAmountLessThanOrderMaxRel.ContractLine>"
					constraint (!PerOrderMaximumAmountLessThanLineMaxRel exists)
						"PerOrderMaximumAmountCannotBeLessThanTheMaximumAmountForLine<first PerOrderMaximumAmountLessThanLineMaxRel.ContractLine>"

   		CommitmentAccount

			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				initialize CommitmentAccount

	   		if (!UseHeaderCommitments)
				initialize CommitmentAccount

            LocalGeneralLedgerSystemCode = "PO"
            if (CommitmentAccount.GeneralLedgerChartAccount entered
            and CommitmentAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered) 
                constraint (LocalGeneralLedgerSystemCode within CommitmentAccount.GeneralLedgerChartAccount.Account.SystemRestriction) 
                    "InvalidSystemForAccount"    				

		ProposedTotalContractAmount
			if (ContractSubcontractorRels.PaymentPercentage entered)
				required
					"ProposedTotalAmountCannotBeZeroWhenTheSubcontractorHasAPaymentPercentage"

		ManufacturerOrDistributor
			if (ManufacturerOrDistributor.ManufacturerContract
			or  ManufacturerOrDistributor.DistributorContract)
				constraint (!CapitatedContract) 
					"CapitatedContractsCannotBeManufacturerOrDistributorContracts"
				constraint (!ServicePurchaseType)
					"ManufacturerOrDistributorContractsCannotBeServicePurchaseTypes"
				constraint (!ValidHeaderPricingExists)
					"PriceBreaksAreNotAllowedForManufacturerOrDistributorContracts"
				constraint (!BlanketOrStanding)
					"ManufacturerOrDistributorContractsCannotBeBlanketOrStandingPurchaseTypes"

		ContractSource
			default to 2

		RetainagePercentCompleteTracking
			if (LineRetainageExists)
				constraint (!RetainagePercentCompleteTracking.NoRetainage)
					"RetainageTrackingCannotBeTurnedOff;LineRetainageExists"
				required
					"TrackPercentCompleteIsRequiredWhenLinesExistThatUseRetainage"
			if (RetainageTurnedOn)
				constraint (AmountOrdered = 0)
					"RetainageCannotBeTurnedOnWhenAmountOrderedIsGreaterThanZero"

		RetainagePercent1
			if (RetainagePercentCompleteTracking.HeaderLevel)
				required
					"RetainagePercentCompleteTrackingIsRequired"
			if (!RetainagePercentCompleteTracking.NoRetainage)
				constraint (RetainagePercent1 >= 0% and RetainagePercent1 <= 100%)
					"FirstRetainagePercentMustBeAPositiveValueNotGreaterThan100%"
			if (RetainagePercentCompleteTracking.NoRetainage)
				initialize

		RetainageUpToPercent
			if (RetainagePercentCompleteTracking.HeaderLevel)
				required
					"UpToPercentCompleteIsRequired"
			if (!RetainagePercentCompleteTracking.NoRetainage)
				constraint (RetainageUpToPercent >=0% and RetainageUpToPercent <= 100%)
					"RetainageUpToPercentCompleteMustBeAPositiveValueNotGreaterThan100%"
			if (RetainagePercentCompleteTracking.NoRetainage)
				initialize

		RetainagePercent2
			if (RetainagePercentCompleteTracking.NoRetainage)
				initialize
			else
				constraint (RetainagePercent2 >= 0% and RetainagePercent2 <= 100%)
					"SecondRetainagePercentMustBeAPositiveValueNotGreaterThan100%"

		RetainageDueDays
			if (RetainagePercentCompleteTracking.NoRetainage)
				initialize
			if (!RetainageDueDays = 0)
				constraint (ExpirationDate > 0)
					"ExpirationDateIsRequiredWithRetainageInvoiceDueDays"

		RetainageOverridePercent
			if (RetainagePercentCompleteTracking.NoRetainage)
				initialize
			else
				constraint (RetainageOverridePercent >= 0% and RetainageOverridePercent <= 100%)
					"RetainageOverridePercentMustBeAPositiveValueNotGreaterThan100%"

		DefaultAccount
			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				initialize

			if (CreateCommitments changed
		    and UseHeaderCommitments)
				initialize

			if (PayablesDistributionCode entered)
				cannot be entered
					"DefaultAccountInformationCannotBeEnteredWhenADefaultDistributionCodeIsEntered"

			if (UseHeaderCommitments)
				cannot be entered
					"DefaultAccountInformationCannotBeEnteredWhenUsingHeaderCommitments"

		PayablesDistributionCode
			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				PayablesDistributionCode = blank
			if (UseHeaderCommitments)
				cannot be entered
					"DistributionCodeCannotBeEnteredWhenUsingHeaderCommitments"

			if (DefaultAccount entered)
				cannot be entered
					"DistributionCodeCannotBeEnteredWhenDefaultAccountInformationIsEntered"

			constraint (PayablesDistributionCode.IsPercentDistributionCode)
				"TheDistributionCodeMustBeDefinedWithPercents,NotAmounts"

		BlanketStandingRequestingLocation

			if (!BlanketOrStanding)
					force default to blank

		ArticleDisplayChange
			default to false

		ContractDocumentTemplate
			if (not UseIDM)
				if (ContractSubclassification entered)
					default to ContractSubclassification.ContractDocumentTemplate
				else
					default to ContractClassification.ContractDocumentTemplate

		ManufacturerCodeDivision
			if  (ContractTypeOrSubTypeChanged
			and (NoPurchaseType
			or   ServicePurchaseType))
				initialize
			if (ServicePurchaseType)
				initialize

		TierDisplayChange
			default to false

		SourcingEligible
			if (SourcingEligible)
				constraint (SourcingCompanyExists)
					"NotEligibleForEventCreation;NoSourcingCompaniesAreSetupForAssociatedSourcingGroup"
				constraint (IsNotDistributorAndNotManufacturer)
					"DistributorAndManufacturerContractsCannotBeEligibleForSourcing"

		PurchasingContact
			if (Contract exists)
				if (!PrimaryContactExists
				and !ContractAttachedContactRel exists)
					invoke CreateContactFromEmployee ContractAttachedContact
						invoked.ContractGroup 			= ContractGroup
						invoked.Contract				= Contract
						invoked.Contact					= PurchasingContact
						invoked.PrimaryContact			= true
						invoked.SSContact				= true
				else
					invoke Update ContractAttachedContactRel
						invoked.PrimaryContact			= true

		ContractToHaveSubcontractors
			if (HasSubcontractors)
				cannot be changed
					"CannotSetContractToHaveSubcontractorsToNoWhenSubcontractorsExist"
			if (ContractToHaveSubcontractors)
				constraint (ProposedTotalContractAmount != 0)
					"ProposedTotalContractAmountRequiredIfContractCanHaveSubcontractorsAndCanBeMaintainedBySuppliers"
		YellowAlert
			if (YellowAlert = 0)
				default to ContractGroup.YellowAlert
			else
			if (YellowAlert entered)
				constraint (YellowAlert >= 0)
					"CannotEnterNegativeDaysInYellowAlert"
				constraint (RedAlert entered)
					"MustEnterRedAlertNumberOfDays"
				constraint (YellowAlert > RedAlert)
					"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
		RedAlert
			if (RedAlert = 0)
				default to ContractGroup.RedAlert
			else
			if (RedAlert entered)
				constraint (RedAlert >= 0)
					"CannotEnterNegativeDaysInRedAlert"
				constraint (YellowAlert entered)
					"MustEnterYellowAlertNumberOfDays"
				constraint (RedAlert < YellowAlert)
					"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"

		FirstInvoiceAllowedDate
			if (NonServicePurchaseType)
				force default to 0
			if (FirstInvoiceAllowedDate > 0)
				constraint (ServicePurchaseType)
					"FirstInvoiceAllowedDateCannotBeEnteredForNonServicePurchaseTypes"

		LastInvoiceAllowedDate
			if (NonServicePurchaseType)
				force default to 0
			if (LastInvoiceAllowedDate > 0)
				constraint (ServicePurchaseType)
					"LastInvoiceAllowedDateCannotBeEnteredForNonServicePurchaseTypes"

		ProcessPricingChanges
			default to false

		LifetimeEdit

			if (ServicePurchaseType)
				LifetimeEdit = 2
			else
				default to ContractGroup.DefaultLifetimeEdit

			if  (ContractTypeOrSubTypeChanged
			and  NoPurchaseType)
				force default to 0

			if (LifetimeEdit changed
			and !ServicePurchaseType)
				if  (HasBeenActivated
				and  UseCommitments)
					constraint (AmountRequested = 0 and AmountOrdered = 0)
						"CannotChangeLifetimeMaximumEditValue;AmountsHaveBeenOrderedOrRequested"

		GPONegotiated
			constraint (!Supplier.GroupPurchasingOrganization)
				"ContractIsForA_GPOSupplier;ContractCannotBe_GPONegotiated"

			if (GPONegotiated changed
			and GPONegotiated = false)
				constraint (!HasGPORelatedContract)
					"CannotSetGPONegotiatedToFalseWhenAssociatedWithA_GPOInterfaceContract"

			if (!GPONegotiated)
				initialize GPOSupplier
				initialize GroupPurchasingOrganization

		GPOSupplier
			if (GPONegotiated)
				required
					"GPOSupplierIsRequiredWhenGPONegotiated"

			if (GPOSupplier changed
			and GPOSupplier !entered)
				constraint (!HasGPORelatedContract)
					"CannotSetGPOSupplierToBlankWhenAssociatedWithA_GPOInterfaceContract"

			constraint (GPONegotiated)
				"CannotHaveA_GPOSupplierUnlessTheContractIsGPONegotiated"
			constraint (GPOSupplier.Supplier.GroupPurchasingOrganization)
				"GPOSupplierIsNotDefinedAsAGroupPurchasingOrganization"

			if (GPOSupplier entered)
				GroupPurchasingOrganization = GPOSupplier.Supplier.Vendor
				constraint (GroupPurchasingOrganization = GPOSupplier.Supplier.Vendor)
					"GroupPurchasingOrganizationVendorMustBeTheSameAsTheVendorForTheGPOSupplier"


		DocMgmtSystemURL
			default to ContractGroup.DocMgmtSystemURL

		DiversityPctOfProposedTotal
			constraint (ProposedTotalContractAmount entered)
				"CannotEnterDiversityPercentageWithoutAProposedTotalAmount"

			constraint (DiversityPctOfProposedTotal <= 100%)
				"DiversityPercentageOfProposedTotalCannotBeGreaterThan100%"

		AgreementType
			if (Contract.ContractSubtype entered)
				if (Contract.ContractSubtype.PurchaseType.Contract)
					AgreementType = AgreementType.Contract
				if (Contract.ContractSubtype.PurchaseType.Blanket)
					AgreementType = AgreementType.Blanket
				if (Contract.ContractSubtype.PurchaseType.Standing)
					AgreementType = AgreementType.Standing
				if (Contract.ContractSubtype.PurchaseType.CatalogQuote)
					AgreementType = AgreementType.CatalogQuote
				if (Contract.ContractSubtype.PurchaseType.Service)
					AgreementType = AgreementType.Service
			else
		   		if (Contract.ContractType entered)
					if (Contract.ContractType.PurchaseType.Contract)
						AgreementType = AgreementType.Contract
					if (Contract.ContractType.PurchaseType.Blanket)
						AgreementType = AgreementType.Blanket
					if (Contract.ContractType.PurchaseType.Standing)
						AgreementType = AgreementType.Standing
					if (Contract.ContractType.PurchaseType.CatalogQuote)
						AgreementType = AgreementType.CatalogQuote
					if (Contract.ContractType.PurchaseType.Service)
						AgreementType = AgreementType.Service

		SetActiveLineToAmendment
			if (Contract.UseCommitments)
				force default to true

		UseIDMPerClassificationAndSubClass					
			if (IDMRedlineApprovals
			and action type.Create)
				default to true

		ContractDocumentIDMTemplate
			if (IsUsingIDMTemplate
			or  UseIDM)
				if (ContractSubclassification entered)
					default to ContractSubclassification.ContractDocumentIDMTemplate
				else
					default to ContractClassification.ContractDocumentIDMTemplate
				if (ContractDocumentIDMTemplate entered)
					constraint (ContractDocumentIDMTemplate.IDMDocumentType.ContractDocument)
						"InvalidTemplate"
			else 
				initialize

		UseIDM												
			if (IsUsingIDMTemplate
			and action type.Create)
				default to true

		CapitatedComponentsOnly

			if (CapitatedComponentsOnly changed)
				if (CapitatedComponentsOnly)
					constraint (!HasCapitatedProcedures)
						"CannotChangeToCapitatedComponentsOnly;ProceduresExist"
					constraint (!ContractLinesExist)
						"CannotChangeToCapitatedComponentsOnly;ContractLinesExist"
				if (CapitatedComponentsOnly = false)
					constraint (!ContractHasAComponentGroup)
						"CannotChangeCapitatedComponentsOnlyWhenAComponentGroupExists"

	Create Rules

		if  (DefaultAccount.Project entered
		and  EffectiveDate !entered)
				BypassProjectDateEdit = true

		if (UseHeaderCommitments)
			constraint (CommitmentAccount entered)
				"CommitmentAccountIsRequiredForHeaderCommitments"

		if (ParentContract entered
		and MaximumAmount entered
		and ParentContractRel.MaximumAmount entered)
			if (!DerivedAutomaticUpdateHeaderLifetimeMaximumAmount)
				constraint (MaximumAmount + ParentContractRel.TotalChildMaximumAmount + ParentContractRel.TotalLineMaximumAmount <= ParentContractRel.MaximumAmount)
					"MaximumAmountWillCauseTotalChildMaximumAmountPlusTotalLineMaximumAmountOnParentContractToExceedParentContractMaximumAmountOf<ParentContractRel.MaximumAmount>"

		if (ContractSource.Copy
		or  ContractSource.Template)
			if (NoPurchaseType)
				DefaultAccount = blank
				PayablesDistributionCode = blank
				DefaultTaxable = false
				TaxCode = blank
			if (!ContractPurchaseType)
				Stockless = false
				GroupPurchasingOrganization = blank
			if (!StandingPurchaseType)
				ScheduleFrequency = blank
				MaximumReleaseNumber = blank
				DoNotIssue = false
			if (!BlanketOrStanding)
				BlanketStandingRequestingLocation = blank
			if (ServicePurchaseType)
				FreightTerm = blank
				ShipTerm = blank
			if (!BlanketOrStandingOrServices)
				ProcessLevelGroup = blank
			if (NonServicePurchaseType)
				LastInvoiceAllowedDate = 0
				FirstInvoiceAllowedDate = 0

			if (!ContractOrBlanketOrCatalog)
				Priority = 0
				UseContractUOM = false
			if (!ContractAndNotManOrDist)
				AllowReferenceOfItemsNotOnContract = false
			if (!BlanketOrStandingOrServices)
				POCode = blank
			if (NoPurchaseType
			or  CatalogQuotePurchaseType
			or  StandingPurchaseType)
				NotificationPercent = 0
			if (NoPurchaseType
			or  StandingPurchaseType)
				PerOrderMinimumAmount = 0
				PerOrderMaximumAmount = 0
			if (NoPurchaseType)
				LifetimeEdit = blank
				ManufacturerCodeDivision = blank
		if  (HasAPurchaseType
		and !ApPoPurchaseFrom entered
		and  ContractGroup.SupplierGroupRel.DefaultSupplierContactLocation)
			ApPoPurchaseFrom.VendorLocation = SupplierSourceId.VendorLocation
			initialize ApPoPurchaseFrom.PurchaseFromLocation
		if (CommitmentAccount.Project entered)
			TransientExchangeDate = EffectiveDate
			LocalPostingDate  = EffectiveDate
		if (HasAPurchaseType)
			if (ContractPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnContract = 1)
				IncludeAOCInMaxEdits = true
			else
			if (StandingPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnStanding = 1)
				IncludeAOCInMaxEdits = true
			else
			if (ServicePurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnService = 1)
				IncludeAOCInMaxEdits = true
			else
			if (CatalogQuotePurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnCatalog = 1)
				IncludeAOCInMaxEdits = true
			else
			if (BlanketPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnBlanket = 1)
				IncludeAOCInMaxEdits = true
			else
				IncludeAOCInMaxEdits = false
			if (ContractPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnContract = 1)
				IncludeTaxInMaxEdits = true
			else
			if (StandingPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnStanding = 1)
				IncludeTaxInMaxEdits = true
			else
			if (ServicePurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnService = 1)
				IncludeTaxInMaxEdits = true
			else
			if (CatalogQuotePurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnCatalog = 1)
				IncludeTaxInMaxEdits = true
			else
			if (BlanketPurchaseType
			and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnBlanket = 1)
				IncludeTaxInMaxEdits = true
			else
				IncludeTaxInMaxEdits = false

			if (ContractSubclassification entered)
				DoNotDisplayToAll = ContractSubclassification.DoNotDisplayContractsToAll
				if (ServicePurchaseType
				and !ContractTemplate)
					AllowChangeOrder  = ContractSubclassification.AllowChangeOrder
			else
				DoNotDisplayToAll = ContractClassification.DoNotDisplayContractsToAll
				if (ServicePurchaseType
				and !ContractTemplate)
					AllowChangeOrder  = ContractClassification.AllowChangeOrder

		if ((NonServicePurchaseType
		and !IsDistributorContract)
		or   IsManufacturerContract)
			if (ContractSubclassification entered
			and ContractSubclassification.EnableClinicalSystemUseLocations)
				EnableClinicalSystemUseLocations = true 
			else 
			if (ContractClassification.EnableClinicalSystemUseLocations)
				EnableClinicalSystemUseLocations = true 
		
		include DateEdits

	Create Exit Rules
		if (SupplierDiversitySelectionRel exists)
			for each SupplierDiversitySelectionRel
				LocalDiversityCode = each.SupplierDiversityResponse.PayablesDiversityCode
				if (ContractDiversityRel !exists)
					invoke Create ContractDiversity
						invoked.ContractGroup         = ContractGroup
						invoked.Contract              = Contract
						invoked.PayablesDiversityCode = each.SupplierDiversityResponse.PayablesDiversityCode

		if (StandardCommentCode entered)
			include CreateCommentFromCommentCode

		include BuildTextIndexes

		if  (UseHeaderCommitments
		and (FromContractCopy
		or   ContractSource.Import
		or   ContractSource.Template))
			invoke RecalculateReportCurrencyAmount

		if (MaximumAmount entered
		and ParentContract entered)
			invoke CalculateTotalChildMaximumAmount ParentContractRel

		if (EnableClinicalSystemUseLocations
		and	ContractGroup.DefaultParticipantGroupForContractLocations entered)
			LocalParticipantGroup = ContractGroup.DefaultParticipantGroupForContractLocations
			invoke CreateLocationsForAContract ParticipantGroupLine
				invoked.ParmProcurementGroup			= ContractGroup
				invoked.ParmContract					= Contract
				invoked.ParmParticipantGroup            = LocalParticipantGroup
				invoked.LineLevel               		= ContractGroup.LineLevelForContractLocation	

	Action Exit Rules
		LocalFinanceEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
		LocalAccountingEntity      = PoCompanyRel.Company.GeneralLedgerCompany.AccountingEntity
		LocalCompany = PoCompanyRel.Company
		if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger and !LocalBODtrigger and !LocalNativeBODLinesTrigger)
			if (action type.Create)
				increment bod id.VariationID
				LocalActionCode = LocalActionCode.Create
				LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
				include TriggerProcessContractRules


			LocalBODtrigger = true

	Actions		

		CreateContractEvaluation is an Instance Action
			default label is "CreateEvaluation"
			valid when (CanCreateEvaluation)
			Parameters
				PrmDescription is Alpha size 100
					default label is "Description"
			Action Rules
				invoke ContractCreate SupplierPerformanceEvaluation
					invoked.SupplierGroup = ContractGroup
					invoked.Supplier = Supplier
					invoked.Contract = Contract
					invoked.PerformanceEvaluationTemplate = DerivedContractEvaluationTemplate
					invoked.Description = PrmDescription

		CreateAndSendContractDocToIDM is an Instance Action
			restricted
			Local Fields
				IDMGenerateDocument
   				IDMJobView					is an IDMJob view
				LocalMergeDocIndex			is Numeric size 3
			Action Rules
				include SetIDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName										= "Contract"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue										= Contract
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName										= "ContractGroup"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue										= ContractGroup
				if (IDMRedlineApprovals)
					IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName									= "CreatedBySupplier"
					IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue								= false

				if (IDMAdditionalAttributesLinesRel exists)
					if (IDMRedlineApprovals)
						AttributeCtr = 11
					else
						AttributeCtr = 10
					include IDM.IDMAdditionalAttributes

				initialize IDMGenerateDocument
				include SetIDMXMLDefinition
				IDMGenerateDocument.IDMXMLDefinition = IDMXMLDefinition

				IDMGenerateDocument.IDMAttributes									= IDMAttributes
				IDMGenerateDocument.TemplateUniqueId 								= ContractDocumentIDMTemplate.IDMUniqueId
				if (IDMRedlineApprovals)
					IDMGenerateDocument.DocumentType									= "FSM_ContractRedlineDocument"
				else
					IDMGenerateDocument.DocumentType									= "FSM_ContractDocument"
				IDMGenerateDocument.FileName										= DerivedContractFileName
				IDMGenerateDocument.IDMAccessControlList 							= "CSFDefined"

				for each NonDeletedContractArticlesByDisplayRel
					for each each.NonDeletedContractTermsByDisplayRel
						for each each.MergeContractTermsAttachmentByDisplayRel
							LocalMergeDocIndex += 1
							IDMGenerateDocument.MergeAttachments.IDMAttachment[LocalMergeDocIndex].File       	= each.Attachment.FileADL
							IDMGenerateDocument.MergeAttachments.IDMAttachment[LocalMergeDocIndex].MimeType		= each.Attachment.MimeType
							IDMGenerateDocument.MergeAttachments.IDMAttachment[LocalMergeDocIndex].Title		= each.Attachment.Title
				
				if (ContractDocumentIDMTemplate.UseRichText)
					IDMGenerateDocument.DocumentTemplateType = IDMDocumentTemplate.Contract
					include IDM.CheckRichTextIDMOption

				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= DerivedGenerationMessage
					invoked.IDMGenerateDocument = IDMGenerateDocument

				IDMJob = IDMJobView.IDMJob
				invoke UpdateIDMDocumentPID in background
					run after IDMJob.AsyncId
					invoked.PrmFileName = IDMGenerateDocument.FileName

		UpdateIDMDocumentPID is an Instance Action
			run in background
			restricted
			Parameters
				PrmFileName	is an IDMFileName
			Action Rules
				if (IDMJob.GenerationStatus.Finished
				and IDMJob.MDSID entered)
					IDMDocumentPID = IDMJob.MDSID
					if (CreateRedlineAction)
						invoke Create ContractRedlineDocument
							invoked.ContractGroup 		= ContractGroup
							invoked.Contract     		= Contract
							invoked.Title				= PrmFileName
							invoked.IDMUniqueId			= IDMDocumentPID
							invoked.CreatedBySupplier	= false
							invoked.Description			= DerivedContractRedlineDocumentDescription
							invoked.LocalGeneratedContract	= true
					else
						if (ForCMUpdate)
							invoke Update LatestRevisionRel
								invoked.Title				= PrmFileName
								invoked.IDMUniqueId			= IDMDocumentPID
								invoked.CreatedBySupplier	= false
								invoked.Description			= DerivedContractRedlineDocumentDescription
								invoked.LocalGeneratedContract	= true
								invoked.IDMSignatureEnvelopeUniqueID = blank

		UpdateIDMAttributes is an Instance Action
			run in background
			restricted
			Parameters
				LocalPID			is an IDMPID
				LocalResult			is Boolean
				LocalColSequence	is Numeric size 3
				LocalAttrsSearch	is an IDMAttributeOccurs

			Action Rules
				include SetIDMAttributes
				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 8
					include IDM.IDMAdditionalAttributes

				if (LocalPID entered)
					IDMAttributes.PID = LocalPID

					LocalResult = IDMAttributes.ExecuteUpdateAttributeByPID
				else
					LocalAttrsSearch.IDMAttribute[1].IDMAttributeName	= "Contract"
					LocalAttrsSearch.IDMAttribute[1].IDMAttributeValue 	= Contract
					LocalAttrsSearch.IDMAttribute[2].IDMAttributeName  	= "ContractGroup"
					LocalAttrsSearch.IDMAttribute[2].IDMAttributeValue  = ContractGroup

					IDMAttributes.AttributeSearch = LocalAttrsSearch

					IDMAttributes.IDMDocumentType = "FSM_Contract"
					LocalResult = IDMAttributes.ExecuteUpdateAttribute


					if (UseIDM or IsUsingIDMTemplate)
						IDMAttributes.IDMDocumentType = "FSM_ContractDocument"
						LocalResult = IDMAttributes.ExecuteUpdateAttribute


					if (UseIDMPerClassificationAndSubClass)
						IDMAttributes.IDMDocumentType = "FSM_ContractRedlineDocument"
						LocalResult = IDMAttributes.ExecuteUpdateAttribute

		CreateIDMXML is a Set Action
			completion message is "<DerivedCreateIDMXMLCompletionMessage>"
			default label is "Generate_XMLFile"
			run in foreground
			Parameters
				PrmContractGroup is a ContractGroup
					default label is "ContractGroup"
				PrmContract is a Contract
					default label is "Contract"

			Parameter Rules
				PrmContractGroup
					required
				
				PrmContract
					required

			Local Fields
				LocalExecute is Boolean
				
			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract = PrmContract)

			Action Rules

				Set Rules
					Exit Rules
						LocalContract = PrmContract
						
				Instance Rules
					LocalGenerateXMLFile = true
					include SetIDMXMLDefinition

					LocalExecute = IDMXMLDefinition.GenerateXML

					invoke FastUpdate
						invoked.ContractIDMXMLFile = IDMXMLDefinition.OutputAttachment

		DeleteIDMXML is an Instance Action
			valid when (ContractIDMXMLFile entered)
			completion message is "<DerivedDeleteIDMXMLCompletionMessage>"
			confirmation required
			default label is "Delete_XMLFile"
			Action Rules
				invoke FastUpdate
					initialize invoked.ContractIDMXMLFile

		PerformTierCalculations is an Instance Action 
			valid when (CanPerformTierCalculation)
			Parameters
				ParmContractGroup						is a ContractGroup 
				ParmContract                            is a Contract 
					context of ParmContractGroup 
				ParmTierMemberCompany                   is an InventoryCompany 
					default label is "ForJustThisTierMemberCompanyAndOptionallyLocation"
				ParmTierMemberLocation                  is an InventoryLocation 
				CalculateCompetitive                    is Boolean 
					default label is "ShowCompetitiveAmounts"
				ParmTier								is a ContractTier 
					default label is "CompareForThisTierAndQualifier"
					context of ParmContractGroup 
				ParmQualifier    			            is a ContractTierQualifier
					context of ParmContractGroup 
				ParmOnlyForTier                         is Boolean
					default label is "ProcessOnlyQualifierItemsAssociatedWithThisQualifier" 
				ParmDateRange                           is a DateRange 
				ParmFromQualifier                       is Boolean 

			Parameter Rules
				
				ParmContractGroup	
					initial value is ContractGroup 
					default to ContractGroup 

				ParmContract 	
					initial value is Contract 
					default to Contract 

				ParmDateRange.Begin 
					required

				ParmDateRange.End 
					required 
				
				ParmTierMemberLocation 
					if (ParmTierMemberLocation entered)
						constraint (ParmTierMemberCompany entered)
							"MustEnterATierMemberCompanyIfEnteringALocation"
				
				ParmTier 
					if (ParmTier entered)
						constraint (ParmQualifier entered)
							"MustEnterAQualifierIfEnteringATier"
				
				ParmQualifier 
					if (ParmQualifier entered)
						constraint (ParmTier entered)
							"MustEnterATierIfEnteringAQualifier"
						constraint (!ParmQualifier.BaseTier)
							"QualifierMustHaveAnAmountOrPercentToBeUsedForComparisons"

				ParmOnlyForTier 
					
					initial value is true 	
				
				CalculateCompetitive 
					initial value is true 
				
			Action Rules 

				constraint (ParmDateRange entered)
					"MustEnterADateRange"
				
				if (!ParmFromQualifier)

					if (ParmQualifier entered
					and ParmQualifier.QualifierHasItems
					and ParmOnlyForTier)
						constraint (ParmQualifier.QualifierHasQualifiedItems)
							"ProcessOnlyQualifierItemsAssociatedWithThisQualifierCannotBeSelected;NoQualifiedQualifierItemsExist"
	
					if (ParmDateRange.Begin < EffectiveDate
					or  ParmDateRange.End   > ExpirationDate)
						confirmation required 
							"DocumentDateRangeIsOutsideOfContractDateRange;DoYouWantToContinue?"

					if (ParmQualifier entered
					and ParmQualifier.TargetedQualifier)
						if (ParmDateRange.Begin < ParmQualifier.TargetedPurchasesFromDate
						or  ParmDateRange.End   > ParmQualifier.TargetedPurchasesToDate)
							confirmation required 
								"TargetedPurchasesDatesEnteredAndDocumentDateRangeIsOutsideTargetedPurchasesDates;DoYouWantToContinue?"
				
					if (ParmQualifier !entered
					and	TierQualifierContractsNoItemsRel exists)
						confirmation required 
							"QualifierContractsExistWithNoQualifierItems;DoYouWantToContinue?"
				
				invoke PerformQualifiedTierCalculations TierQualifierItem 
					invoked.ParmContractGroup					= ParmContractGroup
					invoked.ParmContract                        = ParmContract 
					invoked.ParmTierMemberCompany               = ParmTierMemberCompany 
					invoked.ParmTierMemberLocation              = ParmTierMemberLocation 
					invoked.ParmTier							= ParmTier 
					invoked.ParmQualifier                       = ParmQualifier
					if (ParmQualifier entered
					and ParmQualifier.QualifierHasItems)
						invoked.ParmOnlyForTier                 = ParmOnlyForTier
					if (HasPercentTierQualifier)
						invoked.CalculateCompetitive            = CalculateCompetitive
					invoked.ParmDateRange                       = ParmDateRange 
					if (ParmQualifier entered)
						if (ParmQualifier.PurchaseBy.InvoicePrice)
							invoked.InvoicesOrPurchaseOrders    = 1
						else 
							invoked.InvoicesOrPurchaseOrders    = 2
					else 
						if (first TierQualifierRel.PurchaseBy.InvoicePrice)
							invoked.InvoicesOrPurchaseOrders    = 1
						else 
							invoked.InvoicesOrPurchaseOrders    = 2	
		
		LoadLineSupplierAndVendor is a Set Action 
			restricted 

			Instance Selection 
				where (NotClosed
				and    Supplier.Active
				and   (Vendor !entered
				or     Vendor.IsActiveVendor)
				and   (ExpirationDate !entered
				or     ExpirationDate >= current corporate date))
			Action Rules 

				Instance Rules
					if (NumberOfLinesQuickApproximation > 50)
						invoke MaintainSupplierAndVendor ContractLine 
							invoked.ParmContractGroup	= ContractGroup 
							invoked.ParmContract        = Contract
					else 
						for each ContractLineRel 
							invoke FastUpdateWithoutEdits each 
								invoked.UpdateVendorAndSupplier	= true 
								invoked.UpdatedVendor           = Vendor 
								invoked.UpdatedSupplier         = Supplier 
		
		RebuildCommitmentTotals is an Instance Action
			restricted
			Parameters
				EditTotalsProcessing 		is a BudgetEditTotalsProcessing
				EditMode                    is a BudgetEditMode
				IsBatch                     is Boolean

			Action Rules


				invoke Delete WarningBudgetEditErrorRel
				invoke Delete BudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				


				if (UseHeaderOnlyCommitments)
					if (HasBeenActivated = false)
						invoke Purge GLCommitRel

							invoked.PrmPurgeRecalculate = true
						include ManageCommitments
					else
					if (GLCommitRel.LastCurrAmountDiff > 0)

						invoke ClearLastCurrencyAmount GLCommitRel
						LocalFromRecalculate = true
						include ManageCommitments

				if (UseHeaderSpreadCommitments)
					for each ContractSpreadForAmountUpdateRel
						invoke CreateCommitmentFromRebuild each
				if (UseLineCommitments)
					for each ContractLineDistributionRel
						invoke CreateCommitmentFromRebuild each
				if (UseLineSpreadCommitments)
					for each ContractLineDistSpreadRel
						invoke CreateCommitmentFromRebuild each

				invoke EditTotalsRoute BudgetTemplateGroupTotal
					invoked.PrmFinanceEnterpriseGroup    											= ContractGroup.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup           											= UniqueID
					invoked.PrmIsBatch                                                              = IsBatch
					if (EditMode = BudgetEditMode.Test)
						invoked.PrmMode																= BudgetEditMode.Test
						invoked.PrmTotalsProcessing                                                 = BudgetEditTotalsProcessing.DoNothing
						invoked.PrmEditContext                                                      = "Release"
					else
						invoked.PrmMode                                                             = BudgetEditMode.Hard
						invoked.PrmTotalsProcessing                                                 = BudgetEditTotalsProcessing.Purge
						invoked.PrmEditContext                                                      = "Activate"
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= ContractGroup
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= Contract
					invoked.PrmBusinessClassName                									= "Contract"

		LoadTextSearch is a Set Action   
			default label is "LoadTextSearchOnContract"
			restricted
			Parameters
				ContractGroup

			Parameter Rules
				Contract Group
					required

			Instance Selection
				where (ContractGroup = ContractGroup)

			Action Rules

				Instance Rules

					include BuildTextIndexes

		MassCreateContractLocation is an Instance Action 
			default label is "CreateLocationsForClinicalUse"
			valid when (CanMassCreateClinicalContractLocations)
			Parameters 
				ProcurementGroup                 
				FromParticipantGroup            is a ParticipantGroup
				CompanyOption                   is Numeric 1
					default label is "LocationsToCreateForCompanyOnlyValues"
					States 
						Both 					value is 0
						InventoryLocationOnly   value is 1
						RequestingLocationOnly  value is 2
				LineLevel                       is Boolean 
					default label is "CreateLocationsAsLineLevel"
				FromPricingGroup                is like PricingGroup 
            
			Parameter Rules 

				ProcurementGroup 
					initial value is ContractGroup 
					default to ContractGroup

				FromParticipantGroup
					constraint (!FromParticipantGroup.MemberGroup)
						"CannotUseGroupThatIsForManufacturerAndDistributorContracts"				
			
			Action Rules 

				constraint (FromParticipantGroup entered)
					"MustEnterAParticipantGroup"

				LocalParticipantGroup = FromParticipantGroup
				constraint (LocalParticipantGroupContractRel !exists)
					"ParticipantGroupAlreadyUsedOnContract"	

				invoke MassCreateContractLocationSet 
					invoked.ParmContractGroup                   = ContractGroup 
					invoked.ParmContract                        = Contract
					invoked.ProcurementGroup                    = ProcurementGroup 
					invoked.FromParticipantGroup            	= FromParticipantGroup
					invoked.CompanyOption                       = CompanyOption 
					invoked.LineLevel                           = LineLevel

		MassCreateContractLocationSet is a Set Action 
			restricted
			Parameters 
				ParmContractGroup               is a ContractGroup       
				ParmContract                    is like Contract
				ProcurementGroup                is like ProcurementGroup 
				FromParticipantGroup            is like ParticipantGroup
				CompanyOption                   is Numeric 1
					States 
						Both 					value is 0
						InventoryLocationOnly   value is 1
						RequestingLocationOnly  value is 2
				LineLevel                       is Boolean 
				FromPricingGroup                is like PricingGroup 
			Instance Selection 
				where (ParmContractGroup = ContractGroup
				and    ParmContract      = Contract)

			Action Rules 
				Instance Rules 

					if (FromParticipantGroup !entered)
						if (ContractParticipantsExist)
							for each ContractParticipant set 
								if  (each.ContractParticipant.ParticipantLocation.Company entered
								and (each.ContractParticipant.ParticipantLocation.Location entered
								or   each.ContractParticipant.ParticipantLocation.RequestingLocation entered))
									LocalCompany 				= each.ContractParticipant.ParticipantLocation.Company 
									LocalRequestingLocation 	= each.ContractParticipant.ParticipantLocation.RequestingLocation 
									LocalInventoryLocation		= each.ContractParticipant.ParticipantLocation.Location	
									if (ContractLocationLocalRel !exists)
										invoke Create ContractAndLineLocation 
											invoked.ContractGroup								= ContractGroup 
											invoked.Contract            						= Contract 
											invoked.ContractAndLineLocation.Company 			= each.ContractParticipant.ParticipantLocation.Company 
											invoked.ContractAndLineLocation.Location			= each.ContractParticipant.ParticipantLocation.Location 
											invoked.ContractAndLineLocation.RequestingLocation	= each.ContractParticipant.ParticipantLocation.RequestingLocation
											invoked.ClinicalSystemUse                           = true 
									else
									if (ContractLocationLocalRel exists
									and ContractLocationLocalRel.ClinicalSystemUse = false)
										invoke Update ContractLocationLocalRel
											invoked.ClinicalSystemUse = true
								else
								if  (each.ContractParticipant.ParticipantLocation.Company entered
								and  each.ContractParticipant.ParticipantLocation.Location !entered
								and  each.ContractParticipant.ParticipantLocation.RequestingLocation !entered)
									LocalCompany	= each.ContractParticipant.ParticipantLocation.Company
									invoke CreateLocationsForAContractInstance LocalInventoryCompanyRel 
										invoked.ParmContractGroup   		= ContractGroup
										invoked.ParmContract 				= Contract
										invoked.CompanyOption       		= CompanyOption		
								else
								if (each.PricingGroupEntered)
									LocalPricingGroup               = each.ContractParticipant.ParticipantLocation.PricingGroup	
									invoke CreateLocationsForAContractInstance LocalPricingGroupRel 
										invoked.ParmProcurementGroup		= ContractGroup
										invoked.ParmContract        		= Contract 
										invoked.CompanyOption           	= CompanyOption

						if (ContractTierMembersExist)
							for each AnyTierMembersRel
								if  (each.ContractTierMember.Company entered
								and (each.ContractTierMember.Location entered
								or   each.ContractTierMember.RequestingLocation entered))
									LocalCompany 				= each.ContractTierMember.Company 
									LocalRequestingLocation 	= each.ContractTierMember.RequestingLocation 
									LocalInventoryLocation		= each.ContractTierMember.Location	
									if (ContractLocationLocalRel !exists)
										invoke Create ContractAndLineLocation 
											invoked.ContractGroup								= ContractGroup 
											invoked.Contract            						= Contract 
											invoked.ContractAndLineLocation.Company 			= each.ContractTierMember.Company 
											invoked.ContractAndLineLocation.Location			= each.ContractTierMember.Location 
											invoked.ContractAndLineLocation.RequestingLocation	= each.ContractTierMember.RequestingLocation
											invoked.ClinicalSystemUse                           = true 
									else
									if (ContractLocationLocalRel exists
									and ContractLocationLocalRel.ClinicalSystemUse = false)
										invoke Update ContractLocationLocalRel
											invoked.ClinicalSystemUse = true
								else 
								if   (each.ContractTierMember.Company entered
								and   each.ContractTierMember.Location !entered
								and   each.ContractTierMember.RequestingLocation !entered)
									LocalCompany 	= each.ContractTierMember.Company
									invoke CreateLocationsForAContractInstance LocalInventoryCompanyRel 
										invoked.ParmContractGroup   		= ContractGroup
										invoked.ParmContract 				= Contract
										invoked.CompanyOption       		= CompanyOption	
								else
								if (each.ContractTierMember.PricingGroup entered)
									LocalPricingGroup               = each.ContractTierMember.PricingGroup 
									invoke CreateLocationsForAContractInstance LocalPricingGroupRel 
										invoked.ParmProcurementGroup		= ContractGroup
										invoked.ParmContract        		= Contract 
										invoked.CompanyOption           	= CompanyOption	

						if (PricingMembersForDistributorContractExist)
							if (DistHasLocationMembers)
								invoke CreateContractAndLineLocationsForRequestingLocationOrLocation ContractDistributorPricingMember
									invoked.PrmContractGroup			= ContractGroup 
									invoked.PrmContract            		= Contract
									if (DistHasCompanyMembers)
										invoked.PrmHasCompanyMembers    = true 
									if (DistHasPricingGroupMembers)
										invoked.PrmHasPricingGroups     = true 
							else
							if (DistHasCompanyMembers)
								invoke CreateContractAndLineLocationsForCompany ContractDistributorPricingMember 
									invoked.PrmContractGroup			= ContractGroup 
									invoked.PrmContract            		= Contract
									if (DistHasPricingGroupMembers)
										invoked.PrmHasPricingGroups     = true 								
							else
							if (DistHasPricingGroupMembers)
								invoke CreateContractAndLineLocationsForPricingGroup ContractDistributorPricingMember
									invoked.PrmContractGroup		= ContractGroup 
									invoked.PrmContract            = Contract							

					else
					if (FromParticipantGroup entered) 	
						invoke CreateLocationsForAContract ParticipantGroupLine
							invoked.ParmProcurementGroup		= ProcurementGroup
							invoked.ParmContract				= Contract
							invoked.ParmParticipantGroup        = FromParticipantGroup
							invoked.CompanyOption               = CompanyOption
							invoked.LineLevel                   = LineLevel

		CloseCommitmentsForClosedContracts is a Set Action 
			restricted
			Parameters
				ContractGroup

			Parameter Rules
				ContractGroup
					required

			Instance Selection

				where (ContractGroup = ContractGroup
				and    ContractStatus.Closed
				and    OpenCommitmentsExist)

			Action Rules

				Instance Rules
					for each OpenGLCommitDrillRel
						invoke FreeUpAllocatedBudgetAmounts each
					invoke EditTotalsRoute BudgetTemplateGroupTotal
						invoked.PrmFinanceEnterpriseGroup    											= ContractGroup.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup           											= UniqueID
						invoked.PrmMode			                                                        = BudgetEditMode.UpdateOnly
						invoked.PrmBusinessClassName                									= "Contract"
						invoked.PrmEditContext                      									= "Close"

		CreateSupplierMessageAndDialog is an Instance Action  
			valid when (SupplierSameAsContractSupplier)
			Parameters
				ParmDialogMessage       is Alpha size 1000
					default label is "Message"
				ParmDialogAttachment	is an Attachment
					default label is "Attachment"
				ParmPriority            is Numeric 1
					States
						Low				value is 1
						Normal			value is 2
						High			value is 3
					default label is "Priority"
				ParmResponseRequested   is Boolean
					default label is "ResponseRequired"

			Parameter Rules
				ParmDialogMessage
					required

				ParmPriority
					initial value is 2

			Local Fields
				LocalSupplierContactMessage        is a SupplierContactMessage view

			Action Rules

				invoke Create SupplierContactMessage
					assign result to LocalSupplierContactMessage
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.MessageTitle					= "Dialog for Contract: " + RepresentativeText
					invoked.MessageText                     = "User Created Message and Dialog for Contract: " + RepresentativeText
					invoked.Status							= 1
					invoked.Priority						= ParmPriority
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = PrimaryContactRel.Contact
					invoked.OriginatingContract             = Contract

				invoke Create SupplierMessageDialog
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.SupplierContactMessage 			= LocalSupplierContactMessage.SupplierContactMessage
					invoked.Message                 		= ParmDialogMessage
					invoked.MessageAttachment       		= ParmDialogAttachment
					invoked.ResponseRequested       		= ParmResponseRequested

		CreateMessageAndDialog is an Instance Action  
			default label is "StartASupplierDialog"
			valid when (PrimaryContactCanCreateDialog)
			Parameters
				ParmDialogMessage       is Alpha size 1000
					default label is "Message"
				ParmDialogAttachment	is an Attachment
					default label is "Attachment"
				ParmPriority            is Numeric 1
					States
						Low				value is 1
						Normal			value is 2
						High			value is 3
					default label is "Priority"
				ParmResponseRequested   is Boolean
					default label is "ResponseRequired"

			Parameter Rules
				ParmDialogMessage
					required

				ParmPriority
					initial value is 2

			Local Fields
				LocalSupplierContactMessage        is a SupplierContactMessage view

			Action Rules

				invoke Create SupplierContactMessage
					assign result to LocalSupplierContactMessage
					invoked.SupplierGroup  					= ContractGroup					
 					invoked.Supplier    			 		= Supplier
					invoked.SupplierSourceId                = SupplierSourceId 
					invoked.MessageTitle					= "Dialog for Contract: " + RepresentativeText
					invoked.MessageText                     = "User Created Message and Dialog for Contract: " + RepresentativeText
					invoked.Status							= 1
					invoked.Priority						= ParmPriority
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = actor.agent(Employee).Employee
					invoked.OriginatingContract             = Contract

				invoke Create SupplierMessageDialog
					invoked.SupplierGroup  					= ContractGroup					
 					invoked.Supplier    			 		= Supplier
					invoked.SupplierSourceId                = SupplierSourceId 
					invoked.SupplierContactMessage 			= LocalSupplierContactMessage.SupplierContactMessage
					invoked.Message                 		= ParmDialogMessage
					invoked.MessageAttachment       		= ParmDialogAttachment
					invoked.ResponseRequested       		= ParmResponseRequested
					invoked.Origin                          = 1

		UpdateContractDate is an Instance Action
			default label is "UpdateContractDates"
			valid when (CanUseUpdateDatesAction)
			Parameters
				NewEffectiveDate 	is Date
				NewExpirationDate 	is Date
				NewReviewDate       is Date
				LineUpdateOption    is Numeric 1
					States
						UpdateIfCurrentDateSameAsHeaderDate value is 1
						UpdateAll                           value is 2
         				DoNotUpdate                         value is 3

			Parameter Rules

				NewEffectiveDate
					initial value is EffectiveDate
					
					if (NewEffectiveDate entered
					and NewExpirationDate entered)
						constraint (NewEffectiveDate < NewExpirationDate)
							"IfBothNewEffectiveAndExpirationDateAreEntered,NewEffectiveDateMustBeBeforeNewExpiration"

				NewExpirationDate

					initial value is ExpirationDate

					if (NewExpirationDate entered
					and NewEffectiveDate entered)
						constraint (NewEffectiveDate < NewExpirationDate)
							"NewExpirationDateMustBeAfterNewEffectiveDate"

				NewReviewDate
				
					initial value is ContractReviewDate

				LineUpdateOption
					initial value is 2
					default to 2

			Action Rules

				constraint (NewExpirationDate != ExpirationDate
				or          NewEffectiveDate  != EffectiveDate
				or          NewReviewDate 	  != ContractReviewDate)
					"MustEnterSomeNewValueThatIsDifferentToUpdateDates"

				if (EffectiveDate entered)
					constraint (NewEffectiveDate entered)
						"MustEnterANewEffectiveDate"				
				
				if (IsManufacturerOrDistributorContract
				and ExpirationDate entered)
					constraint (NewExpirationDate entered)
						"MustEnterExpirationDateForManufacturerOrDistributorContract"

				if (ExpirationDate entered
				and NewExpirationDate !entered
				and !IsManufacturerOrDistributorContract)
					confirmation required
						"ThisContractWillNotHaveAnExpirationDate;DoYouWantToContinue?"				
				
				if (NewEffectiveDate entered
				and NewExpirationDate entered
				and LineUpdateOption = 3)
					constraint (NewEffectiveDate !> ExpirationDate
					and         NewExpirationDate !< EffectiveDate)
						"IfNotUpdatingLinesNewContractDatesCannotBeCompletelyOutsideOldDates"

				if (ManufacturerOrDistributor.DistributorContract)
					for each OpenManufacturerContractForDistContractRel
						if (each.ManufacturerContractNumber.ExpirationDate entered
						and NewEffectiveDate entered)
							constraint (each.ManufacturerContractNumber.ExpirationDate > NewEffectiveDate)
								"NewEffectiveDateMustBePriorToExpirationDateForManufacturerContract<each.ManufacturerContractNumber>"
						if (each.ManufacturerContractNumber.EffectiveDate entered 
						and NewExpirationDate entered)
							constraint (each.ManufacturerContractNumber.EffectiveDate < NewExpirationDate)
								"NewExpirationDateMustBeAfterEffectiveDateForManufacturerContract<each.ManufacturerContractNumber>"

				if (ManufacturerOrDistributor.ManufacturerContract)
					for each AttachedManufacturerContractsRel
						if (each.Contract.ExpirationDate entered
						and NewEffectiveDate entered)
							constraint (each.Contract.ExpirationDate > NewEffectiveDate)
								"NewEffectiveDateMustBePriorToExpirationDateForDistributorContract<each.Contract>"
						if (each.Contract.EffectiveDate entered
						and NewExpirationDate entered)
							constraint (each.Contract.EffectiveDate < NewExpirationDate)
								"NewExpirationDateMustBeAfterEffectiveDateForManufacturerContract<each.Contract>"

				invoke UpdateContractDates
					invoked.NewEffectiveDate    = NewEffectiveDate
					invoked.NewExpirationDate	= NewExpirationDate
					invoked.NewReviewDate       = NewReviewDate
					invoked.LineUpdateOption    = LineUpdateOption

		UpdateContractDates is an Instance Action 
			restricted
			Parameters
				NewEffectiveDate 	is Date
				NewExpirationDate 	is Date
				NewReviewDate       is Date
				FromUpdateProcess   is Boolean
				FromGHXInterface    is Boolean 
				LineUpdateOption    is Numeric 1
					States
						UpdateIfCurrentDateSameAsHeaderDate value is 1
						UpdateAll                           value is 2
         				DoNotUpdate                         value is 3

			Action Rules
				LocalEffectiveDate  = EffectiveDate
				LocalExpirationDate = ExpirationDate

				EffectiveDate		= NewEffectiveDate
				if (!FromGHXInterface
				or  (FromGHXInterface
				and  ManufacturerContractCount = 1))
					ExpirationDate	= NewExpirationDate
				ContractReviewDate	= NewReviewDate

				if (EffectiveDate !entered)
					EffectiveDate    = LocalEffectiveDate
				if (FromUpdateProcess
				or  FromGHXInterface)
					if (ExpirationDate !entered)
						ExpirationDate   = LocalExpirationDate
				FromDateChangeAction = true
				include DateEdits

				if (NewEffectiveDate entered
				and NewEffectiveDate != LocalEffectiveDate
				and HeaderCommitmentComponentsEntered)
					LocalInternalChange = true
					LocalChangeDates = true
					include ManageCommitments

				if (NewEffectiveDate entered
				and NewEffectiveDate != LocalEffectiveDate
				and ContractRebateRel exists)
					invoke CreateDueDates ContractRecurringRebateRel

				if (NewExpirationDate entered
				and NewExpirationDate > LocalExpirationDate)
					YellowAlertEmailSent = false
					RedAlertEmailSent    = false

				if (!FromUpdateProcess)
					if  (ContractLinesExist
					and (LocalEffectiveDate != NewEffectiveDate
					or   LocalExpirationDate != NewExpirationDate))
						invoke UpdateEffectiveAndExpirationDate ContractLine
							invoked.PrmContractGroup     				= ContractGroup
							invoked.PrmContract          				= Contract
							invoked.LineUpdateOption                    = LineUpdateOption
							invoked.OldEffectiveDate                    = LocalEffectiveDate
							invoked.OldExpirationDate                   = LocalExpirationDate
							invoked.PrmEffectiveDate     				= EffectiveDate
							invoked.PrmExpirationDate    				= ExpirationDate
							if (HasDistributorContract)
								invoked.PrmManufacturerLineDateChanged 	= true

				if (NewEffectiveDate entered
				and NewEffectiveDate != LocalEffectiveDate
				and UseCommitments
				and ContractStatus.Active)
					make transition to Amendment

		CalculateTotalLineMaximumAmount is an Instance Action  
			restricted

			Action Rules
				if (((TotalLineMaximumAmount + TotalChildMaximumAmount) > MaximumAmount)
				and MaximumAmount > 0)

					if ((ContractSubclassification entered
					and  ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
                    or   ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)

						if (CreateCommitments.Header
						and HasBeenActivated)
							constraint (NoUnreleasedInvoiceDetailsExist)
								"CannotChangeCommitmentInformationWhenRelatedUnreleasedInvoiceDetailsExist"

						MaximumAmount = TotalLineMaximumAmount + TotalChildMaximumAmount

						if (ParentContract entered)
							invoke CalculateTotalChildMaximumAmount ParentContractRel

						if (HeaderCommitmentComponentsEntered)
							invoke UpdateReportCurrencyAmountInstance
							include ManageCommitments

					else
						if (ParentContract entered
						and MaximumAmount entered
						and ParentContractRel.MaximumAmount entered)
							constraint ((MaximumAmount - old MaximumAmount + ParentContractRel.TotalChildMaximumAmount + ParentContractRel.TotalLineMaximumAmount) <= ParentContractRel.MaximumAmount)
								"MaximumAmountChangeWillCauseTotalChildMaximumAmountPlusTotalLineMaximumAmountOnParentContractToExceedMaximumAmountOnParentContractOf<ParentContractRel.MaximumAmount>"

		CalculateAllTotalChildAmounts is a Set Action
			restricted
			Parameters
				ContractGroup

			Parameter Rules
				ContractGroup
					required

			Instance Selection
				where (ContractGroup = ContractGroup
				and    HasChild)

			Action Rules

				Instance Rules

					invoke CalculateTotalChildMaximumAmount

		CalculateTotalChildMaximumAmount is an Instance Action
			restricted
			Action Rules
				TotalChildMaximumAmount = sum ChildContractRel.MaximumAmount
				invoke CalculateTotalLineMaximumAmount

		UpdateVendorOnOpenRequisitionLines is an Instance Action
			restricted
			Parameters
				NewVendor      	is a Vendor
				NewPurchaseFrom is a PurchaseFromLocation

			Action Rules
				for each OpenSupplierChangeRequisitionLinesRel
					if (each.Status = 9) 
						invoke UpdateNoEdits each.PurchaseOrderInterfaceRel
							invoked.Vendor 				 = NewVendor
							invoked.PurchaseFromLocation = NewPurchaseFrom
					else
						invoke UpdateNoEdits each
							invoked.Vendor 				 = NewVendor
							invoked.PurchaseFromLocation = NewPurchaseFrom

		CreateChangeOrder is an Instance Action
			valid when (CanCreateChangeOrder)
			Parameters
				ParmNumber             is Alpha 20
					default label is "Number"
				ParmTitle              is a CommentName
					default label is "Title"
				ParmDescription        is Text
					default label is "Description"
				ParmDate               is Date
					default label is "Date"
				ParmDocument           is an Attachment
					default label is "Document"
				ParmSubcontractor      is a ContractSubcontractor
					default label is "Subcontractor"
				ParmAddendumAmendment  is Numeric 1
					default label is "AddendumOrAmendment"
					States
						Addendum       value is 1
						Amendment      value is 2
				ParmCommitAllowance    is Boolean
					default label is "CommitNewAllowance"

			Parameter Rules
				ParmTitle
					required

				ParmAddendumAmendment
					initial value is ChangeOrderContractStatus
					if (!ContractStatus.Amendment
					and !ContractStatus.Addendum)
						required
							"MustEnterAddendumOrAmendment"

			Action Rules

				if (ChangeOrdersNotCompleted)
					confirmation required
						"ChangeOrderOrOrdersExistForThisVersionWhichHaveNotBeenCompleted;DoYouWishToContinue?"

				if (ContractStatus.Active)
					if (ParmAddendumAmendment = 1)
						invoke Active.CreateAddendum
					else
					   	invoke Active.CreateAmendment
					if (ContractStatus.Active
					and SupplierExists)
						invoke Active.CreateAddendum

					invoke CreateChangeOrder first ContractVersionDescendingRel
						invoked.ParmNumber          	= ParmNumber
						invoked.ParmTitle				= ParmTitle
						invoked.ParmDescription			= ParmDescription
						invoked.ParmDate            	= ParmDate
						invoked.ParmDocument.File 		= ParmDocument.File
						invoked.ParmDocument.MimeType   = ParmDocument.MimeType
						invoked.ParmDocument.Title      = ParmDocument.Title
						invoked.ParmSubcontractor   	= ParmSubcontractor
						invoked.ParmCommitAllowance 	= ParmCommitAllowance
						if (actor.agent(Employee).Employee.RequesterExists)
							invoked.ParmRequester   	= actor.agent(Employee).Employee
				else
				if (ContractStatus.Addendum
				or  ContractStatus.Amendment)
					if (ChangeOrdersForVersion)
						for each ContractVersionDescendingRel
							invoke Update each
								invoked.VersionCloseStamp = current timestamp
							end for each
						invoke Create ContractVersion set
							invoked.VersionOpenStamp 				= current timestamp
							invoked.ChangeOrderNumber          		= ParmNumber
							invoked.ChangeOrderTitle				= ParmTitle
							invoked.ChangeOrderDescription			= ParmDescription
							invoked.ChangeOrderDate            		= ParmDate
							invoked.ChangeOrderDocument.File		= ParmDocument.File
							invoked.ChangeOrderDocument.MimeType    = ParmDocument.MimeType
							invoked.ChangeOrderDocument.Title       = ParmDocument.Title
							invoked.ChangeOrderSubcontractor        = ParmSubcontractor
							invoked.ChangeOrderCommitAllowance      = ParmCommitAllowance
							if (actor.agent(Employee).Employee.RequesterExists)
								invoked.ChangeOrderRequester   		= actor.agent(Employee).Employee
					else
						invoke CreateChangeOrder first ContractVersionDescendingRel
							invoked.ParmNumber          	= ParmNumber
							invoked.ParmTitle				= ParmTitle
							invoked.ParmDescription			= ParmDescription
							invoked.ParmDate            	= ParmDate
							invoked.ParmDocument.File 		= ParmDocument.File
							invoked.ParmDocument.MimeType   = ParmDocument.MimeType
							invoked.ParmDocument.Title      = ParmDocument.Title
							invoked.ParmSubcontractor   	= ParmSubcontractor
							invoked.ParmCommitAllowance 	= ParmCommitAllowance
							if (actor.agent(Employee).Employee.RequesterExists)
								invoked.ParmRequester		= actor.agent(Employee).Employee	

		SupplierCreateChangeOrder is an Instance Action
			valid when (SupplierCanCreateChangeOrder)
			Parameters
				ParmNumber             is Alpha 20
					default label is "Number"
				ParmTitle              is a CommentName
					default label is "Title"
				ParmDescription        is Text
					default label is "Description"
				ParmDate               is Date
					default label is "Date"
				ParmDocument           is an Attachment
					default label is "Document"
				ParmSubcontractor      is a ContractSubcontractor
					default label is "Subcontractor"

			Parameter Rules
				ParmTitle
					required

			Action Rules
				LocalFromSupplierChangeOrder = true 
				if (ChangeOrdersNotCompleted)
					confirmation required
						"ChangeOrderOrOrdersExistForThisVersionWhichHaveNotBeenCompleted;DoYouWishToContinue?"

				if (ContractStatus.Active)
					if (ChangeOrderContractStatus = 2)
						invoke Active.CreateAmendment 
					else 
					if (ChangeOrderContractStatus = 1)
						invoke Active.CreateAddendum 
					else		
						invoke Active.CreateAddendum

					invoke CreateChangeOrder first ContractVersionDescendingRel
						invoked.ParmNumber          = ParmNumber
						invoked.ParmTitle			= ParmTitle
						invoked.ParmDescription		= ParmDescription
						invoked.ParmDate            = ParmDate
						invoked.ParmDocument.File 	= ParmDocument.File
						invoked.ParmSubcontractor   = ParmSubcontractor
						invoked.ParmSupplier    	= actor.agent(SupplierSourceId).Supplier
						invoked.ParmSupplierContact	= actor.agent(SupplierSourceId).SupplierSourceId
				else
				if (ContractStatus.Addendum
				or  ContractStatus.Amendment)
					if (ChangeOrdersForVersion)
						for each ContractVersionDescendingRel
							invoke Update each
								invoked.VersionCloseStamp = current timestamp
							end for each
						invoke Create ContractVersion set
							invoked.VersionOpenStamp 				= current timestamp
							invoked.ChangeOrderNumber          		= ParmNumber
							invoked.ChangeOrderTitle				= ParmTitle
							invoked.ChangeOrderDescription			= ParmDescription
							invoked.ChangeOrderDate            		= ParmDate
							invoked.ChangeOrderDocument.File		= ParmDocument.File
							invoked.ChangeOrderDocument.MimeType    = ParmDocument.MimeType
							invoked.ChangeOrderDocument.Title       = ParmDocument.Title
							invoked.ChangeOrderSubcontractor        = ParmSubcontractor
							invoked.ChangeOrderSupplier    			= actor.agent(SupplierSourceId).Supplier
							invoked.ChangeOrderSupplierContact		= actor.agent(SupplierSourceId).SupplierSourceId
							invoked.FromSupplierChangeOrder     	= true
					else
						invoke CreateChangeOrder first ContractVersionDescendingRel
							invoked.ParmNumber          = ParmNumber
							invoked.ParmTitle			= ParmTitle
							invoked.ParmDescription		= ParmDescription
							invoked.ParmDate            = ParmDate
							invoked.ParmDocument.File 	= ParmDocument.File
							invoked.ParmSubcontractor   = ParmSubcontractor
							invoked.ParmSupplier    	= actor.agent(SupplierSourceId).Supplier
							invoked.ParmSupplierContact	= actor.agent(SupplierSourceId).SupplierSourceId

		ChangeSupplierAndVendor is an Instance Action
			valid when (CanChangeSupplier)
			Parameters
				ParmNewSupplier 				is a Supplier
					default label is "NewSupplier"
				ParmNewSupplierContact          is a SupplierSourceId
					default label is "NewSupplierContact"
				ParmNewVendor                   is a Vendor
				ParmNewPurchaseFrom             is a PurchaseFromLocation
					default label is "NewPurchaseFrom"
				InactivateOldVendorItems 		is Boolean
				InactivateOldSupplier    		is Boolean
				UpdateVendorOnRequisitionLines 	is Boolean
				ChangeReplenishmentVendor       is Boolean
					default label is "ChangeVendorOnAllReplenishmentItems"
				FromGPOInterface                is Boolean

			Parameter Rules

				ParmNewSupplier
					required
						"MustEnterANewSupplier"
					constraint (ParmNewSupplier != Supplier)
						"NewSupplierCannotBeTheSameAsSupplier"
					constraint (ParmNewSupplier.Active)
						"NewSupplierCannotBeInactive"
					constraint (!SupplierOriginatedContract)
						"CannotChangeSupplierOnContractCreatedBySupplier"

					if (HasGPORelatedContract
					and !FromGPOInterface)
						confirmation required
							"ThisContractWasOriginatedFromA_GPO;ItIsRecommendedToMakeSupplierAndVendorChangesFromTheGPOContractMenu;DoYouWantToContinue?"

					if (ContractSource.Event
					and !ServicePurchaseType)
						cannot be changed
							"SupplierCannotBeChangedOnContractsCreatedFromSourcingEvents"

					if (ContractStatus.Active)
						constraint (ParmNewSupplier.Vendor entered)
							"NewSupplierMustBeAssociatedWithAVendorIfContractIsActive"

				ParmNewSupplierContact
					required
					initial value is SupplierSourceId
					default to SupplierSourceId

				ParmNewPurchaseFrom

					LocalNewVendor			= ParmNewSupplier.Vendor
					LocalNewPurchaseFrom    = ParmNewPurchaseFrom
					if (ParmNewPurchaseFrom entered)
						constraint (NewPurchaseFromLocationExists)
							"POPurchaseFrom:<ParmNewPurchaseFrom>DoesNotExist"
				ParmNewVendor

					initial value is ParmNewSupplier.Vendor
					default to ParmNewSupplier.Vendor

				ChangeReplenishmentVendor
					if (ChangeReplenishmentVendor = true)
						confirmation required
							"AllItemReplenishmentSourceRecordsRelatedToContractLinesWillHaveTheirVendorChangedToTheNewVendor;DoYouWantToContinue?"

			Action Rules

				invoke Create ContractVendorChange
					invoked.ContractGroup   	= ContractGroup
					invoked.Contract        	= Contract
					invoked.OldSupplier     	= Supplier
					invoked.NewSupplier     	= ParmNewSupplier
					invoked.ChangeDateAndTime 	= current timestamp
					invoked.OldVendor           = Vendor
					invoked.NewVendor	        = ParmNewSupplier.Vendor

				if (UpdateVendorOnRequisitionLines)
					invoke UpdateVendorOnOpenRequisitionLines
						invoked.NewVendor   	= ParmNewSupplier.Vendor
						invoked.NewPurchaseFrom	= ParmNewPurchaseFrom

				if (InactivateOldSupplier)
					invoke InactivateSupplier Supplier

				if (ChangeReplenishmentVendor)
					invoke MassUpdateItemReplenishmentSourceFromContract ItemReplenishmentSource
						invoked.ParmContractGroup   = ContractGroup
						invoked.ParmContract        = Contract
						invoked.CurrentVendor       = Vendor
						invoked.CurrentPurchaseFrom = ApPoPurchaseFrom.PurchaseFromLocation
						invoked.NewVendor           = ParmNewSupplier.Vendor
						invoked.NewPurchaseFrom     = ParmNewPurchaseFrom

				LocalVendor 							= Vendor
				Supplier 								= ParmNewSupplier
				SupplierSourceId                        = ParmNewSupplierContact
				Vendor   								= ParmNewSupplier.Vendor
				ApPoPurchaseFrom.PurchaseFromLocation 	= ParmNewPurchaseFrom
				initialize ApPoPurchaseFrom.VendorLocation
				if (LocalVendor != Vendor)
					invoke FastUpdate ContractRebate set
						invoked.Vendor = Vendor
					if ((NonServicePurchaseType
					or   IsManufacturerContract)
					and  Vendor entered)
						invoke ChangeVendorItemCheck ContractLine
							invoked.PrmContractGroup  		= ContractGroup
							invoked.PrmContract       		= Contract
							if (Contract.HasBeenActivated)
								invoked.CreateNewVendorItems = true
							invoked.InactivateOldVendorItems = InactivateOldVendorItems
							invoked.OldVendor               = LocalVendor
					invoke CheckLineSuggestedItems ContractLine
						invoked.ParmContractGroup = ContractGroup
						invoked.ParmContract      = Contract
					invoke UpdateVendor ContractLineMember
						invoked.PrmContractGroup     = ContractGroup
						invoked.PrmContract          = Contract
						invoked.PrmVendor            = Vendor
					if (ContractPreferredManufacturerRel exists)
						invoke UpdateVendor ContractPreferredManufacturer
							invoked.PrmContractGroup     = ContractGroup
							invoked.PrmContract          = Contract
							invoked.PrmVendor            = Vendor

				invoke Delete ContractExistingDiversityRel
				if (SupplierDiversitySelectionRel exists)
					for each SupplierDiversitySelectionRel
						LocalDiversityCode = each.SupplierDiversityResponse.PayablesDiversityCode
						if (ContractDiversityRel !exists)
							invoke Create ContractDiversity
								invoked.ContractGroup         = ContractGroup
								invoked.Contract              = Contract
								invoked.PayablesDiversityCode = each.SupplierDiversityResponse.PayablesDiversityCode

				if (ContractPurchaseFromRels exists)
					invoke Delete ContractPurchaseFromRels

				if (RelatedContractWithVendorRel exists)
					for each RelatedContractWithVendorRel
						if (!each.RelatedContractType.ChildContract
						and !each.RelatedContractType.ParentContract)
							invoke Update each
								invoked.Supplier 			= Supplier
								invoked.Vendor   			= Vendor
								invoked.FromSupplierChange 	= true

				if 	(ParentContract entered
			    and  ParentContractRelatedDocRel exists)
					for each ParentContractRelatedDocRel 
						invoke Update each
							invoked.Supplier 			= Supplier
							invoked.Vendor   			= Vendor
							invoked.FromSupplierChange 	= true					
				
				if (ParentToChildRelatedDocRel exists)
					for each ParentToChildRelatedDocRel 
						invoke Update each
							invoked.Supplier 			= Supplier
							invoked.Vendor   			= Vendor
							invoked.FromSupplierChange 	= true

				invoke FastUpdateWithoutEdits Contract
					invoked.UpdateContractSearchDocument = true

               	if  (ParentContract entered
                and  ParentContractRelatedDocRel exists)
                    for each ParentContractRelatedDocRel
                        invoke Update each
                            invoked.Supplier            = Supplier
                            invoked.Vendor              = Vendor
                            invoked.FromSupplierChange  = true                  
               
                if (ParentToChildRelatedDocRel exists)
                    for each ParentToChildRelatedDocRel
                        invoke Update each
                            invoked.Supplier            = Supplier
                            invoked.Vendor              = Vendor
                            invoked.FromSupplierChange  = true

				invoke MaintainSupplierAndVendor ContractLine 
					invoked.ParmContractGroup	= ContractGroup 
					invoked.ParmContract        = Contract 

		CreateRelatedParentContract is an Instance Action
			restricted
			run in background

			Action Rules
				invoke CreateRelatedContract RelatedContract
					invoked.ContractGroup	  		   = ContractGroup
					invoked.Contract		  		   = Contract
					invoked.RelatedContractID 		   = ParentContract
					invoked.RelatedContractType		   = WorkingContractType.ParentContract
					invoked.RelatedSupplierName 	   = ParentContractRel.Supplier.SupplierName
					invoked.ManufacturerCodeDivision   = ParentContractRel.ManufacturerCodeDivision
					invoked.Supplier				   = ParentContractRel.Supplier
					invoked.Vendor					   = ParentContractRel.Vendor
					invoked.RelatedContractDescription = ParentContractRel.Description

		UpdateVendorFromSupplier is an Instance Action
			restricted
			Parameters
				NewVendor is a Vendor
			Action Rules
				Vendor = NewVendor
				invoke FastUpdate ContractRebate set
					invoked.Vendor = NewVendor
				if ((HasAPurchaseType
				or   IsManufacturerContract
				and  !ServicePurchaseType)
				and  Vendor entered)
					invoke ChangeVendorItemCheck ContractLine
						invoked.PrmContractGroup  = ContractGroup
						invoked.PrmContract       = Contract
				invoke CheckLineSuggestedItems ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract
				invoke UpdateVendor ContractLineMember
					invoked.PrmContractGroup     = ContractGroup
					invoked.PrmContract          = Contract
					invoked.PrmVendor            = Vendor
				invoke UpdateVendor ContractPreferredManufacturerRel
					invoked.PrmContractGroup     = ContractGroup
					invoked.PrmContract          = Contract
					invoked.PrmVendor            = Vendor
				for each ContractPurchaseFromRels
					invoke Delete each
				if (GPOContractImportRel exists)
					invoke Update GPOContractImportRel
						invoked.Vendor = NewVendor
				invoke MaintainSupplierAndVendor ContractLine
					invoked.ParmContractGroup	= ContractGroup 
					invoked.ParmContract        = Contract 

		ExternalReleaseMembers is an Instance Action
			restricted
			Parameters
				ReleaseDistributorMembers 			is Boolean

			Action Rules
				if (NotClosed
				and CanReleaseMembers)
					LocalExternalRelease = true
					invoke ReleaseMembers
						if (ContractGroup.DoNotAutoCreateDistributorLines = false)
							invoked.ReleaseDistributorMembers = ReleaseDistributorMembers
							if (IsManufacturerContract
							and ReleaseDistributorMembers = true)
								invoked.PrmManufacturerContract = Contract

		ReleaseMembers is an Instance Action
			valid when (CanReleaseMembers)
			completion message is "ReleaseMembersHasStarted.Check'MyActions'ForCompletion"
			Parameters
				ReleaseDistributorMembers          is Boolean
				FromManufacturerContract           is Boolean
				PrmManufacturerContract            is a Contract

			Action Rules

				if (IsDistributorContract)
					if (PrmManufacturerContract entered)
						LocalContract = PrmManufacturerContract
						constraint (NumberOfUnreleasedPricingMembersForAContract < 501)
							"CannotReleaseMoreThan500MembersAtOnceOnDistributorContract"				
					else
					if (PrmManufacturerContract !entered)
						constraint (NumberOfUnreleasedPricingMembers < 501)
							"CannotReleaseMoreThan500MembersAtOnce;UseReleaseMembersActionForManufacturerContracts"
				else
				if (IsManufacturerContract)		
					constraint (NumberOfUnreleasedTierMembers < 501)
						"CannotReleaseMoreThan500MembersAtOnce"

				if (ManufacturerLinkedToGPOImportContract
				and !LocalExternalRelease)
					constraint (!HasImportLinesForCreation)
						"CannotReleaseMembersUntilGPOInterface<DerivedGPOContract>HasCreatedAllContractLines;RunTheProcessContractLineUpdatesActionFromTheInterfaceRecordPriorToReleaseMembers"
				if (HasAPurchaseType)
					constraint (Vendor entered)
						"AVendorMustBeAssociatedWithTheContractSupplierForAContractUsedForPurchasing"
				constraint (!ContractStatus.Closed)
					"ContractStatusCannotBeClosedToReleaseMembers"
				constraint (ContractLine set exists)
					"MustHaveAtLeastOneContractLine"
				if (ReleaseDistributorMembers)
					for each DistributorContractUnreleasedPricingMemberRel
						constraint (each.PricingIdentifier entered)
							"PricingIdentifierNotAssignedToAllDistributorContractPricingMembersOnDistributorContract<each.Contract>"
				if (IsDistributorContract)
					if (PrmManufacturerContract !entered)
						constraint (NoPricingMemberRel not exists)
							"PricingIdentifierNotAssignedToAllContractPricingMembers"
						for each OpenManufacturerContractForDistContractRel
							if (!each.HasLines)
								confirmation required 
									"ManufacturerContract<each.ManufacturerContractNumber>HasNoLinesOnThisDistributorContract;DoYouWantToContinue?"
							if (!each.HasMembers)
								confirmation required 
									"ManufacturerContract<each.ManufacturerContractNumber>HasNoDistributorPricingMembersOnThisDistributorContract;DoYouWantToContinue?"
						for each ManufacturerPricingMembersRel
							if (FromManufacturerContract = false)
								constraint (each.ManufacturerMemberReleased)
									"MembersForManufacturerContract<each.MfgContractTierInfo.MfgContract>AreNotReleased;CannotReleaseMembersForDistributorContract"
					else 
					if (PrmManufacturerContract entered)
						LocalManufacturerContract = PrmManufacturerContract 
						constraint (NoPricingMemberManufRel not exists)
							"PricingIdentifierNotAssignedToAllContractPricingMembers"						
						for each OpenManufacturerContractForDistContractManufRel
							constraint (each.HasLines)
								"ManufacturerContract<each.ManufacturerContractNumber>HasNoLinesOnThisDistributorContract"
						for each OpenManufacturerContractForDistContractManufRel
							constraint (each.HasMembers)
								"ManufacturerContract<each.ManufacturerContractNumber>HasNoDistributorPricingMembersOnThisDistributorContract"
				else
					constraint (NoTierMemberRel not exists
					or          MultiplePriceProgram)
						"TiersNotAssignedToAllContractMembers"
					constraint (!TierMemNoPurchaseMethodRels exists)
						"MustSetPurchaseMethodOnAllTierMembers"
					if (ContractTierNonFixedRel exists)
						constraint (!FixedTiers)
							"CannotMixFixedAndNonFixedTiers"


				BackgroundGroup = ContractGroup + Contract
				invoke BatchReleaseMembersArray ContractLine in background group(BackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmContractGroup			= ContractGroup
					invoked.PrmContract					= Contract
					invoked.PrmManufacturerContract     = PrmManufacturerContract
					invoked.ReleaseDistributorMembers   = ReleaseDistributorMembers

				LocalReleaseDistributorMembers = false

		NotifyPOContract is an Instance Action
			restricted
			Parameters
				PrmTotalContractAmount 	is an InternationalAmount
				PrmCompany 				is a PurchasingCompany
				PrmPurchaseFromLocation          is Alpha size 22
			Action Rules
				LocalPurchaseFromLocation = PrmPurchaseFromLocation
				if (NotificationPercent <= PercentOrdered)
					trigger "POContractService" PA service
						resume on error
						title is "CO:<PrmCompany>Contract:<Contract>"
						Criteria
							PrmCompany.FinanceEnterpriseGroup
							PrmCompany
						Variables
							PrmCompany
								variable name is Company
							Contract
								variable name is Contract
							ContractGroup
								variable name is ContractGroup
							Description
								variable name is CDescription
							Vendor
								variable name is Vendor
							PrmPurchaseFromLocation
								variable name is PurchaseFromLocation
							MaximumAmount
								variable name is MaximumAmount
							AmountOrdered
								variable name is OrderedAmount
							AmountRemaining
								variable name is AmountRemaining
							NotificationPercent
								variable name is NotificationPercent
							VendorAgreementReference
								variable name is VendorAgreementReference

					invoke TriggerPOContractPulseAlert
						invoked.PrmPulseAlert = "FSM_ION_POContractNotifyAlert"

		UpdateBudgetResults is an Instance Action
			restricted
			Parameters
				ParmSuccess    is Boolean
			Action Rules
				if (ContractVersionsForChangeOrderBudgetEditRel !exists)
					if (ParmSuccess = true)
						BudgetEditProcessing = BudgetEditProcessing.Success 
						if (ContractStatus.ReadyToActivate)
							invoke ReadyToActivate.ActivateContractHeader
						else
						if (ContractStatus.Draft)
							if (RenewalContract)
								invoke Draft.RenewalReleaseActivateHeader
							else
								invoke Draft.FinalRelease
						else
						if (ContractStatus.Addendum)
							invoke Addendum.FinalRelease
						else
						if (ContractStatus.Amendment)
							invoke Amendment.FinalRelease
					else
						BudgetEditProcessing = BudgetEditProcessing.Failure 
						if (ContractStatus.ReadyToActivate)
							invoke ReadyToActivate.SetActivationInProgressFalse
				else
				if (ContractVersionsForChangeOrderBudgetEditRel exists)

					invoke FinishSubmit first ContractVersionsForChangeOrderBudgetEditRel

		CreateContractDocument is an Instance Action
			valid when (ShowCreateContractDocument)

			Action Rules

				for each ContractTermsByDisplayRel
					invoke UpdateDisplayStringValues each

				if (UseIDM
				or  IsUsingIDMTemplate)
					if (ContractDocumentIDMTemplate !entered)
						if (ContractSubclassification entered)
							ContractDocumentIDMTemplate = ContractSubclassification.ContractDocumentIDMTemplate
						else
							ContractDocumentIDMTemplate = ContractClassification.ContractDocumentIDMTemplate

					constraint (ContractDocumentIDMTemplate entered)
						"IDMTemplateIsRequiredIfContractClassificationUsingIDM"


					IDMDocumentSequence += 1
					invoke CreateAndSendContractDocToIDM
				else
					constraint (ContractDocumentTemplate != blank)
						"ADocumentTemplateIsRequired"

					invoke Create ContractDocument
						invoked.ContractGroup			= ContractGroup
						invoked.Contract				= Contract
						invoked.Attachment.File			= ContractDocumentTemplate.ContractDocumentTemplateGroup.File document
						invoked.LatestDocumentRevision	= true
						invoked.LocalContractMain		= true

		CreateDocumentWithFieldsOnly is an Instance Action
			valid when (ShowCreateContractDocument)

			Action Rules

				if (UseIDM
				or  IsUsingIDMTemplate)
					if (ContractDocumentIDMTemplate !entered)
						if (ContractSubclassification entered)
							ContractDocumentIDMTemplate = ContractSubclassification.ContractDocumentIDMTemplate
						else
							ContractDocumentIDMTemplate = ContractClassification.ContractDocumentIDMTemplate

					constraint (ContractDocumentIDMTemplate entered)
						"IDMTemplateIsRequiredIfContractClassificationUsingIDM"


					IDMDocumentSequence += 1
					invoke CreateAndSendContractDocToIDM
				else
					constraint (ContractDocumentTemplate != blank)
						"ADocumentTemplateIsRequired"

					invoke Create ContractDocument
						invoked.ContractGroup			= ContractGroup
						invoked.Contract				= Contract
						invoked.Attachment.File			= ContractDocumentTemplate.ContractDocumentTemplateGroup.File document
						invoked.LatestDocumentRevision	= true
						invoked.LocalContractMain		= true

				if (FromMatrixApproval = true)
					FromMatrixApproval = false 		

		CreateContractDocumentFromVersion is an Instance Action
			restricted
			Action Rules
				invoke Create ContractDocument
					invoked.ContractGroup			= ContractGroup
					invoked.Contract				= Contract
					invoked.Attachment.File			= ContractDocumentTemplate.ContractDocumentTemplateGroup.File document
					invoked.LatestDocumentRevision	= true
					invoked.LocalContractMain		= true
					invoked.FullVersion             = CurrentVersionForChangeOrder
					invoked.LocalChangeOrder        = true

		CreatePurchaseFromsForParticipants is an Instance Action
    		valid when (CanCreatePurchaseFromsAndHasParticipants)
			default label is "CreatePurchaseFroms"
			Action Rules
				if (ContractParticipantsExist)
					invoke CreateParticipantPurchaseFrom ContractParticipant
						invoked.PrmContractGroup 	= ContractGroup
						invoked.PrmContract			= Contract
				else
				if (ContractTierMembersExist)
					invoke CreateMemberPurchaseFrom ContractTierMember
						invoked.PrmContractGroup 	= ContractGroup
						invoked.PrmContract			= Contract
				else
				if (ContractPricingMembersExist)
					invoke CreateMemberPurchaseFrom ContractDistributorPricingMember
						invoked.PrmContractGroup 	= ContractGroup
						invoked.PrmContract			= Contract

		CreateContractPurchaseFromWithSupplier	is an Instance Action
			restricted
			Action Rules
				for each SupplierPurchaseFromRels
					LocalCompany			= each.SupplierPurchaseFrom.ParticipantLocation.Company
					LocalInventoryLocation 	= each.SupplierPurchaseFrom.ParticipantLocation.Location
					LocalRequestingLocation	= each.SupplierPurchaseFrom.ParticipantLocation.RequestingLocation
					LocalPurchaseFrom 		= each.PurchaseFrom
					if (!ContractPurchFromRel exists)
						invoke Create ContractPurchaseFrom
							invoked.AutoCreate													= true
							invoked.ContractGroup 												= ContractGroup
							invoked.Contract 													= Contract
							invoked.ContractPurchaseFrom.ParticipantLocation.Company    	  	= each.SupplierPurchaseFrom.ParticipantLocation.Company
							invoked.ContractPurchaseFrom.ParticipantLocation.Location			= each.SupplierPurchaseFrom.ParticipantLocation.Location
							invoked.ContractPurchaseFrom.ParticipantLocation.RequestingLocation	= each.SupplierPurchaseFrom.ParticipantLocation.RequestingLocation
							invoked.SupplierVendor												= each.SupplierVendor
							invoked.PurchaseFrom 												= each.PurchaseFrom
							invoked.AllItemTypes												= each.AllItemTypes

		SetCanUseForCostDefaultingToYes is an Instance Action
			valid when (DisplaySetCanUseForCostDefaulting)
			Action Rules

				invoke SetCanUseForCostDefaultingTrue ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract

		SetCanUseForCostDefaultingToYesManufacturerDistributor is an Instance Action
			valid when (DisplaySetCanUseForCostDefaultingManufacturerDistributor)
			default label is "SetCanUseForCostDefaultingToYes"
			
			Parameters 
				ParmUpdateSpecialsManufacturer  	is Numeric 1
					States
						NotApplicable           		  		value is 0
						AllowCostDefaultingOnSpecialItems 		value is 1
						DoNotAllowCostDefaultingOnSpecialItems 	value is 2	
				ParmSetLinesForDistributorContract 	is Numeric 1
					States 
						SetAllLinesToYes                        value is 0
						SetOnlyManufacturerRelatedLines         value is 1
						SetOnlyDistributorRelatedLines          value is 2 			
			
			Parameter Rules 
				ParmUpdateSpecialsManufacturer
					initial value is 1 				
			Action Rules

				invoke SetCanUseForCostDefaultingTrue ContractLine
					invoked.ParmContractGroup 					= ContractGroup
					invoked.ParmContract      					= Contract
					if (ParmUpdateSpecialsManufacturer = 1)
						invoked.ParmUpdateSpecials				= true
					invoked.ParmSetLinesForDistributorContract	= ParmSetLinesForDistributorContract

		SetCanUseForCostDefaultingToNo is an Instance Action
			valid when (DisplaySetCanUseForCostDefaultingNo)
			Action Rules
				invoke SetCanUseForCostDefaultingFalse ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract

		SetPreferredLineToYes is an Instance Action
			valid when (DisplaySetPreferredLine)
			Action Rules
				if (!IsManufacturerOrDistributorContract)
					constraint (ContractParticipantsRel exists)
						"ContractMustHaveParticipantsToHavePreferredLines"

				invoke SetPreferredLineTrue ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract

		SetPreferredLineToNo is an Instance Action
			valid when (DisplaySetPreferredLine)
			Action Rules
				invoke SetPreferredLineFalse ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract

		SetBillCodeForSpecials is an Instance Action
			valid when (CanSetBillCode)
			Parameters
				ParmBillCode is a ConsignCode
				ParmDfltBillCode is Boolean

			Action Rules
				invoke SetBillCode ContractLine
					invoked.ParmContractGroup	= ContractGroup
					invoked.ParmContract		= Contract
					invoked.ParmBillCode		= ParmBillCode

				if (ParmDfltBillCode)
					ConsignCode					= ParmBillCode

		SetCanUseForCostDefaultingToYesFromMember is an Instance Action
			restricted
			Action Rules
				invoke SetCanUseForCostDefaultingTrue ContractLine
					invoked.ParmContractGroup  = ContractGroup
					invoked.ParmContract       = Contract
					if (TransientUpdateSpecials = true)
						invoked.ParmUpdateSpecials = true

		SetCanUseForCostDefaultingToNoFromMember is an Instance Action
			restricted
			Action Rules
				invoke SetCanUseForCostDefaultingFalse ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract
					invoked.FromMember        = true

		SetCreateDistributorContractLineToYes is an Instance Action
			restricted
			Action Rules
				invoke SetCreateDistributorContractLine ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract
					invoked.ParmTrueFalse     = true

		SetCreateDistributorContractLineToNo is an Instance Action
			restricted
			Action Rules
				invoke SetCreateDistributorContractLine ContractLine
					invoked.ParmContractGroup = ContractGroup
					invoked.ParmContract      = Contract
					invoked.ParmTrueFalse     = false

		CreateProcurementTemplateFromContract is an Instance Action
			valid when (IsValidForProcurementTemplate)
			Parameters
				PrmProcurementTemplate              is like ProcurementTemplate
				PrmDescription                      is a Description
				QuantityOfOne                       is Boolean
				ParmAutoUpdateFromContract          is Boolean
				CreateParticipantForVendor          is Boolean				

			Action Rules
				LocalProcurementTemplate           = PrmProcurementTemplate
				invoke CreateFromContract ProcurementTemplate
					invoked.ProcurementGroup       		= ContractGroup
					invoked.Contract               		= Contract
					invoked.ProcurementTemplate    		= PrmProcurementTemplate
					invoked.Description            		= PrmDescription
					invoked.AutoUpdateFromContract 		= ParmAutoUpdateFromContract
					invoked.TransientParticipantVendor	= CreateParticipantForVendor
					invoked.Active                 		= true

				invoke CreateProcurementTemplateLinesFromContract ContractLine
					invoked.PrmContractGroup	   = ContractGroup
					invoked.PrmContract			   = Contract
					invoked.PrmProcurementTemplate = PrmProcurementTemplate
					invoked.QuantityOfOne          = QuantityOfOne

		SelectContractForRebate is an Instance Action
			valid when (NotContractTemplate)
			Parameters
   				ContractRebateType			is AlphaUpper size 25
   				ContractRebateQualifier		is Numeric size 4
   				RebateContract				is Numeric size 15
			Parameter Rules
				ContractRebateType
					required
				ContractRebateQualifier
					required
				RebateContract
					required
			Action Rules
				LocalContractRebate.ContractGroup			= ContractGroup
				LocalContractRebate.Contract	            = Contract
				LocalContractRebate.ContractRebateType      = ContractRebateType
				LocalContractRebate.ContractRebateQualifier = ContractRebateQualifier
				LocalContractRebate.RebateContract			= RebateContract
				constraint (RebateContractRebateRel.Active)
					"ContractRebateMustBeActiveToAddRebateQualifierContracts"
				if (!RebateQualifierContractRel exists)
					invoke Create RebateQualifierContract
						invoked.ContractGroup			= ContractGroup
						invoked.Contract				= RebateContract
						invoked.ContractRebateType		= ContractRebateType
						invoked.ContractRebateQualifier = ContractRebateQualifier
						invoked.OriginalContractNumber	= Contract

		RollSpreadDatesSet is a Set Action 
			restricted 
			Parameters 
				PrmContractGroup        is a ContractGroup 
				CurrentYearEndDate		is Date
				ProposedNewSpreadDate   is Date		
				PrmHeaderUniqueID       is UniqueID 

			Instance Selection 
				where (PrmContractGroup	= ContractGroup
				and    SpreadOpenCommitments
				and    ProposedNewSpreadDate < ExpirationDate
				and   (PrmHeaderUniqueID = UniqueID
				or     PrmHeaderUniqueID !entered))

			Action Rules 
				Instance Rules 

					invoke RollSpreadDates 
						invoked.CurrentYearEndDate 		= CurrentYearEndDate
						invoked.ProposedNewSpreadDate	= ProposedNewSpreadDate
						invoked.FromGLCommit            = true

		RollSpreadDates is an Instance Action 
			valid when (SpreadOpenCommitments)
			Parameters
				CurrentYearEndDate		is Date
				ProposedNewSpreadDate   is Date
				FromGLCommit            is Boolean

			Parameter Rules

				CurrentYearEndDate 
					required 
				
				ProposedNewSpreadDate 
					required 
					constraint (ProposedNewSpreadDate < ExpirationDate)
						"NewSpreadDateMustBePriorToContractExpirationDate"
					constraint (ProposedNewSpreadDate > CurrentYearEndDate)
						"NewSpreadDateMustBeAfterCurrentYearEndDate"
			Action Rules 
				LocalLedger  	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CoreLedger
				LocalSpreadDate	= ProposedNewSpreadDate
				LocalEndDate    = NewDerivedEntityCalendarPeriod
				if (!FromGLCommit)
					constraint (NewDerivedEntityCalendarPeriod entered
					and         EntityLedgerPeriodRel exists)
						"CalendarYearNotProperlyDefinedForTheProposedNewSpreadDate"	
				if (CreateCommitments.LineSpread)
					invoke RollSpreadDatesForYearEnd ContractLineDistributionSpread
						invoked.ParmContractGroup		= ContractGroup
						invoked.ParmContract        	= Contract 
						invoked.CurrentYearEndDate  	= CurrentYearEndDate
						invoked.ProposedNewSpreadDate	= ProposedNewSpreadDate
						invoked.FromGLCommit            = FromGLCommit 
				else 
				if (CreateCommitments.HeaderSpread)
					invoke RollSpreadDatesForYearEnd ContractSpread
						invoked.ParmContractGroup		= ContractGroup
						invoked.ParmContract        	= Contract 
						invoked.CurrentYearEndDate  	= CurrentYearEndDate
						invoked.ProposedNewSpreadDate	= ProposedNewSpreadDate
						invoked.FromGLCommit            = FromGLCommit 

		CloseCommitments is an Instance Action
			completion message is "CommitmentsClosed"
			valid when (OpenCommitmentsExist)

			Action Rules

				CommitmentsClosed = true

				if (CommitmentAccount.Project entered)
					TransientExchangeDate = EffectiveDate
					LocalPostingDate  = EffectiveDate
				invoke UpdateReportCurrencyAmountInstance

			Exit Rules

				if (CreateCommitments.Header)
					LocalCloseCommitment = true
					include ManageCommitments
				else
				if (CreateCommitments.HeaderSpread)
					for each ContractSpreadRel
						invoke CloseSpreadCommitments each
				else
				if (CreateCommitments.Line
				or  CreateCommitments.LineSpread)
					for each CommittedContractLinesRel
						invoke CloseCommitments each
							invoked.FromHeaderCloseCommitment = true

				invoke Delete WarningBudgetEditErrorRel
				invoke Delete BudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				invoke Delete BudgetRebuildBTGTRel

		UpdateReportCurrencyAmount is an Update Action    
			restricted

		UpdateReportCurrencyAmountInstance is an Instance Action
			restricted

			Action Rules
				initialize ReportCurrencyAmount
				TransientCurrencyTable         						= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
				TransientAccountingEntity      						= CommitmentCompany
				TransientExchangeDate          						= current corporate date
				TransientFromCurrency          						= CurrencyCode
				TransientCurrencyAmount                         	= ChangeOrderAmountRemaining
				ReportCurrencyAmount.ReportAmount1.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFive
				ReportCurrencyAmount.UseDerivedCalculations         = true
				LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete

		RecalculateReportCurrencyAmount is an Instance Action   

			restricted
			Action Rules
				initialize ReportCurrencyAmount
				TransientCurrencyTable         						= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
				TransientAccountingEntity      						= CommitmentCompany
				TransientExchangeDate          						= current corporate date
				TransientFromCurrency          						= CurrencyCode
				TransientCurrencyAmount                         	= MaximumAmount + DerivedCommittedAllowanceTotal
				ReportCurrencyAmount.ReportAmount1.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFive
				ReportCurrencyAmount.UseDerivedCalculations         = true
				LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete

				include ManageCommitments

		FastUpdate is an Update Action
			restricted
			bypass field rules

		FastUpdateWithoutEdits is an Instance Action
			restricted
			Parameters
				ProcessPricingChangesTrue			is Boolean
				HasBeenActivatedTrue				is Boolean
				UpdateSetActionCleanupRunToTrue 	is Boolean
				UpdateLastRebateCalculationRunDate	is Boolean
				UpdateSavedContractLine				is Numeric size 6
				UpdateRemoveFromExpireList          is Boolean
				YellowEmailSent						is Boolean
				RedEmailSent						is Boolean
				UpdateContractSearchDocument        is Boolean
				AllowMultipleUOMsItemmast           is Boolean
				AllowMultipleUOMsSpecial            is Boolean
				UpdateForChangeOrderCommit          is Boolean
				MaxAmountAdjustment                 is an InternationalAmount

			Parameter Rules
			Action Rules
				if (ProcessPricingChangesTrue)
					ProcessPricingChanges 			= true
				if (HasBeenActivatedTrue)
					HasBeenActivated				= true
				if (UpdateLastRebateCalculationRunDate)
					LastRebateCalculationRunDate	= current timestamp
				if (UpdateSavedContractLine entered)
					SavedContractLine = UpdateSavedContractLine
				if (UpdateRemoveFromExpireList = true)
					RemoveFromExpireList 			= true
				if (YellowEmailSent)
					YellowAlertEmailSent			= true
				if (RedEmailSent)
					RedAlertEmailSent				= true
				if (UpdateContractSearchDocument)
					include BuildTextIndexes
				if (AllowMultipleUOMsItemmast)
					UOMSMustMatch                   = true
				if (AllowMultipleUOMsSpecial)
					UOMSMustMatchForSpecials        = true
				if (UpdateForChangeOrderCommit)

					MaximumAmount			       += MaxAmountAdjustment
					if (UseHeaderSpreadCommitments)
						for each ContractSpreadForAmountUpdateRel
							if (current date >= each.SpreadDate)
								invoke Update each
									invoked.SpreadAmount = each.SpreadAmount + MaxAmountAdjustment
								end for each
					if (UseHeaderOnlyCommitments)
						invoke UpdateReportCurrencyAmountInstance
						LocalInternalChange = true
						include ManageCommitments

		ValidateContract is an Instance Action
			restricted
			Parameters
				EditDate is Date
				Source   is Numeric 2
					States
						Requisition      value is 1
						PurchaseOrder    value is 2
						Invoice          value is 3
						BlanketPO        value is 4
						StandingPO       value is 5
				PrmVendor					is like Vendor
				PrmVendorLocation           is like VendorLocation
				PrmStockless                is Boolean
				PrmIgnoreStockless			is Boolean
				PrmSource					is Alpha 100
				POCreation                  is Boolean

			Local Fields
				LocalMessage				is Alpha 100

			Parameter Rules
				PrmStockless


					if (PrmIgnoreStockless not entered)
						if (PrmStockless not entered)
							constraint (not Stockless)
								"CanOnlyUseStocklessContractForStocklessProcessing"

			Action Rules
				LocalMessage = "; " + ContextMessageText + " " + PrmSource
				constraint (!OnHold)
					"CannotUse;ContractIsOnHold<LocalMessage>"
				constraint (ContractStatus.Active or
							ContractStatus.Amendment or
							ContractStatus.Addendum or
						   	(ContractStatus.ReadyToActivate
							and HasBeenActivated))
					"CannotUse;ContractIsInA<ContractStatus>Status<LocalMessage>"
				if (Source.Invoice
				and EditDate entered)
					if (LastInvoiceAllowedDate entered)
						constraint (LastInvoiceAllowedDate >= EditDate)
							"CannotUse;InvoiceDateAfterLastInvoiceAllowedDate<LocalMessage>"
					if (FirstInvoiceAllowedDate entered)
						constraint (EditDate >= FirstInvoiceAllowedDate)
							"CannotUse;InvoiceDateIsBeforeFirstInvoiceAllowedDate<LocalMessage>"
				if (Source.Invoice)
					constraint (!ContractStatus.Closed)
						"ServiceContractCannotBeClosed<LocalMessage>"
					if (!AllowChangeOrder)
						constraint (ContractStatus.Active)
							"ServiceContractMustBeActive<LocalMessage>"
					if (AllowChangeOrder)
						constraint (HasBeenActivated)
							"ServiceContractMustHaveBeenActivated<LocalMessage>"
					constraint (ServicePurchaseType)
						"ContractMustBeAServicePurchaseType<LocalMessage>"
				if (ExpirationDate entered
				and EditDate entered
				and LastInvoiceAllowedDate !entered)
					constraint (EditDate <= ExpirationDate)
						"CannotUse;DateOutsideRangeForContract<LocalMessage>"
				if (FirstInvoiceAllowedDate !entered
				and EditDate entered)
					constraint (EditDate >= EffectiveDate)
						"CannotUse;DateOutsideRangeForContract<LocalMessage>"
				if (PrmVendor entered)
					if ((Source.PurchaseOrder
					or  Source.BlanketPO
					or  Source.StandingPO)
					and !POCreation)
						LocalVendor = PrmVendor
						constraint (PrmVendor = Vendor
						or          EditVendorChangeRel exists)
							"EnteredVendor<PrmVendor>DoesNotEqualCurrentOrPastContractVendor<Vendor><LocalMessage>"
					else
						constraint (PrmVendor = Vendor)
							"EnteredVendor<PrmVendor>DoesNotEqualCurrentContractVendor<Vendor><LocalMessage>"
				if (PrmVendorLocation entered)
					constraint (PrmVendorLocation = ApPoPurchaseFrom.VendorLocation
					or          PrmVendorLocation = ApPoPurchaseFrom.PurchaseFromLocation)
						"EnteredVendorLocation<PrmVendorLocation>DoesNotEqualVendorLocation<ApPoPurchaseFrom.VendorLocation><LocalMessage>"
				if (Source.PurchaseOrder)
					constraint (ContractPurchaseType or CatalogQuotePurchaseType)
						"CanOnlyEnterContractOrCatalogPurchaseType<LocalMessage>"
				if (Source.Requisition)
					constraint (ContractPurchaseType or CatalogQuotePurchaseType or BlanketPurchaseType)
						"CanOnlyEnterContract,Catalog,OrBlanketPurchaseType<LocalMessage>"
				if (Source.BlanketPO)
					constraint (BlanketPurchaseType)
						"CanOnlyEnterBlanketPurchaseTypeForBlanketPO<LocalMessage>"
				if (Source.StandingPO)
					constraint (StandingPurchaseType)
						"CanOnlyEnterStandingPurchaseTypeForStandingPO<LocalMessage>"

		DeletePreferredMfgContract is an Instance Action
			restricted
			Action Rules
				invoke PreferredMfgContractDelete ContractPreferredManufacturerRel
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract 	  = Contract

		HoldContract is an Instance Action
			valid when (CanHold)
			run in foreground
			completion message is "ContractIsOnHold"
			Parameters
				PrmContractGroup    is a ContractGroup
				PrmContract         is a Contract
				PrmHoldCode         is a ProcurementReasonCode
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract

			Action Rules
				ProcurementReasonCode = PrmHoldCode
				OnHold   = true
				invoke HoldAllContractLines ContractLine
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract 	 = Contract
				if (IsManufacturerContract)
					invoke HoldAllRelatedDistributorContractLines ContractLine
						invoked.PrmContractGroup = ContractGroup
						invoked.PrmContract      = Contract

		RemoveContractHold is an Instance Action
			valid when (CanRemoveHold)
			run in foreground
			completion message is "ContractHoldHasBeenRemoved"
			Action Rules
				OnHold = false
				initialize ProcurementReasonCode
				invoke RemoveHoldAllContractLines ContractLine
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract 	  = Contract
				if (IsManufacturerContract)
					invoke RemoveHoldAllRelatedDistributorContractLines ContractLine
						invoked.PrmContractGroup = ContractGroup
						invoked.PrmContract      = Contract

		HoldManufacturerLinesOnly is an Instance Action
			valid when (CanHoldManufacturerLinesOnly)
			completion message is "HoldingManufacturerLinesOnlyHasStarted;Check'MyActions'ForCompletion"
			Parameters
				PrmContractGroup    is a ContractGroup
				PrmContract         is a Contract
				PrmHoldCode         is a ProcurementReasonCode
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract

			Action Rules
				ProcurementReasonCode = PrmHoldCode
				invoke HoldAllManufacturerLinesOnly ContractLine
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract 	 = Contract

		RemoveHoldManufacturerLinesOnly is an Instance Action
			valid when (CanRemoveHoldManufacturerLinesOnly)
			completion message is "RemovingTheHoldFromTheManufacturerLinesOnlyHasStarted;Check'MyActions'ForCompletion"
			Action Rules
				initialize ProcurementReasonCode
				if (HasAPurchaseType
				and HasBeenActivated)
					invoke RemoveHoldAllManufacturerLinesOnly ContractLine
						invoked.PrmContractGroup = ContractGroup
						invoked.PrmContract 	  = Contract

		CloseContractIndirect is an Instance Action 
			restricted 
			Action Rules 
				FromContractCopy = true 
				invoke CloseContract Contract 
		
		CloseContractFromLine is an Instance Action
			restricted
			Action Rules
				FromLineClose = true
				invoke CloseContract Contract

		CloseContract is an Instance Action
			valid when (CanClose)
			subject is ContractClose
			reason code required
			action comment required
			completion message is "ClosingTheContractHasStarted;Check'MyActions'ForCompletion"

			Entrance Rules
				
				if (IsManufacturerContract)
					if (!FromContractCopy)
						constraint (NoUnreleasedDistPoLinesExist)
							"CannotCloseContract,UnreleasedPoLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedPORel.Contract>;Line<first DistContractLinesWithUnreleasedPORel.ContractLine>"
						constraint (NoUnreleasedDistReqLinesExist)
							"CannotCloseContract,UnreleasedRequisitionLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedReqRel.Contract>;Line<first DistContractLinesWithUnreleasedReqRel.ContractLine>"
						constraint (NoUnprocessedDistRequestsExist)
							"CannotCloseContract,UnprocessedPurchaseOrderRequestsExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnprocessedPORel.Contract>;Line<first DistContractLinesWithUnprocessedPORel.ContractLine>"
						invoke CloseAllRelatedDistributorContractLines ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract      = Contract		

			Action Rules
				if (!FromContractCopy)
					constraint (all Contract descendants.ContractStatus = ContractStatus.Closed)
						"CannotCloseContract,DescendantContractsMustBeClosedPriorToClosingThisParentContract"
					constraint (UnreleasedServiceInvoicesRel !exists)
						"CannotCloseContract,UnmatchedInvoicesExistForServiceContract;MustMatchPriorToClosing"
					constraint (UnreleasedPolinesByContractRel !exists)
						"CannotCloseContract,UnreleasedPOLinesExist;MustReleasePriorToClosing;SeeAlertLinks"
					constraint (UnreleasedRequisitionLinesByContractRel !exists)
						"CannotCloseContract,UnreleasedRequisitionLinesExist;MustReleaseAndCreatePOPriorToClosing;SeeAlertLinks"
					constraint (UnprocessedRequestsByContractRel !exists)
						"CannotCloseContract,UnprocessedPurchaseOrderRequestsExist;MustCreatePOAndReleasePriorToClosing;SeeAlertLinks"
				if (!FromContractCopy)
					if (OpenPolinesByContractRel exists)
						confirmation required
							"Warning;OpenPOLinesExistForContract.ContractWillBeClosedAndNoFurtherProcessingOfContractWillBeAllowed-NotEvenReopen.POLinesWillBeAbleToFinishHowever.DoYouWantToContinue?"
					else
						confirmation required
							"Warning;ContractWillBeClosedAndNoFurtherProcessingOfThisContractWillBeAllowed-NotEvenReopen.DoYouWantToContinue?"

				OnHold = false
				if (LastInvoiceAllowedDate > current corporate date)
					LastInvoiceAllowedDate = current corporate date
				if (ContractStatus.Released)
					cancel CMContractAppr process
				if (ContractStatus.FinalApproval)
					cancel CMContFinalAppr process
				if (ContractStatus.Negotiation)
					if (AllowTermUpdatesDuringFinalApproval)
						cancel CMContNegFinalAppr process
					else
						cancel CMContNegFinalApprNoUpdate process
				ContractStatus = ContractStatus.Closed
				ClosedDate = current corporate date
				if (GPOContractImportRel exists)
					invoke ClearContractAndLine ContractLineImport 
						invoked.ParmContractGroup	= ContractGroup
						invoked.ParmContractImport  = GPOContractImportRel.ContractImport
				if (FromLineClose)
					for each GPORelatedContractCreateRel
						invoke Delete each
					for each GPORelatedContractUpdateRel
						invoke Delete each

				if (!FromLineClose)
					if (OpenCommitmentsForContractClose)
						LocalCloseContract = true
						invoke CloseCommitments

					if (GPOContractImportRel exists)
						invoke ClearContractRelatedLineErrors ContractLineImportError 
							invoked.ParmContractGroup	= ContractGroup 
							invoked.ParmContractImport  = GPOContractImportRel.ContractImport 

					invoke CloseAllContractLines ContractLine
						resume on error
						invoked.PrmContractGroup = ContractGroup
						invoked.PrmContract      = Contract

				if (SupplierSourceId.ReceiveEmailNotification
				and !FromProposalReject
				and ContractGroup.SendContractCloseEmail)
					send email
						to SupplierSourceId.EmailAddress
						cc DerivedProxyEmailAddressList
						bcc PrimaryAndSecondaryEmailList
						from PrimaryContactRel.DerivedEmail
						subject "<ContractGroupEmailTemplate2Rel.FinalContractClosedEmailSubject>"
						Contents
							"<ContractGroupEmailTemplate2Rel.FinalContractClosedEmailContent>"

					invoke Create ContractNotificationEmail
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						initialize invoked.ContractDeliverable
						initialize invoked.ContractMilestone
						initialize invoked.SentToMilestoneContact
						initialize invoked.SentToDeliverableContact
						invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
						invoked.SentToCc                        = DerivedProxyEmailAddressList
						invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
						invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
						invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
						invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalContractClosedEmailSubject
						invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalContractClosedEmailContent
						invoked.NotificationType				= 6

				if (ContractGroup.CreateContractCloseMessage
				and !FromProposalReject)
					invoke Create SupplierContactMessage
						invoked.SupplierGroup 					= Supplier.SupplierGroup
						invoked.Supplier 						= Supplier
						invoked.SupplierSourceId				= SupplierSourceId
						invoked.CreationDateTime				= current timestamp
						invoked.MessageTitle					= ContractGroupEmailTemplate2Rel.FinalContractClosedEmailSubject
						invoked.MessageText						= ContractGroupEmailTemplate2Rel.FinalContractClosedEmailContent
						invoked.Status							= 1
						invoked.Priority						= 2
						invoked.SystemGenerated					= true
						invoked.ReleaseStatus					= 2
						invoked.MessageOwner                    = PrimaryContactRel.Contact
						invoked.OriginatingContract             = Contract

			Exit Rules
				invoke PurgeClosedContract MfgContractRel
				if (PreferredContract)
					invoke DeletePreferredMfgContract
				invoke Delete ParticipantGroupContractRel
				if (HasHeaderOnlyAllowances)
					for each ContractHeaderAllowancesRel
						invoke CloseAllowance each

				if (ProcurementTemplateRel exists)
					for each ProcurementTemplateRel
						invoke UpdateFast each
							invoked.Contract = 0
							invoked.Active   = false
				if (ProcurementTemplateLinesExist)
					invoke DeleteOrClearFromContract ProcurementTemplateLine
						invoked.ParmProcurementGroup	= ContractGroup 
						invoked.ParmContract			= Contract
						invoked.DeleteLines 			= true
				if (ContractImportGPOSupplierForThisContractRel exists)
					for each ContractImportGPOSupplierForThisContractRel
						invoke Update each
							initialize invoked.DefaultDistributorContract
				invoke TriggerContractService
				invoke TriggerProcessContractService

		CalculateQualifierUsagePercentagesForOneContract is an Instance Action
			restricted
			Parameters
				PrmContractGroup					is a ContractGroup
				PrmContract							is a Contract
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
					default to ContractGroup
				PrmContract
					initial value is Contract
					default to Contract
			Action Rules
				invoke FindContractPurchaseOrderLines ContractTierMember in foreground
					invoked.PrmContractGroup			= PrmContractGroup
					invoked.PrmContract					= PrmContract

				invoke CalculatePercentOfAllPurchasesForTierMembers ContractTierMember in foreground
					invoked.PrmContractGroup			= PrmContractGroup
					invoked.PrmContract					= PrmContract

		CalculateQualifierUsagePercentagesForContractRange is a Set Action
			Parameters
				PrmContractGroup					is a ContractGroup
				PrmContractRange					is a ContractRange
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
					default to ContractGroup
			Instance Selection
				where (Contract			within PrmContractRange
				and    HasBeenActivated)

			Action Rules
				Instance Rules
					invoke CalculateQualifierUsagePercentagesForOneContract
						invoked.PrmContractGroup			= ContractGroup
						invoked.PrmContract					= Contract

		UpdateDocMgmtSystemURL is a Set Action
			restricted
			Parameters
				PrmContractGroup					is a ContractGroup
				PrmDocMgmtSystemURL					is Alpha size up to 1000
			Parameter Rules
				PrmContractGroup
					required
			Instance Selection
				where (ContractGroup	= PrmContractGroup)
			Action Rules
				Instance Rules
					DocMgmtSystemURL	= PrmDocMgmtSystemURL


		UpdateDistributorContract is an Instance Action
			valid when (ManufacturerModificationsToPush)
			completion message is "UpdateDistributorContractHasStarted.Check'MyActions'ForCompletion."
			Parameters
				UpdateOverrideLandedCost
				FromInterfaceUpdates       is Boolean

			Parameter Rules

				UpdateOverrideLandedCost
					initial value is true

			Action Rules
				constraint (DistributorContractUnreleasedPricingMemberRel !exists)
					"UnreleasedDistributorPricingMembersExistForContract<first DistributorContractUnreleasedPricingMemberRel.Contract>;MustReleasePricingMembersBeforeRunningUpdateDistributorContract"

				invoke UpdateDistributorFromManufacturer ContractLine
					invoked.PrmContractGroup			= ContractGroup
					invoked.PrmContract					= Contract
					invoked.PrmUpdateOverrideLandedCost = UpdateOverrideLandedCost
					invoked.PrmFromInterfaceUpdates     = FromInterfaceUpdates

		CreateMembersForDirectBuy is an Instance Action
			valid when (PricingMembersNeededForDirectBuy)
			completion message is "CreateMembersForDirectBuyHasStarted.Check'MyScheduledActions'ForCompletion."
			Action Rules

				if (NonManufacturerPricingMembersExist)
					for each NonManufacturerPricingMembersRel
						if each.HasLocOrReqLoc
							constraint (!ManufacturerPricingMembersRel.CompanyOnly)
								"CannotProcess;MembersAlreadyExistByLocationOrRequestingLocation;MustAddDistributorMembersAtMemberLevel"
						if each.CompanyOnly
							constraint (!ManufacturerPricingMembersRel.HasLocOrReqLoc)
								"CannotProcess;MembersAlreadyExistForWholeCompany;MustAddDistributorMembersAtMemberLevel"

				invoke CreatePricingMembersForDirectBuy ContractDistributorPricingMember
					invoked.PrmContractGroup     = ContractGroup
					invoked.PrmContract          = Contract

		CreateUpdateContractTermVersion is an Instance Action
			restricted
			Local Fields
				LocalContractTermVersion		is a ContractTermVersion view
				LocalContractTermVersionArticle	is a ContractTermVersionArticle view
				LocalContractTermVersionTerm	is a ContractTermVersionTerm view

			Action Rules
				invoke Create ContractTermVersion
					assign result to LocalContractTermVersion
					invoked.ContractGroup				= ContractGroup
					invoked.Contract					= Contract
					if (AddendumExists)
						invoked.ApprovalStage		= 4
					else
						invoked.ApprovalStage		= 1 	
					invoked.LastAction					= 7		
					invoked.FinalApproverActor	= actor
				for each NonDeletedContractArticlesByDisplayRel
					LocalContractArticleForVersions = each.ContractArticle
					invoke Create ContractTermVersionArticle
						assign result to LocalContractTermVersionArticle
						invoked.ContractGroup				= ContractGroup
						invoked.Contract					= Contract
						invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
						invoked.ContractArticle				= each.ContractArticle
						invoked.Title						= each.Title
						if (PendingArticleUpdateExistsRel exists)
							invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
							invoked.OriginalHeaderText			= each.DerivedPreviousHeaderText
						else
							invoked.HeaderText					= each.HeaderText
							invoked.OriginalHeaderText			= each.HeaderText
						invoked.DisplayOrder				= each.DisplayOrder
					for each each.NonDeletedContractTermsByDisplayRel
						LocalContractTermAndConditionForVersions = each.ContractTermAndCondition
						invoke Create ContractTermVersionTerm
							assign result to LocalContractTermVersionTerm
							invoked.ContractGroup 				= ContractGroup
							invoked.Contract 					= Contract
							invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
							invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
							invoked.ContractArticle				= each.ContractArticle
							invoked.ContractTermAndCondition	= each.ContractTermAndCondition
							if (NonAttachmentPendingContractTermAndConditionUpdateExistRel exists)
								invoked.Title						= each.DerivedCurrentRequestedTitle
								invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
								invoked.Description					= each.DerivedCurrentRequestedDescription
								invoked.OriginalTitle				= each.DerivedPreviousTermTitle
								invoked.OriginalHeaderText			= each.DerivedPreviousTermHeaderText
								invoked.OriginalDescription			= each.DerivedPreviousTermDescription
							else
								invoked.Title						= each.Title
								invoked.HeaderText					= each.HeaderText
								invoked.Description					= each.Description
								invoked.OriginalTitle				= each.Title
								invoked.OriginalHeaderText			= each.HeaderText
								invoked.OriginalDescription			= each.Description
							invoked.DisplayOrder				= each.DisplayOrder
						for each each.ContractTermAndConditionAddAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 3		
								invoked.DisplayOrder				= each.NewAttachmentDisplayOrder
								invoked.Attachment.File				= each.NewAttachment.File
								invoked.Attachment.MimeType			= each.NewAttachment.MimeType
								invoked.Attachment.Title			= each.NewAttachment.Title
								invoked.AttachmentReference			= each.NewAttachmentReference
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionDeleteAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 4		
								invoked.Attachment.File				= each.DeletedAttachment.File
								invoked.Attachment.MimeType			= each.DeletedAttachment.MimeType
								invoked.Attachment.Title			= each.DeletedAttachment.Title
								invoked.AttachmentReference			= each.DeletedAttachmentRef
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionAttachment set
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
								fill in fields from each

		CreateNegotiationUpdateContractTermVersion is an Instance Action
			restricted
			Local Fields
				LocalContractTermVersion		is a ContractTermVersion view
				LocalContractTermVersionArticle	is a ContractTermVersionArticle view
				LocalContractTermVersionTerm	is a ContractTermVersionTerm view

			Action Rules
				invoke Create ContractTermVersion
					assign result to LocalContractTermVersion
					invoked.ContractGroup		= ContractGroup
					invoked.Contract			= Contract
					if (AddendumExists)
						invoked.ApprovalStage	= 5		
					else
						invoked.ApprovalStage	= 2		
					if (UserIsSupplier)
						invoked.LastAction		= 2		
					else
						invoked.LastAction		= 3		
					if (action comment entered)
						invoked.ModificationComment	= action comment
					if (LocalComment entered)
						invoked.ModificationComment = LocalComment
					invoked.ModificationActor		= actor
				for each NonDeletedContractArticlesByDisplayRel		
					LocalContractArticleForVersions = each.ContractArticle
					invoke Create ContractTermVersionArticle
						assign result to LocalContractTermVersionArticle
						invoked.ContractGroup				= ContractGroup
						invoked.Contract					= Contract
						invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
						invoked.ContractArticle				= each.ContractArticle
						invoked.Title						= each.Title
						if (PendingArticleUpdateExistsRel exists)
							invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
							invoked.OriginalHeaderText			= each.DerivedPreviousVersionArticleHeaderText
						else
							invoked.HeaderText					= each.HeaderText
							invoked.OriginalHeaderText			= each.HeaderText
						invoked.DisplayOrder				= each.DisplayOrder
					for each each.NonDeletedContractTermsByDisplayRel
						LocalContractTermAndConditionForVersions = each.ContractTermAndCondition
						invoke Create ContractTermVersionTerm
							assign result to LocalContractTermVersionTerm
							invoked.ContractGroup 				= ContractGroup
							invoked.Contract 					= Contract
							invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
							invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
							invoked.ContractArticle				= each.ContractArticle
							invoked.ContractTermAndCondition	= each.ContractTermAndCondition
							if (NonAttachmentPendingContractTermAndConditionUpdateExistRel exists)
								invoked.Title						= each.DerivedCurrentRequestedTitle
								invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
								invoked.Description					= each.DerivedCurrentRequestedDescription
								invoked.OriginalTitle				= each.DerivedPreviousVersionTermTitle
								invoked.OriginalHeaderText			= each.DerivedPreviousVersionTermHeaderText
								invoked.OriginalDescription			= each.DerivedPreviousVersionTermDescription
							else
								invoked.Title						= each.Title
								invoked.HeaderText					= each.HeaderText
								invoked.Description					= each.Description
								invoked.OriginalTitle				= each.Title
								invoked.OriginalHeaderText			= each.HeaderText
								invoked.OriginalDescription			= each.Description
							invoked.DisplayOrder				= each.DisplayOrder
						for each each.ContractTermAndConditionAddAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 3		
								invoked.DisplayOrder				= each.NewAttachmentDisplayOrder
								invoked.Attachment.File				= each.NewAttachment.File
								invoked.Attachment.MimeType			= each.NewAttachment.MimeType
								invoked.Attachment.Title			= each.NewAttachment.Title
								invoked.AttachmentReference			= each.NewAttachmentReference
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionDeleteAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 4		
								invoked.Attachment.File				= each.DeletedAttachment.File
								invoked.Attachment.MimeType			= each.DeletedAttachment.MimeType
								invoked.Attachment.Title			= each.DeletedAttachment.Title
								invoked.AttachmentReference			= each.DeletedAttachmentRef
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionAttachment set
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
								fill in fields from each

		CreateFinalContractTermVersion is an Instance Action
			restricted
			Local Fields
				LocalContractTermVersion		is a ContractTermVersion view
				LocalContractTermVersionArticle	is a ContractTermVersionArticle view
				LocalContractTermVersionTerm	is a ContractTermVersionTerm view

			Action Rules
				invoke Create ContractTermVersion
					assign result to LocalContractTermVersion
					invoked.ContractGroup		= ContractGroup
					invoked.Contract			= Contract
					if (AddendumExists)
						invoked.ApprovalStage		= 6
					else
						invoked.ApprovalStage		= 3		
					invoked.LastAction			= 7		
					invoked.FinalApproverActor	= actor
				for each NonDeletedContractArticlesByDisplayRel
					LocalContractArticleForVersions = each.ContractArticle
					invoke Create ContractTermVersionArticle
						assign result to LocalContractTermVersionArticle
						invoked.ContractGroup				= ContractGroup
						invoked.Contract					= Contract
						invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
						invoked.ContractArticle				= each.ContractArticle
						invoked.Title						= each.Title
						if (PendingArticleUpdateExistsRel exists)
							invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
							invoked.OriginalHeaderText			= each.DerivedPreviousVersionArticleHeaderText
						else
							invoked.HeaderText					= each.HeaderText
							invoked.OriginalHeaderText			= each.HeaderText
						invoked.DisplayOrder				= each.DisplayOrder
					for each each.NonDeletedContractTermsByDisplayRel
						LocalContractTermAndConditionForVersions = each.ContractTermAndCondition
						invoke Create ContractTermVersionTerm
							assign result to LocalContractTermVersionTerm
							invoked.ContractGroup 				= ContractGroup
							invoked.Contract 					= Contract
							invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
							invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
							invoked.ContractArticle				= each.ContractArticle
							invoked.ContractTermAndCondition	= each.ContractTermAndCondition
							if (NonAttachmentPendingContractTermAndConditionUpdateExistRel exists)
								invoked.Title						= each.DerivedCurrentRequestedTitle
								invoked.HeaderText					= each.DerivedCurrentRequestedHeaderText
								invoked.Description					= each.DerivedCurrentRequestedDescription
								invoked.OriginalTitle				= each.DerivedPreviousVersionTermTitle
								invoked.OriginalHeaderText			= each.DerivedPreviousVersionTermHeaderText
								invoked.OriginalDescription			= each.DerivedPreviousVersionTermDescription
							else
								invoked.Title						= each.Title
								invoked.HeaderText					= each.HeaderText
								invoked.Description					= each.Description
								invoked.OriginalTitle				= each.Title
								invoked.OriginalHeaderText			= each.HeaderText
								invoked.OriginalDescription			= each.Description
							invoked.DisplayOrder				= each.DisplayOrder
						for each each.ContractTermAndConditionAddAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 3		
								invoked.DisplayOrder				= each.NewAttachmentDisplayOrder
								invoked.Attachment.File				= each.NewAttachment.File
								invoked.Attachment.MimeType			= each.NewAttachment.MimeType
								invoked.Attachment.Title			= each.NewAttachment.Title
								invoked.AttachmentReference			= each.NewAttachmentReference
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionDeleteAttachmentRel
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.SpecificRequestType			= 4		
								invoked.Attachment.File				= each.DeletedAttachment.File
								invoked.Attachment.MimeType			= each.DeletedAttachment.MimeType
								invoked.Attachment.Title			= each.DeletedAttachment.Title
								invoked.AttachmentReference			= each.DeletedAttachmentRef
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
						for each each.ContractTermAndConditionAttachment set
							invoke Create ContractTermVersionTermAttachment
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 					= Contract
								invoked.ContractTermVersion 		= LocalContractTermVersion.ContractTermVersion
								invoked.ContractTermVersionArticle 	= LocalContractTermVersionArticle.ContractTermVersionArticle
								invoked.ContractTermVersionTerm		= LocalContractTermVersionTerm.ContractTermVersionTerm
								invoked.ContractTermAndConditionAttachment	= each.ContractTermAndConditionAttachment
								fill in fields from each

		AddArticle is an Instance Action
			restricted
			Parameters
				PrmTitle				is a Description
				PrmHeaderText			is Alpha 100

			Parameter Rules
				PrmTitle
					required
						"TitleIsRequired"
				PrmHeaderText
					if (!PrmHeaderText entered)
						default to PrmTitle

			Action Rules
				invoke AddArticleDuringNegotiation ContractArticle
					invoked.ContractGroup				= ContractGroup
					invoked.Contract					= Contract
					invoked.Title			 			= PrmTitle
					invoked.HeaderText		 			= PrmHeaderText
					if (ContractStatus.Released)
						invoked.ContractStatus 			= 2
					else
					if (ContractStatus.Addendum)
						invoked.ContractStatus          = 5

		AddArticleFromLibrary is an Instance Action
			restricted
			Parameters
				PrmArticle				is an Article
				PrmAttachTerms			is Boolean

			Parameter Rules
				PrmArticle
					required
						"ArticleIsRequired"
				PrmAttachTerms
					initial value is true

			Action Rules
				if (PrmAttachTerms)
					invoke AttachToContractWithTermsInNegotiation PrmArticle
						invoked.Contract = Contract
				else
					invoke AttachToContractWithoutTermsInNegotiation PrmArticle
						invoked.Contract = Contract

		EmailFromRequester is an Instance Action
			default label is "EmailPrimaryContact"
			valid when (ProposedContractsByRequester)
			Parameters
				PrmToEmail 									is an EmailAddressMulti 
					holds pii
					default label is "ToEmail"
				PrmFromEmail 								is an EmailAddress 
					holds pii
					default label is "FromEmail"
				PrmSubject 	   								is Text
					default label is "Subject"
				PrmEmailContents   							is Text
					default label is "EmailContents"
			Parameter Rules
				PrmToEmail
					required
					initial value is PrimaryContactRel.DerivedEmail
				PrmFromEmail
					required
					initial value is ProposalRequester.EmailAddress
				PrmSubject
					required
				PrmEmailContents
					required

			Action Rules
				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= PrmToEmail
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrmFromEmail
					invoked.EmailSubjectLine				= PrmSubject
					invoked.EmailContent					= PrmEmailContents
					invoked.NotificationType				= 9 

				send email
					to PrmToEmail
					from PrmFromEmail
					subject "<PrmSubject>"
					Contents
						"<PrmEmailContents>"

		EmailFromSupplier is an Instance Action
			valid when (CanSendEmailFromSupplier)
			Parameters
				PrmToEmail 									is an EmailAddressMulti 
					holds pii
				PrmFromEmail 								is an EmailAddress 
					holds pii
				PrmCcEmail 									is an EmailAddressMulti 
					holds pii
				PrmSubject 	   								is Text
				PrmEmailContents   							is Text

			Parameter Rules
				PrmToEmail
					required
					initial value is PrimaryContactRel.DerivedEmail
				PrmFromEmail
					required
					initial value is SupplierSourceId.EmailAddress
				PrmCcEmail
					initial value is DerivedSecondaryContactEmailAddressList
				PrmSubject
					required
				PrmEmailContents
					required

			Action Rules
				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= PrmToEmail
					invoked.SentToCc                        = PrmCcEmail
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrmFromEmail
					invoked.EmailSubjectLine				= PrmSubject
					invoked.EmailContent					= PrmEmailContents
					invoked.NotificationType				= 7 

				send email
					to PrmToEmail
					from PrmFromEmail
					cc PrmCcEmail
					subject "<PrmSubject>"
					Contents
						"<PrmEmailContents>"

		EmailContractToSupplier is an Instance Action
			Parameters
				PrmToEmail 								is an EmailAddressMulti 
					holds pii
				PrmFromEmail 							is an EmailAddress 
					holds pii
				PrmCcEmail 								is an EmailAddressMulti 
					holds pii
				PrmBccEmail 							is an EmailAddressMulti 
					holds pii
				PrmSubject 	   							is Text
				PrmEmailContents   						is RichText
				PrmIncludeLatestContractDocument  			is Boolean
				PrmIncludeContractAttachmentsWithEmail		is Boolean
				PrmIncludeContractLineAttachmentsWithEmail 	is Boolean
				PrmIncludeRedlineDocumentsWithEmail			is Boolean

			Parameter Rules
				PrmToEmail
					required
					initial value is SupplierSourceId.EmailAddress
				PrmFromEmail
					required
					initial value is PrimaryContactRel.DerivedEmail
				PrmCcEmail
					initial value is DerivedProxyEmailAddressList
				PrmBccEmail
					initial value is PrimaryAndSecondaryEmailList
				PrmSubject
					required
					initial value is ContractGroupEmailTemplateRel.FinalContractNotifySupplierEmailSubject
				PrmEmailContents
					required
					initial value is ContractGroupEmailTemplateRel.FinalContractNotifySupplierEmailContent
				PrmIncludeRedlineDocumentsWithEmail
					initial value is true
						when (RedlineApprovals)
				PrmIncludeLatestContractDocument
					initial value is true
						when (not RedlineApprovals)
			Local Fields
				LocalAttachmentsExists						is Boolean
				LocalattachmentUniqueIDindex								is Numeric size 2
				LocaldocumentAttachmentindex						is Numeric size 3
				LocalMaxAttachment							is Numeric size 3
				LocalIDMDocument 							is an IDMAttachment
				LocalRedlineIDMDocument						is an IDMAttachment

			Action Rules
			 	if (PrmIncludeLatestContractDocument)
			 		constraint (ContractDocumentCreated)
			 			"NoContractDocumentsExist:UseCreateContractDocumentActionToCreateDocument"
				if (PrmIncludeContractAttachmentsWithEmail)
					constraint (EmailAttachmentsExists)
						"ThereAreNoAttachmentsMarkedToEmailToTheSupplier"
				if (PrmIncludeContractLineAttachmentsWithEmail)
					constraint (LineEmailAttachmentsExists)
						"ThereAreNoContractLineAttachmentsMarkedToEmailToTheSupplier"
				if (PrmIncludeRedlineDocumentsWithEmail)
					constraint (RedlineEmailAttachmentExists)
						"ThereIsNoRedlineDocumentToEmail"
				if (!SupplierSourceId.ReceiveEmailNotification)
					constraint (SupplierContactProxyRel exists)
						"SupplierContact<SupplierSourceId>AndSupplierContactProxiesAreNotSetToReceiveEmailNotifications"

				if (PrmIncludeRedlineDocumentsWithEmail
				or  PrmIncludeContractAttachmentsWithEmail
				or  PrmIncludeLatestContractDocument
				or  PrmIncludeContractLineAttachmentsWithEmail)
					LocalAttachmentsExists = true
				else
					LocalAttachmentsExists = false

				if (PrmIncludeRedlineDocumentsWithEmail     
				and HasIDMRedlineDocument)
					IDMItem.IDMUniqueId				= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType			= "FSM_ContractRedlineDocument"
					
					constraint(IDMItem.RetrieveResource)
						"RedlineDocumentDoesNotExistInIDM"
					
					LocalRedlineIDMDocument	 = IDMItem.RetrievedAttachment

				if (PrmIncludeLatestContractDocument   	
				and HasIDMDocument)
					IDMItem.IDMUniqueId				= IDMDocumentPID
					IDMItem.DocumentType			= "FSM_ContractDocument"
						
					constraint(IDMItem.RetrieveResource)
						"ContractDocumentDoesNotExistInIDM"
					
					LocalIDMDocument	 = IDMItem.RetrievedAttachment

				send email
					to PrmToEmail
					cc PrmCcEmail
					bcc PrmBccEmail
					from PrmFromEmail
					subject "<PrmSubject>"
					Contents
						"<PrmEmailContents>"
					Attachments
						if (PrmIncludeLatestContractDocument)
							if (HasIDMDocument)
								attachment LocalIDMDocument.File
									name is LocalIDMDocument.Title
									mime type is LocalIDMDocument.MimeType
							else
								attachment LatestDocumentRevisionRel.Attachment.File
									name is LatestDocumentRevisionRel.Attachment.Title
									mime type is LatestDocumentRevisionRel.Attachment.MimeType
						if (PrmIncludeContractAttachmentsWithEmail)
							for each EmailAttachmentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

							for each EmailCommentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

						if (PrmIncludeContractLineAttachmentsWithEmail)
							for each LineEmailAttachmentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

							for each LineEmailCommentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

						if (PrmIncludeRedlineDocumentsWithEmail)
							if (HasIDMRedlineDocument)
								attachment LocalRedlineIDMDocument.File
									name is LocalRedlineIDMDocument.Title
									mime type is LocalRedlineIDMDocument.MimeType
							else
								attachment LatestRevisionRel.Attachment.File
									name is LatestRevisionRel.Attachment.Title
									mime type is LatestRevisionRel.Attachment.MimeType

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= PrmToEmail
					invoked.SentToCc                        = PrmCcEmail
					invoked.SentToBcc                       = PrmBccEmail
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrmFromEmail
					invoked.EmailSubjectLine				= PrmSubject
					invoked.EmailContent					= PrmEmailContents
					invoked.NotificationType				= 4
					invoked.IncludeAttachments				= LocalAttachmentsExists

				if (PrmIncludeLatestContractDocument)
					invoke Create ContractNotificationEmailAttachment
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						if (HasIDMDocument)
							invoked.IDMUniqueId					= IDMDocumentPID
						else
							invoked.ContractDocument            = LatestDocumentRevisionRel.ContractDocument
						invoked.ContractNotificationEmail       = LastNotificationEmail

				if (PrmIncludeRedlineDocumentsWithEmail)
					invoke Create ContractNotificationEmailAttachment
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						invoked.ContractRedlineDocument         = LatestRevisionRel.ContractRedlineDocument
						invoked.ContractNotificationEmail       = LastNotificationEmail
 						if (HasIDMRedlineDocument)
							invoked.DocumentVersion  				= LatestRevisionRel.DerivedVersionNumber

				if (PrmIncludeContractAttachmentsWithEmail)
					for each EmailCommentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.SequenceNumber
							invoked.ContractCommentType             = each.ContractCommentType
							invoked.ContractNotificationEmail       = LastNotificationEmail

					for each EmailAttachmentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.Sequence
							invoked.ContractNotificationEmail       = LastNotificationEmail

				if (PrmIncludeContractLineAttachmentsWithEmail)
					for each LineEmailCommentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.SequenceNumber
							invoked.LineNumber                      = each.ContractLine
							invoked.ContractCommentType             = each.ContractCommentType
							invoked.ContractNotificationEmail       = LastNotificationEmail

					for each LineEmailAttachmentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.Sequence
							invoked.LineNumber                      = each.ContractLine
							invoked.ContractNotificationEmail       = LastNotificationEmail

				EmailedSupplierDate		= current corporate date

		EmailContract is an Instance Action
			valid when (!PricingManagerRoleOnlyExists)
			Parameters
				PrmToEmail 									is an EmailAddressMulti 
					holds pii
				PrmFromEmail 								is an EmailAddress 
					holds pii
				PrmCcEmail 									is an EmailAddressMulti 
					holds pii
				PrmBccEmail 								is an EmailAddressMulti 
					holds pii
				PrmSubject 	   								is Text
				PrmEmailContents   							is RichText
				PrmIncludeLatestContractDocument  			is Boolean
				PrmIncludeContractAttachmentsWithEmail		is Boolean
				PrmIncludeContractLineAttachmentsWithEmail 	is Boolean
				PrmIncludeRedlineDocumentsWithEmail         is Boolean


			Parameter Rules
				PrmToEmail
					required
				PrmFromEmail
					required
					initial value is PrimaryContactRel.DerivedEmail
				PrmCcEmail
					initial value is DerivedSecondaryContactEmailAddressList
				PrmSubject
					required
				PrmEmailContents
					required
				PrmIncludeLatestContractDocument
					initial value is true
						when (!RedlineApprovals)
				PrmIncludeRedlineDocumentsWithEmail
					initial value is true
						when (RedlineApprovals)

			Local Fields
				LocalAttachmentsExists                        is Boolean
				LocalattachmentUniqueIDindex				is Numeric size 2
				LocaldocumentAttachmentindex				is Numeric size 3
				LocalMaxAttachment							is Numeric size 3
				LocalIDMDocument 							is an IDMAttachment
				LocalRedlineIDMDocument						is an IDMAttachment

			Action Rules
				if (PrmIncludeLatestContractDocument)
					constraint (ContractDocumentCreated)
						"NoContractDocumentsExist:UseCreateContractDocumentActionToCreateDocument"
				if (PrmIncludeContractAttachmentsWithEmail)
					constraint (EmailAttachmentsExists)
						"ThereAreNoHeaderAttachmentsMarkedToEmail"
				if (PrmIncludeContractLineAttachmentsWithEmail)
					constraint (LineEmailAttachmentsExists)
						"ThereAreNoLineAttachmentsMarkedToEmail"
				if (PrmIncludeRedlineDocumentsWithEmail)
					constraint (RedlineEmailAttachmentExists)
						"ThereIsNoRedlineDocumentToEmail"

				if (PrmIncludeRedlineDocumentsWithEmail
				or  PrmIncludeContractAttachmentsWithEmail
				or  PrmIncludeLatestContractDocument
				or  PrmIncludeContractLineAttachmentsWithEmail)
					LocalAttachmentsExists = true
				else
					LocalAttachmentsExists = false

				invoke Create ContractNotificationEmail
					invoked.ContractGroup					= ContractGroup
					invoked.Contract						= Contract
					initialize invoked.ContractDeliverable
					initialize invoked.ContractMilestone
					initialize invoked.SentToMilestoneContact
					initialize invoked.SentToDeliverableContact
					invoked.SentToEmailAddress				= PrmToEmail
					invoked.SentToCc                        = PrmCcEmail
					invoked.SentToBcc                       = PrmBccEmail
					invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
					invoked.SentFromEmailAddress			= PrmFromEmail
					invoked.EmailSubjectLine				= PrmSubject
					invoked.EmailContent					= PrmEmailContents
					invoked.NotificationType				= 4
					invoked.IncludeAttachments				= LocalAttachmentsExists

				if (PrmIncludeLatestContractDocument)
					invoke Create ContractNotificationEmailAttachment
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						if (HasIDMDocument)
							invoked.IDMUniqueId					= IDMDocumentPID
						else
							invoked.ContractDocument                = LatestDocumentRevisionRel.ContractDocument
						invoked.ContractNotificationEmail       = LastNotificationEmail

				if (PrmIncludeRedlineDocumentsWithEmail)
					invoke Create ContractNotificationEmailAttachment
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						invoked.ContractRedlineDocument         = LatestRevisionRel.ContractRedlineDocument
						invoked.ContractNotificationEmail       = LastNotificationEmail
 						if (HasIDMRedlineDocument)
							invoked.DocumentVersion  				= LatestRevisionRel.DerivedVersionNumber

				if (PrmIncludeContractAttachmentsWithEmail)
					for each EmailCommentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.SequenceNumber
							invoked.ContractCommentType             = each.ContractCommentType
							invoked.ContractNotificationEmail       = LastNotificationEmail

					for each EmailAttachmentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.Sequence
							invoked.ContractNotificationEmail       = LastNotificationEmail

				if (PrmIncludeContractLineAttachmentsWithEmail)
					for each LineEmailCommentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.SequenceNumber
							invoked.LineNumber                      = each.ContractLine
							invoked.ContractCommentType             = each.ContractCommentType
							invoked.ContractNotificationEmail       = LastNotificationEmail

					for each LineEmailAttachmentsRel
						invoke Create ContractNotificationEmailAttachment
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							invoked.SequenceNumber                  = each.Sequence
							invoked.LineNumber                      = each.ContractLine
							invoked.ContractNotificationEmail       = LastNotificationEmail

				if (PrmIncludeRedlineDocumentsWithEmail     
				and HasIDMRedlineDocument)
					IDMItem.IDMUniqueId				= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType			= "FSM_ContractRedlineDocument"
					
					constraint(IDMItem.RetrieveResource)
						"RedlineDocumentDoesNotExistInIDM"
					
					LocalRedlineIDMDocument	 = IDMItem.RetrievedAttachment

				if (PrmIncludeLatestContractDocument   	
				and HasIDMDocument)
					IDMItem.IDMUniqueId				= IDMDocumentPID
					IDMItem.DocumentType			= "FSM_ContractDocument"
						
					constraint(IDMItem.RetrieveResource)
						"ContractDocumentDoesNotExistInIDM"
					
					LocalIDMDocument	 = IDMItem.RetrievedAttachment

				send email
					to PrmToEmail
					from PrmFromEmail
					cc PrmCcEmail
					bcc PrmBccEmail
					subject "<PrmSubject>"
					Attachments
						if (PrmIncludeLatestContractDocument)
							if (HasIDMDocument)
								attachment LocalIDMDocument.File
									name is LocalIDMDocument.Title
									mime type is LocalIDMDocument.MimeType
							else
								attachment LatestDocumentRevisionRel.Attachment.File
									name is LatestDocumentRevisionRel.Attachment.Title
									mime type is LatestDocumentRevisionRel.Attachment.MimeType

						if (PrmIncludeContractAttachmentsWithEmail)
							for each EmailAttachmentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

							for each EmailCommentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

						if (PrmIncludeRedlineDocumentsWithEmail)
							if (HasIDMRedlineDocument)
								attachment LocalRedlineIDMDocument.File
									name is LocalRedlineIDMDocument.Title
									mime type is LocalRedlineIDMDocument.MimeType
							else
								attachment LatestRevisionRel.Attachment.File
									name is LatestRevisionRel.Attachment.Title
									mime type is LatestRevisionRel.Attachment.MimeType

						if (PrmIncludeContractLineAttachmentsWithEmail)
							for each LineEmailAttachmentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

							for each LineEmailCommentsRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType

					Contents
						"<PrmEmailContents>"

		SendEmailForExpiringContracts is a Set Action
			default label is "SendEmailForAllExpiringAndExpiredContracts"
			completion message is "ExpiringAndExpiredContractsEmailSent"

			Parameters
				PrmContractGroup          is a ContractGroup
					default label is "ContractGroup"
				PrmNoEmailsAfterAlerts  is Boolean
					default label is "ForContractsWithAlertDaysDoNotSendEmailsAfterAlerts"
				PrmNoEmailsIfNoAlerts   is Boolean
					default label is "ForContractsWithNoAlertDaysDoNotSendEmails"

			Parameter Rules
				PrmContractGroup
					initial value is actor.context.BusinessGroup
					required
			Local Fields
				LocalSubjectLine                       is Alpha size up to 400
				LocalEmailContents                     is Alpha size up to 2000
				LocalDays                              is Numeric size 4
				LocalPrimaryContact					   is Iteration of ContractAttachedContact
			Instance Selection
				where (PrmContractGroup            = ContractGroup
				and    Contract.NotContractTemplate
				and    !RemoveFromExpireList
				and   (IsAddendumOrAmendment
				or     ContractStatus.Active)
				and   (ExpirationDateYellowAlert
				or     ExpirationDateRedAlert
				or    (!RedAlertExists
				and     AtLeastOneDayToExpiration)))

			Sort Order
				ContractGroup
				Contract

			Action Rules
				Contract Set Rules
					Entrance Rules
						LocalPrimaryContact     = first iteration of Contract.ContractPrimaryContactRel
					Exit Rules
						if (EmailNotSentYellowExpiringContract)
							invoke FastUpdateWithoutEdits Contract
								invoked.YellowEmailSent = true
						else
						if (EmailNotSentRedExpiringContract)
							invoke FastUpdateWithoutEdits Contract
								invoked.RedEmailSent = true
				Instance Rules
					if (EmailNotSentYellowExpiringContract)

						if (PrimaryContactRel exists)
							for each LocalPrimaryContact
								while (each.Contract <= Contract)
								if (Contract = Contract)
									LocalSubjectLine 	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailSubject
									LocalEmailContents	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailContent
									LocalDays           = YellowAlert
									invoke CreateEmail ContractNotificationEmail
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= each.Contract
										initialize invoked.ContractDeliverable
										initialize invoked.ContractMilestone
										initialize invoked.SentToMilestoneContact
										initialize invoked.SentToDeliverableContact
										invoked.SentToEmailAddress				= each.ContractPrimaryRel.DerivedEmail
										invoked.SentFromEmailAddress			= each.ContractPrimaryRel.DerivedEmail
										invoked.SentToBcc                       = each.Contract.DerivedSecondaryContactEmailAddressList
										invoked.EmailSubjectLine				= LocalSubjectLine
										invoked.EmailContent					= LocalEmailContents
										invoked.DaysToAlert						= LocalDays
										invoked.NotificationType				= 0

					else
					if (EmailNotSentRedExpiringContract)

						if (PrimaryContactRel exists)
							for each LocalPrimaryContact
								while (each.Contract <= Contract)
								if (Contract = Contract)
									LocalSubjectLine 	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailSubject
									LocalEmailContents	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailContent
									LocalDays           = RedAlert
									invoke CreateEmail ContractNotificationEmail
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= each.Contract
										initialize invoked.ContractDeliverable
										initialize invoked.ContractMilestone
										initialize invoked.SentToMilestoneContact
										initialize invoked.SentToDeliverableContact
										invoked.SentToEmailAddress				= each.ContractPrimaryRel.DerivedEmail
										invoked.SentFromEmailAddress			= each.ContractPrimaryRel.DerivedEmail
										invoked.SentToBcc                       = each.Contract.DerivedSecondaryContactEmailAddressList
										invoked.EmailSubjectLine				= LocalSubjectLine
										invoked.EmailContent					= LocalEmailContents
										invoked.DaysToAlert						= LocalDays
										invoked.NotificationType				= 1
					else
					if (ExpirationDateYellowAlert
					and !ExpirationDateRedAlert
					and !PrmNoEmailsAfterAlerts)
						if (PrimaryContactRel exists)
							for each LocalPrimaryContact
								while (each.Contract <= Contract)
								if (Contract = Contract)
									LocalSubjectLine 	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailSubject
									LocalEmailContents	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailContent
									LocalDays           = YellowAlert
									invoke CreateEmail ContractNotificationEmail
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= each.Contract
										initialize invoked.ContractDeliverable
										initialize invoked.ContractMilestone
										initialize invoked.SentToMilestoneContact
										initialize invoked.SentToDeliverableContact
										invoked.SentToEmailAddress				= each.ContractPrimaryRel.DerivedEmail
										invoked.SentFromEmailAddress			= each.ContractPrimaryRel.DerivedEmail
										invoked.SentToBcc                       = each.Contract.DerivedSecondaryContactEmailAddressList
										invoked.EmailSubjectLine				= LocalSubjectLine
										invoked.EmailContent					= LocalEmailContents
										invoked.DaysToAlert						= LocalDays
										invoked.NotificationType				= 0
					else
					if (ExpirationDateRedAlert
					and !PrmNoEmailsAfterAlerts)
						if (PrimaryContactRel exists)
							for each LocalPrimaryContact
								while (each.Contract <= Contract)
								if (Contract = Contract)
									LocalSubjectLine 	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailSubject
									LocalEmailContents	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailContent
									LocalDays           = RedAlert
									invoke CreateEmail ContractNotificationEmail
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= each.Contract
										initialize invoked.ContractDeliverable
										initialize invoked.ContractMilestone
										initialize invoked.SentToMilestoneContact
										initialize invoked.SentToDeliverableContact
										invoked.SentToEmailAddress				= each.ContractPrimaryRel.DerivedEmail
										invoked.SentFromEmailAddress			= each.ContractPrimaryRel.DerivedEmail
										invoked.SentToBcc                       = each.Contract.DerivedSecondaryContactEmailAddressList
										invoked.EmailSubjectLine				= LocalSubjectLine
										invoked.EmailContent					= LocalEmailContents
										invoked.DaysToAlert						= LocalDays
										invoked.NotificationType				= 1
					else
					if (AtLeastOneDayToExpiration
					and !RedAlertExists
					and !PrmNoEmailsIfNoAlerts)

						if (OneDayToExpiration)
							LocalDays = 1
						else
							LocalDays = 0
						if (PrimaryContactRel exists)
							for each LocalPrimaryContact
								while (each.Contract <= Contract)
								if (Contract = Contract)
									LocalSubjectLine 	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailSubject
									LocalEmailContents	= each.ContractGroupEmailTemplate2Rel.FinalContractExpiringEmailContent
									invoke CreateEmail ContractNotificationEmail
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= each.Contract
										initialize invoked.ContractDeliverable
										initialize invoked.ContractMilestone
										initialize invoked.SentToMilestoneContact
										initialize invoked.SentToDeliverableContact
										invoked.SentToEmailAddress				= each.ContractPrimaryRel.DerivedEmail
										invoked.SentToBcc                       = each.Contract.DerivedSecondaryContactEmailAddressList
										invoked.SentFromEmailAddress			= each.ContractPrimaryRel.DerivedEmail
										invoked.EmailSubjectLine				= LocalSubjectLine
										invoked.EmailContent					= LocalEmailContents
										invoked.DaysToAlert						= LocalDays
										if (OneDayToExpiration)
											invoked.NotificationType			= 2
										else
										if (PastExpirationDate)
											invoked.NotificationType			= 3
											invoked.PastDueCount				+= 1

		AddContractClinicalLocations is a Set Action  
			restricted 
			Parameters 
				ParmContractGroup       			is a ContractGroup
				ManufacturerContracts   			is Boolean
				ParmContractClassification			is like ContractClassification
				ParmSupplier            			is like Supplier 
				SetLinesToClinicalUse			    is Numeric 1
				SetClassificationToShowHealthcare	is Boolean
				SetClassificationToDefaultForClinicalUse is Boolean
				CompanyOption                       is Numeric 1
					States 
						Both 					value is 0
						InventoryLocationOnly   value is 1
						RequestingLocationOnly  value is 2
						None                    value is 3
				DistributorContracts                        is Boolean           
				ParmContractType                            is like ContractType 

			Instance Selection 
				where (ContractGroup = ParmContractGroup 
				and    CanEnableForClinicalUse
				and  (((ManufacturerContracts = false
				or     IsManufacturerContract)
				and   (ParmContractClassification !entered
				or     ContractType = ParmContractClassification)
				and   (ParmSupplier !entered
				or     Supplier = ParmSupplier))
				or     HasLinesForClinicalUse))
			Action Rules 

				Instance Rules 

					invoke EnableForClinicalUse 
						invoked.SetLinesToClinicalUse 						= SetLinesToClinicalUse 
						invoked.SetClassificationToShowHealthcare			= SetClassificationToShowHealthcare
						invoked.SetClassificationToDefaultForClinicalUse	= SetClassificationToDefaultForClinicalUse
						invoked.CompanyOption                       		= CompanyOption 
						invoked.FromContractGroupEnable                     = true 

		ResetAllLineClinicalUseFlags is an Instance Action 
			valid when (EnableClinicalSystemUseLocations)
			Parameters 
				SetAllLinesToThisValue is Numeric 1
					States 
						Yes			value is 1
						No        	value is 2

			Parameter Rules 

				SetAllLinesToThisValue 
					constraint (SetAllLinesToThisValue > 0)
						"FieldMustBeSetToEitherYesOrNo"

			Action Rules 

				invoke ResetAllLineClinicalUseFlagsSet ContractLine 
					invoked.ParmContractGroup				= ContractGroup 
					invoked.ParmContract                    = Contract 
					invoked.SetAllLinesToThisValue          = SetAllLinesToThisValue
		
        MaintainClinicalLocations is an Instance Action 
            default label is "MaintainAllLocations"
            valid when (CanMaintainClinical)
            Parameters
                ClinicalLocationMaintenanceOption is Numeric 2 
                    default label is "UpdateClinicalSystemUse"
                    States
                        SetAllLocationsToYes            value is 1
                        SetAllLocationsToNo             value is 2
                        SetAllRequestingLocationsToYes  value is 3
                        SetAllRequestingLocationsToNo   value is 4
                        SetAllInventoryLocationsToYes   value is 5
                        SetAllInventoryLocationsToNo    value is 6
                        DeleteAllLocations              value is 7
                        DeleteAllRequestingLocations    value is 8
                        DeleteAllInventoryLocations     value is 9
						DeleteAllParAndCartLocations    value is 10
                SetToLineLevel                     is Boolean 

            Action Rules 
                constraint (ClinicalLocationMaintenanceOption > 0)
                    "MustEnterAValueInUpdateClinicalSystemUse" 
                
                invoke MaintainClinicalLocationsSet ContractAndLineLocation 
                    invoked.ParmContractGroup                   = ContractGroup
                    invoked.ParmContract                        = Contract 
                    invoked.ClinicalLocationMaintenanceOption   = ClinicalLocationMaintenanceOption 
                    invoked.SetToLineLevel                      = SetToLineLevel		
		
		EnableForClinicalUse is an Instance Action 
			valid when (CanEnableForClinicalUse)
			Parameters 
				SetLinesToClinicalUse 			    		is Numeric 1
					States 
						AllSpecial                   value is 0
						None                   		 value is 1
				SetClassificationToShowHealthcare			is Boolean
					default label is "SetClassificationToShowHealthcareInformation"
				SetClassificationToDefaultForClinicalUse 	is Boolean 
				CompanyOption                       		is Numeric 1
					default label is "LocationsToCreateForCompanyOnlyValues"
					States 
						Both 					value is 0
						InventoryLocationOnly   value is 1
						RequestingLocationOnly  value is 2
						None                    value is 3
				FromContractGroupEnable                     is Boolean 

			Parameter Rules 
				SetClassificationToShowHealthcare
					initial value is true 
			Action Rules 
				EnableClinicalSystemUseLocations = true 
				if (ParticipantsOrMembersExist)
					invoke MassCreateContractLocationSet 
						invoked.ParmContractGroup 			= ContractGroup 
						invoked.ParmContract      			= Contract
						invoked.CompanyOption     			= CompanyOption 
				if (SetClassificationToShowHealthcare)
					if (ContractSubclassification entered
					and ContractSubclassification.ShowHealthcareInformation = false)
						invoke Update ContractSubclassification
							invoked.ShowHealthcareInformation = true 
					else
					if (ContractClassification.ShowHealthcareInformation = false)
						invoke Update ContractClassification 
							invoked.ShowHealthcareInformation = true 
				if (SetClassificationToDefaultForClinicalUse)
					if (ContractSubclassification entered
					and ContractSubclassification.EnableClinicalSystemUseLocations = false)
						invoke Update ContractSubclassification
							invoked.EnableClinicalSystemUseLocations = true 
					else
					if (ContractClassification.EnableClinicalSystemUseLocations = false)
						invoke Update ContractClassification 
							invoked.EnableClinicalSystemUseLocations = true 				
				if 	(SetLinesToClinicalUse = 0)
					invoke UpdateClinicalUse ContractLine 
						invoked.PrmContractGroup 	  = ContractGroup 
						invoked.PrmContract           = Contract 
						invoked.PrmSetFlag		      = 1	
				
				if (ContractGroup.DefaultParticipantGroupForContractLocations entered
				and ContractGroupParticipantGroupRel !exists)
					if (!FromContractGroupEnable)
						invoke CreateLocationsForAContract ParticipantGroupLine
							invoked.ParmProcurementGroup			= ContractGroup
							invoked.ParmContract					= Contract
							invoked.ParmParticipantGroup            = ContractGroup.DefaultParticipantGroupForContractLocations
							invoked.LineLevel               		= ContractGroup.LineLevelForContractLocation	
							invoked.CompanyOption                   = CompanyOption 						
					else 
					if (FromContractGroupEnable)
		 				invoke Create ParticipantGroupContract     
							invoked.ProcurementGroup                = ContractGroup
							invoked.ParticipantGroup 				= ContractGroup.DefaultParticipantGroupForContractLocations
							invoked.Contract         				= Contract
							invoked.LocationOnly     				= true
							invoked.FromContractGroupInitialCreation = true
							invoked.TransientLineLevel              = ContractGroup.LineLevelForContractLocation  
							invoked.TransientCompanyOption          = CompanyOption             

		UpdateFromStanding is an Instance Action
			restricted

			Action Rules
				LastPORelease   = LastPORelease +1
				LastReleaseDate = current corporate date

		CheckForContractLineErrors is an Instance Action
			run in background
			valid when (InProgressOrActiveNotTemplateUseForCostDefaulting)
			default label is "CheckForContractLineErrors"

			Parameters
				CheckOnlyContractLinesWithErrors is Boolean

			Action Rules
				if (CheckOnlyContractLinesWithErrors)
					invoke ErrorsOnlyLineEdits ContractLine
						invoked.PrmContractGroup		= ContractGroup
						invoked.PrmContract				= Contract
				else
					invoke CheckForErrorsLineEdits ContractLine
						invoked.PrmContractGroup        = ContractGroup
						invoked.PrmContract             = Contract

		CalculateExpectedRebateDueAmount is an Instance Action
			completion message is "RebateCalculationsStarted;Check'MyActions'ForCompletion"
			default label is "CalculateExpectedRebateAmountForAllContractRebates"
			valid when (ContractRebateCalculate)

			Action Rules
				invoke CalculateExpectedRebateDueAmounts ContractRebateDueInvoiceLine in background
					invoked.PrmContractGroup		= ContractGroup
					invoked.PrmContract				= Contract
					initialize invoked.PrmBeginDueDate
					initialize invoked.PrmEndDueDate

		AcceptAllCostToleranceRecords is an Instance Action
			valid when (ToleranceErrorsExist)
			Action Rules
				for each ContractLinePriceChangeRel
					invoke AcceptCost each

		RemoveAllCostToleranceRecords is an Instance Action
			valid when (ToleranceErrorsExist)
			Action Rules
				invoke DeleteForContract ContractLinePriceChange
					invoked.ParmContractGroup 	= ContractGroup
					invoked.ParmContract      	= Contract
					invoked.ParmProcessingType	= 1

		RemoveAllCostComparisonRecords is an Instance Action
			valid when (CostComparisonExists)
			Action Rules
				invoke DeleteForContract ContractLinePriceChange
					invoked.ParmContractGroup 	= ContractGroup
					invoked.ParmContract      	= Contract
					invoked.ParmProcessingType	= 3

				invoke DeleteForContract ContractLinePriceChange
					invoked.ParmContractGroup 	= ContractGroup
					invoked.ParmContract      	= Contract
					invoked.ParmProcessingType	= 2

		RemoveAllPreviousCostRecords is an Instance Action
			default label is "RemoveAllCostSavingsRecords"
			valid when (CostSavingsExists)
			Action Rules
				invoke DeleteForContract ContractLinePriceChange
					invoked.ParmContractGroup 	= ContractGroup
					invoked.ParmContract      	= Contract
					invoked.ParmProcessingType	= 5

		RemoveAllBidWorksheetRecords is an Instance Action
			valid when (BidWorksheetExists)
			Action Rules
				invoke DeleteForContract ContractLinePriceChange
					invoked.ParmContractGroup 	= ContractGroup
					invoked.ParmContract      	= Contract
					invoked.ParmProcessingType	= 4

		SetPreviousCost is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
					default label is "ContractGroup"
				PrmContract      is a Contract
					default label is "Contract"

			Instance Selection
				where (PrmContractGroup = ContractGroup
				and    PrmContract      = Contract)

			Action Rules

				Instance Rules
					if (IsManufacturerContract)
						invoke SetPreviousCost ContractLineMember
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract      = Contract
					else
						invoke SetPreviousCost ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract      = Contract

		CompareContractCost is an Instance Action
			valid when (CanCompareContractCosts)
			Parameters
				CompareContract      is a Contract
				CompareFromDate      is Date
				CompareToDate        is Date
				ShowZeroDifference   is Boolean
				ShowZeroOrdered      is Boolean
				CompareFromTier      is a ContractTier
				CompareToTier        is a ContractTier
				ComparePreviousCost  is Boolean

			Parameter Rules
				CompareContract
					if (!ComparePreviousCost)
						required
							"MustEnterCompareContractIfNotComparePreviousCost"
					LocalContract = CompareContract
					if (CompareToTier !entered)
						constraint (ContractLinePriceChangeCompareRel !exists)
							"CompareAlreadyExistsToThisContract"
					if (CompareToTier entered)
						LocalTier = CompareToTier
						constraint (ContractLinePriceChangeTierRel !exists)
							"CompareAlreadyExistsToThisContractAndTier"
					constraint (CompareContract != Contract)
						"CompareContractAndContractMustBeDifferent"
					constraint (ComparePreviousCost = false)
						"CompareContractMustBeBlankIfComparePreviousCostIsChecked"

				CompareFromDate
					initial value is EffectiveDate
					default to EffectiveDate
					required
						"MustEnterAFromDateForQuantityCalculations"

					constraint (CompareFromDate < CompareToDate)
						"CompareFromDateMustBePriorToCompareToDate"

				CompareToDate
					initial value is ExpirationDate
					default to ExpirationDate
					required
						"MustEnterAToDateForQuantityCalculations"

				CompareFromTier
					if (CompareFromTier entered)
						LocalTier  = CompareFromTier
						constraint (LineTierCostExists)
							"NoLineTierCostRecordsExistForCompareFromTier"

						LocalContract = CompareContract
						constraint (CompareLineTierCostExists)
							"NoLineTierCostRecordsExistForCompareFromTierOnCompareContract"

						if (CompareToTier !entered)
							CompareToTier = CompareFromTier

				CompareToTier
					if (CompareToTier entered)
						LocalTier  = CompareToTier
						constraint (LineTierCostExists)
							"NoLineTierCostRecordsExistForCompareToTier"

						LocalContract = CompareContract
						constraint (CompareLineTierCostExists)
							"NoLineTierCostRecordsExistForCompareToTierOnCompareContract"

						if (CompareFromTier !entered)
							CompareFromTier = CompareToTier

				ComparePreviousCost
					constraint (CompareContract !entered)
						"CannotEnterContractIfComparePreviousCostIsChecked"

			Action Rules

				if (ComparePreviousCost)
					constraint (CompareFromDate >= EffectiveDate)
						"ForCompareFromPreviousCost,CompareFromDateMustBeEqualToOrLaterThanContractEffectiveDate"

				if (ComparePreviousCost)
					constraint (CompareToDate <= ExpirationDate)
						"ForCompareFromPreviousCost,CompareToDateMustBeEqualToOrEarlierThanContractExpirationDate"

				if (!ComparePreviousCost)
					if (ContractLineCostCompareRel exists)
						confirmation required
							"AnotherSetOfCostCompareItemsExistsForContract;ExistingCostCompareItemsWillBeDeleted;DoYouWantToContinue?"
						invoke RemoveAllCostComparisonRecords

				if (ComparePreviousCost)
					if (CostSavingsRel exists)
						confirmation required
							"AnotherSetOfComparePreviousCostItemsExistsForContract;ExistingCostSavingsItemsWillBeDeleted;DoYouWantToContinue?"
						invoke RemoveAllPreviousCostRecords

				if (ComparePreviousCost
				and Contract.IsManufacturerOrDistributorContract)
					invoke ComparePreviousCost ContractLineMember
						invoked.PrmContractGroup		= ContractGroup
						invoked.PrmContract				= Contract
						invoked.CompareFromDate         = CompareFromDate
						invoked.CompareToDate           = CompareToDate
						invoked.ShowZeroDifference      = ShowZeroDifference
				else
					invoke CompareContractLineCosts ContractLine
						invoked.PrmContractGroup		= ContractGroup
						invoked.PrmContract				= Contract
						invoked.CompareContract			= CompareContract
						invoked.CompareFromDate         = CompareFromDate
						invoked.CompareToDate           = CompareToDate
						invoked.ShowZeroDifference    	= ShowZeroDifference
						invoked.ShowZeroOrdered         = ShowZeroOrdered
						invoked.CompareFromTier         = CompareFromTier
						invoked.CompareToTier           = CompareToTier
						invoked.ComparePreviousCost     = ComparePreviousCost
						invoked.ShowZeroDifference      = ShowZeroDifference

		CreateContractBidWorksheet is an Instance Action
			valid when (NotPricingManagerNotTemplate)
			Parameters
				CompareFromDate      is Date
				CompareToDate        is Date
				ShowZeroOrdered      is Boolean
				CompareToTier        is a ContractTier
				CostIncreasePercent  is Percent size 5.2
				BidSupplier          is a Supplier

			Parameter Rules

				CompareFromDate
					initial value is EffectiveDate
					default to EffectiveDate
					required
						"MustEnterAFromDateForQuantityCalculations"

				CompareToDate
					initial value is ExpirationDate
					default to ExpirationDate
					required
						"MustEnterAToDateForQuantityCalculations"

				ShowZeroOrdered
					initial value is true

			Action Rules
				LocalBidSupplier   = BidSupplier
				if (SupplierBidWorksheetRel exists)
					confirmation required
						"AnotherSetOfWorksheetItemsExistsForThisSupplierOrNoSupplier;ExistingWorksheetItemsWillBeDeleted;DoYouWantToContinue?"
					invoke RemoveAllBidWorksheetRecords

				invoke CreateBidWorksheetLines ContractLine
					invoked.PrmContractGroup		= ContractGroup
					invoked.PrmContract				= Contract
					invoked.CompareFromDate         = CompareFromDate
					invoked.CompareToDate           = CompareToDate
					invoked.ShowZeroOrdered         = ShowZeroOrdered
					invoked.CompareToTier           = CompareToTier
					invoked.CostIncreasePercent     = CostIncreasePercent
					invoked.BidSupplier             = BidSupplier

		ImportParticipantsFromGroup is an Instance Action
			valid when (IsNotManOrDistInProgress)
			Parameters
				ParticipantGroup
			Parameter Rules
				ParticipantGroup
					constraint (!ParticipantGroup.MemberGroup)
						"CannotUseGroupThatIsForManufacturerAndDistributorContracts"
					required
			Action Rules
				invoke CreateMembersForAContract ParticipantGroupLine
					invoked.ParmProcurementGroup			= ContractGroup
					invoked.ParmContract					= Contract
					invoked.ParmParticipantGroup            = ParticipantGroup

		ImportPricingMembersFromGroup is an Instance Action
			valid when (IsDistributorContractInProgress)
			Parameters
				ParticipantGroup
			Parameter Rules
				ParticipantGroup
					required
					constraint (ParticipantGroup.MemberGroup)
						"CannotUseGroupThatIsNotForManufacturerAndDistributorContracts"
					if (PricingMembersForDistributorContractExist)
						if (first NonManufacturerPricingMembersRel.CompanyType)
							constraint (ParticipantGroup.CompanyType)
								"CannotImportMembersFromMemberGroupThatUsesLocations;CompanyPricingMembersAlreadyExist"
						if (first NonManufacturerPricingMembersRel.LocationType)
							constraint (ParticipantGroup.LocationType)
								"CannotImportMembersFromMemberGroupThatUsesCompanies;LocationPricingMembersAlreadyExist"

			Action Rules
				invoke CreateMembersForAContract ParticipantGroupLine
					invoked.ParmProcurementGroup			= ContractGroup
					invoked.ParmContract					= Contract
					invoked.ParmParticipantGroup            = ParticipantGroup

		ImportTierMembersFromGroup is an Instance Action
			valid when (IsManufacturerContractInProgress)
			Parameters
				ParticipantGroup
				PrmTier                  is a ContractTier

			Parameter Rules
				ParticipantGroup
					required
					constraint (ParticipantGroup.MemberGroup)
						"CannotUseGroupThatIsNotForManufacturerAndDistributorContracts"
					if (ManufacturerWithMembers)
						if (first AnyTierMembersRel.CompanyType)
							constraint (ParticipantGroup.CompanyType)
								"CannotImportMembersFromMemberGroupThatUsesLocations;CompanyTierMembersAlreadyExist"
						if (first AnyTierMembersRel.LocationType)
							constraint (ParticipantGroup.LocationType)
								"CannotImportMembersFromMemberGroupThatUsesCompanies;LocationTierMembersAlreadyExist"

			Action Rules
				invoke CreateMembersForAContract ParticipantGroupLine
					invoked.ParmProcurementGroup			= ContractGroup
					invoked.ParmContract					= Contract
					invoked.ParmParticipantGroup            = ParticipantGroup
					invoked.ParmTier                        = PrmTier

		EditHeaderSpread is an Instance Action
			restricted
			Parameters
				InAmount						is an InternationalAmount
				InTaxAmount						is an InternationalAmount
				InAddOnChargeAmount				is an InternationalAmount
				InCurrency                      is a Currency
				InTransactionDate               is Date
				InRequestedAmount               is an InternationalAmount 
				InInvoiceAmount                 is an InternationalAmount 
				BypassEditLimits                is Boolean

			Action Rules

				include IncomingCurrencyConversion
				if  (!IncludeAOCInMaxEdits           
				and  !IncludeTaxInMaxEdits)
					TransientCurrencyAmount = ConvertedAmount + ConvertedRequestedAmount    
				else
				if  (IncludeAOCInMaxEdits
				and  !IncludeTaxInMaxEdits)
					TransientCurrencyAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedAddOnChargeAmount
				else
				if  (!IncludeAOCInMaxEdits
				and  IncludeTaxInMaxEdits)
					TransientCurrencyAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount
				else
					TransientCurrencyAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount + ConvertedAddOnChargeAmount

				LocalAmountUpdateDate  = InTransactionDate
				if (!BypassEditLimits)
					if (ContractSpreadForAmountUpdateRel exists)
						for each ContractSpreadForAmountUpdateRel
							if (LocalAmountUpdateDate >= each.SpreadDate)
								invoke EditUpdateUsedAmount each
									invoked.InUsedAmount 		= TransientCurrencyAmount
								end for each

		UpdateContractAmounts is an Instance Action  
			restricted
			refresh and lock this instance
			Parameters
				InAmount						is an InternationalAmount  
				InTaxAmount						is an InternationalAmount
				InAddOnChargeAmount				is an InternationalAmount
				InRequestedAmount               is an InternationalAmount
				InInvoiceAmount                 is an InternationalAmount  
				InCurrency                      is a Currency
				InTransactionDate               is Date
				DirectToContract				is Boolean
				FromCancelOrDelete	            is Boolean
				FromMatch                       is Boolean

			Action Rules

				LocalPercentOrdered = PercentOrdered 
				if (DirectToContract
				or  InCurrency != Contract.CurrencyCode)
					include IncomingCurrencyConversion
				else
					ConvertedAmount            = InAmount
					ConvertedTaxAmount         = InTaxAmount
					ConvertedAddOnChargeAmount = InAddOnChargeAmount
					ConvertedRequestedAmount   = InRequestedAmount
					ConvertedInvoiceAmount     = InInvoiceAmount
				if (InAmount != 0)
					AmountOrdered = ConvertedAmount + AmountOrdered
				if (InTaxAmount != 0)
					TaxAmountOrdered = ConvertedTaxAmount + TaxAmountOrdered
				if (InAddOnChargeAmount != 0)
					AddOnChargeAmountOrdered = ConvertedAddOnChargeAmount + AddOnChargeAmountOrdered
				if (InRequestedAmount != 0)
					AmountRequested = ConvertedRequestedAmount + AmountRequested
				if (InInvoiceAmount !=0)
					RetainageInvoiceAmount = ConvertedInvoiceAmount + RetainageInvoiceAmount

				if (AmountOrdered < 0)
					AmountOrdered = 0
				if (AmountRequested < 0)
					AmountRequested = 0
				if (AddOnChargeAmountOrdered < 0)
					AddOnChargeAmountOrdered = 0
				if (TaxAmountOrdered < 0)
					TaxAmountOrdered = 0
				if (RetainageInvoiceAmount < 0)
					RetainageInvoiceAmount = 0

				if  (!IncludeAOCInMaxEdits           
				and  !IncludeTaxInMaxEdits)
					ConvertedTotalAmount = ConvertedAmount + ConvertedRequestedAmount    
				else
				if  (IncludeAOCInMaxEdits
				and  !IncludeTaxInMaxEdits)
					ConvertedTotalAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedAddOnChargeAmount
				else
				if  (!IncludeAOCInMaxEdits
				and  IncludeTaxInMaxEdits)
					ConvertedTotalAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount
				else
					ConvertedTotalAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount + ConvertedAddOnChargeAmount

				LocalAmountUpdateDate  = InTransactionDate
				if (InAmount != 0)
					if (ContractPricingForAmountUpdateRel exists)
						invoke UpdateAmountOrdered last ContractPricingForAmountUpdateRel
							invoked.AmountOrdered += ConvertedTotalAmount

				if (NotificationPercent > 0
				and PercentOrdered >= NotificationPercent
				and LocalPercentOrdered < NotificationPercent)
					send email
						to PrimaryContactRel.DerivedEmail
						from config.DefaultFromEmailAddress
						cc DerivedSecondaryContactEmailAddressList
						subject "<ContractGroupEmailTemplate2Rel.FinalNotificationPercentExceededSubject>"
						Contents
							"<ContractGroupEmailTemplate2Rel.FinalNotificationPercentExceededContent>"

					invoke Create ContractNotificationEmail
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						initialize invoked.ContractDeliverable
						initialize invoked.ContractMilestone
						initialize invoked.SentToMilestoneContact
						initialize invoked.SentToDeliverableContact
						invoked.SentToEmailAddress				= PrimaryContactRel.DerivedEmail
						invoked.SentToCc                        = DerivedSecondaryContactEmailAddressList
						invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
						invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
						invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalNotificationPercentExceededSubject
						invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalNotificationPercentExceededContent
						invoked.NotificationType				= 6

			Exit Rules
				LocalAmountRemaining   = AmountRemaining
				LocalAmountUpdateDate  = InTransactionDate

				if (ContractSpreadForAmountUpdateRel exists)
					for each ContractSpreadForAmountUpdateRel
						if (LocalAmountUpdateDate >= each.SpreadDate)
							invoke UpdateUsedAmount each
								invoked.InUsedAmount 		= ConvertedTotalAmount
								invoked.FromCancelOrDelete 	= FromCancelOrDelete
								invoked.FromMatch           = FromMatch
							end for each

				if (CreateCommitments.Header
				or  CreateCommitments.HeaderSpread)
					invoke UpdateReportCurrencyAmountInstance

				if (CreateCommitments.Header
				and !FromMatch)
					if (CommitmentAccount.Project entered)
						TransientExchangeDate = EffectiveDate
						LocalPostingDate  = EffectiveDate
					LocalFromCancelOrDelete = FromCancelOrDelete
					LocalFromUpdateAmount   = true
					include ManageCommitments

				ConvertedTotalAmount		= 0
				ConvertedAmount             = 0
				ConvertedRequestedAmount    = 0 

		CalculateUsedForNewSpread is an Instance Action   
			restricted

			Parameters
				InAmount						is an InternationalAmount  
				InTaxAmount						is an InternationalAmount
				InAddOnChargeAmount				is an InternationalAmount
				InRequestedAmount               is an InternationalAmount
				InInvoiceAmount                 is an InternationalAmount  
				InCurrency                      is a Currency
				InTransactionDate               is Date
				InSpreadDate                    is Date

			Action Rules
				include IncomingCurrencyConversion

				if  (!IncludeAOCInMaxEdits           
				and  !IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount
				else
				if  (IncludeAOCInMaxEdits
				and  !IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedAddOnChargeAmount
				else
				if  (!IncludeAOCInMaxEdits
				and  IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount
				else
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount + ConvertedAddOnChargeAmount

			Exit Rules

				LocalSpreadDate					= InSpreadDate
				invoke UpdateUsedAmount first SingleSpreadRel
					invoked.InUsedAmount 			= TransientUsedAmount
					invoked.FromSpreadAfterActive 	= true

		FinishUpdateContractAmounts is an Instance Action
			restricted
			Action Rules

				if (CreateCommitments.Header)
					if (CommitmentAccount.Project entered)
						TransientExchangeDate = EffectiveDate
						LocalPostingDate      = EffectiveDate
					LocalFromUpdateAmount   = true
					include ManageCommitments

				if (CreateCommitments.HeaderSpread)
					for each ContractSpreadForAmountUpdateRel
						invoke FinishUpdateUsedAmount each

				if (CreateCommitments.Line)
					for each ContractLineDistributionRel
						invoke FinishUpdateCommitments each
							if (initiating action = "PayablesInvoice.1500MaUnmatch"
							or  initiating action = "MatchInvoiceMessage.ReleaseInvoiceMessage"
							or  initiating action = "PayablesInvoiceDetail.UnmatchPhase3InvoiceDetail"
							or  initiating action = "PayablesInvoice.InvoiceUnmatch")
								invoked.ParmFromUnmatch = true

				if (CreateCommitments.LineSpread)
					for each ContractLineDistSpreadRel
						invoke FinishUpdateUsedAmount each

		UpdateCommitmentFromAllowance is an Instance Action
			restricted
			Action Rules

				if (HasBeenActivated)
					LocalInternalChange = true
				if (CreateCommitments.Header)
					invoke UpdateReportCurrencyAmountInstance
					include ManageCommitments
				if (CreateCommitments.HeaderSpread)
					for each ContractSpreadForAmountUpdateRel
						invoke UpdateCommitmentFromAllowance each  

		CheckOut is an Instance Action
			valid when (SupplierOkToCheckOutIDMDoc)
			Local Fields
				LocalExecute	is Boolean
			Action Rules
				if (LatestRevisionRel.IDMUniqueId entered)
					IDMItem.IDMUniqueId		= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType	= "FSM_ContractRedlineDocument"
					if (IDMItem.GetItemDetails)
						IDMItem.IDMPID		= IDMItem.IDMItemDetails.PID
						LocalExecute 		= IDMItem.CheckOut
						constraint (LocalExecute)
							"AnErrorInCheckOutWasEncountered"

		UndoCheckOut is an Instance Action
			valid when (SupplierOkToUndoCheckOutIDMDoc)
			Local Fields
				LocalExecute	is Boolean
			Action Rules
				if (LatestRevisionRel.IDMUniqueId entered)
					IDMItem.IDMUniqueId		= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType	= "FSM_ContractRedlineDocument"
					if (IDMItem.GetItemDetails)
						IDMItem.IDMPID		= IDMItem.IDMItemDetails.PID
						LocalExecute 		= IDMItem.UndoCheckOut
						constraint (LocalExecute)
							"AnErrorInUndoCheckOutWasEncountered"

		CheckIn is an Instance Action
			valid when (SupplierOkToUndoCheckOutIDMDoc)
			Parameters
				ParmAttachment is an IDMAttachment

			Local Fields
				LocalExecute is Boolean

			Action Rules
				if (LatestRevisionRel.IDMUniqueId entered)
					IDMItem.IDMUniqueId		= LatestRevisionRel.IDMUniqueId
					IDMItem.DocumentType	= "FSM_ContractRedlineDocument"
					if (IDMItem.GetItemDetails)
						IDMItem.IDMPID		= IDMItem.IDMItemDetails.PID
						IDMItem.Attachment	= ParmAttachment

						LocalExecute		= IDMItem.UpdateAttachment
						constraint (LocalExecute)
							"AnErrorInUpdatingContractDocumentWasEncountered"

		CreateIDMRedlineDocument is an Instance Action
			valid when (CreateRedlineAction)
			Parameters
				Title					is a Description
				Description				is Text
				Attachment				is an IDMAttachment
				CreatedBySupplier		is Boolean

			Action Rules
				include CreateIDMContractRedlineDocument

		UpdateRedlineDocument is an Instance Action
			valid when (ForCMUpdate)
			default label is "UpdateIDMRedlineDocument"
			Parameters
				Title					is a Description
				Description				is Text
				Attachment				is an IDMAttachment
				CreatedBySupplier		is Boolean

			Parameter Rules
				Title
					initial value is LatestRevisionRel.Title
				Description
					initial value is LatestRevisionRel.Description
				Attachment
					required
						"MustEnterAttachment"

			Action Rules
				if (DerivedFileExistsInIDM)
					invoke Update LatestRevisionRel
						invoked.Title				= Title
						invoked.Description			= Description
						invoked.TransientAttachment	= Attachment
						invoked.CreatedBySupplier   = CreatedBySupplier
				else
					confirmation required 
						"The_existing_contract_redline_document_has_been_deleted._A_new_one_will_be_created._Proceed?"
					
					include CreateIDMContractRedlineDocument 

		DeleteRedlineDocument is an Instance Action
			default label is untranslatable
			restricted					

			Local Fields
				LocalAsyncId is an AsyncActionRequest

			Entrance Rules
				if (Contract.UseIDM and RedlineNotifEmailAttachmentExists)
					confirmation required
						"You're_attempting_to_delete_a_document_that's_referenced_as_an_attachment_to_notification_email._Would_you_like_to_proceed?"	
				else
					confirmation required 
						"You_are_about_to_delete_the_Contract_Redline_Document._Proceed?"
		
			Action Rules

				invoke PopulateIDMRedlineTitle ContractNotificationEmailAttachment in background
					assign async action request id to LocalAsyncId
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract = Contract
					invoked.PrmContractRedlineDocument = LatestRevisionRel.ContractRedlineDocument
				
				invoke DeleteIDMRedlineDocument in background
					run after LocalAsyncId

		DeleteIDMRedlineDocument is an Instance Action
			default label is untranslatable
			restricted		
			
			Action Rules

				if (DerivedFileExistsInIDM)
					IDMItem.DocumentType 		= "FSM_ContractRedlineDocument"
					IDMItem.IDMUniqueId 		= LatestRevisionRel.IDMUniqueId
					IDMItem.OverrideUser  		= true
					LocalExecute 				= IDMItem.Delete

				invoke Delete OtherRevisionsRel
				invoke Delete LatestRevisionRel
				initialize IDMDocumentPID

		UpdateIDMTemplate is an Instance Action
			valid when (ShowUpdateIDMTemplate)
			Parameters
				PrmContractDocumentIDMTemplate is an IDMTemplate
					default label is "ContractDocumentTemplate"

			Parameter Rules
				PrmContractDocumentIDMTemplate
					required
					initial value is ContractDocumentIDMTemplate
					constraint (PrmContractDocumentIDMTemplate.IDMDocumentType.ContractDocument)
						"InvalidTemplate"

			Action Rules
				invoke FastUpdate
					invoked.ContractDocumentIDMTemplate = PrmContractDocumentIDMTemplate

		ModifyContract is an Instance Action
			valid when (CanUpdateActive)

			Action Rules
				AllowActiveUpdates = true

		UpdateActive is an Update Action
			valid when (UpdateActiveAllowed)

			Field Rules

				MaximumAmount
					constraint (MaximumAmount >= MaximumAmountInUse)
						"CannotSetTheLifetimeMaximumAmountBelowTheAmountAlreadyOrdered,Invoiced,OrRequested-<MaximumAmountInUse>"

				GPONegotiated
					if (GPONegotiated changed
					and old GPONegotiated)
						constraint (!ContractOnRebateQualifierContractRel exists)
							"CannotChange_GPONegotiated;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"

				GPOSupplier
					if (GPOSupplier changed
					and old GPOSupplier entered)
						constraint (!ContractOnRebateQualifierContractRel exists)
							"CannotChange_GPOSupplier;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"

				AllowReferenceOfItemsNotOnContract
					if (HasAPurchaseType
					and HasBeenActivated)
						if (AllowReferenceOfItemsNotOnContract changed
						and AllowReferenceOfItemsNotOnContract = false)
							constraint (ActivatedContractLineRel exists)
								"AllowReferenceOfItemsNotOnContractMustBeTrueWhenThereAreNoActivatedContractLines"

				PreferredContract
					if (PreferredContract changed
					and HasBeenActivated)
						if (old PreferredContract
						and PreferredMfgContractExists)
							invoke DeletePreferredMfgContract

			Action Rules

				LocalVendor = Vendor					

				if (!HasBeenActivated)

					if (ApPoPurchaseFrom.PurchaseFromLocation changed
					and ApPoPurchaseFrom.PurchaseFromLocation entered)
						constraint (PurchaseFromLocationExists)
							"POPurchaseFrom:<ApPoPurchaseFrom.PurchaseFromLocation>DoesNotExist"

					if ((WorkingContractType changed
					or WorkingContractID changed)
					and (WorkingContractType.SourcingEvent))
						constraint (SERelatedContractRel exists)
							"SourcingEventWorkingContractTypeRequiresAnExistingSourcingEventAsTheWorkingContractID"

					if (ContractSource = "1")
						if (!ContractQuestion set exists)
							for each QuestionsByTypeAndClassRel
								CheckQuestion = each.Question
								if (!CheckContractQuestionRel exists)
									invoke AttachQuestionToContractIndirect LocalQuestionRel
										invoked.Contract 		= Contract
										invoked.FromInterview 	= true

					if (!HasAPurchaseType)
						IncludeAOCInMaxEdits = false
						IncludeTaxInMaxEdits = false

					if (Stockless changed
					and Stockless)
						constraint (ContractLineServiceItemRel !exists)
							"CannotChangeToStockless;ServiceItemsExist"
						constraint (ContractParticipantNonStocklessReqLocRel !exists)
							"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"
						constraint (ContractTierMemberNonStocklessReqLocRel !exists)
							"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"
						constraint (ContractPricingMemberNonStocklessReqLocRel !exists)
							"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"

				include UpdateRules
				include ReleaseEdits
				if (ContractStatus = 6)
					include ActivateContractEdits

			Exit Rules

				include UpdateExitRules

				if (!HasBeenActivated)
					if (MfgContractRel exists)
						if ((IsDistributorContract)
						or (IsNotDistributorAndNotManufacturer))
							invoke Delete MfgContractRel
					else
						if (IsManufacturerContract and NotContractTemplate and !MultiTierDistributorContract)
							if (MfgContractRel !exists)
								invoke Create MfgContractRel
									invoked.ContractGroup				= ContractGroup
									invoked.ManufacturerContractPivot	= Contract
							for each ContractTierMember set
								if (each.MfgContractMemberPivotRel !exists)
									invoke Create MfgContractMemberPivot
										invoked.ContractGroup														= ContractGroup
										invoked.ManufacturerContractPivot											= Contract
										invoked.MfgContractMemberPivot.ParticipantLocation.Company 					= each.ContractTierMember.Company
										invoked.MfgContractMemberPivot.ParticipantLocation.Location					= each.ContractTierMember.Location
										invoked.MfgContractMemberPivot.ParticipantLocation.RequestingLocation		= each.ContractTierMember.RequestingLocation
										invoked.PurchaseMethod														= each.ContractTierMember.PurchaseMethod
							if (ContractLinesExist)
								invoke CreateMfgContractLinePivot ContractLine
									invoked.PrmContractGroup	= ContractGroup
									invoked.PrmContract     	= Contract

				AllowActiveUpdates = false

		TriggerContractService is an Instance Action
			restricted
			Action Rules
				LocalFinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				LocalAccountingEntity		= PoCompanyRel.Company.GeneralLedgerCompany.AccountingEntity
				LocalCompany				= PoCompanyRel.Company
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					if (action != "UpdateBODIdFields") 
						LocalActionCode = LocalActionCode.Create
						increment bod id.VariationID
						LocalContractLineCount = instance count of ContractLine set
						include TriggerContractRules


		TriggerProcessContractService is an Instance Action
			restricted
			Parameters
				PrmTriggerFrom 		is Alpha size 40
			Action Rules
				LocalFinanceEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				LocalAccountingEntity      = PoCompanyRel.Company.GeneralLedgerCompany.AccountingEntity
		 		LocalCompany = PoCompanyRel.Company
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					if (action type.Update)
						increment bod id.VariationID
						if(PrmTriggerFrom = "ContractLine")
							LocalActionCode = LocalActionCode.Create
						else
							LocalActionCode = LocalActionCode.Update
						LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
						include TriggerProcessContractRules






		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"

			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		BODDataInitialLoadContractCriteria is a Set Action
			restricted
			Parameters
				PrmContractGroup				is a ContractGroup
				PrmFromContract					is a Contract
				PrmToContract					is a Contract
			Parameter Rules
			Instance Selection
				where  (((PrmContractGroup entered
				and		 PrmContractGroup = ContractGroup)
				or		 PrmContractGroup not entered)
				and    ((PrmFromContract entered
				and		 PrmFromContract <= Contract)
				or		 PrmFromContract not entered)
				and    ((PrmToContract entered
				and		 PrmToContract >= Contract)
				or		 PrmToContract not entered)
				and     (ContractStatus.Released
				or 		 ContractStatus.Active
				or		 ContractStatus.Closed))
			Sort Order
			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
					LocalAccountingEntity      = PoCompanyRel.Company.GeneralLedgerCompany.AccountingEntity
		 			LocalCompany = PoCompanyRel.Company
					if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger)
						LocalActionCode = LocalActionCode.Create
						increment bod id.VariationID
						LocalContractLineCount = instance count of ContractLine set
						include TriggerContractRules

						include TriggerProcessContractRules


		PopulateContractPurchaseType is a Set Action
			restricted

			Instance Selection
				where (PurchaseType not entered)

			Action Rules
				Instance Rules
					if (ContractSubtype entered)
						PurchaseType = ContractSubtype.PurchaseType
					else
						PurchaseType = ContractType.PurchaseType

		PurgeContract is a Set Action
			restricted

			Parameters
				PrmContractGroup					is a ContractGroup
				PrmPurgeVendorAgreement				is AlphaUpper size 1
					States
						PurgeVendorAgreements	value is "Y"
							default label is "Purge Contracts"
						ReportOnlyDoNotPurge	value is "R"

				PrmPurgeAgreementType				is AlphaUpper size 1
					States
						PurgeAllAgreementTypes	value is "A"
							default label is "Purge All Contract Types"
						BlanketAgreements		value is "B"
							default label is "Blanket Contracts"
						Contracts				value is "C"
						StandingAgreements		value is "S"
							default label is "Standing Contracts"
						CatalogsQuotes			value is "T"
							default label is "Catalogs/\Quotes"
						ServiceAgreements		value is "V"
							default label is "Service Contracts"

				ThroughEffectiveOrExpirationDate	is Numeric 1
					default label is "ThroughEffective_orExpirationDate"
					States
						ThroughEffectiveDate	value is 1
						ThroughExpirationDate	value is 2

				ThroughDate							is Date

			Parameter Rules
				ThroughEffectiveOrExpirationDate
					required
				ThroughDate
					required

			Local Fields
				LocalSetPurgeCount is Numeric 10

			Instance Selection
				include deleted records
				where (ContractGroup = PrmContractGroup
				and	  ((ThroughEffectiveOrExpirationDate.ThroughEffectiveDate
						and EffectiveDate <= ThroughDate)
					or (ThroughEffectiveOrExpirationDate.ThroughExpirationDate
						and ExpirationDate entered
						and ExpirationDate <= ThroughDate))
				and	  not SkipContractPurge)

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoContractRecordsFoundToPurge"
						priority is high
						detail is "ThereAreNoContractRecordsPurged"

				Set Rules
					Exit Rules
						LocalActor = actor
						invoke SendPurgeNotification
							invoked.PrmPurgeCount			= LocalSetPurgeCount
							if (PrmPurgeVendorAgreement.PurgeVendorAgreements)
								invoked.PrmPurgeRecords 	= true
							invoked.PrmActor                = LocalActor
				Instance Rules
					if (PrmPurgeAgreementType.PurgeAllAgreementTypes
					or AgreementType = PrmPurgeAgreementType)
						LocalSetPurgeCount +=1
						if (PrmPurgeVendorAgreement.PurgeVendorAgreements)
							invoke Purge
		
		CreateEvaluationsFromSchedule is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
					default label is "ContractGroup"
			Parameter Rules
				PrmContractGroup
					required
			Instance Selection
				where	(PrmContractGroup = ContractGroup
				and		CanCreateEvaluation = true
				and		((EvaluationDate.EvaluationDates[1].EvaluationDate entered
				and		 EvaluationDate.EvaluationDates[1].EvaluationDate <= current date
				and		EvaluationDate.EvaluationDates[1].EmailSent = false)
				or		(EvaluationDate.EvaluationDates[2].EvaluationDate entered
				and		 EvaluationDate.EvaluationDates[2].EvaluationDate <= current date
				and		EvaluationDate.EvaluationDates[2].EmailSent = false)
				or		(EvaluationDate.EvaluationDates[3].EvaluationDate entered
				and		 EvaluationDate.EvaluationDates[3].EvaluationDate <= current date
				and		EvaluationDate.EvaluationDates[3].EmailSent = false)
				or		(EvaluationDate.EvaluationDates[4].EvaluationDate entered
				and		 EvaluationDate.EvaluationDates[4].EvaluationDate <= current date
				and		EvaluationDate.EvaluationDates[4].EmailSent = false)
				or		(EvaluationDate.EvaluationDates[5].EvaluationDate entered
				and		 EvaluationDate.EvaluationDates[5].EvaluationDate <= current date
				and		EvaluationDate.EvaluationDates[5].EmailSent = false)))
			Action Rules
				Instance Rules
					if (EvaluationDate.EvaluationDates[1].EvaluationDate entered
					and EvaluationDate.EvaluationDates[1].EvaluationDate <= current date
					and EvaluationDate.EvaluationDates[1].EmailSent = false)
						EvaluationDate.EvaluationDates[1].EmailSent = true
						invoke CreateContractEvaluation
							invoked.PrmDescription = "Auto_Created"

					if (EvaluationDate.EvaluationDates[2].EvaluationDate entered
					and EvaluationDate.EvaluationDates[2].EvaluationDate <= current date
					and EvaluationDate.EvaluationDates[2].EmailSent = false)
						EvaluationDate.EvaluationDates[2].EmailSent = true
						invoke CreateContractEvaluation
							invoked.PrmDescription = "Auto_Created2"

					if (EvaluationDate.EvaluationDates[3].EvaluationDate entered
					and EvaluationDate.EvaluationDates[3].EvaluationDate <= current date
					and EvaluationDate.EvaluationDates[3].EmailSent = false)
						EvaluationDate.EvaluationDates[3].EmailSent = true
						invoke CreateContractEvaluation
							invoked.PrmDescription = "Auto_Created3"
					
					if (EvaluationDate.EvaluationDates[4].EvaluationDate entered
					and EvaluationDate.EvaluationDates[4].EvaluationDate <= current date
					and EvaluationDate.EvaluationDates[4].EmailSent = false)
						EvaluationDate.EvaluationDates[4].EmailSent = true
						invoke CreateContractEvaluation
							invoked.PrmDescription = "Auto_Created4"
					
					if (EvaluationDate.EvaluationDates[5].EvaluationDate entered
					and EvaluationDate.EvaluationDates[5].EvaluationDate <= current date
					and EvaluationDate.EvaluationDates[5].EmailSent = false)
						EvaluationDate.EvaluationDates[5].EmailSent = true
						invoke CreateContractEvaluation
							invoked.PrmDescription = "Auto_Created5"
					
					if (PerformanceEvaluationContactRel.PerformanceEvaluator = true)
						invoke Create ContractNotificationEmail
							invoked.ContractGroup                   = ContractGroup
							invoked.Contract                        = Contract
							initialize invoked.ContractDeliverable
							initialize invoked.ContractMilestone
							initialize invoked.SentToMilestoneContact
							initialize invoked.SentToDeliverableContact
							invoked.SentToEmailAddress              = DerivedPerformanceEvaluationContactEmailAddressList
							invoked.SentFromPrimaryContractContact  = Contract.PrimaryContact
							invoked.SentFromEmailAddress            = SupplierGroupRel.AdminEmailAddress
							invoked.NotificationType                = 10

                    send email
                        to DerivedPerformanceEvaluationContactEmailAddressList
                        from ContractGroup.SupplierGroupRel.AdminEmailAddress
                        subject "AContractPerformanceEvaluationIsReadyToBeScored"
                        Contents
                            "PerformanceEvaluationIsReadyToBeScoredFor<Contract.RepresentativeText>."
                            "ContractNameIs<Contract.RepresentativeText>"
                            "Click<Contract.PerformanceEvaluationLinkback>ToScoreTheEvaluation."
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeContractLineRel
				invoke Purge PurgeRebateQualifierContractRel
				invoke Purge PurgeContractQuestionAnswerRel
				invoke Purge PurgeContractQuestionRel
				invoke Purge PurgeBudgetEditErrorRel
				invoke Purge PurgeGLCommitRel
				invoke PurgeClosedContract PurgeManufacturerContractPivotRel
				invoke Purge PurgeManufacturerContractRel
				invoke Purge PurgeContractPreferredManufacturerRel
				invoke Purge PurgeContractDiversityRel
				invoke Purge PurgeContractImportDistributorRel
				invoke Purge PurgeContractParticipantRel
				invoke Purge PurgeContractPricingRel
				invoke Purge PurgeContractArticleRel
				invoke Purge PurgeContractRebateRel
				invoke Purge PurgeContractTierMemberRel
				invoke Purge PurgeContractTierRel
				invoke Purge PurgeRelatedContractRel
				invoke Purge PurgeContractAttachedContactRel
				invoke Purge PurgeContractCommentRel
				invoke Purge PurgeContractAttachmentRel
				invoke Purge PurgeContractMilestoneRel
				invoke Purge PurgeContractDeliverableRel

		SendPurgeNotification is an Instance Action
			restricted
			Parameters
				PrmPurgeCount		is Numeric 10
				PrmPurgeRecords		is Boolean
				PrmActor            is an Actor
			Action Rules
				LocalPurgeCount		= PrmPurgeCount
				LocalPurgeRecords	= PrmPurgeRecords
				send notification
					to PrmActor
					description is "ContractPurgeHasBeenCompleted"
					priority is high
					detail is "<DerivedCompletionDetailText>"



		TriggerPOContractPulseAlert is an Instance Action
			restricted
			Parameters
				PrmPulseAlert is Alpha size 100
			Action Rules
				LocalPulseAlertFrom = PrmPulseAlert
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPulseAlertRel.Enable)
			  		if(FSMBODConfigurationDetailPulseAlertRel.Enable)
				   		invoke TriggerPulseAlert FSMBODConfigurationPulseAlertRel
							invoked.PrmActorGroup 	= "BUYER"
							invoked.PrmMainXML 		= POContractPulseAlertXML
							invoked.PrmDescription	= POContractPulseAlertDescription
							invoked.PrmBODID		= DerivedPulseAlertBODID


		DeleteContract is an Instance Action
			valid when (CanDeleteNoTemplates)
			confirmation required
				"AllRecordsWillBeDeleted;DoYouWantToContinue?"

			Action Rules
           		if (ContractSource.Event)
                    confirmation required
                        "ContractWasCreatedFromAnEvent;IfDeleted,NewContractCannotBeCreatedFromTheEvent;DoYouWantToContinue?"

				constraint (AmountOrdered = 0)
					"CannotDeleteContractIfPurchaseOrdersOrInvoicesHaveBeenCreatedAgainstIt"

				constraint (UnreleasedPolinesByContractRel !exists
			 	and 		UnreleasedRequisitionLinesByContractRel !exists)
					"CannotDeleteContract,UnreleasedPOOrRequisitionLinesExistThatAreAssociatedWithTheContract"

				constraint (RequisitionLinesByContractRel !exists)
					"CannotDelete;RequisitionLinesExistThatAreAssociatedWithTheContract"

				constraint (AnyPolinesByContractRel !exists)
					"CannotDelete;PurchaseOrderLinesExistThatAreAssociatedWithTheContract"

				constraint (UnreleasedPayablesInvoiceDetailRel !exists)
					"CannotDeleteContract,UnreleasedInvoiceLinesExistThatAreAssociatedWithTheContract"

				constraint (UnreleasedServiceInvoicesRel !exists)
					"CannotDeleteContract,UnmatchedInvoicesExistThatAreServiceContractRelated"

				if (IsManufacturerContract)
					if (HasDistributorContract)
						for each AttachedManufacturerContractsRel
							constraint (each.HasOtherManufacturerContract)
								"CannotDelete;RelatedDistributorContract<each.Contract>HasNoOtherManufacturerContracts;MustDeleteDistributorContractBeforeDeletingThisContract"
							constraint (each.NoLinesWithOrders)
								"CannotDelete;RelatedDistributorContract<each.Contract>HasPurchaseOrdersCreatedAgainstIt"
						confirmation required
							"DistributorContractsAndLinesExistForThisManufacturerContract;DistributorContractInformationRelatedToTheManufacturerContractWillBeDeleted;DoYouWantToContinue?"
						for each AttachedManufacturerContractsRel
							invoke Delete each
				invoke DeleteRestricted ContractQuestion set

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					invoke Delete WarningBudgetEditErrorRel
					invoke Delete BudgetEditErrorRel
					invoke Delete BudgetTemplateGroupTotalRel
					invoke Delete BudgetEditBatchRel
					invoke Delete BudgetRebuildBTGTRel
           			if (ContractSpreadRel exists)
						for each ContractSpreadRel 
							invoke DeleteFromContract each
					if (GLCommitRel.Status.Released)
                        invoke UpdateTemplateTotals BudgetTemplate
                            invoked.PrmFinanceEnterpriseGroup           = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
                            invoked.PrmTransactionCodeBlock             = CommitmentAccount
                            invoked.PrmDate                             = GLCommitRel.EntityYearPeriod.Date
                            invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.AlternateAmount3   = GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ToAlternateAmount3 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ProjectAmount      = GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ReportAmount3      = GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ReportAmount4      = GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
                            invoked.PrmReportAmounts.ReportAmount5      = GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
                            invoked.PrmBusinessClassName                = "Contract"
                            invoked.PrmEditContext                      = "Delete"					
					invoke Purge GLCommitRel 

                if (ContractSpreadRel exists)
                    for each ContractSpreadRel
                        invoke DeleteFromContract each
				invoke Delete ContractVersionsRel
				invoke Delete MfgContractRel
				invoke DeleteNoRules ManufacturerContractForDistContractRel
				invoke Delete ContractExistingDiversityRel
				if (ContractImportDistributorRel exists)
					for each ContractImportDistributorRel
						invoke ClearDistributorContract each

				if (IsManufacturerContract)
					if (HasDistributorContract)
						for each AttachedManufacturerContractsRel
							FromMassDelete = true
							invoke Delete each

				if (GPOContractImportRel exists)
					invoke ClearContractAndLine ContractLineImport 
						invoked.ParmContractGroup	= ContractGroup
						invoked.ParmContractImport  = GPOContractImportRel.ContractImport

					invoke ClearContractRelatedLineErrors ContractLineImportError 
						invoked.ParmContractGroup	= ContractGroup 
						invoked.ParmContractImport  = GPOContractImportRel.ContractImport 

				if (ContractImportGPOSupplierForThisContractRel exists)
					for each ContractImportGPOSupplierForThisContractRel
						invoke Update each
							initialize invoked.DefaultDistributorContract

             	if (OtherContractsReferencingThisContractRel exists)
                    for each OtherContractsReferencingThisContractRel
                        invoke Delete each			

				if (NumberOfLines = 0)
					invoke Delete
					if (MaximumAmount entered
					and ParentContract entered)
						invoke CalculateTotalChildMaximumAmount ParentContractRel					
				else
					invoke DeleteAllLines ContractLine
						invoked.ParmContractGroup   = ContractGroup
						invoked.ParmContract        = Contract

		DeleteWithTemplate is an Instance Action
			valid when (CanDeleteWithTemplates)
			default label is "Delete"
			confirmation required
				"AllRecordsWillBeDeleted;DoYouWantToContinue?"
			Parameters
				DeleteTemplateLines is Boolean
				ClearTemplateLines is Boolean

			Parameter Rules
				DeleteTemplateLines
					if (DeleteTemplateLines)
						constraint (!ClearTemplateLines)
							"CanOnlySelectDeleteLinesOrClearLines;NotBoth"
				ClearTemplateLines
					if (ClearTemplateLines)
						constraint (!DeleteTemplateLines)
							"CanOnlySelectDeleteLinesOrClearLines;NotBoth"
			Action Rules
           		if (ContractSource.Event)
                    confirmation required
                        "ContractWasCreatedFromAnEvent;IfDeleted,NewContractCannotBeCreatedFromTheEvent;DoYouWantToContinue?"

				constraint (AmountOrdered = 0)
					"CannotDeleteContractIfPurchaseOrdersOrInvoicesHaveBeenCreatedAgainstIt"

				constraint (UnreleasedPolinesByContractRel !exists
				and 		UnreleasedRequisitionLinesByContractRel !exists)
					"CannotDeleteContract,UnreleasedPOOrRequisitionLinesExistThatAreAssociatedWithTheContract"


				if (IsManufacturerContract)
					if (HasDistributorContract)
						for each AttachedManufacturerContractsRel
							constraint (each.NoLinesWithOrders)
								"CannotDelete;RelatedDistributorContract<each.ManufacturerContract>HasPurchaseOrdersCreatedAgainstIt"

						confirmation required
							"DistributorContractsAndLinesExistForThisManufacturerContract;DistributorContractInformationRelatedToTheManufacturerContractWillBeDeleted;DoYouWantToContinue?"

				invoke DeleteRestricted ContractQuestion set

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					invoke Delete WarningBudgetEditErrorRel
					invoke Purge  GLCommitDrillRel
					invoke Delete BudgetEditErrorRel
					invoke Delete BudgetTemplateGroupTotalRel
					invoke Delete BudgetEditBatchRel
					invoke Delete BudgetRebuildBTGTRel

				if (ProcurementTemplateRel exists)
					for each ProcurementTemplateRel
						invoke UpdateFast each
							invoked.Contract = 0
							invoked.Active   = false
				invoke DeleteOrClearFromContract ProcurementTemplateLine
					invoked.ParmProcurementGroup	= ContractGroup 
					invoked.ParmContract			= Contract
					if (DeleteTemplateLines)
						invoked.DeleteLines = true
					if (ClearTemplateLines)
						invoked.ClearLines  = true

				invoke Delete ContractVersionsRel
				invoke Delete MfgContractRel
				invoke Delete ManufacturerContractForDistContractRel
				invoke Delete ContractExistingDiversityRel
				if (ContractImportDistributorRel exists)
					for each ContractImportDistributorRel
						invoke ClearDistributorContract each

				if (IsManufacturerContract)
					if (HasDistributorContract)
						for each AttachedManufacturerContractsRel
							FromMassDelete = true
							invoke Delete each

				if (GPOContractImportRel exists)
					invoke ClearContractAndLine ContractLineImport 
						invoked.ParmContractGroup	= ContractGroup
						invoked.ParmContractImport  = GPOContractImportRel.ContractImport

				if (ContractImportGPOSupplierForThisContractRel exists)
					for each ContractImportGPOSupplierForThisContractRel
						invoke Update each
							initialize invoked.DefaultDistributorContract

             	if (OtherContractsReferencingThisContractRel exists)
                    for each OtherContractsReferencingThisContractRel
                        invoke Delete each	

				invoke DeleteAllLines ContractLine
					invoked.ParmContractGroup   = ContractGroup
					invoked.ParmContract        = Contract

		Delete is a Delete Action
			restricted

		CreateMatchServiceContractInvoice is an Instance Action
			valid when (PayablesInvoiceAvailable)
			default label is "AddContractToInvoice"
			Parameters
				PrmCompany is a PayablesCompany 
				PrmPayablesInvoice	is a PayablesInvoice
					default label is "PayablesInvoice"

			Action Rules
				LocalCompany = PrmCompany
				constraint (!MatchServiceContractInvoiceRel exist)
					"CreateFailed;InvoiceServiceContractExists"

				invoke Create MatchServiceContractInvoice 
					invoked.Company						= LocalCompany
					invoked.PayablesInvoice				= PrmPayablesInvoice
					invoked.Contract 					= Contract 

		SendSyncContractNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is ContractBODXML
					bod type is "Sync.Contract"
					accounting entity is DerivedBODAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID
					
		
		SendProcessContractNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is ProcessContractBODXML
					bod type is "Process.Contract"
					accounting entity is DerivedBODAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID
					
		TriggerContractServiceNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "Contract"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "Contract"
					invoked.PrmFinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
					invoked.PrmBusinessGroup			= ContractGroup
					invoked.PrmMainUserTemplate			= "IONSyncContract_Contract_Header_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODtrigger = true
				if(ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "Contract"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFEG
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= ContractGroup
							invoked.Reference2				= Contract
							initialize invoked.Error			
							initialize invoked.ErrorMessage		
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker			
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedFEG
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= ContractGroup
							invoked.Reference2				= Contract
							initialize invoked.Error			
							initialize invoked.ErrorMessage	
					invoke SendSyncContractNativeLPLBOD
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= ContractBODXML
							invoked.BODID								= DerivedBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= ContractBODXML
							invoked.BODID								= DerivedBODID
							
		TriggerNativeProcessContractRules is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationProcessContractRel
					invoked.PrmVerb 					= 2
					invoked.PrmNoun						= "Contract"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "Contract"
					invoked.PrmFinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
					invoked.PrmBusinessGroup			= ContractGroup
					invoked.PrmMainUserTemplate			= "IONProcessContract_Contract_Header_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationProcessContractRel.NativeLPLBODTrigger
				LocalBODtrigger = true
				if(ContractGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 2
							invoked.Noun 					= "Contract"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFEG
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= ContractGroup
							invoked.Reference2				= Contract
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedFEG
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Reference1				= ContractGroup
							invoked.Reference2				= Contract
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendProcessContractNativeLPLBOD
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= ProcessContractBODXML
							invoked.BODID								= DerivedProcessContractBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODXML									= ProcessContractBODXML
							invoked.BODID									= DerivedProcessContractBODID	

		CreateContractOrLinesFromSelectedLines is an Instance Action 
			valid when (CanCreateFromSelectedLines)
			allow user fields as parameters
			Parameters
				CreateAsManufacturerContract   	is Boolean 
				CreateDistributorContracts     	is Boolean 
				CloseExistingLines             	is Boolean 
				HoldExistingLines               is Boolean
				ProcurementReasonCode
				CreateContract                 	is Boolean 
				AddLinesToExistingContract     	is Boolean 
				ExistingContractForLineAdd      is a Contract
				FromInterface                   is Boolean 
				NewName 						is a Description
				NewDescription 					is Text
				NewContact                      is an Employee
				NewSupplier						is a Supplier
				NewSupplierContact				is a SupplierSourceId
				NewContractType					is a ContractType
				NewContractSubtype				is a ContractSubtype
				NewContractClassification		is a ContractClassification
				NewContractSubclassification	is a ContractSubclassification
				NewContractHasNoParent			is Boolean
				NewParentContract				is a Contract
				NewEffectiveDate				is Date
				NewExpirationDate				is Date
				NewContractReviewDate			is Date
				NewTargetedPurchasesFromDate	is Date
				NewTargetedPurchasesToDate		is Date
				NewCurrencyCode					is a Currency
				CopySelectAll					is Boolean
				CopyTiersOrDistributorPricing	is Boolean
				CopyContractParticipants		is Boolean
				CopyContacts					is Boolean
				CopyManufacturerContracts		is Boolean
				CopyContractLines				is Boolean
				CopyArticlesAndTerms			is Boolean
				CopyContractComments			is Boolean
				CopyContractAttachments         is Boolean
				CopyContractLineComments		is Boolean
				CopyContractLineAttachments     is Boolean
				CopyManualQuestions				is Boolean
				CopyMilestones					is Boolean
				CopyDeliverables				is Boolean
				CopyHoldForLines                is Boolean
				CopyLocations                   is Boolean
				CopyCapitatedInformation        is Boolean
				CopyQualifierContractsAndItems  is Boolean 
				CreateFromPartial               is Boolean 

			Parameter Rules

				CreateAsManufacturerContract
					initial value is true 
				
				CreateDistributorContracts 
					initial value is true
				
				AddLinesToExistingContract 
					if (AddLinesToExistingContract = true)
						constraint (ExistingContractForLineAdd entered)
							"MustEnterExistingContractToAddLinesTo"
						CreateContract = false 
				CreateContract 
					if (CreateContract = true)
						AddLinesToExistingContract = false 
						initialize ExistingContractForLineAdd
				
				ExistingContractForLineAdd
					constraint (ExistingContractForLineAdd != Contract)
						"ContractAndExistingContractToAddLinesToCannotBeTheSame"
					if (ExistingContractForLineAdd entered)
						constraint (ExistingContractForLineAdd.NotClosed 
						and (ExistingContractForLineAdd.ContractPurchaseType or ExistingContractForLineAdd.CatalogQuotePurchaseType)
						and !ExistingContractForLineAdd.ContractTemplate)
							"ContractToAddLinesToMustNotBeClosed;CannotBeTemplate;MustBeContractOrCatalogQuoteType"
						if (Contract.IsDistributorContract)
							constraint (!ExistingContractForLineAdd.IsDistributorContract)
								"CannotMoveSelectedLinesFromADistributorContractToAnotherDistributorContract;MustMoveAtManufacturerContractLevel"
						if (ExistingContractForLineAdd.IsManufacturerContract
						and Contract.IsManufacturerContract)
							for each Contract.ContractTierRel 
								LocalTier		= each.ContractTier 
								LocalContract	= ExistingContractForLineAdd.Contract 
								constraint (ExistingContractTierRel exists)
									"CannotAddLinesToContract<ExistingContractForLineAdd>;NotAllTiersOnContract<Contract>AreOnContractToAddLinesTo;MustAddTiersToContract<ExistingContractForLineAdd>BeforeProcessing"
				NewName
					initial value is Contract.Name 
					required
				NewDescription
					initial value is Contract.Description
					default to Contract.Description
				NewContact
					initial value is Contract.PrimaryContactRel.Contact
					default to Contract.PrimaryContactRel.Contact
				NewSupplier
					initial value is Contract.Supplier
					default to Contract.Supplier
					if (NewSupplierContact entered)
						required
							"SupplierIsRequiredWhenSupplierContactIsEntered"
				NewSupplierContact
					initial value is Contract.SupplierSourceId
					default to Contract.SupplierSourceId
					if (NewSupplier entered)
						required
							"SupplierContactIsRequiredWhenSupplierIsEntered"
				NewContractType
					initial value is Contract.ContractType
					default to Contract.ContractType
					required
						"ContractTypeIsRequired"
				NewContractSubtype
					initial value is Contract.ContractSubtype
					if (NewContractSubtype entered)
						constraint (NewContractType entered)
							"ContractTypeIsRequiredWhenContractSubtypeIsEntered"
				NewContractClassification
					initial value is Contract.ContractClassification
					default to Contract.ContractClassification
					required
						"ContractClassificationIsRequired"
					if  (NewContractSubclassification not entered)
						if (Contract.ContractSubclassification not entered
						and Contract.ContractClassification.UseIDM)
							constraint (NewContractClassification.UseIDM)
								"CannotSwitchToNonIDMClassification"

						if (Contract.ContractSubclassification entered
						and Contract.ContractSubclassification.UseIDM)
							constraint (NewContractClassification.UseIDM)
								"CannotSwitchToNonIDMClassification"
				NewContractSubclassification
					initial value is Contract.ContractSubclassification
					if (NewContractSubclassification entered)
						constraint (NewContractClassification entered)
							"ContractClassificationIsRequiredWhenContractSubclassificationIsEntered"
					if  (NewContractSubclassification entered)
						if (Contract.ContractSubclassification not entered
						and Contract.ContractClassification.UseIDM)
							constraint (NewContractSubclassification.UseIDM)
								"CannotSwitchToNonIDMSubclassification"

						if (Contract.ContractSubclassification entered
						and	Contract.ContractSubclassification.UseIDM)
							constraint (NewContractSubclassification.UseIDM)
								"CannotSwitchToNonIDMSubclassification"
				NewEffectiveDate
					initial value is Contract.EffectiveDate
				NewExpirationDate
					initial value is Contract.ExpirationDate
				NewContractReviewDate
					initial value is Contract.ContractReviewDate
				NewCurrencyCode
					if (NewSupplier.Vendor.InvoiceCurrency entered)
						NewCurrencyCode = NewSupplier.Vendor.InvoiceCurrency
					else
						default to Contract.CurrencyCode
				CopySelectAll
					initial value is true
				CopyContractParticipants
					if (CopyContractParticipants)
						constraint (!CopySelectAll)
							"CannotSelectTheCopyParticipants/MembersOptionWhenTheSelectAllOptionIsSelected"
						if (Contract.ContractTierMember set exists
						or  Contract.ContractDistributorPricingMember set exists)
							constraint (CopyTiersOrDistributorPricing)
								"CannotCopyMembersWithoutCopyingTiersOrDistributorPricing"
				CopyContractLineComments
					if (CopyContractLineComments)
						constraint (!CopySelectAll)
							"CannotSelectTheCopyContractLineCommentsOptionWhenTheSelectAllOptionIsSelected"
						constraint (CopyContractLines)
							"CannotCopyContractLineCommentsWithoutCopyingContractLines"
				CopyContractLineAttachments
					if (CopyContractLineAttachments)
						constraint (!CopySelectAll)
							"CannotSelectTheCopyContractLineAttachmentsOptionWhenTheSelectAllOptionIsSelected"
						constraint (CopyContractLines)
							"CannotCopyContractLineAttachmentsWithoutCopyingContractLines"
				CopyManufacturerContracts
					if (CopyManufacturerContracts)
						constraint (!CopySelectAll)
							"CannotSelectTheCopyManufacturerContractsOptionWhenTheSelectAllOptionIsSelected"
					if (!CopySelectAll)
						if ((Contract.IsDistributorContract)
						and (CopyContractLines
						or  CopyContractParticipants))
							CopyManufacturerContracts = true
				CopyLocations 
					if (CopyLocations)
						constraint (!CopySelectAll)
							"CannotSelectTheCopyLocationsOptionWhenTheSelectAllOptionIsSelected"
				CopyContractLines
					if (LineTierCostsExist
					and CopyContractLines
					and CreateAsManufacturerContract)
						constraint (CopyTiersOrDistributorPricing)
							"ContractLineTierCostsExist;MustSelectToCopyTiers"

				CopyTiersOrDistributorPricing 
					if ((Contract.IsManufacturerContract
					and !CreateAsManufacturerContract)
					or  (Contract.IsDistributorContract
					and !CreateDistributorContracts))
						constraint (CopyTiersOrDistributorPricing = false)
							"CannotCopyTiersOrDistributorPricingWhenNotCreatingAsAManufacturerOrDistributorContract"

				NewParentContract
					if (NewContractHasNoParent)
						constraint (NewParentContract = blank)
							"ANewParentContractCannotBeEnteredIfYouCheckedTheBoxIndicatingThereIsNoParentContract"

				NewTargetedPurchasesFromDate
					if (NewEffectiveDate = Contract.EffectiveDate)
						if (Contract.EffectiveDate > 0)
							constraint (NewTargetedPurchasesFromDate >= Contract.EffectiveDate)
								"NewTargetedPurchasesFromDateCannotBeLessThanContractEffectiveDate"
					else
						constraint (NewTargetedPurchasesFromDate >= NewEffectiveDate)
							"NewTargetedPurchasesFromDateCannotBeLessThanNewEffectiveDate"
					if (NewExpirationDate = Contract.ExpirationDate)
						if (Contract.ExpirationDate > 0)
							constraint (NewTargetedPurchasesFromDate <= Contract.ExpirationDate)
								"NewTargetedPurchasesFromDateCannotBeGreaterThanContractExpirationDate"
					else
						constraint (NewTargetedPurchasesFromDate <= NewExpirationDate)
							"NewTargetedPurchasesFromDateCannotBeGreaterThanNewExpirationDate"

				NewTargetedPurchasesToDate
					constraint (NewTargetedPurchasesToDate > NewTargetedPurchasesFromDate)
						"NewTargetedPurchasesToDateCannotBeLessThanFromDate"
					if (NewExpirationDate = Contract.ExpirationDate)
						if (Contract.ExpirationDate > 0)
							constraint (NewTargetedPurchasesToDate <= Contract.ExpirationDate)
								"NewTargetedPurchasesToDateCannotBeGreaterThanContractExpirationDate"
					else
						constraint (NewTargetedPurchasesToDate <= NewExpirationDate)
							"NewTargetedPurchasesToDateCannotBeGreaterThanNewExpirationDate"
			Action Rules 

				if (AddLinesToExistingContract)
					if (Contract.IsManufacturerContract)
						constraint (!ExistingContractForLineAdd.IsDistributorContract)
							"OriginalContractIsAManufacturerContract;CannotAddLinesToADistributorContract"

					if (Contract.IsDistributorContract)
						constraint (!ExistingContractForLineAdd.IsManufacturerContract)
							"OriginalContractIsADistributorContract;CannotAddLinesToAManufacturerContract"

				if (Contract.HasGPORelatedContract
				and !FromInterface)	
					confirmation required 
						"ThisContractIsFromGPOInterfaceInformation;DoYouWantToContinue?"
				
				if (AddLinesToExistingContract
				and !FromInterface)
					if (Contract.Supplier != ExistingContractForLineAdd.Supplier)
						confirmation required 
							"SuppliersOnFromAndToContractAreDifferent;DoYouWantToContinue?"

				if (CloseExistingLines)
					constraint (!HoldExistingLines)
						"CannotBothCloseAndHoldExistingLines"

				if (HoldExistingLines)
					constraint (!CloseExistingLines)
						"CannotBothCloseAndHoldExistingLines"

				if (!FromInterface)
					constraint (AddLinesToExistingContract or CreateContract)
						"MustEitherCreateAContractOrAddLinesToAnExistingContract"
				
				if (AddLinesToExistingContract)
					constraint (!CreateContract)
						"CannotBothAddLinesToExistingContractAndCreateContract"

				if (CreateContract)
					constraint (!AddLinesToExistingContract)
						"CannotBothAddLinesToExistingContractAndCreateContract"

				constraint (!Contract.ProposedContracts)
					"FromContractIsAProposedContract;MustBeApprovedToCreateAContractFromIt"
				if (CopySelectAll
				or  CopyArticlesAndTerms)
					constraint (!Contract.HasUnapprovedArticleOrTermChanges)
						"CannotCopy;ContractHasArticleOrTermChangesThatAreInTheApprovalProcess"

				if (CopyTiersOrDistributorPricing
				or	CopyContractParticipants
				or	CopyContacts
				or	CopyManufacturerContracts
				or	CopyContractLines
				or	CopyArticlesAndTerms
				or	CopyContractComments
				or  CopyContractAttachments
				or	CopyContractLineComments
				or  CopyContractLineAttachments
				or	CopyManualQuestions
				or  CopyLocations
				or  CopyCapitatedInformation)
					constraint (!CopySelectAll)
						"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"

				constraint (ContractLineSelectedRel exists)
					"MustHaveSelectedContractLines"
				
				if (CreateContract
				or  FromInterface)  
					invoke Draft.CreateContractFromContract 
						invoked.ContractGroup					= ContractGroup 
						invoked.FromContract        			= Contract
						invoked.CloseExistingLines  			= CloseExistingLines 
						invoked.HoldExistingLines               = HoldExistingLines
						invoked.ProcurementReasonCode           = ProcurementReasonCode
						if (FromInterface)
							invoked.CreateFromPartial   		= CreateFromPartial
						else 
							invoked.CreateFromPartial           = true  
						invoked.FromInterface       			= FromInterface
						invoked.NewName 						= NewName 
						invoked.NewDescription 					= NewDescription
						invoked.NewContact                      = NewContact
						invoked.NewSupplier						= NewSupplier
						invoked.NewSupplierContact				= NewSupplierContact 
						invoked.NewContractType					= NewContractType 
						invoked.NewContractSubtype				= NewContractSubtype
						invoked.NewContractClassification		= NewContractClassification
						invoked.NewContractSubclassification	= NewContractSubclassification
						invoked.NewContractHasNoParent			= NewContractHasNoParent
						invoked.NewParentContract				= NewParentContract
						invoked.NewEffectiveDate				= NewEffectiveDate
						invoked.NewExpirationDate				= NewExpirationDate 
						invoked.NewContractReviewDate			= NewContractReviewDate
						invoked.NewTargetedPurchasesFromDate	= NewTargetedPurchasesFromDate
						invoked.NewTargetedPurchasesToDate		= NewTargetedPurchasesToDate
						invoked.NewCurrencyCode					= NewCurrencyCode
						invoked.CopySelectAll					= CopySelectAll
						invoked.CopyTiersOrDistributorPricing	= CopyTiersOrDistributorPricing
						invoked.CopyContractParticipants	    = CopyContractParticipants	
						invoked.CopyContacts					= CopyContacts 
						invoked.CopyManufacturerContracts		= CopyManufacturerContracts
						if (CopySelectAll = false)
							invoked.CopyContractLines           = true 								
						else 
							invoked.CopyContractLines           = false 
						if (IsManufacturerContract)
							invoked.CreateAsManufacturerContract = CreateAsManufacturerContract 
							invoked.CreateDistributorContracts  = CreateDistributorContracts
						if (IsDistributorContract)
							invoked.CreateDistributorContracts  = CreateDistributorContracts 
						invoked.CopyArticlesAndTerms			= CopyArticlesAndTerms
						invoked.CopyContractComments			= CopyContractComments
						invoked.CopyContractAttachments         = CopyContractAttachments
						invoked.CopyContractLineComments		= CopyContractLineComments
						invoked.CopyContractLineAttachments     = CopyContractLineAttachments
						invoked.CopyManualQuestions				= CopyManualQuestions
						invoked.CopyMilestones					= CopyMilestones
						invoked.CopyDeliverables				= CopyDeliverables
						invoked.CopyHoldForLines                = CopyHoldForLines
						invoked.CopyLocations                   = CopyLocations
						invoked.CopyCapitatedInformation        = CopyCapitatedInformation
						invoked.CopyQualifierContractsAndItems  = CopyQualifierContractsAndItems
				else 
					invoke CreateContractLinesFromContract ContractLine 
						invoked.PrmContractGroup                	= ContractGroup 
						invoked.PrmFromContract                 	= Contract 
						invoked.PrmNewContractAndLine.NewContract	= ExistingContractForLineAdd
						invoked.PrmContractType						= ExistingContractForLineAdd.ContractType		
						invoked.PrmContractSubtype			    	= ExistingContractForLineAdd.ContractSubtype
						invoked.PrmCurrencyCode				    	= ExistingContractForLineAdd.CurrencyCode
						invoked.PrmSupplier					    	= ExistingContractForLineAdd.Supplier
						invoked.PrmCopyContractLineComments     	= CopyContractLineComments
						invoked.PrmCopyContractLineAttachments  	= CopyContractLineAttachments
						invoked.PrmCopySelectAll			    	= CopySelectAll
						invoked.PrmEffectiveDate			    	= ExistingContractForLineAdd.EffectiveDate
						invoked.PrmExpirationDate			    	= ExistingContractForLineAdd.ExpirationDate
						invoked.PrmCopyHoldForLines             	= CopyHoldForLines  
						invoked.PrmCopyLocations                	= CopyLocations 
						invoked.PrmCopyCapitatedInformation    	 	= CopyCapitatedInformation
						invoked.CreateFromPartial               	= true   
						invoked.CloseExistingLines              	= CloseExistingLines 
						invoked.HoldExistingLines                   = HoldExistingLines
						invoked.ProcurementReasonCode               = ProcurementReasonCode
						invoked.FromInterface                   	= false
						if (FromInterface)
							invoked.CreateFromPartial   			= CreateFromPartial
						else 
							invoked.CreateFromPartial           	= true  
						invoked.CreateLinesOnly                     = true 		
						if (IsManufacturerContract
						and ExistingContractForLineAdd.IsManufacturerContract)
							invoked.CreateAsManufacturerContract 	= CreateAsManufacturerContract 
							invoked.CreateDistributorContracts  	= CreateDistributorContracts									

		RefreshStatus is an Instance Action
			restricted
			Action Rules
				invoke RefreshStatus LatestRevisionRel

		EmployeeAddAdditionalSecurityAccessContact is an Instance Action
			valid when (ShowEmployeeAddAdditionalSecurityAccessContact)
			Action Rules
				if (ContextEmployeeContactExists)
					invoke Update EmployeeContactRel
						invoked.AdditionalSecurityAccess = true
				else
					invoke CreateContactFromEmployee ContractAttachedContact
						invoked.ContractGroup 			 = ContractGroup
						invoked.Contract				 = Contract
						invoked.Contact					 = ContextEmployee
						invoked.AdditionalSecurityAccess = true
		
		EmployeeRemoveAdditionalSecurityAccessContact is an Instance Action
			valid when (ContextEmployeeContactHasAdditionalSecurityAccess)
			Action Rules
				invoke RemoveAccess EmployeeContactRel
					
	StateCycles
		ContractLifeCycle is a StateCycle

			state field is ContractStatus

			Draft is a State

				Entrance Rules
					AllowActiveUpdates = false

				Exit Rules
					PreviousState = PreviousState.Draft

				Create is a Create Action
					Action Rules
						ContractTemplate = false

					Field Rules
						Contract
   							autosequence using ContractGroup.LastContract

   						SourcingEligible
							if (IsNotDistributorAndNotManufacturer)
								if (ContractSubclassification entered)
									default to ContractSubclassification.SourcingEligible
								else
									default to ContractClassification.SourcingEligible

						SetActiveLineToAmendment
							if (Contract.UseCommitments)
								force default to true
							else
							if (ContractSubclassification entered)
								default to ContractSubclassification.SetActiveLineToAmendment
							else
								default to ContractClassification.SetActiveLineToAmendment

					Exit Rules

						if (HeaderCommitmentComponentsEntered)
							include ManageCommitments

						if (IsManufacturerContract and NotContractTemplate and !MultiTierDistributorContract)
							if (!MfgContractRel exists)
								invoke Create MfgContractRel
									invoked.ContractGroup				= ContractGroup
									invoked.ManufacturerContractPivot	= Contract

						if (PurchasingContact entered
						and	!PrimaryContactExists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

				T2VCreate is a Create Action				
					restricted 
					default label is untranslatable 
					Action Rules 
						LocalBODtrigger = true

				CreateProposedContractFromNewItemProposal is a Create Action
					restricted
					Parameters
						ParmContractGroup           is a ContractGroup
						ParmName                    is a Description
						ParmDescription             is Text
						ParmSupplier                is a Supplier
						ParmSupplierSourceId        is a SupplierSourceId
						ParmRecallNotice            is a RecallNotice

					Action Rules

						invoke Draft.Create this instance
							invoked.Name                       = ParmName
							invoked.Description                = ParmDescription
							invoked.ContractSource             = 9 
							invoked.ProposedContract	       = 1 
							invoked.Supplier                   = ParmSupplier
	  						invoked.SupplierSourceId		   = ParmSupplierSourceId
							invoked.ContractGroup              = ParmContractGroup
							invoked.ContractType               = ParmContractGroup.ProposalFromItemProposalDefaultType
							invoked.ContractClassification     = ParmContractGroup.ProposalFromItemProposalDefaultClass
							invoked.PurchasingContact          = ParmContractGroup.ProposalFromItemProposalDefaultContact
							invoked.SupplierOriginatedContract = true

						LocalNotice    = ParmRecallNotice
						for each RecallProductRel
							invoke Create ContractLine
								invoked.ContractGroup        = ContractGroup
								invoked.Contract             = Contract
								invoked.VendorItem           = each.ProposedVendorItem
								invoked.Manufacturer         = each.ManufacturerInformation.Manufacturer
								invoked.ManufacturerNumber   = each.ProposedManufacturerNumber
								invoked.ItemDescription      = each.ProductName
								invoked.GlobalTradeItemNumber = each.ProposedGlobalTradeItemNumber
								invoked.UOM.UnitOfMeasure    = each.NewProposedItemBuyUOM
								invoked.BaseCost             = each.UnitCost
								invoked.FromProposedItem     = true

						invoke FastUpdate RecallNoticeRel
							invoked.PrmProposedContract      = Contract

						invoke CreateRelatedContract RelatedContract
							invoked.ContractGroup           = ContractGroup
							invoked.Contract                = Contract
							invoked.RelatedContractType     = 14 
							invoked.RelatedContractID       = ParmRecallNotice

				SupplierCreateProposedContract is a Create Action
					valid when (IsASupplier)
					Parameters
						ParmContractGroup           is a ContractGroup
						ParmName                    is a Description
						ParmDescription             is Text
						ParmDocument                is an AttachmentWithTitleAudited
						ParmAttachment              is an Attachment
						ParmAttachment2             is an Attachment
						ParmEffectiveDate           is Date
						ParmExpirationDate          is Date
						ParmSubmit                  is Boolean

					Parameter Rules
						ParmContractGroup
							ParmContractGroup = actor.agent(SupplierSourceId).SupplierGroup

						ParmName
							required
								"ContractTitleIsRequired"
						ParmDocument
							if (not ParmContractGroup.ProposalFromItemProposalDefaultClass.UseIDM)
								required
									"ContractDocumentIsRequired"
					Action Rules

						invoke Draft.Create this instance
							invoked.Name                       = ParmName
							invoked.Description                = ParmDescription
							invoked.EffectiveDate              = ParmEffectiveDate
							invoked.ExpirationDate             = ParmExpirationDate
							invoked.ContractSource             = 8 
							if (ParmSubmit = true)
								invoked.ProposedContract       = 1 
							else
								invoked.ProposedContract       = 4 
							invoked.Supplier                   = actor.agent(SupplierSourceId).Supplier
	  						invoked.SupplierSourceId		   = actor.agent(SupplierSourceId).SupplierSourceId
	  						invoked.ContractType               = ParmContractGroup.ProposalDefaultContractType
	  						invoked.ContractClassification     = ParmContractGroup.ProposalDefaultContractClassification
							invoked.ContractGroup              = ParmContractGroup
							invoked.PurchasingContact          = ParmContractGroup.ProposalDefaultPrimaryContact
							invoked.SupplierOriginatedContract = true

						invoke SupplierCreate ContractRedlineDocument
						 	invoked.ContractGroup 		= ContractGroup
						 	invoked.Contract     		= Contract
						 	if (UseIDMPerClassificationAndSubClass)
						 		invoked.TransientAttachment	= ParmDocument
						 	else
					 			invoked.Attachment        	= ParmDocument
						 	invoked.CreatedBySupplier   = true

						if (ParmAttachment entered)
							invoke Create ContractAttachment
								invoked.ContractGroup 		= ContractGroup
							 	invoked.Contract     		= Contract
							 	invoked.Source			 	= 5 
							 	invoked.Attachment.File     = ParmAttachment.File
								invoked.Attachment.MimeType = ParmAttachment.MimeType
								invoked.Attachment.Title    = ParmAttachment.Title
							 	invoked.SupplierCanView     = true

						if (ParmAttachment2 entered)
							invoke Create ContractAttachment
								invoked.ContractGroup 		= ContractGroup
							 	invoked.Contract     		= Contract
							 	invoked.Source			 	= 5 
							 	invoked.Attachment.File     = ParmAttachment2.File
								invoked.Attachment.MimeType = ParmAttachment2.MimeType
								invoked.Attachment.Title    = ParmAttachment2.Title
							 	invoked.SupplierCanView     = true

					Exit Rules
						if (ParmSubmit = true)
							include SendEmailFromProposal

				SupplierUpdateProposedContract is an Instance Action
					valid when (SupplierCanUpdateProposedContract)
					Parameters
						ParmName                    is a Description
						ParmDescription             is Text
						ParmDocument                is an AttachmentWithTitleAudited
						ParmAttachment              is an Attachment
						ParmAttachment2             is an Attachment
						ParmEffectiveDate           is Date
						ParmExpirationDate          is Date
						ParmSubmit                  is Boolean
						ParmIDMDocument             is an IDMAttachment

					Parameter Rules

						ParmName
							initial value is Name
							required
								"ContractTitleIsRequired"
						ParmDescription
							initial value is Description
						ParmDocument
							initial value is LatestRevisionRel.Attachment
							if (not UseIDMPerClassificationAndSubClass)
								required
									"ContractDocumentIsRequired"
						ParmAttachment
							initial value is first ContractAttachmentRel.Attachment

						ParmEffectiveDate
							initial value is EffectiveDate
						ParmExpirationDate
							initial value is ExpirationDate
						ParmIDMDocument
							if (UseIDMPerClassificationAndSubClass)
								required
									"ContractDocumentIsRequired"

					Action Rules

						Name                       = ParmName
						Description                = ParmDescription
						EffectiveDate              = ParmEffectiveDate
						ExpirationDate             = ParmExpirationDate

						if (ParmSubmit)
							ProposedContract       = 1 

						if (not UseIDMPerClassificationAndSubClass)

							invoke Delete LatestRevisionRel
							invoke SupplierCreate ContractRedlineDocument
							 	invoked.ContractGroup 		= ContractGroup
							 	invoked.Contract     		= Contract
							 	invoked.Attachment        	= ParmDocument
							 	invoked.CreatedBySupplier   = true
						else
							invoke Update LatestRevisionRel
								invoked.TransientAttachment	= ParmIDMDocument

						for each ContractAttachmentRel
							invoke Delete each
						if (ParmAttachment entered)
							invoke Create ContractAttachment
								invoked.ContractGroup 		= ContractGroup
							 	invoked.Contract     		= Contract
							 	invoked.Source			 	= 5 
							 	invoked.Attachment.File     = ParmAttachment.File
								invoked.Attachment.MimeType = ParmAttachment.MimeType
								invoked.Attachment.Title    = ParmAttachment.Title
							 	invoked.SupplierCanView     = true

						if (ParmAttachment2 entered)
							invoke Create ContractAttachment
								invoked.ContractGroup 		= ContractGroup
							 	invoked.Contract     		= Contract
							 	invoked.Source			 	= 5 
							 	invoked.Attachment.File     = ParmAttachment2.File
								invoked.Attachment.MimeType = ParmAttachment2.MimeType
								invoked.Attachment.Title    = ParmAttachment2.Title
							 	invoked.SupplierCanView     = true

					Exit Rules
						if (ParmSubmit)
							include SendEmailFromProposal

				SupplierSubmitProposedContract is an Instance Action 
					valid when (CanUpdateProposedContract)
					default label is "Submit"
					Action Rules

						constraint (!AllUnansweredRequiredQuestionsRel exists)
							"Question(s)ExistThatRequireResponses"

						ProposedContract = 1

						SubmittedTimestamp = current timestamp
						DaysToSubmit = (SubmittedTimestamp date - create date)

						if (!ContractBySupplier)
							if (NumberOfLines = 0
							and HasAPurchaseType)
								constraint (ContractProposalItemAttachmentRel exists)
									"MustEnterLinesOrAnAttachmentWithLineInformation"
							if (!Supplier entered)
								constraint (ProposedSupplierName entered)
									"MustEnterASupplierNumberOrName"							

				RequesterCreateProposedContract is a Create Action
					default label is "CreateProposedContract"
					Field Rules
						Contract
   							autosequence using ContractGroup.LastContract

					Local Fields 
						NewQuestion 					is a ContractQuestion view

						NewArticle						is a ContractArticle view					
					Action Rules

						if (SubmittedTimestamp not entered)
							SubmittedTimestamp = current timestamp 
							
						if (ContractGroup.RequireProposalTemplate)
							constraint (TransientTemplateEntered)
								"MustSelectATemplate"
						if (TransientProposalTemplate entered)
							constraint (TransientProposalTemplateRel exists)
								"InvalidTemplate"
						if (TransientProposalTemplate.Supplier !entered
						and Supplier !entered)
							constraint (ProposedSupplierName entered)
								"MustProvideASupplierOrSupplierName"

						LocalSupplier							= Supplier 
						LocalSupplierSourceId                   = SupplierSourceId 
						LocalDescription                        = Description 
						LocalName                               = Name
						LocalEffectiveDate                      = EffectiveDate 
						LocalExpirationDate                     = ExpirationDate 
						LocalDefaultAccount                     = DefaultAccount         
						LocalProposalTemplate                   = TransientProposalTemplate
						LocalProposalTemplateName               = TransientProposalTemplate.Name
						LocalProposedSupplierName               = ProposedSupplierName
						LocalProposedContact                    = LocalProposalTemplate.PrimaryContactRel.Contact        
						if (TransientProposalTemplate.PrimaryContactExists)
							LocalHasPrimaryContact              = true
							if (LocalProposedContact = actor.agent(Employee).Employee
							and ActorHasNoClassificationAndSecurityAccess)
								LocalSetPrimaryContactWithAddtionalSecurity = true
						invoke Draft.Create this instance

							if (TransientProposalTemplate entered)
								fill in fields from TransientProposalTemplate
									except invoked.Contract 
									except invoked.Name
									except invoked.WorkingContractID
							invoked.Name                            = LocalName
							invoked.EffectiveDate                   = LocalEffectiveDate 
							invoked.ExpirationDate                  = LocalExpirationDate 
							if (LocalDefaultAccount entered)
								invoked.DefaultAccount              = LocalDefaultAccount
							invoked.ProposalTemplate                = false
							invoked.ContractTemplate                = false 
							invoked.ProposedSupplierName            = LocalProposedSupplierName 
							if (LocalDescription entered)
								invoked.Description 				= LocalDescription
							if (LocalSupplier entered)
								invoked.Supplier   					= LocalSupplier 
							if (LocalSupplierSourceId entered)
								invoked.SupplierSourceId			= LocalSupplierSourceId 
							if (ContractType !entered)
								ContractType        				= ContractGroup.ProposalFromRequesterDefaultType
							if (ContractClassification !entered)
								ContractClassification     			= ContractGroup.ProposalFromRequesterDefaultClass
							invoked.ContractSource             		= 10 
							invoked.ProposedContract       	   		= 4 
							invoked.ProposalRequester          		= actor.agent(Employee).Employee
							invoked.CreateByCopy	   				= true
					
						if (!LocalSetPrimaryContactWithAddtionalSecurity
						and ActorHasNoClassificationAndSecurityAccess)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			 = ContractGroup
								invoked.Contract				 = Contract
								invoked.Contact					 = actor.agent(Employee).Employee
								invoked.AdditionalSecurityAccess = true
					
						if (LocalProposalTemplate entered
						and LocalHasPrimaryContact)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= LocalProposedContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true							
								invoked.AdditionalSecurityAccess= LocalSetPrimaryContactWithAddtionalSecurity
						
						if (LocalProposalTemplate entered)
							invoke CreateRelatedContract RelatedContract
								invoked.ContractGroup	  		   = ContractGroup
								invoked.Contract		  		   = Contract
								invoked.RelatedContractID 		   = LocalProposalTemplate
								invoked.RelatedContractType		   = 17
								invoked.RelatedContractDescription = LocalProposalTemplateName
								invoked.WorkingContract            = false

					Exit Rules

						if (!PrimaryContactExists
						and  ContractGroup.ProposalFromRequesterDefaultContact entered)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= ContractGroup.ProposalFromRequesterDefaultContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

						for each LocalProposalTemplate.ContractManualAssignedQuestionRel
							invoke Create ContractQuestion
								assign result to NewQuestion
								fill in fields from each
								invoked.Contract 			= Contract
								invoked.Attachment.File     = each.Attachment.File
								invoked.Attachment.MimeType = each.Attachment.MimeType
								invoked.Attachment.Title    = each.Attachment.Title

							if (each.YesNoResponseType
							and each.HasContractConditionalQuestions)
								for each each.ContractConditionalYesNoQuestionRel
									invoke Create ContractConditionalYesNoQuestion 
										invoked.ContractGroup 											= ContractGroup 
										invoked.Contract                  								= Contract
										invoked.ContractQuestion		  								= NewQuestion.ContractQuestion
										invoked.ContractConditionalYesNoQuestion.YesOrNo                = each.ContractConditionalYesNoQuestion.YesOrNo
										invoked.ContractConditionalYesNoQuestion.ConditionalQuestion	= each.ContractConditionalYesNoQuestion.ConditionalQuestion	

							if (each.ResponseType.List)
								for each each.ContractQuestionListValue set
									invoke Create ContractQuestionListValue
										invoked.ContractGroup             = ContractGroup
										invoked.Contract                  = Contract
										invoked.ContractQuestion		  = NewQuestion.ContractQuestion
										fill in fields from each

									if (each.HasContractConditionalQuestions)
										invoke CopyContractConditionalQuestions each 
											invoked.NewContract		= Contract
											invoked.NewQuestion     = NewQuestion.ContractQuestion

						for each LocalProposalTemplate.ContractArticle set
							if (each.IsActive
							and !each.Deleted)
								invoke AutoCreate ContractArticle
									assign result to NewArticle
									fill in fields from each
									invoked.ContractGroup  = ContractGroup
									invoked.Contract 	   = Contract
									invoked.ContractStatus = Contract.ContractStatus
								for each each.ActiveContractTermAndConditionRel
									invoke AutoCreate ContractTermAndCondition
										fill in fields from each
										invoked.ContractGroup 		= ContractGroup
										invoked.Contract 			= Contract
										invoked.ContractArticle 	= NewArticle.ContractArticle
										invoked.ContractTermAndCondition = each.ContractTermAndCondition
										invoked.ContractStatus 		= Contract.ContractStatus
									for each each.ContractTermAndConditionAttachment set
										invoke AutoCreate ContractTermAndConditionAttachment
											fill in fields from each
											invoked.ContractGroup 				= ContractGroup
											invoked.Contract 		           	= Contract
											invoked.ContractArticle            	= NewArticle.ContractArticle
											invoked.ContractTermAndCondition   	= each.ContractTermAndCondition

				RSSRequesterCreateProposedContract is a Create Action
					restricted
					default label is "CreateProposedContract"
					Field Rules
						Contract
   							autosequence using ContractGroup.LastContract

					Action Rules

						ContractSource             = 10 
						ProposedContract       	   = 4 
  						ContractType               = ContractGroup.ProposalFromRequesterDefaultType
  						ContractClassification     = ContractGroup.ProposalFromRequesterDefaultClass
						ProposalRequester          = actor.agent(Employee).Employee
					Exit Rules

						if (ContractGroup.ProposalFromRequesterDefaultContact entered)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

				RequesterUpdateProposedContract is an Update Action
					valid when (CanUpdateProposedContract)
					default label is "UpdateProposedContract"

				RSSRequesterUpdateProposedContract is an Update Action
					valid when (CanUpdateProposedContract)
					default label is "UpdateProposedContract"

				CreateRedlineDocument is an Instance Action 
					restricted
					Parameters
						Title					is a Description
						Description				is Text
						Attachment				is an IDMAttachment
						CreatedBySupplier		is Boolean

				AcceptProposedContract is an Instance Action
					valid when (ProposedContracts)
					Action Rules
						constraint (Supplier entered)
							"MustEnterASupplier"
						constraint (SupplierSourceId entered)
							"MustEnterASupplierContact"
						constraint (ContractType entered)
							"MustEnterAContractType"
						constraint (ContractClassification entered)
							"MustEnterAContractClassification"
						ProposedContract = 2

						if (AcceptedOrRejectedTimestamp not entered)
							AcceptedOrRejectedTimestamp = current timestamp
							DaysToAccept = (AcceptedOrRejectedTimestamp date - SubmittedTimestamp date)

						if (ContractSource.NewItemProposal)
							send email
								to first NoticeRelatedContractRel.NoticeCoordinatorEmail
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenAccepted"
								Contents
									"ProposedContract<Contract>-<Name>ForNewItemProposal<first NoticeRelatedContractRel.RelatedContractID>HasBeenAccepted"

						if (ContractSource.Requester)
							send email
								to ProposalRequester.EmailAddress
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenAccepted"
								Contents
									"YourProposedContract<Contract>-<Name>HasBeenAccepted"

						if (ContractSource.Supplier)
							if (SupplierSourceId.ReceiveEmailNotification)
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "ProposedContractHasBeenAccepted"
									Contents
										"YourProposedContract<Contract>-<Name>HasBeenAccepted"

							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= Supplier.SupplierGroup
								invoked.Supplier 						= Supplier
								invoked.SupplierSourceId				= SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= "Proposed Contract Has Been Accepted"
								invoked.MessageText						= "Your Proposed Contract " + {Name} + " Has Been Accepted"
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.MessageOwner                    = PrimaryContactRel.Contact
								invoked.OriginatingContract             = Contract

						invoke Create ContractNotificationEmail
							invoked.ContractGroup					= ContractGroup
							invoked.Contract						= Contract
							initialize invoked.ContractDeliverable
							initialize invoked.ContractMilestone
							initialize invoked.SentToMilestoneContact
							initialize invoked.SentToDeliverableContact
							if (ContractSource.Supplier)
								invoked.SentToEmailAddress			= SupplierSourceId.EmailAddress
								invoked.SentToCc                    = DerivedProxyEmailAddressList
							if (ContractSource.NewItemProposal)
								invoked.SentToEmailAddress			= first NoticeRelatedContractRel.NoticeCoordinatorEmail
							if (ContractSource.Requester)
								invoked.SentToEmailAddress          = ProposalRequester.EmailAddress
							invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
							invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
							invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
							invoked.EmailSubjectLine				= "Proposed Contract Has Been Accepted"
							invoked.EmailContent					= "Your Proposed Contract " + {Name} + " Has Been Accepted"
							invoked.NotificationType				= 8

				RejectProposedContract is an Instance Action
					valid when (ProposedContracts)
					action comment required
					Action Rules
						ProposedContract = 3
						FromProposalReject = true
						invoke CloseContract
							invoked.action comment = action comment

						if (AcceptedOrRejectedTimestamp not entered)
							AcceptedOrRejectedTimestamp = current timestamp

						if (ContractSource.NewItemProposal)
							send email
								to first NoticeRelatedContractRel.NoticeCoordinatorEmail
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenRejected"
								Contents
									"ProposedContract<Contract>-<Name>ForNewItemProposal<first NoticeRelatedContractRel.RelatedContractID>HasBeenRejected"
									"Reason:<action comment>"

						if (ContractSource.Requester)
							send email
								to ProposalRequester.EmailAddress
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenRejected"
								Contents
									"YourProposedContract<Contract>-<Name>HasBeenRejected"
									"Comment:<action comment>"

							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= ProposalRequester.EmailAddress
								invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= "Proposed Contract Has Been Rejected"
								invoked.EmailContent					= "Your Proposed Contract " + {Name} + " Has Been Rejected With A Reason Of " + action comment
								invoked.NotificationType				= 8

						if (ContractSource.Supplier)
							if (SupplierSourceId.ReceiveEmailNotification)
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "ProposedContractHasBeenRejected"
									Contents
										"YourProposedContract<Contract>-<Name>HasBeenRejected"
										"Comment:<action comment>"

							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= Supplier.SupplierGroup
								invoked.Supplier 						= Supplier
								invoked.SupplierSourceId				= SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= "Proposed Contract Has Been Rejected"
								invoked.MessageText						= "Your Proposed Contract " + {Name} + " Has Been Rejected With A Reason Of " + action comment
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.MessageOwner                    = PrimaryContactRel.Contact
								invoked.OriginatingContract             = Contract

							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
								invoked.SentToCc                        = DerivedProxyEmailAddressList
								invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
								invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
								invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= "Proposed Contract Has Been Rejected"
								invoked.EmailContent					= "Your Proposed Contract " + {Name} + " Has Been Rejected With A Reason Of " + action comment
								invoked.NotificationType				= 8

				ReturnProposedContract is an Instance Action
					valid when (ProposedSubmittedByRequester)
					action comment required
					Action Rules
						initialize SubmittedTimestamp
						initialize DaysToSubmit
						ProposedContract = 4

						if (ContractSource.NewItemProposal)
							send email
								to first NoticeRelatedContractRel.NoticeCoordinatorEmail
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenReturnedForMoreInformation"
								Contents
									"ProposedContract<Contract>-<Name>ForNewItemProposal<first NoticeRelatedContractRel.RelatedContractID>HasBeenReturnedForMoreInformation"
									"Reason:<action comment>"
									"PleaseEnterTheRequestedInformationAndSubmit"

						if (ContractSource.Requester)
							send email
								to ProposalRequester.EmailAddress
								from PrimaryContactRel.DerivedEmail
								subject "ProposedContractHasBeenReturnedForMoreInformation"
								Contents
									"YourProposedContract<Contract>-<Name>HasBeenReturnedForMoreInformation"
									"PleaseEnterTheRequestedInformationAndSubmit"
									"Comment:<action comment>"
									"Click<RequesterProposedContractLinkback>ToViewProposedContract."

							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= ProposalRequester.EmailAddress
								invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= "Proposed Contract Has Been Returned For More Information"
								invoked.EmailContent					= "Your proposed Contract " + {Name} + " has been returned for more information: " + action comment + " please enter information and submit"
								invoked.NotificationType				= 8

						if (ContractSource.Supplier)
							if (SupplierSourceId.ReceiveEmailNotification)
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "ProposedContractHasBeenReturnedForMoreInformation"
									Contents
										"YourProposedContract<Contract>-<Name>HasBeenReturnedForMoreInformation"
										"Comment:<action comment>"
										"PleaseEnterTheRequestedInformationAndSubmit"

							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= Supplier.SupplierGroup
								invoked.Supplier 						= Supplier
								invoked.SupplierSourceId				= SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= "Proposed Contract Has Been Returned For More Information"
								invoked.MessageText						= "Your Proposed Contract " + {Name} + " Has Been Returned For More Information: " + action comment + "Please Enter Information And Submit"
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.MessageOwner                    = PrimaryContactRel.Contact
								invoked.OriginatingContract             = Contract

							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
								invoked.SentToCc                        = DerivedProxyEmailAddressList
								invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
								invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
								invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= "Proposed Contract Has Been Returned For More Information"
								invoked.EmailContent					= "Your Proposed Contract " + {Name} + " Has Been Returned For More Information: " + action comment + "Please Enter Information And Submit"
								invoked.NotificationType				= 8

				CreateContractFromContract is a Create Action
					default label is "CreateFromContract"
					completion message is "<this instance.DerivedCreateContractFromContractCompletionMessage>"
					allow user fields as parameters
					Parameters
						ContractGroup
						FromContract					is a Contract
						NewName 						is a Description
						NewDescription 					is Text
						NewContact                      is an Employee
						NewSupplier						is a Supplier
						NewSupplierContact				is a SupplierSourceId
						NewContractType					is a ContractType
						NewContractSubtype				is a ContractSubtype
						NewContractClassification		is a ContractClassification
						NewContractSubclassification	is a ContractSubclassification
						NewContractHasNoParent			is Boolean
						NewParentContract				is a Contract
						NewEffectiveDate				is Date
						NewExpirationDate				is Date
						NewContractReviewDate			is Date
						NewTargetedPurchasesFromDate	is Date
						NewTargetedPurchasesToDate		is Date
						NewCurrencyCode					is a Currency
						CopySelectAll					is Boolean
						CopyTiersOrDistributorPricing	is Boolean
						CopyQualifierContractsAndItems  is Boolean 
						CopyContractParticipants		is Boolean
						CopyContacts					is Boolean
						CopyManufacturerContracts		is Boolean
						CopyContractLines				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyContractComments			is Boolean
						CopyContractAttachments         is Boolean
						CopyContractLineComments		is Boolean
						CopyContractLineAttachments     is Boolean
						CopyManualQuestions				is Boolean
						CopyMilestones					is Boolean
						CopyDeliverables				is Boolean
						CopyHoldForLines                is Boolean
						CopyLocations                   is Boolean
						CopyCapitatedInformation        is Boolean
						CreateFromPartial               is Boolean 
						CloseExistingLines              is Boolean 
						HoldExistingLines               is Boolean 
						ProcurementReasonCode           
						FromInterface                   is Boolean 
						CreateAsManufacturerContract    is Boolean  
						CreateDistributorContracts      is Boolean 

					Parameter Rules
						ContractGroup
							required
						FromContract
							required
							constraint (FromContract exists)
								"FromContractDoesNotExist"
							constraint (FromContract.NotContractTemplate)
								"FromContractCannotBeATemplate;ItMustBeAnExistingContract"
							constraint (!FromContract.ProposedContracts)
								"FromContractIsAProposedContract;MustBeApprovedToCreateAContractFromIt"
							if (CopySelectAll
							or  CopyArticlesAndTerms)
								constraint (!FromContract.HasUnapprovedArticleOrTermChanges)
									"FromContractHasArticleOrTermChangesThatAreInTheApprovalProcess"
						NewName
							required
						NewDescription
							initial value is FromContract.Description
							default to FromContract.Description
						NewContact
							initial value is FromContract.PrimaryContactRel.Contact
							default to FromContract.PrimaryContactRel.Contact
						NewSupplier
							initial value is FromContract.Supplier
							default to FromContract.Supplier
							if (NewSupplierContact entered)
								required
									"SupplierIsRequiredWhenSupplierContactIsEntered"
						NewSupplierContact
							initial value is FromContract.SupplierSourceId
							default to FromContract.SupplierSourceId
							if (NewSupplier entered)
								required
									"SupplierContactIsRequiredWhenSupplierIsEntered"
						NewContractType
							initial value is FromContract.ContractType
							default to FromContract.ContractType
							required
								"ContractTypeIsRequired"
						NewContractSubtype
							initial value is FromContract.ContractSubtype
							if (NewContractSubtype entered)
								constraint (NewContractType entered)
									"ContractTypeIsRequiredWhenContractSubtypeIsEntered"
						NewContractClassification
							initial value is FromContract.ContractClassification
							default to FromContract.ContractClassification
							required
								"ContractClassificationIsRequired"
							if  (NewContractSubclassification not entered)
								if (FromContract.ContractSubclassification not entered
								and FromContract.ContractClassification.UseIDM)
									constraint (NewContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"

								if (FromContract.ContractSubclassification entered
								and FromContract.ContractSubclassification.UseIDM)
									constraint (NewContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"
						NewContractSubclassification
							initial value is FromContract.ContractSubclassification
							if (NewContractSubclassification entered)
								constraint (NewContractClassification entered)
									"ContractClassificationIsRequiredWhenContractSubclassificationIsEntered"
							if  (NewContractSubclassification entered)
								if (FromContract.ContractSubclassification not entered
								and FromContract.ContractClassification.UseIDM)
									constraint (NewContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"

								if (FromContract.ContractSubclassification entered
								and	FromContract.ContractSubclassification.UseIDM)
									constraint (NewContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"
						NewEffectiveDate
							initial value is FromContract.EffectiveDate
						NewExpirationDate
							initial value is FromContract.ExpirationDate
						NewContractReviewDate
							initial value is FromContract.ContractReviewDate
						NewCurrencyCode
							if (NewSupplier.Vendor.InvoiceCurrency entered)
								NewCurrencyCode = NewSupplier.Vendor.InvoiceCurrency
							else
								default to FromContract.CurrencyCode
						CreateAsManufacturerContract
							initial value is true 
						CreateDistributorContracts 
							initial value is true 
						CopySelectAll
							initial value is true
						CopyContractParticipants
							if (CopyContractParticipants)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyParticipants/MembersOptionWhenTheSelectAllOptionIsSelected"
								if (FromContract.ContractTierMember set exists
								or  FromContract.ContractDistributorPricingMember set exists)
									constraint (CopyTiersOrDistributorPricing)
										"CannotCopyMembersWithoutCopyingTiersOrDistributorPricing"
						CopyContractLineComments
							if (CopyContractLineComments)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyContractLineCommentsOptionWhenTheSelectAllOptionIsSelected"
								constraint (CopyContractLines)
									"CannotCopyContractLineCommentsWithoutCopyingContractLines"
						CopyContractLineAttachments
							if (CopyContractLineAttachments)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyContractLineAttachmentsOptionWhenTheSelectAllOptionIsSelected"
								constraint (CopyContractLines)
									"CannotCopyContractLineAttachmentsWithoutCopyingContractLines"
						CopyManufacturerContracts
							if (CopyManufacturerContracts)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyManufacturerContractsOptionWhenTheSelectAllOptionIsSelected"
							if (!CopySelectAll)
								if ((FromContract.IsDistributorContract)
								and (CopyContractLines
								or  CopyContractParticipants))
									CopyManufacturerContracts = true
						CopyLocations 
							if (CopyLocations)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyLocationsOptionWhenTheSelectAllOptionIsSelected"
						CopyTiersOrDistributorPricing 
							if ((FromContract.IsManufacturerContract
							and !CreateAsManufacturerContract)
							or  (FromContract.IsDistributorContract
							and !CreateDistributorContracts))
								constraint (CopyTiersOrDistributorPricing = false)
									"CannotCopyTiersOrDistributorPricingWhenNotCreatingAsAManufacturerOrDistributorContract"
						CopyContractLines
							if (FromContract.LineTierCostsExist
							and CopyContractLines
							and CreateAsManufacturerContract)
								constraint (CopyTiersOrDistributorPricing)
									"ContractLineTierCostsExist;MustSelectToCopyTiers"

						NewParentContract
							if (NewContractHasNoParent)
								constraint (NewParentContract = blank)
									"ANewParentContractCannotBeEnteredIfYouCheckedTheBoxIndicatingThereIsNoParentContract"

						NewTargetedPurchasesFromDate
							if (NewEffectiveDate = FromContract.EffectiveDate)
								if (FromContract.EffectiveDate > 0)
								   	constraint (NewTargetedPurchasesFromDate >= FromContract.EffectiveDate)
										"NewTargetedPurchasesFromDateCannotBeLessThanContractEffectiveDate"
							else
								constraint (NewTargetedPurchasesFromDate >= NewEffectiveDate)
									"NewTargetedPurchasesFromDateCannotBeLessThanNewEffectiveDate"
							if (NewExpirationDate = FromContract.ExpirationDate)
								if (FromContract.ExpirationDate > 0)
									constraint (NewTargetedPurchasesFromDate <= FromContract.ExpirationDate)
										"NewTargetedPurchasesFromDateCannotBeGreaterThanContractExpirationDate"
							else
								constraint (NewTargetedPurchasesFromDate <= NewExpirationDate)
									"NewTargetedPurchasesFromDateCannotBeGreaterThanNewExpirationDate"

						NewTargetedPurchasesToDate
						   	constraint (NewTargetedPurchasesToDate > NewTargetedPurchasesFromDate)
								"NewTargetedPurchasesToDateCannotBeLessThanFromDate"
							if (NewExpirationDate = FromContract.ExpirationDate)
						   		if (FromContract.ExpirationDate > 0)
									constraint (NewTargetedPurchasesToDate <= FromContract.ExpirationDate)
										"NewTargetedPurchasesToDateCannotBeGreaterThanContractExpirationDate"
							else
								constraint (NewTargetedPurchasesToDate <= NewExpirationDate)
									"NewTargetedPurchasesToDateCannotBeGreaterThanNewExpirationDate"

					Local Fields
						OriginalContractAndTier
						NewContractAndNewContractLine
						NewQuestion 					is a ContractQuestion view
						SavePricing
						LocalContractArticle			is a ContractArticle view
						NewMilestone                    is a ContractMilestone view
						NewDeliverable                  is a ContractDeliverable view

					Action Rules

						if (FromContract.HasGPORelatedContract 
						and !FromInterface)	
							confirmation required 
								"ThisContractIsFromGPOInterfaceInformation;DoYouWantToContinue?"

						if (CloseExistingLines)
							constraint (!HoldExistingLines)
								"CannotBothCloseAndHoldExistingLines"
							if (FromContract.IsManufacturerContract)
								constraint (FromContract.NoUnreleasedDistPoLinesExist)
									"CannotCloseContract,UnreleasedPoLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedPORel.Contract>;Line<first DistContractLinesWithUnreleasedPORel.ContractLine>"
								constraint (FromContract.NoUnreleasedDistReqLinesExist)
									"CannotCloseContract,UnreleasedRequisitionLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedReqRel.Contract>;Line<first DistContractLinesWithUnreleasedReqRel.ContractLine>"
								constraint (FromContract.NoUnprocessedDistRequestsExist)
									"CannotCloseContract,UnprocessedPurchaseOrderRequestsExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnprocessedPORel.Contract>;Line<first DistContractLinesWithUnprocessedPORel.ContractLine>"
							constraint (FromContract.UnreleasedServiceInvoicesRel !exists)
								"CannotCloseContract,UnmatchedInvoicesExistForServiceContract;MustMatchPriorToClosing"
							constraint (FromContract.UnreleasedPolinesByContractRel !exists)
								"CannotCloseContract,UnreleasedPOLinesExist;MustReleasePriorToClosing;SeeAlertLinks"
							constraint (FromContract.UnreleasedRequisitionLinesByContractRel !exists)
								"CannotCloseContract,UnreleasedRequisitionLinesExist;MustReleaseAndCreatePOPriorToClosing;SeeAlertLinks"
							constraint (FromContract.UnprocessedRequestsByContractRel !exists)
								"CannotCloseContract,UnprocessedPurchaseOrderRequestsExist;MustCreatePOAndReleasePriorToClosing;SeeAlertLinks"		

						if (HoldExistingLines)
							constraint (!CloseExistingLines)
								"CannotBothCloseAndHoldExistingLines"
						
						if (CopyTiersOrDistributorPricing
						or	CopyContractParticipants
						or	CopyContacts
						or	CopyManufacturerContracts
						or	CopyContractLines
						or	CopyArticlesAndTerms
						or	CopyContractComments
						or  CopyContractAttachments
						or	CopyContractLineComments
						or  CopyContractLineAttachments
						or	CopyManualQuestions
						or  CopyLocations
						or  CopyCapitatedInformation)
							constraint (!CopySelectAll)
								"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"
						if  (CopyCapitatedInformation
						or  (CopySelectAll
						and  FromContract.CapitatedContract))
							if (NewContractSubclassification !entered)
								constraint (NewContractClassification.UseForCapitatedContracts) 
									"MustUseAClassificationThatIsUseForCapitatedContracts"
							else 
								constraint (NewContractSubclassification.UseForCapitatedContracts) 
									"MustUseASubclassificationThatIsUseForCapitatedContracts"									
						if (CopyCapitatedInformation)
							CopyContractLines = true 
						LocalNativeBODLinesTrigger = true
						LocalCopyContractLines = CopyContractLines
						LocalCopySelectAll = CopySelectAll
						OriginalContractAndTier.OriginalContract = FromContract
						OriginalContractAndLine.OriginalContract = FromContract
						FromContractCopy = true
						invoke Draft.Create this instance
							fill in fields from FromContract
								except invoked.ReportCurrencyAmount
								except invoked.AmountOrdered
								except invoked.AmountRequested

							invoked.CreateByCopy	   				= true
							invoked.Contract						= 0
							invoked.Name							= NewName
							if (NewDescription entered)
								invoked.Description					= NewDescription
							if (NewSupplier entered)
								invoked.Supplier					= NewSupplier
								invoked.SupplierSourceId			= NewSupplierContact
								invoked.Vendor                      = NewSupplier.Vendor
							if (!FromContract.SupplierSourceId      = NewSupplierContact
							or  !FromContract.Supplier              = NewSupplier)
								invoked.ApPoPurchaseFrom            = blank
							if (FromContract.SupplierSourceId.VendorLocation entered
							and FromContract.ApPoPurchaseFrom.VendorLocation entered
							and FromContract.ApPoPurchaseFrom.VendorLocation != FromContract.SupplierSourceId.VendorLocation)
								invoked.ApPoPurchaseFrom.VendorLocation = FromContract.SupplierSourceId.VendorLocation
							if (FromContract.SupplierSourceId.VendorLocation entered
							and FromContract.ApPoPurchaseFrom.PurchaseFromLocation entered
							and FromContract.ApPoPurchaseFrom.PurchaseFromLocation != FromContract.SupplierSourceId.VendorLocation)
								invoked.ApPoPurchaseFrom.PurchaseFromLocation = FromContract.SupplierSourceId.VendorLocation
							if (NewEffectiveDate != FromContract.EffectiveDate)
								invoked.EffectiveDate				= NewEffectiveDate
							if (NewExpirationDate != FromContract.ExpirationDate)
								invoked.ExpirationDate				= NewExpirationDate
							if (NewContractReviewDate != FromContract.ContractReviewDate)
								invoked.ContractReviewDate			= NewContractReviewDate
							if (NewContractType entered)
								invoked.ContractType				= NewContractType
								invoked.ContractSubtype				= NewContractSubtype
							if (NewContractType entered
							or  NewContractSubtype entered)
								if  (FromContract.AllowChangeOrder = true
								and (FromContract.ContractType    != NewContractType
								or   FromContract.ContractSubtype != NewContractSubtype))
									if  ((NewContractSubtype entered
									and  !NewContractSubtype.ServiceType)
									or   (NewContractSubtype !entered
									and   NewContractType entered
									and  !NewContractType.ServiceType))
										invoked.AllowChangeOrder = false 
							if (NewContractClassification entered)
								invoked.ContractClassification		= NewContractClassification
								invoked.ContractSubclassification	= NewContractSubclassification
							if (!NewContractHasNoParent)
								if (NewParentContract entered)
									invoked.ParentContract			= NewParentContract
							else
								invoked.ParentContract	            = 0
							if (CreateAsManufacturerContract = false
							and FromContract.IsManufacturerContract)
								invoked.ManufacturerOrDistributor.ManufacturerContract = false 
							if (CreateDistributorContracts = false
							and FromContract.IsDistributorContract)
								invoked.ManufacturerOrDistributor.DistributorContract = false
							initialize invoked.EvaluationDate.EvaluationDates[1].EvaluationDate
							initialize invoked.EvaluationDate.EvaluationDates[1].EmailSent
							initialize invoked.EvaluationDate.EvaluationDates[2].EvaluationDate
							initialize invoked.EvaluationDate.EvaluationDates[2].EmailSent
							initialize invoked.EvaluationDate.EvaluationDates[3].EvaluationDate
							initialize invoked.EvaluationDate.EvaluationDates[3].EmailSent
							initialize invoked.EvaluationDate.EvaluationDates[4].EvaluationDate
							initialize invoked.EvaluationDate.EvaluationDates[4].EmailSent
							initialize invoked.EvaluationDate.EvaluationDates[5].EvaluationDate
							initialize invoked.EvaluationDate.EvaluationDates[5].EmailSent
							initialize invoked.SupplierCanViewEvaluation
							initialize invoked.DaysToEvaluate
							initialize invoked.SubmittedTimestamp
							initialize invoked.DaysToSubmit
							initialize invoked.AcceptedOrRejectedTimestamp
							initialize invoked.DaysToAccept
							initialize invoked.ReleasedTimestamp
							initialize invoked.DaysToRelease
							initialize invoked.InternalApprovalTimestamp
							initialize invoked.DaysToInternalApprove
							initialize invoked.SupplierApprovalTimestamp
							initialize invoked.DaysToSupplierApprove
							initialize invoked.NegotiationApprovalTimestamp
							initialize invoked.DaysToApproveNegotiation
							initialize invoked.FinalApprovalTimestamp	
							initialize invoked.DaysToFinalApprove
							initialize invoked.ActivatedTimestamp		
							initialize invoked.DaysToActivate
							initialize invoked.DaysToActivateAfterCreation
							initialize invoked.WorkingContractID
							initialize invoked.WorkingContractType
							initialize invoked.YellowAlert
							initialize invoked.RedAlert
							initialize invoked.OnHold
							initialize invoked.ClosedDate
							initialize invoked.ContractToHaveSubcontractors
							initialize invoked.RemoveFromExpireList
							initialize invoked.EmailedSupplierDate
							initialize invoked.LastRebateCalculationRunDate
							initialize invoked.FirstInvoiceAllowedDate
							initialize invoked.LastInvoiceAllowedDate
							initialize invoked.TermNegotiationVersion
							initialize invoked.LastReleaseDate
							initialize invoked.BackgroundGroupAsyncId
							initialize invoked.IDMDocumentPID
							initialize invoked.IDMDocumentSequence
							initialize invoked.IDMJob
							initialize invoked.ProcurementReasonCode
							if (CreatedFromRenewAction)
								if (NewEffectiveDate = FromContract.EffectiveDate)
									initialize invoked.EffectiveDate
								if (NewExpirationDate = FromContract.ExpirationDate)
									initialize invoked.ExpirationDate
								if (NewContractReviewDate = FromContract.ContractReviewDate)
									initialize invoked.ContractReviewDate
							invoked.ContractStatus					= 1
							invoked.PreviousState					= 0
							invoked.ApprovalStatus					= 0
							invoked.NegotiationStatus				= 0
							invoked.FinalApprovalStatus				= 0
							invoked.HasBeenActivated				= false
							invoked.ContractSource					= 3
							invoked.AddendumExists                  = false
							invoked.AmendmentExists					= false
							invoked.TermNegotiationVersion			= 0
							invoked.LastNotificationEmail           = 0
							invoked.TotalLineMaximumAmount			= 0
							invoked.TotalChildMaximumAmount         = 0
							invoked.AmountOrdered                   = 0
							invoked.AddOnChargeAmountOrdered        = 0
							invoked.TaxAmountOrdered                = 0
							invoked.AmountRequested                 = 0
							invoked.RetainageInvoiceAmount          = 0
							invoked.BudgetEditProcessing            = 0
							invoked.LastPORelease                   = 0
							invoked.CommitmentsClosed               = false
							invoked.ActivationInProgress            = false
							invoked.LastTierDisplayOrder            = 0
							invoked.YellowAlertEmailSent            = false
							invoked.RedAlertEmailSent               = false
							invoked.SupplierOriginatedContract      = false
							invoked.ProposedContract                = 0
							invoked.ArticleDisplayChange            = false
							invoked.TierDisplayChange               = false
							invoked.ProcessPricingChanges           = false
							invoked.EventTermsNeedToBeNegotiated    = false
							invoked.EventTermsHaveBeenNegotiated    = false
							invoked.PreferredContract               = false
							invoked.InMatrixApprovalProcess         = false  
							invoked.FromMatrixApproval              = false 
							invoked.LastRebateCalculationRunDate    = 0
							invoked.DiversityPctOfProposedTotal     = 0
							initialize invoked.ProposedSupplierName
						NewContractAndNewContractLine.NewContract	= this instance.Contract

						if (CopyTiersOrDistributorPricing or CopySelectAll)
							if (FromContract.IsManufacturerContract
							and CreateAsManufacturerContract)
								for each OriginalContractAndTier.OriginalContract.ContractTier set
									invoke Create ContractTier
										fill in fields from each
										invoked.Contract						 = NewContractAndNewContractLine.NewContract
									OriginalContractAndTier.OriginalContractTier = each.ContractTier
									for each OriginalContractAndTier.OriginalContractTier.ContractTierQualifier set
										invoke Create ContractTierQualifier
											fill in fields from each
											invoked.Contract							= NewContractAndNewContractLine.NewContract
											if (each.PurchaseType.TargetedPurchases)
												if (NewTargetedPurchasesFromDate entered)
													invoked.TargetedPurchasesFromDate 	= NewTargetedPurchasesFromDate
												if (NewTargetedPurchasesToDate entered)
													invoked.TargetedPurchasesToDate 	= NewTargetedPurchasesToDate 
								if (CopyQualifierContractsAndItems)
									for each FromContract.TierQualifierContractsRel 
										invoke Create TierQualifierContract 
											fill in fields from each 
											invoked.Contract							= NewContractAndNewContractLine.NewContract
									for each FromContract.TierQualifierItemsRel 
										invoke Create TierQualifierItem 
											fill in fields from each 
											invoked.Contract							= NewContractAndNewContractLine.NewContract								
							if (FromContract.IsDistributorContract
							and CreateDistributorContracts)
								for each OriginalContractAndTier.OriginalContract.ContractDistributorPricing set
									invoke Create ContractDistributorPricing
										fill in fields from each
										invoked.Contract				= NewContractAndNewContractLine.NewContract

						if (NewContractAndNewContractLine.NewContract.HasAPurchaseType
						and NewContractAndNewContractLine.NewContract.IsNotDistributorAndNotManufacturer)
							if (OriginalContractAndLine.OriginalContract.LineMarkupPriceBreaksExist)
								SavePricing.PricingBasePercent	  = first OriginalContractPricingRel.PricingBasePercent
								SavePricing.PricingMarkupDiscount = first OriginalContractPricingRel.PricingMarkupDiscount
								SavePricing.PriceBreakAmount1	  = first OriginalContractPricingRel.PriceBreakAmount1
								SavePricing.PriceBreakPercent1	  = first OriginalContractPricingRel.PriceBreakPercent1
								SavePricing.PriceBreakAmount2	  = first OriginalContractPricingRel.PriceBreakAmount2
								SavePricing.PriceBreakPercent2	  = first OriginalContractPricingRel.PriceBreakPercent2
								SavePricing.PriceBreakAmount3	  = first OriginalContractPricingRel.PriceBreakAmount3
								SavePricing.PriceBreakPercent3	  = first OriginalContractPricingRel.PriceBreakPercent3
								SavePricing.PriceBreakAmount4	  = first OriginalContractPricingRel.PriceBreakAmount4
								SavePricing.PriceBreakPercent4	  = first OriginalContractPricingRel.PriceBreakPercent4
								SavePricing.PriceBreakAmount5	  = first OriginalContractPricingRel.PriceBreakAmount5
								SavePricing.PriceBreakPercent5	  = first OriginalContractPricingRel.PriceBreakPercent5
								invoke Update NewContractPricingDefaultRel
									invoked.PricingBasePercent	  = SavePricing.PricingBasePercent
									invoked.PricingMarkupDiscount = SavePricing.PricingMarkupDiscount
									invoked.PriceBreakAmount1	  = SavePricing.PriceBreakAmount1
									invoked.PriceBreakPercent1	  = SavePricing.PriceBreakPercent1
									invoked.PriceBreakAmount2	  = SavePricing.PriceBreakAmount2
									invoked.PriceBreakPercent2	  = SavePricing.PriceBreakPercent2
									invoked.PriceBreakAmount3	  = SavePricing.PriceBreakAmount3
									invoked.PriceBreakPercent3	  = SavePricing.PriceBreakPercent3
									invoked.PriceBreakAmount4	  = SavePricing.PriceBreakAmount4
									invoked.PriceBreakPercent4	  = SavePricing.PriceBreakPercent4
									invoked.PriceBreakAmount5	  = SavePricing.PriceBreakAmount5
									invoked.PriceBreakPercent5	  = SavePricing.PriceBreakPercent5

						if (CopyManufacturerContracts or CopySelectAll)
							if (FromContract.IsDistributorContract
							and CreateDistributorContracts)
								for each OriginalContractAndTier.OriginalContract.ManufacturerContract(Contract) set
									if (!each.ManufacturerContractClosed)
										invoke Create ManufacturerContract
											fill in fields from each
											invoked.Contract				= NewContractAndNewContractLine.NewContract

						if (CopyContractParticipants or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractParticipant set
								invoke Create ContractParticipant
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
							if (FromContract.IsManufacturerContract
							and CreateAsManufacturerContract)
								for each OriginalContractAndTier.OriginalContract.ContractTierMember set
									invoke Create ContractTierMember
										fill in fields from each
										invoked.Contract				 = NewContractAndNewContractLine.NewContract
										invoked.Released				 = false
							if (FromContract.IsDistributorContract
							and CreateDistributorContracts)
								for each OriginalContractAndTier.OriginalContract.NonClosedDistPricingMemberRel
									invoke Create ContractDistributorPricingMember
										fill in fields from each
										invoked.Contract				= NewContractAndNewContractLine.NewContract
										invoked.Released				= false
										if (OriginalContractAndTier.OriginalContract = each.ContractDistributorPricingMember.ManufacturerContract)
											invoked.ContractDistributorPricingMember.ManufacturerContract = NewContractAndNewContractLine.NewContract

						if (CopyContacts or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractAttachedContact set
								invoke CreateAdHocContact ContractAttachedContact
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									if (NewContact = each.ContractAttachedContact.Contact
									and NewContact entered)
										invoked.PrimaryContact    = true
									else
										if (NewContact entered)
											invoked.PrimaryContact    = false

						LocalNewContact  = NewContact

						if  (!ContractContactRel exists
						and  NewContact entered)
							invoke CreateAdHocContact ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= NewContractAndNewContractLine.NewContract
								invoked.Contact					= NewContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true
								fill in fields from NewContact

						if (CopyManualQuestions or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractManualAssignedQuestionRel
								if (each.CreatedFromQuestion !entered)
									invoke Create ContractQuestion
										assign result to NewQuestion
										fill in fields from each
										invoked.Contract 			= NewContractAndNewContractLine.NewContract
										invoked.Attachment.File     = each.Attachment.File
										invoked.Attachment.MimeType = each.Attachment.MimeType
										invoked.Attachment.Title    = each.Attachment.Title

									if (each.YesNoResponseType
									and each.HasContractConditionalQuestions)
										for each each.ContractConditionalYesNoQuestionRel
											invoke Create ContractConditionalYesNoQuestion 
												invoked.ContractGroup 											= ContractGroup 
												invoked.Contract                  								= NewContractAndNewContractLine.NewContract
												invoked.ContractQuestion		  								= NewQuestion.ContractQuestion
												invoked.ContractConditionalYesNoQuestion.YesOrNo                = each.ContractConditionalYesNoQuestion.YesOrNo
												invoked.ContractConditionalYesNoQuestion.ConditionalQuestion	= each.ContractConditionalYesNoQuestion.ConditionalQuestion											
									
									if (each.ResponseType.List)
										for each each.ContractQuestionListValue set
											invoke Create ContractQuestionListValue
												invoked.ContractGroup             = ContractGroup
												invoked.Contract                  = NewContractAndNewContractLine.NewContract
												invoked.ContractQuestion		  = NewQuestion.ContractQuestion
												fill in fields from each

											if (each.HasContractConditionalQuestions)
												invoke CopyContractConditionalQuestions each 
													invoked.NewContract		= NewContractAndNewContractLine.NewContract
													invoked.NewQuestion     = NewQuestion.ContractQuestion

						if (CopyMilestones or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractMilestone set
								invoke Create ContractMilestone
									assign result to NewMilestone
									fill in fields from each
										except invoked.Contract
										except invoked.CompletionStatus
										except invoked.MilestoneDate
										except invoked.PercentComplete
										except invoked.FirstAlertSent
										except invoked.SecondAlertSent
									invoked.Contract = NewContractAndNewContractLine.NewContract
									invoked.CompletionStatus              = 1
									invoked.NumberOfDaysToFirstAlert      = ContractGroup.MilestoneYellowAlert
									invoked.NumberOfDaysToSecondAlert     = ContractGroup.MilestoneRedAlert
								for each each.ContractMilestoneComment set
									invoke Create ContractMilestoneComment
										fill in fields from each
										invoked.Contract 		  	= NewContractAndNewContractLine.NewContract
										invoked.ContractMilestone 	= NewMilestone.ContractMilestone
										invoked.Attachment.File   	= each.Attachment.File
										invoked.Attachment.MimeType	= each.Attachment.MimeType
										invoked.Attachment.Title    = each.Attachment.Title
								for each each.ContractMilestoneContact set
									if (each.Contact entered)
										invoke CreateContactFromEmployee ContractMilestoneContact
											fill in fields from each
											invoked.Contract 		  = NewContractAndNewContractLine.NewContract
											invoked.ContractMilestone = NewMilestone.ContractMilestone
									else
										invoke CreateAdHocContact ContractMilestoneContact
											fill in fields from each
											invoked.Contract 		  = NewContractAndNewContractLine.NewContract
											invoked.ContractMilestone = NewMilestone.ContractMilestone

						if (CopyDeliverables or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractDeliverable set
								invoke Create ContractDeliverable
									assign result to NewDeliverable
									fill in fields from each
										except invoked.Contract
										except invoked.DueDate
										except invoked.DeliveredDate
										except invoked.FirstAlertSent
										except invoked.SecondAlertSent
									invoked.Contract                     = NewContractAndNewContractLine.NewContract
									invoked.NumberOfDaysToFirstAlert     = ContractGroup.DeliverableYellowAlert
									invoked.NumberOfDaysToSecondAlert    = ContractGroup.DeliverableRedAlert
								for each each.ContractDeliverableComment set
									invoke Create ContractDeliverableComment
										fill in fields from each
										invoked.Contract 			= NewContractAndNewContractLine.NewContract
										invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable
										invoked.Attachment.File		= each.Attachment.File
										invoked.Attachment.MimeType	= each.Attachment.MimeType
										invoked.Attachment.Title	= each.Attachment.Title
								for each each.ContractDeliverableContact set
									if (each.Contact entered)
										invoke CreateContactFromEmployee ContractDeliverableContact
											fill in fields from each
											invoked.Contract 			= NewContractAndNewContractLine.NewContract
											invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable
									else
										invoke CreateAdHocContact ContractDeliverableContact
											fill in fields from each
											invoked.Contract 			= NewContractAndNewContractLine.NewContract
											invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable
						if (CopyContractComments or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ManualCommentsRel
								invoke Create ContractComment
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Attachment.File			= each.Attachment.File
									invoked.Attachment.MimeType		= each.Attachment.MimeType
									invoked.Attachment.Title		= each.Attachment.Title

						if (CopyContractAttachments or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractAttachmentsRel
								invoke Create ContractAttachment
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Attachment.File			= each.Attachment.File
									invoked.Attachment.MimeType		= each.Attachment.MimeType
									invoked.Attachment.Title		= each.Attachment.Title

						if (CopyArticlesAndTerms or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractArticle set
								if (each.IsActive
								and !each.Deleted)
									invoke AutoCreate ContractArticle
										assign result to LocalContractArticle
										fill in fields from each
										invoked.ContractGroup  = ContractGroup
										invoked.Contract 	   = NewContractAndNewContractLine.NewContract
										invoked.ContractStatus = NewContractAndNewContractLine.NewContract.ContractStatus
									invoke AutoCreate ContractArticleUpdate
										invoked.ContractGroup 				= ContractGroup
										invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
										invoked.ContractArticle            	= LocalContractArticle.ContractArticle
									for each each.ActiveContractTermAndConditionRel
										invoke AutoCreate ContractTermAndCondition
											fill in fields from each
											invoked.ContractGroup 		= ContractGroup
											invoked.Contract 			= NewContractAndNewContractLine.NewContract
											invoked.ContractArticle 	= LocalContractArticle.ContractArticle
											invoked.ContractTermAndCondition = each.ContractTermAndCondition
											invoked.ContractStatus 		= NewContractAndNewContractLine.NewContract.ContractStatus
										invoke AutoCreate ContractTermAndConditionUpdate
											invoked.ContractGroup 				= ContractGroup
											invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
											invoked.ContractArticle            	= LocalContractArticle.ContractArticle
											invoked.ContractTermAndCondition   	= each.ContractTermAndCondition
										for each each.ContractTermAndConditionAttachment set
											invoke AutoCreate ContractTermAndConditionAttachment
												fill in fields from each
												invoked.ContractGroup 				= ContractGroup
												invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
												invoked.ContractArticle            	= LocalContractArticle.ContractArticle
												invoked.ContractTermAndCondition   	= each.ContractTermAndCondition

						if (CopyLocations or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractHeaderLocationRel
								LocalContract      		= NewContractAndNewContractLine.NewContract
								LocalCompany       		= each.ContractAndLineLocation.Company 
								LocalInventoryLocation  = each.ContractAndLineLocation.Location 
								LocalRequestingLocation = each.ContractAndLineLocation.RequestingLocation
								if (ContractLocalHeaderLocationRel !exists)
									invoke Create ContractAndLineLocation 
										invoked.ContractGroup 								= ContractGroup
										invoked.Contract 		           					= LocalContract
										invoked.ContractAndLineLocation.Company 			= LocalCompany 
										invoked.ContractAndLineLocation.Location			= LocalInventoryLocation 
										invoked.ContractAndLineLocation.RequestingLocation	= LocalRequestingLocation
										invoked.Taxable                                     = each.Taxable 
										invoked.TaxCode                                     = each.TaxCode 
										invoked.ClinicalSystemUse                           = each.ClinicalSystemUse 
										invoked.LineLevel                                   = each.LineLevel 

						if (CopyContractLines or CopySelectAll)
							invoke CreateContractLinesFromContract ContractLine
								invoked.PrmContractGroup				= ContractGroup
								invoked.PrmFromContract					= OriginalContractAndTier.OriginalContract
								invoked.PrmNewContractAndLine			= NewContractAndNewContractLine
								invoked.PrmContractType					= NewContractType
								invoked.PrmContractSubtype				= NewContractSubtype
								invoked.PrmCurrencyCode					= NewCurrencyCode
								invoked.PrmSupplier						= NewSupplier
								invoked.PrmCopyContractLineComments		= CopyContractLineComments
								invoked.PrmCopyContractLineAttachments  = CopyContractLineAttachments
								invoked.PrmCopySelectAll				= CopySelectAll
								invoked.PrmCopyLocations                = CopyLocations
								invoked.PrmCopyHoldForLines             = CopyHoldForLines
								invoked.PrmCopyCapitatedInformation     = CopyCapitatedInformation
								if (NewEffectiveDate != FromContract.EffectiveDate)
									invoked.PrmEffectiveDate			= NewEffectiveDate
								if (NewExpirationDate != FromContract.ExpirationDate)
									invoked.PrmExpirationDate			= NewExpirationDate
								invoked.CreateFromPartial               = CreateFromPartial
								invoked.CloseExistingLines              = CloseExistingLines 
								invoked.HoldExistingLines               = HoldExistingLines
								invoked.ProcurementReasonCode           = ProcurementReasonCode
								invoked.FromInterface                   = FromInterface 
								invoked.CreateNewContract               = true 
								invoked.CreateAsManufacturerContract    = CreateAsManufacturerContract
								invoked.CreateDistributorContracts      = CreateDistributorContracts

						if  (CapitatedContract
						and	(CopyCapitatedInformation 
						or   CopySelectAll))
							for each NoProcedureComponentGroupRel
								invoke Create ContractCapitatedComponentGroup 
									fill in fields from each 						
									invoked.Contract		   = NewContractAndNewContractLine.NewContract
						
						invoke CreateRelatedContract RelatedContract
							invoked.ContractGroup	  		   = ContractGroup
							invoked.Contract		  		   = NewContractAndNewContractLine.NewContract
							invoked.RelatedContractID 		   = FromContract
							invoked.RelatedContractType		   = 6
							invoked.RelatedSupplierName 	   = FromContract.Supplier.SupplierName
							invoked.ManufacturerCodeDivision   = FromContract.ManufacturerCodeDivision
							invoked.Supplier				   = FromContract.Supplier
							invoked.Vendor					   = FromContract.Vendor
							invoked.RelatedContractDescription = FromContract.Description

						invoke CreateRelatedContract RelatedContract
							invoked.ContractGroup	  		   = ContractGroup
							invoked.Contract		  		   = FromContract
							invoked.RelatedContractID          = NewContractAndNewContractLine.NewContract
							invoked.RelatedContractType		   = 16
							invoked.RelatedSupplierName 	   = NewContractAndNewContractLine.NewContract.Supplier.SupplierName
							invoked.ManufacturerCodeDivision   = NewContractAndNewContractLine.NewContract.ManufacturerCodeDivision
							invoked.Supplier				   = NewContractAndNewContractLine.NewContract.Supplier
							invoked.Vendor					   = NewContractAndNewContractLine.NewContract.Vendor
							invoked.RelatedContractDescription = NewContractAndNewContractLine.NewContract.Description

				CreateFromInterview is a Create Action
					Action Rules
						ContractTemplate = false
						ContractSource = 1
					Field Rules
						Contract
   							autosequence using ContractGroup.LastContract

   						SourcingEligible
							if (ContractSubclassification entered)
								default to ContractSubclassification.SourcingEligible
							else
								default to ContractClassification.SourcingEligible

					Exit Rules

						for each QuestionsByTypeAndClassRel
							CheckQuestion = each.Question
							if (!CheckContractQuestionRel exists)
								invoke AttachQuestionToContractIndirect LocalQuestionRel 
									invoked.Contract 		= Contract
									invoked.FromInterview 	= true

						if (PurchasingContact entered
						and	!PrimaryContactExists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

				CreateFromWizard is a Create Action
					Action Rules
						ContractTemplate = false
						ContractSource = 7
					Field Rules
						Contract
   							autosequence using ContractGroup.LastContract

   						SourcingEligible
							if (ContractSubclassification entered)
								default to ContractSubclassification.SourcingEligible
							else
								default to ContractClassification.SourcingEligible

					Exit Rules

						if (PurchasingContact entered
						and	!PrimaryContactExists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

						if (IsManufacturerContract and NotContractTemplate and !MultiTierDistributorContract)
							if (!MfgContractRel exists)
								invoke Create MfgContractRel
									invoked.ContractGroup				= ContractGroup
									invoked.ManufacturerContractPivot	= Contract

				CreateContractTemplate is a Create Action
					completion message is "Template<this instance.Contract>Created"
					Entrance Rules
						ContractTemplate = true
					Action Rules
						if (!ContractGroup.LastContractTemplate entered)
							invoke SetContractTemplate ContractGroup
					Field Rules
						Contract
							autosequence using ContractGroup.LastContractTemplate

					Exit Rules
						if (PurchasingContact entered
						and	!PrimaryContactExists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

				CreateContractProposalTemplate is a Create Action
					completion message is "ProposalTemplate<this instance.Contract>Created"
					Entrance Rules
						ProposalTemplate = true
						ContractTemplate = true 
					Action Rules
						if (!ContractGroup.LastContractTemplate entered)
							invoke SetContractTemplate ContractGroup
					Field Rules
						Contract
							autosequence using ContractGroup.LastContractTemplate

					Exit Rules
						if (PurchasingContact entered
						and	!PrimaryContactExists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= Contract
								invoked.Contact					= PurchasingContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true

				CreateContractFromTemplate is a Create Action
					completion message is "Contract<this instance.Contract>Created"
					allow user fields as parameters
					Parameters
						ContractGroup
						Template						is a Contract
						NewName 						is a Description
						NewDescription 					is Text
						NewContact                      is an Employee
						NewSupplier						is a Supplier
						NewSupplierContact				is a SupplierSourceId
						NewContractType					is a ContractType
						NewContractSubtype				is a ContractSubtype
						NewContractClassification		is a ContractClassification
						NewContractSubclassification	is a ContractSubclassification
						NewParentContract				is a Contract
						NewEffectiveDate				is Date
						NewExpirationDate				is Date
						NewContractReviewDate			is Date
						NewTargetedPurchasesFromDate	is Date
						NewTargetedPurchasesToDate		is Date
						NewCurrencyCode					is a Currency
						CopySelectAll					is Boolean
						CopyTiersOrDistributorPricing	is Boolean
						CopyContractParticipants		is Boolean
						CopyContacts					is Boolean
						CopyContractLines				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyContractComments			is Boolean
						CopyContractAttachments         is Boolean
						CopyContractLineComments		is Boolean
						CopyContractLineAttachments      is Boolean
						CopyManualQuestions				is Boolean
						CopyMilestones					is Boolean
						CopyDeliverables				is Boolean

					Parameter Rules
						ContractGroup
							required
						Template
							required
 							constraint (Template exists
							and 		Template.ContractTemplate)
								"ContractTemplateDoesNotExist"
						NewName
							required
						NewDescription
							initial value is Template.Description
							default to Template.Description
						NewContact
							initial value is Template.PrimaryContactRel.Contact
							default to Template.PrimaryContactRel.Contact
						NewSupplier
							initial value is Template.Supplier
							default to Template.Supplier
							if (NewSupplierContact entered)
								required
									"SupplierIsRequiredWhenSupplierContactIsEntered"
						NewSupplierContact
							initial value is Template.SupplierSourceId
							default to Template.SupplierSourceId
							if (NewSupplier entered)
								required
									"SupplierContactIsRequiredWhenSupplierIsEntered"
						NewContractType
							initial value is Template.ContractType
							default to Template.ContractType
							required
								"ContractTypeIsRequired"
						NewContractSubtype
							initial value is Template.ContractSubtype
							if (NewContractSubtype entered)
								constraint (NewContractType entered)
									"ContractTypeIsRequiredWhenContractSubtypeIsEntered"
						NewContractClassification
							initial value is Template.ContractClassification
							default to Template.ContractClassification
							required
								"ContractClassificationIsRequired"
							if  (NewContractSubclassification not entered)
								if (Template.ContractSubclassification not entered
								and Template.ContractClassification.UseIDM)
									constraint (NewContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"

								if (Template.ContractSubclassification entered
								and Template.ContractSubclassification.UseIDM)
									constraint (NewContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"
						NewContractSubclassification
							initial value is Template.ContractSubclassification
							if (NewContractSubclassification entered)
								constraint (NewContractClassification entered)
									"ContractClassificationIsRequiredWhenContractSubclassificationIsEntered"
							if  (NewContractSubclassification entered)
								if (Template.ContractSubclassification not entered
								and Template.ContractClassification.UseIDM)
									constraint (NewContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"

								if (Template.ContractSubclassification entered
								and Template.ContractSubclassification.UseIDM)
									constraint (NewContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"
						NewCurrencyCode
							if (NewSupplier.Vendor.InvoiceCurrency entered)
								NewCurrencyCode = NewSupplier.Vendor.InvoiceCurrency
							else
								default to Template.CurrencyCode
						CopySelectAll
							initial value is true
						CopyContractParticipants
							if (CopyContractParticipants)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyParticipants/MembersOptionWhenTheSelectAllOptionIsSelected"
								if (Template.ContractTierMember set exists
								or  Template.ContractDistributorPricingMember set exists)
									constraint (CopyTiersOrDistributorPricing)
										"CannotCopyMembersWithoutCopyingTiersOrDistributorPricing"

						CopyContractLines
							if (Template.LineTierCostsExist
							and CopyContractLines)
								constraint (CopyTiersOrDistributorPricing)
									"ContractLineTierCostsExist;MustSelectToCopyTiers"
						CopyContractLineComments
							if (CopyContractLineComments)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyContractLineCommentsOptionWhenTheSelectAllOptionIsSelected"
								constraint (CopyContractLines)
									"CannotCopyContractLineCommentsWithoutCopyingContractLines"
						CopyContractLineAttachments
							if (CopyContractLineAttachments)
								constraint (!CopySelectAll)
									"CannotSelectTheCopyContractLineAttachmentsOptionWhenTheSelectAllOptionIsSelected"
								constraint (CopyContractLines)
									"CannotCopyContractLineAttachmentsWithoutCopyingContractLines"
						NewTargetedPurchasesFromDate
							if (!NewEffectiveDate entered)
								if (Template.EffectiveDate > 0)
								   	constraint (NewTargetedPurchasesFromDate >= Template.EffectiveDate)
										"NewTargetedPurchasesFromDateCannotBeLessThanContractEffectiveDate"
							else
								constraint (NewTargetedPurchasesFromDate >= NewEffectiveDate)
									"NewTargetedPurchasesFromDateCannotBeLessThanNewEffectiveDate"
							if (!NewExpirationDate entered)
								if (Template.ExpirationDate > 0)
									constraint (NewTargetedPurchasesFromDate <= Template.ExpirationDate)
										"NewTargetedPurchasesFromDateCannotBeGreaterThanContractExpirationDate"
							else
								constraint (NewTargetedPurchasesFromDate <= NewExpirationDate)
									"NewTargetedPurchasesFromDateCannotBeGreaterThanNewExpirationDate"


						NewTargetedPurchasesToDate
						   	constraint (NewTargetedPurchasesToDate > NewTargetedPurchasesFromDate)
								"NewTargetedPurchasesToDateCannotBeLessThanFromDate"
							if (!NewExpirationDate entered)
						   		if (Template.ExpirationDate > 0)
									constraint (NewTargetedPurchasesToDate <= Template.ExpirationDate)
										"NewTargetedPurchasesToDateCannotBeGreaterThanContractExpirationDate"
							else
								constraint (NewTargetedPurchasesToDate <= NewExpirationDate)
									"NewTargetedPurchasesToDateCannotBeGreaterThanNewExpirationDate"

					Local Fields
						OriginalContractAndTier
						NewContractAndNewContractLine
						NewQuestion 					is a ContractQuestion view
						SavePricing
						LocalContractArticle			is a ContractArticle view
						NewMilestone                    is a ContractMilestone view
						NewDeliverable                  is a ContractDeliverable view
						
					Action Rules
						if (CopyTiersOrDistributorPricing
						or	CopyContractParticipants
						or	CopyContacts
						or	CopyContractLines
						or	CopyArticlesAndTerms
						or	CopyContractComments
						or  CopyContractAttachments
						or	CopyContractLineComments
						or  CopyContractLineAttachments
						or	CopyManualQuestions
						or	CopyMilestones
						or	CopyDeliverables)
							constraint (!CopySelectAll)
								"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"
						
						LocalNativeBODLinesTrigger	= true
						OriginalContractAndTier.OriginalContract = Template
						OriginalContractAndLine.OriginalContract = Template
						invoke Draft.Create this instance
							fill in fields from Template
							invoked.CreateByCopy	   				= true
							invoked.Contract						= 0
							invoked.Name							= NewName
							if (NewDescription entered)
								invoked.Description					= NewDescription
							if (NewSupplier entered)
								invoked.Supplier					= NewSupplier
								invoked.SupplierSourceId			= NewSupplierContact
								invoked.Vendor                      = NewSupplier.Vendor
							if (!Template.SupplierSourceId          = NewSupplierContact
							or  !Template.Supplier                  = NewSupplier)
								invoked.ApPoPurchaseFrom            = blank
							if (Template.SupplierSourceId.VendorLocation entered
							and Template.ApPoPurchaseFrom.VendorLocation entered
							and Template.ApPoPurchaseFrom.VendorLocation != Template.SupplierSourceId.VendorLocation)
								invoked.ApPoPurchaseFrom.VendorLocation = Template.SupplierSourceId.VendorLocation
							if (Template.SupplierSourceId.VendorLocation entered
							and Template.ApPoPurchaseFrom.PurchaseFromLocation entered
							and Template.ApPoPurchaseFrom.PurchaseFromLocation != Template.SupplierSourceId.VendorLocation)
								invoked.ApPoPurchaseFrom.PurchaseFromLocation = Template.SupplierSourceId.VendorLocation
							if (NewEffectiveDate entered)
								invoked.EffectiveDate				= NewEffectiveDate
							if (NewExpirationDate entered)
								invoked.ExpirationDate				= NewExpirationDate
							else
								initialize invoked.ExpirationDate
							if (NewContractReviewDate entered)
								invoked.ContractReviewDate			= NewContractReviewDate
							if (NewContractType entered)
								invoked.ContractType				= NewContractType
								invoked.ContractSubtype				= NewContractSubtype
							if (NewContractClassification entered)
								invoked.ContractClassification		= NewContractClassification
								invoked.ContractSubclassification	= NewContractSubclassification
							if (NewParentContract entered)
								invoked.ParentContract				= NewParentContract
							else
								invoked.ParentContract	            = 0
							initialize invoked.WorkingContractID
							initialize invoked.WorkingContractType
							invoked.ContractStatus					= 1
							invoked.PreviousState					= 0
							invoked.ApprovalStatus					= 0
							invoked.NegotiationStatus				= 0
							invoked.FinalApprovalStatus				= 0
							invoked.HasBeenActivated				= false
							invoked.ContractSource					= 6
							invoked.AddendumExists                  = false
							invoked.AmendmentExists					= false
							initialize invoked.EmailedSupplierDate
							invoked.TermNegotiationVersion			= 0
							invoked.LastNotificationEmail           = 0
							invoked.TotalLineMaximumAmount			= 0
							invoked.LastTierDisplayOrder            = 0

						NewContractAndNewContractLine.NewContract	= this instance.Contract

						invoke CreateRelatedContract RelatedContract
							invoked.ContractGroup	  		   = ContractGroup
							invoked.Contract		  		   = NewContractAndNewContractLine.NewContract
							invoked.RelatedContractID 		   = Template
							invoked.RelatedContractType		   = 17
							invoked.RelatedContractDescription = Template.Name

						if (CopyTiersOrDistributorPricing or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractTier set
								invoke Create ContractTier
									fill in fields from each
									invoked.Contract						 = NewContractAndNewContractLine.NewContract
								OriginalContractAndTier.OriginalContractTier = each.ContractTier
								for each OriginalContractAndTier.OriginalContractTier.ContractTierQualifier set
									invoke Create ContractTierQualifier
										fill in fields from each
										invoked.Contract							= NewContractAndNewContractLine.NewContract
										if (each.PurchaseType.TargetedPurchases)
											if (NewTargetedPurchasesFromDate entered)
												invoked.TargetedPurchasesFromDate 	= NewTargetedPurchasesFromDate
											if (NewTargetedPurchasesToDate entered)
												invoked.TargetedPurchasesToDate 	= NewTargetedPurchasesToDate
									for each each.ContractTierQualifierCode set
										invoke Create ContractTierQualifierCode
											fill in fields from each
											invoked.Contract							= NewContractAndNewContractLine.NewContract

							for each OriginalContractAndTier.OriginalContract.ContractDistributorPricing set
								invoke Create ContractDistributorPricing
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract

						if (NewContractAndNewContractLine.NewContract.HasAPurchaseType
						and NewContractAndNewContractLine.NewContract.IsNotDistributorAndNotManufacturer)
							if (OriginalContractAndLine.OriginalContract.LineMarkupPriceBreaksExist)
								SavePricing.PricingBasePercent	  = first OriginalContractPricingRel.PricingBasePercent
								SavePricing.PricingMarkupDiscount = first OriginalContractPricingRel.PricingMarkupDiscount
								SavePricing.PriceBreakAmount1	  = first OriginalContractPricingRel.PriceBreakAmount1
								SavePricing.PriceBreakPercent1	  = first OriginalContractPricingRel.PriceBreakPercent1
								SavePricing.PriceBreakAmount2	  = first OriginalContractPricingRel.PriceBreakAmount2
								SavePricing.PriceBreakPercent2	  = first OriginalContractPricingRel.PriceBreakPercent2
								SavePricing.PriceBreakAmount3	  = first OriginalContractPricingRel.PriceBreakAmount3
								SavePricing.PriceBreakPercent3	  = first OriginalContractPricingRel.PriceBreakPercent3
								SavePricing.PriceBreakAmount4	  = first OriginalContractPricingRel.PriceBreakAmount4
								SavePricing.PriceBreakPercent4	  = first OriginalContractPricingRel.PriceBreakPercent4
								SavePricing.PriceBreakAmount5	  = first OriginalContractPricingRel.PriceBreakAmount5
								SavePricing.PriceBreakPercent5	  = first OriginalContractPricingRel.PriceBreakPercent5
								invoke Update NewContractPricingDefaultRel
									invoked.PricingBasePercent	  = SavePricing.PricingBasePercent
									invoked.PricingMarkupDiscount = SavePricing.PricingMarkupDiscount
									invoked.PriceBreakAmount1	  = SavePricing.PriceBreakAmount1
									invoked.PriceBreakPercent1	  = SavePricing.PriceBreakPercent1
									invoked.PriceBreakAmount2	  = SavePricing.PriceBreakAmount2
									invoked.PriceBreakPercent2	  = SavePricing.PriceBreakPercent2
									invoked.PriceBreakAmount3	  = SavePricing.PriceBreakAmount3
									invoked.PriceBreakPercent3	  = SavePricing.PriceBreakPercent3
									invoked.PriceBreakAmount4	  = SavePricing.PriceBreakAmount4
									invoked.PriceBreakPercent4	  = SavePricing.PriceBreakPercent4
									invoked.PriceBreakAmount5	  = SavePricing.PriceBreakAmount5
									invoked.PriceBreakPercent5	  = SavePricing.PriceBreakPercent5

						if (CopyContractParticipants or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractParticipant set
								invoke Create ContractParticipant
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract

							for each OriginalContractAndTier.OriginalContract.ContractTierMember set
								invoke Create ContractTierMember
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Released				= "N"
							for each OriginalContractAndTier.OriginalContract.ContractDistributorPricingMember set
								invoke Create ContractDistributorPricingMember
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Released				= "N"
									if (OriginalContractAndTier.OriginalContract = each.ContractDistributorPricingMember.ManufacturerContract)
										invoked.ContractDistributorPricingMember.ManufacturerContract = NewContractAndNewContractLine.NewContract

						if (CopyContacts or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractAttachedContact set
								invoke CreateAdHocContact ContractAttachedContact
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									if (NewContact = each.ContractAttachedContact.Contact
									and NewContact entered)
										invoked.PrimaryContact    = true
									else
										if (NewContact entered)
											invoked.PrimaryContact    = false

						LocalNewContact  = NewContact

						if (NewContact entered
						and !ContractContactRel exists)
							invoke CreateContactFromEmployee ContractAttachedContact
								invoked.ContractGroup 			= ContractGroup
								invoked.Contract				= NewContractAndNewContractLine.NewContract
								invoked.Contact					= NewContact
								invoked.PrimaryContact			= true
								invoked.SSContact				= true
								fill in fields from NewContact

						for each OriginalContractAndTier.OriginalContract.ContractSpread set
							invoke Create ContractSpread
								fill in fields from each
								invoked.Contract				= NewContractAndNewContractLine.NewContract

						if (CopyManualQuestions or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractManualAssignedQuestionRel
								invoke Create ContractQuestion
									assign result to NewQuestion
									fill in fields from each
									invoked.Contract 			= NewContractAndNewContractLine.NewContract
									invoked.Attachment.File     = each.Attachment.File
									invoked.Attachment.MimeType = each.Attachment.MimeType
									invoked.Attachment.Title    = each.Attachment.Title

								if (each.YesNoResponseType
								and each.HasContractConditionalQuestions)
									for each each.ContractConditionalYesNoQuestionRel
										invoke Create ContractConditionalYesNoQuestion 
											invoked.ContractGroup 											= ContractGroup 
											invoked.Contract                  								= NewContractAndNewContractLine.NewContract
											invoked.ContractQuestion		  								= NewQuestion.ContractQuestion
											invoked.ContractConditionalYesNoQuestion.YesOrNo                = each.ContractConditionalYesNoQuestion.YesOrNo
											invoked.ContractConditionalYesNoQuestion.ConditionalQuestion	= each.ContractConditionalYesNoQuestion.ConditionalQuestion	

								if (each.ResponseType.List)
									for each each.ContractQuestionListValue set
										invoke Create ContractQuestionListValue
											invoked.ContractGroup             = ContractGroup
											invoked.Contract                  = NewContractAndNewContractLine.NewContract
											invoked.ContractQuestion          = NewQuestion.ContractQuestion
											fill in fields from each

										if (each.HasContractConditionalQuestions)
											invoke CopyContractConditionalQuestions each 
												invoked.NewContract		= NewContractAndNewContractLine.NewContract
												invoked.NewQuestion     = NewQuestion.ContractQuestion

						if (CopyMilestones or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractMilestone set
								invoke Create ContractMilestone
									assign result to NewMilestone
									fill in fields from each
										except invoked.Contract
										except invoked.CompletionStatus
										except invoked.MilestoneDate
										except invoked.PercentComplete
									invoked.Contract = NewContractAndNewContractLine.NewContract
									invoked.CompletionStatus 			 = 1
									invoked.NumberOfDaysToFirstAlert     = ContractGroup.MilestoneYellowAlert
									invoked.NumberOfDaysToSecondAlert    = ContractGroup.MilestoneRedAlert
								for each each.ContractMilestoneComment set
									invoke Create ContractMilestoneComment
										fill in fields from each
										invoked.Contract 			= NewContractAndNewContractLine.NewContract
										invoked.ContractMilestone 	= NewMilestone.ContractMilestone
										invoked.Attachment.File		= each.Attachment.File
										invoked.Attachment.MimeType	= each.Attachment.MimeType
										invoked.Attachment.Title	= each.Attachment.Title
								for each each.ContractMilestoneContact set
									if (each.ContactEntered)
										invoke CreateContactFromEmployee ContractMilestoneContact
											fill in fields from each
											invoked.Contract = NewContractAndNewContractLine.NewContract
											invoked.ContractMilestone = NewMilestone.ContractMilestone
									else
										invoke CreateAdHocContact ContractMilestoneContact
											fill in fields from each
											invoked.Contract = NewContractAndNewContractLine.NewContract
											invoked.ContractMilestone = NewMilestone.ContractMilestone
						if (CopyDeliverables or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractDeliverable set
								invoke Create ContractDeliverable
									assign result to NewDeliverable
									fill in fields from each
										except invoked.Contract
										except invoked.DueDate
										except invoked.DeliveredDate
										except invoked.FirstAlertSent
										except invoked.SecondAlertSent
									invoked.Contract                     = NewContractAndNewContractLine.NewContract
									invoked.NumberOfDaysToFirstAlert     = ContractGroup.DeliverableYellowAlert
									invoked.NumberOfDaysToSecondAlert    = ContractGroup.DeliverableRedAlert
								for each each.ContractDeliverableComment set
									invoke Create ContractDeliverableComment
										fill in fields from each
										invoked.Contract = NewContractAndNewContractLine.NewContract
										invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable
										invoked.Attachment.File		= each.Attachment.File
										invoked.Attachment.MimeType	= each.Attachment.MimeType
										invoked.Attachment.Title	= each.Attachment.Title
								for each each.ContractDeliverableContact set
									if (each.ContactEntered)
										invoke CreateContactFromEmployee ContractDeliverableContact
											fill in fields from each
											invoked.Contract = NewContractAndNewContractLine.NewContract
											invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable										
									else
										invoke CreateAdHocContact ContractDeliverableContact
											fill in fields from each
											invoked.Contract = NewContractAndNewContractLine.NewContract
											invoked.ContractDeliverable	= NewDeliverable.ContractDeliverable									

						if (CopyContractComments or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ManualCommentsRel
								invoke Create ContractComment
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Attachment.File			= each.Attachment.File
									invoked.Attachment.MimeType		= each.Attachment.MimeType
									invoked.Attachment.Title		= each.Attachment.Title

						if (CopyContractAttachments or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractAttachment set
								invoke Create ContractAttachment
									fill in fields from each
									invoked.Contract				= NewContractAndNewContractLine.NewContract
									invoked.Attachment.File			= each.Attachment.File
									invoked.Attachment.MimeType		= each.Attachment.MimeType
									invoked.Attachment.Title		= each.Attachment.Title

						if (CopyArticlesAndTerms or CopySelectAll)
							for each OriginalContractAndTier.OriginalContract.ContractArticle set
								if (each.IsActive
								and !each.Deleted)
									invoke AutoCreate ContractArticle
										assign result to LocalContractArticle
										fill in fields from each
										invoked.ContractGroup  = ContractGroup
										invoked.Contract 	   = NewContractAndNewContractLine.NewContract
										invoked.ContractStatus = NewContractAndNewContractLine.NewContract.ContractStatus
									invoke AutoCreate ContractArticleUpdate
										invoked.ContractGroup 				= ContractGroup
										invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
										invoked.ContractArticle            	= LocalContractArticle.ContractArticle
									for each each.ActiveContractTermAndConditionRel
										invoke AutoCreate ContractTermAndCondition
											fill in fields from each
											invoked.ContractGroup 		= ContractGroup
											invoked.Contract 			= NewContractAndNewContractLine.NewContract
											invoked.ContractArticle 	= LocalContractArticle.ContractArticle
											invoked.ContractTermAndCondition = each.ContractTermAndCondition
											invoked.ContractStatus 		= NewContractAndNewContractLine.NewContract.ContractStatus
										invoke AutoCreate ContractTermAndConditionUpdate
											invoked.ContractGroup 				= ContractGroup
											invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
											invoked.ContractArticle            	= LocalContractArticle.ContractArticle
											invoked.ContractTermAndCondition   	= each.ContractTermAndCondition
										for each each.ContractTermAndConditionAttachment set
											invoke AutoCreate ContractTermAndConditionAttachment
												fill in fields from each
												invoked.ContractGroup 				= ContractGroup
												invoked.Contract 		           	= NewContractAndNewContractLine.NewContract
												invoked.ContractArticle            	= LocalContractArticle.ContractArticle
												invoked.ContractTermAndCondition   	= each.ContractTermAndCondition

						if (CopyContractLines or CopySelectAll)
							invoke CreateContractLinesFromContract ContractLine
								invoked.PrmContractGroup				= ContractGroup
								invoked.PrmFromContract					= OriginalContractAndTier.OriginalContract
								invoked.PrmNewContractAndLine			= NewContractAndNewContractLine
								invoked.PrmContractType					= NewContractType
								invoked.PrmContractSubtype				= NewContractSubtype
								invoked.PrmCurrencyCode					= NewCurrencyCode
								invoked.PrmSupplier						= NewSupplier
								invoked.PrmCopyContractLineComments		= CopyContractLineComments
								invoked.PrmCopyContractLineAttachments  = CopyContractLineAttachments
								invoked.PrmCopySelectAll				= CopySelectAll
								if (NewEffectiveDate != Template.EffectiveDate)
									invoked.PrmEffectiveDate			= NewEffectiveDate
								if (NewExpirationDate != Template.ExpirationDate)
									invoked.PrmExpirationDate			= NewExpirationDate

				Update is an Update Action

					Local Fields
						LocalContractGroup					is a ContractGroup
						LocalOldContractClassification  	is a ContractClassification
						LocalOldContractSubclassification	is a ContractSubclassification

					Field Rules

						MaximumAmount
							if (NonServicePurchaseType)
								constraint (MaximumAmount >= MaximumAmountInUse)
									"CannotChangeTheMaximumAmountBelowWhatHasAlreadyBeenOrderedAndRequisitioned"

						GPONegotiated
							if (GPONegotiated changed
							and old GPONegotiated)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPONegotiated;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"

						GPOSupplier
							if (GPOSupplier changed
							and old GPOSupplier entered)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPOSupplier;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"


						IncludeAOCInMaxEdits
							if (ContractTypeOrSubTypeChanged)
								if (HasAPurchaseType)
									if (ContractPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnContract = 1)
										default to true
									else
									if (StandingPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnStanding = 1)
										default to true
									else
									if (ServicePurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnService = 1)
										default to true
									else
									if (CatalogQuotePurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnCatalog = 1)
										default to true
									else
									if (BlanketPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeAOCForLifetimeMaximumEditsOnBlanket = 1)
										default to true
									else
										default to false

						IncludeTaxInMaxEdits
							if (ContractTypeOrSubTypeChanged)
								if (HasAPurchaseType)
									if (ContractPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnContract = 1)
										default to true
									else
									if (StandingPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnStanding = 1)
										default to true
									else
									if (ServicePurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnService = 1)
										default to true
									else
									if (CatalogQuotePurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnCatalog = 1)
										default to true
									else
									if (BlanketPurchaseType
									and ContractGroup.ProcurementGroupRel.IncludeTaxForLifetimeMaximumEditsOnBlanket = 1)
										default to true
									else
										default to false

						ContractClassification
							if  (ContractSubclassification not entered)
								if (LocalOldContractSubclassification not entered
								and LocalOldContractClassification.UseIDM)
									constraint (ContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"

							   	if (LocalOldContractSubclassification entered
								and LocalOldContractSubclassification.UseIDM)
									constraint (ContractClassification.UseIDM)
										"CannotSwitchToNonIDMClassification"

						ContractSubclassification
							if  (ContractSubclassification entered)
								if  (LocalOldContractSubclassification not entered
								and  LocalOldContractClassification.UseIDM)
									constraint (ContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"

								if  (LocalOldContractSubclassification entered
								and  LocalOldContractSubclassification.UseIDM)
									constraint (ContractSubclassification.UseIDM)
										"CannotSwitchToNonIDMSubclassification"

					Entrance Rules
						LocalContractGroup					= ContractGroup
						LocalOldContractClassification		= old ContractClassification
						LocalOldContractSubclassification	= old ContractSubclassification

					Action Rules

						if (NotContractTemplate)
							include UpdateRules

						LocalVendor = Vendor					

						if (ExpirationDate changed)
							if (IsManufacturerOrDistributorContract)
								constraint (ExpirationDate != 0)
									"CannotClearExpirationDateForManufacturerOrDistributorContracts;TheyAreRequiredToHaveAnExpirationDate"

						if (ApPoPurchaseFrom.PurchaseFromLocation changed
						and ApPoPurchaseFrom.PurchaseFromLocation entered)
							constraint (PurchaseFromLocationExists)
								"POPurchaseFrom:<ApPoPurchaseFrom.PurchaseFromLocation>DoesNotExist"

						if ((WorkingContractType changed
						or WorkingContractID changed)
						and (WorkingContractType.SourcingEvent))
							constraint (SERelatedContractRel exists)
								"SourcingEventWorkingContractTypeRequiresAnExistingSourcingEventAsTheWorkingContractID"

						if (NotContractTemplate)
							if (ContractSource = "1")
								if ((ContractType changed)
								or (ContractSubtype changed)
								or (ContractClassification changed)
								or (ContractSubclassification changed))
									constraint (!ContractQuestionsExist)
										"CannotChangeContractType,Subtype,Classification,OrSubclassificationWhenQuestionsAreAttachedToTheContract"

								if (!ContractQuestion set exists)
									for each QuestionsByTypeAndClassRel
										CheckQuestion = each.Question
										if (!CheckContractQuestionRel exists)
											invoke Create ContractQuestion
												fill in fields from each
												invoked.ContractGroup 		= ContractGroup
												invoked.Contract			= Contract
												invoked.QuestionSource		= 1
												invoked.Attachment.File     = each.Attachment.File
												invoked.Attachment.MimeType = each.Attachment.MimeType
												invoked.Attachment.Title    = each.Attachment.Title

						if (ManufacturerOrDistributor changed)
							if (IsManufacturerOrDistributorContract)
								if (ContractParticipantsRel exists)
									confirmation required
										"ChangingToAManufacturerOrDistributorContractWillDeleteAllParticipants;DoYouWantToContinue?"
									for each ContractParticipant set
										invoke Delete each
								constraint (!ServiceLineRel exists)
									"ServiceLinesExist;CannotChangeToManufacturerOrDistributorContract"
								constraint (!ContractPricingWithoutDefaultRel exists)
									"PriceBreaksExist;CannotChangeToManufacturerOrDistributorContract"
								constraint (!ContractParticipantWithDeptRel exists)
									"ParticipantsExistWithDepartmentInformationEntered;CannotChangeToManufacturerOrDistributorContract"
								constraint (!UseCommitments)
									"UsingCommitments;CannotChangeToManufacturerOrDistributorContract"
								constraint (!BlanketOrStanding)
									"ManufacturerOrDistributorContractsCannotBeBlanketOrStandingPurchaseTypes"
							if (IsDistributorContract)
								constraint (!ContractTier set exists)
									"TiersExist;CannotChangeToDistributorContract"
								constraint (!ContractTierMember set exists)
									"TierMembersExist;CannotChangeToDistributorContract"
								constraint (!ContractPricingWithoutDefaultRel exists)
									"PriceBreaksExist;CannotChangeToDistributorContract"
								constraint (!UseCommitments)
									"UsingCommitments;CannotChangeToDistributorContract"
								constraint (!BlanketOrStanding)
									"BlanketOrStandingPurchaseType;CannotChangeToDistributorContract"
							else
								if (IsManufacturerContract)
									constraint (!ContractDistributorPricing set exists)
										"DistributorPricingExists;CannotChangeToManufacturerContract"
									constraint (!ManufacturerContract set exists)
										"ManufacturerContractsAttached;CannotChangeToManufacturerContract"
									constraint (!ContractDistributorPricingMember set exists)
										"DistributorPricingMembersExist;CannotChangeToManufacturerContract"
									constraint (!ContractPricingWithoutDefaultRel exists)
										"PriceBreaksExist;CannotChangeToManufacturerContract"
									constraint (!UseCommitments)
										"UsingCommitments;CannotChangeToManufacturerContract"
									constraint (!BlanketOrStanding)
										"BlanketOrStandingPurchaseType;CannotChangeToManufacturerContract"
								else
									constraint (!ContractDistributorPricing set exists)
										"DistributorPricingExists;CannotChangeFromDistributorContract"
									constraint (!ManufacturerContract set exists)
										"ManufacturerContractsAttached;CannotChangeFromDistributorContract"
									constraint (!ContractDistributorPricingMember set exists)
										"DistributorPricingMembersExist;CannotChangeFromDistributorContract"
									constraint (!ContractTier set exists)
										"TiersExist;CannotChangeFromManufacturerContract"
									constraint (!ContractTierMember set exists)
										"TierMembersExist;CannotChangeFromManufacturerContract"

						if ((ContractType changed
						or   ContractSubtype changed)
						and  ServicePurchaseType)
							constraint (!NonServiceLineRel exists)
								"CannotChangeTheContractTypeOrSubtypeToAServicePurchaseTypeWhenNonserviceLinesExist"
								confirmation required
									"ChangingToAServiceContractWillDeleteAllParticipantsThatContainLocationsOrPricingGroups;DoYouWantToContinue?"
								for each ContractLocationPricingGroupParticipantsRel
									invoke Delete each
						if ((ContractType changed
						or  ContractSubtype changed)
						and StandingPurchaseType)
							constraint (!ContractParticipantPricingGroupRel exists)
								"CannotChangeTheContractTypeOrSubtypeToAStandingPurchaseTypeWhenParticipantsWithPricingGroupsExist"

							constraint (!ContractParticipantCompanyOnlyRel exists)
								"CannotChangeTheContractTypeOrSubtypeToAStandingPurchaseTypeWhenParticipantsWithCompaniesOnlyExist"

						if ((ContractType changed
						or  ContractSubtype changed)
						and BlanketPurchaseType)
							constraint (!ContractParticipantPricingGroupRel exists)
								"CannotChangeTheContractTypeOrSubtypeToABlanketPurchaseTypeWhenParticipantsWithPricingGroupsExist"

						if (ContractClassification changed
						and !ContractSubclassification changed
						and  ContractSubclassification entered)
							constraint (ContractSubclassification exists)
								"ContractSubclassificationNotValidForContractClassification"

						if  (ContractType changed
						and !ContractSubtype changed
						and  ContractSubtype entered)
							constraint (ContractSubtype exists)
								"ContractSubtypeNotValidForContractType"

						if (ContractClassification changed
						or	ContractSubclassification changed)
							if (!RedlineApprovals)
								constraint (!RedlineDocumentExists)
									"CannotChangeClassificationOrSubclassificationToOneThatDoesNotAllowRedlineDocumentsWhenRedlineDocumentsExist"
							if (RedlineApprovals)
								if (ProposedContractFromSupplier)
									constraint (!ContractClassification.UseIDM)  
										"CannotUseAnIDMContractClassificationForSupplierContractProposals"

						if (IsManufacturerContract)
							if (ContractType changed
							or  ContractSubtype changed)
								if (TierMemberDirectPurchaseMethodRels exist)
									constraint (HasAPurchaseType)
										"TierMembersExistThatWillBeUsedForCostDefaulting;CannotChangeContractToATypeThatWillNotBeUsedForCostDefaulting"

						if (!HasAPurchaseType)
							IncludeAOCInMaxEdits = false
							IncludeTaxInMaxEdits = false

						if (Stockless changed
						and Stockless)
							constraint (ContractLineServiceItemRel !exists)
								"CannotChangeToStockless;ServiceItemsExist"
							constraint (ContractParticipantNonStocklessReqLocRel !exists)
								"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"
							constraint (ContractTierMemberNonStocklessReqLocRel !exists)
								"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"
							constraint (ContractPricingMemberNonStocklessReqLocRel !exists)
								"CannotChangeToStockless;RequestingLocationParticipantExistsThatIsNotStockless"

					Exit Rules

						if (MfgContractRel exists)
							if ((IsDistributorContract)
							or (IsNotDistributorAndNotManufacturer))
								invoke Delete MfgContractRel
						else
							if (IsManufacturerContract and NotContractTemplate and !MultiTierDistributorContract)
								if (MfgContractRel !exists)
									invoke Create MfgContractRel
										invoked.ContractGroup				= ContractGroup
										invoked.ManufacturerContractPivot	= Contract
								for each ContractTierMember set
									if (each.MfgContractMemberPivotRel !exists)
										invoke Create MfgContractMemberPivot
											invoked.ContractGroup														= ContractGroup
											invoked.ManufacturerContractPivot											= Contract
											invoked.MfgContractMemberPivot.ParticipantLocation.Company 					= each.ContractTierMember.Company
											invoked.MfgContractMemberPivot.ParticipantLocation.Location					= each.ContractTierMember.Location
											invoked.MfgContractMemberPivot.ParticipantLocation.RequestingLocation		= each.ContractTierMember.RequestingLocation
											invoked.PurchaseMethod														= each.ContractTierMember.PurchaseMethod
								if (ContractLinesExist)
									invoke CreateMfgContractLinePivot ContractLine
										invoked.PrmContractGroup	= ContractGroup
										invoked.PrmContract     	= Contract

						if (ManufacturerOrDistributor changed)
							for each ContractLine set
								invoke FastUpdate each
									invoked.ManufacturerOrDistributor = ManufacturerOrDistributor

						if (ContractTypeOrSubTypeChanged
						or  ContractType.CanUseForCostDefaultingOptions != old ContractType.CanUseForCostDefaultingOptions)
							if (ContractLinesExist)
								invoke UpdateTypeSubTypeRelatedInformation ContractLine
									invoked.PrmContractGroup        = ContractGroup
									invoked.PrmContract		        = Contract
						if (ContractTypeOrSubTypeChanged)						
							if (ContractPurchaseFromRels exist)
								invoke Delete ContractPurchaseFromRels

						include UpdateExitRules

						if (ContractType changed
						and !NonServicePurchaseType)
							invoke SetCanUseForCostDefaultingFalse ContractLine
								invoked.ParmContractGroup = ContractGroup
								invoked.ParmContract      = Contract

				UpdateUOMMatch is an Instance Action
					restricted
					Parameters
						UOMSMustMatchParam is AlphaUpper size 1

					Action Rules
						UOMSMustMatch = UOMSMustMatchParam
						UOMSMustMatchForSpecials = UOMSMustMatchParam

				CreateContractTerms is an Instance Action
					completion message is "ContractTermsAndConditionsHaveBeenCreated"
					valid when (CreateTermsNeeded)

					Action Rules
						invoke Delete ContractArticle set
						for each ContractQuestionAnswer set
							UseDisplayOrder			= true
							if (each.ContractQuestion.QuestionSource.Interview)
								invoke RecreateContractTerms each
									invoked.PrmContractLastArticleDisplayOrder	= LastArticleDisplayOrder

				Release is an Instance Action
					completion message is "<ReleaseMessage>"
					valid when (NotOnHoldAndNotNewRenewalAndNotProposed)

					Local Fields

					Action Rules
						if (WithoutIDMContractDocument)
							confirmation required
								"ContinueReleaseWithoutGeneratedContractDocument?"
						if (IDMRedlineApprovals)
							if (ContractSubclassification entered)
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForSubclassificationThatUsesIDMDocumentRedlining"
							else
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForClassificationThatUsesIDMDocumentRedlining"
						include ReleaseEdits

						include EditSpreads

						if (UseCommitments
						and NoLinesFromRQ)

				 			BudgetEditProcessing = 1
							invoke Delete WarningBudgetEditErrorRel
							invoke Delete BudgetEditErrorRel
							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup    											= ContractGroup.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           											= UniqueID
								invoked.PrmMode			                                                        = BudgetEditMode.Test
								invoked.PrmTotalsProcessing                                                     = BudgetEditTotalsProcessing.DoNothing
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= ContractGroup
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= Contract
								invoked.PrmBusinessClassName                									= "Contract"
								invoked.PrmEditContext                      									= "Release"

						else
							invoke FinalRelease

				FinalRelease is an Instance Action
					restricted

					Action Rules

						LocalFromMatrixApproval	= FromMatrixApproval
						for each DraftArticlesRel
							invoke Release Draft each
						for each AddendumNegotiationArticlesRel
							invoke Release Addendum each
						for each NoStatusArticlesRel
							invoke ReleaseArticle each

						include SubmitDraftTermAndConditionUpdates
						FromMatrixApproval      = LocalFromMatrixApproval
						invoke TriggerContractService

						if (ReleasedTimestamp not entered)
							ReleasedTimestamp = current timestamp
							if (AcceptedOrRejectedTimestamp entered)
								DaysToRelease = (ReleasedTimestamp date - AcceptedOrRejectedTimestamp date)
							else
								DaysToRelease = (ReleasedTimestamp date - first ContractLineRel.CreateDate)

						if (!ContractParticipantsRel exists
						and !ContractTierMembersRel exists
						and !AnyPricingMembersRel exists
						and  DisplayPurchaseFroms)
							invoke CreateContractPurchaseFromWithSupplier

						if (FromMatrixApproval)
							make transition to ReadyToActivate
						else 
						if (!FromMatrixApproval)
							if (ContractSubclassification not entered)
								if ((!ContractClassification.RequireContractApproval)
								and (!ContractClassification.RequireApprovalWithWordDocument)
								and (ContractClassification.RequireContractNegotiation))
									invoke CreateUpdateContractTermVersion
									make transition to Negotiation
								else
									if ((!ContractClassification.RequireContractApproval)
									and (!ContractClassification.RequireContractNegotiation)
									and (ContractClassification.RequireFinalApproval
									or   ContractClassification.RequireFinalApprovalWithWordDocument))
										make transition to FinalApproval
									else
										if	((!ContractClassification.RequireContractApproval)
										and  (!ContractClassification.RequireApprovalWithWordDocument)
										and  (!ContractClassification.RequireContractNegotiation)
										and  (!ContractClassification.RequireFinalApproval)
										and  (!ContractClassification.RequireFinalApprovalWithWordDocument))
											make transition to ReadyToActivate
										else
											make transition to Released
							else
								if ((!ContractSubclassification.RequireContractApproval)
								and (!ContractSubclassification.RequireApprovalWithWordDocument)
								and  (ContractSubclassification.RequireContractNegotiation))
									invoke CreateUpdateContractTermVersion
									make transition to Negotiation
								else
									if ((!ContractSubclassification.RequireContractApproval)
									and (!ContractSubclassification.RequireApprovalWithWordDocument)
									and  (!ContractSubclassification.RequireContractNegotiation)
									and  (ContractSubclassification.RequireFinalApproval
									or    ContractSubclassification.RequireFinalApprovalWithWordDocument))
										make transition to FinalApproval
									else
										if ((!ContractSubclassification.RequireContractApproval)
										and (!ContractSubclassification.RequireApprovalWithWordDocument)
										and (!ContractSubclassification.RequireContractNegotiation)
										and (!ContractSubclassification.RequireFinalApproval)
										and (!ContractSubclassification.RequireFinalApprovalWithWordDocument))
											make transition to ReadyToActivate
										else
											make transition to Released

						if ((UseIDM
						or IsUsingIDMTemplate
						or UseIDMPerClassificationAndSubClass)
						and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.IDMConfiguration.UpdateContractAttributes)
							invoke UpdateIDMAttributes

				RenewalRelease is an Instance Action
					default label is "Release"
					valid when (NotOnHoldAndNewRenewal)
					completion message is "RenewalReleaseHasStarted.Check'MyActions'ForCompletion"

					Action Rules

						if (!AllowReferenceOfItemsNotOnContract)
							if (!IsManufacturerContract
							and !ServicePurchaseType)
								constraint (CanUseForCostDefaultingContractLineRel exists)
									"MustHaveAtLeastOneContractLineThatWillBeUsedForCostDefaulting"


						if (IDMRedlineApprovals)
							if (ContractSubclassification entered)
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForSubclassificationThatUsesIDMDocumentRedlining"
							else
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForClassificationThatUsesIDMDocumentRedlining"

						include ReleaseEdits

						include ActivateContractEdits

						if (ActiveSupplierCertificationExist
						or  ActiveSupplierContactCertificationExist)
							include CertificationEdits

						include SubmitDraftTermAndConditionUpdates

						include EditSpreads
						invoke ReleaseLineEdits ContractLine
							invoked.PrmContractGroup		= ContractGroup
							invoked.PrmContract				= Contract

				RenewalReleaseActivateHeader is an Instance Action
					restricted
					run in background

					Action Rules

					Exit Rules
						invoke LineRenewalRelease ContractLine
							invoked.PrmContractGroup		= ContractGroup
							invoked.PrmContract				= Contract

				MakeTransitionToNegotiation is an Instance Action
					restricted
					Action Rules
						make transition to Negotiation

				MakeTransitionToFinalApproval is an Instance Action
					restricted
					Action Rules
						make transition to FinalApproval

				MakeTransitionToReadyToActivate is an Instance Action
					restricted
					Action Rules
						make transition to ReadyToActivate

				MakeTransitionToReleased is an Instance Action
					restricted
					Action Rules
						make transition to Released

			Released is a State
				Exit Rules
					PreviousState = PreviousState.Released

				Approval is a StateCycle
					state field is ApprovalStatus

					NeedsApproval is a State

						Entrance Rules
							if (RedlineApprovals)
								initiate CMWordAppr process
									title is "WordDocumentChangeApprovalRequest.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
									Criteria
										ContractGroup
										Classification
										Subclass
								  	category filter is PrimaryContactRel.ContractAttachedContact
								  	Variables
										AddendumExists
								   		AmendmentExists
										ContractGroup
										Contract
										WorkingContractID
										Name
									  	ContractStatus
									  	PrimaryContactEmail
									  	Supplier
									 	SupplierName
									   	ProposedTotalContractAmount
									   	LocationOfContract
									   	InbasketURL
										ContractApprovalLinkback
										LatestDocumentName

								 	URLs
										"<ContractApprovalLinkback>"


							else
								initiate CMContractAppr process
									title is "ApprovalRequest.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
									Criteria
										ContractGroup
										Classification
										Subclass
									category filter is PrimaryContactRel.ContractAttachedContact
									Variables
										AddendumExists
										AmendmentExists
										ContractGroup
										Contract
										WorkingContractID
										Name
										ContractStatus
										PrimaryContactEmail
										Supplier
										SupplierName
									URLs
										"<ContractApprovalLinkback>"

						Approve is an Instance Action
							restricted
							Action Rules
								if (InternalApprovalTimestamp not entered)
									InternalApprovalTimestamp = current timestamp
									DaysToInternalApprove = (InternalApprovalTimestamp date - ReleasedTimestamp date)

								make transition to Approved

						Reassign is an Instance Action
							restricted
							subject is ContractReassign
							reason code required
							action comment required
							Action Rules

						FinalApprovalWithChanges is an Instance Action
							restricted
							subject is ContractFinalApprovalChange
							reason code required
							action comment required
							Action Rules
								if (InternalApprovalTimestamp not entered)
									InternalApprovalTimestamp = current timestamp
									DaysToInternalApprove = (InternalApprovalTimestamp date - ReleasedTimestamp date)

								make transition to Approved

						ApproveWithChanges is an Instance Action
							restricted
							subject is ContractApproveWithChanges
							reason code required
							action comment required
							Action Rules
								make transition to NeedsApproval

						Disapprove is an Instance Action
							restricted
							valid when (!ContractChangesExist)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Draft)
									initialize ApprovalStatus
									invoke TransitionToDraft Released ContractArticle set
									make transition to Draft
									invoke TriggerProcessContractService
									include DisapprovePendingTermAndConditionUpdates
								include ClearProcessingDays
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						DisapproveAddendum is an Instance Action
							restricted
							valid when (AddendumExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Addendum)
									initialize ApprovalStatus
									invoke TransitionToAddendum Released ContractArticle set
									make transition to Addendum
									include DisapprovePendingTermAndConditionUpdates
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						DisapproveAmendment is an Instance Action
							restricted
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Amendment)
									initialize ApprovalStatus
									make transition to Amendment

						Reject is an Instance Action
							restricted
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								OnHold = true
								invoke HoldAllContractLinesFromReject ContractLine
									invoked.PrmContractGroup = ContractGroup
									invoked.PrmContract 	 = Contract
								if (IsManufacturerContract)
									invoke HoldAllRelatedDistributorContractLines ContractLine
										invoked.PrmContractGroup = ContractGroup
										invoked.PrmContract      = Contract
								invoke SetToInactive ContractArticle set
								make transition to ApprovalDenied
								include RejectPendingTermAndConditionUpdates
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						ManualApprove is an Instance Action
							Action Rules
								if (InternalApprovalTimestamp not entered)
									InternalApprovalTimestamp = current timestamp
									DaysToInternalApprove = (InternalApprovalTimestamp date - ReleasedTimestamp date)

								make transition to Approved
								cancel CMContractAppr process
								cancel CMWordAppr process
							Exit Rules
								invoke Delete ContractApproverChosenRel

						ManualDisapprove is an Instance Action
							valid when (!ContractChangesExist)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Draft)
									initialize ApprovalStatus
									invoke TransitionToDraft Released ContractArticle set
									make transition to Draft
									invoke TriggerProcessContractService
									include DisapprovePendingTermAndConditionUpdates
								include ClearProcessingDays
								cancel CMContractAppr process
								cancel CMWordAppr process

							Exit Rules
								if (PreviousState.Draft
								and !DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each
								invoke Delete ContractApproverChosenRel

						ManualReject is an Instance Action
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								OnHold = true
								invoke HoldAllContractLinesFromReject ContractLine
									invoked.PrmContractGroup = ContractGroup
									invoked.PrmContract 	 = Contract
								if (IsManufacturerContract)
									invoke HoldAllRelatedDistributorContractLines ContractLine
										invoked.PrmContractGroup = ContractGroup
										invoked.PrmContract      = Contract
								invoke SetToInactive ContractArticle set
								make transition to ApprovalDenied
								include RejectPendingTermAndConditionUpdates
								cancel CMContractAppr process
								cancel CMWordAppr process

							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

								invoke Delete ContractApproverChosenRel

						ManualDisapproveAddendum is an Instance Action
							valid when (AddendumExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Addendum)
									initialize ApprovalStatus
									invoke TransitionToAddendum Released ContractArticle set
									make transition to Addendum
									include DisapprovePendingTermAndConditionUpdates
									include ClearProcessingDays
								cancel CMContractAppr process
								cancel CMWordAppr process
							Exit Rules
								if (PreviousState.Addendum
								and !DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each
								invoke Delete ContractApproverChosenRel

						ManualDisapproveAmendment is an Instance Action
							valid when (AmendmentExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Amendment)
									initialize ApprovalStatus
									make transition to Amendment
								cancel CMContractAppr process
								cancel CMWordAppr process
								include ClearProcessingDays

						SaveUpdatedRedlineDocumentInternal is an Instance Action
							valid when (SupplierManageRedlineDocumentValid)
							Parameters
								PrmRedlineDocument is an AttachmentWithTitleAudited
								PrmComplete        is Boolean
								PrmComment 		   is Alpha 250
									default label is "EnterComment"

							Parameter Rules

								PrmRedlineDocument
									required
										"MustAttachDocument"

								PrmComment
									if (PrmComplete)
										required

							Action Rules
								invoke SupplierCreate ContractRedlineDocument
								 	invoked.ContractGroup 		= ContractGroup
								 	invoked.Contract     		= Contract
								 	invoked.Attachment        	= PrmRedlineDocument





					Approved is a State
						Entrance Rules
							if (ContractChangesExist)
								if (AddendumExists)
									invoke CreateUpdateContractTermVersion
									if (!DerivedUseSupplierPortalForAddendumNegotiation)
										include ApprovePendingTermAndConditionUpdates
							else
								invoke CreateUpdateContractTermVersion
								include ApprovePendingTermAndConditionUpdates
							if (PreviousState.Draft)
								if (ContractSubclassification not entered)
									if (ContractClassification.RequireContractNegotiation)
										make transition to Negotiation
									else

									if ((!ContractClassification.RequireContractNegotiation)
									and (ContractClassification.RequireFinalApproval))
										make transition to FinalApproval
									else

									if  ((!ContractClassification.RequireContractNegotiation)
									and   (!ContractClassification.RequireFinalApproval))
										make transition to ReadyToActivate
								else
									if  (ContractSubclassification.RequireContractNegotiation)
										make transition to Negotiation
									else

									if ((!ContractSubclassification.RequireContractNegotiation)
									and (ContractSubclassification.RequireFinalApproval))
										make transition to FinalApproval
									else

									if   ((!ContractSubclassification.RequireContractNegotiation)
									and   (!ContractSubclassification.RequireFinalApproval))
										make transition to ReadyToActivate

							if (AddendumExists)
								if (ContractSubclassification not entered)
									if (ContractClassification.RequireAddendumNegotiation)
										make transition to Negotiation
									else
									if ((!ContractClassification.RequireAddendumNegotiation)
									and (ContractClassification.RequireFinalAddendumApproval))
										make transition to FinalApproval
									else
									if  ((!ContractClassification.RequireAddendumNegotiation)
									and   (!ContractClassification.RequireFinalAddendumApproval))
										make transition to ReadyToActivate
								else
									if  (ContractSubclassification.RequireAddendumNegotiation)
										make transition to Negotiation
									else
									if ((!ContractSubclassification.RequireAddendumNegotiation)
										and (ContractSubclassification.RequireFinalAddendumApproval))
										make transition to FinalApproval
									else
									if   ((!ContractSubclassification.RequireAddendumNegotiation)
									and   (!ContractSubclassification.RequireFinalAddendumApproval))
										make transition to ReadyToActivate

							if (AmendmentExists)
								if (ContractSubclassification not entered)
									if (ContractClassification.RequireAmendmentNegotiation)
										make transition to Negotiation
									else

									if ((!ContractClassification.RequireAmendmentNegotiation)
									and (ContractClassification.RequireFinalAmendmentApproval))
										make transition to FinalApproval
									else

									if  ((!ContractClassification.RequireAmendmentNegotiation)
									and   (!ContractClassification.RequireFinalAmendmentApproval))
										make transition to ReadyToActivate
								else
									if  (ContractSubclassification.RequireAmendmentNegotiation)
										make transition to Negotiation
									else

									if ((!ContractSubclassification.RequireAmendmentNegotiation)
									and (ContractSubclassification.RequireFinalAmendmentApproval))
										make transition to FinalApproval
									else

									if   ((!ContractSubclassification.RequireAmendmentNegotiation)
									and   (!ContractSubclassification.RequireFinalAmendmentApproval))
										make transition to ReadyToActivate

					ApprovalDenied is a State
						Entrance Rules
							include RejectPendingTermAndConditionUpdates
							make transition to Inactive
							invoke TriggerProcessContractService

			Negotiation is a State
				Entrance Rules
					initialize PreviousNegotiationStatus
					if (UseSupplierPortalForNegotiation)
						include SendNegotiationEmailMessageToSupplier

				Exit Rules
					PreviousState = PreviousState.Negotiation

				Negotiate is a StateCycle
					state field is NegotiationStatus
					initial state is NeedsSupplierApproval

					NeedsSupplierApproval is a State
						Entrance Rules
							if (AmendmentExists)
								initialize PreviousNegotiationStatus
								make transition to NeedsNegotiation
							else
							if (AddendumExists)
								if (!DerivedUseSupplierPortalForAddendumNegotiation)
									initialize PreviousNegotiationStatus
									make transition to NeedsNegotiation
							else
								if (!DerivedUseSupplierPortalForNegotiation)
									initialize PreviousNegotiationStatus
									make transition to NeedsNegotiation

						SaveUpdatedRedlineDocument is an Instance Action
							valid when (SupplierManageRedlineDocumentValidNonIDM)
							Parameters
								PrmRedlineDocument is an AttachmentWithTitleAudited
								PrmComplete        is Boolean
								PrmComment 		   is Alpha 250
									default label is "EnterComment"

							Parameter Rules

								PrmRedlineDocument
									required
										"MustAttachDocument"

								PrmComment
									if (PrmComplete)
										required

							Action Rules
								invoke SupplierCreate ContractRedlineDocument
								 	invoked.ContractGroup 		= ContractGroup
								 	invoked.Contract     		= Contract
								 	invoked.Attachment        	= PrmRedlineDocument
								if (PrmComplete = true)
								 	invoke SubmitTermChanges
								 		invoked.PrmComment      		= PrmComment
										invoked.PrmFromRedlineDocument 	= true

						CompleteRedlineNegotiation is an Instance Action
							valid when (SupplierManageRedlineDocumentValid)
							Parameters
								PrmComment 		   is Alpha 250
									default label is "EnterComment"

							Parameter Rules
								PrmComment
									required

							Action Rules
								invoke SubmitTermChanges
									invoked.PrmComment      		= PrmComment
									invoked.PrmFromRedlineDocument 	= true

						SubmitTermChanges is an Instance Action
							valid when (SupplierSubmitTermChangesValid)
							restricted
							Parameters
								PrmComment 				is Alpha 250
									default label is "EnterComment"
								PrmFromRedlineDocument 	is Boolean

							Parameter Rules
								PrmComment
									required

							Action Rules
								if (SupplierApprovalTimestamp not entered)
									SupplierApprovalTimestamp = current timestamp
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - InternalApprovalTimestamp date)
								else
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - ReleasedTimestamp date)
								send email
									to PrimaryContactRel.DerivedEmail
									from Supplier.SupplierGroup.AdminEmailAddress
									cc DerivedSecondaryContactEmailAddressList
									cc SupplierSourceId.EmailAddress
									subject "<SupplierGroupExtensionRel.FinalTermsUpdatedEmailSubject>"
									Contents
										"<SupplierGroupExtensionRel.FinalTermsUpdatedEmailContent>"
										"UpdatedBy<SupplierSourceId.MainContact.FirstAndLastName>"
										"Comment<PrmComment>"
								if (!PrmFromRedlineDocument)
									invoke CreateNegotiationUpdateContractTermVersion
										LocalComment   = PrmComment
								PreviousNegotiationStatus = 4
								make transition to NeedsInternalApproval

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= SupplierSourceId.EmailAddress
									invoked.EmailSubjectLine				= SupplierGroupExtensionRel.FinalTermsUpdatedEmailSubject
									invoked.EmailContent					= SupplierGroupExtensionRel.FinalTermsUpdatedEmailContent + "Comment" + PrmComment
									invoked.NotificationType				= 5

						SupplierManualSubmitTermChanges is an Instance Action
							valid when (SupplierSubmitTermChangesValid)
							action comment required
							Action Rules
								if (SupplierApprovalTimestamp not entered)
									SupplierApprovalTimestamp = current timestamp
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - InternalApprovalTimestamp date)
								else
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - ReleasedTimestamp date)
								send email
									to PrimaryContactRel.DerivedEmail
									from Supplier.SupplierGroup.AdminEmailAddress
									cc DerivedSecondaryContactEmailAddressList
									cc ActorRel.ContactInfo.EmailAddress
									subject "<SupplierGroupExtensionRel.FinalTermsUpdatedEmailSubject>"
									Contents
										"<SupplierGroupExtensionRel.FinalTermsUpdatedEmailContent>"
										"UpdatedBy<SupplierSourceId.MainContact.FirstAndLastName>"
										"SubmittedBy<ActorRel.FirstNameAndLastNameOrActor>"
										"Comment<action comment>"

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= ActorRel.ContactInfo.EmailAddress
									invoked.EmailSubjectLine				= SupplierGroupExtensionRel.FinalTermsUpdatedEmailSubject
									invoked.EmailContent					= SupplierGroupExtensionRel.FinalTermsUpdatedEmailContent + "Comment" + action comment
									invoked.NotificationType				= 5

								invoke CreateNegotiationUpdateContractTermVersion
								PreviousNegotiationStatus = 4
								make transition to NeedsInternalApproval

						ApproveTermChanges is an Instance Action
							valid when (SupplierApproveTermsValid)
							Parameters
								PrmComment is Alpha 250
									default label is "EnterComment"

							Parameter Rules
								PrmComment
									required
							Action Rules
								send email
									to PrimaryContactRel.DerivedEmail
									from Supplier.SupplierGroup.AdminEmailAddress
									cc DerivedSecondaryContactEmailAddressList
									cc SupplierSourceId.EmailAddress
									subject "<SupplierGroupExtensionRel.FinalTermsApprovedEmailSubject>"
									Contents
										"<SupplierGroupExtensionRel.FinalTermsApprovedEmailContent>"
										"ApprovedBy<SupplierSourceId.MainContact.FirstAndLastName>"
										"Comment<PrmComment>"

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= SupplierSourceId.EmailAddress
									invoked.EmailSubjectLine				= SupplierGroupExtensionRel.FinalTermsApprovedEmailSubject
									invoked.EmailContent					= SupplierGroupExtensionRel.FinalTermsApprovedEmailContent + "Comment" + PrmComment
									invoked.NotificationType				= 5

								LocalComment = PrmComment
								include SupplierApproveTerms

						SupplierManualApproveTerms is an Instance Action
							valid when (SupplierManualApproveTermsValid)
							action comment required
							Action Rules
								send email
									to PrimaryContactRel.DerivedEmail
									cc DerivedSecondaryContactEmailAddressList
									cc ActorRel.ContactInfo.EmailAddress
									from Supplier.SupplierGroup.AdminEmailAddress
									subject "<SupplierGroupExtensionRel.FinalTermsApprovedEmailSubject>"
									Contents
										"<SupplierGroupExtensionRel.FinalTermsApprovedEmailContent>"
										"ApprovedBy<ActorRel.FirstNameAndLastNameOrActor>"
										"Comment<action comment>"
								include SupplierApproveTerms
								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= ActorRel.ContactInfo.EmailAddress
									invoked.EmailSubjectLine				= SupplierGroupExtensionRel.FinalTermsApprovedEmailSubject
									invoked.EmailContent					= SupplierGroupExtensionRel.FinalTermsApprovedEmailContent + "Comment" + action comment
									invoked.NotificationType				= 5

					NeedsInternalApproval is a State

						SendRedlineDocumentChangesToSupplier is an Instance Action
							valid when (BuyerSubmitRedlineDocumentTermChangesValid)
							action comment required
							Action Rules
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "RedlineDocumentToReview"
									Contents
										"RedlineDocumentMustBeReviewedForContract<Contract>-<Name>"
										"Comment<action comment>"
										"Click<TermsLinkback>ToReviewInTheSupplierPortal."

								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= Supplier.SupplierGroup
									invoked.Supplier 						= Supplier
									invoked.SupplierSourceId				= SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= "Redline Document To Review"
									invoked.MessageText						= "Redline Document Must Be Reviewed For Contract <Contract>- <ContractName>" + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.MessageOwner                    = PrimaryContactRel.Contact
									invoked.OriginatingContract             = Contract

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
									invoked.SentToCc                        = DerivedProxyEmailAddressList
									invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= "RedlineDocumentToReview"
									invoked.EmailContent					= "RedlineDocumentMustBeReviewedForContract<Contract>-<ContractName>" + "Comment<action comment>" + "Click<TermsLinkback>ToReviewInTheSupplierPortal."
									invoked.NotificationType				= 5
								PreviousNegotiationStatus = 5
								make transition to NeedsSupplierApproval

						SubmitTermChanges is an Instance Action
							valid when (BuyerSubmitTermChangesValid)
							action comment required
							Action Rules
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "<ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject>"
									Contents
										"<ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent>"
										"Comment<action comment>"
										"Click<TermsLinkback>ToReviewInTheSupplierPortal."
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= Supplier.SupplierGroup
									invoked.Supplier 						= Supplier
									invoked.SupplierSourceId				= SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject
									invoked.MessageText						= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.MessageOwner                    = PrimaryContactRel.Contact
									invoked.OriginatingContract             = Contract
								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
									invoked.SentToCc                        = DerivedProxyEmailAddressList
									invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject
									invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent + "Comment<action comment>" + "Click<TermsLinkback>ToReviewInTheSupplierPortal."
									invoked.NotificationType				= 5
								if (!ChangesMadeByFinalApproverInCurrentVersion)
									invoke CreateNegotiationUpdateContractTermVersion
								PreviousNegotiationStatus = 5
								make transition to NeedsSupplierApproval

						ApproveTermChanges is an Instance Action
							valid when (BuyerApproveTermsValid)
							action comment required
							Action Rules
								if (SupplierApprovalTimestamp not entered)
									SupplierApprovalTimestamp = current timestamp
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - ReleasedTimestamp date)
								if (RequireNegotiationFinalApproval)
									invoke Update CurrentContractTermVersionRel
										if (AddendumExists)
											invoked.ApprovalStage	= 5
										else
											invoked.ApprovalStage	= 2		
										invoked.LastAction 						= 5		
										invoked.PrimaryContactApprovalActor		= actor
										invoked.PrimaryContactApprovalComment	= action comment
									PreviousNegotiationStatus = 5
									make transition to NeedsFinalApproval
								else
									include ApprovePendingTermAndConditionUpdates
									invoke Update NewContractTermVersionRel
										if (AddendumExists)
											invoked.ApprovalStage	= 5
										else
											invoked.ApprovalStage	= 2		
										invoked.LastAction 						= 5		
										invoked.PrimaryContactApprovalComment	= action comment
										invoked.PrimaryContactApprovalActor		= actor
									PreviousNegotiationStatus = 5
									make transition to Negotiated

					NeedsFinalApproval is a State
						Entrance Rules
							if (AllowTermUpdatesDuringFinalApproval)
								initiate CMContNegFinalAppr process
									title is "NegotiateFinalApproval.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
									Criteria
										ContractGroup
										Classification
										Subclass
									category filter is PrimaryContactRel.ContractAttachedContact
									Variables
										AddendumExists
										AmendmentExists
										ContractGroup
										Contract
										WorkingContractID
										Name
										ContractStatus
										PrimaryContactEmail
										Supplier
										SupplierName
									URLs
										"<linkback(webapp is Approver navigation is ContractApprovalNav text is \"ViewContract\")>"
							else
								initiate CMContNegFinalApprNoUpdate process
									title is "NegotiateFinalApproval.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
									Criteria
										ContractGroup
										Classification
										Subclass
									category filter is PrimaryContactRel.ContractAttachedContact
									Variables
										AddendumExists
										AmendmentExists
										ContractGroup
										Contract
										WorkingContractID
										Name
										ContractStatus
										PrimaryContactEmail
										Supplier
										SupplierName
									URLs
										"<linkback(webapp is Approver navigation is ContractNonUpdateApprovalNav text is \"ViewContract\")>"
						SubmitTermChanges is an Instance Action
							restricted
							Action Rules
								if (SupplierApprovalTimestamp not entered)
									SupplierApprovalTimestamp = current timestamp
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - InternalApprovalTimestamp date)
								else
									DaysToSupplierApprove = (SupplierApprovalTimestamp date - ReleasedTimestamp date)
								send email
									to SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									bcc PrimaryAndSecondaryEmailList
									from PrimaryContactRel.DerivedEmail
									subject "<ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject>"
									Contents
										"<ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent>"
										"Comment<action comment>"
										"Click<TermsLinkback>ToReviewInTheSupplierPortal."
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= Supplier.SupplierGroup
									invoked.Supplier 						= Supplier
									invoked.SupplierSourceId				= SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject
									invoked.MessageText						= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.MessageOwner                    = PrimaryContactRel.Contact
									invoked.OriginatingContract             = Contract
								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= SupplierSourceId.EmailAddress
									invoked.SentToCc                        = DerivedProxyEmailAddressList
									invoked.SentToBcc                       = PrimaryAndSecondaryEmailList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailSubject
									invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalTermsUpdatedEmailContent + SupplierSourceId.SupplierGroup.NewLine + "Comment: " + action comment
									invoked.NotificationType				= 5

								invoke CreateNegotiationUpdateContractTermVersion
								invoke Update NewContractTermVersionRel
									if (AddendumExists)
										invoked.ApprovalStage	= 5
									else
										invoked.ApprovalStage	= 2		
									invoked.LastAction 			= 6		
									invoked.ModificationActor	= actor
								PreviousNegotiationStatus = 6
								make transition to NeedsSupplierApproval	

						Approve is an Instance Action
							restricted
							Action Rules
								if (NegotiationApprovalTimestamp not entered)
									NegotiationApprovalTimestamp = current timestamp
									DaysToApproveNegotiation = (NegotiationApprovalTimestamp date - SupplierApprovalTimestamp date)
								include ApproveNegotiation

						ManualApproveNegotiation is an Instance Action
							Action Rules
								include NegotiationApprovalDays							
								include ApproveNegotiation
								if (AllowTermUpdatesDuringFinalApproval)
									cancel CMContNegFinalAppr process
								else
									cancel CMContNegFinalApprNoUpdate process

						Disapprove is an Instance Action
							restricted
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								include DisapproveNegotiation
								include ClearProcessingDays
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						ManualDisapproveNegotiation is an Instance Action
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								include DisapproveNegotiation
								include ClearProcessingDays
								if (AllowTermUpdatesDuringFinalApproval)
									cancel CMContNegFinalAppr process
								else
									cancel CMContNegFinalApprNoUpdate process
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						Reject is an Instance Action
							restricted
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								include RejectNegotiation
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

						ManualRejectNegotiation is an Instance Action
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								include RejectNegotiation
								if (AllowTermUpdatesDuringFinalApproval)
									cancel CMContNegFinalAppr process
								else
									cancel CMContNegFinalApprNoUpdate process
							Exit Rules
								if (!DerivedCurrentContractTermVersionActivated)
									for each ActiveContractTermVersionRel
										invoke Delete each

					NeedsNegotiation is a State

						CompleteNegotiation is an Instance Action
							Action Rules
								include NegotiationApprovalDays
								if (IDMRedlineApprovals)
									if (ContractSubclassification entered)
										constraint (IDMDocumentExists)
											"MustHaveAnIDMRedlineDocumentForSubclassificationThatUsesIDMDocumentRedlining"
									else
										constraint (IDMDocumentExists)
											"MustHaveAnIDMRedlineDocumentForClassificationThatUsesIDMDocumentRedlining"
								make transition to Negotiated

						Disapprove is an Instance Action
							valid when (!ContractChangesExist)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if ((PreviousState.Draft)
								or  (PreviousState.Released))
									initialize ApprovalStatus
									initialize NegotiationStatus
									invoke TransitionToDraft Released ContractArticle set
									make transition to Draft
									invoke TriggerProcessContractService
								include ClearProcessingDays

						DisapproveAddendum is an Instance Action
							valid when (AddendumExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Addendum
								or  PreviousState.Released)
									initialize ApprovalStatus
									initialize NegotiationStatus
									invoke TransitionToAddendum Released ContractArticle set
									make transition to Addendum

						DisapproveAmendment is an Instance Action
							valid when (AmendmentExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Amendment
								or  PreviousState.Released)
									initialize ApprovalStatus
									initialize NegotiationStatus
									make transition to Amendment

						Reject is an Instance Action
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								OnHold = true
								invoke HoldAllContractLinesFromReject ContractLine
									invoked.PrmContractGroup = ContractGroup
									invoked.PrmContract 	 = Contract
								if (IsManufacturerContract)
									invoke HoldAllRelatedDistributorContractLines ContractLine
										invoked.PrmContractGroup = ContractGroup
										invoked.PrmContract      = Contract
								invoke SetToInactive ContractArticle set
								make transition to NegotiationDenied

					Negotiated is a State
						Entrance Rules
							if (AddendumExists)
								if ((ContractSubclassification not entered and !ContractClassification.RequireFinalAddendumApproval)
								or (ContractSubclassification entered and !ContractSubclassification.RequireFinalAddendumApproval))
									initialize FinalApprovalStatus
									make transition to ReadyToActivate
								else
									make transition to FinalApproval
							else
							if (AmendmentExists)
								if ((ContractSubclassification not entered and !ContractClassification.RequireFinalAmendmentApproval)
								or (ContractSubclassification entered and !ContractSubclassification.RequireFinalAmendmentApproval))
									initialize FinalApprovalStatus
									make transition to ReadyToActivate

								else
									make transition to FinalApproval
							else
							if ((ContractSubclassification not entered and !ContractClassification.RequireFinalApproval)
							or (ContractSubclassification entered and !ContractSubclassification.RequireFinalApproval))
								if (UseSupplierPortalForNegotiation)
									if (!AmendmentExists)
										include SendTermsAndConditionsApprovalMessage
								initialize FinalApprovalStatus
								if (EventTermsNeedToBeNegotiated)
									EventTermsHaveBeenNegotiated = true
								make transition to ReadyToActivate
							else
								make transition to FinalApproval

					NegotiationDenied is a State
						Entrance Rules
							make transition to Inactive
							invoke TriggerProcessContractService

			FinalApproval is a State
				Entrance Rules
					if ((PreviousState.Negotiation
					or   PreviousState.Released
					or   PreviousState.Draft)
					and  (!AddendumExists and !AmendmentExists))
						if ((ContractSubclassification not entered and ContractClassification.RequireFinalApproval)
						or (ContractSubclassification entered and ContractSubclassification.RequireFinalApproval))
							initiate CMContFinalAppr process
								title is "FinalApprovalRequest.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
								Criteria
									ContractGroup
									Classification
									Subclass
								category filter is PrimaryContactRel.ContractAttachedContact
								Variables
									AddendumExists
									AmendmentExists
									ContractGroup
									Contract
									WorkingContractID
									Name
									ContractStatus
									PrimaryContactEmail
									Supplier
									SupplierName
								URLs
									"<linkback(webapp is Approver navigation is ContractNonUpdateApprovalNav text is \"ViewContract\")>"
					if (AddendumExists)
						if ((ContractSubclassification not entered and ContractClassification.RequireFinalAddendumApproval)
						or (ContractSubclassification entered and ContractSubclassification.RequireFinalAddendumApproval))
							initiate CMContFinalAppr process
								title is "FinalApprovalRequest.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
								Criteria
									ContractGroup
									Classification
									Subclass
								category filter is PrimaryContactRel.ContractAttachedContact
								Variables
									AddendumExists
									AmendmentExists
									ContractGroup
									Contract
									WorkingContractID
									Name
									ContractStatus
									PrimaryContactEmail
									Supplier
									SupplierName
								URLs
									"<linkback(webapp is Approver navigation is ContractNonUpdateApprovalNav text is \"ViewContract\")>"
					if (AmendmentExists)
						if ((ContractSubclassification not entered and ContractClassification.RequireFinalAmendmentApproval)
						or (ContractSubclassification entered and ContractSubclassification.RequireFinalAmendmentApproval))
							initiate CMContFinalAppr process
								title is "FinalApprovalRequest.Contract<RepresentativeText>|Supplier:<Supplier.SupplierName>"
								Criteria
									ContractGroup
									Classification
									Subclass
								category filter is PrimaryContactRel.ContractAttachedContact
								Variables
									AddendumExists
									AmendmentExists
									ContractGroup
									Contract
									WorkingContractID
									Name
									ContractStatus
									PrimaryContactEmail
									Supplier
									SupplierName

								URLs
									"<linkback(webapp is Approver navigation is ContractNonUpdateApprovalNav text is \"ViewContract\")>"

				Exit Rules
					PreviousState = PreviousState.FinalApproval

				Approval is a StateCycle
					state field is FinalApprovalStatus

					NeedsApproval is a State

						Approve is an Instance Action
							restricted
							Action Rules
								if (FinalApprovalTimestamp not entered)
									FinalApprovalTimestamp = current timestamp
									DaysToFinalApprove = (FinalApprovalTimestamp date - NegotiationApprovalTimestamp date)
								if (!AmendmentExists)
									include SendTermsAndConditionsApprovalMessage
								make transition to Approved

						Disapprove is an Instance Action
							restricted
							valid when (!ContractChangesExist)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if ((PreviousState.Draft)
								or  (PreviousState.Released)
								or  (PreviousState.Negotiation))
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									invoke TransitionToDraft Released ContractArticle set
									make transition to Draft
									invoke TriggerProcessContractService
								include ClearProcessingDays

						DisapproveAddendum is an Instance Action
							restricted
							valid when (AddendumExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Addendum
								or  PreviousState.Released
								or  PreviousState.Negotiation)
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									invoke TransitionToAddendum Released ContractArticle set
									make transition to Addendum

						DisapproveAmendment is an Instance Action
							restricted
							valid when (AmendmentExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Amendment
								or  PreviousState.Released
								or  PreviousState.Negotiation)
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									initialize ApprovalStatus
									make transition to Amendment

						Reject is an Instance Action
							restricted
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								OnHold = true
								invoke HoldAllContractLinesFromReject ContractLine
									invoked.PrmContractGroup = ContractGroup
									invoked.PrmContract 	 = Contract
								if (IsManufacturerContract)
									invoke HoldAllRelatedDistributorContractLines ContractLine
										invoked.PrmContractGroup = ContractGroup
										invoked.PrmContract      = Contract
								invoke SetToInactive ContractArticle set
								make transition to ApprovalDenied

						ManualApprove is an Instance Action
							Action Rules
								if (FinalApprovalTimestamp not entered)
									FinalApprovalTimestamp = current timestamp
									DaysToFinalApprove = (FinalApprovalTimestamp date - NegotiationApprovalTimestamp date)
								if (!AmendmentExists)
									include SendTermsAndConditionsApprovalMessage
								make transition to Approved
								cancel CMContFinalAppr process

						ManualDisapprove is an Instance Action
							valid when (!ContractChangesExist)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if ((PreviousState.Draft)
								or  (PreviousState.Released)
								or  (PreviousState.Negotiation))
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									invoke TransitionToDraft Released ContractArticle set
									make transition to Draft
									invoke TriggerProcessContractService
								cancel CMContFinalAppr process
								include ClearProcessingDays


						ManualDisapproveAddendum is an Instance Action
							valid when (AddendumExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Addendum
								or  PreviousState.Released
								or  PreviousState.Negotiation)
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									invoke TransitionToAddendum Released ContractArticle set
									make transition to Addendum
								cancel CMContFinalAppr process
								include ClearProcessingDays

						ManualDisapproveAmendment is an Instance Action
							valid when (AmendmentExists)
							subject is ContractDisapprove
							reason code required
							action comment required
							Action Rules
								if (PreviousState.Amendment
								or  PreviousState.Released
								or  PreviousState.Negotiation)
									initialize ApprovalStatus
									initialize NegotiationStatus
									initialize FinalApprovalStatus
									initialize ApprovalStatus
									make transition to Amendment
								cancel CMContFinalAppr process
								include ClearProcessingDays

						ManualReject is an Instance Action
							subject is ContractReject
							reason code required
							action comment required
							Action Rules
								OnHold = true
								invoke HoldAllContractLinesFromReject ContractLine
									invoked.PrmContractGroup = ContractGroup
									invoked.PrmContract 	 = Contract
								if (IsManufacturerContract)
									invoke HoldAllRelatedDistributorContractLines ContractLine
										invoked.PrmContractGroup = ContractGroup
										invoked.PrmContract      = Contract
								invoke SetToInactive ContractArticle set
								make transition to ApprovalDenied
								cancel CMContFinalAppr process
					Approved is a State
						Entrance Rules
							make transition to ReadyToActivate

					ApprovalDenied is a State
						Entrance Rules
							make transition to Inactive
							invoke TriggerProcessContractService

			ReadyToActivate is a State

				Entrance Rules 

					if ((ServicePurchaseType
					or   StandingPurchaseType)
					and	 ContractUsesMatrixApprovals
					and  BusinessGroupRel.FinanceEnterpriseGroup.EnableResponsibilityMatrix)
						for each ContractLineDistributionRel 
							invoke Update each 
								invoked.ContractDistributionAggregation = blank
								invoked.TransientSkipActionExitRules = true
						if (ContractDistributionAggregationRel exists) 
							for each ContractDistributionAggregationRel
								invoke Purge each 
						for each ContractLineDistributionRel 
							invoke CalculateDistributionSummary each  
						InMatrixApprovalProcess = true
						FromMatrixApproval      = false 
						for each ContractDistributionAggregationRel
							invoke SubmitForApproval each 

				Exit Rules
					
					if (FromMatrixApproval)
						PreviousState	= PreviousState.MatrixApproval
					else
						PreviousState 	= PreviousState.ReadyToActivate

				CheckMatrixAggregations is an Instance Action 
					restricted 
					Action Rules 
					
						if (InMatrixApprovalProcess = true 
						and	OpenContractDistributionAggregationRel !exists)
							PreviousState 			= 11 
							InMatrixApprovalProcess = false 

							send email
								to PrimaryContactRel.DerivedEmail
								from config.DefaultFromEmailAddress
								cc DerivedSecondaryContactEmailAddressList
								subject "DistributionsHaveReceivedMatrixApproval"
								Contents
									"AllDistributionsHaveReceivedMatrixApprovalForContract<RepresentativeText>"		

				ManualApproveForMatrix is an Instance Action
					valid when (InMatrixApprovalProcess)
					Action Rules

						InMatrixApprovalProcess = false
						for each OpenContractDistributionAggregationRel 
							invoke ManualFromContract each
								invoked.Action = 1
						PreviousState	= PreviousState.MatrixApproval		

				ManualRejectForMatrix is an Instance Action
					valid when (InMatrixApprovalProcess)
					subject is ContractReject
					reason code required
					action comment required
					Action Rules
						InMatrixApprovalProcess = false
						for each OpenContractDistributionAggregationRel 
							invoke ManualFromContract each
								invoked.Action = 2 
						invoke RejectActivation
						FromMatrixApproval      = true  
						PreviousState	= PreviousState.MatrixApproval							

				ManualDisapproveForMatrix is an Instance Action
					valid when (InMatrixApprovalProcess)
					subject is ContractDisapprove
					reason code required
					action comment required
					Action Rules

						InMatrixApprovalProcess = false
						for each OpenContractDistributionAggregationRel 
							invoke ManualFromContract each
								invoked.Action = 3					
						FromMatrixApproval     	= true 
						PreviousState	= PreviousState.MatrixApproval		
					
					Exit Rules 
						if (CanDisapprove)
							invoke Disapprove 
						else 
						if (CanDisapproveAddendum)
							invoke DisapproveAddendum
						else 
						if (CanDisapproveAmendment)
							invoke DisapproveAmendment					

				ActivateFromGPOInterface is an Instance Action
					restricted

					Action Rules
						FromInterfaceActivate = true
						invoke Activate

				Activate is an Instance Action
					valid when (CanActivate)
					completion message is "<ActivationMessage>"

					Entrance Rules
						ActivationInProgress = true

						if (!Vendor entered)
							Vendor = Supplier.Vendor
							invoke FastUpdate ContractRebate set
								invoked.Vendor			= Vendor

					Action Rules
						if (SpecialItemsWillCreateItems)
							confirmation required
								"ContractActivationWillCreateItemsAndVendorItemsForSpecialItems;DoYouWantToContinue?"

						if (SpecialItemsWillCreateItemWorksheet)
							confirmation required
								"ContractActivationWillCreateItemWorksheetRecordsForSpecialItemsFromWhichItemsCanBeCreated;DoYouWantToContinue?"

						if (!FromInterfaceActivate)
							include ActivateContractEdits

						include EditSpreads

						if (ActiveSupplierCertificationExist
						or  ActiveSupplierContactCertificationExist)
							include CertificationEdits

						if (HasAPurchaseType)
							invoke ActivateLineEdits ContractLine
								invoked.PrmContractGroup		= ContractGroup
								invoked.PrmContract				= Contract

							if (ContractSubtype entered)
								PurchaseType = ContractSubtype.PurchaseType
							else
								PurchaseType = ContractType.PurchaseType
						else                 
							if  (ParentContract entered
							and !ParentRelatedContractRel exists)
								invoke CreateRelatedParentContract Contract
							invoke ActivateContractLines ContractLine
								invoked.PrmContractGroup		= ContractGroup
								invoked.PrmContract				= Contract

				ActivateContractHeader is an Instance Action
					restricted
					run in background

					Action Rules
						if (ParentContract entered)
							if (!ParentRelatedContractRel exists)
								invoke CreateRelatedParentContract Contract

						if (ChangeOrderCreateDocument
						and AllowChangeOrder)
							if ((UseIDM
							or   IsUsingIDMTemplate)
							and !HasIDMDocument)
								invoke CreateAndSendContractDocToIDM
							else
							if (!UseIDM
							and !IsUsingIDMTemplate
							and	!HasDocumentRevisionFile)
								invoke CreateContractDocumentFromVersion

					Exit Rules
						invoke ActivateContractLines ContractLine
							invoked.PrmContractGroup		= ContractGroup
							invoked.PrmContract				= Contract

				CreateRelatedParentContract is an Instance Action  
					restricted
					run in background

					Action Rules

				TransitionToActive is an Instance Action
					restricted
					Action Rules
						make transition to Active
						invoke TriggerContractService
						invoke TriggerProcessContractService
						ActivationInProgress = false

				SetActivationInProgressFalse is an Instance Action
					restricted
					Action Rules
						ActivationInProgress = false

				Disapprove is an Instance Action
					valid when (CanDisapprove)
					subject is ContractDisapprove
					reason code required
					action comment required
					Action Rules
						if ((PreviousState.Draft)
						or  (PreviousState.Released)
						or  (PreviousState.Negotiation)
						or  (PreviousState.MatrixApproval)
						or  (PreviousState.FinalApproval))
							initialize ApprovalStatus
							initialize NegotiationStatus
							initialize FinalApprovalStatus
							invoke TransitionToDraft Released ContractArticle set
							make transition to Draft
							invoke TriggerProcessContractService
						include ClearProcessingDays

				CreateAmendment is an Instance Action
					restricted 
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						make transition to Amendment

				DisapproveAddendum is an Instance Action
					valid when (CanDisapproveAddendum)
					subject is ContractDisapprove
					reason code required
					action comment required
					Action Rules
						if (PreviousState.Addendum
						or  PreviousState.Released
						or  PreviousState.Negotiation
						or  PreviousState.MatrixApproval
						or  PreviousState.FinalApproval)
							initialize ApprovalStatus
							initialize NegotiationStatus
							initialize FinalApprovalStatus
							initialize ApprovalStatus
							invoke TransitionToAddendum Released ContractArticle set
							make transition to Addendum


				DisapproveAmendment is an Instance Action
					valid when (CanDisapproveAmendment)
					subject is ContractDisapprove
					reason code required
					action comment required
					Action Rules
						if (PreviousState.Amendment
						or  PreviousState.Released
						or  PreviousState.Negotiation
						or  PreviousState.FinalApproval
						or  PreviousState.MatrixApproval)
							initialize ApprovalStatus
							initialize NegotiationStatus
							initialize FinalApprovalStatus
							initialize ApprovalStatus
							make transition to Amendment

				RejectActivation is an Instance Action
					valid when (CanRejectActivation)
					subject is ContractReject
					reason code required
					action comment required
					Action Rules
						OnHold = true
						invoke HoldAllContractLinesFromReject ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract 	 = Contract
						if (IsManufacturerContract)
							invoke HoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke SetToInactive ContractArticle set
						make transition to Inactive
						invoke TriggerProcessContractService

				RejectRenewalActivation is an Instance Action
					valid when (InterfacedRenewal)
					subject is ContractReject
					reason code required
					action comment required
					Action Rules
						OnHold = true
						if (AddendumExists
						or  AmendmentExists)
							for each ContractVersionDescendingRel
								invoke Update each
									invoked.VersionCloseStamp = current timestamp
								end for each
						invoke HoldAllContractLinesFromReject ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract 	 = Contract
						if (IsManufacturerContract)
							invoke HoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke SetToInactive ContractArticle set
						make transition to Inactive
						invoke TriggerProcessContractService

				RejectAmendmentActivation is an Instance Action
					valid when (InactivateAmendmentContract)
					subject is ContractReject
					reason code required
					action comment required
					Action Rules
						OnHold = true
						if (AddendumExists
						or  AmendmentExists)
							for each ContractVersionDescendingRel
								invoke Update each
									invoked.VersionCloseStamp = current timestamp
								end for each
						invoke HoldAllContractLinesFromReject ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract 	 = Contract
						if (IsManufacturerContract)
							invoke HoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke SetToInactive ContractArticle set
						make transition to Inactive
						invoke TriggerProcessContractService

				RejectAddendumActivation is an Instance Action
					valid when (InactivateAddendumContract)
					subject is ContractReject
					reason code required
					action comment required
					Action Rules
						OnHold = true
						if (AddendumExists
						or  AmendmentExists)
							for each ContractVersionDescendingRel
								invoke Update each
									invoked.VersionCloseStamp = current timestamp
								end for each
						invoke HoldAllContractLinesFromReject ContractLine
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract 	 = Contract
						if (IsManufacturerContract)
							invoke HoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke SetToInactive ContractArticle set
						make transition to Inactive
						invoke TriggerProcessContractService

			Active is a State
				Entrance Rules
					if (ActivatedTimestamp not entered)
						ActivatedTimestamp = current timestamp
						DaysToActivate = (ActivatedTimestamp date - ReleasedTimestamp date)
						DaysToActivateAfterCreation = (ActivatedTimestamp date - ReleasedTimestamp date)

						if (FinalApprovalTimestamp date entered)
							DaysToActivate = (ActivatedTimestamp date - FinalApprovalTimestamp date)
						else

						if (NegotiationApprovalTimestamp date entered)
							DaysToActivate = (ActivatedTimestamp date - NegotiationApprovalTimestamp date)
						else

						if (SupplierApprovalTimestamp date entered)
							DaysToActivate = (ActivatedTimestamp date - SupplierApprovalTimestamp date)
						else

						if (InternalApprovalTimestamp date entered)
							DaysToActivate = (ActivatedTimestamp date - InternalApprovalTimestamp date)
						else

						if (ReleasedTimestamp date entered)
							DaysToActivate = (ActivatedTimestamp date - ReleasedTimestamp date)
					AddendumExists = false
					AmendmentExists = false
					AllowActiveUpdates = false

				Exit Rules
					PreviousState = PreviousState.Active

				CreateAddendum is an Instance Action
					subject is ContractAddendumAmendment
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						invoke TransitionToAddendum Active ContractArticle set
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
							invoked.PreviousActivatedTermVersion = last ActivatedContractTermVersionRel.ContractTermVersion
							if (LocalFromSupplierChangeOrder = true)
								invoked.FromSupplierChangeOrder = true
						make transition to Addendum

				CreateAmendment is an Instance Action
					subject is ContractAddendumAmendment
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
						make transition to Amendment

				TransitionToAmendment is an Instance Action
					restricted
					Action Rules
						make transition to Amendment

				TransitionToAddendum is an Instance Action
					restricted
					Action Rules
						make transition to Addendum

				CreateEventWorksheetByContract is an Instance Action
					valid when (IsEligibleContractForEvent)
					default label is "CreateEvent"
					Parameters
						Company						is a SourcingCompany
						NewName						is a Description
						NewDescription				is a Description4
						NewEventReference			is a Description
						NewSourcingEventType		is a SourcingEventType
						NewBuyer					is a Buyer
						NewCategory					is a Category
						NewSubCategory				is a SubCategory
						NewPostingOptions			is a PostingOptions
						NewCreateAmendments			is Boolean
						NewOnlyNotifyResponders     is Boolean
						NewAllowSupplierQandA		is Boolean
						NewInformalQuote			is Boolean
						NewPreviewDate				is TimeStamp
						NewOpenDate					is TimeStamp
						NewCloseDate				is TimeStamp
						NewQandAOpenDate			is TimeStamp
						NewQandACloseDate			is TimeStamp
						NewDisputeCloseDate			is TimeStamp

					Parameter Rules
						Company
							required
						NewName
							required
							initial value is Name
						NewDescription
							initial value is Description

					Local Fields
						ContractWorksheet	is a ContractEventWorksheet view

					Action Rules
						invoke CreateEventWorksheetByContract Active first ContractLine set
							assign result to ContractWorksheet
							invoked.ParameterContractGroup  = this instance.ContractGroup
							invoked.ParameterContract		= this instance.Contract

						invoke CreateEvent ContractWorksheet.ContractEventWorksheet set
							invoked.Company					= Company  
							invoked.NewName					= NewName
							invoked.NewDescription			= NewDescription
							invoked.NewEventReference		= NewEventReference
							invoked.NewSourcingEventType	= NewSourcingEventType
							invoked.NewBuyer				= NewBuyer
							invoked.NewCategory				= NewCategory
							invoked.NewSubCategory			= NewSubCategory
							invoked.NewPostingOptions		= NewPostingOptions
							invoked.NewCreateAmendments		= NewCreateAmendments
							invoked.NewOnlyNotifyResponders = NewOnlyNotifyResponders
							invoked.NewAllowSupplierQandA	= NewAllowSupplierQandA
							invoked.NewInformalQuote		= NewInformalQuote
							invoked.NewPreviewDate			= NewPreviewDate
							invoked.NewOpenDate				= NewOpenDate
							invoked.NewCloseDate			= NewCloseDate
							invoked.NewQandAOpenDate		= NewQandAOpenDate
							invoked.NewQandACloseDate		= NewQandACloseDate
							invoked.NewDisputeCloseDate		= NewDisputeCloseDate

						RemoveFromExpireList = true

				CreateNewCopy is an Instance Action
					completion message is "Contract<LocalContract.Contract>WasCreated"
					Parameters
						ContractGroup
						FromContract					is a Contract
						NewName 						is a Description
						NewDescription 					is a Description4
						NewSupplier						is a Supplier
						NewSupplierContact				is a SupplierSourceId
						NewContractType					is a ContractType
						NewContractSubtype				is a ContractSubtype
						NewContractClassification		is a ContractClassification
						NewContractSubclassification	is a ContractSubclassification
						NewContractHasNoParent			is Boolean
						NewParentContract				is a Contract
						NewEffectiveDate				is Date
						NewExpirationDate				is Date
						NewContractReviewDate			is Date
						NewTargetedPurchasesFromDate	is Date
						NewTargetedPurchasesToDate		is Date
						NewCurrencyCode					is a Currency
						CopySelectAll					is Boolean
						CopyTiersOrDistributorPricing	is Boolean
						CopyQualifierContractsAndItems  is Boolean 
						CopyCapitatedInformation        is Boolean 
						CopyContractParticipants		is Boolean
						CopyContacts					is Boolean
						CopyManufacturerContracts		is Boolean
						CopyContractLines				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyContractComments			is Boolean
						CopyContractLineComments		is Boolean
						CopyManualQuestions				is Boolean
						CopyMilestones					is Boolean
						CopyDeliverables				is Boolean
						CopyContractAttachments         is Boolean
						CopyContractLineAttachments     is Boolean
						CopyHoldForLines                is Boolean
						CloseExistingLines              is Boolean 
						HoldExistingLines               is Boolean 
						ProcurementReasonCode           
						CreateAsManufacturerContract    is Boolean  
						CreateDistributorContracts      is Boolean 						

					Parameter Rules
						ContractGroup
							required
						FromContract
							required
							initial value is Contract
						CreateAsManufacturerContract
							initial value is true 
						CreateDistributorContracts 
							initial value is true 
						NewName
							required
							initial value is Name
							default to FromContract.Description
						NewDescription
							initial value is Description
						NewSupplier
							initial value is Supplier
							default to FromContract.Supplier
							if (NewSupplierContact entered)
								required
									"SupplierIsRequiredWhenSupplierContactIsEntered"
						NewSupplierContact
							initial value is SupplierSourceId
							default to FromContract.SupplierSourceId
							if (NewSupplier entered)
								required
									"SupplierContactIsRequiredWhenSupplierIsEntered"
						NewContractType
							initial value is ContractType
							default to FromContract.ContractType
							required
								"ContractTypeIsRequired"
						NewContractSubtype
							initial value is ContractSubtype
							if (NewContractSubtype entered)
								constraint (NewContractType entered)
									"ContractTypeIsRequiredWhenContractSubtypeIsEntered"
						NewContractClassification
							initial value is ContractClassification
							default to FromContract.ContractClassification
						NewContractSubclassification
							initial value is ContractSubclassification
							if (NewContractSubclassification entered)
								constraint (NewContractClassification entered)
									"ContractClassificationIsRequiredWhenContractSubclassificationIsEntered"
						NewEffectiveDate
							required
						NewExpirationDate
							required 
						CopySelectAll
							initial value is true
					Local Fields
						LocalContract	is a Contract view

					Action Rules
						if (FromContract.HasGPORelatedContract)
							confirmation required 
								"ThisContractIsFromGPOInterfaceInformation;DoYouWantToContinue?"

						if (CloseExistingLines)
							constraint (!HoldExistingLines)
								"CannotBothCloseAndHoldExistingLines"
							if (FromContract.IsManufacturerContract)
								constraint (FromContract.NoUnreleasedDistPoLinesExist)
									"CannotCloseContract,UnreleasedPoLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedPORel.Contract>;Line<first DistContractLinesWithUnreleasedPORel.ContractLine>"
								constraint (FromContract.NoUnreleasedDistReqLinesExist)
									"CannotCloseContract,UnreleasedRequisitionLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedReqRel.Contract>;Line<first DistContractLinesWithUnreleasedReqRel.ContractLine>"
								constraint (FromContract.NoUnprocessedDistRequestsExist)
									"CannotCloseContract,UnprocessedPurchaseOrderRequestsExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnprocessedPORel.Contract>;Line<first DistContractLinesWithUnprocessedPORel.ContractLine>"
							constraint (FromContract.UnreleasedServiceInvoicesRel !exists)
								"CannotCloseContract,UnmatchedInvoicesExistForServiceContract;MustMatchPriorToClosing"
							constraint (FromContract.UnreleasedPolinesByContractRel !exists)
								"CannotCloseContract,UnreleasedPOLinesExist;MustReleasePriorToClosing;SeeAlertLinks"
							constraint (FromContract.UnreleasedRequisitionLinesByContractRel !exists)
								"CannotCloseContract,UnreleasedRequisitionLinesExist;MustReleaseAndCreatePOPriorToClosing;SeeAlertLinks"
							constraint (FromContract.UnprocessedRequestsByContractRel !exists)
								"CannotCloseContract,UnprocessedPurchaseOrderRequestsExist;MustCreatePOAndReleasePriorToClosing;SeeAlertLinks"		

						if (HoldExistingLines)
							constraint (!CloseExistingLines)
								"CannotBothCloseAndHoldExistingLines"

						invoke Draft.CreateContractFromContract
							assign result to LocalContract
							invoked.ContractGroup					= ContractGroup
							invoked.FromContract					= FromContract
							invoked.NewName							= NewName
							invoked.NewDescription					= NewDescription
							invoked.NewSupplier						= NewSupplier
							invoked.NewSupplierContact				= NewSupplierContact
							invoked.NewContractType					= NewContractType
							invoked.NewContractSubtype				= NewContractSubtype
							invoked.NewContractClassification		= NewContractClassification
							invoked.NewContractSubclassification	= NewContractSubclassification
							invoked.NewContractHasNoParent			= NewContractHasNoParent
							invoked.NewParentContract				= NewParentContract
							invoked.NewEffectiveDate				= NewEffectiveDate
							invoked.NewExpirationDate				= NewExpirationDate
							invoked.NewContractReviewDate			= NewContractReviewDate
							invoked.NewTargetedPurchasesFromDate	= NewTargetedPurchasesFromDate
							invoked.NewTargetedPurchasesToDate		= NewTargetedPurchasesToDate
							invoked.NewCurrencyCode					= NewCurrencyCode
							invoked.CopySelectAll					= CopySelectAll
							invoked.CopyTiersOrDistributorPricing	= CopyTiersOrDistributorPricing
							invoked.CopyContractParticipants		= CopyContractParticipants
							invoked.CopyContacts					= CopyContacts
							invoked.CopyManufacturerContracts		= CopyManufacturerContracts
							invoked.CopyContractLines				= CopyContractLines
							invoked.CopyArticlesAndTerms			= CopyArticlesAndTerms
							invoked.CopyContractComments			= CopyContractComments
							invoked.CopyContractLineComments		= CopyContractLineComments
							invoked.CopyManualQuestions				= CopyManualQuestions
							invoked.CopyMilestones					= CopyMilestones
							invoked.CopyDeliverables				= CopyDeliverables
							invoked.CopyContractAttachments         = CopyContractAttachments
							invoked.CopyContractLineAttachments     = CopyContractLineAttachments
							invoked.CreatedFromRenewAction			= true
							invoked.CopyHoldForLines                = CopyHoldForLines
							invoked.CloseExistingLines              = CloseExistingLines               
							invoked.HoldExistingLines               = HoldExistingLines 
							invoked.ProcurementReasonCode           = ProcurementReasonCode
							invoked.CreateAsManufacturerContract    = CreateAsManufacturerContract
							invoked.CreateDistributorContracts      = CreateDistributorContracts 
							invoked.CopyQualifierContractsAndItems  = CopyQualifierContractsAndItems
							invoked.CopyCapitatedInformation        = CopyCapitatedInformation

						RemoveFromExpireList = true

				RemoveFromExpireListAction is an Instance Action
					default label is "RemoveFromList"

					Action Rules
						confirmation required
							"Warning;ContractWillBePermanentlyRemovedFromThisList.DoYouWantToContinue?"

						RemoveFromExpireList = true

			Inactive is a State
				Entrance Rules
					if (AddendumExists
					or  AmendmentExists)
						for each ContractVersionDescendingRel
								invoke Update each
									invoked.VersionCloseStamp = current timestamp
								end for each
					AllowActiveUpdates = false

				Exit Rules
					PreviousState = PreviousState.Inactive

					if (IsDistributorContract)
						if (TierPricingMemberMismatchRel exists)
							for each TierPricingMemberMismatchRel
								invoke Update each
									each.MfgContractTierInfo.Tier = each.TierMemberRel.Tier

				ReactivateContract is an Instance Action
					valid when (!HasBeenActivated)
					subject is ContractReactivate
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						OnHold = false
						invoke RemoveHoldAllContractLinesReactivateDraft ContractLine
							invoked.PrmContractGroup  = ContractGroup
							invoked.PrmContract 	  = Contract
						if (IsManufacturerContract)
							invoke RemoveHoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						LocalFromMatrixApproval	= FromMatrixApproval
						invoke TransitionToDraft Inactive ContractArticle set
						FromMatrixApproval      = LocalFromMatrixApproval
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
						make transition to Draft
						invoke TriggerProcessContractService

				ReactivateRenewalContract is an Instance Action
					valid when (InterfacedRenewal)
					subject is ContractReactivate
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						OnHold = false
						invoke RemoveHoldAllContractLinesReactivateDraft ContractLine
							invoked.PrmContractGroup  = ContractGroup
							invoked.PrmContract 	  = Contract
						if (IsManufacturerContract)
							invoke RemoveHoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke TransitionToDraft Inactive ContractArticle set
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
						make transition to Draft
						invoke TriggerProcessContractService

				ReactivateAddendum is an Instance Action
					valid when (AddendumExists)
					subject is ContractReactivate
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus

						OnHold = false
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
						invoke RemoveHoldAllContractLinesReactivateAmendment ContractLine
							invoked.PrmContractGroup  = ContractGroup
							invoked.PrmContract 	  = Contract
						if (IsManufacturerContract)
							invoke RemoveHoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke TransitionToAddendum Inactive ContractArticle set

						make transition to Addendum

				ReactivateAmendment is an Instance Action
					valid when (AmendmentExists)
					subject is ContractReactivate
					reason code required
					action comment required
					Action Rules
						initialize ApprovalStatus
						initialize NegotiationStatus
						initialize FinalApprovalStatus
						OnHold = false
						invoke Create ContractVersion set
							invoked.VersionOpenStamp = current timestamp
						invoke RemoveHoldAllContractLinesReactivateAmendment ContractLine
							invoked.PrmContractGroup  = ContractGroup
							invoked.PrmContract 	  = Contract
						if (IsManufacturerContract)
							invoke RemoveHoldAllRelatedDistributorContractLines ContractLine
								invoked.PrmContractGroup = ContractGroup
								invoked.PrmContract      = Contract
						invoke TransitionToActive Inactive ContractArticle set
						make transition to Amendment

			Addendum is a State

				Entrance Rules
					AddendumExists = true
					AllowActiveUpdates = false

				Exit Rules
					PreviousState = PreviousState.Addendum
				Update is an Update Action
					valid when (!CommitmentsClosed)
					Field Rules
						ContractType
							cannot be changed
								"ContractTypeCannotBeChanged"
						ContractSubtype
							cannot be changed
								"ContractSubtypeCannotBeChanged"
						ContractClassification
							cannot be changed
								"ContractClassificationCannotBeChanged"
						ContractSubclassification
							cannot be changed
								"ContractSubclassificationCannotBeChanged"
						ManufacturerOrDistributor
							cannot be changed
								"ManufacturerOrDistributorCannotBeChanged"
						EventTermsHaveBeenNegotiated
							cannot be changed
								"CannotChangeAfterContractHasBeenActivated"
						MaximumAmount
							if (NonServicePurchaseType)
								constraint (MaximumAmount >= MaximumAmountInUse)
									"CannotSetTheLifetimeMaximumAmountBelowTheAmountAlreadyOrdered,Invoiced,OrRequested-<MaximumAmountInUse>"

						AllowReferenceOfItemsNotOnContract
							if (HasAPurchaseType)
								if (AllowReferenceOfItemsNotOnContract changed
								and AllowReferenceOfItemsNotOnContract = false)
									constraint (ActivatedContractLineRel exists)
										"AllowReferenceOfItemsNotOnContractMustBeTrueWhenThereAreNoActivatedContractLines"

						GPONegotiated
							if (GPONegotiated changed
							and old GPONegotiated)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPONegotiated;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"

						GPOSupplier
							if (GPOSupplier changed
							and old GPOSupplier entered)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPOSupplier;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"
						PreferredContract
							if (PreferredContract changed)
								if (old PreferredContract
								and PreferredMfgContractExists)
									invoke DeletePreferredMfgContract

					Action Rules

						if (NotContractTemplate)
							include UpdateRules

						if (ExpirationDate changed)
							if (IsManufacturerOrDistributorContract)
								constraint (ExpirationDate != 0)
									"CannotClearExpirationDateForManufacturerOrDistributorContracts;TheyAreRequiredToHaveAnExpirationDate"

					Exit Rules

						include UpdateExitRules

				RemoveFromExpireListAction is an Instance Action
					default label is "RemoveFromList"

					Action Rules
						confirmation required
							"Warning;ContractWillBePermanentlyRemovedFromThisList.DoYouWantToContinue?"

						RemoveFromExpireList = true

				Release is an Instance Action    
					valid when (!OnHold)

					Action Rules
						if (WithoutIDMContractDocument)
							confirmation required
								"ContinueReleaseWithoutGeneratedContractDocument?"
						if (IDMRedlineApprovals)
							if (ContractSubclassification entered)
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForSubclassificationThatUsesIDMDocumentRedlining"
							else
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForClassificationThatUsesIDMDocumentRedlining"
						include ReleaseEdits

						include EditSpreads

						if (UseCommitments
						and NoLinesFromRQ)
			 				BudgetEditProcessing = 1
							invoke Delete WarningBudgetEditErrorRel
							invoke Delete BudgetEditErrorRel

							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup    											= ContractGroup.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           											= UniqueID
								invoked.PrmMode			                                                        = BudgetEditMode.Test
								invoked.PrmTotalsProcessing                                                     = BudgetEditTotalsProcessing.DoNothing
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= ContractGroup
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= Contract
								invoked.PrmBusinessClassName                									= "Contract"
								invoked.PrmEditContext                      									= "Release"
						else
							invoke FinalRelease

				FinalRelease is an Instance Action
					restricted

					Action Rules

   						include SubmitDraftTermAndConditionUpdates

						invoke Release Addendum ContractArticle set

						if (!ContractParticipantsRel exists
						and !ContractTierMembersRel exists
						and !AnyPricingMembersRel exists
						and  DisplayPurchaseFroms)
							invoke CreateContractPurchaseFromWithSupplier

						if (ContractSubclassification not entered)
							if ((!ContractClassification.RequireAddendumApproval
							and  !ContractClassification.RequireApprovalWithWordDocDuringAddendum)
							and (ContractClassification.RequireAddendumNegotiation))
								invoke CreateUpdateContractTermVersion
								make transition to Negotiation
							else
								if ((!ContractClassification.RequireAddendumApproval)
								and  (!ContractClassification.RequireApprovalWithWordDocDuringAddendum)
								and  (!ContractClassification.RequireAddendumNegotiation)
								and   (ContractClassification.RequireFinalAddendumApproval))
									make transition to FinalApproval
								else
									if    ((!ContractClassification.RequireAddendumApproval)
									and  (!ContractClassification.RequireApprovalWithWordDocDuringAddendum)
									and  (!ContractClassification.RequireAddendumNegotiation)
									and  (!ContractClassification.RequireFinalAddendumApproval))
										make transition to ReadyToActivate
									else
										make transition to Released
						else
							if ((!ContractSubclassification.RequireAddendumApproval)
							and (!ContractSubclassification.RequireApprovalWithWordDocDuringAddendum)
							and  (ContractSubclassification.RequireAddendumNegotiation))
								invoke CreateUpdateContractTermVersion
								make transition to Negotiation
							else
								if ((!ContractSubclassification.RequireAddendumApproval)
								and (!ContractSubclassification.RequireApprovalWithWordDocDuringAddendum)
								and (!ContractSubclassification.RequireAddendumNegotiation)
								and (ContractSubclassification.RequireFinalAddendumApproval))
									make transition to FinalApproval
								else
									if ((!ContractSubclassification.RequireAddendumApproval)
									and (!ContractSubclassification.RequireApprovalWithWordDocDuringAddendum)
									and (!ContractSubclassification.RequireAddendumNegotiation)
									and (!ContractSubclassification.RequireFinalAddendumApproval))
										make transition to ReadyToActivate
									else
										make transition to Released
						if ((UseIDM
						or IsUsingIDMTemplate
						or UseIDMPerClassificationAndSubClass)
						and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.IDMConfiguration.UpdateContractAttributes)
							invoke UpdateIDMAttributes

			Amendment is a State
				Entrance Rules
					AmendmentExists = true
					AllowActiveUpdates = false

				Exit Rules
					PreviousState = PreviousState.Amendment
				Update is an Update Action
					valid when (!CommitmentsClosed)
					Field Rules
						ContractType
							cannot be changed
								"ContractTypeCannotBeChanged"
						ContractSubtype
							cannot be changed
								"ContractSubtypeCannotBeChanged"
						ContractClassification
							cannot be changed
								"ContractClassificationCannotBeChanged"
						ContractSubclassification
							cannot be changed
								"ContractSubclassificationCannotBeChanged"
						ManufacturerOrDistributor
							cannot be changed
								"ManufacturerOrDistributorCannotBeChanged"
						EventTermsHaveBeenNegotiated
							cannot be changed
								"CannotChangeAfterContractHasBeenActivated"

						MaximumAmount
							if (NonServicePurchaseType)
								constraint (MaximumAmount >= MaximumAmountInUse)
									"CannotChangeTheMaximumAmountBelowWhatHasAlreadyBeenOrderedAndRequisitioned"

						AllowReferenceOfItemsNotOnContract
							if (HasAPurchaseType)
								if (AllowReferenceOfItemsNotOnContract changed
								and !AllowReferenceOfItemsNotOnContract)
									constraint (ActivatedContractLineRel exists)
										"AllowReferenceOfItemsNotOnContractFlagMustBeYesWhenThereAreNoActivatedContractLines"

						GPONegotiated
							if (GPONegotiated changed
							and old GPONegotiated)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPONegotiated;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"

						GPOSupplier
							if (GPOSupplier changed
							and old GPOSupplier entered)
								constraint (!ContractOnRebateQualifierContractRel exists)
									"CannotChange_GPOSupplier;ContractExistsAsARebateQualifierContractForContract<first ContractOnRebateQualifierContractRel.Contract>"
						PreferredContract
							if (PreferredContract changed)
								if (old PreferredContract
								and PreferredMfgContractExists)
									invoke DeletePreferredMfgContract

					Action Rules

						if (NotContractTemplate)
							include UpdateRules

					Exit Rules

						if (Vendor changed)
							invoke FastUpdate ContractRebate set

						include UpdateExitRules

				RemoveFromExpireListAction is an Instance Action
					default label is "RemoveFromList"

					Action Rules
						confirmation required
							"Warning;ContractWillBePermanentlyRemovedFromThisList.DoYouWantToContinue?"

						RemoveFromExpireList = true

				Release is an Instance Action         
					valid when (!OnHold)

					Action Rules
						if (WithoutIDMContractDocument)
							confirmation required
								"ContinueReleaseWithoutGeneratedContractDocument?"
						if (IDMRedlineApprovals)
							if (ContractSubclassification entered)
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForSubclassificationThatUsesIDMDocumentRedlining"
							else
								constraint (IDMDocumentExists)
									"MustHaveAnIDMRedlineDocumentForClassificationThatUsesIDMDocumentRedlining"
						include ReleaseEdits

						if (UseCommitments
						and NoLinesFromRQ)
			 				BudgetEditProcessing = 1
							invoke Delete WarningBudgetEditErrorRel
							invoke Delete BudgetEditErrorRel

							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup    											= ContractGroup.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           											= UniqueID
								invoked.PrmMode			                                                        = BudgetEditMode.Test
								invoked.PrmTotalsProcessing                                                     = BudgetEditTotalsProcessing.DoNothing
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= ContractGroup
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= Contract
								invoked.PrmBusinessClassName                									= "Contract"
								invoked.PrmEditContext                      									= "Release"
						else
							invoke FinalRelease

				FinalRelease is an Instance Action
					restricted
					Action Rules

						if (!ContractParticipantsRel exists
						and !ContractTierMembersRel exists
						and !AnyPricingMembersRel exists
						and  DisplayPurchaseFroms)
							invoke CreateContractPurchaseFromWithSupplier

						if (ContractSubclassification not entered)
							if ((!ContractClassification.RequireAmendmentApproval)
							and (ContractClassification.RequireAmendmentNegotiation))
								make transition to Negotiation
							else
								if ((!ContractClassification.RequireAmendmentApproval)
								and  (!ContractClassification.RequireAmendmentNegotiation)
								and   (ContractClassification.RequireFinalAmendmentApproval))
									make transition to FinalApproval
								else
									if	((!ContractClassification.RequireAmendmentApproval)
									and  (!ContractClassification.RequireAmendmentNegotiation)
									and  (!ContractClassification.RequireFinalAmendmentApproval))
										make transition to ReadyToActivate
									else
										make transition to Released
						else
							if ((!ContractSubclassification.RequireAmendmentApproval)
							and  (ContractSubclassification.RequireAmendmentNegotiation))
								make transition to Negotiation
							else
								if ((!ContractSubclassification.RequireAmendmentApproval)
								and  (!ContractSubclassification.RequireAmendmentNegotiation)
								and  (ContractSubclassification.RequireFinalAddendumApproval))
									make transition to FinalApproval
								else
									if ((!ContractSubclassification.RequireAmendmentApproval)
									and (!ContractSubclassification.RequireAmendmentNegotiation)
									and (!ContractSubclassification.RequireFinalAmendmentApproval))
										make transition to ReadyToActivate
									else
										make transition to Released

						if ((UseIDM
						or IsUsingIDMTemplate
						or UseIDMPerClassificationAndSubClass)
						and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.IDMConfiguration.UpdateContractAttributes)
							invoke UpdateIDMAttributes

			Closed is a State
				Entrance Rules
					AllowActiveUpdates = false

				Exit Rules
FileCreationLogic.Contract is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"Contract_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
				LocalContractGroupSelection		is a Contract group in subject FileCreationContract
			Instance Selection
				where (ContractGroup.BusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      Contract % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
					LocalContractGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalContractGroupSelection not entered
					or	Contract within LocalContractGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= ContractGroup
							invoked.Key2				= Contract
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
