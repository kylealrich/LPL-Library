InventoryTransactionLine is a BusinessClass
    owned by ic
    prefix is ICT
    classic name is ICTRANS

    Ontology
        symbolic key is InventoryTransactionLine
            classic set name is ICTSET0
            classic name for InventoryTransactionLine.WarehouseShipment is SHIPMENT-NBR
            classic name for InventoryTransactionLine.LineNumber is LINE-NBR
            classic name for InventoryTransactionLine.ComponentSequence is COMPONENT-SEQ
            classic name for InventoryLocation is LOCATION
            classic name for TransactionSystemCode is SYSTEM-CD


    Patterns
        implements StaticJava
        disable AuditIndex
		enable explicit context override
		implements BODId
		implements AnalyticCube
	    	disable continuous update
	    	dynamically calculate totals
	    	write to base level only	
		implements Archivable
	    		
		
    Persistent Fields
        ItemLocation
        DocumentSequence              is an InventorySequence
            classic name is DOCUMENT-SEQ
        UpdateDate                    is TimeStamp
        TransactionCounter
            classic name is TRAN-COUNTER
			protected
        TransactionDate               is a ExchangeDate       
            classic name is TRANS-DATE
            protected
        Item
        StockOnHandQuantity           is a Quantity
            classic name is SOH-QTY
			precision is Item.NumberOfDecimalsQuantity
			protected
		SecondaryStockOnHandQuantity  is a Quantity
			precision is Item.NumberOfDecimalsQuantity
			protected
        Quantity
			precision is Item.NumberOfDecimalsQuantity
        OriginalQuantity              is a Quantity
            classic name is ORIGINAL-QTY
			precision is Item.NumberOfDecimalsQuantity
			protected
        OpenQuantity                  is a Quantity
            classic name is OPEN-QTY
			precision is Item.NumberOfDecimalsQuantity
			protected
        TransactionUOM                is a UnitOfMeasure
            classic name is TRAN-UOM
        StockUOM                      is a UnitOfMeasure
        	protected
        SecondaryQuantity             is a Quantity
            classic name is SECONDARY-QTY
			precision is Item.NumberOfDecimalsQuantity
        SecondaryUOM                  is a UnitOfMeasure
            classic name is SEC-UOM
        ReturnQuantity			  	  is a Quantity			
        	precision is Item.NumberOfDecimalsQuantity
        SecondaryReturnQuantity		  is a Quantity
        	precision is Item.NumberOfDecimalsQuantity


        SecondaryUOMMultiplier        is an UOMMultiplier
            classic name is SEC-UOM-MULT
			protected
        UnitCost                      is an InternationalCost 

        UnitCostInTransactionCurrency is an InternationalCost
            classic name is UNIT-COST-CURR
			precision is Item.NumberOfDecimalsCost
        CurrNd                        is an AcctNd
        AddOnChargeUnitCost           is an InternationalCost
            classic name is ADD-UNIT-COST
			precision is Item.NumberOfDecimalsCost
        BaseCost                      is an InternationalCost
			precision is Item.NumberOfDecimalsCost
        CurrentCost                   is an InternationalCost
			precision is Item.NumberOfDecimalsCost
        UnitPrice                     is an InternationalCost
        TransactionUOMMultiplier      is an UOMMultiplier
            classic name is TRAN-UOM-MULT
			protected
        GeneralLedgerDate             is Date
            classic name is GL-DATE
            default label is "GlobalLedgerDate"
			protected
        EstimatedDeliveryDate         is Date
            classic name is EST-DEL-DATE
        Reference
        Bin
        InventoryReasonCode
            classic name is REASON-CODE
        LineComment                   is a Description








        Status                        is Numeric size 1
			protected
            States
                Unreleased                 value is 0
                Released                   value is 1
                GlobalLedgerUpdated        value is 2
                IntermediateStatus         value is 5
                NonGlobalLedger            value is 3
        FromToCompanyLocationBin
            classic name for FromToCompanyLocationBin.FromToCompany is FROM-TO-CMPY
            classic name for FromToCompanyLocationBin.FromToLocation is FROM-TO-LOC

		FromDocument                  is an InventoryTransaction
			context of FromToCompanyLocationBin.FromToCompany
			context of FromToCompanyLocationBin.FromToLocation
            classic name is FR-DOCUMENT
			protected
        DetailsInBalance              is Boolean
            classic name is DETAIL-BAL-FL
			protected
        LastDistributionSequence      is an InventorySequence
            classic name is LAST-DST-SEQ
            disable Auditing
        ActualTime                    is TimeStamp
        ToCompanyBaseUnitCost         is an InternationalCost
            classic name is TO-CO-B-UCOST
			precision is Item.NumberOfDecimalsCost
			protected
        FromCurrency                  
            classic name is FROM-CURR-CD
        ToCurrency                    is a Currency
            classic name is TO-CURR-CD
        HistoryPeriod                 is Numeric size 2
            classic name is HIST-PERIOD
        HistoryYear                   is a Year
            classic name is HIST-YEAR
        OperatorID                    is an Operator 
        	holds pii
			protected
        ToUOM                         is a UnitOfMeasure
        KitType						  is AlphaUpper size 1
			protected
            States
                MakeToOrderKit value is "O"
                MakeToStockKit value is "S"
                NotAKit        value is "N"
        BlInvoiced                    is AlphaUpper size 1
        SaInvoiced                    is AlphaUpper size 1
        NationalDrugCode
            classic name is NDC-NBR
        GrantNumber
            classic name is GRANT-NBR
        TransactionSequence
            classic name is TRANS-SEQ
        UDITransactionSequence		  is like TransactionSequence
        EnteredItem
        ItemEntryMethod
            classic name is ENTRY-FL
        ManufacturerID
            classic name is MANUF-ID
			protected
        ManufacturerNumber
            classic name is MANUF-NBR
			protected
        ShipToFacility
            classic name is ST-FACILITY
			protected
        EAMOperationNumber            is an OperationNumber
            classic name is EAM-OPER-NBR
        EAMSequenceNumber             is a SeqNbr
            classic name is EAM-SEQ-NBR
        EAMWorkOrderNumber            is a WorkOrderNumber
            classic name is EAM-WO-NBR
        CreatedBy                     is an Operator 
        	holds pii
        LastUpdateDate                is TimeStamp
            classic name is LAST-UPDT-DATE
        LastUpdateBy                  is an Operator 
        	holds pii
        GlobalLineType
            classic name is GLBL-LINE-TYPE
        GlobalDocumentType
            classic name is GLBL-DOC-TYPE
        TemporaryHold                 is AlphaUpper size 1
            classic name is TEMP-HOLD
            States
                ApprovedByEngine value is "A"
                SentForApproval  value is "S"
        InventoryAccount              is a TransactionCodeBlock
            classic name for InventoryAccount.AccountingUnit is INV-ACCT-UNIT
            classic name for InventoryAccount.GeneralLedgerChartAccount is INV-ACCOUNT
        CostVarianceAccount           is a TransactionCodeBlock
            classic name for CostVarianceAccount.AccountingUnit is VAR-ACCT-UNIT
            classic name for CostVarianceAccount.GeneralLedgerChartAccount is VAR-ACCOUNT
        OffsetAccount                 is a TransactionCodeBlock
            classic name for OffsetAccount.ToAccountingEntity is OFF-DIST-CO
            classic name for OffsetAccount.AccountingUnit is OFF-ACCT-UNIT
            classic name for OffsetAccount.GeneralLedgerChartAccount is OFF-ACCOUNT
            classic name for OffsetAccount.Project is ACTIVITY
        AddOnCostAccount              is a TransactionCodeBlock       
            classic name for AddOnCostAccount.ToAccountingEntity is ADD-DIST-CO
            classic name for AddOnCostAccount.AccountingUnit is ADD-ACCT-UNIT
            classic name for AddOnCostAccount.GeneralLedgerChartAccount is ADD-ACCOUNT
        MultipleBins                  is Boolean
        OriginatingTransaction		  is BusinessObjectReference
			protected


    	IntransitReceivingStatus			is Numeric 1
			protected
    		States
    			NoReceiving						value is 0
    			ReadyToReceive					value is 1
    			ReceivingInProcess				value is 2
    			ReceivingCompleted				value is 3
		ItemGTIN
		EAMWorkOrder
		EAMWorkOrderActivity
			
	Transient Fields
		TransientLot									is a ItemLot
			derive value from DerivedLot
		TransientSublot									is a Sublot
			derive value from DerivedSublot
		TransientSerial									is an ItemSerialNumber
			derive value from DerivedSerial
		SkipInactiveEdit                                is Boolean	
		UseLastIssueCost           						is Boolean
        ReceiveAll										is Boolean
        DetailCreatedAutomatically              		is Boolean
        LastReceiptRecord								is Boolean
		GlobalTradeItemNumber							is an ItemGTIN
			derive value from DerivedItemGTIN
		TotalOpenQuantity 								is like Quantity	
		TotalExternalCost	 							is an InternationalCost
		NewUnitCost										is like UnitCost
		IntransitAndReceivingDocumentType				is like InventoryDocumentType 
		IntransitAndReceivingDocumentNumber				is an InventoryTransaction
		IntransitTransferDocumentNumber					is an InventoryTransaction
		IntransitAndReceivingWarehouseShipment  		is like WarehouseShipment 
		IntransitAndReceivingLineNumber 				is like LineNumber
		IntransitAndReceivingComponentSequence 			is like InventorySequence 
        IntransitAndReceivingLine		  				is like InventoryTransactionLine
        ReceivingQuantity                       		is like Quantity
        ReceivingBin									is like Bin
		TransientQuantityValue							is like Quantity
			derive value from DerivedQuantity
			precision is Item.NumberOfDecimalsQuantity
		TransientUnitCostValue							is a UnitCost
			derive value from DerivedUnitCost
			precision is Item.NumberOfDecimalsCost
		TransientUnitCostValueInStockUOM				is a UnitCost
			derive value from DerivedUnitCostInStockUOM
			precision is Item.NumberOfDecimalsCost
		
		TransientUnitCostValueItemLocationTransactionTab is a UnitCost
			derive value from DerivedUnitCostItemLocationTransactionTab
			precision is Item.NumberOfDecimalsCost

		LocationStockUOMRounded							is Boolean
		TransientDetailTransfer							is Boolean
		TransientSecondayQuantityValue					is like Quantity
			derive value from DerivedSecondaryQuantity
			precision is Item.NumberOfDecimalsQuantity
		BypassUnitAndAmountEdit
			derive value from true
		BypassActiveCodeBlockEdit	
		TransMatchedQuantity 							is a Quantity					
		TransReceivedQuantity 							is a Quantity						
		TransOpenMatchQuantity 							is a Quantity			

		TransientAccountingEntity						is an AccountingEntity
			derive value from Company.AccountingEntity
			
		TransientPreciseUnitCost						is Unsigned Decimal size 21.8
			default label is "<DerivedUnitCostLabel>"
			derive value from DerivedPreciseUnitCost
			precision is Item.NumberOfDecimalsCost
		TransientUsedQuantity                           is a Quantity

		TransientGLCalendarPeriod is a GeneralLedgerCalendarPeriod	
			derive value from GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod


		TransientBypassUnitCost							is Boolean

	Context Fields
		AuditDateRange						is a DateRange
    

	Local Fields
	
		LocalSkipTransactionCreate						is Boolean
		LocalDoRounding						  			is Boolean
		LocalCatchWeightItem				  			is Boolean
		LocalUseLastIssue								is Boolean
		LocalQuantityConversionCheck					is Boolean      
		LocalInputQuantity								is like Quantity	
		LocalAlternateItemLocationQuantity				is like Quantity	
		LocalAlternateStockOnHandQuantity				is like Quantity   
		LocalOutputQuantity								is like Quantity	
		LocalQuantityTotal								is like Quantity	
		LocalQuantity						  			is like Quantity	
		LocalQuantityOrSecondaryQuantity				is like Quantity	
		LocalInspectionHoldQuantity						is like Quantity
		LocalGlobalInspectionHoldQuantity				is like Quantity
		LocalGlobalCatchweightInspectionHoldQuantity	is like Quantity
		LocalStockOnHandAvailableQuantity	  			is like Quantity	
		LocalStockOnHandAllocatedQuantity     			is like Quantity	
		LocalStockOnHandAllocatedQuantityInSecondaryUOM is like Quantity
		LocalItemLocationAvailableQuantity	  			is like Quantity	
		LocalItemLocationSecondaryAvailableQuantity	 	is like Quantity	
		LocalOriginalQuantity				  			is like Quantity
		LocalQuantityInStockUOM				  			is like Quantity	
		LocalItemLocationQuantity						is like Quantity	
		LocalQuantityInLocationStockUOM					is like Quantity
		LocalHoldQuantity					  			is like Quantity	
		LocalHoldCatchWeightQuantity					is like Quantity
		LocalRemainingQuantity     			  			is like Quantity	
		InventoryCostHistoryQuantity    	  			is like Quantity	
		LocalStockOnHandQuantity 			  			is like Quantity   
		TotalQuantity						  			is like Quantity   
		LocalItemLocationAllocatedQuantity				is like Quantity	
		LocalItemLocationInspectionHoldQuantity			is like Quantity   
		LocalItemLocationInProcessQuantity				is like Quantity   
		LocalAverageCalculatedQuantity		  			is like Quantity	
		LocalAverageCalculatedCatchWeightQuantity		is like Quantity
		InventoryCostHistoryRemainingQuantity 			is like Quantity	
		LocalAdjustmentItemLocationQuantity				is like Quantity
		LocalAdjustmentReceivedQuantity					is like Quantity
		LocalAdjustmentHoldQuantity						is like Quantity
		LocalItemLocationHoldQuantity					is like Quantity
		LocalChangedQuantity				  			is like Quantity	
		LocalChangedSecondaryQuantity		  			is like Quantity	
		LocalStockOnHandHoldQuantityInSecondaryUOM		is like Quantity	
		LocalNewStockOnHandQuantity						is like Quantity	
		LocalStockOnHandSecondaryAvailableQuantity 		is like Quantity	
		LocalStockOnHandSecondaryAllocatedQuantity  	is like Quantity	
		LocalAlternateQuantity							is like Quantity
		LocalSOHDetailQuantity							is like Quantity
		LocalComputedTransactionQuantity				is like Quantity
		LocalSecondarySOHDetailQuantity					is like SecondaryQuantity
		LocalSecondaryQuantity				  			is like SecondaryQuantity 
		TotalSecondaryQuantity				  			is like SecondaryQuantity
		LocalUnitCost									is an UnitCost
		LocalInputUnitCost								is an UnitCost
		LocalOutputUnitCost								is an UnitCost
		LocalItemLocationCost				  			is an InternationalCost 
		LocalLineExternalCost				  			is an InternationalCost	
		InventoryCostHistoryCost              			is an InternationalCost		
		TotalInventoryHistoryCost		   	  			is an InternationalCost
		LocalCurrentExternalCost						is an InternationalCost
		LocalAverageCost           			  			is an InternationalCost	
		LocalGlobalAverageCost           			  	is an InternationalCost	
		LocalNewExternalCost				  			is an InternationalCost	
		LocalAverageOrAddOnCost				  			is an InternationalCost
		LocalGlobalAverageOrAddOnCost		  			is an InternationalCost
		LocalUnitOrAddOnCost				  			is an InternationalCost	
		LocalAddOnCost						  			is an InternationalCost 
		LocalAdjustmentAverageCost						is an InternationalCost
		LocalPreciseUnitCost							is Unsigned Decimal size 21.8
			precision is Item.NumberOfDecimalsCost
				round to precision
		LocalBaseUnitCost								is a UnitCost
		LocalTransactionUnitCost						is a UnitCost

		LocalTransactionUOM					  			is like UnitOfMeasure	
		LocalOriginalTransactionUOM					  	is like UnitOfMeasure 
		LocalTransationCounter				  			is Numeric size 6
		UOMCalculation
		LocalManufacturerCode				  			is Alpha size 4
		LocalManufacturerDivision			  			is Alpha size 4
		LocalShipToFacility								is like ShipToFacility
		LocalVariancePercent							is Decimal size 5.2						
		LocalDetailCreatedForABin						is Boolean
		LocalTransactionCurrency						is like Currency
		LocalOverrideOffsetAccount						is a FinanceCodeBlockFull
        LocalCurrencyTable             		  			is a CurrencyTable
        LocalCurrencyUnitCost                 			is a UnitCostCurrencyExchange 
        LocalLot							  			is like ItemLot
        LocalSublot							  			is like Sublot
        LocalSerial										is like ItemSerialNumber
        NewInventoryTransactionLine           			is an InventoryTransactionLine view
        RoundedValue                                                                      
		LocalCreateReturnFromWizard						is Boolean

		LocalGLFinanceCodeBlock							is a TransactionCodeBlock	
        LocalGLBaseAmount                               is an InternationalAmount          
		LocalGLTranAmount                               is an InternationalAmount
        LocalUnitCostAmount								is an InternationalAmount
        LocalAddOnchargeAmount							is an InternationalAmount
        LocalStockUnitCostAmount						is an InternationalAmount
        LocalStockAddOnChargeAmount						is an InternationalAmount
		LocalVariableBaseAmount							is an InternationalAmount
		LocalVariableTransactionAmount					is an InternationalAmount
		LocalStockOnHandAmount							is an InternationalAmount
		LocalVariableAmount								is an InternationalAmount
		LocalTotalDistributionAmount					is an InternationalAmount
		LocalDirectTransferToStandard					is Boolean

		LocalPostingType								is AlphaUpper size 2
            States
                Inventory           value is "I1"
                Offset              value is "O1"
                RNIExpenseAccount   value is "E1"
                ReceivedNotInvoiced value is "RN"
                MatchedNotReceived  value is "MN"
                AddOnCost           value is "A"



		LocalOriginatingTransactionFound				is Boolean
		LocalOriginatingTransactionDocument				is like InventoryTransaction
		LocalOriginatingTransactionLine					is like InventoryTransactionLine
		ValidFuturePeriod								is Boolean
		ValidPeriod										is Boolean
		LoopCounter										is Numeric 2
		I9												is Numeric 2
		LocalTransactionPeriod							is Numeric 2
		LocalYearSave									is Year
		LocalFutureYear									is Year
		LocalQuarterSave								is a Quarter
		LocalQuarter									is a Quarter
		LocalUsageQuantity								is a Quantity
		LocalUsageCost									is a UnitCost
		LocalBeginningStockOnHandQuantity				is a Quantity
		LocalBeginningStockOnHandExtendedCost			is an InternationalAmount 
		LocalGeneralLedgerSystemCode 					is a GeneralLedgerSystemCode
		LocalPostingDate 								is a PostingDate
		LocalBurdenCode									is a BurdenCode
		LocalAddOnCharge								is an AddOnCharge
		LocalAddOnChargeUnitCost						is an InternationalCost
		LocalAocAccount									is a TransactionCodeBlock
		LocalTotalAddOnChargeUnitCost					is an InternationalAmount	
		LocalTotalAOCUnitCostInTransactionCurrency 		is an InternationalAmount
		LocalTitle 				      					is Alpha size 255
		ActionCode				      					is Alpha size 1
			States
				Create  value is "C"
				Update	value is "U"
				Delete	value is "D"
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		LocalItemType									is an ItemType
		LocalCurrencyTransactionUnitCost				is an InternationalCost
		LocalGLCategoryIssueAccount						is a FinanceCodeBlock
		LocalOffsetUnitCost								is like UnitCost
		LocalOffsetUnitCostInTransactionCurrency		is like UnitCost
		LocalTransactionDate							is Date
		LocalOverrideCreditAccount						is a FinanceCodeBlockFull
		CurrentStockOnHandQuantity                      is a Quantity
		LocalAverageCostComputed                        is an InternationalCost
		LocalPeriod                                     is Numeric 2
		LocalComputedAverageCost						is Boolean
		LocalCurrentPeriodDate							is Date
		LocalNumberOfDays								is Numeric 3
		LocalPeriodCount								is Numeric 2
		LocalTotalSOHQuantity							is a Quantity
		LocalUsageHistoryYear							is a Year
		LocalAverageStockOnHand							is a Quantity
		LocalTotalUDIQuantity							is a Quantity
		LocalComputeQuantity							is like Quantity
		LocalUnitOfMeasure								is like UnitOfMeasure

		LocalHasError									is Boolean
		LocalError										is AlphaUpper 200
		LocalErrorLevel									is Numeric 2
		LocalBODTrigger									is Boolean
		LocalRunGroup									is like RunGroup
		LocalInventoryTransactionImport					is like InventoryTransactionImport
		LocalCompany									is like InventoryCompany
		LocalInventoryDocumentType						is like InventoryDocumentType
		LocalReleaseFromInterface						is Boolean
		LocalIntransitTransferCompany					is like InventoryCompany
		LocalIntransitTransferLocation					is like InventoryLocation
		LocalIntransitTransferDocumentNumber			is like InventoryTransaction
		DoDebug											is Boolean
		LocalReturnLocation								is like InventoryLocation
		LocalReturnTransaction							is like InventoryTransaction

		LocalASNDocumentType							is Alpha size 20
		LocalInventoryLocation							is AlphaUpper size 50
		LocalRequestingLocation							is like InventoryLocation
		LocalAccountingEntity							is Alpha size 100
		LocalDocNbrOut									is Alpha size 30
		LocalShipmentLineCount							is Numeric size 9
		LocalTriggerFrom								is Alpha size 100 
		NativeLPLBODTrigger								is Boolean
		LocalMainUserTemplate							is Alpha size 250



		LocalLineVariationID							is Alpha size 25
		LocalNativeLPLBODTrigger						is Boolean
		LocalConfigurationParameter						is Alpha size up to 200

	Rule Blocks	


		TriggerInventoryTransactionRules
			trigger PayablesService.InventoryTransactionService PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from InventoryTransactionLine
					include persistent fields from InventoryLocation
					include persistent fields from InventoryTransaction.FromToCompanyLocation.RequestingLocation
					include persistent fields from InventoryTransaction
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					InventoryTransactionLine.InventoryTransaction.InventoryDocumentType
						variable name is InventoryDocumentType
					Company.AccountingEntity
						variable name is AccountingEntity
					InventoryTransaction.bod id.VariationID
						variable name is VariationID
					InventoryTransaction.FromToCompanyLocation.FromToLocation.Name
						variable name is FromToLocationName
		
		TriggerBRInventoryTransactionRules
			trigger "BRInventoryTransactionService" PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from InventoryTransactionLine
					include persistent fields from InventoryTransaction
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					InventoryTransactionLine.InventoryTransaction.InventoryDocumentType
						variable name is InventoryDocumentType
					Company.AccountingEntity
						variable name is AccountingEntity
					InventoryTransaction.bod id.VariationID
						variable name is VariationID
					Company
						variable name is LawsonCompany
						
		UnitCostDefaultingLogic										
			if (UnitCost not entered
			and !ItemLocation.NoCharge)
				if (UseLastIssueCost)
					if (!InventoryTransaction.IsInventoryReceipt)   
			 			if (ItemLocation.LastIssueCost entered)                    
							default to DerivedLastIssueCost
							if (UnitCost entered)
								initialize UseLastIssueCost
						else
							if (not TransientBypassUnitCost) 
								required
									"CannotDefaultUnitCost;MustEnterUnitCost"
				else		
					if (!InventoryTransaction.IsInventoryIssues)
						if (Company.CostingMethod.StandardCosting)
							if (ItemLocation.StandardCost entered)
								default to DerivedStandardUnitCost	
							else
								if (not TransientBypassUnitCost) 
									required
										"CannotDefaultUnitCost;MustEnterUnitCost"
						else		
						if	(ItemLocation.LastReceiptCost entered)
							default to DerivedLastReceiptCost
						else
						if (InventoryTransaction.IsInventoryReceipt)
							if (ItemLocation.StandardCost entered)
								default to DerivedStandardUnitCost
							else
								if (not TransientBypassUnitCost) 
									required
										"MustEnterUnitCost"	
						else 
							if (not TransientBypassUnitCost)
								required
									"CannotDefaultUnitCost;MustEnterUnitCost"					


		ConversionOfQuantityAndUnitCostToStock 

			initialize UOMCalculation
			UOMCalculation.InputUOM							= TransactionUOM
			UOMCalculation.InputToUOM						= StockUOM
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.InputUnitCost					= LocalInputUnitCost
			UOMCalculation.InputUOMConversion				= TransactionUOMMultiplier
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			UOMCalculation.DoRounding						= LocalDoRounding
			LocalOutputQuantity								= UOMCalculation.OutputQuantity		
			LocalOutputUnitCost								= UOMCalculation.OutputUnitCost	     





		
		ConversionOfQuantityToSecondaryUOM
			initialize UOMCalculation
			UOMCalculation.InputUOM							= TransactionUOM
			UOMCalculation.InputToUOM						= SecondaryUOM
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity
		
		ConversionOfQuantityFromSecondaryUOMToStockUOM
			initialize UOMCalculation
			UOMCalculation.InputUOM							= SecondaryUOM
			UOMCalculation.InputToUOM						= TransactionUOM
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity				

		ConversionOfItemLocationQuantityIntoAlternate
			initialize UOMCalculation
			UOMCalculation.InputUOM							= Item.StockUOM
			UOMCalculation.InputToUOM						= TransactionUOM
			UOMCalculation.InputToUOMConversion				= TransactionUOMMultiplier
			UOMCalculation.InputQuantity					= LocalInputQuantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity	

		UnitCostDefaultCalculation
			initialize UOMCalculation
			UOMCalculation.InputUOM							= Item.StockUOM
			UOMCalculation.InputToUOM						= TransactionUOM
			UOMCalculation.InputUnitCost					= LocalUnitCost
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
												      												
		ValueOfUOM
			if (IsTrackedInAndAlternateStockUOM							
			and not HasItemLocationStockUOM)
				LocalTransactionUOM = TransactionUOM
			else
				LocalTransactionUOM = StockUOM

		ConvertQuantityToStockOrAlternate 
			initialize LocalOriginalQuantity
			initialize LocalInputQuantity
			initialize LocalOutputQuantity
			initialize LocalQuantity
			initialize LocalAlternateItemLocationQuantity
			initialize LocalAlternateStockOnHandQuantity
			
			if (HasItemLocationStockUOM)
				if (Status.Unreleased)
					if (InventoryTransaction.IsInventoryBinTransfer)
						LocalStockOnHandQuantity			= StockOnHandDetailRel.StockOnHandQuantityInLocationStockUOM 
					else	
						LocalStockOnHandQuantity			= ItemLocation.StockOnHandQuantityInLocationStockUOM 
				else
					LocalStockOnHandQuantity				= StockOnHandQuantityInLocationStockUOM 

				if (DerivedLocationStockUOM not = TransactionUOM) 
					include ConversionOfItemLocationQuantityIntoAlternate
					initialize UOMCalculation
					UOMCalculation.InputUOM					= DerivedLocationStockUOM
					UOMCalculation.InputToUOM				= TransactionUOM
					UOMCalculation.InputQuantity			= LocalStockOnHandQuantity
					UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
					LocalAlternateStockOnHandQuantity		= UOMCalculation.OutputQuantity	
				else
					LocalAlternateStockOnHandQuantity		= LocalStockOnHandQuantity


				if (Status.Unreleased)
					LocalItemLocationQuantity				= LocalStockOnHandQuantity
				else
					LocalItemLocationQuantity				= LocalStockOnHandQuantity - QuantityInLocationStockUOM 







				if (Status.Unreleased)
					if (IsIssuesOrTransfer
					or  InventoryTransaction.IsInventoryBinTransfer
					or  InventoryTransaction.IsShipment)
						LocalQuantity			        = Quantity * -1
					else 
						LocalQuantity					= Quantity

					if (StockUOM not = DerivedLocationStockUOM)
						UOMCalculation.InputUOM    	 		= TransactionUOM
						UOMCalculation.InputToUOM  	 		= DerivedLocationStockUOM
						UOMCalculation.InputQuantity 		= LocalQuantity
						UOMCalculation.Method      	 		= UOMCalculation.Method.ConvertToAlternate
						LocalQuantity  						= UOMCalculation.OutputQuantity

					LocalQuantityInStockUOM				    = Quantity * TransactionUOMMultiplier
			else		
			if  (HasUnequalTransactionAndStockUOM)

				if (Status.Unreleased)
					if (InventoryTransaction.IsInventoryBinTransfer)
						LocalInputQuantity						= StockOnHandDetailRel.StockOnHandQuantity
						include ConversionOfItemLocationQuantityIntoAlternate
						LocalAlternateItemLocationQuantity		= LocalOutputQuantity
					else
						LocalInputQuantity						= ItemLocation.StockOnHandQuantity
						include ConversionOfItemLocationQuantityIntoAlternate
						LocalAlternateItemLocationQuantity		= LocalOutputQuantity
				else
					LocalInputQuantity							= StockOnHandQuantity 
					include ConversionOfItemLocationQuantityIntoAlternate
					LocalAlternateStockOnHandQuantity			= LocalOutputQuantity				

				LocalInputQuantity 							= Quantity
				include ConversionOfQuantityAndUnitCostToStock 
				LocalQuantityInStockUOM				    	= LocalOutputQuantity

				LocalInputQuantity							= Quantity
				include ConversionOfItemLocationQuantityIntoAlternate
				LocalAlternateQuantity						= LocalOutputQuantity

				if (IsTrackedInAndAlternateStockUOM)
					if (IsIssuesOrTransfer
					or  InventoryTransaction.IsInventoryBinTransfer
					or  InventoryTransaction.IsShipment)
						LocalQuantity			        	= Quantity * -1
					else 
						LocalQuantity						= Quantity
						
					if (Status.Unreleased)
						LocalItemLocationQuantity			= LocalAlternateItemLocationQuantity
					else
						LocalItemLocationQuantity			= LocalAlternateStockOnHandQuantity - LocalAlternateQuantity

				else  	
					if (IsIssuesOrTransfer
					or  InventoryTransaction.IsInventoryBinTransfer
					or  InventoryTransaction.IsShipment)
						LocalQuantity						= LocalQuantityInStockUOM * -1
					else
						LocalQuantity						= LocalQuantityInStockUOM		
							
					if (Status.Unreleased)
						LocalItemLocationQuantity			= ItemLocation.StockOnHandQuantity
					else
						LocalItemLocationQuantity			= StockOnHandQuantity - Quantity


			else   
				LocalQuantityInStockUOM						= Quantity
				if (Status.Unreleased)
					if (InventoryTransaction.IsInventoryBinTransfer)
						include ValueOfUOM
						LocalItemLocationQuantity			= StockOnHandDetailRel.StockOnHandQuantity
					else	
						LocalItemLocationQuantity			= ItemLocation.StockOnHandQuantity
				else
					LocalItemLocationQuantity				= StockOnHandQuantity - Quantity

				if (Item.IsCatchWeightItem)		
					LocalSecondaryQuantity 						= SecondaryQuantity
					if (IsIssuesOrTransfer
					or  InventoryTransaction.IsInventoryBinTransfer
					or  InventoryTransaction.IsShipment)
		   				LocalSecondaryQuantity	    			= SecondaryQuantity * -1
				if (IsIssuesOrTransfer
				or  InventoryTransaction.IsInventoryBinTransfer
				or  InventoryTransaction.IsShipment)
					LocalQuantity								= Quantity * -1
				else
					LocalQuantity								= Quantity
		
		ItemForSufficientStockOnHandQuantityValidation		
			if (ItemLocation.BinTracked)		
				constraint (HasSufficientStockOnHandAvailableQuantity)
					"<DerivedMessageForBinTrackedStockOnHandQuantity>"
			else
				if (ItemLocation.IsNotSerialTracked)				
					if (!IsLotTrackedAtIssueForIssuesOrTransfer)
						constraint (HasSufficientStockOnHandAvailableQuantity)
							"<DerivedMessageForNonBinTrackedStockOnHandQuantity>"
				
		CalculateStockOnHandDetailQuantity
			if (TransactionUOM = LocalTransactionUOM)
				if (Item.IsCatchWeightItem)
                    LocalStockOnHandAvailableQuantity   += StockOnHandDetailRel.CatchWeightAvailableQuantity 
                    LocalStockOnHandAllocatedQuantity   += StockOnHandDetailRel.DerivedAllocatedCatchWeightQuantity 
				else
					LocalStockOnHandAvailableQuantity 	+= ItemLocation.StockOnHandQuantity - ItemLocation.AllocatedQuantity - ItemLocation.InProcessQuantity
					if (not InventoryTransaction.InventoryDocumentType.VendorReturn)	
 						LocalStockOnHandAvailableQuantity -= ItemLocation.InspectionHoldQuantity
 					LocalStockOnHandAllocatedQuantity	+= ItemLocation.AllocatedQuantity
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM    	 		= LocalTransactionUOM
				UOMCalculation.InputToUOM  	 		= TransactionUOM
				UOMCalculation.InputToUOMConversion = TransactionUOMMultiplier
				UOMCalculation.InputQuantity 		= StockOnHandDetailRel.AvailableQuantity
				UOMCalculation.Method      	 		= UOMCalculation.Method.ConvertToAlternate
				LocalStockOnHandAvailableQuantity  += UOMCalculation.OutputQuantity
				
			if (Item.IsCatchWeightItem)	
				LocalStockOnHandSecondaryAvailableQuantity 	+= StockOnHandDetailRel.SecondaryAvailableQuantity
				LocalStockOnHandSecondaryAllocatedQuantity  += StockOnHandDetailRel.AllocatedQuantity
			
		ValidateStockOnHandDetailQuantity			
			initialize LocalCatchWeightItem
			include ConvertQuantityToStockOrAlternate
			LocalQuantityOrSecondaryQuantity = Quantity	
			if (DoDebug)
				display "ICTL:LocalQuantityOrSecondaryQuantity:<LocalQuantityOrSecondaryQuantity>"
				display "ICTL:LocalStockOnHandAvailableQuantity:<LocalStockOnHandAvailableQuantity>"
				display "ICTL:LocalStockOnHandAllocatedQuantity:<LocalStockOnHandAllocatedQuantity>"					
			include ItemForSufficientStockOnHandQuantityValidation								
			if (Item.IsCatchWeightItem)
				LocalCatchWeightItem = true
				LocalQuantityOrSecondaryQuantity  = LocalSecondaryQuantity
				LocalStockOnHandAvailableQuantity = LocalStockOnHandSecondaryAvailableQuantity 
				LocalStockOnHandAllocatedQuantity = LocalStockOnHandSecondaryAllocatedQuantity 
				if (DoDebug)
					display "ICTL:Secondary:LocalQuantityOrSecondaryQuantity:<LocalQuantityOrSecondaryQuantity>"
					display "ICTL:Secondary:LocalStockOnHandAvailableQuantity:<LocalStockOnHandAvailableQuantity>"
					display "ICTL:Secondary:LocalStockOnHandAllocatedQuantity:<LocalStockOnHandAllocatedQuantity>"
				include ItemForSufficientStockOnHandQuantityValidation
		
		DecreaseInventoryCostHistory								
		
			InventoryCostHistoryRemainingQuantity = each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity	
			if (LocalRemainingQuantity <= InventoryCostHistoryRemainingQuantity)
				InventoryCostHistoryQuantity 	= LocalRemainingQuantity
			else
				InventoryCostHistoryQuantity	= InventoryCostHistoryRemainingQuantity

			InventoryCostHistoryCost 			= InventoryCostHistoryQuantity * each.UnitCost
			TotalInventoryHistoryCost 		   += InventoryCostHistoryCost
			
			invoke UpdateFromTransaction each
				invoked.PrmUsedQuantity 	    = InventoryCostHistoryQuantity				
			
			if (InventoryCostHistoryQuantity entered
			and InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)
				if (LocalAdjustmentAverageCost entered)
					LocalItemLocationCost = LocalAdjustmentAverageCost
				else
					LocalItemLocationCost = LocalAverageCost
				LocalUnitOrAddOnCost  = each.UnitCost
				include ComputeAverageAndAddOnCostLessAdjustment
				LocalAverageCost      = LocalAverageOrAddOnCost
				if (LocalAddOnCost entered)
					LocalItemLocationCost = LocalAddOnCost
				else
					LocalItemLocationCost = ItemLocation.AverageAddOnCost
				LocalUnitOrAddOnCost  = AddOnChargeUnitCost			 									
				include ComputeAverageAndAddOnCostLessAdjustment
				LocalAddOnCost        = LocalAverageOrAddOnCost	
				
				LocalComputedAverageCost = true		

			LocalRemainingQuantity 			   -= InventoryCostHistoryQuantity		
			if (LocalRemainingQuantity = 0)
				end for each

		UpdateInventoryCostHistory
		
			if (Company.CostingMethod.LastInFirstOut)
				for each InventoryCostHistoryForLifoRel
					include DecreaseInventoryCostHistory
			else
				for each InventoryCostHistoryExceptLifoRel
					include DecreaseInventoryCostHistory
					
		ComputeAverageAndAddOnCostLessAdjustment
			LocalAdjustmentItemLocationQuantity	= ItemLocation.StockOnHandQuantity + LocalAdjustmentReceivedQuantity 
			if (IsCatchWeightItem)
				LocalItemLocationHoldQuantity 	= ItemLocation.InspectionHoldCatchWeightQuantity + LocalAdjustmentHoldQuantity 
			else
				LocalItemLocationHoldQuantity 	= ItemLocation.InspectionHoldQuantity + LocalAdjustmentHoldQuantity 
			
			if (LocalAdjustmentItemLocationQuantity > 0)
				LocalCurrentExternalCost = (LocalAdjustmentItemLocationQuantity - LocalItemLocationHoldQuantity) 
				LocalCurrentExternalCost = LocalCurrentExternalCost * LocalItemLocationCost
				if (LocalCurrentExternalCost < 0)
					initialize LocalCurrentExternalCost				
			else
				initialize LocalCurrentExternalCost					
			LocalComputedTransactionQuantity = InventoryCostHistoryQuantity * -1
			LocalLineExternalCost			= LocalComputedTransactionQuantity * LocalUnitOrAddOnCost
			LocalNewExternalCost   			= LocalLineExternalCost + LocalCurrentExternalCost
			
			LocalNewStockOnHandQuantity 	= LocalAdjustmentItemLocationQuantity - InventoryCostHistoryQuantity
			if (LocalNewStockOnHandQuantity >= 0)
				if (ItemLocation.StockOnHandQuantity < 0)
					LocalAverageOrAddOnCost = LocalUnitOrAddOnCost
				else
				if ((Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > (ItemLocation.InspectionHoldCatchWeightQuantity - LocalAdjustmentHoldQuantity))
				or (not Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > (ItemLocation.InspectionHoldQuantity - LocalAdjustmentHoldQuantity)))
					LocalAverageOrAddOnCost = (LocalNewExternalCost / (LocalNewStockOnHandQuantity - LocalItemLocationHoldQuantity))
				
		ComputeAverageAndAddOnCost
			if (DoDebug)
				display "LocalItemLocationCost:<LocalItemLocationCost>:SOH<ItemLocation.StockOnHandQuantity>:LocalUnitOrAddOnCost:<LocalUnitOrAddOnCost>"
			if (ItemLocation.StockOnHandQuantity > 0)
				if (Item.IsCatchWeightItem)
					LocalCurrentExternalCost = ((ItemLocation.StockOnHandQuantity - ItemLocation.InspectionHoldCatchWeightQuantity) * LocalItemLocationCost)
				else
					LocalCurrentExternalCost = ((ItemLocation.StockOnHandQuantity - ItemLocation.InspectionHoldQuantity) * LocalItemLocationCost)	
			
				if (LocalCurrentExternalCost < 0)
					initialize LocalCurrentExternalCost				
			else
				if (ItemLocation.StockOnHandQuantity <=0)
					initialize LocalCurrentExternalCost					
			
			LocalComputedTransactionQuantity = LocalAverageCalculatedQuantity - TransientUsedQuantity
			
			LocalLineExternalCost		= LocalComputedTransactionQuantity * LocalUnitOrAddOnCost
			LocalNewExternalCost   		= LocalLineExternalCost + LocalCurrentExternalCost

			if (InventoryTransaction.IsCostAdjustment)
				LocalNewStockOnHandQuantity 	= ItemLocation.StockOnHandQuantity
			else
				LocalNewStockOnHandQuantity 	= ItemLocation.StockOnHandQuantity + LocalAverageCalculatedQuantity
			
			if (LocalNewStockOnHandQuantity >= 0)
				if (ItemLocation.StockOnHandQuantity < 0)
					LocalAverageOrAddOnCost = LocalUnitOrAddOnCost
				else
				if ((Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > ItemLocation.InspectionHoldCatchWeightQuantity)
				or (not Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > ItemLocation.InspectionHoldQuantity))
					if (Item.IsCatchWeightItem)
						LocalAverageOrAddOnCost = LocalNewExternalCost / (LocalNewStockOnHandQuantity - ItemLocation.InspectionHoldCatchWeightQuantity)
					else
						LocalAverageOrAddOnCost = LocalNewExternalCost / (LocalNewStockOnHandQuantity - ItemLocation.InspectionHoldQuantity)
		
		ComputeGlobalAverageAndAddOnCost
			if (DoDebug)
				display "GlobalAverageCostCalculation"
				display "LocalItemLocationCost:<LocalItemLocationCost>:SOH<ItemLocation.StockOnHandQuantity>:LocalUnitOrAddOnCost:<LocalUnitOrAddOnCost>"
				display "GlobalStockOnHand:<DerivedStockOnHandQuantity>"
				display "LocalAverageCalculatedQuantity:<LocalAverageCalculatedQuantity>"
			
			initialize LocalGlobalInspectionHoldQuantity
			initialize LocalGlobalCatchweightInspectionHoldQuantity
			for each AllLocationsForAnItemRel
				LocalGlobalInspectionHoldQuantity += each.InspectionHoldQuantity
				LocalGlobalCatchweightInspectionHoldQuantity += each.InspectionHoldCatchWeightQuantity
			

			if (DerivedStockOnHandQuantity > 0)
				if (Item.IsCatchWeightItem)
					LocalCurrentExternalCost = ((DerivedStockOnHandQuantity - LocalGlobalCatchweightInspectionHoldQuantity) * LocalItemLocationCost)
				else
					LocalCurrentExternalCost = ((DerivedStockOnHandQuantity - LocalGlobalInspectionHoldQuantity) * LocalItemLocationCost)	
				if (LocalCurrentExternalCost < 0)
					initialize LocalCurrentExternalCost				
			else
				if (DerivedStockOnHandQuantity <=0)
					initialize LocalCurrentExternalCost					

			LocalComputedTransactionQuantity = LocalAverageCalculatedQuantity - TransientUsedQuantity





			LocalLineExternalCost		= LocalComputedTransactionQuantity * LocalUnitOrAddOnCost

			LocalNewExternalCost   		= LocalLineExternalCost + LocalCurrentExternalCost

			if (InventoryTransaction.IsCostAdjustment)

				LocalNewStockOnHandQuantity 	= DerivedStockOnHandQuantity
			else

				LocalNewStockOnHandQuantity 	= DerivedStockOnHandQuantity + LocalAverageCalculatedQuantity
			
			if (LocalNewStockOnHandQuantity >= 0)
				if (DerivedStockOnHandQuantity < 0)
					LocalGlobalAverageOrAddOnCost = LocalUnitOrAddOnCost
				else
				if ((Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > LocalGlobalCatchweightInspectionHoldQuantity)
				or  (not Item.IsCatchWeightItem and LocalNewStockOnHandQuantity > LocalGlobalInspectionHoldQuantity))






					if (Item.IsCatchWeightItem)
						LocalGlobalAverageOrAddOnCost = LocalNewExternalCost / (LocalNewStockOnHandQuantity - LocalGlobalCatchweightInspectionHoldQuantity)
					else
						LocalGlobalAverageOrAddOnCost = LocalNewExternalCost / (LocalNewStockOnHandQuantity - LocalGlobalInspectionHoldQuantity)

		GetAverageAndAddOnCost 	
										
			LocalItemLocationCost = ItemLocation.AverageCost
			LocalUnitOrAddOnCost  = UnitCost
			include ComputeAverageAndAddOnCost
			LocalAverageCost      = LocalAverageOrAddOnCost

			LocalItemLocationCost = ItemLocation.AverageAddOnCost
			LocalUnitOrAddOnCost  = AddOnChargeUnitCost			 									
			include ComputeAverageAndAddOnCost
			LocalAddOnCost        = LocalAverageOrAddOnCost	

			if (Company.UseGlobalAverageCost)
				LocalItemLocationCost  = ItemLocation.DerivedItemAverageCost
				LocalUnitOrAddOnCost   = UnitCost
				include ComputeGlobalAverageAndAddOnCost
				LocalGlobalAverageCost = LocalGlobalAverageOrAddOnCost
			
			LocalComputedAverageCost = true		
											
		ValidateOngoingCalculation
			constraint (not IsOngoingAverageCalculation)
				"Global_\Average_\CostCalculationIsInProgress._\PleaseTryAgain."

		CreateIntransitAndReceivingTransfer		
			
			increment ItemLocation.TransactionCounter
			LocalTransationCounter = ItemLocation.TransactionCounter 

			initialize RoundedValue
			RoundedValue.RoundInput			= UnitCost
			RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
			RoundedValue.RoundTo			= DerivedCostRoundTo
			RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf

			UnitCost 						= RoundedValue.RoundResult


			initialize RoundedValue
			RoundedValue.RoundInput			= ToCompanyBaseUnitCost
			RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
			RoundedValue.RoundTo			= DerivedCostRoundTo
			RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
			ToCompanyBaseUnitCost 			= RoundedValue.RoundResult

			invoke Unreleased.Create InventoryTransactionLine
				assign result to NewInventoryTransactionLine
				invoked.TransactionSystemCode							= "IC"
				invoked.Company											= InventoryTransaction.FromToCompanyLocation.FromToCompany
				invoked.InventoryLocation								= InventoryTransaction.FromToCompanyLocation.FromToLocation
				invoked.InventoryTransaction							= IntransitAndReceivingDocumentNumber
				invoked.FromToCompanyLocationBin.FromToCompany			= Company
				invoked.FromToCompanyLocationBin.FromToLocation 		= InventoryLocation
				invoked.TransactionCounter								= ItemLocation.TransactionCounter
				invoked.OriginalQuantity								= Quantity
				invoked.OpenQuantity									= Quantity
				invoked.SecondaryQuantity								= SecondaryQuantity
				invoked.SecondaryUOM									= SecondaryUOM
				invoked.SecondaryUOMMultiplier							= SecondaryUOMMultiplier
				invoked.OriginatingTransaction							= OriginatingTransaction
				initialize invoked.StockOnHandQuantity
				initialize invoked.InventoryTransactionLine.WarehouseShipment
				invoked.InventoryTransactionLine.LineNumber		        = InventoryTransactionLine.LineNumber
				invoked.Item											= Item
				invoked.ItemEntryMethod									= ItemEntryMethod
				invoked.EAMWorkOrder									= EAMWorkOrder
				invoked.EAMWorkOrderActivity							= EAMWorkOrderActivity
				if (FromCurrency  != ToCurrency)
					invoked.ToCompanyBaseUnitCost						= UnitCost
					invoked.UnitCost									= ToCompanyBaseUnitCost
				else
					invoked.UnitCost	 								= UnitCost
					initialize invoked.ToCompanyBaseUnitCost
				if (InventoryTransaction.IntransitTransfer)
					initialize invoked.TransientQuantityValue 
					initialize invoked.Quantity
					initialize invoked.MultipleBins
					if (FromToCompanyItemLocationRel.PreferredBin entered)

						invoked.Bin									= FromToCompanyItemLocationRel.PreferredBin

					invoked.FromDocument 								= IntransitTransferDocumentNumber
					invoked.IntransitReceivingStatus					= 1
					invoked.GlobalTradeItemNumber						= ItemGTIN
					if (HasUnequalTransactionAndStockUOM)  
						invoked.ToUOM									= TransactionUOM
						invoked.TransactionUOM                          = TransactionUOM
					else
						invoked.ToUOM									= StockUOM
						invoked.TransactionUOM							= TransactionUOM
					invoked.TransactionUOMMultiplier					= TransactionUOMMultiplier
				else
					invoked.Quantity									= Quantity
					invoked.Bin											= FromToCompanyLocationBin.FromToBin
					invoked.TransactionUOM							    = TransactionUOM
					invoked.TransactionUOMMultiplier					= TransactionUOMMultiplier
					initialize invoked.MultipleBins		
					invoked.FromToCompanyLocationBin.FromToBin			= Bin
					invoked.IntransitReceivingStatus					= 0
					invoked.GeneralLedgerDate							= InventoryTransaction.NewInventoryTransaction.GeneralLedgerDate
					invoked.ActualTime									= InventoryTransaction.NewInventoryTransaction.TransactionDate
					invoked.FromDocument 								= IntransitTransferDocumentNumber				
					initialize invoked.OriginalQuantity
					initialize invoked.OpenQuantity


			
			IntransitAndReceivingLineNumber								= NewInventoryTransactionLine.InventoryTransactionLine.LineNumber
			IntransitAndReceivingLine          							= NewInventoryTransactionLine.InventoryTransactionLine
			

			if (NewInventoryTransactionLine.IsBinTrackedItemWithSingleBin
			and not LineDetailExists)
				invoke Unreleased.QuickCreate InventoryTransactionLineDetail
					invoked.Company										= NewInventoryTransactionLine.Company
					invoked.InventoryLocation							= NewInventoryTransactionLine.InventoryLocation
					invoked.InventoryTransaction						= NewInventoryTransactionLine.InventoryTransaction
					invoked.TransactionSystemCode						= NewInventoryTransactionLine.TransactionSystemCode
					invoked.InventoryTransactionLine					= NewInventoryTransactionLine.InventoryTransactionLine
					invoked.Item										= NewInventoryTransactionLine.Item
					invoked.UnitOfMeasure								= NewInventoryTransactionLine.TransactionUOM
					if (NewInventoryTransactionLine.InventoryTransaction.IsInventoryBinTransfer)
						invoked.Bin                                     = NewInventoryTransactionLine.FromToCompanyLocationBin.FromToBin
					else
						invoked.Bin										= NewInventoryTransactionLine.Bin
					initialize invoked.OpenQuantity
					initialize invoked.OriginalQuantity
					invoked.Quantity									= NewInventoryTransactionLine.Quantity 
					invoked.SecondaryQuantity							= NewInventoryTransactionLine.SecondaryQuantity
				
		CreateReceivingTransfer
			if (Quantity entered)
				invoke Unreleased.Create InventoryTransactionLine
					assign result to NewInventoryTransactionLine
					fill in fields from this instance
						except invoked.TransactionSequence
						except invoked.StockOnHandQuantity
						except invoked.InventoryTransactionLine.WarehouseShipment
					invoked.InventoryTransaction						= IntransitAndReceivingDocumentNumber
					invoked.IntransitReceivingStatus					= 0

					invoked.TransactionCounter							= ItemLocation.TransactionCounter
					invoked.GeneralLedgerDate							= InventoryTransaction.NewInventoryTransaction.GeneralLedgerDate
					invoked.ActualTime									= InventoryTransaction.NewInventoryTransaction.TransactionDate
					invoked.OffsetAccount			 	  		 		= ItemLocation.GeneralLedgerCategory.IntransitAccount
					
				IntransitAndReceivingLineNumber							= NewInventoryTransactionLine.InventoryTransactionLine.LineNumber
				IntransitAndReceivingLine          						= NewInventoryTransactionLine.InventoryTransactionLine
				
				if (InventoryUDIDetailForWHRel exists) 
					for each InventoryUDIDetailForWHRel
						invoke CreateTransferUDIDetailFromWarehouse each
							fill in fields from each
							invoked.InventoryUDIDetail.InventoryTransactionType = InventoryDocumentType.ReceivingTransfer
				
				if (IsUDIDetailTransaction and TransactionSystemCode.InventoryControl and InventoryUDIDetailForWHRel not exists)
					for each InventoryUDIDetailRel
						invoke CreateUDIDetailForTransfer each
							fill in fields from each
							invoked.Company										= InventoryTransaction.Company
							invoked.InventoryLocation							= InventoryTransaction.InventoryLocation
							invoked.InventoryUDIDetail.InventoryTransactionType	= IntransitAndReceivingDocumentType
							invoked.InventoryUDIDetail.TransactionSystemCode	= TransactionSystemCode.InventoryControl
							invoked.InventoryUDIDetail.DocumentNumberNumeric	= IntransitAndReceivingDocumentNumber
							invoked.InventoryUDIDetail.WarehouseShipment		= IntransitAndReceivingWarehouseShipment
							invoked.InventoryUDIDetail.LineNumber				= IntransitAndReceivingLineNumber
							invoked.InventoryUDIDetail.TransactionSequence		= each.InventoryUDIDetail.TransactionSequence
				else
					for each InventoryTransactionLineDetail set
						if (each.Quantity entered)
							invoke Unreleased.QuickCreate InventoryTransactionLineDetail
								fill in fields from each
									except invoked.OpenQuantity
									except invoked.OriginalQuantity
								invoked.InventoryTransaction								= IntransitAndReceivingDocumentNumber
								invoked.TransactionSystemCode								= "IC"
								invoked.InventoryTransactionLine.LineNumber         		= IntransitAndReceivingLineNumber
								invoked.TransactionDate										= InventoryTransaction.NewInventoryTransaction.TransactionDate		
				
		CreateBinDetailWhenIsBinTrackedAndSingleBin
			initialize DetailCreatedAutomatically
			if (IsBinTrackedItemWithSingleBin)

				if (IsUDIDetailTransaction and TransactionSystemCode.InventoryControl)
					invoke CreateUDIForSingleBin InventoryUDIDetail
						invoked.Company										= Company
						invoked.InventoryLocation							= InventoryLocation
						invoked.InventoryUDIDetail.InventoryTransactionType	= InventoryTransaction.InventoryTransactionType
						invoked.InventoryUDIDetail.TransactionSystemCode	= TransactionSystemCode.InventoryControl
						invoked.InventoryUDIDetail.DocumentNumberNumeric	= InventoryTransaction
						invoked.InventoryUDIDetail.WarehouseShipment		= InventoryTransactionLine.WarehouseShipment
						invoked.InventoryUDIDetail.LineNumber				= InventoryTransactionLine.LineNumber
						invoked.Item										= Item
						invoked.UOM											= TransactionUOM
						if (InventoryTransaction.IsInventoryBinTransfer)
							invoked.Bin                                     = FromToCompanyLocationBin.FromToBin
						else
							invoked.Bin										= Bin
						invoked.Quantity									= Quantity
						invoked.LocalBypassUDIRequired						= true 
				
				invoke Unreleased.QuickCreate InventoryTransactionLineDetail
					invoked.Company										= Company
					invoked.InventoryLocation							= InventoryLocation
					invoked.InventoryTransaction						= InventoryTransaction
					invoked.TransactionSystemCode						= TransactionSystemCode
					invoked.InventoryTransactionLine					= InventoryTransactionLine
					invoked.Item										= Item
					invoked.UnitOfMeasure								= TransactionUOM
					if (InventoryTransaction.IsInventoryBinTransfer)
						invoked.Bin                                     = FromToCompanyLocationBin.FromToBin
					else
						invoked.Bin										= Bin
					initialize invoked.OpenQuantity
					initialize invoked.OriginalQuantity
					invoked.Quantity									= Quantity 
					invoked.SecondaryQuantity							= SecondaryQuantity

		ValidateDetailInBalance

			initialize LocalSecondaryQuantity                                        
			initialize TotalQuantity
			initialize TotalSecondaryQuantity
			for each InventoryTransactionLineDetailsRel
				if (TransactionUOM = each.UnitOfMeasure
				or  Item.IsCatchWeightItem)
					TotalQuantity 				+= each.Quantity
				else
					initialize UOMCalculation
					UOMCalculation.InputUOM    	 = each.UnitOfMeasure
					UOMCalculation.InputToUOM  	 = TransactionUOM
					UOMCalculation.InputToUOMConversion = TransactionUOMMultiplier
					UOMCalculation.InputQuantity = each.Quantity
					UOMCalculation.Method      	 = UOMCalculation.Method.ConvertToAlternate
					TotalQuantity				+= UOMCalculation.OutputQuantity								
				
				if (Item.IsCatchWeightItem)
					TotalSecondaryQuantity 		+= each.SecondaryQuantity
				if (DoDebug)
					display "ICTL:Bin:<each.Bin>"
					display "ICTL:TransactionUOM:<TransactionUOM>:each.UnitOfMeasure:<each.UnitOfMeasure>"
					display "ICTL:TotalQuantity:<TotalQuantity>:Quantity:<Quantity>"
			if (InventoryTransactionLineDetailsRel exists)
				initialize LocalCatchWeightItem	
				if (TotalQuantity	=	Quantity)
					if (TotalSecondaryQuantity	!=	SecondaryQuantity)
						LocalCatchWeightItem = true
					else
						DetailsInBalance     = true
						
			constraint (DetailsInBalance)
				"<DerivedMessageForQuantityOutOfBalance>"


		ValidateIntransitRecevingDetailInBalance
			initialize DetailsInBalance
			initialize LocalCatchWeightItem           						
			initialize LocalSecondaryQuantity
			initialize TotalQuantity
			initialize TotalSecondaryQuantity
			for each InventoryTransactionLineDetailsReceivingCompletedRel
				if (TransactionUOM	= each.UnitOfMeasure
				or  Item.IsCatchWeightItem)
					TotalQuantity  += each.Quantity
				else
					initialize UOMCalculation
					UOMCalculation.InputUOM    	 			= each.UnitOfMeasure
					UOMCalculation.InputToUOM  	 			= TransactionUOM
					UOMCalculation.InputToUOMConversion 	= TransactionUOMMultiplier
					UOMCalculation.InputQuantity 			= each.Quantity
					UOMCalculation.Method      	 			= UOMCalculation.Method.ConvertToAlternate
					TotalQuantity							+= UOMCalculation.OutputQuantity								
				
				if (Item.IsCatchWeightItem)
					TotalSecondaryQuantity 					+= each.SecondaryQuantity
				
			if (InventoryTransactionLineDetailsReceivingCompletedRel exists)
				initialize LocalCatchWeightItem	
				if (TotalQuantity	=	Quantity)
					if (TotalSecondaryQuantity	!=	SecondaryQuantity)
						LocalCatchWeightItem 	 = true
					else
						DetailsInBalance     	 = true
						
			constraint (DetailsInBalance)
				"<DerivedMessageForQuantityOutOfBalance>"




		CreatePurchaseOrderVarianceDistribution
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount
			LocalGLFinanceCodeBlock	 									= OffsetAccount			
			if (Company.CostingMethod.StandardCosting)
				LocalGLBaseAmount		      							= (DerivedUsedQuantityUnitCost * -1)           
				LocalGLTranAmount  										= (DerivedUsedTransactionAmount * -1)
			else
				LocalGLBaseAmount										= ((DerivedUsedQuantityUnitCost + DerivedUsedQuantityAddOnChargeCost) * -1)
				LocalGLTranAmount										= (DerivedUsedQuantityUnitCostInTranCurrency * -1)
			
			if (IsValidTransactionSystemCodes
			and not InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount	  									= LocalGLBaseAmount	
			if (DoDebug)
				display "CPOVD1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
			
			LocalPostingType = LocalPostingType.Offset
			include CreateInventoryTransactionLineDistribution

			LocalGLFinanceCodeBlock	 									= CostVarianceAccount 			               
			LocalGLBaseAmount			    							= (LocalGLBaseAmount * -1)
			if (IsValidTransactionSystemCodes
			and not InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount										= LocalGLBaseAmount	      			
			else
				LocalGLTranAmount 										= (LocalGLTranAmount * -1)	
			if (DoDebug)
				display "CPOVD2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
			LocalPostingType = LocalPostingType.Offset
			include CreateInventoryTransactionLineDistribution		
		
		CreateDistributions
			if (LocalOffsetUnitCost entered)

				LocalPostingType 			= LocalPostingType.Inventory
				LocalGLFinanceCodeBlock 	= LocalOverrideCreditAccount
				LocalGLTranAmount			= DerivedUnitCostInTransactionCurrency * Quantity 
				if (LocalGLTranAmount < 0)
					LocalGLTranAmount 		*= -1
				if (DoDebug)
					display "CD1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				include CreateInventoryTransactionLineDistribution
				if (LocalOffsetUnitCost != UnitCost)
				

					LocalPostingType			= LocalPostingType.Inventory
					LocalGLFinanceCodeBlock		= CostVarianceAccount
					LocalGLTranAmount			= ((DerivedUnitCostInTransactionCurrency - LocalOffsetUnitCostInTransactionCurrency) * Quantity)
					if (DoDebug)
						display "CD2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
					include CreateInventoryTransactionLineDistribution
				

				LocalPostingType 			= LocalPostingType.Offset
				if (LocalOverrideOffsetAccount entered)
					LocalGLFinanceCodeBlock = LocalOverrideOffsetAccount 
				else
					LocalGLFinanceCodeBlock = InventoryAccount
				LocalGLTranAmount			= LocalOffsetUnitCostInTransactionCurrency * Quantity
				if (DoDebug)
					display "CD3:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				include CreateInventoryTransactionLineDistribution
				
			else
			if (!IsNotValidForDistributions
			and Quantity != 0)
				if (DoDebug)
					display "CD4"
				include ValidateAndCreateTransactionLineDistribution
			
			if (TransientUsedQuantity != 0
			and not InventoryTransaction.IsCostAdjustment)
				if (DoDebug)
					display "CD5"
				include CreatePurchaseOrderVarianceDistribution


		UpdateInventoryUsageHistory 
			while (LoopCounter <= Company.NumberOfPeriods
			and    ValidPeriod = false)
				LoopCounter +=1
				if (LoopCounter = 1)
					if (TransactionDate > Company.LastYearEndDate
					and TransactionDate <= Company.YearPeriodStatusArray.YearPeriodStatus[LoopCounter].YearPeriod)
						ValidPeriod		 			= true
						LocalTransactionPeriod 		= LoopCounter
				else
				if (LoopCounter = Company.NumberOfPeriods)
					if (TransactionDate > Company.YearPeriodStatusArray.YearPeriodStatus[LoopCounter].YearPeriod)
						LocalTransactionPeriod 		= 1
						ValidFuturePeriod	 		= true
						ValidPeriod  		 		= true
				else
					if (TransactionDate > Company.YearPeriodStatusArray.YearPeriodStatus[LoopCounter - 1].YearPeriod
					and TransactionDate <= Company.YearPeriodStatusArray.YearPeriodStatus[LoopCounter].YearPeriod)
						ValidPeriod			 		= true
						LocalTransactionPeriod 		= LoopCounter
				
			if (ValidFuturePeriod)
				LocalFutureYear						= Company.CurrentYear + 1 year
				I9									= 1
				if (Company.NumberOfPeriods.12PeriodsPerYearMonthly
				or  Company.NumberOfPeriods.13PeriodsPerYear)
					initialize LocalQuarter
				else
					LocalQuarter					= 1
			else
				if (!ValidPeriod)
					LocalTransactionPeriod			= Company.NumberOfPeriods
					
				if (Company.NumberOfPeriods.12PeriodsPerYearMonthly
				or  Company.NumberOfPeriods.13PeriodsPerYear)
					initialize LocalQuarter
					I9								= LocalTransactionPeriod
				else
				if (LocalTransactionPeriod <= 13)
					LocalQuarter					= 1
					I9								= LocalTransactionPeriod
				else
				if (LocalTransactionPeriod <= 26)
					LocalQuarter					= 2
					I9								= LocalTransactionPeriod - 13
				else
				if (LocalTransactionPeriod <= 39)
					LocalQuarter					= 3
					I9								= LocalTransactionPeriod - 26
				else
					LocalQuarter					= 4
					I9								= LocalTransactionPeriod - 39
				
			if (ValidFuturePeriod)
				LocalYearSave						= LocalFutureYear
				LocalQuarterSave					= LocalQuarter	
			else
				LocalYearSave						= Company.CurrentYear
				LocalQuarterSave					= LocalQuarter	
			
			if (Quantity < 0 
			or  InventoryTransaction.InventoryDocumentType.InventoryIssue
			or  InventoryTransaction.InventoryDocumentType.InventoryReturns
			or  InventoryTransaction.InventoryDocumentType.RequisitionReturn
			or  InventoryTransaction.InventoryDocumentType.Shipment
			or  InventoryTransaction.InventoryDocumentType.CustomerReturn)
			
				LocalUsageQuantity					= Quantity * -1
			else
				LocalUsageQuantity					= Quantity
			LocalUsageCost							= UnitCost * LocalUsageQuantity	
													 
			if (InventoryUsageHistoryRel not exists)                        
                if (Company.NumberOfPeriods.12PeriodsPerYearMonthly)
                    LocalPeriod     = 12
                else 
                if (Company.NumberOfPeriods.13PeriodsPerYear)
                    LocalPeriod     = 13
                else
					if (first InventoryUsageHistoryRecordsRel.InventoryPeriodEndArray.InventoryPeriodEnd[14].PeriodEndQuantity not entered) 
						LocalPeriod = 13
					else
						LocalPeriod = 14            				
			
				LocalBeginningStockOnHandQuantity			= first InventoryUsageHistoryRecordsRel.InventoryPeriodEndArray.InventoryPeriodEnd[LocalPeriod].PeriodEndQuantity
				LocalBeginningStockOnHandExtendedCost 	= first InventoryUsageHistoryRecordsRel.InventoryPeriodEndArray.InventoryPeriodEnd[LocalPeriod].PeriodEndExtendedCost

				invoke Create InventoryUsageHistory
	                invoked.Company           									= Company
	                invoked.InventoryLocation 									= InventoryLocation
	                invoked.Item              									= Item		
	                invoked.InventoryUsageHistory.Year							= LocalYearSave
	                invoked.InventoryUsageHistory.Quarter						= LocalQuarterSave
					invoked.BeginningStockOnHandQuantity						= LocalBeginningStockOnHandQuantity
					invoked.BeginningStockOnHandExtendedCost					= LocalBeginningStockOnHandExtendedCost
					if (InventoryTransaction.InventoryDocumentType.InventoryIssue
					or  InventoryTransaction.InventoryDocumentType.InventoryReturns
					or  InventoryTransaction.InventoryDocumentType.RequisitionReturn)
						invoked.InventoryIssuesArray.InventoryIssues[I9].IssueQuantity		= LocalUsageQuantity 
						invoked.InventoryIssuesArray.InventoryIssues[I9].IssueExtendedCost	= LocalUsageCost
					else
					if  (InventoryTransaction.InventoryDocumentType.Shipment 
					or   InventoryTransaction.InventoryDocumentType.CustomerReturn)
						invoked.InventorySalesArray.InventorySales[I9].SalesQuantity		= LocalUsageQuantity
						invoked.InventorySalesArray.InventorySales[I9].SalesExtendedCost	= LocalUsageCost
					else
					if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
					or  InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
						invoked.InventoryReceiptsArray.InventoryReceipts[I9].ReceiptQty		= LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)
						invoked.InventoryReceiptsArray.InventoryReceipts[I9].ReceiptQty		= Quantity
					else
					if (((InventoryTransaction.InventoryDocumentType.Adjustment
					or    InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment)
					and   Quantity < 0)
					or   (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem
					or    InventoryTransaction.InventoryDocumentType.VendorReturn))							
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentOutQuantity = LocalUsageQuantity
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentOutExtendedCost = LocalUsageCost
					else
					if ((InventoryTransaction.InventoryDocumentType.Adjustment
					or   InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment
					or   InventoryTransaction.InventoryDocumentType.VendorReturnCancel)
					and  Quantity > 0)
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentInQuantity = LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.ReceivingTransfer)	
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferInQuantity		= LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.InventoryTransfer
					or   InventoryTransaction.InventoryDocumentType.DirectTransfer)
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferOutQuantity		= LocalUsageQuantity
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferOutExtendedCost	= LocalUsageCost
			else
				invoke Update InventoryUsageHistoryRel
					if (InventoryTransaction.InventoryDocumentType.InventoryIssue
					or  InventoryTransaction.InventoryDocumentType.InventoryReturns
					or  InventoryTransaction.InventoryDocumentType.RequisitionReturn)
						invoked.InventoryIssuesArray.InventoryIssues[I9].IssueQuantity		+= LocalUsageQuantity
						invoked.InventoryIssuesArray.InventoryIssues[I9].IssueExtendedCost	+= LocalUsageCost
					else
					if (InventoryTransaction.InventoryDocumentType.Shipment
					or  InventoryTransaction.InventoryDocumentType.CustomerReturn)
						invoked.InventorySalesArray.InventorySales[I9].SalesQuantity		+= LocalUsageQuantity
						invoked.InventorySalesArray.InventorySales[I9].SalesExtendedCost	+= LocalUsageCost

					else
					if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
					or  InventoryTransaction.InventoryDocumentType.InventoryReturns
					or  InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
						invoked.InventoryReceiptsArray.InventoryReceipts[I9].ReceiptQty		+= LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)
						invoked.InventoryReceiptsArray.InventoryReceipts[I9].ReceiptQty		+= Quantity
					else
					if (((InventoryTransaction.InventoryDocumentType.Adjustment
					or    InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment)
					and   Quantity < 0)
					or   (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem
					or    InventoryTransaction.InventoryDocumentType.VendorReturn))							
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentOutQuantity += LocalUsageQuantity
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentOutExtendedCost += LocalUsageCost
					else
					if ((InventoryTransaction.InventoryDocumentType.Adjustment
					or   InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment
					or   InventoryTransaction.InventoryDocumentType.VendorReturnCancel)
					and  Quantity > 0)
						invoked.InventoryAdjustmentsArray.InventoryAdjustments[I9].AdjustmentInQuantity += LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.ReceivingTransfer)	
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferInQuantity		+= LocalUsageQuantity
					else
					if (InventoryTransaction.InventoryDocumentType.InventoryTransfer
					or   InventoryTransaction.InventoryDocumentType.DirectTransfer)
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferOutQuantity		+= LocalUsageQuantity
						invoked.InventoryTransfersArray.InventoryTransfers[I9].TransferOutExtendedCost	+= LocalUsageCost
		
		
		ValidateAndCreateTransactionLineDistribution			
			if (InventoryTransaction.IsCostAdjustment)



				include DistributionForCostAdjustment	                     
			else
			if (Quantity > 0)										     
				include DistributionForPositiveQuantity
			else
			if (Quantity < 0)                                                
				include DistributionForNegativeQuantity

		
		DistributionForCostAdjustment
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount
			
			LocalBaseUnitCost 				= UnitCost
			LocalTransactionUnitCost		= DerivedUnitCostInTransactionCurrency
			if (not Company.CostingMethod.StandardCosting)
				LocalBaseUnitCost 			+= AddOnChargeUnitCost
				LocalTransactionUnitCost 	+= DerivedAddOnChargeUnitCostInTransactionCurrency
			

			LocalGLFinanceCodeBlock	 									= OffsetAccount			
			LocalGLBaseAmount											= ((Quantity * LocalBaseUnitCost) * -1)
			LocalGLTranAmount											= ((Quantity * LocalTransactionUnitCost) * -1)
			if (DoDebug)
				display "DFCA1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
			LocalPostingType = LocalPostingType.Offset
			include CreateInventoryTransactionLineDistribution
			
			if (Company.CostingMethod.StandardCosting)
				LocalGLFinanceCodeBlock									= CostVarianceAccount
				LocalGLBaseAmount										= (Quantity * LocalBaseUnitCost)
				LocalGLTranAmount										= (Quantity * LocalTransactionUnitCost)
				if (DoDebug)
					display "DFCA2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				LocalPostingType = LocalPostingType.Inventory
				include CreateInventoryTransactionLineDistribution
			else

				if (Quantity > TransientUsedQuantity)
					LocalGLFinanceCodeBlock										= InventoryAccount
					LocalGLBaseAmount											= ((Quantity - TransientUsedQuantity) * LocalBaseUnitCost)
					LocalGLTranAmount											= ((Quantity - TransientUsedQuantity) * LocalTransactionUnitCost)
					if (DoDebug)
						display "DFCA3:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
					LocalPostingType = LocalPostingType.Inventory
					include CreateInventoryTransactionLineDistribution      
					

				if (TransientUsedQuantity entered)
					LocalGLFinanceCodeBlock 								= CostVarianceAccount
					LocalGLBaseAmount										= (TransientUsedQuantity * LocalBaseUnitCost)
					LocalGLTranAmount										= (TransientUsedQuantity * LocalTransactionUnitCost)
					if (DoDebug)
						display "DFCA4:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
					LocalPostingType = LocalPostingType.Inventory
					include CreateInventoryTransactionLineDistribution      
					
			
			initialize LocalTotalDistributionAmount
			LocalTotalDistributionAmount = sum InventoryTransactionLineDistributionsRel.GLTransactionAmount
			
			if (LocalTotalDistributionAmount entered)
				invoke RoundingUpdate last InventoryTransactionLineDistributionsRel
					invoked.PrmRoundingDifference = LocalTotalDistributionAmount
		
		DistributionForPositiveQuantity                                                                            
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount

			LocalGLFinanceCodeBlock	 									= InventoryAccount 

			if (Company.CostingMethod.AverageCosting                                               
			and Company.AllowNegativeStockOnHand
			and StockOnHandQuantity < 0)
				include AmountsCalucaltionForNegativeStockOnHandQuantity    
			else
				if (Company.CostingMethod.StandardCosting
				or InventoryTransaction.IsVendorReturnAdjustmentOrVendorReturnCancel)
					if (InventoryTransaction.IsVendorReturnAdjustment
					or	InventoryTransaction.IsVendorReturnCancel)	
						LocalGLBaseAmount           					= DerivedQuantityUnitCost
						LocalVariableBaseAmount							= DerivedQuantityUnitCost
					else
						LocalGLBaseAmount           					= DerivedQuantityBaseCost
						LocalVariableBaseAmount							= DerivedQuantityBaseCost
                    LocalGLTranAmount                                	= DerivedGLTranAmount
					
					LocalVariableTransactionAmount						= LocalGLTranAmount
				else
					LocalGLBaseAmount              						= DerivedQuantityUnitCost + DerivedQuantityAddOnChargeCost
                    LocalGLTranAmount									= DerivedQuantityUnitCostInTranCurrency

				if ((IsValidTransactionSystemCodes
				or  IsPurchaseOrderCostAdjustment)
				and not InventoryTransaction.IsVendorReturn)
					LocalGLTranAmount									= LocalGLBaseAmount
				if (DoDebug)
					display "DFPQ1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"

 				if (OffsetAccount not entered
 				and InventoryTransaction.FromToCompanyLocation.FromToCompany != Company)
 					if (Company.CostingMethod.StandardCosting)
 						LocalGLFinanceCodeBlock     					= CostVarianceAccount
						LocalGLBaseAmount           					= (DerivedQuantityUnitCost - DerivedQuantityBaseCost)
						LocalGLTranAmount                               = DerivedGLTranAmount
					if (DoDebug)
						display "DFPQ2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"

			if (DoDebug)
				display "DFPQ3:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"			
			LocalPostingType = LocalPostingType.Inventory

			include CreateInventoryTransactionLineDistribution

			if (OffsetAccount entered)											
				include AmountsCalculationForOffsetAccount

			if (InventoryTransaction.IsInventoryReceivingTransfer               //"RT"		
			or InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
				if (InventoryTransaction.IsInventoryReceivingTransfer
				and AddOnCostAccount entered)
					LocalAddOnChargeUnitCost	= AddOnChargeUnitCost
					include AmountsCalculationForAddOnCostAccountAccount
						
				if (InventoryTransaction.IsPurchaseOrderReceiptAdjustment
				and POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel exists)
					for each POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel
						LocalAddOnChargeUnitCost = each.EnteredUnitCost
						LocalAddOnCharge 	= each.AddOnCharge
						if (each.Account entered)
							LocalAocAccount = each.Account						
						include AmountsCalculationForAddOnCostAccountAccount
			else
			if (OriginatingTransaction(KitchenOrder).KitchenOrder entered
			and InventoryTransaction.IsInventoryReceipt)
				if (KitchenOrderRel.WasteTotal entered)
					initialize LocalGLFinanceCodeBlock
					initialize LocalGLTranAmount
					initialize LocalGLBaseAmount
					
					LocalGLFinanceCodeBlock = KitchenOrderRel.WasteAccount
					LocalGLBaseAmount 		= KitchenOrderRel.WasteTotal
					LocalGLTranAmount		= LocalGLBaseAmount
					LocalPostingType 		= "CW"
					include CreateInventoryTransactionLineDistribution
			
				if (KitchenOrderBurdensRel exist)
					for each KitchenOrderBurdensRel
						initialize LocalGLFinanceCodeBlock
						initialize LocalGLTranAmount
						initialize LocalGLBaseAmount
						LocalBurdenCode				= each.BurdenCode
						if (KitchenOrderRel.BurdenAbsorptionAccount entered)
							LocalGLFinanceCodeBlock	= KitchenOrderRel.BurdenAbsorptionAccount
						else
							LocalGLFinanceCodeBlock	= each.BurdenCode.DistributionAccount
						LocalGLBaseAmount			= (each.ActualBurdenCost * -1)
						LocalGLTranAmount			= LocalGLBaseAmount
						LocalPostingType 			= "BR"
						include CreateInventoryTransactionLineDistribution

			if ((Company.CostingMethod.StandardCosting)									
			or (InventoryTransaction.IsVendorReturnAdjustmentOrVendorReturnCancel)
			or (Company.CostingMethod.AverageCosting
			and Company.AllowNegativeStockOnHand
			and StockOnHandQuantity < 0))
				include AmountsCalculationForVarianceAccount

		DistributionForNegativeQuantity
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount			
					
			LocalGLFinanceCodeBlock     								= InventoryAccount		
			
			if (Company.CostingMethod.StandardCosting)
				LocalVariableBaseAmount									= DerivedQuantityBaseCost
				LocalGLBaseAmount       								= DerivedQuantityBaseCost		
				
				if (UnitCost entered
				and UnitCostInTransactionCurrency entered)                    
					LocalGLTranAmount                                   = (DerivedQuantityBaseCost * (UnitCostInTransactionCurrency / UnitCost))
				else                    
					LocalGLTranAmount                                   = LocalGLBaseAmount
				
				LocalVariableTransactionAmount 							= LocalGLTranAmount
			else
				if (InventoryTransaction.IsVendorReturn
				or  InventoryTransaction.IsVendorReturnCancel)
					LocalVariableBaseAmount									= DerivedQuantityCurrentCost
					LocalGLBaseAmount       								= DerivedQuantityCurrentCost		
					LocalGLTranAmount                                		= DerivedGLTranAmount
					
					LocalVariableTransactionAmount 							= LocalGLTranAmount
				else				
					LocalGLBaseAmount       								= DerivedQuantityUnitCost + DerivedQuantityAddOnChargeCost	          
					LocalGLTranAmount										= (Quantity * UnitCostInTransactionCurrency)
					
			if (IsValidTransactionSystemCodes
			and not InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount										= LocalGLBaseAmount
			if (DoDebug)
				display "DFNQ1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"	
			LocalPostingType = LocalPostingType.Inventory
			include CreateInventoryTransactionLineDistribution

			if (Company.CostingMethod.StandardCosting
			or  InventoryTransaction.IsVendorReturn
			or  InventoryTransaction.IsVendorReturnCancel)
				include AmountsCalculationForVarianceAccount                     	

			initialize LocalDirectTransferToStandard
			
			if (OffsetAccount entered)
				if (InventoryTransaction.IsDirectTransferOrInventoryTransfer
				and IsTransactionCodeInventoryOrRequisition)
					if (InventoryTransaction.FromToCompanyLocation.FromToCompany != Company        
					or Company.CostingMethod.StandardCosting)
	                	include AmountsCalculationForStandardCostingOffsetAccount   
	
				if (!LocalDirectTransferToStandard)
					if (InventoryTransaction.IsVendorReturnOrAdjustment)
						LocalGLFinanceCodeBlock							= InventoryLocation.VendorReturnSuspenseAccount
					else
						LocalGLFinanceCodeBlock     					= OffsetAccount
					
					LocalGLBaseAmount									= (DerivedQuantityUnitCost * -1 )
					
					if (IsValidTransactionSystemCodes
					and not InventoryTransaction.IsVendorReturn)
						LocalGLTranAmount	    						= LocalGLBaseAmount	      			
					else
						LocalGLTranAmount	    						= (Quantity * UnitCostInTransactionCurrency * -1)
					if (DoDebug)
						display "DFNQ2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"	
					LocalPostingType = LocalPostingType.Offset
					include CreateInventoryTransactionLineDistribution	
			
			if (InventoryTransaction.IsVendorReturn
			and VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel exists)
				for each VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel						
					LocalAddOnChargeUnitCost = each.EnteredUnitCost
					LocalAddOnCharge = each.AddOnCharge
					if (each.Account entered)							
						LocalAocAccount = each.Account						
					include AmountsCalculationForAddOnCostAccountAccount
			
			if (InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			and POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel exists)
				for each POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel
					LocalAddOnChargeUnitCost = each.EnteredUnitCost
					LocalAddOnCharge 	= each.AddOnCharge						
					if (each.Account entered)
						LocalAocAccount = each.Account						
					include AmountsCalculationForAddOnCostAccountAccount		
		
		AmountsCalucaltionForNegativeStockOnHandQuantity      						
			if (DoDebug)
				display "AmountCalculationForNegativeStockOnHandQuantity"
			initialize LocalStockOnHandQuantity
			initialize LocalGLBaseAmount
			initialize LocalGLTranAmount
			
			LocalStockOnHandQuantity 									= StockOnHandQuantity + Quantity
			LocalVariableBaseAmount	 									= DerivedQuantityBaseCost
			LocalGLBaseAmount        									= DerivedQuantityBaseCost
			LocalGLTranAmount        									= DerivedQuantityUnitCost + DerivedQuantityAddOnChargeCost
			LocalVariableTransactionAmount								= LocalGLTranAmount 

			if (LocalVariableBaseAmount = LocalVariableTransactionAmount)
				if (IsFromToCompanyMismatchAndOffsetAccountNotEntered)
					initialize LocalGLBaseAmount
					include CalculateTransactionAmount				
			else																			
			if (LocalStockOnHandQuantity < 0)
				if (IsFromToCompanyMismatchAndOffsetAccountNotEntered)
				
					LocalGLBaseAmount  									= ((LocalVariableTransactionAmount - LocalVariableBaseAmount) * -1)
				
				include CalculateTransactionAmount
			else
			if (LocalStockOnHandQuantity > 0)
				LocalStockOnHandAmount   								= (StockOnHandQuantity * BaseCost * -1)
				LocalStockUnitCostAmount 								= LocalStockOnHandQuantity * UnitCost
				LocalStockAddOnChargeAmount 							= LocalStockOnHandQuantity * AddOnChargeUnitCost
				LocalVariableBaseAmount     							= LocalStockUnitCostAmount + LocalStockAddOnChargeAmount + LocalStockOnHandAmount
				
				if (IsFromToCompanyMismatchAndOffsetAccountNotEntered)
					LocalGLBaseAmount  									= ((LocalVariableTransactionAmount - LocalVariableBaseAmount) * -1)
				else
					LocalGLBaseAmount  									= LocalVariableBaseAmount
				
				include CalculateTransactionAmount

		CalculateTransactionAmount
			if (UnitCost entered
			and UnitCostInTransactionCurrency entered)
				LocalGLTranAmount 										= (LocalGLBaseAmount * (UnitCostInTransactionCurrency / UnitCost))
			else
				LocalGLTranAmount 										= LocalGLBaseAmount
			
			LocalVariableTransactionAmount								= LocalGLTranAmount  
													
		AmountsCalculationForOffsetAccount         								
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount
                          				
			LocalGLFinanceCodeBlock 									= OffsetAccount
			LocalGLBaseAmount											= (DerivedQuantityUnitCost  * -1)

			if ((IsValidTransactionSystemCodes
			or  IsPurchaseOrderCostAdjustment)
			and not InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount										= LocalGLBaseAmount     			
			else
				LocalGLTranAmount										= (Quantity * UnitCostInTransactionCurrency * -1)
			if (DoDebug)
				display "ACFOA1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
			LocalPostingType = LocalPostingType.Offset
			if (InventoryTransaction.IsVendorReturnAdjustment)	
				if (AdjVendorReturnLineForCreditMemoInvoiceRel exists
				and AdjVendorReturnLineForCreditMemoInvoiceRel.CreditMemoPayablesInvoiceRel exists)													
					LocalGLBaseAmount = DerivedQuantityUnitCost * -1
					LocalGLTranAmount = LocalGLBaseAmount
				if (DoDebug)
					display "ACFOA2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"					
			if (DerivedQuantityBurdenAmount entered)	


				LocalGLBaseAmount += DerivedQuantityBurdenAmount
				LocalGLTranAmount += DerivedQuantityBurdenAmount
				if (DoDebug)
					display "ACFOA3:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"				
			if (KitchenOrderRel exists
			and KitchenOrderRel.WasteTotal entered)
				LocalGLBaseAmount -= KitchenOrderRel.WasteTotal
				LocalGLTranAmount -= KitchenOrderRel.WasteTotal
			if (DoDebug)
				display "ACFOA4:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"			
			include CreateInventoryTransactionLineDistribution

		AmountsCalculationForAddOnCostAccountAccount       						
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount
			initialize LocalGLBaseAmount

			LocalGLFinanceCodeBlock 									= AddOnCostAccount	

			if (LocalAddOnChargeUnitCost entered)				
				LocalGLBaseAmount											= ((Quantity * LocalAddOnChargeUnitCost) * -1)
			else
				LocalGLBaseAmount											= (DerivedQuantityAddOnChargeCost * -1)
			
			if (InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount                                		= DerivedGLTranAmount	

			if (IsValidTransactionSystemCodes
			and not InventoryTransaction.IsVendorReturn)
				LocalGLTranAmount										= LocalGLBaseAmount     			
			LocalPostingType = LocalPostingType.Offset
			if (DoDebug)
				display "ACFOACAA1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
			include CreateInventoryTransactionLineDistribution
		
		AmountsCalculationForVarianceAccount									
			initialize LocalGLFinanceCodeBlock
			initialize LocalGLTranAmount		
			initialize LocalVariableAmount

			if (InventoryTransaction.IsInventoryReceivingTransfer                     
			and FromCurrency != ToCurrency)
				LocalVariableAmount 								= DerivedQuantityUnitCost - LocalGLBaseAmount 
			else
				LocalVariableAmount 								= DerivedQuantityUnitCost + DerivedQuantityAddOnChargeCost - LocalVariableBaseAmount
			if (LocalVariableAmount entered)
				LocalGLFinanceCodeBlock     							= CostVarianceAccount
				LocalGLBaseAmount           							= LocalVariableAmount
				
				LocalGLTranAmount                                		= DerivedGLTranAmount
				
				if (IsValidTransactionSystemCodes
				and not InventoryTransaction.IsVendorReturn)

					LocalGLTranAmount									= LocalGLBaseAmount
				if (DoDebug)
					display "ACFVA1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				LocalPostingType = LocalPostingType.Offset
				include CreateInventoryTransactionLineDistribution

		AmountsCalculationForStandardCostingOffsetAccount									
			if (!InventoryTransaction.IsDirectOrInventoryTransfer)
				LocalDirectTransferToStandard = true
				LocalGLBaseAmount 										= DerivedQuantityBaseCost
				LocalGLTranAmount 										= LocalGLBaseAmount
				if (DoDebug)
					display "ACFSCOA1:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				if (FromCurrency != ToCurrency)
					LocalGLBaseAmount 									= (LocalGLBaseAmount * ToCompanyBaseUnitCost / UnitCost)
					LocalGLTranAmount 									= LocalGLBaseAmount
					if (DoDebug)
						display "ACFSCOA2:LocalGLBaseAmount:<LocalGLBaseAmount>:LocalGLTranAmount:<LocalGLTranAmount>"
				LocalGLFinanceCodeBlock     							= InventoryAccount
				
				LocalPostingType = LocalPostingType.Offset
				include CreateInventoryTransactionLineDistribution	
				
				include AmountsCalculationForVarianceAccount                       		

		CreateInventoryTransactionLineDistribution
			if (DoDebug)
				display "CITLD:PostingDate:<GeneralLedgerDate>"
				display "CITLD:TransactionDate:<TransactionDate>:LocalTransactionDate:<LocalTransactionDate>"
			invoke Create InventoryTransactionLineDistribution
				fill in fields from this instance					
				invoked.System												= TransactionSystemCode
				invoked.PostingType											= LocalPostingType
				invoked.PostingDate				    						= GeneralLedgerDate
				invoked.GLFinanceCodeBlock									= LocalGLFinanceCodeBlock
				if (LocalTransactionCurrency entered)
					invoked.CurrencyCode									= LocalTransactionCurrency
				else
					invoked.CurrencyCode									= Company.AccountingEntity.FunctionalCurrency
				invoked.GLTransactionAmount									= LocalGLTranAmount 
				if (not LocalGLFinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.No)
					if (LocalPostingType.Offset)
						invoked.UnitsAmount									= Quantity * -1
					else
						invoked.UnitsAmount									= Quantity
				if (LocalTransactionDate entered)
					invoked.TransactionDate									= LocalTransactionDate
				else
					invoked.TransactionDate									= TransactionDate
				if (InventoryTransaction.InventoryDocumentType.AcceptedInspectionItem)       //"AC"
					invoked.GeneralLedgerEvent								= "IN"           //"IN" stands for Inspection Acceptance as a GL source code     
				else
					invoked.GeneralLedgerEvent								= InventoryTransaction.InventoryDocumentType
				invoked.DocumentNumber										= InventoryTransaction
				invoked.AddOnCharge 										= LocalAddOnCharge
				invoked.BurdenCode											= LocalBurdenCode						
				initialize invoked.Status


		FindOriginatingTransaction
			LocalOriginatingTransactionFound = true
			if (OriginatingTransaction not entered)
				initialize LocalOriginatingTransactionDocument 		
				initialize LocalOriginatingTransactionLine			
			else
			if (OriginatingTransaction.BusinessClassName = "CustomerOrderReturnLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(CustomerOrderReturnLine).CustomerOrderReturnLine.CustomerOrderReturn
				LocalOriginatingTransactionLine		= OriginatingTransaction(CustomerOrderReturnLine).CustomerOrderReturnLine
			else
			if (OriginatingTransaction.BusinessClassName = "POReceiptAdjustmentAndInspectionLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).POReceiptAdjustmentAndInspectionLine.POReceiptAdjustmentAndInspection
				LocalOriginatingTransactionLine		= OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).POReceiptAdjustmentAndInspectionLine
			else
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(PurchaseOrderReceiptLine).PurchaseOrderReceiptLine.PurchaseOrderReceipt
				LocalOriginatingTransactionLine		= OriginatingTransaction(PurchaseOrderReceiptLine).PurchaseOrderReceiptLine
			else
			if (OriginatingTransaction.BusinessClassName = "VendorReturnLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(VendorReturnLine).VendorReturnLine.VendorReturn
				LocalOriginatingTransactionLine		= OriginatingTransaction(VendorReturnLine).VendorReturnLine
			else
			if (OriginatingTransaction.BusinessClassName = "RequisitionLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(RequisitionLine).RequisitionLine.Requisition
				LocalOriginatingTransactionLine		= OriginatingTransaction(RequisitionLine).RequisitionLine
			else
			if (OriginatingTransaction.BusinessClassName = "WarehouseShipmentLine")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(WarehouseShipmentLine).WarehouseShipmentLine.WarehouseShipment
				LocalOriginatingTransactionLine		= OriginatingTransaction(WarehouseShipmentLine).WarehouseShipmentLine
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryCostHistory")
				LocalOriginatingTransactionDocument	= OriginatingTransaction(InventoryCostHistory).InventoryTransaction
				LocalOriginatingTransactionLine		= OriginatingTransaction(InventoryCostHistory).InventoryCostHistory.LineNumber
			else
			if (OriginatingTransaction.BusinessClassName = "KitchenOrder")
				LocalOriginatingTransactionDocument = OriginatingTransaction(KitchenOrder).KitchenOrder
			else
			if (IsInventoryReturns)
				LocalOriginatingTransactionDocument = OriginatingTransaction(InventoryTransactionLine).InventoryTransaction
				LocalOriginatingTransactionLine		= OriginatingTransaction(InventoryTransactionLine).InventoryTransactionLine.LineNumber
			else
				LocalOriginatingTransactionDocument = InventoryTransaction
				LocalOriginatingTransactionLine		= InventoryTransactionLine.LineNumber

		ReleaseTransactionLine
			include ReleaseLineValidation
			
			if (DoDebug)
				display "ICTL:Trantype:<InventoryTransaction.InventoryDocumentType>"
			if (not LocalHasError)
				if (Company.CostingMethod.AverageCosting
				and Company.UseGlobalAverageCost
				and GlobalAverageCostAndSOHRel not exists)
					invoke Create GlobalAverageCostAndSOH
						fill in fields from this instance
						
				if (InventoryTransaction.IsInventoryIssues
				or  InventoryTransaction.IsInventoryReturns
				or  InventoryTransaction.IsInventoryTransfer
				or  InventoryTransaction.IsDirectTransfer
				or  InventoryTransaction.IsRequisitionReturn) 
					if (ItemLocation.Manufacturer.ManufacturerCode entered)
						LocalManufacturerCode									= ItemLocation.Manufacturer.ManufacturerCode
						LocalManufacturerDivision								= ItemLocation.Manufacturer.ManufacturerDivision
						ManufacturerNumber										= ItemLocation.ManufacturerNumber
					else
						LocalManufacturerCode									= Item.Manufacturer.ManufacturerCode
						LocalManufacturerDivision								= Item.Manufacturer.ManufacturerDivision
						ManufacturerNumber										= Item.ManufacturerNumber														
						
					if (ManufacturerIDManufacturerRel exists)
						if (InventoryTransaction.FromToCompanyLocation.RequestingLocation entered)
							LocalInventoryLocation	= blank
							LocalRequestingLocation	= InventoryTransaction.FromToCompanyLocation.RequestingLocation
						else
							LocalInventoryLocation	= InventoryTransaction.FromToCompanyLocation.FromToLocation
							LocalRequestingLocation	= blank

						if (ShipToFacilityDetailWithCompanyOnlyRel exists)
							LocalShipToFacility = first ShipToFacilityDetailWithCompanyOnlyRel.ShipToFacility
						else
							LocalShipToFacility = first ShipToFacilityDetailRel.ShipToFacility
							
						if (ManufacturerIDShipToFacilityRel exists
						and ManufacturerIDDistributionCenterRel exists)
							ShipToFacility = ManufacturerIDShipToFacilityRel.ShipToFacility
							ManufacturerID = ManufacturerIDShipToFacilityRel.ManufacturerID

				if (!InventoryTransaction.IsInventoryBinTransfer) 
					if (InventoryAccount not entered)
						if (InventoryTransaction.IsVendorReturnAdjustment)
							InventoryAccount										= InventoryTransaction.InventoryLocation.ScrapAccount
						else
							InventoryAccount										= ItemLocation.GeneralLedgerCategory.InventoryAccount
	
				if ((InventoryTransaction.IsInventoryTransfer or InventoryTransaction.IsDirectTransfer)
				and  not LocalSkipTransactionCreate)
					if (Company.CostingMethod.StandardCosting)
						CostVarianceAccount 				= ItemLocation.GeneralLedgerCategory.CostVarianceAccount
					OffsetAccount		   	 	  		    = FromToCompanyItemLocationRel.GeneralLedgerCategory.IntransitAccount
				else
				if (InventoryTransaction.IsInventoryIntransitReceiving)
					OffsetAccount			 	  		 	= ItemLocation.GeneralLedgerCategory.IntransitAccount
					CostVarianceAccount 				 	= ItemLocation.GeneralLedgerCategory.CostVarianceAccount
				else
				if (InventoryTransaction.IsInventoryReceivingTransfer)
					OffsetAccount				 		 	= ItemLocation.GeneralLedgerCategory.IntransitAccount
					if (AddOnChargeUnitCost entered)
						AddOnCostAccount				   	= ItemLocation.GeneralLedgerCategory.AddOnCostAccount
					if (Company.CostingMethod.StandardCosting
					or (Company.CostingMethod.AverageCosting
					and Company.AllowNegativeStockOnHand))
						CostVarianceAccount 				= ItemLocation.GeneralLedgerCategory.CostVarianceAccount
				else
				if (!InventoryTransaction.IsInventoryBinTransfer)
					CostVarianceAccount 					= ItemLocation.GeneralLedgerCategory.CostVarianceAccount	

				if (IsForInventoryCostHistory) 	
					if (not InventoryTransaction.IsCostAdjustment						
					and not InventoryTransaction.IsInventoryTransfer
					and not InventoryTransaction.IsDirectTransfer
					and not InventoryTransaction.IsInventoryIntransitReceiving
					and not InventoryTransaction.IsInventoryReceivingTransfer
					and HasUnequalTransactionAndStockUOM)						

						LocalInputUnitCost 	= UnitCost							
						include ConversionOfQuantityAndUnitCostToStock
						UnitCost		 	= LocalOutputUnitCost

						if (UnitCostInTransactionCurrency entered
						and InventoryTransaction.IsVendorReturn)
							LocalInputUnitCost				= UnitCostInTransactionCurrency
							include ConversionOfQuantityAndUnitCostToStock
							UnitCostInTransactionCurrency	= LocalOutputUnitCost

						LocalInputUnitCost  = AddOnChargeUnitCost
						include ConversionOfQuantityAndUnitCostToStock
						AddOnChargeUnitCost	= LocalOutputUnitCost
	
					if (!InventoryTransaction.IsCostAdjustment)		
						if (InventoryTransaction.IsInventoryIssues					
						or  InventoryTransaction.IsDirectOrInventoryTransfer
						or  InventoryTransaction.IsVendorReturn 				
						or  IsOrderEntryShipment)
							if (HasUnequalTransactionAndStockUOM)				
								LocalChangedQuantity					= LocalQuantityInStockUOM * -1
							else
								LocalChangedQuantity 					= Quantity * -1     
							
							if (Item.IsCatchWeightItem)		
								LocalChangedSecondaryQuantity 			= SecondaryQuantity * -1
						else
							if (HasUnequalTransactionAndStockUOM)
								LocalChangedQuantity					= LocalQuantityInStockUOM
							else
								LocalChangedQuantity					= Quantity
							
							if (Item.IsCatchWeightItem)
								LocalChangedSecondaryQuantity   		= SecondaryQuantity	
					else
						LocalChangedQuantity							= Quantity
						if (Item.IsCatchWeightItem)
							LocalChangedSecondaryQuantity				= SecondaryQuantity
					
					LocalStockOnHandQuantity = ItemLocation.StockOnHandQuantity + LocalChangedQuantity				
					if (DoDebug)
						display "LocalChangedQuantity:<LocalChangedQuantity>"
						display "LocalChangedSecondaryQuantity:<LocalChangedSecondaryQuantity>"
						display "LocalStockOnHandQuantity:<LocalStockOnHandQuantity>"
					
					if (Company.CostingMethod.AverageCosting)
						CurrentCost = ItemLocation.DerivedItemAverageCost
						BaseCost = ItemLocation.DerivedItemAverageCost
					else			
					if (Company.CostingMethod.StandardCosting)
						CurrentCost = ItemLocation.StandardCost
						BaseCost    = ItemLocation.StandardCost								
					else
						for each InventoryCostHistoryRel
							TotalOpenQuantity += each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity
							TotalExternalCost += ((each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity) * each.UnitCost)
							
						if (TotalOpenQuantity not entered)  
							initialize CurrentCost
						else
							CurrentCost = TotalExternalCost / TotalOpenQuantity
					
					if (Item.IsCatchWeightItem)
						LocalAverageCalculatedQuantity				= LocalChangedQuantity - LocalHoldCatchWeightQuantity
					else		
						LocalAverageCalculatedQuantity		 		= LocalChangedQuantity - LocalHoldQuantity
					LocalRemainingQuantity           				= LocalChangedQuantity 			
					
					if (DoDebug)
						display "LocalAverageCalculatedQuantity:<LocalAverageCalculatedQuantity>"
						display "LocalRemainingQuantity:<LocalRemainingQuantity>"


					
					if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)

						if (InventoryCostHistoryForReceiptRel exists)
							if (LocalRemainingQuantity > 0) 
								invoke UpdateFromTransaction InventoryCostHistoryForReceiptRel
									invoked.PrmReceivedQuantity							= LocalRemainingQuantity 
									invoked.PrmInspectionHoldQuantity					= LocalHoldQuantity	
									invoked.PrmLastActivityDate							= TransactionDate
							else 
								if (InventoryCostHistoryForReceiptRel.UnusedQuantity + LocalRemainingQuantity >= 0)
									LocalAdjustmentReceivedQuantity 	= LocalRemainingQuantity
								else
									LocalAdjustmentReceivedQuantity		= InventoryCostHistoryForReceiptRel.UnusedQuantity * -1 
									if (LocalHoldQuantity entered)
										LocalAdjustmentHoldQuantity 	= LocalAdjustmentReceivedQuantity
									LocalAverageCalculatedQuantity 		= LocalAdjustmentReceivedQuantity - LocalAdjustmentHoldQuantity
								include GetAverageAndAddOnCost
								LocalAdjustmentAverageCost				= LocalAverageCost
								if (DoDebug)
									display "RA:LocalAverageCalculatedQuantity:<LocalAverageCalculatedQuantity>:LocalAdjustmentReceivedQuantity:<LocalAdjustmentReceivedQuantity>"
									display "RA:LocalAverageCost:<LocalAverageCost>"
								invoke UpdateFromTransaction InventoryCostHistoryForReceiptRel
									invoked.PrmReceivedQuantity							= LocalAdjustmentReceivedQuantity 
									invoked.PrmInspectionHoldQuantity					= LocalAdjustmentHoldQuantity	
									invoked.PrmLastActivityDate							= TransactionDate	

						
					if (LocalChangedQuantity > 0)							
						if (LocalAverageCalculatedQuantity > 0
						and not InventoryTransaction.InventoryDocumentType.VendorReturnCancel)
							include GetAverageAndAddOnCost
						
						if (InventoryTransaction.IsInventoryIssues
						and ItemLocation.StockOnHandQuantity >= 0
						and Company.CostingMethod.AverageCosting)
							for each IncreaseInventoryCostHistoryRel
								if (each.InventoryTransaction.InventoryDocumentType.Adjustment
								and each.InventoryCostHistory.TransactionSystemCode.InventoryControl
								and each.UsedQuantity entered)										
									if (LocalRemainingQuantity 		<= each.UsedQuantity)
										InventoryCostHistoryQuantity = LocalRemainingQuantity
									else
										InventoryCostHistoryQuantity = each.UsedQuantity
									
									invoke UpdateFromTransaction each
										invoked.PrmUsedQuantity		 = InventoryCostHistoryQuantity
										invoked.PrmDecrease			 = true
									
									LocalRemainingQuantity  		-= InventoryCostHistoryQuantity
									if (LocalRemainingQuantity = 0)
										end for each
						
						if (LocalRemainingQuantity > 0)
							if (!IsBinTransferOrCostAdjustment 
							and not InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)  

								invoke Create InventoryCostHistory
									fill in fields from this instance

									invoked.InventoryCostHistory.LineNumber     			= InventoryTransactionLine.LineNumber
									if (InventoryTransaction.InventoryDocumentType.CustomerReturn
									or  InventoryTransaction.InventoryDocumentType.Shipment)
										invoked.InventoryCostHistory.TransactionSystemCode  = TransactionSystemCode.OrderEntry
									else
									if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
										invoked.InventoryCostHistory.TransactionSystemCode 	= TransactionSystemCode.PurchaseOrder
									else




										invoked.InventoryCostHistory.TransactionSystemCode 	= TransactionSystemCode.InventoryControl										
									invoked.ReceivedQuantity 								= LocalRemainingQuantity
									invoked.InspectionHoldQuantity							= LocalHoldQuantity	    
									invoked.UnitCost		 								= UnitCost		
									invoked.ReceivedDate	 								= InventoryTransaction.TransactionDate			
									if (ItemLocation.StockOnHandQuantity < 0)
										LocalStockOnHandQuantity = ItemLocation.StockOnHandQuantity * -1
										if (LocalStockOnHandQuantity >= LocalRemainingQuantity)
											invoked.UsedQuantity 							= LocalRemainingQuantity
										else
											invoked.UsedQuantity 							= LocalStockOnHandQuantity	
									invoked.LastActivityDate								= InventoryTransaction.TransactionDate			
	
								invoke UpdateFromTransaction ItemLocation
									invoked.PrmInspectionHoldQuantity			 = LocalHoldQuantity
									invoked.PrmInspectionHoldCatchWeightQuantity = LocalHoldCatchWeightQuantity
					else
					if (LocalChangedQuantity < 0)									
						LocalRemainingQuantity = LocalChangedQuantity * -1	
					
						if (!IsCostAdjustment)


						  	if (Item.IsCatchWeightItem)	
						  		LocalAverageCalculatedQuantity = LocalChangedQuantity + LocalHoldCatchWeightQuantity
						  	else
								LocalAverageCalculatedQuantity = LocalChangedQuantity + LocalHoldQuantity  
							if (LocalAdjustmentAverageCost not entered)
								LocalAverageCost = ItemLocation.DerivedItemAverageCost									


							if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)      // = "RA"
								LocalRemainingQuantity += LocalAdjustmentReceivedQuantity
								if (LocalRemainingQuantity entered)
									include UpdateInventoryCostHistory	
							else
							if (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem)
								include GetAverageAndAddOnCost						
							else
								if (not InventoryTransaction.InventoryDocumentType.VendorReturn)
									include UpdateInventoryCostHistory	
									if (Company.CostingMethod.FirstInFirstOut
									or  Company.CostingMethod.LastInFirstOut)
										UnitCost = TotalInventoryHistoryCost / (LocalChangedQuantity * -1) 							
							if (UnitCost not entered)
								if (Company.CostingMethod.AverageCosting)
									UnitCost = LocalAverageCost	
								else
								if (Company.CostingMethod.StandardCosting)
									UnitCost = ItemLocation.StandardCost
				else	
					if (InventoryTransaction.IsVendorReturnAdjustment
					and HasUnequalTransactionAndStockUOM)
						LocalInputUnitCost 	= UnitCost							
						include ConversionOfQuantityAndUnitCostToStock
						UnitCost		 	= LocalOutputUnitCost
					
						LocalInputUnitCost  = AddOnChargeUnitCost
						include ConversionOfQuantityAndUnitCostToStock
						AddOnChargeUnitCost	= LocalOutputUnitCost
					else				
					if (IsInspection and CurrentCost not entered)
						CurrentCost = DerivedCurrentCost
				
				if (ToCurrency entered
				and FromCurrency != ToCurrency)  
		            initialize LocalCurrencyUnitCost

		            LocalCurrencyTable							 = InventoryTransaction.CurrencyTable
		            LocalCurrencyUnitCost.ToCurrency      		 = ToCurrency
		            LocalItemType								 = "I"
					LocalCurrencyTransactionUnitCost			= UnitCost
		            ToCompanyBaseUnitCost						 = LocalCurrencyUnitCost.OutputCurrencyUnitCost								

				if ((InventoryTransaction.IsInventoryTransfer or InventoryTransaction.IsDirectTransfer)
				and not LocalSkipTransactionCreate)
					include CreateIntransitAndReceivingTransfer
						
				if (InventoryTransaction.IsInventoryIntransitReceiving)
					include CreateReceivingTransfer

				if (IsDetailTransaction)
					invoke Release InventoryTransactionLineDetailsRel
						resume on error
							LocalHasError 	= true
							LocalError	  	= error message
							LocalErrorLevel	= InventoryTransactionImport.ErrorLevel.Detail
	
							if (not LocalReleaseFromInterface)
								cancel resume
	
						if (InventoryTransaction.IsInventoryTransfer
						or  InventoryTransaction.IsInventoryIntransitReceiving
						or  InventoryTransaction.IsDirectTransfer)
							invoked.PrmIntransitAndReceivingDocumentNumber  	= IntransitAndReceivingDocumentNumber
							invoked.PrmIntransitAndReceivingDocumentType	  	= IntransitAndReceivingDocumentType
							invoked.PrmIntransitAndReceivingLineNumber			= IntransitAndReceivingLineNumber 
							invoked.PrmIntransitAndReceivingWarehouseShipment   = IntransitAndReceivingWarehouseShipment 
							invoked.PrmIntransitAndReceivingComponentSequence   = IntransitAndReceivingComponentSequence
							invoked.PrmReceiveAll								= ReceiveAll
							invoked.PrmSkipTransactionCreate                    = LocalSkipTransactionCreate
						if (LocalHoldQuantity entered)
							invoked.PrmInspection								= true
						if (LocalOriginalTransactionUOM entered)
							invoked.PrmTransactionUOM = LocalOriginalTransactionUOM
	 			else 
	 				if (UDIRequiredNotDetailTracked
					and IsUDIDetailTransaction
					and InventoryTransactionLineDetailsRel not exists)
						if (InventoryTransaction.IsInventoryTransfer
						or  InventoryTransaction.IsDirectTransfer)
							for each InventoryUDIDetailRel
								invoke CreateUDIDetailForTransfer each
									fill in fields from each
									invoked.Company										= InventoryTransaction.FromToCompanyLocation.FromToCompany
									invoked.InventoryLocation							= InventoryTransaction.FromToCompanyLocation.FromToLocation
									invoked.InventoryUDIDetail.InventoryTransactionType	= IntransitAndReceivingDocumentType
									invoked.InventoryUDIDetail.TransactionSystemCode	= TransactionSystemCode.InventoryControl
									invoked.InventoryUDIDetail.DocumentNumberNumeric	= IntransitAndReceivingDocumentNumber
									invoked.InventoryUDIDetail.WarehouseShipment		= IntransitAndReceivingWarehouseShipment
									invoked.InventoryUDIDetail.LineNumber				= IntransitAndReceivingLineNumber
									invoked.InventoryUDIDetail.TransactionSequence		= each.InventoryUDIDetail.TransactionSequence

					if (!InventoryTransaction.IsCostAdjustment
					and !InventoryTransaction.IsPhysicalInventoryAdjustment
					and !InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptArchive
					and !InventoryTransaction.IsVendorReturnAdjustment
					and !InventoryTransaction.IsInventoryIntransitReceiving)
		 				if (IsItemLocationBinTracked				
						or  ItemLocation.LotTracked.LotRequiredAtReceipt
						or (DerivedMultipleUOM > 1 and IsUOMTrackedIn  
						and not HasItemLocationStockUOM   
						and not ItemLocation.LotTracked.LotRequiredAtIssue
						and not IsItemLocationSerialTracked))
							if (IsUOMTrackedIn)
								LocalSOHDetailQuantity				= Quantity
							else
								LocalSOHDetailQuantity				= LocalQuantityInStockUOM
							if (Item.IsCatchWeightItem)
								LocalSecondarySOHDetailQuantity		= SecondaryQuantity
							
							if (InventoryTransaction.IsInventoryIssues
							or  InventoryTransaction.IsInventoryTransfer
							or  InventoryTransaction.IsVendorReturn)
								LocalSOHDetailQuantity 				= LocalSOHDetailQuantity * -1
								if (Item.IsCatchWeightItem)
									LocalSecondarySOHDetailQuantity	= LocalSecondarySOHDetailQuantity * -1						

		 					if (StockOnHandDetailRel not exists)
								invoke Create StockOnHandDetail					
									invoked.Company            						= InventoryTransaction.Company
									invoked.InventoryLocation  						= InventoryTransaction.InventoryLocation
									invoked.Item               						= Item
									invoked.StockOnHandDetail.UnitOfMeasure			= LocalTransactionUOM
									invoked.StockOnHandDetail.Lot					= blank
									invoked.StockOnHandDetail.Sublot				= blank
									invoked.StockOnHandDetail.Bin					= Bin									
									invoked.StockOnHandQuantity						= LocalSOHDetailQuantity
									invoked.SecondaryQuantity						= LocalSecondarySOHDetailQuantity

									if (LocalHoldQuantity entered)
										invoked.InspectionHoldQuantity				= LocalSOHDetailQuantity	
										invoked.InspectionHoldSecondaryQuantity 	= LocalSecondarySOHDetailQuantity
							else															
								if (IsIncreaseStock
								or  IsDecreaseStock)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmStockOnHandQuantity				= LocalSOHDetailQuantity
										invoked.PrmSecondaryQuantity				= LocalSecondarySOHDetailQuantity

										if (LocalHoldQuantity entered)
											invoked.PrmInspectionHoldQuantity		= LocalSOHDetailQuantity	
											invoked.PrmInspectionHoldSecondaryQuantity = LocalSecondarySOHDetailQuantity
								else
								if (InventoryTransaction.IsAcceptedInspection)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmInspectionHoldQuantity			= LocalSOHDetailQuantity * -1
										invoked.PrmInspectionHoldSecondaryQuantity 	= LocalSecondarySOHDetailQuantity * -1
								else
								if (InventoryTransaction.IsRejectedInspection
								and OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)
									invoke UpdateFromTransaction StockOnHandDetailRel
										invoked.PrmInspectionHoldQuantity			= LocalSOHDetailQuantity * -1
										invoked.PrmInspectionHoldSecondaryQuantity 	= LocalSecondarySOHDetailQuantity * -1
										invoked.PrmStockOnHandQuantity				= LocalSOHDetailQuantity * -1
										invoked.PrmSecondaryQuantity				= LocalSecondarySOHDetailQuantity * -1



				if (!InventoryTransaction.IsInventoryBinTransfer)
					
					if (InventoryTransaction.IsAcceptedInspection)
						LocalAverageCalculatedQuantity		 	= LocalQuantityInStockUOM
						LocalInputUnitCost 	= UnitCost							
						include ConversionOfQuantityAndUnitCostToStock
						UnitCost		 	= LocalOutputUnitCost
						include GetAverageAndAddOnCost
						
						invoke UpdateFromTransaction ItemLocation
							if (IsCatchWeightItem)
								invoked.PrmInspectionHoldQuantity				= SecondaryQuantity * -1
								invoked.PrmInspectionHoldCatchWeightQuantity	= Quantity * -1
							else
								invoked.PrmInspectionHoldQuantity = LocalQuantityInStockUOM * -1
						

					if ((InventoryTransaction.IsRejectedInspection and OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)
					or  (InventoryTransaction.IsAcceptedInspection))
						invoke UpdateFromTransaction InventoryCostHistoryForReceiptRel
							if (IsCatchWeightItem)
								invoked.PrmInspectionHoldQuantity				= SecondaryQuantity * -1
							else
								invoked.PrmInspectionHoldQuantity				= LocalQuantityInStockUOM * -1	
							invoked.PrmLastActivityDate							= TransactionDate
					else
					if (InventoryTransaction.IsVendorReturn       and VendorReturnLineRel.IsCreatedFromRejectedInspection)	
						invoke UpdateFromTransaction InventoryCostHistoryForReceiptFromVendorReturnRel
							if (IsCatchWeightItem)
								invoked.PrmInspectionHoldQuantity				= SecondaryQuantity * -1
							else
								invoked.PrmInspectionHoldQuantity				= LocalQuantityInStockUOM * -1	
							invoked.PrmLastActivityDate							= TransactionDate
							

					if (DoDebug)
						display "BeforeItemLocUpdate:LocalQuantityInStockUOM:<LocalQuantityInStockUOM>" 
						display "BeforeItemLocUpdate:LocalChangedSecondaryQuantity:<LocalChangedSecondaryQuantity>"			
					invoke UpdateFromTransaction ItemLocation
						if (IsIncreaseStock)
							if (InventoryTransaction.IsInventoryReceipt
							or  InventoryTransaction.IsCustomerReturn
							or  InventoryTransaction.IsPurchaseOrderReceipt
							or InventoryTransaction.IsInventoryReceivingTransfer
							)
								invoked.PrmLastReceiptCost						= UnitCost
								invoked.PrmIsReceiptCost						= true
							if (InventoryTransaction.IsInventoryIssues)
								invoked.PrmLastIssueCost						= UnitCost
								invoked.PrmIsIssueCost							= true
								invoked.PrmStockOnHandQuantity			   		= LocalQuantityInStockUOM * -1
							else
							if (InventoryTransaction.IsInventoryIntransitReceiving)
								if (IsCatchWeightItem)
									invoked.PrmIntransitQuantity          	   	= SecondaryQuantity
								else
									invoked.PrmIntransitQuantity          	   	= LocalQuantityInStockUOM
								invoked.PrmIntransit							= true
							else							
								invoked.PrmStockOnHandQuantity		      		= LocalQuantityInStockUOM
							
							if (Item.IsCatchWeightItem)
								invoked.PrmSecondaryQuantity		       		= LocalChangedSecondaryQuantity
						else
						if (IsDecreaseStock)
							if (IsIssuesOrTransfer
							or  InventoryTransaction.IsVendorReturn				

							or  InventoryTransaction.IsShipment)		
								if (IsIssuesOrTransfer)								
									invoked.PrmLastIssueCost					= UnitCost
									invoked.PrmIsIssueCost						= true
								invoked.PrmStockOnHandQuantity					= LocalQuantityInStockUOM * -1
							else
								invoked.PrmStockOnHandQuantity					= LocalQuantityInStockUOM
							if (InventoryTransaction.IsVendorReturn
							and VendorReturnLineRel.IsCreatedFromRejectedInspection)
								if (Item.IsCatchWeightItem)


									invoked.PrmInspectionHoldQuantity				= LocalChangedSecondaryQuantity
									invoked.PrmInspectionHoldCatchWeightQuantity	= LocalChangedQuantity
								else
									invoked.PrmInspectionHoldQuantity			= LocalQuantityInStockUOM * -1
							if (Item.IsCatchWeightItem)
								invoked.PrmSecondaryQuantity			    	= LocalChangedSecondaryQuantity
						else
						if (InventoryTransaction.IsRejectedInspection
						and OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)
							invoked.PrmStockOnHandQuantity						= LocalQuantityInStockUOM * -1
							if (Item.IsCatchWeightItem)


								invoked.PrmSecondaryQuantity			    	= SecondaryQuantity * -1
								invoked.PrmInspectionHoldQuantity				= SecondaryQuantity * -1
								invoked.PrmInspectionHoldCatchWeightQuantity	= Quantity * -1
							else
								invoked.PrmInspectionHoldQuantity				= LocalQuantityInStockUOM * -1
							
						if (InventoryTransaction.IsCostAdjustment
						and LastReceiptRecord
						and NewUnitCost not entered)
							invoked.PrmClearLastReceiptCost						= true
						invoked.PrmAverageCost							 		= LocalAverageCost
						if (LocalAverageCost not entered
						and LocalComputedAverageCost
						and LocalNewStockOnHandQuantity entered)
							invoked.PrmClearAverageCost							= true
						invoked.PrmAverageAddOnCost							 	= LocalAddOnCost
	
						invoked.PrmTransactionCounter							 = 1
						invoked.PrmTransactionCount                              = 1
					
					if (Company.UseGlobalAverageCost)
						invoke UpdateFromTransaction GlobalAverageCostAndSOHRel
							if (IsIncreaseStock)
								if (InventoryTransaction.IsInventoryIssues)
									invoked.PrmGlobalStockOnHand			   		= LocalQuantityInStockUOM * -1
								else							
									invoked.PrmGlobalStockOnHand		      		= LocalQuantityInStockUOM
							else
							if (IsDecreaseStock)
								if (IsIssuesOrTransfer
								or  InventoryTransaction.IsVendorReturn
								or  InventoryTransaction.IsShipment)
									invoked.PrmGlobalStockOnHand					= LocalQuantityInStockUOM * -1
								else
									invoked.PrmGlobalStockOnHand					= LocalQuantityInStockUOM
							else
							if (InventoryTransaction.IsRejectedInspection
							and OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)
								invoked.PrmGlobalStockOnHand						= LocalQuantityInStockUOM * -1
							invoked.PrmGlobalAverageCost							= LocalGlobalAverageCost
											
				if (InventoryTransaction.IsInventoryTransfer
				and InventoryTransaction.IntransitTransfer
				and InventoryTransactionLine.ComponentSequence not entered)
					invoke UpdateFromTransaction FromToCompanyItemLocationRel
						if (IsCatchWeightItem)
							invoked.PrmIntransitQuantity                    	= SecondaryQuantity
						else
							invoked.PrmIntransitQuantity                    	= LocalQuantityInStockUOM
						invoked.PrmIntransitToLocation							= true


				UpdateDate														= current timestamp
				TransactionCounter      		    							= ItemLocation.TransactionCounter
				StockOnHandQuantity 											= ItemLocation.StockOnHandQuantity 
				SecondaryStockOnHandQuantity									= ItemLocation.SecondaryQuantity

				if (InventoryTransaction.IsInventoryTransfer
				and InventoryTransaction.IntransitTransfer
				and not LocalSkipTransactionCreate)
					if (WarehouseDemandForIntransitTransferRel not exists)
						invoke Create WarehouseDemand
							invoked.Company											= InventoryTransaction.FromToCompanyLocation.FromToCompany
							invoked.WarehouseDemand.DemandSystemCode				= DemandSystemCode.Intransit
							invoked.WarehouseDemand.DemandDocument					= IntransitAndReceivingDocumentNumber
							invoked.WarehouseDemand.DemandCompany					= InventoryTransaction.Company
						
					if (WarehouseDemandLinesForIntransitTransferRel not exists)
						invoke CreateSupply WarehouseDemandLine
							invoked.Company							    			 = InventoryTransaction.FromToCompanyLocation.FromToCompany
							invoked.InventoryLocation                                = InventoryTransaction.FromToCompanyLocation.FromToLocation
							invoked.WarehouseDemand.DemandSystemCode				 = DemandSystemCode.Intransit
							invoked.WarehouseDemand.DemandDocument					 = IntransitAndReceivingDocumentNumber
							invoked.WarehouseDemand.DemandCompany					 = InventoryTransaction.Company
							invoked.WarehouseDemandLine.DemandDocumentType           = DemandDocumentType.IntransitReceiving
							invoked.WarehouseDemandLine.LineNumber                   = InventoryTransactionLine.LineNumber
							initialize invoked.WarehouseDemandLine.ComponentSequence   
							invoked.Item                                             = Item
							invoked.DemandRecordType                               	 = "S"
							invoked.EstimatedTransactionDate						 = EstimatedDeliveryDate
							invoked.LineType                                         = "I"
							invoked.Status											 = 0
							invoked.Quantity                                         = Quantity
							invoked.Allocatable                                      = true
							invoked.CompanyAndLocation.RequestingCompany   			 = InventoryTransaction.Company
							if (Item.IsCatchWeightItem)
								invoked.TransactionUOM								 = SecondaryUOM
								invoked.TransactionUOMMultiplier					 = SecondaryUOMMultiplier
							else
								invoked.TransactionUOM                               = TransactionUOM
								invoked.TransactionUOMMultiplier                     = TransactionUOMMultiplier
		
				if (InventoryTransaction.IsInventoryIntransitReceiving
				and WarehouseDemandLinesForIntransitReceivingRel exists)
					invoke UpdateFromWarehouse WarehouseDemandLinesForIntransitReceivingRel
						invoked.PrmQuantity	= Quantity * -1


					
				
				if (InventoryTransaction.IsInventoryIssues	
				or  InventoryTransaction.IsInventoryTransfer
				or  InventoryTransaction.IsVendorReturn
				or  InventoryTransaction.IsDirectTransfer   			
				or  InventoryTransaction.IsInventoryBinTransfer
				or  InventoryTransaction.IsShipment) 	
					if (Item.IsCatchWeightItem)
						Quantity		  = Quantity * -1
						SecondaryQuantity = SecondaryQuantity * -1	
					else
						Quantity		  = LocalQuantityInStockUOM * -1
						
				else
					if (!InventoryTransaction.IsInventoryIntransitReceiving)
						if (Item.CatchWeightCode.NotCatchWeight)					
							Quantity 	  = LocalQuantityInStockUOM

				if (IsInventoryReturns)
					increment IssueInventoryTransactionLineOfReturnRel.ReturnQuantity by Quantity
					increment IssueInventoryTransactionLineOfReturnRel.SecondaryReturnQuantity by SecondaryQuantity
							
				if ((InventoryTransaction.IsInventoryIssues
				or	InventoryTransaction.IsInventoryTransfer)
				and (TransactionSystemCode.InventoryControl))
					invoke Create RequisitionTransaction
						invoked.FromCompanyLocation.FromCompany						= InventoryTransaction.Company
						invoked.FromCompanyLocation.FromLocation					= InventoryTransaction.InventoryLocation
						if (InventoryTransaction.IsInventoryIssues)
							invoked.RequisitionTransaction.RequisitionDocumentType	= RequisitionDocumentType.Issue
						else 
							invoked.RequisitionTransaction.RequisitionDocumentType	= RequisitionDocumentType.TransferIssue
						invoked.RequisitionTransaction.Requisition					= InventoryTransaction
						invoked.RequisitionTransaction.RequisitionLine				= InventoryTransactionLine.LineNumber
						invoked.RequisitionTransaction.RequisitionSequence			= DocumentSequence
						invoked.StockUOM											= StockUOM
						invoked.TransactionDate										= TransactionDate
						invoked.ItemType											= ItemType.Inventoried
						invoked.Item												= Item
						invoked.Company												= InventoryTransaction.FromToCompanyLocation.FromToCompany
						if (InventoryTransaction.IsInventoryIssues)
							invoked.RequestingLocation								= InventoryTransaction.FromToCompanyLocation.RequestingLocation
						else
							invoked.RequestingLocation								= InventoryTransaction.FromToCompanyLocation.FromToLocation
						invoked.TransactionUnitCost									= UnitCostInTransactionCurrency
						invoked.UnitCost											= UnitCost
						if (InventoryTransaction.IsInventoryIssues)
							invoked.Quantity										= Quantity * -1
						else	
							invoked.Quantity										= Quantity
				
		GetAverageCostForFix 	
										
			LocalItemLocationCost 		= LocalUpdateAverageCost
			LocalUnitCost       		= UnitCost
			LocalChangedQuantity    	= Quantity
			CurrentStockOnHandQuantity 	= StockOnHandQuantity - Quantity 
			include ComputeAverageCostForFix
			LocalUpdateAverageCost	= LocalAverageCostComputed
		
		ComputeAverageCostForFix
		
			if (CurrentStockOnHandQuantity > 0)
				LocalCurrentExternalCost = ((CurrentStockOnHandQuantity) * LocalItemLocationCost)	
			
				if (LocalCurrentExternalCost < 0)
					initialize LocalCurrentExternalCost				
			else
				if (ItemLocation.StockOnHandQuantity <=0)
					initialize LocalCurrentExternalCost					
			
			if (!InventoryTransaction.IsCostAdjustment) 
				LocalLineExternalCost		= LocalChangedQuantity * LocalUnitCost
			else
			if (InventoryTransaction.IsCostAdjustment)
				LocalLineExternalCost		= (LocalChangedQuantity * (LocalUnitCost + LocalItemLocationCost))
			LocalNewExternalCost   		= LocalLineExternalCost + LocalCurrentExternalCost
			LocalNewStockOnHandQuantity 	= CurrentStockOnHandQuantity + LocalChangedQuantity
			if (LocalNewStockOnHandQuantity >= 0)
				if (CurrentStockOnHandQuantity < 0)
					LocalAverageCostComputed = LocalUnitCost
				else
				if (LocalNewStockOnHandQuantity > 0)		
					LocalAverageCostComputed = (LocalNewExternalCost / LocalNewStockOnHandQuantity)

		InitializeArrays 
			initialize LocalInventoryIssuesArray		
			initialize LocalInventorySalesArray		
			initialize LocalInventoryAdjustmentsArray	
			initialize LocalInventoryTransfersArray	
			initialize LocalInventoryReceiptsArray		
			initialize LocalInventoryPeriodEndArray	
			
		InitializeDates
			initialize LocalYearStartDate
			initialize LocalYearEndDate
			initialize LocalCurrentPeriod
			initialize LocalYearPeriodStatusArray

		CopyDatesFromCompany		
			LocalYearStartDate 			= Company.LastYearEndDate + 1
			LocalYearEndDate			= Company.YearPeriodStatusArray.YearPeriodStatus[Company.NumberOfPeriods].YearPeriod
			LocalYearPeriodStatusArray	= Company.YearPeriodStatusArray
			LocalCurrentYear			= Company.CurrentYear
			LocalCurrentPeriod 			= 1

		DeleteUsageHistory
			for each InventoryUsageHistoryRecordsRel
				invoke Delete each
			
		SaveUsageHistory
			LocalYearSave	= LocalCurrentYear
			initialize LocalQuarterSave
						
			if (LocalYearSave <= Company.CurrentYear)
				LocalPeriodCounter = LocalCurrentPeriod
				while (LocalPeriodCounter <= Company.NumberOfPeriods)
					if (LocalYearSave < Company.CurrentYear
					or  Company.YearPeriodStatusArray.YearPeriodStatus[LocalPeriodCounter].Status.Closed)		
						LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalPeriodCounter].PeriodEndQuantity				= LocalPeriodEndQuantity 	
						LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalPeriodCounter].PeriodEndExtendedCost			= LocalAverageCost


					LocalPeriodCounter += 1
								
			if (InventoryUsageHistoryRel exists)
				invoke Update InventoryUsageHistoryRel					 
					invoked.BeginningStockOnHandQuantity					= LastYearEndQuantity
					invoked.BeginningStockOnHandExtendedCost				= LastYearEndExtendedCost
					invoked.InventoryIssuesArray							= LocalInventoryIssuesArray
					invoked.InventorySalesArray								= LocalInventorySalesArray
					invoked.InventoryAdjustmentsArray						= LocalInventoryAdjustmentsArray
					invoked.InventoryTransfersArray							= LocalInventoryTransfersArray
					invoked.InventoryReceiptsArray							= LocalInventoryReceiptsArray
					invoked.InventoryPeriodEndArray							= LocalInventoryPeriodEndArray
			else
				invoke Create InventoryUsageHistory
	                invoked.Company           								= Company
	                invoked.InventoryLocation 								= InventoryLocation
	                invoked.Item              								= Item		
	                invoked.InventoryUsageHistory.Year						= LocalCurrentYear
					invoked.BeginningStockOnHandQuantity					= LastYearEndQuantity
					invoked.BeginningStockOnHandExtendedCost				= LastYearEndExtendedCost
					invoked.InventoryIssuesArray							= LocalInventoryIssuesArray
					invoked.InventorySalesArray								= LocalInventorySalesArray
					invoked.InventoryAdjustmentsArray						= LocalInventoryAdjustmentsArray
					invoked.InventoryTransfersArray							= LocalInventoryTransfersArray
					invoked.InventoryReceiptsArray							= LocalInventoryReceiptsArray
					invoked.InventoryPeriodEndArray							= LocalInventoryPeriodEndArray
			
			LastYearEndQuantity			= LocalSOHQuantity 
			LastYearEndExtendedCost 	= LocalAverageCost

		CalculateAverageStockOnHand
			LocalCurrentPeriodDate = Company.YearPeriodStatusArray.YearPeriodStatus[Company.CurrentPeriod].YearPeriod
			LocalNumberOfDays = LocalCurrentPeriodDate - ItemLocation.AddedDate
			
			if (Company.NumberOfPeriods.12PeriodsPerYearMonthly)
				LocalPeriodCount = LocalNumberOfDays / 30
			else
				if (Company.NumberOfPeriods.13PeriodsPerYear)
					LocalPeriodCount = LocalNumberOfDays / 28
				else
					if (Company.NumberOfPeriods.52PeriodsPerYearWeekly
					or  Company.NumberOfPeriods.53PeriodsPerYear)
						LocalPeriodCount = LocalNumberOfDays / 7

			for each InventoryUsageHistoriesRel
				LocalInventoryPeriodEndArray = each.InventoryPeriodEndArray
				LocalUsageHistoryYear		 = each.InventoryUsageHistory.Year
				LocalPeriodCounter 			 = 1
				
				for each LocalInventoryPeriodEndArray.InventoryPeriodEnd
					if (LocalUsageHistoryYear < Company.CurrentYear)
						LocalTotalSOHQuantity += each.PeriodEndQuantity
					else
						if (Company.YearPeriodStatusArray.YearPeriodStatus[LocalPeriodCounter].Status.Closed)
							LocalTotalSOHQuantity += each.PeriodEndQuantity
						else			
							end for each
					LocalPeriodCounter += 1			
									
			LocalAverageStockOnHand = LocalTotalSOHQuantity / LocalPeriodCount
			
		ReleaseLineValidation
			include ValidateOngoingCalculation
			LocalErrorLevel = 2
			if (InventoryTransaction.IsInventoryTransfer
			or  InventoryTransaction.IsInventoryIntransitReceiving
			or  InventoryTransaction.IsInventoryReceivingTransfer
			or  InventoryTransaction.IsDirectTransfer)
				IntransitAndReceivingDocumentNumber      = PrmIntransitAndReceivingDocumentNumber
				IntransitAndReceivingDocumentType        = PrmIntransitAndReceivingDocumentType
				IntransitTransferDocumentNumber          = PrmIntransitTransferDocumentNumber
				ReceiveAll								 = PrmReceiveAll
			
			LocalHoldQuantity				= PrmInspectionHoldQuantity
			LocalHoldCatchWeightQuantity	= PrmInspectionHoldCatchWeightQuantity				
			
			if (IsUDIDetailTransaction and IsItemLocationBinTracked)
				constraint (not HasMissingUDIDetails)
					"Line<InventoryTransactionLine.LineNumber>HasMissingUDIDetails"
			
			constraint (ItemLocation exists)
				"Item<Item>IsNotPresentAtLocation" 	 					

			if (not IsPurchaseOrderCostAdjustment)
				constraint (ItemLocation.InventoryTracked)
					"Item<Item>MustBeTrackedAtItemLocation"
			
			if (IsInventoryReturns)
				constraint (Quantity entered)
					"ReturnQuantityMustBeEnteredForLine<InventoryTransactionLine.LineNumber>"

				if (not ItemLocation.NoCharge
				and IssueInventoryTransactionLineOfReturnRel.UnitCost entered)
					constraint (UnitCost entered)
						"UnitCostMustBeEnteredForLine<InventoryTransactionLine.LineNumber>"

				constraint (Quantity <= DerivedIssueLineTransactionQuantityForReturn)
					"QuantityEnteredIsMoreThanAvailableForReturn"

				if (IsCatchWeightItem)
					constraint (SecondaryQuantity <= DerivedIssueLineSecondaryQuantityForReturn)
						"QuantityEnteredIsMoreThanAvailableForReturn"				
								
			if (InventoryTransaction.IsInventoryReceipt
			or  InventoryTransaction.IsInventoryIssues
			or  InventoryTransaction.IsInventoryTransfer
			or  InventoryTransaction.IsInventoryAdjustments)
				constraint (ItemLocation.Active)
					"ItemLocationMustBeActive"

			if (HasItemLocationStockUOM
			and not IsCostAdjustment)
				constraint (HasValidLocationUOM)
					"<TransactionUOM>IsNotAValidLocationUnitOfMeasureForItem<Item>"
			else			
				constraint (HasValidUOM)
					"<TransactionUOM>IsNotAValidUnitOfMeasureForItem<Item>"										

			if (ItemGTIN entered)
				constraint (ItemGlobalTradeItemNumberUnitOfMeasureRel exists)	
					"Item,GlobalTradeItemNumber(GTIN)AndTransactionUOMCombinationIsInvalid" 
						                                					
			if ((InventoryTransaction.IsInventoryTransfer or InventoryTransaction.IsDirectTransfer)
			and  not LocalSkipTransactionCreate)
				constraint (FromToCompanyItemLocationRel exists)	
					"Item<Item>IsNotPresentAtInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"  	


			if (InventoryTransaction.IsInventoryIntransitReceiving
			and ReceiveAll)
				Quantity   = OpenQuantity


			if (ItemLocation.FrozenForPhysicalInventory)	
				constraint (TransactionDate >= ItemLocation.FreezeDate)
					"Item<Item>FrozenForPhysicalInventoryAtLine<InventoryTransactionLine.LineNumber>"			 	

			include ValueOfUOM
 
			if (StockOnHandDetailFromTransactionDetailRel.FrozenForPhysicalInventory)
				if (StockOnHandDetailFromTransactionDetailRel.StockOnHandDetail.Bin entered)			
					constraint (InventoryTransaction.TransactionDate >= StockOnHandDetailFromTransactionDetailRel.FreezeDate)
						"Bin<Bin>IsFrozenAtLine<InventoryTransactionLine.LineNumber>"         						//ICEDREL.ICED.7"
				else
					constraint (InventoryTransaction.TransactionDate >= StockOnHandDetailFromTransactionDetailRel.FreezeDate)
						"Item<Item>IsFrozenAtLine<InventoryTransactionLine.LineNumber>"        						//ICEDREL.ICED.27"

			if (IsDetailTransaction)
				if (IsItemLocationLotTracked)
					constraint (not HasDifferentLotExpirationDate)
						"CannotEnterSameLotWithDifferentExpiryDate"

				if (InventoryTransaction.IsInventoryIntransitReceiving)
					include ValidateIntransitRecevingDetailInBalance
				else
					include ValidateDetailInBalance
			

			if (UDIRequiredNotDetailTracked
			and TransactionSystemCode.InventoryControl)
				initialize LocalTotalUDIQuantity
				if (IsUDIDetailTransaction)
					if (InventoryUDIDetailRel exists)
						for each InventoryUDIDetailRel
							if (TransactionUOM = each.UOM)
								LocalTotalUDIQuantity += each.Quantity			








						constraint (LocalTotalUDIQuantity = Quantity)
							"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>HasUDIQuantityOutOfBalance"
				else
				if (InventoryUDIDetailForWHRel exists)
					for each InventoryUDIDetailForWHRel
						if (TransactionUOM = each.UOM)
							LocalTotalUDIQuantity += each.Quantity
							
					constraint (LocalTotalUDIQuantity = Quantity)
						"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>HasUDIQuantityOutOfBalance"


			if (HasUnequalTransactionAndStockUOM)
				initialize LocalDoRounding
								
			if (Item.IsCatchWeightItem)
				LocalItemLocationSecondaryAvailableQuantity	= (ItemLocation.SecondaryQuantity - ItemLocation.AllocatedQuantity - ItemLocation.InProcessQuantity)
    			LocalItemLocationAvailableQuantity 			= ItemLocation.StockOnHandQuantity
    			
   			 	if (not InventoryTransaction.InventoryDocumentType.VendorReturn)	
 					LocalItemLocationAvailableQuantity			-= ItemLocation.InspectionHoldQuantityInStockUOM 
 					LocalItemLocationSecondaryAvailableQuantity	-= ItemLocation.InspectionHoldQuantity
   			else
   			 	LocalItemLocationAvailableQuantity  		= ItemLocation.StockOnHandQuantity - ItemLocation.AllocatedQuantity - ItemLocation.InProcessQuantity
   			 	if (not InventoryTransaction.InventoryDocumentType.VendorReturn)	
 					LocalItemLocationAvailableQuantity -= ItemLocation.InspectionHoldQuantity
   			 	
				
			
			if (TransactionSystemCode.Requisition)						
				if (LocalItemLocationAvailableQuantity < Quantity)
					LocalItemLocationAvailableQuantity = ItemLocation.AvailableQuantity 


    				

			include ConvertQuantityToStockOrAlternate


			if (DoDebug)
				display "InsufficientChecking"
				display "LocalItemLocationAvailableQuantity:<LocalItemLocationAvailableQuantity>"
				display "LocalItemLocationSecondaryAvailableQuantity:<LocalItemLocationSecondaryAvailableQuantity>"
				display "LocalQuantityInStockUOM:<LocalQuantityInStockUOM>"
				display "LocalSecondaryQuantity:<LocalSecondaryQuantity>"
				

			if (IsDecreaseStock					
			and not Company.AllowNegativeStockOnHand)
				initialize LocalCatchWeightItem
				constraint (LocalItemLocationAvailableQuantity > 0
				and ((LocalQuantityInStockUOM 		<= LocalItemLocationAvailableQuantity)
				and  (LocalQuantityInStockUOM * -1  <= LocalItemLocationAvailableQuantity))) 
					"<DerivedMessageForItemLocationQuantity>"
					
				if (Item.IsCatchWeightItem)
					LocalCatchWeightItem = true
					constraint (HasSufficientItemLocationSecondaryAvailableQuantity)												
						"<DerivedMessageForItemLocationQuantity>"


				if (!IsPlainItemWithSingleUOM 
				and !MultipleBins)
					include ValueOfUOM													
									
					initialize LocalStockOnHandAvailableQuantity
					initialize LocalStockOnHandAllocatedQuantity
					initialize LocalInputQuantity
					initialize LocalOutputQuantity
					for each InventoryTransactionLineDetailsRel
						if (ItemLocation.LotTracked.LotRequiredAtIssue)
							initialize LocalLot
							initialize LocalSublot
						else
							LocalLot 	= each.Lot
							LocalSublot = each.Sublot
						
						if (TransactionSystemCode.Requisition
						and not IsCatchWeightItem)
							LocalTransactionUOM = each.UnitOfMeasure
						include CalculateStockOnHandDetailQuantity

					if (InventoryTransactionLineDetailsRel not exist)			
						initialize LocalLot										
						initialize LocalSublot

						include CalculateStockOnHandDetailQuantity

					if (InventoryTransaction.IsVendorReturn 
					and VendorReturnLineRel.IsCreatedFromRejectedInspection)
						if (IsCatchWeightItem)
							LocalStockOnHandAvailableQuantity  			+= VendorReturnLineRel.RejectedInspectionLineForReturnLineRel.CatchWeightQuantity
							LocalStockOnHandSecondaryAvailableQuantity  += VendorReturnLineRel.RejectedInspectionLineForReturnLineRel.Quantity
						
						else
							LocalInspectionHoldQuantity 				= VendorReturnLineRel.RejectedInspectionLineForReturnLineRel.Quantity
							if (TransactionUOM = VendorReturnLineRel.RejectedInspectionLineForReturnLineRel.DerivedReceivedUOM) 
								LocalStockOnHandAvailableQuantity  		+= LocalInspectionHoldQuantity
							else
								initialize UOMCalculation
								UOMCalculation.InputUOM    	 			= VendorReturnLineRel.RejectedInspectionLineForReturnLineRel.DerivedReceivedUOM
								UOMCalculation.InputToUOM  	 			= TransactionUOM
								UOMCalculation.InputQuantity 			= LocalInspectionHoldQuantity
								UOMCalculation.Method      	 			= UOMCalculation.Method.ConvertToAlternate
								LocalStockOnHandAvailableQuantity  		+= UOMCalculation.OutputQuantity
						
					
					include ValidateStockOnHandDetailQuantity
					
			if (IsDetailTransaction)
				invoke ReleaseLineDetailEdits InventoryTransactionLineDetailsRel
					resume on error
						LocalHasError 	= true
						LocalError	  	= error message
						LocalErrorLevel	= InventoryTransactionImport.ErrorLevel.Detail

						if (not LocalReleaseFromInterface)
							cancel resume

					if (InventoryTransaction.IsInventoryTransfer
					or  InventoryTransaction.IsInventoryIntransitReceiving
					or  InventoryTransaction.IsDirectTransfer)
						invoked.PrmIntransitAndReceivingDocumentType  		= IntransitAndReceivingDocumentType	
						invoked.PrmIntransitAndReceivingDocumentNumber  	= IntransitAndReceivingDocumentNumber
						invoked.PrmIntransitAndReceivingLineNumber			= IntransitAndReceivingLineNumber 
						invoked.PrmIntransitAndReceivingWarehouseShipment   = IntransitAndReceivingWarehouseShipment 
						invoked.PrmIntransitAndReceivingComponentSequence   = IntransitAndReceivingComponentSequence
						invoked.PrmReceiveAll								= ReceiveAll
					if (LocalHoldQuantity entered)
						invoked.PrmInspection								= true



		CreateDetailForDetailTransfer
			invoke QuickCreate InventoryTransactionLineDetail
				invoked.Company						= Company
				invoked.InventoryLocation			= InventoryLocation
				invoked.InventoryTransaction		= InventoryTransaction
				invoked.InventoryTransactionLine	= InventoryTransactionLine
				invoked.TransactionSystemCode		= TransactionSystemCode.InventoryControl
				invoked.Item						= Item
				if (IsItemLocationSerialTracked)
					invoked.Bin						= FromToCompanyLocationBin.FromToBin
				else
					invoked.Bin						= Bin
				invoked.UnitOfMeasure				= TransactionUOM
				invoked.Quantity					= Quantity
				invoked.SecondaryQuantity			= SecondaryQuantity
				invoked.Lot							= TransientLot
				invoked.Sublot						= TransientSublot
				invoked.Serial						= TransientSerial

	Derived Fields 
		DerivedStockOnHandQuantity is a DerivedField
			type is like Quantity
			restricted
			if (Company.CostingMethod.AverageCosting
			and Company.UseGlobalAverageCost
			and GlobalAverageCostAndSOHRel exists)
				return GlobalAverageCostAndSOHRel.GlobalStockOnHand
			else
				return ItemLocation.StockOnHandQuantity
	

		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IntegrationApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		BODDerivedQuantity is a DerivedField
			type is Decimal size 13.4
			restricted
			if (DerivedIntegrationApplication="Local.ly")
				return Quantity

	
		NumberOfDaysSinceTransaction is a ComputeField
			type is Numeric 6
			(current corporate date - TransactionDate)

		InventoryTransactionShipmentLineXMLBOD is a DerivedField	
			type is Boolean
			restricted
			return InventoryTransaction.InventoryTransactionShipmentLineXMLBOD
		
		InventoryTransactionAdvanceShipLineXMLBOD is a DerivedField	
			type is Boolean
			restricted
			return InventoryTransaction.InventoryTransactionAdvanceShipLineXMLBOD
			
		DerivedPreciseUnitCost is a DerivedField
			type is like UnitCost
				precision is Item.NumberOfDecimalsCost
			restricted
			if (action type.Update)
				return 0
			else
				initialize RoundedValue
				if (Item.IsCatchWeightItem)
					RoundedValue.RoundInput		= (UnitCost * SecondaryUOMMultiplier)
				else
					RoundedValue.RoundInput		= UnitCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedCostRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
				
		DerivedUnitCostForDefaulting is a DerivedField
			type is like UnitCost
				precision is Item.NumberOfDecimalsCost
			restricted
			if (Item.IsCatchWeightItem)
				return TransientPreciseUnitCost / SecondaryUOMMultiplier
			else
				return TransientPreciseUnitCost
	
		ContextMessageText is a MessageField
			restricted
			"InventoryTransactionLine<InventoryTransactionLine>"


		DerivedUnitCostInTransactionCurreny		is a DerivedField
			type is like UnitCost
			restricted
			if (UnitCostInTransactionCurrency entered)
				return UnitCostInTransactionCurrency
			else
				return UnitCost

		DerivedUnitCostForCostAdjustment			is a DerivedField
			type is like UnitCost
			restricted
			return (InventoryCostHistoryForReceivingAdjustmentRel.TotalCostAdjustmentUnitCost)

		DerivedCurrentCost							is a DerivedField
			type is like InternationalCost
				precision is Item.NumberOfDecimalsCost
			restricted
			if (Company.CostingMethod.AverageCosting)
				return ItemLocation.DerivedItemAverageCost
			else			
				if (Company.CostingMethod.StandardCosting)
					return ItemLocation.StandardCost
				else
					for each InventoryCostHistoryRel
						TotalOpenQuantity += each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity
						TotalExternalCost += ((each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity) * each.UnitCost)
						
					if (TotalOpenQuantity entered)  
						return TotalExternalCost / TotalOpenQuantity
					else
						return 0

		DerivedManufacturerNumber         								is a ConditionalField
            type is like ManufacturerNumber
            restricted
            if (ItemLocation.HasManufacturerCode)
                ItemLocation.ManufacturerNumber
            else
                Item.ManufacturerNumber
                
		StorageCodeMismatchMessage										is a MessageField
			"StorageCodeMismatch"

		BackOrderExistMessage											is a MessageField
			"*BackOrderExist*"
		
        TransactionDetailBin     	 	    							is a DerivedField
            type is like Bin
            restricted
            
            if (IsBinTrackedAndNotMultiplesBin
            and InventoryTransaction.IsInventoryBinTransfer)
            	return FromToCompanyLocationBin.FromToBin
            else
            if (IsBinTrackedAndNotMultiplesBin)
                return Bin
			else 
				return blank
		
		DerivedMultipleUOM												is a ComputeField
			type is Numeric 6
			restricted
			(instance count of MultipleTrackedInUnitOfMeasureRel) 			
  
		CatchWeightVarianceMessage										is a MessageField					
			restricted
			"CatchWeightQuantityIsOutsideOfTolerance"
		






		

		SecondaryQuantityMessage										is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>HasSecondaryQuantityOutOfBalance"
		QuantityMessage													is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>HasQuantityOutOfBalance"
		
		DerivedMessageForQuantityOutOfBalance							is a DerivedField
			type is Alpha size up to 200
			restricted	

			if (LocalCatchWeightItem)
				return SecondaryQuantityMessage
			else
				return QuantityMessage


		AllocatedItemLocationSecondaryQuantityMessage					is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>:AvailableSecondaryStockOnHandCannotBeUsed;PendingTransactionsExist" 
		AllocatedItemLocationQuantityMessage							is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>:AvailableStockOnHandCannotBeUsed;PendingTransactionsExist"
		NonAllocatedItemLocationSecondaryQuantityMessage				is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>:HasInsufficientStockOnHandSecondaryQuantity"			
		NonAllocatedItemLocationQuantityMessage							is a MessageField
			restricted	
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>:HasInsufficientStockOnHandQuantity"
			
		DerivedMessageForItemLocationQuantity							is a DerivedField
			type is Alpha size up to 200
			restricted
			if (LocalCatchWeightItem)				
				if (ItemLocation.AllocatedQuantity > 0		
				or 	ItemLocation.InProcessQuantity > 0
				or  ItemLocation.InspectionHoldQuantity > 0)
					return AllocatedItemLocationSecondaryQuantityMessage
				else
					return NonAllocatedItemLocationSecondaryQuantityMessage
			else				
				if (ItemLocation.AllocatedQuantity > 0		
				or 	ItemLocation.InProcessQuantity > 0
				or  ItemLocation.InspectionHoldQuantity > 0)
					return AllocatedItemLocationQuantityMessage
				else 	
					return NonAllocatedItemLocationQuantityMessage


		BinTrackedStockOnHandSecondaryQuantityMessage					is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;HasInsufficientStockOnHandSecondaryQuantityInBin<Bin>,SecondaryUOM<SecondaryUOM>"
		NonBinTrackedStockOnHandSecondaryQuantityMessage				is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;HasInsufficientStockOnHandSecondaryQuantitySecondaryUOM<SecondaryUOM>"	
		BinTrackedStockOnHandQuantityMessage							is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;HasInsufficientStockOnHandQuantityInBin<Bin>,UOM<TransactionUOM>"
		NonBinTrackedStockOnHandQuantityMessage							is a MessageField
			restricted
			"TransactionLine<InventoryTransactionLine.LineNumber>Item<Item>;HasInsufficientStockOnHandQuantityInUOM<TransactionUOM>"			
	
		DerivedMessageForBinTrackedStockOnHandQuantity					is a DerivedField
   			type is Alpha size up to 200
   			restricted
			if (LocalStockOnHandAllocatedQuantity > 0
			and LocalCatchWeightItem)
				return BinTrackedStockOnHandSecondaryQuantityMessage
			else
				if (LocalStockOnHandAllocatedQuantity > 0
				and !LocalCatchWeightItem)			
					return BinTrackedStockOnHandQuantityMessage
				else
					if (LocalCatchWeightItem)
						return BinTrackedStockOnHandSecondaryQuantityMessage
					else
						return BinTrackedStockOnHandQuantityMessage

		DerivedMessageForNonBinTrackedStockOnHandQuantity				is a DerivedField
   			type is Alpha size up to 200
   			restricted
			if (LocalStockOnHandAllocatedQuantity > 0
			and LocalCatchWeightItem)
				return NonBinTrackedStockOnHandSecondaryQuantityMessage
			else
				if (LocalStockOnHandAllocatedQuantity > 0
				and !LocalCatchWeightItem)			
					return NonBinTrackedStockOnHandQuantityMessage
				else
					if (LocalCatchWeightItem)
						return NonBinTrackedStockOnHandSecondaryQuantityMessage
					else
						return NonBinTrackedStockOnHandQuantityMessage
	
		DetailLineCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of InventoryTransactionLineDetailsRel)						

		DerivedLocationStockUOM										is a DerivedField 
			type is like UnitOfMeasure
			return ItemLocation.ItemLocationStockUOM.UnitOfMeasure

		DerivedLocationStockUOMMultiplier							is a DerivedField  
			type is like UOMMultiplier
			return ItemLocation.ItemLocationStockUOM.ItemUOM.UOMConversion

		DerivedStockInLocationStockUOM 								is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return DerivedStockIssueQuantity / DerivedLocationStockUOMMultiplier

		DaysOnHandStockInLocationStockUOM 								is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return DaysOnHandStockIssueQuantity / DerivedLocationStockUOMMultiplier

		StockOnHandQuantityInLocationStockUOM 								is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return StockOnHandQuantity / DerivedLocationStockUOMMultiplier

		QuantityInLocationStockUOM 								is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return Quantity / DerivedLocationStockUOMMultiplier

		DerivedOrderUOMRounding										is a DerivedField 
			type is Boolean
			return ItemLocation.HasOrderUOMRounding

		DerivedStockIssueQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if  (TransactionUOM != StockUOM
			and (IsUnreleased or InventoryTransaction.IsInventoryIntransitReceiving))
				return (Quantity * TransactionUOMMultiplier)
			else
			if ((IsIssuesOrTransferOrAdjustment or IsOrderEntryShipment)
			and  not InventoryTransaction.IsStandardCostValuationUpdate
			and  not IsUnreleased)
				return Quantity * -1
			else
				return Quantity

		DaysOnHandStockIssueQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if  (TransactionUOM != StockUOM
			and (IsUnreleased or InventoryTransaction.IsInventoryIntransitReceiving))
				return (Quantity * TransactionUOMMultiplier)
			else
			if ((IsIssuesOrTransferOrAdjustment or InventoryTransaction.IsInventoryAdjustments or IsOrderEntryShipment)
			and  not InventoryTransaction.IsStandardCostValuationUpdate
			and  not IsUnreleased)
				return Quantity * -1
			else
				return Quantity

 		DerivedDisplayStockIssueQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return DerivedStockInLocationStockUOM
			else
				return DerivedStockIssueQuantity

 		DaysOnHandDisplayStockIssueQuantity is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return DaysOnHandStockInLocationStockUOM
			else
				return DaysOnHandStockIssueQuantity


		LastIssueCostMessage											is a MessageField
			restricted
			"CannotEnterUnitCost;UseLastIssueCostIsSelected"
		IssueQuantityMessage											is a MessageField
			restricted
			"QuantityIsPositive;UnitCostCannotBeEntered"
		AdjustmentQuantityMessage										is a MessageField
			restricted
			"UnitCostNotAllowedOnAdjustmentOut"
		NoChargeMessage													is a MessageField
			restricted     
			"UnitCostNotAllowed;ItemLocationIsNoCharge"
		
		DerivedMessageForUnitCost										is a DerivedField
			type is Alpha size up to 200
			restricted	
			if (UseLastIssueCost)
				return LastIssueCostMessage
			else
			if (InventoryTransaction.IsInventoryIssues
			and Quantity > 0)
				return IssueQuantityMessage
			else
			if (InventoryTransaction.IsInventoryAdjustments
			and Quantity < 0)
				return AdjustmentQuantityMessage													
			else
			if  (InventoryTransaction.IsInventoryAdjustments											
			or   InventoryTransaction.IsInventoryReceipt
			or	 InventoryTransaction.IsInventoryReturns
			and  ItemLocation.NoCharge)
				return NoChargeMessage


		DerivedUnitCost									is a DerivedField 
			type is like InternationalCost
			restricted

			if (Status.Unreleased)
				return TransientPreciseUnitCost
			else
			if (Status.Released or Status.GlobalLedgerUpdated)
				if (IsItemLocationNoCharge)
					return 0
				else
					if (HasUnequalTransactionAndStockUOM)   
						LocalUnitCost	=	UnitCost
						include UnitCostDefaultCalculation
						return UOMCalculation.OutputUnitCost
					else
						return TransientPreciseUnitCost

		DerivedUnitCostInStockUOM						is a DerivedField 
			type is like InternationalCost
			restricted
			if (Status.Unreleased
			or  not IsNegativeAdjustmentOrNoCharge)
				initialize RoundedValue
				RoundedValue.RoundInput			= UnitCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedCostRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0
				
		DerivedReturnUnitCost							is a DerivedField 
			type is like InternationalCost
			restricted
			if (Company.InventoryReturnsAtAverageCost)
				LocalUnitCost = ItemLocation.DerivedItemAverageCost
			else
				LocalUnitCost = UnitCost
			if (HasUnequalTransactionAndStockUOM)   
				include UnitCostDefaultCalculation
				return UOMCalculation.OutputUnitCost
			else
				return LocalUnitCost
		

		DerivedUnitCostItemLocationTransactionTab 		is a DerivedField 
			type is like InternationalCost
			restricted
			
			if (not IsCatchWeightItem)
				if (Status.Unreleased)
					return TransientPreciseUnitCost
				else
				if (Status.Released or Status.GlobalLedgerUpdated)
					if (ItemLocation.NoCharge)
						return 0
					else
						if (HasUnequalTransactionAndStockUOM)   
							LocalUnitCost	=	UnitCost
							include UnitCostDefaultCalculation
							return UOMCalculation.OutputUnitCost
						else
							return TransientPreciseUnitCost
			else

				if (Status.Unreleased
				or  not ItemLocation.NoCharge)
					initialize RoundedValue
					RoundedValue.RoundInput			= UnitCost
					RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
					RoundedValue.RoundTo			= DerivedCostRoundTo
					RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
					return RoundedValue.RoundResult
				else
					return 0		




		DerivedQuantity													is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "Quantity"
			if (Status.Unreleased)
				return Quantity
			else
				if (Status.Released or Status.NonGlobalLedger or Status.GlobalLedgerUpdated)
					if (HasUnequalTransactionAndStockUOM
					and not InventoryTransaction.IsInventoryIntransitReceiving
					and (not InventoryTransaction.IsInventoryBinTransfer or HasItemLocationStockUOM))				
						LocalInputQuantity	=	Quantity
						include ConversionOfItemLocationQuantityIntoAlternate
						if (InventoryTransaction.IsInventoryIssues
						or  InventoryTransaction.IsInventoryTransfer
						or  InventoryTransaction.IsDirectTransfer
						or  IsOrderEntryShipment)
							return LocalOutputQuantity * -1
						else
							return LocalOutputQuantity	
					else
					if (InventoryTransaction.IsInventoryIssues
					or  InventoryTransaction.IsInventoryTransfer
					or  InventoryTransaction.IsDirectTransfer
					or  IsOrderEntryShipment)
						return Quantity * -1
					else
						return Quantity			

		DerivedEnteredQuantity											is a DerivedField   
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "Quantity"
			if (IsCatchWeightItem)
				return SecondaryQuantity
			else
				if (Status.Unreleased)
					return Quantity
				else
					if (Status.Released or Status.NonGlobalLedger or Status.GlobalLedgerUpdated)
						if (HasUnequalTransactionAndStockUOM)
							LocalInputQuantity	=	Quantity
							include ConversionOfItemLocationQuantityIntoAlternate
							return LocalOutputQuantity	
						else
							return Quantity	

		DerivedIntransitQty is a DerivedField
			type is Decimal size 13.4
			if (Quantity entered)
				return Quantity
			else
				return OpenQuantity
		
		DerivedSecondaryQuantity											is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (Status.Unreleased)
				return SecondaryQuantity
			else
				if (Status.Released or Status.NonGlobalLedger)
					if (InventoryTransaction.IsInventoryIssues
					or  InventoryTransaction.IsInventoryTransfer
					or  InventoryTransaction.IsDirectTransfer
					or  IsOrderEntryShipment)
						return SecondaryQuantity * -1
					else
						return SecondaryQuantity	
		
		DerivedBaseCost 												is a DerivedField
			type is like UnitCost
				precision is Item.NumberOfDecimalsCost
			default label is "BaseCost"
			if (InventoryTransaction.IsCostAdjustment and Item.IsCatchWeightItem)
				return UnitCost
			else
				return BaseCost


		DerivedSupplementalUOMMultiplier								is a DerivedField 
			type is like UOMMultiplier
			return ItemLocation.SupplementalUOM.ItemUOM.UOMConversion

		DerivedSupplementalUOM											is a DerivedField 
			type is like UnitOfMeasure
			default label is "SupplementalUOM"
			return ItemLocation.SupplementalUOM.UnitOfMeasure

		DerivedQuantityInSupplementalUOM								is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "SupplementalQuantity"
			if (HasSupplementalUOM)
				if  (TransactionUOM != StockUOM
				and (IsUnreleased or InventoryTransaction.IsInventoryIntransitReceiving))
					if (TransactionUOM = DerivedSupplementalUOM)
						return Quantity 
					else
						initialize UOMCalculation
						UOMCalculation.InputUOM 	 			= TransactionUOM
						UOMCalculation.InputToUOM    			= ItemLocation.SupplementalUOM.UnitOfMeasure
						UOMCalculation.Method		 			= UOMCalculation.Method.ConvertToAlternate
						UOMCalculation.InputQuantity 			= Quantity
						return UOMCalculation.OutputQuantity
				else
					initialize UOMCalculation
					UOMCalculation.InputUOM 	 			= StockUOM
					UOMCalculation.InputToUOM    			= ItemLocation.SupplementalUOM.UnitOfMeasure
					UOMCalculation.Method		 			= UOMCalculation.Method.ConvertToAlternate
					UOMCalculation.InputQuantity 			= Quantity
					
					if ((IsIssuesOrTransferOrAdjustment or IsOrderEntryShipment)
					and  not InventoryTransaction.IsDirectTransfer
					and  not InventoryTransaction.IsStandardCostValuationUpdate
					and  not IsUnreleased)
						return UOMCalculation.OutputQuantity * -1
					else
						return UOMCalculation.OutputQuantity

		DerivedBeforeQuantityInSupplementalUOM							is a DerivedField        
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (HasSupplementalUOM)
				initialize UOMCalculation
				UOMCalculation.InputQuantity 			= DerivedBeforeQuantity
				UOMCalculation.InputUOM 	 			= DerivedUOM
				UOMCalculation.InputToUOM    			= DerivedSupplementalUOM
				UOMCalculation.Method		 			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
		
		DerivedAfterQuantityInSupplementalUOM							is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
            if (HasSupplementalUOM)
                initialize UOMCalculation
                if (Status.Unreleased)
					if (HasUnequalTransactionAndStockUOM)
						UOMCalculation.InputQuantity	= DerivedAfterQuantityInTransactionUOM
						UOMCalculation.InputUOM 	 	= TransactionUOM
					else
						UOMCalculation.InputQuantity    = DerivedAfterQuantity
						UOMCalculation.InputUOM         = DerivedUOM
                else
                    UOMCalculation.InputQuantity        = StockOnHandQuantity
                	UOMCalculation.InputUOM             = StockUOM
                
                UOMCalculation.InputToUOM               = DerivedSupplementalUOM
                UOMCalculation.Method                   = UOMCalculation.Method.ConvertToAlternate
                return UOMCalculation.OutputQuantity




		DerivedUOM														is a DerivedField  
			type is like UnitOfMeasure
			
			include ValueOfUOM
			return LocalTransactionUOM	


		DerivedBeforeQuantity											is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				return StockOnHandQuantity
			else
				if (!LocalQuantityConversionCheck)
					include ConvertQuantityToStockOrAlternate
					LocalQuantityConversionCheck = true	
				return LocalItemLocationQuantity					


		DerivedAfterQuantity											is a DerivedField  
			type is like Quantity	
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				return StockOnHandQuantity
			else
				if (!LocalQuantityConversionCheck)
					include ConvertQuantityToStockOrAlternate	
					LocalQuantityConversionCheck = true
				if (Status.Unreleased)
					return LocalItemLocationQuantity + LocalQuantity 
				else
					if (HasItemLocationStockUOM)
						return LocalItemLocationQuantity + QuantityInLocationStockUOM
					else
					if (HasUnequalTransactionAndStockUOM
					and not HasItemLocationStockUOM)
						if (IsUOMTrackedIn)
							LocalInputQuantity = Quantity
							include ConversionOfItemLocationQuantityIntoAlternate
							return LocalItemLocationQuantity + LocalOutputQuantity
						else
							return LocalItemLocationQuantity + Quantity
					else
						return LocalItemLocationQuantity + Quantity

		DerivedQuantityInStockUOM										is a DerivedField  
			type is like Quantity	
				precision is Item.NumberOfDecimalsQuantity
			if (HasItemLocationStockUOM)
				return Quantity / DerivedLocationStockUOMMultiplier
			else
				return Quantity

		DerivedAfterQuantityInStock										is a DerivedField  
			type is like Quantity	
				precision is Item.NumberOfDecimalsQuantity
			default label is "AfterQuantity"
			if (HasItemLocationStockUOM)
				return StockOnHandQuantity / DerivedLocationStockUOMMultiplier
			else
			if (Status.Unreleased)
				if (DerivedUOM not = StockUOM)
					initialize UOMCalculation
					UOMCalculation.InputQuantity 			= DerivedAfterQuantity
					UOMCalculation.InputUOM 	 			= DerivedUOM
					UOMCalculation.InputToUOM    			= StockUOM
					UOMCalculation.Method		 			= UOMCalculation.Method.ConvertToAlternate
					return UOMCalculation.OutputQuantity
				else
					return DerivedAfterQuantity
			else
				return StockOnHandQuantity

						

		DerivedBeforeQuantityInTransactionUOM							is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				LocalInputQuantity						= StockOnHandQuantity
				include ConversionOfItemLocationQuantityIntoAlternate
				return LocalOutputQuantity
			else	
				if (!LocalQuantityConversionCheck)
					include ConvertQuantityToStockOrAlternate
					LocalQuantityConversionCheck = true	
				if (Status.Unreleased)
					return LocalAlternateItemLocationQuantity
				else
					if (IsIssuesOrTransferOrAdjustment
					or  IsOrderEntryShipment)
						return LocalAlternateStockOnHandQuantity - DerivedQuantity * -1
					else
						return LocalAlternateStockOnHandQuantity - DerivedQuantity				


		DerivedAfterQuantityInTransactionUOM							is a DerivedField  
			type is like Quantity	
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				LocalInputQuantity						= StockOnHandQuantity
				include ConversionOfItemLocationQuantityIntoAlternate
				return LocalOutputQuantity
			else	
				if (!LocalQuantityConversionCheck)
					include ConvertQuantityToStockOrAlternate	
					LocalQuantityConversionCheck = true
				if (Status.Unreleased)
					if (IsIssuesOrTransferOrAdjustment)
						return LocalAlternateItemLocationQuantity + Quantity * -1
					else
						return LocalAlternateItemLocationQuantity + Quantity
				else
					return LocalAlternateStockOnHandQuantity


		DerivedBeforeSecondaryQuantity   								is a DerivedField        
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				return SecondaryStockOnHandQuantity
			else
				if (Status.Unreleased)
					if (InventoryTransaction.IsInventoryBinTransfer)
						return StockOnHandDetailFromTransactionDetailRel.SecondaryQuantity
					else
						return ItemLocation.SecondaryQuantity
				else
					if (SecondaryStockOnHandQuantity entered
					or  DerivedBeforeQuantity < 0)
						return SecondaryStockOnHandQuantity - SecondaryQuantity


		DerivedAfterSecondaryQuantity									is a DerivedField   
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (IsBinTransferOrCostAdjustmentOrReceiptArchive)
				return SecondaryStockOnHandQuantity
			else
				if (Status.Unreleased)
					if (InventoryTransaction.IsInventoryIssues
					or InventoryTransaction.IsInventoryTransfer)
						return ItemLocation.SecondaryQuantity - SecondaryQuantity
					else
					if (InventoryTransaction.IsInventoryBinTransfer)
						return StockOnHandDetailFromTransactionDetailRel.SecondaryQuantity - SecondaryQuantity
					else
						return ItemLocation.SecondaryQuantity + SecondaryQuantity
				else
					return SecondaryStockOnHandQuantity 


		DerivedCostRoundTo 							is a DerivedField
			type is like InternationalCost
			restricted
			if (Item.NumberOfDecimalsCost = 8)
				return .00000001
			else
			if (Item.NumberOfDecimalsCost = 7)
				return .0000001
			else
			if (Item.NumberOfDecimalsCost = 6)
				return .000001
			else
			if (Item.NumberOfDecimalsCost = 5)
				return .00001
			else
			if (Item.NumberOfDecimalsCost = 4)
				return .0001
			else
			if (Item.NumberOfDecimalsCost = 3)
				return .001
			else
			if (Item.NumberOfDecimalsCost = 2)
				return .01
			else
			if (Item.NumberOfDecimalsCost = 1)
				return .1
			else
			if (Item.NumberOfDecimalsCost = 0)
				return 1
			else
				return 0


		DerivedQuantityUnitCost                                        is a DerivedField
			type is like InternationalAmount
			restricted
			return (Quantity * UnitCost) 
		
		DerivedUsedQuantityUnitCost									is a DerivedField
			type is like InternationalAmount
			restricted
			return (TransientUsedQuantity * UnitCost) 
		
		DerivedQuantityBaseCost									        is a DerivedField
			type is like InternationalAmount
			restricted				
			if (InventoryTransaction.IsVendorReturn
			and AddOnChargeUnitCost entered)
				return ((Quantity * BaseCost) + DerivedQuantityAddOnChargeCost)
			else
				return (Quantity * BaseCost)

		DerivedGLTranAmount									        is a DerivedField
			type is like InternationalAmount
			restricted	
			if (UnitCost entered
			and UnitCostInTransactionCurrency entered)
				return (LocalGLBaseAmount * (UnitCostInTransactionCurrency / UnitCost))
			else
				return LocalGLBaseAmount

		DerivedQuantityCurrentCost										is a DerivedField
			type is like InternationalAmount
			restricted
			if (InventoryTransaction.IsVendorReturn
			and AddOnChargeUnitCost entered)
				return ((Quantity * CurrentCost) + DerivedQuantityAddOnChargeCost)
			else
				return (Quantity * CurrentCost)

		DerivedQuantityAddOnChargeCost								    is a DerivedField
			type is like InternationalAmount
			restricted			
			if (InventoryTransaction.IsVendorReturn
			or InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
				if (VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel exists)
					initialize LocalTotalAddOnChargeUnitCost
					initialize LocalTotalAOCUnitCostInTransactionCurrency
					for each VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel						
						if (UnitCost entered
						and UnitCostInTransactionCurrency entered)
							LocalTotalAOCUnitCostInTransactionCurrency += (Quantity * each.EnteredUnitCost)	
							LocalTotalAddOnChargeUnitCost = (LocalTotalAOCUnitCostInTransactionCurrency / (UnitCostInTransactionCurrency / UnitCost))
						else
							LocalTotalAddOnChargeUnitCost += (Quantity * each.EnteredUnitCost)	
					return LocalTotalAddOnChargeUnitCost
				if (POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel exists)
					initialize LocalTotalAddOnChargeUnitCost
					for each POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel					
						LocalTotalAddOnChargeUnitCost += (Quantity * each.EnteredUnitCost)						
					return LocalTotalAddOnChargeUnitCost		 	
			else 
				return (Quantity * AddOnChargeUnitCost)

		DerivedQuantityBurdenAmount										is a DerivedField
			type is like InternationalAmount
			restricted
			if (OriginatingTransaction(KitchenOrder).KitchenOrder entered
			and InventoryTransaction.IsInventoryReceipt)
				if (KitchenOrderBurdensRel exist)
					return sum KitchenOrderBurdensRel.ActualBurdenCost

		DerivedQuantityUnitCostInTranCurrency							is a DerivedField
			type is like InternationalAmount
			restricted					
			return (Quantity * UnitCostInTransactionCurrency)

		DerivedUsedQuantityAddOnChargeCost								    is a DerivedField
			type is like InternationalAmount
			restricted			
			if (InventoryTransaction.IsVendorReturn
			or InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
				if (VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel exists)
					initialize LocalTotalAddOnChargeUnitCost
					for each VendorReturnLineRel.PurchaseOrderLineAddOnChargesRel						
						LocalTotalAddOnChargeUnitCost += (TransientUsedQuantity * each.EnteredUnitCost)						
					return LocalTotalAddOnChargeUnitCost
				if (POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel exists)
					initialize LocalTotalAddOnChargeUnitCost
					for each POReceiptAdjustmentLineRel.PurchaseOrderAndLineAddOnChargeRel					
						LocalTotalAddOnChargeUnitCost += (TransientUsedQuantity * each.EnteredUnitCost)						
					return LocalTotalAddOnChargeUnitCost		 	
			else 
				return (TransientUsedQuantity * AddOnChargeUnitCost)

		DerivedUsedQuantityUnitCostInTranCurrency							is a DerivedField
			type is like InternationalAmount
			restricted					
			return (TransientUsedQuantity * UnitCostInTransactionCurrency)
		
		DerivedTransactionAmount                                        is a DerivedField  
			type is like InternationalAmount
			restricted
			if (UnitCost entered
			and UnitCostInTransactionCurrency entered)
				return (DerivedQuantityUnitCost * (UnitCostInTransactionCurrency / UnitCost))
			else 
				return DerivedQuantityUnitCost

		DerivedTransactionUOM                                       	is a DerivedField  
			type is like UnitOfMeasure
			default label is "TransactionUOM"
			if (IsCatchWeightItem)
				return SecondaryUOM
			else 
				return TransactionUOM

		DerivedUnitCostInTransactionCurrency							is a DerivedField  
			type is like UnitCost
			restricted
			if (UnitCostInTransactionCurrency entered)
				return UnitCostInTransactionCurrency 
			else 
				return UnitCost
		
		DerivedAddOnChargeUnitCostInTransactionCurrency							is a DerivedField  
			type is like UnitCost
			restricted
			if (UnitCostInTransactionCurrency entered
			and UnitCost entered)
				return (AddOnChargeUnitCost * (UnitCostInTransactionCurrency/UnitCost))
			else 
				return AddOnChargeUnitCost
	    
	    DerivedUsedTransactionAmount                                    is a DerivedField
	    	type is like InternationalAmount
			restricted
			if (UnitCost entered
			and UnitCostInTransactionCurrency entered)
				return (DerivedUsedQuantityUnitCost * (UnitCostInTransactionCurrency / UnitCost))
			else 
				return DerivedUsedQuantityUnitCost
	    
	    DerivedBaseAmount                                             	is a DerivedField  
			type is like InternationalAmount
			restricted
			LocalUnitCostAmount 	= DerivedQuantityUnitCost
			LocalAddOnchargeAmount 	= DerivedQuantityAddOnChargeCost
			return (LocalUnitCostAmount + LocalAddOnchargeAmount)

		DerivedToleranceMessage											is a DerivedField
			type is MessageField
			LocalInputQuantity 		= SecondaryQuantity
			include ConversionOfQuantityFromSecondaryUOMToStockUOM
			LocalQuantityInStockUOM	= LocalOutputQuantity	

			LocalVariancePercent = (((LocalQuantityInStockUOM - Quantity)/LocalQuantityInStockUOM) * 100)		
			if (LocalVariancePercent < 0)
				LocalVariancePercent = LocalVariancePercent * -1
			
			if (LocalVariancePercent > Item.CatchWeightVariancePercent)
				return CatchWeightVarianceMessage

		OriginatingTransactionDocument		is a DerivedField
			type is like InventoryTransaction
			default label is "OriginatingDocument"
			if (!LocalOriginatingTransactionFound)
				include FindOriginatingTransaction
			return LocalOriginatingTransactionDocument

		OriginatingTransactionLine			is a DerivedField
			type is like LineNumber
			default label is "OriginatingLine"
			if (!LocalOriginatingTransactionFound)
				include FindOriginatingTransaction
			return LocalOriginatingTransactionLine


		DerivedAnalyticsAcctUnit			is a DerivedField
			type is AlphaUpper size 25
			restricted
			if (OffsetAccount.AccountingUnit not entered)
				return InventoryAccount.AccountingUnit
			else
				return OffsetAccount.AccountingUnit

		TransactionValue					is a DerivedField
			type is like InternationalAmount	
			restricted
			if (TransactionSystemCode.InventoryControl and InventoryTransaction.InventoryDocumentType.InventoryReceipt)
				return (OpenQuantity * UnitCost)
			else
				return (Quantity * UnitCost)
				
		TransactionCount					is a DerivedField
			type is Numeric 1
			restricted
			return 1

			
		InventoryDistributionAmount			is a DerivedField
			type is like InternationalAmount
			return (sum I1DistributionRel.GLTransactionAmount)

		BlankField is a DerivedField
			type is Alpha 1
			return blank
	
		DerivedStandardUnitCost is a DerivedField
			type is like InternationalCost
			restricted

			if (HasUnequalTransactionAndStockUOM)								
				initialize LocalUnitCost 
				LocalUnitCost	= ItemLocation.StandardCost
				include UnitCostDefaultCalculation
				return UOMCalculation.OutputUnitCost
			else
				return ItemLocation.StandardCost

		DerivedLastReceiptCost	is a DerivedField
			type is like InternationalCost
			restricted

			if (HasUnequalTransactionAndStockUOM)								
				initialize LocalUnitCost 
				LocalUnitCost	= ItemLocation.LastReceiptCost
				include UnitCostDefaultCalculation
				return UOMCalculation.OutputUnitCost
			else 
				return ItemLocation.LastReceiptCost	

		DerivedLastIssueCost	is a DerivedField
			type is like InternationalCost
			restricted

			if (HasUnequalTransactionAndStockUOM)
				initialize LocalUnitCost 
				LocalUnitCost	= ItemLocation.LastIssueCost
				include UnitCostDefaultCalculation
				return UOMCalculation.OutputUnitCost
			else 					
				return ItemLocation.LastIssueCost

		DerivedSerial			is a DerivedField
			type is like ItemSerialNumber
			restricted
			if (action type.Update)
				return blank
			else
				return InventoryTransactionLineDetailsRel.Serial

		DerivedItemGTIN			is a DerivedField
			type is like ItemGTIN
			restricted
			if (action type.Update)
				return blank
			else
				return ItemGTIN
				
		DerivedLot				is a DerivedField
			type is like ItemLot
			restricted
			if (action type.Update)
				return blank
			else
				return InventoryTransactionLineDetailsRel.Lot
		
		DerivedSublot			is a DerivedField
			type is like Sublot
			restricted
			if (action type.Update)
				return blank
			else
				return InventoryTransactionLineDetailsRel.Sublot		
		DerivedPurchaseOrder	is a DerivedField
			type is like PurchaseOrder
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return OriginatingTransaction(PurchaseOrderReceiptLine).PurchaseOrder
			return ""
			
		DerivedVendor			is a DerivedField
			type is like Vendor
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return OriginatingTransaction(PurchaseOrderReceiptLine).PurchaseOrder.Vendor
			return ""
		DerivedBuyer			is a DerivedField
			type is like PurchaseOrder
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return OriginatingTransaction(PurchaseOrderReceiptLine).PurchaseOrder.Buyer
			return ""
		DerivedRequisition		is a DerivedField
			type is like Requisition
			restricted
			if (OriginatingTransaction.BusinessClassName = "RequisitionLine")
				return OriginatingTransaction(RequisitionLine).RequisitionLine.Requisition
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
					return OriginatingTransaction(PurchaseOrderReceiptLine).DerivedRequisition
				else
					return ""
		DerivedRequester		is a DerivedField
			type is like Requester			
			restricted
			if (OriginatingTransaction.BusinessClassName = "RequisitionLine")
				return OriginatingTransaction(RequisitionLine).RequisitionLine.Requisition.Requester
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
					return OriginatingTransaction(PurchaseOrderReceiptLine).DerivedRequester
				else
					return ""
		DerivedRequestingLocation	is a DerivedField
			type is like RequestingLocation
			restricted
			if (OriginatingTransaction.BusinessClassName = "RequisitionLine")
				return OriginatingTransaction(RequisitionLine).Requisition.RequestingLocation
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
					return OriginatingTransaction(PurchaseOrderReceiptLine).DerivedRequestingLocation
				else
					return ""

		DerivedRequisitionLine	is a DerivedField
			type is like RequisitionLine
			restricted
			if (OriginatingTransaction.BusinessClassName = "RequisitionLine")
				return OriginatingTransaction(RequisitionLine).RequisitionLine
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
					return OriginatingTransaction(PurchaseOrderReceiptLine).DerivedRequisitionLine
				else
					return ""
		DerivedReceivedQuantity is a DerivedField		
			type is like Quantity
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return PurchaseOrderReceiptLineRel.EnteredReceivedQuantity
			else										
				return Quantity							

		DerivedLineExtendedAmount is a DerivedField		
			type is like InternationalAmount
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return PurchaseOrderReceiptLineRel.PurchaseOrderLine.ExtendedAmount
			return ""

		DerivedLineUnitCost is a DerivedField		
			type is like InternationalCost
			restricted
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderReceiptLine")
				return PurchaseOrderReceiptLineRel.PurchaseOrderLine.EnteredUnitCost
			return ""


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedInventoryAdjustmentReference is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "SyncInventoryAdjustment_Reference"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		ITShipmentItemXMLBOD is a DerivedField	
			type is XMLDocument
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				if(InventoryTransactionShipmentLineXMLBOD)
					ITShipmentItemXMLBOD = template.IONProcessAdvanceShipNotice_ProcessShipmentItemCleanDocID_ST document for this instance		
					return ITShipmentItemXMLBOD
			else
				if(InventoryTransactionShipmentLineXMLBOD)
					ITShipmentItemXMLBOD = template.IONProcessAdvanceShipNotice_ProcessShipmentItemNonCleanDocID_ST document for this instance		
					return ITShipmentItemXMLBOD
					
		ITAdvanceShipItemXMLBOD is a DerivedField	
			type is XMLDocument
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				if(InventoryTransactionAdvanceShipLineXMLBOD)
					ITAdvanceShipItemXMLBOD = template.IONProcessAdvanceShipNotice_ProcessAdvanceShipItemCleanDocID_ST document for this instance		
					return ITAdvanceShipItemXMLBOD
			else
				if(InventoryTransactionAdvanceShipLineXMLBOD)
					ITAdvanceShipItemXMLBOD = template.IONProcessAdvanceShipNotice_ProcessShipmentItemNonCleanDocID_ST document for this instance		
					return ITAdvanceShipItemXMLBOD
		
		DerivedItemID is a DerivedField	
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId != "Y")
				return Company.FinanceEnterpriseGroup + DerivedDelimiter + Company.GeneralLedgerCompany.BusinessGroup +DerivedDelimiter+ Item
			else
				return Item
				
	    DerivedCrossAE is a DerivedField
			type is Alpha size 100
			restricted
			return InventoryTransaction.DerivedBODCrossAccountingEntity
			
	    DerivedAdvAE is a DerivedField
			type is Alpha size 100
			restricted
			return InventoryTransaction.DerivedITAE
			
		DerivedItemGroup is a DerivedField
			type is Alpha size 100
			restricted
			return Company.GeneralLedgerCompany.BusinessGroup
			
		DerivedOrderQuant is a DerivedField
			type is like Quantity
			restricted
			return (Quantity / TransactionUOMMultiplier)
		
		DerivedOrderQuantity is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedOrderQuant <0)
				return DerivedOrderQuant * -1
			else
				return DerivedOrderQuant
			
		DerivedLineNumber is a DerivedField
			type is Alpha size 50
			return InventoryTransactionLine.LineNumber
			
		DerivedShipmentForUDI is a DerivedField
			type is like WarehouseShipment
			restricted
			if (ItemLocation.IsUDITracked)	
				return WarehouseShipmentLineForTransferRel.WarehouseShipment
			
		DerivedShipmentLineForUDI is a DerivedField
			type is like WarehouseShipmentLine
			restricted
			if (ItemLocation.IsUDITracked)
				return WarehouseShipmentLineForTransferRel.WarehouseShipmentLine	  
			



		
		DerivedLawsonCompany is a DerivedField
			type is Alpha size 4 
			restricted
			return Company using "%d"
		
		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return Company.FinanceEnterpriseGroup
		
		DerivedBODAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedCrossAE
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company.GeneralLedgerCompany.AccountingEntity
			
		DerivedBODDocumentID is a DerivedField
			type is Alpha 75
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return InventoryTransactionLine.InventoryTransaction using "%d"
			else
				return DerivedLawsonCompany + DerivedDelimiter + InventoryTransactionLine.InventoryTransaction using "%d"
		
		DerivedLOCATION is a DerivedField
			type is AlphaUpper size 50
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return InventoryTransaction.InventoryLocation
			else
				return InventoryTransaction.Company using "%d" + DerivedDelimiter + InventoryTransaction.InventoryLocation
		
		DerivedAccountEntity is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedCrossAE
			else
			if (DerivedItemID!="" and Item!="")
				return ""
			else
				return DerivedBODAccountingEntity
		
		DerivedBusinessGroup is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.GeneralLedgerCompany.BusinessGroup
		
		DerivedStatusCode is a DerivedField
			type is Alpha size 10
			restricted
			if (InventoryTransactionLine.ActionCode.Create or InventoryTransactionLine.ActionCode.Update)
				return "Open"
			else
			if (InventoryTransactionLine.ActionCode.Delete)
				return "Deleted"
		
		DerivedInventoryTransactionLineTitle is a DerivedField
			type is Alpha 50
			if (!RecordExists)
				return InventoryTransactionLineTitleNoRecord
			else 
				return InventoryTransactionLineTitle

		DerivedUnitCostLabel is a DerivedField
	        type is MessageField
            if (not Item.IsCatchWeightItem)
	            return UnitCostLabel
    		else
                return UnitCostInCatchweightLabel

		UnreleasedMessage is a MessageField
			restricted
			"Unreleased"
			
		ReleasedMessage is a MessageField
			restricted
			"Released"
			
		GlobalLedgerUpdatedMessage is a MessageField
			restricted
			"GlobalLedgerUpdated"
			
		IntermediateStatusMessage is a MessageField
			restricted
			"IntermediateStatus"
			
		NonGlobalLedgerMessage is a MessageField
			restricted
			"NonGlobalLedger"

		RoundingMessage			is a MessageField
			"ChangedToLocationStockUOM.QuantityRoundedUp."

		
		DerivedStatus is a DerivedField
			type is MessageField
			default label is "Status"
			if (Status.Unreleased)
				return UnreleasedMessage
			else
			if (Status.Released)
				return ReleasedMessage
			else
			if (Status.GlobalLedgerUpdated)
				return GlobalLedgerUpdatedMessage
			else
			if (Status.IntermediateStatus)
				return IntermediateStatusMessage
			else
			if (Status.NonGlobalLedger)
				return NonGlobalLedgerMessage
                
        DerivedStockUOM is a DerivedField
        	type is AlphaUpper size 4
        	if (HasItemLocationStockUOM)
				return DerivedLocationStockUOM
			else
				return StockUOM

		InventoryTransactionLineTitleNoRecord is a LabelField
			"InventoryTransactionLine"

		InventoryTransactionLineTitle is a LabelField
			"InventoryTransaction<InventoryTransaction>_-_Line<InventoryTransactionLine.LineNumber>"

		InventoryTransactionLineDisplay is a LabelField
			"TransactionLine:<InventoryTransactionLine.LineNumber>"

		UnitCostLabel is a LabelField
			"UnitCost"

		UnitCostInCatchweightLabel is a LabelField
			"UnitCostInSecondaryUOM"
		

		DerivedTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplication="Local.ly")
				return InventoryTransaction.DerivedIctTransDate


		DerivedIssueLineQuantityForReturn is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "AvailableForReturn"
			return (IssueInventoryTransactionLineOfReturnRel.DerivedQuantityAvailableForReturn)

		DerivedIssueLineTransactionQuantityForReturn is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "AvailableForReturn"
			return (IssueInventoryTransactionLineOfReturnRel.DerivedForReturnInTransactionUOM)

		DerivedIssueLineSecondaryQuantityForReturn is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "AvailableForReturn"
			return (IssueInventoryTransactionLineOfReturnRel.DerivedSecondaryQuantityAvailableForReturn)

		DerivedSecondaryQuantityDisplay is a DerivedField
			type is Alpha size 18
			default label is "AvailableForReturn"
			if (IsCatchWeightItem)
				if (IsInventoryReturns)
					return DerivedIssueLineSecondaryQuantityForReturn
				else
					return DerivedSecondaryQuantityAvailableForReturn
			else
				return blank

		DerivedSecondaryIssueQuantityDisplay is a DerivedField
			type is Alpha size 18
			default label is "IssueQuantity"
			if (IsCatchWeightItem)
				return TransientSecondayQuantityValue
			else
				return blank
		
		DerivedQuantityAvailableForReturn is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "AvailableForReturn"
			if (Quantity < 0)
				return ((Quantity * -1) - ReturnQuantity)

		DerivedForReturnInTransactionUOM					is a DerivedField  
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			default label is "AvailableForReturn"
			if (Status.Released or Status.NonGlobalLedger or Status.GlobalLedgerUpdated)
				if (HasUnequalTransactionAndStockUOM)
					LocalInputQuantity	=	DerivedQuantityAvailableForReturn
					include ConversionOfItemLocationQuantityIntoAlternate
					return LocalOutputQuantity	
				else
					return DerivedQuantityAvailableForReturn	

		DerivedSecondaryQuantityAvailableForReturn is a DerivedField
			type is like Quantity
			default label is "AvailableForReturn"
			if (SecondaryQuantity < 0)
				return ((SecondaryQuantity * -1) - SecondaryReturnQuantity)
		
		DerivedAccountingEntityXML is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				DerivedAccountingEntityXML = template.IONSyncInventoryAdjAEDocumentID_ST document for this instance		
				return DerivedAccountingEntityXML
			else
				DerivedAccountingEntityXML = template.IONSyncInventoryAdjDocumentID_ST document for this instance		
				return DerivedAccountingEntityXML
				
		InventoryTransactionLinePropertiesXML is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedInventoryAdjustmentReference = "Y" and Reference != "")
				InventoryTransactionLinePropertiesXML += template.IONSyncInventoryAdjLine_Properties_ST document for this instance
				return InventoryTransactionLinePropertiesXML
			else
				return ""

		DerivedOverrideLocation is a DerivedField
			type is Boolean
			restricted
			if (ItemLocation.InventoryLocation not = InventoryTransaction.OriginatingIssueLocation)
				return true


		DerivedBin is a DerivedField
			type is AlphaUpper size 10
			restricted
			if(Bin exists)
				return Bin
			else
				return "*"
		
		SyncRDInventoryTransactionLineLotBODXML is a DerivedField
			type is XMLDocument
			restricted
			if (InventoryTransactionLineDetailsRel exists)
				for each InventoryTransactionLineDetailsRel
					if(each.Lot exists)
						LocalLot = each.Lot
					else
						LocalLot = "*"	
					SyncRDInventoryTransactionLineLotBODXML += template.IONSyncSyncReceiveDelivery_InventoryTransactionLineLot_ST document for this instance
			else
				LocalLot = "*"
				SyncRDInventoryTransactionLineLotBODXML = template.IONSyncSyncReceiveDelivery_InventoryTransactionLineLot_ST document for this instance
		
		DerivedItemDescription is a DerivedField
			type is Alpha size 60
			restricted
			return Item.Description

		DerivedReceivingDetailQuantity is a DerivedField								
			type is like Quantity
			restricted
			return sum InventoryTransactionLineDetailsReceivingCompletedRel.Quantity

		ProcessAdjustmentDocumentLineDetailXML is a DerivedField
			type is XMLDocument
			restricted
			if (ItemLocation.UDITracked.UDIRequiredAtReceipt)
				for each InventoryUDIDetailRel
					ProcessAdjustmentDocumentLineDetailXML += template.InventoryAdjustmentDocumentLineUDIDetail_ST document for each
			else
			if (InventoryTransactionLineDetailsRel exists)
				for each InventoryTransactionLineDetailsRel
					ProcessAdjustmentDocumentLineDetailXML += template.InventoryAdjustmentDocumentLineDetail_ST document for each
			else
				return ""    

        ProcessIssueDocumentLineDetailXML is a DerivedField
			type is XMLDocument
			restricted
			if (ItemLocation.IsUDITracked)
				for each InventoryUDIDetailRel
					ProcessIssueDocumentLineDetailXML += template.InventoryIssueDocumentLineUDIDetail_ST document for each
			else
			if (InventoryTransactionLineDetailsRel  exists)
				for each InventoryTransactionLineDetailsRel
					ProcessIssueDocumentLineDetailXML += template.InventoryIssueDocumentLineDetail_ST document for each
			else
				return ""

		ProcessTransferDocumentLineDetailXML is a DerivedField
			type is XMLDocument
			restricted
			if (ItemLocation.UDITracked.UDIRequiredAtReceipt)
				for each InventoryUDIDetailRel
					ProcessTransferDocumentLineDetailXML += template.InventoryTransferDocumentLineUDIDetail_ST document for each
			else
			if (InventoryTransactionLineDetailsRel  exists)
				for each InventoryTransactionLineDetailsRel
					ProcessTransferDocumentLineDetailXML += template.InventoryTransferDocumentLineDetail_ST document for each
			else
				return ""

		ProcessReceivingTransferDocumentLineDetailXML is a DerivedField
			type is XMLDocument
			restricted
			if (ItemLocation.UDITracked.UDIRequiredAtReceipt)
				for each InventoryUDIDetailRel
					ProcessReceivingTransferDocumentLineDetailXML += template.InventoryReceivingTransferDocumentLineUDIDetail_ST document for each
			else
			if (InventoryTransactionLineDetailsRel exists)
				for each InventoryTransactionLineDetailsRel
					ProcessReceivingTransferDocumentLineDetailXML += template.InventoryReceivingTransferDocumentLineDetail_ST document for each

		DerivedItemUOM is a DerivedField
            type is Text
            restricted
            return Item.StockUOM

		DerivedPrintLineQuantity is a DerivedField
			type is like Quantity
			restricted
			if (InventoryTransaction.IsInventoryIssues or InventoryTransaction.IsInventoryTransfer)
				return Quantity * -1
			else
				return Quantity

		DerivedToBin is a DerivedField
			type is Text
			restricted
			if (FromToCompanyLocationBin.FromToBin entered)
				return FromToCompanyLocationBin.FromToBin
			else
				return ""

		DerivedAfterOpenQuantity is a DerivedField
			type is like Quantity
			return OpenQuantity - Quantity

			
	Dimensions

		GLAccountingUnitRel.AccountingUnit
			dimension name is AccountingUnit
			caption is representative text
			Attributes
				Description
				Level
				SequenceNumber

		OffsetAccount.GeneralLedgerChartAccount
			dimension name is ChartAccount
			caption is representative text
			Attributes
				AccountDescription
				ChartSection				
				AccountType
				AccountSubType
				ChartType
				SystemAccount
				NaturalBalance
				Account
				GeneralLedgerSubAccount
				Level
				SequenceNumber
				XbrlTag

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays

		InventoryTransaction.InventoryDocumentType
			dimension name is InventoryDocumentType
	
		InventoryTransaction
			dimension name is DocumentNumber
			Attributes
				Company
				InventoryDocumentType


 		InventoryLocation
 			dimension name is Location
			Attributes
				Company
				Name
				LocationType
				LocationTypeDescription
				PostalAddress
				GlobalLocationNumber

		Item
			caption is "<ItemLongName>"
			Attributes
				ItemLongName
				ItemGroup
				Item				
				Description
				Description2
				StockUOM
				GenericName
				MajorPurchasingClass
				MajorPurchasingClassDesc
				MinorPurchasingClass
				MinorPurchasingClassDesc
				MajorInventoryClass
				MajorInventoryClassDesc
				MinorInventoryClass
				MinorInventoryClassDesc
				UNSPSCCode.UNSPSCSegment
				UNSPSCCode.UNSPSCFamily
				UNSPSCCode.UNSPSCClass
				UNSPSCCode.UNSPSCCommodity
				Active
				AddedDate
				CommodityCode
				Consignment	    		
				HazardCode	    		
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
			Hierarchies 
				PurchasingClass 
					base level included
					Attributes 
						ItemGroup 
						MajorPurchasingClass 
						MinorPurchasingClass
				InventoryClass 
					base level included
					Attributes 
						ItemGroup 
						MajorInventoryClass 
						MinorInventoryClass
				UNSPSC 
					base level included
					Attributes 
						ItemGroup 
						UNSPSCCode.UNSPSCSegment 
						UNSPSCCode.UNSPSCFamily
						UNSPSCCode.UNSPSCClass
						UNSPSCCode.UNSPSCCommodity
				Manufacturer 
					base level included
					Attributes 
						ItemGroup 
						Manufacturer.ManufacturerCode 
						Manufacturer.ManufacturerDivision
						ManufacturerNumber
				HazardCode
					base level included
					Attributes 
						ItemGroup 
						HazardCode

		InventoryTransaction.FromToCompanyLocation.RequestingLocation
			dimension name is RequestingLocation
			
		TransactionSystemCode

	Measures
		Quantity
		UnitCost
		TransactionValue
		TransactionCount


    Conditions

		IsNotValidForDistributions
			restricted
			when  (InventoryTransaction.IsInventoryBinTransfer
			or     InventoryTransaction.IsInventoryIntransitReceiving
			or    (TransactionSystemCode.PurchaseOrder and !IsVendorReturnAdjustmentCancelOrCostAdjustment)
			or    (TransactionSystemCode.OrderEntry    and  InventoryTransaction.IsShipment)
			or    (TransactionSystemCode.OrderEntry	   and  InventoryTransaction.InventoryDocumentType.CustomerReturn))
			
		IsVendorReturnAdjustmentCancelOrCostAdjustment
			restricted
			when (InventoryTransaction.InventoryDocumentType.VendorReturnAdjustment
			or    InventoryTransaction.InventoryDocumentType.VendorReturn
			or    InventoryTransaction.InventoryDocumentType.VendorReturnCancel
			or    InventoryTransaction.IsCostAdjustment
			or	  IsReceivingAdjustment
			or    IsInspection
			or	  InventoryTransaction.IsPurchaseOrderReceipt)


		HasValidLocationUOM
			restricted
			when (TransactionSystemCode.PurchaseOrder
			or    LocationItemUOMRel.OKForTransaction)


		HasValidUOM
			restricted
			when (TransactionSystemCode.PurchaseOrder								
			or   (ItemTransactionUnitOfMeasureRel.ValidForInventoryTransactions.Valid
			or    ItemTransactionUnitOfMeasureRel.ValidForInventoryTransactions.Default))

        HasWarehouseShipmentCreated
        	restricted
        	when ((TransactionSystemCode.OrderEntry
			and    InventoryTransaction.IsShipment)
			or (TransactionSystemCode.Requisition
			and (InventoryTransaction.InventoryDocumentType.DirectTransfer
			or  InventoryTransaction.InventoryDocumentType.InventoryIssue
			or  InventoryTransaction.InventoryDocumentType.InventoryTransfer)))
			
        HasOffsetAccount
            classic name is CREDITACCOUNT
           	restricted  
            when (OffsetAccount entered)	

        LineDetailExists
            classic name is DETAIL-EXISTS
        	restricted
            when (first InventoryTransactionLineDetailsRel exists)

        IsHistoryReport
        	restricted
            when ((InventoryTransaction.InventoryDocumentType.InventoryIssue
            or    InventoryTransaction.InventoryDocumentType.RequisitionReturn)
            and   Status.GlobalLedgerUpdated)

        IsReleasedOrIntermediate
            classic name is ICTSET4
        	restricted
            when (Status.Released
            or    Status.IntermediateStatus)

		IsReleasedGLUpdatedOrIntermediate
			restricted
			when (Status.Released
			or    Status.GlobalLedgerUpdated
			or    Status.IntermediateStatus)

        IsUnreleased
            classic name is ICTSET5
        	restricted
            when (Status.Unreleased)

		IsReleased
			restricted
			when (Status.Released)

        IsInspection
        	restricted
            when (InventoryTransaction.InventoryDocumentType.RejectedInspectionItem
            or    InventoryTransaction.InventoryDocumentType.AcceptedInspectionItem)

        HasInventoryAccount
            classic name is INVENTORYACCT
        	restricted
            when (InventoryAccount.AccountingUnit entered)

        IsInventoryIssue
        	restricted
            when (TransactionSystemCode.InventoryControl
            and   InventoryTransaction.InventoryDocumentType.InventoryIssue)

        RecallProductItemForItemIssueHardErrorExists
			restricted
			when (RecallProductItemForItemIssueHardErrorRel exists)
			
		RecallProductItemForItemIssueWarningExists
			restricted
			when (RecallProductItemForItemIssueWarningRel exists)
        
        RecallProductItemForItemReceiptHardErrorExists
			restricted
			when (RecallProductItemForItemReceiptHardErrorRel exists)
			
		RecallProductItemForItemReceiptWarningExists
			restricted
			when (RecallProductItemForItemReceiptWarningRel exists)
        
        HasManufacturerID
            classic name is MFG-INFO-EXIST
        	restricted
            when (ManufacturerID entered)

        IsPOReceiving
        	restricted
            when (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)

        IsPosted
        	restricted
            when (Status.GlobalLedgerUpdated)

        HasInventoryReasonCode
            classic name is REASONCODE
        	restricted
            when (InventoryReasonCode entered)

        IsReceivingAdjustment
        	restricted
            when (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)

		AdjustmentOrInspection
			when (IsReceivingAdjustment
			or   IsInspection)

        IsNotUnreleased
        	restricted
            when (not Status.Unreleased)
            
        HasMultipleDetailLines
        	restricted
        	when (DetailLineCount > 1
        	and   IntransitReceivingStatus != 3)    

        IsRequisitionReturn
        	restricted
            when (InventoryTransaction.InventoryDocumentType.RequisitionReturn)

		IsInventoryReturns
        	restricted
            when (InventoryTransaction.InventoryDocumentType.InventoryReturns)

        IsRequisition
        	restricted
            when (TransactionSystemCode.Requisition)

        IsUnposted
        	restricted
            when (Status.Unreleased
            and   InventoryTransaction.IsInventoryIssues
            or    InventoryTransaction.IsInventoryReceivingTransfer
			or    InventoryTransaction.IsInventoryAdjustments
            and   Quantity < 0)

        IsVendorReturn
        	restricted
            when (InventoryTransaction.InventoryDocumentType.VendorReturn
            or    InventoryTransaction.InventoryDocumentType.VendorReturnAdjustment
            or    InventoryTransaction.InventoryDocumentType.VendorReturnCancel)

		IsItemLocationLotTracked
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtIssue
			or    ItemLocation.LotTracked.LotRequiredAtReceipt)
		
		IsItemLocationSerialTracked
			restricted
			when (ItemLocation.SerialTracked.SerialRequiredAtIssue
			or 	  ItemLocation.SerialTracked.SerialRequiredAtReceipt)
			
		IsItemLocationBinTracked
			restricted
			when (ItemLocation.BinTracked)
			
		IsBinTrackedAndBinEntered
			restricted
			when (ItemLocation.BinTracked
			and   Bin entered)
			
		IsBinTrackedOnlyAndMultipleBinsEntered
			restricted
			when (IsBinTrackedAndMultipleBinsEntered
			and  !IsItemLocationSerialTracked
			and  !IsItemLocationLotTracked)
					
		IsBinTrackedAndInventoryTransfer
			restricted
			when (ItemLocation.BinTracked
			and   InventoryTransaction.IsInventoryTransfer)
		
		IsBinTrackedAndMultipleBinsEntered
			restricted
			when (ItemLocation.BinTracked
			and   MultipleBins entered)
			
		IsBinAndMultipleBinsNotEnteredForIntransitReceiving
			restricted
			when (ItemLocation.BinTracked
			and    !MultipleBins
            and    !Bin entered)
            
        IsCatchWeightQuantityForIntransitReceiving
        	restricted
        	when (Item.IsCatchWeightItem
        	and  Quantity != OpenQuantity)    
 
        IsCatchWeightItem
        	restricted
        	when (Item.IsCatchWeightItem)

		HasToItemLocationStockUOM
			when (FromToCompanyItemLocationRel.HasItemLocationStockUOM)

		HasItemLocationStockUOM
			when (ItemLocation.HasItemLocationStockUOM)

		HasSupplementalUOM
			when (ItemLocation.SupplementalUOM.UnitOfMeasure entered)

        DisplaySupplementalQuantities
        	when (HasSupplementalUOM
        	and   not Item.IsCatchWeightItem)

        DisplayUnitCostForCatchWeight
        	restricted
        	when (ItemLocation.DisplayUnitCost
        	and   Item.IsCatchWeightItem)

        DisplayUnitCostForNonCatchWeight
        	restricted
        	when (ItemLocation.DisplayUnitCost
        	and   not Item.IsCatchWeightItem)

		IsCatchWeightItemDisplay
        	restricted
        	when (Item.IsCatchWeightItem
        	and	  Status.Unreleased)
        
        IsPurchaseOrderReceipt
        	restricted
        	when (TransactionSystemCode.PurchaseOrder
        	and   InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
        
        IsPurchaseOrderReceiptAdjustment
        	restricted
        	when (TransactionSystemCode.PurchaseOrder
        	and   InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)
        	              	   	

		IsIncreaseStock
			restricted
			when (InventoryTransaction.IsInventoryReceipt
			or    InventoryTransaction.IsInventoryReceivingTransfer
			or    IsPurchaseOrderReceipt											
			or    InventoryTransaction.IsCustomerReturn
			or	  InventoryTransaction.IsRequisitionReturn
			or    InventoryTransaction.IsInventoryReturns
			or   (InventoryTransaction.IsInventoryAdjustments
			and   (Quantity > 0 or SecondaryQuantity > 0))
			or   (InventoryTransaction.IsInventoryIntransitReceiving
			and   (Quantity > 0 or SecondaryQuantity > 0))
			or   (InventoryTransaction.IsInventoryIssues
			and   (Quantity < 0 or SecondaryQuantity < 0))
			or   (IsPurchaseOrderReceiptAdjustment
			and   (Quantity > 0 or SecondaryQuantity > 0))
			or   (InventoryTransaction.IsVendorReturnCancel
			and   (Quantity > 0 or SecondaryQuantity > 0)))


		IsDecreaseStock
			restricted
			when (InventoryTransaction.IsInventoryTransfer
			or   (InventoryTransaction.IsInventoryIssues
			and   (Quantity > 0 or SecondaryQuantity > 0))
			or 	 (InventoryTransaction.IsInventoryAdjustments	
			and   (Quantity < 0 or SecondaryQuantity < 0))
			or   (InventoryTransaction.IsInventoryBinTransfer)
			or   (IsPurchaseOrderReceiptAdjustment
			and   (Quantity < 0 or SecondaryQuantity < 0)) 
			or   (InventoryTransaction.IsVendorReturn
			and   (Quantity > 0 or SecondaryQuantity > 0))
			or    InventoryTransaction.IsDirectTransfer
			or    InventoryTransaction.IsShipment)

		IsNegativePurchaseOrderReceiptAdjustment
			restricted
			when (IsPurchaseOrderReceiptAdjustment
			and  (Quantity < 0 or SecondaryQuantity < 0))

		IsIssuesOrTransfer
			restricted							
			when (InventoryTransaction.IsInventoryTransfer
			or	  InventoryTransaction.IsInventoryIssues
			or    InventoryTransaction.IsDirectTransfer)
				
		IsIssuesOrTransferOrAdjustment
			when (IsIssuesOrTransfer
			or    IsCostAdjustment)
		
		IsNegativeAdjustmentOrNoCharge
			restricted
			when ((InventoryTransaction.IsInventoryAdjustments
			and   Quantity < 0)									
			or    (Quantity > 0
			and   ItemLocation.NoCharge))

		IsItemLocationNoCharge
			restricted
			when (Quantity > 0
			and   ItemLocation.NoCharge)

		DisplayInTransactionUOM
			restricted
			when ((HasUnequalTransactionAndStockUOM and not HasItemLocationStockUOM)
			or    (HasItemLocationStockUOM and TransactionUOM not = DerivedLocationStockUOM))

		DisplayInTrackedUOM
			restricted
			when (IsTrackedInAndAlternateStockUOM
			and   not HasItemLocationStockUOM)

		DisplayInItemStockUOM
			restricted
			when (not IsTrackedInAndAlternateStockUOM
			and   not HasItemLocationStockUOM)

		DisplayInLocationStockUOM
			restricted
			when (HasItemLocationStockUOM)

		DisplayInSecondaryUOM
			restricted
			when (IsCatchWeightItem
			and	 (DerivedBeforeSecondaryQuantity entered
			or 	  DerivedAfterSecondaryQuantity  entered))

		DisplayInSupplementalUOM
			restricted
			when (HasSupplementalUOM)

		IsTrackedInAndAlternateStockUOM
			restricted
			when (ItemTransactionUnitOfMeasureRel.TrackedIn
			and   ItemTransactionUnitOfMeasureRel.ItemUOM.UnitOfMeasure != StockUOM)             
		
		HasUnequalTransactionAndStockUOM
			restricted
			when (TransactionUOM != StockUOM)
		
		HasDifferentLotExpirationDate
			restricted
			when (InventoryTransactionLineDetailsWithDifferentLotExpiryRel exists)	

		IsSerialTracked
			restricted
			when (!ItemLocation.SerialTracked.NotSerialTracked)
					  		 				
		IsBinTrackedForIssueAndTransfer
			restricted
			when (ItemLocation.BinTracked
			and  (InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsInventoryIssues))
		
		IsBinTrackedOnlyNotLotSerailTracked
			restricted
			when ((IsItemLocationLotTracked
			or     IsItemLocationSerialTracked)
			or	 ((IsItemLocationLotTracked
			or     IsItemLocationSerialTracked)
			and    IsBinTrackedAndMultipleBinsEntered))
								
		TransactionDetailRequiredAtReceipt
			restricted
			when ((ItemLocation.LotTracked.LotRequiredAtReceipt    
			or 	   ItemLocation.SerialTracked.SerialRequiredAtReceipt
			or     IsItemLocationBinTracked)
			and   (InventoryTransaction.IsInventoryReceipt
			or     InventoryTransaction.IsInventoryAdjustments
			or     InventoryTransaction.IsInventoryTransfer
			or     InventoryTransaction.IsInventoryIntransitReceiving
			or     InventoryTransaction.IsInventoryReceivingTransfer
			or     InventoryTransaction.IsDirectTransfer
			or     InventoryTransaction.IsVendorReturn
			or     InventoryTransaction.IsVendorReturnCancel
			or     InventoryTransaction.IsCustomerReturn
			or     InventoryTransaction.IsAcceptedInspection
			or     InventoryTransaction.IsRejectedInspection
			or     InventoryTransaction.IsInventoryReturns
			or     InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or     InventoryTransaction.IsPurchaseOrderReceipt
			or     InventoryTransaction.IsInventoryBinTransfer))
			
		TransactionUDIDetailRequiredAtReceipt
			restricted
			when  (ItemLocation.UDITracked.UDIRequiredAtReceipt
			and   (InventoryTransaction.IsInventoryReceipt
			or     InventoryTransaction.IsInventoryAdjustments
			or     InventoryTransaction.IsInventoryTransfer
			or     InventoryTransaction.IsInventoryIntransitReceiving
			or     InventoryTransaction.IsInventoryReceivingTransfer
			or     InventoryTransaction.IsDirectTransfer
			or     InventoryTransaction.IsVendorReturn
			or     InventoryTransaction.IsVendorReturnCancel
			or	   InventoryTransaction.IsInventoryReturns
			or     InventoryTransaction.IsCustomerReturn
			or     InventoryTransaction.IsAcceptedInspection
			or     InventoryTransaction.IsRejectedInspection
			or     InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or     InventoryTransaction.IsPurchaseOrderReceipt
			or     InventoryTransaction.IsInventoryBinTransfer))

		IsItemLocationBinTrackedAndUDIRequiredAtIssue
			restricted
			when  (ItemLocation.UDITracked.UDIRequiredAtIssue    
			and    IsItemLocationBinTracked)

		ItemLocationDetailTracked
			restricted
			when (ItemLocation.IsSerialTracked
			or    ItemLocation.IsLotTracked
			or    IsItemLocationBinTracked)
		
		ItemLocationUDIDetailTracked
			restricted
			when (ItemLocation.UDITracked.UDIRequiredAtReceipt
			or    ItemLocation.UDITracked.UDIRequiredAtIssue)

		UDIRequiredNotDetailTracked
			restricted
			when (ItemLocation.IsUDITracked
			and   !ItemLocationDetailTracked)

		NegativeIssueLotTrackedAtIssue
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtIssue
            and     not ItemLocation.BinTracked
            and     DerivedQuantity < 0)

		IsDetailTransaction
			restricted			

			when ((ItemLocationDetailTracked
            and  ((InventoryTransaction.IsInventoryIssues 
            and    not NegativeIssueLotTrackedAtIssue)
            or     InventoryTransaction.IsInventoryReturns))
            or    (InventoryTransactionLineDetailsRel exists
            and   (TransactionSystemCode.Requisition
            or     TransactionSystemCode.OrderEntry
            or     TransactionSystemCode.WorkOrder))
            or   TransactionDetailRequiredAtReceipt)

		IsUDIDetailTransaction
			restricted			
			when ((ItemLocationUDIDetailTracked
			and   (InventoryTransaction.IsInventoryIssues or InventoryTransaction.IsInventoryReturns))
			or   (InventoryUDIDetailRel exists
			and   (TransactionSystemCode.Requisition
			or     TransactionSystemCode.OrderEntry))
			or     TransactionUDIDetailRequiredAtReceipt)

		ShowDetailPanel
			restricted
			when (((InventoryTransaction.IsInventoryBinTransfer and (ItemLocation.IsSerialTracked or ItemLocation.IsLotTracked))
			or     (not InventoryTransaction.IsInventoryBinTransfer and IsDetailTransaction))
			and     not ShowUDIDetailPanel and not ShowUDIDetailFromWHPanel)

		ShowUDIDetailPanel
			restricted
			when (TransactionSystemCode.InventoryControl and not ShowUDIDetailFromWHPanel
			and	((InventoryTransaction.IsInventoryBinTransfer and ItemLocation.IsUDITracked)
			or   (not InventoryTransaction.IsInventoryBinTransfer and IsUDIDetailTransaction)))
		
		ShowUDIDetailFromWHPanel
			restricted
			when (InventoryUDIDetailForWHRel exists)
			
		ShowReceivingBinPanel
			restricted
			when (MultipleBins and not IsUDIDetailTransaction and not ShowReceivingUDIBinForWHPanel)

		ShowReceivingDetailPanel
			restricted
			when (InventoryTransaction.IsInventoryIntransitReceiving
			and   (ItemLocation.IsLotTracked
			or   ItemLocation.IsSerialTracked
			or   ItemLocation.BinTracked))

		ShowReceivingDetailAndBinPanel
			restricted
			when ( ShowReceivingBinPanel
			or    ShowReceivingDetailPanel)
		
		ShowReceivingUDIBinPanel
			restricted
			when (TransactionSystemCode.InventoryControl and MultipleBins
			and   IsUDIDetailTransaction and not ShowReceivingUDIBinForWHPanel)
			
		ShowReceivingUDIBinForWHPanel
			restricted
			when (MultipleBins and ShowUDIDetailFromWHPanel)

		ShowReturnsDetailPanel
			restricted
			when (IsDetailTransaction and not IsUDIDetailTransaction)
		
		ShowReturnsUDIBinPanel
			restricted
			when (MultipleBins and IsUDIDetailTransaction)

		HasSufficientStockOnHandAvailableQuantity
			restricted
			when (LocalStockOnHandAvailableQuantity > 0
			and ((LocalQuantityOrSecondaryQuantity 		<= LocalStockOnHandAvailableQuantity)
			and  (LocalQuantityOrSecondaryQuantity * -1 <= LocalStockOnHandAvailableQuantity))) 
					
		HasSufficientItemLocationSecondaryAvailableQuantity
			restricted
			when (LocalItemLocationSecondaryAvailableQuantity > 0
			and ((LocalSecondaryQuantity 	  <= LocalItemLocationSecondaryAvailableQuantity)
			and  (LocalSecondaryQuantity * -1 <= LocalItemLocationSecondaryAvailableQuantity))) 
					
 		HasDifferentQuantitySecondaryQuantitySigns
 			restricted
			when ((Quantity > 0 and SecondaryQuantity < 0)
			or    (Quantity < 0 and SecondaryQuantity > 0))
				
		IsBinTrackedForBinTransferAndIssueTransfer
			restricted
			when (InventoryTransactionLine.IsItemLocationBinTracked
			and  (InventoryTransaction.IsInventoryBinTransfer
			or 	  InventoryTransaction.IsInventoryTransfer))
		
		IsBinTrackedForBinTransfer
			restricted				
			when (InventoryTransactionLine.IsItemLocationBinTracked
			and   InventoryTransaction.InventoryDocumentType.InventoryTransfer)

		IsReceiptAdjustmentsOrTransfer
			restricted
			when (InventoryTransaction.IsInventoryReceipt
			or    InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsInventoryAdjustments)

		HasDetailCreatedForBin
			restricted
			when (!MultipleBins                                                                                                     
			and  ((IsReceiptAdjustmentsOrTransfer                       
			and   (ItemLocation.LotTracked.LotRequiredAtIssue              
			or     ItemLocation.SerialTracked.SerialRequiredAtIssue))
			or   (InventoryTransaction.IsInventoryIssues
			and   (!IsItemLocationLotTracked    
			and    !IsItemLocationSerialTracked))))
		
		IsSingleBinShipmentReturn
			restricted
			when (InventoryTransaction.IsInventoryReturns
			and  (not IsItemLocationLotTracked and not IsItemLocationSerialTracked)
			and  IssueInventoryTransactionLineOfReturnRel.InventoryTransactionLine.WarehouseShipment entered
			and  IssueInventoryTransactionLineOfReturnRel.DetailLineCount  = 1)
					
		IsBinTrackedItemWithSingleBin
			restricted
			when (IsItemLocationBinTracked    
			and  (HasDetailCreatedForBin  
			or   (!IsItemLocationLotTracked   
			and  !IsItemLocationSerialTracked  
			and  !MultipleBins)))


		IsUOMTrackedIn
			restricted
			when (ItemTransactionUnitOfMeasureRel.TrackedIn)
		
		IsPlainItemWithSingleUOM
			restricted								
			when (!ItemLocation.IsLotTracked
			and   !ItemLocation.IsSerialTracked
			and   !ItemLocation.BinTracked
			and   (DerivedMultipleUOM <= 1 or HasItemLocationStockUOM))					    		
		
		IsTransfers
			restricted
			when (InventoryTransaction.IsInventoryIntransitReceiving
			or   InventoryTransaction.IsInventoryReceivingTransfer)
			
		IsStorageCodeMismatch
			restricted
			when (Bin entered
			and  !MultipleBins
			and  Bin.StorageCode != ItemLocation.StorageCode)

		IsBackOrderExist
			restricted
			when (InventoryTransaction.IsInventoryReceipt
			and   ItemLocation.BackorderedQuantity entered)
			
		IsLotTrackedAtIssueForIssuesOrTransfer
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtIssue
			and	 (InventoryTransaction.IsInventoryIssues
			or    InventoryTransaction.IsInventoryTransfer
			or    InventoryTransaction.IsDirectTransfer
			or    InventoryTransaction.IsShipment))

		IsStockOnHandUpdateOrCreate 
			restricted														
    		when (InventoryTransaction.IsInventoryReceipt
    		or    InventoryTransaction.IsPurchaseOrderReceipt
    		or    InventoryTransaction.IsPurchaseOrderReceiptAdjustment
    		or 	  InventoryTransaction.IsInventoryIssues    
			or	  InventoryTransaction.IsInventoryReturns
    		or    InventoryTransaction.IsInventoryTransfer
    		or    InventoryTransaction.IsDirectTransfer
    		or    InventoryTransaction.IsInventoryReceivingTransfer		
			or 	  InventoryTransaction.IsInventoryAdjustments
			or    InventoryTransaction.IsVendorReturn
			or    InventoryTransaction.IsVendorReturnCancel
			or    InventoryTransaction.IsRequisitionReturn
			or    InventoryTransaction.IsCustomerReturn
			or    InventoryTransaction.IsShipment
			or   (InventoryTransaction.IsAcceptedInspection
			or   (InventoryTransaction.IsRejectedInspection and OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).WriteOff.WriteOff)))	
		
		IsForInventoryCostHistory
			restricted
    		when (InventoryTransaction.IsInventoryReceipt
    		or 	  InventoryTransaction.IsInventoryIssues    
			or	  InventoryTransaction.IsInventoryReturns
    		or    InventoryTransaction.IsInventoryTransfer
    		or    InventoryTransaction.IsDirectTransfer
    		or    InventoryTransaction.IsInventoryReceivingTransfer		
			or 	  InventoryTransaction.IsInventoryAdjustments
			or    InventoryTransaction.IsInventoryBinTransfer				
			or    InventoryTransaction.IsCostAdjustment
			or    InventoryTransaction.IsVendorReturn
			or    InventoryTransaction.IsVendorReturnCancel
			or    InventoryTransaction.IsPurchaseOrderReceiptAdjustment
			or	  InventoryTransaction.IsPurchaseOrderReceipt
			or    InventoryTransaction.IsCustomerReturn
			or 	  InventoryTransaction.IsRequisitionReturn
			or	  InventoryTransaction.IsShipment)
							
		IsReceiptAdjustmentsIssuesAndIntransitReceiving											
			restricted
    		when (InventoryTransaction.IsInventoryReceipt
    		or 	  InventoryTransaction.IsInventoryIssues  
			or	  InventoryTransaction.IsInventoryReturns
    		or    InventoryTransaction.IsInventoryTransfer
    		or    InventoryTransaction.IsInventoryBinTransfer  
    		or    InventoryTransaction.IsInventoryIntransitReceiving	
    		or    InventoryTransaction.IsInventoryReceivingTransfer	
			or 	  InventoryTransaction.IsInventoryAdjustments)	
			  				   
		IsLineValuesChanged
			restricted
			when (Bin changed

			or    Quantity  != TransientQuantityValue 
			or    TransactionUOM changed

			or    SecondaryQuantity  != TransientSecondayQuantityValue)
		









					
   		IsIntransitReceivingOrCostAdjustment
   			restricted
   			when (InventoryTransaction.IsInventoryIntransitReceiving
   			or    InventoryTransaction.IsCostAdjustment)

		IsUnitCostNotRequiredForIssues
			restricted                                    
			when (InventoryTransaction.IsInventoryIssues
			and  (Quantity > 0
			or   (Quantity < 0
			and   ItemLocation.NoCharge)))
		
		IsUnitCostNotRequiredForAdjustments
			restricted
			when (InventoryTransaction.IsInventoryAdjustments
			and  (Quantity < 0
			or   (Quantity > 0
			and   ItemLocation.NoCharge)))
	
		IsUnitCostNotRequiredForReceipts
			restricted
			when (InventoryTransaction.IsInventoryReceipt
			and   ItemLocation.NoCharge)

		IsUnitCostNotRequiredForInventoryReturns
			restricted
			when (InventoryTransaction.IsInventoryReturns
			and   ItemLocation.NoCharge)
   		
   		IsBinTransferOrCostAdjustment
   			restricted
   			when (InventoryTransaction.IsCostAdjustment
			or    InventoryTransaction.IsInventoryBinTransfer)		   
		
		IsBinTransferOrCostAdjustmentOrReceiptArchive
			restricted
			when (IsBinTransferOrCostAdjustment
			or    InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptArchive)

		IsBinTrackedOnlyNotLotTrackedOrSerialTracked
			restricted
			when (ItemLocation.BinTracked
			and   !ItemLocation.IsLotTracked
			and   !ItemLocation.IsSerialTracked)
		
		IsBinTrackedOnlyUDITracked
			restricted
			when (IsBinTrackedOnlyNotLotTrackedOrSerialTracked
			and   ItemLocation.IsUDITracked)

		IsBinTrackedOnlyUDITrackedReceivingTransfer
			restricted
			when (IsBinTrackedOnlyNotLotTrackedOrSerialTracked
			and   ItemLocation.IsUDITracked
			and  !InventoryTransaction.IsInventoryReceivingTransfer)

		IsBinTrackedForBinTransferAndInventoryTransfer
			restricted
			when (InventoryTransactionLine.IsItemLocationBinTracked
			and  (InventoryTransaction.IsInventoryBinTransfer
			or 	  InventoryTransaction.IsInventoryTransfer))
			
		IsBinTrackedAndNotMultiplesBin
			restricted 
			when (IsItemLocationBinTracked
            and !MultipleBins) 


		IsValidTransactionSystemCodes
			restricted
			when (TransactionSystemCode.InventoryControl
			or    TransactionSystemCode.Requisition
			or    TransactionSystemCode.OrderEntry
			or    TransactionSystemCode.WorkOrder
			or	  TransactionSystemCode.PurchaseOrder)


		IsIcPoCostAdjustment
			restricted
			when (InventoryTransaction.IsCostAdjustment
			and  (TransactionSystemCode.InventoryControl
			or    TransactionSystemCode.PurchaseOrder))
			
		IsInventoryTransaction
			restricted
			when (TransactionSystemCode.InventoryControl)

		IsTransactionCodeInventoryOrRequisition
			restricted
			when (TransactionSystemCode.InventoryControl
			or    TransactionSystemCode.Requisition)	
		
		IsToLocationDetailTracked										
			restricted
			when (FromToCompanyItemLocationRel.BinTracked
			or    FromToCompanyItemLocationRel.IsSerialTracked
			or    FromToCompanyItemLocationRel.IsLotTracked)
		
		IsToLocationUDIDetailTracked										
			restricted
			when (FromToCompanyItemLocationRel.UDITracked.UDIRequiredAtReceipt
			or    FromToCompanyItemLocationRel.UDITracked.UDIRequiredAtIssue)
			
		HasMissingUDIDetails
			restricted
			when (InventoryUDIDetailWithoutGTINRel exists)

		IsFromToCompanyMismatchAndOffsetAccountNotEntered
			restricted
			when (InventoryTransaction.FromToCompanyLocation.FromToCompany != Company
			and   OffsetAccount not entered
			and   InventoryTransaction.FromToCompanyLocation.FromToCompany entered)		
		
		IsCostAdjustment
			restricted
			when (InventoryTransaction.IsCostAdjustment
			and   TransactionSystemCode.InventoryControl)
			
		IsPurchaseOrderCostAdjustment
			restricted
			when (TransactionSystemCode.PurchaseOrder
			and InventoryTransaction.IsCostAdjustment)
		
		IsInspectionRejection
			restricted
			when (TransactionSystemCode.PurchaseOrder
			and   InventoryTransaction.IsInspectionReject)
		
		HasDistributions
			restricted
			when (InventoryTransactionLineDistributionsRel exists) 			

		HasQuantity
			restricted
			when (Quantity entered)
		
		HasWorkOrder
			when (WorkOrderRel exist)
		
		HasWorkOrderItem
			when (WorkOrderItemRel exist)

		HasWorkOrderByproduct
			when (WorkOrderByproductRel exist)

		NeedsACalendar
			restricted
			when (!BasicAnalyticsCalendarsRel exists)
			
		RecordExists
			restricted
			when (InventoryTransactionLine exists)
		
		LineExists
			restricted
			when (InventoryTransactionLine entered)
		
		ValidForCreate
			restricted
			when (!InventoryTransaction.InterfaceInProcess
			and InventoryTransaction.Status.Unreleased
			and not IsInventoryReturns)
		
		ValidForUpdateAndDelete
			restricted
			when (IsUnreleased
			and   not InventoryTransaction.InterfaceInProcess
			and  (InventoryTransaction.IsUnreleased
			or   (InventoryTransaction.Status.ReleaseInProgress and TransactionSystemCode.InventoryControl)))
		
		IsOrderEntryShipment
			restricted
			when (InventoryTransaction.IsShipment
			and   TransactionSystemCode.OrderEntry)

		UnpostedDistributionsExist
			when (UnpostedDistributionsRel exists)

		NoUnpostedDistributionsExist
			when (UnpostedDistributionsRel not exists)

        AverageIsPosted
        	restricted
        	when (PostedDistributionsRel exists)
        
		AverageCostIsIncreaseStock
			restricted
			when (InventoryTransaction.IsInventoryReceipt
			or    InventoryTransaction.IsCustomerReturn
			or	  InventoryTransaction.IsRequisitionReturn
			or    InventoryTransaction.IsInventoryReturns
			or   (InventoryTransaction.IsInventoryAdjustments
			and   Quantity > 0)
			or   (InventoryTransaction.IsInventoryIssues
			and   Quantity > 0)
			or   (IsPurchaseOrderReceiptAdjustment
			and   Quantity > 0)
			or   (InventoryTransaction.IsVendorReturnCancel
			and   Quantity > 0))
		
		AverageCostIsIncreaseTransfer
			restricted
			when (InventoryTransaction.IsInventoryReceivingTransfer
			or   (InventoryTransaction.IsInventoryIntransitReceiving
			and   Quantity > 0)) 
		
		AverageCostIsDecreaseStock
			restricted
			when (InventoryTransaction.IsInventoryTransfer
			or   (InventoryTransaction.IsInventoryIssues
			and   Quantity < 0)
			or 	 (InventoryTransaction.IsInventoryAdjustments	
			and   Quantity < 0)
			or   (InventoryTransaction.IsInventoryBinTransfer)
			or   (IsPurchaseOrderReceiptAdjustment
			and   Quantity < 0) 
			or   (InventoryTransaction.IsVendorReturn
			and   Quantity > 0)
			or    InventoryTransaction.IsDirectTransfer
			or    InventoryTransaction.IsShipment)

		CostDoesNotMatchReceiptLine
			restricted
			when (UnitCost != LocalOutputUnitCost
			and   LocalOutputUnitCost != 0) 
	
		TransferOriginExists
			when (TransferOriginRel exists)

		IsNotInterfaceInProcessAndNotIntransitReceiving
			restricted
			when (not (InventoryTransaction.InterfaceInProcess or InventoryTransaction.IsInventoryIntransitReceiving))

		ForPurgeDistributionIsPosted
			when(InventoryTransactionLineDistributionsWithDeletedRel exists)

		OrderEntryIsReadyForPurging
			when (CustomerOrderLinesReadyForPurgeRel exists
			or    CustomerOrderReturnLinesReadyForPurgeRel exists)

		HasRecipe
			restricted
			when (Item.Recipe)	

		TransactionsForDailyUsage
			restricted
			when (((InventoryTransaction.InventoryDocumentType.InventoryIssue
			or		InventoryTransaction.InventoryDocumentType.InventoryTransfer
			or		InventoryTransaction.InventoryDocumentType.DirectTransfer)
			and		DerivedStockIssueQuantity > 0)
			or	   (InventoryTransaction.InventoryDocumentType.Adjustment
			and		DerivedStockIssueQuantity < 0)
			or    InventoryTransaction.InventoryDocumentType.Shipment)

		DetailsWithExpiredLot
			restricted
			when (Company.DoNotAllowExpiredLotOnTransaction
			and HasDetailsWithExpiredLot)

		HasExpiredDetailsForWarning
			restricted
			when (DetailsWithExpiredLot
			and Status.Unreleased)

		HasNearExpiryOrExpiredDetailsForWarning
			restricted
			when (not Company.DoNotAllowExpiredLotOnTransaction
			and ((ValidItemStorageLocationForItemRel.ExpirationWarning entered
			or	MultipleBins)
			or  Company.DaysPriorToExpiringLots entered)
			and (HasDetailsNearExpiry or HasDetailsWithExpiredLot)
			and Status.Unreleased)

		HasDetailsWithExpiredLot
			restricted
			when (InventoryTransactionLineDetailsWithExpiredLotRel exist)

		HasDetailsNearExpiry
			restricted
			when (InventoryTransactionLineDetailsWithNearExpiryLotRel exist)
		

		InventoryLocationLotTrackingMustMatch
			restricted
			when (FromToCompanyItemLocationRel.InventoryLocation.InventoryLocationLotTracking.LotTrackingAtToAndFromLocation
			or 	 (FromToCompanyItemLocationRel.InventoryLocation.InventoryLocationLotTracking.CheckICCompanyValue
			and   not FromToCompanyItemLocationRel.Company.LotTrackingAtFromLocationOnly))

		HasDetailsOutOfBalance									
			restricted
			when (Quantity != DerivedReceivingDetailQuantity)

		IsDisplaySecondaryQuantities
			restricted
			when (IsCatchWeightItem
			and	 (DerivedBeforeSecondaryQuantity entered
			or 	  DerivedAfterSecondaryQuantity  entered))

		ChargeableAndNoUnitCost
			restricted
			when (not UnitCost entered
			and   not ItemLocation.NoCharge
			and   IssueInventoryTransactionLineOfReturnRel.UnitCost entered)
		
		IsOngoingAverageCalculation
			restricted
			when (Company.UseGlobalAverageCost
			and   GlobalAverageCostAndSOHRel.AverageComputation.Ongoing)

		HasBinTypeRestriction
			restricted
			when (InventoryTransaction.IsInventoryIssues
			or	  InventoryTransaction.IsInventoryReceipt
			or	  InventoryTransaction.IsPurchaseOrderReceipt)
			
		HasItemStorageLocation
			restricted
			when (ValidItemStorageLocationForItemRel exists)
		
		IsAWarehouseLocationItem
			restricted
			when (ItemLocation.IsAWarehouseLocationItem)

		DMFromToCompanyLocationBinHasItemStorageLocation
			restricted
			when (DMFromToCompanyLocationBinHasItemStorageLocationRel exists)
    Relations
		GlobalAverageCostAndSOHRel
            one-to-one relation to GlobalAverageCostAndSOH
            Field Mapping uses symbolic key
                related.Company           = Company
                related.Item              = Item

		GLAccountingUnitRel
			one-to-one relation to AccountingUnit
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup 
				related.AccountingEntity		= InventoryAccount.ToAccountingEntity
				related.AccountingUnit			= DerivedAnalyticsAcctUnit

		
		PurchaseOrderReceiptInventoryTransactionLinesRel
			one-to-many relation to InventoryTransactionLine
			Field Mapping uses ByItem
				related.Company								= Company
				related.InventoryLocation					= InventoryLocation
				related.Item								= Item
			Instance Selection
				where (related.IsPOReceiving
				and    related.InventoryTransaction         < InventoryTransaction)	
		
		InventoryReturnTransactionRel
			one-to-many relation to InventoryTransaction
			Field Mapping uses symbolic key
				related.Company											= Company
				related.InventoryLocation           					= LocalReturnLocation
				related.InventoryTransaction							= LocalReturnTransaction

		InventoryTransactionReturnLineRel
			one-to-one relation to InventoryTransactionLine
			Field Mapping uses symbolic key
				related.Company                             			= Company
				related.InventoryLocation                   			= LocalReturnLocation
				related.InventoryTransaction                			= LocalReturnTransaction
				related.TransactionSystemCode               			= "IC"
				related.InventoryTransactionLine.WarehouseShipment		= 0
				related.InventoryTransactionLine.LineNumber				= InventoryTransactionLine.LineNumber 
				related.InventoryTransactionLine.ComponentSequence		= 0

		InventoryReturnItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company											= Company 	
				related.InventoryLocation								= LocalReturnLocation
				related.Item											= Item		

		IssueInventoryTransactionLineOfReturnRel
			one-to-one relation to InventoryTransactionLine
			Field Mapping uses symbolic key
				related.Company                             			= Company
				related.InventoryLocation                   			= InventoryTransaction.OriginatingIssueLocation
				related.InventoryTransaction                			= InventoryTransaction.OriginatingIssueDocument
                related.TransactionSystemCode                           = OriginatingTransaction(InventoryTransactionLine).InventoryTransactionLine.TransactionSystemCode
                related.InventoryTransactionLine.WarehouseShipment		= OriginatingTransaction(InventoryTransactionLine).InventoryTransactionLine.WarehouseShipment
                related.InventoryTransactionLine.LineNumber				= OriginatingTransaction(InventoryTransactionLine).InventoryTransactionLine.LineNumber 
                related.InventoryTransactionLine.ComponentSequence		= OriginatingTransaction(InventoryTransactionLine).InventoryTransactionLine.ComponentSequence
		
		IssueInventoryTransactionLinesRel    
			one-to-many relation to InventoryTransactionLine
			Field Mapping uses Set2
				related.Company								= Company
				related.InventoryLocation					= InventoryLocation
				related.Item								= Item
			Instance Selection
				where (related.IsIssuesOrTransfer
				and    related.InventoryTransaction         < InventoryTransaction)	
		
		TransferOriginRel
			one-to-one relation to InventoryTransactionLine
			Field Mapping uses symbolic key
				related.Company                             						= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.InventoryLocation                   						= InventoryTransaction.FromToCompanyLocation.FromToLocation
				related.InventoryTransaction                						= FromDocument
				related.TransactionSystemCode               						= "IC"
				related.InventoryTransactionLine.WarehouseShipment                  = 0
				related.InventoryTransactionLine.LineNumber                         = InventoryTransactionLine.LineNumber 
				related.InventoryTransactionLine.ComponentSequence                  = 0

		PostedDistributionsRel                  							is a InventoryTransactionLineDistribution set
			Instance Selection
				where (related.Status.Posted)

		I1DistributionRel is a InventoryTransactionLineDistribution set
			Instance Selection
				where (related.PostingType.Inventory)

		UnpostedDistributionsRel is a InventoryTransactionLineDistribution set
			Instance Selection
				where (related.Status.Unposted)

		O1DistributionRel is a InventoryTransactionLineDistribution set
			Instance Selection
				where (related.PostingType.Offset)

		SingleInventoryCostHistoryRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company                                             = Company
				related.InventoryLocation                                   = InventoryLocation
				related.Item                                                = Item
				related.InventoryTransaction                                = InventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode          = TransactionSystemCode
				related.InventoryCostHistory.LineNumber                     = InventoryTransactionLine.LineNumber
				related.InventoryCostHistory.ComponentSequence              = InventoryTransactionLine.ComponentSequence 

		InventoryControlResultRel
			one-to-many relation to InventoryControlResult
			Field Mapping uses ByItemLocation
				related.InventoryTransactionLineGroup.InventoryCompany	= Company
				related.InventoryTransactionLineGroup.Location			= InventoryTransaction.InventoryLocation
				related.Item	                                        = Item
				
		OtherLocationsForItemRel
			one-to-many relation to ItemLocation
			Field Mapping uses Set2
				related.Company       = Company
				related.Item          = Item
			Instance Selection
				where (related.InventoryLocation < InventoryLocation)
		
		AllLocationsForAnItemRel
			one-to-many relation to ItemLocation
			Field Mapping uses Set2
				related.Company       = Company
				related.Item          = Item
		
		BasicAnalyticsCalendarPeriodRel
			one-to-one relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses LeafRecordsGregorian
				related.Date = TransactionDate 

		RecallProductItemForItemReceiptHardErrorRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ItemGroup
    			related.Item                    = Item
    		Instance Selection
    			where ((related.RecallNotice.Status.Pending
    			or      related.RecallNotice.Status.Active)
    			and     related.RecallNotice.RestrictInventoryReceipt.HardError)
    	
    	RecallProductItemForItemReceiptWarningRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ItemGroup
    			related.Item                    = Item
    		Instance Selection
    			where ((related.RecallNotice.Status.Pending
    			or      related.RecallNotice.Status.Active)
    			and     related.RecallNotice.RestrictInventoryReceipt.Warning)
		
		RecallProductItemForItemIssueHardErrorRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ItemGroup
    			related.Item                    = Item
    		Instance Selection
    			where ((related.RecallNotice.Status.Pending
    			or      related.RecallNotice.Status.Active)
    			and     related.RecallNotice.RestrictInventoryIssue.HardError)
    	
    	RecallProductItemForItemIssueWarningRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ItemGroup
    			related.Item                    = Item
    		Instance Selection
    			where ((related.RecallNotice.Status.Pending
    			or      related.RecallNotice.Status.Active)
    			and     related.RecallNotice.RestrictInventoryIssue.Warning)

		GeneralLedgerCalendarPeriodXrefRel								
			one-to-one relation to GeneralLedgerCalendarPeriodXref
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriodXref	= TransactionDate				

        InventoryTransactionLineDetailsRel 									is a InventoryTransactionLineDetail set
        
        InventoryTransactionLineDetailsWithDeletedRel 						is a InventoryTransactionLineDetail set
        	Instance Selection
        		include deleted records
		
		InventoryTransactionLineDetailsWithDifferentLotExpiryRel 			is a InventoryTransactionLineDetail set
			Instance Selection
				where (related.HasDifferentLotExpirationDate)

		InventoryTransactionLineDetailsWithExpiredLotRel 					is a InventoryTransactionLineDetail set
			Instance Selection
				where (related.Lot.ExpiredItems
				or 	   related.IsLotExpired
				or     related.Lot.ItemsAboutToExpire
				or     related.IsLotNearExpiry
				or     related.IsItemLotNearExpiry)

		InventoryTransactionLineDetailsWithNearExpiryLotRel 				is a InventoryTransactionLineDetail set
			Instance Selection
				where (related.Lot.ItemsAboutToExpire 
				or     related.Lot.ExpiredItems
				or     related.IsLotExpired 
				or     related.IsLotNearExpiry
				or     related.IsItemLotNearExpiry)
                
        InventoryTransactionLineDetailsReceivingCompletedRel 				is a InventoryTransactionLineDetail set
        	Instance Selection
                where (related.OpenQuantity > 0)
        
        InventoryTransactionLineDistributionsRel							is a InventoryTransactionLineDistribution set
        
        InventoryTransactionLineDistributionsWithDeletedRel					is a InventoryTransactionLineDistribution set
        	Instance Selection
        		include deleted records
        		where(related.Status.Posted)
        					
		FromToCompanyItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company												= InventoryTransaction.FromToCompanyLocation.FromToCompany 	
				related.InventoryLocation									= InventoryTransaction.FromToCompanyLocation.FromToLocation
				related.Item												= Item
		
		ToCompanyItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company												= InventoryTransaction.FromToCompanyLocation.FromToCompany 	
				related.InventoryLocation									= InventoryTransaction.FromToCompanyLocation.RequestingLocation
				related.Item												= Item			
				
		ItemGlobalTradeItemNumberUnitOfMeasureRel	
			one-to-one relation to ItemGTIN
			Field Mapping uses Set3
				related.ItemGroup      										= Company.ItemGroup
				related.Item         										= Item
				related.UnitOfMeasure  										= TransactionUOM
				related.ItemGTIN          									= ItemGTIN 

		ItemGTINRel
			one-to-many relation to ItemGTIN 
			Field Mapping uses Set2
				related.ItemGroup											= Company.ItemGroup
				related.ItemGTIN											= GlobalTradeItemNumber

		DefaultItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set3
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
				related.UnitOfMeasure										= TransactionUOM
			Instance Selection
				where (related.Manufacturer									= ItemLocation.Manufacturer
				and    related.ManufacturerNumber							= ItemLocation.ManufacturerNumber
				and    related.Active
				and    related.UseAsDefaultPerUOM)
		
		NoDefaultItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set3
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
				related.UnitOfMeasure										= TransactionUOM
			Instance Selection
				where (related.Manufacturer									= ItemLocation.Manufacturer
				and    related.ManufacturerNumber							= ItemLocation.ManufacturerNumber
				and    related.Active)

		ItemTransactionUnitOfMeasureRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
				related.UnitOfMeasure										= TransactionUOM
						
		MultipleTrackedInUnitOfMeasureRel								
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
			Instance Selection
				where (related.TrackedIn)
							
		StockOnHandDetailRel
			one-to-many relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation 									= InventoryLocation
				related.Item												= Item
			Instance Selection
				where (related.StockOnHandDetail.UnitOfMeasure	 			= LocalTransactionUOM
				and    related.StockOnHandDetail.Lot 						= LocalLot			
				and    related.StockOnHandDetail.Sublot 					= LocalSublot
				and    related.StockOnHandDetail.Bin 						= Bin)		
	
		StockOnHandDetailFromTransactionDetailRel														        
			one-to-one relation to StockOnHandDetail
			Field Mapping uses Set3
				related.Company												= Company
				related.InventoryLocation 									= InventoryLocation
				related.Item												= Item
				related.StockOnHandDetail.Bin 								= Bin                 
				related.StockOnHandDetail.UnitOfMeasure 					= TransactionUOM		
				related.StockOnHandDetail.Lot 								= blank			
				related.StockOnHandDetail.Sublot 							= blank				
		
		FromStockOnHandDetailRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation 									= InventoryLocation
				related.Item												= Item
				related.StockOnHandDetail.UnitOfMeasure	 					= TransactionUOM
				related.StockOnHandDetail.Lot 								= LocalLot			
				related.StockOnHandDetail.Sublot 							= LocalSublot
				related.StockOnHandDetail.Bin 								= Bin
						
		ToStockOnHandDetailRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company												= FromToCompanyLocationBin.FromToCompany
				related.InventoryLocation 									= FromToCompanyLocationBin.FromToLocation
				related.Item												= Item
				related.StockOnHandDetail.UnitOfMeasure	 					= ToUOM
				related.StockOnHandDetail.Lot 								= LocalLot			
				related.StockOnHandDetail.Sublot 							= LocalSublot
				related.StockOnHandDetail.Bin 								= FromToCompanyLocationBin.FromToBin	
		
		FromItemSerialNumberRel
			one-to-one relation to ItemSerialNumber
			Field Mapping uses Set3
				related.Company										= Company
                related.InventoryLocation							= InventoryLocation
                related.Item										= Item
                related.Bin											= Bin
                related.ItemSerialNumber							= LocalSerial
		
		SerialNumbersInBinRel
			one-to-many relation to ItemSerialNumber
			Field Mapping uses Set3
				related.Company										= Company
                related.InventoryLocation							= InventoryLocation
                related.Item										= Item
                related.Bin											= Bin

		TrackedAlternateUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			  						= Company.ItemGroup
				related.Item				  						= Item
			Instance Selection
				where (related.UnitOfMeasure  						= ToUOM
				and	   related.TrackedIn							= true) 
				
		CostHistoryForRequisitionReturnRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				related.InventoryTransaction								= InventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode  		= "IC"			
				related.InventoryCostHistory.LineNumber						= InventoryTransactionLine.LineNumber
				related.InventoryCostHistory.ComponentSequence				= InventoryTransactionLine.ComponentSequence
		
		InventoryCostHistoryRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item

		InventoryCostHistoryForReceiptRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				related.InventoryTransaction								= OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).PurchaseOrderReceiptLine.DerivedInventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode  		= "PO"			
				related.InventoryCostHistory.LineNumber						= OriginatingTransaction(POReceiptAdjustmentAndInspectionLine).PurchaseOrderReceiptLine
				related.InventoryCostHistory.ComponentSequence				= InventoryTransactionLine.ComponentSequence

		InventoryCostHistoryForReceiptFromVendorReturnRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				related.InventoryTransaction								= OriginatingTransaction(VendorReturnLine).PurchaseOrderReceiptLineRel.PurchaseOrderReceiptLine.DerivedInventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode  		= "PO"			
				related.InventoryCostHistory.LineNumber						= OriginatingTransaction(VendorReturnLine).PurchaseOrderReceiptLineRel.PurchaseOrderReceiptLine
				related.InventoryCostHistory.ComponentSequence				= InventoryTransactionLine.ComponentSequence
				
		InventoryCostHistoryForCostAdjustmentRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				related.InventoryTransaction								= OriginatingTransaction(InventoryCostHistory).InventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode  		= "PO"			
				related.InventoryCostHistory.LineNumber						= OriginatingTransaction(InventoryCostHistory).InventoryCostHistory.LineNumber
				related.InventoryCostHistory.ComponentSequence				= InventoryTransactionLine.ComponentSequence

		InventoryCostHistoryForReceivingAdjustmentRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				related.InventoryTransaction								= InventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode  		= "PO"			
				related.InventoryCostHistory.LineNumber						= InventoryTransactionLine.LineNumber
				related.InventoryCostHistory.ComponentSequence				= InventoryTransactionLine.ComponentSequence
				
		IncreaseInventoryCostHistoryRel			
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set2
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item			

		InventoryCostHistoryForLifoRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set5
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item

		InventoryCostHistoryExceptLifoRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set3
				related.Company 											= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
				
		InventoryTransactionLineWithCostHistoryRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
			Instance Selection
				include deleted records
				where(related.InventoryTransaction							= InventoryTransaction
				and related.InventoryTransaction.InventoryDocumentType		= InventoryTransactionLine.InventoryTransaction.InventoryDocumentType
				and related.InventoryCostHistory.TransactionSystemCode		= TransactionSystemCode)

		InventoryCostHistoryExistsForTransactionLineRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company                                             = Company
				related.InventoryLocation                                   = InventoryLocation
				related.Item                                                = Item
				related.InventoryTransaction                                = InventoryTransaction
				related.InventoryCostHistory.TransactionSystemCode          = TransactionSystemCode
				related.InventoryCostHistory.LineNumber                     = InventoryTransactionLine.LineNumber
				related.InventoryCostHistory.ComponentSequence              = InventoryTransactionLine.ComponentSequence 
			Instance Selection
				include deleted records 
		
		ProcurementTransactionDistributionRel
			one-to-many relation to ProcurementTransactionDistribution
			Field Mapping uses Set1
				related.Company												= Company
				related.SystemCode											= TransactionSystemCode
				related.Location											= InventoryLocation
				related.DocumentType										= InventoryTransaction.InventoryDocumentType
				related.ProcurementDocumentNumber							= InventoryTransaction
				related.DocumentNumberNumeric 								= InventoryTransactionLine.WarehouseShipment
				related.POCode												= ""
				related.LineNumber											= InventoryTransactionLine.LineNumber
				related.ComponentSequence									= InventoryTransactionLine.ComponentSequence
			Instance Selection
				include deleted records
						
		ShipToFacilityDetailRel
			one-to-many relation to ShipToFacilityDetail
			Field Mapping uses ByCompanyLocation
				related.ItemGroup											= Company.ItemGroup
				related.ShipToFacilityDetail.Company						= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.ShipToFacilityDetail.InventoryLocation				= LocalInventoryLocation
				related.ShipToFacilityDetail.RequestingLocation				= LocalRequestingLocation
			
		ShipToFacilityDetailWithCompanyOnlyRel
			one-to-many relation to ShipToFacilityDetail
			Field Mapping uses ByCompanyLocation
				related.ItemGroup											= Company.ItemGroup
				related.ShipToFacilityDetail.Company						= InventoryTransaction.FromToCompanyLocation.FromToCompany
			Instance Selection
				where (related.ShipToFacilityDetail.InventoryLocation not entered
				and    related.ShipToFacilityDetail.RequestingLocation not entered)
			
		ManufacturerIDManufacturerRel
			one-to-many relation to ManufacturerIDManufacturer
			Field Mapping uses Set2
				related.ItemGroup											= Company.ItemGroup
				related.Manufacturer.ManufacturerCode						= LocalManufacturerCode	
				related.Manufacturer.ManufacturerDivision					= LocalManufacturerDivision

		ManufacturerIDShipToFacilityRel
			one-to-one relation to ManufacturerIDShipToFacility
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.ManufacturerID										= first ManufacturerIDManufacturerRel.ManufacturerID
				related.ShipToFacility										= LocalShipToFacility  			

		ManufacturerIDDistributionCenterRel
			one-to-many relation to ManufacturerIDDistributionCenter
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.ManufacturerID										= first ManufacturerIDManufacturerRel.ManufacturerID
            Instance Selection
				where (related.ManufacturerIDDistributionCenter.Company				= Company
				and    related.ManufacturerIDDistributionCenter.InventoryLocation	= InventoryLocation)

        WarehouseDemandForIntransitTransferRel
            one-to-many relation to WarehouseDemand
            Field Mapping uses symbolic key
                related.Company           									= InventoryTransaction.FromToCompanyLocation.FromToCompany
                related.WarehouseDemand.DemandSystemCode					= DemandSystemCode.Intransit
                related.WarehouseDemand.DemandDocument						= IntransitAndReceivingDocumentNumber 
                related.WarehouseDemand.DemandCompany						= InventoryTransaction.Company
	                		
 		WarehouseDemandLinesForIntransitTransferRel
            one-to-many relation to WarehouseDemandLine
            Field Mapping uses Set5
                related.Company           									= InventoryTransaction.FromToCompanyLocation.FromToCompany
                related.InventoryLocation 									= InventoryTransaction.FromToCompanyLocation.FromToLocation
                related.Item              									= Item		
                related.EstimatedTransactionDate							= EstimatedDeliveryDate
                related.WarehouseDemandLine.DemandDocumentType				= DemandDocumentType.IntransitReceiving 
                related.WarehouseDemand.DemandSystemCode					= DemandSystemCode.Intransit
                related.WarehouseDemand.DemandDocument						= InventoryTransaction
                related.WarehouseDemand.DemandCompany						= InventoryTransaction.Company 
                related.WarehouseDemandLine.LineNumber						= InventoryTransactionLine.LineNumber
                related.WarehouseDemandLine.ComponentSequence				= blank
                
        WarehouseDemandForIntransitReceivingRel
            one-to-many relation to WarehouseDemand
            Field Mapping uses symbolic key
                related.Company           									= InventoryTransaction.Company
                related.WarehouseDemand.DemandSystemCode					= TransactionSystemCode
                related.WarehouseDemand.DemandDocument						= InventoryTransaction 
                related.WarehouseDemand.DemandCompany						= InventoryTransaction.FromToCompanyLocation.FromToCompany
        
        WarehouseDemandLinesForIntransitReceivingRel
            one-to-many relation to WarehouseDemandLine
            Field Mapping uses Set5
                related.Company           									= InventoryTransaction.Company
                related.InventoryLocation 									= InventoryTransaction.InventoryLocation
                related.Item              									= Item		
                related.EstimatedTransactionDate							= EstimatedDeliveryDate
                related.WarehouseDemandLine.DemandDocumentType				= "IR"
                related.WarehouseDemand.DemandSystemCode					= TransactionSystemCode
                related.WarehouseDemand.DemandDocument						= InventoryTransaction 
                related.WarehouseDemand.DemandCompany						= InventoryTransaction.FromToCompanyLocation.FromToCompany
                related.WarehouseDemandLine.LineNumber						= InventoryTransactionLine.LineNumber
                related.WarehouseDemandLine.ComponentSequence				= blank

		PurchaseOrderReceiptLineRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key				
				related.Company                                    			= Company 
                related.PurchaseOrderReceipt					   			= OriginatingTransactionDocument
                related.PurchaseOrderReceiptLine        		   			= InventoryTransactionLine.LineNumber
                
		InventoryUsageHistoryRel
			one-to-one relation to InventoryUsageHistory
			Field Mapping uses symbolic key
                related.Company           									= Company
                related.InventoryLocation 									= InventoryLocation
                related.Item              									= Item		
                related.InventoryUsageHistory.Year							= LocalYearSave
                related.InventoryUsageHistory.Quarter						= LocalQuarterSave

		InventoryUsageHistoriesRel
			one-to-many relation to InventoryUsageHistory
			Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
				related.Item												= Item
		
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                  = Company.FinanceEnterpriseGroup	
				related.GeneralLedgerSystemCode                 = "IC"
		
		InventoryUsageHistoryRecordsRel
			one-to-many relation to InventoryUsageHistory
			Field Mapping uses Set2
                related.Company           								= Company
                related.InventoryLocation 								= InventoryLocation
                related.Item              								= Item		


		
		WarehouseShipmentLineRel
			one-to-one relation to WarehouseShipmentLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation           = InventoryLocation
				related.WarehouseShipment           = OriginatingTransactionDocument
				related.WarehouseShipmentLine       = OriginatingTransactionLine 
				
		WarehouseShipmentLineForTransferRel
			one-to-one relation to WarehouseShipmentLine
			Field Mapping uses symbolic key
				related.Company						= FromToCompanyLocationBin.FromToCompany
				related.InventoryLocation			= FromToCompanyLocationBin.FromToLocation
				related.WarehouseShipment           = OriginatingTransactionDocument
				related.WarehouseShipmentLine       = OriginatingTransactionLine
				
		AdjVendorReturnLineForCreditMemoInvoiceRel
			one-to-one relation to VendorReturnLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.VendorReturn          		= InventoryTransaction.RelatedVendorReturn
				related.VendorReturnLine            = OriginatingTransactionLine
					
		
		PurchaseOrderReceiptLineForDrillBackRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.PurchaseOrderReceipt        = OriginatingTransactionDocument
				related.PurchaseOrderReceiptLine    = OriginatingTransactionLine 
				
		CustomerOrderReturnLineRel
			one-to-one relation to CustomerOrderReturnLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.CustomerOrderReturn         = OriginatingTransactionDocument
				related.CustomerOrderReturnLine     = OriginatingTransactionLine 
				
		VendorReturnLineRel
			one-to-one relation to VendorReturnLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.VendorReturn		        = OriginatingTransactionDocument
				related.VendorReturnLine   			= OriginatingTransactionLine
		
		POReceiptAdjustmentLineRel
			one-to-one relation to POReceiptAdjustmentAndInspectionLine
			Field Mapping uses symbolic key
				related.Company								 = Company		
				related.AdjustmentInspectionDocumentType     = "RA"
				related.POReceiptAdjustmentAndInspection	 = OriginatingTransactionDocument
				related.POReceiptAdjustmentAndInspectionLine = OriginatingTransactionLine
				
		POReceiptAdjustmentAndInspectionLineRel
			one-to-one relation to POReceiptAdjustmentAndInspectionLine
			Field Mapping uses symbolic key
				related.Company								 = Company		
				related.AdjustmentInspectionDocumentType 	 = "IN"
				related.POReceiptAdjustmentAndInspection	 = OriginatingTransactionDocument
				related.POReceiptAdjustmentAndInspectionLine = OriginatingTransactionLine
		
		RequisitionLineRel
			one-to-one relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.Requisition			        = OriginatingTransactionDocument
				related.RequisitionLine  			= OriginatingTransactionLine	

		KitchenOrderRel
			one-to-one relation to KitchenOrder
			Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= InventoryLocation
				related.KitchenOrder				= OriginatingTransactionDocument

		KitchenOrderBurdensRel
			one-to-many relation to KitchenOrderBurden
			Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= InventoryLocation
				related.KitchenOrder				= OriginatingTransactionDocument

        InventoryUDIDetailRel  
            one-to-many relation to InventoryUDIDetail
            delete cascades
            Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
            Instance Selection
				where (related.InventoryUDIDetail.InventoryTransactionType	= InventoryTransaction.InventoryDocumentType
				and    related.InventoryUDIDetail.TransactionSystemCode		= TransactionSystemCode.InventoryControl
				and    related.InventoryUDIDetail.DocumentNumberNumeric		= InventoryTransaction
				and    related.InventoryUDIDetail.WarehouseShipment			= blank
				and    related.InventoryUDIDetail.LineNumber				= InventoryTransactionLine.LineNumber)
				
		InventoryUDIDetailForWHRel
			one-to-many relation to InventoryUDIDetail
            Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
            Instance Selection
				where ((((InventoryTransaction.InventoryDocumentType.IntransitReceiving
				or 		 InventoryTransaction.InventoryDocumentType.ReceivingTransfer)
				and      related.InventoryUDIDetail.TransactionSystemCode		= WarehouseShipmentLineForTransferRel.WarehouseShipment.WarehouseDemand.DemandSystemCode
				and      related.InventoryUDIDetail.DocumentNumberNumeric		= WarehouseShipmentLineForTransferRel.RequisitionLineRel.Requisition
				and      related.InventoryUDIDetail.WarehouseShipment			= WarehouseShipmentLineForTransferRel.WarehouseShipment
				and      related.InventoryUDIDetail.LineNumber				    = WarehouseShipmentLineForTransferRel.RequisitionLineRel.RequisitionLine)
				or      (related.InventoryUDIDetail.TransactionSystemCode		= WarehouseShipmentLineRel.WarehouseShipment.WarehouseDemand.DemandSystemCode
				and      related.InventoryUDIDetail.DocumentNumberNumeric		= WarehouseShipmentLineRel.RequisitionLineRel.Requisition
				and      related.InventoryUDIDetail.WarehouseShipment			= WarehouseShipmentLineRel.WarehouseShipment
				and      related.InventoryUDIDetail.LineNumber				    = WarehouseShipmentLineRel.RequisitionLineRel.RequisitionLine))
				and      related.InventoryUDIDetail.InventoryTransactionType	= InventoryTransaction.InventoryDocumentType)
				
		InventoryUDIDetailWithoutGTINRel
			one-to-many relation to InventoryUDIDetail
			delete cascades
            Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
            Instance Selection
				where (related.InventoryUDIDetail.InventoryTransactionType	= InventoryTransaction.InventoryDocumentType
				and    related.InventoryUDIDetail.TransactionSystemCode		= "IC"
				and    related.InventoryUDIDetail.DocumentNumberNumeric		= InventoryTransaction
				and    related.InventoryUDIDetail.WarehouseShipment			= blank
				and    related.InventoryUDIDetail.LineNumber				= InventoryTransactionLine.LineNumber
				and    related.Bin entered
				and    related.GTIN not entered)
				
		InventoryUDIDetailWithOpenQuantityRel  
            one-to-many relation to InventoryUDIDetail
            delete cascades
            Field Mapping uses symbolic key
				related.Company												= Company
				related.InventoryLocation									= InventoryLocation
            Instance Selection
				where (related.InventoryUDIDetail.InventoryTransactionType	= InventoryTransaction.InventoryDocumentType
				and    related.InventoryUDIDetail.TransactionSystemCode		= TransactionSystemCode.InventoryControl
				and    related.InventoryUDIDetail.DocumentNumberNumeric		= InventoryTransaction
				and    related.InventoryUDIDetail.WarehouseShipment			= blank
				and    related.InventoryUDIDetail.LineNumber				= InventoryTransactionLine.LineNumber
				and    related.DetailWithOpenQuantity)
                
		WorkOrderRel
			one-to-one relation to WorkOrder
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.InventoryLocation			= InventoryLocation
				related.WorkOrder			        = OriginatingTransactionDocument

		WorkOrderItemRel
			one-to-one relation to WorkOrderItem
			Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= InventoryLocation		
				related.WorkOrder			        = OriginatingTransactionDocument
				related.WorkOrderItem				= OriginatingTransactionLine
				
		WorkOrderByproductRel
			one-to-one relation to WorkOrderByproduct
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.InventoryLocation			= InventoryLocation
				related.WorkOrder			        = OriginatingTransactionDocument
				related.WorkOrderByproduct			= OriginatingTransactionLine

		InventoryTransactionLineAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "InventoryTransactionLine"

		InventoryUsageHistoryAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "InventoryUsageHistory"

		ItemLocationAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "ItemLocation"

		BasicAnalyticsCalendarsRel 		is a BasicAnalyticsCalendar set
		
		BinWithStockOnHandRel
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryTransaction.InventoryLocation
			Instance Selection
				where (related.HasStockOnHand)
				
		BinsForItemLocationRel
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryTransaction.InventoryLocation

		InventoryTransactionLinesPurgeWithDeletedRel 							is a InventoryTransactionLine(InventoryTransaction) set
			Instance Selection
				include deleted records
				where(related.Status.NonGlobalLedger
				or    related.Status.GlobalLedgerUpdated
				or   (related.Status.Released
				and   ForPurgeDistributionIsPosted))

		CustomerOrderLinesReadyForPurgeRel
			one-to-many relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.CustomerOrder					= WarehouseShipmentLineRel.WarehouseShipment.WarehouseDemand.DemandDocument
			Instance Selection
				where (related.Status.ReadyForDelete
				or     related.Status.Canceled)

		CustomerOrderReturnLinesReadyForPurgeRel
			one-to-many relation to CustomerOrderReturnLine
			Field Mapping uses symbolic key
				related.Company						= Company		
				related.CustomerOrderReturn			= OriginatingTransactionDocument
			Instance Selection
				where (related.Status.Closed)

		InventoryTransactionImportRel
			one-to-one relation to InventoryTransactionImport
			Field Mapping uses ByRunGroup
				related.RunGroup 					= LocalRunGroup
				related.Company 					= LocalCompany
				related.InventoryLocation 			= LocalInventoryLocation
				related.InventoryDocumentType 		= LocalInventoryDocumentType
				related.InventoryTransactionImport 	= LocalInventoryTransactionImport

		IntransitReceivingTransactionRel
			one-to-many relation to InventoryTransaction
			Field Mapping uses symbolic key
				related.Company						= LocalIntransitTransferCompany
				related.InventoryLocation           = LocalIntransitTransferLocation
				related.InventoryTransaction		= LocalIntransitTransferDocumentNumber
			Instance Selection
				where (not related.NumberOfLines > 0)



		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter		

		ItemsAtCompanyLocationRel
			one-to-many relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup	= Company.ItemGroup
			Instance Selection
				where (related.IsActive
				and    related.ActiveItemLocationExists)

		ItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup	= Company.ItemGroup
				related.Item		= Item

		ToLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company								= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.InventoryLocation					= InventoryTransaction.FromToCompanyLocation.FromToLocation
				related.Item								= Item
				related.UnitOfMeasure						= LocalUnitOfMeasure

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= InventoryLocation
				related.Item								= Item
				related.UnitOfMeasure						= TransactionUOM

		LocationItemUOMDefaultTransactionRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= InventoryLocation
				related.Item								= Item
			Instance Selection
				where (related.DefaultForInventoryTransactions)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		ValidItemStorageLocationForItemRel
			one-to-one relation to ItemStorageLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= InventoryLocation
				related.Item							= Item
				related.WarehouseStorageLocation		= Bin.WarehouseStorageLocation

		ValidFromToCompanyLocationBinItemStorageLocationRel
			one-to-one relation to ItemStorageLocation
			Field Mapping uses symbolic key
				related.Company							= FromToCompanyLocationBin.FromToCompany
				related.InventoryLocation				= FromToCompanyLocationBin.FromToLocation
				related.Item							= Item
				related.WarehouseStorageLocation		= FromToCompanyLocationBin.FromToBin.WarehouseStorageLocation

		BinHasItemStorageLocationRel
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= InventoryLocation
			Instance Selection
				where (related.HasItemStorageLocation)

		DMFromToCompanyLocationBinRel 
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company							= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.InventoryLocation				= InventoryTransaction.FromToCompanyLocation.FromToLocation

		DMFromToCompanyLocationBinHasItemStorageLocationRel
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company							= InventoryTransaction.FromToCompanyLocation.FromToCompany
				related.InventoryLocation				= InventoryTransaction.FromToCompanyLocation.FromToLocation
			Instance Selection
				where (related.HasItemStorageLocation)

		BinHasItemStorageLocationWithStockOnHandRel
			one-to-many relation to Bin
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= InventoryLocation
			Instance Selection
				where (related.HasItemStorageLocation
				and    related.HasStockOnHand)
				
    Sets

        Set2
            indexed
            Instance Selection
                where (IsNotUnreleased)
            Sort Order
                Company
                InventoryLocation
                Item
                UpdateDate descending
                TransactionCounter descending
                TransactionSystemCode
				InventoryTransaction
				
        Set3
            indexed
            Instance Selection
                where (IsNotUnreleased)
            Sort Order
                Company
                InventoryReasonCode
                InventoryLocation
                Item
                UpdateDate
                TransactionCounter
                TransactionSystemCode
				InventoryTransaction
				
        Set4
            indexed
            Instance Selection
                where (IsReleasedOrIntermediate)
            Sort Order
                Company
                InventoryLocation
                Item
                UpdateDate descending
                TransactionCounter descending
                TransactionSystemCode
				InventoryTransaction
				
        Set5
            indexed
            Instance Selection
                where (IsUnreleased)
            Sort Order
                Company
                InventoryLocation
                TransactionSystemCode
				InventoryTransaction
                Item
                Bin
                TransactionUOM
                InventoryTransactionLine.LineNumber

        Set7
            indexed
            Instance Selection
                where (IsNotUnreleased)
            Sort Order
                Company
                InventoryLocation
                Item
                TransactionDate descending
                TransactionCounter descending
                ActualTime descending
                TransactionSystemCode
				InventoryTransaction

        Set8
            indexed
            Instance Selection
                where (HasManufacturerID)
            Sort Order
                ManufacturerID
                Company
                InventoryLocation
                TransactionDate
                ShipToFacility
                ManufacturerNumber
                TransactionSystemCode
                InventoryTransaction
                InventoryTransactionLine

        Set9
            indexed
            Sort Order
                FromToCompanyLocationBin.FromToCompany
                FromToCompanyLocationBin.FromToLocation
                Company
                InventoryLocation
                TransactionSystemCode
                InventoryTransaction
                InventoryTransactionLine
                Status
                TransactionDate

        Set1
            indexed
            Sort Order
                Company
                InventoryLocation
                TransactionSystemCode
                InventoryTransaction
                InventoryTransactionLine
                		
		ByOriginatingTransaction
			Sort Order
				OriginatingTransaction 
				TransactionSystemCode
				Company
				InventoryLocation
				InventoryTransaction
				InventoryTransactionLine.WarehouseShipment
				InventoryTransactionLine.LineNumber
				InventoryTransactionLine.ComponentSequence

		ByTransactionDateTime
			indexed
			Sort Order
				Company
				InventoryLocation
				TransactionSystemCode
				TransactionDate
				ActualTime
				InventoryTransaction
				InventoryTransactionLine

        ByItem
        	Sort Order
        		Company
                InventoryLocation
                Item
                UpdateDate
                TransactionCounter 
                InventoryTransactionLine
                TransactionSystemCode
				InventoryTransaction
				
		ByGeneralLedgerDate
			indexed
			Sort Order
				Company
				GeneralLedgerDate
				TransactionSystemCode
				InventoryLocation
				Item
				InventoryTransaction
				InventoryTransactionLine
				TransactionCounter descending				
        
    Field Rules
    	TransientPreciseUnitCost
    		constraint (TransientPreciseUnitCost decimals <= Item.NumberOfDecimalsCost)
				"TooManyDecimalDigitsEnteredForUnitCost:MaxIs<Item.NumberOfDecimalsCost>"
				
		TransactionSystemCode
			initial value is TransactionSystemCode.InventoryControl
			default to TransactionSystemCode.InventoryControl

		Item	
			if (ItemGTINRel exists)
				default to  ItemGTINRel.Item
				
			required
			
			constraint (Item exists)	
				"Item<Item>DoesNotExist" 																	

			constraint (ItemLocation exists)                                                  
				"ItemLocationDoesNotExist"					
			
			if (InventoryTransaction.IsInventoryReceipt
			or  InventoryTransaction.IsInventoryIssues
			or  InventoryTransaction.IsInventoryTransfer
			or  InventoryTransaction.IsInventoryAdjustments)
				constraint (ItemLocation.Active)
					"ItemLocationMustBeActive"								               
								                          
			if (IsInventoryReturns)					
				cannot be changed
					"ReturnItemsCannotBeChanged"	
	                          
			if (not IsPurchaseOrderCostAdjustment)
				constraint (ItemLocation.InventoryTracked)
					"Item<Item>MustBeTrackedAtLocation<InventoryLocation>"													    

			if (InventoryTransaction.IsInventoryReceipt)														
				constraint (ItemLocation.AllowReceipt)													
					"ReceiptsNotAllowedAtItemLocationForItem<Item>"      									

			if (InventoryTransaction.IsInventoryIssues)	
				constraint (ItemLocation.AllowIssue)
					"IssuesNotAllowedAtItemLocationForItem<Item>"	                    					

			if (Company.CostingMethod.StandardCosting)
				constraint (ItemLocation.StandardCost entered
				or 			ItemLocation.NoCharge)
					"NoStandardCostForItemLocation;EnterUnitCost" 	            	

			if (LineDetailExists)					
				cannot be changed
					"CannotChangeItem;DetailsExist"														    

			if (InventoryTransaction.IsInventoryIssues)
				constraint (!RecallProductItemForItemIssueHardErrorExists)
					"CannotAddItem;ItemIsOnActiveRecallNotice<first RecallProductItemForItemIssueHardErrorRel.RecallNotice>"
				if (RecallProductItemForItemIssueWarningExists)
					confirmation required
						"ItemIsOnActiveRecallNotice<first RecallProductItemForItemIssueWarningRel.RecallNotice>;DoYouWantToContinue?"
			
			if (InventoryTransaction.IsInventoryReceipt)
				constraint (!RecallProductItemForItemReceiptHardErrorExists)
					"CannotAddItem;ItemIsOnActiveRecallNotice<first RecallProductItemForItemReceiptHardErrorRel.RecallNotice>"
				if (RecallProductItemForItemReceiptWarningExists)
					confirmation required
						"ItemIsOnActiveRecallNotice<first RecallProductItemForItemReceiptWarningRel.RecallNotice>;DoYouWantToContinue?"
			
			if  (InventoryTransaction.IsInventoryTransfer
			and  not LocalSkipTransactionCreate)			
				constraint (!ItemLocation.Consignment)		
					"CannotTransferAConsignmentItem"                          								

				constraint (FromToCompanyItemLocationRel exists)
					"ItemLocationDoesNotExistForInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"           

				constraint (ItemLocation.InventoryTracked)
					"ItemNotInventoryTrackedAtInventoryLocation<InventoryTransaction.InventoryLocation>"								
					
				constraint (FromToCompanyItemLocationRel.InventoryTracked)
					"ItemNotInventoryTrackedAtInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"				
				
				constraint (ItemLocation.NoCharge = FromToCompanyItemLocationRel.NoCharge)
					"ItemNotANoChargeAtFromInventoryLocation<InventoryTransaction.InventoryLocation>OrAtToInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"

				if (InventoryLocationLotTrackingMustMatch)	
					constraint (ItemLocation.LotTracked = FromToCompanyItemLocationRel.LotTracked)
						"ItemNotLotTrackedAtFromInventoryLocation<InventoryTransaction.InventoryLocation>OrAtToInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"   								
					
				constraint (ItemLocation.SerialTracked = FromToCompanyItemLocationRel.SerialTracked)
					"ItemNotSerialTrackedAtFromInventoryLocation<InventoryTransaction.InventoryLocation>OrAtToInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>"  								
					
				constraint (ItemLocation.UDITracked = FromToCompanyItemLocationRel.UDITracked)
					"ItemNotUDITrackedAtFromInventoryLocation<InventoryTransaction.InventoryLocation>OrAtToInventoryLocation<InventoryTransaction.FromToCompanyLocation.FromToLocation>" 
				
				constraint (FromToCompanyItemLocationRel.Active)
					"ItemIsInactiveAt_\To_\Location"
			



			
			if (not Item.IsCatchWeightItem)
				initialize SecondaryUOM
				initialize TransientSecondayQuantityValue
				initialize SecondaryQuantity
			
			if (Item changed and InventoryTransaction.IsInventoryTransfer)
				initialize UnitCost
													
		ItemGTIN 
			force default to GlobalTradeItemNumber 
			if ((InventoryTransaction.InventoryDocumentType.InventoryReceipt
			or   InventoryTransaction.InventoryDocumentType.InventoryIssue
			or   InventoryTransaction.InventoryDocumentType.Adjustment
			or   InventoryTransaction.InventoryDocumentType.InventoryTransfer
			or   InventoryTransaction.InventoryDocumentType.BinTransfer)
			and  ItemLocation.Manufacturer entered 
			and  ItemLocation.ManufacturerNumber entered
			and  Company.ItemGroup.AllowMultipleGTINs)
				default to DefaultItemGTINRel.ItemGTIN
				default to NoDefaultItemGTINRel.ItemGTIN

			constraint (ItemGlobalTradeItemNumberUnitOfMeasureRel exists)
				"Item,GlobalTradeItemNumber(GTIN)AndTransactionUOMCombinationIsInvalid"     				

			if (not IsVendorReturn)
				constraint (ItemGTIN.Active)
					"GTIN<ItemGTIN>ForItem<Item>MustBeActive"
		Bin
			if (Bin entered)		
				constraint (ItemLocation.BinTracked)										
					"CannotEnterBin,ItemIsNotBinTracked"														

				if (ItemLocation.IsAWarehouseLocationItem
				and Bin.WarehouseStorageLocation entered)
					constraint (HasItemStorageLocation)
						"Bin<Bin>IsNotValidFor_Item<Item>"



			if (ItemLocation.BinTracked)
				if (!MultipleBins)	
					if (!IsIntransitReceivingOrCostAdjustment)     											
						default to ItemLocation.PreferredBin	
						if (not IsInventoryReturns)
							required
								"EitherMultipleBinsMustBeSelectedOrBinMustBeEntered"							
					if (Bin.BinType entered and HasBinTypeRestriction)
						for each Company.BinTypeArray.BinTypeGroup
							if (Bin.BinType = each.BinType)
								if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
								or	InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
									constraint (each.AllowsReceipt)
										"<Bin>ForCompany<Company>BinDoesNotAllowReceipts"
								else
								if (InventoryTransaction.InventoryDocumentType.InventoryIssue)
									constraint (each.AllowsIssue)
										"<Bin>ForCompany<Company>BinDoesNotAllowIssues"	
								end for each	
					
 
			if (!InventoryTransaction.IsInventoryBinTransfer)
				constraint (!MultipleBins)								
					"CannotEnterBinAndMultipleBinsTogether"													






	
		MultipleBins
			constraint (ItemLocation.BinTracked)										
				"CannotEnterMultipleBins,ItemIsNotBinTracked"												

		TransactionUOM		

			if (InventoryTransaction.IsCostAdjustment
			or  ItemLocation.IsSerialTracked) 
				force default to Item.StockUOM
			else
				if (Company.RequireUnitOfMeasure)
					required
						"CompanyRequiresUnitOfMeasureToBeEntered"															
				
				if (Item.IsCatchWeightItem)
					default to Item.StockUOM	
					constraint	(TransactionUOM = Item.StockUOM)
						"TransactionUOMMustBeEqualToItemStockUOM" 									
				else
					default to GlobalTradeItemNumber.UnitOfMeasure
					default to ItemLocation.DefaultTransactionUOM
					default to LocationItemUOMDefaultTransactionRel.UnitOfMeasure
					default to Item.DefaultTransactionUOM												
			
			if (InventoryTransaction.IsDirectTransferOrInventoryTransfer)

				if (HasItemLocationStockUOM)

					if (TransactionUOM changed)
						initialize LocationStockUOMRounded
					if (LocationItemUOMRel not exist
					or	not LocationItemUOMRel.OKForTransaction)

						if (HasToItemLocationStockUOM) 

							LocalUnitOfMeasure = DerivedLocationStockUOM

							if (ToLocationItemUOMRel.OKForTransaction
							and DerivedOrderUOMRounding)

								initialize UOMCalculation
								UOMCalculation.InputUOM			= TransactionUOM
								UOMCalculation.InputToUOM		= DerivedLocationStockUOM 
								UOMCalculation.InputQuantity	= Quantity
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
								LocalComputeQuantity			= UOMCalculation.OutputQuantity

								round LocalComputeQuantity up to nearest 1
								Quantity 			= LocalComputeQuantity
								TransactionUOM 		= DerivedLocationStockUOM
								LocationStockUOMRounded = true	
							else
								constraint (LocationItemUOMRel.OKForTransaction)
									"<TransactionUOM>IsNotValidTransactionUnitOfMeasureOnLocation<InventoryLocation>ForItem<Item>"								
				else
					constraint (ItemTransactionUnitOfMeasureRel.OKForTransaction)
						"<TransactionUOM>IsNotAValidUnitOfMeasureForItem<Item>"


				if (HasToItemLocationStockUOM)
					LocalUnitOfMeasure = TransactionUOM
					constraint (ToLocationItemUOMRel.OKForTransaction)
						"<TransactionUOM>IsNotValidTransactionUnitOfMeasureOnLocation<FromToCompanyLocationBin.FromToLocation>ForItem<Item>"
				else
					constraint (ItemTransactionUnitOfMeasureRel.OKForTransaction)
						"<TransactionUOM>IsNotAValidUnitOfMeasureForItem<Item>"

			else
			if (HasItemLocationStockUOM
			and not IsCostAdjustment)
				constraint (HasValidLocationUOM)
					"<TransactionUOM>IsNotAValidLocationUnitOfMeasureForItem<Item>"
			else

				constraint (HasValidUOM)
					"<TransactionUOM>IsNotAValidUnitOfMeasureForItem<Item>"										

			if (InventoryTransaction.IsInventoryBinTransfer)
				if (HasItemLocationStockUOM)
					constraint (TransactionUOM = DerivedLocationStockUOM)
						"<TransactionUOM>MustMatchLocationStockUOM<DerivedLocationStockUOM>"
				else
					constraint (IsUOMTrackedIn)
						"<TransactionUOM>IsNotAValidAlternateTrackedUOM"

			if (IsInventoryReturns)	
				cannot be changed
					"UnitOfMeasureFromIssueTransactionCannotBeChanged"	
								
		SecondaryUOM
			if (Item.IsCatchWeightItem)
				if (InventoryTransaction.IsCostAdjustment)
					force default to Item.SecondaryUOM
				else
					if (Company.RequireUnitOfMeasure)		
						required
							"CompanyRequiresSecondaryUOMEntry"													
					
					default to Item.SecondaryUOM											
					constraint (SecondaryUOM = Item.SecondaryUOM)
						"ForCatchWeightItem;SecondaryUOMMustBeEqualToItemSecondaryUOM"
			else
				cannot be entered
					"CannotEnterSecondaryUnitOfMeasureForNonCatchWeightItem"								

		Quantity 
			Quantity = TransientQuantityValue			

			if (InventoryTransaction.IsIntransitReceiving)
				constraint (Quantity <= OpenQuantity)
					"CannotReceiveMoreThanTransferQuantity"

			if (InventoryTransaction.IsPhysicalInventoryAdjustment
			or  InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
				if (!Item.IsCatchWeightItem)
					required
			else
				if (!InventoryTransaction.IsInventoryIntransitReceiving
				and !IsPurchaseOrderCostAdjustment)
					required

			if	(InventoryTransaction.IsIssuesOrAdjustments)
				if (Item.IsCatchWeightItem)
					constraint (!HasDifferentQuantitySecondaryQuantitySigns)
						"CatchWeightItem;SignOfQuantityAndSecondaryQuantityCannotBeDifferent"                

			if (InventoryTransaction.IsInventoryReturns)
				constraint (Quantity <= DerivedIssueLineTransactionQuantityForReturn)
					"QuantityEnteredIsMoreThanAvailableForReturn"
			
			if (InventoryTransaction.IsInventoryReceipt								
			or  InventoryTransaction.IsInventoryIntransitReceiving
			or  InventoryTransaction.IsInventoryReceivingTransfer
			or  InventoryTransaction.IsInventoryReturns
			or  InventoryTransaction.IsBinTransferOrInventoryTransfer)
				constraint (Quantity > 0)
					"QuantityCannotBeNegativeFor<InventoryTransaction.InventoryDocumentType>"				
			
			if (IsSerialTracked)
				constraint (Quantity decimals = 0)
					"QuantityShouldBeWholeNumberForSerialItem" 												
			
		SecondaryQuantity
			SecondaryQuantity = TransientSecondayQuantityValue
			if (!InventoryTransaction.IsCostAdjustment
			and !InventoryTransaction.IsPhysicalInventoryAdjustment)					
				if (Item.IsCatchWeightItem)
					if (not InventoryTransaction.IsPurchaseOrderReceiptAdjustment)
						required
							"MustEnterSecondaryQuantityForCatchWeightItem"										
				else
					cannot be entered
						"CannotEnterSecondaryQuantityForNonCatchWeightItem"							   		
		
			if (Item.IsCatchWeightItem)
				if (InventoryTransaction.IsNotPhysicalInventory)
					constraint (!HasDifferentQuantitySecondaryQuantitySigns)
						"CatchWeightItem;SignOfQuantityAndSecondaryQuantityCannotBeDifferent"                

				if (InventoryTransaction.IsInventoryReturns)
					constraint (SecondaryQuantity <= DerivedIssueLineSecondaryQuantityForReturn)
						"SecondaryQuantityEnteredIsMoreThanAvailableQuantityForReturn"
																													
		StockUOM			
			force default to Item.StockUOM
		
		ToUOM
			default to TransactionUOM
										
		TransactionUOMMultiplier
			if (TransactionSystemCode.InventoryControl
			and not IsInventoryReturns
			and not IsTransfers)
				force default to ItemTransactionUnitOfMeasureRel.UOMConversion
			else
				default to ItemTransactionUnitOfMeasureRel.UOMConversion										

		SecondaryUOMMultiplier		
			if (Item.IsCatchWeightItem)
				if (TransactionSystemCode.InventoryControl)  													
					force default to Item.SecondaryUOMConversion			
				else
					default to Item.SecondaryUOMConversion                      

		OffsetAccount	

			if (HasInventoryReasonCode
			and not IsNotValidForDistributions
			and not InventoryTransaction.IsDirectTransferOrInventoryTransfer)
				default to InventoryReasonCode.DistributionAccount
					default individual fields
			
			if (InventoryTransaction.IsInventoryReceipt)

				default to ItemLocation.GeneralLedgerCategory.ReceiptAccount
					default individual fields

			if ((InventoryTransaction.IsInventoryIssues
			and  not TransactionSystemCode.Requisition)
			or   IsInventoryReturns)
				if (InventoryTransaction.FromToCompanyLocation.RequestingLocation.ParOrExchangeLocation
				and ToCompanyItemLocationRel.GeneralLedgerCategory entered)		
					LocalGLCategoryIssueAccount = ToCompanyItemLocationRel.GeneralLedgerCategory.IssueAccount
				else
					LocalGLCategoryIssueAccount = ItemLocation.GeneralLedgerCategory.IssueAccount
				

				if (InventoryLocation.UseGLCategoryIssueAccountingUnitAsDefault.Yes
				and LocalGLCategoryIssueAccount.AccountingUnit entered)
					OffsetAccount.AccountingUnit = LocalGLCategoryIssueAccount.AccountingUnit
				else
					initialize LocalGLCategoryIssueAccount.AccountingUnit
				
				default to InventoryTransaction.DefaultDistributionAccount
					default individual fields
				default to InventoryTransaction.FromToCompanyLocation.RequestingLocation.IssueAccount
					default individual fields
				default to LocalGLCategoryIssueAccount
					default individual fields
				default to Item.IssueAccount
					default individual fields

			if (InventoryTransaction.IsInventoryAdjustments)
				default to ItemLocation.GeneralLedgerCategory.AdjustmentAccount
					default individual fields
			
			if (InventoryTransaction.IsVendorReturnOrAdjustment)
				default to InventoryLocation.VendorReturnSuspenseAccount
					default individual fields					
			
			if (!InventoryTransaction.IsInventoryTransferBinTransferAndIsInventoryIntransitReceiving
			and not InventoryTransaction.IsVendorReturnOrAdjustment
			and not IsRequisitionReturn
			and not InventoryTransaction.IsShipment)
				required
			
		AddOnCostAccount
			if (InventoryTransaction.IsInventoryIntransitReceiving
			and AddOnChargeUnitCost entered)
				default to ItemLocation.GeneralLedgerCategory.AddOnCostAccount
			
				
		FromToCompanyLocationBin
			if (InventoryTransaction.FromToCompanyLocation.FromToCompany entered)
				if (FromToCompanyLocationBin.FromToCompany not entered)
					force default FromToCompanyLocationBin.FromToCompany to InventoryTransaction.FromToCompanyLocation.FromToCompany

				constraint (FromToCompanyLocationBin.FromToCompany = InventoryTransaction.FromToCompanyLocation.FromToCompany)
					"ToCompanyShouldBeMatchWithToCompanyOfInventoryTransaction"
			
			if (InventoryTransaction.FromToCompanyLocation.FromToLocation entered)
				if (FromToCompanyLocationBin.FromToLocation not entered)
					force default FromToCompanyLocationBin.FromToLocation to InventoryTransaction.FromToCompanyLocation.FromToLocation
	
				constraint (FromToCompanyLocationBin.FromToLocation = InventoryTransaction.FromToCompanyLocation.FromToLocation)
					"ToLocationShouldBeMatchWithToLocationOfInventoryTransaction"
					
			if (FromToCompanyLocationBin.RequestingLocation not entered
			and InventoryTransaction.FromToCompanyLocation.RequestingLocation entered)
				force default FromToCompanyLocationBin.RequestingLocation to InventoryTransaction.FromToCompanyLocation.RequestingLocation

			if (InventoryTransaction.IsDirectTransferOrInventoryTransfer)
				if  (InventoryTransaction.IntransitTransfer
				and (action type.Create 
				or 	 FromToCompanyLocationBin.FromToBin changed))
					constraint (FromToCompanyLocationBin.FromToBin not entered)
						"ToBinNotAllowedOnIntransitTransfer"                     			       
				else 
				if	(FromToCompanyItemLocationRel.BinTracked)
					default FromToCompanyLocationBin.FromToBin to FromToCompanyItemLocationRel.PreferredBin
					constraint (FromToCompanyLocationBin.FromToBin entered)
						"ToBinIsRequiredForTransfer"
				else
				if (not FromToCompanyItemLocationRel.BinTracked)
					constraint (FromToCompanyLocationBin.FromToBin not entered)
						"CannotEnterBin,ItemIsNotBinTrackedAtToLocation"

			if (InventoryTransaction.IsInventoryBinTransfer)
				if (ItemLocation.BinTracked)
					constraint (FromToCompanyLocationBin.FromToBin entered)
						"ToBinIsRequiredForBinTransfer"
			
			if (FromToCompanyItemLocationRel.IsAWarehouseLocationItem
			and FromToCompanyLocationBin.FromToBin.WarehouseStorageLocation entered)
				constraint (ValidFromToCompanyLocationBinItemStorageLocationRel exists)
					"ToBin<FromToCompanyLocationBin.FromToBin>IsNotValidFor_Item<Item>"
					
		FromCurrency			
			initial value is InventoryTransaction.Company.GeneralLedgerCompany.Currency
			default to InventoryTransaction.Company.GeneralLedgerCompany.Currency
			
		ToCurrency
			if (InventoryTransaction.IsInventoryTransfer
			or  InventoryTransaction.IsInventoryIssues
			or  InventoryTransaction.IsDirectTransfer
			or  InventoryTransaction.IsIntransitReceiving
			or  InventoryTransaction.IsInventoryReceivingTransfer)
				default to InventoryTransaction.FromToCompanyLocation.FromToCompany.Currency

		UnitCost




			if (action type.Create)
				default to DerivedUnitCostForDefaulting
			else
				if (UnitCost not changed)
					force default to DerivedUnitCostForDefaulting

			if (!InventoryTransaction.SkipForWorkOrder)
				if	((InventoryTransaction.IsInventoryAdjustments										
				or 	InventoryTransaction.IsInventoryReceipt
				or  InventoryTransaction.IsInventoryReturns
				or 	InventoryTransaction.IsInventoryIssues)
				and	UnitCost < 0)
					cannot be entered
						"UnitCostCannotBeNegative"
					
				if (UseLastIssueCost)																			
					cannot be entered													
						"EitherUseLastIssueCostMustBeSelectedOrUnitCostMustBeEntered" 
	
				initialize LocalUseLastIssue
				
				if (IsUnitCostNotRequiredForIssues
				or  IsUnitCostNotRequiredForInventoryReturns
				or  IsUnitCostNotRequiredForAdjustments  
				or  IsUnitCostNotRequiredForReceipts)
					cannot be entered
						"<DerivedMessageForUnitCost>"
	
				if ((InventoryTransaction.IsInventoryIssues and Quantity < 0)
				or   InventoryTransaction.IsInventoryReturns)
					if (IsInventoryReturns
					and Company.InventoryReturnsAtAverageCost)
						default to ItemLocation.DerivedItemAverageCost

					if (UseLastIssueCost)
						include UnitCostDefaultingLogic
											
					if (!ItemLocation.NoCharge
					and !UseLastIssueCost
					and (InventoryTransaction.IsInventoryIssues or IssueInventoryTransactionLineOfReturnRel.UnitCost entered))
						required
				
				if (InventoryTransaction.IsInventoryReceipt) 
					include UnitCostDefaultingLogic
								
				if (InventoryTransaction.IsInventoryTransfer
				and Company.CostingMethod.AverageCosting)
					default to ItemLocation.DerivedItemAverageCost
				
				if (InventoryTransaction.IsInventoryAdjustments)			
					if (Quantity > 0)
						include UnitCostDefaultingLogic			







		UseLastIssueCost		
			if (InventoryTransaction.IsIssuesOrAdjustments)   																
				if (ItemLocation.NoCharge)
					cannot be entered												
						"UseLastIssueCostNotAllowed;ItemLocationIsNoCharge"  							
			
			if (InventoryTransaction.IsInventoryAdjustments
			and Quantity > 0)
				cannot be entered																															
					"UseLastIssueCostNotAllowedOnAdjustmentOut"							      			
														
			if (InventoryTransaction.IsInventoryIssues)				
				constraint (Quantity < 0)
					"EnteredQuantityIsPositive,CannotSelectUseLastIssueCost"          				       
 		
		CurrNd
			default to Company.GeneralLedgerCompany.CurrencyNumberOfDecimals

		IntransitReceivingStatus		
			default to IntransitReceivingStatus.NoReceiving
							
		StockOnHandQuantity	
			default to ItemLocation.StockOnHandQuantity

		SecondaryStockOnHandQuantity
			default to ItemLocation.SecondaryQuantity

		ManufacturerNumber	
			default to DerivedManufacturerNumber			
		
		EAMWorkOrderNumber		
			if (InventoryTransaction.IsIssuesOrAdjustments)															
				constraint (InventoryLocation.EAMLocation.EAMLocation)
					"InventoryLocationIsNotAnEAMLocation,CannotEnterEAMWorkOrderNumber"          
		
		EAMWorkOrder
			if  (TransactionSystemCode.InventoryControl
			and  not InventoryTransaction.IsInventoryIssues
			and  not InventoryTransaction.IsInventoryReturns
			and  not InventoryTransaction.IsIntransitReceiving
			and  not InventoryTransaction.IsInventoryReceivingTransfer)
				cannot be entered
					"EAMWorkOrderCannotBePopulatedForThisDocumentType"

			if (InventoryTransaction.IsIntransitReceiving
			or  InventoryTransaction.IsInventoryReturns)
				cannot be changed
					"EAMWorkOrderCannotBeModifiedForThisDocumentType"
		
		EAMWorkOrderActivity
			if  (TransactionSystemCode.InventoryControl
			and  not InventoryTransaction.IsInventoryIssues
			and  not InventoryTransaction.IsInventoryReturns
			and  not InventoryTransaction.IsIntransitReceiving
			and  not InventoryTransaction.IsInventoryReceivingTransfer)
				cannot be entered
					"EAMWorkOrderActivityCannotBePopulatedForThisDocumentType"

			if (InventoryTransaction.IsIntransitReceiving
			or  InventoryTransaction.IsInventoryReturns)
				cannot be changed
					"EAMWorkOrderActivityCannotBeModifiedForThisDocumentType"

		TransactionDate
			force default to InventoryTransaction.DerivedTransactionDate										

		GeneralLedgerDate
			default to InventoryTransaction.GeneralLedgerDate	
		
		EstimatedDeliveryDate		
			default to InventoryTransaction.EstimatedDeliveryDate			
		
		ActualTime		
			default to InventoryTransaction.TransactionDate
		
		LastUpdateDate																		
			default to current timestamp
			
		UpdateDate
			default to current timestamp
		
		CreatedBy
			default to actor
			
		LastUpdateBy
			default to actor
			
		GlobalLineType
			default to  ItemLocation.GlobalLineType

		TransientLot
			LocalLot		= TransientLot
			LocalSublot		= TransientSublot
			







		
		TransientSerial
			LocalSerial		= TransientSerial







		
		TransientQuantityValue
			if (InventoryTransaction.IsInventoryBinTransfer
			and ItemLocation.IsSerialTracked)
				force default to 1
								
	
	Create Rules
		constraint (not (InventoryTransaction.IsInventoryReceipt 
		or               InventoryTransaction.IsInventoryTransfer)
		or               InventoryLocation.Status.Active)
			"InventoryLocation<InventoryLocation>MustBeActive"
	
	StateCycles
	
		InventoryTransactionProcessing is a StateCycle
			state field is Status
			
			Unreleased is a State
 				Create is a Create Action
					valid when (ValidForCreate)
					
					Entrance Rules
						invoke RefreshAndLock InventoryTransaction
						
					Action Rules
						include ValidateOngoingCalculation
						if (GeneralLedgerSystemCodeRel exists)
							LocalGeneralLedgerSystemCode = GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode	
						if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
							if (GeneralLedgerDate entered)								
								LocalPostingDate = GeneralLedgerDate
							else 								
								LocalPostingDate = InventoryTransaction.GeneralLedgerDate								
						constraint (InventoryTransaction.IsUnreleased)
							"CreateActionIsNotValidForReleasedTransaction"
						if (!TransientDetailTransfer)
							increment InventoryTransaction.LastLineNumber
						
					Exit Rules
			    		increment InventoryTransaction.TransactionQuantityTotal by Quantity
			    		increment InventoryTransaction.NumberOfLines by 1
			    		
						if (not InventoryTransaction.IsInventoryBinTransfer
						and not InventoryTransaction.IsVendorReturn
						and not InventoryTransaction.IsVendorReturnCancel
						and not InventoryTransaction.TransientReturnAllLines
						and not IsTransfers and not IsIcPoCostAdjustment)
							include CreateBinDetailWhenIsBinTrackedAndSingleBin
	
				UpdateBODIdFields is an Instance Action
					restricted
					Parameters
						PrmAccountingEntity  is Alpha size 22
							default label is "AccountingEntity"
						PrmLocation          is Alpha size 22
							default label is "Location" 
						PrmDocumentID        is Alpha size 100
							default label is "DocumentID"
						PrmRevision          is Alpha size 22
							default label is "Revision"	
						PrmSystemOfRecord    is Alpha size 1
							default label is "SystemOfRecord"
						PrmVariationID       is Alpha size 22
							default label is "VariationID"	
					Action Rules
						if (bod id.AccountingEntity != PrmAccountingEntity)
							bod id.AccountingEntity 	= PrmAccountingEntity
						if (bod id.Location != PrmLocation)
							bod id.Location				= PrmLocation
						if (bod id.DocumentID != PrmDocumentID)
							bod id.DocumentID			= PrmDocumentID
						if (bod id.Revision != PrmRevision)
							bod id.Revision				= PrmRevision
						if (bod id.SystemOfRecord != PrmSystemOfRecord)
							bod id.SystemOfRecord		= PrmSystemOfRecord
						if (bod id.VariationID != PrmVariationID)
							bod id.VariationID			= PrmVariationID				
					
				Update is an Update Action			
					valid when (ValidForUpdateAndDelete)
					
					Entrance Rules
						invoke RefreshAndLock InventoryTransaction
					
		        	Action Rules
						LocalPreciseUnitCost = UnitCost																		
		        		if (TransactionUOM changed 		        	
		        		and ItemLocation.InventoryCostHistoryRel exist
		        		and not InventoryTransaction.IsInventoryIssues
		        		and LocalPreciseUnitCost = TransientPreciseUnitCost)     		
		        			initialize TransientPreciseUnitCost	

		        		if (GeneralLedgerSystemCodeRel exists)
							LocalGeneralLedgerSystemCode = GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode		        		
		        		if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
							if (GeneralLedgerDate entered)								
								LocalPostingDate = GeneralLedgerDate
							else 								
								LocalPostingDate = InventoryTransaction.GeneralLedgerDate
						
						constraint (ValidForUpdateAndDelete)
							"UpdateActionIsNotValidForReleasedTransaction"
						
		        		if (Quantity changed)
		        			initialize LocalQuantityTotal
							LocalQuantityTotal = Quantity - old Quantity
		        			increment InventoryTransaction.TransactionQuantityTotal by LocalQuantityTotal
		        			
		        		initialize LocalDetailCreatedForABin
		        		
		        		if  (Bin changed
		        		or  MultipleBins changed)       			
	        				if (old MultipleBins
	        				and !MultipleBins)
								if ((InventoryTransaction.IsInventoryIntransitReceiving
								and !IsBinTrackedOnlyNotLotSerailTracked)
								or  !InventoryTransaction.IsInventoryIntransitReceiving)
									if (InventoryUDIDetailRel exists)
										
										confirmation required
											"Warning,UDIAndBinDetailWillBeDeleted;Proceed?"
										invoke QuickDelete InventoryTransactionLineDetailsRel
					        			invoke QuickDelete InventoryUDIDetailRel	 
									
									else
										if (LineDetailExists)
											if ((InventoryTransaction.IsInventoryIntransitReceiving
											and !IsBinTrackedOnlyNotLotSerailTracked)
											or  !InventoryTransaction.IsInventoryIntransitReceiving)
												
												confirmation required
													"Warning,DetailWillBeDeleted;Proceed?"
							        			invoke QuickDelete InventoryTransactionLineDetailsRel	        					

			        			if (Bin entered)
		        					include CreateBinDetailWhenIsBinTrackedAndSingleBin
		        					LocalDetailCreatedForABin = true

		        		if (InventoryTransaction.IsInventoryIntransitReceiving
			        	and DetailLineCount = 1)
	        				invoke UpdateFromTransactionLine InventoryTransactionLineDetailsRel
	        					if (TransactionUOM != first InventoryTransactionLineDetailsRel.UnitOfMeasure)
    								initialize UOMCalculation
									UOMCalculation.InputUOM							= TransactionUOM
									UOMCalculation.InputToUOM						= first InventoryTransactionLineDetailsRel.UnitOfMeasure
									UOMCalculation.InputQuantity					= Quantity
									UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
									invoked.PrmQuantity								= UOMCalculation.OutputQuantity	
	        					else
									invoked.PrmQuantity			= Quantity        				
								invoked.PrmBin					= Bin
	
						if (InventoryTransaction.IsInventoryBinTransfer)
							if (ItemLocation.IsSerialTracked)	
								if (FromToCompanyLocationBin.FromToBin changed)
									invoke Unreleased.QuickUpdate InventoryTransactionLineDetailsRel
										invoked.Bin               	    = FromToCompanyLocationBin.FromToBin
							else
								if (Bin changed)				
									invoke Unreleased.QuickUpdate InventoryTransactionLineDetailsRel
										invoked.Bin               	    = Bin


						else
				    		if	(IsBinTrackedItemWithSingleBin
				    		and  IsLineValuesChanged
				    		and  !LocalDetailCreatedForABin)
				    			if (IsUDIDetailTransaction and TransactionSystemCode.InventoryControl)
				    				invoke QuickUpdate InventoryUDIDetailRel
				    					if (TransactionUOM entered)
				    						invoked.UOM						= TransactionUOM
					    				if (InventoryTransaction.IsInventoryBinTransfer)
											if (FromToCompanyLocationBin.FromToBin entered)
												invoked.Bin 				= FromToCompanyLocationBin.FromToBin
					    				else
					    					if (Bin entered)
					    						invoked.Bin					= Bin
										if (TransientQuantityValue entered)
											invoked.Quantity				= TransientQuantityValue
										invoked.LocalBypassUDIRequired  	= true
				    		
				    			invoke UpdateFromTransactionLine InventoryTransactionLineDetailsRel
				    				invoked.PrmUnitOfMeasure		= TransactionUOM
				    				if (InventoryTransaction.IsInventoryBinTransfer)
										invoked.PrmBin 				= FromToCompanyLocationBin.FromToBin
				    				else
				    					invoked.PrmBin				= Bin
									invoked.PrmQuantity				= TransientQuantityValue 
									invoked.PrmSecondaryQuantity	= TransientSecondayQuantityValue
					Exit Rules
						if (TransactionUOMMultiplier changed)
							for each InventoryTransactionLineDetailsRel
								if (TransactionUOM = each.UnitOfMeasure)
									invoke Unreleased.QuickUpdate each
										invoked.UOMMultiplier       = TransactionUOMMultiplier

				Delete is a Delete Action
					valid when (IsNotInterfaceInProcessAndNotIntransitReceiving)
					
					Entrance Rules
						invoke RefreshAndLock InventoryTransaction
						
						constraint (ValidForUpdateAndDelete)
							"DeleteActionIsNotValidForReleasedTransaction"

					
						decrement InventoryTransaction.TransactionQuantityTotal by Quantity
						decrement InventoryTransaction.NumberOfLines by 1
				
				SystemDelete is a Delete Action
					restricted
					Entrance Rules
						invoke RefreshAndLock InventoryTransaction
					
				ReceivingUpdate is an Instance Action
					restricted
					Action Rules
						Quantity   = OpenQuantity
						if (ItemLocation.BinTracked

						and !MultipleBins
						and ItemLocation.PreferredBin entered)
							Bin = ItemLocation.PreferredBin	
					Exit Rules
						invoke ReceivingUpdate	InventoryTransactionLineDetailsRel
						if (InventoryUDIDetailForWHRel exists)
							invoke ReceivingUpdate InventoryUDIDetailForWHRel
						else
						if (InventoryUDIDetailRel exists)
							invoke ReceivingUpdate  InventoryUDIDetailRel
						increment InventoryTransaction.TransactionQuantityTotal by Quantity - old Quantity

				ReleaseInventoryTransaction is an Instance Action
					valid when (InventoryTransaction.NotIntransitReceivingOrInterfaceInProcess)
					Action Rules
						invoke Release Unreleased InventoryTransaction


				Release is an Instance Action
					restricted
					
					Parameters
						PrmIntransitAndReceivingDocumentType	is like InventoryDocumentType
						PrmIntransitAndReceivingDocumentNumber	is like InventoryTransaction
						PrmIntransitTransferDocumentNumber		is like InventoryTransaction
						PrmInspectionHoldQuantity				is like Quantity
						PrmInspectionHoldCatchWeightQuantity	is like Quantity
						PrmReceiveAll							is Boolean
						PrmSkipDistributions					is Boolean
						PrmOffsetUnitCost						is like UnitCost
						PrmOffsetUnitCostInTransactionCurrency	is like UnitCost
						PrmTransactionCurrency					is like Currency	
						PrmOverrideOffsetAccount				is a FinanceCodeBlockFull
						PrmOverrideCreditAccount				is a FinanceCodeBlockFull
						PrmSkipTransactionCreate				is Boolean
						PrmTransactionUOM						is a UnitOfMeasure
						PrmTransactionUOMMultiplier				is a UOMMultiplier
						PrmTransactionDate						is Date
					Action Rules
						LocalSkipTransactionCreate	= PrmSkipTransactionCreate
						LocalOffsetUnitCost			= PrmOffsetUnitCost
						LocalOffsetUnitCostInTransactionCurrency = PrmOffsetUnitCostInTransactionCurrency
						LocalTransactionCurrency	= PrmTransactionCurrency
						LocalOverrideOffsetAccount	= PrmOverrideOffsetAccount
						LocalOverrideCreditAccount	= PrmOverrideCreditAccount
						LocalTransactionDate		= PrmTransactionDate
						if(PrmTransactionUOM entered)
							LocalOriginalTransactionUOM = PrmTransactionUOM
						if (DoDebug)
							display "ITLRelease:InventoryTransaction:<InventoryTransaction.InventoryDocumentType>"					
						include ReleaseTransactionLine

						if (not LocalHasError)						
							if (InventoryTransaction.IsInventoryIntransitReceiving)
								if (Quantity < OpenQuantity)
									IntransitReceivingStatus  = 2
									OpenQuantity              = OpenQuantity   - Quantity
									initialize Bin
									initialize MultipleBins 
									initialize Quantity
									initialize AddOnChargeUnitCost
									initialize AddOnCostAccount
								else
								if (Quantity = OpenQuantity)
									IntransitReceivingStatus  = 3
									OpenQuantity              = OpenQuantity	- Quantity
									initialize Quantity
	
								if (Item.IsCatchWeightItem)
									initialize SecondaryQuantity
							else	

								if (!PrmSkipDistributions)
									include CreateDistributions
							include UpdateInventoryUsageHistory
							
							if (PrmTransactionUOM entered) 
								TransactionUOM				= PrmTransactionUOM
								TransactionUOMMultiplier	= PrmTransactionUOMMultiplier
						




					Exit Rules
						if (not LocalHasError)
							if (InventoryTransaction.bod id.VariationID < 1 and (InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryIssue 
							or InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryTransfer))
								if (Company.FinanceEnterpriseGroup.BODTrigger)
									LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+" CO:"+Company+" INVL:"+InventoryLocation+" INVT:"+InventoryTransaction
									increment InventoryTransaction.bod id.VariationID
									ActionCode = ActionCode.Update
									include TriggerInventoryTransactionRules
									include TriggerBRInventoryTransactionRules

							
							invoke TriggerInventoryAdjustment
					
		



							if (!InventoryTransaction.IsInventoryIntransitReceiving)
								make transition to Released

				ReleaseIntransitLine is an Instance Action
					restricted
					Action Rules
						Quantity    = OriginalQuantity
						invoke Delete WarehouseDemandForIntransitReceivingRel
						invoke ReleaseIntransitLineDetail InventoryTransactionLineDetailsRel
						make transition to Released
					
					Exit Rules
						if (InventoryTransactionLine.LineNumber  = 1 and (InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryIssue or InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryTransfer))
							if (Company.FinanceEnterpriseGroup.BODTrigger)
								LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+" CO:"+Company+" INVL:"+InventoryLocation+" INVT:"+InventoryTransaction
								increment bod id.VariationID
								ActionCode = ActionCode.Update
								include TriggerInventoryTransactionRules
								include TriggerBRInventoryTransactionRules

				
				Transfer is an Instance Action
					restricted
					Action Rules
						if (CurrentCost not entered)
							CurrentCost = DerivedCurrentCost
						
						if (IsItemLocationBinTracked)
							constraint (Bin entered and FromToCompanyLocationBin entered)
								"FromBinAndToBinMustBeEntered"
						if (HasItemLocationStockUOM)
							constraint (Bin not = FromToCompanyLocationBin.FromToBin)
								"ItemHasLocationStockUOM,FromAndToBinCannotBeTheSame"
						else
							if (Bin = FromToCompanyLocationBin.FromToBin)
								constraint (not ItemLocation.IsSerialTracked)
									"ItemIsSerialTracked,FromAndToBinCannotBeTheSame"	
								constraint (TransactionUOM != ToUOM)
									"ToAndFromUOM\sMustBeDifferentWhenFromAndToBinsAreTheSame"
						
						constraint (TrackedAlternateUOMRel exists)
							"Line<InventoryTransactionLine.LineNumber>ItemIsNotTrackedIn<ToUOM>"
						
						if  (InventoryTransactionLineDetailsRel not exists	
						and (IsItemLocationBinTracked or (TrackedAlternateUOMRel exists and not HasItemLocationStockUOM))
						and  not IsItemLocationSerialTracked	
						and  not IsItemLocationLotTracked)		
							include CreateDetailForDetailTransfer
								
						include ValidateDetailInBalance
						
						for each InventoryTransactionLineDetailsRel
							invoke Transfer each 

						if (HasItemLocationStockUOM)
							Quantity = Quantity * DerivedLocationStockUOMMultiplier
							


									
					Exit Rules
						make transition to NonGlobalLedger

			Released is a State
				Update is an Update Action
					restricted			

				
				NonGeneralLedgerForInspection is an Instance Action
					default label is "NonGlobalLedgerForInspection"
					restricted
					Action Rules
						make transition to NonGlobalLedger
			
			GlobalLedgerUpdated is a State
			
			IntermediateStatus is a State
			
			NonGlobalLedger is a State
			
	Actions

		CreateReturnLinesFromIssueLineSet is a Set Action
			restricted
			Parameters
				PrmInventoryCompany			is an InventoryCompany
				PrmInventoryLocation		is an InventoryLocation
				PrmInventoryTransaction		is an InventoryTransaction
				PrmOriginalLocation			is like InventoryLocation
				PrmOriginalTransaction		is like InventoryTransaction
			Instance Selection
				where (Company					=	PrmInventoryCompany
				and    InventoryTransaction		=	PrmOriginalTransaction
				and    InventoryLocation		=	PrmOriginalLocation
				and    Quantity < 0
				and    DerivedQuantityAvailableForReturn > 0)

			Action Rules
				Empty Set Rules
					invoke FinishCreateReturnLines PrmInventoryTransaction

				Set Rules
					Exit Rules
						invoke FinishCreateReturnLines PrmInventoryTransaction

				Instance Rules			
					LocalReturnLocation	= PrmInventoryLocation	
					invoke Unreleased.Create InventoryTransactionLine
						assign result to NewInventoryTransactionLine
						resume on error
							LocalHasError 	= true
						invoked.Company									= Company
						invoked.InventoryLocation						= PrmInventoryLocation
						invoked.InventoryTransaction					= PrmInventoryTransaction
						invoked.TransactionSystemCode					= TransactionSystemCode.InventoryControl
						invoked.OriginatingTransaction					= reference to this instance
						invoked.InventoryTransactionLine.LineNumber		= InventoryTransactionLine.LineNumber
						initialize invoked.InventoryTransactionLine.WarehouseShipment
						initialize invoked.InventoryTransactionLine.ComponentSequence
						invoked.Item									= Item
						if (not ItemLocation.NoCharge)
							invoked.UnitCost 							= DerivedReturnUnitCost
						invoked.Quantity 								= DerivedForReturnInTransactionUOM
						if (PrmInventoryTransaction.DefaultDistributionAccount entered)
							invoked.OffsetAccount						= PrmInventoryTransaction.DefaultDistributionAccount
						else
							invoked.OffsetAccount						= OffsetAccount	
						invoked.TransactionUOM							= TransactionUOM
						invoked.TransactionUOMMultiplier				= TransactionUOMMultiplier
						if (IsCatchWeightItem)
							invoked.SecondaryQuantity 					= DerivedSecondaryQuantityAvailableForReturn
							invoked.SecondaryUOM						= SecondaryUOM
							invoked.SecondaryUOMMultiplier				= SecondaryUOMMultiplier
						invoked.EAMWorkOrder							= EAMWorkOrder
						invoked.EAMWorkOrderActivity					= EAMWorkOrderActivity
						invoked.LocalCreateReturnFromWizard 			= true
						if (InventoryReturnItemLocationRel.BinTracked)
							if (this instance.InventoryTransactionLine.MultipleBins
							or  (InventoryReturnItemLocationRel.PreferredBin not entered
							and ItemLocation.InventoryLocation != InventoryReturnItemLocationRel.InventoryLocation))
								invoked.MultipleBins					= true
							else 
							if (InventoryReturnItemLocationRel.PreferredBin entered)
								invoked.Bin								= InventoryReturnItemLocationRel.PreferredBin
							else
								invoked.Bin								= InventoryTransactionLine.Bin

					if  (NewInventoryTransactionLine.ItemLocation.DetailTrackedOnIssue
					and	 not LocalHasError
					and (not NewInventoryTransactionLine.ItemLocation.BinTracked
					or 	 not PrmInventoryTransaction.TransientOverrideLocation
					or 	 NewInventoryTransactionLine.ItemLocation.PreferredBin entered))
						for each InventoryTransactionLineDetail set
							if ((each.Serial not entered
							or  (each.Serial entered and each.Serial.Status.Issued))
							and (each.Lot not entered
							or  (each.Lot entered and each.DerivedReturnedQuantity < (each.Quantity * -1))))
								invoke Unreleased.QuickCreate InventoryTransactionLineDetail
									invoked.Company							= NewInventoryTransactionLine.Company
									invoked.InventoryLocation				= NewInventoryTransactionLine.InventoryLocation
									invoked.InventoryTransaction			= NewInventoryTransactionLine.InventoryTransaction
									invoked.TransactionSystemCode			= NewInventoryTransactionLine.TransactionSystemCode
									invoked.InventoryTransactionLine		= NewInventoryTransactionLine.InventoryTransactionLine
									invoked.Item							= NewInventoryTransactionLine.Item
									invoked.UnitOfMeasure					= NewInventoryTransactionLine.TransactionUOM
									if (NewInventoryTransactionLine.ItemLocation.BinTracked)
										if (NewInventoryTransactionLine.ItemLocation.PreferredBin entered)
											invoked.Bin							= NewInventoryTransactionLine.ItemLocation.PreferredBin
										else
											invoked.Bin							= each.Bin
									if (each.Lot entered)
										invoked.Quantity						= ((each.Quantity * -1) - each.DerivedReturnedQuantity)
									else
										invoked.Quantity						= each.Quantity * -1
									invoked.SecondaryQuantity				= each.SecondaryQuantity * -1
									invoked.Lot								= each.Lot
									invoked.Sublot							= each.Sublot
									invoked.Serial							= each.Serial				


		IncludeInReturnLine is an Instance Action 
			completion message is "AddedToReturnTransactionNo<PrmInventoryTransaction>"
			default label is "AddToReturnTransaction"
			restricted
			Parameters
				PrmCompany						is an InventoryCompany
				PrmInventoryLocation			is an InventoryLocation
				PrmInventoryTransaction			is an InventoryTransaction
			Action Rules
			
				LocalReturnLocation		= PrmInventoryLocation
				LocalReturnTransaction	= PrmInventoryTransaction
	
				constraint (not InventoryTransaction.IsCreateInProgress)
					"InventoryTransactionCreationInProgress"

				constraint (InventoryTransactionReturnLineRel not exists)
					"ReturnLineAlreadyExists"
					
				constraint (DerivedQuantityAvailableForReturn > 0)
					"IssuedLineHasBeenFullyReturned"
				
				invoke Unreleased.Create InventoryTransactionLine
					assign result to NewInventoryTransactionLine
					invoked.Company									= Company
					invoked.InventoryLocation						= PrmInventoryLocation
					invoked.InventoryTransaction					= PrmInventoryTransaction
					invoked.TransactionSystemCode					= TransactionSystemCode.InventoryControl
					invoked.OriginatingTransaction					= reference to this instance
					invoked.InventoryTransactionLine.LineNumber		= InventoryTransactionLine.LineNumber
					initialize invoked.InventoryTransactionLine.WarehouseShipment
                    initialize invoked.InventoryTransactionLine.ComponentSequence
					invoked.Item									= Item
					if (not ItemLocation.NoCharge)
						invoked.UnitCost 							= DerivedReturnUnitCost
					invoked.Quantity 								= DerivedForReturnInTransactionUOM
					if (InventoryReturnTransactionRel.DefaultDistributionAccount entered)
						invoked.OffsetAccount						= PrmInventoryTransaction.DefaultDistributionAccount
					else
						invoked.OffsetAccount						= OffsetAccount	
					invoked.TransactionUOM							= TransactionUOM
					invoked.TransactionUOMMultiplier				= TransactionUOMMultiplier
					if (ItemGlobalTradeItemNumberUnitOfMeasureRel exists) 
						invoked.GlobalTradeItemNumber				= ItemGTIN
					if (IsCatchWeightItem)
						invoked.SecondaryQuantity 					= DerivedSecondaryQuantityAvailableForReturn
						invoked.SecondaryUOM						= SecondaryUOM
						invoked.SecondaryUOMMultiplier				= SecondaryUOMMultiplier
					invoked.EAMWorkOrder							= EAMWorkOrder
					invoked.EAMWorkOrderActivity					= EAMWorkOrderActivity
					invoked.LocalCreateReturnFromWizard 			= true
					if (InventoryReturnItemLocationRel.BinTracked)
						if (this instance.InventoryTransactionLine.MultipleBins
						or  (InventoryReturnItemLocationRel.PreferredBin not entered
						and ItemLocation.InventoryLocation != InventoryReturnItemLocationRel.InventoryLocation))
							invoked.MultipleBins					= true
						else 
						if (InventoryReturnItemLocationRel.PreferredBin entered)
							invoked.Bin								= InventoryReturnItemLocationRel.PreferredBin
						else
							invoked.Bin								= InventoryTransactionLine.Bin

				if  (NewInventoryTransactionLine.IsSingleBinShipmentReturn)
					for each InventoryTransactionLineDetail set
						invoke Unreleased.QuickCreate InventoryTransactionLineDetail
							invoked.Company							= NewInventoryTransactionLine.Company
							invoked.InventoryLocation				= NewInventoryTransactionLine.InventoryLocation
							invoked.InventoryTransaction			= NewInventoryTransactionLine.InventoryTransaction
							invoked.TransactionSystemCode			= NewInventoryTransactionLine.TransactionSystemCode
							invoked.InventoryTransactionLine		= NewInventoryTransactionLine.InventoryTransactionLine
							invoked.Item							= NewInventoryTransactionLine.Item
							invoked.UnitOfMeasure					= NewInventoryTransactionLine.TransactionUOM
							if (NewInventoryTransactionLine.ItemLocation.PreferredBin entered)
								invoked.Bin							= NewInventoryTransactionLine.ItemLocation.PreferredBin
							else
								invoked.Bin							= each.Bin
							invoked.Quantity						= each.Quantity * -1
							invoked.SecondaryQuantity				= each.SecondaryQuantity * -1

	
		Purge is a Purge Action
			bypass relational integrity rules
			restricted
		
		InventoryTransactionLinePurge is a Set Action
			restricted
			Parameters
				PrmInventoryTransaction						is a InventoryTransaction
					default label is "InventoryTransaction"
				PrmInventoryLocation						is an InventoryLocation
					default label is "InventoryLocation"
				PrmCompany									is an InventoryCompany
					default label is "Company"
				PrmPurgeOption								is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
			Instance Selection
				include deleted records
				where (Company							=	PrmCompany
				and    InventoryTransaction				=	PrmInventoryTransaction
				and    InventoryLocation				=	PrmInventoryLocation
				and    (Status.NonGlobalLedger
				or    	Status.GlobalLedgerUpdated
				or    	(Status.Released and (ForPurgeDistributionIsPosted or OrderEntryIsReadyForPurging))))
			Action Rules
				Set Rules
					Exit Rules
						if(PrmPurgeOption.PurgeRecords)
							if(InventoryTransactionLinesPurgeWithDeletedRel not exists)
								invoke Purge PrmInventoryTransaction
				Instance Rules
					if (PrmPurgeOption.PurgeRecords)
						if (InventoryCostHistoryExistsForTransactionLineRel not exists)
							if (InventoryTransactionLineDetailsWithDeletedRel exists)
								invoke InventoryTransactionLineDetailPurge InventoryTransactionLineDetail
									invoked.PrmCompany 							= PrmCompany
									invoked.PrmInventoryTransaction				= PrmInventoryTransaction
									invoked.PrmInventoryLocation				= PrmInventoryLocation
									invoked.PrmInventoryTransactionLine			= InventoryTransactionLine
									invoked.PrmTransactionSystemCode			= TransactionSystemCode
									invoked.PrmLineNumber						= InventoryTransactionLine.LineNumber
									
							invoke InventoryTransactionLineDistributionPurge InventoryTransactionLineDistribution
								invoked.PrmCompany 							= PrmCompany
								invoked.PrmInventoryTransaction				= PrmInventoryTransaction
								invoked.PrmInventoryLocation				= PrmInventoryLocation
								invoked.PrmInventoryTransactionLine			= InventoryTransactionLine
								invoked.PrmTransactionSystemCode			= TransactionSystemCode
								invoked.PrmLineNumber						= InventoryTransactionLine.LineNumber
									
							invoke Purge ProcurementTransactionDistributionRel
								
							invoke Purge

		CreateFromImport is a Create Action
			restricted
			Field Rules
			
				Status = InventoryTransaction.Status
				
			Action Rules
				include ValidateOngoingCalculation
				if (GeneralLedgerSystemCodeRel exists)
					LocalGeneralLedgerSystemCode = GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode	
				if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
					if (GeneralLedgerDate entered)								
						LocalPostingDate = GeneralLedgerDate
					else 								
						LocalPostingDate = InventoryTransaction.GeneralLedgerDate								
				if (!TransientDetailTransfer)
					increment InventoryTransaction.LastLineNumber

			Exit Rules
	    		increment InventoryTransaction.TransactionQuantityTotal by Quantity
	    		increment InventoryTransaction.NumberOfLines by 1

	    		if (Status.Released)
	    			increment ItemLocation.TransactionCounter
	    			TransactionCounter = ItemLocation.TransactionCounter

				if (not InventoryTransaction.IsInventoryBinTransfer
				and not IsTransfers and not IsIcPoCostAdjustment)
					include CreateBinDetailWhenIsBinTrackedAndSingleBin		

		FastUpdate is an Update Action
			restricted
			bypass field rules
		
		UpdateRequisitionCommitment is an Instance Action
			restricted
			
			Action Rules
				invoke UpdateCommitmentThroughWarehouseShipmentLineFromJournalPosting WarehouseShipmentLineRel
		
		RecallIntransitTransferQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmItem				is an Item
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
				
			Sort Order
				Item
				InventoryTransactionLine.InventoryTransaction.InventoryDocumentType
				InventoryTransactionLine.TransactionSystemCode
				Company
           		InventoryLocation
			
			Instance Selection
				where (Item = PrmItem
    			and	   Company.ItemGroup = PrmRecallGroup
	    		and    Status.Unreleased
	    		and    PrmQueryDateRange entered
				and	 ((TransactionDate within PrmQueryDateRange
	    		and    InventoryTransactionLine.InventoryTransaction.InventoryDocumentType = "IR")
	    		or    (InventoryTransaction.TransactionDate within PrmQueryDateRange
	    		and    InventoryTransactionLine.InventoryTransaction.InventoryDocumentType = "IT")))
				
			Action Rules
				Instance Rules
					invoke Create RecallProductTransaction
						invoked.RecallGroup										= PrmRecallGroup
						invoked.RecallNotice									= PrmRecallNotice
						invoked.RecallProduct									= PrmRecallProduct
						invoked.ActivityType									= 7 
						invoked.InventoryLocationGroup.InventoryCompany			= Company
						invoked.InventoryLocationGroup.InventoryLocation		= InventoryLocation
						invoked.InventoryTransactionGroup.InventoryCompany		= Company
						invoked.InventoryTransactionGroup.Location				= InventoryLocation 
						invoked.InventoryTransactionGroup.TransactionSystemCode = TransactionSystemCode
						invoked.InventoryTransactionGroup.InventoryTransaction  = InventoryTransaction
						invoked.InventoryTransactionGroup.InventoryTransactionLine	= InventoryTransactionLine
						invoked.LocalPriority									= PrmQueryPriority
						invoked.LocalDueDate									= PrmQueryDueDate
						invoked.TransactionDate									= TransactionDate
						invoked.LocalCreateTasks                                = PrmCreateTasks
						
		RecallIssueQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmItem 			is an Item
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
				






           		
			Instance Selection
				
				where (Item = PrmItem
    			and	   InventoryTransaction.InventoryDocumentType.InventoryIssue
    			and	   Company.ItemGroup = PrmRecallGroup
	    		and    PrmQueryDateRange entered
	    		and	  (TransactionDate within PrmQueryDateRange
	    		or    (Status.Unreleased
	    		and    InventoryTransaction.TransactionDate within PrmQueryDateRange)))
				
			Action Rules
				Instance Rules
					invoke Create RecallProductTransaction
						invoked.RecallGroup										= PrmRecallGroup
						invoked.RecallNotice									= PrmRecallNotice
						invoked.RecallProduct									= PrmRecallProduct
						invoked.ActivityType									= 8 
						invoked.RequestingLocationGroup.RequestingCompany		= InventoryTransaction.FromToCompanyLocation.FromToCompany
						invoked.RequestingLocationGroup.RequestingLocation		= InventoryTransaction.FromToCompanyLocation.RequestingLocation
						invoked.InventoryLocationGroup.InventoryCompany			= Company
						invoked.InventoryLocationGroup.InventoryLocation		= InventoryLocation
						invoked.InventoryTransactionGroup.InventoryCompany		= Company
						invoked.InventoryTransactionGroup.TransactionSystemCode = TransactionSystemCode
						invoked.InventoryTransactionGroup.Location				= InventoryLocation 
						invoked.InventoryTransactionGroup.InventoryTransaction  = InventoryTransaction
						invoked.InventoryTransactionGroup.InventoryTransactionLine	= InventoryTransactionLine
						invoked.LocalPriority									= PrmQueryPriority
						invoked.LocalDueDate									= PrmQueryDueDate
						invoked.TransactionDate									= TransactionDate
						invoked.LocalCreateTasks                                = PrmCreateTasks

		BatchRelease is a Set Action
			restricted
			
			Parameters
				PrmCompany								is an InventoryCompany
				PrmLocation         					is an InventoryLocation
				PrmTransaction      					is an InventoryTransaction
				PrmIntransitAndReceivingDocumentType	is like InventoryDocumentType
				PrmIntransitAndReceivingDocumentNumber	is like InventoryTransaction
				PrmIntransitTransferDocumentNumber		is like InventoryTransaction
				PrmInspectionHoldQuantity				is like Quantity
				PrmInspectionHoldCatchWeightQuantity	is like Quantity
				PrmReceiveAll							is Boolean
				PrmSkipDistributions					is Boolean
				PrmReleaseFromInterface					is Boolean
				PrmRunGroup								is like RunGroup
				PrmInventoryTransactionImport			is like InventoryTransactionImport

			Local Fields
				LocalSetError							is AlphaUpper 200
				LocalSetErrorLevel						is Numeric 2
				LocalSetHasError						is Boolean

			Parameter Rules
				PrmCompany
					required
				PrmLocation
					required
				PrmTransaction
					required

			Sort Order
				Company
				InventoryLocation
				InventoryTransaction
				TransactionSystemCode
				InventoryTransactionLine.WarehouseShipment
				InventoryTransactionLine.LineNumber
				InventoryTransactionLine.ComponentSequence

			Instance Selection
				where (Company = PrmCompany
				and    InventoryLocation = PrmLocation
				and    InventoryTransaction = PrmTransaction
				and    Status.Unreleased)

			Action Rules
				Empty Set Rules
					if (PrmReleaseFromInterface)
						LocalRunGroup					= PrmRunGroup
						LocalInventoryTransactionImport	= PrmInventoryTransactionImport
						LocalCompany					= PrmCompany
						LocalInventoryLocation			= PrmTransaction.InventoryLocation
						LocalInventoryDocumentType		= PrmTransaction.InventoryDocumentType

					if (PrmTransaction.Status.ReleaseInProgress)
						if (PrmTransaction.IsIntransitReceiving
						and PrmTransaction.HasCompletedReceivedLines)
							invoke ReleaseInProgress.TransitionToUnreleased PrmTransaction

						else
							invoke ReleaseInProgress.TransitionToReleased PrmTransaction

							if (PrmReleaseFromInterface)

								invoke FinishInterfaceResult InventoryTransactionImportRel
									invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

								invoke FastDelete InventoryTransactionImportRel
					else
					if (PrmTransaction.Status.Unreleased
					and	(not PrmTransaction.IsIntransitReceiving
					or   not PrmTransaction.HasCompletedReceivedLines))
						if (PrmReleaseFromInterface)
							invoke Unreleased.TransitionToReleased PrmTransaction

							invoke FinishInterfaceResult InventoryTransactionImportRel
								invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

							invoke FastDelete InventoryTransactionImportRel		
						else
							invoke Unreleased.TransitionToReleased PrmTransaction

				Set Rules

					Entrance Rules
						LocalReleaseFromInterface = PrmReleaseFromInterface

					Exit Rules
						if (PrmReleaseFromInterface)
							LocalRunGroup							= PrmRunGroup
							LocalInventoryTransactionImport			= PrmInventoryTransactionImport
							LocalCompany							= PrmCompany
							LocalInventoryLocation					= PrmTransaction.InventoryLocation
							LocalInventoryDocumentType				= PrmTransaction.InventoryDocumentType
							LocalIntransitTransferCompany			= PrmTransaction.FromToCompanyLocation.FromToCompany	 
							LocalIntransitTransferLocation 			= PrmTransaction.FromToCompanyLocation.FromToLocation
							LocalIntransitTransferDocumentNumber    = PrmIntransitAndReceivingDocumentNumber

						if (PrmTransaction.Status.ReleaseInProgress)
							if (PrmTransaction.IsIntransitReceiving
							and PrmTransaction.HasCompletedReceivedLines)
								invoke ReleaseInProgress.TransitionToUnreleased PrmTransaction
							else
							if (PrmReleaseFromInterface)
								if (not LocalSetHasError)
									invoke ReleaseInProgress.TransitionToReleased PrmTransaction

									invoke FinishInterfaceResult InventoryTransactionImportRel
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

									invoke FastDelete InventoryTransactionImportRel
								else
									invoke SetError InventoryTransactionImportRel
										invoked.PrmErrorMessage	= LocalSetError
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun
										invoked.PrmErrorLevel	= LocalSetErrorLevel

									invoke FinishInterfaceResult InventoryTransactionImportRel
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

									if (PrmTransaction.IntransitTransfer
									and IntransitReceivingTransactionRel exists) 
										invoke SystemDelete IntransitReceivingTransactionRel.InventoryTransaction

							else
								invoke ReleaseInProgress.TransitionToReleased PrmTransaction

						else
						if (PrmTransaction.Status.Unreleased
						and	(not PrmTransaction.IsIntransitReceiving
						or   not PrmTransaction.HasCompletedReceivedLines))

							if (PrmReleaseFromInterface)
								if (not LocalSetHasError)
									invoke Unreleased.TransitionToReleased PrmTransaction

									invoke FinishInterfaceResult InventoryTransactionImportRel
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

									invoke FastDelete InventoryTransactionImportRel

								else
									invoke SetError InventoryTransactionImportRel
										invoked.PrmErrorMessage	= LocalSetError
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun
										invoked.PrmErrorLevel	= LocalSetErrorLevel

									invoke FinishInterfaceResult InventoryTransactionImportRel
										invoked.PrmResult		= PrmTransaction.OriginatingInterfaceRun

									if (PrmTransaction.IntransitTransfer
									and IntransitReceivingTransactionRel exists) 
										invoke SystemDelete IntransitReceivingTransactionRel.InventoryTransaction

							else
								invoke Unreleased.TransitionToReleased PrmTransaction

				Instance Rules
					if (InventoryTransaction.IsMobileSupplyChainTransaction
					and IsIncreaseStock)	
						constraint (UnitCost entered)
							"UnitCostIsRequiredForLine<InventoryTransactionLine.LineNumber>"
					if (PrmReleaseFromInterface)
						invoke Release
							resume on error
								LocalHasError	= true
								LocalError		= error message
								LocalErrorLevel	= InventoryTransactionImport.ErrorLevel.Line
							invoked.PrmIntransitAndReceivingDocumentType	= PrmTransaction.IntransitAndReceivingDocumentType
							invoked.PrmIntransitAndReceivingDocumentNumber	= PrmTransaction.IntransitAndReceivingDocumentNumber
							invoked.PrmIntransitTransferDocumentNumber		= PrmTransaction
							invoked.PrmSkipDistributions					= PrmTransaction.SkipDistributions
							invoked.PrmInspectionHoldQuantity				= PrmInspectionHoldQuantity
							invoked.PrmInspectionHoldCatchWeightQuantity	= PrmInspectionHoldCatchWeightQuantity

						if (LocalHasError)
							LocalSetError		= LocalError
							LocalSetErrorLevel	= LocalErrorLevel
							LocalSetHasError	= LocalHasError
							
					else
						include ReleaseTransactionLine
		
						if (!PrmSkipDistributions)
							include CreateDistributions
						include UpdateInventoryUsageHistory
						
						if (InventoryTransaction.IsInventoryIntransitReceiving)
							if (Quantity < OpenQuantity)
								IntransitReceivingStatus  = 2
								OpenQuantity              = OpenQuantity   - Quantity
								if (ItemLocation.PreferredBin not entered)
								    initialize Bin
								    
								initialize MultipleBins 
								initialize Quantity
								initialize AddOnChargeUnitCost
								initialize AddOnCostAccount
							else
							if (Quantity = OpenQuantity)
								IntransitReceivingStatus  = 3
								OpenQuantity              = OpenQuantity	- Quantity
								initialize Quantity
								make transition to Released	
							if (Item.IsCatchWeightItem)
								initialize SecondaryQuantity
						else	

							Status = 1


						if (WarehouseShipmentLineForTransferRel exists
						and WarehouseShipmentLineForTransferRel.TransactionUOM != TransactionUOM
						and (InventoryTransaction.IsInventoryReceivingTransfer
						or  (InventoryTransaction.IsInventoryIntransitReceiving
						and  Quantity = OpenQuantity)))
							TransactionUOM 				= WarehouseShipmentLineForTransferRel.TransactionUOM
							TransactionUOMMultiplier	= WarehouseShipmentLineForTransferRel.TransactionUOMMultiplier
						if (InventoryTransaction.bod id.VariationID < 1 and (InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryIssue 
							or InventoryTransactionLine.InventoryTransaction.InventoryDocumentType.InventoryTransfer))
								if (Company.FinanceEnterpriseGroup.BODTrigger)
									LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+" CO:"+Company+" INVL:"+InventoryLocation+" INVT:"+InventoryTransaction
									increment InventoryTransaction.bod id.VariationID
									ActionCode = ActionCode.Update
									include TriggerInventoryTransactionRules
									include TriggerBRInventoryTransactionRules

									
						invoke TriggerInventoryAdjustment
				
		CreateDistributionsAction is an Instance Action
			restricted
			Action Rules
				include CreateDistributions					

		CreateDistributionsFromBatch is a Set Action
			restricted
			run in background
			Parameters
				PrmCompany			is like InventoryCompany
				PrmLocation         is like InventoryLocation
				PrmTransaction      is like InventoryTransaction

			Parameter Rules
				PrmCompany
					required
				PrmLocation
					required
				PrmTransaction
					required
					
			Instance Selection
				where (Company = PrmCompany
				and    InventoryLocation = PrmLocation
				and    InventoryTransaction = PrmTransaction)
			
			Action Rules
				Instance Rules
					include CreateDistributions

		UpdateInventoryCubes is a Set Action
			restricted
			Parameters
				UpdateInventoryTransactions	is Boolean
				UpdateInventoryUsageHistory	is Boolean
				UpdateItemLocation			is Boolean
			Parameter Rules
				UpdateInventoryTransactions
					initial value is true
				UpdateInventoryUsageHistory
					initial value is true
				UpdateItemLocation
					initial value is true

			Action Rules
				Set Rules
					Entrance Rules
						constraint (BasicAnalyticsCalendarsRel exists)
							"YouMustCreateABasicAnalyticsCalendarToUpdateInventoryCubes"
							
					Exit Rules
						if (UpdateInventoryTransactions)
							invoke Refresh InventoryTransactionLineAnalyticCubeRel in background

						if (UpdateInventoryUsageHistory)
							invoke Refresh InventoryUsageHistoryAnalyticCubeRel in background

						if (UpdateItemLocation)
							invoke Refresh ItemLocationAnalyticCubeRel in background
							
		CalculateAverageCost is a Set Action 
			restricted





				




			



				


					








				






				






						






						

























































































	
		
		
		
		CalculateUsageHistory is a Set Action
			restricted
			Parameters
				PrmCompany				is an InventoryCompany
					default label is "Company"
				PrmLocation				is an InventoryLocation
					default label is "Location"
				PrmItem					is an Item
					default label is "Item"
				
			Parameter Rules
				PrmCompany
					required
					constraint (PrmCompany.NumberOfPeriods.12PeriodsPerYearMonthly or PrmCompany.NumberOfPeriods.13PeriodsPerYear)
						"OnlySupports12or13Periods"
					constraint (not PrmCompany.CostingMethod.StandardCosting)
						"StandardCostingMethodNotSupported"


		
			Instance Selection
				where (Company = PrmCompany
				and   (InventoryLocation = PrmLocation or PrmLocation not entered)
				and	  (Item = PrmItem or PrmItem not entered)
				and   !IsUnreleased)
								
			Sort Order
				Company
				InventoryLocation
				Item
				UpdateDate 
				
				
			Local Fields
				LocalUseActualCost				is Boolean
				LocalCurrentYear				is a Year
				LocalYearStartDate				is Date
				LocalYearEndDate				is Date
				LocalCurrentPeriod				is like CurrentPeriod
				LocalPeriodCounter				is like CurrentPeriod
				LocalPeriodEndQuantity			is like Quantity
				LocalSOHQuantity				is like Quantity

				LocalAverageCost				is like InternationalCost
				
				LocalInventoryIssuesArray		is a InventoryIssuesArray
				LocalInventorySalesArray		is a InventorySalesArray
				LocalInventoryAdjustmentsArray	is a InventoryAdjustmentsArray
				LocalInventoryTransfersArray	is a InventoryTransfersArray
				LocalInventoryReceiptsArray		is a InventoryReceiptsArray
				LocalInventoryPeriodEndArray	is a InventoryPeriodEndArray
				
				LocalYearPeriodStatusArray		is a YearPeriodStatusArray
				
				LastYearEndQuantity				is like Quantity
				LastYearEndExtendedCost			is like InternationalAmount
				LocalActor						is an Actor
				LocalPastDatedTransaction		is Boolean
				LocalDifference 				is an InternationalAmount
				
			Action Rules
				Set Rules
					Entrance Rules
						LocalActor = actor
					Exit Rules
												
						send notification
							to LocalActor
							description is "UsageHistoryRecalculatedFor_\Company<PrmCompany>'s<PrmLocation>location."
							priority is low
				
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoRecordsFound"
						priority is low
				
				
				Item Set Rules
					Entrance Rules

						include DeleteUsageHistory
						include InitializeDates
						include InitializeArrays
						initialize LocalPeriodEndQuantity
						initialize LocalAverageCost
						initialize LastYearEndQuantity
						initialize LastYearEndExtendedCost						
						
					Exit Rules
						include SaveUsageHistory
						LocalDifference = ((ItemLocation.AverageCost - LocalAverageCost) / LocalAverageCost)
						if (LocalDifference < 0)
							LocalDifference = LocalDifference * -1






						include CalculateAverageStockOnHand
						invoke FastUpdate ItemLocation
							invoked.AverageStockOnHandQuantity	= LocalAverageStockOnHand
					
				Instance Rules
					initialize LocalPastDatedTransaction
					
					if (LocalYearStartDate not entered
					or  LocalYearEndDate not entered)
						include CopyDatesFromCompany
						include InitializeArrays
						
					else 
						if ((InventoryTransaction.InventoryDocumentType.CostAdjustment
	            		and TransactionSystemCode.PurchaseOrder
	            		and (UpdateDate > LocalYearEndDate)) 
	            		or (TransactionDate > LocalYearEndDate)) 
							include SaveUsageHistory		
							include CopyDatesFromCompany
							include InitializeArrays
					

					if  (InventoryTransaction.InventoryDocumentType.CostAdjustment
	            	and  TransactionSystemCode.PurchaseOrder)
		            	if (UpdateDate < LocalYearStartDate)
							while (UpdateDate < LocalYearStartDate)
								LocalCurrentYear 		= LocalCurrentYear - 1
								LocalYearStartDate 		= LocalYearStartDate - 1 year
								LocalYearEndDate		= LocalYearEndDate - 1 year
								for each LocalYearPeriodStatusArray.YearPeriodStatus
									each.YearPeriod 	= each.YearPeriod - 1 year
	            	else
						if (TransactionDate < LocalYearStartDate)
							while (TransactionDate < LocalYearStartDate)
								LocalCurrentYear 		= LocalCurrentYear - 1
								LocalYearStartDate 		= LocalYearStartDate - 1 year
								LocalYearEndDate		= LocalYearEndDate - 1 year
								for each LocalYearPeriodStatusArray.YearPeriodStatus
									each.YearPeriod 	= each.YearPeriod - 1 year
						

            		if ((InventoryTransaction.InventoryDocumentType.CostAdjustment 
            		and TransactionSystemCode.PurchaseOrder 
            		and (UpdateDate >= LocalYearStartDate  
					and UpdateDate <= LocalYearEndDate)) 
					or (TransactionDate >= LocalYearStartDate 
					and TransactionDate <= LocalYearEndDate)) 
							

						if (LocalCurrentPeriod > 1 
						and ((InventoryTransaction.InventoryDocumentType.CostAdjustment 
            			and TransactionSystemCode.PurchaseOrder 
						and UpdateDate <= LocalYearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod - 1].YearPeriod) 
						or (TransactionDate <= LocalYearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod - 1].YearPeriod))) 
							LocalCurrentPeriod 			= 1
							LocalPastDatedTransaction 	= true	 
							

						while (LocalCurrentPeriod <= Company.NumberOfPeriods
						and ((InventoryTransaction.InventoryDocumentType.CostAdjustment 
            			and TransactionSystemCode.PurchaseOrder 
						and UpdateDate > LocalYearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod].YearPeriod)
						or (TransactionDate > LocalYearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod].YearPeriod)))
							if (not LocalPastDatedTransaction)
								if (LocalCurrentYear < Company.CurrentYear
								or (LocalCurrentYear = Company.CurrentYear and Company.YearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod].Status.Closed))
									LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalCurrentPeriod].PeriodEndQuantity			    = LocalPeriodEndQuantity
									LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalCurrentPeriod].PeriodEndExtendedCost			= LocalAverageCost

							LocalCurrentPeriod += 1							



					

					

						if (LocalCurrentPeriod <= Company.NumberOfPeriods) 
							

							LocalUseActualCost = true
							if (LocalUseActualCost)
								LocalAverageCost = CurrentCost												


							if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
							or  InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt
							or ((InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment or InventoryTransaction.InventoryDocumentType.Adjustment) and Quantity > 0)
							or (InventoryTransaction.InventoryDocumentType.InventoryIssue and Quantity > 0)	
							or InventoryTransaction.InventoryDocumentType.ReceivingTransfer 
							or InventoryTransaction.InventoryDocumentType.VendorReturn 
							or InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment) 
								LocalAverageCost = (((LocalPeriodEndQuantity * LocalAverageCost) + (Quantity * UnitCost)) / (LocalPeriodEndQuantity + Quantity))		
							else 
							if (InventoryTransaction.IsCostAdjustment)
								LocalAverageCost = (((LocalPeriodEndQuantity * LocalAverageCost) + (Quantity * UnitCost)) / (LocalPeriodEndQuantity))														




									
							if (Quantity < 0
							or  InventoryTransaction.InventoryDocumentType.InventoryIssue 
							or  InventoryTransaction.InventoryDocumentType.RequisitionReturn 
							or  InventoryTransaction.InventoryDocumentType.InventoryReturns
							or 	InventoryTransaction.InventoryDocumentType.Shipment
							or  InventoryTransaction.InventoryDocumentType.CustomerReturn)
								LocalUsageQuantity					= Quantity * -1
							else
								LocalUsageQuantity					= Quantity
								
							LocalUsageCost							= UnitCost * LocalUsageQuantity
							
							if (not InventoryTransaction.InventoryDocumentType.BinTransfer
							and not InventoryTransaction.InventoryDocumentType.CostAdjustment
							and not InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptArchive)  
								LocalPeriodEndQuantity = StockOnHandQuantity
															
							if (InventoryTransaction.InventoryDocumentType.InventoryIssue
							or  InventoryTransaction.InventoryDocumentType.InventoryReturns
							or  InventoryTransaction.InventoryDocumentType.RequisitionReturn)
								LocalInventoryIssuesArray.InventoryIssues[LocalCurrentPeriod].IssueQuantity		+= LocalUsageQuantity    
								LocalInventoryIssuesArray.InventoryIssues[LocalCurrentPeriod].IssueExtendedCost	+= LocalUsageCost
							else
							if (InventoryTransaction.InventoryDocumentType.Shipment
							or  InventoryTransaction.InventoryDocumentType.CustomerReturn)
								LocalInventorySalesArray.InventorySales[LocalCurrentPeriod].SalesQuantity		+= LocalUsageQuantity
								LocalInventorySalesArray.InventorySales[LocalCurrentPeriod].SalesExtendedCost	+= LocalUsageCost
							else
							if (InventoryTransaction.InventoryDocumentType.InventoryReceipt
							or  InventoryTransaction.InventoryDocumentType.PurchaseOrderReceipt)
								LocalInventoryReceiptsArray.InventoryReceipts[LocalCurrentPeriod].ReceiptQty		+= LocalUsageQuantity
							else
							if (InventoryTransaction.InventoryDocumentType.PurchaseOrderReceiptAdjustment)
								LocalInventoryReceiptsArray.InventoryReceipts[LocalCurrentPeriod].ReceiptQty		+= Quantity
							else
							if (((InventoryTransaction.InventoryDocumentType.Adjustment
							or    InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment)
							and   Quantity < 0)
							or InventoryTransaction.InventoryDocumentType.VendorReturn)			
								LocalInventoryAdjustmentsArray.InventoryAdjustments[LocalCurrentPeriod].AdjustmentOutQuantity += LocalUsageQuantity
								LocalInventoryAdjustmentsArray.InventoryAdjustments[LocalCurrentPeriod].AdjustmentOutExtendedCost += LocalUsageCost
							else
							if ((InventoryTransaction.InventoryDocumentType.Adjustment
							or   InventoryTransaction.InventoryDocumentType.PhysicalInventoryAdjustment
							or   InventoryTransaction.InventoryDocumentType.VendorReturnCancel)
							and  Quantity > 0)
								LocalInventoryAdjustmentsArray.InventoryAdjustments[LocalCurrentPeriod].AdjustmentInQuantity += LocalUsageQuantity
							else
							if (InventoryTransaction.InventoryDocumentType.ReceivingTransfer)	
								LocalInventoryTransfersArray.InventoryTransfers[LocalCurrentPeriod].TransferInQuantity		+= LocalUsageQuantity
							else
							if (InventoryTransaction.InventoryDocumentType.InventoryTransfer
							or   InventoryTransaction.InventoryDocumentType.DirectTransfer)
								LocalInventoryTransfersArray.InventoryTransfers[LocalCurrentPeriod].TransferOutQuantity		+= LocalUsageQuantity
								LocalInventoryTransfersArray.InventoryTransfers[LocalCurrentPeriod].TransferOutExtendedCost	+= LocalUsageCost
							
							LocalSOHQuantity = StockOnHandQuantity
							if (LocalCurrentYear < Company.CurrentYear
							or (LocalCurrentYear = Company.CurrentYear and Company.YearPeriodStatusArray.YearPeriodStatus[LocalCurrentPeriod].Status.Closed))
								LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalCurrentPeriod].PeriodEndQuantity				= LocalPeriodEndQuantity 	
								LocalInventoryPeriodEndArray.InventoryPeriodEnd[LocalCurrentPeriod].PeriodEndExtendedCost			= LocalAverageCost


						
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"	
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID			= PrmVariationID	
					
		TriggerInventoryAdjustment is an Instance Action
			restricted
			Action Rules
				if(InventoryTransaction.InventoryDocumentType.Adjustment and !LocalBODTrigger)
					if (Company.FinanceEnterpriseGroup.BODTrigger)		
						if (!action type.Delete)
							if (action != "UpdateBODIdFields") 
								ActionCode = ActionCode.Update
								if (action type.Create)
									ActionCode = ActionCode.Create
								increment bod id.VariationID
							    LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
								trigger "InventoryAdjustmentService" PA service
									resume on error
									title is "EG:<Company.FinanceEnterpriseGroup>Company:<Company>IC:<InventoryTransaction>ICL:<InventoryTransactionLine>"
									Criteria
										Company.FinanceEnterpriseGroup
										Company
										Company.AccountingEntity
									Variables
										Company	
										include persistent fields from	InventoryTransactionLine		
										InventoryTransaction.InventoryTransactionType
											variable name is TransactionType		
										ActionCode
										bod id.VariationID
											variable name is BODVariationId
										LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
											variable name is CurrentTimeStamp
										Company
											variable name is LawsonCompany
										Company.AccountingEntity										
											variable name is Accountingentity
								LocalBODTrigger = true


							
				
FileCreationLogic.InventoryTransactionLine is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"InventoryTransactionLine_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"


			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
				LocalInventoryTransactionLineGroupSelection		is a InventoryTransactionLine group in subject FileCreationInventoryTransactionLine

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      InventoryTransaction % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
					LocalInventoryTransactionLineGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalInventoryTransactionLineGroupSelection not entered
					or	InventoryTransactionLine within LocalInventoryTransactionLineGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= Company
							invoked.Key2				= InventoryLocation
							invoked.Key3				= InventoryTransaction
							invoked.Key4				= TransactionSystemCode
							invoked.Key5				= InventoryTransactionLine.WarehouseShipment
							invoked.Key6				= InventoryTransactionLine.LineNumber
							invoked.Key7				= InventoryTransactionLine.ComponentSequence
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
