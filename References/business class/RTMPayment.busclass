RTMPayment is a BusinessClass
	owned by ar
	prefix is RTM
	classic name is ARRTM

	Ontology
		symbolic key is RTMPayment
			classic set name is RTMSET0
			classic name for ReceivablePaymentHeader is BATCH-NBR


	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable


	Persistent Fields
		TransactionType			is a TransType
		Status					is Numeric size 1
			States
				UnreleasedRtm	value is 0
					default label is "UnreleasedRTM"
				ReleasedRtm		value is 1
					default label is "ReleasedRTM"
		ReturnDate				is Date	
		SalesRepresentative
			classic name is SALESMAN
		CreditAnalyst
			classic name is CREDIT-ANLYST
		Description
		PaymentAmount			is an InternationalAmount
		DebitMemo				is like ReceivableInvoice
		Billback				is AlphaUpper size 1
			States
				YesBillBackAllAdjustments	value is "Y"
					default label is "Yes,BillBackAllAdjustments"
				NoOnlyBillSelectedAdjusts	value is "N"
					default label is "No,OnlyBillSelectedAdjusts"
		ChargeBank				is Boolean
		AdjustAmount			is an InternationalAmount
		AdditionalAmount		is an InternationalAmount
		GeneralLedgerDate		is a PostingDate	
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		CreditAccount			is a TransactionCodeBlock
		DebitAccount			is a TransactionCodeBlock




		Comments				is a CommentX3InArrtm
			classic name is COMMENT
		RTMBankCode				is a BankTransactionCode
		TransactionIDNumber
			classic name is TRANS-IDENT
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted

		TextCode
		RevalueCurrencyTransactions	is Boolean
	
	Transient Fields															
		TransientTextCode 		 is a RTMPaymentLanguageText
			default label is "TextCode"
			derive value from RTMPaymentLanguageTextRel.RTMPaymentLanguageText
		BypassApplicationPostedValidation 	is Boolean

	Local Fields
		LocalGeneralLedgerSystemCode		is a GeneralLedgerSystemCode
		LocalPaymentCurrency				is a FromCurrency
		LocalInvoiceCurrency				is a FromCurrency
		NewReceivableInvoice				is a ReceivableInvoice view
		LocalInvoice						is like ReceivableInvoice
		LocalCashLedgerTransaction			is a CashLedgerTransaction view
		LocalNewReceivableGLDistribution	is a ReceivableGLDistribution view
		CurrencyWork						is a ReceivableExchange

		LocalEFTAppliedAmount				is an InternationalAmount
		LocalLanguageCode					is an IsoLocale
		LocalTransactionAmount1				is an InternationalAmount
		LocalTransactionAmount2				is an InternationalAmount
		LocalSaveTransactionAmount			is an InternationalAmount

		LocalType							is Alpha size 1
		LocalBaseAmount1					is like InternationalAmount
		LocalBaseAmount2					is like InternationalAmount
		LocalSaveBaseAmount					is like InternationalAmount
		LocalReceivableTransactionSummary	is AlphaUpper size 2
			States
				DebitsCredits				value is "02"
		WorkAmount							is an InternationalAmount
		LocalSequence						is Numeric size 4
		
		LocalAccount						is a FinanceCodeBlock
 		LocalChartAccount					is like GeneralLedgerChartAccount  
		LocalBypassStructureRelationEdit	is Boolean 
		LocalDistributionAmount				is an InternationalAmount
		LocalDistributionBatch				is Numeric 6
		LocalDistributionInvoice			is AlphaUpper 22
		LocalDistributionInvoiceType		is AlphaUpper 1
		LocalTransactionDate				is Date
		LocalRTMPayment						is AlphaUpper size 10
		LocalCounter						is Numeric size 2
		LocalGLTransactionDate				is an ExchangeDate
		LocalUsePaymentDate					is Boolean
		CurrencyExchange
		LocalCurrencyTable					is a CurrencyTable
		LocalFromCurrency					is a FromCurrency
		LocalExchangeDate					is a ExchangeDate
		LocalCBAmt 							is an InternationalAmount
		LocalPaymentApplicationAmount		is like InternationalAmount
		LocalSumDetailApplyAmounts			is like InternationalAmount
		LocalPaymentAmountRemaining			is like InternationalAmount
		LocalDetailAmountToAdd				is like InternationalAmount
		LocalDetailDifference				is like InternationalAmount
		LastReceivablePaymentCashDetail		is like ReceivablePaymentCashDetail
		LocalDetailAdjustmentPercent		is a Percent
		LocalCashDetailApplicationSource	is AlphaUpper 1
		LocalSumCashDetailAmountGroup		is like FinanceCurrencyAmountGroup
		LocalCurrencyCalculationGroup		is a CurrencyCalculationGroup

		SkipCreateDistribution				is Boolean
		LocalCreateUnreleased				is Boolean
		SumOfNonARTypeRTMReceivableGLDistributionAmountsDone							is Boolean
		SumOfNonARTypeRTMReceivableGLDistributionDistributionAmountCurrencyAmount	is an InternalAmount

		LocalSetPaymentBatchNumber			is Boolean		
		CalculateTax
		LocalCalculateTaxExecuted			is Alpha 1
		LocalNumberOfDecimals				is Numeric 1
		LocalPrepaymentTaxRate				is Percent size 7.5
		LocalBeforeGSTAmount				is a CurrencyAmount
		LocalPrepaymentTaxAmount			is a CurrencyAmount
		LocalPaymentOpenAmount				is a CurrencyAmount
		LocalChangeAmount					is an InternationalAmount					
	
	Rule Blocks 

		CommonEdits
			LocalGeneralLedgerSystemCode = "AR"
			
			if (Customer entered)
				TransactionType ="P"
			else
				TransactionType = "N"
			constraint (ReceivablePaymentRel exists)
				"PaymentDoesNotExist;Company<Company>PaymentHeader<ReceivablePaymentHeader>Customer<Customer>"
			constraint (!ReceivablePaymentRel.Status.Unreleased)
				"PaymentIsNotReleased"
			constraint (!ReceivablePaymentRel.Status.Historical)
				"PaymentIsHistorical"
			constraint (ReceivablePaymentRel.CancelDate not entered)
				"PaymentHasBeenCancelled"
			if (ReceivablePaymentRel.Status > 2)
				constraint (!ReceivablePaymentRel.Transferred)
					"PaymentHasBeenTransferredToCustomer<ReceivablePaymentRel.TransferredToCustomer>"
			if (ReceivablePaymentRel.AdjustAmountTransactionCurrency entered)
				constraint (!ReceivablePaymentRel.NonTransferPaymentAdjustmentsRel exists)
					"PaymentAdjustmentExists;MustReverseThenProcessRTM" 
			constraint (!ReceivablePaymentRel.HasPendingApplications)
				"PaymentIneligible;UnreleasedApplicationsExist"
			constraint (!ReceivablePaymentRel.HasPendingAdjustments)
				"PaymentIneligible;UnreleasedAdjustmentsExist"
			constraint (!ReceivablePaymentRel.ReceivablePaymentApplyReverseHeaderRel exists)
				"PaymentIneligible;ReversalPending"


			initialize LocalInvoice
			initialize LocalEFTAppliedAmount
			for each ReceivablePaymentRel.ReceivableApplicationRel
				if ((initiating action != "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
				and not BypassApplicationPostedValidation)
					constraint (each.Status.ApplicationPosted)
						"PaymentNotEligibleForReversal.UnpostedApplicationExists."	
				constraint (!each.HasCreditMemoOriginAdjustments)
					"PaymentHasCreditMemoAdjustments;NotEligibleForReversal"
					
				if (LocalInvoice = each.ReceivableApplication.Invoice)
					LocalCBAmt += each.ApplicationAmount.CurrencyAmount
				else
				if  (each.ApplicationAmount.CurrencyAmount < 0
				and each.Status != 0
				and each.ReceivableApplication.ApplicationSequence = 1)
					LocalInvoice = each.ReceivableApplication.Invoice
					LocalCBAmt = each.ApplicationAmount.CurrencyAmount
				else
					constraint (LocalCBAmt >= 0)
						"MemoChargebackExists;FirstReverseTheApplicationAndApplyPaymentToChargeBack"
				
				if (each.ReceivableApplication.ApplicationSequence = 1)
					constraint (each.ApplicationAmount.CurrencyAmount >= 0
					or	   !each.Status.UnreleasedCashApplication)
						"PaymentIneligible;MemoChargebackExists"
					
				constraint (!each.ReceivableInvoiceApplyReverseHeaderRel exists)
					"TransactionReversalDetailExistsFor<each.ReceivableApplication.TransType>-<each.ReceivableApplication.Invoice>"

				if (each.ApplicationSource.ElectronicFundsTransfer)
					if (each.ReceivableApplication.TransType.CreditMemo)
						LocalEFTAppliedAmount		-= each.ApplicationAmount.CurrencyAmount
					else
						LocalEFTAppliedAmount		+= each.ApplicationAmount.CurrencyAmount












			constraint (!ReceivablePaymentRel.IsZeroPayment)
				"CannotCreateRTMPaymentForAZeroAmountPayment"

		CommonEditsModifiedForIBReversal
			if (Customer entered)
				TransactionType ="P"
			else
				TransactionType = "N"

			constraint (ReceivablePaymentRel exists)
				"PaymentDoesNotExist;Company<Company>PaymentHeader<ReceivablePaymentHeader>Customer<Customer>"
			constraint (!ReceivablePaymentRel.Status.Unreleased)
				"PaymentIsNotReleased"
			constraint (!ReceivablePaymentRel.Status.Historical)
				"PaymentIsHistorical"
			constraint (ReceivablePaymentRel.CancelDate not entered)
				"PaymentHasBeenCancelled"
			if (ReceivablePaymentRel.Status > 2)
				constraint (!ReceivablePaymentRel.Transferred)
					"PaymentHasBeenTransferredToCustomer<ReceivablePaymentRel.TransferredToCustomer>"
			if (ReceivablePaymentRel.AdjustAmountTransactionCurrency entered)
				constraint (!ReceivablePaymentRel.NonTransferPaymentAdjustmentsRel exists)
					"PaymentAdjustmentExists;MustReverseThenProcessRTM" 
			constraint (!ReceivablePaymentRel.HasPendingApplications)
				"PaymentIneligible;UnreleasedApplicationsExist"
			constraint (!ReceivablePaymentRel.HasPendingAdjustments)
				"PaymentIneligible;UnreleasedAdjustmentsExist"
			constraint (!ReceivablePaymentRel.ReceivablePaymentApplyReverseHeaderRel exists)
				"PaymentIneligible;ReversalPending"


			initialize LocalEFTAppliedAmount
			for each ReceivablePaymentRel.ReceivableApplicationRel


				constraint (!each.HasCreditMemoOriginAdjustments)
					"PaymentHasCreditMemoAdjustments;NotEligibleForReversal"
				if (each.ReceivableApplication.ApplicationSequence = 1)
					constraint (each.ApplicationAmount.CurrencyAmount >= 0
					or		 !each.Status.UnreleasedCashApplication)
						"PaymentIneligible;MemoChargebackExists"

				constraint (!each.ReceivableInvoiceApplyReverseHeaderRel exists)
					"TransactionReversalDetailExistsFor<each.ReceivableApplication.TransType>-<each.ReceivableApplication.Invoice>"

				if (each.ApplicationSource.ElectronicFundsTransfer)
					if (each.ReceivableApplication.TransType.CreditMemo)
						LocalEFTAppliedAmount		-= each.ApplicationAmount.CurrencyAmount
					else
						LocalEFTAppliedAmount		+= each.ApplicationAmount.CurrencyAmount












			constraint (!ReceivablePaymentRel.IsZeroPayment)
				"CannotCreateRTMPaymentForAZeroAmountPayment"

		CashLedger
			CurrencyWork.ExchangeDate								= ReceivablePaymentRel.DepositDate
			CurrencyWork.TransactionAmount							= ReceivablePaymentRel.ReturnToMakerTransactionAmount				
			CurrencyWork.FromCurrency								= ReceivablePaymentRel.OriginalCurrency
			CurrencyWork.BaseAmount.ToCurrency						= ReceivablePaymentHeader.CashCode.Currency
			constraint (CurrencyWork.BaseAmount.OutputCurrencyAmount entered)
				"UnableToFindCurrencyExchangeRateFor<CurrencyWork.FromCurrency>-<CurrencyWork.BaseAmount.ToCurrency>"

			invoke Unreleased.CreateFromReceivables CashLedgerTransaction
				assign result to LocalCashLedgerTransaction
				invoked.CashManagementGroup									= RTMBankCode.CashManagementGroup
				invoked.CashCode											= ReceivablePaymentHeader.CashCode
				invoked.BankTransactionSign									= "DR"
				invoked.BankTransactionCode									= Company.RTMPaymentBankCode
				invoked.Description											= "Cancelled"
				invoked.ReceivablesCompanyProcessLevel.CustomerGroup		= Company.CustomerGroupField.CustomerGroup
				invoked.CompanyCustomer										= Customer
				invoked.BankAccountCurrencyExchangeRate						= CurrencyWork.BaseAmount.OutputCurrencyRate
				invoked.IssueTranAmt										= ReceivablePaymentRel.ReturnToMakerTransactionAmount		
				invoked.IssuedBankAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				invoked.BankTransactionType									= "B"
				invoked.Currency											= ReceivablePaymentRel.OriginalCurrency
				invoked.TransactionNumber									= "AR-" + ReceivablePaymentHeader.PaymentHeaderString
				invoked.TransactionNumberSuffix								 = 0
				invoked.SourceCode											= "AR"
				invoked.Company												= Company
				invoked.ReceivablesCompanyProcessLevel.ReceivableCompany	= Company
				invoked.IssueDate											= ReturnDate
				invoked.GeneralLedgerPostDate								= GeneralLedgerDate
				invoked.TransactionCurrencyNumberOfDecimals					= ReceivablePaymentRel.CurrencyDecimalsNumber
				invoked.BaseCurrencyNumberOfDecimals						= Company.BaseNumberOfDecimals

				invoked.Reference											= "RTM"
				invoked.CurrencyTable										= ReceivablePaymentHeader.CurrencyTable
			TransactionIDNumber												= LocalCashLedgerTransaction.CashLedgerTransaction


		CreateCashDetailApplicationsAndRNADistributions
			if (Company.DetailedRNADistributions
			and ReceivablePaymentRel.CashDetailState.Released)
				LocalCashDetailApplicationSource = "C"
				LocalPaymentAmountRemaining = LocalDistributionAmount
				if (LocalDistributionAmount = ReceivablePaymentRel.PaymentOpen)
					for each ReceivablePaymentRel.ReceivablePaymentCashDetail set
						if (each.OpenAmount > 0)
							invoke Create CashDetailApplication
								invoked.Company												= Company
								invoked.ReceivablePaymentHeader								= ReceivablePaymentHeader
								invoked.ReceivablePayment									= ReceivablePaymentRel.ReceivablePayment
								invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
								invoked.DistributionAmount.CurrencyAmount					= each.OpenAmount
								invoked.DistributionAmount.ExchangeDate						= ReceivablePaymentRel.DepositDate
								invoked.ApplicationPostDate									= GeneralLedgerDate
								invoked.ApplicationSource									= LocalCashDetailApplicationSource
				else
					initialize LocalSumDetailApplyAmounts
					for each ReceivablePaymentRel.ReceivablePaymentCashDetail set
						if (each.OpenAmount > 0)
							LocalDetailAdjustmentPercent 	= (each.OpenAmount / ReceivablePaymentRel.PaymentOpen)
							LocalPaymentApplicationAmount	= LocalPaymentAmountRemaining * LocalDetailAdjustmentPercent
							round LocalPaymentApplicationAmount to nearest DerivedCurrencyRoundTo

							if (LocalPaymentApplicationAmount > 0
							and LocalPaymentApplicationAmount > each.OpenAmount)
								LocalPaymentApplicationAmount = each.OpenAmount

							if (LocalPaymentApplicationAmount != 0)
								LocalSumDetailApplyAmounts += LocalPaymentApplicationAmount
								invoke Create CashDetailApplication
									invoked.Company												= Company
									invoked.ReceivablePaymentHeader								= ReceivablePaymentHeader
									invoked.ReceivablePayment									= ReceivablePaymentRel.ReceivablePayment
									invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
									invoked.DistributionAmount.CurrencyAmount					= LocalPaymentApplicationAmount
									invoked.DistributionAmount.ExchangeDate						= ReceivablePaymentRel.DepositDate
									invoked.ApplicationPostDate									= GeneralLedgerDate
									invoked.ApplicationSource									= LocalCashDetailApplicationSource

					if (LocalPaymentAmountRemaining != LocalSumDetailApplyAmounts)
						LocalDetailDifference = LocalPaymentAmountRemaining - LocalSumDetailApplyAmounts
						for each CashDetailApplicationRel
							if (each.DistributionAmount.CurrencyAmount entered)
								if (LocalDetailDifference <= each.ReceivablePaymentCashDetail.OpenAmount)
									LocalDetailAmountToAdd = LocalDetailDifference
									LocalDetailDifference  = 0
								else
									LocalDetailAmountToAdd = each.ReceivablePaymentCashDetail.OpenAmount
									LocalDetailDifference -= each.ReceivablePaymentCashDetail.OpenAmount
								
								if (each.DistributionAmount.CurrencyAmount + LocalDetailAmountToAdd = 0)
									invoke Delete each
								else
									invoke Update each
										invoked.DistributionAmount.CurrencyAmount 	= each.DistributionAmount.CurrencyAmount + LocalDetailAmountToAdd
								
								if (LocalDetailDifference = 0)
									end for each

				initialize LocalSumCashDetailAmountGroup
				for each CashDetailApplicationRel
					LocalSumCashDetailAmountGroup.CurrencyAmount 							+= each.DistributionAmount.CurrencyAmount
					LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				constraint (LocalSumCashDetailAmountGroup.CurrencyAmount = LocalDistributionAmount) 
					"CashDetailApplicationsAreLessThanTheRequiredAmount"

				initialize LocalCurrencyCalculationGroup
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate					= ReceivablePaymentRel.DepositDate
				LocalCurrencyCalculationGroup.CurrencyAmount				= LocalDistributionAmount
				LocalCurrencyCalculationGroup.FromCurrency					= ReceivablePaymentRel.OriginalCurrency
				LocalCurrencyTable 											= ReceivablePaymentHeader.CurrencyTable

				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive

				LocalSumCashDetailAmountGroup.CurrencyAmount 								= LocalDistributionAmount - LocalSumCashDetailAmountGroup.CurrencyAmount
				LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount
				if (Company.AccountingEntity.AlternateCurrency entered)
					LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount
				if (Company.AccountingEntity.AlternateCurrency2 entered)
					LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount
				if (Company.AccountingEntity.AlternateCurrency3 entered)
					LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount
				if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
					LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount
				if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount
				if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
					LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount
				if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
					LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount	
				if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
					LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount

				invoke RoundingUpdate last CashDetailApplicationRel
					invoked.PrmRoundAmount = LocalSumCashDetailAmountGroup

				for each CashDetailApplicationRel
					LocalAccount = each.ReceivablePaymentCashDetail.RNAFinanceCodeBlock
					initialize LocalSumCashDetailAmountGroup
					LocalSumCashDetailAmountGroup = each.DistributionAmount
					include CreateDistribution
				
				initialize LocalCashDetailApplicationSource


		CreateCashDistributionsFromCashDetails

			LocalDistributionAmount *= -1

			if (ReceivablePaymentRel.TypeOfPayment.CustomerPayment
			and ReceivablePaymentRel.ReturnToMakerTransactionAmount != ReceivablePaymentRel.TransactionAmount)
				confirmation required
					"Reversing_\Cash_\DistributionsWillBeCreatedBasedOnProrated_\Cash_\Details.Continue?"

			initialize LocalCurrencyCalculationGroup
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
			LocalCurrencyCalculationGroup.ExchangeDate					= ReceivablePaymentRel.DepositDate
			LocalCurrencyCalculationGroup.CurrencyAmount				= LocalDistributionAmount
			LocalCurrencyCalculationGroup.FromCurrency					= ReceivablePaymentRel.OriginalCurrency
			LocalCurrencyTable 											= ReceivablePaymentHeader.CurrencyTable

			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive

			LocalPaymentAmountRemaining 		= LocalDistributionAmount
			LastReceivablePaymentCashDetail 	= ReceivablePaymentRel.last ReceivablePaymentCashDetail set.ReceivablePaymentCashDetail

			initialize LocalSumCashDetailAmountGroup
			for each ReceivablePaymentRel.ReceivablePaymentCashDetail set
				LocalDetailAdjustmentPercent 	= (each.DistributionAmount.CurrencyAmount / ReceivablePaymentRel.TransactionAmount)
				LocalPaymentApplicationAmount	= LocalPaymentAmountRemaining * LocalDetailAdjustmentPercent
				round LocalPaymentApplicationAmount to nearest DerivedCurrencyRoundTo

				LocalAccount = each.CashFinanceCodeBlock
				if (LocalPaymentApplicationAmount != 0)
					initialize LocalNewReceivableGLDistribution
					invoke ReturnToMakerCreate ReceivableGLDistribution
						assign result to LocalNewReceivableGLDistribution
						invoked.ReceivableCompanyGroup.GlCompany				= RTMPayment.Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= RTMPayment.Company
						invoked.ReceivableCompanyGroup.OriginCompany			= RTMPayment.Company
						invoked.GeneralLedgerDate								= RTMPayment.GeneralLedgerDate
						invoked.ReceivableCompanyDataGroup.Customer				= RTMPayment.Customer
						invoked.OriginalCurrency								= ReceivablePaymentRel.OriginalCurrency
						invoked.Origin											= "RV"
						invoked.AccumulationType								= "D"
						invoked.DistributionSource								= "A"
						if (Description entered)
							invoked.Description									= Description
						else
							invoked.Description									= BatchText + RTMPayment.ReceivablePaymentHeader + NumberText + RTMPayment.RTMPayment
						invoked.DocumentNumber									= "8-" +  RTMPayment.ReceivablePaymentHeader + "-" + RTMPayment.ReceivablePaymentRel.ReceivablePayment
						invoked.Status											= 2
						invoked.GeneralLedgerAccount							= LocalAccount
						invoked.BypassStructureRelationEdit						= LocalBypassStructureRelationEdit 
						if (LocalUsePaymentDate)
							invoked.DistributionAmount.ExchangeDate				= ReceivablePaymentRel.DepositDate
						if (ReceivablePaymentRel.IsNonARPayment
						or  ReceivablePaymentRel.ReturnToMakerTransactionAmount = ReceivablePaymentRel.TransactionAmount)
							invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount * -1
						else
							invoked.DistributionAmount.CurrencyAmount			= LocalPaymentApplicationAmount * -1
						if (LocalUsePaymentDate and IsCurrencyRateOverriddenAtPayment)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = ReceivablePaymentRel.CurrencyRate
						invoked.BatchNumber										= ReceivablePaymentHeader   
						invoked.Invoice											= LocalDistributionInvoice
						invoked.TransType										= LocalDistributionInvoiceType
						invoked.TransactionDate									= LocalTransactionDate
						if (each.ReceivablePaymentCashDetail = LastReceivablePaymentCashDetail)
							invoked.DistributionAmount.KeepRateAndAmount							= true
							invoked.DistributionAmount.CurrencyAmount 								= ((LocalPaymentAmountRemaining * -1) - LocalSumCashDetailAmountGroup.CurrencyAmount)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount)
							if (Company.AccountingEntity.AlternateCurrency entered)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= ((LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount)
							if (Company.AccountingEntity.AlternateCurrency2 entered)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= ((LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount)
							if (Company.AccountingEntity.AlternateCurrency3 entered)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= ((LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount)
							if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount)
							if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount)
							if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount)
							if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount)	
							if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= ((LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount * -1) - LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount)

					LocalSumCashDetailAmountGroup.CurrencyAmount 							+= LocalNewReceivableGLDistribution.DistributionAmount.CurrencyAmount
					LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	+= LocalNewReceivableGLDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount


		CreateDistribution
			invoke ReturnToMakerCreate ReceivableGLDistribution
				invoked.ReceivableCompanyGroup.GlCompany				= RTMPayment.Company
				invoked.ReceivableCompanyDataGroup.TransactionCompany	= RTMPayment.Company
				invoked.ReceivableCompanyGroup.OriginCompany			= RTMPayment.Company
				invoked.GeneralLedgerDate								= RTMPayment.GeneralLedgerDate
				invoked.ReceivableCompanyDataGroup.Customer				= RTMPayment.Customer
				invoked.OriginalCurrency								= ReceivablePaymentRel.OriginalCurrency
				invoked.Origin											= "RV"
				invoked.AccumulationType								= "D"
				invoked.DistributionSource								= "A"
				if (Description entered)
					invoked.Description									= Description
				else
					invoked.Description									= BatchText + RTMPayment.ReceivablePaymentHeader + NumberText + RTMPayment.RTMPayment
				invoked.DocumentNumber									= "8-" +  RTMPayment.ReceivablePaymentHeader + "-" + RTMPayment.ReceivablePaymentRel.ReceivablePayment

				if (LocalCreateUnreleased)			
					invoked.Status											= 0
				else
					invoked.Status											= 2
				invoked.GeneralLedgerAccount							= LocalAccount
				invoked.BypassStructureRelationEdit						= LocalBypassStructureRelationEdit 
				if (LocalUsePaymentDate)
					invoked.DistributionAmount.ExchangeDate				= ReceivablePaymentRel.DepositDate
				invoked.DistributionAmount.CurrencyAmount				= LocalDistributionAmount
				if (LocalUsePaymentDate and IsCurrencyRateOverriddenAtPayment)
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = ReceivablePaymentRel.CurrencyRate
				invoked.BatchNumber										= ReceivablePaymentHeader  
				invoked.Invoice											= LocalDistributionInvoice
				invoked.TransType										= LocalDistributionInvoiceType
				invoked.SequenceNumber									= ReceivablePaymentRel.ReceivablePayment 
				invoked.TransactionDate									= LocalTransactionDate
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting) 
					LocalChartAccount									= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount.GeneralLedgerChartAccount
					if (LocalChartAccount								= LocalAccount.GeneralLedgerChartAccount)
						invoked.TransientUpdateCashCodeFund				= true
					if (LocalSetPaymentBatchNumber)			
						invoked.TransientSetPaymentBatchNumber			= true
						invoked.TransientPaymentBatchNumber				= ReceivablePaymentHeader
				if (LocalCashDetailApplicationSource entered)
					invoked.DistributionAmount 							= LocalSumCashDetailAmountGroup
					invoked.DistributionAmount.KeepRateAndAmount		= true

			initialize LocalUsePaymentDate

		DeriveNonARPaymentDistributions			
			for each NonARTypeDistributionRel
				LocalAccount								= each.GeneralLedgerAccount
				LocalBypassStructureRelationEdit			= false 
				LocalDistributionAmount						= each.DistributionAmount.CurrencyAmount * -1
				LocalTransactionDate						= GeneralLedgerDate
				LocalDistributionBatch						= ReceivablePaymentHeader
				LocalDistributionInvoice					= RTMPayment
				LocalDistributionInvoiceType				= TransactionType
				LocalUsePaymentDate							= true
				LocalCreateUnreleased						= true

				include CreateDistribution
				initialize LocalCreateUnreleased

		SumNonARTypeRTMReceivableGLDistribution		
			if (!SumOfNonARTypeRTMReceivableGLDistributionAmountsDone)
				initialize SumOfNonARTypeRTMReceivableGLDistributionDistributionAmountCurrencyAmount
					for each UnreleasedNonARTypeRTMDistributionsRel
						SumOfNonARTypeRTMReceivableGLDistributionDistributionAmountCurrencyAmount	 += each.DistributionAmount.CurrencyAmount
				SumOfNonARTypeRTMReceivableGLDistributionAmountsDone = true

	
	Derived Fields

		BatchText is a MessageField
			restricted
			"Batch_"

		NumberText is a MessageField
			restricted
			"Number_"

		ReturnedText is a MessageField
			restricted
			"RETURNED"

		PaymentText is a MessageField
			restricted
			"PAYMENT"

		ServiceText is a MessageField
			restricted
			"SERVICE"

		ChargeText is a MessageField
			restricted
			"CHARGE"

		DisallowedText is a MessageField
			restricted
			"Disallowed"

		AdjustmentText is a MessageField
			restricted
			"Adjustment"

		CancelledText is a MessageField
			restricted
			"Cancelled"
		CommentWorkDateDay is a DerivedField
			type is Alpha size 2
			if (ReturnDate entered)
				if (ReturnDate day < 10)
					return "0" + ReturnDate day
				else
					return ReturnDate day
			else
				if (GeneralLedgerDate day < 10)
					return "0" + GeneralLedgerDate day
				else
					return GeneralLedgerDate day

		CommentWorkDateMonth is a DerivedField
			type is Alpha size 2
			if (ReturnDate entered)
				if (ReturnDate month < 10)
					return "0" + ReturnDate month
				else
					return ReturnDate month
			else
				if (GeneralLedgerDate month < 10)
					return "0" + GeneralLedgerDate month
				else
					return GeneralLedgerDate month

		CommentWorkDateYear is a DerivedField
			type is Alpha size 4
			if (ReturnDate entered)
				return ReturnDate year
			else
				return GeneralLedgerDate year

		CommentWorkDate is a StringField
			type is Alpha size 8
			CommentWorkDateYear
			CommentWorkDateMonth
			CommentWorkDateDay

		DerivedCurrencyRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (Company.Currency.NumberOfDecimals = 2)
				return .01
			else
			if (Company.Currency.NumberOfDecimals = 0)
				return 1
			else
			if (Company.Currency.NumberOfDecimals = 3)
				return .001
			else
				return .01

		FirstSequenceCommentWrk is a DerivedField
			type is Alpha size 65															
			return "PAYMENT " + RTMPayment using "%22s" + "DATE  " + CommentWorkDate + "RETURN TO MAKER"				

		ManualNegativeAdjustmentsBaseAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			initialize WorkAmount
			for each ReceivableApplicationRel
				if (each.ReceivableApplication.ApplicationSource.ManualCashApplication)
					for each each.ManualNegativeAdjustmentsRel
						WorkAmount += each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount

			return WorkAmount

		ManualNegativeAdjustmentsTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize WorkAmount
			for each ReceivableApplicationRel
				if (each.ReceivableApplication.ApplicationSource.ManualCashApplication)
					for each each.ManualNegativeAdjustmentsRel
						WorkAmount += each.AdjustmentAmount.CurrencyAmount

			return WorkAmount

		ReceivableTransactionSummaryAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (ReceivablePaymentRel.CurrencyMultiplicationOrDivision.Multiply)
				WorkAmount	= ((AdjustAmount + AdditionalAmount) * ReceivablePaymentRel.CurrencyRate)
			else
				WorkAmount	= ((AdjustAmount + AdditionalAmount) / ReceivablePaymentRel.CurrencyRate)

			return WorkAmount

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			LocalPaymentCurrency	=	ReceivablePaymentRel.OriginalCurrency
			LocalInvoiceCurrency	=	ReceivableApplicationRel.ReceivableInvoiceDetailRel.OriginalCurrency
			if (LocalPaymentCurrency.NumberOfDecimals < LocalInvoiceCurrency.NumberOfDecimals)
				OutputNumberOfDecimals	= LocalPaymentCurrency.NumberOfDecimals
			else
				OutputNumberOfDecimals	= LocalInvoiceCurrency.NumberOfDecimals
			if (OutputNumberOfDecimals < Company.Currency.NumberOfDecimals)
				return OutputNumberOfDecimals
			else
				return Company.Currency.NumberOfDecimals

		DerivedRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001
				
		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001

		RNABaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			WorkAmount = ReceivablePaymentRel.BaseAmount + ReceivablePaymentRel.BaseCreditAppliedAmount - ReceivablePaymentRel.BaseAppliedAmount

			if (ReceivablePaymentRel.TransferDate entered
			and ReceivablePaymentRel.Customer != ReceivablePaymentRel.TransferredToCustomer)
				if (ReceivablePaymentRel.CurrencyMultiplicationOrDivision.Multiply)
					WorkAmount	-= (ReceivablePaymentRel.TransferAmountTransactionCurrency * ReceivablePaymentRel.CurrencyRate)
				else
					WorkAmount	-= (ReceivablePaymentRel.TransferAmountTransactionCurrency / ReceivablePaymentRel.CurrencyRate)
			round WorkAmount to nearest DerivedRoundTo
			return WorkAmount

		RNATransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			WorkAmount = ReceivablePaymentRel.TransactionAmount + ReceivablePaymentRel.CreditAppliedAmount - ReceivablePaymentRel.AppliedAmount

			if (ReceivablePaymentRel.TransferDate entered
			and ReceivablePaymentRel.Customer != ReceivablePaymentRel.TransferredToCustomer)
				if (ReceivablePaymentRel.CurrencyMultiplicationOrDivision.Multiply)
					WorkAmount	-= ReceivablePaymentRel.TransferAmountTransactionCurrency 
				else
					WorkAmount	-= ReceivablePaymentRel.TransferAmountTransactionCurrency

			return WorkAmount

		DerivedReference is a StringField
			type is Alpha 30
			restricted
			"RTM Payment"  
			" "
			ReceivablePaymentRel.PaymentNumber

		IsCurrencyRateOverriddenAtPayment is a DerivedField
			type is Boolean
			initialize CurrencyExchange
			LocalCurrencyTable							= ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
			LocalFromCurrency							= ReceivablePaymentRel.OriginalCurrency
			LocalExchangeDate							= ReceivablePaymentRel.DepositDate
			CurrencyExchange.ToCurrency					= Company.Currency
			if (CurrencyExchange.OutputCurrencyRate = ReceivablePaymentRel.CurrencyRate)
				return false
			else
				return true
		DerivedStatus is a DerivedField		
			type is Alpha size 10
			if(Status.UnreleasedRtm)
				return "Unreleased"
			else
			if(Status.ReleasedRtm)
				return ("Released")
		
		BatchAndCompanyTitleWithRecord is a LabelField		
			"RTMPayment<RTMPayment>_forBatch<ReceivablePaymentHeader>"
		
		BatchAndCompanyTitleWithNoRecord is a LabelField	
			"RTMPayment"
	
		BatchAndCompanyTitle is a DerivedField				
			type is MessageField
			if(ReceivablePaymentHeader exist)
				return BatchAndCompanyTitleWithRecord
			else 
			if(!ReceivablePaymentHeader exist)
				return BatchAndCompanyTitleWithNoRecord
			
		PaymentAmountDisplay	is a LabelField 
			"<ReceivablePaymentRel.OriginalCurrency>_<ReceivablePaymentRel.ReturnToMakerTransactionAmount>"					

		SumOfDistributions is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumNonARTypeRTMReceivableGLDistribution
			return (SumOfNonARTypeRTMReceivableGLDistributionDistributionAmountCurrencyAmount)

		DerivedChangeAmount is a DerivedField						
			type is like InternationalAmount
			restricted
			if (NewReceivableInvoice.ReceivableInvoiceType = "C")
				return (NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - LocalChangeAmount)
			else
				return ((NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - LocalChangeAmount) * -1)


	Conditions

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	   CompanySecurityGroupMemberRel exists)

		HasRTMPaymentAdjustment
			restricted
			when (first RTMPaymentAdjustment set exists)

		BankCodeEntered
			restricted
			classic name is RTMSET5
			when (RTMBankCode entered)

		HasComments
			restricted
			when (Comments.Comment[1] entered
			or	Comments.Comment[2] entered
			or	Comments.Comment[3] entered)

		RTMPaymentAdjustExists
			restricted
			when (RTMPaymentAdjustmentRel exists)

		RTMPaymentExists
			restricted
			when (RTMPayment exists)

		ICBPaymentOriginExists  
			restricted
			when (ReceivablePaymentRel.ReceivablePaymentHeader.Origin.IntercompanyBilling)

		IsCustomerPayment	 
			restricted
			when (Customer entered)		

		IsNonAR				  
			restricted
			when (Customer not entered)		

		IsNonARNotFundAccountingEnabled  	
			restricted
			when (ReceivablePaymentRel.TypeOfPayment.NonArPayment
			and   !Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		IsNonARFundAccountingEnabled
			restricted
			when (ReceivablePaymentRel.TypeOfPayment.NonArPayment
			and   Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		IsUnreleasedNonARPayment		
			restricted
			when (Status.UnreleasedRtm
			and   IsNonARNotFundAccountingEnabled)

		IsReleasedNonARPayment			
			restricted
			when (Status.ReleasedRtm
			and   IsNonARNotFundAccountingEnabled)

		IsUnreleasedCustomerPayment							
			restricted
			when (Customer entered
			and Status.UnreleasedRtm)
	
	Relations









		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company


		ReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditBatch		 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	 = ReceivablePaymentRel.ReceivablePayment
			Instance Selection
				where (!related.Reverse
				and	!related.ApplicationSource.ReversalOfApplications
				and	!related.ReceivableApplication.TransType.CustomerPayment)

		ContextAdjustmentsRel											
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses ByCreditTransaction
				related.AdjustmentCreditTransaction.CreditCompany		= RTMPayment.Company
				related.AdjustmentCreditTransaction.CreditBatch			= RTMPayment.ReceivablePaymentHeader
				related.AdjustmentCreditTransaction.CreditSequence		= RTMPayment.ReceivablePaymentRel.ReceivablePayment

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.Customer					 = Customer

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			required
			Field Mapping uses Set2
				related.Company						 = Company
				related.ReceivablePaymentHeader		 = ReceivablePaymentHeader
				related.TypeOfPayment				 = TransactionType
				related.PaymentNumber				 = RTMPayment
				related.Customer					 = Customer

		CashDetailApplicationRel
			one-to-many relation to CashDetailApplication
			Field Mapping uses symbolic key
				related.Company										= Company
				related.ReceivablePaymentHeader						= ReceivablePaymentHeader
				related.ReceivablePayment							= ReceivablePaymentRel.ReceivablePayment
			Instance Selection
				where (related.ApplicationSource					= LocalCashDetailApplicationSource)

		RTMPaymentLanguageTextRel
			one-to-many relation to RTMPaymentLanguageText
			Field Mapping uses Set1
				related.RTMPaymentLanguageText.Company		 = Company
				related.RTMPaymentLanguageText.TextCode		 = TextCode

		CompanyRTMPaymentLanguageTextRel										
			one-to-many relation to RTMPaymentLanguageText
			Field Mapping uses Set1
			Instance Selection
				where (related.RTMPaymentLanguageText.Company		 = Company)

		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivableProcessLevel			 = ReceivablePaymentHeader.ReceivableProcessLevel
				related.ReceivableTransactionSummary	 = LocalReceivableTransactionSummary

		RTMPaymentAdjustmentRel is a RTMPaymentAdjustment set

		RTMPaymentRel
			classic name is ARRTM1
			one-to-one relation to RTMPayment
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.Customer						 = Customer
				related.RTMPayment						 = RTMPayment

		ARPaymentGLDistributionRel			
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByPaymentSequence
				related.ReceivableCompanyDataGroup.TransactionCompany		 = Company
				related.BatchNumber											 = ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.Payment
				and	   related.Invoice										 = RTMPayment
				and	   related.CategoryType 								 = "N")	

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company

		ReceivableProjectTransactionRel
			one-to-one relation to ReceivableProjectTransaction
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.ReceivableProjectTransaction.TransType						 = ReceivablePaymentRel.TypeOfPayment
				related.ReceivableProjectTransaction.BatchNumber					 = ReceivablePaymentHeader
				related.ReceivableProjectTransaction.Transaction					 = RTMPayment
				related.ReceivableProjectTransaction.PaymentSeq						 = ReceivablePaymentRel.ReceivablePayment

		NonARPaymentGLDistributionRel			
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByPaymentSequence
				related.ReceivableCompanyDataGroup.TransactionCompany		 = Company
				related.BatchNumber											 = ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.RTMPayment
				and    related.Invoice										 = RTMPayment
				and    related.TransType.NonArPayment)


		NonARTypeDistributionRel			
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByPaymentSequence
				related.ReceivableCompanyDataGroup.TransactionCompany		 = Company
				related.BatchNumber											 = ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.Payment
				and    related.Invoice										 = RTMPayment
				and    related.TransType.NonArPayment)


		UnreleasedNonARTypeRTMDistributionsRel			
			one-to-many relation using NonARPaymentGLDistributionRel
			Instance Selection
				where (related.Status.Unreleased)

	Sets

		Set1
			not indexed
			Sort Order
				Company
				Customer
				RTMPayment
				ReceivablePaymentHeader

		Set2
			indexed
			Instance Selection
				where (Status.UnreleasedRtm)
			Sort Order
				Company
				Customer
				RTMPayment
				ReceivablePaymentHeader

		Set3
			indexed
			Sort Order
				Company
				GeneralLedgerDate
				Customer
				RTMPayment
				ReceivablePaymentHeader

		Set4
			indexed
			Sort Order
				Company
				Customer
				DebitMemo
				RTMPayment
				ReceivablePaymentHeader

		Set5
			indexed
			Instance Selection
				where (BankCodeEntered)
			Sort Order
				RTMBankCode
				TransactionIDNumber

		Set6				
			not indexed
			Sort Order
				ReceivablePaymentHeader.Company	
				RTMPayment.ReceivablePaymentHeader
				RTMPayment.Customer
				RTMPayment
				ReturnDate


	Field Rules

		GeneralLedgerDate
			required
			if (Company.DefaultApplicationDate.SystemDate)
				default to current corporate date
			else
				default to ReceivablePaymentRel.GeneralLedgerDate
			if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
				constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"



		ReturnDate
			default to ReceivablePaymentRel.DepositDate      
			required

		Billback
			default to "N"

		ChargeBank
			if (Customer not entered)
				constraint (!ChargeBank)
					"CannotBillServiceChargeAmountForNonARPayment"  


		AdditionalAmount
			if (ChargeBank)
				required
					"ServiceChargesRequiredIfBillServiceChargeSetToTrue"  

		CreditAccount
			if  (AdditionalAmount entered		
			and Customer entered)
				required
					"CreditAccountRequiredForServiceCharge"

			if  (AdditionalAmount not entered
			and Customer entered)
				constraint (CreditAccount entered)
					"CannotEnterCreditAccountIfServiceChargeAmountNotEntered"	

			if  (AdditionalAmount not entered
			and IsNonARFundAccountingEnabled)
				cannot be entered
					"CannotEnterCreditAccountWhenFundAccountingIsEnabledAndServiceChargeAmountIsNotEntered"

			if (AdditionalAmount entered
			and CreditAccount not entered)
				constraint (ChargeBank)
					"MustEnterCreditAccountWhenBillServiceAmountIsFalseAndServiceChargeAmountEntered"

		DebitAccount




			if  (AdditionalAmount not entered
			and IsNonARFundAccountingEnabled)
				cannot be entered
					"CannotEnterDebitAccountWhenFundAccountingIsEnabledAndServiceChargeAmountNotEntered"

			if (ChargeBank)
				cannot be entered
					"CannotEnterDebitAccountWhenBillServiceChargeSetToTrue"
			else
			if  (AdditionalAmount entered
			and	 Customer not entered)
				required
					"DebitAccountRequired"

			if (IsCustomerPayment
			and AdditionalAmount entered
			and DebitAccount not entered)
				constraint (ChargeBank)
					"MustEnterDebitAccountWhenBillServiceAmountIsFalseAndServiceChargeAmountEntered"

			if (IsCustomerPayment
			and AdditionalAmount entered)
				constraint (!ChargeBank)
					"CannotEnterDebitAccountWhenBillServiceAmountIsTrueAndServiceChargeAmountEntered"


		RevalueCurrencyTransactions
			if (ReceivablePaymentRel.OriginalCurrency != Company.Currency)
				default to CompanyCustomerRel.RevalueCurrencyTransactions

			if (ReceivablePaymentRel.OriginalCurrency = Company.Currency)
				constraint (!RevalueCurrencyTransactions)
					"CannotSetRevalueCurrencyToTrue;PaymentCurrencyEqualsCompanyCurrency"

		TransientTextCode																		
			if (TransientTextCode entered)
				TextCode = TransientTextCode.TextCode
			else	
				initialize TextCode
			LocalLanguageCode		= CompanyCustomerRel.LanguageCode
			Comments				= RTMPaymentLanguageTextRel.RtmComments

		TextCode
			if (TextCode entered)
				constraint (RTMPaymentLanguageTextRel exists)
					"ReturnTextCodeDoesNotExist"
			if (Customer not entered)
				cannot be entered
					"ReturnTextCodeCannotBeEnteredWithoutCustomer"
					
			LocalLanguageCode		= CompanyCustomerRel.LanguageCode
			Comments				= RTMPaymentLanguageTextRel.RtmComments						



	
	StateCycles	
		RTMPaymentLifeCycle is a StateCycle

			state field is Status

			UnreleasedRtm is a State

				Create is a Create Action
	
					Action Rules	
						LocalGLTransactionDate = GeneralLedgerDate
						include CommonEdits
						constraint (!ICBPaymentOriginExists) 
							"CannotCreateRTMPaymentForIntercompanyBillingSettlement;MustReverseRelatedSettlementInTheIntercompanyBillingSystem"
						if (ReceivablePaymentRel.AppliedAmount != blank or ReceivablePaymentRel.CreditAppliedAmount != blank)
							confirmation required
								"PaymentHasApplicationsThatHaveNotBeenReversed,DoYouWantToContinue?"

					Exit Rules
						if (Billback.YesBillBackAllAdjustments)
							for each ReceivableApplicationRel
								if  (!each.ReceivableApplication.Reverse
								and  !each.ReceivableApplication.ApplicationSource.ReversalOfApplications)
									for each each.ReceivableApplicationAdjustmentRel
										if (each.AllowReturnToMaker)
											invoke Create RTMPaymentAdjustment
												invoked.Company											= Company
												invoked.RTMPayment										= RTMPayment
												invoked.ReceivablePaymentHeader							= ReceivablePaymentHeader
												invoked.Customer										= Customer
												invoked.RTMPaymentAdjustment.DebitCompany				= each.Company
												invoked.RTMPaymentAdjustment.DebitType					= each.ReceivableApplication.TransType
												invoked.RTMPaymentAdjustment.DebitTransactionNumber		= each.ReceivableApplication.Invoice
												invoked.RTMPaymentAdjustment.DebitPaymentSequence		= each.ReceivableApplication.PaymentSeq
												invoked.RTMPaymentAdjustment.DebitBatchNumber			= each.ReceivableApplication.BatchNumber
												invoked.RTMPaymentAdjustment.ApplicationSequence		= each.ReceivableApplication.ApplicationSequence
												invoked.RTMPaymentAdjustment.AdjustmentSequence			= each.ReceivableApplicationAdjustment
												invoked.DebitCustomer									= Customer
												invoked.Description										= each.Description
												invoked.Amount											= each.CreditAdjustAmount
						if (IsNonARNotFundAccountingEnabled)			
							include DeriveNonARPaymentDistributions

				CreateFromICBSettlementReversal is a Create Action 
					restricted
					Action Rules	

						LocalGLTransactionDate = GeneralLedgerDate
						include CommonEdits

				Update is an Update Action
					Action Rules
						LocalGLTransactionDate = GeneralLedgerDate
						include CommonEdits
					Exit Rules


				Delete is a Delete Action
					Entrance Rules		
						invoke Delete UnreleasedNonARTypeRTMDistributionsRel

				Release is an Instance Action
					Action Rules

						PaymentAmount								= ReceivablePaymentRel.ReturnToMakerTransactionAmount					
						if (IsNonARNotFundAccountingEnabled)			
							constraint (SumOfDistributions = PaymentAmount)
								"DistributionsOutOfBalance"

						if (Customer entered)
							SalesRepresentative						= CompanyCustomerRel.SalesRepresentative
							CreditAnalyst							= CompanyCustomerRel.CreditAnalyst


						RTMBankCode								= Company.RTMPaymentBankCode

						include CommonEdits

						LocalTransactionAmount1					= ReceivablePaymentRel.AppliedAmount - ReceivablePaymentRel.CreditAppliedAmount

						if (LocalTransactionAmount1 < 0)
							LocalTransactionAmount1				= LocalTransactionAmount1 * -1
							LocalType								= "C"
						else
							LocalType								= "D"

						LocalSaveTransactionAmount					= LocalTransactionAmount1
						LocalTransactionAmount2					= ReceivablePaymentRel.ReturnToMakerTransactionAmount					

						if (ReceivablePaymentRel.TransferDate not entered
						and ReceivablePaymentRel.Customer != ReceivablePaymentRel.TransferredToCustomer)
							LocalTransactionAmount2 = ReceivablePaymentRel.ReturnToMakerTransactionAmount

						if (LocalType = "D")
							LocalTransactionAmount1				+= AdjustAmount
							LocalSaveTransactionAmount				+= AdjustAmount

						if (LocalType = "D")
							LocalTransactionAmount2				+= AdjustAmount
						else
							LocalTransactionAmount2				-= AdjustAmount

						if  (AdditionalAmount entered
						and  ChargeBank)
							if (LocalType		 = "D")
								LocalTransactionAmount1			+= AdditionalAmount
								LocalSaveTransactionAmount			+= AdditionalAmount
							else
								LocalTransactionAmount1			-= AdditionalAmount
								LocalSaveTransactionAmount			-= AdditionalAmount

							LocalTransactionAmount2				+= AdditionalAmount

						if (LocalTransactionAmount1 < 0)
							LocalType = "D"
							LocalTransactionAmount1				= LocalTransactionAmount1 * -1
							LocalSaveTransactionAmount				= LocalSaveTransactionAmount * -1

						if (ReceivablePaymentHeader.CurrencyMultiplicationOrDivision.Multiply)
							LocalBaseAmount1						= LocalTransactionAmount1 * ReceivablePaymentRel.CurrencyRate
							LocalBaseAmount2						= LocalTransactionAmount2 * ReceivablePaymentRel.CurrencyRate
							LocalSaveBaseAmount						= LocalSaveTransactionAmount * ReceivablePaymentRel.CurrencyRate
						else
							LocalBaseAmount1						= LocalTransactionAmount1 / ReceivablePaymentRel.CurrencyRate
							LocalBaseAmount2						= LocalTransactionAmount2 / ReceivablePaymentRel.CurrencyRate
							LocalSaveBaseAmount						= LocalSaveTransactionAmount / ReceivablePaymentRel.CurrencyRate









						include CashLedger

						increment Company.LastRTMPaymentNumber by 1
						LocalInvoice													= "RM-" + Company.LastRTMPaymentNumber

						if (LocalBaseAmount1 entered
						or (AdditionalAmount entered
						and ChargeBank))
							increment Company.LastChargebackBatchNumber by 1
							invoke Released.CreateReleasedFromPayment ReceivableInvoice
								assign result to NewReceivableInvoice
								invoked.Company												= Company
								invoked.Customer											= Customer
								invoked.ReceivableInvoiceType								= LocalType
								invoked.AlternateReceivableInvoiceType						= LocalType
								invoked.System												= "AR"
								invoked.ReceivableInvoice									= LocalInvoice
								invoked.BatchNumber											= Company.LastChargebackBatchNumber
								invoked.ReceivableProcessLevel								= ReceivablePaymentRel.ReceivableProcessLevel
								invoked.ReceivableGeneralLedgerCode							= ReceivablePaymentRel.ReceivableProcessLevel.ReceivableGeneralLedgerCode
								invoked.GeneralLedgerDate									= GeneralLedgerDate
								invoked.TransactionDate										= GeneralLedgerDate
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = LocalBaseAmount1 - ManualNegativeAdjustmentsBaseAmount
								invoked.InvoiceAmount.CurrencyAmount						= LocalTransactionAmount1 - ManualNegativeAdjustmentsTransactionAmount
								invoked.BankTransactionCode									= CompanyCustomerRel.BankTransactionCode
								invoked.BankTransactionType									= CompanyCustomerRel.BankTransactionCode.BankTransactionType

								invoked.ReceivableCrossReference.ReceivableInvoiceType		= "P"
								invoked.ReceivableCrossReference.ReceivableInvoice			= ReceivablePaymentRel.PaymentNumber
								if (Description entered)
									invoked.Description										= Description
								else
									invoked.Description										= CancelledText
								invoked.OriginalCurrency									= ReceivablePaymentRel.OriginalCurrency
								invoked.FromReceivablePayment								= true
								invoked.Origin												= "R"
								invoked.CurrencyDecimalsNumber								= ReceivablePaymentRel.CurrencyDecimalsNumber
								invoked.CurrencyRateToCustomerGroupCurrency					= ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency
								invoked.CustomerGroupCurrencyMultiplicationOrDivision		= ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
								invoked.CurrencyMultiplicationOrDivision					= ReceivablePaymentHeader.CurrencyMultiplicationOrDivision
								invoked.CurrencyRateToCustomerGroupCurrency					= ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency
								invoked.CustomerGroupCurrencyMultiplicationOrDivision		= ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision
								invoked.RevalueCurrencyTransactions							= RevalueCurrencyTransactions
								invoked.TermsCode											= CompanyCustomerRel.DebitCreditMemoTermsCode
								invoked.SalesRepresentative									= CompanyCustomerRel.SalesRepresentative

								invoked.SummarizeDetail										= false
								if (CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
									invoked.TransactionUserField4							= ReceivablePaymentHeader

							invoke Create ReceivableInvoiceDetail
								fill in fields from NewReceivableInvoice.ReceivableInvoice
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= LocalType
								invoked.ReceivableInvoiceDetail.Invoice						= "RM-" + Company.LastRTMPaymentNumber
								invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
								invoked.DueDate												= GeneralLedgerDate
								invoked.Status												= 1
								invoked.InvoiceAmount.CurrencyAmount						= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
								if (ReceivablePaymentRel.Project entered)																
									invoked.Project											= ReceivablePaymentRel.Project				
								if (ReceivablePaymentRel.ProjectContract entered)														
									invoked.ProjectContract									= ReceivablePaymentRel.ProjectContract		
								if (ReceivablePaymentRel.FinanceDimension2 entered)														
									invoked.FinanceDimension2								= ReceivablePaymentRel.FinanceDimension2	
							
							for each ReceivableApplicationRel
								if (each.ReceivableApplication.ApplicationSource.ManualCashApplication)
									for each each.ManualNegativeAdjustmentsRel
										LocalAccount											= each.DistributionAccount
										LocalBypassStructureRelationEdit						= true 
										LocalDistributionAmount									= each.AdjustmentAmount.CurrencyAmount * -1
										LocalTransactionDate									= ReturnDate
										LocalDistributionBatch									= Company.LastChargebackBatchNumber
										LocalDistributionInvoice								= each.ReceivableApplication.Invoice 
										LocalDistributionInvoiceType							= each.ReceivableApplication.TransType
										include CreateDistribution

							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.DebitsCredits
							invoke Update ReceivableTransactionSummaryRel
								invoked.TodaysAmount									+= ReceivableTransactionSummaryAmount
								invoked.PeriodAmount									+= ReceivableTransactionSummaryAmount
								invoked.CurrentYearAmount								+= ReceivableTransactionSummaryAmount
						
						if (!IsNonARFundAccountingEnabled)		
							LocalAccount												= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
							LocalBypassStructureRelationEdit							= true 
							LocalDistributionAmount										= ReceivablePaymentRel.ReturnToMakerTransactionAmount * -1
							LocalTransactionDate										= GeneralLedgerDate
							LocalDistributionBatch										= ReceivablePaymentHeader    			 
							LocalDistributionInvoice									= ReceivablePaymentRel.PaymentNumber     
							LocalDistributionInvoiceType								= ReceivablePaymentRel.TypeOfPayment     

							LocalUsePaymentDate	= true
							if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)		
								LocalSetPaymentBatchNumber = true
							
							if (Company.DetailedCashDistributions
							and ReceivablePaymentRel.CashDetailState.Released)
								include CreateCashDistributionsFromCashDetails
							else
								include CreateDistribution
							
							initialize LocalSetPaymentBatchNumber			
							
						if (IsNonARFundAccountingEnabled)		
							for each ARPaymentGLDistributionRel
								invoke Create each
						 			fill in fields from each
						 			invoked.GeneralLedgerDate						= GeneralLedgerDate
									invoked.TransactionDate							= GeneralLedgerDate
									invoked.Status									= 2
									invoked.Origin									= "RV"
						 			invoked.DistributionAmount.CurrencyAmount 		= each.DistributionAmount.CurrencyAmount * -1
						 			if (each.GeneralLedgerAccount.GeneralLedgerChartAccount = ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount.GeneralLedgerChartAccount)
						 				invoked.TransientUpdateCashCodeFund			= true
									invoked.DocumentNumber							= "8-" +  RTMPayment.ReceivablePaymentHeader + "-" + RTMPayment.ReceivablePaymentRel.ReceivablePayment
									if (Description entered)
										invoked.Description							= Description
									else
										invoked.Description							= BatchText + RTMPayment.ReceivablePaymentHeader + NumberText + RTMPayment.RTMPayment

						if (!IsNonARFundAccountingEnabled) 		
							if (RNABaseAmount entered)
								if (Customer entered)
									LocalAccount										= ReceivablePaymentRel.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
									LocalBypassStructureRelationEdit					= true 
								else
									LocalAccount										= DebitAccount
									LocalBypassStructureRelationEdit					= false 
									SkipCreateDistribution								= true		

								LocalDistributionAmount									= RNATransactionAmount
								LocalTransactionDate									= GeneralLedgerDate
								LocalDistributionBatch									= ReceivablePaymentHeader    			 
								LocalDistributionInvoice								= ReceivablePaymentRel.PaymentNumber     
								LocalDistributionInvoiceType							= ReceivablePaymentRel.TypeOfPayment     

								LocalUsePaymentDate	= true

								if (Customer entered
								and Company.DetailedRNADistributions
								and ReceivablePaymentRel.CashDetailState.Released)
									include CreateCashDetailApplicationsAndRNADistributions
								else
									if (!SkipCreateDistribution)				
										include CreateDistribution
									else										
										for each UnreleasedNonARTypeRTMDistributionsRel			
											invoke FastUpdate each
												invoked.Status = 2
						
						if  (LocalBaseAmount1 entered
						or  (ChargeBank
						and  AdditionalAmount entered))
							if (Customer entered)
								LocalAccount						= ReceivablePaymentRel.ReceivableProcessLevel.ReceivableGeneralLedgerCode.DistributionAccount
								LocalBypassStructureRelationEdit	= true 
							else
								LocalAccount						= DebitAccount
								LocalBypassStructureRelationEdit	= false 

							if (LocalType = "D"
							and AdjustAmount > 0)
								LocalDistributionAmount						= LocalTransactionAmount1 - ManualNegativeAdjustmentsTransactionAmount - AdjustAmount
							else
							if (LocalType = "C")
								LocalDistributionAmount						= ((LocalTransactionAmount1 - ManualNegativeAdjustmentsTransactionAmount) * -1)
							else
								LocalDistributionAmount						= LocalTransactionAmount1 - ManualNegativeAdjustmentsTransactionAmount

							LocalDistributionBatch								= ReceivablePaymentHeader 
							LocalDistributionInvoice							= LocalInvoice
							LocalDistributionInvoiceType						= LocalType
							LocalTransactionDate								= GeneralLedgerDate

							LocalUsePaymentDate	= true
							include CreateDistribution

						if (AdditionalAmount entered)
							LocalAccount										= CreditAccount
							LocalBypassStructureRelationEdit					= false 
							LocalDistributionAmount								= AdditionalAmount * -1
							LocalDistributionBatch								= ReceivablePaymentHeader 
							LocalDistributionInvoice							= LocalInvoice
							LocalDistributionInvoiceType						= LocalType
							LocalTransactionDate								= GeneralLedgerDate
							include CreateDistribution
							if (!ChargeBank)
								LocalAccount									= DebitAccount
								LocalBypassStructureRelationEdit				= false 
								LocalDistributionAmount							= AdditionalAmount
								LocalDistributionBatch							= ReceivablePaymentHeader 
								LocalDistributionInvoice						= LocalInvoice
								LocalDistributionInvoiceType					= LocalType
								include CreateDistribution


						if (!ReceivablePaymentRel.TypeOfPayment.NonArPayment)
							invoke Create ReceivablePaymentNoticeDetail
								invoked.Company											= Company
								invoked.ReceivablePaymentNoticeDetail.NoticeType		= "R"
								invoked.ReceivablePaymentNoticeDetail.Customer			= Customer
								invoked.ReceivablePaymentNoticeDetail.NoticeNbr			= LocalInvoice
								invoked.ReceivablePaymentNoticeDetail.SeqNbr			= 1
								if (ReturnDate entered)
									invoked.Date										= ReturnDate
								else
									invoked.Date										= GeneralLedgerDate
								invoked.Currency										= ReceivablePaymentRel.OriginalCurrency
								invoked.CommentWrks.CommentWrk[1]					   = FirstSequenceCommentWrk
								invoked.CommentWrks.CommentWrk[2]					   = Comments.Comment[1]
								invoked.CommentWrks.CommentWrk[3]					   = Comments.Comment[2]
								invoked.CommentWrks.CommentWrk[4]					   = Comments.Comment[3]


							invoke Create ReceivablePaymentNoticeDetail
								invoked.Company											= Company
								invoked.ReceivablePaymentNoticeDetail.NoticeType		= "R"
								invoked.ReceivablePaymentNoticeDetail.Customer			= Customer
								invoked.ReceivablePaymentNoticeDetail.NoticeNbr			= LocalInvoice
								invoked.ReceivablePaymentNoticeDetail.SeqNbr			= 2
								invoked.NoticeVars.NoticeVar[3]							= ReturnedText
								invoked.NoticeVars.NoticeVar[4]							= PaymentText
								invoked.Amounts.Amount[2]								= PaymentAmount
								invoked.Date											= GeneralLedgerDate
								invoked.Currency										= ReceivablePaymentRel.OriginalCurrency
								invoked.CommentWrks										= Comments

							invoke Create ReceivablePaymentNoticeDetail
								invoked.Company											= Company
								invoked.ReceivablePaymentNoticeDetail.NoticeType		= "R"
								invoked.ReceivablePaymentNoticeDetail.Customer			= Customer
								invoked.ReceivablePaymentNoticeDetail.NoticeNbr			= LocalInvoice
								invoked.ReceivablePaymentNoticeDetail.SeqNbr			= 3
								invoked.Date											= GeneralLedgerDate
								if (ChargeBank)
									invoked.NoticeVars.NoticeVar[3]						= ServiceText
									invoked.NoticeVars.NoticeVar[4]						= ChargeText
									invoked.Amounts.Amount[2]							= AdditionalAmount

						LocalSequence = 3
						for each RTMPaymentAdjustment set
							LocalSequence += 1
							if (!ReceivablePaymentRel.TypeOfPayment.NonArPayment)
								invoke Create ReceivablePaymentNoticeDetail
									invoked.Company										= Company
									invoked.ReceivablePaymentNoticeDetail.NoticeType	= "R"
									invoked.ReceivablePaymentNoticeDetail.Customer		= Customer
									invoked.ReceivablePaymentNoticeDetail.NoticeNbr		= LocalInvoice
									invoked.ReceivablePaymentNoticeDetail.SeqNbr		= LocalSequence
									invoked.NoticeVars.NoticeVar[1]						= each.RTMPaymentAdjustment.DebitTransactionNumber
									invoked.NoticeVars.NoticeVar[2]						= each.ReceivableInvoiceDetailRel.TransactionDate
									invoked.NoticeVars.NoticeVar[3]						= DisallowedText
									invoked.NoticeVars.NoticeVar[4]						= AdjustmentText
									if (LocalType = "C")
										invoked.Amounts.Amount[2]						= each.Amount * -1
									else
										invoked.Amounts.Amount[2]						= each.ReceivableApplicationAdjustmentRel.AdjustmentAmount.CurrencyAmount
									invoked.Date										= GeneralLedgerDate
									invoked.Description									= each.Description
									invoked.Currency									= ReceivablePaymentRel.OriginalCurrency

							LocalAccount												= each.ReceivableApplicationAdjustmentRel.DistributionAccount
							LocalBypassStructureRelationEdit							= true 
							LocalTransactionDate										= ReturnDate
							LocalDistributionBatch										= Company.LastChargebackBatchNumber
							LocalDistributionInvoice									= each.ReceivableApplicationAdjustmentRel.ReceivableApplication.Invoice 
							LocalDistributionInvoiceType								= each.ReceivableApplicationAdjustmentRel.ReceivableApplication.TransType				
							if (each.ReceivableApplicationAdjustmentRel.ReceivableApplication.TransType = "P")
								LocalDistributionAmount									= each.Amount
							else
								LocalDistributionAmount									= each.Amount * -1
							include CreateDistribution

							if (!each.ReceivableApplicationAdjustmentRel.ReceivableApplication.TransType.CustomerPayment)
								LocalAccount											= each.ReceivableApplicationAdjustmentRel.ReceivableApplication.ReceivableGeneralLedgerCode.DistributionAccount
							else
								LocalAccount											= ReceivablePaymentRel.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
							LocalBypassStructureRelationEdit							= true 
							LocalTransactionDate										= ReturnDate
							LocalDistributionBatch										= Company.LastChargebackBatchNumber
							LocalDistributionInvoice									= each.ReceivableApplicationAdjustmentRel.ReceivableApplication.Invoice 
							LocalDistributionInvoiceType								= each.ReceivableApplicationAdjustmentRel.ReceivableApplication.TransType				
							if (each.ReceivableApplicationAdjustmentRel.ReceivableApplication.TransType = "P")
								LocalDistributionAmount									= each.ReceivableApplicationAdjustmentRel.AdjustmentAmount.CurrencyAmount * -1
							else
								LocalDistributionAmount									= each.ReceivableApplicationAdjustmentRel.AdjustmentAmount.CurrencyAmount

							include CreateDistribution

						invoke CancelPayment ReceivablePaymentRel
							invoked.PrmCancelDate = GeneralLedgerDate

						LocalChangeAmount	=	LocalTransactionAmount2 - PaymentAmount									
						if (!ReceivablePaymentRel.TypeOfPayment.NonArPayment)									
							if (DerivedChangeAmount entered)
								invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
									invoked.ChangeAmount									= DerivedChangeAmount				
									invoked.PrmBalanceType									= 9	
									invoked.PrmReference									= DerivedReference

						if (ReceivableProjectTransactionRel exists)
							invoke Update ReceivableProjectTransactionRel
								invoked.OpenTransactionAmount							= blank 
								invoked.OpenBaseAmount									= blank 
								invoked.OpenSortBaseAmount								= blank 

					Exit Rules
						if (ReceivablePaymentRel.IsPrepaymentTaxWithHolding
							and ReceivablePaymentRel.Customer entered)				
								initialize CalculateTax
								CalculateTax.TaxEntity					= Company.AccountingEntity
								CalculateTax.TaxCode					= Company.PrepaymentTaxCode
								CalculateTax.TaxDate					= ReceivablePaymentRel.DepositDate
								CalculateTax.BypassMemberEdit			= true
								CalculateTax.Function					= "I"
								LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
								
								LocalNumberOfDecimals = ReceivablePaymentRel.OriginalCurrency.NumberOfDecimals
								LocalPrepaymentTaxRate		= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
								LocalPaymentOpenAmount		= ReceivablePaymentRel.PaymentOpen * -1
								LocalBeforeGSTAmount 		= LocalPaymentOpenAmount / (1 + LocalPrepaymentTaxRate)
								round LocalBeforeGSTAmount to nearest DerivedLocalRoundTo
								LocalPrepaymentTaxAmount	= LocalPaymentOpenAmount - LocalBeforeGSTAmount
								round LocalPrepaymentTaxAmount to nearest DerivedLocalRoundTo
								
								if (LocalPrepaymentTaxAmount entered)

									invoke ReturnToMakerCreate ReceivableGLDistribution
										invoked.ReceivableCompanyGroup.GlCompany					= Company
										invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
										invoked.ReceivableCompanyGroup.OriginCompany				= Company
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentHeader.ReceivableProcessLevel
										invoked.BatchNumber											= ReceivablePaymentHeader
										invoked.SequenceNumber										= ReceivablePaymentRel.ReceivablePayment
										invoked.Origin												= "RV"
										invoked.AccumulationType									= "D"
										invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + ReceivablePaymentRel.PaymentString
										invoked.GeneralLedgerAccount								= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
										invoked.Description											= "Batch " + ReceivablePaymentHeader + " Prepayment Tax Output Account"
										invoked.BypassStructureRelationEdit							= true 
										invoked.DistributionAmount.CurrencyAmount					= LocalPrepaymentTaxAmount * -1
										invoked.OriginalCurrency									= ReceivablePaymentRel.OriginalCurrency
										invoked.CurrencyRate										= ReceivablePaymentRel.CurrencyRate
										invoked.Status												= 2
										invoked.DistributionAmount.ExchangeDate						= ReceivablePaymentRel.DepositDate
										invoked.TransactionDate										= GeneralLedgerDate
										invoked.GeneralLedgerDate									= GeneralLedgerDate
										invoked.TransType											= "P"
										invoked.Invoice												= ReceivablePaymentRel.PaymentNumber
										invoked.ReceivableCompanyDataGroup.Customer					= Customer
										invoked.TransientPrepaymentTax								= true
										invoked.TaxCode												= Company.PrepaymentTaxCode
										invoked.TransactionTaxableAmount							= LocalBeforeGSTAmount	* -1
										invoked.TransientTransactionTaxAmount						= LocalPrepaymentTaxAmount	* -1
	
									initialize CalculateTax
									invoke ReturnToMakerCreate ReceivableGLDistribution
										invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
										invoked.ReceivableCompanyGroup.OriginCompany				= Company
										invoked.ReceivableCompanyGroup.GlCompany					= Company
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentHeader.ReceivableProcessLevel
										invoked.BatchNumber											= ReceivablePaymentHeader
										invoked.SequenceNumber										= ReceivablePaymentRel.ReceivablePayment
										invoked.Origin												= "RV"
										invoked.AccumulationType									= "D"
										invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + ReceivablePaymentRel.PaymentString
										invoked.GeneralLedgerAccount								= Company.PrepaymentTaxControlGLAccount
										invoked.Description											= "Batch " + ReceivablePaymentHeader + " Prepayment Tax Control GL Account"
										invoked.BypassStructureRelationEdit							= true 
										invoked.DistributionAmount.CurrencyAmount					= LocalPrepaymentTaxAmount
										invoked.OriginalCurrency									= ReceivablePaymentRel.OriginalCurrency
										invoked.CurrencyRate										= ReceivablePaymentRel.CurrencyRate
										invoked.Status												= 2
										invoked.DistributionAmount.ExchangeDate						= ReceivablePaymentRel.DepositDate
										invoked.TransactionDate										= GeneralLedgerDate
										invoked.GeneralLedgerDate									= GeneralLedgerDate
										invoked.TransType											= "P"
										invoked.Invoice												= ReceivablePaymentRel.PaymentNumber
										invoked.ReceivableCompanyDataGroup.Customer					= Customer
										invoked.TransientPrepaymentTax								= false
		
						make transition to ReleasedRtm

				BillBackAllAdjustments is an Instance Action 
					valid when (IsCustomerPayment) 			 
					Action Rules
						for each ReceivableApplicationRel
							if  (!each.ReceivableApplication.Reverse
							and  !each.ReceivableApplication.ApplicationSource.ReversalOfApplications)
								for each each.ReceivableApplicationAdjustmentRel
									if (each.AllowReturnToMaker
									and each.RTMPaymentAdjustmentRel not exists)
										invoke Create RTMPaymentAdjustment
											invoked.Company											= Company
											invoked.RTMPayment										= RTMPayment
											invoked.ReceivablePaymentHeader							= ReceivablePaymentHeader
											invoked.Customer										= Customer
											invoked.RTMPaymentAdjustment.DebitCompany				= each.Company
											invoked.RTMPaymentAdjustment.DebitType					= each.ReceivableApplication.TransType
											invoked.RTMPaymentAdjustment.DebitTransactionNumber		= each.ReceivableApplication.Invoice
											invoked.RTMPaymentAdjustment.DebitPaymentSequence		= each.ReceivableApplication.PaymentSeq
											invoked.RTMPaymentAdjustment.DebitBatchNumber			= each.ReceivableApplication.BatchNumber
											invoked.RTMPaymentAdjustment.ApplicationSequence		= each.ReceivableApplication.ApplicationSequence
											invoked.RTMPaymentAdjustment.AdjustmentSequence			= each.ReceivableApplicationAdjustment
											invoked.DebitCustomer									= Customer
											invoked.Description										= each.Description
											invoked.Amount											= each.CreditAdjustAmount

				CreateDistributionsFromNonARPayment is an Instance Action		
					default label is "DeriveDistributions"
					valid when (IsUnreleasedNonARPayment)
					Action Rules
						confirmation required
							"Original_\NonARPaymentDistributionsWillReplaceTheExistingDistributions"
						constraint (IsUnreleasedNonARPayment)
							"ActionIsValidOnlyForNonARPayments"
						invoke Delete UnreleasedNonARTypeRTMDistributionsRel
						include DeriveNonARPaymentDistributions

			ReleasedRtm is a State
				Purge is a Purge Action
					restricted
					Entrance Rules
						invoke Purge RTMPaymentAdjustmentRel
						
