AsyncActionInvocation is a BusinessClass
    owned by async
    prefix is AAINV
    stored in environment
    default label is "AsyncJobInvocation"

    Ontology
    	symbolic key is AsyncActionInvocation

	Patterns
        disable AsOfDateProcessing
        disable EffectiveDated
        disable Auditing
        implements CreateStamp
        implements DynamicCreation
        implements IncrementalReplication 
			indicator field is Archived
				replicate when false
					then set to true

    Persistent Fields
    
    	LastModTime					is TimeStamp				
    	AsyncActionInvocationStatus


    	Name 						is Alpha 80
    	Group 						is Alpha 40
    	Actor													
    	DataArea												
    	TimeToExec 					is TimeStamp				
    		default label is "TimeToExecute"
    	ActionParameters 			is DataView					
    	ImplementingClass 			is a BusinessView 			
    		default label is "Class"
		AsyncAction 				is a BusinessAction
			default label is "Action"
		InvokedFrom					is an AsyncActionInvocation
			delete ignored
		InvokedFromName 			is Alpha 80	


		AsyncActionRequest
			delete ignored
		AsyncActionTrigger
			delete ignored
			
    	StatusChanged			is TimeStamp	
		Started 				is TimeStamp	
		Finished 				is TimeStamp	
		FailureCode 			is an AsyncTriggerFailureCode
		Result 					is an AsyncException
		ErrorMessage 			is an AsyncException
		InitialStarted 			is TimeStamp	
		ElapsedRunningDuration  is Decimal size 10.0
		RunOnErrorAction		is an AsyncAction	
		RunOnErrorFailureCode	is an AsyncTriggerFailureCode
		RunOnErrorResult 		is an AsyncException
		RunOnErrorErrorMessage	is an AsyncException


    	Type				is Numeric size 1
    		States
	  			TaskStream		value is 1
	  				default label is "JobStream"
	  			TaskAction		value is 2
	  				default label is "Job"







		TriggerUniqueID is UniqueID
		
		Archived				is Boolean 

	Derived Fields

		BatchTaskId is a NativeField
			type is AlphaUpper size 30   

		CascadeDeleteConfirmationsMessage is a MessageField	
			"ReportsAssociatedWithThe_Job_ExecutionsWithinYourSelectedRange,IncludingReportsThatHaveBeenDistributedWillNotBeDeleted,ButTheDataNecessaryToGenerateNewReportsWillBe.ItWillNoLongerBePossibleToGenerateNewReportsForThose_Job_Executions."		

	Rule Blocks
	
		CascadeDeleteConfirmations
		
			if (DateRangeWithOffset.BeginDate entered)
				if (DateRangeWithOffset.DateRangeEndDate.EndDate entered) 
					confirmation required
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>Through<LocalCalculatedEndDate>.AreYouSureYouWishToProceed?"
				else
				if (DateRangeWithOffset.DateRangeEndDate.OffsetDays entered) 
					confirmation required
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>Through<DateRangeWithOffset.DateRangeEndDate.OffsetDays>DaysPriorToCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"
				else
				if (DateRangeWithOffset.DateRangeEndDate.CurrentDate entered) 
					confirmation required
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>ThroughTheCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"
			else
				if (DateRangeWithOffset.DateRangeEndDate.EndDate entered) 
					confirmation required 
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThrough<LocalCalculatedEndDate>.AreYouSureYouWishToProceed?"  
				else
				if (DateRangeWithOffset.DateRangeEndDate.OffsetDays entered) 
					confirmation required
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThrough<DateRangeWithOffset.DateRangeEndDate.OffsetDays>DaysPriorToCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"  
				else
				if (DateRangeWithOffset.DateRangeEndDate.CurrentDate entered) 
					confirmation required
						"ThisActionWillDelete<LocalActor>'sJobExecutionsAndAssociatedHistoryWithFinishedDatesThroughTheCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"  

		CascadeDeleteConfirmationsAllActors
		
			if (DateRangeWithOffset.BeginDate entered)
				if (DateRangeWithOffset.DateRangeEndDate.EndDate entered) 
					confirmation required
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>Through<LocalCalculatedEndDate>.AreYouSureYouWishToProceed?"
				else
				if (DateRangeWithOffset.DateRangeEndDate.OffsetDays entered) 
					confirmation required
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>Through<DateRangeWithOffset.DateRangeEndDate.OffsetDays>DaysPriorToCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"
				else
				if (DateRangeWithOffset.DateRangeEndDate.CurrentDate entered) 
					confirmation required
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThatAreWithinADateRangeOf<DateRangeWithOffset.BeginDate>ThroughTheCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"
			else
				if (DateRangeWithOffset.DateRangeEndDate.EndDate entered) 
					confirmation required 
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThrough<LocalCalculatedEndDate>.AreYouSureYouWishToProceed?"  
				else
				if (DateRangeWithOffset.DateRangeEndDate.OffsetDays entered) 
					confirmation required
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThrough<DateRangeWithOffset.DateRangeEndDate.OffsetDays>DaysPriorToCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"  
				else
				if (DateRangeWithOffset.DateRangeEndDate.CurrentDate entered) 
					confirmation required
						"ThisActionWillDeleteJobExecutionsAndAssociatedHistoryWithFinishedDatesThroughTheCurrentTimeWhenTheActionExecutes.AreYouSureYouWishToProceed?"

	Sets

		ByActorDataAreaStatusLastModTime
			indexed
			Sort Order
				Actor
				DataArea
				AsyncActionInvocationStatus
				LastModTime descending
				AsyncActionInvocation

		ByDataAreaStatusLastModTime
			indexed
			Sort Order
				DataArea
				AsyncActionInvocationStatus
				LastModTime descending
				AsyncActionInvocation                          

		ByAsyncActionRequestTrigger
			indexed
			Sort Order
				AsyncActionRequest
				TriggerUniqueID

		ByInvokedFrom
			indexed
			Sort Order
				InvokedFrom
			    AsyncActionInvocation				


	Relations

		ActionResultRel
			one-to-many relation to ActionResult	
			Field Mapping uses ByAsyncActionInvocationResult
				related.AsyncActionInvocation = AsyncActionInvocation
				
		InvokedChildrenRel
			one-to-many relation to AsyncActionInvocation
			Field Mapping uses ByInvokedFrom
				related.InvokedFrom = AsyncActionInvocation 

		InvokedByParentRel
			one-to-one relation to AsyncActionInvocation
			Field Mapping uses symbolic key
				related.AsyncActionInvocation = InvokedFrom 




		ActionRequestRel							
			one-to-one relation to AsyncActionRequest 
			Field Mapping uses symbolic key
				related.AsyncActionRequest = AsyncActionRequest
				
		UnfinishedInvokedActionRequestsOrTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByInvokedFrom
				related.InvokedFrom = AsyncActionRequest 
			Instance Selection
				where (related.NotSuccessfullyCompleted)

		ActionTriggerRel
			one-to-one relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequestTriggerID
				related.AsyncActionRequest = AsyncActionRequest
				related.UniqueID = TriggerUniqueID
  				
		CheckPointRel
			default label is "CheckpointRelation"

			one-to-many relation to CheckPoint	
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
				related.AsyncActionTrigger = AsyncActionTrigger
			Instance Selection
				where (related.BusinessView = ImplementingClass
				and    related.BusinessAction = AsyncAction)
							
	Conditions
		InvokingParentExists
			when (InvokedByParentRel exists)

		InvokedChildrenExist
			when (InvokedChildrenRel exists)
			
		HasActionResults
			default label is "ActionResultsExist"
 			when (ActionResultRel exists)
 			
 		HasStreamResults
 			default label is untranslatable
 			when (ActionResultRel exists and Type.TaskStream)
 			
 		HasTaskResult
 			default label is untranslatable
 			when (ActionResultRel exists and !Type.TaskStream)

		InvokedFromButInvokingParentDoesNotExist
			when (InvokedFrom entered and !InvokingParentExists)
			
		DisplayStarted
			restricted
			when ((AsyncActionInvocationStatus.InProgress)
			or    (AsyncActionInvocationStatus.LostWhileInProgress)
			or    (AsyncActionInvocationStatus.TerminatedAbnormally)
			or    (AsyncActionInvocationStatus.Finished)
			or    (AsyncActionInvocationStatus.InRetry))

		DisplayFinished
			restricted
			when  (AsyncActionInvocationStatus.Finished)

		DisplayNextTimeToExecute
			restricted
			when (AsyncActionInvocationStatus.PendingScheduling)

		DisplayJobRequestedStartTime
			restricted 
			when ((AsyncActionInvocationStatus.Queued)
			or    (AsyncActionInvocationStatus.PendingStart)
			or    (AsyncActionInvocationStatus.LostWhilePending)
			or    (AsyncActionInvocationStatus.FailedToStart)
			or    (AsyncActionInvocationStatus.InProgress)
			or    (AsyncActionInvocationStatus.LostWhileInProgress)
			or    (AsyncActionInvocationStatus.TerminatedAbnormally)
			or    (AsyncActionInvocationStatus.InRetry))
			
		HasRunOnErrorAction
			default label is "RunOnErrorEntered"
			when (RunOnErrorAction.ActionEntered)
			
		CanRequeueTerminatedAbnormally
			restricted
			default label is untranslatable
			when (InTerminatedAbnormallyStateWithTriggerNoCheckPoint and not HasRunOnErrorAction)

		ActionRequestExists
			when (ActionRequestRel.exists)

		InErrorState
			restricted
    		when ((AsyncActionInvocationStatus.LostWhilePending) 
    		or    (AsyncActionInvocationStatus.FailedToStart) 
    		or    (AsyncActionInvocationStatus.LostWhileInProgress) 
    		or    (AsyncActionInvocationStatus.TerminatedAbnormally))

    	InTerminatedAbnormallyState
    		restricted
    		when (AsyncActionInvocationStatus.TerminatedAbnormally)
    		
       	InLostWhilePendingState
    		restricted
    		when (AsyncActionInvocationStatus.LostWhilePending) 

    	InFailedToStartState
    		restricted
    		when (AsyncActionInvocationStatus.FailedToStart) 

    	InLostWhileInProgressState
    		restricted
    		when (AsyncActionInvocationStatus.LostWhileInProgress) 

    	InWarningState
    		restricted
    		when (AsyncActionInvocationStatus.InRetry)

    	InGoodState
    		restricted
    		when (AsyncActionInvocationStatus.Finished)

    	InErrorStateWithCheckPoint	
    		restricted
    		when ((InErrorState) and (CheckPointRel exists) and (CheckPointRel.CanReschedule)) //added CanReschedule condition because Checkpoint.Restart action has "valid when (CanReschedule)"

    	InTerminatedAbnormallyStateWithTriggerNoCheckPoint	
    		restricted
    		when ((InTerminatedAbnormallyState) and (CheckPointRel not exists) and (ActionTriggerRel exists) and (not ActionTriggerRel.IsTriggerAllocated))  //added not ActionTriggerRel.IsTriggerAllocated condition because ActionTriggerRel.TerminatedAbnormally.Requeue action has "valid when (not IsTriggerAllocated)"
    			
    	InLostWhilePendingStateWithTriggerNoCheckPoint
    		restricted
    		when ((InLostWhilePendingState) and (CheckPointRel not exists) and (ActionTriggerRel exists)) 
    			
    	InFailedToStartStateWithTriggerNoCheckPoint
    		restricted
    		when ((InFailedToStartState) and (CheckPointRel not exists) and (ActionTriggerRel exists)) 
    			
    	InLostWhileInProgressStateWithTriggerNoCheckPoint
    		restricted
    		when ((InLostWhileInProgressState) and (CheckPointRel not exists) and (ActionTriggerRel exists)) 

    	NonParameterizedParameterFormToDisplay
    		restricted
			when ((!AsyncAction.IsParameterized) and (BatchTaskId != blank))

		NoNonParameterizedParameterFormToDisplay
			restricted
			when ((!AsyncAction.IsParameterized) and (!NonParameterizedParameterFormToDisplay))


	Actions
		Create is a Create Action
			restricted
			bypass field rules		

		Update is an Update Action
			restricted
			bypass field rules	

		DeleteInternal is a Delete Action
			restricted		
	
		Delete is a Delete Action
			Action Rules
				constraint (ActionTriggerRel not exists)
    						"RelatedActionTriggerExistsCannotDelete"		
				
				if (AsyncActionTrigger = blank)
					constraint (ActionRequestRel not exists or !ActionRequestRel.PendingScheduling)
   						"RelatedActionRequestExistsCannotDelete"
    						
				constraint (CheckPointRel not exists)
    						"RelatedCheckpointExistsCannotDelete"


        CascadeDelete is an Instance Action
            
			Action Rules




			




				constraint (UnfinishedInvokedActionRequestsOrTriggersRel not exists)
    						"UnfinishedRelatedActionRequestOrTriggerExists,CannotDelete"		






				constraint (AsyncActionInvocationStatus.Finished)
					"ThisActionIsOnlyAllowedForFinishedJobs"





					
 				confirmation required
					"ThisActionWillDeleteRecordOfThisJobExecutionAndAssociatedHistory.ExistingReportsAssociatedWithThisJobExecution,IncludingReportsThatHaveBeenDistributedToOtherUsers,WillNotBeDeleted,ButTheDataNecessaryToGenerateNewReportsWillBeDeleted.ItWillNoLongerBePossibleToGenerateNewReports.AreYouSureYouWantToDoThisCascadeDelete?"

				for each ActionResultRel
					if (each.ParentActionResult !entered)
						invoke CascadeDelete each 
					
			Exit Rules
				invoke DeleteInternal
					resume on error


        CascadeDeleteByRangeForSpecifiedActor is a Set Action
            default label is "CascadeDeleteByRangeForSpecifiedUser"
            run in background

            completion message is "CascadeDeleteByRangeForSpecifiedUserSubmitted"
            
            Parameters
            	Actor
            	DateRangeWithOffset

            Parameter Rules

				Actor
					required
            		LocalActor = Actor
					
            	DateRangeWithOffset
            		required
            		
            		LocalCalculatedEndDate = DateRangeWithOffset.DateRangeEndDate.CalculatedEndDate

					include CascadeDeleteConfirmations

			Local Fields
				LocalCalculatedEndDate is TimeStamp
				LocalActor	is Actor
			
            Instance Selection
                where (false)

            Action Rules
                Empty Set Rules

                    invoke CascadeDeleteByDateRange
                    	invoked.PrmActor		= LocalActor
                    	invoked.PrmBeginDate	= DateRangeWithOffset.BeginDate
                    	invoked.PrmEndDate		= LocalCalculatedEndDate


        CascadeDeleteByRange is a Set Action
            default label is "CascadeDeleteByRangeForCurrentUser"
            run in background

            completion message is "CascadeDeleteByRangeForCurrentUserSubmitted"

            Parameters
				DateRangeWithOffset

					
            Parameter Rules
            
            	DateRangeWithOffset
            		required
					LocalActor = actor	
					
            		LocalCalculatedEndDate = DateRangeWithOffset.DateRangeEndDate.CalculatedEndDate
            		
					include CascadeDeleteConfirmations

			Local Fields
				LocalCalculatedEndDate is TimeStamp
				LocalActor	is Actor
			
            Instance Selection
                where (false)

            Action Rules
		                
                Empty Set Rules

                    invoke CascadeDeleteByDateRange
                    	invoked.PrmActor		= LocalActor
                    	invoked.PrmBeginDate	= DateRangeWithOffset.BeginDate
                    	invoked.PrmEndDate		= LocalCalculatedEndDate






        CascadeDeleteByDateRange is a Set Action
            restricted
            run in background

            Parameters
            	PrmActor		is Actor
					default label is "Actor"
            	PrmBeginDate	is TimeStamp
					default label is "BeginDate"
            	PrmEndDate		is TimeStamp
					default label is "EndDate"
            	
            Instance Selection
 				where (DataArea = parentcontext.dataarea
				and    Actor	= PrmActor
				and    AsyncActionInvocationStatus.Finished
				and    Finished >= PrmBeginDate
				and    Finished <= PrmEndDate)

 			Sort Order
				DataArea
				Actor
				AsyncActionInvocationStatus
				Finished
 
            Action Rules

                Instance Rules




					if (UnfinishedInvokedActionRequestsOrTriggersRel not exists)
          				invoke CascadeDelete


		PurgeByDateRangeForAllUsers is a Set Action
            run in background

            completion message is "PurgeByDateRangeForAllUsersSubmitted"

            Parameters
				DateRangeWithOffset
					
            Parameter Rules
            
            	DateRangeWithOffset
            		required
					
            		LocalCalculatedEndDate = DateRangeWithOffset.DateRangeEndDate.CalculatedEndDate
            		
					include CascadeDeleteConfirmationsAllActors

			Local Fields
				LocalCalculatedEndDate is TimeStamp
				
			Sort Order is ByDataAreaStatusLastModTime
			
			Instance Selection
 				where (DataArea = parentcontext.dataarea
				and    AsyncActionInvocationStatus.Finished
				and    LastModTime <= LocalCalculatedEndDate
				and    Finished >= DateRangeWithOffset.BeginDate
				and    Finished <= LocalCalculatedEndDate)

            Action Rules
               
                Instance Rules




					if (UnfinishedInvokedActionRequestsOrTriggersRel not exists)
          				invoke CascadeDelete


		TriggerInvocationDelete is an Instance Action	
			restricted
			
			Action Rules





				if (((ActionTriggerRel not exists) or (ActionTriggerRel exists and ActionTriggerRel.Status = 8))	

				and (not HasActionResults)
				and (CheckPointRel not exists))	
					invoke DeleteInternal		

		RequestInvocationDelete is an Instance Action	
			restricted
			
			Action Rules

				if (ActionRequestRel not exists)	


					invoke DeleteInternal		
