VertexConfigVersion is a BusinessClass	
    owned by tx
    prefix is VtxDt

    Ontology
        symbolic key is VertexConfigVersion  

	Patterns
        disable EffectiveDated
		disable Auditing
		implements CreateStamp
		implements UpdateStamp

    Attach Rules


		constraint (TrustedId entered
		or          SecuredTrustedId entered)	
			"TrustedIdRequired"
			
	Persistent Fields
		UserName            		is Alpha 64	
		Password            		is Password	
		ConfirmPassword				is Password
		TrustedId           		is Alpha 16
		SecuredTrustedId			is a XMLElementPassword			  
		ConfidenceIndicatorLimit	is Numeric 3
		ReleaseNotes				is Alpha 400	
		VertexCentralURL   			is Alpha 100
		WsdlURL 					is Alpha 100	 
		EndPoint 					is Alpha 100	 
		NameSpace 					is Alpha 100
			default label is "Description"
		ReleaseComments				is a CommentText
		EnableUserTemplate			is Boolean		

		VertexLicense		    is Numeric 1		
			default label is "RequestUsedToValidate"
			States
				Both		value is 0
				Supply		value is 1
				Procurement	value is 2				
		ValidationPostalAddress		is a PostalAddressV2 
		VertexAccessType		is Numeric 1	   			
			States
				Basic		value is 0
				OAuth		value is 1	


	Local Fields

		VertexResponse 				is a SEnvelopeVertex
		ReturnedTaxAreaId			is like TaxCode
		ReturnedTaxRate				is a ChrgRate
		ReturnedTaxAmount			is an InternationalAmount		
		ResultsCount				is Numeric 3	
		WebServiceError 			is Boolean
		WebServiceErrorMessage 		is Text

		LocalTableHeaderDesc		is Text
		RequestName 				is Alpha 30


		PassFail  					is Alpha 1
    		States
    			Passed	value is "P"
    			Failed	value is "F" 
    	Validate  					is Alpha 1
    		States
    			CalculateTax	value is "C"
    			LookupTaxAreas	value is "L" 		      



		HttpStatusCode 			is Numeric 3
		ExceptionType			is Text	 
		MyHTTPInfo 				is a HTTPInfo
		MyVertexError			is a VertexEnvelopeError



		CalculateTax							
		Trigger					is Alpha 1		
		AllDone					is Boolean		
		PostalAddress			is a PostalAddressV2 
			holds pii
		CompletionMessage		is Alpha size 200	
		PasswordTypeUsed		is Numeric 1		
			States
				TextValue		value is 0
				EncryptedValue	value is 1
		CommentText 			is Text				
		CapturedXml				is Text			
		LocalDisplayPassFail	is a CommentText
		CheckHttpStatusCode     is Alpha 1			
            States
            	Unknown			  value is "0"
                Informational	  value is "1"	
				Successful        value is "2"	
				Redirection		  value is "3"	
				ClientError       value is "4"	
				ServerError       value is "5"  
	Transient Fields
		ReleaseNotesShort is Alpha 80
			derive value from ReleaseNotes


		RequestDesc is Text
		TransientSecuredTrustedId is Password  
		ClearValidationAddress         is Boolean		


    Field Rules

























				
	Conditions
		VertexVersion7
			when (VertexConfigVersion.Version[1:1]	= "7")		
		VertexVersion8
			when (VertexConfigVersion.Version[1:1]	= "8")					
		VertexVersion9
			when (VertexConfigVersion.Version[1:1]	= "9")		
		CapturedXmlEntered
			when (TaxLogHeaderRelExist)

		TrustedIdEntered  									
			when (TrustedId entered
			or    SecuredTrustedId entered)			
		TrustedIdNotEntered  
			when (TrustedId not entered
			and   SecuredTrustedId not entered)			
		VertexConfigTestingMode							
			when (TaxConfigurationRel.TestingMode)
		RequestDescEntered
			when (RequestDesc entered)	
		EncryptedPasswordEntered						
			when (SecuredTrustedId entered)
		UnencryptedTrustedIdStillEntered  				
			when (TrustedId entered
			and   VertexVersion9)						
		UserNameOrPasswordEntered						
			when (UserName entered
			or	  Password entered)
			
    	TaxConfigurationVersionMustMatch				
			when (TaxConfigurationRel.ThirdParty.VertexOSeries
			and   VertexConfigRel.DefaultVersion.Version 		= VertexConfigVersion.Version
			and   VertexConfigRel.DefaultVersion.ServiceRelease	= VertexConfigVersion.ServiceRelease
			and   VertexConfigRel.DefaultVersion.ServerName 	= VertexConfigVersion.ServerName)	

    	TaxConfigurationVersionMatch					
			when (TaxConfigurationRel.ThirdParty.VertexOSeries
			and   VertexConfigRel.DefaultVersion.Version 		= VertexConfigVersion.Version)

    	TaxConfigurationReleaseMatch					
			when (TaxConfigurationRel.ThirdParty.VertexOSeries			
			and   VertexConfigRel.DefaultVersion.ServiceRelease	= VertexConfigVersion.ServiceRelease)
			
   		TaxConfigurationServiceNameMatch				
			when (TaxConfigurationRel.ThirdParty.VertexOSeries						
			and   VertexConfigRel.DefaultVersion.ServerName 	= VertexConfigVersion.ServerName)	

 		VersionSixSevenOrEight	
			when (VertexConfigVersion.Version[1:1]	= "6"		
			or	  VertexConfigVersion.Version[1:1]	= "7"
			or    VertexConfigVersion.Version[1:1]	= "8")		

		TaxLogHeaderRelExist 
			when (TaxLogHeaderRel exist)
		VertexCentralURLEntered								
			when (VertexCentralURL entered)		


		VertexCalcTaxOAuthRelExist						
			when (VertexCalcTax90OAuthRel exist)

		VertexLooiupTaxAreasOAuthRelExist				
			when (VertexLookup90OAuthRel exist)			

		Vertex90CalcTaxConfigParamForOAuthExist
			when (VertexCalcTax90ConfigParmOAuthRel exist)

		Vertex90LookupConfigParamForOAuthExist
			when (VertexLookupTaxAreas90RelConfigOAuthRel exist)	

		VertexAccessUsingOAuth
			when (VertexAccessType.OAuth)

	Relations
  		TaxConfigurationRel	
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= FinanceEnterpriseGroup		
				
  		VertexConfigRel	
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig			= FinanceEnterpriseGroup		 
								 



        Vertex7AccrualParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "ACCRUAL.WSI.WSDL" 

        Vertex7QuotationParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "QUOTATION.WSI.WSDL" 
                
        Vertex7InvoiceParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "INVOICE.WSI.WSDL" 

        Vertex7InvVerParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "INVOICEVERIFICATION.WSI.WSDL" 

       	Vertex7PurchOrderParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "PURCHASEORDERSERVICE.WSI.WSDL"

      	Vertex7LookupTaxAreaParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "LOOKUPTAXAREAS.WSI.WSDL"
                                                               					
 



        Vertex8AccrualParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "ACCRUAL80.WSI.WSDL" 
 
        Vertex8QuotationParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "QUOTATION80.WSI.WSDL" 
                
        Vertex8InvoiceParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "INVOICE80.WSI.WSDL" 

        Vertex8InvVerParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "INVOICEVERIFICATION80.WSI.WSDL" 

       	Vertex8PurchOrderParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "PURCHASEORDERSERVICE80.WSI.WSDL"

      	Vertex8LookupTaxAreaParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "LOOKUPTAXAREAS80.WSI.WSDL"
                



       	VertexCalculateTax90Rel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "VERTEXCALCULATETAX90.WSI.ENDPOINT"
 
      	VertexLookupTaxAreas90Rel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
                related.ConfigurationParameter.Name				= "VERTEXLOOKUPTAXAREAS90.WSI.ENDPOINT"

		TaxLogHeaderRel	 
			one-to-many relation to TaxLogHeader
			Field Mapping uses ByRelatedObjectUniqueID	
				related.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
			Instance Selection
				where (related.UniqueIdOfRelatedObject			= UniqueID
				or     related.RelatedObjectReference			= reference to this instance)
	


		VertexCalcTaxOAuthRel	 	 
				one-to-one relation to OAuth
				Field Mapping uses symbolic key
					related.OAuth			= "VertexCalculateTax90OAuth"

		VertexLookupTaxAreasOAuthRel	 	 
				one-to-one relation to OAuth
				Field Mapping uses symbolic key
					related.OAuth			= "VertexLookupTaxAreas90OAuth"



		VertexCalcTax90ConfigParmOAuthRel	  
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "VERTEXCALCULATETAX90OAUTH.WSI.ENDPOINT"

		VertexLookupTaxAreas90RelConfigOAuthRel	  
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "VERTEXLOOKUPTAXAREAS90OAUTH.WSI.ENDPOINT"

		VertexCalcTax90OAuthRel	 	 
			one-to-one relation to OAuth
			Field Mapping uses symbolic key
				related.OAuth			= "VertexCalculateTax90OAuth"

		VertexLookup90OAuthRel	 	 
			one-to-one relation to OAuth
			Field Mapping uses symbolic key
				related.OAuth			= "VertexLookupTaxAreas90OAuth"
	Derived Fields
		LookupTaxAreaValidationMsg is a MessageField	
			restricted
			"LookupTaxAreasVersion<DerivedVertexVersion>ValidationCompletedSuccessfully.ReturnedTaxAreaId:<ReturnedTaxAreaId>...<CurrentTimestamp>,<PasswordTypeUsed>" 

		CalculateTaxValidationMsg is a MessageField	
			restricted
			"CalculateTaxVersion<DerivedVertexVersion>,ValidationCompletedSuccessfully.ReturnedTaxAmount:<ReturnedTaxAmount>...<CurrentTimestamp>,<PasswordTypeUsed>"	 
			
		CurrentTimestamp is a DerivedField
			type is TimeStamp
			restricted
			return current timestamp

		CreateCompletionMessage is a DerivedField
			type is MessageField
			restricted
			if (PassFail.Failed)
				return ValidationUnSuccessfull	
			return ValidationSuccessfull

		ValidationSuccessfull is a MessageField
			restricted
			"CalculateTaxVersion<DerivedVertexVersion>,ConnectionValidation-<PassFail>...ReturnedTaxAmountIs:<ReturnedTaxAmount>;TaxRate...<ReturnedTaxRate>"

		ValidationUnSuccessfull is a MessageField
			restricted
			"ValidationFailed..."
									
		DisplayPassFailTable is a StringField	 
			type is RichText
			restricted
			TableHeader   
			TableColumnHeader1
			TableColumnHeader  
			DerivedPassFailText 
			TableEnd  

		VertexEncryptedPasswordEntered is a DerivedField			
			type is Boolean
			if (Password entered)									
				return true
			return false 	
									
		TableStyle is a StringField	 
			type is RichText
			"	<style>                                    "
			"	table {                                    "
			"		font-family: arial, sans-serif;        "
			"		border-collapse: collapse;             "
			"		width: 100%;                           "
			"	}                                          "
            "                                              "
			"	td, th {                                   "
			"		border: 1px solid #dddddd;             "
			"		text-align: left;                      "
			"		padding: 5px;                          "
			"	}                                          "
            "                                              "
			"	tr:nth-child(even) {                       "
			"		background-color: #dddddd;             "
			"	}                                          "
			"	</style>                                   "

		TableHeader is a StringField	 
			type is RichText
			"<pre>"

			"<table>                                        "
		TableColumnHeader1 is a StringField	 
			type is RichText
			" <h1> "
			"  <tr>                                          "

			"	<th colspan=3>"WebServiceErrorMessage"</th>  "
			"  </tr>                                         "
			" </h1> "
		TableColumnHeader is a StringField	 
			type is RichText
			"  <tr>                                          "
			"	<th>RequestName</th>                         "
			"	<th>Pass-Fail</th>                     		 "
			"	<th>RequestDescription</th>                  "
			"  </tr>                                         "
			
		DerivedPassFailText is a DerivedField
			type is Text
			if (PassFail.Passed)	
				return TableDetailPass
			return TableDetailFail
			
		TableDetailPass is a StringField	 
			type is RichText

			"  <tr>                                          "
			"	<td>" RequestName "</td>             		 "
			"	<td style=color:Green;font-weight: bold;>Pass</td>"		
			"	<td>Validation successfull...</td>  "				
			"  </tr>  "

		TableDetailFail is a StringField	 
			type is RichText

			"  <tr>                                          "
			"	<td>" RequestName "</td>             		 "
			"	<td style=color:Red;>Fail</td>               "					

			"	<td>" HttpStatusCode "</td>"	
			"	<td>" ExceptionType "</td>"	
			"	<td>" WebServiceErrorMessage "</td>"	
			"  </tr>                                         "	

		TableEnd is a StringField	 
			type is RichText
			"</table>                                        "
			"</pre>"	
			

		Release7Text is a MessageField
			"Version7Validated"	
		Release8Text is a MessageField
			"Version8Validate"		
		Release9Text is a MessageField	
			"Version9Validate"	
						
		ValidationMessageText is a MessageField
			"Validation-<PassFailText>"
		LookupTaxAreaRequestText is a MessageField
			"Lookup\Tax\Areas"	
		QuotationRequestText is a MessageField
			"QuotationRequest"
		PurchaseOrderRequestText is a MessageField
			"Purchase\OrderRequest"
		InvoiceRequestText is a MessageField
			"InvoiceRequest"
		InvoiceVerificationText is a MessageField
			"Invoice\Verification\Request"
		AccrualRequestText is a MessageField
			"AccrualRequest"
		ValidationFailedMsg is a MessageField
			"***Error..._\ValidationFailed"	
		PassFailText is a DerivedField			
			type is MessageField
			if (PassFail.Passed)	
				return PassText
			else
				return FailText
			return blank
								
		PassText is a MessageField
			"Passed"	
		FailText is a MessageField
			"Failed"	
		DerivedVertexVersion is a DerivedField
			type is Alpha 1
			return VertexConfigVersion.Version[1:1]	
			
		TrustedIdExists is a DerivedField
			type is Boolean
			if (TrustedId entered)	
				return true

			return false


		VertexEncryptedTrustedId is a DerivedField							
			type is Password
			if (TrustedId entered)
				return TrustedId									
				
		VertexEncryptedTrustedIdEntered is a DerivedField					

			type is Boolean
			if (SecuredTrustedId entered)										
				return true
			return false 	
			
		EnteredLabel is a DerivedField		
			type is MessageField
			if (EncryptedPasswordEntered)	
				return EnteredLabelText
			else
				return NotEnteredLabelText
			return blank
			
		EnteredLabelText is a MessageField
			"Entered"	
		NotEnteredLabelText is a MessageField
			"NotEntered"	


		DerivedEnteredTrustedIdText is a DerivedField					 
			type is Alpha 45
			default label is untranslatable			
			if (SecuredTrustedId entered
			or TrustedId entered)										 
				return TrustedIdEnteredText
			return "<" + TrustedNotEnteredText + ">" 	
		TrustedIdEnteredText is a MessageField
			"*************************************"	
		TrustedNotEnteredText is a MessageField
			"UseActionToEnterOrUpdatePassword"	


		ReturnedErrorNumberText is a MessageField		
			"ReturnedErrorNumber:"	
		ReturnedErrorMessageText is a MessageField		
			"ReturnedErrorMessage:"	
		








		VertexLinkMsg is a DerivedField	  							
			type is MessageField
			default label is untranslatable	
			restricted	
			if (TaxConfigurationRel.ThirdParty.VertexOSeries)					 
				return "<" + PutVertexLinkHereMsg + ">"			 
			return blank

		PutVertexLinkHereMsg is a MessageField
			"PutVertexLinkHere"

		CalcTaxPasswordHiddenIfEntered is a DerivedField
			type is Alpha 120
			if (VertexCalcTax90OAuthRel.ResourcePassword entered)
				return "***************************************************"
			else
				return blank


	Form Invokes

		VertexCalculateTax90OAuthRecord
			if (VertexCalcTax90OAuthRel exists)
				invoke Update VertexCalcTax90OAuthRel
			else
				invoke Create OAuth	 
					invoked.OAuth				= "VertexCalculateTax90OAuth"
					invoked.Type 				= 5  

		VertexLookupTaxAreas90OAuthRecord
			if (VertexLookup90OAuthRel exists)
				invoke Update VertexLookup90OAuthRel
			else
				invoke Create OAuth	 
					invoked.OAuth				= "VertexLookupTaxAreas90OAuth"
					invoked.Type 				= 5  




		Vertex90CalcTaxConfigParamForOAuth  
			if (Vertex90CalcTaxConfigParamForOAuthExist)
				invoke Update VertexCalcTax90ConfigParmOAuthRel
			else
				invoke Create ConfigurationParameter	 
        			invoked.ConfigurationParameter.ConfigurationID	= "config"
					invoked.ConfigurationParameter.Name				= "VERTEXCALCULATETAX90OAUTH.WSI.ENDPOINT"    
					invoked.Length									= blank		             	
        			invoked.Value 									= VertexLinkMsg	 
        							

		Vertex90LookupConfigParamForOAuth 		
			if (Vertex90LookupConfigParamForOAuthExist)
				invoke Update VertexLookupTaxAreas90RelConfigOAuthRel
			else
				invoke Create ConfigurationParameter	
        			invoked.ConfigurationParameter.ConfigurationID	= "config"
					invoked.ConfigurationParameter.Name				= "VERTEXLOOKUPTAXAREAS90OAUTH.WSI.ENDPOINT"  
					invoked.Length									= blank		             	
        			invoked.Value 									= VertexLinkMsg	 

	Rule Blocks



		ParseWebserviceError
			HttpStatusCode = MyHTTPInfo.StatusCode
			if (VertexConfigVersion.Version[1:1]	= "9")				
				WebServiceErrorMessage = CalculateTax.Faultstring 
				if (WebServiceErrorMessage not entered)
					WebServiceErrorMessage = CalculateTax.RootCause
				ExceptionType = CalculateTax.ExceptionType		
			else			
				invoke ParseError VertexErrorParser 
					invoked.ErrorResponse = MyHTTPInfo.ResponseBody 
					MyVertexError = result.VertexEnvelopeError	 
				
				for each MyVertexError.VertexEnvelopeErrorBody set
					for each each.VertexEnvelopeErrorBodyFault set
						WebServiceErrorMessage = each.Faultstring 
						for each each.VertexEnvelopeErrorBodyFaultDetail set
							for each each.VertexEnvelopeErrorBodyFaultDetailException set
								if (WebServiceErrorMessage not entered)
									WebServiceErrorMessage = each.RootCause
								ExceptionType = each.ExceptionType	

		
		CreateTaxLogHeader


			if (TaxConfigurationRel.WriteToLogFile)
	            invoke Create TaxLogHeader
	                invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup	 
	                invoked.TaxLogHeader				= "ValidateVertexConnection:" + Validate + ":" + CurrentTimestamp
	                invoked.LogThirdParty				= TaxConfigurationRel.ThirdParty
					invoked.LogPostToJournal		    = false 		  
	  				invoked.LogCreatedTimestamp 	 	= current timestamp 	  
					invoked.LogCallingRoutine		 	= "VertexConfigVersion"
					invoked.UniqueIdOfRelatedObject     = UniqueID
					invoked.MessageRichText				= LocalDisplayPassFail + CalculateTax.DisplayMonitor  
	  				invoked.HTTPInfo					= CapturedXml	


		CallCalculateTaxV9
			CalculateTax.TransactionType			= "S"	 				
			CalculateTax.TaxCode					= "241231070"
			CalculateTax.TaxableAmount				= "100.00"
			CalculateTax.Quantity					= 1
			CalculateTax.LineNumber					= 1
			CalculateTax.JurisdictionResultsKey		= blank			
			CalculateTax.RelatedObjectReference     = reference to this instance
			CalculateTax.System						= "TX"
			CalculateTax.CallingModule				= "VertexConfigVersion"			
			CalculateTax.TaxDate 					= current corporate date
			CalculateTax.InvoiceDate				= current corporate date
			CalculateTax.Invoice 					= "ValidateConnection"
			CalculateTax.UniqueIdOfRelatedObject	= UniqueID					
			CalculateTax.InputVertexRequest			= "Q"						
			CalculateTax.ValidationPostalAddress	= ValidationPostalAddress	
			CalculateTax.ValidateConnection			= true
			if (SecuredTrustedId entered)
				CalculateTax.PassedInTrustedId		= SecuredTrustedId 
			else	
				CalculateTax.PassedInTrustedId		= VertexEncryptedTrustedId						


			Trigger									= CalculateTax.ValidateVertexConnection
			CapturedXml								= CapturedXml + "<br>" + CalculateTax.CapturedXml		








			MyHTTPInfo								= CalculateTax.ReturnedHTTPInfo
			WebServiceError							= CalculateTax.WebServiceError 
			WebServiceErrorMessage					= CalculateTax.WebServiceErrorMessage

			CheckHttpStatusCode = MyHTTPInfo.StatusCode			
			if (WebServiceError
			or CalculateTax.MyHTTPInfo.Failed	
			or CalculateTax.OutputErrorNumber entered)

				PassFail 		= "F"	
			else
				PassFail 		= "P"

			if (WebServiceError										
			and TaxConfigurationRel.DisplayWebserviceErrorXml)
				WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml		
				constraint (!CalculateTax.MyHTTPInfo.Failed)
					"WebserviceError:<WebServiceErrorMessage>"
				constraint (!WebServiceError)
					"WebserviceError:<WebServiceErrorMessage>"						
			
			if (CalculateTax.MyHTTPInfo.Failed
			and TaxConfigurationRel.DisplayWebserviceErrorXml)
				constraint (!CalculateTax.MyHTTPInfo.Failed)
					"Request:<MyHTTPInfo.RequestBody>,Response:<MyHTTPInfo.ResponseBody>"


			LocalTableHeaderDesc = Release9Text
			if (CalculateTax.ValidateVertexRequest.PurchaseOrder)			

				RequestName 	     = PurchaseOrderRequestText + "-UT"	 
			else
				RequestName 	     = QuotationRequestText + "-UT"	 	 
			LocalDisplayPassFail = LocalDisplayPassFail + DisplayPassFailTable + "<br>" 


		ValidateVersion9	
			constraint (TrustedIdEntered)						
				"TrustedIdRequired.PleaseEnter,AndTryAgain."
			constraint (TaxConfigurationVersionMustMatch)			
				"TaxConfigurationDoesNotMatch;ChangeToThisVersionAndTryAgain"

			if (Validate.CalculateTax)	
				if (VertexAccessUsingOAuth) 	
					constraint (VertexCalcTaxOAuthRelExist)	
						"O_\AuthRecordForCalculateTaxDoesNotExist"
					constraint (Vertex90CalcTaxConfigParamForOAuthExist)
						"ConfigurationParameterForWsiO_\AuthRecordForCalculateTaxDoesNotExist"









				WebServiceError = false
				initialize WebServiceErrorMessage
				initialize HttpStatusCode

				if (VertexLicense.Both
				or  VertexLicense.Supply)
					CalculateTax.ValidateVertexRequest = "Q"
					include CallCalculateTaxV9

				if (VertexLicense.Both
				or VertexLicense.Procurement)
					CalculateTax.ValidateVertexRequest = "P"
					include CallCalculateTaxV9










































				PasswordTypeUsed							= CalculateTax.PasswordTypeUsed		
				if  (EncryptedPasswordEntered
				and !PasswordTypeUsed.EncryptedValue)		 
					PasswordTypeUsed						= 1
				



			
			if (Validate.LookupTaxAreas)	
				if (VertexAccessUsingOAuth) 
					constraint (VertexLooiupTaxAreasOAuthRelExist)		
						"O_\AuthRecordForLookupTaxAreasDoesNotExist"	
					constraint (Vertex90LookupConfigParamForOAuthExist)	
						"ConfigurationParameterForWsiOO_\AuthRecordForLookupTaxAreasDoesNotExist" 		


				RequestName 								= LookupTaxAreaRequestText + "-UT"	 
				CalculateTax.CallingModule					= "VertexConfigVersion"	
				CalculateTax.RelatedObjectReference			= reference to this instance



				CalculateTax.InFinanceEnterpriseGroup		= FinanceEnterpriseGroup		
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID
				CalculateTax.TaxDate						= current corporate date

				PostalAddress.DeliveryAddress.AddressLine1 	= "380 Saint Peter Street" 	 					
				PostalAddress.Municipality  				= "Saint Paul"	
				PostalAddress.StateProvince 				= "MN"
				PostalAddress.PostalCode					= "55102"
				PostalAddress.County 						= "Ramsey"
				PostalAddress.Country 						= "US"
				CalculateTax.PostalAddress					= PostalAddress		
				CalculateTax.Function            			= "G"	
				CalculateTax.LocalVertexRequest				= "L"	
				CalculateTax.ValidateConnection				= true
				if (SecuredTrustedId entered)
					CalculateTax.PassedInTrustedId			= SecuredTrustedId 			
				else	
					CalculateTax.PassedInTrustedId			= VertexEncryptedTrustedId 	
				
				Trigger										= CalculateTax.CallVertexTaxAreaLookupUT  
				CapturedXml									= CalculateTax.CapturedXml					
				MyHTTPInfo									= CalculateTax.ReturnedHTTPInfo
				WebServiceError								= CalculateTax.WebServiceError 
				WebServiceErrorMessage						= CalculateTax.WebServiceErrorMessage
				PasswordTypeUsed							= CalculateTax.PasswordTypeUsed				
				

			if (MyHTTPInfo.Failed
			or WebServiceError)



				PassFail 		= "F"
				include ParseWebserviceError		
				ReleaseNotes	= ValidationFailedMsg
				if (CalculateTax.OutputErrorNumber entered)
					ReleaseNotes = ReleaseNotes + ReturnedErrorNumberText + CalculateTax.OutputErrorNumber + ReturnedErrorMessageText + CalculateTax.OutputErrorMessage
				RequestDesc = CapturedXml	
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)
					ReleaseComments = ReleaseComments + "<br>" + CapturedXml + WebServiceErrorMessage	
					constraint (PassFail.Passed)
						"Error:<WebServiceErrorMessage>,<CapturedXml>"
			else

				initialize ReleaseNotes	
				PassFail 		= "P"
				if (Validate.CalculateTax)			
					ResultsCount							= CalculateTax.ResultsCount
					ReturnedTaxAmount 						= CalculateTax.ReturnedTotalTax	
					ReturnedTaxRate 						= CalculateTax.OutputTaxRate


					if (ReleaseNotes not entered)
						ReleaseNotes 						= CalculateTaxValidationMsg
					else 
						ReleaseNotes = ReleaseNotes + "=============" + CalculateTax.DisplayMonitor + "Xml:" + CapturedXml	+ "<br>"		






				else		
				if (Validate.LookupTaxAreas)
					ReturnedTaxAreaId 						= CalculateTax.OutputGeoCode
					if (ReturnedTaxAreaId entered
					and ReleaseNotes not entered)
						ReleaseNotes 						= LookupTaxAreaValidationMsg						 	
																																		

	Actions


		Create is a Create Action
		Update is an Update Action
			Action Rules
				if (ClearValidationAddress)				
					initialize ValidationPostalAddress   	
					ClearValidationAddress = false		
		Delete is a Delete Action
		

		ValidateLookupTaxAreaConnection is an Instance Action

			completion message is "ConnectionValidation-<PassFail>...TaxAreaIdReturnedIs:<ReturnedTaxAreaId>"		
			Action Rules
				initialize RequestDesc		
				if (VertexConfigVersion.Version[1:1]	= "9")			
					Validate = "L"
					include ValidateVersion9
				else								
				if (VertexConfigVersion.Version[1:1]	= "8")	
					LocalTableHeaderDesc = Release8Text	 



					invoke LookupTaxAreas80 LookupTaxAreas80
						invoked.Login.TrustedId												= TrustedId

						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress1 	= "380 Saint Peter Street" 	 
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.City 			= "Saint Paul"	
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.MainDivision 	= "MN"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.SubDivision 		= "Ramsey"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.PostalCode 		= "55102"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.Country 			= "US"
						invoked.TaxAreaRequest.TaxAreaLookup.AsOfDate 						= current corporate date
						VertexResponse = result.SEnvelopeVertex					
				else

					LocalTableHeaderDesc = Release7Text
					PassFail = "P"
					invoke LookupTaxAreas70 LookupTaxAreas


						invoked.Login.TrustedId												= TrustedId

						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress1 	= "380 Saint Peter Street" 	 
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress2 	= blank
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.City 			= "Saint Paul"	
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.MainDivision 	= "MN"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.SubDivision 		= "Ramsey"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.PostalCode 		= "55102"
						invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.Country 			= "US"
						invoked.TaxAreaRequest.TaxAreaLookup.AsOfDate 						= current corporate date

						VertexResponse = result.SEnvelopeVertex

				if (VertexConfigVersion.Version[1:1]	= "9")	
					include CreateTaxLogHeader					
					AllDone = true	
				else					



					for each VertexResponse.SEnvelopeSBodyVertex set					
						for each each.SEnvelopeSBodyVertexEnvelope set																
							for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponse set



								for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResult set
									ResultsCount 		= ResultsCount + 1
									ReturnedTaxAreaId 	= each.TaxAreaId
									if (ReturnedTaxAreaId entered
									and ReleaseNotes not entered)
										ReleaseNotes = LookupTaxAreaValidationMsg


		ValidateCalculateTaxConnection is an Instance Action


			completion message is "<CreateCompletionMessage>,<PasswordTypeUsed>"
			Local Fields
				LocalDisplayMonitor is RichText		
			Action Rules	
				PassFail = "P"
				WebServiceError = false
				initialize WebServiceErrorMessage  
				initialize RequestDesc		
				if (VertexConfigVersion.Version[1:1]	= "9")			
					Validate = "C"
					include ValidateVersion9
					LocalDisplayMonitor 				=  CalculateTax.DisplayMonitor	
				else	
				if (VertexConfigVersion.Version[1:1]	= "8")	
					LocalTableHeaderDesc = Release8Text	 



					invoke AccrualCall Accrual80
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message
							RequestName 	= AccrualRequestText	 
							RequestDesc		= ValidationMessageText
							PassFail 		= "F" 								
						invoked.Login.TrustedId												= TrustedId
						invoked.AccrualRequest.PostToJournal								= false											= TrustedId
						invoked.AccrualRequest.TransactionType 								= "PURCHASE"
						invoked.AccrualRequest.DocumentDate									= current corporate date		
						invoked.AccrualRequest.Buyer.Destination.TaxAreaId 					= "241231070"					
						invoked.AccrualRequest.LineItem.LineItemNumber						= "1"	
						invoked.AccrualRequest.LineItem.ExtendedPrice 						= "100.00"	
						VertexResponse = result.SEnvelopeVertex	
						MyHTTPInfo	   = result.MyHTTPInfo	
					if (!PassFail.Failed)
						invoke PurchaseOrderCall PurchaseOrderService80										
							resume on error
								WebServiceError = true
								WebServiceErrorMessage = error message
								RequestName 	= PurchaseOrderRequestText	 
								RequestDesc		= ValidationMessageText
								PassFail 		= "F" 						
							invoked.Login.TrustedId											= TrustedId
							invoked.PurchaseOrderRequest.TransactionType 					= "PURCHASE"
							invoked.PurchaseOrderRequest.DocumentDate						= current corporate date		
							invoked.PurchaseOrderRequest.Buyer.Destination.TaxAreaId		= "241231070"					
							invoked.PurchaseOrderRequest.LineItem.LineItemNumber			= "1"	
							invoked.PurchaseOrderRequest.LineItem.ExtendedPrice 			= "100.00"	
							VertexResponse = result.SEnvelopeVertex	
							MyHTTPInfo	   = result.MyHTTPInfo	
					if (!PassFail.Failed)
						invoke QuotationCall Quotation80
							invoked.Login.TrustedId											= TrustedId
							invoked.QuotationRequest.TransactionType 						= "SALE"
							invoked.QuotationRequest.DocumentDate							= current corporate date		
							invoked.QuotationRequest.Customer.Destination.TaxAreaId			= "241231070"					
							invoked.QuotationRequest.LineItem.LineItemNumber				= "1"	
							invoked.QuotationRequest.LineItem.ExtendedPrice 				= "100.00"	
							VertexResponse = result.SEnvelopeVertex	
							MyHTTPInfo	   = result.MyHTTPInfo	

				else

					LocalTableHeaderDesc = Release7Text
					PassFail = "P"
					invoke QuotationCall Quotation
						invoked.Login.TrustedId												= TrustedId
						invoked.QuotationRequest.TransactionType 							= "SALE"
						invoked.QuotationRequest.DocumentDate								= current corporate date		


























						invoked.QuotationRequest.Customer.Destination.TaxAreaId				= "241231070"					












						invoked.QuotationRequest.LineItem.LineItemNumber					= "1"	




						invoked.QuotationRequest.LineItem.ExtendedPrice 					= "100.00"	

						VertexResponse = result.SEnvelopeVertex
						MyHTTPInfo	   = result.MyHTTPInfo	

				if (VertexConfigVersion.Version[1:1]	= "9")	
					include CreateTaxLogHeader					
					AllDone = true
				else	
					WebServiceError = false
					initialize WebServiceErrorMessage
					initialize HttpStatusCode
					if (MyHTTPInfo.Failed)
						PassFail = "F"
						WebServiceError = true
						include ParseWebserviceError
							


				if (PassFail.Failed
				or WebServiceError)	
					ReleaseComments = ReleaseComments + DisplayPassFailTable 	
				else	
				if (VertexConfigVersion.Version[1:1]	= "9")	

					AllDone = true						
				else					



					for each VertexResponse.SEnvelopeSBodyVertex set					
						for each each.SEnvelopeSBodyVertexEnvelope set																
							for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponse set
								ResultsCount = ResultsCount + 1
								ReturnedTaxAmount 				= each.TotalTaxNum
								for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItem set
									for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItemTaxes set
										ReturnedTaxRate 		= ReturnedTaxRate + each.EffectiveRateNum
								if (ReturnedTaxRate entered
									and ReleaseNotes not entered)
										ReleaseNotes = CalculateTaxValidationMsg									
										 														
		LoadVertexConfigParameters is an Instance Action		 
			completion message is "<CompletionMessage>"	



			Parameters
				UpdateTrustedId is Boolean
				PrmTrustedId is a VertexTrustedId
					default label is "TrustedId"
				LoadCalcTaxConfigParameter is Boolean		 
					default label is "Load_\Calculate\Tax_\Configuration\Parameter"
				LoadLookupTaxAreasConfigParameter is Boolean
					default label is "Load_\Lookup\Tax\Areas_\Configuration\Parameter"
				VertexVersion is Alpha 1
					States
						Seven	value is "7"
						Eight	value is "8"
						Nine	value is "9"
				CalcTaxWsdlValue is Text		 
					default label is "Calculate\Tax_\U\R\LValue"				
				LookupTaxAreaWsdlValue is Text
					default label is "Lookup\Tax\Areas_\U\R\LValue"
			Parameter Rules
				VertexVersion
					initial value is "7"
					default to "7"		
			Action Rules



				if (UpdateTrustedId)
					if (TrustedId entered)
						TrustedId = PrmTrustedId



				if (LoadCalcTaxConfigParameter)					
					constraint (CalcTaxWsdlValue entered)
						"VertexURLForCalculateTaxRequired"	
				if (LoadLookupTaxAreasConfigParameter)						
					constraint (LookupTaxAreaWsdlValue entered)
						"VertexURLForLookupTaxAreasRequired"	



				if (VertexVersion.Seven)
					if (LoadLookupTaxAreasConfigParameter)						
						if (Vertex7LookupTaxAreaParamRel not exist)
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "LOOKUPTAXAREAS.WSI.WSDL"    	  
								invoked.Type									= blank
								invoked.Length									= blank  
								invoked.Value 									= LookupTaxAreaWsdlValue
							CompletionMessage = "ConfigurationParametersSuccessfullyCreated"
						else
							invoke Update Vertex7LookupTaxAreaParamRel	 
									invoked.Type								= blank
									invoked.Length								= blank 
									invoked.Value 								= LookupTaxAreaWsdlValue									
							CompletionMessage = "ConfigurationParameterAlreadyExists;ValueUpdated"						 		
							
					if (LoadCalcTaxConfigParameter)
						if (Vertex7AccrualParamRel exists)
							invoke Update Vertex7AccrualParamRel
								invoked.Value 									= CalcTaxWsdlValue
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "ACCRUAL.WSI.WSDL"  
								invoked.Length									= 300  
								invoked.Value 									= CalcTaxWsdlValue								
							
						if (Vertex7QuotationParamRel exists)
							invoke Update Vertex7QuotationParamRel
								invoked.Value 									= CalcTaxWsdlValue	 
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "QUOTATION.WSI.WSDL"  
								invoked.Length									= 300             	
								invoked.Value 									= CalcTaxWsdlValue

						if (Vertex7InvoiceParamRel exists)
							invoke Update Vertex7InvoiceParamRel
								invoked.Value 									= CalcTaxWsdlValue
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "INVOICE.WSI.WSDL"  
								invoked.Length									= 300  
								invoked.Value 									= CalcTaxWsdlValue									
								
						if (Vertex7PurchOrderParamRel exists)
							invoke Update Vertex7PurchOrderParamRel
								invoked.Value 									= CalcTaxWsdlValue	 					
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "PURCHASEORDERSERVICE.WSI.WSDL"  
								invoked.Length									= 300         
								invoked.Value 									= CalcTaxWsdlValue								
								
						if (Vertex7InvVerParamRel exists)
							invoke Update Vertex7InvVerParamRel
								invoked.Value 									= CalcTaxWsdlValue	 					
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "INVOICEVERIFICATION.WSI.WSDL"  
								invoked.Length									= 300
								invoked.Value 									= CalcTaxWsdlValue								
								
							CompletionMessage = "ConfigurationParameterAlreadyExists;ValueUpdated"	

				if (VertexVersion.Eight)



					if (LoadLookupTaxAreasConfigParameter)	
						if (Vertex8LookupTaxAreaParamRel exists)
							invoke Update Vertex8LookupTaxAreaParamRel
								invoked.Value 									= LookupTaxAreaWsdlValue							
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "LOOKUPTAXAREAS80.WSI.WSDL"    	 
								invoked.Type									= blank
								invoked.Length									= 300  
								invoked.Value 									= LookupTaxAreaWsdlValue			
									
					if (LoadCalcTaxConfigParameter)
						if (Vertex8AccrualParamRel exists)
							invoke Update Vertex8AccrualParamRel
								invoked.Value 									= CalcTaxWsdlValue	
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "ACCRUAL80.WSI.WSDL"   
								invoked.Length									= 300  
								invoked.Value 									= CalcTaxWsdlValue								
							
						if (Vertex8QuotationParamRel exists)
							invoke Update Vertex8QuotationParamRel
								invoked.Value 									= CalcTaxWsdlValue	 
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "QUOTATION80.WSI.WSDL"  
								invoked.Length									= 300             	
								invoked.Value 									= CalcTaxWsdlValue

						if (Vertex8InvoiceParamRel exists)
							invoke Update Vertex8InvoiceParamRel
								invoked.Value 									= CalcTaxWsdlValue
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "INVOICE80.WSI.WSDL"  
								invoked.Length									= 300  
								invoked.Value 									= CalcTaxWsdlValue									
								
						if (Vertex8PurchOrderParamRel exists)
							invoke Update Vertex8PurchOrderParamRel
								invoked.Value 									= CalcTaxWsdlValue	 					
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "PURCHASEORDERSERVICE80.WSI.WSDL"  
								invoked.Length									= 300         
								invoked.Value 									= CalcTaxWsdlValue								
								
						if (Vertex8InvVerParamRel exists)
							invoke Update Vertex8InvVerParamRel
								invoked.Value 									= CalcTaxWsdlValue	 				
						else
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "INVOICEVERIFICATION80.WSI.WSDL"  
								invoked.Length									= 300
								invoked.Value 									= CalcTaxWsdlValue								
					
							CompletionMessage = "ConfigurationParameterAlreadyExists;ValueUpdated"		

					 



				if (VertexVersion.Nine)
					if (LoadCalcTaxConfigParameter)
						if (VertexCalculateTax90Rel not exist)		 
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "VERTEXCALCULATETAX90.WSI.ENDPOINT"     
								invoked.Type									= blank
								invoked.Length									= blank   
								invoked.Value 									= CalcTaxWsdlValue	 
							CompletionMessage = "ConfigurationParametersSuccessfullyCreatedForVersion9"
						else
							invoke Update VertexCalculateTax90Rel	 
									invoked.Type								= blank
									invoked.Length								= blank  
									invoked.Value 								= CalcTaxWsdlValue
							CompletionMessage = "ConfigurationParameterAlreadyExists;ValueUpdated"							

					if (LoadLookupTaxAreasConfigParameter)		
						if (VertexLookupTaxAreas90Rel not exist)			 
							invoke Create ConfigurationParameter	 
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "VERTEXLOOKUPTAXAREAS90.WSI.ENDPOINT"    
								invoked.Type									= blank
								invoked.Length									= blank  
								invoked.Value 									= LookupTaxAreaWsdlValue
							CompletionMessage = "ConfigurationParametersSuccessfullyCreated"
						else
							invoke Update VertexLookupTaxAreas90Rel	 
									invoked.Type								= blank
									invoked.Length								= blank  
									invoked.Value 								= LookupTaxAreaWsdlValue
							CompletionMessage = "ConfigurationParameterAlreadyExists;ValueUpdated"		
							
		UpdateVertexTrustedId is an Instance Action	  
			completion message is "VertexSecuredPasswordSuccessfullyUpdated"	
			Parameters
				EncryptedTrustedId is Password
				UpdateWithCurrentPassword is Boolean
					default label is "UdateWithUnencryptedTrustedID"
				ClearUnencryptedPassword is Boolean
				ClearEncryptedPassword is Boolean
			Action Rules
				if (UpdateWithCurrentPassword)
					constraint (TrustedId entered)
						"ThereIsNotStoredUnencryptedTrustedId"
					constraint (EncryptedTrustedId not entered)
						"CannotEnterTrustedIdIfUpdatingWithCurrentTrustedId"
				if (ClearEncryptedPassword)
					constraint (!UpdateWithCurrentPassword)
						"CannotClearEncryptedPasswordIfUpdatingItAtTheSameTime"
						
				if (UpdateWithCurrentPassword
				and TrustedId entered)
					SecuredTrustedId = TrustedId 
					
				if (ClearUnencryptedPassword)
					initialize TrustedId	

				if (ClearEncryptedPassword)
					initialize SecuredTrustedId	

				if (EncryptedTrustedId entered)  
					SecuredTrustedId = EncryptedTrustedId


		BatchUpdatePassword is a Set Action	  



			completion message is "SecuredPasswordSuccessfullyUpdated,<RecordsUpdated>RecordsUpdated"	
			run in foreground	
			Parameters
				EncryptedTrustedId is Password
				UpdateWithCurrentPassword is Boolean
				ClearUnencryptedPassword is Boolean
				VertexVersion		is Numeric 1	 
					States
						Seven7	value is 0			
						Eight8	value is 2			
						Nine9	value is 1			
						Six6    value is 9			
				ServiceRelease		is Numeric 3
				ServerName			is Alpha 5
				ServerNameBlankMeansAll is Boolean
			Parameter Rules
				UpdateWithCurrentPassword
					if (UpdateWithCurrentPassword)
						constraint (EncryptedTrustedId not entered)
							"IfUpdatingWithCurrentUnencryptedTrustedId,EnteredTrustedIdMustBeBlank"
				EncryptedTrustedId
					if (EncryptedTrustedId entered)
						constraint (!UpdateWithCurrentPassword)
							"CannotUpdateWithCurrentAndEnterATrustedId.CanOnlyDoOneOrTheOther"

			Local Fields
				Section	is Alpha 1
				RecordsUpdated is Numeric 3
				LocalContinue is Boolean
			Instance Selection
				where (VertexConfigVersion.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Action Rules
				Set Rules
					Entrance Rules
						Section = "1"
					Exit Rules

				Instance Rules
					LocalContinue = false
					if (VertexVersion.Six6						
					and VertexConfigVersion.Version[1:1] = "6") 
						initialize ReleaseNotes					
						LocalContinue = true					
					else
					if (VertexVersion.Seven7
					and VertexConfigVersion.Version[1:1] = "7")	
						LocalContinue = true					
					else
					if (VertexVersion.Eight8
					and VertexConfigVersion.Version[1:1] = "8")	
						LocalContinue = true										
					if (VertexVersion.Nine9
					and VertexConfigVersion.Version[1:1] = "9")	
						LocalContinue = true

					if (VertexConfigVersion.Version[1:1] != "9") 
						LocalContinue = false
						

					if (LocalContinue)
						if (ServiceRelease entered
						and ServiceRelease != VertexConfigVersion.ServiceRelease)
							LocalContinue = false
							

						if (LocalContinue)	
							if (ServerName entered
							and ServerName != VertexConfigVersion.ServerName)	
								LocalContinue = false		 
							else
							if (ServerName not entered		
							and !ServerNameBlankMeansAll)
								LocalContinue = false	
					
					if (LocalContinue)
						Section = "3"
						if (EncryptedTrustedId entered)
						    initialize SecuredTrustedId
							SecuredTrustedId = EncryptedTrustedId  
						if (UpdateWithCurrentPassword
						and TrustedId entered)
							SecuredTrustedId = TrustedId	 
						if (ClearUnencryptedPassword)
							initialize TrustedId						
						
						RecordsUpdated += 1				





				
		ClearVertexUserNameAndPassword is an Instance Action	  
			valid when (UserNameOrPasswordEntered)	
			Parameters
			Action Rules
				initialize UserName            		 
				initialize Password         


		ClearUsernameAndPassword is an Instance Action

			restricted		
			Parameters
			Action Rules
				initialize UserName  
				initialize Password    

				
		ClearEncryptedTrustedId is an Instance Action	  		 
			valid when (VertexVersion7)
			completion message is "VertexSecuredPasswordSuccessfullyCleared"	
			Parameters
			Action Rules
				initialize SecuredTrustedId	

		UpdateVertexConfigurationWithThisVersion is an Instance Action		




			Parameters
			Local Fields
			Parameter Rules
			Action Rules
				invoke Update VertexConfigRel	
					invoked.DefaultVersion = VertexConfigVersion 

		DeleteAllTaxLogsForThisVersion is an Instance Action	
			valid when (TaxLogHeaderRelExist)
			Action Rules
				if (TaxLogHeaderRel exist)
					invoke Delete TaxLogHeaderRel
				   		 													
