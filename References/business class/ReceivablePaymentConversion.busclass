ReceivablePaymentConversion is a BusinessClass
	owned by ar
	prefix is ARC
	classic name is ARCPAYMENT

	Ontology
		symbolic key is ReceivablePaymentConversion
			classic set name is ARCSET1
			classic name for ReceivablePaymentConversion.GeneralLedgerDate is GL-DATE
			classic name for ReceivablePaymentConversion.OriginalCurrency is ORIG-CURRENCY

	Patterns
		implements StaticJava
		disable AuditIndex

	Persistent Fields
		RunGroup
		TransactionAmount							is an InternationalAmount
			classic name is ORIG-AMT
		BaseAmount									is an InternationalAmount
			classic name is TRAN-AMT
			precision is Company.Currency.NumberOfDecimals
		Status										is Numeric size 1
			States
				Open				value is 2
				FullyApplied		value is 7
					default label is "Fully applied"
				Closed				value is 8
				HistoricalPayment	value is 9
					default label is "Historical payment"
		ArReference
		CurrencyRate							  is an OrigRate
			classic name is ORIG-RATE
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		LastStatementDate						 is Date
			classic name is LAST-STA-DATE
		UserField01
			classic name is USR-FLD-01
			restricted
		UserField02
			classic name is USR-FLD-02
			restricted
		UserField03
			classic name is USR-FLD-03
			restricted
		UserField04
			classic name is USR-FLD-04
			restricted
		UserField05
			classic name is USR-FLD-05
			restricted
		Project										is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY
		ProjectContract								is a FinanceCodeBlockProjectOnly
			classic name is CONTRACT
		ErrorMessage								is Alpha 150
		InterfaceRun								is a ReceivablesInterfaceResult
			delete ignored

	Local Fields
		LocalReceivablesInterfaceResult 			is a ReceivablesInterfaceResult

		LocalCompany								is like ReceivableCompany
		LocalBatch									is like ReceivablePaymentHeader
		LocalProcessLevel							is like ReceivableProcessLevel

		LocalErrorOccurred							is Boolean
		LocalErrorMessage							is Alpha 150

		LocalReceivableTransactionSummary			is like ReceivableTransactionSummary
		
		DetailCount									is Numeric size 9


		
		LocalCustomer								is like Customer		

		Done										is Boolean
		
	Derived Fields
		CustomerMismatchMsg is a MessageField 
			restricted
			"CustomerDoesNotMatchInterfacedCustomer"

		InvalidStatusMsg is a MessageField 
			restricted
			"InvalidStatus"

		OpenPaymentForCustomerToBeDeletedMsg is a MessageField 
			restricted
			"CannotConvertOpenPaymentForCustomerSetForDeletion"

		TranAmtIsNotEqualToBaseXRateMsg is a MessageField
			restricted
			"TransactionAmountIsNotEqualToBaseAmountMultipliedByRate"
			
		ProcessLevelIsRequiredMsg is a MessageField
			restricted
			"ProcessLevelIsRequired"
			
		CompanyIsRequiredMsg is a MessageField
			restricted
			"CompanyIsRequired"
			
		DerivedCustomer is a DerivedField
			type is like Customer
			if  (ReceivablePaymentConversion.Customer not entered
			and  CustomerMappingTableInterfaceRel exists)
				return CustomerMappingTableInterfaceRel.Customer
			else
				return ReceivablePaymentConversion.Customer

	Field Rules
		RunGroup
			required
		Company
			required

	Conditions
		HasError
			when (ErrorMessage entered)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

	Relations
		LocalPaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.ReceivablePaymentHeader					= LocalBatch

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
				related.InterfacedCustomer			= ReceivablePaymentConversion.InterfacedCustomer

		LocalCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company  		= Company
				related.Customer 		= LocalCustomer

		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							= LocalCompany
				related.ReceivableProcessLevel			= LocalProcessLevel
				related.ReceivableTransactionSummary	= LocalReceivableTransactionSummary

		CommentImportRel
			one-to-many relation to ReceivableInvoiceCommentImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Customer						= ReceivablePaymentConversion.Customer
				related.InterfacedCustomer				= ReceivablePaymentConversion.InterfacedCustomer
				related.Invoice							= ReceivablePaymentConversion.TransNbr
				related.InvoiceType						= "P"

		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult			= LocalReceivablesInterfaceResult

	Sets
		ByInterfaceRun
			Sort Order
				InterfaceRun
				Company
				ReceivablePaymentConversion.ProcessLevel
				ReceivablePaymentConversion.GeneralLedgerDate
				ReceivablePaymentConversion.DepositDate
				ReceivablePaymentConversion.OriginalCurrency
				ReceivablePaymentConversion.Customer
				ReceivablePaymentConversion.InterfacedCustomer
				ReceivablePaymentConversion.TransNbr	

	Rule Blocks
		ConversionEdits
			LocalErrorOccurred = false
			LocalCustomer = DerivedCustomer

			if (!LocalErrorOccurred)
				if  (Company not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage		= CompanyIsRequiredMsg
				else
				if  (ReceivablePaymentConversion.ProcessLevel not entered
				and  Company.DefaultReceivableProcessLevel not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage		= ProcessLevelIsRequiredMsg
				else
				if  (ReceivablePaymentConversion.Customer entered
				and  ReceivablePaymentConversion.InterfacedCustomer entered
				and  ReceivablePaymentConversion.Customer != CustomerMappingTableInterfaceRel.Customer)
					LocalErrorOccurred		= true
					LocalErrorMessage		= CustomerMismatchMsg
				else
				if  (!Status.Open
				and  !Status.FullyApplied
				and  !Status.Closed
				and  !Status.HistoricalPayment)
					LocalErrorOccurred		= true
					LocalErrorMessage		= InvalidStatusMsg
				else
				if  (Status.Open
				and  LocalCompanyCustomerRel.ActiveStatus.Delete)
					LocalErrorOccurred		= true
					LocalErrorMessage		= OpenPaymentForCustomerToBeDeletedMsg
				else
				if  (CurrencyRate entered
				and  BaseAmount entered
				and  TransactionAmount != CurrencyRate * BaseAmount)
					LocalErrorOccurred		= true
					LocalErrorMessage		= TranAmtIsNotEqualToBaseXRateMsg
				


		ConvertThisPayment

			initialize LocalErrorOccurred

			include ConversionEdits

			if (LocalErrorOccurred)
				ErrorMessage							= LocalErrorMessage

				invoke Update LocalInterfaceResultsRel
						invoked.Status 					= 2
			else


				LocalCustomer = DerivedCustomer

				invoke CreateFromConversion ReceivablePayment
					resume on error
						LocalErrorOccurred				= true
						LocalErrorMessage				= error message
					fill in user fields from this instance

					invoked.Company						= Company
					invoked.ReceivablePaymentHeader		= LocalBatch
					invoked.Customer					= DerivedCustomer
					invoked.ReceivableProcessLevel		= ReceivablePaymentConversion.ProcessLevel	
					invoked.DepositDate					= ReceivablePaymentConversion.DepositDate
					invoked.GeneralLedgerDate			= ReceivablePaymentConversion.GeneralLedgerDate
					invoked.OriginalCurrency		 	= ReceivablePaymentConversion.OriginalCurrency
					invoked.TypeOfPayment				= "P"
					invoked.PaymentNumber				= ReceivablePaymentConversion.TransNbr
					invoked.TransactionAmount			= TransactionAmount
					invoked.BaseAmount					= BaseAmount
					invoked.Status						= Status
					invoked.Project						= Project.Project
					invoked.ProjectContract				= ProjectContract.Project
					invoked.ReferenceNumber				= ArReference
					invoked.CurrencyRate				= CurrencyRate
					invoked.LastStatementDate			= LastStatementDate
					invoked.OriginatingInterfaceRun		= LocalReceivablesInterfaceResult
					invoked.Origin						= "C" 
					
					invoked.CurrencyMultiplicationOrDivision 				= CurrencyMultiplicationOrDivision
					invoked.CurrencyRateToCustomerGroupCurrency				= CurrencyRateToCustomerGroupCurrency
					invoked.CustomerGroupCurrencyMultiplicationOrDivision	= CustomerGroupCurrencyMultiplicationOrDivision

				if (LocalErrorOccurred)

					ErrorMessage						= LocalErrorMessage
			
					invoke Update LocalInterfaceResultsRel
						invoked.Status 					= 2
				else
					WorkSetBaseAmount						+= BaseAmount
					WorkSetTransactionAmount				+= TransactionAmount
					WorkSetBatchCount						+= 1

					if  (ReceivablePaymentConversion.GeneralLedgerDate > LocalCompanyCustomerRel.LastPaymentDate)
						invoke FastUpdate LocalCompanyCustomerRel
							invoked.LastPaymentAmount				= TransactionAmount
							invoked.LastPaymentDate					= ReceivablePaymentConversion.GeneralLedgerDate

					for each CommentImportRel 
	
						invoke Create CompanyCustomerComment
							fill in fields from each
							invoked.Customer							= DerivedCustomer
							invoked.CommentType							= "T"
							invoked.TransactionType						= "P"
							invoked.Transaction							= ReceivablePaymentConversion.TransNbr
							if (each.PrintCode not entered)
								invoked.PrintCode						= "D"

					invoke FastDelete

	Actions
		Create is a Create Action
			Entrance Rules
				if (ReceivablePaymentConversion.ProcessLevel not entered
				and Company.DefaultReceivableProcessLevel entered)
					ReceivablePaymentConversion.ProcessLevel = Company.DefaultReceivableProcessLevel

		Update is an Update Action

		Delete is a Delete Action
			Entrance Rules
				invoke Delete CommentImportRel

		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required
		
			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"
			
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	   GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)
				
			Action Rules
				Instance Rules
					invoke Delete CommentImportRel
					invoke FastDelete
					
		ConvertPayments is a Set Action
			default label is "ConvertPayments"
			Parameters
				PrmRunGroup						is a RunGroup
					default label is "RunGroup"
				PrmCompany						is a ReceivableCompany
				
			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Sort Order
				RunGroup
				Company
				ReceivablePaymentConversion.ProcessLevel
				ReceivablePaymentConversion.GeneralLedgerDate
				ReceivablePaymentConversion.DepositDate
				ReceivablePaymentConversion.OriginalCurrency

			Local Fields
				ConvertedHeader					is a ReceivablePaymentHeader view
				LocalConvertResultView			is a ReceivablesInterfaceResult view
				LocalInstanceCount				is Numeric 10
				WorkSetCompany					is like ReceivableCompany
				WorkSetBatch					is like ReceivablePaymentHeader
				WorkSetProcessLevel				is like ReceivableProcessLevel
				BatchErrorMessage				is Alpha 150
				LocalPaymentConversionCount		is Numeric 12  

			Accumulators
				WorkSetBaseAmount
				WorkSetTransactionAmount
				WorkSetBatchCount

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	   GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
				and	   (PrmCompany not entered
				or	   Company	= PrmCompany))

			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 6
						invoked.Company						= PrmCompany
						invoked.Status						= 1

				RunGroup Set Rules
					Entrance Rules
						
						invoke Create ReceivablesInterfaceResult
							assign result to LocalConvertResultView
							invoked.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
							invoked.RunTime					= current timestamp
							invoked.RunGroup				= PrmRunGroup
							invoked.RunType					= 6
							invoked.Company					= PrmCompany

					Exit Rules
						invoke Update LocalConvertResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed		= LocalInstanceCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalPaymentConversionCount
							if (LocalConvertResultView.Status != 2)
								invoked.Status					= 1

				Company Set Rules

				ReceivablePaymentConversion.ProcessLevel Set Rules

				ReceivablePaymentConversion.OriginalCurrency Set Rules
					Entrance Rules

						LocalCompany							= Company
						LocalBatch								= Company.LastConvertedPaymentBatchNbr

						if (!Company.PaymentBatchNumbering)

							LocalBatch += 1
							Done = false

							while (!Done)

								if (LocalPaymentHeaderRel exists)

									LocalBatch += 1
								else

									Done = true



						WorkSetCompany							= Company
						WorkSetBatch							= LocalBatch
						WorkSetProcessLevel						= ReceivablePaymentConversion.ProcessLevel

						initialize WorkSetBaseAmount
						initialize WorkSetTransactionAmount
						initialize WorkSetBatchCount
						initialize BatchErrorMessage

						invoke ReleasedBatch.CreateReleasedBatch ReceivablePaymentHeader
							assign result to ConvertedHeader
							resume on error
								BatchErrorMessage				= error message
							invoked.Company						= Company
							invoked.ReceivablePaymentHeader		= WorkSetBatch
							invoked.ReceivableProcessLevel		= ReceivablePaymentConversion.ProcessLevel	
							invoked.DepositDate					= ReceivablePaymentConversion.DepositDate
							invoked.GeneralLedgerDate			= ReceivablePaymentConversion.GeneralLedgerDate
							invoked.Currency					= ReceivablePaymentConversion.OriginalCurrency

							invoked.CurrencyRate				= CurrencyRate
							invoked.OriginatingInterfaceRun		= LocalReceivablesInterfaceResult

							invoked.CurrencyRate									= CurrencyRate
							invoked.CurrencyMultiplicationOrDivision				= CurrencyMultiplicationOrDivision
							invoked.CurrencyRateToCustomerGroupCurrency				= CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision	= CustomerGroupCurrencyMultiplicationOrDivision
							invoked.Origin											= "C" 

						if (Company.PaymentBatchNumbering)
							WorkSetBatch							= ConvertedHeader.ReceivablePaymentHeader

					Exit Rules
						LocalCompany 							= WorkSetCompany
						LocalBatch								= WorkSetBatch
						LocalProcessLevel						= WorkSetProcessLevel

						invoke FastUpdate LocalPaymentHeaderRel
							invoked.BaseCash					= WorkSetBaseAmount
							invoked.BaseRna						= WorkSetBaseAmount
							invoked.RnaTotal					= WorkSetTransactionAmount
							invoked.BatchTotal					= WorkSetTransactionAmount
							invoked.BatchCount					= WorkSetBatchCount
							invoked.DetailTotal					= WorkSetTransactionAmount
							invoked.DetailCount					= WorkSetBatchCount
							invoked.LastLogSeq					= WorkSetBatchCount

						if (WorkSetBaseAmount entered
						and LocalProcessLevel entered)	
							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.PaymentsCharges
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel
							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount					= WorkSetBaseAmount

				Instance Rules
					LocalCompany 								= WorkSetCompany
					LocalBatch									= WorkSetBatch
					LocalProcessLevel							= WorkSetProcessLevel

					LocalErrorOccurred							= false
					LocalReceivablesInterfaceResult 			= LocalConvertResultView.ReceivablesInterfaceResult
					LocalPaymentConversionCount					+= 1
					InterfaceRun								= LocalConvertResultView.ReceivablesInterfaceResult
					initialize ErrorMessage	

					if (BatchErrorMessage entered)
						ErrorMessage							= BatchErrorMessage
					
						if  (LocalInterfaceResultsRel.Status != 2)
							invoke Update LocalInterfaceResultsRel
								invoked.Status 					= 2
					else
						include ConvertThisPayment

					LocalInstanceCount							+= 1


		FastUpdate is an Update Action
			restricted
			bypass field rules


		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules

