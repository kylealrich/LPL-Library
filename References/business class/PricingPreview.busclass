PricingPreview is a BusinessClass
	owned by bl
	prefix is BLPRI
	
	Ontology
		symbolic key is PricingPreview
	
	Patterns
		implements StaticJava
		disable AuditIndex
		disable Auditing
	
	Persistent Fields

		Customer
		Item
        InventoryLocation
        Currency							is a FromCurrency
        CustomerShipTo
		CompanyCustomer
        OrderQuantity						is a Quantity
        SellingPriceUOM						is a UnitOfMeasure
        SellUOM								is a UnitOfMeasure
        MultipleSellPrice					is Boolean
        PriceDate							is an ExchangeDate
		CurrencyRate						is a CurrencyExchangeRate
		DiscountsArray						is a DiscountAccountArray
		Option								is Numeric size 1
            States
                PriceList     value is "1"
                Contract      value is "2"
                Promotion     value is "3"   
		UnitPrice
			precision is Item.NumberOfDecimalsPrice
		UnitPriceCurrency							is a UnitPrice
			precision is Item.NumberOfDecimalsPrice
        SellUnitPrice								is a UnitPrice
        	precision is Item.NumberOfDecimalsPrice
        SellUnitPriceCurrency						is a UnitPrice
        	precision is Item.NumberOfDecimalsPrice
        ListName									is a PriceListContractPromotion
		ContractNumber								is a PriceListContractPromotion
		Promotion									is a PriceListContractPromotion
	    DiscountCode								is a PriceDiscountCode
    	PriceRecType								is AlphaUpper size 1
			States
				XClass value is "C"
				Item   value is "I"
		NoCharge									is Boolean

	Local Fields
		LocalSetUOMDone								is Boolean
		LocalQuantityConverted						is Boolean
		LocalCurrencyRelationAndRate				is Boolean
		ItemLocation
		LocalSellingPriceUOMBasePrice				is like InternationalCost
		LocalSellingPriceUOM						is a UnitOfMeasure
		LocalSellToStock							is a SellToStock
		LocalUOMPrice			  					is like SellPriceByUOMArray
	    I1											is Numeric size 2
	    I2											is Numeric size 2
	    I3											is Numeric size 2
		LocalCurrencyExchange						is a CurrencyExchange					
		LocalPriceBillAverage						is an InternationalAmount
		LocalDiscount								is an InternationalAmount
	    LocalDiscountCounter						is Numeric size 2
		LocalTotalDiscount							is an InternationalAmount
		LocalTransactionAmount						is a CurrencyAmount
		LocalInputCurrencyAmount					is an InternationalAmount
		LocalOutputCurrencyAmount					is an InternationalAmount
		LocalQuantityInSellPriceUOM					is a Quantity
		LocalExtendedAmount 						is an InternationalAmount
		UOMCalculation
		LocalUnitPrice								is a UnitPrice
		LocalCost									is like UnitCost
		LocalComponentCost							is like UnitCost
		LocalItem									is like Item
		LocalComponentStartDate						is Date
		LocalComponentStopDate						is Date

	Conditions
		IsBaseCurrency
			restricted
			when (Company.Currency = Currency)

		IsPromotionItemQuantityBreaksEntered
			restricted
			when (PriceRecType.Item
			and   PromotionItemRel.QuantityBreakCode entered)

		IsPromotionSalesClassQuantityBreaksEntered
			restricted
			when (PriceRecType.XClass
			and   PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup entered)

		IsPromotionItemQuantityBreaksAddOns
			restricted
			when (PriceRecType.Item
			and   PromotionItemRel.QuantityBreakCode.UnitAddOn)

		IsPromotionItemQuantityBreaksPercent
			restricted
			when (PriceRecType.Item
			and   PromotionItemRel.QuantityBreakCode.Percentage)

		IsPromotionItemQuantityBreaksOverridePrices
			restricted
			when (PriceRecType.Item
			and   PromotionItemRel.QuantityBreakCode.OverridePrice)
		
		IsPriceListItemQuantityBreaksEntered	
			restricted
			when (PriceRecType.Item
			and   PriceListItemRel.QuantityBreakCode entered)

		IsPriceListSalesClassQuantityBreaksEntered
			restricted
			when (PriceRecType.XClass
			and   PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup entered)

		IsPriceListItemQuantityBreaksAddOns
			restricted
			when (PriceRecType.Item
			and   PriceListItemRel.QuantityBreakCode.UnitAddOn)

		IsPriceListItemQuantityBreaksPercent
			restricted
			when (PriceRecType.Item
			and   PriceListItemRel.QuantityBreakCode.Percentage)

		IsPriceListItemQuantityBreaksOverridePrices
			restricted
			when (PriceRecType.Item
			and   PriceListItemRel.QuantityBreakCode.OverridePrice)
			
		IsContractItemQuantityBreakCode
			restricted
			when (PriceRecType.Item
			and   ContractItemRel.QuantityBreakCode entered)

		IsContractSalesClassQuantityBreaks
			restricted
			when (PriceRecType.XClass
			and   PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup entered)

		IsContractItemQuantityBreakCodeBreakAddOns
			restricted
			when (PriceRecType.Item
			and   ContractItemRel.QuantityBreakCode.UnitAddOn)

		IsContractItemQuantityBreakCodeOverridePrices
			restricted
			when (PriceRecType.Item
			and   ContractItemRel.QuantityBreakCode.OverridePrice)

		IsContractItemQuantityBreakCodePercent
			restricted
			when (PriceRecType.Item
			and   ContractItemRel.QuantityBreakCode.Percentage)

		IsPriceDateValid
			restricted
			when (IsPriceDateLessThanCurrentEffectiveDate
			or    IsPriceDateBetweenCurrentandeffectiveDate
			or    IsPriceDateGreaterThanNextEffectiveDate)
		
		IsPriceDateLessThanCurrentEffectiveDate
			restricted
			when (PriceDate <= PriceBaseItemRel.CurrentEffectiveDate)
		
		IsPriceDateBetweenCurrentandeffectiveDate
			restricted
			when (PriceDate > PriceBaseItemRel.CurrentEffectiveDate
			and  (PriceBaseItemRel.NextEffectiveDate not entered
			or PriceDate < PriceBaseItemRel.NextEffectiveDate))

		IsPriceDateGreaterThanNextEffectiveDate
			restricted
			when (PriceBaseItemRel.NextEffectiveDate entered
			and PriceDate >= PriceBaseItemRel.NextEffectiveDate)

		DefaultPriceExists
			restricted
			when (HasPriceFromContract
			or	  HasPriceFromPromotion
			or    HasPriceFromPriceList)
		
		HasPriceExists
			restricted
			when (PriceContractItemRel exists		
			or	PricePromotionItemRel exists
			or  PriceListItemRel      exists)
		
		HasPriceFromContract
			restricted
			when ((ContractItemRel exists
			or     PriceListSalesClassForContractRel exists
			or 	   DefaultContractRel exists)
			and    DefaultContractRel.BaseName.IsLineAPriceBaseItem)
			
		HasPriceFromPromotion
			restricted
			when ((PromotionItemRel exists
			or     PriceListSalesClassForPromotionRel exists
			or     DefaultPromotionRel exists)
			and    DefaultPromotionRel.BaseName.IsLineAPriceBaseItem)
			
		HasPriceFromPriceList
			restricted
			when ((PriceListItemRel exists
			or	   PriceListSalesClassForPriceListRel exists
			or     ListName exists)
			and    ListName.BaseName.IsLineAPriceBaseItem)
		
		DisplayPriceBreakFromPriceList
			restricted
			when ((ListName entered and PriceRecType entered
			and   ContractNumber not entered
			and   Promotion not entered)
			and   !NoCharge)
		
		DisplayPriceBreakFromContract
			restricted
			when ((ContractNumber entered and PriceRecType entered)
			and   !NoCharge)
			
		DisplayPriceBreakFromPromotion
			restricted
			when ((Promotion entered and PriceRecType entered)
			and   !NoCharge)
				
		IsMultipleUOM
			restricted
			when ((PriceBaseItemRel.CurrentMultipleSellPriceUnitsOfMeasure	= 1
			or    PriceBaseItemRel.NextMultipleSellPriceUnitsOfMeasure		= 1)
			and   !NoCharge)

		HasDiscountAndIsNoCharge
			restricted
			when (DiscountCode entered
			and  !NoCharge)
	
		TotalWhen3UOMS
			when (DerivedUnitPrice3 entered
			and DerivedUnitPrice4 not entered)
		TotalWhen4UOMS
			when (DerivedUnitPrice4 entered
			and DerivedUnitPrice5 not entered)
		TotalWhen5UOMS
			when (DerivedUnitPrice5 entered
			and DerivedUnitPrice6 not entered)
		TotalWhen6UOMS
			when (DerivedUnitPrice6 entered
			and DerivedUnitPrice7 not entered)
		TotalWhen7UOMS
			when (DerivedUnitPrice7 entered
			and DerivedUnitPrice8 not entered)
		TotalWhen8UOMS
			when (DerivedUnitPrice8 entered
			and DerivedUnitPrice9 not entered)
		TotalWhen9UOMS
			when (DerivedUnitPrice9 entered
			and DerivedUnitPrice10 not entered)
	Relations
		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company 						= Company

		KitComponentsRel
			one-to-many relation to KitComponent
			Field Mapping uses symbolic key
				related.ItemGroup         			= InventoryCompanyRel.ItemGroup
				related.KitItem.Company           	= Company
				related.KitItem.InventoryLocation 	= InventoryLocation
				related.KitItem.Item	  			= Item

		KitComponentsValidRel
			one-to-many relation to KitComponent
			Field Mapping uses symbolic key
				related.ItemGroup         			= InventoryCompanyRel.ItemGroup
				related.KitItem.Company           	= Company
				related.KitItem.InventoryLocation 	= InventoryLocation
				related.KitItem.Item	  			= Item
			Instance Selection
				where (related.ComponentItem		= LocalItem
				and	   PriceDate 					>= LocalComponentStartDate
				and    PriceDate 					<= LocalComponentStopDate
				and    related.KitComponent.OptionalComponentSequence not entered
				and    related.RequiredField		= true)


		ComponentItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company					    = Company
				related.InventoryLocation			= InventoryLocation
				related.Item						= LocalItem

	   	SellingPriceItemUOMRel
	   		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUOM
			Instance Selection
				where (related.OKForSellPrice)

		SellUOMItemUOMRel
	   		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellUOM
			Instance Selection
				where (related.OKForSellPrice)

		PriceBaseItemRel
  			one-to-one relation to PriceBaseItem
  			Field Mapping uses symbolic key
  				related.Company				= Company
  				related.InventoryLocation	= DerivedLocation
  				related.Currency			= DerivedCurrency
  				related.PriceBase			= DerivedPriceBase
  				related.Item				= Item
  		
  		PriceListRel
	  		one-to-one relation to PriceListContractPromotion
	  		Field Mapping uses symbolic key
	  			related.Company										= Company
	  			related.PriceListContractPromotion.Customer			= blank
				related.PriceListContractPromotion.ListName			= ListName.ListName
				related.PriceListContractPromotion.Promotion		= blank
				
  		PriceListItemRel
  			one-to-one relation to PriceListItem
  			Field Mapping uses symbolic key
  				related.Company										= Company
  				related.PriceListContractPromotion.Customer			= blank
  				related.PriceListContractPromotion.ListName			= ListName.ListName
  				related.PriceListContractPromotion.Promotion		= blank
				related.Item										= Item
		
		PriceListSalesClassForPriceListRel
	  		one-to-many relation to PriceListSalesClass
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PriceListContractPromotion.Customer				= blank
				related.PriceListContractPromotion.ListName				= ListName.ListName
				related.PriceListContractPromotion.Promotion			= blank
		   	Instance Selection
		   		where (related.PriceListSalesClass.MajorSalesClass		= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 		= Item.MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 		= blank))
		
  		DefaultContractRel
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses Set5
			 	related.Company										= Company
				related.PriceListContractPromotion.Customer			= Customer
			Instance Selection
				where (related.BeginDate						   <=  PriceDate
				and	   related.EndDate							   >=  PriceDate)
						
  		ContractItemRel
			one-to-many relation to PriceListItem
  			Field Mapping uses Set5
  			 	related.Company											= Company
				related.PriceListContractPromotion.Customer 			= Customer
				related.Item											= Item
			Instance Selection
				where (related.BeginDate	<=  PriceDate
				and	   related.EndDate		>=  PriceDate)		
				
  		PriceContractItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set5
  			 	related.Company											= Company
				related.PriceListContractPromotion.Customer 			= Customer
				related.Item											= Item
			Instance Selection
				where (related.BeginDate	<=  PriceDate
				and	   related.EndDate		>=  PriceDate
				and    related.PriceListContractPromotion.Customer entered)
				
		PriceListSalesClassForContractRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set5	
				related.Company											= Company 		
				related.PriceListContractPromotion.Customer				= Customer
			Instance Selection        
				where (related.PriceListSalesClass.MajorSalesClass	= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 	= Item.MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 	= blank)
  				and   (related.BeginDate						   <=  PriceDate
				and	   related.EndDate							   >=  PriceDate))  
		
		PriceListPromotionRel
	  		one-to-many relation to PriceListContractPromotion
	  		Field Mapping uses ByListName
	  			related.Company										= Company
				related.PriceListContractPromotion.ListName			= ListName.ListName
				related.PriceListContractPromotion.Customer			= blank
			Instance Selection
				where (related.BeginDate						   <=  DerivedPriceDate
				and	   related.EndDate							   >=  DerivedPriceDate)
				
		PromotionItemRel
			one-to-many relation to PriceListItem
  			Field Mapping uses Set6
  			 	related.Company											= Company
				related.PriceListContractPromotion.ListName 			= Promotion.ListName
				related.Item											= Item
			Instance Selection
				where (related.BeginDate	<=  PriceDate
				and	   related.EndDate		>=  PriceDate)
		
		DefaultPromotionRel
	  		one-to-many relation to PriceListContractPromotion
	  		Field Mapping uses Set6
	  			related.Company										= Company
				related.PriceListContractPromotion.ListName			= Promotion.ListName		
			Instance Selection
				where (related.BeginDate						   <=  PriceDate
				and	   related.EndDate							   >=  PriceDate)
				
		PricePromotionItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set6
  			 	related.Company				= Company
				related.PriceListContractPromotion.ListName = Promotion.ListName
				related.Item				= Item
			Instance Selection
				where (related.BeginDate	<=  PriceDate
				and	   related.EndDate		>=  PriceDate
				and    related.PriceListContractPromotion.Promotion entered)
				
		PriceListSalesClassForPromotionRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set6
				related.Company											= Company 		
				related.PriceListContractPromotion.ListName				= Promotion.ListName
			Instance Selection        
				where (related.PriceListSalesClass.MajorSalesClass	= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 	= Item.MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 	= blank)
  				and   (related.BeginDate						   <=  PriceDate
				and	   related.EndDate							   >=  PriceDate))
	    

	Rule Blocks
		SetSellingPriceUOM
			if (!LocalSetUOMDone)
				if(SellingPriceUOM entered)
					LocalSellingPriceUOM = SellingPriceUOM
				else
					LocalSellingPriceUOM = Item.DefaultSellingUOMRel.UnitOfMeasure
				if (PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					I3 = 1
					while (I3 <= 10)
						if (LocalSellingPriceUOM	= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure)
							end while
	
						I3 += 1
	
				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  PriceDate < PriceBaseItemRel.NextEffectiveDate)
					I3 = 1
					while (I3 <= 10)
						if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure)
							end while
	
						I3 += 1
				else
					I3 = 1
					while (I3 <= 10)
						if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure)
							end while
	
						I3 += 1
				LocalSetUOMDone = true
			

		CurrencyConversion
			initialize LocalCurrencyExchange
			LocalCurrencyExchange.ToCurrency 					= Company.Currency
			LocalCurrencyRelationAndRate 						= LocalCurrencyExchange.IsRateDefined
			LocalCurrencyExchange.EnteredCurrencyRate			= CurrencyRate
			LocalTransactionAmount								= LocalInputCurrencyAmount
		 	LocalOutputCurrencyAmount							= LocalCurrencyExchange.OutputCurrencyAmount

		CalculatePricingDiscount
			initialize LocalDiscountCounter
			if (DiscountCode entered)	
				LocalDiscountCounter = 1
				while (LocalDiscountCounter <= 3)
					if (LocalDiscountCounter = 1
					or  DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].ApplyToGross)
						DiscountsArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt					= LocalPriceBillAverage	* DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent
					else
						DiscountsArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt					= ((LocalPriceBillAverage - LocalTotalDiscount) * DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent)
						LocalDiscount = (((LocalPriceBillAverage - (LocalTotalDiscount / OrderQuantity)) * DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent) * OrderQuantity)
					DiscountsArray.DiscountAccountGroup[LocalDiscountCounter].DiscountAccount				= DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].DistributionAccount
					LocalTotalDiscount			+= DiscountsArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt
					LocalDiscountCounter += 1
			else
				initialize DiscountsArray

		CalculatePricing
			if (PriceBaseItemRel exists)
				if(SellingPriceUOM entered)
					LocalSellingPriceUOM = SellingPriceUOM
				else
					LocalSellingPriceUOM = Item.DefaultSellingUOMRel.UnitOfMeasure
				
				if (PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM	= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalSellingPriceUOMBasePrice					= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while

						I1 += 1

				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  PriceDate < PriceBaseItemRel.NextEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalSellingPriceUOMBasePrice					= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while

						I1 += 1
				else
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalSellingPriceUOMBasePrice					= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while
	
						I1 += 1
							
				if (DefaultPriceExists)
					if (HasPriceFromContract
					and Option.Contract)
						if (ContractItemRel exists)
							constraint (not ContractItemRel.SalesProhibited)
								"ItemIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= ContractItemRel.PriceDiscountCode
							PriceRecType				= PriceRecType.Item
							NoCharge					= ContractItemRel.NoCharge
							if (not NoCharge)
								if (ContractItemRel.UnitOfMeasureBreakCode entered)
									I1 = 1
									while (I1 <=10)
										if (LocalSellingPriceUOM	= ContractItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I2 = I1
											end while
										I1 += 1
										
									if (ContractItemRel.UnitOfMeasureBreakCode.Percentage)
										UnitPrice		 			= LocalSellingPriceUOMBasePrice * ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
									else
									if (ContractItemRel.UnitOfMeasureBreakCode.UnitAddOn)
										UnitPrice    	 			= LocalSellingPriceUOMBasePrice + ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].PriceBreakAddOnUnitPrices
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	+ ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].PriceBreakAddOnUnitPrices
									else
									if (ContractItemRel.UnitOfMeasureBreakCode.OverridePrice)
										UnitPrice    	 			= ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].UnitPrices
										SellUnitPrice				= ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].UnitPrices
								else
									for each ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
										if (OrderQuantity <= each.BreakQuantity)
											if (ContractItemRel.QuantityBreakCode.Percentage)
												UnitPrice    				= LocalSellingPriceUOMBasePrice * each.BreakPercent
												SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
												end for each
												
											else
											if (ContractItemRel.QuantityBreakCode.UnitAddOn)
												UnitPrice					= LocalSellingPriceUOMBasePrice + each.BreakAddOns
												SellUnitPrice				= LocalSellingPriceUOMBasePrice + each.BreakAddOns
												end for each
												
											else
											if (ContractItemRel.QuantityBreakCode.OverridePrice)
												UnitPrice					= each.BreakPrices
												SellUnitPrice				= each.BreakPrices
												end for each
												
						else 
						if (PriceListSalesClassForContractRel exists)
							constraint (not PriceListSalesClassForContractRel.SalesProhibited)
								"SalesClassIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= PriceListSalesClassForContractRel.PriceDiscountCode
							PriceRecType				= PriceRecType.XClass
							NoCharge					= PriceListSalesClassForContractRel.NoCharge
							if (not NoCharge)
								for each PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup
									if (OrderQuantity <= each.BreakQuantity)
										UnitPrice					= LocalSellingPriceUOMBasePrice * each.BreakPercent
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
										end for each
										
						else
							DiscountCode				= DefaultContractRel.PriceDiscountCode
							UnitPrice					= LocalSellingPriceUOMBasePrice * DefaultContractRel.Percent
							SellUnitPrice				= LocalSellingPriceUOMBasePrice	* DefaultContractRel.Percent
					else
					if (HasPriceFromPromotion
					and Option.Promotion)
						if (PromotionItemRel exists)
							constraint (not PromotionItemRel.SalesProhibited)
								"ItemIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= PromotionItemRel.PriceDiscountCode
							PriceRecType				= PriceRecType.Item
							NoCharge 					= PromotionItemRel.NoCharge
							if (not NoCharge)
								if (PromotionItemRel.UnitOfMeasureBreakCode entered)
									I1 = 1
									while (I1 <=10)
										if (LocalSellingPriceUOM	= PromotionItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I2 = I1
											end while
										I1 += 1
										
									if (PromotionItemRel.UnitOfMeasureBreakCode.Percentage)
										UnitPrice					= LocalSellingPriceUOMBasePrice * PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
									else
									if (PromotionItemRel.UnitOfMeasureBreakCode.UnitAddOn)
										UnitPrice					= LocalSellingPriceUOMBasePrice + PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].PriceBreakAddOnUnitPrices
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	+ PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].PriceBreakAddOnUnitPrices
									else
									if (PromotionItemRel.UnitOfMeasureBreakCode.OverridePrice)
										UnitPrice					= PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].UnitPrices
										SellUnitPrice				= PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].UnitPrices
								else
									for each PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
										if (OrderQuantity <= each.BreakQuantity)
											if (PromotionItemRel.QuantityBreakCode.Percentage)
												UnitPrice					= LocalSellingPriceUOMBasePrice * each.BreakPercent
												SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
												end for each
												
											else
											if (PromotionItemRel.QuantityBreakCode.UnitAddOn)
												UnitPrice					= LocalSellingPriceUOMBasePrice + each.BreakAddOns
												SellUnitPrice				= LocalSellingPriceUOMBasePrice	+ each.BreakAddOns
												end for each
												
											else
											if (PromotionItemRel.QuantityBreakCode.OverridePrice)
												UnitPrice					= each.BreakPrices
												SellUnitPrice				= each.BreakPrices
												end for each
												
						else
						if (PriceListSalesClassForPromotionRel exists)
							constraint (not PriceListSalesClassForPromotionRel.SalesProhibited)
								"SalesClassIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= PriceListSalesClassForPromotionRel.PriceDiscountCode
							PriceRecType				= PriceRecType.XClass
							NoCharge 					= PriceListSalesClassForPromotionRel.NoCharge
							
							if (not NoCharge)
								for each PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup
									if (OrderQuantity <= each.BreakQuantity)
										UnitPrice					= LocalSellingPriceUOMBasePrice * each.BreakPercent
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
										end for each
										
										
						else
							DiscountCode				= DefaultPromotionRel.PriceDiscountCode
							UnitPrice					= LocalSellingPriceUOMBasePrice * DefaultPromotionRel.Percent
							SellUnitPrice				= LocalSellingPriceUOMBasePrice	* DefaultPromotionRel.Percent
							
					else
					if (HasPriceFromPriceList
					and Option.PriceList)
						if (PriceListItemRel exists)
							constraint (not PriceListItemRel.SalesProhibited)
								"ItemIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= PriceListItemRel.PriceDiscountCode
							PriceRecType				= PriceRecType.Item
							NoCharge					= PriceListItemRel.NoCharge
							
							if (not NoCharge)
								if (PriceListItemRel.UnitOfMeasureBreakCode entered)
									I1 = 1
									while (I1 <=10)
										if (LocalSellingPriceUOM	= PriceListItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I2 = I1
											end while
										I1 += 1
										
									if (PriceListItemRel.UnitOfMeasureBreakCode.Percentage)
										UnitPrice					= LocalSellingPriceUOMBasePrice * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
									else
									if (PriceListItemRel.UnitOfMeasureBreakCode.UnitAddOn)
										UnitPrice					= LocalSellingPriceUOMBasePrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].PriceBreakAddOnUnitPrices
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
									else
									if (PriceListItemRel.UnitOfMeasureBreakCode.OverridePrice)
										UnitPrice					= PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].UnitPrices
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I2].Percents
								else
									for each PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
										if (OrderQuantity <= each.BreakQuantity)
											if (PriceListItemRel.QuantityBreakCode.Percentage)
												UnitPrice					= LocalSellingPriceUOMBasePrice * each.BreakPercent
												SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
												end for each
												
											else
											if (PriceListItemRel.QuantityBreakCode.UnitAddOn)
												UnitPrice					= LocalSellingPriceUOMBasePrice + each.BreakAddOns
												SellUnitPrice				= LocalSellingPriceUOMBasePrice	+ each.BreakAddOns
												end for each
												
											else
											if (PriceListItemRel.QuantityBreakCode.OverridePrice)
												UnitPrice					= each.BreakPrices
												SellUnitPrice				= each.BreakPrices
												end for each
												
						else
						if (PriceListSalesClassForPriceListRel exists)
							constraint (not PriceListSalesClassForPriceListRel.SalesProhibited)
								"SalesClassIsProhibitedForSaleToThisCustomer"
							DiscountCode 				= PriceListSalesClassForPriceListRel.PriceDiscountCode
							PriceRecType				= PriceRecType.XClass
							NoCharge 	 				= PriceListSalesClassForPriceListRel.NoCharge
							if (not NoCharge)
								for each PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup
									if (OrderQuantity <= each.BreakQuantity)
										UnitPrice					= LocalSellingPriceUOMBasePrice * each.BreakPercent
										SellUnitPrice				= LocalSellingPriceUOMBasePrice	* each.BreakPercent
										end for each
										
						else
							DiscountCode				= ListName.PriceDiscountCode
							UnitPrice					= LocalSellingPriceUOMBasePrice * ListName.Percent
							SellUnitPrice				= LocalSellingPriceUOMBasePrice	* ListName.Percent

				

			constraint (UnitPrice entered and not NoCharge)
				"PriceDoesNotExists" 

			if (LocalSellingPriceUOM entered
			and LocalSellingPriceUOM != SellUOM)
				initialize UOMCalculation
   				UOMCalculation.InputUOM							= SellUOM
				UOMCalculation.InputToUOM						= LocalSellingPriceUOM
				UOMCalculation.InputQuantity					= OrderQuantity
				UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
   				LocalQuantityInSellPriceUOM						= UOMCalculation.OutputQuantity
   			else
   				LocalQuantityInSellPriceUOM						= OrderQuantity
				
			if(SellingPriceUOM not entered)
				initialize SellUnitPrice

			UnitPriceCurrency								= UnitPrice
			SellUnitPriceCurrency							= SellUnitPrice
			if (not IsBaseCurrency)
				if (UnitPrice entered)
					LocalInputCurrencyAmount				= UnitPrice
					include CurrencyConversion
					UnitPrice							 	= LocalOutputCurrencyAmount
				if (SellUnitPrice entered)
					LocalInputCurrencyAmount				= SellUnitPrice
					include CurrencyConversion
					SellUnitPrice							= LocalOutputCurrencyAmount
			LocalPriceBillAverage							= UnitPrice * LocalQuantityInSellPriceUOM
			include CalculatePricingDiscount

		CalculateUnitPrices
			initialize LocalUnitPrice
			initialize LocalUOMPrice
			if (PriceBaseItemRel exists)
				if (PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
						LocalUOMPrice.SellPriceByUOM[I1].SellPrice			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].SellPrice
						LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].SellPriceCode
						I1 += 1
				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  PriceDate < PriceBaseItemRel.NextEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
						LocalUOMPrice.SellPriceByUOM[I1].SellPrice			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].SellPrice
						LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].SellPriceCode
						I1 += 1
				else
					I1 = 1
					while (I1 <= 10)
						LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
						LocalUOMPrice.SellPriceByUOM[I1].SellPrice			= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].SellPrice
						LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].SellPriceCode
						I1 += 1
							
				if (Option.Contract)
					if (ContractItemRel exists)
						if (not NoCharge)
							if (ContractItemRel.UnitOfMeasureBreakCode entered)
								I1 = 1
								while (I1 <=10)
									if (LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure	= ContractItemRel.UnitOfMeasures.UnitOfMeasure[I1])
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										if (ContractItemRel.UnitOfMeasureBreakCode.Percentage)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice * ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
										else
										if (ContractItemRel.UnitOfMeasureBreakCode.UnitAddOn)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice + ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
										else
										if (ContractItemRel.UnitOfMeasureBreakCode.OverridePrice)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice = ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									I1 += 1
									
							else
								I1 = 1
								while (I1 <=10)
									if(LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode = 1)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										I2 = I1
										end while

									I1 +=1

								for each ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
									if (OrderQuantity <= each.BreakQuantity)
										if (ContractItemRel.QuantityBreakCode.Percentage)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice		= LocalUnitPrice * each.BreakPercent
											end for each
											
										else
										if (ContractItemRel.QuantityBreakCode.UnitAddOn)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice		= LocalUnitPrice + each.BreakAddOns
											end for each
											
										else
										if (ContractItemRel.QuantityBreakCode.OverridePrice)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice		= each.BreakPrices
											end for each
											
					else 
					if (PriceListSalesClassForContractRel exists)
						if (not NoCharge)
							for each PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup
								if (OrderQuantity <= each.BreakQuantity)
									I1 = 1
									while (I1 <=10)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice * each.BreakPercent
										I1 += 1
									
									end for each
									
					else
						I1 = 1
						while (I1 <=10)
							LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
							LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice * DefaultContractRel.Percent
							I1 += 1

				else
				if (Option.Promotion)
					if (PromotionItemRel exists)
						if (not NoCharge)
							if (PromotionItemRel.UnitOfMeasureBreakCode entered)
								I1 = 1
								while (I1 <=10)
									if (LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure	= PromotionItemRel.UnitOfMeasures.UnitOfMeasure[I1])
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
									if (PromotionItemRel.UnitOfMeasureBreakCode.Percentage)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice					= LocalUnitPrice * PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
									else
									if (PromotionItemRel.UnitOfMeasureBreakCode.UnitAddOn)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice					= LocalUnitPrice + PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
									else
									if (PromotionItemRel.UnitOfMeasureBreakCode.OverridePrice)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice					= PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									I1 += 1
									
							else
								I1 = 1
								while (I1 <=10)
									if(LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode = 1)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										I2 = I1
										end while

									I1 +=1

								for each PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
									if (OrderQuantity <= each.BreakQuantity)
										if (PromotionItemRel.QuantityBreakCode.Percentage)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= LocalUnitPrice * each.BreakPercent
											end for each
											
										else
										if (PromotionItemRel.QuantityBreakCode.UnitAddOn)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= LocalUnitPrice + each.BreakAddOns
											end for each
											
										else
										if (PromotionItemRel.QuantityBreakCode.OverridePrice)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= each.BreakPrices
											end for each
											
					else
					if (PriceListSalesClassForPromotionRel exists)
						if (not NoCharge)
							for each PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup
								if (OrderQuantity <= each.BreakQuantity)
									I1 = 1
									while (I1 <=10)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice * each.BreakPercent
										I1 += 1
									
									end for each
									
					else
						I1 = 1
						while (I1 <=10)
							LocalUnitPrice									= LocalUOMPrice.SellPriceByUOM[I1].SellPrice
							LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * DefaultPromotionRel.Percent
							I1 += 1
						
				else
				if (Option.PriceList)
					if (PriceListItemRel exists)
						if (not NoCharge)
							if (PriceListItemRel.UnitOfMeasureBreakCode entered)
								I1 = 1
								while (I1 <=10)
									if (LocalUOMPrice.SellPriceByUOM[I1].UnitOfMeasure	= PriceListItemRel.UnitOfMeasures.UnitOfMeasure[I1])
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										if (PriceListItemRel.UnitOfMeasureBreakCode.Percentage)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice	= LocalUnitPrice * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
										else
										if (PriceListItemRel.UnitOfMeasureBreakCode.UnitAddOn)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice	= LocalUnitPrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
										else
										if (PriceListItemRel.UnitOfMeasureBreakCode.OverridePrice)
											LocalUOMPrice.SellPriceByUOM[I1].SellPrice	= PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									I1 += 1
									
							else
								I1 = 1
								while (I1 <=10)
									if(LocalUOMPrice.SellPriceByUOM[I1].SellPriceCode = 1)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										I2 = I1
										end while

									I1 +=1

								for each PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
									if (OrderQuantity <= each.BreakQuantity)
										if (PriceListItemRel.QuantityBreakCode.Percentage)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= LocalUnitPrice * each.BreakPercent
											end for each
											
										else
										if (PriceListItemRel.QuantityBreakCode.UnitAddOn)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= LocalUnitPrice + each.BreakAddOns
											end for each
											
										else
										if (PriceListItemRel.QuantityBreakCode.OverridePrice)
											LocalUOMPrice.SellPriceByUOM[I2].SellPrice					= each.BreakPrices
											end for each
											
					else
					if (PriceListSalesClassForPriceListRel exists)
						if (not NoCharge)
							for each PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup
								if (OrderQuantity <= each.BreakQuantity)
									I1 = 1
									while (I1 <=10)
										LocalUnitPrice = LocalUOMPrice.SellPriceByUOM[I1].SellPrice
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice = LocalUnitPrice * each.BreakPercent
										I1 += 1
									
									end for each
					else
						I1 = 1
						while (I1 <=10)
							LocalUnitPrice									= LocalUOMPrice.SellPriceByUOM[I1].SellPrice
							LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * ListName.Percent
							I1 += 1

		CalculateQuantityBreakUnitPrices
			initialize LocalUnitPrice
			initialize LocalUOMPrice
			if (PriceBaseItemRel exists)
				if(SellingPriceUOM entered)
					LocalSellingPriceUOM = SellingPriceUOM
				else
					LocalSellingPriceUOM = Item.DefaultSellPriceUOMRel.UnitOfMeasure

				if (PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM	= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalUnitPrice	= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while

						I1 += 1
				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  PriceDate < PriceBaseItemRel.NextEffectiveDate)
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM	= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalUnitPrice	= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while

						I1 += 1
				else
					I1 = 1
					while (I1 <= 10)
						if (LocalSellingPriceUOM	= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure)
							LocalUnitPrice	= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].SellPrice
							end while

						I1 += 1

				if (Option.Contract)
					if (ContractItemRel exists)
						if (not NoCharge)
							if (ContractItemRel.QuantityBreakCode entered)
								I1 = 1
								while (I1 <= 6)
									if (ContractItemRel.QuantityBreakCode.Percentage
									and ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
									else
									if (ContractItemRel.QuantityBreakCode.UnitAddOn
									and ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice + ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
									else
									if (ContractItemRel.QuantityBreakCode.OverridePrice
									and ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
									I1 += 1

					else 
					if (PriceListSalesClassForContractRel exists)
						if (not NoCharge)
							I1 = 1
							while (I1 <= 6)
								LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
								I1 += 1

				else
				if (Option.Promotion)
					if (PromotionItemRel exists)
						if (not NoCharge)
							if (PromotionItemRel.QuantityBreakCode entered)
								I1 = 1
								while (I1 <= 6)
									if (PromotionItemRel.QuantityBreakCode.Percentage
									and PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
									else
									if (PromotionItemRel.QuantityBreakCode.UnitAddOn
									and PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice + PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
									else
									if (PromotionItemRel.QuantityBreakCode.OverridePrice
									and PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
									I1 += 1

					else
					if (PriceListSalesClassForPromotionRel exists)
						if (not NoCharge)
							I1 = 1
							while (I1 <= 6)
								LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
								I1 += 1

				else
				if (Option.PriceList)
					if (PriceListItemRel exists)
						if (not NoCharge)
							if (PriceListItemRel.QuantityBreakCode entered)
								I1 = 1
								while (I1 <= 6)
									if (PriceListItemRel.QuantityBreakCode.Percentage
									and PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
									else
									if (PriceListItemRel.QuantityBreakCode.UnitAddOn
									and PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice + PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
									else
									if (PriceListItemRel.QuantityBreakCode.OverridePrice
									and PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices entered)
										LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
									I1 += 1

					else
					if (PriceListSalesClassForPriceListRel exists)
						if (not NoCharge)
							I1 = 1
							while (I1 <= 6)
								LocalUOMPrice.SellPriceByUOM[I1].SellPrice		= LocalUnitPrice * PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
								I1 += 1

		ConvertQuantity
			if (!LocalQuantityConverted)
				if(SellingPriceUOM entered)
					LocalSellingPriceUOM = SellingPriceUOM
				else
					LocalSellingPriceUOM = Item.DefaultSellingUOMRel.UnitOfMeasure
				
				if (LocalSellingPriceUOM entered
				and LocalSellingPriceUOM != SellUOM)
					initialize UOMCalculation
	   				UOMCalculation.InputUOM							= SellUOM
					UOMCalculation.InputToUOM						= LocalSellingPriceUOM
					UOMCalculation.InputQuantity					= OrderQuantity
					UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
	   				LocalQuantityInSellPriceUOM						= UOMCalculation.OutputQuantity
	   			else
	   				LocalQuantityInSellPriceUOM						= OrderQuantity	
	   			LocalQuantityConverted = true		


	Derived Fields
		DerivedPriceDate					is a DerivedField
			type is Date
			restricted
			return current corporate date

		DerivedLocation 					is a DerivedField
			type is like InventoryLocation
			restricted
			if (Company.LocationBasedPricing)
				return InventoryLocation
			else
				return blank
				
		DerivedCurrency						is a DerivedField
			type is like Currency
			restricted
			if (Company.CurrencyBasedPricing)
				return Currency
			else
				return Company.Currency
		
		DerivedPriceBase					is a DerivedField
			type is like PriceBase
			restricted
			if (Option.Contract)
				return ContractNumber.BaseName
			else
			if (Option.Promotion)
				return Promotion.BaseName 
			else
				return ListName.BaseName
			
		DiscountAmount					is a DerivedField
		    type is like InternationalAmount
        	return (DiscountsArray.DiscountAccountGroup[1].DscAmt + DiscountsArray.DiscountAccountGroup[2].DscAmt + DiscountsArray.DiscountAccountGroup[3].DscAmt)

		DiscountAmountCurrency			is a DerivedField
		    type is like InternationalAmount
    		return ((DiscountsArray.DiscountAccountGroup[1].DscAmt + DiscountsArray.DiscountAccountGroup[2].DscAmt + DiscountsArray.DiscountAccountGroup[3].DscAmt) / CurrencyRate)


		DiscountAmountCurrency1			is a DerivedField
		    type is like InternationalAmount
    		return (DiscountsArray.DiscountAccountGroup[1].DscAmt / CurrencyRate)

		DiscountAmountCurrency2			is a DerivedField
		    type is like InternationalAmount
    		return (DiscountsArray.DiscountAccountGroup[2].DscAmt / CurrencyRate)

		DiscountAmountCurrency3			is a DerivedField
		    type is like InternationalAmount
    		return (DiscountsArray.DiscountAccountGroup[3].DscAmt / CurrencyRate)

		
		TotalCost						is a DerivedField
			type is like InternationalAmount
			if (InventoryLocation entered)
				initialize LocalCost
				LocalSellToStock = SellUOMItemUOMRel.UOMConversion
				if (InventoryCompanyRel.CostingMethod.StandardCosting)
					LocalCost = (OrderQuantity * LocalSellToStock * ItemLocation.StandardCost)
				else
					LocalCost = (OrderQuantity * LocalSellToStock * ItemLocation.DerivedItemAverageCost)
				
				if (LocalCost = 0
				and Item.KitItem)
					for each KitComponentsRel
						initialize LocalComponentCost
						if(each.StartDate not entered)
							LocalComponentStartDate = current corporate date
						else
							LocalComponentStartDate = each.StartDate

						if(each.StopDate not entered)
							LocalComponentStopDate = LocalComponentStartDate
						else
							LocalComponentStopDate = each.StopDate

						LocalItem = each.ComponentItem
						if (KitComponentsValidRel exists)
							if (InventoryCompanyRel.CostingMethod.StandardCosting)
								LocalComponentCost = (OrderQuantity * KitComponentsValidRel.Quantity * ComponentItemLocationRel.StandardCost)
							else
								LocalComponentCost = (OrderQuantity * KitComponentsValidRel.Quantity * ComponentItemLocationRel.DerivedItemAverageCost)
						LocalCost += LocalComponentCost

				return LocalCost

		TotalCostMsg					is a DerivedField
			type is MessageField
			if (InventoryLocation not entered)
				return TotalNoCostMsg
			else
			if (InventoryLocation entered
			and TotalCost = 0)
				return TotalNoCostOnLocationMsg
		
		TotalNoCostMsg					is a MessageField
			"Non_\Stock_\Item"

		TotalNoCostOnLocationMsg		is a MessageField
			"No_\Cost_\On_\Location"
				
		GrossAmountBase					is a DerivedField
			type is like InternationalCost
				precision is Item.NumberOfDecimalsPrice
			include ConvertQuantity			
			return (LocalQuantityInSellPriceUOM * UnitPrice)

		GrossAmountCurrency				is a DerivedField
			type is like InternationalCost
				precision is Item.NumberOfDecimalsPrice
			include ConvertQuantity			
			return (LocalQuantityInSellPriceUOM * UnitPriceCurrency)
	
		NetAmountBase					is a DerivedField
			type is like InternationalAmount
			return (GrossAmountBase - DiscountAmount)

		NetAmountCurrency				is a DerivedField
			type is like InternationalAmount
			return (GrossAmountCurrency - DiscountAmountCurrency)

		Profit							is a DerivedField
			type is like InternationalAmount
			return (NetAmountBase - TotalCost)

		ProfitCurrency					is a DerivedField
			type is like InternationalAmount
			return (NetAmountCurrency - TotalCost)

		ProfitMargin					is a DerivedField
			type is like Percent 
			return (Profit/NetAmountBase)

		ProfitMarginCurrency			is a DerivedField
			type is like Percent 
			return (ProfitCurrency/NetAmountCurrency)


		DerivedQuantity		is a DerivedField
			type is like Quantity
			if(SellingPriceUOM entered)
				if (SellingPriceUOM = Item.StockUOM
				or  SellingPriceUOM = Item.DefaultSellPriceUOMRel.UnitOfMeasure)
					return OrderQuantity
				else
					initialize UOMCalculation 
					UOMCalculation.InputUOM		 	= SellingPriceUOM
					UOMCalculation.InputQuantity 	= OrderQuantity
					UOMCalculation.Method		 	= UOMCalculation.Method.ConvertToStock
					
					return UOMCalculation.OutputQuantity
								
		DerivedUnitPrice1		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[1].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[1].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[1].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[1].SellPrice
					
		DerivedUnitPrice2		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[2].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[2].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[2].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[2].SellPrice

		DerivedUnitPrice3		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[3].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[3].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[3].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[3].SellPrice

		DerivedUnitPrice4		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[4].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[4].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[4].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[4].SellPrice

		DerivedUnitPrice5		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[5].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[5].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[5].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[5].SellPrice

		DerivedUnitPrice6		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[6].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[6].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[6].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[6].SellPrice

		DerivedUnitPrice7		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[7].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[7].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[7].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[7].SellPrice

		DerivedUnitPrice8		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[8].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[8].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[8].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[8].SellPrice

		DerivedUnitPrice9		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[9].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[9].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[9].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[9].SellPrice

		DerivedUnitPrice10		is a DerivedField
			type is like UnitPrice
			include CalculateUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[10].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[10].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[10].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[10].SellPrice

		DerivedQuantityBreakLimitUnitPrice1		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[1].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[1].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[1].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[1].SellPrice
					
		DerivedQuantityBreakLimitUnitPrice2		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[2].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[2].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[2].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[2].SellPrice

		DerivedQuantityBreakLimitUnitPrice3		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[3].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[3].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[3].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[3].SellPrice

		DerivedQuantityBreakLimitUnitPrice4		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[4].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[4].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[4].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[4].SellPrice

		DerivedQuantityBreakLimitUnitPrice5		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[5].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[5].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[5].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[5].SellPrice

		DerivedQuantityBreakLimitUnitPrice6		is a DerivedField
			type is like UnitPrice
			include CalculateQuantityBreakUnitPrices
			if (not IsBaseCurrency)
				if (LocalUOMPrice.SellPriceByUOM[6].SellPrice entered)
					LocalInputCurrencyAmount						= LocalUOMPrice.SellPriceByUOM[6].SellPrice
					include CurrencyConversion
					LocalUOMPrice.SellPriceByUOM[6].SellPrice		= LocalOutputCurrencyAmount

			return LocalUOMPrice.SellPriceByUOM[6].SellPrice

		DerivedQuantity1	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=1)
				return LocalQuantityInSellPriceUOM

		DerivedQuantity2	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=2)
				return LocalQuantityInSellPriceUOM

		DerivedQuantity3	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=3)
				return LocalQuantityInSellPriceUOM
	
		DerivedQuantity4	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=4)
				return LocalQuantityInSellPriceUOM	

		DerivedQuantity5	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=5)
				return LocalQuantityInSellPriceUOM	

		DerivedQuantity6	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=6)
				return LocalQuantityInSellPriceUOM	

		DerivedQuantity7	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=7)
				return LocalQuantityInSellPriceUOM

		DerivedQuantity8	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=8)
				return LocalQuantityInSellPriceUOM	

		DerivedQuantity9	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=9)
				return LocalQuantityInSellPriceUOM

		DerivedQuantity10	is a DerivedField
			type is like Quantity
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=10)
				return LocalQuantityInSellPriceUOM

		DerivedLastUOM1	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure
			
		DerivedCurrentUOM1	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure 
		DerivedNextUOM1	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure
		DerivedLastUOM2	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure
	
		DerivedCurrentUOM2	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure 
		DerivedNextUOM2	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[2].UnitOfMeasure
		DerivedLastUOM3	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure
		DerivedCurrentUOM3	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure
		DerivedNextUOM3	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[3].UnitOfMeasure
		DerivedLastUOM4	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure
		DerivedCurrentUOM4	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure
		DerivedNextUOM4	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[4].UnitOfMeasure
		DerivedLastUOM5	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure
		DerivedCurrentUOM5	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure
		DerivedNextUOM5	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[5].UnitOfMeasure
		DerivedLastUOM6	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure
		DerivedCurrentUOM6	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure
		DerivedNextUOM6	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[6].UnitOfMeasure
		DerivedLastUOM7	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure
		DerivedCurrentUOM7	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure
		DerivedNextUOM7	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[7].UnitOfMeasure
		DerivedLastUOM8	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure
		DerivedCurrentUOM8	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure
		DerivedNextUOM8	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[8].UnitOfMeasure
		DerivedLastUOM9	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure
		DerivedCurrentUOM9	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure
		DerivedNextUOM9	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[9].UnitOfMeasure
		DerivedLastUOM10	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure)
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure
		DerivedCurrentUOM10	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure)
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure
		DerivedNextUOM10	is a DerivedField
			type is Alpha 50
			include SetSellingPriceUOM
			if (LocalSellingPriceUOM = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure+"*"
			else
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[10].UnitOfMeasure

	
			
		DerivedAmountForUOM1					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=1)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice1)

		DerivedAmountForUOM2					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=2)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice2)

		DerivedAmountForUOM3					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=3)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice3)

		DerivedAmountForUOM4					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=4)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice4)

		DerivedAmountForUOM5					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=5)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice5)

		DerivedAmountForUOM6					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=6)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice6)

		DerivedAmountForUOM7					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=7)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice7)

		DerivedAmountForUOM8					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=8)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice8)

		DerivedAmountForUOM9					is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=9)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice9)

		DerivedAmountForUOM10				is a DerivedField
			type is like InternationalCost
			include SetSellingPriceUOM
			include ConvertQuantity
			if (I3=10)
				return (LocalQuantityInSellPriceUOM*DerivedUnitPrice10)


				
		TotalAmount						is a DerivedField
			type is like InternationalCost
			return (DerivedAmountForUOM1+DerivedAmountForUOM2+DerivedAmountForUOM3+DerivedAmountForUOM4+DerivedAmountForUOM5+DerivedAmountForUOM6+DerivedAmountForUOM7+DerivedAmountForUOM8+DerivedAmountForUOM9+DerivedAmountForUOM10)
		
		EmptyString						is a StringField
			type is Alpha 5
			" "
	Field Rules
		
		Company
			required

		Customer
			required

		Item
			required

		Option
			required

		OrderQuantity
			required

		InventoryLocation
			if (Company.LocationBasedPricing)
				required
					"LocationRequired;CompanyOptionIsLocationBasedPricing"
			else
				cannot be entered
					"CannotEnterLocation;CompanyOptionIsNotLocationBasedPricing"

		Currency
			if (!Company.MultipleCurrency)
				default to Company.Currency
				constraint (Currency = Company.Currency)
					"CompanyDoesNotAllowMultipleCurrencies;CurrencyMustBeBaseCurrency"
			else
				default to CompanyCustomer.Currency
			

		SellingPriceUOM
			if (SellingPriceUOM entered)
				constraint (SellingPriceItemUOMRel exists)
					"<SellingPriceUOM>IsAnInvalidSellUnitOfMeasure"
			 
			if (Item.AlternateUOMRel not exists)
			 	default to Item.DefaultSellPriceUOMRel.UnitOfMeasure

		SellUOM
			if (Company.UnitOfMeasureRequired)
				required
					"CompanyRequiresUnitOfMeasureToBeEntered"
			default to Item.DefaultSellingUOMRel.UnitOfMeasure
			if (SellUOM entered)
				constraint (SellUOMItemUOMRel exists)
					"<SellUOM>IsAnInvalidSellUnitOfMeasure"

		PriceDate
			default to current corporate date

		ListName
			if (Option.PriceList
			or  Option.Promotion)
				default to CustomerShipTo.ListName
				default to CompanyCustomer.OrderEntryCustomer.PriceList
				required
					"PriceListIsRequired"
			else
				cannot be entered
					"PriceListNotRequiredAs_OptionIsNotPriceList"

		Promotion
			if (Option.Promotion)
				required
					"PromotionIsRequired"
			else
				cannot be entered
					"PromotionNotRequiredAs_OptionIsNotPromotion"

		ContractNumber
			if (Option.Contract)
				required
					"ContractIsRequired"
			else
				cannot be entered
					"ContractNotRequiredAs_OptionIsNotContract"

		CurrencyRate
			if (Currency = Company.Currency)
				force default to 1
			else
				initialize LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency		= Company.Currency
				LocalCurrencyRelationAndRate 			= LocalCurrencyExchange.IsRateDefined
				force default to LocalCurrencyExchange.OutputCurrencyRate


	Actions

		Create is a Create Action
			Exit Rules
				include CalculatePricing
			
		Update is an Update Action
			Exit Rules
				include CalculatePricing

		Delete is a Delete Action
		
		MassDelete is a Set Action
			Parameters
				PrmCompany		is a BillingCompany
					default label is "Company"

			Instance Selection
				where (Company = PrmCompany
				or    PrmCompany not entered)

			Action Rules

				Instance Rules
					invoke Delete
