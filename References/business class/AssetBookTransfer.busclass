AssetBookTransfer is a BusinessClass
    owned by am
    prefix is ABT
    classic name is AMASTBKTRF

    Ontology
        symbolic key is AssetBookTransfer
            classic set name is ABTSET1
            classic name for AssetTransfer is PROCESS-SEQ

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex
        
		implements TemplateDriven by AssetBook
			create instance
				when (ToBook entered)
        

    Persistent Fields

        ToAsset                              is an Asset
        ToBook                               is a Book
        Active                               is Boolean
            classic name is BOOK-STATUS
        Currency
            classic name is BOOK-CURR
        ToBookCurrency                       is a Currency
            classic name is TO-BOOK-CURR
        BookCurrencyNumberOfDecimals         is a BaseNumberOfDecimals
            classic name is BOOK-CURR-ND
        ToBookCurrencyNumberOfDecimals       is a BaseNumberOfDecimals
            classic name is TO-BK-CURR-ND
        Life
        LifeRemaining
            classic name is LIFE-REM
        Basis                                is an InternationalAmount
            classic name is BOOK-BASIS
        FromBookBasis                        is an InternationalAmount
            classic name is FR-BOOK-BASIS
            	precision is BookNumberOfDecimals
        ToBasis                              is an InternationalAmount
            classic name is TO-BOOK-BASIS
        Method
        DepreciationMethodSwitched           is Boolean
            classic name is METH-SWITCHED
        InServiceDate                        is Date
            classic name is INSRV-DATE
        YearPlacedInService
            classic name is METH-TABLE-YR
        Convention
        DepreciationStartDate                is Date
            classic name is DEPR-STARTDATE
        LifeInYears
            classic name is LIFE-YEARS
        CurrentPeriodDepreciationCalculated  is Boolean
            sql name is CPeriodDepreciationCalculated
            classic name is STATUS-CP-CALC
        CurrentPeriodPortionOfLife
            classic name is LIFE-CP
        TransactionNumberOfDecimals          is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        ToTransactionNumberOfDecimals        is a CurrencyNumberOfDecimals
            classic name is TO-TRAN-ND
        CurrentPeriodDepreciation            is an InternationalAmount
            classic name is DEPR-CP
        FromCurrentPeriodDepreciation        is an InternationalAmount
            classic name is FR-DEPR-CP
            	precision is BookNumberOfDecimals
        ToCurrentPeriodDepreciation          is an InternationalAmount
            classic name is TO-DEPR-CP
        CurrentPeriodDepreciationAllowed     is an InternationalAmount
            sql name is CPeriodDepreciationAllowed
            classic name is DEPR-CP-ALLOW
        FromCurrentPeriodDepreciationAllowed is an InternationalAmount
            sql name is FCPeriodDepreciationAllowed
            classic name is FR-DP-CP-ALLOW
            	precision is BookNumberOfDecimals

        ToCurrentPeriodDepreciationAllowed   is an InternationalAmount
            sql name is TCPeriodDepreciationAllowed
            classic name is TO-DP-CP-ALLOW
        YearToDateDepreciation               is an InternationalAmount
            classic name is DEPR-YTD
        FromYearToDateDepreciation           is an InternationalAmount
            classic name is FR-DEPR-YTD
            	precision is BookNumberOfDecimals
        ToYearToDateDepreciation             is an InternationalAmount
            classic name is TO-DEPR-YTD
        YearToDateDepreciationAllowed        is an InternationalAmount
            classic name is DEPR-YTD-ALLOW
        FromYearToDateDepreciationAllowed    is an InternationalAmount
            sql name is FYearToDateDepreciationAllowed
            classic name is FR-DP-YTD-ALLO
            	precision is BookNumberOfDecimals
        ToYearToDateDepreciationAllowed      is an InternationalAmount
            sql name is TYearToDateDepreciationAllowed
            classic name is TO-DP-YTD-ALLO
        YearToDateDepreciationOverride       is an InternationalAmount
            classic name is DEPR-YTD-OVRRD
        FromYearToDateDepreciationOverride   is an InternationalAmount
            sql name is FYToDateDepreciationOverride
            classic name is FR-DP-YTD-OVRD
            	precision is BookNumberOfDecimals
        ToYearToDateDepreciationOverride     is an InternationalAmount
            sql name is TYToDateDepreciationOverride
            classic name is TO-DP-YTD-OVRD
        LifeToDateDepreciation               is an InternationalAmount
            classic name is DEPR-LTD
        FromLifeToDateDepreciation           is an InternationalAmount
            classic name is FR-DEPR-LTD
            	precision is BookNumberOfDecimals
        ToLifeToDateDepreciation             is an InternationalAmount
            classic name is TO-DEPR-LTD
        LifeToDateDepreciationAllowed        is an InternationalAmount
            classic name is DEPR-LTD-ALLOW
        FromLifeToDateDepreciationAllowed    is an InternationalAmount
            sql name is FLifeToDateDepreciationAllowed
            classic name is FR-DP-LTD-ALLO
            	precision is BookNumberOfDecimals
        ToLifeToDateDepreciationAllowed      is an InternationalAmount
            sql name is TLifeToDateDepreciationAllowed
            classic name is TO-DP-LTD-ALLO
        LastClosedPeriodBalance              is an InternationalAmount
            classic name is LAST-CLOSE
        FromLastClosedPeriodBalance          is an InternationalAmount
            classic name is FR-LAST-CLOSE
            	precision is BookNumberOfDecimals
        ToLastClosedPeriodBalance            is an InternationalAmount
            classic name is TO-LAST-CLOSE
        FirstAndLastYear
            classic name is FIRST-LAST-FL
        YearToDateInactiveMonths
            classic name is INACT-YTD
        LifeToDateInactiveMonths
            classic name is INACT-LTD
        SalvageValue                         is an InternationalAmount
        FromSalvageValue                     is an InternationalAmount
            classic name is FR-SALV-VALUE
            	precision is BookNumberOfDecimals
        ToSalvageValue                       is an InternationalAmount
            classic name is TO-SALV-VALUE
        BusinessPercent
            classic name is BUS-PERCENT
        PersonalUseCode
            classic name is PERSONAL-USE
            context of Book
        FirstYearExpenseAmount               is an InternationalAmount
            classic name is YR1-EXP
        FromFirstYearExpenseAmount           is an InternationalAmount
            classic name is FR-YR1-EXP
        ToFirstYearExpenseAmount             is an InternationalAmount
            classic name is TO-YR1-EXP
        AssetTaxCreditTable
            classic name is TC-TABLE
        TaxCreditPropertyAmount              is an InternationalAmount
            classic name is TC-PROPERTY
        FromTaxCreditPropertyAmount          is an InternationalAmount
            classic name is FR-TC-PROPERTY
        ToTaxCreditPropertyAmount            is an InternationalAmount
            classic name is TO-TC-PROPERTY
        TaxCredit                            is an InternationalAmount
        FromTaxCredit                        is an InternationalAmount
            classic name is FR-TAX-CREDIT
        ToTaxCredit                          is an InternationalAmount
        InsuranceCalculationMethod           is a Method
            classic name is INS-METHOD
        ActualInsuranceValue                 is an InternationalAmount
            classic name is INS-ACT-VAL
        FromActualInsuranceValue             is an InternationalAmount
            classic name is FR-INS-ACT-VAL
        ToActualInsuranceValue               is an InternationalAmount
            classic name is TO-INS-ACT-VAL
        CalculatedInsuranceValue             is an InternationalAmount
            classic name is INS-CMPTD-VAL
        FromCalculatedInsuranceValue         is an InternationalAmount
            classic name is FR-INS-CMPTD
        ToCalculatedInsuranceValue           is an InternationalAmount
            classic name is TO-INS-CMPTD
        ReplacementCalculationMethod         is a Method
            classic name is RPL-METHOD
        CalculatedReplacementValue           is an InternationalAmount
            classic name is RPL-CMPTD-VAL
        FromCalculatedReplacementValue       is an InternationalAmount
            classic name is FR-RPL-CMPTD
        ToCalculatedReplacementValue         is an InternationalAmount
            classic name is TO-RPL-CMPTD


	Transient Fields
		TransientCreateFromBatch			 is Boolean		
		TransientCurrencyExchange			 is Boolean
			derive value from DerviedCurrencyExchange
		
    Derived Fields
    	BookNumberOfDecimals		is a DerivedField	
    		type is like CurrencyNumberOfDecimals
    		restricted
    		if (AssetBookRel exists)
    			return Book.TransactionNumberOfDecimals
    		else
    			return ToBook.TransactionNumberOfDecimals		
    		

        AssetTransferDate             is a StringField
            type is Alpha size 8
            restricted
            classic name is TRF-TRF-DATE
            AssetTransferRel.TransferDate

        AssetTransferFullOrPartial    is a StringField
            type is Alpha size 1
            restricted
            classic name is TRF-FULL-PART
            AssetTransferRel.FullOrPartial

        AssetTransferType             is a StringField
            type is Alpha size 1
            restricted
            classic name is TRF-TRF-TYPE
            AssetTransfer.TransferType

        AssetTagNumber                is a StringField
            type is Alpha size 12
            restricted
            classic name is AST-TAG-NBR
            AssetTransferRel.TagNumber

        AssetTransferToAssetTagNumber is a StringField
            type is Alpha size 12
            restricted
            classic name is TO-AST-TAG
            AssetTransferRel.AssetTransferTo.ToTagNumber

        AssetTransferAssetGroup       is a StringField
            type is Alpha size 10
            restricted
            classic name is AST-ASSET-GRP
            AssetTransferRel.AssetGroup

        AssetTransferToAssetGroup     is a StringField
            type is Alpha size 10
            restricted
            classic name is TO-AST-GROUP
            AssetTransferRel.AssetTransferTo.ToAssetGroup

        BookCurrency                  is a StringField
            type is Alpha size 5
            restricted
            Book.Currency

        AssetTransferCreateDate       is a StringField
            type is Alpha size 8
            restricted
            classic name is TRF-CREAT-DATE
            AssetTransferRel.CreationDate

        AssetTransferCreateTime       is a StringField
            type is Alpha size 6
            restricted
            classic name is TRF-CREAT-TIME
            AssetTransferRel.CreationDate time

        AssetTransferCreatedBy        is a StringField
            type is Alpha size 10
            restricted
            classic name is TRF-CREATOR-ID
            AssetTransferRel.CreatedBy
            
		TransferMessage						is a MessageField
			restricted
			"Transfer"
		IntraCompanyFullTransferMessage		is a MessageField
			restricted
			"Asset_<Asset>_IntraCompanyFullTransfer"
		IntraCompanyPartialTransferMessage	is a MessageField
			restricted
			"Asset_<Asset>_IntraCompanyPartialTransfer"
		InterCompanyFullTransferMessage		is a MessageField
			restricted
			"Asset_<Asset>_FullInterCompanyTransfer"
		InterCompanyPartialTransferMessage	is a MessageField
			restricted
			"Asset_<Asset>_InterCompanyPartialTransfer"
            
    	DerivedCurrency						is a DerivedField
    		type is like Currency
    		restricted
   			if (LocalTransactionBook.PostCurrency.Book)
				return LocalTransactionBook.Currency
			else
				return LocalTransactionAsset.Currency 
		
		DerivedTransactionCurrency						is a DerivedField
			type is like Currency
			if(Book.PostCurrency.Book)
				return Book.Currency
			else
				return Asset.Currency

    	DerivedNumberOfDecimals				is a DerivedField
    		type is like CurrencyNumberOfDecimals
    		restricted
   			if (LocalTransactionBook.PostCurrency.Book)
				return LocalTransactionBook.Currency.NumberOfDecimals
			else
				return LocalTransactionAsset.Currency.NumberOfDecimals
		
		DerviedCurrencyExchange		is a DerivedField
			type is Boolean
			restricted
			if ((Book.PostCurrency.Asset
			and Asset.Currency != Book.Currency)
			or (ToBook.PostCurrency.Asset
			and ToAsset.Currency != ToBook.Currency))
				return true
				
		DerivedToBasis is a DerivedField
	    	type is like InternationalAmount
	    		precision is ToBookCurrencyNumberOfDecimals
	    	return ToBasis

 	Conditions






		HasTagNumber
			when (Asset.TagNumber entered)
		
		IsImpairmentBook
			when (!Book.Impairment
			and ImpairmentAssetBookTransferRel exists)
			
		IsUnreleased
			when (AssetTransfer.TransferStatusNotReleased)	
								
    Relations

        AssetTransferRel
            classic name is AMASSETTRF
            one-to-one relation to AssetTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= AssetTransfer
                
		AssetBookTransferRel
            classic name is AMASTBKTRF
            one-to-one relation to AssetBookTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= AssetTransfer
                related.Book                	= LocalBook

        AssetBookRel
            classic name is AMASTBOOK
            one-to-one relation to AssetBook
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= AssetTransfer.Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.Asset
                related.Book  					= Book

 		FromAssetBookRel
            classic name is AMASTBOOK
            one-to-one relation to AssetBook
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= AssetTransfer.Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.Asset
                related.Book  					= LocalBook
 
        TransferToAssetBookRel
        	one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup        	
        		related.Asset 					= LocalToAsset
        		related.Book					= ToBook
         
        ToAssetBookRel
        	one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup        	
        		related.Asset 					= Asset
        		related.Book					= ToBook

		ToBookRel 
			one-to-one relation to Book
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup        	
        		related.Book					= ToBook			

		LocalResetAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= Asset
        		related.Book					= LocalResetBook
	
		LocalTransactionAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.AssetTransferTo.ToAsset
        		related.Book					= LocalTransactionBook
        		
		LocalToAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.Asset
        		related.Book					= ToBook
        		
		LocalFromAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.Asset
        		related.Book					= LocalFrPostBook			
		
		LocalAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= AssetTransfer.Asset
        		related.Book					= Book			
		
        FromBookCalendarCurrentRel
        	one-to-many relation to BookCalendar
        	Field Mapping uses Set4
        		related.Company					= AssetTransfer.Company
        		related.Book					= Book
			Instance Selection
				where (related.BookCalendar.CalendarStatus = "C")

        ToBookCalendarCurrentRel
        	one-to-many relation to BookCalendar
        	Field Mapping uses Set4
        		related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
        		related.Book					= ToBook
			Instance Selection
				where (related.BookCalendar.CalendarStatus = "C")
                  
		CurrentBookCalendarsRel4
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.Company

		CurrentTransferBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.Company
				related.Book					= Book
				
		CurrentBookCalendarsRel4To
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany

		ToCompanyCurrentPostingWithLedgerRel
			one-to-many relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook	
				related.Company		= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.PostingBook	= FromBookCalendarCurrentRel.PostingBook
			Instance Selection	
				where (related.YearBeginDate = CurrentTransferBookCalendarsRel.YearBeginDate
				and related.Book.Ledger			= FromBookCalendarCurrentRel.Book.Ledger)		

		ToCompanyCurrentBookWithLedgerRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4	
				related.Company		= AssetTransfer.AssetTransferTo.ToAssetCompany
			Instance Selection	
				where (related.YearBeginDate = CurrentTransferBookCalendarsRel.YearBeginDate
				and related.Book.Ledger		 = FromBookCalendarCurrentRel.Book.Ledger
				and (!related.PostingBook))
	
		ToBookCompanyCurrentPostingWithLedgerRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4	
				related.Company		= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book 		= ToBook
			Instance Selection	
				where (related.YearBeginDate = CurrentTransferBookCalendarsRel.YearBeginDate
				and related.Book.Ledger		 = CurrentTransferBookCalendarsRel.Book.Ledger
				and related.Book.Currency	 = Book.Currency
				and related.PostingBook)		

		ToBookCompanyCurrentBookWithLedgerRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4	
				related.Company		= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book 		= ToBook
			Instance Selection	
				where (related.YearBeginDate = CurrentTransferBookCalendarsRel.YearBeginDate
				and related.Book.Ledger		 = CurrentTransferBookCalendarsRel.Book.Ledger
				and related.Book.Currency	 = Book.Currency
				and (!related.PostingBook))
		
		FromBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= Book
			Instance Selection
				where (related.PostingBook 		= FromBookCalendarCurrentRel.PostingBook	
				and related.Book.Ledger			= FromBookCalendarCurrentRel.Book.Ledger)		

		FromNonPostingBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= Book
			Instance Selection
				where (related.Book.Ledger		= FromBookCalendarCurrentRel.Book.Ledger
				and (!related.PostingBook))	
		
		ToCompanyCurrentCalendarTransferDateRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= ToBook
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearEndDate >= AssetTransfer.TransferDate
				and related.BookCalendar.YearBeginDate <= AssetTransfer.TransferDate)	

		CurrentToBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= ToBook

		ToCompanyFutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= ToBook
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearEndDate >= AssetTransfer.TransferDate)

		FromRequiredBooksRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.Company		
			Instance Selection
				where (related.RequiredBook)
				
		ToRequiredBooksRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany	
			Instance Selection
				where (related.RequiredBook)

		ToCompanyHistoryBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= ToBook
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearBeginDate <= AssetTransfer.TransferDate)
										
		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.Company
				related.Book					= LocalBook
         
   		CurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.Company
				related.Book					= Book 
                
		ToAssetAccountACMRel
            classic name is AMACCOUNT-ACM
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = AssetTransfer.AssetTransferTo.ToAssetCompany	
                related.AssetAccountGroup             = AssetTransfer.AssetTransferTo.ToAssetAccountGroup
                related.AssetType.Type                = AssetTransfer.AssetTransferTo.ToAssetType.Type
                related.AssetType.SubType             = AssetTransfer.AssetTransferTo.ToAssetType.SubType
                related.AssetAccount.AssetAccountType = "ACM"
                related.AssetAccount.AssetEvent       = blank
                
		FromAssetAccountACMRel
            classic name is AMACCOUNT-ACM
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = AssetTransfer.Company	
                related.AssetAccountGroup             = AssetTransfer.AssetAccountGroup
                related.AssetType.Type                = AssetTransfer.AssetType.Type
                related.AssetType.SubType             = AssetTransfer.AssetType.SubType
                related.AssetAccount.AssetAccountType = "ACM"
                related.AssetAccount.AssetEvent       = blank                

        ToAssetAccountASTRel
            classic name is AMACCOUNT-AST
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = AssetTransfer.AssetTransferTo.ToAssetCompany
                related.AssetAccountGroup             = AssetTransfer.AssetTransferTo.ToAssetAccountGroup
                related.AssetType.Type                = AssetTransfer.AssetTransferTo.ToAssetType.Type
                related.AssetType.SubType             = AssetTransfer.AssetTransferTo.ToAssetType.SubType
                related.AssetAccount.AssetAccountType = "AST"
                related.AssetAccount.AssetEvent       = blank  
                              
		FromAssetAccountASTRel
            classic name is AMACCOUNT-ACM
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = AssetTransfer.Company	
                related.AssetAccountGroup             = AssetTransfer.AssetAccountGroup
                related.AssetType.Type                = AssetTransfer.AssetType.Type
                related.AssetType.SubType             = AssetTransfer.AssetType.SubType
                related.AssetAccount.AssetAccountType = "AST"
                related.AssetAccount.AssetEvent       = blank   
                
		FromCompanyTransRel    
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= Asset
                related.TransactionStatus		= "R"
                related.Company					= AssetTransfer.Company	
                related.Book 					= Book
			Instance Selection
				where (related.AssetProcess = "ADD"
                and   (related.AssetAccountType = "AST"
                or     related.AssetAccountType = "CLR"))

		FromCompanyCLRTransRel    
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= Asset
                related.TransactionStatus		= "R"
                related.Company					= AssetTransfer.Company	
                related.Book 					= Book
			Instance Selection
				where (related.AssetProcess = "ADD"
                and   related.AssetAccountType = "CLR")
			
		FromCompanyASTTransRel    
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= Asset
                related.TransactionStatus		= "R"
                related.Company					= AssetTransfer.Company	
                related.Book 					= Book
			Instance Selection
				where (related.AssetProcess = "ADD"
                and   related.AssetAccountType = "AST")

		ToAssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= ToAsset.FinanceEnterpriseGroup			
				related.Asset					= ToAsset		

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup			
				related.Asset					= Asset	
												
		FromAssetUnreleasedAssetTransactionsRel    
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= Asset
                related.TransactionStatus		= "U"
                related.Company					= AssetTransfer.Company	
                related.Book 					= Book

		ToAssetUnreleasedAssetTransactionsRel    
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= ToAsset
                related.TransactionStatus		= "U"
                related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
                related.Book 					= ToBook

		OldToCompanyUnreleasedAssetTransactionsRel
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= Asset
                related.TransactionStatus		= "U"
                related.Company					= LocalOriginalToCompany
                related.Book 					= ToBook		

		OldToCompanyToAssetUnreleasedTransactionsRel
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset					= ToAsset
                related.TransactionStatus		= "U"
                related.Company					= LocalOriginalToCompany
                related.Book 					= ToBook	
                		
		OldToCompanyUnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set3
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= LocalOriginalToCompany		
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Book					= ToBook
				related.Asset					= Asset				
		
		OldToCompanyToAssetUnreleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set3
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= LocalOriginalToCompany		
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Book					= ToBook
				related.Asset					= ToAsset	

		FromAssetUnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set3
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= AssetTransfer.Company
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Book					= Book
				related.Asset					= Asset
				
		ToAssetUnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set3
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany				
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Book					= ToBook
				related.Asset					= ToAsset
				

		AssetBookPurgeRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
		      	related.Book						= LocalBook
		    Instance Selection
		    	include deleted records
		
				
		AssetFromDepreciationBookRel
			one-to-many relation to Book
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            Instance Selection
        		where (related.ImpairmentBook	= Book)
        
        AssetToDepreciationBookRel
			one-to-many relation to Book
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            Instance Selection
        		where (related.ImpairmentBook	= ToBook)
        
        ImpairmentAssetBookTransferRel
        	one-to-one relation to AssetBookTransfer
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            	related.Asset					= Asset
            	related.AssetTransfer 			= AssetTransfer
            	related.Book					= Book.ImpairmentBook
		
		AssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup						
				related.Asset						= Asset
				related.AssetImpairment				= AssetTransfer.Asset.LastAssetImpairment
				related.Book						= LocalBook
		
		ToAssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= AssetTransfer.AssetTransferTo.ToAsset
				related.AssetImpairment				= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
				related.Book						= first AssetToDepreciationBookRel.Book

    Sets


        Set2
            indexed
            Sort Order
                Asset
                Book
                AssetTransfer

        Set3
            indexed
            Sort Order
                Asset
                AssetTransfer
                ToBook
                Book


	Local Fields
		LocalTransactionStatus							is AlphaUpper size 1
		LocalReference									is a Reference
		LocalExchangeDate								is an ExchangeDate
		LocalCurrency									is a FromCurrency
		LocalCurrencyAmount								is a CurrencyAmount


		CurrencyWork									is a FromCurrencyExchangeGroup
		LocalToCurrency									is a ToCurrency
		LocalToAsset									is an Asset
		LocalToAssetAccount								is a FinanceCodeBlock
		LocalToAccumulatedDepreciationAccount			is a FinanceCodeBlock
		LocalToClearingAccount							is a FinanceCodeBlock
		LocalFromAssetAccount							is a FinanceCodeBlock
		LocalFromAccumulatedDepreciationAccount			is a FinanceCodeBlock
		LocalFromClearingAccount						is a FinanceCodeBlock
		LocalResetTransfer								is Boolean
		LocalToPostSW									is Boolean
		LocalFromPostSW									is Boolean
		LocalFrPostBook									is a Book
		LocalToPostBook									is a Book
		LocalResetBook									is a Book
		LocalTranDesc									is a Description 
		LocalBook										is a Book
		LocalAsset										is an Asset
		LocalProcessSequence							is a Sequence
		LocalTransactionAmount							is an InternationalAmount
		LocalAccountType								is AlphaUpper 3
		LocalFromUpdatesDoneFlag						is Boolean	
		ASTUpdate										is Boolean							
		ACMUpdate										is Boolean
		CLRUpdate										is Boolean
		LocalTransactionAsset							is an Asset
		LocalTransactionBook							is a Book
		LocalOriginalToCompany							is like Company
		LocalTransactionDate							is Date
		LocalFinanceEnterpriseGroup						is like FinanceEnterpriseGroup
		BypassActiveCodeBlockEdit

	Field Rules




		ToBook
			initial value is Book
		
				
		Active
			initial value is true

		Method
			initial value is AssetBookRel.Method
			default to AssetBookRel.Method

		Life
			initial value is AssetBookRel.Life
			default to AssetBookRel.Life

		LifeRemaining
			initial value is AssetBookRel.LifeRemaining
			default to AssetBookRel.LifeRemaining

		InServiceDate
			initial value is AssetBookRel.InServiceDate
			default to AssetBookRel.InServiceDate

		Convention
			initial value is AssetBookRel.Convention
			default to AssetBookRel.Convention

		Basis
			initial value is AssetBookRel.Basis
			default to AssetBookRel.Basis

		Currency
			if (Book.PostCurrency.Book)
				Currency = BookCurrency
			else
				Currency = Asset.Currency

		ToBookCurrency
			if (ToBook entered)
				if (ToBook.PostCurrency.Book)
					ToBookCurrency = ToBook.Currency
				else
					ToBookCurrency = Asset.Currency
			else 
				ToBookCurrency = Book.Currency
						
		BookCurrencyNumberOfDecimals
			if (Book.PostCurrency.Book)
				BookCurrencyNumberOfDecimals = Currency.NumberOfDecimals
			else
				BookCurrencyNumberOfDecimals = Asset.Currency.NumberOfDecimals

		ToBookCurrencyNumberOfDecimals
			if (ToBook.PostCurrency.Book)
				ToBookCurrencyNumberOfDecimals = ToBook.Currency.NumberOfDecimals
			else
				ToBookCurrencyNumberOfDecimals = Asset.Currency.NumberOfDecimals

		ToBasis 
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered
				and FromBookBasis entered)
					CurrencyWork.TransactionAmount				= ToBasis
		         	CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					LocalToCurrency                             = ToBookCurrency
					ToBasis										= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					default to FromBookBasis
		
			
		ToCurrentPeriodDepreciation 
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered
				and FromCurrentPeriodDepreciation entered)
					CurrencyWork.TransactionAmount				= FromCurrentPeriodDepreciation 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToCurrentPeriodDepreciation					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromCurrentPeriodDepreciation

		ToCurrentPeriodDepreciationAllowed  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromCurrentPeriodDepreciationAllowed entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromCurrentPeriodDepreciationAllowed 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToCurrentPeriodDepreciationAllowed			= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromCurrentPeriodDepreciationAllowed	

		ToYearToDateDepreciation  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromYearToDateDepreciation entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromYearToDateDepreciation 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToYearToDateDepreciation					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromYearToDateDepreciation
					
		ToYearToDateDepreciationAllowed  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromYearToDateDepreciationAllowed entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromYearToDateDepreciationAllowed 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToYearToDateDepreciationAllowed				= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromYearToDateDepreciationAllowed	
								
		ToYearToDateDepreciationOverride  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromYearToDateDepreciationOverride entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromYearToDateDepreciationOverride 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToYearToDateDepreciationOverride			= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromYearToDateDepreciationOverride
					
		ToLifeToDateDepreciation  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromLifeToDateDepreciation entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromLifeToDateDepreciation 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					LocalToCurrency								= ToBookCurrency
					ToLifeToDateDepreciation					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromLifeToDateDepreciation

		ToLifeToDateDepreciationAllowed  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromLifeToDateDepreciationAllowed entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromLifeToDateDepreciationAllowed 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToLifeToDateDepreciationAllowed				= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromLifeToDateDepreciationAllowed

		ToLastClosedPeriodBalance  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromLastClosedPeriodBalance entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromLastClosedPeriodBalance 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToLastClosedPeriodBalance					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromLastClosedPeriodBalance
					
					
		ToSalvageValue  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromSalvageValue entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromSalvageValue 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToSalvageValue								= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromSalvageValue
					
		ToFirstYearExpenseAmount  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromFirstYearExpenseAmount entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromFirstYearExpenseAmount 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToFirstYearExpenseAmount					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromFirstYearExpenseAmount
					
		ToTaxCreditPropertyAmount  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromTaxCreditPropertyAmount entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromTaxCreditPropertyAmount 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToTaxCreditPropertyAmount					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromTaxCreditPropertyAmount
					
		ToTaxCredit  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromTaxCredit entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromTaxCredit 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToTaxCredit									= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromTaxCredit				

		ToActualInsuranceValue  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromActualInsuranceValue entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromActualInsuranceValue 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToActualInsuranceValue						= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromActualInsuranceValue
					
		ToCalculatedInsuranceValue  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromCalculatedInsuranceValue entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromCalculatedInsuranceValue 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToCalculatedInsuranceValue					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromCalculatedInsuranceValue
					
		ToCalculatedReplacementValue  
			if (Currency !=  ToBookCurrency
			and ToBookCurrency entered
			and FromCalculatedReplacementValue entered)
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)
					CurrencyWork.TransactionAmount				= FromCalculatedReplacementValue 
	         		CurrencyWork.FromCurrency					= Currency
					CurrencyWork.BaseAmount.ToCurrency			= ToBookCurrency
					if (TransientCurrencyExchange)
						LocalExchangeDate = Asset.LastAssetItemPurchaseDate
					else
						LocalExchangeDate = AssetTransferRel.TransferDate

					ToCalculatedReplacementValue				= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				default to FromCalculatedReplacementValue	
		
				
	Rule Blocks
		AccountDefaulting
			initialize LocalToAssetAccount
			initialize LocalToClearingAccount
			initialize LocalToAccumulatedDepreciationAccount
			initialize LocalFromAssetAccount
			initialize LocalFromClearingAccount
			initialize LocalFromAccumulatedDepreciationAccount


			if (AssetTransfer.AssetTransferTo.HasClearingAU)
			 	LocalToClearingAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.ClearingAccountingUnit
			else
				LocalToClearingAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnit        	
			LocalToClearingAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetAccountGroup.CLRDistributionAccount

			if (AssetTransfer.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
			 	LocalFromClearingAccount = AssetTransfer.AssetAccountingUnitGroup.ClearingAccountingUnit
			else
				LocalFromClearingAccount = AssetTransfer.AssetAccountingUnit        	
			LocalFromClearingAccount.GeneralLedgerChartAccount = AssetTransfer.AssetAccountGroup.CLRDistributionAccount



			if (AssetTransfer.AssetTransferTo.HasAccumulatedDepreciationAU)
			 	LocalToAccumulatedDepreciationAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit
			else
				LocalToAccumulatedDepreciationAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnit        	
			LocalToAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetType.ResolveACMDistributionAccount


			if (AssetTransfer.AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit entered)
			 	LocalFromAccumulatedDepreciationAccount = AssetTransfer.AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit
			else
				LocalFromAccumulatedDepreciationAccount = AssetTransfer.AssetAccountingUnit        	
			LocalFromAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetType.ResolveACMDistributionAccount



			if (AssetTransfer.AssetTransferTo.HasAssetAU entered)
				LocalToAssetAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AssetAccountingUnit
			else
				LocalToAssetAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
			LocalToAssetAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetType.ResolveASTDistributionAccount

			if (AssetTransfer.AssetAccountingUnitGroup.AssetAccountingUnit entered)
				LocalFromAssetAccount = AssetTransfer.AssetAccountingUnitGroup.AssetAccountingUnit
			else
				LocalFromAssetAccount = AssetTransfer.AssetAccountingUnit
			LocalFromAssetAccount.GeneralLedgerChartAccount = AssetTransfer.AssetType.ResolveASTDistributionAccount
	
				

			if (AssetTransfer.AssetTransferTo.ToAssetCompany.UseEventAccounts)
				if (AssetTransfer.AssetTransferTo.ToAsset.AssetProcess.Transfer)
					if (AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountASTTransferRel.DistributionAccount entered)
						LocalToAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountASTTransferRel.DistributionAccount
					if (AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountACMTransferRel.DistributionAccount entered)
						LocalToAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountACMTransferRel.DistributionAccount
				else
					if (AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountASTAdjustmentRel.DistributionAccount entered)
						LocalToAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountASTAdjustmentRel.DistributionAccount
					if (AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountACMAdjustmentRel.DistributionAccount entered)
						LocalToAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountACMAdjustmentRel.DistributionAccount


			if (AssetTransfer.Company.UseEventAccounts)			
				if (AssetTransfer.Asset.AssetProcess.Transfer)
					if (AssetTransfer.Asset.AssetType.AssetAccountASTTransferRel.DistributionAccount entered)
						LocalFromAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.AssetType.AssetAccountASTTransferRel.DistributionAccount
					if (AssetTransfer.Asset.AssetType.AssetAccountACMTransferRel.DistributionAccount entered)
						LocalFromAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetType.AssetAccountACMTransferRel.DistributionAccount
				else
					if (AssetTransfer.Asset.AssetType.AssetAccountASTAdjustmentRel.DistributionAccount entered)
						LocalFromAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.Asset.AssetType.AssetAccountASTAdjustmentRel.DistributionAccount
					if (AssetTransfer.Asset.AssetType.AssetAccountACMAdjustmentRel.DistributionAccount entered)
						LocalFromAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.Asset.AssetType.AssetAccountACMAdjustmentRel.DistributionAccount
			
			if (AssetTransfer.AssetTransferTo.ToAsset.AssetProcess.Transfer)
				if (Book.Impairment)
					if (AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss entered)	
						LocalToAssetAccount	= AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss
					else
						constraint (AssetTransfer.AssetTransferTo.ToAssetAccountingUnit entered)
							"ImpairmentLossDimensionsAreRequiredOnToDimensions"
						LocalToAssetAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
					if (AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss entered)	
						LocalToAccumulatedDepreciationAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss
					else
						constraint (AssetTransfer.AssetTransferTo.ToAssetAccountingUnit entered)
							"AccumulatedImpairmentLossDimensionsAreRequiredOnToDimensions"
						LocalToAccumulatedDepreciationAccount = AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
					if(AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountATDImpairmentRel.DistributionAccount entered)
						LocalToAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountATDImpairmentRel.DistributionAccount
					if(AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountATCImpairmentRel.DistributionAccount entered)
						LocalToAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetTransferTo.ToAssetType.AssetAccountATCImpairmentRel.DistributionAccount
		
			if (AssetTransfer.Asset.AssetProcess.Transfer)
				if (Book.Impairment)
					if (AssetTransfer.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss entered)	
						LocalFromAssetAccount = AssetTransfer.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss	
					else
						LocalFromAssetAccount = AssetTransfer.AssetAccountingUnit
					if (AssetTransfer.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss entered)	
						LocalFromAccumulatedDepreciationAccount	= AssetTransfer.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss
					else
						LocalFromAccumulatedDepreciationAccount = AssetTransfer.AssetAccountingUnit	
					if (AssetTransfer.Asset.AssetType.AssetAccountATDImpairmentRel.DistributionAccount entered)
						LocalFromAssetAccount.GeneralLedgerChartAccount	= AssetTransfer.AssetType.AssetAccountATDImpairmentRel.DistributionAccount
					if (AssetTransfer.Asset.AssetType.AssetAccountATCImpairmentRel.DistributionAccount entered)
						LocalFromAccumulatedDepreciationAccount.GeneralLedgerChartAccount = AssetTransfer.AssetType.AssetAccountATCImpairmentRel.DistributionAccount			
		

			if (LocalFromAssetAccount					not = LocalToAssetAccount)
				ASTUpdate = true
			if (LocalFromClearingAccount 				not = LocalToClearingAccount)
				CLRUpdate = true
			if (LocalFromAccumulatedDepreciationAccount not = LocalToAccumulatedDepreciationAccount)
				ACMUpdate = true
		
		CalculateToCosts 
			LocalToCurrency                 = Currency
			if (AssetTransfer.ItemTotalTransactionCost not entered)
				initialize ToBasis
				initialize CurrentPeriodDepreciation
				initialize FromCurrentPeriodDepreciationAllowed
				initialize FromYearToDateDepreciation
				initialize FromYearToDateDepreciationAllowed
				initialize FromYearToDateDepreciationOverride
				initialize FromLifeToDateDepreciation
				initialize FromLifeToDateDepreciationAllowed
				initialize LastClosedPeriodBalance
				initialize FromSalvageValue
				initialize FromFirstYearExpenseAmount
				initialize FromTaxCreditPropertyAmount
				initialize FromTaxCredit
				initialize FromActualInsuranceValue
				initialize FromCalculatedInsuranceValue
				initialize FromCalculatedReplacementValue
			else
				if (AssetTransfer.ItemTotalTransactionCost entered
				and Basis entered)	
					if (Book.Currency = ToBook.Currency
					and ToBook.PostCurrency.Asset)			
						FromBookBasis 	= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost 
					else 
						FromBookBasis 	= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * Basis
					ToBasis			= FromBookBasis
				else
					initialize FromBookBasis
				if (AssetTransfer.ItemTotalTransactionCost entered
				and CurrentPeriodDepreciation entered)
					FromCurrentPeriodDepreciation = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * CurrentPeriodDepreciation
				else
					initialize FromCurrentPeriodDepreciation
	
				if (AssetTransfer.ItemTotalTransactionCost entered
				and CurrentPeriodDepreciationAllowed entered)
					FromCurrentPeriodDepreciationAllowed = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * CurrentPeriodDepreciationAllowed
				else
					initialize FromCurrentPeriodDepreciationAllowed 
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and YearToDateDepreciation entered)
					FromYearToDateDepreciation = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost /AssetTransfer.ItemTotalTransactionCost * YearToDateDepreciation
				else
					initialize FromYearToDateDepreciation 	
			
				if (AssetTransfer.ItemTotalTransactionCost entered
				and YearToDateDepreciationAllowed entered)
					FromYearToDateDepreciationAllowed = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * YearToDateDepreciationAllowed
				else
					initialize FromYearToDateDepreciationAllowed
				
				if (AssetTransfer.ItemTotalTransactionCost entered
				and YearToDateDepreciationOverride entered)
					FromYearToDateDepreciationOverride = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * YearToDateDepreciationOverride
				else
					initialize FromYearToDateDepreciationOverride
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and LifeToDateDepreciation entered)
					FromLifeToDateDepreciation = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * LifeToDateDepreciation

				else
					initialize FromLifeToDateDepreciation
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and LifeToDateDepreciationAllowed entered)
					FromLifeToDateDepreciationAllowed = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * LifeToDateDepreciationAllowed
				else
					initialize FromLifeToDateDepreciationAllowed
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and LastClosedPeriodBalance entered)
					FromLastClosedPeriodBalance	= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * LastClosedPeriodBalance
				else
					initialize FromLastClosedPeriodBalance
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and SalvageValue entered)
					FromSalvageValue = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * SalvageValue
				else
					initialize FromSalvageValue	
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and FirstYearExpenseAmount entered)
					FromFirstYearExpenseAmount = AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * FirstYearExpenseAmount
				else
					initialize FromFirstYearExpenseAmount
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and TaxCreditPropertyAmount entered)
					FromTaxCreditPropertyAmount =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * TaxCreditPropertyAmount
				else
					initialize FromTaxCreditPropertyAmount
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and TaxCredit entered)
					FromTaxCredit =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * TaxCredit
				else
					initialize FromTaxCredit
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and ActualInsuranceValue entered)
					FromActualInsuranceValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * ActualInsuranceValue
				else
					initialize FromActualInsuranceValue
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and CalculatedInsuranceValue entered)
					FromCalculatedInsuranceValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * CalculatedInsuranceValue
				else
					initialize FromCalculatedInsuranceValue
					
				if (AssetTransfer.ItemTotalTransactionCost entered
				and CalculatedReplacementValue entered)
					FromCalculatedReplacementValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * CalculatedReplacementValue
				else
					initialize FromCalculatedReplacementValue
		
		CalculateFromCosts 
			if (AssetTransfer.FullTransfer)	
				FromBookBasis							= AssetBookRel.Basis
				FromCurrentPeriodDepreciation			= AssetBookRel.CurrentPeriodDepreciation
				FromYearToDateDepreciation				= AssetBookRel.YearToDateDepreciation
				FromYearToDateDepreciationAllowed		= AssetBookRel.YearToDateDepreciationAllowed
				FromYearToDateDepreciationOverride		= AssetBookRel.YearToDateDepreciationOverride  
				FromLifeToDateDepreciation				= AssetBookRel.LifeToDateDepreciation

				FromLifeToDateDepreciationAllowed		= AssetBookRel.LifeToDateDepreciationAllowed
				FromLastClosedPeriodBalance				= AssetBookRel.LastClosedPeriodBalance
				FromSalvageValue						= AssetBookRel.SalvageValue
				FromFirstYearExpenseAmount				= AssetBookRel.FirstYearExpenseAmount
				FromTaxCreditPropertyAmount				= AssetBookRel.TaxCreditPropertyAmount
				FromTaxCredit							= AssetBookRel.TaxCredit
				FromActualInsuranceValue				= AssetBookRel.ActualInsuranceValue
				FromCalculatedInsuranceValue			= AssetBookRel.CalculatedInsuranceValue 
				FromCalculatedReplacementValue			= AssetBookRel.CalculatedReplacementValue
			else
				if (AssetTransfer.ItemTotalTransactionCost entered)
					if (AssetBookRel.Basis entered)
						if (Book.Currency = ToBook.Currency)
							FromBookBasis 	= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost 
						else
							FromBookBasis 	= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * Basis
					else
						initialize FromBookBasis
							
					if (AssetBookRel.CurrentPeriodDepreciation entered)
						FromCurrentPeriodDepreciation =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.CurrentPeriodDepreciation
					else
						initialize FromCurrentPeriodDepreciation
						
					if (AssetBookRel.CurrentPeriodDepreciationAllowed entered)
						FromCurrentPeriodDepreciationAllowed =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.CurrentPeriodDepreciationAllowed
					else
						initialize FromCurrentPeriodDepreciationAllowed
		
					if (AssetBookRel.YearToDateDepreciation entered)
						FromYearToDateDepreciation =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.YearToDateDepreciation
					else
						initialize FromYearToDateDepreciation
						
					if (AssetBookRel.YearToDateDepreciationAllowed entered)
						FromYearToDateDepreciationAllowed =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.YearToDateDepreciationAllowed
					else
						initialize FromYearToDateDepreciationAllowed
						
					if (AssetBookRel.YearToDateDepreciationOverride entered)
						FromYearToDateDepreciationOverride =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.YearToDateDepreciationOverride
					else
						initialize FromYearToDateDepreciationOverride
						
					if (AssetBookRel.LifeToDateDepreciation entered)
						FromLifeToDateDepreciation =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.LifeToDateDepreciation
					else
						initialize FromLifeToDateDepreciation
						
					if (AssetBookRel.LifeToDateDepreciationAllowed entered)
						FromLifeToDateDepreciationAllowed =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.LifeToDateDepreciationAllowed
					else
						initialize FromLifeToDateDepreciationAllowed
						
					if (AssetBookRel.LastClosedPeriodBalance entered)
						FromLastClosedPeriodBalance =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.LastClosedPeriodBalance
					else
						initialize FromLastClosedPeriodBalance
						
					if (AssetBookRel.SalvageValue entered)
						FromSalvageValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.SalvageValue
					else
						initialize FromSalvageValue
						
					if (AssetBookRel.FirstYearExpenseAmount entered)
						FromFirstYearExpenseAmount =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.FirstYearExpenseAmount
					else
						initialize FromFirstYearExpenseAmount
						
					if (AssetBookRel.TaxCreditPropertyAmount entered)
						FromTaxCreditPropertyAmount =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.TaxCreditPropertyAmount
					else
						initialize FromTaxCreditPropertyAmount
						
					if (AssetBookRel.TaxCredit entered)
						FromTaxCredit =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.TaxCredit
					else
						initialize FromTaxCredit
						
					if (AssetBookRel.ActualInsuranceValue entered)
						FromActualInsuranceValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.ActualInsuranceValue
					else
						initialize FromActualInsuranceValue
						
					if (AssetBookRel.CalculatedInsuranceValue entered)
						FromCalculatedInsuranceValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.CalculatedInsuranceValue
					else
						initialize FromCalculatedInsuranceValue
						
					if (AssetBookRel.CalculatedReplacementValue entered)
						FromCalculatedReplacementValue =  AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost / AssetTransfer.ItemTotalTransactionCost * AssetBookRel.CalculatedReplacementValue
					else
						initialize FromCalculatedReplacementValue
			
		515SetUpJe
			invoked.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
			invoked.Company						= AssetTransfer.Company
			invoked.Asset						= AssetTransfer.Asset
			invoked.ProcessAsset				= AssetTransfer.Asset
			invoked.Book						= LocalFrPostBook  
			if (LocalFrPostBook.Impairment)
				invoked.AssetImpairment			= LocalFromAssetBookRel.DerivedAssetImpairment			
			invoked.Description					= LocalTranDesc
			invoked.TransactionStatus			= LocalTransactionStatus
			invoked.AssetAccountGroup			= AssetTransfer.AssetAccountGroup
			invoked.AssetType					= AssetTransfer.AssetType
			invoked.AssetProcess				= "TRF" 
			LocalTransactionAsset				= AssetTransfer.Asset
			LocalTransactionBook				= LocalFrPostBook
			invoked.TransactionAmount			= LocalTransactionAmount
			invoked.TransientBookCurrency		= DerivedCurrency
			invoked.AssetTransactionAmount.TransactionAmount 		= LocalTransactionAmount
			invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
			invoked.TransactionNumberOfDecimals	= DerivedNumberOfDecimals
			if (TransientCurrencyExchange)
				LocalTransactionDate = Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate = AssetTransferRel.TransferDate
			invoked.TransactionDate				= LocalTransactionDate
			if (AssetTransfer.PostingDate entered)
				invoked.PostingDate				= AssetTransfer.PostingDate
			else
				invoked.PostingDate				= AssetTransfer.TransientPostingDate
			invoked.ProcessDate					= AssetTransfer.TransferDate
			invoked.AssetTransactionAmount.ExchangeDate	  	= LocalTransactionDate
			
		516SetUpJe		
			invoked.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
			invoked.Company						= AssetTransfer.Company
			invoked.Asset						= AssetTransfer.Asset
			invoked.Book						= Book
			if (LocalFrPostBook.Impairment)
				invoked.AssetImpairment			= LocalAssetBookRel.DerivedAssetImpairment		
			invoked.TransactionStatus			= "U"
			invoked.AssetProcess				= "TRF"
			LocalTransactionAsset				= AssetTransfer.Asset
			LocalTransactionBook				= Book
			invoked.TransactionAmount			= LocalTransactionAmount
			invoked.TransientBookCurrency		= DerivedCurrency
			invoked.AssetTransactionAmount.TransactionAmount 	= LocalTransactionAmount
			invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
			invoked.TransactionNumberOfDecimals	= DerivedNumberOfDecimals
			if (TransientCurrencyExchange)
				LocalTransactionDate = Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate = AssetTransferRel.TransferDate
			invoked.TransactionDate				= LocalTransactionDate
			if (AssetTransfer.PostingDate entered)
				invoked.PostingDate				= AssetTransfer.PostingDate
			else
				invoked.PostingDate				= AssetTransfer.TransientPostingDate
			invoked.ProcessDate					= AssetTransfer.TransferDate
			invoked.AssetTransactionAmount.ExchangeDate	  	= LocalTransactionDate
			
		525SetUpJe
			invoked.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
			invoked.Company						= AssetTransfer.AssetTransferTo.ToAssetCompany
			invoked.Asset						= AssetTransfer.AssetTransferTo.ToAsset
			invoked.ProcessAsset				= AssetTransfer.Asset
			invoked.Book						= ToBook
			if (ToBook.Impairment)
				invoked.AssetImpairment			= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment 					
			invoked.Description					= LocalTranDesc
			invoked.TransactionStatus			= LocalTransactionStatus
			invoked.AssetAccountGroup			= AssetTransfer.AssetTransferTo.ToAssetAccountGroup
			invoked.AssetType					= AssetTransfer.AssetTransferTo.ToAssetType
			invoked.AssetProcess				= "TRF"
			LocalTransactionAsset				= AssetTransfer.AssetTransferTo.ToAsset
			LocalTransactionBook				= ToBook
			invoked.TransactionAmount			= LocalTransactionAmount
			invoked.TransientBookCurrency		= DerivedCurrency
			invoked.AssetTransactionAmount.TransactionAmount 	= LocalTransactionAmount
			invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
			invoked.TransactionNumberOfDecimals	= DerivedNumberOfDecimals
			if (TransientCurrencyExchange)
				LocalTransactionDate = Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate = AssetTransferRel.TransferDate
			invoked.TransactionDate				= LocalTransactionDate
			if (AssetTransfer.PostingDate entered)
				invoked.PostingDate				= AssetTransfer.PostingDate
			else
				invoked.PostingDate				= AssetTransfer.TransientPostingDate
			invoked.ProcessDate					= AssetTransfer.TransferDate
			invoked.AssetTransactionAmount.ExchangeDate	  	= LocalTransactionDate

			
		526SetUpJe
			invoked.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
			invoked.Company						= AssetTransfer.AssetTransferTo.ToAssetCompany
			invoked.Asset						= AssetTransfer.AssetTransferTo.ToAsset

			if (AssetTransfer.Company = AssetTransfer.AssetTransferTo.ToAssetCompany)
				invoked.Book					= Book
				LocalTransactionBook			= Book
			else
				invoked.Book					= ToBook
				LocalTransactionBook			= ToBook
			if (LocalTransactionBook.Impairment)
				invoked.AssetImpairment 		= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment  
			invoked.TransactionStatus			= "U"


			invoked.AssetProcess				= "TRF"
			LocalTransactionAsset				= AssetTransfer.AssetTransferTo.ToAsset
			invoked.TransactionAmount			= LocalTransactionAmount
			invoked.TransientBookCurrency		= DerivedCurrency
			invoked.AssetTransactionAmount.TransactionAmount 	= LocalTransactionAmount
			invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
			invoked.TransactionNumberOfDecimals	= DerivedNumberOfDecimals
			if (TransientCurrencyExchange)
				LocalTransactionDate = Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate = AssetTransferRel.TransferDate
			invoked.TransactionDate				= LocalTransactionDate
			if (AssetTransfer.PostingDate entered)
				invoked.PostingDate				= AssetTransfer.PostingDate
			else
				invoked.PostingDate				= AssetTransfer.TransientPostingDate
			invoked.ProcessDate					= AssetTransfer.TransferDate
			invoked.AssetTransactionAmount.ExchangeDate	  	= LocalTransactionDate
			
			
		FindPostBook
			if (FromBookCalendarCurrentRel exist)
				if (FromBookCalendarCurrentRel.PostingBook)
					LocalFromPostSW = true
					LocalFrPostBook = Book
				else
					LocalFromPostSW = false
			if (LocalFromPostSW = true)
				LocalToPostSW 	= true
				if (AssetTransfer.Company = AssetTransfer.AssetTransferTo.ToAssetCompany)
					ToBook = Book
				else
					if (Book.Impairment)
						LocalBook = first AssetFromDepreciationBookRel.Book
						ToBook = AssetBookTransferRel.ToBook.ImpairmentBook
					else
						if (ToBook not entered)
							if (FromBookInToCompanyRel exists)
								ToBook = Book
							else
								ToBook = first ToCompanyCurrentPostingWithLedgerRel.Book
					if (ToBook entered)

						if (AssetTransfer.TransferType.InterCompany)
							include ValidateToBook
						LocalToPostBook = ToBook				
			else
				LocalToPostSW 	= false
				if(AssetTransfer.Company = AssetTransfer.AssetTransferTo.ToAssetCompany)
					ToBook = Book
				else
					if (Book.Impairment)
						LocalBook = first AssetFromDepreciationBookRel.Book
						ToBook = AssetBookTransferRel.ToBook.ImpairmentBook
					else
						if (ToBook not entered)
							if (FromNonPostingBookInToCompanyRel exists)
								ToBook = Book
							else
								ToBook = first ToCompanyCurrentBookWithLedgerRel.Book

























		ValidateToBook


			constraint (CurrentBookCalendarRel.BookCalendar.YearBeginDate = CurrentToBookCalendarRel.BookCalendar.YearBeginDate)
				"FromAndToCalendarYearsForBook<Book>MustBeEqual"
			constraint (CurrentBookCalendarRel.BookCalendar.PostingBook = CurrentToBookCalendarRel.BookCalendar.PostingBook)
				"FromBook<Book>IsAPostingBook;ToBookMustAlsoBeAPostingBook"					

























					
								








































			
			
		CreateFromEntries
			if (LocalToAssetAccount != LocalFromAssetAccount
			and  FromBookBasis != 0
			and LocalFromUpdatesDoneFlag = false)
				invoke Create AssetTransaction
					LocalToCurrency                 = Currency
					LocalTransactionAmount       	= FromBookBasis * -1
					include 515SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer From" 
					else
						invoked.Reference				= "Transfer From"	
					if(Book.Impairment)
						invoked.AssetAccountType	= "IML"
						invoked.ProcessSequence		= Asset.LastAssetImpairment
					else
						invoked.AssetAccountType	= "AST"
						invoked.ProcessSequence		= LocalProcessSequence	
					invoked.DistributionAccount		= LocalFromAssetAccount					
					invoked.Description				= "Asset" + " " + Asset + " " + Asset.AssetProcess

					









			if ((LocalToAccumulatedDepreciationAccount != LocalFromAccumulatedDepreciationAccount)
			and  FromLifeToDateDepreciation != 0)
				invoke Create AssetTransaction
					LocalToCurrency                     = Currency
					LocalTransactionAmount       		= FromLifeToDateDepreciation
					include 515SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer From" 
					else
						invoked.Reference				= "Transfer From"	
					if(Book.Impairment)
						invoked.AssetAccountType		= "IMT"
						invoked.ProcessSequence			= Asset.LastAssetImpairment
					else
						invoked.AssetAccountType		= "ACM"
						invoked.ProcessSequence			= LocalProcessSequence	
					invoked.DistributionAccount			= LocalFromAccumulatedDepreciationAccount
					invoked.Description					= "Asset" + " " + Asset + " " + Asset.AssetProcess
			LocalFromUpdatesDoneFlag = true	
											
		CreateToEntries  
			if ((LocalToAssetAccount != LocalFromAssetAccount)
			and  ToBasis != 0)
				invoke Create AssetTransaction
					LocalTransactionAmount      		= ToBasis
					include 525SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer To" 
					else
						invoked.Reference				= "Transfer To"
					if (Book.Impairment)
						invoked.AssetAccountType		= "IML"
						invoked.ProcessSequence			= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
					else
						invoked.AssetAccountType		= "AST"
						invoked.ProcessSequence			= LocalProcessSequence
					invoked.DistributionAccount			= LocalToAssetAccount					
					invoked.Description					= "Asset" + " " + Asset + " " + Asset.AssetProcess	
			if ((LocalToAccumulatedDepreciationAccount != LocalFromAccumulatedDepreciationAccount)
			and  FromLifeToDateDepreciation != 0)
				invoke Create AssetTransaction
					LocalTransactionAmount       		= ToLifeToDateDepreciation * -1
					include 525SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer To" 
					else
						invoked.Reference				= "Transfer To"						
					if(Book.Impairment)
						invoked.AssetAccountType		= "IMT"
						invoked.ProcessSequence			= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
					else
						invoked.AssetAccountType		= "ACM"
						invoked.ProcessSequence			= LocalProcessSequence	
					invoked.DistributionAccount			= LocalToAccumulatedDepreciationAccount

					invoked.Description					= "Asset" + " " + Asset + " " + Asset.AssetProcess









		511CreateFromEntries
			if (!LocalToAssetAccount = LocalFromAssetAccount
			and FromBookBasis != 0)
				invoke Create AssetBookTransaction
					LocalToCurrency                 = Currency
					LocalTransactionAmount      	= FromBookBasis * -1
					include 516SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer From" 
					else
						invoked.Reference				= "Transfer From"					
					if(Book.Impairment)
						invoked.AssetAccountType	= "IML"
						invoked.ProcessSequence		= Asset.LastAssetImpairment
					else
						invoked.AssetAccountType	= "AST"
						invoked.ProcessSequence		= LocalProcessSequence
					invoked.DistributionAccount		= LocalFromAssetAccount

			if (!LocalToAccumulatedDepreciationAccount = LocalFromAccumulatedDepreciationAccount
			and FromLifeToDateDepreciation != 0)	
				invoke Create AssetBookTransaction
					LocalToCurrency                  = Currency 
					LocalTransactionAmount      	 = FromLifeToDateDepreciation
					include 516SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer From" 
					else
						invoked.Reference				= "Transfer From"	
					if(Book.Impairment)
						invoked.AssetAccountType	= "IMT"
						invoked.ProcessSequence		= Asset.LastAssetImpairment
					else			
						invoked.AssetAccountType	= "ACM"
						invoked.ProcessSequence		= LocalProcessSequence
					invoked.DistributionAccount		= LocalFromAccumulatedDepreciationAccount











		521CreateToEntries
			if (!LocalToAssetAccount = LocalFromAssetAccount
			and ToBasis != 0) 							
				invoke Create AssetBookTransaction
					LocalTransactionAmount     		  = ToBasis
					include 526SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer To" 

					else
						invoked.Reference				= "Transfer To"	
					if(Book.Impairment)
						invoked.AssetAccountType	= "IML"
						invoked.ProcessSequence		= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
					else			
						invoked.AssetAccountType	= "AST"
						invoked.ProcessSequence		= LocalProcessSequence
					invoked.DistributionAccount		= LocalToAssetAccount

			if (!LocalToAccumulatedDepreciationAccount = LocalFromAccumulatedDepreciationAccount
			and FromLifeToDateDepreciation != 0) 							
				invoke Create AssetBookTransaction
					LocalTransactionAmount   	    = ToLifeToDateDepreciation * -1
					include 526SetUpJe
					if (TransientCreateFromBatch)
						invoked.TransientCreateFromBatch = TransientCreateFromBatch
						invoked.Reference				= "Mass Transfer To" 
					else
						invoked.Reference				= "Transfer To"
					if(Book.Impairment)
						invoked.AssetAccountType	= "IMT"
						invoked.ProcessSequence		= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
					else
						invoked.AssetAccountType	= "ACM"
						invoked.ProcessSequence		= LocalProcessSequence
					invoked.DistributionAccount		= LocalToAccumulatedDepreciationAccount













				
		CreateTransactions
			include FindPostBook


			if (AssetTransfer.TransientCreateFromBatch)

				if (AssetTransfer.TransientPosting = "N")
					LocalTransactionStatus = "H"
				else
					LocalTransactionStatus = "U"
			if (LocalFromPostSW)
				include CreateFromEntries
			if (LocalToPostSW)
				include CreateToEntries		

		CreateTransactionsPartialTransfer
			include FindPostBook

			if (LocalFromPostSW)
				include CreateFromEntries
			if (LocalToPostSW)
				include CreateToEntries	
			if (!CurrentTransferBookCalendarsRel.PostingBook
			and !LocalFromPostSW
			and !LocalToPostSW)
				include 511CreateFromEntries
				include 521CreateToEntries								
				
	Actions
		Create is a Create Action

			Entrance Rules
				if (Basis entered)
					include CalculateFromCosts
					include CalculateToCosts
			Action Rules
				BypassActiveCodeBlockEdit = true		
			Exit Rules
				LocalProcessSequence = Asset.LastAssetSequence
				if (AssetTransfer.Company 					!= AssetTransfer.AssetTransferTo.ToAssetCompany
				or  AssetTransfer.AssetType 				!= AssetTransfer.AssetTransferTo.ToAssetType
				or 	AssetTransfer.AssetAccountGroup			!= AssetTransfer.AssetTransferTo.ToAssetAccountGroup
				or  AssetTransfer.AssetAccountingUnit 		!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
				or  AssetTransfer.AssetAccountingUnitGroup	!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup)
					include AccountDefaulting
					if ((LocalToAssetAccount 							!= LocalFromAssetAccount
					or  LocalToAccumulatedDepreciationAccount 			!= LocalFromAccumulatedDepreciationAccount)
					and !AssetTransfer.Simulated)
						include CreateTransactions
						if (!CurrentTransferBookCalendarsRel.PostingBook
						and !LocalFromPostSW
						and !LocalToPostSW)

							include 511CreateFromEntries
							include 521CreateToEntries
					else
						include FindPostBook

				if (Book != ToBook
				and AssetTransfer.FullOrPartial = "F"
				and AssetTransfer.TransferType.InterCompany)
					invoke CreateFromTransfer AssetBook
						fill in fields from this instance
						invoked.LocalTranDesc					= LocalTranDesc
						invoked.Company							= AssetTransfer.AssetTransferTo.ToAssetCompany
						invoked.Asset							= Asset
						invoked.Book							= ToBook
						invoked.Basis							= ToBasis
      					invoked.TransactionNumberOfDecimals 	= ToBook.TransactionNumberOfDecimals
				        invoked.CurrentPeriodDepreciation 		= ToCurrentPeriodDepreciation  
				        invoked.CurrentPeriodDepreciationAllowed = ToCurrentPeriodDepreciationAllowed  
				        invoked.YearToDateDepreciation 			= ToYearToDateDepreciation
				        invoked.YearToDateDepreciationAllowed 	= ToYearToDateDepreciationAllowed    
				        invoked.YearToDateDepreciationOverride  = ToYearToDateDepreciationOverride  
				        invoked.LifeToDateDepreciation    		= ToLifeToDateDepreciation       
				        invoked.LifeToDateDepreciationAllowed  	= ToLifeToDateDepreciationAllowed 
				        invoked.LastClosedPeriodBalance    		= ToLastClosedPeriodBalance    
				        invoked.SalvageValue       				= ToSalvageValue 															  
				        invoked.FirstYearExpenseAmount  		= ToFirstYearExpenseAmount        
				        invoked.TaxCreditPropertyAmount 		= ToTaxCreditPropertyAmount
				        invoked.TaxCredit       				= ToTaxCredit     
				        invoked.ActualInsuranceValue   			= ToActualInsuranceValue            
				        invoked.CalculatedInsuranceValue   		= ToCalculatedInsuranceValue
				 		invoked.CalculatedReplacementValue 		= ToCalculatedReplacementValue

				 	LocalToAsset 			= AssetTransfer.AssetTransferTo.ToAsset
				 	if (TransferToAssetBookRel.DebitBalance not entered
					and TransferToAssetBookRel.CreditBalance not entered)
						LocalOriginalToCompany = AssetTransfer.AssetTransferTo.ToAssetCompany
						if (ToBookCalendarCurrentRel.IsPostingBook)
							for each OldToCompanyUnreleasedAssetTransactionsRel
								invoke BalanceUpdate TransferToAssetBookRel
									if (each.TransactionAmount > 0)
										invoked.DebitBalance  += each.TransactionAmount
									else 
										invoked.CreditBalance += each.TransactionAmount
						else
							for each OldToCompanyUnreleasedAssetBookTransactionsRel
								invoke BalanceUpdate TransferToAssetBookRel
									if (each.TransactionAmount > 0)
										invoked.DebitBalance  += each.TransactionAmount
									else 
										invoked.CreditBalance += each.TransactionAmount
				 		
				 	invoke DeleteFromTransfer AssetBookRel
				 	LocalBook = first AssetFromDepreciationBookRel.Book
				 	if (AssetImpairmentBookRel exists)
						invoke Create AssetImpairmentBook
							fill in fields from AssetImpairmentBookRel
							invoked.Book				= AssetToDepreciationBookRel.Book
							invoked.ImpairmentBook		= ToBook
						invoke Delete AssetImpairmentBookRel
				
				if (AssetTransfer.TransferType.InterCompany)
					LocalToAsset = AssetTransfer.AssetTransferTo.ToAsset
					invoke BalanceUpdate TransferToAssetBookRel
						invoked.Company = AssetTransfer.AssetTransferTo.ToAssetCompany

		InterCompanyCreate is a Create Action 
			restricted
			Action Rules
				if (AssetTransfer.TransferType.InterCompany)
					LocalToAsset = AssetTransfer.AssetTransferTo.ToAsset
					invoke BalanceUpdate TransferToAssetBookRel
						invoked.Company = AssetTransfer.AssetTransferTo.ToAssetCompany

		Update is an Update Action
			valid when (IsUnreleased)
			Entrance Rules
				BypassActiveCodeBlockEdit = true
				if (ToAssetUnreleasedAssetTransactionsRel exist)
					invoke Delete ToAssetUnreleasedAssetTransactionsRel
				if (ToAssetUnreleasedAssetBookTransactionsRel exist)
					invoke Delete ToAssetUnreleasedAssetBookTransactionsRel															






				include CalculateFromCosts
				include CalculateToCosts
				
			Exit Rules
				LocalProcessSequence = Asset.LastAssetSequence
				if (AssetTransfer.TransferType.InterCompany)
					if (FromBookCalendarCurrentRel.IsPostingBook)
						constraint (ToBook entered)
							"ToBookIsRequired"
						constraint (CurrentToBookCalendarRel.IsPostingBook)
							"Book<ToBook>MustBeAPostingBook"
					else 
						if (ToBook entered)
							constraint (!CurrentToBookCalendarRel.IsPostingBook)
								"Book<ToBook>MustBeANonPostingBook"	
					if (ToBook entered)				//"TransferDateNotInCurr/1stFutureYearOfBook"    
						include ValidateToBook
						if (AssetBookRel.HasImpairment)
							constraint (ToBookRel.ImpairmentBook entered)
								"BookIsImpaired;ToBookMustHaveAnImpairmentBook"
										
					if (Book != ToBook
					and AssetTransfer.FullOrPartial = "F")
						if (ToBook changed 
						and ToAssetBookRel not exists)
							LocalProcessSequence 	= Asset.LastAssetSequence
							LocalTranDesc			= InterCompanyFullTransferMessage	


							LocalTransactionAmount 	= FromBookBasis * -1
							if (AssetTransfer.AssetTransferTo.DimensionsHaveChanged)
								include AccountDefaulting
								if (CurrentToBookCalendarRel.PostingBook)
									include CreateTransactions
								else
									include 511CreateFromEntries
									include 521CreateToEntries
							if (!(ToAssetUnreleasedAssetBookTransactionsRel exist
							or ToAssetUnreleasedAssetTransactionsRel exist)
							and !AssetTransfer.Simulated)
								include AccountDefaulting
								if (CurrentToBookCalendarRel.PostingBook)
									include CreateToEntries
								else
									include 521CreateToEntries
							LocalBook = Book
							if (FromAssetBookRel exists)
								invoke Delete FromAssetBookRel 
							LocalFrPostBook = Book
							if(!AssetTransfer.Simulated)
								if (CurrentToBookCalendarRel.PostingBook)
									if (FromAssetUnreleasedAssetTransactionsRel not exists)
										include CreateFromEntries
								else
								if (FromAssetUnreleasedAssetBookTransactionsRel not exists)
									include 511CreateFromEntries
							LocalBook = old ToBook
							invoke Delete FromAssetBookRel
							invoke Create AssetBook
								fill in fields from this instance
								invoked.LocalTranDesc					= LocalTranDesc
								invoked.Asset							= Asset
								invoked.Book							= ToBook
								invoked.Basis							= ToBasis
		      					invoked.TransactionNumberOfDecimals 	= ToBook.TransactionNumberOfDecimals
						        invoked.CurrentPeriodDepreciation 		= ToCurrentPeriodDepreciation  
						        invoked.CurrentPeriodDepreciationAllowed = ToCurrentPeriodDepreciationAllowed  
						        invoked.YearToDateDepreciation 			= ToYearToDateDepreciation
						        invoked.YearToDateDepreciationAllowed 	= ToYearToDateDepreciationAllowed    
						        invoked.YearToDateDepreciationOverride  = ToYearToDateDepreciationOverride  
						        invoked.LifeToDateDepreciation    		= ToLifeToDateDepreciation       
						        invoked.LifeToDateDepreciationAllowed  	= ToLifeToDateDepreciationAllowed 
						        invoked.LastClosedPeriodBalance    		= ToLastClosedPeriodBalance    
						        invoked.SalvageValue       				= ToSalvageValue																		
						        invoked.FirstYearExpenseAmount  		= ToFirstYearExpenseAmount        
						        invoked.TaxCreditPropertyAmount 		= ToTaxCreditPropertyAmount
						        invoked.TaxCredit       				= ToTaxCredit     
						        invoked.ActualInsuranceValue   			= ToActualInsuranceValue            
						        invoked.CalculatedInsuranceValue   		= ToCalculatedInsuranceValue
						 		invoked.CalculatedReplacementValue 		= ToCalculatedReplacementValue 
						 	LocalToAsset 			= AssetTransfer.AssetTransferTo.ToAsset
						 	if (TransferToAssetBookRel.DebitBalance not entered
							and TransferToAssetBookRel.CreditBalance not entered)
								LocalOriginalToCompany = AssetTransfer.AssetTransferTo.ToAssetCompany
								if (TransferToAssetBookRel.IsPostingBook)
									for each OldToCompanyUnreleasedAssetTransactionsRel
										invoke BalanceUpdate TransferToAssetBookRel
											if (each.TransactionAmount > 0)
												invoked.DebitBalance  += each.TransactionAmount
											else 
												invoked.CreditBalance += each.TransactionAmount
								else
									for each OldToCompanyUnreleasedAssetBookTransactionsRel
										invoke BalanceUpdate TransferToAssetBookRel
											if (each.TransactionAmount > 0)
												invoked.DebitBalance  += each.TransactionAmount
											else 
												invoked.CreditBalance += each.TransactionAmount
					
					if (Book != ToBook
					and AssetTransfer.FullOrPartial = "P")
						LocalToAsset 			= AssetTransfer.AssetTransferTo.ToAsset
						if (ToBook changed)
							if (!AssetTransfer.Simulated)
								if (!(ToAssetUnreleasedAssetBookTransactionsRel exist
								or ToAssetUnreleasedAssetTransactionsRel exist))
									include AccountDefaulting	
									if (CurrentToBookCalendarRel.PostingBook)
										include CreateToEntries
									else
										include 521CreateToEntries  
								if (CurrentToBookCalendarRel.PostingBook)
									LocalFrPostBook = Book
									if (FromAssetUnreleasedAssetTransactionsRel not exists)
										include CreateFromEntries
								else
								if (FromAssetUnreleasedAssetBookTransactionsRel not exists)
									include 511CreateFromEntries
							LocalTransactionBook	= old ToBook
							invoke Delete LocalTransactionAssetBookRel
							invoke Create AssetBook
								fill in fields from this instance
								invoked.Asset							= ToAsset
								invoked.Book							= ToBook
								invoked.Basis							= ToBasis
		      					invoked.TransactionNumberOfDecimals 	= ToBook.TransactionNumberOfDecimals
						        invoked.CurrentPeriodDepreciation 		= ToCurrentPeriodDepreciation  
						        invoked.CurrentPeriodDepreciationAllowed = ToCurrentPeriodDepreciationAllowed  
						        invoked.YearToDateDepreciation 			= ToYearToDateDepreciation
						        invoked.YearToDateDepreciationAllowed 	= ToYearToDateDepreciationAllowed    
						        invoked.YearToDateDepreciationOverride  = ToYearToDateDepreciationOverride  
						        invoked.LifeToDateDepreciation    		= ToLifeToDateDepreciation       
						        invoked.LifeToDateDepreciationAllowed  	= ToLifeToDateDepreciationAllowed 
						        invoked.LastClosedPeriodBalance    		= ToLastClosedPeriodBalance    
						        invoked.SalvageValue       				= ToSalvageValue																		
						        invoked.FirstYearExpenseAmount  		= ToFirstYearExpenseAmount        
						        invoked.TaxCreditPropertyAmount 		= ToTaxCreditPropertyAmount
						        invoked.TaxCredit       				= ToTaxCredit     
						        invoked.ActualInsuranceValue   			= ToActualInsuranceValue            
						        invoked.CalculatedInsuranceValue   		= ToCalculatedInsuranceValue
						 		invoked.CalculatedReplacementValue 		= ToCalculatedReplacementValue        
						 	if (TransferToAssetBookRel.DebitBalance not entered
							and TransferToAssetBookRel.CreditBalance not entered)
								if (TransferToAssetBookRel.IsPostingBook)
									for each ToAssetUnreleasedAssetTransactionsRel
										invoke BalanceUpdate TransferToAssetBookRel
											if (each.TransactionAmount > 0)
												invoked.DebitBalance  += each.TransactionAmount
											else 
												invoked.CreditBalance += each.TransactionAmount
								else
									for each ToAssetUnreleasedAssetBookTransactionsRel
										invoke BalanceUpdate TransferToAssetBookRel
											if (each.TransactionAmount > 0)
												invoked.DebitBalance  += each.TransactionAmount
											else 
												invoked.CreditBalance += each.TransactionAmount
							LocalFrPostBook = Book
							invoke BalanceUpdate LocalFromAssetBookRel
								invoked.Basis					= Basis - FromBookBasis
								invoked.LifeToDateDepreciation	= LifeToDateDepreciation - FromLifeToDateDepreciation
								invoked.YearToDateDepreciation	= YearToDateDepreciation - FromYearToDateDepreciation
								invoked.SalvageValue            = SalvageValue - FromSalvageValue

				else
					if (AssetTransfer.FullOrPartial = "P"
					or !AssetTransfer.Asset 		= AssetTransfer.AssetTransferTo.ToAsset)
				       	LocalToAsset 				= AssetTransfer.AssetTransferTo.ToAsset
						if (!TransferToAssetBookRel exists)
							invoke Create AssetBook
								fill in fields from this instance
								invoked.Asset		= LocalToAsset
								invoked.Book		= ToBook
								invoked.Basis		= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost
				
					if (AssetTransfer.Company 					!= AssetTransfer.AssetTransferTo.ToAssetCompany
					or  AssetTransfer.AssetType 				!= AssetTransfer.AssetTransferTo.ToAssetType
					or  AssetTransfer.AssetAccountingUnit 		!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
					or  AssetTransfer.AssetAccountingUnitGroup	!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup)
						include AccountDefaulting
						if ((LocalToAssetAccount 							!= LocalFromAssetAccount
						or   LocalToAccumulatedDepreciationAccount 			!= LocalFromAccumulatedDepreciationAccount)
						and  !AssetTransfer.Simulated)
							include CreateTransactions
		
		UpdatePostingDate is an Instance Action
			Action Rules
				if (FromAssetUnreleasedAssetTransactionsRel exist)
					for each FromAssetUnreleasedAssetTransactionsRel
						invoke UpdateTransactionDate each
							invoked.PostingDate = AssetTransfer.PostingDate
				
				if (FromAssetUnreleasedAssetBookTransactionsRel exist)
					for each FromAssetUnreleasedAssetBookTransactionsRel
						invoke UpdateTransactionDate each
							invoked.PostingDate = AssetTransfer.PostingDate
				
				if (AssetTransfer.FullOrPartial.Full)
					LocalOriginalToCompany = AssetTransfer.AssetTransferTo.ToAssetCompany
					if (OldToCompanyUnreleasedAssetTransactionsRel exists)
						for each OldToCompanyUnreleasedAssetTransactionsRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = AssetTransfer.PostingDate
					
					if (OldToCompanyUnreleasedAssetBookTransactionsRel exists)
						for each OldToCompanyUnreleasedAssetBookTransactionsRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = AssetTransfer.PostingDate
				else
					if (ToAssetUnreleasedAssetTransactionsRel exist)
						for each ToAssetUnreleasedAssetTransactionsRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = AssetTransfer.PostingDate
					
					if (ToAssetUnreleasedAssetBookTransactionsRel exist)
						for each ToAssetUnreleasedAssetBookTransactionsRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = AssetTransfer.PostingDate	
		
		UpdateFromTransfer is an Update Action
			restricted
			Entrance Rules
				include CalculateFromCosts
				include CalculateToCosts

			Action Rules
				BypassActiveCodeBlockEdit = true
				if (FromAssetUnreleasedAssetTransactionsRel exist)
					invoke Delete FromAssetUnreleasedAssetTransactionsRel

				if (FromAssetUnreleasedAssetBookTransactionsRel exist)
					invoke Delete FromAssetUnreleasedAssetBookTransactionsRel
					
				if (ToAssetUnreleasedAssetTransactionsRel exist)
					invoke Delete ToAssetUnreleasedAssetTransactionsRel
					
				if (ToAssetUnreleasedAssetBookTransactionsRel exist)
					invoke Delete ToAssetUnreleasedAssetBookTransactionsRel															

				if (AssetTransfer.Company 					!= AssetTransfer.AssetTransferTo.ToAssetCompany
				or  AssetTransfer.AssetType 				!= AssetTransfer.AssetTransferTo.ToAssetType
				or  AssetTransfer.AssetAccountingUnit 		!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
				or  AssetTransfer.AssetAccountingUnitGroup	!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup)
					include AccountDefaulting

				if (Book.Currency =  ToBook.Currency)
					ToBasis 									= FromBookBasis
					ToCurrentPeriodDepreciation 				= FromCurrentPeriodDepreciation
					ToCurrentPeriodDepreciationAllowed  		= FromCurrentPeriodDepreciationAllowed	
					ToYearToDateDepreciation  					= FromYearToDateDepreciation
					ToYearToDateDepreciationAllowed  			= FromYearToDateDepreciationAllowed	
					ToYearToDateDepreciationOverride  			= FromYearToDateDepreciationOverride
					ToLifeToDateDepreciation  					= FromLifeToDateDepreciation					
					ToLifeToDateDepreciationAllowed  			= FromLifeToDateDepreciationAllowed
					ToLastClosedPeriodBalance  					= FromLastClosedPeriodBalance
					ToSalvageValue 	 							= FromSalvageValue
					ToFirstYearExpenseAmount  					= FromFirstYearExpenseAmount
					ToTaxCreditPropertyAmount  					= FromTaxCreditPropertyAmount
					ToTaxCredit  								= FromTaxCredit				
					ToActualInsuranceValue  					= FromActualInsuranceValue
					ToCalculatedInsuranceValue  				= FromCalculatedInsuranceValue
					ToCalculatedReplacementValue  				= FromCalculatedReplacementValue
			Exit Rules
				if(!AssetTransfer.Simulated)
					include CreateTransactionsPartialTransfer
					
				
		Delete is a Delete Action
			restricted
			
		Purge is a Purge Action
			restricted
		
		AssetRecreateTransactions is an Instance Action
			restricted
				
			Entrance Rules
				invoke Delete FromAssetUnreleasedAssetTransactionsRel 
				invoke Delete FromAssetUnreleasedAssetBookTransactionsRel	
				invoke Delete ToAssetUnreleasedAssetTransactionsRel
				invoke Delete ToAssetUnreleasedAssetBookTransactionsRel
			
			Action Rules
				if(!AssetTransfer.Simulated)
					include AccountDefaulting
					if (CurrentToBookCalendarRel.PostingBook)
						include CreateTransactions
					if (!CurrentToBookCalendarRel.PostingBook)
						include 511CreateFromEntries
						include 521CreateToEntries

		ResetTransfer is an Instance Action
			restricted
			
			Parameters
				DeleteTransactions is Boolean	
				OriginalToCompany	is like Company
				
			Entrance Rules
				LocalOriginalToCompany = OriginalToCompany
				if (DeleteTransactions = true)
					if (ToAsset not entered)
						ToAsset = Asset
					invoke Delete FromAssetUnreleasedAssetTransactionsRel 
					invoke Delete FromAssetUnreleasedAssetBookTransactionsRel	
					invoke Delete ToAssetUnreleasedAssetTransactionsRel
					invoke Delete ToAssetUnreleasedAssetBookTransactionsRel	
					if (LocalOriginalToCompany entered)
						invoke Delete OldToCompanyUnreleasedAssetTransactionsRel
						invoke Delete OldToCompanyUnreleasedAssetBookTransactionsRel	
						invoke Delete OldToCompanyToAssetUnreleasedTransactionsRel		
						invoke Delete OldToCompanyToAssetUnreleasedBookTransactionsRel														

			Action Rules
				LocalResetTransfer = true
				if (Book not = ToBook
				and ToBook entered
				and AssetTransfer.FullOrPartial = "F")
					LocalProcessSequence 	= Asset.LastAssetSequence 










































					if (AssetTransfer.Company 					!= AssetTransfer.AssetTransferTo.ToAssetCompany
					or  AssetTransfer.AssetType 				!= AssetTransfer.AssetTransferTo.ToAssetType
					or  AssetTransfer.AssetAccountingUnit 		!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnit
					or  AssetTransfer.AssetAccountingUnitGroup	!= AssetTransfer.AssetTransferTo.ToAssetAccountingUnitGroup)
						include AccountDefaulting
						




												
						invoke PostRelease.UpdateTransferLastSeq Asset
							invoked.LastAssetSequence = LocalProcessSequence		
					if (!AssetBookRel exists)
						invoke Create AssetBookRel
							fill in fields from this instance
							invoked.LocalTranDesc					= LocalTranDesc
							invoked.Asset							= Asset
							invoked.Book							= Book
							if (Book.Impairment)
								invoked.Basis						= ToAssetBookRel.Basis
								invoked.ImpairmentBookOfOrigin		= AssetFromDepreciationBookRel.Book
							else
								invoked.Basis						= AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost
	      					invoked.TransactionNumberOfDecimals 	= ToBook.TransactionNumberOfDecimals
					        invoked.CurrentPeriodDepreciation 		= FromCurrentPeriodDepreciation  
					        invoked.CurrentPeriodDepreciationAllowed = FromCurrentPeriodDepreciationAllowed  
					        invoked.YearToDateDepreciation 			= FromYearToDateDepreciation
					        invoked.YearToDateDepreciationAllowed 	= FromYearToDateDepreciationAllowed    
					        invoked.YearToDateDepreciationOverride  = FromYearToDateDepreciationOverride  
					        invoked.LifeToDateDepreciation    		= FromLifeToDateDepreciation       
					        invoked.LifeToDateDepreciationAllowed  	= FromLifeToDateDepreciationAllowed 
					        invoked.LastClosedPeriodBalance    		= FromLastClosedPeriodBalance    
					        invoked.SalvageValue       				= FromSalvageValue 																	
					        invoked.FirstYearExpenseAmount  		= FromFirstYearExpenseAmount        
					        invoked.TaxCreditPropertyAmount 		= FromTaxCreditPropertyAmount
					        invoked.TaxCredit       				= FromTaxCredit     
					        invoked.ActualInsuranceValue   			= FromActualInsuranceValue            
					        invoked.CalculatedInsuranceValue   		= FromCalculatedInsuranceValue
					 		invoked.CalculatedReplacementValue 		= FromCalculatedReplacementValue
						 		 
					invoke Delete ToAssetBookRel
					LocalBook = first AssetToDepreciationBookRel.Book
					if (AssetImpairmentBookRel exists)
						invoke Create AssetImpairmentBook
							fill in fields from AssetImpairmentBookRel
							invoked.Book				= AssetFromDepreciationBookRel.Book
							invoked.ImpairmentBook		= Book
						invoke Delete AssetImpairmentBookRel
				else
					LocalBook = first AssetFromDepreciationBookRel.Book
					if (AssetImpairmentBookRel exists)
						invoke UpdateFromTransfer AssetImpairmentBookRel
							invoked.OriginalBasis		= AssetImpairmentBookRel.OriginalBasis + ToAssetImpairmentBookRel.OriginalBasis
							invoked.ImpairmentAmount	= AssetImpairmentBookRel.ImpairmentAmount + ToAssetImpairmentBookRel.ImpairmentAmount
							invoked.OriginalBookValue	= AssetImpairmentBookRel.OriginalBookValue + ToAssetImpairmentBookRel.OriginalBookValue
					invoke UpdateFromReinstatement AssetBookRel
						invoked.PrmCompany					= Asset.Company
						invoked.PrmLifeRemaining			= LifeRemaining
						invoked.PrmYearToDateDepreciation	= YearToDateDepreciation
						invoked.PrmLifeToDateDepreciation	= LifeToDateDepreciation
						invoked.PrmBasis					= Basis
						invoked.PrmSalvageValue				= SalvageValue
						
		AssetBookTransferPurge is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAsset						is an Asset
				PrmBook							is a Book
				PrmPurgeOption					is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
				PrmCompany						is like Company		
			Parameter Rules
				PrmFinanceEnterpriseGroup
					LocalFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
				PrmBook
					LocalBook 							= PrmBook
				PrmAsset
					LocalAsset 							= PrmAsset
			Local Fields
				LocalCounter					is Numeric 10
			Instance Selection
				include deleted records
				where(FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and	  Book										= PrmBook
				and   Asset.Company								= PrmCompany
				and   (PrmAsset not entered 	or Asset		= PrmAsset))
				
			Action Rules
				Set Rules
					Exit Rules
						increment PrmBook.LocalAssetBookTransferPurgeCount by LocalCounter
				Instance Rules
					LocalCounter+=1
					if(PrmPurgeOption.PurgeRecords)
						invoke Purge
		

		AssetReleaseTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)
			Action Rules
				invoke PostRelease.Release Asset
		
		AssetResetTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)


			Action Rules
				invoke PostRelease.ResetTransfer Asset
		
		EnterToBook is an Instance Action
			restricted
			Parameters
				PrmToBook is a Book
					default label is "ToBook"
			Parameter Rules
				PrmToBook
					initial value is ToBook
					default to ToBook
					
			Action Rules
				invoke Update
					invoked.Book					= PrmToBook

	

		
