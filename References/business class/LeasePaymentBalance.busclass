LeasePaymentBalance is a BusinessClass
    owned by lm
    prefix is MAS
    classic name is LMMASTER

    Ontology
        symbolic key is LeasePaymentBalance
            classic set name is MASSET1
            classic name for LeasePaymentBalance.ExecutoryCostCode is EXEC-CODE
            classic name for Vendor is PMT-VENDOR

    Patterns
        implements StaticJava
        disable AuditIndex
		implements Archivable

    Persistent Fields

        BeginningROUAmount    	  is an InternationalAmount
        BeginningBalanceAmount    is an InternationalAmount
            classic name is BEGIN-BAL-AMT
        BalanceAmount             is an InternationalAmount
        BeginningPrincipalBalance is an InternationalAmount
            classic name is BEG-BAL-PRIN
        PrincipalBalanceAmount    is an InternationalAmount
            classic name is PRIN-BAL-AMT
        BeginningBalanceInterest  is an InternationalAmount
            classic name is BEG-BAL-INT
        InterestBalanceAmount     is an InternationalAmount
            classic name is INT-BAL-AMT
        BaseNumberOfDecimals
            classic name is BASE-ND
        MaintenanceDate           is TimeStamp
            classic name is MAINT-DATE
        PrincipalTaxAmount        is an InternationalAmount
            classic name is PRIN-TAX-AMT
        InterestTaxAmount         is an InternationalAmount
            classic name is INT-TAX-AMT
        FinalPaymentAdjustment	  is an InternationalAmount
		BeginningShortTermLiability	is an InternationalAmount
		BeginningLongTermLiability	is an InternationalAmount

    Local Fields
    
		LocalTempLeaseLiability				is an InternationalAmount
		LocalTempLeaseROUReduction			is an InternationalAmount
		LocalTempLeaseROU					is an InternationalAmount	
		LocalLeasePaymentDueDate			is Date 
    	LocalCurrencyExchangeGroup			is a CurrencyExchangeGroup
    	LocalBaseNetChangeToPresentValue	is an InternationalAmount
    	LocalBaseStraightLineAmount			is an InternationalAmount
    	LocalBaseImpairmentAmount			is an InternationalAmount
		LocalBaseAdjustmentAmount           is an InternationalAmount
    	LocalLeaseExpense					is an InternationalAmount
    	LocalLastPaymentDate				is Date
    	LocalLastPeriodDate					is Date
    	LocalModificationDate				is Date
    	LocalImpairmentDate					is Date
    	LocalAdjustmentDate					is Date
    	LocalRemainingTerm					is Numeric size 3
    	LocalDueDate						is Date
    	LocalNumRecordsToUpdate				is Numeric size 4
    	TempDerivedGLPeriod					is Numeric size 2
    	LocalMonthsToAdd					is Numeric size 4
    	LocalMonthsToSubtract				is Numeric size 4

		LocalBegTimingLastPaymentSameDateAsResidual is Boolean
		LocalEndTimingLastPaymentNotSameDateAsResidul is Boolean
		LocalStraightLineAmount             is an InternationalAmount
		LocalBasePartialSLAmount			is an InternationalAmount
		LocalTotalPayments                  is an InternationalAmount
		LocalIDCAmount						is an InternationalAmount
		LocalLeaseCostAfterMod				is an InternationalAmount
		LocalRemainingTermAfterMod			is Decimal 7.5
		LocalROUReduction					is an InternationalAmount

	Rule Blocks
	
		CreateAmortizationSchedule
			initialize LocalBegTimingLastPaymentSameDateAsResidual
			initialize LocalEndTimingLastPaymentNotSameDateAsResidul

			LocalLeasePaymentDueDate	= each.DueDate


			if (each.DueDate = LocalLastPaymentDate
			and BeginningTimingWithResidualAndEndingPayment
			and !each.ResidualPayment
			and !each.PurchaseOptionPayment)
				LocalBegTimingLastPaymentSameDateAsResidual	= true



			if (each.DueDate != Lease.EndDate
			and EndingTimingWithResidualAndEndingPayment
			and each.DueDate month 	= Lease.EndDate month
			and each.DueDate year  	= Lease.EndDate year)
				LocalEndTimingLastPaymentNotSameDateAsResidul	= true





			include CalculateBaseAmounts
			if (each.Year = LeasePaymentBalance.FiscalYear)	
				LocalTempLeaseLiability			= LocalTempLeaseLiability - LocalBaseNetChangeToPresentValue
				if (!Lease.LeaseClassification.Finance)
					if (Lease.Status.Modify)
						if (LocalLeasePaymentDueDate month = Lease.EndDate month) 
							if (Lease.EndDate day != DeriveNoOfDaysFinal and Lease.EndDate year = LocalLeasePaymentDueDate year) 
								LocalTempLeaseROUReduction	= DerivedSLAmountEndPartialAfterMod - each.PaymentAmount - each.TransactionLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + each.NetChangeToPresentValue	
							else
								LocalTempLeaseROUReduction	= DerivedSLAmountAfterMod - each.PaymentAmount - each.TransactionLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + each.NetChangeToPresentValue	

						else
							LocalTempLeaseROUReduction	= DerivedSLAmountAfterMod - each.PaymentAmount - each.TransactionLandTax
							LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + each.NetChangeToPresentValue	
						if (Lease.EndDate = each.DueDate 
						and Lease.EndingResidual)
							LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction - Lease.GuaranteedAmount.TransactionAmount
					else
						if (LocalLeasePaymentDueDate month = Lease.BeginDate month)
							if (Lease.BeginDate day != 1 and Lease.BeginDate year = LocalLeasePaymentDueDate year)
								LocalTempLeaseROUReduction	= DerivedSLAmountPartial - each.BasePaymentAmount - each.BaseLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + LocalBaseNetChangeToPresentValue 
							else
								LocalTempLeaseROUReduction	= DerivedSLAmount - each.BasePaymentAmount - each.BaseLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + LocalBaseNetChangeToPresentValue 
						else
						if (LocalLeasePaymentDueDate month = Lease.EndDate month)
							if (Lease.EndDate day != DeriveNoOfDaysFinal and Lease.EndDate year = LocalLeasePaymentDueDate year)
								LocalTempLeaseROUReduction	= DerivedSLAmountEndPartial - each.BasePaymentAmount - each.BaseLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + LocalBaseNetChangeToPresentValue 
							else
								LocalTempLeaseROUReduction	= DerivedSLAmount - each.BasePaymentAmount - each.BaseLandTax
								LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + LocalBaseNetChangeToPresentValue 
						else
							LocalTempLeaseROUReduction	= DerivedSLAmount - each.BasePaymentAmount - each.BaseLandTax
							LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction + LocalBaseNetChangeToPresentValue 
						if (Lease.EndDate = each.DueDate 
						and Lease.EndingResidual)
							LocalTempLeaseROUReduction	= LocalTempLeaseROUReduction - Lease.GuaranteedAmount.BaseAmount.EnteredCurrencyAmount
				else
					if (Lease.IDCCount 	> 1)
						if (LocalLeasePaymentDueDate month = Lease.BeginDate month
						and LocalLeasePaymentDueDate year  = Lease.BeginDate year)
							LocalTempLeaseROUReduction	= Lease.LeaseROUAssetAmount.TransactionAmount / LocalRemainingTerm
						else
							for each LeaseInitialDirectCostRel
								if (LocalLeasePaymentDueDate month = each.DerivedMonth
								and LocalLeasePaymentDueDate year  = each.DerivedYear) 
									LocalIDCAmount += each.Amount.BaseAmount.EnteredCurrencyAmount 
									LocalTempLeaseROUReduction	= ((LocalTempLeaseROU + LocalIDCAmount) / LocalRemainingTerm)
									LocalTempLeaseROU = Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount  + LocalIDCAmount - LocalTempLeaseROUReduction
									LocalTempLeaseROUReduction	= LocalTempLeaseROU / LocalRemainingTerm
						
						if (each.DueDate > LocalLastPeriodDate)
							LocalTempLeaseROUReduction = 0
						else
							LocalTempLeaseROUReduction	= Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount / LocalRemainingTerm
					else
						if (each.DueDate > LocalLastPeriodDate)
							LocalTempLeaseROUReduction = 0
						else
							LocalTempLeaseROUReduction	= Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount / LocalRemainingTerm




		    		if (LocalTempLeaseROUReduction entered)
			    		round LocalTempLeaseROUReduction to nearest DerivedRoundTo

				LocalTempLeaseROU				= LocalTempLeaseROU - LocalTempLeaseROUReduction
				invoke CreateLeaseAmortization LeasePaymentPeriodBalance
					fill in fields from this instance
					if (each.ResidualPayment = true)	
						TempDerivedGLPeriod	= each.Period + 1
						invoked.LeasePaymentPeriodBalance	= TempDerivedGLPeriod
					else
						if (each.PurchaseOptionPayment = true)
							TempDerivedGLPeriod	= each.Period + 1
							invoked.LeasePaymentPeriodBalance	= TempDerivedGLPeriod					
						else			
							invoked.LeasePaymentPeriodBalance	= each.Period
					invoked.PaymentDueDate				= each.DueDate
					if (Lease.EndDate = each.DueDate 
					and Lease.EndingResidual)
						invoked.Amount					= each.BasePaymentAmount + each.BaseLandTax + Lease.GuaranteedAmount.BaseAmount.EnteredCurrencyAmount
					else
						if (Lease.EndDate = each.DueDate  
						and Lease.HasEndingBargainPurchaseOption)
							invoked.Amount					= each.BasePaymentAmount + each.BaseLandTax + Lease.BargainPurchaseAmount.BaseAmount.EnteredCurrencyAmount
						else


							if (LocalEndTimingLastPaymentNotSameDateAsResidul)
								if (Lease.EndingResidual)
									invoked.Amount		= each.BasePaymentAmount + each.BaseLandTax + Lease.GuaranteedAmount.BaseAmount.EnteredCurrencyAmount
								if (Lease.HasEndingBargainPurchaseOption)
									invoked.Amount		= each.BasePaymentAmount + each.BaseLandTax + Lease.BargainPurchaseAmount.BaseAmount.EnteredCurrencyAmount
							else
								invoked.Amount			= each.BasePaymentAmount + each.BaseLandTax	
					if (!Lease.LeaseClassification.Finance)
						if (Lease.Status.Modify)
							if (LocalLeasePaymentDueDate month = Lease.EndDate month) 
								if (Lease.EndDate day != DeriveNoOfDaysFinal and Lease.EndDate year = LocalLeasePaymentDueDate year) 
									invoked.LeaseExpense = DerivedSLAmountEndPartialAfterMod
								else 
									invoked.LeaseExpense = DerivedSLAmountAfterMod
							else 
								invoked.LeaseExpense = DerivedSLAmountAfterMod
						else					
							if (LocalLeasePaymentDueDate month = Lease.BeginDate month)
								if (Lease.BeginDate day != 1 and Lease.BeginDate year = LocalLeasePaymentDueDate year) 
									invoked.LeaseExpense = DerivedSLAmountPartial
								else 
									invoked.LeaseExpense = DerivedSLAmount		
							else
							if (LocalLeasePaymentDueDate month = Lease.EndDate month) 
								if (Lease.EndDate day != DeriveNoOfDaysFinal and Lease.EndDate year = LocalLeasePaymentDueDate year) 
									invoked.LeaseExpense = DerivedSLAmountEndPartial
								else 
									invoked.LeaseExpense = DerivedSLAmount
							else 
								invoked.LeaseExpense = DerivedSLAmount		
					LocalDueDate = each.DueDate					
					include CreateLiabilityAmort
					include CreateROUAmort
								
		CalculateBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= each.NetChangeToPresentValue
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseNetChangeToPresentValue							= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= LeasePaymentRel.StraightLineAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseStraightLineAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

		CalculateImpairmentBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= first ImpairmentInProgressRel.ImpairmentAmount.TransactionAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseImpairmentAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= LeasePaymentRel.StraightLineAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseStraightLineAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

		CalculateAdjustmentBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= first AdjustmentInProgressRel.AdjustmentAmount.TransactionAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseAdjustmentAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= LeasePaymentRel.StraightLineAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= Lease.BaseCurrency
			LocalBaseStraightLineAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount


		CreateLiabilityAmort
			if (each.DueDate != LocalLastPaymentDate
			or LocalBegTimingLastPaymentSameDateAsResidual)
				if (LocalEndTimingLastPaymentNotSameDateAsResidul)
					FinalPaymentAdjustment			= LocalTempLeaseLiability
					invoked.PrincipalAmount			= LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability
					if (Lease.EndingResidual) 
						invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax + Lease.GuaranteedAmount.BaseAmount.EnteredCurrencyAmount - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
					else
						if (Lease.HasEndingBargainPurchaseOption)  
							invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax + Lease.BargainPurchaseAmount.BaseAmount.EnteredCurrencyAmount - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
						else
							invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
					invoked.LiabilityBalance		= 0
					LocalTempLeaseLiability			= 0					
				else
					invoked.PrincipalAmount			= LocalBaseNetChangeToPresentValue
					invoked.InterestAmount			= each.BasePaymentAmount + each.BaseLandTax - LocalBaseNetChangeToPresentValue
					if(LeaseCashIncentiveRel exists)
						invoked.LiabilityBalance        = LocalTempLeaseLiability - sum LeaseCashIncentiveRel.Amount.TransactionAmount
					else
						invoked.LiabilityBalance		= LocalTempLeaseLiability
			else
				FinalPaymentAdjustment			= LocalTempLeaseLiability
				invoked.PrincipalAmount			= LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability
				if (Lease.EndingResidual) 
					invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax + Lease.GuaranteedAmount.BaseAmount.EnteredCurrencyAmount - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
				else
					if (Lease.HasEndingBargainPurchaseOption)  
						invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax + Lease.BargainPurchaseAmount.BaseAmount.EnteredCurrencyAmount - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
					else
						invoked.InterestAmount		= each.BasePaymentAmount + each.BaseLandTax - (LocalBaseNetChangeToPresentValue + LocalTempLeaseLiability)
				invoked.LiabilityBalance		= 0
				LocalTempLeaseLiability			= 0		

		CreateROUAmort
			if ((LocalDueDate < LocalLastPeriodDate
			and !LocalEndTimingLastPaymentNotSameDateAsResidul)
			or LocalBegTimingLastPaymentSameDateAsResidual
			or (Lease.DerivedROUAmortization > Lease.Term
			and LocalDueDate < LocalLastPeriodDate))





				if (Lease.DerivedROUAmortization > Lease.Term
				and LocalDueDate < LocalLastPeriodDate
				and (each.ResidualPayment
				or each.PurchaseOptionPayment))
					if(LeaseIncentiveDueDateRel exists)
						invoked.ROUBalance              = LocalTempLeaseROU + LocalTempLeaseROUReduction - sum LeaseIncentiveDueDateRel.Amount.BaseAmount.EnteredCurrencyAmount	
					else
						invoked.ROUBalance				= LocalTempLeaseROU + LocalTempLeaseROUReduction
					invoked.ROUReduction				= 0
				else
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					if(LeaseIncentiveDueDateRel exists)
						invoked.ROUBalance              = LocalTempLeaseROU - sum LeaseIncentiveDueDateRel.Amount.BaseAmount.EnteredCurrencyAmount	
					else
						invoked.ROUBalance				= LocalTempLeaseROU
			else
				if (each.DueDate = LocalLastPeriodDate
				or LocalEndTimingLastPaymentNotSameDateAsResidul)
					if (Lease.DerivedROUAmortization < Lease.Term)
						invoked.ROUReduction			= LocalTempLeaseROUReduction + LocalTempLeaseROU
						invoked.ROUBalance				= 0
					else
						if (LocalTempLeaseROU != 0)
							if (!Lease.LeaseClassification.Finance)
								if (LocalLeasePaymentDueDate month = Lease.EndDate month) 
									if (Lease.EndDate day != DeriveNoOfDaysFinal and Lease.EndDate year = LocalLeasePaymentDueDate year) 
										if (Lease.Status.Modify)
											invoked.LeaseExpense = DerivedSLAmountEndPartialAfterMod
										else
											invoked.LeaseExpense = DerivedSLAmountEndPartial
									else 
										if (Lease.Status.Modify)
											invoked.LeaseExpense = DerivedSLAmountAfterMod
										else
											invoked.LeaseExpense = DerivedSLAmount



							invoked.ROUReduction	= LocalTempLeaseROUReduction + LocalTempLeaseROU
							invoked.ROUBalance			= 0									
						else
							invoked.ROUReduction		= LocalTempLeaseROUReduction
							invoked.ROUBalance			= 0
				else
					invoked.ROUReduction			= 0
					invoked.ROUBalance				= 0

		CreateROUAmortForImpairment
			if (each.PaymentDueDate != LocalLastPeriodDate)
				if (each.PaymentDueDate = PrmImpairmentDate)
					LocalTempLeaseROUReduction		= each.ROUReduction + PrmImpairmentAmount
					LocalTempLeaseROU				= each.ROUBalance - PrmImpairmentAmount
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU




				else
					LocalTempLeaseROU				= LocalTempLeaseROU - DerivedSLAmount
					LocalLeaseExpense				= DerivedSLAmount + each.InterestAmount
					if (!Lease.LeaseClassification.Finance)
						invoked.LeaseExpense		= LocalLeaseExpense
					invoked.ROUReduction			= PrmStraightLineAmount
					invoked.ROUBalance				= LocalTempLeaseROU





			else
				if (!Lease.LeaseClassification.Finance)
					invoked.LeaseExpense	= DerivedSLAmountEndPartial +each.InterestAmount
				invoked.ROUReduction		= LocalTempLeaseROU
				invoked.ROUBalance			= 0	

		ResetROUAmortForImpairment
			if (each.PaymentDueDate != LocalLastPeriodDate)
				include CalculateImpairmentBaseAmounts
				if (each.PaymentDueDate = LocalImpairmentDate)
					LocalTempLeaseROUReduction		= each.ROUReduction - LocalBaseImpairmentAmount
					LocalTempLeaseROU				= each.ROUBalance + LocalBaseImpairmentAmount
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU





				else
					LocalTempLeaseROU				= LocalTempLeaseROU - DerivedSLAmount
					LocalLeaseExpense				= DerivedSLAmount + each.InterestAmount
					if (!Lease.LeaseClassification.Finance)
						invoked.LeaseExpense		= DerivedSLAmount 
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU





			else
				if (!Lease.LeaseClassification.Finance)
					invoked.LeaseExpense	= DerivedSLAmountEndPartial
				invoked.ROUReduction		= LocalTempLeaseROU
				invoked.ROUBalance			= 0	



		CreateROUAmortForAdjustment
			if (each.PaymentDueDate < LocalLastPeriodDate)
				if (each.PaymentDueDate = PrmAdjustmentDate)
					LocalTempLeaseROUReduction		= each.ROUReduction + PrmAdjustmentAmount + PrmIDCAmount
					LocalTempLeaseROU				= each.ROUBalance - PrmAdjustmentAmount - PrmIDCAmount
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU
				else
					LocalLeaseExpense				= PrmStraightLineAmount
					LocalTempLeaseROU				= LocalTempLeaseROU - LocalLeaseExpense
					if (!Lease.LeaseClassification.Finance)
						invoked.LeaseExpense		= LocalLeaseExpense + each.InterestAmount
					invoked.ROUReduction			= LocalLeaseExpense
					invoked.ROUBalance				= LocalTempLeaseROU
			else
				if (each.PaymentDueDate = LocalLastPeriodDate)
					if (!Lease.LeaseClassification.Finance)
						invoked.LeaseExpense	= LocalTempLeaseROU + each.InterestAmount
					invoked.ROUReduction		= LocalTempLeaseROU
					invoked.ROUBalance			= 0
				else
					invoked.ROUReduction		= 0
					invoked.ROUBalance			= 0								

		ResetROUAmortForAdjustment
			LocalLeaseExpense						= PrmLeaseExpenseBase
			LocalROUReduction						= PrmROUReductionBase
			if (each.PaymentDueDate < LocalLastPeriodDate)
				include CalculateAdjustmentBaseAmounts
				if (each.PaymentDueDate = LocalAdjustmentDate)
					LocalTempLeaseROUReduction		= each.ROUReduction - LocalBaseAdjustmentAmount
					LocalTempLeaseROU				= each.ROUBalance + LocalBaseAdjustmentAmount
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU
				else
					if (Lease.LeaseClassification.Finance or OperatingLeaseWithCompledAdjustment)
						LocalTempLeaseROUReduction	= LocalROUReduction *-1
					else
						LocalTempLeaseROUReduction	= LocalLeaseExpense - each.InterestAmount
					LocalTempLeaseROU				= LocalTempLeaseROU - LocalTempLeaseROUReduction
					invoked.ROUReduction			= LocalTempLeaseROUReduction
					invoked.ROUBalance				= LocalTempLeaseROU
			else
				if (each.PaymentDueDate = LocalLastPeriodDate)
					invoked.ROUReduction			= LocalTempLeaseROU
					invoked.ROUBalance				= 0
				else
					invoked.ROUReduction			= 0
					invoked.ROUBalance				= 0	
			if (!Lease.LeaseClassification.Finance)
				if (each.PaymentDueDate < LocalLastPeriodDate)
					if (OperatingLeaseWithCompledAdjustment)
						invoked.LeaseExpense		= LocalTempLeaseROUReduction + each.InterestAmount
					else
						invoked.LeaseExpense		= LocalLeaseExpense
				else
					invoked.LeaseExpense			= LocalTempLeaseROU + each.InterestAmount

    Derived Fields

        RemainOblig is a DerivedField									   		
            type is like InternationalAmount
            restricted
            return (Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount - BeginningBalanceAmount - BalanceAmount)

        BeginOblig  is a DerivedField                                             
            type is like InternationalAmount
            restricted
            return (Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount - BeginningBalanceAmount)

		DerivedGLPeriod	is a DerivedField
			type is Numeric 2
			restricted	
			return (first GLClosePeriodRel.PeriodNumber)

		DerivedGLYear	is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodRel.GeneralLedgerCloseYear)

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (BaseNumberOfDecimals = 2)
    			return .01
    		else
    		if (BaseNumberOfDecimals = 0)
    			return 1
    		else
    		if (BaseNumberOfDecimals = 3)
    			return .001
    		else
    		if (BaseNumberOfDecimals = 4)
    			return .0001

		DerivedUseRemainingLife	is a DerivedField
			type is Boolean
			restricted
			if (Lease.LeaseClassification.Finance)
				if (Lease.Test7a.Yes)
					return true
				else
					if (Lease.RemainingLife < ModificationInProgressRel.Term)
						return true
					else
						return false
			else
				return false

		DerivedPeriodsLeft	is a DerivedField
			type is Numeric 4
			restricted
			return Lease.RemainingLife - (((LocalModificationDate year - Lease.BeginDate year) * 12) + (LocalModificationDate month - Lease.BeginDate month))

		DerivedROUAmortization	is a DerivedField
			type is Numeric 4
			restricted
			if (Lease.LeaseClassification.Finance)
				if (Lease.Test7a.Yes)
					return Lease.RemainingLife
				else
					if (Lease.RemainingLife < ModificationInProgressRel.Term)
						return Lease.RemainingLife
					else
						return ModificationInProgressRel.Term
			else
				return ModificationInProgressRel.Term
		
		DeriveNoOfDaysInitial is a DerivedField
			type is Numeric 2
			restricted
			if (Lease.BeginDate month = 1 or Lease.BeginDate month = 3 or Lease.BeginDate month = 5 
			    or Lease.BeginDate month = 7 or Lease.BeginDate month = 8 or Lease.BeginDate month = 10
			    or Lease.BeginDate month = 12)
			    return 31
			else
			if (Lease.BeginDate is leap year and Lease.BeginDate month = 2)
			    return 29
			   
			else
			if (Lease.BeginDate month = 2)
				return 28		    
			else
			    return 30
			    
		DeriveNoOfDaysFinal is a DerivedField
			type is Numeric 2
			restricted
			if (Lease.EndDate month = 1 or Lease.EndDate month = 3 or Lease.EndDate month = 5 
			    or Lease.EndDate month = 7 or Lease.EndDate month = 8 or Lease.EndDate month = 10
			    or Lease.EndDate month = 12)
			    return 31
			else
			if (Lease.EndDate is leap year and Lease.EndDate month = 2)
			    return 29
			   
			else
			if (Lease.EndDate month = 2)
				return 28		    
			else
			    return 30
			    
		DerivedTotalPayments is a DerivedField
			type is like InternationalAmount
			restricted
			initialize LocalTotalPayments
			LocalTotalPayments = LeasePaymentRel.BaseTotalNonExecPaymentAmount + (Lease.DownPayment.BaseAmount.EnteredCurrencyAmount + Lease.InitialDirectCost.BaseAmount.EnteredCurrencyAmount + LeaseInitialDirectCostRel.InitialDirectCostBaseTotal - Lease.IncentiveAmount.BaseAmount.EnteredCurrencyAmount)
			return LocalTotalPayments
		
		DerivedSLAmountPartial is a DerivedField
			type is like InternationalAmount
			restricted			
			initialize LocalBasePartialSLAmount
			LocalBasePartialSLAmount = (((DeriveNoOfDaysInitial + 1 - Lease.BeginDate day)/DeriveNoOfDaysInitial)* DerivedSLAmount) 
	        return LocalBasePartialSLAmount
				        
		DerivedSLAmountEndPartial is a DerivedField
	    	type is like InternationalAmount
	    	restricted
	    	initialize LocalBasePartialSLAmount
	    	LocalBasePartialSLAmount = ((Lease.EndDate day / DeriveNoOfDaysFinal) * (DerivedSLAmount)) 
	    	return LocalBasePartialSLAmount       
		
		DerivedSLAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize LocalStraightLineAmount
			if(Lease.BeginDate day != 1 and Lease.EndDate day != DeriveNoOfDaysFinal)
				LocalStraightLineAmount = DerivedTotalPayments / ((Lease.LeaseTerm - 2) + ((DeriveNoOfDaysInitial + 1 - Lease.BeginDate day)/DeriveNoOfDaysInitial)+(Lease.EndDate day/DeriveNoOfDaysFinal))
			else
			if(Lease.BeginDate day != 1)
				LocalStraightLineAmount = (DerivedTotalPayments / ((Lease.LeaseTerm - 1) + (DeriveNoOfDaysInitial + 1 - Lease.BeginDate day)/DeriveNoOfDaysInitial))
			else
			if(Lease.EndDate day != DeriveNoOfDaysFinal)
				LocalStraightLineAmount = (DerivedTotalPayments / ((Lease.LeaseTerm - 1) + (Lease.EndDate day/DeriveNoOfDaysFinal)))
			else
				LocalStraightLineAmount =  (LeasePaymentRel.BaseTotalStraightLineAmount)
			return LocalStraightLineAmount		

		DerivedBasePaymentsAfterMod is a DerivedField
			type is like InternationalAmount
			restricted
			LocalModificationDate 	= first ModificationInProgressRel.ModificationEffectiveDate
			LocalStraightLineAmount =  sum LeasePaymentDetailsForModificationNoECCDueDateRel.BasePaymentAmount
			return LocalStraightLineAmount

		DerivedBaseCostAfterMod is a DerivedField
			type is like InternationalAmount
			restricted
			LocalLeaseCostAfterMod = DerivedBasePaymentsAfterMod + LeaseModificationRel.ROUAssetAmount.TransactionAmount - LeaseModificationRel.LeaseObligation.TransactionAmount 
			return LocalLeaseCostAfterMod

		DerivedNumberOfPaymentLeftAfterMod is a DerivedField
			type is Decimal size 7.5
			restricted
			LocalModificationDate 	= first ModificationInProgressRel.ModificationEffectiveDate
			LocalRemainingTermAfterMod 	= instance count of LeasePaymentDetailsForModificationNoECCDueDateRel 
			if(Lease.EndDate day != DeriveNoOfDaysFinal)
				LocalRemainingTermAfterMod = LocalRemainingTermAfterMod - 1 
				LocalRemainingTermAfterMod = LocalRemainingTermAfterMod + (Lease.EndDate day/DeriveNoOfDaysFinal)
			return LocalRemainingTermAfterMod

		DerivedSLAmountAfterMod is a DerivedField
			type is like InternationalAmount
			restricted
			return DerivedBaseCostAfterMod / DerivedNumberOfPaymentLeftAfterMod

		DerivedSLAmountEndPartialAfterMod is a DerivedField
	    	type is like InternationalAmount
	    	restricted
	    	initialize LocalBasePartialSLAmount
	    	LocalBasePartialSLAmount = ((Lease.EndDate day / DeriveNoOfDaysFinal) * (DerivedSLAmountAfterMod))
	    	return LocalBasePartialSLAmount 

    Conditions

        IsBlankExeccode
        	restricted
            when (LeasePaymentBalance.ExecutoryCostCode not entered)

        IsFinanceLease
        	restricted
            when (Lease.LeaseClassification.Finance)

        HasExeccode
        	restricted
            when (LeasePaymentBalance.ExecutoryCostCode entered)

        IsLmmasterx
        	restricted
            when (first LmmasterxRel exists)

		IsValidForActorContext
			restricted
			when (Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		HasModifications
			restricted
			when (LeaseModificationRel exists)
			
		IsGASB87	
			restricted
			when (Lease.LeaseAccountingMethod = LeaseAccountingMethod.GASB87)

		BeginningTimingWithResidualAndEndingPayment 
			restricted                              
			when (Lease.BeginningResidualOrPurchaseOption
			and Lease.EndDate day = last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate day)

		EndingTimingWithResidualAndEndingPayment  
			restricted                            
			when (Lease.EndingResidualOrPurchaseOption
			and Lease.EndDate day != last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate day)

		ShortTermLiabilityAccounting
			restricted
			when (actor.context.FinanceEnterpriseGroup.ShortTermLiabilityAccounting
			and !Lease.IsShortTermLease)

		OperatingLeaseWithCompledAdjustment
			restricted
			when (Lease.LeaseClassification.Operating
			and   AdjustmentsCompletedRel exists)

    Relations

        AmassetRel
            one-to-many relation to Asset
            Field Mapping uses Set13
            Instance Selection
                where (related.AssetLease.LeaseCompany = Company
                and    related.AssetLease.Lease = Lease)

        LminvoiceRel
            one-to-many relation to LeaseInvoice
            Field Mapping uses Set9
                related.Company    = Company
                related.Lease      = Lease
                related.FiscalYear = LeasePaymentBalance.FiscalYear

        LmmasterxRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode = LeasePaymentBalance.ExecutoryCostCode
                and    related.LeasePaymentBalance.FiscalYear = LeasePaymentBalance.FiscalYear)

        ApvenmastRel
            one-to-one relation to Vendor
            Field Mapping uses symbolic key
                related.VendorGroup = Company.VendorGroup
                related.Vendor      = Vendor

        LmcuamtRel
            one-to-one relation to LeaseCurrencyPaymentBalance
            delete cascades
            Field Mapping uses symbolic key
                related.Company                               = Company
                related.Lease                                 = Lease
                related.Vendor                                = Vendor
                related.LeasePaymentBalance.ExecutoryCostCode = LeasePaymentBalance.ExecutoryCostCode
                related.LeasePaymentBalance.FiscalYear        = LeasePaymentBalance.FiscalYear
                related.LeaseCurrencyPaymentBalance.Currency  = Lease.Currency

        LeasePaymentDetailsNoECCDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Vendor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)

        LeasePaymentDetailsNoECCNoResidualDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Vendor
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)
				









				
		LeasePaymentDetailsForModificationNoECCDueDateRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Vendor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

		LeasePaymentDetailsForModificationNoECCDueDateWithoutResidualRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Vendor
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

		ImpairmentROUBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate >= LocalImpairmentDate)

		AdjustmentROUBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate >= LocalAdjustmentDate)
				
        LeasePaymentRel
            one-to-one relation to LeasePayment
            Field Mapping uses symbolic key
                related.Company	= Company
                related.Lease	= Lease
                related.Vendor	= Vendor

		LeasePaymentPeriodBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

        LeasePaymentDetailsWithPaymentAmountRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Vendor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.LeasePaymentDetail.PaymentAmount entered)

		LeasePaymentDetailsForModificationWithPaymentAmountRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Vendor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.LeasePaymentDetail.PaymentAmount entered)
				
		GLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = LocalLeasePaymentDueDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = LocalLeasePaymentDueDate year)

		LeaseModificationRel
			one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor	= Vendor
				
		ModificationInProgressRel
			one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor	= Vendor				
			Instance Selection
				where (related.Status.Unreleased)

		ImpairmentInProgressRel
			one-to-many relation to LeaseImpairment
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor	= Vendor				
			Instance Selection
				where (related.Status.Unreleased)

		AdjustmentInProgressRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor	= Vendor				
			Instance Selection
				where (related.Status.Unreleased)

		AdjustmentsCompletedRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor	= Vendor				
			Instance Selection
				where (related.Status.Released)				

        LeaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

        LeaseCurrencyPaymentBalanceNoECCRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)
		LeaseInitialDirectCostRel
			one-to-many relation to LeaseInitialDirectCost
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease

		LeaseCashIncentiveRel 
			one-to-many relation to LeaseIncentive
            Field Mapping uses symbolic key
                related.Company    = Company
                related.Lease      = Lease
				related.Vendor     = Vendor
			Instance Selection
				where (related.IncentiveDate month = LocalLeasePaymentDueDate month
				and related.IncentiveDate year  = LocalLeasePaymentDueDate year
				and related.IncentiveType.Cash)

		LeaseIncentiveDueDateRel 
			one-to-many relation to LeaseIncentive
            Field Mapping uses symbolic key
                related.Company    = Company
                related.Lease      = Lease
				related.Vendor     = Vendor
			Instance Selection
				where (related.IncentiveDate month = LocalLeasePaymentDueDate month
				and related.IncentiveDate year  = LocalLeasePaymentDueDate year)
    Sets

        Set2
            indexed
            Sort Order
                Company
                Lease
                Vendor
                LeasePaymentBalance.ExecutoryCostCode
                LeasePaymentBalance.FiscalYear descending

        Set3
            indexed
            Sort Order
                Company
                Lease
                LeasePaymentBalance.FiscalYear descending
                Vendor
                LeasePaymentBalance.ExecutoryCostCode

        Set4
            indexed
            Sort Order
                Company
                Lease
                LeasePaymentBalance.ExecutoryCostCode
                LeasePaymentBalance.FiscalYear descending
                Vendor

        Set5
            indexed
            Sort Order
                Company
                Lease
                Vendor
                LeasePaymentBalance.FiscalYear
                LeasePaymentBalance.ExecutoryCostCode

	Actions
		Create is a Create Action
		
		Update is an Update Action

		Delete is a Delete Action

		Purge is a Purge Action
			restricted

		UpdateROUForImpairment is an Instance Action
			restricted
			Parameters
				PrmImpairmentAmount			is an InternationalAmount
				PrmImpairmentDate			is Date  
				PrmRemainingTerm			is Numeric 3
				PrmImpairmentROUBalance		is an InternationalAmount
				PrmStraightLineAmount		is an InternationalAmount
			Action Rules
				if (ImpairmentROUBalancesRel exist)
					LocalLastPeriodDate				= last LeasePaymentDetailsNoECCDueDateRel.DueDate
					LocalImpairmentDate				= PrmImpairmentDate
					LocalTempLeaseROUReduction		= PrmImpairmentROUBalance/PrmRemainingTerm

		    		if (LocalTempLeaseROUReduction entered)
			    		round LocalTempLeaseROUReduction to nearest DerivedRoundTo



					for each ImpairmentROUBalancesRel
						invoke UpdateROU each
					 		include CreateROUAmortForImpairment

		ResetROUForImpairment is an Instance Action
			restricted
			Action Rules
				LocalImpairmentDate					= first ImpairmentInProgressRel.EffectiveDate
				if (ImpairmentROUBalancesRel exist)
					LocalLastPeriodDate				= last LeasePaymentDetailsNoECCDueDateRel.DueDate


					for each ImpairmentROUBalancesRel
						LocalDueDate 				= each.PaymentDueDate

						invoke UpdateROU each
					 		include ResetROUAmortForImpairment

		UpdateROUForAdjustment is an Instance Action
			restricted
			Parameters
				PrmAdjustmentAmount			is an InternationalAmount
				PrmAdjustmentDate			is Date  
				PrmRemainingTerm			is Numeric 3
				PrmAdjustmentROUBalance		is an InternationalAmount
				PrmStraightLineAmount		is an InternationalAmount
				PrmIDCAmount				is an InternationalAmount
			Action Rules
				if (AdjustmentROUBalancesRel exist)
					LocalLastPeriodDate				= last LeasePaymentDetailsNoECCDueDateRel.DueDate
					if (Lease.LeaseClassification.Finance)
						if (Lease.DerivedROUAmortization > Lease.Term)
							LocalMonthsToAdd 	= Lease.DerivedROUAmortization - Lease.Term
							LocalLastPeriodDate	= LocalLastPeriodDate + LocalMonthsToAdd as months
						else
							if (Lease.DerivedROUAmortization < Lease.Term)
								LocalMonthsToSubtract 	= Lease.Term - Lease.DerivedROUAmortization
								LocalLastPeriodDate		= LocalLastPeriodDate - LocalMonthsToSubtract as months	
					LocalAdjustmentDate				= PrmAdjustmentDate
					LocalTempLeaseROUReduction		= PrmAdjustmentROUBalance/PrmRemainingTerm

		    		if (LocalTempLeaseROUReduction entered)
			    		round LocalTempLeaseROUReduction to nearest DerivedRoundTo

					for each AdjustmentROUBalancesRel
						invoke UpdateROU each
					 		include CreateROUAmortForAdjustment

		ResetROUForAdjustment is an Instance Action
			restricted
			Parameters
				PrmLeaseExpenseBase		is an InternationalAmount
				PrmROUReductionBase		is an InternationalAmount
			Action Rules
				LocalAdjustmentDate					= first AdjustmentInProgressRel.EffectiveDate
				if (AdjustmentROUBalancesRel exist)
					LocalLastPeriodDate				= last LeasePaymentDetailsNoECCDueDateRel.DueDate
					if (Lease.LeaseClassification.Finance)
						if (Lease.DerivedROUAmortization > Lease.Term)
							LocalMonthsToAdd 	= Lease.DerivedROUAmortization - Lease.Term
							LocalLastPeriodDate	= LocalLastPeriodDate + LocalMonthsToAdd as months
						else
							if (Lease.DerivedROUAmortization < Lease.Term)
								LocalMonthsToSubtract 	= Lease.Term - Lease.DerivedROUAmortization
								LocalLastPeriodDate		= LocalLastPeriodDate - LocalMonthsToSubtract as months	
					for each AdjustmentROUBalancesRel
						LocalDueDate 				= each.PaymentDueDate
						invoke UpdateROU each
					 		include ResetROUAmortForAdjustment

							 			
		UpdateLeaseAmortization is an Instance Action 
			restricted
			Parameters
				PrmBeginningROUAmount			is an InternationalAmount
				PrmBeginningPrincipalBalance	is an InternationalAmount
				PrmLeasePaymentDueDate			is Date
					
			Action Rules
				LocalLeasePaymentDueDate = PrmLeasePaymentDueDate
				if (DerivedGLPeriod = 1) 
					BeginningPrincipalBalance = PrmBeginningPrincipalBalance
					BeginningROUAmount		  = PrmBeginningROUAmount
				LocalTempLeaseLiability	= PrmBeginningPrincipalBalance


				LocalTempLeaseROU		= PrmBeginningROUAmount
				LocalLastPaymentDate	= last LeasePaymentDetailsForModificationWithPaymentAmountRel.DueDate
				LocalLastPeriodDate		= last LeasePaymentDetailsForModificationNoECCDueDateRel.DueDate
				LocalModificationDate 	= first ModificationInProgressRel.ModificationEffectiveDate

				if (Lease.Status.Modify
				and Lease.LeaseClassification.Finance
				and DerivedUseRemainingLife)
					LocalRemainingTerm 	= DerivedPeriodsLeft
					if (DerivedROUAmortization > Lease.Term)
						LocalMonthsToAdd 	= DerivedROUAmortization - ModificationInProgressRel.Term
						LocalLastPeriodDate	= LocalLastPeriodDate + LocalMonthsToAdd as months
					else
						if (DerivedROUAmortization < ModificationInProgressRel.Term)
							LocalMonthsToSubtract 	= ModificationInProgressRel.Term - DerivedROUAmortization
							LocalLastPeriodDate		= LocalLastPeriodDate - LocalMonthsToSubtract as months
				else
					LocalRemainingTerm 		= instance count of LeasePaymentDetailsForModificationNoECCDueDateWithoutResidualRel






				if (Lease.EndingResidual
				or  Lease.HasEndingBargainPurchaseOption)
					for each LeasePaymentDetailsForModificationNoECCDueDateWithoutResidualRel
						include CreateAmortizationSchedule
				else
					for each LeasePaymentDetailsForModificationNoECCDueDateRel
						include CreateAmortizationSchedule

							
		CreateLeaseAmortization is a Create Action
			restricted
			Exit Rules
				LocalTempLeaseLiability		= BeginningPrincipalBalance
				LocalTempLeaseROU			= BeginningROUAmount


				if (Lease.Status.Modify)
					LocalLastPaymentDate	= last LeasePaymentDetailsForModificationWithPaymentAmountRel.DueDate
					LocalLastPeriodDate		= last LeasePaymentDetailsForModificationNoECCDueDateRel.DueDate
					LocalModificationDate 	= first ModificationInProgressRel.ModificationEffectiveDate
					if (Lease.LeaseClassification.Finance
					and DerivedUseRemainingLife)
						LocalRemainingTerm 	= DerivedPeriodsLeft
						if (DerivedROUAmortization > Lease.Term)
							LocalMonthsToAdd 	= DerivedROUAmortization - ModificationInProgressRel.Term
							LocalLastPeriodDate	= LocalLastPeriodDate + LocalMonthsToAdd as months
						else
							if (DerivedROUAmortization < ModificationInProgressRel.Term)
								LocalMonthsToSubtract 	= ModificationInProgressRel.Term - DerivedROUAmortization
								LocalLastPeriodDate		= LocalLastPeriodDate - LocalMonthsToSubtract as months
					else
						LocalRemainingTerm 	= instance count of LeasePaymentDetailsForModificationNoECCDueDateWithoutResidualRel





					if (Lease.EndingResidual
					or  Lease.HasEndingBargainPurchaseOption)					
						for each LeasePaymentDetailsForModificationNoECCDueDateWithoutResidualRel
							include CreateAmortizationSchedule
					else
						for each LeasePaymentDetailsForModificationNoECCDueDateRel
							include CreateAmortizationSchedule

				else
					LocalLastPaymentDate	= last LeasePaymentDetailsWithPaymentAmountRel.DueDate
					LocalLastPeriodDate		= last LeasePaymentDetailsNoECCDueDateRel.DueDate

					if (Lease.DerivedROUAmortization > Lease.Term)
						LocalMonthsToAdd 	= Lease.DerivedROUAmortization - Lease.Term
						LocalLastPeriodDate	= LocalLastPeriodDate + LocalMonthsToAdd as months
					else
						if (Lease.DerivedROUAmortization < Lease.Term)
							LocalMonthsToSubtract 	= Lease.Term - Lease.DerivedROUAmortization
							LocalLastPeriodDate		= LocalLastPeriodDate - LocalMonthsToSubtract as months						
					LocalRemainingTerm 		= Lease.DerivedROUAmortization


					if (Lease.EndingResidual
					or Lease.HasEndingBargainPurchaseOption)
						for each LeasePaymentDetailsNoECCNoResidualDueDateRel
							include CreateAmortizationSchedule
					else 
						for each LeasePaymentDetailsNoECCDueDateRel
							include CreateAmortizationSchedule





		CreateLeaseCurrencyPaymentBalance is a Set Action   
			restricted
			Parameters
				PrmCompany						is a PayablesCompany
				PrmLease						is a Lease
				PrmVendor						is a Vendor
				PrmInitializeEntry				is Boolean

			Set Is  
				PrmCompany
                PrmLease
                PrmVendor

			Local Fields
				LocalActor								is an Actor
				LocalInitializeEntry					is Boolean
				LocalCurrencyBeginningROUAmount			is an InternationalAmount
				LocalCurrencyBeginningBalanceAmount		is an InternationalAmount
				LocalCurrencyBeginningPrincipalBalance	is an InternationalAmount
				LocalCurrencyBeginningBalanceInterest	is an InternationalAmount
			Instance Selection
				where (Company 		= PrmCompany
				and    Lease		= PrmLease
				and    Vendor		= PrmVendor
				and    LeasePaymentBalance.ExecutoryCostCode not entered)

			Sort Order is Set5

			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "LeaseAmortization"
						priority is high
						detail is "Must_have_Lease_payments_balance_to_create"
	
				Set Rules
					Entrance Rules
						LocalActor 				= actor
						LocalInitializeEntry	= PrmInitializeEntry

					Exit Rules
						if (!ShortTermLiabilityAccounting)
							invoke ResetStatusAfterTest PrmLease
						else
							invoke UpdateShortAndLongTermLiabilityAmounts PrmLease

				Instance Rules
					if (LocalInitializeEntry)
						LocalCurrencyBeginningROUAmount			= Lease.LeaseROUAssetAmount.TransactionAmount
						LocalCurrencyBeginningBalanceAmount		= sum LeasePaymentDetailsNoECCDueDateRel.PaymentAmount + sum LeasePaymentDetailsNoECCDueDateRel.TransactionLandTax
						LocalCurrencyBeginningPrincipalBalance	= Lease.LeaseObligation.TransactionAmount
						LocalCurrencyBeginningBalanceInterest	= LocalCurrencyBeginningBalanceAmount - LocalCurrencyBeginningPrincipalBalance
						LocalInitializeEntry = false
					else
						if (LeaseCurrencyPaymentPeriodBalanceNoECCRel exist)
							LocalCurrencyBeginningROUAmount			= last LeaseCurrencyPaymentPeriodBalanceNoECCRel.ROUBalance
							LocalCurrencyBeginningBalanceAmount		= first LeaseCurrencyPaymentBalanceNoECCRel.BeginningBalanceAmount - sum LeaseCurrencyPaymentPeriodBalanceNoECCRel.Amount
							LocalCurrencyBeginningPrincipalBalance	= last LeaseCurrencyPaymentPeriodBalanceNoECCRel.LiabilityBalance
							LocalCurrencyBeginningBalanceInterest	= first LeaseCurrencyPaymentBalanceNoECCRel.BeginningBalanceInterest - sum LeaseCurrencyPaymentPeriodBalanceNoECCRel.InterestAmount
					invoke CreateLeaseAmortization LeaseCurrencyPaymentBalance
						invoked.LeasePaymentBalance.FiscalYear 						= LeasePaymentBalance.FiscalYear
						invoked.LeaseCurrencyPaymentBalance.Currency				= Lease.Currency
						invoked.Company												= Company
						invoked.Lease												= Lease
						invoked.Vendor												= Vendor
						invoked.BeginningROUAmount									= LocalCurrencyBeginningROUAmount
						invoked.BeginningBalanceAmount								= LocalCurrencyBeginningBalanceAmount
						invoked.BeginningPrincipalBalance							= LocalCurrencyBeginningPrincipalBalance
						invoked.BeginningBalanceInterest							= LocalCurrencyBeginningBalanceInterest
						invoked.CurrencyNumberOfDecimals							= Lease.CurrencyNumberOfDecimals

