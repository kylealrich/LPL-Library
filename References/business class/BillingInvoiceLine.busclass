BillingInvoiceLine is a BusinessClass
    owned by bl
    prefix is OIL
    classic name is OEINVCLINE

    Ontology
        symbolic key is BillingInvoiceLine
            classic set name is OILSET1
            classic name is LINE-NBR
            classic name for BillingInvoice.InvoiceNumber is INVC-NUMBER
			classic name for BillingInvoice.InvoicePrefix is INVC-PREFIX
    Patterns
        implements StaticJava
        disable AuditIndex
		implements Archivable
		
		implements ContextualParent
		
    Persistent Fields
		Location                            is an InventoryLocation
        LineType							is a BillingLineType
        MajorSalesClass
            classic name is SALES-MAJCL
        MinorSalesClass
            classic name is SALES-MINCL    	
        Item
        Description
        CustomerOrder
            classic name is ORDER-NBR
        WarehouseShipment
            classic name is SHIPMENT-NBR
        Quantity
        InvoiceCatchWeightQuantity          is a Quantity
            classic name is INVC-CW-QTY            
        SellingPriceUnitOfMeasure           is a UnitOfMeasure
            classic name is SPR-UOM
        SellingUnitOfMeasure                is a UnitOfMeasure
            classic name is SELL-UOM
        SecondaryUOM                        is a UnitOfMeasure
            classic name is SEC-UOM
        MultipleSellPrice					is Boolean
            classic name is MULT-SPR-FL
        SellingPriceToStockConversionFactor is an UOMConversion
            sql name is SPriceToStockConversionFactor
            classic name is SPR-TO-STOCK
        SellToStock							is an UOMConversion
        SecondaryUOMMultiplier              is an UOMMultiplier
            classic name is SEC-UOM-MULT       
        PriceStatus
        NoCharge							is Boolean
            classic name is NO-CHARGE-FL
        EnteredPrice                        is a UnitPrice
        	precision is DerivedEnteredPriceNumberOfDecimals
				round to precision
        UnitPrice                           is an InternationalCost
        SellingPrice                        is an InternationalCost
            classic name is SELL-PRC-CURR
        PriceInSellingUnitOfMeasure         is an InternationalCost
            classic name is SELL-UNIT-PRC
        UnitCost                           	is an InternationalCost 
        CurrentCost                         is an InternationalCost
        EnteredDiscount                     is an InternationalAmount
            classic name is ENTERED-DISC
        AddOnDiscount                       is an InternationalAmount
            classic name is ADD-ON-DISC
        AllocatedDiscount                   is an InternationalCost
            classic name is ALLOC-DISC
        HSNSACCode
        TaxExemptCode
            classic name is TAX-EXEMPT-CD
        TaxCode
        TaxableCurrencyAmount               is an InternationalAmount
            classic name is TAX-AMT-CURR
        TaxableBaseCurrencyAmount           is an InternationalAmount
            classic name is TAX-AMT-BSE
        ReasonCode                          is an OrderCancelCreditReason
        PriceDiscountCode
            classic name is DISC-CODE
		OrderDiscount						is Boolean
            classic name is ORD-DISC-FL

		ContractNumber						is AlphaUpper size 14



        Promotion							




		FinalInvoice						is Boolean
            classic name is FINAL-INVC-FL
        DiscountBaseAmounts                 is an InternationalAmount
            classic name is DSC-AMT-BASE
        LastAddOnChargeSequence             is a Sequence3
            classic name is LAST-MISC-SEQ
        LastCommentSequence                 is a Sequence3
            classic name is LAST-COMM-SEQ
        Territory
        SalesRepresentative
            classic name is SALESMAN
        SalesRepresentative2                is a SalesRepresentative
        CommissionRate1                      is a ChrgRate
            classic name is COMM-RATE-1
        CommissionRate2                      is a ChrgRate
            classic name is COMM-RATE-2
		CommissionSplitPercentage
            classic name is COMM-SPLIT
        UserField1                          is a PurchaseOrderUserField2
            classic name is USER-FLD1
        UserField2                          is a UserFld2
            classic name is USER-FLD2
        UserField3                          is a UserFld3
            classic name is USER-FLD3
        LineGrossAmount                     is a CurrencyAmount
        	protected
            classic name is LINE-GRS-CURR
        LineNetAmount						is a CurrencyExchangeGroup
        	protected
        	classic name for LineNetAmount.TransactionAmount is LINE-NET-CURR
			classic name for LineNetAmount.BaseAmount		 is LINE-NET-BASE


       	TaxableAmount                       is an InternationalAmount
       		protected
            classic name is ENT-TAXABLE
        TaxableBaseAmount                   is an InternationalAmount
        	protected
            classic name is TAXABLE-BSE
        TaxTotal							is an InternationalAmount
        	protected 					
        InvoiceLineObjID
            classic name is INVL-OBJ-ID
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        LineGrossBaseAmount                 is an InternationalAmount
            classic name is LINE-GRS-BASE
		Rounding							is Boolean
        GlobalLineType
            classic name is GLBL-LINE-TYPE
        SalesAccount                        is a TransactionCodeBlock 
            classic name for SalesAccount.AccountingUnit is SLS-ACCT-UNIT
            classic name for SalesAccount.GeneralLedgerChartAccount is SLS-ACCOUNT
            classic name for SalesAccount.Project is ACTIVITY
        OffsetAccount                       is a TransactionCodeBlock
            classic name for OffsetAccount.AccountingUnit is OFF-ACCT-UNIT
            classic name for OffsetAccount.GeneralLedgerChartAccount is OFF-ACCOUNT
        COGSAccount                         is a TransactionCodeBlock
            classic name for COGSAccount.AccountingUnit is CGS-ACCT-UNIT
            classic name for COGSAccount.GeneralLedgerChartAccount is CGS-ACCOUNT
            classic name for COGSAccount.Project is ACTIVITY-C
        DiscountAccountArray
        UNSPSCCode
		PointOfTitleTransfer
		ShipTerm
	
	Rule Blocks
	
		LoadVertexGlobalInputFields 
			if (TaxEntityUsesVertex)
		   		CalculateTax.TransactionSource				= "O"	
		   		CalculateTax.CallingModule					= "BillingInvoiceLine"
				CalculateTax.Vendor							= BillingInvoice.Customer
				CalculateTax.Invoice 						= BillingInvoice.DerivedInvoice
				CalculateTax.FromTaxCode					= Location.TaxCode 
				CalculateTax.FromPostalAddress				= Location.PostalAddress 
			    CalculateTax.Quantity						= Quantity
			    if (BillingInvoice.CustomerShipTo.ShipToAddress.Country entered)
			    	CalculateTax.VATRegistrationCountry     = BillingInvoice.CustomerShipTo.ShipToAddress.Country 
			    else
			    	CalculateTax.VATRegistrationCountry     = BillingInvoice.CompanyCustomer.VATRegistrationCountry 
			   	if (BillingInvoice.CustomerShipTo.VATRegistrationNumber entered)
			    	CalculateTax.VATRegistrationNumber		= BillingInvoice.CustomerShipTo.VATRegistrationNumber 
			    else
			    	CalculateTax.VATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
			    CalculateTax.FromVATRegistrationCountry   	= TaxEntityRel.VATRegistrationCountry 
			    CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber 
			    CalculateTax.DefaultFilingCurrency 			= TaxEntityRel.DefaultFilingCurrency 
				CalculateTax.CurrencyRate					= BillingInvoice.CurrencyRate		
			    CalculateTax.TransactionCurrency 			= BillingInvoice.Currency						 
				CalculateTax.BaseCurrency 					= Company.Currency
				CalculateTax.ProductClass 					= MajorSalesClass
				CalculateTax.UnitCost 						= EnteredPrice
				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode
				else 
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= DerivedUNSPSCCodeNoDash
				if (BillingInvoice.BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				if (BillingInvoice.CustomerShipTo entered)
					CalculateTax.PostalAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
				else
				if (BillingInvoice.Customer entered)
					CalculateTax.PostalAddress				= BillingInvoice.Customer.PostalAddress
				else
				if (BillingInvoice.BillTo entered)
					CalculateTax.PostalAddress				= BillingInvoice.BillTo.PostalAddress
				include LoadVertexDebugOptions
				
		LoadVertexDebugOptions
			if (TaxEntityUsesVertex)					
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey	
					CalculateTax.AppendToJurisFile			= true					
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey				 
					CalculateTax.RelatedObjectReference     = reference to this instance	
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
		
		VertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
							else    
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Customer
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.InvoiceDate
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Currency
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredPrice
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Item.CommodityCode
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUNSPSCCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredPrice
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 8
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.ToAccountingEntity
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.InvoiceDate
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		ProcessTaxHistoryVertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Description)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
							else    
							if (each.ExternalValue.ValueIs.Customer)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Customer
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.InvoiceDate
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Item.CommodityCode
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUNSPSCCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Currency
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredPrice
							else    
							if (each.ExternalValue.ValueIs.ContractType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.WorkType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ServiceType
							else    
							if (each.ExternalValue.ValueIs.UsageType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.UsageType
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else 
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.AccountingUnit
							else 
							if (each.ExternalValue.ValueIs.Project)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension10
							else    
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredPrice
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = SalesAccount.ToAccountingEntity
							else
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = BillingInvoice.InvoiceDate
							else    
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Billing_Invoice"
				CalculateTax.System						= "BL"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel

				CalculateTax.Suffix						= BillingInvoice.InvoicePrefix
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
				CalculateTax.FromPostalAddress			= Location.PostalAddress
				CalculateTax.CommodityCode				= DerivedUNSPSCCodeNoDash
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				CalculateTax.Customer					= BillingInvoice.Customer
				CalculateTax.VendorCustomerName			= BillingInvoice.Customer.Name
				CalculateTax.Description				= Description
				CalculateTax.UniqueLineNumber			= UniqueID
				CalculateTax.ItemNumber					= Item
				if (BillingInvoice.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
		
		CreateTaxLineItemAndUserFields
			if (TaxEntityRel.ThirdParty.Sabrix
			or SingleCallToVertex)
				if ((AllowMultipleSalesAccountEntry
				and !LocalTaxCallForLine
				and not SingleCallToOneSource)
				or LocalCreateTaxLineItems)
					LocalLineQuantity = 1
					for each BillingInvoiceLineSalesAccountRel
						if (each.SalesAmount entered)
							LocalUniqueID					= each.UniqueID
							LocalSalesAmount				= each.SalesAmount
							LocalDescription				= each.Description
							LocalSalesAccount				= each.SalesAccount
							if (TaxLineItemsForLineSalesAccountsRel not exists)
								include CreateTaxLineItems
				else
					LocalUniqueID					= UniqueID
					LocalLineQuantity 				= Quantity
					LocalSalesAmount				= TaxableAmount
					LocalDescription				= Description
					LocalSalesAccount				= SalesAccount
					if (TaxLineItemsForLineRel not exists)
						include CreateTaxLineItems

		CreateTaxLineItems
			invoke Create TaxLineItem
				assign result to TaxLineItemView
				invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				invoked.InvoiceNumber				= BillingInvoice.InvoiceNumber
				invoked.InvoiceDate					= BillingInvoice.InvoiceDate
				invoked.TaxEntity					= Company.AccountingEntity
				invoked.LineItemId					= Item
				invoked.RelatedObjectReference		= reference to BillingInvoiceLine
				if (SingleCallToOneSource
				or  SingleCallToVertex)
					LocalLineItemNumber 			= (last TaxLineItemsRel.LineItemNumber + 1)
					invoked.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
				else
				if (LocalSequenceLineItemNumber)
					LocalLineItemNumber 			= (last TaxLineItemsForLineSalesAccountsRel.LineItemNumber + 1)
					invoked.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
				else
					LocalLineItemNumber 			= 1
					invoked.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
				invoked.RelatedLineItemUniqueId		= UniqueID
				invoked.LineItemNumber				= LocalLineItemNumber
				invoked.InvoiceAmount				= LocalSalesAmount
				invoked.TaxableAmount				= LocalSalesAmount
				invoked.ShipToTaxCode				= TaxCode
				invoked.ShipToTaxCodeDescription	= TaxCode.Description
				invoked.CommodityCode				= DerivedUNSPSCCodeNoDash
				invoked.ShipToAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
				invoked.Description					= LocalDescription
				if (IsHSNSACCodeEnabled)
					invoked.CommodityCodeType      	= "HSN"
					invoked.CommodityCode			= HSNSACCode
				else
					invoked.CommodityCodeType		= "UNSPSC"
					invoked.CommodityCode			= DerivedUNSPSCCodeNoDash
				if (TaxEntityUsesVertex)
					invoked.ProductTaxCategory		= ProductTaxCategory
					invoked.Quantity				= LocalLineQuantity
					if (AllowMultipleSalesAccountEntry)
						invoked.UnitPrice			= LocalSalesAmount
					else
						invoked.UnitPrice			= EnteredPrice
					invoked.ProductClass			= MajorSalesClass

			initialize AttributeCounter
			if (TaxEntityRel.ThirdParty.Sabrix
			and TaxAttributesRel exists)
				invoke Create TaxLineItemUserFields
					for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
						invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
						if (SingleCallToOneSource)
							invoked.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
						invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

						if (each.LoadDynamicField.ValueIs.TaxEntity)
							if (TaxEntityRel exists)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
						else
						if (each.LoadDynamicField.ValueIs.Company)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
						else
						if (each.LoadDynamicField.ValueIs.Description)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalDescription
						else
						if (each.LoadDynamicField.ValueIs.Customer)
							if (BillingInvoice.Customer entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Customer
						else
						if (each.LoadDynamicField.ValueIs.PostingDate)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.InvoiceDate
						else
						if (each.LoadDynamicField.ValueIs.TaxDate)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.InvoiceDate
						else
						if (each.LoadDynamicField.ValueIs.GLAccount)
							if (LocalSalesAccount.GeneralLedgerChartAccount entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.GeneralLedgerChartAccount
						else
						if (each.LoadDynamicField.ValueIs.Location)
							if (BillingInvoice.Location entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Location
						else
						if (each.LoadDynamicField.ValueIs.Currency)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Currency
						else
						if (each.LoadDynamicField.ValueIs.DiscountAmount)
							if (EnteredDiscount entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredDiscount
						else
						if (each.LoadDynamicField.ValueIs.UnitCost)
							if (UnitCost entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= UnitCost
						else
						if (each.LoadDynamicField.ValueIs.ContractType)
							if (LocalSalesAccount.Project.ContractType entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.ContractType
						else
						if (each.LoadDynamicField.ValueIs.WorkType)
							if (LocalSalesAccount.Project.WorkType entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.WorkType
						else
						if (each.LoadDynamicField.ValueIs.AccountSubType)
							if (LocalSalesAccount.GeneralLedgerChartAccount.AccountSubType entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.GeneralLedgerChartAccount.AccountSubType
						else
						if (each.LoadDynamicField.ValueIs.ServiceType)
							if (LocalSalesAccount.Project.ServiceType entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.ServiceType
						else
						if (each.LoadDynamicField.ValueIs.UsageType)
							if (LocalSalesAccount.Project.UsageType entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.UsageType
						else
						if (each.LoadDynamicField.ValueIs.Project)
							if (LocalSalesAccount.Project entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project
						else
						if (each.LoadDynamicField.ValueIs.CommodityCode)
							if (UNSPSCCode entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedUNSPSCCodeNoDash
						else
						if (each.LoadDynamicField.ValueIs.UNSPSC)
							if (UNSPSCCode entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedUNSPSCCodeNoDash
						else
						if (each.LoadDynamicField.ValueIs.ShipToName)
							if (BillingInvoice.CustomerShipTo.Name entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.CustomerShipTo.Name
						else
						if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)
							if (ProductTaxCategory entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ProductTaxCategory
						else
						if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
							if (LocalSalesAccount.ToAccountingEntity entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.ToAccountingEntity
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension1)
							if (LocalSalesAccount.FinanceDimension1 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension1
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension2)
							if (LocalSalesAccount.FinanceDimension2 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension2
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension3)
							if (LocalSalesAccount.FinanceDimension3 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension3
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension4)
							if (LocalSalesAccount.FinanceDimension4 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension4
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension5)
							if (LocalSalesAccount.FinanceDimension5 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension5
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension6)
							if (LocalSalesAccount.FinanceDimension6 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension6
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension7)
							if (LocalSalesAccount.FinanceDimension7 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension7
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension8)
							if (LocalSalesAccount.FinanceDimension8 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension8
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension9)
							if (LocalSalesAccount.FinanceDimension9 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension9
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension10)
							if (LocalSalesAccount.FinanceDimension10 entered)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension10
						else
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value
			else
			if (TaxEntityUsesVertex
			and TaxAttributesRel.VertexFlexibleFieldExist)
				Idx = 0
				invoke Create TaxLineItemUserFields
					invoked.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup
					if (SingleCallToVertex)
						invoked.TaxLineItem.UniqueIdOfRelatedObject		= BillingInvoice.UniqueID
					else
						invoked.TaxLineItem.UniqueIdOfRelatedObject		= LocalUniqueID
					invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx += 1
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 	= each.VertexFlexibleCode.FieldId
						if (each.ExternalValue.ValueIs.TaxEntity)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.Company)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= Company
						else
						if (each.ExternalValue.ValueIs.Description)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= LocalDescription
						else
						if (each.ExternalValue.ValueIs.Customer)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.Customer
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PostingDate)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.InvoiceDate
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.Location)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.Location
						else
						if (each.ExternalValue.ValueIs.Currency)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= BillingInvoice.Currency
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= EnteredDiscount
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= EnteredPrice
						else
						if (each.ExternalValue.ValueIs.CommodityCode)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= Item.CommodityCode
						else
						if (each.ExternalValue.ValueIs.UNSPSC)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= DerivedUNSPSCCodeNoDash
						else
						if (each.ExternalValue.ValueIs.ContractType)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.Project.ContractType
						else
						if (each.ExternalValue.ValueIs.WorkType)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.Project.WorkType
						else
						if (each.ExternalValue.ValueIs.ServiceType)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.Project.ServiceType
						else
						if (each.ExternalValue.ValueIs.AccountSubType)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.GeneralLedgerChartAccount.AccountSubType
						else
						if (each.ExternalValue.ValueIs.UsageType)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.Project.UsageType
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Project)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.Project
						else
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= ProductTaxCategory
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension1
						else
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension2
						else
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension3
						else
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension4
						else
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension5
						else
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension6
						else
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension7
						else
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension8
						else
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension9
						else
						if (each.ExternalValue.ValueIs.FinanceDimension10)
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= LocalSalesAccount.FinanceDimension10
						else
							invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  		= each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx += 1
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId 				= each.VertexFlexibleNumeric.FieldId
						if (each.ExternalValue.ValueIs.TaxEntity)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= LocalSalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Company)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= Company
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= LocalSalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= EnteredDiscount
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 		= 3
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= EnteredPrice
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 		= 8
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= LocalSalesAccount.ToAccountingEntity
						else
							invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx += 1
							invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId 			= each.VertexFlexibleDate.FieldId
						if (each.ExternalValue.ValueIs.PostingDate)
							invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.InvoiceDate
						else
							invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= each.DateValue

		CalculateTaxCommonInputParams
			initialize CalculateTax
			CalculateTax.Function					= CalculateTax.Function.Inquire
			CalculateTax.InvoiceCompany             = Company
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel
			CalculateTax.Customer					= BillingInvoice.Customer	
			CalculateTax.LineNumber					= BillingInvoiceLine
			if (!BillingInvoice.IsTaxEngine)
				CalculateTax.TaxCode					= TaxCode
			CalculateTax.Invoice					= BillingInvoice.DerivedInvoice
			CalculateTax.ShipmentDate				= BillingInvoice.ShipDate
			CalculateTax.InvoiceDate				= BillingInvoice.InvoiceDate
			CalculateTax.GeneralLedgerDate			= BillingInvoice.GeneralLedgerDate
			if (BillingInvoice.TaxPointDate entered)
				CalculateTax.TaxPointDate			= BillingInvoice.TaxPointDate	
			else
				CalculateTax.TaxDate                = BillingInvoice.InvoiceDate			
			CalculateTax.ProductTaxCategory			= ProductTaxCategory
			CalculateTax.System						= "BL"
			if (IsOneSourceTax
			or TaxEntityUsesVertex)
				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= DerivedUNSPSCCodeNoDash


		CalculateLineTax	
			if (OrderDiscount
		 	and (BillingInvoice.OrderDiscount.TransactionAmount entered
		 	or   BillingInvoice.EnteredDiscount.TransactionAmount entered))
		 		LocalDiscount 							= LineGrossAmount - (LocalTotalDiscount + EnteredDiscount)
				AllocatedDiscount						= (BillingInvoice.OrderDiscount.TransactionAmount + BillingInvoice.EnteredDiscount.TransactionAmount)
	 			if (BillingInvoice.Discountable != 0)
		 			AllocatedDiscount  					= (AllocatedDiscount * (LocalDiscount/BillingInvoice.Discountable))

		 		round AllocatedDiscount to nearest .01
		 		AllocatedDiscount += LocalExcessDiscount
			
			initialize CalculateTax
			if (BillingInvoice.IsTaxEngine)
				if (BillingInvoice.BillingInvoiceSource.Shipment)
					LocalWarehouseShipment = WarehouseShipment
					TaxTotal = sum TaxEngineTaxDetailRel.TaxAmount
				else
				if (BillingInvoice.BillingInvoiceSource.Manual)
					for each InvoiceTaxEngineTaxDetailRel						
						if (BillingInvoice.BillingInvoiceType.Credit)
							if (each.CancelSequence entered)
								TaxTotal += each.TaxAmount
						else
							if (each.CancelSequence not entered)
								TaxTotal += each.TaxAmount

			else
				if (TaxCode entered and not NoCharge)
					initialize LocalTaxTotal
					include CalculateTaxCommonInputParams
					CalculateTax.Quantity					= Quantity
					CalculateTax.Location					= Location
					
					if (BillingInvoice.IsCustomerOrder)
						CalculateTax.PostalAddress			= BillingInvoice.CustomerOrder.BillPostalAddress
					else
					if (BillingInvoice.IsBillToEnterd)
						CalculateTax.PostalAddress 			= BillingInvoice.BillTo.PostalAddress
					else
						CalculateTax.PostalAddress			= BillingInvoice.Customer.PostalAddress	
					CalculateTax.FromTaxCode				= BillingInvoice.Location.TaxCode
					CalculateTax.FromPostalAddress			= BillingInvoice.Location.PostalAddress
					
					CalculateTax.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode




					if (OrderDiscount
					and (BillingInvoice.OrderDiscount.TransactionAmount entered
					or   BillingInvoice.EnteredDiscount.TransactionAmount entered))
						TaxableAmount							= TaxableAmount - AllocatedDiscount
				
					if ((BillingInvoice.BillingInvoiceSource.Manual
					or 	BillingInvoice.BillingInvoiceSource.Shipment)
					and BillingInvoice.TermsCode entered
					and IsTaxAfterTerms)
						CalculateTerms.TransactionDate			= BillingInvoice.InvoiceDate
						CalculateTerms.TransactionAmount 		= TaxableAmount		
						LocalTermsCode							= BillingInvoice.TermsCode
						LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
						constraint (CalculateTerms.OutputErrorNumber not entered)
							"<CalculateTerms.OutputErrorMessage>"
						
						if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered)
							LocalTermsDiscount					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount	
							LocalTermsDueDate					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
							TaxableAmount				   		= TaxableAmount - LocalTermsDiscount	
					
					if (TaxableAmount entered 
					and DoTaxCalculation)			 	
						CalculateTax.Function						= CalculateTax.Function.CalculateTax
						CalculateTax.ThirdPartyFunction				= CalculateTax.ThirdPartyFunction.Calculate
						CalculateTax.TransactionType				= CalculateTax.TransactionType.Sale
						CalculateTax.TaxableAmount					= TaxableAmount
						if (LocalTermsDueDate entered)
							CalculateTax.PaymentDate				= LocalTermsDueDate
						else
							CalculateTax.PaymentDate				= BillingInvoice.InvoiceDate
						CalculateTax.NumberOfDecimals				= BillingInvoice.CurrencyNumberOfDecimals

						include LoadVertexGlobalInputFields 
						include LoadOneSourceInputFields

						if (not SingleCallToOneSource
						and not SingleCallToVertex)
							LocalSalesAccount = SalesAccount
							include VertexFlexibleFields
							include CreateTaxLineItemAndUserFields
							CalculateTax.UniqueIdOfRelatedObject		= UniqueID
							LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
							constraint (CalculateTax.OutputErrorNumber not entered) 
								"<CalculateTax.OutputErrorMessage>"
							
							for each CalculateTax.TaxTable.TaxTableOutput
								LocalTaxTotal  += each.TaxAmount5DP
								round LocalTaxTotal to nearest BillingInvoice.DerivedRoundToDecimals
							
							if (TaxEntityRel.ThirdParty.Sabrix
							and CalculateTax.OutputTotalTaxAmount not entered)
								initialize TaxableAmount

					TaxTotal			   = LocalTaxTotal

		CreateTaxJournal

			if (TaxExemptCode.Taxable		
			and TaxCode entered
			and CalculateTax.TaxTable.TaxTableOutput[1].TaxCode entered)
				MinusOne = -1
				initialize I1
				I1 = 1
				while (I1 <= 8
				and not LocalVertexTaxHistoryProcessed)
					if (CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
						initialize ProcessTaxHistory
						ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
						ProcessTaxHistory.RelatedObjectReference    	= reference to this instance			
						ProcessTaxHistory.SystemCode					= "BL"
						ProcessTaxHistory.TransactionType				= "S"   
						ProcessTaxHistory.TransactionSource				= "O"	
						ProcessTaxHistory.InvoicedOrCreditMemo			= "I"			
						ProcessTaxHistory.InvoiceCompany            	= Company
						ProcessTaxHistory.TaxEntity						= Company.AccountingEntity	 
						ProcessTaxHistory.ProcessLevel					= BillingInvoice.BillingProcessLevel
					   	ProcessTaxHistory.Quantity						= Quantity
					   	ProcessTaxHistory.Customer						= BillingInvoice.Customer
						ProcessTaxHistory.TaxID							= CalculateTax.TaxTable.TaxTableOutput[I1].TaxID
					   	ProcessTaxHistory.Location						= Location
					 	ProcessTaxHistory.Invoice						= BillingInvoice.DerivedInvoice
						if (CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint = "P")
							ProcessTaxHistory.TaxTransactionAccount		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxOutputDueAccount
						else
							ProcessTaxHistory.TaxTransactionAccount		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxOutputAccount
						ProcessTaxHistory.AccruedOrInvoiced 			= CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag
						ProcessTaxHistory.VendorOrCustomerName			= BillingInvoice.CompanyCustomer.Customer.Name				
					   	ProcessTaxHistory.ProductTaxCategory			= ProductTaxCategory
					   	ProcessTaxHistory.LineNumber					= BillingInvoiceLine				
						ProcessTaxHistory.TaxCode						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode
						ProcessTaxHistory.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxRate
						if (TaxEntityRel.ThirdParty.Sabrix)
							ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
						else
							if (BillingInvoice.IsCustomerOrder)
								ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerOrder.BillPostalAddress
							else
							if (BillingInvoice.IsBillToEnterd)
								ProcessTaxHistory.ToAddress 				= BillingInvoice.BillTo.PostalAddress
							else
								ProcessTaxHistory.ToAddress					= BillingInvoice.Customer.PostalAddress	
					 	ProcessTaxHistory.FromTaxCode					= BillingInvoice.Location.TaxCode
					 	ProcessTaxHistory.FromAddress					= BillingInvoice.Location.PostalAddress
					 	ProcessTaxHistory.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode				
						ProcessTaxHistory.DeliveryTerms					= ShipTerm
						ProcessTaxHistory.PointOfTitleTransfer			= PointOfTitleTransfer
						ProcessTaxHistory.CommodityCode					= DerivedUNSPSCCodeNoDash

					 	ProcessTaxHistory.InvoiceDate					= BillingInvoice.InvoiceDate
					   	ProcessTaxHistory.TaxPointDate					= BillingInvoice.TaxPointDate	
						

						ProcessTaxHistory.TransactionTaxAmount			= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount 
						ProcessTaxHistory.TransactionTaxableAmount		= TaxableAmount
						ProcessTaxHistory.TransactionInvoiceAmount		= BillingInvoice.InvoiceTotal
						ProcessTaxHistory.TransactionNumberOfDecimals	= BillingInvoice.CurrencyNumberOfDecimals	

						if (TaxEntityUsesVertex)
							LocalVertexTaxHistoryProcessed				= true
							ProcessTaxHistory.UnitCost 					= EnteredPrice
							ProcessTaxHistory.ProductClass 				= MajorSalesClass
							if (BillingInvoice.BillingInvoiceType.Credit)
								ProcessTaxHistory.DocumentType			= "CreditMemo"
							else
								ProcessTaxHistory.DocumentType			= "Invoice"
							if (BillingInvoice.CustomerShipTo entered)
								ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
							else
							if (BillingInvoice.Customer entered)
								ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress
							else
							if (BillingInvoice.BillTo entered)
								ProcessTaxHistory.ToAddress				= BillingInvoice.BillTo.PostalAddress
							include ProcessTaxHistoryVertexFlexibleFields

						if (IsOneSourceTax
						or TaxEntityUsesVertex)
							if (IsHSNSACCodeEnabled)
								ProcessTaxHistory.CommodityCodeType		= "HSN"
								ProcessTaxHistory.HSNSACCode			= HSNSACCode
							else 
								ProcessTaxHistory.CommodityCodeType		= "UNSPSC"
								ProcessTaxHistory.UNSPSCCode			= DerivedUNSPSCCodeNoDash

						if (TaxEntityRel.ThirdParty.Sabrix)
                            include CreateTaxLineItemAndUserFields
							ProcessTaxHistory.OneSourceTaxAttribute50		= first TaxLineItemsForLineRel.LineItemUserFieldsRel.UserElementGroup
							ProcessTaxHistory.UserElementLevel			    = "O"

							ProcessTaxHistory.Description					= Description
							ProcessTaxHistory.UniqueLineNumber				= UniqueID
							ProcessTaxHistory.ItemNumber					= Item
							if (SingleCallToOneSource)
								ProcessTaxHistory.DeliveryTerms				= BillingInvoice.ShipTerm


						ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			 
						ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
						ProcessTaxHistory.FromVATRegistrationCountry   	= BillingInvoice.CompanyCustomer.VATRegistrationCountry	 
						ProcessTaxHistory.FromVATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
						ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency	
						ProcessTaxHistory.BaseCurrency 					= Company.Currency	
						ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
						ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate
						
						ProcessTaxHistory.HistoryType					= "N"
						LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed	
				      	constraint (ProcessTaxHistory.OutputErrorNumber not entered) 
							"<ProcessTaxHistory.OutputErrorMessage>"					
					I1 +=1				

	 	CalculateLineGrossAmountAndLineNetAmount
	   		if (!BillingInvoice.BillingInvoiceSource.Return)
	   			if (InvoiceCatchWeightQuantity entered)
	   				LocalCalculatedGrossAmount					= InvoiceCatchWeightQuantity * EnteredPrice
	   			else
	   				LocalCalculatedGrossAmount					= Quantity * SellingPrice
	   		else
	   		if (InvoiceCatchWeightQuantity entered)
	   			LocalCalculatedGrossAmount						= ((InvoiceCatchWeightQuantity * -1)	 * EnteredPrice)
	   		else
	   			LocalCalculatedGrossAmount						= Quantity * SellingPrice
			round LocalCalculatedGrossAmount to nearest DerivedRoundTo
	   		LineGrossAmount = LocalCalculatedGrossAmount
	   		LocalGrossAmount									= LineGrossAmount
	   		LineNetAmount.TransactionAmount						= LineGrossAmount - EnteredDiscount - TotalDiscount
	   		LocalNetAmount										= LineNetAmount.TransactionAmount

			initialize CurrencyExchangeGroup
			initialize FromCurrencyExchangeGroup
			if(!FromBatch)
				CurrencyExchangeGroup.TransactionAmount 			 = LineGrossAmount
				CurrencyExchangeGroup.BaseAmount.ToCurrency 		 = Company.Currency

				CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate = BillingInvoice.CurrencyRate
				LineGrossBaseAmount									 = CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
				
				CurrencyExchangeGroup.TransactionAmount 			 = LineNetAmount.TransactionAmount
				LineNetAmount.BaseAmount.ToCurrency					 = CurrencyExchangeGroup.BaseAmount.ToCurrency
				LineNetAmount.BaseAmount.EnteredCurrencyRate		 = CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate	
				LineNetAmount.BaseAmount.EnteredCurrencyAmount		 = CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
		   		LocalNetBaseAmount 									 = LineNetAmount.BaseAmount.EnteredCurrencyAmount
		   	else
		   		FromCurrencyExchangeGroup.TransactionAmount   		 	 = LineGrossAmount
		   		FromCurrencyExchangeGroup.BaseAmount.ToCurrency 	 	 = Company.Currency
		   		FromCurrencyExchangeGroup.FromCurrency 					 = BillingInvoice.Currency
		   		FromCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate = BillingInvoice.CurrencyRate
		   		LineGrossBaseAmount									 	 = FromCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
		   		FromCurrencyExchangeGroup.TransactionAmount 		 	 = LineNetAmount.TransactionAmount
				LineNetAmount.BaseAmount.ToCurrency					 	 = FromCurrencyExchangeGroup.BaseAmount.ToCurrency
				LineNetAmount.BaseAmount.EnteredCurrencyRate		 	 = FromCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate	
				LineNetAmount.BaseAmount.EnteredCurrencyAmount		 	 = FromCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
		   		LocalNetBaseAmount 									 	 = LineNetAmount.BaseAmount.EnteredCurrencyAmount

	   		if (TaxExemptCode.Taxable)
	   			TaxableAmount									= 	LineNetAmount.TransactionAmount

	   		if (Quantity changed
	   		or  SellingPrice changed
	   		or	InvoiceCatchWeightQuantity changed
	   		or  EnteredPrice changed
	   		or  EnteredDiscount changed
	   		or 	TotalDiscount changed)
	   		
				LocalLineNetTransactionAmount 		= LineNetAmount.TransactionAmount
				LocalOldLineNetTransactionAmount 	= old LineNetAmount.TransactionAmount
				
				round LocalLineNetTransactionAmount to nearest DerivedRoundTo
				round LocalOldLineNetTransactionAmount to nearest DerivedRoundTo
				
	   			LocalNetAmount	= LocalLineNetTransactionAmount - LocalOldLineNetTransactionAmount
	   			LocalNetBaseAmount = LineNetAmount.BaseAmount.EnteredCurrencyAmount - old LineNetAmount.BaseAmount.EnteredCurrencyAmount
	   			
		CalculateOpenAmount
			if (action type.Create)
				LocalDetailQuantity 	= Quantity
			else
			if (action type.Update)
				if (Quantity changed)
					LocalDetailQuantity = Quantity - old Quantity
			else
			if (action type.Delete)
				LocalDetailQuantity 	= Quantity * -1

			if (LocalDetailQuantity entered)
				invoke CalculateDetailQuantityInterface BillingInvoice.BatchNumber
					invoked.PrmDetailQuantity   = LocalDetailQuantity
					
			if (TaxExemptCode.Taxable
			and not NoCharge)
				if (old TaxableAmount	!= TaxableAmount
				and old TaxableAmount entered)
					LocalTaxableAmount							= TaxableAmount - old TaxableAmount
					LocalTaxAmount								= TaxTotal	- old TaxTotal
				else
					LocalTaxableAmount							=  TaxableAmount
					LocalTaxAmount								=  TaxTotal
			else 
				LocalQuantityTotal 								= (Quantity * UnitPrice)
				LocalTaxableAmount 								= LocalQuantity * -1 
				LocalTaxAmount									= TaxTotal * -1
				initialize TaxTotal
				initialize TaxableAmount

			invoke CalculateOpenAmount  BillingInvoice
				if (TransientSkipExitRules
				and LocalCreateFromBatch)
					invoked.PrmSkipTaxCalculation					= true 
				if (LineNetAmount.TransactionAmount changed
				or  LocalCreateFromBatch)
					if (not Rounding)
						if (LineType.Inventoried)
							invoked.PrmTotalInventoryGoodsAmount		= LocalNetAmount
							invoked.PrmTotalInventoryGoodsBaseAmount	= LocalNetBaseAmount
						else
							invoked.PrmTotalNoninventoryGoodsAmount		= LocalNetAmount
							invoked.PrmTotalNoninventoryGoodsBaseAmount	= LocalNetBaseAmount
						
				if (IsBillingInvoiceSource)
					if (LineNetAmount.TransactionAmount changed
					or  LocalCreateFromBatch)
						invoked.PrmOpenOrderAmount					=  LocalNetAmount
				
				if (OrderDiscount)					
					if (old OrderDiscount = false) 
						invoked.PrmDiscountable	= LineNetAmount.TransactionAmount					
					else
					if (LineNetAmount.TransactionAmount changed
					or  LocalCreateFromBatch) 
						invoked.PrmDiscountable						=  LocalNetAmount
				else
					if (old OrderDiscount = true) 
						invoked.PrmDiscountable = old LineNetAmount.TransactionAmount * -1
				
				invoked.PrmTaxableTotal						=  LocalTaxableAmount
				invoked.PrmTaxTotal							=  LocalTaxAmount
				invoked.PrmRecalculateAOC                   = true


			invoke CalculateAOC BillingInvoiceAddOnChargesRel
				

		CreateBillingInvoiceAddOnCharge
			if (IsLineType)
				invoke Create BillingInvoiceAddOnCharge
					invoked.Company									= Company
					invoked.BillingInvoice							= BillingInvoice
					invoked.BillingInvoiceLine						= BillingInvoiceLine
					invoked.Miscellaneous.Misc						= LocalMiscellaneous
					invoked.Miscellaneous.Currency					= LocalAddonCurrency
					invoked.BillingCurrencyAddOnChargeAmount 		= LocalCurrencyAddOnCharge

		
		SetSellPriceUOMAndUnitOfMeasure
			initialize I1
			I1 =1 
			while (I1 <= 6)
				if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					LocalUOMPrice.SellPriceByUOM[I1].SellPrice										= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].SellPrice
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UnitOfMeasure			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UOMMultiplier			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I1].UOMMultiplier
					end while
				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
					LocalUOMPrice.SellPriceByUOM[I1].SellPrice										= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].SellPrice
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UnitOfMeasure 			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure		
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UOMMultiplier 			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UOMMultiplier
					end while
				else
					LocalUOMPrice.SellPriceByUOM[I1].SellPrice										= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].SellPrice
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UnitOfMeasure  		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I1].UnitOfMeasure		
					SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I1].UOMMultiplier  		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I1].UOMMultiplier
					end while
			I1 +=1
		
		
		CalculateSellPriceForMultipleUOM
		
			I3 = 1
			while (I3 <= 10)
				if (PriceContractItemRel.UnitOfMeasureBreakCode.OverridePrice)
					if (PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices entered)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice 									= PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceContractItemRel.UnitOfMeasures.UnitOfMeasure[I3]
						LocalPriceUOM		= true
				else
				if (PriceListItemRel.UnitOfMeasureBreakCode.OverridePrice)
					if (PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices entered)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice 									= PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceListItemRel.UnitOfMeasures.UnitOfMeasure[I3]
						LocalPriceUOM	 = true
				else
				if (PricePromotionItemRel.UnitOfMeasureBreakCode.OverridePrice)
					if (PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices entered)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice 									= PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].UnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PricePromotionItemRel.UnitOfMeasures.UnitOfMeasure[I3]
						LocalPriceUOM	= true		
				else
				if (PriceContractItemRel.UnitOfMeasureBreakCode.UnitAddOn)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				else
				if (PriceListItemRel.UnitOfMeasureBreakCode.UnitAddOn)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				else
				if (PricePromotionItemRel.UnitOfMeasureBreakCode.UnitAddOn)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice + PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].PriceBreakAddOnUnitPrices
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				else
				if (PriceContractItemRel.UnitOfMeasureBreakCode.Percentage)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice   * PriceContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				else
				if (PriceListItemRel.UnitOfMeasureBreakCode.Percentage)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice   * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				else
				if (PricePromotionItemRel.UnitOfMeasureBreakCode.Percentage)
					if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
					if (BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].SellPrice * PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
					else
						LocalUOMPrice.SellPriceByUOM[I3].SellPrice									= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].SellPrice   * PricePromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I3].Percents
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UnitOfMeasure 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure[I3].UnitOfMeasure		
						SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I3].UOMMultiplier 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I3].UOMMultiplier
				I3 += 1
				
		CalculateSellPriceForSingleUOM
		
			if (Quantity < 0)
				LocalPriceQuantity = Quantity * -1
			else
				LocalPriceQuantity = Quantity	
			initialize I1
			I1 =1 
			while (I1 <= 6) 
				if (PriceContractItemRel.QuantityBreakCode.OverridePrice)
					if (PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalOverridePrice    = PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
						end while
				else
				if (PriceListItemRel.QuantityBreakCode.OverridePrice)
					if (PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalOverridePrice    = PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
						end while
				else
				if (PricePromotionItemRel.QuantityBreakCode.OverridePrice)
					if (PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalOverridePrice    = PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices
						end while
				else		
				if	(PriceContractItemRel.QuantityBreakCode.UnitAddOn)	
					if (PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalUnitAddOnPrice    = PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
						end while
				else
				if (PriceListItemRel.QuantityBreakCode.UnitAddOn)	
					if (PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalUnitAddOnPrice    = PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
						end while
				else
				if (PricePromotionItemRel.QuantityBreakCode.UnitAddOn)
					if (PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalUnitAddOnPrice    = PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns
						end while
				if	(PriceContractItemRel.QuantityBreakCode.Percentage)	
					if (PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalPricePercent    = PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
						end while
				else
				if (PriceListItemRel.QuantityBreakCode.Percentage)	
					if (PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalPricePercent    = PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
						end while
				else
				if (PricePromotionItemRel.QuantityBreakCode.Percentage)
					if (PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalPricePercent    = PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent
						end while		
				I1 += 1

			if (LocalOverridePrice entered)
				EnteredPrice    			= LocalOverridePrice
			else
			if (LocalUnitAddOnPrice entered)
				EnteredPrice    			= 	LocalUnitAddOnPrice + LocalUOMPrice.SellPriceByUOM[1].SellPrice
			else
			if (LocalPricePercent entered)
				EnteredPrice   				= LocalPricePercent * LocalUOMPrice.SellPriceByUOM[1].SellPrice
			else
				EnteredPrice   				= LocalUOMPrice.SellPriceByUOM[1].SellPrice

		CalculateSellPriceFromPriceListSaleClass
		
			if (Quantity < 0)
				LocalPriceQuantity = Quantity * -1
			else
				LocalPriceQuantity = Quantity	
			initialize I1 
			I1 =1
			while (I1 <= 6)
				if (PriceListSalesClassForContractRel exists)
					if (PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalPricePercent	= PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else
				if (PriceListSalesClassForPromotionRel exists)
					if (PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalPriceQuantity)
						LocalPricePercent	= PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else		
				if (PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalPriceQuantity)
					LocalPricePercent	= PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent	
					end while
					
				I1+=1
				
			if (LocalPricePercent not entered)
				LocalPricePercent = 1

			EnteredPrice   = LocalPricePercent * LocalUOMPrice.SellPriceByUOM[1].SellPrice

		CalculatePricing
		
			if (LineType.Special)
				SellingPrice 			= EnteredPrice			 
				initialize PriceDiscountCode
				initialize DiscountAccountArray
				if (BillingInvoice.Currency		= Company.Currency)
					PriceInSellingUnitOfMeasure	= EnteredPrice
					UnitPrice					= EnteredPrice
			else		
			if (LineType.Inventoried
			or	LineType.NonStock)
				if (not LocalEnteredPriceCheck  	
				and PriceBaseItemRel exists
				and IsPriceDateValid)
					if (PriceContractItemRel exists)
		        		PriceDiscountCode = PriceContractItemRel.PriceDiscountCode
		        	else
		        	if (PricePromotionItemRel exists)
		    			PriceDiscountCode = PricePromotionItemRel.PriceDiscountCode		
		    		else
		    		if (PriceListItemRel exists)
		    			PriceDiscountCode = PriceListItemRel.PriceDiscountCode
		        	else
		        	if (PriceListSalesClassForContractRel exists)
		        		PriceDiscountCode = PriceListSalesClassForContractRel.PriceDiscountCode
		        	else
		        	if (PriceListSalesClassForPromotionRel exists)
		        		PriceDiscountCode = PriceListSalesClassForPromotionRel.PriceDiscountCode
		        	else
		        	if (PriceListSalesClassForPriceListRel exists)
		        		PriceDiscountCode = PriceListSalesClassForPriceListRel.PriceDiscountCode
			  		else
			  		if (PriceListContractRel exists)
			  			PriceDiscountCode = PriceListContractRel.PriceDiscountCode
					else
					if (PriceListPromotionRel exists)
						PriceDiscountCode = PriceListPromotionRel.PriceDiscountCode
			  		else
			  		if (PriceListRel exists)
			  			PriceDiscountCode = PriceListRel.PriceDiscountCode
				
					include SetSellPriceUOMAndUnitOfMeasure
					if (HasPriceExists)
						if (IsMultiplePricingUOM)
							LocalMutipleSellPrice	= true
							if (PriceContractItemRel exists)
								if (PriceContractItemRel.QuantityBreakCode.Percentage
								and PriceContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[1].BreakPercent entered)
									LocalBreakQuantity	= true
							else
							if (PricePromotionItemRel exists)
								if (PricePromotionItemRel.QuantityBreakCode.Percentage
								and PricePromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[1].BreakPercent entered)		
									LocalBreakQuantity	= true
							else
							if (PriceListItemRel exists)
								if (PriceListItemRel.QuantityBreakCode.Percentage
								and PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup[1].BreakPercent entered)	
							   		LocalBreakQuantity	= true
							include CalculateSellPriceForMultipleUOM   		
						else								
							include CalculateSellPriceForSingleUOM
					else	
					if (PriceListSalesClassForPriceListRel exists        	  
					or	PriceListSalesClassForContractRel  exists	           
					or	PriceListSalesClassForPromotionRel  exists)
						include CalculateSellPriceFromPriceListSaleClass      													
					

					MultipleSellPrice	= LocalMutipleSellPrice
					if (MultipleSellPrice)
						LocalPriceQuantity	= Quantity
						LocalPriceQuantity *= SellToStock
						if (Quantity < 0)
							LocalPriceQuantity	*= -1
						I10 = 10
						while (I10 >= 1)
							if (SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UOMMultiplier > 0)
								LocalRemainingQuantity									= LocalPriceQuantity % SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UOMMultiplier
								SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].SellingPriceQuantity = ((LocalPriceQuantity	- LocalRemainingQuantity)/ SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UOMMultiplier)
								LocalUOMCheck	+=1
								if (!LocalUnitPriceCheck)
									LocalSellingPriceUOM.SellingPriceMultipleUOM[I10].UnitOfMeasure=SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UnitOfMeasure
									SellingPriceMultipleUOMArray.SellingPriceMultipleUOM.UnitPrice = LocalUOMPrice.SellPriceByUOM[I10].SellPrice		
								if (SellingPriceUnitOfMeasure entered)
									if (SellingPriceUnitOfMeasure 						= SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UnitOfMeasure)
										SellingPriceMultipleUOMArray.SellingPriceMultipleUOM.UnitPrice = LocalUOMPrice.SellPriceByUOM[I10].SellPrice
										LocalUnitPriceCheck								= true
										SellingPriceToStockConversionFactor	  			= SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].UOMMultiplier
										EnteredPrice						  			= SellingPriceMultipleUOMArray.SellingPriceMultipleUOM.UnitPrice
										SellingPrice						  			= ((SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].SellingPriceQuantity * LocalUOMPrice.SellPriceByUOM[I10].SellPrice)/Quantity)
										LocalExtendedAmount					  			=  (SellingPriceMultipleUOMArray.SellingPriceMultipleUOM[I10].SellingPriceQuantity * LocalUOMPrice.SellPriceByUOM[I10].SellPrice)
										
										
										UnitCostCurrencyExchange.ToCurrency 			= Company.Currency
										UnitCostCurrencyExchange.EnteredCurrencyRate 	= BillingInvoice.CurrencyRate
										UnitPrice									    = CurrencyExchange.OutputCurrencyAmount
										display "LEO:UnitPrice-820<UnitPrice>"
										CurrencyExchange.ToCurrency 					= Company.Currency
										CurrencyExchange.EnteredCurrencyRate			= BillingInvoice.CurrencyRate
										PriceInSellingUnitOfMeasure						= CurrencyExchange.OutputCurrencyAmount
										display "LEO:PriceInSellingUnitOfMeasure-824<PriceInSellingUnitOfMeasure>"
										LocalPriceQuantity										= LocalRemainingQuantity
							I10 -=1

					if (!MultipleSellPrice)

						SellingPriceToStockConversionFactor	  						= LocalUOMPrice.SellPriceByUOM[1].UOMMultiplier
						SellingPrice 												= EnteredPrice	
						UnitCostCurrencyExchange.ToCurrency 			 			= Company.Currency
						UnitCostCurrencyExchange.EnteredCurrencyRate 	 			= BillingInvoice.CurrencyRate
						UnitPrice													= CurrencyExchange.OutputCurrencyAmount
						display "LEO:UnitPrice-835<UnitPrice>"	
						if (Quantity < 0)
							LocalPriceQuantity	*= -1
						LocalExtendedAmount 										= LocalUOMPrice.SellPriceByUOM[1].SellPrice * LocalPriceQuantity
						LocalCurrencyAmount										= LocalExtendedAmount
						PriceInSellingUnitOfMeasure									= CurrencyExchange.OutputCurrencyAmount
						display "LEO:PriceInSellingUnitOfMeasure-841<PriceInSellingUnitOfMeasure>"
					else
						if (BillingInvoiceLineMultipleUOMRel exists)
							invoke Update BillingInvoiceLineMultipleUOMRel
								invoked.SellingPriceByMultipleUOM					= SellingPriceMultipleUOMArray







				else
				if (EnteredPrice changed)
					initialize PriceDiscountCode

				include CalculatePricingDiscount

		CalculateGroupPricing	
		
			initialize  LocalAccumulatePriceQuantity
			LocalAccumulatePriceQuantity      = TotalAccumulatePriceQuantity
			if (LocalAccumulatePriceQuantity < 0)
				LocalAccumulatePriceQuantity	= LocalAccumulatePriceQuantity * -1
			
			initialize I1
			I1 =1 
			while (I1 < 6) 
				if (PriceListSalesClassForContractRel exists) 
					if (first PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else
				if (PriceListSalesClassForPromotionRel exists)
					if (first PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else
				if (PriceListSalesClassForPriceListRel exists)
					if (first PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				I1 += 1
			
			if (LocalPricePercent not entered)
				LocalPricePercent = 1
				
			if (ContractNumber	entered
			and Company.CurrencyBasedPricing)
				if (PriceListContractPromotionRel.CurrencyRate entered)
					LocalPriceCurrency		= PriceListContractPromotionRel.CurrencyRate
			else
				LocalPriceCurrency			= BillingInvoice.CurrencyRate
			initialize I2
			I2 =1 
			while (I2 <= 10)
				if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					if (PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
						SellingPriceUnitOfMeasure			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
						SellingPriceToStockConversionFactor	= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
						if (Company.CurrencyBasedPricing)
							EnteredPrice					= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPrice
						else
							UnitPrice						= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPrice
						end while
				else
				if (BillingInvoice.PriceDate >= PriceBaseItemRel.NextEffectiveDate)
					if (PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
						SellingPriceUnitOfMeasure			= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
						SellingPriceToStockConversionFactor = PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
		  				if (Company.CurrencyBasedPricing)
							EnteredPrice					= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
						else
							UnitPrice						= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
	       				end while
	       		else
        		if (PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
        			SellingPriceUnitOfMeasure			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
					SellingPriceToStockConversionFactor = PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
           			if (Company.CurrencyBasedPricing)
						EnteredPrice					= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
					else
						UnitPrice						= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
					end while
				I2 += 1	
					
			EnteredPrice			= EnteredPrice * LocalPricePercent
			UnitPrice				= UnitPrice    * LocalPricePercent
			










		





			
			SellingPrice					= ((EnteredPrice/SellingPriceToStockConversionFactor)* SellToStock)
			PriceInSellingUnitOfMeasure 	= ((UnitPrice/SellingPriceToStockConversionFactor)* SellToStock)
			include CalculatePricingDiscount
		
		
		CalculatePricingDiscount
			initialize LocalDiscountCounter
			initialize LocalTotalDiscount
			if (PriceDiscountCode entered)	
				LocalDiscountCounter = 1
				while (LocalDiscountCounter <= 3)
					if (LocalDiscountCounter = 1
					or  PriceDiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].ApplyToGross)
						DiscountAccountArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt	= SellingPrice * PriceDiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent * Quantity
					else
						DiscountAccountArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt	= (((SellingPrice - (LocalTotalDiscount / Quantity)) * PriceDiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent) * Quantity)
					
					DiscountAccountArray.DiscountAccountGroup[LocalDiscountCounter].DiscountAccount = PriceDiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].DistributionAccount
					LocalTotalDiscount += DiscountAccountArray.DiscountAccountGroup[LocalDiscountCounter].DscAmt

					LocalDiscountCounter += 1
			else
				initialize DiscountAccountArray
				
		CreateExitRules
			if (BillingInvoice.BillingInvoiceSource.Shipment)
				if (PriceStatus.SystemCalculatedPricing
				and	Company.Reprice)
					include CalculatePricing
			else	
				include CalculatePricing
		
			if (BillingInvoice.BillingInvoiceSource.Shipment
			or  BillingInvoice.BillingInvoiceSource.Return)	
				if (PriceListContractRel.Miscellaneous entered)
					LocalMiscellaneous	= PriceListContractRel.Miscellaneous.Misc
					LocalAddonCurrency  = PriceListContractRel.Miscellaneous.Currency
				else
				if (PriceListPromotionRel.Miscellaneous entered)
					LocalMiscellaneous	= PriceListPromotionRel.Miscellaneous.Misc
					LocalAddonCurrency  = PriceListPromotionRel.Miscellaneous.Currency
				else	
				if (PriceListRel.Miscellaneous entered)
					LocalMiscellaneous	= PriceListRel.Miscellaneous.Misc
					LocalAddonCurrency  = PriceListRel.Miscellaneous.Currency
				
				if (LocalMiscellaneous entered
				or  LocalAddonCurrency entered)
					include	CreateBillingInvoiceAddOnCharge

				if (MultipleSellPrice)
					if (!BillingInvoiceLineMultipleUOMRel exists)
						invoke Create BillingInvoiceLineMultipleUOMRel
							invoked.Company										= Company
							invoked.BillingInvoice.InvoicePrefix				= BillingInvoice.InvoicePrefix
							invoked.BillingInvoice.InvoiceNumber				= BillingInvoice.InvoiceNumber
							invoked.BillingInvoiceLineMultipleUOM				= BillingInvoiceLine
							invoked.SellingPriceByMultipleUOM					= SellingPriceMultipleUOMArray
			
			initialize LocalMiscellaneous

			include CalculateLineGrossAmountAndLineNetAmount
			include CalculateLineTax
			include CalculateOpenAmount	
			
			if (DerivedCheckForAddOnChargeAlreadyCreated)
				for each BillingItemAddOnCostRel
					LocalMiscellaneous	= each.BillingItemAddOnCost.OrderEntryAddOnCharge.Misc
					LocalAddonCurrency	= each.BillingItemAddOnCost.OrderEntryAddOnCharge.Currency
					if (OrderEntryItemAddOnChargeRel.ChargeType.Percentage)
						LocalCurrencyAddOnCharge = ((Quantity * EnteredPrice)* OrderEntryItemAddOnChargeRel.PricePercent)
					include	CreateBillingInvoiceAddOnCharge

			invoke UpdateDiscountSpread BillingInvoice
		
		CalculateInvoiceLineTax						
			if (!CalculateInvoiceLineTaxDone)	
				include CalculateTaxCommonInputParams
				if (CalculateTax.PaymentDate not entered)
					CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
				CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
				CalculateTax.TaxableAmount			= TaxableAmount
				CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
				CalculateTax.InputReturnVertexTaxIn	= "D"	

				include LoadVertexGlobalInputFields
				include LoadOneSourceInputFields

				if (not SingleCallToOneSource
				and not SingleCallToVertex)
					if (TaxEntityRel.ThirdParty.InforTax
					or  BillingInvoice.IsTaxEngine
					or  LocalTaxCallForLine
					or !AllowMultipleSalesAccountEntry)
						LocalSalesAccount = SalesAccount
						include VertexFlexibleFields
						include CreateTaxLineItemAndUserFields
						if (LocalDontCreateTaxLog)
							CalculateTax.DontCreateLogFile		= true
						CalculateTax.UniqueIdOfRelatedObject	= UniqueID
						LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
						if (!BillingInvoice.IsTaxEngine)
							constraint (CalculateTax.OutputErrorNumber not entered) 
								"<CalculateTax.OutputErrorMessage>"

				CalculateInvoiceLineTaxDone = true
				initialize LocalDontCreateTaxLog

		CreateBillingInvoiceLineTaxForTaxEngine
			if (each.TaxAmount entered)
				LocalTaxAmount	= each.TaxAmount
				LocalTaxBase	= each.TaxBase

				invoke Create BillingInvoiceLineTax
					invoked.Company													= Company
					invoked.BillingInvoice											= BillingInvoice
					invoked.BillingInvoiceLineTax.BillingInvoiceLine 				= BillingInvoiceLine
					invoked.LocalCurrencyTable										= BillingInvoice.CurrencyTable
					invoked.LocalFromCurrency										= BillingInvoice.Currency
					invoked.LocalExchangeDate										= BillingInvoice.InvoiceDate
					if (BillingInvoice.BillingInvoiceType.Credit)
						if (LocalTaxAmount > 0)
							invoked.TaxAccount										= TaxEngineTaxDetailEntityTaxCodeRel.TaxOutputDueAccount
						else
							invoked.TaxAccount										= TaxEngineTaxDetailEntityTaxCodeRel.TaxOutputAccount
					else
						if (LocalTaxAmount < 0)
							invoked.TaxAccount											= TaxEngineTaxDetailEntityTaxCodeRel.TaxOutputDueAccount
						else
							invoked.TaxAccount											= TaxEngineTaxDetailEntityTaxCodeRel.TaxOutputAccount
					invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
					invoked.TaxRate													= each.TaxRate
					invoked.TaxableCurrencyAmount.TransactionAmount					= LocalTaxAmount
					invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 			= Company.Currency
					invoked.TransactionTaxable.TransactionAmount					= LocalTaxBase
					invoked.TransactionTaxable.BaseAmount.ToCurrency 				= Company.Currency
					invoked.TaxID													= TaxEngineTaxDetailEntityTaxCodeRel.TaxID

		CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
			if (action type.Create)
				LocalTaxCode 			= TaxCode
				LocalProductTaxCategory = ProductTaxCategory
				if (InvoiceLineTaxByTaxCodeRel exists)
					LocalLineTaxableAmount	= TaxableAmount + InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount
					LocalCreateBillingInvoiceLineTax = false
					include CalculateSalesTax
					invoke Update InvoiceLineTaxByTaxCodeRel
						invoked.TransactionTaxable.TransactionAmount 			= LocalLineTaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
						invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
						invoked.LocalFromCurrency								= BillingInvoice.Currency
				else
					if (LocalTaxCode entered)
						LocalLineTaxableAmount	= TaxableAmount
						LocalCreateBillingInvoiceLineTax = true
						include CalculateSalesTax
				if (BillingInvoiceAddOnChargeByTaxCodeRel exists)
					LocalLineTaxableAmount		= TaxableAmount + sum OtherLinesByTaxCodeRel.TaxableAmount
					invoke UpdateBillingInvoiceLineTax first BillingInvoiceAddOnChargeByTaxCodeRel
						invoked.PrmLinesAmount 			= LocalLineTaxableAmount
			else
			if (action type.Update)
				LocalProductTaxCategory 			= ProductTaxCategory
				if (TaxExemptCode changed)
					LocalQuantityAndPriceChangeAccounted	= true
					if (TaxExemptCode.Exempt)
						LocalTaxCode 						= old TaxCode
						LocalLineTaxableAmount				= old TaxableAmount
						LocalSubtractTaxableAmount			= true
					else
						LocalTaxCode 						= TaxCode
						LocalLineTaxableAmount				= TaxableAmount
				else
				if (TaxCode changed
				and TaxExemptCode.Taxable)
					LocalQuantityAndPriceChangeAccounted 	= true
					LocalTaxCode 							= old TaxCode
					LocalUpdatedTaxCode 					= TaxCode
					LocalTaxCodeChanged						= true
				if ((Quantity changed
				or EnteredPrice changed)
				and !LocalQuantityAndPriceChangeAccounted)
					if (TaxExemptCode.Taxable)
						LocalTaxCode 						= TaxCode
						LocalLineTaxableAmount				= TaxableAmount - old TaxableAmount
				if (InvoiceLineTaxByTaxCodeRel exists)
					if  (BillingInvoiceLinesByTaxCodeRel not exists
					and BillingInvoiceAddOnChargeByTaxCodeRel not exists)
						LocalNoBillingInvoiceLinesExist = true
						invoke Delete InvoiceLineTaxByTaxCodeRel

					if (LocalTaxCodeChanged)
						if (!LocalNoBillingInvoiceLinesExist)
							if (TaxableAmount changed)
								LocalLineTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - old TaxableAmount
							else
								LocalLineTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - TaxableAmount
							include CalculateSalesTax
							invoke Update InvoiceLineTaxByTaxCodeRel
								invoked.TransactionTaxable.TransactionAmount 			= LocalLineTaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
								invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
								invoked.LocalFromCurrency								= BillingInvoice.Currency
						if (InvoiceLineTaxByUpdatedTaxCodeRel exists)
							LocalLineTaxableAmount	= InvoiceLineTaxByUpdatedTaxCodeRel.TransactionTaxable.TransactionAmount + TaxableAmount
							LocalCreateBillingInvoiceLineTax = false
							LocalTaxCode = LocalUpdatedTaxCode
							include CalculateSalesTax
							invoke Update InvoiceLineTaxByUpdatedTaxCodeRel
								invoked.TransactionTaxable.TransactionAmount 			= LocalLineTaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
								invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
								invoked.LocalFromCurrency								= BillingInvoice.Currency
						else
							if (LocalUpdatedTaxCode entered)
								LocalLineTaxableAmount	= TaxableAmount
								LocalTaxCode			= LocalUpdatedTaxCode
								LocalCreateBillingInvoiceLineTax = true
								include CalculateSalesTax
					else
						if (LocalSubtractTaxableAmount)
							LocalLineTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - LocalLineTaxableAmount
						else
							LocalLineTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount + LocalLineTaxableAmount
						LocalCreateBillingInvoiceLineTax = false
						include CalculateSalesTax
						invoke Update InvoiceLineTaxByTaxCodeRel
							invoked.TransactionTaxable.TransactionAmount 			= LocalLineTaxableAmount
							invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
							invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
							invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
							invoked.LocalFromCurrency								= BillingInvoice.Currency
					if (BillingInvoiceAddOnChargeByTaxCodeRel exists)
						LocalLineTaxableAmount				= TaxableAmount + sum OtherLinesByTaxCodeRel.TaxableAmount
						invoke UpdateBillingInvoiceLineTax first BillingInvoiceAddOnChargeByTaxCodeRel
							invoked.PrmLinesAmount 	= LocalLineTaxableAmount
				else
					if (LocalTaxCode entered)
						LocalLineTaxableAmount	= TaxableAmount
						LocalCreateBillingInvoiceLineTax = true
						include CalculateSalesTax

			else
			if (action type.Delete)
				LocalTaxCode 			= TaxCode
				LocalProductTaxCategory = ProductTaxCategory
				if (InvoiceLineTaxByTaxCodeRel exists)
					if (instance count of BillingInvoiceLinesByTaxCodeRel = 1
					and BillingInvoiceAddOnChargeByTaxCodeRel not exists)
						invoke Delete InvoiceLineTaxByTaxCodeRel
					else
						LocalLineTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - TaxableAmount
						LocalCreateBillingInvoiceLineTax = false
						include CalculateSalesTax
						invoke Update InvoiceLineTaxByTaxCodeRel
							invoked.TransactionTaxable.TransactionAmount 			= LocalLineTaxableAmount
							invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
							invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
							invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
							invoked.LocalFromCurrency								= BillingInvoice.Currency

			invoke UpdateTaxTotal BillingInvoice

		CalculateSalesTax
			initialize CalculateTax
			initialize LocalSalesTax
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel
			CalculateTax.Customer					= BillingInvoice.Customer
			CalculateTax.Location					= Location
			if (BillingInvoice.TaxPointDate entered)
				CalculateTax.TaxDate				= BillingInvoice.TaxPointDate
			else
				CalculateTax.TaxDate                = BillingInvoice.InvoiceDate
			if (BillingInvoice.CustomerShipTo entered)
				CalculateTax.PostalAddress			= BillingInvoice.CustomerShipTo.ShipToAddress
			else
				if  (BillingInvoice.IsCustomerOrder
				and (IsSourceShipmentOrManual
				or  BillingInvoice.BillingInvoiceSource = "F"))
					CalculateTax.PostalAddress		= BillingInvoice.CustomerOrder.CustomerShipTo.ShipToAddress
				else
					CalculateTax.PostalAddress		= BillingInvoice.Customer.PostalAddress
			CalculateTax.Invoice					= BillingInvoice.DerivedInvoice
			CalculateTax.ShipmentDate				= BillingInvoice.ShipDate
			CalculateTax.InvoiceDate				= BillingInvoice.InvoiceDate
			CalculateTax.GeneralLedgerDate			= BillingInvoice.GeneralLedgerDate
			CalculateTax.TaxCode					= LocalTaxCode
			CalculateTax.ProductTaxCategory			= LocalProductTaxCategory
			CalculateTax.System						= "BL"
			CalculateTax.Function				    = "C"
			CalculateTax.ThirdPartyFunction			= "I"
			CalculateTax.TransactionType			= "S"
			CalculateTax.TaxableAmount		    	= LocalLineTaxableAmount
			LocalCalculateTaxExecuted			    = CalculateTax.ExecuteCalculateTax
			for each CalculateTax.TaxTable.TaxTableOutput
				LocalSalesTax  		+= each.TaxAmount5DP
				if (each.TaxAmount5DP entered
				and LocalCreateBillingInvoiceLineTax)
					invoke Create BillingInvoiceLineTax
						invoked.Company											= Company
						invoked.BillingInvoice									= BillingInvoice
						invoked.ProductTaxCategory								= LocalProductTaxCategory
						if (each.TaxPoint = "P")
							invoked.TaxAccount									= each.TaxOutputDueAccount
						else
							invoked.TaxAccount									= each.TaxOutputAccount
						invoked.BillingInvoiceLineTax.TaxCode					= each.TaxCode
						invoked.TaxRate											= each.TaxRate
						invoked.TransactionTaxable.TransactionAmount			= each.TaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency		= Company.Currency
						invoked.TaxableCurrencyAmount.TransactionAmount 		= each.TaxAmount5DP
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
						invoked.TaxID											= each.TaxID
						invoked.BillingInvoiceLineTax.TaxLevel					= each.TaxLevel
						invoked.LocalFromCurrency								= BillingInvoice.Currency


    Derived Fields
    	ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
    		"InforSalesInvoiceLine"
    	
		ContextMessageText is a MessageField
			restricted
			"BillingInvoiceLine<BillingInvoiceLine>"
    	
        ExtentedAmount								is a DerivedField
        	type is like InternationalAmount

    		default label is "ExtendedAmount"
    		if (SellingPriceToStockConversionFactor entered)
    			LocalCalculatedExtendedAmount = (EnteredPrice * (Quantity *SellToStock)/SellingPriceToStockConversionFactor)
			else
				LocalCalculatedExtendedAmount = EnteredPrice * Quantity
			round LocalCalculatedExtendedAmount to nearest DerivedRoundTo
			return LocalCalculatedExtendedAmount
				
		PriceBillAverage 							is a DerivedField
			type is like InternationalCost
			restricted
			if (Quantity entered)
				return  ExtentedAmount / Quantity
				
					
		PriceBaseAverage 							is a DerivedField
			type is like InternationalAmount
			restricted
			if (Quantity entered)
				CurrencyExchange.ToCurrency 			= Company.Currency
				CurrencyExchange.EnteredCurrencyRate 	= BillingInvoice.CurrencyRate
				LocalCurrencyAmount					= ExtentedAmount
			 	return CurrencyExchange.OutputCurrencyAmount

		GrossBill									is a DerivedField
			type is like InternationalAmount
			restricted
			return PriceBaseAverage * Quantity 

        TotalDiscount  								is an DerivedField
            type is like InternationalAmount
            return (DiscountAccountArray.DiscountAccountGroup[1].DscAmt + DiscountAccountArray.DiscountAccountGroup[2].DscAmt + DiscountAccountArray.DiscountAccountGroup[3].DscAmt)





       	QuantityInStock  							is a DerivedField
            type is like Quantity
            	precision is Item.NumberOfDecimalsQuantity
            return Quantity * SellToStock

        LineCost    								is a DerivedField
            type is like InternationalCost
            restricted
            return QuantityInStock * UnitCost
		
		LineTotal 									is a DerivedField
			type is like InternationalAmount
			LocalCalculatedLineTotal = LineNetAmount.TransactionAmount + TaxTotal
			round LocalCalculatedLineTotal to nearest DerivedRoundTo
			return LocalCalculatedLineTotal
		
		MultipleSellingPriceUOM	 					is a MessageField
			restricted
			"MultipleSellingUOM's"
			
		MultipleSellingUOM 							is a DerivedField
			type is MessageField
			if (MultipleSellPrice)
				return MultipleSellingPriceUOM	
		
		GroupPricingMessage							is a MessageField
			restricted
			"RequiresGroupPricing"
			
		DerivedMessageForGroupPricing 				is a DerivedField
			type is MessageField
			if (PriceStatus.AmalgamatedGroupPricing
			and EnteredPrice not entered)
				return GroupPricingMessage	
	
	    DerivedCheckForAddOnChargeAlreadyCreated 	is a DerivedField
			type is Boolean
			restricted
			if (BillingInvoice.OriginalBillingInvoice entered)
				return false	   	
	   		else
	   			return true	
	   			
		TotalAccumulatePriceQuantity         is a DerivedField
			type is like Quantity
			restricted
			for each BillingInvoiceLineAccumulatedGroupPricingRel
				LocalQuantityPrice  = (each.Quantity * each.SellToStock)
				LocalAccumulatedQuantity += LocalQuantityPrice
			return LocalAccumulatedQuantity	 
		
		DerivedSellPrice 					is a DerivedField
			type is like InternationalCost
			restricted
			if (PriceBaseItemRel.NextEffectiveDate entered
			and	BillingInvoice.PriceDate >= PriceBaseItemRel.NextEffectiveDate)
				return PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[1].SellPrice
			else
			if (BillingInvoice.PriceDate >= PriceBaseItemRel.CurrentEffectiveDate) 
				return PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[1].SellPrice
			else
				return PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[1].SellPrice
		
		DerivedPriceList					is a DerivedField
			type is like ListName
			restricted
			if (BillingInvoice.ListName entered)
				return BillingInvoice.ListName
			else	
				if (PriceListContractRel exists)
					if (Debug)
						display "[<actor>:PriceList]--PriceListContractRel_<first PriceListContractRel.PriceListContractPromotion.ListName>--"
					return first PriceListContractRel.PriceListContractPromotion.ListName
				else
				if (PriceListPromotionRel exists)
					if (Debug)
						display "[<actor>:PriceList]--PriceListPromotionRel_<first PriceListContractRel.PriceListContractPromotion.ListName>--"
					return first PriceListPromotionRel.PriceListContractPromotion.ListName
				else
					if (Debug)
						display "[<actor>:PriceList]--PriceListRel_<PriceListRel.PriceListContractPromotion.ListName>--"
					return PriceListRel.PriceListContractPromotion.ListName

		DerivedPercentPrice					is a DerivedField
			type is like Pct
			restricted
			if (Debug)
				display "[<actor>:PercentPrice]--LocalPriceListItem_<LocalPriceListItem.PriceListContractPromotion>_<LocalPriceListItem.Item>--"
			if (LocalPriceListItem exists)					
				initialize LocalFoundPercent
				if (Debug)
					display "[<actor>:PercentPrice]--Quantity_<Quantity>--"
				if (LocalPriceListItem.QuantityBreakCode.Percentage)
					for each LocalPriceListItem.QuantityBreak.QuantityPercentPriceAddOnGroup

						if (Debug)
							display "[<actor>:PercentPrice]--BreakQuantity_<each>--"
						if (Quantity <= each.BreakQuantity)
							LocalFoundPercent = each.BreakPercent
							end for each
				
				if (LocalPriceListItem.UnitOfMeasureBreakCode.Percentage)					
					LocalFoundPercent = LocalPriceListItem.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[LocalCounter].Percents
				
				if (Debug)
					display "[<actor>:PercentPrice]--FoundPercent_<LocalFoundPercent>--"
				return LocalFoundPercent
			else	
			if (PriceListSalesClassForPriceListRel exists) 
				LocalFoundPercent = 1
				for each PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup
					if (each.BreakQuantity >= Quantity)
						LocalFoundPercent = each.BreakPercent	
						end for each
				return LocalFoundPercent	
			else
				if (Debug)									
					display "[<actor>:PercentPrice]--FoundPercent_<first CurrentPriceListRel.Percent>--"
				return first CurrentPriceListRel.Percent

		DerivedLocation						is a DerivedField
			type is like InventoryLocation
			restricted
			if (Company.LocationBasedPricing)
				if (Debug)
					display "[<actor>:Location]--Location_<Location>--"
				return Location
			else
				if (Debug)
					display "[<actor>:Location]--LocationIsBlank--"
				return blank
			
		DerivedCurrency						is a DerivedField
			type is like Currency
			restricted
			if (not Company.CurrencyBasedPricing)
				if (Debug)
					display "[<actor>:Currency]--Currency_<Company.Currency>--"
				return Company.Currency
			else
				if (Debug)
					display "[<actor>:Currency]--Currency_<BillingInvoice.Currency>--"
				return BillingInvoice.Currency

		DerivedUnitAddOn					is a DerivedField
			type is like InternationalCost
			restricted
			initialize LocalUnitAddOn
			if (Debug)
				display "[<actor>:UnitAddOn]--Start--"
			if (LocalPriceListItem.QuantityBreakCode.UnitAddOn)
				for each LocalPriceListItem.QuantityBreak.QuantityPercentPriceAddOnGroup
					if (Debug)
						display "[<actor>:UnitAddOn]--BreakQuantity_<each>--"
					if (Quantity <= each.BreakQuantity)
						LocalUnitAddOn = each.BreakAddOns
						end for each
			if (LocalPriceListItem.UnitOfMeasureBreakCode.UnitAddOn)				
				LocalUnitAddOn = LocalPriceListItem.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[LocalCounter].PriceBreakAddOnUnitPrices			
			if (Debug)
				display "[<actor>:UnitAddOn]--UnitAddOn_<LocalUnitAddOn>--"
			return LocalUnitAddOn

		DerivedOverridePrice				is a DerivedField
			type is like InternationalCost
			restricted
			initialize LocalOverridePrice
			if (Debug)
				display "[<actor>:OverridePrice]--Start--"
			if (LocalPriceListItem.QuantityBreakCode.OverridePrice)
				for each LocalPriceListItem.QuantityBreak.QuantityPercentPriceAddOnGroup
					if (Debug)
						display "[<actor>:OverridePrice]--BreakQuantity_<each>--"
					if (Quantity <= each.BreakQuantity)
						LocalOverridePrice = each.BreakPrices
						end for each
			if (LocalPriceListItem.UnitOfMeasureBreakCode.OverridePrice)				
				LocalOverridePrice = LocalPriceListItem.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[LocalCounter].UnitPrices	
			if (Debug)
				display "[<actor>:OverridePrice]--OverridePrice<LocalOverridePrice>--"
			return LocalOverridePrice

		DerivedEnteredPrice					is a DerivedField
			type is like UnitCost
			restricted
			if (Debug)
				display "[<actor>:EnteredPrice]--Start--"
			if (Debug)
				display "[<actor>:EnteredPrice]--CurrentPriceListItemsRel--"
			LocalPriceListContractPromotion = first CurrentPriceListItemsRel.PriceListContractPromotion
			if (Debug)
				display "[<actor>:EnteredPrice]--LocalPriceListContractPromotion_<LocalPriceListContractPromotion>--"

			if (LocalPriceListItem exists)							
				if (LocalPriceListItem.QuantityBreakCode entered) 	
					if (LocalPriceListItem.QuantityBreakCode.UnitAddOn)
						if (Debug)
							display "[<actor>:EnteredPrice]--UnitAddOn--"
						return DerivedSellPrice + DerivedUnitAddOn
						
					if (LocalPriceListItem.QuantityBreakCode.OverridePrice)
						if (Debug)
							display "[<actor>:EnteredPrice]--OverridePrice--"
						return DerivedOverridePrice		
				
					if (LocalPriceListItem.QuantityBreakCode.Percentage) 
						if (Debug)
							display "[<actor>:EnteredPrice]--PercentPrice--"				
						return DerivedSellPrice * DerivedPercentPrice
				else                     						  	
				if (LocalPriceListItem.UnitOfMeasureBreakCode entered)
					initialize I1
					initialize LocalCounter
					for each PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM					
						I1 += 1
						if (each.UnitOfMeasure = SellingUnitOfMeasure)
							end for each
					LocalCounter  = I1
					
					if (LocalPriceListItem.UnitOfMeasureBreakCode.UnitAddOn)
						if (Debug)
							display "[<actor>:EnteredPrice]--UnitAddOn--"					
						
						return DerivedSellPrice + DerivedUnitAddOn			
				
					if (LocalPriceListItem.UnitOfMeasureBreakCode.OverridePrice)
						if (Debug)
							display "[<actor>:EnteredPrice]--OverridePrice--"
						return DerivedOverridePrice				
				
					if (LocalPriceListItem.UnitOfMeasureBreakCode.Percentage)					
						return DerivedSellPrice * DerivedPercentPrice	
			else      										 		
				if (BillingInvoice.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					for each PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM
						if (SellingUnitOfMeasure = each.UnitOfMeasure)
							LocalSellPrice					= each.SellPrice			
							end for each
				else
				if (PriceBaseItemRel.NextEffectiveDate not entered
				or  BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)
					for each PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM
						if (SellingUnitOfMeasure = each.UnitOfMeasure)
							LocalSellPrice					= each.SellPrice					
							end for each
				else
					for each PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM
						if (SellingUnitOfMeasure = each.UnitOfMeasure)
							LocalSellPrice					= each.SellPrice
							end for each
				
				return LocalSellPrice * DerivedPercentPrice						
					

		DerivedPriceBase					is a DerivedField
			type is like PriceBase
			restricted
			if (Debug)
				display "[<actor>:PriceBase]--Start--"
			if (CurrentPriceListRel exists)
				if (Debug)
					display "[<actor>:PriceBase]--CurrentPriceListRel_<first CurrentPriceListRel.BaseName>--"
				return first CurrentPriceListRel.BaseName
			return
		
		DerivedLineNumberForDisplay			is a DerivedField
			type is like BillingInvoiceLine
			default label is "LineNumber"
			return BillingInvoiceLine
		
		BlankField is a DerivedField
			type is Numeric 1
			return ""
		
		TotalDistributions is a DerivedField
			type is like InternationalAmount
			default label is "EnteredDistributionAmount"
			return (sum BillingInvoiceLineSalesAccount set.SalesAmount)
			
		DistributionDifference is a DerivedField
			type is like InternationalAmount
			default label is "Difference"
			return (ExtentedAmount - TotalDistributions)
			
		DerivedEnteredPriceIDM	is a DerivedField
			type is like InternationalAmount
			default label is "EnteredPrice"
			return EnteredPrice		
			
		DerivedIDMBackorderedQty is a DerivedField
			type is like Quantity
			return WarehouseShipmentLineRel.CustomerOrderLineRel.OrderQuantity - WarehouseShipmentLineRel.CustomerOrderLineRel.InvoiceQuantity
			
		DerivedEnteredPriceNumberOfDecimals is a ConditionalField
			type is Numeric size 1
			restricted
			if (LineType.Inventoried
			or  LineType.NonStock)
				Item.NumberOfDecimalsPrice
			else
				8
				
		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"BillingInvoiceLine"
			":"
			CurrentTimestamp
			
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp
			
		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (FromCurrency entered)
				return FromCurrency.NumberOfDecimals
			else
			if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
				return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
			else
				return 2

		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001			
    			
    	DerivedLineAOCCheck				is a DerivedField
    		type is Alpha 3
    		if (BillingInvoiceAddOnChargeRel exists)
    			return "Yes"
    		else
    			return "No"
    			
    	DerivedLineCommentsCheck		is a DerivedField
    		type is Alpha 3
    		if (BillingInvoiceCommentsRel exists)
    			return "Yes"
    		else
    			return "No"
    			
    	DerivedHSNSACCode	is a DerivedField 
    		type is like HSNSACCode
    		return WarehouseShipmentLineRel.CustomerOrderLineRel.HSNSACCode 
    		
    	DerivedHSNSACCodeDescription	is a DerivedField 
    		type is like HSNSACCode
    		return WarehouseShipmentLineRel.CustomerOrderLineRel.HSNSACCode.Description

		TaxCode1	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode1
			else
			if (TaxCode.TaxType.StandAlone)
				return TaxCode

		TaxRate1	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode1
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			else
			if (TaxCode.TaxType.StandAlone)
				LocalTaxCode = TaxCode
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate 
			
		TaxAmount1	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode1
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount
			else
			if (TaxCode.TaxType.StandAlone)
				LocalTaxCode = TaxCode
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount
				
		TaxCode2	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode2

		TaxRate2	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode2
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount2	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode2
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount						
			
		TaxCode3	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode3

		TaxRate3	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode3
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount3	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode3
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount	

		TaxCode4	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode4

		TaxRate4	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode4
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount4	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode4
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount

		TaxCode5	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode5

		TaxRate5	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode5
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount5	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode5
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount

		TaxCode6	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode6

		TaxRate6	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode6
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount6	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode6
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount

		TaxCode7	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode7

		TaxRate7	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode7
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount7	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode7
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount

		TaxCode8	is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				return TaxCode.TaxTableRel.TaxCode8

		TaxRate8	is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode8
				return first BillingInvoiceLineTaxTableCodeRel.TaxRate
			
		TaxAmount8	is a DerivedField
			type is like CurrencyAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode8
				return first BillingInvoiceLineTaxTableCodeRel.TaxableCurrencyAmount.TransactionAmount

		BillingInvoiceLineTaxXML is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedIntegrationApplication = "Local.ly")
				if(TaxCode.TaxTableRel.TaxCode1 entered or TaxCode entered)
					LocalTaxSequence = 1
					LocalTaxCode = TaxCode1
					LocalTaxRate= DerivedTaxRate1 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount1
					LocalBLLineTaxReportAmount = DerivedTaxAmount1 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode2 entered)
					LocalTaxSequence = 2
					LocalTaxCode = TaxCode2
					LocalTaxRate= DerivedTaxRate2 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount2
					LocalBLLineTaxReportAmount = DerivedTaxAmount2 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode3 entered)
					LocalTaxSequence = 3
					LocalTaxCode = TaxCode3
					LocalTaxRate= DerivedTaxRate3 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount3
					LocalBLLineTaxReportAmount = DerivedTaxAmount3 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode4 entered)
					LocalTaxSequence = 4
					LocalTaxCode = TaxCode4
					LocalTaxRate=DerivedTaxRate4 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount4
					LocalBLLineTaxReportAmount = DerivedTaxAmount4 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode5 entered)
					LocalTaxSequence = 5
					LocalTaxCode = TaxCode5
					LocalTaxRate= DerivedTaxRate5 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount5
					LocalBLLineTaxReportAmount = DerivedTaxAmount5 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode6 entered)
					LocalTaxSequence = 6
					LocalTaxCode = TaxCode6
					LocalTaxRate= DerivedTaxRate6 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount6
					LocalBLLineTaxReportAmount = DerivedTaxAmount6 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode7 entered)
					LocalTaxSequence = 7
					LocalTaxCode = TaxCode7
					LocalTaxRate= DerivedTaxRate7 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount7
					LocalBLLineTaxReportAmount = DerivedTaxAmount7 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				if(TaxCode.TaxTableRel.TaxCode8 entered)
					LocalTaxSequence = 8
					LocalTaxCode = TaxCode8
					LocalTaxRate= DerivedTaxRate8 * 100
					LocalBLLineTaxAmount= DerivedTaxAmount8
					LocalBLLineTaxReportAmount = DerivedTaxAmount8 * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_TaxTable_Tax_XML_ST document for this instance
				return BillingInvoiceLineTaxXML
			else
				if(TaxCode entered)
					LocalTaxRate = TaxCode.TxtaxrateRel.Rate * 100
					BillingInvoiceLineTaxXML+=template.IONInvoice_BillingInvoiceLine_Tax_XML_ST document for this instance
				return BillingInvoiceLineTaxXML				


		DerivedTaxAmount1	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[1].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP
		
		DerivedTaxAmount2	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[2].TaxAmount5DP
						
		DerivedTaxAmount3	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[3].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[3].TaxAmount5DP
		
		DerivedTaxAmount4	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[4].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[4].TaxAmount5DP
		
		DerivedTaxAmount5	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[5].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[5].TaxAmount5DP
		
		DerivedTaxAmount6	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[6].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[6].TaxAmount5DP
		
		DerivedTaxAmount7	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[7].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[7].TaxAmount5DP
		
		DerivedTaxAmount8	is a DerivedField
			type is like CurrencyAmount
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[8].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[8].TaxAmount5DP
	
					
		DerivedTaxRate1	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[1].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
		
		DerivedTaxRate2	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[2].TaxRate
						
		DerivedTaxRate3	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[3].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[3].TaxRate
		
		DerivedTaxRate4	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[4].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[4].TaxRate
		
		DerivedTaxRate5	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[5].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[5].TaxRate
		
		DerivedTaxRate6	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[6].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[6].TaxRate
		
		DerivedTaxRate7	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[7].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[7].TaxRate
		
		DerivedTaxRate8	is a DerivedField
			type is like ChrgRate
			restricted
			if (TaxCode entered 
			and not NoCharge
			and DoTaxCalculation)
				LocalDontCreateTaxLog = true
				LocalTaxCallForLine = true
				include CalculateInvoiceLineTax
				if (CalculateTax.TaxTable.TaxTableOutput[8].TaxCode entered)
					return CalculateTax.TaxTable.TaxTableOutput[8].TaxRate




		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted		
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else 
				return false
				
		DerivedIntegratingApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegratingApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedIntegratingApplicationGRC is a DerivedField
			type is Boolean
			restricted		
			if (DerivedIntegratingApplication = "GRC")
				return true
			else 
				return false
				
		DerivedIntegrationApplicationCRM is a DerivedField
			type is Boolean
			restricted		
			if (DerivedIntegrationApplication = "CRM")
				return true
			else 
				return false
				
		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "RequiredCleanDocumentID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IsMultipleFEG"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedCrossGLC is a DerivedField
			type is Alpha size 20
			restricted
			if (DerivedMultipleFEG = "Y")
				return Company.CustomerBusinessGroup.FinanceEnterpriseGroup + DerivedDelimiter + Company using "%d"
			else
				return Company using "%d"
				
		DerivedCrossAccountingEntity is a DerivedField
			type is Alpha 20
			restricted
			if (FSMBODGLCCrossReferenceDetailRel.DestinationValue entered)
				return FSMBODGLCCrossReferenceDetailRel.DestinationValue
			else
				return DerivedCrossGLC
				
		DerivedItemDocumentID is a DerivedField
			type is Alpha size 50
			restricted
			if (DerivedCleanDocumentID = "Y")
				return Item
			else
				if(LineType.Special)
					return Item
				else
					return Company.CustomerBusinessGroup.FinanceEnterpriseGroup + DerivedDelimiter + InventoryCompanyRel.ItemGroup +DerivedDelimiter + Item
		
		DerivedBODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedCrossAccountingEntity
			else
				return Company.CustomerBusinessGroup.FinanceEnterpriseGroup + DerivedDelimiter + Company.AccountingEntity
		
		DerivedRefType	is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(BillingInvoice.BillingInvoiceType.Credit)
				return "CreditNote"
			else
				return "Invoice"
		
		DerivedItemDescription is a DerivedField
			type is Alpha size 350
			restricted
			return Item.Description3
		
		DerivedItemCommodityCode is a DerivedField
			type is like CommCodes
			restricted
			return Item.CommodityCode
		
		DerivedLineQuantity is a DerivedField
			type is Decimal size 13.4
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Quantity
			else
				if (Quantity < 0)
					return Quantity * -1
				else
					return Quantity
				
		DerivedTempPerQuantity is a DerivedField
			type is Alpha size 9
			restricted
			return 1
			
		DerivedBLInvoiceCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return BillingInvoice.Currency
			
		DerivedBLInvoiceCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			return BillingInvoice.CurrencyRate
			
		DerivedBLInvoicelineNetTotal	is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally)
				return LineGrossAmount
			else
				return LineNetAmount.TransactionAmount * DerivedBLInvoiceCurrencyRate
		
		DerivedBLInvoicelineLineTotal	is a DerivedField
			type is like InternationalAmount
			restricted
			return LineTotal * DerivedBLInvoiceCurrencyRate
		
		DerivedBLTaxableAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return TaxableAmount * DerivedBLInvoiceCurrencyRate
			
		DerivedTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			return TaxCode.TxtaxrateRel.Rate * 100
			
		DerivedTaxExcemptCode is a DerivedField
			type is Alpha size 10
			restricted
			if (TaxExemptCode.Taxable)
				return "Taxable"
			else 
				return "Exempt"
				
		DerivedBLTaxTotalAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return TaxTotal * DerivedBLInvoiceCurrencyRate
						
		DerivedLineTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			if(BillingInvoiceLineAddOnChargeRel exists)
			
				return BillingInvoiceLineAddOnChargeRel.TaxCode.TxtaxrateRel.Rate * 100
			else
			 	return ""
		
		DerivedBLLineTaxCode is a DerivedField
			type is Alpha size 15
			restricted
			return BillingInvoiceLineAddOnChargeRel.TaxCode

		DerivedBLLineAddOnChargeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.BillingCurrencyAddOnChargeAmount
			else
			if	(BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.BaseCurrencyAddOnChargeAmount / BillingInvoice.CurrencyRate
			else
				return 0.0
		
		DerivedBLLineBaseCurrencyAddOnChargeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.BaseCurrencyAddOnChargeAmount

		DerivedReportingCurrRate is a DerivedField
            type is Decimal size 31.15
            restricted
            if(BillingInvoice.ReceivableInvoiceDebitWithZeroPaddingRel exist) 
            	return BillingInvoice.ReceivableInvoiceDebitWithZeroPaddingRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate 
            else
		 	if(BillingInvoice.ReceivableInvoiceCreditWithZeroPaddingRel exist)
                return BillingInvoice.ReceivableInvoiceCreditWithZeroPaddingRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate 
            else
                return 0.0

		DerivedBLLineReportCurrencyAddOnChargeAmount is a DerivedField
		 	type is like InternationalAmount
		 	restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
		 		return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.BillingCurrencyAddOnChargeAmount * DerivedReportingCurrRate	
			else
				return 0.0

		DerivedBLLineAOCTaxCurrencyAmount is a DerivedField
		 	type is like InternationalAmount
		 	restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
		 		return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.TaxableCurrencyAmount
			else
				return 0.0

		DerivedBLLineAOCTaxBaseCurrencyAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.TaxableBaseCurrencyAmount
			else
				return 0.0

		DerivedBLLineAOCTaxReportCurrencyAmount is a DerivedField
		 	type is like InternationalAmount
		 	restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
		 		return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.TaxableCurrencyAmount * DerivedReportingCurrRate		
			else
				return 0.0	

		DerivedShipFromPartyLocation is a DerivedField
			type is Alpha size 30
			restricted
			if (DerivedCleanDocumentID = "Y")
				return Location
			else
				if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
					return Company using "%d" + DerivedDelimiter +  BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel
				else
					return Company using "%d" + DerivedDelimiter + Location
			
		DerivedShipFromPartyIDIN is a DerivedField
			type is Alpha size 30
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				return Company using "%d" + DerivedDelimiter +  BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel
			else
				return ""
		
		DerivedShipFromPartyNameIN is a DerivedField
			type is Alpha size 80
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.Name
			else
				return ""

		DerivedCountryCodeLocally is a DerivedField
			type is  Alpha size 3
			restricted	
			if (Company.AccountingEntity.AddressCode entered)
				return Company.AccountingEntity.AddressCode.PostalAddress.Country
			else 
				return ""
		
		DerivedBillingInvoiceLineTaxType is a DerivedField
			type is Alpha size 15
			restricted
			if	(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCodeLocally ="GB")
					return "VAT"
				else
					return TaxCode
			else
				return "VAT"
				
		DerivedUNSPSCCodeNoDash is a StringField
			type is Alpha 35
			UNSPSCCode.UNSPSCSegment
			UNSPSCCode.UNSPSCFamily
			UNSPSCCode.UNSPSCClass
			UNSPSCCode.UNSPSCCommodity
						
		DerivedHSNSACCodes is a DerivedField
			type is Alpha size 5
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				if(LineType.Special)
					return "SAC"
				else
					return "HSN"
			else
				return ""
				
		DerivedHSNSACCodeValue is a DerivedField
			type is Alpha size 20
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				if(HSNSACCode entered)
					return HSNSACCode
				else
					return ""
			else
				return ""
				
		DerivedBLCustomerOrder is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedCleanDocumentID = "Y" and BillingInvoice.CustomerOrder > 0)
				return BillingInvoice.CustomerOrder using "%d"
			else	
				if (DerivedIntegrationApplicationLocally  and BillingInvoice.CustomerOrder > 0)
					return BillingInvoice.CustomerOrder using "%d"
				else
					if (BillingInvoice.CustomerOrder > 0)
						return Company using "%d" + DerivedDelimiter + BillingInvoice.CustomerOrder using "%d"
					else
						return ""
					
		DerivedBillingInvoiceLine is a DerivedField
			type is Alpha size 25
			restricted
			if	(BillingInvoice.CustomerOrder > 0)
				return BillingInvoiceLine
			else
				return ""
		
		DerivedBLLineServiceIndicator is a DerivedField
			type is Alpha size 5
			restricted
			if	(DerivedIntegrationApplicationLocally)
				if(LineType.Special)
					return "1"
				else
					return "0"
			else
				return ""
				
		DerivedBLReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
			
		
		DerivedBLLineAlphaUnitPriceBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return EnteredPrice * DerivedBLInvoiceCurrencyRate
			else
				return 0
		
		DerivedBLLineUnitPriceBaseAmount is a DerivedField
			type is Alpha size 50
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return DerivedBLLineAlphaUnitPriceBaseAmount
			else
				return ""
				
		DerivedBLLineTotalPretaxAmount is a DerivedField
			type is Alpha size 50
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return LineNetAmount.TransactionAmount
			else
				return ""
				
		DerivedBLLineAlphaTotalPretaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return LineNetAmount.BaseAmount.EnteredCurrencyAmount * DerivedBLInvoiceCurrencyRate
			else
				return 0
				
		DerivedBLLineTotalPretaxBaseAmount is a DerivedField
			type is Alpha size 50
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return DerivedBLLineAlphaTotalPretaxBaseAmount
			else
				return ""
				
		DerivedBLPriceDiscountCode is a DerivedField
			type is Alpha size 60
			restricted
			if(PriceListRel exist and TotalDiscount > 0)
				return PriceListRel.PriceDiscountCode
			else
				return ""
				
		DerivedInvoiceAllowanceTDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(TotalDiscount > 0)
				return 1
			else 
				return 0
				
		DerivedInvoiceAllowanceEDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(EnteredDiscount > 0 and DerivedInvoiceAllowanceTDiscSequence > 0)
				return 2
			else 
			if (EnteredDiscount > 0)
				return 1
			else
				return 0
		
		DerivedAlphaBLShipDate is a DerivedField
			type is Alpha size 25
			restricted
			return BillingInvoice.ShipDate
				
		DerivedBLShipDate is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return DerivedAlphaBLShipDate[1:4] + "-" + DerivedAlphaBLShipDate[5:6] + "-" + DerivedAlphaBLShipDate[7:8]
			else
				return ""
				
		DerivedBLDocumentID is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and BillingInvoice.WarehouseShipment entered)
				return BillingInvoice.WarehouseShipment
			else
				return BillingInvoiceLine
				
		DerivedBLLineInvoiceNetAmount is a DerivedField
			type is Alpha size 50
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return  EnteredPrice
			else
				return ""
				
		DerivedSellingUOM is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return  SellingUnitOfMeasure
			else
				return ""
				
		DerivedQuantity is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally)
				return  Quantity
			else
				return ""
				
		DerivedBLLineAddOnChargeType is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.Miscellaneous.ChargeType	
			else
				return ""
				
		DerivedBLLineAddOnChargeSeq is a DerivedField
			type is Alpha size 6
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.BillingInvoiceAddOnCharge
			else
				return ""	
				
		DerivedBLLineQuantity is a DerivedField
			type is Alpha size 31
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Quantity
			else
				return ""	
				
		DerivedBLLineSellingUOM is a DerivedField
			type is Alpha size 4
			restricted
			if(DerivedIntegrationApplicationLocally)
				return SellingUnitOfMeasure
			else
				return ""
				
		DerivedBLLineAddOnChargeMisc is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.Miscellaneous.Misc	
			else
				return ""
				
		DerivedBLLineAddOnChargeDescription is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.Miscellaneous.Description	
			else
				return ""
				
		DerivedBLLineAddOnChargeTrackType is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceLineAddOnChargeRel exists)
				return BillingInvoiceLineAddOnChargeRel.BillingInvoiceAddOnCharge.Miscellaneous.TrackType	
			else
				return ""
				
		DerivedDocumentReference is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (BillingInvoice.WarehouseShipment != 0)
					return 	BillingInvoice.WarehouseShipment
				else
					return BillingInvoiceLine
			else
				return BillingInvoiceLine
		
		DerivedLocallyschemeNameIN is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				return 	"TaxIdentificationNumber"
			else
				return ""
		
		DerivedLocallyschemeAgencyNameIN is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				return 	"IN_GST"
			else
				return ""
				
		DerivedShipFromPartyTaxIDIN is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN")
				return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.PostalAddress.StateProvinceIDNumber
			else
				return ""
		
		DerivedShipFromPartyAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine1
				else
					return Location.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""
				
		DerivedShipFromPartyAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine2	
				else
					return Location.PostalAddress.DeliveryAddress.AddressLine2		
			else
				return ""
				
		DerivedShipFromPartyAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine3	
				else
					return Location.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""
					
		DerivedShipFromPartyAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine4	
				else
					return Location.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""
				
		DerivedShipFromPartyMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			if(DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.Municipality	
				else
					return Location.PostalAddress.Municipality
			else
				return ""
				
		DerivedShipFromPartyCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if (DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.Country	
				else
					return Location.PostalAddress.Country
			else
				return ""
				
		DerivedShipFromPartyCountrySubDivisionCode is a DerivedField
			type is Alpha size 3
			restricted
			if (DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.StateProvince	
				else
					return Location.PostalAddress.StateProvince
			else
				return ""
		
		DerivedShipFromPartyPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if (DerivedIntegrationApplicationLocally)
				if (DerivedCountryCodeLocally = "IN")
					return BillingInvoice.BillingProcessLevel.ReceivableProcessLevelRel.ReceivableProcessLevel.PostalAddress.PostalCode	
				else
					return Location.PostalAddress.PostalCode
			else
				return ""
		
		DerivedExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return LineGrossAmount
				
		DerivedTaxIdentificationNumber is a DerivedField
			type is AlphaUpper size 25
			restricted
			if (DerivedIntegrationApplicationLocally)
				return "TaxIdentificationNumber"
			else
				return ""
				
		DerivedBOLMX is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and BillingInvoice.WarehouseShipment entered)
				return "BOL"
			else
				return ""
				
		DerivedCustomerPOMX is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and BillingInvoice.CustomerPurchaseOrder entered)
				return "CustomerPurchaseOrder"
			else
				return ""
				
		DerivedBillOfLadingMX is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and BillingInvoice.WarehouseShipment entered)
				return BillingInvoice.WarehouseShipment.BillOfLading
			else
				return ""
				
		DerivedCustomerPurchaseOrderMX is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and BillingInvoice.CustomerPurchaseOrder entered)
				return BillingInvoice.CustomerPurchaseOrder
			else
				return ""
		
		DerivedItemCrossReferenceMX	is a DerivedField
			type is Alpha size 32
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and CustomerItemCrossReferenceRel exist )
				return CustomerItemCrossReferenceRel.CustomerItemCrossReference
			else
				return ""
		
		DerivedItemCrossReferenceschemeNameMX	is a DerivedField
			type is Alpha size 32
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "MX" and CustomerItemCrossReferenceRel exist )
				return "Customer"
			else
				return ""
						
		DerivedShipToPartyID is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedCleanDocumentID = "Y")
				return BillingInvoice.Customer using "%d" + DerivedDelimiter + BillingInvoice.CustomerShipTo
			else
				return Company using "%d" + DerivedDelimiter + BillingInvoice.Customer using "%d" + DerivedDelimiter + BillingInvoice.CustomerShipTo
				
		DerivedShipToTaxIDIN is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN"  and BillingInvoice.CustomerShipTo entered)
				return 	BillingInvoice.CustomerShipTo.VATRegistrationNumber
			else
				return ""
				
		DerivedShipToName is a DerivedField
			type is Alpha size 80
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN"  and BillingInvoice.CustomerShipTo entered)
				return 	BillingInvoice.CustomerShipTo.Name
			else
				return ""
				
		DerivedShipToPartyAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine1
			else
				return ""
				
		DerivedShipToPartyAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine2	
			else
				return ""
				
		DerivedShipToPartyAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine3
			else
				return ""
					
		DerivedShipToPartyAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine4
			else
				return ""
				
		DerivedShipToPartyMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.Municipality
			else
				return ""
				
		DerivedShipToPartyCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.Country
			else
				return ""
				
		DerivedShipToPartyCountrySubDivisionCode is a DerivedField
			type is Alpha size 3
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.StateProvince
			else
				return ""
		
		DerivedShipToPartyPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCodeLocally = "IN" and BillingInvoice.CustomerShipTo entered)
				return BillingInvoice.CustomerShipTo.ShipToAddress.PostalCode
			else
				return ""
				
		DerivedBLInvoiceChargeTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			if (DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return first BillingInvoiceAddOnChargesRel.TaxCode.TxtaxrateRel.Rate * 100
			else
				return ""
				
		DerivedBLOrderDiscountCode is a DerivedField
			type is Alpha size 10
			restricted
			if (DerivedIntegrationApplicationLocally )
				return BillingInvoiceLine.PriceDiscountCode
			else
				return ""
				
		DerivedBLAddOnDiscountID is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally)
				return "EnteredDiscount"
			else
				return ""
				
		BLInvoiceLineDistributionXMLBOD is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if (BillingGLDistributionRel exist)
	        	initialize BLInvoiceLineDistributionXMLBOD
	        	initialize LocalBLInvoiceLineAddOnChargeXMLBOD
				initialize LocalAOCCount
				for each BillingGLDistributionRel
					each.LocalBODAccountingEntity = DerivedBODAccountingEntity
					each.LocalOriginalCurrency = BillingInvoice.Currency
					BLInvoiceLineDistributionXMLBOD += template.IONInvoice_BillingGLDistribution_Distribution_ST document for each
					if(each.PostingType.MiscellaneousSalesCr)
						LocalAOCCount +=1
						each.LocalOriginalCurrency = BillingInvoice.Currency
						each.LocalBasecurrency 	   = Company.Currency
						each.LocalReportCurrency   = DerivedBLReportCurrency
						each.LocalBLLineAddOnChargeAmount = DerivedBLLineAddOnChargeAmount
						each.LocalBLLineBaseCurrencyAddOnChargeAmount = DerivedBLLineBaseCurrencyAddOnChargeAmount
						each.LocalBLLineReportCurrencyAddOnChargeAmount = DerivedBLLineReportCurrencyAddOnChargeAmount
						each.LocalBLLineAOCTaxCurrencyAmount  = DerivedBLLineAOCTaxCurrencyAmount
						each.LocalBLLineAOCTaxBaseCurrencyAmount = DerivedBLLineAOCTaxBaseCurrencyAmount
						each.LocalBLLineAOCTaxReportCurrencyAmount = DerivedBLLineAOCTaxReportCurrencyAmount
						each.LocalLineTaxRate					= DerivedLineTaxRate
						each.LocalBLLineTaxCode					= DerivedBLLineTaxCode
						each.LocalTaxExemptCode 				= DerivedTaxExcemptCode
						each.LocalBLLineAddOnChargeType			= DerivedBLLineAddOnChargeType
						each.LocalBLLineAddOnChargeSeq  		= DerivedBLLineAddOnChargeSeq
						each.LocalBLLineQuantity				= DerivedBLLineQuantity
						each.LocalBLLineSellingUOM      		= DerivedBLLineSellingUOM
						each.LocalBLLineAddOnChargeMisc			= DerivedBLLineAddOnChargeMisc
						each.LocalBLLineAddOnChargeDescription	= DerivedBLLineAddOnChargeDescription
						each.LocalBLLineAddOnChargeTrackType	= DerivedBLLineAddOnChargeTrackType
						each.LocalLineInvChargeTaxRate			= DerivedBLInvoiceChargeTaxRate
						LocalBLInvoiceLineAddOnChargeXMLBOD 	+= template.IONInvoice_BillingGLDistribution_InvoiceCharge_XML_ST document for each
				return BLInvoiceLineDistributionXMLBOD
				
				
		BLLineInvoiceAllowanceTotalDiscountXML is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if (DerivedIntegrationApplicationLocally and TotalDiscount > 0)
				BLLineInvoiceAllowanceTotalDiscountXML = template.IONInvoice_BillingInvoiceLine_BLLineInvoiceAllowanceTotalDiscount_XML_ST document for this instance
				return BLLineInvoiceAllowanceTotalDiscountXML
			else
				return ""
		
		BLLineInvoiceAllowanceAddOnDiscountXML is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if (DerivedIntegrationApplicationLocally and EnteredDiscount > 0)
				BLLineInvoiceAllowanceAddOnDiscountXML = template.IONInvoice_BillingInvoiceLine_BLLineInvoiceAllowanceAddOnDiscount_XML_ST document for this instance
				return BLLineInvoiceAllowanceAddOnDiscountXML
			else
				return ""
				
		DerivedBillingInvoiceLineItemXML is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if (DerivedCleanDocumentID = "Y")
				DerivedBillingInvoiceLineItemXML = template.IONInvoice_BillingInvoiceLine_CleanDocIDItem_XML_ST document for this instance
				return DerivedBillingInvoiceLineItemXML
			else
				DerivedBillingInvoiceLineItemXML = template.IONInvoice_BillingInvoiceLine_Item_XML_ST document for this instance
				return DerivedBillingInvoiceLineItemXML
				
		DerivedBillingInvoiceLineShipToPartyXMLBOD is a DerivedField 
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				DerivedBillingInvoiceLineShipToPartyXMLBOD = template.IONInvoice_BillingInvoiceLine_ShipToParty_CleanDocIDXML_ST document for this instance
				return DerivedBillingInvoiceLineShipToPartyXMLBOD
			else
				DerivedBillingInvoiceLineShipToPartyXMLBOD = template.IONInvoice_BillingInvoiceLine_ShipToPartyXML_ST document for this instance
				return DerivedBillingInvoiceLineShipToPartyXMLBOD
		



		DerivedProcessLevel is a DerivedField
			type is Alpha 20
			restricted
			return BillingInvoice.BillingProcessLevel
			
		DerivedInvoicePrefix is a DerivedField
			type is Alpha 30
			restricted
			return BillingInvoice.InvoicePrefix
		
		DerivedInvoiceNumber is a DerivedField
			type is Alpha 30
			restricted
			return BillingInvoice.InvoiceNumber
			
		DerivedCustomer is a DerivedField
			type is Alpha 30
			restricted
			return BillingInvoice.Customer
		
		DerivedBLCurrency is a DerivedField
			type is Alpha 30
			restricted
			return BillingInvoice.Currency
		
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			
		BLPriceOverrideDescription is a DerivedField
			type is Alpha 200
			restricted
			return "Invoice" + " "+ BillingInvoice.InvoicePrefix+"-"+BillingInvoice.InvoiceNumber +" "+  "Line" +" "+ BillingInvoiceLine + " " + "has price override"				
				
		DerivedBODID is a DerivedField
			type is Alpha 100
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.CustomerBusinessGroup.FinanceEnterpriseGroup +":"+ BillingInvoiceLine +":"+ "?BLPriceOverride&verb=Process"
			
		BLPriceOverrideXML is a DerivedField
			type is XMLDocument
			restricted
			BLPriceOverrideXML = template.IONBLPriceOverride_BillingInvoiceLine_ST document for this instance	


				
		DerivedFormTitleForInvLine is a DerivedField
			type is MessageField

			if (BillingInvoiceLine entered)
				return InvoiceLineFormTitleWithLine
			else	
				return InvoiceLineFormTitleWithoutLine	
				
		InvoiceLineFormTitleWithLine is a LabelField
			restricted
			"InvoiceLine_<BillingInvoiceLine>_for_<BillingInvoice.DerivedInvoiceFormTitle>"

		InvoiceLineFormTitleWithoutLine is a LabelField
			restricted
			"InvoiceLine_for_<BillingInvoice.DerivedInvoiceFormTitle>"
						
    Conditions

        IsLineType
        	restricted
        	when (LineType.Inventoried
        	or    LineType.NonStock)
       
        IsSourceShipmentOrManual
        	restricted
       		when (BillingInvoice.BillingInvoiceSource.Shipment
       		or    BillingInvoice.BillingInvoiceSource.Manual)	
        	
       	IsBillingInvoiceSource
       		restricted
       		when (BillingInvoice.BillingInvoiceSource.Interfaced
       		or    BillingInvoice.BillingInvoiceSource.Manual
       		or    BillingInvoice.BillingInvoiceSource.RecurringInvoice
       		or    BillingInvoice.BillingInvoiceSource.Project)
		
			
        IsCompanyLevelInvoicingTaxCalulation
        	restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			and   Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)
			
			
		IsCompanyProcessLevelInvoicingTaxCalculation
			restricted	 
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcAndPrintInSummary
			and   BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)

		IsInvoicingAndTaxCalculation
            restricted
            when ((Company.InvoiceOption.CompanyLevelInvoicing
            and  (Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm))
            or   (Company.InvoiceOption.ProcessLevelInvoicing
            and  (BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)))

    	IsUpdateQuantityChanged
    		restricted
			when (Quantity changed
			or    SellingUnitOfMeasure changed
			or    EnteredPrice changed
			or 	  SellingPriceUnitOfMeasure changed
			or    !NoCharge)
		
		IsUpdateLocationBasedPricing
			restricted
			when (Company.LocationBasedPricing
			and   Location changed)
    
        IsChargable
        	restricted
        	when (!NoCharge)            
       

		IsPriceDateLessThanCurrentEffectiveDate
			restricted
			when (BillingInvoice.PriceDate <= PriceBaseItemRel.CurrentEffectiveDate)

		
		IsPriceDateBetweenCurrentandeffectiveDate
			restricted			
			when (BillingInvoice.PriceDate > PriceBaseItemRel.CurrentEffectiveDate
			and   BillingInvoice.PriceDate < PriceBaseItemRel.NextEffectiveDate)

					
		IsPriceDateGreaterThanNextEffectiveDate
			restricted			
			when (BillingInvoice.PriceDate > PriceBaseItemRel.NextEffectiveDate)









        IsAmalgamatedGroupPricing
            classic name is OILSET2
            restricted
            when (PriceStatus.AmalgamatedGroupPricing)
            
        IsBreakCodeForPriceContractNotEntered
        	restricted
			when (PriceContractItemRel.UnitOfMeasureBreakCode not entered 
			and (LocalBreakQuantity
			or   PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM.SellPriceCode.Default
			or   SellingPriceUnitOfMeasure not entered))

		IsBreakCodeForPriceListNotEntered	
			restricted
			when (PriceListItemRel.UnitOfMeasureBreakCode not entered 
			and (LocalBreakQuantity
			or   PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM.SellPriceCode.Default
			or   SellingPriceUnitOfMeasure not entered))
		
		IsBreakCodeForPricePromotionNotEntered
			restricted
			when (PricePromotionItemRel.UnitOfMeasureBreakCode not entered 
			and (LocalBreakQuantity
			or   PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM.SellPriceCode.Default
			or   SellingPriceUnitOfMeasure not entered))
			
		IsPriceDateValid
			restricted
			when (IsPriceDateLessThanCurrentEffectiveDate
			or  IsPriceDateBetweenCurrentandeffectiveDate
			or  IsPriceDateGreaterThanNextEffectiveDate)
	
		HasPriceExists
			restricted
			when (PriceContractItemRel exists		
			or	PricePromotionItemRel exists
			or  PriceListItemRel      exists)
			
		IsMultiplePricingUOM
			restricted
			when (PriceContractItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM		
			or	PricePromotionItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM
			or  PriceListItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM )
            
		HasTaxCode
			restricted
			when (TaxExemptCode.Taxable
			and   TaxCode entered)
		
		TaxOutputDueAccount
			restricted
			when (HasTaxCode 
			and EntityTaxCodeRel exists 
			and EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)
			
		TaxOutputAccount
			restricted
			when (HasTaxCode 
			and EntityTaxCodeRel exists 
			and not EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)
		
		AllowMultipleSalesAccountEntry
			restricted
			when (Company.MultipleSalesAccountEntry)
		
		TotalDistributionsBalance
			restricted
			when (AllowMultipleSalesAccountEntry
			and   DistributionDifference = 0)
			
		TaxEntityUsesVertex										
			restricted				 							
			when (TaxEntityRel.ThirdParty.VertexOSeries)
			
		IsTaxAfterTerms
			restricted
			when ((TaxEntityRel.UseTaxCodeAccounts and TaxEntityRel.TaxTerms.Taxafterterms)
           	or EntityTaxCodeRel.TaxTerms.Taxafterterms)
           	
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
		
		IsBillingInvoiceFromCustomerOrder
       		restricted
       		when (BillingInvoice.BillingInvoiceSource.Shipment
       		or    BillingInvoice.BillingInvoiceSource.Return
       		or    BillingInvoice.BillingInvoiceSource.RecurringInvoice)
       	
       	HasLineAddOnCharges
        	restricted
        	when (BillingInvoiceAddOnChargeRel exists)
        	
        HasLineComments
        	restricted
        	when (BillingInvoiceCommentsRel exists)
        	
        IsCustomerOrderReturnLineRelExist
        	restricted
        	when (CustomerOrderReturnLineRel exists)
        
        IsBillingGLDistributionRelExist
        	restricted
        	when (BillingGLDistributionRel exists)

		AllowCashFrontEndSplit
			restricted
			when (Company.FrontEndSplitsEnabled
			and BillingInvoice.IsUnreleased
			and	BillingInvoiceLineSalesAccountRel exists)

		HasFrontEndSplitDistributions
			restricted
			when (FESBillingInvoiceLineSalesAccountRel exists
			and BillingInvoice.IsUnreleased)
			
		DoTaxCalculation
			restricted
			when (not TaxEntityRel.ThirdParty.Sabrix  
			or    not TaxEntityRel.DelayTaxProcessing 
			or    BillingInvoice.Status.Released
			or    BillingInvoice.Status.Edited
			or    BillingInvoice.Status.Printed)
		
		IsOneSourceTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityRel.ThirdParty.Sabrix)
		
		HasPointOfTitleTransfer
			restricted
			when (PointOfTitleTransfer entered
			and   TaxEntityRel.ThirdParty.Sabrix)
		
		SingleCallToOneSource
			restricted
			when (IsOneSourceTax
			and	  TaxEntityRel.DelayTaxProcessing
			and	  BillingInvoice.DerivedLineCount <= 200)

		IsVertexTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityUsesVertex)

		SingleCallToVertex
			restricted
			when (IsVertexTax
			and	  TaxEntityRel.VertexCallMethod.ByTransaction
			and	  BillingInvoice.DerivedLineCount <= 200)

    Relations
       
  		InventoryCompanyRel
  			one-to-one relation to InventoryCompany
  			Field Mapping uses symbolic key
  				related.Company				= Company
  		
  		ItemUOMRel
  			one-to-one relation to ItemUOM
  			Field Mapping uses symbolic key
  				related.ItemGroup			= InventoryCompanyRel.ItemGroup
  				related.Item				= Item
  				related.UnitOfMeasure		= SellingUnitOfMeasure
  				
  		BillingItemAddOnCostRel
  			one-to-many relation to BillingItemAddOnCost
  			Field Mapping uses Set2
  				related.Company								= Company
  				related.BillingItemAddOnCost.Item			= Item
  				
  		OrderEntryItemAddOnChargeRel
  			one-to-one relation to OrderEntryAddOnCharge
  			Field Mapping uses symbolic key
  				related.Company							= Company
  				related.OrderEntryAddOnCharge.Misc		= all BillingItemAddOnCostRel.BillingItemAddOnCost.OrderEntryAddOnCharge.Misc
  				related.OrderEntryAddOnCharge.Currency	= LocalCurrency
  				





		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity

		TaxEngineTaxDetailRel
            one-to-many relation to TaxEngineTaxDetail
            Field Mapping uses ByCompanyOrder
				related.Company							= Company
                related.OrderNbr 						= CustomerOrder
			Instance Selection	
				where (related.ShipmentNumber			= LocalWarehouseShipment
				and related.PONumber					= LocalCustomerOrderReturn		
				and related.OrderLineNumber				= BillingInvoiceLine)

		InvoiceTaxEngineTaxDetailRel
            one-to-many relation to TaxEngineTaxDetail
            Field Mapping uses ByCompanyInvoice
				related.Company							= Company
                related.Invoice 						= BillingInvoice.GlobalInvoiceNumber
			Instance Selection
				where (related.OrderLineNumber 			= BillingInvoiceLine)

		TaxEngineTaxDetailEntityTaxCodeRel
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity				= Company.AccountingEntity
				related.TaxCode					= LocalTaxCode

       	DefaultValidForSellPriceRel
       		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.ValidForSellPrice.Default)	
       
       	SellingPriceItemUOMRel
       		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUnitOfMeasure
			Instance Selection
				where (related.ValidForSellPrice.Default
				or     related.ValidForSellPrice.Valid)
       
       	DefaultSellingItemUOMRel
       		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.ValidForSelling.Default)	
       	
  		PriceContractItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set5
  			 	related.Company				= Company
                related.PriceListContractPromotion.Customer = BillingInvoice.Customer
				related.Item				= Item
			Instance Selection
				where (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate
				and    related.PriceListContractPromotion.Customer entered)
                
  		PricePromotionItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set6
  			 	related.Company				= Company
                related.PriceListContractPromotion.ListName = BillingInvoice.ListName
				related.Item				= Item
			Instance Selection
				where (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate
				and    related.PriceListContractPromotion.Promotion entered)		 
  					
  		
  		PriceListItemRel
  			one-to-one relation to PriceListItem
  			Field Mapping uses symbolic key
  				related.Company										= Company
  				related.PriceListContractPromotion.Customer			= blank
  				related.PriceListContractPromotion.ListName			= BillingInvoice.ListName
  				related.PriceListContractPromotion.Promotion		= blank
			    related.Item										= Item
  		
  		PriceBaseItemRel
  			one-to-one relation to PriceBaseItem
  			Field Mapping uses symbolic key
  				related.Company				= Company
  				related.InventoryLocation   = DerivedLocation
  				related.Currency			= DerivedCurrency
  				related.PriceBase			= DerivedPriceBase
  				related.Item				= Item 
		
		PriceListContractPromotionRel	
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses symbolic key
				related.Company										= Company
            Instance Selection
				where ((related.PriceListContractPromotion.Customer = BillingInvoice.Customer 
				or     related.PriceListContractPromotion.Promotion	= PriceListPromotionRel.PriceListContractPromotion.Promotion)
		        and	   related.PriceListContractPromotion.ListName	= BillingInvoice.ListName)
  		
	  	PriceListPromotionRel
	  		one-to-many relation to PriceListContractPromotion
	  		Field Mapping uses Set6
	  			related.Company								= Company
				related.PriceListContractPromotion.ListName	= BillingInvoice.ListName		
			Instance Selection
				where (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate)
		
		
		PriceListContractRel	
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses Set5
			 	related.Company			= Company
	            related.PriceListContractPromotion.Customer	= BillingInvoice.Customer
            Instance Selection
            	where (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate)

	  	PriceListRel
	  		one-to-one relation to PriceListContractPromotion
	  		Field Mapping uses symbolic key
	  			related.Company			= Company
	  			related.PriceListContractPromotion.Customer		= blank
            	related.PriceListContractPromotion.ListName		= BillingInvoice.ListName
            	related.PriceListContractPromotion.Promotion	= blank

		PriceListSalesClassForPriceListRel
	  		one-to-many relation to PriceListSalesClass
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PriceListContractPromotion.Customer				= blank
				related.PriceListContractPromotion.ListName				= BillingInvoice.ListName
            	related.PriceListContractPromotion.Promotion			= blank
           	Instance Selection
	       		where (related.PriceListSalesClass.MajorSalesClass		= MajorSalesClass
                and    related.PriceListSalesClass.MinorSalesClass 		= MinorSalesClass)

		PriceListSalesClassForContractRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set5	
				related.Company								= Company 		
                related.PriceListContractPromotion.Customer		= BillingInvoice.Customer
        	Instance Selection        
                where (related.PriceListSalesClass.MajorSalesClass	= MajorSalesClass
                and    related.PriceListSalesClass.MinorSalesClass 	= MinorSalesClass  
  				and   (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate))    
                
		
		PriceListSalesClassForPromotionRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set6
				related.Company								= Company 		
                related.PriceListContractPromotion.ListName		= BillingInvoice.ListName
        	Instance Selection        
                where (related.PriceListSalesClass.MajorSalesClass	= MajorSalesClass
                and    related.PriceListSalesClass.MinorSalesClass 	= MinorSalesClass
  				and   (related.BeginDate						   <=  BillingInvoice.PriceDate
				and	   related.EndDate							   >=  BillingInvoice.PriceDate))


        BillingInvoiceAddOnChargeRel
            one-to-many relation to BillingInvoiceAddOnCharge
            delete cascades
            Field Mapping uses symbolic key
                related.Company 			= Company
				related.BillingInvoice		= BillingInvoice
				related.BillingInvoiceLine 	= BillingInvoiceLine

		BillingInvoiceLineAddOnChargeRel
            one-to-one relation to BillingInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 			= Company
				related.BillingInvoice		= BillingInvoice
				related.BillingInvoiceLine 	= BillingInvoiceLine
				related.BillingInvoiceAddOnCharge = LocalAOCCount











        BillingInvoiceLineTaxRel
            one-to-many relation to BillingInvoiceLineTax

            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.BillingInvoice.InvoicePrefix = BillingInvoice.InvoicePrefix
                and   related.BillingInvoice.InvoiceNumber = BillingInvoice.InvoiceNumber
                and   related.BillingInvoiceLine = BillingInvoiceLine
                and   related.BillingInvoiceLineTax not entered)
       
        BillingInvoiceLinesTaxRel is a BillingInvoiceLineTax set

		BillingInvoiceLineTaxTableCodeRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses Set3
				related.Company 			= Company
				related.BillingInvoice 		= BillingInvoice
				related.BillingInvoiceLine 	= BillingInvoiceLine
			Instance Selection
				where (related.TaxCode		= LocalTaxCode)

		InvoiceLineTaxByTaxCodeRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.BillingInvoice 					= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		InvoiceLineTaxByUpdatedTaxCodeRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.BillingInvoice 					= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalUpdatedTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		BillingInvoiceLinesByTaxCodeRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.BillingInvoice 					= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		OtherLinesByTaxCodeRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.BillingInvoice 					= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory
				and   related.UniqueID					!= UniqueID)

		BillingInvoiceAddOnChargeByTaxCodeRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.BillingInvoice 					= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

        BillingInvoiceLineMultipleUOMRel
            one-to-one relation to BillingInvoiceLineMultipleUOM
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.BillingInvoice.InvoicePrefix  = BillingInvoice.InvoicePrefix
                related.BillingInvoice.InvoiceNumber  = BillingInvoice.InvoiceNumber
                related.BillingInvoiceLineMultipleUOM = BillingInvoiceLine


        WarehouseShipmentLineRel
            one-to-one relation to WarehouseShipmentLine
            Field Mapping uses symbolic key
                related.Company               = Company
                related.InventoryLocation     = Location
                related.WarehouseShipment     = WarehouseShipment
                related.WarehouseShipmentLine = BillingInvoiceLine




        GeneralLedgerCategoryRel
            one-to-one relation to GeneralLedgerCategory
            Field Mapping uses symbolic key
                related.Company               = Company
                related.InventoryLocation     = Location
                related.GeneralLedgerCategory = ItemLocation.GeneralLedgerCategory

        ItemRel
            one-to-one relation to Item
            Field Mapping uses symbolic key
                related.ItemGroup = InventoryCompanyRel.ItemGroup
                related.Item      = Item


        BillingManualInvoiceHeaderRel
            one-to-one relation to BillingManualInvoiceHeader
            Field Mapping uses symbolic key
                related.Company                    = Company
                related.BillingManualInvoiceHeader = BillingInvoice.BatchNumber


      	BillingItemGeneralLedgerAccountRel
			one-to-many relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company														= Company
			Instance Selection	
				where (related.BillingItemGeneralLedgerAccount.BillingProcessLevel 	= BillingInvoice.BillingProcessLevel
				and	   related.BillingItemGeneralLedgerAccount.MajorSalesClass 		= Item.MajorSalesClass
				and   (related.BillingItemGeneralLedgerAccount.MinorSalesClass 		= Item.MinorSalesClass
				or 	   related.BillingItemGeneralLedgerAccount.MinorSalesClass  	= blank))

		BillingItemGeneralLedgerAccountsRel
			one-to-one relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company                                             = Company
				related.BillingItemGeneralLedgerAccount.BillingProcessLevel = BillingInvoice.BillingProcessLevel
				related.BillingItemGeneralLedgerAccount.MajorSalesClass     = Item.MajorSalesClass
				related.BillingItemGeneralLedgerAccount.MinorSalesClass     = LocalMinorSalesClass

		

		CustomerOrderReturnRel
			one-to-one relation to CustomerOrderReturn
			Field Mapping uses Set2
				related.Company			= Company
				related.InvoicePrefix   = BillingInvoice.InvoicePrefix
				related.InvoiceNumber	= BillingInvoice.InvoiceNumber
		
		
		CustomerOrderReturnLineRel
        	one-to-many relation to CustomerOrderReturnLine
	        Field Mapping uses symbolic key
				related.Company        				= Company
				related.CustomerOrderReturn			= CustomerOrderReturnRel.CustomerOrderReturn
				related.CustomerOrderReturnLine		= BillingInvoiceLine

		BillingInvoiceAddOnChargesRel is a BillingInvoiceAddOnCharge set
			Instance Selection	
				where (related.BillingInvoiceLine entered)		
		
		BillingInvoiceCommentsRel is a BillingInvoiceComments set
			Instance Selection	
				where (related.BillingInvoiceLine entered)

		BillingInvoiceLineCommentsForIDMRel is a BillingInvoiceComments set
			Instance Selection	
				where (not related.PrintCode.DisplayOnly
				and related.BillingInvoiceLine entered)
		
   		BillingInvoiceLineAccumulatedGroupPricingRel
       		one-to-many relation to BillingInvoiceLine
       		Field Mapping uses Set2
       			related.Company 						 = Company
          		related.BillingInvoice.InvoicePrefix  	 = BillingInvoice.InvoicePrefix
                related.BillingInvoice.InvoiceNumber 	 = BillingInvoice.InvoiceNumber
                related.MajorSalesClass                  = MajorSalesClass
				related.MinorSalesClass                  = MinorSalesClass
    
    	EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity				= Company.AccountingEntity
				related.TaxCode					= TaxCode
    
    	CurrentPriceListRel
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses ByListName
				related.Company									= Company
				related.PriceListContractPromotion.ListName		= DerivedPriceList
				
		CurrentPriceListItemsRel
			one-to-many relation to PriceListItem
			Field Mapping uses ByListName
				related.Company									= Company
				related.PriceListContractPromotion.ListName		= DerivedPriceList
				related.Item									= Item
				
		BillingStandardCommentHeaderRel
			one-to-many relation to BillingStandardCommentHeader
			Field Mapping uses symbolic key
				related.Company		= Company
				
		SellingItemUOMRel
       		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingUnitOfMeasure
			Instance Selection
				where (related.ValidForSelling.Default
				or     related.ValidForSelling.Valid)
				
		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig 						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				
		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup 
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)

		BillingInvoiceLineLotSerialBinRel 
        	one-to-many relation to BillingInvoiceLineLotSerialBin
			Field Mapping uses symbolic key
				related.Company 								= Company
           		related.BillingInvoice.InvoicePrefix            = BillingInvoice.InvoicePrefix		
			    related.BillingInvoice.InvoiceNumber	        = BillingInvoice.InvoiceNumber
			    related.BillingInvoiceLine                      = BillingInvoiceLine
		    
		BillingInvoiceLineAttachmentRel	is a BillingInvoiceLineAttachment set

		LineSalesAccountForOriginalInvoiceRel
			one-to-many relation to BillingInvoiceLineSalesAccount
			Field Mapping uses symbolic key
				related.Company 								= Company
           		related.BillingInvoice.InvoicePrefix            = BillingInvoice.OriginalBillingInvoice.InvoicePrefix		
			    related.BillingInvoice.InvoiceNumber	        = BillingInvoice.OriginalBillingInvoice.InvoiceNumber
			    related.BillingInvoiceLine                      = BillingInvoiceLine

		BillingInvoiceLineSalesAccountRel
			one-to-many relation to BillingInvoiceLineSalesAccount
			Field Mapping uses symbolic key
				related.Company 								= Company
           		related.BillingInvoice.InvoicePrefix            = BillingInvoice.InvoicePrefix		
			    related.BillingInvoice.InvoiceNumber	        = BillingInvoice.InvoiceNumber
			    related.BillingInvoiceLine                      = BillingInvoiceLine

		FESBillingInvoiceLineSalesAccountRel
			one-to-many relation to BillingInvoiceLineSalesAccount
			Field Mapping uses symbolic key
				related.Company 								= Company
           		related.BillingInvoice.InvoicePrefix            = BillingInvoice.InvoicePrefix		
			    related.BillingInvoice.InvoiceNumber	        = BillingInvoice.InvoiceNumber
			    related.BillingInvoiceLine                      = BillingInvoiceLine
			Instance Selection	
				where (related.CreatedByFES)
		    

		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter
		
		FSMBODGLCCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= DerivedCrossGLC )
		
		BillingGLDistributionRel 
			one-to-many relation to BillingGLDistribution
			Field Mapping uses symbolic key
				related.Company									= Company
				related.BillingInvoice.InvoicePrefix			= BillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber			= BillingInvoice.InvoiceNumber
				related.BillingInvoiceLine						= BillingInvoiceLine
				
		BillingGLDistributionPerLineARCodeRel 
			one-to-many relation to BillingGLDistribution
			Field Mapping uses SetARCode
				related.Company                     = Company
				related.BillingInvoice              = BillingInvoice
				related.ReceivableGeneralLedgerCode = ""
				related.BillingInvoiceLine          = BillingInvoiceLine

		CustomerItemCrossReferenceRel
			one-to-many relation to CustomerItemCrossReference
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= BillingInvoice.Customer
			Instance Selection
				where (related.Item			= Item)
				


		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
          	Instance Selection
				where (related.Alert						= "FSM_ION_BLPriceOverrideAlert"
				and	   related.Enable)    


		TaxLineItemsForLineRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
			Instance Selection
				where ((related.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
				or      related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)
				and		related.InvoiceNumber						= BillingInvoice.InvoiceNumber
				and	    related.RelatedObjectReference				= reference to this instance)

		TaxLineItemsForLineSalesAccountsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup
			Instance Selection
				where (related.InvoiceNumber						= BillingInvoice.InvoiceNumber
				and	  related.RelatedObjectReference				= reference to this instance
				and   related.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID)

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = BillingInvoice.UniqueID
			Instance Selection
				where (related.InvoiceNumber				= BillingInvoice.InvoiceNumber)

		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 				= Company
				related.ReceivableGeneralLedgerCode 			= LocalReceivableGeneralLedgerCode

		CurrExchangeRateRel 
			one-to-one relation to CurrExchangeRate	
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.CurrencyTable					= Company.FinanceEnterpriseGroup.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency= BillingInvoice.Currency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency= Company.FinanceEnterpriseGroup.ReportCurrencyOne
				related.ExchangeDate                   <= BillingInvoice.InvoiceDate

		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key 
				related.Company	= Company	

    Sets

        Set2
            indexed
            Instance Selection
                where (IsAmalgamatedGroupPricing)
            Sort Order
                Company
                BillingInvoice
                MajorSalesClass
                MinorSalesClass
                BillingInvoiceLine















        Set5
            indexed
            Sort Order
                Company
                BillingInvoice
                TaxCode
                ProductTaxCategory
                BillingInvoiceLine

        Set6
            indexed
            Sort Order
                Company
                BillingInvoice.InvoicePrefix
                BillingInvoiceLine
                BillingInvoice.InvoiceNumber
	
	Local Fields
		LocalWarehouseShipment				is like WarehouseShipment
		LocalCustomerOrderReturn			is like CustomerOrderReturn
		LocalCurrencyTable 					is a CurrencyTable
 		LocalCurrency	 					is a Currency
		LocalMiscellaneous		 			is like Misc
		UnitCostCurrencyExchange
		CurrencyExchange	
		CalculateTax
		ProcessTaxHistory
		LocalTaxHistoryProcessed			is Alpha 1
		LocalVertexTaxHistoryProcessed		is Boolean
		LocalCurrencyAddOnCharge			is an InternationalCost
		LocalPricePercent					is Percent 5.2
		LocalDiscountCounter				is Numeric size 2
		LocalTotalDiscount					is an InternationalAmount
		CalculateTerms
		LocalTermsDiscount					is an InternationalAmount			
		LocalTermsDueDate					is Date		
		LocalQuantity						is like BreakQuantitiesOccurs10
		LocalPriceQuantity					is like Quantity
		LocalPriceCurrency					is a CurrencyRate
		UOMCalculation
		LocalBreakQuantity		  			is 	Boolean		
		LocalUOMPrice			  			is like SellPriceByUOMArray
		I1									is Numeric size 2
		I2									is Numeric size 2
		I3									is Numeric size 2
		I10									is Numeric size 2
		LocalCounter						is Numeric size 2
    	SellingPriceMultipleUOMArray
   		LocalMutipleSellPrice				is Boolean
   		CurrencyExchangeGroup
   		FromCurrencyExchangeGroup
   		LocalRemainingQuantity				is like Quantity
   		LocalEnteredPrice					is an InternationalCost
   		LocalAddonCurrency					is like Currency
   		LocalGrossAmount					is an InternationalAmount
   		LocalTaxableAmount					is an InternationalAmount
   		LocalSellingPriceUOM				is like SellingPriceMultipleUOMArray
   		LocalUOMCheck						is Numeric size 10
   		LocalUnitPriceCheck					is Boolean
    	LocalPriceBase						is like PriceBase
    	ItemLocation
    	LocalPriceUOM						is Boolean
    	LocalExtendedAmount					is an InternationalAmount
    	LocalCalculateTaxExecuted			is Alpha 1
    	LocalTermsCalTrigger				is Alpha 1
    	LocalDiscount						is an InternationalAmount
    	LocalTaxAmount						is an InternationalAmount
		LocalTaxBase						is an InternationalAmount
    	LocalNetAmount						is an InternationalAmount
    	LocalNetBaseAmount					is an InternationalAmount
    	LocalCreateFromBatch                is Boolean
    	LocalAccumulatePriceQuantity        is like Quantity
    	LocalQuantityPrice                  is like Quantity
    	LocalAccumulatedQuantity            is like Quantity
    	LocalLocation                       is like InventoryLocation
    	LocalOverridePrice					is like InternationalAmount
    	LocalUnitAddOnPrice                 is like InternationalAmount
		LocalQuantityTotal                  is like Quantity

		LocalCurrencyAmount					is a CurrencyAmount
		LocalTermsCode						is a TermsCode
		LocalFoundPercent					is a Pct
		LocalUnitAddOn						is an InternationalCost
		LocalPriceListItem					is a PriceListItem
		LocalPriceListContractPromotion		is a PriceListContractPromotion
		Debug								is Boolean
		LocalEnteredPriceCheck				is Boolean
		MinusOne							is Numeric 2
		LocalTaxTotal						is an InternationalAmount
		LocalExcessDiscount					is an InternationalAmount
		LocalExcessTax						is an InternationalAmount
		LocalSellPrice						is an InternationalCost
		LocalReceivableGeneralLedgerCode	is like ReceivableGeneralLedgerCode
		LocalJurisdictionLookupKey  		is Alpha 200
		LocalLineNetTransactionAmount		is like InternationalAmount
		LocalOldLineNetTransactionAmount	is like InternationalAmount	
		FromBatch                           is Boolean	
		LocalTaxCode						is like TaxCode
		LocalDetailQuantity					is like Quantity
		LocalProcessLevelOverride           is Boolean
		LocalCalculatedExtendedAmount		is an InternalAmount
		LocalCalculatedGrossAmount			is an InternalAmount
		LocalCalculatedLineTotal			is an InternalAmount
		CalculateInvoiceLineTaxDone			is Boolean				
		LocalCreatedFromCopy				is Boolean
			

		LocalOriginalCurrency					is Alpha 5
		LocalBasecurrency						is Alpha 5
		LocalDerivedRefType						is Alpha 10
		LocalBLInvoiceLineAddOnChargeXMLBOD		is XMLDocument
		LocalAlphaTotalPretaxReportAmount		is like InternationalAmount
		LocalTotalPretaxReportAmount			is Alpha 50
		LocalReportAmount						is like InternationalAmount
		LocalAlphaExtendedReportAmount			is like InternationalAmount
		LocalExtendedReportAmount				is Alpha 50
		LocalShipToPartyID						is Alpha 60
		LocalLineDescriptionIN					is Alpha 60
		LocalAOCCount							is Numeric size 9

		LocalTaxSequence					    is Numeric size 9
		LocalTaxRate						    is Decimal size 7.5
		LocalBLLineTaxAmount					is Decimal size 19.3
		LocalBLLineTaxReportAmount				is like InternationalAmount

		


		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		TaxLineItemView							is a TaxLineItem view
		LocalLineItemNumber						is like DistributionSequence
		LocalDontCreateTaxLog					is Boolean
		LocalConfigurationParameter				is Alpha size up to 200
		Idx										is Numeric 2
		LocalMinorSalesClass                    is like MinorSalesClass
		LocalGeneralLedgerSystemCode		    is a GeneralLedgerSystemCode
		LocalRecalculateTaxes					is Boolean
		LocalProductTaxCategory					is like ProductTaxCategory
		LocalLineTaxableAmount					is like InternationalAmount
		LocalSalesTax							is an InternationalCost
		LocalSubtractTaxableAmount				is Boolean
		LocalUpdatedTaxCode						is like TaxCode
		LocalTaxCodeChanged						is Boolean
		LocalCreateBillingInvoiceLineTax		is Boolean
		LocalNoBillingInvoiceLinesExist			is Boolean
		LocalQuantityAndPriceChangeAccounted	is Boolean
		LocalInvoiceTypeChanged					is Boolean
		LocalUniqueID							is like UniqueID
		LocalSalesAmount						is an InternationalAmount
		LocalDescription						is like Description
		LocalSalesAccount						is a TransactionCodeBlock
		LocalTaxCallForLine						is Boolean
		LocalCreateTaxLineItems					is Boolean
		LocalSequenceLineItemNumber				is Boolean
		LocalFirstSalesAccountForLine			is Boolean
		BillingInvoiceLineSalesAccountView		is a BillingInvoiceLineSalesAccount view
		LocalLineQuantity						is like Quantity

    Transient Fields
    	TransientExchangeDate               is an ExchangeDate
    		derive value from BillingInvoice.InvoiceDate
    	TransientPostingDate                is a PostingDate
    	TransientSkipExitRules				is Boolean 
		FromCurrency
			derive value from BillingInvoice.Currency
    
    Field Rules

        Company
			if (!Company.CurrencyBasedPricing)
				LocalCurrency			= Company.Currency
			else
				LocalCurrency			= BillingInvoice.Currency	
        
        Location
            initial value is BillingInvoice.Location
            default to BillingInvoice.Location
            if (TaxExemptCode.Taxable)
				if (IsHSNSACCodeEnabled)
					if (Location changed)
						confirmation required
							"UpdatingLocationWillUpdateTheTaxCodeAccordingly,Continue?"
						initialize TaxCode
        	if (BillingInvoice.BillingInvoiceSource.Shipment)
        		cannot be changed		
        			"CannotChangeLocationOnSystemGeneratedInvoice"		
			if (LineType.Inventoried)
				constraint (ItemLocation exists)
					"ItemLocationDoesNotExistForItem<Item>"
		LineType
			if (BillingInvoice.BillingInvoiceSource.Manual
			or BillingInvoice.BillingInvoiceSource.Interfaced)
        		if (ItemLocation.InventoryTracked)
					default to LineType.Inventoried
				else
				if (Item exists)
					default to LineType.NonStock
				else
					default to LineType.Special
				
			
			if (BillingInvoice.BillingInvoiceSource.Shipment)
        		cannot be changed		
        			"CannotChangeLineTypeOnSystemGeneratedInvoice"   
        			
			
		MajorSalesClass
			default to Item.MajorSalesClass
        MinorSalesClass		
			default to Item.MinorSalesClass	
		
		Item
			cannot be changed			
				"CannotChangeItem"		
			
			required
				
			if (LineType.Inventoried or LineType.NonStock)
				constraint (Item exists)	
					"Item<Item>DoesNotExist"
				constraint (Item.Active)
					"Item<Item>IsInactive"	

				constraint (BillingItemGeneralLedgerAccountRel exists)
					"SalesClassDoesNotExistForItem<Item>"	
					
	 			if (LineType.Inventoried)
					constraint (ItemLocation.InventoryTracked)
						"Item<Item>IsNotAnInventory-TrackedItem"			
						
				if (PriceListContractRel exists)
					if (PriceContractItemRel exists)
						constraint(not PriceContractItemRel.SalesProhibited)
							"Item<Item>IsProhibitedForSaleToThisCustomer"		
					else 
					if (PriceListSalesClassForContractRel exists)
						constraint(not PriceListSalesClassForContractRel.SalesProhibited)
							"Item<Item>IsProhibitedForSaleToThisCustomer"
				else
				if (PriceListPromotionRel exists)
	        		if (PricePromotionItemRel exists)
	        			constraint(not PricePromotionItemRel.SalesProhibited)
	        				"Item<Item>IsProhibitedForSaleToThisCustomer"
	        		else
	        		if (PriceListSalesClassForPromotionRel exists)
	        			constraint(not PriceListSalesClassForPromotionRel.SalesProhibited)
	        				"Item<Item>IsProhibitedForSaleToThisCustomer"
				else
				if (PriceListRel exists)
	        		if (PriceListItemRel exists)
	        			constraint(not PriceListItemRel.SalesProhibited)
	        				"Item<Item>IsProhibitedForSaleToThisCustomer"
	        		else
	        		if (PriceListSalesClassForPriceListRel exists)
	        			constraint (not PriceListSalesClassForPriceListRel.SalesProhibited)
	        				"Item<Item>IsProhibitedForSaleToThisCustomer"        			
							
	  	Quantity
      		required
				"QuantityIsRequired"			
		
			if  (action type.Create)
				if (((BillingInvoice.BillingInvoiceType.Credit
				and !BillingInvoice.BillingInvoiceSource.Franchise
				and not LocalCreatedFromCopy)
				and (Company.AllowMixedSignLines
				or (!Company.AllowMixedSignLines
				and Quantity > 0)))
				or (LocalCreatedFromCopy
				and LocalInvoiceTypeChanged))
					Quantity = Quantity * -1

	   		if (BillingInvoice.BillingInvoiceSource.Return
	    	and CustomerOrderReturnLineRel  exist)
				cannot be changed
	    			"CannotChangeQuantityOnReturnInvoiceLine"	
	    		
	    	if (BillingInvoice.BillingInvoiceSource.Shipment)
	    		cannot be changed				
	    			"CannotChangeQuantityOnSystemGeneratedInvoice" 
	
		ProductTaxCategory
			default to Item.ProductTaxCategory 	
        
        OrderDiscount
            default to PriceListContractRel.OrderDiscount
            default to PriceListPromotionRel.OrderDiscount
            default to PriceListRel.OrderDiscount

		CustomerOrder
			initial value is BillingInvoice.CustomerOrder
			default to BillingInvoice.CustomerOrder
			
		WarehouseShipment
			initial value is BillingInvoice.WarehouseShipment
			default to BillingInvoice.WarehouseShipment	
		
		ReasonCode
			initial value is BillingInvoice.ReasonCode
			default to BillingInvoice.ReasonCode	
			
			constraint (ReasonCode.Billing)
				"ReasonCodeIsInvalidForBilling"	
			
		Territory	
			initial value is BillingInvoice.Territory
			default to BillingInvoice.Territory
			required
				"TerritoryIsRequired"		
		
		SalesRepresentative
			initial value is BillingInvoice.SalesRepresentative
			default to BillingInvoice.SalesRepresentative
			required
		SalesRepresentative2	
			initial value is BillingInvoice.SalesRepresentative2
			default to BillingInvoice.SalesRepresentative2
			
			
		CommissionSplitPercentage
			initial value is BillingInvoice.CommissionSplitPercentage
			default to BillingInvoice.CommissionSplitPercentage	
			
	    CommissionRate1                      
			initial value is BillingInvoice.CommissionRate1
			default to BillingInvoice.CommissionRate1
			
			constraint (CommissionRate1 +  CommissionRate2 < 100%)
				"CommissionTotalExceeds100Percent"
        
        CommissionRate2                      
        	initial value is BillingInvoice.CommissionRate2
        	default to BillingInvoice.CommissionRate2
        	
        	if (SalesRepresentative2 changed)
        		default to SalesRepresentative2.CommisionPercent
        	
       	SellToStock
        	default to SellingItemUOMRel.UOMConversion
       			
			if (LineType.Special)
				default to 1
        
        SellingUnitOfMeasure
        	if (!LocalCreateFromBatch)
	        	if (Company.UnitOfMeasureRequired
	        	or (LineType.Special
	        	and not Rounding))
	        		required							
						"UnitOfMeasureIsRequired"
	        	else
	        		default to DefaultSellingItemUOMRel.UnitOfMeasure
	        		
	        	if (!LineType.Special)
					constraint (SellingItemUOMRel exists)
						"<SellingUnitOfMeasure>IsAnInvalidSellingUnitOfMeasureForItem<Item>"
	        	
	        	cannot be changed
	        		"CannotChangeUnitOfMeasure"			
	        
	        else
	        	default to DefaultSellingItemUOMRel.UnitOfMeasure
       	
       	SellingPriceToStockConversionFactor
			default to SellingPriceItemUOMRel.UOMConversion
			if (LineType.Special)
				default to 1
			else
			if (SellingPriceUnitOfMeasure changed)
				SellingPriceToStockConversionFactor = SellingPriceItemUOMRel.UOMConversion
		
		
		SellingPriceUnitOfMeasure
        	if (LineType.Special)
        		default to SellingUnitOfMeasure
        		constraint (SellingUnitOfMeasure = SellingPriceUnitOfMeasure)
        			"Item<Item>IsASpecialItem,SellAndPriceUOM\sMustBeTheSame" 
        	else
        		default to DefaultValidForSellPriceRel.UnitOfMeasure
        		constraint (SellingPriceItemUOMRel exists)
					"<SellingPriceUnitOfMeasure>IsAnInvalidSellingPriceUnitOfMeasureForItem<Item>"
        		      	
        	if (EnteredPrice entered)
        		if (SellingPriceItemUOMRel.ValidForSellPrice.Default)
        			default to SellingPriceItemUOMRel.UnitOfMeasure
        	
        	if (BillingInvoice.BillingInvoiceSource.Shipment)
        		cannot be changed		
        			"CannotChangeUOMOnSystemGeneratedInvoice"				
        			
		PriceStatus
			if (IsBillingInvoiceSource
			and !NoCharge
			and (not LocalEnteredPriceCheck
			or	not PriceStatus.ManualOverrideOfPricing))
				
				if  (LocalEnteredPriceCheck
				and (action type.Create or EnteredPrice changed))
					PriceStatus =  PriceStatus.ManualOverrideOfPricing 
				else	
				if (PriceListSalesClassForPriceListRel.AmalgamatedPricing
				or	PriceListSalesClassForContractRel.AmalgamatedPricing
				or	PriceListSalesClassForPromotionRel.AmalgamatedPricing)
					PriceStatus = PriceStatus.AmalgamatedGroupPricing
				else
					PriceStatus = PriceStatus.SystemCalculatedPricing
				
		


		
			
			if (PriceListContractRel exists)
				LocalPriceBase	= PriceListContractRel.BaseName
			else
			if (PriceListPromotionRel exists)
				LocalPriceBase = PriceListPromotionRel.BaseName
	  		else
	  			LocalPriceBase	= PriceListRel.BaseName
  		
		ContractNumber
	 		default to PriceContractItemRel.PriceListContractPromotion.ListName
	 		default to PriceListSalesClassForContractRel.PriceListContractPromotion.ListName
	 		default to PriceListContractRel.PriceListContractPromotion.ListName
	 		
	 	Promotion	
	 		default to PricePromotionItemRel.PriceListContractPromotion.Promotion
	 		default to PriceListSalesClassForPromotionRel.PriceListContractPromotion.Promotion
	 		default to PriceListPromotionRel.PriceListContractPromotion.Promotion
			
		NoCharge
			if (NoCharge)
				constraint (EnteredPrice not entered)
					"PriceNotAllowedForNoChargeItems"
			else
				default to PriceContractItemRel.NoCharge
	    		default to PricePromotionItemRel.NoCharge		
	    		default to PriceListItemRel.NoCharge
	        	default to PriceListSalesClassForContractRel.NoCharge
	        	default to PriceListSalesClassForPromotionRel.NoCharge
	        	default to PriceListSalesClassForPriceListRel.NoCharge
	        	if (PriceBaseItemRel.NextEffectiveDate entered
	        	and BillingInvoice.PriceDate >= PriceBaseItemRel.NextEffectiveDate)
	        		default to PriceBaseItemRel.NextPriceIsNoCharge
	        	else
	        		default to PriceBaseItemRel.CurrentPriceIsNoCharge
	        	
      	EnteredPrice



			





			



			

			




      		if (not LocalCreateFromBatch)	        			        	


	        	 				
				if (EnteredPrice entered)
					initialize NoCharge
		    			
		       	if (not NoCharge)
					if (not LocalEnteredPrice entered 
	       			and PriceBaseItemRel exists
	       			and IsPriceDateValid)
	       				default to DerivedEnteredPrice
		       		
		       		required
		       			"PriceIsRequired"		       	
		       		
		       	if (BillingInvoice.BillingInvoiceSource.Shipment
				and PriceStatus.SystemCalculatedPricing)
					initialize	EnteredPrice			
	        	
	        	if (PriceStatus.SystemCalculatedPricing
	        	and Company.Reprice)
	        		initialize	EnteredPrice
	        	



	        	
	        	if (EnteredPrice changed)
					trigger "BLPriceOverrideService" PA service
						resume on error
						title is "CO:<Company>Customer:<BillingInvoice.Customer>"
						Criteria
							Company						
						Variables
							Company
								variable name is Company	
							BillingInvoice.BillingProcessLevel
								variable name is ProcessLevel
							BillingInvoice.InvoiceNumber
								variable name is InvoiceNumber
							BillingInvoice.InvoicePrefix
								variable name is InvoicePrefix
							BillingInvoice.Customer
								variable name is Customer
							Location
								variable name is Location
							BillingInvoiceLine
								variable name is BillingInvoiceLine
							Item
								variable name is Item
							Quantity
								variable name is Quantity
							EnteredPrice
								variable name is EnteredPrice
							BillingInvoice.Currency
								variable name is Currency
					
			   		invoke BLPriceOverrideAlert			
    	
        	
        	
        EnteredDiscount
        	constraint (!NoCharge)
        		"DiscountNotAllowedForNoChargeItems"	
        	
        	if (EnteredDiscount changed)
        		if (!BillingInvoice.BillingInvoiceSource.Shipment)
				 	if (BillingInvoice.BillingInvoiceType.Credit)
						constraint (EnteredDiscount <= 0)
							"AddOnDiscountMustBeNegativeForCreditMemo"
					else
						constraint (EnteredDiscount >= 0)
							"AddOnDiscountMustBePositiveForDebitInvoice"

			if (EnteredDiscount entered)
				initialize CurrencyExchangeGroup
				CurrencyExchangeGroup.TransactionAmount					= EnteredDiscount
				CurrencyExchangeGroup.BaseAmount.ToCurrency				= Company.Currency
				CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate	= BillingInvoice.CurrencyRate
				AddOnDiscount											= CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

       	InvoiceCatchWeightQuantity
       		if (!Item.IsCatchWeightItem)
       			cannot be entered
       				"ItemIsNotACatchWeightItem"
       		
       		if (BillingInvoice.BillingInvoiceType.Credit)
       			InvoiceCatchWeightQuantity *= -1
       		
       		if (BillingInvoice.BillingInvoiceSource.Project
       		or  BillingInvoice.BillingInvoiceSource.Interfaced
       		or  BillingInvoice.BillingInvoiceSource.Manual)
       			if (Item.IsCatchWeightItem)
       				initialize UOMCalculation
       				UOMCalculation.InputUOM							= Item.StockUOM
					UOMCalculation.InputToUOM						= SecondaryUOM
					UOMCalculation.InputQuantity					= Quantity
					UOMCalculation.DoRounding						= true
					UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
       				InvoiceCatchWeightQuantity						= UOMCalculation.OutputQuantity
        SalesAccount
			LocalGeneralLedgerSystemCode = "BL"
        	if (LineType.NonStock
        	or  LineType.Inventoried)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if(BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to BillingItemGeneralLedgerAccountsRel.SalesAccount 
	
        	if (LineType.Special)
        		default to BillingInvoice.BillingProcessLevel.SpecialOrderSalesAccount
        			default individual fields        		
        	
			if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
        	if (LineType.Special
        	or  LineType.NonStock)
        		required
        			"AccountRequiredForSpecialAndNon-StockItems"
        	
        	if (IsBillingInvoiceSource
			and LineType.Inventoried
			and not LocalProcessLevelOverride
			and not BillingCompanyRel.SalesAccountOverride)
				constraint (SalesAccount = BillingItemGeneralLedgerAccountsRel.SalesAccount)
					"CannotEnterAccountNumbersForInventoriedItems"
        	


        	
        	if (SalesAccount.Project changed)
        		if (BillingInvoice.BillingInvoiceSource.Return
	        	and CustomerOrderReturnLineRel exist)
    				cannot be changed
    					"CannotChangeActivityOnSystemGeneratedInvoice"    				
        	if (BillingInvoice.BillingInvoiceSource.Shipment
	        and CustomerOrderReturnLineRel exist)
    			cannot be changed
    				"CannotChangeActivityOnSystemGeneratedInvoice"   
        	if (BillingInvoice.BillingInvoiceSource.Shipment
	        and CustomerOrderReturnLineRel exist)
    			cannot be changed
    			
    		if (SalesAccount.Project entered)
    			TransientExchangeDate = BillingInvoice.InvoiceDate
    			TransientPostingDate  = BillingInvoice.InvoiceDate
        		
		COGSAccount
			LocalGeneralLedgerSystemCode = "BL"
			if (LineType.NonStock
			or  LineType.Inventoried)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to  BillingItemGeneralLedgerAccountsRel.COGSAccount
						
			if (LineType.Special)
				default to BillingInvoice.BillingProcessLevel.SpecialOrderCOGSAccount
					default individual fields
			
			if (LineType.Special
        	or  LineType.NonStock)
        		required

			if (COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<COGSAccount.GeneralLedgerChartAccount.Account>"
			



			if (IsBillingInvoiceSource
			and LineType.Inventoried
			and not LocalProcessLevelOverride)
				constraint (COGSAccount	= BillingItemGeneralLedgerAccountsRel.COGSAccount)
					"cannotEnterAccountNumbersForInventoriedItems"
				
		Description
			initial value is Item.Description
			default to Item.Description
			if (LineType.Special)
				required
		
		SecondaryUOM
			if (Item.IsCatchWeightItem)
				default to Item.SecondaryUOM
			else
				cannot be entered	
		
		SecondaryUOMMultiplier
			if (Item.IsCatchWeightItem)
				default to Item.SecondaryUOMMultiplier
			else
				cannot be entered	
		OffsetAccount
			LocalGeneralLedgerSystemCode = "BL"
			if (LineType.Inventoried)
				default to GeneralLedgerCategoryRel.InventoryAccount
			else
			if (LineType.NonStock)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to  BillingItemGeneralLedgerAccountsRel.ExpenseAccount
			else
			if (LineType.Special)
				default to BillingInvoice.BillingProcessLevel.ExpenseAccount
					default individual fields
			
			if (LineType.Special
        	or  LineType.NonStock)
        		required
			
			if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
			if (IsBillingInvoiceSource
			and LineType.Inventoried)
				constraint (OffsetAccount	= GeneralLedgerCategoryRel.InventoryAccount)
					"OffsetAccountsMustBeSameAsInventoryAccountFromInventoryLocationAccountGroup"

		TaxExemptCode
			if (BillingInvoice.IsTaxEngine)
				if (BillingInvoice.BillingInvoiceSource.Shipment)
					LocalWarehouseShipment = WarehouseShipment
					if (any TaxEngineTaxDetailRel.TaxCode entered)
						TaxExemptCode = TaxExemptCode.Taxable
					else
						TaxExemptCode = TaxExemptCode.Exempt
				else
				if (BillingInvoice.BillingInvoiceSource.Manual)
					if (any InvoiceTaxEngineTaxDetailRel.TaxCode entered)
						TaxExemptCode = TaxExemptCode.Taxable
					else
						TaxExemptCode = TaxExemptCode.Exempt

			else
				if (BillingInvoice.TaxExemptCode.Exempt
				or  NoCharge)
					if (TaxExemptCode.Taxable)
						confirmation required
							"MustFirstChangeInvoiceHeaderToBeTaxableBeforeLineTaxableDataCanBeEntered;LineWillBeSavedWithoutLineTaxableData"
					TaxExemptCode = TaxExemptCode.Exempt
					initialize TaxCode
				else
				if (ItemLocation exists)
					if (ItemLocation.TaxableWhenSold)
						default to TaxExemptCode.Taxable
					else
						default to TaxExemptCode.Exempt	
				else
					default to BillingInvoice.TaxExemptCode
					
					
				if (BillingInvoice.TaxExemptCode.Exempt)
					constraint (TaxExemptCode.Exempt)
						"AnInvoiceLineCannotBeTaxableWhenInvoiceIsExempt" 
		TaxCode	
			if (TaxExemptCode.Taxable)
				if(BillingInvoice.IsTaxEngine)
					TaxCode 			= Location.TaxCode
				if (TaxEntityRel.ThirdParty.InforTax
				and IsHSNSACCodeEnabled) 
				
					if (BillingInvoice.CustomerShipTo.TaxRegistrationType.Unregistered
					or  BillingInvoice.Customer.TaxRegistrationType.Unregistered)
						required
							"TaxCodeShouldBeEnteredForUnregisteredTaxTypeCustomer"	
					if (BillingInvoice.CustomerShipTo.ShipToAddress.Country entered
					and BillingInvoice.CustomerShipTo.ShipToAddress.Country.IsoCountryCode entered)
						if (BillingInvoice.CustomerShipTo.TaxRegistrationType.SpecialEconomicZone)
							default to HSNSACCode.ExportTaxCode
						if (BillingInvoice.CustomerShipTo.TaxRegistrationType.Registered)
							if (Location.PostalAddress.Country.IsoCountryCode = "IN")
								if (BillingInvoice.CustomerShipTo.ShipToAddress.Country.IsoCountryCode = "IN")
									if (Location.PostalAddress.StateProvince entered
									and BillingInvoice.CustomerShipTo.ShipToAddress.StateProvince entered)
										if (Location.PostalAddress.StateProvince = BillingInvoice.CustomerShipTo.ShipToAddress.StateProvince)
											default to HSNSACCode.IntrastateTaxCode
										else
											default to HSNSACCode.InterstateTaxCode
								else
									default to HSNSACCode.ExportTaxCode
					else
					if (BillingInvoice.Customer.PostalAddress.Country entered
					and BillingInvoice.Customer.PostalAddress.Country.IsoCountryCode entered)
						if (BillingInvoice.Customer.TaxRegistrationType.SpecialEconomicZone)
							default to HSNSACCode.ExportTaxCode
						if (BillingInvoice.Customer.TaxRegistrationType.Registered)
							if (Location.PostalAddress.Country.IsoCountryCode = "IN")
								if (BillingInvoice.Customer.PostalAddress.Country.IsoCountryCode = "IN")
									if (Location.PostalAddress.StateProvince entered
									and BillingInvoice.Customer.PostalAddress.StateProvince entered)
										if (Location.PostalAddress.StateProvince = BillingInvoice.Customer.PostalAddress.StateProvince)
											default to HSNSACCode.IntrastateTaxCode
										else
											default to HSNSACCode.InterstateTaxCode
								else
									default to HSNSACCode.ExportTaxCode	
					required
						"TaxCodeShouldBeEnteredAsHSN_/SACCodeFlagIsEnabled"
						
				if (not LineType.Special)
					default to ItemLocation.SellTaxCode
				default to BillingInvoice.TaxCode
			else
				initialize TaxCode
			
			if (TaxExemptCode not entered
			and (LineType.Inventoried
			or  LineType.NonStock))
				if (TaxEntityRel.ThirdParty.VertexOSeries
				and TaxExemptCode.Taxable)
					default to ItemLocation.SellTaxCode	
					
			if (TaxExemptCode.Taxable)	
				required 
					"TaxCodeIsRequired"	
		
		FinalInvoice
			if (IsBillingInvoiceSource)	
				default to true
			  
		UnitPrice
			if (LineType.Inventoried
			or	LineType.NonStock)
				if (EnteredPrice entered)
					UnitCostCurrencyExchange.ToCurrency 			 = Company.Currency
					UnitCostCurrencyExchange.EnteredCurrencyRate 	 = BillingInvoice.CurrencyRate
					UnitPrice										 = UnitCostCurrencyExchange.OutputCurrencyUnitCost
		
		PriceInSellingUnitOfMeasure
			if (LineType.Inventoried
			or	LineType.NonStock)
				if (EnteredPrice entered)			
					PriceInSellingUnitOfMeasure	= PriceBaseAverage			
		
		SellingPrice
			if  ((not NoCharge)
			and  (LineType.Inventoried
			or	  LineType.NonStock))
				if (EnteredPrice entered)		
					SellingPrice = PriceBillAverage
		    else
		    	SellingPrice = EnteredPrice
		
		HSNSACCode
    		if (IsHSNSACCodeEnabled)
    			if (IsBillingInvoiceFromCustomerOrder)
    				default to BillingInvoice.CustomerOrderLineRel.HSNSACCode
    			else
    				default to Item.HSNSACCode
    			required	
    				"HSN_/SACCodeIsRequired"
    		else
    			cannot be entered
    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
    				
    		if (!BillingInvoice.Status.Unreleased)
				cannot be changed
					"InvoiceIsReleased;CannotChangeHSN_/SACCode"
					
		UNSPSCCode
			if (IsLineType)
				default to Item.UNSPSCCode
		
		PointOfTitleTransfer
			force default to BillingInvoice.PointOfTitleTransfer
		
		ShipTerm
			if (action type.Create)
				default to BillingInvoice.ShipTerm
				
	Actions 	
		ProcessOneSourceForLine is a Set Action
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmCompany				is a BillingCompany
				PrmBillingInvoice		is a BillingInvoice
				PrmReleasePrinted		is Boolean
			Local Fields
				AsyncId					is a AsyncActionRequest
			Sort Order
				Company
				BillingInvoice
				BillingInvoiceLine
			Instance Selection
				where (Company		 = PrmCompany
				and	   BillingInvoice = PrmBillingInvoice
				and    TaxExemptCode.Taxable)
			Action Rules
				BillingInvoice Set Rules
					Entrance Rules
						if (SingleCallToOneSource)
							AsyncId = current async action request id
					Exit Rules
						invoke ProcessOneSourceForAOC BillingInvoiceAddOnCharge
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmCompany			= Company
							invoked.PrmBillingInvoice	= BillingInvoice
							invoked.PrmReleasePrinted   = PrmReleasePrinted

						if (SingleCallToOneSource
						and BillingInvoice.DerivedAOCCount not entered)
							initialize CalculateTax.UniqueLineNumber
							CalculateTax.DeliveryTerms						= BillingInvoice.ShipTerm
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= BillingInvoice.UniqueID
							CalculateTax.UserElementLevel					= "L"
							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
							
							invoke UpdateBLTaxAmounts TaxLineItem
								run after AsyncId
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= BillingInvoice.InvoiceNumber
								invoked.PrmInvoicePrefix			= BillingInvoice.InvoicePrefix
								invoked.PrmReleasePrinted 			= PrmReleasePrinted
								invoked.PrmUniqueIdOfRelatedObject  = BillingInvoice.UniqueID

				Instance Rules	
					include CalculateLineTax
					include LoadOneSourceInputFields
					if (AllowMultipleSalesAccountEntry)
						LocalCreateTaxLineItems = true
					include CreateTaxLineItemAndUserFields
		
		ProcessVertexForLine is a Set Action
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmCompany				is a BillingCompany
				PrmBillingInvoice		is a BillingInvoice
				PrmReleasePrinted		is Boolean
			Local Fields
				AsyncId					is a AsyncActionRequest
			Sort Order
				Company
				BillingInvoice
				BillingInvoiceLine
			Instance Selection
				where (Company		 = PrmCompany
				and	   BillingInvoice = PrmBillingInvoice
				and    TaxExemptCode.Taxable)
			Action Rules
				BillingInvoice Set Rules
					Entrance Rules
						if (SingleCallToVertex)
							AsyncId = current async action request id
					Exit Rules
						invoke ProcessVertexForAOC BillingInvoiceAddOnCharge
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmCompany			= Company
							invoked.PrmBillingInvoice	= BillingInvoice
							invoked.PrmReleasePrinted   = PrmReleasePrinted

						if (SingleCallToVertex
						and BillingInvoice.DerivedAOCCount not entered)
							initialize CalculateTax.UniqueLineNumber
							CalculateTax.POATaxCode							= BillingInvoice.BillingProcessLevel.TaxCode
							CalculateTax.POAAddress							= BillingInvoice.BillingProcessLevel.CompanyAddress
							CalculateTax.DeliveryTerms						= BillingInvoice.ShipTerm
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= BillingInvoice.UniqueID
							CalculateTax.UserElementLevel					= "L"
							CalculateTax.InputReturnVertexTaxIn		        = "D"
							CalculateTax.TaxCode							= TaxCode
							CalculateTax.AppendToJurisFile					= true					
							CalculateTax.JurisdictionResultsKey				= "BL:" + Company + ":" + BillingInvoice + ":" + current timestamp
							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							invoke UpdateBLTaxAmounts TaxLineItem
								run after AsyncId
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= BillingInvoice.InvoiceNumber
								invoked.PrmInvoicePrefix			= BillingInvoice.InvoicePrefix
								invoked.PrmReleasePrinted 			= PrmReleasePrinted
								invoked.PrmUniqueIdOfRelatedObject  = BillingInvoice.UniqueID

				Instance Rules 
					include CalculateLineTax
					include LoadVertexGlobalInputFields
					include CreateTaxLineItemAndUserFields

		ThirdPartyTaxCallFromSalesAccount is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmUniqueID					is a UniqueID
				PrmSalesAmount				is a CurrencyAmount
				PrmSalesAccount				is like TransactionCodeBlock
				PrmDescription				is a Description
			Action Rules
				TransientPostingDate		= BillingInvoice.InvoiceDate
				if (TaxCode entered
				and not NoCharge)
					include CalculateTaxCommonInputParams
					CalculateTax.Location					= Location
					CalculateTax.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode
					if (PrmSalesAmount entered)
						LocalUniqueID						= PrmUniqueID
						LocalSalesAmount					= PrmSalesAmount
						LocalDescription					= PrmDescription
						LocalSalesAccount					= PrmSalesAccount
						include VertexFlexibleFields
						include LoadVertexGlobalInputFields
						include LoadOneSourceInputFields
						CalculateTax.Quantity				= 1
						CalculateTax.UnitCost 				= PrmSalesAmount
						CalculateTax.Function				= "C"
						CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
						CalculateTax.Description			= PrmDescription
						CalculateTax.TaxableAmount			= PrmSalesAmount
						LocalSequenceLineItemNumber			= true
						CalculateTax.TransactionType		= "S"
						CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
						CalculateTax.ThirdPartyFunction		= "I"
						if (IsOneSourceTax
						and TaxLineItemsForLineSalesAccountsRel not exists)
							include CreateTaxLineItems
						CalculateTax.CallingModule					= "BillingInvoiceLineSalesAccount"
						if (TaxEntityRel.ThirdParty.Sabrix)
							CalculateTax.UniqueLineNumber			= PrmUniqueID
						CalculateTax.UniqueIdOfRelatedObject		= PrmUniqueID
						LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"

		UpdateFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmTaxAmount		is an InternalAmount
			Action Rules
				round PrmTaxAmount to nearest BillingInvoice.DerivedRoundToDecimals
				TaxTotal += PrmTaxAmount

		UpdateLineTaxFromLineSalesAccount is an Instance Action
			restricted
			Parameters
				PrmTaxTotal		is an InternalAmount
			Action Rules
				TaxTotal += PrmTaxTotal

		CreateVertexTaxJournalFromBatch is an Instance Action
			restricted
			Action Rules
				if (TaxEntityRel.ThirdParty.VertexOSeries
				and not BillingInvoice.IsTaxEngine
				and not SingleCallToVertex)
					include CalculateTaxCommonInputParams
					if (CalculateTax.PaymentDate not entered)
						CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					CalculateTax.Function				= CalculateTax.Function.CalculateTax
					CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.TaxableAmount			= TaxableAmount
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.InputReturnVertexTaxIn	= "D"	
					include LoadVertexGlobalInputFields
					LocalSalesAccount 					= SalesAccount
					include VertexFlexibleFields
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
					if (AllowMultipleSalesAccountEntry)
						invoke ThirdPartyTaxCall BillingInvoiceLineSalesAccountRel
							invoked.PrmProcessTaxHistoryCall = true
					else
						include CreateTaxJournal


		NotifyOneSourceFromBatch is an Instance Action
			restricted
			Action Rules
				if (IsOneSourceTax
				and not SingleCallToOneSource)
					include CalculateTaxCommonInputParams
					if (CalculateTax.PaymentDate not entered)
						CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					CalculateTax.Function				= CalculateTax.Function.CalculateTax
					CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.TaxableAmount			= TaxableAmount
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.InputReturnVertexTaxIn	= "D"	
					CalculateTax.DontCreateLogFile		= true
					include LoadOneSourceInputFields
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
					if (AllowMultipleSalesAccountEntry)
						invoke ThirdPartyTaxCall BillingInvoiceLineSalesAccountRel
							invoked.PrmProcessTaxHistoryCall = true
					else
						include CreateTaxJournal

		Release is an Instance Action
			restricted
			Parameters
				PrmReleasePrinted	is Boolean
			Action Rules
				LocalGeneralLedgerSystemCode = "BL"
				if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
				if (COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemCodeForAccount<COGSAccount.GeneralLedgerChartAccount.Account>"
				if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
			
				if (PrmReleasePrinted
				and not BillingInvoice.IsTaxEngine
				and !((TaxEntityUsesVertex
				or  IsOneSourceTax)
				and AllowMultipleSalesAccountEntry))
					include CreateTaxJournal

			Exit Rules
				if (TaxCode entered and not NoCharge
				and (not TaxEntityRel.ThirdParty.Sabrix or TaxableAmount entered))
					if (BillingInvoice.IsTaxEngine)
						if (BillingInvoice.BillingInvoiceSource.Shipment)
							LocalWarehouseShipment = WarehouseShipment
							for each TaxEngineTaxDetailRel
								LocalTaxCode			= each.TaxCode
								include CreateBillingInvoiceLineTaxForTaxEngine
						else
						if (BillingInvoice.BillingInvoiceSource.Return)
							LocalCustomerOrderReturn = CustomerOrderReturnRel.CustomerOrderReturn
							for each TaxEngineTaxDetailRel
								LocalTaxCode			= each.TaxCode
								include CreateBillingInvoiceLineTaxForTaxEngine

						else
						if (BillingInvoice.BillingInvoiceSource.Manual)
							for each InvoiceTaxEngineTaxDetailRel
								if (BillingInvoice.BillingInvoiceType.Credit)			
									if (each.CancelSequence entered)
										LocalTaxCode			= each.TaxCode
										include CreateBillingInvoiceLineTaxForTaxEngine
								else
									if (each.CancelSequence not entered)
										LocalTaxCode			= each.TaxCode
										include CreateBillingInvoiceLineTaxForTaxEngine

					else
					if (not SingleCallToOneSource
					and not SingleCallToVertex)
						LocalDontCreateTaxLog = true
						include CalculateInvoiceLineTax					
						if (!(IsInvoicingAndTaxCalculation
						and BillingInvoice.IsManualOrRecurringSource))
							for each CalculateTax.TaxTable.TaxTableOutput
								if (each.TaxAmount entered)
									invoke Create BillingInvoiceLineTax
										invoked.Company													= Company
										invoked.BillingInvoice											= BillingInvoice
										invoked.ProductTaxCategory										= CalculateTax.ProductTaxCategory
										invoked.BillingInvoiceLineTax.BillingInvoiceLine 				= BillingInvoiceLine
										invoked.LocalCurrencyTable										= BillingInvoice.CurrencyTable
										invoked.LocalFromCurrency										= BillingInvoice.Currency
										invoked.LocalExchangeDate										= BillingInvoice.InvoiceDate
										if (each.TaxPoint = "P")
											invoked.TaxAccount											= each.TaxOutputDueAccount
										else
											invoked.TaxAccount											= each.TaxOutputAccount	
										invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
										invoked.TaxRate													= each.TaxRate
										invoked.TaxableCurrencyAmount.TransactionAmount					= (each.TaxAmount5DP - LocalExcessTax)
										invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 			= Company.Currency
										invoked.TransactionTaxable.TransactionAmount					= each.TaxableAmount
										invoked.TransactionTaxable.BaseAmount.ToCurrency 				= Company.Currency
										invoked.TaxID													= each.TaxID
										invoked.BillingInvoiceLineTax.TaxLevel							= each.TaxLevel	
										if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
										and CalculateTax.SabrixReturnedTaxCode entered)
											LocalReceivableGeneralLedgerCode 							= CalculateTax.SabrixReturnedTaxCode
											constraint (LocalReceivableGeneralLedgerCodeRel exists)
												"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<Company>"
											invoked.TaxAccount											= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
						if (AllowMultipleSalesAccountEntry)
							if (TaxEntityUsesVertex
							or IsOneSourceTax)
								initialize TaxTotal
								invoke ThirdPartyTaxCall BillingInvoiceLineSalesAccountRel
									invoked.PrmCreateLineTaxes 			= true
									invoked.PrmProcessTaxHistoryCall	= PrmReleasePrinted

				for each BillingInvoiceAddOnChargeRel
					invoke Release each			
						invoked.PrmReleasePrinted = PrmReleasePrinted
			
		GroupPricing is an Instance Action
			restricted
			Parameters
				PrmCurrency			is like Currency
			Action Rules
				initialize EnteredPrice
				
				include CalculatePricing
				
				if (Company.CurrencyBasedPricing)
					PrmCurrency			= BillingInvoice.Currency 
				else
					PrmCurrency			= Company.Currency		
					
				LocalCurrency			= PrmCurrency
				
				if (Company.LocationBasedPricing)
					LocalLocation = Location
				else
					initialize LocalLocation
					
				if (PriceListContractRel exists)
					LocalPriceBase	= PriceListContractRel.BaseName
				else
				if (PriceListPromotionRel exists)
					LocalPriceBase = PriceListPromotionRel.BaseName
	  			else
	  				LocalPriceBase	= PriceListRel.BaseName
  				
				constraint(PriceBaseItemRel exists)
					"BasePriceDoesNotExistForInvoiceLine<BillingInvoiceLine>"
					
				if (PriceStatus.AmalgamatedGroupPricing)
        			constraint (!NoCharge) 		
        				"No-chargeItemCannotHaveAmalgamatedPricing"	
				include CalculateGroupPricing
				include CalculateLineGrossAmountAndLineNetAmount
				include	CalculateOpenAmount

		CreateFromBatch is a Create Action
			restricted
			Entrance Rules
				FromBatch            = true
				LocalCurrencyTable			= BillingInvoice.CurrencyTable
				LocalCreateFromBatch = true
			Action Rules
				if (EnteredPrice entered)
					LocalEnteredPriceCheck = true
			Exit Rules
				if (!TransientSkipExitRules)
					include CreateExitRules  
					
				if (AllowMultipleSalesAccountEntry)
					invoke Create BillingInvoiceLineSalesAccount
						invoked.Company				= Company
						invoked.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
						invoked.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
						invoked.BillingInvoiceLine	= BillingInvoiceLine
						invoked.SalesAccount		= SalesAccount
						invoked.Description			= Description
						invoked.SalesAmount			= ExtentedAmount
						invoked.LocalFirstSalesAccountForLine = true
						
				if (TransientSkipExitRules)
					include CalculateLineGrossAmountAndLineNetAmount
					include CalculateLineTax
					include CalculateOpenAmount		
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat

		FastCreateBillingInvoiceLine   is a Create Action
			restricted
			bypass field rules
			Entrance Rules
				LocalCurrencyTable			= BillingInvoice.CurrencyTable
			Exit Rules
				include CreateExitRules
			
			
		Create is a Create Action
			valid when (BillingInvoice.Status.Unreleased)
			Entrance Rules
				LocalCurrencyTable			= BillingInvoice.CurrencyTable
			Action Rules
				if (PriceListContractRel exists)
					LocalPriceBase	= PriceListContractRel.BaseName
				else
				if (PriceListPromotionRel exists)
					LocalPriceBase = PriceListPromotionRel.BaseName
		  		else
		  			LocalPriceBase	= PriceListRel.BaseName
				if (!Company.CurrencyBasedPricing)
					LocalCurrency			= Company.Currency
				else
					LocalCurrency			= BillingInvoice.Currency	
				if (Company.LocationBasedPricing)
					LocalLocation = Location
				else
					initialize LocalLocation
				if (EnteredPrice entered)
					LocalEnteredPriceCheck = true
				include CalculatePricing
			Exit Rules
				increment BillingInvoice.LastLineNumber by 1
				include CreateExitRules
				if (AllowMultipleSalesAccountEntry)
					if (LineSalesAccountForOriginalInvoiceRel exists)
						for each LineSalesAccountForOriginalInvoiceRel
							invoke Create BillingInvoiceLineSalesAccount
								assign result to BillingInvoiceLineSalesAccountView
								fill in fields from each
								invoked.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
								invoked.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
								invoked.BillingInvoiceLine				= BillingInvoiceLine
								if (!LocalFirstSalesAccountForLine)
									LocalFirstSalesAccountForLine 			= true
									invoked.LocalFirstSalesAccountForLine	= true

									if (IsOneSourceTax
									and not SingleCallToOneSource
									and each.SalesAmount entered)
										LocalSalesAmount				= each.SalesAmount
										LocalDescription				= each.Description
										LocalSalesAccount				= each.SalesAccount
										LocalSequenceLineItemNumber		= true
										LocalCreateTaxLineItems			= true
							if (LocalCreateTaxLineItems
							and	TaxLineItemsForLineSalesAccountsRel not exists)
								LocalUniqueID					= BillingInvoiceLineSalesAccountView.UniqueID
								include CreateTaxLineItems
								initialize LocalCreateTaxLineItems
								CalculateTax.UniqueIdOfRelatedObject		= LocalUniqueID
								LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"

					else
						invoke Create BillingInvoiceLineSalesAccount
							assign result to BillingInvoiceLineSalesAccountView
							invoked.Company							= Company
							invoked.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
							invoked.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
							invoked.BillingInvoiceLine				= BillingInvoiceLine
							invoked.SalesAccount					= SalesAccount
							invoked.Description						= Description
							invoked.SalesAmount						= ExtentedAmount
							invoked.LocalFirstSalesAccountForLine 	= true

						if (IsOneSourceTax
						and not SingleCallToOneSource
						and ExtentedAmount entered)
							LocalUniqueID					= BillingInvoiceLineSalesAccountView.UniqueID
							LocalSalesAmount				= ExtentedAmount
							LocalDescription				= Description
							LocalSalesAccount				= SalesAccount
							LocalSequenceLineItemNumber		= true
							if (TaxLineItemsForLineSalesAccountsRel not exists)
								include CreateTaxLineItems
							CalculateTax.UniqueIdOfRelatedObject		= LocalUniqueID
							LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>"

				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat

		InterfaceCreate is a Create Action
			valid when (BillingInvoice.Status.Unreleased)
			Entrance Rules
				LocalCurrencyTable			= BillingInvoice.CurrencyTable
			Action Rules
				if (PriceListContractRel exists)
					LocalPriceBase	= PriceListContractRel.BaseName
				else
				if (PriceListPromotionRel exists)
					LocalPriceBase = PriceListPromotionRel.BaseName
		  		else
		  			LocalPriceBase	= PriceListRel.BaseName
				if (!Company.CurrencyBasedPricing)
					LocalCurrency			= Company.Currency
				else
					LocalCurrency			= BillingInvoice.Currency	
				if (Company.LocationBasedPricing)
					LocalLocation = Location
				else
					initialize LocalLocation
				if (EnteredPrice entered)
					LocalEnteredPriceCheck = true
				include CalculatePricing			
			Exit Rules
				increment BillingInvoice.LastLineNumber by 1
				include CalculateLineGrossAmountAndLineNetAmount
				include CalculateLineTax
				include CalculateOpenAmount
				if (AllowMultipleSalesAccountEntry)
					invoke Create BillingInvoiceLineSalesAccount
						invoked.Company							= Company
						invoked.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
						invoked.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
						invoked.BillingInvoiceLine				= BillingInvoiceLine
						invoked.SalesAccount					= SalesAccount
						invoked.Description						= Description
						invoked.SalesAmount						= ExtentedAmount
						invoked.LocalFirstSalesAccountForLine 	= true


		Update is an Update Action
			valid when (BillingInvoice.Status.Unreleased)
			Entrance Rules
				LocalCurrencyTable			= BillingInvoice.CurrencyTable
			Action Rules
				if (PriceListContractRel exists)
					LocalPriceBase	= PriceListContractRel.BaseName
				else
				if (PriceListPromotionRel exists)
					LocalPriceBase = PriceListPromotionRel.BaseName
		  		else
		  			LocalPriceBase	= PriceListRel.BaseName
				if (!Company.CurrencyBasedPricing)
					LocalCurrency			= Company.Currency
				else
					LocalCurrency			= BillingInvoice.Currency	
				if (Company.LocationBasedPricing)
					LocalLocation = Location
				else
					initialize LocalLocation
					
				if (EnteredPrice	= old EnteredPrice
				and !PriceStatus.ManualOverrideOfPricing)
					initialize EnteredPrice

				if (EnteredPrice entered)
					LocalEnteredPriceCheck = true
				
				if (IsUpdateLocationBasedPricing
				or  IsUpdateQuantityChanged)
					include CalculatePricing
				
			Exit Rules	
				LocalTaxCallForLine = true
				include CalculateLineGrossAmountAndLineNetAmount
				include CalculateLineTax
				include CalculateOpenAmount
				if (PriceStatus.ManualOverrideOfPricing)
					invoke Delete BillingInvoiceLineMultipleUOMRel
				invoke UpdateDiscountSpread BillingInvoice
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat

		Delete is a Delete Action
            valid when (BillingInvoice.Status.Unreleased)
			Entrance Rules
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					LocalRecalculateTaxes = true
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
				
                constraint (BillingInvoice.Status.Unreleased)
                    "CannotDeleteInvoiceLineStatusIsReleased"
				invoke Delete BillingInvoiceAddOnChargesRel	
				invoke UpdateBillingInvoice BillingInvoice
					if (LineType.Inventoried)	
						invoked.PrmLineTypeInventoried					= true
					invoked.PrmLineNetAmount							= LineNetAmount
					invoked.PrmLineDelete                               = true
					if (IsBillingInvoiceSource)
						invoked.PrmOpenOrderAmount					 	= LineNetAmount.TransactionAmount
					if (OrderDiscount)
						invoked.PrmDiscountable					 		= LineNetAmount.TransactionAmount
						invoked.PrmTaxableTotal					 		= TaxableAmount
					if (TaxExemptCode.Taxable)
						invoked.PrmLineTaxable                          = true
				decrement BillingInvoice.LastLineNumber by 1
				invoke Delete BillingInvoiceLinesTaxRel
				invoke Delete BillingInvoiceLineMultipleUOMRel
			Action Rules
				include CalculateOpenAmount	
				if (LocalRecalculateTaxes
				and BillingInvoiceAddOnChargeByTaxCodeRel exists)
					LocalLineTaxableAmount		= sum OtherLinesByTaxCodeRel.TaxableAmount
					invoke UpdateBillingInvoiceLineTax first BillingInvoiceAddOnChargeByTaxCodeRel
						invoked.PrmLinesAmount 	= LocalLineTaxableAmount
					invoke UpdateTaxTotal BillingInvoice
			Exit Rules
				invoke UpdateDiscountSpread BillingInvoice
				
		UpdateTaxCalculation is an Instance Action
			restricted
			Parameters
				PrmExcessDiscount is an InternationalAmount
			Action Rules
				if (!BillingInvoice.IsTaxEngine)
					LocalExcessDiscount = PrmExcessDiscount
					initialize TaxTotal
					initialize TaxableAmount
					initialize AllocatedDiscount
					include CalculateLineGrossAmountAndLineNetAmount
					include CalculateLineTax
				
		CalculateFullTaxTotal is an Instance Action
			restricted
			Parameters
				PrmExcessTax is an InternationalAmount
			Action Rules
				if (!BillingInvoice.IsTaxEngine)
					if (not NoCharge)
						if (PrmExcessTax entered)
							TaxTotal -= PrmExcessTax
							LocalExcessTax = PrmExcessTax						
						else
							initialize LocalExcessTax
							initialize LocalTaxTotal
							include CalculateTaxCommonInputParams
							CalculateTax.Quantity					= Quantity
							CalculateTax.Location					= Location
							if (BillingInvoice.IsCustomerOrder)
								CalculateTax.PostalAddress			= BillingInvoice.CustomerOrder.BillPostalAddress
							else
							if (BillingInvoice.IsBillToEnterd)
								CalculateTax.PostalAddress 			= BillingInvoice.BillTo.PostalAddress
							else
								CalculateTax.PostalAddress			= BillingInvoice.Customer.PostalAddress	
							CalculateTax.FromTaxCode				= BillingInvoice.Location.TaxCode
							CalculateTax.FromPostalAddress			= BillingInvoice.Location.PostalAddress
							CalculateTax.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode
							



						
							if ((BillingInvoice.BillingInvoiceSource.Manual
							or 	BillingInvoice.BillingInvoiceSource.Shipment)
							and BillingInvoice.TermsCode entered
							and IsTaxAfterTerms)
								CalculateTerms.TransactionDate			= BillingInvoice.InvoiceDate
								CalculateTerms.TransactionAmount 		= TaxableAmount		
								LocalTermsCode							= BillingInvoice.TermsCode
								LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
								constraint (CalculateTerms.OutputErrorNumber not entered)
									"<CalculateTerms.OutputErrorMessage>"
								if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered)
									LocalTermsDiscount					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount	
									LocalTermsDueDate					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
			
							CalculateTax.Function						= CalculateTax.Function.CalculateTax
							CalculateTax.ThirdPartyFunction				= CalculateTax.ThirdPartyFunction.Calculate
							CalculateTax.TransactionType				= CalculateTax.TransactionType.Sale
							CalculateTax.TaxableAmount					= TaxableAmount
							if (LocalTermsDueDate entered)
								CalculateTax.PaymentDate				= LocalTermsDueDate
							else
								CalculateTax.PaymentDate				= BillingInvoice.InvoiceDate
							CalculateTax.NumberOfDecimals				= BillingInvoice.CurrencyNumberOfDecimals

							include LoadVertexGlobalInputFields 
							include LoadOneSourceInputFields

							if (not SingleCallToOneSource
							and not SingleCallToVertex)
								LocalSalesAccount = SalesAccount
								include VertexFlexibleFields
								include CreateTaxLineItemAndUserFields
								CalculateTax.UniqueIdOfRelatedObject		= UniqueID
								LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
								constraint (CalculateTax.OutputErrorNumber not entered) 
									"<CalculateTax.OutputErrorMessage>"

								for each CalculateTax.TaxTable.TaxTableOutput
									LocalTaxTotal  += each.TaxAmount5DP
									round LocalTaxTotal to nearest BillingInvoice.DerivedRoundToDecimals

								if (TaxEntityRel.ThirdParty.Sabrix
								and TaxEntityRel.DelayTaxProcessing)
									if (CalculateTax.OutputTotalTaxAmount not entered)
										initialize TaxableAmount
									else
										TaxTotal = LocalTaxTotal
								else
									invoke StoreCalculatedTax BillingInvoice
										invoked.PrmCalculatedTax = LocalTaxTotal

		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge BillingInvoiceCommentsRel
				invoke Purge BillingInvoiceLineLotSerialBinRel
				invoke Purge BillingInvoiceLineMultipleUOMRel
				invoke Purge BillingInvoiceAddOnChargesRel
				invoke Purge BillingInvoiceLineAttachmentRel
				
				
		

		BLPriceOverrideAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationRel.Enable)
	  				if(FSMBODConfigurationDetailRel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationRel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= BLPriceOverrideXML	
							invoked.PrmDescription	= BLPriceOverrideDescription
							invoked.PrmBODID		= DerivedBODID



		FrontEndSplitSalesAccounts	is an Instance Action
			valid when (AllowCashFrontEndSplit)
			Action Rules
				invoke FrontEndSplitDistributions BillingInvoiceLineSalesAccount in foreground
					invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.PrmCompany						= Company
					invoked.PrmBillingInvoice				= BillingInvoice
					invoked.PrmInvoiceLine					= BillingInvoiceLine

		DeleteFrontEndSplitSalesAccounts is an Instance Action
			valid when(HasFrontEndSplitDistributions)
			Action Rules
				invoke DeleteFrontEndSplitDistributions BillingInvoiceLineSalesAccount
					invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.PrmCompany						= Company
					invoked.PrmBillingInvoice				= BillingInvoice
					invoked.PrmInvoiceLine					= BillingInvoiceLine

		FrontEndSplitAllLinesSalesAccounts is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a BillingCompany
				PrmBillingInvoice						is a BillingInvoice
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBillingInvoice
					required
			Instance Selection
				where (Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and Company = PrmCompany.Company
				and BillingInvoice = PrmBillingInvoice
				and AllowCashFrontEndSplit)
			Action Rules
				Empty Set Rules
				
				Instance Rules
					invoke FrontEndSplitSalesAccounts

		DeleteAllLinesFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a BillingCompany
				PrmBillingInvoice						is a BillingInvoice
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBillingInvoice
					required
			Instance Selection
				where (Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and Company = PrmCompany.Company
				and BillingInvoice = PrmBillingInvoice
				and HasFrontEndSplitDistributions)
			Action Rules
				Empty Set Rules

				Set Rules
					Exit Rules

				Instance Rules
					invoke DeleteFrontEndSplitSalesAccounts
