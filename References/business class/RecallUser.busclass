RecallUser is a BusinessClass
	owned by recall
	prefix is RMRU
	representative image is RecallUser.Employee.ResourcePicture.File
		missing image is random background
			foreground text is "<RecallUser.Employee.Name.Initials>"

	Ontology
		symbolic key is RecallUser

	Persistent Fields
		Reference1			is a Reference
		Reference2			is a Reference
		RecallGroup
		ContactTitle				  is a Description
			default label is "JobTitle"
		Coordinator					  is Boolean
		ProposedItemReviewer          is Boolean
		ResponderAndWatcher           is Boolean
			default label is "Watcher_andResponder"
		Active						  is Boolean
		Supervisor					  is a RecallUser
		DefaultCompany				  is an InventoryCompany
			disable surrogates
		DefaultLocation			  	  is an InventoryLocation
		DefaultReqLoc				  is an RequestingLocation
		DefaultProcLevel			  is a PayablesProcessLevel
		RecallUserPostalAddress		  is a PostalAddressV2	
			holds pii
	
	Local Fields
		LocalRecallGroup			  is a RecallGroup
		LocalRecallNotice			  is like RecallNotice
		LocalRecallUser				  is a RecallUser
		LocalRecallNoticeTask		  is a RecallNoticeTask view
		LocalRecallNoticeTaskQuestion is a RecallNoticeTaskQuestion view
		LocalRecallOrganization		  is like RecallOrganization
		LocalEscalationDate           is TimeStamp
		LocalReminderDate			  is TimeStamp
		LocalPeriod					  is Numeric size 5
		LocalToUser                   is like RecallUser
		LocalNotice                   is like RecallNotice

	Context Fields
		RecallNoticeContext 		  is a RecallNotice
		AnalysisDateRange   		  is a DateRange
		RecallReport
		RecallReportPeriod
				
	Derived Fields
    	
    	RecallUserName is a DerivedField
			type is Alpha 101		
			default label is "Name"
			return RecallUser.FirstLastName

		CreateMessage is a LabelField
			restricted
			"CreateItemLifecycleManagementUser"
		RecallUserMessage		is a LabelField
			restricted
			"<RecallUser.Employee.Name.PreferredFirstAndLastName>'sItemLifecycleManagementUserProfile"

		DerivedFormTitle is a DerivedField
			type is MessageField
			if (RecallUserExists)
				return RecallUserMessage
			else
				return CreateMessage

		ActiveMessage is a MessageField
			restricted
			"Active"

		InactiveMessage is a MessageField
			restricted
			"Inactive"

		DerivedStatusDisplay is a DerivedField
			type is Alpha size 10
			default label is "Status"
			if (Active)
				return ActiveMessage
			else
				return InactiveMessage

    	AgentKey is a StringField
    		type is Alpha size 50
    		restricted
    		HROrganization
    		", "
    		RecallUser
    	
		Period1TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 1
			return (instance count of LocalPeriodTaskRel)
			
		Period2TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 2
			return (instance count of LocalPeriodTaskRel)
			
		Period3TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 3
			return (instance count of LocalPeriodTaskRel)
			
		Period4TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 4
			return (instance count of LocalPeriodTaskRel)
			
		Period5TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 5
			return (instance count of LocalPeriodTaskRel)
			
		Period6TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 6
			return (instance count of LocalPeriodTaskRel)
			
		Period7TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 7
			return (instance count of LocalPeriodTaskRel)
			
		Period8TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 8
			return (instance count of LocalPeriodTaskRel)
			
		Period9TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 9
			return (instance count of LocalPeriodTaskRel)
			
		Period10TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 10
			return (instance count of LocalPeriodTaskRel)
			
		Period11TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 11
			return (instance count of LocalPeriodTaskRel)
			
		Period12TaskCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 12
			return (instance count of LocalPeriodTaskRel)
			
		AnyPeriodTaskCount is a ComputeField
			type is Numeric 5
			default label is "TotalTasksAllPeriods"
			(instance count of AnyPeriodTaskRel)
			
		AnyPeriodTaskPercent is a ComputeField
			type is Percent 3.0
			restricted
			(AnyPeriodTaskCount / RecallGroup.AnyPeriodTaskCount)
				
		NameAndCount is a DerivedField
			type is like Description
			return RecallUserName + " (" + AnyPeriodTaskCount + ")"
			
		Period1NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 1
			return (instance count of LocalPeriodNoticeRel)
			
		Period2NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 2
			return (instance count of LocalPeriodNoticeRel)
			
		Period3NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 3
			return (instance count of LocalPeriodNoticeRel)
			
		Period4NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 4
			return (instance count of LocalPeriodNoticeRel)
			
		Period5NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 5
			return (instance count of LocalPeriodNoticeRel)
			
		Period6NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 6
			return (instance count of LocalPeriodNoticeRel)
			
		Period7NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 7
			return (instance count of LocalPeriodNoticeRel)
			
		Period8NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 8
			return (instance count of LocalPeriodNoticeRel)
			
		Period9NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 9
			return (instance count of LocalPeriodNoticeRel)
			
		Period10NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 10
			return (instance count of LocalPeriodNoticeRel)
			
		Period11NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 11
			return (instance count of LocalPeriodNoticeRel)
			
		Period12NoticeCount is a DerivedField
			type is Numeric 5
			LocalPeriod = 12
			return (instance count of LocalPeriodNoticeRel)
			
		AnyPeriodNoticeCount is a ComputeField
			type is Numeric 5
			default label is "TotalNoticesAllPeriods"
			(instance count of AnyPeriodNoticeRel)
			
		NameAndNoticeCount is a DerivedField
			type is like Description
			restricted
			return RecallUserName + " (" + AnyPeriodNoticeCount + ")"
			
		ItemProposalLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallResponder navigation is ItemProposalNavigation text is \"here\" session key RecallGroup is RecallGroup)>"

	Field Rules
		RecallGroup
			required
		
			constraint (RecallGroup.FinanceEnterpriseGroup.HROrganization = HROrganization)
				"FinanceEnterpriseGroupAssociatedWithRecallGroupDoesNotUseEnteredHROrganization"

		RecallUser
			constraint (RecallUser.EmployeeWorkEmailAddress entered)
				"EmployeeWorkEmailAddressIsRequired"

		Active
            initial value is true
            default to true

		DefaultCompany
			constraint (DefaultCompany.ItemGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization = HROrganization)
				"Company<DefaultCompany>IsNotDefinedForRecallGroup"
   				
			if (DefaultLocation entered)
				constraint (InventoryLocationRel exists)
					"LocationDoesNotExistForThisCompany"
				constraint (InventoryLocationRel.Status.Active)
					"LocationMustBeActive"
			if (DefaultReqLoc entered)
				constraint (RequestingLocationRel exists)
					"RequestingLocationDoesNotExistForThisCompany"
			if (DefaultProcLevel entered)
				constraint (ProcessLevelRel exists)
					"ProcessLevelDoesNotExistForThisCompany"
		
		RecallUserPostalAddress
		
		Supervisor
		
			constraint (Supervisor != RecallUser)
				"UserAndSupervisorCannotBeTheSame"
				
	Conditions
		CanAddItemReview
			restricted
			when (RecallNoticeContext.Status.Pending
			and   !RecallNoticeContext.ApprovedItemProposal)
		
		IsRecallCoordinator
			when (Coordinator)
			
		HasOpenTasks	
			restricted
			when (OwnerChangeTaskRel exists)
		
		HasCoordinatorNotices
			restricted
			when (CoordinatorNoticesRel exists)
		
		IsItemReviewer
			when (ProposedItemReviewer)
		
		IsActiveItemReviewer
			restricted
			when (Active
			and   IsItemReviewer)

		ActiveResponderAndWatcher
			restricted
			when (Active
			and   ResponderAndWatcher)

		HasItemProposalsToReview
			restricted
			when (MyItemProposalsRel exists)
		
		DefaultItemProposalInstructionsExist
			restricted
			when (RecallGroup.DefaultItemProposalInstructions entered)
		
		RecallUserExists
			when (RecallUser exists)
			
		OrganizationsExist
			when (OrganizationUserRel exists)
			
		HasSubordinates
			when (SubordinateRel exists)

		MonitoringTasks
			when (IsRecallCoordinator
			or    HasSubordinates)
			
		AgentsWithEmailRelExists
			when (AgentsWithEmailRel exists)
			
	Attach Rules
		constraint (Active)
			"UserIsInactive"
	
	Relations
    	SameTaskOwnerRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwner
    			related.RecallGroup		= RecallGroup
    			related.RecallNotice	= LocalRecallNotice
    			related.Owner			= RecallUser
    	
		AnyTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser

    	OwnerTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser
    		Instance Selection
				where (related.Status.Accepted
				or     related.Status.Completed)
    	    	
    	OpenActiveTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser
    		Instance Selection
    			where (related.RecallNotice.Status.Active
    			and    related.TaskIsOpen
				and    related.DueDate 	< LocalReminderDate)

    	OwnerChangeTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser
			Instance Selection
				where (related.TaskCanBeReassigned)	

		NewOwnerTaskRel		
			one-to-one relation to RecallNoticeTask
			Field Mapping uses ByOwnerNotice
				related.RecallGroup 	= RecallGroup
				related.Owner           = LocalToUser	
				related.RecallNotice    = LocalNotice	

		RecallNotificationRel
    		one-to-one relation to RecallNotification
    		Field Mapping uses symbolic key
    			related.RecallGroup		= LocalRecallGroup			
				related.RecallNotice	= LocalRecallNotice			
				related.RecallUser		= LocalRecallUser
    	
    	SubordinateRel
			one-to-many relation to RecallUser
			Field Mapping uses BySupervisor
            	related.HROrganization	= RecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
            	related.Supervisor		= RecallUser

		EmployeeRel
			one-to-one relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization	= RecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				related.Employee		= RecallUser
        
    	MonitorTasksRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses symbolic key
    			related.RecallGroup		= RecallGroup
    		Instance Selection
    			where (related.RecallNotice.Status.Active
    			and    related.TaskIsOpen
				and    related.DueDate 							< LocalEscalationDate
    			and   (related.Owner.Supervisor					= RecallUser
    			or     related.RecallNotice.RecallCoordinator 	= RecallUser))

		OrganizationsForUserRel
			one-to-many relation to RecallOrganization
			Field Mapping uses symbolic key
				related.RecallGroup	= RecallGroup
			Instance Selection
				where ((related.ContextRecallUserIsResponder
				or     related.ContextRecallUserIsWatcher)
				and    related.Active)

		OrganizationsForReviewerRel
			one-to-many relation to RecallOrganization
			Field Mapping uses symbolic key
				related.RecallGroup	= RecallGroup
			Instance Selection
				where (related.ContextRecallUserIsReviewer
				and    related.Active)

		OrganizationUserRel
			one-to-many relation to RecallOrganizationUser
			Field Mapping uses ByUser
				related.RecallGroup	= RecallGroup
				related.RecallUser 	= RecallUser
				
		RecallOrganizationUserRel
			one-to-one relation to RecallOrganizationUser
			Field Mapping uses symbolic key
				related.RecallGroup			= LocalRecallGroup
				related.RecallOrganization	= LocalRecallOrganization
				related.RecallUser			= RecallUser

		ReassignOrganizationUserRel
			one-to-one relation to RecallOrganizationUser
			Field Mapping uses symbolic key
				related.RecallGroup			= RecallGroup
				related.RecallOrganization	= LocalRecallOrganization
				related.RecallUser			= LocalRecallUser

		RecallOrganizationsRel
			one-to-many relation to RecallOrganization
			Field Mapping uses symbolic key
				related.RecallGroup	= RecallGroup
			Instance Selection
				where (related.Active)

		CoordinatorNoticesRel
			one-to-many relation to RecallNotice
			Field Mapping uses ByCoordinator
				related.RecallGroup       = RecallGroup
				related.RecallCoordinator = RecallUser
				
		RecallNoticeOrganizationRel
			one-to-one relation to RecallNoticeOrganization
			Field Mapping uses symbolic key
				related.RecallGroup        = RecallGroup
				related.RecallNotice       = LocalRecallNotice
				related.RecallOrganization = LocalRecallOrganization

		ActiveCoordinatorNoticesRel
			one-to-many relation to RecallNotice
			Field Mapping uses ByCoordinator
				related.RecallGroup       = RecallGroup
				related.RecallCoordinator = RecallUser
			Instance Selection
				where (related.Status.Active)
				
		AnalyzeCoordinatorNoticesRel
			one-to-many relation to RecallNotice
			Field Mapping uses ByCoordinator
				related.RecallGroup       = RecallGroup
				related.RecallCoordinator = RecallUser
			Instance Selection
				where (related.Status.Active
				or     related.Status.Closed
				or     related.Status.NotApplicable
				or     related.Status.ClosedAsDuplicate)		
		
		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company							= DefaultCompany
				related.InventoryLocation				= DefaultLocation

		RequestingLocationRel
			one-to-one relation to RequestingLocation
			Field Mapping uses symbolic key
				related.Company							= DefaultCompany
				related.RequestingLocation				= DefaultReqLoc

		ProcessLevelRel
			one-to-one relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company							= DefaultCompany
				related.PayablesProcessLevel			= DefaultProcLevel

    	LocalPeriodTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser
    		Instance Selection
				where (related.RecallNotice.ApplicableRecallNotice
				and    related.RecallNotice.DerivedReleaseDate >= LocalPeriodRel.ReportFromDate
				and    related.RecallNotice.DerivedReleaseDate <= LocalPeriodRel.ReportThruDate) 

    	AnyPeriodTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwnerNotice
    			related.RecallGroup		= RecallGroup
    			related.Owner			= RecallUser
    		Instance Selection
				where (related.RecallNotice.ApplicableRecallNotice
				and    related.RecallNotice.DerivedReleaseDate >= RecallReport.ReportFromDate
				and    related.RecallNotice.DerivedReleaseDate <= RecallReport.ReportThruDate) 

    	LocalPeriodNoticeRel
    		one-to-many relation to RecallNotice
    		Field Mapping uses ByCoordinator
    			related.RecallGroup			= RecallGroup
    			related.RecallCoordinator	= RecallUser
    		Instance Selection
				where (related.RecallNotice.ApplicableRecallNotice
				and    related.RecallNotice.DerivedReleaseDate >= LocalPeriodRel.ReportFromDate
				and    related.RecallNotice.DerivedReleaseDate <= LocalPeriodRel.ReportThruDate) 

    	AnyPeriodNoticeRel
    		one-to-many relation to RecallNotice
    		Field Mapping uses ByCoordinator
    			related.RecallGroup			= RecallGroup
    			related.RecallCoordinator	= RecallUser
    		Instance Selection
				where (related.RecallNotice.ApplicableRecallNotice
				and    related.RecallNotice.DerivedReleaseDate >= RecallReport.ReportFromDate
				and    related.RecallNotice.DerivedReleaseDate <= RecallReport.ReportThruDate) 

		LocalPeriodRel
			one-to-one relation to RecallReportPeriod
			Field Mapping uses symbolic key
				related.RecallGroup             = RecallGroup
				related.RecallReport			= RecallReport
				related.RecallReportPeriod		= LocalPeriod
				
		RecallReportRel
			one-to-one relation to RecallReport
			Field Mapping uses symbolic key
				related.RecallGroup             = RecallGroup
				related.RecallReport			= RecallReport
				
		AgentsWithEmailRel is an Agent set
			Instance Selection
				where (related.BusinessObjectRef.BusinessClassName  = "RecallUser"
				and    related.KeyText                              = AgentKey
				and    related.ParentAgent.Actor.ContactInfo.EmailAddress entered)	
				
		MyItemProposalsRel
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByOwnerNotice
				related.RecallGroup		= RecallGroup
				related.Owner			= RecallUser
			Instance Selection
				where (related.OpenProposedItemTask)

    Sets
    				        						
		BySupervisor
			indexed
			Sort Order
				HROrganization
				Supervisor
				RecallUser
				    				        						
	Actions	
		Create is a Create Action
			Field Rules
				DefaultCompany
		   			if (DefaultLocation entered
		   			or  DefaultReqLoc entered
		   			or  DefaultProcLevel entered)
		   				required
		    				"CompanyIsRequired"
		    				
		    	Active
		    	
		    		default to true

			Action Rules
				constraint (Coordinator 			= true
				or          ResponderAndWatcher 	= true
				or          ProposedItemReviewer	= true)
					"MustSelectAtLeastOneOfResponderAndWatcher,Coordinator,_orProposedItemReviewer" 		
		   		
		Update is an Update Action
			Field Rules
				Coordinator
					if (Coordinator changed
					and !Coordinator)
						constraint (!CoordinatorNoticesRel exists)
							"CannotChangeCoordinatorDesignation;UserIsAssignedToNotice<first CoordinatorNoticesRel.RecallNotice>"
				DefaultCompany
		   			if (DefaultLocation entered
		   			or  DefaultReqLoc entered
		   			or  DefaultProcLevel entered)
		   				required
		    				"CompanyIsRequired"
		    				
				ResponderAndWatcher
					if (ResponderAndWatcher changed
					and ResponderAndWatcher = false)
						constraint (!AnyTaskRel exists)
							"CannotSetResponderAndWatcherToFalse;UserHasTasksAssigned"

		    	ProposedItemReviewer
		    		if (ProposedItemReviewer changed
		    		and ProposedItemReviewer = false)
		    			constraint (!HasItemProposalsToReview)
		    				"CannotSetProposedItemReviewerToFalse;UserHasOpenItemProposalReviews"
		    			constraint (RecallUser != RecallGroup.DefaultItemProposalReviewer)
							"CannotRemoveUserAsAnItemReviewer;UserIsDefaultItemProposalReviewerForItemLifecycleManagementGroup"	

		    	Active
		    	
		    		if (Active changed
		    		and Active = false)
		    			constraint (RecallUser != RecallGroup.DefaultItemProposalReviewer)
							"CannotInactivateUserThatIsDefaultItemProposalReviewerForItemLifecycleManagementGroup"		
						
						constraint (!OrganizationsExist)
		    				"CannotInactivateUserThatIsAssociatedWithOrganizations;RunReassignUserOrganizationsToAssociateADifferentUserWithThisUsersOrganizations"

			Action Rules
				constraint (Coordinator 			= true
				or          ResponderAndWatcher 	= true
				or          ProposedItemReviewer	= true)
					"MustSelectAtLeastOneOfResponderAndWatcher,Coordinator,_orProposedItemReviewer" 

		AttachToRecallOrganization is an Instance Action
			default label is "AttachUser"
			Parameters
				RecallGroup
				RecallOrganization
				RecallUser
				TypeOfUser			is Numeric size 2
					States
						Responder		value is 1
						Watcher			value is 2
				
			Parameter Rules
				RecallGroup
					required
				RecallOrganization
					required
				RecallUser
					required
				TypeOfUser
					required
			
			Action Rules
				LocalRecallGroup = RecallGroup
				LocalRecallOrganization = RecallOrganization
				constraint (!RecallOrganizationUserRel exists)
					"<RecallUser.RecallUserName>IsAlreadyAttachedToTheOrganization"
					
				invoke Create RecallOrganizationUser
					invoked.RecallGroup			= RecallGroup
					invoked.RecallOrganization	= RecallOrganization
					invoked.RecallUser			= RecallUser
					invoked.TypeOfUser			= TypeOfUser
		
		AttachReviewerToRecallOrganization is an Instance Action
			default label is "AttachReviewer"
			Parameters
				RecallGroup
				RecallOrganization
				RecallUser
					
			Parameter Rules
				RecallGroup
					required
				RecallOrganization
					required
				RecallUser
					required
			
			Action Rules
				LocalRecallGroup = RecallGroup
				LocalRecallOrganization = RecallOrganization
				constraint (!RecallOrganizationUserRel exists)
					"<RecallUser.RecallUserName>IsAlreadyAttachedToTheOrganization"
					
				invoke Create RecallOrganizationUser
					invoked.RecallGroup			= RecallGroup
					invoked.RecallOrganization	= RecallOrganization
					invoked.RecallUser			= RecallUser
					invoked.TypeOfUser			= 3 

		AttachToRecallNotification is an Instance Action
			valid when (!RecallNoticeContext.HistoricalRecallNotice) 
			default label is "AttachUser"
			
			Parameters
				RecallGroup
				RecallNotice
				RecallUser
				
			Parameter Rules
				RecallGroup
					required
				RecallNotice
					required
				RecallUser
					required
			
			Action Rules
				constraint (!RecallNotice.HistoricalRecallNotice)
					"CanOnlyAttachUserWhenNoticeIsNotInAHistoricalStatus"
					
				LocalRecallGroup	= RecallGroup
				LocalRecallNotice	= RecallNotice
				LocalRecallUser		= RecallUser
				
				invoke Update RecallNotificationRel
					invoked.RecallGroup		= RecallGroup
					invoked.RecallNotice	= RecallNotice
					invoked.RecallUser		= RecallUser
		
		AttachToRecallNoticeItemProposals is a Set Action
			restricted
			Parameters
				RecallGroup
				RecallNotice
    			
    		Instance Selection
    			where (RecallGroup = RecallGroup
    			and    RecallUser  = RecallGroup.DefaultItemProposalReviewer)
    			
    		Action Rules
 
    			Instance Rules
    				invoke AttachToRecallNoticeItemProposal
		 				invoked.RecallGroup					= RecallGroup
						invoked.RecallNotice				= RecallNotice
						invoked.RecallUser					= RecallGroup.DefaultItemProposalReviewer
   			
		AttachToRecallNoticeItemProposal is an Instance Action
			valid when (CanAddItemReview)
			default label is "CreateNewItemProposalReviewTask"
			Parameters
				RecallGroup
				RecallNotice
				RecallUser
				Priority					is Numeric size 2
		   			States
		   				High					value is 1
		   				Medium					value is 2
		   				Low						value is 3
				DueDate						is TimeStamp
				RecallTaskInstruction		
    			TaskInstructionDescription
				
			Parameter Rules
				RecallGroup
					required
				RecallNotice
					required
				RecallUser
					required
					LocalRecallNotice = RecallNotice
					constraint (!SameTaskOwnerRel exists)
						"TaskOrNewItemProposalReview<first SameTaskOwnerRel.RecallNoticeTask>IsAlreadyCreatedForOwner<RecallUser.FirstLastName>"
				Priority
					default to 3
					required
				DueDate
					default to current corporate date + RecallGroup.ItemProposalReviewNumberOfDays as days
					constraint (current corporate date < DueDate)
						"MustEnterADueDateThatIsAfterToday"
					required
				RecallTaskInstruction
					default to RecallGroup.DefaultItemProposalInstructions
					if (RecallTaskInstruction entered)
						constraint (RecallTaskInstruction.ValidForItemProposals)
							"TaskInstructionsMustBeValidForItemProposals"
				TaskInstructionDescription
					default to RecallGroup.DefaultItemProposalInstructions.Description

			Action Rules
	
				LocalRecallNotice = RecallNotice
				invoke Create Completed RecallNoticeTask
					assign result to LocalRecallNoticeTask 
					invoked.RecallGroup					= RecallGroup
					invoked.RecallNotice				= RecallNotice
					invoked.Owner						= RecallUser
					invoked.ManuallyCreatedTask 		= true
					invoked.Priority					= Priority
					invoked.DueDate						= DueDate
					invoked.RecallTaskInstruction		= RecallTaskInstruction
					invoked.TaskInstructionDescription	= TaskInstructionDescription
					if (RecallNotice.ProposedItem = 5)
						invoked.ProposedItem            = 4 
					else
						invoked.ProposedItem            = 1 
				if (RecallTaskInstruction exists)
					for each RecallTaskInstruction.RecallTaskInstructionQuestion set
						invoke Create RecallNoticeTaskQuestion
							assign result to LocalRecallNoticeTaskQuestion 
							invoked.RecallGroup			= RecallGroup
							invoked.RecallNotice	 	= RecallNotice
							invoked.RecallNoticeTask	= LocalRecallNoticeTask.RecallNoticeTask
							fill in fields from each
							
						for each each.RecallTaskInstructionQuestionValue set
							invoke Create RecallNoticeTaskQuestionValue
								invoked.RecallGroup				 = RecallGroup
								invoked.RecallNotice		 	 = RecallNotice
								invoked.RecallNoticeTask	 	 = LocalRecallNoticeTaskQuestion.RecallNoticeTask
								invoked.RecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestion.RecallNoticeTaskQuestion
								fill in fields from each
				send email
					to RecallUser.EmployeeWorkEmailAddress
					from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					subject "<RecallGroup.FinalItemProposalEmailSubject>"
					Contents
						"<RecallGroup.FinalItemProposalEmailContent>"
						"Proposal#:_<RecallNotice>"
						"Priority:_<Priority>"
						"DueDate:_<DueDate>"
						"Click<ItemProposalLinkback>ToViewTheNewItemProposalInformation."				
										
		AttachToRecallNoticeTask is an Instance Action
			valid when (!RecallNoticeContext.HistoricalRecallNotice)
			default label is "CreateTaskForUser"
			
			Parameters
				RecallGroup
				RecallNotice
				RecallUser
				Priority					is Numeric size 2
		   			States
		   				High					value is 1
		   				Medium					value is 2
		   				Low						value is 3
				DueDate						is TimeStamp
				RecallTaskInstruction		
    			TaskInstructionDescription
				
			Parameter Rules
				RecallGroup
					required
				RecallNotice
					required
				RecallUser
					required
					LocalRecallNotice = RecallNotice
					constraint (!SameTaskOwnerRel exists)
						"TaskOrNewItemProposalReview<first SameTaskOwnerRel.RecallNoticeTask>IsAlreadyCreatedForOwner<RecallUser.FirstLastName>"
				Priority
					required
				DueDate
					required
				RecallTaskInstruction
					required
					if (RecallTaskInstruction entered)
						constraint (RecallTaskInstruction.ValidForNotices)
							"TaskInstructionMustBeValidForNotices"
				TaskInstructionDescription
					initial value is RecallTaskInstruction.Description
			
			Action Rules
				invoke Create RecallNoticeTask
					assign result to LocalRecallNoticeTask 
					invoked.RecallGroup					= RecallGroup
					invoked.RecallNotice				= RecallNotice
					invoked.Owner						= RecallUser
					invoked.ManuallyCreatedTask 		= true
					invoked.Priority					= Priority
					invoked.DueDate						= DueDate
					invoked.RecallTaskInstruction		= RecallTaskInstruction
					invoked.TaskInstructionDescription	= TaskInstructionDescription
									
				if (RecallTaskInstruction exists)
					for each RecallTaskInstruction.RecallTaskInstructionQuestion set
						invoke Create RecallNoticeTaskQuestion
							assign result to LocalRecallNoticeTaskQuestion 
							invoked.RecallGroup			= RecallGroup
							invoked.RecallNotice	 	= RecallNotice
							invoked.RecallNoticeTask	= LocalRecallNoticeTask.RecallNoticeTask
							fill in fields from each
							
						for each each.RecallTaskInstructionQuestionValue set
							invoke Create RecallNoticeTaskQuestionValue
								invoked.RecallGroup				 = RecallGroup
								invoked.RecallNotice		 	 = RecallNotice
								invoked.RecallNoticeTask	 	 = LocalRecallNoticeTaskQuestion.RecallNoticeTask
								invoked.RecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestion.RecallNoticeTaskQuestion
								fill in fields from each
								
		Delete is a Delete Action
		
		Purge is a Purge Action
			restricted

		SetUsersToTrue is a Set Action   
			restricted
			Action Rules

				Instance Rules

					ResponderAndWatcher = true

		ChangeUser is an Instance Action
			default label is "ReassignUserForCoordinatorTaskOwnerAndOrganization"
			Parameters
				InactivateFromUser                  	is Boolean
				PrmToUser                           	is a RecallUser
					default label is "ToUser"
				ChangeAll								is Boolean
					default label is "AllUsers_(Coordinators,UserOrganizations,_andTaskOwners)"
				ChangeCoordinators                  	is Boolean
					default label is "Coordinators"
				ChangeOpenNotices                   	is Boolean
					default label is "ReassignOnlyOpenNotices"
				ChangeRespondersWatchersAndReviewers	is Boolean
					default label is "UserOrganizations"
				ReassignTaskOwners                  	is Boolean
					default label is "TaskOwnersForQualifyingTasks"
		
			Parameter Rules

				PrmToUser
					required
					constraint (RecallUser != PrmToUser)
						"FromAndToUserMustBeDifferent"
					constraint (ChangeCoordinators or ChangeRespondersWatchersAndReviewers or ReassignTaskOwners or ChangeAll)
						"MustSelectOneChangeOption"
					if (ChangeCoordinators)
						constraint (PrmToUser.Coordinator)
							"CannotReassignNoticeCoordinatorToUserWhoIsNotACoordinator"
					if (ReassignTaskOwners)
						constraint (PrmToUser.ResponderAndWatcher)
							"CannotReassignTasksToUserWhoIsNotAWatcherAndResponder"
					constraint (PrmToUser.Active)
						"ToUserMustBeActive"

				ChangeOpenNotices
					initial value is true

			Action Rules
				
				LocalToUser = PrmToUser
				if (ChangeCoordinators
				or (ChangeAll
				and PrmToUser.Coordinator))
					for each CoordinatorNoticesRel
						if (ChangeOpenNotices
						and each.Status < 4)
							invoke QuickUpdate each
								invoked.RecallCoordinator = PrmToUser 
						else
						if (ChangeOpenNotices = false)
							invoke QuickUpdate each
								invoked.RecallCoordinator = PrmToUser 	

				if (ChangeRespondersWatchersAndReviewers
				or  ChangeAll)
					invoke ReassignUserOrganizations
						invoked.ToRecallUser	 = PrmToUser
						invoked.FromReassignUser = true

				if (ReassignTaskOwners
				or (ChangeAll
				and PrmToUser.ResponderAndWatcher))
					for each OwnerChangeTaskRel
						LocalNotice = each.RecallNotice
						if (!NewOwnerTaskRel exists)
							invoke ReassignTask each
								invoked.NewOwner = LocalToUser
						else
						if (NewOwnerTaskRel exists)
							if  (!NewOwnerTaskRel.HasItemActions
							and  !each.HasItemActions
							and ((!each.ManuallyCreatedTask
							and  !NewOwnerTaskRel.ManuallyCreatedTask)
							or    each.HasNoticeOrganization))
								invoke ReassignTask each
									invoked.NewOwner = LocalToUser

				if (InactivateFromUser
				and ChangeAll)
					Active = false

		MonitorTasksForCoordinatorsAndSupervisors is a Set Action
			restricted
			Parameters
				PrmRecallGroup						is a RecallGroup
				PrmRecallType						is a RecallType
				PrmEscalationInHoursBeforeDueDate	is Numeric 5
			Local Fields
				EMailContent						is Text
				OverdueCount						is Numeric 5
					
			Instance Selection
				where (HROrganization = PrmRecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
				and    MonitoringTasks)
				
			Action Rules
								
				Instance Rules
					initialize OverdueCount
					
					LocalEscalationDate	= current timestamp + (PrmEscalationInHoursBeforeDueDate * 3600)
       				EMailContent = PrmRecallGroup.FinalTaskEscalationsEmailContent
					EMailContent += PrmRecallGroup.NewLine
					EMailContent += "Due  |  Owner  |  Notice # |  Description"
					EMailContent += PrmRecallGroup.NewLine

					for each MonitorTasksRel
						if  (PrmRecallType not entered	
						or   each.RecallNotice.RecallType = PrmRecallType) 
							OverdueCount += 1
							EMailContent += each.FormattedDueDate + "  |  " 
							EMailContent += each.Owner.RecallUserName + "  |  " 
							EMailContent += each.RecallNotice.DerivedNoticeNumber + "  |  "
							EMailContent += each.RecallNotice.Name
							EMailContent += PrmRecallGroup.NewLine

					if (OverdueCount > 0)
						send email
							to RecallUser.EmployeeWorkEmailAddress
							from config.DefaultFromEmailAddress
							subject "<PrmRecallGroup.FinalTaskEscalationsEmailSubject>"
							Contents
								"<EMailContent>"
					
		MonitorTasksForResponders is a Set Action
			restricted
			Parameters
				PrmRecallGroup						is a RecallGroup
				PrmRecallType						is a RecallType
				PrmRemindInHoursBeforeDueDate		is Numeric 5
			Local Fields
				EMailContent						is Text
				OverdueCount						is Numeric 5
					
			Instance Selection
				where (HROrganization = PrmRecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization)
				
			Action Rules
								
				Instance Rules
					LocalReminderDate	= current timestamp + (PrmRemindInHoursBeforeDueDate * 3600)
       				EMailContent = PrmRecallGroup.FinalTaskReminderEmailContent
					EMailContent += PrmRecallGroup.NewLine
					EMailContent += "Due  |  Link  |  Notice # |  Description"
					EMailContent += PrmRecallGroup.NewLine
					initialize OverdueCount

					for each OpenActiveTaskRel
						if  (PrmRecallType not entered	
						or   each.RecallNotice.RecallType = PrmRecallType) 
							OverdueCount += 1
							EMailContent += each.FormattedDueDate + "  |  "
							EMailContent += each.RecallNotice.TaskLinkback + "  |  " 
							EMailContent += each.RecallNotice.DerivedNoticeNumber + "  |  "
							EMailContent += each.RecallNotice.Name
							EMailContent += PrmRecallGroup.NewLine

					if (OverdueCount > 0)
						send email
							to RecallUser.EmployeeWorkEmailAddress
							from config.DefaultFromEmailAddress
							subject "<PrmRecallGroup.FinalTaskReminderEmailSubject>"
							Contents
								"<EMailContent>"
			
		ReassignUserOrganizations is an Instance Action
			run in background
			Parameters
				ToRecallUser					is a RecallUser
				FromReassignUser                is Boolean

			Parameter Rules
				ToRecallUser
					required
						"MustEnterTheReassignToUser"
					constraint (RecallUser != ToRecallUser)
						"FromUserAndToUserCannotBeTheSame"
					constraint (ToRecallUser.Active)
						"ToUserMustBeActive"
					if (!FromReassignUser)
						confirmation required
							"TheCurrentUser<RecallUserName>WillHaveAllOrganizationsForWhichTheyAreAResponderOrWatcherReassignedTo<ToRecallUser.RecallUserName>.Continue?"

			Action Rules
				LocalRecallUser = ToRecallUser
				for each OrganizationUserRel
					LocalRecallOrganization		= each.RecallOrganization
					if (((each.TypeOfUser.Responder
					or    each.TypeOfUser.Watcher)
					and   ToRecallUser.ResponderAndWatcher)
					or   (each.TypeOfUser.Reviewer
					and   ToRecallUser.ProposedItemReviewer))
						if (!ReassignOrganizationUserRel exists)
							invoke Create RecallOrganizationUser
								fill in fields from each
								invoked.RecallUser			= ToRecallUser
						else
						if (each.TypeOfUser.Responder
						and ReassignOrganizationUserRel.TypeOfUser.Watcher)
							invoke Update ReassignOrganizationUserRel
								invoked.TypeOfUser			= each.TypeOfUser
								
						invoke Delete each
				 
						
