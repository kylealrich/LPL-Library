AsyncActionTrigger is a BusinessClass
    owned by async
    prefix is AAT
    stored in environment





    Ontology
		symbolic key is AsyncActionTrigger
		
    Patterns
        disable Auditing
        disable EffectiveDated
        implements CreateStamp
        implements IncrementalReplication 
			indicator field is Archived
				replicate when false
					then set to true

    Persistent Fields
    	AsyncQueueDefinition
    	Status 					  is a AsyncTriggerStatus
    	Priority 				  is a AsyncPriority
    	SaveHistory 			  is Boolean  
    	RuntimeData 			  is a AsyncRuntimeData
    	StatusChanged			  is TimeStamp	
    	Pending					  is TimeStamp	
		Started 				  is TimeStamp	
		Finished 				  is TimeStamp	
		RequestedStart 			  is TimeStamp  	
		IsMisfire 				  is Boolean 			
			default label is "Misfired"
		FailureCode 			  is an AsyncTriggerFailureCode
		Result 					  is an AsyncException
		ErrorMessage 			  is an AsyncException
		RetryStart 				  is TimeStamp 		
		RetryCount 				  is Numeric size 2
		MaxRetries 				  is Numeric size 2
		AttemptCount			  is Numeric size 2
		AsyncLogProducer
		ConsistencyCheckInvalid	  is Boolean 
		SetActionStats
		InitialStarted 			  is TimeStamp			
		ElapsedRunningDuration    is Decimal size 10.0	// Cumulative time that action was "InProgress"
		RunOnErrorFailureCode	  is an AsyncTriggerFailureCode
		RunOnErrorResult 		  is an AsyncException
		RunOnErrorErrorMessage	  is an AsyncException
		RunOnErrorRetryStart 	  is TimeStamp 		
		RunOnErrorRetryCount 	  is Numeric size 2
		RemoteRuntimeData 		  is a AsyncRuntimeData
		UpgradeRequest			  is Boolean 
		Archived				  is Boolean 
		TerminationRequested	  is Boolean 
		TerminationRequestedOption is Numeric size 1 
			default label is "TerminationRequested" 
			States                                  
				NotRequested		value is 0
				ManuallyRequested	value is 1
				InternallyRequested	value is 2
		InterruptedRetryCount     is Numeric size 2 
		LastMemAgentInterruptTime is TimeStamp 
			default label is "LastMemoryAgentInterruptTime" 
		MemAgentRetryCount        is Numeric size 2 
			default label is "MemoryAgentInterruptedRetryCount" 
		LastProxyDisconnectedTime is TimeStamp 
		NotificationInformation   is an AsyncTriggerNotification 
		SynchronizedGroup		  is an AsyncSynchronizedGroup 
		DataArea											   
		QueuedRetryTime 		  is TimeStamp 
		PendingStatusInfo 		  is a AsyncTriggerPendingStatusInfo 
    
    Derived Fields
    	IsTriggerAllocated is a NativeField
    		type is Boolean
    		default label is "TriggerAllocated"
    		
    	ProblemMarker is a ConditionalField
    		type is Alpha 8
    		if (IsMisfire and RetryStart != blank)
    			"* " + RetryCount + "/" + MaxRetries
    		else
    		if (RetryStart != blank)
    			"" + RetryCount + "/" + MaxRetries
    		else
    		if (IsMisfire)
    			"*"
    		else
    			""
    	
    	MaxSystemAutoAttempt is a DerivedField
    		type is Numeric size 2
    		if (config(async).MaxAsyncSystemAutoRetry = blank)
    			return 5
    		else
    			return config(async).MaxAsyncSystemAutoRetry 
    			
    	NotificationRetryMessage  is a MessageField
    		"AutomaticRetryInitiated."
    		
    	NotificationRetryMessageCond is a DerivedField
    		type is MessageField	
    		restricted
    		if (Status.InRetry)
    			return NotificationRetryMessage
    		return blank
    			
    	NotificationBlocklistedMessage is a MessageField
			"ActionHasBeenBlockedDueToRepetitiveFailures."
				
		NotificationDescriptionError is a MessageField		
			"AnErrorWasEncounteredProcessingYourAction<AsyncActionRequest.Name>.<NotificationRetryMessageCond>"
			
		NotificationDescriptionTerminationRequestedError is a MessageField		
			"TerminationWasExplicitlyRequestedWhileProcessingYourAction<AsyncActionRequest.Name>"
			
		NotificationDescriptionInternalTerminationRequestedError is a MessageField		
			"TerminationWasRequestedByTheSystemWhileProcessingYourAction<AsyncActionRequest.Name>"
			
		NotificationDescriptionLostError is a MessageField		
			"TheStatusOfYourActionCouldNotBeDeterminedAndHasBeenMarkedAsLostWhileInProgress." 
			
		NotificationDescriptionErrorRunOnErrorOK is a MessageField		
			"AnErrorWasEncounteredProcessingYourAction.ARunOnErrorActionWasSpecifiedAndCompleted." 

		NotificationDescriptionErrorRunOnErrorFailed is a MessageField		
			"AnErrorWasEncounteredProcessingYourAction.TheSpecifiedRunOnErrorActionAlsoFailed." 
			
		NotificationDescriptionErrorRunOnErrorPending is a MessageField		
			"AnErrorWasEncounteredProcessingYourAction.TheSpecifiedRunOnErrorActionIsPending."	

		NotificationDescriptionDocumentError is a MessageField		
			"AnErrorWasEncounteredProcessingYourDocument<AsyncActionRequest.Name>.<NotificationRetryMessageCond>"
			
		NotificationDescriptionTerminationRequested is a MessageField		
			"TerminationWasExplicitlyRequestedWhileProcessingYourDocument<AsyncActionRequest.Name>."
			
		NotificationDescriptionInternalTerminationRequested is a MessageField		
			"TerminationWasRequestedByTheSystemWhileProcessingYourDocument<AsyncActionRequest.Name>."
			
		NotificationDescriptionDocumentLostError is a MessageField		
			"TheStatusOfYourDocumentCouldNotBeDeterminedAndHasBeenMarkedAsLostWhileInProgress." 
			
		NotificationDescriptionComplete is a MessageField
			"YourAction<AsyncActionRequest.Name>HasCompleted."
			
		NotificationDescriptionDocumentComplete is a MessageField
			"YourDocument<AsyncActionRequest.Name>HasCompleted."	
			
		NotificationDescriptionActionGroupComplete is a MessageField
			"ActionGroupHasCompleted.LastActionWas<AsyncActionRequest.Name>."
			
		NotificationDescriptionCompleteClean is a MessageField
			"YourAction<AsyncActionRequest.Name>HasCompleted.ScheduleInformationHasBeenRemoved."			
			
		NotificationDescriptionDocumentCompleteClean is a MessageField
			"YourDocument<AsyncActionRequest.Name>HasCompleted.ScheduleInformationHasBeenRemoved."			
		
		PendingRunAfterRunning is a MessageField
			restricted
			"RunOnErrorActionInProgress"
			
		PendingRunAfterWait is a MessageField
			restricted
			"PendingRunOnErrorAction"	
			
		RunAfterMessage is a DerivedField
			type is MessageField						
			
			if (IsErrorStatePendingRunAfter)
				if (IsTriggerAllocated)
					return PendingRunAfterRunning
				else
					return PendingRunAfterWait
			else
				return ""
				
		PendingStatusMessage is a MessageField
			restricted
			"WaitingOnTriggerUpdateOrConsistencySweepProcess.StatusIs<Status>,_Pending_StatusIs<PendingStatusInfo.PendingStatus>"
				
		InRetryMessage is a MessageField
			restricted
			"InRetry"
				
		WaitForActionGroupMessage is a MessageField
			restricted
			"WaitingOnActionGroupMembers"	
		
		WaitingOnSynchronizedGroupMessage is a MessageField
			restricted
			"WaitingOnSynchronizedGroup"	
						
		WarningStateMessage	 is a DerivedField
			type is MessageField						


			if (not Status.Finished and not PendingStatusInfo.PendingStatus.Unknown) 
				return PendingStatusMessage
			
			if (Status.InRetry)
				return InRetryMessage
			
    		if (Status.WaitForActionGroup)
    			return WaitForActionGroupMessage
    		
    		if (Status.WaitForSynchronizedGroup
    		or (Status.Queued
    		and AsyncActionRequest.HoldOnSynchronizedGroup)) 
				return WaitingOnSynchronizedGroupMessage
				
			return ""
				   

   		




        ElapsedTime is a DerivedField   
            type is Decimal 10.0 
            default label is "LastElapsedTime"
            if (Started = blank)
                return 0

            if (Finished != blank)
                return Finished - Started
            else
                return system current timestamp - Started

        DaysInElapsedTime is a DerivedField    
            type is Numeric 6
            default label is "LastDaysInElapsedTime"
            DaysInElapsedTime = ((ElapsedTime / 86400) - .5)
            if (DaysInElapsedTime < 0)
                DaysInElapsedTime = 0

        HoursInElapsedTime is a DerivedField    
            type is Numeric 2
            default label is "LastHoursInElapsedTime"
            HoursInElapsedTime = (((ElapsedTime - (DaysInElapsedTime * 86400)) / 3600) - .5)
            if (HoursInElapsedTime < 0)
                HoursInElapsedTime = 0

        MinutesInElapsedTime is a DerivedField  
            type is Numeric 2
            default label is "LastMinutesInElapsedTime"
            MinutesInElapsedTime = ((((ElapsedTime - (DaysInElapsedTime * 86400)) - (HoursInElapsedTime * 3600)) / 60) - .5)
            if (MinutesInElapsedTime < 0)
                MinutesInElapsedTime = 0

        SecondsInElapsedTime is a DerivedField  
            type is Numeric 2
            default label is "LastSecondsInElapsedTime"
            SecondsInElapsedTime = ((((ElapsedTime - (DaysInElapsedTime * 86400)) - (HoursInElapsedTime * 3600)) - (MinutesInElapsedTime * 60)) - .5)
            if (SecondsInElapsedTime < 0)
                SecondsInElapsedTime = 0



        DaysHoursMinutesSecondsInElapsedTime is a MessageField
            "<DaysInElapsedTime>Days<HoursInElapsedTime>Hours<MinutesInElapsedTime>Minutes<SecondsInElapsedTime>Seconds"

        HoursMinutesSecondsInElapsedTime is a MessageField
            "<HoursInElapsedTime>Hours<MinutesInElapsedTime>Minutes<SecondsInElapsedTime>Seconds"

        MinutesSecondsInElapsedTime is a MessageField
            "<MinutesInElapsedTime>Minutes<SecondsInElapsedTime>Seconds"
        
        SecondsInElapsedTimeMessage is a MessageField
            "<SecondsInElapsedTime>Seconds"
            
        OneSecondInElapsedTimeMessage is a MessageField
            "1Second"

        ElapsedTimeComponentsText is a DerivedField
        	type is Alpha size 40
        	default label is "LastElapsedTime"
            if (DaysInElapsedTime > 0)
                return DaysHoursMinutesSecondsInElapsedTime
            else
            if (HoursInElapsedTime > 0)
                return HoursMinutesSecondsInElapsedTime
            else
            if (MinutesInElapsedTime > 0)
                return MinutesSecondsInElapsedTime
            else
            if (SecondsInElapsedTime > 0)
                return SecondsInElapsedTimeMessage
            else
                if (Started != blank)
                    return "< " + OneSecondInElapsedTimeMessage 
                else
                    return ""
                    

		
		OverallElapsedTime is a DerivedField   
            type is Decimal 10.0 
            if (InitialStarted = blank)
                return 0

            if (Finished != blank)
                return Finished - InitialStarted
            else
                return system current timestamp - InitialStarted

        OverallDaysInElapsedTime is a DerivedField    
            type is Numeric 6
            OverallDaysInElapsedTime = ((OverallElapsedTime / 86400) - .5)
            if (OverallDaysInElapsedTime < 0)
                OverallDaysInElapsedTime = 0

        OverallHoursInElapsedTime is a DerivedField    
            type is Numeric 2
            OverallHoursInElapsedTime = (((OverallElapsedTime - (OverallDaysInElapsedTime * 86400)) / 3600) - .5)
            if (OverallHoursInElapsedTime < 0)
                OverallHoursInElapsedTime = 0

        OverallMinutesInElapsedTime is a DerivedField  
            type is Numeric 2
            OverallMinutesInElapsedTime = ((((OverallElapsedTime - (OverallDaysInElapsedTime * 86400)) - (OverallHoursInElapsedTime * 3600)) / 60) - .5)
            if (OverallMinutesInElapsedTime < 0)
                OverallMinutesInElapsedTime = 0

        OverallSecondsInElapsedTime is a DerivedField  
            type is Numeric 2
            OverallSecondsInElapsedTime = ((((OverallElapsedTime - (OverallDaysInElapsedTime * 86400)) - (OverallHoursInElapsedTime * 3600)) - (OverallMinutesInElapsedTime * 60)) - .5)
            if (OverallSecondsInElapsedTime < 0)
                OverallSecondsInElapsedTime = 0



        OverallDaysHoursMinutesSecondsInElapsedTime is a MessageField
            "<OverallDaysInElapsedTime>Days<OverallHoursInElapsedTime>Hours<OverallMinutesInElapsedTime>Minutes<OverallSecondsInElapsedTime>Seconds"

        OverallHoursMinutesSecondsInElapsedTime is a MessageField
            "<OverallHoursInElapsedTime>Hours<OverallMinutesInElapsedTime>Minutes<OverallSecondsInElapsedTime>Seconds"

        OverallMinutesSecondsInElapsedTime is a MessageField
            "<OverallMinutesInElapsedTime>Minutes<OverallSecondsInElapsedTime>Seconds"
            
        OverallSecondsInElapsedTimeMessage is a MessageField
            "<OverallSecondsInElapsedTime>Seconds"

        OverallElapsedTimeComponentsText is a DerivedField
        	type is Alpha size 40
        	default label is "OverallElapsedTime"
            if (OverallDaysInElapsedTime > 0)
                return OverallDaysHoursMinutesSecondsInElapsedTime
            else
            if (OverallHoursInElapsedTime > 0)
                return OverallHoursMinutesSecondsInElapsedTime
            else
            if (OverallMinutesInElapsedTime > 0)
                return OverallMinutesSecondsInElapsedTime
            else
            if (OverallSecondsInElapsedTime > 0)
                return OverallSecondsInElapsedTimeMessage
            else
                if (InitialStarted != blank)
                    return "< " + OneSecondInElapsedTimeMessage 
                else
                    return ""                    
         

        InProgressRunningDuration is a DerivedField   
            type is Decimal 10.0 
            if (ElapsedRunningDuration entered)
            	if (Status.InProgress)
            		return (ElapsedRunningDuration + (system current timestamp - Started))
            	else
            		return ElapsedRunningDuration
            else
            	return 0
            	                
        InProgressDaysInElapsedTime is a DerivedField    
            type is Numeric 6
            if (ElapsedRunningDuration entered)
            	InProgressDaysInElapsedTime = ((InProgressRunningDuration / 86400) - .5)
            	if (InProgressDaysInElapsedTime < 0)
                	InProgressDaysInElapsedTime = 0
            else // First time In Progress, never have been "InProgress" or failed after first time InProgress and no restarted
           		InProgressDaysInElapsedTime = DaysInElapsedTime

        InProgressHoursInElapsedTime is a DerivedField    
            type is Numeric 2
            if (ElapsedRunningDuration entered)
	            InProgressHoursInElapsedTime = (((InProgressRunningDuration - (InProgressDaysInElapsedTime * 86400)) / 3600) - .5)
	            if (InProgressHoursInElapsedTime < 0)
    	            InProgressHoursInElapsedTime = 0
    	    else // First time In Progress, never have been "InProgress" or failed after first time InProgress and no restarted
    	    	InProgressHoursInElapsedTime = HoursInElapsedTime
	
        InProgressMinutesInElapsedTime is a DerivedField  
            type is Numeric 2
            if (ElapsedRunningDuration entered)
	            InProgressMinutesInElapsedTime = ((((InProgressRunningDuration - (InProgressDaysInElapsedTime * 86400)) - (InProgressHoursInElapsedTime * 3600)) / 60) - .5)
	            if (InProgressMinutesInElapsedTime < 0)
	                InProgressMinutesInElapsedTime = 0
	        else // First time In Progress, never have been "InProgress" or failed after first time InProgress and no restarted
				InProgressMinutesInElapsedTime = MinutesInElapsedTime
				
        InProgressSecondsInElapsedTime is a DerivedField  
            type is Numeric 2
            if (ElapsedRunningDuration entered)
	            InProgressSecondsInElapsedTime = ((((InProgressRunningDuration - (InProgressDaysInElapsedTime * 86400)) - (InProgressHoursInElapsedTime * 3600)) - (InProgressMinutesInElapsedTime * 60)) - .5)
	            if (InProgressSecondsInElapsedTime < 0)
	                InProgressSecondsInElapsedTime = 0
			else // First time In Progress, never have been "InProgress" or failed after first time InProgress and no restarted
				InProgressSecondsInElapsedTime = SecondsInElapsedTime
				


        InProgressDaysHoursMinutesSecondsInElapsedTime is a MessageField
            "<InProgressDaysInElapsedTime>Days<InProgressHoursInElapsedTime>Hours<InProgressMinutesInElapsedTime>Minutes<InProgressSecondsInElapsedTime>Seconds"

        InProgressHoursMinutesSecondsInElapsedTime is a MessageField
            "<InProgressHoursInElapsedTime>Hours<InProgressMinutesInElapsedTime>Minutes<InProgressSecondsInElapsedTime>Seconds"

        InProgressMinutesSecondsInElapsedTime is a MessageField
            "<InProgressMinutesInElapsedTime>Minutes<InProgressSecondsInElapsedTime>Seconds"
            
		InProgressSecondsInElapsedTimeMessage is a MessageField
        	"<InProgressSecondsInElapsedTime>Seconds"            

        InProgressElapsedTimeComponentsText is a DerivedField
        	type is Alpha size 40
        	default label is "InProgressElapsedTime"
            if (InProgressDaysInElapsedTime > 0)
                return InProgressDaysHoursMinutesSecondsInElapsedTime
            else
            if (InProgressHoursInElapsedTime > 0)
                return InProgressHoursMinutesSecondsInElapsedTime
            else
            if (InProgressMinutesInElapsedTime > 0)
                return InProgressMinutesSecondsInElapsedTime
            else
            if (InProgressSecondsInElapsedTime > 0)
                return InProgressSecondsInElapsedTimeMessage
            else
                if (Started != blank)
                    return "< " + OneSecondInElapsedTimeMessage 
                else
                    return ""      
                    
		SetCommitObjectsAlpha is a DerivedField
			type is AlphaRight size 12
			default label is "ObjectsCommitted"
			if (SetActionStats entered)
				return SetActionStats.SetCommitObjects
			else
				return "N/A"                    
    			
    	ShutdownRequested is a NativeField
    		type is Boolean
    		restricted
    		
    	DefaultQueue is a DerivedField
    		type is Alpha size 50
    		restricted
    		
    		if (DefaultQueueByDataArea)
    			return "DefaultQueue-" + AsyncActionRequest.DataArea 
    			
    		return "DefaultQueue"
    		
    	DefaultQueueByDataArea is a NativeField
    		type is Boolean
    		restricted
    		
    	MaxInterruptedRetryCount is a NativeField 
    		type is Numeric size 2
    		
    	MaxMemAgentRetryCount is a NativeField 
    		type is Numeric size 2 
    		default label is untranslatable
    		
    	MaxMemAgentRetryWindowMinutes is a NativeField 
    		type is Numeric size 6
    		default label is untranslatable
    		
    	MaxMemAgentRetryWindowSeconds is a DerivedField
    		type is Numeric size 19
    		default label is untranslatable
    		return (MaxMemAgentRetryWindowMinutes * 60)
    		
    	QueueEmailAddress is a DerivedField	 
    		type is MultiEmailAddressField 
    		default label is untranslatable
    		restricted
    		
    		return AsyncQueueDefinition.NotificationInformation.DerEmailAddressMulti 
    		
		QueueNotificationType is a DerivedField 
    		type is Numeric size 1
    		default label is untranslatable
    		restricted
    		
    		return AsyncQueueDefinition.NotificationInformation.NotificationType
    		
    	TriggerEmailAddress is a DerivedField
    		type is MultiEmailAddressField 
    		default label is untranslatable
    		restricted
    		
    		return NotificationInformation.DerEmailAddressMulti 
    		
		TriggerNotificationType is a DerivedField 
    		type is Numeric size 1
    		default label is untranslatable
    		restricted
    		
    		return NotificationInformation.NotificationType
    		
		ActionGroupID is a DerivedField	 
    		type is UniqueID
    		default label is untranslatable
    		restricted
    		
    		return AsyncActionRequest.ActionGroup    	    		
    	
		ActionGroupDurationThresholdMinutes is a DerivedField	 
    		type is Numeric size 5
    		default label is untranslatable
    		restricted
    		
    		return AsyncActionRequest.ActionGroupNotification.ThresholdMinutes    		
    		
    	ActionGroupEmailAddress is a DerivedField	 
    		type is MultiEmailAddressField 
    		default label is untranslatable
    		restricted
    		
    		return AsyncActionRequest.ActionGroupNotification.DerEmailAddressMulti
    		
		ActionGroupStartTime is a DerivedField	 
    		type is TimeStamp
    		default label is untranslatable
    		restricted
    		
    		return AsyncActionRequest.ActionGroupStartTime    
    	
    	RequestDataArea is a DerivedField 
    		type is DataAreaName
    		default label is untranslatable
    		restricted
    		
    		return AsyncActionRequest.DataArea 
    		
		DurationNotificationDescriptionMinute is a MessageField 
			"ActionGroupHasBeenRunningLongerThan1Minute.CurrentActionIs<AsyncActionRequest.Name>.ActionGroupStartTime<AsyncActionRequest.ActionGroupStartTime>."    		
			
		DurationNotificationDescriptionMinutes is a MessageField 
			"ActionGroupHasBeenRunningLongerThan<AsyncActionRequest.ActionGroupNotification.ThresholdMinutes>Minutes.CurrentActionIs<AsyncActionRequest.Name>.ActionGroupStartTime<AsyncActionRequest.ActionGroupStartTime>."
			
		DurationNotificationDescription is a DerivedField 
    		type is MessageField
    		
    		if (AsyncActionRequest.ActionGroupNotification.ThresholdMinutes = 1)
    			return DurationNotificationDescriptionMinute
    		else
    			return DurationNotificationDescriptionMinutes
    			
		BlocklistedMessage is a DerivedField
			type is MessageField
			if (AsyncBlockedAction exists)
				return AsyncActionRequest.BlocklistMessage
			
			if (AsyncBlockedRunOnErrorAction exists)
				return AsyncActionRequest.RunOnErrorBlocklistMessage
			
			return blank 
			
		AsyncAuditingEnabled is a NativeField
			type is Boolean
			default label is untranslatable
			restricted

			
		AsyncAuditActionDisabled is a NativeField
    		type is Boolean
    		default label is untranslatable
    		restricted 

    			
    Conditions
    	SystemRequest
   			when (not AsyncActionRequest.SystemRequest.No)
   			
		RunInQueueBinding   			
			when (AsyncQueueDefinition.QueueAsBindingKey)
			
		HasRunOnErrorAction
			default label is "RunOnErrorActionEntered"
			when (AsyncActionRequest.HasRunOnErrorAction)
			
		CanRequeueWithDBSessionDebug
			default label is untranslatable
			when (not AsyncActionRequest.DBSessionDebugIsEnabled and not IsTriggerAllocated)
			
		CanRequeueWithoutDBSessionDebug
			default label is untranslatable
			when (AsyncActionRequest.DBSessionDebugIsEnabled and not IsTriggerAllocated)
			
		IsRunOnErrorFailure
			default label is "RunOnErrorFailure"
			when (RunOnErrorFailureCode > 0)
			
		IsErrorStatePendingRunAfter
			default label is untranslatable
    		when (Status.TerminatedAbnormally and FailureCode.TerminatedAbnormallyPendingRunOnError and IsTriggerAllocated)
    		
		IsErrorStateNotPendingRunAfter
			default label is untranslatable
    		when (not IsErrorStatePendingRunAfter and IsErrorState)
    		
    	IsInfoStateTerminationRequested
    		default label is untranslatable
    	    when (TerminationRequested or TerminationRequestedOption.ManuallyRequested or FailureCode.TerminationRequested)
    	    
    	IsInfoStateTerminationSystemRequested
    		default label is untranslatable
    	    when (TerminationRequestedOption.InternallyRequested or FailureCode.TerminationInternallyRequested)
    		
		CanResumeStream
			restricted
			when (Status.WaitForActionGroup and AsyncActionRequest.CanResumeStream)
			
		CheckPointsExist
			restricted
			when (CheckPointRel exists)
			
		RemoteRuntimeDataEntered			
			restricted
			when (RemoteRuntimeData entered)
			
		InRequestDataArea
    		when (AsyncActionRequest.DataArea like parentcontext.dataarea) 
    		
		CanViewRunningStatistics    
			default label is "ViewRunningStatisticsAllowed"		
			when (Status.InProgress and AsyncActionRequest.AsyncAction.ActionType.Set)    

		HasProblems
    		default label is "Problems"
    		when (ProblemMarker != blank)
    			
		IsErrorState
    		default label is "ErrorState"
    		when (Status.LostWhilePending 
    		or    Status.FailedToStart 
    		or    Status.LostWhileInProgress 
    		or    Status.TerminatedAbnormally)
    			
		IsWarningState
    		default label is "WarningState"
    		when (Status.InRetry
    		or    Status.WaitForActionGroup
    		or    Status.WaitForSynchronizedGroup
    		or   (Status.Queued
    		and   AsyncActionRequest.HoldOnSynchronizedGroup) 
    		or   (not Status.Finished and not PendingStatusInfo.PendingStatus.Unknown))
    			
		IsGoodState
			default label is "GoodState"
    		when (Status.Finished)
    	
    	IsStatisticsState
    		default label is "StatisticsState"
    		when (SetActionStats entered)
    		
		IsRunOnErrorErrorMessageEntered
			default label is "RunOnErrorErrorMessageEntered"
			when (RunOnErrorErrorMessage entered)  		
			
		IsQueuedOrPending
			restricted
			when (Status.Queued or Status.PendingStart)		
			
		CanRequeueSynchronizedGroup
			restricted
			when (not IsTriggerAllocated and not SynchronizedGroup.Suspended and not SynchronizedGroup.NonFinishedNotInErrorOrSynchWaitTriggers exists)
		
		ActionBlocklisted
			when (AsyncBlockedAction exists)
			
		RunOnErrorActionBlocklisted
			when (AsyncBlockedRunOnErrorAction exists)
			
		DisplayBlocklistMessage
			when (not Status.Finished and (ActionBlocklisted or RunOnErrorActionBlocklisted))
			
		PendingStatusEntered
			restricted
			when (PendingStatusInfo entered)
			
		HasAuditRecords
			default label is "AuditRecordsExist"
			when (AuditingRel exists)	
	
	Local Fields
		ConsistencyCheckCommit is Boolean
		RecordFastLocked is Boolean
		LocalBlocklisted is Boolean
		TranDisableAudit is Boolean
			default label is untranslatable:"DisableAuditing"
		TenantMaxExceeded is Boolean 
		LocTerminationRequestedOpt is Numeric size 1
    
    Field Rules
		Priority
			if (AsyncActionRequest.SystemRequest.NonBlockingUpgrade) 
				default to Priority.Critical
			else
				default to Priority.Normal
				
			required
		AsyncQueueDefinition
			default to DefaultQueue
			required
		Status
			required
			
		UpgradeRequest
			if (AsyncActionRequest.AnyTypeUpgradeRequest)
				UpgradeRequest = true
	
	Sets
    	Queued
    		indexed
    		Sort Order
    			AsyncQueueDefinition
    			Status
    			Priority
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger
    			
    	QueuedRetryStart
    		indexed
    		Sort Order
    			AsyncQueueDefinition
    			UpgradeRequest
    			Status
    			Priority
    			create stamp
    			RetryStart
    			UniqueID    			
    	
    	AsyncActionTriggerByStatus
    		sql name is "TriggerByStatus"
    		indexed
    		Sort Order
    			Status
    			Priority
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger

		AsyncActionTriggerByConsistencyCheckInvalid
    		sql name is "TriggerByConChk"
    		indexed
    		Sort Order
    			ConsistencyCheckInvalid
    			Status
    			Priority
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger 
    	
    	AsyncActionTriggerByPriority
    		sql name is "TriggerByPrio"
    		indexed
    		Sort Order
    			Priority
    			Status
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger

    	AsyncActionTriggerByRequest
    		sql name is "TriggerByReq"
    		indexed
    		Sort Order
    			AsyncActionRequest
    			Status
    			SaveHistory
    			AsyncActionTrigger
    			
    	AsyncActionTriggerByStatusCreateStamp
    		sql name is "TriggerByStatCS"
    		indexed
    		Sort Order
    			Status
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger

    	AsyncActionTriggerByRequestTriggerID
    		sql name is "TriggerByRegTrigID"
    		indexed
    		Sort Order
    			AsyncActionRequest
    			UniqueID
    	
    	AsyncActionTriggerBySynchronizedGroup 
    		sql name is "TriggerBySynGrp"
    		indexed
    		Sort Order
    			SynchronizedGroup
    			DataArea
    			Status
    			Priority
    			create stamp
    			AsyncActionRequest
    			AsyncActionTrigger
    			
    	ByUniqueID
    		indexed
    		Sort Order
    			UniqueID
    			
    Relations
    	MappingsMatchedByActorDataAreaBusinessClassActionMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByActorDataAreaBusinessClassMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByActorDataAreaMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2	
						
		MappingsMatchedByActorBusinessClassActionMapAll   
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByActorBusinessClassMapAll 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank			
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByActorMapAll 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = blank
				related.AsyncAction = blank		
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2
				
		MappingsMatchedByDataAreaBusinessClassActionMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction	
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2
				
		MappingsMatchedByDataAreaBusinessClassMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByDataAreaMapAll  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank	
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2		

		MappingsMatchedByBusinessClassActionMapAll 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2

		MappingsMatchedByBusinessClassMapAll 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2
				
		MappingsMatchedByMapFieldsMapAll 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = blank
				related.AsyncAction = blank		
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = AsyncActionRequest.MappingField2					
				

    	MappingsMatchedByActorDataAreaBusinessClassActionMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByActorDataAreaBusinessClassMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByActorDataAreaMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank	
						
		MappingsMatchedByActorBusinessClassActionMap   
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByActorBusinessClassMap 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank			
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByActorMap 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = blank
				related.AsyncAction = blank		
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank
				
		MappingsMatchedByDataAreaBusinessClassActionMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction	
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank
				
		MappingsMatchedByDataAreaBusinessClassMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByDataAreaMap  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank	
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank		

		MappingsMatchedByBusinessClassActionMap 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank

		MappingsMatchedByBusinessClassMap 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank
				
		MappingsMatchedByMapFieldsMap 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = blank
				related.AsyncAction = blank		
				related.MappingField1 = AsyncActionRequest.MappingField1
				related.MappingField2 = blank		


		MappingsMatchedByActorDataAreaBusinessClassAction  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = blank
				related.MappingField2 = blank

		MappingsMatchedByActorDataAreaBusinessClass  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = blank
				related.MappingField2 = blank

		MappingsMatchedByActorDataArea  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank
				related.MappingField1 = blank
				related.MappingField2 = blank	
						
		MappingsMatchedByActorBusinessClassAction   
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = blank
				related.MappingField2 = blank

		MappingsMatchedByActorBusinessClass 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank			
				related.MappingField1 = blank
				related.MappingField2 = blank	

		MappingsMatchedByActor 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = AsyncActionRequest.Actor
				related.DataArea = blank				
				related.ImplementingClass = blank
				related.AsyncAction = blank		
				related.MappingField1 = blank
				related.MappingField2 = blank		

		MappingsMatchedByDataAreaBusinessClassAction  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction	
				related.MappingField1 = blank
				related.MappingField2 = blank
				
		MappingsMatchedByDataAreaBusinessClass  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = blank
				related.MappingField2 = blank

		MappingsMatchedByDataArea  
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = AsyncActionRequest.DataArea 
				related.ImplementingClass = blank
				related.AsyncAction = blank	
				related.MappingField1 = blank
				related.MappingField2 = blank			

		MappingsMatchedByBusinessClassAction 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = AsyncActionRequest.AsyncAction
				related.MappingField1 = blank
				related.MappingField2 = blank

		MappingsMatchedByBusinessClass 
			one-to-one relation to AsyncQueueMapping
			Field Mapping uses Mappings
				related.Actor = blank
				related.DataArea = blank				
				related.ImplementingClass = AsyncActionRequest.ImplementingClass
				related.AsyncAction = blank
				related.MappingField1 = blank
				related.MappingField2 = blank				

		AsyncActionInvocationRel
			one-to-one relation to AsyncActionInvocation
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
				related.TriggerUniqueID = UniqueID
			
		AsyncActionRequestInvocationRel
			one-to-one relation to AsyncActionInvocation
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
				related.TriggerUniqueID = blank
				
		CheckPointRel
			default label is "CheckpointRelation"
			one-to-many relation to CheckPoint
			Field Mapping uses ByAsyncActionRequestTriggerUniqueID
				related.AsyncActionRequest = AsyncActionRequest
				related.AsyncActionTrigger = AsyncActionTrigger
				


		RootAsyncActionRequestForActionGroup
			one-to-one relation to AsyncActionRequest
			Field Mapping uses symbolic key
				related.AsyncActionRequest = AsyncActionRequest.ActionGroup 	
				
		AsyncActionTriggerRunningStatsRel
			default label is "TriggerRunningStatistics"
			one-to-one relation to AsyncActionTriggerRunningStats
			Field Mapping uses symbolic key
				related.AsyncActionTriggerRunningStats = UniqueID 		
				
		OtherAsyncActionTriggerRel
			default label is "OtherAsyncActionTriggers"
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses symbolic key
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.AsyncActionTrigger != AsyncActionTrigger) 	
				
		OtherUnfinishedAsyncActionTriggerRel
			default label is "OtherUnfinishedAsyncActionTriggers"
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses symbolic key
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.AsyncActionTrigger != AsyncActionTrigger
				and    related.Status != Status.Finished)																		
			
		AsyncBlockedAction
			one-to-one relation to AsyncBlocklist
			Field Mapping uses ByBlocklistMembersFields
				related.AsyncBlocklist.DataArea 		= DataArea
				related.AsyncBlocklist.BusinessView  	= AsyncActionRequest.ImplementingClass
        		related.AsyncBlocklist.BusinessAction   = AsyncActionRequest.AsyncAction
        		related.AsyncBlocklist.MappingField1	= AsyncActionRequest.MappingField1
        		related.AsyncBlocklist.MappingField2	= AsyncActionRequest.MappingField2
        		
		AsyncBlockedRunOnErrorAction
			one-to-one relation to AsyncBlocklist
			Field Mapping uses ByBlocklistMembersFields
				related.AsyncBlocklist.DataArea 		= DataArea
				related.AsyncBlocklist.BusinessView  	= AsyncActionRequest.RunOnErrorAction.ImplementingClass
        		related.AsyncBlocklist.BusinessAction   = AsyncActionRequest.RunOnErrorAction.AsyncAction
        		related.AsyncBlocklist.MappingField1	= AsyncActionRequest.MappingField1
        		related.AsyncBlocklist.MappingField2	= AsyncActionRequest.MappingField2   
        		
        AuditingRel
			one-to-many relation to AsyncAuditEntry
			Field Mapping uses ByBusClassID
				related.Reference.BusinessClassName = "AsyncActionTrigger"
				related.Reference.BusinessObjectKey = UniqueID     		
				
	Rule Blocks
		QueueMappingResolve
			MappingSaveHistory = MappingSaveHistory.QueueDefault
			AsyncQueueDefinition = DefaultQueue
			SaveHistory = true
			MappingFound = false
			

			if (AsyncActionRequest.MappingField1 entered) 
				if (MappingsMatchedByActorDataAreaBusinessClassActionMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClassActionMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClassActionMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClassActionMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClassActionMapAll.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClassActionMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataAreaBusinessClassMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClassMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClassMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClassMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClassMapAll.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClassMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataAreaMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaMapAll.AsyncQueueMapping.SaveHistory							
					AsyncLogProducer = MappingsMatchedByActorDataAreaMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByActorDataAreaMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true		
				else 
				if (MappingsMatchedByActorBusinessClassActionMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClassActionMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClassActionMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClassActionMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorBusinessClassActionMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByActorBusinessClassActionMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true							
				else 
				if (MappingsMatchedByActorBusinessClassMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClassMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClassMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClassMapAll.AsyncQueueMapping.SaveHistory				
					AsyncLogProducer = MappingsMatchedByActorBusinessClassMapAll.AsyncQueueMapping.AsyncLogProducer		
					NotificationInformation = MappingsMatchedByActorBusinessClassMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true						
				else 
				if (MappingsMatchedByActorMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByActorMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByActorMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true							
				else 
				if (MappingsMatchedByDataAreaBusinessClassActionMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClassActionMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClassActionMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClassActionMapAll.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClassActionMapAll.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaBusinessClassActionMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataAreaBusinessClassMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClassMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClassMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClassMapAll.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClassMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByDataAreaBusinessClassMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true						
				else 
				if (MappingsMatchedByDataAreaMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaMapAll.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaMapAll.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByBusinessClassActionMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClassActionMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClassActionMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClassActionMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClassActionMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByBusinessClassActionMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true										
				else 
				if (MappingsMatchedByBusinessClassMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClassMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClassMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClassMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClassMapAll.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByBusinessClassMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByMapFieldsMapAll exists)
					AsyncQueueDefinition = MappingsMatchedByMapFieldsMapAll.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByMapFieldsMapAll.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByMapFieldsMapAll.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByMapFieldsMapAll.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByMapFieldsMapAll.AsyncQueueMapping.NotificationInformation 
					MappingFound = true

				else
				if (MappingsMatchedByActorDataAreaBusinessClassActionMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClassActionMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClassActionMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClassActionMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClassActionMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClassActionMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataAreaBusinessClassMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClassMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClassMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClassMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClassMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClassMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataAreaMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaMap.AsyncQueueMapping.SaveHistory							
					AsyncLogProducer = MappingsMatchedByActorDataAreaMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true				
				else 
				if (MappingsMatchedByActorBusinessClassActionMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClassActionMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClassActionMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClassActionMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorBusinessClassActionMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorBusinessClassActionMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByActorBusinessClassMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClassMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClassMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClassMap.AsyncQueueMapping.SaveHistory				
					AsyncLogProducer = MappingsMatchedByActorBusinessClassMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorBusinessClassMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByActorMap exists)
					AsyncQueueDefinition = MappingsMatchedByActorMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataAreaBusinessClassActionMap exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClassActionMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClassActionMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClassActionMap.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClassActionMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaBusinessClassActionMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataAreaBusinessClassMap exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClassMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClassMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClassMap.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClassMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaBusinessClassMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataAreaMap exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaMap.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByBusinessClassActionMap exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClassActionMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClassActionMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClassActionMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClassActionMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByBusinessClassActionMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true												
				else 
				if (MappingsMatchedByBusinessClassMap exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClassMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClassMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClassMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClassMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByBusinessClassMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true	
				else 
				if (MappingsMatchedByMapFieldsMap exists)
					AsyncQueueDefinition = MappingsMatchedByMapFieldsMap.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByMapFieldsMap.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByMapFieldsMap.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByMapFieldsMap.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByMapFieldsMap.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
					

			if (not MappingFound)
				if (MappingsMatchedByActorDataAreaBusinessClassAction exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClassAction.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClassAction.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClassAction.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClassAction.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClassAction.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataAreaBusinessClass exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataAreaBusinessClass.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataAreaBusinessClass.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataAreaBusinessClass.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorDataAreaBusinessClass.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataAreaBusinessClass.AsyncQueueMapping.NotificationInformation 
					MappingFound = true
				else 
				if (MappingsMatchedByActorDataArea exists)
					AsyncQueueDefinition = MappingsMatchedByActorDataArea.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorDataArea.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorDataArea.AsyncQueueMapping.SaveHistory							
					AsyncLogProducer = MappingsMatchedByActorDataArea.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorDataArea.AsyncQueueMapping.NotificationInformation 
					MappingFound = true				
				else 
				if (MappingsMatchedByActorBusinessClassAction exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClassAction.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClassAction.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClassAction.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActorBusinessClassAction.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActorBusinessClassAction.AsyncQueueMapping.NotificationInformation 
					MappingFound = true						
				else 
				if (MappingsMatchedByActorBusinessClass exists)
					AsyncQueueDefinition = MappingsMatchedByActorBusinessClass.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActorBusinessClass.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActorBusinessClass.AsyncQueueMapping.SaveHistory				
					AsyncLogProducer = MappingsMatchedByActorBusinessClass.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByActorBusinessClass.AsyncQueueMapping.NotificationInformation 
					MappingFound = true							
				else 
				if (MappingsMatchedByActor exists)
					AsyncQueueDefinition = MappingsMatchedByActor.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByActor.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByActor.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByActor.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByActor.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataAreaBusinessClassAction exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClassAction.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClassAction.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClassAction.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClassAction.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByDataAreaBusinessClassAction.AsyncQueueMapping.NotificationInformation 
					MappingFound = true							
				else 
				if (MappingsMatchedByDataAreaBusinessClass exists)
					AsyncQueueDefinition = MappingsMatchedByDataAreaBusinessClass.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataAreaBusinessClass.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataAreaBusinessClass.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataAreaBusinessClass.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByDataAreaBusinessClass.AsyncQueueMapping.NotificationInformation 
					MappingFound = true								
				else 
				if (MappingsMatchedByDataArea exists)
					AsyncQueueDefinition = MappingsMatchedByDataArea.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByDataArea.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByDataArea.AsyncQueueMapping.SaveHistory	
					AsyncLogProducer = MappingsMatchedByDataArea.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByDataArea.AsyncQueueMapping.NotificationInformation 
					MappingFound = true							
				else 
				if (MappingsMatchedByBusinessClassAction exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClassAction.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClassAction.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClassAction.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClassAction.AsyncQueueMapping.AsyncLogProducer	
					NotificationInformation = MappingsMatchedByBusinessClassAction.AsyncQueueMapping.NotificationInformation 
					MappingFound = true											
				else 
				if (MappingsMatchedByBusinessClass exists)
					AsyncQueueDefinition = MappingsMatchedByBusinessClass.AsyncQueueMapping.AsyncQueueDefinition
					Priority = MappingsMatchedByBusinessClass.AsyncQueueMapping.Priority
					MappingSaveHistory = MappingsMatchedByBusinessClass.AsyncQueueMapping.SaveHistory
					AsyncLogProducer = MappingsMatchedByBusinessClass.AsyncQueueMapping.AsyncLogProducer
					NotificationInformation = MappingsMatchedByBusinessClass.AsyncQueueMapping.NotificationInformation 
					MappingFound = true	
				else
				if (AsyncActionRequest.ParentQueue exists 
				or  AsyncActionRequest.ParentQueue.ValidDataAreaQueue) 
					AsyncQueueDefinition = AsyncActionRequest.ParentQueue
					
			if (MappingSaveHistory = MappingSaveHistory.No
			or  AsyncActionRequest.AnyTypeUpgradeRequest) 
				SaveHistory = false
			else
			if (MappingSaveHistory = MappingSaveHistory.Yes)
				SaveHistory = true
			else
				SaveHistory = AsyncQueueDefinition.SaveHistory

		DataAreaConstraintBlock
			constraint (AsyncActionRequest.AcceptsRequests)
				"DataAreaIsNotCurrentlyDefinedToAcceptRequests"	
 
		UpdateAsyncActionInvocation
			if (AsyncActionRequest.SaveResultsOption)
	            invoke Update AsyncActionInvocationRel
	            		invoked.LastModTime			= current timestamp 
	                    invoked.AsyncActionInvocationStatus  = Status
	                    invoked.Name				= AsyncActionRequest.Name
	                    invoked.Group				= AsyncActionRequest.Group
	                    invoked.Actor				= AsyncActionRequest.Actor
	                    invoked.DataArea			= AsyncActionRequest.DataArea 
	                    
	                    if (invoked.TimeToExec = blank)
	                    	invoked.TimeToExec		= AsyncActionRequest.TimeToExec
	                    	
	                    invoked.ActionParameters	= AsyncActionRequest.ActionParameters
	                    invoked.ImplementingClass	= AsyncActionRequest.ImplementingClass
	                    invoked.AsyncAction			= AsyncActionRequest.AsyncAction
	                    
	                    if (AsyncActionRequest.InvokedFrom.AsyncActionInvocationRel exists)
		                    invoked.InvokedFrom			= AsyncActionRequest.InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation
		                    invoked.InvokedFromName		= AsyncActionRequest.InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation.Name
		                    
	                    invoked.AsyncActionRequest		= AsyncActionRequest
	                    invoked.AsyncActionTrigger		= AsyncActionTrigger
	                    invoked.TriggerUniqueID			= UniqueID
	                    invoked.StatusChanged			= StatusChanged
	                    invoked.Started					= Started
	                    invoked.Finished				= Finished
	                    invoked.FailureCode				= FailureCode
	                    invoked.Result					= Result
	                    invoked.ErrorMessage			= ErrorMessage
	                    invoked.InitialStarted			= InitialStarted 
						invoked.ElapsedRunningDuration 	= ElapsedRunningDuration
						invoked.RunOnErrorAction 		= AsyncActionRequest.RunOnErrorAction
						invoked.RunOnErrorFailureCode 	= RunOnErrorFailureCode
						invoked.RunOnErrorResult		= RunOnErrorResult
						invoked.RunOnErrorErrorMessage	= RunOnErrorErrorMessage
	                    
	                    if (AsyncActionRequestInvocationRel exists)
	                    	invoked.Type				= AsyncActionRequestInvocationRel.Type
                    
		RestartWaitForActionGroup
			if (AsyncActionRequest.ActionGroup entered
			and RootAsyncActionRequestForActionGroup.WaitForActionGroupTriggersExist 
			and RootAsyncActionRequestForActionGroup.CanResumeStream)
				invoke WaitForActionGroup.Requeue RootAsyncActionRequestForActionGroup.first WaitForActionGroupTriggers
					resume on error 
					
		InactiveInGroupCheck
			if (AsyncActionRequest exists 
			and not AsyncActionRequest.InactiveInGroup)
				invoke CheckForInactiveInGroup AsyncActionRequest
					resume on error
						log untranslatable:"YELLOW_ALERT:_FailedAsync\Action\Request_Inactive\In\Group\CheckFor<this instance.AsyncActionRequest>,<this instance.AsyncActionRequest.Name>"
				



		CheckInRequestDataArea
			if (not InRequestDataArea)
				confirmation required
					"Warning:_DeleteOfThisRecordShouldBeDoneFromThe_'<AsyncActionRequest.DataArea>'_Data_Area.AreYouSureYouWantToDelete?" 
					
		BlacklistedActionCheck
			constraint (not AsyncActionRequest.ActionIsBlacklisted) 
				"ActionIsBlocklistedAndIsNotAllowedToExecute.RequeueNotAllowed."	

			constraint (not AsyncActionRequest.RunOnErrorActionIsBlacklisted) 
				"RunOnErrorActionIsBlocklistedAndIsNotAllowedToExecute.RequeueNotAllowed."	
				
		DeleteFinishedCheckpointCheck
			if (CheckPointsExist)
				log "AsyncActionTrigger-CheckPointExistedAndWasDeletedForFinishedTrigger:DataArea<AsyncActionRequest.DataArea>,Name<AsyncActionRequest.Name>,BusinessView<AsyncActionRequest.ImplementingClass>,Action<AsyncActionRequest.AsyncAction>,Trigger<AsyncActionTrigger>,UniqueID<UniqueID>"
			 	invoke DeleteForRunOnErrorRequest CheckPointRel		
			 	
		RequeueBlock
			include BlacklistedActionCheck
			include DataAreaConstraintBlock
			
			if {ClearGroupStart}
				invoke SetActionGroupStartTime AsyncActionRequest 
					invoked.PrmStartTime = blank 
			
			if (SynchronizedGroup entered and not CanRequeueSynchronizedGroup) 
				if (not Status.WaitForSynchronizedGroup)  
					make transition to WaitForSynchronizedGroup
					
					if (DataArea entered) 
						invoke EnableNextTrigger SynchronizedGroup 
							invoked.ParamDataArea = DataArea
			else
				make transition to Queued
			
			if (not TranDisableAudit and AsyncAuditingEnabled and not AsyncAuditActionDisabled)
				invoke Create AsyncAuditEntry 
				
			TranDisableAudit = false
			
	Actions
		ConsistencyCheck is a Set Action
			restricted
			run in foreground
			disable checkpoint
			Instance Selection
				where (ConsistencyCheckInvalid = false)

			Sort Order
				ConsistencyCheckInvalid
    			Status
    			Priority
 				
			Action Rules
				Instance Rules
					invoke ConsistencyCheckTrigger
						resume on error
		
		ConsistencyCheckTrigger is an Instance Action
			restricted
			Action Rules

























			Exit Rules
				if (ConsistencyCheckCommit) 
					commit transaction
					
		SendNotification is an Instance Action 
			Action Rules
				invoke SendNotificationInternal
					invoked.Blocklisted = false

		SendNotificationInternal is an Instance Action 
			restricted
			default label is "SendNotification"
			Parameters
				Blocklisted is Boolean
			Action Rules
				if (AsyncActionRequest.SystemRequest.No
				and (((Status.Finished
			    or     Status.InProgress) 
				and (AsyncActionRequest.NotificationType = 3 
				or (AsyncActionRequest.NotificationType = 4  
				and AsyncActionRequest.ActionGroupSuccessfullyCompletedExcludeThis))) 
				or ((not Status.Finished 
				and  not Status.InProgress)
				and not AsyncActionRequest.NotificationType = 1))) 
					invoke Create UserNotification
						invoked.Actor 			= AsyncActionRequest.Actor
						


						if (Status.InProgress
						or  Status.Finished)
							if (AsyncActionRequest.NotificationType = 4)
								invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionActionGroupComplete
							else  
							if (SaveHistory = false
							and AsyncActionRequest.PendingScheduling = false
							and OtherUnfinishedAsyncActionTriggerRel not exists)
								if (AsyncActionRequest.ActionType = "DocumentAction") 
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionDocumentCompleteClean
								else
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionCompleteClean
							else
								if (AsyncActionRequest.ActionType = "DocumentAction")
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionDocumentComplete
								else
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionComplete
						else 
							if (AsyncActionRequest.ActionType = "DocumentAction")
								if (Status = Status.LostWhileInProgress)
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionDocumentLostError
								else
								if (Blocklisted)
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationBlocklistedMessage
								else
								if (FailureCode.TerminationRequested)
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionTerminationRequested
								else
								if (FailureCode.TerminationInternallyRequested)
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionInternalTerminationRequested
								else
									invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionDocumentError
							else
								if (HasRunOnErrorAction)
									if (FailureCode.TerminatedAbnormallyPendingRunOnError) 
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionErrorRunOnErrorPending
									else
									if (RunOnErrorFailureCode.OK) 
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionErrorRunOnErrorOK
									else
									if (FailureCode.TerminationRequested)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionTerminationRequestedError
									else
									if (FailureCode.TerminationInternallyRequested)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionInternalTerminationRequestedError
									else
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionErrorRunOnErrorFailed
								else
									if (Status = Status.LostWhileInProgress)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionLostError
									else
									if (Blocklisted)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationBlocklistedMessage
									else
									if (FailureCode.TerminationRequested)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionTerminationRequestedError
									else
									if (FailureCode.TerminationInternallyRequested)
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionInternalTerminationRequestedError
									else
										invoked.Description = this instance(locale of AsyncActionRequest.Actor.IsoLocale).NotificationDescriptionError
						
						invoked.Details			= AsyncActionRequest.Name 
						invoked.SourceType 		= 4 
			
		DeleteFinishedTriggers is a Set Action
			disable checkpoint
			Parameters
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3
				CurrentDataAreaOnly	is Boolean

			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else	 
					if (not PurgeOffsetDays entered)
						required	
							"MustEnterThroughFinishDateOrOffset"
					else
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (Status.Finished
				and    Finished < LocalThruDate
				and   (not CurrentDataAreaOnly
				or     InRequestDataArea))

			Sort Order
				Status
				Finished
				AsyncActionRequest
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal
					
		DeleteMyFinishedTriggers is a Set Action
			disable checkpoint
			Parameters
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3
				
			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else	 
					if (not PurgeOffsetDays entered)
						required	
							"MustEnterThroughFinishDateOrOffset"
					else
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (Status.Finished
				and    Finished < LocalThruDate
				and   (AsyncActionRequest.Actor = actor
				or     AsyncActionRequest.AuthenticatedActor = actor)
				and    InRequestDataArea)

			Sort Order
				Status
				Finished
				AsyncActionRequest
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal	 	
					
		DeleteFinishedTriggersForQueue is a Set Action
			disable checkpoint
			Parameters
				PrmQueue			is an AsyncQueueDefinition
					default label is "Queue"
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3
				CurrentDataAreaOnly	is Boolean 

			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				PrmQueue
					required
					
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else
					if (PurgeOffsetDays entered)
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (AsyncQueueDefinition = PrmQueue
				and    Status.Finished
				and   (LocalThruDate = "00000000" 
				or     Finished < LocalThruDate)
				and   (not CurrentDataAreaOnly
				or     InRequestDataArea))

			Sort Order
				AsyncQueueDefinition
				Status
				Finished
				AsyncActionRequest
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal
					
		DeleteMyFinishedTriggersForQueue is a Set Action
			disable checkpoint
			Parameters
				PrmQueue			is an AsyncQueueDefinition
					default label is "Queue"
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3
				
			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				PrmQueue
					required
					
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else
					if (PurgeOffsetDays entered)
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (AsyncQueueDefinition = PrmQueue
				and    Status.Finished
				and   (LocalThruDate = "00000000" 
				or     Finished < LocalThruDate)
				and   (AsyncActionRequest.Actor = actor
				or     AsyncActionRequest.AuthenticatedActor = actor)
				and    InRequestDataArea)

			Sort Order
				AsyncQueueDefinition
				Status
				Finished
				AsyncActionRequest
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal					
					
		DeleteFinishedTriggersForRequest is a Set Action
			disable checkpoint
			Parameters
				PrmRequest			is an AsyncActionRequest
					default label is "Request"
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3
				
			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				PrmRequest
					required
					
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else
					if (PurgeOffsetDays entered)
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (AsyncActionRequest = PrmRequest
				and    Status.Finished
				and   (LocalThruDate = "00000000" 
				or     Finished < LocalThruDate))

			Sort Order
				AsyncActionRequest
				Status
				Finished
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal
					
		DeleteFinishedTriggersForMyRequest is a Set Action 
			disable checkpoint
			Parameters
				PrmRequest			is an AsyncActionRequest
					default label is "Request"
				ThruDate 			is Date
				PurgeOffsetDays 	is Numeric size 3

			Local Fields
				LocalThruDate 	is Date
					value is ThruDate		
					


			Parameter Rules
				PrmRequest
					required
					
				ThruDate   
					if (ThruDate entered)
						LocalThruDate = (ThruDate + 1 day)
					else
					if (PurgeOffsetDays entered)
						LocalThruDate  = current date - (PurgeOffsetDays - 1)
			
				PurgeOffsetDays
					constraint (not ThruDate entered)
						"CannotEnterBothThroughFinishDateAndOffset"

			Instance Selection
				where (AsyncActionRequest = PrmRequest
				and    Status.Finished
				and   (LocalThruDate = "00000000" 
				or     Finished < LocalThruDate)
				and   (AsyncActionRequest.Actor = actor
				or     AsyncActionRequest.AuthenticatedActor = actor)
				and    InRequestDataArea)

			Sort Order
				AsyncActionRequest
				Status
				Finished
				AsyncActionTrigger	
									
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
				Instance Rules
					include DeleteFinishedCheckpointCheck
					invoke Finished.DeleteInternal	
				

		UpdateTriggerFields is a Set Action 
			disable checkpoint
			restricted
				
			Local Fields
				LocDataArea is a DataArea
				
			Instance Selection
				where (DataArea = blank)
			
			Sort Order is AsyncActionTriggerByStatus
			
			Action Rules
				Empty Set Rules
					LocDataArea = parentcontext.dataarea
					
					if (LocDataArea.IsEnvironmentDataArea)
						invoke Import ConfigurationParameter
							invoked.ConfigurationParameter.ConfigurationID = "async"
							invoked.ConfigurationParameter.Name = "create_all_synchronized_group_triggers"
							invoked.Type = 8233 
							invoked.Value = "true"
								
						invoke Import ConfigurationParameter
							invoked.ConfigurationParameter.ConfigurationID = "async"
							invoked.ConfigurationParameter.Name = "synchronized_group_check_triggers"
							invoked.Type = 8233 
							invoked.Value = "true"
				
				Instance Rules
					if (not LocDataArea.IsEnvironmentDataArea)
						end set action instance loop
					else
						if (not DataArea = AsyncActionRequest.DataArea)
							DataArea = AsyncActionRequest.DataArea
							
						if (not SynchronizedGroup = AsyncActionRequest.SynchronizedGroup)
							SynchronizedGroup = AsyncActionRequest.SynchronizedGroup
						
				Set Rules
					Entrance Rules
						LocDataArea = parentcontext.dataarea
						
					Exit Rules
						if (LocDataArea.IsEnvironmentDataArea)
							invoke Import ConfigurationParameter
								invoked.ConfigurationParameter.ConfigurationID = "async"
								invoked.ConfigurationParameter.Name = "create_all_synchronized_group_triggers"
								invoked.Type = 8233 
								invoked.Value = "true"
								
							invoke Import ConfigurationParameter
								invoked.ConfigurationParameter.ConfigurationID = "async"
								invoked.ConfigurationParameter.Name = "synchronized_group_check_triggers"
								invoked.Type = 8233 
								invoked.Value = "true"
					
		DeleteCheckPointRecords is an Instance Action
			default label is "DeleteCheckpointRecords"
			restricted
			Action Rules					
				initialize InterruptedRetryCount 
				initialize LastMemAgentInterruptTime 
				initialize MemAgentRetryCount 
				invoke DeleteForRunOnErrorRequest CheckPointRel	
		

		RequestTermination is an Instance Action 
			refresh and lock this instance 

			disable multiple instance selection
			confirmation required
				"TerminatingARunningActionCanHaveAdverseConsequences.AreYouSure?"
			completion message is "TerminationRequested"
			Parameters
				ParamRemoteRuntimeData is a AsyncRuntimeData
					default label is "RemoteRuntimeData"
			
			Parameter Rules	
				ParamRemoteRuntimeData
					initial value is RemoteRuntimeData
					required
				
			Entrance Rules
				if (LocTerminationRequestedOpt entered)
					TerminationRequestedOption = LocTerminationRequestedOpt
				else
					TerminationRequestedOption = TerminationRequestedOption.ManuallyRequested 
				
			Action Rules
				if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				TranDisableAudit = false


		RequestTerminationInternal is an Instance Action
			restricted
			default label is "RequestTermination"
			disable multiple instance selection
			completion message is "TerminationRequested"
					
			Entrance Rules

				TranDisableAudit = true 
				LocTerminationRequestedOpt = TerminationRequestedOption.InternallyRequested
				
			Action Rules
				if (RecordFastLocked) 
					invoke RequestTermination	
						resume on error
						invoked.ParamRemoteRuntimeData = RemoteRuntimeData
					
				TranDisableAudit = false
				LocTerminationRequestedOpt = TerminationRequestedOption.NotRequested


		AttemptTermination is an Instance Action
			restricted
			manual update
			

			
		RequestStackTrace is an Instance Action 
			manual update
			disable multiple instance selection
			completion message is "RequestedStackTrace.PleaseCheckNotifications"
			Parameters
				ParamRemoteRuntimeData is a AsyncRuntimeData
					default label is "RemoteRuntimeData"
			
			Parameter Rules	
				ParamRemoteRuntimeData
					initial value is RemoteRuntimeData
					required
				
			Action Rules
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
				
				TranDisableAudit = false



		AttemptStackTrace is an Instance Action
			restricted


			

		PrepareForShutdown is a Set Action
			restricted
			run in foreground
			disable checkpoint	
			Instance Selection
				where (Status.InProgress and not TerminationRequested and TerminationRequestedOption.NotRequested)
			Sort Order is AsyncActionTriggerByStatusCreateStamp
	    			
			Action Rules
				Instance Rules
					invoke RequestTerminationInternal	
						resume on error
					commit transaction
						
		ResetFailedTriggersForQueue is a Set Action
			disable checkpoint	
			
			Parameters
				PrmQueue			is an AsyncQueueDefinition
					default label is "Queue"
				PrmLostWhilePending is Boolean
					default label is "IncludeLostWhilePendingTriggers"
				PrmFailedToStart is Boolean
					default label is "IncludeFailedToStartTriggers"	
				PrmLostWhileInProgress is Boolean
					default label is "IncludeLostWhileInProgressTriggers"	
				PrmTerminatedAbnormally is Boolean
					default label is "IncludeTerminatedAbnormallyTriggers"	
				CreatedFrom 		is TimeStamp
				CreatedThrough 		is TimeStamp
				CurrentDataAreaOnly	is Boolean 

			Parameter Rules
				PrmQueue
					required
					
				PrmLostWhilePending
					initial value is true
					
					if (not PrmLostWhilePending and not PrmFailedToStart and not PrmLostWhileInProgress and not PrmTerminatedAbnormally)
						required
							"MustChooseAtLeastOneStatus"
							
				PrmFailedToStart
					initial value is true
					
				PrmLostWhileInProgress
					initial value is true
					
				PrmTerminatedAbnormally
					initial value is true	
					
				CurrentDataAreaOnly
					initial value is true						
				
			Instance Selection
				where (AsyncQueueDefinition = PrmQueue
				and   ((PrmLostWhilePending and Status.LostWhilePending)
				or    (PrmFailedToStart and Status.FailedToStart)
				or    (PrmLostWhileInProgress and Status.LostWhileInProgress)
				or    (PrmTerminatedAbnormally and Status.TerminatedAbnormally and not IsTriggerAllocated))
				and   (CreatedFrom not entered or create stamp >= CreatedFrom)
				and   (CreatedThrough not entered or create stamp <= CreatedThrough)
				and   (not CurrentDataAreaOnly or InRequestDataArea)) 
			
			Sort Order is Queued							
			
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
				Instance Rules 
					if (not AsyncActionRequest.ActionIsBlacklisted and not AsyncActionRequest.RunOnErrorActionIsBlacklisted)
						if (Status.LostWhilePending)
							invoke LostWhilePending.Requeue
								resume on error	
						else
						if (Status.FailedToStart)
							invoke FailedToStart.Requeue
								resume on error	
						else
						if (Status.LostWhileInProgress)
							invoke LostWhileInProgress.Requeue
								resume on error 
						else
						if (Status.TerminatedAbnormally
						and not IsTriggerAllocated)
							invoke TerminatedAbnormally.Requeue
								resume on error 
															
		ResetFailedTriggersForRequest is a Set Action
			restricted
			disable checkpoint	
			
			Parameters
				PrmRequest			is an AsyncActionRequest
					default label is "Request"
				PrmLostWhilePending is Boolean
					default label is "IncludeLostWhilePendingTriggers"
				PrmFailedToStart is Boolean
					default label is "IncludeFailedToStartTriggers"
				PrmLostWhileInProgress is Boolean
					default label is "IncludeLostWhileInProgressTriggers"	
				PrmTerminatedAbnormally is Boolean
					default label is "IncludeTerminatedAbnormallyTriggers"	
				CreatedFrom 		is TimeStamp
				CreatedThrough 		is TimeStamp
				CurrentDataAreaOnly	is Boolean 

			Parameter Rules
				PrmRequest
					required
					
				PrmLostWhilePending
					initial value is true
					
					if (not PrmLostWhilePending and not PrmFailedToStart and not PrmLostWhileInProgress and not PrmTerminatedAbnormally)
						required
							"MustChooseAtLeastOneStatus"
						
				PrmFailedToStart
					initial value is true					
						
				PrmLostWhileInProgress
					initial value is true
					
				PrmTerminatedAbnormally
					initial value is true	
					
				CurrentDataAreaOnly
					initial value is true						
				
			Instance Selection
				where (AsyncActionRequest = PrmRequest
				and   ((PrmLostWhilePending and Status.LostWhilePending)
				or    (PrmFailedToStart and Status.FailedToStart)
				or    (PrmLostWhileInProgress and Status.LostWhileInProgress)
				or    (PrmTerminatedAbnormally and Status.TerminatedAbnormally and not IsTriggerAllocated))
				and   (CreatedFrom not entered or create stamp >= CreatedFrom)
				and   (CreatedThrough not entered or create stamp <= CreatedThrough)
				and   (not CurrentDataAreaOnly or InRequestDataArea)) 
			
			Sort Order is AsyncActionTriggerByRequest							
			
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
				Instance Rules 
					if (not AsyncActionRequest.ActionIsBlacklisted and not AsyncActionRequest.RunOnErrorActionIsBlacklisted)
						if (Status.LostWhilePending)
							invoke LostWhilePending.Requeue
								resume on error	
						else
						if (Status.FailedToStart)
							invoke FailedToStart.Requeue
								resume on error	
						else
						if (Status.LostWhileInProgress)
							invoke LostWhileInProgress.Requeue
								resume on error 
						else
						if (Status.TerminatedAbnormally
						and not IsTriggerAllocated)
							invoke TerminatedAbnormally.Requeue
								resume on error 	
		
		SetSynchronizedGroup is an Instance Action  
			restricted
			Action Rules					
				SynchronizedGroup = AsyncActionRequest.SynchronizedGroup
				
		SetDataArea is an Instance Action  
			restricted
			Action Rules					
				DataArea = AsyncActionRequest.DataArea
				
		SetPendingStatus is an Instance Action
			restricted
			Parameters
				ParamAsyncTriggerPendingStatusInfo is a AsyncTriggerPendingStatusInfo
					default label is "PendingStatusInformation"
				ParamSetActionStats is a SetActionStats
    				default label is "SetActionStats"
			Action Rules
				PendingStatusInfo = ParamAsyncTriggerPendingStatusInfo
				
				if (ParamSetActionStats entered)
					SetActionStats 	= ParamSetActionStats
				
	StateCycles
	
		TriggerCycle is a StateCycle
			state field is Status
			initial state is Queued
			
			Queued is a State
				Entrance Rules
					StatusChanged 	= current timestamp
					QueuedRetryTime = StatusChanged
					initialize PendingStatusInfo 
					
					if (not RunOnErrorFailureCode.TerminatedAbnormally)
						AttemptCount += 1
						
					ConsistencyCheckInvalid = true
					TerminationRequested = false
					TerminationRequestedOption = TerminationRequestedOption.NotRequested 
					
					if (FailureCode = 32 or FailureCode = 33) 
						FailureCode = 0






					if (!AsyncActionTrigger = blank)
						include UpdateAsyncActionInvocation
						
				Update is an Update Action
					Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
					Exit Rules
						include UpdateAsyncActionInvocation
						
				Delete is a Delete Action
					refresh and lock this instance
					Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						
						if (OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
				Create is a Create Action
					restricted
		    	 	Local Fields
						MappingSaveHistory is a AsyncSaveHistory
						MappingFound is Boolean
						
    				Action Rules
    					include DataAreaConstraintBlock
    					SynchronizedGroup = AsyncActionRequest.SynchronizedGroup
    					DataArea = AsyncActionRequest.DataArea
						
					Exit Rules
						include QueueMappingResolve 
						include UpdateAsyncActionInvocation








				ProcessTrigger is an Instance Action 
					restricted
					
					Action Rules
						include DataAreaConstraintBlock
								



	    		RequeueAutomatic is an Instance Action
		    	 	Local Fields
						MappingSaveHistory is a AsyncSaveHistory
						MappingFound is Boolean
						
	    			Action Rules
	    				include DataAreaConstraintBlock
	    				
	    			Exit Rules
						include QueueMappingResolve  
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
							

				RequeueManual is an Instance Action
					Parameters
						NewQueueDefinition is a AsyncQueueDefinition
						NewPriority is a AsyncPriority
						NewSaveHistory is Boolean
					Parameter Rules
						NewQueueDefinition
							initial value is AsyncQueueDefinition
						NewPriority
							initial value is Priority
						NewSaveHistory
							initial value is SaveHistory
						
					Action Rules
						include DataAreaConstraintBlock
						
						invoke Update 
							invoked.SaveHistory = NewSaveHistory
							invoked.Priority = NewPriority
							invoked.AsyncQueueDefinition = NewQueueDefinition

				RequeueWithDBSessionDebug is an Instance Action
					valid when (not AsyncActionRequest.DBSessionDebugIsEnabled)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
					Action Rules
						include BlacklistedActionCheck
						include DataAreaConstraintBlock
						invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
						make transition to Queued
						
				RequeueWithoutDBSessionDebug is an Instance Action
					valid when (AsyncActionRequest.DBSessionDebugIsEnabled)
					Action Rules
						include BlacklistedActionCheck
						include DataAreaConstraintBlock
						invoke DisableDBSessionDebug AsyncActionRequest
						make transition to Queued
							
			    SetToPendingStart is an Instance Action
			    	restricted
			    	Parameters
			    		PendingRuntimeData is a AsyncRuntimeData
			    	Parameter Rules
			    		PendingRuntimeData
			    			default to "LOCAL"
    				Action Rules
    					include DataAreaConstraintBlock
    					RuntimeData = PendingRuntimeData
    					RemoteRuntimeData = blank
    					make transition to PendingStart
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
				ChangeQueue is an Instance Action
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition   
							default label is "NewQueue"
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
						
			PendingStart is a State
				Entrance Rules
					Pending = current timestamp
					StatusChanged = Pending
					ConsistencyCheckInvalid = false
					
					include UpdateAsyncActionInvocation
								
    			Update is an Update Action
    				Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
    			
    			Delete is a Delete Action
    				refresh and lock this instance
    				Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                    		invoke TriggerInvocationDelete AsyncActionInvocationRel
						
    			SetToLostWhilePending is an Instance Action
    				Action Rules
    					FailureCode = 40
    					make transition to LostWhilePending
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    				 
    			SetToFailedToStart is an Instance Action
    				Parameters
    					FailCode is an AsyncTriggerFailureCode
    					Exception is an AsyncException
    					ExceptionMessage is an AsyncException
    				Action Rules
    					FailureCode	 = FailCode
    					Result 		 = Exception
    					ErrorMessage = ExceptionMessage
    					make transition to FailedToStart
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    				 
    			SetToInProgress is an Instance Action
    				restricted
    				Action Rules
    					make transition to InProgress
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
	   			SetToQueued is an Instance Action
	   				restricted
    				Action Rules
    					RuntimeData = blank
    					RemoteRuntimeData = blank
    					make transition to Queued
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
	   			SetToInRetry is an Instance Action
	   				restricted
    				Action Rules
    					RuntimeData = blank
    					RemoteRuntimeData = blank
    					make transition to InRetry
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
				SetToTerminatedAbnormally is an Instance Action
    				restricted 
    				Parameters
    				Action Rules
    					if (AsyncActionRequest.HasRunOnErrorAction)
    						FailureCode = 31
    					else
    						FailureCode = 30
    						
    					make transition to TerminatedAbnormally
    					


    					if (FailureCode.TerminatedAbnormallyPendingRunOnError) 
    						invoke DeleteCheckPointRecords
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false			
    					
			LostWhilePending is a State
				Entrance Rules
					StatusChanged = current timestamp
					
					if (TerminationRequestedOption.InternallyRequested) 
						ConsistencyCheckInvalid = false
					else
					if  (not TerminationRequested
					and  not TerminationRequestedOption.ManuallyRequested 
					and  not AsyncActionRequest.SystemRequest.No
					and  AttemptCount < MaxSystemAutoAttempt)
						ConsistencyCheckInvalid = false
					else
						ConsistencyCheckInvalid = true	
			
					include UpdateAsyncActionInvocation

    			Update is an Update Action
    				Action Rules
						if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false	
    			
    			Delete is a Delete Action
    				refresh and lock this instance
    				Entrance Rules
						if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
    			Requeue is an Instance Action
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with true

				ChangeQueue is an Instance Action
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition 
							default label is "NewQueue"  
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						make transition to Queued  		
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
    					
     			RequeueWithDBSessionDebug is an Instance Action
    				valid when (not AsyncActionRequest.DBSessionDebugIsEnabled)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					make transition to Queued
    			RequeueWithoutDBSessionDebug is an Instance Action
    				valid when (AsyncActionRequest.DBSessionDebugIsEnabled)
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
    					make transition to Queued
    
			FailedToStart is a State
				Entrance Rules
					StatusChanged = current timestamp
					initialize PendingStatusInfo 
					
					if (TerminationRequestedOption.InternallyRequested) 
						ConsistencyCheckInvalid = false
					else
					if  (not TerminationRequested
					and  not TerminationRequestedOption.ManuallyRequested 
					and  not AsyncActionRequest.SystemRequest.No
					and  AttemptCount < MaxSystemAutoAttempt)
						ConsistencyCheckInvalid = false
					else
						ConsistencyCheckInvalid = true	

					include UpdateAsyncActionInvocation
						
    			Update is an Update Action
    				Action Rules
						if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
							
						TranDisableAudit = false
    			
    			Delete is a Delete Action
    				refresh and lock this instance
    				Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
    			Requeue is an Instance Action 
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with true
    					
    			ChangeQueue is an Instance Action
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition
							default label is "NewQueue"   
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						make transition to Queued  		
						
						if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false		
						    					
    			RequeueWithDBSessionDebug is an Instance Action
    				valid when (not AsyncActionRequest.DBSessionDebugIsEnabled)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					make transition to Queued
    			RequeueWithoutDBSessionDebug is an Instance Action
    				valid when (AsyncActionRequest.DBSessionDebugIsEnabled)
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
    					make transition to Queued
			
			InProgress is a State
				Entrance Rules
					Started = current timestamp
					StatusChanged = Started
					initialize PendingStatusInfo 
					
					if (not InitialStarted entered
					and RetryCount = blank) 
						InitialStarted = Started
					
					Result = blank
					ErrorMessage = blank
					ConsistencyCheckInvalid = false
					
					if (not AsyncActionRequest.ActionGroupStartTime entered) 
						invoke SetActionGroupStartTime AsyncActionRequest
							invoked.PrmStartTime = system current timestamp 
							
					include UpdateAsyncActionInvocation
				
				Exit Rules
					ElapsedRunningDuration += (current timestamp - Started) 
					
    			Update is an Update Action 
    				valid when (not IsTriggerAllocated)
    				Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
    			
    			Delete is a Delete Action 
    				restricted
    				refresh and lock this instance
					Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
						 		
					Action Rules
						include CheckInRequestDataArea
						
                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel


    			
    			SetToLostWhileInProgress is an Instance Action
    				restricted 
    				Parameters
    					SkipTerminationAttempt is Boolean
    						default label is untranslatable 
    					ParamFailureCode is a AsyncTriggerFailureCode 
    						default label is "FailureCode"
    				Entrance Rules
    					if (not SkipTerminationAttempt)

	    					if (RemoteRuntimeData entered)
								invoke RequestTerminationInternal	
									resume on error
    				Action Rules
    					FailureCode = ParamFailureCode 
    					make transition to LostWhileInProgress
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false	
    					
				ManualSetToLostWhileInProgress is an Instance Action
					default label is "SetToLostWhileInProgress"
    				Action Rules
    					constraint (not IsTriggerAllocated)
    						"TriggerIsActive.CannotChangeStatusUnlessTriggerIsNotActuallyRunning"
    					
    					TranDisableAudit = false 
    					
    					invoke SetToLostWhileInProgress    		
    						invoked.SkipTerminationAttempt = false	
    						invoked.ParamFailureCode = 42 
    					
    			SetToTerminatedAbnormally is an Instance Action
    				restricted 
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException
    					NumberOfInterrupts is Numeric size 4
						InterruptedWithin  is Numeric size 19
    				Action Rules
    					Result 			= Exception
    					SetActionStats 	= ParamSetActionStats
    					ErrorMessage 	= ExceptionMessage
    					
    					if (NumberOfInterrupts > 0) 
    						if (not AsyncBlockedAction exists)
    							invoke CreateInternal AsyncBlockedAction
    								resume on error
									invoked.AsyncBlocklist.DataArea 	  = DataArea
									invoked.AsyncBlocklist.BusinessView   = AsyncActionRequest.ImplementingClass
									invoked.AsyncBlocklist.BusinessAction = AsyncActionRequest.AsyncAction
									invoked.AsyncBlocklist.MappingField1  = AsyncActionRequest.MappingField1
									invoked.AsyncBlocklist.MappingField2  = AsyncActionRequest.MappingField2
									invoked.ManuallyCreated 			  = false
	    							invoked.NumberOfInterrupts            = NumberOfInterrupts
	    							invoked.InterruptedWithin			  = InterruptedWithin

						if (TerminationRequested or TerminationRequestedOption.ManuallyRequested) 
							FailureCode = 32 
						else
						if (TerminationRequestedOption.InternallyRequested) 
							FailureCode = 33 
						else
    					if (AsyncActionRequest.HasRunOnErrorAction)
    						FailureCode = 31 
    					else
    						FailureCode = 30 
    						
    					make transition to TerminatedAbnormally
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false	
    					


    					if (FailureCode.TerminatedAbnormallyPendingRunOnError) 
    						invoke DeleteCheckPointRecords

				ManualSetToTerminatedAbnormally is an Instance Action
					default label is "SetToTerminatedAbnormally"    
					Action Rules
    					constraint (not IsTriggerAllocated)
    						"TriggerIsActive.CannotChangeStatusUnlessTriggerIsNotActuallyRunning" 	
    					
    					TranDisableAudit = false 
    					
    					invoke SetToTerminatedAbnormally
    						invoked.Exception = "ManuallySetToTerminatedBy<actor>"
    						invoked.ExceptionMessage = "ManuallySetToTerminatedBy<actor>" 
				
    					 
    			SetToFinished is an Instance Action
    				restricted
    				refresh and lock this instance
    				Parameters
    					ResultText 			is Text
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					RequestUpdateTime	is TimeStamp 
    					
    				Action Rules
    					Result = ResultText 
    					SetActionStats = ParamSetActionStats
    					FailureCode = 0
    					
    					if (AsyncActionRequest.SystemRequest.AutoDisable)
    						invoke CheckAutoDisablePendingScheduling AsyncActionRequest
    							invoked.RequestUpdateTime = RequestUpdateTime
    					
    					make transition to Finished
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
    				Exit Rules
    					include InactiveInGroupCheck
    					include RestartWaitForActionGroup

    			SetToRetry is an Instance Action
    				restricted
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException
    					ParamIsInterrupt is Boolean 
    						default label is "Interrupt" 
    					ParamMemAgentInterruptTime is TimeStamp 
    					ParamAsyncRetryInfo is an AsyncRetryInfo 
    						default label is "RetryInformation"
    				Local Fields
    					WorkMaxRetries is Numeric size 2
    				Action Rules
    					SetActionStats = ParamSetActionStats
    					
    					if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo or ParamAsyncRetryInfo.MaxRetries = 0 or ParamAsyncRetryInfo.MaxRetries > MaxRetries)
    						WorkMaxRetries = MaxRetries
    					else
    						WorkMaxRetries = ParamAsyncRetryInfo.MaxRetries
    						
    					if (RetryCount < WorkMaxRetries
    					and (not ParamIsInterrupt 
    					or  (ParamMemAgentInterruptTime entered and MaxMemAgentRetryWindowSeconds entered and (LastMemAgentInterruptTime not entered or (MemAgentRetryCount < MaxMemAgentRetryCount) and ((ParamMemAgentInterruptTime - LastMemAgentInterruptTime) >= MaxMemAgentRetryWindowSeconds))) 
    					or  ((ParamMemAgentInterruptTime not entered or MaxMemAgentRetryWindowSeconds not entered) and InterruptedRetryCount < MaxInterruptedRetryCount))) 
	    					Result = Exception
	    					ErrorMessage = ExceptionMessage
							RetryCount = RetryCount + 1
							AttemptCount += 1
							
							if (ParamIsInterrupt) 
								if (ParamMemAgentInterruptTime entered) 
									MemAgentRetryCount += 1
									
									if (ParamMemAgentInterruptTime entered) 
										LastMemAgentInterruptTime = ParamMemAgentInterruptTime
								else
									InterruptedRetryCount += 1
							
							if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo) 
		    					if (RetryStart entered)
		    						RetryStart = current timestamp + (RetryCount * 2)
		    					else
			    					RetryStart = current timestamp
		    				else
		    					if (ParamAsyncRetryInfo.RetryTime entered)
		    						RetryStart = ParamAsyncRetryInfo.RetryTime
		    					else
		    					if (ParamAsyncRetryInfo.RetryMultiplier entered and RetryCount > 1)
		    						RetryStart = current timestamp + ((RetryCount - 1) * ParamAsyncRetryInfo.RetryMultiplier * ParamAsyncRetryInfo.RetryDelaySeconds)
		    					else
		    						RetryStart = current timestamp + (RetryCount * ParamAsyncRetryInfo.RetryDelaySeconds)
		    						
	    					make transition to InRetry
	    					
	    					if (not TranDisableAudit and AsyncAuditingEnabled)
								invoke Create AsyncAuditEntry
							
							TranDisableAudit = false
	    				else
	    					if (ParamMemAgentInterruptTime entered) 
								LastMemAgentInterruptTime = ParamMemAgentInterruptTime
								
	    					invoke SetToTerminatedAbnormally
	    						invoked.Exception = Exception
	    						invoked.ExceptionMessage = ExceptionMessage
				
				SetToQueued is an Instance Action
					restricted
    				Action Rules
    					RuntimeData = blank
    					RemoteRuntimeData = blank
    					make transition to Queued
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
				SetToWaitForActionGroup is an Instance Action 
    				restricted 
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException	
    				Action Rules
    					Result = Exception
    					ErrorMessage = ExceptionMessage
    					SetActionStats = ParamSetActionStats
   						FailureCode = 50
    					make transition to WaitForActionGroup
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
    					
				SetRemoteRuntimeData is an Instance Action
			    	restricted
			    	Parameters
			    		ParamRemoteRuntimeData is a AsyncRuntimeData
			    			default label is "RemoteRuntimeData"
    				Action Rules
    					RemoteRuntimeData = ParamRemoteRuntimeData   
    					
	    				if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false 					
    					    					
			LostWhileInProgress is a State
				Entrance Rules
					StatusChanged = current timestamp
					
					if (FailureCode != 43) 
						initialize PendingStatusInfo 
					
					if (TerminationRequested
					or  TerminationRequestedOption.ManuallyRequested   
					or  FailureCode = 32)  
						ConsistencyCheckInvalid = true	
					else
					if (TerminationRequestedOption.InternallyRequested   
					or  FailureCode = 33)  
						ConsistencyCheckInvalid = false	
					else
					if  (not AsyncActionRequest.SystemRequest.No
					and  AttemptCount < MaxSystemAutoAttempt)
						ConsistencyCheckInvalid = false
					else
					if (ShutdownRequested)
						ConsistencyCheckInvalid = false
					else
					if (FailureCode = 43) 
						ConsistencyCheckInvalid = false
						
						if (LastProxyDisconnectedTime not entered) 
							LastProxyDisconnectedTime = system current timestamp
					else
						ConsistencyCheckInvalid = true	
					
 					include UpdateAsyncActionInvocation
 
    			Update is an Update Action
    				Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false 
    			
    			Delete is a Delete Action
    				refresh and lock this instance
    				Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
    			Requeue is an Instance Action
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with true
				
				ChangeQueue is an Instance Action
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition
							default label is "NewQueue"   
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						make transition to Queued  		
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 			    					
    			
    			RequeueWithDBSessionDebug is an Instance Action
    				valid when (not AsyncActionRequest.DBSessionDebugIsEnabled)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					make transition to Queued
    			
    			RequeueWithoutDBSessionDebug is an Instance Action
    				valid when (AsyncActionRequest.DBSessionDebugIsEnabled)
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
    					make transition to Queued
    					
				SetToTerminatedAbnormally is an Instance Action
    				restricted 
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException
    				Action Rules
    					Result 			= Exception
    					SetActionStats 	= ParamSetActionStats
    					ErrorMessage 	= ExceptionMessage
    					
    					if (AsyncActionRequest.HasRunOnErrorAction)
    						FailureCode = 31
    					else
    						FailureCode = 30
    						
    					make transition to TerminatedAbnormally
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 
    					


    					if (FailureCode.TerminatedAbnormallyPendingRunOnError) 
    						invoke DeleteCheckPointRecords
    						    						
				SetToFinished is an Instance Action
    				restricted 
    				refresh and lock this instance
    				Parameters
    					ResultText 			is Text
    					
    				Action Rules
    					Result = ResultText 
    					FailureCode = 0
    					
    					make transition to Finished
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
    				Exit Rules
    					include InactiveInGroupCheck
    					include RestartWaitForActionGroup	  
    					
				UpdateFailureCode is an Instance Action
					restricted 
    				refresh and lock this instance  
    				
    				Parameters
    					ParamFailureCode is a AsyncTriggerFailureCode
    						default label is "FailureCode"	
    						
					Action Rules
    					FailureCode = ParamFailureCode
    					ConsistencyCheckInvalid = true	
    					
	    				if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
								
						TranDisableAudit = false	
    					
    			SetToWaitForActionGroup is an Instance Action
    				restricted 
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException	
    				Action Rules
    					Result = Exception
    					ErrorMessage = ExceptionMessage
    					SetActionStats = ParamSetActionStats
   						FailureCode = 50
    					make transition to WaitForActionGroup	
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
								
						TranDisableAudit = false
    					
    			SetToRetry is an Instance Action 
    				restricted
    				Parameters
    					Exception is an AsyncException
    					ParamSetActionStats is a SetActionStats
    						default label is "SetActionStats"
    					ExceptionMessage is an AsyncException
    					ParamIsInterrupt is Boolean 
    						default label is "Interrupt" 
    					ParamMemAgentInterruptTime is TimeStamp 
    					ParamAsyncRetryInfo is an AsyncRetryInfo 
    						default label is "RetryInformation"
    				Local Fields
    					WorkMaxRetries is Numeric size 2
    				Action Rules
    					SetActionStats = ParamSetActionStats
    					
    					if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo or ParamAsyncRetryInfo.MaxRetries = 0 or ParamAsyncRetryInfo.MaxRetries > MaxRetries)
    						WorkMaxRetries = MaxRetries
    					else
    						WorkMaxRetries = ParamAsyncRetryInfo.MaxRetries
    					
    					if (RetryCount < WorkMaxRetries
    					and (not ParamIsInterrupt 
    					or  (ParamMemAgentInterruptTime entered and MaxMemAgentRetryWindowSeconds entered and (LastMemAgentInterruptTime not entered or (MemAgentRetryCount < MaxMemAgentRetryCount) and ((ParamMemAgentInterruptTime - LastMemAgentInterruptTime) >= MaxMemAgentRetryWindowSeconds))) 
    					or  ((ParamMemAgentInterruptTime not entered or MaxMemAgentRetryWindowSeconds not entered) and InterruptedRetryCount < MaxInterruptedRetryCount))) 
	    					Result = Exception
	    					ErrorMessage = ExceptionMessage
							RetryCount = RetryCount + 1
							AttemptCount += 1
							
							if (ParamIsInterrupt) 
								if (ParamMemAgentInterruptTime entered) 
									MemAgentRetryCount += 1
									
									if (ParamMemAgentInterruptTime entered) 
										LastMemAgentInterruptTime = ParamMemAgentInterruptTime
								else
									InterruptedRetryCount += 1
							
							if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo) 
		    					if (RetryStart entered)
		    						RetryStart = current timestamp + (RetryCount * 2)
		    					else
			    					RetryStart = current timestamp
		    				else
		    					if (ParamAsyncRetryInfo.RetryTime entered)
		    						RetryStart = ParamAsyncRetryInfo.RetryTime
		    					else
		    					if (ParamAsyncRetryInfo.RetryMultiplier entered and RetryCount > 1)
		    						RetryStart = current timestamp + ((RetryCount - 1) * ParamAsyncRetryInfo.RetryMultiplier * ParamAsyncRetryInfo.RetryDelaySeconds)
		    					else
		    						RetryStart = current timestamp + (RetryCount * ParamAsyncRetryInfo.RetryDelaySeconds)
		    						
	    					make transition to InRetry
	    					
	    					if (not TranDisableAudit and AsyncAuditingEnabled)
								invoke Create AsyncAuditEntry
								
							TranDisableAudit = false	
	    				else
	    					if (ParamMemAgentInterruptTime entered) 
								LastMemAgentInterruptTime = ParamMemAgentInterruptTime
								
	    					invoke SetToTerminatedAbnormally
	    						invoked.Exception = Exception
	    						invoked.ExceptionMessage = ExceptionMessage
			
			TerminatedAbnormally is a State
				Entrance Rules
					StatusChanged = current timestamp
					initialize PendingStatusInfo 
					
					if (TerminationRequested or TerminationRequestedOption.ManuallyRequested) 
						ConsistencyCheckInvalid = true
					else
					if (TerminationRequestedOption.InternallyRequested)
						ConsistencyCheckInvalid = false
					else
					if  (not AsyncActionRequest.SystemRequest.No
					and  AttemptCount < MaxSystemAutoAttempt)
						ConsistencyCheckInvalid = false
					else
					if (ShutdownRequested)
						ConsistencyCheckInvalid = false
					else
						ConsistencyCheckInvalid = true	
						
					initialize LastProxyDisconnectedTime 
						
					include UpdateAsyncActionInvocation

    			Update is an Update Action
    				valid when (not IsTriggerAllocated)
    				Action Rules
						if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
								
						TranDisableAudit = false	
    				
    			Delete is a Delete Action
    				valid when (not IsTriggerAllocated)
    				refresh and lock this instance
    				Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
    				Action Rules
    					include CheckInRequestDataArea
    					if (OtherAsyncActionTriggerRel not exists)
		    				invoke DeleteInternal AsyncActionRequest
		    					invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
    			Requeue is an Instance Action
    				valid when (not IsTriggerAllocated)
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with true
    					
				ChangeQueue is an Instance Action
					valid when (not IsTriggerAllocated)
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition
							default label is "NewQueue"   
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						make transition to Queued  	
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 		
						
				SetRunOnErrorStatus is an Instance Action
					restricted
    				Parameters
    					FailCode 			is an AsyncTriggerFailureCode
    					ResultText 			is Text
    					ExceptionText		is Text
    					NumberOfInterrupts  is Numeric size 4
						InterruptedWithin   is Numeric size 19
    				Action Rules
    					FailureCode = 30
    					RunOnErrorFailureCode	= FailCode
    					RunOnErrorResult 		= ResultText
    					RunOnErrorErrorMessage 	= ExceptionText 
    					
    					if (NumberOfInterrupts > 0) 
    						if (not AsyncBlockedAction exists)
    							invoke CreateInternal AsyncBlockedAction
    								resume on error
									invoked.AsyncBlocklist.DataArea 	  = DataArea
									invoked.AsyncBlocklist.BusinessView   = AsyncActionRequest.RunOnErrorAction.ImplementingClass
									invoked.AsyncBlocklist.BusinessAction = AsyncActionRequest.RunOnErrorAction.AsyncAction
									invoked.AsyncBlocklist.MappingField1  = AsyncActionRequest.MappingField1
									invoked.AsyncBlocklist.MappingField2  = AsyncActionRequest.MappingField2
									invoked.ManuallyCreated 			  = false
	    							invoked.NumberOfInterrupts            = NumberOfInterrupts
	    							invoked.InterruptedWithin			  = InterruptedWithin
	    				
	    				if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false	
    					
    				Exit Rules


    					invoke DeleteCheckPointRecords	
    					
				SetRunOnErrorToRetry is an Instance Action
    				restricted
    				Parameters
    					Exception is an AsyncException
    					ErrorMessage is an AsyncException 
    					ParamIsInterrupt is Boolean 
    						default label is "Interrupt" 
    					ParamMemAgentInterruptTime is TimeStamp 
    					ParamAsyncRetryInfo is an AsyncRetryInfo 
    						default label is "RetryInformation"
					Local Fields
    					WorkMaxRetries is Numeric size 2
    				Action Rules
    					
    					RunOnErrorResult 		= Exception
    					RunOnErrorErrorMessage 	= ErrorMessage

						if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo or ParamAsyncRetryInfo.MaxRetries = 0 or ParamAsyncRetryInfo.MaxRetries > MaxRetries)
    						WorkMaxRetries = MaxRetries
    					else
    						WorkMaxRetries = ParamAsyncRetryInfo.MaxRetries
    					 
    					if (RunOnErrorRetryCount < WorkMaxRetries
    					and (not ParamIsInterrupt 
    					or  (ParamMemAgentInterruptTime entered and MaxMemAgentRetryWindowSeconds entered and (LastMemAgentInterruptTime not entered or (MemAgentRetryCount < MaxMemAgentRetryCount) and ((ParamMemAgentInterruptTime - LastMemAgentInterruptTime) >= MaxMemAgentRetryWindowSeconds))) 
    					or  ((ParamMemAgentInterruptTime not entered or MaxMemAgentRetryWindowSeconds not entered) and InterruptedRetryCount < MaxInterruptedRetryCount))) 
	    					RunOnErrorRetryCount = RunOnErrorRetryCount + 1
	    					
	    					if (ParamIsInterrupt) 
	    						if (ParamMemAgentInterruptTime entered) 
									MemAgentRetryCount += 1
									
									if (ParamMemAgentInterruptTime entered) 
										LastMemAgentInterruptTime = ParamMemAgentInterruptTime
								else
									InterruptedRetryCount += 1
	    					
	    					if (ParamIsInterrupt or not ParamAsyncRetryInfo.IsValidRetryInfo)
		    					if (RunOnErrorRetryStart entered)
		    						RunOnErrorRetryStart = current timestamp + (RunOnErrorRetryCount * 2)
		    					else
			    					RunOnErrorRetryStart = current timestamp
			    			else
		    					if (ParamAsyncRetryInfo.RetryTime entered)
		    						RetryStart = ParamAsyncRetryInfo.RetryTime
		    					else
		    					if (ParamAsyncRetryInfo.RetryMultiplier entered and RetryCount > 1)
		    						RetryStart = current timestamp + ((RetryCount - 1) * ParamAsyncRetryInfo.RetryMultiplier * ParamAsyncRetryInfo.RetryDelaySeconds)
		    					else
		    						RetryStart = current timestamp + (RetryCount * ParamAsyncRetryInfo.RetryDelaySeconds)
		    								
	    					make transition to InRetry
	    				else
	    					if (ParamMemAgentInterruptTime entered) 
								LastMemAgentInterruptTime = ParamMemAgentInterruptTime
	    				
	    				if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false	
	    		
	    		SetRemoteRuntimeData is an Instance Action
			    	restricted
			    	Parameters
			    		ParamRemoteRuntimeData is a AsyncRuntimeData
			    			default label is "RemoteRuntimeData"
    				Action Rules
    					RemoteRuntimeData = ParamRemoteRuntimeData   
    					
	    				if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false 				
	    				
    			RequeueWithDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithDBSessionDebug)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					make transition to Queued
    			
    			RequeueWithoutDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithoutDBSessionDebug)
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
    					make transition to Queued
			
			Finished is a State
				Entrance Rules
					Finished = current timestamp
					StatusChanged = Finished
					ConsistencyCheckInvalid = true	

					if  (AsyncActionInvocationRel exists	
					and (AsyncActionInvocationRel.HasActionResults       
					or   AsyncActionInvocationRel.CheckPointRel exists)) 
						invoke Update AsyncActionInvocationRel
		            		invoked.LastModTime					= current timestamp
		                    invoked.AsyncActionInvocationStatus	= Status
		                    invoked.StatusChanged				= StatusChanged
		                    invoked.Started						= Started
		                    invoked.Finished					= Finished
		                    invoked.FailureCode					= FailureCode
		                    invoked.Result						= Result
		                    invoked.ErrorMessage				= ErrorMessage
		                    invoked.ElapsedRunningDuration 		= ElapsedRunningDuration
		                    invoked.RunOnErrorFailureCode       = RunOnErrorFailureCode
		                    invoked.RunOnErrorResult			= RunOnErrorResult
		                    invoked.RunOnErrorErrorMessage		= RunOnErrorErrorMessage
					
					initialize LastProxyDisconnectedTime 
					initialize PendingStatusInfo 
					
					if (!SaveHistory)

						invoke DeleteFromFinishedEntrance







					if (AsyncActionInvocationRel exists) 
						invoke TriggerInvocationDelete AsyncActionInvocationRel
						
				DeleteFromFinishedEntrance is a Delete Action 

					restricted
					default label is "Delete"
					Action Rules

						if  (AsyncActionRequest.PendingScheduling = false
						and  OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = false



							
				Delete is a Delete Action
					refresh and lock this instance
					Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
					Action Rules

						if  (AsyncActionRequest.PendingScheduling = false
						and  OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true
						


						
				DeleteInternal is a Delete Action
					restricted
					default label is "Delete"
					refresh and lock this instance

					Action Rules

						if  (AsyncActionRequest.PendingScheduling = false
						and  OtherAsyncActionTriggerRel not exists)
							invoke DeleteInternal AsyncActionRequest
								invoked.CheckDependentSet = true



						
    		    Update is an Update Action
    		    	Action Rules
    		    		if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
						
						TranDisableAudit = false
        				
			InRetry is a State
				Entrance Rules
					StatusChanged   = current timestamp
					QueuedRetryTime = StatusChanged
					ConsistencyCheckInvalid = true
					TerminationRequested = false         
					TerminationRequestedOption = TerminationRequestedOption.NotRequested
					
					if (FailureCode = 32 or FailureCode = 33) 
						FailureCode = 0
					
					initialize LastProxyDisconnectedTime 
					initialize PendingStatusInfo 
						
					include UpdateAsyncActionInvocation
					
    			Update is an Update Action
    				Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false 
    			
    			Delete is a Delete Action
    				refresh and lock this instance
    				Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
    				Action Rules
    					include CheckInRequestDataArea
    					if (OtherAsyncActionTriggerRel not exists)
		    				invoke DeleteInternal AsyncActionRequest
		    					invoked.CheckDependentSet = true

                    Exit Rules
                    	include RestartWaitForActionGroup
                    	
                    	if (AsyncActionInvocationRel exists) 
                        	invoke TriggerInvocationDelete AsyncActionInvocationRel
						
   				EnableDBSessionDebug is an Instance Action
					valid when (not AsyncActionRequest.DBSessionDebugIsEnabled)
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
					Action Rules
						include DataAreaConstraintBlock
						invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
							
				DisableDBSessionDebug is an Instance Action
					valid when (AsyncActionRequest.DBSessionDebugIsEnabled)
					Action Rules
						include DataAreaConstraintBlock
						invoke DisableDBSessionDebug AsyncActionRequest
						
				RetryNow is an Instance Action
					Action Rules
						RetryStart = current timestamp
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
				
				RetryTrigger is an Instance Action 
					restricted

			    
			    SetToPendingStart is an Instance Action
			    	restricted
			    	Parameters
			    		PendingRuntimeData is a AsyncRuntimeData
			    	Parameter Rules
			    		PendingRuntimeData
			    			default to "LOCAL"
    				Action Rules
    					RuntimeData = PendingRuntimeData
    					RemoteRuntimeData = blank
    					make transition to PendingStart
    					
    					if (not TranDisableAudit and AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
    					TranDisableAudit = false
		
			WaitForActionGroup is a State
				Entrance Rules
					StatusChanged = current timestamp
					ConsistencyCheckInvalid = false
					TerminationRequested = false          
					TerminationRequestedOption = TerminationRequestedOption.NotRequested
					
					if (FailureCode = 32 or FailureCode = 33) 
						FailureCode = 0
					
					initialize LastProxyDisconnectedTime  
					initialize PendingStatusInfo 
						
					include UpdateAsyncActionInvocation
			
				Update is an Update Action
    				valid when (not IsTriggerAllocated)
    				Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 
    				
				Delete is a Delete Action
					restricted
					refresh and lock this instance
					Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
		    				invoke DeleteInternal AsyncActionRequest
		    					invoked.CheckDependentSet = true

					Exit Rules
						include RestartWaitForActionGroup
						
						if (AsyncActionInvocationRel exists) 
							invoke TriggerInvocationDelete AsyncActionInvocationRel    				
    				
				Requeue is an Instance Action
					refresh and lock this instance
    				valid when (not IsTriggerAllocated)
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with false 
    					
				ChangeQueue is an Instance Action
					valid when (not IsTriggerAllocated)
					refresh and lock this instance
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition
							default label is "NewQueue"   
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						make transition to Queued  	
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 
					
				RequeueWithDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithDBSessionDebug)
    				refresh and lock this instance
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					make transition to Queued
    					
    			RequeueWithoutDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithoutDBSessionDebug)
    				refresh and lock this instance
	    			Action Rules
	    				include BlacklistedActionCheck
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
    					make transition to Queued	    				

    		WaitForSynchronizedGroup is a State
				Entrance Rules
					StatusChanged = current timestamp
					ConsistencyCheckInvalid = true
					TerminationRequested = false 
					TerminationRequestedOption = TerminationRequestedOption.NotRequested
					
					if (FailureCode = 32 or FailureCode = 33) 
						FailureCode = 0
					
					initialize PendingStatusInfo 






					if (!AsyncActionTrigger = blank)
						include UpdateAsyncActionInvocation
						
				Update is an Update Action
					Action Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false 
					Exit Rules
						include UpdateAsyncActionInvocation
    				
				Delete is a Delete Action
					restricted
					refresh and lock this instance
					Entrance Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
					Action Rules
						include CheckInRequestDataArea
						if (OtherAsyncActionTriggerRel not exists)
		    				invoke DeleteInternal AsyncActionRequest
		    					invoked.CheckDependentSet = true

					Exit Rules
						include RestartWaitForActionGroup
						
						if (AsyncActionInvocationRel exists) 
							invoke TriggerInvocationDelete AsyncActionInvocationRel    				
    				
				Create is a Create Action
					restricted
		    	 	Local Fields
						MappingSaveHistory is a AsyncSaveHistory
						MappingFound is Boolean
						
					Entrance Rules
						constraint (AsyncActionRequest.SynchronizedGroup entered)
							"WaitForSynchronizedGroupStateRequiresASynchronizedGroup"
						
    				Action Rules
    					include DataAreaConstraintBlock
    					SynchronizedGroup = AsyncActionRequest.SynchronizedGroup
    					DataArea = AsyncActionRequest.DataArea
						
					Exit Rules
						include QueueMappingResolve 
						include UpdateAsyncActionInvocation
				
				Requeue is an Instance Action
					refresh and lock this instance
    				valid when (CanRequeueSynchronizedGroup)
	    			Action Rules
	    				include RequeueBlock
	    					replace ClearGroupStart with false 
    					
				ChangeQueue is an Instance Action
					valid when (not IsTriggerAllocated)
					refresh and lock this instance
					Parameters
						ParamAsyncQueueDefinition is a AsyncQueueDefinition
							default label is "NewQueue"   
						ParamPriority 			  is a AsyncPriority
							default label is "NewPriority"
    					ParamSaveHistory		  is Boolean
    						default label is "SaveHistory"
    					
    				Parameter Rules
    					ParamAsyncQueueDefinition
    						initial value is AsyncQueueDefinition	
    					
    					ParamPriority
    						initial value is Priority
    					
    					ParamSaveHistory
    						initial value is SaveHistory	
    						
					Action Rules
						include DataAreaConstraintBlock
						
						AsyncQueueDefinition 	= ParamAsyncQueueDefinition
						Priority				= ParamPriority
						SaveHistory				= ParamSaveHistory  
						
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false 
						
				EnableDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithDBSessionDebug)
    				refresh and lock this instance
					Parameters
						DBSessionDebugLevel
						LPLTrace
					Parameter Rules
						DBSessionDebugLevel
							initial value is "standard"
						LPLTrace
							initial value is false
					Entrance Rules
						if (DBSessionDebugLevel.Minimal)
							LPLTrace = false
	    			Action Rules
	    				include DataAreaConstraintBlock
	    				invoke EnableDBSessionDebug AsyncActionRequest
							invoked.DBSessionDebugLevel = DBSessionDebugLevel
							invoked.LPLTrace = LPLTrace
							invoked.ForceContextLookup = false
    					
    			DisableDBSessionDebug is an Instance Action
    				valid when (CanRequeueWithoutDBSessionDebug)
    				refresh and lock this instance
	    			Action Rules
	    				include DataAreaConstraintBlock
	    				invoke DisableDBSessionDebug AsyncActionRequest
