ContractQuestionAnswer is a BusinessClass
    owned by po
    prefix is CAQA

    Ontology
 		part of Contract
 			relative key is ContractQuestion
 			
    Patterns
		implements TemplateDriven by ContractQuestion
			create instance
				when (ContractQuestionAnswerGroup entered)
		
	Persistent Fields
		Question  

		ContractQuestionAnswerGroup
		Attachment						is an AlternateAttachment

	Local Fields
		LocalRepositoryQuestion         is a Question 
		LocalTermAndCondition
		LocalArticle 					is an Article
		LocalContractTermAndCondition	is a ContractTermAndCondition view
		AnswerChanged                   is Boolean
		LocalLastQuestion               is Numeric 2
		LocalAttributeCtr   			is Numeric 2

	Derived Fields
		AnswerHasTerms is a ConditionalField
			type is Boolean
			restricted
			if (QuestionAnswerTermRel exists)
				true
			else
				false
		ContractResponseAnswer is a ConditionalField
			type is Alpha size 250
			if (ContractQuestion.ResponseType.Text)
				ContractQuestionAnswerGroup.TextAnswer
			else
			if (ContractQuestion.ResponseType.Number)
				ContractQuestionAnswerGroup.NumericAnswer
			else
			if (ContractQuestion.ResponseType.Date)
				DerivedDate
			else
			if (ContractQuestion.ResponseType.List)
				ContractQuestionAnswerGroup.ContractQuestionListValue
			else
			if (ContractQuestion.ResponseType.Rebate)
				ContractQuestionAnswerGroup.ContractRebateType
			else
			if (ContractQuestion.ResponseType.YesNo
			and ContractQuestionAnswerGroup.YesNoAnswer = 1)
				YesText
			else
			if (ContractQuestion.ResponseType.YesNo
			and ContractQuestionAnswerGroup.YesNoAnswer = 2)
				NoText
			else
				YesNoTextValue
				
		YesNoTextValue is a StringField
			type is Alpha size 260
			restricted
			YesNoText
			"-"
			ContractQuestionAnswerGroup.YesNoText.Text
		
		YesNoText is a ConditionalField
			type is Alpha size 10
			if (ContractQuestionAnswerGroup.YesNoText.YesNo = 1)
				YesText
			else
				NoText

		YesText is a MessageField
			restricted
			"Yes"
		
		NoText is a MessageField
			restricted
			"No"

		DerivedDate is a StringField
			type is Alpha 10
			restricted
			ContractQuestionAnswerGroup.DateAnswer month
			"/"
			ContractQuestionAnswerGroup.DateAnswer day
			"/"
			ContractQuestionAnswerGroup.DateAnswer year
			
		ResponseRequiredMessage is a MessageField
			restricted
            "ResponseIsRequired"
        
        ResponseAndAttachmentRequiredMessage is a MessageField
        	restricted
            "BothResponseAndAttachmentAreRequired"
        
        YesAttachmentMessage is a MessageField
        	restricted
            "YesOrNoRequired;AttachmentRequiredIfAnswerIsYes"
            
        NoAttachmentMessage is a MessageField
        	restricted
            "YesOrNoRequired;AttachmentRequiredIfAnswerIsNo"
            
        YesOrNoAndTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;TextIsRequired"
        
        AttachmentOrTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;EitherAttachmentOrTextIsRequired"
            
        YesAttachmentOrTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;EitherTextOrAttachmentIsRequiredIfAnswerIsYes"
            
        NoAttachmentOrTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;EitherTextOrAttachmentIsRequiredIfAnswerIsNo"
            
        AttachmentAndTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;BothTextAndAttachmentAreRequired"
        
        YesAttachmentAndTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;BothTextAndAttachmentAreRequiredIfAnswerIsYes"
            
        NoAttachmentAndTextMessage is a MessageField
        	restricted
            "YesOrNoRequired;BothTextAndAttachmentAreRequiredIfAnswerIsNo"
        
        ConditionalAnswerLabel is a ConditionalField
            type is Alpha 125
            if (ContractQuestion.ResponseRules.ResponseRequired
            or  ContractQuestion.YesNoResponseRules.ResponseRequired)
                ResponseRequiredMessage        
            else
            if (ContractQuestion.ResponseRules.ResponseRequiredAndAttachmentRequired
            or  ContractQuestion.YesNoResponseRules.ResponseRequiredAndAttachmentRequired)
                ResponseAndAttachmentRequiredMessage
            else
            if (ContractQuestion.YesNoResponseRules.ResponseRequiredAndAttachmentRequiredIfYes)
                YesAttachmentMessage
            else
            if (ContractQuestion.YesNoResponseRules.ResponseRequiredAndAttachmentRequiredIfNo)
                NoAttachmentMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextResponseRequired)
                YesOrNoAndTextMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequired)
                AttachmentOrTextMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequiredIfYes)
                YesAttachmentOrTextMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequiredIfNo)
                NoAttachmentOrTextMessage
            else 
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequired)
                AttachmentAndTextMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfYes)
                YesAttachmentAndTextMessage
            else
            if (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfNo)
                NoAttachmentAndTextMessage
            else
                blank

			

	Conditions
	
		HasAttachment
			restricted
			when (Attachment entered)
			
		RebateExists
			restricted
			when (ContractRebateRels exists)
			
		HasResponseAttachment
			restricted
            when (Attachment entered)
            
        AttachmentAlwaysRequired   
        	restricted
            when (ContractQuestion.AlwaysRequireResponseAttachment
            and  (ContractQuestion.NonYesNoResponseType
            or    ContractQuestion.ResponseType.YesNo))

		ConditionalQuestionsExist 
			restricted
			when (((ContractQuestion.ResponseType.YesNo
			or    ContractQuestion.ResponseType.YesNoText)
			and   ContractConditionalYesNoQuestionRel exists)
			or   (ContractQuestion.ResponseType.List
			and   ContractConditionalListQuestionRel exists))			

		ContractQuestionAnswerGroupOnlyATextChange
			restricted
			when (ContractQuestion.ResponseType.YesNoText
			and   ContractQuestionAnswerGroup.YesNoText.YesNo not changed
			and   ContractQuestionAnswerGroup.YesNoText.Text changed)

	Relations
		QuestionAnswerTermRel
			one-to-many relation to QuestionAnswerTerm
			Field Mapping uses symbolic key  
				related.ProcurementGroup 										 = ContractGroup
				related.Question												 = Question
				related.QuestionAnswer.QuestionAnswerGroup.QuestionListValue	 = ContractQuestionAnswerGroup.ContractQuestionListValue
				related.QuestionAnswer.QuestionAnswerGroup.TextAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.NumericAnswer 		 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.DateAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.YesNoAnswer 			 = ContractQuestionAnswerGroup.YesNoAnswer
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.YesNo       = ContractQuestionAnswerGroup.YesNoText.YesNo
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.Text	     = blank 
				related.QuestionAnswer.QuestionAnswerGroup.ContractRebateType	 = ContractQuestionAnswerGroup.ContractRebateType
			Instance Selection
				where (related.TermAndCondition.Active)
				
		OldQuestionAnswerTermRel
			one-to-many relation to QuestionAnswerTerm
			Field Mapping uses symbolic key  
				related.ProcurementGroup 										 = ContractGroup
				related.Question												 = Question
				related.QuestionAnswer.QuestionAnswerGroup.QuestionListValue	 = old ContractQuestionAnswerGroup.ContractQuestionListValue
				related.QuestionAnswer.QuestionAnswerGroup.TextAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.NumericAnswer 		 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.DateAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.YesNoAnswer 			 = old ContractQuestionAnswerGroup.YesNoAnswer
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.YesNo       = old ContractQuestionAnswerGroup.YesNoText.YesNo
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.Text	     = blank 
				related.QuestionAnswer.QuestionAnswerGroup.ContractRebateType	 = old ContractQuestionAnswerGroup.ContractRebateType
			Instance Selection
				where (related.TermAndCondition.Active)
			
		QuestionAnswerArticleRel
			one-to-many relation to QuestionAnswerArticle
			Field Mapping uses symbolic key  
				related.ProcurementGroup							             = ContractGroup
				related.Question									             = Question
				related.QuestionAnswer.QuestionAnswerGroup.QuestionListValue	 = ContractQuestionAnswerGroup.ContractQuestionListValue
				related.QuestionAnswer.QuestionAnswerGroup.TextAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.NumericAnswer 		 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.DateAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.YesNoAnswer 			 = ContractQuestionAnswerGroup.YesNoAnswer
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.YesNo       = ContractQuestionAnswerGroup.YesNoText.YesNo
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.Text	     = blank 
				related.QuestionAnswer.QuestionAnswerGroup.ContractRebateType	 = ContractQuestionAnswerGroup.ContractRebateType
			Instance Selection
				where (related.Article.Active)
							
		QuestionAnswerRel
			one-to-one relation to QuestionAnswer
			Field Mapping uses symbolic key  
				related.ProcurementGroup							             = ContractGroup
				related.Question									             = Question
				related.QuestionAnswer.QuestionAnswerGroup.QuestionListValue	 = ContractQuestionAnswerGroup.ContractQuestionListValue
				related.QuestionAnswer.QuestionAnswerGroup.TextAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.NumericAnswer 		 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.DateAnswer 			 = blank 
				related.QuestionAnswer.QuestionAnswerGroup.YesNoAnswer 			 = ContractQuestionAnswerGroup.YesNoAnswer
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.YesNo       = ContractQuestionAnswerGroup.YesNoText.YesNo
				related.QuestionAnswer.QuestionAnswerGroup.YesNoText.Text	     = blank 
				related.QuestionAnswer.QuestionAnswerGroup.ContractRebateType	 = ContractQuestionAnswerGroup.ContractRebateType
	
		ContractTermAndConditionRel
			one-to-many relation to ContractTermAndCondition
			Field Mapping uses ByTermAndCondition
				related.ContractGroup 	 = ContractGroup
				related.Contract		 = Contract
				related.TermAndCondition = LocalTermAndCondition.CheckTermAndCondition
				related.Article			 = LocalArticle
					
		ContractArticleRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByArticle
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.Article		  = LocalArticle
			
		LocalRepositoryQuestionRel 
			one-to-one relation to Question 
			Field Mapping uses symbolic key 
				related.ProcurementGroup = ContractGroup 
				related.Question         = LocalRepositoryQuestion
		
		ContractConditionalListQuestionNotOnContractRel 
			one-to-many relation to ContractConditionalListQuestion 
			Field Mapping uses symbolic key 
				related.ContractGroup			    = ContractGroup 
				related.Contract                    = Contract 
				related.ContractQuestion            = ContractQuestion 
				related.ContractQuestionListValue	= ContractQuestionAnswerGroup.ContractQuestionListValue 
			Instance Selection 
				where (related.NotOnContract)

		ContractConditionalYesNoQuestionNotOnContractRel 
			one-to-many relation to ContractConditionalYesNoQuestion 
			Field Mapping uses symbolic key 
				related.ContractGroup			    				= ContractGroup 
				related.Contract                    				= Contract 
				related.ContractQuestion            				= ContractQuestion 
			Instance Selection
				where (((ContractQuestion.ResponseType.YesNo
				and	     related.ContractConditionalYesNoQuestion.YesOrNo 	= ContractQuestionAnswerGroup.YesNoAnswer)		
				or      (ContractQuestion.ResponseType.YesNoText
				and      related.ContractConditionalYesNoQuestion.YesOrNo    = ContractQuestionAnswerGroup.YesNoText.YesNo))
				and      related.NotOnContract)

		ContractConditionalListQuestionRel 
			one-to-many relation to ContractConditionalListQuestion 
			Field Mapping uses symbolic key 
				related.ContractGroup			    = ContractGroup 
				related.Contract                    = Contract 
				related.ContractQuestion            = ContractQuestion 
				related.ContractQuestionListValue	= ContractQuestionAnswerGroup.ContractQuestionListValue 

		ContractConditionalYesNoQuestionRel 
			one-to-many relation to ContractConditionalYesNoQuestion 
			Field Mapping uses symbolic key 
				related.ContractGroup			    				= ContractGroup 
				related.Contract                    				= Contract 
				related.ContractQuestion            				= ContractQuestion 
			Instance Selection
				where ((ContractQuestion.ResponseType.YesNo
				and	    related.ContractConditionalYesNoQuestion.YesOrNo 	= ContractQuestionAnswerGroup.YesNoAnswer)		
				or     (ContractQuestion.ResponseType.YesNoText
				and     related.ContractConditionalYesNoQuestion.YesOrNo    = ContractQuestionAnswerGroup.YesNoText.YesNo))

		CreatedFromThisQuestionRel 
			one-to-many relation to ContractQuestion 
			Field Mapping uses symbolic key  
				related.ContractGroup		= ContractGroup
				related.Contract            = Contract 
			Instance Selection 
				where (related.CreatedFromQuestion	= ContractQuestion)			

		CreatedFromThisQuestionAnsweredRel
			one-to-many relation to ContractQuestion 
			Field Mapping uses symbolic key  
				related.ContractGroup		= ContractGroup
				related.Contract            = Contract 
			Instance Selection
				where (related.CreatedFromQuestion = ContractQuestion
				and    related.AnyQuestionAnswers)	

		ContractQuestionRels
			one-to-many relation to ContractQuestion 
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				
		ContractRebateRels
			one-to-one relation to ContractRebate
			Field Mapping uses symbolic key
				related.ContractGroup 		= ContractGroup
				related.Contract	  		= Contract
				related.ContractRebateType 	= ContractQuestionAnswerGroup.ContractRebateType
		
	Sets
		ContractQuestionSet
			Sort Order
				ContractGroup
				Contract
				Question
				ContractQuestion
				
	Rule Blocks

		CreateConditionalQuestions

			if  ((ContractQuestion.ResponseType.YesNo
			or    ContractQuestion.ResponseType.YesNoText)
			and   ContractConditionalYesNoQuestionRel exists)
				for each ContractConditionalYesNoQuestionRel
					LocalRepositoryQuestion = each.ContractConditionalYesNoQuestion.ConditionalQuestion
					invoke AttachQuestionToContractIndirect LocalRepositoryQuestionRel
						invoked.Contract        	= Contract
						invoked.FromConditional 	= true
						invoked.ParmFromQuestion	= ContractQuestion

			if (ContractQuestion.ResponseType.List
			and ContractConditionalListQuestionRel exists)
				for each ContractConditionalListQuestionRel
					LocalRepositoryQuestion = each.ContractConditionalListQuestion
					invoke AttachQuestionToContractIndirect LocalRepositoryQuestionRel
						invoked.Contract        	= Contract
						invoked.FromConditional 	= true
						invoked.ParmFromQuestion    = ContractQuestion
	
	Field Rules
		Question
			Question = ContractQuestion.Question
		Attachment
	    	if (!ContractQuestionAnswerGroup entered)
	    		cannot be entered
	    			"MustAnswerQuestionToAttachADocument"
	    			
	    ContractQuestionAnswerGroup
            if (ContractQuestion.ResponseType.YesNoText
            and !HasResponseAttachment
            and (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequired
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.Yes
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequiredIfYes) 
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.No
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextOrAttachmentRequiredIfNo))) 
                constraint (ContractQuestionAnswerGroup.YesNoText.Text entered)
                    "MustEnterEitherTextOrAnAttachmentForQuestion<ContractQuestion.QuestionText>"
                    
            if (ContractQuestion.ResponseType.YesNo
            and (ContractQuestionAnswerGroup.YesNoAnswer.Yes
            and  ContractQuestion.YesNoResponseRules.ResponseRequiredAndAttachmentRequiredIfYes)
            or  (ContractQuestionAnswerGroup.YesNoAnswer.No
            and  ContractQuestion.YesNoResponseRules.ResponseRequiredAndAttachmentRequiredIfNo))
                constraint (HasResponseAttachment)
                    "AttachmentIsRequiredForQuestion<ContractQuestion.QuestionText>"    
            
            if (AttachmentAlwaysRequired
            and !ContractQuestion.ResponseType.YesNoText)
                constraint (HasResponseAttachment)
                    "AttachmentIsRequiredForQuestion<ContractQuestion.QuestionText>"
                       
            if  (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextResponseRequired 
            or   ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequired
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.Yes
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfYes) 
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.No
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfNo))  
                constraint (ContractQuestionAnswerGroup.YesNoText.Text entered)
                    "MustEnterTextForQuestion<ContractQuestion.QuestionText>"
                    
            if  (ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequired
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.Yes
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfYes) 
            or  (ContractQuestionAnswerGroup.YesNoText.YesNo.No
            and  ContractQuestion.YesNoTextResponseRules.ResponseRequiredAndTextAndAttachmentRequiredIfNo))  
                constraint (HasResponseAttachment)
                    "AttachmentIsRequiredForQuestion<ContractQuestion.QuestionText>"  

	Create Rules  
		include IDM.CreateRules 
			replace AttachmentField with Attachment
							
	Delete Rules
		include IDM.DeleteRules
			replace AttachmentField with Attachment
	Commit Rules
		include IDM.CommitRules
			replace AttachmentField with Attachment

	Actions
	
		Create is a Create Action 
			
			Action Rules
				if (ContractQuestion.QuestionSource.Manual)
					constraint (Contract.InProgress)	
						"ManuallyAddedQuestionsCannotBeAnsweredWhenTheContractStatusIsActive,InactiveOrClosed"
				if (ContractQuestion.QuestionSource.Interview)
					if (QuestionAnswerRel exists)
						constraint (Contract.ContractStatus.Draft or Contract.ContractStatus.Addendum)	
							"InterviewQuestionsWithAssociatedTermsCanOnlyBeAnsweredWhenTheContractStatusIsDraftOrAddendum"
					else
						constraint (Contract.InProgress)
							"InterviewQuestionsWithoutAssociatedTermsCannotBeAnsweredWhenTheContractStatusIsActive,InactiveOrClosed"
				if (Question.ResponseType.List)		
					constraint (QuestionAnswerRel exists)
						"NotAValidAnswerForThisQuestion"

				if (ContractQuestion.QuestionSource.Interview)
					if (ConditionalQuestionsExist)
						confirmation required
							"AdditionalQuestionsWillBeCreatedAsAResultOfYourAnswers;ViewNewQuestionsOn_'View_Questions_Which_Need_Attention'buttonOnContractTermsPanel"
				else
				if (Contract.CanUpdateProposedContract)
					if (ConditionalQuestionsExist)
						confirmation required
							"AdditionalQuestionsWillBeCreatedAsAResultOfYourAnswers;ViewNewQuestionsOn_'View_Questions_Which_Need_Attention'buttonOnProposedContractSummaryPanelOrRefreshScreen"
				else
				if (ConditionalQuestionsExist)
					confirmation required
						"AdditionalQuestionsWillBeCreatedAsAResultOfYourAnswers;PleaseRefreshScreenToViewNewQuestions"


			Exit Rules	
				if (ContractQuestion.QuestionSource.Interview
				and QuestionAnswerTermRel exists)
					invoke Update Contract
						invoked.ContractGroup 		= ContractGroup
						invoked.Contract			= Contract
						invoked.CreateTermsNeeded	= true
				
				if (ConditionalQuestionsExist)
					include CreateConditionalQuestions
				
				if (ContractQuestion.ResponseType.Rebate)
					if (!RebateExists)	
						invoke Create ContractRebate
							invoked.ContractGroup				= ContractGroup
							invoked.Contract					= Contract
							invoked.TransientContractRebateType	= ContractQuestionAnswerGroup.ContractRebateType
						
		RecreateContractTerms is an Instance Action
			restricted
			
			Parameters
				PrmContractLastArticleDisplayOrder 	is a SequenceNumber
			
			Local Fields
				LocalContractArticle 			is a ContractArticle
				LocalHighestArticleDisplayOrder	is a SequenceNumber
			
			Action Rules
				
				LocalHighestArticleDisplayOrder			= PrmContractLastArticleDisplayOrder
				for each QuestionAnswerArticleRel
					LocalArticle = each.Article
					if (each.Article.DisplayOrder 		> LocalHighestArticleDisplayOrder)
						LocalHighestArticleDisplayOrder	= each.Article.DisplayOrder 	
					if (!ContractArticleRel exists)
						invoke Create ContractArticle
							invoked.ContractGroup 						= ContractGroup
							invoked.Contract	  						= Contract
							fill in fields from each.Article
						invoke AutoCreate ContractArticleUpdate
							invoked.ContractGroup 				= ContractGroup
							invoked.Contract 		           	= Contract
							invoked.ContractArticle            	= first ContractArticleRel.ContractArticle	
				for each QuestionAnswerTermRel
					LocalArticle								= each.Article
					LocalContractArticle 						= first ContractArticleRel.ContractArticle
					LocalTermAndCondition.CheckTermAndCondition = each.TermAndCondition
					if (!ContractTermAndConditionRel exists)
						invoke Create ContractTermAndCondition 
							assign result to LocalContractTermAndCondition
							invoked.ContractGroup 	 = ContractGroup
							invoked.Contract		 = Contract
							invoked.TermAndCondition = each.TermAndCondition
							invoked.ContractArticle	 = LocalContractArticle
							invoked.Article          = LocalArticle
							invoked.Title			 = each.TermAndCondition.Title
							invoked.HeaderText		 = each.TermAndCondition.HeaderText
							invoked.Description		 = each.TermAndCondition.Description
							invoked.ContractStatus	 = Contract.ContractStatus	
							invoked.DisplayOrder	 = each.TermAndCondition.TermDisplayOrder
						invoke AutoCreate ContractTermAndConditionUpdate
							invoked.ContractGroup 				= ContractGroup
							invoked.Contract 		           	= Contract
							invoked.ContractArticle            	= LocalContractArticle
							invoked.ContractTermAndCondition   	= LocalContractTermAndCondition.ContractTermAndCondition
						for each each.TermAndCondition.TermAndConditionAttachment set
							invoke AutoCreate ContractTermAndConditionAttachment 
								fill in fields from each
								invoked.ContractGroup 				= ContractGroup
								invoked.Contract 		           	= Contract
								invoked.ContractArticle            	= LocalContractArticle
								invoked.ContractTermAndCondition   	= LocalContractTermAndCondition.ContractTermAndCondition

			Exit Rules
				invoke Update Contract
					invoked.ContractGroup 	  		= ContractGroup
					invoked.Contract		  		= Contract
					invoked.CreateTermsNeeded 		= false
					invoked.LastArticleDisplayOrder	= LocalHighestArticleDisplayOrder
												
		Update is an Update Action

			Action Rules
				if (ContractQuestion.YesNoOrList
				and	ContractQuestionAnswerGroup changed
				and !ContractQuestionAnswerGroupOnlyATextChange)
					AnswerChanged = true
					constraint (CreatedFromThisQuestionAnsweredRel !exists)
						"CannotChangeAnswer;ConditionalQuestionsHaveBeenCreatedFromThisAnswerWhichHaveBeenAnswered"
					if (CreatedFromThisQuestionRel exists)
						confirmation required 
							"ConditionalQuestionsHaveBeenCreatedFromThisAnswerWhichWillBeDeleted;RefreshScreenToViewRemainingQuestions"	
						LocalLastQuestion = last CreatedFromThisQuestionRel.ContractQuestion

					if (ConditionalQuestionsExist)
						confirmation required
							"AdditionalQuestionsWillBeCreatedAsAResultOfYourChangeToAnswers;RefreshScreenToViewNewQuestions"
				if (ContractQuestion.QuestionSource.Manual)
					constraint (Contract.InProgress)	
						"ManuallyAddedQuestionsCannotBeAnsweredWhenTheContractStatusIsActive,InactiveOrClosed"
				if (ContractQuestion.QuestionSource.Interview)
					if (QuestionAnswerTermRel exists)
						constraint (Contract.ContractStatus.Draft or Contract.ContractStatus.Addendum)	
							"InterviewQuestionsWithAssociatedTermsCanOnlyBeAnsweredWhenTheContractStatusIsDraftOrAddendum"
					else
						constraint (Contract.InProgress)
							"InterviewQuestionsWithoutAssociatedTermsCannotBeAnsweredWhenTheContractStatusIsActive,InactiveOrClosed"
				if (Question.ResponseType.List)		
					constraint (QuestionAnswerRel exists)
						"NotAValidAnswerForThisQuestion"

			Exit Rules	
				if (ContractQuestion.YesNoOrList
				and	AnswerChanged
				and ConditionalQuestionsExist)
					include CreateConditionalQuestions

				if (CreatedFromThisQuestionRel exists)
					invoke DeleteConditionalQuestions ContractQuestion
						invoked.ParmContractGroup		= ContractGroup
						invoked.ParmContract            = Contract 
						invoked.ParmOriginalQuestion    = ContractQuestion 
						invoked.ParmLastOldQuestion     = LocalLastQuestion 
				if ((ContractQuestion.QuestionSource.Interview)
				and (QuestionAnswerTermRel exists
				and ContractQuestionAnswerGroup changed)
				or (OldQuestionAnswerTermRel exists
				and ContractQuestionAnswerGroup changed))				
					invoke Update Contract
						invoked.ContractGroup 	  = ContractGroup
						invoked.Contract		  = Contract
						invoked.CreateTermsNeeded = true
					
		Delete is a Delete Action	

			Entrance Rules 

				if (ContractQuestion.YesNoOrList)
					constraint (CreatedFromThisQuestionAnsweredRel !exists)
						"CannotDeleteAnswer;ConditionalQuestionsHaveBeenCreatedFromThisAnswerWhichHaveBeenAnswered"
					constraint (CreatedFromThisQuestionRel !exists)
						"ConditionalQuestionsHaveBeenCreatedFromThisAnswer;AnswerCannotBeDeleted"	
			Exit Rules	
				if (ContractQuestion.QuestionSource.Interview
				and QuestionAnswerTermRel exists)
					invoke Update Contract
						invoked.ContractGroup 	  = ContractGroup
						invoked.Contract		  = Contract
						invoked.CreateTermsNeeded = true
						
		DeleteRestricted is a Delete Action
			restricted

		Purge is a Purge Action
			restricted
			
		UploadToIDM is an Instance Action  
			valid when (Attachment.ValidForIDMUpload)
			Action Rules
				include IDM.MoveAttachmentsToIDM
					replace AttachmentField   with Attachment	
														
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (Attachment.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with Attachment			

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop
