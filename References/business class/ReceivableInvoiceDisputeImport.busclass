ReceivableInvoiceDisputeImport is a BusinessClass
	owned by ar
	prefix is IDU
	classic name is ARIDISPUTE

	Ontology
		symbolic key is ReceivableInvoiceDisputeImport
			classic set name is IDUSET1
			classic name is SEQ
			classic name for ReceivableInvoiceDetail.ReceivableInvoiceDetailType is TRANS-TYPE

	Patterns
		implements StaticJava
		disable AuditIndex
		disable Auditing 
	   	disable EffectiveDated
	   	disable DataTranslations

	Persistent Fields
		RunGroup
		InterfacedCustomer
			default label is "ExternalCustomer"
		DisputeCd		 is a ReceivableInvoiceDisputeCode
			default label is "DisputeCode"
		TransactionAmount is an InternationalAmount
			default label is "DisputeAmount"
			classic name is ORIG-AMT
		DisputeDate	   is Date
		ResolvDate		is Date
			default label is "ResolvedDate"
		Desc			  is a Description
			default label is "Description"
		ErrorMessage								is Alpha 150
		InterfaceRun								is a ReceivablesInterfaceResult
			delete ignored

	Local Fields
		ErrorOccurred						is Boolean
		LocalReceivablesInterfaceResult 	is a ReceivablesInterfaceResult
		LocalCustomer						is like Customer


	Field Rules
		RunGroup
			required
		DisputeCd
			required
		TransactionAmount
			required

	Derived Fields
		InvoiceDetailNotFoundMsg is a MessageField
			restricted
			"ReceivableInvoiceDetailDoesNotExist"

		UnresolvedDisputeExistsMsg is a MessageField
			restricted
			"UnresolvedDisputeAlreadyExistsForThisInvoice"

		CustomerMismatchMsg is a MessageField 
			restricted
			"CustomerDoesNotMatchInterfacedCustomer"

		InvalidInvoiceTypeMsg is a MessageField
			restricted
			"InvalidInvoiceType"

		DerivedCustomer is a DerivedField
			type is like Customer
			if  (Customer not entered
			and  CustomerMappingTableInterfaceRel exists)
				return CustomerMappingTableInterfaceRel.Customer
			else
				return Customer

	Conditions

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		InError
			when (ErrorMessage entered)

	Relations

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		ReceivableInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses Set5
				related.Company													= Company
				related.Customer												= LocalCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType  	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice	   					= ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq 						= ReceivableInvoiceDetail.PaymentSeq

		UnresolvedDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Customer = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType 	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice 		= ReceivableInvoiceDetail.Invoice
				and	related.ReceivableInvoiceDetail.PaymentSeq 	= ReceivableInvoiceDetail.PaymentSeq
				and	related.ResolveDate 	= blank)	

		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult			= LocalReceivablesInterfaceResult

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
				related.InterfacedCustomer			= InterfacedCustomer

	Sets

		ByRunGroup
			Sort Order
				RunGroup
				Company
				Customer
				InterfacedCustomer
				ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq
				ReceivableInvoiceDisputeImport

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				Customer
				InterfacedCustomer
				ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq
				ReceivableInvoiceDisputeImport

	
	Actions
		Create is a Create Action
		
		Update is an Update Action
			Action Rules
		
		FastUpdate is an Update Action
			restricted
			bypass field rules

		Delete is a Delete Action
		
		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules

	
		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required
		
			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"
			
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)
				
			Action Rules
				Instance Rules
					invoke FastDelete
					
		ConvertDisputes is a Set Action
			default label is "ConvertDisputes"
			Parameters
				PrmRunGroup						is a RunGroup
					default label is "RunGroup"
				PrmCompany						is a ReceivableCompany
				
			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Sort Order
				RunGroup
				Company

			Local Fields
				LocalConvertResultView			is a ReceivablesInterfaceResult view
				LocalInstanceCount				is Numeric 10
				LocalReceivableInvoiceCount	 is Numeric 12  
				
				
			Instance Selection			
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup 
				and	(PrmCompany not entered
				or	  Company	= PrmCompany))

			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 9
						invoked.Company						= PrmCompany
						invoked.Status						= 1

				RunGroup Set Rules
					Entrance Rules
						
						invoke Create ReceivablesInterfaceResult
							assign result to LocalConvertResultView
							invoked.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
							invoked.RunTime					= current timestamp
							invoked.RunGroup				= PrmRunGroup
							invoked.RunType					= 9
							invoked.Company					= PrmCompany

					Exit Rules
						invoke Update LocalConvertResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed		= LocalInstanceCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivableInvoiceCount
							if (LocalConvertResultView.Status != 2)
								invoked.Status 		  			= 1

				Instance Rules

					LocalReceivablesInterfaceResult 		= LocalConvertResultView.ReceivablesInterfaceResult
					InterfaceRun							= LocalConvertResultView.ReceivablesInterfaceResult
					LocalInstanceCount						+= 1

					LocalCustomer							= DerivedCustomer

					initialize ErrorMessage
					initialize ErrorOccurred

					if  (Customer entered
					and  InterfacedCustomer entered
					and  Customer != CustomerMappingTableInterfaceRel.Customer)
						ErrorOccurred						= true
						ErrorMessage						= CustomerMismatchMsg
						invoke Update LocalInterfaceResultsRel
								invoked.Status 				= 2
					else
					if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice
					and  !ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo
					and  !ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						ErrorOccurred						= true
						ErrorMessage						= InvalidInvoiceTypeMsg
						invoke Update LocalInterfaceResultsRel
								invoked.Status 				= 2
					else
					if (!ReceivableInvoiceDetailRel exists)
						ErrorOccurred						= true
						ErrorMessage						= InvoiceDetailNotFoundMsg
						invoke Update LocalInterfaceResultsRel
								invoked.Status 				= 2
					else
						invoke Create ReceivableInvoiceDispute
							resume on error
								ErrorOccurred				= true
								ErrorMessage				= error message
								
							fill in fields from this instance
								except invoked.TransactionAmount
	
							invoked.Customer				= LocalCustomer
							invoked.OriginalDisputeAmount	= TransactionAmount
							if (ReceivableInvoiceDetailRel.CurrencyMultiplicationOrDivision.Divide)
								invoked.DisputedAmount		= TransactionAmount / ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							else
								invoked.DisputedAmount		= TransactionAmount * ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DisputeCode 			= DisputeCd
							invoked.ResolveDate 			= ResolvDate
							invoked.Description 			= Desc

							invoked.Description 			= Desc
							invoked.OriginatingInterfaceRun	= LocalReceivablesInterfaceResult
							invoked.TransientSkipOpenDisputeCheck = true
							
						if (ErrorOccurred)
							invoke Update LocalInterfaceResultsRel
									invoked.Status 		= 2

						if (!ErrorOccurred)
							invoke FastDelete
							LocalReceivableInvoiceCount				+= 1
		
