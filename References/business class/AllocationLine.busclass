AllocationLine is a BusinessClass
    owned by Allocations
    prefix is ALLI

    Ontology
    	symbolic key is AllocationLine

    Persistent Fields

        Description
        Active
        
        AllocationStep
        AllocateUnits						is Boolean
        AllocateYearToDate					is Boolean
        AllocateLifeToDate					is Boolean
        
        AllocateSourceDirectly				is Boolean
		
        ComputePeriodically					is Boolean
        GeneratePostToOnly					is Boolean
        IncludeLineWeight					is Boolean
        AllocateAmountType 


        Compute								is a AllocationLine compute
        


		UseCustomGroupInSourceAddress		is Boolean

        SourceSystemCode					is a GeneralLedgerSystemCode
		SourceAddress						is a FinanceAddress	 
			holds pii
		SourceLedger						is a Ledger
		SourcePercentage					is a Percent

		SourceAccountingEntityGroup			is a AccountingEntity group
        SourceAccountingUnitGroup           is a AccountingUnit group
        SourceAccountGroup                  is a GeneralLedgerChartAccount group
        SourceProjectGroup                  is a Project group
        SourceFinanceDimension1Group        is a FinanceDimension1 group
        SourceFinanceDimension2Group        is a FinanceDimension2 group
        SourceFinanceDimension3Group        is a FinanceDimension3 group
        SourceFinanceDimension4Group        is a FinanceDimension4 group
        SourceFinanceDimension5Group        is a FinanceDimension5 group
        SourceFinanceDimension6Group        is a FinanceDimension6 group
        SourceFinanceDimension7Group        is a FinanceDimension7 group
        SourceFinanceDimension8Group        is a FinanceDimension8 group
        SourceFinanceDimension9Group        is a FinanceDimension9 group
        SourceFinanceDimension10Group       is a FinanceDimension10 group
		
		TreatBlankAccountingUnitAsEmpty		is Boolean
		TreatBlankProjectAsEmpty			is Boolean
		TreatBlankDimension1AsEmpty			is Boolean
		TreatBlankDimension2AsEmpty			is Boolean
		TreatBlankDimension3AsEmpty			is Boolean
		TreatBlankDimension4AsEmpty			is Boolean
		TreatBlankDimension5AsEmpty			is Boolean
		TreatBlankDimension6AsEmpty			is Boolean
		TreatBlankDimension7AsEmpty			is Boolean
		TreatBlankDimension8AsEmpty			is Boolean
		TreatBlankDimension9AsEmpty			is Boolean
		TreatBlankDimension10AsEmpty		is Boolean
		
		TreatBlankToAccountAsEmpty				is Boolean
		TreatBlankToAccountingUnitAsEmpty		is Boolean
		TreatBlankToProjectAsEmpty				is Boolean
		TreatBlankToDimension1AsEmpty			is Boolean
		TreatBlankToDimension2AsEmpty			is Boolean
		TreatBlankToDimension3AsEmpty			is Boolean
		TreatBlankToDimension4AsEmpty			is Boolean
		TreatBlankToDimension5AsEmpty			is Boolean
		TreatBlankToDimension6AsEmpty			is Boolean
		TreatBlankToDimension7AsEmpty			is Boolean
		TreatBlankToDimension8AsEmpty			is Boolean
		TreatBlankToDimension9AsEmpty			is Boolean
		TreatBlankToDimension10AsEmpty			is Boolean
		
		TreatBlankFromAccountAsEmpty			is Boolean
		TreatBlankFromAccountingUnitAsEmpty		is Boolean
		TreatBlankFromProjectAsEmpty			is Boolean
		TreatBlankFromDimension1AsEmpty			is Boolean
		TreatBlankFromDimension2AsEmpty			is Boolean
		TreatBlankFromDimension3AsEmpty			is Boolean
		TreatBlankFromDimension4AsEmpty			is Boolean
		TreatBlankFromDimension5AsEmpty			is Boolean
		TreatBlankFromDimension6AsEmpty			is Boolean
		TreatBlankFromDimension7AsEmpty			is Boolean
		TreatBlankFromDimension8AsEmpty			is Boolean
		TreatBlankFromDimension9AsEmpty			is Boolean
		TreatBlankFromDimension10AsEmpty		is Boolean
		
		ComputeOverridesWithDetails				is Boolean
		AllocationSplitCallBack

        FromPostOption						is a AllocationPostOption
        FromOverride						is a FinanceAddress	 
        	holds pii
        FromDimensionWithMultipleOverrides	is a StructureRow
        FromDimensionWithMultipleOverrides2	is a StructureRow
		FromAccountingEntityGroup			is a AccountingEntity group
		FromAccountingEntityWeightCompute	is a AccountingEntity compute
		FromAccountingUnitGroup				is a AccountingUnit group
		FromAccountingUnitWeightCompute		is a AccountingUnit compute
		FromAccountGroup					is a GeneralLedgerChartAccount group
		FromAccountWeightCompute			is a GeneralLedgerChartAccount compute
		FromProjectGroup					is a Project group
		FromProjectWeightCompute			is a Project compute
		FromDimension1Group					is a FinanceDimension1 group
		FromDimension1WeightCompute			is a FinanceDimension1 compute
		FromDimension2Group					is a FinanceDimension2 group
		FromDimension2WeightCompute			is a FinanceDimension2 compute
		FromDimension3Group					is a FinanceDimension3 group
		FromDimension3WeightCompute			is a FinanceDimension3 compute
		FromDimension4Group					is a FinanceDimension4 group
		FromDimension4WeightCompute			is a FinanceDimension4 compute
		FromDimension5Group					is a FinanceDimension5 group
		FromDimension5WeightCompute			is a FinanceDimension5 compute
		FromDimension6Group					is a FinanceDimension6 group
		FromDimension6WeightCompute			is a FinanceDimension6 compute
		FromDimension7Group					is a FinanceDimension7 group
		FromDimension7WeightCompute			is a FinanceDimension7 compute
		FromDimension8Group					is a FinanceDimension8 group
		FromDimension8WeightCompute			is a FinanceDimension8 compute
		FromDimension9Group					is a FinanceDimension9 group
		FromDimension9WeightCompute			is a FinanceDimension9 compute
		FromDimension10Group				is a FinanceDimension10 group
		FromDimension10WeightCompute		is a FinanceDimension10 compute
		FromAllocationLineTempOverrideCompute is an AllocationLineTempOverride compute
		
		FromOverrideSummary					is a FinanceAddress	 
			holds pii
		FromOverrideOption					is an AllocationOverrideOption
		FromOverrideSetOption				is Numeric 1
			default label is "OverrideType"
			States
				ManualOverride				value is 0
				GroupOverrideList			value is 1
                DimensionOverrideAndWeightBuilder   value is 2
		FromMultipleDimensionCompute		is an AllocationLineOverride compute
			default label is "ManualOverrideWeightCompute"
		FromAllocationLineOverrideSet		is an AllocationLineOverrideSet
			default label is "LineOverrideGroupList"
		FromOverrideSetDetailCompute		is an AllocationLineOverrideSetDetail compute
			default label is "GroupOverrideWeightCompute"


        ToPostOption						is a AllocationPostOption
        ToOverride							is a FinanceAddress	 
        	holds pii
        ToDimensionWithMultipleOverrides	is a StructureRow
        ToDimensionWithMultipleOverrides2	is a StructureRow
		ToAccountingEntityGroup				is a AccountingEntity group
		ToAccountingEntityWeightCompute		is a AccountingEntity compute
		ToAccountingUnitGroup				is a AccountingUnit group
		ToAccountingUnitWeightCompute		is a AccountingUnit compute
		ToAccountGroup						is a GeneralLedgerChartAccount group
		ToAccountWeightCompute				is a GeneralLedgerChartAccount compute
		ToProjectGroup						is a Project group
		ToProjectWeightCompute				is a Project compute
		ToDimension1Group					is a FinanceDimension1 group
		ToDimension1WeightCompute			is a FinanceDimension1 compute
		ToDimension2Group					is a FinanceDimension2 group
		ToDimension2WeightCompute			is a FinanceDimension2 compute
		ToDimension3Group					is a FinanceDimension3 group
		ToDimension3WeightCompute			is a FinanceDimension3 compute
		ToDimension4Group					is a FinanceDimension4 group
		ToDimension4WeightCompute			is a FinanceDimension4 compute
		ToDimension5Group					is a FinanceDimension5 group
		ToDimension5WeightCompute			is a FinanceDimension5 compute
		ToDimension6Group					is a FinanceDimension6 group
		ToDimension6WeightCompute			is a FinanceDimension6 compute
		ToDimension7Group					is a FinanceDimension7 group
		ToDimension7WeightCompute			is a FinanceDimension7 compute
		ToDimension8Group					is a FinanceDimension8 group
		ToDimension8WeightCompute			is a FinanceDimension8 compute
		ToDimension9Group					is a FinanceDimension9 group
		ToDimension9WeightCompute			is a FinanceDimension9 compute
		ToDimension10Group					is a FinanceDimension10 group
		ToDimension10WeightCompute			is a FinanceDimension10 compute
		ToAllocationLineTempOverrideCompute is an AllocationLineTempOverride compute
		UseOverrideForCompute				is Boolean
		
		ToOverrideSummary					is a FinanceAddress	 
			holds pii
		ToOverrideOption					is an AllocationOverrideOption
		ToOverrideSetOption					is Numeric 1
			default label is "OverrideType"
			States
				ManualOverride				value is 0
				GroupOverrideList			value is 1
                DimensionOverrideAndWeightBuilder   value is 2
		ToMultipleDimensionCompute			is an AllocationLineOverride compute
			default label is "ManualOverrideWeightCompute"
		ToAllocationLineOverrideSet			is an AllocationLineOverrideSet
			default label is "LineOverrideGroupList"
		ToOverrideSetDetailCompute			is an AllocationLineOverrideSetDetail compute
			default label is "GroupOverrideWeightCompute"
        ToAllocationWeightGenerator         is an AllocationWeightGenerator
            default label is "DimensionOverrideAndWeightBuilder"
        FromAllocationWeightGenerator       is an AllocationWeightGenerator
            default label is "DimensionOverrideAndWeightBuilder"

		OverrideAccountingUnitStructure		is like AccountingUnitStructure
		OverrideAccountStructure			is like ReportingChart
		OverrideProjectStructure			is like ProjectStructure
		OverrideDimension1Structure			is like FinanceDimension1Structure
		OverrideDimension2Structure			is like FinanceDimension2Structure
		OverrideDimension3Structure			is like FinanceDimension3Structure
		OverrideDimension4Structure			is like FinanceDimension4Structure
		OverrideDimension5Structure			is like FinanceDimension5Structure
		OverrideDimension6Structure			is like FinanceDimension6Structure
		OverrideDimension7Structure			is like FinanceDimension7Structure
		OverrideDimension8Structure			is like FinanceDimension8Structure
		OverrideDimension9Structure			is like FinanceDimension9Structure
		OverrideDimension10Structure		is like FinanceDimension10Structure
		
		ProcessAllPostingBalance 			is Boolean
			default label is "ProcessPostingDimensionBalances"
		
		ProcessAccountingUnitPostingBalance	is Boolean
			default label is "ProcessPostingBalances"
		ProcessAccountPostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessProjectPostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension1PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension2PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension3PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension4PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension5PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension6PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension7PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension8PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension9PostingBalance		is Boolean
			default label is "ProcessPostingBalances"
		ProcessDimension10PostingBalance	is Boolean
			default label is "ProcessPostingBalances"
			
		AutoReverse							is Numeric 1
			States
				DefaultFromAllocation	value is 0
				Yes						value is 1
				No						value is 2

		ComputeOverridesForDistinctDimensions		is Boolean
			default label is untranslatable
		
		ComputeOverridesForAccountingUnit			is Boolean
			default label is untranslatable
		ComputeOverridesForAccount					is Boolean
			default label is untranslatable
		ComputeOverridesForProject					is Boolean
			default label is untranslatable
		ComputeOverridesForDimension1				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension2				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension3				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension4				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension5				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension6				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension7				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension8				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension9				is Boolean
			default label is untranslatable
		ComputeOverridesForDimension10				is Boolean
			default label is untranslatable

		AllocateAllCurrencyAmounts					is Boolean
		AllowNegativeWeights						is Boolean

		CustodialAccount is a GeneralLedgerChartAccount
			default label is "AverageDailyBalanceAccount"
		MinimumTransactionAmount					is an UnsignedInternationalAmount
			default label is "MinimumTransactionAmountForSplit"
		AllocationCurrency							is Numeric size 2
			States
				Transaction			value is 1
        		Functional			value is 2
				Project				value is 3
				Report1				value is 4
				Report2				value is 5
				Report3				value is 6
				Report4				value is 7
				Report5				value is 8		
		
		OverthrownAmountOption						is Numeric 1
			States
				DefaultFromAllocation		value is 0
				LastTransaction				value is 1
				LastHighestWeight			value is 5
		
	Context Fields
		AllocationRunContext				is a AllocationRun
		AllocationRunJobContext				is a AllocationRunJob

	Sets				
		ByStepNumber
			Sort Order
				FinanceEnterpriseGroup
				AllocationSourceSystem
				AllocationControl
				Active descending
				AllocationStep
				Allocation
				AllocationLine	
    Relations
        AllocationRunWeightDetailRel
            one-to-many relation to AllocationRunWeightDetail
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
                related.AllocationSourceSystem      = AllocationSourceSystem
                related.AllocationControl           = AllocationControl
                related.AllocationRun               = AllocationRunRel.AllocationRun
                related.AllocationRunWeightSet      = LocalAllocationWeightGenerator

		AllCurrencyRel
			one-to-many relation to Currency
			Field Mapping uses symbolic key

		ScenarioRel
			one-to-one relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.Scenario			   = AllocationControl.DerivedScenario

		PeriodShadowEndDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup             = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       	   = AllocationControl.Calendar
				related.SummaryGeneralLedgerCalendarPeriod = AllocationPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)

		LTDPeriodShadowEndDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup             = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       	   = AllocationControl.Calendar
				related.SummaryGeneralLedgerCalendarPeriod = any LTDGeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)		

		LTDGeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AllocationControl.Calendar.TopNode
				related.PeriodType					= AllocationControl.PeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod <= AllocationPeriod)		

		YTDPeriodShadowEndDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup             = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       	   = AllocationControl.Calendar
				related.SummaryGeneralLedgerCalendarPeriod = any YTDGeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)		

		YTDGeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= AllocationControl.Calendar.TopNode
				related.PeriodType					= AllocationControl.PeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod <= AllocationPeriod
				and    related.Year = CubeAllocationPeriodRel.Year)					
    
    	GeneralLedgerTotalPostingBalanceRel
    		one-to-many relation to GeneralLedgerTotal
    		Field Mapping uses ByLedger
    			related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup 
    			related.Scenario				  = FinanceEnterpriseGroup.ActualsScenario
    			related.GeneralLedgerTotal.Ledger = LocalSourceLedger
				related.AccountingEntity		  = LocalGLTotalAccountingEntity
    		Instance Selection
    			where (GeneralLedgerTotalDynamicSelection)

		GeneralLedgerTotalPostingBalanceForAccountRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup    						= FinanceEnterpriseGroup 
    			related.Scenario				  						= FinanceEnterpriseGroup.ActualsScenario
    			related.GeneralLedgerTotal.Ledger 						= LocalSourceLedger
				related.AccountingEntity		  						= LocalGLTotalAccountingEntity
				related.GeneralLedgerTotal.EntityYearPeriod		  		= LocalPeriodEndingDate
				related.GeneralLedgerTotal.GeneralLedgerChartAccount 	= SourceAddressAccountShadowRel.GeneralLedgerChartAccount
    		Instance Selection
    			where (GLTotalNoAccountDynamicSelection)

		GLTotalPostingBalanceForAccountCustomGroupRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup    						= FinanceEnterpriseGroup 
    			related.Scenario				  						= FinanceEnterpriseGroup.ActualsScenario
    			related.GeneralLedgerTotal.Ledger 						= LocalSourceLedger
				related.AccountingEntity		  						= LocalGLTotalAccountingEntity
				related.GeneralLedgerTotal.EntityYearPeriod		  		= LocalPeriodEndingDate
				related.GeneralLedgerTotal.GeneralLedgerChartAccount 	= SourceAccountGroupRel.GeneralLedgerChartAccount
    		Instance Selection
    			where (GLTotalNoAccountDynamicSelection)
		
		SourceAddressAccountShadowRel
			one-to-many relation to GLChartAccountShadow
            Field Mapping uses BySummaryAccount
                related.FinanceEnterpriseGroup              = FinanceEnterpriseGroup
                related.SummaryGeneralLedgerChartAccount    = DerivedSourceAddressAccount
            Instance Selection
                where (related.ChartType.Posting)
    			
    	AllocationSnapshotPostingBalanceRel
    		one-to-many relation to AllocationSnapshotDetail
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AllocationSourceSystem  = AllocationSourceSystem
        		related.AllocationSnapshot		= LocalAllocationSnapshot
    		Instance Selection
    			where (AllocationDynamicSelection)
    			
    	AllocationTransactionPostingBalanceRel
    		one-to-many relation to AllocationTransactionDetail
    		Field Mapping uses ByAllocationAndStep
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AllocationRun			= AllocationRunRel.AllocationRun

			Instance Selection
				where (related.AllocationStep < 0 
				and related.AllocationStep > DerivedNegativeStep

				and AllocationDynamicSelection)
    				    	    
    	AllocationLineSourceDetailsForReportRel
    		one-to-many relation to AllocationLineSource
    		Field Mapping uses ByAllocationLine
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.AllocationRun			= AllocationRunContext
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
		
		AllocationLineSourceDetailsRel
    		one-to-many relation to AllocationLineSource
    		Field Mapping uses ByAllocationLine
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.AllocationRun			= AllocationRunRel.AllocationRun
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine

        CurrentAllocationLineSourceDetailRel
    		one-to-many relation to AllocationLineSource
    		Field Mapping uses ByAllocationLine
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.AllocationRun			= AllocationRunRel.AllocationRun
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
            Instance Selection
                where (related.SourceAddress.DimensionCode   = LocalSourceValueAddress.DimensionCode)
    			
    	AllocationLineSourceValueByOriginalSourceRel 
			one-to-many relation to AllocationLineSourceValue
			Field Mapping uses ByAlternate
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.AllocationSourceSystem      = AllocationSourceSystem
				related.AllocationControl           = AllocationControl
				related.Allocation                  = Allocation
				related.AllocationLine              = AllocationLine
				related.AllocationRun               = AllocationRunRel.AllocationRun
				related.GeneralLedgerCalendarPeriod = CurrentPeriod
			Instance Selection
				where (related.FinanceAddress				= LocalSourceValueAddress
				and    related.FromOriginalSource           = LocalFromOriginalSource
                and    related.JournalCurrency              = CurrentCurrency)
				
    	AllocationLineSourceValueForReportRel
    		one-to-many relation to AllocationLineSourceValue
    		Field Mapping uses ByAllocationLine
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AllocationSourceSystem  = AllocationSourceSystem
				related.AllocationControl		= AllocationControl
				related.AllocationLine			= AllocationLine
				related.AllocationRun			= AllocationRunContext
			Instance Selection
				where (related.Allocation		= Allocation
				and   (related.AllocableAmount entered
				or    (ZeroTransAmountAllocationEnabled and related.CurrencyAmountsEntered)))
				
		AllocationLineSourceValueNoSourceAmountRel
    		one-to-many relation to AllocationLineSourceValue
    		Field Mapping uses ByAllocationLine
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AllocationSourceSystem  = AllocationSourceSystem
				related.AllocationControl		= AllocationControl
				related.AllocationLine			= AllocationLine
				related.AllocationRun			= AllocationRunContext
			Instance Selection
				where (related.Allocation		= Allocation
				and    (not related.JournalAmount entered
				or      not related.AllocableAmount entered))
    	
    	SelfAllocationLineRel
    		one-to-one relation to AllocationLine
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			
    	DuplicateAllocationLineRel
    		one-to-one relation to AllocationLine
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= LocalNewAllocationControl
    			related.Allocation				= LocalNewAllocation
    			related.AllocationLine			= LocalNewAllocationLine
    			
    	AllocationLineSingleOverrideRel
    		one-to-many relation to AllocationLineSingleOverride
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun

		AllocationLineSingleOverrideForReportRel
    		one-to-many relation to AllocationLineSingleOverride
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunContext

    	AllocationLineValueRel		
    		one-to-one relation to AllocationLineValue
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun
    			related.AllocationLineValue.DimensionCode				= Source.DimensionCode
    			related.AllocationLineValue.Currency					= CurrentCurrency
    			related.AllocationLineValue.GeneralLedgerCalendarPeriod = CurrentPeriod
    	AllAllocationLineValuesRel		
    		one-to-many relation to AllocationLineValue
    		delete cascades
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun
     	FromEntityRel
    		one-to-one relation to AccountingEntity
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
    			related.AccountingEntity		= FromEntity
		AccountingEntityHierarchiesRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses ByParent
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= AllocationControl.DefaultEntityBasis.AccountingEntityTopNode
		AccountingEntitiesRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where (related.PostingEntity)
		AccountingEntitiesInBasisRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntityHierarchiesRel.SubordinateAccountingEntity
    	AllocationLineTempOverridesForReportRel
    		one-to-many relation to AllocationLineTempOverride
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunContext
    	AllocationLineTempOverridesHeaderForReportRel
    		one-to-many relation to AllocationLineTempOverrideHeader
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunContext				
     	OverrideHeaderRel
    		one-to-one relation to AllocationLineTempOverrideHeader
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
    			related.AllocationSourceSystem				= AllocationSourceSystem
    			related.AllocationControl					= AllocationControl
    			related.Allocation							= Allocation
    			related.AllocationLine						= AllocationLine
    			related.AllocationRun						= AllocationRunRel.AllocationRun
    			related.AllocationLineTempOverrideHeader	= LocalDistinctDimensionSource.DimensionCode    			

     	AllOverrideHeaderRel
    		one-to-many relation to AllocationLineTempOverrideHeader
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
    			related.AllocationSourceSystem				= AllocationSourceSystem
    			related.AllocationControl					= AllocationControl
    			related.Allocation							= Allocation
    			related.AllocationLine						= AllocationLine
    			related.AllocationRun						= AllocationRunRel.AllocationRun

    	AllocationLineOverridesRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    	FromOverridesRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.Direction				= 0
    		Instance Selection
    			where (related.GeneralLedgerCalendarPeriod = blank or related.GeneralLedgerCalendarPeriod = CurrentPeriod)
    	FromOverridesWithAccountingEntityRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.Direction				= 0
    		Instance Selection
    			where (related.AccountingEntity entered
    			and    (related.GeneralLedgerCalendarPeriod = blank 
    			or      related.GeneralLedgerCalendarPeriod = CurrentPeriod))
    	ToAllOverridesRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.Direction				= 1
    	ToOverridesRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.Direction				= 1
    		Instance Selection
    			where (related.GeneralLedgerCalendarPeriod = blank or related.GeneralLedgerCalendarPeriod = CurrentPeriod)
    	ToOverridesWithAccountingEntityRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.Direction				= 1
    		Instance Selection
    			where (related.AccountingEntity entered
    			and    (related.GeneralLedgerCalendarPeriod = blank 
    			or      related.GeneralLedgerCalendarPeriod = CurrentPeriod))
    	FromTempOverridesRel
    		one-to-many relation to AllocationLineTempOverride
    		Field Mapping uses ByDimensionCode
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun
    			related.AllocationLineTempOverride.DimensionCode	= CurrentDimensionCode
    		Instance Selection
    			where (related.Direction.From 
    			and   (related.GeneralLedgerCalendarPeriod = blank or related.GeneralLedgerCalendarPeriod = CurrentPeriod))
    	AllocationLineWeightRel
    		one-to-one relation to AllocationLineWeight
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.AllocationSourceSystem		= AllocationSourceSystem
    			related.AllocationControl			= AllocationControl
    			related.Allocation					= Allocation
    			related.AllocationLine				= AllocationLine
    			related.GeneralLedgerCalendarPeriod = CurrentPeriod
    	ToTempOverridesRel
    		one-to-many relation to AllocationLineTempOverride
    		Field Mapping uses ByDimensionCode
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun
    			related.AllocationLineTempOverride.DimensionCode	= CurrentDimensionCode
    		Instance Selection
    			where (related.Direction.To 
    			and   (related.GeneralLedgerCalendarPeriod = blank or related.GeneralLedgerCalendarPeriod = CurrentPeriod))
    	AccountingEntityGroupRel
    		one-to-many relation to AccountingEntity
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within AccountingEntityGroup)
    	AccountingUnitGroupRel
    		one-to-many relation to AccountingUnit
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within AccountingUnitGroup)
    	AccountGroupRel
    		one-to-many relation to GeneralLedgerChartAccount
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within AccountGroup)
    	ProjectGroupRel
    		one-to-many relation to Project
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within ProjectGroup)
    	Dimension1GroupRel
    		one-to-many relation to FinanceDimension1
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension1Group)
    	Dimension2GroupRel
    		one-to-many relation to FinanceDimension2
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension2Group)
    	Dimension3GroupRel
    		one-to-many relation to FinanceDimension3
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension3Group)
    	Dimension4GroupRel
    		one-to-many relation to FinanceDimension4
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension4Group)
    	Dimension5GroupRel
    		one-to-many relation to FinanceDimension5
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension5Group)
    	Dimension6GroupRel
    		one-to-many relation to FinanceDimension6
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension6Group)
    	Dimension7GroupRel
    		one-to-many relation to FinanceDimension7
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension7Group)
    	Dimension8GroupRel
    		one-to-many relation to FinanceDimension8
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension8Group)
    	Dimension9GroupRel
    		one-to-many relation to FinanceDimension9
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension9Group)
    	Dimension10GroupRel
    		one-to-many relation to FinanceDimension10
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within Dimension10Group)
				 
		AllocationRunRel
			one-to-one relation to AllocationRun
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AllocationRun			= JournalizeGroup
				 
		OverrideAccountingUnitShadowRel
			one-to-many relation to AccountingUnitShadow
			Field Mapping uses BySummaryAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryEntity						= OverrideAccountingEntity
				related.SummaryAccountingUnit				= OverrideAccountingUnit
			Instance Selection
				where (related.AccountingUnitType.Posting)
				
		AccountingUnitShadowRel
			one-to-many relation to AccountingUnitShadow
			Field Mapping uses BySummaryAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryEntity						= SourceAddress.AccountingEntity
				related.SummaryAccountingUnit				= SourceAddress.AccountingUnit
			Instance Selection
				where (related.AccountingUnitType.Posting)
	
		ProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryProject						= SourceAddress.Project
			Instance Selection
				where (related.ProjectType.Posting)
								
		AccountShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses BySummaryAccount 
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryGeneralLedgerChartAccount	= SourceAddress.GeneralLedgerChartAccount
			Instance Selection
				where (related.ChartType.Posting)
								
		Dimension1ShadowRel
			one-to-many relation to FinanceDimension1Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension1			= SourceAddress.FinanceDimension1
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension2ShadowRel
			one-to-many relation to FinanceDimension2Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension2			= SourceAddress.FinanceDimension2
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension3ShadowRel
			one-to-many relation to FinanceDimension3Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension3			= SourceAddress.FinanceDimension3
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension4ShadowRel
			one-to-many relation to FinanceDimension4Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension4			= SourceAddress.FinanceDimension4
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension5ShadowRel
			one-to-many relation to FinanceDimension5Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension5			= SourceAddress.FinanceDimension5
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension6ShadowRel
			one-to-many relation to FinanceDimension6Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension6			= SourceAddress.FinanceDimension6
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension7ShadowRel
			one-to-many relation to FinanceDimension7Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension7			= SourceAddress.FinanceDimension7
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension8ShadowRel
			one-to-many relation to FinanceDimension8Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension8			= SourceAddress.FinanceDimension8
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension9ShadowRel
			one-to-many relation to FinanceDimension9Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension9			= SourceAddress.FinanceDimension9
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension10ShadowRel
			one-to-many relation to FinanceDimension10Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension10			= SourceAddress.FinanceDimension10
			Instance Selection
				where (related.DimensionType.Posting)
				
		AccountingUnitOverrideShadowRel
			one-to-many relation to AccountingUnitShadow
			Field Mapping uses BySummaryAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryEntity						= OverrideAccountingEntity
				related.SummaryAccountingUnit				= OverrideAccountingUnit
			Instance Selection
				where (related.AccountingUnitType.Posting)
	
		ProjectOverrideShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryProject						= OverrideProject
			Instance Selection
				where (related.ProjectType.Posting)
								
		AccountOverrideShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses BySummaryAccount 
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryGeneralLedgerChartAccount	= OverrideAccount
			Instance Selection
				where (related.ChartType.Posting)
								
		Dimension1OverrideShadowRel
			one-to-many relation to FinanceDimension1Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension1			= OverrideDimension1
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension2OverrideShadowRel
			one-to-many relation to FinanceDimension2Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension2			= OverrideDimension2
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension3OverrideShadowRel
			one-to-many relation to FinanceDimension3Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension3			= OverrideDimension3
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension4OverrideShadowRel
			one-to-many relation to FinanceDimension4Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension4			= OverrideDimension4
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension5OverrideShadowRel
			one-to-many relation to FinanceDimension5Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension5			= OverrideDimension5
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension6OverrideShadowRel
			one-to-many relation to FinanceDimension6Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension6			= OverrideDimension6
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension7OverrideShadowRel
			one-to-many relation to FinanceDimension7Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension7			= OverrideDimension7
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension8OverrideShadowRel
			one-to-many relation to FinanceDimension8Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension8			= OverrideDimension8
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension9OverrideShadowRel
			one-to-many relation to FinanceDimension9Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension9			= OverrideDimension9
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension10OverrideShadowRel
			one-to-many relation to FinanceDimension10Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension10			= OverrideDimension10
			Instance Selection
				where (related.DimensionType.Posting)
				
		CubeAllocationPeriodRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod			= CubeAllocationPeriod
				
		CubeSetAllocationPeriodRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod			= AllocationPeriod
				
		CubeAllocationPeriodYTDRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod			= AllocationPeriod + "_YTD"
				
		CubeAllocationPeriodLTDRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod			= AllocationPeriod + "_LTD"

		YearToDateAllocationPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.TopNode 							= AllocationControl.Calendar.TopNode
				related.Year								= AllocationYear
				related.PeriodType							= AllocationControl.PeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod	<= AllocationPeriod)

		StartToEndAllocationPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.TopNode 							= AllocationControl.Calendar.TopNode
				related.Year								= AllocationYear
				related.PeriodType							= AllocationControl.PeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod	>= StartAllocationPeriod
				and    related.GeneralLedgerCalendarPeriod	<= AllocationPeriod)

		ClosestPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < PostingDate)
		CurrentEntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= CurrentAddress.AccountingEntity
				related.Ledger						= LocalTransactionLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < first ClosestPeriodRel.GeneralLedgerCalendarPeriod)
		PreviousStepRel
			one-to-one relation to AllocationStep
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AllocationStep				= AllocationStep-1
		AllPreviousStepsRel
			one-to-many relation to AllocationStep
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AllocationStep < 0 and related.Parent < AllocationStep)
		AllocationStepBaseRel
			one-to-one relation to AllocationStep
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AllocationStep				= -1*AllocationStep

		SummaryAccountingUnitHierarchiesForMatrixMapRel
            one-to-many relation to AccountingUnitHierarchy
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup         = FinanceEnterpriseGroup
                related.AccountingUnitStructure        = AccountingUnitStructure
            Instance Selection
                where (related.AccountingUnitType.Summary)
                
        EntityAccountingUnitHierarchiesForMatrixMapRel
            one-to-many relation to AccountingUnitHierarchy
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
                related.AccountingUnitStructure			= AccountingUnitStructure
            Instance Selection
                where (related.AccountingUnitType.Entity
                and    related.AccountingEntity			= LocalAccountingEntity)
        
        MatrixMapAccountingUnitsRel
            one-to-many relation to AccountingUnitShadow
            Field Mapping uses BySummaryAccountingUnit
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryEntity                = LocalAccountingEntity
                related.SummaryAccountingUnit        = SummaryAccountingUnitHierarchiesForMatrixMapRel.AccountingUnit
            Instance Selection
                where (related.AccountingUnitType.Posting)
		
		MatrixMapAccountingUnitForGroupsRel
            one-to-many relation to AccountingUnitShadow
            Field Mapping uses BySummaryAccountingUnit
                related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
            Instance Selection
                where (related.AccountingUnitType.Posting
                and    related.SummaryEntity                = any SourceAccountingEntityGroupRel.AccountingEntity
                and    related.SummaryAccountingUnit        = any SummaryAccountingUnitHierarchiesForMatrixMapRel.AccountingUnit)				
                
        MatrixMapAccountRel
            one-to-many relation to GLChartAccountShadow
            Field Mapping uses BySummaryAccount
                related.FinanceEnterpriseGroup                = FinanceEnterpriseGroup
                related.SummaryGeneralLedgerChartAccount    = AccountStructure.ChartAccountNode
            Instance Selection
                where (related.ChartType.Posting)
        
        MatrixMapProjectsRel
            one-to-many relation to ProjectShadow
            Field Mapping uses BySummaryProject
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryProject                = ProjectStructure.ProjectNode
            Instance Selection
                where (related.ProjectType.Posting)
                
        MatrixMapDimension1Rel
            one-to-many relation to FinanceDimension1Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension1    = FinanceDimension1Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension2Rel
            one-to-many relation to FinanceDimension2Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension2    = FinanceDimension2Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension3Rel
            one-to-many relation to FinanceDimension3Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension3    = FinanceDimension3Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
        
        MatrixMapDimension4Rel
            one-to-many relation to FinanceDimension4Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension4    = FinanceDimension4Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension5Rel
            one-to-many relation to FinanceDimension5Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension5    = FinanceDimension5Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension6Rel
            one-to-many relation to FinanceDimension6Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension6    = FinanceDimension6Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension7Rel
            one-to-many relation to FinanceDimension7Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension7    = FinanceDimension7Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
        
        MatrixMapDimension8Rel
            one-to-many relation to FinanceDimension8Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension8    = FinanceDimension8Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension9Rel
            one-to-many relation to FinanceDimension9Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension9    = FinanceDimension9Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
        MatrixMapDimension10Rel
            one-to-many relation to FinanceDimension10Shadow
            Field Mapping uses BySummaryDimension
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.SummaryFinanceDimension10    = FinanceDimension10Structure.DimensionNode
            Instance Selection
                where (related.DimensionType.Posting)
                
    	FromAllocationLineOverrideAccountingUnitNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.AccountingUnit not entered)

    	FromAllocationLineOverrideAccountNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.GeneralLedgerChartAccount not entered)

    	FromAllocationLineOverrideProjectNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.Project not entered)

    	FromAllocationLineOverrideFinanceDimension1NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension1 not entered)

    	FromAllocationLineOverrideFinanceDimension2NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension2 not entered)

    	FromAllocationLineOverrideFinanceDimension3NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension3 not entered)

    	FromAllocationLineOverrideFinanceDimension4NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension4 not entered)

    	FromAllocationLineOverrideFinanceDimension5NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension5 not entered)

    	FromAllocationLineOverrideFinanceDimension6NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension6 not entered)

    	FromAllocationLineOverrideFinanceDimension7NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension7 not entered)

    	FromAllocationLineOverrideFinanceDimension8NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension8 not entered)

    	FromAllocationLineOverrideFinanceDimension9NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension9 not entered)

    	FromAllocationLineOverrideFinanceDimension10NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.From 
    			and    related.FinanceDimension10 not entered)

    	ToAllocationLineOverrideAccountingUnitNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.AccountingUnit not entered)
    			
    	ToAllocationLineOverrideAccountNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.GeneralLedgerChartAccount not entered)

    	ToAllocationLineOverrideProjectNotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.Project not entered)

    	ToAllocationLineOverrideFinanceDimension1NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension1 not entered)

    	ToAllocationLineOverrideFinanceDimension2NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension2 not entered)

    	ToAllocationLineOverrideFinanceDimension3NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension3 not entered)

    	ToAllocationLineOverrideFinanceDimension4NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension4 not entered)

    	ToAllocationLineOverrideFinanceDimension5NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension5 not entered)

    	ToAllocationLineOverrideFinanceDimension6NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension6 not entered)

    	ToAllocationLineOverrideFinanceDimension7NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension7 not entered)

    	ToAllocationLineOverrideFinanceDimension8NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension8 not entered)

    	ToAllocationLineOverrideFinanceDimension9NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension9 not entered)

    	ToAllocationLineOverrideFinanceDimension10NotEnteredRel
    		one-to-many relation to AllocationLineOverride
    		Field Mapping uses ByDirection
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    		Instance Selection
    			where (related.Direction.To 
    			and    related.FinanceDimension10 not entered)
    			
    	CASystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
				related.GeneralLedgerSystemCode				= "CA"

		StructureRowRel
			one-to-many relation to StructureRow
			Field Mapping uses ByOrder
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where ((related.Type.AccountingEntity and AllocationControl.AccountingEntityEnabled)
				or     (related.Type.AccountingUnit   and AllocationControl.AccountingUnitEnabled)
				or     (related.Type.Account          and AllocationControl.AccountEnabled)
				or     (related.Type.Project          and AllocationControl.ProjectEnabled)
				or     (related.Type.Dimension1       and AllocationControl.Dimension1Enabled)
				or     (related.Type.Dimension2       and AllocationControl.Dimension2Enabled)
				or     (related.Type.Dimension3       and AllocationControl.Dimension3Enabled)
				or     (related.Type.Dimension4       and AllocationControl.Dimension4Enabled)
				or     (related.Type.Dimension5       and AllocationControl.Dimension5Enabled)
				or     (related.Type.Dimension6       and AllocationControl.Dimension6Enabled)
				or     (related.Type.Dimension7       and AllocationControl.Dimension7Enabled)
				or     (related.Type.Dimension8       and AllocationControl.Dimension8Enabled)
				or     (related.Type.Dimension9       and AllocationControl.Dimension9Enabled)
				or     (related.Type.Dimension10      and AllocationControl.Dimension10Enabled))

		Dimension10StructureRowRel
			one-to-one relation to StructureRow
			Field Mapping uses ByType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Type						= CodeBlockDimensionType.Dimension10
	
		AllocationRunTargetCurrencyRel
			one-to-one relation to AllocationRunCurrency
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.AllocationRun			= AllocationRunRel.AllocationRun
				related.Currency				= TargetCurrency				

		AllocationRunCurrencyRel
			one-to-many relation to AllocationRunCurrency
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.AllocationRun			= AllocationRunRel.AllocationRun

    	AllTempOverridesRel
    		one-to-many relation to AllocationLineTempOverride
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun

		AllAllocationLineSourceValueRel
			one-to-many relation to AllocationLineSourceValue
			Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun

		AllAllocationTransactionDetailRel
			one-to-many relation to AllocationTransactionDetail
			Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.AllocationSourceSystem	= AllocationSourceSystem
    			related.AllocationControl		= AllocationControl
    			related.Allocation				= Allocation
    			related.AllocationLine			= AllocationLine
    			related.AllocationRun			= AllocationRunRel.AllocationRun

    	SourceAccountingEntityGroupRel
    		one-to-many relation to AccountingEntity
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    		Instance Selection
    			where (related within SourceAccountingEntityGroup)
        
        SourceAccountGroupRel
            one-to-many relation to GeneralLedgerChartAccount
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceAccountGroup)

        SourceAccountingUnitGroupRel
            one-to-many relation to AccountingUnit
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
                related.AccountingEntity        = LocalAccountingEntity
            Instance Selection
                where (related within SourceAccountingUnitGroup)

        SourceProjectGroupRel
            one-to-many relation to Project
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceProjectGroup)

        SourceFinanceDimension1GroupRel
            one-to-many relation to FinanceDimension1
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension1Group)

        SourceFinanceDimension2GroupRel
            one-to-many relation to FinanceDimension2
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension2Group)

        SourceFinanceDimension3GroupRel
            one-to-many relation to FinanceDimension3
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension3Group)

        SourceFinanceDimension4GroupRel
            one-to-many relation to FinanceDimension4
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension4Group)

        SourceFinanceDimension5GroupRel
            one-to-many relation to FinanceDimension5
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension5Group)

        SourceFinanceDimension6GroupRel
            one-to-many relation to FinanceDimension6
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension6Group)

        SourceFinanceDimension7GroupRel
            one-to-many relation to FinanceDimension7
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension7Group)

        SourceFinanceDimension8GroupRel
            one-to-many relation to FinanceDimension8
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension8Group)

        SourceFinanceDimension9GroupRel
            one-to-many relation to FinanceDimension9
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension9Group)

        SourceFinanceDimension10GroupRel
            one-to-many relation to FinanceDimension10
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
            Instance Selection
                where (related within SourceFinanceDimension10Group)

		AllocationRunJobRel
			one-to-one relation to AllocationRunJob
			Field Mapping uses ByAllocationLine
                related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.AllocationSourceSystem		= AllocationSourceSystem
                related.AllocationControl			= AllocationControl
                related.Allocation					= Allocation
                related.AllocationLine				= AllocationLine
                related.AllocationRun				= AllocationRunRel.AllocationRun
                related.JobType						= AllocationRunJobType.RunLine
		
		LastAllocationTransactionDetailRel 
			one-to-one relation to AllocationTransactionDetail
			Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.AllocationSourceSystem		= AllocationSourceSystem
    			related.AllocationControl			= AllocationControl
    			related.Allocation					= Allocation
    			related.AllocationLine				= AllocationLine
    			related.AllocationRun				= AllocationRunRel.AllocationRun
				related.AllocationTransactionDetail	= LocalAllocationTransactionDetail.AllocationTransactionDetail

		LastCashOffsetAllocationTransactionDetailRel  
			one-to-one relation to AllocationTransactionDetail
			Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.AllocationSourceSystem		= AllocationSourceSystem
    			related.AllocationControl			= AllocationControl
    			related.Allocation					= Allocation
    			related.AllocationLine				= AllocationLine
    			related.AllocationRun				= AllocationRunRel.AllocationRun
				related.AllocationTransactionDetail	= LocalCashOffsetTransactionDetail.AllocationTransactionDetail

		ToMappingSampleComputeStatementRel is a SampleComputeStatement set
			Instance Selection
				where (related.BusinessClass = DerivedToCustomComputeBusinessClass)

		FromMappingSampleComputeStatementRel is a SampleComputeStatement set
			Instance Selection
				where (related.BusinessClass = DerivedFromCustomComputeBusinessClass)

		SourceSampleComputeStatementRel is a SampleComputeStatement set
			Instance Selection
				where (related.BusinessClass = "AllocationLine")

		AllocationLineReportRel
			one-to-one relation to AllocationLineReport
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                          = FinanceEnterpriseGroup
				related.AllocationRun                                   = AllocationRunRel.AllocationRun
				related.AllocationLineReport.AllocationSourceSystem     = AllocationSourceSystem
				related.AllocationLineReport.AllocationControl          = AllocationControl
				related.AllocationLineReport.Allocation                 = Allocation
				related.AllocationLineReport.AllocationLine             = AllocationLine


	Transient Fields
		TransientScenario					is a Scenario
			derive value from ScenarioRel.Scenario
		TransientSourceLedger				is a Ledger
			derive value from DerivedSourceLedger

		Source								is a FinanceAddress	 
			holds pii
		From								is a FinanceAddress	 
			holds pii
		To									is a FinanceAddress	 
			holds pii

		AllocatingPreviousSteps				is Boolean

		BypassMultiMultidimensionInitialization is Boolean	
		AccountingUnitStructure
			derive value from DefaultAccountingUnitStructure
		FinanceDimension1Structure
			derive value from DefaultFinanceDimension1Structure
		FinanceDimension2Structure
			derive value from DefaultFinanceDimension2Structure
		FinanceDimension3Structure
			derive value from DefaultFinanceDimension3Structure
		FinanceDimension4Structure
			derive value from DefaultFinanceDimension4Structure
		FinanceDimension5Structure
			derive value from DefaultFinanceDimension5Structure
		FinanceDimension6Structure
			derive value from DefaultFinanceDimension6Structure
		FinanceDimension7Structure
			derive value from DefaultFinanceDimension7Structure
		FinanceDimension8Structure
			derive value from DefaultFinanceDimension8Structure
		FinanceDimension9Structure
			derive value from DefaultFinanceDimension9Structure
		FinanceDimension10Structure
			derive value from DefaultFinanceDimension10Structure
		ProjectStructure
			derive value from DefaultProjectStructure
		AccountStructure					is a ReportingChart
			derive value from DefaultAccountStructure
    	TransientOnline							is Alpha size 1
    		derive value from DeriveReturnYes			

	Field Rules
		AllocateAllCurrencyAmounts
			constraint (not FromPostOption.Compute and not ToPostOption.Compute)
				"CannotSetWhenPostOptionIsCompute"
			constraint (AllocationControl.Type.Actuals)
				"NotApplicableForBudgetAllocation"

			if (ComputeAndBypassSourceBalance)
				initialize AllocateAllCurrencyAmounts

		AllowNegativeWeights
			constraint (FromPostOption.Split or ToPostOption.Split)
				"OnlyAllowedForSplitOption"
			if (AllocationLineOverridesRel exists)
				cannot be changed
					"ManualOverrideExists;CannotChangeAllowNegativeWeights"

		ProcessAllPostingBalance
			if (ProcessAllPostingBalance)
				initialize ProcessAccountingUnitPostingBalance
				initialize ProcessAccountPostingBalance
				initialize ProcessProjectPostingBalance
				initialize ProcessDimension1PostingBalance
				initialize ProcessDimension2PostingBalance
				initialize ProcessDimension3PostingBalance
				initialize ProcessDimension4PostingBalance
				initialize ProcessDimension5PostingBalance
				initialize ProcessDimension6PostingBalance
				initialize ProcessDimension7PostingBalance
				initialize ProcessDimension8PostingBalance
				initialize ProcessDimension9PostingBalance
				initialize ProcessDimension10PostingBalance

				if (ComputeAndBypassSourceBalance)
					initialize ProcessAllPostingBalance

		AllocationLine
			constraint (DimensionValue size <= 71)
				"AllocationLineHasCubeDimensionValue<DimensionValue>OfDimensionSize<DimensionValue size>ExceedingInforCubeLimitOf71"
		
		AllocateLifeToDate
			if (AllocateYearToDate)
				constraint (not AllocateLifeToDate)
					"CannotSetBothYearToDateAndLifeToDate"

			if (ComputeAndBypassSourceBalance)
				initialize AllocateLifeToDate

		AllocateYearToDate
			if (ComputeAndBypassSourceBalance)
				initialize AllocateYearToDate
		
		AllocationStep
			initial value is DerivedDefaultAllocationStep
			default to DerivedDefaultAllocationStep
			required
			constraint (AllocationStep > 0 )
				"StepMustBePositive"
		SourcePercentage
			default to 100%
		SourceSystemCode
			initial value is Allocation.SourceSystemCode
        
        SourceAccountingEntityGroup
            if (not UseCustomGroupInSourceAddress)
                initialize SourceAccountingEntityGroup

            constraint (SourceAddress.AccountingEntity not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.AccountingEntityLabel>And<FinanceEnterpriseGroup.AccountingEntityLabel>CustomGroup"
            constraint (SourceAddress.AccountingUnit not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.AccountingUnitLabel>And<FinanceEnterpriseGroup.AccountingEntityLabel>CustomGroup"
            constraint (SourceAccountingUnitGroup not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.AccountingEntityLabel>CustomGroupAnd<FinanceEnterpriseGroup.AccountingUnitLabel>CustomGroup"
        
        SourceAccountingUnitGroup
            if (not UseCustomGroupInSourceAddress)
                initialize SourceAccountingUnitGroup
            
            if (SourceAccountingUnitGroup entered)
                TreatBlankAccountingUnitAsEmpty = false
            
            constraint (SourceAddress.AccountingUnit not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.AccountingUnitLabel>And<FinanceEnterpriseGroup.AccountingUnitLabel>CustomGroup"
        
        SourceAccountGroup
            if (not UseCustomGroupInSourceAddress)
                initialize SourceAccountGroup

            constraint (SourceAddress.GeneralLedgerChartAccount not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.AccountLabel>And<FinanceEnterpriseGroup.AccountLabel>CustomGroup"

        SourceProjectGroup
            if (not UseCustomGroupInSourceAddress)
                initialize SourceProjectGroup

            if (SourceProjectGroup entered)
                TreatBlankProjectAsEmpty = false

            constraint (SourceAddress.Project not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.ProjectLabel>And<FinanceEnterpriseGroup.ProjectLabel>CustomGroup"
            
        SourceFinanceDimension1Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension1Group

            if (SourceFinanceDimension1Group entered)
                TreatBlankDimension1AsEmpty = false

            constraint (SourceAddress.FinanceDimension1 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension1Label>And<FinanceEnterpriseGroup.FinanceDimension1Label>CustomGroup"
        
        SourceFinanceDimension2Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension2Group

            if (SourceFinanceDimension2Group entered)
                TreatBlankDimension2AsEmpty = false

            constraint (SourceAddress.FinanceDimension2 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension2Label>And<FinanceEnterpriseGroup.FinanceDimension2Label>CustomGroup"

        SourceFinanceDimension3Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension3Group

            if (SourceFinanceDimension3Group entered)
                TreatBlankDimension3AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension3 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension3Label>And<FinanceEnterpriseGroup.FinanceDimension3Label>CustomGroup"

        SourceFinanceDimension4Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension4Group

            if (SourceFinanceDimension4Group entered)
                TreatBlankDimension4AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension4 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension4Label>And<FinanceEnterpriseGroup.FinanceDimension4Label>CustomGroup"

        SourceFinanceDimension5Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension5Group

            if (SourceFinanceDimension5Group entered)
                TreatBlankDimension5AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension5 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension5Label>And<FinanceEnterpriseGroup.FinanceDimension5Label>CustomGroup"

        SourceFinanceDimension6Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension6Group

            if (SourceFinanceDimension6Group entered)
                TreatBlankDimension6AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension6 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension6Label>And<FinanceEnterpriseGroup.FinanceDimension6Label>CustomGroup"

        SourceFinanceDimension7Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension7Group

            if (SourceFinanceDimension7Group entered)
                TreatBlankDimension7AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension7 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension7Label>And<FinanceEnterpriseGroup.FinanceDimension7Label>CustomGroup"

        SourceFinanceDimension8Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension8Group

            if (SourceFinanceDimension8Group entered)
                TreatBlankDimension8AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension8 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension8Label>And<FinanceEnterpriseGroup.FinanceDimension8Label>CustomGroup"

        SourceFinanceDimension9Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension9Group

            if (SourceFinanceDimension9Group entered)
                TreatBlankDimension9AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension9 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension9Label>And<FinanceEnterpriseGroup.FinanceDimension9Label>CustomGroup"

        SourceFinanceDimension10Group
            if (not UseCustomGroupInSourceAddress)
                initialize SourceFinanceDimension10Group

            if (SourceFinanceDimension10Group entered)
                TreatBlankDimension10AsEmpty = false
            
            constraint (SourceAddress.FinanceDimension10 not entered)
                "CannotSelectBoth<FinanceEnterpriseGroup.FinanceDimension10Label>And<FinanceEnterpriseGroup.FinanceDimension10Label>CustomGroup"

		SourceAddress
            if (not HasCustomGroupDimensionEntered)
                required
                    "SourceAddressRequired"
            else
                if (SourceAddress not entered)
                    SourceAddress.Ledger = DerivedSourceLedger
			if (Allocation.CustodialAccountInterest)
                if (SourceAccountingEntityGroup not entered)
                    constraint (SourceAddress.AccountingEntity entered)
                        "<FinanceEnterpriseGroup.AccountingEntityLabel>IsRequiredForCustodialAccountInterest"
                    constraint (SourceAddress.AccountingEntity.PostingEntity)
                        "MustEnterPosting<FinanceEnterpriseGroup.AccountingEntityLabel>"
			if (not AllocationControl.AllocationSourceSystem.TransferPricing)
				if (SourceAddress.AccountingEntity entered)
					constraint (SourceAddress.AccountingEntity.Status.Active)
						"SourceAddress<FinanceEnterpriseGroup.AccountingEntityLabel>MustBeActive"
				if (SourceAddress.AccountingUnit entered
				and SourceAddress.AccountingUnit.PostingAccountingUnit)
					constraint (SourceAddress.AccountingUnit.Active)
						"SourceAddress<FinanceEnterpriseGroup.AccountingUnitLabel>MustBeActive"
				if (SourceAddress.GeneralLedgerChartAccount entered
				and SourceAddress.GeneralLedgerChartAccount.IsPosting)
					constraint (SourceAddress.GeneralLedgerChartAccount.Active)
						"SourceAddress<FinanceEnterpriseGroup.AccountLabel>MustBeActive"
				if (SourceAddress.Project entered
				and SourceAddress.Project.IsPostingProject)
					constraint (SourceAddress.Project.Active)
						"SourceAddress<FinanceEnterpriseGroup.ProjectLabel>MustBeActive"
				if (SourceAddress.FinanceDimension1 entered
				and SourceAddress.FinanceDimension1.PostingDimension)
					constraint (SourceAddress.FinanceDimension1.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension1Label>MustBeActive"
				if (SourceAddress.FinanceDimension2 entered
				and SourceAddress.FinanceDimension2.PostingDimension)
					constraint (SourceAddress.FinanceDimension2.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension2Label>MustBeActive"
				if (SourceAddress.FinanceDimension3 entered
				and SourceAddress.FinanceDimension3.PostingDimension)
					constraint (SourceAddress.FinanceDimension3.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension3Label>MustBeActive"
				if (SourceAddress.FinanceDimension4 entered
				and SourceAddress.FinanceDimension4.PostingDimension)
					constraint (SourceAddress.FinanceDimension4.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension4Label>MustBeActive"
				if (SourceAddress.FinanceDimension5 entered
				and SourceAddress.FinanceDimension5.PostingDimension)
					constraint (SourceAddress.FinanceDimension5.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension5Label>MustBeActive"
				if (SourceAddress.FinanceDimension6 entered
				and SourceAddress.FinanceDimension6.PostingDimension)
					constraint (SourceAddress.FinanceDimension6.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension6Label>MustBeActive"
				if (SourceAddress.FinanceDimension7 entered
				and SourceAddress.FinanceDimension7.PostingDimension)
					constraint (SourceAddress.FinanceDimension7.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension7Label>MustBeActive"
				if (SourceAddress.FinanceDimension8 entered
				and SourceAddress.FinanceDimension8.PostingDimension)
					constraint (SourceAddress.FinanceDimension8.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension8Label>MustBeActive"
				if (SourceAddress.FinanceDimension9 entered
				and SourceAddress.FinanceDimension9.PostingDimension)
					constraint (SourceAddress.FinanceDimension9.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension9Label>MustBeActive"
				if (SourceAddress.FinanceDimension10 entered
				and SourceAddress.FinanceDimension10.PostingDimension)
					constraint (SourceAddress.FinanceDimension10.Active)
						"SourceAddress<FinanceEnterpriseGroup.FinanceDimension10Label>MustBeActive"
						
				if (SourceAddress.AccountingUnit entered)
					TreatBlankAccountingUnitAsEmpty =  false
				if (SourceAddress.Project entered)
					TreatBlankProjectAsEmpty =  false
				if (SourceAddress.FinanceDimension1 entered)
					TreatBlankDimension1AsEmpty =  false
				if (SourceAddress.FinanceDimension2 entered)
					TreatBlankDimension2AsEmpty =  false
				if (SourceAddress.FinanceDimension3 entered)
					TreatBlankDimension3AsEmpty =  false
				if (SourceAddress.FinanceDimension4 entered)
					TreatBlankDimension4AsEmpty =  false
				if (SourceAddress.FinanceDimension5 entered)
					TreatBlankDimension5AsEmpty =  false
				if (SourceAddress.FinanceDimension6 entered)
					TreatBlankDimension6AsEmpty =  false
				if (SourceAddress.FinanceDimension7 entered)
					TreatBlankDimension7AsEmpty =  false
				if (SourceAddress.FinanceDimension8 entered)
					TreatBlankDimension8AsEmpty =  false
				if (SourceAddress.FinanceDimension9 entered)
					TreatBlankDimension9AsEmpty =  false
				if (SourceAddress.FinanceDimension10 entered)
					TreatBlankDimension10AsEmpty =  false

				if (AllocationControl.AccountingEntityEnabled)
                    if (SourceAccountingEntityGroup not entered
                    and SourceAddress.AccountingEntity not entered)
                        constraint (SourceAddress.AccountingEntity entered)
                            "SourceAddress<FinanceEnterpriseGroup.AccountingEntityLabel>Required"



				

				if (AccountingUnitOverrideRequired)
					constraint (ToOverride.AccountingUnit entered
					or TreatBlankToAccountingUnitAsEmpty
					or ToDimensionWithMultipleOverrides.Type.AccountingUnit
					or ToMultipleDimensionOverrideAccountingUnitEntered)
						"<FinanceEnterpriseGroup.AccountingUnitLabel>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.AccountingUnitLabel>"
					constraint (FromOverride.AccountingUnit entered
					or TreatBlankFromAccountingUnitAsEmpty
					or FromDimensionWithMultipleOverrides.Type.AccountingUnit
					or FromMultipleDimensionOverrideAccountingUnitEntered)
						"<FinanceEnterpriseGroup.AccountingUnitLabel>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.AccountingUnitLabel>"
				if (AccountOverrideRequired)
					constraint (ToOverride.GeneralLedgerChartAccount entered
					or TreatBlankToAccountAsEmpty
					or ToDimensionWithMultipleOverrides.Type.Account
					or ToMultipleDimensionOverrideAccountEntered)
						"<FinanceEnterpriseGroup.AccountLabel>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.AccountLabel>"
					constraint (FromOverride.GeneralLedgerChartAccount entered
					or TreatBlankFromAccountAsEmpty
					or FromDimensionWithMultipleOverrides.Type.Account
					or FromMultipleDimensionOverrideAccountEntered)
						"<FinanceEnterpriseGroup.AccountLabel>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.AccountLabel>"
				if (ProjectOverrideRequired)
					constraint (ToOverride.Project entered
					or TreatBlankToProjectAsEmpty
					or ToDimensionWithMultipleOverrides.Type.Project
					or ToMultipleDimensionOverrideProjectEntered)
						"<FinanceEnterpriseGroup.ProjectLabel>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (FromOverride.Project entered
					or TreatBlankFromProjectAsEmpty
					or FromDimensionWithMultipleOverrides.Type.Project
					or FromMultipleDimensionOverrideProjectEntered)
						"<FinanceEnterpriseGroup.ProjectLabel>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.ProjectLabel>"
				if (FinanceDimension1OverrideRequired)
					constraint (ToOverride.FinanceDimension1 entered
					or TreatBlankToDimension1AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension1
					or ToMultipleDimensionOverrideFinanceDimension1Entered)
						"<FinanceEnterpriseGroup.FinanceDimension1Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension1Label>"
					constraint (FromOverride.FinanceDimension1 entered
					or TreatBlankFromDimension1AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension1
					or FromMultipleDimensionOverrideFinanceDimension1Entered)
						"<FinanceEnterpriseGroup.FinanceDimension1Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension1Label>"
				if (FinanceDimension2OverrideRequired)
					constraint (ToOverride.FinanceDimension2 entered
					or TreatBlankToDimension2AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension2
					or ToMultipleDimensionOverrideFinanceDimension2Entered)
						"<FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension2Label>"
					constraint (FromOverride.FinanceDimension2 entered
					or TreatBlankFromDimension2AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension2
					or FromMultipleDimensionOverrideFinanceDimension2Entered)
						"<FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension2Label>"
				if (FinanceDimension3OverrideRequired)
					constraint (ToOverride.FinanceDimension3 entered
					or TreatBlankToDimension3AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension3
					or ToMultipleDimensionOverrideFinanceDimension3Entered)
						"<FinanceEnterpriseGroup.FinanceDimension3Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension3Label>"
					constraint (FromOverride.FinanceDimension3 entered
					or TreatBlankFromDimension3AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension3
					or FromMultipleDimensionOverrideFinanceDimension3Entered)
						"<FinanceEnterpriseGroup.FinanceDimension3Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension3Label>"
				if (FinanceDimension4OverrideRequired)
					constraint (ToOverride.FinanceDimension4 entered
					or TreatBlankToDimension4AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension4
					or ToMultipleDimensionOverrideFinanceDimension4Entered)
						"<FinanceEnterpriseGroup.FinanceDimension4Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension4Label>"
					constraint (FromOverride.FinanceDimension4 entered
					or TreatBlankFromDimension4AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension4
					or FromMultipleDimensionOverrideFinanceDimension4Entered)
						"<FinanceEnterpriseGroup.FinanceDimension4Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension4Label>"
				if (FinanceDimension5OverrideRequired)
					constraint (ToOverride.FinanceDimension5 entered
					or TreatBlankToDimension5AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension5
					or ToMultipleDimensionOverrideFinanceDimension5Entered)
						"<FinanceEnterpriseGroup.FinanceDimension5Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension5Label>"
					constraint (FromOverride.FinanceDimension5 entered
					or TreatBlankFromDimension5AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension5
					or FromMultipleDimensionOverrideFinanceDimension5Entered)
						"<FinanceEnterpriseGroup.FinanceDimension5Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension5Label>"
				if (FinanceDimension6OverrideRequired)
					constraint (ToOverride.FinanceDimension6 entered
					or TreatBlankToDimension6AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension6
					or ToMultipleDimensionOverrideFinanceDimension6Entered)
						"<FinanceEnterpriseGroup.FinanceDimension6Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension6Label>"
					constraint (FromOverride.FinanceDimension6 entered
					or TreatBlankFromDimension6AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension6
					or FromMultipleDimensionOverrideFinanceDimension6Entered)
						"<FinanceEnterpriseGroup.FinanceDimension6Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension6Label>"
				if (FinanceDimension7OverrideRequired)
					constraint (ToOverride.FinanceDimension7 entered
					or TreatBlankToDimension7AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension7
					or ToMultipleDimensionOverrideFinanceDimension7Entered)
						"<FinanceEnterpriseGroup.FinanceDimension7Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension7Label>"
					constraint (FromOverride.FinanceDimension7 entered
					or TreatBlankFromDimension7AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension7
					or FromMultipleDimensionOverrideFinanceDimension7Entered)
						"<FinanceEnterpriseGroup.FinanceDimension7Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension7Label>"
				if (FinanceDimension8OverrideRequired)
					constraint (ToOverride.FinanceDimension8 entered
					or TreatBlankToDimension8AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension8
					or ToMultipleDimensionOverrideFinanceDimension8Entered)
						"<FinanceEnterpriseGroup.FinanceDimension8Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension8Label>"
					constraint (FromOverride.FinanceDimension8 entered
					or TreatBlankFromDimension8AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension8
					or FromMultipleDimensionOverrideFinanceDimension8Entered)
						"<FinanceEnterpriseGroup.FinanceDimension8Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension8Label>"
				if (FinanceDimension9OverrideRequired)
					constraint (ToOverride.FinanceDimension9 entered
					or TreatBlankToDimension9AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension9
					or ToMultipleDimensionOverrideFinanceDimension9Entered)
						"<FinanceEnterpriseGroup.FinanceDimension9Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension9Label>"
					constraint (FromOverride.FinanceDimension9 entered
					or TreatBlankFromDimension9AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension9
					or FromMultipleDimensionOverrideFinanceDimension9Entered)
						"<FinanceEnterpriseGroup.FinanceDimension9Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension9Label>"
				if (FinanceDimension10OverrideRequired)
					constraint (ToOverride.FinanceDimension10 entered
					or TreatBlankToDimension10AsEmpty
					or ToDimensionWithMultipleOverrides.Type.Dimension10
					or ToMultipleDimensionOverrideFinanceDimension10Entered)
						"<FinanceEnterpriseGroup.FinanceDimension10Label>IsRequired.MustEnterToMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension10Label>"
					constraint (FromOverride.FinanceDimension10 entered
					or TreatBlankFromDimension10AsEmpty
					or FromDimensionWithMultipleOverrides.Type.Dimension10
					or FromMultipleDimensionOverrideFinanceDimension10Entered)
						"<FinanceEnterpriseGroup.FinanceDimension10Label>IsRequired.MustEnterFromMappingOverrideForBlankSource<FinanceEnterpriseGroup.FinanceDimension10Label>"


				if (AccountingUnitSummaryOrNodeOverrideRequired)
					constraint (ToOverride.AccountingUnit entered
					or TreatBlankToAccountingUnitAsEmpty
					or ToMultipleAccountingUnit
					or ToMultipleDimensionOverrideAccountingUnitEntered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.AccountingUnitLabel>"
					constraint (FromOverride.AccountingUnit entered
					or TreatBlankFromAccountingUnitAsEmpty
					or FromMultipleAccountingUnit
					or FromMultipleDimensionOverrideAccountingUnitEntered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.AccountingUnitLabel>"
				if (AccountSummaryOrNodeOverrideRequired)
					constraint (ToOverride.GeneralLedgerChartAccount entered
					or TreatBlankToAccountAsEmpty
					or ToMultipleAccount
					or ToMultipleDimensionOverrideAccountEntered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.AccountLabel>"
					constraint (FromOverride.GeneralLedgerChartAccount entered
					or TreatBlankFromAccountAsEmpty
					or FromMultipleAccount
					or FromMultipleDimensionOverrideAccountEntered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.AccountLabel>"
				if (ProjectSummaryOrNodeOverrideRequired)
					constraint (ToOverride.Project entered
					or TreatBlankToProjectAsEmpty
					or ToMultipleProject
					or ToMultipleDimensionOverrideProjectEntered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (FromOverride.Project entered
					or TreatBlankFromProjectAsEmpty
					or FromMultipleProject
					or FromMultipleDimensionOverrideProjectEntered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.ProjectLabel>"
				if (FinanceDimension1SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension1 entered
					or TreatBlankToDimension1AsEmpty
					or ToMultipleDimension1
					or ToMultipleDimensionOverrideFinanceDimension1Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension1Label>"
					constraint (FromOverride.FinanceDimension1 entered
					or TreatBlankFromDimension1AsEmpty
					or FromMultipleDimension1
					or FromMultipleDimensionOverrideFinanceDimension1Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension1Label>"
				if (FinanceDimension2SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension2 entered
					or TreatBlankToDimension2AsEmpty
					or ToMultipleDimension2
					or ToMultipleDimensionOverrideFinanceDimension2Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension2Label>"
					constraint (FromOverride.FinanceDimension2 entered
					or TreatBlankFromDimension2AsEmpty
					or FromMultipleDimension2
					or FromMultipleDimensionOverrideFinanceDimension2Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension2Label>"
				if (FinanceDimension3SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension3 entered
					or TreatBlankToDimension3AsEmpty
					or ToMultipleDimension3
					or ToMultipleDimensionOverrideFinanceDimension3Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension3Label>"
					constraint (FromOverride.FinanceDimension3 entered
					or TreatBlankFromDimension3AsEmpty
					or FromMultipleDimension3
					or FromMultipleDimensionOverrideFinanceDimension3Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension3Label>"
				if (FinanceDimension4SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension4 entered
					or TreatBlankToDimension4AsEmpty
					or ToMultipleDimension4
					or ToMultipleDimensionOverrideFinanceDimension4Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension4Label>"
					constraint (FromOverride.FinanceDimension4 entered
					or TreatBlankFromDimension4AsEmpty
					or FromMultipleDimension4
					or FromMultipleDimensionOverrideFinanceDimension1Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension4Label>"
				if (FinanceDimension5SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension5 entered
					or TreatBlankToDimension5AsEmpty
					or ToMultipleDimension5
					or ToMultipleDimensionOverrideFinanceDimension5Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension5Label>"
					constraint (FromOverride.FinanceDimension5 entered
					or TreatBlankFromDimension5AsEmpty
					or FromMultipleDimension5
					or FromMultipleDimensionOverrideFinanceDimension5Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension5Label>"
				if (FinanceDimension6SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension6 entered
					or TreatBlankToDimension6AsEmpty
					or ToMultipleDimension6
					or ToMultipleDimensionOverrideFinanceDimension6Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension6Label>"
					constraint (FromOverride.FinanceDimension6 entered
					or TreatBlankFromDimension6AsEmpty
					or FromMultipleDimension6
					or FromMultipleDimensionOverrideFinanceDimension6Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension6Label>"
				if (FinanceDimension7SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension7 entered
					or TreatBlankToDimension7AsEmpty
					or ToMultipleDimension7
					or ToMultipleDimensionOverrideFinanceDimension7Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension7Label>"
					constraint (FromOverride.FinanceDimension7 entered
					or TreatBlankFromDimension7AsEmpty
					or FromMultipleDimension7
					or FromMultipleDimensionOverrideFinanceDimension7Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension7Label>"
				if (FinanceDimension8SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension8 entered
					or TreatBlankToDimension8AsEmpty
					or ToMultipleDimension8
					or ToMultipleDimensionOverrideFinanceDimension8Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension8Label>"
					constraint (FromOverride.FinanceDimension8 entered
					or TreatBlankFromDimension8AsEmpty
					or FromMultipleDimension8
					or FromMultipleDimensionOverrideFinanceDimension8Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension8Label>"
				if (FinanceDimension9SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension9 entered
					or TreatBlankToDimension9AsEmpty
					or ToMultipleDimension9
					or ToMultipleDimensionOverrideFinanceDimension9Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension9Label>"
					constraint (FromOverride.FinanceDimension9 entered
					or TreatBlankFromDimension9AsEmpty
					or FromMultipleDimension9
					or FromMultipleDimensionOverrideFinanceDimension9Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension9Label>"
				if (FinanceDimension10SummaryOrNodeOverrideRequired)
					constraint (ToOverride.FinanceDimension10 entered
					or TreatBlankToDimension10AsEmpty
					or ToMultipleDimension10
					or ToMultipleDimensionOverrideFinanceDimension10Entered)
						"MustEnterToMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension10Label>"
					constraint (FromOverride.FinanceDimension10 entered
					or TreatBlankFromDimension10AsEmpty
					or FromMultipleDimension10
					or FromMultipleDimensionOverrideFinanceDimension10Entered)
						"MustEnterFromMappingOverrideForSourceAddress<FinanceEnterpriseGroup.FinanceDimension10Label>"

		TransientSourceLedger
			if (TransientSourceLedger not entered)
				initialize SourceLedger
			else
			if (SourceLedger entered
			or (SourceLedger not entered
			and Allocation.SourceLedger entered
			and TransientSourceLedger != Allocation.SourceLedger))
				SourceLedger = TransientSourceLedger






		FromPostOption
			required
            initial value is AllocationPostOption.Consolidate
			if (Allocation.CustodialAccountInterest)
				force default to AllocationPostOption.Consolidate
				cannot be changed
			if (!FromPostOption.Split
			and !ToPostOption.Split)
				constraint (FromPostOption != ToPostOption 
				and not (FromPostOptionIsComputeOrBypassSourceBalance and ToPostOptionIsComputeOrBypassSourceBalance)
				and not (HasPostOptionsRetain and ComputeAndBypassSourceBalance))
					"IncompatibleFromAndToOptions"
			if (FromPostOption.Retain)
				constraint(!ToPostOption.Split)
					"FromAndToCannotCombineRetainAndSplit"
				constraint(!ToPostOption.Compute)
					"FromAndToCannotCombineRetainAndCompute"
			
			if (FromPostOption changed
			and old FromPostOption.Split)
				initialize FromAccountingEntityWeightCompute
				initialize FromAccountingUnitWeightCompute
				initialize FromAccountWeightCompute
				initialize FromDimension1WeightCompute
				initialize FromDimension2WeightCompute
				initialize FromDimension3WeightCompute
				initialize FromDimension4WeightCompute
				initialize FromDimension5WeightCompute
				initialize FromDimension6WeightCompute
				initialize FromDimension7WeightCompute
				initialize FromDimension8WeightCompute
				initialize FromDimension9WeightCompute
				initialize FromDimension10WeightCompute
				initialize FromProjectWeightCompute
				
				if (AllocationSourceSystem.Allocation)
					initialize ComputeOverridesForDistinctDimensions
					initialize ComputeOverridesForAccountingUnit
					initialize ComputeOverridesForAccount
					initialize ComputeOverridesForProject
					initialize ComputeOverridesForDimension1
					initialize ComputeOverridesForDimension2
					initialize ComputeOverridesForDimension3
					initialize ComputeOverridesForDimension4
					initialize ComputeOverridesForDimension5
					initialize ComputeOverridesForDimension6
					initialize ComputeOverridesForDimension7
					initialize ComputeOverridesForDimension8
					initialize ComputeOverridesForDimension9
					initialize ComputeOverridesForDimension10

		ToPostOption
			required
            initial value is DerivedInitialToPostOption
			if (Allocation.CustodialAccountInterest)
				force default to AllocationPostOption.Split
				cannot be changed			
			if (ToPostOption.Retain)
				constraint(!FromPostOption.Split)
					"FromAndToCannotCombineRetainAndSplit"
				constraint(!FromPostOption.Compute)
					"FromAndToCannotCombineComputeAndRetain"
			
			if (ToPostOption changed
			and old ToPostOption.Split)
				initialize ToAccountingEntityWeightCompute
				initialize ToAccountingUnitWeightCompute
				initialize ToAccountWeightCompute
				initialize ToDimension1WeightCompute
				initialize ToDimension2WeightCompute
				initialize ToDimension3WeightCompute
				initialize ToDimension4WeightCompute
				initialize ToDimension5WeightCompute
				initialize ToDimension6WeightCompute
				initialize ToDimension7WeightCompute
				initialize ToDimension8WeightCompute
				initialize ToDimension9WeightCompute
				initialize ToDimension10WeightCompute
				initialize ToProjectWeightCompute
				
				if (AllocationSourceSystem.Allocation)
					initialize ComputeOverridesForDistinctDimensions
					initialize ComputeOverridesForAccountingUnit
					initialize ComputeOverridesForAccount
					initialize ComputeOverridesForProject
					initialize ComputeOverridesForDimension1
					initialize ComputeOverridesForDimension2
					initialize ComputeOverridesForDimension3
					initialize ComputeOverridesForDimension4
					initialize ComputeOverridesForDimension5
					initialize ComputeOverridesForDimension6
					initialize ComputeOverridesForDimension7
					initialize ComputeOverridesForDimension8
					initialize ComputeOverridesForDimension9
					initialize ComputeOverridesForDimension10

		AllocationCurrency
			if (ComputeAndBypassSourceBalance and Compute entered and not AllocateUnits)
				required

				if (AllocationCurrency.Project)
					constraint (SourceAddress.Project.IsPostingProject or ProcessProjectPostingBalance)
						"MustSpecifyProjectInSourceAddressIfAllocationCurrencyIsProject"
			else
				initialize AllocationCurrency

		Compute
			if (not HasComputePostOption)
				initialize Compute

        FromOverride
        	CurrentAddress	= FromOverride
        	if (not AllocationControl.AllocationSourceSystem.TransferPricing)
	        	if (FromOverride.AccountingUnit entered)
	        		TreatBlankFromAccountingUnitAsEmpty =  false
	        		constraint (FromOverride.AccountingUnit.AccountingUnitType.Posting)
	      	  			"From<FinanceEnterpriseGroup.AccountingUnitLabel>MustBePosting"
	        	if (FromOverride.Project entered)
	        		TreatBlankFromProjectAsEmpty =  false
	        		constraint (FromOverride.Project.ProjectType.Posting)
	      	  			"From<FinanceEnterpriseGroup.ProjectLabel>MustBePosting"
	        	if (FromOverride.GeneralLedgerChartAccount entered)
					TreatBlankFromAccountAsEmpty = false
	        		constraint (FromOverride.GeneralLedgerChartAccount.ChartType.Posting)
	      	  			"From<FinanceEnterpriseGroup.AccountLabel>MustBePosting"
	        	if (FromOverride.FinanceDimension1 entered)
	        		TreatBlankFromDimension1AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension1.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension1Label>MustBePosting"
	        	if (FromOverride.FinanceDimension2 entered)
	        		TreatBlankFromDimension2AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension2.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension2Label>MustBePosting"
	        	if (FromOverride.FinanceDimension3 entered)
	        		TreatBlankFromDimension3AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension3.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension3Label>MustBePosting"
	        	if (FromOverride.FinanceDimension4 entered)
	        		TreatBlankFromDimension4AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension4.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension4Label>MustBePosting"
	        	if (FromOverride.FinanceDimension5 entered)
	        		TreatBlankFromDimension5AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension5.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension5Label>MustBePosting"
	        	if (FromOverride.FinanceDimension6 entered)
	        		TreatBlankFromDimension6AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension6.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension6Label>MustBePosting"
	        	if (FromOverride.FinanceDimension7 entered)
	        		TreatBlankFromDimension7AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension7.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension7Label>MustBePosting"
	        	if (FromOverride.FinanceDimension8 entered)
	        		TreatBlankFromDimension8AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension8.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension8Label>MustBePosting"
	        	if (FromOverride.FinanceDimension9 entered)
	        		TreatBlankFromDimension9AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension9.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension9Label>MustBePosting"
	        	if (FromOverride.FinanceDimension10 entered)
	        		TreatBlankFromDimension10AsEmpty =  false
	        		constraint (FromOverride.FinanceDimension10.DimensionType.Posting)
	      	  			"From<FinanceEnterpriseGroup.FinanceDimension10Label>MustBePosting"
        ToOverride
        	CurrentAddress	= ToOverride
        	if (not AllocationControl.AllocationSourceSystem.TransferPricing)
	        	if (ToOverride.AccountingUnit entered)
	        		TreatBlankToAccountingUnitAsEmpty =  false
	        		constraint (ToOverride.AccountingUnit.AccountingUnitType.Posting)
	      	  			"To<FinanceEnterpriseGroup.AccountingUnitLabel>MustBePosting"
	        	if (ToOverride.Project entered)
	        		TreatBlankToProjectAsEmpty =  false
	        		constraint (ToOverride.Project.ProjectType.Posting)
	      	  			"To<FinanceEnterpriseGroup.ProjectLabel>MustBePosting"
	        	if (ToOverride.GeneralLedgerChartAccount entered)
					TreatBlankToAccountAsEmpty = false
	        		constraint (ToOverride.GeneralLedgerChartAccount.ChartType.Posting)
	      	  			"To<FinanceEnterpriseGroup.AccountLabel>MustBePosting"
	        	if (ToOverride.FinanceDimension1 entered)
	        		TreatBlankToDimension1AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension1.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension1Label>MustBePosting"
	        	if (ToOverride.FinanceDimension2 entered)
	        		TreatBlankToDimension2AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension2.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension2Label>MustBePosting"
	        	if (ToOverride.FinanceDimension3 entered)
	        		TreatBlankToDimension3AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension3.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension3Label>MustBePosting"
	        	if (ToOverride.FinanceDimension4 entered)
	        		TreatBlankToDimension4AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension4.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension4Label>MustBePosting"
	        	if (ToOverride.FinanceDimension5 entered)
	        		TreatBlankToDimension5AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension5.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension5Label>MustBePosting"
	        	if (ToOverride.FinanceDimension6 entered)
	        		TreatBlankToDimension6AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension6.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension6Label>MustBePosting"
	        	if (ToOverride.FinanceDimension7 entered)
	        		TreatBlankToDimension7AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension7.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension7Label>MustBePosting"
	        	if (ToOverride.FinanceDimension8 entered)
	        		TreatBlankToDimension8AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension8.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension8Label>MustBePosting"
	        	if (ToOverride.FinanceDimension9 entered)
	        		TreatBlankToDimension9AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension9.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension9Label>MustBePosting"
	        	if (ToOverride.FinanceDimension10 entered)
	        		TreatBlankToDimension10AsEmpty =  false
	        		constraint (ToOverride.FinanceDimension10.DimensionType.Posting)
	      	  			"To<FinanceEnterpriseGroup.FinanceDimension10Label>MustBePosting"
		FromDimensionWithMultipleOverrides
		
			if (FromOverrideOption.TwoDimension)
				constraint (not FromDimensionWithMultipleOverrides.Type.AccountingEntity)
					"AccountingEntityCannotBeSelected"
			
				if (FromDimensionWithMultipleOverrides2 entered)
					required
						"DimensionOverrideMustNotBeBlank"
					
					constraint (FromDimensionWithMultipleOverrides.Type != FromDimensionWithMultipleOverrides2.Type)
						"CannotSpecifyTheSameDimension" 
		
			if (FromOverrideOption.MultipleDimensions)
				initialize FromDimensionWithMultipleOverrides
			constraint (!FromDimensionWithMultipleOverrides.Type.Ledger)
				"CannotSpecifyLedger"
			if (FromDimensionWithMultipleOverrides.Type.AccountingEntity)
				constraint (!SingleFromEntityRequired)
					"CannotHaveMultipleFromEntitiesWithCurrentPostOptions"
			if (FromOverrideOption.OneDimension
			and (FromDimensionWithMultipleOverrides not entered
			and old FromDimensionWithMultipleOverrides entered)
			or (FromDimensionWithMultipleOverrides entered
			and FromDimensionWithMultipleOverrides changed)
			and !BypassMultiMultidimensionInitialization)
				constraint (FromOverridesRel not exists)
					"ManualOverridesExist"
				initialize FromOverrideSummary
				initialize FromAccountingEntityGroup
				initialize FromAccountingUnitGroup
				initialize FromAccountGroup
				initialize FromDimension1Group
				initialize FromDimension2Group
				initialize FromDimension3Group
				initialize FromDimension4Group
				initialize FromDimension5Group
				initialize FromDimension6Group
				initialize FromDimension7Group
				initialize FromDimension8Group
				initialize FromDimension9Group
				initialize FromDimension10Group
				initialize FromProjectGroup
				initialize FromAccountingEntityWeightCompute
				initialize FromAccountingUnitWeightCompute
				initialize FromAccountWeightCompute
				initialize FromDimension1WeightCompute
				initialize FromDimension2WeightCompute
				initialize FromDimension3WeightCompute
				initialize FromDimension4WeightCompute
				initialize FromDimension5WeightCompute
				initialize FromDimension6WeightCompute
				initialize FromDimension7WeightCompute
				initialize FromDimension8WeightCompute
				initialize FromDimension9WeightCompute
				initialize FromDimension10WeightCompute
				initialize FromProjectWeightCompute
			if (AllocationControl.Type.Budget)
				constraint ((FromDimensionWithMultipleOverrides.Type.AccountingEntity and AllocationControl.AccountingEntityEnabled)
				or          (FromDimensionWithMultipleOverrides.Type.AccountingUnit   and AllocationControl.AccountingUnitEnabled)
				or          (FromDimensionWithMultipleOverrides.Type.Account          and AllocationControl.AccountEnabled)
				or          (FromDimensionWithMultipleOverrides.Type.Project          and AllocationControl.ProjectEnabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension1       and AllocationControl.Dimension1Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension2       and AllocationControl.Dimension2Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension3       and AllocationControl.Dimension3Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension4       and AllocationControl.Dimension4Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension5       and AllocationControl.Dimension5Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension6       and AllocationControl.Dimension6Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension7       and AllocationControl.Dimension7Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension8       and AllocationControl.Dimension8Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension9       and AllocationControl.Dimension9Enabled)
				or          (FromDimensionWithMultipleOverrides.Type.Dimension10      and AllocationControl.Dimension10Enabled))
					"<FromDimensionWithMultipleOverrides>IsNotEnabledInScenario"

		FromDimensionWithMultipleOverrides2
			if (FromOverrideOption.TwoDimension)
				constraint (not FromDimensionWithMultipleOverrides2.Type.AccountingEntity)
					"AccountingEntityCannotBeSelected"
						
				if (FromDimensionWithMultipleOverrides entered)
					required
						"DimensionOverrideMustNotBeBlank" 			

		ToOverrideOption
			if (Allocation.CustodialAccountInterest)
				force default to AllocationOverrideOption.MultipleDimensions				
		ToDimensionWithMultipleOverrides



			if (ToOverrideOption.TwoDimension)
				constraint (not ToDimensionWithMultipleOverrides.Type.AccountingEntity)
					"AccountingEntityCannotBeSelected"
			
				if (ToDimensionWithMultipleOverrides2 entered)
					required
						"DimensionOverrideMustNotBeBlank"
					
					constraint (ToDimensionWithMultipleOverrides.Type != ToDimensionWithMultipleOverrides2.Type)
						"CannotSpecifyTheSameDimension"				

			if (ToOverrideOption.MultipleDimensions)
				initialize ToDimensionWithMultipleOverrides
			constraint (!ToDimensionWithMultipleOverrides.Type.Ledger)
				"CannotSpecifyLedger"
			if (ToOverrideOption.OneDimension
			and (ToDimensionWithMultipleOverrides not entered
			and old ToDimensionWithMultipleOverrides entered)
			or (ToDimensionWithMultipleOverrides entered
			and ToDimensionWithMultipleOverrides changed)
			and !BypassMultiMultidimensionInitialization)
				constraint (ToOverridesRel not exists)
					"ManualOverridesExist"
				initialize ToOverrideSummary
				initialize ToAccountingEntityGroup
				initialize ToAccountingUnitGroup
				initialize ToAccountGroup
				initialize ToDimension1Group
				initialize ToDimension2Group
				initialize ToDimension3Group
				initialize ToDimension4Group
				initialize ToDimension5Group
				initialize ToDimension6Group
				initialize ToDimension7Group
				initialize ToDimension8Group
				initialize ToDimension9Group
				initialize ToDimension10Group
				initialize ToProjectGroup
				initialize ToAccountingEntityWeightCompute
				initialize ToAccountingUnitWeightCompute
				initialize ToAccountWeightCompute
				initialize ToDimension1WeightCompute
				initialize ToDimension2WeightCompute
				initialize ToDimension3WeightCompute
				initialize ToDimension4WeightCompute
				initialize ToDimension5WeightCompute
				initialize ToDimension6WeightCompute
				initialize ToDimension7WeightCompute
				initialize ToDimension8WeightCompute
				initialize ToDimension9WeightCompute
				initialize ToDimension10WeightCompute
				initialize ToProjectWeightCompute
			if (AllocationControl.Type.Budget)
				constraint ((ToDimensionWithMultipleOverrides.Type.AccountingEntity and AllocationControl.AccountingEntityEnabled)
				or          (ToDimensionWithMultipleOverrides.Type.AccountingUnit   and AllocationControl.AccountingUnitEnabled)
				or          (ToDimensionWithMultipleOverrides.Type.Account          and AllocationControl.AccountEnabled)
				or          (ToDimensionWithMultipleOverrides.Type.Project          and AllocationControl.ProjectEnabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension1       and AllocationControl.Dimension1Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension2       and AllocationControl.Dimension2Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension3       and AllocationControl.Dimension3Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension4       and AllocationControl.Dimension4Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension5       and AllocationControl.Dimension5Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension6       and AllocationControl.Dimension6Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension7       and AllocationControl.Dimension7Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension8       and AllocationControl.Dimension8Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension9       and AllocationControl.Dimension9Enabled)
				or          (ToDimensionWithMultipleOverrides.Type.Dimension10      and AllocationControl.Dimension10Enabled))
					"<ToDimensionWithMultipleOverrides>IsNotEnabledInScenario"

		ToDimensionWithMultipleOverrides2
			if (ToOverrideOption.TwoDimension)
				constraint (not ToDimensionWithMultipleOverrides2.Type.AccountingEntity)
					"AccountingEntityCannotBeSelected"
				
				if (ToDimensionWithMultipleOverrides entered)
					required
						"DimensionOverrideMustNotBeBlank"
				
		FromOverrideSummary
			if (FromOverrideSummary.AccountingUnit entered)
				constraint (FromAccountingUnitGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.Project entered)
				constraint (FromProjectGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.GeneralLedgerChartAccount entered)
				constraint (FromAccountGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension1 entered)
				constraint (FromDimension1Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension2 entered)
				constraint (FromDimension2Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension3 entered)
				constraint (FromDimension3Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension4 entered)
				constraint (FromDimension4Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension5 entered)
				constraint (FromDimension5Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension6 entered)
				constraint (FromDimension6Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension7 entered)
				constraint (FromDimension7Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension8 entered)
				constraint (FromDimension8Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension9 entered)
				constraint (FromDimension9Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (FromOverrideSummary.FinanceDimension10 entered)
				constraint (FromDimension10Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"

			if (FromOverrideOption.TwoDimension
			and FromDimensionWithMultipleOverrides entered
			and FromDimensionWithMultipleOverrides2 entered)
				initialize LocalSummaryOverrideDimensionCount
				
				if (FromDimensionWithMultipleOverrides.Type.AccountingUnit
				or  FromDimensionWithMultipleOverrides2.Type.AccountingUnit)
					if (FromOverrideSummary.AccountingEntity entered)					
					 	LocalSummaryOverrideDimensionCount += 1 
					 	
					 	constraint (FromOverrideSummary.AccountingUnit entered)
					 		"AllSummaryOverridesShouldBePopulated"
					 	
				if (FromDimensionWithMultipleOverrides.Type.Account
				or  FromDimensionWithMultipleOverrides2.Type.Account)
					if (FromOverrideSummary.GeneralLedgerChartAccount entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Project
				or  FromDimensionWithMultipleOverrides2.Type.Project)
					if (FromOverrideSummary.Project entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension1
				or  FromDimensionWithMultipleOverrides2.Type.Dimension1)
					if (FromOverrideSummary.FinanceDimension1 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension2
				or  FromDimensionWithMultipleOverrides2.Type.Dimension2)
					if (FromOverrideSummary.FinanceDimension2 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension3
				or  FromDimensionWithMultipleOverrides2.Type.Dimension3)
					if (FromOverrideSummary.FinanceDimension3 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension4
				or  FromDimensionWithMultipleOverrides2.Type.Dimension4)
					if (FromOverrideSummary.FinanceDimension4 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension5
				or  FromDimensionWithMultipleOverrides2.Type.Dimension5)
					if (FromOverrideSummary.FinanceDimension5 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension6
				or  FromDimensionWithMultipleOverrides2.Type.Dimension6)
					if (FromOverrideSummary.FinanceDimension6 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension7
				or  FromDimensionWithMultipleOverrides2.Type.Dimension7)
					if (FromOverrideSummary.FinanceDimension7 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension8
				or  FromDimensionWithMultipleOverrides2.Type.Dimension8)
					if (FromOverrideSummary.FinanceDimension8 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension9
				or  FromDimensionWithMultipleOverrides2.Type.Dimension9)
					if (FromOverrideSummary.FinanceDimension9 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (FromDimensionWithMultipleOverrides.Type.Dimension10
				or  FromDimensionWithMultipleOverrides2.Type.Dimension10)
					if (FromOverrideSummary.FinanceDimension10 entered)
						LocalSummaryOverrideDimensionCount += 1
		
				constraint (LocalSummaryOverrideDimensionCount not entered
				or LocalSummaryOverrideDimensionCount = 2)
					"AllSummaryOverridesShouldBePopulated"
		
		ToOverrideSummary
			if (ToOverrideSummary.AccountingUnit entered)
				constraint (ToAccountingUnitGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.Project entered)
				constraint (ToProjectGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.GeneralLedgerChartAccount entered)
				constraint (ToAccountGroup not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension1 entered)
				constraint (ToDimension1Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension2 entered)
				constraint (ToDimension2Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension3 entered)
				constraint (ToDimension3Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension4 entered)
				constraint (ToDimension4Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension5 entered)
				constraint (ToDimension5Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension6 entered)
				constraint (ToDimension6Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension7 entered)
				constraint (ToDimension7Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension8 entered)
				constraint (ToDimension8Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension9 entered)
				constraint (ToDimension9Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"
			if (ToOverrideSummary.FinanceDimension10 entered)
				constraint (ToDimension10Group not entered)
					"CannotSpecifyBothSummaryAndGroupOverrides"

			if (ToOverrideOption.TwoDimension
			and ToDimensionWithMultipleOverrides entered
			and ToDimensionWithMultipleOverrides2 entered)
				initialize LocalSummaryOverrideDimensionCount
				
				if (ToDimensionWithMultipleOverrides.Type.AccountingUnit
				or  ToDimensionWithMultipleOverrides2.Type.AccountingUnit)
					if (ToOverrideSummary.AccountingEntity entered)	
					 	LocalSummaryOverrideDimensionCount += 1
					 	
					 	constraint (ToOverrideSummary.AccountingUnit entered)
					 		"AllSummaryOverridesShouldBePopulated"
					 		
				if (ToDimensionWithMultipleOverrides.Type.Account
				or  ToDimensionWithMultipleOverrides2.Type.Account)
					if (ToOverrideSummary.GeneralLedgerChartAccount entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Project
				or  ToDimensionWithMultipleOverrides2.Type.Project)
					if (ToOverrideSummary.Project entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension1
				or  ToDimensionWithMultipleOverrides2.Type.Dimension1)
					if (ToOverrideSummary.FinanceDimension1 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension2
				or  ToDimensionWithMultipleOverrides2.Type.Dimension2)
					if (ToOverrideSummary.FinanceDimension2 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension3
				or  ToDimensionWithMultipleOverrides2.Type.Dimension3)
					if (ToOverrideSummary.FinanceDimension3 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension4
				or  ToDimensionWithMultipleOverrides2.Type.Dimension4)
					if (ToOverrideSummary.FinanceDimension4 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension5
				or  ToDimensionWithMultipleOverrides2.Type.Dimension5)
					if (ToOverrideSummary.FinanceDimension5 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension6
				or  ToDimensionWithMultipleOverrides2.Type.Dimension6)
					if (ToOverrideSummary.FinanceDimension6 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension7
				or  ToDimensionWithMultipleOverrides2.Type.Dimension7)
					if (ToOverrideSummary.FinanceDimension7 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension8
				or  ToDimensionWithMultipleOverrides2.Type.Dimension8)
					if (ToOverrideSummary.FinanceDimension8 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension9
				or  ToDimensionWithMultipleOverrides2.Type.Dimension9)
					if (ToOverrideSummary.FinanceDimension9 entered)
						LocalSummaryOverrideDimensionCount += 1
				if (ToDimensionWithMultipleOverrides.Type.Dimension10
				or  ToDimensionWithMultipleOverrides2.Type.Dimension9)
					if (ToOverrideSummary.FinanceDimension10 entered)
						LocalSummaryOverrideDimensionCount += 1
		
				constraint (LocalSummaryOverrideDimensionCount not entered
				or LocalSummaryOverrideDimensionCount = 2)
					"AllSummaryOverridesShouldBePopulated"
					
		AccountingUnitStructure
			initial value is DefaultAccountingUnitStructure
		AccountStructure
			initial value is DefaultAccountStructure
		ProjectStructure
			initial value is DefaultProjectStructure
		FinanceDimension1Structure
			initial value is DefaultFinanceDimension1Structure
		FinanceDimension2Structure
			initial value is DefaultFinanceDimension2Structure
		FinanceDimension3Structure
			initial value is DefaultFinanceDimension3Structure
		FinanceDimension4Structure
			initial value is DefaultFinanceDimension4Structure
		FinanceDimension5Structure
			initial value is DefaultFinanceDimension5Structure
		FinanceDimension6Structure
			initial value is DefaultFinanceDimension6Structure
		FinanceDimension7Structure
			initial value is DefaultFinanceDimension7Structure
		FinanceDimension8Structure
			initial value is DefaultFinanceDimension8Structure
		FinanceDimension9Structure
			initial value is DefaultFinanceDimension9Structure
		FinanceDimension10Structure
			initial value is DefaultFinanceDimension10Structure
			
		FromOverrideSetOption
			if (not FromSplit
			or  not FromOverrideOptionMultipleDimension)
				initialize FromOverrideSetOption

        FromAllocationWeightGenerator
            if (not FromOverrideSetOption.DimensionOverrideAndWeightBuilder)
                initialize FromAllocationWeightGenerator

		FromMultipleDimensionCompute
			if (not FromSplit
			or  not FromOverrideOptionMultipleDimension
			or  not FromOverrideSetOption.ManualOverride)
				initialize FromMultipleDimensionCompute
				
		FromAllocationLineOverrideSet
			if (not FromSplit
			or  not FromOverrideOptionMultipleDimension
			or  not FromOverrideSetOption.GroupOverrideList)
				initialize FromAllocationLineOverrideSet
			if (AllowNegativeWeights)
				constraint (FromAllocationLineOverrideSet.AllowNegativeWeights)
					"LineOverrideGroupListShouldAllowNegativeWeights"
			else 
				constraint (not FromAllocationLineOverrideSet.AllowNegativeWeights)
					"LineOverrideGroupListShouldNotAllowNegativeWeights"
		
		FromOverrideSetDetailCompute
			if (not FromSplit
			or  not FromOverrideOptionMultipleDimension
			or  not FromOverrideSetOption.GroupOverrideList)
				initialize FromOverrideSetDetailCompute
				
		ToOverrideSetOption
			if (not ToSplit
			or  not ToOverrideOptionMultipleDimension)
				initialize ToOverrideSetOption

        ToAllocationWeightGenerator
            if (not ToOverrideSetOption.DimensionOverrideAndWeightBuilder)
                initialize ToAllocationWeightGenerator

		ToMultipleDimensionCompute
			if (not ToSplit
			or  not ToOverrideOptionMultipleDimension
			or  not ToOverrideSetOption.ManualOverride)
				initialize ToMultipleDimensionCompute
				
		ToAllocationLineOverrideSet
			if (not ToSplit
			or  not ToOverrideOptionMultipleDimension
			or  not ToOverrideSetOption.GroupOverrideList)
				initialize ToAllocationLineOverrideSet

			if (AllowNegativeWeights)
				constraint (ToAllocationLineOverrideSet.AllowNegativeWeights)
					"LineOverrideGroupListShouldAllowNegativeWeights"
			else 
				constraint (not ToAllocationLineOverrideSet.AllowNegativeWeights)
					"LineOverrideGroupListShouldNotAllowNegativeWeights"			
		
		ToOverrideSetDetailCompute
			if (not ToSplit
			or  not ToOverrideOptionMultipleDimension
			or  not ToOverrideSetOption.GroupOverrideList)
				initialize ToOverrideSetDetailCompute

		ComputeOverridesForDistinctDimensions
			
			if (AllocationSourceSystem.Allocation)
				constraint (not FromPostOption.Split or not ToPostOption.Split)
						"CannotEnableThisOptionIfBoth_From_Post_OptionAnd_To_Post_OptionAreSetTo_Split"
			
			if (not ComputeOverridesForDistinctDimensions
			and AllocationSourceSystem.Allocation)
				initialize ComputeOverridesForAccountingUnit
				initialize ComputeOverridesForAccount
				initialize ComputeOverridesForProject
				initialize ComputeOverridesForDimension1
				initialize ComputeOverridesForDimension2
				initialize ComputeOverridesForDimension3
				initialize ComputeOverridesForDimension4
				initialize ComputeOverridesForDimension5
				initialize ComputeOverridesForDimension6
				initialize ComputeOverridesForDimension7
				initialize ComputeOverridesForDimension8
				initialize ComputeOverridesForDimension9
				initialize ComputeOverridesForDimension10
		
		MinimumTransactionAmount
			if (not FromPostOption.Split and not ToPostOption.Split)
				initialize MinimumTransactionAmount


	Conditions
		AllocationLoggingEnabled
			restricted
			when (AllocationControl.AllocationLoggingEnabled)

		ZeroTransAmountAllocationEnabled
			restricted
			when (config.SuppressZeroTransAmountAllocation not = true)

		UseProcessForAccountOptimization
			restricted																							
			when (not AllocateYearOrLifeToDate 																	 
			and  (SourceAccountGroup entered or not SourceAddress.GeneralLedgerChartAccount.ChartType.Posting))  

		LoadAllMeasures
			restricted
			when (AllocateAllCurrencyAmounts or (ComputeAndBypassSourceBalance and AllocationCurrency.Transaction))

		ComputeAndBypassSourceBalance
			restricted
			when (FromPostOption.ComputeAndBypassSourceBalance or ToPostOption.ComputeAndBypassSourceBalance)

		FromPostOptionIsComputeOrBypassSourceBalance
			restricted
			when (FromPostOption.Compute or FromPostOption.ComputeAndBypassSourceBalance)
		
		ToPostOptionIsComputeOrBypassSourceBalance
			restricted
			when (ToPostOption.Compute or ToPostOption.ComputeAndBypassSourceBalance)
			
		HasPostOptionsRetain
			restricted
			when (FromPostOption.Retain or ToPostOption.Retain)
		
		

		
		IsCurrentSplitValueLessThanMinimumAmount
			restricted
			when (MinimumTransactionAmount entered and (AbsoluteSplitCurrentValue < MinimumTransactionAmount))

		IsOverthrownOptionHighestTransaction
			restricted
			when (LocalOverthrownAmountOption = OverthrownAmountOption.LastHighestWeight)

        HasCustomGroupToSummarize
            restricted
            when ((SourceAccountGroup entered and not ProcessAccountPostingBalance)
            or    (SourceAccountingUnitGroup entered and not ProcessAccountingUnitPostingBalance)
            or    (SourceProjectGroup entered and not ProcessProjectPostingBalance)
            or    (SourceFinanceDimension1Group entered and not ProcessDimension1PostingBalance)
            or    (SourceFinanceDimension2Group entered and not ProcessDimension2PostingBalance)
            or    (SourceFinanceDimension3Group entered and not ProcessDimension3PostingBalance)
            or    (SourceFinanceDimension4Group entered and not ProcessDimension4PostingBalance)
            or    (SourceFinanceDimension5Group entered and not ProcessDimension5PostingBalance)
            or    (SourceFinanceDimension6Group entered and not ProcessDimension6PostingBalance)
            or    (SourceFinanceDimension7Group entered and not ProcessDimension7PostingBalance)
            or    (SourceFinanceDimension8Group entered and not ProcessDimension8PostingBalance)
            or    (SourceFinanceDimension9Group entered and not ProcessDimension9PostingBalance)
            or    (SourceFinanceDimension10Group entered and not ProcessDimension10PostingBalance))

        HasCustomGroupDimensionEntered
            restricted
            when (SourceAccountingEntityGroup entered
            or    SourceAccountGroup entered 
            or    SourceAccountingUnitGroup entered
            or    SourceProjectGroup entered
            or    SourceFinanceDimension1Group entered
            or    SourceFinanceDimension2Group entered
            or    SourceFinanceDimension3Group entered
            or    SourceFinanceDimension4Group entered
            or    SourceFinanceDimension5Group entered
            or    SourceFinanceDimension6Group entered
            or    SourceFinanceDimension7Group entered
            or    SourceFinanceDimension8Group entered
            or    SourceFinanceDimension9Group entered
            or    SourceFinanceDimension10Group entered)

		HasPostOptionCompute
			restricted
			when ((FromPostOption.Compute) or (ToPostOption.Compute))
		HasExternalDetailedSourcesValue
			restricted
			when (AllocationLineSourceValueForReportRel exists)
		HasExternalDetailedSources
			restricted
			when (not AllocationRunContext.NoTransactions
			and   AllocationLineSourceDetailsForReportRel exists
			and   not HasExternalDetailedSourcesValue)
		HasNoExternalDetailedSources
			restricted
			when (not AllocationRunContext.ListingReportOnly
            and   not AllocationRunContext.NoTransactions
			and   not AllocationLineSourceDetailsForReportRel exists
			and   not HasExternalDetailedSourcesValue
			and   not AllocationLineSourceValueNoSourceAmountRel exists)
		HasNoSourceBalances
			restricted
			when ((AllocationRunContext.ListingReportOnly and AllocationLineSourceDetailsForReportRel not exists)
			or     AllocationRunContext.NoTransactions
			or    (not HasExternalDetailedSourcesValue and AllocationLineSourceValueNoSourceAmountRel exists))
		HasFromOverrides
			restricted 
			when (FromOverridesRel exists)		
		HasToOverrides
			restricted 
			when (ToOverridesRel exists)			
		IsOuterFrom
			restricted
			when (FromPostOption.Consolidate 
			or (FromPostOptionIsComputeOrBypassSourceBalance and !ToPostOption.Consolidate)
			or (FromPostOption.Split and ToPostOption.Split))
		SkipFromOverrides
			restricted
			when (FromOverrideCount not entered
			or (FromPostOption.Split and FromTotalSplitWeight not entered))
		SkipToOverrides
			restricted
			when (ToOverrideCount not entered
			or (ToPostOption.Split and ToTotalSplitWeight not entered))
		ConsolidateFrom
			restricted
			when (FromPostOption.Consolidate
			and !ToPostOption.Split
			and ToOverrideCount entered)
		ConsolidateTo
			restricted
			when (ToPostOption.Consolidate
			and !FromPostOption.Split
			and FromOverrideCount entered)
		HasComputePostOption
			restricted
			when (FromPostOption.Compute
			or ToPostOption.Compute
			or ComputeAndBypassSourceBalance)
		SingleFromEntityRequired
			restricted
			when (!IsOuterFrom
			or (ToPostOption.Split and FromPostOption.Split))
		FromSplit
			restricted
			when (FromPostOption.Split)
		FromHasMultipleOverrideDimension
			restricted
			when (FromDimensionWithMultipleOverrides entered)
		FromMultipleAccountingEntity
			restricted
			when (FromDimensionWithMultipleOverrides.Type.AccountingEntity)
		FromMultipleAccountingEntityOrAccountingUnit
			restricted
			when (FromDimensionWithMultipleOverrides.Type.AccountingEntity
			or FromDimensionWithMultipleOverrides.Type.AccountingUnit)
		FromMultipleAccountingUnit
			restricted
			when (FromDimensionWithMultipleOverrides.Type.AccountingUnit)
		FromMultipleAccount
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Account)
		FromMultipleProject
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Project)
		FromMultipleDimension1
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension1)
		FromMultipleDimension2
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension2)
		FromMultipleDimension3
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension3)
		FromMultipleDimension4
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension4)
		FromMultipleDimension5
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension5)
		FromMultipleDimension6
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension6)
		FromMultipleDimension7
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension7)
		FromMultipleDimension8
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension8)
		FromMultipleDimension9
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension9)
		FromMultipleDimension10
			restricted
			when (FromDimensionWithMultipleOverrides.Type.Dimension10)
		FromMultipleAccountingEntityTwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.AccountingEntity)
		FromMultipleAccountingEntityOrAccountingUnitTwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.AccountingEntity
			or FromDimensionWithMultipleOverrides2.Type.AccountingUnit)
		FromMultipleAccountingUnitTwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.AccountingUnit)
		FromMultipleAccountTwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Account)
		FromMultipleProjectTwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Project)
		FromMultipleDimension1TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension1)
		FromMultipleDimension2TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension2)
		FromMultipleDimension3TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension3)
		FromMultipleDimension4TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension4)
		FromMultipleDimension5TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension5)
		FromMultipleDimension6TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension6)
		FromMultipleDimension7TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension7)
		FromMultipleDimension8TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension8)
		FromMultipleDimension9TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension9)
		FromMultipleDimension10TwoDimension
			restricted
			when (FromDimensionWithMultipleOverrides2.Type.Dimension10)			
		ToSplit
			restricted
			when (ToPostOption.Split)
		ToHasMultipleOverrideDimension
			restricted
			when (ToDimensionWithMultipleOverrides entered)
		ToMultipleAccountingEntity
			restricted
			when (ToDimensionWithMultipleOverrides.Type.AccountingEntity)
		ToMultipleAccountingEntityOrAccountingUnit
			restricted
			when (ToDimensionWithMultipleOverrides.Type.AccountingEntity
			or ToDimensionWithMultipleOverrides.Type.AccountingUnit)
		ToMultipleAccountingUnit
			restricted
			when (ToDimensionWithMultipleOverrides.Type.AccountingUnit)
		ToMultipleAccount
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Account)
		ToMultipleProject
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Project)
		ToMultipleDimension1
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension1)
		ToMultipleDimension2
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension2)
		ToMultipleDimension3
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension3)
		ToMultipleDimension4
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension4)
		ToMultipleDimension5
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension5)
		ToMultipleDimension6
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension6)
		ToMultipleDimension7
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension7)
		ToMultipleDimension8
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension8)
		ToMultipleDimension9
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension9)
		ToMultipleDimension10
			restricted
			when (ToDimensionWithMultipleOverrides.Type.Dimension10)
		ToMultipleAccountingEntityTwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.AccountingEntity)
		ToMultipleAccountingEntityOrAccountingUnitTwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.AccountingEntity
			or ToDimensionWithMultipleOverrides.Type.AccountingUnit)
		ToMultipleAccountingUnitTwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.AccountingUnit)
		ToMultipleAccountTwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Account)
		ToMultipleProjectTwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Project)
		ToMultipleDimension1TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension1)
		ToMultipleDimension2TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension2)
		ToMultipleDimension3TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension3)
		ToMultipleDimension4TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension4)
		ToMultipleDimension5TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension5)
		ToMultipleDimension6TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension6)
		ToMultipleDimension7TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension7)
		ToMultipleDimension8TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension8)
		ToMultipleDimension9TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension9)
		ToMultipleDimension10TwoDimension
			restricted
			when (ToDimensionWithMultipleOverrides2.Type.Dimension10)
			
		HasSingleFromOverride
			restricted
			when (AllocationLineSingleOverrideForReportRel.FromOverride entered)
		HasSingleToOverride
			restricted
			when (AllocationLineSingleOverrideForReportRel.ToOverride entered)
		HasSingleOverride
			restricted
			when (HasSingleFromOverride or HasSingleToOverride)
		HasMultipleOverrides
			restricted
			when (AllocationLineTempOverridesForReportRel exists)
		HasMultipleDimensionOverrides
			restricted
			when (FromOverrideOption.MultipleDimensions 
			or    ToOverrideOption.MultipleDimensions)
		HasSourceAccountingUnit
			restricted
			when (SourceAddress.AccountingUnit entered)
		HasSourceProject
			restricted
			when (SourceAddress.Project entered)
		HasSourceDimension1
			restricted
			when (SourceAddress.FinanceDimension1 entered)
		HasSourceDimension2
			restricted
			when (SourceAddress.FinanceDimension2 entered)
		HasSourceDimension3
			restricted
			when (SourceAddress.FinanceDimension3 entered)
		HasSourceDimension4
			restricted
			when (SourceAddress.FinanceDimension4 entered)
		HasSourceDimension5
			restricted
			when (SourceAddress.FinanceDimension5 entered)
		HasSourceDimension6
			restricted
			when (SourceAddress.FinanceDimension6 entered)
		HasSourceDimension7
			restricted
			when (SourceAddress.FinanceDimension7 entered)
		HasSourceDimension8
			restricted
			when (SourceAddress.FinanceDimension8 entered)
		HasSourceDimension9
			restricted
			when (SourceAddress.FinanceDimension9 entered)
		HasSourceDimension10
			restricted
			when (SourceAddress.FinanceDimension10 entered)
		HasFromProject
			restricted
			when (FromOverride.Project entered)
		HasFromDimension1
			restricted
			when (FromOverride.FinanceDimension1 entered)
		HasToProject
			restricted
			when (ToOverride.Project entered)
		HasToDimension1
			restricted
			when (ToOverride.FinanceDimension1 entered)
		AllowInvalidCodeBlock
			restricted
			when (AllocationSourceSystem.TransferPricing
			or    AllocationControl.Type.Budget)
		ProcessPostingPerformanceImpact
			restricted
			when (not ProcessAllPostingBalance and (
			(FinanceEnterpriseGroup.AccountingUnitSelected 
					and SourceAddress.AccountingUnit not entered 
					and not TreatBlankAccountingUnitAsEmpty
					and ProcessAccountingUnitPostingBalance)
			or (FinanceEnterpriseGroup.AccountSelected 
				and SourceAddress.GeneralLedgerChartAccount not entered 
				and ProcessAccountPostingBalance)
			or (FinanceEnterpriseGroup.ProjectEntry 
				and SourceAddress.Project not entered 
				and not TreatBlankProjectAsEmpty
				and ProcessProjectPostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension1Entry 
				and SourceAddress.FinanceDimension1 not entered 
				and not TreatBlankDimension1AsEmpty
				and ProcessDimension1PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension2Entry 
				and SourceAddress.FinanceDimension2 not entered 
				and not TreatBlankDimension2AsEmpty
				and ProcessDimension2PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension3Entry 
				and SourceAddress.FinanceDimension3 not entered 
				and not TreatBlankDimension3AsEmpty
				and ProcessDimension3PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension4Entry 
				and SourceAddress.FinanceDimension4 not entered 
				and not TreatBlankDimension4AsEmpty
				and ProcessDimension4PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension5Entry 
				and SourceAddress.FinanceDimension5 not entered 
				and not TreatBlankDimension5AsEmpty
				and ProcessDimension5PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension6Entry 
				and SourceAddress.FinanceDimension6 not entered 
				and not TreatBlankDimension6AsEmpty
				and ProcessDimension6PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension7Entry 
				and SourceAddress.FinanceDimension7 not entered 
				and not TreatBlankDimension7AsEmpty
				and ProcessDimension7PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension8Entry 
				and SourceAddress.FinanceDimension8 not entered 
				and not TreatBlankDimension8AsEmpty
				and ProcessDimension8PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension9Entry 
				and SourceAddress.FinanceDimension9 not entered 
				and not TreatBlankDimension9AsEmpty
				and ProcessDimension9PostingBalance)
			or (FinanceEnterpriseGroup.FinanceDimension10Entry 
				and SourceAddress.FinanceDimension10 not entered 
				and not TreatBlankDimension10AsEmpty
				and ProcessDimension10PostingBalance)))
		
		ToOverrideOptionMultipleDimension
			restricted
			when (ToOverrideOption.MultipleDimensions)
			
		FromOverrideOptionMultipleDimension
			restricted
			when (FromOverrideOption.MultipleDimensions)
			
		FromMultipleDimensionOverrideAccountingUnitEntered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideAccountingUnitNotEnteredRel not exists)

		FromMultipleDimensionOverrideAccountEntered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideAccountNotEnteredRel not exists)

		
		FromMultipleDimensionOverrideProjectEntered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideProjectNotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension1Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension1NotEnteredRel not exists)
			
		FromMultipleDimensionOverrideFinanceDimension2Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension2NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension3Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension3NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension4Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension4NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension5Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension5NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension6Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension6NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension7Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension7NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension8Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension8NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension9Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension9NotEnteredRel not exists)

		FromMultipleDimensionOverrideFinanceDimension10Entered
			restricted
			when (FromOverrideOption.MultipleDimensions
			and   FromAllocationLineOverrideFinanceDimension10NotEnteredRel not exists)

		ToMultipleDimensionOverrideAccountingUnitEntered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideAccountingUnitNotEnteredRel not exists)

		ToMultipleDimensionOverrideAccountEntered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideAccountNotEnteredRel not exists)
		
		ToMultipleDimensionOverrideProjectEntered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideProjectNotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension1Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension1NotEnteredRel not exists)
			
		ToMultipleDimensionOverrideFinanceDimension2Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension2NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension3Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension3NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension4Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension4NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension5Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension5NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension6Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension6NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension7Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension7NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension8Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension8NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension9Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension9NotEnteredRel not exists)

		ToMultipleDimensionOverrideFinanceDimension10Entered
			restricted
			when (ToOverrideOption.MultipleDimensions
			and   ToAllocationLineOverrideFinanceDimension10NotEnteredRel not exists)

		HasFromGroupOverrides
			restricted
			when (FromAccountingEntityGroup	entered
			or    FromAccountingUnitGroup	entered
			or    FromAccountGroup			entered
			or    FromProjectGroup			entered
			or    FromDimension1Group		entered
			or    FromDimension2Group		entered
			or    FromDimension3Group		entered
			or    FromDimension4Group		entered
			or    FromDimension5Group		entered
			or    FromDimension6Group		entered
			or    FromDimension7Group		entered
			or    FromDimension8Group		entered
			or    FromDimension9Group		entered
			or    FromDimension10Group		entered)
			
		HasToGroupOverrides
			restricted
			when (ToAccountingEntityGroup	entered
			or    ToAccountingUnitGroup		entered
			or    ToAccountGroup			entered
			or    ToProjectGroup			entered
			or    ToDimension1Group			entered
			or    ToDimension2Group			entered
			or    ToDimension3Group			entered
			or    ToDimension4Group			entered
			or    ToDimension5Group			entered
			or    ToDimension6Group			entered
			or    ToDimension7Group			entered
			or    ToDimension8Group			entered
			or    ToDimension9Group			entered
			or    ToDimension10Group		entered)
			
		HasFromWeightCompute
			restricted
			when (FromAccountingEntityWeightCompute	entered
			or    FromAccountingUnitWeightCompute	entered
			or    FromAccountWeightCompute			entered
			or    FromProjectWeightCompute			entered
			or    FromDimension1WeightCompute		entered
			or    FromDimension2WeightCompute		entered
			or    FromDimension3WeightCompute		entered
			or    FromDimension4WeightCompute		entered
			or    FromDimension5WeightCompute		entered
			or    FromDimension6WeightCompute		entered
			or    FromDimension7WeightCompute		entered
			or    FromDimension8WeightCompute		entered
			or    FromDimension9WeightCompute		entered
			or    FromDimension10WeightCompute		entered)
			
		HasToWeightCompute
			restricted
			when (ToAccountingEntityWeightCompute	entered
			or    ToAccountingUnitWeightCompute		entered
			or    ToAccountWeightCompute			entered
			or    ToProjectWeightCompute			entered
			or    ToDimension1WeightCompute			entered
			or    ToDimension2WeightCompute			entered
			or    ToDimension3WeightCompute			entered
			or    ToDimension4WeightCompute			entered
			or    ToDimension5WeightCompute			entered
			or    ToDimension6WeightCompute			entered
			or    ToDimension7WeightCompute			entered
			or    ToDimension8WeightCompute			entered
			or    ToDimension9WeightCompute			entered
			or    ToDimension10WeightCompute		entered)
			
		AccountingUnitOverrideRequired
			restricted
			when (SourceAddress.AccountingUnit not entered
            and   SourceAccountingUnitGroup not entered
			and   AllocationControl.AccountingUnitEnabled
			and   FinanceEnterpriseGroup.AccountingUnitRequired
			and   not ProcessAccountingUnitPostingBalance
			and   not ProcessAllPostingBalance)
			
		AccountOverrideRequired
			restricted
			when (SourceAddress.GeneralLedgerChartAccount not entered
            and   SourceAccountGroup not entered
			and   AllocationControl.AccountEnabled
			and   not ProcessAccountPostingBalance
			and   not ProcessAllPostingBalance)
			
		ProjectOverrideRequired
			restricted
			when (SourceAddress.Project not entered
            and   SourceProjectGroup not entered
			and   AllocationControl.ProjectEnabled
			and   FinanceEnterpriseGroup.ProjectRequired
			and   not ProcessProjectPostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension1OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension1 not entered
            and   SourceFinanceDimension1Group not entered
			and   AllocationControl.Dimension1Enabled
			and   FinanceEnterpriseGroup.FinanceDimension1Required
			and   not ProcessDimension1PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension2OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension2 not entered
            and   SourceFinanceDimension2Group not entered
			and   AllocationControl.Dimension2Enabled
			and   FinanceEnterpriseGroup.FinanceDimension2Required
			and   not ProcessDimension2PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension3OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension3 not entered
            and   SourceFinanceDimension3Group not entered
			and   AllocationControl.Dimension3Enabled
			and   FinanceEnterpriseGroup.FinanceDimension3Required
			and   not ProcessDimension3PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension4OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension4 not entered
            and   SourceFinanceDimension4Group not entered
			and   AllocationControl.Dimension4Enabled
			and   FinanceEnterpriseGroup.FinanceDimension4Required
			and   not ProcessDimension4PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension5OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension5 not entered
            and   SourceFinanceDimension5Group not entered
			and   AllocationControl.Dimension5Enabled
			and   FinanceEnterpriseGroup.FinanceDimension5Required
			and   not ProcessDimension5PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension6OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension6 not entered
            and   SourceFinanceDimension6Group not entered
			and   AllocationControl.Dimension6Enabled
			and   FinanceEnterpriseGroup.FinanceDimension6Required
			and   not ProcessDimension6PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension7OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension7 not entered
            and   SourceFinanceDimension7Group not entered
			and   AllocationControl.Dimension7Enabled
			and   FinanceEnterpriseGroup.FinanceDimension7Required
			and   not ProcessDimension7PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension8OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension8 not entered
            and   SourceFinanceDimension8Group not entered
			and   AllocationControl.Dimension8Enabled
			and   FinanceEnterpriseGroup.FinanceDimension8Required
			and   not ProcessDimension8PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension9OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension9 not entered
            and   SourceFinanceDimension9Group not entered
			and   AllocationControl.Dimension9Enabled
			and   FinanceEnterpriseGroup.FinanceDimension9Required
			and   not ProcessDimension9PostingBalance
			and   not ProcessAllPostingBalance)
			
		FinanceDimension10OverrideRequired
			restricted
			when (SourceAddress.FinanceDimension10 not entered
            and   SourceFinanceDimension10Group not entered
			and   AllocationControl.Dimension10Enabled
			and   FinanceEnterpriseGroup.FinanceDimension10Required
			and   not ProcessDimension10PostingBalance
			and   not ProcessAllPostingBalance)
			
		AccountingUnitSummaryOrNodeOverrideRequired
			restricted
			when (not ProcessAccountingUnitPostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceAccountingUnitGroup entered
            or     SourceAddress.AccountingUnit.AccountingUnitType.Summary 
			or     SourceAddress.AccountingUnit.AccountingUnitType.Node))
			
		AccountSummaryOrNodeOverrideRequired
			restricted
			when (not ProcessAccountPostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceAccountGroup entered
            or     SourceAddress.GeneralLedgerChartAccount.ChartType.Summary
			or     SourceAddress.GeneralLedgerChartAccount.ChartType.Node))
			
		ProjectSummaryOrNodeOverrideRequired
			restricted
			when (not ProcessProjectPostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceProjectGroup entered
            or     SourceAddress.Project.ProjectType.Summary
			or     SourceAddress.Project.ProjectType.Node))
			
		FinanceDimension1SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension1PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension1Group entered
            or     SourceAddress.FinanceDimension1.DimensionType.Summary
			or     SourceAddress.FinanceDimension1.DimensionType.Node))
			
		FinanceDimension2SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension2PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension2Group entered
            or     SourceAddress.FinanceDimension2.DimensionType.Summary
			or     SourceAddress.FinanceDimension2.DimensionType.Node))
			
		FinanceDimension3SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension3PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension3Group entered
            or     SourceAddress.FinanceDimension3.DimensionType.Summary
			or     SourceAddress.FinanceDimension3.DimensionType.Node))
			
		FinanceDimension4SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension4PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension4Group entered
            or     SourceAddress.FinanceDimension4.DimensionType.Summary
			or     SourceAddress.FinanceDimension4.DimensionType.Node))
			
		FinanceDimension5SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension5PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension5Group entered
            or     SourceAddress.FinanceDimension5.DimensionType.Summary
			or     SourceAddress.FinanceDimension5.DimensionType.Node))
			
		FinanceDimension6SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension6PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension6Group entered
            or     SourceAddress.FinanceDimension6.DimensionType.Summary
			or     SourceAddress.FinanceDimension6.DimensionType.Node))
			
		FinanceDimension7SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension7PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension7Group entered
            or     SourceAddress.FinanceDimension7.DimensionType.Summary
			or     SourceAddress.FinanceDimension7.DimensionType.Node))
			
		FinanceDimension8SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension8PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension8Group entered
            or     SourceAddress.FinanceDimension8.DimensionType.Summary
			or     SourceAddress.FinanceDimension8.DimensionType.Node))
			
		FinanceDimension9SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension9PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension9Group entered
            or     SourceAddress.FinanceDimension9.DimensionType.Summary
			or     SourceAddress.FinanceDimension9.DimensionType.Node))
			
		FinanceDimension10SummaryOrNodeOverrideRequired
			restricted
			when (not ProcessDimension10PostingBalance 
			and   not ProcessAllPostingBalance
			and   (SourceFinanceDimension10Group entered
            or     SourceAddress.FinanceDimension10.DimensionType.Summary
			or     SourceAddress.FinanceDimension10.DimensionType.Node))
		
		DisplayFromOverrideSet
			restricted
			when (FromSplit
			and   FromOverrideSetOption.GroupOverrideList)
		
		DisplayToOverrideSet
			restricted
			when (ToSplit
			and   ToOverrideSetOption.GroupOverrideList)
			
		AllocateYearOrLifeToDate
			restricted
			when (AllocateYearToDate
			or    AllocateLifeToDate)
		
		RecordExists
			restricted
			when(AllocationLine exists)
			
		HasComputeOverrideDistinctDimension
			restricted
			when (ComputeOverridesForDistinctDimensions
			and   AllocationLineTempOverridesHeaderForReportRel exists)
			
			
	Derived Fields
        DerivedInitialToPostOption is a DerivedField
            type is like AllocationPostOption
            restricted
            if (Allocation.CustodialAccountInterest)
                return AllocationPostOption.Split
            return AllocationPostOption.Retain

        DerivedDefaultAllocationStep is a DerivedField 
            type is like AllocationStep
            restricted
            if (Allocation.DefaultStep entered)
                return Allocation.DefaultStep
            return 1

		DerivedScenarioWithFEG is a StringField
            type is Alpha size 17
            restricted
            default label is untranslatable 
            FinanceEnterpriseGroup
            "/"
            AllocationControl.Scenario

		DisplayAllocateYearToDateText is a DerivedField
			type is Boolean
			default label is "AllocateYearToDate"
			return false

		DisplayAllocateLifeToDateText is a DerivedField
			type is Boolean
			default label is "AllocateLifeToDate"
			return false

		DisplayAllocateAllCurrencyAmountsText is a DerivedField
			type is Boolean
			default label is "AllocateAllCurrencyAmounts"
			return false

		DisplayProcessAllPostingText is a DerivedField
			type is Boolean
			default label is "ProcessPostingDimensionBalances"
			return false

		DerivedAllocateUnitCurrency is a DerivedField
			type is MessageField
			return "Functional"

		DerivedAllocationCurrencyLabel is a LabelField
			restricted
			"AllocationCurrencyWhenSourceBalanceIsBypassed"

		DerivedProcessAllPostingBalance is a DerivedField
			type is Boolean
			default label is "ProcessPostingBalances"
			return ProcessAllPostingBalance

		DerivedSystem is a DerivedField
			type is AlphaUpper size 2
			restricted
			if (AllocationSourceSystem.TrueCost)
				return "TC"
			return "CA"
		CurrentEndDate					is a DerivedField
			type is Date
			CurrentParentPeriod = CurrentPeriod
			while (CurrentParentPeriod.ChildrenRel exists)
				for each CurrentParentPeriod.ChildrenRel
					CurrentParentPeriod = each.GeneralLedgerCalendarPeriod
			display "EndDatePeriod:<CurrentParentPeriod>"
			return CurrentParentPeriod.Date
		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted

    		if (!TargetCurrency exists)
    			return .01
    		if (TargetCurrency.NumberOfDecimals = 2)
    			return .01
    		if (TargetCurrency.NumberOfDecimals = 0)
    			return 1
    		if (TargetCurrency.NumberOfDecimals = 3)
    			return .001
    		if (TargetCurrency.NumberOfDecimals = 4)
    			return .0001
		RoundedSplitCurrentValue	is a DerivedField
    		type is like InternationalAmount
    		restricted
    		if (SplitCurrentValue entered)
    			RoundedSplitCurrentValue = SplitCurrentValue
	    		round RoundedSplitCurrentValue to nearest DerivedRoundTo

	    		return RoundedSplitCurrentValue
	    	else
	    		return 0
		
		AbsoluteSplitCurrentValue is a DerivedField
			type is like InternationalAmount
			restricted
			if (SplitCurrentValue < 0)
				return (SplitCurrentValue * -1)
			return SplitCurrentValue

	    CurrentDimensionCode is a DerivedField
	    	type is Alpha 105
	    	if (ComputeOverridesForDistinctDimensions)
	    		return LocalDistinctDimensionSource.DimensionCode
	    	else
	    	if (ComputeOverridesWithDetails)
	    		return Source.DimensionCode
	    	else
	    	 	return SourceAddressDimensionCode
		RoundedComputedUseValue	is a DerivedField
    		type is like InternationalAmount
    		restricted
			
			RoundedComputedUseValue	= ComputedValue
    		if (RoundedComputedUseValue entered)
	    		round RoundedComputedUseValue to nearest DerivedRoundTo
	    		return RoundedComputedUseValue
	    	else
	    		return 0
		DerivedSourceLedger				is a DerivedField
			type is like Ledger
			if (AllocationControl.Type.Budget)
				return FinanceEnterpriseGroup.CoreLedger
			if (SourceLedger entered)
				return SourceLedger
			else
			if (Allocation.SourceLedger entered)
				return Allocation.SourceLedger
			return Allocation.Ledger
		DerivedFromWeightCompute is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (FromSplit)
    			if (FromMultipleAccountingEntity)
					return FromAccountingEntityWeightCompute
				if (FromMultipleAccountingUnit)				
					return FromAccountingUnitWeightCompute																							
				if (FromMultipleAccount)									
					return FromAccountWeightCompute
				if (FromMultipleProject)
					return FromProjectWeightCompute																									
				if (FromMultipleDimension1)
					return FromDimension1WeightCompute
				if (FromMultipleDimension2)						
					return FromDimension2WeightCompute
				if (FromMultipleDimension3)				 				
					return FromDimension3WeightCompute
				if (FromMultipleDimension4)				 				
					return FromDimension4WeightCompute
				if (FromMultipleDimension5)				 				
					return FromDimension5WeightCompute
				if (FromMultipleDimension6)				 				
					return FromDimension6WeightCompute
				if (FromMultipleDimension7)				 				
					return FromDimension7WeightCompute
				if (FromMultipleDimension8)				 				
					return FromDimension8WeightCompute
				if (FromMultipleDimension9)				 				
					return FromDimension9WeightCompute
				if (FromMultipleDimension10)				 				
					return FromDimension10WeightCompute
			return blank
    	DerivedToWeightCompute is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (ToSplit)
    			if (ToMultipleAccountingEntity)
					return ToAccountingEntityWeightCompute
				if (ToMultipleAccountingUnit)				
					return ToAccountingUnitWeightCompute																							
				if (ToMultipleAccount)									
					return ToAccountWeightCompute
				if (ToMultipleProject)
					return ToProjectWeightCompute																									
				if (ToMultipleDimension1)
					return ToDimension1WeightCompute
				if (ToMultipleDimension2)						
					return ToDimension2WeightCompute
				if (ToMultipleDimension3)				 				
					return ToDimension3WeightCompute
				if (ToMultipleDimension4)				 				
					return ToDimension4WeightCompute
				if (ToMultipleDimension5)				 				
					return ToDimension5WeightCompute
				if (ToMultipleDimension6)				 				
					return ToDimension6WeightCompute
				if (ToMultipleDimension7)				 				
					return ToDimension7WeightCompute
				if (ToMultipleDimension8)				 				
					return ToDimension8WeightCompute
				if (ToMultipleDimension9)				 				
					return ToDimension9WeightCompute
				if (ToMultipleDimension10)				 				
					return ToDimension10WeightCompute			
			return blank
		IsDetailValueEntered is a DerivedField
			type is Boolean
			restricted
			if (ZeroTransAmountAllocationEnabled and AllocateAllCurrencyAmounts) 
				if (IsCurrentSplit)
					if (SplitCurrentValue not entered and SplitCurrentCurrencyAmount not entered)
						return false
				else
				if (UseConsolidated)
					if (ConsolidatedValue not entered and ConsolidatedCurrencyAmount not entered)
						return false
				else
					if (UseValue not entered and UseValueCurrencyAmount not entered)
						return false
			else 
				if (IsCurrentSplit)
					if (SplitCurrentValue not entered)
						return false
				else
				if (UseConsolidated)
					if (ConsolidatedValue not entered)
						return false
				else
					if (UseValue not entered)
						return false
			return true
		FirstAllocationLineSource is a DerivedField
			type is like AllocationLineSource 
			restricted
			if (AllocationLineSourceDetailsForReportRel exists)
				return first AllocationLineSourceDetailsForReportRel.AllocationLineSource
		FirstAllocationLineSourceValue is a DerivedField
			type is like AllocationLineSourceValue
			restricted
			return first AllocationLineSourceValueForReportRel.AllocationLineSourceValue
		CubeAllocationPeriod is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (AllocateYearToDate)
				return AllocationPeriod + "_YTD"
			else
			if (AllocateLifeToDate)
				return AllocationPeriod + "_LTD"
			else
				return AllocationPeriod
		AllocationPeriodBBField is a StringField
			type is like GeneralLedgerCalendarPeriod
			restricted
			AllocationPeriod.Year
			"000"
		SourceAddressLabel is a MessageField
			"Source_\Address\:"
		DetailedAddressLabel is a MessageField
			"Detailed_\Source\:"
		FromMappingLabel is a MessageField
			"From_\Mapping\:"
		ToMappingLabel is a MessageField
			"To_\Mapping\:"
		OpenPeriodErrorMessage	is a MessageField
			restricted
			"EntityPeriodIsClosed"
		NoSourceBalancesMessage is a MessageField
			"NoBalanceToProcess"
		ComputeValue is a DerivedField
			type is like InternationalAmount
			if (Compute  entered)
				return Compute compute value
			return CurrentValue
		DefaultAccountingUnitStructure is a DerivedField
			type is like AccountingUnitStructure
			restricted
			if (OverrideAccountingUnitStructure entered)
				return OverrideAccountingUnitStructure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.AccountingUnitStructure
			if (Allocation.AccountingUnitStructure entered)
				return Allocation.AccountingUnitStructure
			if (AllocationControl.AccountingUnitStructure entered)
				return AllocationControl.AccountingUnitStructure
			return FinanceEnterpriseGroup.EnterpriseAUStructure
		DefaultProjectStructure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideProjectStructure entered)
				return OverrideProjectStructure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.ProjectStructure
			if (Allocation.ProjectStructure entered)
				return Allocation.ProjectStructure
			if (AllocationControl.ProjectStructure entered)
				return AllocationControl.ProjectStructure
			return FinanceEnterpriseGroup.EnterpriseProjectStructure
		DefaultAccountStructure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideAccountStructure entered)
				return OverrideAccountStructure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.ReportingChart
			if (Allocation.AccountStructure entered)
				return Allocation.AccountStructure
			if (AllocationControl.AccountStructure entered)
				return AllocationControl.AccountStructure
			return FinanceEnterpriseGroup.EnterpriseChart
		DefaultFinanceDimension1Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension1Structure entered)
				return OverrideDimension1Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension1Structure
			if (Allocation.FinanceDimension1Structure entered)
				return Allocation.FinanceDimension1Structure
			if (AllocationControl.FinanceDimension1Structure entered)
				return AllocationControl.FinanceDimension1Structure
			return FinanceEnterpriseGroup.EnterpriseDim1Structure
		DefaultFinanceDimension2Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension2Structure entered)
				return OverrideDimension2Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension2Structure
			if (Allocation.FinanceDimension2Structure entered)
				return Allocation.FinanceDimension2Structure
			if (AllocationControl.FinanceDimension2Structure entered)
				return AllocationControl.FinanceDimension2Structure
			return FinanceEnterpriseGroup.EnterpriseDim2Structure
		DefaultFinanceDimension3Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension3Structure entered)
				return OverrideDimension3Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension3Structure
			if (Allocation.FinanceDimension3Structure entered)
				return Allocation.FinanceDimension3Structure
			if (AllocationControl.FinanceDimension3Structure entered)
				return AllocationControl.FinanceDimension3Structure
			return FinanceEnterpriseGroup.EnterpriseDim3Structure
		DefaultFinanceDimension4Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension4Structure entered)
				return OverrideDimension4Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension4Structure
			if (Allocation.FinanceDimension4Structure entered)
				return Allocation.FinanceDimension4Structure
			if (AllocationControl.FinanceDimension4Structure entered)
				return AllocationControl.FinanceDimension4Structure
			return FinanceEnterpriseGroup.EnterpriseDim4Structure
		DefaultFinanceDimension5Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension5Structure entered)
				return OverrideDimension5Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension5Structure
			if (Allocation.FinanceDimension5Structure entered)
				return Allocation.FinanceDimension5Structure
			if (AllocationControl.FinanceDimension5Structure entered)
				return AllocationControl.FinanceDimension5Structure
			return FinanceEnterpriseGroup.EnterpriseDim5Structure
		DefaultFinanceDimension6Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension6Structure entered)
				return OverrideDimension6Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension6Structure
			if (Allocation.FinanceDimension6Structure entered)
				return Allocation.FinanceDimension6Structure
			if (AllocationControl.FinanceDimension6Structure entered)
				return AllocationControl.FinanceDimension6Structure
			return FinanceEnterpriseGroup.EnterpriseDim6Structure
		DefaultFinanceDimension7Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension7Structure entered)
				return OverrideDimension7Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension7Structure
			if (Allocation.FinanceDimension7Structure entered)
				return Allocation.FinanceDimension7Structure
			if (AllocationControl.FinanceDimension7Structure entered)
				return AllocationControl.FinanceDimension7Structure
			return FinanceEnterpriseGroup.EnterpriseDim7Structure
		DefaultFinanceDimension8Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension8Structure entered)
				return OverrideDimension8Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension8Structure
			if (Allocation.FinanceDimension8Structure entered)
				return Allocation.FinanceDimension8Structure
			if (AllocationControl.FinanceDimension8Structure entered)
				return AllocationControl.FinanceDimension8Structure
			return FinanceEnterpriseGroup.EnterpriseDim8Structure
		DefaultFinanceDimension9Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension9Structure entered)
				return OverrideDimension9Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension9Structure
			if (Allocation.FinanceDimension9Structure entered)
				return Allocation.FinanceDimension9Structure
			if (AllocationControl.FinanceDimension9Structure entered)
				return AllocationControl.FinanceDimension9Structure
			return FinanceEnterpriseGroup.EnterpriseDim9Structure
		DefaultFinanceDimension10Structure is a DerivedField
			type is AlphaUpper 15 
			restricted
			if (OverrideDimension10Structure entered)
				return OverrideDimension10Structure
			if (AllocationControl.Type.Budget)
				return AllocationControl.ParentScenarioRel.Basis.FinanceDimension10Structure
			if (Allocation.FinanceDimension10Structure entered)
				return Allocation.FinanceDimension10Structure
			if (AllocationControl.FinanceDimension10Structure entered)
				return AllocationControl.FinanceDimension10Structure
			return FinanceEnterpriseGroup.EnterpriseDim10Structure
			
		NoActiveLinesErrorMessage is a MessageField
			restricted
			"NoActiveLinesToProcess"
		
		NoAccountStructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.AccountLabel>ReportingChartRequired"
			
		NoAccountingUnitStructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.AccountingUnitLabel>StructureRequired"
			
		NoProjectStructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.ProjectLabel>StructureRequired"
			
		NoFinanceDimension1StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension1Label>StructureRequired"
			
		NoFinanceDimension2StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension2Label>StructureRequired"
			
		NoFinanceDimension3StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension3Label>StructureRequired"
			
		NoFinanceDimension4StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension4Label>StructureRequired"
			
		NoFinanceDimension5StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension5Label>StructureRequired"
			
		NoFinanceDimension6StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension6Label>StructureRequired"
			
		NoFinanceDimension7StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension7Label>StructureRequired"
			
		NoFinanceDimension8StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension8Label>StructureRequired"
			
		NoFinanceDimension9StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension9Label>StructureRequired"
			
		NoFinanceDimension10StructureErrorMessage is a MessageField
			restricted
			"<FinanceEnterpriseGroup.FinanceDimension10Label>StructureRequired"

		MatrixMap is a DerivedField
			type is LPLText
			restricted
			
			if (SourceSystemCode entered)
				MatrixMap += "related.GeneralLedgerTotal.System = SourceSystemCode\n"
			
			if (SourceAccountingEntityGroup entered)
				MatrixMap += "related.AccountingEntity = SourceAccountingEntityGroupRel.AccountingEntity \n"
				initialize LocalAccountingEntity

				if (LocalCheckSourceCombinations)
					LocalSourceCombinationCount = instance count of SourceAccountingEntityGroupRel
			else			
			if (SourceAddress.AccountingEntity entered)
				MatrixMap += "related.AccountingEntity = SourceAddress.AccountingEntity\n"
				LocalAccountingEntity = SourceAddress.AccountingEntity
				
				if (LocalCheckSourceCombinations)
					LocalSourceCombinationCount = 1
			else
				MatrixMap += "related.AccountingEntity = AccountingEntitiesRel.AccountingEntity\n"
				LocalAccountingEntity = AccountingEntitiesRel.AccountingEntity
				
				if (LocalCheckSourceCombinations)
					LocalSourceCombinationCount = instance count of AccountingEntitiesRel
				
			if (SourceAddress.AccountingUnit entered)
				if (SourceAddress.AccountingUnit.PostingAccountingUnit or not ProcessAccountingUnitPostingBalance)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = SourceAddress.AccountingUnit\n"
				else
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = AccountingUnitShadowRel.AccountingUnit\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of AccountingUnitShadowRel
			else
            if (SourceAccountingUnitGroup entered)
                MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = SourceAccountingUnitGroupRel.AccountingUnit\n" 
            else
				if (AllocationControl.AccountingUnitEnabled
				and !TreatBlankAccountingUnitAsEmpty)
					if (ProcessAccountingUnitPostingBalance)
						if (SourceAccountingEntityGroup entered)
							MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = MatrixMapAccountingUnitForGroupsRel.AccountingUnit"
						else
							MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = MatrixMapAccountingUnitsRel.AccountingUnit" 
						if (FinanceEnterpriseGroup.AccountingUnitRequired)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapAccountingUnitsRel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapAccountingUnitsRel + 1)
					else
						if (SourceAddress.AccountingEntity entered)
							MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = EntityAccountingUnitHierarchiesForMatrixMapRel.AccountingUnit\n"
							
							if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of EntityAccountingUnitHierarchiesForMatrixMapRel
						else
							MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			
			if (SourceAddress.GeneralLedgerChartAccount entered)
				if (SourceAddress.GeneralLedgerChartAccount.ChartType.Posting or not ProcessAccountPostingBalance)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = SourceAddress.GeneralLedgerChartAccount\n"
				else
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = AccountShadowRel.GeneralLedgerChartAccount\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of AccountShadowRel
			else
            if (SourceAccountGroup entered)
                MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = SourceAccountGroupRel.GeneralLedgerChartAccount\n"
            else
				if (AllocationControl.AccountEnabled)
					if (ProcessAccountPostingBalance)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = MatrixMapAccountRel.GeneralLedgerChartAccount\n"
						
						if (LocalCheckSourceCombinations)
							LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapAccountRel
					else
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = AccountStructure.ChartAccountNode\n"

			if (SourceAddress.Project entered)
				if (SourceAddress.Project.ProjectType.Posting or not ProcessProjectPostingBalance)
					MatrixMap += "related.GeneralLedgerTotal.Project = SourceAddress.Project\n"
				else
					MatrixMap += "related.GeneralLedgerTotal.Project = ProjectShadowRel.Project\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of ProjectShadowRel
			else
            if (SourceProjectGroup entered)
                MatrixMap += "related.GeneralLedgerTotal.Project = SourceProjectGroupRel.Project\n"
            else
				if (AllocationControl.ProjectEnabled
				and !TreatBlankProjectAsEmpty)
					if (ProcessProjectPostingBalance)
						MatrixMap += "related.GeneralLedgerTotal.Project = MatrixMapProjectsRel.Project"
						if (FinanceEnterpriseGroup.ProjectRequired)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapProjectsRel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapProjectsRel + 1)
					else
						MatrixMap += "related.GeneralLedgerTotal.Project = ProjectStructure.ProjectNode\n"

			if (SourceAddress.FinanceDimension1 entered)
				if (SourceAddress.FinanceDimension1.PostingDimension or not ProcessDimension1PostingBalance)
					MatrixMap += "related.FinanceDimension1 = SourceAddress.FinanceDimension1\n"
				else
					MatrixMap += "related.FinanceDimension1 = Dimension1ShadowRel.FinanceDimension1\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension1ShadowRel
			else
            if (SourceFinanceDimension1Group entered)
                MatrixMap += "related.FinanceDimension1 = SourceFinanceDimension1GroupRel.FinanceDimension1\n"
            else
				if (AllocationControl.Dimension1Enabled
				and !TreatBlankDimension1AsEmpty)
					if (ProcessDimension1PostingBalance)
						MatrixMap += "related.FinanceDimension1 = MatrixMapDimension1Rel.FinanceDimension1"
						if (FinanceEnterpriseGroup.FinanceDimension1Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension1Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension1Rel + 1)
					else
						MatrixMap += "related.FinanceDimension1 = FinanceDimension1Structure.DimensionNode\n"
			
			if (SourceAddress.FinanceDimension2 entered)
				if (SourceAddress.FinanceDimension2.PostingDimension or not ProcessDimension2PostingBalance)
					MatrixMap += "related.FinanceDimension2 = SourceAddress.FinanceDimension2\n"
				else
					MatrixMap += "related.FinanceDimension2 = Dimension2ShadowRel.FinanceDimension2\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension2ShadowRel
			else
            if (SourceFinanceDimension2Group entered)
                MatrixMap += "related.FinanceDimension2 = SourceFinanceDimension2GroupRel.FinanceDimension2\n"
            else
				if (AllocationControl.Dimension2Enabled
				and !TreatBlankDimension2AsEmpty)
					if (ProcessDimension2PostingBalance)
						MatrixMap += "related.FinanceDimension2 = MatrixMapDimension2Rel.FinanceDimension2"
						if (FinanceEnterpriseGroup.FinanceDimension2Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension2Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension2Rel + 1)
					else
						MatrixMap += "related.FinanceDimension2 = FinanceDimension2Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension3 entered)
				if (SourceAddress.FinanceDimension3.PostingDimension or not ProcessDimension3PostingBalance)
					MatrixMap += "related.FinanceDimension3 = SourceAddress.FinanceDimension3\n"
				else
					MatrixMap += "related.FinanceDimension3 = Dimension3ShadowRel.FinanceDimension3\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension3ShadowRel
			else
            if (SourceFinanceDimension3Group entered)
                MatrixMap += "related.FinanceDimension3 = SourceFinanceDimension3GroupRel.FinanceDimension3\n"
            else
				if (AllocationControl.Dimension3Enabled
				and !TreatBlankDimension3AsEmpty)
					if (ProcessDimension3PostingBalance)
						MatrixMap += "related.FinanceDimension3 = MatrixMapDimension3Rel.FinanceDimension3"
						if (FinanceEnterpriseGroup.FinanceDimension3Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension3Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension3Rel + 1)
					else
						MatrixMap += "related.FinanceDimension3 = FinanceDimension3Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension4 entered)
				if (SourceAddress.FinanceDimension4.PostingDimension or not ProcessDimension4PostingBalance)
					MatrixMap += "related.FinanceDimension4 = SourceAddress.FinanceDimension4\n"
				else
					MatrixMap += "related.FinanceDimension4 = Dimension4ShadowRel.FinanceDimension4\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension4ShadowRel
			else
            if (SourceFinanceDimension4Group entered)
                MatrixMap += "related.FinanceDimension4 = SourceFinanceDimension4GroupRel.FinanceDimension4\n"
            else
				if (AllocationControl.Dimension4Enabled
				and !TreatBlankDimension4AsEmpty)
					if (ProcessDimension4PostingBalance)
						MatrixMap += "related.FinanceDimension4 = MatrixMapDimension4Rel.FinanceDimension4"
						if (FinanceEnterpriseGroup.FinanceDimension4Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension4Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension4Rel +1)
					else
						MatrixMap += "related.FinanceDimension4 = FinanceDimension4Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension5 entered)
				if (SourceAddress.FinanceDimension5.PostingDimension or not ProcessDimension5PostingBalance)
					MatrixMap += "related.FinanceDimension5 = SourceAddress.FinanceDimension5\n"
				else
					MatrixMap += "related.FinanceDimension5 = Dimension5ShadowRel.FinanceDimension5\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension5ShadowRel
			else
            if (SourceFinanceDimension5Group entered)
                MatrixMap += "related.FinanceDimension5 = SourceFinanceDimension5GroupRel.FinanceDimension5\n"
            else
				if (AllocationControl.Dimension5Enabled
				and !TreatBlankDimension5AsEmpty)
					if (ProcessDimension5PostingBalance)
						MatrixMap += "related.FinanceDimension5 = MatrixMapDimension5Rel.FinanceDimension5"
						if (FinanceEnterpriseGroup.FinanceDimension5Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension5Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension5Rel + 1)
					else
						MatrixMap += "related.FinanceDimension5 = FinanceDimension5Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension6 entered)
				if (SourceAddress.FinanceDimension6.PostingDimension or not ProcessDimension6PostingBalance)
					MatrixMap += "related.FinanceDimension6 = SourceAddress.FinanceDimension6\n"
				else
					MatrixMap += "related.FinanceDimension6 = Dimension6ShadowRel.FinanceDimension6\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension6ShadowRel
			else
            if (SourceFinanceDimension6Group entered)
                MatrixMap += "related.FinanceDimension6 = SourceFinanceDimension6GroupRel.FinanceDimension6\n"
            else
				if (AllocationControl.Dimension6Enabled
				and !TreatBlankDimension6AsEmpty)
					if (ProcessDimension6PostingBalance)
						MatrixMap += "related.FinanceDimension6 = MatrixMapDimension6Rel.FinanceDimension6"
						if (FinanceEnterpriseGroup.FinanceDimension6Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension6Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension6Rel +1)
					else
						MatrixMap += "related.FinanceDimension6 = FinanceDimension6Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension7 entered)
				if (SourceAddress.FinanceDimension7.PostingDimension or not ProcessDimension7PostingBalance)
					MatrixMap += "related.FinanceDimension7 = SourceAddress.FinanceDimension7\n"
				else
					MatrixMap += "related.FinanceDimension7 = Dimension7ShadowRel.FinanceDimension7\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension7ShadowRel
			else
            if (SourceFinanceDimension7Group entered)
                MatrixMap += "related.FinanceDimension7 = SourceFinanceDimension7GroupRel.FinanceDimension7\n"
            else
				if (AllocationControl.Dimension7Enabled
				and !TreatBlankDimension7AsEmpty)
					if (ProcessDimension7PostingBalance)
						MatrixMap += "related.FinanceDimension7 = MatrixMapDimension7Rel.FinanceDimension7"
						if (FinanceEnterpriseGroup.FinanceDimension7Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension7Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension7Rel + 1)
					else
						MatrixMap += "related.FinanceDimension7 = FinanceDimension7Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension8 entered)
				if (SourceAddress.FinanceDimension8.PostingDimension or not ProcessDimension8PostingBalance)
					MatrixMap += "related.FinanceDimension8 = SourceAddress.FinanceDimension8\n"
				else
					MatrixMap += "related.FinanceDimension8 = Dimension8ShadowRel.FinanceDimension8\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension8ShadowRel
			else
            if (SourceFinanceDimension8Group entered)
                MatrixMap += "related.FinanceDimension8 = SourceFinanceDimension8GroupRel.FinanceDimension8\n"
            else
				if (AllocationControl.Dimension8Enabled
				and !TreatBlankDimension8AsEmpty)
					if (ProcessDimension8PostingBalance)
						MatrixMap += "related.FinanceDimension8 = MatrixMapDimension8Rel.FinanceDimension8"
						if (FinanceEnterpriseGroup.FinanceDimension8Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension8Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension8Rel + 1)
					else
						MatrixMap += "related.FinanceDimension8 = FinanceDimension8Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension9 entered)
				if (SourceAddress.FinanceDimension9.PostingDimension or not ProcessDimension9PostingBalance)
					MatrixMap += "related.FinanceDimension9 = SourceAddress.FinanceDimension9\n"
				else
					MatrixMap += "related.FinanceDimension9 = Dimension9ShadowRel.FinanceDimension9\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension9ShadowRel
			else
            if (SourceFinanceDimension9Group entered)
                MatrixMap += "related.FinanceDimension9 = SourceFinanceDimension9GroupRel.FinanceDimension9\n"
            else
				if (AllocationControl.Dimension9Enabled
				and !TreatBlankDimension9AsEmpty)
					if (ProcessDimension9PostingBalance)
						MatrixMap += "related.FinanceDimension9 = MatrixMapDimension9Rel.FinanceDimension9"
						if (FinanceEnterpriseGroup.FinanceDimension9Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension9Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension9Rel + 1)
					else
						MatrixMap += "related.FinanceDimension9 = FinanceDimension9Structure.DimensionNode\n"
			
			if (SourceAddress.FinanceDimension10 entered)
				if (SourceAddress.FinanceDimension10.PostingDimension or not ProcessDimension10PostingBalance)
					MatrixMap += "related.FinanceDimension10 = SourceAddress.FinanceDimension10\n"
				else
					MatrixMap += "related.FinanceDimension10 = Dimension10ShadowRel.FinanceDimension10\n"
					
					if (LocalCheckSourceCombinations)
						LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of Dimension10ShadowRel
			else
            if (SourceFinanceDimension10Group entered)
                MatrixMap += "related.FinanceDimension10 = SourceFinanceDimension10GroupRel.FinanceDimension10\n"
            else
				if (AllocationControl.Dimension10Enabled
				and !TreatBlankDimension10AsEmpty)
					if (ProcessDimension10PostingBalance)
						MatrixMap += "related.FinanceDimension10 = MatrixMapDimension10Rel.FinanceDimension10"
						if (FinanceEnterpriseGroup.FinanceDimension10Required)
                			MatrixMap += "\n"
                			
                			if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * instance count of MatrixMapDimension10Rel
						else
			            	MatrixMap += " and blank dimension\n"
			            	
			            	if (LocalCheckSourceCombinations)
								LocalSourceCombinationCount = LocalSourceCombinationCount * (instance count of MatrixMapDimension10Rel + 1)
					else
						MatrixMap += "related.FinanceDimension10 = FinanceDimension10Structure.DimensionNode\n"
			
			if (ComputePeriodically)
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = CurrentPeriod\n"
			else
			if (AllocateYearToDate)
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = CubeAllocationPeriodYTDRel.GeneralLedgerCalendarPeriod\n"
			else
			if (AllocateLifeToDate)
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = CubeAllocationPeriodLTDRel.GeneralLedgerCalendarPeriod\n"
			else
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = CubeSetAllocationPeriodRel.GeneralLedgerCalendarPeriod\n"
			
			if (not AllocateUnits)
				if (not (ZeroTransAmountAllocationEnabled and AllocateAllCurrencyAmounts)
				and not GeneratingSourceListingData
				and not ComputeAndBypassSourceBalance) 
					MatrixMap += "related.GeneralLedgerTotal.Currency where (NetTransactionAmount not empty)\n"
				else																
				if (AllocationCurrency.Transaction or AllocateAllCurrencyAmounts)   
					MatrixMap += "related.GeneralLedgerTotal.Currency = AllCurrencyRel.Currency\n" 
			

			return MatrixMap

		DynamicSelectionForDimension is a DerivedField
			type is LPLText
			restricted
			
			if (LocalDimensionEntered entered)
				if (LocalIsPosting)
					DynamicSelectionForDimension += " and " + LocalRelationName + "." + LocalDimentionName + " = " + LocalSourceAddress + " "
				else
					DynamicSelectionForDimension += " and " + LocalRelationName + "." + LocalDimentionName + " = any " + LocalSourceAddressRelation + " "
					
			else
				if (LocalDimensionSelected)
					if (LocalTreatBlankAsEmpty)
						DynamicSelectionForDimension += " and " + LocalRelationName + "." + LocalDimentionName + " = blank "
					else
						DynamicSelectionForDimension += " and (" + LocalRelationName + "." + LocalDimentionName + " = any " + LocalNodeRelation + " "
						if (not LocalDimensionRequired)
							DynamicSelectionForDimension += " or " + LocalRelationName + "." + LocalDimentionName + " = blank "
						DynamicSelectionForDimension += ") " 
			
		GeneralLedgerTotalDynamicSelection is a DerivedField
			type is LPLText
			restricted
			is condition for LocalBusinessClassName

			GeneralLedgerTotalDynamicSelection = "(1 = 1 "
			
			if (SourceSystemCode entered)
				GeneralLedgerTotalDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.System = SourceSystemCode "
			
			LocalDimensionEntered			= SourceAddress.IsAccountingUnitEntered	
			LocalIsPosting					= SourceAddress.AccountingUnit.PostingAccountingUnit
			LocalDimensionSelected			= AllocationControl.AccountingUnitEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.AccountingUnitRequired
			LocalTreatBlankAsEmpty			= TreatBlankAccountingUnitAsEmpty
			LocalDimentionName				= "GeneralLedgerTotal.AccountingUnit"
			LocalSourceAddress				= "SourceAddress.AccountingUnit"	
			if (SourceAccountingEntityGroup entered)
				LocalNodeRelation			= "MatrixMapAccountingUnitForGroupsRel.AccountingUnit"
            else
				LocalNodeRelation			= "MatrixMapAccountingUnitsRel.AccountingUnit"

            if (SourceAccountingUnitGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceAccountingUnitGroupRel.AccountingUnit"
            else
			    LocalSourceAddressRelation	= "AccountingUnitShadowRel.AccountingUnit"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension
				
			LocalDimensionEntered			= SourceAddress.IsGeneralLedgerChartAccountEntered
			LocalIsPosting					= SourceAddress.GeneralLedgerChartAccount.IsPosting
			LocalDimensionSelected			= true
			LocalDimensionRequired			= true
			LocalTreatBlankAsEmpty			= false
			LocalDimentionName				= "GeneralLedgerTotal.GeneralLedgerChartAccount"
			LocalSourceAddress				= "SourceAddress.GeneralLedgerChartAccount"	
            LocalNodeRelation   		    = "MatrixMapAccountRel.GeneralLedgerChartAccount"
            if (SourceAccountGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceAccountGroupRel.GeneralLedgerChartAccount"
            else
			    LocalSourceAddressRelation	= "AccountShadowRel.GeneralLedgerChartAccount"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsProjectEntered
			LocalIsPosting					= SourceAddress.Project.IsPostingProject
			LocalDimensionSelected			= AllocationControl.ProjectEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.ProjectRequired
			LocalTreatBlankAsEmpty			= TreatBlankProjectAsEmpty
			LocalDimentionName				= "GeneralLedgerTotal.Project"
			LocalSourceAddress				= "SourceAddress.Project"	
            LocalNodeRelation			    = "MatrixMapProjectsRel.Project"
			if (SourceProjectGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceProjectGroupRel.Project"
            else
			    LocalSourceAddressRelation	= "ProjectShadowRel.Project"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension1Entered
			LocalIsPosting					= SourceAddress.FinanceDimension1.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension1Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension1Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension1AsEmpty
			LocalDimentionName				= "FinanceDimension1"
			LocalSourceAddress				= "SourceAddress.FinanceDimension1"	
            LocalNodeRelation			    = "MatrixMapDimension1Rel.FinanceDimension1"
			if (SourceFinanceDimension1Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension1GroupRel.FinanceDimension1"
            else
			    LocalSourceAddressRelation	= "Dimension1ShadowRel.FinanceDimension1"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension


			LocalDimensionEntered			= SourceAddress.IsFinanceDimension2Entered
			LocalIsPosting					= SourceAddress.FinanceDimension2.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension2Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension2Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension2AsEmpty
			LocalDimentionName				= "FinanceDimension2"
			LocalSourceAddress				= "SourceAddress.FinanceDimension2"	
            LocalNodeRelation			    = "MatrixMapDimension2Rel.FinanceDimension2"
			if (SourceFinanceDimension2Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension2GroupRel.FinanceDimension2"
            else
			    LocalSourceAddressRelation	= "Dimension2ShadowRel.FinanceDimension2"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension3Entered
			LocalIsPosting					= SourceAddress.FinanceDimension3.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension3Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension3Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension3AsEmpty
			LocalDimentionName				= "FinanceDimension3"
			LocalSourceAddress				= "SourceAddress.FinanceDimension3"	
            LocalNodeRelation   			= "MatrixMapDimension3Rel.FinanceDimension3"
            if (SourceFinanceDimension3Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension3GroupRel.FinanceDimension3"
            else
			    LocalSourceAddressRelation	= "Dimension3ShadowRel.FinanceDimension3"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension4Entered
			LocalIsPosting					= SourceAddress.FinanceDimension4.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension4Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension4Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension4AsEmpty
			LocalDimentionName				= "FinanceDimension4"
			LocalSourceAddress				= "SourceAddress.FinanceDimension4"	
            LocalNodeRelation			    = "MatrixMapDimension4Rel.FinanceDimension4"
			if (SourceFinanceDimension4Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension4GroupRel.FinanceDimension4"
            else
			    LocalSourceAddressRelation	= "Dimension4ShadowRel.FinanceDimension4"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension5Entered
			LocalIsPosting					= SourceAddress.FinanceDimension5.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension5Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension5Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension5AsEmpty
			LocalDimentionName				= "FinanceDimension5"
			LocalSourceAddress				= "SourceAddress.FinanceDimension5"	
            LocalNodeRelation			    = "MatrixMapDimension5Rel.FinanceDimension5"
			if (SourceFinanceDimension5Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension5GroupRel.FinanceDimension5"
            else
			    LocalSourceAddressRelation	= "Dimension5ShadowRel.FinanceDimension5"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension6Entered
			LocalIsPosting					= SourceAddress.FinanceDimension6.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension6Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension6Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension6AsEmpty
			LocalDimentionName				= "FinanceDimension6"
			LocalSourceAddress				= "SourceAddress.FinanceDimension6"	
            LocalNodeRelation			    = "MatrixMapDimension6Rel.FinanceDimension6"
			if (SourceFinanceDimension6Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension6GroupRel.FinanceDimension6"
            else
			    LocalSourceAddressRelation	= "Dimension6ShadowRel.FinanceDimension6"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension7Entered
			LocalIsPosting					= SourceAddress.FinanceDimension7.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension7Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension7Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension7AsEmpty
			LocalDimentionName				= "FinanceDimension7"
			LocalSourceAddress				= "SourceAddress.FinanceDimension7"	
            LocalNodeRelation			    = "MatrixMapDimension7Rel.FinanceDimension7"
			if (SourceFinanceDimension7Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension7GroupRel.FinanceDimension7"
            else
			    LocalSourceAddressRelation	= "Dimension7ShadowRel.FinanceDimension7"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension8Entered
			LocalIsPosting					= SourceAddress.FinanceDimension8.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension8Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension8Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension8AsEmpty
			LocalDimentionName				= "FinanceDimension8"
			LocalSourceAddress				= "SourceAddress.FinanceDimension8"	
            LocalNodeRelation			    = "MatrixMapDimension8Rel.FinanceDimension8"
			if (SourceFinanceDimension8Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension8GroupRel.FinanceDimension8"
            else
			    LocalSourceAddressRelation	= "Dimension8ShadowRel.FinanceDimension8"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension9Entered
			LocalIsPosting					= SourceAddress.FinanceDimension9.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension9Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension9Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension9AsEmpty
			LocalDimentionName				= "FinanceDimension9"
			LocalSourceAddress				= "SourceAddress.FinanceDimension9"	
            LocalNodeRelation			    = "MatrixMapDimension9Rel.FinanceDimension9"
			if (SourceFinanceDimension9Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension9GroupRel.FinanceDimension9"
            else
			    LocalSourceAddressRelation	= "Dimension9ShadowRel.FinanceDimension9"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension10Entered
			LocalIsPosting					= SourceAddress.FinanceDimension10.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension10Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension10Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension10AsEmpty
			LocalDimentionName				= "FinanceDimension10"
			LocalSourceAddress				= "SourceAddress.FinanceDimension10"	
            LocalNodeRelation			    = "MatrixMapDimension10Rel.FinanceDimension10"
            if (SourceFinanceDimension10Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension10GroupRel.FinanceDimension10"
            else
			    LocalSourceAddressRelation	= "Dimension10ShadowRel.FinanceDimension10"
			
			GeneralLedgerTotalDynamicSelection += DynamicSelectionForDimension

			if (ComputePeriodically)
				GeneralLedgerTotalDynamicSelection += "and " + LocalRelationName + ".GeneralLedgerTotal.EntityYearPeriod = CurrentPeriod "
			else
			if (AllocateYearToDate)
				GeneralLedgerTotalDynamicSelection += "and " + LocalRelationName + ".GeneralLedgerTotal.EntityYearPeriod = any YTDPeriodShadowEndDatesRel.GeneralLedgerCalendarPeriod "
			else
			if (AllocateLifeToDate)
				GeneralLedgerTotalDynamicSelection += "and " + LocalRelationName + ".GeneralLedgerTotal.EntityYearPeriod = any LTDPeriodShadowEndDatesRel.GeneralLedgerCalendarPeriod "
			else
				GeneralLedgerTotalDynamicSelection += "and " + LocalRelationName + ".GeneralLedgerTotal.EntityYearPeriod = any PeriodShadowEndDatesRel.GeneralLedgerCalendarPeriod "




			GeneralLedgerTotalDynamicSelection += ")"
			return GeneralLedgerTotalDynamicSelection


		DynamicSelectionForDimensionBuilder is a DerivedField
			type is LPLText
			restricted
			
			if (LocalDimensionEntered entered and not LocalIsPosting)
				DynamicSelectionForDimensionBuilder += " and " + LocalRelationName + "." + LocalDimentionName + " = any " + LocalSourceAddressRelation + " "
					
			else
				if (LocalDimensionSelected)
					if (not LocalTreatBlankAsEmpty)
						DynamicSelectionForDimensionBuilder += " and (" + LocalRelationName + "." + LocalDimentionName + " = any " + LocalNodeRelation + " "
						if (not LocalDimensionRequired)
							DynamicSelectionForDimensionBuilder += " or " + LocalRelationName + "." + LocalDimentionName + " = blank "
						DynamicSelectionForDimensionBuilder += ") " 

		GLTotalNoAccountDynamicSelection is a DerivedField
			type is LPLText
			restricted
			is condition for LocalBusinessClassName

			GLTotalNoAccountDynamicSelection = "(1 = 1 "
			
			if (SourceSystemCode entered)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.System = SourceSystemCode "

			if (TreatBlankAccountingUnitAsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.AccountingUnit = blank "
			else
			if (SourceAddress.AccountingUnit.PostingAccountingUnit)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.AccountingUnit = SourceAddress.AccountingUnit "
				
			if (TreatBlankProjectAsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.Project = blank "
			else
			if (SourceAddress.Project.IsPostingProject)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".GeneralLedgerTotal.Project = SourceAddress.Project "

			if (TreatBlankDimension1AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension1 = blank "
			else
			if (SourceAddress.FinanceDimension1.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension1 = SourceAddress.FinanceDimension1 "

			if (TreatBlankDimension2AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension2 = blank "
			else
			if (SourceAddress.FinanceDimension2.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension2 = SourceAddress.FinanceDimension2 "

			if (TreatBlankDimension3AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension3 = blank "
			else
			if (SourceAddress.FinanceDimension3.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension3 = SourceAddress.FinanceDimension3 "

			if (TreatBlankDimension4AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension4 = blank "
			else
			if (SourceAddress.FinanceDimension4.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension4 = SourceAddress.FinanceDimension4 "

			if (TreatBlankDimension5AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension5 = blank "
			else
			if (SourceAddress.FinanceDimension5.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension5 = SourceAddress.FinanceDimension5 "

			if (TreatBlankDimension6AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension6 = blank "
			else
			if (SourceAddress.FinanceDimension6.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension6 = SourceAddress.FinanceDimension6 "

			if (TreatBlankDimension7AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension7 = blank "
			else
			if (SourceAddress.FinanceDimension7.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension7 = SourceAddress.FinanceDimension7 "

			if (TreatBlankDimension8AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension8 = blank "
			else
			if (SourceAddress.FinanceDimension8.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension8 = SourceAddress.FinanceDimension8 "

			if (TreatBlankDimension9AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension9 = blank "
			else
			if (SourceAddress.FinanceDimension9.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension9 = SourceAddress.FinanceDimension9 "

			if (TreatBlankDimension10AsEmpty)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension10 = blank "
			else
			if (SourceAddress.FinanceDimension10.PostingDimension)
				GLTotalNoAccountDynamicSelection += " and " + LocalRelationName + ".FinanceDimension10 = SourceAddress.FinanceDimension10 "
			
			LocalDimensionEntered			= SourceAddress.IsAccountingUnitEntered	
			LocalIsPosting					= SourceAddress.AccountingUnit.PostingAccountingUnit
			LocalDimensionSelected			= AllocationControl.AccountingUnitEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.AccountingUnitRequired
			LocalTreatBlankAsEmpty			= TreatBlankAccountingUnitAsEmpty
			LocalDimentionName				= "GeneralLedgerTotal.AccountingUnit"
			LocalSourceAddress				= "SourceAddress.AccountingUnit"	
			if (SourceAccountingEntityGroup entered)
				LocalNodeRelation			= "MatrixMapAccountingUnitForGroupsRel.AccountingUnit"
            else
				LocalNodeRelation			= "MatrixMapAccountingUnitsRel.AccountingUnit"

            if (SourceAccountingUnitGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceAccountingUnitGroupRel.AccountingUnit"
            else
			    LocalSourceAddressRelation	= "AccountingUnitShadowRel.AccountingUnit"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsProjectEntered
			LocalIsPosting					= SourceAddress.Project.IsPostingProject
			LocalDimensionSelected			= AllocationControl.ProjectEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.ProjectRequired
			LocalTreatBlankAsEmpty			= TreatBlankProjectAsEmpty
			LocalDimentionName				= "GeneralLedgerTotal.Project"
			LocalSourceAddress				= "SourceAddress.Project"	
            LocalNodeRelation			    = "MatrixMapProjectsRel.Project"
			if (SourceProjectGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceProjectGroupRel.Project"
            else
			    LocalSourceAddressRelation	= "ProjectShadowRel.Project"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension1Entered
			LocalIsPosting					= SourceAddress.FinanceDimension1.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension1Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension1Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension1AsEmpty
			LocalDimentionName				= "FinanceDimension1"
			LocalSourceAddress				= "SourceAddress.FinanceDimension1"	
            LocalNodeRelation			    = "MatrixMapDimension1Rel.FinanceDimension1"
			if (SourceFinanceDimension1Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension1GroupRel.FinanceDimension1"
            else
			    LocalSourceAddressRelation	= "Dimension1ShadowRel.FinanceDimension1"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder


			LocalDimensionEntered			= SourceAddress.IsFinanceDimension2Entered
			LocalIsPosting					= SourceAddress.FinanceDimension2.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension2Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension2Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension2AsEmpty
			LocalDimentionName				= "FinanceDimension2"
			LocalSourceAddress				= "SourceAddress.FinanceDimension2"	
            LocalNodeRelation			    = "MatrixMapDimension2Rel.FinanceDimension2"
			if (SourceFinanceDimension2Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension2GroupRel.FinanceDimension2"
            else
			    LocalSourceAddressRelation	= "Dimension2ShadowRel.FinanceDimension2"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension3Entered
			LocalIsPosting					= SourceAddress.FinanceDimension3.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension3Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension3Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension3AsEmpty
			LocalDimentionName				= "FinanceDimension3"
			LocalSourceAddress				= "SourceAddress.FinanceDimension3"	
            LocalNodeRelation   			= "MatrixMapDimension3Rel.FinanceDimension3"
            if (SourceFinanceDimension3Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension3GroupRel.FinanceDimension3"
            else
			    LocalSourceAddressRelation	= "Dimension3ShadowRel.FinanceDimension3"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension4Entered
			LocalIsPosting					= SourceAddress.FinanceDimension4.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension4Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension4Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension4AsEmpty
			LocalDimentionName				= "FinanceDimension4"
			LocalSourceAddress				= "SourceAddress.FinanceDimension4"	
            LocalNodeRelation			    = "MatrixMapDimension4Rel.FinanceDimension4"
			if (SourceFinanceDimension4Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension4GroupRel.FinanceDimension4"
            else
			    LocalSourceAddressRelation	= "Dimension4ShadowRel.FinanceDimension4"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension5Entered
			LocalIsPosting					= SourceAddress.FinanceDimension5.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension5Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension5Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension5AsEmpty
			LocalDimentionName				= "FinanceDimension5"
			LocalSourceAddress				= "SourceAddress.FinanceDimension5"	
            LocalNodeRelation			    = "MatrixMapDimension5Rel.FinanceDimension5"
			if (SourceFinanceDimension5Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension5GroupRel.FinanceDimension5"
            else
			    LocalSourceAddressRelation	= "Dimension5ShadowRel.FinanceDimension5"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension6Entered
			LocalIsPosting					= SourceAddress.FinanceDimension6.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension6Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension6Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension6AsEmpty
			LocalDimentionName				= "FinanceDimension6"
			LocalSourceAddress				= "SourceAddress.FinanceDimension6"	
            LocalNodeRelation			    = "MatrixMapDimension6Rel.FinanceDimension6"
			if (SourceFinanceDimension6Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension6GroupRel.FinanceDimension6"
            else
			    LocalSourceAddressRelation	= "Dimension6ShadowRel.FinanceDimension6"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension7Entered
			LocalIsPosting					= SourceAddress.FinanceDimension7.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension7Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension7Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension7AsEmpty
			LocalDimentionName				= "FinanceDimension7"
			LocalSourceAddress				= "SourceAddress.FinanceDimension7"	
            LocalNodeRelation			    = "MatrixMapDimension7Rel.FinanceDimension7"
			if (SourceFinanceDimension7Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension7GroupRel.FinanceDimension7"
            else
			    LocalSourceAddressRelation	= "Dimension7ShadowRel.FinanceDimension7"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension8Entered
			LocalIsPosting					= SourceAddress.FinanceDimension8.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension8Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension8Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension8AsEmpty
			LocalDimentionName				= "FinanceDimension8"
			LocalSourceAddress				= "SourceAddress.FinanceDimension8"	
            LocalNodeRelation			    = "MatrixMapDimension8Rel.FinanceDimension8"
			if (SourceFinanceDimension8Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension8GroupRel.FinanceDimension8"
            else
			    LocalSourceAddressRelation	= "Dimension8ShadowRel.FinanceDimension8"
			
			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension9Entered
			LocalIsPosting					= SourceAddress.FinanceDimension9.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension9Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension9Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension9AsEmpty
			LocalDimentionName				= "FinanceDimension9"
			LocalSourceAddress				= "SourceAddress.FinanceDimension9"	
            LocalNodeRelation			    = "MatrixMapDimension9Rel.FinanceDimension9"
			if (SourceFinanceDimension9Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension9GroupRel.FinanceDimension9"
            else
			    LocalSourceAddressRelation	= "Dimension9ShadowRel.FinanceDimension9"

			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension10Entered
			LocalIsPosting					= SourceAddress.FinanceDimension10.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension10Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension10Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension10AsEmpty
			LocalDimentionName				= "FinanceDimension10"
			LocalSourceAddress				= "SourceAddress.FinanceDimension10"	
            LocalNodeRelation			    = "MatrixMapDimension10Rel.FinanceDimension10"
            if (SourceFinanceDimension10Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension10GroupRel.FinanceDimension10"
            else
			    LocalSourceAddressRelation	= "Dimension10ShadowRel.FinanceDimension10"

			GLTotalNoAccountDynamicSelection += DynamicSelectionForDimensionBuilder

			GLTotalNoAccountDynamicSelection += ") "
			return GLTotalNoAccountDynamicSelection			
		
		DerivedSourceAddressAccount	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (SourceAddress.GeneralLedgerChartAccount entered)
				return SourceAddress.GeneralLedgerChartAccount
			else 
				return AccountStructure.ChartAccountNode

		AllocationCubeMap is a DerivedField
			type is LPLText
			restricted
			
			if (SourceSystemCode entered)
				AllocationCubeMap += "related.System = SourceSystemCode\n"
			
			if (SourceAddress.AccountingEntity entered)
				AllocationCubeMap += "related.FinanceCodeBlock.ToAccountingEntity = SourceAddress.AccountingEntity\n"
				LocalAccountingEntity = SourceAddress.AccountingEntity
			else
				AllocationCubeMap += "related.FinanceCodeBlock.ToAccountingEntity = AccountingEntitiesRel.AccountingEntity\n"
				LocalAccountingEntity = AccountingEntitiesRel.AccountingEntity
				
			if (SourceAddress.AccountingUnit entered)
				if (SourceAddress.AccountingUnit.PostingAccountingUnit or not ProcessAccountingUnitPostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = SourceAddress.AccountingUnit\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = AccountingUnitShadowRel.AccountingUnit\n"
			else
            if (SourceAccountingUnitGroup entered)
                AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = SourceAccountingUnitGroupRel.AccountingUnit\n" 
            else
				if (AllocationControl.AccountingUnitEnabled
				and !TreatBlankAccountingUnitAsEmpty)
					if (ProcessAccountingUnitPostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = MatrixMapAccountingUnitsRel.AccountingUnit" 
						if (FinanceEnterpriseGroup.AccountingUnitRequired)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						if (SourceAddress.AccountingEntity entered)
							AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = EntityAccountingUnitHierarchiesForMatrixMapRel.AccountingUnit\n"
						else
							AllocationCubeMap += "related.FinanceCodeBlock.AccountingUnit = AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			
			if (SourceAddress.GeneralLedgerChartAccount entered)
				if (SourceAddress.GeneralLedgerChartAccount.ChartType.Posting or not ProcessAccountPostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.GeneralLedgerChartAccount = SourceAddress.GeneralLedgerChartAccount\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.GeneralLedgerChartAccount = AccountShadowRel.GeneralLedgerChartAccount\n"
			else
            if (SourceAccountGroup entered)
                AllocationCubeMap += "related.FinanceCodeBlock.GeneralLedgerChartAccount = SourceAccountGroupRel.GeneralLedgerChartAccount\n"
            else
				if (AllocationControl.AccountEnabled)
					if (ProcessAccountPostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.GeneralLedgerChartAccount = MatrixMapAccountRel.GeneralLedgerChartAccount\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.GeneralLedgerChartAccount = AccountStructure.ChartAccountNode\n"

			if (SourceAddress.Project entered)
				if (SourceAddress.Project.ProjectType.Posting or not ProcessProjectPostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.Project = SourceAddress.Project\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.Project = ProjectShadowRel.Project\n"
			else
            if (SourceProjectGroup entered)
                AllocationCubeMap += "related.FinanceCodeBlock.Project = SourceProjectGroupRel.Project\n"
            else
				if (AllocationControl.ProjectEnabled
				and !TreatBlankProjectAsEmpty)
					if (ProcessProjectPostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.Project = MatrixMapProjectsRel.Project"
						if (FinanceEnterpriseGroup.ProjectRequired)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.Project = ProjectStructure.ProjectNode\n"

			if (SourceAddress.FinanceDimension1 entered)
				if (SourceAddress.FinanceDimension1.PostingDimension or not ProcessDimension1PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension1 = SourceAddress.FinanceDimension1\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension1 = Dimension1ShadowRel.FinanceDimension1\n"
			else
            if (SourceFinanceDimension1Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension1 = SourceFinanceDimension1GroupRel.FinanceDimension1\n"
            else
				if (AllocationControl.Dimension1Enabled
				and !TreatBlankDimension1AsEmpty)
					if (ProcessDimension1PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension1 = MatrixMapDimension1Rel.FinanceDimension1"
						if (FinanceEnterpriseGroup.FinanceDimension1Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension1 = FinanceDimension1Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension2 entered)
				if (SourceAddress.FinanceDimension2.PostingDimension or not ProcessDimension2PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension2 = SourceAddress.FinanceDimension2\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension2 = Dimension2ShadowRel.FinanceDimension2\n"
			else
            if (SourceFinanceDimension2Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension2 = SourceFinanceDimension2GroupRel.FinanceDimension2\n"
            else
				if (AllocationControl.Dimension2Enabled
				and !TreatBlankDimension2AsEmpty)
					if (ProcessDimension2PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension2 = MatrixMapDimension2Rel.FinanceDimension2"
						if (FinanceEnterpriseGroup.FinanceDimension2Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension2 = FinanceDimension2Structure.DimensionNode\n"
			
			if (SourceAddress.FinanceDimension3 entered)
				if (SourceAddress.FinanceDimension3.PostingDimension or not ProcessDimension3PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension3 = SourceAddress.FinanceDimension3\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension3 = Dimension3ShadowRel.FinanceDimension3\n"
			else
            if (SourceFinanceDimension3Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension3 = SourceFinanceDimension3GroupRel.FinanceDimension3\n"
            else
				if (AllocationControl.Dimension3Enabled
				and !TreatBlankDimension3AsEmpty)
					if (ProcessDimension3PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension3 = MatrixMapDimension3Rel.FinanceDimension3"
						if (FinanceEnterpriseGroup.FinanceDimension3Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension3 = FinanceDimension3Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension4 entered)
				if (SourceAddress.FinanceDimension4.PostingDimension or not ProcessDimension4PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension4 = SourceAddress.FinanceDimension4\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension4 = Dimension4ShadowRel.FinanceDimension4\n"
			else
            if (SourceFinanceDimension4Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension4 = SourceFinanceDimension4GroupRel.FinanceDimension4\n"
            else
				if (AllocationControl.Dimension4Enabled
				and !TreatBlankDimension4AsEmpty)
					if (ProcessDimension4PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension4 = MatrixMapDimension4Rel.FinanceDimension4"
						if (FinanceEnterpriseGroup.FinanceDimension4Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension4 = FinanceDimension4Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension5 entered)
				if (SourceAddress.FinanceDimension5.PostingDimension or not ProcessDimension5PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension5 = SourceAddress.FinanceDimension5\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension5 = Dimension5ShadowRel.FinanceDimension5\n"
			else
            if (SourceFinanceDimension5Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension5 = SourceFinanceDimension5GroupRel.FinanceDimension5\n"
            else
				if (AllocationControl.Dimension5Enabled
				and !TreatBlankDimension5AsEmpty)
					if (ProcessDimension5PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension5 = MatrixMapDimension5Rel.FinanceDimension5"
						if (FinanceEnterpriseGroup.FinanceDimension5Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension5 = FinanceDimension5Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension6 entered)
				if (SourceAddress.FinanceDimension6.PostingDimension or not ProcessDimension6PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension6 = SourceAddress.FinanceDimension6\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension6 = Dimension6ShadowRel.FinanceDimension6\n"
			else
            if (SourceFinanceDimension6Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension6 = SourceFinanceDimension6GroupRel.FinanceDimension6\n"
            else
				if (AllocationControl.Dimension6Enabled
				and !TreatBlankDimension6AsEmpty)
					if (ProcessDimension6PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension6 = MatrixMapDimension6Rel.FinanceDimension6"
						if (FinanceEnterpriseGroup.FinanceDimension6Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension6 = FinanceDimension6Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension7 entered)
				if (SourceAddress.FinanceDimension7.PostingDimension or not ProcessDimension7PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension7 = SourceAddress.FinanceDimension7\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension7 = Dimension7ShadowRel.FinanceDimension7\n"
			else
            if (SourceFinanceDimension7Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension7 = SourceFinanceDimension7GroupRel.FinanceDimension7\n"
            else
				if (AllocationControl.Dimension7Enabled
				and !TreatBlankDimension7AsEmpty)
					if (ProcessDimension7PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension7 = MatrixMapDimension7Rel.FinanceDimension7"
						if (FinanceEnterpriseGroup.FinanceDimension7Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension7 = FinanceDimension7Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension8 entered)
				if (SourceAddress.FinanceDimension8.PostingDimension or not ProcessDimension8PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension8 = SourceAddress.FinanceDimension8\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension8 = Dimension8ShadowRel.FinanceDimension8\n"
			else
            if (SourceFinanceDimension8Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension8 = SourceFinanceDimension8GroupRel.FinanceDimension8\n"
            else
				if (AllocationControl.Dimension8Enabled
				and !TreatBlankDimension8AsEmpty)
					if (ProcessDimension8PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension8 = MatrixMapDimension8Rel.FinanceDimension8"
						if (FinanceEnterpriseGroup.FinanceDimension8Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension8 = FinanceDimension8Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension9 entered)
				if (SourceAddress.FinanceDimension9.PostingDimension or not ProcessDimension9PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension9 = SourceAddress.FinanceDimension9\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension9 = Dimension9ShadowRel.FinanceDimension9\n"
			else
            if (SourceFinanceDimension9Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension9 = SourceFinanceDimension9GroupRel.FinanceDimension9\n"
            else
				if (AllocationControl.Dimension9Enabled
				and !TreatBlankDimension9AsEmpty)
					if (ProcessDimension9PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension9 = MatrixMapDimension9Rel.FinanceDimension9"
						if (FinanceEnterpriseGroup.FinanceDimension9Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension9 = FinanceDimension9Structure.DimensionNode\n"

			if (SourceAddress.FinanceDimension10 entered)
				if (SourceAddress.FinanceDimension10.PostingDimension or not ProcessDimension10PostingBalance)
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension10 = SourceAddress.FinanceDimension10\n"
				else
					AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension10 = Dimension10ShadowRel.FinanceDimension10\n"
			else
            if (SourceFinanceDimension10Group entered)
                AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension10 = SourceFinanceDimension10GroupRel.FinanceDimension10\n"
            else
				if (AllocationControl.Dimension10Enabled
				and !TreatBlankDimension10AsEmpty)
					if (ProcessDimension10PostingBalance)
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension10 = MatrixMapDimension10Rel.FinanceDimension10"
						if (FinanceEnterpriseGroup.FinanceDimension10Required)
                			AllocationCubeMap += "\n"
						else
			            	AllocationCubeMap += " and blank dimension\n"
					else
						AllocationCubeMap += "related.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Structure.DimensionNode\n"


			AllocationCubeMap += "related.EntityYearPeriod = AllocationPeriod\n"
			if (!AllocateUnits)
				AllocationCubeMap += "related.CurrencyCode.Currency where (TransactionAmount not empty)\n"
			return AllocationCubeMap
		
		AllocationDynamicSelection is a DerivedField
			type is LPLText
			restricted
			is condition for LocalBusinessClassName

			AllocationDynamicSelection = "(1 = 1 "
			
			if (not AllocationSourceSystem.TrueCost)
				AllocationDynamicSelection += " and " + LocalRelationName + ".FinanceCodeBlock.Ledger = LocalSourceLedger "

			if (SourceSystemCode entered)
				AllocationDynamicSelection += " and " + LocalRelationName + ".System = SourceSystemCode "
			
			if (SourceAddress.AccountingEntity entered)
				AllocationDynamicSelection += " and " + LocalRelationName + ".FinanceCodeBlock.ToAccountingEntity = SourceAddress.AccountingEntity "

			LocalDimensionEntered			= SourceAddress.IsAccountingUnitEntered	
			LocalIsPosting					= SourceAddress.AccountingUnit.PostingAccountingUnit
			LocalDimensionSelected			= AllocationControl.AccountingUnitEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.AccountingUnitRequired
			LocalTreatBlankAsEmpty			= TreatBlankAccountingUnitAsEmpty
			LocalDimentionName				= "FinanceCodeBlock.AccountingUnit"
			LocalSourceAddress				= "SourceAddress.AccountingUnit"	
            if (SourceAccountingUnitGroup entered)
                LocalNodeRelation           = "SourceAccountingUnitGroupRel.AccountingUnit"
            else
			    LocalNodeRelation			= "MatrixMapAccountingUnitsRel.AccountingUnit"

            if (SourceAccountingUnitGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceAccountingUnitGroupRel.AccountingUnit"
            else
			    LocalSourceAddressRelation	= "AccountingUnitShadowRel.AccountingUnit"
			
			AllocationDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsGeneralLedgerChartAccountEntered
			LocalIsPosting					= SourceAddress.GeneralLedgerChartAccount.IsPosting
			LocalDimensionSelected			= AllocationControl.AccountEnabled
			LocalDimensionRequired			= true
			LocalTreatBlankAsEmpty			= false
			LocalDimentionName				= "FinanceCodeBlock.GeneralLedgerChartAccount"
			LocalSourceAddress				= "SourceAddress.GeneralLedgerChartAccount"	
            LocalNodeRelation	    		= "MatrixMapAccountRel.GeneralLedgerChartAccount"
			if (SourceAccountGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceAccountGroupRel.GeneralLedgerChartAccount"
            else
			    LocalSourceAddressRelation	= "AccountShadowRel.GeneralLedgerChartAccount"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsProjectEntered
			LocalIsPosting					= SourceAddress.Project.IsPostingProject
			LocalDimensionSelected			= AllocationControl.ProjectEnabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.ProjectRequired
			LocalTreatBlankAsEmpty			= TreatBlankProjectAsEmpty
			LocalDimentionName				= "FinanceCodeBlock.Project"
			LocalSourceAddress				= "SourceAddress.Project"	
            LocalNodeRelation   			= "MatrixMapProjectsRel.Project"
			if (SourceProjectGroup entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceProjectGroupRel.Project"
            else
			    LocalSourceAddressRelation	= "ProjectShadowRel.Project"
			
			AllocationDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension1Entered
			LocalIsPosting					= SourceAddress.FinanceDimension1.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension1Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension1Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension1AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension1"
			LocalSourceAddress				= "SourceAddress.FinanceDimension1"	
            LocalNodeRelation   			= "MatrixMapDimension1Rel.FinanceDimension1"
			if (SourceFinanceDimension1Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension1GroupRel.FinanceDimension1"
            else
			    LocalSourceAddressRelation	= "Dimension1ShadowRel.FinanceDimension1"
			
			AllocationDynamicSelection += DynamicSelectionForDimension


			LocalDimensionEntered			= SourceAddress.IsFinanceDimension2Entered
			LocalIsPosting					= SourceAddress.FinanceDimension2.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension2Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension2Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension2AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension2"
			LocalSourceAddress				= "SourceAddress.FinanceDimension2"	
            LocalNodeRelation	    		= "MatrixMapDimension2Rel.FinanceDimension2"
			if (SourceFinanceDimension2Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension2GroupRel.FinanceDimension2"
            else
			    LocalSourceAddressRelation	= "Dimension2ShadowRel.FinanceDimension2"
			
			AllocationDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension3Entered
			LocalIsPosting					= SourceAddress.FinanceDimension3.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension3Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension3Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension3AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension3"
			LocalSourceAddress				= "SourceAddress.FinanceDimension3"	
            LocalNodeRelation				= "MatrixMapDimension3Rel.FinanceDimension3"
			if (SourceFinanceDimension3Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension3GroupRel.FinanceDimension3"
            else
			    LocalSourceAddressRelation	= "Dimension3ShadowRel.FinanceDimension3"
			
			AllocationDynamicSelection += DynamicSelectionForDimension
			
			LocalDimensionEntered			= SourceAddress.IsFinanceDimension4Entered
			LocalIsPosting					= SourceAddress.FinanceDimension4.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension4Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension4Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension4AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension4"
			LocalSourceAddress				= "SourceAddress.FinanceDimension4"	
            LocalNodeRelation		    	= "MatrixMapDimension4Rel.FinanceDimension4"
			if (SourceFinanceDimension4Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension4GroupRel.FinanceDimension4"
            else
			    LocalSourceAddressRelation	= "Dimension4ShadowRel.FinanceDimension4"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension5Entered
			LocalIsPosting					= SourceAddress.FinanceDimension5.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension5Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension5Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension5AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension5"
			LocalSourceAddress				= "SourceAddress.FinanceDimension5"	
            LocalNodeRelation			    = "MatrixMapDimension5Rel.FinanceDimension5"
			if (SourceFinanceDimension5Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension5GroupRel.FinanceDimension5"
            else
			    LocalSourceAddressRelation	= "Dimension5ShadowRel.FinanceDimension5"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension6Entered
			LocalIsPosting					= SourceAddress.FinanceDimension6.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension6Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension6Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension6AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension6"
			LocalSourceAddress				= "SourceAddress.FinanceDimension6"	
            LocalNodeRelation   			= "MatrixMapDimension6Rel.FinanceDimension6"
			if (SourceFinanceDimension6Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension6GroupRel.FinanceDimension6"
            else
			    LocalSourceAddressRelation	= "Dimension6ShadowRel.FinanceDimension6"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension7Entered
			LocalIsPosting					= SourceAddress.FinanceDimension7.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension7Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension7Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension7AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension7"
			LocalSourceAddress				= "SourceAddress.FinanceDimension7"	
			LocalNodeRelation			    = "MatrixMapDimension7Rel.FinanceDimension7"
			if (SourceFinanceDimension7Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension7GroupRel.FinanceDimension7"
            else
			    LocalSourceAddressRelation	= "Dimension7ShadowRel.FinanceDimension7"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension8Entered
			LocalIsPosting					= SourceAddress.FinanceDimension8.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension8Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension8Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension8AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension8"
			LocalSourceAddress				= "SourceAddress.FinanceDimension8"	
			LocalNodeRelation			    = "MatrixMapDimension8Rel.FinanceDimension8"
			if (SourceFinanceDimension8Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension8GroupRel.FinanceDimension8"
            else
			    LocalSourceAddressRelation	= "Dimension8ShadowRel.FinanceDimension8"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension9Entered
			LocalIsPosting					= SourceAddress.FinanceDimension9.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension9Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension9Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension9AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension9"
			LocalSourceAddress				= "SourceAddress.FinanceDimension9"	
			LocalNodeRelation			    = "MatrixMapDimension9Rel.FinanceDimension9"
			if (SourceFinanceDimension9Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension9GroupRel.FinanceDimension9"
            else
			    LocalSourceAddressRelation	= "Dimension9ShadowRel.FinanceDimension9"
			
			AllocationDynamicSelection += DynamicSelectionForDimension

			LocalDimensionEntered			= SourceAddress.IsFinanceDimension10Entered
			LocalIsPosting					= SourceAddress.FinanceDimension10.PostingDimension
			LocalDimensionSelected			= AllocationControl.Dimension10Enabled
			LocalDimensionRequired			= FinanceEnterpriseGroup.FinanceDimension10Required
			LocalTreatBlankAsEmpty			= TreatBlankDimension10AsEmpty
			LocalDimentionName				= "FinanceCodeBlock.FinanceDimension10"
			LocalSourceAddress				= "SourceAddress.FinanceDimension10"	
			LocalNodeRelation			    = "MatrixMapDimension10Rel.FinanceDimension10"
            if (SourceFinanceDimension10Group entered)
                LocalDimensionEntered       = true
                LocalSourceAddressRelation  = "SourceFinanceDimension10GroupRel.FinanceDimension10"
            else
			    LocalSourceAddressRelation	= "Dimension10ShadowRel.FinanceDimension10"
			
			AllocationDynamicSelection += DynamicSelectionForDimension
			
			if (not AllocationTransactionDetailQuery)
				AllocationDynamicSelection += "and " + LocalRelationName + ".EntityYearPeriod = any PeriodShadowEndDatesRel.GeneralLedgerCalendarPeriod "

			AllocationDynamicSelection += ")"
			return AllocationDynamicSelection
			
		DynamicMeasures is a DerivedField
			type is LPLText
			restricted
			DynamicMeasures = "NetTransactionAmount\n"
			if (LoadAllMeasures or AllocateAmountType.FunctionalAmount)
				DynamicMeasures += "NetFunctionalAmount\n"
			if (LoadAllMeasures or AllocateAmountType.AlternateAmount)
				DynamicMeasures += "NetAlternateAmount\n"
			if (LoadAllMeasures or AllocateAmountType.AlternateAmount2)
				DynamicMeasures += "NetAlternateAmount2\n"
			if (LoadAllMeasures or AllocateAmountType.AlternateAmount3)
				DynamicMeasures += "NetAlternateAmount3\n"
			if (LoadAllMeasures or AllocateAmountType.ProjectAmount)
				DynamicMeasures += "NetProjectAmount\n"
			if (LoadAllMeasures or AllocateAmountType.ReportAmount1)
				DynamicMeasures += "NetReportAmount1\n"
			if (LoadAllMeasures or AllocateAmountType.ReportAmount2)
				DynamicMeasures += "NetReportAmount2\n"
			if (LoadAllMeasures or AllocateAmountType.ReportAmount3)
				DynamicMeasures += "NetReportAmount3\n"
			if (LoadAllMeasures or AllocateAmountType.ReportAmount4)
				DynamicMeasures += "NetReportAmount4\n"
			if (LoadAllMeasures or AllocateAmountType.ReportAmount5)
				DynamicMeasures += "NetReportAmount5\n"
			DynamicMeasures += "NetUnitsAmount"
			return DynamicMeasures
		
		DynamicALTDMeasures is a DerivedField
			type is LPLText
			restricted
			DynamicALTDMeasures = "TransactionAmount\n"
			if (AllocateAllCurrencyAmounts)
				DynamicALTDMeasures += "ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount\n"
				DynamicALTDMeasures += "ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount\n"

			DynamicALTDMeasures += "UnitsAmount\n"
			return DynamicALTDMeasures

		DimensionValue is a DerivedField
			type is Alpha 512
            return AllocationLine cube dimension value
		
		ProcessPostingPerformanceWarningForList is a MessageField
			"Warning:Line<AllocationLine>,SelectingProcessPostingBalancesForABlankDimensionWithTreatBlankAsEmptyNotSelectedWillProcessAllPostingDetails;ThisCouldImpactPerformance.RunCheckSourceDetailsForTheNumberOfCombinations."
		ProcessPostingPerformanceWarningForForm is a MessageField
			"Warning:SelectingProcessPostingBalancesForABlankDimensionWithTreatBlankAsEmptyNotSelectedWillProcessAllPostingDetails;ThisCouldImpactPerformance.RunCheckSourceDetailsForTheNumberOfCombinations."

		DerivedAutoReverse is a DerivedField
			type is Boolean
			default label is "AutoReverse"
			if (AutoReverse.DefaultFromAllocation)
				return Allocation.AutoReverse
			else
			if (AutoReverse.Yes)
				return true
			else
				return false
				
		DerivedNegativeStep is a DerivedField
			type is like AllocationStep
			restricted
			return -1 * AllocationStep
		
		DerivedAllocationLineListTile is a DerivedField
			type is MessageField
			if(Description entered)
				return DerivedAllocationLineDescription
			else
				return DerivedAllocationLineDefaultTitle
		
		DerivedLinesUsingBuilderTitle is a MessageField
			restricted
			"LinesUsing_Builder_-_<AllocationRunJobContext.AllocationWeightGenerator>"

		DerivedAllocationLineDefaultTitle is a MessageField
			restricted
			"Allocation_Line<AllocationLine>"
				
		DerivedAllocationLineDescription is a MessageField
			restricted
			"Allocation_Line<AllocationLine>_-_<Description>"

		DerivedSourceEntity is a DerivedField
			type is like AccountingEntity
			if (SourceAccountingEntityGroup entered)
				return SourceAccountingEntityGroup
			else
				return SourceAddress.AccountingEntity

        DerivedSourceAccountingUnit is a DerivedField
            type is Alpha size 25
            if (SourceAccountingUnitGroup entered)
                return SourceAccountingUnitGroup
            return SourceAddress.AccountingUnit

        DerivedSourceAccount is a DerivedField
            type is Alpha size 25
            if (SourceAccountGroup entered)
                return SourceAccountGroup
            return SourceAddress.GeneralLedgerChartAccount

		DerivedBlankLine	is a DerivedField
			type is Alpha size 1
			return " "		

		DeriveReturnYes is a DerivedField
			type is Alpha size 1
			restricted
			return "Y"

        DerivedAllocationCopyInitialValue is a MessageField
            restricted
            "<AllocationLine>\_\COPY"

        DerivedDescriptionCopyInitialValue is a MessageField
            restricted
            "<Description>_COPY"

		DerivedToCustomComputeBusinessClass	is a DerivedField
			type is like BusinessClass
			restricted
			if (ToOverrideOption.OneDimension)
				if (ToMultipleAccountingUnit)
					return "AccountingUnit"
				else
				if (ToMultipleAccount)
					return "GeneralLedgerChartAccount"
				else
				if (ToMultipleProject)
					return "Project"
				else
				if (ToMultipleDimension1 or ToMultipleDimension2 or ToMultipleDimension3 or ToMultipleDimension4 or ToMultipleDimension5
				or  ToMultipleDimension6 or ToMultipleDimension7 or ToMultipleDimension8 or ToMultipleDimension9 or ToMultipleDimension10)
					return "FinanceDimension1"
			else
			if (ToOverrideOption.TwoDimension)
				return "AllocationLineTempOverride"
			else
			if (ToOverrideOption.MultipleDimensions)
				if (ToOverrideSetOption.ManualOverride)
					return "AllocationLineOverride"
				else
				if (ToOverrideSetOption.GroupOverrideList)
					return "AllocationLineOverrideSetDetail"
			else
				return blank
		
		DerivedFromCustomComputeBusinessClass	is a DerivedField
			type is like BusinessClass
			restricted
			if (FromOverrideOption.OneDimension)
				if (FromMultipleAccountingUnit)
					return "AccountingUnit"
				else
				if (FromMultipleAccount)
					return "GeneralLedgerChartAccount"
				else
				if (FromMultipleProject)
					return "Project"
				else
				if (FromMultipleDimension1 or FromMultipleDimension2 or FromMultipleDimension3 or FromMultipleDimension4 or FromMultipleDimension5
				or  FromMultipleDimension6 or FromMultipleDimension7 or FromMultipleDimension8 or FromMultipleDimension9 or FromMultipleDimension10)
					return "FinanceDimension1"
			else
			if (FromOverrideOption.TwoDimension)
				return "AllocationLineTempOverride"
			else
			if (FromOverrideOption.MultipleDimensions)
				if (FromOverrideSetOption.ManualOverride)
					return "AllocationLineOverride"
				else
				if (FromOverrideSetOption.GroupOverrideList)
					return "AllocationLineOverrideSetDetail"
			else
				return blank

	Local Fields
		LocalDebug							is Boolean
		LocalLastTimeStamp					is TimeStamp 
		LocalCurrentTimeStamp				is TimeStamp
		LocalElapsedTime					is Numeric size 12
		LocalSourceLedger					is a Ledger
		LocalTransactionLedger				is a Ledger
		UsingCapacityCalculation			is Boolean
		SourceAddressDimensionCode			is Alpha 105
		AllocationContext
		GeneratingSourceListingData			is Boolean
		AccountingEntityGroup				is a AccountingEntity group
		AccountingUnitGroup					is a AccountingUnit group
		AccountGroup						is a GeneralLedgerChartAccount group
		ProjectGroup						is a Project group
		Dimension1Group						is a FinanceDimension1 group
		Dimension2Group						is a FinanceDimension2 group
		Dimension3Group						is a FinanceDimension3 group
		Dimension4Group						is a FinanceDimension4 group
		Dimension5Group						is a FinanceDimension5 group
		Dimension6Group						is a FinanceDimension6 group
		Dimension7Group						is a FinanceDimension7 group
		Dimension8Group						is a FinanceDimension8 group
		Dimension9Group						is a FinanceDimension9 group
		Dimension10Group					is a FinanceDimension10 group
		OverrideAccountingEntity			is a AccountingEntity
		OverrideAccountingUnit				is a AccountingUnit
		OverrideAccount						is a GeneralLedgerChartAccount
		OverrideProject						is a Project
		OverrideDimension1					is a FinanceDimension1
		OverrideDimension2					is a FinanceDimension2
		OverrideDimension3					is a FinanceDimension3
		OverrideDimension4					is a FinanceDimension4
		OverrideDimension5					is a FinanceDimension5
		OverrideDimension6					is a FinanceDimension6
		OverrideDimension7					is a FinanceDimension7
		OverrideDimension8					is a FinanceDimension8
		OverrideDimension9					is a FinanceDimension9
		OverrideDimension10					is a FinanceDimension10
		
		FromEntity							is AlphaUpper size 12 
		JournalizeGroup
		PostingDate
		TransactionCounter					is Numeric size 8
		StartAllocationPeriod				is a GeneralLedgerCalendarPeriod
		AllocationPeriod					is a GeneralLedgerCalendarPeriod
		CurrentPeriod						is a GeneralLedgerCalendarPeriod
		CurrentParentPeriod					is a GeneralLedgerCalendarPeriod
		AllocationYear						is a GeneralLedgerCalendarYear
		TransactionDate						is Date
		DirectionFactor						is Decimal size 14.7
		SplitDirection						is Decimal size 14.7
		AmountMultiplier					is Decimal size 14.7
		OriginalValue						is an InternationalAmount
		CurrentValue						is an InternationalAmount
		CurrentCurrencyAmount				is an AllocationCurrencyAmount
		ComputedValue						is an InternationalAmount
		UseValue							is an InternationalAmount
		UseValueCurrencyAmount				is an AllocationCurrencyAmount
		SplitCurrentValue					is an InternationalAmount
		SplitCurrentHighestValue			is an InternationalAmount
		SplitCurrentCurrencyAmount			is an AllocationCurrencyAmount
		TranslatedSourceValue				is an InternationalAmount
		ComputedSourceValue					is an InternationalAmount
		
		FromCurrency
		TransactionAmount					is a CurrencyAmount
		ExchangeDate
		ToCurrency
		CurrencyTable
		CurrencyExchange
		
		UseConsolidated						is Boolean
		ConsolidatedValue					is an InternationalAmount
		ConsolidatedCurrencyAmount			is an AllocationCurrencyAmount
		IsCurrentFrom						is Boolean
		IsCurrentSplit						is Boolean 
		CurrentAddress						is a FinanceAddress	 
			holds pii
		CurrentCurrency						is a Currency
		TargetCurrency						is a Currency
		CurrencyExchangeRate
		CurrencyDate						is Date
		Direction							is Numeric 1
		Weight								is an AllocationWeightDecimal
		TotalSplitWeight					is an AllocationWeightDecimal
		FromTotalSplitWeight				is an AllocationWeightDecimal
		ToTotalSplitWeight					is an AllocationWeightDecimal
		TemporaryTotalSplitWeight			is Decimal 31.4
		TotalSplitSum						is an InternationalAmount
		TotalSplitSumCurrencyAmount			is an AllocationCurrencyAmount
		WeightPercent						is an AllocationWeightPercent
		Counter								is Numeric 6
		LoopCounter							is Numeric 6
		TotalOverrideCount					is Numeric 6
		FromOverrideCount					is Numeric 6
		ToOverrideCount						is Numeric 6
		FromPostCount						is Numeric 6
		ToPostCount							is Numeric 6
		TransactionError					is Boolean
		TransactionErrorMessage				is Alpha 150
		ErrorMessage						is Alpha 150
		LocalNewAllocationLine				is like AllocationLine
		LocalNewAllocation					is like Allocation
		LocalNewAllocationControl			is like AllocationControl
		LocalAllocationLineSourceValueView	is a AllocationLineSourceValue view
		LocalAllocationLineSourceValue		is like AllocationLineSourceValue
		
		AllocationCallBackResultView		is a AllocationCallBackResult view
		LocalAccountingEntity				is like AccountingEntity
		LocalGLTotalAccountingEntity		is like AccountingEntity		
		
		AllocationLineOverrideField	
		
		LocalCheckSourceCombinations		is Boolean
		LocalSourceCombinationCount			is Numeric 9
		LocalAllocationSnapshot				is an AllocationSnapshot
		
		LocalDimensionEntered				is Boolean 
		LocalIsPosting						is Boolean
		LocalDimensionSelected				is Boolean
		LocalDimensionRequired				is Boolean
		LocalTreatBlankAsEmpty				is Boolean
		LocalRelationName					is Alpha 100
		LocalBusinessClassName				is Alpha 100
		LocalDimentionName					is Alpha 100
		LocalSourceAddress					is Alpha 100
		LocalSourceAddressRelation			is Alpha 100
		LocalNodeRelation					is Alpha 100
		AllocationTransactionDetailQuery	is Boolean
		
		LocalDistinctDimensionSource		is a FinanceAddress	 
			holds pii
		LocalGenerateOverrides				is Boolean

		LocalCalculateAllocationFinanceStructure	is a CalculateAllocationFinanceStructure
		LocalAnswer 								is Alpha size 1
		
		LocalSourceValueAddress	is a FinanceAddress 
			holds pii
		LocalFromOriginalSource	is Boolean

		LocalRoundedValueInput				is an InternationalAmount
		LocalRoundedValueCurrency			is a Currency
		LocalToFunctionalCurrency			is a Currency
		LocalToAlternateCurrency			is a Currency
		LocalToAlternateCurrency2			is a Currency
		LocalToAlternateCurrency3			is a Currency
	
		LocalResult							is Boolean

		LineSourceCounter					is Numeric size 12
		LocalSummaryOverrideDimensionCount	is Numeric size 1
		LocalBudgetCodeBlock				is a BudgetCodeBlock
		LocalBudgetCodeBlockResult			is Alpha 150
		BudgetCodeBlockStructureValidation		

        LocalAllocationWeightGenerator      is an AllocationWeightGenerator
        LocalProcessSourceSummary           is Boolean
		LocalSkipMeasureChecking			is Boolean
		LocalMeasureIsEntered				is Boolean
		LocalPeriodEndingDate				is like GeneralLedgerCalendarPeriod

		LocalAllocationTransactionDetail 			is an AllocationTransactionDetail view
		LocalCashOffsetTransactionDetail 			is an AllocationTransactionDetail view
		LocalOverthrownTransactionDetail			is an AllocationTransactionDetail view
		LocalOverthrownCashOffsetDetail	 			is an AllocationTransactionDetail view
		LocalBypassDetailCreation					is Boolean
		LocalUpdateTransactionByOverthrownAmount	is Boolean 
		LocalSkipCreateButUpdateTransaction			is Boolean 
		LocalOverthrownAmountOption 				is Numeric size 1

	Rule Blocks

        SetIndividualSource

            Source.Ledger						= each.GeneralLedgerTotal.Ledger
            Source.AccountingEntity				= each.AccountingEntity
            Source.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount
            Source.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
            Source.Project						= each.GeneralLedgerTotal.Project
            Source.FinanceDimension1			= each.FinanceDimension1
            Source.FinanceDimension2			= each.FinanceDimension2
            Source.FinanceDimension3			= each.FinanceDimension3
            Source.FinanceDimension4			= each.FinanceDimension4
            Source.FinanceDimension5			= each.FinanceDimension5
            Source.FinanceDimension6			= each.FinanceDimension6
            Source.FinanceDimension7			= each.FinanceDimension7
            Source.FinanceDimension8			= each.FinanceDimension8
            Source.FinanceDimension9			= each.FinanceDimension9
            Source.FinanceDimension10			= each.FinanceDimension10

            include SetSource

        CreateAllocationLineSource

            if (not HasCustomGroupToSummarize or CurrentAllocationLineSourceDetailRel not exists)
                LineSourceCounter += 1
                invoke Create AllocationLineSource
                    invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                    invoked.AllocationSourceSystem  = AllocationSourceSystem
                    invoked.AllocationControl		= AllocationControl
                    invoked.Allocation				= Allocation
                    invoked.AllocationLine			= AllocationLine
                    invoked.AllocationRun			= AllocationRunRel.AllocationRun
                    invoked.AllocationLineSource    = LineSourceCounter
                    invoked.SourceAddress			= LocalSourceValueAddress

        SetCurrentValue

            initialize CurrentValue

            if (AllocateUnits)
                CurrentValue            = each.NetUnitsAmount
            else
                CurrentValue            = each.NetTransactionAmount
				if (ZeroTransAmountAllocationEnabled
				and AllocateAllCurrencyAmounts)
					initialize CurrentCurrencyAmount
					CurrentCurrencyAmount.AccountingEntity		= each.AccountingEntity
					CurrentCurrencyAmount.Project				= each.GeneralLedgerTotal.Project
					CurrentCurrencyAmount.FunctionalAmount		= each.NetFunctionalAmount
					CurrentCurrencyAmount.AlternateAmount		= each.NetAlternateAmount
					CurrentCurrencyAmount.AlternateAmount2		= each.NetAlternateAmount2
					CurrentCurrencyAmount.AlternateAmount3		= each.NetAlternateAmount3
					CurrentCurrencyAmount.ProjectAmount			= each.NetProjectAmount
					CurrentCurrencyAmount.ReportAmount1			= each.NetReportAmount1
					CurrentCurrencyAmount.ReportAmount2			= each.NetReportAmount2
					CurrentCurrencyAmount.ReportAmount3			= each.NetReportAmount3
					CurrentCurrencyAmount.ReportAmount4			= each.NetReportAmount4
					CurrentCurrencyAmount.ReportAmount5			= each.NetReportAmount5

		CreateSingleOverride

            if (FromOverride entered or ToOverride entered)
                invoke Create AllocationLineSingleOverride
                    invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
                    invoked.AllocationSourceSystem  					= AllocationSourceSystem
                    invoked.AllocationControl							= AllocationControl
                    invoked.Allocation									= Allocation
                    invoked.AllocationLine								= AllocationLine
                    invoked.AllocationRun								= AllocationRunRel.AllocationRun
                    invoked.FromOverride								= FromOverride
                    invoked.ToOverride									= ToOverride

        UpdateOverridePercentageForListingReport

            if (ToPostOption.Split and ToTempOverridesRel exists)
                TotalSplitWeight        = ToTotalSplitWeight
                for each ToTempOverridesRel
                    include UpdatePercent

            if (FromPostOption.Split and FromTempOverridesRel exists)
                TotalSplitWeight        = FromTotalSplitWeight
                for each FromTempOverridesRel
                    include UpdatePercent
	
		TempOverrideSource
			if (ComputeOverridesForDistinctDimensions)
				invoked.SourceAddress			= LocalDistinctDimensionSource
			else
			if (ComputeOverridesWithDetails)
				invoked.SourceAddress			= Source
			else
				invoked.SourceAddress			= SourceAddress
				
		GenerateSourceListingData
			if (PrmGenerateListingData)
				display "GeneratingListingData"
				GeneratingSourceListingData = true
				initialize Source
				initialize LineSourceCounter
				for each MatrixRel
                    
                    include SetCurrentValue

                    if (CurrentValue entered 
					or (ZeroTransAmountAllocationEnabled and CurrentCurrencyAmount.HasAmountsEntered))

						include SetIndividualSource

                        include CreateAllocationLineSource
                        
					include CheckCommitTransaction
				GeneratingSourceListingData = false
                initialize CurrentValue
				include CommitResetCounter
		SetCallBackSource
			if (ComputeOverridesForDistinctDimensions)
				AllocationSplitCallBack.Source						= LocalDistinctDimensionSource
			else	
			if (ComputeOverridesWithDetails)
				AllocationSplitCallBack.Source						= Source
			else
				AllocationSplitCallBack.Source						= SourceAddress
		SetTempCapacityWeight
			if (TemporaryTotalSplitWeight not entered)
				TemporaryTotalSplitWeight = AllocationSplitCallBack.CapacityWeight

		GenerateOverrides
			if (LocalDebug)
				display "GenerateOverrides"
			LocalGenerateOverrides = true
			if (Allocation.CustodialAccountInterest)
				initialize ToOverrideCount
				initialize ToTotalSplitWeight
				for each ToTempOverridesRel
					ToOverrideCount += 1
					ToTotalSplitWeight += each.WeightDecimal		
			else
				if (ComputeOverridesForDistinctDimensions)
					if (OverrideHeaderRel exists)
						LocalGenerateOverrides = false
						
						FromTotalSplitWeight	= OverrideHeaderRel.FromTotalSplitWeight
						ToTotalSplitWeight		= OverrideHeaderRel.ToTotalSplitWeight
						FromOverrideCount		= OverrideHeaderRel.FromOverrideCount			
						ToOverrideCount			= OverrideHeaderRel.ToOverrideCount		
											
				if (LocalGenerateOverrides)
					include GenerateOverridesInternal 
					
					if (ComputeOverridesForDistinctDimensions)
						invoke Create AllocationLineTempOverrideHeader
							invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem				= AllocationSourceSystem
							invoked.AllocationControl					= AllocationControl
							invoked.Allocation							= Allocation
							invoked.AllocationLine						= AllocationLine
							invoked.AllocationRun						= AllocationRunRel.AllocationRun
							invoked.AllocationLineTempOverrideHeader	= LocalDistinctDimensionSource.DimensionCode					
							invoked.FromTotalSplitWeight				= FromTotalSplitWeight
							invoked.ToTotalSplitWeight					= ToTotalSplitWeight
							invoked.FromOverrideCount					= FromOverrideCount			
							invoked.ToOverrideCount						= ToOverrideCount							
		
		GenerateOverridesInternal
			if (LocalDebug)
				display "GenerateOverridesInternal"

			if (ComputeOverridesWithDetails)
				AllocationContext.Source	= Source
				
			FromOverrideCount		= 0
			FromTotalSplitWeight	= 0.0
			if (FromOverrideOption.TwoDimension)
				invoke LoopOverrides
					invoked.PrmLevel = 2
					invoked.PrmIsCurrentFrom = true
			else			
			if (FromDimensionWithMultipleOverrides entered
			or  FromOverrideOption.MultipleDimensions)
				if (FromAllocationLineOverrideSet entered)
					for each FromAllocationLineOverrideSet.AllocationLineOverrideSetDetail set
						AllocationLineOverrideField.AllocationLineOverrideSet		= FromAllocationLineOverrideSet
						AllocationLineOverrideField.AllocationLineOverrideSetDetail	= each.AllocationLineOverrideSetDetail
						AllocationLineOverrideField.GeneralLedgerCalendarPeriod		= CurrentPeriod
						if (FromOverrideSetDetailCompute entered)
							Weight = FromOverrideSetDetailCompute compute value for AllocationLineOverrideField.AllocationLineOverrideSetDetail
						else
							Weight = each.WeightDecimal
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)							
							FromOverrideCount		+= 1
							FromTotalSplitWeight	+= Weight
							invoke CreateWithWeight AllocationLineTempOverride
								fill in fields from each.AllocationLineOverrideSetDetail
									except invoked.WeightDecimal
								invoked.AllocationControl			= AllocationControl
								invoked.Allocation					= Allocation
								invoked.AllocationLine 				= AllocationLine
								invoked.AllocationRun 				= AllocationRunRel.AllocationRun
								invoked.Direction					= 0
								invoked.GeneralLedgerCalendarPeriod	= CurrentPeriod
								include TempOverrideSource
								invoked.WeightDecimal				= Weight
							include CheckCommitTransaction
                else
                if(FromAllocationWeightGenerator entered)
                    LocalAllocationWeightGenerator = FromAllocationWeightGenerator

                    for each AllocationRunWeightDetailRel
                        Weight = each.Weight
                        if (Weight < 0 and not AllowNegativeWeights)
                            Weight					= -1.0*Weight
                        FromOverrideCount 	+= 1
                        FromTotalSplitWeight	+= Weight
                        invoke CreateWithWeight AllocationLineTempOverride
                            fill in fields from each.AllocationRunWeightDetail
								except invoked.Weight
                            invoked.AllocationControl			= AllocationControl
                            invoked.Allocation					= Allocation
                            invoked.AllocationLine				= AllocationLine
                            invoked.AllocationRun				= AllocationRunRel.AllocationRun
                            invoked.Direction					= 0
                            invoked.GeneralLedgerCalendarPeriod	= CurrentPeriod
                            include TempOverrideSource
                            invoked.WeightDecimal 				= Weight
                        include CheckCommitTransaction
				else
					for each FromOverridesRel
                        if (not FromOverrideOption.OneDimension or each.ActiveOneDimensionOverride)
                            each.AllocationLineOverride.AllocationContext.SourceDetail = AllocationContext.SourceDetail
                            AllocationLineOverrideField.AllocationLineOverride 		= each.AllocationLineOverride
                            AllocationLineOverrideField.GeneralLedgerCalendarPeriod = each.GeneralLedgerCalendarPeriod
                            if (FromMultipleDimensionCompute entered)
                                Weight = FromMultipleDimensionCompute compute value for AllocationLineOverrideField.AllocationLineOverride
                            else
                                Weight = each.WeightDecimal
                            if (Weight < 0 and not AllowNegativeWeights)
                                Weight					= -1.0*Weight
                            if (Weight entered)											
                                FromOverrideCount		+= 1
                                FromTotalSplitWeight	+= Weight
                                invoke CreateWithWeight AllocationLineTempOverride
                                    fill in fields from each.AllocationLineOverride
                                        except invoked.WeightDecimal
                                    invoked.AllocationRun               = AllocationRunRel.AllocationRun
                                    invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
                                    include TempOverrideSource
                                    invoked.WeightDecimal 				= Weight
                                include CheckCommitTransaction
				if (FromOverrideCount = 0)
					Counter = 0
					IsCurrentFrom = true
					if (FromAccountingEntityGroup entered)
						include AccountingEntityOverrides
					else
					if (FromOverrideSummary.AccountingUnit entered)
						include AccountingUnitSummaryOverrides
					else
					if (FromOverrideSummary.GeneralLedgerChartAccount entered)
						include AccountSummaryOverrides
					else
					if (FromOverrideSummary.Project entered)
						include ProjectSummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension1 entered)
						include Dimension1SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension2 entered)
						include Dimension2SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension3 entered)
						include Dimension3SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension4 entered)
						include Dimension4SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension5 entered)
						include Dimension5SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension6 entered)
						include Dimension6SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension7 entered)
						include Dimension7SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension8 entered)
						include Dimension8SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension9 entered)
						include Dimension9SummaryOverrides
					else
					if (FromOverrideSummary.FinanceDimension10 entered)
						include Dimension10SummaryOverrides
					else
					if (FromAccountingUnitGroup entered)
						include AccountingUnitGroupOverrides
					else
					if (FromAccountGroup entered)
						include AccountGroupOverrides
					else
					if (FromProjectGroup entered)
						include ProjectGroupOverrides
					else
					if (FromDimension1Group entered)
						include Dimension1GroupOverrides
					else
					if (FromDimension2Group entered)
						include Dimension2GroupOverrides
					else
					if (FromDimension3Group entered)
						include Dimension3GroupOverrides
					else
					if (FromDimension4Group entered)
						include Dimension4GroupOverrides
					else
					if (FromDimension5Group entered)
						include Dimension5GroupOverrides
					else
					if (FromDimension6Group entered)
						include Dimension6GroupOverrides
					else
					if (FromDimension7Group entered)
						include Dimension7GroupOverrides
					else
					if (FromDimension8Group entered)
						include Dimension8GroupOverrides
					else
					if (FromDimension9Group entered)
						include Dimension9GroupOverrides
					else
					if (FromDimension10Group entered)
						include Dimension10GroupOverrides




			if (FromOverrideCount != instance count of FromTempOverridesRel)
				invoke SendMismatchNotification
					invoked.PrmOverrideCount 		= FromOverrideCount 
					invoked.PrmTempOverrideCount 	= instance count of FromTempOverridesRel

			if (IncludeLineWeight)
				FromTotalSplitWeight += AllocationLineWeightRel.FromWeight
			include CommitResetCounter
			ToOverrideCount			= 0
			ToTotalSplitWeight		= 0.0
			if (ToOverrideOption.TwoDimension)
				invoke LoopOverrides
					invoked.PrmLevel = 2
					invoked.PrmIsCurrentFrom = false
			else
			if (ToDimensionWithMultipleOverrides entered 
			or  ToOverrideOption.MultipleDimensions)
				if (not UseOverrideForCompute)
					if (ToAllocationLineOverrideSet entered)
						for each ToAllocationLineOverrideSet.AllocationLineOverrideSetDetail set
							AllocationLineOverrideField.AllocationLineOverrideSet 		= ToAllocationLineOverrideSet
							AllocationLineOverrideField.AllocationLineOverrideSetDetail	= each.AllocationLineOverrideSetDetail
							AllocationLineOverrideField.GeneralLedgerCalendarPeriod		= CurrentPeriod
							if (ToOverrideSetDetailCompute entered)
								Weight = ToOverrideSetDetailCompute compute value for AllocationLineOverrideField.AllocationLineOverrideSetDetail
							else
								Weight = each.WeightDecimal
							if (Weight < 0 and not AllowNegativeWeights)
								Weight					= -1.0*Weight
							if (Weight entered)												
								ToOverrideCount 	+= 1
								ToTotalSplitWeight	+= Weight
								invoke CreateWithWeight AllocationLineTempOverride
									fill in fields from each.AllocationLineOverrideSetDetail
										except invoked.WeightDecimal
									invoked.AllocationControl			= AllocationControl
									invoked.Allocation					= Allocation
									invoked.AllocationLine				= AllocationLine
									invoked.AllocationRun				= AllocationRunRel.AllocationRun
									invoked.Direction					= 1
									invoked.GeneralLedgerCalendarPeriod	= CurrentPeriod
									include TempOverrideSource
									invoked.WeightDecimal 				= Weight
							include CheckCommitTransaction
					
                    else
                    if(ToAllocationWeightGenerator entered)
                        LocalAllocationWeightGenerator = ToAllocationWeightGenerator
                        for each AllocationRunWeightDetailRel
                            Weight = each.Weight
                            if (Weight < 0 and not AllowNegativeWeights)
                                Weight					= -1.0*Weight
                            ToOverrideCount 	+= 1
                            ToTotalSplitWeight	+= Weight
                            invoke CreateWithWeight AllocationLineTempOverride
                                fill in fields from each.AllocationRunWeightDetail
									except invoked.Weight
                                invoked.AllocationControl			= AllocationControl
                                invoked.Allocation					= Allocation
                                invoked.AllocationLine				= AllocationLine
                                invoked.AllocationRun				= AllocationRunRel.AllocationRun
                                invoked.Direction					= 1
                                invoked.GeneralLedgerCalendarPeriod	= CurrentPeriod
                                include TempOverrideSource
                                invoked.WeightDecimal 				= Weight
                            include CheckCommitTransaction
                    else
						for each ToOverridesRel
							each.AllocationLineOverride.AllocationContext.SourceDetail = AllocationContext.SourceDetail
							AllocationLineOverrideField.AllocationLineOverride 		= each.AllocationLineOverride
							AllocationLineOverrideField.GeneralLedgerCalendarPeriod = each.GeneralLedgerCalendarPeriod
							if (ToMultipleDimensionCompute entered)
								Weight = ToMultipleDimensionCompute compute value for AllocationLineOverrideField.AllocationLineOverride
							else
								Weight = each.WeightDecimal
							if (Weight < 0 and not AllowNegativeWeights)
								Weight					= -1.0*Weight
							if (Weight entered)				
								ToOverrideCount			+= 1
								ToTotalSplitWeight		+= Weight
								invoke CreateWithWeight AllocationLineTempOverride
									fill in fields from each.AllocationLineOverride
										except invoked.WeightDecimal
									invoked.AllocationRun = AllocationRunRel.AllocationRun
									invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
									include TempOverrideSource
									invoked.WeightDecimal = Weight
								include CheckCommitTransaction
				if (ToOverrideCount = 0)
					initialize TemporaryTotalSplitWeight
					Counter = 0
					IsCurrentFrom = false
					if (ToAccountingEntityGroup entered
					or (UseOverrideForCompute and ToAccountingEntityWeightCompute entered))
						include AccountingEntityOverrides
					else
					if (ToOverrideSummary.AccountingUnit entered)
						include AccountingUnitSummaryOverrides
					else
					if (ToOverrideSummary.GeneralLedgerChartAccount entered)
						include AccountSummaryOverrides
					else
					if (ToOverrideSummary.Project entered)
						include ProjectSummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension1 entered)
						include Dimension1SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension2 entered)
						include Dimension2SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension3 entered)
						include Dimension3SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension4 entered)
						include Dimension4SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension5 entered)
						include Dimension5SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension6 entered)
						include Dimension6SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension7 entered)
						include Dimension7SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension8 entered)
						include Dimension8SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension9 entered)
						include Dimension9SummaryOverrides
					else
					if (ToOverrideSummary.FinanceDimension10 entered)
						include Dimension10SummaryOverrides
					else
					if (ToAccountingUnitGroup entered)
						include AccountingUnitGroupOverrides
					else
					if (ToAccountGroup entered)
						include AccountGroupOverrides
					else
					if (ToProjectGroup entered)
						include ProjectGroupOverrides
					else
					if (ToDimension1Group entered)
						include Dimension1GroupOverrides
					else
					if (ToDimension2Group entered)
						include Dimension2GroupOverrides
					else
					if (ToDimension3Group entered)
						include Dimension3GroupOverrides
					else
					if (ToDimension4Group entered)
						include Dimension4GroupOverrides
					else
					if (ToDimension5Group entered)
						include Dimension5GroupOverrides
					else
					if (ToDimension6Group entered)
						include Dimension6GroupOverrides
					else
					if (ToDimension7Group entered)
						include Dimension7GroupOverrides
					else
					if (ToDimension8Group entered)
						include Dimension8GroupOverrides
					else
					if (ToDimension9Group entered)
						include Dimension9GroupOverrides
					else
					if (ToDimension10Group entered)
						include Dimension10GroupOverrides
			if (AllocationSplitCallBack not entered)		




				if (ToOverrideCount != instance count of ToTempOverridesRel)
					invoke SendMismatchNotification
						invoked.PrmOverrideCount 		= ToOverrideCount 
						invoked.PrmTempOverrideCount 	= instance count of ToTempOverridesRel

			if (IncludeLineWeight)
				ToTotalSplitWeight += AllocationLineWeightRel.ToWeight
			if (UsingCapacityCalculation)
				if (TemporaryTotalSplitWeight entered and AllocationSplitCallBack.IsUsingCapacityVolume)
					ToTotalSplitWeight = TemporaryTotalSplitWeight
			include CommitResetCounter	
		
		UpdateOverrideStructures
			if (AccountingUnitStructure changed)
				if (TransientOnline not entered   
				and OverrideAccountingUnitStructure entered 
				and AccountingUnitStructure not entered)
					AccountingUnitStructure = OverrideAccountingUnitStructure

				if (AccountingUnitStructure not entered)
					initialize OverrideAccountingUnitStructure
					AccountingUnitStructure			= DefaultAccountingUnitStructure
				else
				if ((OverrideAccountingUnitStructure not entered or AccountingUnitStructure entered)
				and  AccountingUnitStructure != DefaultAccountingUnitStructure)
					OverrideAccountingUnitStructure	= AccountingUnitStructure
			if (AccountStructure changed)
				if (TransientOnline not entered
				and OverrideAccountStructure entered 
				and AccountStructure not entered)
					AccountStructure	= OverrideAccountStructure

				if (AccountStructure not entered)
					initialize OverrideAccountStructure
					AccountStructure				= DefaultAccountStructure
				else
				if ((OverrideAccountStructure not entered or AccountStructure entered)
				and  AccountStructure != DefaultAccountStructure)
					OverrideAccountStructure		= AccountStructure
			if (ProjectStructure changed)
				if (TransientOnline not entered
				and OverrideProjectStructure entered 
				and ProjectStructure not entered)
					ProjectStructure	= OverrideProjectStructure

				if (ProjectStructure not entered)
					initialize OverrideProjectStructure
					ProjectStructure				= DefaultProjectStructure
				else
				if ((OverrideProjectStructure not entered or ProjectStructure entered)
				and  ProjectStructure != DefaultProjectStructure)
					OverrideProjectStructure		= ProjectStructure
			if (FinanceDimension1Structure changed)
				if (TransientOnline not entered
				and OverrideDimension1Structure entered 
				and FinanceDimension1Structure not entered)
					FinanceDimension1Structure	= OverrideDimension1Structure

				if (FinanceDimension1Structure not entered)
					initialize OverrideDimension1Structure
					FinanceDimension1Structure		= DefaultFinanceDimension1Structure
				else
				if ((OverrideDimension1Structure not entered or FinanceDimension1Structure entered)
				and  FinanceDimension1Structure != DefaultFinanceDimension1Structure)
					OverrideDimension1Structure		= FinanceDimension1Structure
			if (FinanceDimension2Structure changed)
				if (TransientOnline not entered
				and OverrideDimension2Structure entered 
				and FinanceDimension2Structure not entered)
					FinanceDimension2Structure	= OverrideDimension2Structure

				if (FinanceDimension2Structure not entered)
					initialize OverrideDimension2Structure
					FinanceDimension2Structure		= DefaultFinanceDimension2Structure
				else
				if ((OverrideDimension2Structure not entered or FinanceDimension2Structure entered)
				and  FinanceDimension2Structure != DefaultFinanceDimension2Structure)
					OverrideDimension2Structure		= FinanceDimension2Structure
			if (FinanceDimension3Structure changed)
				if (TransientOnline not entered
				and OverrideDimension3Structure entered 
				and FinanceDimension3Structure not entered)
					FinanceDimension3Structure	= OverrideDimension3Structure

				if (FinanceDimension3Structure not entered)
					initialize OverrideDimension3Structure
					FinanceDimension3Structure		= DefaultFinanceDimension3Structure
				else
				if ((OverrideDimension3Structure not entered or FinanceDimension3Structure entered)
				and  FinanceDimension3Structure != DefaultFinanceDimension3Structure)
					OverrideDimension3Structure		= FinanceDimension3Structure
			if (FinanceDimension4Structure changed)
				if (TransientOnline not entered
				and OverrideDimension4Structure entered 
				and FinanceDimension4Structure not entered)
					FinanceDimension4Structure	= OverrideDimension4Structure

				if (FinanceDimension4Structure not entered)
					initialize OverrideDimension4Structure
					FinanceDimension4Structure		= DefaultFinanceDimension4Structure
				else
				if ((OverrideDimension4Structure not entered or FinanceDimension4Structure entered)
				and  FinanceDimension4Structure != DefaultFinanceDimension4Structure)
					OverrideDimension4Structure		= FinanceDimension4Structure
			if (FinanceDimension5Structure changed)
				if (TransientOnline not entered
				and OverrideDimension5Structure entered 
				and FinanceDimension5Structure not entered)
					FinanceDimension5Structure	= OverrideDimension5Structure

				if (FinanceDimension5Structure not entered)
					initialize OverrideDimension5Structure
					FinanceDimension5Structure		= DefaultFinanceDimension5Structure
				else
				if ((OverrideDimension5Structure not entered or FinanceDimension5Structure entered)
				and  FinanceDimension5Structure != DefaultFinanceDimension5Structure)
					OverrideDimension5Structure		= FinanceDimension5Structure
			if (FinanceDimension6Structure changed)
				if (TransientOnline not entered
				and OverrideDimension6Structure entered 
				and FinanceDimension6Structure not entered)
					FinanceDimension6Structure	= OverrideDimension6Structure

				if (FinanceDimension6Structure not entered)
					initialize OverrideDimension6Structure
					FinanceDimension6Structure		= DefaultFinanceDimension6Structure
				else
				if ((OverrideDimension6Structure not entered or FinanceDimension6Structure entered)
				and  FinanceDimension6Structure != DefaultFinanceDimension6Structure)
					OverrideDimension6Structure		= FinanceDimension6Structure
			if (FinanceDimension7Structure changed)
				if (TransientOnline not entered
				and OverrideDimension7Structure entered 
				and FinanceDimension7Structure not entered)
					FinanceDimension7Structure	= OverrideDimension7Structure

				if (FinanceDimension7Structure not entered)
					initialize OverrideDimension7Structure
					FinanceDimension7Structure		= DefaultFinanceDimension7Structure
				else
				if ((OverrideDimension7Structure not entered or FinanceDimension7Structure entered)
				and  FinanceDimension7Structure != DefaultFinanceDimension7Structure)
					OverrideDimension7Structure		= FinanceDimension7Structure
			if (FinanceDimension8Structure changed)
				if (TransientOnline not entered
				and OverrideDimension8Structure entered 
				and FinanceDimension8Structure not entered)
					FinanceDimension8Structure	= OverrideDimension8Structure

				if (FinanceDimension8Structure not entered)
					initialize OverrideDimension8Structure
					FinanceDimension8Structure		= DefaultFinanceDimension8Structure
				else
				if ((OverrideDimension8Structure not entered or FinanceDimension8Structure entered)
				and  FinanceDimension8Structure != DefaultFinanceDimension8Structure)
					OverrideDimension8Structure		= FinanceDimension8Structure
			if (FinanceDimension9Structure changed)
				if (TransientOnline not entered
				and OverrideDimension9Structure entered 
				and FinanceDimension9Structure not entered)
					FinanceDimension9Structure	= OverrideDimension9Structure

				if (FinanceDimension9Structure not entered)
					initialize OverrideDimension9Structure
					FinanceDimension9Structure		= DefaultFinanceDimension9Structure
				else
				if ((OverrideDimension9Structure not entered or FinanceDimension9Structure entered)
				and  FinanceDimension9Structure != DefaultFinanceDimension9Structure)
					OverrideDimension9Structure		= FinanceDimension9Structure
			if (FinanceDimension10Structure changed)
				if (TransientOnline not entered
				and OverrideDimension10Structure entered 
				and FinanceDimension10Structure not entered)
					FinanceDimension10Structure	= OverrideDimension10Structure

				if (FinanceDimension10Structure not entered)
					initialize OverrideDimension10Structure
					FinanceDimension10Structure		= DefaultFinanceDimension10Structure
				else
				if ((OverrideDimension10Structure not entered or FinanceDimension10Structure entered)
				and  FinanceDimension10Structure != DefaultFinanceDimension10Structure)
					OverrideDimension10Structure	= FinanceDimension10Structure

		ComputeEachAccountingEntityOverride
			display "ComputeEachAccountingEntityOverride"
			OverrideAccountingEntity		= each.AccountingEntity
			display "OverrideAccountingEntity:<OverrideAccountingEntity>"
			display "IsCurrentFrom:<IsCurrentFrom>"
			if (IsCurrentFrom)
				Direction					= 0
				if (FromAccountingEntityWeightCompute entered)
					Weight				= FromAccountingEntityWeightCompute compute value for OverrideAccountingEntity
				else
					Weight					= 1.0
				if (Weight < 0 and not AllowNegativeWeights)
					Weight					= -1.0*Weight
				if (Weight entered)
					FromTotalSplitWeight 	+= Weight
					FromOverrideCount		+= 1
			else
				Direction					= 1
				display "ToAccountingEntityWeightCompute:<ToAccountingEntityWeightCompute>"
				if (ToAccountingEntityWeightCompute entered)
					Weight				= ToAccountingEntityWeightCompute compute value for OverrideAccountingEntity
					display "Weight:<Weight>"
				else
					Weight					= 1.0
				if (Weight < 0 and not AllowNegativeWeights)
					Weight					= -1.0*Weight
				if (Weight entered)
					ToTotalSplitWeight	 	+= Weight
					ToOverrideCount			+= 1
			if (Weight entered)
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= Weight
					invoked.AccountingEntity	= OverrideAccountingEntity
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		
		AccountingEntityOverrides
			if (IsCurrentFrom)
				AccountingEntityGroup	= FromAccountingEntityGroup
			else
				AccountingEntityGroup	= ToAccountingEntityGroup
			if (UseOverrideForCompute)
				for each ToAllOverridesRel
					include ComputeEachAccountingEntityOverride
					include CheckCommitTransaction
			else
				for each AccountingEntityGroupRel
					include ComputeEachAccountingEntityOverride
					include CheckCommitTransaction
			
				
		AccountingUnitGroupOverrides
			if (IsCurrentFrom)
				AccountingUnitGroup	= FromAccountingUnitGroup
			else
				AccountingUnitGroup	= ToAccountingUnitGroup
			for each AccountingUnitGroupRel
				if (each.Active)



					each.AccountingUnit.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideAccountingEntity		= each.AccountingEntity
					OverrideAccountingUnit			= each.AccountingUnit
					if (IsCurrentFrom)
						Direction					= 0
						if (FromAccountingUnitWeightCompute entered)
							Weight				= FromAccountingUnitWeightCompute compute value for OverrideAccountingUnit
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToAccountingUnitWeightCompute entered)
							Weight				= ToAccountingUnitWeightCompute compute value for OverrideAccountingUnit
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.AccountingEntity	= OverrideAccountingEntity
							invoked.AccountingUnit		= OverrideAccountingUnit
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction

		AccountGroupOverrides
			if (IsCurrentFrom)
				AccountGroup	= FromAccountGroup
			else
				AccountGroup	= ToAccountGroup
			for each AccountGroupRel
				if (each.Active)
					each.GeneralLedgerChartAccount.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideAccount					= each.GeneralLedgerChartAccount
					if (IsCurrentFrom)
						Direction					= 0
						if (FromAccountWeightCompute entered)
							Weight				= FromAccountWeightCompute compute value for OverrideAccount
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToAccountWeightCompute entered)
							Weight				= ToAccountWeightCompute compute value for OverrideAccount
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.GeneralLedgerChartAccount	= OverrideAccount
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		ProjectGroupOverrides
			if (IsCurrentFrom)
				ProjectGroup	= FromProjectGroup
			else
				ProjectGroup	= ToProjectGroup
			for each ProjectGroupRel
				if (each.Active)
					each.Project.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideProject					= each.Project
					if (IsCurrentFrom)
						Direction					= 0
						if (FromProjectWeightCompute entered)
							Weight				= FromProjectWeightCompute compute value for OverrideProject
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1

					else
						Direction					= 1
						if (ToProjectWeightCompute entered)
							Weight				= ToProjectWeightCompute compute value for OverrideProject
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1

					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.Project				= OverrideProject
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension1GroupOverrides
			if (IsCurrentFrom)
				Dimension1Group	= FromDimension1Group
			else
				Dimension1Group	= ToDimension1Group
			for each Dimension1GroupRel
				if (each.Active)
					each.FinanceDimension1.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension1										= each.FinanceDimension1
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension1WeightCompute entered)
							Weight				= FromDimension1WeightCompute compute value for OverrideDimension1
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension1WeightCompute entered)
							Weight				= ToDimension1WeightCompute compute value for OverrideDimension1
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension1	= OverrideDimension1
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension2GroupOverrides
			if (IsCurrentFrom)
				Dimension2Group	= FromDimension2Group
			else
				Dimension2Group	= ToDimension2Group
			for each Dimension2GroupRel
				if (each.Active)
					each.FinanceDimension2.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension2										= each.FinanceDimension2
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension2WeightCompute entered)
							Weight				= FromDimension2WeightCompute compute value for OverrideDimension2
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1

					else
						Direction					= 1
						if (ToDimension2WeightCompute entered)
							Weight				= ToDimension2WeightCompute compute value for OverrideDimension2
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension2	= OverrideDimension2
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension3GroupOverrides
			if (IsCurrentFrom)
				Dimension3Group	= FromDimension3Group
			else
				Dimension3Group	= ToDimension3Group
			for each Dimension3GroupRel
				if (each.Active)
					each.FinanceDimension3.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension3										= each.FinanceDimension3
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension3WeightCompute entered)
							Weight				= FromDimension3WeightCompute compute value for OverrideDimension3
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension3WeightCompute entered)
							Weight				= ToDimension3WeightCompute compute value for OverrideDimension3
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension3	= OverrideDimension3
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension4GroupOverrides
			if (IsCurrentFrom)
				Dimension4Group	= FromDimension4Group
			else
				Dimension4Group	= ToDimension4Group
			for each Dimension4GroupRel
				if (each.Active)
					each.FinanceDimension4.AllocationContext.SourceDetail	= AllocationContext.SourceDetail	
					OverrideDimension4										= each.FinanceDimension4
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension4WeightCompute entered)
							Weight				= FromDimension4WeightCompute compute value for OverrideDimension4
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension4WeightCompute entered)
							Weight				= ToDimension4WeightCompute compute value for OverrideDimension4
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension4	= OverrideDimension4
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension5GroupOverrides
			if (IsCurrentFrom)
				Dimension5Group	= FromDimension5Group
			else
				Dimension5Group	= ToDimension5Group
			for each Dimension5GroupRel
				if (each.Active)
					each.FinanceDimension5.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension5										= each.FinanceDimension5
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension5WeightCompute entered)
							Weight				= FromDimension5WeightCompute compute value for OverrideDimension5
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension5WeightCompute entered)
							Weight				= ToDimension5WeightCompute compute value for OverrideDimension5
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension5	= OverrideDimension5
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension6GroupOverrides
			if (IsCurrentFrom)
				Dimension6Group	= FromDimension6Group
			else
				Dimension6Group	= ToDimension6Group
			for each Dimension6GroupRel
				if (each.Active)
					each.FinanceDimension6.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension6										= each.FinanceDimension6
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension6WeightCompute entered)
							Weight				= FromDimension6WeightCompute compute value for OverrideDimension6
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension6WeightCompute entered)
							Weight				= ToDimension6WeightCompute compute value for OverrideDimension6
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension6	= OverrideDimension6
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension7GroupOverrides
			if (IsCurrentFrom)
				Dimension7Group	= FromDimension7Group
			else
				Dimension7Group	= ToDimension7Group
			for each Dimension7GroupRel
				if (each.Active)
					each.FinanceDimension7.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension7										= each.FinanceDimension7
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension7WeightCompute entered)
							Weight				= FromDimension7WeightCompute compute value for OverrideDimension7
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension7WeightCompute entered)
							Weight				= ToDimension7WeightCompute compute value for OverrideDimension7
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension7	= OverrideDimension7
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension8GroupOverrides
			if (IsCurrentFrom)
				Dimension8Group	= FromDimension8Group
			else
				Dimension8Group	= ToDimension8Group
			for each Dimension8GroupRel
				if (each.Active)
					each.FinanceDimension8.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension8										= each.FinanceDimension8
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension8WeightCompute entered)
							Weight				= FromDimension8WeightCompute compute value for OverrideDimension8
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension8WeightCompute entered)
							Weight				= ToDimension8WeightCompute compute value for OverrideDimension8
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension8	= OverrideDimension8
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension9GroupOverrides
			if (IsCurrentFrom)
				Dimension9Group	= FromDimension9Group
			else
				Dimension9Group	= ToDimension9Group
			for each Dimension9GroupRel
				if (each.Active)
					each.FinanceDimension9.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension9										= each.FinanceDimension9
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension9WeightCompute entered)
							Weight				= FromDimension9WeightCompute compute value for OverrideDimension9
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension9WeightCompute entered)
							Weight				= ToDimension9WeightCompute compute value for OverrideDimension9
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension9	= OverrideDimension9
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension10GroupOverrides
			if (IsCurrentFrom)
				Dimension10Group	= FromDimension10Group
			else
				Dimension10Group	= ToDimension10Group
			for each Dimension10GroupRel
				if (each.Active)
					each.FinanceDimension10.AllocationContext.SourceDetail	= AllocationContext.SourceDetail
					OverrideDimension10										= each.FinanceDimension10
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension10WeightCompute entered)
							Weight				= FromDimension10WeightCompute compute value for OverrideDimension10
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToDimension10WeightCompute entered)
							Weight				= ToDimension10WeightCompute compute value for OverrideDimension10
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension10	= OverrideDimension10
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction

		AccountingUnitSummaryOverrides
			if (IsCurrentFrom)
				OverrideAccountingEntity	= FromOverrideSummary.AccountingEntity
				OverrideAccountingUnit		= FromOverrideSummary.AccountingUnit
			else
				OverrideAccountingEntity	= ToOverrideSummary.AccountingEntity
				OverrideAccountingUnit		= ToOverrideSummary.AccountingUnit
			for each AccountingUnitOverrideShadowRel
				if (each.AccountingUnit.Active)
					CurrentAddress.AccountingEntity	= OverrideAccountingEntity
					CurrentAddress.AccountingUnit	= each.AccountingUnit
					if (IsCurrentFrom)
						Direction					= 0
						if (FromAccountingUnitWeightCompute entered)
							Weight				= FromAccountingUnitWeightCompute compute value for CurrentAddress.AccountingUnit
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.AccountingUnit
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToAccountingUnitWeightCompute entered)
							Weight				= ToAccountingUnitWeightCompute compute value for CurrentAddress.AccountingUnit
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.AccountingEntity	= OverrideAccountingEntity
							invoked.AccountingUnit		= each.AccountingUnit
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.AccountingEntity	= OverrideAccountingEntity
					invoked.AccountingUnit		= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource

		AccountSummaryOverrides
			if (IsCurrentFrom)
				OverrideAccount		= FromOverrideSummary.GeneralLedgerChartAccount
			else
				OverrideAccount		= ToOverrideSummary.GeneralLedgerChartAccount
			for each AccountOverrideShadowRel
				if (each.GeneralLedgerChartAccount.Active)
					CurrentAddress.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
					if (IsCurrentFrom)
						Direction					= 0
						if (FromAccountWeightCompute entered)
							Weight				= FromAccountWeightCompute compute value for CurrentAddress.GeneralLedgerChartAccount
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToAccountWeightCompute entered)
							Weight				= ToAccountWeightCompute compute value for CurrentAddress.GeneralLedgerChartAccount
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		ProjectSummaryOverrides
			if (IsCurrentFrom)
				OverrideProject		= FromOverrideSummary.Project
			else
				OverrideProject		= ToOverrideSummary.Project
			for each ProjectOverrideShadowRel
				if (each.Project.Active)
					CurrentAddress.Project	= each.Project
					if (IsCurrentFrom)
						Direction					= 0
						if (FromProjectWeightCompute entered)
							Weight				= FromProjectWeightCompute compute value for CurrentAddress.Project
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (ToProjectWeightCompute entered)
							Weight				= ToProjectWeightCompute compute value for CurrentAddress.Project
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							ToTotalSplitWeight	 	+= Weight
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.Project				= each.Project
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
		Dimension1SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension1		= FromOverrideSummary.FinanceDimension1
			else
				OverrideDimension1		= ToOverrideSummary.FinanceDimension1
			for each Dimension1OverrideShadowRel
				if (each.FinanceDimension1.Active)
					CurrentAddress.FinanceDimension1	= each.FinanceDimension1
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension1WeightCompute entered)
							Weight				= FromDimension1WeightCompute compute value for CurrentAddress.FinanceDimension1
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension1
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension1WeightCompute entered)
							Weight				= ToDimension1WeightCompute compute value for CurrentAddress.FinanceDimension1
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension1	= each.FinanceDimension1
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension1	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension2SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension2		= FromOverrideSummary.FinanceDimension2
			else
				OverrideDimension2		= ToOverrideSummary.FinanceDimension2
			for each Dimension2OverrideShadowRel
				if (each.FinanceDimension2.Active)
					CurrentAddress.FinanceDimension2	= each.FinanceDimension2
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension2WeightCompute entered)
							Weight				= FromDimension2WeightCompute compute value for CurrentAddress.FinanceDimension2
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension2
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension2WeightCompute entered)
							Weight				= ToDimension2WeightCompute compute value for CurrentAddress.FinanceDimension2
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension2	= each.FinanceDimension2
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension2	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension3SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension3		= FromOverrideSummary.FinanceDimension3
			else
				OverrideDimension3		= ToOverrideSummary.FinanceDimension3
			for each Dimension3OverrideShadowRel
				if (each.FinanceDimension3.Active)
					CurrentAddress.FinanceDimension3	= each.FinanceDimension3
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension3WeightCompute entered)
							Weight				= FromDimension3WeightCompute compute value for CurrentAddress.FinanceDimension3
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension3
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension3WeightCompute entered)
							Weight				= ToDimension3WeightCompute compute value for CurrentAddress.FinanceDimension3
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension3	= each.FinanceDimension3
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension3	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension4SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension4		= FromOverrideSummary.FinanceDimension4
			else
				OverrideDimension4		= ToOverrideSummary.FinanceDimension4
			for each Dimension4OverrideShadowRel
				if (each.FinanceDimension4.Active)
					CurrentAddress.FinanceDimension4	= each.FinanceDimension4
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension4WeightCompute entered)
							Weight				= FromDimension4WeightCompute compute value for CurrentAddress.FinanceDimension4
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension4
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension4WeightCompute entered)
							Weight				= ToDimension4WeightCompute compute value for CurrentAddress.FinanceDimension4
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension4	= each.FinanceDimension4
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension4	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension5SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension5		= FromOverrideSummary.FinanceDimension5
			else
				OverrideDimension5		= ToOverrideSummary.FinanceDimension5
			for each Dimension5OverrideShadowRel
				if (each.FinanceDimension5.Active)
					CurrentAddress.FinanceDimension5	= each.FinanceDimension5
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension5WeightCompute entered)
							Weight				= FromDimension5WeightCompute compute value for CurrentAddress.FinanceDimension5
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension5
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension5WeightCompute entered)
							Weight				= ToDimension5WeightCompute compute value for CurrentAddress.FinanceDimension5
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension5	= each.FinanceDimension5
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension5	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension6SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension6		= FromOverrideSummary.FinanceDimension6
			else
				OverrideDimension6		= ToOverrideSummary.FinanceDimension6
			for each Dimension6OverrideShadowRel
				if (each.FinanceDimension6.Active)
					CurrentAddress.FinanceDimension6	= each.FinanceDimension6
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension6WeightCompute entered)
							Weight				= FromDimension6WeightCompute compute value for CurrentAddress.FinanceDimension6
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension6
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension6WeightCompute entered)
							Weight				= ToDimension6WeightCompute compute value for CurrentAddress.FinanceDimension6
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension6	= each.FinanceDimension6
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension6	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension7SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension7		= FromOverrideSummary.FinanceDimension7
			else
				OverrideDimension7		= ToOverrideSummary.FinanceDimension7
			for each Dimension7OverrideShadowRel
				if (each.FinanceDimension7.Active)
					CurrentAddress.FinanceDimension7	= each.FinanceDimension7
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension7WeightCompute entered)
							Weight				= FromDimension7WeightCompute compute value for CurrentAddress.FinanceDimension7
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension7
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension7WeightCompute entered)
							Weight				= ToDimension7WeightCompute compute value for CurrentAddress.FinanceDimension7
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension7	= each.FinanceDimension7
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension7	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension8SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension8		= FromOverrideSummary.FinanceDimension8
			else
				OverrideDimension8		= ToOverrideSummary.FinanceDimension8
			for each Dimension8OverrideShadowRel
				if (each.FinanceDimension8.Active)
					CurrentAddress.FinanceDimension8	= each.FinanceDimension8
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension8WeightCompute entered)
							Weight				= FromDimension8WeightCompute compute value for CurrentAddress.FinanceDimension8
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension8
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension8WeightCompute entered)
							Weight				= ToDimension8WeightCompute compute value for CurrentAddress.FinanceDimension8
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension8	= each.FinanceDimension8
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension8	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension9SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension9		= FromOverrideSummary.FinanceDimension9
			else
				OverrideDimension9		= ToOverrideSummary.FinanceDimension9
			for each Dimension9OverrideShadowRel
				if (each.FinanceDimension9.Active)
					CurrentAddress.FinanceDimension9	= each.FinanceDimension9
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension9WeightCompute entered)
							Weight				= FromDimension9WeightCompute compute value for CurrentAddress.FinanceDimension9
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension9
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension9WeightCompute entered)
							Weight				= ToDimension9WeightCompute compute value for CurrentAddress.FinanceDimension9
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension9	= each.FinanceDimension9
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension9	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource
		Dimension10SummaryOverrides
			if (IsCurrentFrom)
				OverrideDimension10		= FromOverrideSummary.FinanceDimension10
			else
				OverrideDimension10		= ToOverrideSummary.FinanceDimension10
			for each Dimension10OverrideShadowRel
				if (each.FinanceDimension10.Active)
					CurrentAddress.FinanceDimension10	= each.FinanceDimension10
					if (IsCurrentFrom)
						Direction					= 0
						if (FromDimension10WeightCompute entered)
							Weight				= FromDimension10WeightCompute compute value for CurrentAddress.FinanceDimension10
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						if (Weight entered)
							FromTotalSplitWeight 	+= Weight
							FromOverrideCount		+= 1
					else
						Direction					= 1
						if (AllocationSplitCallBack entered)
							
							AllocationSplitCallBack.StructureRow				= ToDimensionWithMultipleOverrides
							include SetCallBackSource
							include SetTempCapacityWeight
							AllocationSplitCallBack.Target						= CurrentAddress.FinanceDimension10
							Weight												= AllocationSplitCallBack.ActualWeight
						else
						if (ToDimension10WeightCompute entered)
							Weight				= ToDimension10WeightCompute compute value for CurrentAddress.FinanceDimension10
						else
							Weight					= 1.0
						if (Weight < 0 and not AllowNegativeWeights)
							Weight					= -1.0*Weight
						ToTotalSplitWeight	 		+= Weight
						if (Weight entered)
							ToOverrideCount			+= 1
					if (Weight entered)
						invoke Create AllocationLineTempOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl	= AllocationControl
							invoked.Allocation			= Allocation
							invoked.AllocationLine		= AllocationLine
							invoked.AllocationRun		= AllocationRunRel.AllocationRun
							invoked.Direction			= Direction
							invoked.WeightDecimal		= Weight
							invoked.FinanceDimension10	= each.FinanceDimension10
							invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
							include TempOverrideSource
				include CheckCommitTransaction
			if (UsingCapacityCalculation
			and AllocationSplitCallBack entered
			and !IsCurrentFrom
			and AllocationSplitCallBack.IsUsingCapacityVolume)
				ToOverrideCount += 1
				Counter += 1
				invoke Create AllocationLineTempOverride
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl	= AllocationControl
					invoked.Allocation			= Allocation
					invoked.AllocationLine		= AllocationLine
					invoked.AllocationRun		= AllocationRunRel.AllocationRun
					invoked.Direction			= Direction
					invoked.WeightDecimal		= 0
					invoked.FinanceDimension10	= AllocationSplitCallBack.Spillover
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					include TempOverrideSource

		CheckForErrorsInCurrent
			initialize ErrorMessage
			
			if (not AllocationSourceSystem.TrueCost
			and not first CurrentEntityLedgerPeriodRel.OpenPeriod)
				ErrorMessage = OpenPeriodErrorMessage

		InitializeBypassFields
			initialize LocalBypassDetailCreation
			initialize LocalSkipCreateButUpdateTransaction
			initialize LocalUpdateTransactionByOverthrownAmount

		InvokedUpdateLastTransaction
			
			invoked.PrmAmount			= (SplitCurrentValue * DirectionFactor * AmountMultiplier)
			if (not AllocateUnits and AllocateAllCurrencyAmounts)
				if (CurrentCurrencyAmount.AccountingEntity.FunctionalCurrency = LocalToFunctionalCurrency)
					invoked.PrmReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.FunctionalAmount * DirectionFactor * AmountMultiplier
				if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency = LocalToAlternateCurrency)						
					invoked.PrmReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount  * DirectionFactor * AmountMultiplier
				if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency2 = LocalToAlternateCurrency2)
					invoked.PrmReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount2 * DirectionFactor * AmountMultiplier
				if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency3 = LocalToAlternateCurrency3)
					invoked.PrmReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount3 * DirectionFactor * AmountMultiplier
				
				invoked.PrmReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ProjectAmount    * DirectionFactor * AmountMultiplier
				invoked.PrmReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount1    * DirectionFactor * AmountMultiplier
				invoked.PrmReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount2    * DirectionFactor * AmountMultiplier
				invoked.PrmReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount3    * DirectionFactor * AmountMultiplier
				invoked.PrmReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount4    * DirectionFactor * AmountMultiplier
				invoked.PrmReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount5    * DirectionFactor * AmountMultiplier

		AllocationTransactionDetailCodeBlock
			invoked.FinanceCodeBlock.ToAccountingEntity			= CurrentAddress.AccountingEntity
			invoked.FinanceCodeBlock.AccountingUnit				= CurrentAddress.AccountingUnit
			invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= CurrentAddress.GeneralLedgerChartAccount
			invoked.FinanceCodeBlock.Project					= CurrentAddress.Project
			invoked.FinanceCodeBlock.FinanceDimension1			= CurrentAddress.FinanceDimension1
			invoked.FinanceCodeBlock.FinanceDimension2			= CurrentAddress.FinanceDimension2
			invoked.FinanceCodeBlock.FinanceDimension3			= CurrentAddress.FinanceDimension3
			invoked.FinanceCodeBlock.FinanceDimension4			= CurrentAddress.FinanceDimension4
			invoked.FinanceCodeBlock.FinanceDimension5			= CurrentAddress.FinanceDimension5
			invoked.FinanceCodeBlock.FinanceDimension6			= CurrentAddress.FinanceDimension6
			invoked.FinanceCodeBlock.FinanceDimension7			= CurrentAddress.FinanceDimension7
			invoked.FinanceCodeBlock.FinanceDimension8			= CurrentAddress.FinanceDimension8
			invoked.FinanceCodeBlock.FinanceDimension9			= CurrentAddress.FinanceDimension9
			invoked.FinanceCodeBlock.FinanceDimension10			= CurrentAddress.FinanceDimension10
			invoked.FinanceCodeBlock.Ledger						= LocalTransactionLedger

		AllocationTransactionDetailFields
			invoked.AllocationTransactionDetail					= TransactionCounter
			invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
			invoked.AllocationSourceSystem  					= AllocationSourceSystem
			invoked.AllocationControl							= AllocationControl
			invoked.Allocation									= Allocation
			invoked.AllocationLine								= AllocationLine
			invoked.AllocationRun								= AllocationRunRel.AllocationRun
			invoked.AllocationPeriod							= AllocationPeriod
			invoked.AllocationLineSourceValue					= LocalAllocationLineSourceValue
			invoked.SourcePeriod								= CurrentPeriod
			if (IsCurrentFrom)
				invoked.Direction								= 0
			else
				invoked.Direction								= 1

			invoked.AccountingEntity							= FromEntity
			invoked.PostingDate									= PostingDate
			invoked.GeneralLedgerEvent							= Allocation.GeneralLedgerEvent


			invoked.AllocationStep								= AllocationStepBaseRel.AllocationStep
			invoked.System										= DerivedSystem
			invoked.JournalizeGroup								= JournalizeGroup
			invoked.TransactionDate								= TransactionDate
			invoked.AutoReverse									= DerivedAutoReverse
			invoked.FromPreviousStep 							= AllocatingPreviousSteps
			if (AllocationControl.CurrencyTable entered)
				invoked.CurrencyTable							= AllocationControl.CurrencyTable
			else
				invoked.CurrencyTable							= FinanceEnterpriseGroup.CurrencyTable
			if (AllocateUnits)
				invoked.CurrencyCode							= FromEntityRel.FunctionalCurrency
				if (IsCurrentSplit)
					invoked.UnitsAmount							= SplitCurrentValue * DirectionFactor * AmountMultiplier
				else
					if (UseConsolidated)
						invoked.UnitsAmount						= ConsolidatedValue * AmountMultiplier
					else
						invoked.UnitsAmount						= UseValue * DirectionFactor * AmountMultiplier
			else
				invoked.CurrencyCode							= TargetCurrency
				if (IsCurrentSplit)
					invoked.TransactionAmount					= SplitCurrentValue * DirectionFactor * AmountMultiplier
					if (AllocateAllCurrencyAmounts)
						if (CurrentCurrencyAmount.AccountingEntity.FunctionalCurrency = LocalToFunctionalCurrency)
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.FunctionalAmount * DirectionFactor * AmountMultiplier
						if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency = LocalToAlternateCurrency)						
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount  * DirectionFactor * AmountMultiplier
						if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency2 = LocalToAlternateCurrency2)
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount2 * DirectionFactor * AmountMultiplier
						if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency3 = LocalToAlternateCurrency3)
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.AlternateAmount3 * DirectionFactor * AmountMultiplier
						
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ProjectAmount    * DirectionFactor * AmountMultiplier
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount1    * DirectionFactor * AmountMultiplier
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount2    * DirectionFactor * AmountMultiplier
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount3    * DirectionFactor * AmountMultiplier
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount4    * DirectionFactor * AmountMultiplier
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= SplitCurrentCurrencyAmount.ReportAmount5    * DirectionFactor	* AmountMultiplier

				else
					if (UseConsolidated)
						invoked.TransactionAmount				= ConsolidatedValue * AmountMultiplier
						if (AllocateAllCurrencyAmounts)
							if (CurrentCurrencyAmount.AccountingEntity.FunctionalCurrency = LocalToFunctionalCurrency)
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.FunctionalAmount  * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency = LocalToAlternateCurrency)						
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.AlternateAmount   * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency2 = LocalToAlternateCurrency2)
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.AlternateAmount2  * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency3 = LocalToAlternateCurrency3)
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.AlternateAmount3  * AmountMultiplier
							invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ProjectAmount     * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ReportAmount1     * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ReportAmount2     * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ReportAmount3     * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ReportAmount4     * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ConsolidatedCurrencyAmount.ReportAmount5 	   * AmountMultiplier
					else
						invoked.TransactionAmount				= UseValue * DirectionFactor * AmountMultiplier
						if (AllocateAllCurrencyAmounts)
							if (CurrentCurrencyAmount.AccountingEntity.FunctionalCurrency = LocalToFunctionalCurrency)
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= UseValueCurrencyAmount.FunctionalAmount * DirectionFactor * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency = LocalToAlternateCurrency)						
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= UseValueCurrencyAmount.AlternateAmount  * DirectionFactor * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency2 = LocalToAlternateCurrency2)
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= UseValueCurrencyAmount.AlternateAmount2 * DirectionFactor * AmountMultiplier
							if (CurrentCurrencyAmount.AccountingEntity.AlternateCurrency3 = LocalToAlternateCurrency3)
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= UseValueCurrencyAmount.AlternateAmount3 * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= UseValueCurrencyAmount.ProjectAmount    * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= UseValueCurrencyAmount.ReportAmount1    * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= UseValueCurrencyAmount.ReportAmount2    * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= UseValueCurrencyAmount.ReportAmount3    * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= UseValueCurrencyAmount.ReportAmount4    * DirectionFactor * AmountMultiplier
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= UseValueCurrencyAmount.ReportAmount5    * DirectionFactor * AmountMultiplier


		GenerateDetail
			display "GenerateDetail"

			if (not LocalBypassDetailCreation)
				UseConsolidated	= false
				if (IsCurrentFrom)
					DirectionFactor		= -1.0
					if (ConsolidateFrom)
						UseConsolidated	= true
				else
					DirectionFactor = 1.0
					if (ConsolidateTo)
						UseConsolidated	= true
				
				AmountMultiplier = 1

				if (LocalSkipCreateButUpdateTransaction)
					display "SkipCreateButUpdateTransaction"
					include ApplyOverthrownAmountToTransactionDetail

				else
					increment AllocationRunRel.AllocationRun.LastTransaction
					TransactionCounter											= AllocationRunRel.AllocationRun.LastTransaction
					include CheckForErrorsInCurrent
					initialize TransactionError
					initialize TransactionErrorMessage
					if (AllocationControl.Type.Budget)
						if (TargetCurrency not entered)
							TargetCurrency = FromEntityRel.FunctionalCurrency

						if (AllocationRunTargetCurrencyRel not exists)
							invoke Create AllocationRunCurrency
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.AllocationRun			= AllocationRunRel.AllocationRun
								invoked.Currency				= TargetCurrency

					LocalToFunctionalCurrency  = CurrentAddress.AccountingEntity.FunctionalCurrency			
					LocalToAlternateCurrency   = CurrentAddress.AccountingEntity.AlternateCurrency			
					LocalToAlternateCurrency2  = CurrentAddress.AccountingEntity.AlternateCurrency2			
					LocalToAlternateCurrency3  = CurrentAddress.AccountingEntity.AlternateCurrency3			

					if (not AllowInvalidCodeBlock)
						invoke Create AllocationTransactionDetail
							assign result to LocalAllocationTransactionDetail
							resume on error
								TransactionError		= true
								TransactionErrorMessage	= error message
							if (ErrorMessage entered)
								increment AllocationRunRel.AllocationRun.ErrorCount
								invoked.ErrorMessage							= ErrorMessage
							include AllocationTransactionDetailFields
							include AllocationTransactionDetailCodeBlock


					if (TransactionError or AllowInvalidCodeBlock)
					
						initialize LocalBudgetCodeBlock
						if (AllocationControl.Type.Budget
						and AllocationControl.Scenario.ValidateStructureRelations)
							BudgetCodeBlockStructureValidation					= true
							LocalBudgetCodeBlock								= CurrentAddress
							LocalBudgetCodeBlock.LocalBudgetPeriod				= AllocationPeriod
							LocalBudgetCodeBlock.LocalUseErrorMessage			= true
							LocalBudgetCodeBlockResult							= LocalBudgetCodeBlock.EditCodeBlockRelationDetail			
					
						if (ErrorMessage not entered and not AllowInvalidCodeBlock
						or  LocalBudgetCodeBlockResult entered)
							display "TransactionErrorOccurred<TransactionErrorMessage>"
							increment AllocationRunRel.AllocationRun.ErrorCount


						invoke CreateError AllocationTransactionDetail
							assign result to LocalAllocationTransactionDetail
							if (AllocationControl.Type.Budget
							and AllocationControl.Scenario.ValidateStructureRelations)
								invoked.ErrorMessage							= LocalBudgetCodeBlockResult
							else										
								invoked.ErrorMessage							= TransactionErrorMessage				
							include AllocationTransactionDetailFields
							include AllocationTransactionDetailCodeBlock
						

					if (!TransactionError
					and  Allocation.CashOffsetAccount entered)
						AmountMultiplier = -1

						initialize LocalCalculateAllocationFinanceStructure
						LocalCalculateAllocationFinanceStructure.InputFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						LocalCalculateAllocationFinanceStructure.InputAllocationSourceSystem		= AllocationSourceSystem
						LocalCalculateAllocationFinanceStructure.InputAllocationControl				= AllocationControl
						LocalCalculateAllocationFinanceStructure.InputAllocation					= Allocation
						LocalCalculateAllocationFinanceStructure.InputAllocationLine				= AllocationLine
						LocalCalculateAllocationFinanceStructure.InputAllocationRun					= AllocationRunRel.AllocationRun
						LocalCalculateAllocationFinanceStructure.InputAllocationTransactionDetail	= TransactionCounter
						LocalCalculateAllocationFinanceStructure.InputOffsetCashAccount				= Allocation.CashOffsetAccount
						LocalAnswer = LocalCalculateAllocationFinanceStructure.CalculateAllocationFinanceStructure

						increment AllocationRunRel.AllocationRun.LastTransaction
						TransactionCounter											= AllocationRunRel.AllocationRun.LastTransaction

						LocalToFunctionalCurrency  = LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency			
						LocalToAlternateCurrency   = LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock.AccountingEntity.AlternateCurrency			
						LocalToAlternateCurrency2  = LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock.AccountingEntity.AlternateCurrency2			
						LocalToAlternateCurrency3  = LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock.AccountingEntity.AlternateCurrency3		

						invoke Create AllocationTransactionDetail
							assign result to LocalCashOffsetTransactionDetail
							resume on error
								TransactionError		= true
								TransactionErrorMessage	= error message
							if (ErrorMessage entered)
								increment AllocationRunRel.AllocationRun.ErrorCount
								invoked.ErrorMessage							= ErrorMessage
							include AllocationTransactionDetailFields
							invoked.FinanceCodeBlock							= LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock


						if (TransactionError)
							if (ErrorMessage not entered)
								display "TransactionErrorOccurred<TransactionErrorMessage>"
								increment AllocationRunRel.AllocationRun.ErrorCount
							invoke CreateError AllocationTransactionDetail
								assign result to LocalCashOffsetTransactionDetail
								invoked.ErrorMessage								= TransactionErrorMessage
								include AllocationTransactionDetailFields
								invoked.FinanceCodeBlock							= LocalCalculateAllocationFinanceStructure.OutputFinanceCodeBlock

					if (LocalUpdateTransactionByOverthrownAmount)        
						include SetSplitCurrentValueDifference 			 
						include ApplyOverthrownAmountToTransactionDetail 
					else	
					if (IsOverthrownOptionHighestTransaction
					and Counter != TotalOverrideCount) 
						if (AbsoluteSplitCurrentValue >= SplitCurrentHighestValue)
							LocalOverthrownTransactionDetail = LocalAllocationTransactionDetail
							SplitCurrentHighestValue = AbsoluteSplitCurrentValue
							if (Allocation.CashOffsetAccount entered)
								LocalOverthrownCashOffsetDetail	= LocalCashOffsetTransactionDetail

		ApplyOverthrownAmountToTransactionDetail


			if (IsOverthrownOptionHighestTransaction)
				LocalAllocationTransactionDetail = LocalOverthrownTransactionDetail 
				if (Allocation.CashOffsetAccount entered)
					LocalCashOffsetTransactionDetail = LocalOverthrownCashOffsetDetail



			LocalToFunctionalCurrency  = LastAllocationTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency			
			LocalToAlternateCurrency   = LastAllocationTransactionDetailRel.AllocationTransactionDetail.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency			
			LocalToAlternateCurrency2  = LastAllocationTransactionDetailRel.AllocationTransactionDetail.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2			
			LocalToAlternateCurrency3  = LastAllocationTransactionDetailRel.AllocationTransactionDetail.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3		

			invoke UpdateAllAmounts LastAllocationTransactionDetailRel
				include InvokedUpdateLastTransaction

			if (Allocation.CashOffsetAccount entered)
				AmountMultiplier = -1



				LocalToFunctionalCurrency  = LastCashOffsetAllocationTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency			
				LocalToAlternateCurrency   = LastCashOffsetAllocationTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency			
				LocalToAlternateCurrency2  = LastCashOffsetAllocationTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2			
				LocalToAlternateCurrency3  = LastCashOffsetAllocationTransactionDetailRel.FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3

				invoke UpdateAllAmounts LastCashOffsetAllocationTransactionDetailRel
					include InvokedUpdateLastTransaction

		GenerateFrom
			display "GenerateFrom"
			if (IsDetailValueEntered)
				IsCurrentFrom		= true
				CurrentAddress		= From
				include GenerateDetail
		GenerateTo
			display "GenerateTo"
			if (IsDetailValueEntered)
				IsCurrentFrom		= false
				CurrentAddress		= To
				include GenerateDetail
		GetToAddress
			display "GetAddress"
			To = ToOverride
			if (To.AccountingEntity not entered)
				To.AccountingEntity = Source.AccountingEntity
			if (To.AccountingUnit not entered
			and !TreatBlankToAccountingUnitAsEmpty)
				To.AccountingUnit = Source.AccountingUnit
			if (To.Project not entered
			and !TreatBlankToProjectAsEmpty)
				To.Project = Source.Project
			if (To.GeneralLedgerChartAccount not entered
			and !TreatBlankToAccountAsEmpty)
				To.GeneralLedgerChartAccount = Source.GeneralLedgerChartAccount
			if (To.FinanceDimension1 not entered
			and !TreatBlankToDimension1AsEmpty)
				To.FinanceDimension1 = Source.FinanceDimension1
			if (To.FinanceDimension2 not entered
			and !TreatBlankToDimension2AsEmpty)
				To.FinanceDimension2 = Source.FinanceDimension2
			if (To.FinanceDimension3 not entered
			and !TreatBlankToDimension3AsEmpty)
				To.FinanceDimension3 = Source.FinanceDimension3
			if (To.FinanceDimension4 not entered
			and !TreatBlankToDimension4AsEmpty)
				To.FinanceDimension4 = Source.FinanceDimension4
			if (To.FinanceDimension5 not entered
			and !TreatBlankToDimension5AsEmpty)
				To.FinanceDimension5 = Source.FinanceDimension5
			if (To.FinanceDimension6 not entered
			and !TreatBlankToDimension6AsEmpty)
				To.FinanceDimension6 = Source.FinanceDimension6
			if (To.FinanceDimension7 not entered
			and !TreatBlankToDimension7AsEmpty)
				To.FinanceDimension7 = Source.FinanceDimension7
			if (To.FinanceDimension8 not entered
			and !TreatBlankToDimension8AsEmpty)
				To.FinanceDimension8 = Source.FinanceDimension8
			if (To.FinanceDimension9 not entered
			and !TreatBlankToDimension9AsEmpty)
				To.FinanceDimension9 = Source.FinanceDimension9
			if (To.FinanceDimension10 not entered
			and !TreatBlankToDimension10AsEmpty)
				To.FinanceDimension10 = Source.FinanceDimension10
		OverrideToAddress
			if (LocalDebug)		
				display "OverrideToAddress"
				display "ToDimensionWithMultipleOverrides<ToDimensionWithMultipleOverrides.Type>"
				display "ToDimensionWithMultipleOverrides<ToDimensionWithMultipleOverrides2.Type>"
			if (ToOverrideOption.MultipleDimensions)
				if (each.AccountingEntity entered)
					To.AccountingEntity				= each.AccountingEntity

				if (each.TreatBlankAccountingUnitAsEmpty)
					To.AccountingUnit = blank
				else					
				if (each.AccountingUnit entered or TreatBlankAccountingUnitAsEmpty)
					To.AccountingUnit				= each.AccountingUnit

				if (each.TreatBlankAccountAsEmpty)
					To.GeneralLedgerChartAccount = blank
				else 
				if (each.GeneralLedgerChartAccount entered)
					To.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount

				if (each.TreatBlankProjectAsEmpty)
					To.Project = blank
				else
				if (each.Project entered or TreatBlankProjectAsEmpty)
					To.Project						= each.Project

				if (each.TreatBlankDimension1AsEmpty)
					To.FinanceDimension1 = blank
				else
				if (each.FinanceDimension1 entered or TreatBlankDimension1AsEmpty)
					To.FinanceDimension1			= each.FinanceDimension1

				if (each.TreatBlankDimension2AsEmpty)
					To.FinanceDimension2 = blank
				else
				if (each.FinanceDimension2 entered or TreatBlankDimension2AsEmpty)
					To.FinanceDimension2			= each.FinanceDimension2

				if (each.TreatBlankDimension3AsEmpty)
					To.FinanceDimension3 = blank
				else
				if (each.FinanceDimension3 entered or TreatBlankDimension3AsEmpty)
					To.FinanceDimension3			= each.FinanceDimension3

				if (each.TreatBlankDimension4AsEmpty)
					To.FinanceDimension4 = blank
				else
				if (each.FinanceDimension4 entered or TreatBlankDimension4AsEmpty)
					To.FinanceDimension4			= each.FinanceDimension4

				if (each.TreatBlankDimension5AsEmpty)
					To.FinanceDimension5 = blank
				else
				if (each.FinanceDimension5 entered or TreatBlankDimension5AsEmpty)
					To.FinanceDimension5			= each.FinanceDimension5

				if (each.TreatBlankDimension6AsEmpty)
					To.FinanceDimension6 = blank
				else
				if (each.FinanceDimension6 entered or TreatBlankDimension6AsEmpty)
					To.FinanceDimension6			= each.FinanceDimension6

				if (each.TreatBlankDimension7AsEmpty)
					To.FinanceDimension7 = blank
				else
				if (each.FinanceDimension7 entered or TreatBlankDimension7AsEmpty)
					To.FinanceDimension7			= each.FinanceDimension7
				
				if (each.TreatBlankDimension8AsEmpty)
					To.FinanceDimension8 = blank
				else
				if (each.FinanceDimension8 entered or TreatBlankDimension8AsEmpty)
					To.FinanceDimension8			= each.FinanceDimension8

				if (each.TreatBlankDimension9AsEmpty)
					To.FinanceDimension9 = blank
				else
				if (each.FinanceDimension9 entered or TreatBlankDimension9AsEmpty)
					To.FinanceDimension9			= each.FinanceDimension9

				if (each.TreatBlankDimension10AsEmpty)
					To.FinanceDimension10 = blank
				else
				if (each.FinanceDimension10 entered or TreatBlankDimension10AsEmpty)
					To.FinanceDimension10			= each.FinanceDimension10
				
			else
				if (ToDimensionWithMultipleOverrides.Type.AccountingEntity or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.AccountingEntity))
					To.AccountingEntity				= each.AccountingEntity

				if (ToDimensionWithMultipleOverrides.Type.AccountingUnit or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.AccountingUnit))
					To.AccountingEntity				= each.AccountingEntity
					To.AccountingUnit				= each.AccountingUnit

				if (ToDimensionWithMultipleOverrides.Type.Account or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Account))
					To.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount

				if (ToDimensionWithMultipleOverrides.Type.Project or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Project))
					To.Project						= each.Project
					display "EnteredProject"

				if (ToDimensionWithMultipleOverrides.Type.Dimension1 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension1))
					To.FinanceDimension1			= each.FinanceDimension1

				if (ToDimensionWithMultipleOverrides.Type.Dimension2 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension2))
					To.FinanceDimension2			= each.FinanceDimension2

				if (ToDimensionWithMultipleOverrides.Type.Dimension3 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension3))
					To.FinanceDimension3			= each.FinanceDimension3

				if (ToDimensionWithMultipleOverrides.Type.Dimension4 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension4))
					To.FinanceDimension4			= each.FinanceDimension4

				if (ToDimensionWithMultipleOverrides.Type.Dimension5 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension5))
					To.FinanceDimension5			= each.FinanceDimension5

				if (ToDimensionWithMultipleOverrides.Type.Dimension6 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension6))
					To.FinanceDimension6			= each.FinanceDimension6

				if (ToDimensionWithMultipleOverrides.Type.Dimension7 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension7))
					To.FinanceDimension7			= each.FinanceDimension7

				if (ToDimensionWithMultipleOverrides.Type.Dimension8 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension8))
					To.FinanceDimension8			= each.FinanceDimension8

				if (ToDimensionWithMultipleOverrides.Type.Dimension9 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension9))
					To.FinanceDimension9			= each.FinanceDimension9

				if (ToDimensionWithMultipleOverrides.Type.Dimension10 or (ToOverrideOption.TwoDimension and ToDimensionWithMultipleOverrides2.Type.Dimension10))
					To.FinanceDimension10			= each.FinanceDimension10
		GetFromAddress
			display "GetFromAddress"
			From = FromOverride
			if (From.AccountingEntity not entered)
				From.AccountingEntity = Source.AccountingEntity
			if (From.AccountingUnit not entered
			and !TreatBlankFromAccountingUnitAsEmpty)
				From.AccountingUnit = Source.AccountingUnit
			if (From.Project not entered
			and !TreatBlankFromProjectAsEmpty)
				From.Project = Source.Project
			if (From.GeneralLedgerChartAccount not entered
			and !TreatBlankFromAccountAsEmpty)
				From.GeneralLedgerChartAccount = Source.GeneralLedgerChartAccount
			if (From.FinanceDimension1 not entered
			and !TreatBlankFromDimension1AsEmpty)
				From.FinanceDimension1 = Source.FinanceDimension1
			if (From.FinanceDimension2 not entered
			and !TreatBlankFromDimension2AsEmpty)
				From.FinanceDimension2 = Source.FinanceDimension2
			if (From.FinanceDimension3 not entered
			and !TreatBlankFromDimension3AsEmpty)
				From.FinanceDimension3 = Source.FinanceDimension3
			if (From.FinanceDimension4 not entered
			and !TreatBlankFromDimension4AsEmpty)
				From.FinanceDimension4 = Source.FinanceDimension4
			if (From.FinanceDimension5 not entered
			and !TreatBlankFromDimension5AsEmpty)
				From.FinanceDimension5 = Source.FinanceDimension5
			if (From.FinanceDimension6 not entered
			and !TreatBlankFromDimension6AsEmpty)
				From.FinanceDimension6 = Source.FinanceDimension6
			if (From.FinanceDimension7 not entered
			and !TreatBlankFromDimension7AsEmpty)
				From.FinanceDimension7 = Source.FinanceDimension7
			if (From.FinanceDimension8 not entered
			and !TreatBlankFromDimension8AsEmpty)
				From.FinanceDimension8 = Source.FinanceDimension8
			if (From.FinanceDimension9 not entered
			and !TreatBlankFromDimension9AsEmpty)
				From.FinanceDimension9 = Source.FinanceDimension9
			if (From.FinanceDimension10 not entered
			and !TreatBlankFromDimension10AsEmpty)
				From.FinanceDimension10 = Source.FinanceDimension10
		OverrideFromAddress
			
			display "OverrideFromAddress"
			if (FromOverrideOption.MultipleDimensions)
				if (each.AccountingEntity entered)
					From.AccountingEntity			= each.AccountingEntity

				if (each.TreatBlankAccountingUnitAsEmpty)
					From.AccountingUnit = blank
				else					
				if (each.AccountingUnit entered or TreatBlankAccountingUnitAsEmpty)
					From.AccountingUnit				= each.AccountingUnit
				
				if (each.TreatBlankAccountAsEmpty)
					From.GeneralLedgerChartAccount = blank
				else
				if (each.GeneralLedgerChartAccount entered)
					From.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
				
				if (each.TreatBlankProjectAsEmpty)
					From.Project = blank
				else
				if (each.Project entered or TreatBlankProjectAsEmpty)
					From.Project					= each.Project
				
				if (each.TreatBlankDimension1AsEmpty)
					From.FinanceDimension1 = blank
				else
				if (each.FinanceDimension1 entered or TreatBlankDimension1AsEmpty)
					From.FinanceDimension1			= each.FinanceDimension1
				
				if (each.TreatBlankDimension2AsEmpty)
					From.FinanceDimension2 = blank
				else
				if (each.FinanceDimension2 entered or TreatBlankDimension2AsEmpty)
					From.FinanceDimension2			= each.FinanceDimension2
				
				if (each.TreatBlankDimension3AsEmpty)
					From.FinanceDimension3 = blank
				else
				if (each.FinanceDimension3 entered or TreatBlankDimension3AsEmpty)
					From.FinanceDimension3			= each.FinanceDimension3
				
				if (each.TreatBlankDimension4AsEmpty)
					From.FinanceDimension4 = blank
				else
				if (each.FinanceDimension4 entered or TreatBlankDimension4AsEmpty)
					From.FinanceDimension4			= each.FinanceDimension4
				
				if (each.TreatBlankDimension5AsEmpty)
					From.FinanceDimension5 = blank
				else
				if (each.FinanceDimension5 entered or TreatBlankDimension5AsEmpty)
					From.FinanceDimension5			= each.FinanceDimension5
				
				if (each.TreatBlankDimension6AsEmpty)
					From.FinanceDimension6 = blank
				else
				if (each.FinanceDimension6 entered or TreatBlankDimension6AsEmpty)
					From.FinanceDimension6			= each.FinanceDimension6
				
				if (each.TreatBlankDimension7AsEmpty)
					From.FinanceDimension7 = blank
				else
				if (each.FinanceDimension7 entered or TreatBlankDimension7AsEmpty)
					From.FinanceDimension7			= each.FinanceDimension7
				
				if (each.TreatBlankDimension8AsEmpty)
					From.FinanceDimension8 = blank
				else
				if (each.FinanceDimension8 entered or TreatBlankDimension8AsEmpty)
					From.FinanceDimension8			= each.FinanceDimension8
				
				if (each.TreatBlankDimension9AsEmpty)
					From.FinanceDimension9 = blank
				else
				if (each.FinanceDimension9 entered or TreatBlankDimension9AsEmpty)
					From.FinanceDimension9			= each.FinanceDimension9
				
				if (each.TreatBlankDimension10AsEmpty)
					From.FinanceDimension10 = blank
				else
				if (each.FinanceDimension10 entered or TreatBlankDimension10AsEmpty)
					From.FinanceDimension10			= each.FinanceDimension10

			else
				if (FromDimensionWithMultipleOverrides.Type.AccountingEntity or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.AccountingEntity))
					From.AccountingEntity			= each.AccountingEntity

				if (FromDimensionWithMultipleOverrides.Type.AccountingUnit or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.AccountingUnit))
					From.AccountingEntity			= each.AccountingEntity
					From.AccountingUnit				= each.AccountingUnit

				if (FromDimensionWithMultipleOverrides.Type.Account or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Account))
					From.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount

				if (FromDimensionWithMultipleOverrides.Type.Project or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Project))
					From.Project					= each.Project

				if (FromDimensionWithMultipleOverrides.Type.Dimension1 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension1))
					From.FinanceDimension1			= each.FinanceDimension1

				if (FromDimensionWithMultipleOverrides.Type.Dimension2 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension2))
					From.FinanceDimension2			= each.FinanceDimension2

				if (FromDimensionWithMultipleOverrides.Type.Dimension3 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension3))
					From.FinanceDimension3			= each.FinanceDimension3

				if (FromDimensionWithMultipleOverrides.Type.Dimension4 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension4))
					From.FinanceDimension4			= each.FinanceDimension4

				if (FromDimensionWithMultipleOverrides.Type.Dimension5 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension5))
					From.FinanceDimension5			= each.FinanceDimension5

				if (FromDimensionWithMultipleOverrides.Type.Dimension6 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension6))
					From.FinanceDimension6			= each.FinanceDimension6

				if (FromDimensionWithMultipleOverrides.Type.Dimension7 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension7))
					From.FinanceDimension7			= each.FinanceDimension7

				if (FromDimensionWithMultipleOverrides.Type.Dimension8 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension8))
					From.FinanceDimension8			= each.FinanceDimension8

				if (FromDimensionWithMultipleOverrides.Type.Dimension9 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension9))
					From.FinanceDimension9			= each.FinanceDimension9

				if (FromDimensionWithMultipleOverrides.Type.Dimension10 or (FromOverrideOption.TwoDimension and FromDimensionWithMultipleOverrides2.Type.Dimension10))
					From.FinanceDimension10			= each.FinanceDimension10

		ConsolidateAmounts
			if (IsCurrentFrom)
				DirectionFactor = -1.0
			else
				DirectionFactor = 1.0
			ConsolidatedValue += DirectionFactor*UseValue
			if (AllocateAllCurrencyAmounts)
				ConsolidatedCurrencyAmount.FunctionalAmount		+= DirectionFactor * UseValueCurrencyAmount.FunctionalAmount
				ConsolidatedCurrencyAmount.ProjectAmount		+= DirectionFactor * UseValueCurrencyAmount.ProjectAmount
				ConsolidatedCurrencyAmount.AlternateAmount		+= DirectionFactor * UseValueCurrencyAmount.AlternateAmount
				ConsolidatedCurrencyAmount.AlternateAmount2		+= DirectionFactor * UseValueCurrencyAmount.AlternateAmount2
				ConsolidatedCurrencyAmount.AlternateAmount3		+= DirectionFactor * UseValueCurrencyAmount.AlternateAmount3
				ConsolidatedCurrencyAmount.ReportAmount1		+= DirectionFactor * UseValueCurrencyAmount.ReportAmount1
				ConsolidatedCurrencyAmount.ReportAmount2		+= DirectionFactor * UseValueCurrencyAmount.ReportAmount2
				ConsolidatedCurrencyAmount.ReportAmount3		+= DirectionFactor * UseValueCurrencyAmount.ReportAmount3
				ConsolidatedCurrencyAmount.ReportAmount4		+= DirectionFactor * UseValueCurrencyAmount.ReportAmount4
				ConsolidatedCurrencyAmount.ReportAmount5		+= DirectionFactor * UseValueCurrencyAmount.ReportAmount5
		
		UpdatePercent
            WeightPercent = each.WeightDecimal/TotalSplitWeight
			invoke UpdatePercent each
				invoked.PrmWeightPercent = WeightPercent

		ExecuteSplit
			if (LocalDebug)
				display "ExecuteSplit"





			Counter					= Counter + 1
			if (LocalDebug)
				display "Counter:<Counter>"
				display "UseValue:<UseValue>"
				display "TotalSplitSum:<TotalSplitSum>"
			if (not IncludeLineWeight and Counter = TotalOverrideCount) 
				if (IsOverthrownOptionHighestTransaction
				and LocalOverthrownTransactionDetail entered) 
					

					SplitCurrentValue 	= UseValue*each.WeightDecimal/TotalSplitWeight
					SplitCurrentValue	= RoundedSplitCurrentValue
					if (AbsoluteSplitCurrentValue < SplitCurrentHighestValue)
						if (IsCurrentSplitValueLessThanMinimumAmount) 		
							LocalSkipCreateButUpdateTransaction = true 		
							include SetSplitCurrentValueDifference			

						else												
							LocalUpdateTransactionByOverthrownAmount = true	
							include SetTotalSplitSumAmounts					

					else													
						include SetSplitCurrentValueDifference				

				else
					include SetSplitCurrentValueDifference
					if (IsCurrentSplitValueLessThanMinimumAmount and LastAllocationTransactionDetailRel exists)
						LocalSkipCreateButUpdateTransaction = true 
			else
				SplitCurrentValue 	= UseValue*each.WeightDecimal/TotalSplitWeight
				if (LocalDebug)
					display "SplitCurrentValueBeforeRound:<SplitCurrentValue>"
				SplitCurrentValue	= RoundedSplitCurrentValue
				if (IsCurrentSplitValueLessThanMinimumAmount)
					LocalBypassDetailCreation = true
				else
					include SetTotalSplitSumAmounts

			include UpdatePercent

		SetSplitCurrentValueDifference

			SplitCurrentValue	= UseValue - TotalSplitSum
			if (LocalDebug)
				display "SplitCurrentValue:<SplitCurrentValue>"
			if (AllocateAllCurrencyAmounts)
				SplitCurrentCurrencyAmount.FunctionalAmount		= CurrentCurrencyAmount.FunctionalAmount - TotalSplitSumCurrencyAmount.FunctionalAmount
				SplitCurrentCurrencyAmount.ProjectAmount		= CurrentCurrencyAmount.ProjectAmount 	- TotalSplitSumCurrencyAmount.ProjectAmount
				SplitCurrentCurrencyAmount.AlternateAmount		= CurrentCurrencyAmount.AlternateAmount 	- TotalSplitSumCurrencyAmount.AlternateAmount
				SplitCurrentCurrencyAmount.AlternateAmount2		= CurrentCurrencyAmount.AlternateAmount2	- TotalSplitSumCurrencyAmount.AlternateAmount2
				SplitCurrentCurrencyAmount.AlternateAmount3		= CurrentCurrencyAmount.AlternateAmount3	- TotalSplitSumCurrencyAmount.AlternateAmount3
				SplitCurrentCurrencyAmount.ReportAmount1		= CurrentCurrencyAmount.ReportAmount1 	- TotalSplitSumCurrencyAmount.ReportAmount1
				SplitCurrentCurrencyAmount.ReportAmount2		= CurrentCurrencyAmount.ReportAmount2 	- TotalSplitSumCurrencyAmount.ReportAmount2
				SplitCurrentCurrencyAmount.ReportAmount3		= CurrentCurrencyAmount.ReportAmount3 	- TotalSplitSumCurrencyAmount.ReportAmount3
				SplitCurrentCurrencyAmount.ReportAmount4		= CurrentCurrencyAmount.ReportAmount4 	- TotalSplitSumCurrencyAmount.ReportAmount4
				SplitCurrentCurrencyAmount.ReportAmount5		= CurrentCurrencyAmount.ReportAmount5 	- TotalSplitSumCurrencyAmount.ReportAmount5
				if (LocalDebug)
					display "TotalSplitSumValueFunctional:<TotalSplitSumCurrencyAmount.FunctionalAmount>"
					display "TotalSplitSumValueProject:<TotalSplitSumCurrencyAmount.ProjectAmount>"
					display "TotalSplitSumValueAlternate:<TotalSplitSumCurrencyAmount.AlternateAmount>"
					display "TotalSplitSumValueAlternate2:<TotalSplitSumCurrencyAmount.AlternateAmount2>"
					display "TotalSplitSumValueAlternate3:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "TotalSplitSumValueReport1:<TotalSplitSumCurrencyAmount.ReportAmount1>"
					display "TotalSplitSumValueReport2:<TotalSplitSumCurrencyAmount.ReportAmount2>"
					display "TotalSplitSumValueReport3:<TotalSplitSumCurrencyAmount.ReportAmount3>"
					display "TotalSplitSumValueReport4:<TotalSplitSumCurrencyAmount.ReportAmount4>"
					display "TotalSplitSumValueReport5:<TotalSplitSumCurrencyAmount.ReportAmount5>"

					display "SplitCurrentValueFunctional:<SplitCurrentCurrencyAmount.FunctionalAmount>"
					display "SplitCurrentValueProject:<SplitCurrentCurrencyAmount.ProjectAmount>"
					display "SplitCurrentValueAlternate:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueAlternate2:<SplitCurrentCurrencyAmount.AlternateAmount2>"
					display "SplitCurrentValueAlternate3:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueReport1:<SplitCurrentCurrencyAmount.ReportAmount1>"
					display "SplitCurrentValueReport2:<SplitCurrentCurrencyAmount.ReportAmount2>"
					display "SplitCurrentValueReport3:<SplitCurrentCurrencyAmount.ReportAmount3>"
					display "SplitCurrentValueReport4:<SplitCurrentCurrencyAmount.ReportAmount4>"
					display "SplitCurrentValueReport5:<SplitCurrentCurrencyAmount.ReportAmount5>"

		SetTotalSplitSumAmounts

			TotalSplitSum		= TotalSplitSum + SplitCurrentValue
					
			if (LocalDebug)
				display "SplitCurrentValueAfterRound:<SplitCurrentValue>"
			
			if (AllocateAllCurrencyAmounts)
				if (LocalDebug)
					display "TotalSplitSumValueFunctional:<TotalSplitSumCurrencyAmount.FunctionalAmount>"
					display "TotalSplitSumValueProject:<TotalSplitSumCurrencyAmount.ProjectAmount>"
					display "TotalSplitSumValueAlternate:<TotalSplitSumCurrencyAmount.AlternateAmount>"
					display "TotalSplitSumValueAlternate2:<TotalSplitSumCurrencyAmount.AlternateAmount2>"
					display "TotalSplitSumValueAlternate3:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "TotalSplitSumValueReport1:<TotalSplitSumCurrencyAmount.ReportAmount1>"
					display "TotalSplitSumValueReport2:<TotalSplitSumCurrencyAmount.ReportAmount2>"
					display "TotalSplitSumValueReport3:<TotalSplitSumCurrencyAmount.ReportAmount3>"
					display "TotalSplitSumValueReport4:<TotalSplitSumCurrencyAmount.ReportAmount4>"
					display "TotalSplitSumValueReport5:<TotalSplitSumCurrencyAmount.ReportAmount5>"

				SplitCurrentCurrencyAmount.FunctionalAmount		= CurrentCurrencyAmount.FunctionalAmount *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ProjectAmount		= CurrentCurrencyAmount.ProjectAmount    *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.AlternateAmount		= CurrentCurrencyAmount.AlternateAmount  *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.AlternateAmount2		= CurrentCurrencyAmount.AlternateAmount2 *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.AlternateAmount3		= CurrentCurrencyAmount.AlternateAmount3 *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ReportAmount1		= CurrentCurrencyAmount.ReportAmount1    *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ReportAmount2		= CurrentCurrencyAmount.ReportAmount2    *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ReportAmount3		= CurrentCurrencyAmount.ReportAmount3    *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ReportAmount4		= CurrentCurrencyAmount.ReportAmount4    *each.WeightDecimal / TotalSplitWeight
				SplitCurrentCurrencyAmount.ReportAmount5		= CurrentCurrencyAmount.ReportAmount5    *each.WeightDecimal / TotalSplitWeight
				if (LocalDebug)
					display "BeforeRound"
					display "SplitCurrentValueFunctional:<SplitCurrentCurrencyAmount.FunctionalAmount>"
					display "SplitCurrentValueProject:<SplitCurrentCurrencyAmount.ProjectAmount>"
					display "SplitCurrentValueAlternate:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueAlternate2:<SplitCurrentCurrencyAmount.AlternateAmount2>"
					display "SplitCurrentValueAlternate3:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueReport1:<SplitCurrentCurrencyAmount.ReportAmount1>"
					display "SplitCurrentValueReport2:<SplitCurrentCurrencyAmount.ReportAmount2>"
					display "SplitCurrentValueReport3:<SplitCurrentCurrencyAmount.ReportAmount3>"
					display "SplitCurrentValueReport4:<SplitCurrentCurrencyAmount.ReportAmount4>"
					display "SplitCurrentValueReport5:<SplitCurrentCurrencyAmount.ReportAmount5>"
				LocalResult = SplitCurrentCurrencyAmount.RoundAmounts
				if (LocalDebug)
					display "AfterRound"
					display "SplitCurrentValueFunctional:<SplitCurrentCurrencyAmount.FunctionalAmount>"
					display "SplitCurrentValueProject:<SplitCurrentCurrencyAmount.ProjectAmount>"
					display "SplitCurrentValueAlternate:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueAlternate2:<SplitCurrentCurrencyAmount.AlternateAmount2>"
					display "SplitCurrentValueAlternate3:<SplitCurrentCurrencyAmount.AlternateAmount>"
					display "SplitCurrentValueReport1:<SplitCurrentCurrencyAmount.ReportAmount1>"
					display "SplitCurrentValueReport2:<SplitCurrentCurrencyAmount.ReportAmount2>"
					display "SplitCurrentValueReport3:<SplitCurrentCurrencyAmount.ReportAmount3>"
					display "SplitCurrentValueReport4:<SplitCurrentCurrencyAmount.ReportAmount4>"
					display "SplitCurrentValueReport5:<SplitCurrentCurrencyAmount.ReportAmount5>"

				TotalSplitSumCurrencyAmount.FunctionalAmount	+= SplitCurrentCurrencyAmount.FunctionalAmount
				TotalSplitSumCurrencyAmount.AlternateAmount		+= SplitCurrentCurrencyAmount.AlternateAmount
				TotalSplitSumCurrencyAmount.AlternateAmount2	+= SplitCurrentCurrencyAmount.AlternateAmount2
				TotalSplitSumCurrencyAmount.AlternateAmount3	+= SplitCurrentCurrencyAmount.AlternateAmount3
				TotalSplitSumCurrencyAmount.ProjectAmount		+= SplitCurrentCurrencyAmount.ProjectAmount
				TotalSplitSumCurrencyAmount.ReportAmount1		+= SplitCurrentCurrencyAmount.ReportAmount1
				TotalSplitSumCurrencyAmount.ReportAmount2		+= SplitCurrentCurrencyAmount.ReportAmount2
				TotalSplitSumCurrencyAmount.ReportAmount3		+= SplitCurrentCurrencyAmount.ReportAmount3
				TotalSplitSumCurrencyAmount.ReportAmount4		+= SplitCurrentCurrencyAmount.ReportAmount4
				TotalSplitSumCurrencyAmount.ReportAmount5		+= SplitCurrentCurrencyAmount.ReportAmount5







		InnerTo
			display "InnerTo"
			include InitializeBypassFields
			include GetToAddress
			if (SkipToOverrides)
				if (ToPostOptionIsComputeOrBypassSourceBalance)
					ComputedValue			= ComputeValue
					UseValue				= RoundedComputedUseValue
				include GenerateTo
			else
				if (ToPostOption.Split)
					TotalSplitWeight		= ToTotalSplitWeight
					TotalOverrideCount		= ToOverrideCount
					constraint (TotalSplitWeight entered) 
						"CannotSplitSinceTotalToWeightIsZero"
					initialize Counter
					initialize TotalSplitSum
					initialize TotalSplitSumCurrencyAmount
					initialize SplitCurrentHighestValue
					IsCurrentSplit			= true
					SplitDirection	= 1.0
				initialize ToPostCount
				initialize LocalAllocationTransactionDetail
				initialize LocalOverthrownTransactionDetail
				initialize LocalCashOffsetTransactionDetail
				initialize LocalOverthrownCashOffsetDetail
				for each ToTempOverridesRel
					include InitializeBypassFields
					if (ToOverrideOption.MultipleDimensions)
						include GetToAddress


					include OverrideToAddress
					if (ToPostOption.Split)
						include ExecuteSplit
					else
					if (ToPostOptionIsComputeOrBypassSourceBalance)
						ComputedValue			= ComputeValue
						UseValue				= RoundedComputedUseValue
					if (ConsolidateFrom)
						IsCurrentFrom = true
						include ConsolidateAmounts
					include GenerateTo
					ToPostCount					= ToPostCount + 1
					include CheckCommitTransaction


			IsCurrentSplit = false
				
		OuterFrom
			if (LocalDebug)
				display "OuterFrom"
			UseValue = CurrentValue
			if (AllocateAllCurrencyAmounts)
				initialize UseValueCurrencyAmount
				UseValueCurrencyAmount = CurrentCurrencyAmount
			include GetFromAddress
			if (SkipFromOverrides)
				if (LocalDebug)
					display "OuterFrom"				
				if (FromPostOptionIsComputeOrBypassSourceBalance)
					ComputedValue			= ComputeValue
					UseValue				= RoundedComputedUseValue
				FromEntity					= From.AccountingEntity
				if (!FromPostOption.Split)
					include InnerTo
				include InitializeBypassFields
				include GenerateFrom
				if (ConsolidateFrom)
					initialize ConsolidatedValue
					initialize ConsolidatedCurrencyAmount
			else
				if (FromPostOption.Split)
					TotalSplitWeight		= FromTotalSplitWeight
					TotalOverrideCount		= FromOverrideCount
					constraint (TotalSplitWeight entered) 
						"CannotSplitSinceTotalFromWeightIsZero"
					initialize Counter
					initialize TotalSplitSum
					initialize TotalSplitSumCurrencyAmount
					initialize SplitCurrentHighestValue
					SplitDirection	= -1.0
					IsCurrentSplit			= true
				initialize FromPostCount
				initialize LocalAllocationTransactionDetail
				initialize LocalOverthrownTransactionDetail
				initialize LocalCashOffsetTransactionDetail
				initialize LocalOverthrownCashOffsetDetail
				for each FromTempOverridesRel
					include InitializeBypassFields
					if (FromOverrideOption.MultipleDimensions)
						include GetFromAddress				

					include OverrideFromAddress
					if (FromPostOption.Split)
						include ExecuteSplit
					else
					if (FromPostOptionIsComputeOrBypassSourceBalance)
						ComputedValue			= ComputeValue
						UseValue				= RoundedComputedUseValue
					FromEntity					= From.AccountingEntity
					if (!FromPostOption.Split)
						include InnerTo
					include GenerateFrom
					if (ConsolidateFrom)
						initialize ConsolidatedValue
						initialize ConsolidatedCurrencyAmount
					FromPostCount				= FromPostCount + 1
					include CheckCommitTransaction


			if (FromPostOption.Split)
				constraint(ToPostOption.Split)
					"InternalError"
				UseValue = CurrentValue
				if (AllocateAllCurrencyAmounts)
					initialize UseValueCurrencyAmount
					UseValueCurrencyAmount = CurrentCurrencyAmount
				IsCurrentSplit = false
				include InnerTo
		InnerFrom
			display "InnerFrom"
			include InitializeBypassFields
			include GetFromAddress
			if (SkipFromOverrides)
				if (FromPostOptionIsComputeOrBypassSourceBalance)
					ComputedValue			= ComputeValue
					UseValue				= RoundedComputedUseValue
				FromEntity					= From.AccountingEntity
				include GenerateFrom
			else
				if (FromPostOption.Split)
					TotalSplitWeight		= FromTotalSplitWeight
					TotalOverrideCount		= FromOverrideCount
					constraint (TotalSplitWeight entered) 
						"CannotSplitSinceTotalFromWeightIsZero"
					initialize Counter
					initialize TotalSplitSum
					initialize TotalSplitSumCurrencyAmount
					initialize SplitCurrentHighestValue
					SplitDirection	= -1.0
					IsCurrentSplit			= true
				initialize FromPostCount
				initialize LocalAllocationTransactionDetail
				initialize LocalOverthrownTransactionDetail
				initialize LocalCashOffsetTransactionDetail
				initialize LocalOverthrownCashOffsetDetail
				for each FromTempOverridesRel
					include InitializeBypassFields
					if (FromOverrideOption.MultipleDimensions)
						include GetFromAddress					

					include OverrideFromAddress
					FromEntity					= From.AccountingEntity
					if (FromPostOption.Split)
						include ExecuteSplit
					else
					if (FromPostOptionIsComputeOrBypassSourceBalance)
						ComputedValue			= ComputeValue
						UseValue				= RoundedComputedUseValue
					if (ConsolidateTo)
						IsCurrentFrom = false
						include ConsolidateAmounts
					include GenerateFrom
					FromPostCount				= FromPostCount + 1
					include CheckCommitTransaction


			IsCurrentSplit = false

		ToOnly
			UseValue = CurrentValue
			if (AllocateAllCurrencyAmounts)
				initialize UseValueCurrencyAmount
				UseValueCurrencyAmount = CurrentCurrencyAmount
			include GetToAddress
			FromEntity					= SourceAddress.AccountingEntity
			if (SkipToOverrides)
				include GenerateTo
				if (ConsolidateTo)
					initialize ConsolidatedValue
					initialize ConsolidatedCurrencyAmount
			else
				if (ToPostOption.Split)
					TotalSplitWeight		= ToTotalSplitWeight
					TotalOverrideCount		= ToOverrideCount
					constraint (TotalSplitWeight entered) 
						"CannotSplitSinceTotalToWeightIsZero"
					initialize Counter
					initialize TotalSplitSum
					initialize TotalSplitSumCurrencyAmount
					SplitDirection	= 1.0
					IsCurrentSplit			= true
				initialize ToPostCount
				for each ToTempOverridesRel
					if (ToOverrideOption.MultipleDimensions)
						include GetToAddress

					include OverrideToAddress
					if (ToPostOption.Split)
						include ExecuteSplit
					include GenerateTo
					ToPostCount				= ToPostCount + 1
					if (ConsolidateTo)
						initialize ConsolidatedValue
						initialize ConsolidatedCurrencyAmount
					include CheckCommitTransaction



		OuterTo
			UseValue = CurrentValue
			if (AllocateAllCurrencyAmounts)
				initialize UseValueCurrencyAmount
				UseValueCurrencyAmount = CurrentCurrencyAmount
			include GetToAddress
			if (SkipToOverrides)
				if (ToPostOptionIsComputeOrBypassSourceBalance)
					ComputedValue			= ComputeValue
					UseValue				= RoundedComputedUseValue
				include InnerFrom
				include InitializeBypassFields
				include GenerateTo
				if (ConsolidateTo)
					initialize ConsolidatedValue
					initialize ConsolidatedCurrencyAmount
			else
				if (ToPostOption.Split)
					TotalSplitWeight		= ToTotalSplitWeight
					TotalOverrideCount		= ToOverrideCount
					constraint (TotalSplitWeight entered) 
						"CannotSplitSinceTotalToWeightIsZero"
					initialize Counter
					initialize TotalSplitSum
					initialize TotalSplitSumCurrencyAmount
					initialize SplitCurrentHighestValue
					SplitDirection	= 1.0
					IsCurrentSplit			= true
				initialize ToPostCount
				initialize LocalAllocationTransactionDetail
				initialize LocalOverthrownTransactionDetail
				initialize LocalCashOffsetTransactionDetail
				initialize LocalOverthrownCashOffsetDetail
				for each ToTempOverridesRel
					include InitializeBypassFields
					if (ToOverrideOption.MultipleDimensions)
						include GetToAddress

					include OverrideToAddress
					if (ToPostOption.Split)
						include ExecuteSplit
					else
					if (ToPostOptionIsComputeOrBypassSourceBalance)
						ComputedValue			= ComputeValue
						UseValue				= RoundedComputedUseValue
					if (!ToPostOption.Split)
						include InnerFrom
					include GenerateTo
					ToPostCount				= ToPostCount + 1
					if (ConsolidateTo)
						initialize ConsolidatedValue
						initialize ConsolidatedCurrencyAmount
					include CheckCommitTransaction


			if (ToPostOption.Split)
				constraint(ToPostOption.Split)
					"InternalError"
				include InnerTo

		SetDistinctDimension
			if (ComputeOverridesForDistinctDimensions)
				initialize LocalDistinctDimensionSource
				LocalDistinctDimensionSource = SourceAddress
				if (ComputeOverridesForAccountingUnit)
					LocalDistinctDimensionSource.AccountingUnit = Source.AccountingUnit	
				if (ComputeOverridesForAccount)
					LocalDistinctDimensionSource.GeneralLedgerChartAccount = Source.GeneralLedgerChartAccount
				if (ComputeOverridesForProject)
					LocalDistinctDimensionSource.Project = Source.Project	
				if (ComputeOverridesForDimension1)
					LocalDistinctDimensionSource.FinanceDimension1 = Source.FinanceDimension1
				if (ComputeOverridesForDimension2)
					LocalDistinctDimensionSource.FinanceDimension2 = Source.FinanceDimension2
				if (ComputeOverridesForDimension3)
					LocalDistinctDimensionSource.FinanceDimension3 = Source.FinanceDimension3
				if (ComputeOverridesForDimension4)
					LocalDistinctDimensionSource.FinanceDimension4 = Source.FinanceDimension4
				if (ComputeOverridesForDimension5)
					LocalDistinctDimensionSource.FinanceDimension5 = Source.FinanceDimension5
				if (ComputeOverridesForDimension6)
					LocalDistinctDimensionSource.FinanceDimension6 = Source.FinanceDimension6
				if (ComputeOverridesForDimension7)
					LocalDistinctDimensionSource.FinanceDimension7 = Source.FinanceDimension7
				if (ComputeOverridesForDimension8)
					LocalDistinctDimensionSource.FinanceDimension8 = Source.FinanceDimension8
				if (ComputeOverridesForDimension9)
					LocalDistinctDimensionSource.FinanceDimension9 = Source.FinanceDimension9
				if (ComputeOverridesForDimension10)
					LocalDistinctDimensionSource.FinanceDimension10 = Source.FinanceDimension10

		SetSource
			include SetDistinctDimension
			
            LocalSourceValueAddress = Source
            
            if (LocalSourceValueAddress.AccountingUnit = "(BLANK.)")
                initialize LocalSourceValueAddress.AccountingUnit
            if (LocalSourceValueAddress.Project = "(BLANK.)")
                initialize LocalSourceValueAddress.Project
            if (LocalSourceValueAddress.FinanceDimension1 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension1
            if (LocalSourceValueAddress.FinanceDimension2 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension2
            if (LocalSourceValueAddress.FinanceDimension3 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension3
            if (LocalSourceValueAddress.FinanceDimension4 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension4
            if (LocalSourceValueAddress.FinanceDimension5 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension5
            if (LocalSourceValueAddress.FinanceDimension6 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension6
            if (LocalSourceValueAddress.FinanceDimension7 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension7
            if (LocalSourceValueAddress.FinanceDimension8 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension8
            if (LocalSourceValueAddress.FinanceDimension9 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension9
            if (LocalSourceValueAddress.FinanceDimension10 = "(BLANK.)")
                initialize LocalSourceValueAddress.FinanceDimension10
			
			if (Source.GeneralLedgerChartAccount.ChartType.Node)
				initialize Source.GeneralLedgerChartAccount
			if ((Source.AccountingUnit.AccountingUnitType.Node)
			or  Source.AccountingUnit = "(BLANK.)")
				initialize Source.AccountingUnit
			if (Source.Project.ProjectType.Node
			or  Source.Project = "(BLANK.)")
				initialize Source.Project
			if (Source.FinanceDimension1.DimensionType.Node
			or  Source.FinanceDimension1 = "(BLANK.)")
				initialize Source.FinanceDimension1
			if (Source.FinanceDimension2.DimensionType.Node
			or  Source.FinanceDimension2 = "(BLANK.)")
				initialize Source.FinanceDimension2
			if (Source.FinanceDimension3.DimensionType.Node
			or  Source.FinanceDimension3 = "(BLANK.)")
				initialize Source.FinanceDimension3
			if (Source.FinanceDimension4.DimensionType.Node
			or  Source.FinanceDimension4 = "(BLANK.)")
				initialize Source.FinanceDimension4
			if (Source.FinanceDimension5.DimensionType.Node
			or  Source.FinanceDimension5 = "(BLANK.)")
				initialize Source.FinanceDimension5
			if (Source.FinanceDimension6.DimensionType.Node
			or  Source.FinanceDimension6 = "(BLANK.)")
				initialize Source.FinanceDimension6
			if (Source.FinanceDimension7.DimensionType.Node
			or  Source.FinanceDimension7 = "(BLANK.)")
				initialize Source.FinanceDimension7
			if (Source.FinanceDimension8.DimensionType.Node
			or  Source.FinanceDimension8 = "(BLANK.)")
				initialize Source.FinanceDimension8
			if (Source.FinanceDimension9.DimensionType.Node
			or  Source.FinanceDimension9 = "(BLANK.)")
				initialize Source.FinanceDimension9
			if (Source.FinanceDimension10.DimensionType.Node
			or  Source.FinanceDimension10 = "(BLANK.)")
				initialize Source.FinanceDimension10

			AllocationContext.SourceDetail = Source

            if (not ProcessAllPostingBalance)
                if (SourceAccountingUnitGroup entered and not ProcessAccountingUnitPostingBalance)
                    initialize Source.AccountingUnit
                    initialize LocalSourceValueAddress.AccountingUnit

                if (SourceAccountGroup entered and not ProcessAccountPostingBalance)
                    initialize Source.GeneralLedgerChartAccount
                    initialize LocalSourceValueAddress.GeneralLedgerChartAccount

                if (SourceProjectGroup entered and not ProcessProjectPostingBalance)
                    initialize Source.Project
                    initialize LocalSourceValueAddress.Project

                if (SourceFinanceDimension1Group entered and not ProcessDimension1PostingBalance)
                    initialize Source.FinanceDimension1
                    initialize LocalSourceValueAddress.FinanceDimension1

                if (SourceFinanceDimension2Group entered and not ProcessDimension2PostingBalance)
                    initialize Source.FinanceDimension2
                    initialize LocalSourceValueAddress.FinanceDimension2

                if (SourceFinanceDimension3Group entered and not ProcessDimension3PostingBalance)
                    initialize Source.FinanceDimension3
                    initialize LocalSourceValueAddress.FinanceDimension3

                if (SourceFinanceDimension4Group entered and not ProcessDimension4PostingBalance)
                    initialize Source.FinanceDimension4
                    initialize LocalSourceValueAddress.FinanceDimension4

                if (SourceFinanceDimension5Group entered and not ProcessDimension5PostingBalance)
                    initialize Source.FinanceDimension5
                    initialize LocalSourceValueAddress.FinanceDimension5

                if (SourceFinanceDimension6Group entered and not ProcessDimension6PostingBalance)
                    initialize Source.FinanceDimension6
                    initialize LocalSourceValueAddress.FinanceDimension6

                if (SourceFinanceDimension7Group entered and not ProcessDimension7PostingBalance)
                    initialize Source.FinanceDimension7
                    initialize LocalSourceValueAddress.FinanceDimension7

                if (SourceFinanceDimension8Group entered and not ProcessDimension8PostingBalance)
                    initialize Source.FinanceDimension8
                    initialize LocalSourceValueAddress.FinanceDimension8
                
                if (SourceFinanceDimension9Group entered and not ProcessDimension9PostingBalance)
                    initialize Source.FinanceDimension9
                    initialize LocalSourceValueAddress.FinanceDimension9

                if (SourceFinanceDimension10Group entered and not ProcessDimension10PostingBalance)
                    initialize Source.FinanceDimension10
                    initialize LocalSourceValueAddress.FinanceDimension10

		ProcessLoops
			if (LocalDebug)
				display "ProcessLoops:Unit<Source.AccountingUnit>,Account<Source.GeneralLedgerChartAccount>,Dimension1<Source.FinanceDimension1>,Value<CurrentValue>"
			if (CurrentValue entered 
			or (ZeroTransAmountAllocationEnabled and CurrentCurrencyAmount.HasAmountsEntered)
			or 	ComputeAndBypassSourceBalance)
				ComputedValue	= CurrentValue
				if (GeneratePostToOnly)
					include ToOnly
				else
					if (IsOuterFrom)
						include OuterFrom
					else
						include OuterTo
		ProcessMeasures
			if (ComputeAndBypassSourceBalance)
				initialize CurrentValue
				




				if (AllocationCurrency.Functional)
					CurrentCurrency	= Source.AccountingEntity.FunctionalCurrency
				if (AllocationCurrency.Report1)
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyOne
				else
				if (AllocationCurrency.Report2)
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyTwo
				else
				if (AllocationCurrency.Report3)
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyThree
				else
				if (AllocationCurrency.Report4)
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFour
				else
				if (AllocationCurrency.Report5)
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFive
				else
				if (AllocationCurrency.Project)
					if (SourceAddress.Project.IsPostingProject)
						CurrentCurrency = SourceAddress.Project.Currency
					else 
						CurrentCurrency = Source.Project.Currency

				TargetCurrency = CurrentCurrency

			else

				if (AllocationControl.Currency entered)
					TargetCurrency = AllocationControl.Currency
				else
					TargetCurrency = CurrentCurrency
				
				TransactionAmount 	= OriginalValue

				if (TargetCurrency != CurrentCurrency)
					initialize CurrencyExchange
					FromCurrency				= CurrentCurrency
					ExchangeDate				= CurrencyDate
					ToCurrency					= TargetCurrency
					CurrencyTable				= AllocationControl.CurrencyTable
					CurrencyExchange.ToCurrency = TargetCurrency
					CurrentValue				= CurrencyExchange.OutputCurrencyAmount
					CurrencyExchangeRate		= CurrencyExchange.OutputCurrencyRate
				else
					CurrentValue				= TransactionAmount
					CurrencyExchangeRate		= 1
				TranslatedSourceValue 			= CurrentValue 

				if (AllocationControl.AllocationSourceSystem.TransferPricing)
					if (Compute entered)
						ComputedValue			= ComputeValue
						CurrentValue			= RoundedComputedUseValue
						ComputedSourceValue		= CurrentValue
					else 
						ComputedSourceValue = CurrentValue
					if (not CurrencyExchange.IsRelationshipAndRateDefined)
						CurrentValue			= TransactionAmount
						CurrencyExchangeRate	= 1
				if (not LocalProcessSourceSummary)
					CurrentValue	*= SourcePercentage
					round CurrentValue to nearest DerivedRoundTo
					
					if (AllocateAllCurrencyAmounts)
						CurrentCurrencyAmount.FunctionalAmount		*= SourcePercentage
						CurrentCurrencyAmount.AlternateAmount		*= SourcePercentage
						CurrentCurrencyAmount.AlternateAmount2		*= SourcePercentage
						CurrentCurrencyAmount.AlternateAmount3		*= SourcePercentage
						CurrentCurrencyAmount.ProjectAmount			*= SourcePercentage
						CurrentCurrencyAmount.ReportAmount1			*= SourcePercentage
						CurrentCurrencyAmount.ReportAmount2			*= SourcePercentage
						CurrentCurrencyAmount.ReportAmount3			*= SourcePercentage
						CurrentCurrencyAmount.ReportAmount4			*= SourcePercentage
						CurrentCurrencyAmount.ReportAmount5			*= SourcePercentage
						LocalResult = CurrentCurrencyAmount.RoundAmounts					

			if (AllocationControl.AllocationSourceSystem.TransferPricing
			or  PrmGenerateSourceValue)
				if (not AllocationControl.AllocationSourceSystem.TransferPricing
				and PrmGenerateSourceValue
				and Compute entered)
					ComputedSourceValue		= ComputeValue
				LocalSourceValueSet			= true
				include CreateAllocationLineSourceValue

		CreateAllocationLineSourceValue
			if (not LocalSourceValueSet)
				TranslatedSourceValue			= CurrentValue
				OriginalValue					= CurrentValue

            if ((HasCustomGroupToSummarize or ProcessAllPostingBalance) and AllocationLineSourceValueByOriginalSourceRel exists)
				invoke UpdateAmounts AllocationLineSourceValueByOriginalSourceRel
					invoked.PrmTransactionAmount	= TranslatedSourceValue
					invoked.PrmComputedAmount		= ComputedSourceValue
					invoked.PrmJournalAmount		= OriginalValue
					invoked.PrmCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= CurrentCurrencyAmount.FunctionalAmount
					invoked.PrmCurrencyAmount.ProjectAmount.EnteredCurrencyAmount			= CurrentCurrencyAmount.ProjectAmount
					invoked.PrmCurrencyAmount.AlternateAmount.EnteredCurrencyAmount			= CurrentCurrencyAmount.AlternateAmount
					invoked.PrmCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= CurrentCurrencyAmount.AlternateAmount2
					invoked.PrmCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= CurrentCurrencyAmount.AlternateAmount3
					invoked.PrmCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount1
					invoked.PrmCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount2
					invoked.PrmCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount3
					invoked.PrmCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount4
					invoked.PrmCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount5

			else
				invoke Create AllocationLineSourceValue
					assign result to LocalAllocationLineSourceValueView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl		= AllocationControl
					invoked.Allocation				= Allocation
					invoked.AllocationLine			= AllocationLine
					invoked.AllocationRun			= AllocationRunRel.AllocationRun
					invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
					
					if (LocalSourceValueAddress entered)
						invoked.FinanceAddress	= LocalSourceValueAddress
					else
						invoked.FinanceAddress	= Source
					
					invoked.TransactionAmount						= TranslatedSourceValue
					invoked.ComputedAmount							= ComputedSourceValue
					invoked.JournalCurrency							= CurrentCurrency
					if (not ComputeAndBypassSourceBalance)
						invoked.JournalAmount						= OriginalValue
					invoked.CurrencyExchangeRate					= CurrencyExchangeRate
					invoked.ErrorMessage							= CurrencyExchange.LocalErrorMessage
					invoked.FromOriginalSource						= LocalFromOriginalSource

					invoked.CurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= CurrentCurrencyAmount.FunctionalAmount
					invoked.CurrencyAmount.ProjectAmount.EnteredCurrencyAmount			= CurrentCurrencyAmount.ProjectAmount
					invoked.CurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= CurrentCurrencyAmount.AlternateAmount
					invoked.CurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= CurrentCurrencyAmount.AlternateAmount2
					invoked.CurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= CurrentCurrencyAmount.AlternateAmount3
					invoked.CurrencyAmount.ReportAmount1.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount1
					invoked.CurrencyAmount.ReportAmount2.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount2
					invoked.CurrencyAmount.ReportAmount3.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount3
					invoked.CurrencyAmount.ReportAmount4.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount4
					invoked.CurrencyAmount.ReportAmount5.EnteredCurrencyAmount			= CurrentCurrencyAmount.ReportAmount5
					
				LocalAllocationLineSourceValue = LocalAllocationLineSourceValueView.AllocationLineSourceValue
			initialize LocalSourceValueSet		
		
		CreateOrUpdateAllocationLineValue
			if (AllocationLineValueRel exists)
				invoke Update AllocationLineValueRel.AllocationLineValue
					invoked.CurrentValue				+= CurrentValue
					if (AllocateAllCurrencyAmounts)
						invoked.FunctionalAmount		+= CurrentCurrencyAmount.FunctionalAmount
						invoked.ProjectAmount			+= CurrentCurrencyAmount.ProjectAmount
						invoked.AlternateAmount			+= CurrentCurrencyAmount.AlternateAmount
						invoked.AlternateAmount2		+= CurrentCurrencyAmount.AlternateAmount2
						invoked.AlternateAmount3		+= CurrentCurrencyAmount.AlternateAmount3
						invoked.ReportAmount1			+= CurrentCurrencyAmount.ReportAmount1
						invoked.ReportAmount2			+= CurrentCurrencyAmount.ReportAmount2
						invoked.ReportAmount3			+= CurrentCurrencyAmount.ReportAmount3
						invoked.ReportAmount4			+= CurrentCurrencyAmount.ReportAmount4
						invoked.ReportAmount5			+= CurrentCurrencyAmount.ReportAmount5						
			else			
				invoke Create AllocationLineValue
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AllocationSourceSystem  = AllocationSourceSystem
					invoked.AllocationControl		= AllocationControl
					invoked.Allocation				= Allocation
					invoked.AllocationLine			= AllocationLine
					invoked.AllocationRun			= AllocationRunRel.AllocationRun
					invoked.AllocationLineValue.DimensionCode	= Source.DimensionCode
					invoked.AllocationLineValue.Currency		= CurrentCurrency
					invoked.AllocationLineValue.GeneralLedgerCalendarPeriod = CurrentPeriod
					invoked.AccountingEntity		= Source.AccountingEntity
					invoked.AccountingUnit			= Source.AccountingUnit
					invoked.GeneralLedgerChartAccount	= Source.GeneralLedgerChartAccount
					invoked.Project					= Source.Project
					invoked.FinanceDimension1		= Source.FinanceDimension1
					invoked.FinanceDimension2		= Source.FinanceDimension2
					invoked.FinanceDimension3		= Source.FinanceDimension3
					invoked.FinanceDimension4		= Source.FinanceDimension4
					invoked.FinanceDimension5		= Source.FinanceDimension5
					invoked.FinanceDimension6		= Source.FinanceDimension6
					invoked.FinanceDimension7		= Source.FinanceDimension7
					invoked.FinanceDimension8		= Source.FinanceDimension8
					invoked.FinanceDimension9		= Source.FinanceDimension9
					invoked.FinanceDimension10		= Source.FinanceDimension10
					invoked.CurrentValue			= CurrentValue
					invoked.TransactionCurrency		= CurrentCurrency
					if (AllocateAllCurrencyAmounts)
						invoked.FunctionalAmount		= CurrentCurrencyAmount.FunctionalAmount
						invoked.ProjectAmount			= CurrentCurrencyAmount.ProjectAmount
						invoked.AlternateAmount			= CurrentCurrencyAmount.AlternateAmount
						invoked.AlternateAmount2		= CurrentCurrencyAmount.AlternateAmount2
						invoked.AlternateAmount3		= CurrentCurrencyAmount.AlternateAmount3
						invoked.ReportAmount1			= CurrentCurrencyAmount.ReportAmount1
						invoked.ReportAmount2			= CurrentCurrencyAmount.ReportAmount2
						invoked.ReportAmount3			= CurrentCurrencyAmount.ReportAmount3
						invoked.ReportAmount4			= CurrentCurrencyAmount.ReportAmount4
						invoked.ReportAmount5			= CurrentCurrencyAmount.ReportAmount5				
		CommitResetCounter 
			invoke CommitTransaction
			initialize LoopCounter
			LocalLastTimeStamp = current timestamp
		

		CheckCommitTransaction					
			LoopCounter += 1
			LocalCurrentTimeStamp = current timestamp
			if (LocalLastTimeStamp not entered)
				LocalLastTimeStamp = LocalCurrentTimeStamp

			LocalElapsedTime = LocalCurrentTimeStamp - LocalLastTimeStamp

			if (LoopCounter >= 100
			or  LocalElapsedTime > 30)
				display "commit"
				invoke CommitTransaction
				initialize LoopCounter
				LocalLastTimeStamp = LocalCurrentTimeStamp
				
		ProcessPeriod
			if (LocalDebug)
				display "ProcessPeriod"
			initialize Source
			initialize AllocationTransactionDetailQuery	

			commit transaction
			if (PrmAllocationSnapshot entered)
				LocalAllocationSnapshot					= PrmAllocationSnapshot				
				if (ProcessAllPostingBalance)
					LocalBusinessClassName 	= "AllocationSnapshotDetail"
					LocalRelationName 		= "AllocationSnapshotPostingBalanceRel"
					for each AllocationSnapshotPostingBalanceRel
						include ProcessSnapshot
				else
					for each AllocationSnapshotMatrixRel
						include ProcessSnapshot

			else
				if (ProcessAllPostingBalance)
					LocalBusinessClassName 	= "GeneralLedgerTotal"
					if (UseProcessForAccountOptimization and instance count of PeriodShadowEndDatesRel = 1) 
						
						initialize LocalPeriodEndingDate
						LocalPeriodEndingDate = first PeriodShadowEndDatesRel.GeneralLedgerCalendarPeriod
						
						if (SourceAccountingEntityGroup entered)
							for each SourceAccountingEntityGroupRel
								LocalGLTotalAccountingEntity = each.AccountingEntity
								
								include ProcessGLTotalForAccountOptimization

								include CommitResetCounter
						else
							LocalGLTotalAccountingEntity = SourceAddress.AccountingEntity
							include ProcessGLTotalForAccountOptimization

					else 
						LocalRelationName 		= "GeneralLedgerTotalPostingBalanceRel"
						if (SourceAccountingEntityGroup entered)
							for each SourceAccountingEntityGroupRel
								LocalGLTotalAccountingEntity = each.AccountingEntity
								for each GeneralLedgerTotalPostingBalanceRel
									include ProcessGeneralLedgerTotal
								include CommitResetCounter
						else
							LocalGLTotalAccountingEntity = SourceAddress.AccountingEntity
							for each GeneralLedgerTotalPostingBalanceRel
								include ProcessGeneralLedgerTotal
				else
					for each MatrixRel
						LocalSkipMeasureChecking = false
						LocalMeasureIsEntered = false
						
						if (ComputeAndBypassSourceBalance and not AllocationCurrency.Transaction)
							LocalSkipMeasureChecking = true

						if (not LocalSkipMeasureChecking)
							if (each.NetTransactionAmount entered or each.NetUnitsAmount entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.FunctionalAmount) and each.NetFunctionalAmount entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.AlternateAmount) and each.NetAlternateAmount entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.AlternateAmount2) and each.NetAlternateAmount2 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.AlternateAmount3) and each.NetAlternateAmount3 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ProjectAmount) and each.NetProjectAmount entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ReportAmount1) and each.NetReportAmount1 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ReportAmount2) and each.NetReportAmount2 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ReportAmount3) and each.NetReportAmount3 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ReportAmount4) and each.NetReportAmount4 entered)
								LocalMeasureIsEntered = true
							else
							if ((LoadAllMeasures or AllocateAmountType.ReportAmount5) and each.NetReportAmount5 entered)
								LocalMeasureIsEntered = true

						if (LocalSkipMeasureChecking or LocalMeasureIsEntered)
							include ProcessGeneralLedgerTotal					

			initialize Source
			if (!PrmFirstStep)
				AllocatingPreviousSteps	= true
				AllocationTransactionDetailQuery = true
				if (ProcessAllPostingBalance)
					LocalBusinessClassName 	= "AllocationTransactionDetail"
					LocalRelationName 		= "AllocationTransactionPostingBalanceRel"
					for each AllocationTransactionPostingBalanceRel
						include ProcessAllocationMatrix
				else
					if (LocalDebug)
						display "DynamicALTDMeasures:<DynamicALTDMeasures>"
					for each AllocationMatrixRel
						include ProcessAllocationMatrix

			if (LocalProcessSourceSummary)
				for each AllAllocationLineValuesRel
					initialize Source
					Source.Ledger						= LocalSourceLedger
					Source.AccountingEntity				= each.AccountingEntity
					Source.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
					Source.AccountingUnit				= each.AccountingUnit
					Source.Project						= each.Project
					Source.FinanceDimension1			= each.FinanceDimension1
					Source.FinanceDimension2			= each.FinanceDimension2
					Source.FinanceDimension3			= each.FinanceDimension3
					Source.FinanceDimension4			= each.FinanceDimension4
					Source.FinanceDimension5			= each.FinanceDimension5
					Source.FinanceDimension6			= each.FinanceDimension6
					Source.FinanceDimension7			= each.FinanceDimension7
					Source.FinanceDimension8			= each.FinanceDimension8
					Source.FinanceDimension9			= each.FinanceDimension9
					Source.FinanceDimension10			= each.FinanceDimension10
					CurrentCurrency						= each.AllocationLineValue.Currency
					TargetCurrency						= CurrentCurrency
					if (ComputeAndBypassSourceBalance)
						initialize CurrentValue
					else
						CurrentValue					= SourcePercentage * each.CurrentValue
						round CurrentValue to nearest DerivedRoundTo

					if (AllocateAllCurrencyAmounts)
						initialize CurrentCurrencyAmount
						CurrentCurrencyAmount.AccountingEntity		= each.AccountingEntity
						CurrentCurrencyAmount.Project				= each.Project
						CurrentCurrencyAmount.FunctionalAmount		= SourcePercentage * each.FunctionalAmount
						CurrentCurrencyAmount.AlternateAmount		= SourcePercentage * each.AlternateAmount
						CurrentCurrencyAmount.AlternateAmount2		= SourcePercentage * each.AlternateAmount2
						CurrentCurrencyAmount.AlternateAmount3		= SourcePercentage * each.AlternateAmount3
						CurrentCurrencyAmount.ProjectAmount			= SourcePercentage * each.ProjectAmount
						CurrentCurrencyAmount.ReportAmount1			= SourcePercentage * each.ReportAmount1
						CurrentCurrencyAmount.ReportAmount2			= SourcePercentage * each.ReportAmount2
						CurrentCurrencyAmount.ReportAmount3			= SourcePercentage * each.ReportAmount3
						CurrentCurrencyAmount.ReportAmount4			= SourcePercentage * each.ReportAmount4
						CurrentCurrencyAmount.ReportAmount5			= SourcePercentage * each.ReportAmount5
						LocalResult = CurrentCurrencyAmount.RoundAmounts	

						initialize SplitCurrentCurrencyAmount
						SplitCurrentCurrencyAmount.AccountingEntity		= each.AccountingEntity
						SplitCurrentCurrencyAmount.Project				= each.Project


					if (ComputeOverridesWithDetails or ComputeOverridesForDistinctDimensions)
						include SetDistinctDimension
						include GenerateOverrides
					
					include ProcessLoops
					if (ComputeOverridesWithDetails)
						if (FromOverrideCount > 0)
							invoke Purge FromTempOverridesRel
							invoke CommitTransaction
						if (ToOverrideCount > 0)
							invoke Purge ToTempOverridesRel
							invoke CommitTransaction
					include CheckCommitTransaction

		ProcessSource	
			if (ComputeOverridesWithDetails or ComputeOverridesForDistinctDimensions)
				include GenerateOverrides
			if (AllocateUnits)
				if (ComputeAndBypassSourceBalance)
					initialize CurrentValue
				else
					CurrentValue = OriginalValue
				
				if (PrmGenerateSourceValue)

					if (Compute entered)
						ComputedSourceValue		= ComputeValue
					include CreateAllocationLineSourceValue
					
				if (not LocalProcessSourceSummary)
					CurrentValue = CurrentValue*SourcePercentage
			else
				include ProcessMeasures	
            if (LocalProcessSourceSummary)
                include CreateOrUpdateAllocationLineValue
            else
                include ProcessLoops
				
			if (ComputeOverridesWithDetails)
				if (FromOverrideCount > 0)
					invoke CommitTransaction
					invoke Purge FromTempOverridesRel
				if (ToOverrideCount > 0)
					invoke CommitTransaction
					invoke Purge ToTempOverridesRel

		ProcessGLTotalForAccountOptimization			
			if (SourceAccountGroup entered) 
				LocalRelationName = "GLTotalPostingBalanceForAccountCustomGroupRel"
				for each GLTotalPostingBalanceForAccountCustomGroupRel
					include ProcessGeneralLedgerTotal
			else 
				LocalRelationName = "GeneralLedgerTotalPostingBalanceForAccountRel"
				for each GeneralLedgerTotalPostingBalanceForAccountRel
					include ProcessGeneralLedgerTotal

		ProcessGeneralLedgerTotal
			LocalFromOriginalSource				= true
			Source.Ledger						= each.GeneralLedgerTotal.Ledger
			Source.AccountingEntity				= each.AccountingEntity
			Source.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount
			Source.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
			Source.Project						= each.GeneralLedgerTotal.Project
			Source.FinanceDimension1			= each.FinanceDimension1
			Source.FinanceDimension2			= each.FinanceDimension2
			Source.FinanceDimension3			= each.FinanceDimension3
			Source.FinanceDimension4			= each.FinanceDimension4
			Source.FinanceDimension5			= each.FinanceDimension5
			Source.FinanceDimension6			= each.FinanceDimension6
			Source.FinanceDimension7			= each.FinanceDimension7
			Source.FinanceDimension8			= each.FinanceDimension8
			Source.FinanceDimension9			= each.FinanceDimension9
			Source.FinanceDimension10			= each.FinanceDimension10
			include SetSource

			if (AllocateUnits)

				OriginalValue= each.NetUnitsAmount
			else
				if (AllocateAmountType not entered)
					OriginalValue 	= each.NetTransactionAmount
					CurrentCurrency	= each.GeneralLedgerTotal.Currency
					if (AllocateAllCurrencyAmounts)
						initialize CurrentCurrencyAmount
						CurrentCurrencyAmount.AccountingEntity		= each.AccountingEntity
						CurrentCurrencyAmount.Project				= each.GeneralLedgerTotal.Project
						CurrentCurrencyAmount.FunctionalAmount		= each.NetFunctionalAmount
						CurrentCurrencyAmount.AlternateAmount		= each.NetAlternateAmount
						CurrentCurrencyAmount.AlternateAmount2		= each.NetAlternateAmount2
						CurrentCurrencyAmount.AlternateAmount3		= each.NetAlternateAmount3
						CurrentCurrencyAmount.ProjectAmount			= each.NetProjectAmount
						CurrentCurrencyAmount.ReportAmount1			= each.NetReportAmount1
						CurrentCurrencyAmount.ReportAmount2			= each.NetReportAmount2
						CurrentCurrencyAmount.ReportAmount3			= each.NetReportAmount3
						CurrentCurrencyAmount.ReportAmount4			= each.NetReportAmount4
						CurrentCurrencyAmount.ReportAmount5			= each.NetReportAmount5

						initialize SplitCurrentCurrencyAmount
						SplitCurrentCurrencyAmount.AccountingEntity		= each.AccountingEntity
						SplitCurrentCurrencyAmount.Project				= each.GeneralLedgerTotal.Project							
				else
				if (AllocateAmountType.FunctionalAmount)
					OriginalValue 	= each.NetFunctionalAmount
					CurrentCurrency	= Source.AccountingEntity.FunctionalCurrency
				else 
				if (AllocateAmountType.AlternateAmount)
					OriginalValue 	= each.NetAlternateAmount
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency
				else 
				if (AllocateAmountType.AlternateAmount2)
					OriginalValue 	= each.NetAlternateAmount2
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency2
				else 
				if (AllocateAmountType.AlternateAmount3)
					OriginalValue 	= each.NetAlternateAmount3
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency3
				else 
				if (AllocateAmountType.ProjectAmount)
					OriginalValue 	= each.NetProjectAmount
					CurrentCurrency	= Source.Project.Currency
				else 
				if (AllocateAmountType.ReportAmount1)
					OriginalValue 	= each.NetReportAmount1
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyOne
				else 
				if (AllocateAmountType.ReportAmount2)
					OriginalValue 	= each.NetReportAmount2
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyTwo
				else 
				if (AllocateAmountType.ReportAmount3)
					OriginalValue 	= each.NetReportAmount3
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyThree
				else 
				if (AllocateAmountType.ReportAmount4)
					OriginalValue 	= each.NetReportAmount4
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFour
				else 
				if (AllocateAmountType.ReportAmount5)
					OriginalValue 	= each.NetReportAmount5
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFive
				else
					OriginalValue 	= each.NetTransactionAmount
					CurrentCurrency	= each.GeneralLedgerTotal.Currency

			include ProcessSource
			include CheckCommitTransaction
			
		ProcessSnapshot
			LocalFromOriginalSource				= true
			Source.Ledger						= each.FinanceCodeBlock.Ledger
			Source.AccountingEntity				= each.FinanceCodeBlock.ToAccountingEntity
			Source.GeneralLedgerChartAccount	= each.FinanceCodeBlock.GeneralLedgerChartAccount
			Source.AccountingUnit				= each.FinanceCodeBlock.AccountingUnit
			Source.Project						= each.FinanceCodeBlock.Project
			Source.FinanceDimension1			= each.FinanceCodeBlock.FinanceDimension1
			Source.FinanceDimension2			= each.FinanceCodeBlock.FinanceDimension2
			Source.FinanceDimension3			= each.FinanceCodeBlock.FinanceDimension3
			Source.FinanceDimension4			= each.FinanceCodeBlock.FinanceDimension4
			Source.FinanceDimension5			= each.FinanceCodeBlock.FinanceDimension5
			Source.FinanceDimension6			= each.FinanceCodeBlock.FinanceDimension6
			Source.FinanceDimension7			= each.FinanceCodeBlock.FinanceDimension7
			Source.FinanceDimension8			= each.FinanceCodeBlock.FinanceDimension8
			Source.FinanceDimension9			= each.FinanceCodeBlock.FinanceDimension9
			Source.FinanceDimension10			= each.FinanceCodeBlock.FinanceDimension10
			include SetSource

			if (AllocateUnits)

				OriginalValue= each.UnitsAmount
			else
				if (AllocateAmountType not entered)
					OriginalValue 	= each.TransactionAmount
					CurrentCurrency	= each.CurrencyCode.Currency
				else
				if (AllocateAmountType.FunctionalAmount)
					OriginalValue 	= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					CurrentCurrency	= Source.AccountingEntity.FunctionalCurrency
				else 
				if (AllocateAmountType.AlternateAmount)
					OriginalValue 	= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency
				else 
				if (AllocateAmountType.AlternateAmount2)
					OriginalValue 	= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency2
				else 
				if (AllocateAmountType.AlternateAmount3)
					OriginalValue 	= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					CurrentCurrency	= Source.AccountingEntity.AlternateCurrency3
				else 
				if (AllocateAmountType.ProjectAmount)
					OriginalValue 	= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					CurrentCurrency	= Source.Project.Currency
				else 
				if (AllocateAmountType.ReportAmount1)
					OriginalValue 	= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyOne
				else 
				if (AllocateAmountType.ReportAmount2)
					OriginalValue 	= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyTwo
				else 
				if (AllocateAmountType.ReportAmount3)
					OriginalValue 	= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyThree
				else 
				if (AllocateAmountType.ReportAmount4)
					OriginalValue 	= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFour
				else 
				if (AllocateAmountType.ReportAmount5)
					OriginalValue 	= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					CurrentCurrency	= FinanceEnterpriseGroup.ReportCurrencyFive
				else
					OriginalValue 	= each.TransactionAmount
					CurrentCurrency	= each.CurrencyCode.Currency

			include ProcessSource
			include CheckCommitTransaction
			
		ProcessAllocationMatrix
			initialize LocalFromOriginalSource
			Source.Ledger						= each.FinanceCodeBlock.Ledger
			Source.AccountingEntity				= each.FinanceCodeBlock.ToAccountingEntity
			Source.GeneralLedgerChartAccount	= each.FinanceCodeBlock.GeneralLedgerChartAccount
			Source.AccountingUnit				= each.FinanceCodeBlock.AccountingUnit
			Source.Project						= each.FinanceCodeBlock.Project
			Source.FinanceDimension1			= each.FinanceCodeBlock.FinanceDimension1
			Source.FinanceDimension2			= each.FinanceCodeBlock.FinanceDimension2
			Source.FinanceDimension3			= each.FinanceCodeBlock.FinanceDimension3
			Source.FinanceDimension4			= each.FinanceCodeBlock.FinanceDimension4
			Source.FinanceDimension5			= each.FinanceCodeBlock.FinanceDimension5
			Source.FinanceDimension6			= each.FinanceCodeBlock.FinanceDimension6
			Source.FinanceDimension7			= each.FinanceCodeBlock.FinanceDimension7
			Source.FinanceDimension8			= each.FinanceCodeBlock.FinanceDimension8
			Source.FinanceDimension9			= each.FinanceCodeBlock.FinanceDimension9
			Source.FinanceDimension10			= each.FinanceCodeBlock.FinanceDimension10
			include SetSource
			if (AllocateUnits)

				CurrentValue = each.UnitsAmount
			else
				CurrentCurrency	= each.CurrencyCode.Currency
				CurrentValue	= each.TransactionAmount
				
				if (AllocateAllCurrencyAmounts)
					initialize CurrentCurrencyAmount
					CurrentCurrencyAmount.AccountingEntity		= each.FinanceCodeBlock.ToAccountingEntity
					CurrentCurrencyAmount.Project				= each.FinanceCodeBlock.Project
					CurrentCurrencyAmount.FunctionalAmount		= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					CurrentCurrencyAmount.AlternateAmount		= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					CurrentCurrencyAmount.AlternateAmount2		= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					CurrentCurrencyAmount.AlternateAmount3		= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					CurrentCurrencyAmount.ProjectAmount			= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					CurrentCurrencyAmount.ReportAmount1			= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					CurrentCurrencyAmount.ReportAmount2			= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					CurrentCurrencyAmount.ReportAmount3			= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					CurrentCurrencyAmount.ReportAmount4			= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					CurrentCurrencyAmount.ReportAmount5			= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	

					initialize SplitCurrentCurrencyAmount
					SplitCurrentCurrencyAmount.AccountingEntity		= each.FinanceCodeBlock.ToAccountingEntity
					SplitCurrentCurrencyAmount.Project				= each.FinanceCodeBlock.Project			

			if (PrmGenerateSourceValue)
				include CreateAllocationLineSourceValue
			include CreateOrUpdateAllocationLineValue
			include CheckCommitTransaction
		

		LoopOverrideCall
			invoke LoopOverrides
				invoked.PrmLevel = PrmLevel -1
				invoked.PrmOverrideAddress = LocalOverrideAddress
				invoked.PrmIsCurrentFrom = PrmIsCurrentFrom


	Actions
 		Create is an Action
			Field Rules

			Entrance Rules
				include UpdateOverrideStructures
            Exit Rules
                initialize SourceAddress.Ledger
				
    	Update is an Update Action
			Field Rules

    		Entrance Rules
    			include UpdateOverrideStructures
    			if (FromOverrideSummary entered
    			or  HasFromGroupOverrides
    			or  HasFromWeightCompute)
					constraint (FromOverridesRel not exists)
						"ManualOverridesExist;CannotSpecifyFromGroupOrFromSummaryOrWeight"
    			if (ToOverrideSummary entered
    			or  HasToGroupOverrides
    			or  HasToWeightCompute)
					constraint (ToOverridesRel not exists)
						"ManualOverridesExist;CannotSpecifyToGroupOrToSummaryOrWeight"
						
				if (FromOverrideSummary entered
				or  HasFromGroupOverrides
				or  HasFromWeightCompute
				or  FromOverridesRel exists)
					constraint (not FromOverrideOption changed)
						"ManualOverride,SummaryOverride,GroupOverride,OrSummary/groupWeightComputeExists;CannotChangeOverrideOption"
						
				if (ToOverrideSummary entered
				or  HasToGroupOverrides
				or  HasToWeightCompute
				or  ToOverridesRel exists)
					constraint (not ToOverrideOption changed)
						"ManualOverride,SummaryOverride,GroupOverride,OrSummary/groupWeightComputeExists;CannotChangeOverrideOption"
						
				if (FromOverrideSetOption changed
				and FromOverridesRel exists)
					constraint (FromOverrideSetOption.ManualOverride)
						"ManualOverridesExist;CannotChangeOverrideType"
						
				if (ToOverrideSetOption changed
				and ToOverridesRel exists)
					constraint (ToOverrideSetOption.ManualOverride)
						"ManualOverridesExist;CannotChangeOverrideType"

			Exit Rules
                initialize SourceAddress.Ledger
				if (FromMultipleDimensionCompute entered
				and FromMultipleDimensionCompute changed
				and old FromMultipleDimensionCompute not entered)
					for each FromOverridesRel
						invoke DeleteWeight each
						include CheckCommitTransaction
				
				if (ToMultipleDimensionCompute entered
				and ToMultipleDimensionCompute changed
				and old ToMultipleDimensionCompute not entered)
					for each ToOverridesRel
						invoke DeleteWeight each
						include CheckCommitTransaction

    	Delete is a Delete Action
			
		CopyAllocationLine is an Instance Action
			disable multiple instance selection
            Parameters
                PrmAllocationControl				is an AllocationControl
               		default label is "AllocationControl"
                PrmAllocation						is an Allocation
                	default label is "Allocation"
                PrmNewAllocationLine				is like AllocationLine
                	default label is "NewAllocationLine"
                PrmNewDescription					is a Description
                	default label is "NewDescription"		
	
            Parameter Rules
				PrmAllocationControl
					required
                    initial value is AllocationControl
					if (AllocationControl.Type.Budget
					and AllocationControl.Scenario != PrmAllocationControl.Scenario)
						constraint (PrmAllocationControl.Scenario.Basis = AllocationControl.Scenario.Basis)
							"BudgetScenarioShouldHaveTheSameBasis"
						
						constraint (AllocationControl.Scenario.HasAccountingEntity       = PrmAllocationControl.Scenario.HasAccountingEntity
						and         AllocationControl.Scenario.HasPostingAccountingUnit  = PrmAllocationControl.Scenario.HasPostingAccountingUnit
						and         AllocationControl.Scenario.HasPostingAccount         = PrmAllocationControl.Scenario.HasPostingAccount
						and         AllocationControl.Scenario.HasPostingProject         = PrmAllocationControl.Scenario.HasPostingProject
						and         AllocationControl.Scenario.HasPostingDimension1      = PrmAllocationControl.Scenario.HasPostingDimension1
						and         AllocationControl.Scenario.HasPostingDimension2      = PrmAllocationControl.Scenario.HasPostingDimension2
						and         AllocationControl.Scenario.HasPostingDimension3      = PrmAllocationControl.Scenario.HasPostingDimension3
						and         AllocationControl.Scenario.HasPostingDimension4      = PrmAllocationControl.Scenario.HasPostingDimension4
						and         AllocationControl.Scenario.HasPostingDimension5      = PrmAllocationControl.Scenario.HasPostingDimension5
						and         AllocationControl.Scenario.HasPostingDimension6      = PrmAllocationControl.Scenario.HasPostingDimension6
						and         AllocationControl.Scenario.HasPostingDimension7      = PrmAllocationControl.Scenario.HasPostingDimension7
						and         AllocationControl.Scenario.HasPostingDimension8      = PrmAllocationControl.Scenario.HasPostingDimension8
						and         AllocationControl.Scenario.HasPostingDimension9      = PrmAllocationControl.Scenario.HasPostingDimension9
						and         AllocationControl.Scenario.HasPostingDimension10     = PrmAllocationControl.Scenario.HasPostingDimension10)
							"NewScenarioIsNotCompatibleWithTheOldScenario"
				PrmAllocation
					required
                    initial value is Allocation
					if (Allocation.CustodialAccountInterest)
						constraint (PrmAllocation.CustodialAccountInterest)
							"CannotCopyToANon<actor.context.FinanceEnterpriseGroup.FinanceDimension10Label>InterestAllocation"
					else
						constraint (not PrmAllocation.CustodialAccountInterest)
							"CannotCopyToA<actor.context.FinanceEnterpriseGroup.FinanceDimension10Label>InterestAllocation"
				PrmNewAllocationLine
					required
                    initial value is DerivedAllocationCopyInitialValue
					LocalNewAllocationControl		= PrmAllocationControl
					LocalNewAllocation				= PrmAllocation
					LocalNewAllocationLine			= PrmNewAllocationLine
					constraint (DuplicateAllocationLineRel not exists)
    					"AllocationLineAlreadyExists"
    			PrmNewDescription
                    initial value is DerivedDescriptionCopyInitialValue
    			
            Action Rules
                invoke Create AllocationLine
                    fill in fields from this instance
                    invoked.AllocationControl		= PrmAllocationControl
                    invoked.Allocation				= PrmAllocation
                    invoked.AllocationLine      	= PrmNewAllocationLine
                    invoked.Description				= PrmNewDescription
                    
                for each AllocationLineOverridesRel
                    if (each.Direction.To)
	                    invoke Create AllocationLineOverride
							fill in fields from each
							invoked.AllocationControl	= PrmAllocationControl
	                  		invoked.Allocation			= PrmAllocation
	                    	invoked.AllocationLine      = PrmNewAllocationLine
					else
						invoke CreateFrom AllocationLineOverride
							fill in fields from each
							invoked.AllocationControl	= PrmAllocationControl
	                  		invoked.Allocation			= PrmAllocation
	                    	invoked.AllocationLine      = PrmNewAllocationLine
	
		Check is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmAllocationSourceSystem	is an AllocationSourceSystem
				PrmAllocationControl		is an AllocationControl
				PrmAllocation				is an Allocation
				PrmAllocationGroup			is an AllocationGroup
				PrmRunningAllAllocations	is Boolean
				PrmAllocationRun			is an AllocationRun
				PrmFromStepNumber			is an AllocationStepNumber
				PrmToStepNumber				is an AllocationStepNumber
			Local Fields
				LocalErrorMessage			is Alpha 150
			Instance Selection
				where (FinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
				and    AllocationSourceSystem	= PrmAllocationSourceSystem
				and    AllocationControl		= PrmAllocationControl
				and    Active					= true
				and    (AllocationStep			>= PrmFromStepNumber
				and		AllocationStep			<= PrmToStepNumber)
				and    (PrmRunningAllAllocations
				or      Allocation				= PrmAllocation
				or      (PrmAllocationGroup entered and Allocation.AllocationGroup = PrmAllocationGroup)))
			Action Rules
				Set Rules
					Entrance Rules
					
					Exit Rules
						if (LocalErrorMessage entered)
							invoke Update PrmAllocationRun
								invoked.ErrorMessage = LocalErrorMessage
					
				Empty Set Rules
					invoke Update PrmAllocationRun
						invoked.ErrorMessage = NoActiveLinesErrorMessage
				
				Instance Rules
					if (LocalErrorMessage not entered
					and PrmAllocationRun.ErrorMessage not entered)
						if (AccountStructure not exists)
							LocalErrorMessage = NoAccountStructureErrorMessage
						else
						if (FinanceEnterpriseGroup.AccountingUnitSelected
						and AccountingUnitStructure not exists)
							LocalErrorMessage = NoAccountingUnitStructureErrorMessage
						else
						if (FinanceEnterpriseGroup.ProjectEntry
						and ProjectStructure not exists)
							LocalErrorMessage = NoProjectStructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension1Entry
						and FinanceDimension1Structure not exists)
							LocalErrorMessage = NoFinanceDimension1StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension2Entry
						and FinanceDimension2Structure not exists)
							LocalErrorMessage = NoFinanceDimension2StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension3Entry
						and FinanceDimension3Structure not exists)
							LocalErrorMessage = NoFinanceDimension3StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension4Entry
						and FinanceDimension4Structure not exists)
							LocalErrorMessage = NoFinanceDimension4StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension5Entry
						and FinanceDimension5Structure not exists)
							LocalErrorMessage = NoFinanceDimension5StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension6Entry
						and FinanceDimension6Structure not exists)
							LocalErrorMessage = NoFinanceDimension6StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension7Entry
						and FinanceDimension7Structure not exists)
							LocalErrorMessage = NoFinanceDimension7StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension8Entry
						and FinanceDimension8Structure not exists)
							LocalErrorMessage = NoFinanceDimension8StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension9Entry
						and FinanceDimension9Structure not exists)
							LocalErrorMessage = NoFinanceDimension9StructureErrorMessage
						else
						if (FinanceEnterpriseGroup.FinanceDimension10Entry
						and FinanceDimension10Structure not exists)
							LocalErrorMessage = NoFinanceDimension10StructureErrorMessage
						else
						if (PrmAllocationRun.JournalizeIfComplete)
							LocalErrorMessage = Allocation.AllocationMultiplePostingsError
						
		AddManualToOverridesFromSummaryAccountingUnit is an Instance Action
			restricted
			valid when (ToDimensionWithMultipleOverrides.Type.AccountingUnit)
			Parameters
				AccountingEntity
				AccountingUnit
			Action Rules
				OverrideAccountingEntity		= AccountingEntity
				OverrideAccountingUnit			= AccountingUnit.AccountingUnit
				for each OverrideAccountingUnitShadowRel
					if ( each.AccountingUnit.Active)
						invoke Create AllocationLineOverride
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AllocationSourceSystem  = AllocationSourceSystem
							invoked.AllocationControl		= AllocationControl
							invoked.Allocation				= Allocation
							invoked.AllocationLine			= AllocationLine

							invoked.Direction				= 1
							invoked.AccountingEntity		= each.AccountingEntity
							invoked.AccountingUnit			= each.AccountingUnit
		DeleteAllManualToOverrides is an Instance Action
			restricted
			valid when (ToDimensionWithMultipleOverrides entered)
			Action Rules
				invoke Delete ToOverridesRel
				
		DeleteAllManualFromOverrides is an Instance Action
			restricted
			valid when (FromDimensionWithMultipleOverrides entered)
			Action Rules
				invoke Delete FromOverridesRel
				
		SetAllLinesActive is a Set Action
			restricted
            Action Rules
                Instance Rules
                	Active	= true


		RunStep is a Set Action
			restricted
			run in foreground
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAllocationSourceSystem	is a AllocationSourceSystem
					default label is "SourceSystem"
				PrmAllocationControl		is a AllocationControl
					default label is "AllocationControl"
				PrmJournalizeGroup			is a JournalizeGroup
					default label is "JournalizeGroup"
				PrmStepNumber				is a AllocationStepNumber
					default label is "StepNumber"
				PrmDate						is Date
					default label is "Date"
				PrmStartAllocationPeriod	is a GeneralLedgerCalendarPeriod
					default label is "StartAllocationPeriod"
				PrmAllocationPeriod			is a GeneralLedgerCalendarPeriod
					default label is "AllocationPeriod"
				PrmAllocation				is a Allocation
					default label is "Allocation"
				PrmAllocationGroup			is a AllocationGroup
					default label is "AllocationGroup"
				PrmFirstStep				is Boolean
					default label is "FirstStep"
				PrmGenerateListingData	is Boolean
					default label is "GenerateListingData"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmEnterpriseGroup
				and AllocationSourceSystem		= PrmAllocationSourceSystem
				and AllocationControl			= PrmAllocationControl
				and AllocationStep				= PrmStepNumber
				and (Allocation = PrmAllocation
					or (PrmAllocationGroup entered and Allocation.AllocationGroup = PrmAllocationGroup)
					or (PrmAllocation not entered and PrmAllocationGroup not entered)))
            Action Rules
                Instance Rules
                	invoke Run 
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoked.PrmDate						= PrmDate
						invoked.PrmAllocationPeriod			= PrmAllocationPeriod
						invoked.PrmStartAllocationPeriod	= PrmStartAllocationPeriod
						invoked.PrmFirstStep				= PrmFirstStep
						invoked.PrmGenerateListingData		= PrmGenerateListingData


		Run is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmAllocationSourceSystem	is an AllocationSourceSystem
				PrmAllocationControl		is an AllocationControl
				PrmAllocationStep			is an AllocationStepNumber
				PrmAllocation				is an Allocation
				PrmAllocationGroup			is an AllocationGroup
				PrmRunningAllAllocations	is Boolean
				PrmJournalizeGroup		is a JournalizeGroup
					default label is "JournalizeGroup"
				PrmDate					is Date
					default label is "Date"
				PrmStartAllocationPeriod	is a GeneralLedgerCalendarPeriod
					default label is "StartAllocationPeriod"
				PrmAllocationPeriod		is a GeneralLedgerCalendarPeriod
					default label is "AllocationPeriod"
				PrmFirstStep			is Boolean
					default label is "FirstStep"
				PrmGenerateListingData	is Boolean
					default label is "GenerateListingData"
				PrmCapacityLedger		is a Ledger
					default label is "CapacityLedger"
				PrmGenerateSourceValue	is Boolean
					default label is "IncludeSourceDetails"
				PrmAllocationSnapshot	is an AllocationSnapshot	

        GenerateDetailsForListingReport is an Instance Action  
            restricted
            Parameters
                PrmAllocationRun        is like AllocationRun
                PrmDate                 is Date
                    default label is "Date"
				PrmAllocationPeriod		is a GeneralLedgerCalendarPeriod
					default label is "AllocationPeriod"
                PrmGenerateSourceValue  is Boolean

            Action Rules

                initialize JournalizeGroup
                initialize Source
				initialize LineSourceCounter

                JournalizeGroup                 = PrmAllocationRun
				AllocationPeriod		        = PrmAllocationPeriod 
                CurrentPeriod                   = AllocationPeriod
                LocalSourceLedger               = TransientSourceLedger

                GeneratingSourceListingData     = true

                AllocationContext.Period	    = AllocationPeriod

				AllocationContext.Scenario      = DerivedScenarioWithFEG

                SourceAddressDimensionCode		= SourceAddress.DimensionCode

                include CreateSingleOverride

                if (!ComputeOverridesForDistinctDimensions
                and not Allocation.CustodialAccountInterest)
                    include GenerateOverridesInternal

                if (!ComputeOverridesForDistinctDimensions)

                    if (Allocation.CustodialAccountInterest)
                        initialize TotalSplitWeight
                        initialize ToTotalSplitWeight

                        for each ToTempOverridesRel
					        ToTotalSplitWeight += each.WeightDecimal
                    
                    include UpdateOverridePercentageForListingReport

				for each MatrixRel
                    
                    include SetCurrentValue

                    if (CurrentValue entered 
					or (ZeroTransAmountAllocationEnabled and CurrentCurrencyAmount.HasAmountsEntered))
						
                        include SetIndividualSource

                        include CreateAllocationLineSource

                        if (ComputeOverridesForDistinctDimensions
                        and OverrideHeaderRel not exists
                        and not Allocation.CustodialAccountInterest)

                            include GenerateOverridesInternal

                            include UpdateOverridePercentageForListingReport

                            if (ToTempOverridesRel exists
                            or  FromTempOverridesRel exists) 

                                invoke Create AllocationLineTempOverrideHeader
                                    invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
                                    invoked.AllocationSourceSystem				= AllocationSourceSystem
                                    invoked.AllocationControl					= AllocationControl
                                    invoked.Allocation							= Allocation
                                    invoked.AllocationLine						= AllocationLine
                                    invoked.AllocationRun						= AllocationRunRel.AllocationRun
                                    invoked.AllocationLineTempOverrideHeader	= LocalDistinctDimensionSource.DimensionCode

                    include CheckCommitTransaction

				include CommitResetCounter

		RunLine is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup		is a JournalizeGroup
					default label is "JournalizeGroup"
				PrmDate					is Date
					default label is "Date"
				PrmStartAllocationPeriod	is a GeneralLedgerCalendarPeriod
					default label is "StartAllocationPeriod"
				PrmAllocationPeriod		is a GeneralLedgerCalendarPeriod
					default label is "AllocationPeriod"
				PrmFirstStep			is Boolean
					default label is "FirstStep"
				PrmGenerateListingData	is Boolean
					default label is "GenerateListingData"
				PrmCapacityLedger		is a Ledger
					default label is "CapacityLedger"
				PrmGenerateSourceValue	is Boolean
					default label is "IncludeSourceDetails"
				PrmAllocationSnapshot	is an AllocationSnapshot
			Local Fields
				LocalSourceValueSet		is Boolean
				LocalErrorCount			is Numeric size 6

			Action Rules
				JournalizeGroup			= PrmJournalizeGroup
				PostingDate				= PrmDate
				TransactionDate			= PrmDate
				StartAllocationPeriod   = PrmStartAllocationPeriod
				AllocationPeriod		= PrmAllocationPeriod
				AllocationYear			= PrmAllocationPeriod.Year
                
				if (AllocationLoggingEnabled)
					invoke Start AllocationRunJobRel
					invoke CommitTransaction


				
				if (AllocationLineReportRel exists)
					invoke Delete AllocationLineReportRel

				invoke Create AllocationLineReport
					invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
					invoked.AllocationRun									= AllocationRunRel.AllocationRun					
					invoked.AllocationLineReport.AllocationSourceSystem  	= AllocationSourceSystem
					invoked.AllocationLineReport.AllocationControl			= AllocationControl
					invoked.AllocationLineReport.Allocation					= Allocation
					invoked.AllocationLineReport.AllocationLine				= AllocationLine

                initialize LocalProcessSourceSummary
                if (not PrmFirstStep or ProcessAllPostingBalance
                or  HasCustomGroupToSummarize)
                    LocalProcessSourceSummary = true
				
				initialize LocalOverthrownAmountOption
				if (MinimumTransactionAmount entered) 
					if (OverthrownAmountOption.DefaultFromAllocation)
						if (Allocation.OverthrownAmountOption.LastTransaction)
							LocalOverthrownAmountOption = OverthrownAmountOption.LastTransaction
						else
							LocalOverthrownAmountOption = OverthrownAmountOption.LastHighestWeight
					else
						LocalOverthrownAmountOption = OverthrownAmountOption

				if (PrmCapacityLedger entered)
					LocalTransactionLedger	= PrmCapacityLedger

					if (AllocationSplitCallBack entered
					and	AllocationSplitCallBack.SupportsCapacity)
						UsingCapacityCalculation	= true
				else
					LocalTransactionLedger		= Allocation.Ledger

				LocalSourceLedger			= TransientSourceLedger

				if (not Allocation.CustodialAccountInterest)
					for each AllTempOverridesRel
						invoke Delete each
						include CheckCommitTransaction
				
				for each AllAllocationTransactionDetailRel
					if (each.HasError)
						increment LocalErrorCount
					invoke Delete each
					include CheckCommitTransaction
					
				if (LocalErrorCount > 0)
					decrement  AllocationRunRel.AllocationRun.ErrorCount by LocalErrorCount

				for each AllAllocationLineValuesRel
                    display "eachAllocationLineValue"
					invoke Delete each
					include CheckCommitTransaction

				for each AllAllocationLineSourceValueRel
					invoke Delete each
					include CheckCommitTransaction

				for each AllocationLineSourceDetailsRel
					invoke Delete each
					include CheckCommitTransaction

				for each AllOverrideHeaderRel
					invoke Delete each
					include CheckCommitTransaction
				
				for each AllocationLineSingleOverrideRel
					invoke Delete each
					include CheckCommitTransaction

				AllocationContext.Period	= AllocationPeriod
				AllocationContext.PeriodYTD	= CubeAllocationPeriodYTDRel.GeneralLedgerCalendarPeriod
				AllocationContext.PeriodLTD	= CubeAllocationPeriodLTDRel.GeneralLedgerCalendarPeriod
				AllocationContext.PeriodBB	= AllocationPeriodBBField
				if (!ComputeOverridesWithDetails and !ComputeOverridesForDistinctDimensions)
					AllocationContext.Source	= SourceAddress
				AllocationContext.Scenario  = DerivedScenarioWithFEG
				
				SourceAddressDimensionCode		= SourceAddress.DimensionCode
				include GenerateSourceListingData

				
				if (AllocationSplitCallBack entered)
					invoke Create AllocationCallBackResult
						assign result to AllocationCallBackResultView					
						invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
						invoked.AllocationSourceSystem  					= AllocationSourceSystem
						invoked.AllocationControl							= AllocationControl
						invoked.Allocation									= Allocation
						invoked.AllocationLine								= AllocationLine
						invoked.AllocationRun								= AllocationRunRel.AllocationRun
					
					AllocationSplitCallBack.AllocationRunContext			= AllocationRunRel.AllocationRun
					AllocationSplitCallBack.AllocationCallBackResult		= AllocationCallBackResultView.AllocationCallBackResult
					AllocationSplitCallBack.Period							= AllocationPeriod
					AllocationSplitCallBack.AllocationDate					= PostingDate




















				if (ComputePeriodically and AllocateYearOrLifeToDate)
					if (StartAllocationPeriod entered 
					and StartAllocationPeriod.Year = AllocationPeriod.Year)
						for each StartToEndAllocationPeriodsRel
							display "CurrentPeriod:<each.GeneralLedgerCalendarPeriod>"

							CurrentPeriod = each.GeneralLedgerCalendarPeriod
							AllocationContext.Period	= CurrentPeriod
							AllocationContext.PeriodYTD	= CubeAllocationPeriodYTDRel.GeneralLedgerCalendarPeriod
							AllocationContext.PeriodLTD	= CubeAllocationPeriodLTDRel.GeneralLedgerCalendarPeriod
							AllocationContext.PeriodBB	= AllocationPeriodBBField
							CurrencyDate = CurrentEndDate
							if (!ComputeOverridesWithDetails and !ComputeOverridesForDistinctDimensions)
								include GenerateOverrides
							include ProcessPeriod
							include CheckCommitTransaction
					else
						for each YearToDateAllocationPeriodsRel
							display "CurrentPeriod:<each.GeneralLedgerCalendarPeriod>"

							CurrentPeriod = each.GeneralLedgerCalendarPeriod
							AllocationContext.Period	= CurrentPeriod
							AllocationContext.PeriodYTD	= CubeAllocationPeriodYTDRel.GeneralLedgerCalendarPeriod
							AllocationContext.PeriodLTD	= CubeAllocationPeriodLTDRel.GeneralLedgerCalendarPeriod
							AllocationContext.PeriodBB	= AllocationPeriodBBField
							CurrencyDate = CurrentEndDate
							display "CurrencyDate:<CurrencyDate>"
							if (!ComputeOverridesWithDetails and !ComputeOverridesForDistinctDimensions)
								include GenerateOverrides
							include ProcessPeriod
							include CheckCommitTransaction
				else
					CurrentPeriod = AllocationPeriod
					CurrencyDate = AllocationRunRel.AllocationRun.PostingDate
					if (!ComputeOverridesWithDetails and !ComputeOverridesForDistinctDimensions)
						include GenerateOverrides
					include ProcessPeriod
					
				commit transaction
				invoke Delete AllAllocationLineValuesRel

				if (PrmGenerateListingData)
					invoke Create AllocationLineSingleOverride
						invoked.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
						invoked.AllocationSourceSystem  					= AllocationSourceSystem
						invoked.AllocationControl							= AllocationControl
						invoked.Allocation									= Allocation
						invoked.AllocationLine								= AllocationLine
						invoked.AllocationRun								= AllocationRunRel.AllocationRun
						invoked.FromOverride								= FromOverride
						invoked.ToOverride									= ToOverride
				
				invoke Delete AllocationSplitCallBack.AllocationCallBackResult	














				
				if (AllocationLoggingEnabled)
					invoke End AllocationRunJobRel

		LoopOverrides is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmLevel					is Numeric size 1
				PrmOverrideAddress			is a FinanceAddress
				PrmIsCurrentFrom			is Boolean
			Local Fields
				LocalOverrideAddress		is a FinanceAddress
				LocalOverrideDimensionType	is a CodeBlockDimensionType
				LocalOverrideSummary		is a FinanceAddress
				LocalWeight					is Decimal 31.4 
				LocalAllocationRun			is an AllocationRun
				LocalCompute				is an AllocationLineTempOverride compute
				LocalTempOverrideView		is an AllocationLineTempOverride view
				LocalTempOverride			is an AllocationLineTempOverride

			Action Rules
				LocalOverrideAddress = PrmOverrideAddress
				LocalWeight = 1

				if (PrmLevel > 0)
					if (PrmLevel = 2)
						if (PrmIsCurrentFrom)
							LocalOverrideDimensionType 	= FromDimensionWithMultipleOverrides2.Type
							LocalOverrideSummary 		= FromOverrideSummary 
						else
							LocalOverrideDimensionType 	= ToDimensionWithMultipleOverrides2.Type
							LocalOverrideSummary 		= ToOverrideSummary
					if (PrmLevel = 1)
						if (PrmIsCurrentFrom)
							LocalOverrideDimensionType 	= FromDimensionWithMultipleOverrides.Type
							LocalOverrideSummary 		= FromOverrideSummary
						else
							LocalOverrideDimensionType 	= ToDimensionWithMultipleOverrides.Type
							LocalOverrideSummary		= ToOverrideSummary


					if (LocalOverrideDimensionType.AccountingUnit)
						OverrideAccountingEntity	= LocalOverrideSummary.AccountingEntity
						OverrideAccountingUnit		= LocalOverrideSummary.AccountingUnit

						for each AccountingUnitOverrideShadowRel
							if (each.AccountingUnit.Active)
								LocalOverrideAddress.AccountingEntity	= OverrideAccountingEntity
								LocalOverrideAddress.AccountingUnit		= each.AccountingUnit
								include LoopOverrideCall
					else
					if (LocalOverrideDimensionType.Account)
						OverrideAccount		= LocalOverrideSummary.GeneralLedgerChartAccount

						for each AccountOverrideShadowRel
							if (each.GeneralLedgerChartAccount.Active)
								LocalOverrideAddress.GeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Project)
						OverrideProject		= LocalOverrideSummary.Project

						for each ProjectOverrideShadowRel
							if (each.Project.Active)
								LocalOverrideAddress.Project	= each.Project
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension1)
						OverrideDimension1		= LocalOverrideSummary.FinanceDimension1

						for each Dimension1OverrideShadowRel
							if (each.FinanceDimension1.Active)
								LocalOverrideAddress.FinanceDimension1	= each.FinanceDimension1
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension2)
						OverrideDimension2		= LocalOverrideSummary.FinanceDimension2

						for each Dimension2OverrideShadowRel
							if (each.FinanceDimension2.Active)
								LocalOverrideAddress.FinanceDimension2	= each.FinanceDimension2
								include LoopOverrideCall		

					else
					if (LocalOverrideDimensionType.Dimension3)
						OverrideDimension3		= LocalOverrideSummary.FinanceDimension3

						for each Dimension3OverrideShadowRel
							if (each.FinanceDimension3.Active)
								LocalOverrideAddress.FinanceDimension3	= each.FinanceDimension3
								include LoopOverrideCall
								
					else
					if (LocalOverrideDimensionType.Dimension4)
						OverrideDimension4		= LocalOverrideSummary.FinanceDimension4

						for each Dimension4OverrideShadowRel
							if (each.FinanceDimension4.Active)
								LocalOverrideAddress.FinanceDimension4	= each.FinanceDimension4
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension5)
						OverrideDimension5		= LocalOverrideSummary.FinanceDimension5

						for each Dimension5OverrideShadowRel
							if (each.FinanceDimension5.Active)
								LocalOverrideAddress.FinanceDimension5	= each.FinanceDimension5
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension6)
						OverrideDimension6		= LocalOverrideSummary.FinanceDimension6

						for each Dimension6OverrideShadowRel
							if (each.FinanceDimension6.Active)
								LocalOverrideAddress.FinanceDimension6	= each.FinanceDimension6
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension7)
						OverrideDimension7		= LocalOverrideSummary.FinanceDimension7

						for each Dimension7OverrideShadowRel
							if (each.FinanceDimension7.Active)
								LocalOverrideAddress.FinanceDimension7	= each.FinanceDimension7
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension8)
						OverrideDimension8		= LocalOverrideSummary.FinanceDimension8

						for each Dimension8OverrideShadowRel
							if (each.FinanceDimension8.Active)
								LocalOverrideAddress.FinanceDimension8	= each.FinanceDimension8
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension9)
						OverrideDimension9		= LocalOverrideSummary.FinanceDimension9

						for each Dimension9OverrideShadowRel
							if (each.FinanceDimension9.Active)
								LocalOverrideAddress.FinanceDimension9	= each.FinanceDimension9
								include LoopOverrideCall

					else
					if (LocalOverrideDimensionType.Dimension10)
						OverrideDimension10		= LocalOverrideSummary.FinanceDimension10

						for each Dimension10OverrideShadowRel
							if (each.FinanceDimension10.Active)
								LocalOverrideAddress.FinanceDimension10	= each.FinanceDimension10
								include LoopOverrideCall																																																																						
				else
					LocalAllocationRun = AllocationRunRel.AllocationRun
					if (PrmIsCurrentFrom)
						Direction					= 0
						LocalCompute = FromAllocationLineTempOverrideCompute
					else
						Direction					= 1
						LocalCompute = ToAllocationLineTempOverrideCompute
					invoke Create AllocationLineTempOverride
						assign result to LocalTempOverrideView
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.AllocationSourceSystem  	= AllocationSourceSystem
						invoked.AllocationControl			= AllocationControl
						invoked.Allocation					= Allocation
						invoked.AllocationLine				= AllocationLine
						invoked.AllocationRun				= AllocationRunRel.AllocationRun
						invoked.Direction					= Direction
						invoked.WeightDecimal				= LocalWeight
						invoked.AccountingEntity			= LocalOverrideAddress.AccountingEntity
						invoked.AccountingUnit				= LocalOverrideAddress.AccountingUnit
						invoked.GeneralLedgerChartAccount 	= LocalOverrideAddress.GeneralLedgerChartAccount
						invoked.Project						= LocalOverrideAddress.Project
						invoked.FinanceDimension1			= LocalOverrideAddress.FinanceDimension1
						invoked.FinanceDimension2			= LocalOverrideAddress.FinanceDimension2
						invoked.FinanceDimension3			= LocalOverrideAddress.FinanceDimension3
						invoked.FinanceDimension4			= LocalOverrideAddress.FinanceDimension4
						invoked.FinanceDimension5			= LocalOverrideAddress.FinanceDimension5
						invoked.FinanceDimension6			= LocalOverrideAddress.FinanceDimension6
						invoked.FinanceDimension7			= LocalOverrideAddress.FinanceDimension7
						invoked.FinanceDimension8			= LocalOverrideAddress.FinanceDimension8
						invoked.FinanceDimension9			= LocalOverrideAddress.FinanceDimension9
						invoked.FinanceDimension10			= LocalOverrideAddress.FinanceDimension10
						invoked.GeneralLedgerCalendarPeriod = CurrentPeriod
						include TempOverrideSource
						invoked.LocalCompute				= LocalCompute

					LocalTempOverride = LocalTempOverrideView.AllocationLineTempOverride
					if (LocalDebug)
						display "Run:<LocalAllocationRun>"
						display "Override:<LocalTempOverride>"
						display "DimensionCode:<LocalTempOverride.DimensionCode>"
						display "DimensionCode:<LocalTempOverride.Sequence>"
						display "Weight:<LocalTempOverride.WeightDecimal>"

					if (LocalTempOverride.WeightDecimal entered)
						if (PrmIsCurrentFrom)
							FromOverrideCount += 1
							FromTotalSplitWeight += LocalTempOverride.WeightDecimal
							if (LocalDebug)
								display "FromOverrideCount:<FromOverrideCount>"
								display "FromTotalSplitWeight:<FromTotalSplitWeight>"			
						else
							ToOverrideCount += 1
							ToTotalSplitWeight += LocalTempOverride.WeightDecimal		
							if (LocalDebug)
								display "ToOverrideCount:<ToOverrideCount>"
								display "ToTotalSplitWeight:<ToTotalSplitWeight>"
					else
						invoke Delete LocalTempOverride	



		CommitTransaction is an Instance Action
			restricted
			Action Rules
				display "Commit"
				commit transaction
	 			
		CheckSourceDetails is an Instance Action
			Local Fields
				LocalMap				is LPLText
				LocalActor				is an Actor
			Action Rules
				initialize LocalSourceCombinationCount
				LocalCheckSourceCombinations = true
				LocalMap = MatrixMap
				LocalActor = actor
				send notification
					to LocalActor
					description is "CheckSourceDetailsResult"
					detail is "SourceDetailsFound:<LocalSourceCombinationCount>"

		SendMismatchNotification is an Instance Action
		    restricted
			Parameters
				PrmOverrideCount		is Numeric size 6
					default label is untranslatable
				PrmTempOverrideCount	is Numeric size 6
					default label is untranslatable
			Local Fields
				LocalActor				is an Actor
			Action Rules
				LocalActor = actor
				send notification
					to LocalActor
					description is "MismatchFoundOnOverrideCount.PleaseCheckCalculation"
					detail is "AllocationControl:<AllocationControl>;Allocation:<Allocation>;AllocationLine:<AllocationLine>OverrideCount:<PrmOverrideCount>;TempOverrideCount:<PrmOverrideCount>"

        RunAllocation is an Instance Action
            default label is "Run"
            completion message is "AllocationRun<AllocationControl.AllocationRun>Initiated"
            Parameters
                PrmAllocation			is a Allocation
                    default label is "Allocation"
                PrmGroup				is a AllocationGroup
                    default label is "Group"
                PrmDate					is Date
                    default label is "Date"
                PrmFromStep				is a AllocationStepNumber
                    default label is "FromStep"
                PrmToStep				is a AllocationStepNumber
                    default label is "ToStep"
                PrmGenerateListingData	is Boolean
                    default label is "GenerateReports"
                PrmJournalize			is Boolean
                    default label is "JournalizeIfComplete"
                PrmGenerateSourceValue	is Boolean
                    default label is "IncludeSourceDetails"
                PrmBypassCheckAllocationLine	is Boolean
                PrmNumberOfBatches		is Numeric size 3
                    default label is "NumberOfBatches"
            Parameter Rules
                PrmAllocation
                    initial value is Allocation
                    constraint(PrmGroup not entered)
                        "CannotSpecifyBothGroupAndAllocation"
                PrmGroup
                    constraint(PrmAllocation not entered)
                        "CannotSpecifyBothGroupAndAllocation"
                PrmDate
                    initial value is current corporate date
                    default to current corporate date
                    required
                PrmToStep
                    default to 100
                    constraint (PrmToStep <= 100)
                        "StepCannotExceed100"
                    constraint (PrmToStep >= PrmFromStep)
                        "ToStepMustBeGreaterThanOrEqualToFromStep"
                PrmGenerateSourceValue
                    if (not PrmGenerateListingData)
                        PrmGenerateSourceValue = false

                PrmBypassCheckAllocationLine
                    if (AllocationControl.Type.Budget)
                        PrmBypassCheckAllocationLine = true

                PrmJournalize
                    if (AllocationControl.Type.Budget)
                        initialize PrmJournalize
                PrmNumberOfBatches
                    initial value is AllocationControl.NumberOfBatches
                    constraint (PrmNumberOfBatches <= 100)
                        "NumberOfBatchesCannotExceed100"
            Exit Rules
                invoke Run AllocationControl
                    invoked.PrmAllocation                   = PrmAllocation
                    invoked.PrmGroup                        = PrmGroup
                    invoked.PrmDate                         = PrmDate
                    invoked.PrmFromStep                     = PrmFromStep
                    invoked.PrmToStep                       = PrmToStep
                    invoked.PrmJournalize                   = PrmJournalize
                    invoked.PrmGenerateListingData          = PrmGenerateListingData
                    invoked.PrmGenerateSourceValue          = PrmGenerateSourceValue
                    invoked.PrmNumberOfBatches              = PrmNumberOfBatches
                    invoked.PrmBypassCheckAllocationLine    = PrmBypassCheckAllocationLine

	Cube Relations
		MatrixRel
			matrix relation to GeneralLedgerTotal
			allow dimension reordering
			dynamic mapping is MatrixMap
        	Dimension Mapping
				related.GeneralLedgerTotal.Ledger				= LocalSourceLedger
				related.Scenario								= ScenarioRel.Scenario
			dynamic preload measures are DynamicMeasures
		AllocationMatrixRel
			matrix relation to AllocationTransactionDetail
			allow dimension reordering
			dynamic mapping is AllocationCubeMap
        	Dimension Mapping
				related.FinanceCodeBlock.Ledger					= LocalSourceLedger
				related.AllocationRun							= AllocationRunRel.AllocationRun
				related.AllocationStep							= PreviousStepRel.AllocationStep
			dynamic preload measures are DynamicALTDMeasures

		AllocationSnapshotMatrixRel
			matrix relation to AllocationSnapshotDetail
			allow dimension reordering
			dynamic mapping is AllocationCubeMap
        	Dimension Mapping
        		related.AllocationSnapshot						= LocalAllocationSnapshot
				related.FinanceCodeBlock.Ledger					= LocalSourceLedger
			Preload Measures
				TransactionAmount
	    		UnitsAmount

