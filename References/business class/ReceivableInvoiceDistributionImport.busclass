ReceivableInvoiceDistributionImport is a BusinessClass
	owned by ar
	prefix is AID
	sql name is RInvoiceDistributionImport
	classic name is ARIDISTRIB

	Ontology
		symbolic key is ReceivableInvoiceDistributionImport
			classic set name is AIDSET1
			sql name is RInvoiceDistributionImport
			classic name is PROG-SEQ-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		disable Auditing
		disable EffectiveDated
		disable DataTranslations


	Persistent Fields
		RunGroup
		Company						is a ReceivableCompany
		InvoiceType					is a ReceivableInvoiceType
		Invoice
		Sequence
		Customer
		DistributionAccount			is a FinanceCodeBlock 

			classic name for DistributionAccount.AccountingUnit is ACCT-UNIT
			classic name for DistributionAccount.GeneralLedgerChartAccount is ACCOUNT
			classic name for DistributionAccount.Project is ACTIVITY

		TransactionAmount			is an InternationalAmount
			classic name is ORIG-AMT
		Units						is a Unit
		Description
		TaxCode
		TransactionTaxableAmount	is an InternationalAmount
			classic name is ORIG-TAXABLE
		JournalBookSequenceNumber	is a JbkSeqNbr
			classic name is JBK-SEQ-NBR
			restricted
		TaxPoint					is AlphaUpper size 1
		LineType					is AlphaUpper size 1
			States
				Goods		value is "G"
				Services	value is "S"
		StockWeight
			classic name is WEIGHT
		ICNCode
		SupplementaryQuantity is a Quantity
			classic name is SUPLMNTARY-QTY
		ErrorMessage				is Alpha 150
		InterfaceRun				is a ReceivablesInterfaceResult
			delete ignored
		HSNSACCode
		TaxOriginCrossReference		is like ReceivableGLDistribution
		UNSPSCCode

	Context Fields
		ContextInvoiceImport		is a ReceivableInvoiceImport

	Transient Fields
		TransientTransactionDate	is an ExchangeDate
		TransientPostingDate		is a PostingDate
		TransientCodeBlock			is a TransactionCodeBlock	
			derive value from DistributionAccount
		BypassProjectDateEdit
		GeneralLedgerSystemCode
		UnitsAmount
			derive value from Units
			
	Local Fields
		NewDistribution					is a ReceivableGLDistribution view
		ErrorOccurred						is Boolean
		LocalErrorMessage					is Alpha 150
		LocalErrorFile						is Alpha 20

		LocalReceivablesInterfaceResult	is a ReceivablesInterfaceResult






		NextSentence						is Boolean




	Field Rules
		RunGroup
			required
			default to ContextInvoiceImport.RunGroup
		Company
			required
			default to ContextInvoiceImport.Company
		InvoiceType
			required
			default to ContextInvoiceImport.InvoiceType
		Invoice
			required
			default to ContextInvoiceImport.Invoice
		Sequence
			autosequence when blank using ByRunGroup
				minimize contention and gaps
		DistributionAccount
			required
			
		TaxPoint
			if (TaxCode entered)
				if (TaxEntityRel.UseTaxCodeAccounts)
					TaxPoint = EntityTaxCodeGlCompanyRel.TaxPoint
				else
					TaxPoint = TaxEntityRel.TaxPoint
		
		TaxOriginCrossReference
			if (Company.AllocateTaxPointPayment)
				if (TaxCode entered
				and TaxPoint ="P")
					required
						"Tax\Origin\Cross\ReferenceIsRequired;AndMustBeSameValueAsCorrespondingOwningDistribution'sValue"
					constraint (ReceivableInvoiceDistributionImportRel exists)
						"Tax\Origin\Cross\ReferenceMustBeEnteredAndMatchWithTheSalesDistribution's_\TaxOrigin\Cross\Reference"
		
	Derived Fields
		InvoiceNotFoundMsg is a MessageField
			restricted
			"ReceivableInvoiceDoesNotExist"

		AmountRequiredMsg is a MessageField
			restricted
			"TransactionAmountRequired"

		AccountRequiredMsg is a MessageField
			restricted
			"FinanceStructureRequired"

		InvalidCodeBlockMsg is a MessageField
			restricted
			"InvalidOrIncompleteFinanceStructureEntered"
	Conditions
		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		TaxEntityUsesOneSource
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		CallVertexByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction) 

		ShowTaxOriginCrossReference
			restricted
			when (IsAllocateTaxPointPayment
			or    CallVertexByTransaction
			or    TaxEntityUsesOneSource)

		IsAllocateTaxPointPayment
			restricted
			when (Company.AllocateTaxPointPayment)

	Relations







		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		ReceivableInvoiceImportRel
			one-to-one relation to ReceivableInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType
				related.PaymentSeq				 = blank

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = InvoiceType
				related.ReceivableInvoice		 = Invoice

		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult	 = LocalReceivablesInterfaceResult

		LastDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
				
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity
				
		EntityTaxCodeGlCompanyRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity
				related.TaxCode					 = TaxCode
				
		ReceivableInvoiceDistributionImportRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType
			Instance Selection
				where (related.TaxOriginCrossReference = TaxOriginCrossReference
				and	   related.TaxCode = blank)


	Sets

		Set2
			indexed
			Sort Order
				Company
				Invoice
				InvoiceType
				Sequence

		ByRunGroup
			Sort Order
				RunGroup
				Company
				Invoice
				InvoiceType
				Sequence

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				Invoice
				InvoiceType
				Sequence

	Create Rules
		if  (ContextInvoiceImport exists)
			constraint (ReceivableInvoiceImportRel exists)
				"InterfaceInvoiceDoesNotExist"

	Actions
		Create is a Create Action
			Entrance Rules
				TransientTransactionDate 	= ReceivableInvoiceImportRel.TransactionDate
				TransientPostingDate 		= ReceivableInvoiceImportRel.GeneralLedgerDate
				GeneralLedgerSystemCode	 = "AR"
		
		CreateFromConversion is a Create Action
			default label is "Create"
			bypass field rules
		
		Update is an Update Action
			Entrance Rules
				if  (ReceivableInvoiceImportRel exists)
					TransientTransactionDate	= ReceivableInvoiceImportRel.TransactionDate
					TransientPostingDate		= ReceivableInvoiceImportRel.GeneralLedgerDate
					GeneralLedgerSystemCode		= "AR"
			Action Rules

		FastUpdate is an Update Action
			restricted
			bypass field rules

		UpateFromConversion is an Update Action
			default label is "Update"
			bypass field rules

		Delete is a Delete Action

		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules

		DeleteAllTransactionsForRunGroup is a Set Action
			confirmation required

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup				is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup)

			Action Rules
				Instance Rules
					invoke FastDelete

		EditCodeBlock is an Update Action
			Action Rules
				TransientTransactionDate = ReceivableInvoiceImportRel.TransactionDate
				TransientPostingDate = ReceivableInvoiceImportRel.GeneralLedgerDate
				TransientCodeBlock = DistributionAccount
				GeneralLedgerSystemCode	 = "AR"

		InterfaceDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult
				PrmCallOneSource			is Boolean
				PrmCallVertex				is Boolean

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Local Fields


			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany))

			Sort Order
				RunGroup
				Company



			Action Rules

				Empty Set Rules
					invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup				 = PrmRunGroup
						invoked.PrmCompany				 = PrmCompany
						invoked.CustomerRange			 = CustomerRange
						invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
						invoked.PrmInterfaceRun			 = PrmInterfaceRun


				RunGroup Set Rules
					Exit Rules

						if (PrmCallVertex)
							invoke VertexInterfaceInvoicesCreateTaxLineItems ReceivableInvoiceImport
								invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup				 = PrmRunGroup
								invoked.PrmCompany				 = PrmCompany
								invoked.CustomerRange			 = CustomerRange
								invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
								invoked.PrmInterfaceRun			 = PrmInterfaceRun
						else
						if (PrmCallOneSource)
							invoke OneSourceInterfaceInvoicesCreateTaxLineItems ReceivableInvoiceImport
								invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup				 = PrmRunGroup
								invoked.PrmCompany				 = PrmCompany
								invoked.CustomerRange			 = CustomerRange
								invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
								invoked.PrmInterfaceRun			 = PrmInterfaceRun
						else
							invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
								invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup				 = PrmRunGroup
								invoked.PrmCompany				 = PrmCompany
								invoked.CustomerRange			 = CustomerRange
								invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
								invoked.PrmInterfaceRun			 = PrmInterfaceRun

				Instance Rules


					if  (ReceivableInvoiceImportRel not exists)
						NextSentence = true
					else
					if  (ReceivableInvoiceImportRel.ErrorMessage not entered
					and (CustomerRange not entered
					or   ReceivableInvoiceImportRel.Customer within CustomerRange)
					and (InterfacedCustomerRange		  not entered
					or   ReceivableInvoiceImportRel.InterfacedCustomer within InterfacedCustomerRange))

						invoke CreateInvoiceDistribution ReceivableGLDistribution
							assign result to NewDistribution
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message
								LocalErrorFile		= "Distribution"

							fill in fields from this instance
							fill in user fields from this instance
							invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
							invoked.BatchNumber													= ReceivableInvoiceImportRel.BatchNumber
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivableInvoiceImportRel.ReceivableProcessLevel 
							invoked.ReceivableCompanyDataGroup.Customer							= ReceivableInvoiceImportRel.DerivedCustomer
							invoked.ReceivableCompanyGroup.OriginCompany						= Company
							invoked.ReceivableCompanyGroup.GlCompany							= Company
							invoked.TransType													= ReceivableInvoiceImportRel.InvoiceType
							invoked.Invoice														= ReceivableInvoiceImportRel.Invoice
							invoked.Units														= Units
							if   (TransactionAmount not entered
							and !(TransactionTaxableAmount entered
							and   TaxCode entered))
								invoked.Status													= 9
								invoked.TransactionTaxableAmount								= TransactionTaxableAmount
							else
							if  (ReceivableInvoiceImportRel.GLStatus.NotPosted
							and  !ReceivableInvoiceImportRel.Status.Open)
								invoked.Status													= 2
								invoked.DistributionAmount.CurrencyAmount						= TransactionAmount
								invoked.TransactionTaxableAmount								= TransactionTaxableAmount
							else
							if  (ReceivableInvoiceImportRel.GLStatus.NotPosted)
								invoked.Status													= 0
								if  (ReceivableInvoiceImportRel.AlternateReceivableInvoiceType.CreditMemo)
									invoked.DistributionAmount.CurrencyAmount					= TransactionAmount
									invoked.TransactionTaxableAmount							= TransactionTaxableAmount
								else
									invoked.DistributionAmount.CurrencyAmount					= TransactionAmount * -1
									invoked.TransactionTaxableAmount							= TransactionTaxableAmount * -1
							else
								invoked.Status													= ReceivableInvoiceImportRel.GLStatus
								invoked.DistributionAmount.CurrencyAmount						= TransactionAmount
								invoked.TransactionTaxableAmount								= TransactionTaxableAmount
								invoked.BypassProjectDateEdit									= true
								invoked.BypassGLDateEdit										= true
							invoked.GeneralLedgerAccount										= DistributionAccount
							invoked.GeneralLedgerDate											= ReceivableInvoiceImportRel.GeneralLedgerDate
							invoked.TransactionDate												= ReceivableInvoiceImportRel.TransactionDate

							if  (ReceivableInvoiceImportRel.InvoiceType.Invoice)
								invoked.AuditSummaryIndicator									= "01"	
							else
								invoked.AuditSummaryIndicator									= "02"	

							if (Description not entered)
								invoked.Description												= current corporate date + "-" + ReceivableInvoiceImportRel.BatchNumber									
							else
								invoked.Description												= Description

							invoked.FromInterface												= true
							invoked.ReceivableCompanyDataGroup.UNSPSCCode						= UNSPSCCode

							if (CallVertexByTransaction
							or  TaxEntityUsesOneSource)
								invoked.LastDistributionSequence								= Sequence
								if (TaxOriginCrossReference entered)
									if (ReceivableInvoiceImportRel.Status.Open
									and	!ReceivableInvoiceImportRel.GLStatus.Posted)
										if (TaxCode entered)
											if (CallVertexByTransaction)
												PrmCallVertex									= true
											else
												PrmCallOneSource								= true
											invoked.LinkedTaxGroup.Indicator					= "X" 
											invoked.LinkedTaxGroup.TaxCode 						= TaxCode
											if (TransactionTaxableAmount entered)
												if  (ReceivableInvoiceImportRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.LinkedTaxGroup.TaxableAmount			= TransactionTaxableAmount
													invoked.TransactionTaxableAmount				= TransactionTaxableAmount
												else
													invoked.LinkedTaxGroup.TaxableAmount			= TransactionTaxableAmount * -1
													invoked.TransactionTaxableAmount				= TransactionTaxableAmount * -1
											else
												if  (ReceivableInvoiceImportRel.AlternateReceivableInvoiceType.CreditMemo)
													invoked.LinkedTaxGroup.TaxableAmount			= TransactionAmount
													invoked.TransactionTaxableAmount				= TransactionAmount
												else
													invoked.LinkedTaxGroup.TaxableAmount			= TransactionAmount * -1
													invoked.TransactionTaxableAmount				= TransactionAmount * -1

						if (ErrorOccurred)

							LocalReceivablesInterfaceResult = PrmInterfaceRun
							invoke Update LocalInterfaceResultsRel
								invoked.Status		= 2

							invoke SetError ReceivableInvoiceImportRel
								invoked.PrmErrorMessage					= LocalErrorMessage
								invoked.PrmErrorFile					= LocalErrorFile
						else
							if (!((TaxEntityUsesOneSource
							or  CallVertexByTransaction)
							and ReceivableInvoiceImportRel.Status.Open
							and !ReceivableInvoiceImportRel.GLStatus.Posted))
								invoke FastDelete



		ConvertDistributions is a Set Action
			default label is "ConvertDistributions"
			Parameters
				PrmRunGroup						is a RunGroup
					default label is "RunGroup"
				PrmCompany						is a ReceivableCompany

			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Sort Order
				RunGroup
				Company

			Local Fields
				LocalConvertResultView			is a ReceivablesInterfaceResult view
				LocalInstanceCount				is Numeric 10
				LocalProgramSequence			is a ProgramSequence
				LocalGLDistribution				is like ReceivableGLDistribution
				LocalReceivableInvoiceCount	 is Numeric 12 
				
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
				and	(PrmCompany not entered
				or	  Company	= PrmCompany))

			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 7
						invoked.Company						= PrmCompany
						invoked.Status						= 1


				RunGroup Set Rules
					Entrance Rules
						
						invoke Create ReceivablesInterfaceResult
							assign result to LocalConvertResultView
							invoked.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
							invoked.RunTime					= current timestamp
							invoked.RunGroup				= PrmRunGroup
							invoked.RunType					= 7
							invoked.Company					= PrmCompany



						LocalGLDistribution				= last LastDistributionRel.ReceivableGLDistribution

					Exit Rules
						invoke Update LocalConvertResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed		= LocalInstanceCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivableInvoiceCount
							if (LocalConvertResultView.Status != 2)
								invoked.Status					= 1

				Instance Rules



					initialize ErrorMessage
					initialize ErrorOccurred

					invoke EditCodeBlock  // need to perform this before setting the InterfaceRun field otherwise it does not "take"
						resume on error
							ErrorOccurred					= true
							ErrorMessage					= InvalidCodeBlockMsg
						invoked.BypassProjectDateEdit		= true

					LocalReceivablesInterfaceResult		= LocalConvertResultView.ReceivablesInterfaceResult
					InterfaceRun							= LocalConvertResultView.ReceivablesInterfaceResult
					LocalInstanceCount						+= 1
					LocalGLDistribution					+= 1

					if  (ErrorOccurred)
						invoke Update LocalInterfaceResultsRel
							invoked.Status			= 2
					else
					if (!ReceivableInvoiceRel exists)
						ErrorOccurred						= true
						ErrorMessage						= InvoiceNotFoundMsg
						invoke Update LocalInterfaceResultsRel
							invoked.Status				= 2
					else
					if (TransactionAmount not entered)
						ErrorOccurred						= true
						ErrorMessage						= AmountRequiredMsg
						invoke Update LocalInterfaceResultsRel
							invoked.Status				= 2
					else
					if (DistributionAccount not entered)
						ErrorOccurred						= true
						ErrorMessage						= AccountRequiredMsg
						invoke Update LocalInterfaceResultsRel
							invoked.Status				= 2
					else

						LocalProgramSequence											+= 1
						increment ReceivableInvoiceRel.LastDistributionSequence

						invoke CreateConversionDistribution ReceivableGLDistribution
							resume on error
								ErrorOccurred				= true
								ErrorMessage				= error message
							fill in user fields from this instance

							invoked.ReceivableGLDistribution							= LocalGLDistribution
							invoked.FinanceEnterpriseGroup								= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceRel.ReceivableProcessLevel 
							invoked.ReceivableCompanyDataGroup.Customer					= ReceivableInvoiceRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory = ReceivableInvoiceRel.ReceivableDistributionCategory

							invoked.ReceivableCompanyGroup.OriginCompany				= Company
							invoked.ReceivableCompanyGroup.GlCompany					= Company

							invoked.BatchNumber											= ReceivableInvoiceRel.BatchNumber
							invoked.TransType											= InvoiceType
							invoked.Invoice												= Invoice
							invoked.SequenceNumber										= Sequence

							invoked.Status												= 9
							invoked.DistributionAmount.CurrencyAmount					= TransactionAmount
							invoked.GeneralLedgerAccount								= DistributionAccount
							invoked.TransactionTaxableAmount							= TransactionTaxableAmount
							invoked.GeneralLedgerDate									= ReceivableInvoiceRel.GeneralLedgerDate
							invoked.TransactionDate										= ReceivableInvoiceRel.TransactionDate

							invoked.OriginalCurrency									= ReceivableInvoiceRel.OriginalCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							
							invoked.Units												= Units
							invoked.TaxCode												= TaxCode

							invoked.LastDistributionSequence							= ReceivableInvoiceRel.LastDistributionSequence
							invoked.ProgramSequence										= LocalProgramSequence
							invoked.CreateDate											= current timestamp

							invoked.AccumulationType									= "D"
							if (InvoiceType.Invoice)
								invoked.Origin											= "RI"
							else
								invoked.Origin											= "RM"

							if (Description not entered)
								invoked.Description									= current corporate date + "-" + ReceivableInvoiceRel.BatchNumber
							else
								invoked.Description										= Description
							invoked.DistributionSource									= "A"
							invoked.OriginatingInterfaceRun								= LocalReceivablesInterfaceResult
							invoked.BypassProjectDateEdit								= true

						if (ErrorOccurred)
							invoke Update LocalInterfaceResultsRel
									invoked.Status		= 2

						if (!ErrorOccurred)
							invoke FastDelete
							LocalReceivableInvoiceCount				+= 1
