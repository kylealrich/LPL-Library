MatchInvoiceMessage is a BusinessClass
	owned by ma
	prefix is MAG
	classic name is MAINVMSG

	Ontology
		symbolic key is MatchInvoiceMessage
			classic set name is MAGSET1
			classic name is SEQ-NBR
			classic name for PurchaseOrderLine is PO-LINE-NBR
			classic name for PayablesInvoiceDetail is MAD-SEQ-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only 
		implements Archivable
 
    Persistent Fields
        AuthorityCode				is a PayablesAuthorityCode
            classic name is AUTH-CODE
        BuyerOwner					is a Buyer
            default label is "MessageOwner"
        Vendor						is a snapshot of PayablesInvoice.Vendor
        Invoice						is a snapshot of PayablesInvoice.Invoice
		DueDate						is a snapshot of PayablesInvoice.DueDate
        Suffix						is a snapshot of PayablesInvoice.Suffix
        CancelSequence				is a snapshot of PayablesInvoice.CancelSequence
        MatchMessageOrigin          is AlphaUpper size 1
            classic name is MSG-ORIGIN
            States
                PoCost     value is "1"
                    default label is "PO Cost"
                ReconMatch value is "2"
                	default label is "ReconciliationMatch"
                Dropship   value is "3"
                    default label is "Dropship"
                Service    value is "4"
        Item
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        Status                      is Numeric size 1
            States
                Unreleased    value is 0
                Open          value is 1
                PendingAction value is 2
                Closed        value is 9
        ApplicationAction			is AlphaUpper size 1
            classic name is ACTION
            States
                Approve	    			value is 1
                Chargeback     			value is 2
                Forward         		value is 4
                AcceptWorkInSmartRecon	value is 5
                	default label is "AcceptWorkInSmartReconciliation"		
                AdjustCost     			value is 6
                ChargebackNettedToZero 	value is 7
                ClosedBySystem			value is 8
                NotApplicable			value is 9
        Operator
        CreateDate                  is TimeStamp
			default label is "CreateTimestamp"
        	restricted
        Buyer
            default label is "POBuyer"
            classic name is BUYER-CODE
        AuthorityCodeEmailAddress   is an EmailAddress 
            classic name is AUTH-CODE-MAIL


        ForwardToAuthorityCode			is a PayablesAuthorityCode
        ForwardToBuyer					is a Buyer
        MessageType                 is AlphaUpper size 2
            classic name is TYPE
            States
                Cost          value is "C"
                Quantity      value is "Q"
                Item          value is "I"
                NoReceiptLine value is "NR"
        MessageSubType              is AlphaUpper size 1
            classic name is VAR-TYPE
            States
                ItemDifference      value is blank
                InvoiceOverReceipt  value is "O"
                InvoiceUnderReceipt value is "U"
        ReasonCode                  is a ProcurementReasonCode
        Priority
        MatchObjectID               is an ObjId
            classic name is MATCH-OBJ-ID
        RespondDate                 is Date
        DiscountDate                is Date
            classic name is DISC-DATE
        Location                    is an InventoryLocation
        AdjustedUnitCost            is an InternationalCost
            classic name is PO-COST-UPD
            precision is PayablesInvoiceDetail.DerivedNumberOfDecimalsCost
        VendorItem
            classic name is VEN-ITEM
        ItemGTIN
            classic name is GTIN
		DateCreated	is Date
            default label is "CreateDate"
		Reference
			
	Transient Fields
		AdjustedUnitCostUOM			is a UnitOfMeasure
			default label is "AdjustUOM"
			derive value from AdjustUOM
		POCostFlag					is AlphaUpper size 1
			default label is "<DerivedPOCostFlagLabel>" //PurchaseOrderUnitCostCorrect?"
			derive value from DerivedPOCostFlag
			States

                AcceptWorkInSmartRecon	value is 5
                	default label is "Yes" //"AcceptWorkInSmartReconciliation"		
                AdjustCost     			value is 6
					default label is "No"

		InvoiceMessageAction		is AlphaUpper size 1
			derive value from DerivedInvoiceMessageAction
		  	States
		  		Approve	    			value is 1
		  		Chargeback     			value is 2


		Approve						is Boolean
			derive value from MatchInvoiceMessage.DerivedApprove

		Chargeback					is Boolean
			derive value from MatchInvoiceMessage.DerivedChargeback

		PayablesInvoiceCurrencyExchangeRate				is like Rate

		TransientGLCalendarPeriod 	is a GeneralLedgerCalendarPeriod	
			derive value from PurchaseOrder.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod

		CopyFromMessage	is a MatchInvoiceMessage	
			context of PurchaseOrderLine			

	Context Fields
		CreateDateRange							is a DateRange
		MatchInvoiceMessageFilter
		GeneralLedgerCompanyGroup

	Local Fields

		LocalDBCompany							is like Company
		LocalDBVendor							is like Vendor
		LocalDBInvoice							is like PayablesInvoice
		LocalDBSuffix							is a Suffix
		LocalDBLineNumber						is a PayablesMatchLine
		LocalDBMadSeqNumber						is a MatchDistributionSequence
		LocalDBDistSeqNumber					is a DistributionSequence
		LocalDBPaymentSeqNumber					is Numeric 4

		LocalMa66WsA70AccrCode					is a PayablesAccrualCode
		LocalMa66WsA70RetAccrCode				is a PayablesAccrualCode
		LocalMa66WsA70RetCalcAmt				is an InternationalAmount
		LocalMa66WsA70OrigTranAmt				is an InternationalAmount
		LocalMa66WsA70TaxableAmt				is an InternationalAmount
		LocalMa66WsA70UntAmount					is an InternationalAmount
		LocalMa66WsA70AccrualFl					is AlphaUpper size 1
		LocalMa66WsA70RetPct					is a Pct

		LocalMa66WsRetTotalAmt					is an InternationalAmount
		LocalMa66WsRetTaxableAmt				is an InternationalAmount
		LocalMa66WsRetUntAmount					is an InternationalAmount
		LocalMa66WsRetOrigTranAmt				is an InternationalAmount
		LocalMa66WsRetTotTranAmt				is an InternationalAmount
		LocalMa66WsRetLandedFlag				is Boolean
		LocalMa66WsDisAccount					is a FinanceCodeBlock

		NewRetainageCalculatedAmount			is an InternationalAmount
		LocalAPDRetainage						is Boolean
		LocalAPDTaxUsageCode					is like TaxUsageCode
		LocalPaymentSequenceNumber				is like PaymentSequence

		WorkDistributionGroup					is a MatchWorkDistributionGroup
		NewTotalDistAmount						is an InternationalCost
		NewTotalTaxAmount						is an InternationalAmount

		LocalMa66WsRemainDistAmount				is an InternationalCost
		LocalMa66WsMadDistAmount				is an InternationalCost

		LocalPurchaseOrderReceipt				is like PurchaseOrderReceipt
		LocalPurchaseOrderReceiptLine			is like PurchaseOrderReceiptLine
		LocalMatchObjectID						is like ObjId
		LocalMatchSequence						is a MatchSequence
		LocalCancelSequence						is a CancelSequence
		LocalChargebackHasError					is Boolean
		CalculateTax
		LocalCalculateTaxExecuted				is Alpha 1				
		LocalInvoiceTaxAmount					is an InternationalCost	
		LocalAccruedTaxAmount					is an InternationalCost	
		LocalTaxableAmount						is an InternationalCost
		LocalWorkTaxableAmount					is an InternationalCost
		LocalTaxAmount							is an InternationalCost
		LocalLineAmount							is an InternationalCost
		LocalTaxType							is a TaxType
		LocalCalculateTaxRate					is Percent 7.5

		LocalApwsTranTotalTax					is an InternationalAmount
		LocalApwsTranTotalDistribution			is an InternationalAmount
		LocalApwsBaseTotalDistribution			is an InternationalAmount


		LocalDistributionSequence				is a DistributionSequence			
		LocalCostChargebackSw					is Boolean							
		LocalPurchaseOrderTaxFlag				is Boolean							
		LocalChargebackExists					is Boolean							
		LocalReceiptOriginalUnitCost			is an InternationalCost

		LocalSetMatchStatus						is Boolean
		LocalToleranceSw						is Boolean
		LocalQuantityAcceptSw					is Boolean
		LocalAcceptCostSw						is Boolean
		LocalMa66ChargebackAmount				is an InternationalAmount
		LocalMa66MatchedAmount					is an InternationalCost
		LocalMa66AdjustUnitCost					is an InternationalCost
		LocalMa66ChargebackQuantity				is a Quantity
		LocalMa66MatchedNotReceived				is a Quantity
		LocalMa66WriteOffQuantity				is a Quantity
		LocalMa66wsMnrChargebackQuantity 		is a Quantity
		LocalMa66wsNetChargebackQuantity		is a Quantity
		LocalMa66CBQuantity						is a Quantity
		LocalServiceLineChargeBackAmount		is an InternationalAmount
		LocalPliMatchedQuantity					is a Quantity
		LocalPliChargebackQuantity				is a Quantity

		LocalCatchWeightMNRQuantity				is like Quantity
		LocalCatchWeightChargebackQuantity		is like Quantity
		LocalCatchWeightWriteOffQuantity		is like Quantity
		LocalCatchWeightMemoQuantity			is like Quantity

		LocalMatchedQuantity					is a Quantity
		LocalTempMatchQuantity					is a Quantity

		ChargebackInvoiceDetailView				is a PayablesInvoiceDetail view
		ChargebackInvoiceView					is a PayablesInvoice view
		WorkChargebackInvoice					is like PayablesInvoice

		UOMCalculation
		LocalUOMCalculationExecuted				is Alpha 1

		CurrentPurchaseOrder					is like PurchaseOrder
		CurrentPurchaseOrderLine				is like PurchaseOrderLine
		CurrentContract     					is like Contract
		CurrentContractLine      	 			is like ContractLine
		CurrentPayablesInvoiceDetail			is like PayablesInvoiceDetail
		CurrentMatchInvoiceMessage				is like MatchInvoiceMessage
		CurrentReceipt							is a PurchaseOrderReceipt
		CurrentReceiptLine						is a PurchaseOrderReceiptLine
		LocalMA66wsPoHasTax						is Boolean
		LocalMNRDistSw							is Boolean
		LocalQuantityCbSw						is Boolean
		LocalMadExtServiceAmount				is an InternationalAmount
		LocalPliExtServiceAmount				is an InternationalAmount
		LocalOldMatchAmount						is an InternationalAmount
		LocalOriginalDistribution				is like DistributionSequence

		LocalWsSavePurchaseOrderLine			is a PurchaseOrderLine
		LocalWorkChargebackAmount				is an InternationalAmount
		LocalPvnChargebackAmount				is an InternationalAmount
		LocalPvnChargebackQuantity				is a Quantity

		LocalPvnTransInvAmount					is an InternationalAmount
		LocalOldAmount							is an InternationalAmount
		LocalPvnTransInvQuantity				is a Quantity
		LocalOldQuantity						is a Quantity
		LocalServiceCode						is like ServiceCode
		CompletionMessage						is Alpha 200
		LocalVoucherNumber						is a VoucherNumber
		LocalProductTaxCategory					is like ProductTaxCategory

		GetRetainage
		LocalGetRetainage						is Alpha 1
		LocalRetainagePercent					is a Pct 			
		LocalRetainDueDate						is Date				
		LocalDoRetainageDistribution			is Boolean
		PrepaymentInBalance						is Boolean
		PercentAccumulated						is like Percent
		LocalTaxDistSw							is Boolean
		WorkPercent								is a Percent
		OutMatchObjectID						is an ObjId

		RemainingDistAmount						is like InternationalAmount
		LocalTotalPercent 						is like Percent 

		I1										is Numeric 1
		EndLoop									is Boolean
		UsingTaxTable							is Boolean
		NextSentence							is Boolean
		PayablesInvoiceDistributionView			is a PayablesInvoiceDistribution view



		MaidwsItem								is like Item
		MaidwsInvoiceType						is like InvoiceType
		MaidwsInvoice							is like Invoice
		MaidwsLocation							is like InventoryLocation
		MaidwsRecordSource						is like RecSource
		MaidwsStatus							is Numeric 1
		MaidwsPurchaseOrderLine					is like PurchaseOrderLine
		MaidwsTaxType							is like TaxType
		MaidwsTaxCode							is like TaxCode
		MaidwsTaxAmount							is an InternationalCost
		MaidwsProductTaxCategory				is like ProductTaxCategory
		MaidwsRetailUnitCost					is an InternationalCost
		MaidwsMatchObjectID						is an ObjId
		MaidwsMatchSequence						is like MatchSequence
		MaidwsPurchaseOrderReceipt				is like PurchaseOrderReceipt
		MaidwsVendorPriceUOM					is a UnitOfMeasure
		MaidwsVendorPriceUOMMultiplier			is an UOMMultiplier
		MaidwsVendorBuyUOM						is a UnitOfMeasure
		MaidwsVendorBuyUOMMultiplier			is an UOMMultiplier
		MaidwsEnteredUOM						is a UnitOfMeasure
		MaidwsEnteredUOMMultiplier				is an UOMMultiplier
		MaidwsEnteredQuantity					is a Quantity
		MaidwsEnteredUnitCost					is an InternationalCost
		MaidwsItemType							is like ItemType
		MaidwsVendorItem						is like VendorItem
		MaidwsItemGTIN							is like ItemGTIN
		MaidwsTaxUsageCode						is like TaxUsageCode
		MaidwsMatchDetailKey					is like MatchDetailKey
		MaidwsPurchaseOrderReceiptLine			is like PurchaseOrderReceiptLine
		MaidwsMatchedQuantity					is a Quantity
		MaidwsMatchUnitCost						is an InternationalCost
		MaidwsBuyUOMMatchedQuantity				is a Quantity
		MaidwsTotalDistributionAmount			is an InternationalAmount
		MaidwsTotalBaseAmount					is an InternationalAmount
		MaidwsDistributionDate					is Date
		MaidwsExcessQuantityProcess				is a MtchExcProc
		MaidwsLastMessageSequence				is a Sequence
		MaidwsICNCode							is like ICNCode
		MaidwsSupplementaryQuantity				is a Quantity
		MaidwsStockWeight						is like StockWeight
		MaidwsSupplementaryUOM					is a UnitOfMeasure
		MaidwsContract							is like Contract
		MaidwsContractLine						is like ContractLine
		MaidwsItemDescription					is a Description

		CurrentCostDifference					is a UnitCost				
		LocalUnitCost							is a UnitCost
		LocalCurrencyTable                      is a CurrencyTable
		CurrencyWork							is a FromCurrencyExchangeGroup
		BypassNegativeRateEdit				
        SaveReasonCode                  		is like ProcurementReasonCode
		LocalDifference							is an InternationalAmount
		LocalReference							is like Reference

		LocalCostAdjustCount 					is Numeric 5
		LocalOriginatingDoc 		 			is like InventoryTransaction 
		LocalInventoryTransaction 				is like InventoryTransaction

    Conditions
        MessageIsClosed
            classic name is CLOSED
            restricted
            when (Status.Closed)

        MessageNotClosed
            classic name is NOT-CLOSED
            restricted
            when (not Status.Closed)

		IsOpenMessage
			restricted
			when (Status.Open)

		GiveCompletionMessageWithCostPhrase
			restricted
			when ((ApplicationAction.AdjustCost)
			and	  (AdjustedUnitCost			> PayablesInvoiceDetail.EnteredUnitCost))

		HasComments
			restricted
			when (first MatchInvoiceMessageComment set exists)

		NotClosedPOCostMessage
			restricted
			when ((MessageNotClosed)
			and   (MatchMessageOrigin.PoCost))

		AllowReleasePOCostMessage
			restricted
			when ((MessageNotClosed)
			and   (MatchMessageOrigin.PoCost)
			and   (Status < 2)						
			and   (ApplicationAction entered))

		NotClosedNonPOCostMessage
			restricted
			when ((MessageNotClosed)
			and   (!MatchMessageOrigin.PoCost))

		AllowReleaseNonPOCostMessage
			restricted
			when ((MessageNotClosed)
			and   (!MatchMessageOrigin.PoCost)
			and   (Status < 2)						
			and   (ApplicationAction entered))

		NotPendingMessage
			restricted
			when (!Status.PendingAction)

		HasPurchaseOrderCancellations
			when (PurchaseOrderLine.HasCancellations)

		PurchaseOrderLineEntered
			restricted
			when (PurchaseOrderLine entered)

		ContractLineEntered
			restricted
			when (ContractLine entered)

		OnlyContractLineEntered
			restricted
			when (ContractLine entered
			and PurchaseOrderLine not entered)

		ContractLineAndPurchaseOrderEntered
			restricted
			when (ContractLine entered
			and PurchaseOrderLine entered)

		OnlyContractEntered
			restricted
			when (Contract entered
			and   PurchaseOrderLine not entered)

		AlsoHasQuantityChargebackMessage
			restricted
			when (MessageType.Cost
			and   ChargebackQuantityMessagesRel exists)

		AlsoHasCostChargebackMessage
			restricted
			when (MessageType.Quantity
			and   ClosedReconMatchChargebackCostMessagesRel exists)

		HasChargeback
			when (ChargebackPayablesInvoiceRel exists)

		ChargebackPending
			when (ApplicationAction.Chargeback
			and   !ChargebackPayablesInvoiceRel exists)

		WithinCreateDateRange
			restricted
			when (CreateDateRange not entered
			or	  create date within CreateDateRange)

		WithinStatusFilter
			restricted
			when ( ((MatchInvoiceMessageFilter.IncludeUnreleased not entered
			or       MatchInvoiceMessageFilter.IncludeUnreleased.Include)
			and      Status.Unreleased)
			or     ((MatchInvoiceMessageFilter.IncludeOpen not entered
			or       MatchInvoiceMessageFilter.IncludeOpen.Include)
			and      Status.Open)
			or     ((MatchInvoiceMessageFilter.IncludePending not entered
			or       MatchInvoiceMessageFilter.IncludePending.Include)
			and	     Status.PendingAction)
			or     ((MatchInvoiceMessageFilter.IncludeClosed not entered
			or       MatchInvoiceMessageFilter.IncludeClosed.Include)
			and	     Status.Closed))

		IsMyMessage
			restricted
			when (BuyerOwner = actor.agent(Employee).Employee)

		WithinCompanyGroupFilter
			restricted
			when (GeneralLedgerCompanyGroup not entered
			or    GLCompanyGroupMemberRel exists)

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		DifferentUOM
			when (MatchMessageOrigin.PoCost
			and   PurchaseOrderLine entered
			and   PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM

			and  (PurchaseOrderLine.Item.CatchWeightCode.NotCatchWeight
			or    PurchaseOrderLine.Item.CatchWeightCode not entered))


		ItemEntered
			restricted
			when (Item entered)

		ServiceCostMessage
			when (PayablesInvoice.MatchProcessType.ServiceContract
			or   (ContractLine entered
			and   ContractLine.ItemType.Service))

		POLineHasCostChanges
			when (PurchaseOrderLine entered
			and   PurchaseOrderLine.UnitCostChangeCount entered)

		HasCostMessagesForOtherInvoices
			when (MatchMessageOrigin.PoCost
			and   first CostMessagesForOtherInvoicesRel exists)
		
		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		ResequencedPurchaseOrderLine
			restricted 
			when (PurchaseOrderLine entered 
			and   PurchaseOrderLine not = PurchaseOrderLine.LineNumber)
			
		MyContract
			default label is "MyContracts"
			when (PrimaryContactRel.Contact = actor.agent(Employee).Employee)

		ReconMatchHasPurchaseOrderLine
			when (MatchMessageOrigin.ReconMatch
			and   PurchaseOrderLine entered)

		ContractLineOrPurchaseOrderLineEntered
			restricted
			when (ContractLine entered
			or    PurchaseOrderLine entered)
	Derived Fields
		DerivedFormTitle is a LabelField
			restricted
			"Invoice<Invoice>Line<PurchaseOrderLine>Item<Item>"

		CommentsFormTitle is a LabelField
			restricted
			"Invoice<Invoice>Line<PurchaseOrderLine>Item<Item>"

		MessageForwardedMsg is a MessageField 
			restricted 
			"MessageForwarded"

		ContractCostAdjustAmountEditMsg is a MessageField 
			restricted 
			"IfAdjustingContractCostThenYouMustEnterAnAmount"
		POCostAdjustAmountEditMsg is a MessageField 
			restricted 
			"IfAdjustingPurchaseOrderCostThenYouMustEnterAnAmount"
		AdjustAmountEditMsg is a DerivedField 
			type is Alpha 100 
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractCostAdjustAmountEditMsg
			return POCostAdjustAmountEditMsg

		ContractCostFlagLabel is a MessageField 
			restricted 
			"Contract_Unit_Cost_Correct"
		POCostFlagLabel is a MessageField 
			restricted 
			"Purchase_Order_Unit_Cost_Correct"
		DerivedPOCostFlagLabel is a DerivedField 
			type is Alpha 50 
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractCostFlagLabel
			return POCostFlagLabel

		ReleaseContractCostMsg is a MessageField 
			restricted 
			"Contract_Unit_Cost_Correct"
		ReleasePOCostMsg is a MessageField 
			restricted 
			"Purchase_Order_Unit_Cost_Correct"
		ReleaseCostMessage is a DerivedField 
			type is Alpha 50 
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ReleaseContractCostMsg
			return ReleasePOCostMsg

		DerivedMessageType is a DerivedField
			type is Alpha 15

			if (MessageType.Cost)
				return CostMsg
			else
			if (MessageType.Quantity)
				return QuantityMsg
			else
			if (MessageType.Item)
				return ItemMsg
			else
			if (MessageType.NoReceiptLine)
				return NoReceiptLineMsg
			else
				return ""

		DerivedMessageSubType is a DerivedField
			type is Alpha 25
			if (ContractLine entered
			and PurchaseOrderLine not entered)
				if (MessageSubType.InvoiceOverReceipt)
					return InvoiceOverContractMsg
				else
				if (MessageSubType.InvoiceUnderReceipt)
					return InvoiceUnderContractMsg
				else
					return ""
			else
				if (MessageSubType.InvoiceOverReceipt)
					return InvoiceOverReceiptMsg
				else
				if (MessageSubType.InvoiceUnderReceipt)
					return InvoiceUnderReceiptMsg
				else
					return ""

		DerivedRepresentativeItem is a DerivedField
			type is Numeric size 1
			default label is "Item"

			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return RepresentativeTextServiceContract
			else
				return RepresentativeTextPurchaseOrder

		RepresentativeTextPurchaseOrder is a StringField
			type is Text
			default label is "Item"
			PayablesInvoiceDetail.Item " - " PayablesInvoiceDetail.ItemDescription

		RepresentativeTextServiceContract is a StringField
			type is Text
			default label is "Item"
			ContractLine.ItemDescription


		DerivedDetailsForm is a DerivedField
			type is Alpha 30
			restricted
			if(ApplicationAction.Approve)
				return ApprovalMsgForDerivedDetails
			else
			if(ApplicationAction.Chargeback)
				return ChargebackMsgForDerivedDetails
			else
			if(ApplicationAction.Forward)
				return ForwardMsgForDerivedDetails
			else 
				return CatchMsgForDerivedDetails


		ApprovalMsgForDerivedDetails is a MessageField
			restricted
			"ApproveDetails"

		ChargebackMsgForDerivedDetails is a MessageField
			restricted
			"ChargebackDetails"

		ForwardMsgForDerivedDetails is a MessageField
			restricted
			"ForwardingDetails"

		CatchMsgForDerivedDetails is a MessageField
			restricted
			"MessageDetails"


		CostMsg is a MessageField
			restricted
			"Cost"

		QuantityMsg is a MessageField
			restricted
			"Quantity"

		ItemMsg is a MessageField
			restricted
			"Item"

		NoReceiptLineMsg is a MessageField
			restricted
			"NoReceiptLine"

		InvoiceOverContractMsg is a MessageField
			restricted
			"InvoiceOverContract"

		InvoiceUnderContractMsg is a MessageField
			restricted
			"InvoiceUnderContract"

		InvoiceOverReceiptMsg is a MessageField
			restricted
			"InvoiceOverReceipt"

		InvoiceUnderReceiptMsg is a MessageField
			restricted
			"InvoiceUnderReceipt"

		Msg001 is a MessageField
			restricted
			"CannotEnterForwardToIfActionIsNotForward"

		Msg002 is a MessageField
			restricted
			"ForwardToRequiredWhenActionIsForward"

		MatchedWithAutoChargebackMsg is a MessageField
			restricted
			"MatchedWithChargeback="

		UpdateActionCompletionMessage is a MessageField
			restricted
			"UpdateComplete"

		UpdateActionCompletionMessageWithCostPhrase is a MessageField
			restricted
			"UpdateComplete,AdjustedPOUnitCostIsGreaterThanInvoiceUnitCost"

		UpdateActionCompletionMessageWithChargeback is a MessageField
			restricted
			"UpdateAndReleaseComplete,ChargebackCreatedPayablesInvoice=<WorkChargebackInvoice>"

		UnmatchedAmountOverContractMsg is a MessageField
			"AmountInvoiced<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>ExceedsContractAmountRemaining<ContractLine.DerivedRemainingAmountInUse>"
		UnmatchedAmountUnderContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>UnderAmountRemaining<ContractLine.DerivedRemainingAmountInUse>ByMoreThanTolerance"
		UnmatchedCostOverContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>ExceedsContractCost<ContractLine.DerivedMatchBaseCost>"
		UnmatchedCostUnderContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>LessThanContractCost<ContractLine.DerivedMatchBaseCost>ByMoreThanTolerance"
		UnmatchedQuantityOverContractMsg is a MessageField
			"QuantityInvoiced<PayablesInvoiceDetail.EnteredQuantity>PlusOrdered<ContractLine.QuantityOrdered>ExceedsContractLifetimeMaxQuantity<ContractLine.LifetimeMaximumQuantity>"
		UnmatchedQuantityUnderContractMsg is a MessageField
			"QuantityInvoiced<ContractLine.QuantityOrdered>LessThanContractQuantity<ContractLine.DerivedRemainingQuantityOrdered>ByMoreThanTolerance"

		AmountOverContractMsg is a MessageField
			"AmountInvoiced<ContractLine.MaximumLineAmountInUse>ExceedsContractLifetimeMax<ContractLine.LifetimeMaximumAmount>"
		AmountUnderContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>UnderContractLifetimeMax<ContractLine.LifetimeMaximumAmount>ByMoreThanTolerance"
		CostOverContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>ExceedsContractCost<ContractLine.DerivedMatchBaseCost>"
		CostUnderContractMsg is a MessageField
			"InvoiceCost<PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision>LessThanContractCost<ContractLine.DerivedMatchBaseCost>ByMoreThanTolerance"
		QuantityOverContractMsg is a MessageField
			"QuantityInvoiced<ContractLine.QuantityOrdered>ExceedsContractLifetimeMaxQuantity<ContractLine.LifetimeMaximumQuantity>"
		QuantityUnderContractMsg is a MessageField
			"QuantityInvoiced<ContractLine.QuantityOrdered>LessThanContractLifetimeMaxQuantity<ContractLine.LifetimeMaximumQuantity>ByMoreThanTolerance"

		CostChangeMessage is a MessageField
			"PurchaseOrderLineHasCostChanges;ViewInManagePurchaseOrdersLineAuditHistory"
		HasOtherMessages is a MessageField
			"CostMessagesForThisItemExistOnOtherInvoices;ViewOnOtherMessagesTab"

		ServiceContractMessage is a DerivedField
			type is Alpha size 200
			if (PayablesInvoiceDetail.IsMatched)
				if (OnlyContractLineEntered)
					if (ContractLine.ServiceCode.Amount)
						if (MessageType.Cost)
							if (MessageSubType.InvoiceOverReceipt)
								return AmountOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return AmountUnderContractMsg
					else
					if (ContractLine.ServiceCode.Quantity)
						if (MessageType.Cost)
							if (MessageSubType.InvoiceOverReceipt)
								return CostOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return CostUnderContractMsg
						else
						if (MessageType.Quantity)
							if (MessageSubType.InvoiceOverReceipt)
								return QuantityOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return QuantityUnderContractMsg
			else
				if (OnlyContractLineEntered)
					if (ContractLine.ServiceCode.Amount)
						if (MessageType.Cost)
							if (MessageSubType.InvoiceOverReceipt)
								return UnmatchedAmountOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return UnmatchedAmountUnderContractMsg
					else
					if (ContractLine.ServiceCode.Quantity)
						if (MessageType.Cost)
							if (MessageSubType.InvoiceOverReceipt)
								return UnmatchedCostOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return UnmatchedCostUnderContractMsg
						else
						if (MessageType.Quantity)
							if (MessageSubType.InvoiceOverReceipt)
								return UnmatchedQuantityOverContractMsg
							else
							if (MessageSubType.InvoiceUnderReceipt)
								return UnmatchedQuantityUnderContractMsg

		DerivedUpdateActionCompletionMessage is a ConditionalField
			type is Alpha size 90
			restricted
			if (GiveCompletionMessageWithCostPhrase)
				UpdateActionCompletionMessageWithCostPhrase
			else
				UpdateActionCompletionMessage


		UpdateAndReleaseActionCompletionMessage is a MessageField
			restricted
			"UpdateAndReleaseComplete"

		ReleaseCompleteMessage is a MessageField
			restricted
			"ReleaseComplete"

		UpdateAndReleaseActionCompletionMessageWithCostPhrase is a MessageField
			restricted
			"UpdateAndReleaseComplete,AdjustedPOUnitCostIsGreaterThanInvoiceUnitCost"

		DerivedUpdateAndReleaseActionCompletionMessage is a ConditionalField
			type is Alpha size 90
			restricted
			if (GiveCompletionMessageWithCostPhrase)
				UpdateActionCompletionMessageWithCostPhrase
			else
			if (ApplicationAction.Chargeback)
				UpdateActionCompletionMessageWithChargeback
			else
				UpdateActionCompletionMessage


		ChargebackCompletionMessage	is a MessageField
			restricted
			"InvoiceReleased,ChargebackCreatedPayablesInvoice=<PayablesInvoice>"

		DerivedAddCommentsLabel is a LabelField
			restricted
			"AddComments"

		DerivedHasCommentsLabel is a LabelField
			restricted
			"HasComments"

		DerivedCommentsButtonLabel is a ConditionalField
			type is Alpha size 11
			restricted
			if (HasComments)
				DerivedHasCommentsLabel
			else
				DerivedAddCommentsLabel


		DerivedPurchaseOrderLineCommentsConditionalMessage is a ConditionalField
			type is Alpha size 52

			if (PurchaseOrderLine.HasComments)
				DerivedPurchseOrderLineCommentsMessage
			else
				blank

		DerivedPurchseOrderLineCommentsMessage is a MessageField
			restricted
			"PurchaseOrderLineHasCommentsAndPossiblyAttachments"

		DerivedServiceContractLineCommentsConditionalMessage is a ConditionalField
			type is Alpha size 52

			if (PurchaseOrderLine.HasComments)
				DerivedPurchseOrderLineCommentsMessage
			else
				blank

		DerivedServiceContractLineCommentsMessage is a MessageField
			restricted
			"ServiceContractLineHasCommentsAndPossiblyAttachments"

		DerivedApprove is a ConditionalField
			type is Boolean
			restricted
			if (ApplicationAction.Approve)
				true
			else
				false

		DerivedChargeback is a ConditionalField
			type is Boolean
			restricted
			if (ApplicationAction.Chargeback)
				true
			else
				false

		DerivedOnContract is a DerivedField
			type is Boolean
			restricted
			if (MatchMessageOrigin.Service)
				return true
			else
			if (PayablesInvoiceDetail.PurchaseOrderLine.Contract entered)
				return true
			else
			if (PayablesInvoiceDetail.Contract entered)
				return true
			else
				return false

		DerivedChargebackAmount is a DerivedField
			type is like InternationalAmount

			if (ChargebackPayablesInvoiceRel exists)
				return ChargebackPayablesInvoiceRel.InvoiceAmount
			else
			if (MessageType.Quantity)
				return ((sum PurchaseOrderReceiptLinesByPurchaseOrderLineRel.VendorPriceUOMQuantity - PayablesInvoiceDetail.MatchedQuantity) * PayablesInvoiceDetail.MatchUnitCost)
			else
			if (MessageType.Cost)
				if (PayablesInvoiceDetail.PurchaseOrderReceiptLine.VendorPriceUOM = PayablesInvoiceDetail.PurchaseOrderReceiptLine.ReceivedUOM)
					if (AdjustedCostRel.AdjustedUnitCost entered)
						return ((PayablesInvoiceDetail.MatchUnitCost - AdjustedCostRel.AdjustedUnitCost) * (sum PurchaseOrderReceiptLinesByPurchaseOrderLineRel.VendorPriceUOMQuantity))
					else
						return ((PayablesInvoiceDetail.MatchUnitCost - PayablesInvoiceDetail.PurchaseOrderReceiptLine.MatchUnitCost) * (sum PurchaseOrderReceiptLinesByPurchaseOrderLineRel.VendorPriceUOMQuantity))
				else
					return ((PayablesInvoiceDetail.MatchUnitCost - PayablesInvoiceDetail.PurchaseOrderReceiptLine.MatchUnitCost) * PayablesInvoiceDetail.PurchaseOrderReceiptLine.VendorPriceUOMQuantity)
			else
			if (MessageType.Item or MessageType.NoReceiptLine)
				return (PayablesInvoiceDetail.MatchedQuantity * PayablesInvoiceDetail.MatchUnitCost)

   		DerivedQuantityDifference is a DerivedField
   			type is like Quantity

   			return (PayablesInvoiceDetail.DerivedInvoiceLineQuantityWithPrecision - PurchaseOrderLine.DerivedQuantityWithPrecision)

   		DerivedPurchaseOrderLineUnitCost is a DerivedField
   			type is like UnitCost

			if (PurchaseOrderLine.ItemType.Service
			and PurchaseOrderLine.ServiceCode.Amount
			and ServiceLineLinkRel exists)
				return ServiceLineLinkRel.PoCostUpd
			else
			if (PurchaseOrderLine.IsCatchWeightItem)
				return PurchaseOrderLine.EnteredUnitCost
			else
				return PurchaseOrderLine.DerivedUnitCostWithPrecision

   		DerivedCostDifference is a DerivedField
   			type is like UnitCost

			return (PayablesInvoiceDetail.DerivedInvoiceLineUnitCostWithPrecision - PurchaseOrderLine.DerivedUnitCostWithPrecision)

   		DerivedContractLineUnitCost is a DerivedField
   			type is like UnitCost

			if (ContractLine.CurrentNetCost entered)
				return ContractLine.CurrentNetCost
			else
				return ContractLine.CurrentNetCost

		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2


		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001

		DerivedDocument is a DerivedField
			type is Numeric 18
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return Contract
			else
				return PurchaseOrder

		DerivedPurchaseOrderOrContractQuantity is a DerivedField
			type is like Quantity
			default label is "Quantity"
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractLine.DerivedRemainingQuantityOrdered
			else
			if (PurchaseOrderLine.IsCatchWeightItem)
				return PurchaseOrderLine.VendorPriceUOMQuantityToProcess
			else
			if (MatchMessageOrigin.PoCost
			and PurchaseOrderLine.OpenToMatchQuantity entered)
				return PurchaseOrderLine.OpenToMatchQuantity
			else
				return PurchaseOrderLine.Quantity

		DerivedReceivedQuantity is a DerivedField
			type is like Quantity
			default label is "ReceivedQuantity"
			if (PurchaseOrderLine.IsCatchWeightItem)
			   	return PurchaseOrderLine.CatchWeightQuantity
			else
		   		return PurchaseOrderLine.ReceivedQuantity

		DerivedExtendedAmount is a DerivedField
		    type is like InternationalCost
		    default label is "Extended"
		    return DerivedPurchaseOrderOrContractQuantity * DerivedPurchaseOrderOrContractUnitCost
		    	
		DerivedPurchaseOrderOrContractUnitCost is a DerivedField
			type is like UnitCost
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractLine.BaseCost
			else
			if (PurchaseOrderLine.IsCatchWeightItem)
				return PurchaseOrderLine.EnteredUnitCost
			else
				return DerivedPurchaseOrderLineUnitCost

		DerivedItem is a DerivedField
			type is like MatchDetailKey
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractLine.ItemDescription
			else
				return PayablesInvoiceDetail.Item

		DerivedLine is a DerivedField
			type is Numeric size 6
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractLine
			else
				return PurchaseOrderLine.LineNumber

		DerivedCommentIndicator is a DerivedField
			type is Alpha 1
			if (HasComments)
				return "*"
			else
				return ""

		ReceiptIndicator is a DerivedField
			type is Alpha 1
			if (first ReceiptLinkTransactionsRel exists)
				return "*"
			else
				return ""

		OtherMessagesIndicator is a DerivedField
			type is Alpha 1
			if (first CostMessagesForOtherInvoicesRel exists)
				return "*"
			else
				return ""

		ContractLinkback 						is a MessageField
			restricted
			"<linkback(webapp is ContractManager navigation is ContractNav text is \"Link\")>"

		ContractLineLinkback					is a MessageField
			restricted
			"<linkback(webapp is ContractManager navigation is ContractLineDetails text is \"Link\")>"

		ContractAlertLinkback 					is a MessageField
			restricted
			"<linkback(webapp is ContractManager navigation is ContractAlertNav text is \"Alerts\")>"



	  	InvoiceMessageCount is a DerivedField
			type is Numeric 1
			restricted
			return 1

		CostMessageCount is a DerivedField
			type is Numeric 1
			restricted
			if (MessageType.Cost)
				return 1

		POCostMessageCount is a DerivedField
			type is Numeric 1
			restricted
			if (MessageType.Cost and MatchMessageOrigin.PoCost)
				return 1

		QuantityMessageCount is a DerivedField
			type is Numeric 1
			restricted
			if (MessageType.Quantity)
				return 1

		ItemMessageCount is a DerivedField
			type is Numeric 1
			restricted
			if (MessageType.Item)
				return 1

		NoReceiptMessageCount is a DerivedField
			type is Numeric 1
			restricted
			if (MessageType.NoReceiptLine)
				return 1

		DerivedPOCostFlag is a DerivedField
			type is like ApplicationAction
			restricted
			if (MatchMessageOrigin.PoCost)
				return ApplicationAction

		DerivedInvoiceMessageAction is a DerivedField
			type is like ApplicationAction
			restricted
			if (!MatchMessageOrigin.PoCost)
				return ApplicationAction

		AdjustUOM is a DerivedField
			type is like UnitOfMeasure
			if  ((PurchaseOrderLine.ItemType.Inventoried
			or    PurchaseOrderLine.ItemType.NonStock)
			and  (PurchaseOrderLine.Item.CatchWeightCode.AllTransactionsRequireBoth
			or    PurchaseOrderLine.Item.CatchWeightCode.ReceiptRequiresBoth))
				return Item.StockUOM
			else
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return ContractLine.UOM
			else
			if (DifferentUOM
			and RespondDate not entered)
				return blank
			else
				return PurchaseOrderLine.EnteredBuyUOM

		DifferentUOMMessage is a MessageField
			restricted
			"AdjustedCostMustUsePurchaseOrderUOM"

		DerivedInvoiceCostInPoUOM is a DerivedField
			type is like UnitCost
			initialize UOMCalculation
			UOMCalculation.InputUnitCost				= PayablesInvoiceDetail.EnteredUnitCost
			UOMCalculation.InputUOM						= PayablesInvoiceDetail.EnteredUOM
			UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
			UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
			return UOMCalculation.OutputUnitCost



		DerivedCreateDate is a DerivedField 
			type is Date
			return CreateDate

	Relations
		ContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
				related.Contract     					= PayablesInvoiceDetail.ContractLine.Contract
				related.ContractLine					= PayablesInvoiceDetail.ContractLine

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation	= Location
				related.Item				= Item

		CurrentMessageRel
			one-to-one relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PurchaseOrder							= CurrentPurchaseOrder
				related.PurchaseOrderLine						= CurrentPurchaseOrderLine
				related.Contract								= CurrentContract
				related.ContractLine							= CurrentContractLine
				related.PayablesInvoiceDetail					= CurrentPayablesInvoiceDetail
				related.MatchInvoiceMessage						= CurrentMatchInvoiceMessage

	 	CurrentCostMessageRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PurchaseOrder							= CurrentPurchaseOrder
				related.PurchaseOrderLine						= CurrentPurchaseOrderLine
				related.Contract								= CurrentContract
				related.ContractLine							= CurrentContractLine
				related.PayablesInvoiceDetail					= CurrentPayablesInvoiceDetail
	 		Instance Selection
	 			where (related.ApplicationAction.Chargeback
				and    related.MessageType.Cost)

		ChargebackMessagesRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.ApplicationAction.Chargeback)

		POCostMessagesForMatchReconciliationInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
				related.PayablesInvoiceDetail	= PayablesInvoiceDetail

		POCostMessagesForMatchReconciliationOpenInvoiceMessagesRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Status != "9"
				and    related.MatchMessageOrigin = "1")

		OpenMessagesRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.UniqueID != UniqueID
				and    !related.Status.Closed)

		AllMatchInvoiceMessagesForPayablesInvoiceRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice

	 	ClosedReconMatchChargebackQuanityMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.MatchMessageOrigin.ReconMatch
	 			and    related.Status.Closed
				and    related.ApplicationAction.Chargeback
				and    related.MessageType.Quantity)

	 	ClosedReconMatchChargebackCostMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.MatchMessageOrigin.ReconMatch
	 			and    related.Status.Closed
				and    related.ApplicationAction.Chargeback
				and    related.MessageType.Cost)

	 	ClosedPOCostAdjustCostMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.MatchMessageOrigin.PoCost
	 			and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost
				and    related.MessageType.Cost)

	 	ChargebackQuantityMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.ApplicationAction.Chargeback
				and    related.MessageType.Quantity)

	 	ChargebackCostMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.ApplicationAction.Chargeback
				and    related.MessageType.Cost)

	 	NonChargebackCostMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (!related.ApplicationAction.Chargeback
				and    related.MatchMessageOrigin.ReconMatch
				and    related.MessageType.Cost)
	 	NonChargebackQuantityMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (!related.ApplicationAction.Chargeback
				and    related.MatchMessageOrigin.ReconMatch
				and    related.MessageType.Quantity)
	 	ClosedChargebackCostMessagesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
	 			where (related.Status.Closed
				and    related.ApplicationAction.Chargeback
				and    related.MessageType.Cost)

	 	AdjustedCostRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
				related.Contract				= Contract
				related.ContractLine			= ContractLine
	 			related.PayablesInvoiceDetail	= PayablesInvoiceDetail
	 		Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.ApplicationAction.AdjustCost)

	 	CostMessagesForOtherInvoicesRel
	 		one-to-many relation to MatchInvoiceMessage
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 		Instance Selection
				where (related.PurchaseOrder			= PurchaseOrder
	 			and    related.PurchaseOrderLine		= PurchaseOrderLine
				and    related.Contract					= Contract
				and    related.ContractLine				= ContractLine
				and    related.MatchMessageOrigin.PoCost
				and    related.UniqueID				not = UniqueID)

		PayablesAuthorityCodeDetailRel
			one-to-one relation to PayablesAuthorityCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= PayablesInvoice.VendorGroup
				related.PayablesAuthorityCode	= AuthorityCode
				related.Company					= PayablesInvoice.Company

		PayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company = Company

		ChargebackPayablesInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company					= Company
				related.Vendor					= PayablesInvoice.Vendor
				related.Invoice					= PayablesInvoice.Invoice
				related.Suffix					= 111
				related.CancelSequence			= blank
				related.InvoiceDate				= PayablesInvoice.InvoiceDate

		PayablesInvoiceDetailSet10Rel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine

		CurrentInvoiceDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine
				related.Contract					= CurrentContract
				related.ContractLine				= CurrentContractLine
				related.PayablesInvoiceDetail		= CurrentPayablesInvoiceDetail

		CurrentPOLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.PurchaseOrder				= CurrentPurchaseOrder
				related.PurchaseOrderLine			= CurrentPurchaseOrderLine

		CurrentContractLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.PurchaseOrder				= CurrentContract
				related.PurchaseOrderLine			= CurrentContractLine

		PayInvDistribRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company					= PayablesInvoiceDetail.Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AddOnCharge		not entered)

		PayablesInvoiceRetainageDistributionRel
			classic name is APDISTPAY
			one-to-one relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses symbolic key
				related.Company                                                     	= LocalDBCompany
				related.Vendor                                                     	 	= LocalDBVendor
				related.PayablesInvoiceRetainageDistribution.PayablesInvoice			= LocalDBInvoice
				related.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	= LocalPaymentSequenceNumber
				related.PayablesInvoiceRetainageDistribution.PayablesMatchLine  		= LocalDBLineNumber
				related.PayablesInvoiceRetainageDistribution.MatchDistributionSequence	= CurrentPayablesInvoiceDetail
				related.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = LocalDistributionSequence

		DistributionProcessLevelRel
			one-to-one relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.PayablesProcessLevel		= PayablesInvoice.ProcessLevel

		PayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder				= PurchaseOrder
				and     related.PurchaseOrderLine			= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   	= PayablesInvoiceDetail
				and     related.AddOnCharge 				= blank
				and     related.TaxCode						= blank)

		CurrentReceiptLineRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= CurrentReceipt
				related.PurchaseOrderReceiptLine	= CurrentReceiptLine

		PurchaseOrderReceiptLinesByPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set5
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine

		MNRReceiptLinkRel
			one-to-one relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
				related.Company = Company
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= PayablesInvoiceDetail.PurchaseOrderReceipt
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= PayablesInvoiceDetail.PurchaseOrderReceiptLine
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchObjectID
				related.PurchaseOrderReceiptInvoiceLink.MatchSequence				= 9999  
				related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= blank

		LocalReceiptLinkRel
			one-to-one relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= LocalMatchObjectID
				related.PurchaseOrderReceiptInvoiceLink.MatchSequence				= LocalMatchSequence
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= LocalPurchaseOrderReceipt
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= LocalPurchaseOrderReceiptLine
				related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= blank

		ReceiptLinkNoReceiptRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchObjectID
				related.PurchaseOrderReceiptInvoiceLink.MatchSequence				= PayablesInvoiceDetail.MatchSequence
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= blank
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= blank
			Instance Selection
				where (related.Type = "MA"
				and    related.PurchaseOrderLine							= PurchaseOrderLine
				and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	not entered
				and    related.MatchedNotReceivedQuantity					entered)

		ServiceLineLinkRel
			one-to-one relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchObjectID
				related.PurchaseOrderReceiptInvoiceLink.MatchSequence				= PayablesInvoiceDetail.MatchSequence
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= blank
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= blank
				related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= blank

		ReceiptLinkTransactionsRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set5
				related.Company = Company
				related.PurchaseOrder				= PurchaseOrder
			Instance Selection
				where (related.PurchaseOrderLine	= PurchaseOrderLine
				and    related.Type					= "MA")

		PayablesAuthorizedBuyerRel
			one-to-many relation to PayablesAuthorizedBuyer			
			Field Mapping uses Set2
				related.VendorGroup			= Company.VendorGroup
				related.Buyer				= PurchaseOrder.Buyer

		POGeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= GeneralLedgerCompanyGroup
				related.Company						= Company

		MatchIDReceiptLinesRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set11
				related.Company					= Company
				related.MatchObjectID			= MatchObjectID
			Instance Selection
				where (related.PurchaseOrder				= PurchaseOrder
				and    related.PurchaseOrderLine			= PurchaseOrderLine)
		
		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company
				
		PrimaryContactRel
			one-to-one relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = PayablesCompanyRel.VendorGroup
				related.Contract      = Contract
		
	Dimensions


		Buyer



		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays

		PurchaseOrderLine.ItemType
			dimension name is ItemType
		Item
		ItemGTIN

		PurchaseOrderLine.DerivedSourcingEventDimension
			dimension name is SourcingEvent




		PurchaseOrder
			dimension name is PurchaseOrderNumber
		Vendor
			caption is representative text

	Measures
		InvoiceMessageCount
		CostMessageCount
		POCostMessageCount
		QuantityMessageCount
		ItemMessageCount
		NoReceiptMessageCount

	Sets
		Set5

			indexed
			Sort Order

				Company
				PayablesInvoice
				PayablesInvoiceDetail
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				MatchInvoiceMessage

		Set1
			indexed
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoiceDetail
				MatchInvoiceMessage

		Set7
			indexed
			Sort Order
				Company
				Status
				Operator
				MatchMessageOrigin
				CreateDate
				RespondDate
				Vendor

				PayablesInvoice
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoiceDetail
				MatchInvoiceMessage

		ByContract
			Sort Order
				Contract
				ContractLine
				Company
				PayablesInvoice
				PayablesInvoiceDetail
				MatchInvoiceMessage
			Instance Selection
				where (OnlyContractLineEntered)

		NonClosedMessagesByPO
			indexed
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				PayablesInvoice
				PayablesInvoiceDetail
				Contract
				ContractLine
				MatchInvoiceMessage
			Instance Selection
				where (MessageNotClosed)
					
        ByDueDate
            indexed
            Sort Order
				DueDate
                Company
                PayablesInvoice
                PayablesInvoiceDetail
                PurchaseOrder
                PurchaseOrderLine
                Contract
                ContractLine
                MatchInvoiceMessage
                
       	ByBuyer
            indexed
            Sort Order
            	Status
            	DueDate
                Buyer
                Company
                Vendor
                PayablesInvoice
                PayablesInvoiceDetail
                PurchaseOrder
                PurchaseOrderLine
                Contract
                ContractLine
                MatchInvoiceMessage
				
    Field Rules
		BuyerOwner
			default to Buyer

		AuthorityCode
			if (PayablesAuthorizedBuyerRel exists)
				default to first PayablesAuthorizedBuyerRel.AuthorityCode

		AuthorityCodeEmailAddress
			default to PayablesAuthorityCodeDetailRel.EmailAddress
			default to AuthorityCode.EmailAddress

		PayablesInvoiceCurrencyExchangeRate
			default to PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			default to 1

		ForwardToAuthorityCode
			if (!ApplicationAction.Forward)
				cannot be entered
					"CannotEnterForwardAuthorityCodeForAction<ApplicationAction>"

			constraint (ForwardToAuthorityCode.Active)
				"AuthorityCodeIsInactive"

		ForwardToBuyer
			if (!ApplicationAction.Forward)
				cannot be entered
					"CannotEnterForwardToBuyerForAction<ApplicationAction>"

			constraint (ForwardToBuyer.Active)
				"AuthorityCodeIsInactive"

		AdjustedUnitCost
			if (ApplicationAction.AdjustCost)

				constraint (AdjustedUnitCost > 0)
					"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndPurchaseOrderLineUnitCost"

				if (PurchaseOrderLine entered
				and PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
				and !PurchaseOrderLine.IsCatchWeightItem)

					initialize UOMCalculation
					UOMCalculation.InputUnitCost				= PayablesInvoiceDetail.EnteredUnitCost
					UOMCalculation.InputUOM						= PayablesInvoiceDetail.EnteredUOM
					UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					LocalUnitCost								= UOMCalculation.OutputUnitCost
					display "LocalUnitCost(1)<LocalUnitCost>"
				else
					LocalUnitCost								= PayablesInvoiceDetail.EnteredUnitCost
					display "LocalUnitCost(2)<LocalUnitCost>"




				if  (PurchaseOrderLine entered)
					if (PurchaseOrderLine.EnteredUnitCost <= LocalUnitCost)
						constraint (AdjustedUnitCost >= PurchaseOrderLine.EnteredUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndPurchaseOrderLineUnitCost"
						constraint (AdjustedUnitCost <= LocalUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndPurchaseOrderLineUnitCost"
					else
						constraint (AdjustedUnitCost <= PurchaseOrderLine.EnteredUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndPurchaseOrderLineUnitCost"
						constraint (AdjustedUnitCost >= LocalUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndPurchaseOrderLineUnitCost"
				else
				if  (ContractLine entered)
					if (ContractLine.BaseCost <= LocalUnitCost)
						constraint (AdjustedUnitCost >= ContractLine.BaseCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndContractLineUnitCost"
						constraint (AdjustedUnitCost <= LocalUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndContractLineUnitCost"
					else
						constraint (AdjustedUnitCost <= ContractLine.BaseCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndContractLineUnitCost"
						constraint (AdjustedUnitCost >= LocalUnitCost)
							"AdjustedUnitCostMustBeWithinInvoiceUnitCostAndContractLineUnitCost"

		AdjustedUnitCostUOM
			if (ApplicationAction.AdjustCost)
				if  (DifferentUOM)
					required
						"AdjustedUnitCostUOMIsRequiredWhenInvoiceUOMDiffersFromPurchaseOrderUOM"
				if  ((PurchaseOrderLine.ItemType.Inventoried
				or    PurchaseOrderLine.ItemType.NonStock)
				and  (PurchaseOrderLine.Item.CatchWeightCode.AllTransactionsRequireBoth
				or    PurchaseOrderLine.Item.CatchWeightCode.ReceiptRequiresBoth))
					default to Item.StockUOM
				else
				if (PayablesInvoice.MatchProcessType.ServiceContract)
					default to ContractLine.UOM
				else
					if  (!DifferentUOM)
						default to PurchaseOrderLine.EnteredBuyUOM

					constraint (AdjustedUnitCostUOM = PurchaseOrderLine.EnteredBuyUOM)
						"AdjustedUnitOfMeasureMustEqualPurchaseOrderLineUnitOfMeasure"


		POCostFlag
			if (!MatchMessageOrigin.PoCost)
				cannot be entered
					"POCostActionOnlyValidForPOCostMessages"

		InvoiceMessageAction
			if (MatchMessageOrigin.PoCost)
				cannot be entered
					"ReconciliationActionNotValidForPOCostMessages"

		CreateDate
			default to current timestamp

		DateCreated
			default to current corporate date

	Rule Blocks
		TransientPOCostFlagConstraints
			if (ApplicationAction.AdjustCost)
				constraint (AdjustedUnitCost entered)
					"<AdjustAmountEditMsg>" //"IfAdjustingPOCostThenYouMustEnterAnAmount"
				if (Buyer entered)
					if (PayablesInvoiceDetail.ContractLine entered)
						constraint (BuyerOwner.OverrideContractCost)
							"CannotAdjust,AllowContractUnitCostOverrideIsSetTo'No'"
					else
						constraint (BuyerOwner.OverrideLastPOLastCost)
							"CannotAdjust,AllowLastUnitCostOverrideAndAllowLastPOUnitCostOverrideIsSetTo'No'"
			else
			if (ApplicationAction.AcceptWorkInSmartRecon)
				constraint (AdjustedUnitCost not entered)
					"WhenPurchaseOrderUnitCostIsMarkedAsCorrect,AdjustedUnitCostCannotBeEntered"
			else
			if (ApplicationAction.Forward)			
				if (ForwardToAuthorityCode entered)
					constraint (ForwardToBuyer not entered)
						"CannotForwardToAuthorityCodeAndBuyerAtTheSameTime"
					constraint (ForwardToAuthorityCode.EmailAddress entered)
						"Forward_\ToActionRequiresAValidEmailAddress"
				if (ForwardToBuyer entered)
					constraint (ForwardToBuyer.EmailAddress entered)
						"Forward_\ToActionRequiresAValidEmailAddress"

		TransientPOCostFlagUpdates

			constraint (ApplicationAction entered)
				"POCostActionRequiredForPOCostMessage"
			if (ApplicationAction.AdjustCost)
				constraint (ForwardToAuthorityCode not entered
				and         ForwardToBuyer not entered)
					"CannotAdjustCostAndAlsoForwardToAnotherBuyer"
				RespondDate				= current corporate date
			else
			if (ApplicationAction.AcceptWorkInSmartRecon)
				constraint (ForwardToAuthorityCode not entered
				and         ForwardToBuyer not entered)
					"CannotAcceptCostAndAlsoForwardToAnotherBuyer"
				RespondDate				= current corporate date
			else








				initialize ApplicationAction
				initialize AdjustedUnitCost



		TransientServiceReconFlagsConstraints
			constraint (AdjustedUnitCost not entered)
				"CannotEnterAdjustedUnitCostForMatchReconciliationMessage"
			constraint (ApplicationAction entered)
				"ReconciliationActionRequiredForReconciliationMessage"
			if (ApplicationAction.Approve)
				constraint (ForwardToAuthorityCode not entered
				and         ForwardToBuyer not entered)
					"CannotApproveAndAlsoForwardToAnotherBuyer"
				constraint (NotPendingMessage)
					"MessageInPendingState;ApprovalNotAllowed;MustChargebackOrForwardTheMessage"


			if (ApplicationAction.Chargeback)
				constraint (ForwardToAuthorityCode not entered
				and         ForwardToBuyer not entered)
					"CannotChargebackAndAlsoForwardToAnotherBuyer"
				constraint (MessageSubType.ItemDifference
					or      MessageSubType.InvoiceOverReceipt)
					"ChargebackCannotBeCreatedForAnUnderToleranceItem"
				if (MatchMessageOrigin.Dropship
				or  MatchMessageOrigin.Service
				or  PurchaseOrderLine.ItemType.Service)
					if  ((PurchaseOrderLine.ItemType.Service
					and   PurchaseOrderLine.ServiceCode.Amount)
					or   (ContractLine entered
					and   ContractLine.ServiceCode.Amount))
						NextSentence = true
					else
					if (MessageType.Cost)
						constraint (PayablesInvoiceDetail.EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
							"CannotChargeback;InvoiceUnitCostLessThanOrEqualToPOUnitCost"

					if (MessageType.Quantity)
						constraint (PayablesInvoiceDetail.EnteredQuantity > PurchaseOrderLine.Quantity)
							"CannotChargeback;InvoiceQuantityLessThanOrEqualToPOQuantity"
				else
				if (MatchMessageOrigin.ReconMatch
				and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
					if  (MessageType.NoReceiptLine
					and  PurchaseOrderLine.ReceivedQuantity entered
					and !PurchaseOrderLine.ItemType.Service)
						constraint (PayablesInvoiceDetail.EnteredQuantity <= PurchaseOrderLine.MatchedNotReceivedQuantity)
							"CannotChargeback;TheMatchedNotReceivedQuantityHasBeenReceived"
					else
					if (MessageType.Quantity)
						if  (PurchaseOrderLine.Closed.Yes
						and  PurchaseOrderLine.MatchedNotReceivedQuantity not entered
						and !PurchaseOrderLine.ItemType.Service)
							constraint (PurchaseOrderLine.MatchedNotReceivedQuantity entered)
								"CannotChargeback;TheMatchedNotReceivedQuantityHasBeenReceived"
						else
						if  (!PurchaseOrderLine.Closed.Yes
						and  !PurchaseOrderLine.ItemType.Service)
							if (MNRReceiptLinkRel exists)
								constraint (MNRReceiptLinkRel.MatchedQuantity <= PurchaseOrderLine.MatchedNotReceivedQuantity)
									"CannotChargeback;TheMatchedNotReceivedQuantityHasBeenReceived"


		CreatePayablesInvoiceDiscountRules			
			if (Company.MatchCompanyRel.DiscountRecognition.Match
			and ChargebackInvoiceView.DiscountAmount entered)
				if (ChargebackInvoiceView.PayablesInvoice.PayablesInvoicePaymentRel exist)
					invoke Create PayablesInvoiceDiscount
						invoked.Company								= ChargebackInvoiceView.PayablesInvoice.Company
						invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
						invoked.PayablesInvoicePayment				= first ChargebackInvoiceView.PayablesInvoice.PayablesInvoicePaymentRel.PayablesInvoicePayment
						invoked.DiscountType						= "M"
						invoked.PostDate							= ChargebackInvoiceView.DistributionDate
						invoked.DiscountAmount						= first ChargebackInvoiceView.PayablesInvoice.PayablesInvoicePaymentRel.PayablesInvoicePayment.DiscountAmount
						invoked.Status								= 1
						invoked.ProcessLevel						= ChargebackInvoiceView.ProcessLevel

					invoke FastUpdate first ChargebackInvoiceView.PayablesInvoice.PayablesInvoicePaymentRel
						invoked.MatchDiscountTaken				= "Y"
						invoked.LastUpdateBy					= actor
						invoked.LastUpdateDate					= current timestamp

		ProcessChargebackRules					
			initialize			LocalChargebackAmount
			initialize			LocalServiceLineChargeBackAmount
			initialize			LocalTaxableAmount
			initialize			LocalTaxAmount
			initialize 			SaveReasonCode
			initialize			LocalReference

			for each ChargebackMessagesRel
				CurrentPurchaseOrder			= each.PurchaseOrder
				CurrentPurchaseOrderLine		= each.PurchaseOrderLine
				CurrentContract					= each.Contract
				CurrentContractLine				= each.ContractLine
				CurrentPayablesInvoiceDetail 	= each.PayablesInvoiceDetail
				CurrentMatchInvoiceMessage		= each.MatchInvoiceMessage
				CurrentReceipt					= CurrentInvoiceDetailRel.PurchaseOrderReceipt
				CurrentReceiptLine 				= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine

				initialize			LocalReceiptVendorPriceUOMQuantity
				initialize			LocalReceiptMatchedQuantity
				initialize			LocalTempMatchQuantity

				if (SaveReasonCode not entered)
					SaveReasonCode				= each.ReasonCode
				if (LocalReference not entered)
					LocalReference				= each.Reference


				initialize	LocalCostChargebackSw
				initialize	LocalMa66AdjustUnitCost
				initialize	LocalCostChargebackSw
				if (CurrentMessageRel.ApplicationAction.Chargeback)
					if (CurrentMessageRel.MessageType.Cost)
						LocalMatchedQuantity			= CurrentInvoiceDetailRel.MatchedQuantity
						LocalMessageType				= CurrentMessageRel.MessageType

					if (CurrentMessageRel.MessageType.NoReceiptLine)
						invoke Update CurrentMessageRel.first ReceiptLinkNoReceiptRel
							invoked.ChargebackQuantity		= CurrentMessageRel.first ReceiptLinkNoReceiptRel.MatchedNotReceivedQuantity
							initialize invoked.MatchedNotReceivedQuantity
					LocalChargebackExists = true
					if (CurrentMessageRel.MatchMessageOrigin.ReconMatch
					and !CurrentInvoiceDetailRel.ItemType.Service)
						LocalMatchObjectID					= CurrentMessageRel.MatchObjectID

						for each CurrentMessageRel.PurchaseOrderReceiptLinesByPurchaseOrderLineRel
							LocalPurchaseOrderReceipt		= each.PurchaseOrderReceipt
							LocalPurchaseOrderReceiptLine	= each.PurchaseOrderReceiptLine
							LocalMatchSequence				= each.MatchSequence

							if  (CurrentInvoiceDetailRel.IsCatchWeight)

								LocalReceiptVendorPriceUOMQuantity 	+=	each.CatchWeightQuantity
								LocalReceiptMatchedQuantity 		+= 	each.CatchWeightQuantity
							else
							if (LocalReceiptLinkRel exist
							and LocalReceiptLinkRel.Type = "MA")





								LocalReceiptVendorPriceUOMQuantity 	+=	(LocalReceiptLinkRel.MatchedQuantity
																		* (each.VendorBuyUOMMultiplier / each.VendorPriceUOMMultiplier))
								LocalReceiptMatchedQuantity 		+= 	(LocalReceiptLinkRel.MatchedQuantity
																		* (each.VendorBuyUOMMultiplier / each.VendorPriceUOMMultiplier))
							else

								if (each.Invoice = PayablesInvoice.Invoice)
									LocalReceiptVendorPriceUOMQuantity		+= each.VendorPriceUOMQuantity
									LocalReceiptMatchedQuantity				+= each.MatchedQuantity


						if (CurrentInvoiceDetailRel.PurchaseOrderReceiptLine entered)
							LocalReceiptUnitCost		= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.MatchUnitCost
							if (CurrentInvoiceDetailRel.IsCatchWeight)
								LocalReceiptUnitCost	= CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost
							if (CurrentMessageRel.ClosedPOCostAdjustCostMessagesRel exists)
								LocalMa66AdjustUnitCost			= CurrentMessageRel.first ClosedPOCostAdjustCostMessagesRel.AdjustedUnitCost
							if (LocalMa66AdjustUnitCost entered)
								LocalReceiptUnitCost		= LocalMa66AdjustUnitCost

						if (CurrentInvoiceDetailRel.TaxCode entered)
							if  (CurrentMessageRel.MessageType.Cost
							and  CurrentInvoiceDetailRel.IsCatchWeight)
								LocalTaxableAmount					+= (LocalReceiptVendorPriceUOMQuantity
																		* (CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

							else
							if  (CurrentMessageRel.MessageType.Quantity
							and  CurrentInvoiceDetailRel.IsCatchWeight)
								LocalTaxableAmount					+= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
																	* CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost)

							else
							if (CurrentMessageRel.MessageType.Quantity)
								LocalTaxableAmount					+= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
																		* CurrentInvoiceDetailRel.MatchUnitCost)
							else
							if (CurrentMessageRel.MessageType.Cost)
								LocalTaxableAmount					+= (LocalReceiptVendorPriceUOMQuantity
																		* (LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))
							else
							if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
								LocalTaxableAmount					+= ((CurrentInvoiceDetailRel.MatchedQuantity
																		* CurrentInvoiceDetailRel.MatchUnitCost) * -1)


						if (CurrentInvoiceDetailRel.IsCatchWeight)
							NextSentence = true
						else
						if (CurrentInvoiceDetailRel.PurchaseOrderLine exists)
							if (!CurrentInvoiceDetailRel.PurchaseOrderReceiptLine entered)
								if (CurrentMessageRel.MessageType.Cost)
									if (CurrentInvoiceDetailRel.PurchaseOrderLine.MatchedQuantity > CurrentInvoiceDetailRel.PurchaseOrderLine.VendorPriceUOMQuantity)
										LocalReceiptVendorPriceUOMQuantity	= (CurrentInvoiceDetailRel.PurchaseOrderLine.VendorPriceUOMQuantity
																			- (CurrentInvoiceDetailRel.PurchaseOrderLine.MatchedQuantity - CurrentInvoiceDetailRel.MatchedQuantity))
										LocalReceiptMatchedQuantity			= LocalReceiptVendorPriceUOMQuantity

									else
										LocalReceiptVendorPriceUOMQuantity	= CurrentInvoiceDetailRel.MatchedQuantity
										LocalReceiptMatchedQuantity			= CurrentInvoiceDetailRel.MatchedQuantity

								else
									LocalReceiptVendorPriceUOMQuantity		= CurrentInvoiceDetailRel.PurchaseOrderLine.MatchedQuantity

							else
								if (LocalMatchedQuantity entered
								and !CurrentMessageRel.AlsoHasQuantityChargebackMessage)
									LocalReceiptMatchedQuantity				= LocalMatchedQuantity

						if (!CurrentInvoiceDetailRel.ItemType.Service)
							if (CurrentInvoiceDetailRel.TaxCode entered)
								initialize CalculateTax
								initialize LocalAccruedTaxAmount
								initialize LocalInvoiceTaxAmount
								CalculateTax.TaxCode						= CurrentInvoiceDetailRel.TaxCode
								CalculateTax.ProductTaxCategory				= CurrentInvoiceDetailRel.ProductTaxCategory
								CalculateTax.Function						= CalculateTax.Function.CalculateTax
								CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
								CalculateTax.System							= "AP"
								if  (CurrentMessageRel.MessageType.Quantity
								and  CurrentInvoiceDetailRel.IsCatchWeight)
									CalculateTax.TaxableAmount				= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost)

								else
								if  (CurrentMessageRel.MessageType.Cost
								and  CurrentInvoiceDetailRel.IsCatchWeight)
									CalculateTax.TaxableAmount				= (LocalReceiptVendorPriceUOMQuantity * (CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

								else
								if (CurrentMessageRel.MessageType.Quantity)

									CalculateTax.TaxableAmount				= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost) 

								else
								if (CurrentMessageRel.MessageType.Cost)
									if (CurrentMessageRel.ChargebackQuantityMessagesRel not exists
									or  CurrentMessageRel.NonChargebackQuantityMessagesRel exists)
										CalculateTax.TaxableAmount				= (CurrentInvoiceDetailRel.MatchedQuantity * (LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

									else 
										CalculateTax.TaxableAmount				= (LocalReceiptVendorPriceUOMQuantity * (LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

								else
								if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
									CalculateTax.TaxableAmount				+= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) * -1)


								CalculateTax.InvoiceDate					= PayablesInvoice.InvoiceDate
								CalculateTax.PaymentDate					= PayablesInvoice.InvoiceDate
								CalculateTax.GeneralLedgerDate 				= PayablesInvoice.InvoiceDate
								CalculateTax.TaxDate						= PayablesInvoice.InvoiceDate
								CalculateTax.PostalAddress					= PayablesInvoice.ProcessLevel.PostalAddress
								CalculateTax.FromPostalAddress				= PayablesInvoice.Location.PostalAddress
								LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
								LocalWorkTaxableAmount						= CalculateTax.TaxableAmount
								round LocalWorkTaxableAmount to nearest DerivedRoundTo
								LocalChargebackAmount 						+= LocalWorkTaxableAmount





								I1 = 1
								while (I1 <= 8
								and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
									if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag = "A")
										LocalAccruedTaxAmount				+= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
									else
										LocalInvoiceTaxAmount				+= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
										LocalTaxAmount						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
										round LocalTaxAmount to nearest DerivedRoundTo
										LocalChargebackAmount += LocalTaxAmount

									I1 += 1
							else

								if (CurrentMessageRel.MessageType.Quantity
								and  CurrentInvoiceDetailRel.IsCatchWeight)
									LocalChargebackAmount						+= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost)

								else
								if  (CurrentMessageRel.MessageType.Cost
								and  CurrentInvoiceDetailRel.IsCatchWeight)
									LocalChargebackAmount						+= (CurrentInvoiceDetailRel.MatchedQuantity * (CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

								else
								if (CurrentMessageRel.MessageType.Quantity)
									LocalChargebackAmount						+= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost)

								else
								if (CurrentMessageRel.MessageType.Cost)
									if (CurrentMessageRel.ChargebackQuantityMessagesRel not exists
									or  CurrentMessageRel.NonChargebackQuantityMessagesRel exists)

										LocalLineAmount						= (CurrentInvoiceDetailRel.MatchedQuantity * (LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))
										round LocalLineAmount to nearest DerivedRoundTo
										LocalChargebackAmount += LocalLineAmount
									else 

										LocalLineAmount						= (LocalReceiptVendorPriceUOMQuantity * (LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))
										round LocalLineAmount to nearest DerivedRoundTo
										LocalChargebackAmount += LocalLineAmount
								else
								if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
									LocalChargebackAmount						+= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) * -1)
					else
						include ServiceDropshipTaxAmountRules   

					if (((CurrentMessageRel.MessageType.Quantity
					or  CurrentMessageRel.MessageType.NoReceiptLine)
					and (CurrentMessageRel.MatchMessageOrigin.ReconMatch))
					or (CurrentInvoiceDetailRel.ItemType.Service
					and (CurrentMessageRel.MatchMessageOrigin.ReconMatch
					or CurrentMessageRel.MatchMessageOrigin.Service)))
						include WriteChargebackToPurchaseOrderLineRules



			if (!LocalChargebackExists)

				invoke FastUpdate PayablesInvoice
					invoked.MatchStatus		= 3
					invoked.LastUpdateDate	= current timestamp
					invoked.LastUpdateBy	= actor
				CompletionMessage = ReleaseCompleteMessage
			else
				if (PayablesInvoice.MatchProcessType.DropShip)
					for each AllMatchInvoiceMessagesForPayablesInvoiceRel
						if (each.ApplicationAction.Chargeback
						and (each.MessageType.Quantity
						or   each.MessageType.NoReceiptLine))
							CurrentPurchaseOrder			= each.PurchaseOrder
							CurrentPurchaseOrderLine		= each.PurchaseOrderLine
							CurrentContract					= each.Contract
							CurrentContractLine				= each.ContractLine
							CurrentPayablesInvoiceDetail 	= each.PayablesInvoiceDetail
							CurrentMatchInvoiceMessage		= each.MatchInvoiceMessage
							CurrentReceipt					= CurrentInvoiceDetailRel.PurchaseOrderReceipt
							CurrentReceiptLine 				= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine
							include WriteChargebackToPurchaseOrderLineRules

					if (PayablesInvoiceDetail.TaxCode entered)
						initialize CalculateTax
						CalculateTax.TaxEntity 			= PayablesInvoice.Company.AccountingEntity	
						CalculateTax.TaxCode			= PayablesInvoiceDetail.TaxCode
						CalculateTax.Function			= CalculateTax.Function.Inquire
						CalculateTax.System				= "AP"
						LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax


						LocalTaxType					= CalculateTax.DerivedTaxType
						LocalCalculateTaxRate		= (PayablesInvoiceDetail.TaxAmount / PayablesInvoiceDetail.TotalDistributionAmount)
						if (LocalTaxType	!= "C")
							initialize CalculateTax
							initialize LocalAccruedTaxAmount
							initialize LocalInvoiceTaxAmount
							CalculateTax.TaxCode						= PayablesInvoiceDetail.TaxCode
							CalculateTax.ProductTaxCategory				= PayablesInvoiceDetail.ProductTaxCategory
							CalculateTax.Function						= CalculateTax.Function.CalculateTax
							CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
							CalculateTax.System							= "AP"




				invoke CreateChargeback PayablesInvoice
					assign result to ChargebackInvoiceView
					invoked.Company						= PayablesInvoice.Company
					invoked.Vendor						= PayablesInvoice.Vendor
					invoked.Invoice						= PayablesInvoice.Invoice
					invoked.ProcessLevel				= PayablesInvoice.ProcessLevel
					invoked.ServiceContract				= PayablesInvoice.ServiceContract
					invoked.CancelSequence				= PayablesInvoice.CancelSequence
					invoked.InvoiceDate					= PayablesInvoice.InvoiceDate
					invoked.DistributionDate			= PayablesInvoice.DistributionDate
					invoked.DueDate						= PayablesInvoice.DueDate
					invoked.DiscountDate				= PayablesInvoice.DiscountDate
					invoked.DiscountPercent				= PayablesInvoice.DiscountPercent
					invoked.CashCode					= PayablesInvoice.CashCode
					invoked.AccrualCode					= PayablesInvoice.AccrualCode
					invoked.RetainageAccrualCode		= PayablesInvoice.RetainageAccrualCode
					invoked.DiscountAmount.ExchangeDate = PayablesInvoice.InvoiceDate

					invoked.MatchProcessType			= "E"
					invoked.Status						= 1
					invoked.InvoiceType					= "C"
					invoked.InvoiceCurrency				= PayablesInvoice.InvoiceCurrency
					invoked.BankTransactionCode			= PayablesInvoice.BankTransactionCode
					invoked.MatchStatus					= 0
					invoked.TermsCode					= PayablesInvoice.TermsCode
					invoked.ReasonCode					= SaveReasonCode
					invoked.Location					= PayablesInvoice.Location
					invoked.PurchaseFromLocation		= PayablesInvoice.PurchaseFromLocation
					invoked.RemitToCode					= PayablesInvoice.RemitToCode
					invoked.RetainageAccrualCode		= PayablesInvoice.RetainageAccrualCode
					invoked.Operator					= "MATCH"
					invoked.TransientJobName			= "ONLINE"
					invoked.InvoiceAmount.CurrencyAmount	= LocalChargebackAmount
					invoked.TaxableAmount				= LocalTaxableAmount
					invoked.PayVendor					= PayablesInvoice.PayVendor
					invoked.InvoiceGroup				= PayablesInvoice.InvoiceGroup
					invoked.Reference					= LocalReference
					if (LocalReference entered)
						invoked.Description				= LocalReference
					else
						invoked.Description				= PayablesInvoice.Description

				WorkChargebackInvoice					= ChargebackInvoiceView.PayablesInvoice


				LocalVoucherNumber			= PayablesInvoice.VoucherNumber
				invoke FastUpdate PayablesInvoice  
					invoked.Status			= 1
					invoked.MatchLevel		= "DM"
					invoked.MatchDate		= current corporate date
					if (!MatchMessageOrigin.ReconMatch)
						invoked.MatchObjectID = PayablesInvoice.MatchObjectID
					invoked.LastUpdateDate	= current timestamp
					invoked.LastUpdateBy	= actor
				if (!MatchMessageOrigin.ReconMatch)

					for each PayablesInvoice.PayablesInvoiceDetailRel
						invoke FastUpdate each.PayablesInvoiceDetail
							invoked.MatchObjectID	= PayablesInvoice.MatchObjectID
							invoked.MatchSequence	= each.PayablesInvoiceDetail
							invoked.MatchUpdateDate = current corporate date
							invoked.LastUpdateDate	= current timestamp
							invoked.LastUpdatedBy	= actor


				include CreateChargebackDetailsRules










				LocalDifference = ChargebackInvoiceView.InvoiceAmount.CurrencyAmount - ChargebackInvoiceView.TotalDistributionAmount.TransactionTotal

				if (LocalDifference entered
				and LocalDifference < .05
				and LocalDifference > -.05)

					invoke Create PayablesInvoiceDistribution
						invoked.Company								= Company
						invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
						invoked.DistributionAmount.CurrencyAmount	= LocalDifference
						invoked.GLTransactionAmount					= LocalDifference

						if (ChargebackInvoiceView.ProcessLevel.ToleranceOffsetAccount entered)
							invoked.DistributionAccount				= ChargebackInvoiceView.ProcessLevel.ToleranceOffsetAccount
							invoked.GLFinanceCodeBlock				= ChargebackInvoiceView.ProcessLevel.ToleranceOffsetAccount
						else
							invoked.DistributionAccount				= Company.MatchCompanyRel.ToleranceOffsetAccount
							invoked.GLFinanceCodeBlock				= Company.MatchCompanyRel.ToleranceOffsetAccount

						invoked.DistributionType					= "D"
						invoked.InvoiceCurrency						= ChargebackInvoiceView.InvoiceCurrency
						invoked.MatchCreated						= "D"
						invoked.ProcessLevel						= ChargebackInvoiceView.ProcessLevel
						invoked.Status								= 1
						invoked.DistributionDate					= ChargebackInvoiceView.DistributionDate
						invoked.LastUpdateBy						= actor
						invoked.LastUpdateDate						= current timestamp
						invoked.CreatedBy							= actor
				    	invoked.TransientBypassErrorUpdate			= true

				if (Company.MatchCompanyRel.DiscountRecognition.Match
				and PayablesInvoice.DiscountAmount.CurrencyAmount entered)
					include CreatePayablesInvoiceDiscountRules




				invoke UpdateFromMatchInvoiceMessage ChargebackInvoiceView.PayablesInvoice
					invoked.MatchStatus		= 5
					invoked.MatchLevel		= "DM"
					invoked.MatchDate		= current corporate date
					invoked.MatchObjectID	= MatchObjectID
					invoked.LastUpdateDate	= current timestamp
					invoked.LastUpdateBy	= actor
					invoked.TaxAmount		= ChargebackInvoiceView.PayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount

				if  (ChargebackInvoiceView.PayablesInvoice.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or   ChargebackInvoiceView.PayablesInvoice.GeneralLedgerSystemCodeRel.EncumbranceOption.Track)

					invoke UpdateToReleased GLCommit
						invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
						invoked.PrmUniqueID					= ChargebackInvoiceView.PayablesInvoice.UniqueID
						invoked.PrmAccountingEntity			= Company.AccountingEntity

					invoke EditTotalsRoute BudgetTemplateGroupTotal 	
						invoked.PrmFinanceEnterpriseGroup    		= Company.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup           		= ChargebackInvoiceView.PayablesInvoice.UniqueID
						invoked.PrmMode								= BudgetEditMode.UpdateOnly
						invoked.PrmBusinessClassName				= "PayablesInvoice"
						invoked.PrmEditContext              		= "CreateChargeback"

				if  (ChargebackInvoiceView.PayablesInvoice.ServiceContract entered)
					invoke FinishUpdateContractAmounts ChargebackInvoiceView.PayablesInvoice.ServiceContract

				CompletionMessage = MatchedWithAutoChargebackMsg + ChargebackInvoiceView.Invoice + "-" + ChargebackInvoiceView.Suffix

		CreateChargebackDistributionsRules	

			if ((CurrentMessageRel.MatchMessageOrigin.Service
			and CurrentMessageRel.PurchaseOrderLine not entered)
			and (CurrentInvoiceDetailRel.ContractLine entered))
				include CreateDistributionServiceAgreementRules		
			else

				if (!CurrentReceiptLineRel.ItemType = "I"
				and !MaidwsItemType = "I")
					WorkDistributionGroup.UnitAmount			= LocalMa66CBQuantity
				WorkDistributionGroup.Amount				= MaidwsTotalDistributionAmount

				if (CurrentMessageRel.MessageType.NoReceiptLine						
				and PurchaseOrderLine not entered
				and !MaidwsItemType = "I")
					if (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
						WorkDistributionGroup.Account		= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else
						WorkDistributionGroup.Account		= Company.MatchCompanyRel.ToleranceOffsetAccount
					LocalMa66WsDisAccount					= WorkDistributionGroup.Account
					WorkDistributionGroup.Company			= Company
					WorkDistributionGroup.UnitAmount		= MaidwsMatchedQuantity
					WorkDistributionGroup.Amount			= MaidwsMatchUnitCost * MaidwsMatchedQuantity

					include CreateAPDistributionsRules		
				else
				if (!CurrentReceiptLineRel.ItemType = "I"
				and !MaidwsItemType = "I"
				and PayablesInvoiceDistributionRel exist)

					if (LocalMa66wsNetChargebackQuantity entered
					and LocalQuantityAcceptSw)
						MaidwsMatchedQuantity		= LocalMa66wsNetChargebackQuantity
					if (MaidwsMatchedQuantity entered)		
						LocalMa66WsMadDistAmount	= MaidwsMatchedQuantity * MaidwsMatchUnitCost
					else
						LocalMa66WsMadDistAmount	= MaidwsEnteredUnitCost
					round LocalMa66WsMadDistAmount to nearest DerivedRoundTo
					LocalMa66WsRemainDistAmount		= LocalMa66WsMadDistAmount
					RemainingDistAmount				= LocalMa66WsMadDistAmount
					include BuildPayablesInvoiceDistributionRules	

				else
					if (LocalMa66wsNetChargebackQuantity = 0)
						LocalMa66wsNetChargebackQuantity = MaidwsMatchedQuantity
					include InventoryDistributionRules		


					include CreateAPDistributionsRules		



				if (MaidwsTaxCode entered)
					include BTaxDistributionRules		
					LocalTaxDistSw		= false

		BTaxDistributionRules		


			initialize	LocalApwsTranTotalTax
			initialize	LocalApwsTranTotalDistribution
			initialize	LocalApwsBaseTotalDistribution
			LocalTaxDistSw		= true

			if  (ChargebackInvoiceDetailView.PayablesInvoiceDetail exists
			and  ChargebackInvoiceDetailView.TaxAmount entered)
				RemainingDistAmount				= ChargebackInvoiceDetailView.TaxAmount

				RemainingDistAmount				= CalculateTax.OutputTotalTaxAmount
			else
			if  (ChargebackInvoiceDetailView.PayablesInvoiceDetail exists
			and  ChargebackInvoiceDetailView.AccruedTaxAmount entered)
				RemainingDistAmount				= ChargebackInvoiceDetailView.AccruedTaxAmount


			I1 = 1
			while (I1 <= 8
			and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)



				WorkDistributionGroup.UnitAmount		= blank
				LocalProductTaxCategory					= MaidwsProductTaxCategory
				if (CalculateTax.TaxTable.TaxTableOutput[I1].LandCostFlag)


					if (LocalTaxType.CalculatedRate)
						LocalMa66WsMadDistAmount		= CurrentInvoiceDetailRel.TaxAmount
						LocalMa66WsRemainDistAmount		= CurrentInvoiceDetailRel.TaxAmount
					else
						LocalMa66WsMadDistAmount		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
						LocalMa66WsRemainDistAmount		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP

					if  (!CurrentInvoiceDetailRel.ItemType.Inventoried
					and   CurrentMessageRel.PayablesInvoiceDistributionRel exists)


						UsingTaxTable = true
						include BuildPayablesInvoiceDistributionRules	
						UsingTaxTable = false
					else
						round LocalMa66WsMadDistAmount to nearest DerivedRoundTo
						WorkDistributionGroup.Amount	= LocalMa66WsMadDistAmount
						WorkDistributionGroup.Company	= Company		



						if (CurrentMessageRel.MessageType.Cost
						and CurrentInvoiceDetailRel.ItemType.Inventoried
						and LocalAcceptCostSw
						and LocalMNRDistSw)
							if (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
								WorkDistributionGroup.Account	= DistributionProcessLevelRel.ToleranceOffsetAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
							else
								WorkDistributionGroup.Account	= Company.MatchCompanyRel.ToleranceOffsetAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
							EndLoop	= true

						if  (CurrentMessageRel.MessageType.Quantity
						and  CurrentInvoiceDetailRel.ItemType.Inventoried
						and !LocalToleranceSw
						and  ((CurrentMessageRel.ChargebackCostMessagesRel not exists
						and   CurrentMessageRel.AdjustedCostRel exists)
						or    CurrentMessageRel.NonChargebackCostMessagesRel exists))
							if (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
								WorkDistributionGroup.Account	= DistributionProcessLevelRel.ToleranceOffsetAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
							else
								WorkDistributionGroup.Account	= Company.MatchCompanyRel.ToleranceOffsetAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
							EndLoop	= true


						if (!EndLoop)
							if (CurrentMessageRel.MessageType.Cost
							or (CurrentMessageRel.MessageType.Quantity
							and !LocalToleranceSw)
							or (CurrentMessageRel.MessageType.Quantity
							and (LocalToleranceSw
							and !LocalMA66wsPoHasTax)))

								if (CurrentInvoiceDetailRel.ItemType.Inventoried
								and !CurrentInvoiceDetailRel.ItemLocationRel.InventoryTracked)
									WorkDistributionGroup.Account	= CurrentInvoiceDetailRel.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
								else
								if (DistributionProcessLevelRel.CostVarianceAccount entered)
									WorkDistributionGroup.Account	= DistributionProcessLevelRel.CostVarianceAccount
								else
									WorkDistributionGroup.Account	= Company.MatchCompanyRel.CostVarianceAccount

							if (CurrentMessageRel.MessageType.Quantity
							and LocalToleranceSw
							and LocalMA66wsPoHasTax)

								if (DistributionProcessLevelRel.MatchedNotReceivedAccount entered
								and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
									WorkDistributionGroup.Account			= DistributionProcessLevelRel.MatchedNotReceivedAccount
								else
									if (DistributionProcessLevelRel.MatchWriteOffAccount entered
									and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchWriteOff)
										WorkDistributionGroup.Account		= DistributionProcessLevelRel.MatchWriteOffAccount
									else
										if (Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
											WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchedNotReceivedAccount
										else
											WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchWriteOffAccount


						include CreateAPDistributionsRules

















				else

					WorkDistributionGroup.Company	= Company		
					if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
						WorkDistributionGroup.Account	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "I"
					or  CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "G")
						WorkDistributionGroup.Account		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
					else
						WorkDistributionGroup.Account		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount
					LocalTaxAmount							= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
					round LocalTaxAmount to nearest DerivedRoundTo
					WorkDistributionGroup.Amount 			= LocalTaxAmount



					include CreateAPDistributionsRules


					RemainingDistAmount  							-= WorkDistributionGroup.Amount



					WorkDistributionGroup.Account = LocalMa66WsDisAccount

				I1 += 1

		InventoryDistributionRules		

			WorkDistributionGroup.UnitAmount				= LocalMa66wsNetChargebackQuantity
			WorkDistributionGroup.Amount					= MaidwsMatchUnitCost * LocalMa66wsNetChargebackQuantity

			if (CurrentMessageRel.MessageType.NoReceiptLine)
				if (DistributionProcessLevelRel.MatchedNotReceivedAccount entered
				and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
					WorkDistributionGroup.Account			= DistributionProcessLevelRel.MatchedNotReceivedAccount
					LocalMa66WsDisAccount					= WorkDistributionGroup.Account
				else
					if (DistributionProcessLevelRel.MatchWriteOffAccount entered
					and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchWriteOff)
						WorkDistributionGroup.Account		= DistributionProcessLevelRel.MatchWriteOffAccount
						LocalMa66WsDisAccount				= WorkDistributionGroup.Account
					else
						if (Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
							WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchedNotReceivedAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account
						else
							WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchWriteOffAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account
			else
				if (CurrentMessageRel.MessageType.Cost
				and !CurrentInvoiceDetailRel.ItemType.Service)
					if (CurrentReceiptLineRel.MatchUnitCost = CurrentReceiptLineRel.OriginalUnitCost
					and !LocalMNRDistSw
					and LocalAcceptCostSw)

						if (CurrentInvoiceDetailRel.ItemType.Inventoried
						and !CurrentInvoiceDetailRel.ItemLocationRel.InventoryTracked)
							WorkDistributionGroup.Account	= CurrentInvoiceDetailRel.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
							LocalMa66WsDisAccount			= CurrentInvoiceDetailRel.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if (DistributionProcessLevelRel.CostVarianceAccount entered)
							WorkDistributionGroup.Account	= DistributionProcessLevelRel.CostVarianceAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account
						else
							WorkDistributionGroup.Account	= Company.MatchCompanyRel.CostVarianceAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account
					else
						if (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
							WorkDistributionGroup.Account	= DistributionProcessLevelRel.ToleranceOffsetAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account
						else
							WorkDistributionGroup.Account	= Company.MatchCompanyRel.ToleranceOffsetAccount
							LocalMa66WsDisAccount			= WorkDistributionGroup.Account

				if (CurrentMessageRel.MessageType.Quantity
				and LocalToleranceSw)

					if (DistributionProcessLevelRel.MatchedNotReceivedAccount entered
					and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
						WorkDistributionGroup.Account			= DistributionProcessLevelRel.MatchedNotReceivedAccount
						LocalMa66WsDisAccount					= WorkDistributionGroup.Account
					else
						if (DistributionProcessLevelRel.MatchWriteOffAccount entered
						and Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchWriteOff)
							WorkDistributionGroup.Account		= DistributionProcessLevelRel.MatchWriteOffAccount
							LocalMa66WsDisAccount				= WorkDistributionGroup.Account
						else
							if (Company.MatchCompanyRel.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
								WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchedNotReceivedAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
							else
								WorkDistributionGroup.Account	= Company.MatchCompanyRel.MatchWriteOffAccount
								LocalMa66WsDisAccount			= WorkDistributionGroup.Account
				if (CurrentMessageRel.MessageType.Quantity
				and !LocalToleranceSw)
					if (DistributionProcessLevelRel.ToleranceOffsetAccount entered)
						WorkDistributionGroup.Account	= DistributionProcessLevelRel.ToleranceOffsetAccount
						LocalMa66WsDisAccount			= WorkDistributionGroup.Account
					else
						WorkDistributionGroup.Account	= Company.MatchCompanyRel.ToleranceOffsetAccount
						LocalMa66WsDisAccount			= WorkDistributionGroup.Account
				if (CurrentMessageRel.MessageType.Item)
					if (DistributionProcessLevelRel.ReceiptAccrualAccount entered)
						WorkDistributionGroup.Account	= DistributionProcessLevelRel.ReceiptAccrualAccount
						LocalMa66WsDisAccount			= WorkDistributionGroup.Account
					else
						WorkDistributionGroup.Account	= Company.MatchCompanyRel.ReceiptAccrualAccount
						LocalMa66WsDisAccount			= WorkDistributionGroup.Account


		CreateAPDistributionsRules		



			WorkDistributionGroup.Invoice				= MaidwsInvoice
			WorkDistributionGroup.CurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			WorkDistributionGroup.AccrualCode			= PayablesInvoice.AccrualCode
			WorkDistributionGroup.PurchaseOrder			= CurrentPurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine		= CurrentPurchaseOrderLine
			WorkDistributionGroup.MatchCreated			= "D"
			WorkDistributionGroup.AddOnCharge			= blank
			WorkDistributionGroup.Company				= Company
			initialize WorkDistributionGroup.TaxCode
			initialize WorkDistributionGroup.TaxRate
			initialize WorkDistributionGroup.TaxableAmount
			if (LocalTaxDistSw)
				if (CalculateTax.TaxType.CalculatedRate)
					WorkDistributionGroup.TaxRate			= MaidwsTaxAmount / MaidwsTotalDistributionAmount
				else
					WorkDistributionGroup.TaxRate			= CalculateTax.TaxTable.TaxTableOutput[I1].TaxRate
				WorkDistributionGroup.TaxCode				= CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode
				WorkDistributionGroup.TaxType				= CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag
				WorkDistributionGroup.TaxableAmount			= CalculateTax.TaxableAmount
				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A"
				and CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode entered)
					WorkDistributionGroup.AccrualCode		= CalculateTax.TaxTable.TaxTableOutput[I1].AccrualCode
			WorkDistributionGroup.Description			= CurrentMessageRel.Item
			WorkDistributionGroup.Date					= PayablesInvoice.DistributionDate





			include SplitAPDistributionRetainageRules	

		BuildPayablesInvoiceDistributionRules	


			initialize WorkDistributionGroup
			WorkDistributionGroup.FinanceEnterpriseGroup 		= Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company						= Company
			WorkDistributionGroup.Invoice						= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder					= CurrentPurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine				= CurrentPurchaseOrderLine

			initialize PercentAccumulated

			for each CurrentMessageRel.PayablesInvoiceDistributionRel


				if  (UsingTaxTable)
					if (!LocalTaxDistSw
					or (LocalTaxDistSw
					and CalculateTax.TaxTable.TaxTableOutput[I1].LandCostFlag))
						WorkDistributionGroup.Account					= each.DistributionAccount
					else
						WorkDistributionGroup.Company					= CalculateTax.InvoiceCompany
						if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag = "A")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputAccount
						if (CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint = "I"
						or  CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint = "G")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputAccount
						else
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputDueAccount
				else
					if (!LocalTaxDistSw
					or (LocalTaxDistSw
					and CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag))
						WorkDistributionGroup.Account					= each.DistributionAccount
						if  (MaidwsItemType.Inventoried
						and  LocalTaxDistSw)

							if (!ItemLocationRel.InventoryTracked)
								WorkDistributionGroup.Account			= CurrentMessageRel.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
							else
							if (DistributionProcessLevelRel.CostVarianceAccount entered)
								WorkDistributionGroup.Account	= DistributionProcessLevelRel.CostVarianceAccount
							else
								WorkDistributionGroup.Account	= Company.MatchCompanyRel.CostVarianceAccount

					else
						WorkDistributionGroup.Company					= CalculateTax.InvoiceCompany
						if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
						if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "I"
						or  CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "G")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
						else
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount



				WorkPercent										= each.DistributionAmount.CurrencyAmount / CurrentInvoiceDetailRel.TotalDistributionAmount
				LocalTaxAmount									= LocalMa66WsMadDistAmount * WorkPercent
				round LocalTaxAmount to nearest DerivedRoundTo
				WorkDistributionGroup.Amount 					= LocalTaxAmount




				RemainingDistAmount  							-= WorkDistributionGroup.Amount

				WorkDistributionGroup.UnitAmount				= (LocalMa66CBQuantity * WorkPercent )



				include CreateAPDistributionsRules		





			if (PercentAccumulated entered)
				if (PercentAccumulated > 0 and PercentAccumulated < 100%)


					LocalTaxAmount							= (LocalMa66WsMadDistAmount * PercentAccumulated)
					round LocalTaxAmount to nearest DerivedRoundTo
					WorkDistributionGroup.Amount 			= LocalTaxAmount

					include CreateAPDistributionsRules		
			else
			if  (UsingTaxTable
			and  I1 < 8
			and  CalculateTax.TaxTable.TaxTableOutput[I1+1].TaxCode entered)
				NextSentence = true
			else
			if  (RemainingDistAmount entered
			and (RemainingDistAmount > .005
			or   RemainingDistAmount < -.005))


				WorkDistributionGroup.Amount	= RemainingDistAmount
				include CreateAPDistributionsRules		


		CreateDistributionServiceAgreementRules		

			WorkDistributionGroup.UnitAmount			= LocalMa66CBQuantity
			WorkDistributionGroup.AddOnCharge			= blank
			WorkDistributionGroup.TaxCode				= blank
			WorkDistributionGroup.AccrualCode			= PayablesInvoice.AccrualCode
			WorkDistributionGroup.Amount				= MaidwsTotalDistributionAmount
			WorkDistributionGroup.TaxableAmount			= 0
			WorkDistributionGroup.Account				= CurrentMessageRel.ContractLineDistributionRel.DistributionAccount
			LocalMa66WsDisAccount						= CurrentMessageRel.ContractLineDistributionRel.DistributionAccount

			invoke FastUpdate PayablesInvoice
				invoked.CreatedBy													= actor
				invoked.LastUpdateDate												= current timestamp
			if (ContractLine.ContractLineDistributionCount > 1) 

				initialize LocalTotalPercent 
				RemainingDistAmount	= MaidwsTotalDistributionAmount  

				for each ContractLine.ContractLineDistributionRel 
					LocalTotalPercent += each.Percent 
					WorkDistributionGroup.Amount		= MaidwsTotalDistributionAmount * each.Percent

					RemainingDistAmount 				-= WorkDistributionGroup.Amount 
					if (LocalTotalPercent = 100)
						WorkDistributionGroup.Amount 	+= RemainingDistAmount 

					WorkDistributionGroup.Account 		= each.DistributionAccount 
					LocalOriginalDistribution 			= each.ContractLineDistribution 
					include SplitAPDistributionRetainageRules
					initialize LocalOriginalDistribution	
			else 
				include SplitAPDistributionRetainageRules	
			WorkDistributionGroup.TaxCode	= MaidwsTaxCode
			LocalAPDTaxUsageCode			= MaidwsTaxUsageCode
			if (MaidwsTaxCode entered)

				I1 = 1
				while (I1 <= 8
				and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
					if (CalculateTax.TaxTable.TaxTableOutput[I1].LandCostFlag)
						WorkDistributionGroup.Account			= LocalMa66WsDisAccount
					else
						if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag = "A")
							WorkDistributionGroup.Account		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputAccount
						if (CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint = "I"
						or  CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint = "G")
							WorkDistributionGroup.Account		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputAccount
						else
							WorkDistributionGroup.Account		= CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputDueAccount
					LocalDBInvoice								= MaidwsInvoice
					LocalDBSuffix								= PayablesInvoice.Suffix
					WorkDistributionGroup.AccrualCode			= PayablesInvoice.AccrualCode
					WorkDistributionGroup.CurrencyRate			= CurrentMessageRel.PayablesInvoiceCurrencyExchangeRate
					WorkDistributionGroup.PurchaseOrder			= CurrentMessageRel.PurchaseOrder
					WorkDistributionGroup.PurchaseOrderLine		= CurrentMessageRel.PurchaseOrderLine
					WorkDistributionGroup.AddOnCharge			= blank
					WorkDistributionGroup.Description			= CurrentMessageRel.Item

					if (LocalTaxType.CalculatedRate)
						WorkDistributionGroup.Amount			= CurrentInvoiceDetailRel.TaxAmount
						WorkDistributionGroup.TaxableAmount		= MaidwsTotalDistributionAmount
						WorkDistributionGroup.TaxCode			= MaidwsTaxCode
					else
						WorkDistributionGroup.Amount			= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
						WorkDistributionGroup.TaxableAmount		= MaidwsTotalDistributionAmount
						WorkDistributionGroup.TaxCode			= CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode

					WorkDistributionGroup.Company				= Company
					WorkDistributionGroup.Invoice				= PayablesInvoice
					WorkDistributionGroup.MatchCreated			= "D"
					NewTotalTaxAmount							= PayablesInvoice.TotalTaxAmount + CalculateTax.OutputTotalTaxAmount
					NewTotalDistAmount							= PayablesInvoice.TotalDistributionAmount.TransactionTotal + WorkDistributionGroup.Amount
					invoke FastUpdate PayablesInvoice
						invoked.LastUpdateBy					= actor
						invoked.LastUpdateDate					= current timestamp

					if (ContractLine.ContractLineDistributionCount > 1) 
						initialize LocalTotalPercent 
						if (LocalTaxType.CalculatedRate)
							RemainingDistAmount	= CurrentInvoiceDetailRel.TaxAmount  
						else
							RemainingDistAmount	= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP  

						for each ContractLine.ContractLineDistributionRel 
							LocalTotalPercent += each.Percent 
							if (LocalTaxType.CalculatedRate)
								WorkDistributionGroup.Amount	= CurrentInvoiceDetailRel.TaxAmount * each.Percent 
							else
								WorkDistributionGroup.Amount	= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP * each.Percent 

							RemainingDistAmount 				-= WorkDistributionGroup.Amount 
							if (LocalTotalPercent = 100)
								WorkDistributionGroup.Amount 	+= RemainingDistAmount 

							if (CalculateTax.TaxTable.TaxTableOutput[I1].LandCostFlag)
								WorkDistributionGroup.Account 	= each.DistributionAccount 
							LocalOriginalDistribution 			= each.ContractLineDistribution 
							include SplitAPDistributionRetainageRules	
							initialize LocalOriginalDistribution	
					else 
						include SplitAPDistributionRetainageRules	

					if (LocalTaxType.CalculatedRate)
						end while 

					I1 += 1

		SplitAPDistributionRetainageRules	



			initialize LocalRetainagePercent
			if  (PayablesInvoice.RetainageAccrualCode entered)
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					if  (ContractLine.Retainage)
						if  (Contract.RetainagePercentCompleteTracking.HeaderLevel)
							LocalRetainagePercent				= Contract.RetainagePercent1
						else
							LocalRetainagePercent				= ContractLine.RetainagePercent1
				else
					display "GetPORetainage;Line<PurchaseOrderLine>Trk<PurchaseOrder.RetainagePercentCompleteTracking>LineRtg<PurchaseOrderLine.Retainage>"
					if  (PurchaseOrderLine.Retainage entered)
						if  (PurchaseOrder.RetainagePercentCompleteTracking.PurchaseOrderLevel)
							LocalRetainagePercent				= PurchaseOrder.RetainageFirstPercent
						else
							LocalRetainagePercent				= PurchaseOrderLine.RetainageFirstPercent

			if (PayablesInvoice.RetainageAccrualCode not entered
			or (WorkDistributionGroup.AddOnCharge entered
			and !LocalMa66WsRetLandedFlag)
			or (WorkDistributionGroup.TaxCode entered
			and LocalMa66WsA70AccrualFl = "A")
			or (WorkDistributionGroup.TaxCode entered
			and !LocalMa66WsRetLandedFlag)
			or LocalRetainagePercent = 0)
				LocalDoRetainageDistribution						= false
			else
				LocalDoRetainageDistribution 						= true	
			if (!LocalDoRetainageDistribution)

				invoke Create PayablesInvoiceDistribution
					invoked.Company								= Company
					invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
					invoked.DistributionAmount.CurrencyAmount	= WorkDistributionGroup.Amount
					invoked.GLTransactionAmount					= WorkDistributionGroup.Amount
					invoked.DistributionAccount					= WorkDistributionGroup.Account
					invoked.GLFinanceCodeBlock					= WorkDistributionGroup.Account
					invoked.DistributionType					= "D"
					invoked.InvoiceCurrency						= ChargebackInvoiceView.InvoiceCurrency
					invoked.AccrualCode							= WorkDistributionGroup.AccrualCode
					invoked.MatchCreated						= "D"
					invoked.PurchaseOrder						= CurrentPurchaseOrder
					invoked.PurchaseOrderLine					= CurrentPurchaseOrderLine
					invoked.PurchasingContract                  = CurrentContract
					invoked.ContractLine                        = CurrentContractLine
					invoked.PayablesInvoiceDetail				= ChargebackInvoiceDetailView.PayablesInvoiceDetail
					invoked.ProcessLevel						= ChargebackInvoiceView.ProcessLevel

					invoked.Description							= CurrentMessageRel.Item
					invoked.Status								= 1
					invoked.DistributionDate					= ChargebackInvoiceView.DistributionDate
					invoked.AddOnCharge							= WorkDistributionGroup.AddOnCharge
					invoked.TaxCode								= WorkDistributionGroup.TaxCode
					invoked.LastUpdateBy						= actor
					invoked.LastUpdateDate						= current timestamp
					invoked.CreatedBy							= actor
					if  (WorkDistributionGroup.TaxCode entered)
						invoked.TaxableAmount					= WorkDistributionGroup.TaxableAmount
						invoked.TaxRate							= WorkDistributionGroup.TaxRate
					else
						invoked.UnitAmount						= WorkDistributionGroup.UnitAmount
				    invoked.TransientBypassErrorUpdate			= true
			else

				LocalMa66WsA70AccrCode					= WorkDistributionGroup.AccrualCode
				LocalMa66WsA70RetAccrCode				= PayablesInvoice.RetainageAccrualCode
				LocalMa66WsA70RetCalcAmt				= WorkDistributionGroup.Amount

				LocalPaymentSequenceNumber				= ChargebackInvoiceView.LastPaymentSequence
				LocalMa66WsRetTaxableAmt				= WorkDistributionGroup.TaxableAmount 	* LocalRetainagePercent
				LocalMa66WsRetUntAmount					= WorkDistributionGroup.UnitAmount 		* LocalRetainagePercent
				LocalMa66WsRetOrigTranAmt				= WorkDistributionGroup.Amount 		* LocalRetainagePercent
				LocalMa66WsA70OrigTranAmt				= WorkDistributionGroup.Amount 		- LocalMa66WsRetOrigTranAmt
				LocalMa66WsA70TaxableAmt				= WorkDistributionGroup.TaxableAmount		- LocalMa66WsRetTaxableAmt
				LocalMa66WsA70UntAmount					= WorkDistributionGroup.UnitAmount		- LocalMa66WsRetUntAmount


				invoke Create PayablesInvoiceDistribution
					assign result to PayablesInvoiceDistributionView
					invoked.Company								= Company
					invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
					invoked.DistributionAccount					= WorkDistributionGroup.Account
					invoked.Status								= 1
					invoked.DistributionAmount.CurrencyAmount	= LocalMa66WsA70OrigTranAmt
					invoked.GLTransactionAmount					= LocalMa66WsA70OrigTranAmt
					invoked.TaxCode								= WorkDistributionGroup.TaxCode
					invoked.PurchaseOrder						= CurrentPurchaseOrder
					invoked.PurchaseOrderLine					= CurrentPurchaseOrderLine
					invoked.PurchasingContract                  = CurrentContract
					invoked.ContractLine                        = CurrentContractLine
					invoked.PayablesInvoiceDetail				= ChargebackInvoiceDetailView.PayablesInvoiceDetail
					invoked.AddOnCharge							= WorkDistributionGroup.AddOnCharge
					invoked.AccrualCode							= ChargebackInvoiceView.AccrualCode
					invoked.MatchCreated						= "D"
					invoked.LastUpdateBy						= actor
					invoked.LastUpdateDate						= current timestamp
					invoked.CreatedBy							= actor
					if (LocalOriginalDistribution entered)
						invoked.OriginalDistribution			= LocalOriginalDistribution 
					else 
						invoked.OriginalDistribution			= 1
					if  (WorkDistributionGroup.TaxCode entered)
						invoked.TaxableAmount					= LocalMa66WsA70TaxableAmt
						invoked.TaxRate							= WorkDistributionGroup.TaxRate
					else
						invoked.UnitAmount						= LocalMa66WsA70UntAmount
				    invoked.TransientBypassErrorUpdate			= true
				LocalDistributionSequence						= PayablesInvoiceDistributionView.PayablesInvoiceDistribution
				include CreateAPDistpayRules		

				LocalMa66WsA70AccrCode							= ChargebackInvoiceView.RetainageAccrualCode
				LocalMa66WsA70RetAccrCode						= ChargebackInvoiceView.RetainageAccrualCode
				WorkDistributionGroup.AccrualCode				= ChargebackInvoiceView.RetainageAccrualCode
				LocalMa66WsA70RetPct							= LocalRetainagePercent
				LocalMa66WsA70OrigTranAmt						= LocalMa66WsRetOrigTranAmt
				LocalMa66WsA70TaxableAmt						= LocalMa66WsRetTaxableAmt
				LocalMa66WsA70UntAmount							= LocalMa66WsRetUntAmount
				WorkDistributionGroup.Amount					= LocalMa66WsA70OrigTranAmt
				WorkDistributionGroup.TaxableAmount				= LocalMa66WsA70TaxableAmt
				WorkDistributionGroup.UnitAmount				= LocalMa66WsA70UntAmount
				LocalMa66WsRetTotalAmt							+= LocalMa66WsRetOrigTranAmt

				invoke Create PayablesInvoiceDistribution
					assign result to PayablesInvoiceDistributionView
					invoked.Company								= Company
					invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
					invoked.Status								= 1
					invoked.Retainage							= true
					invoked.DistributionAccount					= WorkDistributionGroup.Account
					invoked.DistributionAmount.CurrencyAmount	= WorkDistributionGroup.Amount
					invoked.GLTransactionAmount					= WorkDistributionGroup.Amount
					invoked.TaxCode								= WorkDistributionGroup.TaxCode
					invoked.PurchaseOrder						= CurrentPurchaseOrder
					invoked.PurchaseOrderLine					= CurrentPurchaseOrderLine
					invoked.PurchasingContract                  = CurrentContract
					invoked.ContractLine                        = CurrentContractLine
					invoked.PayablesInvoiceDetail				= ChargebackInvoiceDetailView.PayablesInvoiceDetail
					invoked.AddOnCharge							= WorkDistributionGroup.AddOnCharge
					invoked.AccrualCode							= WorkDistributionGroup.AccrualCode
					invoked.MatchCreated						= "D"
					invoked.LastUpdateBy						= actor
					invoked.LastUpdateDate						= current timestamp
					invoked.CreatedBy							= actor
					invoked.OriginalDistribution				= 1
					if (WorkDistributionGroup.TaxCode entered)
						invoked.TaxableAmount					= WorkDistributionGroup.TaxableAmount
						invoked.TaxRate							= WorkDistributionGroup.TaxRate
					else
						invoked.UnitAmount						= WorkDistributionGroup.UnitAmount
				    invoked.TransientBypassErrorUpdate			= true
				LocalDBDistSeqNumber							= PayablesInvoiceDistributionView.PayablesInvoiceDistribution

				include CreateAPDistpayRules		

		CreateAPDistpayRules		

			initialize		LocalAPDRetainage
			initialize		LocalMa66WsRetTotTranAmt
			LocalDBCompany				= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Company
			LocalDBVendor				= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Vendor
			LocalDBInvoice				= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.PayablesInvoice
			LocalDBSuffix				= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Suffix
			LocalDBLineNumber			= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.PurchaseOrder
			LocalDBMadSeqNumber			= CurrentPayablesInvoiceDetail
			LocalDBDistSeqNumber		= PayablesInvoiceDistributionView.PayablesInvoiceDistribution
			LocalDBPaymentSeqNumber		= LocalPaymentSequenceNumber

			if (PayablesInvoice.RetainageAccrualCode = PayablesInvoiceDistributionView.PayablesInvoiceDistribution.AccrualCode)
				LocalDBPaymentSeqNumber		+= 1
				LocalAPDRetainage 			= true
				LocalMa66WsRetTotTranAmt	= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount

			if (PayablesInvoiceRetainageDistributionRel exist)
				NewRetainageCalculatedAmount				= PayablesInvoiceRetainageDistributionRel.RetainageCalculatedAmount + LocalMa66WsRetTotTranAmt
				invoke FastUpdate PayablesInvoiceRetainageDistributionRel
					invoked.RetainageCalculatedAmount		= NewRetainageCalculatedAmount
			else
				invoke Create PayablesInvoiceRetainageDistribution
					invoked.Company															= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Company
					invoked.Vendor															= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Vendor
					invoked.Invoice 														= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Invoice 
					invoked.Suffix 															= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.Suffix 
					invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice			= ChargebackInvoiceView.PayablesInvoice
					invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine			= PurchaseOrderLine
					invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence		= LocalPaymentSequenceNumber
					invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = LocalDBDistSeqNumber
					invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence 	 = ChargebackInvoiceDetailView.PayablesInvoiceDetail


					invoked.PurchaseOrder													= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.PurchaseOrder
					invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence	= LocalDBMadSeqNumber
					invoked.PaymentAmount													= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount
					invoked.RetainageCalculatedAmount										= PayablesInvoiceDistributionView.PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount
					if (PayablesInvoice.RetainageAccrualCode = PayablesInvoiceDistributionView.PayablesInvoiceDistribution.AccrualCode)
						invoked.RetainagePercentage											= LocalRetainagePercent

		ServiceDropshipTaxAmountRules		

			if (CurrentMessageRel.PurchaseOrderLine not entered)
				include CalculateTaxVendorAgreementRules	
			else
				if (CurrentInvoiceDetailRel.TaxCode entered)
					if (LocalTaxType	!= "C")
						initialize CalculateTax
						CalculateTax.TaxEntity 			= CurrentInvoiceDetailRel.Company.AccountingEntity
						CalculateTax.TaxCode			= CurrentInvoiceDetailRel.TaxCode
						CalculateTax.Function			= CalculateTax.Function.CalculateTax
						CalculateTax.InvoiceAmount		= 0
						CalculateTax.TaxAmount			= 0
					if (CurrentMessageRel.MessageType.Quantity)
						LocalMa66CBQuantity				= ((CurrentPOLineRel.VendorPriceUOMQuantity - CurrentMessageRel.PurchaseOrderLine.CancelQuantity) - CurrentInvoiceDetailRel.MatchedQuantity)
						CalculateTax.TaxableAmount		= (LocalMa66CBQuantity * CurrentInvoiceDetailRel.MatchUnitCost)

					if (CurrentMessageRel.MessageType.Cost)
						LocalMa66CBQuantity				= (CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity)
						if (CurrentMessageRel.MatchMessageOrigin.ReconMatch or CurrentMessageRel.MatchMessageOrigin.Dropship)
							CalculateTax.TaxableAmount		= ((CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)
						if (CurrentMessageRel.MatchMessageOrigin.Service)
							if (CurrentPOLineRel.ServiceCode.Amount)
								CalculateTax.TaxableAmount	= ((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentPOLineRel.MatchedAmount)
							else
								CalculateTax.TaxableAmount	= (((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)
					


					CalculateTax.InvoiceDate			= PayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate			= PayablesInvoice.InvoiceDate
					CalculateTax.GeneralLedgerDate 		= PayablesInvoice.InvoiceDate
					CalculateTax.TaxDate				= PayablesInvoice.InvoiceDate
					CalculateTax.ProductTaxCategory		= CurrentInvoiceDetailRel.ProductTaxCategory
					CalculateTax.System					= "AP"
					CalculateTax.TransactionCurrency	= PayablesInvoice.InvoiceCurrency
					CalculateTax.BaseCurrency			= PayablesInvoice.PayGroup.BaseCurrency
					if (LocalTaxType.CalculatedRate)
						LocalCalculateTaxRate			= CurrentInvoiceDetailRel.TaxAmount / CurrentInvoiceDetailRel.TotalDistributionAmount
						CalculateTax.TaxableAmount		= CalculateTax.TaxableAmount * LocalCalculateTaxRate
						CalculateTax					= CalculateTax.TaxableAmount * LocalCalculateTaxRate
						LocalChargebackAmount			+= CalculateTax.TaxableAmount + MaidwsTaxAmount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxRate			= LocalCalculateTaxRate
						CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount		= CalculateTax.TaxableAmount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount	= CalculateTax.TaxableAmount
					if (!LocalTaxType.CalculatedRate)
						CalculateTax.PostalAddress		= PayablesInvoice.ProcessLevel.PostalAddress
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
					LocalChargebackAmount				+= CalculateTax.TaxableAmount
					LocalTaxableAmount					+= CalculateTax.TaxableAmount
					I1 = 1
					while (I1 <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
						if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag != "A")
							LocalTaxAmount						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
							round LocalTaxAmount to nearest DerivedRoundTo
							LocalChargebackAmount += LocalTaxAmount

						I1 += 1

				else

					if (PayablesInvoice.MatchProcessType.ServiceContract)
						LocalChargebackAmount			+= CurrentInvoiceDetailRel.TotalDistributionAmount
						LocalMa66CBQuantity				= CurrentInvoiceDetailRel.MatchedQuantity

					if (CurrentInvoiceDetailRel.ItemType.Service)
						if (CurrentMessageRel.MessageType.Quantity)
							LocalChargebackAmount		+= (((CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity) - CurrentPOLineRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost)
						if (CurrentMessageRel.MessageType.Cost)
							if (CurrentPOLineRel.ServiceCode.Amount)
								LocalChargebackAmount	+= ((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentPOLineRel.MatchedAmount)
							else

								LocalMa66CBQuantity				= (CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity)

								if (CurrentInvoiceDetailRel.MatchedQuantity < LocalMa66CBQuantity
								or (LocalMa66CBQuantity < 0
								and CurrentInvoiceDetailRel.MatchUnitCost > CurrentPOLineRel.EnteredUnitCost))
									LocalMa66CBQuantity = CurrentInvoiceDetailRel.MatchedQuantity

								LocalChargebackAmount	+= ((CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)

					else
						if (CurrentMessageRel.MessageType.Quantity)
							LocalChargebackAmount 		+= ((CurrentPOLineRel.Quantity - CurrentPOLineRel.MatchedQuantity) * CurrentInvoiceDetailRel.MatchUnitCost)
						else
							if (CurrentMessageRel.MessageType.Cost)
								LocalMa66CBQuantity		= (CurrentPOLineRel.Quantity - (CurrentPOLineRel.MatchedQuantity - CurrentInvoiceDetailRel.MatchedQuantity))
								if (CurrentInvoiceDetailRel.MatchedQuantity < PurchaseOrderLine.Quantity
								and !LocalQuantityCbSw)
									LocalMa66CBQuantity	= CurrentInvoiceDetailRel.MatchedQuantity
								LocalChargebackAmount	+= ((CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)

		CalculateTaxVendorAgreementRules		


			initialize LocalPvnChargebackAmount
			initialize LocalPvnChargebackQuantity
			if (LocalCostChargebackSw
			and CurrentMessageRel.PurchaseOrderLine != LocalWsSavePurchaseOrderLine)
				LocalCostChargebackSw		= false

			if (CurrentInvoiceDetailRel.ContractLine.ServiceCode.Amount)

				LocalPvnChargebackQuantity = 1
				LocalPvnChargebackAmount = CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumAmount - CurrentInvoiceDetailRel.ContractLine.MaximumLineAmountInUse
				if ((LocalPvnChargebackAmount * -1) > CurrentInvoiceDetailRel.EnteredUnitCost)
					LocalPvnChargebackAmount = CurrentInvoiceDetailRel.EnteredUnitCost * -1
			else
				if (CurrentMessageRel.MessageType.Cost)

					LocalCostChargebackSw 			= true
					LocalWsSavePurchaseOrderLine	= CurrentMessageRel.PurchaseOrderLine
					LocalPvnChargebackAmount		= ((CurrentInvoiceDetailRel.MatchUnitCost - CurrentInvoiceDetailRel.ContractLine.DerivedMatchBaseCost) * -1)
					LocalPvnChargebackQuantity		= CurrentInvoiceDetailRel.MatchedQuantity
					if (Company.MatchCompanyRel.ServiceMessagingOption.ExtendedAmountOnly)
						LocalPvnChargebackQuantity	= 1
						LocalPvnChargebackAmount	= ((CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumQuantity * CurrentInvoiceDetailRel.MatchUnitCost) - CurrentInvoiceDetailRel.ContractLine.AmountOrdered)
						LocalWorkChargebackAmount	= ((CurrentInvoiceDetailRel.DerivedInvoiceLineQuantityWithPrecision * CurrentInvoiceDetailRel.DerivedInvoiceLineUnitCostWithPrecision) * -1)
						if (LocalPvnChargebackAmount < LocalWorkChargebackAmount)
							LocalPvnChargebackAmount = LocalWorkChargebackAmount
				else

					if (CurrentCostMessageRel exists)
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost - (CurrentInvoiceDetailRel.EnteredUnitCost - CurrentInvoiceDetailRel.ContractLine.DerivedMatchBaseCost)
					else
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost
					if (CurrentInvoiceDetailRel.MatchUnitCost > CurrentInvoiceDetailRel.EnteredUnitCost)
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost
					LocalPvnChargebackQuantity		= ((CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumQuantity - CurrentInvoiceDetailRel.ContractLine.QuantityOrdered))
					if ((LocalPvnChargebackQuantity * -1) > CurrentInvoiceDetailRel.MatchedQuantity)
						LocalPvnChargebackQuantity	= ((CurrentInvoiceDetailRel.MatchedQuantity) * -1)

			if (CurrentInvoiceDetailRel.TaxCode entered)
				initialize CalculateTax.TaxAmount
				initialize CalculateTax.InvoiceAmount
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= CurrentInvoiceDetailRel.TaxCode
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.InvoiceDate			= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate			= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 		= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate				= PayablesInvoice.InvoiceDate
				CalculateTax.ProductTaxCategory		= CurrentInvoiceDetailRel.ProductTaxCategory
				CalculateTax.System					= "AP"
				CalculateTax.TransactionCurrency	= PayablesInvoice.InvoiceCurrency
				CalculateTax.BaseCurrency			= PayablesInvoice.PayGroup.BaseCurrency
				CalculateTax.TaxableAmount			= LocalPvnChargebackAmount * LocalPvnChargebackQuantity
				CalculateTax.PostalAddress			= PayablesInvoice.ProcessLevel.PostalAddress
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
				LocalTaxType						= CalculateTax.TaxType
				if (LocalTaxType.CalculatedRate)
					LocalCalculateTaxRate	= CurrentInvoiceDetailRel.TaxAmount / CurrentInvoiceDetailRel.TotalDistributionAmount
					CalculateTax.OutputTotalTaxAmount	= (CalculateTax.TaxableAmount * LocalCalculateTaxRate)
					LocalChargebackAmount	+= CalculateTax.TaxableAmount + CalculateTax.OutputTotalTaxAmount
				else
					LocalChargebackAmount	+= CalculateTax.TaxableAmount
					I1 = 1
					while (I1 <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
						if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag != "A")
							LocalTaxAmount						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
							round LocalTaxAmount to nearest DerivedRoundTo
							LocalChargebackAmount += LocalTaxAmount

						I1 += 1

				LocalTaxableAmount			+= CalculateTax.TaxableAmount
			else
				LocalChargebackAmount		+= (LocalPvnChargebackAmount * LocalPvnChargebackQuantity)




		WriteChargebackToPurchaseOrderLineRules		

			initialize LocalMa66ChargebackQuantity
			initialize LocalMa66MatchedNotReceived
			initialize LocalMa66ChargebackAmount
			initialize LocalMa66MatchedAmount
			initialize LocalMa66WriteOffQuantity

			initialize LocalCatchWeightMNRQuantity
			initialize LocalCatchWeightChargebackQuantity
			initialize LocalCatchWeightWriteOffQuantity
			initialize LocalCatchWeightMemoQuantity

			if (PayablesInvoice.MatchProcessType.ServiceContract)
				LocalMa66ChargebackAmount = CurrentInvoiceDetailRel.TotalDistributionAmount
			else
			if (CurrentPOLineRel.ItemType.Service
			and CurrentPOLineRel.ServiceCode.Amount
			and CurrentPOLineRel.ChargebackAmount not entered
			and CurrentMessageRel.ApplicationAction.Chargeback
			and !CurrentMessageRel.MatchMessageOrigin.Service)
				LocalMa66ChargebackAmount = CurrentPOLineRel.MatchedAmount - CurrentPOLineRel.EnteredUnitCost + CurrentPOLineRel.ServiceCancelAmount

			if (CurrentMessageRel.MatchMessageOrigin.ReconMatch)
				if (PayablesInvoice.MatchProcessType.ServiceContract)
					LocalMa66ChargebackQuantity = (CurrentInvoiceDetailRel.EnteredUnitCost * CurrentInvoiceDetailRel.EnteredQuantity)
					LocalMa66MatchedAmount 		= LocalMa66ChargebackQuantity
				else
				if (CurrentPOLineRel.ItemType.Service)
					LocalMa66ChargebackQuantity = ((CurrentInvoiceDetailRel.EnteredUnitCost * CurrentInvoiceDetailRel.EnteredQuantity)
												- (CurrentPOLineRel.EnteredUnitCost * CurrentPOLineRel.Quantity))
					LocalMa66MatchedAmount = CurrentPOLineRel.MatchedAmount - LocalMa66ChargebackQuantity
				else
					if (CurrentPOLineRel.MatchedNotReceivedQuantity > 0)
						if (CurrentMessageRel.MessageType.NoReceiptLine)
							LocalMa66MatchedNotReceived = LocalMa66MatchedNotReceived - CurrentInvoiceDetailRel.BuyUOMMatchedQuantity
							LocalMa66ChargebackQuantity = CurrentInvoiceDetailRel.BuyUOMMatchedQuantity
							if (PurchaseOrderLine.IsCatchWeightItem)
								LocalCatchWeightMNRQuantity	-= CurrentInvoiceDetailRel.EnteredQuantity
								LocalCatchWeightChargebackQuantity = CurrentInvoiceDetailRel.MatchedQuantity
						else
							LocalMa66ChargebackQuantity = CurrentPOLineRel.MatchedNotReceivedQuantity
							LocalMa66MatchedNotReceived = LocalMa66MatchedNotReceived - CurrentPOLineRel.MatchedNotReceivedQuantity
							if (PurchaseOrderLine.IsCatchWeightItem)
								LocalCatchWeightChargebackQuantity	= CurrentPOLineRel.CatchWeightMatchedNotReceivedQuantity
								LocalCatchWeightMNRQuantity			= LocalCatchWeightMNRQuantity - CurrentPOLineRel.CatchWeightMatchedNotReceivedQuantity

						initialize LocalMa66WriteOffQuantity
					else
						if (CurrentPOLineRel.WriteOffQuantity > 0)
							LocalMa66ChargebackQuantity = CurrentPOLineRel.WriteOffQuantity
							LocalMa66WriteOffQuantity = LocalMa66WriteOffQuantity - CurrentPOLineRel.WriteOffQuantity
							initialize LocalMa66MatchedNotReceived
							if (PurchaseOrderLine.IsCatchWeightItem)
								LocalCatchWeightChargebackQuantity	= CurrentPOLineRel.CatchWeightWriteOffQuantity
								LocalCatchWeightWriteOffQuantity	-= CurrentPOLineRel.CatchWeightWriteOffQuantity
			else
				if (CurrentMessageRel.MatchMessageOrigin.Service)
					LocalMa66ChargebackQuantity = CurrentPOLineRel.MatchedQuantity - CurrentPOLineRel.Quantity - CurrentPOLineRel.ChargebackQuantity
				else
					if (CurrentMessageRel.MessageType.Quantity)
						LocalMa66ChargebackQuantity = CurrentPOLineRel.MatchedQuantity - (CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity) - CurrentPOLineRel.ChargebackQuantity
						if (LocalMa66ChargebackQuantity < 0)
							initialize LocalMa66ChargebackQuantity

			invoke UpdateFromMatch CurrentPOLineRel
				invoked.LocalUpdateFromMatchChargebackQuantity				= LocalMa66ChargebackQuantity
				invoked.LocalUpdateFromMatchChargebackAmount				= LocalMa66ChargebackAmount
				invoked.LocalUpdateFromMatchMatchedAmount					= LocalMa66MatchedAmount
				invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity		= LocalMa66MatchedNotReceived
				invoked.LocalUpdateFromMatchWriteOffQuantity				= LocalMa66WriteOffQuantity
				invoked.BypassCommitUpdate 									= true

				if (PurchaseOrderLine.IsCatchWeightItem)
					invoked.LocalFromMatchCatchWeightMNRQuantity		= LocalCatchWeightMNRQuantity
					invoked.LocalFromMatchCatchWeightChargebackQuantity	= LocalCatchWeightChargebackQuantity
					invoked.LocalFromMatchCatchWeightWriteOffQuantity	= LocalCatchWeightWriteOffQuantity
					invoked.LocalFromMatchCatchWeightMemoQuantity		= LocalCatchWeightMemoQuantity

		ChargebackDetailDropServiceRules	
			if (CurrentMessageRel.MessageType.Cost)
				LocalMa66wsMnrChargebackQuantity = (CurrentPOLineRel.MatchedQuantity - (CurrentPOLineRel.Quantity - CurrentPOLineRel.CancelQuantity))
			if (CurrentInvoiceDetailRel.TaxCode entered)
				if (!CalculateTax.TaxType.CalculatedRate)
					initialize CalculateTax.TaxAmount
					initialize CalculateTax.InvoiceAmount
					CalculateTax.TaxCode						= CurrentInvoiceDetailRel.TaxCode
					CalculateTax.Function						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxEntity						= Company.AccountingEntity
				if (CurrentMessageRel.MessageType.Quantity)
					LocalMa66CBQuantity = ((CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity) - CurrentPOLineRel.MatchedQuantity)
					CalculateTax.TaxableAmount = (LocalMa66CBQuantity * CurrentInvoiceDetailRel.MatchUnitCost)



				if (CurrentMessageRel.MessageType.Cost)
					LocalMa66CBQuantity = ((CurrentPOLineRel.Quantity - CurrentPOLineRel.CancelQuantity) - (CurrentPOLineRel.MatchedQuantity - CurrentInvoiceDetailRel.MatchedQuantity))
					if (CurrentInvoiceDetailRel.MatchedQuantity < LocalMa66CBQuantity)
						LocalMa66CBQuantity = CurrentInvoiceDetailRel.MatchedQuantity
					if (CurrentMessageRel.MatchMessageOrigin.Service
					and CurrentPOLineRel.EnteredUnitCost = CurrentInvoiceDetailRel.EnteredUnitCost
					and !CurrentPOLineRel.ServiceCode.Amount)
						LocalMa66CBQuantity = ((CurrentPOLineRel.Quantity - CurrentPOLineRel.CancelQuantity) - CurrentPOLineRel.MatchedQuantity)
						if (LocalMa66CBQuantity = 0)
							LocalMa66CBQuantity = 1
					if (CurrentMessageRel.MatchMessageOrigin.ReconMatch or CurrentMessageRel.MatchMessageOrigin.Dropship)
						CalculateTax.TaxableAmount = ((CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)

					if (CurrentMessageRel.MatchMessageOrigin.Service)
						if (CurrentPOLineRel.ServiceCode.Amount)
							CalculateTax.TaxableAmount = ((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentPOLineRel.MatchedAmount)
						else
							CalculateTax.TaxableAmount = (((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)

				CalculateTax.InvoiceDate			= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate			= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 		= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate				= PayablesInvoice.InvoiceDate
				CalculateTax.ProductTaxCategory		= CurrentInvoiceDetailRel.ProductTaxCategory
				CalculateTax.System					= "AP"
				CalculateTax.TransactionCurrency	= PayablesInvoice.InvoiceCurrency
				CalculateTax.BaseCurrency			= PayablesInvoice.PayGroup.BaseCurrency
				if (CalculateTax.TaxType.CalculatedRate)
					CalculateTax.TaxableAmount								= CalculateTax.TaxableAmount * LocalCalculateTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate			= LocalCalculateTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount		= CalculateTax.TaxableAmount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount	= CalculateTax.TaxableAmount
				if (!CalculateTax.TaxType.CalculatedRate)
					CalculateTax.PostalAddress		= PayablesInvoice.ProcessLevel.PostalAddress
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
				LocalChargebackAmount				+= CalculateTax.TaxableAmount
				I1 = 1
				while (I1 <= 8
				and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
					if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag != "A")
						LocalTaxAmount						= CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP
						round LocalTaxAmount to nearest DerivedRoundTo
						LocalChargebackAmount += LocalTaxAmount


					I1 += 1

				LocalServiceLineChargeBackAmount 	= CurrentInvoiceDetailRel.EnteredUnitCost
			else

				if (CurrentMessageRel.MatchMessageOrigin.Service)
					if (CurrentPOLineRel.ServiceCode.Amount
					or 	Company.MatchCompanyRel.ServiceMessagingOption.ExtendedAmountOnly)
						LocalMa66CBQuantity = 1
						LocalMadExtServiceAmount			= CurrentInvoiceDetailRel.EnteredUnitCost * CurrentInvoiceDetailRel.EnteredQuantity
						LocalPliExtServiceAmount			= CurrentPOLineRel.EnteredUnitCost * CurrentPOLineRel.Quantity
						LocalOldMatchAmount					= CurrentPOLineRel.MatchedAmount - LocalMadExtServiceAmount
						LocalServiceLineChargeBackAmount	= ((LocalPliExtServiceAmount - CurrentPOLineRel.ServiceCancelAmount) - (LocalOldMatchAmount - LocalMadExtServiceAmount))
						LocalChargebackAmount				+= ((LocalPliExtServiceAmount - CurrentPOLineRel.ServiceCancelAmount) - (LocalOldMatchAmount - LocalMadExtServiceAmount))

					else
						if (CurrentMessageRel.MessageType.Quantity)
							LocalMa66CBQuantity		= ((CurrentPOLineRel.Quantity - CurrentPOLineRel.CancelQuantity) - CurrentPOLineRel.MatchedQuantity)
							LocalChargebackAmount	+= (LocalMa66CBQuantity * CurrentInvoiceDetailRel.MatchUnitCost)

						else
							LocalMa66CBQuantity		= CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.CancelQuantity - (CurrentPOLineRel.MatchedQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
							if (CurrentInvoiceDetailRel.MatchedQuantity < LocalMa66CBQuantity
							or (LocalMa66CBQuantity < 0
							and CurrentInvoiceDetailRel.MatchUnitCost > CurrentPOLineRel.EnteredUnitCost))
								LocalMa66CBQuantity	= CurrentInvoiceDetailRel.MatchedQuantity
							LocalChargebackAmount 	+= (((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)

				else
					if (CurrentMessageRel.MessageType.Quantity)
						LocalMa66CBQuantity	= CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.MatchedQuantity
						LocalChargebackAmount += (LocalMa66CBQuantity * CurrentInvoiceDetailRel.MatchUnitCost)

					else
						if (CurrentMessageRel.MessageType.Cost)
							LocalMa66CBQuantity = ((CurrentPOLineRel.Quantity - CurrentPOLineRel.CancelQuantity) - (CurrentPOLineRel.MatchedQuantity - CurrentInvoiceDetailRel.MatchedQuantity))
							if (CurrentInvoiceDetailRel.MatchedQuantity < CurrentPOLineRel.Quantity
							and LocalQuantityCbSw)
								LocalMa66CBQuantity = CurrentInvoiceDetailRel.MatchedQuantity
							LocalChargebackAmount 	+= (((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentInvoiceDetailRel.MatchUnitCost) * LocalMa66CBQuantity)


			MaidwsItem								= CurrentMessageRel.Item
			MaidwsVendorItem						= CurrentMessageRel.VendorItem
			MaidwsItemDescription					= CurrentInvoiceDetailRel.ItemDescription
			MaidwsMatchSequence						= CurrentInvoiceDetailRel.MatchSequence
			MaidwsInvoiceType						= "C"
			MaidwsMatchObjectID						= PayablesInvoice.MatchObjectID
			MaidwsLocation							= CurrentMessageRel.Location
			MaidwsRecordSource						= "MA"
			MaidwsStatus							= 1
			if (CurrentInvoiceDetailRel.TaxCode entered)
				MaidwsTaxAmount						= CalculateTax.OutputTotalTaxAmount

				MaidwsTaxType						= CurrentInvoiceDetailRel.TaxType
				MaidwsTaxCode						= CurrentInvoiceDetailRel.TaxCode
				MaidwsTaxUsageCode					= CurrentInvoiceDetailRel.ContractLine.TaxUsageCode
			else
				initialize MaidwsTaxAmount
				initialize MaidwsTaxType
				initialize MaidwsTaxCode
				initialize MaidwsTaxUsageCode

			MaidwsRetailUnitCost					= blank
			MaidwsPurchaseOrderReceiptLine			= CurrentMessageRel.PurchaseOrderLine
			MaidwsPurchaseOrderLine					= CurrentMessageRel.PurchaseOrderLine
			MaidwsVendorPriceUOM					= CurrentPOLineRel.VendorPriceUOM
			MaidwsVendorBuyUOM						= CurrentPOLineRel.EnteredBuyUOM
			MaidwsEnteredUOM						= CurrentPOLineRel.EnteredBuyUOM
			MaidwsVendorPriceUOMMultiplier			= CurrentPOLineRel.VendorPriceUOMMultiplier
			MaidwsVendorBuyUOMMultiplier			= CurrentPOLineRel.EnteredBuyUOMMultiplier
			MaidwsEnteredUOMMultiplier				= CurrentPOLineRel.EnteredBuyUOMMultiplier
			MaidwsEnteredUnitCost					= CurrentPOLineRel.EnteredUnitCost
			MaidwsItemType							= CurrentPOLineRel.ItemType
			MaidwsVendorItem						= CurrentPOLineRel.VendorItem
			MaidwsItemGTIN							= CurrentPOLineRel.ItemGTIN
			MaidwsMatchDetailKey					= CurrentPOLineRel.MatchDetailKey
			if (CurrentInvoiceDetailRel.ItemType.Service)
				MaidwsEnteredQuantity					= LocalMa66CBQuantity
				MaidwsMatchedQuantity					= LocalMa66CBQuantity
				if (!PayablesInvoice.MatchProcessType.ServiceContract)
					if (CurrentPOLineRel.ServiceCode.Amount
					or Company.MatchCompanyRel.ServiceMessagingOption.ExtendedAmountOnly)
						if (CurrentPOLineRel.MatchedAmount > CurrentPOLineRel.EnteredUnitCost)
							MaidwsEnteredUnitCost = ((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - CurrentPOLineRel.MatchedAmount)
						else
							MaidwsEnteredUnitCost = ((CurrentPOLineRel.EnteredUnitCost - CurrentPOLineRel.ServiceCancelAmount) - (CurrentInvoiceDetailRel.MatchUnitCost * CurrentInvoiceDetailRel.MatchedQuantity))
						MaidwsMatchUnitCost			= MaidwsEnteredUnitCost
					else
						if (CurrentMessageRel.MessageType.Quantity)
							MaidwsEnteredUnitCost	= CurrentInvoiceDetailRel.MatchUnitCost
							MaidwsMatchUnitCost		= CurrentInvoiceDetailRel.MatchUnitCost
						else
							MaidwsEnteredUnitCost	= CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost
							MaidwsMatchUnitCost		= MaidwsEnteredUnitCost
				else
					MaidwsEnteredUnitCost	= CurrentInvoiceDetailRel.MatchUnitCost
					MaidwsMatchUnitCost		= CurrentInvoiceDetailRel.MatchUnitCost
			else
				if (CurrentMessageRel.MessageType.Quantity)
					LocalMa66CBQuantity			= CurrentPOLineRel.VendorPriceUOMQuantity - CurrentPOLineRel.MatchedQuantity
					MaidwsMatchedQuantity		= LocalMa66CBQuantity
					MaidwsEnteredQuantity		= LocalMa66CBQuantity
					MaidwsMatchUnitCost			= CurrentInvoiceDetailRel.EnteredUnitCost
					MaidwsEnteredUnitCost		= CurrentInvoiceDetailRel.EnteredUnitCost
				else
					if (CurrentPOLineRel.EnteredUnitCost > CurrentInvoiceDetailRel.EnteredUnitCost)
						MaidwsMatchUnitCost		= ((CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost) * -1)
					else
						if (CurrentPOLineRel.EnteredUnitCost < CurrentInvoiceDetailRel.EnteredUnitCost)
							MaidwsMatchUnitCost	= (CurrentPOLineRel.EnteredUnitCost - CurrentInvoiceDetailRel.MatchUnitCost)
						else
							MaidwsMatchUnitCost	= CurrentInvoiceDetailRel.EnteredUnitCost * -1
					MaidwsEnteredUnitCost		= MaidwsMatchUnitCost
					MaidwsEnteredQuantity		= LocalMa66CBQuantity
					MaidwsMatchedQuantity		= LocalMa66CBQuantity
			if (CurrentPOLineRel.EnteredUnitCost = CurrentPOLineRel.VendorPriceUOM)
				MaidwsBuyUOMMatchedQuantity		= LocalMa66CBQuantity
			else
				if (!CurrentPOLineRel.ItemType.Inventoried
				and !CurrentPOLineRel.ItemType.NonStock)
					MaidwsBuyUOMMatchedQuantity	= LocalMa66CBQuantity
				else

					UOMCalculation.InputQuantity					= LocalMa66CBQuantity
					UOMCalculation.InputUOM							= MaidwsVendorPriceUOM
					UOMCalculation.InputToUOMConversion				= MaidwsVendorBuyUOM
					UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate
					LocalUOMCalculationExecuted						= UOMCalculation.OutputQuantity
					MaidwsBuyUOMMatchedQuantity						= UOMCalculation.OutputQuantity
			MaidwsTotalDistributionAmount			= MaidwsMatchUnitCost * MaidwsMatchedQuantity
			if (PayablesInvoice.InvoiceCurrency	= Company.Currency)
				MaidwsTotalBaseAmount				= MaidwsTotalDistributionAmount
			MaidwsDistributionDate					= CurrentInvoiceDetailRel.DistributionDate
			MaidwsExcessQuantityProcess				= CurrentInvoiceDetailRel.ExcessQuantityProcess
			MaidwsLastMessageSequence				= CurrentInvoiceDetailRel.LastMessageSequence
			MaidwsICNCode							= CurrentInvoiceDetailRel.ICNCode
			MaidwsSupplementaryQuantity				= CurrentInvoiceDetailRel.SupplementaryQuantity
			MaidwsStockWeight						= CurrentInvoiceDetailRel.StockWeight
			MaidwsSupplementaryUOM					= CurrentInvoiceDetailRel.SupplementaryUOM
			MaidwsContract							= CurrentInvoiceDetailRel.Contract
			MaidwsContractLine						= CurrentInvoiceDetailRel.ContractLine

		ChargebackServiceVendorAgreementRules		

			if (LocalMa66CBQuantity entered
			and CurrentMessageRel.PurchaseOrderLine != LocalWsSavePurchaseOrderLine)
				LocalCostChargebackSw = false
			initialize LocalPvnChargebackAmount
			initialize LocalPvnChargebackQuantity
			initialize LocalChargebackAmount
			if (CurrentInvoiceDetailRel.ContractLine.ServiceCode.Amount)
				LocalPvnChargebackQuantity = 1
				LocalPvnChargebackAmount = CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumAmount - CurrentInvoiceDetailRel.ContractLine.MaximumLineAmountInUse
				if ((LocalPvnChargebackAmount * -1) > CurrentInvoiceDetailRel.EnteredUnitCost)
					LocalPvnChargebackAmount = CurrentInvoiceDetailRel.EnteredUnitCost * -1
			else
				if (CurrentMessageRel.MessageType.Cost)
					LocalCostChargebackSw 			= true
					LocalWsSavePurchaseOrderLine	= CurrentMessageRel.PurchaseOrderLine
					LocalPvnChargebackAmount		= ((CurrentInvoiceDetailRel.MatchUnitCost - CurrentInvoiceDetailRel.ContractLine.DerivedMatchBaseCost) * -1)
					LocalPvnChargebackQuantity		= CurrentInvoiceDetailRel.MatchedQuantity
					if (Company.MatchCompanyRel.ServiceMessagingOption.ExtendedAmountOnly)
						LocalPvnChargebackQuantity	= 1
						LocalPvnChargebackAmount	= ((CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumQuantity * CurrentInvoiceDetailRel.MatchUnitCost) - CurrentInvoiceDetailRel.ContractLine.AmountOrdered)
						LocalWorkChargebackAmount	= ((CurrentInvoiceDetailRel.DerivedInvoiceLineQuantityWithPrecision * CurrentInvoiceDetailRel.DerivedInvoiceLineUnitCostWithPrecision) * -1)
						if (LocalPvnChargebackAmount < LocalWorkChargebackAmount)
							LocalPvnChargebackAmount = LocalWorkChargebackAmount
				else
					if (CurrentCostMessageRel exists)
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost - (CurrentInvoiceDetailRel.EnteredUnitCost - CurrentInvoiceDetailRel.ContractLine.DerivedMatchBaseCost)
					else
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost
					if (CurrentInvoiceDetailRel.MatchUnitCost > CurrentInvoiceDetailRel.EnteredUnitCost)
						LocalPvnChargebackAmount	= CurrentInvoiceDetailRel.EnteredUnitCost
					LocalPvnChargebackQuantity		= ((CurrentInvoiceDetailRel.ContractLine.LifetimeMaximumQuantity - CurrentInvoiceDetailRel.ContractLine.QuantityOrdered))
					if ((LocalPvnChargebackQuantity * -1) > CurrentInvoiceDetailRel.MatchedQuantity)
						LocalPvnChargebackQuantity	= ((CurrentInvoiceDetailRel.MatchedQuantity) * -1)

			if (CurrentInvoiceDetailRel.TaxCode entered)
				initialize CalculateTax.TaxAmount
				initialize CalculateTax.InvoiceAmount
				CalculateTax.TaxCode				= CurrentInvoiceDetailRel.TaxCode
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.InvoiceDate			= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate			= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 		= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate				= PayablesInvoice.InvoiceDate
				CalculateTax.ProductTaxCategory		= CurrentInvoiceDetailRel.ProductTaxCategory
				CalculateTax.System					= "AP"
				CalculateTax.TransactionCurrency	= PayablesInvoice.InvoiceCurrency
				CalculateTax.BaseCurrency			= PayablesInvoice.PayGroup.BaseCurrency
				CalculateTax.TaxableAmount			= LocalPvnChargebackAmount * LocalPvnChargebackQuantity
				CalculateTax.PostalAddress			= PayablesInvoice.ProcessLevel.PostalAddress
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
				LocalTaxType						= CalculateTax.TaxType
				if (!LocalTaxType.CalculatedRate)
					LocalChargebackAmount	+= CalculateTax.OutputTotalTaxable - CalculateTax.OutputTotalTaxAmount
			else
				LocalChargebackAmount		+= (LocalPvnChargebackAmount * LocalPvnChargebackQuantity)



			MaidwsItem								= CurrentMessageRel.Item
			MaidwsInvoiceType						= "C"
			MaidwsInvoice							= CurrentMessageRel.Invoice
			MaidwsLocation							= CurrentMessageRel.Location
			MaidwsRecordSource						= "MA"
			MaidwsStatus							= 1
			MaidwsPurchaseOrderLine					= CurrentMessageRel.PurchaseOrderLine
			MaidwsPurchaseOrderReceiptLine			= CurrentMessageRel.PurchaseOrderLine
			if (CurrentInvoiceDetailRel.TaxCode entered)
				if (LocalTaxType.CalculatedRate)
					LocalCalculateTaxRate			= CurrentInvoiceDetailRel.TaxAmount / CurrentInvoiceDetailRel.TotalDistributionAmount
					CalculateTax.TaxableAmount		= LocalPvnChargebackAmount * LocalPvnChargebackQuantity
					MaidwsTaxAmount					= CalculateTax.TaxableAmount * LocalCalculateTaxRate

					LocalChargebackAmount			+= CalculateTax.TaxableAmount + MaidwsTaxAmount
				else
					MaidwsTaxAmount					= CalculateTax.OutputTotalTaxAmount
				MaidwsTaxType						= CurrentInvoiceDetailRel.TaxType
				MaidwsTaxCode						= CurrentInvoiceDetailRel.TaxCode
			MaidwsRetailUnitCost					= blank
			MaidwsMatchObjectID						= PayablesInvoice.MatchObjectID
			MaidwsMatchSequence						= CurrentInvoiceDetailRel.MatchSequence
			MaidwsVendorPriceUOM					= CurrentInvoiceDetailRel.ContractLine.UOM
			MaidwsVendorBuyUOM						= CurrentInvoiceDetailRel.ContractLine.UOM
			MaidwsEnteredUOM						= CurrentInvoiceDetailRel.ContractLine.UOM
			MaidwsItemDescription					= CurrentInvoiceDetailRel.ContractLine.ItemDescription
			MaidwsItemType							= CurrentInvoiceDetailRel.ItemType
			MaidwsVendorItem						= CurrentInvoiceDetailRel.ContractLine.VendorItem
			MaidwsItemGTIN							= CurrentInvoiceDetailRel.ContractLine.GlobalTradeItemNumber
			MaidwsTaxUsageCode						= CurrentInvoiceDetailRel.ContractLine.TaxUsageCode
			MaidwsMatchDetailKey					= blank
			MaidwsMatchUnitCost						= LocalPvnChargebackAmount
			MaidwsEnteredUnitCost					= LocalPvnChargebackAmount
			MaidwsMatchedQuantity					= LocalPvnChargebackQuantity
			LocalMa66CBQuantity						= MaidwsMatchedQuantity
			MaidwsEnteredQuantity					= MaidwsMatchedQuantity
			MaidwsBuyUOMMatchedQuantity				= MaidwsMatchedQuantity
			MaidwsTotalDistributionAmount			= MaidwsMatchUnitCost * MaidwsMatchedQuantity
			MaidwsDistributionDate					= CurrentInvoiceDetailRel.DistributionDate
			MaidwsExcessQuantityProcess				= CurrentInvoiceDetailRel.ExcessQuantityProcess
			MaidwsLastMessageSequence				= CurrentInvoiceDetailRel.LastMessageSequence
			MaidwsICNCode							= CurrentInvoiceDetailRel.ICNCode
			MaidwsSupplementaryQuantity				= CurrentInvoiceDetailRel.SupplementaryQuantity
			MaidwsStockWeight						= CurrentInvoiceDetailRel.StockWeight
			MaidwsSupplementaryUOM					= CurrentInvoiceDetailRel.SupplementaryUOM
			MaidwsContract							= CurrentInvoiceDetailRel.Contract
			MaidwsContractLine						= CurrentInvoiceDetailRel.ContractLine
			LocalServiceCode						= CurrentInvoiceDetailRel.ContractLine.ServiceCode


			invoke UpdateAmountsAndQuantities CurrentInvoiceDetailRel.ContractLine
				if (LocalServiceCode.Amount)
					invoked.InAmount				= LocalPvnChargebackAmount
					invoked.InQuantity				= 0
				else
					invoked.InAmount				= LocalPvnChargebackAmount * LocalPvnChargebackQuantity
					if (CurrentMessageRel.MessageType.Quantity)
						invoked.InQuantity			= LocalPvnChargebackQuantity
					else
						invoked.InQuantity			= 0
				invoked.InUOM						= MaidwsEnteredUOM
				invoked.FromMatch                   = true
				invoked.InTaxAmount					= MaidwsTaxAmount 

		CreateChargebackDetailsRules				

			for each ChargebackMessagesRel

				initialize LocalReceiptVendorPriceUOMQuantity
				initialize LocalReceiptMatchedQuantity
				initialize LocalToleranceSw
				initialize LocalMa66wsNetChargebackQuantity
				

				LocalCostChargebackSw				= false
				LocalPurchaseOrderTaxFlag			= false
				if (each.ApplicationAction.Chargeback)
					CurrentPurchaseOrder			= each.PurchaseOrder
					CurrentPurchaseOrderLine		= each.PurchaseOrderLine
					CurrentContract					= each.Contract
					CurrentContractLine				= each.ContractLine
					CurrentPayablesInvoiceDetail 	= each.PayablesInvoiceDetail
					CurrentMatchInvoiceMessage		= each.MatchInvoiceMessage
					CurrentReceipt					= CurrentInvoiceDetailRel.PurchaseOrderReceipt
					CurrentReceiptLine 				= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine

					if (CurrentMessageRel.MessageType.NoReceiptLine
					and CurrentInvoiceDetailRel.RecordSource.LineMatchMa43
					and CurrentMessageRel.PayablesInvoice.MatchLevel.DetailMatch)

						if (!PayablesInvoice.MatchProcessType.ServiceContract)
							if (CurrentPOLineRel.ItemType.Service
							and CurrentPOLineRel.ServiceCode.Quantity)

								LocalPliChargebackQuantity = CurrentPOLineRel.ChargebackQuantity
								LocalPliMatchedQuantity = CurrentPOLineRel.MatchedQuantity

								if  (LocalPliChargebackQuantity entered
								and  LocalPliMatchedQuantity entered)

									invoke UpdateFromMatch CurrentPOLineRel
										if (LocalPliMatchedQuantity < 0
										and LocalPliMatchedQuantity * -1 > LocalPliChargebackQuantity)
											invoked.LocalUpdateFromMatchChargebackQuantity = LocalPliMatchedQuantity
										else
											if  (LocalPliMatchedQuantity > LocalPliChargebackQuantity)
												invoked.LocalUpdateFromMatchChargebackQuantity = LocalPliMatchedQuantity * -1
											else
												invoked.LocalUpdateFromMatchChargebackQuantity = LocalPliChargebackQuantity * -1
										invoked.BypassCommitUpdate = true

						invoke FastUpdate CurrentInvoiceDetailRel
							invoked.ExcessQuantityProcess		= 1
							invoked.LastUpdateDate				= current timestamp
							invoked.LastUpdatedBy				= actor

					initialize LocalMa66AdjustUnitCost
					LocalAcceptCostSw		= true
					if (CurrentMessageRel.MessageType.Cost)
						if (CurrentMessageRel.ClosedPOCostAdjustCostMessagesRel exists)
							LocalMa66AdjustUnitCost			= CurrentMessageRel.first ClosedPOCostAdjustCostMessagesRel.AdjustedUnitCost
							LocalAcceptCostSw				= false


					if (CurrentMessageRel.MatchMessageOrigin.ReconMatch
					and !CurrentInvoiceDetailRel.ItemType.Service)
						if (CurrentPOLineRel.TaxCode entered)
							LocalMA66wsPoHasTax = true
						LocalMatchObjectID						= CurrentMessageRel.MatchObjectID

						initialize LocalMa66wsNetChargebackQuantity
						initialize LocalMa66wsMnrChargebackQuantity

						for each CurrentMessageRel.PurchaseOrderReceiptLinesByPurchaseOrderLineRel
							LocalPurchaseOrderReceipt 			= each.PurchaseOrderReceipt
							LocalPurchaseOrderReceiptLine 		= each.PurchaseOrderReceiptLine
							LocalMatchSequence					= each.MatchSequence



							if  (CurrentInvoiceDetailRel.IsCatchWeight)
								LocalReceiptVendorPriceUOMQuantity 	+=	each.CatchWeightQuantity
								LocalReceiptMatchedQuantity 		+= 	each.CatchWeightQuantity

							else
							if  (LocalReceiptLinkRel exists
							and  LocalReceiptLinkRel.Type = "MA")

								if (CurrentMessageRel.MessageType.Cost)
									if (LocalReceiptLinkRel.MatchedNotReceivedQuantity entered)
										LocalMa66wsMnrChargebackQuantity 	+= LocalReceiptLinkRel.MatchedNotReceivedQuantity
									else
										LocalMa66wsMnrChargebackQuantity 	+= LocalReceiptLinkRel.WriteOffQuantity
								LocalReceiptVendorPriceUOMQuantity 		+= (LocalReceiptLinkRel.MatchedQuantity
																		* (each.VendorBuyUOMMultiplier / each.VendorPriceUOMMultiplier))
								LocalReceiptMatchedQuantity 			+= 	(LocalReceiptLinkRel.MatchedQuantity
																		* (each.VendorBuyUOMMultiplier / each.VendorPriceUOMMultiplier))

								if (CurrentMessageRel.MessageType.Quantity
								and LocalReceiptLinkRel.MatchedNotReceivedQuantity entered)
									invoke FastUpdate LocalReceiptLinkRel
										invoked.ChargebackQuantity = LocalReceiptLinkRel.MatchedNotReceivedQuantity
										initialize invoked.MatchedNotReceivedQuantity
							else


								if (each.Invoice = PayablesInvoice.Invoice)
									LocalReceiptVendorPriceUOMQuantity		+= each.VendorPriceUOMQuantity
									LocalReceiptMatchedQuantity				+= each.MatchedQuantity





						if  (CurrentInvoiceDetailRel.IsCatchWeight)
							LocalReceiptOriginalUnitCost = CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost
							LocalReceiptUnitCost = CurrentInvoiceDetailRel.PurchaseOrderLine.EnteredUnitCost

						else
						if (CurrentReceiptLineRel exist)

							LocalReceiptUnitCost = CurrentReceiptLineRel.MatchUnitCost
							if (LocalMa66AdjustUnitCost entered)

								LocalReceiptUnitCost = LocalMa66AdjustUnitCost

							if (LocalToleranceSw)
								LocalReceiptOriginalUnitCost = CurrentInvoiceDetailRel.MatchUnitCost - CurrentReceiptLineRel.OriginalUnitCost
							else
								if (CurrentInvoiceDetailRel.ItemType = "I")
									LocalReceiptOriginalUnitCost = CurrentReceiptLineRel.OriginalUnitCost
								else
									LocalReceiptOriginalUnitCost = CurrentInvoiceDetailRel.MatchUnitCost

						else

							if (LocalToleranceSw)
								LocalReceiptOriginalUnitCost = CurrentInvoiceDetailRel.MatchUnitCost - CurrentPOLineRel.EnteredUnitCost
							else
								if (CurrentInvoiceDetailRel.ItemType = "I"
								and CurrentMessageRel.PurchaseOrderLine entered)
									LocalReceiptOriginalUnitCost = CurrentPOLineRel.EnteredUnitCost
								else
									LocalReceiptOriginalUnitCost = CurrentInvoiceDetailRel.MatchUnitCost
							if (CurrentMessageRel.MessageType.NoReceiptLine
							and CurrentMessageRel.PurchaseOrderLine not entered)
								LocalReceiptVendorPriceUOMQuantity += CurrentInvoiceDetailRel.MatchedQuantity
							else
								LocalReceiptVendorPriceUOMQuantity += CurrentPOLineRel.VendorPriceUOMQuantity

						initialize MaidwsTaxAmount
						initialize MaidwsTaxType
						initialize MaidwsTaxCode
						initialize MaidwsTaxUsageCode

						if (CurrentInvoiceDetailRel.TaxCode entered)
							initialize CalculateTax
							initialize LocalTaxAmount
							initialize LocalInvoiceTaxAmount
							CalculateTax.TaxCode						= CurrentInvoiceDetailRel.TaxCode
							CalculateTax.ProductTaxCategory				= CurrentInvoiceDetailRel.ProductTaxCategory
							CalculateTax.Function						= CalculateTax.Function.CalculateTax
							CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
							CalculateTax.System							= "AP"
							if (CurrentMessageRel.MessageType.Quantity)
								CalculateTax.TaxableAmount				= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
																		* LocalReceiptOriginalUnitCost)


								if (!CurrentInvoiceDetailRel.ItemType.Inventoried)
									if ((CurrentMessageRel.ChargebackCostMessagesRel not exists
									and  CurrentMessageRel.AdjustedCostRel exists)
									or   CurrentMessageRel.NonChargebackCostMessagesRel exists)
										CalculateTax.TaxableAmount				= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
																				* CurrentInvoiceDetailRel.MatchUnitCost)


							if (CurrentMessageRel.MessageType.Cost)
								CalculateTax.TaxableAmount				= (LocalReceiptMatchedQuantity *
																		(LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))


								if ((CurrentMessageRel.ChargebackQuantityMessagesRel not exists
								or   CurrentMessageRel.NonChargebackQuantityMessagesRel exists)
								and !CurrentInvoiceDetailRel.ItemType.Inventoried)
									CalculateTax.TaxableAmount				= (CurrentInvoiceDetailRel.MatchedQuantity *
																		(LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))



							if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
								CalculateTax.TaxableAmount				+= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) * -1)


							LocalTaxableAmount							= CalculateTax.TaxableAmount
							CalculateTax.InvoiceDate					= PayablesInvoice.InvoiceDate
							CalculateTax.PaymentDate					= PayablesInvoice.InvoiceDate
							CalculateTax.GeneralLedgerDate 				= PayablesInvoice.InvoiceDate
							CalculateTax.TaxDate						= PayablesInvoice.InvoiceDate
							CalculateTax.System							= "AP"
							CalculateTax.BaseCurrency					= PayablesInvoice.Company.AccountingEntity.FunctionalCurrency
							CalculateTax.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
							CalculateTax.PostalAddress					= PayablesInvoice.ProcessLevel.PostalAddress
							CalculateTax.FromPostalAddress				= PayablesInvoice.Location.PostalAddress
							CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
							LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
							LocalChargebackAmount						+= CalculateTax.TaxableAmount
							I1 = 1
							while (I1 <= 8
							and    CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered)
								if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag != "A")
									LocalTaxAmount						= (CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP)
									round LocalTaxAmount to nearest DerivedRoundTo
									LocalChargebackAmount += LocalTaxAmount

								I1 += 1
						else
							if (CurrentMessageRel.MessageType.Quantity)
								if ((CurrentMessageRel.ChargebackCostMessagesRel not exists
								and  CurrentMessageRel.AdjustedCostRel exists)
								or   CurrentMessageRel.NonChargebackCostMessagesRel exists)
									LocalChargebackAmount					+= (CurrentInvoiceDetailRel.MatchedQuantity
																			* LocalReceiptOriginalUnitCost)

								else 
									LocalChargebackAmount					+= ((LocalReceiptVendorPriceUOMQuantity - CurrentInvoiceDetailRel.MatchedQuantity)
																			* LocalReceiptOriginalUnitCost)

							if (CurrentMessageRel.MessageType.Cost)
								if ((CurrentMessageRel.ChargebackQuantityMessagesRel not exists
								or   CurrentMessageRel.NonChargebackQuantityMessagesRel exists)
								and !CurrentInvoiceDetailRel.ItemType.Inventoried)
									LocalChargebackAmount					+= (CurrentInvoiceDetailRel.MatchedQuantity *
																			(LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))

								else 
									LocalChargebackAmount					+= (LocalReceiptMatchedQuantity *
																			(LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost))


							if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
								LocalChargebackAmount					+= ((CurrentInvoiceDetailRel.MatchedQuantity * CurrentInvoiceDetailRel.MatchUnitCost) * -1)

						MaidwsItem								= CurrentMessageRel.Item
						MaidwsInvoiceType						= "C"
						MaidwsInvoice							= CurrentMessageRel.Invoice
						MaidwsLocation							= CurrentMessageRel.Location
						MaidwsRecordSource						= "MA"
						MaidwsStatus							= 1
						MaidwsPurchaseOrderLine					= CurrentInvoiceDetailRel.PurchaseOrderLine
						if (CurrentInvoiceDetailRel.TaxCode entered)
							MaidwsTaxType						= CurrentInvoiceDetailRel.TaxType
							MaidwsTaxCode						= CurrentInvoiceDetailRel.TaxCode
							MaidwsTaxAmount						= CalculateTax.OutputTotalTaxAmount

							MaidwsProductTaxCategory			= CurrentInvoiceDetailRel.ProductTaxCategory
						MaidwsRetailUnitCost					= blank
						MaidwsMatchObjectID						= PayablesInvoice.MatchObjectID
						MaidwsMatchSequence						= CurrentInvoiceDetailRel.MatchSequence
						MaidwsItemDescription					= CurrentInvoiceDetailRel.ItemDescription
						if (CurrentMessageRel.MessageType.NoReceiptLine or CurrentInvoiceDetailRel.ItemType = "S")
							MaidwsPurchaseOrderLine				= CurrentInvoiceDetailRel.PurchaseOrderLine
							MaidwsPurchaseOrderReceipt			= CurrentInvoiceDetailRel.PurchaseOrderReceipt
							MaidwsVendorPriceUOM				= CurrentInvoiceDetailRel.VendorPriceUOM
							MaidwsVendorPriceUOMMultiplier		= CurrentInvoiceDetailRel.VendorPriceUOMMultiplier
							MaidwsVendorBuyUOM					= CurrentInvoiceDetailRel.VendorBuyUOM
							MaidwsVendorBuyUOMMultiplier		= CurrentInvoiceDetailRel.VendorBuyUOMMultiplier
							MaidwsEnteredUOM					= CurrentInvoiceDetailRel.EnteredUOM
							MaidwsEnteredUOMMultiplier			= CurrentInvoiceDetailRel.EnteredUOMMultiplier
							MaidwsEnteredQuantity				= CurrentInvoiceDetailRel.EnteredQuantity
							MaidwsEnteredUnitCost				= CurrentInvoiceDetailRel.EnteredUnitCost
							MaidwsItemType						= CurrentInvoiceDetailRel.ItemType
							MaidwsVendorItem					= CurrentInvoiceDetailRel.VendorItem
							MaidwsItemGTIN						= CurrentInvoiceDetailRel.ItemGTIN
							MaidwsTaxCode						= CurrentInvoiceDetailRel.TaxCode
							MaidwsTaxUsageCode					= CurrentInvoiceDetailRel.TaxUsageCode
							MaidwsMatchDetailKey				= CurrentInvoiceDetailRel.MatchDetailKey
						else
							MaidwsPurchaseOrderReceiptLine		= CurrentReceiptLineRel.PurchaseOrderReceiptLine
							MaidwsPurchaseOrderReceipt			= CurrentReceiptLineRel.PurchaseOrderReceipt
							MaidwsVendorPriceUOM				= CurrentReceiptLineRel.VendorPriceUOM
							MaidwsVendorPriceUOMMultiplier		= CurrentReceiptLineRel.VendorPriceUOMMultiplier
							MaidwsVendorBuyUOM					= CurrentReceiptLineRel.VendorBuyUOM
							MaidwsVendorBuyUOMMultiplier		= CurrentReceiptLineRel.VendorBuyUOMMultiplier
							MaidwsEnteredUOM					= CurrentReceiptLineRel.ReceivedUOM
							MaidwsEnteredUOMMultiplier			= CurrentReceiptLineRel.ReceivedUOMMultiplier
							if (PayablesInvoiceDetail.IsCatchWeight)
								MaidwsEnteredUOM				= CurrentReceiptLineRel.VendorPriceUOM
								MaidwsEnteredUOMMultiplier		= CurrentReceiptLineRel.VendorPriceUOMMultiplier
							MaidwsEnteredUnitCost				= CurrentReceiptLineRel.MatchUnitCost
							MaidwsItemType						= CurrentReceiptLineRel.ItemType
							MaidwsVendorItem					= CurrentReceiptLineRel.VendorItem
							MaidwsItemGTIN						= CurrentReceiptLineRel.ItemGTIN
							MaidwsTaxCode						= CurrentInvoiceDetailRel.TaxCode
							MaidwsTaxUsageCode					= CurrentInvoiceDetailRel.TaxUsageCode
							MaidwsMatchDetailKey				= CurrentInvoiceDetailRel.MatchDetailKey
						if (CurrentMessageRel.MessageType.Quantity)

							LocalMa66CBQuantity					= CurrentInvoiceDetailRel.MatchedQuantity - LocalReceiptVendorPriceUOMQuantity
							if (LocalMa66CBQuantity > 0)
								LocalMa66CBQuantity				= LocalMa66CBQuantity * -1
							MaidwsMatchedQuantity				= LocalMa66CBQuantity
							MaidwsEnteredQuantity				= LocalMa66CBQuantity
							MaidwsMatchUnitCost					= LocalReceiptOriginalUnitCost
							MaidwsEnteredUnitCost				= LocalReceiptOriginalUnitCost



							if ((CurrentMessageRel.ChargebackCostMessagesRel not exists
							and  CurrentMessageRel.AdjustedCostRel exists)
							or   CurrentMessageRel.NonChargebackCostMessagesRel exists)

								MaidwsMatchUnitCost					= CurrentInvoiceDetailRel.MatchUnitCost
								MaidwsEnteredUnitCost				= CurrentInvoiceDetailRel.MatchUnitCost

							
						if (CurrentMessageRel.MessageType.Cost)
							MaidwsMatchUnitCost					= LocalReceiptUnitCost - CurrentInvoiceDetailRel.MatchUnitCost

							if (MaidwsMatchUnitCost > 0)
								MaidwsMatchUnitCost				= MaidwsMatchUnitCost * -1
							MaidwsEnteredUnitCost				= MaidwsMatchUnitCost
							if (CurrentInvoiceDetailRel.ItemType = "X")
								MaidwsMatchedQuantity			= LocalReceiptVendorPriceUOMQuantity
							MaidwsMatchedQuantity				= LocalReceiptMatchedQuantity
							LocalMa66CBQuantity					= MaidwsMatchedQuantity
							MaidwsEnteredQuantity				= LocalMa66CBQuantity

							if ((CurrentMessageRel.ChargebackQuantityMessagesRel not exists
							or   CurrentMessageRel.NonChargebackQuantityMessagesRel exists)
							and !CurrentInvoiceDetailRel.ItemType.Inventoried)
								MaidwsEnteredQuantity			= CurrentInvoiceDetailRel.EnteredQuantity 
								MaidwsMatchedQuantity			= CurrentInvoiceDetailRel.MatchedQuantity 
								LocalMa66CBQuantity				= CurrentInvoiceDetailRel.MatchedQuantity 




						if (CurrentMessageRel.MessageType.Item or CurrentMessageRel.MessageType.NoReceiptLine)
							MaidwsMatchedQuantity				= CurrentInvoiceDetailRel.MatchedQuantity * -1
							LocalMa66CBQuantity					= MaidwsMatchedQuantity
							MaidwsEnteredQuantity				= MaidwsMatchedQuantity
							MaidwsMatchUnitCost					= CurrentInvoiceDetailRel.MatchUnitCost



						if (CurrentMessageRel.MessageType.NoReceiptLine)
							MaidwsBuyUOMMatchedQuantity			= LocalMa66CBQuantity
						else
							if (CurrentReceiptLineRel.VendorBuyUOM = CurrentReceiptLineRel.VendorPriceUOM)
								MaidwsBuyUOMMatchedQuantity		= LocalMa66CBQuantity
							else
								if (CurrentReceiptLineRel.ItemType != "I" and CurrentReceiptLineRel.ItemType != "N")
									MaidwsBuyUOMMatchedQuantity	= LocalMa66CBQuantity
								else

									UOMCalculation.InputQuantity					= LocalMa66CBQuantity
									UOMCalculation.InputUOM							= MaidwsVendorPriceUOM
									UOMCalculation.InputToUOMConversion				= MaidwsVendorBuyUOM
									UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate
									LocalUOMCalculationExecuted						= UOMCalculation.OutputQuantity
									MaidwsBuyUOMMatchedQuantity						= UOMCalculation.OutputQuantity
						MaidwsTotalDistributionAmount			= MaidwsMatchUnitCost * MaidwsMatchedQuantity
						MaidwsDistributionDate					= CurrentInvoiceDetailRel.DistributionDate
						MaidwsExcessQuantityProcess				= 1
						MaidwsLastMessageSequence				= CurrentInvoiceDetailRel.LastMessageSequence
						MaidwsICNCode							= CurrentInvoiceDetailRel.ICNCode
						MaidwsSupplementaryQuantity				= CurrentInvoiceDetailRel.SupplementaryQuantity
						MaidwsStockWeight						= CurrentInvoiceDetailRel.StockWeight
						MaidwsSupplementaryUOM					= CurrentInvoiceDetailRel.SupplementaryUOM
						MaidwsContract							= CurrentInvoiceDetailRel.Contract
						MaidwsContractLine						= CurrentInvoiceDetailRel.ContractLine





						if  (CurrentMessageRel.MessageType.Cost
						and  CurrentInvoiceDetailRel.ItemType.Inventoried
						and  CurrentInvoiceDetailRel.ItemLocationRel.InventoryTracked
						and  CurrentInvoiceDetailRel.MatchUnitCost > CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.MatchUnitCost
						and  CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.MatchUnitCost = CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.OriginalUnitCost
						and  LocalAcceptCostSw)
							LocalCostAdjustCount 		= instance count of CurrentInvoiceDetailRel.ReceiptLineCostAdjustmentsRel
							LocalOriginatingDoc 		= CurrentInvoiceDetailRel.first ReceiptLineCostAdjustmentsRel.OriginatingTransactionDocument 
							LocalInventoryTransaction 	= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction



							if (LocalCostAdjustCount = 1
							and LocalOriginatingDoc = LocalInventoryTransaction)


								for each CurrentInvoiceDetailRel.ReceiptLineCostAdjustmentsRel


									invoke UpdateForCostAdjustment each.ItemLocation
										invoked.PrmCostDifference			= each.UnitCost * -1
										invoked.PrmQuantity					= each.Quantity 
										invoked.PrmDocumentNumber			= LocalInventoryTransaction 
										invoked.PrmLineNumber				= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine  
										if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
											invoked.PrmOffsetAccount		= PayablesInvoice.ProcessLevel.CostVarianceAccount
										else
											invoked.PrmOffsetAccount		= Company.MatchCompanyRel.CostVarianceAccount

									end for each 

							else 

								CurrentCostDifference						= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.MatchUnitCost - CurrentInvoiceDetailRel.MatchUnitCost


								if  (CurrentInvoiceDetailRel.TaxCode entered)
									LocalUnitCost							= CalculateTax.OutputTotalLandedTaxAmount5DP / LocalMa66CBQuantity

									CurrentCostDifference					+= LocalUnitCost

									MaidwsTotalDistributionAmount			= MaidwsMatchUnitCost * MaidwsMatchedQuantity


								if (PayablesInvoice.InvoiceCurrency != Company.Currency)
									LocalCurrencyTable							= PayablesInvoice.CurrencyTable
									CurrencyWork.TransactionAmount				= CurrentCostDifference
									CurrencyWork.FromCurrency					= PayablesInvoice.InvoiceCurrency
									CurrencyWork.BaseAmount.ToCurrency			= Company.Currency
									CurrentCostDifference						= CurrencyWork.BaseAmount.OutputCurrencyAmount



								if (CurrentCostDifference entered)
									invoke UpdateForCostAdjustment CurrentInvoiceDetailRel.ItemLocationRel
										invoked.PrmCostDifference			= CurrentCostDifference
										invoked.PrmQuantity					= LocalMa66CBQuantity
										invoked.PrmDocumentNumber			= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
										invoked.PrmLineNumber				= CurrentInvoiceDetailRel.PurchaseOrderReceiptLine
										if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
											invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
										else
											invoked.PrmOffsetAccount			= Company.MatchCompanyRel.CostVarianceAccount
					else
						initialize LocalServiceLineChargeBackAmount
						if (CurrentMessageRel.PurchaseOrderLine entered)
							include ChargebackDetailDropServiceRules
						else
							include ChargebackServiceVendorAgreementRules
						LocalChargebackAmount						+= LocalServiceLineChargeBackAmount

					if (CurrentMessageRel.MessageType.Quantity
					and CurrentInvoiceDetailRel.ItemType = "I"
					and ((CurrentInvoiceDetailRel.MatchUnitCost != CurrentReceiptLineRel.OriginalUnitCost)
					or 	CurrentInvoiceDetailRel.MatchUnitCost - CurrentReceiptLineRel.OriginalUnitCost	= 0)
					and !LocalToleranceSw)

						LocalToleranceSw = true
					else

						LocalToleranceSw = false

					if (MaidwsTotalDistributionAmount != 0)							
						invoke MemoCreate PayablesInvoiceDetail
							assign result to ChargebackInvoiceDetailView
							invoked.Company						= ChargebackInvoiceView.Company
							invoked.PayablesInvoice				= ChargebackInvoiceView.PayablesInvoice
							invoked.Vendor						= ChargebackInvoiceView.Vendor
							invoked.Invoice						= ChargebackInvoiceView.Invoice
							invoked.Suffix						= ChargebackInvoiceView.Suffix
							invoked.Item     					= MaidwsItem
							invoked.InvoiceType     			= MaidwsInvoiceType
							invoked.Location	   				= MaidwsLocation
							invoked.RecordSource   				= MaidwsRecordSource
							invoked.Status     					= MaidwsStatus
							invoked.PurchaseOrderLine     		= MaidwsPurchaseOrderLine
							invoked.TaxType     				= MaidwsTaxType
							invoked.TaxCode     				= MaidwsTaxCode
							invoked.TaxAmount     				= MaidwsTaxAmount
							invoked.ProductTaxCategory     		= MaidwsProductTaxCategory
							invoked.RetailUnitCost     			= MaidwsRetailUnitCost
							invoked.MatchObjectID     			= MaidwsMatchObjectID
							invoked.MatchSequence     			= MaidwsMatchSequence
							invoked.MatchUpdateDate     		= current corporate date
							invoked.UpdateDate     				= current timestamp
							invoked.VendorPriceUOM     			= MaidwsVendorPriceUOM
							invoked.VendorPriceUOMMultiplier	= MaidwsVendorPriceUOMMultiplier
							invoked.VendorBuyUOM     			= MaidwsVendorBuyUOM
							invoked.VendorBuyUOMMultiplier     	= MaidwsVendorBuyUOMMultiplier
							invoked.EnteredUOM     				= MaidwsEnteredUOM
							invoked.EnteredUOMMultiplier     	= MaidwsEnteredUOMMultiplier
							invoked.EnteredQuantity     		= MaidwsEnteredQuantity
							invoked.EnteredUnitCost     		= MaidwsEnteredUnitCost
							invoked.ItemType     				= MaidwsItemType
							invoked.VendorItem     				= MaidwsVendorItem
							invoked.ItemGTIN     				= MaidwsItemGTIN
							invoked.TaxUsageCode     			= MaidwsTaxUsageCode
							invoked.MatchDetailKey     			= MaidwsMatchDetailKey
							invoked.MatchedQuantity     		= MaidwsMatchedQuantity
							invoked.MatchUnitCost     			= MaidwsMatchUnitCost
							invoked.BuyUOMMatchedQuantity     	= MaidwsBuyUOMMatchedQuantity
							invoked.TotalDistributionAmount     = MaidwsTotalDistributionAmount
							invoked.DistributionDate     		= MaidwsDistributionDate
							invoked.ExcessQuantityProcess     	= MaidwsExcessQuantityProcess
							invoked.LastMessageSequence     	= MaidwsLastMessageSequence
							invoked.ICNCode     				= MaidwsICNCode
							invoked.SupplementaryQuantity     	= MaidwsSupplementaryQuantity
							invoked.StockWeight     			= MaidwsStockWeight
							invoked.SupplementaryUOM     		= MaidwsSupplementaryUOM
							invoked.Contract     				= MaidwsContract
							invoked.ContractLine     			= MaidwsContractLine
							invoked.ItemDescription     		= MaidwsItemDescription
							if (MaidwsPurchaseOrderReceipt entered)
								invoked.PurchaseOrderReceipt    	= MaidwsPurchaseOrderReceipt
								invoked.PurchaseOrderReceiptLine    = MaidwsPurchaseOrderReceiptLine


						if (CurrentInvoiceDetailRel.ItemType.Inventoried)
							if ((CurrentMessageRel.ChargebackCostMessagesRel not exists
							and  CurrentMessageRel.AdjustedCostRel exists)
							or   CurrentMessageRel.NonChargebackCostMessagesRel exists)

								MaidwsMatchUnitCost					= LocalReceiptOriginalUnitCost
								MaidwsEnteredUnitCost				= LocalReceiptOriginalUnitCost


						include CreateChargebackDistributionsRules		
						if (CurrentMessageRel.ChargebackQuantityMessagesRel exist
						or  CurrentMessageRel.NonChargebackQuantityMessagesRel exists)
							LocalQuantityAcceptSw	= true
						if (CurrentMessageRel.ChargebackCostMessagesRel exist
						or  CurrentMessageRel.MessageType.Cost)
							LocalCostChargebackSw 	= true





						if  (CurrentMessageRel.MessageType.Quantity
						and  CurrentInvoiceDetailRel.ItemType.Inventoried
						and  ((CurrentMessageRel.ChargebackCostMessagesRel not exists
						and   CurrentMessageRel.AdjustedCostRel exists)
						or    CurrentMessageRel.NonChargebackCostMessagesRel exists)
						and  CurrentInvoiceDetailRel.MatchUnitCost not = LocalReceiptOriginalUnitCost)
							MaidwsMatchedQuantity					= LocalMa66CBQuantity
							MaidwsEnteredQuantity					= LocalMa66CBQuantity

							MaidwsMatchUnitCost						= CurrentInvoiceDetailRel.MatchUnitCost - LocalReceiptOriginalUnitCost
							MaidwsEnteredUnitCost					= CurrentInvoiceDetailRel.MatchUnitCost - LocalReceiptOriginalUnitCost

							LocalToleranceSw 						= false 

							if (CurrentReceiptLineRel.VendorBuyUOM 		= CurrentReceiptLineRel.VendorPriceUOM)
								MaidwsBuyUOMMatchedQuantity				= MaidwsEnteredQuantity
							else
								UOMCalculation.InputQuantity			= MaidwsEnteredQuantity
								UOMCalculation.InputUOM					= MaidwsVendorPriceUOM
								UOMCalculation.InputToUOMConversion		= MaidwsVendorBuyUOM
								UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
								LocalUOMCalculationExecuted				= UOMCalculation.OutputQuantity
								MaidwsBuyUOMMatchedQuantity				= UOMCalculation.OutputQuantity

							if (CurrentInvoiceDetailRel.TaxCode entered)
								CalculateTax.TaxCode						= CurrentInvoiceDetailRel.TaxCode
								CalculateTax.ProductTaxCategory				= CurrentInvoiceDetailRel.ProductTaxCategory
								CalculateTax.Function						= CalculateTax.Function.CalculateTax
								CalculateTax.TaxEntity						= Company.AccountingEntity
								CalculateTax.System							= "AP"
								CalculateTax.InvoiceAmount					= 0
								CalculateTax.TaxAmount						= 0
								CalculateTax.TaxableAmount					= (MaidwsEnteredQuantity * MaidwsMatchUnitCost)
								CalculateTax.InvoiceDate					= PayablesInvoice.InvoiceDate
								CalculateTax.PaymentDate					= PayablesInvoice.InvoiceDate
								CalculateTax.GeneralLedgerDate 				= PayablesInvoice.InvoiceDate
								CalculateTax.TaxDate						= PayablesInvoice.InvoiceDate
								CalculateTax.System							= "AP"
								CalculateTax.BaseCurrency					= PayablesInvoice.Company.AccountingEntity.FunctionalCurrency
								CalculateTax.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
								CalculateTax.PostalAddress					= PayablesInvoice.ProcessLevel.PostalAddress
								CalculateTax.FromPostalAddress				= PayablesInvoice.Location.PostalAddress
								CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
								LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax


							include CreateChargebackDistributionsRules		


						if (LocalMa66wsMnrChargebackQuantity > 0
						and CurrentMessageRel.MessageType.Cost
						and CurrentInvoiceDetailRel.ItemType.Inventoried
						and LocalCostChargebackSw
						and LocalQuantityAcceptSw)

							LocalMNRDistSw	= true

							LocalMa66wsNetChargebackQuantity = LocalMa66wsMnrChargebackQuantity
							MaidwsMatchUnitCost = MaidwsEnteredUnitCost
							if (CurrentInvoiceDetailRel.TaxCode entered)
								CalculateTax.TaxCode						= CurrentInvoiceDetailRel.TaxCode
								CalculateTax.ProductTaxCategory				= CurrentInvoiceDetailRel.ProductTaxCategory
								CalculateTax.Function						= CalculateTax.Function.CalculateTax
								CalculateTax.TaxEntity						= Company.AccountingEntity
								CalculateTax.System							= "AP"
								CalculateTax.InvoiceAmount					= 0
								CalculateTax.TaxAmount						= 0

								CalculateTax.TaxableAmount					= (LocalMa66wsNetChargebackQuantity * MaidwsMatchUnitCost)

								CalculateTax.InvoiceDate					= PayablesInvoice.InvoiceDate
								CalculateTax.PaymentDate					= PayablesInvoice.InvoiceDate
								CalculateTax.GeneralLedgerDate 				= PayablesInvoice.InvoiceDate
								CalculateTax.TaxDate						= PayablesInvoice.InvoiceDate
								CalculateTax.System							= "AP"
								CalculateTax.BaseCurrency					= PayablesInvoice.Company.AccountingEntity.FunctionalCurrency
								CalculateTax.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
								CalculateTax.PostalAddress					= PayablesInvoice.ProcessLevel.PostalAddress
								CalculateTax.FromPostalAddress				= PayablesInvoice.Location.PostalAddress
								CalculateTax.TaxEntity						= PayablesInvoice.Company.AccountingEntity
								LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax

								MaidwsTaxAmount								+= CalculateTax.OutputTotalTaxAmount

							MaidwsMatchedQuantity						+= LocalMa66wsMnrChargebackQuantity
							MaidwsEnteredQuantity						+= LocalMa66wsMnrChargebackQuantity
							if (CurrentReceiptLineRel.VendorBuyUOM = CurrentReceiptLineRel.VendorPriceUOM)
								MaidwsBuyUOMMatchedQuantity				+= LocalMa66wsMnrChargebackQuantity
							else
								if (CurrentInvoiceDetailRel.ItemType != "I" and CurrentInvoiceDetailRel.ItemType != "N")
									MaidwsBuyUOMMatchedQuantity			+= LocalMa66wsMnrChargebackQuantity
								else

									UOMCalculation.InputQuantity					= LocalMa66wsMnrChargebackQuantity
									UOMCalculation.InputUOM							= MaidwsVendorPriceUOM
									UOMCalculation.InputToUOMConversion				= MaidwsVendorBuyUOM
									UOMCalculation.Method						    = UOMCalculation.Method.ConvertToAlternate
									LocalUOMCalculationExecuted						= UOMCalculation.OutputQuantity
									MaidwsBuyUOMMatchedQuantity						+= UOMCalculation.OutputQuantity

							invoke Update ChargebackInvoiceDetailView.PayablesInvoiceDetail
								invoked.MatchUnitCost					= MaidwsMatchUnitCost
								invoked.TaxAmount						= MaidwsTaxAmount
								invoked.MatchedQuantity					= MaidwsMatchedQuantity
								invoked.EnteredQuantity					= MaidwsEnteredQuantity
								invoked.BuyUOMMatchedQuantity			= MaidwsBuyUOMMatchedQuantity


							include CreateChargebackDistributionsRules		
						if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							invoke CheckCommitmentChargeback ChargebackInvoiceDetailView.PayablesInvoiceDetail



	Create Exit Rules
		if  (Status.Closed
		and  ApplicationAction not entered)
			ApplicationAction = ApplicationAction.NotApplicable

		if (CopyFromMessage entered)												
			for each CopyFromMessage.MatchInvoiceMessageComment set					
				invoke Create MatchInvoiceMessageComment							
					fill in fields from each										
						except invoked.MatchInvoiceMessage							
					invoked.MatchInvoiceMessage	= this instance.MatchInvoiceMessage	



	Actions
		Create is a Create Action
			restricted

			Exit Rules
				if (MatchMessageOrigin.PoCost)
					invoke Purge PayablesInvoice.MatchReconQueueRel

				if (Company.MatchCompanyRel.EnableServiceCostMessaging
				and PayablesInvoice.MatchProcessType.ServiceContract)
					send email
						to AuthorityCodeEmailAddress	
						from config.DefaultFromEmailAddress
						subject "Contract<Contract>HasACostMessageForYourReview"
						Contents
							"Contract_<Contract>_<ContractLinkback>_<ContractAlertLinkback>"
							"Invoice<PayablesInvoice.Invoice>"
							"Vendor<Vendor>_<Vendor.VendorName>"
							"Line_<ContractLine>_<ContractLineLinkback>"
							"Item<ContractLine.ItemDescription>"
							"<ServiceContractMessage>"

		Update is an Update Action
			valid when (MessageNotClosed)
			completion message is "<DerivedUpdateActionCompletionMessage>"

			Field Rules
				POCostFlag
					if (!MatchMessageOrigin.PoCost)
						cannot be entered
							"POCostActionOnlyValidForPOCostMessages"
				InvoiceMessageAction
					if (!MatchMessageOrigin.PoCost)
						required
							"MustSelectSomeAction(ApproveOrChargeback)OrForwardToAnotherPerson"










					else
						cannot be entered
							"ReconciliationActionNotValidForPOCostMessages"
				ReasonCode
					if (!MatchMessageOrigin.PoCost)
						required

			Entrance Rules
				if (MatchMessageOrigin.PoCost)

					if (ForwardToAuthorityCode not entered
					and ForwardToBuyer not entered)
						constraint (POCostFlag entered)
							"ActionIsRequired"

				if (!MatchMessageOrigin.PoCost)
					ApplicationAction				= InvoiceMessageAction
					RespondDate						= current corporate date

					include TransientServiceReconFlagsConstraints

			Action Rules
				RespondDate				= current corporate date
				if (MatchMessageOrigin.PoCost)
					ApplicationAction = POCostFlag
					include TransientPOCostFlagConstraints
					include TransientPOCostFlagUpdates


		ReleasePOCostMessage is an Instance Action
			default label is "<ReleaseCostMessage>"  //"ReleasePOCost"

			valid when (AllowReleasePOCostMessage)
			completion message is "<DerivedUpdateAndReleaseActionCompletionMessage>"
			Entrance Rules
				if  (ApplicationAction.AdjustCost
				and  PayablesInvoice.MatchProcessType.ServiceContract)
					confirmation required
						"ContractLineCostWillBeUpdated;Proceed?"

				if (ApplicationAction.AcceptWorkInSmartRecon)
					constraint (AdjustedUnitCost not entered)
						"WhenPurchaseOrderUnitCostIsMarkedAsCorrect,AdjustedUnitCostCannotBeEntered"














			Action Rules





				if  (ForwardToAuthorityCode entered
				or   ForwardToBuyer entered)
					invoke FastUpdate PayablesInvoiceDetail
						invoked.LastUpdateDate				= current timestamp
						invoked.LastUpdatedBy				= actor

					invoke Create MatchInvoiceMessage
						fill in fields from this instance
							except invoked.Status
							except invoked.AuthorityCode
							except invoked.BuyerOwner
							except invoked.ForwardToAuthorityCode
							except invoked.ForwardToBuyer
							except invoked.ApplicationAction
							except invoked.ReasonCode

						invoked.Status							= 1
						invoked.AuthorityCode					= ForwardToAuthorityCode
						invoked.BuyerOwner						= ForwardToBuyer

						if  (ForwardToBuyer entered)
							invoked.AuthorityCodeEmailAddress	= ForwardToBuyer.EmailAddress
						else
							invoked.AuthorityCodeEmailAddress	= ForwardToAuthorityCode.EmailAddress

						if (HasComments)													
							invoked.CopyFromMessage		= this instance.MatchInvoiceMessage	
							
					if (!PayablesInvoice.MatchProcessType.ServiceContract)	
						if (ForwardToAuthorityCode entered)	
							invoke TriggerPOCostServiceAuth	
						else
							invoke TriggerPOCostServiceBuyer



				if (ApplicationAction.AdjustCost)

					if  (PayablesInvoice.MatchProcessType.ServiceContract)


						invoke UpdateAmountsAndQuantities PayablesInvoiceDetail.ContractLine
							invoked.InServiceCostMessageAmount 			= AdjustedUnitCost
							invoked.FromMatch 							= true

						invoke CreateForPOCostMessage PurchaseOrderReceiptInvoiceLink
							invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= OutMatchObjectID
							invoked.Company														= Company
							invoked.Vendor														= Vendor
							invoked.PayablesInvoice												= PayablesInvoice
							invoked.Contract													= Contract
							invoked.ContractLine												= ContractLine
							invoked.PurchaseOrder												= PurchaseOrder
							invoked.PurchaseOrderLine											= PurchaseOrderLine
							invoked.Item														= Item
							invoked.MatchDetailKey												= MatchDetailKey
							invoked.Type														= "CS"
							invoked.TransactionDate												= current timestamp
							invoked.Status														= 1  //"Processed"
							invoked.Operator													= actor
							invoked.PoCostUpd													= AdjustedUnitCost
					else
						invoke GetNextMatchObjectID Company.MatchCompanyRel
						OutMatchObjectID = Company.MatchCompanyRel.LastMatchObjectID
						invoke CreateForPOCostMessage PurchaseOrderReceiptInvoiceLink
							invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= OutMatchObjectID
							invoked.Company														= Company
							invoked.Vendor														= Vendor
							invoked.PayablesInvoice												= PayablesInvoice
							invoked.PurchaseOrder												= PurchaseOrder
							invoked.PurchaseOrderLine											= PurchaseOrderLine
							invoked.Contract													= Contract
							invoked.ContractLine												= ContractLine
							invoked.Item														= Item
							invoked.MatchDetailKey												= MatchDetailKey
							invoked.Type														= "CS"
							invoked.TransactionDate												= current timestamp
							invoked.Status														= 1  //"Processed"
							invoked.Operator													= actor
							invoked.PoCostUpd													= AdjustedUnitCost


				if (!POCostMessagesForMatchReconciliationOpenInvoiceMessagesRel exist)
					LocalSetMatchStatus	= true
					if (!PayablesInvoice.Status.Unreleased
					and PayablesInvoice.InvoiceType.MatchPrepayment)
						invoke FastUpdate PayablesInvoice
							if (LocalSetMatchStatus)
								invoked.MatchStatus				= 0
							invoked.LastUpdateDate				= current timestamp
							invoked.LastUpdateBy				= actor

					if (PayablesInvoice.InvoiceType.MatchPrepayment
					and !PayablesInvoice.Status.Released)
						PrepaymentInBalance = true
						invoke ValidateMatchInvoiceBalance PayablesInvoice
							resume on error
								PrepaymentInBalance = false

						if (PrepaymentInBalance)
							invoke InvoiceUpdate PayablesInvoice


	   			Status	= Status.Closed

			Exit Rules
				if (PayablesInvoice.MatchStatus.POCostMessagesExist
				and !PayablesInvoice.OpenMatchInvoiceMessagesRel exists)
					invoke FastUpdate PayablesInvoice
						initialize invoked.MatchStatus
					invoke CheckAndCreateReconciliationQueueRecord PayablesInvoice

				if (PayablesInvoice.InvoiceType.MatchPrepayment)

					invoke CheckPrepaids PayablesInvoice


		ReleaseInvoiceMessage is an Instance Action
			valid when (AllowReleaseNonPOCostMessage)  
			completion message is "<CompletionMessage>"


			Local Fields
				LocalMatchedQuantity					is a Quantity
				LocalMessageType						is AlphaUpper size 2

				LocalReceiptUnitCost					is an InternationalCost

				LocalReceiptVendorPriceUOMQuantity		is a Quantity
				LocalReceiptMatchedQuantity				is a Quantity
				LocalChargebackAmount					is an InternationalAmount

			Action Rules
				BypassNegativeRateEdit = true
				CompletionMessage = ReleaseCompleteMessage



				initialize LocalChargebackHasError
				LocalCancelSequence = CancelSequence

				if (ApplicationAction.Approve)
					invoke FastUpdate PayablesInvoice
						invoked.ReasonCode				= ReasonCode
				else
				if  (ForwardToAuthorityCode entered
				or   ForwardToBuyer entered)
					invoke FastUpdate PayablesInvoiceDetail
						invoked.LastUpdateDate				= current timestamp
						invoked.LastUpdatedBy				= actor

					invoke Create MatchInvoiceMessage
						fill in fields from this instance
							except invoked.Status
							except invoked.AuthorityCode
							except invoked.BuyerOwner
							except invoked.ForwardToAuthorityCode
							except invoked.ForwardToBuyer
							except invoked.ApplicationAction

						invoked.Status						= 1
						invoked.AuthorityCode				= ForwardToAuthorityCode
						invoked.BuyerOwner					= ForwardToBuyer

						if  (ForwardToBuyer entered)
							invoked.AuthorityCodeEmailAddress	= ForwardToBuyer.EmailAddress
						else
							invoked.AuthorityCodeEmailAddress	= ForwardToAuthorityCode.EmailAddress

						if (HasComments)													
							invoked.CopyFromMessage		= this instance.MatchInvoiceMessage	


				if (ApplicationAction.Chargeback
				or  ApplicationAction.Approve)
					if (!OpenMessagesRel exists)
						include ProcessChargebackRules

				if (LocalChargebackHasError)
					Status = Status.PendingAction
				else
					Status	= Status.Closed

		Forward is an Instance Action
			valid when (MessageNotClosed) 
			Parameters 
				PrmForwardToAuthorityCode			is a PayablesAuthorityCode
				PrmForwardToBuyer					is a Buyer
				PrmComment 							is Text 
			Parameter Rules 
				PrmForwardToAuthorityCode
					constraint (PrmForwardToAuthorityCode.Active)
						"AuthorityCodeIsInactive"
					if (PrmForwardToAuthorityCode entered)
						constraint (PrmForwardToBuyer not entered)
							"CannotForwardToAuthorityCodeAndBuyerAtTheSameTime"
						constraint (PrmForwardToAuthorityCode.EmailAddress entered)
							"Forward_\ToActionRequiresAValidEmailAddress"

					if (PrmForwardToBuyer not entered) 
						required 
							"MustEnterEitherAuthorityCodeOrBuyer"

				PrmForwardToBuyer
					constraint (PrmForwardToBuyer.Active)
						"AuthorityCodeIsInactive"
					if (PrmForwardToBuyer entered)
						constraint (PrmForwardToAuthorityCode not entered)
							"CannotForwardToAuthorityCodeAndBuyerAtTheSameTime"
						constraint (PrmForwardToBuyer.EmailAddress entered)
							"Forward_\ToActionRequiresAValidEmailAddress"
 
					if (PrmForwardToAuthorityCode not entered) 
						required 
							"MustEnterEitherAuthorityCodeOrBuyer"

			Action Rules 
                AuthorityCode 							= PrmForwardToAuthorityCode
                BuyerOwner 								= PrmForwardToBuyer
				RespondDate								= current corporate date
				initialize AdjustedUnitCost

				if  (ForwardToBuyer entered)
					AuthorityCodeEmailAddress			= ForwardToBuyer.EmailAddress
				else
					AuthorityCodeEmailAddress			= ForwardToAuthorityCode.EmailAddress

				if  (PrmComment entered)
					invoke Create MatchInvoiceMessageComment 
						invoked.Company					= Company			
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.PurchaseOrder			= PurchaseOrder
						invoked.PurchaseOrderLine		= PurchaseOrderLine
						invoked.Contract				= Contract
						invoked.ContractLine			= ContractLine
						invoked.PayablesInvoiceDetail	= PayablesInvoiceDetail
						invoked.MatchInvoiceMessage		= MatchInvoiceMessage
						invoked.CommentTitle 			= MessageForwardedMsg 
						invoked.CommentText 			= PrmComment 	
						invoked.CommentType				= "M"		

				if (!PayablesInvoice.MatchProcessType.ServiceContract)	
					if (ForwardToAuthorityCode entered)	
						invoke TriggerPOCostServiceAuth	
					else
						invoke TriggerPOCostServiceBuyer

		UpdateSnapshotFields is an Instance Action
			restricted
			Action Rules
				Vendor				= PayablesInvoice.Vendor
				Invoice				= PayablesInvoice.Invoice
				Suffix				= PayablesInvoice.Suffix
				CancelSequence		= PayablesInvoice.CancelSequence
				DueDate				= PayablesInvoice.DueDate


		UpdateSnapshotFieldsSet is a Set Action			
			default label is untranslatable
			restricted
			Parameters
				PrmCompany		is a PayablesCompany
				PrmInvoice		is a PayablesInvoice
			Parameter Rules
				PrmCompany
				PrmInvoice

			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice	= PrmInvoice)

			Action Rules
				Instance Rules
					Vendor				= PrmInvoice.Vendor
					Invoice				= PrmInvoice.Invoice
					Suffix				= PrmInvoice.Suffix
					CancelSequence		= PrmInvoice.CancelSequence
					DueDate				= PayablesInvoice.DueDate
					
		PopulateDueDate is a Set Action			
			default label is untranslatable
			restricted
			Instance Selection
				where (DueDate not entered)
				
			Action Rules
				Instance Rules
					DueDate				= PayablesInvoice.DueDate

		PopulateCreateDate is a Set Action		
			default label is untranslatable
			restricted
			Instance Selection
				where (CreateDate not entered
				or 	   DateCreated not entered)
			Action Rules
				Instance Rules
					if (CreateDate not entered)
						CreateDate		= create date
					if (DateCreated not entered)
						DateCreated 	= DerivedCreateDate
					
        FastUpdate is an Update Action
        	restricted
        	bypass field rules

			Exit Rules
				if (ApplicationAction.ClosedBySystem 
				and Status.Closed 
				and PayablesInvoice.MatchStatus.POCostMessagesExist
				and !PayablesInvoice.OpenMatchInvoiceMessagesRel exists)
					invoke FastUpdate PayablesInvoice
						initialize invoked.MatchStatus
					invoke CheckAndCreateReconciliationQueueRecord PayablesInvoice

        Delete is a Delete Action
        	restricted
        	Entrance Rules
        	    if (ApplicationAction.AdjustCost
        	    and Status.Closed)
        	        invoke UpdateLastMatchUnitCost PurchaseOrderLine


		OverrideAuthorityCodeAndPriority is a Set Action

			completion message is "<LocalMatchInvoiceMessageRecordCounter>MatchInvoiceMessageRecordsUpdated"

			Parameters
				PrmCompany					is a PayablesCompany
					default label is "Company"					
				PrmPayablesInvoice			is a PayablesInvoice
					default label is "Invoice"					
				PrmOverrideAuthorityCode	is a PayablesAuthorityCode
					default label is "OverrideAuthorityCode"	
				PrmOverrideBuyer			is a Buyer
					default label is "OverrideBuyer"			
				PrmOverridePriority			is a Priority
					default label is "OverridePriority"			
			Parameter Rules
				PrmCompany
					required

				PrmPayablesInvoice
					required

				PrmOverrideAuthorityCode
					if (PrmOverrideBuyer entered)
						cannot be entered
							"CannotEnterBothAuthorityCodeAndBuyer"

					if (PrmOverrideAuthorityCode entered)
						constraint (PrmOverrideAuthorityCode.Active)
							"OverrideAuthorityCodeCannotBeInactive"

				PrmOverrideBuyer
					if (PrmOverrideAuthorityCode entered)
						cannot be entered
							"CannotEnterBothAuthorityCodeAndBuyer"

					if (PrmOverrideBuyer entered)
						constraint (PrmOverrideBuyer.Active)
							"OverrideAuthorityCodeCannotBeInactive"

				PrmOverridePriority
					if (PrmOverrideAuthorityCode not entered
					and PrmOverrideBuyer not entered)
						required
							"MustEnterEitherPriorityOrForwardTo"

			Local Fields
				LocalMatchInvoiceMessageRecordCounter		is Numeric size 6

			Instance Selection
				where (Company			= PrmCompany
				and    PayablesInvoice	= PrmPayablesInvoice
				and    !Status.Closed)

			Action Rules
				Set Rules
					Entrance Rules
						initialize LocalMatchInvoiceMessageRecordCounter

				Instance Rules
					if (PrmOverrideAuthorityCode entered)
						AuthorityCode							= PrmOverrideAuthorityCode
					else
					if (PrmOverrideBuyer entered)
						AuthorityCode							= PrmOverrideBuyer

					if (PrmOverridePriority entered)
						Priority								= PrmOverridePriority

					RespondDate									= current corporate date
					LocalMatchInvoiceMessageRecordCounter		+= 1

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Action Rules
				invoke Purge MatchInvoiceMessageComment set

		TriggerPOCostServiceBuyer is an Instance Action
			default label is untranslatable
	  	 	restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					trigger "POCostMessageService" PA service
						resume on error
						title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>PO:<PurchaseOrder>"
						Criteria
							Company.FinanceEnterpriseGroup
							Company

						Variables
							Company
								variable name is Company
							PurchaseOrder
								variable name is Purchaseorder
							Vendor
								variable name is Vendor
							Invoice
								variable name is Invoice
							ForwardToBuyer
								variable name is Buyer
							ForwardToBuyer.EmailAddress
								variable name is BuyerEmailAddress
							ForwardToBuyer.Employee.Name.GivenName
								variable name is BuyerLastName
							ForwardToBuyer.Employee.Name.FamilyName
								variable name is BuyerFirstName

		TriggerPOCostServiceAuth is an Instance Action
			default label is untranslatable
	  	 	restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					trigger "POCostMessageService" PA service
						resume on error
						title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>PO:<PurchaseOrder>"
						Criteria
							Company.FinanceEnterpriseGroup
							Company

						Variables
							Company
								variable name is Company
							PurchaseOrder
								variable name is Purchaseorder
							Vendor
								variable name is Vendor
							Invoice
								variable name is Invoice
							ForwardToAuthorityCode
								variable name is Buyer
							ForwardToAuthorityCode.EmailAddress
								variable name is BuyerEmailAddress
							ForwardToAuthorityCode
								variable name is BuyerLastName
							ForwardToAuthorityCode.Description
								variable name is BuyerFirstName
