ContractLineMember is a BusinessClass
	owned by po
	prefix is CNLM

	Ontology
		symbolic key is ContractLineMember

	Patterns
		implements StaticJava

	Persistent Fields
		MfgContractTierInfo
		ProcurementGroup			is like ProcurementGroup
		ItemNumber					is an Item
		VendorItem					is like VendorItem
		ContractLineMemberState		is Numeric size 2
			States
				Draft		value is 1
				Active		value is 2
				Amendment	value is 3
				Inactive	value is 4    
				Closed		value is 5
			disable Auditing 
		BaseCost					is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
		UOM 						is a UnitOfMeasureEdit
			disable Auditing 
		Priority                    is Numeric size 1
		CanUseForCostDefaulting     is Boolean
			disable Auditing  
		OnHold					    is Boolean
		CurrentNetCost				is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
			disable Auditing 
		TierMarkupDiscount			is Numeric size 1
			States
				Markup					value is 1
				Discount				value is 2
				Fixed					value is 3
 		FreightMarkupDiscount		is Numeric size 1
			States
				Markup					value is 1
				Discount				value is 2
 		LineTierPricingAmtPct
 		LineFreightPricingAmtPct
		DefaultBuyUnitCost			is Numeric size 18
			disable Auditing  
		Modified					is Boolean
		PriceFactor					is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
		FreightFactor				is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
		PricingIdentifier			is a ContractDistributorPricing
			disable Auditing 
		LineDistributorPricing
		LineDistributorFreightPricing
		NetCostOverride				is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
		PreviousCost                is an InternationalCost
			precision is ContractLine.DerivedNumberOfDecimalsCost
			disable Auditing 
		Vendor
			disable Auditing 
		MemberSeqNumber				  is Numeric size 6             
			disable Auditing 
		HoldManufacturerLineMemberOnly	  is Boolean
			disable Auditing  
		CreateDistributorLineMember	  is Boolean
			disable Auditing 
		PurchaseMethod
		ProcurementReasonCode
		Stockless                     is a snapshot of Contract.Stockless
			disable Auditing 
		ErrorsExist                   is a snapshot of ContractLine.ErrorsExist
			disable Auditing 
	Local Fields
   		MfgBaseCost					is an InternationalCost
   		RoundedValue
		UOMCalculation
		LocalItemNumber             is like Item
		LocalVendorItem             is like VendorItem
		DistMfgNetCost              is an InternationalCost
		LineActivated               is Boolean
		LocalCompany                is like Company
		LocalLocation               is like InventoryLocation
		LocalRequestingLocation     is like RequestingLocation
		LocalPricingGroup           is like PricingGroup
		LocalContractGroup          is like ContractGroup
		LocalContract               is like Contract
		LocalPreviousCost           is an InternationalCost 
		LocalTierModified			is Boolean

	Transient Fields
		TierEntered					is Boolean
		TierChanged					is Boolean
		PricingIdentifierEntered	is Boolean
		PricingIdentifierChanged	is Boolean
		ResettingModified			is Boolean
		UpdateOverrideNetCost		is Boolean
		BypassOverrideNetCost		is Boolean
		FromPoitemven 				is Boolean
		PassedRoundTo				is an InternationalCost
		RoundToPassed				is Boolean
		CalculatedDefaultBuyUOM	 	is an InternationalCost
		FromTierCost                is Boolean

	Derived Fields
		ConvertedFreightCost is a DerivedField
			type is like InternationalCost
			restricted
			if 	(LineFreightPricingAmtPct.FreightPercent > 0)
				if (IsManufacturerContract)
					if  (ContractLineTierCostExists)
						if 	(FreightMarkupDiscount.Discount)
				   			return ((ContractLineTierCostRel.TierCost * LineFreightPricingAmtPct.FreightPercent)* -1)
				   		else
				   			return (ContractLineTierCostRel.TierCost * LineFreightPricingAmtPct.FreightPercent)
					else
					if 	(FreightMarkupDiscount.Discount)
				   		return ((BaseCost * LineFreightPricingAmtPct.FreightPercent)* -1)
				   	else
				   		return (BaseCost * LineFreightPricingAmtPct.FreightPercent)
				else
				if 	(FreightMarkupDiscount.Discount)
			   		return ((MfgBaseCost * LineFreightPricingAmtPct.FreightPercent)* -1)
			   	else
			   		return (MfgBaseCost * LineFreightPricingAmtPct.FreightPercent)
			else
			if 	(FreightMarkupDiscount.Discount)
			   	return (LineFreightPricingAmtPct.FreightCost * -1)
			else
			   	return (LineFreightPricingAmtPct.FreightCost)

		ConvertedTierCost is a DerivedField
			type is like InternationalCost
			restricted
			if 	(LineTierPricingAmtPct.TierPercent > 0)
				if (IsManufacturerContract)
					if 	(TierMarkupDiscount.Discount)
				   		return ((BaseCost * LineTierPricingAmtPct.TierPercent)* -1)
				   	else          
				   	if (ContractLineTierCostExists)
				   		return (ContractLineTierCostRel.TierCost * LineTierPricingAmtPct.TierPercent)
				   	else
				   		return (BaseCost * LineTierPricingAmtPct.TierPercent)
				else
				if 	(TierMarkupDiscount.Discount)   
			   		return ((MfgBaseCost * LineTierPricingAmtPct.TierPercent)* -1)
			   	else
			   		return (MfgBaseCost * LineTierPricingAmtPct.TierPercent)
			else
			if 	(TierMarkupDiscount.Discount)
			   	return (LineTierPricingAmtPct.TierCost * -1)
			else
			   	return (LineTierPricingAmtPct.TierCost)

		MfgNetCost is a DerivedField
			type is like InternationalCost
			restricted
			if (ContractLineMember.ManufacturerContract = Contract)                          
				if (ContractLineTierCostExists
				and LineTierPricingAmtPct.TierPercent = 0)
					return (ContractLineTierCostRel.TierCost + RoundedFreightCost)
				else
					return (BaseCost + RoundedTierCost + RoundedFreightCost)
			else                                                                   
			if (MfgContractLineTierCostExists)
				return (MfgContractLineTierCostRel.TierCost + RoundedTierCost + RoundedFreightCost)
			else
				return (MfgBaseCost + RoundedTierCost + RoundedFreightCost)

		ConvertedDistributorFreightCost is a DerivedField
			type is like InternationalCost
			restricted
			if 	(LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent > 0)
				if 	(LineDistributorFreightPricing.FreightPricingMarkupDiscount.Discount)
			   		return ((DistMfgNetCost * LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent)* -1)
			   	else
			   		return (DistMfgNetCost * LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent)
			else
			if 	(LineDistributorFreightPricing.FreightPricingMarkupDiscount.Discount)
			   	return (LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost * -1)
			else
			   	return (LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost)

		ConvertedDistributorPricingCost is a DerivedField
			type is like InternationalCost
			restricted
			if 	(LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent > 0)
				if 	(LineDistributorPricing.PricingMarkupDiscount.Discount)
			   		return ((DistMfgNetCost * LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent)* -1)
			   	else
			   		return (DistMfgNetCost * LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent)
			else
			if 	(LineDistributorPricing.PricingMarkupDiscount.Discount)
			   	return (LineDistributorPricing.LineDistributorPricingAmtPct.PricingCost * -1)
			else
			   	return (LineDistributorPricing.LineDistributorPricingAmtPct.PricingCost)

		CompanyName is a StringField 
	 		type is like Name
			holds pii
	 		restricted
			ContractLineMember.Company.Name
		LocationName is a StringField 
	 		type is like Name
			holds pii
	 		restricted
			ContractLineMember.Location.Name
		RequestingLocationName is a StringField 
	 		type is like Name
			holds pii
	 		restricted
			ContractLineMember.RequestingLocation.Name

		NetCostOverrideForLowestDivisibleCost is a DerivedField 
			type is like UnitCost
				precision is ContractLine.DerivedNumberOfDecimalsCost
			if (ContractLine.UOMConversion = 1
			or  ContractLine.UOMConversion = 0)
				return NetCostOverride
			else
				return (NetCostOverride/ContractLine.UOMConversion)

		DerivedRoundTo is a DerivedField
			type is like InternationalCost
			restricted
			if (ContractLine.DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (ContractLine.DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return 0
		RoundedMfgNetCost is a DerivedField
			type is like InternationalCost
			restricted
			RoundedValue.RoundInput			= MfgNetCost
			RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
			if (RoundToPassed)
				RoundedValue.RoundTo		= PassedRoundTo
			else
				RoundedValue.RoundTo		= DerivedRoundTo
			RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
			return RoundedValue.RoundResult

		RoundedDistributorPricingCost is a DerivedField
			type is like InternationalCost
			restricted
			if (ConvertedDistributorPricingCost != 0)
				RoundedValue.RoundInput			= ConvertedDistributorPricingCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				if (RoundToPassed)
					RoundedValue.RoundTo		= PassedRoundTo
				else
					RoundedValue.RoundTo		= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		RoundedDistributorFreightCost is a DerivedField
			type is like InternationalCost
			restricted
			if (ConvertedDistributorFreightCost != 0)
				RoundedValue.RoundInput			= ConvertedDistributorFreightCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				if (RoundToPassed)
					RoundedValue.RoundTo		= PassedRoundTo
				else
					RoundedValue.RoundTo		= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		RoundedTierCost is a DerivedField
			type is like InternationalCost
			restricted
			if (ConvertedTierCost != 0)
				RoundedValue.RoundInput			= ConvertedTierCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				if (RoundToPassed)
					RoundedValue.RoundTo		= PassedRoundTo
				else
					RoundedValue.RoundTo		= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		RoundedFreightCost is a DerivedField
			type is like InternationalCost
			restricted
			if (ConvertedFreightCost != 0)
				RoundedValue.RoundInput			= ConvertedFreightCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				if (RoundToPassed)
					RoundedValue.RoundTo		= PassedRoundTo
				else
					RoundedValue.RoundTo		= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		NumberOfLineMemberQualifiers is a ComputeField
			type is Numeric size 4
			restricted
			(instance count of ContractLineTierMemberQual set)

		DerivedDefaultBuyUnitCost is a DerivedField
			type is like InternationalCost
			restricted

			initialize UOMCalculation
			UOMCalculation.InputUOM					= UOM.UnitOfMeasure
			UOMCalculation.InputToUOM				= ItemNumber.DefaultBuyUOM
			UOMCalculation.InputUnitCost			= NetCostOverride
			UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
			return UOMCalculation.OutputUnitCost

	Conditions
		CompanyEntered
			restricted
			when (ContractLineMember.Company entered)
		LocationEntered
			restricted
			when (ContractLineMember.Location entered)
		ReqLocEntered
			restricted
			when (ContractLineMember.RequestingLocation entered)

		DistributorContractExists
			restricted
			when (ManufacturerContractRel exists)

		HasPreviousCost
			restricted
			when (PreviousCost entered)
		
		PricingGroupEntered
			restricted
			when (ContractLineMember.PricingGroup entered)

		LocationInactive
			restricted
			when (LocationEntered
			and   !InventoryLocationRel.IsActive)

		RequestingLocationInactive
			restricted
			when (ReqLocEntered
			and   ContractLineMember.RequestingLocation.Active = false)
		CostSavingsExists
			restricted
			when (ContractCostSavingsRel exists)
		PricingGroupInactive
			restricted
			when (PricingGroupEntered
			and   ContractLineMember.PricingGroup.Active = false)

		IsDistributorContract
			restricted
			when (Contract.ManufacturerOrDistributor.DistributorContract)
		IsManufacturerContract
			restricted
			when (Contract.ManufacturerOrDistributor.ManufacturerContract)
		IsDistributorContractLineMember
			restricted
			when (Contract != ContractLineMember.ManufacturerContract)
		Defaulted
			restricted
			when (Modified = false)
		RecordModified
			restricted
			when (Modified)
		TierModified
			restricted
			when (TierMarkupDiscount changed
			or	  FreightMarkupDiscount changed
			or    LineTierPricingAmtPct.TierCost changed
			or    LineTierPricingAmtPct.TierPercent changed
			or	  LineFreightPricingAmtPct.FreightCost changed
			or	  LineFreightPricingAmtPct.FreightPercent changed)
		PricingModified
			restricted
			when (LineDistributorPricing.PricingMarkupDiscount changed
			or	  LineDistributorFreightPricing.FreightPricingMarkupDiscount changed
			or    LineDistributorPricing.LineDistributorPricingAmtPct.PricingCost changed
			or    LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent changed
			or	  LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost changed
			or	  LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent changed
			or    LocalTierModified)
		PricingChanged
			restricted
			when  ((TierModified
			and    MfgContractTierInfo.Tier = old MfgContractTierInfo.Tier)
			or	  (PricingModified
			and    PricingIdentifier = old PricingIdentifier))
		TierOrIdentifierChanged
			restricted
			when (MfgContractTierInfo.Tier changed
			or    PricingIdentifier changed)
		NoTierPricing
			restricted
			when (LineTierPricingAmtPct.TierPercent = 0
			and   LineTierPricingAmtPct.TierCost = 0)
		NoFreightPricing
			restricted
			when (LineFreightPricingAmtPct.FreightPercent = 0
			and   LineFreightPricingAmtPct.FreightCost = 0)
		TierMarkupDiscountRequired
			restricted
			when (TierMarkupDiscount.Markup
			or    TierMarkupDiscount.Discount)
		TierMarkupDiscountFixedRequired
			restricted
			when (TierMarkupDiscount.Markup
			or    TierMarkupDiscount.Discount
			or	  TierMarkupDiscount.Fixed)
		TierPricingRequired
			restricted
			when (LineTierPricingAmtPct.TierPercent > 0
			or    LineTierPricingAmtPct.TierCost > 0)
		FreightPricingRequired
			restricted
			when (LineFreightPricingAmtPct.FreightPercent > 0
			or    LineFreightPricingAmtPct.FreightCost > 0)
		FreightMarkupDiscountRequired
			restricted
			when (FreightMarkupDiscount.Markup
			or    FreightMarkupDiscount.Discount)
		AllowUpdates
			restricted
			when (ContractLine.CanAddLine
			and  !ContractLine.ContractLineState.Closed)
		CanHoldLineMember
			restricted
			when (ContractLine.HoldContractLineMemberAllowed
			and   !OnHold)
		CanRemoveHold
			restricted
			when (OnHold
			and   Contract.OnHold = false
			and   ContractLine.OnHold = false
			and   !Contract.ContractInactiveClosed
			and   !ContractLine.ContractLineState.Closed
			and   !HeldFromPurchaseMethod
			and   !HeldIndirectFromPurchaseMethod
			and   !HeldFromMfgHold)
		CanHoldManufacturerLine
			restricted
			when (ContractLine.HoldContractLineMemberAllowed
			and  !OnHold
			and  !HoldManufacturerLineMemberOnly
			and   IsManufacturerContract
			and   PurchaseMethodForDirectBuy)
		CanRemoveHoldManufacturerLine
			restricted
			when (HoldManufacturerLineMemberOnly
			and  !OnHold
			and  !ContractLine.HoldManufacturerLineOnly
			and  !Contract.ContractInactiveClosed
			and  !ContractLine.ContractLineState.Closed)
		ContractInterfaced
			restricted
			when (Contract.HasBeenActivated)
		DisplayResetModified
			restricted
			when (RecordModified and Contract.InProgress)
		DistributorFreightPricingExists
			restricted
			when (LineDistributorFreightPricing entered)
		TierFreightPricingExists
			restricted
			when (FreightMarkupDiscount entered
			or    LineFreightPricingAmtPct entered)
		FreightMarkupDiscountEntered
			restricted
			when (FreightMarkupDiscount entered)
		LineDistributorPricingEntered
			restricted
			when (LineDistributorPricing.PricingMarkupDiscount entered)
		ManufacturerLineMemberRelExists
			restricted
			when (ContractLine.ManufacturerContract != Contract
			and   ManufacturerLineMemberRel exists)
		HoldFromPurchaseMethod
			restricted
			when (!PurchaseMethodForDirectBuy
			and   ContractLine.IsManufacturerContract)
		HeldFromPurchaseMethod
			restricted
			when (!PurchaseMethodForDirectBuy
			and   ContractLine.IsManufacturerContract
			and   ContractLine.HasBeenActivated)  
		HeldIndirectFromPurchaseMethod
			restricted
			when( ManufacturerLineMemberRelExists
			and  !ManufacturerLineMemberRel.PurchaseMethodForDistBuy
			and   ContractLine.IsDistributorContract
			and   ContractLine.HasBeenActivated)    
		HeldFromMfgHold
			restricted
			when( ManufacturerLineMemberRelExists
			and   ManufacturerLineMemberRel.OnHold
			and   ContractLine.IsDistributorContract
			and   ManufacturerContractLineRel.VendorItem.Active)
		PurchaseMethodForDirectBuy
			restricted
			when (PurchaseMethod.FromManufacturer
			or    PurchaseMethod.FromManufacturerAndDistributor)
		PurchaseMethodForDistBuy
			restricted
			when (PurchaseMethod.FromDistributor
			or    PurchaseMethod.FromManufacturerAndDistributor)
		ShowUpdateCanUseForCostDefaulting
			restricted
			when (PurchaseMethodForDirectBuy
			and   CanUseForCostDefaulting = false)
		ShowTextCanUseForCostDefaulting
			restricted
			when (PurchaseMethodForDirectBuy
			and   CanUseForCostDefaulting = true)
		NoHoldOnLineMember
			restricted
			when (!OnHold
			and  !HoldManufacturerLineMemberOnly
			and  !HeldFromPurchaseMethod)
		HoldFromContract
			restricted
			when (Contract.OnHold)
		HoldFromContractLine
			restricted
			when (Contract.OnHold = false
			and  (ContractLine.OnHold
			or    ContractLine.HoldManufacturerLineOnly))
		HoldFromLineMember
			restricted
			when (ContractLine.OnHold = false
			and  !ContractLine.HoldManufacturerLineOnly
			and  !HeldFromPurchaseMethod
			and  (OnHold
			or    HoldManufacturerLineMemberOnly))
		PricingOnHold
			restricted
			when (Contract.OnHold = false
			and   ContractLine.OnHold = false
			and   OnHold
			and   HeldFromPurchaseMethod)
		DistMembersOnHold
			restricted
			when (DistributorLineMemberRel exists
			and   first DistributorLineMemberRel.OnHold)
		DistMembersNotOnHold
			restricted
			when (DistributorLineMemberRel exists
			and   first DistributorLineMemberRel.OnHold = false)
		DistributorMembersExist
			when (DistributorLineMemberRel exists)
		DistributorMembersWillBeCreated
			restricted
			when (!DistributorMembersExist
			and   CreateDistributorLineMember)
		PriceFactorEntered
			restricted
			when (PriceFactor entered)
		DistributorMembersWillNotBeCreated
			restricted
			when (!DistributorMembersExist
			and   !CreateDistributorLineMember)
		ContractLineTierCostExists
			restricted
			when (ContractLineTierCostRel exists)
		MfgContractLineTierCostExists
			restricted
			when (MfgContractLineTierCostRel exists)
		OpenState
			when (ContractLineMemberState.Active
			or    ContractLineMemberState.Amendment
			or    ContractLineMemberState.Draft)
		UseForCostDefaulting
			when ((ContractLineMemberState.Active
			or    ContractLineMemberState.Amendment)
			and   CanUseForCostDefaulting
			and   !HoldManufacturerLineMemberOnly
			and   !OnHold
			and   !ErrorsExist)
		LineHasModifications
			restricted
			when (DistributorModificationRel exists)
		SpecialItem
			restricted
			when (ItemNumber !exists)
		ItemExists
			restricted
			when (ItemNumber exists)
		UseCostDefaultingForSpecials
			restricted
			when (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
			or    Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
		FreightMarkupDiscountEnteredEdit
			restricted
			when (LineDistributorFreightPricing.FreightPricingMarkupDiscount.Markup
			or    LineDistributorFreightPricing.FreightPricingMarkupDiscount.Discount)
		FreightPricingEntered
			restricted
			when (LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent > 0
			or    LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost > 0)

 	Relations

		InventoryCompaniesInGroupRel
			one-to-many relation to InventoryCompany
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup

		ContractTierRel
			one-to-one relation to ContractTier
			Field Mapping uses symbolic key
		  		related.ContractGroup = ContractGroup
		   		related.Contract	  = MfgContractTierInfo.MfgContract
		   		related.ContractTier  = MfgContractTierInfo.Tier

		ContractTierQualifierRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
		  		related.ContractGroup = ContractGroup
		   		related.Contract	  = MfgContractTierInfo.MfgContract
		   		related.ContractTier  = MfgContractTierInfo.Tier

		ContractDistributorPricingRel
			one-to-one relation to ContractDistributorPricing
			Field Mapping uses symbolic key
		  		related.ContractGroup			   = ContractGroup
		   		related.Contract				   = Contract
		   		related.ContractDistributorPricing = PricingIdentifier

		MfgContractTierRel
			one-to-one relation to ContractTier
			Field Mapping uses symbolic key
		  		related.ContractGroup = ContractGroup
		   		related.Contract	  = MfgContractTierInfo.MfgContract
		   		related.ContractTier  = MfgContractTierInfo.Tier

		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company                                 = ContractLineMember.Company
				related.InventoryLocation                       = ContractLineMember.Location

		ContractLineTierCostRel
			one-to-one relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
		   		related.Contract	  = Contract
		   		related.ContractLine  = ContractLine
		   		related.ContractTier  = MfgContractTierInfo.Tier

		MfgContractLineTierCostRel
			one-to-one relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
		   		related.Contract	  = MfgContractTierInfo.MfgContract
		   		related.ContractLine  = ContractLine.ManufacturerContractLine
		   		related.ContractTier  = MfgContractTierInfo.Tier

		ContractLineTierCostMatchRel
			one-to-many relation to ContractLineTierCost
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
		   		related.Contract	  = Contract
		   		related.ContractLine  = ContractLine
		   	Instance Selection
		   		where (related.TierCost = BaseCost)

		TierMemberRel
			one-to-one relation to ContractTierMember
			Field Mapping uses symbolic key
		  		related.ContractGroup				  				= ContractGroup
		   		related.Contract					  				= Contract
		   		related.ContractTierMember.Company  				= ContractLineMember.Company
		   		related.ContractTierMember.Location 				= ContractLineMember.Location
		   		related.ContractTierMember.RequestingLocation	  	= ContractLineMember.RequestingLocation
		   		related.ContractTierMember.PricingGroup           	= ContractLineMember.PricingGroup

		LocalTierMemberRel
			one-to-one relation to ContractTierMember
			Field Mapping uses symbolic key
		  		related.ContractGroup				  				= LocalContractGroup
		   		related.Contract					  				= LocalContract
		   		related.ContractTierMember.Company  				= LocalCompany
		   		related.ContractTierMember.Location 				= LocalLocation
		   		related.ContractTierMember.RequestingLocation	  	= LocalRequestingLocation
		   		related.ContractTierMember.PricingGroup           	= LocalPricingGroup

   		MfgContractPartPivotRel
			one-to-one relation to MfgContractMemberPivot
			Field Mapping uses symbolic key
				related.ContractGroup 						   										= ContractGroup
				related.ManufacturerContractPivot 			   										= Contract
				related.MfgContractMemberPivot.ParticipantLocation.Company  					= ContractLineMember.Company
				related.MfgContractMemberPivot.ParticipantLocation.Location 					= ContractLineMember.Location
				related.MfgContractMemberPivot.ParticipantLocation.RequestingLocation	   		= ContractLineMember.RequestingLocation
				related.MfgContractMemberPivot.ParticipantLocation.PricingGroup                 = ContractLineMember.PricingGroup


		PricingIdMemberRel
			one-to-one relation to ContractDistributorPricingMember
			Field Mapping uses symbolic key
		  		related.ContractGroup								 			= ContractGroup
		   		related.Contract									 			= Contract
		   		related.ContractDistributorPricingMember.Company	 			= ContractLineMember.Company
		   		related.ContractDistributorPricingMember.Location	 			= ContractLineMember.Location
		   		related.ContractDistributorPricingMember.RequestingLocation		= ContractLineMember.RequestingLocation
		   		related.ContractDistributorPricingMember.PricingGroup           = ContractLineMember.PricingGroup
		   		related.ContractDistributorPricingMember.ManufacturerContract 	= ContractLineMember.ManufacturerContract

		MfgTierMemberRel
			one-to-one relation to ContractTierMember
			Field Mapping uses symbolic key
		  		related.ContractGroup				  				= ContractGroup
		   		related.Contract					  				= MfgContractTierInfo.MfgContract
		   		related.ContractTierMember.Company  				= ContractLineMember.Company
		   		related.ContractTierMember.Location 				= ContractLineMember.Location
		   		related.ContractTierMember.RequestingLocation	  	= ContractLineMember.RequestingLocation
		   		related.ContractTierMember.PricingGroup           	= ContractLineMember.PricingGroup

		TierQualifierRel
			one-to-many relation to ContractTierQualifier
			Field Mapping uses symbolic key
		  		related.ContractGroup = ContractGroup
		   		related.Contract	  = MfgContractTierInfo.MfgContract
		   		related.ContractTier  = MfgContractTierInfo.Tier

		PreferredContractRel
			one-to-one relation to ContractPreferredManufacturer
			Field Mapping uses ByPreferredContract
				related.ContractGroup 						      		= ContractGroup
				related.Contract							      		= Contract
				related.ContractPreferredManufacturer.ItemNumber  		= ItemNumber
				related.ContractPreferredManufacturer.VendorItem  		= VendorItem
				related.ContractPreferredManufacturer.InventoryCompany 	= ContractLineMember.Company
				related.ContractPreferredManufacturer.Location    		= ContractLineMember.Location
				related.ContractPreferredManufacturer.ReqLocation 		= ContractLineMember.RequestingLocation
				related.ContractPreferredManufacturer.PricingGroup 		= ContractLineMember.PricingGroup

		OldPreferredContractRel
			one-to-one relation to ContractPreferredManufacturer
			Field Mapping uses ByPreferredContract
				related.ContractGroup 						      		= ContractGroup
				related.Contract							      		= Contract
				related.ContractPreferredManufacturer.ItemNumber  		= LocalItemNumber
				related.ContractPreferredManufacturer.VendorItem  		= LocalVendorItem
				related.ContractPreferredManufacturer.InventoryCompany 	= ContractLineMember.Company
				related.ContractPreferredManufacturer.Location    		= ContractLineMember.Location
				related.ContractPreferredManufacturer.ReqLocation 		= ContractLineMember.RequestingLocation
				related.ContractPreferredManufacturer.PricingGroup 		= ContractLineMember.PricingGroup

		DistributorContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup            = ContractGroup
				related.ManufacturerContract     = Contract
				related.ManufacturerContractLine = ContractLine

		ManufacturerContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup            = ContractGroup
				related.Contract                 = MfgContractTierInfo.MfgContract
				related.ContractLine             = ContractLine.ManufacturerContractLine

		DistributorModificationRel
			one-to-one relation to ContractLine
			Field Mapping uses ByDistributorModification
				related.ContractGroup			 = ContractGroup
				related.Contract				 = MfgContractTierInfo.MfgContract
				related.DistributorModifications = 1
				related.ContractLine             = ContractLine.ManufacturerContractLine

		ManufacturerLineMemberRel
			one-to-one relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup            = ContractGroup
				related.Contract                 = MfgContractTierInfo.MfgContract
				related.ContractLine             = ContractLine.ManufacturerContractLine
				related.ContractLineMember       = ContractLineMember

		DistributorLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses ByDistContract
				related.ContractGroup 							= ContractGroup
				related.ContractLineMember.ManufacturerContract	= Contract
				related.ItemNumber								= ItemNumber
				related.ContractLineMember.Company 				= ContractLineMember.Company
				related.ContractLineMember.Location 			= ContractLineMember.Location
				related.ContractLineMember.RequestingLocation 	= ContractLineMember.RequestingLocation
				related.ContractLineMember.PricingGroup 		= ContractLineMember.PricingGroup
			Instance Selection
				where (related.IsDistributorContractLineMember)

		CreateDistributorLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup            = ContractGroup
				related.Contract                 = Contract
				related.ContractLine             = ContractLine
			Instance Selection
				where (related.CreateDistributorLineMember)

		CanUseForCostDefaultingLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup            = ContractGroup
				related.Contract                 = Contract
				related.ContractLine             = ContractLine
			Instance Selection
				where (related.CanUseForCostDefaulting)

		DifferentTierLineMemberRel 
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup            = ContractGroup
				related.Contract                 = Contract
				related.ContractLine             = ContractLine
			Instance Selection
				where (related.UniqueID					!= UniqueID
				and    related.MfgContractTierInfo.Tier != MfgContractTierInfo.Tier)		
		DifferentPreferredContractRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByItem
				related.ContractGroup             					   = ContractGroup
				related.ContractPreferredManufacturer.ItemNumber       = ItemNumber
				related.ContractPreferredManufacturer.InventoryCompany = ContractLineMember.Company
				related.ContractPreferredManufacturer.Location         = ContractLineMember.Location
				related.ContractPreferredManufacturer.ReqLocation      = ContractLineMember.RequestingLocation
				related.ContractPreferredManufacturer.PricingGroup     = ContractLineMember.PricingGroup

		ContractCostSavingsRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = LocalContract
			Instance Selection
				where (related.ProcessingType = 5)	

		ContractGroupEmailTemplate2Rel
			one-to-one relation to ContractGroupEmailTemplate2
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup

		DifferentNewPreferredContractRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByItem
				related.ContractGroup             					   = ContractGroup
				related.ContractPreferredManufacturer.ItemNumber       = ItemNumber
				related.ContractPreferredManufacturer.InventoryCompany = LocalCompany
				related.ContractPreferredManufacturer.Location         = LocalLocation
				related.ContractPreferredManufacturer.ReqLocation      = LocalRequestingLocation
				related.ContractPreferredManufacturer.PricingGroup     = LocalPricingGroup

		ManufacturerContractRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses ByMfgNbr
				related.ContractGroup                                  = ContractGroup
				related.ManufacturerContractNumber                     = Contract

	Sets

		ByCostDefaultingItem
			indexed
			Sort Order
				ProcurementGroup
				ItemNumber
				Priority
				DefaultBuyUnitCost
				ContractGroup
				Contract
				ContractLine
				ContractLineMember.Company
				ContractLineMember.Location
				ContractLineMember.RequestingLocation
				ContractLineMember.PricingGroup
				ContractLineMember.ManufacturerContract
			Instance Selection
				where (UseForCostDefaulting)

		ByCostDefaultingVendorItem
			indexed
			Sort Order
				ProcurementGroup
				VendorItem
				Priority
				DefaultBuyUnitCost
				ContractGroup
				Contract
				ContractLine
				ContractLineMember.Company
				ContractLineMember.Location
				ContractLineMember.RequestingLocation
				ContractLineMember.PricingGroup
				ContractLineMember.ManufacturerContract
			Instance Selection
				where (UseForCostDefaulting)

		ByAvailableItem
 		 	indexed
 		 	Sort Order
 		 		ProcurementGroup
				ItemNumber
				Priority
				DefaultBuyUnitCost
				ContractLineMember.Company
				ContractLineMember.Location
				ContractLineMember.RequestingLocation
				ContractLineMember.PricingGroup
				ContractGroup
				Contract
				ContractLine
				ContractLineMember.ManufacturerContract
			Instance Selection
 				where (UseForCostDefaulting)

		BySeqNumber
			Sort Order
	  			ContractGroup
				Contract
				MfgContractTierInfo.MfgContract
				ItemNumber
				VendorItem
				UOM
				MemberSeqNumber

 	  	ByContract
			duplicates
			Sort Order
	  			ContractGroup
			   	Contract
				Modified

   		ByDistContract
	   		duplicates
	   		Sort Order
	   			ContractGroup
	   			ContractLineMember.ManufacturerContract
	   			ItemNumber
				ContractLineMember.Company
				ContractLineMember.Location
				ContractLineMember.RequestingLocation
				ContractLineMember.PricingGroup

	Field Rules

		Priority
			default to ContractLine.Priority

		MfgContractTierInfo
			if (MfgContractTierInfo.Tier entered)
				TierEntered = true
			else
				if (IsManufacturerContract)
					MfgContractTierInfo.Tier = TierMemberRel.MemberToTierRel.ContractTier
				else
 					MfgContractTierInfo.Tier = MfgTierMemberRel.MemberToTierRel.ContractTier

			if (IsManufacturerContract)
				if (MfgContractTierInfo.Tier !entered)
					required
						"TierIsRequiredForManufacturerContracts"

		TierMarkupDiscount
			if (TierMarkupDiscount !entered)
				if (IsManufacturerContract)
					if (TierEntered)
						TierMarkupDiscount = ContractTierRel.TierMarkupDiscount
					else
					if (TierMemberRel.Tier entered)
						TierMarkupDiscount = TierMemberRel.MemberToTierRel.TierMarkupDiscount
					else
						TierMarkupDiscount = TierMarkupDiscount.Fixed
				else
 					TierMarkupDiscount = MfgTierMemberRel.MemberToTierRel.TierMarkupDiscount

			if (IsManufacturerContract)
				constraint (TierMarkupDiscountFixedRequired)
					"TierMarkupDiscountOrFixedIsRequired"

		LineTierPricingAmtPct
			if (LineTierPricingAmtPct !entered
			and !TierMarkupDiscount.Fixed)
				if (IsManufacturerContract)
					if (TierEntered)
						LineTierPricingAmtPct = ContractTierRel.TierPricingAmtPct
					else
						LineTierPricingAmtPct = TierMemberRel.MemberToTierRel.TierPricingAmtPct
				else
					if (TierEntered)
						LineTierPricingAmtPct = MfgContractTierRel.TierPricingAmtPct
					else
						LineTierPricingAmtPct = MfgTierMemberRel.MemberToTierRel.TierPricingAmtPct

			if (LineTierPricingAmtPct !entered
			and !TierMarkupDiscount.Fixed)
				if (IsManufacturerContract)
					constraint (TierPricingRequired)
						"TierCostOrPercentIsRequired"

		FreightMarkupDiscount
			if (FreightMarkupDiscount !entered)
				if (IsManufacturerContract)
					if (TierEntered)
						FreightMarkupDiscount = ContractTierRel.FreightMarkupDiscount
					else
						FreightMarkupDiscount = TierMemberRel.MemberToTierRel.FreightMarkupDiscount
				else
					if (TierEntered)
						FreightMarkupDiscount = MfgContractTierRel.FreightMarkupDiscount
					else
						FreightMarkupDiscount = MfgTierMemberRel.MemberToTierRel.FreightMarkupDiscount

		LineFreightPricingAmtPct
			if (LineFreightPricingAmtPct !entered)
				if (IsManufacturerContract)
					if (TierEntered)
						LineFreightPricingAmtPct = ContractTierRel.FreightPricingAmtPct
					else
						LineFreightPricingAmtPct = TierMemberRel.MemberToTierRel.FreightPricingAmtPct
				else
					if (TierEntered)
						LineFreightPricingAmtPct = MfgContractTierRel.FreightPricingAmtPct
					else
						LineFreightPricingAmtPct = MfgTierMemberRel.MemberToTierRel.FreightPricingAmtPct

		PricingIdentifier
			if (PricingIdentifier entered)
				PricingIdentifierEntered = true
			else
				if (IsDistributorContract)
					PricingIdentifier = PricingIdMemberRel.MemberToPricingRel.ContractDistributorPricing

			if (IsDistributorContract)
				if (PricingIdentifier !entered)
					required
						"PricingIdentifierIsRequiredForDistributorContract"

		LineDistributorPricing
			if (LineDistributorPricing.PricingMarkupDiscount !entered)
				if (IsDistributorContract)
					if (PricingIdentifierEntered)
						LineDistributorPricing.PricingMarkupDiscount = ContractDistributorPricingRel.DistributorPricing.PricingMarkupDiscount
					else
						LineDistributorPricing.PricingMarkupDiscount = PricingIdMemberRel.MemberToPricingRel.DistributorPricing.PricingMarkupDiscount

			if (LineDistributorPricing.LineDistributorPricingAmtPct !entered)
				if (IsDistributorContract)
					if (PricingIdentifierEntered)
						LineDistributorPricing.LineDistributorPricingAmtPct = ContractDistributorPricingRel.DistributorPricing.DistributorPricingAmtPct
					else
						LineDistributorPricing.LineDistributorPricingAmtPct = PricingIdMemberRel.MemberToPricingRel.DistributorPricing.DistributorPricingAmtPct

			if (LineDistributorPricing.LineDistributorPricingAmtPct !entered)
				if (IsDistributorContract)
					required
						"DistributorPricingAmountOrPercentIsRequired"

		LineDistributorFreightPricing

			if (FreightMarkupDiscountEnteredEdit)
				constraint (FreightPricingEntered)
					"FreightCostOrPercentIsRequired"

			if (LineDistributorFreightPricing.FreightPricingMarkupDiscount !entered)
				if (IsDistributorContract)
					if (PricingIdentifierEntered)
						LineDistributorFreightPricing.FreightPricingMarkupDiscount = ContractDistributorPricingRel.DistributorFreightPricing.FreightPricingMarkupDiscount
					else
						LineDistributorFreightPricing.FreightPricingMarkupDiscount = PricingIdMemberRel.MemberToPricingRel.DistributorFreightPricing.FreightPricingMarkupDiscount

			if (LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct !entered)
				if (IsDistributorContract)
					if (TierEntered)
						LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct = ContractDistributorPricingRel.DistributorFreightPricing.DistributorFreightPricingAmtPct
					else
						LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct = PricingIdMemberRel.MemberToPricingRel.DistributorFreightPricing.DistributorFreightPricingAmtPct

		ProcurementGroup
			ProcurementGroup = ContractGroup

		Vendor
			Vendor = Contract.Vendor

		MemberSeqNumber
			autosequence using BySeqNumber
				minimize contention

		NetCostOverride
			if (NetCostOverride changed)
				PreviousCost = old NetCostOverride
		
		FromPoitemven
			default to false

	Rule Blocks

   		CreateOrUpdatePreferredContract

			if (!LineActivated
			or (LineActivated
			and PreferredContractRel !exists))
				if (OldPreferredContractRel exists)

					invoke Delete OldPreferredContractRel

				if (DifferentPreferredContractRel exists)
					if (first DifferentPreferredContractRel.Contract != Contract)
						invoke Delete first DifferentPreferredContractRel

						invoke Create ContractPreferredManufacturer
							invoked.ContractGroup = ContractGroup
							invoked.ContractPreferredManufacturer.ItemNumber 		= ItemNumber
							invoked.ContractPreferredManufacturer.VendorItem 		= VendorItem
							invoked.ContractPreferredManufacturer.InventoryCompany 	= ContractLineMember.Company
							invoked.ContractPreferredManufacturer.Location    	   	= ContractLineMember.Location
							invoked.ContractPreferredManufacturer.ReqLocation 		= ContractLineMember.RequestingLocation
							invoked.ContractPreferredManufacturer.PricingGroup 		= ContractLineMember.PricingGroup
							invoked.Contract                                   		= Contract
							invoked.Vendor                                          = Contract.Vendor
				else
					invoke Create ContractPreferredManufacturer
						invoked.ContractGroup = ContractGroup
						invoked.ContractPreferredManufacturer.ItemNumber 		= ItemNumber
						invoked.ContractPreferredManufacturer.VendorItem 		= VendorItem
						invoked.ContractPreferredManufacturer.InventoryCompany 	= ContractLineMember.Company
						invoked.ContractPreferredManufacturer.Location    	   	= ContractLineMember.Location
						invoked.ContractPreferredManufacturer.ReqLocation 		= ContractLineMember.RequestingLocation
						invoked.ContractPreferredManufacturer.PricingGroup 		= ContractLineMember.PricingGroup
						invoked.Contract                                   		= Contract
						invoked.Vendor                                          = Contract.Vendor

		UpdateEditsAndUpdates
			if (TierMarkupDiscount.Discount)
				constraint (LineTierPricingAmtPct.TierCost <= ContractLine.BaseCost)
					"DiscountAmountCannotBeGreaterThanBaseCost"
			if (FreightMarkupDiscount.Discount)
				constraint (LineFreightPricingAmtPct.FreightCost <= ContractLine.BaseCost)
					"DiscountAmountCannotBeGreaterThanBaseCost"
			if (IsManufacturerContract)
				constraint (TierMemberRel exists)
					"MemberDoesNotExistForThisContract"
				constraint (MfgNetCost >= 0)
					"NetCostMustBeGreaterThanOrEqualToZero"
			else
				if (IsDistributorContract)
					constraint (MfgNetCost + ConvertedDistributorPricingCost + ConvertedDistributorFreightCost >= 0)
						"NetCostMustBeGreaterThanOrEqualToZero"
					if (MfgContractTierInfo.MfgContract entered
					and MfgContractTierInfo.Tier entered)
						constraint (MfgTierMemberRel exists)
							"MemberDoesNotExistForThisContract"

			if (LineFreightPricingAmtPct !entered)
				if (FreightMarkupDiscount.Markup
				or  FreightMarkupDiscount.Discount)
					if (IsManufacturerContract)
						constraint (FreightPricingRequired)
							"FreightCostOrPercentIsRequired"

			if (LineFreightPricingAmtPct entered)
				if (IsManufacturerContract)
					constraint (FreightMarkupDiscountRequired)
						"FreightMarkupOrDiscountRequiredWhenCostOrPercentIsEntered"

			if (TierMarkupDiscount.Fixed)
				constraint (NoTierPricing)
					"CannotEnterAmountOrPercentWhenFixedIsSelected"

			if (PricingIdentifier changed
			and old PricingIdentifier != blank)
				PricingIdentifierChanged = true

			if (PricingIdentifierChanged)
				if (IsDistributorContract)
					LineDistributorFreightPricing.FreightPricingMarkupDiscount = ContractDistributorPricingRel.DistributorFreightPricing.FreightPricingMarkupDiscount
					LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct = ContractDistributorPricingRel.DistributorFreightPricing.DistributorFreightPricingAmtPct
					LineDistributorPricing.PricingMarkupDiscount = ContractDistributorPricingRel.DistributorPricing.PricingMarkupDiscount
					LineDistributorPricing.LineDistributorPricingAmtPct = ContractDistributorPricingRel.DistributorPricing.DistributorPricingAmtPct

			if (MfgContractTierInfo.Tier changed
			and old MfgContractTierInfo.Tier != blank)
				TierChanged = true

			if (TierChanged
			or  ResettingModified)
				if (IsManufacturerContract)
					TierMarkupDiscount = ContractTierRel.TierMarkupDiscount
				else
 					TierMarkupDiscount = MfgContractTierRel.TierMarkupDiscount

			if (TierChanged
			or  ResettingModified)
				if (IsManufacturerContract)
					LineTierPricingAmtPct = ContractTierRel.TierPricingAmtPct
				else
 					LineTierPricingAmtPct = MfgContractTierRel.TierPricingAmtPct

			if (TierChanged
			or  ResettingModified)
				if (IsManufacturerContract)
					FreightMarkupDiscount = ContractTierRel.FreightMarkupDiscount
				else
					FreightMarkupDiscount = MfgContractTierRel.FreightMarkupDiscount

			if (TierChanged
			or  ResettingModified)
				if (IsManufacturerContract)
					LineFreightPricingAmtPct = ContractTierRel.FreightPricingAmtPct
				else
					LineFreightPricingAmtPct = MfgContractTierRel.FreightPricingAmtPct

			if (PurchaseMethod changed)
				if (PurchaseMethod.FromDistributor)
					CreateDistributorLineMember = true
					CanUseForCostDefaulting     = false

					for each DistributorLineMemberRel
						invoke RemoveHoldLineMember each

				if (PurchaseMethod.FromManufacturer)
					if (ItemExists
					or (!ItemExists
					and UseCostDefaultingForSpecials))
						CanUseForCostDefaulting = true
					else
						CanUseForCostDefaulting = false

					if (!DistributorLineMemberRel exists)
						CreateDistributorLineMember = false
					else
						for each DistributorLineMemberRel
							invoke HoldLineMember each

				if (PurchaseMethod.FromManufacturerAndDistributor)
					if (ItemExists
					or (!ItemExists
					and UseCostDefaultingForSpecials))
						CanUseForCostDefaulting = true
					else
						CanUseForCostDefaulting = false
					CreateDistributorLineMember = true
					if (ContractLine.HasBeenActivated)
						if (OnHold = true)
							OnHold = false

					for each DistributorLineMemberRel
						invoke RemoveHoldLineMember each

				if (PurchaseMethod.NotFromManufacturerOrDistributor)
					if (ContractLine.HasBeenActivated)
						if (OnHold = false)
							OnHold = true
					CanUseForCostDefaulting     = false
					if (!DistributorLineMemberRel exists)
						CreateDistributorLineMember = false
					else
						for each DistributorLineMemberRel
							invoke HoldLineMember each

			if (ResettingModified)
				if (IsDistributorContract)
					LineDistributorPricing.PricingMarkupDiscount = ContractDistributorPricingRel.DistributorPricing.PricingMarkupDiscount
					LineDistributorPricing.LineDistributorPricingAmtPct = ContractDistributorPricingRel.DistributorPricing.DistributorPricingAmtPct

			if (ResettingModified)
				if (IsDistributorContract)
					LineDistributorFreightPricing.FreightPricingMarkupDiscount = ContractDistributorPricingRel.DistributorFreightPricing.FreightPricingMarkupDiscount
					LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct = ContractDistributorPricingRel.DistributorFreightPricing.DistributorFreightPricingAmtPct

		UpdateExitRules
		
			if (LocalPreviousCost != NetCostOverride)
				PreviousCost = LocalPreviousCost

			if (Contract.IsManufacturerContract
			and DifferentTierLineMemberRel !exists
			and ContractLineTierCostExists)
				invoke FastUpdate ContractLine 
					invoked.BaseCost 					= ContractLineTierCostRel.TierCost 
					invoked.TransientLineMemberUpdate	= true


	Actions

		CreateContractLineMember is a Create Action
			restricted

			Exit Rules
				if (ContractLine.ItemType.Itemmast)
					if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
						DefaultBuyUnitCost = NetCostOverride * 100000
					else
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					DefaultBuyUnitCost = NetCostOverride * 100000

		CreateDefault is a Create Action
			restricted
			Entrance Rules
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine

			Action Rules
				if (TierMarkupDiscount.Discount)
					constraint (LineTierPricingAmtPct.TierCost <= ContractLine.BaseCost)
						"DiscountAmountCannotBeGreaterThanBaseCost"
				if (FreightMarkupDiscount.Discount)
					constraint (LineFreightPricingAmtPct.FreightCost <= ContractLine.BaseCost)
						"DiscountAmountCannotBeGreaterThanBaseCost"
				if (IsManufacturerContract)
					constraint (TierMemberRel exists)
						"MemberDoesNotExistForThisContract"
	 				if (MfgContractTierInfo.Tier entered)
						constraint (ContractTierRel exists)
							"ContractTierDoesNotExist"
					constraint (MfgNetCost >= 0)
						"NetCostMustBeGreaterThanOrEqualToZero"
				else
					if (IsDistributorContract)
						constraint (MfgNetCost + ConvertedDistributorPricingCost + ConvertedDistributorFreightCost >= 0)
							"NetCostMustBeGreaterThanOrEqualToZero"

				if (LineFreightPricingAmtPct !entered)
					if (FreightMarkupDiscount.Markup
					or 	FreightMarkupDiscount.Discount)
						if (IsManufacturerContract)
							constraint (FreightPricingRequired)
								"FreightCostOrPercentIsRequired"

				if (LineFreightPricingAmtPct entered)
					if (IsManufacturerContract)
						constraint (FreightMarkupDiscountRequired)
							"FreightMarkupOrDiscountRequiredWhenCostOrPercentIsEntered"

				if (TierMarkupDiscount.Fixed)
					constraint (NoTierPricing)
						"CannotEnterAmountOrPercentWhenFixedIsSelected"

				MfgBaseCost 	= ContractLine.MfgContractLineRel.BaseCost
				if (ContractLine.ManufacturerContract != Contract)
					DistMfgNetCost = ManufacturerLineMemberRel.NetCostOverride
				else
					DistMfgNetCost = ContractLine.BaseCost

				if (IsManufacturerContract)
					PriceFactor 	= RoundedTierCost
					FreightFactor 	= RoundedFreightCost
					CurrentNetCost 	= RoundedMfgNetCost
				else
					if (IsDistributorContract)

						if (!ContractLine.DistributorFixedCost)

							PriceFactor   	= RoundedDistributorPricingCost
							FreightFactor 	= RoundedDistributorFreightCost
							CurrentNetCost 	= DistMfgNetCost + RoundedDistributorPricingCost + RoundedDistributorFreightCost
							if (ContractLine.ManufacturerContract != Contract)
								BaseCost    = DistMfgNetCost
						else
							CurrentNetCost  = DistMfgNetCost

				if (NetCostOverride = 0)
					NetCostOverride 		= CurrentNetCost

			Exit Rules
				if (ContractLine.ItemType.Itemmast)
					if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
						DefaultBuyUnitCost = NetCostOverride * 100000
					else
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					DefaultBuyUnitCost = NetCostOverride * 100000

		UpdateContractLineMember is an Update Action
			restricted
			bypass field rules
			Action Rules
			
				LocalPreviousCost = NetCostOverride
				if (UOM changed)
					if (ContractLine.ItemType.Itemmast)
						if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
							DefaultBuyUnitCost = NetCostOverride * 100000
						else
							DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
					else
						DefaultBuyUnitCost = NetCostOverride * 100000

				if (ContractLineMemberState.Active
				and Contract.SetActiveLineToAmendment)
					ContractLineMemberState = ContractLineMemberState.Amendment
				include UpdateExitRules

		Update is an Update Action
			valid when (AllowUpdates)
			Field Rules
				ContractLineMemberState
					if (ContractLineMemberState.Active
					and Contract.SetActiveLineToAmendment)
						ContractLineMemberState = ContractLineMemberState.Amendment

				NetCostOverride
					if (ContractLine.ItemType.Itemmast)
						constraint (NetCostOverride decimals <= ItemNumber.NumberOfDecimalsCost)
	 						"TooManyDecimalDigitsEnteredForUnitCost;MaxIs<ItemNumber.NumberOfDecimalsCost>"
		 			else
	 					constraint (NetCostOverride decimals <= ContractLine.DerivedNumberOfDecimalsCost)
	 						"TooManyDecimalDigitsEnteredForUnitCost;MaxIs<ContractLine.DerivedNumberOfDecimalsCost>"
			Action Rules

				LocalPreviousCost = NetCostOverride
				include UpdateEditsAndUpdates

				Modified = true

				if (PurchaseMethod changed)
					constraint (!PurchaseMethod = blank)
						"CannotChangePurchaseMethodToBlank"

					if (PurchaseMethodForDirectBuy)
						constraint (Contract.HasAPurchaseType)
							"ManufacturerContractWillNotBeUsedForCostDefaulting;PurchaseMethodCannotBeTypeThatWillBeUsedForCostDefaultingForManufacturerContract"



				if	(PricingChanged
				or	 TierOrIdentifierChanged)
					if (TierChanged
					and MfgContractTierInfo.Tier entered)
						constraint (ContractTierRel exists)
							"ContractTierDoesNotExist"
						if (!Contract.HasGPOSupplier)
							constraint (TierQualifierRel exists)
								"ContractTierInvalid;TierQualifiersDoNotExist"
					if (PricingIdentifierChanged
					and PricingIdentifier entered)
						constraint (ContractDistributorPricingRel exists)
							"ContractDistributorPricingIdentifierDoesNotExist"

					MfgBaseCost = ContractLine.MfgContractLineRel.BaseCost

					if (ContractLine.ManufacturerContract != Contract)
						DistMfgNetCost = ManufacturerLineMemberRel.NetCostOverride
					else
						DistMfgNetCost = ContractLine.BaseCost






					if (IsManufacturerContract)
						PriceFactor 		= RoundedTierCost
						FreightFactor 		= RoundedFreightCost
						CurrentNetCost 		= RoundedMfgNetCost
					else
					if (IsDistributorContract)
						if (!ContractLine.DistributorFixedCost)

							PriceFactor   	= RoundedDistributorPricingCost
							FreightFactor 	= RoundedDistributorFreightCost
							CurrentNetCost 	= DistMfgNetCost + RoundedDistributorPricingCost + RoundedDistributorFreightCost
							if (ContractLine.ManufacturerContract != Contract)
								BaseCost    = DistMfgNetCost
						else
							CurrentNetCost  = DistMfgNetCost

				if ((NetCostOverride = 0)
				or	(old NetCostOverride = old CurrentNetCost
				and	 !NetCostOverride changed))
					NetCostOverride = CurrentNetCost

				if (TierChanged
				or  NetCostOverride changed)
					if (IsManufacturerContract)

						if (DistributorContractLineRel exists)
							invoke FastUpdateWithoutEdits ContractLine
								invoked.ManufacturerLineMemberModified = true

			Exit Rules
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine

				if (CreateDistributorLineMember changed
				and CreateDistributorLineMember)
					if (!ContractLine.CreateDistributorContractLine)
						invoke FastUpdateWithoutEdits ContractLine
							invoked.UpdateCreateDistributorContractLineTrue = true
					if (!MfgContractPartPivotRel.DistributorMembers)
						invoke Update MfgContractPartPivotRel
							invoked.AvailableForDistribution = true

				if  (CreateDistributorLineMember changed
				and !CreateDistributorLineMember)
					if (!CreateDistributorLineMemberRel exists)
						invoke FastUpdateWithoutEdits ContractLine
							invoked.UpdateCreateDistributorContractLineFalse = true

					if (!MfgContractPartPivotRel.ContractLineMemberDistributorRel exists)
						invoke Update MfgContractPartPivotRel
							invoked.AvailableForDistribution = false

				if (CanUseForCostDefaulting changed
				and CanUseForCostDefaulting = false)
					if (!CanUseForCostDefaultingLineMemberRel exists)
						if (ContractLine.CanUseForCostDefaulting = true)
							invoke FastUpdateWithoutEdits ContractLine
								invoked.UpdateCanUseForCostDefaultingFalse = true

				if (CanUseForCostDefaulting changed
				and CanUseForCostDefaulting = true)
					if (ContractLine.CanUseForCostDefaulting = false)  
						invoke FastUpdateWithoutEdits ContractLine     
							invoked.UpdateCanUseForCostDefaultingTrue = true

				if (ContractLine.ItemType.Itemmast)
					if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
						DefaultBuyUnitCost = NetCostOverride * 100000
					else
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					DefaultBuyUnitCost = NetCostOverride * 100000

		PurgeDeletedLineMembers is a Set Action
			restricted	
			Instance Selection
				include only deleted records
			Action Rules
				Instance Rules
					invoke Purge			

		UpdateDefault is an Update Action
			restricted
			Field Rules
				ContractLineMemberState
					if (ContractLineMemberState.Active
					and Contract.SetActiveLineToAmendment)
						ContractLineMemberState = ContractLineMemberState.Amendment

			Action Rules

				LocalPreviousCost = NetCostOverride
				if (IsManufacturerContract
				and TierMemberRel.Tier = blank
				and ContractLine.TierCostCountNumeric > 1
				and ContractLineTierCostMatchRel exists)   

					MfgContractTierInfo.Tier = ContractLineTierCostMatchRel.ContractTier

				include UpdateEditsAndUpdates

				if	(PricingChanged
				or	 TierOrIdentifierChanged
				or   ResettingModified
				or   BaseCost changed
				or   FromTierCost)
					if (!ResettingModified)
						if (TierChanged)
							constraint (ContractTierRel exists)
								"ContractTierDoesNotExist"
							if (!ContractGroup.GPOIsUsed)
								constraint (TierQualifierRel exists)
									"ContractTierInvalid;TierQualifiersDoNotExist"
						if (PricingIdentifierChanged)
							constraint (ContractDistributorPricingRel exists)
								"ContractDistributorPricingIdentifierDoesNotExist"

					MfgBaseCost     = ContractLine.MfgContractLineRel.BaseCost

					if (ContractLine.ManufacturerContract != Contract)
						DistMfgNetCost = ManufacturerLineMemberRel.NetCostOverride
					else
						DistMfgNetCost = ContractLine.BaseCost

					if (IsManufacturerContract)
						PriceFactor 		= RoundedTierCost
						FreightFactor 		= RoundedFreightCost
						CurrentNetCost 		= RoundedMfgNetCost
					else
					if (IsDistributorContract)

						if (!ContractLine.DistributorFixedCost)

							PriceFactor   	= RoundedDistributorPricingCost
							FreightFactor 	= RoundedDistributorFreightCost
							CurrentNetCost 	= DistMfgNetCost + RoundedDistributorPricingCost + RoundedDistributorFreightCost
							if (ContractLine.ManufacturerContract != Contract)
								BaseCost    = DistMfgNetCost
						else
							CurrentNetCost  = DistMfgNetCost

				if (BypassOverrideNetCost = false)
					if (UpdateOverrideNetCost)
						NetCostOverride = CurrentNetCost
					else
					if ((NetCostOverride = 0)
					or	(old NetCostOverride = old CurrentNetCost
					and	 !NetCostOverride changed))
						NetCostOverride = CurrentNetCost
				else
					if ((NetCostOverride = 0)
					or	(old NetCostOverride = old CurrentNetCost
					and	 !NetCostOverride changed))
						NetCostOverride = CurrentNetCost

			Exit Rules
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine

				if (ContractLine.ItemType.Itemmast)
					if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
						DefaultBuyUnitCost = NetCostOverride * 100000
					else
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					DefaultBuyUnitCost = NetCostOverride * 100000

				include UpdateExitRules

		UpdateFast is an Update Action
			restricted
			bypass field rules

		UpdateErrors is an Instance Action
			restricted

			Parameters
				ParmErrorsExist is Boolean

			Action Rules
				ErrorsExist = ParmErrorsExist

		MassDelete is a Set Action
			restricted
			Parameters
				ParmContractGroup 					is a ContractGroup
				ParmContract		 				is a Contract
				ParmCompany      					is like GeneralLedgerCompany
				ParmLocation                        is like InventoryLocation
				ParmRequestingLocation              is like RequestingLocation
				ParmPricingGroup					is like PricingGroup
				ParmManufacturerContract            is like Contract

			Instance Selection
				where (ParmContractGroup 			= ContractGroup
				and   (ParmContract !entered
				or    (ParmContract entered
				and    ParmContract			      	= Contract))
				and    ParmCompany                  = ContractLineMember.Company
				and    ParmLocation                 = ContractLineMember.Location
				and    ParmRequestingLocation       = ContractLineMember.RequestingLocation
				and    ParmPricingGroup             = ContractLineMember.PricingGroup
				and    ParmManufacturerContract     = ContractLineMember.ManufacturerContract)

			Action Rules
				Instance Rules
					invoke Delete PreferredContractRel
					invoke Purge

		Delete is a Delete Action
			restricted
			Action Rules

		HoldLineMember is an Instance Action
			valid when (CanHoldLineMember)
			completion message is "ContractLineMemberIsOnHold"

			Parameters
				PrmContractGroup      is a ContractGroup
				PrmContract           is a Contract
				PrmContractLine       is a ContractLine
				PrmHoldCode           is a ProcurementReasonCode
				PrmCompany            is Numeric size 4
				PrmLocation           is AlphaUpper size 5
				PrmRequestingLocation is AlphaUpper size 5
				PrmPricingGroup       is a PricingGroup

			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract
				PrmContractLine
					initial value is ContractLine
				PrmCompany
					initial value is ContractLineMember.Company
				PrmLocation
					initial value is ContractLineMember.Location
				PrmRequestingLocation
					initial value is ContractLineMember.RequestingLocation
				PrmPricingGroup
					initial value is ContractLineMember.PricingGroup

			Action Rules
				OnHold    = true
				ProcurementReasonCode  = PrmHoldCode

				if (Contract.IsManufacturerContract)
					for each DistributorLineMemberRel
						invoke HoldLineMember each

		HoldLineMemberFromLineOrPoitemven is an Instance Action
			restricted

			Action Rules
				OnHold = true
				initialize ProcurementReasonCode

		HoldLineMemberFromContract is an Instance Action
			restricted

			Action Rules
				OnHold = true
				initialize ProcurementReasonCode

		RemoveHoldLineMember is an Instance Action
			valid when (CanRemoveHold)
			completion message is "ContractLineMemberHoldHasBeenRemoved"

			Action Rules
				if (CanRemoveHold)
					OnHold = false
					HoldManufacturerLineMemberOnly = false
					initialize ProcurementReasonCode

					if (Contract.IsManufacturerContract)
						for each DistributorLineMemberRel
							invoke RemoveHoldLineMember each

		CloseLineMember is an Instance Action
			restricted

			Action Rules
				ContractLineMemberState = ContractLineMemberState.Closed
				ErrorsExist = false

		RemoveHoldLineMemberFromLine is an Instance Action
			restricted

			Action Rules
				if (CanRemoveHold)
					OnHold = false
					HoldManufacturerLineMemberOnly = false

		RemoveHoldLineMemberFromContract is an Instance Action
			restricted

			Action Rules
				if (CanRemoveHold)
					OnHold = false
					HoldManufacturerLineMemberOnly = false

		HoldManufacturerLineMemberOnly is an Instance Action
			valid when (CanHoldManufacturerLine)

			Parameters
				PrmContractGroup      is a ContractGroup
				PrmContract           is a Contract
				PrmContractLine       is a ContractLine
				PrmHoldCode           is an ProcurementReasonCode
				PrmCompany            is Numeric size 4
				PrmLocation           is AlphaUpper size 5
				PrmRequestingLocation is AlphaUpper size 5
				PrmPricingGroup       is a PricingGroup

			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract
				PrmContractLine
					initial value is ContractLine
				PrmCompany
					initial value is ContractLineMember.Company
				PrmLocation
					initial value is ContractLineMember.Location
				PrmRequestingLocation
					initial value is ContractLineMember.RequestingLocation
				PrmPricingGroup
					initial value is ContractLineMember.PricingGroup

			Action Rules
				HoldManufacturerLineMemberOnly = true
				ProcurementReasonCode              = PrmHoldCode

		HoldManufacturerLineMemberOnlyFromContract is an Instance Action
			restricted

			Action Rules
				HoldManufacturerLineMemberOnly =true
				initialize  ProcurementReasonCode

		RemoveManufacturerLineMemberOnlyHold is an Instance Action
			valid when (CanRemoveHoldManufacturerLine)

			Action Rules
				HoldManufacturerLineMemberOnly = false
				initialize ProcurementReasonCode

		RemoveHoldManufacturerLineMemberOnlyFromContract is an Instance Action
			restricted

			Action Rules
				HoldManufacturerLineMemberOnly =false

		ResetModified is an Instance Action
			valid when (DisplayResetModified)
			Action Rules
				MfgContractTierInfo.Tier = blank
				PricingIdentifier = blank
				ResettingModified = true
				Modified = false
				NetCostOverride = 0
				invoke UpdateDefault

		FastUpdateWithoutEdits is an Instance Action
			restricted
			Parameters
				ChangeSinceInterfacedTrue			is Boolean
				ChangeSinceInterfacedFalse			is Boolean
				SetToActive              	        is Boolean
				UpdateVendorItem            	    is Boolean
   				OldVendorItem						is AlphaUpper size 32
   				OldItemNumber                       is like Item
   				RemoveManufacturerLineOnlyHold		is Boolean
   				UpdateCanUseForCostDefaultingTrue  	is Boolean     
   				UpdateCanUseForCostDefaultingFalse 	is Boolean     
   				NewPriority                      	is Numeric size 1
				UpdateStocklessFlag              	is Boolean
				DistributorFixed                 	is Boolean
				CreateOrUpdatePreferredContract     is Boolean
				LineActivated                       is Boolean

			Parameter Rules
			Action Rules
				if (CreateOrUpdatePreferredContract)
					include CreateOrUpdatePreferredContract
				if (SetToActive)
					ContractLineMemberState = ContractLineMemberState.Active
				if (UpdateVendorItem)
					LocalVendorItem = OldVendorItem
					LocalItemNumber = OldItemNumber
					VendorItem = ContractLine.VendorItem
					ItemNumber = ContractLine.ItemNumber
					if (ContractLine.PreferredLine
					and ContractLine.HasBeenActivated)
						include CreateOrUpdatePreferredContract
				if (RemoveManufacturerLineOnlyHold)
					HoldManufacturerLineMemberOnly = false
				if (UpdateCanUseForCostDefaultingTrue)
					if (IsDistributorContract)
						CanUseForCostDefaulting = true
						ErrorsExist = ContractLine.ErrorsExist
					else
					if (IsManufacturerContract
					and PurchaseMethodForDirectBuy)
						CanUseForCostDefaulting = true
						ErrorsExist = ContractLine.ErrorsExist					
   				if (UpdateCanUseForCostDefaultingFalse)
   					CanUseForCostDefaulting = false
   					ErrorsExist = false
   				if (NewPriority entered)
   					Priority  = NewPriority
   				if (UpdateStocklessFlag)
   					Stockless = Contract.Stockless

		UpdateItemNumber is an Instance Action
			restricted
			Parameters
				PrmItemNumber				is an Item
				PrmVendorItem               is like VendorItem
			Action Rules

				LocalVendorItem             = VendorItem
				LocalItemNumber             = ItemNumber
				ItemNumber					= PrmItemNumber
				if (PrmVendorItem entered)
					VendorItem              = PrmVendorItem

				if (ContractLine.PreferredLine
				and ContractLine.HasBeenActivated)
					include CreateOrUpdatePreferredContract

		UpdateVendor is a Set Action
			restricted
			Parameters
				PrmContractGroup 					is a ContractGroup
				PrmContract			 				is a Contract
				PrmVendor                           is a Vendor

			Instance Selection
				where (PrmContractGroup 			= ContractGroup
				and    PrmContract			      	= Contract)

			Action Rules
				Instance Rules
					Vendor                          = PrmVendor

		UpdatePurchaseMethodOnLineMembers is a Set Action
			restricted
			Parameters
				PrmContractGroup 					is a ContractGroup
				PrmContract			 				is a Contract
				PrmManufacturerContract				is a Contract
				PrmTierCompany						is Numeric size 4
				PrmTierLocation						is like InventoryLocation
				PrmTierReqLocation					is like RequestingLocation
				PrmTierPricingGroup                 is a PricingGroup
				PrmPurchaseMethod                   is a PurchaseMethod
				PrmUpdateSpecial                    is Boolean

			Sort Order
				ContractGroup
				ContractLineMember
				Contract

			Instance Selection
				where (PrmContractGroup 			= ContractGroup
				and    PrmContract			      	= Contract
				and    PrmManufacturerContract		= ContractLineMember.ManufacturerContract
				and    PrmTierCompany				= ContractLineMember.Company
				and    PrmTierLocation				= ContractLineMember.Location
				and    PrmTierReqLocation			= ContractLineMember.RequestingLocation
				and    PrmTierPricingGroup          = ContractLineMember.PricingGroup)

			Action Rules
				Instance Rules
					PurchaseMethod                  = PrmPurchaseMethod

					if (PrmPurchaseMethod.FromDistributor)
						CreateDistributorLineMember = true
						CanUseForCostDefaulting     = false

						for each DistributorLineMemberRel
							invoke RemoveHoldLineMember each

					if (PrmPurchaseMethod.FromManufacturer)
						if (ItemExists
						or (SpecialItem
						and PrmUpdateSpecial = true))
							CanUseForCostDefaulting = true

							if (!DistributorLineMemberRel exists)
								CreateDistributorLineMember = false
							else
								for each DistributorLineMemberRel
									invoke HoldLineMember each

					if (PurchaseMethod.FromManufacturerAndDistributor)
						if (ItemExists
						or (SpecialItem
						and PrmUpdateSpecial = true))
							CanUseForCostDefaulting 	= true
							CreateDistributorLineMember = true

							for each DistributorLineMemberRel
								invoke RemoveHoldLineMember each

					if (PurchaseMethod.NotFromManufacturerOrDistributor)
						CanUseForCostDefaulting     = false
						if (!DistributorLineMemberRel exists)
							CreateDistributorLineMember = false
						else
							for each DistributorLineMemberRel
								invoke HoldLineMember each

		UpdateMismatchedErrorFlag is a Set Action
			restricted
			Parameters
				ParmContractGroup                    is a ContractGroup

			Instance Selection
				where (ContractGroup  = ParmContractGroup
				and    ErrorsExist   != ContractLine.ErrorsExist)

			Action Rules
				Instance Rules
					ErrorsExist = ContractLine.ErrorsExist

		UpdateMemberForDistributorContract is an Instance Action
			restricted
			Parameters
				PrmUpdateOverrideLandedCost	is a UpdateOverrideLandedCost
				PrmUOM                      is a UnitOfMeasureEdit

			Action Rules

				LocalPreviousCost           = NetCostOverride
				ResettingModified 			= true
				PassedRoundTo 				= DerivedRoundTo
				RoundToPassed 				= true
				if (PrmUpdateOverrideLandedCost)
					BypassOverrideNetCost 	= false
					UpdateOverrideNetCost 	= true
					Modified                = false
				else
					BypassOverrideNetCost 	= true
					UpdateOverrideNetCost 	= false

				if (ManufacturerLineMemberRelExists)
					MfgContractTierInfo.Tier		= ManufacturerLineMemberRel.MfgContractTierInfo.Tier
					DistMfgNetCost                  = ManufacturerLineMemberRel.NetCostOverride

				if (!ContractLine.DistributorFixedCost)

					PriceFactor   	= RoundedDistributorPricingCost
					FreightFactor 	= RoundedDistributorFreightCost
					CurrentNetCost 	= DistMfgNetCost + RoundedDistributorPricingCost + RoundedDistributorFreightCost
					if (ContractLine.ManufacturerContract != Contract)
						BaseCost    = DistMfgNetCost
				else
					CurrentNetCost  = DistMfgNetCost

				if (BypassOverrideNetCost = false)
					if (UpdateOverrideNetCost)
						NetCostOverride = CurrentNetCost
					else
					if ((NetCostOverride = 0)
					or	(old NetCostOverride = old CurrentNetCost
					and	 !NetCostOverride changed))
						NetCostOverride = CurrentNetCost
				else
					if ((NetCostOverride = 0)
					or	(old NetCostOverride = old CurrentNetCost
					and	 !NetCostOverride changed))
						NetCostOverride = CurrentNetCost

				if (Contract.SetActiveLineToAmendment)
					if (ContractLineMemberState.Active)
						ContractLineMemberState = ContractLineMemberState.Amendment

				if (ContractLine.ItemType.Itemmast)
					if (ItemNumber.DefaultBuyUOM = UOM.UnitOfMeasure)
						DefaultBuyUnitCost = NetCostOverride * 100000
					else
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					DefaultBuyUnitCost = NetCostOverride * 100000

				if (PrmUOM entered)
					UOM = PrmUOM
				if (LocalPreviousCost != NetCostOverride)
					PreviousCost = LocalPreviousCost

		UpdateDistributorContract is a Set Action  
			restricted


		SetPreviousCost is a Set Action
			restricted
			Parameters
				PrmContractGroup	is a ContractGroup
					default label is "ContractGroup"
				PrmContract         is a Contract	
					default label is "Contract"
					
			Instance Selection
				where (ContractGroup 	= PrmContractGroup
				and    Contract			= PrmContract)
				
			Action Rules
			
				Instance Rules
				
					for each audit log records
						if (each.NetCostOverride != NetCostOverride)
							LocalPreviousCost = each.NetCostOverride
						end for each
					PreviousCost = LocalPreviousCost																

		ComparePreviousCost is a Set Action
			restricted
			Parameters
				PrmContractGroup	is a ContractGroup
				PrmContract         is a Contract			
				ShowZeroDifference  is Boolean
				CompareFromDate     is Date
				CompareToDate       is Date

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Sort Order
				ContractGroup
				Contract
				ContractLine
				ContractLineMember
			
			Action Rules
			
				Contract Set Rules
					Exit Rules
						LocalContract     = Contract
						if (!CostSavingsExists)
							send email
								to actor.agent(Employee).EmployeeWorkEmailAddress
								from Contract.PrimaryContactRel.DerivedEmail
								subject "<ContractGroupEmailTemplate2Rel.FinalContractCostCompareSubject>"
								Contents
									"<ContractGroupEmailTemplate2Rel.FinalContractCostCompareContent>"
							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= actor.agent(Employee).EmployeeWorkEmailAddress
								invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
								invoked.SentFromEmailAddress			= Contract.PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalContractCostCompareSubject
								invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalContractCostCompareContent
								invoked.NotificationType				= 6

				Instance Rules
					if (ContractLine.QuantityOrdered > 0
					or  any DistributorContractLineRel.QuantityOrdered > 0)
						if ((PreviousCost != NetCostOverride
						and  PreviousCost > 0)
						or   ShowZeroDifference)	
							invoke Create ContractLinePriceChange
								invoked.ProcessingType      	= 5
								invoked.FromContract	        = Contract
								invoked.Contract                = Contract
								invoked.ContractLine            = ContractLine
								invoked.FromLineNumber          = ContractLine
								invoked.ContractGroup			= ContractGroup
								invoked.Company                 = ContractLineMember.Company
								invoked.Location                = ContractLineMember.Location
								invoked.RequestingLocation      = ContractLineMember.RequestingLocation
								invoked.PricingGroup            = ContractLineMember.PricingGroup
						 		invoked.ItemNumber				= ItemNumber
								invoked.VendorItem				= VendorItem
								invoked.UOM						= UOM
								invoked.EffectiveDate			= CompareFromDate
								invoked.ExpirationDate			= CompareToDate
								invoked.ManufacturerInformation.Manufacturer = ContractLine.Manufacturer
								invoked.ManufacturerInformation.ManufacturerNumber = ContractLine.ManufacturerNumber
								invoked.FutureCost				= PreviousCost
								if (PreviousCost = 0
								and ShowZeroDifference)
									invoked.FutureCost			= NetCostOverride
								invoked.BaseCost				= NetCostOverride							 									

		UpdateContractLineMemberState is a Set Action
			restricted

			Sort Order
				ContractGroup
				Contract
				ContractLine
				ContractLineMember

			Instance Selection
				where (ContractLine.ContractLineState.Active
				and    ContractLineMemberState.Draft)

			Action Rules
				Instance Rules
					ContractLineMemberState = ContractLineMemberState.Active

		UpdateMarkupPercent is a Set Action 
			restricted 
			Parameters 
				PrmContractGroup 					is a ContractGroup
				PrmContract     	 				is a Contract
 				PrmPricingIdentifier				is a ContractDistributorPricing
				PrmLineDistributorPricingCode		is AlphaUpper size 1
				PrmLineDistributorPricingAmt        is an InternationalCost
				PrmLineDistributorPricingPct        is a Percent
				PrmLineDistributorFreightCode		is AlphaUpper size 1
				PrmLineDistributorFreightAmt        is an InternationalCost
				PrmLineDistributorFreightPct        is a Percent				

			Sort Order
				ContractGroup
				Contract
				ContractLine
				ContractLineMember

			Instance Selection
				where (PrmContractGroup 			= ContractGroup
				and    PrmContract      	      	= Contract
				and    PrmPricingIdentifier         = PricingIdentifier
				and    !ContractLineMemberState.Closed)

			Action Rules

				Instance Rules 
			
					invoke UpdateDefault ContractLineMember
						invoked.PricingIdentifier																	= PrmPricingIdentifier
						invoked.LineDistributorPricing.PricingMarkupDiscount 										= PrmLineDistributorPricingCode
						invoked.LineDistributorPricing.LineDistributorPricingAmtPct.PricingCost 					= PrmLineDistributorPricingAmt
						invoked.LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent  				= PrmLineDistributorPricingPct
						invoked.LineDistributorFreightPricing.FreightPricingMarkupDiscount            				= PrmLineDistributorFreightCode
						invoked.LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost       = PrmLineDistributorFreightAmt
						invoked.LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent	= PrmLineDistributorFreightPct
						
		UpdateTierOnLineMembers is a Set Action
			restricted
			Parameters
				PrmContractGroup 					is a ContractGroup
				PrmContractInFocus	 				is a Contract
				PrmManufacturerContract				is Numeric size 15
				PrmTierCompany						is Numeric size 4
				PrmTierLocation						is like InventoryLocation
				PrmTierReqLocation					is like RequestingLocation
				PrmTierPricingGroup                 is a PricingGroup
				PrmTier					        	is like ContractTier
				PrmContractDistributorPricingMember is a ContractDistributorPricingMember
				PrmTierMarkupDiscount 				is AlphaUpper size 1
				PrmLineTierPricingAmtPct 			is a LineTierPricingAmtPct
				PrmFreightMarkupDiscount 			is AlphaUpper size 1
				PrmLineFreightPricingAmtPct 		is a LineFreightPricingAmtPct
 				PrmPricingIdentifier				is a ContractDistributorPricing
				PrmLineDistributorPricingCode		is AlphaUpper size 1
				PrmLineDistributorPricingAmt        is an InternationalCost
				PrmLineDistributorPricingPct        is a Percent
				PrmLineDistributorFreightPricing	is a LineDistributorFreightPricing
				PrmLineDistributorFreightPricingCode	is AlphaUpper size 1
				PrmLineDistributorFreightPricingAmt		is an InternationalCost
				PrmLineDistributorFreightPricingPct		is a Percent
				PrmPurchaseMethod                   is a PurchaseMethod
				PrmOverrideNetCost                  is Boolean
				PrmTierModified						is Boolean

			Sort Order
				ContractGroup
				Contract
				ContractLine
				ContractLineMember

			Instance Selection
				where (PrmContractGroup 			= ContractGroup
				and    PrmContractInFocus	      	= Contract
				and    PrmManufacturerContract		= ContractLineMember.ManufacturerContract
				and    PrmTierCompany				= ContractLineMember.Company
				and    PrmTierLocation				= ContractLineMember.Location
				and    PrmTierReqLocation			= ContractLineMember.RequestingLocation
				and    PrmTierPricingGroup          = ContractLineMember.PricingGroup)

			Action Rules
				Contract Set Rules

					Exit Rules
						if (!PrmContractDistributorPricingMember exists)
							LocalContractGroup          = PrmContractGroup
							LocalContract               = PrmContractInFocus
							LocalCompany                = PrmTierCompany
							LocalLocation               = PrmTierLocation
							LocalRequestingLocation     = PrmTierReqLocation
							LocalPricingGroup           = PrmTierPricingGroup
							for each LocalTierMemberRel.PricingOldTierRel
								invoke UpdateTierFromManufacturer each
		 							invoked.NewTier 			= PrmTier
		 							invoked.ParmOverrideNetCost = PrmOverrideNetCost
									invoked.ParmTierModified	= PrmTierModified

				Instance Rules
					if (!PrmContractDistributorPricingMember exists)
						invoke UpdateDefault ContractLineMember
		 					invoked.MfgContractTierInfo.Tier		= PrmTier
		 					invoked.MfgContractTierInfo.MfgContract	= PrmManufacturerContract
							invoked.TierMarkupDiscount 				= PrmTierMarkupDiscount
							invoked.LineTierPricingAmtPct 			= PrmLineTierPricingAmtPct
							invoked.FreightMarkupDiscount 			= PrmFreightMarkupDiscount
							invoked.LineFreightPricingAmtPct 		= PrmLineFreightPricingAmtPct
							if  (PrmOverrideNetCost)
		 						invoked.BypassOverrideNetCost = false
								invoked.UpdateOverrideNetCost = true
								if (Modified)
			 						invoked.Modified          = false
					else
						invoke UpdateDefault ContractLineMember
		 					invoked.MfgContractTierInfo.Tier		= PrmTier
		 					invoked.MfgContractTierInfo.MfgContract	= PrmManufacturerContract
		 					invoked.PricingIdentifier				= PrmPricingIdentifier
							invoked.LineDistributorPricing.PricingMarkupDiscount 						= PrmLineDistributorPricingCode
							invoked.LineDistributorPricing.LineDistributorPricingAmtPct.PricingCost 	= PrmLineDistributorPricingAmt
							invoked.LineDistributorPricing.LineDistributorPricingAmtPct.PricingPercent  = PrmLineDistributorPricingPct
							invoked.LineDistributorFreightPricing.FreightPricingMarkupDiscount							= PrmLineDistributorFreightPricingCode
							invoked.LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightCost		= PrmLineDistributorFreightPricingAmt
							invoked.LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct.FreightPercent	= PrmLineDistributorFreightPricingPct
							if  (PrmOverrideNetCost)
		 						invoked.BypassOverrideNetCost = false
								invoked.UpdateOverrideNetCost = true
								if (Modified)
			 						invoked.Modified          = false
		 					if (PrmTier entered)
								invoked.TierMarkupDiscount 				= PrmTierMarkupDiscount
								invoked.LineTierPricingAmtPct 			= PrmLineTierPricingAmtPct
								invoked.FreightMarkupDiscount 			= PrmFreightMarkupDiscount
								invoked.LineFreightPricingAmtPct 		= PrmLineFreightPricingAmtPct
							else
								invoked.TierMarkupDiscount 						= blank
								invoked.LineTierPricingAmtPct.TierCost 			= 0
								invoked.LineTierPricingAmtPct.TierPercent 		= 0
								invoked.FreightMarkupDiscount 					= blank
								invoked.LineFreightPricingAmtPct.FreightCost 	= 0
								invoked.LineFreightPricingAmtPct.FreightPercent = 0
							LocalTierModified									= PrmTierModified

		Purge is a Purge Action
			restricted

