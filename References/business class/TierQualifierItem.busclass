TierQualifierItem is a BusinessClass
    owned by po
    prefix is TRQI

    Ontology
    	symbolic key is TierQualifierItem    
    		    	
    Persistent Fields
 		OriginalContractAndLine                             
		ItemNumber							is an Item
		Manufacturer 
			default label is "Manufacturer"
		ManufacturerNumber 
    	Vendor                              
		VendorItem                          
		Description
		ContractTier                        
		ContractTierQualifier               
		QualifiedOrCompetitiveItem          is Numeric 1 
			States 
				Qualified               value is 1
				Competitive             value is 2

	Transient Fields
		AddAllActiveVendorItems	is Boolean
				
    Local Fields
		LocalAmount         	is an InternationalAmount
		LocalVendor         	is like Vendor 
		LocalVendorItem			is like VendorItem 
		LocalManufacturer   	is like Manufacturer 
		LocalManufacturerNumber	is like ManufacturerNumber
		LocalQuantity           is Decimal size 13.4
		LocalUOMCalculation		is a UOMCalculation

	Derived Fields
				
	Conditions

		NonContract 
			restricted
			when (OriginalContractAndLine.OriginalContract !entered)

		HasQualifierContract
			restricted 
			when (TierQualifierContractRel exists)

		Qualified 
			restricted 
			when (QualifiedOrCompetitiveItem = 1)

		Competitive 
			restricted 
			when (QualifiedOrCompetitiveItem = 2)

		ItemExists 
			restricted
			when (ItemRel exists)

		ContractHasTierQualifierItems
			restricted 
			when (Contract.HasTierQualifierItemForTier)	

		TierQualifierVendorItemsExist
			restricted 
			when (Contract.HasTierQualifierItemsWithVendorItem)
		
		HasPurchaseOrderLinesForContractLine
			restricted 
			when (OriginalContractAndLine.OriginalContractLine entered
			and   PurchaseOrderLineForContractLineRel exists)

		HasPurchaseOrderLinesForItemOnly
			restricted
			when (OriginalContractAndLine.OriginalContractLine !entered
			and   PurchaseOrderLineForItemRel exists)  
		
		VendorEntered 
			restricted 
			when (Vendor entered)
		
		HasTier 
			restricted 
			when (ContractTier entered)
		
		HasInvoiceDetailsForContractLine 
			restricted 
			when (InvoiceDetailForContractLineRel exists)

		CanCreateVendorItemQualifierItems
			restricted 
			when (VendorItem !entered
			and   OriginalContractAndLine.OriginalContractLine entered)

		HasOtherQualifierItemsWithVendorItem 
			restricted 
			when (QualifierItemsForManufacturerWithVendorItemRel exists)

			
    Relations

		DuplicateByItemRel
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByItemDetails
				related.ContractGroup			= ContractGroup 
				related.Contract            	= Contract 
				related.ItemNumber          	= ItemNumber 
				related.VendorItem          	= VendorItem 
				related.Manufacturer        	= ItemNumber.Manufacturer
				related.ManufacturerNumber		= ItemNumber.ManufacturerNumber
				related.ContractTier            = ContractTier
				related.ContractTierQualifier	= ContractTierQualifier
			Instance Selection 
				where (related.OriginalContractAndLine.OriginalContract !entered)

		TierQualifierContractRel 
			one-to-many relation to TierQualifierContract 
			Field Mapping uses BySelectedContract
				related.ContractGroup       	= ContractGroup 
				related.SelectedContractNumber 	= OriginalContractAndLine.OriginalContract 
				related.Contract                = Contract

		DuplicateByContractRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses BySelectedContractLine
				related.ContractGroup									= ContractGroup 
				related.Contract                                    	= Contract 
				related.OriginalContractAndLine.OriginalContract    	= OriginalContractAndLine.OriginalContract
				related.OriginalContractAndLine.OriginalContractLine 	= OriginalContractAndLine.OriginalContractLine	
				related.ContractTierQualifier                       	= ContractTierQualifier

		ItemRel 
			one-to-many relation to Item 
			Field Mapping uses symbolic key 
				related.ItemGroup								= ContractGroup	
				related.Item                                    = ItemNumber 	

		InvoiceDetailForContractLineRel 
			one-to-many relation to PayablesInvoiceDetail 
			Field Mapping uses ByContractLine 
				related.Contract                                = OriginalContractAndLine.OriginalContract 
				related.ContractLine                            = OriginalContractAndLine.OriginalContractLine  
			Instance Selection 
				where (OriginalContractAndLine.OriginalContractLine entered)

		PurchaseOrderLineForContractLineRel 
			one-to-many relation to PurchaseOrderLine 
			Field Mapping uses ByContractLine 
				related.ProcurementGroup                        = ContractGroup 
				related.Contract                                = OriginalContractAndLine.OriginalContract 
				related.ContractLine                            = OriginalContractAndLine.OriginalContractLine 	
			Instance Selection 
				where (OriginalContractAndLine.OriginalContractLine entered)					

		PurchaseOrderLineForItemRel 
			one-to-many relation to PurchaseOrderLine 
			Field Mapping uses ByItem 
				related.ProcurementGroup                        = ContractGroup 
				related.Item                                    = ItemNumber 		

		ContractLineByManufacturerInfoRel 
			one-to-many relation to ContractLine 
			Field Mapping uses ByMfgInfoVenItem
				related.ContractGroup							= ContractGroup 
				related.Manufacturer.ManufacturerCode           = Manufacturer.ManufacturerCode 
				related.Manufacturer.ManufacturerDivision       = Manufacturer.ManufacturerDivision 
				related.ManufacturerNumber                      = ManufacturerNumber 
			Instance Selection 
				where (related.Contract.Vendor entered
				and    related.VendorItem entered
				and    related.Contract.Vendor != Contract.Vendor 
				and    related.UniqueID  != UniqueID)

		QualifierItemsForManufacturerWithVendorItemRel 
			one-to-many relation to TierQualifierItem
			Field Mapping uses ByManufacturerInformation 
				related.ContractGroup                           = ContractGroup 
				related.Contract                                = Contract 
				related.Manufacturer                            = Manufacturer 
				related.ManufacturerNumber                      = ManufacturerNumber
			Instance Selection 
				where (related.VendorItem entered)			
		
		TierQualifierItemByVendorItemRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByManufacturerInformation 
				related.ContractGroup                           = ContractGroup 
				related.Contract                                = Contract 
				related.Manufacturer                            = LocalManufacturer 
				related.ManufacturerNumber                      = LocalManufacturerNumber
				related.VendorItem                              = LocalVendorItem 
				related.Vendor                                  = LocalVendor
		
		ContractRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup							= ContractGroup 
				related.Contract 								= OriginalContractAndLine.OriginalContract

		ContractLineRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup							= ContractGroup 
				related.Contract 								= OriginalContractAndLine.OriginalContract
				related.ContractLine                            = OriginalContractAndLine.OriginalContractLine 
	
		ContractLineByManufacturerRel 
			one-to-many relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup							= ContractGroup 

		PoLineFactManufNoVendorItemRel 
			one-to-many relation to PolineFact 
			Field Mapping uses ByManufacturerInformationVendorItem
				related.ContractGroup                           = ContractGroup 
				related.ManufacturerCode                        = Manufacturer.ManufacturerCode 
				related.ManufacturerDivision                    = Manufacturer.ManufacturerDivision
				related.ManufacturerNumber                      = ManufacturerNumber 

		PoInvLineFactManufNoVendorItemRel
			one-to-many relation to PoInvLineFact
			Field Mapping uses ByManufacturerInformationVendorItem
				related.ContractGroup                           = ContractGroup 
				related.ManufacturerCode                        = Manufacturer.ManufacturerCode 
				related.ManufacturerDivision                    = Manufacturer.ManufacturerDivision
				related.ManufacturerNumber                      = ManufacturerNumber 					
		
		PoLineFactItemNoVendorItemRel 
			one-to-many relation to PolineFact 
			Field Mapping uses ByItemVendorItem
				related.ContractGroup                           = ContractGroup 
				related.Item                                    = ItemNumber 	

		PoInvLineFactItemNoVendorItemRel 
			one-to-many relation to PoInvLineFact 
			Field Mapping uses ByItemVendorItem
				related.ContractGroup                           = ContractGroup 
				related.Item                                    = ItemNumber 	

		PoLineFactManufVendorItemRel 
			one-to-many relation to PolineFact 
			Field Mapping uses ByManufacturerInformationVendorItem
				related.ContractGroup                           = ContractGroup 
				related.ManufacturerCode                        = Manufacturer.ManufacturerCode 
				related.ManufacturerDivision                    = Manufacturer.ManufacturerDivision
				related.ManufacturerNumber                      = ManufacturerNumber 
				related.Vendor                                  = Vendor 
				related.VendorItem                              = VendorItem 

		PoInvLineFactManufVendorItemRel
			one-to-many relation to PoInvLineFact
			Field Mapping uses ByManufacturerInformationVendorItem
				related.ContractGroup                           = ContractGroup 
				related.ManufacturerCode                        = Manufacturer.ManufacturerCode 
				related.ManufacturerDivision                    = Manufacturer.ManufacturerDivision
				related.ManufacturerNumber                      = ManufacturerNumber 
				related.VendorItem                              = VendorItem 					
				related.PoInvLineFact.Vendor                    = Vendor 

		PoLineFactItemVendorItemRel 
			one-to-many relation to PolineFact 
			Field Mapping uses ByItemVendorItem
				related.ContractGroup                           = ContractGroup 
				related.Item                                    = ItemNumber 	
				related.Vendor                                  = Vendor 
				related.VendorItem                              = VendorItem 

		PoInvLineFactItemVendorItemRel 
			one-to-many relation to PoInvLineFact 
			Field Mapping uses ByItemVendorItem
				related.ContractGroup                           = ContractGroup 
				related.Item                                    = ItemNumber 
				related.VendorItem                              = VendorItem 	
				related.PoInvLineFact.Vendor                    = Vendor 

		ActiveVendorItemRel 
			one-to-many relation to VendorItem 
			Field Mapping uses symbolic key 
				related.ProcurementGroup						= ContractGroup						
				related.Item                                    = ItemNumber 

	Sets
		BySelectedContractLine 
			Sort Order 
				ContractGroup 
				Contract 
				OriginalContractAndLine.OriginalContract 
				OriginalContractAndLine.OriginalContractLine
				ContractTierQualifier
				TierQualifierItem 

		BySelectedContractLineFirst 
			Sort Order 
				ContractGroup 
				OriginalContractAndLine.OriginalContract 
				OriginalContractAndLine.OriginalContractLine
				Contract 
				ContractTierQualifier
				TierQualifierItem 

		ByItemDetails 
			Sort Order 
				ContractGroup 
				Contract 
				ItemNumber 
				VendorItem 
				Manufacturer
				ManufacturerNumber 				
				ContractTier 
				ContractTierQualifier 
				TierQualifierItem 

		ByManufacturerInformation 
			Sort Order 
				ContractGroup 
				Contract 
				Manufacturer 
				ManufacturerNumber
				VendorItem 
				Vendor
				ItemNumber 
				TierQualifierItem

		ByType 
			Sort Order
				ContractGroup 
				Contract 
				QualifiedOrCompetitiveItem
				TierQualifierItem 

		ByTier 
			Sort Order 
				ContractGroup 
				Contract 
				ContractTier 
				ContractTierQualifier 
				TierQualifierItem 

		ByQualifiedOrCompetitiveItem 
			Sort Order 
				ContractGroup 
				Contract 
				QualifiedOrCompetitiveItem
				ContractTier 
				ContractTierQualifier 
				TierQualifierItem 

	Field Rules
			
	Rule Blocks

		LoadDescription 

			if (Description !entered)
				if (ItemExists)
					Description = ItemRel.Description
				else 
				if (OriginalContractAndLine.OriginalContractLine entered)
					Description = ContractLineRel.ItemDescription

	Actions
		Create is a Create Action
			Field Rules 
			
			Action Rules

				if (NonContract)
					if (QualifiedOrCompetitiveItem = 0)
						if (Contract.HasPercentTierQualifier)
							QualifiedOrCompetitiveItem = 2
						else 
							QualifiedOrCompetitiveItem = 1
					constraint (ItemNumber entered)
						"MustEnterItemNumber"
				
					constraint (QualifiedOrCompetitiveItem > 0)
						"MustBeEitherAQualifiedItemOrACompetitiveItem"

					constraint (DuplicateByItemRel !exists)
						"TierQualifierItemAlreadyExists"

					if (ItemExists)
						if (Manufacturer !entered)
							Manufacturer = ItemNumber.Manufacturer
						if (ManufacturerNumber !entered)
							ManufacturerNumber = ItemNumber.ManufacturerNumber 

				else 
					constraint (DuplicateByContractRel !exists)
						"TierQualifierItemForThisContractLineAlreadyExists"

				include LoadDescription		

    		Exit Rules

				if (QualifiedOrCompetitiveItem = 0)
					if (HasQualifierContract)
						QualifiedOrCompetitiveItem = first TierQualifierContractRel.QualifiedOrCompetitiveContract
        			
		CreateTierQualifierItem is a Create Action 
			restricted 

			Action Rules 

				include LoadDescription

   			Exit Rules

				if (QualifiedOrCompetitiveItem = 0)
					if (HasQualifierContract)
						QualifiedOrCompetitiveItem = first TierQualifierContractRel.QualifiedOrCompetitiveContract			
		
		Update is an Update Action
			Action Rules

				if (NonContract)
					constraint (QualifiedOrCompetitiveItem > 0)
						"MustBeEitherAQualifiedOrCompetitiveItem"	

				include LoadDescription		
		
		Delete is a Delete Action
			restricted
			Action Rules
 
    		Exit Rules   	
    			
		DeleteAll is a Set Action 
			restricted 
			Parameters 
				ParmContractGroup		is a ContractGroup 
				ParmContract            is a Contract 
				ParmQualifierContract   is a Contract 

			Instance Selection 
				where (ParmContractGroup		= ContractGroup 
				and    ParmContract             = Contract
				and    ParmQualifierContract    = OriginalContractAndLine.OriginalContract)

			Action Rules 

				Instance Rules 
					invoke Purge 

		Purge is a Purge Action
			default label is "Delete"

		CreateVendorItemQualifierItems is an Instance Action 
			valid when (CanCreateVendorItemQualifierItems)

			Action Rules 

				VendorItem = ContractLineRel.VendorItem 
				Vendor     = ContractRel.Vendor
				
			Exit Rules 
			
				for each ContractLineByManufacturerInfoRel
					LocalVendor	                = each.Contract.Vendor 
					LocalVendorItem				= each.VendorItem
					LocalManufacturer           = each.Manufacturer 
					LocalManufacturerNumber     = each.ManufacturerNumber  
					if (TierQualifierItemByVendorItemRel !exists)
						invoke CreateTierQualifierItem 
							invoked.ContractGroup									= ContractGroup 
							invoked.Contract                    					= Contract 
							invoked.Vendor                      					= each.Contract.Vendor 
							invoked.ItemNumber                  					= each.ItemNumber 
							invoked.VendorItem                  					= each.VendorItem 
							invoked.OriginalContractAndLine.OriginalContract		= each.Contract
							invoked.OriginalContractAndLine.OriginalContractLine	= each.ContractLine 
							invoked.Manufacturer               			 			= Manufacturer 
							invoked.ManufacturerNumber          					= ManufacturerNumber 
							invoked.QualifiedOrCompetitiveItem  					= 1
							invoked.Description                 					= each.ItemDescription
		
		PerformQualifiedTierCalculations is a Set Action 
			restricted
			Parameters 
				ParmContractGroup						is a ContractGroup 
				ParmContract                            is a Contract 
					context of ParmContractGroup 
				ParmTierMemberCompany                   is an InventoryCompany 
				ParmTierMemberLocation                  is an InventoryLocation 
				CalculateCompetitive                    is Boolean 
				ParmTier								is a ContractTier 
					context of ParmContractGroup 
				ParmQualifier                           is a ContractTierQualifier
					context of ParmContractGroup
				ParmOnlyForTier                         is Boolean 
				ParmDateRange                           is a DateRange 
				InvoicesOrPurchaseOrders                is Numeric 1 
					States 
						Invoices                        value is 1
						PurchaseOrders                  value is 2

			Sort Order 
				ContractGroup 
				Contract 
				QualifiedOrCompetitiveItem
				ContractTier 
				ContractTierQualifier
			
			Instance Selection 

				where (ParmContractGroup			= ContractGroup
				and    ParmContract         		= Contract
				and    QualifiedOrCompetitiveItem 	= 1
				and   (ParmTier !entered
				or    (ParmTier entered
				and    ParmOnlyForTier = false)
				or    (ParmOnlyForTier
				and    ParmTier 					= ContractTier
				and    ParmQualifier				= ContractTierQualifier)))

			Local Fields 
				NewTierQualifierCalculation	is a TierQualifierCalculation view 
			
			Action Rules 

				Contract Set Rules 

					Entrance Rules 

						invoke Create TierQualifierCalculation 
							assign result to NewTierQualifierCalculation
							invoked.ContractGroup					= ParmContractGroup  
							invoked.Contract                		= ParmContract 
							invoked.FromInvoicesOrPurchaseOrders	= InvoicesOrPurchaseOrders
							invoked.Company                         = ParmTierMemberCompany
							invoked.Location                        = ParmTierMemberLocation 
							invoked.ContractTier                    = ParmTier 
							invoked.ContractTierQualifier           = ParmQualifier
							invoked.OnlyForTier                     = ParmOnlyForTier 
							invoked.RunDate                         = current corporate date 
							invoked.DateRange                       = ParmDateRange 

					Exit Rules 

						if (CalculateCompetitive = true)
							invoke PerformCompetitiveTierCalculations
								invoked.ParmContractGroup					= ParmContractGroup
								invoked.ParmContract                        = ParmContract 
								invoked.ParmTierQualifierCalculation        = NewTierQualifierCalculation.TierQualifierCalculation 
								invoked.ParmTierMemberCompany               = ParmTierMemberCompany 
								invoked.ParmTierMemberLocation              = ParmTierMemberLocation 
								invoked.ParmTier							= ParmTier 
								invoked.ParmQualifier                       = ParmQualifier
								invoked.ParmOnlyForTier                     = ParmOnlyForTier
								invoked.ParmDateRange                       = ParmDateRange 
								invoked.InvoicesOrPurchaseOrders            = InvoicesOrPurchaseOrders         

				Instance Rules 

					if (InvoicesOrPurchaseOrders.Invoices)
						if (ManufacturerNumber entered)
							if (VendorItem !entered)
								for each PoInvLineFactManufNoVendorItemRel
									if  (each.InvoiceDte within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.Company)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.MatchedQty
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   =  LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity = each.MatchedQty 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.TotDistAmt	
											LocalQuantity               = each.MatchedQty	
										invoke Update NewTierQualifierCalculation.TierQualifierCalculation
											invoked.QualifiedAmount 	  += LocalAmount 
											invoked.QualifiedQuantity     += LocalQuantity 
											if (each.Contract !entered)
												invoked.OffContractAmount += each.TotDistAmt
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
											invoked.DetailContract              = each.Contract  
											invoked.PurchasingCompany           = each.Company 
											invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
											invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
											invoked.PayablesInvoice             = each.PoInvLineFact.Invoice  
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.MatchedQty 
											invoked.UnitCost                    = each.MatchUnitCst
							else 
							if (VendorItem entered)
								for each PoInvLineFactManufVendorItemRel
									if  (each.InvoiceDte within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.Company)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.MatchedQty
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   =  LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity = each.MatchedQty 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.TotDistAmt
											LocalQuantity               = each.MatchedQty 		
										invoke Update NewTierQualifierCalculation.TierQualifierCalculation
											invoked.QualifiedAmount 	  += LocalAmount 
											invoked.QualifiedQuantity     += LocalQuantity 
											if (each.Contract !entered)
												invoked.OffContractAmount += each.TotDistAmt
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
											invoked.DetailContract              = each.Contract  
											invoked.PurchasingCompany           = each.Company 
											invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
											invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
											invoked.PayablesInvoice             = each.PoInvLineFact.Invoice  
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.MatchedQty 
											invoked.UnitCost                    = each.MatchUnitCst
						else 
						if (ItemNumber entered)
						 	for each PoInvLineFactItemNoVendorItemRel  
								if  (each.InvoiceDte within ParmDateRange
								and (ParmTierMemberCompany !entered
								or   ParmTierMemberCompany = each.Company)
								and (ParmTierMemberLocation !entered
								or   ParmTierMemberLocation = each.Location))
									if (OriginalContractAndLine.OriginalContractLine entered
									and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
										if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
										and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
											initialize LocalUOMCalculation
											LocalUOMCalculation.InputQuantity				= each.MatchedQty
											LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
											LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

											LocalQuantity   =  LocalUOMCalculation.OutputQuantity
										else 
											LocalQuantity = each.MatchedQty 
										LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
									else 
										LocalAmount                 = each.TotDistAmt
										LocalQuantity               = each.MatchedQty						
									invoke Update NewTierQualifierCalculation.TierQualifierCalculation
										invoked.QualifiedAmount 	  += LocalAmount 
										invoked.QualifiedQuantity     += LocalQuantity 
										if (each.Contract !entered)
											invoked.OffContractAmount += each.TotDistAmt									
									invoke Create TierQualifierCalculationDetail 
										invoked.ContractGroup				= ContractGroup 
										invoked.Contract                    = Contract 
										invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
										invoked.DetailContract              = each.Contract  
										invoked.PurchasingCompany           = each.Company 
										invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
										invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
										invoked.PayablesInvoice             = each.PoInvLineFact.Invoice
										invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem										  
										invoked.Quantity                    = each.MatchedQty 
										invoked.UnitCost                    = each.MatchUnitCst
					else 
					if (InvoicesOrPurchaseOrders.PurchaseOrders)
						if (ManufacturerNumber entered)
							if (VendorItem !entered)
								for each PoLineFactManufNoVendorItemRel
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)

											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= each.Quantity 
											LocalAmount											= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 						= each.ExtendedAmt	
											LocalQuantity                                       = each.Quantity 
										invoke Update NewTierQualifierCalculation.TierQualifierCalculation
											invoked.QualifiedAmount       += LocalAmount 
											invoked.QualifiedQuantity     += LocalQuantity
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst
							else 
							if (VendorItem entered)
								for each PoLineFactManufVendorItemRel
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= each.Quantity 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.ExtendedAmt	
											LocalQuantity               = each.Quantity
										invoke Update NewTierQualifierCalculation.TierQualifierCalculation
											invoked.QualifiedAmount       += LocalAmount 
											invoked.QualifiedQuantity     += LocalQuantity
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst
						else 
						if (ItemNumber entered)
							if (VendorItem !entered)
								for each PoLineFactItemNoVendorItemRel  					
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= each.Quantity 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.ExtendedAmt	
											LocalQuantity               = each.Quantity
										invoke Update NewTierQualifierCalculation.TierQualifierCalculation
											invoked.QualifiedAmount       += LocalAmount
											invoked.QualifiedQuantity     += LocalQuantity  
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt 
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= NewTierQualifierCalculation.TierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 	
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst

		PerformCompetitiveTierCalculations is a Set Action 
			restricted
			Parameters 
				ParmContractGroup                       is a ContractGroup 
				ParmContract                            is a Contract 
					context of ParmContractGroup
				ParmTierQualifierCalculation            is a TierQualifierCalculation
					context of ParmContractGroup
				ParmTierMemberCompany                   is a PurchasingCompany 
				ParmTierMemberLocation                  is an InventoryLocation 
				ParmTier								is a ContractTier 
					context of ParmContractGroup
				ParmQualifier                           is a ContractTierQualifier
					context of ParmContractGroup 
				ParmOnlyForTier                         is Boolean 
				ParmDateRange                           is a DateRange 
				InvoicesOrPurchaseOrders                is Numeric 1 
					States 
						Invoices                        value is 1
						PurchaseOrders                  value is 2

			Sort Order 
				ContractGroup 
				Contract 
				QualifiedOrCompetitiveItem
				ContractTier 
				ContractTierQualifier
			
			Instance Selection 

				where (ParmContractGroup			= ContractGroup
				and    ParmContract         		= Contract
				and    QualifiedOrCompetitiveItem 	= 2
				and   (ParmTier !entered
				or    (ParmTier entered
				and    ParmOnlyForTier = false)
				or    (ParmOnlyForTier 
				and	   ParmTier 					= ContractTier
				and    ParmQualifier				= ContractTierQualifier)))

			Action Rules 

				Instance Rules 
				
					if (InvoicesOrPurchaseOrders.Invoices)
						if (ManufacturerNumber entered)
							if (VendorItem !entered)
								for each PoInvLineFactManufNoVendorItemRel
									if  (each.InvoiceDte within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.Company)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.MatchedQty
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   =  LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity = each.MatchedQty 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.TotDistAmt	
											LocalQuantity               = each.MatchedQty	
										invoke Update ParmTierQualifierCalculation
											invoked.CompetitiveAmount     += LocalAmount 
											invoked.CompetitiveQuantity   += LocalQuantity
											if (each.Contract !entered)
												invoked.OffContractAmount += each.TotDistAmt 
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
											invoked.DetailContract              = each.Contract  
											invoked.PurchasingCompany           = each.Company 
											invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
											invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
											invoked.PayablesInvoice             = each.PoInvLineFact.Invoice 
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem 
											invoked.Quantity                    = each.MatchedQty 
											invoked.UnitCost                    = each.MatchUnitCst
							else
							if (VendorItem entered)
								for each PoInvLineFactManufVendorItemRel
									if  (each.InvoiceDte within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.Company)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.MatchedQty
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   =  LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity = each.MatchedQty 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.TotDistAmt	
											LocalQuantity               = each.MatchedQty		
										invoke Update ParmTierQualifierCalculation
											invoked.CompetitiveAmount     += LocalAmount 
											invoked.CompetitiveQuantity   += LocalQuantity
											if (each.Contract !entered)
												invoked.OffContractAmount += each.TotDistAmt 
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
											invoked.DetailContract              = each.Contract  
											invoked.PurchasingCompany           = each.Company 
											invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
											invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
											invoked.PayablesInvoice             = each.PoInvLineFact.Invoice 
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem 
											invoked.Quantity                    = each.MatchedQty 
											invoked.UnitCost                    = each.MatchUnitCst
						else
						if (ItemNumber entered)
							for each PoInvLineFactItemNoVendorItemRel
								if  (each.InvoiceDte within ParmDateRange
								and (ParmTierMemberCompany !entered
								or   ParmTierMemberCompany = each.Company)
								and (ParmTierMemberLocation !entered
								or   ParmTierMemberLocation = each.Location))
									if (OriginalContractAndLine.OriginalContractLine entered
									and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
										if (each.EntBuyUom != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
										and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
											initialize LocalUOMCalculation
											LocalUOMCalculation.InputQuantity				= each.MatchedQty
											LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.EntBuyUom
											LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

											LocalQuantity   =  LocalUOMCalculation.OutputQuantity
										else 
											LocalQuantity = each.MatchedQty 
										LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
									else 
										LocalAmount                 = each.TotDistAmt	
										LocalQuantity               = each.MatchedQty	
									invoke Update ParmTierQualifierCalculation
										invoked.CompetitiveAmount 	    += LocalAmount 
										invoked.CompetitiveQuantity     += LocalQuantity 
										if (each.Contract !entered)
											invoked.OffContractAmount   += each.TotDistAmt								
									invoke Create TierQualifierCalculationDetail 
										invoked.ContractGroup				= ContractGroup 
										invoked.Contract                    = Contract 
										invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
										invoked.DetailContract              = each.Contract  
										invoked.PurchasingCompany           = each.Company 
										invoked.PurchaseOrder               = each.PoInvLineFact.PoNumber 
										invoked.PurchaseOrderLine           = each.PoInvLineFact.LineNbr 
										invoked.PayablesInvoice             = each.PoInvLineFact.Invoice  
										invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
										invoked.Quantity                    = each.MatchedQty 
										invoked.UnitCost                    = each.MatchUnitCst
					else 
					if (InvoicesOrPurchaseOrders.PurchaseOrders)
						if (ManufacturerNumber entered)
							if (VendorItem !entered)
								for each PoLineFactManufNoVendorItemRel
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= LocalQuantity 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.ExtendedAmt	
											LocalQuantity               = each.Quantity
										invoke Update ParmTierQualifierCalculation
											invoked.CompetitiveAmount     += LocalAmount 
											invoked.CompetitiveQuantity   += LocalQuantity
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt 
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 	
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst
							else 
							if (VendorItem entered)
								for each PoLineFactManufVendorItemRel
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= each.Quantity 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.ExtendedAmt	
											LocalQuantity               = each.Quantity
										invoke Update ParmTierQualifierCalculation
											invoked.CompetitiveAmount     += LocalAmount 
											invoked.CompetitiveQuantity   += LocalQuantity
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt 
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 	
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst
						else 
						if (ItemNumber entered)
							if (VendorItem !entered)
								for each PoLineFactItemNoVendorItemRel  					
									if  (each.PoDate within ParmDateRange
									and (ParmTierMemberCompany !entered
									or   ParmTierMemberCompany = each.PurchasingCompany)
									and (ParmTierMemberLocation !entered
									or   ParmTierMemberLocation = each.Location))
										if (OriginalContractAndLine.OriginalContractLine entered
										and OriginalContractAndLine.OriginalContract.IsManufacturerContract)
											if (each.PurchaseOrderLineRel.EnteredBuyUOM != OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
											and OriginalContractAndLine.OriginalContractLine.ItemType.Itemmast)
												initialize LocalUOMCalculation
												LocalUOMCalculation.InputQuantity				= each.Quantity
												LocalUOMCalculation.InputUOM.UnitOfMeasure		= each.PurchaseOrderLineRel.EnteredBuyUOM
												LocalUOMCalculation.InputToUOM.UnitOfMeasure	= OriginalContractAndLine.OriginalContractLine.UOM.UnitOfMeasure
												LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

												LocalQuantity   								= LocalUOMCalculation.OutputQuantity
											else 
												LocalQuantity 									= each.Quantity 
											LocalAmount					= (LocalQuantity * OriginalContractAndLine.OriginalContractLine.BaseCost)
										else 
											LocalAmount                 = each.ExtendedAmt	
											LocalQuantity               = each.Quantity 
										invoke Update ParmTierQualifierCalculation
											invoked.CompetitiveAmount     += LocalAmount
											invoked.CompetitiveQuantity   += LocalQuantity
											if (each.CmContract !entered)
												invoked.OffContractAmount += each.ExtendedAmt											
										invoke Create TierQualifierCalculationDetail 
											invoked.ContractGroup				= ContractGroup 
											invoked.Contract                    = Contract 
											invoked.TierQualifierCalculation	= ParmTierQualifierCalculation
											invoked.DetailContract              = each.CmContract  
											invoked.PurchasingCompany           = each.PurchasingCompany 
											invoked.PurchaseOrder               = each.PoNumber 
											invoked.PurchaseOrderLine           = each.LineNbr 
											invoked.QualifiedOrCompetitiveItem  = QualifiedOrCompetitiveItem
											invoked.Quantity                    = each.Quantity 
											invoked.UnitCost                    = each.VbuyUnitCst

		UpdateItemInformation is an Instance Action 
			restricted 
			Action Rules 

				ItemNumber				= ContractLineRel.ItemNumber 
				Manufacturer            = ContractLineRel.Manufacturer 
				ManufacturerNumber      = ContractLineRel.ManufacturerNumber
				if (VendorItem entered)
					VendorItem          = ContractLineRel.VendorItem 	

		
		AttachQualifierToItem is an Instance Action 
			valid when (!HasTier)
			Parameters 
				ParmTier				is a ContractTier 
					default label is "Tier"
				ParmQualifier           is a ContractTierQualifier
					default label is "TierQualifier"

			Action Rules 

				ContractTier			= ParmTier 
				ContractTierQualifier   = ParmQualifier				

		ResetQualifiedCompetitiveFlags is a Set Action 
			restricted 
			Parameters 
				ParmContractGroup						is a ContractGroup 
				ParmContract            				is a Contract 
				ParmTierContract						is a Contract
				ParmQualifiedOrCompetitiveItem          is Numeric 1 

			Instance Selection 

				where (ParmContractGroup	= ContractGroup 
				and    ParmContract         = Contract 
				and    ParmTierContract     = OriginalContractAndLine.OriginalContract)	

			Action Rules 

				Instance Rules 

					QualifiedOrCompetitiveItem         = ParmQualifiedOrCompetitiveItem
			
