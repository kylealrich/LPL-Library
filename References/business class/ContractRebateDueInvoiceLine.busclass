ContractRebateDueInvoiceLine is a BusinessClass
	owned by po
	prefix is CRDIL

	Ontology
		symbolic key is ContractRebateDueInvoiceLine

	Patterns
        disable Auditing
        disable EffectiveDated
        implements DynamicCreation
        implements Archivable

	Persistent Fields
		Invoice										is an InvoiceNum
		Vendor										is Numeric size 9
		HasContractOnRebate							is Boolean	
		ItemUsedForQualification					is Boolean
		ManufacturerUnitCst							is an InternationalCost
		MatchedQty									is Decimal size 13.4
		CmContract									is like Contract
			default label is "Contract"
		MfgContract									is Numeric size 15
		ProcureGroup	 							is like ProcurementGroup
		InvoiceDte									is Date	
		Location									is AlphaUpper size 5
		ManufCode	       							is AlphaUpper size 4
		ManufDivision								is AlphaUpper size 4
		MultipleQualifierUpdate						is Boolean
		InvoiceAmount								is an InternationalAmount
		SupplierRebate								is Boolean
		PurchaseFromLoc								is like PurchaseFromLocation 
		PurchaseFromLocation						is Alpha size 30
		InvoiceStatus								is Numeric size 1
			States
				Released								value is 0
				Unreleased								value is 1
		UpdateTimeStamp								is TimeStamp
		IsForFirstQualifierForRebate				is Boolean
		IsForFirstQualifierCodeForRebateQualifier	is Boolean
		IsForQualifierItem							is Boolean										
    	CommCodes   			 					is Alpha size 35
    	MajorPurchasingClass						is like MajorPurchasingClass
    	MinorPurchasingClass						is like MinorPurchasingClass
       	UNSPSCSegment								is AlphaUpper size 2
       	UNSPSCFamily								is AlphaUpper size 2
       	UNSPSCClass									is AlphaUpper size 2
       	UNSPSCCommodity								is AlphaUpper size 2
    	QualifierItemCategory						is Numeric size 1
    		States
    			CommodityCode							value is 1
    			ManufacturerInformation					value is 2
				PurchasingClass							value is 3
    			UNSPSCCode								value is 4
				ItemOnly								value is 5
		IsForSupplementalRebate						is Boolean
								
	Local Fields
		LocalContractRebateDueInRel				is Date
		LocalContractRebateDueDate				is Date
		LocalContractRebateQualifierInRel		is Numeric size 6
												
	Derived Fields
		ComputeMatchedExtendedAmt is a DerivedField
			type is like InternationalCost
			return (ManufacturerUnitCst * MatchedQty)

		OldComputeMatchedExtendedAmt is a DerivedField
			type is like InternationalAmount
			restricted
			return ((old ManufacturerUnitCst) * (old MatchedQty))

		DerivedDisplayCalculationAmount is a DerivedField
			type is like InternationalAmount
			if (SupplierRebate)
				return InvoiceAmount
			else
			if (MultipleQualifierUpdate)
				return 0
			else
				return ComputeMatchedExtendedAmt
				
		DerivedDisplayQualificationAmount is a DerivedField
			type is like InternationalAmount
			if (SupplierRebate)
				return InvoiceAmount
			else
			if (!ItemUsedForQualification)
				return 0
			else
				return ComputeMatchedExtendedAmt
				
		DerivedPoNumber is a DerivedField
			type is Alpha size up to 24
			if (PayablesInvoice.ExternalPurchaseOrder entered)
				return PayablesInvoice.ExternalPurchaseOrder
			else
				return blank
				
		VendorReturnPOLineMessage is a LabelField
			restricted
			"Vendor_return_PO_line"
			
		POLineMessage is a LabelField
			restricted
			"PO_line"	
		
		DerivedMultipleQualifierUpdate is a ConditionalField
			type is Text
			restricted
			if (MultipleQualifierUpdate)
				"Yes"
			else
				blank
				
		DerivedPoLineLabel is a ConditionalField
			type is Text
			if (PurchaseOrderLine.VendorReturnLineExists
			and PayablesInvoice.VendorReturn entered)
				VendorReturnPOLineMessage
			else
				POLineMessage
				
		DerivedDisplayQualificationInUnits is a StringField
			type is Numeric size 10
			MatchedQty
			
	Conditions
		PolineExists
			restricted
			when (PurchaseOrderLine		exists)
			
		PercentBasedQualifier
			restricted
			when (ContractRebateDue.first ContractRebateQualifiersRel.RebatePurchaseAmtPct.PurchasePercent entered)
			
		IsALine
			restricted
			when (PayablesInvoiceDetailsRel exists)
			
		IsAnInvoice
			restricted
			when (!PayablesInvoiceDetailsRel exists)
			
		HasQualifierWithChanges
			restricted
			when (ContractRebate.QualifierChanged
			and   Contract.RebateEligible)	
	
		CalculateRebatesEligible
			restricted
			when (ContractRebate.QualifierChanged = false
			and   Contract.RebateEligible
			and   NotFixedRebate)
			
		NotFixedRebate
			restricted
			when (!ContractRebateType.RebateType.FixedRebateAmount)	
			
		HasQualifyingItem
			restricted
			when (ItemUsedForQualification)
			
		NoSameContractRebateDueInvoiceLineDifferentQualifierExists
			restricted
			when (!ContractRebateDueInvoiceLinesByInvoiceLineRel exists)
					
		AddToWorkClass
			restricted
			when (!QualifierCodeWorksByDifferentQualifierRel exists)

		GrowthRebate
			restricted
			when (ContractRebateType.RebateType.GrowthRebate)
					
		LoyaltyRebate
			restricted
			when (ContractRebateType.RebateType.LoyaltyRebate)
					
		QualifierByAmount
			restricted
			when (ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
		
		QualifierByPercent
			restricted
			when (ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
					
		QualifierByUnits
			restricted
			when (ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
		
		NonStockSpecialServiceItem
			restricted
			when (PurchaseOrderLine exists
			and  (PurchaseOrderLine.ItemType.NonStock
			or    PurchaseOrderLine.ItemType.Special
			or    PurchaseOrderLine.ItemType.Service))
			
		InventoryItem
			restricted
			when (PurchaseOrderLine exists
			and   PurchaseOrderLine.ItemType.Inventoried)
			
	Relations
		ContractRebateDueInvoiceLinesByInvoiceLineRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByInvoiceLine
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
				related.ContractRebateDueInvoiceLine	= ContractRebateDueInvoiceLine
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractLine                    = ContractLine 
				related.ContractRebateType				= ContractRebateType
				related.ContractRebateDue				= ContractRebateDue
			Instance Selection
				where (UniqueID						!= related.UniqueID
				and    ContractRebateQualifier		!= related.ContractRebateQualifier)
				
		LocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= Location
				
		PayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company             = Company
				
		MfgContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = MfgContract
				
		CmContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = CmContract
				
		ContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = CmContract
				related.ContractLine        = ContractLine
		
		ContractRebateDueQualifierRel
			one-to-one relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue					= ContractRebateDue
				related.ContractRebateQualifier				= ContractRebateQualifier
				related.ContractRebateDueQualifier			= blank
	
		LocalContractRebateDueQualifierRel
			one-to-one relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue					= LocalContractRebateDueDate
				related.ContractRebateQualifier				= LocalContractRebateQualifierInRel
				related.ContractRebateDueQualifier			= blank
				 
		QualifierCodeWorksByDifferentQualifierRel
			one-to-many relation to QualifierCodeWork
			Field Mapping uses ByUniqueIDWithoutQualifier
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue					= ContractRebateDue
			Instance Selection
				where ((!related.ContractRebateQualifier	= ContractRebateQualifier)
				or     ((related.ContractRebateQualifier	= ContractRebateQualifier)
				and     (!related.QualifierItemCategory		= QualifierItemCategory)))
				
		QualifierCodeWorksByRebateDueRel
			one-to-many relation to QualifierCodeWork
			Field Mapping uses symbolic key
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue					= ContractRebateDue

		ContractRebateDueQualifierChartsRel
			one-to-many relation to ContractRebateDueQualifierChart
			Field Mapping uses symbolic key
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue					= ContractRebateDue
				 
		ContractRebateDuesRelForCurrentBaseOfPurchases
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.ContractRebateDue	> LocalContractRebateDueInRel)
					
		LocalContractRebateDueRel
			one-to-one relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateDue			= LocalContractRebateDueDate

		VendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup			= ContractGroup
				related.Vendor				= Vendor
		
		PayablesInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
						
		PurchaseOrderLineSourceRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			
	Sets
		ByInvoiceNbr
			duplicates
			Sort Order
				Company
				PayablesInvoice
				ContractGroup
				Contract
				
		ByInvoiceLine
			indexed
			Sort Order
				Company
				PayablesInvoice
				PurchaseOrder
				PurchaseOrderLine
				ContractRebateDueInvoiceLine
				ContractGroup
				Contract
				ContractLine 
				ContractRebateType
				ContractRebateDue
				ContractRebateQualifier
				ContractRebate
				
		ByPurchFromLoc
			duplicates
			Sort Order
				Vendor
				PurchaseFromLocation

		ByCmContract
			duplicates
			Sort Order
				CmContract
																		
		ByBottomRebate
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebateQualifier
				ContractRebateDue
				ContractRebate

		ByUpdateTimestamp
			duplicates
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateDue
				UpdateTimeStamp
				
		ByIsForSupplementalRebate
			duplicates
			Sort Order
				ContractGroup
				Contract
				IsForSupplementalRebate
				ContractRebateType
				ContractRebate
				ContractRebateDue
				ContractRebateQualifier

	Actions
		Create is a Create Action
			restricted
			Action Rules
				UpdateTimeStamp									= current timestamp
							
		Update is an Update Action
			restricted
			Action Rules
				UpdateTimeStamp									= current timestamp
			
		Delete is a Delete Action
			restricted
			
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			
		RemoveRebateInvoiceLine is a Purge Action
			restricted
			
		FastUpdate is an Instance Action
			restricted
			Parameters
				PrmMultipleQualifierUpdate			is Boolean
				
			Action Rules
				MultipleQualifierUpdate			= PrmMultipleQualifierUpdate
				
		ReloadRebateInvoicesForQualifierChanges	is a Set Action
			restricted
			completion message is "ReloadForQualifierChangesIsComplete-RunRebateCalculationProgramOnceAllLoadJobsFinishInAsyncQueue"
			valid when (HasQualifierWithChanges)
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract
				PrmBeginMatchDate 		is Date
				PrmEndMatchDate  	 	is Date
				
			Parameter Rules
				PrmContractGroup
					required
						"ContractGroupIsRequired"
				PrmContract
					required
						"ContractIsRequired"
					constraint (PrmContract.RebateEligible)
						"ContractMustBeReleasedAndNotClosedOrInactive"
				PrmEndMatchDate
					if (PrmBeginMatchDate entered)
						required
					constraint (PrmEndMatchDate >= PrmBeginMatchDate)
						"EndMatchDateCannotPrecedeBeginMatchDate"
				
			Local Fields
				LocalDeleteRebateDueInvoiceLines			is Boolean
				LocalContractRebateType						is a ContractRebateType
				LocalContractRebate							is a ContractRebate
				LocalContractRebateDue						is a ContractRebateDue
				LocalContractRebateQualifier				is a ContractRebateQualifier
				LocalContractRebateDueQualifier				is a ContractRebateDueQualifier
				
			Instance Selection
				where (ContractRebateDueInvoiceLine.ContractGroup		= PrmContractGroup
				and    ContractRebateDueInvoiceLine.Contract			= PrmContract)
				
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateDue
				ContractRebateQualifier
			
			Action Rules
				Empty Set Rules
					invoke LoadAllRebateInvoicesForContractGroup ContractGroup 
						invoked.PrmContractGroup				= PrmContractGroup
						invoked.PrmContract						= PrmContract
						invoked.PrmBeginMatchDate				= PrmBeginMatchDate
						invoked.PrmEndMatchDate					= PrmEndMatchDate
								
				Contract Set Rules
					Exit Rules
						invoke LoadAllRebateInvoicesForContractGroup ContractGroup 
							invoked.PrmContractGroup				= PrmContractGroup
							invoked.PrmContract						= PrmContract
							invoked.PrmBeginMatchDate				= PrmBeginMatchDate
							invoked.PrmEndMatchDate					= PrmEndMatchDate
						
				ContractRebateType Set Rules
					Entrance Rules
						LocalContractRebateType					= ContractRebateType

				ContractRebate	Set Rules
					Entrance Rules
						LocalContractRebate						= ContractRebate
						if (ContractRebate.QualifierChanged)
							LocalDeleteRebateDueInvoiceLines	= true
					
					Exit Rules
						LocalDeleteRebateDueInvoiceLines		= false
						invoke SetQualifierChangedFlagToNo LocalContractRebate
						
				ContractRebateDue Set Rules
					Entrance Rules
						LocalContractRebateDue					= ContractRebateDue
						
					Exit Rules
						if 	(LocalDeleteRebateDueInvoiceLines)
							invoke InitializePurchases LocalContractRebateDue
							
							LocalContractRebateDueInRel		= LocalContractRebateDue
							LocalContractRebateDueDate		= first ContractRebateDuesRelForCurrentBaseOfPurchases.ContractRebateDue
							if (LocalContractRebateDueRel exists)
								invoke InitializePurchases LocalContractRebateDueRel
					
							LocalContractRebateDue					= LocalContractRebateDue + 1 year
							if (LocalContractRebateDue exists)
								invoke InitializePurchases LocalContractRebateDue

				ContractRebateQualifier	Set Rules
					Entrance Rules
						LocalContractRebateQualifier			= ContractRebateQualifier
						
					Exit Rules
						if 	(LocalDeleteRebateDueInvoiceLines)
							invoke InitializePurchases LocalContractRebateDueQualifier
						
							LocalContractRebateDueDate				= LocalContractRebateDue + 1 year
							if (LocalContractRebateDueRel exists)
								LocalContractRebateQualifierInRel	= LocalContractRebateQualifier
								invoke InitializePurchases LocalContractRebateDueQualifierRel

							LocalContractRebateDueInRel		= LocalContractRebateDue
							LocalContractRebateDueDate		= first ContractRebateDuesRelForCurrentBaseOfPurchases.ContractRebateDue
							if (LocalContractRebateDueRel exists)
								LocalContractRebateQualifierInRel	= LocalContractRebateQualifier
								invoke InitializePurchases LocalContractRebateDueQualifierRel
					
				Instance Rules
					if 	(LocalDeleteRebateDueInvoiceLines)
						invoke RemoveRebateInvoiceLine
							
		CalculateExpectedRebateDueAmounts is a Set Action	

			completion message is "CalculateExpectedRebateDueAmountsHasStarted;Check'MyScheduledActions'ForCompletion"
			valid when (CalculateRebatesEligible)
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract
				PrmBeginDueDate			is Date
				PrmEndDueDate   		is Date
				
			Parameter Rules
				PrmContractGroup
					required
						"ContractGroupIsRequired"
						
				PrmContract
					if (PrmContract entered)
						constraint (PrmContract.RebateEligible)
							"ContractMustBeReleasedAndNotClosedOrInactive"
						constraint (PrmContract.HasNoRebateQualifiersChanged)
							"CannotRun;ContractHasARebateWithChangedQualifiers.RunReloadFirst"
							
				PrmBeginDueDate
					if (PrmContract entered)
						force default to PrmContract.EffectiveDate
					else
						required
							"BeginDueDateIsRequired"
							
				PrmEndDueDate
					if (PrmContract entered)
						force default to PrmContract.ExpirationDate
						if (PrmEndDueDate 	entered
						and PrmBeginDueDate entered)
							constraint (PrmEndDueDate >= PrmBeginDueDate)
								"EndDueDateCannotPrecedeBeginDueDate"
						else
						if (PrmEndDueDate	not entered
						and PrmBeginDueDate entered)
							constraint (PrmContract.ExpirationDate >= PrmBeginDueDate)				
								"EndDueDateCannotPrecedeBeginDueDate"
						else
						if (PrmEndDueDate entered
						and PrmBeginDueDate not entered)
							constraint (PrmEndDueDate >= PrmContract.EffectiveDate)
								"EndDueDateCannotPrecedeBeginDueDate"
					else
						required
							"EndDueDateIsRequired"
						constraint (PrmEndDueDate >= PrmBeginDueDate)
							"EndDueDateCannotPrecedeBeginDueDate"

			Local Fields
				LocalContractRebateType							is a ContractRebateType
				LocalContractRebate								is a ContractRebate
				LocalContractRebateDue							is a ContractRebateDue
				LocalContractRebateQualifier					is a ContractRebateQualifier
				LocalContractRebateDueQualifier					is a ContractRebateDueQualifier
				LocalContractRebateDueQualifierChart			is a ContractRebateDueQualifierChart
				LocalQualifiedLoyaltyPercentToBePaid			is a Percent
				LocalQualifiedLoyaltyAmountToBePaid				is an InternationalAmount
				LocalMultipleOrQualifiers						is Boolean
				LocalMultipleAndQualifiers						is Boolean
				LocalRebateWithNoQualifierChanges				is Boolean
															
			Instance Selection
				where (ContractRebateDueInvoiceLine.ContractGroup		= PrmContractGroup
				and   (ContractRebateDueInvoiceLine.Contract			= PrmContract
				or     PrmContract	not entered)
				and    ContractRebateDue								>= PrmBeginDueDate
				and    ContractRebateDue								<= PrmEndDueDate)
				
			Sort Order
				ContractGroup
				Contract
				IsForSupplementalRebate
				ContractRebateType
				ContractRebate
				ContractRebateDue
				ContractRebateQualifier
				
			Accumulators
				QualifierContractSpend
				CalculationContractSpend
				QualifierAllContractsSpend
				QualifierContractSpendInUnits 
											
			Action Rules
				Set Rules
					Exit Rules
						invoke CalculateExpectedRebateDueAmount ContractRebateDueQualifier
							invoked.PrmContractGroup		= PrmContractGroup
							invoked.PrmContract				= PrmContract
							invoked.PrmBeginDueDate			= PrmBeginDueDate
							invoked.PrmEndDueDate   		= PrmEndDueDate
									
				ContractRebateType Set Rules
					Entrance Rules
						LocalContractRebateType					= ContractRebateType
			
				ContractRebate Set Rules
					Entrance Rules
						if (!ContractRebate.QualifierChanged)
							LocalRebateWithNoQualifierChanges	= true
						else
							LocalRebateWithNoQualifierChanges	= false
							 
				ContractRebateDue Set Rules
					Entrance Rules
						if (LocalRebateWithNoQualifierChanges)
							invoke Purge ContractRebateDueQualifierChartsRel
													
					Exit Rules
						if (LocalRebateWithNoQualifierChanges)
							invoke FastUpdateCurrentPurchases ContractRebateDue		
								invoked.PrmUpdateCurrentPurchases 			= CalculationContractSpend	
						
							invoke Purge QualifierCodeWorksByRebateDueRel	//These are temporary "work file" type records.

				ContractRebateQualifier Set Rules
					Entrance Rules
						if (LocalRebateWithNoQualifierChanges)
							LocalMultipleOrQualifiers						= false
							LocalMultipleAndQualifiers						= false
																								
					Exit Rules

						if (LocalRebateWithNoQualifierChanges)
							invoke FastUpdateQualifierCurrentPurchases ContractRebateDueQualifierRel
								invoked.PrmUpdateQualifierCurrentPurchases				= QualifierContractSpend	
								invoked.PrmUpdateQualifierAllContractsCurrentPurchases	= QualifierAllContractsSpend
								invoked.PrmUpdateQualifierCurrentPurchasesInUnits		= QualifierContractSpendInUnits
								
							if ((QualifierContractSpend		entered)
							and (ContractRebateDueQualifierRel exists))
								invoke Create ContractRebateDueQualifierChart
									invoked.ContractGroup						= ContractGroup
									invoked.Contract							= Contract
									invoked.ContractRebateType					= ContractRebateType
									invoked.ContractRebate						= blank
									invoked.ContractRebateDue					= ContractRebateDue
									invoked.ContractRebateQualifier				= ContractRebateQualifier
									invoked.ContractRebateDueQualifier			= ContractRebateDueQualifierRel.ContractRebateDueQualifier
									invoked.SpendAmount							= QualifierContractSpend
									invoked.SpendType							= LocalContractRebateDueQualifierChart.SpendType.QualifierOnContract
								
								if (GrowthRebate)
									invoke Create ContractRebateDueQualifierChart
										invoked.ContractGroup						= ContractGroup
										invoked.Contract							= Contract
										invoked.ContractRebateType					= ContractRebateType
										invoked.ContractRebate						= blank
										invoked.ContractRebateDue					= ContractRebateDue
										invoked.ContractRebateQualifier				= ContractRebateQualifier
										invoked.ContractRebateDueQualifier			= ContractRebateDueQualifierRel.ContractRebateDueQualifier
										invoked.SpendAmount							= ContractRebateDueQualifierRel.BaseOfPurchases
										invoked.SpendType							= LocalContractRebateDueQualifierChart.SpendType.BaseOfPurchasesForGrowth
								else
								if (LoyaltyRebate)
									invoke Create ContractRebateDueQualifierChart
										invoked.ContractGroup						= ContractGroup
										invoked.Contract							= Contract
										invoked.ContractRebateType					= ContractRebateType
										invoked.ContractRebate						= blank
										invoked.ContractRebateDue					= ContractRebateDue
										invoked.ContractRebateQualifier				= ContractRebateQualifier
										invoked.ContractRebateDueQualifier			= ContractRebateDueQualifierRel.ContractRebateDueQualifier
										invoked.SpendAmount							= ContractRebateDueQualifierRel.BaseOfPurchases
										invoked.SpendType							= LocalContractRebateDueQualifierChart.SpendType.BaseOfPurchasesForLoyalty
								else
								if (QualifierByAmount)
									invoke Create ContractRebateDueQualifierChart
										invoked.ContractGroup						= ContractGroup
										invoked.Contract							= Contract
										invoked.ContractRebateType					= ContractRebateType
										invoked.ContractRebate						= blank
										invoked.ContractRebateDue					= ContractRebateDue
										invoked.ContractRebateQualifier				= ContractRebateQualifier
										invoked.ContractRebateDueQualifier			= ContractRebateDueQualifierRel.ContractRebateDueQualifier
										invoked.SpendAmount							= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
										invoked.SpendType							= LocalContractRebateDueQualifierChart.SpendType.QualifierGoalAmount
								else
								if (QualifierByPercent)
									invoke Create ContractRebateDueQualifierChart
										invoked.ContractGroup						= ContractGroup
										invoked.Contract							= Contract
										invoked.ContractRebateType					= ContractRebateType
										invoked.ContractRebate						= blank
										invoked.ContractRebateDue					= ContractRebateDue
										invoked.ContractRebateQualifier				= ContractRebateQualifier
										invoked.ContractRebateDueQualifier			= ContractRebateDueQualifierRel.ContractRebateDueQualifier
										invoked.SpendAmount							= (QualifierAllContractsSpend - QualifierContractSpend)
										invoked.SpendType							= LocalContractRebateDueQualifierChart.SpendType.QualifierOffContract
							
				Instance Rules
					if (LocalRebateWithNoQualifierChanges)
						if (InvoiceStatus.Unreleased)
							if (!PayablesInvoice exists)
								invoke RemoveRebateInvoiceLine ContractRebateDueInvoiceLine
								

						if (HasContractOnRebate)	
							CalculationContractSpend					+= ComputeMatchedExtendedAmt	//any "double dipping" of spend amount due to more than one qualifier will be removed by reading the QualifierCodeWork business class										
							if ((ContractRebateQualifier.CalculateOnAllContractItemsSpend)	
							or ((!ContractRebateQualifier.CalculateOnAllContractItemsSpend)		//to avoid "double dipping" of spend amount from qualifier item and qualifier codes, only the spend from qualifier item is used, and it covers all of the on-contract spend for the entire contract.
							and (QualifierItemCategory.CommodityCode	
			    			or   QualifierItemCategory.ManufacturerInformation
							or   QualifierItemCategory.PurchasingClass
							or   QualifierItemCategory.UNSPSCCode)))	//to avoid "double dipping" of spend amount from qualifier item and qualifier codes, only the spend from qualifier item is used, and it covers all of the on-contract spend for the entire contract.
								if (AddToWorkClass)
									invoke Create QualifierCodeWork			
										invoked.ContractGroup					= ContractGroup
										invoked.Contract						= Contract
										invoked.ContractRebateType				= ContractRebateType
										invoked.ContractRebate					= blank
										invoked.ContractRebateDue				= ContractRebateDue
										invoked.ContractRebateQualifier			= ContractRebateQualifier
										invoked.ContractRebateDueInvoiceLine	= ContractRebateDueInvoiceLine
										invoked.SpendAmount						+= ComputeMatchedExtendedAmt
										invoked.QualifierItemCategory			= QualifierItemCategory
								else
									MultipleQualifierUpdate				= true
									CalculationContractSpend			-= ComputeMatchedExtendedAmt	
									invoke FastUpdate ContractRebateDueInvoiceLine
										invoked.PrmMultipleQualifierUpdate	= true
						else
						if (SupplierRebate)		//this ContractRebateDueInvoiceLine is for an "all invoices for a supplier" rebate, and this type of rebate does not have multiple qualifiers of any kind.													
							CalculationContractSpend						+= InvoiceAmount	


						if (HasContractOnRebate)	
							if (ItemUsedForQualification)	
								QualifierContractSpend					+= ComputeMatchedExtendedAmt	//this is the "happy path" accumulation where the on-contract line is to be used for qualification
								QualifierAllContractsSpend				+= ComputeMatchedExtendedAmt	
								QualifierContractSpendInUnits			+= MatchedQty
						else
						if (SupplierRebate)		//this ContractRebateDueInvoiceLine is for an "all invoices for a supplier" rebate, and this type of rebate does not have multiple qualifiers of any kind.													
							QualifierAllContractsSpend					+= InvoiceAmount	
							QualifierContractSpend						+= InvoiceAmount	
						else
							QualifierAllContractsSpend					+= ComputeMatchedExtendedAmt	

		PurgeRebateDueInvoiceLines is a Set Action

			restricted
			completion message is "PurgeRebateDueInvoiceLinesIsComplete"
			Parameters
				PrmContractGroup				is a ContractGroup
				PrmBeginDate					is Date
				PrmEndDate                      is Date
				
			Parameter Rules
				PrmContractGroup
					required
						"ContractGroupRequired"
				
				PrmBeginDate
					required
						"DeleteBeginDateIsRequired"
						
				PrmEndDate
					default to current corporate date
					
 		           	constraint (PrmEndDate >= PrmBeginDate)
        		    	"DeleteEndDateCannotPrecedeDeleteBeginDate"
					
			Instance Selection
				where (ContractGroup			= PrmContractGroup
				and   (ContractRebateDue        >= PrmBeginDate
				and    ContractRebateDue        <= PrmEndDate))
				
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateDue
								
			Action Rules
				Instance Rules
					invoke Purge 			

							
