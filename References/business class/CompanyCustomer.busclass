CompanyCustomer is a BusinessClass
	owned by ar
	prefix is ACM
	classic name is ARCUSTOMER

	Ontology
		symbolic key is CompanyCustomer
			classic set name is ACMSET1

	Patterns
		implements ContextualParent
		implements StaticJava
		disable AuditIndex
		implements BODId
		implements InlineUserFields
			size is 1000

	Persistent Fields
		ReceivableDefaultCode
			classic name is DEFAULT-COD
		ActiveStatus							is AlphaUpper size 1
			default label is "Status"
			States
				Active		value is "A"
				Inactive	value is "I"
				Delete		value is "D"
		NationalAccountIndicator				is AlphaUpper size 1
			classic name is NAT-FLAG
			States
				Child	value is "I"
				Parent	value is "N"
				No	 value is blank
		SearchName
		ReceivableHoldCode
			classic name is HOLD-CODE
		Contact
		PhoneNumber								is a TelephoneNumber 
			holds pii
			classic name for PhoneNumber.InternationalPrefix is INT-PREFIX
			classic name for PhoneNumber.SubscriberNumber is PHONE-NMBR
			classic name for PhoneNumber.Extension is PHONE-EXT
		TelexNbr								is a TelexNumber 
			holds pii
		EDINumber
			classic name is EDI-NBR
		AlternateEDINumber						is an AltEdiNbr
			classic name is ALT-EDI-NBR
		AlternateEDIType						is an AltEdiType
			classic name is ALT-EDI-TYPE
		FaxNumber 
			holds pii
			classic name for FaxNumber.SubscriberNumber is FAX-NMBR
			classic name for FaxNumber.Extension is FAX-EXT
		StartDate
		CreditAnalyst
			classic name is CREDIT-ANLYST
		Currency
			classic name is CURRENCY-CD
		SalesRepresentative
			classic name is SALESMAN
		RiskIndicator							is a RiskCd
			classic name is RISK-CD
		CustomerMajorClass
			classic name is MAJ-CLASS
		CustomerMinorClass
			classic name is MIN-CLASS
		CurrentBalance							is an InternationalAmount
			disable Auditing	
			classic name is CURR-BAL
		BillOfExchangeBalance					is an InternationalAmount
			disable Auditing	
			classic name is DRAFT-BAL
		OpenOrderAmount							is an InternationalAmount
			disable Auditing	
			classic name is OPEN-ORDS
		OrderLimit								is an OrderLim
			classic name is ORDER-LIM
		CreditLimit								is a CreditLim
			classic name is CREDIT-LIM
		CreditLimitDate							is Date
			classic name is CREDIT-LIM-DAT
		CreditReviewDays						is a CreditRevdays
			classic name is CREDIT-REVDAYS
		LastPaymentAmount						is an InternationalAmount
			disable Auditing	
			classic name is LAST-PMT-AMT
		LastPaymentDate							is Date
			disable Auditing	
			classic name is LAST-PMT-DATE
		LastInvoiceDate							is Date
			disable Auditing	
			classic name is LAST-INV-DATE
		LastInvoiceAmount						is an InternationalAmount
			disable Auditing	
			classic name is LAST-INV-AMT
		LastStatementDate						is Date
			disable Auditing	
			classic name is LAST-STA-DATE
		LastStatementBalance					is an InternationalAmount
			disable Auditing	
			classic name is LAST-STA-BAL
		ReviewDate								is Date
		ReviewCode
		HigHBalance								is a HighBalX13InArcustomer
			disable Auditing	
			classic name is HIGH-BAL
		PerRtmses								is a PerRtmsX13InArcustomer
			disable Auditing	
			classic name is PER-RTMS
		PaidPrmpts								is a PaidPrmptX12InArcustomer
			disable Auditing	
			classic name is PAID-PRMPT
		InvPaids								is an InvPaidX12InArcustomer
			disable Auditing	
			classic name is INV-PAID
		CollectDayses							is a CollectDaysX11InArcustomer
			disable Auditing	
			classic name is COLLECT-DAYS
		CurrentCashPaid							is an InternationalAmount
			disable Auditing	
			classic name is CURR-CASH
		CurrentCashDays							is an InternationalAmount
			disable Auditing	
			classic name is CURR-CSH-DAYS
		YearToDateCashPaid						is an InternationalAmount
			disable Auditing	
			classic name is YTD-CASH
		YearToDateCashDays						is an InternationalAmount
			disable Auditing	
			classic name is YTD-CSH-DAYS
		Year2CollectionDays						is a Year2Days
			disable Auditing	
			classic name is YEAR-2-DAYS
		StaticAgingCurrentPeriodAmount			is an InternationalAmount
			disable Auditing	
			classic name is STATIC-CUR
		Agings									is an AgingX5InArcustomer
			disable Auditing	
			classic name is AGING
		LastComment
			disable Auditing	
		DisputedInvoices						is Decimal size 3
			disable Auditing	
			classic name is DISP-NBR
		DisputedInvoiceAmount					is an InternationalAmount
			disable Auditing	
			classic name is DISP-AMT
		ProcessLevelRestrictions				is Boolean
			classic name is PL-EXCL-FL
		AgeDisputesRule							is AlphaUpper size 1
			classic name is AGE-DISPUTES
			States
				AgedInCurrentColumn		value is "N"
				AgeByTransactionDate	value is "Y"
		DisputedTransFinanceCharged				is Boolean
			classic name is DISPUTES-FIN
		AutomaticCashApplication				is Boolean  
			classic name is AUTO-APP-FL
		AutomaticApplicationMethod				is AlphaUpper size 1
			classic name is AUTO-METHOD
			States
				None			value is blank
				Algorithm		value is "A"
				BalanceForward	value is "B"
				LastStatement	value is "L"
				Remittance		value is "R"
				UserDefined		value is "U"
		ApplicationCode							is an AutomaticCashApplicationCode
		AutomaticDunning						is Boolean
			classic name is AUTO-DUNN-FL
		ApplicationDiscountGraceDays			is a DiscGracePd
			classic name is DISC-GRACE-PD
		PercentOfBalanceToCreditLimit			is a CrVarPct
			disable Auditing	
			classic name is CR-VAR-PCT
		DebitCreditMemoTermsCode				is a TermsCode
			classic name is MEMO-TERM
		PrintChargebacks						is Boolean
			classic name is CHRGBK-PRT-FL
		ReceivableProcessingMethod				is AlphaUpper size 1
			classic name is OPEN-BAL-FWD
			States
				None			value is blank
				BalanceForward	value is "B"
				OpenItem		value is "O"
		BalanceForwardStatementCycle
		StatementRequired						is Boolean
			classic name is STATEMENT-REQ
		OpenItemStatementCycle
		ReceivableStatementCycle				is a StmntCycle
			classic name is STMNT-CYCLE
		ReceivableLockBox
			classic name is LOCK-BOX
			default label is "Lockbox"	
		ZeroBalanceStatement					is Boolean
			classic name is ZERO-STMNT-FL
		CreditBalanceStatement					is Boolean
			classic name is CRED-STMNT-FL
		PastDueOnlyStatement					is Boolean
			classic name is PAST-STMNT-FL
		OverCreditLimitStatement				is Boolean
			classic name is OVER-STMNT-FL
		MaximumAutoAdjustAmount					is a MaxAutoAmtX3InArcustomer
			classic name is MAX-AUTO-AMT
		MaxAutoPcts								is a MaxAutoPctX3InArcustomer
			classic name is MAX-AUTO-PCT
		MaximumShortReasonCode					is a ShortReasonCodes
			classic name is AUTO-REAS-CD
		DiscountAdjustmentReason				is an ApplicationAdjustmentReason
			classic name is DISC-REAS-CD
		BankTransactionCode
			classic name is BANK-INST-CODE
		BillOfExchangeProcessing				is a DraftFlag
			classic name is DRAFT-FLAG
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivableGlobalLedgerCode"
		TermsCode
			classic name is TERMS-CD
		DaysBeyondTermsCash						is an InternationalAmount
			disable Auditing	
			classic name is TERMS-CASH
		DaysBeyondTermsCashDays					is an InternationalAmount
			disable Auditing	
			classic name is TERMS-CSH-DAYS
		DaysBeyondTermsRatio					is a DbtRatioX11InArcustomer
			disable Auditing	
			classic name is DBT-RATIO
		DaysBeyondTermsPriorYear				is a DbtPrYr
			disable Auditing	
			classic name is DBT-PR-YR
		DaysBeyondTermsYearToDateCash			is an InternationalAmount
			disable Auditing	
			classic name is DBT-YTD-CASH
		DaysBeyondTermsYearToDateDays			is an InternationalAmount
			disable Auditing	
			classic name is DBT-YTD-DAYS
		LatePaymentAndFinanceCharges			is AlphaUpper size 1
			classic name is LATE-PAY-FL
			States
				None				value is blank
				Both				value is "B"
				FinanceCharges		value is "F"
				LatePaymentCharges	value is "L"
		FinanceChargeCalculationMethod			is AlphaUpper size 1
			classic name is FIN-CALC-TYPE
			States
				CalculatePerTransaction	value is "D"
				NetBalanceCalculation	value is "N"
		FinanceChargeCode
			classic name is FIN-CHRG-CD
		FinanceChargeDueDateGraceDays			is a FinGracDays
			classic name is FIN-GRAC-DAYS
		MinimumFinanceChargeAmount				is a FinMinChrg
			classic name is FIN-MIN-CHRG
		PrintFinanceChargeDocument				is Boolean
			classic name is FIN-DOC-PRNT
		LastDunningLetterNumber					is a LastDunn
			disable Auditing	
			classic name is LAST-DUNN
		LastDunningLetterDate					is Date
			disable Auditing	
			classic name is LAST-DUN-DATE
		LastDunningLetterAmount					is an InternationalAmount
			disable Auditing	
			classic name is LAST-DUN-AMT
		TaxExempt								is Boolean
			classic name is TAX-EXEMPT-CD
			default label is "PreventTaxCodeDefaulting" 	
		TaxCode
		Territory
		AgingCode
		RevalueCurrencyTransactions				is Boolean
			classic name is REVALUE-FL
		NumberOfDishonoredBillOfExchange		is a Dishonored
			disable Auditing	
			sql name is NOfDishonoredBillOfExchange
			classic name is DISHONORED
		DishonoredBillOfExchangeTotal			is an InternationalAmount
			disable Auditing	
			classic name is DISHONORED-AMT
		ReconciledDishonoredBillOfExchange		is a ReconcileWo
			sql name is RDishonoredBillOfExchange
			classic name is RECONCILE-CASH
		DishonoredRenegotiatedBillOfExchange	is a ReconcileWo
			sql name is DRenegotiatedBillOfExchange
			classic name is RECONCILE-RNEG
		WriteOffDishonoredBillOfExchange		is a ReconcileWo
			sql name is WOffDishonoredBillOfExchange
			classic name is RECONCILE-WO
		ChargeMinimumFinanceCharge				is Boolean
			classic name is MINIMUM
		FinanceChargeCycle
			classic name is FIN-CYCLE
		DunningCycle
			classic name is DUN-CYCLE
		AutomaticTransactionRemoval				is Boolean
			classic name is AUTO-REMOVE
		InvoiceMinimumFinanceCharge				is an IFinMinChrg
			classic name is I-FIN-MIN-CHRG
		DetailChargebackDate					is a CbDtlDate
			classic name is CB-DTL-DATE
		VATCustomerReportType
			classic name is VAT-CUST-TYPE
		VATRegistrationNumber
			classic name is VAT-REG-NBR
		VATRegistrationCountry					is a Country
			classic name is VAT-REG-CTRY
		DunningLetterIndicator					is Boolean
			classic name is DUN-LTR-IND
		DunningProcessCode
			classic name is DUN-PROCESS-CD
		LanguageCode							is an IsoLocale
		LastDunningLetter
			classic name is LST-DUNLTR-STM
		LastLetterDate							is Date
			disable Auditing	
		LastDunningLetterTextCode				is like DunningTextCode
			classic name is LST-LTRTEXT-CD
		AssessDunningFee						is Boolean
			classic name is ASSESS-DUN-FEE
		CreditAgencyName
			classic name is CU-NAME
		CreditAgencyPostalAddress				is a PostalAddressV2	
			holds pii
			classic name for CreditAgencyPostalAddress.DeliveryAddress.AddressLine1 is CU-ADDR1
			classic name for CreditAgencyPostalAddress.DeliveryAddress.AddressLine2 is CU-ADDR2
			classic name for CreditAgencyPostalAddress.DeliveryAddress.AddressLine3 is CU-ADDR3
			classic name for CreditAgencyPostalAddress.DeliveryAddress.AddressLine4 is CU-ADDR4
			classic name for CreditAgencyPostalAddress.Municipality is CU-CITY
			classic name for CreditAgencyPostalAddress.StateProvince is CU-STATE
			classic name for CreditAgencyPostalAddress.PostalCode is CU-POSTAL-CODE
			classic name for CreditAgencyPostalAddress.County is CU-COUNTY
			classic name for CreditAgencyPostalAddress.Country is CU-COUNTRY-CD
		ThirdPartyPayer							is Boolean
			classic name is THIRD-PARTY
		EmailAddress							is an EmailAddressMulti 
			holds pii
			classic name is E-MAIL-ADDRESS
		URLAddress
			classic name is URL-ADDR
		CustomerChangeAudit						is Boolean
			classic name is CUST-AUDIT
		ApplyMixedSignedLineItemsAutomatically is Boolean
			sql name is AMSignedLineItemsAutomatically
			classic name is APPLY-MIXED
		ObjectID								is an ObjId
			classic name is OBJ-ID
		MaximumOverageAmount					is an InternationalAmount
			classic name is PAY-AUTO-AMT
		MaximumOveragePercent
			classic name is PAY-AUTO-PCT
		MaximumOverageReasonCode				is an ApplicationAdjustmentReason
			classic name is PAY-REAS-CD
		MultipleDunningLetters					is Boolean
			classic name is MULT-DUN-LTR
		Affiliate								is Boolean
			classic name is AFFILIATE-FL
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		TwitterID 
			holds pii
			classic name is SOCIAL-ID1
		SocialNetworkID2 
			holds pii
			classic name is SOCIAL-ID2
		SocialNetworkID3 
			holds pii
			classic name is SOCIAL-ID3
		SocialNetworkID4 
			holds pii
			classic name is SOCIAL-ID4
		SocialNetworkID5 
			holds pii
			classic name is SOCIAL-ID5
		CarrierFlag								is Boolean
		OriginatingInterfaceRun					is a CustomerInterfaceResult
			delete ignored
		InterfaceInProcess						is Boolean
		CustomerGroup is like CustomerGroup
			restricted
		IDMPaymentRequestNoticeSequenceNumber	is Numeric 4
			protected
		VATValidation	
		AffiliateOwnership						is AlphaUpper size 1
			States
				ParentEnterprise		value is "P"
				SubsidiaryEnterprise	value is "S"
				FellowEnterprise		value is "F"
		AdministrativeFee							is an InternationalAmount

		PrintReceivablesStatement					is Boolean
			default label is "ReceivablesStatement"
		PrintBasicDunningLetter						is Boolean
			default label is "BasicDunningLetter"
		PrintAdvancedDunningLetter					is Boolean
			default label is "AdvancedDunningLetter"
		PrintPaymentRequestNotice					is Boolean
			default label is "PaymentRequestNotice"
		PrintBillingInvoice							is Boolean
			default label is "BillingInvoice"
		PrintReceivableInvoice						is Boolean
			default label is "ReceivableInvoice"
		PrintSubleaseBillingInvoice					is Boolean
			default label is "SubleaseBillingInvoice"
		PrintPaymentReceipt							is Boolean
			default label is "PaymentReceipt"
		PrintPrepaymentReceipt						is Boolean
			default label is "PrepaymentReceipt"
		EmailReceivablesStatement				is Boolean
		EmailBasicDunningLetter					is Boolean
		EmailAdvancedDunningLetter				is Boolean
		EmailPaymentRequestNotice				is Boolean
		EmailBillingInvoice						is Boolean
		EmailReceivableInvoice					is Boolean
		EmailSubleaseBillingInvoice				is Boolean
		EmailPaymentReceipt						is Boolean
		EmailPrepaymentReceipt					is Boolean
		ReceivablesStatementFromAndReplyToEmail		is an EmailAddress 
			holds pii
		BasicDunningLetterFromAndReplyToEmail		is an EmailAddress 
			holds pii
		AdvancedDunningLetterFromAndReplyToEmail	is an EmailAddress 
			holds pii
		PaymentRequestNoticeFromAndReplyToEmail		is an EmailAddress 
			holds pii
		BillingInvoiceFromAndReplyToEmail			is an EmailAddress 
			holds pii
		EmailEFTNotificationPrint				is Boolean
		EFTNotificationPrintFromAndReplyToEmail	is an EmailAddress 
			holds pii
		ReceivableInvoiceFromAndReplyToEmail	is an EmailAddress 
			holds pii
		MobileNumber							is a MobilePhone 
			holds pii
		SubleaseBillingInvoiceFromAndReplyToEmail	is an EmailAddress 
			holds pii
		PaymentReceiptFromAndReplyToEmail			is an EmailAddress 
			holds pii
		PrepaymentReceiptFromAndReplyToEmail		is an EmailAddress 
			sql name is PreReceiptFromAndReplyToEmail
			holds pii
		CompanyCustomerSearchDocument			is Text 
			text searchable
			disable Auditing
		BillingInvoiceEmailContactsOnly			is Boolean
			protected
			restricted
		BillingInvoiceEmailOption				is Numeric size 1
			States
				CompanyCustomerAndContacts		value is 0
				ContactsOnly					value is 1
				BillToOnly						value is 2
				BillToAndContacts				value is 3
		ReceivablesStatementEmailContactsOnly	is Boolean
		BasicDunningLetterEmailContactsOnly		is Boolean
		AdvancedDunningLetterEmailContactsOnly	is Boolean
		PaymentRequestNoticeEmailContactsOnly	is Boolean
		EFTNotificationPrintEmailContactsOnly	is Boolean
		ReceivableInvoiceEmailContactsOnly		is Boolean
		SubleaseBillingInvoiceEmailContactsOnly	is Boolean
		PaymentReceiptEmailContactsOnly			is Boolean
		PrepaymentReceiptEmailContactsOnly		is Boolean
			sql name is PreReceiptEmailContactsOnly
		TemporaryCurrentBalance                 is an InternationalAmount
			disable Auditing
		TemporaryBillOfExchangeBalance		    is an InternationalAmount
			disable Auditing
		BalanceConversionResult                 is a ReceivablesJobResult
			disable Auditing

	Attach Rules
		constraint (BypassRuleForTheseFiles
		or		  !ActiveStatus.Delete)
			"ActionNotAllowedIfCustomerSetForDeletion"


	Context Fields

		CustomerRepresentative
		VATDateRange							is a DateRange	
		FSMInboundBODTracker

	Transient Fields
		TransientSelectedAmount					is an InternationalAmount
			derive value from DerivedSelectedAmount

		TransientNetBalance						is an InternationalAmount
			derive value from DerivedNetBalance
		IncludeNationalAccountTransactions		is Numeric 1
			States
				No		value is 1
				Yes		value is 2
		DisplayCurrency							is Numeric 1
			States
				Transaction				value is 1
					default label is "Trans"
				Base					value is 2
					default label is "Base"
				BothAmounts				value is 3
					default label is "Both Amt"
				BothOpenAmounts			value is 4
					default label is "Both Open"
				CurrentRateOpenAmount	value is 5
					default label is "Current Rate Open"
		TransientNetBalanceCurrency				is a Currency
		TransientBillingCustomerCode			is a BillingCustomerCode
			derive value from CompanyCustomer.OrderEntryCustomer.BillingCustomerCode
		TransientPriceList						is a PriceListContractPromotion
			derive value from CompanyCustomer.OrderEntryCustomer.PriceList
		TransientTerritory						is a Territory
			derive value from CompanyCustomer.OrderEntryCustomer.Territory
		TransientCarrier						is a Vendor
			derive value from CompanyCustomer.OrderEntryCustomer.Carrier
		TransientBillingFreightCode				is a BillingFreightCode
			derive value from CompanyCustomer.OrderEntryCustomer.BillingFreightCode
		TransientBrokenCaseCharge				is Boolean
			derive value from OECBrokenCaseCharge
		TransientSalesman2						is a SalesRepresentative
			derive value from CompanyCustomer.OrderEntryCustomer.Salesman2
		TransientCommissionSplitPercentage		is a CommissionSplitPercentage
			derive value from CompanyCustomer.OrderEntryCustomer.CommissionSplitPercentage
		TransientBillingLineItemRequired		is Boolean
			derive value from OECBillingLineItemRequired
		TransientDefaultCustomerShipTo			is a CustomerShipTo
			context of Customer
			derive value from CompanyCustomer.OrderEntryCustomer.DefaultCustomerShipTo
		TransientDefaultShippingLocation		is an InventoryLocation
			derive value from CompanyCustomer.OrderEntryCustomer.DefaultShippingLocation
		TransientDefaultShippingMethod			is a ShippingMethod
			derive value from CompanyCustomer.OrderEntryCustomer.DefaultShippingMethod
		TransientProofOfDeliveryRequired		is Boolean
			derive value from OECProofOfDeliveryRequired
		TransientProofOfDeliveryGracePeriod	is a ProofOfDeliveryGracePeriod
			derive value from CompanyCustomer.OrderEntryCustomer.ProofOfDeliveryGracePeriod
		TransientCashInAdvanceRequired			is Boolean
			derive value from OECCashInAdvanceRequired
		TransientCashInAdvanceRequiredPercent	is a CashInAdvanceRequiredPercent
			derive value from OECCashInAdvanceRequiredPercent
		TransientProformaCashInAdvanceRequired			is Boolean
			derive value from OECProformaCashInAdvanceRequired
		TransientProformaCashInAdvanceRequiredPercent	is a ProformaCashInAdvanceRequiredPercent
			derive value from OECProformaCashInAdvanceRequiredPercent
		TransientPickingPriority						is a PickingPriority
			derive value from CompanyCustomer.OrderEntryCustomer.PickingPriority
		TransientTotalCODOrderLimit						is a TotalCODOrderLimit
			derive value from CompanyCustomer.OrderEntryCustomer.TotalCODOrderLimit
		TransientOrderDiscountCode						is a OrderDiscountCode
			derive value from CompanyCustomer.OrderEntryCustomer.OrderDiscountCode
		TransientCreditLimitHoldCode					is a ReceivableHoldCode
			derive value from CompanyCustomer.OrderEntryCustomer.CreditLimitHoldCode
		TransientOrderLimitHoldCode						is a ReceivableHoldCode
			derive value from DerivedOrderLimitHoldCode
		TransientSingleOrderHoldCode					is a ReceivableHoldCode
			derive value from CompanyCustomer.OrderEntryCustomer.SingleOrderHoldCode
		TransientCashOnDeliveryOrderHoldCode			is a ReceivableHoldCode
			derive value from CompanyCustomer.OrderEntryCustomer.CashOnDeliveryOrderHoldCode
		TransientVendor									is a Vendor
			derive value from CompanyCustomer.OrderEntryCustomer.Vendor
		TransientPurchFrLoc								is a PurchFrLoc
			derive value from CompanyCustomer.OrderEntryCustomer.PurchFrLoc
		TransientShipTerm								is a ShipTerm
			derive value from CompanyCustomer.OrderEntryCustomer.ShipTerm
		TransientPortCode								is a PortCode
			derive value from CompanyCustomer.OrderEntryCustomer.PortCode
		TransientCheckCreditOnOrderAdd					is Boolean
			derive value from OECCheckCreditOnOrderAdd
		TransientSingleOrderLimit						is a TotalCODOrderLimit
			derive value from CompanyCustomer.OrderEntryCustomer.SingleOrderLimit
		TransientCheckCreditBeforePickingList	is Boolean
			derive value from OECCheckCreditBeforePickingList
		TransientAllowReturns					is Boolean
			derive value from OECAllowReturns
		TransientLastReturnAuthorizationDate	is Date
			derive value from CompanyCustomer.OrderEntryCustomer.LastReturnAuthorizationDate
		TransientCustomeOrderAcknowledgments	is Boolean
			derive value from OECCustomeOrderAcknowledgments
		TransientShipCompleteFlag				is a ShipCompleteFlag
			derive value from CompanyCustomer.OrderEntryCustomer.ShipCompleteFlag
		TransientPORequiredForCustomerOrder		is Boolean
			derive value from OECPORequiredForCustomerOrder
		TransientBackorderAllowed				is Boolean
			derive value from OECBackorderAllowed
		TransientAgeCredPcts					is an AgeCredPctX5InOecust
			derive value from CompanyCustomer.OrderEntryCustomer.AgeCredPcts
		TransientOrderAgingPriodLimitHoldCode	is an AgeHoldCdX5InOecust
			derive value from CompanyCustomer.OrderEntryCustomer.OrderAgingPriodLimitHoldCode
		TransientNationalAccountGroup is a NationalAccountGroup
			derive value from NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup
		TransLinkedWithVendor					is Boolean
			derive value from DerivedHasVendor
		TransientHasCustomerBalance				is Boolean
			derive value from DerivedCustomerBalance
		TransientHasVendorBalance				is Boolean
			derive value from DerivedVendorBalance
		TransNetCustomerBalance					is like InternationalAmount
			derive value from DerivedNetCustomerBalance
		TransNetVendorBalance					is like InternationalAmount
			derive value from DerivedNetVendorBalance
		ByPassOECustomerCreate					is Boolean
		ICountryCode							is like Country					
		IVatNumber								is like VATRegistrationNumber 
			holds pii
		IRequesterCountryCode					is like Country					
		IRequesterVatNumber						is like VATRegistrationNumber 
			holds pii
		TransientCurrentPlusBillOfExchangeBalance	is like InternationalAmount 
			derive value from CurrentPlusBillOfExchangeBalance
		TransientIncludeElectronicFundsTransferCustomerGroupTransactions	is Boolean	
			default label is "IncludeElectronicFundsTransferGroupedCustomers"	
		BypassValidActorContext					is Boolean
		TransientTempCurrentPlusBillOfExchangeBalance is like InternationalAmount
			derive value from TempCurrentPlusBillOfExchangeBalance


	Local Fields
		LocalTemp							is Alpha 500	
		LocalNationalCompany				is like Company
		LocalNationalCustomer				is like Customer
		UseTransientBillingInputs			is Boolean
		ValidateReceivablePrefix
		BillingCustomerCode

		PriceList


		Salesman2							is Numeric 4



		TotalCODOrderLimit		

		SingleOrderHoldCode					is a ReceivableHoldCode
		OrderLimitHoldCode					is a ReceivableHoldCode
		CreditLimitHoldCode					is a ReceivableHoldCode
		OrderDiscountCode					is like OrderDiscountCode
		CashInAdvanceRequired				is Boolean
		CashInAdvanceRequiredPercent
		ProofOfDeliveryGracePeriod
		DefaultShippingMethod				is a ShippingMethod
		ProofOfDeliveryRequired				is Boolean
		DefaultShippingLocation				is an InventoryLocation
		PurchFrLoc
		OECustomerVendor					is a Vendor
		PickingPriority			



		LocalBalanceForwardIndicator		is Boolean
		NetBalanceLabel						is Alpha 2
		CurrentYear							is Numeric 4
		LocalCurrentYear					is Numeric 4
		CurrentPeriod						is Numeric 2
		LocalCurrentPeriod					is Numeric 2
		PartialPeriod						is Decimal size 4.2

		LocalFromCurrency					is a FromCurrency
		LocalToCurrency						is a ToCurrency
		LocalTransactionDate				is Date

		LocalUseCustomerCurrency			is Boolean


		LocalVoucherNumber					is a VoucherNumber
		LocalOverrideAccount				is Boolean
		LocalTranscendAccounts				is Boolean
		LocalARInvoice						is like ReceivableInvoice
		LocalARInvoiceSeq					is like Sequence
		LocalCompany						is like ReceivableCompany
		LocalTransactionType				is AlphaUpper 1
		LocalInvoice						is like ReceivableInvoice
		LocalInvoiceCount					is Numeric 3
		LocalProcessLevel					is like ReceivableProcessLevel
		LocalAccountingUnit					is a FinanceCodeBlock
		LocalAccrualCode					is like PayablesAccrualCode
		LocalVerifyOK						is Boolean
		LocalReasonCode						is a ReceivableReason
		LocalReasonType						is a ReceivableReasonType
		LocalSelectBaseAmount				is an InternationalAmount
		LocalSelectOrigAmount				is an InternationalAmount
		LocalTranAmount						is an InternationalAmount
		LocalOrigAmount						is an InternationalAmount
		LocalAccumTranAmount				is an InternationalAmount
		LocalAccumOrigAmount				is an InternationalAmount
		LocalAccumTranVendorAmount			is an InternationalAmount
		LocalAPCreateError					is Boolean
		LocalFinanceEnterpriseGroup			is like	FinanceEnterpriseGroup
		LocalProject						is a Project



		BillingLineItemRequired				is Boolean
		CustomeOrderAcknowledgments			is Boolean
		BrokenCaseCharge					is Boolean
		PORequiredForCustomerOrder			is Boolean
		CheckCreditOnOrderAdd				is Boolean
		ShipCompleteFlag					is AlphaUpper size 1
		CheckCreditBeforePickingList		is Boolean
		BackorderAllowed					is Boolean
		AllowReturns						is Boolean
		LastReturnAuthorizationDate			is Date

		CustomerOrNationalAccountLevel		is AlphaUpper size 1
			States
				CustomerLevel			value is "C"
				NationalAccountLevel	value is "N"
		DisplayDate							is AlphaUpper size 1
			States
				DueDate				value is "D"
				TransactionDate		value is "T"
		SortDate							is AlphaUpper size 1
			States
				DescendingDueDate			value is "D"
				DescendingTransactionDate	value is "T"
				AscendingDueDate			value is "S"
				AscendingTransactionDate	value is "A"
		CurrencyDisplay						is AlphaUpper size 1
			States
				BaseAmounts				value is "B"
				TransactionAmounts		value is "T"
				CompareAmounts			value is "C"
				CompareOpenAmounts		value is "O"
				CurrentRateOpenAmounts	value is "R"
		History								is AlphaUpper size 1
			States
				IncludeHistory		value is "I"
				OnlyShowHistorical	value is "O"
				NoHistorical		value is "N"


		NewReceivableInvoice			is a ReceivableInvoice view
		NewReceivableInvoiceDetail		is a ReceivableInvoiceDetail view

		NewCustomerDraft				is a CustomerDraft view
		NewPayablesInvoice				is a PayablesInvoice view
		LocalNationalAccount			is a NationalAccount
		LocalCustomer					is a Customer
		LocalReceivableReason			is like ReceivableReason
		LocalSuffix						is Numeric size 7
		LocalTermsCalTrigger			is Alpha size 1
		CalculateTerms
		ReceivableTerms

		WorkAmount						is an InternationalAmount
		CurrencyWork					is a ReceivableExchange
		I1								is Numeric 3
		LocalCollectDays				is Numeric 6
		LocalCount						is Numeric 2
		LocalTitle						is Alpha 50
		LocalDays						is Alpha 3
		WorkNumber						is Numeric 3
		ActionCode
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		LocalLookupKey					is Alpha 100
		LocalResponseBusclassKey		is like LastSequence
		LocalSequence					is like Sequence
		CalculateTax
		LocalCalculateTaxExecuted		is Alpha 1
		LocalOperator					is a ReceivableOperator

		NextSentence					is Boolean

		CalculateReceivableYearPeriod
		LocalTrigger					is Alpha size 1
		LocalOldBankTransactionCode		is a BankTransactionCode
		LocalNewBankTransactionCode		is a BankTransactionCode
		NewVendor						is a Vendor view
		LocalPayFrom					is Boolean
		LocalBODTrigger					is Boolean
		LocalAsOfDateIDM				is Date
		LocalPrintDateIDM				is Date
		LocalDateFilterIDM				is AlphaUpper 1
			States
				NotPrinted		value is "N"
				DocumentDate	value is "D"
				PrintDate		value is "P"


		LocalMonthsIDM					is Alpha 2
		LocalDaysIDM					is Alpha 2
		LocalFunctionalAmount			is like InternationalAmount
		LocalAlternateAmount			is like InternationalAmount
		LocalAlternateAmount2			is like InternationalAmount
		LocalAlternateAmount3			is like InternationalAmount
		LocalReportAmount1				is like InternationalAmount
		LocalReportAmount2				is like InternationalAmount
		LocalReportAmount3				is like InternationalAmount
		LocalReportAmount4				is like InternationalAmount
		LocalReportAmount5				is like InternationalAmount
		IDMGenerateDocument
		IDMXMLDefinition
		AttributeCtr					is Numeric 2
		LocalExecute					is Boolean				
		LocalIDMEmailSubject			is Alpha 255
			Text Variables
				CompanyName				value is Company.Name
				CustomerName			value is Customer.Name
				PrintDate				value is LocalPrintDateIDM
		LocalPaymentCode				is a BankTransactionCode
		LocalAutoReasCd					is like ReceivableReason

		FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupDone	is Boolean	
		SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmountDone				is Boolean	
		SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmountDone				is Boolean	
		SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountsDone			is Boolean	
		SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountsDone		is Boolean	
		SumOfOpenReceivablePaymentRelDone										is Boolean	
		SumOfOpenCreditMemoRelDone												is Boolean	
		SumOfUnreleasedReceivablePaymentRelDone									is Boolean	
		FirstOfCustomerDefaultBillToRelDone										is Boolean	
		SumOfReceivableInvoiceDetailRelAmountsDone								is Boolean	
		SumOfReceivablePaymentsForCustomerRelAmountsDone						is Boolean	
		SumOfCustomerDraftRelAmountsDone										is Boolean	
		SumOfOpenReceivableInvoiceDetailRelAmountsDone							is Boolean	
		SumOfClosedTransactionsNavRelAmountsDone								is Boolean	
		SumOfOpenOrUnreleasedReceivablePaymentsRelAmountsDone					is Boolean	
		SumOfClosedPaymentNavRelAmountsDone										is Boolean	

		FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCompany	is like ReceivableCompany	
		FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCustomer	is like Customer			
		SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmount							is like InternationalAmount	
		SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmount							is like InternationalAmount	
		SumOfReceivableInvoiceObligationGroupRelSignedOpenAmount						is like InternationalAmount	
		SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountCustomerCurrency		is like InternationalAmount	
		SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmount					is like InternationalAmount	
		SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountCustomerCurrency	is like InternationalAmount	
		SumOfOpenReceivablePaymentRelPaymentOpenCompanyCurrency							is like InternationalAmount	
		SumOfOpenReceivablePaymentRelNationalAccountAmount								is like InternationalAmount	
		SumOfOpenCreditMemoRelBaseOpenAmount											is like InternationalAmount	
		SumOfOpenCreditMemoRelCustomerGroupAgingOpenAmount								is like InternationalAmount	
		SumOfUnreleasedReceivablePaymentRelBaseAmount									is like InternationalAmount	
		SumOfUnreleasedReceivablePaymentRelCustomerGroupOpenAmount						is like InternationalAmount	
		FirstOfCustomerDefaultBillToRelName												is like VendorName 
			holds pii
		FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine1			is Alpha 40					
		FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine2			is Alpha 40					
		FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine3			is Alpha 40					
		FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine4			is Alpha 40					
		FirstOfCustomerDefaultBillToRelPostalAddressMunicipality						is Alpha 58					
		FirstOfCustomerDefaultBillToRelPostalAddressStateProvince						is Alpha 58					
		FirstOfCustomerDefaultBillToRelPostalAddressPostalCode							is Alpha 58					
		FirstOfCustomerDefaultBillToRelPostalAddressCountry								is Alpha 58					
		SumOfReceivableInvoiceDetailRelFilteredAmountCustomerCurrency					is like InternationalAmount	
		SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency					is like InternationalAmount	
		SumOfReceivableInvoiceDetailRelFilteredAmountGroupCurrency						is like InternationalAmount	
		SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency				is like InternationalAmount	
		SumOfReceivablePaymentsForCustomerRelFilteredAmountCompanyCurrency				is like InternationalAmount	
		SumOfReceivablePaymentsForCustomerRelFilteredAmountGroupCurrency				is like InternationalAmount	
		SumOfCustomerDraftRelFilteredAmountCustomerCurrency								is like InternationalAmount	
		SumOfCustomerDraftRelFilteredAmountCompanyCurrency								is like InternationalAmount	
		SumOfCustomerDraftRelFilteredAmountGroupCurrency								is like InternationalAmount	

		SumOfOpenReceivableInvoiceDetailRelFilteredAmountCompanyCurrency				is like InternationalAmount	
		SumOfClosedTransactionsNavRelFilteredAmountCompanyCurrency						is like InternationalAmount	
		SumOfOpenOrUnreleasedReceivablePaymentsRelFilteredAmountCompanyCurrency			is like InternationalAmount	
		SumOfClosedPaymentNavRelFilteredAmountCompanyCurrency							is like InternationalAmount	

		LocalPurgeCompany																is like ReceivableCompany
		LocalPurgeCustomer																is like Customer
		LocalActor																		is an Actor
		LocalEstimatesTotalCharges														is like InternationalAmount  
		LocalEstimatesCurrentCharges													is like InternationalAmount  
		CurrencyExchangeGroup
		LocalCurrencyExchangeDate														is a ExchangeDate
		LocalFranchiseContract															is like FranchiseContract
		LocalContractCurrency															is like Currency

		LocalNativeLPLBODTrigger		is Boolean				
		LocalTriggerFrom				is Alpha size 100   	

		YTDWriteOffs					is like InternationalAmount
		YTDChargebacks					is like InternationalAmount
		YTDCredits						is like InternationalAmount
		YTDPaid							is like InternationalAmount
		YTDSales						is like InternationalAmount
		YTDEarnedDiscounts				is like InternationalAmount
		YTDUnearnedDiscounts			is like InternationalAmount
		SumYearToDateAmountsDone		is Boolean
		LocalMainUserTemplate			is Alpha 250
		LocalUserTemplate				is Alpha 250
		LocalCurrencyRelationship														is a CurrencyRelationship
		LocalCurrencyWork																is a FromCurrencyExchangeGroup
		Error							is Boolean
		ErrorMessage   					is Alpha 300
		NewBODTracker  					is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker		is Numeric 15
   		LocalConfigurationParameter		is Alpha size up to 200
   		LocalAEAlreadyExecuted			is Boolean
		LocalBODAccountingEntity  		is Alpha 50



	Rule Blocks	

		BuildTextIndexes		
			build text search field CompanyCustomerSearchDocument
				Fields
					Company
					Company.Name
					Customer
					Customer.Name

		WriteOffGroupingObligation

			if (!each.ReceivableInvoiceDetailRel exists)
				NextSentence = true
			else

				WorkAmount = each.ReceivableInvoiceDetailRel.OpenAmount

				if  (UseCustomerCurrency
				and  Currency != each.ReceivableInvoiceRel.OriginalCurrency)
					CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate						= NewGeneralLedgerDate
					CurrencyWork.TransactionAmount					= WorkAmount
					CurrencyWork.FromCurrency						= each.ReceivableInvoiceRel.OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency				= Currency
					WorkAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount

				if (!each.ReceivableInvoiceObligationGroup.ReceivableInvoiceDetailType.CreditMemo)
					WorkAmount = WorkAmount * -1

				invoke Create ReceivableGLDistribution
					invoked.FinanceEnterpriseGroup							= each.Company.FinanceEnterpriseGroup
					invoked.ReceivableCompanyGroup.GlCompany				= each.Company
					invoked.ReceivableCompanyDataGroup.TransactionCompany	= each.Company
					invoked.ReceivableCompanyGroup.OriginCompany			= each.Company
					invoked.GeneralLedgerDate								= NewGeneralLedgerDate
					invoked.BypassInvoiceCommonEdits						= true

					invoked.ReceivableCompanyDataGroup.Customer				= each.Customer
					invoked.Origin											= "RM"
					invoked.AccumulationType								= "D"
					invoked.DistributionSource								= "A"
					invoked.DocumentNumber									= "15-" +  LocalInvoice
					if (each.ReceivableInvoiceDetailRel.OpenAmount entered)
						invoked.Status										= 2
					else
						invoked.Status										= 9

					invoked.BypassStructureRelationEdit 					= true 
					if (NewReceivableReason.DistributionAccount entered)
						invoked.GeneralLedgerAccount						= NewReceivableReason.DistributionAccount
					else
						invoked.GeneralLedgerAccount						= each.ReceivableInvoiceRel.ReceivableGeneralLedgerCode.DistributionAccount

					invoked.BatchNumber										= each.ReceivableInvoiceRel.BatchNumber
					invoked.Invoice											= each.ReceivableInvoiceObligationGroup.Invoice
					invoked.TransType										= each.ReceivableInvoiceObligationGroup.ReceivableInvoiceDetailType
					invoked.TransactionDate									= NewGeneralLedgerDate

					invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= each.ReceivableInvoiceRel.ReceivableProcessLevel

					invoked.DistributionAmount.CurrencyAmount					= WorkAmount

					if  (UseCustomerCurrency)
						invoked.OriginalCurrency								= Currency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.KeepFunctionalRate										= true
					else
						invoked.OriginalCurrency										= each.ReceivableInvoiceRel.OriginalCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= each.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.CurrencyDecimalsNumber									= each.ReceivableInvoiceRel.CurrencyDecimalsNumber


				invoke ObligationGroupWriteoff each
					invoked.ApplicationGeneralLedgerDate	= NewGeneralLedgerDate
					invoked.ApplyOperator					= NewOperator
					invoked.PrmAdjustReason					= NewReceivableReason
					invoked.CreditCompany					= NewCompany
					invoked.CreditCustomer					= NewCustomer
					invoked.CreditType						= LocalTransactionType
					invoked.CreditInvoice					= NewInvoice


			invoke Purge each

		ValidateOEFields
			if (!HasBillingCompany)
				cannot be entered
					"CannotBeEntered;\Billing\CompanyDoesNotExist"

		SetOECreateUpdateParams
			invoked.BillingCustomerCode						 = TransientBillingCustomerCode
			invoked.PriceList								 = TransientPriceList
			invoked.Territory								 = TransientTerritory
			invoked.Carrier									 = TransientCarrier
			invoked.BillingFreightCode						 = TransientBillingFreightCode
			invoked.BrokenCaseCharge						 = TransientBrokenCaseCharge
			invoked.Salesman2								 = TransientSalesman2
			invoked.CommissionSplitPercentage				 = TransientCommissionSplitPercentage
			invoked.BillingLineItemRequired					 = TransientBillingLineItemRequired
			invoked.DefaultCustomerShipTo					 = TransientDefaultCustomerShipTo
			invoked.DefaultShippingLocation					 = TransientDefaultShippingLocation
			invoked.DefaultShippingMethod					 = TransientDefaultShippingMethod
			invoked.ProofOfDeliveryRequired					 = TransientProofOfDeliveryRequired
			invoked.ProofOfDeliveryGracePeriod				 = TransientProofOfDeliveryGracePeriod
			invoked.CashInAdvanceRequired					 = TransientCashInAdvanceRequired
			invoked.CashInAdvanceRequiredPercent			 = TransientCashInAdvanceRequiredPercent
			invoked.ProformaCashInAdvanceRequired			 = TransientProformaCashInAdvanceRequired
			invoked.ProformaCashInAdvanceRequiredPercent	 = TransientProformaCashInAdvanceRequiredPercent
			invoked.PickingPriority							 = TransientPickingPriority
			invoked.TotalCODOrderLimit						 = TransientTotalCODOrderLimit
			invoked.OrderDiscountCode						 = TransientOrderDiscountCode
			invoked.CreditLimitHoldCode						 = TransientCreditLimitHoldCode
			invoked.OrderLimitHoldCode						 = TransientOrderLimitHoldCode
			invoked.SingleOrderHoldCode						 = TransientSingleOrderHoldCode
			invoked.CashOnDeliveryOrderHoldCode				 = TransientCashOnDeliveryOrderHoldCode
			invoked.Vendor									 = TransientVendor
			invoked.PurchFrLoc								 = TransientPurchFrLoc
			invoked.ShipTerm								 = TransientShipTerm
			invoked.PortCode								 = TransientPortCode
			invoked.CheckCreditOnOrderAdd					 = TransientCheckCreditOnOrderAdd
			invoked.SingleOrderLimit						 = TransientSingleOrderLimit
			invoked.CheckCreditBeforePickingList			 = TransientCheckCreditBeforePickingList
			invoked.AllowReturns							 = TransientAllowReturns
			invoked.LastReturnAuthorizationDate				 = TransientLastReturnAuthorizationDate
			invoked.CustomeOrderAcknowledgments				 = TransientCustomeOrderAcknowledgments
			invoked.ShipCompleteFlag						 = TransientShipCompleteFlag
			invoked.PORequiredForCustomerOrder				 = TransientPORequiredForCustomerOrder
			invoked.BackorderAllowed						 = TransientBackorderAllowed
			invoked.AgeCredPcts								 = TransientAgeCredPcts
			invoked.OrderAgingPriodLimitHoldCode			 = TransientOrderAgingPriodLimitHoldCode

		InitializeValidationFields	
			initialize VATValidation.OCountryCode
			initialize VATValidation.OVatNumber
			initialize VATValidation.ORequestDate
			initialize VATValidation.OValid
			initialize VATValidation.OTraderName
			initialize VATValidation.OTraderCompanyType
			initialize VATValidation.OTraderAddress
			initialize VATValidation.ORequestIdentifier
			initialize VATValidation.RequestXML
			initialize VATValidation.ResponseXML
			initialize VATValidation.ValidationDate
			initialize VATValidation.VATNumberValid

		TriggerPayFromPartyMasterRules
			trigger "CustomerPayFromService" PA service
				resume on error
				title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CG:<Company.CustomerBusinessGroup>CO:<Company>CU:<Customer>"
				Criteria
					Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					Company
					Company.GeneralLedgerCompany.AccountingEntity

				Variables
					ActionCode
					include persistent fields from CompanyCustomer
					include persistent fields from Customer
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					Company
						variable name is LawsonCompany
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is Accountingentity

		TriggerCompanyCustomerServiceRules
			increment bod id.VariationID
			LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
			trigger "CompanyCustomerService" PA service
				resume on error
				title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CG:<Company.CustomerBusinessGroup>CO:<Company>CU:<Customer>"
				Criteria
					Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					Company
					Company.GeneralLedgerCompany.AccountingEntity

				Variables
					ActionCode
					include persistent fields from CompanyCustomer
					include persistent fields from Customer
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					Company
						variable name is LawsonCompany
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is Accountingentity
					CompanyCustomerBankAccountRel.CompanyCustomerBankAccount.CustomerBankEntity
						variable name is CustomerBankEntity
					CustomerDraftBankRel.CustomerDraftBank.BOEEFTBankAccount
						variable name is EFTBankAccount

		ValidateApplicationTolerances
			I1 = 1
			while (I1 <= 3)
				if ( MaximumAutoAdjustAmount.MaxAutoAmt[I1] not entered
				and  MaxAutoPcts.MaxAutoPct[I1] not entered
				and  MaximumShortReasonCode.AutoReasCd[I1] not entered)
					I1 += 1

				else
					if (I1 > 1)
						constraint (MaximumShortReasonCode.AutoReasCd[I1 - 1] entered) 
							"CannotEnterFieldOutOfSequence"

						if (MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered)		   
							constraint (MaxAutoPcts.MaxAutoPct[I1 - 1] not entered)
								"EnterAllAmountsOrAllPercents"

							constraint (MaximumAutoAdjustAmount.MaxAutoAmt[I1] >  MaximumAutoAdjustAmount.MaxAutoAmt[I1 - 1])
								"ArrayMustBeInIncreasingSequence"

						if (MaxAutoPcts.MaxAutoPct[I1] entered)					   
							constraint (MaximumAutoAdjustAmount.MaxAutoAmt[I1 - 1] not entered)
								"EnterAllAmountsOrAllPercents"

							constraint (MaxAutoPcts.MaxAutoPct[I1] > MaxAutoPcts.MaxAutoPct[I1 - 1])
								"ArrayMustBeInIncreasingSequence"

					constraint (MaximumShortReasonCode.AutoReasCd[I1] entered)
						"ReasonCodeShouldBeEnteredIfAmountOrPercentEntered"

					if (MaximumShortReasonCode.AutoReasCd[I1] entered)
						LocalAutoReasCd =  MaximumShortReasonCode.AutoReasCd[I1]
						constraint (ReceivableLocalAutoReasonCdRel.IsOverShortAndChargebackDetailAndChargebackSummary)
							"ReasonCodeShouldBeOverShortOrChargebackDetailOrChargebackSummary"

						if (MaximumAutoAdjustAmount.MaxAutoAmt[I1] not entered)
							constraint (MaxAutoPcts.MaxAutoPct[I1] entered)
								"MaximumAmountOrPercentRequired"

						if (MaxAutoPcts.MaxAutoPct[I1] not entered)
							constraint (MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered)
								"MaximumAmountOrPercentRequired"

						if (MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered)
							constraint (MaxAutoPcts.MaxAutoPct[I1] not entered)
								"YouCannotEnterBothAmountAndPercent"

						if (MaxAutoPcts.MaxAutoPct[I1] entered)
							constraint (MaximumAutoAdjustAmount.MaxAutoAmt[I1] not entered)
								"YouCannotEnterBothAmountAndPercent"

					if (MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered)
						constraint (MaximumAutoAdjustAmount.MaxAutoAmt[I1] >= 0)
							"MaxAutoAmtCannotBeANegativeValue"

					if (MaxAutoPcts.MaxAutoPct[I1] entered)
						constraint (MaxAutoPcts.MaxAutoPct[I1] >= 0)
							"PercentCannotBeANegativeValue"

					I1 += 1


		FirstNationalAccountInvoiceRelNationalAccountNationalAccountGroup	
			if (!FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupDone)	
				initialize FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCompany	
				initialize FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCustomer	
					for each NationalAccountInvoiceRel
						FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCompany	 = each.NationalAccount.NationalAccountGroup.NatCompany	
						FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCustomer	 = each.NationalAccount.NationalAccountGroup.NatCustomer	
				FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupDone = true	

		SumARToAPInterfaceSelectedInvoicesRelSignedBaseAmount	
			if (!SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmountDone)	
				initialize SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmount	
					for each ARToAPInterfaceSelectedInvoicesRel
						SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmount += each.SignedBaseAmount 
				SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmountDone = true	

		SumARToAPInterfaceSelectedPaymentsRelSignedBaseAmount	
			if (!SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmountDone)	
				initialize SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmount	
					for each ARToAPInterfaceSelectedPaymentsRel
						SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmount += each.SignedBaseAmount	
				SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmountDone = true	

		SumReceivableInvoiceObligationGroupRelSignedOpenAmounts	
			if (!SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountsDone)	
				initialize SumOfReceivableInvoiceObligationGroupRelSignedOpenAmount	
				initialize SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountCustomerCurrency	
					for each ReceivableInvoiceObligationGroupRel
						SumOfReceivableInvoiceObligationGroupRelSignedOpenAmount += each.SignedOpenAmount	
						SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountCustomerCurrency += each.SignedOpenAmountCustomerCurrency	
				SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountsDone = true	

		SumReceivableInvoiceObligationGroupActorRelSignedOpenAmounts	
			if (!SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountsDone)	
				initialize SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmount	
				initialize SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountCustomerCurrency	
					for each ReceivableInvoiceObligationGroupActorRel
						SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmount += each.SignedOpenAmount	
						SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountCustomerCurrency += each.SignedOpenAmountCustomerCurrency	
				SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountsDone = true	

		SumOpenReceivablePaymentRel	
			if (!SumOfOpenReceivablePaymentRelDone)	
				initialize SumOfOpenReceivablePaymentRelPaymentOpenCompanyCurrency	
				initialize SumOfOpenReceivablePaymentRelNationalAccountAmount	
					for each OpenReceivablePaymentRel
						SumOfOpenReceivablePaymentRelPaymentOpenCompanyCurrency += each.PaymentOpenCompanyCurrency	
						SumOfOpenReceivablePaymentRelNationalAccountAmount += each.NationalAccountAmount	
				SumOfOpenReceivablePaymentRelDone = true	

		SumOpenCreditMemoRel	
			if (!SumOfOpenCreditMemoRelDone)	
				initialize SumOfOpenCreditMemoRelBaseOpenAmount	
				initialize SumOfOpenCreditMemoRelCustomerGroupAgingOpenAmount	
					for each OpenCreditMemoRel
						SumOfOpenCreditMemoRelBaseOpenAmount += each.BaseOpenAmount	
						SumOfOpenCreditMemoRelCustomerGroupAgingOpenAmount += each.CustomerGroupAgingOpenAmount	
				SumOfOpenCreditMemoRelDone = true	

		SumUnreleasedReceivablePaymentRel	
			if (!SumOfUnreleasedReceivablePaymentRelDone)	
				initialize SumOfUnreleasedReceivablePaymentRelBaseAmount	
				initialize SumOfUnreleasedReceivablePaymentRelCustomerGroupOpenAmount	
					for each UnreleasedReceivablePaymentRel
						SumOfUnreleasedReceivablePaymentRelBaseAmount += each.BaseAmount	
						SumOfUnreleasedReceivablePaymentRelCustomerGroupOpenAmount += each.CustomerGroupOpenAmount	
				SumOfUnreleasedReceivablePaymentRelDone = true	

		FirstCustomerDefaultBillToRel	
			if (!FirstOfCustomerDefaultBillToRelDone)	
				initialize FirstOfCustomerDefaultBillToRelName										
				initialize FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine1	
				initialize FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine2	
				initialize FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine3	
				initialize FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine4	
				initialize FirstOfCustomerDefaultBillToRelPostalAddressMunicipality					
				initialize FirstOfCustomerDefaultBillToRelPostalAddressStateProvince				
				initialize FirstOfCustomerDefaultBillToRelPostalAddressPostalCode					
				initialize FirstOfCustomerDefaultBillToRelPostalAddressCountry						
					for each CustomerDefaultBillToRel
						FirstOfCustomerDefaultBillToRelName										 = each.Name										
						FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine1	 = each.PostalAddress.DeliveryAddress.AddressLine1	
						FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine2	 = each.PostalAddress.DeliveryAddress.AddressLine2	
						FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine3	 = each.PostalAddress.DeliveryAddress.AddressLine3	
						FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine4	 = each.PostalAddress.DeliveryAddress.AddressLine4	
						FirstOfCustomerDefaultBillToRelPostalAddressMunicipality				 = each.PostalAddress.Municipality					
						FirstOfCustomerDefaultBillToRelPostalAddressStateProvince				 = each.PostalAddress.StateProvince					
						FirstOfCustomerDefaultBillToRelPostalAddressPostalCode					 = each.PostalAddress.PostalCode					
						FirstOfCustomerDefaultBillToRelPostalAddressCountry						 = each.PostalAddress.Country						
				FirstOfCustomerDefaultBillToRelDone = true	

		SumReceivableInvoiceDetailRelAmountsAll3	
			if (!SumOfReceivableInvoiceDetailRelAmountsDone)	
				initialize SumOfReceivableInvoiceDetailRelFilteredAmountCustomerCurrency	
				initialize SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	
				initialize SumOfReceivableInvoiceDetailRelFilteredAmountGroupCurrency	
					for each ReceivableInvoiceDetailRel
						SumOfReceivableInvoiceDetailRelFilteredAmountCustomerCurrency	 += each.FilteredAmountCustomerCurrency	
						SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
						SumOfReceivableInvoiceDetailRelFilteredAmountGroupCurrency		 += each.FilteredAmountGroupCurrency	
				SumOfReceivableInvoiceDetailRelAmountsDone = true	

		SumReceivableInvoiceDetailRelAmounts	
			if (!SumOfReceivableInvoiceDetailRelAmountsDone)	
				initialize SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	
					for each ReceivableInvoiceDetailRel
						SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
				SumOfReceivableInvoiceDetailRelAmountsDone = true	

		SumReceivablePaymentsForCustomerRelAmounts	
			if (!SumOfReceivablePaymentsForCustomerRelAmountsDone)	
				initialize SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency	
				initialize SumOfReceivablePaymentsForCustomerRelFilteredAmountCompanyCurrency	
				initialize SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency	
					for each ReceivablePaymentsForCustomerRel
						SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency	 += each.FilteredAmountCustomerCurrency	
						SumOfReceivablePaymentsForCustomerRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
						SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency	 += each.FilteredAmountGroupCurrency	
				SumOfReceivablePaymentsForCustomerRelAmountsDone = true	

		SumCustomerDraftRelAmounts	
			if (!SumOfCustomerDraftRelAmountsDone)	
				initialize SumOfCustomerDraftRelFilteredAmountCustomerCurrency	
				initialize SumOfCustomerDraftRelFilteredAmountCompanyCurrency	
				initialize SumOfCustomerDraftRelFilteredAmountCustomerCurrency	
					for each CustomerDraftRel
						SumOfCustomerDraftRelFilteredAmountCustomerCurrency	 += each.FilteredAmountCustomerCurrency	
						SumOfCustomerDraftRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
						SumOfCustomerDraftRelFilteredAmountCustomerCurrency	 += each.FilteredAmountGroupCurrency	
				SumOfCustomerDraftRelAmountsDone = true	

		SumOpenReceivableInvoiceDetailAmounts	
			if (!SumOfOpenReceivableInvoiceDetailRelAmountsDone)	
				initialize SumOfOpenReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	
					for each OpenReceivableInvoiceDetailRel
						SumOfOpenReceivableInvoiceDetailRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
				SumOfOpenReceivableInvoiceDetailRelAmountsDone = true	

		SumClosedTransactionsNavAmounts	
			if (!SumOfClosedTransactionsNavRelAmountsDone)	
				initialize SumOfClosedTransactionsNavRelFilteredAmountCompanyCurrency	
					for each ClosedTransactionsNavRel
						SumOfClosedTransactionsNavRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
				SumOfClosedTransactionsNavRelAmountsDone = true	

		SumOpenOrUnreleasedReceivablePaymentsRelAmounts	
			if (!SumOfOpenOrUnreleasedReceivablePaymentsRelAmountsDone)	
				initialize SumOfOpenOrUnreleasedReceivablePaymentsRelFilteredAmountCompanyCurrency	
					for each OpenOrUnreleasedReceivablePaymentsRel
						SumOfOpenOrUnreleasedReceivablePaymentsRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
				SumOfOpenOrUnreleasedReceivablePaymentsRelAmountsDone = true	

		SumClosedPaymentNavRelAmounts	
			if (!SumOfClosedPaymentNavRelAmountsDone)	
				initialize SumOfClosedPaymentNavRelFilteredAmountCompanyCurrency	
					for each ClosedPaymentNavRel
						SumOfClosedPaymentNavRelFilteredAmountCompanyCurrency	 += each.FilteredAmountCompanyCurrency	
				SumOfClosedPaymentNavRelAmountsDone = true	

		SumYearToDateAmounts
			if (!SumYearToDateAmountsDone)
				I1 = 1
				while I1 <= DerivedFiscalPeriod
					YTDWriteOffs += CurrentCompanyCustomerPeriodTotalsRel.PeriodWriteOffs.PeriodWriteOff[I1]
					YTDChargebacks += CurrentCompanyCustomerPeriodTotalsRel.PeriodChargebacks.PeriodChargeback[I1]
					YTDCredits += CurrentCompanyCustomerPeriodTotalsRel.PeriodCredits.PeriodCredit[I1]
					YTDPaid += CurrentCompanyCustomerPeriodTotalsRel.PeriodPaid.PeriodPaid[I1]
					YTDSales += CurrentCompanyCustomerPeriodTotalsRel.PeriodBillings.PeriodBilling[I1]
					YTDEarnedDiscounts += CurrentCompanyCustomerPeriodTotalsRel.PeriodEarnedDiscounts.PeriodEarnedDiscount[I1]
					YTDUnearnedDiscounts += CurrentCompanyCustomerPeriodTotalsRel.PeriodUnearnedDiscounts.PeriodUnearnedDiscount[I1]
					I1 += 1
				SumYearToDateAmountsDone = true

		CheckBillingInvoiceEmailContactsOnlyExists
			if (BillingInvoiceEmailOption.ContactsOnly)
				constraint (HasEmailBillingInvoiceContactExist)
					"MustHaveExistingCustomerContactWithEnabled_Billing_InvoiceEmailOptionToAllowContactsOnly."

	Derived Fields

	 	DerivedLocalRoundTo	is a DerivedField
			type is Decimal 5.4
			restricted
			if (Currency.NumberOfDecimals = 2)
				return .01
			else
			if (Currency.NumberOfDecimals = 0)
				return 1
			else
			if (Currency.NumberOfDecimals = 3)
				return .001
				
	 	DerivedDifferenceAmount is a DerivedField	
			type is like InternationalAmount
			return (TemporaryBillOfExchangeBalance - TemporaryCurrentBalance)

	 	MissingVendorMsg		is a MessageField   
			"Warning:_Missing_Vendor"

		LastInvoiceDateToDays	is a DerivedField
			type is Numeric size 3
			restricted
			return (current corporate date - LastInvoiceDate)

		LastPaymentDateToDays	is a DerivedField
			type is Numeric size 3
			restricted
			return (current corporate date - LastPaymentDate)

		LastStatementDateToDays	is a DerivedField
			type is Numeric size 3
			restricted
			return (current corporate date - LastStatementDate)

		DerivedOrderLimitHoldCode		is a DerivedField	
			type is AlphaUpper size 5
			if (action type.Update)
				return blank
			else
				return CompanyCustomer.OrderEntryCustomer.OrderLimitHoldCode

		CustomerAnalysisDashboardSearchMsg is a DerivedField
			type is MessageField
			return "Search Company/Customer"

		LocalAPARInvoiceDesc			is a StringField	
			type is Alpha 60
			"ARToAP(APInvoice#"
			LocalInvoice
			")"

		DerivedInquiryLevel				is a MessageField	
			"Company_\Customer"

		DerivedAgingCode				is a DerivedField	
			type is Alpha 2
			if (CompanyCustomerStaticAging.AgingCode entered)
				return CompanyCustomerStaticAging.AgingCode
			else
				return blank

		ContextMessageEntityType is a StringField	
			type is Alpha 30
			restricted
			"InforCustomerPartyMaster"

		ContextMessageText is a MessageField	
			"Company<Company>Customer<CompanyCustomer>"

		NationalCompany is a DerivedField
			type is like Company
			include FirstNationalAccountInvoiceRelNationalAccountNationalAccountGroup	

			return FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCompany	

		NationalCustomer	is a DerivedField
			type is like Customer
			include FirstNationalAccountInvoiceRelNationalAccountNationalAccountGroup	

			return FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCustomer	

		AvailableCredit	is a DerivedField
			type is like InternationalAmount
			restricted
			return (15000.00 - 0)






		DerivedSelectedAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedSelectedAmountForInvoices - DerivedSelectedAmountForPayments)

		DerivedSelectedAmountForInvoices	is a DerivedField
			type is like InternationalAmount
			restricted
			include SumARToAPInterfaceSelectedInvoicesRelSignedBaseAmount	

			return (SumOfARToAPInterfaceSelectedInvoicesRelSignedBaseAmount)	

		DerivedSelectedAmountForPayments	is a DerivedField
			type is like InternationalAmount
			restricted
			include SumARToAPInterfaceSelectedPaymentsRelSignedBaseAmount	

			return SumOfARToAPInterfaceSelectedPaymentsRelSignedBaseAmount	

		DerivedNetBalance	is a DerivedField
			type is like InternationalAmount
			restricted
			if (VendorBalanceRel.BalanceCurrency	= Company.CustomerGroupField.CustomerGroup.Currency
			or  VendorBalanceRel.BalanceCurrency	= blank
			or  Company.CustomerGroupField.CustomerGroup.Currency		= blank)
				if (Customer.CurrentReceivableBalance > VendorBalanceRel.CurrentBalance)
					NetBalanceLabel = "AR"
					TransientNetBalanceCurrency = Company.CustomerGroupField.CustomerGroup.Currency
					return (Customer.CurrentReceivableBalance - VendorBalanceRel.CurrentBalance)
				else
					NetBalanceLabel = "AP"
					TransientNetBalanceCurrency = VendorBalanceRel.BalanceCurrency
					return (VendorBalanceRel.CurrentBalance - Customer.CurrentReceivableBalance)
			else


				initialize NetBalanceLabel
				return blank

		CurrentPlusBillOfExchangeBalance	is a ComputeField	
			type is like InternationalAmount
			(CurrentBalance + BillOfExchangeBalance)

		TempCurrentPlusBillOfExchangeBalance	is a ComputeField
			type is like InternationalAmount
			(TemporaryCurrentBalance + TemporaryBillOfExchangeBalance)

		VatNbr	is a StringField
			type is Alpha size 14
			restricted
			VATRegistrationCountry
			VATRegistrationNumber

		DerivedNationalCompany	is a DerivedField	
			type is like ReceivableCompany
			restricted
			if (NationalAccountIndicator.No)
				return Company
			else
			if (NationalAccountIndicator.Child)
				include FirstNationalAccountInvoiceRelNationalAccountNationalAccountGroup	

				return FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCompany	
			else
				return Company

		DerivedNationalCustomer	is a DerivedField
			type is like Customer
			restricted
			if (NationalAccountIndicator.No)
				return Customer
			else
			if (NationalAccountIndicator.Child)
				include FirstNationalAccountInvoiceRelNationalAccountNationalAccountGroup	


				return FirstOfNationalAccountInvoiceRelNationalAccountNationalAccountGroupNatCustomer	
			else
				return Customer

		UseCustomerCurrency	is a DerivedField	
			type is Boolean
			LocalUseCustomerCurrency = false
			for each ReceivableInvoiceObligationGroupRel
				if  (LocalFromCurrency not entered)
					LocalFromCurrency = each.ReceivableInvoiceDetailRel.OriginalCurrency
				else
				if  (each.ReceivableInvoiceDetailRel.OriginalCurrency != LocalFromCurrency)
					LocalUseCustomerCurrency = true

			return LocalUseCustomerCurrency

		TotalObligationGroupingAmount	is a DerivedField	
			type is like InternationalAmount
			include SumReceivableInvoiceObligationGroupRelSignedOpenAmounts	
			if  (UseCustomerCurrency)

				return (SumOfReceivableInvoiceObligationGroupRelSignedOpenAmountCustomerCurrency)	
			else

				return (SumOfReceivableInvoiceObligationGroupRelSignedOpenAmount)	

		TotalObligationGroupingAmountByActor	is a DerivedField	
			type is like InternationalAmount
			include SumReceivableInvoiceObligationGroupActorRelSignedOpenAmounts	
			if  (UseCustomerCurrency)

				return (SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmountCustomerCurrency)	
			else

				return (SumOfReceivableInvoiceObligationGroupActorRelSignedOpenAmount)	

		DerivedOperator	is a DerivedField
			type is like ReceivableOperator
			restricted
			if (!IsCashOperatorRequired)
				return actor

		CurrentIPA	is a DerivedField	
			type is Decimal size 6	
			return (CurrentCashDays / CurrentCashPaid)

		YearToDateIPA	is a DerivedField	
			type is Decimal size 6
			return (YearToDateCashDays / YearToDateCashPaid)

		DebtRatio	is a DerivedField	
			type is Decimal size 6
			return (DaysBeyondTermsCash / DaysBeyondTermsCashDays)

		DebtYearToDateCash	is a DerivedField
			type is Decimal size 6
			return (DaysBeyondTermsYearToDateDays / DaysBeyondTermsYearToDateCash)	

		TwelveMonthPeriodAverage is a DerivedField	
			type is Decimal size 6	
			initialize LocalCollectDays
			initialize LocalCount
			I1 = 1
			while (I1 <= 11)
				if (CollectDayses.CollectDays[I1] entered)
					LocalCollectDays	+= CollectDayses.CollectDays[I1]
					LocalCount			+= 1
				I1 += 1
			return (LocalCollectDays / LocalCount)

		TwelveMonthPeriodDebtAverage is a DerivedField	
			type is Decimal size 6	
			initialize LocalCollectDays
			initialize LocalCount
			I1 = 1
			while (I1 <= 11)
				if (DaysBeyondTermsRatio.DbtRatio[I1] entered)
					LocalCollectDays	+= DaysBeyondTermsRatio.DbtRatio[I1]
					LocalCount			+= 1
				I1 += 1
			return (LocalCollectDays / LocalCount)


		UnreleasedApplied is a DerivedField	
			type is like InternationalAmount
			initialize WorkAmount
			for each UnreleasedReceivablePaymentRel
				for each each.ReceivableApplicationRel
					WorkAmount += each.BaseAppliedPlusAdjustAmount
			return WorkAmount

		UnappliedPaymentsCredits is a DerivedField	
			type is like InternationalAmount
			initialize WorkAmount
			include SumOpenReceivablePaymentRel	
			include SumOpenCreditMemoRel	

			return (SumOfOpenReceivablePaymentRelPaymentOpenCompanyCurrency + SumOfOpenCreditMemoRelBaseOpenAmount)	

		GroupUnappliedPaymentsCredits is a DerivedField	
			type is like InternationalAmount
			restricted
			initialize WorkAmount
			include SumOpenReceivablePaymentRel	
			include SumOpenCreditMemoRel	

			return (SumOfOpenReceivablePaymentRelNationalAccountAmount + SumOfOpenCreditMemoRelCustomerGroupAgingOpenAmount)	

		UnreleasedPayments is a DerivedField	
			type is like InternationalAmount
			initialize WorkAmount
			include SumUnreleasedReceivablePaymentRel	

			return (SumOfUnreleasedReceivablePaymentRelBaseAmount)	

		GroupUnreleasedPayments is a DerivedField	
			type is like InternationalAmount
			restricted
			initialize WorkAmount
			include SumUnreleasedReceivablePaymentRel	

			return (SumOfUnreleasedReceivablePaymentRelCustomerGroupOpenAmount)	

		DerivedHighBalance is a DerivedField	
			type is like InternationalAmount
			I1 = 1
			while (I1 <= 13)
				if (HigHBalance.HighBal[I1] > WorkAmount)
					WorkAmount = HigHBalance.HighBal[I1]
				I1 +=1
			return WorkAmount


		TotalPaidPrmpts		is a ComputeField	
			type is Decimal size 6
			restricted
			(sum PaidPrmpts)

		TotalInvPaids		is a ComputeField	
			type is Decimal size 6
			restricted
			(sum InvPaids)

		PaysPrompt is a DerivedField	
			type is Decimal size 9
			return (TotalPaidPrmpts / TotalInvPaids)

		TotalReturnToMaker is a ComputeField	
			type is Decimal size 4
			(sum PerRtmses)

		PercentOfBalance is a DerivedField	
			type is like InternationalAmount
			return (((CurrentBalance + OpenOrderAmount + BillOfExchangeBalance) / CreditLimit) * 100)

		TotalHighBalance is a ComputeField
			type is Decimal size 16
			restricted
			(sum HigHBalance)

		NextReview is a DerivedField	
			type is Date
			if (ReviewDate entered)
				return (ReviewDate + CreditReviewDays as days)

		StatingAgingPeriod1Title is a DerivedField
			type is Alpha size 15
			LocalDays	= "1"
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[1]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod2Title is a DerivedField
			type is Alpha size 15
			WorkNumber	= Company.AgePeriodses.AgePeriods[1] + 1
			LocalDays	= WorkNumber
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[2]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod3Title is a DerivedField
			type is Alpha size 15
			WorkNumber	= Company.AgePeriodses.AgePeriods[2] + 1
			LocalDays	= WorkNumber
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[3]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod4Title is a DerivedField
			type is Alpha size 15
			WorkNumber	= Company.AgePeriodses.AgePeriods[3] + 1
			LocalDays	= WorkNumber
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[4]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod5Title is a DerivedField
			type is Alpha size 15
			if (Company.ExpandedAgingPeriods)
				WorkNumber	= Company.AgePeriodses.AgePeriods[4] + 1
				LocalDays	= WorkNumber
				LocalTitle	= LocalDays + "-"
				LocalDays	= Company.AgePeriodses.AgePeriods[5]
			else
				LocalTitle	= "Over_"
				LocalDays	= Company.AgePeriodses.AgePeriods[4]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod6Title is a DerivedField
			type is Alpha size 15
			WorkNumber	= Company.AgePeriodses.AgePeriods[5] + 1
			LocalDays	= WorkNumber
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[6]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod7Title is a DerivedField
			type is Alpha size 15
			WorkNumber	= Company.AgePeriodses.AgePeriods[6] + 1
			LocalDays	= WorkNumber
			LocalTitle	= LocalDays + "-"
			LocalDays	= Company.AgePeriodses.AgePeriods[7]
			LocalTitle += LocalDays
			return LocalTitle

		StatingAgingPeriod8Title is a DerivedField
			type is Alpha size 15
			LocalTitle	= "Over_"
			LocalDays	= Company.AgePeriodses.AgePeriods[7]
			LocalTitle += LocalDays
			return LocalTitle

		DerivedTotalAging is a DerivedField	
			type is like InternationalAmount
			return (StaticAgingCurrentPeriodAmount + sum Agings)

		DerivedPastDue is a DerivedField	
			type is like InternationalAmount
			return (sum Agings)

		DerivedFiscalYear is a DerivedField	
			type is Numeric 4

			if (Company.PeriodsPerYear.Twelve)
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate month
				if (Company.PeriodOffset entered
				and Company.PeriodOffset > 0)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 12)
						CurrentYear += 1
						CurrentPeriod -=12

				if (Company.PeriodOffset entered
				and Company.PeriodOffset < 0)
					if (CurrentPeriod - (Company.PeriodOffset *-1) < 0)
						LocalCurrentYear = CurrentYear
						LocalCurrentPeriod = CurrentPeriod
						CurrentYear = LocalCurrentYear - 1
						CurrentPeriod = LocalCurrentPeriod - (Company.PeriodOffset *-1) + 12
					if (CurrentPeriod - (Company.PeriodOffset *-1) >= 0)
						LocalCurrentPeriod = CurrentPeriod
						CurrentPeriod = LocalCurrentPeriod - (Company.PeriodOffset *-1)
					if (CurrentPeriod - (Company.PeriodOffset *-1) = 0)
						LocalCurrentYear = CurrentYear
						CurrentYear = LocalCurrentYear - 1
						CurrentPeriod = 12
			else
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate week / 4
				PartialPeriod = LocalTransactionDate % CurrentPeriod
					if (PartialPeriod entered)
						CurrentPeriod = ((LocalTransactionDate week / 4) + 1)
				if (Company.PeriodOffset entered)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 13)
						CurrentYear += 1
						CurrentPeriod -=13
			return CurrentYear

		DerivedFiscalPeriod is a DerivedField	
			type is Numeric 4
			if (Company.PeriodsPerYear.Twelve)
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate month
				if (Company.PeriodOffset entered)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 12)
						CurrentYear += 1
						CurrentPeriod -=12
			else
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate week / 4
				if (Company.PeriodOffset entered)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 13)
						CurrentYear += 1
						CurrentPeriod -=13
			return CurrentPeriod






























		YearToDateWriteOffs is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDWriteOffs

		YearToDateChargebacks is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDChargebacks

		YearToDateCredits is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDCredits

		YearToDatePaid is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDPaid

		YearToDateSales is a DerivedField
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDSales

		YearToDateEarnedDiscounts is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDEarnedDiscounts

		YearToDateUnearnedDiscounts is a DerivedField	
			type is like InternationalAmount
			include SumYearToDateAmounts
			return YTDUnearnedDiscounts

		CurrentPeriodWriteOffs is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodWriteOffs.PeriodWriteOff[CurrentPeriod]

		CurrentPeriodChargebacks is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodChargebacks.PeriodChargeback[CurrentPeriod]

		CurrentPeriodCredits is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodCredits.PeriodCredit[CurrentPeriod]

		CurrentPeriodPaid is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodPaid.PeriodPaid[CurrentPeriod]

		CurrentPeriodBillings is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodBillings.PeriodBilling[CurrentPeriod]

		CurrentPeriodEarnedDiscounts is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodEarnedDiscounts.PeriodEarnedDiscount[CurrentPeriod]

		CurrentPeriodUnearnedDiscounts is a DerivedField
			type is like InternationalAmount
			return CurrentCompanyCustomerPeriodTotalsRel.PeriodUnearnedDiscounts.PeriodUnearnedDiscount[CurrentPeriod]

		FilteredAmountCustomerCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceDetailRelAmounts	
			include SumReceivablePaymentsForCustomerRelAmounts	
			include SumCustomerDraftRelAmounts	

			return (SumOfReceivableInvoiceDetailRelFilteredAmountCustomerCurrency + SumOfReceivablePaymentsForCustomerRelFilteredAmountCustomerCurrency + SumOfCustomerDraftRelFilteredAmountCustomerCurrency)	

		FilteredAmountCompanyCurrency is a DerivedField	
			type is like InternationalAmount
			if (!FilterExists)	
				include SumOpenReceivableInvoiceDetailAmounts	
				include SumOpenOrUnreleasedReceivablePaymentsRelAmounts	
				include SumCustomerDraftRelAmounts
				return (SumOfOpenReceivableInvoiceDetailRelFilteredAmountCompanyCurrency + SumOfOpenOrUnreleasedReceivablePaymentsRelFilteredAmountCompanyCurrency + SumOfCustomerDraftRelFilteredAmountCompanyCurrency)
			else
			if (FilterExistsAndNoHistory)	
				include SumOpenReceivableInvoiceDetailAmounts	
				include SumOpenOrUnreleasedReceivablePaymentsRelAmounts	
				include SumCustomerDraftRelAmounts
				return (SumOfOpenReceivableInvoiceDetailRelFilteredAmountCompanyCurrency + SumOfOpenOrUnreleasedReceivablePaymentsRelFilteredAmountCompanyCurrency + SumOfCustomerDraftRelFilteredAmountCompanyCurrency)
			else
			if (FilterExistsAndOnlyShowHistory)	
				include SumClosedTransactionsNavAmounts	
				include SumClosedPaymentNavRelAmounts	
				include SumCustomerDraftRelAmounts
				return (SumOfClosedTransactionsNavRelFilteredAmountCompanyCurrency + SumOfClosedPaymentNavRelFilteredAmountCompanyCurrency + SumOfCustomerDraftRelFilteredAmountCompanyCurrency)
			else
			if (FilterExistsAndIncludeHistory)
				include SumReceivableInvoiceDetailRelAmounts	
				include SumReceivablePaymentsForCustomerRelAmounts	
				include SumCustomerDraftRelAmounts	

				return (SumOfReceivableInvoiceDetailRelFilteredAmountCompanyCurrency + SumOfReceivablePaymentsForCustomerRelFilteredAmountCompanyCurrency + SumOfCustomerDraftRelFilteredAmountCompanyCurrency)	

		FilteredAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceDetailRelAmounts	
			include SumReceivablePaymentsForCustomerRelAmounts	
			include SumCustomerDraftRelAmounts	

			return (SumOfReceivableInvoiceDetailRelFilteredAmountGroupCurrency + SumOfReceivablePaymentsForCustomerRelFilteredAmountGroupCurrency + SumOfCustomerDraftRelFilteredAmountGroupCurrency)	

		OECBrokenCaseCharge is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.BrokenCaseCharge

		OECBillingLineItemRequired is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.BillingLineItemRequired

		OECProofOfDeliveryRequired is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.ProofOfDeliveryRequired

		OECCashInAdvanceRequired is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.CashInAdvanceRequired

		OECCashInAdvanceRequiredPercent is a DerivedField
			type is Percent size 8.5
			restricted
			if (UseTransientBillingInputs)
				return 0
			else
				return CompanyCustomer.OrderEntryCustomer.CashInAdvanceRequiredPercent

		OECCheckCreditOnOrderAdd is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.CheckCreditOnOrderAdd

		OECProformaCashInAdvanceRequired is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.ProformaCashInAdvanceRequired

		OECProformaCashInAdvanceRequiredPercent is a DerivedField
			type is Percent size 8.5
			restricted
			if (UseTransientBillingInputs)
				return 0
			else
				return CompanyCustomer.OrderEntryCustomer.ProformaCashInAdvanceRequiredPercent


		OECCheckCreditBeforePickingList is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.CheckCreditBeforePickingList

		OECAllowReturns is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.AllowReturns

		OECCustomeOrderAcknowledgments is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.CustomeOrderAcknowledgments

		OECPORequiredForCustomerOrder is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.PORequiredForCustomerOrder

		OECBackorderAllowed	 is a DerivedField
			type is Boolean
			restricted
			if (UseTransientBillingInputs)
				return false
			else
				return CompanyCustomer.OrderEntryCustomer.BackorderAllowed

		DerivedCurrencyNetBalance is a DerivedField	
			type is like InternationalAmount
			if (HasCurrencyMatch)
				if ((CurrentBalance - DerivedTotalCurrencyVendorBalance) < 0)
					return (DerivedTotalCurrencyVendorBalance - CurrentBalance)
				else
					return (CurrentBalance - DerivedTotalCurrencyVendorBalance)

		DerivedTotalCurrencyVendorBalance is a DerivedField
			type is like InternationalAmount
			return (sum AllVendorBalancesRel.CurrentBalance)

		DerivedCompanyNetBalance is a DerivedField
			type is Alpha 30
			if (any AllVendorBalancesRel.BalanceCurrency != Currency)
				return "VendorBalanceCurrencyIs<Vendor.BalanceCurrency>"
			else
				return DerivedCurrencyNetBalance


		NetCompanyBalanceType is a DerivedField
			type is Alpha 14
			if (HasCurrencyMatch)
				if ((CurrentBalance - DerivedTotalCurrencyVendorBalance) < 0)
					return "Net AP Balance"
				else
					return "Net AR Balance"

		DerivedHasVendor is a DerivedField
			type is Boolean
			restricted
			if (HasVendor)
				return true

		DerivedCustomerBalance	is a DerivedField
			type is Boolean
			restricted
			if (Customer.TotalCurrentBalance entered)
				return true

		DerivedVendorBalance is a DerivedField
			type is Boolean
			restricted
			if (any AllVendorBalancesRel.CurrentBalance entered)
				return true

		DerivedNetCustomerBalance is a DerivedField
			type is like InternationalAmount
			restricted
			if  (HasVendorBalance
			and HasCurrencyMatch)
				return (CurrentBalance - DerivedTotalCurrencyVendorBalance)
			else
			if (!HasVendorBalance)
				return CurrentBalance

		DerivedNetVendorBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return CurrentBalance * -1


		DerivedTransactionDate	is a DerivedField
			type is Date
			return LocalAsOfDateIDM

		DerivedPaymentRequestNoticeXMLName			is a DerivedField
			type is Alpha 100
			restricted
			if (PaymentRequestNoticeNotPrinted)
				return "Payment Request Notice" + Company + "-" + Customer + "-" + DerivedCurrentYear + DerivedCurrentMonth + DerivedCurrentDay
			else
				return "Payment Request Notice" + Company + "-" + Customer + "-" + DerivedCurrentYear + DerivedCurrentMonth + DerivedCurrentDay + " Reprint " + IDMPaymentRequestNoticeSequenceNumber

		DerivedCurrentDateForIDM is a DerivedField
			type is Date
			return current corporate date

		DerivedCurrentMonth is a DerivedField
			type is Alpha 2
			restricted
			if (DerivedCurrentDateForIDM month < 10)
				LocalMonthsIDM = "0" + DerivedCurrentDateForIDM month
			else
				LocalMonthsIDM = DerivedCurrentDateForIDM month
			return LocalMonthsIDM

		DerivedCurrentDay is a DerivedField
			type is Alpha 2
			restricted
			if (DerivedCurrentDateForIDM day < 10)
				LocalDaysIDM = "0" + DerivedCurrentDateForIDM day
			else
				LocalDaysIDM = DerivedCurrentDateForIDM day
			return LocalDaysIDM

		DerivedCurrentYear is a DerivedField
			type is Numeric 4
			restricted
			return DerivedCurrentDateForIDM year

		DerivedCurrentTime is a DerivedField
			type is TimeStamp
			return current timestamp

		DerivedMemoCBCurrency is a DerivedField
			type is Alpha 5
			return first ReceivablePaymentNoticeDetailMemoChargebackRel.Currency

		DerivedMemoCBTotal is a DerivedField
			type is like InternationalAmount
			DerivedMemoCBTotal = 0
			for each ReceivablePaymentNoticeDetailMemoCBSecondSeqRel
				DerivedMemoCBTotal += each.Amounts.Amount[2]
			return DerivedMemoCBTotal

		DerivedNetFinanceCurrency is a DerivedField
			type is Alpha 5
			return first ReceivablePaymentNoticeDetailNetFinanceRel.Currency

		DerivedNetFinanceTotal is a DerivedField
			type is like InternationalAmount
			DerivedNetFinanceTotal = 0
			for each ReceivablePaymentNoticeDetailNetFinanceRel
				DerivedNetFinanceTotal += each.Amounts.Amount[2]
			return DerivedNetFinanceTotal

		DerivedCustBillToName is a DerivedField 
			type is like VendorName 
			holds pii
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelName	
			else
				return Customer.Name

		DerivedCustBillToAddrLine1 is a DerivedField
			type is Alpha 40
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine1	
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustBillToAddrLine2 is a DerivedField
			type is Alpha 40
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine2	
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustBillToAddrLine3 is a DerivedField
			type is Alpha 40
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine3	
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustBillToAddrLine4 is a DerivedField
			type is Alpha 40
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressDeliveryAddressAddressLine4	
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustBillToCity is a DerivedField
			type is Alpha 58
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressMunicipality	
			else
				return Customer.PostalAddress.Municipality

		DerivedCustBillToState is a DerivedField
			type is Alpha 58
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressStateProvince	
			else
				return Customer.PostalAddress.StateProvince

		DerivedCustBillToPostalCode is a DerivedField
			type is Alpha 58
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressPostalCode	
			else
				return Customer.PostalAddress.PostalCode

		DerivedCustBillToCountry is a DerivedField
			type is Alpha 58
			if (HasDefaultBillTo)
				include FirstCustomerDefaultBillToRel	

				return FirstOfCustomerDefaultBillToRelPostalAddressCountry	
			else
				return Customer.PostalAddress.Country

		DerivedPaymentRequestNoticeEmailSubject is a MessageField
			restricted
			"PaymentRequestNotice<Company.Name>_<Customer>_<DerivedCurrentDateForIDM>"

		DerivedCompanyEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			LocalIDMEmailSubject = Company.PaymentRequestNoticeIDMEmailSubject
			return LocalIDMEmailSubject text


		VatRequestXML is a DerivedField	
			type is XMLDocument
			restricted
			VatRequestXML = template.VatTemplate document for this instance

		ZeroPaddedLastPayablesInterfaceInvoice is a DerivedField
			type is AlphaUpper 8
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedLastPayablesInterfaceInvoice)

		DerivedLastPayablesInterfaceInvoice is a DerivedField
			type is AlphaRight 8
			restricted
			return LocalSuffix

		ZeroPaddedCompany is a DerivedField
			type is AlphaUpper 4
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedCompany)

		DerivedCompany is a DerivedField
			type is AlphaRight 4
			return Company


		DerivedFileName is a StringField
			type is Alpha 100
			restricted
			"Company "
			Company
			" Customer "
			Customer
			" EFT Notification Print "
			"Date "
			LocalPrintDateIDM

		DerivedEFTBank is a DerivedField
			type is AlphaUpper size 15
			return last Customer.CustomerEFTDraftBankRel.CustomerDraftBank.BOEEFTBank

		DerivedEFTBankAccount is a DerivedField
			type is AlphaUpper size 35
			return last Customer.CustomerEFTDraftBankRel.CustomerDraftBank.BOEEFTBankAccount

		FinalNotifTotalTransactionAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionFinalNotifRel.ReceivableInvoiceDetail.SignedTransactionAmount

		FinalNotifTotalDiscountAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionFinalNotifRel.ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[1]

		FinalTotalNetAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionFinalNotifRel.NetAmount

		FinalNotificationCount is a DerivedField
			type is Numeric size 6
			return instance count of ElectronicFundsTransferTransactionFinalNotifRel

		PreNotifTotalTransactionAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionPreNotifRel.ReceivableInvoiceDetail.SignedTransactionAmount

		PreNotifTotalDiscountAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionPreNotifRel.ReceivableInvoiceDetail.DiscountAmount.OrigDiscAmt[1]

		PreTotalNetAmount is a DerivedField
			type is like InternationalAmount
			return sum ElectronicFundsTransferTransactionPreNotifRel.NetAmount

		PreNotificationCount is a DerivedField
			type is Numeric size 6
			return instance count of ElectronicFundsTransferTransactionPreNotifRel

		WithPreNotifLines is a DerivedField
			type is Alpha 3
			if (ElectronicFundsTransferTransactionPreNotifRel exists)
				return "Yes"
			else
				return "No"

		WithFinalNotifLines is a DerivedField
			type is Alpha 3
			if (ElectronicFundsTransferTransactionFinalNotifRel exists)
				return "Yes"
			else
				return "No"

		DerivedCompanyEFTNotificationPrintEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			LocalIDMEmailSubject = Company.EFTNotificationPrintIDMEmailSubject
			return LocalIDMEmailSubject text

		DerivedEFTNotificationPrintEmailSubject is a MessageField
			restricted
			"EFTNotificationPrint<Company.Name>_<Customer.Name>_<DerivedCurrentDateForIDM>"


		DerivedEstimatesTotalCharges is a DerivedField
			type is like InternationalAmount
			initialize LocalEstimatesTotalCharges
			for each FranchiseSalesRel
				LocalFranchiseContract	= each.FranchiseSales.FranchiseContract
				LocalContractCurrency	 = each.FranchiseSales.FranchiseContract.Currency
				if (Currency = LocalContractCurrency)
					LocalEstimatesCurrentCharges	  = each.TotalCharges
					LocalEstimatesTotalCharges  	 += LocalEstimatesCurrentCharges
				else
					initialize CurrencyExchangeGroup
					LocalCurrencyExchangeDate							 = each.FranchiseSales.Date
					LocalFromCurrency									 = LocalContractCurrency
					LocalToCurrency										 = Currency
					CurrencyExchangeGroup.TransactionAmount 			 = each.TotalCharges
					LocalEstimatesCurrentCharges						 = CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
					LocalEstimatesTotalCharges						  += LocalEstimatesCurrentCharges
			return	LocalEstimatesTotalCharges

		DerivedOutstandingFranchiseBalance is a DerivedField
			type is like InternationalAmount
			if (DerivedEstimatesTotalCharges = 0
			and CurrentBalance > 0)
				return CurrentBalance
			else
			if (DerivedEstimatesTotalCharges entered)
				return (DerivedEstimatesTotalCharges + CurrentBalance)




		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		BODVariationID is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID

		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp

		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Delete or ActionCode.Delete)
				return "Delete"
			else
			if (action type.Create or ActionCode.Create)
				return "Add"
			else
			if (action type.Update or ActionCode.Update)
				return "Replace"
			else
				return ""

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is Alpha 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "RequiredCleanDocumentID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IsMultipleFEG"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedBODStatuscode is a DerivedField
			type is Alpha 10
			restricted
			if(action type.Create)
				return "Open"
			else
			if(action type.Delete or ActionCode.Delete)
				return "Deleted"
			else
			if(action type.Update or ActionCode.Update)
				if(ActiveStatus.Inactive or ActiveStatus.Delete)
					return "Closed"
				else
					return "Open"
			else
				return ""

		AccountingEntity is a DerivedField
			type is Alpha 12
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity

		DerivedCrossGLC is a DerivedField
			type is Alpha size 50
			restricted
			if (DerivedMultipleFEG = "Y")
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company using "%d"
			else
				return Company using "%d"

		DerivedCPMAccountingEntity is a DerivedField
			type is Alpha 20
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if (FSMBODGLCCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODGLCCrossReferenceDetailRel.DestinationValue
					return LocalBODAccountingEntity
				else
					LocalBODAccountingEntity = DerivedCrossGLC
					return LocalBODAccountingEntity
			else
				return LocalBODAccountingEntity

		DerivedAccountingEntity is a DerivedField
			type is Alpha 20
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedCPMAccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + AccountingEntity

		DerivedCustomerCurrentReceivableBalance is a DerivedField
			type is Alpha 19
			restricted
			return Customer.CurrentReceivableBalance

		DerivedBODDocumentID is a DerivedField
			type is Alpha 25
			restricted
			if (DerivedCleanDocumentID = "Y")
				return Customer
			else
				return Company using "%d" + DerivedDelimiter + Customer

		DerivedBODFormattedId is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID + ":" +DerivedAccountingEntity+":" + DerivedBODDocumentID + ":" + "?CustomerPartyMaster&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		SStartDate is a DerivedField
			type is Alpha 20
			restricted
			return StartDate

		DerivedStartDate is a DerivedField
			type is Alpha size 25
			restricted
			return SStartDate[1:4]+ "-" + SStartDate[5:6]+ "-" + SStartDate[7:8]+ "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor

		DerivedCCustomerUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedCCustomerUpdateTimeStamp = update stamp.timestamp
			return DerivedCCustomerUpdateTimeStamp

		DerivedCCustomerFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedCCustomerUpdateTimeStamp[1:4] + "-" + DerivedCCustomerUpdateTimeStamp[5:6] + "-" + DerivedCCustomerUpdateTimeStamp[7:8] + "T" + DerivedCCustomerUpdateTimeStamp[9:10] + ":" + DerivedCCustomerUpdateTimeStamp[11:12] + ":" + DerivedCCustomerUpdateTimeStamp[13:14] + "Z"

		DerivedSalesRepresentativeName is a DerivedField
			type is Alpha 30
			restricted
			return SalesRepresentative.Name

		DerivedCustomerTaxId is a DerivedField
			type is Alpha 25
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "AR")
				if(Customer.TaxID = VATRegistrationNumber)
					return ""
				else
					return Customer.TaxID
			else
				return Customer.TaxID

		DerivedCustomerCreditAgencyNumber is a DerivedField
			type is Alpha 9
			restricted
			return Customer.CreditAgencyNumber

		DerivedCustomerName is a DerivedField
			type is Alpha 120
			restricted
			return Customer.Name

		DerivedCustomerCountry is a DerivedField
			type is Alpha 3
			restricted
			return Customer.PostalAddress.Country

		DerivedNationalIDNumber is a DerivedField
			type is Alpha 20
			restricted
			return Customer.PostalAddress.NationalIDNumber

		DerivedIndividualIDNumber is a DerivedField
			type is Alpha 20
			restricted
			return Customer.PostalAddress.IndividualIDNumber

		DerivedCTaxId is a DerivedField
			type is Alpha 20
			restricted
			if(DerivedNationalIDNumber!="")
				return Customer.PostalAddress.NationalIDNumber
			else
				return Customer.PostalAddress.IndividualIDNumber

		DerivedStateProvinceIDNumber is a DerivedField
			type is Alpha 20
			restricted
			return Customer.PostalAddress.StateProvinceIDNumber

		DerivedLocaleIDNumber is a DerivedField
			type is Alpha 20
			restricted
			return Customer.PostalAddress.LocaleIDNumber

		DerivedCustomerAddressLine1 is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerAddressLine2 is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerAddressLine3 is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerAddressLine4 is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerCity is a DerivedField
			type is Alpha 58
			restricted
			return Customer.PostalAddress.Municipality

		DerivedCustomerStateProvince is a DerivedField
			type is Alpha 3
			restricted
			return Customer.PostalAddress.StateProvince

		DerivedCustomerRegion is a DerivedField
			type is Alpha 30
			restricted
			return Customer.PostalAddress.Region

		DerivedCustomerPostalCode is a DerivedField
			type is Alpha 12
			restricted
			return Customer.PostalAddress.PostalCode

		DerivedCountryCode is a DerivedField
			type is Alpha 3
			restricted
			return Customer.PostalAddress.Country

		DerivedTaxIdentificationSchemaName is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationApplication = "Local.ly")
				return "TaxIdentificationNumber"
			else
				return ""

		DerivedSchemaAgencyValue is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "AR")
				return "AR:VAT"
			else
				return ""

		DerivedTaxSchemaAgencyValue is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "AR")
				if(Customer.TaxID = VATRegistrationNumber)
					return ""
				else
					return "AR:IIBB"
			else
				return ""

		DerivedTaxSchemaName is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "AR")
				if(Customer.TaxID = VATRegistrationNumber)
					return ""
				else
					return "TaxIdentificationNumber"
			else
				return ""

		DerivedCustomerTaxRegistrationType is a DerivedField
			type is Alpha 100
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "IN")
				if(Customer.TaxRegistrationType = "1")
					return "Registered"
				else
				if(Customer.TaxRegistrationType = "2")
					return "Unregistered"
				else
				if(Customer.TaxRegistrationType = "3")
					return "SpecialEconomicZone"
				else
					return ""
			else
				return ""

		DerivedCustomerContact is a DerivedField
			type is Alpha 20
			restricted
			return Customer.Contact

		DerivedCompanyCustomerPhoneInternationalPrefix is a DerivedField
			type is Alpha 6
			restricted
			return PhoneNumber.InternationalPrefix

		DerivedCompanyCustomerPhoneSubscriberNumber is a DerivedField
			type is Alpha 15
			restricted
			return PhoneNumber.SubscriberNumber

		DerivedCompanyCustomerPhoneExtension is a DerivedField
			type is Alpha 5
			restricted
			return PhoneNumber.Extension

		DerivedCompanyCustomerFaxSubscriberNumber is a DerivedField
			type is Alpha 15
			restricted
			return FaxNumber.SubscriberNumber

		DerivedCompanyCustomerFaxExtension is a DerivedField
			type is Alpha 5
			restricted
			return FaxNumber.Extension

		DerivedCustomerBankAccount is a DerivedField
			type is AlphaUpper size 35
			restricted
			return first CustomerDraftBankRel.CustomerDraftBank.BOEEFTBankAccount

		DerivedCustomerBankEntity is a DerivedField
			type is AlphaUpper size 15
			restricted
			return	first CompanyCustomerBankAccountRel.CompanyCustomerBankAccount.CustomerBankEntity

		DerivedTermsCodeDescription is a DerivedField
			type is Alpha size up to 60
			restricted
			return	TermsCode.Description.Desc[1]

		DerivedDebitCreditMemoTermsCodeDescription is a DerivedField
			type is Alpha size up to 60
			restricted
			return	DebitCreditMemoTermsCode.TermsCode.Description.Desc[1]

		CompanyCustomerXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "BR")
					return template.IONSyncCustomerPartyMaster_BR_CleanDoc_ST document for this instance
				else
					return template.IONSyncCustomerPartyMaster_CleanDoc_ST document for this instance
			else
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "BR")
				return template.IONSyncCustomerPartyMaster_BR_CompanyCustomer_ST document for this instance
			else
				return template.IONSyncCustomerPartyMaster_CompanyCustomer_ST document for this instance

		DerivedRevision is a DerivedField
			type is Alpha 10
			restricted
			return ""

		Derivedlocation is a DerivedField
			type is Alpha 10
			restricted
			return ""

		DerivedSystemOfRecord is a DerivedField
			type is Alpha 10
			restricted
			return 0


		CreditAddCreditLimitChangeDescription is a DerivedField
			type is Alpha 100
			restricted
			if (CreditLimit changed)
				return "Credit Limit Changed for Customer "+ Customer
			else
				return "Customer " + Customer+" has been added "

		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted
			return	"infor-nid:" + DerivedTenantID +":"+ Company.CustomerBusinessGroup.FinanceEnterpriseGroup +":"+ CompanyCustomer +":"+ "?CustomerAddCreditLimitChange&verb=Process"

		CreditAddCreditLimitChangeAlertXML is a DerivedField
			type is XMLDocument
			restricted
			if (CreditLimit changed)
				CreditAddCreditLimitChangeAlertXML = template.IONCreditLimitChange_CompanyCustomer_ST document for this instance
			else
				CreditAddCreditLimitChangeAlertXML = template.IONCustomerAdded_CompanyCustomer_ST document for this instance

		DerivedPriorCreditLimit	is a DerivedField
			type is Alpha 30
			restricted
			return old CreditLimit


		DerivedActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (ActionCode.Create or action type.Create)
				return "Add"
			else
			if (ActionCode.Update or action type.Update)
				return "Replace"
			else
			if (ActionCode.Delete or action type.Delete)
				return "Replace"
			else
				return ""

		DerivedBODStartDate is a DerivedField
			type is Alpha size 25
			restricted
			return SStartDate[1:4]+ "-" + SStartDate[5:6]+ "-" + SStartDate[7:8]

		DerivedLawsonCompany is a DerivedField
			type is AlphaRight 4
			restricted
			return Company using "%d"

		DerivedSearchName is a DerivedField
			type is Alpha size 50
			restricted
			return CompanyCustomer.SearchName

		DerivedPCounty is a DerivedField
			type is Alpha 30
			restricted
			return Customer.PostalAddress.County

		DerivedPayFromPartyMasterBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + "::" +DerivedBODDocumentID + ":"+"?PayFromPartyMaster&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedPInternationalPrefix is a DerivedField
			type is Alpha 6
			restricted
			return Customer.PhoneNumber.InternationalPrefix

		DerivedPSubscriberNumber is a DerivedField
			type is Alpha 15
			restricted
			return Customer.PhoneNumber.SubscriberNumber

		DerivedPExtension is a DerivedField
			type is Alpha 5
			restricted
			return Customer.PhoneNumber.Extension

		PayFromPartyMasterXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				PayFromPartyMasterXMLBOD = template.IONSyncPayFromPartyMaster_CompanyCustomer_CleanDoc_ST document for this instance
			else
				PayFromPartyMasterXMLBOD = template.IONSyncPayFromPartyMaster_CompanyCustomer_ST document for this instance

		BillToPartyBODXML is a DerivedField
			type is XMLDocument
			restricted
			if (CustomerBillToRel exist)
				for each CustomerBillToRel
			  	  	each.LocalAccountingEntity = DerivedAccountingEntity
			  	  	BillToPartyBODXML += template.IONSyncPayFromPartyMaster_CompanyCustomer_BillToParty_ST document for each
				return BillToPartyBODXML

		AffiliateOwnershipWarningMsg is a MessageField
			"AffiliateOwnershipMustBeDefinedForEachCompanyCustomerWhereAffiliateFlagIsEnabled"









		CompanyCustomerTitleWithRecord is a LabelField	
			"_-_Company<Company.RepresentativeText>_-_Customer<Customer>_-_<Customer.Name>"

		CompanyNameCustomerName is a LabelField	
			"Company<Company.RepresentativeText>_-_Customer<Customer.RepresentativeText>"

		CompanyCustomerTitle is a DerivedField	
			type is MessageField
			return CompanyCustomerTitleWithRecord

		CompanyCustomerAgingTitle is a DerivedField	
			type is MessageField
			if (AgingCodeEntered)
				return CompanyCustomerTitleWithRecord
			else
				return CompanyNameCustomerName

		CompanyCustomerRepresentativeText is a DerivedField	
			type is MessageField

			return CompanyNameCustomerName

		FilterButtonLabel is a DerivedField	
			type is Alpha 8
			restricted
			if (FilterExists)
				return "*Filter"
			else
				return "Filter"

		AgingCodeTitleWithRecord is a LabelField	
			"AgingCode<AgingCode>Aging"				

		AgingCodeTitle is a DerivedField	
			type is MessageField
			restricted
			if (AgingCodeEntered)
				return AgingCodeTitleWithRecord
			else
				return blank

		CompanyCustomerPrimaryTitleWithRecord is a LabelField
			"Company<Company>_|_Customer<Customer>_-_<Customer.Name>"

		CompanyCustomerPrimaryTitleWithNoRecord is a LabelField
			"CompanyCustomer"

		CompanyCustomerPrimaryFormTitle is a DerivedField
			type is MessageField
			if (RecordExists)
				return CompanyCustomerPrimaryTitleWithRecord
			else
				return CompanyCustomerPrimaryTitleWithNoRecord
		DerivedStaticAgingCurrentPeriodAmount	is a DerivedField	
			type is like InternationalAmount
			return StaticAgingCurrentPeriodAmount

		DerivedCompanyCustomerAging1	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[1]

		DerivedCompanyCustomerAging2	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[2]

		DerivedCompanyCustomerAging3	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[3]

		DerivedCompanyCustomerAging4	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[4]

		DerivedCompanyCustomerAging5	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[5]

		DerivedCompanyCustomerAging6	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[6]

		DerivedCompanyCustomerAging7	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[7]

		DerivedCompanyCustomerAging8	is a DerivedField
			type is like InternationalAmount
			return Agings.Aging[8]

		CurrentBalanceDisplay		is a LabelField 
	 		"<Company.Currency>_<CurrentPlusBillOfExchangeBalance>"

	 	CreditLimitDisplay			is a LabelField 
	 		"<CreditLimit>"


		DerivedLastInvoiceAmount	is a DerivedField
			type is like InternationalAmount
			return LastInvoiceAmount

		DerivedLastPaymentAmount	is a DerivedField
			type is like InternationalAmount
			return LastPaymentAmount

		DerivedLastStatementBalance	is a DerivedField
			type is like InternationalAmount
			return LastStatementBalance

		DerivedLastDunningLetterAmount	is a DerivedField
			type is like InternationalAmount
			return LastDunningLetterAmount

	 	DerivedAddressOfCustomer	is a DerivedField
	 		type is Alpha size 500
	 		initialize LocalTemp
	 		if (CustomerRel.PostalAddress.Municipality entered)
	 			LocalTemp += CustomerRel.PostalAddress.Municipality
	 		if (CustomerRel.PostalAddress.County entered)
	 			if (CustomerRel.PostalAddress.Municipality entered)
	 				LocalTemp += ", "
	 			LocalTemp += CustomerRel.PostalAddress.County
	 		if (CustomerRel.PostalAddress.PostalCode entered)
	 			if (CustomerRel.PostalAddress.Municipality entered
	 			or CustomerRel.PostalAddress.County entered)
	 				LocalTemp += ", "
	 			LocalTemp += CustomerRel.PostalAddress.PostalCode
	 		if (CustomerRel.PostalAddress.StateProvince.Name entered)
	 			if (CustomerRel.PostalAddress.PostalCode entered
	 			or CustomerRel.PostalAddress.Municipality entered
	 			or CustomerRel.PostalAddress.County entered)
	 				LocalTemp += ", "
	 			LocalTemp += CustomerRel.PostalAddress.StateProvince.Name
	 		if (CustomerRel.PostalAddress.Country entered)
	 			if (CustomerRel.PostalAddress.StateProvince.Name entered
	 			or CustomerRel.PostalAddress.PostalCode entered
	 			or CustomerRel.PostalAddress.Municipality entered
	 			or CustomerRel.PostalAddress.County entered)
	 				LocalTemp += ", "
	 			LocalTemp += CustomerRel.PostalAddress.Country
	 		return LocalTemp

		
		MeasureDelinquency is a MeasureField	
			type is like Percent
			(sum DerivedPastDue /sum CurrentPlusBillOfExchangeBalance)

		BillingInvoiceEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Billing_InvoiceEmailOption."

		BasicDunningLetterEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Basic_Dunning_LetterEmailOption."

		AdvancedDunningLetterEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Advanced_Dunning_LetterEmailOption."

		ReceivablesStatementEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Receivables_StatementEmailOption."

		PaymentRequestNoticeEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Payment_Request_NoticeEmailOption."

		EFTNotificationPrintEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_EFT_Notification_PrintEmailOption."
		
		ReceivableInvoiceEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Receivable_InvoiceEmailOption."

		PaymentReceiptEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Payment_ReceiptEmailOption."

		PrepaymentReceiptEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Prepayment_ReceiptEmailOption."

		SubleaseBillingInvoiceEmailOnlyCustomerContactWarningMsg is a MessageField
			restricted
			"MustHaveExistingCustomerContactWithEnabled_Sublease_Billing_InvoiceEmailOption."
		
	Conditions
		DisplayAffiliateOwnershipWarningMsg
			restricted
			when (Company.ClaimsAndLiabilitiesReporting
			and Company.AccountingEntity.AddressCode.PostalAddress.Country != Customer.PostalAddress.Country
			and Affiliate
			and AffiliateOwnership not entered)

		IsForeignVendor
 			restricted
 			when (Customer.PostalAddress.Country != Company.AccountingEntity.AddressCode.PostalAddress.Country)

		HasNationAccountCustomer
			restricted
			when (NationalAccountCustomerRel exists)

		BypassRuleForTheseFiles
			restricted
			when  (InterfaceInProcess
			or	 parentcontext.name = "ReceivableElectronicFundsTransferNotify"
			or	 parentcontext.name = "OrderEntryCustomer"
			or	 parentcontext.name = "CompanyCustomerPeriodTotals"
			or	 parentcontext.name = "CustomerBillTo"
			or	 parentcontext.name = "CustomerMappingTableInterface"
			or	 parentcontext.name = "CompanyCustomerConversion"
			or	 parentcontext.name = "CompanyCustomerImport"
			or	 parentcontext.name = "CompanyCustomerBankAccount")

		Test
			restricted
			when (SearchName = "X")
		TestTransient
			restricted
			when (DisplayCurrency.Base)

		IsEDINumber
			classic name is ACMSET9
			restricted
			when (EDINumber entered)

		IsContactExist
			classic name is ARCONTACT-EXST
			restricted
			when (first CompanyCustomerContactRel exists)

		HasEmailBillingInvoiceContactExist
			restricted
			when (CompanyCustomerContactHasEmailBillingInvoiceRel exists)

		HasEmailBasicDunningLetterContactExist
			restricted
			when (CompanyCustomerContactHasEmailBasicDunningLetterRel exists)

		HasEmailReceivableInvoiceContactExist
			restricted
			when (CompanyCustomerContactHasEmailReceivableInvoiceRel exists)

		HasEmailPaymentReceiptContactExist
			restricted
			when (CompanyCustomerContactHasEmailPaymentReceiptRel exists)

		HasEmailPrepaymentReceiptContactExist
			restricted
			when (CompanyCustomerContactHasEmailPrepaymentReceiptRel exists)

		HasEmailSubleaseBillingInvoiceContactExist
			restricted
			when (CompanyCustomerContactHasEmailSubleaseBillingInvoiceRel exists)

		HasEmailAdvancedDunningLetterContactExist
			restricted
			when (CompanyCustomerContactHasEmailAdvancedDunningLetterRel exists)

		HasEmailReceivablesStatementContactExist
			restricted
			when (CompanyCustomerContactHasEmailReceivablesStatementRel exists)

		HasEmailPaymentRequestNoticeContactExist
			restricted
			when (CompanyCustomerContactHasEmailPaymentRequestNoticeRel exists)

		HasEmailEFTNotificationPrintContactExist
			restricted
			when (CompanyCustomerContactHasEmailEFTNotificationPrintRel exists)

		HasPayments
			classic name is ARCSTPAY-EXIST
			restricted
			when (first ReceivablePaymentRel exists)

		HasClosedPayments
			restricted
			when (first ClosedPaymentNavRel exists)





		HasDisputes
			classic name is ARDISP-EXISTS
			restricted
			when (first ReceivableInvoiceDisputeRel exists)

		HasOpenDisputes
			restricted
			when (first OpenDisputeRel exists)

		HasClosedDisputes
			restricted
			when (first ClosedDisputeRel exists)

		HasReceivableInvoiceDetail
			classic name is AROITEMS-EXIST
			restricted
			when (first ReceivableInvoiceDetailRel exists)

		HasCustomerPayAccountsRel	
			restricted
			when (first CustomerPayAccountsRel exists)

		IsClosedTransactions
			restricted
			when (first ClosedTransactionsNavRel exists)






		IsReceivablePayments
			classic name is ARPAY-EXISTS
			restricted
			when (first OpenReceivablePaymentRel exists)

		IsAutoDeductReason
			classic name is ARREASON
			restricted
			when (MaximumShortReasonCode.AutoReasCd entered)

		HasBillTos
			classic name is BILLTO-EXISTS
			restricted
			when (first CustomerBillToRel exists)

		HasComments
			classic name is COMMENTS-EXIST
			restricted
			when (first CompanyCustomerCommentRel exists)


		HasCurrentComments
			classic name is COMMENTS-EXIST
			restricted
			when (first CompanyCustomerCommentRel exists
			and   CompanyCustomerCommentRel.BeginDate >= current corporate date
			and   CompanyCustomerCommentRel.EndDate <= current corporate date)

		IsHoldCode
			classic name is CUST-ON-HOLD
			restricted
			when (ReceivableHoldCode entered)

		HasPeriodAmounts
			classic name is CUSTPER-EXISTS
			restricted
			when (first ArcustperRel exists)

		HasEFTCustomeGroup
			classic name is FTGRP-EXISTS
			restricted
			when (first ElectronicFundsTransferCustomerGroupRel exists)

		IsInvoicedCustomer
			classic name is INVCUST
			restricted
			when (NationalAccountIndicator.Child)

		HasBankAccount
			classic name is MICR-EXISTS
			restricted
			when (first CompanyCustomerBankAccountRel exists)

		IsNationalAccountCustomer
			classic name is NATACCT
			restricted
			when (NationalAccountIndicator.Parent)

		HasObjectID
			classic name is OBJ-ID-EXISTS
			restricted
			when (ObjectID entered)

		IsPartOfNationalAcount
			restricted
			when (IsNationalAccountCustomer
			or	  IsInvoicedCustomer)






		IsOrderEntryCustomerComplete
			restricted
			when (OrderEntryCustomer.Incomplete)

		IsAvailableForRelease
			restricted
			when (ARToAPInterfaceSelectedRel exists)

		IsCashOperatorRequired
			restricted
			when (Company.CashOperatorRequired)

		AlwaysTrue
			restricted
			when (Customer entered)
		AlwaysFalse
			restricted
			when (!Customer entered)

		HasReceivableInvoiceObligationGroup
			restricted
			when (ReceivableInvoiceObligationGroupRel exists)

		HasPendingAdjustments
			restricted
			when (CustomerPendingAdjustmentsRel exists)

		HasCustomerDraftBank	
			restricted
			when (first CustomerDraftBankRel exists)

		HasCustomerEFTDraftBank
			restricted
			when (CustomerEFTDraftBankRel exists)

		HasCustomerDraft
			restricted
			when (first CustomerDraftRel exists)

		HasPendingEFTAdjustments
			restricted
			when (ReceivableEFTAdjustmentsRel exists)

		AgingCodeEntered
			restricted
			when (AgingCode entered)

		HasCompanyCustomerStaticAging
			restricted
			when (CompanyCustomerStaticAging exists
			and CompanyCustomerStaticAging.AgingCode entered
			and CompanyCustomer.AgingCode entered)

		FilterExists
			restricted
			when (ReceivableFilterRel exists)

		FilterExistsAndIncludeHistory	//IEFIN-114145 - "All Records (Open and Closed) AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.IncludeHistory)

		FilterExistsAndOnlyShowHistory	//IEFIN-114145 - "Closed Records AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.OnlyShowHistory)

		FilterExistsAndNoHistory	//IEFIN-114145	 - "Default / Open AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.NoHistory)

		NoFilterExistsOrNoHistory	//IEFIN-109720 - "Default / Open AND Not Filtered"
			restricted
			when (!FilterExists
			or ReceivableFilterRel.HistoryFlag.NoHistory)

		ElectronicFundsOrBOEProcessing
			restricted
			when (Company.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing
			or	  Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.CompanyLevelProcessing)

		ElectronicFundsCompanyLevelProcessing	
			restricted
			when (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.CompanyLevelProcessing)

		BOEProcessing
			restricted
			when (Company.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing
			and   BillOfExchangeProcessing.Individual
			or	  BillOfExchangeProcessing.Summary)

		HasBillingCompany
			restricted
			when (BillingCompanyRel exists)

		IsOverCreditLimit
			restricted
			when (PercentOfBalance > 100)

		HasLastAging
			restricted
			when (Agings.Aging[5] entered)

		ReturnVertexTaxAreaId
			restricted
			when (TaxEntityRel.ThirdParty = "O"
			and   !TaxExempt)

		UsingVertex
			restricted
			when (TaxEntityRel.ThirdParty = "O")

		Testing
			restricted
			when (Company.CustomerGroupField.CustomerGroup = "MFS")

		HasOpenEFTTransactions
			restricted
			when (OpenEFTTransactionsRel exists)








		CompanyCustomerExists
			restricted
			when (CompanyCustomer exists)

		EmailEntered
			restricted
			when (EmailAddress entered)

		URLEntered
			restricted
			when (URLAddress entered)

		OrderEntryCustomerExists
			when (OrderEntryCustomerRel exists)

		AllowCreateOECustomer
			restricted
			when (HasBillingCompany
			and   !OrderEntryCustomerExists)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		IsValidForActorContextCreateRulesOnly	
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		HasMyReceivableInvoiceObligationGroup
			restricted
			when (ReceivableInvoiceObligationGroupActorRel exists)

		HasOpenTransactions
			when (OpenTransactionsForCustomerRel exists)

		IsEFTTransactionOnHold
			restricted
			when (ReceivableElectronicFundsTransferNotifyRel.HoldAllProcessing)

		HasElectronicFundsTransferNotify
			restricted
			when (ReceivableElectronicFundsTransferNotifyRel exists)

		IsValidForProcessingPendingEFTAdjustments
			restricted
			when (!IsEFTTransactionOnHold
			and	  HasPendingEFTAdjustments)

		MyInvoicesExists
			restricted
			when (MyOpenTransactionsForCustomerRel exists
			or	MyNationalAccountTransactionsRel exists)

		AllowEFTAdjustmentAdd
			restricted
			when (any OpenElectronicFundsTransferTransactionsRel.AllowEFTAdjustmentAdd)

		AvailableForAllEFTAdjustments
			restricted
			when (any OpenElectronicFundsTransferTransactionsRel.AvailableForEFTAdjustmentsHold)

		AllowEFTAdjustmentUnselect
			restricted
			when (any OpenElectronicFundsTransferTransactionsRel.AllowEFTAdjustmentUnselect)

		IsIntercompanyBillingDefaultCustomer
			restricted
			when (Customer = Company.ICBillingDefaultCustomer)

		IsICBillingDefaultCustomer
			restricted
			when (ReceivableCompanyWithICBDefaultRel exists)

		ExpandedAgingPeriods
			restricted
			when (Company.ExpandedAgingPeriods)

		StaticExpandedAgingPeriods
			restricted
			when (AgingCode.ExpandedAgingPeriods
			or CompanyCustomerStaticAgingRel.AgingCode.ExpandedAgingPeriods)

		ShowAgePeriodBalance
			restricted
			when (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods
			and   AgePeriodBalanceHeaderRel exists)

		HasCurrencyMismatch
			when (HasVendorBalance
			and   any AllVendorBalancesRel.BalanceCurrency != Currency)

		HasCurrencyMatch
			when (all AllVendorBalancesRel.BalanceCurrency = Currency)

		HasVendorBalance

			when (AllVendorBalancesRel exists)

		HasDunning
			restricted
			when (DunningHistoryRel exists)

		HasDefaultBillTo
			restricted
			when (CustomerDefaultBillToRel exists)

		HasVendor	
			restricted
			when (VendorRel exists)

		PaymentRequestNoticeNotPrinted
			restricted
			when (LocalDateFilterIDM.NotPrinted)

		ActionValidateVAT	
			restricted
			when (actor.context.FinanceEnterpriseGroup.TaxConfiguration.ValidateVAT)

		ValidateVAT	
			restricted
			when (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.TaxConfiguration.ValidateVAT)

		VATRegistrationInformationEntered	
			restricted
			when (VATRegistrationCountry entered
			and	  VATRegistrationNumber entered)

		VATRegistrationInformationChanged	
			restricted
			when (VATRegistrationCountry changed
			or	  VATRegistrationNumber changed)

		PerformVATValidation	
			restricted
			when (ValidateVAT
			and	  VATRegistrationInformationEntered)

		DisplayInvalidText	
			restricted
			when (ValidateVAT
			and	  VATValidation.VATNumberValidated
			and	  VATRegistrationInformationEntered
			and	  !VATValidation.VATNumberValid)

		WithinVATDateRange	
			restricted
			when (VATDateRange not entered
			or	 (VATDateRange entered
			and	  VATValidation.ValidationDate within VATDateRange))

		DisabledReceivablesStatementAutoEmail
			restricted
			when (EmailReceivablesStatement changed and !EmailReceivablesStatement)

		DisabledBasicDunningLetterAutoEmail
			restricted
			when (EmailBasicDunningLetter changed and !EmailBasicDunningLetter)

		DisabledAdvancedDunningLetterAutoEmail
			restricted
			when (EmailAdvancedDunningLetter changed and !EmailAdvancedDunningLetter)

		DisabledPaymentRequestNoticeAutoEmail
			restricted
			when (EmailPaymentRequestNotice changed and !EmailPaymentRequestNotice)

		DisabledBillingInvoiceAutoEmail
			restricted
			when (EmailBillingInvoice changed and !EmailBillingInvoice)

		DisabledEFTNotificationPrintAutoEmail
			restricted
			when (EmailEFTNotificationPrint changed and !EmailEFTNotificationPrint)

		DisabledReceivableInvoiceAutoEmail
			restricted
			when (EmailReceivableInvoice changed
			and   not EmailReceivableInvoice)

		DisabledSubleaseBillingInvoiceAutoEmail
			restricted
			when (EmailSubleaseBillingInvoice changed
			and   not EmailSubleaseBillingInvoice)

		DisabledPaymentReceiptAutoEmail
			restricted
			when (EmailPaymentReceipt changed 
			and   not EmailPaymentReceipt)
		
		DisabledPrepaymentReceiptAutoEmail
			restricted
			when (EmailPrepaymentReceipt changed 
			and   not EmailPrepaymentReceipt)

		FranchiseCompanyExists
			restricted
			when (FranchiseCompanyRel exists)

		CompanyCustomerCommentIsTransactionCommentRelExists	
			restricted
			when (CompanyCustomerCommentIsTransactionCommentRel exists)

		CompanyCustomerCustomerTypeCommentRelExists	
			restricted
			when (CompanyCustomerCustomerTypeCommentRel exists)

		CompanyCustomerCommentIsOrderCommentRelExists	
			restricted
			when (CompanyCustomerCommentIsOrderCommentRel exists)

		RecordExists
			restricted
			when (CompanyCustomer exists)

		CustomerGroupUseBillingReceivablesPortalAndSetupForPaymentsAndHasCustomerRepresentative	
			restricted
			when (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal
			and	Company.CustomerGroupField.CustomerGroup.MainThirdPartyPaymentProcessingSetupsComplete
			and CustomerRepresentativeByCompanyCustomerRel exists)

		HasCompanyCustomerEFTDraftBank
			restricted
			when (first CompanyCustomerEFTDraftBanksRel exists)

		CompanyCustomerAlert
			restricted
			when (CreditLimit entered
			and   CurrentPlusBillOfExchangeBalance > CreditLimit)

		CompanyCustomerBuildIndexTextConfigurationParameterRelExists 
			restricted
			when (CompanyCustomerBuildIndexTextConfigurationParameterRel exists)

		DisplayCustomerRepresentative	
			restricted
			when (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal
			and CustomerRepresentativeByCompanyCustomerRel exists)

		CustomerStreetLineAddressEntered	
			restricted
			when (CustomerRel.PostalAddress.DisplayAddressCommaSeparated entered)

		NewCustomersThisWeek  
			restricted		
 			when (StartDate >= current corporate date - 6
			and   StartDate <= current corporate date)


	Relations	


		ARToAPInterfaceSelectedRel			
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses Set4 
				related.Company				 = Company
				related.Customer			 = Customer

		ARToAPInterfaceSelectedInvoicesRel	
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses Set4
				related.Company				 = Company
				related.Customer			 = Customer
			Instance Selection
				where (related.ARToAPApplicationSelect.ARToAPApplicationSelect.TransactionType = "C"
				or	   related.ARToAPApplicationSelect.ARToAPApplicationSelect.TransactionType = "D"
				or	   related.ARToAPApplicationSelect.ARToAPApplicationSelect.TransactionType = "I")

		ARToAPInterfaceSelectedPaymentsRel	
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses Set4
				related.Company				 = Company
				related.Customer			 = Customer
			Instance Selection
				where (related.ARToAPApplicationSelect.ARToAPApplicationSelect.TransactionType = "P"
				or	   related.ARToAPApplicationSelect.ARToAPApplicationSelect.TransactionType = "B")




		BalanceForwardStatementTotalRel	
			one-to-one relation to BalanceForwardStatementTotal
			Field Mapping uses symbolic key
				related.Company				 				  = Company
				related.Customer			 				  = Customer
				related.BalanceForwardStatementTotal.Currency = Currency



		BankTransactionCodeRel	
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
				related.BankTransactionCode		 = BankTransactionCode



		BillingCompanyRel	
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company					= Company



		BillingCustomerCreditCardForDefaultAccountRel is a BillingCustomerCreditCard set	
			Instance Selection
				where (related.DefaultAccount)

		CustomerPayAccountsRel is a BillingCustomerCreditCard set	




		LocalCompanyCustomerRel	
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					 = LocalCompany
				related.Customer				 = LocalCustomer

		CompanyCustomerPurgeRel	
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					 = LocalPurgeCompany
				related.Customer				 = LocalPurgeCustomer

		CompanyEDINumberRel	
			one-to-one relation to CompanyCustomer
			Field Mapping uses Set9
				related.Company							 = Company
				related.EDINumber						 = EDINumber



		CompanyCustomerBalanceActivityRel is a CompanyCustomerBalanceActivity set	



		CompanyCustomerBankAccountRel	
			classic name is ARMICRCUST
			one-to-many relation to CompanyCustomerBankAccount
			Field Mapping uses Set2
				related.Company		 = Company
				related.Customer	 = Customer



		CompanyCustomerCommentIsOrderCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set5	
				related.Company									 = Company
				related.Customer								 = Customer

		CompanyCustomerCommentIsTransactionCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2	
				related.Company									 = Company
				related.Customer								 = Customer

		CompanyCustomerCommentRel is a CompanyCustomerComment set	
			classic name is ARCOMMENTS






		CompanyCustomerCustomerTypeCommentRel	
			classic name is ARCOMMENT3
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set3
				related.Company		 = Company
				related.Customer	 = Customer

		ReceivableCommentsRel is a CompanyCustomerComment set	



		CompanyCustomerCommentAttachmentRel	
			one-to-many relation to CompanyCustomerCommentAttachment
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.Customer			 = Customer



		CompanyCustomerContactRel	
			classic name is ARCONTACTS
			one-to-many relation to CompanyCustomerContact
			delete cascades
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer


		CompanyCustomerContactHasEmailBillingInvoiceRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailBillingInvoice)

		CompanyCustomerContactHasEmailReceivableInvoiceRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailReceivableInvoice)

		CompanyCustomerContactHasEmailPaymentReceiptRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailPaymentReceipt)

		CompanyCustomerContactHasEmailPrepaymentReceiptRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailPrepaymentReceipt)

		CompanyCustomerContactHasEmailSubleaseBillingInvoiceRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailSubleaseBillingInvoice)

		CompanyCustomerContactHasEmailBasicDunningLetterRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailBasicDunningLetter)

		CompanyCustomerContactHasEmailAdvancedDunningLetterRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailAdvancedDunningLetter)

		CompanyCustomerContactHasEmailReceivablesStatementRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailReceivablesStatement)

		CompanyCustomerContactHasEmailPaymentRequestNoticeRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailPaymentRequestNotice)

		CompanyCustomerContactHasEmailEFTNotificationPrintRel
			one-to-many relation to CompanyCustomerContact
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= Customer
			Instance Selection
				where (related.EmailEFTNotificationPrint)


		ArcustperRel	
			one-to-many relation to CompanyCustomerPeriodTotals
			delete cascades
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.CompanyCustomerPeriodTotals.Customer	 = Customer)

		CompanyCustomerPeriodTotalsRel	
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.CompanyCustomerPeriodTotals.Customer	 = Customer
				related.CompanyCustomerPeriodTotals.Year		 = CurrentYear

		CompanyPeriodTotalRel
			one-to-one relation to CompanyPeriodTotal
			Field Mapping uses symbolic key
				related.Company 					= Company
				related.CompanyPeriodTotal.Year	    = CurrentYear

		CurrentCompanyCustomerPeriodTotalsRel	
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.CompanyCustomerPeriodTotals.Customer	 = Customer
				related.CompanyCustomerPeriodTotals.Year		 = DerivedFiscalYear



		CompanyCustomerReviewSelectRel	
			one-to-one relation to CompanyCustomerReviewSelect
			Field Mapping uses Set4
				related.Company												 = Company
				related.CompanyCustomerReviewSelect.Customer				 = Customer
				related.CompanyCustomerReviewSelect.SelectLevel				 = "C"

		NationalAccountReviewSelectRel	
			one-to-one relation to CompanyCustomerReviewSelect
			Field Mapping uses Set4
				related.Company												 = Company
				related.CompanyCustomerReviewSelect.Customer				 = Customer
				related.CompanyCustomerReviewSelect.SelectLevel				 = "N"

		CompanyCustomerBuildIndexTextConfigurationParameterRel	
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "CompanyCustomerBuildTextIndexes"


		CompanyCustomerStaticAgingRel	
			one-to-one relation to CompanyCustomerStaticAging
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer




















		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company

		PayablesCompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AP"
				related.Company					 = Company




		CustomerRel	
			classic name is CUSTOMERDESC
			one-to-one relation to Customer
			required
			Field Mapping uses symbolic key
				related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup
				related.Customer		 = Customer



		CustomerBillToRel	
			classic name is BILLTO
			one-to-many relation to CustomerBillTo
			Field Mapping uses symbolic key
				related.CustomerGroup	 = CustomerRel.CustomerGroup
				related.Customer		 = Customer



		CustomerCertificationsRel is a CustomerCertification set	



		CustomerCreditCardImportRel is a CustomerCreditCardImport set	



		CustomerDraftRel	
			one-to-many relation to CustomerDraft
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer



		CustomerDraftBankRel	
			one-to-many relation to CustomerDraftBank
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Customer.CustomerGroup	
				related.Company					 = Company	
				related.Customer				 = Customer	





		CustomerEFTDraftBankRel	
			one-to-many relation to CustomerDraftBank
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Customer.CustomerGroup	
				related.Company					 = Company	
				related.Customer				 = Customer	
			Instance Selection
				where (related.BankType								 = "E")	








		CustomerInvoiceTypeCodesRel	
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.Customer			 = Customer



		CustomerProcessLevelInclusionRel	
			classic name is CUSTOMERTOTALS
			one-to-many relation to CustomerProcessLevelInclusion
			delete cascades
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer

		CustomerProcessLevelsRel is a CustomerProcessLevelInclusion set	



		CustomerRepresentativeRel	
			one-to-one relation to CustomerRepresentative
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Company.CustomerGroupField.CustomerGroup
				related.CustomerRepresentative	 = CustomerRepresentative

		CustomerRepresentativeByCompanyCustomerRel		
			one-to-many relation to CustomerRepresentative
			Field Mapping uses ByCompanyCustomer
				related.CustomerGroup			= Company.CustomerGroupField.CustomerGroup
				related.ReceivableCompany	 	= Company
				related.Customer				= Customer
			Instance Selection
				where (related.CustomerRepresentativeStatus.Validated)



		CustomerShipToRel is a CustomerShipTo set		




		DunningHistoryRel	
			one-to-many relation to DunningHistory
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.Customer.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup )




		ElectronicFundsTransferCustomerGroupRel	
			classic name is FTCUSTGRP
			one-to-many relation to ElectronicFundsTransferCustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup	 = CustomerRel.CustomerGroup
			Instance Selection
				where (related.ElectronicFundsTransferCustomerGroup.Company			 = Company
				and   related.ElectronicFundsTransferCustomerGroup.CreditCustomer	 = Customer)




		FranchiseCompanyRel	
			one-to-one relation to FranchiseCompany
			Field Mapping uses symbolic key
				related.Company				= Company



		FranchiseCustomerBalanceRel is a FranchiseCustomerBalance set	



		FranchiseSalesRel	
			one-to-many relation to FranchiseSales
			Field Mapping uses Set2
				related.Company				= Company
				related.Customer			= Customer




		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company




		InterEntityEFTRelationRel	
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		 = GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		 = first EFTGroupProcessingCompanyRel.Company.AccountingEntity




		NationalAccountCustomerRel	
			classic name is NATACCT
			one-to-many relation to NationalAccount
			valid when (IsNationalAccountCustomer)
			Field Mapping uses Set5	
				related.NationalAccount.NationalAccountGroup.NatCompany		 = Company
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = Customer




		NationalAccountInvoicedCustomerRel	
			classic name is NATACCT
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company = Company
				related.NationalAccount.InvoiceAccountGroup.Customer = Customer




		NationalAccountInvoiceRel	
			one-to-many relation to NationalAccount
			valid when (IsInvoicedCustomer)
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer

		NationalAccountParentRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer

		NationalAccountPurgeRel	
			one-to-many relation to NationalAccount
			valid when (IsNationalAccountCustomer)
			Field Mapping uses Set5	
				related.NationalAccount.NationalAccountGroup.NatCompany		 = LocalPurgeCompany
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = LocalPurgeCustomer




		TransientNationalAccountRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company = TransientNationalAccountGroup.NatCompany
				related.NationalAccount.InvoiceAccountGroup.Customer = TransientNationalAccountGroup.NatCustomer






		NationalAccountBalanceRel	
			one-to-one relation to NationalAccountBalance
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.Customer					 = Customer

		NationalAccountBalanceParentRel	
			one-to-many relation to NationalAccountBalance
			Field Mapping uses symbolic key
				related.Company						 = LocalNationalCompany
				related.Customer					 = LocalNationalCustomer

		NationalAccountBalancePurgeRel	
			one-to-one relation to NationalAccountBalance
			Field Mapping uses symbolic key
				related.Company						 = LocalPurgeCompany
				related.Customer					 = LocalPurgeCustomer



		NationalAccountTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company		 = Company
				related.NationalAccount.Customer	 = Customer




		MyNationalAccountTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company	 = Company
				related.NationalAccount.Customer	 = Customer
			Instance Selection


				where	(related.Actor = actor)




		OrderEntryCustomerRel	
			one-to-one relation to OrderEntryCustomer
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer




		PayablesAccrualCodeDetailRel	
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			 = PayablesCompanyRel.VendorGroup
				related.PayablesAccrualCode	 = LocalAccrualCode
				related.Company				 = Company



		PayablesCompanyRel	
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company		 = Company



		DuplicateVoucherRel	
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set4
				related.Company			 = PayablesCompanyRel.Company
				related.VoucherNumber	 = LocalVoucherNumber

		PayablesInvoiceRel	
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set13
				related.Company				 = PayablesCompanyRel.Company
				related.Vendor				 = Customer.VendorGroupAndVendor.Vendor
			Instance Selection
				where (related.PayablesInvoice.Invoice		 = LocalInvoice)



		PayablesInvoiceHistoryRel	
			one-to-many relation to PayablesInvoiceHistory
			Field Mapping uses symbolic key
				related.Company				 = PayablesCompanyRel.Company
				related.Vendor				 = Customer.VendorGroupAndVendor.Vendor
			Instance Selection
				where (related.PayablesInvoiceHistory.Invoice	 = LocalInvoice)



		DefaultPayablesProcessLevelRel	
			one-to-many relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company				 = PayablesCompanyRel.Company
			Instance Selection
				where (related.DefaultProcessLevel	 = true)

		CompanyProcessLevelRel	
			one-to-many relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company				 = PayablesCompanyRel.Company



		ProjectRel	
			one-to-one relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = LocalFinanceEnterpriseGroup
				related.Project					 = LocalProject




		AgingPeriodForCompanyRel	
			one-to-many relation to ReceivableAgePeriod
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup
				and	related.ReceivableCompany	 = Company
				and	related.AgingCode			 = blank
				and	related.SetupIndicator		 = "R")
								
		AgingPeriodForAgingCodeRel	
			one-to-many relation to ReceivableAgePeriod
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CustomerGroup		 = blank
				and	related.ReceivableCompany	 = Company
				and	related.AgingCode			 = AgingCode
				and	related.SetupIndicator		 = "A")



		AgePeriodBalanceHeaderRel	
			one-to-one relation to ReceivableAgePeriodBalanceHeader
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.Customer			 = Customer



		CustomerAdjustmentsRel	
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableApplication.ReceivableInvoiceDetailRel.Customer	 = Customer)



		ReceivablesCompaniesRel	
			one-to-many relation to ReceivableCompany
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CustomerGroupField.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup)

		ReceivableCompanyWithICBDefaultRel	
			one-to-many relation to ReceivableCompany
			Field Mapping uses ByICBCustomerDefault
			Instance Selection
				where (related.CustomerGroupField.CustomerGroup		 = Company.CustomerGroupField.CustomerGroup
				and	   related.ICBillingDefaultCustomer				 = Customer)

		EFTGroupProcessingCompanyRel	
			one-to-many relation to ReceivableCompany
			Field Mapping uses Set2
				related.CustomerGroupField.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
			Instance Selection
				where (related.EFTDebitCashCode entered)

		ReceivableCompanyRel	
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company		= Company



		BalanceForwardCycleCodeRel	
			one-to-many relation to ReceivableCycle
			Field Mapping uses symbolic key
				related.Company							 = Company
			Instance Selection
				where (related.ReceivableCycleType		 = "B"
				and	  related.CycleRange.CycleRange1	 <= Customer.SearchName[1:1]
				and	  related.CycleRange.CycleRange2	 >= Customer.SearchName[1:1])

		ReceivableStatementCycleRel	
			one-to-one relation to ReceivableCycle
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivableCycleType				 = ReceivableProcessingMethod
				related.ReceivableCycle					 = ReceivableStatementCycle



		ReceivableElectronicFundsTransferAdjustmentRel	
			one-to-many relation to ReceivableElectronicFundsTransferAdjustment
			Field Mapping uses symbolic key
				related.Company												 = Company
			Instance Selection
				where (related.ReceivableInvoiceDetailRel.Customer			 = Customer)



		EFTNotificationRel	
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key

				related.CustomerGroup											= CustomerRel.CustomerGroup

				related.Company													= Company

				related.Customer												= Customer

		ReceivableElectronicFundsTransferNotifyRel	
			one-to-one relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup		 = Company.CustomerGroupField.CustomerGroup
				related.Company				 = Company
				related.Customer			 = Customer



		ReceivableFilterRel	
			one-to-one relation to ReceivableFilter
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	

				related.ReceivableFilter			= actor



		ReceivableHoldCodeRel	
			classic name is HOLDCODES
			one-to-one relation to ReceivableHoldCode
			valid when (IsHoldCode)
			required
			Field Mapping uses symbolic key
				related.CustomerGroup		 = Company.CustomerGroupField.CustomerGroup
				related.ReceivableHoldCode	 = ReceivableHoldCode



		LocalReceivableInvoiceRel	
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							 = LocalCompany
				related.ReceivableInvoiceType			 = LocalTransactionType
				related.ReceivableInvoice				 = LocalInvoice

		ReceivableInvoiceRel	
			classic name is AROIHDR
			one-to-many relation to ReceivableInvoice
			delete restricted
			Field Mapping uses Set4
				related.Company		 = Company
				related.Customer	 = Customer



		ClosedTransactionsNavRel	
			one-to-many relation to ReceivableInvoiceDetail
			delete restricted
			Field Mapping uses Set5	
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.IsNotOpen)

		MyOpenTransactionsForCustomerRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.Actor = actor)

		OpenCreditMemoRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)

		OpenEFTTransactionsRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company  = Company
				related.Customer = Customer
			Instance Selection
				where (related.AvailableForEFTAdjustments)

		OpenReceivableInvoiceDetailRel	
			classic name is AROITEMSOPEN
			one-to-many relation to ReceivableInvoiceDetail
			delete restricted
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company		 = Company
				related.Customer	 = Customer

		OpenReceivableInvoiceDetailsForInterfaceRel	
			one-to-many relation to ReceivableInvoiceDetail
			delete restricted
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company  = Company
				related.Customer = Customer
			Instance Selection
				where (related.IsSelectableForAPInterface
				and	related.OpenAmount > 0)

		OpenTransactionsForAPaymentCodeRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3 //Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company						 = Company
				related.Customer					 = Customer
			Instance Selection
				where (related.IsValidForPaymentCodeChangeNew
				and	related.BankTransactionCode		 = LocalOldBankTransactionCode)

		OpenTransactionsForCustomerRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//Set3 has an Instance Selection of (IsOpen), which is defined as "when (Status.OpenTransaction)"
				related.Company		 = Company
				related.Customer	 = Customer



		ReceivableInvoiceDetailRel	
			classic name is AROITEMS
			one-to-many relation to ReceivableInvoiceDetail
			delete restricted
			Field Mapping uses Set5	
				related.Company		 = Company
				related.Customer	 = Customer

		ReceivableInvoiceDetail2Rel	
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			delete restricted
			Field Mapping uses Set5	
				related.Company		 										= Company
				related.Customer	 										= Customer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= LocalTransactionType
				related.ReceivableInvoiceDetail.Invoice	 					= LocalARInvoice
				related.ReceivableInvoiceDetail.PaymentSeq					= LocalARInvoiceSeq



		ClosedDisputeRel	
			one-to-many relation to ReceivableInvoiceDispute
			delete restricted
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.IsClosedDispute)


		OpenDisputeRel	
			one-to-many relation to ReceivableInvoiceDispute
			delete restricted
			Field Mapping uses Set5	
				related.Company		 = Company
				related.Customer	 = Customer



		ReceivableInvoiceDisputeRel	
			classic name is ARDISPUTE
			one-to-many relation to ReceivableInvoiceDispute
			delete restricted
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer



		ReceivableInvoiceObligationGroupActorRel	
			one-to-many relation to ReceivableInvoiceObligationGroup
			Field Mapping uses Set1
				related.NationalAccount.Company		 = Company
				related.NationalAccount.Customer	 = Customer
			Instance Selection
				where (related.Actor				 = actor)

		ReceivableInvoiceObligationGroupRel	
			one-to-many relation to ReceivableInvoiceObligationGroup
			Field Mapping uses Set1
				related.NationalAccount.Company		 = Company
				related.NationalAccount.Customer	 = Customer



		KeyReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivableLockBox				= ReceivableLockBox

		ReceivableLockBoxRel	
			one-to-many relation to ReceivableLockBox
			Field Mapping uses ByCompanyProcessLevel
				related.Company			= Company



		LocalOperatorRel	
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableOperator		 = LocalOperator



		ClosedPaymentNavRel	
			one-to-many relation to ReceivablePayment
			delete restricted
			Field Mapping uses Set10
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.IsNotOpen)

		OpenOrUnreleasedReceivablePaymentsRel	
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set9		//Set9 has an Instance Selection of where (IsUnreleasedOrOpen) - IsUnreleasedOrOpen is defined as "when (Status.OpenTransaction)"
				related.Company		 = Company
				related.Customer	 = Customer

		OpenReceivablePaymentRel	
			classic name is ARPAYMENT
			one-to-many relation to ReceivablePayment
			delete restricted
			Field Mapping uses Set6
				related.Company		 = Company
				related.Customer	 = Customer

		ReceivablePaymentsForCustomerRel	
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company		 = Company
				related.Customer	 = Customer

		ReceivablePaymentRel	
			classic name is ARCUSTPAYMENT
			one-to-many relation to ReceivablePayment
			delete restricted
			Field Mapping uses Set10
				related.Company		 = Company
				related.Customer	 = Customer

		UnreleasedReceivablePaymentRel	
			classic name is ARCUSTPAYMENT
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set9					
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.Status.Unreleased)

		ReceivablePayment2Rel			
			classic name is ARCUSTPAYMENT
			one-to-many relation to ReceivablePayment
			delete restricted
			Field Mapping uses Set10
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.PaymentNumber	= LocalARInvoice)



		CustomerPendingAdjustmentsRel	
			one-to-many relation to ReceivablePendingAdjustment
			Field Mapping uses Set2
				related.User		 = actor
				related.Source		 = "R"
				related.Company		 = Company
				related.Customer	 = Customer




		MaxOverageReasonRel	
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					 =	Company
				related.ReceivableReasonType	 =	"AD"
				related.ReceivableReason		 =	MaximumOverageReasonCode

		ReceivableLocalAutoReasonCdRel	
			one-to-one relation to ReceivableReason
			valid when (IsAutoDeductReason)
			required
			Field Mapping uses symbolic key
				related.Company					 =	Company
				related.ReceivableReasonType	 =	"AD"
				related.ReceivableReason		 =	LocalAutoReasCd

		ReceivableReasonGroupingRel	
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					 = LocalCompany
				related.ReceivableReasonType	 = "AD"
				related.ReceivableReason		 = LocalReceivableReason

		ReceivableReasonRel	
			classic name is ARREASON	
			one-to-one relation to ReceivableReason
			valid when (IsAutoDeductReason)
			required
			Field Mapping uses symbolic key
				related.Company					 =	Company
				related.ReceivableReasonType	 =	"AD"
				related.ReceivableReason		 =	MaximumShortReasonCode.AutoReasCd

		ReceivableReason2Rel	
			one-to-many relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableReasonType	 = "AD"
				related.ReceivableReason		 = LocalReasonCode




		TaxEntityRel	
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity




		VendorRel	
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup		 = Customer.VendorGroupAndVendor.VendorGroup
				related.Vendor			 = Customer.VendorGroupAndVendor.Vendor




		AllVendorBalancesRel	
			one-to-many relation to VendorBalance
			Field Mapping uses Set1	
				related.VendorGroup	 = Customer.VendorGroupAndVendor.VendorGroup
				related.Company		 = Company
				related.Vendor		 = Customer.VendorGroupAndVendor.Vendor

		TotalVendorBalancesRel	
			one-to-many relation to VendorBalance
			Field Mapping uses symbolic key
				related.VendorGroup	 = Customer.VendorGroupAndVendor.VendorGroup
				related.Vendor		 = Customer.VendorGroupAndVendor.Vendor


		VendorBalanceRel	
			one-to-one relation to VendorBalance
			Field Mapping uses symbolic key
				related.VendorGroup		 = Customer.VendorGroupAndVendor.VendorGroup
				related.Vendor			 = Customer.VendorGroupAndVendor.Vendor
				related.VendorLocation	 = blank
				related.Company			 = Company



		VendorCompanyDefaultRel	
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup			= PayablesCompanyRel.VendorGroup
				related.Vendor				= Customer.VendorGroupAndVendor.Vendor
				related.VendorLocation		= blank
				related.Company				= PayablesCompanyRel.Company


		OrderEntryCustomerAttachmentRel is a OrderEntryCustomerAttachment set


		VertexTaxAreaIdResultsRel
			one-to-many relation to VertexTaxAreaIdResults
			Field Mapping uses ByRelatedObjectReference
				related.VertexConfig									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.RelatedObjectReference					= reference to this instance)

		SelectedTaxAreaIdRecordsRel
			one-to-many relation to VertexTaxAreaIdResults
			Field Mapping uses ByRelatedObjectReference
				related.VertexConfig									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.RelatedObjectReference							= reference to this instance
			Instance Selection
				where  (related.Selected								= true)

		SelectedPostalAddressRecordsRel
			one-to-many relation to VertexTaxAreaIdPostalAddress
			Field Mapping uses symbolic key
				related.VertexConfig										 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.VertexTaxAreaIdPostalAddress.LookupKey				 = LocalLookupKey
				related.VertexTaxAreaIdPostalAddress.ResponseBusclassKey	 = LocalResponseBusclassKey
				related.VertexTaxAreaIdPostalAddress.Sequence				 = LocalSequence
			Instance Selection
				where (related.Selected								= true)

		UpdatePostalAddressRecordsRel
			one-to-many relation to VertexTaxAreaIdPostalAddress
			Field Mapping uses symbolic key
				related.VertexConfig										 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.VertexTaxAreaIdPostalAddress.LookupKey				 = LocalLookupKey
				related.VertexTaxAreaIdPostalAddress.ResponseBusclassKey	 = LocalResponseBusclassKey
				related.VertexTaxAreaIdPostalAddress.Sequence				 = LocalSequence
			Instance Selection
				where  (related.TaxAreaId									= TaxCode)




		
		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_ARPaymentRequestNotice"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)

		CustomerDefaultBillToRel
			one-to-many relation to CustomerBillTo
			Field Mapping uses symbolic key
				related.CustomerGroup = CustomerGroup
				related.Customer	  = Customer
			Instance Selection
				where (related.DefaultBillTo)


		ReceivablePaymentNoticeDetailDetailFinanceRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "D" 
			Instance Selection
				where   (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and		 related.Company.FinanceChargeInterestRatesByDate.CalculateFinanceChargesByFixedInterestRateOverDateRange
				and	 ((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or   (LocalDateFilterIDM.PrintDate	  and related.UpdateDate = LocalPrintDateIDM)
					or   (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))


		ReceivablePaymentNoticeDetailRTMNoticeRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "R" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and	 ((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or   (LocalDateFilterIDM.PrintDate	  and related.UpdateDate = LocalPrintDateIDM)
					or   (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))


		ReceivablePaymentNoticeDetailChargebackRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "C" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and		((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or	 (LocalDateFilterIDM.PrintDate	and related.UpdateDate = LocalPrintDateIDM)
					or	 (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))


		ReceivablePaymentNoticeDetailMemoChargebackRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "M" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and	related.Company.PaymentOverApplication
				and		((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or	 (LocalDateFilterIDM.PrintDate	and related.UpdateDate = LocalPrintDateIDM)
					or	 (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))

		ReceivablePaymentNoticeDetailMemoCBHeaderRel is a CompanyCustomer set
			Instance Selection
				where (ReceivablePaymentNoticeDetailMemoCBSecondSeqRel exists)

		ReceivablePaymentNoticeDetailMemoCBSecondSeqRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "M" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 2
				and	related.Company.PaymentOverApplication
				and		((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or	 (LocalDateFilterIDM.PrintDate	and related.UpdateDate = LocalPrintDateIDM)
					or	 (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))


		ReceivablePaymentNoticeNetFinanceHeaderRel is a CompanyCustomer set
			Instance Selection
				where (ReceivablePaymentNoticeDetailNetFinanceRel exists)

		ReceivablePaymentNoticeDetailNetFinanceRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "N" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and		((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or	 (LocalDateFilterIDM.PrintDate	and related.UpdateDate = LocalPrintDateIDM)
					or	 (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))


		ReceivablePaymentNoticeDetailSecondDetailFinRel
			one-to-many relation to ReceivablePaymentNoticeDetail
			Field Mapping uses Set3
				related.Company										 = Company
				related.ReceivablePaymentNoticeDetail.Customer		 = Customer
				related.ReceivablePaymentNoticeDetail.NoticeType	 = "D" 
			Instance Selection
				where (related.ReceivablePaymentNoticeDetail.SeqNbr = 1
				and	related.Company.FinanceChargeInterestRatesByDate.YesCalculateFinanceChargesByInterestRatesByDate
				and		((LocalDateFilterIDM.DocumentDate and related.Date = LocalAsOfDateIDM)
					or	 (LocalDateFilterIDM.PrintDate	and related.UpdateDate = LocalPrintDateIDM)
					or	 (LocalDateFilterIDM.NotPrinted   and related.UpdateDate not entered)))




		ElectronicFundsTransferTransactionFinalNotifRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set2
				related.CustomerGroup	  = Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany = Company
				related.CrCustomer		  = Customer
			Instance Selection
				where ((LocalPaymentCode not entered or related.ReceivableInvoiceDetail.BankTransactionCode = LocalPaymentCode)
				and not related.ReceivableInvoiceDetail.IsPaid
				and not related.EftAction.Hold
				and related.ElectronicFundsTransferTransaction.EftType.FinalNote
				and related.EftNote.FinalNoteSent)

		ElectronicFundsTransferTransactionPreNotifRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set2
				related.CustomerGroup	  = Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany = Company
				related.CrCustomer		  = Customer
			Instance Selection
				where ((LocalPaymentCode not entered or related.ReceivableInvoiceDetail.BankTransactionCode = LocalPaymentCode)
				and not related.ReceivableInvoiceDetail.IsPaid
				and not related.EftAction.Hold
				and related.ElectronicFundsTransferTransaction.EftType.Prenote
				and related.EftNote.PrenoteSent)




		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "CustomerPartyMaster"
				related.FSMBODConfiguration.Direction 	= 1

		FSMBODGLCCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= DerivedCrossGLC )

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker				= LocalFSMInboundBODTracker



		FSMBODConfigurationPARel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 2
				related.FSMBODConfiguration.Noun 		= "PulseAlert"
				related.FSMBODConfiguration.Direction 	= 1

		FSMBODConfigurationDetailPARel
			one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 			= 2
				related.FSMBODConfiguration.Noun 			= "PulseAlert"
				related.FSMBODConfiguration.Direction 		= 1
			Instance Selection
				where (related.Alert						= "FSM_ION_CustomerAddCreditLimitChangeAlert"
				and	   related.Enable)


		FSMBODConfigRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "PayFromPartyMaster"
				related.FSMBODConfiguration.Direction 	= 1


		EFTCustomerGroupRel
			one-to-many relation to ElectronicFundsTransferCustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup = CustomerGroup
			Instance Selection
				where (related.ElectronicFundsTransferCustomerGroup.Company		= Company
				and related.ElectronicFundsTransferCustomerGroup.CreditCustomer = Customer)

		OpenElectronicFundsTransferTransactionsRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3
				related.Company			= Company
			Instance Selection

				where ((related.Customer = Customer
				or  related.Customer = any EFTCustomerGroupRel.ElectronicFundsTransferCustomerGroup.Customer)
				and related.AvailableForEFTAdjustments
				and	related.Company.CustomerGroupField.CustomerGroup	= CustomerGroup)

		ReceivableEFTAdjustmentsRel
			one-to-many relation to ReceivableElectronicFundsTransferAdjustment
			Field Mapping uses symbolic key
				related.Company	= Company
			Instance Selection
				where (related.ReceivableInvoiceDetailRel.Customer = Customer
				or	 related.ReceivableInvoiceDetailRel.Customer = any EFTCustomerGroupRel.ElectronicFundsTransferCustomerGroup.Customer)

		CompanyCustomerEFTDraftBanksRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4
				related.CustomerGroup							= Customer.CustomerGroup
				related.Company									= Company
				related.Customer 								= Customer

	Sets

		Set2
			indexed
			Sort Order
				Company
				SearchName
				Customer

		Set3
			indexed
			Sort Order
				Customer
				Company

		Set4
			indexed
			Instance Selection
				where (HasObjectID)
			Sort Order
				ObjectID

		Set7
			indexed
			Sort Order
				Company
				ReceivableStatementCycle
				Customer

		Set8
			indexed
			Sort Order
				Company
				CreditAnalyst
				Customer

		Set9
			indexed
			Instance Selection
				where (IsEDINumber)
			Sort Order
				Company
				EDINumber

		ByOriginatingInterfaceRun
			Sort Order
				OriginatingInterfaceRun
				Company
				Customer

		ByCustomerGroup
			indexed
			Sort Order
				CustomerGroup
				Customer
				Company

		IsHoldCodeSet	
			indexed
			Instance Selection
				where (IsHoldCode)
			Sort Order
				Company
				CreditAnalyst
				Customer


	Create Rules
		include CheckBillingInvoiceEmailContactsOnlyExists

		if (ReceivableProcessingMethod not entered)
			ReceivableProcessingMethod = ReceivableDefaultCode.ReceivableProcessingMethod

		if (AutomaticApplicationMethod not entered)
			AutomaticApplicationMethod = ReceivableDefaultCode.AutomaticApplicationMethod

		if (VATRegistrationCountry not entered)
			VATRegistrationCountry = Customer.VATRegistrationCountry

		if (VATRegistrationNumber not entered)
			VATRegistrationNumber = Customer.VATRegistrationNumber

		if (!BypassValidActorContext)
			constraint (IsValidForActorContextCreateRulesOnly)	
				"CannotCreate_Company_Customer.Company<Company>NotValidFor_Actor_Context.Actor<actor>DoesNotHave'Finance_Enterprise_Group'ContextFor_Finance_Enterprise_Group_<GeneralLedgerCompanyRel.FinanceEnterpriseGroup>"	

			constraint (Customer.IsValidForActorContextCreateRulesOnly)	
				"CannotCreate_Company_Customer.Customer<Customer>For_Customer_Group<CustomerGroup>NotValidFor_Actor_Context.Actor<actor>DoesNotHave'Finance_Enterprise_Group'ContextFor_Finance_Enterprise_Group_<Customer.CustomerBusinessGroupRel.FinanceEnterpriseGroup>"	


	Create Exit Rules
		if (LatePaymentAndFinanceCharges entered)
			if (!LatePaymentAndFinanceCharges.None)
				constraint (FinanceChargeCode entered)
					"FinanceChargeCodeIsRequired"
				constraint (FinanceChargeCycle entered)
					"FinanceChargeCycleIsRequired"


	Field Rules



		ReceivableDefaultCode
			required

		CreditAnalyst
			required

		StartDate
			default to current corporate date
			required

		SalesRepresentative
			required

		ActiveStatus
			default to ActiveStatus.Active






		ReceivableHoldCode
			constraint (ReceivableHoldCode.CustomerApplicable)
				"HoldCodeMustBeCustomerApplicable"	


		RevalueCurrencyTransactions
			if (!Company.MultiCurrencyProcessing)
				constraint (!RevalueCurrencyTransactions)
					"CannotRevalueCurrencyAmounts;CompanyDoesNotAllowMultiCurrencyProcessing"	

		Currency
			default to Company.Currency


		EDINumber
			if (EDINumber entered)
				if (EDINumber changed)
					constraint (!CompanyEDINumberRel exists)
						"EDINumberIsAlreadyInUseForThisCompany"

		CustomerMajorClass
			default to ReceivableDefaultCode.CustomerMajorClass

		CustomerMinorClass
			default to ReceivableDefaultCode.CustomerMinorClass

		OrderLimit
			include	ValidateOEFields

		NationalAccountIndicator
			if (NationalAccountParentRel exists)
				NationalAccountIndicator = "I"
			else
				if (NationalAccountCustomerRel exists)
					NationalAccountIndicator = "N"
				else
					NationalAccountIndicator = blank

		CreditLimit
			if (CreditLimit changed)
				trigger "CustomerAddCreditLimitChangeService" PA service
					resume on error
					title is "CO:<Company>Customer:<Customer>"
					Criteria
						Company
					Variables
						Company
							variable name is Company
						Customer
							variable name is Customer
						Customer.Name
							variable name is CustomerName
						old CreditLimit
							variable name is PriorCreditLimit
						CreditLimit
							variable name is CreditLimit

				invoke CustomerAddCreditLimitChangeAlert

			constraint (OrderLimit <= CreditLimit)
				"OrderLimitCannotExceedCreditLimit"	


		CreditLimitDate
			default to StartDate




		AffiliateOwnership
			if (Company.ClaimsAndLiabilitiesReporting
			and Company.AccountingEntity.AddressCode.PostalAddress.Country != Customer.PostalAddress.Country)
				if (Affiliate)
					required

			if (not Affiliate)
				initialize








		Territory
			default to SalesRepresentative.Territory














		SearchName
			default to Customer.SearchName
			required

		TermsCode
			required

			if (IsIntercompanyBillingDefaultCustomer)
				constraint (TermsCode.IsNetTermsWithNoDiscounts)
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Payment_TermsMustBeNetTermsWithNoDiscounts"

		DebitCreditMemoTermsCode
			default to ReceivableDefaultCode.DebitCreditMemoTermsCode
			required

		AgeDisputesRule
			default to ReceivableDefaultCode.AgeDisputesRule

		BankTransactionCode   
			default to ReceivableDefaultCode.BankTransactionCode
			required
			if (Customer.CustomerGroup.BillOfExchangeProcessing)
				constraint (!BankTransactionCodeRel.BankTransactionType.BankService)
					"BankTransactionCodeMustHaveABankServiceTransactionType"	
			else
				constraint (BankTransactionCodeRel.BankTransactionType.CashPayment)
					"BankInstitutionCodeMustHaveACashPaymentTransactionType"	

			if (IsIntercompanyBillingDefaultCustomer)
				constraint (BankTransactionCode.BankTransactionType.CashPayment)
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Payment_CodeMustBeSetToACashPaymentTypeAndTransactionOriginOfPayable"
				constraint (BankTransactionCode.TransactionOrigin.Payable)
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Payment_CodeMustBeSetToACashPaymentTypeAndTransactionOriginOfPayable"

		TaxCode

			if  (action type.Create
			and  TaxCode not entered
			and  TaxExempt not entered)
				TaxCode = ReceivableDefaultCode.TaxCode
				TaxExempt = ReceivableDefaultCode.TaxExempt

			if  (TaxEntityRel.ThirdParty.VertexOSeries
			and  !TaxExempt
			and  TaxCode not entered)
				TaxCode	= CustomerRel.DerivedTaxCode

			if  (TaxCode entered)
				constraint (!TaxExempt)
					"CustomerCannotPreventTaxCodeDefaultingWhenTaxCodeIsEntered"

			if (!TaxExempt)
				required
					"PreventTaxCodeDefaultingIsNotSelected;TaxCodeIsRequired"

			if  (TaxCode not entered)
				TaxExempt					= true

			if (TaxCode entered)








				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
					if (ReceivableCompanyWithICBDefaultRel exists)
						constraint (!IsICBillingDefaultCustomer)
							"CustomerIsSetupAsTheDefaultCustomerForIntercompanyBillingForCompany<first ReceivableCompanyWithICBDefaultRel.Company>;TaxEntity/TaxCodeCannotBeSetupAsAnAccruedTypeForIntercompanyBilling."












		VATRegistrationNumber	
			if (VATRegistrationNumber changed)	
				include InitializeValidationFields

		DetailChargebackDate
			default to DetailChargebackDate.Invoice

		PercentOfBalanceToCreditLimit
			default to ReceivableDefaultCode.PercentOfBalanceToCreditLimit








		AutomaticDunning
			initial value is ReceivableDefaultCode.AutomaticDunning
			if (action type.Create)
				if (AutomaticDunning not entered)
					AutomaticDunning = ReceivableDefaultCode.AutomaticDunning
				if (DunningCycle not entered)
					DunningCycle = ReceivableDefaultCode.DunningCycle

			if  (AutomaticDunning)
				constraint (DunningCycle entered)
					"DunningCycleIsRequiredForAutomaticDunning"
				constraint (DunningCycle.ReceivableCycleType = "D")
					"DunningCycle<DunningCycle>IsNotADunningTypeCode"
			else
				constraint (DunningCycle not entered)
					"WhenDunningCycleIsEnteredAutomaticDunningMustBeSelected"

		DunningCycle
			initial value is ReceivableDefaultCode.DunningCycle

			if  (AutomaticDunning)
				constraint (DunningCycle entered)
					"DunningCycleIsRequiredForAutomaticDunning"
				constraint (DunningCycle.ReceivableCycleType = "D")
					"DunningCycle<DunningCycle>IsNotADunningTypeCode"
			else
				constraint (DunningCycle not entered)
					"WhenDunningCycleIsEnteredAutomaticDunningMustBeSelected"

		BillOfExchangeProcessing
			initial value is ReceivableDefaultCode.BillOfExchangeProcessing
			if (action type.Create)
				default to ReceivableDefaultCode.BillOfExchangeProcessing




		DiscountAdjustmentReason
			constraint (DiscountAdjustmentReason != "CURR")
				"CURRIsAReservedReasonCode"
			constraint (DiscountAdjustmentReason.ReceivableReason.ReceivableAdjustmentReasonType.Discount)
				"ADiscountTypeReasonCodeIsRequired"

		AutomaticCashApplication		
			initial value is ReceivableDefaultCode.AutomaticCashApplication
			constraint (AutomaticApplicationMethod entered)				
				"AutomaticApplicationMethodIsRequired"

			if (IsIntercompanyBillingDefaultCustomer)
				required
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Automatic_Cash_ApplicationMustBeSet"


		AutomaticApplicationMethod		
			initial value is ReceivableDefaultCode.AutomaticApplicationMethod 
			constraint (AutomaticCashApplication)
				"AutomaticApplicationMethodCannotBeSelected;AutomaticCashApplicationHasNotBeenSelected"

			if (AutomaticApplicationMethod.BalanceForward)
				constraint (!ReceivableProcessingMethod.None)
					"ReceivableProcessingMethodIsRequired"

			if (IsIntercompanyBillingDefaultCustomer)
				constraint (AutomaticApplicationMethod.Remittance)
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Application_MethodMustBeSetTo_Remittance"


		ApplicationCode
			if  (AutomaticApplicationMethod.UserDefined)
				default to ReceivableDefaultCode.ApplicationCode
				required
					"ApplicationCodeRequiredIfCashApplicationMethodIsUserDefined"
			else
				cannot be entered
					"ApplicationCodeAllowedOnlyIfCashApplicationMethodIsUserDefined"

		ReceivableProcessingMethod	
			default to ReceivableDefaultCode.ReceivableProcessingMethod

			if (ReceivableProcessingMethod.BalanceForward)
				constraint (AutomaticApplicationMethod.BalanceForward)
					"AutomaticApplicationMethodMustBeSetToBalanceForward"
				constraint (AutomaticCashApplication)
					"AutomaticCashApplicationMustBeSelected"							
				constraint (FinanceChargeCalculationMethod.NetBalanceCalculation)
					"CalculationMethodMustBeSetToNetForBalanceForwardProcessingMethod"	
				constraint (!MaximumAutoAdjustAmount.MaxAutoAmt entered)
					"CannotEnterMaxAutoAmountWhenUsingBalanceForwardProcessingMethod"	
				constraint (!MaxAutoPcts.MaxAutoPct entered)
					"CannotEnterMaxAutoPercentWhenUsingBalanceForwardProcessingMethod"	
				constraint (!MaximumShortReasonCode.AutoReasCd entered)
					"CannotEnterAutoReasonCodeWhenUsingBalanceForwardProcessingMethod"	

				if (PastDueOnlyStatement)
					constraint(!OverCreditLimitStatement) 
						"WhenThePastDueOnlyStatementOptionIsSelectedTheOverCreditLimitStatementCannotBeSelected"		

			if (ReceivableProcessingMethod.OpenItem
			and !old ReceivableProcessingMethod.OpenItem
			and !LastStatementDate entered)
				LocalBalanceForwardIndicator = true


			if (IsIntercompanyBillingDefaultCustomer)
				constraint (ReceivableProcessingMethod.OpenItem)
					"CustomerIsTheDefaultCustomerForIntercompanyBillingForThisCompany;_Application_MethodMustBeSetTo_Open_Item"




		MaximumOverageAmount
			constraint (!MaximumOveragePercent entered)
				"CannotEnterBothAmountAndPercent"
			constraint (MaximumOverageReasonCode entered)
				"AmountOrPercentRequiresReasonToBeEntered"

		MaximumOveragePercent
			constraint (!MaximumOverageAmount entered)
				"CannotEnterBothAmountAndPercent"
			constraint (MaximumOverageReasonCode entered)
				"AmountOrPercentRequiresReasonToBeEntered"

		MaximumOverageReasonCode
			constraint (MaximumOverageReasonCode != "CURR")
				"CURRIsAReservedReasonCode"
			constraint (MaxOverageReasonRel exists)
				"ReasonCodeDoesNotExist"	
			constraint (MaxOverageReasonRel.ReceivableAdjustmentReasonType.OverShort)
				"ReasonCodeWithAReceivableAdjustmentReasonTypeOfOverShortIsRequired"	

		MaximumShortReasonCode	
			constraint (MaximumShortReasonCode != "CURR")
				"CURRIsAReservedReasonCode"
			constraint (ReceivableReasonRel exists)
				"ReasonCodeDoesNotExist"
			constraint (ReceivableReasonRel.ReceivableAdjustmentReasonType.OverShort
			or ReceivableReasonRel.ReceivableAdjustmentReasonType.Chargeback)
				"ReasonCodeWithAReceivableAdjustmentReasonTypeOfOverShortOrChargebackIsRequired"
			constraint (!ReceivableReasonRel.ChargebackType.Memo)
				"ChargebackTypeCannotBeMemo"

		ApplyMixedSignedLineItemsAutomatically
			if (action type.Create)  
				default to ReceivableDefaultCode.ApplyMixedSignedLineItemsAutomatically  
	

		ThirdPartyPayer
			constraint (Company.ThirdPartyPayer)
				"CannotSetCustomerToThirdPartyPayer;ReceivableCompanyNotSetToThirdPartyPayer"	






		BalanceForwardStatementCycle
			if (StatementRequired
			and ReceivableProcessingMethod.BalanceForward)
				default to first BalanceForwardCycleCodeRel.ReceivableCycle

			if (BalanceForwardStatementCycle entered)
				constraint (StatementRequired)
					"AStatementCycleCodeHasBeenEntered:MustRequireStatements"
				constraint (ReceivableProcessingMethod.BalanceForward)
					"InvalidStatementCycleForReceivableProcessingMethod;CannotBeBalanceForwardStatementCycle"
				constraint (OpenItemStatementCycle not entered)
					"CannotEnterBothOpenItemAndBalanceForwardCycleCode"

			if (BalanceForwardStatementCycle not entered
			and StatementRequired)
				constraint (OpenItemStatementCycle entered)
					"StatementRequired;MustEnterAStatementCycleCode"


		StatementRequired
			initial value is ReceivableDefaultCode.StatementRequired
			if (action type.Create)
				default to ReceivableDefaultCode.StatementRequired

			if	(StatementRequired
			and  ReceivableProcessingMethod.BalanceForward)
				constraint (CreditBalanceStatement)
					"CreditBalanceMustBeCheckedForApplicationMethodBalanceForward"

			if	(StatementRequired
			and  ReceivableProcessingMethod.BalanceForward)
				constraint (ZeroBalanceStatement)
					"ZeroBalanceMustBeCheckedForApplicationMethodBalanceForward"


		ZeroBalanceStatement
			initial value is ReceivableDefaultCode.ZeroBalanceStatement
			if (action type.Create)
				default to ReceivableDefaultCode.ZeroBalanceStatement


		OpenItemStatementCycle
			initial value is ReceivableDefaultCode.OpenItemStatementCycle
			if (action type.Create)
				default to ReceivableDefaultCode.OpenItemStatementCycle

			if (OpenItemStatementCycle entered)
				constraint (StatementRequired)
					"AStatementCycleCodeHasBeenEntered:MustRequireStatements"
				constraint (ReceivableProcessingMethod.OpenItem)
					"InvalidStatementCycleForReceivableProcessingMethod;CannotBeOpenItemTypeCycle" 
				constraint (BalanceForwardStatementCycle not entered)
					"CannotEnterBothOpenItemAndBalanceForwardCycleCode"


			if (OpenItemStatementCycle not entered
			and StatementRequired)
				constraint (BalanceForwardStatementCycle entered)
					"StatementRequired;MustEnterAStatementCycleCode"


		CreditBalanceStatement
			initial value is ReceivableDefaultCode.CreditBalanceStatement
			if (action type.Create)
				default to ReceivableDefaultCode.CreditBalanceStatement
			default to CreditBalanceStatement

		PastDueOnlyStatement
			initial value is ReceivableDefaultCode.PastDueOnlyStatement
			if (action type.Create)
				default to ReceivableDefaultCode.PastDueOnlyStatement
			constraint (!ZeroBalanceStatement)
				"ZeroBalanceCannotBeSelectedWhenUsingPastDueOnlyStatement" 
			constraint (!OverCreditLimitStatement)
				"OverCreditLimitCannotBeSelectedWhenUsingPastDueOnlyStatement"  
			constraint (!CreditBalanceStatement)
				"CreditBalanceStatementCannotBeSelectedwhenUsingPastDueOnlyStatement" 

		OverCreditLimitStatement
			initial value is ReceivableDefaultCode.OverCreditLimitStatement
			if (action type.Create)
				default to ReceivableDefaultCode.OverCreditLimitStatement
			constraint (!ZeroBalanceStatement)
				"ZeroBalanceCannotBeSelectedWhenUsingOverCreditLimitStatement" 
			constraint (!CreditBalanceStatement)
				"CreditBalanceStatementCannotBeSelectedwhenUsingOverCreditLimitStatement" 







		FinanceChargeCalculationMethod
			initial value is ReceivableDefaultCode.FinanceChargeCalculationMethod
			if (action type.Create)
				default to ReceivableDefaultCode.FinanceChargeCalculationMethod
			if (FinanceChargeCalculationMethod.NetBalanceCalculation)
				constraint (LatePaymentAndFinanceCharges.None
				or LatePaymentAndFinanceCharges.FinanceCharges)
					"CannotIncludeLatePaymentAdditionalChargesForCalculationMethodNetBalance"
			else
				constraint (!ReceivableProcessingMethod.BalanceForward)
					"CalculationMethodMustBeByTransactionForBalanceForwardProcessingMethod"

		InvoiceMinimumFinanceCharge	 
			initial value is ReceivableDefaultCode.InvoiceMinimumFinanceCharge
			if (action type.Create)
				default to ReceivableDefaultCode.InvoiceMinimumFinanceCharge
			constraint (Company.FinanceChargeInterestRatesByDate = "Y")
				"CannotEnterMinimumCharge;ReceivableCompanyFinanceChargeInterestRatesByDateHasNotBeenSelected"

			constraint (!LatePaymentAndFinanceCharges.None)
				"CannotEnterInvoiceMinimum;LatePaymentAndFinanceChargesHaveNotBeenSelected"

		FinanceChargeCode				
			initial value is ReceivableDefaultCode.FinanceChargeCode
			if (action type.Create
			and !LatePaymentAndFinanceCharges.None)
				default to ReceivableDefaultCode.FinanceChargeCode
			constraint (!LatePaymentAndFinanceCharges.None)	
				"CannotEnterFinanceChargeCode;LatePaymentAndFinanceChargesHaveNotBeenSelected"
			if (LatePaymentAndFinanceCharges.None)
				cannot be entered
			if (FinanceChargeCycle entered)
				required
					"FinanceChargeCodeIsRequiredIfFinanceChargeCycleEntered"				

		FinanceChargeCycle			
			initial value is ReceivableDefaultCode.FinanceChargeCycle
			if (action type.Create
			and !LatePaymentAndFinanceCharges.None)
				default to ReceivableDefaultCode.FinanceChargeCycle
			constraint (!LatePaymentAndFinanceCharges.None)	
				"CannotEnterFinanceChargeCycle;LatePaymentAndFinanceChargesHaveNotBeenSelected"
			if (LatePaymentAndFinanceCharges.None)
				cannot be entered
			if (FinanceChargeCode entered)
				required
					"FinanceChargeCycleIsRequiredIfFinanceChargeCodeEntered"				

		ChargeMinimumFinanceCharge		
			initial value is ReceivableDefaultCode.ChargeMinimumFinanceCharge
			if (action type.Create)
				default to ReceivableDefaultCode.ChargeMinimumFinanceCharge
			if (ChargeMinimumFinanceCharge)
				constraint (MinimumFinanceChargeAmount != 0)
					"PleaseProvideCustomerMinimumAmount"				

		MinimumFinanceChargeAmount	
			initial value is ReceivableDefaultCode.MinimumFinanceChargeAmount
			if (action type.Create)
				default to ReceivableDefaultCode.MinimumFinanceChargeAmount
			if (MinimumFinanceChargeAmount entered)
				constraint (!LatePaymentAndFinanceCharges.None)	 
					"CannotEnterMinimumCharge;LatePaymentAndFinanceChargesHaveNotBeenSelected"

		PrintFinanceChargeDocument		
			initial value is ReceivableDefaultCode.PrintFinanceChargeDocument
			if (action type.Create)
				default to ReceivableDefaultCode.PrintFinanceChargeDocument
			constraint (!LatePaymentAndFinanceCharges.None)	  
				"CannotPrintFinanceChargeDocument;LatePaymentAndFinanceChargesHaveNotBeenSelected"

		LatePaymentAndFinanceCharges
			initial value is ReceivableDefaultCode.LatePaymentAndFinanceCharges
			if (action type.Create)
				default to ReceivableDefaultCode.LatePaymentAndFinanceCharges
			else
				if (!LatePaymentAndFinanceCharges.None)
					constraint (FinanceChargeCode entered)
						"FinanceChargeCodeIsRequired"
					constraint (FinanceChargeCycle entered)
						"FinanceChargeCycleIsRequired"

		FinanceChargeDueDateGraceDays
			initial value is ReceivableDefaultCode.FinanceChargeDueDateGraceDays
			if (action type.Create)
				default to ReceivableDefaultCode.FinanceChargeDueDateGraceDays







		DunningLetterIndicator
			initial value is ReceivableDefaultCode.DunningLetterIndicator
			if (action type.Create)
				if  (DunningLetterIndicator not entered)
					DunningLetterIndicator = ReceivableDefaultCode.DunningLetterIndicator
				if  (DunningProcessCode not entered)
					DunningProcessCode = ReceivableDefaultCode.DunningProcessCode

			if (DunningLetterIndicator)
				constraint (DunningProcessCode entered)
					"DunningLettersSelected;DunningProcessCodeIsRequired" 
			else
				constraint (DunningProcessCode not entered)
					"DunningLetterIndicatorNotSelected;DunningProcessCodeCannotBeSelected"

		DunningProcessCode
			initial value is ReceivableDefaultCode.DunningProcessCode

			if (old DunningProcessCode entered
			and DunningProcessCode changed)
				initialize LastDunningLetter
				initialize LastDunningLetterTextCode

			if (DunningLetterIndicator)
				constraint (DunningProcessCode entered)
					"DunningLettersSelected;DunningProcessCodeIsRequired" 
			else
				constraint (DunningProcessCode not entered)
					"DunningLetterIndicatorNotSelected;DunningProcessCodeCannotBeSelected"

		LanguageCode
			initial value is ReceivableDefaultCode.LanguageCode
			if (action type.Create)
				default to ReceivableDefaultCode.LanguageCode




		AssessDunningFee
			initial value is ReceivableDefaultCode.AssessDunningFee
			if (action type.Create)
				default to ReceivableDefaultCode.AssessDunningFee
			constraint (DunningLetterIndicator entered)
				"DunningLetterIndicatorNotSelected;AssessDunningFeeCannotBeSelected" 

		MultipleDunningLetters
			initial value is ReceivableDefaultCode.MultipleDunningLetters
			if (action type.Create)
				default to ReceivableDefaultCode.MultipleDunningLetters
			constraint (DunningLetterIndicator entered)
				"DunningLetterIndicatorNotSelected;MultipleDunningLettersCannotBeSelected" 




		OECustomerVendor
			constraint (!DefaultShippingLocation entered)
				"CannotEnterBothVendorAndDefaultShippingLocation"	


		PurchFrLoc
			constraint (!DefaultShippingLocation entered)
				"CannotEnterBothDefaultShippingLocationAndPurchaseFromLocation" 
			constraint (!OECustomerVendor entered)
				"CannotEnterBothCustomerVendorAndPurchaseFromLocation"		




		CustomerOrNationalAccountLevel
			required
			default to CustomerOrNationalAccountLevel.CustomerLevel
		DisplayDate
			required
			default to DisplayDate.DueDate
		SortDate
			required
			default to SortDate.AscendingDueDate
		CurrencyDisplay
			required
			default to CurrencyDisplay.BaseAmounts
		History
			required
			default to History.NoHistorical
		CustomerGroup
			default to Company.CustomerGroupField.CustomerGroup



		VATRegistrationCountry
			if (VATRegistrationCountry changed)	
				include InitializeValidationFields









		TransientBillingCustomerCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to CompanyCustomer.OrderEntryCustomer.BillingCustomerCode
				default to ReceivableDefaultCode.BillingCustomerCode
				required
					"Billing_\Customer_\CodeIsRequired"

		TransientPriceList
			include	ValidateOEFields
			if (HasBillingCompany)
				default to CompanyCustomer.OrderEntryCustomer.PriceList
				default to ReceivableDefaultCode.PriceList
				required
					"Price_\ListIsRequired"

		TransientTerritory
			include ValidateOEFields
			if (HasBillingCompany)
				default to CompanyCustomer.OrderEntryCustomer.Territory
				default to ReceivableDefaultCode.Territory
				default to Territory
				required
					"TerritoryIsRequired"

		TransientCarrier
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.Carrier

		TransientBillingFreightCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.BillingFreightCode

		TransientBrokenCaseCharge
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.BrokenCaseCharge

		TransientSalesman2
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.SalesRepresentative2

		TransientCommissionSplitPercentage
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.CommissionSplitPercentage

		TransientBillingLineItemRequired


			initial value is ReceivableDefaultCode.BillingLineItemRequired

		TransientDefaultCustomerShipTo
			include	ValidateOEFields

		TransientDefaultShippingLocation
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.DefaultShippingLocation

		TransientDefaultShippingMethod
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.DefaultShippingMethod

		TransientProofOfDeliveryRequired
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.ProofOfDeliveryRequired

		TransientProofOfDeliveryGracePeriod
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.ProofOfDeliveryGracePeriod

		TransientCashInAdvanceRequired
			include	ValidateOEFields
			initial value is ReceivableDefaultCode.CashInAdvanceRequired
			if (HasBillingCompany)
				if (TransientProformaCashInAdvanceRequired)
					cannot be entered
						"CannotEnterBothCashInAdvanceAndProformaCashInAdvance"

		TransientCashInAdvanceRequiredPercent
			include	ValidateOEFields
			initial value is ReceivableDefaultCode.CashInAdvanceRequiredPercent
			if (HasBillingCompany)
				if (TransientCashInAdvanceRequired)
					required
					constraint (TransientCashInAdvanceRequiredPercent <= 100 and   TransientCashInAdvanceRequiredPercent > 0)
						"CashInAdvancePercentCannotBeLessThanZeroOrGreaterThan100"

		TransientProformaCashInAdvanceRequired
			include	ValidateOEFields
			initial value is ReceivableDefaultCode.ProformaCashInAdvanceRequired
			if (HasBillingCompany)
				if (TransientCashInAdvanceRequired)
					cannot be entered
						"CannotEnterBothCashInAdvanceAndProformaCashInAdvance"

		TransientProformaCashInAdvanceRequiredPercent
			include	ValidateOEFields
			initial value is ReceivableDefaultCode.ProformaCashInAdvanceRequiredPercent
			if (HasBillingCompany)
				if (TransientProformaCashInAdvanceRequired)
					required
					constraint (TransientProformaCashInAdvanceRequiredPercent <= 100 and   TransientProformaCashInAdvanceRequiredPercent > 0)
						"ProformaCashInAdvancePercentCannotBeLessThanZeroOrGreaterThan100"

		TransientPickingPriority
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.PickingPriority

		TransientTotalCODOrderLimit
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.TotalCODOrderLimit

		TransientOrderDiscountCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.OrderDiscountCode

		TransientCreditLimitHoldCode
			include	ValidateOEFields
			if (HasBillingCompany
			and CreditLimit entered)
				default to ReceivableDefaultCode.CreditLimitHoldCode
				required
					"MustEnterHoldCode,CreditLimitIsEntered"

		TransientOrderLimitHoldCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.OrderLimitHoldCode

		TransientSingleOrderHoldCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.SingleOrderHoldCode

		TransientCashOnDeliveryOrderHoldCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.CashOnDeliveryOrderHoldCode

		TransientVendor
			include	ValidateOEFields


		TransientPurchFrLoc
			include	ValidateOEFields


		TransientShipTerm
			include	ValidateOEFields


		TransientPortCode
			include	ValidateOEFields


		TransientCheckCreditOnOrderAdd
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.CheckCreditOnOrderAdd

		TransientSingleOrderLimit
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.SingleOrderLimit

		TransientCheckCreditBeforePickingList
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.CheckCreditBeforePickingList

		TransientAllowReturns
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.AllowReturns

		TransientLastReturnAuthorizationDate
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.LastReturnAuthorizationDate

		TransientCustomeOrderAcknowledgments
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.CustomeOrderAcknowledgments

		TransientShipCompleteFlag
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.ShipCompleteFlag

		TransientPORequiredForCustomerOrder
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.PORequiredForCustomerOrder

		TransientBackorderAllowed
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.BackorderAllowed

		TransientAgeCredPcts
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.AgeCredPcts

		TransientOrderAgingPriodLimitHoldCode
			include	ValidateOEFields
			if (HasBillingCompany)
				default to ReceivableDefaultCode.OrderAgingPriodLimitHoldCode

		ApplicationDiscountGraceDays
			default to ReceivableDefaultCode.ApplicationDiscountGraceDays

		EmailAddress
			if (EmailReceivablesStatement
			or  EmailBasicDunningLetter
			or  EmailAdvancedDunningLetter
			or  EmailPaymentRequestNotice
			or  EmailBillingInvoice
			or  EmailEFTNotificationPrint
			or  EmailReceivableInvoice
			or	EmailSubleaseBillingInvoice
			or  EmailPaymentReceipt
			or  EmailPrepaymentReceipt)
				required

		ReceivablesStatementFromAndReplyToEmail
			if (EmailReceivablesStatement)
				default to config.DefaultFromEmailAddress
			else
				initialize

		BasicDunningLetterFromAndReplyToEmail
			if (EmailBasicDunningLetter)
				default to config.DefaultFromEmailAddress
			else
				initialize

		AdvancedDunningLetterFromAndReplyToEmail
			if (EmailAdvancedDunningLetter)
				default to config.DefaultFromEmailAddress
			else
				initialize

		PaymentRequestNoticeFromAndReplyToEmail
			if (EmailPaymentRequestNotice)
				default to config.DefaultFromEmailAddress
			else
				initialize

		BillingInvoiceFromAndReplyToEmail
			if (EmailBillingInvoice)
				default to config.DefaultFromEmailAddress
			else
				initialize

		EFTNotificationPrintFromAndReplyToEmail
			if (EmailEFTNotificationPrint)
				default to config.DefaultFromEmailAddress
			else
				initialize

		ReceivableInvoiceFromAndReplyToEmail
			if (EmailReceivableInvoice)
				default to config.DefaultFromEmailAddress
			else
				initialize

		SubleaseBillingInvoiceFromAndReplyToEmail
			if (EmailSubleaseBillingInvoice)
				default to config.DefaultFromEmailAddress
			else
				initialize

		PaymentReceiptFromAndReplyToEmail
			if (EmailPaymentReceipt)
				default to config.DefaultFromEmailAddress
			else
				initialize

		PrepaymentReceiptFromAndReplyToEmail
			if (EmailPrepaymentReceipt)
				default to config.DefaultFromEmailAddress
			else
				initialize

	Action Exit Rules
		if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and (!LocalBODTrigger))
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					ActionCode = ActionCode.Update
					if (action type.Create or bod id.VariationID < 1)
						ActionCode = ActionCode.Create
					include TriggerCompanyCustomerServiceRules


					increment bod id.VariationID
					LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
					include TriggerPayFromPartyMasterRules

					LocalBODTrigger = true

	Actions
		UpdateTextSearch		is a Set Action	
			restricted
			Parameters
				PrmCompany	is a ReceivableCompany
				PrmCustomerGroup	is like CustomerGroup
				PrmCustomer	is like Customer
			Instance Selection
				where ((PrmCompany entered
				and Company = PrmCompany)
				or  (PrmCustomer entered
				and PrmCustomerGroup = CustomerGroup
				and PrmCustomer = Customer))
			Action Rules
				Instance Rules
					include BuildTextIndexes

		CompanyCustomerBuildTextIndex is a Set Action	
			restricted
			valid when (!CompanyCustomerBuildIndexTextConfigurationParameterRelExists)
			Local Fields
				LocalActor					is Actor
			Instance Selection
				where (CompanyCustomerSearchDocument not entered)

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoRecordsFoundToUpdateTextSearchOnCompanyCustomers"
						priority is medium
						detail is "NoEligibleCompanyCustomerRecordsFound;AllTheCompanyCustomerRecordsAreUpdated"
				Set Rules
					Exit Rules
						display "ExitRulesTime:::<current timestamp>"
						if (!CompanyCustomerBuildIndexTextConfigurationParameterRelExists)
							invoke Create ConfigurationParameter
								invoked.ConfigurationParameter.ConfigurationID	= "config"
								invoked.ConfigurationParameter.Name				= "CompanyCustomerBuildTextIndexes"
								invoked.Type									= 8222	
								invoked.Length									= 300
						LocalActor = actor
						send notification
							to LocalActor
							description is "CompanyCustomerBuildTextIndexActionHasCompleted"
							priority is medium
							detail is "CompanyCustomerBuildTextIndexActionHasCompletedSuccessfully;CompanyCustomerTextSearchDocumentFieldUpdatedInCompanyCustomers"

				Instance Rules
					include BuildTextIndexes



		Create	is a Create Action


			Field Rules















				StatementRequired
					default to ReceivableDefaultCode.StatementRequired



				ReceivableHoldCode
					default to Customer.ReceivableHoldCode

				RiskIndicator
					default to Company.CustomerRiskCode

				Currency
					default to Company.Currency
					if (Customer.CustomerGroup.Currency = Company.Currency)
						if (CreditLimit = 0)
							CreditLimit	= Customer.CreditLimit
						if (OrderLimit = 0)
							OrderLimit = Customer.OrderLimit






				Contact
					default to Customer.Contact

				PhoneNumber
					default to Customer.PhoneNumber

				EmailAddress
					default to Customer.EmailAddress

				URLAddress
					default to Customer.URLAddress

				CreditAnalyst
					default to ReceivableDefaultCode.CreditAnalyst

				StartDate
					default to current corporate date

				SalesRepresentative
					default to ReceivableDefaultCode.SalesRepresentative

				BankTransactionCode
					default to ReceivableDefaultCode.BankTransactionCode

				TermsCode
					default to ReceivableDefaultCode.TermsCode






				AutomaticCashApplication
					default to ReceivableDefaultCode.AutomaticCashApplication 

				AutomaticApplicationMethod
					default to ReceivableDefaultCode.AutomaticApplicationMethod

				ApplicationCode
					default to ReceivableDefaultCode.ApplicationCode
					if  (AutomaticApplicationMethod.UserDefined)
						required
							"ApplicationCodeRequiredIfCashApplicationMethodIsUserDefined"

				AgingCode
					default to ReceivableDefaultCode.AgingCode

				ReceivableLockBox
					default to ReceivableDefaultCode.ReceivableLockBox

				LanguageCode
					default to ReceivableDefaultCode.LanguageCode

				DunningLetterIndicator
					default to ReceivableDefaultCode.DunningLetterIndicator

				DunningProcessCode
					default to ReceivableDefaultCode.DunningProcessCode

				DisputedTransFinanceCharged
					default to ReceivableDefaultCode.DisputedTransFinanceCharged

				RevalueCurrencyTransactions
					default to ReceivableDefaultCode.RevalueCurrencyTransactions

				DiscountAdjustmentReason
					default to ReceivableDefaultCode.DiscountAdjustmentReason

				ReceivableGeneralLedgerCode
					default to ReceivableDefaultCode.ReceivableGeneralLedgerCode

				Customer
					if (Company.ClaimsAndLiabilitiesReporting
					or	Company.ForeignTradePaymentReport)
						constraint (Customer.PostalAddress.Country entered)
							"CustomerCountryCodeShouldBeSpecified"

			Entrance Rules





				if  (OriginatingInterfaceRun entered)
					if  (LastDunningLetterNumber entered
					or   LastDunningLetterDate entered
					or   LastDunningLetterAmount entered)
						constraint  (LastDunningLetterNumber entered
						and		  LastDunningLetterDate entered
						and		  LastDunningLetterAmount entered)
							"IfLastDunningLetterNumber,LastDunningLetterDate,OrLastDunningLetterAmountEntered,AllAreRequired"

			Action Rules

				if (MaximumAutoAdjustAmount entered
				or  MaxAutoPcts entered
				or  MaximumShortReasonCode entered)
					include ValidateApplicationTolerances
				else
					MaximumAutoAdjustAmount = ReceivableDefaultCode.MaximumAutoAdjustAmount
					MaxAutoPcts			 = ReceivableDefaultCode.MaxAutoPcts
					MaximumShortReasonCode  = ReceivableDefaultCode.MaximumShortReasonCode


				if (MaximumOverageAmount = 0
				and MaximumOveragePercent = 0
				and !MaximumOverageReasonCode entered)
					MaximumOverageAmount		 = ReceivableDefaultCode.MaximumOverageAmount
					MaximumOveragePercent		 = ReceivableDefaultCode.MaximumOveragePercent
					MaximumOverageReasonCode	 = ReceivableDefaultCode.MaximumOverageReasonCode

				if (TransientNationalAccountGroup.NatCompany  entered
				and TransientNationalAccountGroup.NatCustomer entered )
					constraint (TransientNationalAccountRel not exists)
						"CustomerAlreadyInvoicedCustomer"
					invoke Create NationalAccount
						invoked.NationalAccount.NationalAccountGroup.NatCompany		 = TransientNationalAccountGroup.NatCompany
						invoked.NationalAccount.NationalAccountGroup.NatCustomer	 = TransientNationalAccountGroup.NatCustomer
						invoked.NationalAccount.InvoiceAccountGroup.Company			 = Company
						invoked.NationalAccount.InvoiceAccountGroup.Customer		 = Customer

			Exit Rules
				include BuildTextIndexes
				if (BalanceForwardStatementCycle entered)
					ReceivableStatementCycle = BalanceForwardStatementCycle
				if (OpenItemStatementCycle entered)
					ReceivableStatementCycle = OpenItemStatementCycle
				if (HasBillingCompany
				and !ByPassOECustomerCreate)
					invoke Create OrderEntryCustomerRel
						fill in fields from ReceivableDefaultCode
						invoked.Customer = Customer
						include SetOECreateUpdateParams

				if (PerformVATValidation)	
					invoke ValidateVATRegistrationNumber

				trigger "CustomerAddCreditLimitChangeService" PA service
					resume on error
					title is "CO:<Company>Customer:<Customer>"
					Criteria
						Company
					Variables
						Company
							variable name is Company
						Customer
							variable name is Customer
						CreditLimit
							variable name is CreditLimit
						Customer.Name
							variable name is CustomerName

				invoke CustomerAddCreditLimitChangeAlert

		T2VCreate is a Create Action
			restricted
			default label is untranslatable
			bypass field rules
			Entrance Rules
				BypassValidActorContext = true


		Update is an Update Action
			Entrance Rules



			Action Rules
				include CheckBillingInvoiceEmailContactsOnlyExists




				if (CustomerGroupUseBillingReceivablesPortalAndSetupForPaymentsAndHasCustomerRepresentative)		
					constraint (DiscountAdjustmentReason entered)

						"Customer_Group<CustomerGroup>IsDefinedFor_Third_Party_Payment_Processing._Customer_Representative<first CustomerRepresentativeByCompanyCustomerRel.CustomerRepresentative>IsLinkedTo_Company<Company>_Customer<Customer>,WhichDoesNotHaveA_Discount_Adjustment_Reason_CodeDefined._PleaseDefine_Discount_Adjustment_Reason_CodeIn_Company_Customer."	
				if (MaximumAutoAdjustAmount entered
				or  MaxAutoPcts entered
				or  MaximumShortReasonCode entered)
					include ValidateApplicationTolerances

				UseTransientBillingInputs = true
				if (VATCustomerReportType.Domestic
				and VATRegistrationNumber not entered)
					confirmation required
						"DomesticCustomerTypeRequiresARegistrationNumber"
			Exit Rules
				if (BalanceForwardStatementCycle entered)
					ReceivableStatementCycle = BalanceForwardStatementCycle
				if (OpenItemStatementCycle entered)
					ReceivableStatementCycle = OpenItemStatementCycle
				if (OpenItemStatementCycle not entered
					and BalanceForwardStatementCycle not entered)
					ReceivableStatementCycle = blank

				if (HasBillingCompany
				and OrderEntryCustomerRel exists)
					invoke Update OrderEntryCustomerRel
						include SetOECreateUpdateParams

				if (HasBillingCompany
				and OrderEntryCustomerRel not exists
				and !ByPassOECustomerCreate)
					invoke Create OrderEntryCustomerRel
						fill in fields from ReceivableDefaultCode
						invoked.Customer = Customer
						include SetOECreateUpdateParams

				if (PerformVATValidation
				and	VATRegistrationInformationChanged)	
					invoke ValidateVATRegistrationNumber

				if (TransientDefaultCustomerShipTo not entered)
					invoke Update OrderEntryCustomerRel
						initialize invoked.DefaultCustomerShipTo

				if (OrderLimit entered)
					constraint (TransientOrderLimitHoldCode entered)
						"MustEnterOrderLimitHoldCode,OrderLimitWasEntered"

				if (DisabledReceivablesStatementAutoEmail
				or  DisabledBasicDunningLetterAutoEmail
				or  DisabledAdvancedDunningLetterAutoEmail
				or  DisabledPaymentRequestNoticeAutoEmail
				or  DisabledBillingInvoiceAutoEmail
				or  DisabledEFTNotificationPrintAutoEmail
				or  DisabledReceivableInvoiceAutoEmail
				or  DisabledSubleaseBillingInvoiceAutoEmail
				or  DisabledPaymentReceiptAutoEmail
				or  DisabledPrepaymentReceiptAutoEmail)
					invoke DisableAutoEmailing

		UpdateBODIdFields	is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation		  is Alpha size 22
					default label is "Location"
				PrmDocumentID		is Alpha size 100
					default label is "DocumentID"
				PrmRevision		  is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord	is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		FastUpdate	is an Update Action
			restricted
			refresh and lock this instance	
			bypass field rules

		TriggerCustomerPartyMaster	is an Instance Action
			restricted
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and (!LocalBODTrigger))
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							ActionCode = ActionCode.Update
							if (action type.Create)
								ActionCode = ActionCode.Create
							include TriggerCompanyCustomerServiceRules
							LocalBODTrigger = true

		Delete	is a Delete Action

			Entrance Rules
				constraint (CurrentBalance = 0)
					"CannotDelete;CurrentBalanceExistsForThisCustomer"	// "CannotDelete;CurrentBalanceExists"	
				constraint (!NationalAccountIndicator entered)
					"CannotDeleteInvoiceOrNationalAccountCustomer"		// "CannotDelete;NatlOrInvoiceAccountCustomer"		
				constraint (!CompanyCustomerCommentRel exists)
					"CannotDelete;CommentsExistForThisCustomer"			// "CannotDelete;CommentsExist"	
				constraint (!ReceivableInvoiceDisputeRel exists)
					"CannotDelete;DisputesExistForThisCustomer"			// "CannotDelete;DisputeExists"	
				constraint (!CompanyCustomerBankAccountRel exists)
					"CannotDelete;MICRRecordsExistForThisCustomer"		// "CannotDelete;_\M\I\C\RRecordsExistForCustomer"			 
				constraint (OpenOrderAmount = 0)
					"CannotDelete;OpenOrdersExistForThiCustomer"		// "CannotDelete;OpenOrdersExist"  
				if(OrderEntryCustomerRel exists)
					constraint (OrderEntryCustomerRel.CanBeDeleted)
						"CannotDelete;OrderEntryCustomerIsInUse"

				if (CurrentBalance = 0
				and NationalAccountIndicator not entered
				and CompanyCustomerCommentRel not exists
				and ReceivableInvoiceDisputeRel not exists
				and CompanyCustomerBankAccountRel not exists
				and OpenOrderAmount = 0
				and (OrderEntryCustomerRel not exists
				or   OrderEntryCustomerRel.CanBeDeleted))

					if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
						if (action type.Delete)
							ActionCode = ActionCode.Delete
							include TriggerCompanyCustomerServiceRules



					if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
						if (action type.Delete)
							ActionCode = ActionCode.Delete
							increment bod id.VariationID
							LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
							include TriggerPayFromPartyMasterRules


			Action Rules

		Deactivate	is an Instance Action
			restricted	
			Action Rules
				ActiveStatus = ActiveStatus.Inactive

		Activate	is an Instance Action
			restricted	
			Action Rules
				ActiveStatus = ActiveStatus.Active

		UpdateCurrentBalance	is an Instance Action
			restricted
			refresh and lock this instance
			Parameters
				CheckLastPaymentAmount						is an InternationalAmount
				CheckLastPaymentDate						is Date
				ChangeAmount								is an InternationalAmount
				TransactionDate								is Date
				InvoiceLastInvoiceAmount					is an InternationalAmount
				InvoiceLastInvoiceDate						is Date
				BypassCustomerAndNational					is Boolean
				PrmCurrentBalance							is an InternationalAmount
				PrmUpdatedBalance							is an InternationalAmount
				PrmBalanceType								is Numeric size 2
				PrmReference								is a Title

			Entrance Rules

			Action Rules


				PrmCurrentBalance				= CurrentBalance

				CurrentBalance					= CurrentBalance + ChangeAmount

				PrmUpdatedBalance				= CurrentBalance

				invoke Create CompanyCustomerBalanceActivity
					invoked.Company				= Company
					invoked.Customer			= Customer
					invoked.BalanceType			= PrmBalanceType
					invoked.Balance				= PrmCurrentBalance
					invoked.ChangeAmount		= ChangeAmount
					invoked.UpdatedBalance		= PrmUpdatedBalance
					invoked.Reference			= PrmReference



				if (CurrentBalance + BillOfExchangeBalance	>  HigHBalance.HighBal[1])
					HigHBalance.HighBal[1]	= CurrentBalance + BillOfExchangeBalance

				if (CheckLastPaymentDate	>= LastPaymentDate)
					LastPaymentDate			 = CheckLastPaymentDate
					LastPaymentAmount		 = CheckLastPaymentAmount
				if (InvoiceLastInvoiceDate	>= LastInvoiceDate)
					LastInvoiceDate			 = InvoiceLastInvoiceDate
					LastInvoiceAmount		 = InvoiceLastInvoiceAmount

				if (!BypassCustomerAndNational)
					if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)

						invoke UpdateCurrentBalance Customer
							invoked.ChangeAmount						= ChangeAmount
					else
						CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyWork.ExchangeDate						= TransactionDate
						CurrencyWork.TransactionAmount					= ChangeAmount
						CurrencyWork.FromCurrency						= Company.Currency
						CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency

						invoke UpdateCurrentBalance Customer
							invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount


					if (NationalAccountIndicator.Parent)
						if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
							invoke UpdateCurrentBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= ChangeAmount
						else
							CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate						= TransactionDate
							CurrencyWork.TransactionAmount					= ChangeAmount
							CurrencyWork.FromCurrency						= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency

							invoke UpdateCurrentBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
					if (NationalAccountIndicator.Child)
						LocalNationalCompany = DerivedNationalCompany
						LocalNationalCustomer = DerivedNationalCustomer
						if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
							for each NationalAccountInvoicedCustomerRel
								invoke UpdateCurrentBalance each.NationalAccountBalanceRel
									invoked.ChangeAmount						= ChangeAmount
								end for each
						else
							CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate						= TransactionDate
							CurrencyWork.TransactionAmount					= ChangeAmount
							CurrencyWork.FromCurrency						= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency

							for each NationalAccountInvoicedCustomerRel
								invoke UpdateCurrentBalance each.NationalAccountBalanceRel
									invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
								end for each

		UpdatePeriodTotals	is an Instance Action
			restricted


			Parameters
				Type								is Alpha 1
				Amount								is an InternationalAmount
				Amount2								is an InternationalAmount
				EffectiveDate						is Date

			Local Fields




			Action Rules
				constraint (EffectiveDate entered)
					"EffectiveDateRequiredToUpdateCustomerPeriodTotals"

				CalculateReceivableYearPeriod.Company			= Company
				CalculateReceivableYearPeriod.EffectiveDate		= EffectiveDate
				LocalTrigger									= CalculateReceivableYearPeriod.CalculateYearPeriod
				CurrentYear										= CalculateReceivableYearPeriod.CurrentYear
				CurrentPeriod									= CalculateReceivableYearPeriod.CurrentPeriod


				if (!CompanyCustomerPeriodTotalsRel exists)
					invoke Create CompanyCustomerPeriodTotalsRel

				invoke AddToBuckets CompanyCustomerPeriodTotalsRel
					invoked.Type = Type
					invoked.Amount = Amount
					invoked.Amount2 = Amount2
					invoked.Period = CurrentPeriod

		UpdateDraftBalance	is an Instance Action
			restricted
			Parameters
				ChangeAmount				is an InternationalAmount
				CustomerGroupChangeAmount	is an InternationalAmount
				PrmBalanceType				is Numeric size 2
				TransactionDate				is Date
				InvoiceLastInvoiceDate		is Date
				InvoiceLastInvoiceAmount	is an InternationalAmount
				PrmReference				is a Title
				PrmCurrentBalance			is an InternationalAmount
				PrmUpdatedBalance			is an InternationalAmount
			Action Rules

				PrmCurrentBalance				= BillOfExchangeBalance
				PrmUpdatedBalance				= BillOfExchangeBalance + ChangeAmount
				invoke Create CompanyCustomerBalanceActivity
					invoked.Company				= Company
					invoked.Customer			= Customer
					invoked.BalanceType			= PrmBalanceType
					invoked.Balance				= PrmCurrentBalance
					invoked.ChangeAmount		= ChangeAmount
					invoked.UpdatedBalance		= PrmUpdatedBalance
					invoked.Reference			= PrmReference

				if (CurrentBalance + PrmUpdatedBalance	>  HigHBalance.HighBal[1])
					HigHBalance.HighBal[1]	= CurrentBalance + PrmUpdatedBalance

				if (InvoiceLastInvoiceDate	>= LastInvoiceDate)
					LastInvoiceDate			 = InvoiceLastInvoiceDate
					LastInvoiceAmount		 = InvoiceLastInvoiceAmount

				BillOfExchangeBalance += ChangeAmount
				if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
					invoke UpdateDraftBalance Customer
						invoked.ChangeAmount		 = CustomerGroupChangeAmount

				if (NationalAccountIndicator.Parent)
					invoke UpdateDraftBalance NationalAccountBalanceRel
						invoked.ChangeAmount		 = ChangeAmount
				else
				if (NationalAccountIndicator.Child)
					invoke UpdateDraftBalance NationalAccountBalanceParentRel
						invoked.ChangeAmount		 = ChangeAmount

		BalanceUpdateGroupHasDifferentCurrency	is an Instance Action
			restricted

			Parameters
				ChangeAmount						is an InternationalAmount

			Action Rules
				CurrentBalance						 = CurrentBalance + ChangeAmount
				invoke UpdateCurrentBalance Customer
					invoked.ChangeAmount			 = ChangeAmount

				LocalNationalCompany = DerivedNationalCompany
				LocalNationalCustomer = DerivedNationalCustomer

				if (NationalAccountIndicator.Parent)
					invoke UpdateCurrentBalance NationalAccountBalanceRel
						invoked.ChangeAmount		 = ChangeAmount
				else
				if (NationalAccountIndicator.Child)
					invoke UpdateCurrentBalance NationalAccountBalanceParentRel
						invoked.ChangeAmount		 = ChangeAmount


		LinkWithAPVendor	is an Instance Action
			valid when (!HasVendor)		
			Parameters
				CreateNewVendor			is Boolean
				PayablesVendorGroup		is a VendorGroup
				PayablesVendor			is a Vendor
				VendorName				
					holds pii
				SearchName				
					holds pii
				LegalName
				VendorClass
				VendorAddress			is a PostalAddressV2	
					holds pii
			Parameter Rules
				PayablesVendorGroup
					required
					initial value is PayablesCompanyRel.VendorGroup
					force default to PayablesCompanyRel.VendorGroup
					constraint (PayablesVendorGroup = PayablesCompanyRel.VendorGroup)
						"VendorGroupForCustomerDoesNotMatchPayablesCompanyVendorGroup"		
				PayablesVendor
					if (!CreateNewVendor)
						required
				VendorName
					initial value is CustomerRel.Name
					if (CreateNewVendor)
						default to CustomerRel.Name
						required
				SearchName
					initial value is CustomerRel.SearchName
					if (CreateNewVendor)
						default to CustomerRel.SearchName
				LegalName
					initial value is CustomerRel.LegalName
					if (CreateNewVendor)
						default to CustomerRel.LegalName
				VendorClass
					if (CreateNewVendor)
						required
				VendorAddress
					initial value is CustomerRel.PostalAddress
					if (CreateNewVendor)
						default to CustomerRel.PostalAddress
						required
			Action Rules
				if (CreateNewVendor)
					invoke Create Vendor
						assign result to NewVendor
						invoked.VendorGroup			 = PayablesVendorGroup
						invoked.VendorName			 = VendorName
						invoked.VendorClass			 = VendorClass
						invoked.LegalName			 = LegalName
						invoked.VendorSearchName	 = SearchName
						invoked.ContactName			 = CustomerRel.Contact
						invoked.PhoneNumber			 = CustomerRel.PhoneNumber
						invoked.EmailAddress		 = CustomerRel.EmailAddress
						invoked.URLAddress			 = CustomerRel.URLAddress
						invoked.VendorAddress		 = VendorAddress
						invoked.CustomerGroup		 = Company.CustomerGroupField.CustomerGroup
						invoked.Customer			 = Customer

				if (!CreateNewVendor)
					invoke SetVendor CustomerRel
						invoked.PayablesVendorGroup	 = PayablesVendorGroup
						invoked.PayablesVendor		 = PayablesVendor
			Exit Rules
				if (!CreateNewVendor)
					invoke SetCustomer VendorRel
						invoked.PrmCustomerGroup	 = Company.CustomerGroupField.CustomerGroup
						invoked.PrmCustomer			 = Customer


		Netting	is an Instance Action
			restricted
			Parameters
				PrmCompany					is a Company
				PrmVendorGroup				is like VendorGroup
				PrmCustomer					is like Customer
				PrmARPostDate				is Date
				PrmAPInvoiceDate			is Date
				PrmReasonType				is a ReceivableReasonType
				PrmReceivableReason			is like ReceivableReason
				PrmAuthorityCode			is like PayablesAuthorityCode
				PrmOperator					is an Operator 
					holds pii
				PrmDescription				is a Description
				PrmProcessLevel				is like PayablesProcessLevel
				PrmAccrualCode				is like PayablesAccrualCode
				PrmTermsCode				is like TermsCode
				PrmDueDate					is Date
				PrmAutoInvoice				is Boolean
				PrmDetailPayablesInterface	is Boolean
				PrmHSNSACCode				is a HSNSACCode

			Local Fields

			Parameter Rules
				PrmCompany
					required

				PrmCustomer
					required

				PrmHSNSACCode
					if (PrmCompany.GeneralLedgerCompany.RequireHSNSACCode)
						required
							"HSN/SACCodeIsRequired"
					else
						cannot be entered
							"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"

			Action Rules
				for each OpenReceivableInvoiceDetailsForInterfaceRel
					invoke SelectForAPInterfacing each

				if (IsAvailableForRelease)
					invoke ReleaseToAPInterface
						invoked.PrmARPostDate				= PrmARPostDate
						invoked.PrmReasonType				= PrmReasonType
						invoked.PrmReceivableReason			= PrmReceivableReason
						invoked.PrmOperator					= PrmOperator
						invoked.PrmProcessLevel				= PrmProcessLevel
						invoked.PrmTermsCode				= PrmTermsCode
						invoked.PrmDueDate					= PrmDueDate
						invoked.PrmAuthorityCode			= PrmAuthorityCode
						invoked.PrmDescription				= PrmDescription
						invoked.PrmAccrualCode				= PrmAccrualCode
						invoked.PrmAutoInvoice				= PrmAutoInvoice
						invoked.PrmAPInvoiceDate			= PrmAPInvoiceDate
						invoked.PrmDetailPayablesInterface	= PrmDetailPayablesInterface
						invoked.PrmReleaseInvoice			= true
						if (PrmCompany.GeneralLedgerCompany.RequireHSNSACCode)
							invoked.PrmHSNSACCode			= PrmHSNSACCode

		InterfaceReleasedToAP	is an Instance Action	
			valid when (IsAvailableForRelease)
			run in foreground
			Parameters
				PrmARPostDate			is Date
				PrmReasonType			is a ReceivableReasonType
				PrmReceivableReason		is a ReceivableReason
				PrmAPInvoice			is AlphaUpper size 22
				PrmAuthorityCode		is a PayablesAuthorityCode
				PrmOperator				is an Operator 
					holds pii
				PrmDescription			is a Description

				PrmProcessLevel			is a PayablesProcessLevel

				PrmAccrualCode			is a PayablesAccrualCode
				PrmTermsCode			is a TermsCode
				PrmDueDate				is Date
				PrmAPInvoiceDate		is Date
				PrmAutoInvoice			is Boolean
				PrmPayVendor			is a Vendor
				PrmRemitToCode			is a VendorLocation

				PrmCashCode				is a CashCode
				PrmBankTransactionCode	is a BankTransactionCode
				PrmPayImmediately		is a BooleanOverride
				PrmInvoiceGroup			is a PayablesInvoiceGroup		
				PrmReleaseInvoice		is Boolean
				PrmDetailPayablesInterface	is Boolean
				PrmHSNSACCode			is a HSNSACCode

			Parameter Rules
				PrmDetailPayablesInterface
					initial value is Company.DetailPayablesInterface


				PrmARPostDate
					initial value is current corporate date
					default to current corporate date
					required
						"ARPostDateIsRequired"

					if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
						constraint (PrmARPostDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<PrmARPostDate>IsNotWithinValidEntryDatesForReceivableCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

					if (PayablesCompanySystemClosingControlRel.Control)
						constraint (PrmARPostDate within PayablesCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateOf<PrmARPostDate>NotWithinValidEntryDatesForPayablesCompany<PayablesCompanyRel.Company>;ValidDateRangeIs<PayablesCompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesCompanySystemClosingControlRel.ValidEntryDate.End>"

				PrmPayVendor
					initial value is Customer.VendorGroupAndVendor.Vendor.PayVendor		
					default to Customer.VendorGroupAndVendor.Vendor.PayVendor
					default to Customer.VendorGroupAndVendor.Vendor

				PrmAPInvoiceDate
					initial value is current corporate date
					default to current corporate date

				PrmReasonType
					default to "AD"
					initial value is "AD"
				PrmReceivableReason
					required
						"ReasonCodeIsRequired"

					constraint (PrmReceivableReason != "CURR")
						"CURRIsAReservedReasonCode"
				PrmAPInvoice
					if (PrmAutoInvoice)
						LocalSuffix						= Company.LastPayablesInterfaceInvoice + 1
						PrmAPInvoice					= "ARTOAP-" + ZeroPaddedCompany + "-" + ZeroPaddedLastPayablesInterfaceInvoice
						LocalInvoice					= PrmAPInvoice

						default to PrmAPInvoice

						invoke UpdateLastPayablesInterface Company
							invoked.PrmLastPayablesInterfaceInvoice = LocalSuffix





				PrmOperator
					if (IsCashOperatorRequired)
						required				
							"OperatorIsRequired"
					else
						force default to actor

				PrmProcessLevel
					initialize LocalOverrideAccount
					initialize LocalTranscendAccounts
					initialize LocalInvoiceCount
					LocalProcessLevel = PrmProcessLevel
					if (PrmReceivableReason.AccountingUnitOverrideFlag.AllowProcessLevelFinanceCodeBlockOverride)	
						LocalOverrideAccount = true
						for each ARToAPInterfaceSelectedRel				
							increment LocalInvoiceCount
							if (each.ARToAPApplicationSelect.TransactionType.CustomerPayment
							or  each.ARToAPApplicationSelect.TransactionType.BillOfExchangePayment)
								LocalProcessLevel = each.ReceivablePaymentRel.ReceivableProcessLevel
							else
								LocalProcessLevel = each.ReceivableInvoiceDetailRel.ReceivableProcessLevel
							if (LocalInvoiceCount = 1)
								if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
									LocalAccountingUnit = each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock


							if (each.ARToAPApplicationSelect.TransactionType.CustomerPayment
							or  each.ARToAPApplicationSelect.TransactionType.BillOfExchangePayment)
								if (each.ReceivablePaymentRel.ReceivableProcessLevel ! = LocalProcessLevel)
									if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
										if (!each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock = LocalAccountingUnit)
											LocalTranscendAccounts = true



							else
								if (each.ReceivableInvoiceDetailRel.ReceivableProcessLevel ! = LocalProcessLevel)
									if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
										if (!each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock = LocalAccountingUnit)
											LocalTranscendAccounts = true



						constraint (!LocalTranscendAccounts)
							"MustSelectBy_\Process_\Level;WriteOffAccountUnitsVary"		
						if (LocalProcessLevel = blank)
							if (DefaultPayablesProcessLevelRel exists)
								LocalProcessLevel = DefaultPayablesProcessLevelRel.PayablesProcessLevel
							else
								if (CompanyProcessLevelRel exists)
									if (first CompanyProcessLevelRel.PayablesProcessLevel = last CompanyProcessLevelRel.PayablesProcessLevel)
										LocalProcessLevel = first CompanyProcessLevelRel.PayablesProcessLevel
						constraint (LocalProcessLevel entered
						or			PrmProcessLevel entered)
							"ProcessLevelIsRequired"	

				PrmAccrualCode
					default to VendorCompanyDefaultRel.AccrualCode
					default to Customer.VendorGroupAndVendor.Vendor.AccrualCode
					default to DefaultPayablesProcessLevelRel.AccrualCode
					default to PayablesCompanyRel.AccrualCode
					required
						"APAccrualCodeIsRequired"

				PrmTermsCode
					if (!PrmDetailPayablesInterface)
						if (PrmTermsCode entered)
							constraint (PrmDueDate not entered)
								"DueDateEntered;CannotEnterTermsCode"		
						if (PrmTermsCode not entered)
							constraint (PrmDueDate entered)
								"MustEnterTermsCodeOrDueDate"		
				PrmDueDate
					if (!PrmDetailPayablesInterface)
						if (PrmDueDate entered)
							constraint (PrmTermsCode not entered)
								"TermsCodeEntered;CannotEnterDueDate"		
						if (PrmDueDate not entered)
							constraint (PrmTermsCode entered)
								"MustEnterTermsCodeOrDueDate"		
						if (PrmDueDate entered)
							constraint (PrmDueDate >= current corporate date)
								"DueDateCannotBeLessThanToday"		

				PrmHSNSACCode
					if (Company.GeneralLedgerCompany.RequireHSNSACCode)
						required
							"HSN/SACCodeIsRequired"
					else
						cannot be entered
							"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"

			Action Rules
				if (PrmDetailPayablesInterface changed)
					confirmation required
						"AreYouSureYouWantToOverrideTheCompanyDetailPayablesInterfaceValueOf<PrmDetailPayablesInterface>?"

				invoke ReleaseToAPInterface
					invoked.PrmARPostDate				 = PrmARPostDate
					invoked.PrmReasonType				 = PrmReasonType
					invoked.PrmReceivableReason			 = PrmReceivableReason
					invoked.PrmAPInvoice				 = PrmAPInvoice
					invoked.PrmAuthorityCode			 = PrmAuthorityCode
					invoked.PrmOperator					 = PrmOperator
					invoked.PrmDescription				 = PrmDescription
					invoked.PrmProcessLevel				 = PrmProcessLevel

					invoked.PrmAccrualCode				 = PrmAccrualCode
					invoked.PrmTermsCode				 = PrmTermsCode
					invoked.PrmDueDate					 = PrmDueDate
					invoked.PrmAPInvoiceDate			 = PrmAPInvoiceDate
					invoked.PrmAutoInvoice				 = PrmAutoInvoice
					invoked.PrmPayVendor				 = PrmPayVendor
					invoked.PrmRemitToCode				 = PrmRemitToCode
					invoked.PrmCashCode					 = PrmCashCode
					invoked.PrmBankTransactionCode		 = PrmBankTransactionCode
					invoked.PrmPayImmediately			 = PrmPayImmediately
					invoked.PrmInvoiceGroup				 = PrmInvoiceGroup
					invoked.PrmReleaseInvoice			 = true
					invoked.PrmDetailPayablesInterface	 = PrmDetailPayablesInterface
					if (Company.GeneralLedgerCompany.RequireHSNSACCode)
						invoked.PrmHSNSACCode			 = PrmHSNSACCode


		ReleaseToAPInterface	is an Instance Action	
			valid when (IsAvailableForRelease)
			run in foreground
			Parameters
				PrmARPostDate				is Date
				PrmReasonType				is a ReceivableReasonType
				PrmReceivableReason			is a ReceivableReason
				PrmAPInvoice				is AlphaUpper size 22
				PrmAuthorityCode			is a PayablesAuthorityCode
				PrmOperator					is an Operator 
					holds pii
				PrmDescription				is a Description

				PrmProcessLevel				is a PayablesProcessLevel

				PrmAccrualCode				is a PayablesAccrualCode
				PrmTermsCode				is a TermsCode
				PrmDueDate					is Date
				PrmAPInvoiceDate			is Date
				PrmAutoInvoice				is Boolean
				PrmPayVendor				is a Vendor
				PrmRemitToCode				is a VendorLocation

				PrmCashCode					is a CashCode
				PrmBankTransactionCode		is a BankTransactionCode
				PrmPayImmediately			is a BooleanOverride
				PrmInvoiceGroup				is an PayablesInvoiceGroup		
				PrmReleaseInvoice			is Boolean
				PrmDetailPayablesInterface	is Boolean
				PrmHSNSACCode				is a HSNSACCode

			Parameter Rules
				PrmDetailPayablesInterface
					initial value is Company.DetailPayablesInterface


				PrmARPostDate
					initial value is current corporate date
					default to current corporate date
					required
						"ARPostDateIsRequired"
					if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
						constraint (PrmARPostDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<PrmARPostDate>IsNotWithinValidEntryDatesForReceivableCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

					if (PayablesCompanySystemClosingControlRel.Control)
						constraint (PrmARPostDate within PayablesCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateOf<PrmARPostDate>NotWithinValidEntryDatesForPayablesCompany<PayablesCompanyRel.Company>;ValidDateRangeIs<PayablesCompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesCompanySystemClosingControlRel.ValidEntryDate.End>"



				PrmPayVendor
					initial value is Customer.VendorGroupAndVendor.Vendor.PayVendor			
					default to Customer.VendorGroupAndVendor.Vendor.PayVendor
					default to Customer.VendorGroupAndVendor.Vendor

				PrmAPInvoiceDate
					initial value is current corporate date
					default to current corporate date

				PrmReasonType
					default to "AD"
					initial value is "AD"
				PrmReceivableReason
					required
						"ReasonCodeIsRequired"
					constraint (PrmReceivableReason != "CURR")
						"CURRIsAReservedReasonCode"
				PrmAPInvoice
					if (PrmAutoInvoice)
						LocalSuffix						= Company.LastPayablesInterfaceInvoice + 1
						PrmAPInvoice					= "ARTOAP-" + ZeroPaddedCompany + "-" + ZeroPaddedLastPayablesInterfaceInvoice
						LocalInvoice					= PrmAPInvoice

						default to PrmAPInvoice

						invoke UpdateLastPayablesInterface Company
							invoked.PrmLastPayablesInterfaceInvoice = LocalSuffix





				PrmAuthorityCode

				PrmOperator
					if (IsCashOperatorRequired)
						required				
							"OperatorIsRequired"
					else

						force default to actor
				PrmDescription














				PrmProcessLevel
					initialize LocalOverrideAccount
					initialize LocalTranscendAccounts
					initialize LocalInvoiceCount
					LocalProcessLevel = PrmProcessLevel
					if (PrmReceivableReason.AccountingUnitOverrideFlag.AllowProcessLevelFinanceCodeBlockOverride)	
						LocalOverrideAccount = true
						for each ARToAPInterfaceSelectedRel				
							increment LocalInvoiceCount
							if (each.ARToAPApplicationSelect.TransactionType.CustomerPayment
							or  each.ARToAPApplicationSelect.TransactionType.BillOfExchangePayment)
								LocalProcessLevel = each.ReceivablePaymentRel.ReceivableProcessLevel
							else
								LocalProcessLevel = each.ReceivableInvoiceDetailRel.ReceivableProcessLevel
							if (LocalInvoiceCount = 1)
								if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
									LocalAccountingUnit = each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock


							if (each.ARToAPApplicationSelect.TransactionType.CustomerPayment
							or  each.ARToAPApplicationSelect.TransactionType.BillOfExchangePayment)
								if (each.ReceivablePaymentRel.ReceivableProcessLevel ! = LocalProcessLevel)
									if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
										if (!each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock = LocalAccountingUnit)
											LocalTranscendAccounts = true



							else
								if (each.ReceivableInvoiceDetailRel.ReceivableProcessLevel ! = LocalProcessLevel)
									if (each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock entered)
										if (!each.ARToAPProcessLevelRel.AccountingUnitFinanceCodeBlock = LocalAccountingUnit)
											LocalTranscendAccounts = true



						constraint (!LocalTranscendAccounts)
							"MustSelectBy_\Process_\Level;WriteOffAccountUnitsVary"		
						if (LocalProcessLevel = blank)
							if (DefaultPayablesProcessLevelRel exists)
								LocalProcessLevel = DefaultPayablesProcessLevelRel.PayablesProcessLevel
							else
								if (CompanyProcessLevelRel exists)
									if (first CompanyProcessLevelRel.PayablesProcessLevel = last CompanyProcessLevelRel.PayablesProcessLevel)
										LocalProcessLevel = first CompanyProcessLevelRel.PayablesProcessLevel
						constraint (LocalProcessLevel entered
						or			PrmProcessLevel entered)
							"ProcessLevelIsRequired"	


				PrmAccrualCode
					default to VendorCompanyDefaultRel.AccrualCode
					default to Customer.VendorGroupAndVendor.Vendor.AccrualCode
					default to DefaultPayablesProcessLevelRel.AccrualCode
					default to PayablesCompanyRel.AccrualCode
					required
						"APAccrualCodeIsRequired"

				PrmTermsCode
					if (!PrmDetailPayablesInterface)
						if (PrmTermsCode entered)
							constraint (PrmDueDate not entered)
								"DueDateEntered;CannotEnterTermsCode"		
						if (PrmTermsCode not entered)
							constraint (PrmDueDate entered)
								"MustEnterTermsCodeOrDueDate"		
				PrmDueDate
					if (!PrmDetailPayablesInterface)
						if (PrmDueDate entered)
							constraint (PrmTermsCode not entered)
								"TermsCodeEntered;CannotEnterDueDate"		
						if (PrmDueDate not entered)
							constraint (PrmTermsCode entered)
								"MustEnterTermsCodeOrDueDate"		
						if (PrmDueDate entered)
							constraint (PrmDueDate >= current corporate date)
								"DueDateCannotBeLessThanToday"		

				PrmHSNSACCode
					if (Company.GeneralLedgerCompany.RequireHSNSACCode)
						required
							"HSN/SACCodeIsRequired"
					else
						cannot be entered
							"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"



			Local Fields
				NegateForCreditMemo is Boolean
			Action Rules
				if (!PrmAutoInvoice)
					if ((Company.DetailPayablesInterface
					and !PrmDetailPayablesInterface)
					or (!Company.DetailPayablesInterface
					and PrmDetailPayablesInterface))
						confirmation required
							"AreYouSureYouWantToOverrideTheCompanyDetailPayablesInterfaceValueTo:<PrmDetailPayablesInterface>?"

				constraint (HasVendor)
					"CustomerNotLinkedToVendor"

				constraint (DerivedSelectedAmount ! = 0)
					"SelectedAmountCanNotBeEqualToZeroToRelease"		
				LocalAccrualCode	= PrmAccrualCode
				LocalReasonCode	= PrmReceivableReason
				constraint (ReceivableReason2Rel exists)
					"ReasonCodeDoesNotExist,<Company>,<LocalReasonCode>,<PrmReceivableReason>"
				constraint (ReceivableReason2Rel.ReceivableAdjustmentReasonType.OverShort)
					"InvalidReasonCode,MustBeTypeOverShortType"			

				if (!PrmDetailPayablesInterface
				and PrmAPInvoice not entered
				and !PrmAutoInvoice)

						confirmation required
							"InvoiceNumberNotEntered,DefaultNumberingSchemeWillBeUsed"

						LocalSuffix						= Company.LastPayablesInterfaceInvoice + 1
						PrmAPInvoice					= "ARTOAP-" + ZeroPaddedCompany + "-" + ZeroPaddedLastPayablesInterfaceInvoice
						LocalInvoice					= PrmAPInvoice

						invoke UpdateLastPayablesInterface Company
							invoked.PrmLastPayablesInterfaceInvoice = LocalSuffix


				LocalInvoice							= PrmAPInvoice
				constraint (!PayablesInvoiceRel		exists
				and			!PayablesInvoiceHistoryRel	exists)
					"InvoiceAlreadyExists"



				initialize LocalAPCreateError
				initialize LocalSelectBaseAmount
				initialize LocalSelectOrigAmount
				initialize LocalFinanceEnterpriseGroup
				initialize LocalProject
				initialize LocalAccumTranAmount
				initialize LocalAccumOrigAmount
				initialize LocalAccumTranVendorAmount

				LocalVerifyOK = true
				for each ARToAPInterfaceSelectedRel		
					NegateForCreditMemo = false

					LocalARInvoice = each.ARToAPApplicationSelect.Invoice
					LocalTransactionType = each.ARToAPApplicationSelect.TransactionType
					LocalARInvoiceSeq = each.ARToAPApplicationSelect.PaymentSeq
					if (each.IsReceivableTransaction)

						if (!each.ReceivableInvoiceDetailRel exists)


							LocalVerifyOK = false
						else
							LocalTranAmount = (ReceivableInvoiceDetail2Rel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ReceivableInvoiceDetail2Rel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableInvoiceDetail2Rel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount))
							LocalOrigAmount = (ReceivableInvoiceDetail2Rel.InvoiceAmount.CurrencyAmount - (ReceivableInvoiceDetail2Rel.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetail2Rel.AdjustmentAmount.CurrencyAmount))
							LocalFunctionalAmount	= (ReceivableInvoiceDetail2Rel.InvoiceAmount.FunctionalAmount - (ReceivableInvoiceDetail2Rel.ApplicationAmount.FunctionalAmount + ReceivableInvoiceDetail2Rel.AdjustmentAmount.FunctionalAmount))
							LocalAlternateAmount	= (ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount - (ReceivableInvoiceDetail2Rel.ApplicationAmount.AlternateAmount + ReceivableInvoiceDetail2Rel.AdjustmentAmount.AlternateAmount))
							LocalAlternateAmount2	= (ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount2 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.AlternateAmount2 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.AlternateAmount2))
							LocalAlternateAmount3	= (ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount3 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.AlternateAmount3 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.AlternateAmount3))
							LocalReportAmount1		= (ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount1 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.ReportAmount1 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.ReportAmount1))
							LocalReportAmount2		= (ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount2 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.ReportAmount2 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.ReportAmount2))
							LocalReportAmount3		= (ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount3 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.ReportAmount3 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.ReportAmount3))
							LocalReportAmount4		= (ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount4 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.ReportAmount4 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.ReportAmount4))
							LocalReportAmount5		= (ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount5 - (ReceivableInvoiceDetail2Rel.ApplicationAmount.ReportAmount5 + ReceivableInvoiceDetail2Rel.AdjustmentAmount.ReportAmount5))


							if(ReceivableInvoiceDetail2Rel.IsCreditMemo)
								NegateForCreditMemo = true








					else	

						if (!each.ReceivablePaymentRel exists)


							LocalVerifyOK = false
						else
							LocalTranAmount = (((each.ReceivablePaymentRel.BaseAmount + each.ReceivablePaymentRel.BaseCreditAppliedAmount) - (each.ReceivablePaymentRel.BaseAppliedAmount + each.ReceivablePaymentRel.BaseAdjustAmount)) * -1)
							LocalOrigAmount = (((each.ReceivablePaymentRel.TransactionAmount + each.ReceivablePaymentRel.CreditAppliedAmount) - (each.ReceivablePaymentRel.AppliedAmount + each.ReceivablePaymentRel.AdjustAmountTransactionCurrency)) * -1)









					if (LocalTranAmount != each.BaseAmount
					or  LocalOrigAmount != each.TransactionAmount)

						LocalVerifyOK = false




					constraint (LocalVerifyOK)
						"SelectedRecordsModifiedOrPartiallyApplied;Invoice<each.ARToAPApplicationSelect.Invoice>Amount<each.BaseAmount>AvailableAmount<LocalTranAmount>"




					if (NegateForCreditMemo)
						LocalAccumTranAmount -= LocalTranAmount
						LocalAccumOrigAmount -= LocalOrigAmount
					else
						LocalAccumTranAmount += LocalTranAmount
						LocalAccumOrigAmount += LocalOrigAmount



					if (each.ARToAPApplicationSelect.TransactionType.Invoice
					or  each.ARToAPApplicationSelect.TransactionType.CreditMemo
					or  each.ARToAPApplicationSelect.TransactionType.DebitMemo)
						if  (ReceivableReason2Rel.DistributionAccount.Project		entered
						or   ReceivableInvoiceDetailRel.Project			entered)
							if (!ReceivableInvoiceDetailRel.ExemptProject)
								if (ReceivableReason2Rel.DistributionAccount.Project entered)
									LocalProject = ReceivableReason2Rel.DistributionAccount.Project
								else
									LocalProject = ReceivableInvoiceDetailRel.Project
								if (LocalProject			= blank)
									initialize LocalProject
								else		
									LocalFinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									constraint (ProjectRel exists)	
										"Project<LocalProject>DoesNotExist"


					invoke UnreleasedCashApplication.Create ReceivableApplication
						invoked.Company										 = Company
						invoked.CreditTransaction.CreditCustomer			 = Customer
						invoked.ReceivableApplication.TransType				 = each.ARToAPApplicationSelect.TransactionType
						invoked.ReceivableApplication.Invoice				 = each.ARToAPApplicationSelect.Invoice
						invoked.ReceivableApplication.PaymentSeq			 = each.ARToAPApplicationSelect.PaymentSeq
						invoked.ReceivableApplication.BatchNumber			 = each.ARToAPApplicationSelect.BatchNumber
						invoked.CreditTransaction.CreditCompany				 = Company
						invoked.CreditTransaction.CreditBatch				 = each.ARToAPApplicationSelect.BatchNumber
						invoked.CreditTransaction.CreditSequence			 = each.ARToAPApplicationSelect.PaymentSeq
						invoked.CreditTransaction.CreditType				 = each.ARToAPApplicationSelect.TransactionType
						invoked.CreditTransaction.CreditNumber				 = each.ARToAPApplicationSelect.Invoice
						invoked.CreateAdjustReason							 = LocalReasonCode
						invoked.CreateAdjustProject							 = LocalProject

						invoked.ApplicationSource							 = "T"	
						invoked.GeneralLedgerDate							 = PrmARPostDate
						invoked.ReceivableOperator							 = PrmOperator
						invoked.TransientSkipAPSelectEdit					 = true
						invoked.ApplicationCurrency							 = Currency
						invoked.TransientSetToReviewed						 = true
						if (each.ARToAPApplicationSelect.TransactionType	 = "P")
							invoked.CreateAdjustAmount						 = each.TransactionAmount * -1
							invoked.ReceivableGeneralLedgerCode				 = each.ARToAPApplicationSelect.ReceivablePaymentRel.ReceivedNotAppliedReceivableGeneralLedgerCode
						else
							invoked.CreateAdjustAmount						 = each.TransactionAmount
							invoked.ReceivableGeneralLedgerCode				 = each.ARToAPApplicationSelect.ReceivableInvoiceDetailRel.ReceivableGeneralLedgerCode












					LocalSelectBaseAmount			= each.TransactionAmount









































































					if (PrmDetailPayablesInterface)

						if (each.IsReceivableTransaction)
							PrmAPInvoiceDate = ReceivableInvoiceDetail2Rel.TransactionDate
							PrmDueDate		 = ReceivableInvoiceDetail2Rel.DueDate
							LocalToCurrency	 = ReceivableInvoiceDetail2Rel.OriginalCurrency

							if(ReceivableInvoiceDetail2Rel.IsCreditMemo)
								LocalOrigAmount				= LocalOrigAmount * -1
								LocalFunctionalAmount		= LocalFunctionalAmount * -1
								LocalAlternateAmount		= LocalAlternateAmount * -1
								LocalAlternateAmount2		= LocalAlternateAmount2 * -1
								LocalAlternateAmount3		= LocalAlternateAmount3 * -1
								LocalReportAmount1			= LocalReportAmount1 * -1
								LocalReportAmount2			= LocalReportAmount2 * -1
								LocalReportAmount3			= LocalReportAmount3 * -1
								LocalReportAmount4			= LocalReportAmount4 * -1
								LocalReportAmount5			= LocalReportAmount5 * -1
						else
							PrmAPInvoiceDate = ReceivablePayment2Rel.DepositDate
							PrmDueDate		 = ReceivablePayment2Rel.DepositDate	
							LocalToCurrency	 = ReceivablePayment2Rel.OriginalCurrency

						if (Company.RetainInvoiceToAP)
							LocalInvoice = LocalARInvoice

							if (PayablesInvoiceRel exists
							or	PayablesInvoiceHistoryRel exists)
								LocalSuffix					= Company.LastPayablesInterfaceInvoice + 1
								PrmAPInvoice				= "ARTOAP-" + ZeroPaddedCompany + "-" + ZeroPaddedLastPayablesInterfaceInvoice
								LocalInvoice				= PrmAPInvoice
							else
								LocalInvoice				= LocalARInvoice
								LocalSuffix					= Company.LastPayablesInterfaceInvoice
						else
							LocalSuffix						= Company.LastPayablesInterfaceInvoice + 1
							PrmAPInvoice					= "ARTOAP-" + ZeroPaddedCompany + "-" + ZeroPaddedLastPayablesInterfaceInvoice
							LocalInvoice					= PrmAPInvoice

						invoke UpdateLastPayablesInterface Company
							invoked.PrmLastPayablesInterfaceInvoice = LocalSuffix

						invoke CreateInvoice PayablesInvoice
							assign result to NewPayablesInvoice
							invoked.Company							= PayablesCompanyRel.Company
							invoked.Vendor							= Customer.VendorGroupAndVendor.Vendor
							invoked.PayablesInvoice.Invoice			= LocalInvoice
							invoked.PayablesInvoice.Suffix			= blank
							invoked.PayablesInvoice.CancelSequence	= blank
							if (PrmAuthorityCode entered)
								invoked.AuthorityCode				= PrmAuthorityCode
							if (PrmDescription entered)
								invoked.Description					= PrmDescription + " " + LocalTransactionType + " " + LocalARInvoice
							else
								invoked.Description					= "AR To AP Cleared Transactions" + " " + LocalTransactionType + " " + LocalARInvoice

							if (LocalOrigAmount < 0)
								invoked.InvoiceType					= "D"
							else
								invoked.InvoiceType					= "C"
							invoked.InvoiceAmount.CurrencyAmount	= LocalOrigAmount * -1
							invoked.InvoiceCurrency					= LocalToCurrency
							if (each.IsReceivableTransaction)
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivableInvoiceDetail2Rel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		= ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		= ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		= ReceivableInvoiceDetail2Rel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyRate			= ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyRate			= ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyRate			= ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyRate			= ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyRate			= ReceivableInvoiceDetail2Rel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctionalAmount * -1
								invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount * -1
								invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateAmount2 * -1
								invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateAmount3 * -1
								invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1 * -1
								invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2 * -1
								invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3 * -1
								invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4 * -1
								invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5 * -1









							else
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivablePayment2Rel.CurrencyRate

							invoked.VoucherNumber					= LocalVoucherNumber
							invoked.ProcessLevel					= PrmProcessLevel
							invoked.AccrualCode						= PrmAccrualCode
							invoked.InvoiceDate						= PrmAPInvoiceDate

							invoked.DueDate							= PrmDueDate
							invoked.TermsCode						= PrmTermsCode
							invoked.DistributionDate				= PrmARPostDate
							invoked.InvoiceSource					= "C"
							invoked.Operator						= PrmOperator
							invoked.Status							= 0			
							invoked.TransientReleaseOnInvoiceAdd	= false		
							invoked.PayVendor						= PrmPayVendor
							invoked.RemitToCode						= PrmRemitToCode
							invoked.PayVendor						= PrmPayVendor
							invoked.RemitToCode						= PrmRemitToCode
							invoked.CashCode						= PrmCashCode
							invoked.BankTransactionCode				= PrmBankTransactionCode
							invoked.OverridePayImmediately			= PrmPayImmediately
							invoked.InvoiceGroup					= PrmInvoiceGroup

						invoke Create PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.Vendor					= Customer.VendorGroupAndVendor.Vendor
							invoked.PayablesInvoice			= NewPayablesInvoice.PayablesInvoice
							invoked.DistributionType		= "D"
							invoked.PostingOption			= Customer.VendorGroupAndVendor.Vendor.VendorClass.PostingOption
							invoked.DistributionAccount		= ReceivableReason2Rel.DistributionAccount
							invoked.DistributionReference	= "TransferedFromAR"
							invoked.GLFinanceCodeBlock		= ReceivableReason2Rel.DistributionAccount
							invoked.GLTransactionAmount		= LocalOrigAmount * -1	
							invoked.DistributionAmount.CurrencyAmount	= LocalOrigAmount * -1	
							if (Company.GeneralLedgerCompany.RequireHSNSACCode)
								invoked.HSNSACCode			= PrmHSNSACCode

						if (PrmReleaseInvoice)
							invoke Unreleased.Release NewPayablesInvoice.PayablesInvoice

				if (!PrmDetailPayablesInterface)

					LocalFromCurrency			= Company.AccountingEntity.FunctionalCurrency
					LocalAccumTranVendorAmount	= LocalAccumTranAmount
					LocalToCurrency				= LocalFromCurrency

					if	(VendorRel.BalanceCurrency entered
					and	 VendorRel.BalanceCurrency != Company.AccountingEntity.FunctionalCurrency)
						LocalToCurrency									= VendorRel.BalanceCurrency
						CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyWork.ExchangeDate						= PrmAPInvoiceDate
						CurrencyWork.TransactionAmount					= LocalAccumTranVendorAmount
						CurrencyWork.FromCurrency						= Company.AccountingEntity.FunctionalCurrency
						CurrencyWork.BaseAmount.ToCurrency				= VendorRel.BalanceCurrency
						LocalAccumTranVendorAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount

					invoke CreateInvoice PayablesInvoice
						assign result to NewPayablesInvoice
						invoked.Company							= PayablesCompanyRel.Company
						invoked.Vendor							= Customer.VendorGroupAndVendor.Vendor
						invoked.PayablesInvoice.Invoice			= LocalInvoice
						invoked.PayablesInvoice.Suffix			= blank
						invoked.PayablesInvoice.CancelSequence	= blank
						if (PrmAuthorityCode entered)
							invoked.AuthorityCode				= PrmAuthorityCode
						if (PrmDescription entered)
							invoked.Description					= PrmDescription
						else
							invoked.Description					= "AR To AP Cleared Transactions"
						if (LocalAccumTranAmount < 0)
							invoked.InvoiceType					= "D"
						else
							invoked.InvoiceType					= "C"
						invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAccumTranAmount * -1
						invoked.InvoiceAmount.CurrencyAmount							= LocalAccumTranVendorAmount * -1
						invoked.InvoiceCurrency					= LocalToCurrency
						invoked.VoucherNumber					= LocalVoucherNumber
						invoked.ProcessLevel					= PrmProcessLevel
						invoked.AccrualCode						= PrmAccrualCode
						invoked.InvoiceDate						= PrmAPInvoiceDate

						invoked.DueDate							= PrmDueDate
						invoked.TermsCode						= PrmTermsCode
						invoked.DistributionDate				= PrmARPostDate

						invoked.InvoiceSource					= "C"
						invoked.Operator						= PrmOperator
						invoked.Status							= 0			
						invoked.TransientReleaseOnInvoiceAdd	= false		
						invoked.PayVendor						= PrmPayVendor
						invoked.RemitToCode						= PrmRemitToCode
						invoked.PayVendor						= PrmPayVendor
						invoked.RemitToCode						= PrmRemitToCode
						invoked.CashCode						= PrmCashCode
						invoked.BankTransactionCode				= PrmBankTransactionCode
						invoked.OverridePayImmediately			= PrmPayImmediately
						invoked.InvoiceGroup					= PrmInvoiceGroup

					invoke Create PayablesInvoiceDistribution
						invoked.Company								 = Company
						invoked.Vendor								 = Customer.VendorGroupAndVendor.Vendor
						invoked.PayablesInvoice						 = NewPayablesInvoice.PayablesInvoice
						invoked.DistributionType					 = "D"
						invoked.PostingOption						 = Customer.VendorGroupAndVendor.Vendor.VendorClass.PostingOption
						invoked.DistributionAccount					 = ReceivableReason2Rel.DistributionAccount
						invoked.DistributionReference				 = "TransferedFromAR"
						invoked.GLFinanceCodeBlock					 = ReceivableReason2Rel.DistributionAccount
						invoked.GLTransactionAmount					 = LocalAccumTranVendorAmount * -1
						invoked.DistributionAmount.CurrencyAmount	 = LocalAccumTranVendorAmount * -1
						if (Company.GeneralLedgerCompany.RequireHSNSACCode)
							invoked.HSNSACCode						 = PrmHSNSACCode



					if (PrmReleaseInvoice)
						invoke Unreleased.Release NewPayablesInvoice.PayablesInvoice







				invoke DeleteWithoutConfirmation ARToAPInterfaceSelectedRel




		SuppressActions	is an Update Action
			valid when (AlwaysFalse)


		ReleaseInvoiceObligationGrouping	is an Instance Action
			valid when (HasReceivableInvoiceObligationGroup)
			Parameters
				NewCompany						is a ReceivableCompany
				NewCustomer						is a Customer
				NewInvoice						is AlphaUpper size 22
				NewReceivableProcessLevel		is a ReceivableProcessLevel
				ReceivableReasonType
				NewReceivableReason				is an ApplicationAdjustmentReason
				NewGeneralLedgerDate			is Date
					default label is "NewGlobalLedgerDate"
				NewTermsCode					is a TermsCode
				NewDueDate						is Date
				NewBankTransactionCode			is a BankTransactionCode
				AdditionalAmount				is an InternationalAmount
				AdditionalAmountAccount			is a FinanceCodeBlock
				NewOperator						is like ReceivableOperator
				NewRevalueCurrencyTransactions	is Boolean
				NewBillTo						is a CustomerBillTo
				PrmSelectMyRecords				is Boolean

			Parameter Rules
				NewCompany
					default to Company
					initial value is Company
					if (!NationalAccountIndicator.Parent)
						constraint (NewCompany = Company)
							"CannotSelectDifferentCompanyForCustomerThatIsNotANationalAccount"

				NewCustomer
					default to Customer
					initial value is Customer

					if (!NationalAccountIndicator.Parent)
						constraint (NewCustomer = Customer)
							"CannotSelectDifferentCustomerIfCustomerIsNotANationalAccount"

					if (NewCompany != Company
					or  NewCustomer != Customer)
						LocalNationalAccount.NationalAccountGroup.NatCompany	= Company
						LocalNationalAccount.NationalAccountGroup.NatCustomer	= Customer
						LocalNationalAccount.InvoiceAccountGroup.Company		= NewCompany
						LocalNationalAccount.InvoiceAccountGroup.Customer		= NewCustomer
						constraint (LocalNationalAccount exists)
							"NationalAccountRelationshipDoesNotExist"

				NewInvoice

					if (NewInvoice entered)
						LocalCompany					= NewCompany
						if (!PrmSelectMyRecords)
							if (TotalObligationGroupingAmount >= 0)
								LocalTransactionType		= "D"
							else
								LocalTransactionType		= "C"
						else
						if  (PrmSelectMyRecords)
							if (TotalObligationGroupingAmountByActor >= 0)
								LocalTransactionType		= "D"
							else
								LocalTransactionType		= "C"
						LocalInvoice					= NewInvoice
						constraint (!LocalReceivableInvoiceRel exists)
							"MemoAlreadyExists"

						initialize ValidateReceivablePrefix
						ValidateReceivablePrefix.EditReceivableCompany		= NewCompany
						ValidateReceivablePrefix.EditReceivableInvoice		= NewInvoice
						ValidateReceivablePrefix.EditReceivableInvoiceType	= LocalTransactionType
						constraint (ValidateReceivablePrefix.ErrorNumber not entered)
							"<ValidateReceivablePrefix.ErrorMessage>"

				ReceivableReasonType
					default to "AD"
					initial value is "AD"

				NewReceivableReason
					required
					constraint (NewReceivableReason != "CURR")
						"CURRIsAReservedReasonCode"
					constraint (NewReceivableReason.ReceivableAdjustmentReasonType.Grouping)
						"ReasonCodeMustBeGroupingType"

					if (!PrmSelectMyRecords)
						for each ReceivableInvoiceObligationGroupRel
							LocalCompany				= each.Company
							LocalReceivableReason		= NewReceivableReason
							constraint (ReceivableReasonGroupingRel exists)
								"ReasonCodeDoesNotExistForAllSelectedCompanies"
					else
					if (PrmSelectMyRecords)
						for each ReceivableInvoiceObligationGroupActorRel
							LocalCompany				= each.Company
							LocalReceivableReason		= NewReceivableReason
							constraint (ReceivableReasonGroupingRel exists)
								"ReasonCodeDoesNotExistForAllSelectedCompanies"

				NewReceivableProcessLevel
					required
						"ProcessLevelRequired"

				NewTermsCode
					if (NewTermsCode not entered
					and NewDueDate not entered)
						if (NewCompany = Company
						and NewCustomer = Customer)
							default to DebitCreditMemoTermsCode
						else
						if (NewCustomer entered)
							LocalCompany	= NewCompany
							LocalCustomer	= NewCustomer
							default to LocalCompanyCustomerRel.DebitCreditMemoTermsCode

				NewGeneralLedgerDate
					initial value is current corporate date
					required

				NewDueDate
					if (NewTermsCode entered)
						cannot be entered
							"CannotEnterBothTermsCodeAndDueDate"
					if (NewDueDate entered)
						constraint (NewDueDate >= NewGeneralLedgerDate)
							"DueDateCannotBeLessThanGlobalLedgerDate"

				NewBankTransactionCode
					if (NewCompany = Company
					and NewCustomer = Customer)
						default to BankTransactionCode
					else
					if (NewCustomer entered)
						LocalCompany	= NewCompany
						LocalCustomer	= NewCustomer
						default to LocalCompanyCustomerRel.BankTransactionCode

					if ((!PrmSelectMyRecords
					and TotalObligationGroupingAmount < 0)
					or  (PrmSelectMyRecords
					and TotalObligationGroupingAmountByActor <0))
						constraint (!NewBankTransactionCode.BankTransactionType.BillOfExchangePayment)
							"CannotCreateDraft;GroupAmountMustBePositive"

					required

				AdditionalAmount
					if ((!PrmSelectMyRecords
					and TotalObligationGroupingAmount < 0)
					or  (PrmSelectMyRecords
					and TotalObligationGroupingAmountByActor <0))
						cannot be entered
					constraint (AdditionalAmount >= 0)
						"AdditionalAmountMustBePositive"


				AdditionalAmountAccount
					if (AdditionalAmount entered)
						required
							"AdditionalAmountAccountRequiredIfAdditionalAmountEntered"
					else
						cannot be entered
							"AdditionalAmountAccountCannotBeEnteredIfAdditionalAmountNotEntered"

				NewRevalueCurrencyTransactions
					if (NewCustomer entered)
						LocalCompany	= NewCompany
						LocalCustomer	= NewCustomer
						default to LocalCompanyCustomerRel.RevalueCurrencyTransactions
					else
						default to RevalueCurrencyTransactions

				NewOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= NewOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				if (!PrmSelectMyRecords)
					if (TotalObligationGroupingAmount >= 0)
						LocalTransactionType		= "D"
						WorkAmount = TotalObligationGroupingAmount + AdditionalAmount
					else
						LocalTransactionType		= "C"
						WorkAmount = TotalObligationGroupingAmount * -1
				else
				if (PrmSelectMyRecords)
					if (TotalObligationGroupingAmountByActor >= 0)
						LocalTransactionType		= "D"
						WorkAmount = TotalObligationGroupingAmountByActor + AdditionalAmount
					else
						LocalTransactionType		= "C"
						WorkAmount = TotalObligationGroupingAmountByActor * -1

				LocalCompany	= NewCompany
				LocalCustomer	= NewCustomer

				if (NewTermsCode entered)

					initialize CalculateTerms
					CalculateTerms.TransactionDate		= NewGeneralLedgerDate
					CalculateTerms.TransactionAmount	= WorkAmount
					initialize ReceivableTerms
					ReceivableTerms.TermsCode = NewTermsCode
					ReceivableTerms.CalculateTerms = CalculateTerms

					LocalTermsCalTrigger = ReceivableTerms.CalculateTerms.TermsCalTrigger
					constraint (ReceivableTerms.CalculateTerms.OutputErrorNumber not entered)
						"<ReceivableTerms.CalculateTerms.OutputErrorMessage>"

				if (!PrmSelectMyRecords)
					for each ReceivableInvoiceObligationGroupRel
						if (!each.ReceivableInvoiceDetailRel exists)
							confirmation required
								"Invoice<each.ReceivableInvoiceObligationGroup.Invoice>NoLongerExists;Continue?"
						else
						if (each.TransactionAmount	!= each.ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount
						or  each.AppliedAmount		!= each.ReceivableInvoiceDetailRel.ApplicationAmount.CurrencyAmount
						or  each.AdjustAmount		!= each.ReceivableInvoiceDetailRel.AdjustmentAmount.CurrencyAmount)
							confirmation required
								"AmountsHaveChangedForInvoice<each.ReceivableInvoiceObligationGroup.Invoice>;Continue?"
				else
				if (PrmSelectMyRecords)
					for each ReceivableInvoiceObligationGroupActorRel
						if (!each.ReceivableInvoiceDetailRel exists)
							confirmation required
								"Invoice<each.ReceivableInvoiceObligationGroup.Invoice>NoLongerExists;Continue?"
						else
						if (each.TransactionAmount	!= each.ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount
						or  each.AppliedAmount		!= each.ReceivableInvoiceDetailRel.ApplicationAmount.CurrencyAmount
						or  each.AdjustAmount		!= each.ReceivableInvoiceDetailRel.AdjustmentAmount.CurrencyAmount)
							confirmation required
								"AmountsHaveChangedForInvoice<each.ReceivableInvoiceObligationGroup.Invoice>;Continue?"


				if (NewInvoice not entered)
					LocalSuffix = Company.LastGroupedObligationNumber + 1
					LocalCompany					= NewCompany
					LocalInvoice					= "GP-" + LocalSuffix
					while (LocalReceivableInvoiceRel exists)
						LocalSuffix += 1

					invoke FastUpdate Company
						invoked.LastGroupedObligationNumber = LocalSuffix

					NewInvoice = LocalInvoice

				invoke Released.CreateReleasedFromPayment ReceivableInvoice
					assign result to NewReceivableInvoice
					invoked.Company												= NewCompany
					invoked.Customer											= NewCustomer
					invoked.ReceivableInvoiceType								= LocalTransactionType
					invoked.AlternateReceivableInvoiceType						= LocalTransactionType
					invoked.ReceivableInvoice									= NewInvoice
					invoked.BatchNumber											= current corporate date
					invoked.ReceivableProcessLevel								= NewReceivableProcessLevel
					if (LocalCompanyCustomerRel.ReceivableGeneralLedgerCode entered)
						invoked.ReceivableGeneralLedgerCode						= LocalCompanyCustomerRel.ReceivableGeneralLedgerCode
					else
						invoked.ReceivableGeneralLedgerCode						= NewReceivableProcessLevel.ReceivableGeneralLedgerCode
					invoked.GeneralLedgerDate									= NewGeneralLedgerDate
					invoked.TransactionDate										= NewGeneralLedgerDate

					if (UseCustomerCurrency)
						invoked.OriginalCurrency								= Currency
					else
					if (!PrmSelectMyRecords)
						invoked.OriginalCurrency								= first ReceivableInvoiceObligationGroupRel.ReceivableInvoiceDetailRel.OriginalCurrency
					else
						invoked.OriginalCurrency								= first ReceivableInvoiceObligationGroupActorRel.ReceivableInvoiceDetailRel.OriginalCurrency
					invoked.SalesRepresentative									= SalesRepresentative
					invoked.BankTransactionCode									= NewBankTransactionCode
					invoked.BankTransactionType									= NewBankTransactionCode.BankTransactionType
					invoked.FromReceivablePayment								= true
					invoked.Origin												= "G"
					invoked.SummarizeDetail										= false
					invoked.CustomerBillTo										= NewBillTo
					invoked.TermsCode											= NewTermsCode
					invoked.System												= "AR"
					invoked.InvoiceAmount.CurrencyAmount						= WorkAmount

				invoke Create ReceivableInvoiceDetail
					fill in fields from NewReceivableInvoice.ReceivableInvoice
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= LocalTransactionType
					invoked.ReceivableInvoiceDetail.Invoice						= NewInvoice
					invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
					invoked.Status												= 1
					invoked.InvoiceAmount.CurrencyAmount						= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
					if (NewTermsCode entered)
						invoked.DiscountDate.DiscDate[1]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
						invoked.DiscountPercent.DiscPct[1]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
						invoked.DiscountDate.DiscDate[2]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
						invoked.DiscountPercent.DiscPct[2]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
						invoked.DiscountDate.DiscDate[3]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
						invoked.DiscountPercent.DiscPct[3]						= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent
						invoked.DueDate											= ReceivableTerms.CalculateTerms.CalculateTermsTable.CalculateTermsOutput.DueDate
					else
						invoked.DueDate											= NewDueDate

				invoke UpdateCurrentBalance
					invoked.ChangeAmount									=	WorkAmount
					invoked.TransactionDate									=	NewGeneralLedgerDate
					invoked.PrmBalanceType									=	8	
					invoked.PrmReference									=	NewReceivableInvoice.Reference

				WorkAmount = WorkAmount - AdditionalAmount
				invoke Create ReceivableGLDistribution
					invoked.FinanceEnterpriseGroup							= NewCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
					invoked.ReceivableCompanyGroup.GlCompany				= NewCompany
					invoked.ReceivableCompanyDataGroup.TransactionCompany	= NewCompany
					invoked.ReceivableCompanyGroup.OriginCompany			= NewCompany
					invoked.GeneralLedgerDate								= NewGeneralLedgerDate

					invoked.ReceivableCompanyDataGroup.Customer				= NewCustomer
					invoked.Origin											= "RM"
					invoked.AccumulationType								= "D"
					invoked.DistributionSource								= "A"
					invoked.DocumentNumber									= "15-" +  NewInvoice
					if (WorkAmount entered)
						invoked.Status										= 2
					else
						invoked.Status										= 9

					invoked.BypassStructureRelationEdit						= true 
					if (NewReceivableReason.DistributionAccount entered)
						invoked.GeneralLedgerAccount						= NewReceivableReason.DistributionAccount
					else
						invoked.GeneralLedgerAccount						= NewReceivableInvoice.ReceivableGeneralLedgerCode.DistributionAccount

					if (NewReceivableInvoice.ReceivableInvoiceType.CreditMemo)
						invoked.DistributionAmount.CurrencyAmount			= WorkAmount * -1
					else
						invoked.DistributionAmount.CurrencyAmount			= WorkAmount

					invoked.BatchNumber												 = NewReceivableInvoice.BatchNumber
					invoked.Invoice													 = NewReceivableInvoice.ReceivableInvoice
					invoked.TransType												 = NewReceivableInvoice.ReceivableInvoiceType
					invoked.TransactionDate											 = NewGeneralLedgerDate

					invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel		 = NewReceivableInvoice.ReceivableProcessLevel
					invoked.OriginalCurrency										 = NewReceivableInvoice.OriginalCurrency
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	 = NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.CurrencyDecimalsNumber									 = NewReceivableInvoice.CurrencyDecimalsNumber
				WorkAmount = WorkAmount + AdditionalAmount

			Exit Rules
				if (!PrmSelectMyRecords)
					for each ReceivableInvoiceObligationGroupRel
						include WriteOffGroupingObligation
				else
				if (PrmSelectMyRecords)
					for each ReceivableInvoiceObligationGroupActorRel
						include WriteOffGroupingObligation


				if (AdditionalAmount entered)

					invoke Create ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup							= NewCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
						invoked.ReceivableCompanyGroup.GlCompany				= NewCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= NewCompany
						invoked.ReceivableCompanyGroup.OriginCompany			= NewCompany
						invoked.GeneralLedgerDate								= NewGeneralLedgerDate

						invoked.ReceivableCompanyDataGroup.Customer				= NewCustomer
						invoked.Origin											= "RM"
						invoked.AccumulationType								= "D"
						invoked.DistributionSource								= "A"
						invoked.DocumentNumber									= "15-" +  NewInvoice
						invoked.Status											= 2

						invoked.GeneralLedgerAccount							= AdditionalAmountAccount
						invoked.DistributionAmount.CurrencyAmount				= AdditionalAmount * -1

						invoked.BatchNumber										= NewReceivableInvoice.BatchNumber
						invoked.Invoice											= NewReceivableInvoice.ReceivableInvoice
						invoked.TransType										= NewReceivableInvoice.ReceivableInvoiceType
						invoked.TransactionDate									= NewGeneralLedgerDate

						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= NewReceivableInvoice.ReceivableProcessLevel
						invoked.OriginalCurrency								= NewReceivableInvoice.OriginalCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.CurrencyDecimalsNumber							= NewReceivableInvoice.CurrencyDecimalsNumber


					invoke Create ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup							= NewCompany.CustomerBusinessGroup.FinanceEnterpriseGroup
						invoked.ReceivableCompanyGroup.GlCompany				= NewCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= NewCompany
						invoked.ReceivableCompanyGroup.OriginCompany			= NewCompany
						invoked.GeneralLedgerDate								= NewGeneralLedgerDate

						invoked.ReceivableCompanyDataGroup.Customer				= NewCustomer
						invoked.Origin											= "RM"
						invoked.AccumulationType								= "D"
						invoked.DistributionSource								= "A"
						invoked.DocumentNumber									= "15-" +  NewInvoice
						invoked.Status											= 2

						invoked.BypassStructureRelationEdit						= true 
						invoked.GeneralLedgerAccount							= NewReceivableInvoice.ReceivableGeneralLedgerCode.DistributionAccount
						invoked.DistributionAmount.CurrencyAmount				= AdditionalAmount

						invoked.BatchNumber										= NewReceivableInvoice.BatchNumber
						invoked.Invoice											= NewReceivableInvoice.ReceivableInvoice
						invoked.TransType										= NewReceivableInvoice.ReceivableInvoiceType
						invoked.TransactionDate									= NewGeneralLedgerDate

						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= NewReceivableInvoice.ReceivableProcessLevel
						invoked.OriginalCurrency								= NewReceivableInvoice.OriginalCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.CurrencyDecimalsNumber							= NewReceivableInvoice.CurrencyDecimalsNumber

				if  (NewReceivableInvoiceDetail.BankTransactionCode.BankTransactionType.BillOfExchangePayment
				and  NewReceivableInvoiceDetail.BankTransactionCode.TransactionOrigin.Receivable
				and BillOfExchangeProcessing.Individual)

					invoke Created.Create CustomerDraft
						assign result to NewCustomerDraft
						invoked.Company											= Company
						invoked.Customer										= Customer
						if (!Company.BillOfExchangeNumberingType.AutomaticNumbering)
							invoked.CustomerDraft.DraftNumber					= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
							invoked.CustomerDraft.Suffix						= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableProcessLevel							= NewReceivableInvoice.ReceivableProcessLevel
						invoked.BankTransactionCode								= NewReceivableInvoice.BankTransactionCode
						invoked.CustomerDraft.DraftSource						= "R"
						invoked.CurrencyRate									= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.CurrencyMultiplicationOrDivision				= NewReceivableInvoice.CurrencyMultiplicationOrDivision
						invoked.CurrencyRateToCustomerGroupCurrency				= NewReceivableInvoice.CurrencyRateToCustomerGroupCurrency
						invoked.CustomerGroupCurrencyMultiplicationOrDivision	= NewReceivableInvoice.CustomerGroupCurrencyMultiplicationOrDivision
						invoked.BaseAmount										= NewReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.TransactionAmount								= NewReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
						invoked.OriginalCurrency								= NewReceivableInvoice.OriginalCurrency
						invoked.DraftDate										= NewReceivableInvoice.GeneralLedgerDate
						invoked.MaturityDate									= NewReceivableInvoiceDetail.DueDate
						invoked.ReceivableGeneralLedgerCode						= NewReceivableInvoiceDetail.ReceivableGeneralLedgerCode

					invoke ApplicationPosted.BillOfExchangeCreate ReceivableApplication
						invoked.Company											= Company
						invoked.ReceivableApplication.TransType					= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplication.Invoice					= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplication.PaymentSeq				= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplication.BatchNumber				= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.BatchNumber


						invoked.ApplicationAmount.CurrencyAmount					= NewReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount

						invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount			= NewReceivableInvoiceDetail.InvoiceAmount.CurrencyAmount
						invoked.ApplicationCurrency								= Company.Currency

						invoked.ReceivableOperator								= actor
						invoked.ApplicationSource								= "M"	
						invoked.ReceivableGeneralLedgerCode						= NewReceivableInvoiceDetail.ReceivableGeneralLedgerCode

						invoked.CreditTransaction.CreditType					= "B"
						invoked.CreditTransaction.CreditCompany					= NewCustomerDraft.Company
						invoked.CreditTransaction.CreditCustomer				= NewCustomerDraft.Customer
						invoked.CreditTransaction.CreditBatch					= NewCustomerDraft.PaymentBatchNumber
						invoked.CreditTransaction.CreditSequence				= NewCustomerDraft.CustomerDraft.Suffix
						invoked.CreditTransaction.CreditNumber					= NewCustomerDraft.CustomerDraft.DraftNumber
						invoked.GeneralLedgerDate								= NewCustomerDraft.DraftDate
						invoked.DepositDate										= NewCustomerDraft.DraftDate
						invoked.ApplicationSource								= "B"	
						if (Company.BillOfExchAcceptAccounting.YesGeneralLedgerUpdateRequiredAtAcceptance)
							invoked.GLOffsetCode								= NewReceivableInvoiceDetail.ReceivableProcessLevel.BOEAcceptanceReceivableGeneralLedgerCode
						else
							invoked.GLOffsetCode								= NewReceivableInvoiceDetail.ReceivableProcessLevel.ReceivableGeneralLedgerCode

						if (NewCustomerDraft.OriginalCurrency = Company.Currency)
							invoked.ApplicationCurrencyType						= "B"
						else
							invoked.ApplicationCurrencyType						= "N"



		ProcessPendingAdjustments	is an Instance Action
			valid when (HasPendingAdjustments)
			Parameters
				Operator is like ReceivableOperator
			Parameter Rules
				Operator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= Operator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"
			Action Rules
				invoke ProcessRecords ReceivablePendingAdjustment
					invoked.PrmUser			= actor
					invoked.PrmSource		= "R"
					invoked.PrmCompany		= Company
					invoked.PrmCustomer		= Customer
					invoked.PrmOperator		= Operator

		RemovePendingAdjustments	is an Instance Action
			valid when (HasPendingAdjustments)
			Action Rules
				invoke Purge CustomerPendingAdjustmentsRel

		ProcessPendingEFTAdjustments	is an Instance Action
			valid when (IsValidForProcessingPendingEFTAdjustments)
			Action Rules
				for each ReceivableEFTAdjustmentsRel
					if (each.ReceivableInvoiceDetailRel.SummarizeDetail)
						if (each.WorkAction.Add)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel.ReceivableInvoiceDetailRel
								invoked.EftAction		= "1"
								invoked.EftExtract		= 0
						else
						if (each.WorkAction.Delete
						and each.ReceivableInvoiceDetailRel.TemporaryHold not entered)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel.ReceivableInvoiceDetailRel
								invoked.EftAction		= blank
								invoked.EftExtract		= 0
								invoked.EFTNotification	= 0
							invoke Delete each.ReceivableInvoiceDetailRel.PreNoteElectronicFundsTransferRel
							invoke Delete each.ReceivableInvoiceDetailRel.FinalNoteElectronicFundsTransferRel
							invoke Purge each.ReceivableInvoiceDetailRel.EFTNotiExtractPrenoteInvoiceDetailsRel
							invoke Purge each.ReceivableInvoiceDetailRel.EFTNotiExtractFinalNoteInvoiceDetailsRel
						else
						if (each.WorkAction.Delete
						and each.ReceivableInvoiceDetailRel.TemporaryHold = "R")
							invoke EFTUpdate each.ReceivableInvoiceDetailRel.ReceivableInvoiceDetailRel
								invoked.EftAction		= blank
								invoked.EftExtract		= 0
								invoked.TemporaryHold	= blank
							invoke Update each.ReceivableInvoiceDetailRel.FinalNoteElectronicFundsTransferRel
								invoked.EftAction		= blank
								invoked.TemporaryHold	= blank
						else
						if (each.WorkAction.Hold)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel.ReceivableInvoiceDetailRel
								invoked.EftAction		= "6"
								invoked.EftExtract		= 8
						else
						if (each.WorkAction.Postpone)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel.ReceivableInvoiceDetailRel
								invoked.EftAction		= "2"
								invoked.EftExtract		= 8
					else
						if (each.WorkAction.Add)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel
								invoked.EftAction		= "1"
								invoked.EftExtract		= 0
						else
						if (each.WorkAction.Delete
						and each.ReceivableInvoiceDetailRel.TemporaryHold not entered)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel
								invoked.EftAction		= blank
								invoked.EftExtract		= 0
								invoked.EFTNotification	= 0
							invoke Delete each.ReceivableInvoiceDetailRel.PreNoteElectronicFundsTransferRel
							invoke Delete each.ReceivableInvoiceDetailRel.FinalNoteElectronicFundsTransferRel
							invoke Purge each.ReceivableInvoiceDetailRel.EFTNotiExtractPrenoteInvoiceDetailsRel
							invoke Purge each.ReceivableInvoiceDetailRel.EFTNotiExtractFinalNoteInvoiceDetailsRel
						else
						if (each.WorkAction.Delete
						and each.ReceivableInvoiceDetailRel.TemporaryHold = "R")
							invoke EFTUpdate each.ReceivableInvoiceDetailRel
								invoked.EftAction		= blank
								invoked.EftExtract		= 0
								invoked.TemporaryHold	= blank
							invoke Update each.ReceivableInvoiceDetailRel.FinalNoteElectronicFundsTransferRel
								invoked.EftAction		= blank
								invoked.TemporaryHold	= blank
						else
						if (each.WorkAction.Hold)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel
								invoked.EftAction		= "6"
								invoked.EftExtract		= 8
						else
						if (each.WorkAction.Postpone)
							invoke EFTUpdate each.ReceivableInvoiceDetailRel
								invoked.EftAction		= "2"
								invoked.EftExtract		= 8


					invoke Purge each

		Review	is an Instance Action
			Parameters
				PrmReviewDate				is Date
				PrmNationalReviewDate		is Date
			Parameter Rules
				PrmReviewDate
					if (ReviewCode.OpenToReview)
						constraint (PrmReviewDate <= ReviewDate)
							"ReviewCodeOpen;DateCannotBeGreaterThanCurrentReviewDate"
				PrmNationalReviewDate
					if (!NationalAccountIndicator.Parent)
						cannot be entered
							"CustomerIsNotANationalAccount"
			Action Rules
				ReviewDate		= PrmReviewDate
				ReviewCode		= "O"

				if (PrmNationalReviewDate entered)
					invoke Update NationalAccountBalanceRel
						invoked.ReviewDate		= PrmReviewDate
						invoked.ReviewCode		= "O"


		UpdateDunning	is an Instance Action
			Parameters
				PrmIsoLocale					is an IsoLocale
				PrmDunningNumber				is a DunningLetterTextCode
				PrmNationalDunningNumber		is a DunningLetterTextCode
			Parameter Rules
				PrmIsoLocale
					default to LanguageCode
					cannot be changed
				PrmDunningNumber
					default to CompanyCustomerReviewSelectRel.DunningNumber
				PrmNationalDunningNumber
					default to NationalAccountReviewSelectRel.DunningNumber
					if (!NationalAccountIndicator.Parent)
						cannot be entered
							"CustomerIsNotANationalAccount"
			Action Rules
				invoke Purge CompanyCustomerReviewSelectRel

				if (PrmDunningNumber entered)
					invoke Create CompanyCustomerReviewSelect
						invoked.Company										= Company
						invoked.CreditAnalyst								= CreditAnalyst
						invoked.CompanyCustomerReviewSelect.Date			= current timestamp
						invoked.CompanyCustomerReviewSelect.Customer		= Customer
						invoked.CompanyCustomerReviewSelect.SelectLevel		= "C"
						invoked.CreditAction								= "O"
						invoked.Status										= 9
						invoked.HoldFlag									= "N"
						invoked.DunningNumber								= PrmDunningNumber
						invoked.Review										= false

				if (PrmNationalDunningNumber entered)
					invoke Purge NationalAccountReviewSelectRel

					if (PrmDunningNumber entered)
						invoke Create CompanyCustomerReviewSelect
							invoked.Company										= Company
							invoked.CreditAnalyst								= CreditAnalyst
							invoked.CompanyCustomerReviewSelect.Date			= current timestamp
							invoked.CompanyCustomerReviewSelect.Customer		= Customer
							invoked.CompanyCustomerReviewSelect.SelectLevel		= "N"
							invoked.CreditAction								= "O"
							invoked.Status										= 9
							invoked.HoldFlag									= "N"
							invoked.DunningNumber								= PrmNationalDunningNumber
							invoked.Review										= false

		ClearFilter	is an Instance Action
			valid when (FilterExists)
			Action Rules
				invoke Purge ReceivableFilterRel

		UpdateFilters	is an Instance Action
			Parameters
				HistoryFlag										is Alpha 1
					States
						IncludeHistory	value is "I"
						OnlyShowHistory	value is "O"
						NoHistory		value is "N"
				PrmReceivableProcessLevel						is a ReceivableProcessLevel
				Currency
				TransactionAmountRange							is an AmountRange
				OpenAmountRange									is an AmountRange
				TransactionDateRange							is a DateRange
				XrefNbrRange									is an InvoiceRange
				CustomerPurchaseOrderRange
				TransUser1Range
				DueDateRange									is a DateRange
				PrmProject										is a ProjectRange
			Parameter Rules
				HistoryFlag
					initial value is ReceivableFilterRel.HistoryFlag
				PrmReceivableProcessLevel
					initial value is ReceivableFilterRel.ReceivableProcessLevel
				Currency
					initial value is ReceivableFilterRel.Currency
				TransactionAmountRange
					initial value is ReceivableFilterRel.TransactionAmountRange
				OpenAmountRange
					initial value is ReceivableFilterRel.OpenAmountRange
				TransactionDateRange
					initial value is ReceivableFilterRel.TransactionDateRange
				XrefNbrRange
					initial value is ReceivableFilterRel.XrefNbrRange
				CustomerPurchaseOrderRange
					initial value is ReceivableFilterRel.CustomerPurchaseOrderRange
				TransUser1Range
					initial value is ReceivableFilterRel.TransUser1Range
				DueDateRange
					initial value is ReceivableFilterRel.DueDateRange
				PrmProject
					initial value is ReceivableFilterRel.ProjectRange
			Action Rules
				if (!ReceivableFilterRel exists)
					invoke Create ReceivableFilterRel
						invoked.HistoryFlag							= HistoryFlag
						if (PrmReceivableProcessLevel entered)	
							invoked.ReceivableCompany				= PrmReceivableProcessLevel.Company	
						invoked.ReceivableProcessLevel				= PrmReceivableProcessLevel
						invoked.Currency							= Currency
						invoked.TransactionAmountRange				= TransactionAmountRange
						invoked.OpenAmountRange						= OpenAmountRange
						invoked.TransactionDateRange				= TransactionDateRange
						invoked.XrefNbrRange						= XrefNbrRange
						invoked.CustomerPurchaseOrderRange			= CustomerPurchaseOrderRange
						invoked.TransUser1Range						= TransUser1Range
						invoked.DueDateRange						= DueDateRange
						invoked.ProjectRange						= PrmProject
				else
					invoke Update ReceivableFilterRel
						invoked.HistoryFlag							= HistoryFlag
						if (PrmReceivableProcessLevel entered)	
							invoked.ReceivableCompany				= PrmReceivableProcessLevel.Company	
						invoked.ReceivableProcessLevel				= PrmReceivableProcessLevel
						invoked.Currency							= Currency
						invoked.TransactionAmountRange				= TransactionAmountRange
						invoked.OpenAmountRange						= OpenAmountRange
						invoked.TransactionDateRange				= TransactionDateRange
						invoked.XrefNbrRange						= XrefNbrRange
						invoked.CustomerPurchaseOrderRange			= CustomerPurchaseOrderRange
						invoked.TransUser1Range						= TransUser1Range
						invoked.DueDateRange						= DueDateRange
						invoked.ProjectRange						= PrmProject


		UpdateWithVertexTaxAreaId	is a Set Action

			valid when (UsingVertex)
			run in foreground	

			completion message is "<CompletionMessage>"

			Parameters
				PrmARCompany				is a ReceivableCompany
					default label is "ReceivableCompany"
				PrmCompanyCustomer			is a CompanyCustomer
					context of PrmFromCustomer
				PrmFromCustomer				is a Customer
					default label is "FromCustomer"
				PrmToCustomer				is a Customer
					default label is "ToCustomer"

			Parameter Rules
				PrmARCompany
					required
				PrmFromCustomer
					if (PrmToCustomer not entered)
						required
				PrmToCustomer
					if (PrmFromCustomer not entered)
						required
			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10

			Instance Selection

				where (CompanyCustomer.Company	= PrmARCompany
				and	CompanyCustomer.Customer >= PrmFromCustomer
				and	CompanyCustomer.Customer <= PrmToCustomer)

			Sort Order
				CompanyCustomer

			Accumulators




			Action Rules
				Empty Set Rules
					CompletionMessage = "NoRecordsFoundToProcess"

				Set Rules
					Entrance Rules

					Exit Rules

				CompanyCustomer Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					increment RecordCount



					if (!TaxExempt
					and CustomerRel exists)
						invoke GetTaxAreaIdUsingAddress CustomerRel
							invoked.PrmTaxEntity = GeneralLedgerCompanyRel.AccountingEntity



		CustomerPurge	is a Set Action

			restricted
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCompany				 is a ReceivableCompany
					default label is "Company"
				PrmCustGroup			   is a CustomerGroup
					default label is "CustomerGroup"
				PrmSetStatusDel			is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
					default label is "SetCustomersForDeletion"
				PrmCustomer				   is a Customer
					context of PrmCustGroup
					default label is "Customer"
				PrmStartDate			   is Date
					default label is "StartDate"
				PrmMajClass				is a CustomerMajorClass
				   	context of PrmFinanceEnterpriseGroup
				   	default label is "MajorClass"
				PrmMinClass				is a CustomerMinorClass
					context of PrmFinanceEnterpriseGroup
					default label is "MinorClass"
				PrmCreditAnlyst			is a CreditAnalyst
					default label is "CreditAnalysis"
				PrmSalesman				is a SalesRepresentative
					default label is "SalesRepresentative"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup

				PrmSetStatusDel
					initial value is "N"
					default to "N"

				PrmCompany
					if (PrmCompany not entered and PrmCustGroup not entered)
						required
							"SelectCompanyOrCustomerGroup"
					
					if (PrmCustomer not entered)
						constraint (PrmCustGroup not entered)
							"CannotEnterBothCompanyAndCustomerGroup"

					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"
				
				PrmCustGroup
					if (PrmCompany entered)
						default to PrmCompany.CustomerGroupField.CustomerGroup
					
					constraint (PrmCustGroup.CustomerBusinessGroup.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCustGroup.CustomerBusinessGroup.FinanceEnterpriseGroup>"
				
				PrmCustomer
					constraint (PrmMajClass not entered and PrmCreditAnlyst not entered and PrmSalesman not entered)
						"CustomerEntered-DoNotEnterAnalyst,MajorClassOrSalesRepresentative"
					if (PrmCustomer not entered)
						if (PrmCompany entered
						and PrmCustGroup entered)
							initialize PrmCustGroup

				PrmStartDate
					initial value is actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					default to actor.context.FinanceEnterpriseGroup.PurgeCutOffDate					
						
			Local Fields 
				RecordCount				is Numeric 10 
			
			Instance Selection
				include deleted records
				where((((PrmCompany   entered
				and 	 PrmCompany	 = Company)
				or   	(PrmCompany not entered
				and 	 PrmCustGroup  entered
				and 	 PrmCustGroup   = CustomerGroup))
				and	   ((PrmSetStatusDel.Yes
				and	 (ActiveStatus.Active
				or	   ActiveStatus.Inactive))
				or		(PrmSetStatusDel.No
				and	  ActiveStatus.Delete))
				and 	(PrmCustomer not entered
				or		 PrmCustomer		= Customer)
				and		(PrmMajClass not entered
				or	   PrmMajClass 		= CustomerMajorClass)
				and		(PrmMinClass not entered
				or	   PrmMinClass 		= CustomerMinorClass)
				and		(PrmCreditAnlyst not entered
				or	   PrmCreditAnlyst 	= CreditAnalyst)
				and		(PrmSalesman not entered
				or	   PrmSalesman 		= SalesRepresentative)
				and		(PrmStartDate not entered
				or	   PrmStartDate	   >= StartDate)
				and		 CurrentBalance		 = 0
				and 	 BillOfExchangeBalance = 0
				and 	 OpenOrderAmount	 = 0))




			Action Rules

				Empty Set Rules
					LocalActor = actor

					send notification
						to LocalActor
						description is "NoCompanyCustomerRecordsFoundToPurge"
						priority is high
						detail is "CustomerPurgeHasBeenCompletedfor<RecordCount>records"
				Set Rules
					Exit Rules
						LocalActor = actor

						send notification
							to LocalActor
							description is "CustomerPurgeHasBeenCompleted"
							priority is high
							detail is "CustomerPurgeHasBeenCompletedFor<RecordCount>records"

				Instance Rules
					if (ReceivablePaymentRel	   not exists
					and ReceivableInvoiceDetailRel not exists
					and ReceivableInvoiceRel not exists
					and ((!LastInvoiceDate = 0
					and (LastInvoiceDateToDays as days /30 > PrmCompany.CustomerDeletRetentionMonths))
					or LastInvoiceDate = 0)
					and ((!LastPaymentDate = 0
					and (LastPaymentDateToDays as days /30 > PrmCompany.CustomerDeletRetentionMonths))
					or LastPaymentDate = 0)
					and ((!LastStatementDate = 0
					and (LastStatementDateToDays as days /30 > PrmCompany.CustomerDeletRetentionMonths))
					or LastStatementDate = 0)
					and !NationalAccountIndicator.Parent)
						if (PrmSetStatusDel.Yes
						and (ActiveStatus.Active
						or   ActiveStatus.Inactive))
							ActiveStatus = ActiveStatus.Delete

						if (PrmSetStatusDel.No
						and ActiveStatus.Delete)
							increment RecordCount
							invoke Purge OrderEntryCustomerRel
							invoke Purge ArcustperRel
							invoke Purge BalanceForwardStatementTotalRel
							invoke Purge CompanyCustomerContactRel
							invoke Purge CustomerProcessLevelInclusionRel
							invoke Purge CompanyCustomerCommentAttachmentRel
							invoke Purge CompanyCustomerCommentRel
							invoke Purge CustomerPayAccountsRel
							invoke Purge CustomerShipToRel
							invoke Purge FranchiseCustomerBalanceRel
							invoke Purge CustomerCreditCardImportRel
							invoke Purge CompanyCustomerBankAccountRel
							invoke Purge CompanyCustomerStaticAgingRel
							invoke Purge CustomerDraftBankRel
							if (NationalAccountIndicator.Child)
								LocalPurgeCompany   =  NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany
								LocalPurgeCustomer  =  NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
								invoke Purge NationalAccountInvoiceRel

								if (NationalAccountPurgeRel not exists)

									invoke Update CompanyCustomerPurgeRel
										invoked.NationalAccountIndicator = blank

									invoke Purge NationalAccountBalancePurgeRel
							invoke Purge
							
					
		Purge is a Purge Action
			restricted



		UpdateVertexTaxCodes	is an Instance Action	

			valid when (ReturnVertexTaxAreaId)
			run in foreground

			restricted


			Parameters

			Parameter Rules

			Local Fields
				LocalTaxCode	is a TaxCode

			Action Rules
				if (!TaxExempt
				and CustomerRel exists)
					LocalTaxCode = CustomerRel.DerivedTaxCode	
					if (LocalTaxCode entered)
						TaxCode	= LocalTaxCode


		UpdateVertexTaxCode	is an Instance Action

			valid when (ReturnVertexTaxAreaId)
			run in foreground

			Parameters

			Parameter Rules

			Local Fields


			Action Rules
				if (!TaxExempt
				and CustomerRel exists)
					invoke GetTaxAreaIdUsingAddress CustomerRel
						invoked.PrmTaxEntity = GeneralLedgerCompanyRel.AccountingEntity

		ResetBalance	is an Instance Action
			valid when (Testing)
			completion message is "CurrentBalanceResetTo<CurrentBalance>"
			Action Rules

				CurrentBalance = sum OpenReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount
				CurrentBalance -= sum OpenReceivablePaymentRel.TransactionAmount

		CreateOrderEntryCustomer	is an Instance Action
			valid when (AllowCreateOECustomer)
			Action Rules
				invoke Create OrderEntryCustomerRel
					fill in fields from ReceivableDefaultCode
					invoked.Customer = Customer
					include SetOECreateUpdateParams

		UpdatePaymentCode	is an Instance Action

			Parameters
				PrmCompany								is a ReceivableCompany
				PrmCashManagementGroup					is a CashManagementGroup
				PrmFromBankTransactionCode				is a BankTransactionCode
					context of PrmCashManagementGroup
				PrmToBankTransactionCode				is a BankTransactionCode
					context of PrmCashManagementGroup

			Parameter Rules
				PrmCompany
					default to Company

				PrmCashManagementGroup
					default to GeneralLedgerCompanyRel.FinanceEnterpriseGroup

				PrmFromBankTransactionCode
					required

				PrmToBankTransactionCode
					required

			Action Rules

				constraint (HasOpenTransactions)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"CustomerDoesNotHaveOpenTransactions"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				LocalOldBankTransactionCode = PrmFromBankTransactionCode

				LocalNewBankTransactionCode = PrmToBankTransactionCode

				if (!Company.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing)
					constraint (LocalNewBankTransactionCode.BankTransactionType = "C")
						"BankTransactionCodeMustBeCashPaymentType,CustomerGroupNotSetForBillOfExchangeProcessing"
				else
					constraint (LocalNewBankTransactionCode.BankTransactionType = "C"
					or		  LocalNewBankTransactionCode.BankTransactionType = "D")
						"BankTransactionCodeMustBeCashPaymentTypeOrBillOfExchangePaymentType"

					if (LocalNewBankTransactionCode.BankTransactionType = "D")
						constraint (LocalNewBankTransactionCode.TransactionOrigin = "R")
							"BankTransactionCodeOriginMustBeAccountsReceivable"

				if (LocalNewBankTransactionCode.BankTransactionType = "C"
				and LocalNewBankTransactionCode.TransactionOrigin = "R")
					if (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.GroupLevelProcessing)
						constraint (ReceivableElectronicFundsTransferNotifyRel exists)
							"ElectronicFundsTransferRecordDoesNotExist;MustBeAddedFirstInCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
						constraint (HasCustomerEFTDraftBank)
							"ElectronicFundsTransferBankDoesNotExist;MustBeAddedFirstInCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
						if (Company != first EFTGroupProcessingCompanyRel.Company
						and Company.AccountingEntity != first EFTGroupProcessingCompanyRel.Company.AccountingEntity)
							constraint (InterEntityEFTRelationRel exists)
								"InterEntityRelationNotDefinedBetweenInvoiceCompany<Company>AndEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Company>"
						if (Company.Currency != first EFTGroupProcessingCompanyRel.Currency)
							LocalCurrencyRelationship.FromCurrency	= Company.Currency
							LocalCurrencyRelationship.ToCurrency		= first EFTGroupProcessingCompanyRel.Currency
							constraint (LocalCurrencyRelationship exist)
								"LocalCurrencyRelationship<Company.Currency>ToEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Currency>DoesNotExist"
							LocalCurrencyWork.FromCurrency					= Company.Currency
							LocalCurrencyWork.BaseAmount.ToCurrency			= first EFTGroupProcessingCompanyRel.Currency
							constraint (LocalCurrencyWork.BaseAmount.IsRateDefined)
								"CurrencyRateDoesNotExistBetween<Company.Currency>ToEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Currency>InRateTable"

					if (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.CompanyLevelProcessing
					and Company.EFTCalendar entered)
						constraint (HasElectronicFundsTransferNotify)
							"ElectronicFundsTransferRecordDoesNotExist;MustBeAddedFirstInCompanyCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
						constraint (HasCustomerEFTDraftBank)
							"ElectronicFundsTransferBankDoesNotExist;MustBeAddedFirstInCompanyCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"

				for each OpenTransactionsForAPaymentCodeRel
					invoke UpdatePaymentCode each
						invoked.PrmNewBankTransactionCode			= LocalNewBankTransactionCode

		CreatePendingAddAllEFTAdjustments	is an Instance Action
			default label is "AddAll"

			Action Rules
				constraint (AllowEFTAdjustmentAdd)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"No_\Pending_\E\F\T_\AdjustmentsTo_\AddForCompanyCustomer"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				invoke EFTAdjustmentAdd OpenElectronicFundsTransferTransactionsRel

		CreatePendingHoldAllEFTAdjustments	is an Instance Action
			default label is "HoldAll"

			Action Rules
				constraint (AvailableForAllEFTAdjustments)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"No_\Pending_\E\F\T_\AdjustmentsTo_\HoldForCompanyCustomer"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				invoke EFTAdjustmentHold OpenElectronicFundsTransferTransactionsRel

		CreatePendingPostponeAllEFTAdjustments	is an Instance Action
			default label is "PostponeAll"

			Action Rules
				constraint (AvailableForAllEFTAdjustments)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"No_\Pending_\E\F\T_\AdjustmentsTo_\PostponeForCompanyCustomer"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				invoke EFTAdjustmentPostpone OpenElectronicFundsTransferTransactionsRel

		CreatePendingDeleteAllEFTAdjustments	is an Instance Action
			default label is "DeleteAll"

			Action Rules
				constraint (AvailableForAllEFTAdjustments)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"No_\Pending_\E\F\T_\AdjustmentsTo_\DeleteForCompanyCustomer"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				invoke EFTAdjustmentDelete OpenElectronicFundsTransferTransactionsRel

		CreatePendingUnselectAllEFTAdjustments	is an Instance Action
			default label is "UnselectAll"

			Action Rules
				constraint (AllowEFTAdjustmentUnselect)	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules
					"No_\Pending_\E\F\T_\AdjustmentsTo_\UnselectForCompanyCustomer"	//IEFIN-66614 Commenting out the "valid when" to help slowness in retrieving lists and adding constraint in Action Rules

				invoke EFTAdjustmentUnselect OpenElectronicFundsTransferTransactionsRel

		ReleaseMyInvoiceObligationGrouping	is an Instance Action
			valid when (HasMyReceivableInvoiceObligationGroup)
			Parameters
				PrmSelectMyRecords						is Boolean
				NewCompany								is a ReceivableCompany
				NewCustomer								is a Customer
				NewInvoice								is AlphaUpper size 22
				NewReceivableProcessLevel				is a ReceivableProcessLevel
				ReceivableReasonType
				NewReceivableReason						is an ApplicationAdjustmentReason
				NewGeneralLedgerDate					is Date
					default label is "NewGlobalLedgerDate"
				NewTermsCode							is a TermsCode
				NewDueDate								is Date
				NewBankTransactionCode					is a BankTransactionCode
				AdditionalAmount						is an InternationalAmount
				AdditionalAmountAccount					is a FinanceCodeBlock
				NewOperator								is like ReceivableOperator
				NewRevalueCurrencyTransactions			is Boolean
				NewBillTo								is a CustomerBillTo

			Parameter Rules
				PrmSelectMyRecords
					default to true

				NewCompany
					default to Company
					initial value is Company
					if (!NationalAccountIndicator.Parent)
						constraint (NewCompany = Company)
							"CannotSelectDifferentCompanyForCustomerThatIsNotANationalAccount"

				NewCustomer
					default to Customer
					initial value is Customer

					if (!NationalAccountIndicator.Parent)
						constraint (NewCustomer = Customer)
							"CannotSelectDifferentCustomerIfCustomerIsNotANationalAccount"

					if (NewCompany != Company
					or  NewCustomer != Customer)
						LocalNationalAccount.NationalAccountGroup.NatCompany	= Company
						LocalNationalAccount.NationalAccountGroup.NatCustomer	= Customer
						LocalNationalAccount.InvoiceAccountGroup.Company		= NewCompany
						LocalNationalAccount.InvoiceAccountGroup.Customer		= NewCustomer
						constraint (LocalNationalAccount exists)
							"NationalAccountRelationshipDoesNotExist"

				NewInvoice

					if (NewInvoice entered)
						LocalCompany					= NewCompany
						if (TotalObligationGroupingAmountByActor > 0)
							LocalTransactionType		= "D"
						else
							LocalTransactionType		= "C"
						LocalInvoice					= NewInvoice
						constraint (!LocalReceivableInvoiceRel exists)
							"MemoAlreadyExists"

						initialize ValidateReceivablePrefix
						ValidateReceivablePrefix.EditReceivableCompany		= NewCompany
						ValidateReceivablePrefix.EditReceivableInvoice		= NewInvoice
						ValidateReceivablePrefix.EditReceivableInvoiceType	= LocalTransactionType
						constraint (ValidateReceivablePrefix.ErrorNumber not entered)
							"<ValidateReceivablePrefix.ErrorMessage>"

				ReceivableReasonType
					default to "AD"
					initial value is "AD"

				NewReceivableReason
					required
					constraint (NewReceivableReason != "CURR")
						"CURRIsAReservedReasonCode"
					constraint (NewReceivableReason.ReceivableAdjustmentReasonType.Grouping)
						"ReasonCodeMustBeGroupingType"


					for each ReceivableInvoiceObligationGroupActorRel
						LocalCompany				= each.Company
						LocalReceivableReason		= NewReceivableReason
						constraint (ReceivableReasonGroupingRel exists)
							"ReasonCodeDoesNotExistForAllSelectedCompanies"

				NewReceivableProcessLevel
					required
						"ProcessLevelRequired"

				NewTermsCode
					if (NewCompany = Company
					and NewCustomer = NewCustomer)
						default to LocalCompanyCustomerRel.DebitCreditMemoTermsCode
					else
					if (NewCustomer entered)
						LocalCompany	= NewCompany
						LocalCustomer	= NewCustomer
						default to LocalCompanyCustomerRel.DebitCreditMemoTermsCode

				NewGeneralLedgerDate
					initial value is current corporate date
					required

				NewDueDate
					if (NewTermsCode entered)
						cannot be entered
							"CannotEnterBothTermsCodeAndDueDate"
					if (NewDueDate entered)
						constraint (NewDueDate >= NewGeneralLedgerDate)
							"DueDateCannotBeLessThanGlobalLedgerDate"

				NewBankTransactionCode
					if (NewCompany = Company
					and NewCustomer = NewCustomer)
						default to BankTransactionCode
					else
					if (NewCustomer entered)
						LocalCompany	= NewCompany
						LocalCustomer	= NewCustomer
						default to LocalCompanyCustomerRel.BankTransactionCode

					if (TotalObligationGroupingAmountByActor <= 0)
						constraint (!NewBankTransactionCode.BankTransactionType.BillOfExchangePayment)
							"CannotCreateDraft;GroupAmountMustBePositive"

					required

				AdditionalAmountAccount
					if (AdditionalAmount entered)
						required
							"AdditionalAmountAccountRequiredIfAdditionalAmountEntered"
					else
						cannot be entered
							"AdditionalAmountAccountCannotBeEnteredIfAdditionalAmountNotEntered"

				NewRevalueCurrencyTransactions
					if (NewCustomer entered)
						LocalCompany	= NewCompany
						LocalCustomer	= NewCustomer
						default to LocalCompanyCustomerRel.RevalueCurrencyTransactions
					else
						default to RevalueCurrencyTransactions

				NewOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= NewOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"
			Action Rules
				invoke ReleaseInvoiceObligationGrouping
					invoked.NewCompany						= NewCompany
					invoked.NewCustomer						= NewCustomer
					invoked.NewInvoice						= NewInvoice
					invoked.NewReceivableProcessLevel		= NewReceivableProcessLevel
					invoked.ReceivableReasonType			= ReceivableReasonType
					invoked.NewReceivableReason				= NewReceivableReason
					invoked.NewGeneralLedgerDate			= NewGeneralLedgerDate
					invoked.NewTermsCode					= NewTermsCode
					invoked.NewDueDate						= NewDueDate
					invoked.NewBankTransactionCode			= NewBankTransactionCode
					invoked.AdditionalAmount				= AdditionalAmount
					invoked.AdditionalAmountAccount			= AdditionalAmountAccount
					invoked.NewOperator						= NewOperator
					invoked.NewRevalueCurrencyTransactions	= NewRevalueCurrencyTransactions
					invoked.NewBillTo						= NewBillTo
					invoked.PrmSelectMyRecords				= true

		LinkToCustomerRepresentative	is an Instance Action
			Action Rules
				if (CustomerRepresentative.LinkedToCompanyCustomer)
					confirmation required
						"TheCustomerRepresentativeIsAlreadyLinkedToACompanyCustomer;WouldYouLikeToContinue?"

				invoke UpdateCompanyCustomer CustomerRepresentativeRel
					invoked.PrmCompany	= Company
					invoked.PrmCustomer	= Customer

		BODDataInitialLoadCompanyCustomerCriteria	is a Set Action
			restricted
			Parameters
				PrmCustomerGroup	is a CustomerGroup
				PrmFromCompany		is a ReceivableCompany
				PrmToCompany		is a ReceivableCompany
				PrmFromCustomer			is a Customer
					context of PrmCustomerGroup
				PrmToCustomer			is a Customer
					context of PrmCustomerGroup
			Parameter Rules

			Instance Selection
				where  (((PrmCustomerGroup entered
				and		 PrmCustomerGroup = Company.CustomerGroupField.CustomerGroup)
				or		 PrmCustomerGroup not entered)
				and	   ((PrmFromCompany entered
				and		 PrmFromCompany <= Company)
				or		 PrmFromCompany not entered)
				and		((PrmToCompany entered
				and		 PrmToCompany >= Company)
				or		 PrmToCompany not entered)
				and		((PrmFromCustomer entered
				and		 PrmFromCustomer <= Customer)
				or		 PrmFromCustomer not entered)
				and		((PrmToCustomer entered
				and		 PrmToCustomer >= Customer)
				or		 PrmToCustomer not entered)
				and		(ActiveStatus.Active))

			Sort Order

			Action Rules

				Instance Rules
					if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
						ActionCode = ActionCode.Create
						include TriggerCompanyCustomerServiceRules



						include TriggerPayFromPartyMasterRules




		SendPayFromPartyMasterNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is PayFromPartyMasterXMLBOD
					bod type is "Sync.PayFromPartyMaster"
					accounting entity is DerivedAccountingEntity
					document id is DerivedBODDocumentID
					variation id is BODVariationID

		TriggerPayFromPartyMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(DerivedCleanDocumentID = "Y")
					LocalUserTemplate = "IONSyncPayFromPartyMaster_CompanyCustomer_CleanDoc_ST"
				else
					LocalUserTemplate = "IONSyncPayFromPartyMaster_CompanyCustomer_ST"
				invoke NativeLPLBODTriggerChecks FSMBODConfigRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "PayFromPartyMaster"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "CompanyCustomer"
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate			= LocalUserTemplate
				LocalNativeLPLBODTrigger = FSMBODConfigRel.NativeLPLBODTrigger
				LocalBODTrigger	= true
				LocalPayFrom = true
				if(Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "PayFromPartyMaster"
							invoked.BODDocumentID			= DerivedBODDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODID					= DerivedPayFromPartyMasterBODID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Customer				= Customer
							invoked.Reference1				= Company
							initialize invoked.Error
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedBODDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODID					= DerivedPayFromPartyMasterBODID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Customer				= Customer
							invoked.Reference1				= Company
							initialize invoked.Error
							initialize invoked.ErrorMessage

					invoke SendPayFromPartyMasterNativeLPL
						resume on error
							Error										= true
							ErrorMessage	 							= error message

					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedPayFromPartyMasterBODID
							invoked.BODXML								= PayFromPartyMasterXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODID									= DerivedPayFromPartyMasterBODID
							invoked.BODXML									= PayFromPartyMasterXMLBOD


		TriggerPayFromPartyMasterBOD	is an Instance Action
			restricted
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					LocalPayFrom = true
					ActionCode = ActionCode.Create
					LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
					include TriggerPayFromPartyMasterRules



		CreatePaymentRequestNoticeInIDM	is an Instance Action
			restricted
			Parameters
				PrmAsOfDate					is Date
				PrmPrintDate				is Date
				PrmCustomer					is a Customer
				PrmIDMPrinter				is an IDMPrinter

			Local Fields

				IDMAttributes

				LocalRecipientEmailAddress		is Alpha 4000
					holds pii

			Action Rules
				LocalAsOfDateIDM	= PrmAsOfDate
				LocalPrintDateIDM	= PrmPrintDate
				LocalCustomer		= PrmCustomer

				if (LocalAsOfDateIDM entered)
					LocalDateFilterIDM = "D"
					increment IDMPaymentRequestNoticeSequenceNumber by 1
				else
				if (LocalPrintDateIDM entered)
					LocalDateFilterIDM = "P"
					increment IDMPaymentRequestNoticeSequenceNumber by 1
				else
					LocalDateFilterIDM = LocalDateFilterIDM.NotPrinted


				IDMGenerateDocument.IDMXMLDefinition.Busclass											= reference to this instance
				IDMGenerateDocument.IDMXMLDefinition.ListName											= "CompanyCustomerForIDM"
				IDMGenerateDocument.IDMXMLDefinition.DocumentName										= "PaymentRequestNotice"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName			= "ReceivablePaymentNoticeDetailDetailFinanceRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "DetailFinanceChargeHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag				= "FinanceChargesInterestRateOverDateRange"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag				= "FinanceChargeInterestRateOverDateRange"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName			= "DetailNoticeListRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName			= "FixedInterestOverDateRangeDetailFinanceCharge"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag				= "FinanceChargeTransactionsA"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag				= "FinanceChargeTransactionA"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName			= "ReceivablePaymentNoticeDetailSecondDetailFinRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName			= "DetailFinanceChargeHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1		= 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag				= "FinanceChargesInterestRateByDate"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag				= "FinanceChargeInterestRateByDate"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].RelationName			= "DetailNoticeListRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListName			= "InterestRatesByDateDetailFinanceCharge"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection1		= 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListTag				= "FinanceChargeTransactionsB"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ItemTag				= "FinanceChargeTransactionB"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].RelationName			= "ReceivablePaymentNoticeNetFinanceHeaderRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListName			= "CompanyCustomerNetFinanceHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].LevelSection1		= 3
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListTag				= "NetFinanceCharges"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ItemTag				= "NetFinanceCharge"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].RelationName			= "ReceivablePaymentNoticeDetailNetFinanceRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListName			= "NetFinanceListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection1		= 3
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListTag				= "NetFinanceChargeTransactions"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ItemTag				= "NetFinanceChargeTransaction"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].RelationName			= "ReceivablePaymentNoticeDetailChargebackRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListName			= "ChargebackHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection1		= 4
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListTag				= "Chargebacks"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ItemTag				= "Chargeback"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].RelationName			= "ChargebackRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListName			= "DetailCBListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection1		= 4
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListTag				= "ChargebackTransactions"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ItemTag				= "ChargebackTransaction"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].RelationName			= "ReceivablePaymentNoticeDetailMemoChargebackRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ListName			= "MemoCBHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].LevelSection1		= 5
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ListTag				= "MemoChargebacks"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[9].ItemTag				= "MemoChargeback"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].RelationName		= "MemoChargebackTransactionDetailsRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ListName			= "MemoCBListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].LevelSection1		= 5
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ListTag				= "MemoChargebackTransactions"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[10].ItemTag				= "MemoChargebackTransaction"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[11].RelationName		= "ReceivablePaymentNoticeDetailRTMNoticeRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[11].ListName			= "RTMHeaderForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[11].LevelSection1		= 6
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[11].ListTag				= "RTMNotices"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[11].ItemTag				= "RTMNotice"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].RelationName		= "ReturnedPaymentRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].ListName			= "ReceivablePaymentNoticeRTMForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].LevelSection1		= 6
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].LevelSection2		= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].ListTag				= "RTMTransactions"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[12].ItemTag				= "RTMTransaction"

				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName	= "Company"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue	= Company
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName	= "Customer"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue	= Customer
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName	= "PrintDate"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeDate	= current corporate date
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName	= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue	= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName	= "CustomerName"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue	= Customer.Name

				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 6
					include IDM.IDMAdditionalAttributes

				IDMGenerateDocument.IDMAttributes		= IDMAttributes
				IDMGenerateDocument.TemplateUniqueId	= Company.PaymentRequestNoticeTemplate.IDMUniqueId
				IDMGenerateDocument.DocumentType		= "FSM_ARPaymentRequestNotice"
				IDMGenerateDocument.FileName			= DerivedPaymentRequestNoticeXMLName + Company.PaymentRequestNoticeTemplate.DerivedOutputFormat

				if (EmailPaymentRequestNotice)
					if (not PaymentRequestNoticeEmailContactsOnly)
						LocalRecipientEmailAddress += EmailAddress

					for each CompanyCustomerContactRel
						if (each.EmailPaymentRequestNotice
						and each.EmailAddress entered)
							if (LocalRecipientEmailAddress entered)
								LocalRecipientEmailAddress += ","
							LocalRecipientEmailAddress += each.EmailAddress

					if (Company.PaymentRequestNoticeIDMEmailTemplate entered)
						IDMGenerateDocument.EmailTemplateUniqueID	= Company.PaymentRequestNoticeIDMEmailTemplate.IDMUniqueId
					else
						IDMGenerateDocument.IDMEmail.Body			= ""

					if (Company.PaymentRequestNoticeIDMEmailSubject entered)
						IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject		= DerivedPaymentRequestNoticeEmailSubject

					IDMGenerateDocument.IDMEmail.From				= PaymentRequestNoticeFromAndReplyToEmail
					IDMGenerateDocument.IDMEmail.To					= LocalRecipientEmailAddress


				if (PrintPaymentRequestNotice)
					if (PrmIDMPrinter entered)
						IDMGenerateDocument.IDMPrinter = PrmIDMPrinter 

				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

				invoke CreateFromGenerateDocument IDMJob
					invoked.Actor				= actor
					invoked.Description			= "Payment Request Notice"
					invoked.IDMGenerateDocument = IDMGenerateDocument




		ValidateVATRegistrationNumber	is an Instance Action
			valid when (PerformVATValidation)
			Action Rules
				ICountryCode			= VATRegistrationCountry
				IVatNumber				= VATRegistrationNumber
				IRequesterCountryCode	= Company.CustomerBusinessGroup.FinanceEnterpriseGroup.TaxConfiguration.VATTaxEntity.VATRegistrationCountry
				IRequesterVatNumber		= Company.CustomerBusinessGroup.FinanceEnterpriseGroup.TaxConfiguration.VATTaxEntity.VATRegistrationNumber
				invoke CheckVatService ValidateVAT
					invoked.SoapRequest			= VatRequestXML
					VATValidation.ResponseXML	= result.SoapResponse
				VATValidation.RequestXML			= VatRequestXML
				VATValidation.OCountryCode			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/countryCode"
				VATValidation.OVatNumber			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/vatNumber"
				VATValidation.ORequestDate			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/requestDate"
				VATValidation.OValid				= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/valid"
				VATValidation.OTraderName			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderName"
				VATValidation.OTraderCompanyType	= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderCompanyType"
				VATValidation.OTraderAddress		= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderAddress"
				VATValidation.ORequestIdentifier	= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/requestIdentifier"
				VATValidation.ValidationDate		= current timestamp
				if (VATValidation.VATValid)
					VATValidation.VATNumberValid		= true
				else
					VATValidation.VATNumberValid		= false


		ValidateCustomerVATRegistration	is a Set Action
			valid when (ActionValidateVAT)

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmARCompany				is a ReceivableCompany
					default label is "ReceivableCompany"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields


			Instance Selection
				where (PrmFinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				and	  ((PrmARCompany entered
				and	   PrmARCompany = Company)
				or	   PrmARCompany not entered)
				and	CompanyCustomer.ActiveStatus.Active
				and	   PerformVATValidation)

			Sort Order
				CompanyCustomer

			Accumulators



			Action Rules
				Empty Set Rules


				Set Rules
					Entrance Rules

					Exit Rules

				CompanyCustomer Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					invoke ValidateVATRegistrationNumber in background

		Anonymize	is an Instance Action	
			restricted
			Action Rules
				SearchName			= Customer
				Contact				= Customer

				initialize PhoneNumber
				initialize TelexNbr
				initialize EDINumber
				initialize AlternateEDINumber
				initialize AlternateEDIType
				initialize FaxNumber
				initialize VATRegistrationNumber
				initialize EmailAddress
				initialize URLAddress
				initialize TwitterID
				initialize SocialNetworkID2
				initialize SocialNetworkID3
				initialize SocialNetworkID4
				initialize SocialNetworkID5

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.Status						= 1
					invoked.AffectedBusinessClass		= "AR2"
					invoked.ReceivableCompany			= Company
					invoked.CustomerGroup				= CustomerGroup
					invoked.Customer					= Customer

		PurgeAuditLog	is an Instance Action	
			restricted
			Action Rules
				invoke purge audit log entries

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.Status						= 2
					invoked.AffectedBusinessClass		= "AR2"
					invoked.ReceivableCompany			= Company
					invoked.CustomerGroup				= CustomerGroup
					invoked.Customer					= Customer

		DisableAutoEmailing is an Instance Action
			restricted
			Local Fields
				LocalDocumentTypes			is Alpha 300
				LocalLastTypeToDisable		is Boolean
			Action Rules

				if (DisabledReceivablesStatementAutoEmail)
					LocalDocumentTypes += "Receivables Statement"

					if (DisabledBasicDunningLetterAutoEmail
					or  DisabledAdvancedDunningLetterAutoEmail
					or	DisabledPaymentRequestNoticeAutoEmail
					or  DisabledBillingInvoiceAutoEmail
					or  DisabledEFTNotificationPrintAutoEmail
					or  DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledBasicDunningLetterAutoEmail)
					LocalDocumentTypes += "Basic Dunning Letter"

					if (DisabledAdvancedDunningLetterAutoEmail
					or	DisabledPaymentRequestNoticeAutoEmail
					or  DisabledBillingInvoiceAutoEmail
					or  DisabledEFTNotificationPrintAutoEmail
					or  DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledAdvancedDunningLetterAutoEmail)
					LocalDocumentTypes += "Advanced Dunning Letter"

					if (DisabledPaymentRequestNoticeAutoEmail
					or  DisabledBillingInvoiceAutoEmail
					or  DisabledEFTNotificationPrintAutoEmail
					or  DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledPaymentRequestNoticeAutoEmail)
					LocalDocumentTypes += "Payment Request Notice"

					if (DisabledBillingInvoiceAutoEmail
					or  DisabledEFTNotificationPrintAutoEmail
					or  DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledBillingInvoiceAutoEmail)
					LocalDocumentTypes += "Billing Invoice"

					if (DisabledEFTNotificationPrintAutoEmail
					or  DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledEFTNotificationPrintAutoEmail)
					LocalDocumentTypes += "EFT Notification Print"

					if (DisabledReceivableInvoiceAutoEmail
					or  DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledReceivableInvoiceAutoEmail)
					LocalDocumentTypes += "Receivable Invoice"

					if (DisabledSubleaseBillingInvoiceAutoEmail
					or  DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "
					
				if (DisabledSubleaseBillingInvoiceAutoEmail)
					LocalDocumentTypes += "Sublease Billing Invoice"

					if (DisabledPaymentReceiptAutoEmail
					or  DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledPaymentReceiptAutoEmail)
					LocalDocumentTypes += "Payment Receipt"

					if (DisabledPrepaymentReceiptAutoEmail)
						LocalLastTypeToDisable = false
					else
						LocalLastTypeToDisable = true
					if (not LocalLastTypeToDisable)
						LocalDocumentTypes += ", "

				if (DisabledPrepaymentReceiptAutoEmail)
					LocalDocumentTypes += "Prepayment Receipt"
					
				confirmation required
					"AutomaticEmailingWillBeDisabledFor_<LocalDocumentTypes>.CustomerContactsEmailSetupWillAlsoBeUpdated.DoYouWantToContinue?"

				for each CompanyCustomerContactRel
					invoke Update each
						if (not EmailReceivablesStatement) 
							invoked.EmailReceivablesStatement 	= false
						if (not EmailBasicDunningLetter) 
							invoked.EmailBasicDunningLetter 	= false
						if (not EmailAdvancedDunningLetter) 
							invoked.EmailAdvancedDunningLetter 	= false
						if (not EmailPaymentRequestNotice) 
							invoked.EmailPaymentRequestNotice 	= false
						if (not EmailBillingInvoice) 
							invoked.EmailBillingInvoice 		= false
						if (not EmailEFTNotificationPrint) 
							invoked.EmailEFTNotificationPrint 	= false
						if (not EmailReceivableInvoice) 
							invoked.EmailReceivableInvoice 		= false
						if (not EmailSubleaseBillingInvoice) 
							invoked.EmailSubleaseBillingInvoice = false
						if (not EmailPaymentReceipt) 
							invoked.EmailPaymentReceipt 		= false
						if (not EmailPrepaymentReceipt) 
							invoked.EmailPrepaymentReceipt 		= false

		GenerateEFTNotificationPrintInIDM is an Instance Action
			restricted
			Parameters
				ParmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				ParmCashManagementGroup		is a CashManagementGroup
				ParmPaymentCode				is a BankTransactionCode
					context of ParmCashManagementGroup
				ParmIDMPrinter				is an IDMPrinter

			Local Fields
				IDMAttributes
				LocalRecipientEmailAddress		is Alpha 4000
					holds pii

			Action Rules
				LocalPaymentCode   = ParmPaymentCode
				LocalPrintDateIDM  = current corporate date

				initialize IDMGenerateDocument

				IDMGenerateDocument.IDMXMLDefinition.Busclass									 = reference to this instance
				IDMGenerateDocument.IDMXMLDefinition.ListName									 = "EFTNotificationPrintListforIDM"
				IDMGenerateDocument.IDMXMLDefinition.DocumentName								 = "EFTNotificationPrint"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName	 = "ElectronicFundsTransferTransactionPreNotifRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName	 = "EFTNotificationPrintLinesForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1 = 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag		 = "PreNotifLines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag		 = "PreNotifLine"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName	 = "ElectronicFundsTransferTransactionFinalNotifRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName	 = "EFTNotificationPrintLinesForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1 = 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag		 = "FinalNotifLines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag		 = "FinalNotifLine"

				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName	= "Company"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue	= Company
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName	= "Customer"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue	= Customer
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName	= "ReportDate"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeDate	= LocalPrintDateIDM
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName	= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue	= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName	= "CustomerName"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue	= Customer.Name


				IDMGenerateDocument.IDMAttributes								= IDMAttributes

				if (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.GroupLevelProcessing)
					IDMGenerateDocument.TemplateUniqueId = Company.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.IDMUniqueId
					IDMGenerateDocument.FileName		 = DerivedFileName + Company.CustomerGroupField.CustomerGroup.EFTNotificationPrintIDMTemplate.DerivedOutputFormat
				else
					IDMGenerateDocument.TemplateUniqueId = Company.EFTNotificationPrintIDMTemplate.IDMUniqueId
					IDMGenerateDocument.FileName		 = DerivedFileName + Company.EFTNotificationPrintIDMTemplate.DerivedOutputFormat

				if (ParmIDMPrinter entered)
					IDMGenerateDocument.IDMPrinter	 = ParmIDMPrinter 

				if (EmailEFTNotificationPrint)
					if (not EFTNotificationPrintEmailContactsOnly)
						LocalRecipientEmailAddress += EmailAddress

					for each CompanyCustomerContactRel
						if (each.EmailEFTNotificationPrint
						and each.EmailAddress entered)
							if (LocalRecipientEmailAddress entered)
								LocalRecipientEmailAddress += ","
							LocalRecipientEmailAddress += each.EmailAddress

					if (Company.EFTNotificationPrintIDMEmailTemplate entered)
						IDMGenerateDocument.EmailTemplateUniqueID	= Company.EFTNotificationPrintIDMEmailTemplate.IDMUniqueId
					else
						IDMGenerateDocument.IDMEmail.Body			= ""

					if (Company.EFTNotificationPrintIDMEmailSubject entered)
						IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEFTNotificationPrintEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject		= DerivedEFTNotificationPrintEmailSubject

					IDMGenerateDocument.IDMEmail.From				= EFTNotificationPrintFromAndReplyToEmail
					IDMGenerateDocument.IDMEmail.To					= LocalRecipientEmailAddress

				IDMGenerateDocument.DocumentType		 = "FSM_EFTNotificationPrint"
				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

				invoke CreateFromGenerateDocument IDMJob
					invoked.Actor				= actor
					invoked.Description			= "EFT Notification Print"
					invoked.IDMGenerateDocument = IDMGenerateDocument


		CustomerAddCreditLimitChangeAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPARel.Enable)
					if(FSMBODConfigurationDetailPARel.Enable)
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "CREDITANALYST"
							invoked.PrmMainXML 		= CreditAddCreditLimitChangeAlertXML
							invoked.PrmDescription	= CreditAddCreditLimitChangeDescription
							invoked.PrmBODID		= DerivedBODID


		TriggerCustomerPartyMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
				PrmTriggerFrom is Alpha size 100
				RestartFlag is Boolean
			Action Rules
				LocalTriggerFrom = PrmTriggerFrom
				if(DerivedCleanDocumentID = "Y")
					if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "BR")
						LocalMainUserTemplate = "IONSyncCustomerPartyMaster_BR_CleanDoc_ST"
					else
						LocalMainUserTemplate = "IONSyncCustomerPartyMaster_CleanDoc_ST"
				else
				if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "BR")
					LocalMainUserTemplate = "IONSyncCustomerPartyMaster_BR_CompanyCustomer_ST"
				else
					LocalMainUserTemplate = "IONSyncCustomerPartyMaster_CompanyCustomer_ST"
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "CustomerPartyMaster"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCustomerBusinessGroup	= Company.CustomerBusinessGroup
					invoked.PrmMainUserTemplate			= LocalMainUserTemplate
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODTrigger = true
				LocalPayFrom = true
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "CustomerPartyMaster"
							invoked.BODDocumentID			= DerivedBODDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Customer				= Customer
							invoked.Reference1				= Company
							invoked.Reference2				= CompanyCustomer
							invoked.Reference3				= LocalTriggerFrom
							initialize invoked.Error
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedBODDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Customer				= Customer
							invoked.Reference1				= Company
							invoked.Reference2				= CompanyCustomer
							invoked.Reference3				= LocalTriggerFrom
							initialize invoked.Error
							initialize invoked.ErrorMessage

					invoke SendSyncCustomerPartyMasterLPLBOD
						resume on error
						   	Error								= true
							ErrorMessage	 					= error message
					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= CompanyCustomerXMLBOD
							invoked.BODID								= DerivedBODFormattedId
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status						= 3
							invoked.CloseDate					= system current timestamp
							invoked.BODXML						= CompanyCustomerXMLBOD
							invoked.BODID						= DerivedBODFormattedId

		SendSyncCustomerPartyMasterLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is CompanyCustomerXMLBOD
					bod type is "Sync.CustomerPartyMaster"
					accounting entity is DerivedAccountingEntity
					document id is DerivedBODDocumentID
					variation id is	BODVariationID
					location is	Derivedlocation
					
		InvoicesPaymentsCurrentBalances is an Instance Action
			restricted
			Parameters
				PrmCurrentBalance   is like InternationalAmount
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
							default label is "Update and Report"
				PrmResult          is a ReceivablesJobResult
			Action Rules
				TemporaryCurrentBalance               += PrmCurrentBalance
				
				if (PrmUpdate.UpdateAndReport)
					invoke Create  CompanyCustomerBalanceActivity  
						invoked.Company				= Company
						invoked.Customer			= Customer
						invoked.BalanceType			= 12
						invoked.Balance				= CurrentBalance
						invoked.ChangeAmount		= PrmCurrentBalance - CurrentBalance
						invoked.UpdatedBalance		= PrmCurrentBalance
						invoked.Reference			= "TransactionConversion"

					CurrentBalance  += PrmCurrentBalance
					
					if (NationalAccountIndicator.Parent)
						if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
							invoke UpdateCurrentBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= PrmCurrentBalance
						else
							CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate						= current corporate date
							CurrencyWork.TransactionAmount					= PrmCurrentBalance
							CurrencyWork.FromCurrency						= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency
							invoke UpdateCurrentBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
					if (NationalAccountIndicator.Child)
						LocalNationalCompany = DerivedNationalCompany
						LocalNationalCustomer = DerivedNationalCustomer
						if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
							invoke UpdateCurrentBalance  NationalAccountBalanceParentRel
								invoked.ChangeAmount						= PrmCurrentBalance
						else
							CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate						= current corporate date
							CurrencyWork.TransactionAmount					= PrmCurrentBalance
							CurrencyWork.FromCurrency						= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency
							invoke UpdateCurrentBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
				
		
		DraftBalances is an Instance Action
			restricted
			Parameters
				PrmLocalDraftBal         is an InternationalAmount
				PrmResult                is a ReceivablesJobResult
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
							default label is "Update and Report"
			Action Rules
				TemporaryCurrentBalance               += PrmLocalDraftBal
				if (PrmUpdate.UpdateAndReport)
					BillOfExchangeBalance = PrmLocalDraftBal
						
					if (NationalAccountIndicator.Parent)
						if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
							invoke UpdateDraftBalance NationalAccountBalanceRel
								invoked.ChangeAmount		                = PrmLocalDraftBal
						else
							CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate						= current corporate date
							CurrencyWork.TransactionAmount					= PrmLocalDraftBal
							CurrencyWork.FromCurrency						= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency
							invoke UpdateDraftBalance NationalAccountBalanceRel
								invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
						if (NationalAccountIndicator.Child)
							LocalNationalCompany = DerivedNationalCompany
							LocalNationalCustomer = DerivedNationalCustomer
							if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
								invoke UpdateDraftBalance NationalAccountBalanceParentRel
									invoked.ChangeAmount		                = PrmLocalDraftBal
							else
								CurrencyWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyWork.ExchangeDate						= current corporate date
								CurrencyWork.TransactionAmount					= PrmLocalDraftBal
								CurrencyWork.FromCurrency						= Company.Currency
								CurrencyWork.BaseAmount.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency
								invoke UpdateDraftBalance NationalAccountBalanceParentRel
									invoked.ChangeAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
									
		CustomerBalanceConversion is a Set Action
			restricted
			Parameters
				PrmCustomerGroup		is a CustomerGroup
				PrmDetailOption			is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
							default label is "Update and Report"
				PrmChangesOnly			is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"

				PrmCustomerRange        is a CustomerRange
				PrmResult               is like ReceivablesJobResult
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
			Local Fields
				LocalOpenAmount			is an InternationalAmount
				LocalWorkAmount			is an InternationalAmount
				LocalWorkAmount2		is an InternationalAmount
				LocalCurrentBalance		is an InternationalAmount
				LocalCustomerGroupAmt	is an InternationalAmount
				LocalDraftBal			is an InternationalAmount
				LocalGroupDraft			is an InternationalAmount
				SkipRecord				is Boolean
				LocalCompanyBalance     is an InternationalAmount
			Parameter Rules








			Instance Selection
				where	((Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup)
				and (PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
				and (PrmCustomerRange	not entered
				or	  Customer within PrmCustomerRange)
				and (PrmNbrOfRunGroups <= 1
				or  (Customer % PrmNbrOfRunGroups) = PrmRunGroup))

			Sort Order is primary
			

			Action Rules
				Company Set Rules
					Exit Rules

						invoke UpdateTotal ReceivableCompanyRel
							invoked.PrmCompanyTotal            = LocalCompanyBalance
							invoked.PrmBalanceConversionResult = PrmResult
						initialize LocalCompanyBalance
				Set Rules
				Instance Rules
					initialize LocalCurrentBalance
					initialize LocalDraftBal
					initialize LocalCustomerGroupAmt
					initialize TemporaryCurrentBalance
					initialize TemporaryBillOfExchangeBalance
















































































































					

			 
		RefreshData is an Import Action	
            Local Fields
                RepSet is a ReplicationSet
            Action Rules
                RepSet = "FSM_COLUMNAR_AR_ST"
                invoke Replicate RepSet	

		UpdateToEmailOptionInstance is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (HasEmailBillingInvoiceContactExist)
					BillingInvoiceEmailOption = BillingInvoiceEmailOption.ContactsOnly

		UpdateIDMToEmailOption is a Set Action
			default label is untranslatable
			restricted
			Instance Selection
				where (BillingInvoiceEmailContactsOnly)

			Action Rules
				Set Rules
					Exit Rules
						invoke UpdateConversionIDMToEmailOption CompanyCustomerConversion

				Instance Rules
					invoke UpdateToEmailOptionInstance
						resume on error
		
		InitializeBalance is a Set Action
			restricted	
			Parameters
				PrmCustomerGroup		is a CustomerGroup	
				PrmCustomerRange        is a CustomerRange
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
				PrmNumberThreads        is Numeric 3
				PrmResult               is a ReceivablesJobResult
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
							default label is "Update and Report"	
			Instance Selection
				where	((Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup)
				and (PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
				and (PrmCustomerRange	not entered
				or	  Customer within PrmCustomerRange)
				and (PrmNbrOfRunGroups <= 1
				or  (Customer % PrmNbrOfRunGroups) = PrmRunGroup))
			
			Action Rules
				Instance Rules
					initialize TemporaryCurrentBalance
					initialize TemporaryBillOfExchangeBalance
					TemporaryBillOfExchangeBalance = CurrentBalance + BillOfExchangeBalance

					if (PrmUpdate.UpdateAndReport)
						initialize CurrentBalance
						initialize BillOfExchangeBalance
		
		ComapnyTotals  is a Set Action
			restricted	
			Parameters
				PrmCustomerGroup		is a CustomerGroup	
				PrmCustomerRange        is a CustomerRange
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
				PrmNumberThreads        is Numeric 3
				PrmResult               is a ReceivablesJobResult
				PrmChangesOnly			is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				
			Local Fields
				LocalWorkAmount			is an InternationalAmount
				LocalWorkAmount2		is an InternationalAmount
				LocalCurrentBalance		is an InternationalAmount
				LocalCompanyBalance     is like InternationalAmount
			Instance Selection
				where	((Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup)
				and (PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
				and (PrmCustomerRange	not entered
				or	  Customer within PrmCustomerRange)
				and (PrmNbrOfRunGroups <= 1
				or  (Company % PrmNbrOfRunGroups) = PrmRunGroup))
			
			Sort Order is primary

			Action Rules
				Company Set Rules
					Exit Rules
						invoke UpdateTotal ReceivableCompanyRel
							invoked.PrmCompanyTotal            = LocalCompanyBalance
							invoked.PrmBalanceConversionResult = PrmResult
						initialize LocalCompanyBalance
			
				Instance Rules
					LocalWorkAmount      = TemporaryBillOfExchangeBalance
					LocalCompanyBalance += TemporaryCurrentBalance

					if (PrmChangesOnly.No
					or (PrmChangesOnly.Yes
					and ((LocalWorkAmount - TemporaryCurrentBalance) != 0)))
						BalanceConversionResult              = PrmResult
						
						
				
		
			    
			
					
