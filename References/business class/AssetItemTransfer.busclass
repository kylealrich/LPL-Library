AssetItemTransfer is a BusinessClass
    owned by am
    prefix is ITR
    classic name is AMASTITTRF

    Ontology
        symbolic key is AssetItemTransfer
            classic set name is ITRSET1
            classic name for AssetTransfer is PROCESS-SEQ
            classic name for AssetItem is SEQ-NUMBER

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex


    Persistent Fields

        ToAssetAndItem
            classic name for ToAssetAndItem.ToAssetItem is TO-SEQ-NUMBER
        TransferDate                is Date
        TransferType                is AlphaUpper size 1
            States
                IntraCompany value is "T"
                InterCompany value is "I"
        ItemNumber                  is an AssetItemNumber
            classic name is ITEM-NBR
        Description
        PurchaseDate                is Date
        ItemQuantity
        ToItemQuantity              is an ItemQuantity
            classic name is TO-IT-QUANTITY
        BaseItemCost                is an InternationalAmount
            classic name is ITEM-COST-BASE
                precision is Asset.BaseNumberOfDecimals
        FromBaseItemCost            is an InternationalAmount
            classic name is FR-IT-CST-BASE
                precision is Asset.BaseNumberOfDecimals
        ToBaseItemCost              is an InternationalAmount
            classic name is TO-IT-CST-BASE
                precision is ToBaseNumberOfDecimals
        BaseItemTax                 is an InternationalAmount
            classic name is ITEM-TAX-BASE
                precision is Asset.BaseNumberOfDecimals
        FromBaseItemTax             is an InternationalAmount
            classic name is FR-IT-TAX-BASE
                precision is Asset.BaseNumberOfDecimals
        ToBaseItemTax               is an InternationalAmount
            classic name is TO-IT-TAX-BASE
                precision is ToBaseNumberOfDecimals
        TransactionItemCost         is an InternationalAmount
            classic name is ITEM-COST-TRAN
                precision is Asset.TransactionNumberOfDecimals
        ToTransactionItemCost       is an InternationalAmount
            classic name is TO-IT-CST-TRAN
        TransactionItemTax          is an InternationalAmount
            classic name is ITEM-TAX-TRAN
                precision is Asset.TransactionNumberOfDecimals
        ToTransactionItemTax        is an InternationalAmount
            classic name is TO-IT-TAX-TRAN
        BaseNumberOfDecimals
            classic name is BASE-ND
        ToBaseNumberOfDecimals      is a BaseNumberOfDecimals
            classic name is TO-BASE-ND
        TransactionNumberOfDecimals is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        PONumber
            classic name is PO-NBR
        PORelease
        POCode
        Vendor
        VendorName
        Invoice
        Suffix
		PayablesInvoice
        DistributionSequence
            classic name is DIST-SEQ-NBR
        ModelNumber
        SerialNumber
        Project						is a FinanceCodeBlockProjectOnly
            classic name is ACTIVITY
        BarCode                     is an AssetBarCode
        LocationDetail              is an AssetLocationDetail
            classic name is LOC-DTL
        ToLocationDetail            is AlphaUpper size 14
            classic name is TO-LOC-DTL


	
	Transient Fields
		TransferQuantityParameter 	is an ItemQuantity
        
	Local Fields
		LocalLastPurchaseDate		is Date
		LocalOriginalItemQuantity	is like ItemQuantity

		LocalQuantityDifference		is like ItemQuantity
		LocalBaseCostDifference		is an InternationalAmount
		LocalBaseTaxDifference		is an InternationalAmount
		LocalTranCostDifference		is an InternationalAmount
		LocalTranTaxDifference		is an InternationalAmount
		ToBookTranCostDifference 	is an InternationalAmount
		ToBookTransactionItemCost	is an InternationalAmount
		NewAssetItem				is an AssetItem view
		SavedAssetItem				is a AssetItem 
		LocalRequiredBook			is a Book
		LocalBook					is a Book

		CurrencyWork				is a FromCurrencyExchangeGroup
		LocalFromCurrency 			is a Currency
		LocalToCurrency				is a Currency	
		LocalExchangeDate			is an ExchangeDate
		LocalCurrencyTable			is a CurrencyTable
		LocalPercentageImpairment	is a Percent
		LocalAccountingEntity		is like AccountingEntity
		LocalAccountingUnit			is like AccountingUnit
		LocalFund 					is an AssetFundField
		LocalAsset					is like Asset
		LocalAssetItem				is like AssetItem
		FundTransactionAmount		is like InternationalAmount	
		LocalTransactionAmount		is like InternationalAmount			
		AllocatedAmount				is like InternationalAmount
		FundAmount					is like InternationalAmount
		LocalPercentContribution	is Percent size 9.6
		AllocatedPercent			is Percent size 9.6
		LocalAssetBook				is a Book
		LocalProject						is like Project
  		LocalFinanceDimension1				is like FinanceDimension1
  		LocalFinanceDimension2				is like FinanceDimension2
  		LocalFinanceDimension3				is like FinanceDimension3
  		LocalFinanceDimension4				is like FinanceDimension4
  		LocalFinanceDimension5				is like FinanceDimension5
   		LocalFinanceDimension6				is like FinanceDimension6
   		LocalFinanceDimension7				is like FinanceDimension7 		 		  		
  		LocalFinanceDimension8				is like FinanceDimension8
  		LocalFinanceDimension9				is like FinanceDimension9
  		LocalFinanceDimension10				is like FinanceDimension10
  		FundCount							is Numeric 3
  		F1									is Numeric 3
  		LocalAssetItemLocationDetail		is like AssetLocationDetail
		BypassActiveCodeBlockEdit 
  		
    Sets

        Set2
            indexed
            Sort Order
				FinanceEnterpriseGroup
                Asset
                AssetItem
                AssetTransfer


                
	Field Rules
		TransferDate
			default to AssetTransfer.TransferDate

		TransferType
			default to AssetTransfer.TransferType

		ItemNumber
			initial value is AssetItem.ItemNumber
			default to AssetItem.ItemNumber

		Description
			initial value is AssetItem.Description
			default to AssetItem.Description

		PurchaseDate
			initial value is AssetItem.PurchaseDate
			default to AssetItem.PurchaseDate

		ItemQuantity
			initial value is AssetItem.ItemQuantity
			default to AssetItem.ItemQuantity

		TransactionItemCost
			initial value is AssetItem.TransactionItemCost
			default to AssetItem.TransactionItemCost

		ToTransactionItemCost
			initial value is AssetItem.TransactionItemCost
			default to AssetItem.TransactionItemCost

		TransactionItemTax
			initial value is AssetItem.TransactionItemTax
			default to AssetItem.TransactionItemTax

		LocationDetail
			initial value is AssetItem.LocationDetail
			default to AssetItem.LocationDetail

		ToLocationDetail
			initial value is AssetTransfer.AssetTransferTo.ToAssetLocationDetail
			default to AssetTransfer.AssetTransferTo.ToAssetLocationDetail

		BaseNumberOfDecimals
			initial value is AssetTransfer.BaseNumberOfDecimals
			default to AssetTransfer.BaseNumberOfDecimals

		ToBaseNumberOfDecimals
			initial value is AssetTransfer.ToBaseNumberOfDecimals
			default to AssetTransfer.ToBaseNumberOfDecimals

		TransactionNumberOfDecimals
			initial value is AssetTransfer.TransactionNumberOfDecimals
			default to AssetTransfer.TransactionNumberOfDecimals

	Conditions
		TransferQuantityError	
			restricted
			when (AssetTransfer.TransferQuantity not = SumOfAssetTransferItems)
			
		TransferFundsExist
			restricted
			when (Asset.FundOverride and AssetItemTransferFundsRel exists)
			
		DisplayFunds
			restricted
			when (Asset.FundAccounting
			and Asset.FundOverride = false)

		DisplayItemFundLink
			when (Asset.FundAccounting
			and !Asset.FundOverride
			and not Asset.AssetType.AllocateDepreciationExpense
			and AssetItemTransferFundsRel exists)	
			
		FundAllocationComplete
			restricted
			when (sum AssetItemTransferFundsRel.PercentContribution = 1)			
			
	Derived Fields	
		SumOfAssetTransferItems is a DerivedField
			type is Numeric 8 
			return (sum AssetItemTransferRel.ToItemQuantity)

		SumOfItemFundTransfers is a DerivedField
			type is like InternationalAmount
			return (sum AssetItemTransferFundsRel.TransactionAmount)
						
	Relations
		RequiredCurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set6
				related.Company	= Asset.Company
		
		FromBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= LocalBook
			Instance Selection
				where (related.PostingBook	
				and related.Book.Ledger			= LocalBook.Ledger)		

		FromNonPostingBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= LocalBook
			Instance Selection
				where (related.Book.Ledger		= LocalBook.Ledger
				and (!related.PostingBook))
			
		AssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= Asset
				
		ToAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= ToAssetAndItem.ToAsset
				related.Book						= AssetBookTransferRel.ToBook

		ToRequiredAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= ToAssetAndItem.ToAsset
				related.Book						= LocalRequiredBook
				
		NewAssetItemRel
			one-to-one relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= ToAssetAndItem.ToAsset
				related.AssetItem					= AssetItem
				
		AssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= ToAssetAndItem.ToAsset
				
		AssetItemTransferRel
			classic name is AMASTITTRF
			one-to-many relation to AssetItemTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset 						= Asset
				related.AssetTransfer				= AssetTransfer	

		AssetBookTransferRel
			one-to-one relation to AssetBookTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset 						= Asset
				related.AssetTransfer				= AssetTransfer	
				related.Book						= LocalBook
		
		AssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.AssetImpairment				= Asset.LastAssetImpairment
				related.Book						= LocalBook
	
		ToAssetImpairmentRel
			one-to-one relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= AssetTransfer.AssetTransferTo.ToAsset
				related.AssetImpairment			= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
		
		ToAssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= AssetTransfer.AssetTransferTo.ToAsset
				related.AssetImpairment				= AssetTransfer.AssetTransferTo.ToAsset.LastAssetImpairment
				related.Book						= AssetBookTransferRel.ToBook
		
		AssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset		
				related.RecordType					= 0	
		
		LocalAssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund	
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= LocalAsset	
				related.RecordType					= 0
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10
										
		LocalAssetItemFundRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset	 					= LocalAsset
				related.RecordType					= 0
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10
				related.AssetItem					= LocalAssetItem		
						
		AssetItemFundRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset						= Asset 
				related.RecordType					= 0 
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10				
				related.AssetItem					= AssetItem	

		AssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
                related.Asset						= Asset
                related.AssetItem					= AssetItem
				related.RecordType					= 0

               		
		ToAssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund	
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= AssetTransfer.AssetTransferTo.ToAsset	
				related.RecordType					= 0
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10	
													
		ToAssetItemFundRel 
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset	 					= AssetTransfer.AssetTransferTo.ToAsset		
				related.RecordType					= 0	
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10								
				related.AssetItem					= AssetItem
		
				
		AssetItemTransferFundRel
			one-to-one relation to AssetItemTransferFund
			Field Mapping uses ByAssetItemTransferFund
				related.Asset	 					= Asset	
				related.AssetItem					= AssetItem				
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit
				related.Project						= LocalProject
				related.FinanceDimension1			= LocalFinanceDimension1
				related.FinanceDimension2			= LocalFinanceDimension2
				related.FinanceDimension3			= LocalFinanceDimension3
				related.FinanceDimension4			= LocalFinanceDimension4
				related.FinanceDimension5			= LocalFinanceDimension5				
				related.FinanceDimension6			= LocalFinanceDimension6					
				related.FinanceDimension7			= LocalFinanceDimension7
				related.FinanceDimension8			= LocalFinanceDimension8
				related.FinanceDimension9			= LocalFinanceDimension9				
				related.FinanceDimension10			= LocalFinanceDimension10								

		AssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses ByAssetItemTransferFund
				related.Asset	 					= Asset		
				related.AssetItem					= AssetItem
		
		ToAssetTransactionRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.Asset                        = AssetTransfer.AssetTransferTo.ToAsset
                related.Book                        = LocalAssetBook
            Instance Selection
                where (related.TransactionStatus.Unreleased
                and related.AssetProcess.Transfer)
    
        ToAssetBookTransactionRel
            one-to-many relation to AssetBookTransaction
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup        = FinanceEnterpriseGroup
                related.Asset                        = AssetTransfer.AssetTransferTo.ToAsset
                related.Book                        = LocalAssetBook
            Instance Selection
                where (related.TransactionStatus.Unreleased
                and related.AssetProcess.Transfer)
						
		AssetItemLocationDetailRel
			one-to-one relation to AssetLocationDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetLocation			= AssetTransfer.AssetTransferTo.ToAssetLocation
				related.AssetLocationDetail		= LocalAssetItemLocationDetail
				
	Rule Blocks
		CalculateCosts
			if (AssetTransfer.FullTransfer)
				FromBaseItemCost		= BaseItemCost
				ToBaseItemCost			= BaseItemCost
				FromBaseItemTax			= BaseItemTax
				ToBaseItemTax			= BaseItemTax
				ToTransactionItemCost	= TransactionItemCost
				ToTransactionItemTax	= TransactionItemTax
			else
				if (AssetItem.ItemQuantity entered
				and AssetItem.BaseItemCost entered)
					FromBaseItemCost = ToItemQuantity / AssetItem.ItemQuantity * AssetItem.BaseItemCost
				else
					initialize FromBaseItemCost

				if (AssetItem.ItemQuantity entered
				and AssetItem.BaseItemTax entered)
					FromBaseItemTax = ToItemQuantity / AssetItem.ItemQuantity * AssetItem.BaseItemTax
				else
					initialize FromBaseItemTax

				if (AssetItem.ItemQuantity entered
				and AssetItem.TransactionItemCost entered)
					ToTransactionItemCost = ToItemQuantity / ItemQuantity * TransactionItemCost
				else
					initialize ToTransactionItemCost

				if (AssetItem.ItemQuantity entered
				and AssetItem.TransactionItemTax entered)
					ToTransactionItemTax = ToItemQuantity / AssetItem.ItemQuantity * AssetItem.TransactionItemTax
				else
					initialize ToTransactionItemTax

			if (AssetTransfer.Currency = AssetTransfer.AssetTransferTo.ToCurrency)
				ToBaseItemCost	= FromBaseItemCost
				ToBaseItemTax	= FromBaseItemTax

		ToBookCurrencyExchange
			if (each.Book.CurrencyTable entered)
				LocalCurrencyTable	= each.Book.CurrencyTable
			else
				LocalCurrencyTable	= Asset.CurrencyTable
			if (AssetTransfer.ItemTotalTransactionCost entered)
				CurrencyWork.TransactionAmount				= ToTransactionItemCost
	         	CurrencyWork.FromCurrency					= LocalFromCurrency
				CurrencyWork.BaseAmount.ToCurrency			= LocalToCurrency
				LocalExchangeDate							= AssetTransfer.TransferDate
				ToBookTransactionItemCost					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				ToBookTransactionItemCost = ToTransactionItemCost
			if (LocalTranCostDifference entered)
				CurrencyWork.TransactionAmount				= LocalTranCostDifference
	         	CurrencyWork.FromCurrency					= LocalFromCurrency
				CurrencyWork.BaseAmount.ToCurrency			= LocalToCurrency
				LocalExchangeDate							= AssetTransfer.TransferDate
				ToBookTranCostDifference					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				ToBookTranCostDifference 					= LocalTranCostDifference

		CreateItemTransferFunds   
			initialize AllocatedAmount
			initialize AllocatedPercent
			initialize F1 
			FundCount								= instance count of AssetItemFundsRel
			for each AssetItemFundsRel
				F1 									+= 1				
				LocalAccountingEntity				= each.AccountingEntity
				LocalAccountingUnit					= each.AccountingUnit
				LocalProject						= each.Project
				LocalFund							= each.Fund
		  		LocalFinanceDimension1				= each.FinanceDimension1
		  		LocalFinanceDimension2				= each.FinanceDimension2
		  		LocalFinanceDimension3				= each.FinanceDimension3
		  		LocalFinanceDimension4				= each.FinanceDimension4
		  		LocalFinanceDimension5				= each.FinanceDimension5
		   		LocalFinanceDimension6				= each.FinanceDimension6
		   		LocalFinanceDimension7				= each.FinanceDimension7 		 		  		
		  		LocalFinanceDimension8				= each.FinanceDimension8
		  		LocalFinanceDimension9				= each.FinanceDimension9
		  		LocalFinanceDimension10				= each.FinanceDimension10	
		  		LocalPercentContribution			= each.PercentContribution	
				invoke CreateFromItem AssetItemTransferFundRel
					invoked.AssetTransfer				= AssetTransfer
					if (LocalQuantityDifference > 0)
						if (F1 < FundCount)
							FundAmount					= (ToTransactionItemCost * LocalPercentContribution)
							invoked.TransactionAmount	= FundAmount
							invoked.PercentContribution = LocalPercentContribution
							AllocatedAmount				+= FundAmount	
							AllocatedPercent			+= LocalPercentContribution
						else
							invoked.TransactionAmount	= (ToTransactionItemCost - AllocatedAmount)
							invoked.PercentContribution = (1 - AllocatedPercent)
					fill in fields from each			

	Actions
		Create is a Create Action


			Entrance Rules
				LocalOriginalItemQuantity = AssetItem.ItemQuantity	
			Action Rules
				BypassActiveCodeBlockEdit = true
				include CalculateCosts
				if (AssetTransfer.PartialTransfer)
					if (AssetItem.ItemQuantity != ToItemQuantity)
						if (PurchaseDate > LocalLastPurchaseDate)
							LocalLastPurchaseDate	= PurchaseDate

						LocalQuantityDifference	= AssetItem.ItemQuantity - ToItemQuantity
						LocalBaseCostDifference	= AssetItem.BaseItemCost - FromBaseItemCost
						LocalBaseTaxDifference	= AssetItem.BaseItemTax - FromBaseItemTax
						LocalTranCostDifference	= AssetItem.TransactionItemCost - ToTransactionItemCost
						LocalTranTaxDifference	= AssetItem.TransactionItemTax - ToTransactionItemTax
						invoke UpdateFromAssetItemTransfer AssetTransfer
							invoked.PrmToTotalItemQuantity			= ToItemQuantity
							invoked.PrmToItemTotalBaseCost			= ToBaseItemCost
							invoked.PrmToItemTotalBaseTax			= ToBaseItemTax 
							invoked.PrmToItemTotalTransactionCost	= ToTransactionItemCost
							invoked.PrmToItemTotalTransactionTax	= ToTransactionItemTax

						invoke UpdateFromTransfer AssetItem
							invoked.PrmItemQuantity			= ToItemQuantity * -1
							invoked.PrmBaseItemCost			= FromBaseItemCost * -1
							invoked.PrmBaseItemTax			= FromBaseItemTax * -1
							invoked.PrmTransactionItemCost	= ToTransactionItemCost * -1
							invoked.PrmTransactionItemTax	= ToTransactionItemTax * -1
							initialize invoked.PrmUpdateLocationDetail

						for each Asset.AssetBook set
							LocalBook = each.Book
							if (!each.Disposed)
								LocalFromCurrency 	= Asset.Currency
								if (each.Book.PostCurrency.Book)
									LocalToCurrency		= each.Book.Currency
								else 
									LocalToCurrency 	= Asset.Currency								
								if (LocalFromCurrency 	not = LocalToCurrency)
									include ToBookCurrencyExchange
								else
									ToBookTransactionItemCost	= ToTransactionItemCost
								if (AssetTransfer.TransferType.InterCompany
								and !(FromBookInToCompanyRel exists
								or FromNonPostingBookInToCompanyRel exists))
									if (!AssetBookTransferRel exists)
										invoke InterCompanyCreate AssetBookTransfer
											fill in fields from each
											invoked.Asset			= Asset
											invoked.AssetTransfer	= AssetTransfer
											invoked.ToAsset			= AssetTransfer.AssetTransferTo.ToAsset
											invoked.Book			= each.Book
									else
										if (AssetBookTransferRel.ToBook entered)
											invoke UpdateFromTransfer AssetBookTransferRel
								else
									if (!AssetBookTransferRel exists)
										invoke Create AssetBookTransfer
											fill in fields from each
											invoked.Asset			= Asset
											invoked.AssetTransfer	= AssetTransfer
											invoked.ToAsset			= AssetTransfer.AssetTransferTo.ToAsset


									 		invoked.ToBook			= each.Book
											invoked.ToBookCurrency	= each.Book.Currency
											invoked.ToBasis			= AssetBookTransferRel.ToBasis
									else
										invoke UpdateFromTransfer AssetBookTransferRel







						if (LocalQuantityDifference > 0)
							invoke CreateFromTransfer AssetItem
								assign result to NewAssetItem
								fill in fields from AssetItem
								invoked.AdjustmentDate		= AssetTransfer.TransferDate
								invoked.Asset				= AssetTransfer.AssetTransferTo.ToAsset
								invoked.ItemQuantity		= ToItemQuantity
								if (AssetTransfer.AssetTransferTo.ToAssetCompany.Currency != AssetTransfer.Currency)
									CurrencyWork.TransactionAmount				= ToTransactionItemCost
						         	CurrencyWork.FromCurrency					= AssetTransfer.Currency
									CurrencyWork.BaseAmount.ToCurrency			= AssetTransfer.AssetTransferTo.ToAssetCompany.Currency
									LocalExchangeDate							= Asset.LastAssetItemPurchaseDate
									invoked.TransactionItemCost	= CurrencyWork.BaseAmount.OutputCurrencyAmount
								else
									invoked.BaseItemCost		= ToBaseItemCost
								invoked.BaseItemTax			= ToBaseItemTax
								invoked.TransactionItemCost	= ToTransactionItemCost
								invoked.TransactionItemTax	= ToTransactionItemTax
								initialize invoked.BarCode
								LocalAssetItemLocationDetail		= AssetTransfer.AssetTransferTo.ToAssetLocationDetail
								if(AssetItemLocationDetailRel exists)
									invoked.LocationDetail			= LocalAssetItemLocationDetail
								else
									LocalAssetItemLocationDetail		= AssetItem.LocationDetail
									if (AssetItemLocationDetailRel not exists)
										initialize invoked.LocationDetail

							SavedAssetItem	= NewAssetItem.AssetItem

							ToAssetAndItem.ToAsset		= AssetTransfer.AssetTransferTo.ToAsset
							ToAssetAndItem.ToAssetItem	= SavedAssetItem
					
							for each AssetBookRel
								LocalBook 				= each.Book
								if (!each.Disposed)	
									if (Asset.Currency not 	= each.Book.Currency
									and each.Book.PostCurrency.Book)
										LocalFromCurrency 	= Asset.Currency
										LocalToCurrency		= each.Book.Currency						
										include ToBookCurrencyExchange
									else
										ToBookTransactionItemCost	= ToTransactionItemCost
									LocalPercentageImpairment = ToTransactionItemCost / Asset.ItemTotalTransactionCost
									if (AssetBookTransferRel.ToBook entered)
										if (!ToAssetBookRel exists)
											invoke CreateFromTransfer ToAssetBookRel
												fill in fields from each
													except invoked.CreditBalance
													except invoked.DebitBalance
													except invoked.Company
												invoked.Company 				= AssetTransfer.AssetTransferTo.ToAssetCompany	
												invoked.Asset					= ToAssetAndItem.ToAsset
												if(each.Book.Impairment)
													invoked.Basis				= each.Basis * LocalPercentageImpairment
												else
													invoked.Basis				= AssetBookTransferRel.ToBasis
												invoked.YearToDateDepreciation	= AssetBookTransferRel.ToYearToDateDepreciation
												invoked.LifeToDateDepreciation	= AssetBookTransferRel.ToLifeToDateDepreciation
												invoked.SalvageValue			= AssetBookTransferRel.ToSalvageValue
										else
											invoke UpdateFromTransfer ToAssetBookRel
												if (each.Book.Impairment)
													invoked.PrmBasis		= each.Basis * LocalPercentageImpairment
												else	
													if (AssetBookTransferRel.Currency != AssetBookTransferRel.ToBookCurrency)
														CurrencyWork.TransactionAmount				= ToBookTransactionItemCost
														CurrencyWork.FromCurrency					= AssetBookTransferRel.Currency
														CurrencyWork.BaseAmount.ToCurrency			= AssetBookTransferRel.ToBookCurrency
														LocalExchangeDate							= Asset.LastAssetItemPurchaseDate
														invoked.PrmBasis		= CurrencyWork.BaseAmount.OutputCurrencyAmount
													else
														invoked.PrmBasis		= ToBookTransactionItemCost
												invoked.PrmYTDDepr			= AssetBookTransferRel.ToYearToDateDepreciation
												invoked.PrmLTDDepr			= AssetBookTransferRel.ToLifeToDateDepreciation
												invoked.PrmSalvageValue		= AssetBookTransferRel.ToSalvageValue
									
										if (ToAssetBookRel.DebitBalance not entered
										and ToAssetBookRel.CreditBalance not entered)
											LocalAssetBook = AssetBookTransferRel.ToBook
											if (each.IsPostingBook)
												for each ToAssetTransactionRel
													invoke BalanceUpdate ToAssetBookRel
														if (each.TransactionAmount > 0)
															invoked.DebitBalance  += each.TransactionAmount
														else 
															invoked.CreditBalance += each.TransactionAmount
											else
												for each ToAssetBookTransactionRel	
													invoke BalanceUpdate ToAssetBookRel
														if (each.TransactionAmount > 0)
															invoked.DebitBalance  += each.TransactionAmount
														else 
															invoked.CreditBalance += each.TransactionAmount
										
										invoke UpdateFromTransfer each
											if(each.Book.Impairment)
												invoked.PrmBasis	= each.Basis * LocalPercentageImpairment * -1
											else
												invoked.PrmBasis	= ToBookTransactionItemCost * -1
											invoked.PrmLTDDepr		= AssetBookTransferRel.LifeToDateDepreciation - AssetBookTransferRel.FromLifeToDateDepreciation
											invoked.PrmYTDDepr		= AssetBookTransferRel.YearToDateDepreciation - AssetBookTransferRel.FromYearToDateDepreciation
											invoked.PrmSalvageValue = AssetBookTransferRel.SalvageValue - AssetBookTransferRel.FromSalvageValue
										if(AssetImpairmentBookRel exists)
											if(ToAssetImpairmentBookRel not exists)
												invoke Create ToAssetImpairmentBookRel
													fill in fields from AssetImpairmentBookRel
													invoked.Book				= AssetBookTransferRel.ToBook
													invoked.ImpairmentBook		= AssetBookTransferRel.ToBook.ImpairmentBook
													invoked.AssetImpairment		= ToAssetImpairmentRel.AssetImpairment
													invoked.Asset				= AssetTransfer.AssetTransferTo.ToAsset
													invoked.OriginalBasis		= ToAssetBookRel.Basis
													invoked.OriginalBookValue	= ToAssetBookRel.BookValue
													invoked.ImpairmentAmount	= each.ImpairmentAmount * LocalPercentageImpairment
											else
												invoke UpdateFromTransfer ToAssetImpairmentBookRel
													invoked.OriginalBasis		= ToAssetBookRel.Basis
													invoked.ImpairmentAmount	= ToAssetImpairmentBookRel.ImpairmentAmount + (each.ImpairmentAmount * LocalPercentageImpairment)
													invoked.OriginalBookValue	= ToAssetBookRel.BookValue
											invoke UpdateFromTransfer AssetImpairmentBookRel
												invoked.OriginalBasis		= each.Basis
												invoked.ImpairmentAmount	= AssetImpairmentBookRel.ImpairmentAmount - (each.ImpairmentAmount * LocalPercentageImpairment)
												invoked.OriginalBookValue	= each.BookValue
					else

						LocalQuantityDifference = AssetItem.ItemQuantity 
						LocalPercentageImpairment = ToTransactionItemCost / Asset.ItemTotalTransactionCost
						if (LocalQuantityDifference > 0)
							if (Asset.Currency 	= AssetTransfer.AssetTransferTo.ToAsset.Currency)
								ToBaseItemTax	= FromBaseItemCost
								ToBaseItemCost	= FromBaseItemTax
	
							invoke UpdateFromTransfer AssetItem
								invoked.PrmItemQuantity			= ToItemQuantity * -1
								invoked.PrmBaseItemCost			= FromBaseItemCost * -1
								invoked.PrmBaseItemTax			= FromBaseItemTax * -1
								invoked.PrmTransactionItemCost	= ToTransactionItemCost * -1
								invoked.PrmTransactionItemTax	= ToTransactionItemTax * -1
								initialize invoked.PrmUpdateLocationDetail
							invoke UpdateFromAssetItemTransfer AssetTransfer
								invoked.PrmToItemTotalTransactionCost	= ToTransactionItemCost
							
							for each Asset.AssetBook set
								LocalBook 				= each.Book
								if (!each.Disposed)	
									if (Asset.Currency not 	= each.Book.Currency
									and each.Book.PostCurrency.Book)
										LocalFromCurrency 	= Asset.Currency
										LocalToCurrency		= each.Book.Currency						
										include ToBookCurrencyExchange
									else
										ToBookTransactionItemCost	= ToTransactionItemCost
									if (AssetTransfer.TransferType.InterCompany
									and !(FromBookInToCompanyRel exists
									or FromNonPostingBookInToCompanyRel exists))
										if (!AssetBookTransferRel exists)

											invoke InterCompanyCreate AssetBookTransfer
												fill in fields from each
												invoked.Asset			= Asset
												invoked.AssetTransfer	= AssetTransfer
												invoked.ToAsset			= AssetTransfer.AssetTransferTo.ToAsset
												invoked.Book			= each.Book
										else
											if (AssetBookTransferRel.ToBook entered)
												invoke UpdateFromTransfer AssetBookTransferRel
									else
										if (!AssetBookTransferRel exists)
											invoke Create AssetBookTransfer
												fill in fields from each
												invoked.Asset					= Asset
												invoked.AssetTransfer			= AssetTransfer
												invoked.ToAsset					= AssetTransfer.AssetTransferTo.ToAsset
												if (AssetTransfer.TransferType.IntraCompany)
													invoked.ToBook		= each.Book

												invoked.ToBookCurrency			= each.Book.Currency
												invoked.ToBasis					= AssetBookTransferRel.ToBasis
										else
											invoke UpdateFromTransfer AssetBookTransferRel


							
							invoke CreateFromTransfer AssetItem
								assign result to NewAssetItem
								fill in fields from AssetItem
								invoked.AdjustmentDate		= AssetTransfer.TransferDate
								invoked.Asset				= AssetTransfer.AssetTransferTo.ToAsset							
								invoked.ItemQuantity		= ToItemQuantity
								if (AssetTransfer.AssetTransferTo.ToAssetCompany.Currency != AssetTransfer.Currency)
									CurrencyWork.TransactionAmount		= ToTransactionItemCost
						         	CurrencyWork.FromCurrency			= AssetTransfer.Currency
									CurrencyWork.BaseAmount.ToCurrency	= AssetTransfer.AssetTransferTo.ToAssetCompany.Currency
									LocalExchangeDate					= Asset.LastAssetItemPurchaseDate
									invoked.TransactionItemCost			= CurrencyWork.BaseAmount.OutputCurrencyAmount
								else
									invoked.BaseItemCost		= ToBaseItemCost
								invoked.BaseItemTax			= ToBaseItemTax
								invoked.TransactionItemCost	= ToTransactionItemCost
								invoked.TransactionItemTax	= ToTransactionItemTax
								initialize invoked.BarCode
								LocalAssetItemLocationDetail	= AssetTransfer.AssetTransferTo.ToAssetLocationDetail
								if(AssetItemLocationDetailRel exists)
									invoked.LocationDetail			= LocalAssetItemLocationDetail
								else
									LocalAssetItemLocationDetail	= AssetItem.LocationDetail
									if (AssetItemLocationDetailRel not exists)
										initialize invoked.LocationDetail

							SavedAssetItem	= NewAssetItem.AssetItem
	
							ToAssetAndItem.ToAsset		= AssetTransfer.AssetTransferTo.ToAsset
							ToAssetAndItem.ToAssetItem	= SavedAssetItem

							for each Asset.AssetBook set
								LocalBook 				= each.Book
								if (!each.Disposed)									
									if (Asset.Currency not 	= each.Book.Currency
									and !each.Book.PostCurrency.Book)
										LocalFromCurrency 	= Asset.Currency
										LocalToCurrency		= each.Book.Currency						
										include ToBookCurrencyExchange
									else
										ToBookTransactionItemCost	= ToTransactionItemCost
									if (AssetBookTransferRel.ToBook entered)
										if (!ToAssetBookRel exists)
											invoke CreateFromTransfer AssetBook
												fill in fields from each
													except invoked.CreditBalance
													except invoked.DebitBalance
													except invoked.Company
												invoked.Company = AssetTransfer.AssetTransferTo.ToAssetCompany													
												invoked.Asset	= ToAssetAndItem.ToAsset
												invoked.Book	= AssetBookTransferRel.ToBook
												if (each.Book.Impairment)
													invoked.Basis	= each.Basis * LocalPercentageImpairment
												else
													invoked.Basis	= AssetBookTransferRel.ToBasis
		
												invoked.CurrentPeriodDepreciation 		= AssetBookTransferRel.ToCurrentPeriodDepreciation  
												invoked.CurrentPeriodDepreciationAllowed = AssetBookTransferRel.ToCurrentPeriodDepreciationAllowed  
												invoked.YearToDateDepreciation 			= AssetBookTransferRel.ToYearToDateDepreciation
												invoked.YearToDateDepreciationAllowed 	= AssetBookTransferRel.ToYearToDateDepreciationAllowed    
												invoked.YearToDateDepreciationOverride  = AssetBookTransferRel.ToYearToDateDepreciationOverride  
												invoked.LifeToDateDepreciation    		= AssetBookTransferRel.ToLifeToDateDepreciation       
												invoked.LifeToDateDepreciationAllowed  	= AssetBookTransferRel.ToLifeToDateDepreciationAllowed 
												invoked.LastClosedPeriodBalance    		= AssetBookTransferRel.ToLastClosedPeriodBalance    
												invoked.SalvageValue       				= AssetBookTransferRel.ToSalvageValue 																	
												invoked.FirstYearExpenseAmount  		= AssetBookTransferRel.ToFirstYearExpenseAmount        
												invoked.TaxCreditPropertyAmount 		= AssetBookTransferRel.ToTaxCreditPropertyAmount
												invoked.TaxCredit       				= AssetBookTransferRel.ToTaxCredit     
												invoked.ActualInsuranceValue   			= AssetBookTransferRel.ToActualInsuranceValue            
												invoked.CalculatedInsuranceValue   		= AssetBookTransferRel.ToCalculatedInsuranceValue
												invoked.CalculatedReplacementValue 		= AssetBookTransferRel.ToCalculatedReplacementValue
		
										else
											invoke UpdateFromTransfer ToAssetBookRel
												if (each.Book.Impairment)	
													invoked.PrmBasis					+= each.Basis * LocalPercentageImpairment
												else
													if (AssetBookTransferRel.Currency != AssetBookTransferRel.ToBookCurrency)
														CurrencyWork.TransactionAmount				= ToBookTransactionItemCost
														CurrencyWork.FromCurrency					= AssetBookTransferRel.Currency
														CurrencyWork.BaseAmount.ToCurrency			= AssetBookTransferRel.ToBookCurrency
														LocalExchangeDate							= Asset.LastAssetItemPurchaseDate
														invoked.PrmBasis		= CurrencyWork.BaseAmount.OutputCurrencyAmount
													else
														invoked.PrmBasis					+= ToBookTransactionItemCost
												invoked.PrmYTDDepr			= AssetBookTransferRel.ToYearToDateDepreciation
												invoked.PrmLTDDepr			= AssetBookTransferRel.ToLifeToDateDepreciation
									
										if (ToAssetBookRel.DebitBalance not entered
										and ToAssetBookRel.CreditBalance not entered)
											LocalAssetBook = AssetBookTransferRel.ToBook
											if (each.IsPostingBook)
												for each ToAssetTransactionRel
													invoke BalanceUpdate ToAssetBookRel
														if (each.TransactionAmount > 0)
															invoked.DebitBalance  += each.TransactionAmount
														else 
															invoked.CreditBalance += each.TransactionAmount
											else
												for each ToAssetBookTransactionRel
													invoke BalanceUpdate ToAssetBookRel
														if (each.TransactionAmount > 0)
															invoked.DebitBalance  += each.TransactionAmount
														else 
															invoked.CreditBalance += each.TransactionAmount
										
										invoke UpdateFromTransfer each
											if (each.Book.Impairment)
												invoked.PrmBasis	= each.Basis * LocalPercentageImpairment * -1
											else
												invoked.PrmBasis	= TransactionItemCost * -1
											invoked.PrmLTDDepr		= AssetBookTransferRel.LifeToDateDepreciation - AssetBookTransferRel.FromLifeToDateDepreciation
											invoked.PrmYTDDepr		= AssetBookTransferRel.YearToDateDepreciation - AssetBookTransferRel.FromYearToDateDepreciation
										if(AssetImpairmentBookRel exists)
											if(ToAssetImpairmentBookRel not exists)
												invoke Create ToAssetImpairmentBookRel
													fill in fields from AssetImpairmentBookRel
													invoked.Book				= AssetBookTransferRel.ToBook
													invoked.ImpairmentBook		= AssetBookTransferRel.ToBook.ImpairmentBook
													invoked.AssetImpairment		= ToAssetImpairmentRel.AssetImpairment
													invoked.Asset				= AssetTransfer.AssetTransferTo.ToAsset
													invoked.OriginalBasis		= ToAssetBookRel.Basis
													invoked.OriginalBookValue	= ToAssetBookRel.BookValue
													invoked.ImpairmentAmount	= each.ImpairmentAmount * LocalPercentageImpairment
											else
												invoke UpdateFromTransfer ToAssetImpairmentBookRel
													invoked.OriginalBasis		= ToAssetBookRel.Basis
													invoked.ImpairmentAmount	= ToAssetImpairmentBookRel.ImpairmentAmount - (each.ImpairmentAmount * LocalPercentageImpairment)
													invoked.OriginalBookValue	= ToAssetBookRel.BookValue
											invoke UpdateFromTransfer AssetImpairmentBookRel
												invoked.OriginalBasis		= each.Basis
												invoked.ImpairmentAmount	= AssetImpairmentBookRel.ImpairmentAmount - (each.ImpairmentAmount * LocalPercentageImpairment)
												invoked.OriginalBookValue	= each.BookValue
										
								
									
					if (AssetItem.ItemQuantity		= ToItemQuantity
					and Asset						= AssetTransfer.AssetTransferTo.ToAsset
					and AssetItem.LocationDetail	!= ToLocationDetail)
						invoke UpdateFromTransfer AssetItem
							invoked.PrmUpdateLocationDetail	= true
							invoked.PrmLocationDetail		= ToLocationDetail
					
			Exit Rules
				constraint (ToItemQuantity <= LocalOriginalItemQuantity)
					"SelectedQuantityCanNotBeGreaterThanOriginalItemQuantity"
				invoke UpdateFromAssetItemTransfer Asset
				if (AssetTransfer.PartialTransfer)
					invoke UpdateFromAssetItemTransfer ToAssetAndItem.ToAsset
				if (!AssetTransfer.PartialTransfer)
					if (AssetTransfer.AssetTransferTo.ToAssetLocationDetail entered
					or (AssetTransfer.IsLocationTransfered
					and AssetTransfer.AssetTransferTo.ToAssetLocationDetail not entered))
						invoke UpdateFromTransfer AssetItem
							if (AssetTransfer.AssetTransferTo.ToAssetCompany.Currency != AssetTransfer.Currency)
								CurrencyWork.TransactionAmount		= ToTransactionItemCost
					         	CurrencyWork.FromCurrency			= AssetTransfer.Currency
								CurrencyWork.BaseAmount.ToCurrency	= AssetTransfer.AssetTransferTo.ToAssetCompany.Currency
								LocalExchangeDate					= Asset.LastAssetItemPurchaseDate
								invoked.PrmBaseItemCost				= CurrencyWork.BaseAmount.OutputCurrencyAmount
								invoked.PrmCurrencyExchange			= true
							invoked.PrmUpdateLocationDetail	= true
							invoked.PrmLocation				= AssetTransfer.AssetTransferTo.ToAssetLocation
							LocalAssetItemLocationDetail	= AssetTransfer.AssetTransferTo.ToAssetLocationDetail
							if(AssetItemLocationDetailRel exists)
								invoked.PrmLocationDetail	= LocalAssetItemLocationDetail
							else
								LocalAssetItemLocationDetail		= AssetItem.LocationDetail
								if (AssetItemLocationDetailRel not exists)
									initialize invoked.PrmLocationDetail
					else
						if (AssetTransfer.AssetTransferTo.ToAssetCompany.Currency != AssetTransfer.Currency)
							invoke UpdateFromTransfer AssetItem
								CurrencyWork.TransactionAmount		= ToTransactionItemCost
					         	CurrencyWork.FromCurrency			= AssetTransfer.Currency
								CurrencyWork.BaseAmount.ToCurrency	= AssetTransfer.AssetTransferTo.ToAssetCompany.Currency
								LocalExchangeDate					= Asset.LastAssetItemPurchaseDate
								invoked.PrmCurrencyExchange			= true
								invoked.PrmBaseItemCost				= CurrencyWork.BaseAmount.OutputCurrencyAmount
					invoke UpdateFromAssetItemTransfer AssetTransfer		// GWT moved to before "invoke UpdateFromTransfer AssetItem"
						invoked.PrmToTotalItemQuantity			= ToItemQuantity
						invoked.PrmToItemTotalBaseCost			= ToBaseItemCost
						invoked.PrmToItemTotalBaseTax			= ToBaseItemTax 
						invoked.PrmToItemTotalTransactionCost	= ToTransactionItemCost
						invoked.PrmToItemTotalTransactionTax	= ToTransactionItemTax
				else
					invoke DeleteFromAsset AssetItemTransferFundsRel
					if (Asset.FundAllocationRequired)	
						if (Asset.FundOverride)
							initialize AllocatedAmount
							initialize AllocatedPercent
							initialize F1 
							FundCount								= instance count of AssetItemFundsRel
							for each AssetItemFundsRel
								F1 									+= 1				
								LocalAccountingEntity				= each.AccountingEntity
								LocalAccountingUnit					= each.AccountingUnit
								LocalProject						= each.Project
								LocalFund							= each.Fund
						  		LocalFinanceDimension1				= each.FinanceDimension1
						  		LocalFinanceDimension2				= each.FinanceDimension2
						  		LocalFinanceDimension3				= each.FinanceDimension3
						  		LocalFinanceDimension4				= each.FinanceDimension4
						  		LocalFinanceDimension5				= each.FinanceDimension5
						   		LocalFinanceDimension6				= each.FinanceDimension6
						   		LocalFinanceDimension7				= each.FinanceDimension7 		 		  		
						  		LocalFinanceDimension8				= each.FinanceDimension8
						  		LocalFinanceDimension9				= each.FinanceDimension9
						  		LocalFinanceDimension10				= each.FinanceDimension10	
						  		LocalPercentContribution			= each.PercentContribution	
								invoke CreateFromItem AssetItemTransferFundRel
									invoked.AssetTransfer				= AssetTransfer
									if (LocalQuantityDifference > 0)
										if (F1 < FundCount)
											FundAmount					= (ToTransactionItemCost * LocalPercentContribution)
											invoked.TransactionAmount	= FundAmount
											invoked.PercentContribution = LocalPercentContribution
											AllocatedAmount				+= FundAmount	
											AllocatedPercent			+= LocalPercentContribution
										else
											invoked.TransactionAmount	= (ToTransactionItemCost - AllocatedAmount)
											invoked.PercentContribution = (1 - AllocatedPercent)
									fill in fields from each	
						else
							include CreateItemTransferFunds 
		
					
					
		Update is an Update Action
			Entrance Rules
				constraint (ToItemQuantity <= ItemQuantity)
					"SelectedQuantityCanNotBeGreaterThanOriginalItemQuantity"
				if (AssetTransfer.FullOrPartial.Partial
				and Asset.NumberOfAssetItems = 1)
					constraint (ToItemQuantity > 0)
						"TransferItemQuantityCanNotBeZero"
			Action Rules
				BypassActiveCodeBlockEdit = true
				include CalculateCosts
				if (AssetTransfer.PartialTransfer)
					if (ToItemQuantity changed)
						LocalQuantityDifference	= ToItemQuantity - old ToItemQuantity
						LocalBaseCostDifference	= FromBaseItemCost- old FromBaseItemCost
						LocalBaseTaxDifference	= FromBaseItemTax - old FromBaseItemTax
						LocalTranCostDifference	= ToTransactionItemCost - old ToTransactionItemCost
						LocalTranTaxDifference	= ToTransactionItemTax - old ToTransactionItemTax
						invoke UpdateFromAssetItemTransfer AssetTransfer
							invoked.PrmToTotalItemQuantity			= ToItemQuantity - old ToItemQuantity
							invoked.PrmToItemTotalBaseCost			= ToBaseItemCost - AssetTransfer.AssetTransferTo.ToItemTotalBaseCost
							invoked.PrmToItemTotalBaseTax			= ToBaseItemTax - AssetTransfer.AssetTransferTo.ToItemTotalBaseTax
							invoked.PrmToItemTotalTransactionCost	= LocalTranCostDifference
							invoked.PrmToItemTotalTransactionTax	= ToTransactionItemTax - AssetTransfer.AssetTransferTo.ToItemTotalTransactionTax
						
						invoke UpdateFromTransfer AssetItem
							invoked.PrmItemQuantity			= LocalQuantityDifference * -1
							invoked.PrmBaseItemCost			= LocalBaseCostDifference * -1
							invoked.PrmBaseItemTax			= LocalBaseTaxDifference * -1
							invoked.PrmTransactionItemCost	= LocalTranCostDifference * -1
							invoked.PrmTransactionItemTax	= LocalTranTaxDifference * -1
							
						LocalQuantityDifference	= old ToItemQuantity - ToItemQuantity
						LocalBaseCostDifference	= old FromBaseItemCost - FromBaseItemCost
						LocalBaseTaxDifference	= old FromBaseItemTax - FromBaseItemTax
						LocalTranCostDifference	= old ToTransactionItemCost - ToTransactionItemCost
						LocalTranTaxDifference	= old ToTransactionItemTax - ToTransactionItemTax
						LocalPercentageImpairment = LocalTranCostDifference / Asset.ItemTotalTransactionCost
						invoke UpdateFromTransfer NewAssetItemRel
							invoked.PrmItemQuantity			= LocalQuantityDifference * -1
							if (AssetTransfer.AssetTransferTo.ToAssetCompany.Currency != AssetTransfer.Currency)
								CurrencyWork.TransactionAmount		= LocalBaseCostDifference
					         	CurrencyWork.FromCurrency			= AssetTransfer.Currency
								CurrencyWork.BaseAmount.ToCurrency	= AssetTransfer.AssetTransferTo.ToAssetCompany.Currency
								LocalExchangeDate					= Asset.LastAssetItemPurchaseDate
								invoked.PrmBaseItemCost				= CurrencyWork.BaseAmount.OutputCurrencyAmount * -1
							else
								invoked.PrmBaseItemCost			= LocalBaseCostDifference * -1
							invoked.PrmBaseItemTax			= LocalBaseTaxDifference * -1
							invoked.PrmTransactionItemCost	= LocalTranCostDifference * -1
							invoked.PrmTransactionItemTax	= LocalTranTaxDifference * -1

						for each Asset.AssetBook set
							LocalBook 			= each.Book
							if (!each.Disposed)	
								if (Asset.Currency not = each.Book.Currency
								and each.Book.PostCurrency.Book)
									LocalFromCurrency 	= Asset.Currency
									LocalToCurrency		= each.Book.Currency						
									include ToBookCurrencyExchange
								else
									ToBookTransactionItemCost	= ToTransactionItemCost
									ToBookTranCostDifference	= LocalTranCostDifference
								if (AssetTransfer.TransferType.InterCompany
								and !(FromBookInToCompanyRel exists
								or FromNonPostingBookInToCompanyRel exists))
									if (AssetBookTransferRel.ToBook entered)
										invoke UpdateFromTransfer AssetBookTransferRel
								else
									invoke UpdateFromTransfer AssetBookTransferRel
								LocalBook = each.Book			
								if (AssetBookTransferRel.ToBook entered)
									if (ToAssetBookRel exists)
										invoke UpdateFromTransfer ToAssetBookRel
											if(each.Book.Impairment)
												invoked.PrmBasis	= each.Basis * LocalPercentageImpairment * -1
											else
												if (AssetBookTransferRel.Currency != AssetBookTransferRel.ToBookCurrency)
													CurrencyWork.TransactionAmount				= ToBookTranCostDifference
													CurrencyWork.FromCurrency					= AssetBookTransferRel.Currency
													CurrencyWork.BaseAmount.ToCurrency			= AssetBookTransferRel.ToBookCurrency
													LocalExchangeDate							= Asset.LastAssetItemPurchaseDate
													invoked.PrmBasis		= CurrencyWork.BaseAmount.OutputCurrencyAmount * -1
												else
													invoked.PrmBasis		= ToBookTranCostDifference * -1
											invoked.PrmYTDDepr		= AssetBookTransferRel.ToYearToDateDepreciation
											invoked.PrmLTDDepr		= AssetBookTransferRel.ToLifeToDateDepreciation	
											invoked.PrmSalvageValue	= AssetBookTransferRel.ToSalvageValue
								
									invoke UpdateFromTransfer each
										if(each.Book.Impairment)
											invoked.PrmBasis 	= each.Basis * LocalPercentageImpairment
										else
											invoked.PrmBasis	= ToBookTranCostDifference 
										invoked.PrmYTDDepr		= AssetBookTransferRel.YearToDateDepreciation - AssetBookTransferRel.FromYearToDateDepreciation
										invoked.PrmLTDDepr		= AssetBookTransferRel.LifeToDateDepreciation - AssetBookTransferRel.FromLifeToDateDepreciation					
										invoked.PrmSalvageValue = AssetBookTransferRel.SalvageValue - AssetBookTransferRel.FromSalvageValue


									if(AssetImpairmentBookRel exists)
										if(ToAssetImpairmentBookRel exists)
											invoke UpdateFromTransfer ToAssetImpairmentBookRel
												invoked.OriginalBasis		= ToAssetBookRel.Basis
												invoked.ImpairmentAmount	= ToAssetImpairmentBookRel.ImpairmentAmount - (each.ImpairmentAmount * LocalPercentageImpairment)
												invoked.OriginalBookValue	= ToAssetBookRel.BookValue
										invoke UpdateFromTransfer AssetImpairmentBookRel
											invoked.OriginalBasis		= each.Basis
											invoked.ImpairmentAmount	= AssetImpairmentBookRel.ImpairmentAmount + (each.ImpairmentAmount * LocalPercentageImpairment)
											invoked.OriginalBookValue	= each.BookValue
								
						invoke UpdateFromAssetItemTransfer Asset
						invoke UpdateFromAssetItemTransfer ToAssetAndItem.ToAsset
							
				if(!AssetTransfer.PartialTransfer)			
					invoke UpdateFromAssetItemTransfer AssetTransfer
						invoked.PrmToTotalItemQuantity			= ToItemQuantity - old ToItemQuantity
						invoked.PrmToItemTotalBaseCost			= ToBaseItemCost - AssetTransfer.AssetTransferTo.ToItemTotalBaseCost
						invoked.PrmToItemTotalBaseTax			= ToBaseItemTax - AssetTransfer.AssetTransferTo.ToItemTotalBaseTax
						invoked.PrmToItemTotalTransactionCost	= ToTransactionItemCost - AssetTransfer.AssetTransferTo.ToItemTotalTransactionCost
						invoked.PrmToItemTotalTransactionTax	= ToTransactionItemTax - AssetTransfer.AssetTransferTo.ToItemTotalTransactionTax
			Exit Rules
				constraint (ToItemQuantity <= ItemQuantity)
					"SelectedQuantityCanNotBeGreaterThanOriginalItemQuantity"
				if (AssetTransfer.PartialTransfer)	
					if(ToItemQuantity = 0)
						invoke Delete AssetItemTransfer
						invoke Delete AssetItemTransferFundsRel
					else
						if (ToTransactionItemCost changed)
							initialize F1
							FundCount		= instance count of AssetItemTransferFundsRel
							for each AssetItemTransferFundsRel
								invoke NoEditUpdate each
									F1 += 1 
									if (F1 < FundCount)
										FundTransactionAmount 	= (ToTransactionItemCost * each.PercentContribution)
										AllocatedAmount			+= FundTransactionAmount
									else
										FundTransactionAmount 	= (ToTransactionItemCost - AllocatedAmount)
									invoked.TransactionAmount	= FundTransactionAmount
									invoked.PercentContribution = (FundTransactionAmount / ToTransactionItemCost)	
							
		
		Delete is a Delete Action
			restricted
			
			Action Rules
				if (AssetTransfer.PartialTransfer
				and ToItemQuantity != 0)
					invoke UpdateFromAssetItemTransfer AssetTransfer
						invoked.PrmToTotalItemQuantity			= ToItemQuantity * -1
						invoked.PrmToItemTotalBaseCost			= ToBaseItemCost * -1
						invoked.PrmToItemTotalBaseTax			= ToBaseItemTax * -1
						invoked.PrmToItemTotalTransactionCost	= ToTransactionItemCost * -1
						invoked.PrmToItemTotalTransactionTax	= ToTransactionItemTax * -1
				if (NewAssetItemRel exist)
					if(ToItemQuantity = 0)
						invoke ForceDelete NewAssetItemRel
				invoke Delete AssetItemTransferFundsRel		

		ResetTransfer is an Instance Action
			restricted
			Local Fields
				SavedToAssetAndItem			is an ToAssetAndItem

			Action Rules
				if (AssetTransfer.PartialTransfer)
					if (ToAssetAndItem.ToAssetItem entered)
						LocalQuantityDifference	= AssetItem.ItemQuantity + ToItemQuantity
						LocalBaseCostDifference	= AssetItem.BaseItemCost + FromBaseItemCost
						LocalBaseTaxDifference	= AssetItem.BaseItemTax + FromBaseItemTax
						LocalTranCostDifference	= AssetItem.TransactionItemCost + ToTransactionItemCost
						LocalTranTaxDifference	= AssetItem.TransactionItemTax + ToTransactionItemTax
						invoke UpdateFromTransfer AssetItem
							invoked.PrmItemQuantity			= ToItemQuantity
							invoked.PrmBaseItemCost			= FromBaseItemCost
							invoked.PrmBaseItemTax			= FromBaseItemTax
							invoked.PrmTransactionItemCost	= ToTransactionItemCost
							invoked.PrmTransactionItemTax	= ToTransactionItemTax
							invoked.PrmUpdateLocationDetail	= true
							invoked.PrmLocation				= AssetItem.Asset.AssetLocation
							invoked.PrmLocationDetail		= LocationDetail

						for each Asset.AssetBook set
							if (!each.Disposed)	
								if (Asset.Currency not = each.Book.Currency
								and each.Book.PostCurrency.Book)
									LocalBook 			= each.Book
									LocalFromCurrency 	= Asset.Currency
									LocalToCurrency		= each.Book.Currency	
									include ToBookCurrencyExchange





				invoke Delete

		AssetReleaseTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)
			Action Rules
				invoke PostRelease.Release Asset
		
		AssetResetTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)


			Action Rules
				invoke PostRelease.ResetTransfer Asset


		Purge is a Purge Action
			restricted
