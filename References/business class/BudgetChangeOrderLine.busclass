BudgetChangeOrderLine is a BusinessClass
	default label is "BudgetChangeRequestLine"
	owned by GeneralLedger
	prefix is BUDCL
   
    Ontology
    	symbolic key is BudgetChangeOrderLine

    Patterns

    Persistent Fields
        Amount                  	is an InternationalAmount
        	precision is BudgetChangeOrder.Currency.NumberOfDecimals
        UnitsAmount
		GeneralLedgerCalendarPeriod
			default label is "GlobalLedgerCalendarPeriod"
			delete ignored
		EndDate						is like GeneralLedgerCalendarPeriod
		BudgetCodeBlock
		DimensionCode				is Alpha 105
		BudgetChangeScenario		is like Scenario
			default label is "Scenario"
		Released					is Boolean
		Removing					is Boolean
				
    Transient Fields
		TransientByPassOverBudgetMessage is Boolean
		
	Local Fields
		UpdateAmount				is an InternationalAmount
		UpdateCodeBlock				is a BudgetCodeBlock
		UpdatePeriod				is AlphaUpper size 20 
		UpdateEndDate				is AlphaUpper size 20 
		TotalGroup					is a GeneralLedgerTotalScenarioGroup
		TranslationDate				is Date
		LocalFromBudgetCurrency		is a Currency
		LocalToBudgetCurrency		is a Currency
		LocalBudgetRateGroup		is a BudgetRateScenarioGroup 
		LocalDate					is Date
		LocalAlphaDay				is Alpha 3
		LocalAlphaYear				is Alpha 4
		LocalJulianDate				is Alpha 7
		ProjectPeriod				is a GeneralLedgerCalendarPeriod
		LocalNetUnitsAmount			is an UnitsAmount
		LocalNetTransactionAmount	is a TotalAmount
			precision is BudgetChangeOrder.Currency.NumberOfDecimals
		LocalTotalsComputed			is Boolean
		LocalChildScenario			is like Scenario
		BudgetCodeBlockStructureValidation
		Temporary					is Alpha 150
		LocalEndDate				is like GeneralLedgerCalendarPeriod
		LocalScenario				is a Scenario
		LocalReadBudgetCube			is Boolean
		LocalCubeBudgetDataAmount	is a TotalAmount
			precision is BudgetChangeOrder.Currency.NumberOfDecimals
		LocalCubeBudgetDataUnits	is an UnitsAmount
		LocalCubeObligationAmount	is a TotalAmount
			precision is BudgetChangeOrder.Currency.NumberOfDecimals
		LocalCubeObligationUnits	is an UnitsAmount
		BudgetCodeBlockUnitAmountEdit
		LocalGetAlertDetail						is Boolean
		LocalGetAllBudgetDataWithAmount	        is Boolean
		LocalWithCurrencyWithAmountExists       is Boolean
		LocalMatchingCurrencyWithAmountExists   is Boolean
		LocalDifferentCurrencyWithAmountExists  is Boolean
		LocalBudgetWithOutCurrencyExists		is Boolean
	Conditions
		HasComments
			restricted
			when (BudgetChangeOrderLineComment set exists)
		
		SecurityGroupAllowsAccess
            when (BudgetCodeBlock.AccountingEntity not entered
            or   (BudgetCodeBlock.AccountingEntity entered 
            and   BudgetCodeBlock.AccountingEntity.AccountingEntitySecurityGroupAllowsAccess))

		ShowBudgetDataAlert
			when (BudgetChangeOrderLine exists
			and BudgetChangeOrder.TotalCubeRel.Mode.Active
			and NoMatchingBudgetDataExists)
		
		BudgetDataDoesNotExistsForAnyCurrency								
			when (BudgetChangeOrderLine exists								
			and BudgetDataForCodeBlockForAnyCurrencyRel not exists)
			
		BudgetDataExistsForDifferentCurrency								
			when (BudgetChangeOrderLine exists
			and BudgetDataForCodeBlockOnSpecificCurrencyRel not exists
            and BudgetDataForCodeBlockForAnyCurrencyRel exists)

	Relations
		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup              = FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup     = BudgetChangeOrder.UniqueID

		BudgetChangeOrderCommentRel is a BudgetChangeOrderComment set
		BudgetChangeOrderLineCommentRel is a BudgetChangeOrderLineComment set
		GeneralLedgerCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= Scenario.Basis.GeneralLedgerCalendar.TopNode
				related.PeriodType		 			= 3 
				related.EndDateJulian				>= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian		<= LocalJulianDate)
		EndDatesForPeriodRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = Scenario.Basis.GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)
		EndDatesForUpdatePeriodRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = Scenario.Basis.GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = UpdatePeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)
		AccountingEntityInBasisRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.AccountingEntityTopNode
				related.SubordinateAccountingEntity		= BudgetCodeBlock.AccountingEntity
		AccountingUnitInBasisRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AccountingUnitStructure = Scenario.Basis.AccountingUnitStructure
				related.AccountingEntity		= BudgetCodeBlock.AccountingEntity
				related.AccountingUnit		    = BudgetCodeBlock.AccountingUnit
		ProjectInBasisRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ProjectStructure		= Scenario.Basis.ProjectStructure
				related.Project				    = BudgetCodeBlock.Project
		AccountInBasisRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ReportingChart			= Scenario.Basis.ReportingChart
				related.GeneralLedgerChartAccount	= BudgetCodeBlock.GeneralLedgerChartAccount
		Dimension1InBasisRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= Scenario.Basis.FinanceDimension1Structure
				related.FinanceDimension1			= BudgetCodeBlock.FinanceDimension1
		Dimension2InBasisRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= Scenario.Basis.FinanceDimension2Structure
				related.FinanceDimension2			= BudgetCodeBlock.FinanceDimension2
		Dimension3InBasisRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= Scenario.Basis.FinanceDimension3Structure
				related.FinanceDimension3			= BudgetCodeBlock.FinanceDimension3
		Dimension4InBasisRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= Scenario.Basis.FinanceDimension4Structure
				related.FinanceDimension4			= BudgetCodeBlock.FinanceDimension4
		Dimension5InBasisRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= Scenario.Basis.FinanceDimension5Structure
				related.FinanceDimension5			= BudgetCodeBlock.FinanceDimension5
		Dimension6InBasisRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= Scenario.Basis.FinanceDimension6Structure
				related.FinanceDimension6			= BudgetCodeBlock.FinanceDimension6
		Dimension7InBasisRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= Scenario.Basis.FinanceDimension7Structure
				related.FinanceDimension7			= BudgetCodeBlock.FinanceDimension7
		Dimension8InBasisRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= Scenario.Basis.FinanceDimension8Structure
				related.FinanceDimension8			= BudgetCodeBlock.FinanceDimension8
		Dimension9InBasisRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= Scenario.Basis.FinanceDimension9Structure
				related.FinanceDimension9			= BudgetCodeBlock.FinanceDimension9
		Dimension10InBasisRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= Scenario.Basis.FinanceDimension10Structure
				related.FinanceDimension10			= BudgetCodeBlock.FinanceDimension10

		AllChildrenRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Parent = BudgetChangeOrder.Scenario)

		DetailedAllTotalsRel
			one-to-one relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						 = FinanceEnterpriseGroup
				related.Scenario									 = LocalChildScenario
				related.AccountingEntity			 				 = BudgetCodeBlock.AccountingEntity
				related.GeneralLedgerTotal.Ledger   				 = FinanceEnterpriseGroup.CoreLedger
				related.GeneralLedgerTotal.System					 = "GL"
				related.GeneralLedgerTotal.Currency 				 = BudgetChangeOrder.Currency
				related.GeneralLedgerTotal.EntityYearPeriod			 = EndDate
				related.GeneralLedgerTotal.AccountingUnit			 = BudgetCodeBlock.AccountingUnit
				related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetCodeBlock.GeneralLedgerChartAccount
				related.GeneralLedgerTotal.Project					 = BudgetCodeBlock.Project
				related.GeneralLedgerTotal.DimensionCode			 = TotalsDimensionCode
				related.GeneralLedgerTotal.PrimaryLedger			 = FinanceEnterpriseGroup.CoreLedger		
			
		BudgetDataForCodeBlockForAnyCurrencyRel								
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByAccountPeriodUnitDim1
				related.FinanceEnterpriseGroup						 = FinanceEnterpriseGroup
		        related.Scenario                                     = any AllChildrenRel.Scenario
		        related.GeneralLedgerTotal.Ledger                    = FinanceEnterpriseGroup.CoreLedger
		        related.AccountingEntity                             = BudgetCodeBlock.AccountingEntity
		        related.GeneralLedgerTotal.EntityYearPeriod          = EndDate
		        related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetCodeBlock.GeneralLedgerChartAccount
		        related.GeneralLedgerTotal.AccountingUnit            = BudgetCodeBlock.AccountingUnit
		        related.FinanceDimension1                            = BudgetCodeBlock.FinanceDimension1
		    Instance Selection
		        where (related.GeneralLedgerTotal.System             = "GL"				
		        and related.GeneralLedgerTotal.Currency           entered
		        and related.GeneralLedgerTotal.Project               = BudgetCodeBlock.Project
		        and related.GeneralLedgerTotal.DimensionCode         = TotalsDimensionCode
		        and related.GeneralLedgerTotal.PrimaryLedger         = FinanceEnterpriseGroup.CoreLedger)

		BudgetDataForCodeBlockOnSpecificCurrencyRel						
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						 = FinanceEnterpriseGroup
				related.Scenario									 = any AllChildrenRel.Scenario		
				related.AccountingEntity			 				 = BudgetCodeBlock.AccountingEntity
				related.GeneralLedgerTotal.Ledger   				 = FinanceEnterpriseGroup.CoreLedger
				related.GeneralLedgerTotal.System					 = "GL"
				related.GeneralLedgerTotal.Currency 				 = DerivedBudgetChangeCurrency
				related.GeneralLedgerTotal.EntityYearPeriod			 = LocalEndDate
				related.GeneralLedgerTotal.AccountingUnit			 = BudgetCodeBlock.AccountingUnit
				related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetCodeBlock.GeneralLedgerChartAccount
				related.GeneralLedgerTotal.Project					 = BudgetCodeBlock.Project
				related.GeneralLedgerTotal.DimensionCode			 = TotalsDimensionCode
				related.GeneralLedgerTotal.PrimaryLedger			 = FinanceEnterpriseGroup.CoreLedger	

	Cube Relations
		BudgetDataCubeRel											
			matrix relation to GeneralLedgerTotal
			dynamic mapping is BudgetCubeMap
			Dimension Mapping
				related.GeneralLedgerTotal.Ledger	        = 	Scenario.Basis.LedgerTopNode
				related.GeneralLedgerTotal.EntityYearPeriod = 	GeneralLedgerCalendarPeriod
			Preload Measures
				NetTransactionAmount
				NetUnitsAmount
        
	Sets
		ByReleased
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				Released
				BudgetChangeOrder
				BudgetChangeOrderLine
		ByAmount
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetChangeOrder
				Amount
				BudgetChangeOrderLine
		ByPeriodAndDims
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerCalendarPeriod
				DimensionCode
		ByDimensionCode
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				BudgetChangeOrder
				DimensionCode
						
	Rule Blocks
		CalculateTotals
			if (not LocalTotalsComputed)
				for each AllChildrenRel
					LocalChildScenario			 = each.Scenario
					if (DetailedAllTotalsRel exists)
						LocalNetUnitsAmount 		+= DetailedAllTotalsRel.NetUnitsAmount
						LocalNetTransactionAmount	+= DetailedAllTotalsRel.NetTransactionAmount
						
				LocalTotalsComputed = true

 		GetBudgetCube
			if (not LocalReadBudgetCube)
				if (BudgetChangeOrderLine exists
				and BudgetChangeOrder.UnreleasedChangeRequest
				and BudgetChangeOrder.TotalCubeRel.Mode.Active)			
					LocalScenario				= Scenario
					LocalCubeBudgetDataAmount	= BudgetDataCubeRel.NetTransactionAmount
					LocalCubeBudgetDataUnits	= BudgetDataCubeRel.NetUnitsAmount
					
					LocalScenario				= FinanceEnterpriseGroup.ActualsScenario.Parent
					LocalCubeObligationAmount	= BudgetDataCubeRel.NetTransactionAmount
					LocalCubeObligationUnits	= BudgetDataCubeRel.NetUnitsAmount
				
				LocalReadBudgetCube = true

		GetAlertDetail
			if (not LocalGetAlertDetail)		
				if (BudgetChangeOrderLine exists
				and BudgetChangeOrder.UnreleasedChangeRequest
				and BudgetChangeOrder.TotalCubeRel.Mode.Active)			
					LocalScenario             = Scenario
					initialize LocalWithCurrencyWithAmountExists
					initialize LocalMatchingCurrencyWithAmountExists
					initialize LocalDifferentCurrencyWithAmountExists
					initialize LocalBudgetWithOutCurrencyExists
					if (Amount entered)			
						LocalGetAllBudgetDataWithAmount          = true   	
						for each BudgetDataCubeRel
							LocalWithCurrencyWithAmountExists    = true
							if (each.GeneralLedgerTotal.Currency = BudgetChangeOrder.Currency)
								LocalMatchingCurrencyWithAmountExists  = true
								end for each
							else
								LocalDifferentCurrencyWithAmountExists = true
						
						initialize LocalGetAllBudgetDataWithAmount			
					else


						if (BudgetDataCubeRel.NetUnitsAmount entered)
							LocalBudgetWithOutCurrencyExists = true		
				LocalGetAlertDetail = true

		CreateUpdateRules
			constraint (Amount != 0 or UnitsAmount != 0)
				"AmountOrUnitsAmountMustBeNonZero"


			




					












				
		UpdateGroupTotals

			invoke Purge BudgetEditErrorRel

			invoke UpdateGroupTotalsBudget BudgetTemplate in foreground
				invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoked.PrmScenario					= Scenario
				invoked.PrmBudgetEditGroup			= BudgetChangeOrder.UniqueID
				invoked.PrmEndDate					= UpdateEndDate
				invoked.PrmTransactionCodeBlock		= UpdateCodeBlock
				invoked.PrmTransactionCodeBlock.ToAccountingEntity	= UpdateCodeBlock.AccountingEntity
				invoked.PrmCurrency					= BudgetChangeOrder.Currency
				invoked.PrmAmount					= UpdateAmount
				invoked.PrmOriginatingDocument  	= reference to BudgetChangeOrder
			
			if (not TransientByPassOverBudgetMessage
			and BudgetChangeOrder.HasBudgetErrors)	
				confirmation required   
					"Warning:BudgetsHaveBeenExceeded;ViewDetailsInEditErrorsPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"

		UpdateBudgetAmountWithOldCodeBlockOldPeriod

			UpdateCodeBlock	= old BudgetCodeBlock
			UpdatePeriod	= old GeneralLedgerCalendarPeriod
			UpdateEndDate	= last EndDatesForUpdatePeriodRel.GeneralLedgerCalendarPeriod
			include UpdateGroupTotals
		UpdateBudgetAmountWithOldCodeBlockCurrentPeriod

			UpdateCodeBlock	= old BudgetCodeBlock
			UpdatePeriod	= GeneralLedgerCalendarPeriod
			UpdateEndDate	= EndDate
			include UpdateGroupTotals
		UpdateBudgetAmountWithCurrentCodeBlockOldPeriod

			UpdateCodeBlock	= BudgetCodeBlock
			UpdatePeriod	= old GeneralLedgerCalendarPeriod
			UpdateEndDate	= last EndDatesForUpdatePeriodRel.GeneralLedgerCalendarPeriod
			include UpdateGroupTotals
		UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod

			UpdateCodeBlock	= BudgetCodeBlock
			UpdatePeriod	= GeneralLedgerCalendarPeriod
			UpdateEndDate	= EndDate
			include UpdateGroupTotals

		CheckCodeBlock
			if (Scenario.ValidateStructureRelations)
				BudgetCodeBlockStructureValidation	= true
				BudgetCodeBlock.LocalBudgetPeriod	= GeneralLedgerCalendarPeriod
				
				Temporary	= BudgetCodeBlock.EditCodeBlockRelationDetail 
				initialize BudgetCodeBlockStructureValidation
				
			if (Scenario.HasAccountingEntity)
			    constraint (BudgetCodeBlock.AccountingEntity entered)
				    "MustIncludeAccountingEntityDimension"
				constraint (BudgetCodeBlock.AccountingEntity.DimensionType.Posting)
					"AccountingEntity<BudgetCodeBlock.AccountingEntity>MustBePosting"					
				constraint (AccountingEntityInBasisRel exists)
					"AccountingEntityMustBeInBasis"
			else
			    constraint (BudgetCodeBlock.AccountingEntity not entered)
				    "ScenarioDoesNotIncludeAccountingEntityDimension"
			if (Scenario.HasPostingAccountingUnit)
				if (FinanceEnterpriseGroup.AccountingUnitRequired)
			    	constraint (BudgetCodeBlock.AccountingUnit entered)
				    	"MustIncludeAccountingUnitDimension"
			    	constraint (BudgetCodeBlock.AccountingUnit.PostingAccountingUnit)
				    	"AccountingUnit<BudgetCodeBlock.AccountingUnit>MustBePosting"
					constraint (AccountingUnitInBasisRel exists)
						"AccountingUnitMustBeInBasis"
			else
			    constraint (BudgetCodeBlock.AccountingUnit not entered)
				    "ScenarioDoesNotIncludeAccountingUnitDimension"
			if (Scenario.HasPostingAccount)
			    constraint (BudgetCodeBlock.GeneralLedgerChartAccount entered)
				    "MustIncludeAccountDimension"
			    constraint (BudgetCodeBlock.GeneralLedgerChartAccount.ChartType.Posting)
				    "Account<BudgetCodeBlock.GeneralLedgerChartAccount>MustBePosting"
				constraint (AccountInBasisRel exists)
					"AccountMustBeInBasis"
			else
			    constraint (BudgetCodeBlock.GeneralLedgerChartAccount not entered)
				    "ScenarioDoesNotIncludeAccountDimension"
			if (Scenario.HasPostingProject)
				if (FinanceEnterpriseGroup.ProjectRequired)
			    	constraint (BudgetCodeBlock.Project entered)
				    	"MustIncludeProjectDimension"
			    	constraint (BudgetCodeBlock.Project.IsPostingProject)
				    	"Project<BudgetCodeBlock.Project>MustBePosting"
					constraint (ProjectInBasisRel exists)
						"ProjectMustBeInBasis"
			else
			    constraint (BudgetCodeBlock.Project not entered)
				    "ScenarioDoesNotIncludeProjectDimension"
			if (Scenario.HasPostingDimension1)
				if (FinanceEnterpriseGroup.FinanceDimension1Required)
			    	constraint (BudgetCodeBlock.FinanceDimension1 entered)
				    	"MustIncludeFinanceDimension1"
			    	constraint (BudgetCodeBlock.FinanceDimension1.PostingDimension)
				    	"FinanceDimension1<BudgetCodeBlock.FinanceDimension1>MustBePosting"
					constraint (Dimension1InBasisRel exists)
						"Dimension1MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension1 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension1"
			if (Scenario.HasPostingDimension2)
				if (FinanceEnterpriseGroup.FinanceDimension2Required)
			    	constraint (BudgetCodeBlock.FinanceDimension2 entered)
				    	"MustIncludeFinanceDimension2"
			    	constraint (BudgetCodeBlock.FinanceDimension2.PostingDimension)
				    	"FinanceDimension2<BudgetCodeBlock.FinanceDimension2>MustBePosting"
					constraint (Dimension2InBasisRel exists)
						"Dimension2MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension2 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension2"
			if (Scenario.HasPostingDimension3)
				if (FinanceEnterpriseGroup.FinanceDimension3Required)
			    	constraint (BudgetCodeBlock.FinanceDimension3 entered)
				    	"MustIncludeFinanceDimension3"
			    	constraint (BudgetCodeBlock.FinanceDimension3.PostingDimension)
				    	"FinanceDimension3<BudgetCodeBlock.FinanceDimension3>MustBePosting"
					constraint (Dimension3InBasisRel exists)
						"Dimension3MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension3 not entered)
				    "ScenarioDoesNotFinanceDimensionInclude3"
			if (Scenario.HasPostingDimension4)
				if (FinanceEnterpriseGroup.FinanceDimension4Required)
			    	constraint (BudgetCodeBlock.FinanceDimension4 entered)
				    	"MustIncludeFinanceDimension4"
			    	constraint (BudgetCodeBlock.FinanceDimension4.PostingDimension)
				    	"FinanceDimension4<BudgetCodeBlock.FinanceDimension4>MustBePosting"
					constraint (Dimension4InBasisRel exists)
						"Dimension4MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension4 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension4"
			if (Scenario.HasPostingDimension5)
				if (FinanceEnterpriseGroup.FinanceDimension5Required)
			    	constraint (BudgetCodeBlock.FinanceDimension5 entered)
				    	"MustIncludeFinanceDimension5"
			    	constraint (BudgetCodeBlock.FinanceDimension5.PostingDimension)
				    	"FinanceDimension5<BudgetCodeBlock.FinanceDimension5>MustBePosting"
					constraint (Dimension5InBasisRel exists)
						"Dimension5MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension5 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension5"
			if (Scenario.HasPostingDimension6)
				if (FinanceEnterpriseGroup.FinanceDimension6Required)
			    	constraint (BudgetCodeBlock.FinanceDimension6 entered)
				    	"MustIncludeFinanceDimension6"
			    	constraint (BudgetCodeBlock.FinanceDimension6.PostingDimension)
				    	"FinanceDimension6<BudgetCodeBlock.FinanceDimension6>MustBePosting"
					constraint (Dimension6InBasisRel exists)
						"Dimension6MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension6 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension6"
			if (Scenario.HasPostingDimension7)
				if (FinanceEnterpriseGroup.FinanceDimension7Required)
			    	constraint (BudgetCodeBlock.FinanceDimension7 entered)
				    	"MustIncludeFinanceDimension7"
			    	constraint (BudgetCodeBlock.FinanceDimension7.PostingDimension)
				    	"FinanceDimension7<BudgetCodeBlock.FinanceDimension7>MustBePosting"
					constraint (Dimension7InBasisRel exists)
						"Dimension7MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension7 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension7"
			if (Scenario.HasPostingDimension8)
				if (FinanceEnterpriseGroup.FinanceDimension8Required)
			    	constraint (BudgetCodeBlock.FinanceDimension8 entered)
				    	"MustIncludeFinanceDimension8"
			    	constraint (BudgetCodeBlock.FinanceDimension8.PostingDimension)
				    	"FinanceDimension8<BudgetCodeBlock.FinanceDimension8>MustBePosting"
					constraint (Dimension8InBasisRel exists)
						"Dimension8MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension8 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension8"
			if (Scenario.HasPostingDimension9)
				if (FinanceEnterpriseGroup.FinanceDimension9Required)
			    	constraint (BudgetCodeBlock.FinanceDimension9 entered)
				    	"MustIncludeFinanceDimension9"
			    	constraint (BudgetCodeBlock.FinanceDimension9.PostingDimension)
				    	"FinanceDimension9<BudgetCodeBlock.FinanceDimension9>MustBePosting"
					constraint (Dimension9InBasisRel exists)
						"Dimension9MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension9 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension9"
			if (Scenario.HasPostingDimension10)
				if (FinanceEnterpriseGroup.FinanceDimension10Required)
			    	constraint (BudgetCodeBlock.FinanceDimension10 entered)
				    	"MustIncludeFinanceDimension10"
			    	constraint (BudgetCodeBlock.FinanceDimension10.PostingDimension)
				    	"FinanceDimension10<BudgetCodeBlock.FinanceDimension10>MustBePosting"
					constraint (Dimension10InBasisRel exists)
						"Dimension10MustBeInBasis"
			else
			    constraint (BudgetCodeBlock.FinanceDimension10 not entered)
				    "ScenarioDoesNotIncludeFinanceDimension10"
				    
		ValidateCurrency
			LocalFromBudgetCurrency = BudgetChangeOrder.Currency
			if (BudgetCodeBlock.AccountingEntity entered)
				LocalToBudgetCurrency			= BudgetCodeBlock.AccountingEntity.FunctionalCurrency
				constraint (DerivedBudgetMeasure entered)
						"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
				if (BudgetCodeBlock.AccountingEntity.AlternateCurrency entered)
					LocalToBudgetCurrency			= BudgetCodeBlock.AccountingEntity.AlternateCurrency
					constraint (DerivedBudgetMeasure entered)
						"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
				if (BudgetCodeBlock.AccountingEntity.AlternateCurrency2 entered)
					LocalToBudgetCurrency			= BudgetCodeBlock.AccountingEntity.AlternateCurrency2
					constraint (DerivedBudgetMeasure entered)
						"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
				if (BudgetCodeBlock.AccountingEntity.AlternateCurrency3 entered)
					LocalToBudgetCurrency			= BudgetCodeBlock.AccountingEntity.AlternateCurrency3
					constraint (DerivedBudgetMeasure entered)
						"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (BudgetCodeBlock.Project entered)
				LocalToBudgetCurrency			= BudgetCodeBlock.Project.Currency
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (FinanceEnterpriseGroup.ReportCurrencyOne entered )
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyOne
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (FinanceEnterpriseGroup.ReportCurrencyTwo entered )
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyTwo
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (FinanceEnterpriseGroup.ReportCurrencyThree entered )
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyThree
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (FinanceEnterpriseGroup.ReportCurrencyFour entered )
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyFour
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			if (FinanceEnterpriseGroup.ReportCurrencyFive entered )
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyFive
				constraint (DerivedBudgetMeasure entered)
					"TranslationRateDoesNotExistFrom<LocalFromBudgetCurrency>To<LocalToBudgetCurrency>"
			
	Derived Fields
		DerivedBudgetChangeCurrency is a DerivedField
			type is like Currency
			if (Amount entered)
				return BudgetChangeOrder.Currency
			return blank

		JulianDate is a DerivedField
			type is Alpha 7
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			JulianDate = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				JulianDate += "00"
			else
			if (LocalAlphaDay size = 2)
				JulianDate += "0"
			JulianDate += LocalAlphaDay 
		TotalsDimensionCode		is a StringField
			type is Alpha 70
			restricted
			BudgetCodeBlock.FinanceDimension1.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension2.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension3.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension4.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension5.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension6.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension7.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension8.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension9.DerivedSequenceNumber
			BudgetCodeBlock.FinanceDimension10.DerivedSequenceNumber
		DerivedBudgetMeasure	is a DerivedField
			type is like TotalAmount
			restricted
			if (LocalToBudgetCurrency	= LocalFromBudgetCurrency)
				DerivedBudgetMeasure	= 1.1
			else
				initialize LocalBudgetRateGroup
				LocalBudgetRateGroup.BudgetTranslationRate				= true
				LocalBudgetRateGroup.Scenario							= Scenario
				LocalBudgetRateGroup.TranslationDate					= TranslationDate
				LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.FromCurrency		= LocalFromBudgetCurrency
				LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency		= LocalToBudgetCurrency
				if (BudgetCodeBlock.GeneralLedgerChartAccount entered)
					LocalBudgetRateGroup.GeneralLedgerTranslationCode	= BudgetCodeBlock.GeneralLedgerChartAccount.TranslationCode
				else
					LocalBudgetRateGroup.GeneralLedgerTranslationCode	= "IS"
				DerivedBudgetMeasure	= 1.1*LocalBudgetRateGroup.GeneralLedgerTranslationRate.Rate
			return DerivedBudgetMeasure
		CommentsMF is a MessageField
			restricted
			"AddComments"
		CommentsExistMF is a MessageField
			restricted
			"CommentsExist"
		CommentsMessage is a ConditionalField
			type is Alpha size 20
			restricted
			if (HasComments)
				CommentsExistMF
			else
				CommentsMF

		DerivedTotalBudget is a DerivedField
			type is like InternationalAmount
			default label is "TotalBudget"
			if (not LocalTotalsComputed)
				include CalculateTotals
			return LocalNetTransactionAmount	
			
		DerivedNewTotalBudget is a DerivedField
			type is like InternationalAmount
			default label is "NewTotalBudget"
			if (not LocalTotalsComputed)
				include CalculateTotals
			return LocalNetTransactionAmount + Amount

		DerivedTotalUnitsAmount is a DerivedField
			type is like UnitsAmount
			default label is "TotalUnitsAmount"
			if (not LocalTotalsComputed)
				include CalculateTotals
			return LocalNetUnitsAmount

		DerivedNewTotalUnitsAmount is a DerivedField
			type is like UnitsAmount
			default label is "NewTotalUnitsAmount"
			if (not LocalTotalsComputed)
				include CalculateTotals
			return LocalNetUnitsAmount + UnitsAmount

		DerivedCreditAmount is a DerivedField
			type is like InternationalAmount
			default label is "CreditAmount"
			if (Amount < 0)
				return Amount
		
		DerivedDebitAmount is a DerivedField
			type is like InternationalAmount
			default label is "DebitAmount"
			if (Amount > 0)
				return Amount	
		
		DerivedDebitUnitsAmount is a DerivedField
			type is like UnitsAmount
			default label is "DebitUnitsAmount"
			if (UnitsAmount > 0)
				return UnitsAmount
		
		DerivedCreditUnitsAmount is a DerivedField
			type is like UnitsAmount
			default label is "CreditUnitsAmount"
			if (UnitsAmount < 0)
				return UnitsAmount

		BudgetDataAlertMessage is a DerivedField
			type is MessageField
			include GetAlertDetail
			if (Amount entered)
				if (not LocalMatchingCurrencyWithAmountExists
				and LocalDifferentCurrencyWithAmountExists)
					return BudgetDataExistsForDifferentCurrencyMessage
				else
				if (not LocalWithCurrencyWithAmountExists)
					return NoExistingBudgetDataMessage
			else
			if (not LocalBudgetWithOutCurrencyExists)
				return NoExistingBudgetDataMessage

			return blank

		NoExistingBudgetDataMessage is a MessageField
			restricted
			"NoExistingBudgetAmount"
		
		BudgetDataExistsForDifferentCurrencyMessage is a MessageField
			restricted
			"BudgetExistForAnotherCurrency"

		NoMatchingBudgetDataExists is a DerivedField
			type is Boolean
			restricted
			include GetAlertDetail
			if (Amount entered
			and not LocalMatchingCurrencyWithAmountExists)
				return true
			else
			if (Amount not entered
			and not LocalBudgetWithOutCurrencyExists)
				return true
			return false
		
		DerivedObligationAmount       is a DerivedField
			type is like TotalAmount
			restricted
			include GetBudgetCube
			return LocalCubeObligationAmount
						
		DerivedRemainingBalanceAmount is a DerivedField
			type is like TotalAmount
			default label is "CurrentRemainingBudget"
			include GetBudgetCube
			return LocalCubeBudgetDataAmount - DerivedObligationAmount
			
		DerivedNewRemainingBalanceAmount is a DerivedField
			type is like TotalAmount
			default label is "PendingRemainingBudget"
			include GetBudgetCube
			return DerivedRemainingBalanceAmount +  Amount

		DerivedObligationUnits 	is a DerivedField
			type is like UnitsAmount
			restricted
			include GetBudgetCube
			return LocalCubeObligationUnits

		DerivedRemainingUnits is a DerivedField
			type is like UnitsAmount
			default label is "CurrentRemainingUnitsAmount"
			include GetBudgetCube
			return LocalCubeBudgetDataUnits - DerivedObligationUnits

		DerivedNewRemainingUnits is a DerivedField
			type is like UnitsAmount
			default label is "PendingRemainingUnitsAmount"
			return DerivedRemainingUnits + UnitsAmount

		DerivedBudgetChangeOrderLine is a DerivedField
			type is like BudgetChangeOrderLine
			default label is "Line"
			return BudgetChangeOrderLine

		BudgetCubeMap is a DerivedField
			type is LPLText
			restricted
			BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetCodeBlock.GeneralLedgerChartAccount\n"
			BudgetCubeMap += "related.Scenario	= LocalScenario\n"

			if (Amount entered)
				if (LocalGetAllBudgetDataWithAmount)
					BudgetCubeMap += "related.GeneralLedgerTotal.Currency	where (NetTransactionAmount not empty)\n"
				else
					BudgetCubeMap += "related.GeneralLedgerTotal.Currency	=	BudgetChangeOrder.Currency\n"

			if (Scenario.HasAccountingEntity)
				if (BudgetCodeBlock.AccountingEntity entered)
					BudgetCubeMap += "related.AccountingEntity = BudgetCodeBlock.AccountingEntity\n"
				else
					BudgetCubeMap += "related.AccountingEntity = Scenario.Basis.AccountingEntityTopNode\n"

			if (Scenario.HasPostingAccountingUnit)
				if (BudgetCodeBlock.AccountingUnit entered)
					BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = BudgetCodeBlock.AccountingUnit\n"
				else
					BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (Scenario.HasPostingProject)
				if (BudgetCodeBlock.Project entered)
					BudgetCubeMap += "related.GeneralLedgerTotal.Project = BudgetCodeBlock.Project\n"
				else
					BudgetCubeMap += "related.GeneralLedgerTotal.Project = Scenario.Basis.ProjectTopNode\n"

			if (Scenario.HasPostingDimension1)
				if (BudgetCodeBlock.FinanceDimension1 entered)
					BudgetCubeMap += "related.FinanceDimension1 = BudgetCodeBlock.FinanceDimension1\n"
				else											
					BudgetCubeMap += "related.FinanceDimension1 = Scenario.Basis.FinanceDimension1TopNode\n"

			if (Scenario.HasPostingDimension2)
				if (BudgetCodeBlock.FinanceDimension2 entered)
					BudgetCubeMap += "related.FinanceDimension2 = BudgetCodeBlock.FinanceDimension2\n"
				else			
					BudgetCubeMap += "related.FinanceDimension2 = Scenario.Basis.FinanceDimension2TopNode\n"

			if (Scenario.HasPostingDimension3)
				if (BudgetCodeBlock.FinanceDimension3 entered)
					BudgetCubeMap += "related.FinanceDimension3 = BudgetCodeBlock.FinanceDimension3\n"
				else
					BudgetCubeMap += "related.FinanceDimension3 = Scenario.Basis.FinanceDimension3TopNode\n"

			if (Scenario.HasPostingDimension4)
				if (BudgetCodeBlock.FinanceDimension4 entered)
					BudgetCubeMap += "related.FinanceDimension4 = BudgetCodeBlock.FinanceDimension4\n"
				else
					BudgetCubeMap += "related.FinanceDimension4 = Scenario.Basis.FinanceDimension4TopNode\n"

			if (Scenario.HasPostingDimension5)
				if (BudgetCodeBlock.FinanceDimension5 entered)
					BudgetCubeMap += "related.FinanceDimension5 = BudgetCodeBlock.FinanceDimension5\n"
				else
					BudgetCubeMap += "related.FinanceDimension5 = Scenario.Basis.FinanceDimension5TopNode\n"

			if (Scenario.HasPostingDimension6)
				if (BudgetCodeBlock.FinanceDimension6 entered)
					BudgetCubeMap += "related.FinanceDimension6 = BudgetCodeBlock.FinanceDimension6\n"
				else
					BudgetCubeMap += "related.FinanceDimension6 = Scenario.Basis.FinanceDimension6TopNode\n"

			if (Scenario.HasPostingDimension7)
				if (BudgetCodeBlock.FinanceDimension7 entered)
					BudgetCubeMap += "related.FinanceDimension7 = BudgetCodeBlock.FinanceDimension7\n"
				else
					BudgetCubeMap += "related.FinanceDimension7 = Scenario.Basis.FinanceDimension7TopNode\n"

			if (Scenario.HasPostingDimension8)
				if (BudgetCodeBlock.FinanceDimension8 entered)
					BudgetCubeMap += "related.FinanceDimension8 = BudgetCodeBlock.FinanceDimension8\n"
				else
					BudgetCubeMap += "related.FinanceDimension8 = Scenario.Basis.FinanceDimension8TopNode\n"

			if (Scenario.HasPostingDimension9)
				if (BudgetCodeBlock.FinanceDimension9 entered)
					BudgetCubeMap += "related.FinanceDimension9 = BudgetCodeBlock.FinanceDimension9\n"
				else
					BudgetCubeMap += "related.FinanceDimension9 = Scenario.Basis.FinanceDimension9TopNode\n"

			if (Scenario.HasPostingDimension10)
				if (BudgetCodeBlock.FinanceDimension10 entered)
					BudgetCubeMap += "related.FinanceDimension10 = BudgetCodeBlock.FinanceDimension10\n"
				else
					BudgetCubeMap += "related.FinanceDimension10 = Scenario.Basis.FinanceDimension10TopNode\n"

		DerivedChildScenario	is a DerivedField
			type is like Scenario
			default label is "ChildScenario"
			return BudgetChangeScenario

	Field Rules
		Amount
			constraint (BudgetChangeOrder.Currency entered)
				"ChangeRequestMustSpecifyCurrency"
		GeneralLedgerCalendarPeriod
			default to BudgetChangeOrder.DefaultPeriod
			required
			constraint (GeneralLedgerCalendarPeriod.TopNode = Scenario.Basis.GeneralLedgerCalendar.TopNode)
				"PeriodMustBeInScenarioBasisCalendar"
			constraint (GeneralLedgerCalendarPeriod.PeriodType.Month)
				"PeriodMustBeOfTypeMonth"
			EndDate	= last EndDatesForPeriodRel.GeneralLedgerCalendarPeriod
			if (Scenario.HasPostingProject
			and BudgetCodeBlock.Project entered)
				LocalDate					= BudgetCodeBlock.Project.ProjectDateRange.BeginDate
				LocalJulianDate				= JulianDate
				ProjectPeriod				= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod

				constraint (ProjectPeriod exists)
					"CouldNotFindCalendarPeriodForProjectBeginDate"
				constraint (GeneralLedgerCalendarPeriod >= ProjectPeriod)
					"PeriodLessThanProjectBeginDate"
				LocalDate					= BudgetCodeBlock.Project.ProjectDateRange.EndDate
				LocalJulianDate				= JulianDate
				ProjectPeriod				= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod

				constraint (ProjectPeriod exists)
					"CouldNotFindCalendarPeriodForProjectEndDate"
				constraint (GeneralLedgerCalendarPeriod <= ProjectPeriod)
					"PeriodGreaterThanProjectEndDate"

		BudgetCodeBlock
			required

			BudgetCodeBlockUnitAmountEdit		= Scenario.ValidateUnitControl
			include CheckCodeBlock
			if (Amount entered)
				TranslationDate	= last EndDatesForPeriodRel.GeneralLedgerCalendarPeriod.Date
				include ValidateCurrency
			DimensionCode = BudgetCodeBlock.DimensionCode
			if (BudgetCodeBlock = old BudgetCodeBlock)
				if (GeneralLedgerCalendarPeriod  = old GeneralLedgerCalendarPeriod)
					if (Amount != old Amount)
						UpdateAmount = Amount - old Amount
						include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
				else
					if (old Amount entered)
						UpdateAmount = -1*(old Amount)
						include UpdateBudgetAmountWithCurrentCodeBlockOldPeriod
					if (Amount entered)
						UpdateAmount = Amount
						include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
			else
				if (GeneralLedgerCalendarPeriod  = old GeneralLedgerCalendarPeriod)
					if (Amount != old Amount)
						if (old Amount entered)
							UpdateAmount = -1*(old Amount)
							include UpdateBudgetAmountWithOldCodeBlockCurrentPeriod
						if (Amount entered)
							UpdateAmount = Amount
							include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
					else
					if (Amount entered)
						UpdateAmount = -1*Amount
						include UpdateBudgetAmountWithOldCodeBlockCurrentPeriod
						UpdateAmount = Amount
						include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
				else
					if (Amount != old Amount)
						if (old Amount entered)
							UpdateAmount = -1*(old Amount)
							include UpdateBudgetAmountWithOldCodeBlockOldPeriod
						if (Amount entered)
							UpdateAmount = Amount
							include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
					else
					if (Amount entered)
						UpdateAmount = -1*Amount
						include UpdateBudgetAmountWithOldCodeBlockOldPeriod
						UpdateAmount = Amount
						include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod
					
	Attach Rules
		
    Actions
	
    	Create is a Create Action
    		valid when (BudgetChangeOrder.Status.Unreleased)
    		Action Rules
    			include CreateUpdateRules

		CreateChangeRequestLine is a Create Action
			restricted
		    Parameters
		        PrmFinanceEnterpriseGroup  is a FinanceEnterpriseGroup
		        PrmScenario                is a Scenario
		        PrmBudgetChangeOrder       is a BudgetChangeOrder
		        PrmAmount                  is an InternationalAmount
		            precision is PrmBudgetChangeOrder.Currency.NumberOfDecimals
		        PrmUnitsAmount             is a UnitsAmount
		        PrmBudgetCodeBlock         is a BudgetCodeBlock
		        PrmGeneralLedgerCalendarPeriod is a GeneralLedgerCalendarPeriod
		    Parameter Rules
		        PrmFinanceEnterpriseGroup
		            required
		        PrmScenario
		            required
		        PrmBudgetChangeOrder
		            required
		    Action Rules

	        	LocalJulianDate		= PrmGeneralLedgerCalendarPeriod
				
		        invoke Create this instance
		        	invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
		        	invoked.Scenario				= PrmScenario
					invoked.BudgetChangeOrder		= PrmBudgetChangeOrder
					invoked.Amount					= PrmAmount
					invoked.UnitsAmount				= PrmUnitsAmount
					invoked.BudgetCodeBlock 		= PrmBudgetCodeBlock
					invoked.GeneralLedgerCalendarPeriod = first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod
    		
		Update is an Action
			valid when (BudgetChangeOrder.Status.Unreleased)
    		Action Rules
    			include CreateUpdateRules

		Delete is a Delete Action
			valid when (BudgetChangeOrder.Status.Unreleased)
			Action Rules
				if (!Removing)
					UpdateAmount = -1*Amount
					include UpdateBudgetAmountWithCurrentCodeBlockCurrentPeriod

		DoRelease is an Instance Action
			restricted
			Parameters
				PrmChildScenario		is like Scenario
					default label is "ChildScenario"
			Action Rules
				initialize TotalGroup
				TotalGroup.Scenario = PrmChildScenario

				BudgetChangeScenario											= TotalGroup.Scenario
				TotalGroup.AccountingEntity										= BudgetCodeBlock.AccountingEntity
				TotalGroup.GeneralLedgerTotal.Ledger							= FinanceEnterpriseGroup.CoreLedger
				TotalGroup.GeneralLedgerTotal.System							= "GL"

				if (Amount entered)
					TotalGroup.GeneralLedgerTotal.Currency						= BudgetChangeOrder.Currency
				else
					initialize TotalGroup.GeneralLedgerTotal.Currency
				TotalGroup.GeneralLedgerTotal.DimensionCode						= TotalsDimensionCode
				TotalGroup.GeneralLedgerTotal.AccountingUnit					= BudgetCodeBlock.AccountingUnit
				TotalGroup.GeneralLedgerTotal.Project							= BudgetCodeBlock.Project
				TotalGroup.GeneralLedgerTotal.GeneralLedgerChartAccount			= BudgetCodeBlock.GeneralLedgerChartAccount
				TotalGroup.GeneralLedgerTotal.EntityYearPeriod					= EndDate
				TotalGroup.GeneralLedgerTotal.PrimaryLedger						= FinanceEnterpriseGroup.CoreLedger

				invoke PostTransactions TotalGroup.GeneralLedgerTotal
					invoked.NetTransactionAmount	+= Amount
					invoked.NetUnitsAmount			+= UnitsAmount
		        	invoked.FinanceDimension1		= BudgetCodeBlock.FinanceDimension1
		        	invoked.FinanceDimension2		= BudgetCodeBlock.FinanceDimension2
		        	invoked.FinanceDimension3		= BudgetCodeBlock.FinanceDimension3
		        	invoked.FinanceDimension4		= BudgetCodeBlock.FinanceDimension4
		        	invoked.FinanceDimension5		= BudgetCodeBlock.FinanceDimension5
		        	invoked.FinanceDimension6		= BudgetCodeBlock.FinanceDimension6
		        	invoked.FinanceDimension7		= BudgetCodeBlock.FinanceDimension7
		        	invoked.FinanceDimension8		= BudgetCodeBlock.FinanceDimension8
		        	invoked.FinanceDimension9		= BudgetCodeBlock.FinanceDimension9
		        	invoked.FinanceDimension10		= BudgetCodeBlock.FinanceDimension10
		        	invoked.PeriodEndingDate		= last EndDatesForPeriodRel.GeneralLedgerCalendarPeriod.Date
		        if (Amount entered)
					invoke CalculateMeasuresForBudgetRecord TotalGroup.GeneralLedgerTotal
				Released = true
		
		ReleaseLines is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmChangeOrder					is a BudgetChangeOrder
					default label is "BudgetChangeOrder"
				PrmChildScenario				is like Scenario
					default label is "ChildScenario"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetChangeOrder			= PrmChangeOrder)
			Action Rules
				Instance Rules
					invoke DoRelease
						invoked.PrmChildScenario = PrmChildScenario
					
		DeleteAllForScenario is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario)
			Action Rules
				Instance Rules
					Removing = true
					invoke Delete
					
    	DeleteAllForChangeOrder is a Set Action
    		restricted
    		Parameters
    			PrmEnterpriseGroup		is a FinanceEnterpriseGroup
    				default label is "FinanceEnterpriseGroup"
    			PrmScenario				is a Scenario
    				default label is "Scenario"
    			PrmChangeOrder			is a BudgetChangeOrder
    				default label is "ChangeOrder"
    		Instance Selection
				where (FinanceEnterpriseGroup	= PrmEnterpriseGroup
				and    Scenario					= PrmScenario
				and	   BudgetChangeOrder		= PrmChangeOrder)
			Action Rules
				Instance Rules
					Removing = true
					invoke Delete
					
    	CopyChangeRequestLine is a Set Action
    		restricted
    		Parameters
    			PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
    				default label is "FinanceEnterpriseGroup"
    			PrmScenario							is like Scenario
    				default label is "Scenario"
    			PrmChangeOrder						is like BudgetChangeOrder
    				default label is "ChangeOrder"
    			TargetScenario						is like Scenario
				NewDescription						is like Description
				ReverseAmounts						is Boolean
				CopyComments						is Boolean
				CopyAttachments						is Boolean
				CopyLineComments					is Boolean
				CopyLineAttachments					is Boolean

			Local Fields
				LocalNewChangeOrderView			is a BudgetChangeOrder view
				LocalNewChangeOrderLine			is a BudgetChangeOrderLine view

    		Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Scenario					= PrmScenario
				and	   BudgetChangeOrder		= PrmChangeOrder)

			Sort Order		
				FinanceEnterpriseGroup
				Scenario
				BudgetChangeOrder
			
			Action Rules
				Set Rules
				BudgetChangeOrder Set Rules
					Entrance Rules
						invoke Create BudgetChangeOrder
							assign result to LocalNewChangeOrderView
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Scenario					= TargetScenario
							invoked.BudgetChangeOrder			= 0					
							invoked.Description					= NewDescription
							invoked.Currency					= BudgetChangeOrder.Currency
							invoked.DefaultPeriod				= BudgetChangeOrder.DefaultPeriod
							invoked.HasNoUnitsAmount			= BudgetChangeOrder.HasNoUnitsAmount

						if (CopyComments)
							for each BudgetChangeOrderCommentRel
								invoke Create BudgetChangeOrderComment
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.Scenario					= TargetScenario
									invoked.BudgetChangeOrder			= LocalNewChangeOrderView.BudgetChangeOrder
									invoked.Subject						= each.Subject
									invoked.Comment						= each.Comment
									invoked.From						= actor
									if (CopyAttachments)
										invoked.Attachment				= each.Attachment

				Instance Rules
					invoke Create BudgetChangeOrderLine
						assign result to LocalNewChangeOrderLine
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.Scenario					= TargetScenario
						invoked.BudgetChangeOrder			= LocalNewChangeOrderView.BudgetChangeOrder
						invoked.BudgetChangeOrderLine		= 0
						invoked.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod
						invoked.EndDate						= EndDate
						invoked.BudgetCodeBlock				= BudgetCodeBlock
						invoked.DimensionCode				= DimensionCode
						if (ReverseAmounts)
							invoked.Amount			= (Amount * -1)
							invoked.UnitsAmount		= (UnitsAmount * -1)
						else
							invoked.Amount			= Amount
							invoked.UnitsAmount		= UnitsAmount

					if (CopyLineComments)
						for each BudgetChangeOrderLineCommentRel
							invoke Create BudgetChangeOrderLineComment
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.Scenario					= LocalNewChangeOrderLine.Scenario
								invoked.BudgetChangeOrder			= LocalNewChangeOrderLine.BudgetChangeOrder
								invoked.BudgetChangeOrderLine		= LocalNewChangeOrderLine.BudgetChangeOrderLine
								invoked.Subject						= each.Subject
								invoked.Comment						= each.Comment
								invoked.From						= actor
								if (CopyLineAttachments)
									invoked.Attachment				= each.Attachment

