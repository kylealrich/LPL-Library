Scenario is a BusinessClass
	owned by GeneralLedger
	representative text is "<Description>"
	
	prefix is SCEN
	
	Ontology
		symbolic key is Scenario
		
	Patterns
	
	Persistent Fields
		Description
		CommitmentType
		


		Basis						is a ReportingBasis
		Status						is Numeric size 1
			States
				NotReady			value is 0
				Preparing			value is 1
				Ready				value is 2
				Clearing			value is 3
		
		Cycle						is Numeric 8
		Version						is AlphaUpper 80
			translatable
		
		IncrementalLoadStatus		is Numeric size 1
			protected
			States
				Inactive			value is 0
				Initiating			value is 1
				Available			value is 2
				Refreshing			value is 3
		IncrementalLoadStartPeriod	is a GeneralLedgerCalendarPeriod
		IncrementalLoadEndPeriod	is a GeneralLedgerCalendarPeriod

#ifdef module sharedfinance
		ApprovalCode
#endif
#ifndef module sharedfinance
		ApprovalCode					is AlphaUpper 30
#endif

		BalancedChanges				is Boolean   
			default label is "BalancedAmountChanges"
		ChangeCount					is Numeric 8 
		ChangeID					is Numeric 8 
		OriginalScenario			is like Scenario
			protected
		BudgetChangeOrder			is like BudgetChangeOrder 
		
		HasAccountingEntity			is Boolean
		HasPostingAccountingUnit	is Boolean
		HasPostingAccount			is Boolean
		HasPostingProject			is Boolean
		HasPostingDimension1		is Boolean
		HasPostingDimension2		is Boolean
		HasPostingDimension3		is Boolean
		HasPostingDimension4		is Boolean
		HasPostingDimension5		is Boolean
		HasPostingDimension6		is Boolean
		HasPostingDimension7		is Boolean
		HasPostingDimension8		is Boolean
		HasPostingDimension9		is Boolean
		HasPostingDimension10		is Boolean
		
		IsDEPMBudget				is Boolean
		IsLoading					is Boolean
		BalancedUnitChanges			is Boolean
		Exporting					is Boolean
		Locked						is Boolean
		ValidateStructureRelations	is Boolean
		AllowZeroBudget				is Boolean
		RetainZeroBudget			is Boolean
		ValidateUnitControl			is Boolean

	Derived Fields
		ExportingMessage is a MessageField
			"Exporting"
			
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforBudgetCode"
			
		ContextMessageText is a StringField
			type is Alpha 30
			restricted
			"Scenario<Scenario>"
			
		ScenarioDescription is a MessageField
			"<Scenario>_-_<Scenario.Description>"

		ScenarioText		is a LabelField
			restricted
			"Scenario"

		ScenarioDescriptionTitle is a LabelField
			restricted
			"Scenario_<ScenarioDescription>"
	
		ScenarioTitle		is a DerivedField
			type is MessageField
			if (Exists)
				return ScenarioDescriptionTitle
			else
				return ScenarioText

		LockedText				is a DerivedField
			type is Alpha 10
			if (Locked)
				return LockedMessage
			else
				return UnlockedMessage			
			 
		LockedMessage			is a MessageField
			restricted
			"Locked"
		UnlockedMessage			is a MessageField
			restricted
			"Unlocked"

		UploadInProgressMessage	is a MessageField
			"BudgetUploadInProgress"

	Conditions
		IsNotActiveStatus
			restricted
			when (Status.NotReady
			or Status.Clearing)
		DEPMDimensionMapExists
			restricted
			when (DEPMDimensionMapRel exists)
		Exists
			restricted
			when (Scenario exists)
		HasChild
			restricted
    		when (Scenario children exist)
    	NotBudget
    		restricted
    		when (Exists
    		and !CommitmentType.Budget)
    	CanChange
    		restricted
    		when (BudgetTemplatesRel not exists
    		and OriginalTotalsRel not exists

    		and CommitmentType.Budget
    		and Status.NotReady)
    	CanChangeCycle
    		restricted
    		when (OriginalTotalsRel not exists
    		and GeneralLedgerTranslationRate set not exists
    		and CommitmentType.Budget
    		and Status.NotReady)
    	CanChangeApprovalCode
    		restricted
    		when (PendingApprovalChangeOrdersRel not exists
    		and CommitmentType.Budget)
    	CanLoad
    		restricted
    		when (CommitmentType.Budget
    		and Status.NotReady)
    	CanIncrementalLoad
    		restricted
    		when (CommitmentType.Budget
    		and IncrementalLoadStatus.Available)
    	LoadAllowed
    		restricted
    		when (CommitmentType.Budget
    		and (Status.NotReady
    		or IncrementalLoadStatus.Available))
    	CanReset
    		restricted
    		when (CommitmentType.Budget
    		and IncrementalLoadStatus.Inactive
    		and not Locked
    		and (not Status.Preparing
    		and  not Status.Clearing))
		CanDeleteZeroBudget
			restricted
			when (CommitmentType.Budget
			and   (not Status.Preparing and not Status.Clearing)
			and   (not IncrementalLoadStatus.Initiating and not IncrementalLoadStatus.Refreshing)
			and   not Locked
			and	  not IsLoading 
			and   not Exporting)
    	CanSetReady
    		restricted
    		when (Status.NotReady)

    	IsReady
    		restricted
    		when (CommitmentType.Budget
    		and Status.Ready)
		DoNotChangeRetainZeroBudget
			restricted
			when (CommitmentType.Budget
			and	  (Status.Preparing or Status.Clearing)	 
			or 	  IncrementalLoadStatus.Refreshing	
			or	  Locked
			or	  Exporting)
    	CanQuickChange
    		restricted
    		when (IsReady
    		and !Locked)
    	CanLock
    		when (IsReady
    		and !Locked
    		and IncrementalLoadStatus.Inactive)
    	CanUnlock
    		when (IsReady
    		and Locked
    		and IncrementalLoadStatus.Inactive)
    	HasBudgetTemplates
    		restricted
    		when (BudgetTemplatesRel exists)
    	IsProjectReady
    		restricted
    		when (CommitmentType.Budget
    		and Status.Ready
    		and HasPostingProject)
    	CanStartIncrementalLoad
    		restricted
    		when (CommitmentType.Budget
    		and Status.Ready
    		and IncrementalLoadStatus.Inactive
    		and !Locked)
    	IsInIncrementalLoad
    		restricted
    		when (!IncrementalLoadStatus.Inactive)
		HasIncrementalLoads
			restricted
			when (IncrementalLoadsRel exists)
		CanDisplayChangeOrders
			restricted
			when (CommitmentType.Budget
			and Status.Ready)
		DisplayOldChanges
			restricted
			when (CommitmentType.Budget
			and BudgetChangesRel exists)
		DisplayChanges
			restricted
			when (CommitmentType.Budget
			and ReleasedLinesRel exists)
		ChangesRequireApproval
			restricted
			when (ApprovalCode entered)
    	CanExport

    		when (CommitmentType.Budget
    		and Status.Ready
     		and IncrementalLoadStatus.Inactive)

		HasParent
			restricted
			when (Parent entered)

	Sets
		ByDescription
			Sort Order
				FinanceEnterpriseGroup
				Description
				Scenario

	Relations
		IncrementalLoadsRel is a BudgetIncrementalLoad set
		BudgetChangeOrdersRel is a BudgetChangeOrder set
		BudgetImportRel is a BudgetImport set
		BudgetImportResultRel is a BudgetImportResult set
		CurrentBudgetImportRel
			one-to-many relation to BudgetImport
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CurrentFEG
				related.Scenario				= CurrentScenario
		MatchingBudgetImportRel
			one-to-one relation to BudgetImport
			Field Mapping uses ByDimensionCodeAndPeriod
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= LocalTargetScenario
				related.DimensionCode			= BudgetCodeBlock.DimensionCode
				related.BudgetPeriod			= LocalPeriod
		TargetScenarioImportRel
			one-to-many relation to BudgetImport
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= LocalTargetScenario
		DEPMDimensionMapRel
			one-to-one relation to DEPMDimensionMap
			Field Mapping uses symbolic key
				related.DEPMDimensionMap		= FinanceEnterpriseGroup
		MonthsInCalendarRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.TopNode							   = Basis.GeneralLedgerCalendar.TopNode
				related.PeriodType						   = 3
		PendingApprovalChangeOrdersRel
			one-to-many relation to BudgetChangeOrder
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
				related.Status					= 1			
		InProcessChangeOrdersRel
			one-to-many relation to BudgetChangeOrder
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
			Instance Selection
				where (related.Status.PendingApproval
				or related.Status.EditInProgress
				or related.Status.PreparingRelease
				or related.Status.RefreshInProgress)
		ReleasedLinesRel
			one-to-many relation to BudgetChangeOrderLine
			Field Mapping uses ByReleased
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
				related.Released				= true
		ChangeLinesWithinLoadRangeRel
			one-to-many relation to BudgetChangeOrderLine
			Field Mapping uses ByReleased
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod 			>= IncrementalLoadStartPeriod
				and related.GeneralLedgerCalendarPeriod 			<= IncrementalLoadEndPeriod)
		MatchingScenariosRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.IsDEPMBudget
				and related.Cycle					= Cycle
				and related.Version					= Version
				and related.Scenario				!= Scenario)
		OriginalScenarioRel
			one-to-one relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= OriginalScenario
		OriginalTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= OriginalScenario
		TotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
		ChildrenRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Parent = Scenario
				and related.ChangeID > 0)
		AllChildrenRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Parent = Scenario)
		AllTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= AllChildrenRel.Scenario
		BudgetChangesRel
			one-to-many relation to BudgetChange
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
		BudgetGroupAmountRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
		RollupRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.CommitmentType = CommitmentType.Rollup)
		BudgetTemplatesRel is a BudgetTemplate set
		CurrentBudgetTemplatesRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CurrentFEG
				related.Scenario				= CurrentScenario
		BudgetTemplateBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= Scenario
				related.BudgetTemplate			= LocalBudgetTemplate
		CurrentBudgetTemplateBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CurrentFEG
				related.Scenario				= CurrentScenario
				related.BudgetTemplate			= LocalBudgetTemplate
		TotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"
		EndDatesForBudgetPeriodRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = Basis.GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = LocalPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)
		ChangeOrderGroupTotalsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = LocalBudgetChangeOrder.UniqueID
		ChangeOrderBudgetErrorsRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup			  = LocalBudgetChangeOrder.UniqueID
		BudgetQueueRel
			one-to-one relation to AsyncQueueDefinition
			Field Mapping uses symbolic key
				related.AsyncQueueDefinition	= "BudgetEdit"
				
		AccountAnalysisSettingsRel
			one-to-many relation to AccountAnalysisSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		GLTranslationRateInterfaceRel
			one-to-many relation to GLTranslationRateInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		ProjectContractRel
			one-to-many relation to ProjectContract
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		ProjectContractChangeRequestRel
			one-to-many relation to ProjectContractChangeRequest
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		ProjectReportingSettingsRel
			one-to-many relation to ProjectReportingSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		ProjectReportingSettingsAllRel
			one-to-many relation to ProjectReportingSettingsAll
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario = Scenario ) 
		InCompleteBudgetEditBatchRel 
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByCompletionTime
				related.CompletionTime				= blank
				related.BudgetEditCallBackWrap.FEG	= FinanceEnterpriseGroup
			Instance Selection
				where (related.StartTime != blank) 
		TargetScenarioRel
			one-to-one relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.Scenario				     = LocalTargetScenario
		TargetGeneralLedgerCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= TargetScenarioRel.Basis.CalendarTopNode
				related.PeriodType		 			= 3 
				related.EndDateJulian				>= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian		<= LocalJulianDate)

		ScenarioShadowRel is a ScenarioShadow(Scenario) set
		DescendantsRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.Scenario	   		   = ShadowDescendantsRel.Scenario
		ShadowDescendantsRel
			one-to-many relation to ScenarioShadow
			delete cascades
			Field Mapping uses BySummaryScenario
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ParentScenario				= Scenario
		AllScenarioShadowRel
			one-to-many relation to ScenarioShadow
			delete cascades
			Field Mapping uses symbolic key


	Local Fields
		ScenarioView			is a Scenario view
		BudgetImportView		is a BudgetImport view
		Counter					is Numeric 3
		AsyncId					is a AsyncActionRequest
		
		LocalStartPeriod		is like GeneralLedgerCalendarPeriod
		LocalEndPeriod			is like GeneralLedgerCalendarPeriod
		LocalPeriod				is a GeneralLedgerCalendarPeriod
		ChangeOrderView			is a BudgetChangeOrder view
		LocalBudgetChangeOrder	is a BudgetChangeOrder
		LocalChangeOrderLine	is a BudgetChangeOrderLine
		LocalBudgetTemplate		is a BudgetTemplate	
		ClusterCounter			is Decimal 4
		BackgroundGroup			is AlphaUpper 200
		CurrentScenario			is like Scenario 
		CurrentFEG				is like FinanceEnterpriseGroup
		NotParallel				is Boolean
		LocalTargetScenario		is like Scenario
		LocalJulianDate			is Alpha 7
		BudgetCodeBlockStructureValidation
		BudgetCodeBlock

	Field Rules
			
		Description
			required
			if (Description = "[RebuildTest]!!")
				confirmation required
					"ThisDescriptionShouldOnlyBeUsedForTesting._Proceed?"
			if (Description changed)
				invoke ResetDescription OriginalScenarioRel
				
		IsDEPMBudget
			constraint (FinanceEnterpriseGroup.UseDEPMBudgeting)
				"FinanceEnterpriseGroupNotUsing_EPM"
				
		Cycle	
			if (!CanChangeCycle)
				cannot be changed
			constraint (IsDEPMBudget)
				"CanOnlySetCycleOrVersionFor_EPMScenarios"
			constraint (Version entered)
				"VersionMustBeSet"
			constraint (MatchingScenariosRel not exists)
				"OnlyOne_EPMScenarioMayHaveThisCycleAndVersion"

		Version	
			if (!CanChangeCycle)
				cannot be changed
			constraint (IsDEPMBudget)
				"CanOnlySetCycleOrVersionSetFor_EPMScenarios"
			constraint (Cycle entered)
				"CycleMustBeSet"
				
		ApprovalCode
			if (!CanChangeApprovalCode)
				cannot be changed
					"ChangeRequestsArePendingApproval"
					
		CommitmentType
			initial value is CommitmentType.Budget
			cannot be changed
		
		HasPostingAccountingUnit
			if (!CanChange)
				cannot be changed
			if (HasPostingAccountingUnit)
				HasAccountingEntity = true
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.AccountingUnitSelected)
					"DimensionNotMappedTo_EPM"
		HasAccountingEntity	
			if (!CanChange)
				cannot be changed
		HasPostingAccount	
			if (!CanChange)
				cannot be changed
		HasPostingProject	
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.ProjectSelected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension1
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension1Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension2
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension2Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension3
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension3Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension4
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension4Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension5
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension5Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension6
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension6Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension7
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension7Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension8
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension8Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension9
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension9Selected)
					"DimensionNotMappedTo_EPM"
		HasPostingDimension10
			if (!CanChange)
				cannot be changed
			if (IsDEPMBudget)
				constraint (DEPMDimensionMapRel.Dimension10Selected)
					"DimensionNotMappedTo_EPM"
				
		Basis
			if (CommitmentType.Budget)
				required
				constraint (Basis.IsABudgetBasis)
					"BasisMustBeBudgetBasis"
				if (IsDEPMBudget)
					constraint (Basis = DEPMDimensionMapRel.Basis)
						"BasisMustBeSameAs_EPMDimensionMapBasis"
			if (!CanChange)
				cannot be changed

		AllowZeroBudget
			if (old AllowZeroBudget
			and BudgetImport set exists)
				cannot be changed
					"FieldCannotBeChanged;BudgetImportExists"

		RetainZeroBudget
			if (not AllowZeroBudget)
				initialize
			if (IncrementalLoadStatus.Initiating)
				cannot be changed
					"FieldCannotBeChanged;_Incremental_LoadIs_Initiating"
			if (IsLoading)
				cannot be changed
					"FieldCannotBeChanged;BudgetDataIsImporting"
			if (DoNotChangeRetainZeroBudget)
				cannot be changed
	Rule Blocks
		CreateOrUpdateRules
			if (CommitmentType.Budget)
				initialize Counter
				if (HasAccountingEntity)
					Counter += 1
				if (HasPostingAccountingUnit)
					Counter += 1
				if (HasPostingAccount)
					Counter += 1
				if (HasPostingProject)
					Counter += 1
				if (HasPostingDimension1)
					Counter += 1
				if (HasPostingDimension2)
					Counter += 1
				if (HasPostingDimension3)
					Counter += 1
				if (HasPostingDimension4)
					Counter += 1
				if (HasPostingDimension5)
					Counter += 1
				if (HasPostingDimension6)
					Counter += 1
				if (HasPostingDimension7)
					Counter += 1
				if (HasPostingDimension8)
					Counter += 1
				if (HasPostingDimension9)
					Counter += 1
				if (HasPostingDimension10)
					Counter += 1
				constraint (Counter entered)
					"MustSpecifyDimensions"
				if (ValidateStructureRelations)
					constraint (Counter > 1)
						"Field_Validate_Structure_RelationsCannotBeChecked;BudgetScenarioHasOnlyOneDimension"
		
		CreateImport
			invoke Create BudgetImport
				invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				invoked.Scenario					= TargetScenario
				invoked.Amount						= each.NetTransactionAmount
				invoked.UnitsAmount					= each.NetUnitsAmount
				invoked.Currency					= each.GeneralLedgerTotal.Currency
				invoked.BudgetPeriod				= LocalPeriod
				invoked.AccountingEntity			= each.AccountingEntity
		        invoked.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
		        invoked.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount
		        invoked.Project						= each.GeneralLedgerTotal.Project
				invoked.FinanceDimension1			= each.FinanceDimension1
				invoked.FinanceDimension2			= each.FinanceDimension2
				invoked.FinanceDimension3			= each.FinanceDimension3
				invoked.FinanceDimension4			= each.FinanceDimension4
				invoked.FinanceDimension5			= each.FinanceDimension5
				invoked.FinanceDimension6			= each.FinanceDimension6
				invoked.FinanceDimension7			= each.FinanceDimension7
				invoked.FinanceDimension8			= each.FinanceDimension8
				invoked.FinanceDimension9			= each.FinanceDimension9
				invoked.FinanceDimension10			= each.FinanceDimension10
				invoked.LocalBypassEdits			= true

		UpdateImport
			invoke Update MatchingBudgetImportRel.BudgetImport
				assign result to BudgetImportView
				invoked.Amount						= each.NetTransactionAmount + MatchingBudgetImportRel.Amount 
				invoked.UnitsAmount					= each.NetUnitsAmount + MatchingBudgetImportRel.UnitsAmount
				invoked.Currency					= each.GeneralLedgerTotal.Currency 
				invoked.BudgetPeriod				= LocalPeriod
				invoked.AccountingEntity			= each.AccountingEntity
		        invoked.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
		        invoked.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount
		        invoked.Project						= each.GeneralLedgerTotal.Project
				invoked.FinanceDimension1			= each.FinanceDimension1
				invoked.FinanceDimension2			= each.FinanceDimension2
				invoked.FinanceDimension3			= each.FinanceDimension3
				invoked.FinanceDimension4			= each.FinanceDimension4
				invoked.FinanceDimension5			= each.FinanceDimension5
				invoked.FinanceDimension6			= each.FinanceDimension6
				invoked.FinanceDimension7			= each.FinanceDimension7
				invoked.FinanceDimension8			= each.FinanceDimension8
				invoked.FinanceDimension9			= each.FinanceDimension9
				invoked.FinanceDimension10			= each.FinanceDimension10
				invoked.LocalBypassEdits			= true

		PrepareBudgetImport			
			LocalJulianDate									= each.GeneralLedgerTotal.EntityYearPeriod
			LocalPeriod										= first TargetGeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod

			if (each.Scenario = OriginalScenario)

				include CreateImport
			else 
				BudgetCodeBlock.AccountingEntity				= each.AccountingEntity
		        BudgetCodeBlock.AccountingUnit					= each.GeneralLedgerTotal.AccountingUnit
		        BudgetCodeBlock.GeneralLedgerChartAccount		= each.GeneralLedgerTotal.GeneralLedgerChartAccount
		        BudgetCodeBlock.Project							= each.GeneralLedgerTotal.Project
				BudgetCodeBlock.FinanceDimension1				= each.FinanceDimension1
				BudgetCodeBlock.FinanceDimension2				= each.FinanceDimension2
				BudgetCodeBlock.FinanceDimension3				= each.FinanceDimension3
				BudgetCodeBlock.FinanceDimension4				= each.FinanceDimension4
				BudgetCodeBlock.FinanceDimension5				= each.FinanceDimension5
				BudgetCodeBlock.FinanceDimension6				= each.FinanceDimension6
				BudgetCodeBlock.FinanceDimension7				= each.FinanceDimension7
				BudgetCodeBlock.FinanceDimension8				= each.FinanceDimension8
				BudgetCodeBlock.FinanceDimension9				= each.FinanceDimension9
				BudgetCodeBlock.FinanceDimension10				= each.FinanceDimension10
				if (MatchingBudgetImportRel.BudgetImport exists)
					include UpdateImport
				else
					include CreateImport
			Counter += 1
			if (Counter = 300)
				initialize Counter
				commit transaction													

		LoadSetup
			initialize ClusterCounter
			if (PrmNumClusters <= 1
			or InCompleteBudgetEditBatchRel exists)
				PrmNumClusters	= 1
				NotParallel		= true
			else
				BackgroundGroup = FinanceEnterpriseGroup + "-" + Scenario + "-1-" + current timestamp
			constraint (!IsLoading)
				"AnotherImportIsRunning"
			IsLoading		= true
			if (NotParallel)
				if (AsyncId entered)  
					invoke LoadNoParallel BudgetImport
						assign async action request id to AsyncId
						run after AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario				= Scenario
						invoked.PrmRunGroup				= PrmRunGroup
				else
					invoke LoadNoParallel BudgetImport
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario				= Scenario
						invoked.PrmRunGroup				= PrmRunGroup
				
				invoke ClearIsLoadingFlag in background
					assign async action request id to AsyncId
					run after AsyncId
			else
				while (ClusterCounter < PrmNumClusters)


					if (AsyncId entered)  
						invoke Load BudgetImport in background group(BackgroundGroup)
							run after AsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmScenario				= Scenario
							invoked.PrmNumClusters			= PrmNumClusters
							invoked.PrmCluster				= ClusterCounter
							invoked.PrmRunGroup				= PrmRunGroup
					else
						invoke Load BudgetImport in background group(BackgroundGroup)
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmScenario				= Scenario
							invoked.PrmNumClusters			= PrmNumClusters
							invoked.PrmCluster				= ClusterCounter
							invoked.PrmRunGroup				= PrmRunGroup
					
					ClusterCounter += 1
					
				invoke ClearIsLoadingFlag in background
					assign async action request id to AsyncId
					run after background group(BackgroundGroup)

		CreateShadowForParentScenario


				display "SCENARIO_CREATESHADOW_FOR_PARENT"
				invoke Create ScenarioShadow
					invoked.FinanceEnterpriseGroup 	   = FinanceEnterpriseGroup
					invoked.Scenario				   = Scenario
					invoked.ParentScenario		   	   = Scenario
					invoked.CommitmentType			   = CommitmentType

	Actions
		Create is an Action
			restricted
			Exit Rules


				display "SCENARIO:CREATE_ACTION_EXIT_CHILDSCENARIO"
				invoke Create ScenarioShadow
					invoked.FinanceEnterpriseGroup 	   = FinanceEnterpriseGroup
					invoked.Scenario				   = Scenario
					invoked.ParentScenario		   	   = Parent
					invoked.CommitmentType			   = CommitmentType

		T2VCreate is a Create Action
			restricted
			default label is untranslatable

		CreateCommitments is a Create Action
			restricted
			Entrance Rules
				constraint (RollupRel not exists)
					"CommitmentScenariosHaveAlreadyBeenCreated"

				Description		= "Total Obligations"
				CommitmentType	= CommitmentType.Rollup
				Status			= Status.Ready
			Exit Rules
				include CreateShadowForParentScenario
				invoke Create
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Parent					= Scenario
					invoked.Description				= "Actuals"
					invoked.CommitmentType			= CommitmentType.Actuals
					invoked.Status					= Status.Ready
				invoke Create
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Parent					= Scenario
					invoked.Description				= "Encumbrances"
					invoked.CommitmentType			= CommitmentType.Encumbrances
					invoked.Status					= Status.Ready
				invoke Create
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Parent					= Scenario
					invoked.Description				= "Commitments"
					invoked.CommitmentType			= CommitmentType.Commitments
					invoked.Status					= Status.Ready

		CreateBudgetScenario is a Create Action
			Entrance Rules
				display "SCENARIO:CREATEBUDGETSCENARIO_ENTRANCE"
				if (IsDEPMBudget)
					constraint (DEPMDimensionMapExists)
						"EPMDimensionMapDoesNotExist"
				CommitmentType	= CommitmentType.Budget
			Action Rules
				display "SCENARIO:CREATEBUDGETSCENARIO_ACTION"
				include CreateOrUpdateRules
			Exit Rules
				display "SCENARIO:CREATEBUDGETSCENARIO_EXIT_CREATINGPARENT"
				include CreateShadowForParentScenario
				invoke Create
					assign result to ScenarioView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Parent					= Scenario
					invoked.Description				= "Original " + Scenario.Description
					invoked.CommitmentType			= CommitmentType.BudgetOriginal
					invoked.Status					= Status.Ready
				OriginalScenario = ScenarioView.Scenario

		Update is an Action
			valid when (CommitmentType.Budget)
			Action Rules
				if (IsDEPMBudget)
					constraint (DEPMDimensionMapExists)
						"EPMDimensionMapDoesNotExist"
				
				constraint (not Exporting)
					"ScenarioExportHasBeenPerformed._RefreshOfScreenNeeded."


				if (IncrementalLoadStatus changed)
					IncrementalLoadStatus      = old IncrementalLoadStatus
					IncrementalLoadStartPeriod = old IncrementalLoadStartPeriod
					IncrementalLoadEndPeriod   = old IncrementalLoadEndPeriod

				include CreateOrUpdateRules
			Exit Rules
				constraint (CommitmentType.Budget)
					"OperationOnlyPermittedOnBudgetScenarios"

		ResetDescription is an Instance Action
			restricted
			Action Rules
				Description = "Original " + Parent.Description

		ChangeRollupDescription is an Instance Action
			valid when (CommitmentType.Rollup)

			Action Rules
				Description		= "Total Obligations"
				
		Delete is an Action
			restricted

		UploadBudget is an Instance Action
			valid when (CanLoad)
			completion message is "ProcessingBudgetImportRecords"
			Parameters
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"
				PrmNumClusters	is Decimal 4
					default label is "NumberOfClustersInParallel"
			Parameter Rules
				PrmNumClusters
					default to 1
					constraint (PrmNumClusters > 0)
						"NumberOfClustersMustBePositive"
			Action Rules
				constraint (instance count of BudgetImportRel > 0)
					"BudgetImportDataNotFound"
				include LoadSetup

		DeleteRates is an Instance Action
			restricted
			valid when (CanLoad)
			Action Rules
				invoke Delete GeneralLedgerTranslationRate set

		QuickChange is an Instance Action
			valid when (CanQuickChange)
			completion message is "ReleasingBudgetChangeRequest"
			Parameters
				ChangeAmount			is an InternationalAmount
				BudgetCurrency			is a Currency
				ChangeUnitsAmount		is an InternationalAmount
				FromPeriod				is a GeneralLedgerCalendarPeriod
				ToPeriod				is a GeneralLedgerCalendarPeriod
				FromAddress				is a BudgetCodeBlock
				ToAddress				is a BudgetCodeBlock
				ChangeDescription		is a Description
				TreatBlankProjectAsEmpty		is Boolean
				TreatBlankDimension1AsEmpty		is Boolean
				TreatBlankDimension2AsEmpty		is Boolean
				TreatBlankDimension3AsEmpty		is Boolean
				TreatBlankDimension4AsEmpty		is Boolean
				TreatBlankDimension5AsEmpty		is Boolean
				TreatBlankDimension6AsEmpty		is Boolean
				TreatBlankDimension7AsEmpty		is Boolean
				TreatBlankDimension8AsEmpty		is Boolean
				TreatBlankDimension9AsEmpty		is Boolean
				TreatBlankDimension10AsEmpty	is Boolean
			Parameter Rules
				ChangeDescription
					required
				ChangeAmount
					constraint (ChangeAmount > 0)
						"ChangeAmountMustBePositive"
				BudgetCurrency
					required
				ChangeUnitsAmount
					constraint (ChangeUnitsAmount > 0)
						"ChangeAmountMustBePositive"
				FromPeriod

					constraint (FromPeriod.TopNode = Basis.GeneralLedgerCalendar.TopNode)
						"PeriodMustBeInCalendar<Basis.GeneralLedgerCalendar>"
					constraint (FromPeriod.PeriodType.Month)
						"PeriodMustBeMonth"
				ToPeriod
					default to FromPeriod
					constraint (ToPeriod.TopNode = Basis.GeneralLedgerCalendar.TopNode)
						"PeriodMustBeInCalendar<Basis.GeneralLedgerCalendar>"
					constraint (ToPeriod.PeriodType.Month)
						"PeriodMustBeMonth"
			Action Rules
				constraint (!Locked)
					"ScenarioIsLocked"
				constraint (ChangeAmount entered
				or ChangeUnitsAmount entered)
					"MustSpecifyAmountOrUnitsAmount"
				constraint (FromAddress entered
				or ToAddress entered)
					"MustEnterFromOrToAddress"
				constraint (FromPeriod entered
				or ToPeriod entered)
					"MustEnterFromOrToPeriod"
				if (BalancedChanges)
					constraint (FromAddress entered
					and ToAddress entered)
						"MustEnterBothFromAndToAddressesForBalancedChange"
				if (ToAddress entered
				or  TreatBlankProjectAsEmpty 	or TreatBlankDimension1AsEmpty
				or 	TreatBlankDimension2AsEmpty or TreatBlankDimension3AsEmpty
				or 	TreatBlankDimension4AsEmpty or TreatBlankDimension5AsEmpty
				or 	TreatBlankDimension6AsEmpty	or TreatBlankDimension7AsEmpty		
				or 	TreatBlankDimension8AsEmpty	or TreatBlankDimension9AsEmpty
				or 	TreatBlankDimension10AsEmpty)
					if (ToAddress.AccountingEntity not entered)
						ToAddress.AccountingEntity					= FromAddress.AccountingEntity
					if (ToAddress.AccountingUnit not entered)
						ToAddress.AccountingUnit						= FromAddress.AccountingUnit
					if (ToAddress.GeneralLedgerChartAccount not entered)
						ToAddress.GeneralLedgerChartAccount				= FromAddress.GeneralLedgerChartAccount

					if (TreatBlankProjectAsEmpty)
						constraint (ToAddress.Project not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.ProjectLabel>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.Project not entered)
							ToAddress.Project							= FromAddress.Project

					if (TreatBlankDimension1AsEmpty)
						constraint (ToAddress.FinanceDimension1 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension1Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension1 not entered)
							ToAddress.FinanceDimension1					= FromAddress.FinanceDimension1

					if (TreatBlankDimension2AsEmpty)
						constraint (ToAddress.FinanceDimension2 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension2Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension2 not entered)
							ToAddress.FinanceDimension2					= FromAddress.FinanceDimension2

					if (TreatBlankDimension3AsEmpty)
						constraint (ToAddress.FinanceDimension3 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension3Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension3 not entered)
							ToAddress.FinanceDimension3					= FromAddress.FinanceDimension3

					if (TreatBlankDimension4AsEmpty)
						constraint (ToAddress.FinanceDimension4 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension4Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension4 not entered)
							ToAddress.FinanceDimension4					= FromAddress.FinanceDimension4

					if (TreatBlankDimension5AsEmpty)
						constraint (ToAddress.FinanceDimension5 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension5Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension5 not entered)
							ToAddress.FinanceDimension5					= FromAddress.FinanceDimension5

					if (TreatBlankDimension6AsEmpty)
						constraint (ToAddress.FinanceDimension6 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension6Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension6 not entered)
							ToAddress.FinanceDimension6					= FromAddress.FinanceDimension6

					if (TreatBlankDimension7AsEmpty)
						constraint (ToAddress.FinanceDimension7 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension7Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension7 not entered)
							ToAddress.FinanceDimension7					= FromAddress.FinanceDimension7

					if (TreatBlankDimension8AsEmpty)
						constraint (ToAddress.FinanceDimension8 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension8Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension8 not entered)
							ToAddress.FinanceDimension8					= FromAddress.FinanceDimension8

					if (TreatBlankDimension9AsEmpty)
						constraint (ToAddress.FinanceDimension9 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension9Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension9 not entered)
							ToAddress.FinanceDimension9					= FromAddress.FinanceDimension9

					if (TreatBlankDimension10AsEmpty)
						constraint (ToAddress.FinanceDimension10 not entered)
							"CannotEnableThe<FinanceEnterpriseGroup.FinanceDimension10Label>IsBlankOptionIfAValueIsEntered"
					else
						if (ToAddress.FinanceDimension10 not entered)
							ToAddress.FinanceDimension10				= FromAddress.FinanceDimension10
					
				if (FromAddress entered
				and ToAddress entered)
					if (FromPeriod = ToPeriod)
						constraint (FromAddress != ToAddress)
							"FromAndToAddressesAndPeriodsAreTheSame"
					
				invoke Create BudgetChangeOrder
					assign result to ChangeOrderView
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Scenario				= Scenario
					invoked.Description				= ChangeDescription
					invoked.Currency				= BudgetCurrency
				LocalBudgetChangeOrder = ChangeOrderView.BudgetChangeOrder
				if (FromAddress entered)
					invoke Create BudgetChangeOrderLine
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.Scenario					= Scenario
						invoked.BudgetChangeOrder			= LocalBudgetChangeOrder
						invoked.BudgetCodeBlock				= FromAddress
						invoked.GeneralLedgerCalendarPeriod	= FromPeriod
						invoked.Amount						= -1*ChangeAmount
						invoked.UnitsAmount					= -1*ChangeUnitsAmount
						invoked.TransientByPassOverBudgetMessage = true
				if (ToAddress entered)
					invoke Create BudgetChangeOrderLine
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.Scenario					= Scenario
						invoked.BudgetChangeOrder			= LocalBudgetChangeOrder
						invoked.BudgetCodeBlock				= ToAddress
						invoked.GeneralLedgerCalendarPeriod	= ToPeriod
						invoked.Amount						= ChangeAmount
						invoked.UnitsAmount					= ChangeUnitsAmount
						invoked.TransientByPassOverBudgetMessage = true		
				
				confirmation required
        			"SubmitWillCreateAndReleaseTheBudgetChangeRequest.Proceed?"  		
					
				invoke Release LocalBudgetChangeOrder
						
		TransitionToReady is an Instance Action
			restricted
			Action Rules
				if (Status.Preparing)
					Status = Status.Ready

		TransitionToNotReady is an Instance Action
			restricted
			Action Rules
				if (Status.Clearing)
					Status		= Status.NotReady
					ChangeCount = 0

		ClearIsLoadingFlag is an Instance Action

			confirmation required
				"ThisActionShouldOnlyBeRunIfAPreviousLoadHasFailedAndCannotBeRequeued"
			Action Rules
				IsLoading = false

				
		DeleteThisInstance is an Instance Action
			restricted
			Action Rules
				invoke Delete Scenario
			
		DeleteScenarioChildren is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				SkipOriginal					is Boolean
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario.Parent				= PrmScenario)
			Action Rules
				Instance Rules
					if (!SkipOriginal
					or ChangeID != 0)
						invoke Delete Scenario

		SetReady is an Instance Action
			valid when (CanSetReady)
			completion message is "PreparingBudget"
			Action Rules


				constraint (OriginalTotalsRel exists)
					"BudgetImportRecordsHaveNotBeenLoaded"
				Status = Status.Preparing




				invoke Refresh TotalCubeRel in background

					assign async action request id to AsyncId
				invoke TransitionToReady in background
					run after AsyncId

		RefreshCube is an Instance Action
			valid when (IsReady)
			completion message is "CubeRefreshInitiated"
			Action Rules
				invoke Refresh TotalCubeRel in background

		StartIncrementalLoad is an Instance Action
			valid when (CanStartIncrementalLoad)
			confirmation required
			Parameters
				FromPeriod				is a GeneralLedgerCalendarPeriod
				ToPeriod				is a GeneralLedgerCalendarPeriod
				ClearDataInPeriodRange	is Boolean
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"
				PrmNumClusters			is Decimal 4
					default label is "NumberOfClustersInParallel"
			Parameter Rules
				FromPeriod
					required
					constraint (FromPeriod.TopNode = Basis.GeneralLedgerCalendar.TopNode)
						"PeriodMustBeInCalendar<Basis.GeneralLedgerCalendar>"
					constraint (FromPeriod.PeriodType.Month)
						"PeriodMustBeMonth"
				ToPeriod
					default to FromPeriod
					constraint (ToPeriod.TopNode = Basis.GeneralLedgerCalendar.TopNode)
						"PeriodMustBeInCalendar<Basis.GeneralLedgerCalendar>"
					constraint (ToPeriod.PeriodType.Month)
						"PeriodMustBeMonth"
					constraint (ToPeriod >= FromPeriod)
						"ToPeriodCannotBeBeforeFromPeriod"
				ClearDataInPeriodRange
					initial value is false
				PrmNumClusters
					default to 1
					constraint (PrmNumClusters > 0)
						"NumberOfClustersMustBePositive"
			Action Rules
				constraint (!Exporting)
					"ScenarioIsExporting._PleaseWait."
				constraint (!Locked)
					"ScenarioIsLocked"
				for each BudgetTemplatesRel
					if (each.Status.Ready)
						LocalBudgetTemplate			= each.BudgetTemplate
						constraint (BudgetTemplateBudgetAmountsRel not exist)
							"BudgetTemplate<LocalBudgetTemplate>HasLocalBudgetCopy.RunActionClearLocalBudgetCopy"		
				IncrementalLoadStatus = IncrementalLoadStatus.Initiating
				IncrementalLoadStartPeriod = FromPeriod
				IncrementalLoadEndPeriod = ToPeriod
				invoke Create BudgetIncrementalLoad
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.Scenario				= Scenario
					invoked.FromPeriod				= FromPeriod
					invoked.ToPeriod				= ToPeriod
					invoked.DataClearedInPeriodRange= ClearDataInPeriodRange
				if (ClearDataInPeriodRange)
					LocalPeriod = FromPeriod
					LocalStartPeriod = first EndDatesForBudgetPeriodRel.GeneralLedgerCalendarPeriod 
					LocalPeriod = ToPeriod
					LocalEndPeriod = last EndDatesForBudgetPeriodRel.GeneralLedgerCalendarPeriod
					invoke DeleteBudgetDataInRange GeneralLedgerTotal in background
						assign async action request id to AsyncId
						invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.PrmScenario					= OriginalScenario
						invoked.PrmFromPeriod				= LocalStartPeriod
						invoked.PrmToPeriod					= LocalEndPeriod

					invoke Refresh TotalCubeRel in background
						run after AsyncId
						assign async action request id to AsyncId

				if (instance count of BudgetImportRel > 0) 
					include LoadSetup					
					invoke TransitionToIncrementalLoadAvailable in background
						run after AsyncId
				else
					if (AsyncId entered)
						invoke TransitionToIncrementalLoadAvailable in background
							run after AsyncId
					else
						IncrementalLoadStatus = IncrementalLoadStatus.Available
					
























































































		UploadIncrementalBudget is an Instance Action
			valid when (IncrementalLoadStatus.Available)
			Parameters
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"			
				PrmNumClusters	is Decimal 4
					default label is "NumberOfClustersInParallel"
			Parameter Rules
				PrmNumClusters
					default to 1
					constraint (PrmNumClusters > 0)
						"NumberOfClustersMustBePositive"
			Action Rules
				constraint (instance count of BudgetImportRel > 0)
					"BudgetImportDataNotFound"
				include LoadSetup

		CompleteIncrementalLoad is an Instance Action
			valid when (IncrementalLoadStatus.Available)
			confirmation required
			Action Rules


				IncrementalLoadStatus = IncrementalLoadStatus.Refreshing
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
				invoke TransitionToIncrementalLoadComplete in background
					run after AsyncId

		TransitionToIncrementalLoadAvailable is an Instance Action
			restricted
			Action Rules
				if (IncrementalLoadStatus.Initiating)
					IncrementalLoadStatus = IncrementalLoadStatus.Available

		TransitionToIncrementalLoadRefreshing is an Instance Action
			restricted
			Action Rules
				if (IncrementalLoadStatus.Initiating)
					IncrementalLoadStatus = IncrementalLoadStatus.Refreshing

		TransitionToIncrementalLoadComplete is an Instance Action
			restricted
			Action Rules
				IncrementalLoadStatus = IncrementalLoadStatus.Inactive
				initialize IncrementalLoadStartPeriod
				initialize IncrementalLoadEndPeriod

		DeleteAllChangeOrders is an Instance Action
			restricted
			Action Rules
				initialize Counter
				for each BudgetChangeOrdersRel
					LocalBudgetChangeOrder = each.BudgetChangeOrder
					for each ChangeOrderGroupTotalsRel
						invoke Purge each.BudgetTemplateGroupTotal
						Counter += 1
						if (Counter = 300)
							initialize Counter
							commit transaction
					invoke Purge ChangeOrderBudgetErrorsRel
					invoke Delete LocalBudgetChangeOrder

		Reset is an Instance Action
			valid when (CanReset)
			confirmation required
				"Warning:ThisWillDeleteAllExistingBudgetDataForThisScenario.WouldYouLikeToContinue?"
			Action Rules
				constraint (!Exporting)
					"ScenarioIsExporting._PleaseWait."
				Status = Status.Clearing
				IsLoading = false
				
				invoke DeleteBudgetData GeneralLedgerTotal in background
					assign async action request id to AsyncId
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmScenario					= OriginalScenario
				if (BudgetGroupAmountRel exists)
					invoke DeleteScenarioAmounts BudgetGroupAmount in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
				invoke DeleteAllLazyGroupsForScenario BudgetGroupLazyInit	
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
				if (ChangeCount > 0
				or BudgetChangeOrdersRel exists)
					for each ChildrenRel
						invoke DeleteBudgetData GeneralLedgerTotal in background
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmScenario				= each.Scenario
					invoke DeleteAllForScenario BudgetChangeOrderLine in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
					invoke DeleteAllChangeOrders in background
						run after AsyncId
						assign async action request id to AsyncId

					invoke DeleteScenarioChanges BudgetChange in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						
				invoke DeleteScenarioIncrLoadRecs BudgetIncrementalLoad in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario






				if (BudgetImportResultRel exists) 
					invoke DeleteScenarioImportResults BudgetImportResult in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
				invoke DeleteScenarioChildren Scenario in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.SkipOriginal				= true
				invoke Refresh TotalCubeRel in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke TransitionToNotReady in background
					run after AsyncId
				
		DeleteBudgetImport is an Instance Action
			completion message is "DeleteBudgetImportScheduled"				
			valid when (CommitmentType.Budget)
			Action Rules
				if (instance count of BudgetImport set < 200)				
					invoke Delete BudgetImport set
				else
					invoke  DeleteBudgetImportSet in background				
					
		DeleteBudgetImportSet is an Instance Action
			restricted
			Action Rules
				for each BudgetImport set
					invoke Delete each
					Counter = Counter + 1
					if (Counter = 200)
						commit transaction
						initialize Counter						

		DeleteScenario is an Instance Action
			valid when (CanReset)
			confirmation required
			Action Rules
				constraint (!HasBudgetTemplates)
					"BudgetTemplatesExistForScenario<Scenario>-<Description>"
					

				constraint(first AccountAnalysisSettingsRel.AccountAnalysisSettings not entered)
					"AccountAnalysisSettings<first AccountAnalysisSettingsRel.AccountAnalysisSettings>ReferencesThisScenario" 
				constraint(first GLTranslationRateInterfaceRel.GLTranslationRateInterface not entered) 
					"GLTranslationRateInterface<first GLTranslationRateInterfaceRel.GLTranslationRateInterface>ReferencesThisScenario" 
				constraint(first ProjectContractRel.ProjectContract not entered) 
					"ProjectContract<first ProjectContractRel.ProjectContract>ReferencesThisScenario" 
				constraint(first ProjectContractChangeRequestRel.ProjectContractChangeRequest not entered) 
					"ProjectContractChangeRequest<first ProjectContractChangeRequestRel.ProjectContractChangeRequest>ReferencesThisScenario" 
				constraint(first ProjectReportingSettingsRel.ProjectReportingSettings not entered) 
					"ProjectReportingSettings<first ProjectReportingSettingsRel.ProjectReportingSettings>ReferencesThisScenario" 
				constraint(first ProjectReportingSettingsAllRel.ProjectReportingSettingsAll not entered) 
					"ProjectReportingSettings<first ProjectReportingSettingsAllRel.ProjectReportingSettingsAll>ReferencesThisScenario" 
				
				Status = Status.Clearing
				
				invoke DeleteBudgetData GeneralLedgerTotal in background
					assign async action request id to AsyncId
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmScenario					= OriginalScenario
				invoke DeleteScenarioRates GeneralLedgerTranslationRate in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
				if (BudgetGroupAmountRel exists)
					invoke DeleteScenarioAmounts BudgetGroupAmount in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
				invoke DeleteAllLazyGroupsForScenario BudgetGroupLazyInit	
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
				if (ChangeCount > 0
				or BudgetChangeOrdersRel exists)
					for each ChildrenRel
						invoke DeleteBudgetData GeneralLedgerTotal in background
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmScenario				= each.Scenario
					invoke DeleteAllForScenario BudgetChangeOrderLine in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
					invoke DeleteAllChangeOrders in background
						run after AsyncId
						assign async action request id to AsyncId

					invoke DeleteScenarioChanges BudgetChange in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						
				invoke DeleteScenarioIncrLoadRecs BudgetIncrementalLoad in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
				if (BudgetImportRel exists) 
					invoke DeleteScenarioImports BudgetImport in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
				if (BudgetImportResultRel exists) 
					invoke DeleteScenarioImportResults BudgetImportResult in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
				invoke DeleteScenarioChildren Scenario in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.SkipOriginal				= false
				invoke DeleteThisInstance in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke Refresh TotalCubeRel in background
					run after AsyncId

		ExportForImport is an Instance Action
			valid when (CanExport)
			completion message is "ExportSubmitted"
			Parameters
				TargetScenario					is a Scenario
				DoNotDeleteBudgetImport			is Boolean
					default label is "DoNotDeleteExistingBudgetImport"
				ExportBudgetOriginalOnly		is Boolean
				PrmBudgetDateRange				is a BasisYearDateRange
					default label is "BudgetDateRange"
				PrmBudgetCodeBlock				is a BudgetCodeBlock
					default label is "BudgetCodeBlock"
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"		
				PrmExportZeroBudgetOriginal	is Boolean
					default label is "ExportZeroBudget"
			Parameter Rules
				TargetScenario
					initial value is Scenario

			Action Rules
				if (TargetScenario not entered)
					TargetScenario	= Scenario
				LocalTargetScenario	= TargetScenario
				constraint (!Exporting)
					"ScenarioIsExporting._PleaseWait."
				constraint (Scenario.IncrementalLoadStatus = IncrementalLoadStatus.Inactive)
					"ScenarioIsInIncrementalLoad"
				constraint (OriginalScenario entered)
					"OnlyABaseScenarioMayBeExported."				
				if (TargetScenario != Scenario)				
					constraint (TargetScenario.OriginalScenario entered)
						"OnlyABaseScenarioMayBeExportedTo."				
					constraint (TargetScenarioRel.Status != Status.Clearing
					and TargetScenarioRel.Status != Status.Preparing)
						"TargetScenarioCannotBeInClearingOrPreparingStatus"
					constraint (TargetScenarioRel.IncrementalLoadStatus = IncrementalLoadStatus.Inactive)
						"TargetScenarioIsInIncrementalLoad"
					if (Scenario.Basis !=  TargetScenarioRel.Basis)
						confirmation required
							"SourceScenario_Reporting_BasisDiffersFromTarget._EnsureThatDimensionElementsExistIn_TargetStructuresAndPeiodExistsIn_TargetCalendar."
				
				Exporting	= true

				if (not DoNotDeleteBudgetImport)
					invoke PurgeData BudgetImport in background
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= TargetScenario

				invoke ExportBudgetData GeneralLedgerTotal in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.SourceScenario				= Scenario
					invoked.TargetScenario				= TargetScenario
					invoked.BudgetDateRange.Begin		= PrmBudgetDateRange.Begin
					invoked.BudgetDateRange.End			= PrmBudgetDateRange.End
					invoked.PrmBudgetCodeBlock			= PrmBudgetCodeBlock
					if (ExportBudgetOriginalOnly)
						invoked.DataToExport			= 1	
					else
						invoked.DataToExport			= 0 
					invoked.PrmRunGroup					= PrmRunGroup
					invoked.PrmExportZeroBudgetOriginal = PrmExportZeroBudgetOriginal

				invoke ClearExporting in background
					run after AsyncId
					assign async action request id to AsyncId				
																
		ExportDataToTargetImports is an Instance Action		
			restricted
			Parameters
				TargetScenario	is like Scenario
			Action Rules
				initialize Counter
				LocalTargetScenario = TargetScenario
				
				for each TargetScenarioImportRel
					invoke Delete each.BudgetImport
					Counter += 1
					if (Counter = 300)
						initialize Counter
						commit transaction
				for each AllTotalsRel
					include PrepareBudgetImport
						
		ClearExporting is an Instance Action
			restricted
			Action Rules
				Exporting								= false

		Lock is an Instance Action
			valid when (CanLock)
			Action Rules
				confirmation required
					"LockingTheScenarioWillPreventChangeRequestsOrIncrementalLoadsFromProcessing.Proceed?"
				constraint (IncrementalLoadStatus.Inactive)
					"CannotLockWhileIncrementalLoadStatusIsActive"
				constraint (InProcessChangeOrdersRel not exists)
					"CannotLockWhileChangeRequestsAreBeingProcessed"
				Locked									= true
				
		Unlock is an Instance Action
			valid when (CanUnlock)
			Action Rules
				confirmation required
					"UnlockingTheScenarioWillEnableChangeRequestsAndIncrementalLoads.Proceed?"
				Locked									= false
				
		CalculateMeasures is an Instance Action
			valid when (CommitmentType.Budget)
			restricted
			Action Rules
				invoke CalculateMeasuresForBudget GeneralLedgerTotal in foreground
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmScenario					= OriginalScenario
		CalculateMeasuresBackground is an Instance Action
			valid when (CommitmentType.Budget)
			restricted
			Action Rules

				invoke CalculateMeasuresForBudget GeneralLedgerTotal in background
					invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmScenario					= OriginalScenario
		MoveValuesToChild is an Instance Action
			valid when (CommitmentType.Budget)
			restricted
			Action Rules
				if (OriginalScenario not entered)
					invoke Create
						assign result to ScenarioView
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.Parent					= Scenario
						invoked.Description				= "Original " + Scenario.Description
						invoked.CommitmentType			= CommitmentType.BudgetOriginal
						invoked.Status					= Status.Ready
					OriginalScenario = ScenarioView.Scenario
					for each GeneralLedgerTotal set
						invoke Create GeneralLedgerTotal
							invoked.Scenario			= OriginalScenario
							fill in fields from each
								except invoked.Scenario
						invoke Delete each.GeneralLedgerTotal						

		RebuildCommitmentTotals is an Instance Action
			restricted
			Parameters
				IsBatch					is Boolean
				EditMode				is a BudgetEditMode
				EditTotalsProcessing	is a BudgetEditTotalsProcessing
				PActionCode				is an ActionCode
					default label is "ActionCode"
				BusinessClassName		is Alpha 100
				EditContext				is Alpha 256
				PBudgetEditCallBack		is a BudgetEditCallBack
					default label is "BudgetEditCallBack"
			Action Rules
				display "ShouldNotCall_(ExceptTests)"
				display "IsBatch:<IsBatch>"
				display "EditMode:<EditMode>"
				display "EditTotalsProcessing:<EditTotalsProcessing>"
				display "PActionCode:<PActionCode>"
				display "BusinessClassName:<BusinessClassName>"
				display "EditContext:<EditContext>"
				display "PBudgetEditCallBack:<PBudgetEditCallBack>"

		BuildScenarioShadowFile is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Local Fields
				LocalAsyncId				is an AsyncActionRequest
			Instance Selection
				where (false)
			Action Rules
				Empty Set Rules
					invoke DeleteShadowForAllScenario ScenarioShadow in background
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					invoke BuildScenarioShadowPhase2 in background
						run after LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup

		BuildScenarioShadowPhase2 is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    HasParent)
			Sort Order is primary
			Action Rules
				Instance Rules
					invoke Create ScenarioShadow in background
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.Scenario				= Scenario
						invoked.ParentScenario			= Parent
						invoked.CommitmentType			= CommitmentType
FileCreationLogic.Scenario is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"Scenario_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation
				FileCreationSetupPrm	is a FileCreationSetup
#endif
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation
				LocalScenarioGroupSelection		is a Scenario group in subject FileCreationScenario
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      Scenario % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation
					LocalScenarioGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalScenarioGroupSelection not entered
					or	Scenario within LocalScenarioGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= Scenario
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
#endif
