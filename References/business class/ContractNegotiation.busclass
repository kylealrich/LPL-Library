ContractNegotiation is a BusinessClass
	owned by po
	prefix is CNeg

	Ontology
		symbolic key is ContractNegotiation

	Patterns

	Persistent Fields
		NegotiationTimeStamp						is TimeStamp
		ContractGroup
		Contract1									is a Contract
		Contract1BaseCost							is an InternationalCost
		Contract1LowerTierQualifierAmountPercent	is a QualifierAmountPercent
		Contract1LowerTierPercent					is Percent 4.1
		Contract1LowerTierUnitCost					is an InternationalCost
		Contract1HigherTierQualifierAmountPercent	is a QualifierAmountPercent
		Contract1HigherTierPercent					is Percent 4.1
		Contract1HigherTierUnitCost					is an InternationalCost
		Contract1Rebate1QualifierAmountPercent		is a QualifierAmountPercent
		Contract1Rebate1Percent						is Percent 4.1
		Contract1Rebate2QualifierAmountPercent		is a QualifierAmountPercent
		Contract1Rebate2Percent						is Percent 4.1
		Contract2									is a Contract
		Contract2BaseCost							is an InternationalCost
		Contract2LowerTierQualifierAmountPercent	is a QualifierAmountPercent
		Contract2LowerTierPercent					is Percent 4.1
		Contract2LowerTierUnitCost					is an InternationalCost
		Contract2HigherTierQualifierAmountPercent	is a QualifierAmountPercent
		Contract2HigherTierPercent					is Percent 4.1
		Contract2HigherTierUnitCost					is an InternationalCost
		Contract2Rebate1QualifierAmountPercent		is a QualifierAmountPercent
		Contract2Rebate1Percent						is Percent 4.1
		Contract2Rebate2QualifierAmountPercent		is a QualifierAmountPercent
		Contract2Rebate2Percent						is Percent 4.1
		FromQuantity								is Numeric 10
		ToQuantity									is Numeric 10
		SplitQuantity1								is Numeric 10
		SplitQuantity2								is Numeric 10
		DateRange
		SingleContractNegotiation					is Boolean
		
	Local Fields
		LocalPurchaseQuantity				is Numeric 10
		LocalSplitTotalQuantity				is Numeric 10		
		LocalPercentOfTotal					is Percent 4.1
   		LocalCompany						is like Company 
   		LocalLocation						is like InventoryLocation
   		LocalReqLocation					is like RequestingLocation
		LocalDateRange						is a DateRange
		LocalUsageQuantityType				is Numeric size 1
		LocalUsageType						is Numeric size 1
			States	
				Negotiation						value is 0
				Forecasting						value is 1
				Both							value is 2
		LocalAdjustmentPercent				is Percent 3
		LocalAnnualized						is Boolean
		
	Derived Fields

		DerivedContract1LowerTierQualifierAmountQuantity	is a ComputeField
			type is Decimal 13.4
			restricted
			(Contract1LowerTierQualifierAmountPercent.Amount / Contract1BaseCost)
			
		DerivedContract1HigherTierQualifierAmountQuantity is a ComputeField
			type is Decimal 13.4
			restricted
			(DerivedContract1LowerTierQualifierAmountQuantity + ((Contract1HigherTierQualifierAmountPercent.Amount - Contract1LowerTierQualifierAmountPercent.Amount) / Contract1LowerTierUnitCost))
		
		DerivedContract1IntoHigherTierByAmountQualifierAmountWithoutRebate	is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract1HigherTierQualifierAmountPercent.Amount + ((LocalPurchaseQuantity - DerivedContract1HigherTierQualifierAmountQuantity) * Contract1HigherTierUnitCost))
			
		DerivedContract1IntoLowerTierByAmountQualifierAmountWithoutRebate	is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract1LowerTierQualifierAmountPercent.Amount + ((LocalPurchaseQuantity - DerivedContract1LowerTierQualifierAmountQuantity) * Contract1LowerTierUnitCost))
			
		DerivedContract1BaseCostAmountWithoutRebate is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract1BaseCost)
			
		DerivedContract1PurchaseQuantityAtHigherTierCostAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract1HigherTierUnitCost)
			
		DerivedContract1PurchaseQuantityAtLowerTierCostAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract1LowerTierUnitCost)
			
		DerivedPercentOfTotal is a ComputeField
			type is Percent 4.1
			restricted
			(LocalPurchaseQuantity / LocalSplitTotalQuantity)
			
		DerivedContract1WithoutRebatesPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract1HigherTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity	> DerivedContract1HigherTierQualifierAmountQuantity)
					return DerivedContract1IntoHigherTierByAmountQualifierAmountWithoutRebate
				else
				if (LocalPurchaseQuantity 	> DerivedContract1LowerTierQualifierAmountQuantity)
					return DerivedContract1IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
			if (Contract1HigherTierQualifierAmountPercent.Percentage entered)
				return DerivedContract1PurchaseQuantityAtHigherTierCostAmount
			else
			if (Contract1LowerTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity 	> DerivedContract1LowerTierQualifierAmountQuantity)
					return DerivedContract1IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
			if (Contract1LowerTierQualifierAmountPercent.Percentage entered)
				return DerivedContract1PurchaseQuantityAtLowerTierCostAmount
			else
				return DerivedContract1BaseCostAmountWithoutRebate
				 				 		
		DerivedContract1WithRebatesAppliedPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract1Rebate2QualifierAmountPercent.Amount	entered)
				if (DerivedContract1WithoutRebatesPurchaseAmount >= Contract1Rebate2QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesPurchaseAmount * (100% - (Contract1Rebate2Percent + Contract1Rebate1Percent)))
				else
				if (DerivedContract1WithoutRebatesPurchaseAmount >= Contract1Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesPurchaseAmount
			else
			if (Contract1Rebate2QualifierAmountPercent.Percentage entered)
				return (DerivedContract1WithoutRebatesPurchaseAmount * (100% - (Contract1Rebate2Percent + Contract1Rebate1Percent)))
			else
			if (Contract1Rebate1QualifierAmountPercent.Amount entered)
				if (DerivedContract1WithoutRebatesPurchaseAmount >= Contract1Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesPurchaseAmount
			else
			if (Contract1Rebate1QualifierAmountPercent.Percentage entered)
				return (DerivedContract1WithoutRebatesPurchaseAmount * (100% - Contract1Rebate1Percent))
			else
				return DerivedContract1WithoutRebatesPurchaseAmount
							
		DerivedContract1WithoutRebatesSplitPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract1HigherTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity	> DerivedContract1HigherTierQualifierAmountQuantity)
					return DerivedContract1IntoHigherTierByAmountQualifierAmountWithoutRebate
				else
				if (LocalPurchaseQuantity 	> DerivedContract1LowerTierQualifierAmountQuantity)
					return DerivedContract1IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
			if (Contract1HigherTierQualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	> Contract1HigherTierQualifierAmountPercent.Percentage)
					return DerivedContract1PurchaseQuantityAtHigherTierCostAmount
				else
				if (LocalPercentOfTotal	> Contract1LowerTierQualifierAmountPercent.Percentage)
					return DerivedContract1PurchaseQuantityAtLowerTierCostAmount
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
			if (Contract1LowerTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity 	> DerivedContract1LowerTierQualifierAmountQuantity)
					return DerivedContract1IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
			if (Contract1LowerTierQualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	> Contract1LowerTierQualifierAmountPercent.Percentage)
					return DerivedContract1PurchaseQuantityAtLowerTierCostAmount
				else
					return DerivedContract1BaseCostAmountWithoutRebate
			else
				return DerivedContract1BaseCostAmountWithoutRebate
				 				 		
		DerivedContract1WithRebatesAppliedSplitPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract1Rebate2QualifierAmountPercent.Amount	entered)
				if (DerivedContract1WithoutRebatesSplitPurchaseAmount >= Contract1Rebate2QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - (Contract1Rebate2Percent + Contract1Rebate1Percent)))
				else
				if (DerivedContract1WithoutRebatesSplitPurchaseAmount >= Contract1Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesSplitPurchaseAmount
			else
			if (Contract1Rebate2QualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	>= Contract1Rebate2QualifierAmountPercent.Percentage)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - (Contract1Rebate2Percent + Contract1Rebate1Percent)))
				else
				if (LocalPercentOfTotal	>= Contract1Rebate1QualifierAmountPercent.Percentage)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesSplitPurchaseAmount
			else
			if (Contract1Rebate1QualifierAmountPercent.Amount entered)
				if (DerivedContract1WithoutRebatesSplitPurchaseAmount >= Contract1Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesSplitPurchaseAmount
			else
			if (Contract1Rebate1QualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	>= Contract1Rebate1QualifierAmountPercent.Percentage)
					return (DerivedContract1WithoutRebatesSplitPurchaseAmount * (100% - Contract1Rebate1Percent))
				else
					return DerivedContract1WithoutRebatesSplitPurchaseAmount
			else
				return DerivedContract1WithoutRebatesSplitPurchaseAmount
							

		DerivedContract2LowerTierQualifierAmountQuantity	is a ComputeField
			type is Decimal 13.4
			restricted
			(Contract2LowerTierQualifierAmountPercent.Amount / Contract2BaseCost)
			
		DerivedContract2HigherTierQualifierAmountQuantity is a ComputeField
			type is Decimal 13.4
			restricted
			(DerivedContract2LowerTierQualifierAmountQuantity + ((Contract2HigherTierQualifierAmountPercent.Amount - Contract2LowerTierQualifierAmountPercent.Amount) / Contract2LowerTierUnitCost))
		
		DerivedContract2IntoHigherTierByAmountQualifierAmountWithoutRebate	is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract2HigherTierQualifierAmountPercent.Amount + ((LocalPurchaseQuantity - DerivedContract2HigherTierQualifierAmountQuantity) * Contract2HigherTierUnitCost))
			
		DerivedContract2IntoLowerTierByAmountQualifierAmountWithoutRebate	is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract2LowerTierQualifierAmountPercent.Amount + ((LocalPurchaseQuantity - DerivedContract2LowerTierQualifierAmountQuantity) * Contract2LowerTierUnitCost))
			
		DerivedContract2BaseCostAmountWithoutRebate is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract2BaseCost)
			
		DerivedContract2PurchaseQuantityAtHigherTierCostAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract2HigherTierUnitCost)
			
		DerivedContract2PurchaseQuantityAtLowerTierCostAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalPurchaseQuantity * Contract2LowerTierUnitCost)
			
		DerivedContract2WithoutRebatesPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract2HigherTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity	> DerivedContract2HigherTierQualifierAmountQuantity)
					return DerivedContract2IntoHigherTierByAmountQualifierAmountWithoutRebate
				else
				if (LocalPurchaseQuantity 	> DerivedContract2LowerTierQualifierAmountQuantity)
					return DerivedContract2IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
			if (Contract2HigherTierQualifierAmountPercent.Percentage entered)
				return DerivedContract2PurchaseQuantityAtHigherTierCostAmount
			else
			if (Contract2LowerTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity 	> DerivedContract2LowerTierQualifierAmountQuantity)
					return DerivedContract2IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
			if (Contract2LowerTierQualifierAmountPercent.Percentage entered)
				return DerivedContract2PurchaseQuantityAtLowerTierCostAmount
			else
				return DerivedContract2BaseCostAmountWithoutRebate
				 				 		
		DerivedContract2WithRebatesAppliedPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract2Rebate2QualifierAmountPercent.Amount	entered)
				if (DerivedContract2WithoutRebatesPurchaseAmount >= Contract2Rebate2QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesPurchaseAmount * (100% - (Contract2Rebate2Percent + Contract2Rebate1Percent)))
				else
				if (DerivedContract2WithoutRebatesPurchaseAmount >= Contract2Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesPurchaseAmount
			else
			if (Contract2Rebate2QualifierAmountPercent.Percentage entered)
				return (DerivedContract2WithoutRebatesPurchaseAmount * (100% - (Contract2Rebate2Percent + Contract2Rebate1Percent)))
			else
			if (Contract2Rebate1QualifierAmountPercent.Amount entered)
				if (DerivedContract2WithoutRebatesPurchaseAmount >= Contract2Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesPurchaseAmount
			else
			if (Contract2Rebate1QualifierAmountPercent.Percentage entered)
				return (DerivedContract2WithoutRebatesPurchaseAmount * (100% - Contract2Rebate1Percent))
			else
				return DerivedContract2WithoutRebatesPurchaseAmount
							
		DerivedContract2WithoutRebatesSplitPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract2HigherTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity	> DerivedContract2HigherTierQualifierAmountQuantity)
					return DerivedContract2IntoHigherTierByAmountQualifierAmountWithoutRebate
				else
				if (LocalPurchaseQuantity 	> DerivedContract2LowerTierQualifierAmountQuantity)
					return DerivedContract2IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
			if (Contract2HigherTierQualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	> Contract2HigherTierQualifierAmountPercent.Percentage)
					return DerivedContract2PurchaseQuantityAtHigherTierCostAmount
				else
				if (LocalPercentOfTotal	> Contract2LowerTierQualifierAmountPercent.Percentage)
					return DerivedContract2PurchaseQuantityAtLowerTierCostAmount
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
			if (Contract2LowerTierQualifierAmountPercent.Amount entered)
				if (LocalPurchaseQuantity 	> DerivedContract2LowerTierQualifierAmountQuantity)
					return DerivedContract2IntoLowerTierByAmountQualifierAmountWithoutRebate
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
			if (Contract2LowerTierQualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	> Contract2LowerTierQualifierAmountPercent.Percentage)
					return DerivedContract2PurchaseQuantityAtLowerTierCostAmount
				else
					return DerivedContract2BaseCostAmountWithoutRebate
			else
				return DerivedContract2BaseCostAmountWithoutRebate
				 				 		
		DerivedContract2WithRebatesAppliedSplitPurchaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract2Rebate2QualifierAmountPercent.Amount	entered)
				if (DerivedContract2WithoutRebatesSplitPurchaseAmount >= Contract2Rebate2QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - (Contract2Rebate2Percent + Contract2Rebate1Percent)))
				else
				if (DerivedContract2WithoutRebatesSplitPurchaseAmount >= Contract2Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesSplitPurchaseAmount
			else
			if (Contract2Rebate2QualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	>= Contract2Rebate2QualifierAmountPercent.Percentage)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - (Contract2Rebate2Percent + Contract2Rebate1Percent)))
				else
				if (LocalPercentOfTotal	>= Contract2Rebate1QualifierAmountPercent.Percentage)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesSplitPurchaseAmount
			else
			if (Contract2Rebate1QualifierAmountPercent.Amount entered)
				if (DerivedContract2WithoutRebatesSplitPurchaseAmount >= Contract2Rebate1QualifierAmountPercent.Amount)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesSplitPurchaseAmount
			else
			if (Contract2Rebate1QualifierAmountPercent.Percentage entered)
				if (LocalPercentOfTotal	>= Contract2Rebate1QualifierAmountPercent.Percentage)
					return (DerivedContract2WithoutRebatesSplitPurchaseAmount * (100% - Contract2Rebate1Percent))
				else
					return DerivedContract2WithoutRebatesSplitPurchaseAmount
			else
				return DerivedContract2WithoutRebatesSplitPurchaseAmount

		Contract1QuantityNeededToAchieveLowerTier is a ConditionalField
			type is Decimal 13.4
			if (Contract1LowerTierQualifierAmountPercent.Amount entered)
				DerivedContract1LowerTierQualifierAmountQuantity
			else
				0
			
		Contract1QuantityNeededToAchieveHigherTier is a ConditionalField
			type is Decimal 13.4
			if (Contract1HigherTierQualifierAmountPercent.Amount entered)
				DerivedContract1HigherTierQualifierAmountQuantity
			else
				0
			
		Contract2QuantityNeededToAchieveLowerTier is a ConditionalField
			type is Decimal 13.4
			if (Contract2LowerTierQualifierAmountPercent.Amount entered)
				DerivedContract2LowerTierQualifierAmountQuantity
			else
				0
			
		Contract2QuantityNeededToAchieveHigherTier is a ConditionalField
			type is Decimal 13.4
			if (Contract2HigherTierQualifierAmountPercent.Amount entered)
				DerivedContract2HigherTierQualifierAmountQuantity
			else
				0
			
		DerivedSplitQuantityTotal is a ComputeField
			type is Numeric 10
			(SplitQuantity1 + SplitQuantity2)
			
		SplitContract1QuantityNeededToAchieveLowerTier is a ConditionalField
			type is Decimal 13.4
			if (Contract1LowerTierQualifierAmountPercent.Amount entered)
				DerivedContract1LowerTierQualifierAmountQuantity
			else
				(DerivedSplitQuantityTotal * Contract1LowerTierQualifierAmountPercent.Percentage)
			
		SplitContract1QuantityNeededToAchieveHigherTier is a ConditionalField
			type is Decimal 13.4
			if (Contract1HigherTierQualifierAmountPercent.Amount entered)
				DerivedContract1HigherTierQualifierAmountQuantity
			else
				(DerivedSplitQuantityTotal * Contract1HigherTierQualifierAmountPercent.Percentage)
			
		SplitContract2QuantityNeededToAchieveLowerTier is a ConditionalField
			type is Decimal 13.4
			if (Contract2LowerTierQualifierAmountPercent.Amount entered)
				DerivedContract2LowerTierQualifierAmountQuantity
			else
				(DerivedSplitQuantityTotal * Contract2LowerTierQualifierAmountPercent.Percentage)
			
		SplitContract2QuantityNeededToAchieveHigherTier is a ConditionalField
			type is Decimal 13.4
			if (Contract2HigherTierQualifierAmountPercent.Amount entered)
				DerivedContract2HigherTierQualifierAmountQuantity
			else
				(DerivedSplitQuantityTotal * Contract2HigherTierQualifierAmountPercent.Percentage)
			
		SplitContract1AmountNeededToAchieveHigherRebateByPercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract1Rebate2QualifierAmountPercent.Percentage * ((sum ContractNegotiationSplitsRel.Contract1AmountWithoutRebate) + (sum ContractNegotiationSplitsRel.Contract2AmountWithoutRebate)))
			
		SplitContract2AmountNeededToAchieveHigherRebateByPercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract2Rebate2QualifierAmountPercent.Percentage * ((sum ContractNegotiationSplitsRel.Contract1AmountWithoutRebate) + (sum ContractNegotiationSplitsRel.Contract2AmountWithoutRebate)))
			
		SplitContract1AmountNeededToAchieveLowerRebateByPercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract1Rebate1QualifierAmountPercent.Percentage * ((sum ContractNegotiationSplitsRel.Contract1AmountWithoutRebate) + (sum ContractNegotiationSplitsRel.Contract2AmountWithoutRebate)))
			
		SplitContract2AmountNeededToAchieveLowerRebateByPercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract2Rebate1QualifierAmountPercent.Percentage * ((sum ContractNegotiationSplitsRel.Contract1AmountWithoutRebate) + (sum ContractNegotiationSplitsRel.Contract2AmountWithoutRebate)))
			
		DerivedSupplier1ShortName is a ConditionalField
			type is Alpha 19
			if (Contract1 entered)
				Contract1.SupplierName
			else
				blank
			
		DerivedSupplier2ShortName is a ConditionalField
			type is Alpha 19
			if (Contract2 entered)
				Contract2.SupplierName
			else
				blank
			
		DerivedContract1 is a ConditionalField
			type is Numeric 15
			if (Contract1 entered)
				Contract1
			else
				1
			
		DerivedContract2 is a ConditionalField
			type is Numeric 15
			if (Contract2 entered)
				Contract2
			else
				2
		
		BaseCostLiteral is a MessageField
			"BaseCost"
			
		LowerTierLiteral is a MessageField
			"LowerTier"
			
		HigherTierLiteral is a MessageField
			"HigherTier"
			
		QualifierAmountLiteral is a MessageField
			restricted
			"QualifierAmount"

		QualifierPercentLiteral is a MessageField
			"QualifierPercent"
			
		UnitCostLiteral is a MessageField
			"UnitCost"
						
		DerivedBeginDate is a StringField
			type is Date
			restricted
			DateRange.Begin
			
		DerivedEndDate is a StringField
			type is Date
			restricted
			DateRange.End
			
	Conditions
		NegotiationDetailsExist
			restricted
			when (ContractNegotiationDetailsRel exists)
			
		NegotiationSplitsExist
			restricted
			when (ContractNegotiationSplitsRel exists)
			
		HasDetails
			restricted
			when (ContractNegotiationDetail set exists)
			
		ForSpecificContracts
			restricted
			when (Contract1 entered
			or    Contract2 entered)
			
		ForItem
			restricted
			when (Item entered)
			
	Relations
		ContractNegotiationDetailsRel is a ContractNegotiationDetail set
			Instance Selection
				where (related.SplitTotalNetAmount	not entered
				and    related.NegotiationTimeStamp	= NegotiationTimeStamp)
				
		ContractNegotiationSplitsRel is a ContractNegotiationDetail set
			Instance Selection
				where (related.SplitTotalNetAmount	entered
				and    related.NegotiationTimeStamp	= NegotiationTimeStamp)

		ContractNegotiationsDetailsNoDateRangeRel is a ContractNegotiationDetail set
			Instance Selection
				where (related.SplitTotalNetAmount	not entered
				and    related.NegotiationTimeStamp	= NegotiationTimeStamp
				and    related.DateRange			not entered)

		ContractsRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup			= ItemGroup
			Instance Selection
				where (related.Contract			= Contract1
				or     related.Contract			= Contract2)
				
		ItemmastUsagesRel
			one-to-many relation to ItemmastUsage
			Field Mapping uses ByManualEntry
				related.Item								= Item
				related.Company								= LocalCompany
				related.InventoryLocation					= LocalLocation
				related.RequestingLocation					= LocalReqLocation
				related.ItemmastUsageDateRange.Begin		= LocalDateRange.Begin
				related.ItemmastUsageDateRange.End			= LocalDateRange.End
				related.ItemmastUsage.UsageQuantityType		= LocalUsageQuantityType
				related.ItemmastUsage.AdjustmentPercent		= LocalAdjustmentPercent

	Sets
		ByTimeStamp
			Sort Order
				ItemGroup
				Item
				NegotiationTimeStamp descending
				ContractNegotiation
				
	Field Rules
		Contract1BaseCost
			required
			
		Contract1HigherTierQualifierAmountPercent
			constraint (Contract1LowerTierQualifierAmountPercent entered)
				"Contract1MustEnterLowerTierQualifierInOrderToUseHigherTierQualifier"
			if (Contract1HigherTierQualifierAmountPercent.Amount entered)
				constraint (Contract1LowerTierQualifierAmountPercent.Amount entered)
					"Contract1MustBeConsistentWithQualifierAmountsAndPercentsAcrossTiers"
				constraint (Contract1HigherTierQualifierAmountPercent.Amount	> Contract1LowerTierQualifierAmountPercent.Amount)
					"Contract1HigherTierQualifierMustExceedLowerTierQualifier"
			if (Contract1HigherTierQualifierAmountPercent.Percentage entered)
				constraint (Contract1LowerTierQualifierAmountPercent.Percentage entered)
					"Contract1MustBeConsistentWithQualifierAmountsAndPercentsAcrossTiers"
				constraint (Contract1HigherTierQualifierAmountPercent.Percentage	> Contract1LowerTierQualifierAmountPercent.Percentage)
					"Contract1HigherTierQualifierMustExceedLowerTierQualifier"

		Contract1LowerTierUnitCost
			if (Contract1LowerTierQualifierAmountPercent entered)
				if (Contract1LowerTierPercent not entered)
					required
						"MustEnterUnitCostOrPercentWhenQualifiersHaveBeenEntered"
			else
				cannot be entered
					"UnitCostMustBeBlankNoQualifiersHaveBeenEntered"
			
				
		Contract1HigherTierUnitCost
			if (Contract1HigherTierQualifierAmountPercent entered)
				if (Contract1HigherTierPercent not entered)
					required
						"MustEnterUnitCostOrPercentWhenQualifiersHaveBeenEntered"
			else
				cannot be entered
					"UnitCostMustBeBlankNoQualifiersHaveBeenEntered"
				
		Contract1Rebate2QualifierAmountPercent
			constraint (Contract1Rebate1QualifierAmountPercent entered)
				"Contract1MustEnterRebate1QualifierInOrderToUseRebate2Qualifier"
			if (Contract1Rebate2QualifierAmountPercent.Amount entered)
				constraint (Contract1Rebate1QualifierAmountPercent.Amount entered)
					"Contract1MustBeConsistentWithQualifierAmountsAndPercentsAcrossRebates"
				constraint (Contract1Rebate2QualifierAmountPercent.Amount	>= Contract1Rebate1QualifierAmountPercent.Amount)
					"Contract1Rebate2QualifierMustEqualOrExceedRebate1Qualifier"
			if (Contract1Rebate2QualifierAmountPercent.Percentage entered)
				constraint (Contract1Rebate1QualifierAmountPercent.Percentage entered)
					"Contract1MustBeConsistentWithQualifierAmountsAndPercentsAcrossRebates"
				constraint (Contract1Rebate2QualifierAmountPercent.Percentage	>= Contract1Rebate1QualifierAmountPercent.Percentage)
					"Contract1Rebate2QualifierMustEqualOrExceedRebate1Qualifier"

		Contract1Rebate1Percent
			if (Contract1Rebate1QualifierAmountPercent entered)
				required
			else
				cannot be entered
					"PercentMustBeBlankNoQualifiersHaveBeenEntered"
				
		Contract1Rebate2Percent
			if (Contract1Rebate2QualifierAmountPercent entered)
				required
			else
				cannot be entered
					"PercentMustBeBlankNoQualifiersHaveBeenEntered"
				
		Contract2BaseCost
			if (Contract1	not entered)
				required
				
		Contract2HigherTierQualifierAmountPercent
			constraint (Contract2LowerTierQualifierAmountPercent entered)
				"Contract2MustEnterLowerTierQualifierInOrderToUseHigherTierQualifier"
			if (Contract2HigherTierQualifierAmountPercent.Amount entered)
				constraint (Contract2LowerTierQualifierAmountPercent.Amount entered)
					"Contract2MustBeConsistentWithQualifierAmountsAndPercentsAcrossTiers"
				constraint (Contract2HigherTierQualifierAmountPercent.Amount	> Contract2LowerTierQualifierAmountPercent.Amount)
					"Contract2HigherTierQualifierMustExceedLowerTierQualifier"
			if (Contract2HigherTierQualifierAmountPercent.Percentage entered)
				constraint (Contract2LowerTierQualifierAmountPercent.Percentage entered)
					"Contract2MustBeConsistentWithQualifierAmountsAndPercentsAcrossTiers"
				constraint (Contract2HigherTierQualifierAmountPercent.Percentage	> Contract2LowerTierQualifierAmountPercent.Percentage)
					"Contract2HigherTierQualifierMustExceedLowerTierQualifier"
								
		Contract2LowerTierUnitCost
			if (Contract2LowerTierQualifierAmountPercent entered)
				if (Contract2LowerTierPercent not entered)
					required
						"MustEnterUnitCostOrPercentWhenQualifiersHaveBeenEntered"
			else
				cannot be entered
					"UnitCostMustBeBlankNoQualifiersHaveBeenEntered"
				
		Contract2HigherTierUnitCost
			if (Contract2HigherTierQualifierAmountPercent entered)
				if (Contract2HigherTierPercent not entered)
					required
						"MustEnterUnitCostOrPercentWhenQualifiersHaveBeenEntered"
			else
				cannot be entered
					"UnitCostMustBeBlankNoQualifiersHaveBeenEntered"
									
		Contract2Rebate2QualifierAmountPercent
			constraint (Contract2Rebate1QualifierAmountPercent entered)
				"Contract2MustEnterRebate1QualifierInOrderToUseRebate2Qualifier"
			if (Contract2Rebate2QualifierAmountPercent.Amount entered)
				constraint (Contract2Rebate1QualifierAmountPercent.Amount entered)
					"Contract2MustBeConsistentWithQualifierAmountsAndPercentsAcrossRebates"
				constraint (Contract2Rebate2QualifierAmountPercent.Amount	>= Contract2Rebate1QualifierAmountPercent.Amount)
					"Contract2Rebate2QualifierMustEqualOrExceedRebate1Qualifier"
			if (Contract2Rebate2QualifierAmountPercent.Percentage entered)
				constraint (Contract2Rebate1QualifierAmountPercent.Percentage entered)
					"Contract2MustBeConsistentWithQualifierAmountsAndPercentsAcrossRebates"
				constraint (Contract2Rebate2QualifierAmountPercent.Percentage	>= Contract2Rebate1QualifierAmountPercent.Percentage)
					"Contract2Rebate2QualifierMustEqualOrExceedRebate1Qualifier"
				
		Contract2Rebate1Percent
			if (Contract2Rebate1QualifierAmountPercent entered)
				required
			else
				cannot be entered
					"PercentMustBeBlankNoQualifiersHaveBeenEntered"
				
		Contract2Rebate2Percent
			if (Contract2Rebate2QualifierAmountPercent entered)
				required
			else
				cannot be entered
					"PercentMustBeBlankNoQualifiersHaveBeenEntered"
				
	Actions
		Create is a Create Action
			valid when (!ForSpecificContracts)
			Action Rules
				if (Contract1LowerTierPercent	entered)
					constraint (Contract1LowerTierUnitCost	not entered)
						"CannotEnterBothTierPercentAndUnitCostInACreateAction"
		
				if (Contract1HigherTierPercent	entered)
					constraint (Contract1HigherTierUnitCost	not entered)
						"CannotEnterBothTierPercentAndUnitCostInACreateAction"
		
				if (Contract2LowerTierPercent	entered)
					constraint (Contract2LowerTierUnitCost	not entered)
						"CannotEnterBothTierPercentAndUnitCostInACreateAction"
		
				if (Contract2HigherTierPercent	entered)
					constraint (Contract2HigherTierUnitCost	not entered)
						"CannotEnterBothTierPercentAndUnitCostInACreateAction"
				
				if (Contract1LowerTierPercent	entered)
					Contract1LowerTierUnitCost	= Contract1BaseCost * (100% - Contract1LowerTierPercent)
							
				if (Contract1HigherTierPercent	entered)
					Contract1HigherTierUnitCost	= Contract1BaseCost * (100% - Contract1HigherTierPercent)
		
				if (Contract2LowerTierPercent	entered)
					Contract2LowerTierUnitCost	= Contract2BaseCost * (100% - Contract2LowerTierPercent)
		
				if (Contract2HigherTierPercent	entered)
					Contract2HigherTierUnitCost	= Contract2BaseCost * (100% - Contract2HigherTierPercent)
					
				NegotiationTimeStamp			= current timestamp
				
		Update is an Update Action
			Entrance Rules
				invoke Purge ContractNegotiationDetail set
				
			Action Rules
				if (Contract1LowerTierUnitCost	changed
				and Contract1LowerTierUnitCost	entered)
					constraint (Contract1LowerTierPercent not entered)
						"MustBlankOutPercentWhenManuallyChangingUnitCost"
						
				if (Contract1HigherTierUnitCost	changed
				and Contract1HigherTierUnitCost	entered)
					constraint (Contract1HigherTierPercent not entered)
						"MustBlankOutPercentWhenManuallyChangingUnitCost"
		
				if (Contract2LowerTierUnitCost	changed
				and Contract2LowerTierUnitCost	entered)
					constraint (Contract2LowerTierPercent not entered)
						"MustBlankOutPercentWhenManuallyChangingUnitCost"
		
				if (Contract2HigherTierUnitCost	changed
				and Contract2HigherTierUnitCost	entered)
					constraint (Contract2HigherTierPercent not entered)
						"MustBlankOutPercentWhenManuallyChangingUnitCost"
				
				if (Contract1LowerTierPercent	changed
					and Contract1LowerTierPercent	entered)
					Contract1LowerTierUnitCost	= Contract1BaseCost * (100% - Contract1LowerTierPercent)
							
				if (Contract1HigherTierPercent	changed
					and Contract1HigherTierPercent	entered)
					Contract1HigherTierUnitCost	= Contract1BaseCost * (100% - Contract1HigherTierPercent)
		
				if (Contract2LowerTierPercent	changed
					and Contract2LowerTierPercent	entered)
					Contract2LowerTierUnitCost	= Contract2BaseCost * (100% - Contract2LowerTierPercent)
		
				if (Contract2HigherTierPercent	changed
					and Contract2HigherTierPercent	entered)
					Contract2HigherTierUnitCost	= Contract2BaseCost * (100% - Contract2HigherTierPercent)
				
			Exit Rules
				invoke Purge ContractNegotiationDetail set
				
				if (FromQuantity entered or ToQuantity entered)
					invoke QuantityRange ContractNegotiation
						invoked.PurchaseQuantityRangeFromQuantity	= FromQuantity
						invoked.PurchaseQuantityRangeToQuantity		= ToQuantity

				if (SplitQuantity1 entered)
					invoke SplitQuantities ContractNegotiation
						invoked.Contract1PurchaseQuantity			= SplitQuantity1
						invoked.Contract2PurchaseQuantity			= SplitQuantity2
		
		Delete is a Purge Action
			Entrance Rules
				invoke Purge ContractNegotiationDetail set
				
		QuantityRange is an Instance Action
			Parameters
				PurchaseQuantityRangeFromQuantity		is Numeric 10
				PurchaseQuantityRangeToQuantity			is Numeric 10
				PrmDateRange							is a DateRange
				PrmAdjustmentPercent					is Percent 3
				PrmOriginalUsage						is Boolean
			Parameter Rules
				PurchaseQuantityRangeFromQuantity
					if (PurchaseQuantityRangeToQuantity	not entered)
						required
							"MustEnterEitherAFromOrAToQuantity"
					else
						constraint (PurchaseQuantityRangeToQuantity > PurchaseQuantityRangeFromQuantity)
							"ToQuantityMustBeGreaterThanFromQuantity"
				PurchaseQuantityRangeToQuantity
					constraint ((PurchaseQuantityRangeToQuantity - PurchaseQuantityRangeFromQuantity) <= 8000)
						"QuantityRangeMustBeLessThanOrEqualTo8000"
			Local Fields
				Counter									is Numeric 2
				DetailQuantityIncrement					is Numeric 10
				PurchaseQuantityRange					is Numeric 10
			Action Rules
				if (PurchaseQuantityRangeToQuantity	entered)
					invoke Purge ContractNegotiationsDetailsNoDateRangeRel
					Counter					= 1
					PurchaseQuantityRange	= PurchaseQuantityRangeToQuantity - PurchaseQuantityRangeFromQuantity
					if (PurchaseQuantityRange		<= 16)
						DetailQuantityIncrement		= 1
					else
					if (PurchaseQuantityRange		<= 32)
						DetailQuantityIncrement		= 2
					else
					if (PurchaseQuantityRange		<= 80)
						DetailQuantityIncrement		= 5
					else
					if (PurchaseQuantityRange		<= 160)
						DetailQuantityIncrement		= 10
					else
					if (PurchaseQuantityRange		<= 320)
						DetailQuantityIncrement		= 20
					else
					if (PurchaseQuantityRange		<= 480)
						DetailQuantityIncrement		= 30
					else
					if (PurchaseQuantityRange		<= 640)
						DetailQuantityIncrement		= 40
					else
					if (PurchaseQuantityRange		<= 800)
						DetailQuantityIncrement		= 50
					else
					if (PurchaseQuantityRange		<= 1600)
						DetailQuantityIncrement		= 100
					else
					if (PurchaseQuantityRange		<= 3200)
						DetailQuantityIncrement		= 200
					else
					if (PurchaseQuantityRange		<= 4800)
						DetailQuantityIncrement		= 300
					else
					if (PurchaseQuantityRange		<= 6400)
						DetailQuantityIncrement		= 400
					else
						DetailQuantityIncrement		= 500
	
					if (PurchaseQuantityRangeFromQuantity	entered)
						if (PurchaseQuantityRangeFromQuantity	= 1)
							LocalPurchaseQuantity				= DetailQuantityIncrement
						else
							LocalPurchaseQuantity				= PurchaseQuantityRangeFromQuantity
					else
						LocalPurchaseQuantity	= DetailQuantityIncrement
						
					while (Counter			< 17)
						invoke Create ContractNegotiationDetail
							invoked.ItemGroup						= ItemGroup
							invoked.Item							= Item
							invoked.ContractNegotiation				= ContractNegotiation
							invoked.QuantityPurchased				= LocalPurchaseQuantity
							invoked.Contract1NetAmount				= DerivedContract1WithRebatesAppliedPurchaseAmount
							invoked.Contract1AmountWithoutRebate	= DerivedContract1WithoutRebatesPurchaseAmount
							invoked.Contract2NetAmount				= DerivedContract2WithRebatesAppliedPurchaseAmount
							invoked.Contract2AmountWithoutRebate	= DerivedContract2WithoutRebatesPurchaseAmount
							invoked.NegotiationTimeStamp			= NegotiationTimeStamp
							initialize invoked.SplitContract1QuantityPurchased	
							initialize invoked.SplitContract2QuantityPurchased	
							initialize invoked.SplitAllContract1NetAmount	
							initialize invoked.SplitAllContract2NetAmount
							initialize invoked.DateRange
							initialize invoked.AdjustmentPercent	
							initialize invoked.OriginalUsage
												
						LocalPurchaseQuantity		+= DetailQuantityIncrement
						Counter						+= 1
				else					
					LocalPurchaseQuantity	= PurchaseQuantityRangeFromQuantity
					invoke Create ContractNegotiationDetail
						invoked.ItemGroup						= ItemGroup
						invoked.Item							= Item
						invoked.ContractNegotiation				= ContractNegotiation
						invoked.QuantityPurchased				= LocalPurchaseQuantity
						invoked.Contract1NetAmount				= DerivedContract1WithRebatesAppliedPurchaseAmount
						invoked.Contract1AmountWithoutRebate	= DerivedContract1WithoutRebatesPurchaseAmount
						invoked.Contract2NetAmount				= DerivedContract2WithRebatesAppliedPurchaseAmount
						invoked.Contract2AmountWithoutRebate	= DerivedContract2WithoutRebatesPurchaseAmount
						invoked.NegotiationTimeStamp			= NegotiationTimeStamp
						initialize invoked.SplitContract1QuantityPurchased	
						initialize invoked.SplitContract2QuantityPurchased	
						initialize invoked.SplitAllContract1NetAmount	
						initialize invoked.SplitAllContract2NetAmount
						invoked.DateRange						= PrmDateRange
						invoked.AdjustmentPercent				= PrmAdjustmentPercent	
						invoked.OriginalUsage					= PrmOriginalUsage
				
				FromQuantity				= PurchaseQuantityRangeFromQuantity
				ToQuantity					= PurchaseQuantityRangeToQuantity
				
		SplitQuantities is an Instance Action
			Parameters
				Contract1PurchaseQuantity		is Numeric 10
				Contract2PurchaseQuantity		is Numeric 10
			Parameter Rules
				Contract1PurchaseQuantity
					required
				Contract2PurchaseQuantity
					required
			Local Fields
				LocalSplitTotalNetAmount		is an InternationalAmount
				LocalContract1Quantity			is Numeric 10
				LocalContract1NetAmount			is an InternationalAmount
				LocalContract1AmountNoRebate	is an InternationalAmount
				LocalAllContract1NetAmount		is an InternationalAmount
				LocalContract2Quantity			is Numeric 10
				LocalContract2NetAmount			is an InternationalAmount
				LocalContract2AmountNoRebate	is an InternationalAmount
				LocalAllContract2NetAmount		is an InternationalAmount
				
			Action Rules
				LocalSplitTotalQuantity			= Contract1PurchaseQuantity + Contract2PurchaseQuantity
				LocalContract1Quantity			= Contract1PurchaseQuantity
				LocalPurchaseQuantity			= Contract1PurchaseQuantity
				LocalPercentOfTotal				= (LocalPurchaseQuantity / LocalSplitTotalQuantity)
				LocalSplitTotalNetAmount		+= DerivedContract1WithRebatesAppliedSplitPurchaseAmount
				LocalContract1NetAmount			= DerivedContract1WithRebatesAppliedSplitPurchaseAmount
				LocalContract1AmountNoRebate	= DerivedContract1WithoutRebatesSplitPurchaseAmount 
				LocalContract2Quantity			= Contract2PurchaseQuantity
				LocalPurchaseQuantity			= Contract2PurchaseQuantity
				LocalPercentOfTotal				= (LocalPurchaseQuantity / LocalSplitTotalQuantity)
				LocalSplitTotalNetAmount		+= DerivedContract2WithRebatesAppliedSplitPurchaseAmount
				LocalContract2NetAmount			= DerivedContract2WithRebatesAppliedSplitPurchaseAmount
				LocalContract2AmountNoRebate	= DerivedContract2WithoutRebatesSplitPurchaseAmount 
				LocalPurchaseQuantity			= LocalSplitTotalQuantity
				LocalPercentOfTotal				= (LocalPurchaseQuantity / LocalSplitTotalQuantity)
				LocalAllContract1NetAmount		= DerivedContract1WithRebatesAppliedSplitPurchaseAmount
				LocalAllContract2NetAmount		= DerivedContract2WithRebatesAppliedSplitPurchaseAmount
				invoke Create ContractNegotiationDetail
					invoked.ItemGroup						= ItemGroup
					invoked.Item							= Item
					invoked.ContractNegotiation				= ContractNegotiation
					invoked.QuantityPurchased				= LocalSplitTotalQuantity
					invoked.Contract1NetAmount				= LocalContract1NetAmount
					invoked.Contract1AmountWithoutRebate	= LocalContract1AmountNoRebate
					invoked.Contract2NetAmount				= LocalContract2NetAmount
					invoked.Contract2AmountWithoutRebate	= LocalContract2AmountNoRebate
					invoked.SplitTotalNetAmount				= LocalSplitTotalNetAmount
					invoked.NegotiationTimeStamp			= NegotiationTimeStamp
					invoked.SplitContract1QuantityPurchased	= LocalContract1Quantity	
					invoked.SplitContract2QuantityPurchased	= LocalContract2Quantity	
					invoked.SplitAllContract1NetAmount		= LocalAllContract1NetAmount
					invoked.SplitAllContract2NetAmount		= LocalAllContract2NetAmount
				
				SplitQuantity1					= Contract1PurchaseQuantity
				SplitQuantity2					= Contract2PurchaseQuantity
				
		NewUsage is an Instance Action
			valid when (ForItem)
			Parameters
				PrmDateRange				is a DateRange
				PrmCompany					is Numeric 4
				PrmLocation					is AlphaUpper 5
				PrmRequestingLocation		is AlphaUpper 5
				PrmReceiptOrInvoiceUsage	is Numeric 1
					States
						CalculateUsageBasedOnReceipts	value is 1
						CalculateUsageBasedOnInvoices	value is 2
				PrmAdjustmentPercent		is Percent 3
				PrmAnnualize				is Boolean
			Parameter Rules
				PrmAnnualize			
					LocalDaysDifference		= (PrmDateRange.End	- PrmDateRange.Begin)
					constraint ((LocalDaysDifference	<= 31
					and          LocalDaysDifference	>= 28)
					or          (LocalDaysDifference	<= 62
					and          LocalDaysDifference    >= 59)
					or          (LocalDaysDifference    <= 92
					and          LocalDaysDifference    >= 89)
					or          (LocalDaysDifference    <= 123
					and          LocalDaysDifference    >= 120)
					or          (LocalDaysDifference    <= 184
					and          LocalDaysDifference    >= 181))
						"DifferenceOfDatesMustBe1,2,3,4Or6MonthsInOrderToAnnualizeUsage"
			Local Fields
				LocalDaysDifference						is Numeric 8

			Action Rules
				invoke Purge ContractNegotiationsDetailsNoDateRangeRel
				LocalCompany							= PrmCompany
				LocalLocation							= PrmLocation
				LocalReqLocation						= PrmRequestingLocation
				LocalDateRange							= PrmDateRange
				LocalUsageQuantityType					= PrmReceiptOrInvoiceUsage
				LocalAdjustmentPercent					= PrmAdjustmentPercent
				LocalAnnualized							= PrmAnnualize
				if (!ItemmastUsagesRel exists)
					invoke CalculateItemUsage Item
						invoked.PrmDateRange				= PrmDateRange
						invoked.PrmCompany					= PrmCompany
						invoked.PrmLocation					= PrmLocation
						invoked.PrmRequestingLocation		= PrmRequestingLocation
						invoked.PrmReceiptOrInvoiceUsage	= PrmReceiptOrInvoiceUsage
						invoked.PrmUsageType				= LocalUsageType.Negotiation
						invoked.PrmAdjustmentPercent		= PrmAdjustmentPercent
						invoked.PrmAnnualize				= PrmAnnualize
				else
				if (ItemmastUsagesRel.UsageType.Forecasting)
					invoke Update ItemmastUsagesRel
						invoked.UsageType					= LocalUsageType.Both
					
				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnReceipts)
					constraint (ItemmastUsagesRel.UsageQuantity	entered)
						"NoReceiptUsageQuantityFoundForThisDateRange"
				else					
				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnInvoices)
					constraint (ItemmastUsagesRel.UsageQuantity	entered)
						"NoInvoiceUsageQuantityFoundForThisDateRange"
					
				invoke QuantityRange ContractNegotiation
					invoked.PurchaseQuantityRangeFromQuantity			= ItemmastUsagesRel.UsageQuantity
					initialize invoked.PurchaseQuantityRangeToQuantity
					invoked.PrmDateRange								= PrmDateRange
					invoked.PrmAdjustmentPercent						= PrmAdjustmentPercent
			
				DateRange			= PrmDateRange
					
							
								
				
			
