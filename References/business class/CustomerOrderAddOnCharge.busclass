CustomerOrderAddOnCharge is a BusinessClass
    owned by oe
    prefix is CMC
    classic name is COMISC

    Ontology
        symbolic key is CustomerOrderAddOnCharge
            classic set name is CMCSET1
            classic name is SEQ
            classic name for CustomerOrderLine is LINE-NBR
            classic name for CustomerOrder is ORDER-NBR

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex
		implements Archivable

    Persistent Fields
		Miscellaneous           	is a OrderEntryAddOnCharge
			classic name is MISC
      	AddOnCharge
            classic name is AOC-CODE
        Currency
            classic name is CURRENCY-CODE
        Status             			is Numeric size 1
            States
                Unreleased    value is 0
                Released      value is 1
                Shipped       value is 2
                Canceled      value is 8
                ReadyForPurge value is 9
			protected
        Description
        OrderDiscount				is Boolean
            classic name is ORD-DISC-FL
		UpdateSalesAnalysis  		is Boolean
			restricted
			classic name is UPD-SA-FL
        BookedDate         			is Date
		TaxStatus					is AlphaUpper size 1
        	States
            	Taxable   value is "T"
            	Exempt    value is "E"
        TaxCode
		TaxableCurrencyAmount   	is an InternationalAmount
			protected	
        EnteredTaxable         		is an InternationalAmount
        ChargeType
        EnteredUnitPrice        	is an InternationalCost
        UnitPrice          			is an InternationalCost
		PricePercent    			is a  CostPercent
			default label is "PricePercentage"
        EnteredPrice           		is an InternationalAmount
        Price              			is an InternationalAmount
        UnitCost           			is an InternationalCost
        CostPercent
            classic name is COST-PCT
			default label is "CostPercentage"
        Cost               			is an InternationalCost
		BilledCurrency     			is an InternationalAmount
        AtnObjId           			is an ObjId
        AtnObjIdC          			is an ObjId
        WarehouseShipment
            classic name is SHIPMENT-NBR
		BookToSalesAnalysis	 		is Boolean
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        TrackType
        SalesAccount       			is a TransactionCodeBlock
            classic name for SalesAccount.AccountingUnit is SLS-ACCT-UNIT
            classic name for SalesAccount.GeneralLedgerChartAccount is SLS-ACCOUNT
            classic name for SalesAccount.Project is ACTIVITY
        OffsetAccount      			is a TransactionCodeBlock
            classic name for OffsetAccount.AccountingUnit is OFF-ACCT-UNIT
            classic name for OffsetAccount.GeneralLedgerChartAccount is OFF-ACCOUNT
		CostOfGoodsSoldAccount 		is a TransactionCodeBlock
            classic name for CostOfGoodsSoldAccount.AccountingUnit is CGS-ACCT-UNIT
            classic name for CostOfGoodsSoldAccount.GeneralLedgerChartAccount is CGS-ACCOUNT
            classic name for CostOfGoodsSoldAccount.Project is ACTIVITY-C

	Local Fields
		LocalCalculatePrice 	  	is an InternationalCost
		LocalOldCalculatePrice	  	is an InternationalCost
   		LocalMiscelleneousCurrency  is an  InternationalAmount 
		LocalEnteredUnitPrice		is an InternationalAmount
		LocalEnteredPrice			is an InternationalAmount
		LocalOriginalMiscCurrency	is an InternationalAmount
		LocalOldCalculateAmount		is an InternationalAmount
		LocalPercent				is a CostPercent
		LocalExchangeDate			is an ExchangeDate
		LocalExecuteCalculateTax    is Alpha 1
		CalculateTax
		LocalGeneralLedgerSystemCode		    is a GeneralLedgerSystemCode

    Derived Fields
    	DerivedLineNumber	is a DerivedField
    		type is Alpha 30
    		restricted
			if (CustomerOrderLine entered)
				return CustomerOrderLine
			else
				return " - "
    		
    	DerivedUnitPrice			is a DerivedField
    		type is like InternationalCost
    		restricted
    		if (Miscellaneous.ChargeType.FlatAmount)
    			return Miscellaneous.Price
			else
			if (Miscellaneous.ChargeType.UnitPrice)
				return Miscellaneous.UnitPrice
				
		DerivedUnitCost				is a DerivedField
    		type is like InternationalCost
    		restricted
    		if (Miscellaneous.ChargeType.FlatAmount)
    			return Miscellaneous.Cost
			else
			if (Miscellaneous.ChargeType.UnitPrice)
				return Miscellaneous.UnitCost		

		DerivedPercentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (PricePercent entered)
				LocalPercent = PricePercent
			else
				LocalPercent = CostPercent
			
			if (CustomerOrderLine entered)
				return (CustomerOrderLine.NetAmountCurrency * LocalPercent)
			else
				return (CustomerOrder.GoodsAmount * LocalPercent)

		DerivedAOCAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (ChargeType.FlatAmount)
				return EnteredPrice
			else
			if (ChargeType.Percentage)
				return DerivedPercentAmount
			else
			if (ChargeType.UnitPrice)
				if (CustomerOrderLine entered)
					return CustomerOrderLine.OrderQuantity * EnteredUnitPrice
				else
					return EnteredUnitPrice

		DerivedSequenceNumber is a DerivedField
			type is like CustomerOrderAddOnCharge
			return CustomerOrderAddOnCharge
			
		DerivedStatus is a DerivedField
			type is like Status
			return Status

		DerivedOldDiscountableAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ChargeType.FlatAmount) 
				return old UnitPrice * -1
			if (ChargeType.UnitPrice) 
				return CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellToStock * old UnitPrice * -1
			if (ChargeType.Percentage)					
				if (PricePercent entered)
					LocalPercent = old PricePercent
				else
					LocalPercent = old CostPercent			
				if (CustomerOrderLine entered)
					return CustomerOrderLine.NetAmountCurrency * LocalPercent * -1
				else
					return  CustomerOrder.GoodsAmount * LocalPercent  * -1

		CannotUpdateAOCTaxEgine 									is a MessageField
			restricted
			"CannotUpdateWhileAwaitingTaxApproval"

		CannotUpdateAOCProcessShipmentBods 							is a MessageField
			restricted
			"CannotUpdateWhileShipmentAwaitingTaxApproval"

		CannotCreateAOCMessageTaxEgine 								is a MessageField
			restricted
			"CannotCreateWhileAwaitingTaxApproval"

		CannotCreateAOCMessageProcessShipmentBods 					is a MessageField
			restricted
			"CannotCreateWhileShipmentAwaitingTaxApproval"

		CannotDeleteAOCMessageTaxEgine 								is a MessageField
			restricted
			"CannotDeleteWhileAwaitingTaxApproval"

		CannotDeleteAOCMessageProcessShipmentBods 					is a MessageField
			restricted
			"CannotDeleteWhileShipmentAwaitingTaxApproval"

		CannotCreateAddOnChargeMessage 		is a DerivedField
			type is Alpha 100
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotCreateAOCMessageTaxEgine
			else
				return CannotCreateAOCMessageProcessShipmentBods

		CannotUpdateAddOnChargeMessage 		is a DerivedField
			type is Alpha 100
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotUpdateAOCTaxEgine
			else
				return CannotUpdateAOCProcessShipmentBods

		CannotDeleteAddOnChargeMessage 		is a DerivedField
			type is Alpha 100
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotDeleteAOCMessageTaxEgine
			else
				return CannotDeleteAOCMessageProcessShipmentBods

    Conditions
		IsTaxLineItemAOCExists
			restricted
			when (TaxLineItemAOCRel exists)

    	IsReleasedCreateAllowed
    		restricted
    		when (CustomerOrder.Status.Released
    		and	  !CustomerOrder.OnProformaPaymentHold)
    	
    	IsUnreleasedCreateAllowed
    		restricted
    		when (CustomerOrder.Status.Unreleased
    		and	  !CustomerOrder.OnProformaPaymentHold)
    		
        IsAddOnCharge
        	restricted
            when (AddOnCharge entered
            and   not Status.Canceled)

        IsCommitted
        	restricted
            when (AtnObjId entered)

        IsCommittedC
        	restricted
            when (AtnObjIdC entered)

        IsMultRate
        	restricted
            when (CustomerOrder.CurrencyMultiplicationOrDivision.Multiply)

		IsFlatAmountOrUnitPrice
			restricted
			when (ChargeType.FlatAmount
			or ChargeType.UnitPrice)
			
        IsPercentage
        	restricted
            when (ChargeType.Percentage)

        PriceOrCostPercentEntered
        	restricted
        	when (PricePercent entered
        	and CostPercent entered)
        	
        IsProcessed
        	restricted
        	when (Status.Canceled    
		    or    Status.ReadyForPurge)

        CanDelete
        	restricted
        	when (CustomerOrder.Status.Unreleased
			or    CustomerOrder.Status.ReadyForPurge)	
		
		IsCustomerOrderLine
			restricted
			when (CustomerOrderLine entered)
		
		RecordExists
			restricted
			when (CustomerOrderAddOnCharge exists)
		
		SingleCallToOneSource
			restricted
			when (TaxStatus.Taxable
			and	  TaxEntityRel.ThirdParty.Sabrix
			and	  TaxEntityRel.DelayTaxProcessing
			and	  CustomerOrder.DerivedLineCount <= 200)

    Relations

        CustomerOrderLineRel
            one-to-many relation to CustomerOrderLine
            Field Mapping uses symbolic key
                related.Company           							= Company
                related.CustomerOrder     							= CustomerOrder

        OrderEntryAddOnChargeRel
            one-to-one relation to OrderEntryAddOnCharge
            Field Mapping uses symbolic key
                related.Company                        				= Company
                related.OrderEntryAddOnCharge.Misc     				= Miscellaneous
                related.OrderEntryAddOnCharge.Currency				= Currency
                
		OrderEntryAddOnChargesRel	is a OrderEntryAddOnCharge set
		
		AddOnChargeRel	
            one-to-one relation to AddOnCharge
            Field Mapping uses symbolic key
            	related.Company 									= Company
            	related.AddOnCharge									= AddOnCharge
        
        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company 									= Company
                   	
        AssociatedItemRel
            one-to-one relation to	AssociatedItem
            Field Mapping uses symbolic key
            	related.ItemGroup									= InventoryCompanyRel.ItemGroup			
            	related.Item										= CustomerOrderLine.Item	
            	related.AssociatedItem.AssociatedItemSubType		= "S"
            	related.AssociatedItem.RelatedItem					= CustomerOrderLine.Item.SubstititeItemsRel.AssociatedItem.RelatedItem	
            	related.AssociatedItem.RelatedCompany				= Company
            	related.AssociatedItem.RelatedLocation				= CustomerOrderLine.InventoryLocation
            	
        KitItemRel   
        	one-to-one relation to KitItem
            Field Mapping uses symbolic key
                related.ItemGroup									= InventoryCompanyRel.ItemGroup
                related.KitItem.Company								= Company
                related.KitItem.InventoryLocation					= CustomerOrderLine.InventoryLocation
                related.KitItem.Item								= CustomerOrderLine.Item

		PurchaseOrderInterfaceAddOnChargeRel						
			one-to-one relation to PurchaseOrderInterfaceAddOnCharge
            Field Mapping uses symbolic key
            	related.Company 												= Company
            	related.PurchaseOrderInterfaceAddOnCharge.SourceDocumentOrigin	= "OE"  
            	related.PurchaseOrderInterfaceAddOnCharge.SourceDocumentNumeric	= CustomerOrder
            	related.PurchaseOrderInterfaceAddOnCharge.LineNumber			= CustomerOrderLine
            	related.PurchaseOrderInterfaceAddOnCharge.AddOnCharge			= AddOnCharge
            	related.PurchaseOrderInterfaceAddOnCharge.Vendor				= blank 
            	
            			
        DuplicateCustomerOrderAddOnChargeRel
        	one-to-many relation to CustomerOrderAddOnCharge
        	Field Mapping uses Set3 
        		related.Company           								= Company
                related.CustomerOrder     								= CustomerOrder
                related.CustomerOrderLine 								= CustomerOrderLine 
				related.AddOnCharge										= Miscellaneous.AddOnCharge
           
        PurgedCustomerOrderAddOnChargeRel
        	one-to-many relation to CustomerOrderAddOnCharge
        	Field Mapping uses Set3 
        		related.Company           								= Company
                related.CustomerOrder     								= CustomerOrder
                related.CustomerOrderLine 								= blank 
                related.AddOnCharge										= AddOnCharge
            Instance Selection 
            	where (!related.Status.ReadyForPurge)

        PurgedCustomerOrderLineAddOnChargeRel
        	one-to-many relation to CustomerOrderAddOnCharge
        	Field Mapping uses Set3 
        		related.Company           								= Company
                related.CustomerOrder     								= CustomerOrder
                related.CustomerOrderLine 								= CustomerOrderLine 
                related.AddOnCharge										= AddOnCharge
            Instance Selection 
            	where (!related.Status.ReadyForPurge)            
            	 	
        PurchaseOrderInterfaceRel
        	one-to-many relation to PurchaseOrderInterface
        	Field Mapping uses symbolic key
        		related.Company 										= Company
            	related.PurchaseOrderInterface.SourceDocumentOrigin		= "OE"						
            	related.PurchaseOrderInterface.SourceDocumentNumeric	= CustomerOrder
            	related.PurchaseOrderInterface.SourceDocumentAlpha		= blank
            	related.PurchaseOrderInterface.OperatingCompany 		= Company
            	related.PurchaseOrderInterface.RequestingLocation		= CustomerOrderLine.InventoryLocation
            	related.PurchaseOrderInterface.LineNumber				= CustomerOrder
            Instance Selection 
            	where (related.PurchaseFromLocation						= CustomerOrderLine.PurchaseFromLocation
            	and    related.Vendor									= CustomerOrderLine.Vendor)
            	
		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity									= Company.AccountingEntity
				related.TaxCode									= TaxCode
		
		TaxLineItemAOCRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
			Instance Selection
			    where ((related.TaxLineItem.UniqueIdOfRelatedObject	= CustomerOrder.UniqueID 
				or      related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)
				and 	related.InvoiceNumber 						= CustomerOrder
				and	    related.RelatedObjectReference				= reference to this instance)
		
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
            	
    Sets

        Set3
            duplicates
            Instance Selection
                where (IsAddOnCharge)
            Sort Order
                Company
                CustomerOrder
                CustomerOrderLine
                AddOnCharge

        Set6
            indexed
            Sort Order
                Company
                CustomerOrder
                TaxCode
                ProductTaxCategory
                CustomerOrderLine
                CustomerOrderAddOnCharge

        Set7
            indexed
            Sort Order
                Company
                CustomerOrder
                CustomerOrderAddOnCharge
                CustomerOrderLine

	Rule Blocks
	
		CalculateAddonChargeAmountsForLine
			if (ChargeType.UnitPrice)
				if (CustomerOrder.Currency != Company.Currency
				and !Company.CurrencyBasedPricing)
					LocalEnteredUnitPrice			= (EnteredUnitPrice / CustomerOrder.CurrencyRate)
				else
					LocalEnteredUnitPrice				=	EnteredUnitPrice

			if (ChargeType.FlatAmount)
				if (CustomerOrder.Currency != Company.Currency
				and !Company.CurrencyBasedPricing)
					LocalEnteredPrice				= (EnteredPrice / CustomerOrder.CurrencyRate)
				else
					LocalEnteredPrice					= EnteredPrice
			if (ChargeType.Percentage)
				LocalOriginalMiscCurrency = (((CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellPriceCurrency) - CustomerOrderLine.EnteredDiscount) * PricePercent)
			if (ChargeType.UnitPrice)	
				LocalOriginalMiscCurrency = CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellToStock * LocalEnteredUnitPrice
			if (ChargeType.FlatAmount)
				LocalOriginalMiscCurrency = LocalEnteredPrice					

		UpdateCustomerOrderAndLine
			invoke UpdateOrderFromAddOnCharge CustomerOrder
				invoked.PrmTotalAddOnChargeAmount 			= LocalOriginalMiscCurrency
				if (TrackType.Freight)
					invoked.PrmFreightTotal 				= LocalOriginalMiscCurrency
			 	if (TrackType.Insurance)
					invoked.PrmInsuranceTotal 				= LocalOriginalMiscCurrency
				if (TrackType.CustomsCharges)
					invoked.PrmCustomsTotal 				= LocalOriginalMiscCurrency
				if (TrackType.OtherAOC)
					invoked.PrmOtherAddOnChargesTotal		= LocalOriginalMiscCurrency
				if (OrderDiscount changed)
					if (OrderDiscount) 
						invoked.PrmDiscountableAmount = DerivedAOCAmount
					else 
						invoked.PrmDiscountableAmount = DerivedOldDiscountableAmount								
				else
					if (OrderDiscount) 
						invoked.PrmDiscountableAmount = LocalOriginalMiscCurrency				
				if (TaxStatus.Taxable
				and EnteredTaxable not entered)
					invoked.PrmTaxableAmount				= LocalOriginalMiscCurrency
				invoked.PrmCreateTaxLogForAOC				= true
					
			if (CustomerOrderLine entered)
				invoke UpdateOrderLineFromAddOnCharge CustomerOrderLine
					if (TrackType.Freight)
						invoked.PrmFreightTotal 				= LocalOriginalMiscCurrency
				 	if (TrackType.Insurance)
						invoked.PrmInsuranceTotal 				= LocalOriginalMiscCurrency
					if (TrackType.CustomsCharges)
						invoked.PrmCustomsTotal 				= LocalOriginalMiscCurrency
					if (TrackType.OtherAOC)
						invoked.PrmOtherAddOnChargesTotal		= LocalOriginalMiscCurrency
			
			if (not SingleCallToOneSource)
				include CalculateSalesTaxAOCForOneSource
		
		CalculateSalesTaxAOCForOneSource
			if (TaxEntityRel.ThirdParty.Sabrix)
				initialize CalculateTax
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.System						= "OE"
				CalculateTax.CallingModule				= "Customer_Order"
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.ProcessLevel				= CustomerOrder.BillingProcessLevel
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.PostalAddress				= CustomerOrder.ShipPostalAddress
				CalculateTax.FromPostalAddress			= CustomerOrder.InventoryLocation.PostalAddress
				CalculateTax.Function					= "C"
				CalculateTax.ThirdPartyFunction			= "I"
				CalculateTax.TransactionType			= "S"
				CalculateTax.TaxableAmount				= DerivedAOCAmount
				CalculateTax.TaxDate					= CustomerOrder.TaxDate
				CalculateTax.ShipmentDate				= CustomerOrder.ExpectedShipDate
				CalculateTax.InvoiceDate				= current corporate date
				CalculateTax.GeneralLedgerDate			= current corporate date
				CalculateTax.PaymentDate				= current corporate date
				CalculateTax.ProductTaxCategory			= ProductTaxCategory
				CalculateTax.InvoiceAmount				= CustomerOrder.OriginalOpenOrderAmount
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= CustomerOrder.PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= CustomerOrder.ShipTerm
				CalculateTax.Customer					= CustomerOrder.Customer
				CalculateTax.VendorCustomerName			= CustomerOrder.Customer.Name
				CalculateTax.Description				= Description
				if (CustomerOrder.OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
				CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
					
		DeleteCustomerOrderAndLine	
			invoke UpdateOrderFromAddOnCharge CustomerOrder
				invoked.PrmTotalAddOnChargeAmount 			-= LocalOriginalMiscCurrency
				if (TrackType.Freight)
					invoked.PrmFreightTotal 				-= LocalOriginalMiscCurrency
			 	if (TrackType.Insurance)
					invoked.PrmInsuranceTotal 				-= LocalOriginalMiscCurrency
				if (TrackType.CustomsCharges)
					invoked.PrmCustomsTotal 				-= LocalOriginalMiscCurrency
				if (TrackType.OtherAOC)
					invoked.PrmOtherAddOnChargesTotal		-= LocalOriginalMiscCurrency
				if (OrderDiscount)
					invoked.PrmDiscountableAmount 			-= LocalOriginalMiscCurrency 
				if (TaxStatus.Taxable
				and EnteredTaxable not entered)
					invoked.PrmTaxableAmount				-= LocalOriginalMiscCurrency
					
			if (CustomerOrderLine entered)
				invoke UpdateOrderLineFromAddOnCharge CustomerOrderLine
					if (TrackType.Freight)
						invoked.PrmFreightTotal 				-= LocalOriginalMiscCurrency
				 	if (TrackType.Insurance)
						invoked.PrmInsuranceTotal 				-= LocalOriginalMiscCurrency
					if (TrackType.CustomsCharges)
						invoked.PrmCustomsTotal 				-= LocalOriginalMiscCurrency
					if (TrackType.OtherAOC)
						invoked.PrmOtherAddOnChargesTotal		-= LocalOriginalMiscCurrency
						
		ValidatePurchaseOrderInterface
			if (Miscellaneous.AddOnCharge entered)
				for each CustomerOrderLineRel
					if (each.CreatePurchaseOrder)
						constraint (PurchaseOrderInterfaceRel exists)
							"NotAllowedAfterPurchaseOrderCreated;AddOnChargeHasAPurchaseOrderAddOnCharge"				
							
		CalculateUpdateAddonChargeAmountsForLine
			if (Miscellaneous.ChargeType.Percentage)
				LocalOriginalMiscCurrency = (((CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellPriceCurrency) - CustomerOrderLine.EnteredDiscount) * (PricePercent - old PricePercent))
			else
				include CalculateAddonChargeAmountsForLine
				LocalOldCalculateAmount = LocalOriginalMiscCurrency
				
				if (Miscellaneous.ChargeType.FlatAmount)  
					EnteredPrice = UnitPrice
					Cost = UnitCost
					
				if (Miscellaneous.ChargeType.UnitPrice)
					EnteredUnitPrice = UnitPrice
				
				include CalculateAddonChargeAmountsForLine
				
				LocalOriginalMiscCurrency -=  LocalOldCalculateAmount	
						
    Field Rules

        Miscellaneous
        	required																	
            
            cannot be changed
				"CannotChangeAddOnChargeCode"											
           
        	constraint (!IsProcessed)
				"AddOnChargeHasBeenProcessed<Status>"   								
				
			if (CustomerOrder.OrderEntryOrderType.CreatePurchaseOrder)   
				if (Miscellaneous.AddOnCharge entered) 			
					if (CustomerOrder.BillingFreightCode entered)
						constraint (CustomerOrder.BillingFreightCode.AddOnCharge != Miscellaneous.AddOnCharge) 
							"AddOnChargeWithSamePurhcaseOrderAddOnChargeCodeExists"			   
					constraint (!AddOnCharge.AddOnChargeType.Allowance)
						"CannotAttach;PurchaseOrderAddOnChargeDefinedAsAllowance"					
						
			if (Miscellaneous.ChargeType.UnitPrice)
				constraint (CustomerOrderLine entered)
					"UnitPricedAddOnChargeCannotBeEnteredOnOrderHeader"

		AddOnCharge
			default to Miscellaneous.AddOnCharge
		
		TrackType
			default to Miscellaneous.TrackType
			
		Currency	
			if (!Company.CurrencyBasedPricing)
				default to Company.Currency										
			else
				default to CustomerOrder.Currency		

		Description
			default to Miscellaneous.Description

		OrderDiscount
			default to Miscellaneous.OrderDiscount

		
		TaxStatus		
			if (CustomerOrder.TaxStatus.Exempt)
				default to CustomerOrder.TaxStatus
			else 
				default to Miscellaneous.TaxStatus
        
		TaxCode
			if (TaxStatus.Taxable)
				default to Miscellaneous.TaxCode
				default to CustomerOrderLine.TaxCode
				default to CustomerOrder.TaxCode
			else
				initialize TaxCode                                        

		ChargeType
			default to Miscellaneous.ChargeType

		UnitPrice
			if (IsPercentage)
				cannot be entered
					"CannotEnterUnitPrice;ChargeTypeIsPercent" 						
					
			if (IsFlatAmountOrUnitPrice)		
				required
					"MustEnterUnitPriceAndUnitCost"									
				
			if (!Company.CurrencyBasedPricing
			and Company.Currency != CustomerOrder.Currency)
				default to DerivedUnitPrice / CustomerOrder.CurrencyRate
			else
				default to DerivedUnitPrice
					
			if (Miscellaneous.ChargeType.UnitPrice)
				EnteredUnitPrice = UnitPrice

		UnitCost															
			if (IsPercentage)
				cannot be entered
					"CannotEnterUnitCost;ChargeTypeIsPercent" 						
				
			if (!Company.CurrencyBasedPricing
			and Company.Currency != CustomerOrder.Currency)
				default to  DerivedUnitCost / CustomerOrder.CurrencyRate
			else
				default to DerivedUnitCost 
		
		PricePercent
			if (IsFlatAmountOrUnitPrice)
				cannot be entered
					"PricePercentCannotBeEnteredForChargeTypeFlatAmountOrUnitPrice"		
			else            
				default to Miscellaneous.PricePercent
			
		CostPercent
			if (IsFlatAmountOrUnitPrice)
				cannot be entered	
					"CostPercentCannotBeEnteredForChargeTypeFlatAmount"		
			else
				default to Miscellaneous.CostPercent
				if (PricePercent not entered)
					required
						"MustEnterPriceOrCost" 					
																				
		ProductTaxCategory
			default to 	Miscellaneous.ProductTaxCategory	

		SalesAccount
			default to Miscellaneous.SalesAccount
			default to CustomerOrderLine.SalesAccount          
			LocalGeneralLedgerSystemCode = "OE"
			if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"          
						
		OffsetAccount
			default to Miscellaneous.OffsetAccount
			LocalGeneralLedgerSystemCode = "OE"
			if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
			
		CostOfGoodsSoldAccount		
			default to Miscellaneous.CostOfGoodsSoldAccount  
			default to CustomerOrderLine.CostOfGoodsSoldAccount   
			LocalGeneralLedgerSystemCode = "OE"
			if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)					
					"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"  
			
		EnteredPrice
			if (Miscellaneous.ChargeType.FlatAmount)  
				force default to UnitPrice  
			
		Cost    
			if (Miscellaneous.ChargeType.FlatAmount) 
				force default to UnitCost

	Create Rules
		constraint (DuplicateCustomerOrderAddOnChargeRel not exists)
			"AddOnChargeWithSamePurchaseOrderAddOnChargeCodeExist"
													
	StateCycles
	
		CustomerOrderAddOnChargeTransaction is a StateCycle
			state field is Status		
	
			Unreleased is a State
				Create is a Create Action
					valid when (IsUnreleasedCreateAllowed)
					Entrance Rules
						LocalExchangeDate = CustomerOrder.OrderDate

					Exit Rules
					
						if (CustomerOrderLine entered)
							include CalculateAddonChargeAmountsForLine
							increment CustomerOrderLine.LastAddOnChargeSequence
						else	
							initialize LocalOriginalMiscCurrency
							if (IsPercentage)
								LocalOriginalMiscCurrency = ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * PricePercent)
							else
								LocalOriginalMiscCurrency = UnitPrice
							increment CustomerOrder.LastAddOnChargeSequence
						include UpdateCustomerOrderAndLine
						
				Update is an Update Action
					Entrance Rules
						LocalExchangeDate = CustomerOrder.OrderDate

					Action Rules
						initialize LocalCalculatePrice
						initialize LocalOldCalculatePrice
						
						if (CustomerOrderLine entered)
							include CalculateUpdateAddonChargeAmountsForLine
						else
							if (IsPercentage)
								LocalOriginalMiscCurrency 	= ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * (PricePercent - old PricePercent))
							else
								LocalOriginalMiscCurrency 	= UnitPrice - EnteredPrice
								LocalEnteredPrice = EnteredPrice
								
					Exit Rules	
						include UpdateCustomerOrderAndLine
												
							
				Delete is a Delete Action
					Entrance Rules
						
						initialize 	LocalOriginalMiscCurrency
						if (CustomerOrderLine entered)
							include CalculateAddonChargeAmountsForLine
						else	
							if (IsPercentage)
								LocalOriginalMiscCurrency = ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * PricePercent)
							else
								LocalOriginalMiscCurrency = UnitPrice	
					
					Exit Rules
					
						include DeleteCustomerOrderAndLine
						if (AddOnCharge entered)
							if (CustomerOrderLine.CreatePurchaseOrder)
								invoke Delete PurchaseOrderInterfaceAddOnChargeRel
								
				Release is an Instance Action
					restricted
					Action Rules
						LocalGeneralLedgerSystemCode = "OE"
						if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
						if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
						if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"
						if (Miscellaneous.AddOnCharge entered)
							if (CustomerOrderLine.CreatePurchaseOrder)
								if (PurchaseOrderInterfaceRel not exists)
									if (PurchaseOrderInterfaceAddOnChargeRel not exists)						
										invoke Create PurchaseOrderInterfaceAddOnChargeRel         
									else
										invoke Update PurchaseOrderInterfaceAddOnChargeRel
											if (ChargeType.FlatAmount)	
										 		invoked.Quantity						= CustomerOrderLine.OrderQuantity 
												invoked.AddOnChargeEntryMethod			= "T"
												invoked.TotalAddOnChargeAmount			= Cost
											else
											if (ChargeType.UnitPrice)
												invoked.Quantity						= CustomerOrderLine.OrderQuantity
												invoked.EnteredUnitCost					= UnitCost 
												invoked.AddOnChargeEntryMethod			= "U"
											else
											if (ChargeType.Percentage)
												invoked.Quantity						= CustomerOrderLine.OrderQuantity
												invoked.AddOnChargeEntryMethod			= "U"
												invoked.AddOnChargePercent				= CostPercent
											
											if (CustomerOrderLine not entered)
												invoked.CustomerOrderAddOnChargeType	= "HA"
											else
												invoked.CustomerOrderAddOnChargeType	= "LA"

						
						make transition to Released
			
			Released is a State
				Create is a Create Action
					valid when (IsReleasedCreateAllowed)							
					Entrance Rules
						if ((CustomerOrder.TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotCreateAddOnChargeMessage>"

						LocalExchangeDate = CustomerOrder.OrderDate

					Exit Rules
						if (CustomerOrderLine entered)
							include CalculateAddonChargeAmountsForLine
						else	
							initialize LocalOriginalMiscCurrency
							if (IsPercentage)
								LocalOriginalMiscCurrency = ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * PricePercent)
							else
								LocalOriginalMiscCurrency = UnitPrice					
						include UpdateCustomerOrderAndLine
						
				Update is an Update Action
					valid when (!CustomerOrder.OnProformaPaymentHold)
					Entrance Rules
						if ((CustomerOrder.TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotUpdateAddOnChargeMessage>"

						LocalExchangeDate = CustomerOrder.OrderDate

					Action Rules
						initialize LocalCalculatePrice
						initialize LocalOldCalculatePrice
						if (CustomerOrderLine entered)
							include CalculateUpdateAddonChargeAmountsForLine
						else
							if (IsPercentage)
								LocalOriginalMiscCurrency 	= ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * (PricePercent - old PricePercent))
							else
								LocalOriginalMiscCurrency 	= UnitPrice - EnteredPrice
								LocalEnteredPrice = EnteredPrice
								
					Exit Rules
						include UpdateCustomerOrderAndLine
												
							
				Delete is a Delete Action
					valid when (!CustomerOrder.OnProformaPaymentHold)
					Entrance Rules
						if ((CustomerOrder.TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotDeleteAddOnChargeMessage>"

						initialize 	LocalOriginalMiscCurrency
						if (CustomerOrderLine entered)
							include CalculateAddonChargeAmountsForLine
						else	
							if (IsPercentage)
								LocalOriginalMiscCurrency = ((CustomerOrder.InventoryGoodsAmount + CustomerOrder.NonInventoryGoodsAmount) * PricePercent)
							else
								LocalOriginalMiscCurrency = UnitPrice	
					
					Exit Rules

						include DeleteCustomerOrderAndLine
							
						if (AddOnCharge entered)
							if (CustomerOrderLine.CreatePurchaseOrder)
								invoke Delete PurchaseOrderInterfaceAddOnChargeRel
						invoke Released.SetToCanceled CustomerOrder
								
				Cancel is an Instance Action
					valid when (!CustomerOrder.OnProformaPaymentHold)
					restricted
					Action Rules
						make transition to Canceled	
					
			
			Shipped is a State
			
			Canceled is a State
			
			ReadyForPurge is a State		
			
			
	Actions 
		UpdateTaxableCurrencyAmount is an Instance Action			
			restricted
			Action Rules
				if (CustomerOrderLine entered)
						if (ChargeType.Percentage)
							LocalMiscelleneousCurrency = (((CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellPriceCurrency) - CustomerOrderLine.DiscountAmountCurrency - CustomerOrderLine.EnteredDiscount) * (PricePercent))
							
						else 
						if (ChargeType.UnitPrice)
							LocalMiscelleneousCurrency = CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellToStock * EnteredUnitPrice
							
						else
							LocalMiscelleneousCurrency = EnteredPrice
				else
					initialize LocalMiscelleneousCurrency
					
					if (ChargeType.UnitPrice
					or ChargeType.Percentage)
						initialize CustomerOrderLine
						
						if (CustomerOrderLine entered)
							if (ChargeType.Percentage)
								LocalMiscelleneousCurrency = LocalMiscelleneousCurrency + (((CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellPriceCurrency) - CustomerOrderLine.DiscountAmountCurrency - CustomerOrderLine.EnteredDiscount) * PricePercent)
							else 
								LocalMiscelleneousCurrency = LocalMiscelleneousCurrency + (CustomerOrderLine.OrderQuantity * CustomerOrderLine.SellToStock) * EnteredUnitPrice
					else
						LocalMiscelleneousCurrency         = LocalMiscelleneousCurrency + EnteredPrice
				
				invoke Update CustomerOrder
					invoked.TotalAddOnChargeAmount         = CustomerOrder.TotalAddOnChargeAmount + LocalMiscelleneousCurrency
					if (OrderDiscount)
						invoked.DiscountableAmount		   = CustomerOrder.DiscountableAmount + LocalMiscelleneousCurrency
					if (TaxStatus.Taxable)
						TaxableCurrencyAmount			   = LocalMiscelleneousCurrency
						invoked.TaxableAmount              = CustomerOrder.TaxableAmount + LocalMiscelleneousCurrency
						
		Purge is a Purge Action
			restricted				
