FranchiseStandardCharge is a BusinessClass
    owned by fr
    prefix is FST
    classic name is FRSTDCHG

    Ontology
        symbolic key is FranchiseStandardCharge
            classic set name is FSTSET1
            classic name for FranchiseStandardCharge.Currency is CURRENCY-CODE

    Patterns
    	implements ContextualParent
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        Description
            classic name is DESC
        ChargeType                      is Numeric size 1
            States
                SalesBased value is 1
                NoteBased  value is 2
                Special    value is 3
        Frequency                       is AlphaUpper size 1
            States
                Weekly    value is "W"
                Monthly   value is "M"
                Quarterly value is "Q"
                Yearly    value is "Y"
        Active                          is Boolean
            classic name is ACTIVE-FLAG
       	ProcessLevel					is a BillingProcessLevel
		TaxableFlag 					is AlphaUpper size 1
	        States
	            Exempt  value is "E"
	            Taxable value is "T"
        TaxCode
        MinimumAmount                   is an InternationalAmount
            classic name is MIN-AMT
        MaximumAmount                   is an InternationalAmount
            classic name is MAX-AMT
        PercentOfSales
            classic name is PERC-OF-SALES
        BaseAmount                      is an InternationalAmount

        RevenueAccount                  is a FinanceCodeBlock
        	default label is "Sales"



        NoteAccount                		is a FinanceCodeBlock
			default label is "NoteAsset"


        NoteAccrualAccount              is a FinanceCodeBlock
			default label is "NoteAccrual"

	
        NoteAccrualOffsetAccount  		is a FinanceCodeBlock

			default label is "NoteAccrualOffset"
			
        AccrualAccount                 	is a FinanceCodeBlock
        	default label is "Accrual"


        AccrualOffsetAccount            is a FinanceCodeBlock
        	default label is "AccrualOffset"

        StepOperand
        StepLimits
            classic name is STEP-LIMIT
        StepPercents
            classic name is STEP-PCT
        BalanceFlag
            classic name is BALANCE-FL


        InterestRate
        CalculationType
            classic name is CALC-TYPE

        UsedFlag                        is a UsedFl
            classic name is USED-FL



 	Local Fields
		LocalCounter 				is Numeric size 2
		TaxOut 						is Alpha 1
		CalculateTax
		TaxTableOutput

					
	Derived Fields
	
		ActiveStatus is a DerivedField
			type is Alpha size 10
			if(Active)
				return "Active"
			if(not Active)
				return "InActive"

		DerivedChargeType is a DerivedField
			type is Alpha size 20
			if(ChargeType.SalesBased)
				return "Sales Based charge"
			if(ChargeType.NoteBased)
				return "Note Based charge"
			if(ChargeType.Special)
				return "Special charge"
													
    Conditions
    	StepsExist
    		restricted
    		when (StepLimits entered or StepPercents entered)
    		
        IsNoteType
        	restricted
            when (ChargeType.NoteBased)

        IsSalesType
        	restricted
            when (ChargeType.SalesBased)

        IsSpecialType
        	restricted
            when (ChargeType.Special)
		
		CalendarsDefined
			restricted
			when (FranchiseCompanyRel.LastCurrentAndNextCalendarsExist)
			
		FranchiseContractExists
			restricted	
			when (FranchiseStandardChargeGroupDetailChargeRel exists)
			
		RequiredAccountsProvided
			restricted
			when (AccrualAccount entered
			and AccrualOffsetAccount entered
        	and RevenueAccount entered)
        
        ThisRecordExists
        	restricted
        	when (ThisRecord exists)
        
        PercentOfSalesEntered
        	restricted
        	when (PercentOfSales entered)
        		
		RecordExists
			restricted
			when(FranchiseStandardCharge exists)

		IsValidForActorContext			
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   Company.GeneralLedgerCompany.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))
        			
    Relations
   		
    	ThisRecord
    		one-to-one relation to FranchiseStandardCharge
    		Field Mapping uses symbolic key
    			related.Company					= Company    		
    			related.FranchiseStandardCharge	= FranchiseStandardCharge

    	SalesTypeChargesRel
    		one-to-many relation to FranchiseStandardCharge
    		Field Mapping uses symbolic key
    			related.Company					= Company
    		Instance Selection
    			where (IsSalesType)
    			    			
   		NoteTypeChargesRel
    		one-to-many relation to FranchiseStandardCharge
    		Field Mapping uses symbolic key
    			related.Company					= Company
    		Instance Selection
    			where (IsNoteType)    	

    	SpecialTypeChargesRel
    		one-to-many relation to FranchiseStandardCharge
    		Field Mapping uses symbolic key
    			related.Company					= Company
    		Instance Selection
    			where (IsSpecialType)    
    
    	FranchiseCompanyRel	
    		one-to-one relation to FranchiseCompany
    		Field Mapping uses symbolic key
    			related.Company					= Company
    	
        FrchargeRel
            one-to-many relation to FranchiseContractCharge
            Field Mapping uses symbolic key
                related.Company 				= Company

        FranchiseStandardChargeGroupDetailChargeRel
            one-to-many relation to FranchiseStandardChargeGroupDetail
            Field Mapping uses symbolic key
                related.Company 				= Company
           	Instance Selection
           		where (related.FranchiseStandardChargeGroupDetail.FranchiseStandardCharge = FranchiseStandardCharge)
                    
        FranchiseStandardChargeRel
            one-to-many relation to FranchiseStandardCharge
            Field Mapping uses symbolic key
                related.Company 				= Company

        BillingProcessLevelRel
            one-to-one relation to BillingProcessLevel
            required
            Field Mapping uses symbolic key
                related.Company             	= Company
                related.BillingProcessLevel 	= ProcessLevel

        BillingProcessLevelsRel
            one-to-many relation to BillingProcessLevel
            Field Mapping uses symbolic key
                related.Company             	= Company

	

		


    Sets

        Set2
            indexed
            Instance Selection
                where (IsSalesType)
            Sort Order
                Company
                FranchiseStandardCharge

        Set3
            indexed
            Instance Selection
                where (IsNoteType)
            Sort Order
                Company
                FranchiseStandardCharge

		ByCompanyChargeType
			Sort Order
				Company
				ChargeType
				FranchiseStandardCharge	

	Attach Rules
		constraint (Active)
			"StandardChargeIsInactive"



	Rule Blocks
		ValidateSteps
			if (StepsExist)
	    		LocalCounter = 1
	    		while (LocalCounter <= 10)
	    			if (StepPercents.StepPercent[LocalCounter] > 0)
	    				constraint (StepLimits.StepLimit[LocalCounter] > 0)
	    					"AStepLimitIsRequiredForEachStepPercent"
		    			if (StepLimits.StepLimit[LocalCounter] > 0)
		    				constraint (StepPercents.StepPercent[LocalCounter] entered)
		    					"AStepPercentIsRequiredForEachStepLimit"
						if (LocalCounter > 1)
							constraint (StepLimits.StepLimit[LocalCounter] > StepLimits.StepLimit[LocalCounter - 1])
								"UpperLimitMustBeGreaterThanThePreviousLimit"//"UpperLimitMustBeGreaterThanOrEqualToZero"    
						if (!StepLimits.StepLimit[LocalCounter + 1] entered)
		    				constraint (StepLimits.StepLimit[LocalCounter] >= 9999999999999)
		    					"LastUpperLimitMustContainAll_9's"//"LastUpperLimitMustContainAll9's"        
		   				LocalCounter += 1
					else 
						LocalCounter = 11	


		CalculateTax
			initialize CalculateTax
			CalculateTax.Function 	= "I"
			CalculateTax.TaxCode 	= TaxCode
			CalculateTax.TaxEntity	= Company.AccountingEntity	
			TaxOut            		= CalculateTax.ExecuteCalculateTax
			TaxTableOutput    		= CalculateTax.TaxTable.TaxTableOutput[1]
			if (CalculateTax.OutputErrorNumber entered)
                display "<CalculateTax.OutputErrorMessage>"	
            if (TaxTableOutput.TaxPoint = "S")
            	display "TaxPointS"				
			if (TaxOut = "N")
				display "TaxOutN"				
            if (!CalculateTax.VerifiedOK)
            	display "NotVerifiedOK"			// is this necessary or similar to TaxOut = "N"


















			
 	Field Rules
 		ChargeType
 			required
 			if (ChargeType = "1")
 			 	constraint (!NoteAccount entered)
					"<ChargeType>RequiresASalesAccount"
        		constraint (!NoteAccrualAccount entered)
					"<ChargeType>RequiresAnAccrualAccount"
        		constraint (!NoteAccrualOffsetAccount entered)
					"<ChargeType>RequiresAnAccrualOffsetAccount"
			cannot be changed


					
        Active
        	initial value is true
 			if (!Active)
 				constraint (FranchiseStandardChargeGroupDetailChargeRel not exists)
 					"CannotInactivate;ChargeIsAssignedToStandardContract"//"CannotInactivate;ChargeIsOnAStandardContract"   
 		
 		ProcessLevel
 			default to (FranchiseCompanyRel.ProcessLevel)
 			constraint (BillingProcessLevelRel exists)	
 				"BillingProcessLevel<ProcessLevel>IsNotValidForFranchiseCompany<Company>"
 			
 		TaxCode
 			if (TaxableFlag.Taxable)
 				constraint (TaxCode entered)
 					"TaxCodeRequired"//"TaxCodeRequired"                     
 			if (TaxableFlag.Exempt)
 				constraint (TaxCode not entered)
 					"TaxCodeIsNotValidWithTaxableFlagOf_\Exempt"//"TaxCodeIsNotValidWithTaxableFlagOfExempt" 
 			include CalculateTax
 		
 		MinimumAmount
 			constraint (IsSalesType)
				"MustBeSalesTypeToEnterMinimumAmount" 	
			if (MaximumAmount != 0)			 			
	 			constraint (MaximumAmount >= MinimumAmount)
	 				"MaximumAmountMustBeGreaterThanOrEqualToTheMinimumAmount"//"MaxAmountMustBeGreaterThanOrEqualToTheMinAmount"      
 		MaximumAmount
 			constraint (IsSalesType)
				"MustBeSalesTypeToEnterMaximumAmount"	
			if (MinimumAmount != 0) 	 			
	 			constraint (MaximumAmount >= MinimumAmount)
	 				"MaximumAmountMustBeGreaterThanOrEqualToTheMinimumAmount"//"MaxAmountMustBeGreaterThanOrEqualToTheMinAmount"      
 		PercentOfSales
 			constraint (IsSalesType)
				"MustBeSalesTypetoEnter%OfSales" 			
 			constraint (PercentOfSales <= 100.00)
 				"PercentOf_\SalesCannotBeGreaterThan_100%"//"PercentOfSalesCannotBeGreaterThan100%"       
 			if (PercentOfSales > 0)
 				constraint (StepLimits.StepLimit[1] not entered)
 					"CannotHave_\Default_\PercentOf_\SalesAnd_\Sliding_\Scale"//"CannotHaveDefaultPercentOfSalesAndSlidingScale"     

		BaseAmount
 			constraint (IsSalesType)
				"MustBeSalesTypetoEnterBaseAmount"		
		
        BalanceFlag
            required
            default to "N"

        Description
            required

        Frequency
            required
			if (FranchiseCompanyRel.SalesFlag.No)
				constraint (all FranchiseStandardChargeRel.Frequency = Frequency)
					"FranchiseCompanyAggregateSalesForAllContractsIsNotSelectedOnThisFranchiseCompany;AllChargesMustHaveTheSameFrequency"//"AggregateSalesNotUsed,CannotMixFrequencies"      
	        constraint (CalendarsDefined)
    	       	"Weekly,Monthly,Quarterly,AndYearlyCalendarsMustBeDefinedForLast,CurrentAndNextYears"
	
        TaxableFlag
            required
            default to "E"
            
 		AccrualAccount
 			required

        AccrualOffsetAccount
        	required
        	
        RevenueAccount   		
 			required
 			
        NoteAccount 
			constraint (IsNoteType)
				"NoteAccountsAreOnlyAllowedOnNoteTypeCharges"
				
        NoteAccrualAccount
			constraint (IsNoteType)			
				"NoteAccountsAreOnlyAllowedOnNoteTypeCharges"
				
        NoteAccrualOffsetAccount
			constraint (IsNoteType)
				"NoteAccountsAreOnlyAllowedOnNoteTypeCharges"
				
		StepLimits
			if (StepsExist)
				constraint (IsSalesType)
					"StepsOnlyAllowedOnSalesCharges"

		StepPercents
			if (StepsExist)
				constraint (IsSalesType)
					"StepsOnlyAllowedOnSalesCharges"							
	


    Actions
        Create is a Create Action
        	restricted























					
		CreateSalesBasedCharge is a Create Action
       		Action Rules
       			ChargeType	= "1"	
        		if (StepsExist)
					include ValidateSteps		

		UpdateSalesBasedCharge is an Update Action				
			valid when (IsSalesType)	
	       	Action Rules
	       		if (StepsExist)
					include ValidateSteps	
		
		CreateNoteBasedCharge is a Create Action
			Action Rules
				ChargeType	= "2"

		UpdateNoteBasedCharge is an Update Action
			valid when (IsNoteType)

		CreateSpecialCharge is a Create Action
	        Action Rules
	        	ChargeType = "3"    
	            	
  		UpdateSpecialCharge is an Update Action
			valid when (IsSpecialType)
			
        Update is an Update Action
			restricted

        Delete is a Delete Action



