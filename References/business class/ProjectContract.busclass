ProjectContract is a BusinessClass
    owned by Projects
    prefix is PrCon

	Ontology
		symbolic key is ProjectContract
 
	Patterns
		implements StaticJava
        implements BODId	
		implements InlineUserFields
			size is 3000
	
	Persistent Fields
		ContractID					is Alpha size up to 30
		Description
		ContractAmount				is a CurrencyAmount
			precision is Currency.NumberOfDecimals
		Currency					is a FromCurrency
		RevenueMethod				is Numeric size 1
			States
				FullAccrual				value is 1
				Milestone				value is 2
				PercentageOfCompletion	value is 3
				Installment				value is 4
		BillingMethod				is Numeric size 1
			States
				CostReimbursement	value is 1
				CostPlus			value is 2
				TimeAndMaterials	value is 3
				Milestone			value is 4
				Installment			value is 5
				RateTable			value is 6
		RevenueRecognition			is Numeric size 1				
			States	
				Combined			value is 1
				Separate			value is 2  	
		ExcludeAP					is Boolean
			default label is "ExcludeUnpaidAP"
		MarkupPercent				is Percent size 5.2
		BillingRateTable			is a ProjectBillingRateTable
		TotalBilledAmount			is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing
		TotalRecognizedAmount		is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing			
		TotalBilledFees				is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing			
		TotalRecognizedFees			is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing			
		TotalBilledAllowance		is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing
		TotalRecognizedAllowance	is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing
		TotalRetainedAmount			is a CurrencyAmount
			precision is ProjectContract.Currency.NumberOfDecimals
			disable Auditing
		TotalBilledPassThrough		is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing
		TotalRecognizedPassThrough	is a CurrencyAmount
			precision is Currency.NumberOfDecimals
			disable Auditing
		LastRunGroup				is Numeric size 8
			disable Auditing
		LastInvoiceNumber			is Numeric size 8
			disable Auditing			
		ErrorMessage				is Text
			disable Auditing
		ProjectContractBudgetAmount is an InternationalAmount
			precision is Currency.NumberOfDecimals
		Active
		PersonResponsible			is an Employee
		VendorInvoiceLink 			is an URL
		CurrencyTable
			default label is "OverrideCurrencyTable"
		AllocateExpenditures		is Boolean
		ProjectContractInvoiceFormat
		ProjectInvoiceFormat
		ProjectContractInvoiceReversalFormat
		ProjectInvoiceReversalFormat
		MaximumFees					is a CurrencyAmount
			precision is Currency.NumberOfDecimals
		UseIDM						is Boolean
			default label is "UseIDMTemplate"
		IDMOutputSettings
			default label is "InvoiceTemplate"
			protected
			restricted
		Scenario
		ProjectTeam
		DisplayContract				is like Project
		ContractType				is a ProjectContractType
		InvoicingMessage			is Text
			disable Auditing
		InvoicingInProgress			is Boolean
			disable Auditing
		RevenueInProgress			is Boolean
			disable Auditing
		CreateSummarizedInvoices	is Boolean
		SummarizeByProject			is Numeric size 1
			States
				Posting				value is 1
				SummaryParent		value is 2
				Contract			value is 3
		SummarizeByDimension		is Numeric size 1
			States
				Posting				value is 1
				SummaryParent		value is 2
		AlternateChart				is a ReportingChart
		SummarizeByResource			is Boolean
		SummarizeByRate				is Boolean
		SummarizeByFeeCode			is Boolean
#ifdef module tx
		SellerTaxCode				is a TaxCode
#endif
#ifndef module tx
		SellerTaxCode	 			is AlphaUpper size 15
#endif		
		SellerTaxLocation			is a ProjectServiceLocation
#ifdef module idm
		ProjectContractInvoiceTemplate 	is an IDMTemplate
			default label is "InvoiceFormat"
		ProjectContractInvoiceReversalTemplate 	is an IDMTemplate
			default label is "InvoiceReversalFormat"	
#endif
#ifndef module idm
		ProjectContractInvoiceTemplate 	is Numeric size 10
			default label is "InvoiceFormat"
		ProjectContractInvoiceReversalTemplate 	is Numeric size 10
			default label is "InvoiceReversalFormat"
#endif
		FrontEndSplits			        is Boolean
			default label is "FrontEndSplit"
		ProgramIncome					is Boolean
		ProgramIncomeType				is Numeric size 1
			States
				Additive	    value is 1
				Deductive		value is 2
				CostShare		value is 3

		DeferAndHoldRemainder			is Boolean
		RemainderOption			is Numeric size 1
			default label is "DeferAndHoldRemainder"
			States
				DeferOnly		value is 1
				DeferAndHold	value is 2
		SingleProjectInvoice			is Boolean
			default label is "SingleProjectInvoices"
		SingleProjectRevenue			is Boolean
			default label is "SingleProjectRevenueRecognition"

   	Context Fields
		ContextStructure			is a ProjectStructure
#ifdef module integration
		FSMInboundBODTracker
#endif

	Transient Fields
		ChangeOrderApproved         is Boolean
		
	Local Fields
		RecordCount					is Numeric size 3
		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalAccountingEntity		is like AccountingEntity
		LocalAccountingEntityGroup	is like AccountingEntityGroup
		LocalFinanceCodeBlock		is a FinanceCodeBlock
		LocalProject				is a Project
		LocalSummaryProject			is like Project
		LocalSingleProject			is like Project
		LocalProjectContract		is like ProjectContract
		LocalThroughDate			is Date
		LocalDateRange				is a DateRange
		BadDate						is Boolean
		LocalFinanceDimension2		is a FinanceDimension2
		LocalFundingSource			is like FinanceDimension2
		LocalBillingGroup			is a ProjectBillingGroup
		LocalProjectContractInvoice	is like ProjectContractInvoice
		LocalInvoiceLine			is Numeric size 8
		LocalLineNumber				is Numeric size 2
		LocalSelectionGroup			is a GLTransactionDetail group
		LocalGLTransactionDetail	is a GLTransactionDetail
		LocalProjectCodeBlock		is a ProjectCodeBlock
		LocalGeneralLedgerChartAccount is a GeneralLedgerChartAccount		
		LocalFeesCodeBlock			is a ProjectCodeBlock
		LocalBillingRateTable		is like ProjectBillingRateTable
		LocalRateTableDate			is Date
		LocalRate					is Decimal size 22.6 
		RateTableArray
		RateTableCount				is Numeric size 4
		RateTableCounter			is Numeric size 4
		LocalIndex					is Numeric size 4
		LocalCodeBlockKey			is like Project
		LocalCodeBlockString		is AlphaUpper size 125
		BillingBlockArray
		LocalZString				is AlphaUpper size 25
		TopNodeFound				is Boolean
		LocalFundingSourceDate		is Date
		LocalInvoiceDate			is Date
		LocalRunGroup				is Numeric size 8
		LocalTransactionCounter		is Numeric size 8
		LocalBaseCounter			is Numeric size 8
		LocalTaxCounter				is Numeric size 8
		LocalTaxResultCounter		is Numeric size 8	
		LocalInvoiceTransaction		is an InvoiceTransaction
		LocalOverridesExist			is Boolean
		LocalBillable				is like InternationalAmount
		LocalType     				is Numeric size 1
			States	
				Billing				value is 1
				Revenue				value is 2
		LocalEmployee				is like Employee
		LocalDate					is Date
		CompletionMessage			is Alpha size 100 	
		ActionCode					is Alpha size 1
			States
				Create  value is "C"
				Update	value is "U"
				Delete	value is "D"
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalServiceTaxCode			is AlphaUpper size 15
		LocalServiceAddressCode		is an AddressCode
		LocalProductTaxCategory		is AlphaUpper size 15
		LocalTaxableAmount			is like InternationalAmount
		LocalTaxExempt				is Boolean
		LocalToContract				is like ProjectContract
		LocalFeeCode				is a ProjectFeeCode
		LocalEffectiveDate			is Date
		LocalMarginal				is Boolean
		LocalProjectContractRetainer is like ProjectContractRetainer
		LocalRoundTo		 		is Decimal 5.4
		LocalProjectInvoiceFormat   is like ProjectInvoiceFormat
		LocalProjectInvoiceReversalFormat   is like ProjectInvoiceReversalFormat		
		LocalContractBudgetAmount is an InternationalAmount
			precision is Currency.NumberOfDecimals
		LocalProjectBudgetAmount is an InternationalAmount
			precision is Currency.NumberOfDecimals
		LocalFundingSourceBudgetAmount is an InternationalAmount
			precision is Currency.NumberOfDecimals
		LocalAddressCode			is like AddressCode
		LocalBuyerTaxCode			is AlphaUpper size 15
		LocalTaxCodeBlock			is a FinanceCodeBlock
		LocalBuyerAddressCode		is an AddressCode
		LocalProjectFundingSourceTemplate is a ProjectFundingSourceTemplate		

		LocalPulseAlertFrom			is Alpha size 100
		LocalConfigurationParameter	is Alpha size up to 200

#ifdef module ar
		CalculateTax
		TaxCounter					is Numeric size 2
		LocalCalculateTaxExecuted	is Alpha size 1
#endif		
		
#ifdef module tx
		LocalOneSourceTaxAttribute 	is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText is Text
		LocalTaxEntity				is a TaxEntity
		AttributeCounter			is Numeric 2
		LocalTaxCode				is like TaxCode
#endif		
#ifndef module tx
		LocalTaxCode				is AlphaUpper size 15
#endif		
		
#ifdef module po			
		LocalContractGroup			is like ContractGroup
		LocalContract       		is like Contract	
		LocalVendor         		is like Vendor
#endif
#ifdef module ap
		LocalDerivedFESKey 			is a FrontEndSplitKey
		LocalDistribution			is Numeric size 4
#endif		
		LocalSystem					is a GeneralLedgerSystemCode
   		LocalJournalizeGroup		is a JournalizeGroup

		LocalNativeLPLBODTrigger	is Boolean
#ifdef module integration
		NewBODTracker  				is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker	is Numeric 15
		Error            			is Boolean
	    LocalErrormessage     		is Alpha 300
#endif

	Rule Blocks
		SetLocalProjectCodeBlock
			initialize LocalProjectCodeBlock
			if (LocalOverridesExist)
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
					LocalProjectCodeBlock.GeneralLedgerChartAccount = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!ReportingChartAccountRel.ParentChartAccount.ChartType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.GeneralLedgerChartAccount = ReportingChartAccountRel.ParentChartAccount
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension1)
					LocalProjectCodeBlock.FinanceDimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension1HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension1 = FinanceDimension1HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
					LocalProjectCodeBlock.FinanceDimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension3HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension3 = FinanceDimension3HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
					LocalProjectCodeBlock.FinanceDimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension4HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension4 = FinanceDimension4HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension5)
					LocalProjectCodeBlock.FinanceDimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension5HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension5 = FinanceDimension5HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension6)
					LocalProjectCodeBlock.FinanceDimension6 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension6HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension6 = FinanceDimension6HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension7)
					LocalProjectCodeBlock.FinanceDimension7 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension7HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension7 = FinanceDimension7HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension8)
					LocalProjectCodeBlock.FinanceDimension8 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension8HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension8 = FinanceDimension8HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension9)
					LocalProjectCodeBlock.FinanceDimension9 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension9HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension9 = FinanceDimension9HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension10)
					LocalProjectCodeBlock.FinanceDimension10 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension10HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension10 = FinanceDimension10HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true

		SetLocalFeesCodeBlock
			initialize LocalFeesCodeBlock
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
				LocalFeesCodeBlock.GeneralLedgerChartAccount = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension1)
				LocalFeesCodeBlock.FinanceDimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
				LocalFeesCodeBlock.FinanceDimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
				LocalFeesCodeBlock.FinanceDimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension5)
				LocalFeesCodeBlock.FinanceDimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension6)
				LocalFeesCodeBlock.FinanceDimension6 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension7)
				LocalFeesCodeBlock.FinanceDimension7 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension8)
				LocalFeesCodeBlock.FinanceDimension8 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension9)
				LocalFeesCodeBlock.FinanceDimension9 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			else
			if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension10)
				LocalFeesCodeBlock.FinanceDimension10 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10

		CreateCodeBlockString
			initialize LocalIndex
			initialize RateTableCounter
			while (RateTableCounter < RateTableCount)
				RateTableCounter += 1
				if (RateTableArray.RateTable[RateTableCounter].TableCode = LocalBillingRateTable
				and RateTableArray.RateTable[RateTableCounter].EffectiveDate <= LocalDate)
					LocalIndex = RateTableCounter
					LocalRateTableDate = RateTableArray.RateTable[LocalIndex].EffectiveDate
			if (LocalIndex not entered)
				for each ProjectBillingRateTableRel
					if (RateTableCount < 9999)
						RateTableCount += 1
						RateTableArray.RateTable[RateTableCount].TableCode = each.ProjectBillingRateTable
						RateTableArray.RateTable[RateTableCount].EffectiveDate = each.EffectiveDate
						RateTableArray.RateTable[RateTableCount].AccountingEntityOrder = each.AccountingEntityOrder
						RateTableArray.RateTable[RateTableCount].AccountingUnitOrder = each.AccountingUnitOrder
						RateTableArray.RateTable[RateTableCount].AccountOrder = each.AccountOrder
						RateTableArray.RateTable[RateTableCount].ProjectOrder = each.ProjectOrder
						RateTableArray.RateTable[RateTableCount].Dimension1Order = each.Dimension1Order
						RateTableArray.RateTable[RateTableCount].Dimension2Order = each.Dimension2Order
						RateTableArray.RateTable[RateTableCount].Dimension3Order = each.Dimension3Order
						RateTableArray.RateTable[RateTableCount].Dimension4Order = each.Dimension4Order
						RateTableArray.RateTable[RateTableCount].Dimension5Order = each.Dimension5Order
						RateTableArray.RateTable[RateTableCount].Dimension6Order = each.Dimension6Order
						RateTableArray.RateTable[RateTableCount].Dimension7Order = each.Dimension7Order
						RateTableArray.RateTable[RateTableCount].Dimension8Order = each.Dimension8Order
						RateTableArray.RateTable[RateTableCount].Dimension9Order = each.Dimension9Order
						RateTableArray.RateTable[RateTableCount].Dimension10Order = each.Dimension10Order
						RateTableArray.RateTable[RateTableCount].EmployeeOrder = each.EmployeeOrder
				initialize RateTableCounter
				while (RateTableCounter < RateTableCount)
					RateTableCounter += 1
					if (RateTableArray.RateTable[RateTableCounter].TableCode = LocalBillingRateTable
					and RateTableArray.RateTable[RateTableCounter].EffectiveDate <= LocalDate)
						LocalIndex = RateTableCounter
						LocalRateTableDate = RateTableArray.RateTable[LocalIndex].EffectiveDate
			initialize BillingBlockArray
			LocalZString = "ZZZZZZZZZZZZZZZZZZZZZZZZZ"
			if (RateTableArray.RateTable[LocalIndex].AccountingEntityOrder.1
			and LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
			if (RateTableArray.RateTable[LocalIndex].AccountingUnitOrder.1
			and LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
			if (RateTableArray.RateTable[LocalIndex].AccountOrder.1
			and LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			if (RateTableArray.RateTable[LocalIndex].ProjectOrder.1
			and LocalGLTransactionDetail.FinanceCodeBlock.Project entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.Project
			if (RateTableArray.RateTable[LocalIndex].Dimension1Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			if (RateTableArray.RateTable[LocalIndex].Dimension2Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
			if (RateTableArray.RateTable[LocalIndex].Dimension3Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			if (RateTableArray.RateTable[LocalIndex].Dimension4Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			if (RateTableArray.RateTable[LocalIndex].Dimension5Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			if (RateTableArray.RateTable[LocalIndex].Dimension6Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			if (RateTableArray.RateTable[LocalIndex].Dimension7Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			if (RateTableArray.RateTable[LocalIndex].Dimension8Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			if (RateTableArray.RateTable[LocalIndex].Dimension9Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			if (RateTableArray.RateTable[LocalIndex].Dimension10Order.1
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10 entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
			if (RateTableArray.RateTable[LocalIndex].EmployeeOrder.1
			and LocalGLTransactionDetail.Resource entered)
				BillingBlockArray.Dimension1 = LocalGLTransactionDetail.Resource

			if (RateTableArray.RateTable[LocalIndex].AccountingEntityOrder.2
			and LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
			if (RateTableArray.RateTable[LocalIndex].AccountingUnitOrder.2
			and LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
			if (RateTableArray.RateTable[LocalIndex].AccountOrder.2
			and LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			if (RateTableArray.RateTable[LocalIndex].ProjectOrder.2
			and LocalGLTransactionDetail.FinanceCodeBlock.Project entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.Project
			if (RateTableArray.RateTable[LocalIndex].Dimension1Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			if (RateTableArray.RateTable[LocalIndex].Dimension2Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
			if (RateTableArray.RateTable[LocalIndex].Dimension3Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			if (RateTableArray.RateTable[LocalIndex].Dimension4Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			if (RateTableArray.RateTable[LocalIndex].Dimension5Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			if (RateTableArray.RateTable[LocalIndex].Dimension6Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			if (RateTableArray.RateTable[LocalIndex].Dimension7Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			if (RateTableArray.RateTable[LocalIndex].Dimension8Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			if (RateTableArray.RateTable[LocalIndex].Dimension9Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			if (RateTableArray.RateTable[LocalIndex].Dimension10Order.2
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10 entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10					
			if (RateTableArray.RateTable[LocalIndex].EmployeeOrder.2
			and LocalGLTransactionDetail.Resource entered)
				BillingBlockArray.Dimension2 = LocalGLTransactionDetail.Resource

			if (RateTableArray.RateTable[LocalIndex].AccountingEntityOrder.3
			and LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
			if (RateTableArray.RateTable[LocalIndex].AccountingUnitOrder.3
			and LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
			if (RateTableArray.RateTable[LocalIndex].AccountOrder.3
			and LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			if (RateTableArray.RateTable[LocalIndex].ProjectOrder.3
			and LocalGLTransactionDetail.FinanceCodeBlock.Project entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.Project
			if (RateTableArray.RateTable[LocalIndex].Dimension1Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			if (RateTableArray.RateTable[LocalIndex].Dimension2Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
			if (RateTableArray.RateTable[LocalIndex].Dimension3Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			if (RateTableArray.RateTable[LocalIndex].Dimension4Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			if (RateTableArray.RateTable[LocalIndex].Dimension5Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			if (RateTableArray.RateTable[LocalIndex].Dimension6Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			if (RateTableArray.RateTable[LocalIndex].Dimension7Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			if (RateTableArray.RateTable[LocalIndex].Dimension8Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			if (RateTableArray.RateTable[LocalIndex].Dimension9Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			if (RateTableArray.RateTable[LocalIndex].Dimension10Order.3
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10 entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
			if (RateTableArray.RateTable[LocalIndex].EmployeeOrder.3
			and LocalGLTransactionDetail.Resource entered)
				BillingBlockArray.Dimension3 = LocalGLTransactionDetail.Resource

			if (RateTableArray.RateTable[LocalIndex].AccountingEntityOrder.4
			and LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
			if (RateTableArray.RateTable[LocalIndex].AccountingUnitOrder.4
			and LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
			if (RateTableArray.RateTable[LocalIndex].AccountOrder.4
			and LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			if (RateTableArray.RateTable[LocalIndex].ProjectOrder.4
			and LocalGLTransactionDetail.FinanceCodeBlock.Project entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.Project
			if (RateTableArray.RateTable[LocalIndex].Dimension1Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			if (RateTableArray.RateTable[LocalIndex].Dimension2Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
			if (RateTableArray.RateTable[LocalIndex].Dimension3Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			if (RateTableArray.RateTable[LocalIndex].Dimension4Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			if (RateTableArray.RateTable[LocalIndex].Dimension5Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			if (RateTableArray.RateTable[LocalIndex].Dimension6Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			if (RateTableArray.RateTable[LocalIndex].Dimension7Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			if (RateTableArray.RateTable[LocalIndex].Dimension8Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			if (RateTableArray.RateTable[LocalIndex].Dimension9Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			if (RateTableArray.RateTable[LocalIndex].Dimension10Order.4
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10 entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
			if (RateTableArray.RateTable[LocalIndex].EmployeeOrder.4
			and LocalGLTransactionDetail.Resource entered)
				BillingBlockArray.Dimension4 = LocalGLTransactionDetail.Resource

			if (RateTableArray.RateTable[LocalIndex].AccountingEntityOrder.5
			and LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
			if (RateTableArray.RateTable[LocalIndex].AccountingUnitOrder.5
			and LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
			if (RateTableArray.RateTable[LocalIndex].AccountOrder.5
			and LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
			if (RateTableArray.RateTable[LocalIndex].ProjectOrder.5
			and LocalGLTransactionDetail.FinanceCodeBlock.Project entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.Project
			if (RateTableArray.RateTable[LocalIndex].Dimension1Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
			if (RateTableArray.RateTable[LocalIndex].Dimension2Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
			if (RateTableArray.RateTable[LocalIndex].Dimension3Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
			if (RateTableArray.RateTable[LocalIndex].Dimension4Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
			if (RateTableArray.RateTable[LocalIndex].Dimension5Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
			if (RateTableArray.RateTable[LocalIndex].Dimension6Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
			if (RateTableArray.RateTable[LocalIndex].Dimension7Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
			if (RateTableArray.RateTable[LocalIndex].Dimension8Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
			if (RateTableArray.RateTable[LocalIndex].Dimension9Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
			if (RateTableArray.RateTable[LocalIndex].Dimension10Order.5
			and LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10 entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
			if (RateTableArray.RateTable[LocalIndex].EmployeeOrder.5
			and LocalGLTransactionDetail.Resource entered)
				BillingBlockArray.Dimension5 = LocalGLTransactionDetail.Resource

			if (BillingBlockArray.Dimension1 not entered)
				BillingBlockArray.Dimension1 = LocalZString
			if (BillingBlockArray.Dimension2 not entered)
				BillingBlockArray.Dimension2 = LocalZString
			if (BillingBlockArray.Dimension3 not entered)
				BillingBlockArray.Dimension3 = LocalZString
			if (BillingBlockArray.Dimension4 not entered)
				BillingBlockArray.Dimension4 = LocalZString
			if (BillingBlockArray.Dimension5 not entered)
				BillingBlockArray.Dimension5 = LocalZString

			LocalCodeBlockString = BillingBlockArray
			LocalCodeBlockKey = BillingBlockArray.Dimension1

		BadDateEdit
			BadDate = false
			LocalFinanceDimension2		= each.FinanceDimension2
			LocalProjectContractInvoice = each.ProjectContractInvoice
			for each distinct FEGAndProject in ProjectContractInvoiceLineRel
				LocalDateRange.Begin = each.Project.ProjectDateRange.BeginDate
				LocalDateRange.End   = each.Project.ProjectDateRange.EndDate
				if (PostingDate not within LocalDateRange)
					BadDate = true
					if (each.Project.ProjectPeriodOfPerformancePSRel exists)
						LocalDateRange.Begin = each.Project.ProjectPeriodOfPerformancePSRel.ProjectBeginDate
						LocalDateRange.End   = each.Project.ProjectPeriodOfPerformancePSRel.ProjectEndDate
						if (PostingDate within LocalDateRange)
							BadDate = false
						else
							BadDate = true
				if (BadDate)
					LocalProject = each.Project
					end for each
			constraint (!BadDate)
				"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"

		BadDateEdit2
			BadDate = false
			LocalFinanceDimension2		= each.FinanceDimension2
			LocalProjectContractInvoice = each.ProjectContractInvoice
			for each distinct FEGAndProject in ProjectContractInvoiceLineRel
				LocalDateRange.Begin = each.Project.ProjectDateRange.BeginDate
				LocalDateRange.End   = each.Project.ProjectDateRange.EndDate
				if (PostingDate not within LocalDateRange)
					BadDate = true
					if (each.Project.ProjectPeriodOfPerformancePSRel exists)
						LocalDateRange.Begin = each.Project.ProjectPeriodOfPerformancePSRel.ProjectBeginDate
						LocalDateRange.End   = each.Project.ProjectPeriodOfPerformancePSRel.ProjectEndDate
						if (PostingDate within LocalDateRange)
							BadDate = false
						else
							BadDate = true
				if (BadDate)
					LocalProject = each.Project
					ErrorFound = true
					LocalDate = PostingDate
					LocalErrorMessage = PostingDateErrorMF
					end for each

		CreateInvoice
			if (FundingSourceTable.FundingSource[SourceCounter].Invoice not entered)
				LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
				invoke Create ProjectContractInvoice
					assign result to NewProjectContractInvoice
					fill in fields from ProjectFundingSourceRel
					invoked.InvoiceDate		= InvoiceDate
					if (AppendToRunGroup entered)
						invoked.RunGroup	= AppendToRunGroup
					else
						invoked.RunGroup	= LastRunGroup
					invoked.InvoiceType		= 0
					invoked.Status			= 2
					invoked.CFDANumber		= ProjectFundingSourceRel.FinanceDimension2.CFDANumber
					invoked.BillingGroup	= BillingGroup
					if (ProjectFundingSourceRel.ProjectJurisdictionCode entered)
						invoked.ProjectJurisdictionCode = ProjectFundingSourceRel.ProjectJurisdictionCode
					else
						invoked.ProjectJurisdictionCode = ProjectFundingSourceRel.FinanceDimension2.ProjectJurisdictionCode
					if (IsThirdPartyInvoicePrint)	
						if (ProjectFundingSourceRel.FinanceDimension2.FundingType.ExternalGrant
						or  ProjectFundingSourceRel.FinanceDimension2.FundingType.ExternalCustomer)	
							invoked.PrintStatus = PrintStatus		
				FundingSourceTable.FundingSource[SourceCounter].Invoice = NewProjectContractInvoice.ProjectContractInvoice

		CreateRevenue
			if (FundingSourceTable.FundingSource[SourceCounter].Invoice not entered)
				LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
				invoke Create ProjectContractInvoice
					assign result to NewProjectContractInvoice
					fill in fields from ProjectFundingSourceRel
					invoked.InvoiceDate	 = RevenueDate
					invoked.RunGroup	 = LastRunGroup
					invoked.InvoiceType  = 1
					invoked.Status		 = 2
					invoked.BillingGroup = BillingGroup
				FundingSourceTable.FundingSource[SourceCounter].Invoice = NewProjectContractInvoice.ProjectContractInvoice

		LoadExpenseTransaction
			if ((LocalAmount != 0
			or   LocalUnits != 0)
			and  ProjectFundingSourceRel.ExpenseGroup entered)
				if ((ProjectFundingSourceRel.ExpenseGroupOption.Include
				and  LocalGLTransactionDetail not within ProjectFundingSourceRel.ExpenseGroup)
				or  (ProjectFundingSourceRel.ExpenseGroupOption.Exclude
				and  LocalGLTransactionDetail within ProjectFundingSourceRel.ExpenseGroup))
					LocalAmount = 0
					LocalUnits = 0
			if ((LocalAmount != 0
			or   LocalUnits != 0)
			and  ProjectFundingSourceRel.SelectedProjectsOnly)
				if (FundingSourceSelectedProjectRel not exists)
					LocalAmount = 0
					LocalUnits = 0
			if (LocalInvoiceTransaction.FeeCode not entered)
				if (LocalAmount entered
				or (LocalUnits entered
				and LocalInvoiceTransaction.UnitsOnly))
					FundingSourceTable.FundingSource[SourceCounter].FeesAllowed = true
			else
			if  (LocalAmount != 0
			and !Forecast)
				LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
				LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
				if  (ProjectContractBaseInvoiceLineRel not exists
				and !each.BaseTransactionRel.InvoiceTransaction.UnitsOnly)
					LocalAmount = 0				

		LimitCheck
			if (CheckLimits
			and LocalInvoiceTransaction.BillingMethod != 7)
				initialize SourceCounter
				while (SourceCounter < FundingSourceCount)
					SourceCounter += 1
					initialize LocalAmount
					if (FrontEndSplitsEnabled)
						if (LocalInvoiceTransaction.GLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source)
							LocalAmount = LocalInvoiceTransaction.Amount
						else
							initialize LocalAmount
					else
						LocalAmount = LocalInvoiceTransaction.Amount * FundingSourceTable.FundingSource[SourceCounter].Percent
					round LocalAmount to nearest LocalRoundTo
					LocalRemainder = LocalInvoiceTransaction.Amount - LocalInvoiceTransaction.BilledAmount
					LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].Maximum - FundingSourceTable.FundingSource[SourceCounter].BilledAmount - FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
					if (LocalAmount > LocalRemainder)
						LocalAmount = LocalRemainder
					if (LocalInvoiceTransaction.FeeCode entered
					and LocalAmount > LocalFeesMaximum - LocalBilledFees
					and MaximumFees entered)
						CanBeBilled = false
					if (LocalAmount > LocalMaximum
					or  LocalAmount > LocalContractMaximum - LocalBilledAmount)
						CanBeBilled = false

		CalculatePositiveAmount
			FeeMaxed = false
			if (FrontEndSplitsEnabled)
				if (LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
					LocalAmount = LocalInvoiceTransaction.Amount
					InvoiceBillableAmount = LocalInvoiceTransaction.BillableAmount
					LocalUnits = LocalInvoiceTransaction.UnitsAmount
				else
					initialize LocalAmount
					initialize InvoiceBillableAmount
					initialize LocalUnits
			else
			if (FundingSourceTable.FundingSource[SourceCounter].FundingGroup != LocalFundingGroup)
				LocalFundingGroup = FundingSourceTable.FundingSource[SourceCounter].FundingGroup
				LocalInvoiceTransaction.NewAmount = LocalInvoiceTransaction.Amount - LocalInvoiceTransaction.BilledAmount
				LocalAmount = LocalInvoiceTransaction.NewAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
				LocalInvoiceTransaction.NewBillableAmount = LocalInvoiceTransaction.BillableAmount - LocalInvoiceTransaction.BilledBillableAmount
				InvoiceBillableAmount = LocalInvoiceTransaction.NewBillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			else
			if (LocalInvoiceTransaction.NewAmount entered)
				LocalAmount = LocalInvoiceTransaction.NewAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
				InvoiceBillableAmount = LocalInvoiceTransaction.NewBillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			else
				LocalAmount = LocalInvoiceTransaction.Amount * FundingSourceTable.FundingSource[SourceCounter].Percent
				InvoiceBillableAmount = LocalInvoiceTransaction.BillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			round LocalAmount to nearest LocalRoundTo
			round InvoiceBillableAmount to nearest LocalRoundTo
			LocalFeeCode = LocalInvoiceTransaction.FeeCode
			if (!FrontEndSplitsEnabled)
				LocalUnits = LocalInvoiceTransaction.UnitsAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			LocalRemainder = LocalInvoiceTransaction.Amount - LocalInvoiceTransaction.BilledAmount
			LocalRemainderUnits = LocalInvoiceTransaction.UnitsAmount - LocalInvoiceTransaction.BilledUnits
			LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].Maximum - FundingSourceTable.FundingSource[SourceCounter].BilledAmount
			if (LocalMaximum > LocalUnavailableRetainer)
				LocalMaximum -= LocalUnavailableRetainer
			else
				LocalMaximum = 0
			if (LocalAmount > LocalRemainder)
				if (LocalInvoiceTransaction.Amount = LocalInvoiceTransaction.BillableAmount)
					InvoiceBillableAmount = LocalRemainder
				else
					if (LocalAmount != 0)
						InvoiceBillableAmount *= (LocalRemainder / LocalAmount)
						round InvoiceBillableAmount to nearest LocalRoundTo
				LocalAmount = LocalRemainder
				round LocalAmount to nearest LocalRoundTo
			LocalUnlimitedAmount = LocalAmount
			if (LocalUnits > LocalRemainderUnits)
				LocalUnits = LocalRemainderUnits
			if (LocalInvoiceTransaction.BillingMethod != 7)
				if (LocalInvoiceTransaction.FeeCode entered
				and LocalAmount > LocalFeesMaximum - LocalBilledFees
				and MaximumFees entered)
					LocalAmount = LocalFeesMaximum - LocalBilledFees
					round LocalAmount to nearest LocalRoundTo
				if (LocalProject.BillingMaximum entered)
					if (LocalType.Billing)
						LocalProjectMaximum = LocalProject.RemainingBillable
					else
						LocalProjectMaximum = LocalProject.RemainingRevenue
					if (LocalAmount > LocalProjectMaximum)
						LocalAmount = LocalProjectMaximum
						round LocalAmount to nearest LocalRoundTo
						if (LocalInvoiceTransaction.FeeCode entered)
							FeeMaxed = true
				if (LocalAmount > LocalContractMaximum - LocalBilledAmount 
				and LocalContractMaximum - LocalBilledAmount >= 0)  
					LocalAmount = LocalContractMaximum - LocalBilledAmount 
					round LocalAmount to nearest LocalRoundTo
				if (LocalAmount > LocalMaximum)
					LocalAmount = LocalMaximum
					round LocalAmount to nearest LocalRoundTo
					if (LocalInvoiceTransaction.FeeCode entered)
						FeeMaxed = true
				if (LocalAmount != LocalUnlimitedAmount)
					InvoiceBillableAmount *= (LocalAmount / LocalUnlimitedAmount)
					round InvoiceBillableAmount to nearest LocalRoundTo
					LocalInvoiceTransaction.Limited = true

		CalculateNegativeAmount
			if (FrontEndSplitsEnabled)
				if (LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
					LocalAmount = LocalInvoiceTransaction.Amount
					InvoiceBillableAmount = LocalInvoiceTransaction.BillableAmount
					LocalUnits = LocalInvoiceTransaction.UnitsAmount
				else
					initialize LocalAmount
					initialize InvoiceBillableAmount
					initialize LocalUnits
			else
			if (FundingSourceTable.FundingSource[SourceCounter].FundingGroup != LocalFundingGroup)
				LocalFundingGroup = FundingSourceTable.FundingSource[SourceCounter].FundingGroup
				LocalInvoiceTransaction.NewAmount = LocalInvoiceTransaction.Amount - LocalInvoiceTransaction.BilledAmount
				LocalAmount = LocalInvoiceTransaction.NewAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
				LocalInvoiceTransaction.NewBillableAmount = LocalInvoiceTransaction.BillableAmount - LocalInvoiceTransaction.BilledBillableAmount
				InvoiceBillableAmount = LocalInvoiceTransaction.NewBillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			else
			if (LocalInvoiceTransaction.NewAmount entered)
				LocalAmount = LocalInvoiceTransaction.NewAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
				InvoiceBillableAmount = LocalInvoiceTransaction.NewBillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			else
				LocalAmount = LocalInvoiceTransaction.Amount * FundingSourceTable.FundingSource[SourceCounter].Percent
				InvoiceBillableAmount = LocalInvoiceTransaction.BillableAmount * FundingSourceTable.FundingSource[SourceCounter].Percent
			round LocalAmount to nearest LocalRoundTo			
			round InvoiceBillableAmount to nearest LocalRoundTo
			if (!FrontEndSplitsEnabled)
				LocalUnits = LocalInvoiceTransaction.UnitsAmount * FundingSourceTable.FundingSource[SourceCounter].Percent								
			LocalRemainder = LocalInvoiceTransaction.Amount - LocalInvoiceTransaction.BilledAmount
			LocalRemainderUnits = LocalInvoiceTransaction.UnitsAmount - LocalInvoiceTransaction.BilledUnits								
			if (LocalAmount < LocalRemainder)
				if (LocalInvoiceTransaction.Amount = LocalInvoiceTransaction.BillableAmount)
					InvoiceBillableAmount = LocalRemainder
				else
					if (LocalAmount != 0)
						InvoiceBillableAmount *= (LocalRemainder / LocalAmount)
						round InvoiceBillableAmount to nearest LocalRoundTo
				LocalAmount = LocalRemainder
				round LocalAmount to nearest LocalRoundTo
			if (LocalUnits < LocalRemainderUnits)
				LocalUnits = LocalRemainderUnits

		GenerateRevenueLine
			if (LocalAmount != 0)
				if (!LocalInvoiceTransaction.Counted
				and LocalAmount >= 0)
					LocalBillableAmount += LocalInvoiceTransaction.BillableAmount														
					LocalInvoiceTransaction.Counted = true
				LocalInvoiceTransaction.BilledAmount += LocalAmount
				LocalInvoiceTransaction.BilledBillableAmount += InvoiceBillableAmount
				LocalInvoiceTransaction.BilledUnits += LocalUnits
				FundingSourceTable.FundingSource[SourceCounter].Billed = true
				if (LocalInvoiceTransaction.FeeCode entered)
					LocalBilledFees 	+= LocalAmount
				if (LocalInvoiceTransaction.BillingMethod = 7)
					LocalPassThrough	+= LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].PassThroughAmount += LocalAmount
				else
					LocalBilledAmount += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].BilledAmount += LocalAmount					
				FundingSourceTable.FundingSource[SourceCounter].TotalRecognizedAmount += LocalAmount
				CreateCount += 1
				if (RecordCount = 50)
					commit transaction
					initialize RecordCount
				RecordCount += 1
				FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits += LocalUnits
				if (LocalInvoiceTransaction.FeeCode entered)
					FundingSourceTable.FundingSource[SourceCounter].InvoiceFees += LocalAmount
				if (LocalInvoiceTransaction.BillingMethod = 7)
					FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough += LocalAmount
				if (!Forecast)
					include CreateRevenue
					invoke Create ProjectContractInvoiceLine
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.ProjectContract 		= ProjectContract
						invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
						invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						invoked.GLTransactionDetail		= LocalInvoiceTransaction.GLTransactionDetail
						invoked.Amount					= LocalAmount
						invoked.UnitsAmount				= LocalUnits
						invoked.Project					= LocalProject									
						invoked.BillableAmount			= InvoiceBillableAmount
						invoked.BillableRate			= LocalInvoiceTransaction.BillableRate
						invoked.FeeCode					= LocalInvoiceTransaction.FeeCode																				
						invoked.BillingMethod			= LocalInvoiceTransaction.BillingMethod
						invoked.FeeMaxed				= FeeMaxed
						invoked.FromPartial				= LocalInvoiceTransaction.FromPartial
		
		BuildFeesTable
			initialize FeeCounter
			initialize FeeTable
			for each ProjectContractFeeRel
				FeeCounter += 1
				FeeTable.Fee[FeeCounter].FeeCode  	= each.ProjectFeeCode
				FeeTable.Fee[FeeCounter].Date		= each.EffectiveDate
				FeeTable.Fee[FeeCounter].Rate		= each.Rate
				FeeTable.Fee[FeeCounter].Percent	= each.Percent
				FeeTable.Fee[FeeCounter].Marginal	= each.Marginal
				FeeTable.Fee[FeeCounter].Tiered		= each.Tiered
				FeeTable.Fee[FeeCounter].TaxExempt	= each.TaxExempt
				FeeTable.Fee[FeeCounter].Basis		= each.Basis
			FeeCount = FeeCounter	

		LoadInvoiceTransaction
			TransCounter += 1
			LocalBaseCounter = TransCounter
			initialize LocalInvoiceTransaction
			LocalInvoiceTransaction.GLTransactionDetail = LocalGLTransactionDetail.GLTransactionDetail
			LocalInvoiceTransaction.BillableAmount		= LocalGLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			LocalInvoiceTransaction.UnitsAmount			= LocalGLTransactionDetail.UnitsAmount														
			LocalInvoiceTransaction.BillingMethod		= DerivedBillingMethod
			LocalInvoiceTransaction.TransactionDate		= LocalGLTransactionDetail.TransactionDate			
			LocalInvoiceTransaction.OverridesExist		= LocalOverridesExist
			initialize LocalAmount
			if (TimeAndMaterialsBilling)
				if (LocalGLTransactionDetail.UnitsAmount entered
				and LocalGLTransactionDetail.Resource entered)
					LocalEmployee	= LocalGLTransactionDetail.Resource
					LocalDate		= LocalGLTransactionDetail.TransactionDate
					if (first ProjectAssignmentRel.BillableRate entered)
						LocalAmount = LocalGLTransactionDetail.UnitsAmount * first ProjectAssignmentRel.BillableRate * BillingMultiplier
						LocalInvoiceTransaction.BillableRate = first ProjectAssignmentRel.BillableRate
				else
					LocalAmount = LocalGLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * BillingMultiplier
			else
			if (DerivedBillingRateTable entered)
				if (LocalGLTransactionDetail.UnitsAmount entered)
					LocalDate = LocalGLTransactionDetail.TransactionDate
					LocalBillingRateTable = DerivedBillingRateTable
					include CreateCodeBlockString
					LocalRate = DerivedBillingRate
					LocalAmount = LocalGLTransactionDetail.UnitsAmount * LocalRate * BillingMultiplier
					LocalInvoiceTransaction.BillableRate = LocalRate
				else
					LocalAmount = LocalGLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * BillingMultiplier
			else
				LocalAmount = LocalGLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * BillingMultiplier
			round LocalAmount to nearest LocalRoundTo
			LocalAmount -= PartialBilledAmount
			LocalInvoiceTransaction.BillableAmount -= PartialBilledBillableAmount
			LocalInvoiceTransaction.UnitsAmount -= PartialBilledUnits
			LocalInvoiceTransaction.Amount = LocalAmount
			if (LocalAmount entered)
				TransactionsFound = true
			if (PartialBilledAmount entered)
				LocalInvoiceTransaction.FromPartial = true
			if (LocalInvoiceTransaction.Amount not entered
			and LocalInvoiceTransaction.UnitsAmount entered)
				LocalInvoiceTransaction.UnitsOnly = true
			if (LocalInvoiceTransaction.Amount >= 0)
				LocalInvoiceTransaction.Positive = true
			LocalTransactionCounter = TransCounter
			if (RecordCount = 50)
				commit transaction
				initialize RecordCount
			RecordCount += 1
			invoke Create ProjectInvoiceTransactionOTORel
				invoked.InvoiceTransaction	= LocalInvoiceTransaction
			if (FeeCount > 0
			and !LocalProject.FeesExempt
			and LocalInvoiceTransaction.BillingMethod != 7)
				initialize LocalFeeCode
				initialize FeeCounter
				LocalUnits = LocalGLTransactionDetail.UnitsAmount
				LocalBillable = LocalInvoiceTransaction.Amount
				LocalTransAmount = LocalGLTransactionDetail.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
				if (LocalUnits < 0)
					AbsoluteUnits = LocalUnits * -1
				else
					AbsoluteUnits = LocalUnits
				while (FeeCounter < FeeCount)
					FeeCounter += 1
					if (FeeTable.Fee[FeeCounter].FeeCode != LocalFeeCode
					and FeeTable.Fee[FeeCounter].Date	 <= LocalGLTransactionDetail.TransactionDate)
						LocalFeeCode	= FeeTable.Fee[FeeCounter].FeeCode
						include SetLocalFeesCodeBlock
						if ((LocalFeeCode.BillingDimension entered
						and  LocalFeesCodeBlock = LocalFeeCode.BillingDimension)
						or  (LocalFeeCode.BillingGroup entered
						and  LocalGLTransactionDetail within LocalFeeCode.BillingGroup))
							if (!FeeTable.Fee[FeeCounter].Tiered
							or  AbsoluteUnits entered)
								TransCounter += 1
								initialize LocalInvoiceTransaction
								LocalInvoiceTransaction.GLTransactionDetail = LocalGLTransactionDetail
								LocalInvoiceTransaction.TransactionDate	 	= LocalGLTransactionDetail.TransactionDate			
								LocalInvoiceTransaction.OverridesExist		= LocalOverridesExist
								LocalEffectiveDate	= FeeTable.Fee[FeeCounter].Date
								LocalMarginal		= FeeTable.Fee[FeeCounter].Marginal
								initialize FeeAmount
								if (FeeTable.Fee[FeeCounter].Tiered)
									for each ProjectContractFeeTierRel
										if (LocalMarginal)
											if (AbsoluteUnits > each.TierBegin)
												if (AbsoluteUnits <= each.TierEnd)
													if (each.Rate entered)
														FeeAmount	+= ((AbsoluteUnits - each.TierBegin) * each.Rate)
													else
														FeeAmount	+= each.Amount
												else
													if (each.Rate entered)
														FeeAmount	+= ((each.TierEnd - each.TierBegin) * each.Rate)
													else
														FeeAmount	+= each.Amount
										else
											if (AbsoluteUnits > each.TierBegin
											and AbsoluteUnits <= each.TierEnd)
												if (each.Rate entered)
													FeeAmount	= AbsoluteUnits * each.Rate
												else
													FeeAmount	= each.Amount
									if (LocalUnits < 0)
										FeeAmount *= -1
								else
									if (FeeTable.Fee[FeeCounter].Rate entered)
										FeeAmount = LocalUnits * FeeTable.Fee[FeeCounter].Rate
									else
										if (FeeTable.Fee[FeeCounter].Basis = 1)
											FeeAmount = LocalAmount * FeeTable.Fee[FeeCounter].Percent
										else
											FeeAmount = LocalTransAmount * FeeTable.Fee[FeeCounter].Percent
								round FeeAmount to nearest LocalRoundTo
								if (FeeAmount entered)
									TransactionsFound = true
								if (PartialBilledAmount entered
								and FeeTable.Fee[FeeCounter].Basis != 1)
									LocalFeeCode = FeeTable.Fee[FeeCounter].FeeCode
									if (LocalType.Billing)
										FeeAmount -= PartialBilledFees
									else
										FeeAmount -= PartialRecognizedFees
								LocalUnits -= PartialBilledUnits
								LocalInvoiceTransaction.Amount			= FeeAmount
								if (FeeAmount >= 0)
									LocalInvoiceTransaction.Positive	= true
								LocalInvoiceTransaction.BillableAmount	= FeeAmount
								LocalInvoiceTransaction.UnitsAmount		= LocalUnits
								LocalInvoiceTransaction.FeeCode			= FeeTable.Fee[FeeCounter].FeeCode
								LocalInvoiceTransaction.TaxExempt		= FeeTable.Fee[FeeCounter].TaxExempt
								LocalInvoiceTransaction.BaseCounter		= LocalBaseCounter
								LocalTransactionCounter = TransCounter
								invoke Create ProjectInvoiceTransactionOTORel
									invoked.InvoiceTransaction	= LocalInvoiceTransaction

		GenerateInvoiceLine
			if (LocalAmount != 0)
				if (!LocalInvoiceTransaction.Counted
				and LocalAmount > 0)
					LocalBillableAmount += LocalInvoiceTransaction.BillableAmount														
					LocalInvoiceTransaction.Counted = true
				LocalInvoiceTransaction.BilledAmount += LocalAmount
				LocalInvoiceTransaction.BilledBillableAmount += InvoiceBillableAmount
				LocalInvoiceTransaction.BilledUnits += LocalUnits
				FundingSourceTable.FundingSource[SourceCounter].Billed = true
				if (LocalInvoiceTransaction.FeeCode entered)
					LocalBilledFees += LocalAmount
				if (LocalInvoiceTransaction.BillingMethod = 7)
					LocalPassThrough += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].PassThroughAmount += LocalAmount
				else
					LocalBilledAmount += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].BilledAmount += LocalAmount					
				CreateCount += 1
				LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
				initialize LocalRetainedAmount
#ifndef property federal
				if (ProjectFundingSourceRel.RetainagePercent entered
				and LocalInvoiceTransaction.BillingMethod != 7)
					if ((ProjectFundingSourceRel.RetainageGroupOption.Include
					and  LocalGLTransactionDetail within ProjectFundingSourceRel.RetainageExpenseGroup)
					or  (ProjectFundingSourceRel.RetainageGroupOption.Exclude
					and  LocalGLTransactionDetail not within ProjectFundingSourceRel.RetainageExpenseGroup)
					or   ProjectFundingSourceRel.RetainageGroupOption not entered)
						LocalRetainedAmount = LocalAmount * ProjectFundingSourceRel.RetainagePercent
						round LocalRetainedAmount to nearest LocalRoundTo
						if (ProjectFundingSourceRel.RetainageMaximum entered)
							LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].RetainageMaximum - FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
							if (LocalRetainedAmount > LocalMaximum)
								LocalRetainedAmount = LocalMaximum
#endif
				FundingSourceTable.FundingSource[SourceCounter].RetainedAmount += LocalRetainedAmount
				initialize LocalTaxAmount
				initialize LocalTaxRate 									
#ifdef module ar
				initialize LocalAddressCode
				initialize LocalBuyerTaxCode
				initialize LocalBuyerAddressCode
				initialize LocalServiceTaxCode
				initialize LocalServiceAddressCode
				initialize LocalProductTaxCategory
				LocalTaxExempt = IsTaxExempt
				if (LocalInvoiceTransaction.FeeCode entered)
					LocalTaxExempt = LocalInvoiceTransaction.TaxExempt
				if (!LocalTaxExempt
				and (FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode entered
				or   DerivedBuyerTaxCode entered)
				and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.InternalFund
				and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.IntercompanyBilling
				and !Forecast)
					initialize CalculateTax

					LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					if (LocalTaxEntity.ThirdParty.Sabrix)					
						LocalGeneralLedgerChartAccount  		= LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
						LocalOneSourceTaxAttributeText  		= LocalOneSourceTaxAttribute
						CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
						CalculateTax.InvoiceDate				= InvoiceDate


						CalculateTax.Invoice		      		= "Calculate"
						CalculateTax.Customer					= ProjectFundingSourceRel.CompanyCustomerGroup.Customer
						CalculateTax.VendorCustomerName 		= ProjectFundingSourceRel.CompanyCustomerGroup.Customer.Name	

						CalculateTax.LineNumber					= 1	




						if (LocalProject.BuyerTaxLocation entered)
							CalculateTax.PostalAddress  		= LocalProject.BuyerTaxLocation.AddressCode.PostalAddress
							LocalAddressCode					= LocalProject.BuyerTaxLocation.AddressCode
						else	
						if (ProjectFundingSourceRel.BuyerTaxLocation entered)	
							CalculateTax.PostalAddress  		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode.PostalAddress	
							LocalAddressCode					= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
						else								
							CalculateTax.PostalAddress  		= ProjectFundingSourceRel.CompanyCustomerGroup.CustomerBillTo.PostalAddress
						CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
						include LoadOneSourceTaxAttribute	
						CalculateTax.OneSourceTaxAttribute50	= LocalOneSourceTaxAttribute


					if (DerivedBuyerTaxCode entered)
						LocalBuyerTaxCode			= DerivedBuyerTaxCode
						LocalBuyerAddressCode		= LocalProject.BuyerTaxLocation.AddressCode
					else
						LocalBuyerTaxCode			= FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode
						LocalBuyerAddressCode		= FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode
					if (ProjectBillingOverrideRel.ProjectServiceLocation entered)
						LocalServiceTaxCode			= ProjectBillingOverrideRel.ProjectServiceLocation.TaxCode
						LocalServiceAddressCode		= ProjectBillingOverrideRel.ProjectServiceLocation.AddressCode
					else
						LocalServiceTaxCode			= ProjectBillingOverrideRel.TaxCode
					LocalProductTaxCategory			= ProjectBillingOverrideRel.ProductTaxCategory
					if (LocalProductTaxCategory not entered)
						if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
							LocalProductTaxCategory = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3.ProductTaxCategory
						else
						if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
							LocalProductTaxCategory = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4.ProductTaxCategory
					CalculateTax.TaxEntity			= LocalTaxEntity
					CalculateTax.System				= "AR"
					CalculateTax.TaxCode			= LocalBuyerTaxCode
					CalculateTax.FromTaxCode		= DerivedSellerTaxCode
					CalculateTax.POATaxCode			= LocalServiceTaxCode
					CalculateTax.ProductTaxCategory = LocalProductTaxCategory
					CalculateTax.Function			= "C"
					CalculateTax.TaxableAmount		= LocalAmount
					CalculateTax.TaxDate			= InvoiceDate
					
					LocalTaxCode = LocalBuyerTaxCode
					if (EntityTaxCodeRel.TaxDistributionCode entered)
						CalculateTax.InputReturnVertexTaxIn = "D"

					if (LocalTaxEntity.ThirdParty.VertexOSeries)
						CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
						CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress
						CalculateTax.POAAddress			= LocalServiceAddressCode.PostalAddress

					if (ProjectFundingSourceRel.TaxCalculationOption.Detail)
						LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
					    LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
					    round LocalTaxAmount to nearest LocalRoundTo
					    LocalTaxRate                    = CalculateTax.OutputTaxRate
						if (CalculateTax.OutputErrorNumber entered)
							include CreateInvoice
							invoke Create ProjectContractInvoiceError
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ProjectContract 		= ProjectContract
								invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
								invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
								invoked.ErrorMessage			= CalculateTax.OutputErrorMessage

						if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
						    initialize TaxCounter
						    initialize LocalTaxAmount
						    while (TaxCounter < 20)
						    	TaxCounter += 1
						    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
							    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
							    	round LocalTaxAmount to nearest LocalRoundTo					    	
#endif
				if (RecordCount = 50)
					commit transaction
					initialize RecordCount
				RecordCount += 1
				if (!Forecast)
					FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits += LocalUnits
					if (LocalInvoiceTransaction.FeeCode entered)
						FundingSourceTable.FundingSource[SourceCounter].InvoiceFees += LocalAmount
					if (LocalInvoiceTransaction.BillingMethod = 7)
						FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
					include CreateInvoice
					invoke Create ProjectContractInvoiceLine
						assign result to NewProjectContractInvoiceLine				
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.ProjectContract 		= ProjectContract
						invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
						invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						invoked.GLTransactionDetail		= LocalGLTransactionDetail
						invoked.Amount					= LocalAmount
						invoked.UnitsAmount				= LocalUnits
						invoked.Project					= LocalProject
						invoked.TaxAmount				= LocalTaxAmount
						invoked.TaxRate                 = LocalTaxRate
						invoked.BillableAmount			= InvoiceBillableAmount
						invoked.BillableRate			= LocalInvoiceTransaction.BillableRate
						invoked.FeeCode					= LocalInvoiceTransaction.FeeCode										
						invoked.BillingMethod			= LocalInvoiceTransaction.BillingMethod
						invoked.FeeMaxed				= FeeMaxed
						invoked.FromPartial				= LocalInvoiceTransaction.FromPartial
						invoked.BuyerTaxCode			= LocalBuyerTaxCode
						if (LocalAddressCode entered)
							invoked.AddressCode			= LocalAddressCode
						else
							invoked.AddressCode			= LocalBuyerAddressCode
						invoked.RetainedAmount			= LocalRetainedAmount
						invoked.TaxCode					= LocalServiceTaxCode
						invoked.ProductTaxCategory		= LocalProductTaxCategory

#ifdef module ar
				if (LocalBuyerTaxCode entered)
					if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered
					and ProjectFundingSourceRel.TaxCalculationOption.Detail)
					    initialize TaxCounter
					    while (TaxCounter < 20)
					    	TaxCounter += 1
					    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
					    		invoke Create ProjectContractInvoiceTaxLine
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract 		= ProjectContract
									invoked.FinanceDimension2 		= LocalFinanceDimension2
									invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
									invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
									invoked.LineNumber				= TaxCounter
									invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
									invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
									invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
									invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
									invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
					if ((ProjectFundingSourceRel.TaxCalculationOption.Summary
					or   ProjectFundingSourceRel.TaxCalculationOption.Total)
					and !LocalTaxEntity.ThirdParty.Sabrix)
						LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
						if (ProjectInvoiceTaxSummaryOTORel not exists)
							invoke Create ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount = LocalAmount
						else
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount += LocalAmount
#endif

				if (ApplyRetainers
				and RetainerCount > 0
				and LocalAmount > 0)
					LocalRetainerAmount = LocalAmount
					LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
					LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
#ifndef property federal
					if (ProjectFundingSourceRel.AllowancePercent entered)
						LocalRetainerAmount += (LocalAmount * ProjectFundingSourceRel.AllowancePercent)
						round LocalRetainerAmount to nearest LocalRoundTo
#endif						
					initialize RetainerCounter
					while (RetainerCounter < RetainerCount)
						RetainerCounter += 1
						if (RetainerTable.Retainer[RetainerCounter].Source = FundingSourceTable.FundingSource[SourceCounter].Source
						and RetainerTable.Retainer[RetainerCounter].AvailableAmount > 0
						and LocalRetainerAmount > 0)
							if (RetainerTable.Retainer[RetainerCounter].Rule = 0
							or (RetainerTable.Retainer[RetainerCounter].Rule = 1
							and RetainerTable.Retainer[RetainerCounter].RetainerProject = LocalProject))
								RetainerTable.Retainer[RetainerCounter].Invoice = FundingSourceTable.FundingSource[SourceCounter].Invoice							
								LocalAppliedAmount = LocalRetainerAmount
								if (LocalRetainerAmount >= RetainerTable.Retainer[RetainerCounter].AvailableAmount)
									LocalAppliedAmount = RetainerTable.Retainer[RetainerCounter].AvailableAmount
								RetainerTable.Retainer[RetainerCounter].AppliedAmount += LocalAppliedAmount
								RetainerTable.Retainer[RetainerCounter].AvailableAmount -= LocalAppliedAmount
								LocalRetainerAmount -= LocalAppliedAmount
								invoke Create ProjectContractInvoiceRetainerLine
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract 		= ProjectContract
									invoked.FinanceDimension2 		= LocalFinanceDimension2
									invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
									invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
									invoked.ProjectContractRetainer = RetainerTable.Retainer[RetainerCounter].Retainer
									invoked.AppliedAmount			= LocalAppliedAmount


		CreateAllowanceLine
			LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
			LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
#ifndef property federal
			if (ProjectFundingSourceRel.AllowancePercent entered)
				LocalAmount = FundingSourceTable.FundingSource[SourceCounter].BilledAmount * ProjectFundingSourceRel.AllowancePercent
				round LocalAmount to nearest LocalRoundTo
				LocalAllowanceAmount += LocalAmount
				initialize LocalTaxAmount
				initialize LocalTaxRate
#ifdef module ar
				initialize LocalAddressCode
				initialize LocalBuyerTaxCode
				initialize LocalBuyerAddressCode
				initialize LocalServiceTaxCode
				initialize LocalServiceAddressCode
				initialize LocalProductTaxCategory
				if (ProjectFundingSourceRel.AllowanceTaxable)
					LocalProject = ProjectFundingSourceRel.AllowanceProject
					initialize LocalProjectCodeBlock
					LocalTaxExempt = IsTaxExempt
					if (!LocalTaxExempt
					and (ProjectFundingSourceRel.BuyerTaxCode entered
					or   DerivedBuyerTaxCode entered)
					and !LocalFinanceDimension2.FundingType.InternalFund
					and !LocalFinanceDimension2.FundingType.IntercompanyBilling
					and !Forecast)
						initialize CalculateTax

						LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
						if (LocalTaxEntity.ThirdParty.Sabrix)					
							LocalGeneralLedgerChartAccount  		= ProjectFundingSourceRel.AllowanceFullAccount.GeneralLedgerChartAccount
							LocalOneSourceTaxAttributeText  		= LocalOneSourceTaxAttribute
							CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
							CalculateTax.InvoiceDate				= InvoiceDate


							CalculateTax.Invoice		      		= "Calculate"
							CalculateTax.Customer					= ProjectFundingSourceRel.CompanyCustomerGroup.Customer
							CalculateTax.VendorCustomerName 		= ProjectFundingSourceRel.CompanyCustomerGroup.Customer.Name	

							CalculateTax.LineNumber					= 1	




							if (LocalProject.BuyerTaxLocation entered)
								CalculateTax.PostalAddress  		= LocalProject.BuyerTaxLocation.AddressCode.PostalAddress
								LocalAddressCode					= LocalProject.BuyerTaxLocation.AddressCode
							else	
							if (ProjectFundingSourceRel.BuyerTaxLocation entered)	
								CalculateTax.PostalAddress  		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode.PostalAddress	
								LocalAddressCode					= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
							else								
								CalculateTax.PostalAddress  		= ProjectFundingSourceRel.CompanyCustomerGroup.CustomerBillTo.PostalAddress
							CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
							include LoadOneSourceTaxAttribute
							CalculateTax.OneSourceTaxAttribute50	= LocalOneSourceTaxAttribute	


						if (DerivedBuyerTaxCode entered)
							LocalBuyerTaxCode			= DerivedBuyerTaxCode
							LocalBuyerAddressCode		= LocalProject.BuyerTaxLocation.AddressCode
						else
							LocalBuyerTaxCode			= ProjectFundingSourceRel.BuyerTaxCode
							LocalBuyerAddressCode		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
						CalculateTax.TaxEntity			= LocalTaxEntity
						CalculateTax.System				= "AR"
						CalculateTax.TaxCode			= LocalBuyerTaxCode
						CalculateTax.FromTaxCode		= DerivedSellerTaxCode
						CalculateTax.Function			= "C"
						CalculateTax.TaxableAmount		= LocalAmount
						CalculateTax.TaxDate			= InvoiceDate
						
						LocalTaxCode = LocalBuyerTaxCode
						if (EntityTaxCodeRel.TaxDistributionCode entered)
							CalculateTax.InputReturnVertexTaxIn = "D"

						if (LocalTaxEntity.ThirdParty.VertexOSeries)
							CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
							CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress
							CalculateTax.POAAddress			= LocalServiceAddressCode.PostalAddress

						if (ProjectFundingSourceRel.TaxCalculationOption.Detail)
							LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
						    LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
						    round LocalTaxAmount to nearest LocalRoundTo
						    LocalTaxRate                    = CalculateTax.OutputTaxRate
							if (CalculateTax.OutputErrorNumber entered)
								invoke Create ProjectContractInvoiceError
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract 		= ProjectContract
									invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
									invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
									invoked.ErrorMessage			= CalculateTax.OutputErrorMessage
		
							if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
							    initialize TaxCounter
							    initialize LocalTaxAmount
							    while (TaxCounter < 20)
							    	TaxCounter += 1
							    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
								    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
								    	round LocalTaxAmount to nearest LocalRoundTo					    	
#endif
				if (LocalAmount entered)
					FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
					if (NewProjectContractInvoiceAllowanceLineRel exists)
						invoke UpdateAllowance first NewProjectContractInvoiceAllowanceLineRel
							invoked.PrmAmount				= LocalAmount
							invoked.PrmTaxAmount			= LocalTaxAmount
							invoked.PrmTaxRate				= LocalTaxRate
							invoked.PrmBuyerTaxCode			= LocalBuyerTaxCode
							if (LocalAddressCode entered)
								invoked.PrmAddressCode		= LocalAddressCode
							else
								invoked.PrmAddressCode		= LocalBuyerAddressCode
						LocalInvoiceLine = first NewProjectContractInvoiceAllowanceLineRel.SequenceNumber
					else
						invoke Create ProjectContractInvoiceLine
							assign result to NewProjectContractInvoiceLine
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.ProjectContract 		= ProjectContract
							invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
							invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
							invoked.Amount					= LocalAmount
							invoked.Project					= ProjectFundingSourceRel.AllowanceProject									
							invoked.BillableAmount			= LocalAmount
							invoked.IsAllowance				= true
							invoked.TaxAmount				= LocalTaxAmount
							invoked.TaxRate					= LocalTaxRate
							invoked.BuyerTaxCode			= LocalBuyerTaxCode
							if (LocalAddressCode entered)
								invoked.AddressCode			= LocalAddressCode
							else
								invoked.AddressCode			= LocalBuyerAddressCode
							invoked.TaxCode					= LocalServiceTaxCode
							invoked.ProductTaxCategory		= LocalProductTaxCategory
						LocalInvoiceLine = NewProjectContractInvoiceLine.SequenceNumber
#ifdef module ar
				if (LocalBuyerTaxCode entered)
					if ((ProjectFundingSourceRel.TaxCalculationOption.Summary
					or   ProjectFundingSourceRel.TaxCalculationOption.Total)
					and !LocalTaxEntity.ThirdParty.Sabrix)
						LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
						if (ProjectInvoiceTaxSummaryOTORel not exists)
							invoke Create ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount = LocalAmount
						else
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount += LocalAmount

					if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
					    initialize TaxCounter
					    while (TaxCounter < 20)
					    	TaxCounter += 1
					    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
								LocalLineNumber  = TaxCounter
								if (ProjectContractInvoiceTaxLineOTORel exists)
									invoke Update ProjectContractInvoiceTaxLineOTORel
										invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
										invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
								else	
						    		invoke Create ProjectContractInvoiceTaxLine
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.ProjectContract 		= ProjectContract
										invoked.FinanceDimension2 		= LocalFinanceDimension2
										invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
										invoked.SequenceNumber			= LocalInvoiceLine
										invoked.LineNumber				= TaxCounter
										invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
										invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
										invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
										invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
										invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
#endif
#endif

		CreateRevenueAllowanceLine
			LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
			LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
#ifndef property federal
			if (ProjectFundingSourceRel.AllowancePercent entered)
				LocalAmount = FundingSourceTable.FundingSource[SourceCounter].BilledAmount * ProjectFundingSourceRel.AllowancePercent
				round LocalAmount to nearest LocalRoundTo
				LocalAllowanceAmount += LocalAmount
				if (LocalAmount entered)
					FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
					FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance += LocalAmount
					if (NewProjectContractInvoiceAllowanceLineRel exists)
						invoke UpdateAllowance first NewProjectContractInvoiceAllowanceLineRel
							invoked.PrmAmount = LocalAmount
					else
						invoke Create ProjectContractInvoiceLine
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.ProjectContract 		= ProjectContract
							invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
							invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
							invoked.Amount					= LocalAmount
							invoked.Project					= ProjectFundingSourceRel.AllowanceProject									
							invoked.BillableAmount			= LocalAmount
							invoked.IsAllowance				= true
#endif

		CreateRetainageLine
			if (FundingSourceTable.FundingSource[SourceCounter].RetainedAmount entered)
				LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
				LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
				LocalAmount = FundingSourceTable.FundingSource[SourceCounter].RetainedAmount * -1
				LocalTotalRetainedAmount += FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage += LocalAmount
#ifndef property federal				
				if (NewProjectContractInvoiceRetainageLineRel exists)
					invoke UpdateRetainage first NewProjectContractInvoiceRetainageLineRel
						invoked.PrmAmount = LocalAmount
				else
					invoke Create ProjectContractInvoiceLine
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.ProjectContract 		= ProjectContract
						invoked.FinanceDimension2 		= FundingSourceTable.FundingSource[SourceCounter].Source
						invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						invoked.Amount					= LocalAmount
						invoked.Project					= ProjectFundingSourceRel.RetainageProject

						invoked.IsRetainage				= true		
#endif
		CreateAdvanceApplicationLine
			LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
			for each UnappliedAdvanceLinesRel
				LocalBilledAmount -= each.Amount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount -= each.Amount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits -= each.UnitsAmount
				FundingSourceTable.FundingSource[SourceCounter].InvoiceAdvance -= each.Amount
				if (!ProjectFundingSourceRel.TaxCalculationOption.Total)
					FundingSourceTable.FundingSource[SourceCounter].InvoiceTax -= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.DerivedTaxAmount
				invoke Create ProjectContractInvoiceLine
					invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.ProjectContract 				= ProjectContract
					invoked.FinanceDimension2 				= FundingSourceTable.FundingSource[SourceCounter].Source
					invoked.ProjectContractInvoice			= FundingSourceTable.FundingSource[SourceCounter].Invoice
					invoked.Amount							= each.Amount * -1
					invoked.Project							= each.Project
					invoked.BillableAmount					= each.Amount * -1
					invoked.UnitsAmount						= each.UnitsAmount * -1
					invoked.AppliedProjectContractAdvance	= each.ProjectContractAdvance
					if (each.Taxable)
						invoked.BuyerTaxCode				= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.BuyerTaxCode
						invoked.AddressCode					= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.AddressCode
						if (!ProjectFundingSourceRel.TaxCalculationOption.Total)
							invoked.TaxAmount				= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.DerivedTaxAmount * -1
							invoked.TaxRate                 = each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.DerivedTaxRate
				invoke Update each
					invoked.Status = 2
				if  (each.Taxable
				and (ProjectFundingSourceRel.TaxCalculationOption.Summary
				or   ProjectFundingSourceRel.TaxCalculationOption.Total))
					LocalServiceAddressCode	= blank
					LocalBuyerTaxCode		= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.BuyerTaxCode
					LocalServiceTaxCode		= blank
					LocalProductTaxCategory	= blank
					LocalBuyerAddressCode	= each.first ProjectContractInvoiceLine(ProjectContractAdvance) set.AddressCode
					if (ProjectInvoiceTaxSummaryOTORel not exists)
						invoke Create ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount = each.Amount * -1
					else
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += each.Amount * -1

#ifdef module tx		
		LoadOneSourceTaxAttribute  	 
			initialize LocalOneSourceTaxAttribute
			initialize AttributeCounter
			if (TaxAttributesRel exists)				 
				for each TaxAttributesRel.OneSourceProjectTaxAttributeByNumberRel
					if (each.Value entered
					or  each.LoadDynamicField entered)
						AttributeCounter +=1	
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Number	= each.AttributeNumber 
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Name	= each.UserAttributeName
						if (each.LoadDynamicField.ValueIs.ContractType)
							if (ContractType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ContractType
						else		
						if (each.LoadDynamicField.ValueIs.CustomerType)						
							if (ProjectFundingSourceRel.CustomerType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProjectFundingSourceRel.CustomerType
						else
						if (each.LoadDynamicField.ValueIs.Project)						
							if (LocalProject entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject
						else		
						if (each.LoadDynamicField.ValueIs.WorkType)						
							if (LocalProject.WorkType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.WorkType
						else				
						if (each.LoadDynamicField.ValueIs.ServiceType)						
							if (LocalProject.ServiceType entered)															
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.ServiceType
						else			
						if (each.LoadDynamicField.ValueIs.UsageType)						
							if (LocalProject.UsageType entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalProject.UsageType
						else			
						if (each.LoadDynamicField.ValueIs.AccountSubType)						
							if (LocalGeneralLedgerChartAccount.AccountSubType entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= LocalGeneralLedgerChartAccount.AccountSubType
						else	
						if (each.LoadDynamicField.ValueIs.Latitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoLatitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoLatitude
						else			
						if (each.LoadDynamicField.ValueIs.Longitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoLongitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoLongitude
						else			
						if (each.LoadDynamicField.ValueIs.Altitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoAltitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoAltitude
						else	
							LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value		= each.Value
#endif		


	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforProjectContract"
		ContextMessageText is a MessageField
			restricted
			"ProjectContract<ProjectContract>"
			
		ValidProjectDates is a DerivedField
			type is Boolean
			restricted
			if (LocalInvoiceDate within LocalProject.ProjectDateRange)
				return true
			else
			if (ProjectPeriodOfPerformanceRel exists
			and ProjectPeriodOfPerformanceRel.ProjectBeginDate <= LocalInvoiceDate
			and ProjectPeriodOfPerformanceRel.ProjectEndDate   >= LocalInvoiceDate)
				return true
			else
				return false

#ifdef module ap
		DerivedAPPayment is a DerivedField 
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (sum PayablesInvoiceDistributionsRel.PayablesInvoice.DerivedNetPaymentsAppliedTotal)
#endif			

#ifdef module ar	
		DerivedCashReceipts is a DerivedField 
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (sum ReceivableInvoiceDetailRel.ProjectCashReceipts)
#endif

		DerivedProjectExpenses is a DerivedField 
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (sum ProjectExpenseGeneralLedgerTotalsRel.NetProjectAmount)
		
		ContractAmountBilledRemaining is a DerivedField 
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (ProjectContractBudgetAmount - TotalBilledAmount - TotalRetainedAmount)

		TotalJournalizedBilledAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (TotalBilledAmount - TotalDraftBilledAmount - TotalRetainedAmount)

		TotalDraftBilledAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (sum OpenInvoicesRel.InvoiceBilledAmount)

		TotalJournalizedRecognizedAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (TotalRecognizedAmount - TotalDraftRecognizedAmount)

		TotalDraftRecognizedAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (sum OpenRevenueInvoicesRel.InvoiceTotalAmount - TotalDraftRecognizedAllowance - TotalDraftRecognizedPassThrough)

		TotalJournalizedBilledFees is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (TotalBilledFees - TotalDraftBilledFees)

		TotalDraftBilledFees is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (sum OpenInvoicesRel.InvoiceTotalFees)

		TotalJournalizedBilledAllowance is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (TotalBilledAllowance - TotalDraftBilledAllowance)

		TotalDraftBilledAllowance is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (sum OpenInvoicesRel.InvoiceTotalAllowance)

		TotalJournalizedRecognizedAllowance is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (TotalRecognizedAllowance - TotalDraftRecognizedAllowance)

		TotalDraftRecognizedAllowance is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return (sum OpenRevenueInvoicesRel.InvoiceTotalAllowance)

		TotalJournalizedBilledPassThrough is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (TotalBilledPassThrough - TotalDraftBilledPassThrough)

		TotalDraftBilledPassThrough is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (sum OpenInvoicesRel.InvoiceTotalPassThrough)

		TotalJournalizedRecognizedPassThrough is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (TotalRecognizedPassThrough - TotalDraftRecognizedPassThrough)

		TotalDraftRecognizedPassThrough is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (sum OpenRevenueInvoicesRel.InvoiceTotalPassThrough)

		TotalJournalizedRetainedAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (TotalRetainedAmount - TotalDraftRetainedAmount)

		TotalDraftRetainedAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return (sum OpenInvoicesRel.InvoiceTotalRetainage)

		TotalRetainerAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return sum ProjectContractRetainer set.Amount			

		TotalAppliedRetainerAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals			
			return sum ProjectContractRetainer set.AppliedAmount			

		TotalRemainingRetainerAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (TotalRetainerAmount - TotalAppliedRetainerAmount)

		TotalBillingAdjustments is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return sum ProjectFundingSource set.TotalBillingAdjustments
		
		BillingForecast is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return sum ProjectFundingSource set.BillingForecast

		RevenueForecast is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return sum ProjectFundingSource set.RevenueForecast
				
		BillingForecastDate is a DerivedField
			type is Date
			for each ProjectFundingSource set
				if (each.BillingForecastDate entered)
					return each.BillingForecastDate

		RevenueForecastDate is a DerivedField
			type is Date
			for each ProjectFundingSource set
				if (each.RevenueForecastDate entered)
					return each.RevenueForecastDate
				
		DerivedBillingMethod is a DerivedField
			type is Numeric size 1
			restricted
			if (ProjectBillingOverrideRel.BillingMethod entered)
				return ProjectBillingOverrideRel.BillingMethod
			else
			if (LocalProject.BillingMethod entered)
				return LocalProject.BillingMethod
			else
			if (BillingMethod != 4
			and BillingMethod != 5)
				return BillingMethod

		BillingMultiplier is a DerivedField
			type is Percent size 6.2
			restricted
			if (ProjectBillingOverrideRel.BillingMethod.CostReimbursement)
				return 1
			else
			if (ProjectBillingOverrideRel.BillingMethod.CostPlus
			or  ProjectBillingOverrideRel.BillingMethod.TimeAndMaterials
			or  ProjectBillingOverrideRel.BillingMethod.RateTable)
				return 1 + ProjectBillingOverrideRel.MarkupPercent
			else			
			if (LocalProject.BillingMethod.CostReimbursement)
				return 1
			else
			if (LocalProject.BillingMethod.CostPlus
			or  LocalProject.BillingMethod.TimeAndMaterials
			or  LocalProject.BillingMethod.RateTable)
				return 1 + LocalProject.MarkupPercent
			else
			if (BillingMethod.CostPlus
			or  BillingMethod.TimeAndMaterials
			or  BillingMethod.RateTable)
				return 1 + MarkupPercent
			else
				return 1

		TimeAndMaterialsBilling is a DerivedField
			type is Boolean
			restricted
			if (ProjectBillingOverrideRel.BillingMethod.TimeAndMaterials)
				return true
			else
			if (ProjectBillingOverrideRel.BillingMethod entered)
				return false
			else	
			if (LocalProject.BillingMethod.TimeAndMaterials)
				return true
			else
			if (LocalProject.BillingMethod entered)
				return false
			else	
			if (BillingMethod.TimeAndMaterials)
				return true

		DerivedBillingRateTable is a DerivedField
			type is like ProjectBillingRateTable
			restricted
			if (ProjectBillingOverrideRel.BillingMethod.RateTable)
				return ProjectBillingOverrideRel.BillingRateTable
			else
			if (ProjectBillingOverrideRel.BillingMethod entered)
				return blank
			else	
			if (LocalProject.BillingMethod.RateTable)
				return LocalProject.BillingRateTable
			else
			if (LocalProject.BillingMethod entered)
				return blank
			else	
			if (BillingMethod.RateTable)
				return BillingRateTable
		
		DerivedBillingRate is a DerivedField
			type is Decimal size 22.6
			if (ProjectBillingRateTableLineRel exists)
				return first ProjectBillingRateTableLineRel.Rate
			else
				for each ProjectBillingRateTableLineRel2
					if (LocalGLTransactionDetail within each.DerivedGroupCondition)
						return each.Rate
	
		IsTaxExempt is a DerivedField
			type is Boolean
			restricted
			if (ProjectBillingOverrideRel.TaxExempt)
				return true
			else
			if (ProjectBillingOverrideRel.TaxCode entered
			or  ProjectBillingOverrideRel.ProjectServiceLocation entered)
				return false
			else	
			if (LocalProject.TaxExempt)
				return true









		DerivedBuyerTaxCode is a DerivedField
			type is AlphaUpper size 15
			restricted






			if (LocalProject.BuyerTaxLocation.TaxCode entered)
				return LocalProject.BuyerTaxLocation.TaxCode
			else
				return LocalProject.BuyerTaxCode

		DerivedSellerTaxCode is a DerivedField
			type is AlphaUpper size 15
			restricted
			if (SellerTaxCode entered)
				return SellerTaxCode
			else
				return SellerTaxLocation.TaxCode

		DerivedPersonResponsible is a DerivedField
			type is like Employee
			restricted
			if (ProjectContract.Project.PersonResponsible entered)
				return ProjectContract.Project.PersonResponsible
			else
				return ProjectContract.Project.AncestorPersonResponsible

		DerivedProjectTeam is a DerivedField
			type is like ProjectTeam
			restricted
			if (ProjectContract.Project.ProjectTeam entered)
				return ProjectContract.Project.ProjectTeam
			else
				return ProjectContract.Project.AncestorProjectTeam
			
		TotalProjectFundedAmount is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return sum ProjectFundingSource set.FundedAmount

		TotalProjectBilledRemaining is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (ContractAmount - TotalBilledAmount)

		TotalProjectRevenueRemaining is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (ContractAmount - TotalRecognizedAmount)

		TotalRemainingFees is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			if (MaximumFees entered)
				return (MaximumFees - TotalBilledFees)
			
		PartialRecognizedFees is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (sum ProjectContractRecognizedFeesRel.Amount)
			
		PartialBilledFees is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (sum ProjectContractBilledFeesRel.Amount)










		
		InactiveMF is a MessageField
			restricted
			"INACTIVE"

		ActiveMF is a MessageField
			restricted
			"ACTIVE"
						
		StatusMessage is a ConditionalField
			type is Alpha size 20
			if (Active)
				ActiveMF//""
			else
				InactiveMF

		RefreshBudgetTotalsMF is a MessageField
			restricted
			"BudgetTotalsHaveBeenRefreshed"

		RevenueCreatedMF is a MessageField
			restricted
			"RevenueHasBeenRecognized"

		NoRevenueCreatedMF is a MessageField
			restricted
			"NoRevenueRecognized;AllFundingSourcesHaveBeenDepletedOrMaximumsHaveBeenReached"
			
		NoRevenueTransactionsFoundMF is a MessageField
			restricted
			"NoRecognizableTransactionsFound_OrMaximumsHaveBeenReached;NoRevenueRecognized"

		MoreRevenueTransactionsMF is a MessageField
			restricted										
			"RevenueRecognizedButMaximumTransactionsProcessed;_MoreValidTransactionsMayExist"

		InvoicesCreatedMF is a MessageField
			restricted
			"InvoicesHaveBeenCreated"

		NoInvoicesCreatedMF is a MessageField
			restricted
			"NoInvoicesCreated;_AllFundingSourcesHaveBeenDepletedOrMaximumsHaveBeenReached"
			
		NoTransactionsFoundMF is a MessageField
			restricted
			"NoBillableTransactionsFound_OrMaximumsHaveBeenReached;_InvoicesNotCreated"

		InvalidInvoiceDateMF is a MessageField
			restricted										
			"InvoiceDateOutsideProjectDateRange;_InvoicesNotCreated"

		MoreInvoiceTransactionsMF is a MessageField
			restricted										
			"InvoicesCreatedButMaximumTransactionsProcessed;_MoreValidTransactionsMayExist"
			
		SubmitForApprovalMF is a MessageField
			restricted
			"This_request_will_be_routed_for_approval;_after_it_is_reviewed_this_record_will_be_updated"
			
		ErrorsExistMF is a MessageField
			"***Errors_Exist***"

		BillingForecastMF is a MessageField
			restricted
			"BillingForecastCompleted"

		RevenueForecastMF is a MessageField
			restricted
			"RevenueForecastCompleted"

		ForecastCompleteMF is a MessageField
			restricted
			"BillingAndRevenueForecastCompleted"

		PostingDateErrorMF is a MessageField
			restricted
			"PostingDate<LocalDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"

		MinimumAmountMF is a MessageField
			restricted
			"SomeInvoicesFailedToMeetMinimumAmount"

		DerivedProjectContractInvoiceBalance is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return sum ProjectContractInvoiceAllBalancesRel.Amount	
						
		DerivedProjectContractBudgetRemaining is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			if (Scenario entered)
				return ProjectContractBudgetAmount - DerivedProjectContractInvoiceBalance	

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (Currency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (Currency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (Currency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (Currency.NumberOfDecimals = 4)
    			return .0001
    			
		DerivedLastInvoiceDate is a DerivedField
			type is Date
			return last JournalizedInvoicesRel.InvoiceDate

#ifdef module integration    			

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		ProjectContractAmountChangedAlertXML is a DerivedField
			type is XMLDocument
			restricted
			ProjectContractAmountChangedAlertXML = template.IONProjectContractAmountChangedAlert_ProjectContract_ST document for this instance
			return 	ProjectContractAmountChangedAlertXML
		
		DerivedDisplayProject is a DerivedField
			type is Alpha size 25
			restricted
			return ProjectContract.Project.DisplayProject
		
		DerivedOldContractAmount is a DerivedField
			type is Alpha size 20 
			restricted
			return old ContractAmount
		
		ProjectContractAmountChangedAlertDescription is a DerivedField
			type is Alpha size 100
			restricted
			return FinanceEnterpriseGroup.ProjectLabel + " Contract " + DerivedDisplayProject + " contract amount has changed from " + DerivedOldContractAmount +" "+ Currency +" to "+ ContractAmount +" "+ Currency + "."
		
		DerivedProjectContractAmountChangedAlertBODID is a DerivedField
			type is Alpha size 100
			restricted
			return "infor-nid:" + DerivedTenantID +":"+ FinanceEnterpriseGroup +":"+ ProjectContract +":"+ "?ProjectContractAmountChangedAlert&verb=Process"



		ProjectContractStatusChangedAlertXML is a DerivedField
			type is XMLDocument
			restricted
			ProjectContractStatusChangedAlertXML = template.IONProjectContractStatusChangedAlert_ProjectContract_ST document for this instance
			return 	ProjectContractStatusChangedAlertXML
		
		DerivedLogicStatusContract is a DerivedField
			type is Alpha size 30
			restricted
			if (Active = false)
				return "inactivated"
			if (Active = true) 
				return "activated"

		ProjectContractStatusChangedAlertDescription is a DerivedField
			type is Alpha size 100
			restricted
			return FinanceEnterpriseGroup.ProjectLabel + " Contract " + DerivedDisplayProject + " has been " + DerivedLogicStatusContract + "."
		
		DerivedProjectContractStatusChangedAlertBODID is a DerivedField
			type is Alpha size 100
			restricted
			return "infor-nid:" + DerivedTenantID +":"+ FinanceEnterpriseGroup +":"+ ProjectContract +":"+ "?ProjectContractStatusChangedAlert&verb=Process"
		

#endif




#ifdef module integration
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value


		
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODCurrentTimeStamp = current timestamp
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedActionCode is a DerivedField
			type is Alpha size 10
			restricted
			if(ActionCode.Create or action type.Create)
				return "Add"
			if(ActionCode.Update or action type.Update or ActionCode.Delete)
				return "Replace"
				
		DerivedStatusCode is a DerivedField
			type is Alpha size 7 
			restricted
			if (ActionCode.Delete)
				return "Deleted"
			if (ActionCode.Create or ActionCode.Update or action type.Update)
				return "Open"
			
		DerivedVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID
		
		DerivedaccountingEntity is a DerivedField
			type is Alpha size 4
			restricted
			return FinanceEnterpriseGroup
				
		DerivedbodID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:" + DerivedTenantID + ":" + FinanceEnterpriseGroup + ":" + ""  + ":" + DerivedDocumentID + ":" + "" + ":" + "?ProjectContract&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
			
		DerivedDocumentID is a DerivedField
			type is AlphaUpper size 25
			restricted
			return ProjectContract
			
		DerivedRevMethod is a DerivedField
			type is Alpha size 10
			restricted
			return "Product"
				
		SyncProjectContractXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			SyncProjectContractXMLBOD = template.IONSyncProjectContract_ProjectContract_ST document for this instance
			return SyncProjectContractXMLBOD				
#endif

			
		AmountDescriptionMessage is a DerivedField
			type is Alpha up to 60 
			default label is "Amount"
			return ContractAmount + " " + Currency

		BlankField is a DerivedField
			type is Alpha 15
			return blank

		DerivedProjectContractDateRange is a DerivedField
			type is Alpha 60
			default label is "DateRange"
			return ProjectContract.Project.ProjectDateRange.BeginDate + " " + ProjectContract.Project.ProjectDateRange.EndDate						
	
	Conditions
		UnbilledAmountsExist
			restricted

			when (Active
			and   ProjectFundingSource set exists
			and	  OpenRevenueInvoicesRel not exists
			and   DraftRetainersRel not exists)			

		NoOpenOrJournalizeRevenueSubmittedExist
			restricted
			when (OpenRevenueInvoicesRel not exists
			and   JournalizedRevenueInvoicesSubmittedRel not exists)						
			
		ToProcessRetainersExist
			restricted
			when (Active
			and   ToProcessRetainersRel exists)

		ToProcessRetainerAdjustmentsExist
			restricted
			when (Active
			and   ToProcessRetainerAdjustmentsRel exists)
#ifndef property federal
		RetainageExists
			restricted
			when (Active
			and   ProjectFundingSourceRetainageRel exists)
#endif
		InvoicesExist
			restricted
			when (ProjectContractInvoiceRel exists)

		ExternalInvoicesExist
			restricted
			when (ProjectContractInvoiceExternalRel exists
			and   IsThirdPartyInvoicePrint)

		ExternalReversalInvoicesExist
			restricted
			when (ProjectContractInvoiceExternalReversalRel exists
			and   IsThirdPartyInvoicePrint)

		RevenueExists
			restricted
			when (ProjectContractRevenueRel exists)

		SeparateUnrecognizedAmountsExist
			restricted

			when (Active
			and   RevenueRecognition.Separate
			and   ProjectFundingSource set exists
			and	  OpenInvoicesRel not exists)

		NonRetainerOpenInvoicesExist
			restricted
			when (NonRetainerOpenInvoicesRel exists
			and  !SingleProjectInvoice)

		OpenInvoicesExist
			restricted
			when (OpenInvoicesRel exists)

		ReadyToValidateInvoices
			restricted
			when (OpenInvoicesRel exists)

		OpenAndNoSubmitedInvoices
			restricted
			when (OpenAndNoSubmitedInvoicesRel exists)
		
		OpenOrSubmitedInvoicesExist
			restricted
			when (OpenAndSubmitedInvoicesRel exists)

		OpenInvoicesExistForApproval
			restricted
			when (OpenAndNoSubmitedInvoicesRel exists
			and	  OpenRevenueInvoicesRel not exists		

			and   FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)

		OpenRevenueInvoicesExist
			restricted
			when (OpenRevenueInvoicesRel exists)

		OpenNotSubmittedRevenueInvoicesExist
			restricted
			when (OpenNotSubmittedRevenueInvoicesRel exists)

		ReadyToProcessRevenue
			restricted		
			when (OpenRevenueInvoicesRel exists)

		ReadyToValidateRevenue
			restricted
			when (ReadyToProcessRevenue)
			
		OpenRevenueInvoicesExistForApproval
			restricted
			when (OpenNotSubmittedRevenueInvoicesRel exists
			and   OpenInvoicesRel not exists

			and   FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)			

		JournalizedRevenueInvoicesExistApproval
			restricted
			when (JournalizedRevenueInvoicesOkToSubmitRel exists
			and   JournalizedInvoicesSubmittedApprovalRel not exists

			and   OpenInvoicesRel not exists				
			and   Active					
			and   FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)

		JournalizedInvoicesInvoicesExistApproval
			restricted
			when (JournalizedInvoicesOkToSubmitRel exists
			and   JournalizedRevenueInvoicesSubmittedApprovalRel not exists			

			and   OpenRevenueInvoicesRel not exists			
			and   Active					
			and   FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)

		JournalizedRevenueInvoicesExist
			restricted
			when (JournalizedRevenueInvoicesRel exists
			and   JournalizedInvoicesSubmittedApprovalRel not exists			

			and   OpenInvoicesRel not exists			
			and   Active)

		JournalizedInvoicesExist
			restricted
			when (JournalizedInvoicesRel exists
			and   JournalizedRevenueInvoicesSubmittedApprovalRel not exists

			and   OpenRevenueInvoicesRel not exists)

		PartialBilledTransactionsExist
			restricted
			when (PartialBilledTransactionRel exists)

		PartialRecognizedTransactionsExist
			restricted
			when (PartialRecognizedTransactionRel exists)
			
		HasProjectContractComments
			restricted
			when (ProjectContract entered
			and   ProjectContractComment set exists)

		NoProjectFundingSourcesDefined
			restricted
			when (ProjectContract entered
			and   ProjectFundingSource set not exists)
			
		HasProcessedInvoices
			restricted	
			when (TotalBilledAmount entered
			or    TotalRecognizedAmount entered)
			
		PostingProjectsExist
			restricted
			when (BillablePostingProjectsRel exists)

		ProjectContractInvoiceErrorsExist
			restricted
			when (ProjectContractInvoiceErrorRel exists
			or    ErrorMessage entered)
			
		ErrorDetailExists
			restricted
			when (ProjectContractInvoiceErrorRel exists)
			
		OkToInactivate
			when (Active
			and   !OpenInvoicesExist)
			
#ifdef module po  
        HasProjectVendorContracts
        	when (ProjectVendorContractsRel exists)
        
		ProjectVendorContractsCreated
			when (ProjectVendorContractsCreateRel exists)
#endif			    
		InEnterpriseStructure
			restricted    
			when (ProjectContract.Project.SummaryInEnterpriseStructure)
			
		IsMilestoneType
			restricted
			when (BillingMethod.Milestone
			or    BillingMethod.Installment
			or    RevenueMethod.Milestone
			or    RevenueMethod.PercentageOfCompletion
			or    RevenueMethod.Installment)
			
		IsMilestoneRevenue
			restricted
			when (RevenueMethod.Milestone
			or    RevenueMethod.PercentageOfCompletion)

		IsInstallmentType
			restricted
			when (BillingMethod.Installment
			or    RevenueMethod.Installment)

		ProjectContractInvoiceAllBalancesRelExists
			restricted
			when (ProjectContractInvoiceAllBalancesRel exists)
			
		MultipleFundingSources
			restricted
			when (instance count of ProjectFundingSource set > 1)
			
		CombinedBillingMilestonesAllowed
			restricted
			when (RevenueRecognition.Combined
			and  !BillingMethod.Milestone
			and  !BillingMethod.Installment)

		SeparateBillingMilestonesAllowed
			restricted
			when (RevenueRecognition.Separate
			and  !BillingMethod.Milestone
			and  !BillingMethod.Installment)

		RevenueMilestonesAllowed
			restricted
			when (RevenueRecognition.Separate
			and  !RevenueMethod.Milestone
			and  !RevenueMethod.PercentageOfCompletion
			and  !RevenueMethod.Installment)
			
		BillingOverridesValid
			restricted
			when (RevenueRecognition.Combined
			and  (BillingMethod.Milestone
			or    BillingMethod.Installment))

		RevenueOverridesValid
			restricted
			when (RevenueRecognition.Separate
			and  (RevenueMethod.Milestone
			or    RevenueMethod.PercentageOfCompletion
			or    RevenueMethod.Installment))

		HasGlobalLedgerTransactions				
			when (ProjectContract entered
			and   ProjectContractGLTransactionDetailRel exists)

#ifdef module ar
		HasReceivableInvoices                
			when (ProjectContract entered
			and   ReceivableInvoiceRel exists)
		HasReceivablePrepayments                
			when (ProjectContract entered
			and	  ReceivablePrepaymentRel exists)
#endif				
		URLEntered
			restricted
			when (VendorInvoiceLink entered)
		
		HasPercentComplete	
			when (ProjectContractPercentCompleteAllRel exists)
			
		HasFees
			restricted
			when (ProjectContractFee set exists)

		ErrorMessageEntered
			restricted
			when (ErrorMessage entered)

		HasProjectContractChangeRequest
			restricted
			when (ProjectContractChangeRequest set exists)	
			
		HasProjectFundingSourceChangeRequest
			restricted
			when (ProjectFundingSourceChangeRequest set exists)
			
		RequiresApproval
			restricted	
			when (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractChangeApproval)					

		NotReadyToInvoice 
			restricted
			when (UnapprovedInvoicesRel exists)

		NotReadyForRevenueReversal 
			restricted
			when (UnapprovedRevenueReversalRel exists)

		NotReadyForInvoiceReversal 
			restricted
			when (UnapprovedInvoiceReversalRel exists)
			
		InvoicingApprovalNotRequired
			restricted	
			when (!actor.context.FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)					

		RevenueApprovalNotRequired
			restricted	
			when (!actor.context.FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)					

		ProjectContractInvoiceTemplateEntered	
			restricted
			when (ProjectContractInvoiceTemplate entered)
		
		ProjectContractInvoiceReversalTemplateEntered
			restricted
			when (ProjectContractInvoiceReversalTemplate entered)
			
		HasUnprocesedInvoices	
			restricted
			when (CreatedOrSubmittedInvoicesRel	exists)		
			
		IsThirdPartyInvoicePrint	
			restricted
			when (actor.context.FinanceEnterpriseGroup.ThirdPartyInvoicePrint)

		FrontEndSplitsEnabled
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits
			and   FrontEndSplits)

		FrontEndSplitsExist
			restricted
			when (ProjectContractFESDistribution set exists)
			
		FrontEndSplitResultsExist
			restricted
			when (ProjectContractFESResult set exists)

		ProjectContractReallocationSelectionsExist
			restricted
			when (ProjectContractReallocationSelection set exists)
			
		ReallocationResultsExist
			restricted
			when (ProjectContractReallocationResult set exists)
		
		IsValidForActorContext
			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			
		HasPrincipalInvestigatorContract
			when (ProjectContractPrincipalInvestigatorRel exists)

		HasAdministratorContract
			when (ProjectContractAdministratorPersonnelRel exists)
	Relations
		UnapprovedInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.RunGroup = LocalRunGroup			
				and    related.ApprovalStatus != 2)

		UnapprovedRevenueReversalRel is a ProjectContractInvoice set
			Instance Selection
				where (related.RunGroup = LocalRunGroup			
				and    related.ApprovalStatus != 4)			

		UnapprovedInvoiceReversalRel is a ProjectContractInvoice set
			Instance Selection
				where (related.RunGroup = LocalRunGroup			
				and    related.ApprovalStatus != 5)			

		CreatedOrSubmittedInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status.Created			
				or     related.ApprovalStatus.SubmittedForApproval)			
	
		IDMOutputSettingsRel
			one-to-many relation to IDMOutputSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.DocumentType = IDMOutputSettings.DocumentType.ProjectInvoice)
		
		ProjectContractInvoiceWithGeneratedDocRel is a ProjectContractInvoice set
			Instance Selection
				where (related.GeneratedInvoice entered
				and    related.IDMDocumentPID not entered)

		ProjectContractInvoiceWithGeneratedIDMDocRel is a ProjectContractInvoice set
			Instance Selection
				where (related.GeneratedInvoice not entered
				and    related.IDMDocumentPID entered)
				
		ActiveProjectFundingSourceRel
			one-to-many relation to ProjectFundingSource
			Field Mapping uses ByPriority
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
			Instance Selection
				where (related.FinanceDimension2.Active
				and    related.Active)

		FundingSourceAllRel
			one-to-many relation using ActiveProjectFundingSourceRel
			Instance Selection
				where (LocalFundingSourceDate within related.FinanceDimension2.DateRange
				and   (related.BillingGroup = LocalBillingGroup
				or     LocalBillingGroup not entered))
				
		FundingSourceSingleRel
			one-to-many relation using ActiveProjectFundingSourceRel
			Instance Selection
				where (related.FinanceDimension2 = LocalFundingSource)

		ProjectContractFinanceDimension2SelectRel
			one-to-many relation to FinanceDimension2
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FinanceDimension2		= ActiveProjectFundingSourceRel.FinanceDimension2

		RevenueFundingSourceRel
			if (LocalFundingSource entered)
				FundingSourceSingleRel
			else
				FundingSourceAllRel

		BillingFundingSourceRel
			if (LocalFundingSource entered)
				FundingSourceSingleRel
			else
				FundingSourceAllRel
				
		ProjectFundingSourceRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2

		FundingSourceSelectedProjectRel
			one-to-one relation to FundingSourceSelectedProject
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.Project					= LocalProject

#ifndef property federal
		ProjectFundingSourceRetainageRel
			one-to-many relation using ActiveProjectFundingSourceRel
			Instance Selection
				where (related.TotalRetainedAmount entered
				and    related.RetainageProject entered)
#endif
		JournalizedInvoicesWithUnbilledRetainageRel is a ProjectContractInvoice set
			Instance Selection
				where (related.InvoiceDate <= LocalThroughDate
				and    related.Status.Journalized
				and    related.InvoiceType.Bill
				and    related.HasUnbilledRetainage
				and    LocalThroughDate within related.FinanceDimension2.DateRange)

		ToProcessRetainersRel is a ProjectContractRetainer set
			Instance Selection
				where (related.Status.ToProcess
				and    related.RetainerType.Retainer)

		DraftRetainersRel is a ProjectContractRetainer set
			Instance Selection
				where (related.Status.Draft
				and    related.RetainerType.Retainer)
		
		ToProcessRetainerAdjustmentsRel is a ProjectContractRetainer set
			Instance Selection
				where (related.Status.ToProcess
				and    related.RetainerType.Adjustment)
		
		OpenProjectContractRetainerRel is a ProjectContractRetainer set
			Instance Selection
				where (related.RetainerDate <= LocalThroughDate
				and    related.Status.ToProcess
				and    related.RetainerType.Retainer
				and    LocalThroughDate within related.FinanceDimension2.DateRange)

		OpenFundingSourceRetainerRel
			one-to-many relation to ProjectContractRetainer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
			Instance Selection
				where (related.RetainerDate <= LocalThroughDate
				and    related.Status.ToProcess
				and    related.RetainerType.Retainer
				and    LocalThroughDate within related.FinanceDimension2.DateRange)
				
		OpenProjectContractRetainerAdjustmentRel is a ProjectContractRetainer set
			Instance Selection
				where (related.RetainerDate <= LocalThroughDate
				and    related.Status.ToProcess
				and    related.RetainerType.Adjustment
				and    LocalThroughDate within related.FinanceDimension2.DateRange)

		OpenFundingSourceRetainerAdjustmentRel
			one-to-many relation to ProjectContractRetainer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
			Instance Selection
				where (related.RetainerDate <= LocalThroughDate
				and    related.Status.ToProcess
				and    related.RetainerType.Adjustment
				and    LocalThroughDate within related.FinanceDimension2.DateRange)
	
		ProcessedProjectContractRetainerRel is a ProjectContractRetainer set
			Instance Selection
				where (related.Status.Processed
				and    related.RetainerType.Retainer
				and    related.AmountAvailable
				and    related.RetainerDate <= LocalFundingSourceDate)
									
		ProjectContractRetainerRel
			one-to-one relation to ProjectContractRetainer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractRetainer	= LocalProjectContractRetainer

		AccountingEntityGroupMemberRel
			one-to-many relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup
				related.AccountingEntityGroup			= LocalAccountingEntityGroup

		AccountingEntityGroupMemberOTOActiveRel
			one-to-many relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup          = FinanceEnterpriseGroup
				related.AccountingEntityGroup			= LocalAccountingEntityGroup
				related.AccountingEntity				= LocalAccountingEntity
    		Instance Selection
    			where (related.AccountingEntity.Status.Active)

		LocalSystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "PS"

		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "PS"
#ifdef module ar
		SystemClosingControlARRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "AR"
		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode			= "AR"
				related.Company							= LocalAccountingEntity
#endif
		ProjectContractMilestoneRel
			one-to-many relation to ProjectContractMilestone
			Field Mapping uses ByMilestoneType
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2       = LocalFinanceDimension2
    			related.MilestoneType			= LocalType
    		Instance Selection
    			where (related.MilestoneDate <= LocalFundingSourceDate
    			and    related.Status.ToProcess
    			and    related.RevenueAccountEntered)

		ProjectContractFinanceDimension2Rel
			one-to-many relation to FinanceDimension2
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FinanceDimension2		= ProjectFundingSource set.FinanceDimension2
				    			
		ProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsBillable)

		SingleProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
				related.Project					= LocalSingleProject
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsBillable)

		ProjectShadowCalculationRel
			if (LocalSingleProject entered)
				SingleProjectShadowRel
			else
				ProjectShadowRel

		ProjectShadowSplitRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsBillable
				and   !related.Project.ExcludeFromFES)

		AllPostingProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.ProjectType.Posting)

		BillableProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.Billable)

		SummaryProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Summary)
		
		ContractProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active)

		ContractProjectVendorShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract

		ProjectShadowTemplateRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
				related.Project					= LocalProject
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsBillable)

		BillingTemplateProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= LocalProject
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsBillable)

		ProjectOverridesRel
			one-to-many relation using ProjectShadowRel
			Instance Selection
				where (related.Project.BillingMethod entered
				or     related.Project.BillingOverridesExist)

		RevenueProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsRevenueRecognition)

		SingleRevenueProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
				related.Project					= LocalSingleProject
			Instance Selection
				where (related.Project.Active
				and    related.Project.ProjectType.Posting
				and    related.Project.IsRevenueRecognition)

		RevenueProjectShadowCalculationRel
			if (LocalSingleProject entered)
				SingleRevenueProjectShadowRel
			else
				RevenueProjectShadowRel
				
		RevenueProjectOverridesRel
			one-to-many relation using RevenueProjectShadowRel
			Instance Selection
				where (related.Project.BillingMethod entered
				or     related.Project.BillingOverridesExist)	

		ContractProjectEnterpriseStructureRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ProjectStructure		= FinanceEnterpriseGroup.EnterpriseProjectStructure
				related.Project		   			= ProjectContract.Project
		
		PostingProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= ProjectShadowRel.Project

		AllPostingProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= AllPostingProjectShadowRel.Project

		BillablePostingProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= BillableProjectShadowRel.Project
				
#ifdef module ap
		PayablesInvoiceDistributionsRel
            one-to-many relation to PayablesInvoiceDistribution
            Field Mapping uses ByProject
                related.DistributionAccount.Project	= BillablePostingProjectsRel.Project
			Instance Selection
				where (related.Company.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
#endif			
#ifdef module ar	
        ReceivableInvoiceDetailRel
            one-to-many relation to ReceivableInvoiceDetail
            Field Mapping uses symbolic key
			Instance Selection
				where (related.ProjectContract = ProjectContract
				and    !related.Status.HistoricalTransaction
				and    !related.IsCreditMemo
				and    related.HasApplications)
#endif

		ProjectExpenseGeneralLedgerTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByProjectAccount
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.GeneralLedgerTotal.Project = BillablePostingProjectsRel.Project
				related.Scenario				   = FinanceEnterpriseGroup.ActualsScenario	
			Instance Selection
				where (related.GeneralLedgerTotal.GeneralLedgerChartAccount.ChartType.Posting
				and    related.GeneralLedgerTotal.GeneralLedgerChartAccount.ChartSection.IncomeStatement
				and    related.GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Expense)


		SummaryProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= SummaryProjectShadowRel.Project
		
		ContractProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= ContractProjectShadowRel.Project

		PostingProjectsTemplateRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= ProjectShadowTemplateRel.Project

		BillingTemplatePostingProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= BillingTemplateProjectShadowRel.Project

		SummaryInContractRel
			one-to-one relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= ProjectContract
				related.Project					= LocalSummaryProject

		SummaryHasPostingsRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= LocalSummaryProject
			
		PostingInSummaryRel
			one-to-one relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SummaryProject			= LocalSummaryProject
				related.Project					= LocalProject

    	GeneralLedgerTransactionBaseRel
    		one-to-many relation to GeneralLedgerTransaction
    		Field Mapping uses ByProjectAndPostingDate
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.FinanceCodeBlock.Project	= LocalProject
    			related.PostingDate					<= LocalDateRange.End
    		Instance Selection
				where (related.Status.Posted    		
    			and    related.PostingDate >= LocalDateRange.Begin
    			and   !related.ExcludedProjectEvents)
		GeneralLedgerTransactionFESRel
			one-to-many relation using GeneralLedgerTransactionBaseRel
			Instance Selection
				where (related.FinanceCodeBlock.FinanceDimension2 entered)
		GeneralLedgerTransactionFD2Rel
			one-to-many relation using GeneralLedgerTransactionBaseRel
			Instance Selection
				where (related.FinanceCodeBlock.FinanceDimension2 = LocalFundingSource)
		GeneralLedgerTransactionRel
			if (FrontEndSplitsEnabled
			and LocalFundingSource entered)
				GeneralLedgerTransactionFD2Rel
			else
			if (FrontEndSplitsEnabled
			and LocalFundingSource not entered)
				GeneralLedgerTransactionFESRel
			else
				GeneralLedgerTransactionBaseRel
				
    	GeneralLedgerTransactionSplitRel
    		one-to-many relation to GeneralLedgerTransaction
    		Field Mapping uses ByProjectAndPostingDate
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.FinanceCodeBlock.Project	= LocalProject
    			related.PostingDate					<= LocalDateRange.End
    		Instance Selection
				where (related.Status.Posted    		
    			and    related.PostingDate >= LocalDateRange.Begin
				and    related.FinanceCodeBlock.FinanceDimension2 not entered
    			and    related.GeneralLedgerEvent != "PL"
    			and    related.GeneralLedgerEvent != "PJ"
    			and    related.GeneralLedgerEvent != "BD"
    			and    related.GeneralLedgerEvent != "LR"
    			and   !related.ExcludedProjectEvents)

		ProjectContractPartialBillRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.GLTransactionDetail.FinanceCodeBlock.Project = LocalProject
				and    related.RecordType.Bill
				and   !related.Hold)

		ProjectContractPartialRevenueRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.GLTransactionDetail.FinanceCodeBlock.Project = LocalProject
				and    related.RecordType.Revenue
				and   !related.Hold)
				
		ProjectContractBilledFeesRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByFeeCodeAndTransaction
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.Project					= LocalProject
				related.FeeCode					= LocalFeeCode
				related.GLTransactionDetail		= LocalGLTransactionDetail
			Instance Selection
				where (related.ProjectContractInvoice.InvoiceType.Bill)

		ProjectContractBaseInvoiceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByFeeCodeAndTransaction
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.Project					= LocalProject
				related.FeeCode					= blank
				related.GLTransactionDetail		= LocalGLTransactionDetail
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				
		ProjectContractRecognizedFeesRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByFeeCodeAndTransaction
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.Project					= LocalProject
				related.FeeCode					= LocalFeeCode
				related.GLTransactionDetail		= LocalGLTransactionDetail
			Instance Selection
				where (related.ProjectContractInvoice.InvoiceType.RevenueRecognition)

		ProjectContractInvoiceLineTaxRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByBuyerTaxCode
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.BuyerTaxCode			= LocalBuyerTaxCode
			Instance Selection
				where (related.AddressCode		  = LocalBuyerAddressCode
				and    related.TaxCode			  = LocalServiceTaxCode
				and    related.ProductTaxCategory = LocalProductTaxCategory)




				
		PartialBilledTransactionRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.RecordType.Bill)
				
		PartialRecognizedTransactionRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.RecordType.Revenue)

		ProjectBillingOverrideRel
			one-to-one relation to ProjectBillingOverride
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.ProjectCodeBlock		= LocalProjectCodeBlock

		ProjectContractInvoiceErrorRel
			one-to-many relation to ProjectContractInvoiceError
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract

		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= FinanceEnterpriseGroup.EnterpriseChart
				related.GeneralLedgerChartAccount	= LocalProjectCodeBlock.GeneralLedgerChartAccount
		FinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1			= LocalProjectCodeBlock.FinanceDimension1
		FinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceEnterpriseGroup.EnterpriseDim3Structure
				related.FinanceDimension3			= LocalProjectCodeBlock.FinanceDimension3
		FinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceEnterpriseGroup.EnterpriseDim4Structure
				related.FinanceDimension4			= LocalProjectCodeBlock.FinanceDimension4
		FinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceEnterpriseGroup.EnterpriseDim5Structure
				related.FinanceDimension5			= LocalProjectCodeBlock.FinanceDimension5
		FinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceEnterpriseGroup.EnterpriseDim6Structure
				related.FinanceDimension6			= LocalProjectCodeBlock.FinanceDimension6
		FinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceEnterpriseGroup.EnterpriseDim7Structure
				related.FinanceDimension7			= LocalProjectCodeBlock.FinanceDimension7
		FinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceEnterpriseGroup.EnterpriseDim8Structure
				related.FinanceDimension8			= LocalProjectCodeBlock.FinanceDimension8
		FinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceEnterpriseGroup.EnterpriseDim9Structure
				related.FinanceDimension9			= LocalProjectCodeBlock.FinanceDimension9
		FinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceEnterpriseGroup.EnterpriseDim10Structure
				related.FinanceDimension10			= LocalProjectCodeBlock.FinanceDimension10

		ProjectAssignmentRel
			one-to-many relation to ProjectAssignment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.Employee				= LocalEmployee
			Instance Selection
				where (LocalDate within related.ProjectDateRange)
				
		NewProjectContractInvoiceRel
			one-to-one relation to ProjectContractInvoice
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice

		NewProjectContractInvoiceAllowanceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
			Instance Selection
				where (related.IsAllowance)

		NewProjectContractInvoiceRetainageLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
			Instance Selection
				where (related.IsRetainage)
						
		NewProjectContractInvoiceRetainerLineRel
			one-to-many relation to ProjectContractInvoiceRetainerLine
			Field Mapping uses ByProjectContractRetainer
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.ProjectContractRetainer	= LocalProjectContractRetainer

		AppendToInvoiceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
    		Instance Selection
    			where (related.BuyerTaxCode entered)

		AppendToInvoiceTotalTaxLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
    		Instance Selection
    			where (related.LineType.Tax)
    			
		UnappliedAdvanceLinesRel
			one-to-many relation to ProjectContractAdvance
			Field Mapping uses ByDateAndStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.InvoiceDate			   <= LocalInvoiceDate
			Instance Selection
				where (!related.Hold)

		AvailableAdvanceAmountsRel
			one-to-many relation to ProjectContractAdvance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
			Instance Selection
				where (!related.Status.Applied)

		AppendToProjectContractInvoiceRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRunGroupAndFD2
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.RunGroup				= LocalRunGroup
				related.FinanceDimension2		= LocalFinanceDimension2
			Instance Selection
				where (related.InvoiceType.Bill)

		GenerateInvoiceFormatRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRunGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.RunGroup				= LocalRunGroup
			Instance Selection
				where (related.ProjectFundingSource.IsExternalFund)
				







		ProjectContractInvoiceRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
    		Instance Selection
    			where (related.InvoiceType.Bill
    			or     related.InvoiceType.Retainer
    			or     related.InvoiceType.Reversal
    			or     related.InvoiceType.Retainage)

		ProjectContractDashBoardInvoiceRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRunGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
    		Instance Selection
    			where (related.InvoiceType.Bill
    			or     related.InvoiceType.Retainer
    			or     related.InvoiceType.Reversal
    			or     related.InvoiceType.Retainage)

		ProjectContractDashBoardRevenueRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses ByRunGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
    		Instance Selection
    			where (related.InvoiceType.RevenueRecognition)

		ProjectContractInvoiceExternalRel is a ProjectContractInvoice set
    		Instance Selection
    			where (related.InvoiceType.Bill
    			and   (related.FinanceDimension2.FundingType.ExternalGrant
    			or     related.FinanceDimension2.FundingType.ExternalCustomer))

		ProjectContractInvoiceExternalReversalRel is a ProjectContractInvoice set
    		Instance Selection
    			where (related.InvoiceType.Reversal
    			and   (related.FinanceDimension2.FundingType.ExternalGrant
    			or     related.FinanceDimension2.FundingType.ExternalCustomer))

		ProjectContractInvoiceBillRel is a ProjectContractInvoice set
    		Instance Selection
    			where (related.InvoiceType.Bill
    			and    related.Status.Journalized)

		ProjectContractInvoiceRevenueRel is a ProjectContractInvoice set
    		Instance Selection
    			where (related.InvoiceType.RevenueRecognition
    			and    related.Status.Journalized)

		ProjectContractInvoiceAllBalancesRel
			one-to-many relation to ProjectContractInvoiceBalance
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract

		AdjustedProjectContractInvoiceAllBalancesRel
			one-to-many relation using ProjectContractInvoiceAllBalancesRel
			Instance Selection
				where (related.AdjustmentsEntered)

		ProjectContractBalanceAdjustmentRel
			one-to-many relation to ProjectContractBalanceAdjustment
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract

		ProjectContractInvoiceBalanceRel
			one-to-many relation to ProjectContractInvoiceBalance
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectContract			= LocalProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
			Instance Selection
				where (related.FinanceCodeBlock	= LocalFinanceCodeBlock)

		ProjectContractScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Parent = ProjectContract.Scenario)

		ProjectGeneralLedgerTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByProjectAccount
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.GeneralLedgerTotal.Project = PostingProjectsRel.Project
			Instance Selection				
				where (related.Scenario			   = any ProjectContractScenarioRel.Scenario)				
	
		ProjectContractGeneralLedgerTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByProjectAccount
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.GeneralLedgerTotal.Project = ProjectShadowRel.Project
			Instance Selection				
				where (!related.GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.UndistributedRetainedEarnings
				and    !related.GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.RetainedEarnings)				

		PostingProjectGeneralLedgerTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByProjectAccount
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.GeneralLedgerTotal.Project = LocalProject
				related.Scenario			       = any ProjectContractScenarioRel.Scenario				

		PostingFundingSourceGeneralLedgerTotalsRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByProjectAccount
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.GeneralLedgerTotal.Project = LocalProject
			Instance Selection		
				where (related.Scenario	         = any ProjectContractScenarioRel.Scenario		
				and    related.FinanceDimension2 = LocalFinanceDimension2)				





		ProjectContractRevenueRel
			one-to-many relation to ProjectContractInvoice
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
    		Instance Selection
    			where (related.InvoiceType.RevenueRecognition)

		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.GeneralLedgerSystemCode	= "PS"

		OpenInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 0
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage))

		OpenAndSubmitedInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 0
				and    related.ApprovalStatus = 1				
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage))

		OpenAndNoSubmitedInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 0
				and   (related.ApprovalStatus = blank
				or     related.ApprovalStatus = 3)							
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage))

		SummarizableInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage)

		CreatedRunGroupInvoicesRel
			one-to-many relation using OpenInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		CreatedInvoicesRel
			if (LocalRunGroup entered)
				CreatedRunGroupInvoicesRel
			else
				OpenInvoicesRel
				
		CreatedNotSubmittedInvoicesRel
			one-to-many relation using OpenAndNoSubmitedInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		NonRetainerCreatedSubmittedInvoicesRel
			one-to-many relation using CreatedNotSubmittedInvoicesRel
			Instance Selection
				where (!related.InvoiceType.Retainer
				and    !related.InvoiceType.Retainage)

		NonRetainerOpenInvoicesRel
			one-to-many relation using OpenInvoicesRel
			Instance Selection
				where (!related.InvoiceType.Retainer)		

		OpenRevenueInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 0
				and    related.InvoiceType.RevenueRecognition)

		JournalizedRevenueInvoicesSubmittedRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 1
				and   (related.ApprovalStatus = 1 
				or     related.ApprovalStatus = 4)   
				and    related.InvoiceType.RevenueRecognition)

		JournalizedRevenueInvoicesSubmittedApprovalRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 1
				and   (related.ApprovalStatus = 1 
				or     related.ApprovalStatus = 4)   
				and    related.InvoiceType.RevenueRecognition)

		JournalizedRevenueInvoicesOkToSubmitRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 1
				and   (related.ApprovalStatus = blank
				or     related.ApprovalStatus = 2							
				or     related.ApprovalStatus = 3
				and    related.ApprovalStatus != 4)
				and    related.InvoiceType.RevenueRecognition)

		JournalizedInvoicesOkToSubmitRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 1
				and   (related.ApprovalStatus = blank
				or     related.ApprovalStatus = 2							
				or     related.ApprovalStatus = 3
				and    related.ApprovalStatus != 5)	
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage))

		OpenNotSubmittedRevenueInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 0
				and   (related.ApprovalStatus = blank
				or     related.ApprovalStatus = 3)				
				and    related.InvoiceType.RevenueRecognition)

		JournalizedInvoicesSubmittedApprovalRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status = 1
				and   (related.ApprovalStatus = 1 
				or     related.ApprovalStatus = 5)   
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainer
				or     related.InvoiceType.Retainage))

		CreatedRunGroupRevenueInvoicesRel
			one-to-many relation using OpenRevenueInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		CreatedRevenueInvoicesRel
			if (LocalRunGroup entered)
				CreatedRunGroupRevenueInvoicesRel
			else
				OpenRevenueInvoicesRel

		CreatedNotSubmittedRevenueInvoicesRel
			one-to-many relation using OpenNotSubmittedRevenueInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		JournalizedRevenueInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status	= 1
				and    related.InvoiceType.RevenueRecognition)

		JournalizedInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.Status	= 1
				and   (related.InvoiceType.Bill
				or     related.InvoiceType.Retainage))

		JournalizedRevenueRunGroupInvoicesRel
			one-to-many relation using JournalizedRevenueInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		RevenueReversalRunGroupInvoicesRel
			one-to-many relation using JournalizedRevenueInvoicesOkToSubmitRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		InvoiceReversalRunGroupInvoicesRel
			one-to-many relation using JournalizedInvoicesOkToSubmitRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		JournalizedRunGroupInvoicesRel
			one-to-many relation using JournalizedInvoicesRel
			Instance Selection
				where (related.RunGroup = LocalRunGroup)

		LastProjectContractRunGroupRel
			one-to-one relation to ProjectContractRunGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectContractRunGroup = LocalRunGroup

		ProjectInvoiceTransactionOTORel
			one-to-one relation to ProjectInvoiceTransaction
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectContractRunGroup = LocalRunGroup
				related.Counter					= LocalTransactionCounter

		ProjectInvoiceTransactionRel
			one-to-many relation to ProjectInvoiceTransaction
			Field Mapping uses ByTransactionDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectContractRunGroup = LocalRunGroup

		ProjectInvoiceTransactionFeeRel
			one-to-many relation using ProjectInvoiceTransactionRel
			Instance Selection
				where (related.InvoiceTransaction.Amount < 0
				and    related.InvoiceTransaction.FeeCode entered
				and    related.BaseIsPositive)

		ProjectInvoiceTaxSummaryRel
			one-to-many relation to ProjectInvoiceTaxSummary
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice

		ProjectInvoiceTaxSummaryOTORel
			one-to-one relation to ProjectInvoiceTaxSummary
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = LocalServiceTaxCode
				related.TaxSummaryKey.ProductTaxCategory = LocalProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = LocalBuyerAddressCode
				related.TaxSummaryKey.ServiceAddressCode = LocalServiceAddressCode

		ProjectInvoiceTaxSummaryLineOTORel
			one-to-one relation to ProjectInvoiceTaxSummaryLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = LocalServiceTaxCode
				related.TaxSummaryKey.ProductTaxCategory = LocalProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = LocalBuyerAddressCode
				related.TaxSummaryKey.ServiceAddressCode = LocalServiceAddressCode
				related.TaxCounter				= LocalTaxCounter

		ProjectContractSplitTransactionRel
			one-to-many relation to ProjectContractSplitTransaction
			Field Mapping uses ByTransactionDate
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ProjectContract						= ProjectContract
				related.SplitTransactionKey.JournalizeGroup = LocalJournalizeGroup

		ProjectContractMilestonesRel is a ProjectContractMilestone set
			Instance Selection
				where (related.MilestoneType = LocalType)

		HistoricalProjectContractMilestoneRel is a ProjectContractMilestone set
			Instance Selection
				where (related.Status.Historical)

		ProjectContractFeeRel
			one-to-many relation to ProjectContractFee
			Field Mapping uses ByDateDescendingActive
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
			Instance Selection
				where (related.ProjectFeeCode.Active)

		ProjectContractFeeTierRel
			one-to-many relation to ProjectContractFeeTier
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectFeeCode			= LocalFeeCode
				related.EffectiveDate			= LocalEffectiveDate

		ToProjectContractFeeRel
			one-to-one relation to ProjectContractFee
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= LocalToContract
				related.ProjectFeeCode			= LocalFeeCode
				related.EffectiveDate			= LocalEffectiveDate

		ProjectBillingRateTableRel
			one-to-many relation to ProjectBillingRateTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectBillingRateTable	= LocalBillingRateTable

		ProjectBillingRateTableLineRel
			one-to-many relation to ProjectBillingRateTableLine
			Field Mapping uses ByCodeBlockKey
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectBillingRateTable	= LocalBillingRateTable
				related.EffectiveDate			= LocalRateTableDate
				related.CodeBlockKey			= LocalCodeBlockKey
				related.CodeBlockString			= LocalCodeBlockString

		ProjectBillingRateTableLineRel2
			one-to-many relation to ProjectBillingRateTableLine
			Field Mapping uses ByCodeBlockKey
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectBillingRateTable	= LocalBillingRateTable
				related.EffectiveDate			= LocalRateTableDate
				related.CodeBlockKey			= LocalCodeBlockKey
			Instance Selection
				where (related.BillingCodeBlock entered
				and   (related.BillingCodeBlock.AccountingEntity = LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
				or     related.BillingCodeBlock.AccountingEntity = blank)
				and   (related.BillingCodeBlock.AccountingUnit = LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
				or     related.BillingCodeBlock.AccountingUnit = blank)
				and   (related.BillingCodeBlock.GeneralLedgerChartAccount = LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
				or     related.BillingCodeBlock.GeneralLedgerChartAccount = blank)
				and   (related.BillingCodeBlock.Project = LocalGLTransactionDetail.FinanceCodeBlock.Project
				or     related.BillingCodeBlock.Project = blank)
				and   (related.BillingCodeBlock.FinanceDimension1 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
				or     related.BillingCodeBlock.FinanceDimension1 = blank)
				and   (related.BillingCodeBlock.FinanceDimension2 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
				or     related.BillingCodeBlock.FinanceDimension2 = blank)
				and   (related.BillingCodeBlock.FinanceDimension3 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
				or     related.BillingCodeBlock.FinanceDimension3 = blank)
				and   (related.BillingCodeBlock.FinanceDimension4 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
				or     related.BillingCodeBlock.FinanceDimension4 = blank)
				and   (related.BillingCodeBlock.FinanceDimension5 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
				or     related.BillingCodeBlock.FinanceDimension5 = blank)
				and   (related.BillingCodeBlock.FinanceDimension6 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
				or     related.BillingCodeBlock.FinanceDimension6 = blank)
				and   (related.BillingCodeBlock.FinanceDimension7 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
				or     related.BillingCodeBlock.FinanceDimension7 = blank)
				and   (related.BillingCodeBlock.FinanceDimension8 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
				or     related.BillingCodeBlock.FinanceDimension8 = blank)
				and   (related.BillingCodeBlock.FinanceDimension9 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
				or     related.BillingCodeBlock.FinanceDimension9 = blank)
				and   (related.BillingCodeBlock.FinanceDimension10 = LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
				or     related.BillingCodeBlock.FinanceDimension10 = blank)
				and   (related.BillingCodeBlock.Employee = LocalGLTransactionDetail.Resource
				or     related.BillingCodeBlock.Employee = blank))

		FixProjectContractInvoiceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract

		FixProjectContractInvoiceLineFD2Rel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2

		ProjectContractInvoiceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice

		ProjectContractInvoiceLineOTORel
			one-to-one relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.SequenceNumber			= LocalInvoiceLine

		ProjectContractInvoiceTaxLineOTORel
			one-to-one relation to ProjectContractInvoiceTaxLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
				related.SequenceNumber			= LocalInvoiceLine
				related.LineNumber				= LocalLineNumber

		JournalizeGroupEnteredInvoicesRel is a ProjectContractInvoice set
			Instance Selection
				where (related.JournalizeGroup entered)
				
		ProjectContractGLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroup			= JournalizeGroupEnteredInvoicesRel.JournalizeGroup

#ifdef module po
        ProjectVendorContractsCreateRel
	        one-to-many relation to ProjectVendorContract
            Field Mapping uses ByContractDescending
     	      	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.Project                = LocalProject
				related.ContractGroup    	   = LocalContractGroup	
    			related.Contract 			   = LocalContract				
				related.Vendor                 = LocalVendor
				
        ProjectVendorContractsRel
	        one-to-many relation to ProjectVendorContract
            Field Mapping uses ByContractDescending
     	      	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.Project         = any AllPostingProjectShadowRel.Project	
				or     related.Project         = ProjectContract.Project)

		MyProjectVendorContractsRel	
        	one-to-many relation to ProjectVendorContract
            Field Mapping uses ByContractDescending
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
            Instance Selection
            	where (related.Project = any ContractProjectVendorShadowRel.SummaryProject 	
				or     related.Project = any ContractProjectVendorShadowRel.Project)
#endif				
		ProjectContractRel
			one-to-many relation to ProjectContract
			Field Mapping uses ByActive
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract					

		ProjectContractPrincipalInvestigatorRel
        	one-to-many relation to ProjectPersonnel
            Field Mapping uses ByEmployee
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
                related.Employee               = actor.agent(Employee).Employee
			Instance Selection
				where (related.Active
				and   related.ProjectRole.RecordType = "3"
				and   related.Project.ParentDisplayContract = DisplayContract)
		ProjectContractAdministratorPersonnelRel
        	one-to-many relation to ProjectPersonnel
            Field Mapping uses ByEmployee
            	related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
                related.Employee               = actor.agent(Employee).Employee
			Instance Selection
				where (related.Active
				and   related.ProjectRole.RecordType = "2"
				and   related.Project.ParentDisplayContract = DisplayContract)

		ProjectContractPercentCompleteAllRel
			one-to-many relation to ProjectContractPercentComplete
			Field Mapping uses ByDateDescending
				related.FinanceEnterpriseGroup         = FinanceEnterpriseGroup
				related.Project                        = ProjectContract.Project
				
		ProjectInvoiceFormatRel	
			one-to-one relation to ProjectInvoiceFormat
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectInvoiceFormat	= LocalProjectInvoiceFormat

		ProjectInvoiceReversalFormatRel	
			one-to-one relation to ProjectInvoiceReversalFormat
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  	    = FinanceEnterpriseGroup
				related.ProjectInvoiceReversalFormat	= LocalProjectInvoiceReversalFormat
				
#ifdef module tx
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxEntity				= LocalTaxEntity
		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxEntity				= LocalTaxEntity
				related.TaxCode					= LocalTaxCode
				
 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
#endif					
#ifdef module ar
		ReceivableInvoiceRel
		  	one-to-many relation to ReceivableInvoice
		  	Field Mapping uses ByTransactionDate
		        related.ProjectContract = ProjectContract
		  	Instance Selection
		    	where (related.Company.CustomerBusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
		ReceivablePrepaymentRel
		  	one-to-many relation to ReceivablePrepayment
		  	Field Mapping uses ByProjectContract
		        related.ProjectContract = ProjectContract
		  	Instance Selection
		    	where (related.Company.CustomerBusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		    	and    related.ReceivablePayment.CancelDate not entered)
#endif
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode         = "PS"
#ifdef module ap
		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= LocalDistribution
		OpenProjectContractFESResultRel is a ProjectContractFESResult set
			Instance Selection
				where (related.JournalizeGroup not entered)
		OpenProjectContractReallocationResultRel is a ProjectContractReallocationResult set
			Instance Selection
				where (related.JournalizeGroup not entered)
#endif
		GLTransactionInterfaceRel
			one-to-many relation to GLTransactionInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.GLTransactionInterface.RunGroup	= LocalJournalizeGroup
				related.GLTransactionInterface.SequenceNumber > 0
		ProjectFESGLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses TransactionsByProject
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Project   	= LocalProject
			Instance Selection
				where (related.FinanceCodeBlock.FinanceDimension2 entered
				and    related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
				and   !related.FESExcludedEvent
    			and   !related.ExcludedProjectEvents)
		ProjectFESGeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByProjectAndPostingDate
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Project   	= LocalProject
			Instance Selection
				where (related.FinanceCodeBlock.FinanceDimension2 entered
				and    related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
				and    related.Status.Unreleased
				and   !related.FESExcludedEvent
    			and   !related.ExcludedProjectEvents)
		ProjectFESGLCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses ByProjectAndSystemCurrent
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Project	= LocalProject
				related.System				   		= LocalSystem
			Instance Selection
				where (related.FinanceCodeBlock.FinanceDimension2 entered
				and    related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
		ProjectFESGLTransactionInterfaceRel
			one-to-many relation to GLTransactionInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where (related.Project = LocalProject
				and    related.FinanceDimension2 entered
				and    related.CurrencyCode = LocalProject.Currency
				and    related.TransactionAmount entered
				and   !related.FESExcludedEvent)
		FESProjectIndirectBurdenTransactionRel
			one-to-many relation to ProjectIndirectBurdenTransaction
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
			Instance Selection
				where (related.Status.Created
				and    related.FESFD2 entered)
				
#ifdef module idm
		UserDefaultPrinterRel
			one-to-one relation to UserDefaultPrinter
			Field Mapping uses symbolic key
				related.UserDefaultPrinter.Actor = actor
#endif	
#ifdef module integration					

        FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
				
		FSMBODConfigurationPulseAlertRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailPulseAlertRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= LocalPulseAlertFrom
				and	   related.Enable)


#endif

#ifdef module integration
		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "ProjectContract"
            	related.FSMBODConfiguration.Direction 	= 1
				
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
#endif

	
	Sets
		ByActive
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
			Instance Selection
				where (Active)
				
		ByPersonResponsibleActive
			Sort Order
				FinanceEnterpriseGroup
				PersonResponsible
				ProjectContract
			Instance Selection
				where (Active)

		ByProjectTeamActive
			Sort Order
				FinanceEnterpriseGroup
				ProjectTeam
				ProjectContract
			Instance Selection
				where (Active)
				
	Field Rules
		DisplayContract
			DisplayContract = ProjectContract.Project.DisplayProject
			
		ContractID
			required
			default to ProjectContract.Project.DisplayProject
				
		Description
			required
			default to ProjectContract.Project.Description

		ContractAmount
			required
				"ContractAmountIsRequired"			
			if (ContractAmount changed)			
				if (RequiresApproval)
					constraint (ChangeOrderApproved)
						"CannotChangeContractAmount;MustUseProjectContractChangeRequest"				
				constraint (ContractAmount >= TotalProjectFundedAmount)
					"ContractAmountCannotBeLessThanTotalFundedAmountOf<TotalProjectFundedAmount>"
			

			if (FinanceEnterpriseGroup.BODTrigger)
        		if (action type.Update)
            		if(ContractAmount changed)
                		trigger "ProjectContractAmountChangedService" PA service
                    		resume on error
                    		title is "FEG:<FinanceEnterpriseGroup>PFS:<ProjectContract>"
                    		Criteria
                        		FinanceEnterpriseGroup
                         	    ProjectContract
                       		Variables
                        		FinanceEnterpriseGroup
                           			variable name is FinanceEnterpriseGroup
                           	 	ProjectContract
                                	variable name is ProjectContractID
                            	ContractID
                                	variable name is ContractID
                            	old ContractAmount
                                	variable name is OldContractAmount
                            	ContractAmount
                               		variable name is NewContractAmount
                        		Currency
                                	variable name is Currency
                                FinanceEnterpriseGroup.ProjectLabel
                                	variable name is FEGProjectLabel      
                                ProjectContract.Project.DisplayProject
                                	variable name is DisplayProject     
#ifdef module integration                   		
                        invoke TriggerProjectContractAmountChangedAlert
                        	invoked.PrmPulseAlert = "FSM_ION_ProjectContractAmountChangedAlert"        	
#endif	
		Currency
			default to FinanceEnterpriseGroup.EnterpriseProjectStructure.Currency
			required
				"CurrencyIsRequired"
			if (Currency changed
			and old Currency entered)
				constraint (!PostingProjectsExist)
					"CurrencyCannotBeChanged;_Posting<FinanceEnterpriseGroup.ProjectLabel>RecordsExistForContract"
				constraint (ProjectContractInvoice set not exists)
					"CurrencyCannotBeChanged;_InvoicesExist"







		RevenueRecognition
			required
				"RevenueRecognitionIsRequired"
			if (FinanceEnterpriseGroup.FundAccounting)
				constraint (RevenueRecognition.Combined)
					"RevenueRecognitionMustBeCombinedWhenUsingFundAccounting"
			if (RevenueRecognition changed)
				constraint (!RevenueExists)
					"CannotChangeRevenueRecognition;_RevenueHasBeenProcessed"
				constraint (!InvoicesExist)
					"CannotChangeRevenueRecognition;_InvoicesHaveBeenGenerated"
				constraint (ProjectFundingSource set not exists)
					"CannotChangeRevenueRecognition;_FundingSourcesHaveBeenAttached"

		MarkupPercent
			constraint (BillingMethod.CostPlus or BillingMethod.TimeAndMaterials or BillingMethod.RateTable)
				"MarkupPercentValidForBillingMethodsCostPlus,TimeAndMaterials,AndRateTableOnly"

		BillingRateTable
			constraint (BillingMethod.RateTable)
				"BillingRateTableOnlyValidWhenBillingMethodIsRateTable"
			constraint (BillingRateTable.Currency = Currency)
				"BillingRateTableCurrencyMustMatchContractCurrency"
			if (BillingMethod.RateTable)
				required
					"BillingRateTableRequired"

		BillingMethod
			required
				"BillingMethodIsRequired"
			if (BillingMethod changed)
				if (old BillingMethod.Milestone
				or  old BillingMethod.Installment)
					LocalType = 1
					constraint (ProjectContractMilestonesRel not exists)
						"CannotChangeBillingMethod;_MilestonesExist"
				if ((old BillingMethod.Milestone
				or   old BillingMethod.Installment)
				and (BillingMethod.CostReimbursement
				or   BillingMethod.CostPlus
				or   BillingMethod.TimeAndMaterials
				or   BillingMethod.RateTable))
					constraint (ProjectFundingSource set not exists)
						"CannotChangeBillingMethod;_FundingSourcesHaveBeenAttached"
				if ((BillingMethod.Milestone
				or   BillingMethod.Installment)
				and (old BillingMethod.CostReimbursement
				or   old BillingMethod.CostPlus
				or   old BillingMethod.TimeAndMaterials
				or   old BillingMethod.RateTable))
					constraint (ProjectFundingSource set not exists)
						"CannotChangeBillingMethod;_FundingSourcesHaveBeenAttached"
					
		RevenueMethod
			if (RevenueRecognition.Separate)
				required
			else
				RevenueMethod = blank
			if (RevenueMethod changed)
				if (old RevenueMethod entered)
					constraint (!RevenueExists)
						"CannotChangeRevenueMethod;_RevenueHasBeenProcessed"
					if ((old RevenueMethod.Milestone
					or   old RevenueMethod.PercentageOfCompletion
					or   old RevenueMethod.Installment)
					and  RevenueMethod.FullAccrual)
						constraint (ProjectFundingSource set not exists)
							"CannotChangeRevenueMethod;_FundingSourcesHaveBeenAttached"
					if ((RevenueMethod.Milestone
					or   RevenueMethod.PercentageOfCompletion
					or   RevenueMethod.Installment)
					and  old RevenueMethod.FullAccrual)
						constraint (ProjectFundingSource set not exists)
							"CannotChangeRevenueMethod;_FundingSourcesHaveBeenAttached"
				if (old RevenueMethod.Milestone
				or  old RevenueMethod.PercentageOfCompletion
				or  old RevenueMethod.Installment)
					LocalType = 2
					constraint (ProjectContractMilestonesRel not exists)
						"CannotChangeRevenueMethod;_MilestonesExist"

		Active
			if (Active changed
			and old Active)
				constraint (!OpenOrSubmitedInvoicesExist)
					"CannotInactivateContract;_CreatedInvoicesExist"

		PersonResponsible
			PersonResponsible = DerivedPersonResponsible

		ProjectTeam
			ProjectTeam = DerivedProjectTeam

		ProjectInvoiceFormat
			if (UseIDM)	
				initialize
			else		
				for each ProjectContractInvoiceWithGeneratedIDMDocRel
					invoke UpdateProjectInvoiceTemplate each					

		ProjectInvoiceReversalFormat
			if (UseIDM)	
				initialize
			else		
				for each ProjectContractInvoiceWithGeneratedIDMDocRel
					invoke UpdateProjectInvoiceReversalTemplate each					

		MaximumFees
			if (MaximumFees changed)		
				if (RequiresApproval)
					constraint (ChangeOrderApproved)				
						"CannotChangeMaximumFees;MustUseProjectContractChangeRequest"				
			constraint (MaximumFees <= ContractAmount)
				"MaximumFeesCannotExceedContractAmount"
			if (MaximumFees entered)
				constraint (MaximumFees >= TotalBilledFees)
					"MaximumFeesCannotBeLessThanTotalBilledFees"

		SellerTaxLocation
			constraint (SellerTaxCode not entered)
				"CannotEnterBothSellerTaxCodeAndSellerTaxLocation"

		CreateSummarizedInvoices
			if (SummarizeByProject entered
			or  SummarizeByDimension entered
			or  SummarizeByResource
			or  SummarizeByRate
			or  SummarizeByFeeCode)
				required
					"CreateSummarizedInvoicesRequired;_AtLeastOneInvoiceSummarizationParameterHasBeenEntered"

		SummarizeByProject
			if (CreateSummarizedInvoices)
				if  (SummarizeByDimension not entered
				and !SummarizeByResource
				and !SummarizeByRate
				and !SummarizeByFeeCode)
					required
						"InvoiceSummarizationRequiresAtLeastOneParameter"

		SummarizeByDimension
			if (CreateSummarizedInvoices)
				if  (SummarizeByProject not entered
				and !SummarizeByResource
				and !SummarizeByRate
				and !SummarizeByFeeCode)
					required
						"InvoiceSummarizationRequiresAtLeastOneParameter"

		AlternateChart
			constraint (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
				"AlternateChartValidOnlyWhenBillingOverrideLevelIs_Account"
			constraint (SummarizeByDimension.SummaryParent)
				"AlternateChartValidOnlyWhenSummarizingByAccountSummaryParent"
				
		SummarizeByResource
			if (CreateSummarizedInvoices)
				if  (SummarizeByProject not entered
				and  SummarizeByDimension not entered
				and !SummarizeByRate
				and !SummarizeByFeeCode)
					required
						"InvoiceSummarizationRequiresAtLeastOneParameter"

		SummarizeByRate
			if (CreateSummarizedInvoices)
				if  (SummarizeByProject not entered
				and  SummarizeByDimension not entered
				and !SummarizeByResource
				and !SummarizeByFeeCode)
					required
						"InvoiceSummarizationRequiresAtLeastOneParameter"

		SummarizeByFeeCode
			if (CreateSummarizedInvoices)
				if  (SummarizeByProject not entered
				and  SummarizeByDimension not entered
				and !SummarizeByResource
				and !SummarizeByRate)
					required
						"InvoiceSummarizationRequiresAtLeastOneParameter"

#ifdef module idm
		ProjectContractInvoiceTemplate
			if (UseIDM)
				constraint (ProjectContractInvoiceTemplate.IDMDocumentType.ProjectContractInvoice)
					"InvalidTemplate"
					
				if (ProjectFundingSource set.InvoiceIssueMethod.Print)
					constraint (FinanceEnterpriseGroup.EnterpriseProjectStructure.IDMPrinter entered)
						"ProjectStructure<FinanceEnterpriseGroup.EnterpriseProjectStructure>IDMPrinterRequiredForInvoiceIssueMethodPrint"				
				
				for each ProjectContractInvoiceWithGeneratedDocRel
					invoke UploadProjectContractInvoiceDocumentInIDM each
			else
				initialize
				
		ProjectContractInvoiceReversalTemplate
			if (UseIDM)
				constraint (ProjectContractInvoiceReversalTemplate.IDMDocumentType.ProjectContractInvoiceReversal)
					"InvalidTemplate"
					
				if (ProjectFundingSource set.InvoiceIssueMethod.Print)
					constraint (FinanceEnterpriseGroup.EnterpriseProjectStructure.IDMPrinter entered)
						"ProjectStructure<FinanceEnterpriseGroup.EnterpriseProjectStructure>IDMPrinterRequiredForInvoiceIssueMethodPrint"				
				
				for each ProjectContractInvoiceWithGeneratedDocRel
					invoke UploadProjectContractInvoiceDocumentInIDM each
			else
				initialize
#endif
		AllocateExpenditures
			constraint (!FrontEndSplits)
				"AllocateExpendituresInvalidWhenFrontEndSplitEnabled"

		FrontEndSplits
			constraint (FinanceEnterpriseGroup.FrontEndSplits)
				"FinanceEnterpriseGroupMustHaveFrontEndSplitEnabled"
			if (FrontEndSplits)
				for each ProjectFundingSource set
					if (each.RevenueCodeBlockOption.PartialStructure)
						if (FinanceEnterpriseGroup.FundDimension.Dimension1)
							constraint (each.RevenuePartialAccount.FinanceDimension1 entered)
								"<FinanceEnterpriseGroup.FinanceDimension1Label>RequiredForPartialRevenueFinanceStructureOn<FinanceEnterpriseGroup.FinanceDimension2Label>_<each.FinanceDimension2>"
						else
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							constraint (each.RevenuePartialAccount.AccountingUnit entered)
								"<FinanceEnterpriseGroup.AccountingUnitLabel>RequiredForPartialRevenueFinanceStructureOn<FinanceEnterpriseGroup.FinanceDimension2Label>_<each.FinanceDimension2>"
					if (each.RevenueCodeBlockOption.None)
						if (FinanceEnterpriseGroup.FundDimension.Dimension1)
							constraint (each.RevenuePartialAccount.FinanceDimension1 entered
							or          each.RevenueFullAccount.FinanceDimension1 entered)
								"<FinanceEnterpriseGroup.FinanceDimension1Label>RequiredOn<FinanceEnterpriseGroup.FinanceDimension2Label>_<each.FinanceDimension2>"
						else
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							constraint (each.RevenuePartialAccount.AccountingUnit entered
							or          each.RevenueFullAccount.AccountingUnit entered)
								"<FinanceEnterpriseGroup.AccountingUnitLabel>RequiredOn<FinanceEnterpriseGroup.FinanceDimension2Label>_<each.FinanceDimension2>"








		DeferAndHoldRemainder
			if (DeferAndHoldRemainder changed)
				if (DeferAndHoldRemainder)
					RemainderOption = 2
					DeferAndHoldRemainder = false
				else
					RemainderOption = 0

		RemainderOption
			if (RemainderOption entered
			or  RemainderOption changed)
				DeferAndHoldRemainder = false
				
		SingleProjectInvoice
			constraint (!BillingMethod.Milestone
			and         !BillingMethod.Installment)
				"SingleProjectInvoicingOptionInvalidForMilestoneAndInstallmentBillingMethods"

		SingleProjectRevenue
			constraint (!RevenueMethod.Milestone
			and         !RevenueMethod.PercentageOfCompletion
			and         !RevenueMethod.Installment)
				"SingleProjectRevenueRecognitionInvalidForMilestone,PercentageOfCompletion,AndInstallmentRevenueRecognitionMethods"

	Actions
	
	  	TriggerProjectContract is an Instance Action  
	  	 	restricted
			Action Rules
				if (FinanceEnterpriseGroup.BODTrigger)
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							increment bod id.VariationID
							trigger "ProjectContractService" PA service
								resume on error
								title is "EG:<FinanceEnterpriseGroup>PC:<ProjectContract>"
								Criteria
									FinanceEnterpriseGroup
									ProjectContract
								Variables
									ActionCode
										variable name is ActionCode
									include persistent fields from ProjectContract
									LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
										variable name is CurrentTimeStamp

																																		





	
		Create is a Create Action
			restricted
			Exit Rules
				ActionCode = ActionCode.Create
				invoke TriggerProjectContract
				invoke UpdateNoRules PostingProjectsRel







		Update is an Update Action
			Action Rules
				if (Scenario entered)
					if (Scenario changed)

						for each AllPostingProjectsRel						
							LocalProject = each.Project
							LocalProjectBudgetAmount = sum PostingProjectGeneralLedgerTotalsRel.NetProjectAmount						
							LocalContractBudgetAmount += LocalProjectBudgetAmount
							invoke Update each
								invoked.BudgetAmount = LocalProjectBudgetAmount
						if (FrontEndSplitsEnabled)	
							for each ActiveProjectFundingSourceRel
								LocalFinanceDimension2 = each.FinanceDimension2
								initialize LocalFundingSourceBudgetAmount

								for each AllPostingProjectsRel								
									LocalProject = each.Project							
									LocalFundingSourceBudgetAmount += sum PostingFundingSourceGeneralLedgerTotalsRel.NetProjectAmount						
								invoke Update each
									invoked.BudgetAmount = LocalFundingSourceBudgetAmount
				else
				if (old Scenario entered)
					for each PostingProjectsRel	
						invoke Update each
							invoked.BudgetAmount = blank
					if (FrontEndSplitsEnabled)							
						for each ActiveProjectFundingSourceRel		
							invoke Update each
								invoked.BudgetAmount = blank
				ActionCode = ActionCode.Update
				invoke TriggerProjectContract






			Exit Rules
				if (Scenario entered)
					if (Scenario changed)
						ProjectContractBudgetAmount = LocalContractBudgetAmount
				else
					ProjectContractBudgetAmount = blank	

#ifdef module integration					
		SendProjectContractNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is SyncProjectContractXMLBOD
					bod type is "Sync.ProjectContract"
					document id is  DerivedDocumentID
					variation id is DerivedVariationID
					accounting entity is DerivedaccountingEntity
		
		TriggerProjectContractNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "ProjectContract"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "ProjectContract"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmMainUserTemplate 		= "IONSyncProjectContract_ProjectContract_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun					= "ProjectContract"
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.BODAccountingEntity		= DerivedaccountingEntity
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Reference1				= ProjectContract
							initialize invoked.Error			
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.BODAccountingEntity		= DerivedaccountingEntity
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Reference1				= ProjectContract
							initialize invoked.Error			
							initialize invoked.ErrorMessage 
							
					invoke SendProjectContractNativeLPL
						resume on error
		                    Error            								= true
		                    LocalErrormessage     							= error message
		                    
		            if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= LocalErrormessage 
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedbodID
							invoked.BODXML								= SyncProjectContractXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODID									= DerivedbodID
							invoked.BODXML									= SyncProjectContractXMLBOD						
#endif

		RefreshBudgetTotals is an Instance Action

			valid when (Scenario entered)
			completion message is "<CompletionMessage>"			
			Action Rules
				for each AllPostingProjectsRel

					LocalProject = each.Project
					LocalProjectBudgetAmount = sum PostingProjectGeneralLedgerTotalsRel.NetProjectAmount						
					LocalContractBudgetAmount += LocalProjectBudgetAmount
					invoke Update each
						invoked.BudgetAmount = LocalProjectBudgetAmount
				if (FrontEndSplitsEnabled)	
					for each ActiveProjectFundingSourceRel
						LocalFinanceDimension2 = each.FinanceDimension2
						initialize LocalFundingSourceBudgetAmount

						for each AllPostingProjectsRel						
							LocalProject = each.Project							
							LocalFundingSourceBudgetAmount += sum PostingFundingSourceGeneralLedgerTotalsRel.NetProjectAmount						
						invoke Update each
							invoked.BudgetAmount = LocalFundingSourceBudgetAmount
				CompletionMessage = RefreshBudgetTotalsMF							
			Exit Rules
				ProjectContractBudgetAmount = LocalContractBudgetAmount

		Delete is a Delete Action	
			Action Rules
				constraint (ProjectFundingSource set not exists)
					"CannotDelete;<FinanceEnterpriseGroup.FinanceDimension2Label>Exists"
			Exit Rules
				invoke UpdateNoRules ProjectContract.Project
					invoked.Contract = false
				invoke UpdateNoRules PostingProjectsRel

		CopyContract is an Instance Action
			Parameters
				NewContract				is AlphaUpper size 22
				NewDescription			is like Description
				NewProjectDateRange		is a ProjectDateRange
			Parameter Rules
				NewContract
					required
				NewDescription
					required
					initial value is Description + "_Copy"
				NewProjectDateRange
					initial value is ProjectContract.Project.ProjectDateRange
					default to ProjectContract.Project.ProjectDateRange	
			Action Rules
				invoke CopySummaryProject ProjectContract.Project
					invoked.NewProject			= NewContract
					invoked.NewDescription		= NewDescription
					invoked.NewProjectDateRange	= NewProjectDateRange
					invoked.CopyContract		= true
					
		RecognizeContractRevenue is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				DateRange
				ThroughDate					is Date
        		SelectionGroup				is a GLTransactionDetail group
        		FundingSourceDate			is Date
        		RevenueDate					is Date
				Journalize					is Boolean
				PostingDate					is Date
				BillingGroup				is a ProjectBillingGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				FundingSourceDate
					required
				RevenueDate
					required
				PostingDate
					if (Journalize)
						required
					else
						cannot be entered				
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
			Sort Order
				FinanceEnterpriseGroup
				Active
				RevenueRecognition
				ProjectContract
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    SeparateUnrecognizedAmountsExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered)
        		and   !RevenueInProgress
        		and   !InvoicingInProgress)
        	Action Rules
        		Instance Rules
					LocalFundingSourceDate	= FundingSourceDate
					LocalBillingGroup		= BillingGroup
					if (RevenueFundingSourceRel exists)
	        			ErrorFound = false
	        			invoke RecognizeRevenue in background


	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message        				
	        				invoked.DateRange			= DateRange
	        				invoked.ThroughDate			= ThroughDate
	        				invoked.SelectionGroup		= SelectionGroup
	        				invoked.FundingSourceDate	= FundingSourceDate
	        				invoked.RevenueDate			= RevenueDate
							invoked.Journalize			= Journalize
							invoked.PostingDate			= PostingDate
							invoked.BillingGroup		= BillingGroup
	        			if (ErrorFound)
	        				ErrorMessage = LocalErrorMessage
	        			else
	        				initialize ErrorMessage

		SetRevenueInProgressFlag is an Instance Action
			restricted
			Action Rules
				RevenueInProgress = true
				LastRunGroup	  = LocalRunGroup

		SetRevenueComplete is an Instance Action
			restricted
			Action Rules
				RevenueInProgress = false

		RecognizeRevenue is an Instance Action
			valid when (SeparateUnrecognizedAmountsExist)
			disable multiple instance selection
			completion message is "<CompletionMessage>"			
			run in background
			synchronized on untranslatable:"RecognizeRevenue<FinanceEnterpriseGroup>_<ProjectContract>"
			Parameters
				DateRange
				ThroughDate			is Date
        		SelectionGroup		is a GLTransactionDetail group
        		FundingSourceDate	is Date
        		RevenueDate			is Date
				Journalize			is Boolean
				PostingDate			is Date
				SummaryProject		is a Project
				FundingSource		is a FinanceDimension2
				Forecast			is Boolean
				BillingGroup		is a ProjectBillingGroup
			Parameter Rules
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
					constraint (!RevenueInProgress)
						"ContractRevenueRecognitionInProgress"
					constraint (!InvoicingInProgress)
						"ContractInvoicingInProgress"
				FundingSourceDate
					required
					LocalFundingSourceDate	= FundingSourceDate
					LocalBillingGroup		= BillingGroup
					constraint (RevenueFundingSourceRel exists)
						"NoActiveFundingSourcesExistForEnteredFundingSourceDateAndBillingGroup"
					if (!Forecast)
						constraint (OpenInvoicesRel not exists)
							"MustJournalizeOpenInvoicesBeforeRecognizingNewRevenue"
				RevenueDate
					required
					LocalThroughDate = RevenueDate
				PostingDate
					if (Journalize)
						required
						LocalAccountingEntity = first ProjectFundingSource set.RevenueFullAccount.ToAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						cannot be entered
				SummaryProject
					if (SummaryProject.ProjectType.Summary)
						LocalSummaryProject = SummaryProject
						constraint (SummaryInContractRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"
						constraint (SummaryHasPostingsRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustContainPostingDescendants"
					if (SummaryProject.ProjectType.Posting)
						LocalSummaryProject = ProjectContract
						LocalProject		= SummaryProject
						constraint (PostingInSummaryRel exists)
							"Posting<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"
				FundingSource
					if (FundingSource entered)
						LocalFinanceDimension2 = FundingSource
						constraint (ProjectFundingSourceRel exists)
							"ProjectFundingSourceDoesNotExistForContract"
						constraint (ProjectFundingSourceRel.Active)
							"ProjectFundingSourceIsInactive"
						constraint (FundingSource.Active)
							"FinanceDimension2IsInactive"
						constraint (FundingSourceDate within FundingSource.DateRange)
							"FundingSourceNotValidForEnteredFundingSourceDate"
			Action Rules
				if  (SingleProjectRevenue
				and (SummaryProject not entered
				or   SummaryProject.ProjectType.Summary)
				and !Forecast)
					invoke RecognizeSingleProjectRevenue ProjectShadow in background
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
						invoked.DateRange				  = DateRange
						invoked.ThroughDate				  = ThroughDate
		        		invoked.SelectionGroup			  = SelectionGroup
		        		invoked.FundingSourceDate		  = FundingSourceDate
						invoked.RevenueDate				  = RevenueDate
						invoked.Journalize				  = Journalize
						invoked.PostingDate				  = PostingDate
						invoked.FundingSource			  = FundingSource
						invoked.BillingGroup			  = BillingGroup
						invoked.PrmSummaryProject		  = SummaryProject
				else
					invoke CalculateRevenue
						invoked.DateRange			= DateRange
						invoked.ThroughDate			= ThroughDate
		        		invoked.SelectionGroup		= SelectionGroup
		        		invoked.FundingSourceDate	= FundingSourceDate
						invoked.RevenueDate			= RevenueDate
						invoked.Journalize			= Journalize
						invoked.PostingDate			= PostingDate
						invoked.SummaryProject		= SummaryProject
						invoked.FundingSource		= FundingSource
						invoked.Forecast			= Forecast
						invoked.BillingGroup		= BillingGroup

		CalculateRevenue is an Instance Action
			restricted
			completion message is "<CompletionMessage>"			
			run in background
			synchronized on untranslatable:"RecognizeRevenue<FinanceEnterpriseGroup>_<ProjectContract>"
			Parameters
				DateRange
				ThroughDate			is Date
        		SelectionGroup		is a GLTransactionDetail group
        		FundingSourceDate	is Date
        		RevenueDate			is Date
				Journalize			is Boolean
				PostingDate			is Date
				SummaryProject		is a Project
				FundingSource		is a FinanceDimension2
				Forecast			is Boolean
				BillingGroup		is a ProjectBillingGroup

			Local Fields
				NewProjectContractInvoice	is a ProjectContractInvoice view			
				LocalAmount					is like InternationalAmount
				LocalTransAmount			is like InternationalAmount
				LocalUnits					is like UnitsAmount
				LocalRemainder				is like InternationalAmount				
				LocalRemainderUnits			is like UnitsAmount
				LocalMaximum				is like InternationalAmount
				LocalProjectMaximum			is like InternationalAmount
				LocalAvailableRetainer		is like InternationalAmount
				LocalUnavailableRetainer	is like InternationalAmount
				LocalProjectRetainer		is like InternationalAmount
				LocalContractMaximum		is like InternationalAmount				
				FundingSourceTable
					do not save in checkpoint				
				TransCounter				is Numeric size 8
				SourceCounter				is Numeric size 3
				FundingSourceCount			is Numeric size 3
				TransactionCount			is like SequenceNumber
				LocalBilledAmount			is like InternationalAmount
				LocalAllowanceAmount		is like InternationalAmount
				CanBeBilled					is Boolean
				CheckLimits					is Boolean
        		LocalBillableAmount			is like InternationalAmount
				CreateCount					is Numeric size 5
				TransactionsFound			is Boolean				
				InvoiceBillableAmount		is like InternationalAmount
				LocalUnlimitedAmount		is like InternationalAmount
				FeeCounter					is Numeric size 2
				FeeTable
					do not save in checkpoint				
				FeeCount					is Numeric size 2
				LocalFeesMaximum			is like InternationalAmount
				LocalBilledFees				is like InternationalAmount
				FeeAmount					is like InternationalAmount
				LocalPassThrough			is like InternationalAmount
				LocalBaseCounter			is Numeric size 8
				AbsoluteUnits				is like UnitsAmount
				PartialBilledAmount			is like InternationalAmount
				PartialBilledBillableAmount	is like InternationalAmount
				PartialBilledUnits			is like UnitsAmount
				FeeMaxed					is Boolean
				LocalFundingGroup			is Numeric size 2
				
			Action Rules
				if (Forecast)
					Journalize = false
					CompletionMessage	= RevenueForecastMF
				else					
					CompletionMessage	= RevenueCreatedMF
	            LocalRunGroup			= LastRunGroup + 1
				invoke SetRevenueInProgressFlag
		        if (LastProjectContractRunGroupRel not exists)
		        	invoke Create LastProjectContractRunGroupRel
				LocalFundingSourceDate	= FundingSourceDate
				LocalBillingGroup		= BillingGroup
				LocalThroughDate		= RevenueDate
				LocalInvoiceDate		= RevenueDate
				LocalDateRange			= DateRange
				LocalSelectionGroup		= SelectionGroup
				LocalContractMaximum	= ContractAmount - TotalRecognizedAmount
				if (MaximumFees entered)
					LocalFeesMaximum	= MaximumFees - TotalRecognizedFees
				if (DeferAndHoldRemainder
				or  RemainderOption entered)
					CheckLimits			= false
				else
					CheckLimits			= true
				LocalRoundTo			= DerivedRoundTo
				LocalType				= 2
				LocalFundingSource		= FundingSource
				LocalBillingGroup		= BillingGroup
				for each RevenueFundingSourceRel
					if (each.Percent = 1)
						CheckLimits = false
					SourceCounter += 1
					FundingSourceTable.FundingSource[SourceCounter].Source				  = each.FinanceDimension2
					FundingSourceTable.FundingSource[SourceCounter].Percent				  = each.Percent
					FundingSourceTable.FundingSource[SourceCounter].Maximum				  = each.FundedAmount - each.TotalRecognizedAmount
					FundingSourceTable.FundingSource[SourceCounter].PostingProject 		  = each.PostingProject
					FundingSourceTable.FundingSource[SourceCounter].TotalRecognizedAmount = each.TotalRecognizedAmount
					FundingSourceTable.FundingSource[SourceCounter].FundingGroup		  = each.FundingGroup
				FundingSourceCount	= SourceCounter
				commit transaction
				
				if (RevenueMethod.Milestone
				or  RevenueMethod.PercentageOfCompletion
				or  RevenueMethod.Installment
				or  ProjectContractMilestonesRel exists)
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
						for each ProjectContractMilestoneRel
							if (each.PostingProject entered)
								LocalProject = each.PostingProject
							else
								LocalProject = FundingSourceTable.FundingSource[SourceCounter].PostingProject
							if  (LocalProject.IsRevenueRecognition
							and  ValidProjectDates
							and (SummaryProject not entered
							or  (SummaryProject.ProjectType.Summary
							and  PostingInSummaryRel exists)
							or  (SummaryProject.ProjectType.Posting
							and  LocalProject = SummaryProject)))
								LocalAmount = each.Amount
								if (LocalProject.BillingMaximum entered)
									LocalProjectMaximum = LocalProject.RemainingRevenue
									if (LocalAmount > LocalProjectMaximum)
										LocalAmount = LocalProjectMaximum
								InvoiceBillableAmount = LocalAmount
								LocalBillableAmount += each.Amount
								LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].Maximum - FundingSourceTable.FundingSource[SourceCounter].BilledAmount - FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
								if (LocalAmount > LocalContractMaximum - LocalBilledAmount)
									LocalAmount = LocalContractMaximum - LocalBilledAmount
								if (LocalAmount > LocalMaximum)
									LocalAmount = LocalMaximum
								if (LocalAmount = each.Amount)
									FundingSourceTable.FundingSource[SourceCounter].BilledAmount += LocalAmount
									FundingSourceTable.FundingSource[SourceCounter].Billed = true
									LocalBilledAmount += LocalAmount
									FundingSourceTable.FundingSource[SourceCounter].TotalRecognizedAmount += LocalAmount
									CreateCount += 1
									FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
									if (!Forecast)
										include CreateRevenue
										invoke Create ProjectContractInvoiceLine
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.ProjectContract 		= ProjectContract
											invoked.FinanceDimension2 		= LocalFinanceDimension2
											invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
											invoked.Amount					= LocalAmount
											invoked.ProjectContractMilestone = each.ProjectContractMilestone									
											invoked.Project					= LocalProject
											invoked.BillableAmount			= InvoiceBillableAmount
										invoke UpdateStatus each
											invoked.PrmStatus = 4
				if (RevenueMethod.FullAccrual
				or  RevenueProjectOverridesRel exists)
					include BuildFeesTable
					if (SummaryProject.ProjectType.Posting)
						LocalSingleProject = SummaryProject
					else
						initialize LocalSingleProject
					for each RevenueProjectShadowCalculationRel
						LocalProject		= each.Project
						if (LocalProject.ProjectBillingOverride set exists)
							LocalOverridesExist = true
						else
							LocalOverridesExist = false
						if  (ValidProjectDates
						and (RevenueMethod.FullAccrual
						or   LocalProject.BillingMethod entered
						or   LocalProject.BillingOverridesExist)
						and  (SummaryProject not entered
						or   (SummaryProject.ProjectType.Summary
						and   PostingInSummaryRel exists)
						or   (SummaryProject.ProjectType.Posting
						and   LocalProject = SummaryProject)))
							for each ProjectContractPartialRevenueRel
								LocalGLTransactionDetail = each.GLTransactionDetail
								if  ((LocalGLTransactionDetail within LocalSelectionGroup
								or    LocalSelectionGroup not entered)
								and ((FrontEndSplitsEnabled
								and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
								or   !FrontEndSplitsEnabled)
								and  (LocalGLTransactionDetail.TransactionDate <= ThroughDate
								or    ThroughDate not entered)
								and  (LocalGLTransactionDetail.RelatedJournalTransaction(GeneralLedgerTransaction).PostingDate within DateRange))
									include SetLocalProjectCodeBlock
									if ((!BillingMethod.Milestone
									and  !BillingMethod.Installment)
									or   LocalProject.BillingMethod entered
									or   ProjectBillingOverrideRel.BillingMethod entered)
										PartialBilledAmount = each.TotalBilledAmount
										PartialBilledBillableAmount = each.TotalBilledBillableAmount
										PartialBilledUnits = each.TotalBilledUnits
										if (!Forecast)
											invoke Purge each
										include LoadInvoiceTransaction
							for each GeneralLedgerTransactionRel
								if ((FrontEndSplitsEnabled
								and  each.FinanceCodeBlock.FinanceDimension2 entered)
								or  !FrontEndSplitsEnabled)
									for each each.GLTransactionDetailRevenueRel
										if (each.TransactionDate <= ThroughDate
										or  ThroughDate not entered)
											LocalGLTransactionDetail = each.GLTransactionDetail
											if (LocalGLTransactionDetail within LocalSelectionGroup
											or  LocalSelectionGroup not entered)
												include SetLocalProjectCodeBlock
												if (RevenueMethod.FullAccrual
												or  LocalProject.BillingMethod entered
												or  ProjectBillingOverrideRel.BillingMethod entered)
													initialize PartialBilledAmount
													initialize PartialBilledBillableAmount
													initialize PartialBilledUnits
													include LoadInvoiceTransaction
					FeeMaxed = false
					for each ProjectInvoiceTransactionRel
						initialize LocalFundingGroup
						LocalInvoiceTransaction = each.InvoiceTransaction
						initialize LocalInvoiceTransaction.NewAmount
						initialize LocalInvoiceTransaction.NewBillableAmount						
						LocalGLTransactionDetail = LocalInvoiceTransaction.GLTransactionDetail
						LocalProject = LocalGLTransactionDetail.FinanceCodeBlock.Project
						LocalOverridesExist = LocalInvoiceTransaction.OverridesExist
						if (LocalInvoiceTransaction.FeeCode not entered)
							initialize SourceCounter
							while (SourceCounter < FundingSourceCount)
								SourceCounter += 1
								initialize FundingSourceTable.FundingSource[SourceCounter].FeesAllowed
						if (LocalInvoiceTransaction.Amount < 0)
							LocalBillableAmount += LocalInvoiceTransaction.BillableAmount
							initialize SourceCounter
							while (SourceCounter < FundingSourceCount)
								SourceCounter += 1
								LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
								if  ((FrontEndSplitsEnabled
								and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
								or   !FrontEndSplitsEnabled)							
									include CalculateNegativeAmount
									include SetLocalProjectCodeBlock
									include LoadExpenseTransaction
									include GenerateRevenueLine
						else
							CanBeBilled = true
							include LimitCheck
							if (CanBeBilled)
								initialize SourceCounter
								while (SourceCounter < FundingSourceCount)
									SourceCounter += 1
									LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
									if  ((FrontEndSplitsEnabled
									and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
									or   !FrontEndSplitsEnabled)
										include CalculatePositiveAmount
										include SetLocalProjectCodeBlock
										include LoadExpenseTransaction
										include GenerateRevenueLine
						if (!Forecast)
							if  (LocalInvoiceTransaction.Amount != LocalInvoiceTransaction.BilledAmount
							and (LocalInvoiceTransaction.BilledAmount entered
							or   LocalInvoiceTransaction.FromPartial)
							and  LocalInvoiceTransaction.FeeCode not entered
							and (LocalInvoiceTransaction.Limited
							or   DeferAndHoldRemainder
							or   RemainderOption entered))
								invoke Create ProjectContractPartialTransaction
									fill in fields from this instance
									invoked.GLTransactionDetail = LocalGLTransactionDetail
									invoked.RecordType			= 1
									if (DeferAndHoldRemainder
									or  RemainderOption.DeferAndHold)
										invoked.Hold = true	

					FeeMaxed = false
					for each ProjectInvoiceTransactionFeeRel
						initialize LocalFundingGroup
						LocalInvoiceTransaction = each.InvoiceTransaction
						LocalGLTransactionDetail = LocalInvoiceTransaction.GLTransactionDetail
						initialize LocalInvoiceTransaction.NewAmount
						initialize LocalInvoiceTransaction.NewBillableAmount						
						LocalBillableAmount += LocalInvoiceTransaction.BillableAmount
						LocalProject = LocalGLTransactionDetail.FinanceCodeBlock.Project
						LocalOverridesExist = LocalInvoiceTransaction.OverridesExist
						initialize SourceCounter
						while (SourceCounter < FundingSourceCount)
							SourceCounter += 1
							LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
							if  ((FrontEndSplitsEnabled
							and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
							or   !FrontEndSplitsEnabled)
								include CalculateNegativeAmount
								include SetLocalProjectCodeBlock
								include LoadExpenseTransaction
								include GenerateRevenueLine

				if (!Forecast)
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
						LocalProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						if (not FundingSourceTable.FundingSource[SourceCounter].Billed)
							invoke Delete NewProjectContractInvoiceRel
						else
							include CreateRevenueAllowanceLine
							invoke FastUpdate NewProjectContractInvoiceRel
								invoked.TotalInvoiceAmount	= FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount
								invoked.TotalUnits			= FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits
								invoked.TotalFees			= FundingSourceTable.FundingSource[SourceCounter].InvoiceFees
								invoked.TotalAllowance		= FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance
								invoked.TotalPassThrough	= FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough
								invoked.Status				= 0
							LocalAmount = (FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount - FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance - FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough)
							invoke UpdateTotalRecognizedAmount ProjectFundingSourceRel
								invoked.RecognizedAmount		= LocalAmount
								invoked.RecognizedAllowance		= FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance
								invoked.RecognizedPassThrough	= FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough
				else
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						if (FundingSourceTable.FundingSource[SourceCounter].Source entered)
							LocalFinanceDimension2	= FundingSourceTable.FundingSource[SourceCounter].Source
#ifndef property federal							
							if (ProjectFundingSourceRel.AllowancePercent entered)
								LocalAmount = FundingSourceTable.FundingSource[SourceCounter].BilledAmount * ProjectFundingSourceRel.AllowancePercent
								round LocalAmount to nearest LocalRoundTo
							else
								initialize LocalAmount							
#endif
#ifdef property federal
							initialize LocalAmount
#endif
							invoke UpdateForecast ProjectFundingSourceRel
								invoked.PrmAmount	= FundingSourceTable.FundingSource[SourceCounter].BilledAmount + FundingSourceTable.FundingSource[SourceCounter].PassThroughAmount + LocalAmount
								invoked.PrmDate		= RevenueDate
								invoked.IsRevenue	= true
				if (!Forecast)
					if (CreateCount > 0
					or  SingleProjectRevenue)
						initialize InvoicingMessage
					else
						if (!TransactionsFound)
							InvoicingMessage = NoRevenueTransactionsFoundMF
						else
							InvoicingMessage = NoRevenueCreatedMF
					initialize ErrorMessage
				invoke SetRevenueComplete
			Exit Rules	
				LocalRunGroup = LastRunGroup
				if (!Forecast)
					if (CreateCount > 0)
						invoke UpdateTotalRecognizedAmount
							invoked.RecognizedAmount 		= LocalBilledAmount
							invoked.RecognizedFees			= LocalBilledFees
							invoked.RecognizedAllowance		= LocalAllowanceAmount
							invoked.RecognizedPassThrough	= LocalPassThrough
						invoke Update LastProjectContractRunGroupRel
							invoked.BilledAmount		= LocalBilledAmount
							invoked.BillableAmount		= LocalBillableAmount
							invoked.DateRange			= DateRange
							invoked.Type				= 1
						if  (Journalize)
							invoke JournalizeRevenue in background
								invoked.PrmRunGroup	= LocalRunGroup
								invoked.PostingDate	= PostingDate
					else
						if (ProjectInvoiceTransactionRel not exists)
							invoke Delete LastProjectContractRunGroupRel
							LastRunGroup -= 1
						CompletionMessage = NoRevenueCreatedMF
						if (!TransactionsFound)
							CompletionMessage = NoRevenueTransactionsFoundMF
				if (ProjectInvoiceTransactionRel exists)
					invoke PurgeAll ProjectInvoiceTransaction
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmProjectContract			= ProjectContract
						invoked.PrmProjectContractRunGroup	= LocalRunGroup
						invoked.Forecast					= Forecast

		GenerateContractInvoices is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				DateRange
				ThroughDate					is Date
        		SelectionGroup				is a GLTransactionDetail group
        		FundingSourceDate			is Date
				InvoiceDate					is Date
				ApplyRetainers				is Boolean
				InvoiceMaximum				is like InternationalAmount
					precision is Currency.NumberOfDecimals	
		    	PrintStatus			    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
		    	BillingGroup				is a ProjectBillingGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				FundingSourceDate
					required
				InvoiceDate
					required
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
			Sort Order
				FinanceEnterpriseGroup
				Active
				ProjectContract
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    UnbilledAmountsExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered)
        		and   !InvoicingInProgress
        		and   !RevenueInProgress)
        	Action Rules
        		Instance Rules
					LocalFundingSourceDate	= FundingSourceDate
					LocalBillingGroup		= BillingGroup
					if (BillingFundingSourceRel exists)
	        			ErrorFound = false
	        			invoke GenerateInvoices in background


	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message        				
	        				invoked.DateRange				= DateRange
	        				invoked.ThroughDate				= ThroughDate
	        				invoked.SelectionGroup			= SelectionGroup
	        				invoked.FundingSourceDate		= FundingSourceDate
	        				invoked.InvoiceDate				= InvoiceDate
	        				invoked.ApplyRetainers			= ApplyRetainers
	        				invoked.InvoiceMaximum			= InvoiceMaximum
							invoked.PrintStatus				= PrintStatus
							invoked.BillingGroup			= BillingGroup
	        			if (ErrorFound)
	        				ErrorMessage = LocalErrorMessage
	        			else
	        				initialize ErrorMessage

		SetInvoicingInProgressFlag is an Instance Action
			restricted
			Action Rules
				InvoicingInProgress	= true
				LastRunGroup		= LocalRunGroup

		SetInvoicingComplete is an Instance Action
			restricted
			Action Rules
				InvoicingInProgress = false

		GenerateInvoices is an Instance Action
			valid when (Active)

			disable multiple instance selection
			completion message is "<CompletionMessage>"
			run in background
			synchronized on untranslatable:"GenerateInvoices<FinanceEnterpriseGroup>_<ProjectContract>"
			Parameters
				DateRange
				ThroughDate				is Date
        		SelectionGroup			is a GLTransactionDetail group
        		FundingSourceDate		is Date
				InvoiceDate				is Date
				AppendToRunGroup		is a ProjectContractRunGroup
					default label is "AppendToExistingInvoiceGroup"
				ApplyRetainers			is Boolean
				SummaryProject			is a Project
				FundingSource			is a FinanceDimension2
				InvoiceMaximum			is like InternationalAmount
					precision is Currency.NumberOfDecimals				
		    	PrintStatus		    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				Forecast				is Boolean
				BillingGroup			is a ProjectBillingGroup 

			Parameter Rules
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
					constraint (!InvoicingInProgress)
						"ContractInvoicingInProgress"
					constraint (!RevenueInProgress)
						"ContractRevenueRecognitionInProgress"
				FundingSourceDate
					required
					LocalFundingSourceDate	= FundingSourceDate
					LocalBillingGroup		= BillingGroup
					constraint (BillingFundingSourceRel exists)
						"NoActiveFundingSourcesExistForEnteredFundingSourceDateAndBillingGroup"
					if (!Forecast)
						constraint (NoOpenOrJournalizeRevenueSubmittedExist)
							"CannotGenerateInvoices;_DraftRevenueRecognitionOrSubmittedForApprovalRevenueExists"
				InvoiceDate
					if (AppendToRunGroup entered)
						cannot be entered
							"InvoiceDateWillDefaultFromAppendedInvoiceGroup"
					else
						required
					LocalThroughDate = InvoiceDate
				AppendToRunGroup
					LocalRunGroup	= AppendToRunGroup
					constraint (NonRetainerCreatedSubmittedInvoicesRel exists)
						"NoUnprocessedNonRetainerInvoicesExistForInvoiceGroup"
					if (AppendToRunGroup entered)
						InvoiceDate = first NonRetainerCreatedSubmittedInvoicesRel.InvoiceDate
						LocalThroughDate = InvoiceDate
						for each NonRetainerCreatedSubmittedInvoicesRel
							constraint (BillingGroup = each.BillingGroup)
								"CannotAppendToRunGroup;_BillingGroupMustBe<each.BillingGroup>"
				SummaryProject
					if (SummaryProject.ProjectType.Summary)
						LocalSummaryProject = SummaryProject
						constraint (SummaryInContractRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"
						constraint (SummaryHasPostingsRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustContainPostingDescendants"
					if (SummaryProject.ProjectType.Posting)
						LocalSummaryProject = ProjectContract
						LocalProject		= SummaryProject
						constraint (PostingInSummaryRel exists)
							"Posting<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"
				FundingSource
					if (FundingSource entered)
						LocalFinanceDimension2 = FundingSource
						constraint (ProjectFundingSourceRel exists)
							"ProjectFundingSourceDoesNotExistForContract"
						constraint (ProjectFundingSourceRel.Active)
							"ProjectFundingSourceIsInactive"
						constraint (FundingSource.Active)
							"FinanceDimension2IsInactive"
						constraint (FundingSourceDate within FundingSource.DateRange)
							"FundingSourceNotValidForEnteredFundingSourceDate"
				InvoiceMaximum


					constraint (InvoiceMaximum <= ContractAmount - TotalBilledAmount)
						"InvoiceMaximumCannotExceedContractRemainingFundedBalance"
			Action Rules
				if  (SingleProjectInvoice
				and (SummaryProject not entered
				or   SummaryProject.ProjectType.Summary)
				and !Forecast)
					invoke GenerateSingleProjectInvoices ProjectShadow in background
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
						invoked.DateRange				  = DateRange
						invoked.ThroughDate				  = ThroughDate
		        		invoked.SelectionGroup			  = SelectionGroup
		        		invoked.FundingSourceDate		  = FundingSourceDate
						invoked.InvoiceDate				  = InvoiceDate
						invoked.ApplyRetainers			  = ApplyRetainers
						invoked.FundingSource			  = FundingSource
						invoked.InvoiceMaximum			  = InvoiceMaximum
				    	invoked.PrintStatus				  = PrintStatus
						invoked.BillingGroup			  = BillingGroup
						invoked.PrmSummaryProject		  = SummaryProject
				else
					invoke CalculateInvoices
						invoked.DateRange			= DateRange
						invoked.ThroughDate			= ThroughDate
		        		invoked.SelectionGroup		= SelectionGroup
		        		invoked.FundingSourceDate	= FundingSourceDate
						invoked.InvoiceDate			= InvoiceDate
						invoked.AppendToRunGroup	= AppendToRunGroup
						invoked.ApplyRetainers		= ApplyRetainers
						invoked.SummaryProject		= SummaryProject
						invoked.FundingSource		= FundingSource
						invoked.InvoiceMaximum		= InvoiceMaximum
				    	invoked.PrintStatus			= PrintStatus
						invoked.Forecast			= Forecast
						invoked.BillingGroup		= BillingGroup
			
		CalculateInvoices is an Instance Action
			restricted
			completion message is "<CompletionMessage>"
			run in background
			synchronized on untranslatable:"GenerateInvoices<FinanceEnterpriseGroup>_<ProjectContract>"
			Parameters
				DateRange
				ThroughDate				is Date
        		SelectionGroup			is a GLTransactionDetail group
        		FundingSourceDate		is Date
				InvoiceDate				is Date
				AppendToRunGroup		is a ProjectContractRunGroup
				ApplyRetainers			is Boolean
				SummaryProject			is a Project
				FundingSource			is a FinanceDimension2
				InvoiceMaximum			is like InternationalAmount
					precision is Currency.NumberOfDecimals				
		    	PrintStatus		    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				Forecast				is Boolean
				BillingGroup			is a ProjectBillingGroup

			Local Fields
				NewProjectContractInvoice	is a ProjectContractInvoice view
				NewProjectContractInvoiceLine	is a ProjectContractInvoiceLine view
				LocalAmount					is like InternationalAmount
				LocalTransAmount			is like InternationalAmount
				LocalRetainedAmount			is like InternationalAmount
				LocalTaxAmount				is like InternationalAmount
				LocalTaxRate                is Percent size 7.5
				LocalUnits					is like UnitsAmount
				LocalRemainder				is like InternationalAmount
				LocalRemainderUnits			is like UnitsAmount
				LocalMaximum				is like InternationalAmount
				LocalProjectMaximum			is like InternationalAmount
				LocalAvailableRetainer		is like InternationalAmount
				LocalUnavailableRetainer	is like InternationalAmount
				LocalProjectRetainer		is like InternationalAmount
				LocalContractMaximum		is like InternationalAmount				
				FundingSourceTable
					do not save in checkpoint				
				TransCounter				is Numeric size 8
				SourceCounter				is Numeric size 3
				FundingSourceCount			is Numeric size 3
				TransactionCount			is like SequenceNumber
				LocalBilledAmount			is like InternationalAmount
				LocalAllowanceAmount		is like InternationalAmount
				LocalTotalRetainedAmount	is like InternationalAmount
				CanBeBilled					is Boolean
				CheckLimits					is Boolean
				LocalBillableAmount			is like InternationalAmount
				CreateCount					is Numeric size 5
				TransactionsFound			is Boolean
				InvoiceBillableAmount		is like InternationalAmount
				LocalUnlimitedAmount		is like InternationalAmount
				FeeCounter					is Numeric size 2
				FeeTable
					do not save in checkpoint				
				FeeCount					is Numeric size 2
				LocalFeesMaximum			is like InternationalAmount
				LocalBilledFees				is like InternationalAmount
				FeeAmount					is like InternationalAmount
				LocalPassThrough			is like InternationalAmount				
				LocalBaseCounter			is Numeric size 8
				AbsoluteUnits				is like UnitsAmount
				RetainerTable
					do not save in checkpoint				
				RetainerCounter				is Numeric size 2
				RetainerCount				is Numeric size 2
				LocalAppliedAmount			is like InternationalAmount
				LocalRetainerAmount			is like InternationalAmount
				PartialBilledAmount			is like InternationalAmount
				PartialBilledBillableAmount	is like InternationalAmount
				PartialBilledUnits			is like UnitsAmount
				FeeMaxed					is Boolean
				LocalFundingGroup			is Numeric size 2
				LocalDifference				is like InternationalAmount	
				LocalPercentage				is Percent size 7.5
				LocalLineTaxAmount			is like InternationalAmount
				LocalRunningTaxAmount		is like InternationalAmount
				LocalDetailTaxAmount		is like InternationalAmount
				LocalDetailTaxableAmount	is like InternationalAmount
				LocalRunningLineTaxAmount	is like InternationalAmount
				LocalRunningLastLine		is like SequenceNumber

			Action Rules
				if (Forecast)
					ApplyRetainers		= false
					CompletionMessage	= BillingForecastMF
				else
					CompletionMessage	= InvoicesCreatedMF
				if (AppendToRunGroup not entered)
		            LocalRunGroup		= LastRunGroup + 1
		        else
		        	LocalRunGroup		= AppendToRunGroup
				invoke SetInvoicingInProgressFlag
		        if (LastProjectContractRunGroupRel not exists)
		        	invoke Create LastProjectContractRunGroupRel
				LocalFundingSourceDate	= FundingSourceDate
				LocalBillingGroup		= BillingGroup
				LocalThroughDate		= InvoiceDate
				LocalInvoiceDate		= InvoiceDate
				LocalDateRange			= DateRange
				LocalSelectionGroup		= SelectionGroup
				LocalContractMaximum	= ContractAmount - TotalBilledAmount
				if (InvoiceMaximum entered
				and InvoiceMaximum < LocalContractMaximum)
					LocalContractMaximum = InvoiceMaximum
				if (MaximumFees entered)
					LocalFeesMaximum	= MaximumFees - TotalBilledFees
				if (DeferAndHoldRemainder
				or  RemainderOption entered)
					CheckLimits			= false
				else
					CheckLimits			= true
				LocalRoundTo			= DerivedRoundTo
				LocalType				= 1								
				LocalFundingSource		= FundingSource
				LocalBillingGroup		= BillingGroup

				if (ApplyRetainers)
					for each ProcessedProjectContractRetainerRel
						RetainerCounter += 1
						RetainerTable.Retainer[RetainerCounter].Source			= each.FinanceDimension2
						RetainerTable.Retainer[RetainerCounter].Retainer		= each.ProjectContractRetainer
						RetainerTable.Retainer[RetainerCounter].Date			= each.RetainerDate
						RetainerTable.Retainer[RetainerCounter].AvailableAmount	= each.AvailableAmount
						if (each.ApplicationAmount entered
						and RetainerTable.Retainer[RetainerCounter].AvailableAmount > each.ApplicationAmount)
							RetainerTable.Retainer[RetainerCounter].AvailableAmount = each.ApplicationAmount
						else
						if (each.ApplicationPercent entered)
							LocalAmount = each.OriginalAmount * each.ApplicationPercent
							round LocalAmount to nearest LocalRoundTo
							if (RetainerTable.Retainer[RetainerCounter].AvailableAmount > LocalAmount)
								RetainerTable.Retainer[RetainerCounter].AvailableAmount = LocalAmount
						if (each.ApplicationHold)
							initialize RetainerTable.Retainer[RetainerCounter].AvailableAmount
						RetainerTable.Retainer[RetainerCounter].UnavailableAmount = each.AvailableAmount - RetainerTable.Retainer[RetainerCounter].AvailableAmount
						RetainerTable.Retainer[RetainerCounter].RetainerProject	= each.RetainerProject
						RetainerTable.Retainer[RetainerCounter].Rule			= each.RetainerRule
						RetainerTable.Retainer[RetainerCounter].Taxable			= each.Taxable
						if (each.Taxable)
							RetainerTable.Retainer[RetainerCounter].TaxCode		= each.TaxCode
							RetainerTable.Retainer[RetainerCounter].TaxRate     = each.TaxRate
							RetainerTable.Retainer[RetainerCounter].AddressCode	= each.AddressCode
					RetainerCount = RetainerCounter

				for each BillingFundingSourceRel
					if (each.Percent = 1)
						CheckLimits = false
					SourceCounter += 1
					FundingSourceTable.FundingSource[SourceCounter].Source					= each.FinanceDimension2
					FundingSourceTable.FundingSource[SourceCounter].Percent 				= each.Percent
					FundingSourceTable.FundingSource[SourceCounter].Maximum					= each.FundedAmount - each.TotalBilledAmount
					FundingSourceTable.FundingSource[SourceCounter].PostingProject			= each.PostingProject
					FundingSourceTable.FundingSource[SourceCounter].TotalRecognizedAmount	= each.TotalRecognizedAmount
					FundingSourceTable.FundingSource[SourceCounter].TotalRemainingRetainer	= each.TotalRemainingRetainerAmount
					FundingSourceTable.FundingSource[SourceCounter].FundingGroup			= each.FundingGroup
					FundingSourceTable.FundingSource[SourceCounter].Minimum					= each.InvoiceMinimum
#ifndef property federal
					if (each.RetainageMaximum entered)
						FundingSourceTable.FundingSource[SourceCounter].RetainageMaximum	= each.RetainageMaximum - each.TotalRetainedAmount - each.TotalInvoicedRetainageAmount
#endif
					LocalFinanceDimension2 = each.FinanceDimension2
					for each AvailableAdvanceAmountsRel
						FundingSourceTable.FundingSource[SourceCounter].Maximum				+= each.Amount
#ifdef module ar
					FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode			= each.DerivedBuyerTaxCode
					FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode		= each.BuyerTaxLocation.AddressCode
#endif
					if (AppendToRunGroup entered)
						FundingSourceTable.FundingSource[SourceCounter].Invoice				= first AppendToProjectContractInvoiceRel.ProjectContractInvoice
						FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount		= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalInvoiceAmount
						FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits		= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalUnits
						FundingSourceTable.FundingSource[SourceCounter].InvoiceFees			= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalFees
						FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainer		= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalRetainer
						FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance	= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalAllowance
						FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage	= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalRetainage * -1
						FundingSourceTable.FundingSource[SourceCounter].InvoiceAdvance		= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalAdvance
						FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough	= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalPassThrough
						if (each.TaxCalculationOption.Detail)
							FundingSourceTable.FundingSource[SourceCounter].InvoiceTax		= first AppendToProjectContractInvoiceRel.ProjectContractInvoice.TotalTax
						LocalAmount = (FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount - FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainer - FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance - FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage - FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough)							
						FundingSourceTable.FundingSource[SourceCounter].AppendToBilled		= LocalAmount
						FundingSourceTable.FundingSource[SourceCounter].AppendToFees		= FundingSourceTable.FundingSource[SourceCounter].InvoiceFees
						FundingSourceTable.FundingSource[SourceCounter].AppendToAllowance	= FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance
						FundingSourceTable.FundingSource[SourceCounter].AppendToRetainage	= FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage
						FundingSourceTable.FundingSource[SourceCounter].AppendToPassThrough	= FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough
#ifdef module tx
						LocalProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						LocalTaxEntity				= LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
						if (each.TaxCalculationOption.Total)
							invoke Delete AppendToInvoiceTotalTaxLineRel
						if ((each.TaxCalculationOption.Summary
						or   each.TaxCalculationOption.Total)
						and  LocalProjectContractInvoice entered
						and !LocalTaxEntity.ThirdParty.Sabrix
						and  ProjectInvoiceTaxSummaryRel not exists)
							invoke GenerateTaxSummaryData
#endif
				FundingSourceCount	= SourceCounter
				commit transaction
				
				if (BillingMethod.Milestone
				or  BillingMethod.Installment
				or  ProjectContractMilestonesRel exists)
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
						LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
						for each ProjectContractMilestoneRel
							if (each.PostingProject entered)
								LocalProject = each.PostingProject
							else
								LocalProject = FundingSourceTable.FundingSource[SourceCounter].PostingProject
							if  (LocalProject.IsBillable
							and  ValidProjectDates
							and (SummaryProject not entered
							or  (SummaryProject.ProjectType.Summary
							and  PostingInSummaryRel exists)
							or  (SummaryProject.ProjectType.Posting
							and  LocalProject = SummaryProject)))
								LocalAmount = each.Amount
								if (LocalProject.BillingMaximum entered)
									LocalProjectMaximum = LocalProject.RemainingBillable
									if (LocalAmount > LocalProjectMaximum)
										LocalAmount = LocalProjectMaximum
								InvoiceBillableAmount = LocalAmount
								LocalBillableAmount += each.Amount
								LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].Maximum - FundingSourceTable.FundingSource[SourceCounter].BilledAmount - FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
								if (LocalAmount > LocalContractMaximum - LocalBilledAmount)
									LocalAmount = LocalContractMaximum - LocalBilledAmount
								if (LocalAmount > LocalMaximum)
									LocalAmount = LocalMaximum
								if (LocalAmount = each.Amount)
									FundingSourceTable.FundingSource[SourceCounter].BilledAmount += LocalAmount
									FundingSourceTable.FundingSource[SourceCounter].Billed = true
									LocalBilledAmount += LocalAmount
									CreateCount += 1
									initialize LocalRetainedAmount
#ifndef property federal
									if (ProjectFundingSourceRel.RetainagePercent entered)
										LocalRetainedAmount = LocalAmount * ProjectFundingSourceRel.RetainagePercent
										round LocalRetainedAmount to nearest LocalRoundTo
										if (ProjectFundingSourceRel.RetainageMaximum entered)
											LocalMaximum = FundingSourceTable.FundingSource[SourceCounter].RetainageMaximum - FundingSourceTable.FundingSource[SourceCounter].RetainedAmount
											if (LocalRetainedAmount > LocalMaximum)
												LocalRetainedAmount = LocalMaximum
#endif
									FundingSourceTable.FundingSource[SourceCounter].RetainedAmount += LocalRetainedAmount
									initialize LocalTaxAmount
									initialize LocalTaxRate
#ifdef module ar
									initialize LocalProjectCodeBlock
									initialize LocalAddressCode
									initialize LocalBuyerTaxCode
									initialize LocalBuyerAddressCode
									initialize LocalServiceTaxCode
									initialize LocalServiceAddressCode
									initialize LocalProductTaxCategory
									if (!IsTaxExempt
									and (FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode entered
									or   DerivedBuyerTaxCode entered)
									and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.InternalFund
									and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.IntercompanyBilling
									and !Forecast)
										initialize CalculateTax

										LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
										if (LocalTaxEntity.ThirdParty.Sabrix)
											LocalOneSourceTaxAttributeText  		= LocalOneSourceTaxAttribute
											CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
											CalculateTax.InvoiceDate				= InvoiceDate


											CalculateTax.Invoice		      		= "Calculate"
											CalculateTax.Customer					= ProjectFundingSourceRel.CompanyCustomerGroup.Customer
											CalculateTax.VendorCustomerName 		= ProjectFundingSourceRel.CompanyCustomerGroup.Customer.Name	

											CalculateTax.LineNumber					= 1	




											if (LocalProject.BuyerTaxLocation entered)
												CalculateTax.PostalAddress  		= LocalProject.BuyerTaxLocation.AddressCode.PostalAddress
												LocalAddressCode					= LocalProject.BuyerTaxLocation.AddressCode
											else	
											if (ProjectFundingSourceRel.BuyerTaxLocation entered)	
												CalculateTax.PostalAddress  		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode.PostalAddress	
												LocalAddressCode					= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
											else								
												CalculateTax.PostalAddress  		= ProjectFundingSourceRel.CompanyCustomerGroup.CustomerBillTo.PostalAddress
											CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
											include LoadOneSourceTaxAttribute
											CalculateTax.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute

										if (DerivedBuyerTaxCode entered)
											LocalBuyerTaxCode			= DerivedBuyerTaxCode
											LocalBuyerAddressCode		= LocalProject.BuyerTaxLocation.AddressCode
										else
											LocalBuyerTaxCode			= FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode
											LocalBuyerAddressCode		= FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode
										CalculateTax.TaxEntity			= LocalTaxEntity
										CalculateTax.System				= "AR"
										CalculateTax.TaxCode			= LocalBuyerTaxCode
										CalculateTax.FromTaxCode		= DerivedSellerTaxCode
										CalculateTax.POATaxCode			= LocalServiceTaxCode
										CalculateTax.ProductTaxCategory = LocalProductTaxCategory
										CalculateTax.Function			= "C"
										CalculateTax.TaxableAmount		= LocalAmount
										CalculateTax.TaxDate			= InvoiceDate
										LocalTaxCode = LocalBuyerTaxCode
										if (EntityTaxCodeRel.TaxDistributionCode entered)
											CalculateTax.InputReturnVertexTaxIn = "D"
										if (LocalTaxEntity.ThirdParty.VertexOSeries)
											CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
											CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress
											CalculateTax.POAAddress			= LocalServiceAddressCode.PostalAddress
										if (ProjectFundingSourceRel.TaxCalculationOption.Detail)
											LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
											LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
										    round LocalTaxAmount to nearest LocalRoundTo
											LocalTaxRate                    = CalculateTax.OutputTaxRate  
											if (CalculateTax.OutputErrorNumber entered)
												include CreateInvoice
												invoke Create ProjectContractInvoiceError
													invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
													invoked.ProjectContract 		= ProjectContract
													invoked.FinanceDimension2 		= LocalFinanceDimension2
													invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
													invoked.ErrorMessage			= CalculateTax.OutputErrorMessage
											if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
											    initialize TaxCounter
											    initialize LocalTaxAmount
											    while (TaxCounter < 20)
											    	TaxCounter += 1
											    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
												    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
												    	round LocalTaxAmount to nearest LocalRoundTo
#endif
									if (!Forecast)
										FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
										FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
										include CreateInvoice
										invoke Create ProjectContractInvoiceLine
											assign result to NewProjectContractInvoiceLine
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.ProjectContract 		= ProjectContract
											invoked.FinanceDimension2 		= LocalFinanceDimension2
											invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
											invoked.Amount					= LocalAmount
											invoked.ProjectContractMilestone = each.ProjectContractMilestone
											invoked.Project					= LocalProject
											invoked.TaxAmount				= LocalTaxAmount
											invoked.TaxRate                 = LocalTaxRate
											invoked.BillableAmount			= InvoiceBillableAmount
											invoked.BuyerTaxCode			= LocalBuyerTaxCode
											if (LocalAddressCode entered)
												invoked.AddressCode			= LocalAddressCode
											else
												invoked.AddressCode			= LocalBuyerAddressCode
											invoked.RetainedAmount			= LocalRetainedAmount
											invoked.TaxCode					= LocalServiceTaxCode
											invoked.ProductTaxCategory		= LocalProductTaxCategory
										invoke UpdateStatus each
											invoked.PrmStatus = 4
#ifdef module ar
									if (LocalBuyerTaxCode entered)
										if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered
										and ProjectFundingSourceRel.TaxCalculationOption.Detail)
										    initialize TaxCounter
										    while (TaxCounter < 20)
										    	TaxCounter += 1
										    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
										    		invoke Create ProjectContractInvoiceTaxLine
														invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
														invoked.ProjectContract 		= ProjectContract
														invoked.FinanceDimension2 		= LocalFinanceDimension2
														invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
														invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
														invoked.LineNumber				= TaxCounter
														invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
														invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
														invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
														invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
														invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
										if ((ProjectFundingSourceRel.TaxCalculationOption.Summary
										or   ProjectFundingSourceRel.TaxCalculationOption.Total)
										and !LocalTaxEntity.ThirdParty.Sabrix)
											LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
											if (ProjectInvoiceTaxSummaryOTORel not exists)
												invoke Create ProjectInvoiceTaxSummaryOTORel
													invoked.TaxableAmount = LocalAmount
											else
												invoke Update ProjectInvoiceTaxSummaryOTORel
													invoked.TaxableAmount += LocalAmount
#endif

									if (ApplyRetainers
									and RetainerCount > 0
									and LocalAmount > 0)
										LocalRetainerAmount = LocalAmount
										LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
										LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
#ifndef property federal
										if (ProjectFundingSourceRel.AllowancePercent entered)
											LocalRetainerAmount += (LocalAmount * ProjectFundingSourceRel.AllowancePercent)
											round LocalRetainerAmount to nearest LocalRoundTo
#endif										
										initialize RetainerCounter
										while (RetainerCounter < RetainerCount)
											RetainerCounter += 1
											if (RetainerTable.Retainer[RetainerCounter].Source = FundingSourceTable.FundingSource[SourceCounter].Source
											and RetainerTable.Retainer[RetainerCounter].AvailableAmount > 0
											and LocalRetainerAmount > 0)
												if (RetainerTable.Retainer[RetainerCounter].Rule = 0
												or (RetainerTable.Retainer[RetainerCounter].Rule = 1
												and RetainerTable.Retainer[RetainerCounter].RetainerProject = LocalProject))
													RetainerTable.Retainer[RetainerCounter].Invoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
													LocalAppliedAmount = LocalRetainerAmount
													if (LocalRetainerAmount >= RetainerTable.Retainer[RetainerCounter].AvailableAmount)
														LocalAppliedAmount = RetainerTable.Retainer[RetainerCounter].AvailableAmount
													RetainerTable.Retainer[RetainerCounter].AppliedAmount += LocalAppliedAmount
													RetainerTable.Retainer[RetainerCounter].AvailableAmount -= LocalAppliedAmount
													LocalRetainerAmount -= LocalAppliedAmount
													invoke Create ProjectContractInvoiceRetainerLine
														invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
														invoked.ProjectContract 		= ProjectContract
														invoked.FinanceDimension2 		= LocalFinanceDimension2
														invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
														invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
														invoked.ProjectContractRetainer = RetainerTable.Retainer[RetainerCounter].Retainer
														invoked.AppliedAmount			= LocalAppliedAmount

				if ((!BillingMethod.Milestone
				and  !BillingMethod.Installment)
				or   ProjectOverridesRel exists)
					include BuildFeesTable
					if (SummaryProject.ProjectType.Posting)
						LocalSingleProject = SummaryProject
					else
						initialize LocalSingleProject
					for each ProjectShadowCalculationRel
						LocalProject		= each.Project
						if (LocalProject.ProjectBillingOverride set exists)
							LocalOverridesExist = true
						else
							LocalOverridesExist = false
						if   (ValidProjectDates
						and ((!BillingMethod.Milestone
						and   !BillingMethod.Installment)
						or    LocalProject.BillingMethod entered
						or    LocalProject.BillingOverridesExist)
						and  (SummaryProject not entered
						or   (SummaryProject.ProjectType.Summary
						and   PostingInSummaryRel exists)
						or   (SummaryProject.ProjectType.Posting
						and   LocalProject = SummaryProject)))
							for each ProjectContractPartialBillRel
								LocalGLTransactionDetail = each.GLTransactionDetail
								if  ((LocalGLTransactionDetail within LocalSelectionGroup
								or    LocalSelectionGroup not entered)
								and ((FrontEndSplitsEnabled
								and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 entered)
								or   !FrontEndSplitsEnabled)
								and  (LocalGLTransactionDetail.TransactionDate <= ThroughDate
								or    ThroughDate not entered)
								and  (LocalGLTransactionDetail.RelatedJournalTransaction(GeneralLedgerTransaction).PostingDate within DateRange))
									include SetLocalProjectCodeBlock
									if ((!BillingMethod.Milestone
									and  !BillingMethod.Installment)
									or   LocalProject.BillingMethod entered
									or   ProjectBillingOverrideRel.BillingMethod entered)
										PartialBilledAmount = each.TotalBilledAmount
										PartialBilledBillableAmount = each.TotalBilledBillableAmount
										PartialBilledUnits = each.TotalBilledUnits
										if (!Forecast)
											invoke Purge each
										include LoadInvoiceTransaction							
							for each GeneralLedgerTransactionRel
								if ((FrontEndSplitsEnabled
								and  each.FinanceCodeBlock.FinanceDimension2 entered)
								or  !FrontEndSplitsEnabled)
									for each each.GLTransactionDetailBillingRel
										if ((each.TransactionDate <= ThroughDate
										or   ThroughDate not entered)
										and (each.APPaid.EligibleForBilling
										or   !ExcludeAP))
											LocalGLTransactionDetail = each.GLTransactionDetail
											if (LocalGLTransactionDetail within LocalSelectionGroup
											or  LocalSelectionGroup not entered)
												include SetLocalProjectCodeBlock
												if ((!BillingMethod.Milestone
												and  !BillingMethod.Installment)
												or   LocalProject.BillingMethod entered
												or   ProjectBillingOverrideRel.BillingMethod entered)
													initialize PartialBilledAmount
													initialize PartialBilledBillableAmount
													initialize PartialBilledUnits
													include LoadInvoiceTransaction
					FeeMaxed = false
					for each ProjectInvoiceTransactionRel
						initialize LocalFundingGroup
						LocalInvoiceTransaction = each.InvoiceTransaction
						initialize LocalInvoiceTransaction.NewAmount
						initialize LocalInvoiceTransaction.NewBillableAmount						
						LocalGLTransactionDetail = LocalInvoiceTransaction.GLTransactionDetail
						LocalProject = LocalGLTransactionDetail.FinanceCodeBlock.Project
						LocalOverridesExist = LocalInvoiceTransaction.OverridesExist
						if (LocalInvoiceTransaction.FeeCode not entered)
							initialize SourceCounter
							while (SourceCounter < FundingSourceCount)
								SourceCounter += 1
								initialize FundingSourceTable.FundingSource[SourceCounter].FeesAllowed
						if (LocalInvoiceTransaction.Amount < 0)
							LocalBillableAmount += LocalInvoiceTransaction.BillableAmount
							initialize SourceCounter
							while (SourceCounter < FundingSourceCount)
								SourceCounter += 1
								LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
								if  ((FrontEndSplitsEnabled
								and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
								or   !FrontEndSplitsEnabled)
									include CalculateNegativeAmount
									include SetLocalProjectCodeBlock
									include LoadExpenseTransaction
									include GenerateInvoiceLine
						else
							CanBeBilled = true
							include LimitCheck
							if (CanBeBilled)
								initialize SourceCounter
								while (SourceCounter < FundingSourceCount)
									SourceCounter += 1
									LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
									if  ((FrontEndSplitsEnabled
									and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
									or   !FrontEndSplitsEnabled)									
										initialize LocalAvailableRetainer
										initialize LocalUnavailableRetainer
										initialize LocalProjectRetainer
										if (ApplyRetainers
										and RetainerCount > 0)
											initialize RetainerCounter
											while (RetainerCounter < RetainerCount)
												RetainerCounter += 1
												if (RetainerTable.Retainer[RetainerCounter].Source = FundingSourceTable.FundingSource[SourceCounter].Source)
													if (RetainerTable.Retainer[RetainerCounter].Rule = 0
													or (RetainerTable.Retainer[RetainerCounter].Rule = 1
													and RetainerTable.Retainer[RetainerCounter].RetainerProject = LocalProject))
														LocalAvailableRetainer += RetainerTable.Retainer[RetainerCounter].AvailableAmount
													else
														LocalUnavailableRetainer += RetainerTable.Retainer[RetainerCounter].AvailableAmount
													if (RetainerTable.Retainer[RetainerCounter].Rule = 1
													and RetainerTable.Retainer[RetainerCounter].RetainerProject = LocalProject)
														LocalProjectRetainer += RetainerTable.Retainer[RetainerCounter].AvailableAmount
													LocalUnavailableRetainer += RetainerTable.Retainer[RetainerCounter].UnavailableAmount
										if (!ApplyRetainers)
											LocalUnavailableRetainer = FundingSourceTable.FundingSource[SourceCounter].TotalRemainingRetainer
										include CalculatePositiveAmount
										include SetLocalProjectCodeBlock
										include LoadExpenseTransaction
										include GenerateInvoiceLine
						if (!Forecast)
							if  (LocalInvoiceTransaction.Amount != LocalInvoiceTransaction.BilledAmount
							and (LocalInvoiceTransaction.BilledAmount entered
							or   LocalInvoiceTransaction.FromPartial)
							and  LocalInvoiceTransaction.FeeCode not entered
							and (LocalInvoiceTransaction.Limited
							or   DeferAndHoldRemainder
							or   RemainderOption entered))
								invoke Create ProjectContractPartialTransaction
									fill in fields from this instance
									invoked.GLTransactionDetail = LocalGLTransactionDetail
									if (DeferAndHoldRemainder
									or  RemainderOption.DeferAndHold)
										invoked.Hold = true

					FeeMaxed = false
					for each ProjectInvoiceTransactionFeeRel
						initialize LocalFundingGroup
						LocalInvoiceTransaction = each.InvoiceTransaction
						LocalGLTransactionDetail = LocalInvoiceTransaction.GLTransactionDetail
						initialize LocalInvoiceTransaction.NewAmount
						initialize LocalInvoiceTransaction.NewBillableAmount						
						LocalBillableAmount += LocalInvoiceTransaction.BillableAmount
						LocalProject = LocalGLTransactionDetail.FinanceCodeBlock.Project
						LocalOverridesExist = LocalInvoiceTransaction.OverridesExist
						initialize SourceCounter
						while (SourceCounter < FundingSourceCount)
							SourceCounter += 1
							LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
							if  ((FrontEndSplitsEnabled
							and   LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2 = LocalFinanceDimension2)
							or   !FrontEndSplitsEnabled)
								include CalculateNegativeAmount
								include SetLocalProjectCodeBlock
								include LoadExpenseTransaction
								include GenerateInvoiceLine


				if (ApplyRetainers
				and RetainerCount > 0)
					initialize RetainerCounter
					while (RetainerCounter < RetainerCount)
						RetainerCounter += 1
						if (RetainerTable.Retainer[RetainerCounter].AppliedAmount entered)
							if (RetainerTable.Retainer[RetainerCounter].Taxable
							and RetainerTable.Retainer[RetainerCounter].TaxRate entered)
								LocalTaxAmount = RetainerTable.Retainer[RetainerCounter].TaxRate * RetainerTable.Retainer[RetainerCounter].AppliedAmount * -1
								round LocalTaxAmount to nearest LocalRoundTo
							else
								initialize LocalTaxAmount
							LocalFinanceDimension2				= RetainerTable.Retainer[RetainerCounter].Source
							initialize SourceCounter
							while (SourceCounter < FundingSourceCount)
								SourceCounter += 1
								if (FundingSourceTable.FundingSource[SourceCounter].Source = LocalFinanceDimension2)
									FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount -= RetainerTable.Retainer[RetainerCounter].AppliedAmount
									FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainer -= RetainerTable.Retainer[RetainerCounter].AppliedAmount
									if (!ProjectFundingSourceRel.TaxCalculationOption.Total)
										FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
									end while
							invoke Create ProjectContractInvoiceLine
								assign result to NewProjectContractInvoiceLine
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ProjectContract 		= ProjectContract
								invoked.FinanceDimension2 		= RetainerTable.Retainer[RetainerCounter].Source
								invoked.ProjectContractInvoice	= RetainerTable.Retainer[RetainerCounter].Invoice
								invoked.Amount					= RetainerTable.Retainer[RetainerCounter].AppliedAmount * -1
								invoked.Project					= RetainerTable.Retainer[RetainerCounter].RetainerProject
								invoked.ProjectContractRetainer	= RetainerTable.Retainer[RetainerCounter].Retainer
								if (RetainerTable.Retainer[RetainerCounter].Taxable)
									invoked.BuyerTaxCode		= RetainerTable.Retainer[RetainerCounter].TaxCode
									invoked.AddressCode			= RetainerTable.Retainer[RetainerCounter].AddressCode
									if (!ProjectFundingSourceRel.TaxCalculationOption.Total)
										invoked.TaxRate			= RetainerTable.Retainer[RetainerCounter].TaxRate
										invoked.TaxAmount		= LocalTaxAmount
							LocalProjectContractRetainer		= RetainerTable.Retainer[RetainerCounter].Retainer
							LocalProjectContractInvoice			= RetainerTable.Retainer[RetainerCounter].Invoice
							invoke UpdateAppliedAmount ProjectContractRetainerRel
								invoked.PrmAppliedAmount = RetainerTable.Retainer[RetainerCounter].AppliedAmount
							for each NewProjectContractInvoiceRetainerLineRel
								if (each.RetainerLine not entered)
									invoke Update each
										invoked.RetainerLine = NewProjectContractInvoiceLine.SequenceNumber
							if  (RetainerTable.Retainer[RetainerCounter].Taxable
							and (ProjectFundingSourceRel.TaxCalculationOption.Summary
							or   ProjectFundingSourceRel.TaxCalculationOption.Total))
								LocalServiceAddressCode	= blank
								LocalBuyerTaxCode		= RetainerTable.Retainer[RetainerCounter].TaxCode
								LocalServiceTaxCode		= blank
								LocalProductTaxCategory	= blank
								LocalBuyerAddressCode	= RetainerTable.Retainer[RetainerCounter].AddressCode
								if (ProjectInvoiceTaxSummaryOTORel not exists)
									invoke Create ProjectInvoiceTaxSummaryOTORel
										invoked.TaxableAmount = RetainerTable.Retainer[RetainerCounter].AppliedAmount * -1
								else
									invoke Update ProjectInvoiceTaxSummaryOTORel
										invoked.TaxableAmount += RetainerTable.Retainer[RetainerCounter].AppliedAmount * -1

				if (!Forecast)
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
						LocalProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
						if (not FundingSourceTable.FundingSource[SourceCounter].Billed)
							if (NewProjectContractInvoiceRel.ProjectContractInvoiceLine set not exists)
								invoke Delete NewProjectContractInvoiceRel
						else
							include CreateAllowanceLine
							include CreateAdvanceApplicationLine
#ifdef module tx
							LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
							for each ProjectInvoiceTaxSummaryRel
								invoke Purge each.ProjectInvoiceTaxSummaryLine set
								initialize LocalTaxAmount
								initialize LocalTaxRate 									
								initialize LocalAddressCode
								initialize CalculateTax
								LocalBuyerTaxCode				= each.TaxSummaryKey.BuyerTaxCode
								LocalBuyerAddressCode			= each.TaxSummaryKey.BuyerAddressCode
								LocalServiceTaxCode				= each.TaxSummaryKey.ServiceTaxCode
								LocalServiceAddressCode			= each.TaxSummaryKey.ServiceAddressCode
								LocalProductTaxCategory			= each.TaxSummaryKey.ProductTaxCategory
								LocalTaxableAmount				= each.TaxableAmount
								CalculateTax.TaxEntity			= LocalTaxEntity
								CalculateTax.System				= "AR"
								CalculateTax.TaxCode			= LocalBuyerTaxCode
								CalculateTax.FromTaxCode		= DerivedSellerTaxCode
								CalculateTax.POATaxCode			= LocalServiceTaxCode
								CalculateTax.ProductTaxCategory = LocalProductTaxCategory
								CalculateTax.Function			= "C"
								CalculateTax.TaxableAmount		= LocalTaxableAmount
								CalculateTax.TaxDate			= InvoiceDate
								LocalTaxCode = LocalBuyerTaxCode
								if (EntityTaxCodeRel.TaxDistributionCode entered)
									CalculateTax.InputReturnVertexTaxIn = "D"
								if (LocalTaxEntity.ThirdParty.VertexOSeries)
									CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
									CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress
									CalculateTax.POAAddress			= LocalServiceAddressCode.PostalAddress
								LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
							    LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
							    round LocalTaxAmount to nearest LocalRoundTo
							    LocalTaxRate                    = CalculateTax.OutputTaxRate
								if (LocalTaxAmount entered)
									FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
									invoke Update each
						    			invoked.TaxAmount = LocalTaxAmount
						    			invoked.TaxRate   = LocalTaxRate
									if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
									    initialize TaxCounter
									    while (TaxCounter < 20)
									    	TaxCounter += 1
									    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
									    		invoke Create each.ProjectInvoiceTaxSummaryLine set
									    			invoked.TaxCounter		= TaxCounter
										    		invoked.BuyerTaxCode	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
										    		invoked.TaxableAmount	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
										    		invoked.TaxAmount		= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
										    		invoked.TaxRate			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
										    		invoked.TaxCodeBlock	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
									if (RecordCount >= 20)
										commit transaction
										initialize RecordCount
									RecordCount += 1
									initialize RecordCount
									if (ProjectFundingSourceRel.TaxCalculationOption.Summary)
										LocalRunningTaxAmount = LocalTaxAmount
										initialize LocalRunningLastLine
										for each ProjectContractInvoiceLineTaxRel
											if  (each.FeeCode not entered
											and  each.SequenceNumber > LocalRunningLastLine)
												LocalRunningLastLine = each.SequenceNumber
											LocalPercentage = each.Amount / LocalTaxableAmount
											LocalLineTaxAmount = LocalPercentage * LocalTaxAmount
											round LocalLineTaxAmount to nearest LocalRoundTo
											invoke UpdateSummaryKey each
												invoked.TaxAmount = LocalLineTaxAmount
												invoked.TaxRate   = LocalTaxRate
											if (RecordCount >= 20)
												commit transaction
												initialize RecordCount
											RecordCount += 1
											LocalRunningTaxAmount -= LocalLineTaxAmount
											LocalInvoiceLine = each.SequenceNumber											
											if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
												LocalRunningLineTaxAmount = LocalLineTaxAmount
											    initialize TaxCounter
											    while (TaxCounter < 20)
											    	TaxCounter += 1
											    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
											    		LocalDetailTaxAmount = CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount * LocalPercentage
											    		round LocalDetailTaxAmount to nearest LocalRoundTo
											    		LocalDetailTaxableAmount = CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount * LocalPercentage
											    		round LocalDetailTaxableAmount to nearest LocalRoundTo
														LocalLineNumber  = TaxCounter
														if (ProjectContractInvoiceTaxLineOTORel exists)
															invoke Update ProjectContractInvoiceTaxLineOTORel
																invoked.TaxAmount				= LocalDetailTaxAmount
																invoked.TaxableAmount			= LocalDetailTaxableAmount
														else
											    			invoke Create ProjectContractInvoiceTaxLine
																invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
																invoked.ProjectContract 		= ProjectContract
																invoked.FinanceDimension2 		= LocalFinanceDimension2
																invoked.ProjectContractInvoice	= LocalProjectContractInvoice
																invoked.SequenceNumber			= LocalInvoiceLine
																invoked.LineNumber				= LocalLineNumber
																invoked.TaxAmount				= LocalDetailTaxAmount
																invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
																invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
																invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
																invoked.TaxableAmount			= LocalDetailTaxableAmount
														LocalRunningLineTaxAmount -= LocalDetailTaxAmount
												if (LocalRunningLineTaxAmount entered)
													invoke Update ProjectContractInvoiceTaxLineOTORel
														invoked.TaxAmount += LocalRunningLineTaxAmount
										if (LocalRunningTaxAmount entered)
											LocalInvoiceLine = LocalRunningLastLine
											invoke UpdateTaxAmount ProjectContractInvoiceLineOTORel
												invoked.Difference = LocalRunningTaxAmount
									if (ProjectFundingSourceRel.TaxCalculationOption.Total)
										invoke Create ProjectContractInvoiceLine
											assign result to NewProjectContractInvoiceLine				
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.ProjectContract 		= ProjectContract
											invoked.FinanceDimension2 		= LocalFinanceDimension2
											invoked.ProjectContractInvoice	= LocalProjectContractInvoice
											invoked.TaxAmount				= LocalTaxAmount
											invoked.TaxRate                 = LocalTaxRate
											invoked.BuyerTaxCode			= LocalBuyerTaxCode
											invoked.AddressCode				= LocalBuyerAddressCode
											invoked.TaxCode					= LocalServiceTaxCode
											invoked.ProductTaxCategory		= LocalProductTaxCategory
											invoked.LineType				= 10
										if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
										    initialize TaxCounter
										    while (TaxCounter < 20)
										    	TaxCounter += 1
										    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
										    		invoke Create ProjectContractInvoiceTaxLine
														invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
														invoked.ProjectContract 		= ProjectContract
														invoked.FinanceDimension2 		= LocalFinanceDimension2
														invoked.ProjectContractInvoice	= LocalProjectContractInvoice
														invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
														invoked.LineNumber				= TaxCounter
														invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
														invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
														invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
														invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
														invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
#endif							
							include CreateRetainageLine
							invoke FastUpdate NewProjectContractInvoiceRel
								invoked.TotalInvoiceAmount	= FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount
								invoked.TotalUnits			= FundingSourceTable.FundingSource[SourceCounter].InvoiceUnits
								invoked.TotalFees			= FundingSourceTable.FundingSource[SourceCounter].InvoiceFees
								invoked.TotalRetainer		= FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainer
								invoked.TotalAllowance		= FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance
								invoked.TotalRetainage		= FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage * -1
								invoked.TotalAdvance		= FundingSourceTable.FundingSource[SourceCounter].InvoiceAdvance
								invoked.TotalPassThrough	= FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough
								invoked.TotalTax			= FundingSourceTable.FundingSource[SourceCounter].InvoiceTax
								invoked.Status				= 0
							LocalFinanceDimension2			= FundingSourceTable.FundingSource[SourceCounter].Source
							LocalAmount = (FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount - FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainer - FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance - FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage - FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough)
							invoke UpdateTotalBilledAmount ProjectFundingSourceRel
								invoked.BilledAmount		= LocalAmount - FundingSourceTable.FundingSource[SourceCounter].AppendToBilled
								invoked.BilledFees			= FundingSourceTable.FundingSource[SourceCounter].InvoiceFees - FundingSourceTable.FundingSource[SourceCounter].AppendToFees
								invoked.BilledAllowance		= FundingSourceTable.FundingSource[SourceCounter].InvoiceAllowance - FundingSourceTable.FundingSource[SourceCounter].AppendToAllowance
								invoked.BilledRetainage		= ((FundingSourceTable.FundingSource[SourceCounter].InvoiceRetainage - FundingSourceTable.FundingSource[SourceCounter].AppendToRetainage) * -1)
								invoked.BilledPassThrough	= FundingSourceTable.FundingSource[SourceCounter].InvoicePassThrough - FundingSourceTable.FundingSource[SourceCounter].AppendToPassThrough
							if (CreateSummarizedInvoices)
								invoke CreateInvoiceSummary NewProjectContractInvoiceRel
				else
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						if (FundingSourceTable.FundingSource[SourceCounter].Source entered)
							LocalFinanceDimension2	= FundingSourceTable.FundingSource[SourceCounter].Source
#ifndef property federal
							if (ProjectFundingSourceRel.AllowancePercent entered)
								LocalAmount = FundingSourceTable.FundingSource[SourceCounter].BilledAmount * ProjectFundingSourceRel.AllowancePercent
								round LocalAmount to nearest LocalRoundTo
							else
								initialize LocalAmount
#endif
#ifdef property federal
							initialize LocalAmount
#endif
							invoke UpdateForecast ProjectFundingSourceRel
								invoked.PrmAmount	= FundingSourceTable.FundingSource[SourceCounter].BilledAmount + FundingSourceTable.FundingSource[SourceCounter].PassThroughAmount + LocalAmount
								invoked.PrmDate		= InvoiceDate
				if (!Forecast)
					if (CreateCount > 0
					or  SingleProjectInvoice)
						initialize InvoicingMessage
					else
						if (!TransactionsFound)
							InvoicingMessage = NoTransactionsFoundMF
						else
							InvoicingMessage = NoInvoicesCreatedMF
					initialize ErrorMessage
				invoke SetInvoicingComplete

			Exit Rules
				if (!Forecast)
					if (AppendToRunGroup not entered)
						LocalRunGroup	= LastRunGroup
					if (CreateCount > 0)
						invoke UpdateTotalBilledAmount
							invoked.BilledAmount 		= LocalBilledAmount
							invoked.BilledFees   		= LocalBilledFees
							invoked.BilledAllowance		= LocalAllowanceAmount
							invoked.BilledRetainage 	= LocalTotalRetainedAmount
							invoked.BilledPassThrough	= LocalPassThrough
						invoke Update LastProjectContractRunGroupRel
							invoked.BilledAmount	+= LocalBilledAmount
							invoked.BillableAmount	+= LocalBillableAmount
							invoked.DateRange		= DateRange
#ifdef module idm					
						if (UseIDM)
							if (ProjectContractInvoiceTemplate entered)
								invoke GenerateIDMProjectInvoiceDocument ProjectContractInvoice
									invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
									invoked.PrmProjectContract		  = ProjectContract
									invoked.PrmRunGroup				  = LocalRunGroup
						else
#endif							
						if (ProjectInvoiceFormat entered) 					
							invoke UpdateProjectInvoiceTemplate GenerateInvoiceFormatRel
					else
						if (AppendToRunGroup not entered
						and ProjectInvoiceTransactionRel not exists)
							invoke Delete LastProjectContractRunGroupRel
							LastRunGroup -= 1
						CompletionMessage = NoInvoicesCreatedMF
						if (!TransactionsFound)
							CompletionMessage = NoTransactionsFoundMF

				if (!Forecast)
					initialize SourceCounter
					while (SourceCounter < FundingSourceCount)
						SourceCounter += 1
						if (FundingSourceTable.FundingSource[SourceCounter].Billed
						and FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount < FundingSourceTable.FundingSource[SourceCounter].Minimum
						and FundingSourceTable.FundingSource[SourceCounter].Minimum entered)
							invoke DeleteInvoiceLines ProjectContractInvoiceLine
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmProjectContract			= ProjectContract
								invoked.PrmFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
								invoked.PrmProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
								invoked.PrmMinimumNotMet			= true
							CompletionMessage = MinimumAmountMF

				if (ProjectInvoiceTransactionRel exists)
					invoke PurgeAll ProjectInvoiceTransaction
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmProjectContract			= ProjectContract
						invoked.PrmProjectContractRunGroup	= LocalRunGroup
						invoked.Forecast					= Forecast

		ForecastContractBillingAndRevenue is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				DateRange
				ThroughDate					is Date
        		SelectionGroup				is a GLTransactionDetail group
				AsOfDate					is Date
				ForecastOption				is Numeric size 1
					States
						Both				value is 1
						BillingOnly			value is 2
						RevenueOnly			value is 3
				BillingGroup				is a ProjectBillingGroup 
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				AsOfDate
					required
				ForecastOption
					default to 1
			Local Fields
				ErrorFound			is Boolean
				LocalErrorMessage	is Text	
				AsyncId				is a AsyncActionRequest
				Billing				is Boolean
				Revenue				is Boolean
			Sort Order
				FinanceEnterpriseGroup
				Active
				ProjectContract
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			initialize AsyncId
					if ((ForecastOption.BillingOnly
					or   ForecastOption.Both)
					and  UnbilledAmountsExist)
						Billing = true
					else
						Billing = false
					if  (RevenueRecognition.Separate
					and (ForecastOption.Both
					or   ForecastOption.RevenueOnly)
					and  SeparateUnrecognizedAmountsExist)
						Revenue = true
					else
						Revenue = false        		
					LocalFundingSourceDate	= AsOfDate
					LocalBillingGroup		= BillingGroup
					if (Revenue
					and RevenueFundingSourceRel exists)
	        			invoke RecognizeRevenue in background

							assign async action request id to AsyncId
	        				resume on error
								ErrorFound = true
								LocalErrorMessage = error message        				
	        				invoked.DateRange			= DateRange
	        				invoked.ThroughDate			= ThroughDate
	        				invoked.SelectionGroup		= SelectionGroup
	        				invoked.FundingSourceDate	= AsOfDate
	        				invoked.RevenueDate			= AsOfDate
							invoked.Forecast			= true
							invoked.BillingGroup		= BillingGroup
        			if (Billing
					and BillingFundingSourceRel exists)
		    			invoke GenerateInvoices in background
							run after AsyncId

		    				resume on error
								ErrorFound = true
								LocalErrorMessage = error message        				
		    				invoked.DateRange			= DateRange
		    				invoked.ThroughDate			= ThroughDate
		    				invoked.SelectionGroup		= SelectionGroup
	        				invoked.FundingSourceDate	= AsOfDate		    				
		    				invoked.InvoiceDate			= AsOfDate
							invoked.Forecast			= true
							invoked.BillingGroup		= BillingGroup

		GenerateTaxSummaryData is an Instance Action
			restricted
			Action Rules
				for each AppendToInvoiceLineRel
					LocalServiceAddressCode	= each.ServiceAddressCode
					LocalBuyerTaxCode		= each.BuyerTaxCode
					LocalServiceTaxCode		= each.TaxCode
					LocalProductTaxCategory	= each.ProductTaxCategory
					LocalBuyerAddressCode	= each.AddressCode
					if (ProjectInvoiceTaxSummaryOTORel not exists)
						invoke Create ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount = each.Amount
					else
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += each.Amount
					if (RecordCount >= 50)
						commit transaction
						initialize RecordCount
					RecordCount += 1
			
		ForecastBillingAndRevenue is an Instance Action
			valid when (Active)
			disable multiple instance selection
			run in background
			completion message is "<CompletionMessage>"			
			Parameters
				DateRange
				ThroughDate				is Date
        		SelectionGroup			is a GLTransactionDetail group
				AsOfDate				is Date
				ForecastOption			is Numeric size 1
					States
						Both			value is 1
						BillingOnly		value is 2
						RevenueOnly		value is 3
				SummaryProject			is a Project
				BillingGroup			is a ProjectBillingGroup 

			Parameter Rules
				DateRange
					required
					constraint (DateRange.Begin entered
					and         DateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				AsOfDate
					required
					if (RevenueRecognition.Combined)
						ForecastOption = 2
				ForecastOption
					if (RevenueRecognition.Separate)
						required
					if (ForecastOption.Both
					or  ForecastOption.BillingOnly)


						constraint (ProjectFundingSource set exists)
							"CannotForecastBilling;_NoFundingSourcesExist"
						constraint (OpenRevenueInvoicesRel not exists)
							"CannotForecastBilling;_DraftRevenueRecognitionRecordsExist"
						constraint (DraftRetainersRel not exists)
							"CannotForecastBilling;_DraftRetainersExist"
					if (ForecastOption.RevenueOnly)
						constraint (RevenueRecognition.Separate)
							"CannotForecastRevenue;_RevenueRecognitionIsCombined"
					if (ForecastOption.Both
					or  ForecastOption.RevenueOnly)
						if (RevenueRecognition.Separate)


							constraint (ProjectFundingSource set exists)
								"CannotForecastRevenue;_NoFundingSourcesExist"
							constraint (OpenInvoicesRel not exists)
								"CannotForecastRevenue;_DraftInvoicesExist"
				SummaryProject
					if (SummaryProject.ProjectType.Summary)
						LocalSummaryProject = SummaryProject
						constraint (SummaryInContractRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"
						constraint (SummaryHasPostingsRel exists)
							"Summary<FinanceEnterpriseGroup.ProjectLabel>MustContainPostingDescendants"
					if (SummaryProject.ProjectType.Posting)
						LocalSummaryProject = ProjectContract
						LocalProject		= SummaryProject
						constraint (PostingInSummaryRel exists)
							"Posting<FinanceEnterpriseGroup.ProjectLabel>MustBeWithinContract"

			Local Fields
				ErrorFound			is Boolean
				LocalErrorMessage	is Text	
				AsyncId				is a AsyncActionRequest
				Billing				is Boolean
				Revenue				is Boolean

        	Action Rules
				CompletionMessage		= ForecastCompleteMF
				if (RevenueRecognition.Combined
				or  ForecastOption.BillingOnly
				or  ForecastOption.Both)
					Billing = true
				else
					Billing = false
				if  (RevenueRecognition.Separate
				and (ForecastOption.Both
				or   ForecastOption.RevenueOnly))
					Revenue = true
				else
					Revenue = false
				LocalFundingSourceDate	= AsOfDate
				LocalBillingGroup		= BillingGroup
				if (Revenue
				and RevenueFundingSourceRel exists)
        			invoke RecognizeRevenue in background

						assign async action request id to AsyncId
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message        				
        				invoked.DateRange			= DateRange
        				invoked.ThroughDate			= ThroughDate
        				invoked.SelectionGroup		= SelectionGroup
        				invoked.FundingSourceDate	= AsOfDate
        				invoked.RevenueDate			= AsOfDate
        				invoked.SummaryProject		= SummaryProject
						invoked.Forecast			= true
						invoked.BillingGroup		= BillingGroup
					if (ErrorFound)
						CompletionMessage = LocalErrorMessage
       			if (Billing
				and BillingFundingSourceRel exists)
	    			invoke GenerateInvoices in background
						run after AsyncId

	    				resume on error
							ErrorFound = true
							LocalErrorMessage = error message        				
	    				invoked.DateRange			= DateRange
	    				invoked.ThroughDate			= ThroughDate
	    				invoked.SelectionGroup		= SelectionGroup
        				invoked.FundingSourceDate	= AsOfDate	    				
	    				invoked.InvoiceDate			= AsOfDate
	       				invoked.SummaryProject		= SummaryProject    				
						invoked.Forecast			= true
						invoked.BillingGroup		= BillingGroup
					if (ErrorFound)
						CompletionMessage = LocalErrorMessage

		GenerateRetainerInvoices is an Instance Action
			valid when (ToProcessRetainersExist)
			Parameters
				ThroughDate			is Date
				InvoiceDate			is Date
		    	PrintStatus		    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
			Parameter Rules
				ThroughDate
					required
					LocalThroughDate = ThroughDate
					constraint (OpenProjectContractRetainerRel exists)
						"NoContractRetainersExistForEnteredThroughDate"
				InvoiceDate
					required
						
			Local Fields
				NewProjectContractInvoice	is a ProjectContractInvoice view
				NewProjectContractInvoiceLine is a ProjectContractInvoiceLine view
				FundingSourceTable
				SourceCounter				is Numeric size 3
				FundingSourceCount			is Numeric size 3
				CreateCount					is Numeric size 4
				LocalAmount					is like InternationalAmount
				LocalProjectMaximum			is like InternationalAmount
				LocalTaxAmount				is like InternationalAmount
				LocalTaxRate                is Percent size 7.5
				LocalInvoiceFormatEntered	is Boolean

			Action Rules
				initialize ErrorMessage
	            increment LastRunGroup
				LocalInvoiceDate			= InvoiceDate
				LocalThroughDate			= ThroughDate
				for each OpenProjectContractRetainerRel
					LocalProject = each.RetainerProject
					if (ValidProjectDates
					and each.FinanceDimension2 != LocalFinanceDimension2)
						SourceCounter += 1
						LocalFinanceDimension2											= each.FinanceDimension2
						FundingSourceTable.FundingSource[SourceCounter].Source			= each.FinanceDimension2
						FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode	= each.ProjectFundingSource.DerivedBuyerTaxCode
						FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode = each.ProjectFundingSource.BuyerTaxLocation.AddressCode
						invoke Create ProjectContractInvoice
							assign result to NewProjectContractInvoice
							fill in fields from each
							invoked.InvoiceDate	= InvoiceDate
							invoked.RunGroup	= LastRunGroup
							invoked.Status		= 0
							invoked.InvoiceType = 4
							invoked.CFDANumber  = each.FinanceDimension2.CFDANumber
							if (each.ProjectFundingSource.ProjectJurisdictionCode entered)
								invoked.ProjectJurisdictionCode = each.ProjectFundingSource.ProjectJurisdictionCode
							else
								invoked.ProjectJurisdictionCode = each.FinanceDimension2.ProjectJurisdictionCode
							if (IsThirdPartyInvoicePrint)	
								if (each.FinanceDimension2.FundingType.ExternalGrant
								or  each.FinanceDimension2.FundingType.ExternalCustomer)	
									invoked.PrintStatus = PrintStatus		
						FundingSourceTable.FundingSource[SourceCounter].Invoice = NewProjectContractInvoice.ProjectContractInvoice
				FundingSourceCount	= SourceCounter				
				initialize SourceCounter
				while (SourceCounter < FundingSourceCount)
					SourceCounter += 1
					LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
					LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
					for each OpenFundingSourceRetainerRel
						LocalProject = each.RetainerProject
						if (ValidProjectDates)
							LocalAmount = each.Amount
							if (LocalProject.BillingMaximum entered
							and each.RetainerRule.RetainerProjectOnly)
								LocalProjectMaximum = LocalProject.RemainingBillable
								if (LocalAmount > LocalProjectMaximum)
									LocalAmount = LocalProjectMaximum
							if (LocalAmount > 0)
								initialize LocalTaxAmount
								initialize LocalTaxRate
#ifdef module ar
								initialize LocalAddressCode
								initialize LocalBuyerTaxCode
								initialize LocalBuyerAddressCode
								initialize LocalServiceTaxCode
								initialize LocalServiceAddressCode
								initialize LocalProductTaxCategory
								if  (each.Taxable
								and  FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode entered
								and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.InternalFund
								and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.IntercompanyBilling)
									initialize CalculateTax

									LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
									if (LocalTaxEntity.ThirdParty.Sabrix)
										CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
										CalculateTax.InvoiceDate				= InvoiceDate
										CalculateTax.Invoice		      		= "Calculate"
										CalculateTax.Customer					= ProjectFundingSourceRel.CompanyCustomerGroup.Customer
										CalculateTax.VendorCustomerName 		= ProjectFundingSourceRel.CompanyCustomerGroup.Customer.Name	
										CalculateTax.LineNumber					= 1	
										if (ProjectFundingSourceRel.BuyerTaxLocation entered)	
											CalculateTax.PostalAddress  		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode.PostalAddress	
											LocalAddressCode					= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
										else								
											CalculateTax.PostalAddress  		= ProjectFundingSourceRel.CompanyCustomerGroup.CustomerBillTo.PostalAddress
										CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
										include LoadOneSourceTaxAttribute
										CalculateTax.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute	

									if (DerivedBuyerTaxCode entered)
										LocalBuyerTaxCode			= DerivedBuyerTaxCode
										LocalBuyerAddressCode		= LocalProject.BuyerTaxLocation.AddressCode
									else
										LocalBuyerTaxCode			= FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode
										LocalBuyerAddressCode		= FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode
									CalculateTax.TaxEntity			= LocalTaxEntity
									CalculateTax.System				= "AR"
									CalculateTax.TaxCode			= LocalBuyerTaxCode
									CalculateTax.FromTaxCode		= DerivedSellerTaxCode
									CalculateTax.Function			= "C"
									CalculateTax.TaxableAmount		= LocalAmount
									CalculateTax.TaxDate			= InvoiceDate
									LocalTaxCode					= LocalBuyerTaxCode
									if (EntityTaxCodeRel.TaxDistributionCode entered)
										CalculateTax.InputReturnVertexTaxIn = "D"

									if (LocalTaxEntity.ThirdParty.VertexOSeries)
										CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
										CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress

									LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
									LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
									LocalTaxRate                    = CalculateTax.OutputTaxRate  
									if (CalculateTax.OutputErrorNumber entered)
										invoke Create ProjectContractInvoiceError
											invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
											invoked.ProjectContract 		= ProjectContract
											invoked.FinanceDimension2 		= LocalFinanceDimension2
											invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
											invoked.ErrorMessage			= CalculateTax.OutputErrorMessage

									if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
									    initialize TaxCounter
									    initialize LocalTaxAmount
									    while (TaxCounter < 20)
									    	TaxCounter += 1
									    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
										    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
										    	round LocalTaxAmount to nearest LocalRoundTo					    	
#endif
								FundingSourceTable.FundingSource[SourceCounter].Billed = true
								CreateCount += 1
								FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += LocalAmount
								FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
								invoke Create ProjectContractInvoiceLine
									assign result to NewProjectContractInvoiceLine				
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract 		= ProjectContract
									invoked.FinanceDimension2 		= LocalFinanceDimension2
									invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
									invoked.Amount					= LocalAmount
									invoked.ProjectContractRetainer = each.ProjectContractRetainer
									invoked.Project					= each.RetainerProject
									invoked.BillableAmount			= LocalAmount
									invoked.TaxAmount				= LocalTaxAmount
									invoked.TaxRate                 = LocalTaxRate
									invoked.BuyerTaxCode			= LocalBuyerTaxCode									
									if (LocalAddressCode entered)
										invoked.AddressCode			= LocalAddressCode
									else
										invoked.AddressCode			= LocalBuyerAddressCode
								invoke UpdateStatus each
									invoked.PrmStatus = 4
									if (LocalAmount < each.Amount)
										invoked.PrmAmount = LocalAmount
#ifdef module idm
								if (UseIDM)
									if (each.ProjectContractRetainer.ProjectContractInvoiceTemplate entered)
										LocalInvoiceFormatEntered = true
								else
#endif
								if (each.ProjectContractRetainer.ProjectInvoiceFormat entered)
									LocalInvoiceFormatEntered = true
#ifdef module ar
								if (LocalBuyerTaxCode entered)
									if (ProjectInvoiceTaxSummaryOTORel not exists)
										invoke Create ProjectInvoiceTaxSummaryOTORel
											invoked.TaxableAmount = LocalAmount
											invoked.TaxAmount	  = LocalTaxAmount
											invoked.TaxRate       = LocalTaxRate
									else
										invoke Update ProjectInvoiceTaxSummaryOTORel
											invoked.TaxableAmount += LocalAmount
											invoked.TaxAmount	  += LocalTaxAmount
											invoked.TaxRate		   = LocalTaxRate
									if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
									    initialize TaxCounter
									    while (TaxCounter < 20)
									    	TaxCounter += 1
									    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
									    		invoke Create ProjectContractInvoiceTaxLine
													invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
													invoked.ProjectContract 		= ProjectContract
													invoked.FinanceDimension2 		= LocalFinanceDimension2
													invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
													invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
													invoked.LineNumber				= TaxCounter
													invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
													invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
													invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
													invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
													invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
												LocalTaxCounter = TaxCounter
												if (ProjectInvoiceTaxSummaryLineOTORel not exists)
									    			invoke Create ProjectInvoiceTaxSummaryOTORel.ProjectInvoiceTaxSummaryLine set
									    				invoked.TaxCounter		= TaxCounter
										    			invoked.BuyerTaxCode	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
										    			invoked.TaxableAmount	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
										    			invoked.TaxAmount		= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
										    			invoked.TaxRate			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
										    			invoked.TaxCodeBlock	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
										    	else
													invoke Update ProjectInvoiceTaxSummaryLineOTORel
														invoked.TaxableAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
														invoked.TaxAmount	  += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
#endif
				initialize SourceCounter
				while (SourceCounter < FundingSourceCount)
					SourceCounter += 1
					LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
					LocalProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
					if (not FundingSourceTable.FundingSource[SourceCounter].Billed)
						invoke Delete NewProjectContractInvoiceRel
					else
						invoke FastUpdate NewProjectContractInvoiceRel
							invoked.TotalInvoiceAmount	= FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount
							invoked.TotalTax			= FundingSourceTable.FundingSource[SourceCounter].InvoiceTax
						if (CreateSummarizedInvoices)
							invoke CreateInvoiceSummary NewProjectContractInvoiceRel
						
			Exit Rules
				LocalRunGroup	= LastRunGroup
				if (CreateCount > 0)
					invoke Update LastProjectContractRunGroupRel
						invoked.DateRange.End = ThroughDate
#ifdef module idm					
					if (UseIDM)
						if (ProjectContractInvoiceTemplate entered
						or  LocalInvoiceFormatEntered)
							invoke GenerateIDMProjectInvoiceDocument ProjectContractInvoice
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmProjectContract		  = ProjectContract
								invoked.PrmRunGroup				  = LocalRunGroup							
					else
#endif							
					if (ProjectInvoiceFormat entered
					or  LocalInvoiceFormatEntered)
						invoke UpdateProjectInvoiceTemplate GenerateInvoiceFormatRel
				else
					invoke Delete LastProjectContractRunGroupRel

		GenerateRetainerAdjustmentInvoices is an Instance Action
			valid when (ToProcessRetainerAdjustmentsExist)
			Parameters
				ThroughDate			is Date
				InvoiceDate			is Date
		    	PrintStatus		    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1

			Parameter Rules
				ThroughDate
					required
					LocalThroughDate = ThroughDate
					constraint (OpenProjectContractRetainerAdjustmentRel exists)
						"NoContractRetainerAdjustmentsExistForEnteredThroughDate"
				InvoiceDate
					required
						
			Local Fields
				NewProjectContractInvoice	is a ProjectContractInvoice view
				NewProjectContractInvoiceLine is a ProjectContractInvoiceLine view
				FundingSourceTable
				SourceCounter				is Numeric size 3
				FundingSourceCount			is Numeric size 3
				CreateCount					is Numeric size 4
				LocalTaxAmount				is like InternationalAmount
				LocalTaxRate                is Percent size 7.5
				LocalInvoiceFormatEntered	is Boolean

			Action Rules
				initialize ErrorMessage
	            increment LastRunGroup
				LocalInvoiceDate			= InvoiceDate
				LocalThroughDate			= ThroughDate
				for each OpenProjectContractRetainerAdjustmentRel
					LocalProject = each.RetainerProject
					if (ValidProjectDates
					and each.FinanceDimension2 != LocalFinanceDimension2)
						SourceCounter += 1
						LocalFinanceDimension2										 = each.FinanceDimension2
						FundingSourceTable.FundingSource[SourceCounter].Source		 = each.FinanceDimension2
						FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode = each.ProjectFundingSource.DerivedBuyerTaxCode						
						FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode = each.ProjectFundingSource.BuyerTaxLocation.AddressCode
						invoke Create ProjectContractInvoice
							assign result to NewProjectContractInvoice
							fill in fields from each
							invoked.InvoiceDate	= InvoiceDate
							invoked.RunGroup	= LastRunGroup
							invoked.Status		= 0
							invoked.InvoiceType = 4
							invoked.CFDANumber  = each.FinanceDimension2.CFDANumber
							if (each.ProjectFundingSource.ProjectJurisdictionCode entered)
								invoked.ProjectJurisdictionCode = each.ProjectFundingSource.ProjectJurisdictionCode
							else
								invoked.ProjectJurisdictionCode = each.FinanceDimension2.ProjectJurisdictionCode
							if (IsThirdPartyInvoicePrint)	
								if (each.FinanceDimension2.FundingType.ExternalGrant
								or  each.FinanceDimension2.FundingType.ExternalCustomer)	
									invoked.PrintStatus = PrintStatus		
						FundingSourceTable.FundingSource[SourceCounter].Invoice = NewProjectContractInvoice.ProjectContractInvoice
				FundingSourceCount	= SourceCounter				
				initialize SourceCounter
				while (SourceCounter < FundingSourceCount)
					SourceCounter += 1
					LocalFinanceDimension2 = FundingSourceTable.FundingSource[SourceCounter].Source
					LocalProjectContractInvoice = FundingSourceTable.FundingSource[SourceCounter].Invoice
					for each OpenFundingSourceRetainerAdjustmentRel
						LocalProject = each.RetainerProject
						if (ValidProjectDates)
							initialize LocalTaxAmount
							initialize LocalTaxRate
#ifdef module ar
							initialize LocalAddressCode
							initialize LocalBuyerTaxCode
							initialize LocalBuyerAddressCode
							initialize LocalServiceTaxCode
							initialize LocalServiceAddressCode
							initialize LocalProductTaxCategory
							if  (each.Taxable
							and  FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode entered
							and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.InternalFund
							and !FundingSourceTable.FundingSource[SourceCounter].Source.FundingType.IntercompanyBilling)
								initialize CalculateTax

								LocalTaxEntity = LocalFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
								if (LocalTaxEntity.ThirdParty.Sabrix)
									CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
									CalculateTax.InvoiceDate				= InvoiceDate
									CalculateTax.Invoice		      		= "Calculate"
									CalculateTax.Customer					= ProjectFundingSourceRel.CompanyCustomerGroup.Customer
									CalculateTax.VendorCustomerName 		= ProjectFundingSourceRel.CompanyCustomerGroup.Customer.Name	
									CalculateTax.LineNumber					= 1	
									if (ProjectFundingSourceRel.BuyerTaxLocation entered)	
										CalculateTax.PostalAddress  		= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode.PostalAddress	
										LocalAddressCode					= ProjectFundingSourceRel.BuyerTaxLocation.AddressCode
									else								
										CalculateTax.PostalAddress  		= ProjectFundingSourceRel.CompanyCustomerGroup.CustomerBillTo.PostalAddress
									CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
									include LoadOneSourceTaxAttribute
									CalculateTax.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute	

								if (DerivedBuyerTaxCode entered)
									LocalBuyerTaxCode			= DerivedBuyerTaxCode
									LocalBuyerAddressCode		= LocalProject.BuyerTaxLocation.AddressCode
								else
									LocalBuyerTaxCode			= FundingSourceTable.FundingSource[SourceCounter].BuyerTaxCode
									LocalBuyerAddressCode		= FundingSourceTable.FundingSource[SourceCounter].BuyerAddressCode
								CalculateTax.TaxEntity			= LocalTaxEntity
								CalculateTax.System				= "AR"
								CalculateTax.TaxCode			= LocalBuyerTaxCode
								CalculateTax.FromTaxCode		= DerivedSellerTaxCode
								CalculateTax.Function			= "C"
								CalculateTax.TaxableAmount		= each.Amount
								CalculateTax.TaxDate			= InvoiceDate
								
								LocalTaxCode = LocalBuyerTaxCode
								if (EntityTaxCodeRel.TaxDistributionCode entered)
									CalculateTax.InputReturnVertexTaxIn = "D"

								if (LocalTaxEntity.ThirdParty.VertexOSeries)
									CalculateTax.PostalAddress		= LocalBuyerAddressCode.PostalAddress
									CalculateTax.FromPostalAddress	= SellerTaxLocation.AddressCode.PostalAddress

								LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
								LocalTaxAmount					= CalculateTax.OutputTotalTaxAmount
								LocalTaxRate                    = CalculateTax.OutputTaxRate  
								if (CalculateTax.OutputErrorNumber entered)
									invoke Create ProjectContractInvoiceError
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.ProjectContract 		= ProjectContract
										invoked.FinanceDimension2 		= LocalFinanceDimension2
										invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
										invoked.ErrorMessage			= CalculateTax.OutputErrorMessage

								if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
								    initialize TaxCounter
								    initialize LocalTaxAmount
								    while (TaxCounter < 20)
								    	TaxCounter += 1
								    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
									    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
									    	round LocalTaxAmount to nearest LocalRoundTo
#endif
							FundingSourceTable.FundingSource[SourceCounter].Billed = true
							CreateCount += 1
							FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount += each.Amount
							FundingSourceTable.FundingSource[SourceCounter].InvoiceTax += LocalTaxAmount
							invoke Create ProjectContractInvoiceLine
								assign result to NewProjectContractInvoiceLine				
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ProjectContract 		= ProjectContract
								invoked.FinanceDimension2 		= LocalFinanceDimension2
								invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
								invoked.Amount					= each.Amount
								invoked.ProjectContractRetainer = each.ProjectContractRetainer
								invoked.Project					= each.RetainerProject
								invoked.BillableAmount			= each.Amount
								invoked.TaxAmount				= LocalTaxAmount
								invoked.TaxRate                 = LocalTaxRate
								invoked.BuyerTaxCode			= LocalBuyerTaxCode
								if (LocalAddressCode entered)
									invoked.AddressCode			= LocalAddressCode
								else
									invoked.AddressCode			= LocalBuyerAddressCode
							invoke UpdateStatus each
								invoked.PrmStatus = 4
#ifdef module idm
							if (UseIDM)
								if (each.ProjectContractRetainer.ProjectContractInvoiceTemplate entered)
									LocalInvoiceFormatEntered = true
							else
#endif
							if (each.ProjectContractRetainer.ProjectInvoiceFormat entered)
								LocalInvoiceFormatEntered = true
#ifdef module ar
							if (LocalBuyerTaxCode entered)
								if (ProjectInvoiceTaxSummaryOTORel not exists)
									invoke Create ProjectInvoiceTaxSummaryOTORel
										invoked.TaxableAmount = each.Amount
										invoked.TaxAmount	  = LocalTaxAmount
										invoked.TaxRate       = LocalTaxRate
								else
									invoke Update ProjectInvoiceTaxSummaryOTORel
										invoked.TaxableAmount += each.Amount
										invoked.TaxAmount	  += LocalTaxAmount
										invoked.TaxRate		   = LocalTaxRate
								if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
								    initialize TaxCounter
								    while (TaxCounter < 20)
								    	TaxCounter += 1
								    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
								    		invoke Create ProjectContractInvoiceTaxLine
												invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
												invoked.ProjectContract 		= ProjectContract
												invoked.FinanceDimension2 		= LocalFinanceDimension2
												invoked.ProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
												invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
												invoked.LineNumber				= TaxCounter
												invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
												invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
												invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
												invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
												invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
											LocalTaxCounter = TaxCounter
											if (ProjectInvoiceTaxSummaryLineOTORel not exists)
								    			invoke Create ProjectInvoiceTaxSummaryOTORel.ProjectInvoiceTaxSummaryLine set
								    				invoked.TaxCounter		= TaxCounter
									    			invoked.BuyerTaxCode	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
									    			invoked.TaxableAmount	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
									    			invoked.TaxAmount		= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
									    			invoked.TaxRate			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
									    			invoked.TaxCodeBlock	= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
									    	else
												invoke Update ProjectInvoiceTaxSummaryLineOTORel
													invoked.TaxableAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
													invoked.TaxAmount	  += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount

#endif
				initialize SourceCounter
				while (SourceCounter < FundingSourceCount)
					SourceCounter += 1
					LocalFinanceDimension2		= FundingSourceTable.FundingSource[SourceCounter].Source
					LocalProjectContractInvoice	= FundingSourceTable.FundingSource[SourceCounter].Invoice
					if (not FundingSourceTable.FundingSource[SourceCounter].Billed)
						invoke Delete NewProjectContractInvoiceRel
					else
						invoke FastUpdate NewProjectContractInvoiceRel
							invoked.TotalInvoiceAmount	= FundingSourceTable.FundingSource[SourceCounter].InvoiceAmount
							invoked.TotalTax			= FundingSourceTable.FundingSource[SourceCounter].InvoiceTax
						if (CreateSummarizedInvoices)
							invoke CreateInvoiceSummary NewProjectContractInvoiceRel

			Exit Rules
				LocalRunGroup	= LastRunGroup
				if (CreateCount > 0)
					invoke Update LastProjectContractRunGroupRel
						invoked.DateRange.End = ThroughDate
#ifdef module idm					
					if (UseIDM)
						if (ProjectContractInvoiceTemplate entered
						or  LocalInvoiceFormatEntered)
							invoke GenerateIDMProjectInvoiceDocument ProjectContractInvoice
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmProjectContract		  = ProjectContract
								invoked.PrmRunGroup				  = LocalRunGroup							
					else
#endif							
					if (ProjectInvoiceFormat entered
					or  LocalInvoiceFormatEntered) 					
						invoke UpdateProjectInvoiceTemplate GenerateInvoiceFormatRel
				else
					invoke Delete LastProjectContractRunGroupRel
#ifndef property federal
		GenerateRetainageInvoices is an Instance Action
			valid when (RetainageExists)
			run in background
			Parameters
				ThroughDate			is Date
				InvoiceDate			is Date
		    	PrintStatus		    	is Numeric size 1
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1

			Parameter Rules
				ThroughDate
					required
					LocalThroughDate = ThroughDate
					constraint (JournalizedInvoicesWithUnbilledRetainageRel exists)
						"NoUnbilledJournalizedRetainedAmountsExistForEnteredThroughDate"
				InvoiceDate
					required
						
			Local Fields
				NewProjectContractInvoice	is a ProjectContractInvoice view
				LocalAmount					is like InternationalAmount
				CreateCount					is Numeric size 4
				LocalContractTotal			is like InternationalAmount



			Action Rules
				initialize ErrorMessage
	            increment LastRunGroup
				LocalInvoiceDate			= InvoiceDate
				for each ProjectFundingSourceRetainageRel
					initialize LocalAmount
					LocalProject			= each.RetainageProject
					LocalFinanceDimension2	= each.FinanceDimension2					
					if (ValidProjectDates)
						invoke Create ProjectContractInvoice
							assign result to NewProjectContractInvoice
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.ProjectContract			= ProjectContract
							invoked.FinanceDimension2		= LocalFinanceDimension2
							invoked.InvoiceDate				= InvoiceDate
							invoked.RunGroup				= LastRunGroup
							invoked.Status					= 0
							invoked.InvoiceType 			= 6
							invoked.CFDANumber  			= each.FinanceDimension2.CFDANumber
							if (each.ProjectJurisdictionCode entered)
								invoked.ProjectJurisdictionCode = each.ProjectJurisdictionCode
							else
								invoked.ProjectJurisdictionCode = each.FinanceDimension2.ProjectJurisdictionCode
							if (IsThirdPartyInvoicePrint)	
								if (each.FinanceDimension2.FundingType.ExternalGrant
								or  each.FinanceDimension2.FundingType.ExternalCustomer)	
									invoked.PrintStatus = PrintStatus		
					
						for each each.JournalizedInvoicesWithUnbilledRetainageRel
							LocalAmount += each.InvoiceTotalRetainage

							invoke FastUpdate each
								invoked.RetainageInvoice = NewProjectContractInvoice.ProjectContractInvoice
						CreateCount += 1					
						invoke Create ProjectContractInvoiceLine
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.ProjectContract			= ProjectContract
							invoked.FinanceDimension2		= LocalFinanceDimension2
							invoked.ProjectContractInvoice	= NewProjectContractInvoice.ProjectContractInvoice
							invoked.Amount					= LocalAmount
							invoked.Project					= LocalProject
							invoked.BillableAmount			= LocalAmount
						LocalContractTotal += LocalAmount
						LocalProjectContractInvoice	= NewProjectContractInvoice.ProjectContractInvoice
						invoke FastUpdate NewProjectContractInvoiceRel
							invoked.TotalInvoiceAmount = LocalAmount
						invoke UpdateTotalBilledAmount ProjectFundingSourceRel
							invoked.BilledRetainage	   = LocalAmount * -1
						if (CreateSummarizedInvoices)
							invoke CreateInvoiceSummary NewProjectContractInvoiceRel

			Exit Rules
				if (LocalContractTotal entered)
					invoke UpdateTotalBilledAmount
						invoked.BilledRetainage = LocalContractTotal * -1

				LocalRunGroup	= LastRunGroup
				if (CreateCount > 0)
					invoke Update LastProjectContractRunGroupRel
						invoked.DateRange.End = ThroughDate
#ifdef module idm					
					if (UseIDM)
						if (ProjectContractInvoiceTemplate entered)
							invoke GenerateIDMProjectInvoiceDocument ProjectContractInvoice
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmProjectContract		  = ProjectContract
								invoked.PrmRunGroup				  = LocalRunGroup							
					else
#endif							
					if (ProjectInvoiceFormat entered) 					
						invoke UpdateProjectInvoiceTemplate GenerateInvoiceFormatRel
				else
					invoke Delete LastProjectContractRunGroupRel
					invoke Delete NewProjectContractInvoice.ProjectContractInvoice
#endif
		FixBilledAmounts is an Instance Action
			run in background
			restricted
			Local Fields
				LocalAmount				is like InternationalAmount
				LocalFees				is like InternationalAmount
				LocalAllowance			is like InternationalAmount
				LocalPassThrough		is like InternationalAmount				
				LocalRetainage			is like InternationalAmount
				LocalFSAmount			is like InternationalAmount
				LocalFSFees				is like InternationalAmount
				LocalFSAllowance		is like InternationalAmount
				LocalFSPassThrough		is like InternationalAmount				
				LocalFSRetainage		is like InternationalAmount
				LocalRecAmount			is like InternationalAmount
				LocalRecFees			is like InternationalAmount
				LocalRecAllowance		is like InternationalAmount
				LocalRecPassThrough		is like InternationalAmount
				LocalFSRecAmount		is like InternationalAmount
				LocalFSRecAllowance		is like InternationalAmount
				LocalFSRecPassThrough	is like InternationalAmount
				LocalFSAdjustment		is like InternationalAmount

			Action Rules
				for each ProjectFundingSource set
					LocalFinanceDimension2 = each.FinanceDimension2










					invoke Update each
						initialize invoked.TotalBilledAmount
						initialize invoked.TotalBilledFees
						initialize invoked.TotalBilledAllowance
						initialize invoked.TotalBilledPassThrough
						initialize invoked.TotalRetainedAmount
						initialize invoked.TotalRecognizedAmount
						initialize invoked.TotalRecognizedAllowance
						initialize invoked.TotalRecognizedPassThrough
						initialize invoked.TotalBillingAdjustments

				initialize LocalFinanceDimension2
				for each FixProjectContractInvoiceLineRel
					if (each.FinanceDimension2 != LocalFinanceDimension2)
						if (LocalFinanceDimension2 entered)
							invoke Update ProjectFundingSourceRel
								invoked.TotalBilledAmount	= LocalFSAmount
								invoked.TotalBilledFees	 	= LocalFSFees
								invoked.TotalBilledAllowance = LocalFSAllowance
								invoked.TotalBilledPassThrough = LocalFSPassThrough
								invoked.TotalRetainedAmount = LocalFSRetainage
								invoked.TotalRecognizedAmount = LocalFSRecAmount
								invoked.TotalRecognizedAllowance = LocalFSRecAllowance
								invoked.TotalRecognizedPassThrough = LocalFSRecPassThrough
								invoked.TotalBillingAdjustments = LocalFSAdjustment
						LocalFinanceDimension2 = each.FinanceDimension2
						initialize LocalFSAmount
						initialize LocalFSFees
						initialize LocalFSAllowance
						initialize LocalFSPassThrough
						initialize LocalFSRetainage
						initialize LocalFSRecAmount
						initialize LocalFSRecAllowance
						initialize LocalFSRecPassThrough
						initialize LocalFSAdjustment
					if (each.ProjectContractRetainer not entered)
						if (each.IsBilling)
							if  (each.Adjusted
							and !each.Deferred
							and !each.BillingMethod.PassThrough)
								LocalFSAdjustment += each.AdjustmentAmount
							if (each.IsAllowance)
								LocalAllowance += each.Amount
								LocalFSAllowance += each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized
								and !each.ProjectContractInvoice.InvoiceType.Retainer)

									LocalRecAllowance += each.Amount
									LocalFSRecAllowance += each.Amount
							else
							if (each.BillingMethod.PassThrough)
								LocalPassThrough += each.Amount
								LocalFSPassThrough += each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized
								and !each.ProjectContractInvoice.InvoiceType.Retainer)

									LocalRecPassThrough += each.Amount
									LocalFSRecPassThrough += each.Amount
							else
							if (each.ProjectContractInvoice.InvoiceType.Retainage)
								LocalRetainage -= each.Amount
								LocalFSRetainage -= each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized)
									LocalRecAmount += each.Amount
									LocalFSRecAmount += each.Amount
							else
							if (each.IsRetainage)
								LocalRetainage -= each.Amount
								LocalFSRetainage -= each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized)
									LocalRecAmount += each.Amount
									LocalFSRecAmount += each.Amount
							else
								LocalAmount += each.Amount
								LocalFSAmount += each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized											
								and !each.ProjectContractInvoice.InvoiceType.Retainer)

									LocalRecAmount += each.Amount
									LocalFSRecAmount += each.Amount
							if (each.FeeCode entered)
								LocalFees += each.Amount
								LocalFSFees += each.Amount
								if (RevenueRecognition.Combined
								and each.ProjectContractInvoice.Status.Journalized								
								and !each.ProjectContractInvoice.InvoiceType.Retainer)

									LocalRecFees += each.Amount
						else
						if (each.IsRevenue)
							if (each.IsAllowance)
								LocalRecAllowance += each.Amount
								LocalFSRecAllowance += each.Amount
							else
							if (each.BillingMethod.PassThrough)
								LocalRecPassThrough += each.Amount
								LocalFSRecPassThrough += each.Amount
							else
								LocalRecAmount += each.Amount
								LocalFSRecAmount += each.Amount
							if (each.FeeCode entered)
								LocalRecFees += each.Amount

				if  (LocalFinanceDimension2 entered
				and (LocalFSAmount entered
				or   LocalFSFees entered
				or   LocalFSAllowance entered
				or   LocalFSPassThrough entered
				or   LocalFSRetainage entered
				or   LocalFSRecAmount entered
				or   LocalFSRecAllowance entered
				or   LocalFSRecPassThrough entered
				or   LocalFSAdjustment entered))
					invoke Update ProjectFundingSourceRel
						invoked.TotalBilledAmount	= LocalFSAmount
						invoked.TotalBilledFees	 	= LocalFSFees
						invoked.TotalBilledAllowance = LocalFSAllowance
						invoked.TotalBilledPassThrough = LocalFSPassThrough
						invoked.TotalRetainedAmount = LocalFSRetainage
						invoked.TotalRecognizedAmount = LocalFSRecAmount
						invoked.TotalRecognizedAllowance = LocalFSRecAllowance
						invoked.TotalRecognizedPassThrough = LocalFSRecPassThrough
						invoked.TotalBillingAdjustments = LocalFSAdjustment

				for each HistoricalProjectContractMilestoneRel
					if (each.MilestoneType.Billing)
						invoke UpdateTotalBilledAmount each.ProjectFundingSource
							invoked.BilledAmount = each.Amount
						LocalAmount += each.Amount
					if (each.MilestoneType.Revenue
					or 	RevenueRecognition.Combined)
						invoke UpdateTotalRecognizedAmount each.ProjectFundingSource
							invoked.RecognizedAmount = each.Amount
						LocalRecAmount += each.Amount

				for each AdjustedProjectContractInvoiceAllBalancesRel
					if (each.AdjustedAmount entered)
						invoke UpdateTotalBilledAmount each.ProjectFundingSource
							invoked.BilledAmount = each.AdjustedAmount
						LocalAmount += each.AdjustedAmount
					if (each.AdjustedRevenueAmount entered)
						invoke UpdateTotalRecognizedAmount each.ProjectFundingSource
							invoked.RecognizedAmount = each.AdjustedRevenueAmount
						LocalRecAmount += each.AdjustedRevenueAmount

				TotalBilledAmount	= LocalAmount
				TotalBilledFees	 	= LocalFees
				TotalBilledAllowance = LocalAllowance
				TotalBilledPassThrough = LocalPassThrough
				TotalRetainedAmount = LocalRetainage
				TotalRecognizedAmount = LocalRecAmount
				TotalRecognizedFees = LocalRecFees
				TotalRecognizedAllowance = LocalRecAllowance
				TotalRecognizedPassThrough = LocalRecPassThrough
				if (last ProjectContractRunGroup set.ProjectContractRunGroup > LastRunGroup)
					LastRunGroup = last ProjectContractRunGroup set.ProjectContractRunGroup
				
		UpdateTotalBilledAmount is an Instance Action
			restricted
			refresh and lock this instance
			Parameters
				BilledAmount		is like InternationalAmount
					precision is Currency.NumberOfDecimals
				BilledFees			is like InternationalAmount
					precision is Currency.NumberOfDecimals
				BilledAllowance		is like InternationalAmount
					precision is Currency.NumberOfDecimals
				BilledRetainage		is like InternationalAmount
					precision is ProjectContract.Currency.NumberOfDecimals
				BilledPassThrough	is like InternationalAmount
					precision is ProjectContract.Currency.NumberOfDecimals
			Action Rules
				TotalBilledAmount 	 	+= BilledAmount
				TotalBilledFees 	 	+= BilledFees
				TotalBilledAllowance 	+= BilledAllowance
				TotalRetainedAmount	 	+= BilledRetainage
				TotalBilledPassThrough	+= BilledPassThrough

		UpdateTotalRecognizedAmount is an Instance Action
			restricted
			refresh and lock this instance
			Parameters
				RecognizedAmount		is like InternationalAmount
					precision is Currency.NumberOfDecimals
				RecognizedFees			is like InternationalAmount
					precision is Currency.NumberOfDecimals
				RecognizedAllowance		is like InternationalAmount
					precision is Currency.NumberOfDecimals
				RecognizedPassThrough	is like InternationalAmount
					precision is ProjectContract.Currency.NumberOfDecimals
			Action Rules
				TotalRecognizedAmount		+= RecognizedAmount
				TotalRecognizedFees			+= RecognizedFees
				TotalRecognizedAllowance	+= RecognizedAllowance
				TotalRecognizedPassThrough	+= RecognizedPassThrough

		DeleteContractInvoices is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenAndNoSubmitedInvoices
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
					invoke DeleteInvoiceRecords ProjectContractInvoice
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
						invoked.PrmRecordType			  = 0
					initialize ErrorMessage				

		DeleteInvoices is an Instance Action
			run in background
			valid when (OpenAndNoSubmitedInvoices)		
			Parameters
				PrmRunGroup		is a ProjectContractRunGroup
					default label is "InvoiceGroup"
			Parameter Rules
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (CreatedNotSubmittedInvoicesRel exists)
						"NoDraftInvoicesExistForInvoiceGroup"
			Action Rules
				invoke DeleteInvoiceRecords ProjectContractInvoice
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmProjectContract		  = ProjectContract
					invoked.PrmRunGroup				  = PrmRunGroup
					invoked.PrmRecordType			  = 0
				initialize ErrorMessage

		DeleteContractRevenue is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenRevenueInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
					invoke DeleteInvoiceRecords ProjectContractInvoice
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
						invoked.PrmRecordType			  = 1
					initialize ErrorMessage				

		DeleteRevenue is an Instance Action
			run in background
			valid when (OpenRevenueInvoicesExist)		
			Parameters
				PrmRunGroup		is a ProjectContractRunGroup
					default label is "RunGroup"
			Parameter Rules
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (CreatedRevenueInvoicesRel exists)
						"NoDraftRevenueRecordsExistForRunGroup"
			Action Rules
				invoke DeleteInvoiceRecords ProjectContractInvoice
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmProjectContract		  = ProjectContract
					invoked.PrmRunGroup				  = PrmRunGroup
					invoked.PrmRecordType			  = 1
				initialize ErrorMessage

		GenerateContractInvoiceSummaries is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				InvoiceDateRange			is a DateRange
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    CreateSummarizedInvoices
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			for each SummarizableInvoicesRel
        				if (each.InvoiceDate within InvoiceDateRange)
							invoke CreateInvoiceSummary each in background
			       				resume on error

		ValidateContractInvoiceJournalEntries is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDate					is Date
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDate
					required	
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))



        	Action Rules
        		Instance Rules
        			ErrorFound = false

        			for each OpenInvoicesRel
        				LocalRunGroup = each.RunGroup



						if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								if (PostingDate not within LocalDateRange)
									ErrorFound = true
									LocalDate = PostingDate
									LocalErrorMessage = PostingDateErrorMF
							if (!ErrorFound)
								include BadDateEdit2
						if (!ErrorFound)

							invoke ValidateInvoiceJournalEntries each in background
								resume on error
									ErrorFound = true
									LocalErrorMessage = error message        				
								invoked.PostingDate = PostingDate






		       		if (ErrorFound)
			    		ErrorMessage = LocalErrorMessage
		        	else
		        		initialize ErrorMessage

		JournalizeContractInvoices is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDate					is Date
				BillingGroup				is a ProjectBillingGroup
		    	PrmPrintStatus	    is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				PrinterEmailAddress         is an EmailAddress	
#ifdef module idm						
				PrmIDMPrinter				is an IDMPrinter
					default label is "IDMPrinter"
#endif
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDate
					required	
#ifdef module idm					
				PrmIDMPrinter
					initial value is UserDefaultPrinterRel.IDMPrinter
#endif					
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))



        	Action Rules
        		Instance Rules
        			ErrorFound = false

        			for each OpenInvoicesRel
        				LocalRunGroup = each.RunGroup
						if ((FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval
						and  !NotReadyToInvoice)
						or   !FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)
							if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
								if (each.ProjectFundingSource.ClearingProject entered)
									LocalProject = each.ProjectFundingSource.ClearingProject
									LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
									LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
									if (LocalProject.HasPeriodOfPerformance
									and ProjectPeriodOfPerformanceRel exists)
										LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
									if (PostingDate not within LocalDateRange)
										ErrorFound = true
										LocalDate = PostingDate
										LocalErrorMessage = PostingDateErrorMF
								if (!ErrorFound)
									include BadDateEdit2
							if (!ErrorFound
							and (each.BillingGroup = BillingGroup
							or   BillingGroup not entered))

								invoke GenerateJournalEntries each in background
									resume on error
										ErrorFound = true
										LocalErrorMessage = error message        				
									invoked.PostingDate = PostingDate
									invoked.PrmPrintStatus = PrmPrintStatus
#ifdef module idm						
									invoked.PrmIDMPrinter = PrmIDMPrinter
#endif							










		       		if (ErrorFound)
			    		ErrorMessage = LocalErrorMessage
		        	else
		        		initialize ErrorMessage				

		SubmitContractInvoicesForApproval is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenInvoicesExistForApproval
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			initialize ErrorMessage
        			ErrorFound = false
					invoke SubmitInvoicesForApproval OpenAndNoSubmitedInvoicesRel
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message        				
        			if (ErrorFound)
        				ErrorMessage = LocalErrorMessage	
				
		SubmitInvoicesForApproval is an Instance Action
			valid when (OpenInvoicesExistForApproval)
			run in background
			Parameters
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "InvoiceGroup"
			Parameter Rules
				PrmRunGroup

					if (PrmRunGroup entered)
						LocalRunGroup	= PrmRunGroup
						constraint (CreatedNotSubmittedInvoicesRel exists)
							"NoUnprocessedInvoicesExistForInvoiceGroup"
					else
						constraint (OpenAndNoSubmitedInvoicesRel exists)
							"NoUnprocessedInvoicesExistForContract"
			Action Rules
				initialize ErrorMessage
				if (PrmRunGroup entered)
					invoke SubmitInvoicesForApproval CreatedNotSubmittedInvoicesRel
				else
					invoke SubmitInvoicesForApproval OpenAndNoSubmitedInvoicesRel

		ValidateInvoiceJournalEntries is an Instance Action
			valid when (ReadyToValidateInvoices)
			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "InvoiceGroup"
			Parameter Rules
				PostingDate
					required
				PrmRunGroup

					LocalRunGroup	= PrmRunGroup
					constraint (CreatedInvoicesRel exists)
						"NoUnprocessedInvoicesExistForInvoiceGroup"



					if (RevenueRecognition.Separate)
						for each ActiveProjectFundingSourceRel
							if (!each.RevenueCodeBlockOption.None)
								constraint (each.ClearingProject entered)
									"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<each.FinanceDimension2>"
#ifdef module ar
#ifndef property federal
					for each ActiveProjectFundingSourceRel
						if (each.IsExternalFund
						and each.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							constraint (each.InvoiceFinanceCodeBlock entered)
								"ReceivableFinanceStructureRequiredForFundingSource<each.FinanceDimension2>"
#endif
#endif
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each CreatedInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

					for each CreatedInvoicesRel
#ifdef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.first ProjectContractInvoiceLine set.DerivedAccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar
						if (SystemClosingControlARRel exists
						and SystemClosingControlARRel.Control)
							constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
						if (CompanySystemClosingControlRel exists
						and CompanySystemClosingControlRel.Control)
							constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#endif							
			Action Rules
				invoke ValidateInvoiceJournalEntries CreatedInvoicesRel
					invoked.PostingDate = PostingDate
				
		JournalizeInvoices is an Instance Action

			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "InvoiceGroup"
		    	PrmPrintStatus	    is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				PrinterEmailAddress is an EmailAddress 
					holds pii
#ifdef module idm					
				PrmIDMPrinter		is an IDMPrinter	
					default label is "IDMPrinter"
#endif			
			Parameter Rules
				PostingDate
					required
				PrmRunGroup

					LocalRunGroup	= PrmRunGroup
					constraint (CreatedInvoicesRel exists)
						"NoUnprocessedInvoicesExistForInvoiceGroup"
					if (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)
						constraint (!NotReadyToInvoice)
							"InvoicesRequireApproval;AllInvoicesWithinInvoiceGroupMustBeApproved"
					if (RevenueRecognition.Separate)
						for each ActiveProjectFundingSourceRel
							if (!each.RevenueCodeBlockOption.None)
								constraint (each.ClearingProject entered)
									"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<each.FinanceDimension2>"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each CreatedInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

					for each CreatedInvoicesRel
#ifdef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.first ProjectContractInvoiceLine set.DerivedAccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar
						if (SystemClosingControlARRel exists
						and SystemClosingControlARRel.Control)
							constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
						if (CompanySystemClosingControlRel exists
						and CompanySystemClosingControlRel.Control)
							constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#ifndef property federal
						if (each.ProjectFundingSource.IsExternalFund
						and each.ProjectFundingSource.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							constraint (each.ProjectFundingSource.InvoiceFinanceCodeBlock entered)
								"ReceivableFinanceStructureRequiredForFundingSource<each.ProjectFundingSource.FinanceDimension2>"
#endif
#endif							
						if  (RevenueRecognition.Separate
						and !each.ProjectFundingSource.RevenueCodeBlockOption.None)
							constraint (each.ProjectFundingSource.ClearingProject entered)
								"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<each.ProjectFundingSource.FinanceDimension2>"
#ifdef module idm					
				PrmIDMPrinter
					initial value is UserDefaultPrinterRel.IDMPrinter
					default to UserDefaultPrinterRel.IDMPrinter
#endif
			Action Rules
				invoke GenerateJournalEntries CreatedInvoicesRel
					invoked.PostingDate = PostingDate
					invoked.PrmPrintStatus = PrmPrintStatus
#ifdef module idm						
					invoked.PrmIDMPrinter = PrmIDMPrinter
#endif
			Exit Rules
				initialize ErrorMessage
				
		ReverseJournalizedInvoices is an Instance Action
			valid when (JournalizedInvoicesExist)
			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "InvoiceGroup"
		    	PrmPrintStatus	    is Numeric size 1
		    		default label is "PrintStatus"
		    		States
		    			DoNotPrint	value is 0
		    			Print		value is 1
				PrinterEmailAddress is an EmailAddress 
					holds pii
				PrmDeleteInvoices	is Boolean
			Parameter Rules
				PostingDate
					required
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (JournalizedRunGroupInvoicesRel exists)
						"NoJournalizedNonRetainerInvoicesExistsForInvoiceGroup"
					for each JournalizedRunGroupInvoicesRel
						constraint (each.RetainageInvoice not entered)
							"MustReverseRetainageInvoiceGroup<each.RetainageInvoiceRel.RunGroup>BeforeInvoiceGroup<PrmRunGroup>"
						constraint (each.ProjectContractInvoiceAppliedAdvanceRel not exists)
							"MustReverseAppliedAdvanceBillingInvoiceGroup<each.first AppliedAdvanceInvoiceRel.ProjectContractInvoice.RunGroup>BeforeInvoiceGroup<PrmRunGroup>"
					if (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractInvoiceApproval)
						constraint (!NotReadyForInvoiceReversal)
							"InvoiceReversalRequiresApproval;AllInvoicesWithinRunGroupMustBeApproved"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each JournalizedRunGroupInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

					for each JournalizedRunGroupInvoicesRel
#ifdef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.FinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
#ifndef module ar
	                    if (each.FinanceDimension2.FundingType.ExternalGrant
	                    or  each.FinanceDimension2.FundingType.ExternalCustomer)
							LocalAccountingEntity = each.first ProjectContractInvoiceLine set.DerivedAccountingEntity
						else
							LocalAccountingEntity = each.ProjectFundingSource.OffsetAccount.ToAccountingEntity
#endif					
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinProjectLedgerSystemClosingControlValidDateRangeOf<SystemClosingControlRel.ValidEntryDate.Begin>-<SystemClosingControlRel.ValidEntryDate.End>"
#ifdef module ar	
						if (SystemClosingControlARRel exists
						and SystemClosingControlARRel.Control)
							constraint (PostingDate within SystemClosingControlARRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableSystemClosingControlValidDateRangeOf<SystemClosingControlARRel.ValidEntryDate.Begin>-<SystemClosingControlARRel.ValidEntryDate.End>"
						if (CompanySystemClosingControlRel exists
						and CompanySystemClosingControlRel.Control)
							constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinAccountsReceivableCompanySystemClosingControlValidDateRangeOf<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
#ifndef property federal
					for each ActiveProjectFundingSourceRel
						if (each.IsExternalFund
						and each.CompanyCustomerGroup.ReceivableCompany.DetailedInvoiceAccrualDistributions)
							constraint (each.InvoiceFinanceCodeBlock entered)
								"ReceivableFinanceStructureRequiredForFundingSource<each.FinanceDimension2>"
#endif
#endif
				PrmDeleteInvoices
					if (PrmDeleteInvoices)
						confirmation required
							"DeleteDraftInvoice(s)AfterReversing?"
							
			Action Rules
				invoke ReverseJournalizedInvoice JournalizedRunGroupInvoicesRel
					invoked.PostingDate 		= PostingDate
					invoked.PrmPrintStatus		= PrmPrintStatus
					invoked.PrinterEmailAddress = PrinterEmailAddress
					
			Exit Rules
				initialize ErrorMessage
				if (PrmDeleteInvoices)
					invoke DeleteInvoices
						invoked.PrmRunGroup = PrmRunGroup

		ValidateContractRevenueJournalEntries is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDate					is Date
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDate
					required	
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenRevenueInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))



        	Action Rules
        		Instance Rules
        			ErrorFound = false

        			for each OpenRevenueInvoicesRel
        				LocalRunGroup = each.RunGroup



						if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								if (PostingDate not within LocalDateRange)
									ErrorFound = true
									LocalDate = PostingDate
									LocalErrorMessage = PostingDateErrorMF
							if (!ErrorFound)
								include BadDateEdit2
						if (!ErrorFound)

							invoke ValidateRevenueJournalEntries each in background
								resume on error
									ErrorFound = true
									LocalErrorMessage = error message        				
								invoked.PostingDate = PostingDate







		JournalizeContractRevenue is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDate					is Date
				BillingGroup				is a ProjectBillingGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDate
					required	
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenRevenueInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))



        	Action Rules
        		Instance Rules
        			ErrorFound = false

        			for each OpenRevenueInvoicesRel
        				LocalRunGroup = each.RunGroup
						if ((FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval
						and  !NotReadyToInvoice)
						or   !FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)
							if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
								if (each.ProjectFundingSource.ClearingProject entered)
									LocalProject = each.ProjectFundingSource.ClearingProject
									LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
									LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
									if (LocalProject.HasPeriodOfPerformance
									and ProjectPeriodOfPerformanceRel exists)
										LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
									if (PostingDate not within LocalDateRange)
										ErrorFound = true
										LocalDate = PostingDate
										LocalErrorMessage = PostingDateErrorMF
								if (!ErrorFound)
									include BadDateEdit2
							if (!ErrorFound
							and (each.BillingGroup = BillingGroup
							or   BillingGroup not entered))

								invoke GenerateRevenueJournalEntries each in background
									resume on error
										ErrorFound = true
										LocalErrorMessage = error message        				
									invoked.PostingDate = PostingDate






	       			if (ErrorFound)
	       				ErrorMessage = LocalErrorMessage
	       			else
	        			initialize ErrorMessage

		SubmitContractRevenueForApproval is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    OpenNotSubmittedRevenueInvoicesExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			initialize ErrorMessage
        			ErrorFound = false
					invoke SubmitRevenueForApproval OpenNotSubmittedRevenueInvoicesRel
        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message        				
        			if (ErrorFound)
        				ErrorMessage = LocalErrorMessage				

		ValidateRevenueJournalEntries is an Instance Action
			valid when (ReadyToValidateRevenue)
			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "RunGroup"
			Parameter Rules
				PostingDate
					required
				PrmRunGroup

					LocalRunGroup	= PrmRunGroup
					constraint (CreatedRevenueInvoicesRel exists)
						"NoUnprocessedInvoicesExistForInvoiceGroup"



					if (RevenueRecognition.Separate)
						for each ActiveProjectFundingSourceRel
							if (!each.RevenueCodeBlockOption.None)						
								constraint (each.ClearingProject entered)
									"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<each.FinanceDimension2>"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each CreatedRevenueInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

			Action Rules
				invoke ValidateRevenueJournalEntries CreatedRevenueInvoicesRel
					invoked.PostingDate = PostingDate

		JournalizeRevenue is an Instance Action
			valid when (ReadyToProcessRevenue)
			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "RunGroup"
			Parameter Rules
				PostingDate
					required
				PrmRunGroup

					LocalRunGroup	= PrmRunGroup
					constraint (CreatedRevenueInvoicesRel exists)
						"NoUnprocessedInvoicesExistForInvoiceGroup"
					if (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)
						constraint (!NotReadyToInvoice)
							"RevenueRequiresApproval;AllRevenueWithinRunGroupMustBeApproved"
					if (RevenueRecognition.Separate)
						for each ActiveProjectFundingSourceRel
							if (!each.RevenueCodeBlockOption.None)						
								constraint (each.ClearingProject entered)
									"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForFundingSource<each.FinanceDimension2>"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each CreatedRevenueInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

			Action Rules
				invoke GenerateRevenueJournalEntries CreatedRevenueInvoicesRel
					invoked.PostingDate = PostingDate
			Exit Rules
				initialize ErrorMessage
				
		SubmitRevenueForApproval is an Instance Action
			valid when (OpenRevenueInvoicesExistForApproval)
			run in background
			Parameters
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "RunGroup"
			Parameter Rules
				PrmRunGroup

					if (PrmRunGroup entered)
						LocalRunGroup	= PrmRunGroup
						constraint (CreatedNotSubmittedRevenueInvoicesRel exists)
							"NoUnprocessedInvoicesExistForInvoiceGroup"
					else
						constraint (OpenNotSubmittedRevenueInvoicesRel exists)
							"NoUnprocessedInvoicesExistForContract"
			Action Rules
				initialize ErrorMessage
				if (PrmRunGroup entered)
					invoke SubmitRevenueForApproval CreatedNotSubmittedRevenueInvoicesRel
				else
					invoke SubmitRevenueForApproval OpenNotSubmittedRevenueInvoicesRel

		ReverseJournalizedRevenue is an Instance Action
			valid when (JournalizedRevenueInvoicesExist)
			run in background
			Parameters
				PostingDate         is Date
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "RunGroup"
				PrmDeleteRevenue	is Boolean
			Parameter Rules
				PostingDate
					required
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (JournalizedRevenueRunGroupInvoicesRel exists)
						"NoJournalizedRevenueExistsForRunGroup"
					if (FinanceEnterpriseGroup.EnterpriseProjectStructure.ProjectContractRevenueApproval)
						constraint (!NotReadyForRevenueReversal)
							"RevenueReversalRequiresApproval;AllRevenueWithinRunGroupMustBeApproved"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						initialize LocalProject
						for each JournalizedRevenueRunGroupInvoicesRel
							if (each.ProjectFundingSource.ClearingProject entered)
								LocalProject = each.ProjectFundingSource.ClearingProject
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
							include BadDateEdit

				PrmDeleteRevenue
					if (PrmDeleteRevenue)
						confirmation required
							"DeleteDraftRevenueRecord(s)AfterReversing?"
			Action Rules
				invoke ReverseJournalizedRevenue JournalizedRevenueRunGroupInvoicesRel
					invoked.PostingDate = PostingDate
			Exit Rules
				initialize ErrorMessage
				if (PrmDeleteRevenue)
					invoke DeleteRevenue
						invoked.PrmRunGroup = PrmRunGroup

		SubmitRevenueReversalForApproval is an Instance Action
			valid when (JournalizedRevenueInvoicesExistApproval)
			run in background
			Parameters
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "RunGroup"
			Parameter Rules
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (RevenueReversalRunGroupInvoicesRel exists)
						"NoJournalizedRevenueExistsForRunGroup"
			Action Rules
				initialize ErrorMessage
				invoke SubmitRevenueReversalForApproval JournalizedRevenueRunGroupInvoicesRel

		SubmitInvoiceReversalForApproval is an Instance Action
			valid when (JournalizedInvoicesInvoicesExistApproval)
			run in background
			Parameters
				PrmRunGroup		    is a ProjectContractRunGroup
					default label is "InvoiceGroup"
			Parameter Rules
				PrmRunGroup
					required
					LocalRunGroup	= PrmRunGroup
					constraint (InvoiceReversalRunGroupInvoicesRel exists)
						"NoJournalizedInvoicesExistsForRunGroup"
			Action Rules
				initialize ErrorMessage
				invoke SubmitInvoiceReversalForApproval JournalizedRunGroupInvoicesRel
										

		TriggerStatusChangeAlert is an Instance Action
			restricted
			Action Rules
				if(FinanceEnterpriseGroup.BODTrigger)	
					trigger "ProjectContractStatusChangedService" PA service
						resume on error
						title is "FEG:<FinanceEnterpriseGroup>PC:<ProjectContract>"
						Criteria
							FinanceEnterpriseGroup
							ProjectContract
						Variables
							FinanceEnterpriseGroup
								variable name is FinanceEnterpriseGroup
							ProjectContract
								variable name is ProjectContract
							ContractID
								variable name is ContractID
							Active 
								variable name is Status
							FinanceEnterpriseGroup.ProjectLabel
                                variable name is FEGProjectLabel								
                            ProjectContract.Project.DisplayProject
                                variable name is DisplayProject		
		
		ActivateContract is an Instance Action
			valid when (!Active)
			Action Rules
				Active = true
				invoke TriggerStatusChangeAlert
#ifdef module integration
				invoke TriggerProjectContractStatusChangedAlert
					invoked.PrmPulseAlert = "FSM_ION_ProjectContractStatusChangedAlert"
#endif														
				
		InactivateContract is an Instance Action
			valid when (OkToInactivate)
			Action Rules
				constraint (!OpenInvoicesExist)
					"CannotInactivateContract;CreatedInvoicesExist"
				Active = false
				invoke TriggerStatusChangeAlert
#ifdef module integration
				invoke TriggerProjectContractStatusChangedAlert
					invoked.PrmPulseAlert = "FSM_ION_ProjectContractStatusChangedAlert"
#endif
		UpdateCustomerInvoiceLink is an Instance Action
			Parameters
				PrmCustomerInvoiceLink	is an URL
					default label is "CustomerInvoicesLink"
			Parameter Rules
				PrmCustomerInvoiceLink
			Action Rules
				VendorInvoiceLink = PrmCustomerInvoiceLink
				
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				
		CopyVendorContractToPosting is an Instance Action
			Parameters
#ifdef module po			
				PrmContractGroup	is a ContractGroup
				PrmContract			is a Contract
				PrmVendor			is a Vendor
#endif
				PrmVendorType		is Numeric 1
					States	
						Contractor		value is 1			
						Supplier		value is 2
						Other			value is 3
			Parameter Rules			
#ifdef module po	
				PrmContractGroup	
					required
				PrmContract	
					if (PrmVendor not entered)
						required
							"ContractOrVendorRequired"							 
				PrmVendor
					default to PrmContract.Vendor				
					if (PrmContract not entered)
						required
							"VendorOrContractRequired"							 
#endif					
				PrmVendorType
					required
						default to PrmVendorType.Contractor
			Action Rules
				for each ProjectShadowRel
					LocalProject = each.Project
#ifdef module po					
					LocalContractGroup	= PrmContractGroup
					LocalContract       = PrmContract	
					LocalVendor         = PrmVendor
					if (!ProjectVendorContractsCreated)
#endif					
						invoke Create ProjectVendorContract
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
							invoked.Project 	  		   = each.Project
#ifdef module po						
							invoked.ContractGroup 		   = PrmContractGroup
							invoked.Contract               = PrmContract
							invoked.Vendor	               = PrmVendor
#endif						
							invoked.VendorType             = PrmVendorType

		CreateComments is an Instance Action
			Parameters
				PrmSubject	 			is a CommentName
		    	PrmComment				is Text
				PrmFrom					is Alpha size 230
				PrmCommentDate			is TimeStamp
				PrmDocumentURL			is URL    
				PrmAttachment			is an Attachment
				PrmPrintOnInvoice       is Boolean
				PrmSendToCustomer		is Boolean	  		
					default label is "SendToCustomer"  	
			Parameter Rules
				PrmSubject
					required
		    	PrmComment
		    		required
				PrmFrom	
					initial value is actor
					required
				PrmCommentDate
		    		default to current timestamp
			Action Rules
				invoke Create ProjectContractComment
					invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.ProjectContract 	   = ProjectContract
					invoked.Subject				   = PrmSubject
			    	invoked.Comment                = PrmComment
					invoked.From                   = PrmFrom	
					invoked.CommentDate            = PrmCommentDate
					invoked.DocumentURL			   = PrmDocumentURL
			    	invoked.Attachment             = PrmAttachment
					invoked.PrintOnInvoice		   = PrmPrintOnInvoice
					invoked.SendToCustomer		   = PrmSendToCustomer
				
		CopyFees is an Instance Action
			valid when (HasFees)
			Parameters
				ToContract			is a ProjectContract
			Parameter Rules
				ToContract
					required
			Action Rules
				LocalToContract		= ToContract
				for each ProjectContractFee set
					if (each.Active)
						LocalFeeCode		= each.ProjectFeeCode
						LocalEffectiveDate	= each.EffectiveDate
						if (ToProjectContractFeeRel not exists)
							invoke Create ProjectContractFee
								fill in fields from each
								invoked.ProjectContract	= ToContract
							for each each.ProjectContractFeeTier set
								invoke Create ProjectContractFeeTier
									fill in fields from each
									invoked.ProjectContract	= ToContract

		ResetDisplayContract is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
								
			Parameter Rules
				PrmFinanceEnterpriseGroup
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		or     PrmFinanceEnterpriseGroup not entered)
        	Action Rules
        		Instance Rules
					DisplayContract = ProjectContract.Project.DisplayProject        			
					invoke UpdateNoRules PostingProjectsRel

		RebuildLTDBalances is an Instance Action
			Action Rules
				invoke RebuildContractLTDBalances
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmProjectContract		  = ProjectContract

		RebuildContractLTDBalances is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmProjectContract			is a ProjectContract
					default label is "Contract_(Optional)"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields
				LocalAsyncId				is an AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and   (ProjectContract		  = PrmProjectContract
        		or     PrmProjectContract	  not entered)
        		and    ProjectContractInvoice set exists)
        	Action Rules
        		Instance Rules
        			invoke InitializeBalances ProjectContractInvoiceBalance
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
   	    			invoke RebuildContractLTDBalances ProjectContractInvoiceLine
						run after LocalAsyncId
						assign async action request id to LocalAsyncId
       					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
       					invoked.PrmProjectContract			= ProjectContract

		RecalculateFundingSourceFESExpenditures is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
					constraint (PrmFinanceEnterpriseGroup.FrontEndSplits)
						"FrontEndSplitsMustBeTurndOnForFinanceEnterpriseGroup"
					constraint (PrmFinanceEnterpriseGroup.UseFundedAmounts)
						"UseContractFundedAmountsMustBeCheckedOnFinanceEnterpriseGroup"
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered)
        		and    FrontEndSplitsEnabled)
        	Action Rules
        		Instance Rules
        			invoke InitializeFESExpenditures ProjectFundingSource set
        			invoke RecalculateFundingSourceFESExpenditures ProjectShadow
        				invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
        				invoked.PrmSummaryProject = ProjectContract

		CreateProjectFundingSourceFromTemplate is an Instance Action
			Parameters
				PrmProjectFundingSourceTemplate	is a ProjectFundingSourceTemplate
				PrmFinanceDimension2			is a FinanceDimension2
		    	PrmAmount						is a CurrencyAmount				
				PrmDefaultAmountFromProjectContract is Boolean				
		    	PrmPriority					    is Numeric size 2
		    	PrmFundingGroup					is Numeric size 2
		    	PrmBillingGroup					is a ProjectBillingGroup 
		    	PrmPercent						is Percent size 8.5
				PrmCustomerType			    	is a ProjectCustomerType
				PrmCustomerPoNumber				is Alpha size 22				
#ifdef module tx
				PrmBuyerTaxCode					is a TaxCode
#endif
#ifndef module tx
				PrmBuyerTaxCode		 			is AlphaUpper size 15
#endif		
				PrmBuyerTaxLocation			    is a ProjectServiceLocation
#ifdef module ar   	    
				PrmTermsCode					is a TermsCode
				PrmHSNSACCode					is a HSNSACCode
#endif		      	    		

#ifndef module ar
				PrmTermsCode					is AlphaUpper 10	
				PrmHSNSACCode                   is AlphaUpper size 20		
#endif
#ifndef property federal
				PrmRetainagePercent				is Percent size 7.3
				PrmRetainageProject				is a Project
#endif
				PrmPostingProject				is a Project		
				PrmClearingProject				is a Project
#ifndef property federal
				PrmAllowanceProject				is a Project
#endif	
			Parameter Rules
				PrmProjectFundingSourceTemplate	
					required
		 				"ProjectFundingSourceTemplateIsRequired"
					LocalProjectFundingSourceTemplate = PrmProjectFundingSourceTemplate
				PrmFinanceDimension2
					required
						"<FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired"					
					constraint (PrmFinanceDimension2.PostingDimension)
						"SourceMustBePostingLevel<FinanceEnterpriseGroup.FinanceDimension2Label>"
					constraint (PrmProjectFundingSourceTemplate.Type = PrmFinanceDimension2.FundingType)
						"FundingTypeFor<PrmProjectFundingSourceTemplate>MustBeTheSameAs<PrmFinanceDimension2>"					
				PrmAmount						
					if (PrmDefaultAmountFromProjectContract)
						default to ProjectContract.ContractAmount 
				PrmPriority
					initial value is PrmProjectFundingSourceTemplate.Priority
				PrmFundingGroup
					initial value is PrmProjectFundingSourceTemplate.FundingGroup
				PrmBillingGroup
					initial value is PrmProjectFundingSourceTemplate.BillingGroup
				PrmPercent
					initial value is PrmProjectFundingSourceTemplate.Percent
				PrmCustomerType
					constraint (PrmFinanceDimension2.IsExternalGrantOrCustomer)
						"CustomerTypeIsOnlyValidForExternalGrantOrExternalCustomer"
				PrmCustomerPoNumber
					initial value is PrmProjectFundingSourceTemplate.CustomerPoNumber
#ifdef module ar									
				PrmBuyerTaxCode
					constraint (PrmBuyerTaxLocation not entered)
						"EnterEitherBuyerTaxCodeOrBuyerTaxLocation"
					LocalTaxEntity = PrmFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity						
					if (PrmBuyerTaxCode entered
					and TaxEntityRel.UseTaxCodeAccounts)			
						LocalTaxCode = PrmBuyerTaxCode
						constraint (EntityTaxCodeRel exists)
							"TaxCodeNotDefinedForTaxEntity<PrmFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity>"
		
				PrmBuyerTaxLocation
					if (PrmBuyerTaxLocation entered)
						constraint (PrmBuyerTaxLocation.TaxCode entered)
							"TaxCodeMustBeEnteredOnTaxLocation"
						LocalTaxEntity = PrmFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity							
						if (TaxEntityRel.UseTaxCodeAccounts)
							LocalTaxCode = PrmBuyerTaxLocation.TaxCode
							constraint (EntityTaxCodeRel exists)
								"TaxLocationTaxCode<PrmBuyerTaxLocation.TaxCode>NotDefinedForTaxEntity<PrmFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity>"
				PrmHSNSACCode
					if (PrmFinanceDimension2.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.RequireHSNSACCode)
						required
							"HSN_/SACCodeIsRequired"
					else
		    			cannot be entered	
		    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
#endif						
				PrmPostingProject
					if (IsMilestoneType)
						required
							"Posting<FinanceEnterpriseGroup.ProjectLabel>IsRequiredForMilestoneOrInstallmentBillingOrRevenue"					



										
				PrmClearingProject
					if (ProjectContract.RevenueRecognition.Separate)
						required
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>RequiredForSeparateRevenueRecognition"
					else
						cannot be entered
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>InvalidForCombinedRevenueRecognition"
					if (PrmClearingProject entered)
						LocalProject = PrmClearingProject
						constraint (ProjectShadowTemplateRel exists)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>MustBeAnActiveBillablePostingDescendantOf<DisplayContract>"
						constraint (PrmClearingProject.IsRevenueRecognition)
							"Clearing<FinanceEnterpriseGroup.ProjectLabel>MustBeBillableAndProjectStatusMustAllowRevenueRecognition"
#ifndef property federal
				PrmAllowanceProject
					if (PrmProjectFundingSourceTemplate.AllowancePercent entered)
						required
							"Allowance<FinanceEnterpriseGroup.ProjectLabel>RequiredWhenAllowancePercentEntered"
					else
						cannot be entered
							"Allowance<FinanceEnterpriseGroup.ProjectLabel>CannotBeEnteredWithoutAllowancePercent"
					if (PrmAllowanceProject entered)
						LocalProject = PrmAllowanceProject
						constraint (ProjectShadowTemplateRel exists)
							"Allowance<FinanceEnterpriseGroup.ProjectLabel>MustBeAnActiveBillablePostingDescendantOf<DisplayContract>"
						constraint (PrmAllowanceProject.IsBillable)
							"Allowance<FinanceEnterpriseGroup.ProjectLabel>MustBeBillableAndProjectStatusMustBeBillable"

				PrmRetainageProject
					if (PrmRetainagePercent entered)
						required
							"Retainage<FinanceEnterpriseGroup.ProjectLabel>RequiredWhenRetainagePercentEntered"
					if (PrmRetainageProject entered)
						LocalProject = PrmRetainageProject
						constraint (ProjectShadowTemplateRel exists)
							"Retainage<FinanceEnterpriseGroup.ProjectLabel>MustBeAnActiveBillablePostingDescendantOf<DisplayContract>"
						constraint (PrmRetainageProject.IsBillable)
							"Retainage<FinanceEnterpriseGroup.ProjectLabel>MustBeBillableAndProjectStatusMustBeBillable"
#endif
			Action Rules
				invoke Create ProjectFundingSource
					invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
					invoked.ProjectContract			= ProjectContract
					invoked.FinanceDimension2       = PrmFinanceDimension2
		    		invoked.Priority				= PrmPriority
		    		invoked.FundingGroup			= PrmFundingGroup
		    		invoked.BillingGroup			= PrmBillingGroup
		    		invoked.Percent					= PrmPercent			
		    		invoked.FundedAmount			= PrmAmount
					invoked.CustomerType            = PrmCustomerType	
					invoked.BuyerTaxCode			= PrmBuyerTaxCode
					invoked.BuyerTaxLocation		= PrmBuyerTaxLocation	
					invoked.HSNSACCode              = PrmHSNSACCode
					invoked.TermsCode				= PrmTermsCode					
					invoked.PostingProject			= PrmPostingProject
			        invoked.RevenueCodeBlockOption	= PrmProjectFundingSourceTemplate.RevenueCodeBlockOption
					invoked.RevenueFullAccount		= PrmProjectFundingSourceTemplate.RevenueFullAccount
					invoked.RevenuePartialAccount	= PrmProjectFundingSourceTemplate.RevenuePartialAccount
			        invoked.RevenueAdjCodeBlockOption = PrmProjectFundingSourceTemplate.RevenueAdjCodeBlockOption
					invoked.RevenueAdjFullAccount	= PrmProjectFundingSourceTemplate.RevenueAdjFullAccount
					invoked.RevenueAdjPartialAccount = PrmProjectFundingSourceTemplate.RevenueAdjPartialAccount
					invoked.OffsetAccount			= PrmProjectFundingSourceTemplate.OffsetAccount				
					invoked.BilledUnearnedAccount	= PrmProjectFundingSourceTemplate.BilledUnearnedAccount	
					invoked.EarnedUnbilledAccount	= PrmProjectFundingSourceTemplate.EarnedUnbilledAccount		
					invoked.ExpenseGroup			= PrmProjectFundingSourceTemplate.ExpenseGroup	
					invoked.ExpenseGroupOption		= PrmProjectFundingSourceTemplate.ExpenseGroupOption			
					invoked.ProjectJurisdictionCode	= PrmProjectFundingSourceTemplate.ProjectJurisdictionCode
					invoked.Active					= true
					invoked.ClearingProject         = PrmClearingProject
					invoked.RevenueClearingAccount  = PrmProjectFundingSourceTemplate.RevenueClearingAccount
#ifndef property federal
					invoked.AllowanceProject		= PrmAllowanceProject
					invoked.AllowancePercent	    = PrmProjectFundingSourceTemplate.AllowancePercent					
					invoked.AllowanceFullAccount	= PrmProjectFundingSourceTemplate.AllowanceFullAccount
					invoked.RetainageProject		= PrmRetainageProject
					invoked.RetainagePercent		= PrmProjectFundingSourceTemplate.RetainagePercent
					invoked.RetainageMaximum		= PrmProjectFundingSourceTemplate.RetainageMaximum
					invoked.RetainageExpenseGroup	= PrmProjectFundingSourceTemplate.RetainageExpenseGroup
					invoked.RetainageGroupOption	= PrmProjectFundingSourceTemplate.RetainageGroupOption
					invoked.RetainageCodeBlock		= PrmProjectFundingSourceTemplate.RetainageCodeBlock
#endif
					invoked.AdvanceBillFullAccount	= PrmProjectFundingSourceTemplate.AdvanceBillFullAccount
					invoked.PassThroughAccount		= PrmProjectFundingSourceTemplate.PassThroughAccount
					invoked.CustomerPoNumber		= PrmCustomerPoNumber
#ifdef module intercobilling
					invoked.FromCompany						= PrmProjectFundingSourceTemplate.FromCompany
					invoked.IntercompanyBillingRechargeItem	= PrmProjectFundingSourceTemplate.IntercompanyBillingRechargeItem
#endif
#ifdef module ap
					invoked.FESEligibilityGroup		  = PrmProjectFundingSourceTemplate.FESEligibilityGroup	
			        invoked.FESEligibilityGroupOption = PrmProjectFundingSourceTemplate.FESEligibilityGroupOption
#endif                
					invoked.InvoiceMinimum			  = PrmProjectFundingSourceTemplate.InvoiceMinimum
					
		CreateProjectBillingOverridesFromTemplate is an Instance Action
			Parameters
				PrmProjectBillingOverrideTemplate	is a ProjectBillingOverrideTemplate			
				PrmProject							is a Project
		    					
			Parameter Rules
				PrmProjectBillingOverrideTemplate	
					required
					
			Action Rules
				LocalProject = PrmProject
				if (PrmProject entered)
					constraint (PostingProjectsTemplateRel exists)
						"BillingOverrideOnlyValidForPosting<FinanceEnterpriseGroup.ProjectLabel>UnderThisContract"					
					invoke Create ProjectBillingOverride
						invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
						invoked.Project			        = PrmProject
			    		invoked.ProjectCodeBlock	    = PrmProjectBillingOverrideTemplate.ProjectCodeBlock
		        		invoked.BillingMethod           = PrmProjectBillingOverrideTemplate.BillingMethod
						invoked.MarkupPercent           = PrmProjectBillingOverrideTemplate.MarkupPercent
						invoked.BillingRateTable		= PrmProjectBillingOverrideTemplate.BillingRateTable
						invoked.TaxExempt               = PrmProjectBillingOverrideTemplate.TaxExempt			           
						invoked.TaxCode                 = PrmProjectBillingOverrideTemplate.TaxCode
						invoked.ProjectServiceLocation  = PrmProjectBillingOverrideTemplate.ProjectServiceLocation
						invoked.ProductTaxCategory  	= PrmProjectBillingOverrideTemplate.ProductTaxCategory
						invoked.RevenueCodeBlockOption  = PrmProjectBillingOverrideTemplate.RevenueCodeBlockOption
						invoked.RevenuePartialAccount   = PrmProjectBillingOverrideTemplate.RevenuePartialAccount	
				  		invoked.RevenueFullAccount      = PrmProjectBillingOverrideTemplate.RevenueFullAccount				  				
							
				else
					for each PostingProjectsRel
						invoke Create ProjectBillingOverride				
							invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
							invoked.Project			        = each.Project
				    		invoked.ProjectCodeBlock	    = PrmProjectBillingOverrideTemplate.ProjectCodeBlock
			        		invoked.BillingMethod           = PrmProjectBillingOverrideTemplate.BillingMethod
							invoked.MarkupPercent           = PrmProjectBillingOverrideTemplate.MarkupPercent
							invoked.BillingRateTable		= PrmProjectBillingOverrideTemplate.BillingRateTable							
							invoked.TaxExempt               = PrmProjectBillingOverrideTemplate.TaxExempt			           
							invoked.TaxCode                 = PrmProjectBillingOverrideTemplate.TaxCode
							invoked.ProjectServiceLocation  = PrmProjectBillingOverrideTemplate.ProjectServiceLocation
							invoked.ProductTaxCategory  	= PrmProjectBillingOverrideTemplate.ProductTaxCategory
							invoked.RevenueCodeBlockOption  = PrmProjectBillingOverrideTemplate.RevenueCodeBlockOption
							invoked.RevenuePartialAccount   = PrmProjectBillingOverrideTemplate.RevenuePartialAccount	
					  		invoked.RevenueFullAccount      = PrmProjectBillingOverrideTemplate.RevenueFullAccount				  				
					
		CreateProjectContractChangeRequest is an Instance Action
			valid when (RequiresApproval)
			Parameters
				PrmChangeRequestDate		is Date			
				PrmDescription				is a Description
				PrmNewContractAmount		is a CurrencyAmount
					precision is Currency.NumberOfDecimals					
				PrmNewMaximumFees			is a CurrencyAmount	
				PrmScenario                 is a Scenario
				PrmBudgetChangeOrder        is a BudgetChangeOrder	
				PrmRequestedBy				is an Actor				
		    	PrmComment					is Text
    			PrmAttachment               is an Attachment
				PrmDocumentURL				is URL    								
			Parameter Rules
				PrmChangeRequestDate
					required
					initial value is current corporate date
					default to current corporate date
				PrmDescription	
					required
					initial value is ProjectContract.Project.DisplayProject + "_Change_Request"					
				PrmNewContractAmount
					initial value is ContractAmount					
				PrmNewMaximumFees
					initial value is MaximumFees
				PrmRequestedBy	
					initial value is actor				
					default to actor		 								
			Action Rules
				invoke Create ProjectContractChangeRequest
					fill in fields from this instance				
					invoked.Description             = PrmDescription
					invoked.NewContractAmount       = PrmNewContractAmount
					invoked.NewMaximumFees 			= PrmNewMaximumFees
					invoked.Status                  = 1
					invoked.ChangeRequestDate       = PrmChangeRequestDate 
					invoked.Scenario                = PrmScenario  
					invoked.BudgetChangeOrder       = PrmBudgetChangeOrder
					invoked.RequestedBy             = PrmRequestedBy
					invoked.Comment                 = PrmComment 
					invoked.Attachment              = PrmAttachment
					invoked.DocumentURL			    = PrmDocumentURL					   
					
#ifdef module integration					

		TriggerProjectContractAmountChangedAlert is an Instance Action
			restricted
			Parameters
				PrmPulseAlert is Alpha size 100
			Action Rules
				LocalPulseAlertFrom = PrmPulseAlert
				if (FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPulseAlertRel.Enable)
		          	if(FSMBODConfigurationDetailPulseAlertRel.Enable)
						invoke TriggerPulseAlert FSMBODConfigurationPulseAlertRel
							invoked.PrmActorGroup 	= "PROJECTCONTRACT" 
							invoked.PrmMainXML 		= ProjectContractAmountChangedAlertXML	
							invoked.PrmDescription	= ProjectContractAmountChangedAlertDescription
							invoked.PrmBODID		= DerivedProjectContractAmountChangedAlertBODID



		TriggerProjectContractStatusChangedAlert is an Instance Action
			restricted
			Parameters
				PrmPulseAlert is Alpha size 100
			Action Rules
				LocalPulseAlertFrom = PrmPulseAlert
				if (FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPulseAlertRel.Enable)
		          	if(FSMBODConfigurationDetailPulseAlertRel.Enable)
						invoke TriggerPulseAlert FSMBODConfigurationPulseAlertRel
							invoked.PrmActorGroup 	= "PROJECTCONTRACT" 
							invoked.PrmMainXML 		= ProjectContractStatusChangedAlertXML	
							invoked.PrmDescription	= ProjectContractStatusChangedAlertDescription
							invoked.PrmBODID		= DerivedProjectContractStatusChangedAlertBODID

#endif




#ifdef module ap
		GenerateContractFrontEndSplitDistributions is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDateRange			is a DateRange
				TransactionThroughDate		is Date
        		PrmAccountingEntity			is an AccountingEntity
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
				PostingDate					is Date
				Journalize					is Boolean
				PrmRunCashOffset			is Boolean
					default label is "RunCreateCashOffsets"
				PrmCashOffsetAccount		is a GeneralLedgerChartAccount
					default label is "CashOffsetAccount"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
					constraint (PrmFinanceEnterpriseGroup.FrontEndSplits)
						"FinanceEnterpriseGroupMustHaveFrontEndSplitTurnedOn"
				PostingDateRange
					required
					constraint (PostingDateRange.Begin entered
					and         PostingDateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
        		PrmAccountingEntity
        			if (PrmAccountingEntityGroup entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
        		PrmAccountingEntityGroup
        			if (PrmAccountingEntity entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	
				PostingDate
					required
        			LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalAccountingEntityGroup	= PrmAccountingEntityGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (LocalSystemClosingControlRel exists
						and LocalSystemClosingControlRel.Control)
							constraint (PostingDate within LocalSystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (LocalSystemClosingControlRel exists
								and LocalSystemClosingControlRel.Control)
									constraint (PostingDate within LocalSystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				PrmCashOffsetAccount
					if (PrmRunCashOffset)
						required
						constraint (PrmCashOffsetAccount.AccountSubType = "CASH")
							"CashOffsetAccountMustBeAccountSubType_\CASH"
					else
						cannot be entered

			Local Fields
				ErrorFound					is Boolean
				LocalErrorMessage			is Text	
				AsyncId						is a AsyncActionRequest
			Sort Order
				FinanceEnterpriseGroup
				Active
				ProjectContract
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    FrontEndSplitsEnabled
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered)
        		and   !InvoicingInProgress)
        	Action Rules
        		Instance Rules
        			ErrorFound = false
        			invoke GenerateFrontEndSplitDistributions in background


        				resume on error
							ErrorFound = true
							LocalErrorMessage = error message        				
        				invoked.PostingDateRange			= PostingDateRange
        				invoked.TransactionThroughDate		= TransactionThroughDate
        				invoked.PrmAccountingEntity			= PrmAccountingEntity
						invoked.PrmAccountingEntityGroup	= PrmAccountingEntityGroup        			
        				invoked.PostingDate					= PostingDate
        				invoked.Journalize					= Journalize
						invoked.PrmRunCashOffset			= PrmRunCashOffset
						invoked.PrmCashOffsetAccount		= PrmCashOffsetAccount
        			if (ErrorFound)
        				ErrorMessage = LocalErrorMessage
        			else
        				initialize ErrorMessage

		GenerateFrontEndSplitDistributions  is an Instance Action
			valid when (FrontEndSplitsEnabled)
			run in background
			synchronized on "GenerateFrontEndSplitDistributions:<FinanceEnterpriseGroup><ProjectContract>"
			Parameters
				PostingDateRange			is a DateRange
				TransactionThroughDate		is Date
        		PrmAccountingEntity			is an AccountingEntity
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
				PostingDate					is Date
				Journalize					is Boolean
				PrmRunCashOffset			is Boolean
					default label is "RunCreateCashOffsets"
				PrmCashOffsetAccount		is a GeneralLedgerChartAccount
					default label is "CashOffsetAccount"

			Parameter Rules
				PostingDateRange
					required
					constraint (PostingDateRange.Begin entered
					and         PostingDateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
        		PrmAccountingEntity
        			if (PrmAccountingEntityGroup entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
        		PrmAccountingEntityGroup
        			if (PrmAccountingEntity entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	
				PostingDate
					required
        			LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup					
					LocalAccountingEntityGroup	= PrmAccountingEntityGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (SystemClosingControlRel exists
								and SystemClosingControlRel.Control)
									constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				PrmCashOffsetAccount
					if (PrmRunCashOffset)
						required
						constraint (PrmCashOffsetAccount.AccountSubType = "CASH")
							"CashOffsetAccountMustBeAccountSubType_\CASH"
					else
						cannot be entered

			Local Fields
				LocalSequence		is like SequenceNumber
        		LocalSequenceNumber	is like SequenceNumber
        		TransactionCount	is like SequenceNumber
        		
			Entrance Rules
				LocalDerivedFESKey	= "PS-"+FinanceEnterpriseGroup+"-"+ProjectContract
				invoke Purge FESDistributionsByKeyLocalRel
				invoke Purge ProjectContractFESDistribution set
				invoke Purge OpenProjectContractFESResultRel
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				if (GLTransactionInterfaceRel exists)
					LocalSequence = last GLTransactionInterfaceRel.GLTransactionInterface.SequenceNumber

			Action Rules
				commit transaction
				LocalAccountingEntityGroup = PrmAccountingEntityGroup			
				for each ProjectShadowSplitRel
					LocalProject		= each.Project
					LocalDateRange		= PostingDateRange
					for each GeneralLedgerTransactionSplitRel
						for each each.GLTransactionDetailSplitRel
		    				LocalAccountingEntity = each.AccountingEntity						
							if ((each.TransactionDate <= TransactionThroughDate
							or   TransactionThroughDate not entered)
		    				and (LocalAccountingEntity = PrmAccountingEntity
		    				or   AccountingEntityGroupMemberOTOActiveRel exists))
		    					LocalSequenceNumber += 1
								RecordCount += 1
								if (RecordCount = 50)
									commit transaction
									initialize RecordCount
		    					invoke Create ProjectContractSplitTransaction set
		    						invoked.SplitTransactionKey.JournalizeGroup = LocalJournalizeGroup
		    						invoked.SplitTransactionKey.SequenceNumber  = LocalSequenceNumber
		    						invoked.GLTransactionDetail					= each.GLTransactionDetail
		    						invoked.TransactionDate						= each.TransactionDate
		    		commit transaction

				for each ProjectContractSplitTransactionRel
					TransactionCount += 1
					LocalGLTransactionDetail = each.GLTransactionDetail
					LocalSequence += 1
					RecordCount += 1
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount						
					invoke Create GLTransactionInterface
						fill in fields from LocalGLTransactionDetail
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.CreatedByFES
						if (LocalGLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							invoked.OriginatingTransaction = reference to LocalGLTransactionDetail.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
						else	
						if (LocalGLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoice")
							invoked.OriginatingTransaction = LocalGLTransactionDetail.OriginatingTransaction
						invoked.GLTransactionInterface.RunGroup 		= LocalJournalizeGroup
						invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
						invoked.Status									= 0
						invoked.ToAccountingEntity						= LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
						invoked.AccountingUnit							= LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
						invoked.AccountCode								= LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
						invoked.PostingDate								= PostingDate
						invoked.TransactionAmount						= LocalGLTransactionDetail.TransactionAmount * -1
						invoked.UnitsAmount								= LocalGLTransactionDetail.UnitsAmount * -1
						invoked.Billed									= 3
						invoked.RevenueRecognized						= 1
						invoked.Project									= LocalGLTransactionDetail.FinanceCodeBlock.Project
						invoked.FinanceDimension1						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						invoked.FinanceDimension2						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
						invoked.FinanceDimension3						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
						invoked.FinanceDimension4						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
						invoked.FinanceDimension5						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
						invoked.FinanceDimension6						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
						invoked.FinanceDimension7						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
						invoked.FinanceDimension8						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
						invoked.FinanceDimension9						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
						invoked.FinanceDimension10						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
						invoked.Ledger									= LocalGLTransactionDetail.FinanceCodeBlock.Ledger
					LocalSequence += 1
					RecordCount += 1
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount						
					invoke Create GLTransactionInterface
						fill in fields from LocalGLTransactionDetail
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.CreatedByFES
						if (LocalGLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							invoked.OriginatingTransaction = reference to LocalGLTransactionDetail.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
						else	
						if (LocalGLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoice")
							invoked.OriginatingTransaction = LocalGLTransactionDetail.OriginatingTransaction
						invoked.GLTransactionInterface.RunGroup 		= LocalJournalizeGroup
						invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
						invoked.Status									= 0
						invoked.ToAccountingEntity						= LocalGLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
						invoked.AccountingUnit							= LocalGLTransactionDetail.FinanceCodeBlock.AccountingUnit
						invoked.AccountCode								= LocalGLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
						invoked.Reference								= "FrontEndSplit"
						invoked.PostingDate								= PostingDate
						invoked.TransactionAmount						= LocalGLTransactionDetail.TransactionAmount
						invoked.UnitsAmount								= LocalGLTransactionDetail.UnitsAmount
						invoked.Project									= LocalGLTransactionDetail.FinanceCodeBlock.Project
						invoked.FinanceDimension1						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						invoked.FinanceDimension2						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension2
						invoked.FinanceDimension3						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension3
						invoked.FinanceDimension4						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension4
						invoked.FinanceDimension5						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension5
						invoked.FinanceDimension6						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension6
						invoked.FinanceDimension7						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension7
						invoked.FinanceDimension8						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension8
						invoked.FinanceDimension9						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension9
						invoked.FinanceDimension10						= LocalGLTransactionDetail.FinanceCodeBlock.FinanceDimension10
						invoked.Ledger									= LocalGLTransactionDetail.FinanceCodeBlock.Ledger
					invoke UpdateSplitStatus LocalGLTransactionDetail
				if (TransactionCount > 0)
					invoke Create ProjectContractFESResult
						fill in fields from this instance
						invoked.AccountingEntity		= PrmAccountingEntity
						invoked.AccountingEntityGroup	= PrmAccountingEntityGroup
						invoked.SelectedDateRange 		= PostingDateRange
						invoked.SelectedThroughDate		= TransactionThroughDate
						invoked.PostingDate 			= PostingDate
						invoked.RunTime					= current timestamp
						invoked.TransactionCount		= TransactionCount

			Exit Rules
				invoke PurgeAll ProjectContractSplitTransaction
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmProjectContract		  = ProjectContract
					invoked.PrmJournalizeGroup		  = LocalJournalizeGroup
				invoke Update first OpenProjectContractFESResultRel
					invoked.JournalizeGroup = LocalJournalizeGroup
				invoke Purge ProjectContractFESDistribution set
				invoke FrontEndSplitTransactions GLTransactionInterface in background
					invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmRunGroup				= LocalJournalizeGroup
					invoked.PrmInterface			= true
					invoked.PrmJournalizeByEntity	= true
					invoked.PrmEditAndInterface		= true
					invoked.PrmRunCashOffset		= PrmRunCashOffset
					invoked.PrmCashOffsetAccount	= PrmCashOffsetAccount

		JournalizeContractFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group

		JournalizeFrontEndSplitDistributions is an Instance Action
			restricted

		RemoveFrontEndSplitDistributions is an Instance Action
			restricted

		SelectTransactionsForReallocation is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDateRange			is a DateRange
				TransactionDateRange		is a DateRange
				FundingSource1				is a FinanceDimension2
				FundingSource2				is a FinanceDimension2
				Billed						is Numeric 1
        		    States
        		    	Both				value is 0
                		Unprocessed			value is 1
		                Processed			value is 2
			   	System						is a GeneralLedgerSystemCode
				GeneralLedgerEvent
				AppendToCurrentSelection	is Boolean
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDateRange
					required
					constraint (PostingDateRange.Begin entered
					and         PostingDateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				FundingSource1
					constraint (FundingSource1.DimensionType.Posting)
						"<PrmFinanceEnterpriseGroup.FinanceDimension2Label>MustBePostingType"
				FundingSource2
					constraint (FundingSource2.DimensionType.Posting)
						"<PrmFinanceEnterpriseGroup.FinanceDimension2Label>MustBePostingType"
			Local Fields
				AsyncId						is a AsyncActionRequest
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    FrontEndSplitsEnabled
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			initialize AsyncId
					if (!AppendToCurrentSelection)
						invoke PurgeAll ProjectContractReallocationSelection in background
							assign async action request id to AsyncId
							invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
							invoked.PrmProjectContract		  = ProjectContract
					invoke SelectTransactionsToReallocate ProjectShadow in background
						run after AsyncId
		                invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
		                invoked.PrmSummaryProject			= ProjectContract
						invoked.PostingDateRange			= PostingDateRange
						invoked.TransactionDateRange		= TransactionDateRange
						invoked.FundingSource1				= FundingSource1
						invoked.FundingSource2				= FundingSource2
						invoked.Billed						= Billed
					   	invoked.System						= System
						invoked.Event						= GeneralLedgerEvent
						invoked.AppendToCurrentSelection	= AppendToCurrentSelection

		SelectTransactionsToReallocate is an Instance Action
			valid when (FrontEndSplitsEnabled)
			completion message is "ReallocationSelectionSubmitted"
			Parameters
				PostingDateRange			is a DateRange
				TransactionDateRange		is a DateRange
				PostingProject				is a Project
				FundingSource1				is a FinanceDimension2
				FundingSource2				is a FinanceDimension2
				Billed						is Numeric 1
        		    States
        		    	Both				value is 0
                		Unprocessed			value is 1
		                Processed			value is 2
			   	System						is a GeneralLedgerSystemCode
				GeneralLedgerEvent
				AppendToCurrentSelection	is Boolean
			Parameter Rules
				PostingDateRange
					required
					constraint (PostingDateRange.Begin entered
					and         PostingDateRange.End entered)
						"BothBeginAndEndPostingDateRequired"
				PostingProject
					if (PostingProject entered)
						LocalSummaryProject	= ProjectContract
						LocalProject		= PostingProject
						constraint (PostingInSummaryRel.Project.ProjectType.Posting)
							"<FinanceEnterpriseGroup.ProjectLabel>MustBeAPostingDescendantOf<ProjectContract.DisplayContract>"
				FundingSource1
					if (FundingSource1 entered)
						LocalFinanceDimension2 = FundingSource1
						constraint (ProjectFundingSourceRel exists)
							"FundingSourceDoesNotExistForContract"
				FundingSource2
					if (FundingSource2 entered)
						LocalFinanceDimension2 = FundingSource2
						constraint (ProjectFundingSourceRel exists)
							"FundingSourceDoesNotExistForContract"
			Local Fields
				AsyncId						is a AsyncActionRequest
			Entrance Rules
				if (!AppendToCurrentSelection)
					invoke PurgeAll ProjectContractReallocationSelection in background
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmProjectContract		  = ProjectContract
			Action Rules
				invoke SelectTransactionsToReallocate ProjectShadow in background
					run after AsyncId
	                invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
	                invoked.PrmSummaryProject			= ProjectContract
	                invoked.PrmProject					= PostingProject
					invoked.PostingDateRange			= PostingDateRange
					invoked.TransactionDateRange		= TransactionDateRange
					invoked.FundingSource1				= FundingSource1
					invoked.FundingSource2				= FundingSource2
					invoked.Billed						= Billed
				   	invoked.System						= System
					invoked.Event						= GeneralLedgerEvent
					invoked.AppendToCurrentSelection	= AppendToCurrentSelection

		ReverseAndReallocateContractSelectedTransactions is a Set Action
			restricted
			synchronized on "ProjectContract:<PrmFinanceEnterpriseGroup><ContractGroup>"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				ContractGroup				is a ProjectContract group
				PostingDate					is Date
				PrmRunCashOffset			is Boolean
					default label is "RunCreateCashOffsets"
				PrmCashOffsetAccount		is a GeneralLedgerChartAccount
					default label is "CashOffsetAccount"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PostingDate
					required
				PrmCashOffsetAccount
					if (PrmRunCashOffset)
						required
						constraint (PrmCashOffsetAccount.AccountSubType = "CASH")
							"CashOffsetAccountMustBeAccountSubType_\CASH"
					else
						cannot be entered
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectContractReallocationSelectionsExist
        		and   (ProjectContract within ContractGroup
        		or     ContractGroup not entered))
        	Action Rules
        		Instance Rules
        			invoke ReverseAndReallocateSelectedTransactions in background
        				resume on error
        				invoked.PostingDate				= PostingDate
						invoked.PrmRunCashOffset		= PrmRunCashOffset
						invoked.PrmCashOffsetAccount	= PrmCashOffsetAccount
					
		ReverseAndReallocateSelectedTransactions is an Instance Action
			valid when (ProjectContractReallocationSelectionsExist)
			run in background
			Parameters
				PostingDate				is Date
				PrmRunCashOffset		is Boolean
					default label is "RunCreateCashOffsets"
				PrmCashOffsetAccount	is a GeneralLedgerChartAccount
					default label is "CashOffsetAccount"
			Parameter Rules
				PostingDate
					required
				PrmCashOffsetAccount
					if (PrmRunCashOffset)
						required
						constraint (PrmCashOffsetAccount.AccountSubType = "CASH")
							"CashOffsetAccountMustBeAccountSubType_\CASH"
					else
						cannot be entered

			Local Fields
        		LocalSequence		is like SequenceNumber
				TransactionCount	is like SequenceNumber

			Entrance Rules
				invoke Purge OpenProjectContractReallocationResultRel
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				if (GLTransactionInterfaceRel exists)
					LocalSequence = last GLTransactionInterfaceRel.GLTransactionInterface.SequenceNumber

			Action Rules
				for each ProjectContractReallocationSelection set
					LocalSequence += 1
					RecordCount += 1
					TransactionCount += 1
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount						
					invoke Create GLTransactionInterface
						fill in fields from each.GLTransactionDetail
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.CreatedByFES
							except invoked.AutoReverse
						if (each.GLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							invoked.OriginatingTransaction = reference to each.GLTransactionDetail.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
						else	
						if (each.GLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoice")
							invoked.OriginatingTransaction = each.GLTransactionDetail.OriginatingTransaction
						invoked.GLTransactionInterface.RunGroup 		= LocalJournalizeGroup
						invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
						invoked.Status									= 0
						invoked.ToAccountingEntity						= each.GLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
						invoked.AccountingUnit							= each.GLTransactionDetail.FinanceCodeBlock.AccountingUnit
						invoked.AccountCode								= each.GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
						invoked.Reference								= "FrontEndSplitReversal"
						invoked.PostingDate								= PostingDate
						invoked.TransactionAmount						= each.GLTransactionDetail.TransactionAmount * -1
						invoked.UnitsAmount								= each.GLTransactionDetail.UnitsAmount * -1
						invoked.Billed									= 0
						invoked.RevenueRecognized						= 0
						invoked.Capitalize								= 0
						invoked.IndirectBurden							= 0
						invoked.Project									= each.GLTransactionDetail.FinanceCodeBlock.Project
						invoked.FinanceDimension1						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						invoked.FinanceDimension2						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension2
						invoked.FinanceDimension3						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension3
						invoked.FinanceDimension4						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension4
						invoked.FinanceDimension5						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension5
						invoked.FinanceDimension6						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension6
						invoked.FinanceDimension7						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension7
						invoked.FinanceDimension8						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension8
						invoked.FinanceDimension9						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension9
						invoked.FinanceDimension10						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension10
						invoked.Ledger									= each.GLTransactionDetail.FinanceCodeBlock.Ledger
					LocalSequence += 1
					RecordCount += 1
					if (RecordCount = 50)
						commit transaction
						initialize RecordCount						
					invoke Create GLTransactionInterface
						fill in fields from each.GLTransactionDetail
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.CreatedByFES
							except invoked.AutoReverse
						invoked.OriginatingTransaction					= reference to each.GLTransactionDetail			
						if (each.GLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							invoked.OriginatingTransaction = reference to each.GLTransactionDetail.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
						else	
						if (each.GLTransactionDetail.OriginatingTransaction.BusinessClassName = "PayablesInvoice")
							invoked.OriginatingTransaction = each.GLTransactionDetail.OriginatingTransaction
						invoked.GLTransactionInterface.RunGroup 		= LocalJournalizeGroup
						invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
						invoked.Status									= 0
						invoked.ToAccountingEntity						= each.GLTransactionDetail.FinanceCodeBlock.ToAccountingEntity
						invoked.AccountingUnit							= each.GLTransactionDetail.FinanceCodeBlock.AccountingUnit
						invoked.AccountCode								= each.GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
						invoked.Reference								= "FrontEndSplitReallocation"
						invoked.PostingDate								= PostingDate
						invoked.TransactionAmount						= each.GLTransactionDetail.TransactionAmount
						invoked.UnitsAmount								= each.GLTransactionDetail.UnitsAmount
						invoked.Billed									= 0
						invoked.RevenueRecognized						= 0
						invoked.Capitalize								= 0
						invoked.IndirectBurden							= 0
						invoked.Project									= each.GLTransactionDetail.FinanceCodeBlock.Project
						invoked.FinanceDimension1						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension1
						invoked.FinanceDimension2						= blank
						invoked.FinanceDimension3						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension3
						invoked.FinanceDimension4						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension4
						invoked.FinanceDimension5						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension5
						invoked.FinanceDimension6						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension6
						invoked.FinanceDimension7						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension7
						invoked.FinanceDimension8						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension8
						invoked.FinanceDimension9						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension9
						invoked.FinanceDimension10						= each.GLTransactionDetail.FinanceCodeBlock.FinanceDimension10
						invoked.Ledger									= each.GLTransactionDetail.FinanceCodeBlock.Ledger
				if (TransactionCount > 0)
					invoke Create ProjectContractReallocationResult
						fill in fields from this instance
						invoked.PostingDate 			= PostingDate
						invoked.RunTime					= current timestamp
						invoked.TransactionCount		= TransactionCount

			Exit Rules
				invoke Update first OpenProjectContractReallocationResultRel
					invoked.JournalizeGroup = LocalJournalizeGroup
				invoke PurgeAll ProjectContractReallocationSelection in background
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmProjectContract			= ProjectContract
				invoke FrontEndSplitTransactions GLTransactionInterface in background
					invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmRunGroup				= LocalJournalizeGroup
					invoked.PrmInterface			= true
					invoked.PrmJournalizeByEntity	= true
					invoked.PrmEditAndInterface		= true
					invoked.PrmRunCashOffset		= PrmRunCashOffset
					invoked.PrmCashOffsetAccount	= PrmCashOffsetAccount
#endif
		ConvertDeferAndHoldFlag is a Set Action
			restricted
			Instance Selection
				where (DeferAndHoldRemainder)
			Action Rules
				Set Rules
					Exit Rules
						invoke ConvertDeferAndHoldFlag ProjectUpload					
				Instance Rules
					RemainderOption = 2
					DeferAndHoldRemainder = false


										
