RecallNotice is a BusinessClass
    owned by recall
    prefix is RMRN

    Ontology
    	symbolic key is RecallNotice
    
    Patterns
        implements CompoundDocument
        	Document Components
				RecallProduct set
				RecallNoticeDomain set
				RecallNoticeTask set
				RecallNoticeReference set
				RecallNotification set
				RecallComment set
					
    Persistent Fields
    	Name 							is Alpha size 100
    	Description 					is Text
    	Status							is Numeric size 2
    		States
    			Pending						value is 1
    			Active 						value is 2
    			AwaitingApproval			value is 3
    			NotApplicable				value is 4 
	            Closed						value is 5
	            ClosedAsDuplicate			value is 6
	            CompletedResolutionsPending value is 7
				CompletedItemCreationPending value is 8
	    ClosedAsDuplicate				is Boolean
	    WorkingId						is Alpha size 30
			default label is "WorkingID"						
		ProposedContract                is a Contract
	   	ProposedItem                    is Numeric size 1
	   		States
	   			NotApplicable               value is 0
	   			ProposedSubmitted           value is 1
	   			Approved                    value is 2
	   			Rejected                    value is 3
	   			ProposedNotSubmitted        value is 4
				ApprovedPendingTrial	    value is 5
		ProposedItemAttachment          is an Attachment
		ProposalItemEntryMethod         is Numeric 1
			default label is "ItemEntryMethod"
			States 
				Online                      value is 1
				Attachment                  value is 2
		TrialEndDate                    is TimeStamp
	    EntryMechanism					is Numeric size 2
	    	States
	    		ManualEntry					value is 1
	    		RecallPortal				value is 2
	    		SupplierPortal				value is 3
	    		ThirdPartyInterface			value is 4
	    		RSSFeed						value is 5
	    		Requisitions                value is 6
	    RecallSource					is Numeric size 2
	    	default label is "Source"
	    	States
	    		Internal					value is 1
	    		ThirdParty					value is 2
	    		FDA							value is 3
	    		Supplier					value is 4
	    		Manufacturer				value is 5
		Vendor
		Supplier
	    ManufacturerCodeDivision        is a Manufacturer
	    ManufacturerName 	    		is a Description
	    ManufacturerGln					is a GlobalLocationNumber
	    	default label is "ManufacturerGLN"
	    ManufacturerAddress				is a PostalAddressV2	
	    	holds pii
    	ManufacturerContact				is an PersonName 
    		holds pii
    	ManufacturerPhone			    is a TelephoneNumber 
    		holds pii
    	ManufacturerEmail               is an EmailAddress 
    		holds pii
	    ManufactureDateRange			is a DateRange 		
	    DistributionDateRange			is a DateRange 		
	    LastTransactionQueryDateRange	is a DateRange
	    RecallCoordinator				is a RecallUser
	    	default label is "Coordinator"
	    RecallType
	    Equipment						is Boolean
	    RecallDate						is Date
	    	default label is "AnnouncementDate"
	    RecallReceivedDate				is Date
	    	default label is "ReceivedDate"
    	RecallTaskInstruction 
    	TaskInstructionDescription 
    	FDAClassification				is Numeric size 2
    		States
    			ClassI						value is 1
    			ClassII						value is 2
    			ClassIII					value is 3
    	FDADistrict						is a Description
    	FDAComments						is Alpha size up to 1000
    	RecallSearchDocument			is Text
    		default label is "Keyword"
    		sql name is RMSEARCHDOC 
    		text searchable
    		disable Auditing
    	ReportedByRecallUser			is an Employee 
    	ReportedBySupplier				is a NotifiedSupplier
    	ReleasedTimestamp				is TimeStamp
    	ApprovalTimestamp				is TimeStamp
    	NotApplicableTimestamp			is TimeStamp
    	ClosedTimestamp					is TimeStamp
    	FinalizedDate					is TimeStamp
   		LastProductActivityQuery		is TimeStamp
   		LastUpdateToProducts			is TimeStamp
   		SavedTransactionQueryParameters
		DaysInPendingStatus             is Numeric size 4
		DaysInActiveStatus              is Numeric size 4
		DaysUntilFinalized              is Numeric size 4
		DaysInAwaitingApprovalStatus    is Numeric size 4
		QuantityRequired                is Boolean
			default label is "ResponderMustIndicateIfQuantityFound"
		HasItemsOnOtherNotices          is Boolean
   		RestrictPurchaseOrderCreation       is Numeric size 2
			States
				No                          value is 0
				Warning                     value is 1
				HardError                   value is 2
		RestrictRequisitionCreation         is Numeric size 2
			States
				No                          value is 0
				Warning                     value is 1
				HardError                   value is 2
		RestrictInventoryIssue              is Numeric size 2
			States
				No                          value is 0
				Warning                     value is 1
				HardError                   value is 2
		RestrictInventoryReceipt            is Numeric size 2
			States
				No                          value is 0
				Warning                     value is 1
				HardError                   value is 2
		SerialOrLotNumbersExist             is Boolean
		CreateItemBeforeRequisition         is Boolean
   		
   	Transient Fields
   		CustomRecallSelection			is a RecallNotice group
		TransientNoticeDocument			is BinaryDocument   		
   	Context Fields	
		RecallNoticeDateRange			is a DateRange 
		RecallReceivedDateRange			is a DateRange 
		Item                            
		RecallReport
		RecallReportPeriod
				
	Local Fields
		LocalCounter					is Numeric size 2
		LocalPriority				 	is Numeric size 2
			States
				High						value is 1
				Medium						value is 2
				Low							value is 3
		LocalDueDate					is TimeStamp
		LocalLinkedNotice				is a RecallNotice
		LocalEmail						is an EmailAddress 
			holds pii
		TempContent						is Text
		TrialRequisition				is a Requisition view
		TrialRequisitionLine            is a RequisitionLine view
		LocalTrialItemCompany           is a Company
		LocalTrialItemRequisition       is like Requisition
		LocalFromNotice                 is a RecallNotice
		LocalRecallGroup                is like RecallGroup
		LocalRecallNotice               is like RecallNotice
		LocalInventoryCompany           is like InventoryCompany
		LocalInventoryLocation          is like InventoryLocation
		LocalRequestingLocation         is like RequestingLocation
		TimeStampInGMT
		LocalActor                      is an Actor
		LocalFromOverrideApproval       is Boolean
		LocalFromOverrideRejection      is Boolean
		FromWorkDateString			    is Alpha 8
		CommitCount	                    is Numeric 3
		LocalStartDate				    is Alpha 10
		LocalEndDate				    is Alpha 10
		ToWorkDateString                is Alpha 8	
		NRACNotices						is XMLDocument
		LocalRecallDate					is an XMLElement
		LocalWorkingId					is Alpha size 30
		LotSerialLocalWorkingId         is Alpha size 30
		LocalManufacturer				is a Description	
		LocalValue						is Alpha size 1000
		LocalTextValue              	is Text
		LocalName						is Alpha size 1000
		LocalCode						is Alpha 100			
	Derived Fields
	
		RepresentativeText is a StringField
			type is Text
			default label is "Notice"
			RecallNotice " - " Name 
		
		DerivedReleaseDate is a DerivedField
			type is Date
			restricted
			TimeStampInGMT.Value = ReleasedTimestamp
			return TimeStampInGMT.CorporateDate
		
		DerivedRecallNotice is a DerivedField
			type is Alpha size 8
			restricted
			if (RecallNotice exists)
				return RecallNotice
			else
				return blank
		
		DerivedAppsValue				is a DerivedField
			type is like PfiAppsValue
			return "RecallApproval" + UniqueID
			
		UserActionRoutingAsHtml			is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml
		
		YellowAlertDate is a ComputeField
			type is TimeStamp
			restricted
			(RecallReceivedDate + RecallType.RecallAlerts.YellowAlert as days)

		RedAlertDate is a ComputeField
			type is TimeStamp
			restricted
			(RecallReceivedDate + RecallType.RecallAlerts.RedAlert as days)
		
		DaysSinceCreated is a ComputeField
			type is Numeric size 4
			restricted
			(current corporate date - create date) 
		
		DaysSinceReceived is a ComputeField
			type is Numeric size 4
			restricted
			(current corporate date - RecallReceivedDate)
					
		RecallProductItemCount is a DerivedField 
			type is Numeric size 5
			return (instance count of RecallProductItemRel) 
		
		DomainCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNoticeDomain set exists)
				return "(" + instance count of RecallNoticeDomain set + ")"
			else
				return ""
		
		ProductCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallProduct set exists)
				return "(" + instance count of RecallProduct set + ")"
			else
				return ""
				
		TaskCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNoticeTaskNotItemProposalRel exists)
				return "(" + instance count of RecallNoticeTaskNotItemProposalRel + ")"
			else
				return ""
		
		ReferenceCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNoticeReference set exists)
				return "(" + instance count of RecallNoticeReference set + ")"
			else
				return ""
		
		CommentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallComment set exists)
				return "(" + instance count of RecallComment set + ")"
			else
				return ""
				
		ReviewerIndicator is a DerivedField 
			type is Alpha size up to 20
			restricted 
			if (ItemProposalTaskRel exists)
				return "*"
			else	
				return ""

		NotificationCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNotification set exists)
				return "(" + instance count of RecallNotification set + ")"
			else
				return ""
		
		NotificationIndicator is a DerivedField
			type is Alpha size up to 20
			if (RecallNotification set exists
			or  RecallAdhocNotificationRel exists)
				return "*"
			else
				return ""

		NRACURL is a DerivedField 
			type is Alpha 200 
			default label is "URL"
			if (NRACReferenceRel exists)
				return "SupportingDocument: " + first NRACReferenceRel.Link
			else 
				return blank
		
		QandACount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNoticeQandA set exists)
				return "(" + instance count of RecallNoticeQandA set + ")"
			else
				return ""
		
		NotificationLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallResponder navigation is PortalRecallDocumentReport text is \"here\" session key RecallGroup is RecallGroup)>"
			
		DocumentLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallResponder navigation is PortalAuditReport allow anonymous access show form only text is \"RecallNotice\")>"
			
		TaskLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallResponder navigation is TaskNavigation text is \"here\" session key RecallGroup is RecallGroup)>"

		ItemReviewLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallCoordinator navigation is MainNoticeNav text is \"here\" session key RecallGroup is RecallGroup)>"
		
    	NotApplicableTimestampDateOnly is a StringField
    		type is Date
    		NotApplicableTimestamp date
    	
    	ClosedTimestampDateOnly is a StringField
    		type is Date
    		ClosedTimestamp date
    	
		RecallCoordinatorEmail is a DerivedField 
			type is EmailAddressField
			holds pii
			restricted
			return RecallCoordinator.EmployeeWorkEmailAddress

		DerivedEmailSubject is a MessageField
			restricted
			"RecallNotice<RecallNotice>:_<RecallNotice.Name>"
						
		DerivedQueryBeginDate is a StringField
			type is Alpha 10
			LastTransactionQueryDateRange.Begin month
			"/"
			LastTransactionQueryDateRange.Begin day
			"/"
			LastTransactionQueryDateRange.Begin year
    		    
		DerivedQueryEndDate is a StringField
			type is Alpha 10
			LastTransactionQueryDateRange.End month
			"/"
			LastTransactionQueryDateRange.End day
			"/"
			LastTransactionQueryDateRange.End year
    		    
		DerivedNoticeNumber is a DerivedField
			type is Alpha 8
			restricted
			return RecallNotice
		
		ProductMessage is a MessageField
			restricted
			"Product:"
			
		DescriptionMessage is a MessageField
			restricted
			"Description:"
		
		DerivedProductList is a DerivedField
			type is Text
			restricted
			initialize TempContent
			for each RecallProduct set
				TempContent += ProductMessage + each.ProductName  
				TempContent	+= RecallGroup.NewLine
				TempContent	+= DescriptionMessage + each.ProductDescription 
				TempContent	+= RecallGroup.NewLine
			return TempContent

		RemainingQuantity is a DerivedField		
			type is like Quantity 		
			restricted	
			return (sum RecallProductItem set.RemainingQuantity)
			

		MobileNoticeAndNameLabel is a LabelField
			"<RecallNotice>_-_<Name>"

		MobileNoticeStatus is a DerivedField
			type is Alpha 30
			default label is "Status"
			if (Status.Pending)
				return "Pending"
			if (Status.Active)
				return "Active"
			if (Status.AwaitingApproval)
				return "Awaiting Approval"
			if (Status.NotApplicable)
				return "Not Applicable"
			if (Status.Closed)
				return "Closed"
			if (Status.ClosedAsDuplicate)
				return "Closed As Duplicate"
			if (Status.CompletedResolutionsPending)
				return "Completed Resolutions Pending"
			if (Status.CompletedItemCreationPending)
				return "Completed Item Creation Pending"

		NoticeRepresentativeText is a LabelField
			"Notice<RecallNotice>_-_<RecallNotice.Name>"

			 
   	Field Groups
   		TextIndexFields
   			RecallNotice
   			Name
   			Description
   			ManufacturerName
   		
   	Field Rules
   		Name
   			required
   				"NameIsRequired"
   		
   		Description
   			required
   				"DescriptionIsRequired"
		
		WorkingId
			default to first UseAsWorkingIdRel.IdentifierId
			default to RecallNotice
		
		RecallCoordinator
   			constraint (RecallCoordinator.IsRecallCoordinator)
				"CanOnlySelectACoordinator"
   		
   		RecallType
   			if (RecallType changed)
   				FDAClassification = RecallType.DefaultFDAClassification
   		
   		Equipment
   			if (Equipment changed)
				if (LastProductActivityQuery entered)
					cannot be changed
						"CannotChangeEquipmentOptionAfterProductTransactionQueryHasBeenRun"				
				if (Equipment = true)
					for each RecallProductItemRel 
						invoke Delete each
					for each RecallProduct set 
						for each each.RecallProductSerial set 
							invoke Create RecallEquipmentSerial 
								invoked.RecallGroup 			= RecallGroup 
								invoked.RecallNotice 			= RecallNotice
								invoked.RecallProduct           = each.RecallProduct
								invoked.RecallEquipmentSerial	= each.RecallProductSerial 
							invoke Delete each								
				else
				if (Equipment = false) 
					for each RecallProduct set 
						invoke Update each 
							initialize invoked.ModelNumber 
						for each each.RecallEquipmentSerial set 
							invoke Create RecallProductSerial 
								invoked.RecallGroup 	    = RecallGroup 
								invoked.RecallNotice 	    = RecallNotice
								invoked.RecallProduct       = each.RecallProduct
								invoked.RecallProductSerial	= each.RecallEquipmentSerial 
							invoke Delete each 					 

   		RecallDate
   			required
   				"AnnouncementDateIsRequired"
   		
   		RecallReceivedDate
   			initial value is current corporate date
   			required
   				"ReceivedDateIsRequired"
    	
    	QuantityRequired
    		initial value is RecallGroup.QuantityRequired
    	
    	ManufacturerCodeDivision
    		if (ManufacturerCodeDivision changed)
    			invoke FastUpdate RecallProduct set
    				invoked.PrmManufacturerCode = ManufacturerCodeDivision
    	
    	ManufacturerName
    		initial value is ManufacturerCodeDivision.Description
    		if (ManufacturerCodeDivision entered)
    			force default to ManufacturerCodeDivision.Description
	    
    	TaskInstructionDescription
    		initial value is RecallTaskInstruction.Description
			default to RecallTaskInstruction.Description

		RecallNotice
	    	constraint (ManufactureDateRange.Begin <= current corporate date)
	    		"ManufactureBeginDateMustBeLessThanOrEqualToCurrentDate"
				    	
	    	constraint (ManufactureDateRange.End <= current corporate date)
	    		"ManufactureEndDateMustBeLessThanOrEqualToCurrentDate"
				    	
	    	constraint (DistributionDateRange.Begin <= current corporate date)
	    		"DistributionBeginDateMustBeLessThanOrEqualToCurrentDate"
				    	
	    	constraint (DistributionDateRange.End <= current corporate date)
	    		"DistributionEndDateMustBeLessThanOrEqualToCurrentDate"
				    	
	    	if (DistributionDateRange.Begin entered
	    	and ManufactureDateRange.Begin entered)
	    		constraint (DistributionDateRange.Begin >= ManufactureDateRange.Begin)
					"DistributionBeginDateCannotBePriorToManufactureBeginDate"
	    				
		Vendor
			if (Supplier entered)
				if (Vendor entered)
					constraint (Vendor = Supplier.Vendor)
						"VendorDoesNotMatchSupplier"
			else
			if (Vendor entered)
				Supplier = first SupplierRel.Supplier
				
	    				
		Supplier
			if (Vendor entered)
				if (Supplier entered)
					constraint (Vendor = Supplier.Vendor)
						"VendorDoesNotMatchSupplier"
			else
			if (Supplier entered)
				Vendor = Supplier.Vendor
				
	    				
		ManufacturerGln
			if (ManufacturerGln entered)
				if (Vendor entered)
					constraint (ManufacturerGln = Vendor.GlobalLocationNumber)
						"MismatchBetweenManufacturerGLNAndVendor"
				else
					Vendor = first VendorGlnRel.Vendor
					Supplier = first SupplierRel.Supplier

	Rule Blocks
		BuildTextIndexes
			build text search field RecallSearchDocument
				Fields
					TextIndexFields
					RecallNoticeReference set.IdentifierId
					RecallProduct set.ProductName
		   			RecallProduct set.ProductDescription
		   			RecallProduct set.ManufacturerInformation
		   			RecallProductItem set.Item
		   			RecallProductItem set.Description

		BuildRecallNoticeTaskStatus
    		LocalCounter = 1
			while (LocalCounter <= 3)
				if (!RecallNoticeTaskStatusRel exists)
					invoke Create RecallNoticeTaskStatus
						invoked.RecallGroup				= RecallGroup
						invoked.RecallNotice			= RecallNotice
						invoked.RecallNoticeTaskStatus	= LocalCounter
				LocalCounter +=1

		CountAndCommit
			CommitCount += 1
			if (CommitCount > 500)
				commit transaction
				CommitCount = 0		
					
	Conditions
  		PendingRecallNotice
  			restricted
  			when (Status.Pending)
  		
  		PossibleDuplicateWorkingId
  			when (DuplicateWorkingIdRel exists)
  		
  		PossibleDuplicateDescription
  			restricted
  			when (DuplicateDescriptionRel exists)
  			
		CanCloseAsNotApplicable
 			restricted
 			when (!HasRecallTasks
 			and   !ItemProposal
 			and   !HasResolutions)
 		
 		TrialEndDateEntered
 			restricted
 			when (TrialEndDate entered)
 			
		PastTrialEndDate
			restricted
			when (current corporate date > TrialEndDate
			and   TrialEndDate entered)

		HasUpdatedNotice
			restricted
			when (UpdatedNoticeRel exists)
			
		IsUpdatedNotice
			restricted
			when (NoticeUpdateReferenceRel exists)

  		ActiveRecallNotice
  			restricted
   			when (Status.Active
   			or    Status.CompletedResolutionsPending
   			or	  Status.AwaitingApproval)   		
   		
   		NoticeWithActivity
   			restricted
   			when (!Status.Pending
   			and    HasNonItemProposalTasks)

		CanCreateTrialRequisitions
			restricted
			when (ProposedItem.ApprovedPendingTrial
			and   TrialEndDate !entered
			and  (!CreateItemBeforeRequisition
			or   (CreateItemBeforeRequisition
			and   AllProductsHaveItems)))
   		
 		HaveCreatedTrialRequisitions
 			restricted
 			when (CanCreateTrialRequisitions
 			and   HasTrialRequisitions)
 		
 		HasSelectionsForTrialRequisitions
 			restricted
 			when (ProductSelectionsExist
 			and   CompaniesAndLocationsSelectionsExist)
 
		ProductSelectionsExist
			restricted
			when (SelectedTrialItemProductsRel exists)
		
		CompaniesAndLocationsSelectionsExist
			restricted
			when (SelectedTrialItemCompaniesAndLocationsRel exists)

 		CanDisplayTrialItemCompaniesAndLocations
			restricted
			when (ProposedItem.ApprovedPendingTrial
			or    HasTrialItemCompaniesAndLocations)
 		
 		HasTrialItemCompaniesAndLocations
 			restricted
 			when (TrialItemCompaniesAndLocations set exists)
 		
 		AllProductsHaveItems
 			restricted
 			when (!ProductWithNoItemRel exists)
 
   		ProposedContractEntered
   			restricted
   			when (ProposedContract entered)
   		
   		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)
   		
   		HistoricalRecallNotice
   			restricted
   			when (Status.NotApplicable
   			or	  Status.Closed
   			or    Status.ClosedAsDuplicate)
   		
   		ClosedNotice
   			restricted
   			when (Status.Closed
   			or    Status.ClosedAsDuplicate)
   		
   		PendingStatus
   			restricted
   			when (Status.Pending)
   		
   		NotPendingStatus
   			restricted
   			when (Status.Active
			or    Status.CompletedResolutionsPending
   			or	  Status.AwaitingApproval  		
   			or	  Status.NotApplicable
   			or	  Status.Closed
   			or    Status.ClosedAsDuplicate)
   			
  		ApplicableRecallNotice
  			restricted
   			when (Status.Active
   			or    Status.CompletedResolutionsPending
   			or	  Status.AwaitingApproval   		
   			or	  Status.Closed)

   		RecallNoticeUpdatable
   			restricted
  			when (Status.Pending)
   		
   		HasRecallNoticeDomains
   			restricted
   			when (RecallNoticeDomain set exists)
   		
   		HasRecallProducts
   			restricted
  			when (RecallProduct set exists)
  		
  		HasRecallComments
  			restricted
  			when (RecallComment set exists)
  		
  		HasRecallReferences
  			restricted
  			when (RecallNoticeReference set exists)
  		
  		HasRecallNotifications
  			restricted
  			when (RecallNotification set exists)
  		
  		HasRecallTasks
  			restricted
   			when (RecallNoticeTask set exists)
   		
		HasTransactionTasks
			when (TransactionTaskRel exists)

   		HasNonItemProposalTasks
   			restricted
   			when (RecallNoticeTaskNotItemProposalRel exists)
   	
   		HasRecallQandA
   			restricted
   			when (RecallNoticeQandA set exists)
  		
  		HasEmails
  			restricted
  			when (RecallNoticeEmail set exists)
  			
  		CannotBeTrue   
  			restricted
  			when (FDATypeOne
  			and   !FDATypeOne)
  		
  		FDATypeOne
  			restricted
  			when (FDAClassification = 1)
  		
  		RecallWithinDateRange
  			restricted
			when (create date within RecallNoticeDateRange)
			
  		RecallNoticeExists
  			restricted
  			when (RecallNotice entered)
  		
  		SupplierCanUpdate
  			restricted
  			when (!RecallNoticeExists
  			or   (RecallNoticeExists
  			and   ProposedItem.ProposedNotSubmitted))
  		
  		SupplierCannotUpdate
  			restricted
  			when (ProposedItem.ProposedSubmitted
  			or    ProposedItem.Rejected
  			or    ProposedItem.Approved
  			or    ProposedItem.ApprovedPendingTrial)
  		
  		ShowYellowAlert
  			restricted
  			when (!HistoricalRecallNotice
  			and   RecallType.RecallAlerts.YellowAlert entered
  			and  ((RecallType.RecallAlerts.RedAlert entered
  			and    current corporate date >= YellowAlertDate
  			and    current corporate date < RedAlertDate)
  			or	  (!RecallType.RecallAlerts.RedAlert entered
  			and    current corporate date >= YellowAlertDate)))
  		
  		ShowRedAlert
  			restricted
  			when (!HistoricalRecallNotice
  			and   RecallType.RecallAlerts.RedAlert entered
  			and   current corporate date >= RedAlertDate)
  		
  		RecallSearchCondition
  			restricted
  			when ((RecallWithinDateRange
  			and   !Item entered)
  			or    (RecallWithinDateRange
  			and    Item entered
  			and    ItemSearchRel exists))

  		TransactionActivityExists
  			restricted
  			when (LastProductActivityQuery entered
  			and	  RecallProductTransaction set exists)
  		
  		TransactionActivityDoesNotExists
  			restricted
  			when (LastProductActivityQuery entered
  			and	  !RecallProductTransaction set exists)
  		
  		AllTasksAssigned
  			restricted
  			when (!UnassignedTaskRel exists)
  		
  		AnyTasksExist
  			restricted
  			when (ManualTasksExist
  			or    NonManualTasksExist)
  		
  		ManualTasksExist
  			restricted
  			when (ManualRecallNoticeTaskRel exists)
  				
  		NonManualTasksExist
  			restricted
  			when (NonManualRecallNoticeTaskRel exists)
  		
  		NoticeNotManuallyEntered
  			restricted
  			when (!EntryMechanism.ManualEntry)
  		
  		FromThirdParty
  			restricted
  			when (EntryMechanism.ThirdPartyInterface)
  		
  		NoticeNotManuallyEnteredInPending
  			restricted
  			when (Status.Pending
  			and   NoticeNotManuallyEntered)
  			
  		HasRecallProductItems
  			restricted
  			when (RecallProductItem set exists)
  		
  		HasEquipmentIdentifiers
  			restricted
  			when (RecallProductWithModelNumberRel exists
  			or	  RecallEquipmentSerial set exists)
  				
  		DisplayProductTransactionQuery
  			restricted
  			when (!Equipment
  			and	  RecallNoticeUpdatable
  			and	  HasRecallProductItems)
  		
  		DisplayEquipmentProductTransactionQuery
  			restricted
  			when (Equipment
  			and	  RecallNoticeUpdatable
  			and   HasEquipmentIdentifiers)
  			
  		EligibleForFirstProductTransactionQuery
  			restricted
  			when (DisplayProductTransactionQuery
  			and   !QueryHasBeenRun)
  		
  		HasPastDueTasks
  			when (PastDueTasksForNoticeRel exists)
  			
  		UnsubmittedItemProposal
  			restricted
  			when (ProposedItem.ProposedNotSubmitted)
  		
  		UnapprovedItemProposal
  			restricted
  			when (ProposedItem.ProposedSubmitted
  			or    ProposedItem.ApprovedPendingTrial)
  			
		CanRelease
			restricted
			when (ProposedItem.Approved
			or    ProposedItem.NotApplicable)

  		CoordinatorCanApproveOrReject
  			restricted
  			when ((ProposedItem.ProposedSubmitted
  			or   (ProposedItem.ApprovedPendingTrial
  			and   TrialEndDate <= current corporate date
  			and   TrialEndDate entered))
  			and  (!ItemProposalTasksExist
  			or   (CanceledTasksExist
  			and   !NonCanceledTasksExist)
  			or   (NonCanceledTasksExist
  			and   !NoResponseItemProposalTaskExists
  			and   !TrialItemProposalTaskExists)))	
  			
		CoordinatorCanOverrideApproveOrReject 
			restricted 
			when (!CoordinatorCanApproveOrReject
			and    CanOverrideItemProposalTasksExist
			and    RecallGroup.AllowItemProposalOverride = true) 
		
		CanOverrideItemProposalTasksExist
			restricted 
			when (CanOverrideItemProposalTaskRel exists)	

  		HasTrial 
			restricted 
			when (ProposedItem.ApprovedPendingTrial)

		HasOpenReviews 
			restricted
			when (OpenItemProposalTaskRel exists)
		
		CanceledTasksExist
  			restricted
  			when (CanceledItemProposalTaskRel exists)
  			
  		NonCanceledTasksExist
  			restricted
  			when (NonCanceledItemProposalTaskRel exists)
  		
  		CoordinatorCanApproveForTrial
  			restricted
  			when (ProposedItem.ProposedSubmitted
  			and  !HasOpenTrialRequisitions
  			and  (!ItemProposalTasksExist
  			or   (ItemProposalTasksExist
  			and   !NoResponseItemProposalTaskExists)))
 
  		CanCancelTrial
  			restricted
  			when (ProposedItem.ApprovedPendingTrial
  			and  (TrialEndDate > current corporate date
  			or    TrialEndDate !entered))
  			
		CanUpdateTrialEndDate
			restricted
			when (TrialEndDateEntered
			and   ProposedItem.ApprovedPendingTrial)

		ItemProposalTasksExist
  			restricted
  			when (ItemProposalTaskRel exists)
  		
  		ItemProposal
  			restricted
  			when (ProposedItem > 0)
  		
		SubmittedItemProposal
			restricted
			when (ProposedItem.ProposedSubmitted)

  		ApprovedItemProposal
  			restricted
  			when (ProposedItem.Approved)
  		
  		ItemAttachmentEntered 
			restricted 
			when (ProposedItemAttachment entered)
		
		ItemAttachmentNotEntered
			restricted 
			when (ProposedItemAttachment !entered)

		DisplayAttachmentWorksheetList 
			restricted 
			when (ItemProposal 
			and   ProposalItemEntryMethod.Attachment
			and   ItemAttachmentNotEntered)
		
		CanDisplayNewItemProposalReport 
			restricted 
			when (ItemProposal
			and   HasProducts)
		
		HasProducts 
			restricted 
			when (ProductStandardRel exists)
		
		DoesNotHaveProducts
			restricted 
			when (ProductStandardRel !exists)

		NoItemProposalDetailsEntered
			restricted 
			when (ItemAttachmentNotEntered
			and   DoesNotHaveProducts)

		CanSelectItemEntryMethod
			restricted 
			when (NoItemProposalDetailsEntered
			and   ItemProposal)

		CannotSelectItemEntryMethod
			restricted 
			when ((HasProducts
			or     ItemAttachmentEntered)
			and    ItemProposal)

		DisplayItemDetailsOnForm 
			restricted 
			when (ItemProposal
			and  (HasProducts
			or    ProposalItemEntryMethod.Online
			or   (ProposalItemEntryMethod.Attachment
			and   ItemAttachmentNotEntered)))
		
		HasAdhocNotifications
			restricted 
			when (RecallAdhocNotificationRel exists)

  		ApprovedAndConvertedToNotice 
			restricted 
			when (ApprovedItemProposal
			and   !ClosedNotice
			and   !Status.CompletedItemCreationPending)
		
		HasItemsBeingReplaced 
			restricted 
			when (ProductIdentifierRel exists)
		
		BuyerSideItemProposal
  			restricted
  			when (ProposedItem.ProposedSubmitted
  			or    ProposedItem.Approved
  			or    ProposedItem.ApprovedPendingTrial
 			or    ProposedItem.Rejected)
 			  		
		ProcessableItemProposal
			restricted
			when (ProposedItem.Approved
			or    ProposedItem.NotApplicable)
		
		RejectedItemProposal 
			restricted 
			when (ProposedItem.Rejected)
		
		NoResponseItemProposalTaskExists
			restricted
			when (NoResponseItemProposalTaskRel exists)
		
		TrialItemProposalTaskExists
			restricted
			when (TasksPendingItemTrialRel exists)
			
		NewItemProposalRequiredQuestionsExist
			restricted
			when (NewItemProposalRequiredQuestionsRel exists)
		
		HasTrialRequisitions
			restricted
			when (HasRequisitionTrialItemCompaniesAndLocationsRel exists)

  		HasOpenTrialRequisitions 
			restricted 
			when (HasOpenRequisitionTrialItemCompaniesAndLocationsRel exists)
		
		ItemProposalQuestionsExist
  			restricted
  			when (RecallGroup.ItemProposalQuestions entered)
  			
  		OpenItemProposal
  			restricted
  			when ((ProposedItem.ApprovedPendingTrial
  			or    ProposedItem.ProposedSubmitted)
  			and   Status.Pending) 
  		
  		HasItem
  			restricted
  			when (ItemSearchRel exists)
  			
  		MyCoordinatorNotices
  			restricted
  			when  (RecallCoordinator entered 
  			and    RecallUserRel.HROrganization	    = RecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
  			and    RecallUserRel.RecallUser			= RecallCoordinator)

		MyRecallPortalNotices
			restricted
  			when  (ReportedByRecallUser entered 
  			and    ReportedByRecallUser = actor.agent(Employee).Employee)
  		
  		MySupplierPortalNotices
  			restricted
  			when  (ReportedBySupplier entered 
  			and    ReportedBySupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
 			and    ReportedBySupplier.Supplier	   	   = actor.agent(SupplierSourceId).Supplier
 			and	   ReportedBySupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId)  		
  		
  		UnsubmittedIsASupplier
  			restricted
  			when (MySupplierPortalNotices
  			and   ProposedItem.ProposedNotSubmitted)
  		
  		ReportedByRecallUserEntered
  			restricted
  			when (ReportedByRecallUser entered)
  		
		ReportedBySupplierEntered 
			restricted 
			when (ReportedBySupplier entered)

  		SupplierEntered 
			restricted
			when (Supplier entered)
		
		CanViewMainNotice 
			restricted 
			when (!ClosedNotice
			and !Status.CompletedItemCreationPending
		    and ApprovedItemProposal)
		
		HasLinkedNotices
  			restricted
  			when (LinkedReferenceRel exists)
  					 			
		DisplayRecallProductDetails
			restricted
			when (!Equipment
  			and   LastProductActivityQuery entered
  			and  (!ItemProposal
			or    ProposedItem = 2))
			
		DisplayRecallProductItemDetails
			restricted
			when (!Equipment
  			and   LastProductActivityQuery not entered
  			and  (!ItemProposal
			or    ProposedItem = 2))
		  					 			
		DisplayItemProposalItemDetails
			restricted
			when (ItemProposal
  			and   LastProductActivityQuery not entered)
		
		DisplayItemProposalDetails
			restricted
			when (ItemProposal)

		ProductsUpdatedAfterQueryRunDate
			when (LastProductActivityQuery entered
			and   LastProductActivityQuery < LastUpdateToProducts)
			
		QueryHasBeenRun
			when (LastProductActivityQuery entered)
			
		HasResolutions
			restricted
			when (RecallProductItemAction set exists)
			
		HasTaskItems
			restricted
			when (RecallProductTaskItemRel exists)

		HasRemainingQuantities
			restricted
			when (RemainingQuantitiesRel exists)

		AllTasksCompleted
			restricted
			when (!OpenRecallNoticeTasksRel exists)
			
		AllowResolutions
			restricted
			when (Status.Active
			and   AllTasksCompleted
			and   HasRemainingQuantities
			and   CoordinatorResolutions)
						
		CoordinatorResolutions
			restricted
			when (RecallGroup.AllowAdjustmentByCoordinator
			or    RecallGroup.AllowIssueByCoordinator
			or    RecallGroup.AllowTransferByCoordinator
			or    RecallGroup.AllowReturnByCoordinator)
		
		AlertUnresolvedQuantities
			when (Status.Active
			and   HasCompletedUnresolvedTask)

		HasOpenResolutions
			restricted
			when (OpenResolutionsRel exists)
						
		HasVendorReturns
			restricted
			when (VendorReturnRel exists)
			
		HasInventoryResolutions
			restricted
			when (InventoryResolutionsRel exists) 
		
		HasActionsByCoordinator
			restricted
			when (ActionsByCoordinatorRel exists)
			
		HasActionsByResponder
			restricted
			when (ActionsByResponderRel exists)  	

		HasCompletedUnresolvedTask
			restricted
			when (CompletedUnresolvedTaskRel exists)
			
		AllowClose
			restricted
			when (!OpenRecallNoticeTasksCompletionReqRel exists)

		SupplierGroupExists
			restricted
			when (SupplierGroupExistsRel exists)
						
		ResolutionsCompletedNoticeCanBeClosed
			restricted
			when (Status.CompletedResolutionsPending
			and  !HasOpenResolutions)
						
		TaskActivityHasOccurred
			restricted
			when (TaskActivityHasOccurredRel exists
			or    RecallNoticeTaskProductResponseRel exists)
			
		AllowPortalUpdate
			restricted
			when  (Status.Pending
			and    !QueryHasBeenRun
			and    !HasRecallTasks
			and    !ItemProposal)
			
		AllowRecallPortalUpdate
			restricted
			when (MyRecallPortalNotices
			and   AllowPortalUpdate)

		ItemsInProcess
			restricted
			when (ItemInformationWorksheetRel exists)
		
		AllowSupplierPortalUpdate
			restricted
			when  (MySupplierPortalNotices
			and   AllowPortalUpdate)
		
		HasTasksForAnalysis
			restricted
			when (TasksForAnalysisRel exists)
		
		HasNoticeOrganizations
			restricted
			when (RecallNoticeOrganizationRel exists)

		ShowOrganizations
			restricted
			when (HasNoticeOrganizations
			and   RecallGroupAllowsOrganizations)

		RecallGroupAllowsOrganizations
			restricted
			when (RecallGroup.AllowOrganizations)

		CreateTaskForOrganization
			restricted
			when (RecallGroupAllowsOrganizations
			and   Status.Pending)

		HasUnfinishedLotOrSerial
			restricted
			when (SerialOrLotNumbersExist
			and   !LotOrSerialExists)
		
		LotOrSerialExists
			restricted
			when (RecallProductSerialRel exists
			or    RecallProductLotRel exists)
		
		NRACDocoExists
			restricted
			when (NRACDocoRel exists)
		
		CoordinatorIsRequester
			restricted
			when (RequesterRel exists)

		DrugRelated
			restricted
			when (NDCNumberRel exists)
			
		HasCountsForCompany 
			restricted 
			when (RecallProductTaskItemCompanyRel exists)
		
		SmartphoneDisplay
			restricted
			when (display type.smartphone)	


		MobileHasTransactionTasks
			default label is "HasTransactionTasks"
			when (TransactionTaskRel exists)

			
  	Relations
		ResponseToRecallProductQuestionRel
			one-to-many relation to ResponseToRecallProductQuestion
			Field Mapping uses part of key
				related.RecallGroup = RecallGroup
				related.RecallNotice = RecallNotice

  		UseAsWorkingIdRel
  			one-to-many relation to RecallNoticeReference
  			Field Mapping uses ByUseAsWorkingId
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.UseAsWorkingId	= true
  			
		NoRequisitionTrialItemCompaniesAndLocationsRel
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.Requisition !entered)

		HasRequisitionTrialItemCompaniesAndLocationsRel
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.Requisition entered)

		HasOpenRequisitionTrialItemCompaniesAndLocationsRel
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.Requisition entered
				and   !related.Requisition.IsClosed)

		SelectedTrialItemCompaniesAndLocationsRel
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.SelectedForTrialRequisition)

		SelectedSetActionTrialItemCompaniesAndLocationsRel
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= LocalRecallGroup
				related.RecallNotice	= LocalRecallNotice
			Instance Selection
				where (related.SelectedForTrialRequisition)

		FromNoticeTrialItemCompaniesAndLocationsRel		
			one-to-many relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= LocalFromNotice			
		
		ExistingTrialItemsCompaniesAndLocationsRel
			one-to-one relation to TrialItemCompaniesAndLocations
			Field Mapping uses symbolic key
				related.RecallGroup     									= RecallGroup
				related.RecallNotice    									= RecallNotice
				related.TrialItemCompaniesAndLocations.InventoryCompany 	= LocalInventoryCompany
				related.TrialItemCompaniesAndLocations.InventoryLocation 	= LocalInventoryLocation
				related.TrialItemCompaniesAndLocations.RequestingLocation 	= LocalRequestingLocation

		SelectedSetActionTrialItemProductsRel
			one-to-many relation to RecallProduct
			Field Mapping uses symbolic key
				related.RecallGroup    	= LocalRecallGroup
				related.RecallNotice	= LocalRecallNotice
			Instance Selection
				where (related.SelectedForTrialRequisition)

		SelectedTrialItemProductsRel
			one-to-many relation to RecallProduct
			Field Mapping uses symbolic key
				related.RecallGroup    	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.SelectedForTrialRequisition) 
 
  		RecallProductSerialRel 
  			one-to-many relation to RecallProductSerial 
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	
  		
  		RecallProductLotRel 
  			one-to-many relation to RecallProductLot
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	 
  		
  		ProductItemProposalRel
  			one-to-many relation to RecallProduct
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	 
  			Instance Selection
  				where (related.ProposedItemSubmitted)	  				
  		
		ProductWithNoItemRel
			one-to-many relation to RecallProduct
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	 
  			Instance Selection
  				where (related.ItemCreated !entered)	 

  		ProductStandardRel
  			one-to-many relation to RecallProduct
  			delete cascades
			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	 
  				  		
		LocalRecallProductRel 
  			one-to-many relation to RecallProduct
  			delete cascades
			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= LocalRecallNotice	 		
		ProductIdentifierRel
			one-to-many relation to RecallProduct 
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice	 
  			Instance Selection
  				where (related.ProductIdentifiersEntered)  				

  		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "RECALLNOTICE"
				related.AppsValue   = DerivedAppsValue	
  		
  		MfgGlobalLocationNumberRel
  			one-to-one relation to GlobalLocationNumber
  			Field Mapping uses symbolic key
  				related.ItemGroup					= RecallGroup
  				related.GlobalLocationNumber		= ManufacturerGln
  		
 		ItemGroupRel
 			one-to-one relation to ItemGroup
 			Field Mapping uses symbolic key
 				related.ItemGroup                   = RecallGroup
 
		ItemInformationWorksheetRel
			one-to-many relation to ItemInformationWorksheet
			Field Mapping uses ByRunGroup
				related.RunGroup                    = "FromNewItemProposal" + RecallNotice

  		RecallNoticeTaskStatusRel
			one-to-one relation to RecallNoticeTaskStatus
			Field Mapping uses symbolic key
				related.RecallGroup				= RecallGroup
				related.RecallNotice			= RecallNotice
				related.RecallNoticeTaskStatus	= LocalCounter
  	
    	RecallProductParsedDescriptionRel
    		one-to-many relation to RecallProductParsedDescription
    		Field Mapping uses symbolic key
    			related.RecallGroup				= RecallGroup
				related.RecallNotice			= RecallNotice
    	
    	RecallUserHelperListRel 
			one-to-many relation to RecallUser
			Field Mapping uses symbolic key
				related.HROrganization = actor.context.HROrganization
			Instance Selection
				where (related.RecallGroup = RecallGroup)
		

		AdhocUserRel 
			one-to-many relation to RecallAdhocUser 
			Field Mapping uses ByName 
				related.RecallGroup 	= RecallGroup 
		
		RecallOrganizationHelperListRel
			one-to-many relation to RecallOrganization
			Field Mapping uses symbolic key
				related.RecallGroup      = RecallGroup
			Instance Selection
				where (!related.HasChild
				and    related.HasLocationsDefined
				and    related.NoticeOrganizationDoesNotExist)

		RecallUserRel
   			one-to-many relation to RecallUser
   			Field Mapping uses symbolic key
   				related.HROrganization           = actor.agent(Employee).HROrganization
   				related.RecallUser               = actor.agent(Employee).Employee
		
		RecallDomainHelperListRel
			one-to-many relation to RecallDomain
			Field Mapping uses symbolic key
				related.RecallGroup = RecallGroup
		
  		RecallNoticeTaskRel is a RecallNoticeTask set
  		
 		OpenRecallNoticeTasksRel is a RecallNoticeTask set
  			Instance Selection
  				where (related.TaskIsOpen)

  		OpenRecallNoticeTasksCompletionReqRel is a RecallNoticeTask set
  			Instance Selection
  				where (related.CompletionRequiredToCloseNotice
  				and	   related.TaskIsOpen)

		NonManualRecallNoticeTaskRel is a RecallNoticeTask set
			Instance Selection
				where (!related.ManuallyCreatedTask
				and     related.NotProposedItem)
		
		ManualRecallNoticeTaskRel is a RecallNoticeTask set
			Instance Selection
				where (related.ManuallyCreatedTask)
				
		TransactionTaskRel is a RecallNoticeTask set
			Instance Selection
				where (!related.ManuallyCreatedTask
				and    related.NotProposedItem)
		
		MyTasksRel
			one-to-one relation to RecallNoticeTask
			Field Mapping uses ByOwner
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.Owner			= RecallUserRel.RecallUser
		
  		TaskActivityHasOccurredRel is a RecallNoticeTask set
  			Instance Selection
  				where (related.QuantitiesEntered
  				or     related.Status.Completed
  				or     related.HasTaskQuestionAnswers)
  		
  		AcceptedTaskRel is a RecallNoticeTask set
  			Instance Selection
  				where (related.Status.Accepted)
  				
		TasksPendingItemTrialRel
  			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ProposedItem.ApprovedPendingTrial)

  		NoResponseItemProposalTaskRel 
  			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ItemTaskProposedOnly)

		CanOverrideItemProposalTaskRel 
  			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
			Instance Selection 
				where (related.CoordinatorCanOverride)		

  		OpenItemProposalTaskRel
  			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection  		
  				where (related.CanCancelReview)  
  		ApprovedItemProposalTaskRel
  			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection  		
  				where (related.ItemProposalApproved)
  		
		NonCanceledItemProposalTaskRel
   			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ProposedItemTask
  				and    !related.ProposedItem.Canceled)

		CanceledItemProposalTaskRel
   			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ProposedItem.Canceled)

  		RejectedItemProposalTaskRel
   			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ItemProposalRejected)
  			 		
  		ItemProposalTaskRel
   			one-to-many relation to RecallNoticeTask
  			Field Mapping uses symbolic key
  				related.RecallGroup    = RecallGroup
  				related.RecallNotice   = RecallNotice
  			Instance Selection
  				where (related.ProposedItemTask)

		RecallNoticeTaskNotItemProposalRel
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByOwner
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.NotProposedItem)			
		
		TasksForAnalysisRel
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByOwner
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.Status.Accepted
				or     related.Status.Completed
				and    related.ProposedItem = 0)	

		NonManualTasksRel 
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByOwner
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection 
				where (!related.ManuallyCreatedTask)		
		UnassignedTaskRel
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByOwner
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.Owner			= blank

 		CompletedUnresolvedTaskRel is a RecallNoticeTask set
  			Instance Selection
  				where (related.CompletedUnresolved)

		PastDueTasksForNoticeRel
			one-to-many relation to RecallNoticeTask
			Field Mapping uses ByNoticeDueDate 
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.DueDate			< current timestamp
			Instance Selection
				where ((Status.Active
				or      Status.Pending)
				and    (related.Status.New
				or      related.Status.Accepted)
				and     related.DueDate entered
				and    !related.ProposedItemTask)
				
		RecallNotificationEmailRel 
			one-to-many relation to RecallNotification
			Field Mapping uses symbolic key
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (!related.HasAssignedTask)

		RecallAdhocNotificationRel 
			one-to-many relation to RecallAdhocUserNotification 
			delete cascades
			Field Mapping uses symbolic key 
				related.RecallGroup		= RecallGroup
				related.RecallNotice    = RecallNotice 

		NRACReferenceRel 
  			one-to-many relation to RecallNoticeReference
  			Field Mapping uses symbolic key
  				related.RecallGroup		= RecallGroup
  				related.RecallNotice 	= RecallNotice
  			Instance Selection
  				where (related.Link entered
				and    related.ReferenceType = 3)

		ProductListQuestionsWithNoValueRel
			one-to-many relation to RecallProductQuestion
			Field Mapping uses ByResponseType
				related.ResponseType = 4 
				related.RecallGroup	 = RecallGroup
				related.RecallNotice = RecallNotice
			Instance Selection
				where (!related.HasListValues
				and	   related.QuestionHasAssignedTask)
		
		RecallProductQuestionRel
			one-to-many relation to RecallProductQuestion
			Field Mapping uses symbolic key
				related.RecallGroup	 = RecallGroup
				related.RecallNotice = RecallNotice
		
		ItemProposalQuestionRel
			one-to-many relation to RecallProductQuestion
			delete cascades
			Field Mapping uses symbolic key
				related.RecallGroup	  = RecallGroup
				related.RecallNotice  = RecallNotice
		   	Instance Selection
		   		where (related.NewItemProposalQuestion)

    	NewItemProposalRequiredQuestionsRel
 			one-to-many relation to RecallProductQuestion
			Field Mapping uses symbolic key
				related.RecallGroup	 = RecallGroup
				related.RecallNotice = RecallNotice
			Instance Selection
				where (related.NewItemProposalQuestion
				and    related.ResponseRequired)   		
    	
		RequesterRel
            one-to-one relation to Requester
            Field Mapping uses symbolic key
            	related.HROrganization = actor.agent(Employee).HROrganization
                related.Requester = actor.agent(Employee).Employee.Requester.Requester

    	TrialItemRequisitionRel
    		one-to-one relation to Requisition
    		Field Mapping uses symbolic key 
    			related.Company             = LocalTrialItemCompany
    			related.Requisition         = LocalTrialItemRequisition
    		
    	ContractRel
    		one-to-one relation to Contract
    		Field Mapping uses symbolic key
    			related.ContractGroup       = RecallGroup
    			related.Contract            = ProposedContract

    	ContractGroupRel
    		one-to-one relation to ContractGroup
    		Field Mapping uses symbolic key
    			related.ContractGroup       = RecallGroup

		TaskListQuestionsWithNoValueRel
			one-to-many relation to RecallNoticeTaskQuestion
			Field Mapping uses ByResponseType
				related.ResponseType = 4 
				related.RecallGroup	 = RecallGroup
				related.RecallNotice = RecallNotice
			Instance Selection
				where (!related.HasListValues)
		
		RecallProductWithModelNumberRel is a RecallProduct set
			Instance Selection
				where (related.ModelNumber entered)
				
		RecallProductsWithoutTaskInstructionRel is a RecallProduct set
			Instance Selection
				where (related.RecallTaskInstruction not entered)
		
		RecallNoticeOrganizationRel
			one-to-many relation to RecallNoticeOrganization
			delete cascades
			Field Mapping uses symbolic key
				related.RecallGroup     = RecallGroup
				related.RecallNotice    = RecallNotice
				
		NonManualTaskRecallNoticeOrganizationRel
			one-to-many relation to RecallNoticeOrganization
			Field Mapping uses symbolic key
				related.RecallGroup     = RecallGroup
				related.RecallNotice    = RecallNotice
			Instance Selection
				where (!related.FromManualTask)
				
		ItemSearchRel is a RecallProductItem set
			Instance Selection
				where (related.RecallProductItem = Item)
		
		ProductWithModelNumberRel is a RecallProduct set
			Instance Selection
				where (related.ModelNumber entered)
		
		DuplicateReferenceRel is a RecallNoticeReference set
			Instance Selection
				where (related.DuplicateReference)
		
		NRACDocoRel
  			one-to-many relation to RecallNoticeReference
  			Field Mapping uses symbolic key
  				related.RecallGroup	 = RecallGroup
  				related.RecallNotice = RecallNotice
  			Instance Selection
  				where (related.ReferenceType.NRAC)		

		DuplicateNoticeReferenceRel
  			one-to-many relation to RecallNoticeReference
  			Field Mapping uses ByIdentifierId
  				related.RecallGroup	 = RecallGroup
  				related.RecallNotice = first DuplicateReferenceRel.NumericIdentifierId
  				related.IdentifierId = first DuplicateReferenceRel.RecallNotice
  			Instance Selection
  				where (related.ReferenceType.Duplicate)
  				
		UpdatedNoticeRel
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup = RecallGroup
			Instance Selection
				where (related.ReferenceType.UpdatedOriginal
				and    related.NumericIdentifierId = RecallNotice)

		NoticeUpdateReferenceRel
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup 	= RecallGroup
				related.RecallNotice	= RecallNotice
			Instance Selection
				where (related.ReferenceType.UpdatedOriginal)			

		LinkedReferenceRel is a RecallNoticeReference set
			Instance Selection
				where (related.LinkedReference)
						
		SameLinkedNoticeRel is a RecallNoticeReference set
			Instance Selection
				where (related.LinkedReference
				and	   related.NumericIdentifierId = LocalLinkedNotice)
		
		RecallOrganizationRequisitionLineTaskRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasRequisitionLineTaskDetail)

		RecallOrganizationPurchaseOrderLineTaskRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.InventoryLocation entered
				and    related.HasPurchaseOrderLineTaskDetail)
				
		RecallOrganizationPolinesrcTaskRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasPolinesrcTaskDetail)
				
		RecallOrganizationIssuesTaskRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasIssuesTaskDetail)
				
		RecallOrganizationRequisitionLineProductRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasRequisitionLineProductDetail)

		RecallOrganizationPurchaseOrderLineProductRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.InventoryLocation entered
				and    related.HasPurchaseOrderLineProductDetail)
				
		RecallOrganizationPolinesrcProductRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasPolinesrcProductDetail)
				
		RecallOrganizationIssuesProductRel is a RecallNoticeOrganization set
			Instance Selection
				where (related.RecallOrganization.RequestingLocation entered
				and    related.HasIssuesProductDetail)
				
		HasProductsWithoutInstructionsRel is a RecallProduct set
			Instance Selection
				where (related.RecallTaskInstruction not entered)
								
   		RecallProductTaskItemRel
    		one-to-many relation to RecallProductTaskItem
    		Field Mapping uses ByProductItemTask	
    			related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
   		
   		RecallProductTaskItemCompanyRel
    		one-to-many relation to RecallProductTaskItem
    		Field Mapping uses ByProductItemTask	
    			related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
			Instance Selection 
				where (related.Company entered)

   		RecallNoticeTaskProductResponseRel
   			one-to-many relation to RecallNoticeTaskProduct
   			Field Mapping uses symbolic key
   				related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
    		Instance Selection
    			where (related.HasProductQuestionAnswers)
   		
   		RemainingQuantitiesRel is a RecallProductItem set
    		Instance Selection
    			where (related.RemainingQuantity > 0)
   		
		OpenResolutionsRel is a RecallProductItemAction set
			Instance Selection
				where (!related.Resolved)
		
   		VendorReturnRel is a RecallProductItem set
    		Instance Selection
    			where (related.HasVendorReturns)
   		
   		InventoryResolutionsRel is a RecallProductItem set
    		Instance Selection
    			where (related.HasInventoryResolutions)
   		
   		NDCNumberRel 
   			one-to-many relation to RecallProductItem
   			Field Mapping uses ByNoticeNDC
   				related.RecallGroup     = RecallGroup
   				related.RecallNotice    = RecallNotice
   		
   		RecallProductItemRel
   			one-to-many relation to RecallProductItem
   			Field Mapping uses symbolic key
   				related.RecallGroup     = RecallGroup
   				related.RecallNotice    = RecallNotice
   		
		ActionsByCoordinatorRel is a RecallProductItemAction set
			Instance Selection
				where (related.RecallNoticeTask not entered)
				
   		ActionsByResponderRel is a RecallProductItemAction set
			Instance Selection
				where (related.RecallNoticeTask entered)
				
    	SupplierGroupExistsRel
			one-to-many relation to SupplierGroup
			Field Mapping uses symbolic key
		
		SupplierRel
			one-to-many relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup 		= RecallGroup 
			Instance Selection
				where (related.Vendor = Vendor)
				
		VendorGlnRel
			one-to-many relation to Vendor
			Field Mapping uses ByGlobalLocationNumber
				related.GlobalLocationNumber = ManufacturerGln

		RecallNoticeDocumentNotifyRel
        	one-to-many relation to RecallNoticeEmail
        	Field Mapping uses ByNoticeEmailSubject
        		related.RecallNotice	= RecallNotice
		   		related.ToEmail			= LocalEmail
        	Instance Selection
        		where (!related.EmailSent
        		and     related.ToUser = blank)
        		
		UnsentEmailsRel
        	one-to-many relation to RecallNoticeEmail
        	Field Mapping uses ByNoticeEmailSubject
        		related.RecallNotice	= RecallNotice
        	Instance Selection
        		where (!related.EmailSent)
        		
  		UnansweredQandARel is a RecallNoticeQandA set
  			Instance Selection
  				where (related.Status.Unanswered)
  				
  		DuplicateWorkingIdRel
  			one-to-many relation to RecallNotice
  			Field Mapping uses ByWorkingId
  				related.RecallGroup   = RecallGroup
  				related.WorkingId     = WorkingId
  			Instance Selection
  				where (related.RecallNotice != RecallNotice)
  		
  		ResponseToSupplierItemRequestQuestionRel
  			one-to-many relation to ResponseToSupplierItemRequestQuestion
  			Field Mapping uses part of key
  				related.RecallGroup  = RecallGroup
  				related.RecallNotice = RecallNotice
  		
		TrialItemCompaniesAndLocationsRel is a TrialItemCompaniesAndLocations set

  		DuplicateDescriptionRel
  			one-to-many relation to RecallNotice
  			Field Mapping uses symbolic key
  				related.RecallGroup  = RecallGroup
  			Instance Selection	
  				where (related.Description   = Description
  				and    related.RecallNotice != RecallNotice)

		UploadSpreadsheetRel
			one-to-many relation to SampleDocumentTemplate
			Field Mapping uses ByType
				related.Type        = 288 
  		
	Sets
		ByWorkingId
			indexed
			Sort Order
				RecallGroup
				WorkingId
				RecallNotice
		
		ByStatus
			indexed
			Sort Order
				RecallGroup
				Status
				RecallNotice
		
		ByCoordinator
			indexed
			Sort Order
				RecallGroup
				RecallCoordinator
				RecallNotice
		
		ByReportedByRecallUser
			indexed
			Sort Order
				ReportedByRecallUser
				RecallGroup
				RecallNotice
				
		ByReportedBySupplier
			indexed
			Sort Order
				ReportedBySupplier.SupplierGroup
				ReportedBySupplier.Supplier
				ReportedBySupplier.SupplierSourceId
				RecallGroup
				RecallNotice
	
		ByName
			indexed
			Sort Order
				Name
				RecallGroup
				RecallNotice
		
		ByRecallType
			indexed
			Sort Order
				RecallGroup
				RecallType
				RecallNotice
		
		ByRecallSource
			indexed
			Sort Order
				RecallSource
				RecallGroup
				RecallNotice
	Actions
		RebuildRecallNoticeTextIndexes is a Set Action
			restricted
			run in background
			Parameters
				ParamRecallGroup	is a RecallGroup
										
			Parameter Rules
				ParamRecallGroup
					required
						
			Instance Selection
				where (RecallGroup = ParamRecallGroup)

			Action Rules
				Instance Rules
					invoke UpdateSingleRecallNoticeTextIndexes
		
		UpdateSingleRecallNoticeTextIndexes is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include BuildTextIndexes
		
		CopyNotice is a Create Action 
			valid when (!ItemProposal)
			completion message is "Notice<this instance.RecallNotice>HasBeenCreated"
			Parameters
				RecallGroup	
				FromNotice 			 	 is a RecallNotice
				NewName					 is Alpha size 100
				NewDescription		 	 is Text
				NewType				 	 is a RecallType
				NewAnnouncementDate	 	 is Date
				NewReceivedDate		 	 is Date
				NewCoordinator		 	 is a RecallUser
				CopySelectAll		 	 is Boolean
				CopyDomains			 	 is Boolean
				CopyProducts		 	 is Boolean
				CopyProductItems		 is Boolean
				CopyProductSerialNumbers is Boolean
				CopyProductLotNumbers	 is Boolean
				CopyProductQuestions 	 is Boolean			
				CopyReferences		 	 is Boolean			
				CopyComments		 	 is Boolean
								
			Parameter Rules
				RecallGroup   	
    				required
    			FromNotice 	
    				required
    				constraint (FromNotice exists)
    					"Notice<FromNotice>DoesNotExist"
    			NewName
    				required
    				initial value is FromNotice.Name
    				default to FromNotice.Name
				NewDescription
					initial value is FromNotice.Description
    				default to FromNotice.Description
				NewType
					initial value is FromNotice.RecallType
    				default to FromNotice.RecallType
				NewAnnouncementDate
					initial value is FromNotice.RecallDate
    				default to FromNotice.RecallDate
				NewReceivedDate
					initial value is current corporate date
    				default to current corporate date
				NewCoordinator
					initial value is FromNotice.RecallCoordinator
    				default to FromNotice.RecallCoordinator
    			CopySelectAll	
    				initial value is true
    			CopyProducts
    				if (CopyProductItems
					or  CopyProductSerialNumbers
					or	CopyProductLotNumbers
					or  CopyProductQuestions)
    					default to true
    			CopyProductItems
    				constraint (!FromNotice.Equipment)
    					"CannotCopyProductItemsForEquipmentNotices"
    			CopyProductLotNumbers
    				constraint (!FromNotice.Equipment)
    					"CannotCopyProductLotNumbersForEquipmentNotices"
								
			Local Fields
    			LocalRecallProduct			is a RecallProduct view
    			LocalRecallProductQuestion 	is a RecallProductQuestion view 
    			
    		Action Rules
				if (CopyDomains
				or	CopyProducts
				or  CopyProductItems
				or  CopyProductSerialNumbers
				or	CopyProductLotNumbers
				or  CopyProductQuestions
				or	CopyReferences
				or  CopyComments)
					constraint (!CopySelectAll)
						"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"
				
				constraint (!FromNotice.ItemProposal)
					"CannotCopyANewItemProposal"
				
				invoke Pending.Create this instance
					fill in fields from FromNotice
					invoked.Name			   = NewName						
					invoked.Description		   = NewDescription
					invoked.RecallType		   = NewType
					invoked.RecallDate 		   = NewAnnouncementDate
					invoked.RecallReceivedDate = NewReceivedDate
					invoked.RecallCoordinator  = NewCoordinator
					initialize invoked.WorkingId
					initialize invoked.ReleasedTimestamp
					initialize invoked.DaysInPendingStatus
					initialize invoked.ApprovalTimestamp			
	    			initialize invoked.DaysInAwaitingApprovalStatus
	    			initialize invoked.NotApplicableTimestamp		
	    			initialize invoked.ClosedTimestamp
	    			initialize invoked.DaysInActiveStatus
	    			initialize invoked.FinalizedDate
	    			initialize invoked.DaysUntilFinalized
	    			initialize invoked.LastTransactionQueryDateRange 	
	    			initialize invoked.LastProductActivityQuery
	    			initialize invoked.SavedTransactionQueryParameters
				
				if (CopySelectAll or CopyDomains)
					for each FromNotice.RecallNoticeDomain set
						invoke Create RecallNoticeDomain set
							invoked.RecallGroup	 = RecallGroup
							invoked.RecallNotice = this instance.RecallNotice
							invoked.RecallDomain = each.RecallNoticeDomain.RecallDomain
						
				if (CopySelectAll or CopyReferences)
					for each FromNotice.RecallNoticeReference set
						if (!each.DuplicateOrLinkedRecallNotice)
							invoke Create RecallNoticeReference set
								fill in fields from each
				
				if (CopySelectAll or CopyComments)
					for each FromNotice.RecallComment set
						invoke Create RecallComment set
							fill in fields from each
									
				if (CopySelectAll or CopyProducts)
					for each FromNotice.RecallProduct set
						invoke Create RecallProduct set
							assign result to LocalRecallProduct
							invoked.CopiedFromAnotherNotice = true
							fill in fields from each
							initialize invoked.TotalQuantityIdentified
						
						if (CopySelectAll or CopyProductItems)
							for each each.RecallProductItem set
								invoke Create LocalRecallProduct.RecallProduct.RecallProductItem set
									fill in fields from each
									initialize invoked.TotalQuantityIdentified

						if (CopySelectAll or CopyProductQuestions)
							for each each.RecallProductQuestion set
								invoke Create LocalRecallProduct.RecallProduct.RecallProductQuestion set
									assign result to LocalRecallProductQuestion
									fill in fields from each
								
								for each each.RecallProductQuestionValue set
									invoke Create LocalRecallProductQuestion.RecallProductQuestion.RecallProductQuestionValue set
										fill in fields from each
								
						if (CopySelectAll or CopyProductLotNumbers)
							for each each.RecallProductLot set
								invoke Create LocalRecallProduct.RecallProduct.RecallProductLot set
									fill in fields from each
						
						if (CopySelectAll or CopyProductSerialNumbers)
							if (!FromNotice.Equipment)
								for each each.RecallProductSerial set
									invoke Create LocalRecallProduct.RecallProduct.RecallProductSerial set
										fill in fields from each
							else
								for each each.RecallEquipmentSerial set
									invoke Create LocalRecallProduct.RecallProduct.RecallEquipmentSerial set
										fill in fields from each
	
		ProductTransactionQuery is an Instance Action
			valid when (DisplayProductTransactionQuery)
			completion message is "ProductTransactionQueryHasStarted;Check'MyActions'ForCompletion"
			
			Parameters
				TransactionDateRange		is a DateRange
				ParmCreateTasks             is Boolean
				Priority					is Numeric size 2
		   			States
		   				High					value is 1
		   				Medium					value is 2
		   				Low						value is 3
				DueDate						is TimeStamp
				TransactionQueryParameters
				NonLocationActivityUser		is a RecallUser
				NonLocationInstructions     is a RecallTaskInstruction
				DeleteManualTasks			is Boolean	
				IncludeWatchers				is Boolean	
				PrmManufacturerInformation  is a Manufacturer 
					default label is "ManufacturerCodeAndDivisionUsedForManufacturerNumberQueries"
						
			Parameter Rules
				TransactionDateRange 
					initial value is LastTransactionQueryDateRange
						when (LastTransactionQueryDateRange entered)
					initial value is ManufactureDateRange.Begin
						when (!LastTransactionQueryDateRange entered
						and   ManufactureDateRange entered)
					initial value is DistributionDateRange.Begin
						when (!LastTransactionQueryDateRange entered
						and   !ManufactureDateRange entered
						and	  DistributionDateRange entered)
					if (!TransactionDateRange.End entered)
						TransactionDateRange.End = current corporate date
					if (TransactionQueryParameters.DateRangeRequired)
						constraint (TransactionDateRange.Begin entered)
							"TransactionDateRangeStartingDateRequired"
				
				ParmCreateTasks
					initial value is true
					if (AnyTasksExist)
						force default to true			
				
				Priority
					initial value is SavedTransactionQueryParameters.Priority
					if (ParmCreateTasks)
						required
					
				DueDate
					initial value is SavedTransactionQueryParameters.DueDate
					if (DueDate < current timestamp)
						confirmation required
							"DueDateIsPriorToCurrentDate.Continue?"
					if (ParmCreateTasks)
						required
						
				TransactionQueryParameters
					initial value is RecallGroup.TransactionQueryParameters
						when (LastProductActivityQuery not entered)
					initial value is SavedTransactionQueryParameters.TransactionQueryParameters
						when (LastProductActivityQuery entered)
					required
						"MustSelectAtLeastOneTypeOfTransactionOrDocumentToQuery"
				
				NonLocationActivityUser
					initial value is RecallCoordinator
						when (!SavedTransactionQueryParameters.NonLocationActivityUser entered)
					initial value is SavedTransactionQueryParameters.NonLocationActivityUser
						when (SavedTransactionQueryParameters.NonLocationActivityUser entered)
					if (TransactionQueryParameters.NonLocationActivityEntered
					and ParmCreateTasks)
						required
							"MustEnterAUserToAssignDocumentActivityTo"
			
				NonLocationInstructions
					initial value is SavedTransactionQueryParameters.NonLocationInstructions
						when (SavedTransactionQueryParameters.NonLocationInstructions entered)
					if (NonLocationInstructions entered)
						constraint (NonLocationInstructions.ValidForNotices)
							"InstructionsMustBeValidForNotices"		
				
				DeleteManualTasks
					initial value is SavedTransactionQueryParameters.DeleteManualTasks
					
				IncludeWatchers
					initial value is SavedTransactionQueryParameters.IncludeWatchers

			Entrance Rules
				if (DeleteManualTasks)
					invoke Purge ManualRecallNoticeTaskRel
				if (LastProductActivityQuery entered)
					invoke Purge NonManualRecallNoticeTaskRel
					invoke Purge RecallNoticeTaskProduct set 		
					invoke Purge RecallProductTransaction set
					invoke Purge RecallProductTransactionTask set	
					invoke Purge RecallNotification set
					invoke Purge RecallAdhocNotificationRel
					if (IncludeWatchers)
						invoke ReCreateNotifications RecallNoticeDomain set					
			
			Exit Rules
				SavedTransactionQueryParameters.Priority = Priority
				SavedTransactionQueryParameters.DueDate = DueDate
				SavedTransactionQueryParameters.TransactionQueryParameters = TransactionQueryParameters
				SavedTransactionQueryParameters.NonLocationActivityUser = NonLocationActivityUser
				SavedTransactionQueryParameters.NonLocationInstructions = NonLocationInstructions
				SavedTransactionQueryParameters.DeleteManualTasks = DeleteManualTasks
				SavedTransactionQueryParameters.IncludeWatchers   = IncludeWatchers
				
				if (PrmManufacturerInformation entered)
					ManufacturerCodeDivision = PrmManufacturerInformation
				
				invoke ProductActivityQuery RecallProductItem
					invoked.PrmRecallGroup	 				= RecallGroup
					invoked.PrmRecallNotice	 				= RecallNotice
					invoked.PrmDateRange	 				= TransactionDateRange
					invoked.PrmTransactionQueryParameters	= TransactionQueryParameters
					invoked.PrmCreateTasks                  = ParmCreateTasks
					invoked.PrmPriority						= Priority
					invoked.PrmDueDate						= DueDate
					invoked.PrmNonLocationActivityUser		= NonLocationActivityUser
					invoked.PrmNonLocationInstructions      = NonLocationInstructions
					invoked.PrmManufacturerInformation      = PrmManufacturerInformation
		
				if (TransactionQueryParameters.PerformPatientProcedureQuery
				and LotOrSerialExists)
					invoke ProductActivityQuery RecallProduct
						invoked.PrmRecallGroup	 				= RecallGroup
						invoked.PrmRecallNotice	 				= RecallNotice
						invoked.PrmPriority						= Priority
						invoked.PrmDueDate						= DueDate
						invoked.PrmCreateTasks                  = ParmCreateTasks	
		
		ProductEquipmentQuery is an Instance Action
			valid when (DisplayEquipmentProductTransactionQuery)
			run in background
			
			Parameters
				Priority					is Numeric size 2
		   			States
		   				High					value is 1
		   				Medium					value is 2
		   				Low						value is 3
				DueDate						is TimeStamp
				DeleteManualTasks			is Boolean	
				IncludeWatchers				is Boolean	
				ParmCreateTasks             is Boolean
				TaskOwner					is a RecallUser
						
			Parameter Rules
				Priority
					initial value is SavedTransactionQueryParameters.Priority
					required
					
				DueDate
					initial value is SavedTransactionQueryParameters.DueDate
					required
						
				DeleteManualTasks
					initial value is SavedTransactionQueryParameters.DeleteManualTasks
					
				IncludeWatchers
					initial value is SavedTransactionQueryParameters.IncludeWatchers
					
				TaskOwner
					initial value is RecallCoordinator
						when (!SavedTransactionQueryParameters.NonLocationActivityUser entered)
					initial value is SavedTransactionQueryParameters.NonLocationActivityUser
						when (SavedTransactionQueryParameters.NonLocationActivityUser entered)
						
				
			
			Entrance Rules
				if (LastProductActivityQuery entered)
					if (DeleteManualTasks)
						invoke Purge RecallNoticeTask set
					else
						invoke Purge NonManualRecallNoticeTaskRel
					invoke Purge RecallNoticeTaskProduct set 		
					invoke Purge RecallProductTransaction set
					invoke Purge RecallProductTransactionTask set	
					invoke Purge RecallNotification set
					if (IncludeWatchers)
						invoke ReCreateNotifications RecallNoticeDomain set					
			Exit Rules
				SavedTransactionQueryParameters.Priority = Priority
				SavedTransactionQueryParameters.DueDate = DueDate
				SavedTransactionQueryParameters.NonLocationActivityUser = TaskOwner
				SavedTransactionQueryParameters.DeleteManualTasks = DeleteManualTasks
				SavedTransactionQueryParameters.IncludeWatchers   = IncludeWatchers
				
				invoke ProductEquipmentActivityQuery RecallProduct
					invoked.PrmRecallGroup	 	= RecallGroup
					invoked.PrmRecallNotice		= RecallNotice
					invoked.PrmPriority			= Priority
					invoked.PrmDueDate			= DueDate
					invoked.PrmRecallUser		= TaskOwner
					invoked.PrmCreateTasks      = ParmCreateTasks
					
		CopyFromAnotherTrialItemNotice is an Instance Action
			valid when (CanCreateTrialRequisitions)			
			Parameters
				PrmFromRecallNotice      is a RecallNotice
					default label is "CopyCompaniesAndLocationsFromRecallNotice"
					
			Parameter Rules
				PrmFromRecallNotice
					required
					constraint (PrmFromRecallNotice.HasTrialItemCompaniesAndLocations)
						"RecallNoticeHasNoTrialItemCompaniesAndLocations"
					
			Action Rules		
				LocalFromNotice = PrmFromRecallNotice
				for each FromNoticeTrialItemCompaniesAndLocationsRel
					LocalInventoryCompany                = each.TrialItemCompaniesAndLocations.InventoryCompany
					LocalInventoryLocation               = each.TrialItemCompaniesAndLocations.InventoryLocation
					LocalRequestingLocation     		 = each.TrialItemCompaniesAndLocations.RequestingLocation
					if (ExistingTrialItemsCompaniesAndLocationsRel !exists)
					
						invoke Create TrialItemCompaniesAndLocations
							fill in fields from each
							invoked.RecallGroup					=  RecallGroup
							invoked.RecallNotice 				=  RecallNotice
							invoked.Requisition     			=  0
							invoked.RequisitionLine 			=  0
							invoked.SelectedForTrialRequisition = false   		

		FastUpdate is an Instance Action
			restricted
			Parameters
				PrmLastProductActivityQuery 		is TimeStamp
				PrmLastTransactionQueryDateRange	is a DateRange
				PrmWorkingId						is Alpha size 30
				PrmLastUpdateToProducts				is TimeStamp
				PrmProposedContract                 is a Contract
				
			Action Rules
				if (PrmLastProductActivityQuery entered)
					LastProductActivityQuery = PrmLastProductActivityQuery
				if (PrmLastTransactionQueryDateRange entered)
					LastTransactionQueryDateRange = PrmLastTransactionQueryDateRange
				if (PrmWorkingId entered)
					WorkingId = PrmWorkingId
				if (PrmLastUpdateToProducts entered)
					LastUpdateToProducts = PrmLastUpdateToProducts
				if (PrmProposedContract entered)
					ProposedContract = PrmProposedContract

		QuickUpdate is an Update Action
			bypass field rules
			restricted
									
		SendEmail is an Instance Action
			Parameters
				ToRecallUser	is a RecallUser
				ToEmail 		is an EmailAddress 
					holds pii
				FromEmail 		is an EmailAddress 
					holds pii
				Subject 	   	is Alpha size up to 250
				Content			is Text
				Attachment
					
			Parameter Rules
				ToEmail
					initial value is ToRecallUser.EmployeeWorkEmailAddress
					required
						"ToEmailAddressIsRequired"
				FromEmail
					initial value is actor.agent(Employee).EmployeeWorkEmailAddress
				Subject
					initial value is DerivedEmailSubject 
					required
						"EmailSubjectIsRequired"
				Content
					required
						"EmailContentIsRequired"
			
			Action Rules
				invoke CreateEmail RecallNoticeEmail set
					invoked.ToUser			= ToRecallUser
			    	invoked.ToEmail			= ToEmail
					invoked.FromUser		= RecallUserRel.RecallUser
					invoked.FromEmail		= FromEmail
					invoked.EmailSubject	= Subject
					invoked.EmailContent	= Content
					invoked.EmailAttachment	= Attachment			
					
		Link is an Instance Action
			Parameters
				ParamRecallNotice is a RecallNotice
			
			Parameter Rules
				ParamRecallNotice
					required
					constraint (ParamRecallNotice != RecallNotice)
						"CannotLinkNotice<ParamRecallNotice>ToItself"
					
					LocalLinkedNotice = ParamRecallNotice
					constraint (!SameLinkedNoticeRel exists)
						"Notice<ParamRecallNotice>IsAlreadyLinkedToNotice<RecallNotice>"
						
			Action Rules
				invoke Create RecallNoticeReference
					invoked.RecallGroup  	= RecallGroup
					invoked.RecallNotice 	= ParamRecallNotice
					invoked.ReferenceType	= 2 
					invoked.IdentifierId	= RecallNotice
					invoked.Description		= "This Notice is linked to Notice " + RecallNotice
				
				invoke Create RecallNoticeReference
					invoked.RecallGroup  	= RecallGroup
					invoked.RecallNotice 	= RecallNotice
					invoked.ReferenceType	= 2 
					invoked.IdentifierId	= ParamRecallNotice
					invoked.Description		= "This Notice is linked to Notice " + ParamRecallNotice			
					
		SendNotifications is an Instance Action
			restricted
			run in background
			Parameters
				Report is BinaryDocument
		
			Action Rules
				TransientNoticeDocument = Report
				for each RecallNotificationEmailRel
					send email
						to each.RecallUser.EmployeeWorkEmailAddress
						from RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
						subject "<RecallGroup.FinalRecallNoticeEmailSubject>"
						Attachments
							attachment TransientNoticeDocument
								name is "NoticeDocument"
								mime type is "application/pdf"
						Contents
							"<RecallGroup.FinalRecallNoticeEmailContent>"
							"Click<NotificationLinkback>ToViewTheNotice."

				for each RecallAdhocNotificationRel
					if (each.RecallAdhocUser.Active)
						send email 
							to each.DerivedEmail 
							from RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
							subject "<RecallGroup.FinalRecallNoticeEmailSubject>"
							Attachments
								attachment TransientNoticeDocument
									name is "NoticeDocument"
									mime type is "application/pdf"
							Contents
								"<RecallGroup.FinalRecallNoticeEmailContent>"
								"<NRACURL>"

		NotifyTaskOwners is an Instance Action
			restricted
			run in background
			Action Rules
				for each RecallNoticeTaskNotItemProposalRel 
					send email
						to each.Owner.EmployeeWorkEmailAddress
						from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
						subject "<RecallGroup.FinalTaskEmailSubject>"
						Contents
							"<RecallGroup.FinalTaskEmailContent>"
							"Priority:_<each.Priority>"
							"DueDate:_<each.DueDate>"
							"Click<TaskLinkback>ToViewTheTask."

				LocalActor = actor
				send notification
					to LocalActor
					description is "<RecallGroup.FinalTaskEmailSubject>"
					priority is high
					detail is "<RecallGroup.FinalTaskEmailContent>"		
							
		NotifyDocumentOwners is an Instance Action
			restricted
			run in background
			Action Rules
				for each RecallProductTransaction set
					if (each.NotifyOnRelease
					and each.DerivedNotifyEmailAddress != blank)
						LocalEmail 		= each.DerivedNotifyEmailAddress
						if (!RecallNoticeDocumentNotifyRel exists)
							invoke ComposeEmail RecallNoticeEmail
								invoked.RecallGroup		= RecallGroup
								invoked.RecallNotice	= RecallNotice
						    	invoked.ToEmail			= LocalEmail
								invoked.FromUser		= RecallCoordinator
								invoked.FromEmail		= RecallCoordinator.EmployeeWorkEmailAddress
								invoked.EmailSubject	= RecallGroup.FinalRecallNoticeEmailSubject
								invoked.EmailContent 	+= RecallGroup.NewLine
								invoked.EmailContent    += RecallGroup.FinalRecallNoticeEmailContent
								invoked.EmailContent 	+= RecallGroup.NewLine
								invoked.EmailContent	+= "Description:" + Description 
								invoked.EmailContent 	+= RecallGroup.NewLine
								invoked.EmailContent	+= DerivedProductList
								invoked.EmailContent 	+= "The Following Documents Have Items Found On This Recall Notice:"
								invoked.EmailContent 	+= RecallGroup.NewLine
								invoked.EmailContent	+= each.DerivedEmailNotifyLine
						else
							invoke Update RecallNoticeDocumentNotifyRel 
								invoked.EmailContent 	+= RecallGroup.NewLine
								invoked.EmailContent	+= each.DerivedEmailNotifyLine

			Exit Rules
				invoke ReleaseEmail UnsentEmailsRel
						
		CreateLotOrSerialDetails is an Instance Action 
			valid when (!LotOrSerialExists)
			disable multiple instance selection 
			Action Rules 

				invoke CreateLotOrSerialDetailsSet
					invoked.PrmRecallGroup		= RecallGroup  
					invoked.PrmNotice           = RecallNotice
					invoked.PrmWorkingId        = WorkingId
					invoked.FromToDate          = RecallReceivedDate 

		CreateLotOrSerialDetailsSet is a Set Action 
			default label is "CreateLotOrSerialDetails"
			restricted
			Parameters
				PrmRecallGroup							is a RecallGroup
					default label is "RecallGroup"
				FromToDate								is Date
					default label is "ReceivedDate"
				PrmWorkingId                            is Alpha size 30 
				PrmNotice                               is a RecallNotice 
			
			Parameter Rules
				PrmRecallGroup 
					required 
				FromToDate 
					required 
					
			Local Fields
				LocalExpDate					is Alpha size 20

				ReturnedRecallSize				is Integer 4
				ReturnedRecallProductSize		is Integer 4
				ReturnedProductCodeSize			is Integer 4
				ReturnedProductCodeValueSize	is Integer 4
				ReturnedSubCodeSize				is Integer 4
				ReturnedSubCodeCodeValueSize	is Integer 4
				CounterRecall					is Integer 4
				CounterRecallProduct			is Integer 4
				CounterProductCode				is Integer 4
				CounterProductCodeValue			is Integer 4
				CounterSubCode					is Integer 4
				CounterSubCodeCodeValue			is Integer 4
				RecallInstance is XMLDocument
				RecallProductInstance is XMLDocument
				RecallProductCodeInstance is XMLDocument
				RecallProductCodeSubCodeInstance is XMLDocument
			Instance Selection
				where (RecallGroup  = PrmRecallGroup
				and   !LotOrSerialExists
				and ((!PrmWorkingId entered
				and    RecallReceivedDate = FromToDate) 
				or     PrmWorkingId = WorkingId))

			Sort Order
				RecallGroup
				RecallNotice
			
			Action Rules
				
				Instance Rules

					FromWorkDateString	= FromToDate
					LocalStartDate		= FromWorkDateString[5:6] + "-" + FromWorkDateString[7:8] + "-" + FromWorkDateString[1:4] 
					ToWorkDateString	= FromToDate + 1 day
					LocalEndDate		= ToWorkDateString[5:6] + "-" + ToWorkDateString[7:8] + "-" + ToWorkDateString[1:4]
					if (PrmWorkingId entered)
						LotSerialLocalWorkingId = PrmWorkingId 
					else 
						LotSerialLocalWorkingId = WorkingId
					invoke CallNRAC NRACNotices
						invoked.User		= "LawsonAPI"
						invoked.Pass		= "Th1$US3r"
						invoked.StartDate	= LocalStartDate
						invoked.EndDate		= LocalEndDate
						invoked.NewFormat   = "TRUE"   
						invoked.NRACID      = WorkingId
						NRACNotices			= result.Notices
					CounterRecall		= 1
					ReturnedRecallSize	= NRACNotices select "count(/Recalls/Recall)"
					while(CounterRecall <= ReturnedRecallSize)
						include CountAndCommit
						RecallInstance = NRACNotices select "/Recalls/Recall[<CounterRecall>]"
						LocalManufacturer	= RecallInstance select "/Recall/Manufacturer"
						LocalWorkingId		= RecallInstance select "/Recall/Id"
						LocalRecallDate		= RecallInstance select "/Recall/Date"
						if (LotSerialLocalWorkingId = LocalWorkingId)
							ReturnedRecallProductSize	= RecallInstance select "count(/Recall/Products/Product)"
							CounterRecallProduct		= 1
							while (CounterRecallProduct <= ReturnedRecallProductSize)
								include CountAndCommit
								RecallProductInstance 	= RecallInstance select "/Recall/Products/Product[<CounterRecallProduct>]"
								ReturnedProductCodeSize	= RecallProductInstance select "count(/Product/Codes/Code)"
								CounterProductCode		= 1
								while (CounterProductCode <= ReturnedProductCodeSize)
									include CountAndCommit
									RecallProductCodeInstance 	= RecallProductInstance select "/Product/Codes/Code[<CounterProductCode>]"
									LocalCode = RecallProductCodeInstance select "/Code/Name"
									LocalExpDate = RecallProductCodeInstance select "/Code/ExpDate"
									ReturnedProductCodeValueSize = RecallProductCodeInstance select "count(/Code/Values/Value)"
									CounterProductCodeValue = 1
									while (CounterProductCodeValue <= ReturnedProductCodeValueSize)
										include CountAndCommit
										LocalValue = RecallProductCodeInstance select "/Code/Values/Value[<CounterProductCodeValue>]"
										LocalTextValue = RecallProductCodeInstance select "/Code/Values/Value[<CounterProductCodeValue>]"
										if (LocalCode = "Lot Number"
										or  LocalCode = "Serial Number")
											invoke ParseProductDescription first RecallProduct set
												invoked.Delimiter 				= ","
												invoked.ParmProductDescription 	= LocalTextValue
											invoke UpdateItemInformation first RecallProduct set.RecallProductParsedDescriptionRel
												if (LocalCode = "Lot Number")
													invoked.ItemCode 		= "LotNumber"
													invoked.ExpirationDate 	= LocalExpDate
												if (LocalCode = "Serial Number")
													invoked.ItemCode = "SerialNumber"	
										initialize LocalValue
										initialize LocalTextValue	
										increment CounterProductCodeValue
									ReturnedSubCodeSize	= RecallProductCodeInstance select "count(/Code/SubCodes/Code)"
									CounterSubCode		= 1
									while (CounterSubCode <= ReturnedSubCodeSize)
										include CountAndCommit
										RecallProductCodeSubCodeInstance 	= RecallProductCodeInstance select "/Code/SubCodes/Code[<CounterSubCode>]"
										LocalCode = RecallProductCodeSubCodeInstance select "/Code/Name"
										LocalExpDate = RecallProductCodeSubCodeInstance select "/Code/ExpDate"
										ReturnedSubCodeCodeValueSize	= RecallProductCodeSubCodeInstance select "count(/Code/Values/Value)"
										CounterSubCodeCodeValue			= 1
										while (CounterSubCodeCodeValue <= ReturnedSubCodeCodeValueSize)
											include CountAndCommit
											LocalValue = RecallProductCodeSubCodeInstance select "/Code/Values/Value[<CounterSubCodeCodeValue>]"
											LocalTextValue = RecallProductCodeSubCodeInstance select "/Code/Values/Value[<CounterSubCodeCodeValue>]"
											if (LocalCode = "Lot Number"
											or  LocalCode = "Serial Number")
												invoke ParseAndCreateItem first RecallProduct set
													invoked.Delimiter 				= ","
													invoked.ParmProductDescription 	= LocalTextValue
													invoked.ParmCode                = LocalCode 
													invoked.ParmExpirationDate      = LocalExpDate
												invoke UpdateItemInformation first RecallProduct set.RecallProductParsedDescriptionRel
													if (LocalCode = "Lot Number")
														invoked.ItemCode 		= "LotNumber"
														invoked.ExpirationDate 	= LocalExpDate
													if (LocalCode = "Serial Number")
														invoked.ItemCode = "SerialNumber"	
											initialize LocalValue
											initialize LocalTextValue
											increment CounterSubCodeCodeValue
										initialize LocalName											
										increment CounterSubCode
									increment CounterProductCode
								increment CounterRecallProduct
						increment CounterRecall

		CloseResolvedNotices is a Set Action
			restricted
			completion message is "NoticesHaveBeenClosed"
			Parameters
				PrmRecallGroup						is a RecallGroup
				PrmCloseResolvedNotices             is Boolean
					default label is "CloseResolvedNotices"
				PrmCloseCompletedNotices            is Boolean	
				 	default label is "CloseCompletedNotices"
			Parameter Rules
				PrmRecallGroup
					required
						"RecallGroupIsRequired"
					constraint (PrmCloseResolvedNotices entered
					or          PrmCloseCompletedNotices entered)
						"MustChooseAtLeastOneOfCloseResolvedNoticesAndCloseCompletedNotices"
						
			Instance Selection
				where ((Status.CompletedResolutionsPending
				and    !HasOpenResolutions)
				or    (Status.Active
				and    AllowClose))

			Action Rules
				Instance Rules
					if (PrmCloseResolvedNotices
					and Status.CompletedResolutionsPending
					and !HasOpenResolutions)
						invoke CompletedResolutionsPending.Close
						
					if (PrmCloseCompletedNotices
					and Status.Active
					and AllowClose)
						invoke Active.Close
												
	StateCycles
		RecallLifeCycle is a StateCycle
			state field is Status
		
			Pending is a State
				Create is a Create Action
					completion message is "Notice<this instance.RecallNotice>Added"
					Field Rules
						RecallType
							if (RecallType not entered)
								required
									"TypeIsRequired"
						RecallCoordinator
							if (RecallCoordinator not entered)
								required
									"CoordinatorIsRequired"
							if (RecallUserRel.RecallUser.IsRecallCoordinator)
   								default to RecallUserRel.RecallUser
						FDAClassification
							default to RecallType.DefaultFDAClassification
						EntryMechanism
							force default to EntryMechanism.ManualEntry
						RecallSource
							default to RecallSource.Internal
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
						RecallTaskInstruction
							if (RecallTaskInstruction not entered)
								required
									"TaskInstructionIsRequired"
							else
							if (RecallTaskInstruction entered)
								constraint (RecallTaskInstruction.ValidForNotices)
									"TaskInstructionMustBeValidForNotices"
							if (RecallTaskInstruction changed)
								force default TaskInstructionDescription to RecallTaskInstruction.Description
						RestrictPurchaseOrderCreation
							default to RecallGroup.RestrictPurchaseOrderCreation
						RestrictRequisitionCreation
							default to RecallGroup.RestrictRequisitionCreation
						RestrictInventoryIssue
							default to RecallGroup.RestrictInventoryIssue
						RestrictInventoryReceipt
							default to RecallGroup.RestrictInventoryReceipt

					Exit Rules
						include BuildRecallNoticeTaskStatus
				
				SupplierPortalCreate is a Create Action
					completion message is "ThankYouForReportingThisRecall"
					Field Rules
		    			RecallGroup
							force default to actor.agent(SupplierSourceId).SupplierGroup
							constraint (actor.agent(SupplierSourceId).Supplier.IsVendor)
								"CannotReportARecallUntilThisOrganizationHasSetYouUpAsAVendor"
						RecallReceivedDate
		   					force default to current corporate date
						FDAClassification
							default to RecallType.DefaultFDAClassification
						EntryMechanism
							force default to EntryMechanism.SupplierPortal
						RecallSource
							force default to RecallSource.Supplier
						ReportedBySupplier
							ReportedBySupplier.SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 							ReportedBySupplier.Supplier	   	    = actor.agent(SupplierSourceId).Supplier
 							ReportedBySupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
 							Supplier	   	    				= actor.agent(SupplierSourceId).Supplier
 							Vendor								= Supplier.Vendor
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
					
					Exit Rules
						include BuildRecallNoticeTaskStatus
						
				RequesterCreateItemProposal is a Create Action
					default label is "CreateNewItemProposal"
					completion message is "ThankYouForProposingThisItem"
					Field Rules
						RecallReceivedDate
		   					force default to current corporate date
						RecallDate
							default to current corporate date
						EntryMechanism
							force default to EntryMechanism.Requisitions
						RecallSource
							force default to RecallSource.Internal
						ReportedByRecallUser
							force default to actor.agent(Employee).Employee
 						ProposalItemEntryMethod 
							default to 1
						Supplier
 							required
							Vendor = Supplier.Vendor
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
						RecallCoordinator
							RecallCoordinator = RecallGroup.DefaultItemProposalCoordinator
						RecallType
							RecallType        = RecallGroup.DefaultItemProposalType						
					
					Action Rules
						ProposedItem = 4 
					
					Exit Rules
						
						include BuildRecallNoticeTaskStatus

				SupplierPortalCreateItemProposal is a Create Action
					default label is "CreateNewItemProposal"
					completion message is "ThankYouForProposingThisItem"
					Field Rules
		    			RecallGroup
							force default to actor.agent(SupplierSourceId).SupplierGroup
						RecallReceivedDate
		   					force default to current corporate date
						RecallDate
							default to current corporate date
						EntryMechanism
							force default to EntryMechanism.SupplierPortal
						RecallSource
							force default to RecallSource.Supplier
						ProposalItemEntryMethod 
							default to 1
						ReportedBySupplier
							ReportedBySupplier.SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 							ReportedBySupplier.Supplier	   	    = actor.agent(SupplierSourceId).Supplier
 							ReportedBySupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
 							Supplier	   	    				= actor.agent(SupplierSourceId).Supplier
 							Vendor								= Supplier.Vendor
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
						RecallCoordinator
							RecallCoordinator = RecallGroup.DefaultItemProposalCoordinator
						RecallType
							RecallType        = RecallGroup.DefaultItemProposalType						
					
					Action Rules
						ProposedItem = 4 
					
					Exit Rules
						
						include BuildRecallNoticeTaskStatus
				
				SubmitItemProposal is an Instance Action
					default label is "SubmitNewItemProposal"
					valid when (UnsubmittedItemProposal)
					Action Rules
						if (ProposalItemEntryMethod.Online)
							constraint (HasProducts)
								"CannotSubmit;MustHaveAtLeastOneNewItemProposed"
						else 
						if (ProposalItemEntryMethod.Attachment)
							constraint (ItemAttachmentEntered)
								"MustAttachASpreadsheetWithAListOfProposedItems"
						
						if (NewItemProposalRequiredQuestionsExist)
							for each NewItemProposalRequiredQuestionsRel
								constraint (each.RecallProductQuestion = any ResponseToSupplierItemRequestQuestionRel.RecallProductQuestion)
									"CannotSubmitNewItemProposal;RequiredQuestion_#<each.RecallProductQuestion>_'<each.Description>_'_isUnanswered"
						
						ProposedItem = 1 
						
						if (ReportedBySupplier entered)
							send email
								from ReportedBySupplier.SupplierSourceId.EmailAddress
								to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposalSubmittedBySupplier"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenSubmittedBySupplier<Supplier.SupplierName>"
									"Click<ItemReviewLinkback>ToViewTheNewItemProposalInformation."
						
						if (ReportedBySupplier !entered)
							send email
								from actor.agent(Employee).EmployeeWorkEmailAddress
								to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposalSubmittedByRequester"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenSubmittedByRequester<actor.agent(Employee).FirstLastName>"
									"Click<ItemReviewLinkback>ToViewTheNewItemProposalInformation."		
					Exit Rules
						if (RecallGroup.DefaultItemProposalReviewer entered)
							invoke AttachToRecallNoticeItemProposals RecallUser
								invoked.RecallGroup 				= RecallGroup
								invoked.RecallNotice 				= RecallNotice
				
				RecallPortalCreate is a Create Action
					completion message is "ThankYouForReportingThisRecall"
					allow anonymous access
					Field Rules
						RecallGroup
						RecallReceivedDate
		   					force default to current corporate date
						FDAClassification
							default to RecallType.DefaultFDAClassification
						EntryMechanism
							force default to EntryMechanism.RecallPortal
						RecallSource
							force default to RecallSource.Internal
						ReportedByRecallUser
							ReportedByRecallUser = actor.agent(Employee).Employee
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
					
					Exit Rules
						include BuildRecallNoticeTaskStatus
				
				ThirdPartyCreate is a Create Action
					completion message is "Notice<this instance.RecallNotice>Added"
					Field Rules
						FDAClassification
							default to RecallType.DefaultFDAClassification
						EntryMechanism
							force default to EntryMechanism.ThirdPartyInterface
						RecallSource
							required
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
					
					Exit Rules
						include BuildRecallNoticeTaskStatus
				
				RecallRSSCreate is a Create Action
					completion message is "Notice<this instance.RecallNotice>Added"
					restricted
					Field Rules
						RecallGroup
						RecallCoordinator
							if (RecallUserRel.RecallUser.IsRecallCoordinator)
   								default to (RecallUserRel.RecallUser)
						RecallReceivedDate
		   					default to current corporate date
						FDAClassification
							default to RecallType.DefaultFDAClassification
						EntryMechanism
							force default to EntryMechanism.RSSFeed
						RecallSource
							force default to RecallSource.FDA
						ReportedByRecallUser
							ReportedByRecallUser = actor.agent(Employee).Employee
						SavedTransactionQueryParameters
							SavedTransactionQueryParameters.TransactionQueryParameters.SetDefaultValue = true
							required 
					
					Exit Rules
						include BuildRecallNoticeTaskStatus
				
				CloseAsDuplicate is an Instance Action
					valid when (!ProposedItem.ApprovedPendingTrial)
					confirmation required
						"AreYouSureYouWantToCloseThisNoticeAsADuplicate?"
					
					Parameters
						ParamRecallNotice is a RecallNotice
					
					Parameter Rules
						ParamRecallNotice
							required
							constraint (ParamRecallNotice != RecallNotice)
								"CannotCloseNotice<ParamRecallNotice>AsADuplicateOfItself"
							
					Action Rules
						invoke Create RecallNoticeReference
							invoked.RecallGroup  	= RecallGroup
							invoked.RecallNotice 	= ParamRecallNotice
							invoked.ReferenceType	= 1 
							invoked.IdentifierId	= RecallNotice
							invoked.Description		= "Notice " + RecallNotice + " was closed as a duplicate of this Notice"
						
						invoke Create RecallNoticeReference
							invoked.RecallGroup  	= RecallGroup
							invoked.RecallNotice 	= RecallNotice
							invoked.ReferenceType	= 1 
							invoked.IdentifierId	= ParamRecallNotice
							invoked.Description		= "This Notice was closed as a duplicate of Notice " + ParamRecallNotice
						
						ClosedAsDuplicate = true
						
						make transition to ClosedAsDuplicate

						for each RecallNoticeTask set
							invoke New.Delete each			
							
				Update is an Update Action
					Field Rules
						RecallTaskInstruction
							if (RecallTaskInstruction changed)
								force default TaskInstructionDescription to RecallTaskInstruction.Description
								constraint (RecallTaskInstruction.ValidForNotices)
									"TaskInstructionMustBeValidForNotices"


					Action Rules
						if  (!RecallUserRel.RecallUser.IsRecallCoordinator
						and !ItemProposal
						and (MyRecallPortalNotices
						or   MySupplierPortalNotices))
							constraint (AllowPortalUpdate)
								"NoticeHasAlreadyBeenProcessedByCoordinator.CannotUpdate."

			   			if (RecallTaskInstruction entered
			   			and old RecallTaskInstruction not entered)
							invoke Update RecallProductsWithoutTaskInstructionRel
								invoked.RecallTaskInstruction		= RecallTaskInstruction
								invoked.TaskInstructionDescription  = TaskInstructionDescription
				
				RecallPortalUpdate is an Update Action
					valid when (AllowRecallPortalUpdate)
					Field Rules
						RecallTaskInstruction
							if (RecallTaskInstruction changed)
								force default TaskInstructionDescription to RecallTaskInstruction.Description
								constraint (RecallTaskInstruction.ValidForNotices)
									"TaskInstructionMustBeValidForNotices"

					Action Rules
						if  (!RecallUserRel.RecallUser.IsRecallCoordinator
						and (MyRecallPortalNotices
						or   MySupplierPortalNotices))
							constraint (AllowPortalUpdate)
								"NoticeHasAlreadyBeenProcessedByCoordinator.CannotUpdate."

			   			if (RecallTaskInstruction entered
			   			and old RecallTaskInstruction not entered)
							invoke Update RecallProductsWithoutTaskInstructionRel
								invoked.RecallTaskInstruction		= RecallTaskInstruction
								invoked.TaskInstructionDescription  = TaskInstructionDescription
				
				Delete is a Delete Action
				
				SupplierDelete is a Delete Action 

					default label is "Delete"

				ApproveProposedItems is an Instance Action
					valid when (CoordinatorCanApproveOrReject)
					default label is "Approve"

					Parameters
						CreateProposedContract   is Boolean
						CompleteProcessing       is Boolean
							default label is "CheckIfProcessingIsCompleteForNewItemProposal;DoNotCheckIfFurtherProcessingWillBePerformed"
					
					Parameter Rules
						CreateProposedContract
						
							constraint (ContractGroupRel.ProposedItemClassAndTypeEntered)
								"CannotCreateAProposedContract;DefaultClassAndTypeMustBeEnteredOnContractGroup"
					
						CompleteProcessing
							
							if (CompleteProcessing)
								constraint (RecallType entered)
   									"NewItemProposalTypeIsRequired"
   							
   								constraint (RecallCoordinator entered)
   									"CoordinatorIsRequired"
					
					Action Rules
						if (ProposalItemEntryMethod.Attachment)
							constraint (HasProducts)
								"CannotApprove;MustHaveDetailForNewItemsProposed;Use_Infor_Spreadsheet_DesignerToUploadItemsUsing_Create_Item_Proposal_From_SpreadsheetAction"
						if (CompleteProcessing
						or  !HasRecallProductItems)
							if (!AllProductsHaveItems)
								Status = 8 
							else
							if (AllProductsHaveItems)
								Status = 5 
						ProposedItem = 2 
						if (!CreateItemBeforeRequisition)
							 
							if (ItemGroupRel.RequireManufacturerOnNewInterfaceItems)
								constraint (ManufacturerCodeDivision entered)
									"MustEnterAManufacturerCodeOnItemProposalGeneralTabToAllowItemToBeCreated"							
							
							for each ProductWithNoItemRel
								invoke CreateItemWorksheet each
							
						if (CreateProposedContract)
							invoke CreateProposedContractFromNewItemProposal Contract
								invoked.ParmContractGroup		= RecallGroup
								invoked.ParmName                = Name
								invoked.ParmDescription         = Description
								if (ReportedBySupplier.Supplier entered)
									invoked.ParmSupplier            = ReportedBySupplier.Supplier
									invoked.ParmSupplierSourceId    = ReportedBySupplier.SupplierSourceId
								else
									invoked.ParmSupplier        	= Supplier
									invoked.ParmSupplierSourceId	= 1
								invoked.ParmRecallNotice        = RecallNotice
						
						if (ReportedBySupplier entered)
							send email
								to ReportedBySupplier.SupplierSourceId.EmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
								
						if (ReportedByRecallUser entered)
							send email
								to ReportedByRecallUser.EmployeeWorkEmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
					
				ApproveProposedItemsPendingTrial is an Instance Action
					valid when (CoordinatorCanApproveForTrial)
					default label is "ApprovePendingTrial"

					Parameters
						PrmCreateItemBeforeRequisition   is Boolean
							default label is "CreateItemBeforeRequisition"
					
					Parameter Rules
					
					Action Rules
						if (ProposalItemEntryMethod.Attachment)
							constraint (HasProducts)
								"CannotApprovePendingTrial;MustHaveDetailForNewItemsProposed;Use_Infor_Spreadsheet_DesignerToUploadItemsUsing_Create_Item_Proposal_From_SpreadsheetAction"
						ProposedItem = 5 
						if (PrmCreateItemBeforeRequisition)
							for each ProductWithNoItemRel
								invoke CreateItemWorksheet each
							
						CreateItemBeforeRequisition = PrmCreateItemBeforeRequisition
						
						if (ReportedBySupplier entered)
							send email
								to ReportedBySupplier.SupplierSourceId.EmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedPendingTrial"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedPendingTrial"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"

						if (ReportedByRecallUser entered)
							send email
								to ReportedByRecallUser.EmployeeWorkEmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedPendingTrial"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedPendingTrial"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"

				ApproveProposedItemsWithOpenReviews is an Instance Action 
					valid when (CoordinatorCanOverrideApproveOrReject) 
					default label is "OverrideAndApprove"
				
					Parameters
						CreateProposedContract   is Boolean
						CompleteProcessing       is Boolean
							default label is "CheckIfProcessingIsCompleteForNewItemProposal;DoNotCheckIfFurtherProcessingWillBePerformed"
					
					Parameter Rules
						CreateProposedContract
						
							constraint (ContractGroupRel.ProposedItemClassAndTypeEntered)
								"CannotCreateAProposedContract;DefaultClassAndTypeMustBeEnteredOnContractGroup"
					
						CompleteProcessing
							
							if (CompleteProcessing)
								constraint (RecallType entered)
   									"NewItemProposalTypeIsRequired"
   							
   								constraint (RecallCoordinator entered)
   									"CoordinatorIsRequired"
					
					Action Rules
						if (ProposalItemEntryMethod.Attachment)
							constraint (HasProducts)
								"CannotOverrideAndApprove;MustHaveDetailForNewItemsProposed;Use_Infor_Spreadsheet_DesignerToUploadItemsUsing_Create_Item_Proposal_From_SpreadsheetAction"
				
						if (HasOpenReviews)
							confirmation required 
								"ReviewsExistWhichHaveNotBeenCompletedAndWillBeOveridden;Continue?"
							for each OpenItemProposalTaskRel
								invoke OverrideApproveReview each
								send email
									from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
									to each.Owner.EmployeeWorkEmailAddress
									subject "ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved.YourPendingReviewHasBeenOveridden"
									Contents
										"ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedByTheCoordinator"
										"YouHadAPendingReviewWhichHasBeenOveridden"	
										"ProposedItemIs<first ProductItemProposalRel.ProductName>"		

						if (HasTrial)
							LocalFromOverrideApproval = true
							invoke Pending.CancelTrial

						if (CompleteProcessing
						or  !HasRecallProductItems)
							if (!AllProductsHaveItems)
								Status = 8 
							else
							if (AllProductsHaveItems)
								Status = 5 
						ProposedItem = 2 
							 
						if (ItemGroupRel.RequireManufacturerOnNewInterfaceItems)
							constraint (ManufacturerCodeDivision entered)
								"MustEnterAManufacturerCodeOnItemProposalGeneralTabToAllowItemToBeCreated"
							for each ProductWithNoItemRel 
								constraint (each.ProposedManufacturerNumber entered)
									"MustEnterAManufacturerNumberForEachProposedItemToAllowItemToBeCreated"							
							
						for each ProductWithNoItemRel
							invoke CreateItemWorksheet each
							
						if (CreateProposedContract)
							invoke CreateProposedContractFromNewItemProposal Contract
								invoked.ParmContractGroup		= RecallGroup
								invoked.ParmName                = Name
								invoked.ParmDescription         = Description
								if (ReportedBySupplier.Supplier entered)
									invoked.ParmSupplier            = ReportedBySupplier.Supplier
									invoked.ParmSupplierSourceId    = ReportedBySupplier.SupplierSourceId
								else
									invoked.ParmSupplier        	= Supplier
									invoked.ParmSupplierSourceId	= 1
								invoked.ParmRecallNotice        = RecallNotice
						
						if (ReportedBySupplier entered)
							send email
								to ReportedBySupplier.SupplierSourceId.EmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
								
						if (ReportedByRecallUser entered)
							send email
								to ReportedByRecallUser.EmployeeWorkEmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"

				CreateRequisitionsFromItemProposalTrial is an Instance Action
					valid when (HasSelectionsForTrialRequisitions)
					default label is "CreateRequisitionsForTrial"

					Parameters
						PrmRequestedDeliveryDate 	is Date
							default label is "RequestedDeliveryDate"
						PrmNoChargeForItem          is Boolean
							default label is "NoChargeItems"
						PrmReleaseRequisition 		is Boolean
							default label is "ReleaseRequisitions"
					
					Parameter Rules
						PrmRequestedDeliveryDate
							constraint (current corporate date < PrmRequestedDeliveryDate)
								"MustEnterARequestedDeliveryDateThatIsAfterToday"
						PrmReleaseRequisition
							if (PrmReleaseRequisition)
								constraint (PrmRequestedDeliveryDate entered)
									"MustEnterRequestedDeliveryDateIfReleasingRequisitions"
								for each SelectedTrialItemCompaniesAndLocationsRel
									constraint (each.DefaultDistributionAccount entered)
										"MustEnterADefaultAccountForEachSelectedCompanyAndLocationIfReleasingRequisition"
					
					Action Rules
						
						if (!CoordinatorIsRequester)
							for each SelectedTrialItemCompaniesAndLocationsRel
								constraint (each.Requester entered)
									"MustEnterARequesterForEachTrialItemCompanyAndLocation"
						
						for each SelectedTrialItemProductsRel
							constraint (each.TrialQuantity entered)
								"MustEnterATrialQuantityForEachSelectedItem"
							constraint (each.TrialUnitOfMeasure entered)
								"MustEnterAUnitOfMeasureForEachSelectedItem"
							if (each.ItemCreated entered)
								constraint (each.ItemCreated.Active)
									"Item<each.ItemCreated>IsInactive;MustActivateBeforeCreatingRequisition"
									
						invoke CreateAllRequisitionsFromItemProposalTrial 
							invoked.PrmRecallGroup          	= RecallGroup
							invoked.PrmRecallNotice         	= RecallNotice
							invoked.PrmRequestedDeliveryDate 	= PrmRequestedDeliveryDate
							invoked.PrmNoChargeForItem          = PrmNoChargeForItem
							invoked.PrmReleaseRequisition       = PrmReleaseRequisition    
						
				CreateAllRequisitionsFromItemProposalTrial is a Set Action
					restricted
					
					Parameters
						PrmRecallGroup              is a RecallGroup
						PrmRecallNotice             is a RecallNotice
						PrmRequestedDeliveryDate 	is Date
						PrmNoChargeForItem          is Boolean
						PrmReleaseRequisition 		is Boolean

					
					Instance Selection
						where (PrmRecallGroup   = RecallGroup
						and    PrmRecallNotice  = RecallNotice)
						
					Action Rules
						Instance Rules
							LocalRecallGroup    = PrmRecallGroup
							LocalRecallNotice   = PrmRecallNotice
							for each SelectedSetActionTrialItemCompaniesAndLocationsRel
	
								invoke Unreleased.Create Requisition 
									assign result to TrialRequisition 
									invoked.TrialNotice 					= RecallNotice
									invoked.Requester   					= each.Requester
									invoked.RequestedDeliveryDate   		= PrmRequestedDeliveryDate	
									invoked.Company                  		= each.TrialItemCompaniesAndLocations.InventoryCompany
								   	invoked.RequestingLocation       		= each.TrialItemCompaniesAndLocations.RequestingLocation
	                    			invoked.FromCompanyLocation.FromCompany	= each.TrialItemCompaniesAndLocations.InventoryCompany
	                    			invoked.FromCompanyLocation.FromLocation = each.TrialItemCompaniesAndLocations.InventoryLocation
	                    			invoked.Vendor							= Vendor
									invoked.Buyer                    		= each.Buyer
									invoked.DefaultDistributionAccount 		= each.DefaultDistributionAccount
							
								for each SelectedSetActionTrialItemProductsRel
		                    		invoke Create RequisitionLine
		 								assign result to TrialRequisitionLine
		                    			invoked.Company     				= TrialRequisition.Company
		                    			invoked.Requisition          	    = TrialRequisition.Requisition
		                    			if (each.ItemCreated entered)
		                    				invoked.Item             		= each.ItemCreated
		                    			else
		                    				invoked.Item             		= each.ProposedVendorItem
			                    			invoked.VendorItem       		= each.ProposedVendorItem
		                    				invoked.ManufacturerNumber 		= each.ProposedManufacturerNumber
		                    				invoked.ItemGTIN 				= each.ProposedGlobalTradeItemNumber
		                    				invoked.Description             = each.ProductName
		                    				invoked.EnteredUOM  			= each.ItemUOMContract.ItemUOMContractOccurs.ItemUOMContractDetails[1].UnitOfMeasure
		                				if (PrmNoChargeForItem)
		                					invoked.CostOption             	= CostOption.NoCharge
		                				else
		                					invoked.TransactionUnitCost     = each.UnitCost
		                				invoked.Quantity                   	= each.TrialQuantity	 
										invoked.CreatePurchaseOrder         = true
	
		                    		invoke Create RequisitionLineComment
		                    			invoked.Company   		= TrialRequisition.Company
		                    			invoked.Requisition  	= TrialRequisition.Requisition
		                    			invoked.RequisitionLine = TrialRequisitionLine.RequisitionLine
		                    			invoked.CommentTitle    = each.ProductName
		                    			invoked.CommentType     = "P" 
		                    			invoked.CommentText     = each.ProductDescription
	                    	
		                    		invoke Update each
		                    			invoked.TrialQuantity   	= 0
		                    			invoked.TrialUnitOfMeasure 	= blank
	                    	
		                    	invoke Update each
		                    		invoked.Requisition     			= TrialRequisition.Requisition
		                    		invoked.RequisitionLine 			= TrialRequisitionLine.RequisitionLine
		                    		invoked.SelectedForTrialRequisition = false
	                    	
	                    		if (PrmReleaseRequisition = true)
	                    			LocalTrialItemCompany        = TrialRequisition.Company
	                    			LocalTrialItemRequisition    = TrialRequisition.Requisition
	                    				invoke Unreleased.Release TrialItemRequisitionRel								

				AllTrialRequisitionsCreated is an Instance Action
					valid when (HaveCreatedTrialRequisitions)
					
					Parameters
						PrmTrialEndDate     			is TimeStamp
							default label is "TrialEndDate"
						PrmTaskReviewDateNumberOfDays 	is Numeric 2
							default label is "NumberOfDaysAfterTrialEndDateThatReviewsAreDue"
							
					Parameter Rules
						PrmTrialEndDate
							required
								"MustEnterATrialEndDate"
							constraint (PrmTrialEndDate > current corporate date)
								"TrialEndDateMustBeAfterToday"
					
					Action Rules
						if (NoRequisitionTrialItemCompaniesAndLocationsRel exists)
							confirmation required
								"TrialItemCompaniesAndLocationsExistWhichHaveNoRequisitionsCreated;Continue?"

						TrialEndDate    = PrmTrialEndDate						
						for each TasksPendingItemTrialRel
							invoke UpdateDueDate each
								invoked.PrmNewDueDate = PrmTrialEndDate + PrmTaskReviewDateNumberOfDays as days	 

				UpdateTrialEndDate is an Instance Action
					valid when (CanUpdateTrialEndDate)
					Parameters
						PrmTrialEndDate     			is TimeStamp
							default label is "NewTrialEndDate"
						PrmTaskReviewDateNumberOfDays 	is Numeric 2
							default label is "NumberOfDaysAfterNewTrialEndDateThatReviewsAreDue"
							
					Parameter Rules
						PrmTrialEndDate
							initial value is TrialEndDate
							required
								"MustEnterANewTrialEndDate"
							constraint (PrmTrialEndDate > current corporate date)
								"NewTrialEndDateMustBeAfterToday"
					
					Action Rules
						TrialEndDate    = PrmTrialEndDate						
						for each TasksPendingItemTrialRel
							invoke UpdateDueDate each
								invoked.PrmNewDueDate = PrmTrialEndDate + PrmTaskReviewDateNumberOfDays as days	
												
				CancelTrial is an Instance Action
					valid when (CanCancelTrial)
					Action Rules
						confirmation required
							"AllOpenPurchaseOrdersAndRequisitionsWillBeCanceledOrDelete.ProposalMustBeApprovedOrRejected.Continue?"
						initialize TrialEndDate
						if (!LocalFromOverrideApproval
						and !LocalFromOverrideRejection)
							ProposedItem = ProposedItem.ProposedSubmitted						
							for each TasksPendingItemTrialRel
								invoke Update Completed each
									invoked.ProposedItem = 1 
						for each HasRequisitionTrialItemCompaniesAndLocationsRel
							invoke CancelTrial each
							
				RejectProposedItems is an Instance Action
					valid when (CoordinatorCanApproveOrReject)
					action comment required
					Action Rules
						confirmation required
							"NewItemProposalWillBeClosedIfRejected.Continue?"
						ProposedItem = 3 
						make transition to Closed	
						
						if (ReportedBySupplier entered)
							send email
								to ReportedBySupplier.SupplierSourceId.EmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
									"Comment:<action comment>"
									
						if (ReportedByRecallUser entered)
							send email
								to ReportedByRecallUser.EmployeeWorkEmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
									"Comment:<action comment>"			
				
				RejectProposedItemsWithOpenReviews is an Instance Action 
					valid when (CoordinatorCanOverrideApproveOrReject) 
					default label is "OverrideAndReject"
					action comment required
					Action Rules
						confirmation required
							"NewItemProposalWillBeClosedIfRejected.Continue?"
						ProposedItem = 3 
						make transition to Closed	
						
						display "HasTrial<HasTrial>"
						if (HasTrial)
							LocalFromOverrideRejection = true
							invoke Pending.CancelTrial

						if (HasOpenReviews)
							confirmation required 
								"ReviewsExistWhichHaveNotBeenCompletedAndWillBeOveridden;Continue?"
							for each OpenItemProposalTaskRel
								invoke CancelReview each
								send email
									from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
									to each.Owner.EmployeeWorkEmailAddress
									subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected.YourPendingReviewHasBeenCanceled"
									Contents
										"TheReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenCanceledByTheCoordinator"
										"ProposedItemIs<first ProductItemProposalRel.ProductName>"
										"Comment:<action comment>"		

						if (ReportedBySupplier entered)
							send email
								to ReportedBySupplier.SupplierSourceId.EmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
									"Comment:<action comment>"
									
						if (ReportedByRecallUser entered)
							send email
								to ReportedByRecallUser.EmployeeWorkEmailAddress
								from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
								subject "NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
								Contents
									"NewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
									"ProposedItemIs<first ProductItemProposalRel.ProductName>"
									"Comment:<action comment>"

				Release is an Instance Action
					valid when (CanRelease)
					completion message is "Notice<this instance.RecallNotice>HasBeenReleased"
					Action Rules
						for each NonManualTasksRel
							if (each.DoesNotHaveTransactionTasks)
								invoke Delete each 
						
						if (HasPastDueTasks)
							confirmation required
				    			"TasksExistWithDueDatesPriorToCurrentDateAndTime.Continue?"
						constraint (RecallType entered)
   							"TypeIsRequired"
   							
   						constraint (RecallCoordinator entered)
   							"CoordinatorIsRequired"
   						
   						constraint (RecallProduct set exists)
   							"ProductsMustBeDefinedToReleaseNotice"
   						
						if (LastProductActivityQuery entered)
							constraint (!ProductsUpdatedAfterQueryRunDate)
								"CannotRelease.ProductsOrItemsHaveBeenUpdatedSinceLastQueryRun."
							   						
						constraint (!UnapprovedItemProposal)
							"CannotRelease;NewItemProposalMustBeApprovedOrRejected"
						
						if (HasItemsOnOtherNotices)
							confirmation required
								"ItemsOnThisNoticeAlsoExistOnOtherNotices.Continue?"
								
   						if (!Equipment
   						and !LastProductActivityQuery entered
   						and	RecallProductItem set exists)
   							confirmation required
	   							"TheProductTransactionQueryHasNotBeenRun;WouldYouLikeToContinueToRelease?"
	   					
	   					if (Equipment
   						and !LastProductActivityQuery entered
   						and	(RecallEquipmentSerial set exists
   						or   ProductWithModelNumberRel exists))
   							confirmation required
	   							"TheProductEquipmentQueryHasNotBeenRun;WouldYouLikeToContinueToRelease?"
	   										
   						constraint (AllTasksAssigned)
   							"Task<first UnassignedTaskRel.RecallNoticeTask>IsUnassigned"
   						
   						if (!RecallNoticeTaskNotItemProposalRel exists)
   							if (RecallNotification set exists
							or  RecallAdhocNotificationRel exists)
	   							confirmation required
	   								"TasksWereNotCreatedForThisNotice;WouldYouLikeToContinueToRelease?"
	   						else
	   							constraint (false)
	   								"MustDefineTasksOrNotificationsToReleaseNotice"
   						
   						constraint (!ProductListQuestionsWithNoValueRel exists)
							"Question<first ProductListQuestionsWithNoValueRel.RecallProductQuestion>ForProduct<first ProductListQuestionsWithNoValueRel.RecallProduct>DoesNotHaveListAnswersDefined"
						
						constraint (!TaskListQuestionsWithNoValueRel exists)
							"Question<first TaskListQuestionsWithNoValueRel.RecallNoticeTaskQuestion>ForTask<first TaskListQuestionsWithNoValueRel.RecallNoticeTask>DoesNotHaveListAnswersDefined"
						
						if (RecallProductParsedDescriptionRel exists)
							confirmation required
								"ParsedProductDescriptionDetailsExistForProduct<first RecallProductParsedDescription set.RecallProduct>;WouldYouLikeToContinueToRelease?"
										
   						invoke Release RecallProduct set
   						
   						if (!RecallGroup.RequireTaskAcceptance)
   							for each RecallNoticeTaskNotItemProposalRel
								if (each.Status = 1)
									invoke TransitionToAccepted each
							
						include BuildTextIndexes 
						
						make transition to Active

					Exit Rules
						if (RecallGroup.SendRecallNoticeEmail)
							generate document RecallDocumentReport as pdf in portrait font offset is -2
								set using action SendNotifications
						if (RecallGroup.SendTaskEmail)
							invoke NotifyTaskOwners

						if (RecallGroup.SendRequesterNoticeEmail
						or  RecallGroup.SendPOBuyerNoticeEmail
						or  RecallGroup.SendEventBuyerNoticeEmail
						or  RecallGroup.SendContractNoticeEmail)
							invoke NotifyDocumentOwners
						
				NotApplicable is an Instance Action
					valid when (CanCloseAsNotApplicable)
					default label is "CloseAsNotApplicable"
					confirmation required
						"AreYouSureYouWantToMarkThisNoticeAsNotApplicable?"
						
					Action Rules
						if (TransactionActivityExists)
   							confirmation required
   								"TransactionActivityExists;WouldYouLikeToContinueToMarkAsNotApplicable?"
   							
						make transition to NotApplicable	
			
			Active is a State
				on entrance to Active
					Action Rules
						if (ReleasedTimestamp not entered)
							ReleasedTimestamp   = current timestamp
							DaysInPendingStatus = (ReleasedTimestamp date - create date)
						
				Unrelease is an Instance Action
					valid when (!TaskActivityHasOccurred)
					completion message is "Notice<this instance.RecallNotice>HasBeenSetToPendingStatus"
					Action Rules
						constraint (!TaskActivityHasOccurred)
							"CannotUnRelease.TaskActivityHasOccurred" 
						initialize ReleasedTimestamp
						initialize DaysInPendingStatus
   						invoke Delete RecallProductTaskItem set
   						
						invoke TransitionToNew Accepted AcceptedTaskRel
							
						make transition to Pending

				NotApplicable is an Instance Action
					default label is "CloseAsNotApplicable"
					valid when (CanCloseAsNotApplicable)
					subject is SetActiveRecallNoticeToNonApplicable
					reason code required
					confirmation required
						"AreYouSureYouWantToMarkThisNoticeAsNotApplicable?"
						
					Action Rules
						if (TransactionActivityExists)
   							confirmation required
   								"TransactionActivityExists;WouldYouLikeToContinueToMarkAsNotApplicable?"
   								
						make transition to NotApplicable
						
				Close is an Instance Action
					valid when (AllowClose)
					Action Rules
						constraint (!OpenRecallNoticeTasksCompletionReqRel exists)
							"CannotCloseNotice;OpenTasksExist"
							
						if (HasOpenResolutions)
							make transition to CompletedResolutionsPending
						else
							make transition to AwaitingApproval
			
			CompletedResolutionsPending is a State

				Close is an Instance Action
					valid when (!HasOpenResolutions)
					Action Rules
						make transition to AwaitingApproval
			
				Reopen is an Instance Action
					subject is ReopenRecallNotice
					reason code required
					Action Rules
						make transition to Active
							
			CompletedItemCreationPending is a State
			
				Close is an Instance Action
					restricted
					Action Rules
						make transition to AwaitingApproval				

			AwaitingApproval is a State
				on entrance to AwaitingApproval
					Action Rules
						ApprovalTimestamp = current timestamp
						
						if (!RecallGroup.RecallApprovalRequired)
							invoke Approve
						else
						    initiate RecallApproval process
	    						title is "RecallNotice#<RecallNotice>"
								Criteria
	        						RecallGroup
	    						Variables
									RecallGroup
									RecallNotice
									Name
									EntryMechanism
									RecallSource
									RecallCoordinator
									RecallCoordinatorEmail
									RecallType
									Equipment
									FDAClassification
								URLs
									"<linkback(webapp is RecallCoordinator navigation is ProcessFlowForm text is \"ViewRecallNotice\" session key RecallGroup is RecallGroup)>"
							
				Approve is an Instance Action
					restricted
					Action Rules
						make transition to Closed
						
				Disapprove is an Instance Action
					restricted
					action comment required
					Action Rules
						make transition to Active
						initialize ApprovalTimestamp
				
				ManualApprove is an Instance Action
					Action Rules
						make transition to Closed
						cancel RecallApproval process
								
				ManualDisapprove is an Instance Action
					action comment required
					Action Rules
						make transition to Active
						initialize ApprovalTimestamp
						cancel RecallApproval process
												
			NotApplicable is a State
				on entrance to NotApplicable
					Action Rules
						NotApplicableTimestamp = current timestamp
						FinalizedDate	   	   = current timestamp
						DaysUntilFinalized     = (FinalizedDate date - create date)
						
				Reinstate is an Instance Action
					subject is ReinstateRecallNotice
					reason code required
					Action Rules
   						if (ReleasedTimestamp entered)
							make transition to Active
							initialize NotApplicableTimestamp
							initialize FinalizedDate
							initialize DaysUntilFinalized
						else
							make transition to Pending
							initialize NotApplicableTimestamp
							initialize FinalizedDate
							initialize DaysUntilFinalized
							initialize ReleasedTimestamp
							initialize DaysInPendingStatus
			
			Closed is a State
				on entrance to Closed
					Action Rules
						ClosedTimestamp    = current timestamp
						DaysInActiveStatus = (ClosedTimestamp date - ReleasedTimestamp date)
						FinalizedDate	   = current timestamp
						if (RecallGroup.RecallApprovalRequired)
							DaysInAwaitingApprovalStatus = (ClosedTimestamp date - ApprovalTimestamp date) 
						DaysUntilFinalized = (FinalizedDate date - create date)
				
						if (RecallGroup.SendRecallNoticeCloseEmail)
							for each RecallNotificationEmailRel 
								send email
									to each.RecallUser.EmployeeWorkEmailAddress
									from RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
									subject "<RecallGroup.FinalRecallNoticeCloseEmailSubject>"
									Contents
										"<RecallGroup.FinalRecallNoticeCloseEmailContent>"
										"Click<NotificationLinkback>ToViewTheNotice."
						
							for each RecallNoticeTask set 
								send email
									to each.Owner.EmployeeWorkEmailAddress
									from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
									subject "<RecallGroup.FinalRecallNoticeCloseEmailSubject>"
									Contents
										"<RecallGroup.FinalRecallNoticeCloseEmailContent>"
										"Click<NotificationLinkback>ToViewTheNotice."
										
				Reopen is an Instance Action
					valid when (!RejectedItemProposal)
					subject is ReopenRecallNotice
					reason code required
					Action Rules
						make transition to Active
							
						initialize ClosedTimestamp
						initialize FinalizedDate
						initialize DaysInActiveStatus
						initialize DaysUntilFinalized
								
				Purge is a Purge Action	
					restricted

			ClosedAsDuplicate is a State
				on entrance to ClosedAsDuplicate
					Action Rules
						ClosedTimestamp    = current timestamp
						DaysInActiveStatus = (ClosedTimestamp date - ReleasedTimestamp date)
						FinalizedDate	   = current timestamp
						DaysUntilFinalized = (FinalizedDate date - create date)
				
				Reopen is an Instance Action
					subject is ReopenRecallNotice
					reason code required
					Action Rules
   						invoke Delete RecallProductTaskItem set
						invoke TransitionToNew Accepted AcceptedTaskRel
						invoke Delete DuplicateNoticeReferenceRel
						invoke Delete DuplicateReferenceRel
						initialize ClosedAsDuplicate
						make transition to Pending
							
						initialize ClosedTimestamp
						initialize FinalizedDate
						initialize DaysInActiveStatus
						initialize DaysUntilFinalized
												
				Purge is a Purge Action	
					restricted
