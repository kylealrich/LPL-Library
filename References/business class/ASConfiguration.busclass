ASConfiguration is a BusinessClass
	default label is "ApplicationSetupConfiguration"
    owned by appsetup
    prefix is ASCTG
        
    Ontology
     	symbolic key is ASConfiguration
     	
    Patterns
    	implements LightweightAuditing
    	disable EffectiveDated
     	disable AuditIndex
    	
    Persistent Fields
        Description         is Alpha size 50
        ProductLine         is Alpha size 3
        	States
        		HCM value is "HCM"
        		FSM value is "FSM"
        CreateTimeStamp     					is TimeStamp
		ExportFromTimeStamp 					is TimeStamp
        Inactive            					is Boolean
        Delivered		    					is Boolean
		BaseConfiguration						is like ASConfiguration
		BaseVersionNumber						is Numeric 5 
		DefaultEffectiveDate					is Date
		VersionNumber							is Numeric 5
		IsPrimary								is Boolean
			default label is "Primary"
		
	Local Fields
		ConfigurationParameterName		is Alpha size up to 150	
		TempModuleBaseID				is Numeric 5
		TempRequiredBaseID				is Numeric 5
		TempBCBaseID					is Numeric 5
		TempBCRequiredBaseID			is Numeric 5
		TempASModule					is like ASModule
		TempASBC						is like ASBusinessClass
		TempRelatedModule				is like ASModule
		TempRelatedBCBaseID				is Numeric 5
		TempRelatedBCModBaseID			is Numeric 5
		LastConfig						is like ASStoredConfiguration
		TempFieldName					is like BusinessField
		CheckModule						is like ASModule
		CheckBC 						is like ASBusinessClass
		CheckField						is like ASBCField
		UpgradeInProgress				is Boolean
		KeyModule						is like ASModule
		KeyBC							is like ASBusinessClass
		KeyField						is like ASBCField	
		LocalTagListJSON				is JSONObject
		
	Transient Fields
		ImportConfigurationFile 		is a FileAttachment
		UpgradeBackup					is an ASStoredConfiguration view
		NewConfigurationName 			is like ASConfiguration
		UseConfigurationNameFromFile	is Boolean
		ResequenceClassIDs				is Boolean
		TriggeredByUpgrade				is Boolean

	

	Field Rules
		IsPrimary
			cannot be changed
				"ThisFieldCanOnlyBeChangedUsingTheMakePrimaryAction."		

		Description 
			required
			if (!CanEditBaseFields)
				cannot be changed
					"DeliveredConfigurationsCannotBeChanged."
				
		ProductLine 
			required
			initial value is CurrentProductLine
			
			if (!CanEditBaseFields)
				cannot be changed
					"DeliveredConfigurationsCannotBeChanged."
				
		CreateTimeStamp
			default to current timestamp
			
		Delivered
			if (!DevelopmentMode)
				cannot be changed
					"DeliveredFlagCannotBeChangedOutsideOfDeveloperMode"
		
		VersionNumber
			initial value is 1
			default to 1
			if (!CanEditBaseFields)
				cannot be changed
					"DeliveredConfigurationsCannotBeChanged."
		
		BaseConfiguration
			cannot be changed
				"BaseConfigurationsCannotBeChanged."
		
		BaseVersionNumber
			if (!CanEditBaseFields)
				cannot be changed
					"BaseConfigurationVersionsCannotBeChanged."
		
		DefaultEffectiveDate
			initial value is "19500101"
			if (ProductLine.HCM)
                default to "19500101"
            else
                default to current date

			if (DefaultEffectiveDate changed)
				if (WarnOnDeliveredDefaultEffectiveDate)
					confirmation required
						"ThisChangeWillBeOverwrittenTheNextTimeThisDeliveredConfigurationIsUpdated.Proceed?"
		
		Inactive
			if (Inactive changed)
				if (WarnOnDeliveredInactiveSetting)
					confirmation required
						"ThisChangeWillBeOverwrittenTheNextTimeThisDeliveredConfigurationIsUpdated.Proceed?"


	Derived Fields
		AppSetupList is a NativeField
			type is JSONObject
			default label is untranslatable

		CSPExportFormat is a NativeField
			type is JSONObject		
		
		ToJSON is a NativeField
			type is JSONObject
			default label is "ConfigurationAsJ\S\O\N"
		
		ToJSONText is a DerivedField
			type is Text
			restricted
			default label is "J\S\O\NText"
			return "" + ToJSON
		
		BaseToJSON is a DerivedField
			type is JSONObject
			restricted
			default label is untranslatable
			if (BaseConfigurationRel exists)
				return BaseConfigurationRel.ToJSON

		CompareToBase is a NativeField
			type is RichText
			restricted
			default label is untranslatable
						
		JSONFile is a DerivedField
			type is BinaryDocument  
			default label is "J\S\O\N_File"
			
		DeveloperMode is a NativeField
			type is Boolean
			default label is untranslatable

		BackupDescriptionMessage is a MessageField
			"BackupCreatedDuringAutomaticUpdate"
		
		SummaryChangesDescriptionMessage is a MessageField
			"SummaryOfChangesAppliedDuringAutomaticUpdate"
		
		SummaryChangesDescriptionMessage_Imcomplete is a MessageField
			"SummaryOfChangesAppliedDuringAutomaticUpdate_NotAllChangesCouldBeAppled."
		
		BlueAlertMessage is a MessageField
			"ConfigurationHasDeactivatedItems"
		
		HasInactiveItems is a DerivedField
			type is Boolean
			default label is untranslatable
			if (Inactive)
				return true
			else
				for each ModulesByDisplayOrderRel
					if (each.HasInactiveItems)
						return true
			return false
		
		CurrentProductLine is a NativeField
			type is Alpha 3
			restricted

		SuperuserOn is a DerivedField
			type is Boolean
			ConfigurationParameterName = "appsetup.superuser.mode"
			if (ConfigurationParameterRel exists)
				return ConfigurationParameterRel.Value
			return false
		
		AutoReapplyInactiveSettingsIsOn is a DerivedField
			type is Boolean
			ConfigurationParameterName = "appsetup.auto.reapply.inactive.settings"
			if (ConfigurationParameterRel exists)
				return ConfigurationParameterRel.Value
			return false

		AutoReapplyDefaultEffectiveDatesIsOn is a DerivedField
			type is Boolean
			ConfigurationParameterName = "appsetup.auto.reapply.default.effective.dates"
			if (ConfigurationParameterRel exists)
				return ConfigurationParameterRel.Value
			return false
		
		WarnOnDeliveredInactiveSetting is a DerivedField
			type is Boolean
			if (!CanEditBaseFields)
				if (!AutoReapplyInactiveSettingsIsOn)
					return true
			return false

		WarnOnDeliveredDefaultEffectiveDate is a DerivedField
			type is Boolean
			if (!CanEditBaseFields)
				if (!AutoReapplyDefaultEffectiveDatesIsOn)
					return true
			return false	
				
	Conditions
		CanEditBaseFields
			default label is "BaseFieldsCanBeEdited"
			when ( not Delivered 
			or DeveloperMode)
		
		DevelopmentMode
			default label is "Developer_Mode"
			when (DeveloperMode)
		
		BlueAlert
			when (HasInactiveItems)
		
		IsBasedFromDelivered
			default label is untranslatable
			when (BaseConfiguration entered
			and BaseConfigurationRel.Delivered
			and !UpgradeInProgress)
		
		ShowLogs
			when (LogRel exists)
	
	Rule Blocks
		DoMakePrimary
			for each ExistingPrimaryASConfiguration
				invoke RemoveAsPrimary each

			IsPrimary = true
			
			ConfigurationParameterName = "appsetup_Primary"	
			
			if (ConfigurationParameterRel not exists)
				invoke Create ConfigurationParameterRel
					invoked.Type 		= 8222 
					invoked.Value		= ASConfiguration
			else
				invoke Update ConfigurationParameterRel
					invoked.Value		= ASConfiguration

		
	Relations
		ExistingPrimaryASConfiguration
			one-to-many relation to ASConfiguration
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ASConfiguration	!=  ASConfiguration
				and related.IsPrimary	= true)

		ModulesByDisplayOrderRel
			one-to-many relation to ASModule
			Field Mapping uses ByDisplayOrder
                related.ASConfiguration			= ASConfiguration
		
		ConfigurationParameterRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= ConfigurationParameterName	
		BaseConfigurationRel
			one-to-one relation to ASConfiguration
			Field Mapping uses symbolic key
				related.ASConfiguration =  BaseConfiguration
		
		ModuleRel
			one-to-many relation to ASModule
			Field Mapping uses ByBaseModule
				related.ASConfiguration			= ASConfiguration
				related.BaseModule				= TempModuleBaseID

		ModuleRequiredRel
			one-to-many relation to ASModule
			Field Mapping uses ByBaseModule
				related.ASConfiguration			= ASConfiguration
				related.BaseModule				= TempRequiredBaseID

		BCRel
			one-to-many relation to ASBusinessClass
			Field Mapping uses ByBaseBC
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= TempASModule
				related.BaseBusinessClass		= TempBCBaseID
		
		FieldRel
			one-to-one relation to ASBCField
			Field Mapping uses ByFieldName
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= TempASModule
				related.ASBusinessClass			= TempASBC
				related.FieldName				= TempFieldName

		BCRequiredRel
			one-to-many relation to ASBusinessClass
			Field Mapping uses ByBaseBC
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= TempASModule
				related.BaseBusinessClass		= TempBCRequiredBaseID
		
		RelatedBCModByBaseModRel
			one-to-many relation to ASModule
			Field Mapping uses ByBaseModule
				related.ASConfiguration 	= ASConfiguration
				related.BaseModule			= TempRelatedBCModBaseID

		BCRelatedRel
			one-to-many relation to ASBusinessClass
			Field Mapping uses ByBaseBC
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= TempRelatedModule
				related.BaseBusinessClass		= TempRelatedBCBaseID

		ASConfigLastVersionRel
			one-to-one relation to ASStoredConfiguration
			Field Mapping uses symbolic key
				related.ASStoredConfiguration 	= LastConfig
		
		ModLastVersionRel
			one-to-one relation to ASModule
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= CheckModule
			
		BCLastVerionsRel
			one-to-one relation to ASBusinessClass
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= CheckModule
				related.ASBusinessClass			= CheckBC
		
		FieldLastVerstionRel
			one-to-one relation to ASBCField
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= CheckModule
				related.ASBusinessClass			= CheckBC
				related.ASBCField				= CheckField
		
		KeyModuleRel
			one-to-one relation to ASModule
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= KeyModule

		KeyBCRel
			one-to-one relation to ASBusinessClass
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= KeyModule
				related.ASBusinessClass			= KeyBC
		
		KeyFieldRel
			one-to-one relation to ASBCField
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
				related.ASModule				= KeyModule
				related.ASBusinessClass			= KeyBC		
				related.ASBCField				= KeyField	
		
		LogRel
			one-to-many relation to ASConfigurationLog
			delete cascades
			Field Mapping uses symbolic key
				related.ASConfiguration			= ASConfiguration
		
	Actions

		Create is an Action

		CreateCopy is a Create Action
			restricted
		
		CreateFromFile is an Import Action
			default label is "CreateFromFile"

			Local Fields
				JsonFromFile 	is JSONObject
				StringFromFile 	is RichText
				MaxIndex 		is Numeric 5
				StartIndex 		is Numeric 5
				MaxDepIndex 	is Numeric 5
				StartDepIndex 	is Numeric 5
				MaxBCIndex		is Numeric 5
				StartBCIndex	is Numeric 5
				MaxBCElementIndex 	is Numeric 5
				StartBCElementIndex is Numeric 5
				NewASModuleView 	is an ASModule view
				NewASBusinesClass 	is an ASBusinessClass view

			Action Rules
				constraint (ImportConfigurationFile entered)
					"FileIsRequired"
				if (!UseConfigurationNameFromFile)
					constraint (NewConfigurationName entered)
						"NewConfigurationNameRequired"

				StringFromFile = ImportConfigurationFile.File

				JsonFromFile = "" + StringFromFile

				invoke Create this instance
					if (NewConfigurationName entered)
						invoked.ASConfiguration = NewConfigurationName
					else
						invoked.ASConfiguration = JsonFromFile select "$.appSetupConfiguration"
					invoked.VersionNumber	= JsonFromFile select "$.versionNumber"
					invoked.Description = JsonFromFile select "$.description"
					invoked.ProductLine = JsonFromFile select "$.productLine"
					invoked.Inactive    = JsonFromFile select "$.inactive"
					if (TriggeredByUpgrade)
						invoked.Delivered	= JsonFromFile select "$.delivered"
					invoked.DefaultEffectiveDate		= JsonFromFile select "$.defaultEffectiveDate"
					
					if (!ResequenceClassIDs
					and JsonFromFile select "$.delivered" != true
					and JsonFromFile select "$.baseConfiguration" != "")
						invoked.BaseConfiguration 	= JsonFromFile select "$.baseConfiguration"
						invoked.BaseVersionNumber		= JsonFromFile select "$.baseVersionNumber"


				MaxIndex = JsonFromFile select "$.modules.length()"
                StartIndex = 0
                while (StartIndex < MaxIndex)
					invoke Create ASModule
						assign result to NewASModuleView
						invoked.ASConfiguration = ASConfiguration
						if (!ResequenceClassIDs)
							invoked.ASModule 	= JsonFromFile select "$.modules[<StartIndex>].appSetupModuleID"
						invoked.ModuleName 		= JsonFromFile select "$.modules[<StartIndex>].moduleName"
        				invoked.Description 	= JsonFromFile select "$.modules[<StartIndex>].description"
						invoked.Inactive    	= JsonFromFile select "$.modules[<StartIndex>].inactive"
        				invoked.DisplayOrder 	= JsonFromFile select "$.modules[<StartIndex>].displayOrder"
						invoked.BaseModule 		= JsonFromFile select "$.modules[<StartIndex>].appSetupModuleID"

					MaxBCIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses.length()"
					StartBCIndex = 0
					while (StartBCIndex < MaxBCIndex)
						invoke Create ASBusinessClass
							assign result to NewASBusinesClass
							invoked.ASConfiguration = ASConfiguration
							invoked.ASModule 		= NewASModuleView.ASModule
							if (!ResequenceClassIDs)
								invoked.ASBusinessClass 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
							invoked.BusinessClass	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].businessClass"
							invoked.Description 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].description"
							invoked.Inactive    	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].inactive"
							invoked.DisplayOrder 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].displayOrder"
							invoked.CreateAction    = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].createAction"
							invoked.UpdateAction    = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].updateAction"
							invoked.RecordSelection = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].recordSelection"				
							invoked.FieldSelection 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fieldSelection"
							invoked.CreateRetroVersion		= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].createRetroVersion"
							invoked.BaseBusinessClass 		= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
							invoked.DefaultEffectiveDate	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].defaultEffectiveDate"
			
						MaxBCElementIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields.length()"
						StartBCElementIndex = 0
						while (StartBCElementIndex < MaxBCElementIndex)
							invoke Create ASBCField
								invoked.ASConfiguration = ASConfiguration
								invoked.ASModule 		= NewASModuleView.ASModule
								invoked.ASBusinessClass = NewASBusinesClass.ASBusinessClass
								if (!ResequenceClassIDs)
									invoked.ASBCField 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].appSetupFieldID"
								invoked.FieldName		= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].field"
								invoked.Description    	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].description"
								invoked.Inactive    	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].inactive"
								invoked.DisplayOrder 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].displayOrder"
								invoked.ValidActions	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].validActions"
							StartBCElementIndex +=1
						StartBCIndex +=1
					StartIndex +=1
	
				MaxIndex = JsonFromFile select "$.modules.length()"
				StartIndex = 0
				while (StartIndex < MaxIndex)
					TempModuleBaseID	= JsonFromFile  select "$.modules[<StartIndex>].appSetupModuleID"
					if (ModuleRel exists)
						TempASModule = first ModuleRel.ASModule

						MaxDepIndex	= JsonFromFile select "$.modules[<StartIndex>].moduleDeps.length()"
						StartDepIndex = 0
						while (StartDepIndex < MaxDepIndex)
							TempRequiredBaseID	= JsonFromFile select "$.modules[<StartIndex>].moduleDeps[<StartDepIndex>].prerequisiteModuleID"
							if (ModuleRequiredRel exists)
								invoke Create ASDependentModule
									invoked.ASConfiguration 	= ASConfiguration
									invoked.ASModule 			= TempASModule
									invoked.ASDependentModule 	= first ModuleRequiredRel.ASModule
							StartDepIndex +=1

						MaxBCIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses.length()"
						StartBCIndex = 0
						while (StartBCIndex < MaxBCIndex)
							TempBCBaseID = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
							if (BCRel exists)
								TempASBC = BCRel.ASBusinessClass

								MaxBCElementIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].businessClassDeps.length()"
								StartBCElementIndex = 0
								while (StartBCElementIndex < MaxBCElementIndex)
									TempBCRequiredBaseID = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].businessClassDeps[<StartBCElementIndex>].prerequisisteBusinessClassID"
									if (BCRequiredRel exists)
										invoke Create ASDependentBC
											invoked.ASConfiguration 	= ASConfiguration
											invoked.ASModule 			= TempASModule
											invoked.ASBusinessClass 	= TempASBC
											invoked.ASDependentBC 		= first BCRequiredRel.ASBusinessClass
									StartBCElementIndex +=1

								MaxBCElementIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].relatedBusinessClasses.length()"
								StartBCElementIndex = 0
								while (StartBCElementIndex < MaxBCElementIndex)
									TempRelatedBCModBaseID =  JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].relatedBusinessClasses[<StartBCElementIndex>].relatedBusinessClassModuleID"
									TempRelatedBCBaseID = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].relatedBusinessClasses[<StartBCElementIndex>].relatedBusinessClassID"
									if (RelatedBCModByBaseModRel exists)
										TempRelatedModule = first RelatedBCModByBaseModRel.ASModule
										if (BCRelatedRel exists)
											invoke Create ASRelatedBusinessClass
												invoked.ASConfiguration 	= ASConfiguration
												invoked.ASModule 			= TempASModule
												invoked.ASBusinessClass 	= TempASBC
												invoked.ASRelatedBusinessClass.RelatedModule			= first BCRelatedRel.ASModule
												invoked.ASRelatedBusinessClass.RelatedBusinessClass 	= first BCRelatedRel.ASBusinessClass
												invoked.RelatedLink			= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].relatedBusinessClasses[<StartBCElementIndex>].relatedLink"
									StartBCElementIndex +=1								
							StartBCIndex +=1
					StartIndex +=1

			Exit Rules
				for each ModulesByDisplayOrderRel
					invoke CleanTempImportArtifacts each
	
		Copy is an Instance Action
		
			Parameters
				NewConfiguration is like ASConfiguration
					default label is "NewConfigurationName"
				
			Parameter Rules
				NewConfiguration
					required
			Local Fields
				NewASConfigurationView         is an ASConfiguration view
			Action Rules
				invoke CreateCopy ASConfiguration
					assign result to NewASConfigurationView
					invoked.ASConfiguration 	= NewConfiguration
					invoked.VersionNumber		= VersionNumber
					invoked.Description  		= Description 
					invoked.ProductLine  		= ProductLine
					if (Inactive)
                    	invoked.Inactive 		= Inactive
					
					invoked.BaseConfiguration			= ASConfiguration
					invoked.BaseVersionNumber			= VersionNumber
					invoked.DefaultEffectiveDate		= DefaultEffectiveDate

				for each ModulesByDisplayOrderRel
					invoke InternalCopy each
                    	invoked.NewConfiguration	= NewASConfigurationView.ASConfiguration    
                        invoked.NewModuleName		= each.ModuleName
				
				
				invoke RetrieveDependenciesFromBase NewASConfigurationView.ASConfiguration
				invoke RetrieveRelatedBCsFromBase NewASConfigurationView.ASConfiguration


		RetrieveDependenciesFromBase is an Instance Action
			restricted
			Action Rules
				for each ModulesByDisplayOrderRel
					invoke CopyDependenciesFromBaseConfiguration each

		RetrieveRelatedBCsFromBase is an Instance Action
			restricted
			Action Rules
				for each ModulesByDisplayOrderRel
					invoke CopyRelatedBCsFromBaseConfiguration each
		
		ReapplyInactiveSettingsMenu is an Instance Action
			valid when (SuperuserOn)
			default label is "ReapplyInactiveSettings"
			Parameters
				LastConfiguration is a ASStoredConfiguration

			Action Rules
				invoke ReapplyInactiveSettings
					invoked.PrmLastConfig = LastConfiguration


		ReapplyInactiveSettings is an Instance Action
			restricted

			Parameters
				PrmLastConfig is a ASStoredConfiguration
					default label is untranslatable

			Local Fields
				JsonFromFile 	is JSONObject
				StringFromFile 	is RichText
				MaxIndex 		is Numeric 5
				StartIndex 		is Numeric 5
				MaxBCIndex		is Numeric 5
				StartBCIndex	is Numeric 5
				MaxBCElementIndex 	is Numeric 5
				StartBCElementIndex is Numeric 5
				CheckModFlag	is Boolean
				CheckBCFlag		is Boolean
				CheckFieldFlag	is Boolean
				CheckFlag		is Boolean
			
			Action Rules
				LastConfig			= PrmLastConfig
		
				if (ASConfigLastVersionRel exists)
					UpgradeInProgress 	= true
					StringFromFile 		= ASConfigLastVersionRel.ConfigurationFile
					JsonFromFile 		= "" + StringFromFile

					CheckFlag 	= JsonFromFile select "$.inactive"
					if (Inactive != CheckFlag)
						Inactive = CheckFlag							
					
					MaxIndex 			= JsonFromFile select "$.modules.length()"
					StartIndex 			= 0
					while (StartIndex < MaxIndex)
						CheckModule 	= JsonFromFile select "$.modules[<StartIndex>].appSetupModuleID"
						CheckModFlag	= JsonFromFile select "$.modules[<StartIndex>].inactive" 
						if (ModLastVersionRel exists) 
							if (ModLastVersionRel.Inactive != CheckModFlag)
								invoke Update ModLastVersionRel
									invoked.Inactive = CheckModFlag

						MaxBCIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses.length()"
						StartBCIndex = 0
						while (StartBCIndex < MaxBCIndex)
							CheckBC 		= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
							CheckBCFlag 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].inactive"

							if (BCLastVerionsRel exists)
								if (BCLastVerionsRel.Inactive != CheckBCFlag)
									invoke Update BCLastVerionsRel
										invoked.Inactive = CheckBCFlag

							MaxBCElementIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields.length()"
							StartBCElementIndex = 0
							while (StartBCElementIndex < MaxBCElementIndex)
								CheckField		= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].appSetupFieldID"
								CheckFieldFlag	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].inactive" 

								if (FieldLastVerstionRel exists)
									if (FieldLastVerstionRel.Inactive != CheckFieldFlag)
										invoke Update FieldLastVerstionRel
											invoked.Inactive = CheckFieldFlag

								StartBCElementIndex +=1
							StartBCIndex +=1
						StartIndex +=1
					UpgradeInProgress 	= false


		ReapplyDefaultEffectiveDatesMenu is an Instance Action
			valid when (SuperuserOn)
			default label is "ReapplyDefaultEffectiveDates"
			Parameters
				LastConfiguration is a ASStoredConfiguration

			Action Rules
				invoke ReapplyDefaultEffectiveDates
					invoked.PrmLastConfig = LastConfiguration
		
		ReapplyDefaultEffectiveDates is an Instance Action
			restricted

			Parameters
				PrmLastConfig is a ASStoredConfiguration

			Local Fields
				JsonFromFile 	is JSONObject
				StringFromFile 	is RichText
				MaxIndex 		is Numeric 5
				StartIndex 		is Numeric 5
				MaxBCIndex		is Numeric 5
				StartBCIndex	is Numeric 5
				CheckEffectiveDate 		is Date
				CheckBCEffectiveDate 	is Date
			
			Action Rules
				LastConfig			= PrmLastConfig
		
				if (ASConfigLastVersionRel exists)
					UpgradeInProgress 	= true
					StringFromFile 		= ASConfigLastVersionRel.ConfigurationFile
					JsonFromFile 		= "" + StringFromFile

					CheckEffectiveDate 	= JsonFromFile select "$.defaultEffectiveDate"
					if (DefaultEffectiveDate != CheckEffectiveDate)
						DefaultEffectiveDate = CheckEffectiveDate				
					
					MaxIndex 			= JsonFromFile select "$.modules.length()"
					StartIndex 			= 0
					while (StartIndex < MaxIndex)
						MaxBCIndex = JsonFromFile select "$.modules[<StartIndex>].businessClasses.length()"
						StartBCIndex = 0
						while (StartBCIndex < MaxBCIndex)
							CheckBC 				= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
							CheckBCEffectiveDate 	= JsonFromFile select "$.modules[<StartIndex>].businessClasses[<StartBCIndex>].defaultEffectiveDate"

							if (BCLastVerionsRel exists)
								if (BCLastVerionsRel.DefaultEffectiveDate != CheckBCEffectiveDate)
									invoke Update BCLastVerionsRel
										invoked.DefaultEffectiveDate = CheckBCEffectiveDate

							StartBCIndex +=1
						StartIndex +=1
					UpgradeInProgress 	= false
		
		Update is an Action

		Delete is an Action

			Entrance Rules
				if (Delivered)
					UpgradeInProgress = true

				for each ModulesByDisplayOrderRel
					invoke CleanDependencies each

		Purge is a Purge Action
			restricted
		
		PurgeConfiguration is an Instance Action
			valid when (SuperuserOn)

			Entrance Rules
				if (Delivered)
					UpgradeInProgress = true

				for each ModulesByDisplayOrderRel
					invoke PurgeModule each

			Action Rules
				invoke Purge			

	
		CreateUpgradeBackup is an Instance Action
			restricted

			Local Fields
				BackupName  is like ASStoredConfiguration

			Action Rules
				BackupName = 	ASConfiguration + "_Version_" + VersionNumber + "_" + current timestamp

				invoke Create ASStoredConfiguration
					assign result to UpgradeBackup
					invoked.ASStoredConfiguration	= BackupName
					invoked.ASConfigurationName		= ASConfiguration
					invoked.VersionNumber			= VersionNumber
					invoked.ConfigurationFile 		= ToJSONText
					invoked.ConfigurationFileName 	= BackupName
					invoked.Description				= BackupDescriptionMessage
					invoked.MimeType				= "application/json"
					invoked.StoredConfigType		= 0 
					if (BaseConfiguration entered)
						invoked.BaseConfiguration	= BaseConfiguration
						invoked.BaseVersionNumber	= BaseVersionNumber

		CreateDifferenceSummary is an Instance Action
			valid when BaseConfiguration entered
			Parameters
				ChangeSetName 			is like ASStoredConfiguration
				ChangeSetDescription 	is Alpha size 50
			
			Parameter Rules
				ChangeSetName
					required
					initial value is ASConfiguration + "_Compared_to_" + BaseConfiguration + "_" + current timestamp

				ChangeSetDescription
					default to ChangeSetName


			Action Rules
				invoke Create ASStoredConfiguration
					invoked.ASStoredConfiguration	= ChangeSetName
					invoked.ASConfigurationName		= ASConfiguration
					invoked.VersionNumber			= VersionNumber
					invoked.ConfigurationFile 		= CompareToBase
					invoked.ConfigurationFileName 	= ChangeSetName
					invoked.Description				= ChangeSetDescription
					invoked.MimeType				= "application/json"
					invoked.StoredConfigType		= 3 
					if (BaseConfiguration entered)
						invoked.BaseConfiguration	= BaseConfiguration
						invoked.BaseVersionNumber	= BaseVersionNumber
		
		CreateBackup is an Instance Action

			Parameters
				BackupName  			is like ASStoredConfiguration
				BackupDescription 		is Alpha size 50
			
			Parameter Rules
				BackupName
					required
					initial value is ASConfiguration + "_Version_" + VersionNumber + "_" + current timestamp
					default to ASConfiguration + "_Version_" + VersionNumber + "_" + current timestamp
				
				BackupDescription
					default to BackupName

			Action Rules

				invoke Create ASStoredConfiguration
					invoked.ASStoredConfiguration	= BackupName
					invoked.ASConfigurationName		= ASConfiguration
					invoked.VersionNumber			= VersionNumber
					invoked.ConfigurationFile 		= ToJSONText 
					invoked.ConfigurationFileName 	= BackupName
					invoked.Description				= BackupDescription
					invoked.MimeType				= "application/json"
					invoked.StoredConfigType		= 2 
					if (BaseConfiguration entered)
						invoked.BaseConfiguration	= BaseConfiguration
						invoked.BaseVersionNumber	= BaseVersionNumber

		CreateCSPListingMenu is an Instance Action			
			valid when (SuperuserOn)
			default label is "CreateC\\S\\P_Listing"
			Parameters
				FileName  				is like ASStoredConfiguration
				FileDescription			is Alpha size 50
			
			Parameter Rules
				FileName
					required
					initial value is ASConfiguration + "CSP_Listing_Version_" + VersionNumber + "_" + current timestamp
				
				FileDescription
					default to FileName

			Action Rules
				invoke CreateCSPListing 
					invoked.FileName = FileName
					invoked.FileDescription	= FileDescription	
		

		CreateCSPListing is an Action
			restricted

			Parameters
				FileName  				is like ASStoredConfiguration
				FileDescription			is Alpha size 50
			
			Parameter Rules
				FileName
					required
					initial value is ASConfiguration + "CSP_Listing_Version_" + VersionNumber + "_" + current timestamp
				
				FileDescription
					default to FileName

			Action Rules

				invoke Create ASStoredConfiguration
					invoked.ASStoredConfiguration	= FileName
					invoked.ASConfigurationName		= ASConfiguration
					invoked.VersionNumber			= VersionNumber
					invoked.ConfigurationFile 		= AppSetupList
					invoked.ConfigurationFileName 	= FileName
					invoked.Description				= FileDescription
					invoked.MimeType				= "application/json"
					invoked.StoredConfigType		= 4 
					if (BaseConfiguration entered)
						invoked.BaseConfiguration	= BaseConfiguration
						invoked.BaseVersionNumber	= BaseVersionNumber
		
		CheckForBaseUpgrades is a Set Action
			restricted
			Parameters
				PrmASConfigurationName is like ASConfiguration
					default label is untranslatable

			Instance Selection
				where (BaseConfiguration = PrmASConfigurationName)			
			Action Rules
				Instance Rules
					invoke UpgradeToMatchBase

		UpgradeToMatchBase is an Instance Action
			valid when BaseConfiguration entered

		
			Local Fields
				JsonChangeSet				is JSONObject
				RawChanges					is RichText
				MaxInsturctionIndex 		is Numeric 5
				StartInsturctionIndex 		is Numeric 5
				MaxIndex 					is Numeric 5
				StartIndex 					is Numeric 5
				MaxDepIndex 				is Numeric 5
				StartDepIndex 				is Numeric 5
				MaxBCIndex					is Numeric 5
				StartBCIndex				is Numeric 5
				MaxBCElementIndex 			is Numeric 5
				StartBCElementIndex 		is Numeric 5
				Target						is Alpha 10
				Operation					is Alpha 10
				ChangedField 				is Alpha 50
				IncompatibleChangesExist	is Boolean
				ChangesExist				is Boolean
				NewASModuleView 			is an ASModule view
				NewASBusinesClass 			is an ASBusinessClass view
				ChangeSetName				is like ASStoredConfiguration
				PrecedingID					is Numeric 5
				FollowingModID				is Numeric 5
				PrecedingField				is Alpha 50
				FollowingField				is Alpha 50
				LocalNumber					is Numeric 3
			
			Action Rules
				RawChanges 		= CompareToBase

				if (RawChanges contains "upgradeInstructions")
					JsonChangeSet = RawChanges
					initialize RawChanges
				
				if (JsonChangeSet != "")
					UpgradeInProgress = true
					invoke CreateUpgradeBackup

					MaxInsturctionIndex  			= JsonChangeSet select "$.upgradeInstructions.length()"
					StartInsturctionIndex 			= 0

					if (StartInsturctionIndex < MaxInsturctionIndex)
						ChangesExist = true

					while (StartInsturctionIndex < MaxInsturctionIndex)
						Target 				= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].target"
						Operation 			= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].operation"

						if (Operation = "ADD" 
						or  Operation = "UPDATE")
							if (Target = "CONFIG")
								if (Operation = "UPDATE")
									ChangedField		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].changedKey"
									if (ChangedField = "Description")
										Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"

								if (Operation = "ADD")
									MaxIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods.length()"
									StartIndex = 0
									while (StartIndex < MaxIndex)
										CheckModule = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].appSetupModuleID"
										invoke Create ASModule
											assign result to NewASModuleView
											invoked.ASConfiguration = ASConfiguration
											if (ModLastVersionRel not exists)
												invoked.ASModule 	= CheckModule
											invoked.ModuleName 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].moduleName"
											invoked.Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].description"
											invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].inactive"
											invoked.BaseModule 		= CheckModule
											PrecedingID    			= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].precedingModID"
											FollowingModID			= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].followingModID"
											
											if (PrecedingID != 0)
												TempModuleBaseID = PrecedingID
												if (ModuleRel exists)
													invoked.NewDisplayOrder = ModuleRel.DisplayOrder + 1
											else
												if (FollowingModID != 0)
													TempModuleBaseID = FollowingModID
													if (ModuleRel exists)
														LocalNumber = ModuleRel.DisplayOrder
														if (LocalNumber > 1)
															invoked.NewDisplayOrder = ModuleRel.DisplayOrder - 1
														else
															invoked.NewDisplayOrder = 1

										MaxBCIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses.length()"
										StartBCIndex = 0
										while (StartBCIndex < MaxBCIndex)
											invoke Create ASBusinessClass
												assign result to NewASBusinesClass
												invoked.ASConfiguration = ASConfiguration
												invoked.ASModule 		= NewASModuleView.ASModule
												invoked.ASBusinessClass = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
												invoked.BusinessClass	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].businessClass"
												invoked.Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].description"
												invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].inactive"
												invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].inactive"
												invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].displayOrder"
												invoked.CreateAction    = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].createAction"
												invoked.UpdateAction    = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].updateAction"
												invoked.RecordSelection = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].recordSelection"				
												invoked.FieldSelection 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fieldSelection"
												invoked.BaseBusinessClass 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
												invoked.CreateRetroVersion    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].createRetroVersion"
												invoked.DefaultEffectiveDate    = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].defaultEffectiveDate"

											MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields.length()"
											StartBCElementIndex = 0
											while (StartBCElementIndex < MaxBCElementIndex)
												invoke Create ASBCField
													invoked.ASConfiguration = ASConfiguration
													invoked.ASModule 		= NewASModuleView.ASModule
													invoked.ASBusinessClass = NewASBusinesClass.ASBusinessClass
													invoked.ASBCField 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].appSetupFieldID"
													invoked.FieldName		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].field"
													invoked.Description    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].description"
													invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].inactive"
													invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].displayOrder"
													invoked.ValidActions	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeModss[<StartIndex>].businessClasses[<StartBCIndex>].fields[<StartBCElementIndex>].validActions"
												StartBCElementIndex +=1
											StartBCIndex +=1
										StartIndex +=1


									MaxIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods.length()"
									StartIndex = 0
									while (StartIndex < MaxIndex)
										TempModuleBaseID	= JsonChangeSet  select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].appSetupModuleID"
										if (ModuleRel exists)
											TempASModule = first ModuleRel.ASModule
											MaxDepIndex	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].moduleDeps.length()"
											StartDepIndex = 0
											while (StartDepIndex < MaxDepIndex)
												TempRequiredBaseID	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].moduleDeps[<StartDepIndex>].prerequisiteModuleID"
												if (ModuleRequiredRel exists)
													invoke Create ASDependentModule
														invoked.ASConfiguration 	= ASConfiguration
														invoked.ASModule 			= TempASModule
														invoked.ASDependentModule 	= first ModuleRequiredRel.ASModule
												StartDepIndex +=1

											MaxBCIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses.length()"
											StartBCIndex = 0
											while (StartBCIndex < MaxBCIndex)
												TempBCBaseID = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].appSetupBusinessClassID"
												if (BCRel exists)
													TempASBC = BCRel.ASBusinessClass

													MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].businessClassDeps.length()"
													StartBCElementIndex = 0
													while (StartBCElementIndex < MaxBCElementIndex)
														TempBCRequiredBaseID = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeMods[<StartIndex>].businessClasses[<StartBCIndex>].businessClassDeps[<StartBCElementIndex>].prerequisisteBusinessClassID"
														if (BCRequiredRel exists)
															invoke Create ASDependentBC
																invoked.ASConfiguration 	= ASConfiguration
																invoked.ASModule 			= TempASModule
																invoked.ASBusinessClass 	= TempASBC
																invoked.ASDependentBC 		= first BCRequiredRel.ASBusinessClass
														StartBCElementIndex +=1
												StartBCIndex +=1
										StartIndex +=1

							if (Target = "MOD")
								KeyModule	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyModule"
								if (Operation = "UPDATE")
									if (KeyModuleRel exists)
										ChangedField 					= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].changedKey"
										if (ChangedField = "ModuleName")
											invoke Update KeyModuleRel 
												invoked.ModuleName 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "Description")
											invoke Update KeyModuleRel 
												invoked.Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "DisplayOrder")
											invoke Update KeyModuleRel 
												invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
								if (Operation = "ADD")
									MaxBCIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs.length()"
									StartBCIndex = 0
									while (StartBCIndex < MaxBCIndex)
										CheckModule = KeyModule
										CheckBC 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].appSetupBusinessClassID"
										invoke Create ASBusinessClass
											assign result to NewASBusinesClass
											invoked.ASConfiguration 	= ASConfiguration
											invoked.ASModule 			= KeyModule
											if (BCLastVerionsRel not exists)
												invoked.ASBusinessClass = CheckBC
											invoked.BusinessClass		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].businessClass"
											invoked.Description 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].description"
											invoked.Inactive    		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].inactive"
											invoked.DisplayOrder 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].displayOrder"
											invoked.CreateAction    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].createAction"
											invoked.UpdateAction   		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].updateAction"
											invoked.RecordSelection 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].recordSelection"				
											invoked.FieldSelection 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fieldSelection"
											invoked.BaseBusinessClass 	= CheckBC
											invoked.CreateRetroVersion	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].createRetroVersion"
											invoked.DefaultEffectiveDate	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].defaultEffectiveDate"
											PrecedingID    				= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].precedingModID"
											FollowingModID				= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].followingModID"
											
											TempASModule = KeyModule
											if (PrecedingID != 0)
												TempBCBaseID = PrecedingID
												if (BCRel exists)
													invoked.NewDisplayOrder = BCRel.DisplayOrder + 1
											else
												if (FollowingModID != 0)
													TempBCBaseID = FollowingModID
													if (BCRel exists)
														LocalNumber = BCRel.DisplayOrder
														if (LocalNumber > 1)
															invoked.NewDisplayOrder = BCRel.DisplayOrder - 1
														else
															invoked.NewDisplayOrder = 1
							
										MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields.length()"
										StartBCElementIndex = 0
										while (StartBCElementIndex < MaxBCElementIndex)
											invoke Create ASBCField
												invoked.ASConfiguration = ASConfiguration
												invoked.ASModule 		= KeyModule
												invoked.ASBusinessClass = NewASBusinesClass.ASBusinessClass
												invoked.ASBCField 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].appSetupFieldID"
												invoked.FieldName		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].field"
												invoked.Description    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].description"
												invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].inactive"
												invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].displayOrder"
												invoked.ValidActions	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].fields[<StartBCElementIndex>].validActions"
											StartBCElementIndex +=1
										StartBCIndex +=1


										TempASModule		= KeyModule
										MaxBCIndex 			= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs.length()"
										StartBCIndex 		= 0
										while (StartBCIndex < MaxBCIndex)
											TempBCBaseID = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].appSetupBusinessClassID"
											if (BCRel exists)
												TempASBC = BCRel.ASBusinessClass

												MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].businessClassDeps.length()"
												StartBCElementIndex = 0
												while (StartBCElementIndex < MaxBCElementIndex)
													TempBCRequiredBaseID = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeBCs[<StartBCIndex>].businessClassDeps[<StartBCElementIndex>].prerequisisteBusinessClassID"
													if (BCRequiredRel exists)
														invoke Create ASDependentBC
															invoked.ASConfiguration 	= ASConfiguration
															invoked.ASModule 			= KeyModule
															invoked.ASBusinessClass 	= TempASBC
															invoked.ASDependentBC 		= first BCRequiredRel.ASBusinessClass
													StartBCElementIndex +=1
											StartBCIndex +=1


									MaxDepIndex	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeModDeps.length()"
									StartDepIndex = 0
									while (StartDepIndex < MaxDepIndex)
										TempRequiredBaseID	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeModDeps[<StartDepIndex>].prerequisiteModuleID"
										if (ModuleRequiredRel exists)
											invoke Create ASDependentModule
												invoked.ASConfiguration 	= ASConfiguration
												invoked.ASModule 			= KeyModule
												invoked.ASDependentModule 	= first ModuleRequiredRel.ASModule
										StartDepIndex +=1

							if (Target = "BC")
								KeyBC 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyBC"
								KeyModule	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyModule"
								if (Operation = "UPDATE")
									if (KeyBCRel exists)
										ChangedField 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].changedKey"
										if (ChangedField = "BusinessClass")
											invoke Update KeyBCRel 
												invoked.BusinessClass = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "Description")
											invoke Update KeyBCRel 
												invoked.Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "CreateAction")
											invoke Update KeyBCRel 
												invoked.CreateAction 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "UpdateAction")
											invoke Update KeyBCRel 
												invoked.UpdateAction 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "RecordSelection")
											invoke Update KeyBCRel
												invoked.UpdateAction 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "DisplayOrder")
											invoke Update KeyBCRel
												invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "CreateRetroVersion")
											invoke Update KeyBCRel
												invoked.CreateRetroVersion 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										
								if (Operation = "ADD")			
									MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields.length()"
									StartBCElementIndex = 0
									while (StartBCElementIndex < MaxBCElementIndex)
										CheckModule = KeyModule
										CheckField 	= KeyBC
										CheckField 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].appSetupFieldID"
										invoke Create ASBCField
											invoked.ASConfiguration = ASConfiguration
											invoked.ASModule 		= KeyModule
											invoked.ASBusinessClass = KeyBC
											if (FieldLastVerstionRel not exists)
												invoked.ASBCField 	= CheckField
											invoked.FieldName		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].field"
											invoked.Description    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].description"
											invoked.Inactive    	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].inactive"
											invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].displayOrder"
											invoked.ValidActions	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].validActions"
											PrecedingField    		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].precedingModID"
											FollowingField			= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].wholeFields[<StartBCElementIndex>].followingModID"
											
											TempASModule 	= KeyModule
											TempASBC 		= KeyBC
											if (PrecedingField != "")
												TempFieldName = PrecedingField
												if (FieldRel exists)
													invoked.NewDisplayOrder = FieldRel.DisplayOrder + 1
											else
												if (FollowingField != "")
													TempFieldName = FollowingField
													if (FieldRel exists)
														LocalNumber = FieldRel.DisplayOrder
														if (LocalNumber > 1)
															invoked.NewDisplayOrder = FieldRel.DisplayOrder - 1
														else
															invoked.NewDisplayOrder = 1

										StartBCElementIndex +=1




									TempASModule = KeyModule
									MaxBCElementIndex = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].WholeBCDeps.length()"
									StartBCElementIndex = 0
									while (StartBCElementIndex < MaxBCElementIndex)
										TempBCRequiredBaseID = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].WholeBCDeps[<StartBCElementIndex>].prerequisisteBusinessClassID"
										if (BCRequiredRel exists)
											invoke Create ASDependentBC
												invoked.ASConfiguration 	= ASConfiguration
												invoked.ASModule 			= KeyModule
												invoked.ASBusinessClass 	= KeyBC
												invoked.ASDependentBC 		= first BCRequiredRel.ASBusinessClass
										StartBCElementIndex +=1

							if (Target = "FIELD")
								if (Operation = "UPDATE")
									KeyBC 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyBC"
									KeyModule	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyModule"
									KeyField	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].keyField"
									if (KeyFieldRel exists)
										ChangedField = JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].changedKey"
										if (ChangedField = "Description")
											invoke Update KeyFieldRel
												invoked.Description 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"	
										if (ChangedField = "FieldName")
											invoke Update KeyFieldRel
												invoked.FieldName 		= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "DisplayOrder")
											invoke Update KeyFieldRel
												invoked.DisplayOrder 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"
										if (ChangedField = "ValidActions")
											invoke Update KeyFieldRel
												invoked.ValidActions 	= JsonChangeSet select "$.upgradeInstructions[<StartInsturctionIndex>].newValue"   					
						else
							if (Operation != "INCOMPATIBLE")
								IncompatibleChangesExist = true

						StartInsturctionIndex +=1

					if (ChangesExist)

						if (!IncompatibleChangesExist)
							ChangeSetName  = 	ASConfiguration + "_Upgrade_Changes_" + BaseConfiguration + "_Version_" + BaseVersionNumber + "_to_" + BaseConfigurationRel.VersionNumber + "_" + current timestamp
						else
							ChangeSetName  = 	"Incomplete_" + ASConfiguration + "_Upgrade_Changes_" + BaseConfiguration + "_Version_" + BaseVersionNumber + "_to_" + BaseConfigurationRel.VersionNumber + "_" + current timestamp

						invoke Create ASStoredConfiguration
							invoked.ASStoredConfiguration	= ChangeSetName
							invoked.ASConfigurationName		= ASConfiguration
							invoked.VersionNumber					= VersionNumber
							invoked.ConfigurationFile 		= JsonChangeSet 
							invoked.ConfigurationFileName 	= ChangeSetName
							if (!IncompatibleChangesExist)
								invoked.Description			= SummaryChangesDescriptionMessage
							else
								invoked.Description			= SummaryChangesDescriptionMessage_Imcomplete
							invoked.MimeType				= "application/json"
							invoked.StoredConfigType		= 3 
							if (BaseConfiguration entered)
								invoked.BaseConfiguration	= BaseConfiguration
								invoked.BaseVersionNumber	= BaseVersionNumber

						BaseVersionNumber = BaseConfigurationRel.VersionNumber
					else
						ChangeSetName  						= 	ASConfiguration + "_Upgrade_Attmept_" + BaseConfiguration + "_Version_" + BaseVersionNumber + "_to_" + BaseConfigurationRel.VersionNumber + "_" + current timestamp
						invoke Create ASStoredConfiguration
							invoked.ASStoredConfiguration	= ChangeSetName
							invoked.ASConfigurationName		= ASConfiguration
							invoked.VersionNumber			= VersionNumber
							invoked.ConfigurationFile 		= RawChanges 
							invoked.ConfigurationFileName 	= ChangeSetName
							invoked.Description				= SummaryChangesDescriptionMessage_Imcomplete
							invoked.MimeType				= "application/json"
							invoked.StoredConfigType		= 3 
							if (BaseConfiguration entered)
								invoked.BaseConfiguration	= BaseConfiguration
								invoked.BaseVersionNumber	= BaseVersionNumber
						if (!(RawChanges contains "Exception"))
							BaseVersionNumber = BaseConfigurationRel.VersionNumber


		GenerateExport is an Instance Action
			valid when (SuperuserOn)

			Parameters
				ShowForm is Boolean
			
			Parameter Rules
				ShowForm
					initial value is true
			Action Rules
				constraint (true)
					untranslatable:"HereIsAMessage"

		BreakFromBase is an Instance Action
			valid when BaseConfiguration entered

			Action Rules
				confirmation required
					"ThisActionWillBreakThisConfiguration'sConnectionToTheOneFromWhichItWasCopied.Continue?"
				UpgradeInProgress = true
				initialize BaseConfiguration
				initialize BaseVersionNumber

				for each ModulesByDisplayOrderRel
					invoke BreakFromBase each
				
				UpgradeInProgress = false
		
		BreakFromBaseAfterCopy is an Instance Action
			restricted

			Action Rules
				UpgradeInProgress = true
				if (BaseConfiguration entered)
					initialize BaseConfiguration
					initialize BaseVersionNumber

				for each ModulesByDisplayOrderRel
					invoke BreakFromBase each
				
				UpgradeInProgress = false
	

		CopyRelatedBCsFromBaseConfiguration is an Instance Action
			restricted
			
			Action Rules
				for each ModulesByDisplayOrderRel
					invoke CopyRelatedBCsFromBaseConfiguration each

		
		RemoveAsPrimary is an Instance Action
			restricted

			Action Rules
				IsPrimary = false
		
		MakePrimary is an Instance Action
			valid when (!IsPrimary)
			default label is "MakePrimaryForTagging"

			Action Rules
				include DoMakePrimary
		
		MarkPrimaryInternal is an Instance Action
			restricted

			Action Rules
				include DoMakePrimary

