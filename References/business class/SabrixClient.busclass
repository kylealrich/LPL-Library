SabrixClient is a BusinessClass
    owned by sabrix
    prefix is SCT
	default label is "OneSource"
	
	Ontology
		symbolic key is SabrixClient

	Patterns
        implements CRUD
        disable Auditing
        disable EffectiveDated

	Persistent Fields
		FinanceEnterpriseGrp 	is a FinanceEnterpriseGroup

		LegalEntity				is a TaxEntity
		InvoiceCompany			is Alpha 4
		DisplayMonitor   		is RichText
		TaxAmount				is an InternationalAmount
		TaxRate					is Percent 7.5	  
		ReturnedTaxCode			is like TaxCode						 
		TaxableAmount			is an InternationalAmount								 
		SabrixReturnMessage		is Text		
      	CallingSystemNumber		is a CallingSystem	
		FilterGroupName			
		FilterGroupOwner		
		HostSystem				
		IsAudited				is Boolean	
		MappingGroupName		is a ProductMappingGroupName   
		MappingGroupOwner		is a ProductMappingGroupOwner	
		CompanyRole				//is Alpha 1	//COMPANYROLE				= "B", 	//"S", B=Buyer, S=Sales



		TransactionType			is Alpha 2
           	States
                Goods  		value is "GS"
                Services 	value is "SV"		
		VendorCustomer			is Alpha 20	 
		VendorCustomerName		is Alpha 20	 
		ExternalCompany			is a ExternalCompanyId 
		ExternalCompanyName		is a Description	
		CurrencyCode			is a Currency	 
		InvoiceDate				is Date	
		InvoiceNumber			is Alpha 20
		LineNumber		
		InvoiceAmount			is an InternationalAmount	
		ShipFromAddress			is a PostalAddressV2	
			holds pii
		ShipToAddress			is a PostalAddressV2	
			holds pii
		UserElementGroup	
	    Quantity				is Decimal size 13.4			
		QuantityAmount			is an InternationalAmount	 
	    UnitCost				is like UnitCost
	    UnitOfMeasure   		is AlphaUpper 4	 
		WebServiceError 		is Boolean
		WebServiceErrorMessage 	is Text
		ReturnedErrorNumber		is Numeric 3 
		ReturnedErrorMessage    is Text
		WebServiceErrorHardStop is Boolean		
		UseAddressCityCountyState	is Boolean		
		TaxCodeEntered			is a TaxCode
		LineId					is Alpha 30
		TaxingJurisdiction		

		OriginalInvoiceNumber	is like Invoice 
		IsCredit 				is Boolean
		IsReversed 				is Boolean
		Description
		UniqueLineNumber 		is a LineNumber
		CommodityCode 			is a ICNCode
		DeliveryTerms			is like ShipTerm  
		POItemGroup				is an ItemGroup
		PartNumber				is like Item
		UOM						is like UnitOfMeasure
		ReturnOneSourceTaxIn	is Alpha 1				 			 
			States
				Default				value is blank	 
				Summary				value is "S"	 			 
				Detail				value is "D"	
					default label is "Detail"
		UserElementLevel		is Alpha 1
			States
				Invoice			value is blank
				Line			value is "L"	
		StoreErrors				is Boolean
		SabrixErrorSeverity		is Alpha 1	//is Alpha 20 //SEVERITY:<each(MESSAGE).SEVERITY>"	
			States
				Informational	value is "0"
				Warning			value is "1"
				Severe			value is "2"

		CapturedXml			    is Text			
		DisplayWebserviceErrorXml	is Boolean	
		EAMCommodityCode						



		NoHaltOnErrorOfTaxLineItem is Boolean	
		SendMultLineItems		   is Boolean	
		UpdateLineItems			   is Boolean
		UseNewResponseCode		   is Boolean
		TaxAttributeCode		   is a TaxAttribute	

		DocumentType				is Alpha 50			
		OneSourceVersionType	    is Alpha 1			
			States										
				Original			value is blank		
				Generic				value is "G"		
		Product					   is a ProductTaxCategory		    
		PostDate				   is Date
		IsSuccess				   is Boolean		

	Relations
  		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration = FinanceEnterpriseGrp

     	TaxConfigurationVersionRel

        	one-to-many relation to TaxConfigVersion
        	Field Mapping uses symbolic key
				related.TaxConfiguration					= TaxConfigurationRel.TaxConfiguration
			Instance Selection
				where (related.TaxConfigVersion.ThirdParty 	= "S"
				and    related.TaxConfigVersion.Version 	= TaxConfigurationRel.SabrixVersion.Version
				and    related.TaxConfigVersion.Release 	= TaxConfigurationRel.SabrixVersion.Release)
				
        1SourceDummyTaxCodeRel							
            one-to-one relation to TaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= FinanceEnterpriseGrp
				related.TaxCode 						= "1S"
				
		TaxLineItemsRel 
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxLineItem.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)

 		FirstTaxLineItemRel  
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxLineItem.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
				and    related.TaxLineItem.Sequence					= FirstLineItemNumberSeq)
				









		Update1SourceTaxLineItemRel  
			one-to-one relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject	 
				related.FinanceEnterpriseGroup 				= FinanceEnterpriseGrp	 
 				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID	 
 				related.LineItemNumber						= EachLineId  			


								
		OneSourceUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID)

		OutputUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID 				
 				and    related.OneSourceUserAttribute.Type 						= "O")		

		ThisOutputUserAttributeRel 	
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID

				and    related.OneSourceUserAttribute.LineNumber 				= LocalLineNumberKey							 
				and    related.OneSourceUserAttribute.Type						= "O"
				and    related.UserAttributeName								= LocalAttributeNameKey)	
				
		InputUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID 				
 				and    related.OneSourceUserAttribute.Type 						= blank)	
 				 				 				
		CheckByAttributeNameNoDupsRel 	 					 
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID
				and    related.OneSourceUserAttribute.InvoiceNumber				= LocalInvoiceNumberKey 				
				and    related.OneSourceUserAttribute.LineNumber 				= LocalLineNumberKey							 
				and    related.OneSourceUserAttribute.Type						= "O"
				and    related.UserAttributeName								= LocalAttributeNameKey)	
					
    	CopySabrixClientRel
			one-to-many relation to SabrixClient
			Field Mapping uses ByFinanceEnterpriseGroup	
				related.FinanceEnterpriseGrp					= FinanceEnterpriseGrp
			Instance Selection	
				where (related.SabrixClient 					= LocalCopyFromBusclass)	// I think I could have just used "this instance"

        OneSourceConfigParamRel	  
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "SABRIX.WSI.WSDL" 
				
        OAuthRel	 	 
            one-to-one relation to OAuth
            Field Mapping uses symbolic key
                related.OAuth			= "Sabrix"			
 
 		TaxAttributesRel								
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
 				related.TaxAttribute	        = TaxAttributeCode

		OneSourceUserTemplatesRel   	
			one-to-many relation to UserTemplate
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.BusinessClass 					= "CalculateTaxInterface"				 
				and    related.UserTemplate						= "OneSourceUserToken"		
				or     related.UserTemplate						= "OneSourceIndata"
				or     related.UserTemplate						= "OneSourceEstimateTaxLogin"	
				or     related.UserTemplate						= "OneSourceCreateHistoryLogin"	
				or     related.UserTemplate						= "SOAP")					
	
        WebservDebugConfigParmRel	  							
            one-to-one relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID	= "webservs"
                related.ConfigurationParameter.Name				= "ws.log.level" 
				  
		ReturnedErpTaxCodeRel									
			one-to-one relation to TaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGrp	 
				related.TaxCode							= LocalLineTaxCode

		NewSabrixClientRel										
			one-to-many relation to SabrixClient
			Field Mapping uses symbolic key	 	 
				related.SabrixClient 					= LocalNewSabrixClientKey						
			Instance Selection	
				where (related.FinanceEnterpriseGrp		= FinanceEnterpriseGrp)		 
							  				 				
	Sets				
		ByFinanceEnterpriseGroup
			duplicates
			Sort Order
				FinanceEnterpriseGrp
				SabrixClient
																				
	Transient Fields	
		CalculateTax	 
		ClearResults			is Boolean
		BypassEditing			is Boolean
		OutputErrorNumber  		is Numeric 3
		OutputErrorMessage 		is Text
		BypassNonUS				is Boolean
		TransientLineId         is Numeric 6
			derive value from LineNumber
		TransientCommodityCode  is a ICNCode

		UseTaxAmountAsInput		is Boolean
		DisplayStoreErrorMsg    is Boolean

		DontUseLineItems		is Boolean	
		TaxLineItemsCount		is Numeric 3
			derive value from instance count of TaxLineItemsRel	
		TestTaxingJurisdiction  is Boolean	
		ReturnedUserElement 	is a UserElementGroup	
		TaxableCity				is Alpha 60				
		TaxableState			is Alpha 60
		TaxableCounty			is Alpha 60






		ReturnedTaxTable		is a TaxTableField	





		TransientCapturedXml	is Text 		

		TaxTable				is a TaxTableField	
		AttributeMissingProcess is Alpha 1			
			States
				SkipAttribute		value is blank	
				MissingMessage    	value is "M"	
				Halt				value is "H"	
			derive value from TaxConfigurationRel.AttributeMissingProcess	
		AttributeMissingMessage 	is Alpha 30		
			derive value from TaxConfigurationRel.AttributeMissingMessage
		EndUser						is an Actor		
			derive value from actor	
		ResourcePwdText		is Alpha 20
			derive value from "********************"	
			default label is "Password"				
		ShowPassword is Boolean
			derive value from true
							       								
    Local Fields
		RequestXML				is XMLDocument	 
		ResponseXML				is XMLDocument	 	    
    	MyXMLDocument			is XMLDocument
    	LocalCopyFromBusclass	is a SabrixClient		
        MyResponse 				is a OneSourceTaxCalculationResponse
        MyRequest 				is a OneSourceTaxCalculation
		Idx						is Numeric 2
		Idx2					is Numeric 2 

		LocalRichText   		is RichText
		ColumnHeaderDesc		is Alpha 10
		TotalTaxAmount			is an InternationalAmount

		TotalTaxRate			is Percent 6.3	
		SummaryTaxRate			is Percent 6.3	
		EffectiveTaxRate		is Percent 6.3       


		Company					is Alpha 40 
		Vendor					is Alpha 20
		SuccessStatus 			is Boolean


		ResumeOnError			is Boolean		
		InvoiceUniqueID			is Alpha 60 


		SabrixErrorLocation		is Text
		SabrixErrorCategory		is Alpha 20	
		SabrixErrorCode			is Alpha 30	//CODE:<each(MESSAGE).CODE>"
		SabrixErrorMessage		is Text		//MESSAGETEXT:<each(MESSAGE).MESSAGETEXT>"
		LocalErrorSeverity		is Alpha 1
			States
				Informational	value is "0"
				Warning			value is "1"
				Severe			value is "2"			
		MessageLevel			is Alpha 10		





		SabrixErrorLevel 		is Alpha 20 
		LocalCompanyName		is Alpha 30
		LocalActionExecuted     is Alpha 35

		LocalContinue	        is Boolean
		BypassOneSourceCall		is Boolean
		OneSourceInformationMessage is Text

		OutputTaxCodeDescription	is a Description
		NotSentToSabrix				is Boolean
		PostalCodeLast4				is Alpha 4
		PostalCodeFirst5			is Alpha 5	

		LocalInvoiceNumber		is Alpha 20
		LocalLineNumber			is a LineNumber
		LocalInvoiceAmount		is an InternationalAmount	
		LocalTaxableAmount		is an InternationalAmount		
		LocalShipFromAddress	is a PostalAddressV2	
			holds pii
		LocalShipToAddress		is a PostalAddressV2	
			holds pii

		Pos1                        is Numeric 2
		Pos2                        is Numeric 2
		ShowChar                    is Alpha 1
		NbrOfRightSlashes			is Numeric 1
		LoadValueFor				is Numeric 1
			States
				City				value is 0
				County				value is 1	
				State				value is 2	



		BegCountry                  is Numeric 2
		EndCountry					is Numeric 2
		ShipToCountry				is like Country
		LocalParsedCity 			is a Description
		LocalParsedState			is Alpha 2
		LocalParsedCounty			is a Description
		LocalParsedCountry			is Alpha 2

		LoadTaxableValueFor			is Numeric 1

			States
				State				value is 0				
				County				value is 1				
				City				value is 2				
		BegPos                  	is Numeric 3			
		EndPos						is Numeric 3			
		BegState					is Numeric 3
		EndState					is Numeric 3
		BegCounty					is Numeric 3
		EndCounty					is Numeric 3
		BegCity						is Numeric 3
		EndCity						is Numeric 3
		ToEndPos                    is Numeric 3							



		OutputTaxingJurisdiction	is Alpha 180	
		Attr						is Numeric 2
		LocalReturnedUserElement 	is a UserElementGroup	
		DisplayField				is Text		



		LocalEffectiveDate			is Date
		OutputTaxTable				is like TaxTableField		
		ZoneLevel           		is Alpha 30
		ZoneName					is Alpha 30
		ZoneLevelAuthorityType		is Alpha 30
		ZoneLevelTaxAmount 			is an InternationalAmount
		TblIdx						is Numeric 2
		LocalIterator				is Numeric 2
		AttributeNumber 			is Numeric 2
		AttributeName 				is Alpha 20
		AttributeValue				is Alpha 20
		LocalTaxCode 				is like TaxCode
		LocalJurisdictionLevel 		is Alpha 30
		LocalTaxRate 				is Percent 6.3
		LocalTaxAmount 				is an InternationalAmount		
		LocalTaxInputAccount    	is a FinanceCodeBlock	 
		LocalTaxInputDueAccount 	is a FinanceCodeBlock	 
		LocalTaxOutputAccount   	is a FinanceCodeBlock	
		LocalTaxOutputDueAccount 	is a FinanceCodeBlock	 
		OutputUserElementLoaded		is Alpha 1	
			States
				NoUserElements		value is blank
				InvoiceLevel		value is "I"
				LineLevel			value is "L"



		MySabrixError			is a OneSourceEnvelopeError	
		MyHTTPInfo 				is a HTTPInfo
		HttpStatusCode 			is Numeric 3	








		LocalCapturedXml  		is Text			
		LocalExecuteReturnBlank is Alpha 1
		LocalTrace				is Alpha 20		

		CountTaxLineItemsExcluded is Numeric 6
		CountLineItemsInError	is Numeric 6
		EachXmlLine				is Numeric 6		
		TaxLineItemsToProcess	is Numeric 6
		EachLineItemSequence	is Numeric 6					
		EachLineId 				is Numeric 6					
		EachLineItemNumber		is like DistributionSequence	
		EachLineTaxAmount		is an InternationalAmount 		
		LocalCity 				is Alpha 15
		LocalState				is Alpha 2
		LocalZip				is Alpha 10		
		LocalCountry			is Alpha 3	
		LocalCounty				is a Description
		CountTaxLineItems       is Numeric 6
		StartTimestamp			is TimeStamp 
		StopTimestamp			is TimeStamp	



		ResultsCount				is Numeric 4

		IsPartialSuccess			is Boolean

		InvoiceIsSuccess		 	is Boolean	 		
		InvoiceIsPartialSuccess		is Boolean
		NbrOfInvoiceLevelMessages	is Numeric 4
		InvoiceTotalTaxAmount		is an InternationalAmount 

		InvoiceLines				is Numeric 4
		InvoiceLineId				is Numeric 4
		InvoiceLineNumber			is Numeric 4
		NbrOfInvoiceLineMessages	is Numeric 4
		InvoiceLineTotalTax			is an InternationalAmount 
		NbrOfInvoiceLineTaxes		is Numeric 4
		NbrOfLineUserElements		is Numeric 3
		InvLevelUsrElements			is Numeric 3

		AdminZoneLevel				is Alpha 20
		AdminZoneLevelTaxRate		is Percent 7.5 
		LocalNbrInvLines			is Numeric 6
		LineTaxIdx 					is Numeric 4
		LineIdx 				    is Numeric 6
		EachLineUniqueID 			is UniqueID			
		DistLine 					is XMLDocument
		DistLineTaxMessages			is Numeric 4
		DistLineTaxSummary			is Numeric 6 
		DistLineTaxableState		is Alpha 30
		DistLineTaxableCounty		is Alpha 30
        DistLineTaxableCity			is Alpha 30	
		LineTaxMsgIdx				is Numeric 4
		DistLineTaxMessageText		is Alpha 60
		EachLineUserElement			is Numeric 3
		LocalTrigger2               is Alpha 1
		SabrixReturnedTaxCode		is like TaxCode
		TaxLineItemShipToTaxCode	is like TaxCode
		OutputTaxRate				is Percent 7.5
		ReturnedImpositionType 		is like VertexImpositionType

		Trigger 					is Alpha 1
		UFldIdx						is Numeric 2
		LocalOneSourceTaxAttribute  is a TaxAttributeGroup50
		LocalLevelUserFieldError 	is Alpha 20
		AttributesFound         	is Boolean
		LocalInvoiceNumberKey 		is Alpha 22				
		LocalLineNumberKey			is Numeric 6			
		LocalTypeKey				is Alpha 1				
		LocalAttributeNameKey		is Alpha 40				
		SkipCreateOfThisRecord		is Boolean				


		LocalVersionType			is Alpha 1				
			States											
				Original			value is blank			
				Generic				value is "G"			
		LocalOneSourceUserName		is Alpha 60			 	
		LocalOneSourcePassword		is Password				
		OneSourceUserName			is Alpha 60			 	
		OneSourcePassword			is Alpha 16				
		LocalPostalAddress			is a PostalAddressV2	
			holds pii
		RequestStopTimestamp		is Time	
		LocalXml					is XMLDocument
		LocalTransactionXml			is XMLDocument
		LocalBuildSingleLineXml 	is XMLDocument	
		LocalBuildMultilLineXml		is XMLDocument
		LocalDestAddressXml			is XMLDocument
		LocalFromAddressXml			is XMLDocument	
		LocalXmlString				is XMLDocument				
		LocalConvertDate			is Alpha 10	
		LocalAmount					is Decimal 10.2			 
		LocalPercent				is Percent 6.3	
		LocalTrigger			   	is Alpha 1
		ResponseStartTimestamp	   	is Time		 
		ResponseStopTimestamp	   	is Time	
		LocalOneSourceTaxAttribute50 is a TaxAttributeGroup50
		LocalLineTaxAttribute50 	is a TaxAttributeGroup50
		FirstLineItemNumberSeq		is Numeric 6	
		LineNbr						is Numeric 6	
		LocalTaxLineItem			is Numeric 6

		MsgIdx						is Numeric 4
		EndOfMessages				is Boolean					
		TotalInformational			is Numeric 3
		TotalWarning				is Numeric 3
		TotalSevere					is Numeric 3	
		SendingToCalculateTax		is Boolean
		LocalSkipEditHere 			is Boolean				


		ShipToAddressFound			is Boolean													
		ValidationPostalAddress		is a PostalAddressV2 
			holds pii
		LocalSkipThisOne			is Boolean 					
		PasswordTypeUsed			is Numeric 1				
			States
				TextValue		value is 0
				EncryptedValue	value is 1

		Counter					 is Numeric 3
		TempInvoiceNumber		 is Alpha 100
		TempString				 is Alpha 100  

		LocalLineTaxCode 		is like TaxCode					
		EachLineTaxableBasis	is an InternationalAmount		
		EachLineTaxExempt		is an InternationalAmount		
		LocalCountryStateCityCounty is Alpha 60
		LocalTrigger1			is Alpha 1						
		LocalNewSabrixClientKey	is like SabrixClient			

		LocalExchangeDate		is an ExchangeDate				
		LocalFromCurrency		is a FromCurrency				
		LocalToCurrency			is a ToCurrency					
		LocalTransactionAmount	is a CurrencyAmount				
		LocalCurrencyTable      is a CurrencyTable				
		LocalCurrencyExchange	is a CurrencyExchange			
		LocalCurrencyRate       is a CurrencyRate				
		LocalBaseAmount 		is a CurrencyExchangeGroup		
		LocalOutputCurrencyAmount is an InternationalAmount		
		LocalInitializeCurrencyRate is Boolean  
		CurrencyRate
        BaseInvoiceAmount       is a CurrencyExchangeGroup 		 
        BaseTaxable             is a CurrencyExchangeGroup 		 
        BaseTaxAmount           is a CurrencyExchangeGroup 
        LocalComment			is Text      

																																										
	Field Rules
		FinanceEnterpriseGrp
			initial value is actor.context.FinanceEnterpriseGroup	
			default to actor.context.FinanceEnterpriseGroup	
			required
					 
	Conditions
		OutputErrorNumberEntered
			when (OutputErrorNumber entered)
			
		TaxLineItemsExist
			when (TaxLineItemsRel exist)			


		ReturnedUserElementsExist
			when (ReturnedUserElement.UserElement[1].Name entered)
			
		OutputOneSourceUserAttributesExist
			when (OutputUserAttributesRel exist)

		OAuthRelExist
			when (OAuthRel exist)

 		ConfigParamExist
			when (OneSourceConfigParamRel exist)
			
		HeaderUserElementsExist  		
			when (InputUserAttributesRel exist)


		SuccessfulExecution
			when (IsSuccess
			and   CapturedXml entered)
		FailedExecution
			when (!IsSuccess
			and   CapturedXml entered)

		TaxEntityExist
			when (LegalEntity entered	
			and   LegalEntity exist)

		WebserviceDebugOn	
			when (WebservDebugConfigParmRel exist)
															               
	Derived Fields
		DoubleQuote is a StringField			
            type is Alpha 2
            restricted
            "\""
		DerivedAmountNoComma is a DerivedField	
			type is Alpha 12					
			return LocalAmount					
		EditLineItemUserElements is a DerivedField						
			type is Alpha 1
			restricted

			initialize UFldIdx 									
			while (UFldIdx < 50)	 	
				UFldIdx += 1
				if (LocalLineTaxAttribute50.UserElement[UFldIdx].Name not entered)			 
					end while 								
				if (LocalLineTaxAttribute50.UserElement[UFldIdx].Name entered)
					if (LocalLineTaxAttribute50.UserElement[UFldIdx].Value not entered)
						if (AttributeMissingProcess.Halt)
							constraint (LocalOneSourceTaxAttribute.UserElement[UFldIdx].Value entered)
								"ErrorAt<LocalLevelUserFieldError>,UserElementValueRequiredForUserElement<LocalOneSourceTaxAttribute.UserElement[UFldIdx].Name>"					
						if (AttributeMissingProcess.MissingMessage)
							LocalLineTaxAttribute50.UserElement[UFldIdx].Value = AttributeMissingMessage		 	
						if (AttributeMissingProcess.SkipAttribute)
							LocalLineTaxAttribute50.UserElement[UFldIdx].Number = blank					 				
			return blank			

		DerivedEncryptedPasswordEntered is a DerivedField					
			type is Boolean													
			if (TaxConfigurationRel.SabrixVersion.Password entered)									 		
				return true													
			return false 		

		DerivedTextPasswordEntered is a DerivedField						
			type is Boolean													
			if (TaxConfigurationRel.SabrixVersion.OneSourcePassword entered)									 		
				return true													
			return false 		
				
				            	



		FormatedDate is a StringField	  
			type is Alpha 10
			FormatCurrentDate[1:4]
			"-"
			FormatCurrentDate[5:6]
			"-"
			FormatCurrentDate[7:8]	
			
		FormatCurrentDate is a DerivedField
			type is Alpha 8
			return current corporate date	


		DateAlpha10 is a StringField	  
			type is Alpha 10
			ConvertDateAlpha8[1:4]
			"-"
			ConvertDateAlpha8[5:6]
			"-"
			ConvertDateAlpha8[7:8]	
			
		ConvertDateAlpha8 is a DerivedField
			type is Alpha 8

			return LocalConvertDate		
						
		FormatedTime is a StringField
			type is Alpha 8

			DisplayElapsedTimeA6[1:2]
			":"
			DisplayElapsedTimeA6[3:4]
			":"
			DisplayElapsedTimeA6[5:6]
	
		DisplayElapsedTimeA6 is a StringField
			type is Alpha 6
			restricted
			TimestampDiff

		TimestampDiff is a DerivedField
			type is Time
			return StopTimestamp - StartTimestamp		
				
		LintItemCount	is a DerivedField			 
			type is Numeric 4  
			restricted
			return (instance count of TaxLineItemsRel)
				
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			return current timestamp
			
		DerivedSabrixClientKey is a DerivedField
			type is Alpha 100
			return "SabrixClient:" + CurrentTimestamp
				
		ResultsExist is a DerivedField
			type is Boolean	
			if (DisplayMonitor entered)
				return true
			else
				return false



		XmlEscapedInvoiceNumber is a DerivedField  
			type is Alpha 100
			default label is untranslatable			

			initialize TempString
			initialize Counter
			Counter = 0
			TempString = ""
			
			while (Counter <= 100)
				Counter +=1
				if (TempInvoiceNumber[Counter] = "&")
					TempString = TempString + "&amp;"
				else
					TempString = TempString + TempInvoiceNumber[Counter]

			return TempString

							
		DerivedShipToZipLast4 is a DerivedField
			type is Alpha 4


			return ShipToAddress.PostalCode[6:10] - "-"

		DisplayMessages is a StringField	 
			type is Text

			TableHeader

			TableColumnHeader



			
			
		TableStyle is a StringField	 
			type is RichText
			"	<style>                                    "
			"	table {                                    "
			"		font-family: arial, sans-serif;        "
			"		border-collapse: collapse;             "
			"		width: 100%;                           "
			"	}                                          "
            "                                              "
			"	td, th {                                   "
			"		border: 1px solid #dddddd;             "
			"		text-align: left;                      "
			"		padding: 5px;                          "
			"	}                                          "
            "                                              "
			"	tr:nth-child(even) {                       "
			"		background-color: #dddddd;             "
			"	}                                          "
			"	</style>                                   "
	
		TableHeader is a StringField	 
			type is RichText

			"<table>   "
			
		TableColumnHeader1 is a StringField	 
			type is RichText
			" <h1> "
			"  <tr>                                        "
			"	<th>ReturnMessages</th>          		   "	 
			"  </tr>                                       "
			" </h1> "
		TableColumnHeader is a StringField	 
			type is RichText
			"  <tr>                                        "			
			"	<td>SuccessStatus</td>                     "
			"	<td>" SuccessStatus 		    "</td>     "		
			"  </tr>    								   "			
			"  <tr>                                        "			
			"	<td>Location</td>                          "
			"	<td>" SabrixErrorLocation 		"</td>     "				
			"  </tr>    								   "		
			"  <tr>                                        "									
			"	<td>Severity</td>                          "
			"	<td>" SabrixErrorSeverity 		"</td>     "			
			"  </tr>    								   "
			"  <tr>                                        "								
			"	<td>Category</td>                          "
			"	<td>" SabrixErrorCategory 		"</td>     "			
			"  </tr>    								   "						
			"  <tr>                                        "					
			"	<td>ErrorCode</td>                         "
			"	<td>" SabrixErrorCode 	   		"</td>     "			
			"  </tr>    								   "
			"  <tr>                                        "			
			"	<td>Message</td>                           "	
			"	<td>" SabrixReturnMessage 	    "</td>     "						
			"  </tr>                                       "

		TableDetail is a StringField	 
			type is RichText
			"  <tr>                                        "
			"	<td>" SuccessStatus 		    "</td>     "
			"  </tr>    								   "
			"  <tr>                                        "				
			"	<td>" SabrixErrorLocation 		"</td>     "
			"  </tr>    								   "
			"  <tr>                                        "							
			"	<td>" SabrixErrorSeverity 		"</td>     "
			"  </tr>    								   "
			"  <tr>                                        "				
			"	<td>" SabrixErrorCategory 		"</td>     "
			"  </tr>    								   "
			"  <tr>                                        "				
			"	<td>" SabrixErrorCode 	   		"</td>     "
			"  </tr>    								   "
			"  <tr>                                        "				
			"	<td>" OneSourceInformationMessage "</td>   "			
			"  </tr>                                       "
		TableEnd is a StringField	 
			type is RichText
			"</table>                                      "

		CallOneSourceGenericText is a LabelField
			"CallOneSourceGeneric"
			
		CallOneSourceText is a LabelField
			"CallOneSource"

		CallUsingCalculateTaxText is a LabelField	 
			"CallUsingCalculateTax"

		CallUsingSabrixText is a LabelField	 
			"CallUsingSabrixTest"

		CallTestSabirxUsingHttpText is a LabelField	 
			"CallTestSabirxUsingHttp"
												
		CurrentTimestampLabel is a LabelField
			"<current timestamp>"

		DisplayDate is a StringField	 
			type is RichText
			"Date..................: " CurrentTimestampLabel	 	 							"<br>"
	
		PasswordTypeUsedText  is a DerivedField	  
			type is MessageField
			default label is untranslatable
			restricted
			if (PasswordTypeUsed.TextValue)
				return PasswordTypeTextValue  
			else	
				return PasswordTypeEncrypted
				
		PasswordTypeTextValue is a MessageField	 
			"PasswordTypeTextValue"					
		PasswordTypeEncrypted is a MessageField	 
			"PasswordTypeEncrypted"	
												
		DisplayHeader is a StringField	 
			type is RichText	
			"<pre>"	
			"+==================================================================================+<br>"
			"|  Date..................: " CurrentTimestampLabel	 	                   			"<br>"
			"|  ActionExecute.........: " LocalActionExecuted	 								"<br>"
			"+==================================================================================+<br>"
			"|                         S A B R I X   C L I E N T 		         			     <br>"	
			"+==================================================================================+<br>"
			"+                         * * *   I N P U T   * * *                                |<br>"				
			"|-----------------------------------------------------------------------------------<br>"
			"| CompanyName.............: " ExternalCompanyName									"<br>"
			"| Company.................: " ExternalCompany										"<br>"	 
			"| Vendor..................: " VendorCustomer										"<br>"	 
			"| Invoice.................: " InvoiceNumber 									    "<br>"	 
			"| InvoiceAmount...........: " LocalInvoiceAmount 									"<br>"	 
			"| ReturnOneSourceTaxIn....: " ReturnOneSourceTaxIn 								"<br>"	 


		DisplayOutputHeader is a StringField	 
			type is RichText	

			"+==================================================================================+<br>"
			"+                         * * *   O U T P U T   * * *                              |<br>"				
			"+==================================================================================+<br>"	
			
		DisplayDetail is a StringField	 
			type is RichText
			"</pre>"
			"<pre>"
			"| SucessStatus..          : " SuccessStatus 										"<br>"
			"| PasswordType            : " PasswordTypeUsedText	 									"<br>"  
			"| InvoiceAmount           : " LocalInvoiceAmount 									"<br>"	 
			"| TaxableAmount           : " LocalTaxableAmount 									"<br>"	
			"| TotalTaxAmount          : " TotalTaxAmount 										"<br>"
			"| TaxRate                 : " TaxRate 												"<br>"		
			"| TaxingJurisdiction      : " TaxingJurisdiction 									"<br>"		
			"| OutputTaxCodeDescription: " OutputTaxCodeDescription								"<br>"
			"| NotSentToSabrix         : " NotSentToSabrix										"<br>"
			"| InformationMessage      : " OneSourceInformationMessage  						"<br>"							
			"</pre>"
			"<pre>"
							
		DisplayEnd is a StringField	 
			type is RichText 
			"+==================================================================================+<br>"
			"|                       E N D  *  T R A N S A C T I O N  *  D A T A                 <br>"	 
			"+==================================================================================+<br>"			
			DisplayMessages	
			DerivedWebserviceError
			"</pre>"
			
		DerivedWebserviceError is a DerivedField
			type is Text
			if (WebServiceError)
				return WebserviceMessage
			return blank
									
		WebserviceMessage is a StringField	 
			type is RichText
			"<table>                                            								"
			"  <tr>                                                                             "
			"	<th>WebServiceError</th>                                                        "
			"  </tr>                                                                            "
			"  <tr>                                                                             "
			"	<td>" WebServiceErrorMessage"</td>                                              "
			"  </tr>                                                                            "
			"</table>                                                                           "

		DisplayXml is a StringField	 
			type is Text 
			"<pre>"	
			"+==================================================================================+<br>"
			"|                              C A P T U R E D * X M L                              <br>"	 
			"+==================================================================================+<br>"			
			LocalCapturedXml
			"</pre>"
			

		BeginDisplayAttributes is a StringField	 
			type is RichText 
			"<pre>"			
			"+==================================================================================+<br>"
			"| " UserElementLevelLabel + " O U T P U T * U S E R  *  A T T R I B U T E S <br>"	 
			"+==================================================================================+<br>"	
			"<table>                                        									     "				

		BeginReturnedAttributes is a StringField	 
			type is RichText 
			"<pre>"			
			"+==================================================================================+<br>"
			"|                   R E T U R N E D *  U S E R  *  A T T R I B U T E S              <br>"	 
			"+==================================================================================+<br>"	
			"<table>                                        									     "	
		AttributeHeader is a StringField	 
			type is RichText

			"  <tr>                                        	"			
			"	<td>Number</td>                        	 	"
			"	<td>Name</td>                  				"
			"	<td>Value</td>                  			"
			"  </tr>                                       	"
		AttributeDetail is a StringField	 
			type is RichText
			"  <tr>                                        	"
			"	<td>" AttributeNumber 				 "</td> "
			"	<td>" AttributeName 				 "</td> "
			"	<td>" AttributeValue				 "</td> "
			"  </tr>    								    "
		EndTableForAttributes is a StringField	 
			type is RichText 
			"+=================================  End Attributes    ============================+<br>"
			"</table>"

		DisplayFieldDetail is a StringField	 
			type is RichText
			"| " DisplayField 															        "<br>"									
		DisplayMidBreak is a StringField	 
			type is RichText	
			"+==================================================================================+<br>"


		DisplayZoneLevelHeader is a StringField	 
			type is RichText 

			"<table>"

		ZoneHeader1 is a StringField	 
			type is RichText
			" <h1> "
			"  <tr>                                        "
			"	<th colspan=6>ZoneLevels</th>"	 
			"  </tr>                                       "
			" </h1> "
		ZoneColumnHeader is a StringField	 
			type is RichText
			"  <tr>                                        "	
			"	<th>EachLineItemSequence</th>              "	 	
			"	<th>EachLineItemNumber</th>                "	
			"	<th>ZoneLevel</th>                         "
			"	<th>ZoneLevelTaxRate</th>                  "
			"	<th>TaxAmount</th>                         "
			"	<th>AuthorityType</th>                     "
			"  </tr>                                       "
		DisplayZoneLevelDetail is a StringField	 
			type is RichText
			"  <tr>                                        "
			"	<td>" EachLineItemSequence       "</td>    "
			"	<td>" EachLineItemNumber         "</td>    "	
			"	<td>" ZoneLevel 		   		 "</td>    "
			"	<td>" TotalTaxRate 				 "</td>    "


			"	<td>" ZoneLevelTaxAmount 		 "</td>    "
			"	<td>" ZoneLevelAuthorityType	 "</td>    "
			"  </tr>    								   "









		TableStyle2 is a StringField	 
			type is RichText
			"	<style>                                    "
			"	table {                                    "
			"		font-family: arial, sans-serif;        "
			" 		border: 1px solid black;               "
			"		border-collapse: collapse;             "
			"		width: 100%;                           "
			"	}                                          "
            "                                              "
			"	td, th {                                   "
			"		border: 1px solid #dddddd;             "
			"		text-align: left;                      "
			"		padding: 8px;                          "
			"	}                                          "
			"	 td.right {                                "
			"	    text-align: right;                     "
			"	}                                          "
            "                                              "
			"	#d01r {									   "
			"	     text-align: right;                    "
			"	}                                          "
			"	tr:nth-child(even) {                       "
			"		background-color: #dddddd;             "
			"	}                                          "
			"	p {      								   "
			"	    border-bottom: 6px solid red; 		   "
			"	    background-color: lightgrey;  		   "
			"	} 										   "
			"	</style>                                   "

		TaxTableHeader is a StringField	 
			type is RichText



			"<table>"
			
		TaxTableColumnHeader1 is a StringField	 
			type is RichText
			"================================[ Tax Table ]====================================="	
			 
		TaxTableColumnHeader is a StringField	 
			type is RichText
			"  <tr>                                        "			
			"	<th>TaxCode</th>                           "	
			"	<th>ZoneLevel</th>                         "
			"	<th>TaxRate</th>                           "
			"	<th>TaxAmount</th>                         "
			"	<th>AuthorityType</th>                     "	
			"	<th>InputAccount</th>                      "	
			"	<th>OutputAccount</th>                     "									
			"  </tr>    								   "						
		TaxTableDetail is a StringField	 
			type is RichText
			"  <tr>                                        "
			"	<td>" LocalTaxCode 		  		"</td>"
			"	<td>" LocalJurisdictionLevel 	"</td>"
			"	<td>" LocalTaxRate  		 	"</td>"
			"	<td>" LocalTaxAmount 		  	"</td>"
			"	<td>" ZoneLevelAuthorityType  	"</td>"
			"	<td>" LocalTaxInputAccount		"</td>"
			"	<td>" LocalTaxOutputAccount		"</td>"			
			"  </tr>    							  "
		TaxTableEnd is a StringField	 
			type is RichText
			"</table>"




		BeginReturnedMessages is a StringField	 
			type is RichText 
			restricted 
			"<pre>"			
			"+==================================================================================+<br>"
			"|                          R E T U R N E D  *  M E S S A G E S                      <br>"	 
			"+==================================================================================+<br>"
			"MessageLevel:" + MessageLevel + "[" + EachLineId + "]"                             "<br>"			
			"<table>                                        									     "	
		MessageHeader is a StringField	 
			type is Text      		
			" <h1> "
			"  <tr>                                        "
			"	<th>Severity</th>"	 
			"	<th>Code</th>"	 			
			"	<th>MessageText</th>"	 			
			"  </tr>                                       "
			" </h1> "						
		MessageDetail is a StringField	 
			type is RichText
			"  <tr>                                     											 "
			"	<td>" LocalErrorSeverity 				 									  "</td> "
			"	<td>" SabrixErrorCode 					 									  "</td> "
			"	<td>" SabrixErrorMessage				 									  "</td> "
			"  </tr>    								                                             "	
		EndTableForMessages is a StringField	 
			type is RichText 
			" <h1> "
			"  <tr>                                        "
			"	<th colspan=2>Total Messages For " + MessageLevel + "</th>"	 
			"  </tr>                                       "
			" </h1> "			
			"  <tr>                                        "			
			"	<td>Total Informational</td>               "
			"	<td>" TotalInformational 	    "</td>     "		 
			"  <tr>                                        "			
			"	<td>Total Warning</td>                     "
			"	<td>" TotalWarning 		        "</td>     "				
			"  </tr>    								   "		
			"  <tr>                                        "									
			"	<td>Total Severe</td>                      "
			"	<td>" TotalSevere 		        "</td>     "			
			" <h2> "
			"  </tr>    								   "	
			"	<td>TotalMessages</td>                     "
			"	<td>" TotalMessages		        "</td>     "			
			"  </tr>    								   "
			" </h2> "			
			"</table>"			
			"+====================================  End Messages    ============================+<br>"
			"</pre>"	
		TotalMessages is a DerivedField
			type is Numeric 3
			return TotalInformational + TotalWarning + TotalSevere
						
		Display1SourceMessage is a DerivedField
			type is Alpha 1
			default label is untranslatable
			if (EndOfMessages)
				DisplayMonitor = DisplayMonitor + EndTableForMessages
				return blank
			if (MsgIdx = 0)
				DisplayMonitor = DisplayMonitor + BeginReturnedMessages
				DisplayMonitor = DisplayMonitor + MessageHeader
			if (LocalErrorSeverity.Informational)
				TotalInformational += 1	
			if (LocalErrorSeverity.Warning)				
				TotalWarning += 1	
			if (LocalErrorSeverity.Severe)				
				TotalSevere += 1			 
		 	
			MsgIdx +=1   	
			DisplayMonitor = DisplayMonitor + MessageDetail
			return blank

		CreateTaxCodeMaster is a DerivedField	 
			type is Alpha 1
			default label is untranslatable	
			restricted					
			if (LocalLineTaxCode entered)			
				initialize LocalCountryStateCityCounty
				LocalCountryStateCityCounty = LocalCountry + "," + DistLineTaxableState + ", " + DistLineTaxableCity + ", " + DistLineTaxableCounty
				if (ReturnedErpTaxCodeRel not exist)
					invoke Create TaxCode	 
						invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGrp	 
						invoked.TaxCode					= LocalLineTaxCode
						invoked.TaxType					= "S"
						invoked.Description				= LocalCountryStateCityCounty
												
			return blank
									
		DisplayTaxTable is a DerivedField	  						 

  			type is Alpha 1 
			ReturnedTaxTable = OutputTaxTable
			DisplayMonitor = DisplayMonitor + TaxTableHeader  	 

			DisplayMonitor = DisplayMonitor + TaxTableColumnHeader	
			initialize TblIdx	 			   
			while (TblIdx < 8)
				TblIdx += 1		
				if (OutputTaxTable.TaxTableOutput[TblIdx].TaxCode entered)	
					LocalTaxCode 			= OutputTaxTable.TaxTableOutput[TblIdx].TaxCode
					LocalJurisdictionLevel 	= OutputTaxTable.TaxTableOutput[TblIdx].JurisdictionLevel
					LocalTaxRate 			= OutputTaxTable.TaxTableOutput[TblIdx].TaxRate
					LocalTaxAmount 			= OutputTaxTable.TaxTableOutput[TblIdx].TaxAmount
					ZoneLevelAuthorityType	= OutputTaxTable.TaxTableOutput[TblIdx].ImpositionType
					LocalTaxInputAccount    = OutputTaxTable.TaxTableOutput[TblIdx].TaxInputAccount	  
					LocalTaxOutputAccount   = OutputTaxTable.TaxTableOutput[TblIdx].TaxOutputAccount	 	
					DisplayMonitor = DisplayMonitor + TaxTableDetail
				else
					DisplayMonitor = DisplayMonitor + TaxTableEnd					
					end while	
			return blank		
																		
		ParseTaxCodeDescription is a DerivedField	  						 

  			type is like Description 


			DisplayMonitor = DisplayMonitor + "ParseRtn[1143]Pos1...:" + Pos1 + "<br>"	
			ShipToAddressFound = false
			NbrOfRightSlashes = 0
			LoadValueFor = 0
			Pos1 = 0
			Pos2 = 0
			DisplayMonitor = DisplayMonitor + "ParseRtn[1145]TaxCodeDescription:" + OutputTaxCodeDescription + "<br>"	
			while (Pos1 <= 60)
				Pos1 +=1
				DisplayMonitor = DisplayMonitor + "ParseRtn[1152]LoadValueFor:" + LoadValueFor + "Pos1:" + Pos1 + "Char:" + OutputTaxCodeDescription[Pos1:Pos1] + "<br>"    	
				ShowChar = OutputTaxCodeDescription[Pos1:Pos1]
				DisplayMonitor = DisplayMonitor + "ParseRtn[1154]LoadValueFor:" + LoadValueFor + "Pos1:" + Pos1 + "ShowChar:" + ShowChar + "<br>"  
				if (OutputTaxCodeDescription[Pos1:Pos1] = "/"
				or  LoadValueFor.State)	
					DisplayMonitor = DisplayMonitor + "ParseRtn[1157]Pos1...:" + Pos1 + "<br>"
			 		if (OutputTaxCodeDescription[Pos1:Pos1] = "/")
			 			NbrOfRightSlashes +=1						

					if (LoadValueFor.State)		// 2							// Since State does not end with "/", but should be only 2 charcters
						Pos2     = BegState + 1
						LocalParsedState = OutputTaxCodeDescription[BegState:Pos2]
						BegCountry = Pos2 + 2
						EndCountry = Pos2 + 3									
						LocalParsedCountry = OutputTaxCodeDescription[BegCountry:EndCountry] 
						DisplayMonitor = DisplayMonitor + "ParseRtn[1164]LocalParsedCity...:<LocalParsedCity>" + "<br>"	
						display "[TLC]LocalParsedCounty.:<LocalParsedCounty>"
						display "[TLC]LocalParsedState..:<LocalParsedState>"
						display "[TLC]LocalParsedCountry:<LocalParsedCountry>"	
						display "[TLC]ShipToCountry.....:<ShipToCountry>"
						if (NbrOfRightSlashes > 1)	
							ShipToAddressFound = true	
						return blank	
					else					
					if (LoadValueFor.County)	
						DisplayMonitor = DisplayMonitor + "ParseRtn[1175]LoadValueFor:" + LoadValueFor + "Pos1:" + Pos1 + "Char:" + OutputTaxCodeDescription[Pos1:Pos1] + "<br>"    	
						LocalParsedCounty = OutputTaxCodeDescription[BegCounty:Pos1-1]	
						Pos1 +=1
						BegState = Pos1
					else					
					if (LoadValueFor.City)		
						DisplayMonitor = DisplayMonitor + "ParseRtn[1181]LoadValueFor:" + LoadValueFor + "Pos1:" + Pos1 + "Char:" + OutputTaxCodeDescription[Pos1:Pos1] + "<br>"    	
						if (LocalParsedCity = blank)
							LocalParsedCity = OutputTaxCodeDescription[1:Pos1-1]	
						Pos1 +=1						// start next character after "/" for County
						BegCounty = Pos1  	
										
			 		LoadValueFor = LoadValueFor + 1		
			 		Pos2 = 0

			DisplayMonitor = DisplayMonitor + "ParseRtn[1181]LocalParsedCity...:<LocalParsedCity>" + "<br>"	  
			DisplayMonitor = DisplayMonitor + "ParseRtn[1182]LocalParsedCounty.:<LocalParsedCounty>" + "<br>"	 
			DisplayMonitor = DisplayMonitor + "ParseRtn[1183]LocalParsedState..:<LocalParsedState>" + "<br>"	 
			DisplayMonitor = DisplayMonitor + "ParseRtn[1184]LocalParsedCountry:<LocalParsedCountry>" + "<br>"	 	 
			DisplayMonitor = DisplayMonitor + "ParseRtn[1184]ShipToCountry.....:<ShipToCountry>" + "<br>"	 
									 		
			if (NbrOfRightSlashes > 1)	
				ShipToAddressFound = true	
									
			return OutputTaxCodeDescription	

		



		ConcatinatedTaxableStateCountyCity is a DerivedField	  						 
  			type is Alpha 180  
  			initialize TaxingJurisdiction

			if (TestTaxingJurisdiction)
	          	if (TaxableState not entered)
	          		TaxableState = "California             "
	          	if (TaxableCity not entered)
	          		TaxableCity  = "San Fernando Valley    "
	          	if (TaxableCounty not entered)
	          		TaxableCounty = "Los Angeles County    "

	        else
	         	OutputTaxingJurisdiction = TaxableState + "," + TaxableCounty + "," + TaxableCity 
				return OutputTaxingJurisdiction
				

			LoadTaxableValueFor = 0	



	      	if (LoadTaxableValueFor.State)
         		Pos1 = 60	   		      	
		      	if (TaxableState[Pos1:Pos1] = blank)	    
			    	while (TaxableState[Pos1:Pos1] = blank)	
						Pos1 -= 1   
						if (Pos1 = 1
						or  TaxableState[Pos1:Pos1] entered)
							EndState = Pos1
			      			end while	
			    else
			    	EndState = 60		  
 
 			LoadTaxableValueFor = 1		



          	if (LoadTaxableValueFor.County) 
         		Pos1 = 60
				initialize EndPos 		      	
		      	if (TaxableCounty[Pos1:Pos1] = blank)	    
			    	while (TaxableCounty[Pos1:Pos1] = blank) 	
						Pos1 -= 1   
						if (Pos1 = 1
						or  TaxableCounty[Pos1:Pos1] entered)
							EndCounty = Pos1
						else		
							EndCounty = 60	
			    else
			    	EndCounty = 60														
                
			LoadTaxableValueFor = 2



         	if (LoadTaxableValueFor.City)
         		Pos1 = 60	 		      	
		      	if (TaxableCity[Pos1:Pos1] = blank)	    
			    	while (TaxableCity[Pos1:Pos1] = blank)				
						Pos1 -= 1   
						if (Pos1 = 1
						or  TaxableCity[Pos1:Pos1] entered)
							EndCity = Pos1	
			      			end while	
			    else
			    	EndCity = 60				      			

			OutputTaxingJurisdiction = TaxableState[1:EndState] + "," + TaxableCounty[1:EndCounty] + "," + TaxableCity[1:EndCity]

			return OutputTaxingJurisdiction	 


		UserElementLevelLabel is a DerivedField  
			type is MessageField
			if (OutputUserElementLoaded.InvoiceLevel)	
				return InvoiceLevelLabel
			return LineLevelLabel	 

		InvoiceLevelLabel is a MessageField                     
			"InvoiceLevel"		

		LineLevelLabel is a MessageField						 
			"LineLevel" 		

		TotalNumberOfAttributes is a DerivedField			
			type is Numeric 2 

			default label is untranslatable	
			return (instance count of TaxAttributesRel.OneSourceTaxAttributeRel)
						
		DerivedMoreThan25AttributeMsg is a DerivedField  	
			type is MessageField

			default label is untranslatable			
			if (TotalNumberOfAttributes > 25)				 
				return MoreThan25AttributesLabel
			return blank	 

		MoreThan25AttributesLabel is a MessageField        
			"***MoreThan25Attributes***"		
						 



		FailedLabel is a LabelField
			"Failed:"	
		TimestampLabel is a LabelField
			"Timestamp:"	
		StatusCodeLabel is a LabelField
			"StatusCode:"	
		CallURLLabel is a LabelField
			"CallURL:"			
		DerivedTimestamp is a DerivedField
			type is TimeStamp 
			return current timestamp		
										
		CaptureXml is a DerivedField	 			 
			type is Alpha 1	
			LocalTrace = LocalTrace + "CaptureXml|" 
			initialize LocalCapturedXml
			initialize ReturnedErrorMessage
			initialize CapturedXml
			LocalCapturedXml = TimestampLabel + DerivedTimestamp
			LocalCapturedXml = LocalCapturedXml + CallURLLabel + MyHTTPInfo.Url
			LocalCapturedXml = LocalCapturedXml + MyHTTPInfo.RequestBody
			if (MyHTTPInfo.Failed)
				LocalCapturedXml = LocalCapturedXml + FailedLabel + MyHTTPInfo.Failed
				LocalCapturedXml = LocalCapturedXml + StatusCodeLabel + MyHTTPInfo.StatusCode		
			LocalCapturedXml 	= LocalCapturedXml + MyHTTPInfo.ResponseBody
			CapturedXml = LocalCapturedXml 
			return blank 



		



		ParseWebserviceError is a DerivedField	 			 
			type is Alpha 1
			LocalTrace = LocalTrace + "ParseWebserviceError|"
			HttpStatusCode = MyHTTPInfo.StatusCode
			if (OneSourceVersionType.Generic)									
				DisplayMonitor = DisplayMonitor + "[1780]WebServiceErrorMessage.:" + WebServiceErrorMessage		// This contains "could not parse"
				DisplayMonitor = DisplayMonitor + "[1781]MyHTTPInfo.ResponseBody:" + MyHTTPInfo.ResponseBody
				if (MyHTTPInfo.StatusCode = 500)						
					ResponseXML = MyHTTPInfo.ResponseBody				
					WebServiceErrorMessage = MyHTTPInfo.ResponseBody	
				CapturedXml = MyHTTPInfo
				return blank											
			invoke ParseError OneSourceErrorParser 
				invoked.ErrorResponse = MyHTTPInfo.ResponseBody 
				MySabrixError = result.OneSourceEnvelopeError	 
			
			for each MySabrixError.ErrorOutdataType set	 					
				for each each.ErrorOutdataTypeREQUESTSTATUS set				
					SuccessStatus = each.ISSUCCESS							
					IsSuccess 	  = each.ISSUCCESS							
					for each each.ErrorOutdataTypeREQUESTSTATUSERROR set	
						SabrixReturnMessage = each.DESCRIPTION				
						SabrixErrorLocation	= each.ERRORLOCATIONPATH		
						SabrixErrorCode		= each.CODE						
						if (WebServiceErrorMessage not entered)				
							WebServiceErrorMessage = each.DESCRIPTION		

			
			return blank 					



		DerivedLineItemTaxCode is a DerivedField	 
			type is like TaxCode
			restricted
			initialize TaxLineItemShipToTaxCode
			if (Update1SourceTaxLineItemRel exist)
				if (Update1SourceTaxLineItemRel.ShipToTaxCode entered)
					TaxLineItemShipToTaxCode = Update1SourceTaxLineItemRel.ShipToTaxCode
					return TaxLineItemShipToTaxCode
			if (TaxCodeEntered entered)
				return TaxCodeEntered
			if (SabrixReturnedTaxCode entered)
				return SabrixReturnedTaxCode 			
			return TaxCodeEntered

		EditUserElements is a DerivedField			
			type is Boolean
			initialize UFldIdx
			while (UFldIdx < 50)	
				UFldIdx += 1
				if (LocalOneSourceTaxAttribute.UserElement[UFldIdx].Number entered
				and LocalOneSourceTaxAttribute.UserElement[UFldIdx].Name entered)
					if (LocalOneSourceTaxAttribute.UserElement[UFldIdx].Value not entered)
						if (AttributeMissingProcess.Halt)
							constraint (LocalOneSourceTaxAttribute.UserElement[UFldIdx].Value entered)
								"ErrorAt<LocalLevelUserFieldError>,UserElementValueRequiredForUserElement<LocalOneSourceTaxAttribute.UserElement[UFldIdx].Name>"					
						if (AttributeMissingProcess.MissingMessage)
							LocalOneSourceTaxAttribute.UserElement[UFldIdx].Value = AttributeMissingMessage	
						if (AttributeMissingProcess.SkipAttribute)
							LocalOneSourceTaxAttribute.UserElement[UFldIdx].Number = blank					

			return false

		LoadAttributes  is a DerivedField
			type is Alpha 1		
			restricted
			initialize Attr
			if (LocalReturnedUserElement.UserElement[1].Number entered)
				while (Attr < 25)
					Attr += 1
					if (LocalReturnedUserElement.UserElement[Attr].Number not entered)
						end while
					else	
					if (LocalReturnedUserElement.UserElement[Attr].Number entered)

						if (OriginalInvoiceNumber entered)
							LocalInvoiceNumberKey 							= OriginalInvoiceNumber	
						else	
							LocalInvoiceNumberKey 							= InvoiceNumber
						if (OutputUserElementLoaded.LineLevel)
							LocalInvoiceNumberKey							= blank							
							if (EachLineItemNumber entered)						
								LocalLineNumberKey 							= EachLineItemNumber	
							else	
								LocalLineNumberKey 							= LineNumber
						else
							LocalLineNumberKey 								= blank							
						LocalAttributeNameKey 								= LocalReturnedUserElement.UserElement[Attr].Name	 					
						if (ThisOutputUserAttributeRel exist)
							SkipCreateOfThisRecord = true					
						else		
							invoke Create ThisOutputUserAttributeRel	


								invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGrp
								invoked.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID

								invoked.OneSourceUserAttribute.InvoiceNumber 			= LocalInvoiceNumberKey							
								invoked.OneSourceUserAttribute.LineNumber 				= LocalLineNumberKey	
								if (OutputUserElementLoaded.LineLevel)
									invoked.Level										= "L"
								else
								if (OutputUserElementLoaded.InvoiceLevel)
									invoked.OneSourceUserAttribute.LineNumber 			= LocalLineNumberKey	
									invoked.Level										= blank
								invoked.OneSourceUserAttribute.Type						= "O"						
								if (OutputUserElementLoaded.InvoiceLevel)
									invoked.OneSourceUserAttribute.LineNumber 			= blank	
									invoked.Level										= blank
								invoked.OneSourceUserAttribute.Type						= "O"
								invoked.RelatedObjectReference							= reference to this instance
								invoked.UserAttributeNumber								= LocalReturnedUserElement.UserElement[Attr].Number
								invoked.UserAttributeName								= LocalReturnedUserElement.UserElement[Attr].Name
								invoked.UserAttributeValue								= LocalReturnedUserElement.UserElement[Attr].Value			 
						 		invoked.Description										= Description				 
								invoked.OriginalInvoiceNumber 							= OriginalInvoiceNumber		 
								invoked.UniqueLineNumber 								= UniqueLineNumber	
									 
			return blank			

		InitializeKeyValues is a DerivedField
			type is Alpha 1
			restricted
			initialize LocalInvoiceNumberKey
			initialize LocalLineNumberKey	
			initialize LocalTypeKey
			initialize LocalAttributeNameKey
			return blank







		LoadTaxTableZoneLevels  is a DerivedField 
	        type is Alpha 1 
	        restricted 
			if (TblIdx < 8)
				TblIdx += 1
				TaxTable.TaxTableOutput[TblIdx].TaxCode  			= DerivedLineItemTaxCode
				TaxTable.TaxTableOutput[TblIdx].TaxRate  			= OutputTaxRate 
				TaxTable.TaxTableOutput[TblIdx].TaxAmount		 	= ZoneLevelTaxAmount
				TaxTable.TaxTableOutput[TblIdx].TaxAmount5DP 		= ZoneLevelTaxAmount		 
				TaxTable.TaxTableOutput[TblIdx].JurisdictionLevel	= ZoneLevel
				TaxTable.TaxTableOutput[TblIdx].Situs				= ZoneName   
				TaxTable.TaxTableOutput[TblIdx].ImpositionType		= ReturnedImpositionType		
				TaxTable.TaxTableOutput[TblIdx].TaxableAmount 		= TaxableAmount
				TaxTable.TaxTableOutput[TblIdx].TaxPointDate 		= current corporate date	
				TaxTable.TaxTableOutput[TblIdx].EffectiveDate		= LocalEffectiveDate 
				TaxTable.TaxTableOutput[TblIdx].InTaxAmount 		= TaxAmount
				TaxTable.TaxTableOutput[TblIdx].Description			= Description 		
			return blank
			









																

		GenericOneSource is a DerivedField 
	        type is XMLDocument 
	        restricted



			CalculateTax.LocalOneSourceUserName = OneSourceUserName	 													
			CalculateTax.LocalOneSourcePassword = LocalOneSourcePassword	
			GenericOneSource = template.OneSourceUserToken document for this instance									
			GenericOneSource select "//taxCalculationRequest" += template.OneSourceIndata document for this instance 	
			GenericOneSource select "//taxCalculationRequest/INDATA" += DerivedOneSourceRequest							
				

		ProcessOneSourceGeneric is a DerivedField		  	 



			type is Alpha 1
			restricted
			if (OneSourceUserName not entered)
				OneSourceUserName = TaxConfigurationRel.SabrixVersion.UserName	
			if (LocalOneSourcePassword not entered)		 		 	
				if (TaxConfigurationRel.SabrixVersion.Password entered)								
					PasswordTypeUsed = 1
					LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.Password				
				else
					PasswordTypeUsed = 0
					LocalOneSourcePassword  = TaxConfigurationRel.SabrixVersion.EncryptedPassword	

				
			RequestXML = GenericOneSource				 
					
			invoke CalculateTaxGenericTemplate OneSourceGeneric
				resume on error						 
					WebServiceError = true
					WebServiceErrorMessage = error message						
				invoked.Request     = RequestXML
				MyXMLDocument     	= result.Response
				MyHTTPInfo			= result.MyHTTPInfo					

			RequestStopTimestamp = DerivedTimestamp time	

			CapturedXml = RequestXML + MyXMLDocument 	  


			if (WebServiceError
			or  MyHTTPInfo.Failed)
				LocalContinue = true
				IsSuccess = false
				LocalExecuteReturnBlank = ParseWebserviceError	
				if (StoreErrors
				and !IsSuccess)
					WebServiceError = true
				else	
					if (HttpStatusCode = 500)
						constraint (HttpStatusCode not entered)
							"[1363]HttpStatusCode:<HttpStatusCode>,MyHTTPInfo.ResponseBody:<MyHTTPInfo.ResponseBody>"
					else		
						constraint (IsSuccess)
							"[1366]HttpStatusCode:<HttpStatusCode>,SabrixErrorCode:<SabrixErrorCode>,Description:<SabrixReturnMessage>,<SabrixErrorLocation>" 
						constraint (!WebServiceError)
							"[1368]MyHTTPInfo.Failed:<MyHTTPInfo.Failed>,WebServiceError:<WebServiceError>,<WebServiceErrorMessage>" 									
			else	
				LocalTrigger = CheckIfOneSourceIsSuccessful
				constraint (IsSuccess)
					"[1373]HttpStatusCode:<HttpStatusCode>,SabrixErrorCode:<SabrixErrorCode>,Description:<SabrixReturnMessage>,<SabrixErrorLocation>" 

			if (IsSuccess)					
				DisplayMonitor = DisplayMonitor + "LoadResultsForGeneric" + "<br>"	 
				ResponseStartTimestamp = DerivedTimestamp time
				LocalExecuteReturnBlank = LoadResultsForGeneric
				ResponseStopTimestamp = DerivedTimestamp time	

				DisplayMonitor = DisplayHeader	
				DisplayMonitor = DisplayMonitor + DisplayOutputHeader				
				DisplayMonitor = DisplayMonitor + DisplayDetail	

				OutputTaxTable = TaxTable				
				Trigger = DisplayTaxTable				 
				DisplayMonitor = DisplayMonitor + DisplayEnd
			
			StopTimestamp		= DerivedTimestamp									
			return blank


		CheckIfOneSourceIsSuccessful is a DerivedField	 			 
			type is Alpha 1
			HttpStatusCode = MyHTTPInfo.StatusCode
			if (OneSourceVersionType.Generic)
				initialize SabrixErrorCode
				initialize HttpStatusCode
				IsSuccess				= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_SUCCESS"
				if (IsSuccess)
					LocalContinue = true
				else
					HttpStatusCode 		= MyHTTPInfo.StatusCode
					SabrixErrorCode		= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/ERROR/CODE"					
					SabrixReturnMessage	= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/ERROR/DESCRIPTION"	
					SabrixErrorLocation	= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/ERROR/ERROR_LOCATION_PATH"							
			return blank



		DerivedCurrencyCode is a DerivedField	  
			type is like Currency						 	
			if (CurrencyCode entered)
				return CurrencyCode




			return "USD"
			



		DerivedInvoiceHeaderGenericXml is a DerivedField	 
			type is XMLDocument	
			initialize LocalTransactionXml 
			

			LocalTransactionXml = LocalTransactionXml + "<CALCULATION_DIRECTION>" + "F" + "</CALCULATION_DIRECTION>"
			if (CallingSystemNumber entered)
				LocalTransactionXml = LocalTransactionXml + "<CALLING_SYSTEM_NUMBER>" + CallingSystemNumber + "</CALLING_SYSTEM_NUMBER>"	
			if (ExternalCompanyName entered)
				LocalTransactionXml = LocalTransactionXml + "<COMPANY_NAME>" + ExternalCompanyName + "</COMPANY_NAME>"								 
			LocalTransactionXml = LocalTransactionXml + "<COMPANY_ROLE>" + "S" + "</COMPANY_ROLE>"					


			LocalTransactionXml = LocalTransactionXml + "<CURRENCY_CODE>" + DerivedCurrencyCode + "</CURRENCY_CODE>"				
			if (ExternalCompany entered)
				LocalTransactionXml = LocalTransactionXml + "<EXTERNAL_COMPANY_ID>" + ExternalCompany + "</EXTERNAL_COMPANY_ID>" 					 


			if (HostSystem entered)
				LocalTransactionXml = LocalTransactionXml + "<HOST_SYSTEM>" + HostSystem + "</HOST_SYSTEM>" 										 
			if (InvoiceDate entered)
				LocalConvertDate = InvoiceDate
				LocalTransactionXml = LocalTransactionXml + "<INVOICE_DATE>" + DateAlpha10 + "</INVOICE_DATE>" 		
			if (PostDate entered)
				LocalConvertDate = PostDate
				LocalTransactionXml = LocalTransactionXml + "<FISCAL_DATE>" + DateAlpha10 + "</FISCAL_DATE>" 
			if (DocumentType entered)	
				LocalTransactionXml = LocalTransactionXml + "<DOCUMENT_TYPE>" + DocumentType + "</DOCUMENT_TYPE>" 	
			if (InvoiceNumber entered)
				initialize TempInvoiceNumber
				TempInvoiceNumber = InvoiceNumber																				
				LocalTransactionXml = LocalTransactionXml + "<INVOICE_NUMBER>" + XmlEscapedInvoiceNumber + "</INVOICE_NUMBER>"	

			LocalTransactionXml = LocalTransactionXml + "<IS_AUDITED>" + IsAudited + "</IS_AUDITED>" 	




			LocalTransactionXml = LocalTransactionXml + "<CUSTOMER_NUMBER>" + VendorCustomer + "</CUSTOMER_NUMBER>" 	
			LocalTransactionXml = LocalTransactionXml + "<CUSTOMER_NAME>" + VendorCustomerName + "</CUSTOMER_NAME>" 	
			LocalTransactionXml = LocalTransactionXml + "<END_USER_NAME>" + EndUser + "</END_USER_NAME>" 								



			LocalTransactionXml = LocalTransactionXml + "<TRANSACTION_TYPE>" + "GS" + "</TRANSACTION_TYPE>" 									 
						 
			if (UserElementLevel.Invoice				 			 
			and UserElementGroup.UserElement[1].Number entered)
				initialize Idx	 
				while (Idx < 25)
					Idx +=1
					if (UserElementGroup.UserElement[Idx].Number entered)
						LocalTransactionXml = LocalTransactionXml + "<USER_ELEMENT>"
						LocalTransactionXml = LocalTransactionXml + "<NAME>" + UserElementGroup.UserElement[Idx].Name + "</NAME>"	
						LocalTransactionXml = LocalTransactionXml + "<VALUE>" + UserElementGroup.UserElement[Idx].Value + "</VALUE>"						
						LocalTransactionXml = LocalTransactionXml + "</USER_ELEMENT>" 					
			


			return LocalTransactionXml	
			

		Load1SourceSingleLineItem is a DerivedField	 
			type is XMLDocument	
			initialize LocalBuildSingleLineXml  		
				 	
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<LINE"

			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + " ID=" + DoubleQuote + "1"  + DoubleQuote + ">"		
			
			if (TaxableAmount entered)
				LocalAmount = TaxableAmount
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<GROSS_AMOUNT>" + DerivedAmountNoComma + "</GROSS_AMOUNT>" 				 	
	
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<LINE_NUMBER>" + "1" + "</LINE_NUMBER>" 		
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<UNIQUE_LINE_NUMBER>" + "1"  + "</UNIQUE_LINE_NUMBER>"

			if (TaxAmount entered)
				LocalAmount = TaxAmount
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<VENDOR_TAX>" + DerivedAmountNoComma + "</VENDOR_TAX>" 
				
			if (Product entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<PRODUCT_CODE>" +  Product + "</PRODUCT_CODE>" 
				  
			if (IsCredit)				 
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<IS_CREDIT>" + "true" + "</IS_CREDIT>" 
							
			if (CommodityCode entered)		
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<COMMODITY_CODE>" +  "1" + "</COMMODITY_CODE>"
								
			if (DeliveryTerms entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<DELIVERY_TERMS>" + DeliveryTerms + "</DELIVERY_TERMS>"
				

				
			if (Description entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<DESCRIPTION>" + Description + "</DESCRIPTION>"			



			if (UserElementGroup.UserElement[1].Number entered)	
				LocalLineTaxAttribute50 = UserElementGroup		
				
			if (UserElementLevel.Line
			and LocalOneSourceTaxAttribute50.UserElement[1].Number entered)
				initialize Idx	 
				while (Idx < 25)		
					Idx +=1
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number entered)
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<USER_ELEMENT>"
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<NAME>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<VALUE>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "</USER_ELEMENT>" 				
						

			if (ShipToAddress entered)	 
				LocalPostalAddress = ShipToAddress
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + LoadShipToAddress
			
			if (ShipFromAddress entered)
				LocalPostalAddress = ShipFromAddress
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + LoadShipFromAddress
			





			if (QuantityAmount entered
			and UnitOfMeasure entered)	
				LocalAmount = QuantityAmount
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<AMOUNT>" + DerivedAmountNoComma + "</AMOUNT>" 
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<UOM>" + UnitOfMeasure + "</UOM>" 					 						
			
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "</LINE>"	
			
			return LocalBuildSingleLineXml 

		Load1SourceMulipleLineItems is a DerivedField	 
			type is XMLDocument	

			initialize LocalBuildMultilLineXml 		
			for each TaxLineItemsRel 
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<LINE"
				if (each.LineItemNumber entered)
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + " ID=" + DoubleQuote + each.LineItemNumber  + DoubleQuote + ">"					
				if (each.TaxableAmount entered)
					LocalAmount = each.TaxableAmount
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<GROSS_AMOUNT>" + DerivedAmountNoComma + "</GROSS_AMOUNT>" 				 	
		
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<LINE_NUMBER>" + each.LineItemNumber + "</LINE_NUMBER>" 		
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UNIQUE_LINE_NUMBER>" + each.LineItemNumber  + "</UNIQUE_LINE_NUMBER>"
				
				if (each.ChargedTax entered)		 
					LocalAmount = each.ChargedTax
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<VENDOR_TAX>" + DerivedAmountNoComma + "</VENDOR_TAX>" 
					
				if (each.ProductTaxCategory entered)
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<PRODUCT_CODE>" + each.ProductTaxCategory + "</PRODUCT_CODE>" 
					  
				if (IsCredit)				 
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<IS_CREDIT>" + "true" + "</IS_CREDIT>" 
								
				if (each.CommodityCode entered)		
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<COMMODITY_CODE>" + each.LineItemNumber + "</COMMODITY_CODE>"
									
				if (DeliveryTerms entered)
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<DELIVERY_TERMS>" + DeliveryTerms + "</DELIVERY_TERMS>"
					


					
				if (Description entered)
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<DESCRIPTION>" + Description + "</DESCRIPTION>"	
					


			





				LocalTrigger = each.Load1SourceUserAttributesFrDerived			 
				LocalLineTaxAttribute50 = each.TransientUserElement50
				LocalTrigger = EditLineItemUserElements					
				if (LocalLineTaxAttribute50.UserElement[1].Number entered)			
					initialize Idx
					while (Idx < 25)	
						Idx +=1
						if (each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Number entered)
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<USER_ELEMENT>"
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<NAME>" + each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Name + "</NAME>"	
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<VALUE>" + each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Value + "</VALUE>"						
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</USER_ELEMENT>" 			
							

				if (each.ShipToAddress entered)
					LocalPostalAddress = each.ShipToAddress
				else	
					LocalPostalAddress = ShipToAddress			
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + LoadShipToAddress
				
				if (each.ShipFromAddress entered)
					LocalPostalAddress = each.ShipFromAddress
				else	
					LocalPostalAddress = ShipFromAddress 									
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + LoadShipFromAddress
				



				if (each.Quantity entered
				and each.VolumeUnitOfMeasure entered)	
					LocalAmount = each.Quantity
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<AMOUNT>" + DerivedAmountNoComma + "</AMOUNT>" 
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UOM>" + each.VolumeUnitOfMeasure + "</UOM>" 				 						
				
				LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</LINE>"	
				
			return LocalBuildMultilLineXml
			




			
		LoadShipToAddress is a DerivedField	 
			type is XMLDocument	
			restricted
			initialize LocalDestAddressXml
			OutputTaxCodeDescription = TaxCodeEntered.Description		
			LocalTrigger 			 = ParseTaxCodeDescription
			if (TaxCodeEntered not entered   
			or 	NbrOfRightSlashes = 0)
				ShipToCountry 		= LocalPostalAddress.Country
				LocalParsedState  	= LocalPostalAddress.StateProvince	
				LocalParsedCity 	= LocalPostalAddress.Municipality	
				LocalParsedCounty	= LocalPostalAddress.County 	
			if (ShipToCountry not entered)
				ShipToCountry 		= LocalPostalAddress.Country 
							
			if (LocalPostalAddress.Country entered)
				LocalDestAddressXml = "<SHIP_TO>"
				LocalDestAddressXml = LocalDestAddressXml + "<COUNTRY>" + ShipToCountry + "</COUNTRY>"	
				if (LocalPostalAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<CITY>" + LocalParsedCity + "</CITY>"						
				if (LocalPostalAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<STATE>" + LocalParsedState + "</STATE>"	
				if (LocalPostalAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<COUNTY>" + LocalParsedCounty + "</COUNTY>"							
				if (LocalPostalAddress.PostalCode entered)
					LocalDestAddressXml = LocalDestAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode + "</POSTCODE>"					
				LocalDestAddressXml = LocalDestAddressXml + "</SHIP_TO>" 
				
			return LocalDestAddressXml  





		LoadShipFromAddress is a DerivedField	
			type is XMLDocument
			restricted	
			initialize LocalFromAddressXml 
			if (LocalPostalAddress.Country entered)
				LocalFromAddressXml = "<SHIP_FROM>"			
				LocalFromAddressXml = LocalFromAddressXml + "<COUNTRY>" + LocalPostalAddress.Country + "</COUNTRY>"	
				if (LocalPostalAddress.Municipality entered)
					LocalFromAddressXml = LocalFromAddressXml + "<CITY>" + LocalPostalAddress.Municipality + "</CITY>"						
				if (LocalPostalAddress.StateProvince entered)
					LocalFromAddressXml = LocalFromAddressXml + "<STATE>" + LocalPostalAddress.StateProvince + "</STATE>"	
				if (LocalPostalAddress.County entered)
					LocalFromAddressXml = LocalFromAddressXml + "<COUNTY>" + LocalPostalAddress.County + "</COUNTY>"							
				if (LocalPostalAddress.PostalCode entered)
					LocalFromAddressXml = LocalFromAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode + "</POSTCODE>"					
			
				LocalFromAddressXml = LocalFromAddressXml + "</SHIP_FROM>" 
				
			return LocalFromAddressXml  

		LoadLineUserElements is a DerivedField
			type is XMLDocument	
			restricted
			initialize LocalXmlString
			initialize LocalLineTaxAttribute50


			if  (!SendMultLineItems			
			and  UserElementLevel.Line
			and  UserElementGroup.UserElement[1].Number entered)
				LocalLineTaxAttribute50 = UserElementGroup			
				if (LocalLineTaxAttribute50.UserElement[1].Number entered)				
					initialize Idx
					while (Idx < 25)
						Idx +=1
						if (LocalLineTaxAttribute50.UserElement[Idx].Number entered)
							LocalXmlString = LocalXmlString + "<USER_ELEMENT>"
							LocalXmlString = LocalXmlString + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
							LocalXmlString = LocalXmlString + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
							LocalXmlString = LocalXmlString + "</USER_ELEMENT>" 
			else

			if (TaxLineItemsRel exist)
				FirstLineItemNumberSeq = first TaxLineItemsRel.TaxLineItem.Sequence	 
				for each FirstTaxLineItemRel
					DisplayMonitor = DisplayMonitor + "[1312]GotHere"
					LocalTrigger = each.Load1SourceUserAttributesFrDerived		
					LocalLineTaxAttribute50 = each.TransientUserElement50
					DisplayMonitor = DisplayMonitor + "LocalLineTaxAttribute50" + LocalLineTaxAttribute50
					LocalTrigger = EditLineItemUserElements

					if (LocalLineTaxAttribute50.UserElement[1].Number entered)
						initialize Idx	 
						while (Idx < 25)
							Idx +=1
							if (LocalLineTaxAttribute50.UserElement[Idx].Number not entered)
								end while
							else	
								LocalXmlString = LocalXmlString + "<USER_ELEMENT>"
								LocalXmlString = LocalXmlString + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
								LocalXmlString = LocalXmlString + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
								LocalXmlString = LocalXmlString + "</USER_ELEMENT>" 									
			return LocalXmlString	

			






































		DerivedOneSourceRequest is a DerivedField	 
			type is XMLDocument	
			restricted
			initialize LocalXml
		
			LocalXml = LocalXml + "<INVOICE>"

			LocalXml = LocalXml + DerivedInvoiceHeaderGenericXml		 						 
			
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)												 
				LocalXml = LocalXml + Load1SourceMulipleLineItems
			else
				LocalXml = LocalXml + Load1SourceSingleLineItem	 		 
					 			
			LocalXml = LocalXml + "</INVOICE>"
			return LocalXml	
			




		LoadResultsForGeneric is a DerivedField	

			type is Alpha 1
			restricted
			initialize TaxingJurisdiction
			if (OneSourceVersionType.Generic)
				LocalActionExecuted = CallOneSourceGenericText

				ResultsCount 				= MyXMLDocument select "count(//Envelope/Body/taxCalculationResponse/OUTDATA)"							 
				SuccessStatus 				= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_SUCCESS"
				IsSuccess					= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_SUCCESS"
				IsPartialSuccess			= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_PARTIAL_SUCCESS"	 

				InvoiceIsSuccess		 	= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/REQUEST_STATUS/IS_SUCCESS"			 		
				InvoiceIsPartialSuccess		= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/REQUEST_STATUS/IS_PARTIAL_SUCCESS"
				NbrOfInvoiceLevelMessages	= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/MESSAGE"
				TaxAmount					= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/TOTAL_TAX_AMOUNT"		 


				InvoiceLines				= MyXMLDocument select "count(//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/LINE)"
				LocalNbrInvLines			= MyXMLDocument select "count(//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/LINE)"	
				

				InvLevelUsrElements			= MyXMLDocument select "count(//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT)"  				
				DisplayMonitor = DisplayMonitor + DisplayZoneLevelHeader
				DisplayMonitor = DisplayMonitor + ZoneColumnHeader
				initialize Attr						 
				LocalTrigger = ClearAttributeValues
				if (InvLevelUsrElements > 0)
					Attr = 1							
					while (InvLevelUsrElements >= Attr)	 
						OutputUserElementLoaded = "I"							
						LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							 
						LocalReturnedUserElement.UserElement[Attr].Name 	 = MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT[<Attr>]/NAME"   
						LocalReturnedUserElement.UserElement[Attr].Value	 = MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT[<Attr>]/VALUE"  												
						DisplayMonitor = DisplayMonitor + DisplayZoneLevelDetail
						Attr += 1	
					if (OutputUserElementLoaded.InvoiceLevel)
						LocalTrigger2 = LoadAttributes																 
						OutputUserElementLoaded = blank



				LineIdx = 1
				while (LocalNbrInvLines >= LineIdx)	 
					LineNbr						= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/LINE[<LineIdx>]/@ID"
					DistLine					= MyXMLDocument select "//Envelope/Body/taxCalculationResponse/OUTDATA/INVOICE/LINE[<LineIdx>]"
					EachLineId	 				= DistLine select "/LINE/@ID"	 
					EachLineItemSequence		= DistLine select "/LINE/@ID"						 
					EachLineItemNumber			= DistLine select "/LINE/LINE_NUMBER"				 
					EachLineUniqueID			= DistLine select "/LINE/LINE_NUMBER"				 
					InvoiceLineId				= DistLine select "/LINE/@ID"	 
					InvoiceLineNumber			= DistLine select "/LINE/LINE_NUMBER"
					NbrOfInvoiceLineMessages	= DistLine select "/LINE/MESSAGE"
					InvoiceLineTotalTax			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
					EachLineTaxAmount 			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"		
					TaxAmount					= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
					DistLineTaxSummary			= DistLine select "/LINE/TAX_SUMMARY"
					OutputTaxRate				= DistLine select "/LINE/TAX_SUMMARY/TAX_RATE"
					TaxRate						= DistLine select "/LINE/TAX_SUMMARY/EFFECTIVE_TAX_RATE"
					EachLineTaxExempt			= DistLine select "/LINE/TAX_SUMMARY/EXEMPT_AMOUNT"	
					EachLineTaxableBasis		= DistLine select "/LINE/TAX_SUMMARY/TAXABLE_BASIS"	
															
					NbrOfLineUserElements		= DistLine select "count(/LINE/USER_ELEMENT)" 			 
					LocalTrigger2 = ClearTaxTableOut


					LineTaxIdx = 1
					NbrOfInvoiceLineTaxes		= DistLine select "count(/LINE/TAX)"		
					while (NbrOfInvoiceLineTaxes >= LineTaxIdx)	
						SabrixReturnedTaxCode 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE" 				
						LocalLineTaxCode	 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE" 		
						AdminZoneLevel			= DistLine select "/LINE/TAX[<LineTaxIdx>]/ADMIN_ZONE_LEVEL" 
						AdminZoneLevelTaxRate	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_RATE"
						ZoneLevel 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_LEVEL"	
						ZoneName 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_NAME"
						ZoneLevelTaxAmount		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_AMOUNT/DOCUMENT_AMOUNT"
						DistLineTaxableState	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_STATE"
						DistLineTaxableCounty	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTY"
						DistLineTaxableCity		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_CITY"
						TaxingJurisdiction 		= DistLineTaxableState + "/" + DistLineTaxableCounty+ "/" + DistLineTaxableCity 
						LocalCity 				= DistLineTaxableCity
						LocalState				= DistLineTaxableState
						LocalZip				= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_POSTCODE"
						LocalCountry 			= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTRY"
						TaxableCity 			= DistLineTaxableCity
						TaxableState			= DistLineTaxableState
						TaxableCounty			= DistLineTaxableCounty	
						if (LocalLineTaxCode entered)												
							LocalTrigger1 = CreateTaxCodeMaster							
						EachLineTaxExempt		= DistLine select "/LINE/TAX_SUMMARY/EXEMPT_AMOUNT"	
						EachLineTaxableBasis	= DistLine select "/LINE/TAX_SUMMARY/TAXABLE_BASIS"	
														
						if (ReturnOneSourceTaxIn.Detail)				 
							LocalTrigger =  LoadTaxTableZoneLevels
												



						NbrOfInvoiceLineMessages	= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"
						DistLineTaxMessages			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"																									
						LineTaxMsgIdx = 1
						while (DistLineTaxMessages >= LineTaxMsgIdx)	 				
							DistLineTaxMessageText		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"						
							SabrixReturnMessage			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"
							SabrixErrorSeverity 		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/SEVERITY"
							OneSourceInformationMessage = DistLineTaxMessageText	
							LineTaxMsgIdx = LineTaxMsgIdx + 1
	


						if (NbrOfLineUserElements > 0)
							LocalTrigger = ClearAttributeValues 		 
							Attr = 1						 			 
							OutputUserElementLoaded = blank
							while (NbrOfLineUserElements >= Attr)			 					
								OutputUserElementLoaded = "L"
								LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 											 
								LocalReturnedUserElement.UserElement[Attr].Name 	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/NAME"  	 
								LocalReturnedUserElement.UserElement[Attr].Value	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/VALUE"	 						
								Attr += 1	
							if (OutputUserElementLoaded.LineLevel)			 
								LocalTrigger2 = LoadAttributes				 
								OutputUserElementLoaded = blank							

															
						LineTaxIdx = LineTaxIdx + 1		
					



					if (!ReturnOneSourceTaxIn.Detail)				 
						LocalTrigger2 = ClearTaxTableOut	 		 
					ReturnedTaxCode = DerivedLineItemTaxCode			 



					if (UpdateLineItems      
					and Update1SourceTaxLineItemRel exist)	
						invoke Update Update1SourceTaxLineItemRel
							invoked.CalculatedTaxAmt		= EachLineTaxAmount	 	 
							invoked.TaxRate					= OutputTaxRate
							invoked.TaxingJurisdiction  	= TaxingJurisdiction
							if (invoked.TaxableAmount not entered)
								invoked.TaxableAmount		= TaxableAmount	
							invoked.ThirdParty				= "S"		
							invoked.TaxResult				= SabrixReturnMessage	 
							invoked.ReturnedErrorMessage 	= SabrixReturnMessage	
							invoked.ReturnedErpTaxCode		= SabrixReturnedTaxCode	
							invoked.ReturnedExemptTaxable	= EachLineTaxExempt		
							invoked.ReturnedTaxableBasis	= EachLineTaxableBasis  

							invoked.CapturedXml				= DistLine
						invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		 
							invoked.PrmTaxTable				= TaxTable	




					LineIdx = LineIdx + 1

		

				TotalTaxAmount							= TaxAmount												
				LocalTaxableAmount						= DistLine select "/LINE/TAX_SUMMARY/TAXABLE_BASIS"		
				if (InvoiceAmount entered)
					LocalInvoiceAmount					= InvoiceAmount
				else			
					LocalInvoiceAmount					= LocalTaxableAmount + TaxAmount						

												
			return blank	


		ClearTaxTableOut is a DerivedField
			type is Alpha 1
			restricted
			initialize TblIdx
			initialize ReturnedTaxTable.TaxTableOutput						 
			while (TblIdx < 8)
				TblIdx += 1
				initialize ReturnedTaxTable.TaxTableOutput[TblIdx]			
			initialize TblIdx
			return blank

		ClearAttributeValues is a DerivedField
			type is Alpha 1
			restricted
			initialize Attr
			initialize ReturnedUserElement 
			initialize LocalReturnedUserElement	
			initialize ReturnedErrorMessage		 
			while (Attr < 25)
				Attr += 1
 				initialize ReturnedUserElement.UserElement[Attr].Number
  				initialize LocalReturnedUserElement.UserElement[Attr].Number  	 							 
				initialize ReturnedUserElement.UserElement[Attr].Name 	 
  				initialize LocalReturnedUserElement.UserElement[Attr].Name 	  
				initialize ReturnedUserElement.UserElement[Attr].Value	 
  				initialize LocalReturnedUserElement.UserElement[Attr].Value	  	
			return blank

		PartialValidationAddress is a StringField	 
			type is Alpha 60
			restricted
			ValidationPostalAddress.DeliveryAddress.AddressLine1
			" "
			ValidationPostalAddress.Municipality 
			","
			ValidationPostalAddress.StateProvince 
			" "
			ValidationPostalAddress.PostalCode
			" "
			ValidationPostalAddress.County			
			" "
			ValidationPostalAddress.Country
						




		WebserviceDebugToggleMsg is a DerivedField	  	
			type is MessageField
			restricted
			if (WebserviceDebugOn)					 
				return WebserviceDebugOnMsg			
			return WebserviceDebugOffMsg		

		WebserviceDebugOnMsg is a MessageField			
			"WebserviceDebug_\On"   
		WebserviceDebugOffMsg is a MessageField			
			"WebserviceDebug_\Off"   					

		GetConversionRate is a DerivedField				
			type is like CurrencyExchangeRate 
			default label is untranslatable
			restricted									
			LocalComment = LocalComment + "<pre>" + "==================================================================" + "<br>"	
			LocalComment = LocalComment + "TimeStamp: " + DerivedTimestamp + "<br>"		
			LocalComment = LocalComment + "=================================================================="	+ "<br>"				
			LocalComment = LocalComment + "[2433]GetConversionRateExecuted....:" + "<br>"  				
			LocalComment = LocalComment + "[2434]Begin---------GetConversionRateRoutine-----------------------"	+ "<br>"	
 
			initialize LocalCurrencyExchange

			LocalComment = LocalComment + "[2438]LocalFromCurrency..............:" + LocalFromCurrency + "<br>"	
			LocalComment = LocalComment + "[2439]CurrencyCode............:" + CurrencyCode + "<br>"	





			if (LocalFromCurrency not entered)				
				LocalFromCurrency = CurrencyCode		

			LocalToCurrency					= LegalEntity.FunctionalCurrency
			LocalComment = LocalComment + "[2449]TaxEntity.FunctionalCurrency...:" + LegalEntity.FunctionalCurrency + "<br>"
			LocalTransactionAmount			= InvoiceAmount
			LocalComment = LocalComment + "[2451]LocalTransactionAmount.............:" + LocalTransactionAmount + "<br>"
			if (LocalInitializeCurrencyRate)
				initialize LocalCurrencyExchange.EnteredCurrencyRate

			LocalExchangeDate				 = current corporate date												
			LocalFromCurrency 				 = CurrencyCode
			LocalCurrencyExchange.ToCurrency = LegalEntity.FunctionalCurrency						
			LocalOutputCurrencyAmount		 = LocalCurrencyExchange.OutputCurrencyAmount		
			LocalCurrencyRate				 = LocalCurrencyExchange.OutputCurrencyRate 	
			LocalComment = LocalComment + "[2459]-------------AfterTriggerHasExecutede----------------------" + "<br>"				
			LocalComment = LocalComment + "[2461]LocalFromCurrency........................:" + LocalFromCurrency + "<br>"
			LocalComment = LocalComment + "[2462]CurrencyExchange.FromCurrency............:" + LocalCurrencyExchange.FromCurrency 							+ "<br>"
			LocalComment = LocalComment + "[2463]CurrencyExchange.ToCurrency..............:" + LocalCurrencyExchange.ToCurrency 							+ "<br>"
			LocalComment = LocalComment + "[2464]CurrencyExchange.ExchangeDate............:" + LocalCurrencyExchange.ExchangeDate							+ "<br>"
			LocalComment = LocalComment + "[2465]CurrencyExchange.TransactionAmount.......:" + LocalCurrencyExchange.TransactionAmount 					+ "<br>"
			LocalComment = LocalComment + "[2466]CurrencyExchange.EnteredCurrencyRate.....:" + LocalCurrencyExchange.EnteredCurrencyRate					+ "<br>"
			LocalComment = LocalComment + "[2467]CurrencyExchange.EnteredCurrencyAmount...:" + LocalCurrencyExchange.EnteredCurrencyAmount 				+ "<br>"
			LocalComment = LocalComment + "[2468]CurrencyExchange.OutputCurrencyAmount....:" + LocalCurrencyExchange.OutputCurrencyAmount					+ "<br>"	
			LocalComment = LocalComment + "[2469]LocalCurrencyExchange.OutputCurrencyRate.:" + LocalCurrencyExchange.OutputCurrencyRate 					+ "<br>"
			LocalComment = LocalComment + "[2470]LocalCurrencyExchange.OutputCurrencyRate.:" + LocalOutputCurrencyAmount 									+ "<br>"
			LocalComment = LocalComment + "[2471]LocalCurrencyExchange.OutputCurrencyRate.:" + LocalCurrencyRate 											+ "<br>"
			LocalComment = LocalComment + "[2472]End---------GetConversionRateRoutine----------------------"		                                        + "<br>"

			return LocalCurrencyRate						

			

	Form Invokes

		OAuthRecord
			if (OAuthRel exists)
				invoke Update OAuthRel
			else
				invoke Create OAuth	 
					invoked.OAuth				= "OneSource"
					invoked.Type 				= 5 
					
		ConfigurationParameterRecord
			if (OneSourceConfigParamRel exists)
				invoke Update OneSourceConfigParamRel
			else
				invoke Create ConfigurationParameter	 
        			invoked.ConfigurationParameter.ConfigurationID	= "config"
					invoked.ConfigurationParameter.Name				= "ONESOURCE.WSI.WSDL"    
				
		ConfigurationParameterDebugRecord	
			if (WebservDebugConfigParmRel exists)
				invoke Update WebservDebugConfigParmRel
			else
				invoke Create ConfigurationParameter	 
        			invoked.ConfigurationParameter.ConfigurationID	= "webservs"
        			invoked.ConfigurationParameter.Name				= "ws.log.level"
					invoked.Value 									= "7"	 
				        									
	Rule Blocks	
		LoadTaxTable  			   
			if (TblIdx < 8)
				TblIdx += 1
				OutputTaxTable.TaxTableOutput[TblIdx].TaxCode  	 		= TaxCodeEntered		 		 
				OutputTaxTable.TaxTableOutput[TblIdx].TaxRate  			= TotalTaxRate 
				OutputTaxTable.TaxTableOutput[TblIdx].TaxAmount		 	= ZoneLevelTaxAmount	 
				OutputTaxTable.TaxTableOutput[TblIdx].JurisdictionLevel	= ZoneLevel
				OutputTaxTable.TaxTableOutput[TblIdx].ImpositionType	= ZoneLevelAuthorityType


		LoadAttributes


			initialize Attr
			ReturnedUserElement = LocalReturnedUserElement			
			if (LocalReturnedUserElement.UserElement[1].Number entered)
				while (Attr < 25)
					Attr += 1






					LocalContinue = true
					LocalInvoiceNumberKey 						= InvoiceNumber	
					LocalAttributeNameKey						= LocalReturnedUserElement.UserElement[Attr].Name
					if (OutputUserElementLoaded.LineLevel)		 	 
						LocalInvoiceNumberKey 					= InvoiceNumber
						LocalLineNumberKey 						= LineNumber
					else
					if (OutputUserElementLoaded.InvoiceLevel)
						LocalInvoiceNumberKey 					= blank	
						LocalLineNumberKey						= blank
					if (CheckByAttributeNameNoDupsRel exist) 
						LocalContinue = false



					if (LocalReturnedUserElement.UserElement[Attr].Number not entered)
						end while
					else	
					if (LocalReturnedUserElement.UserElement[Attr].Number entered
					and LocalContinue)



						invoke Create OneSourceUserAttribute	 
							invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGrp
							invoked.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID

							invoked.OneSourceUserAttribute.InvoiceNumber 			= InvoiceNumber	
							if (OutputUserElementLoaded.LineLevel)		 	 
								invoked.OneSourceUserAttribute.LineNumber 			= LineNumber
								invoked.Level										= "L"
							else
							if (OutputUserElementLoaded.InvoiceLevel)
								invoked.OneSourceUserAttribute.LineNumber 			= blank	
								invoked.Level										= blank
							invoked.OneSourceUserAttribute.Type						= "O"
							invoked.RelatedObjectReference							= reference to this instance	
							invoked.UserAttributeNumber								= LocalReturnedUserElement.UserElement[Attr].Number
							invoked.UserAttributeName								= LocalReturnedUserElement.UserElement[Attr].Name
							invoked.UserAttributeValue								= LocalReturnedUserElement.UserElement[Attr].Value			 
					 		invoked.Description										= Description				
							invoked.OriginalInvoiceNumber 							= OriginalInvoiceNumber		
							invoked.UniqueLineNumber 								= UniqueLineNumber			

		DisplayReturnedUserAttributes  
			initialize Attr
			DisplayMonitor = DisplayMonitor + BeginReturnedAttributes	
			DisplayMonitor = DisplayMonitor + AttributeHeader			 
			if (LocalReturnedUserElement.UserElement[1].Number entered)	
				while (Attr < 25)
					Attr += 1
					if (LocalReturnedUserElement.UserElement[Attr].Number not entered)
						DisplayMonitor = DisplayMonitor + EndTableForAttributes	   	
						end while
					else	
					if (LocalReturnedUserElement.UserElement[Attr].Number entered)
						AttributeNumber = LocalReturnedUserElement.UserElement[Attr].Number 
						AttributeName   = LocalReturnedUserElement.UserElement[Attr].Name 
						AttributeValue 	= LocalReturnedUserElement.UserElement[Attr].Value
						DisplayField = "Attribute Number:" + AttributeNumber
						DisplayField = "Attribute Name  :" + AttributeName 
						DisplayField = "Attribute Value :" + AttributeValue
						DisplayMonitor = DisplayMonitor + AttributeDetail							
			else
			if (LocalOneSourceTaxAttribute.UserElement[1].Number entered)		
				while (Attr < 25)
					Attr += 1
					if (LocalOneSourceTaxAttribute.UserElement[Attr].Number not entered)
						DisplayMonitor = DisplayMonitor + EndTableForAttributes	  	
						end while
					else	
					if (LocalOneSourceTaxAttribute.UserElement[Attr].Number entered)
						AttributeNumber = LocalOneSourceTaxAttribute.UserElement[Attr].Number 
						AttributeName   = LocalOneSourceTaxAttribute.UserElement[Attr].Name 
						AttributeValue 	= LocalOneSourceTaxAttribute.UserElement[Attr].Value														
						DisplayField = "Attribute Number:" + AttributeNumber 
						DisplayField = "Attribute Name  :" + AttributeName
						DisplayField = "Attribute Value :" + AttributeValue
						DisplayMonitor = DisplayMonitor + AttributeDetail	

			DisplayMonitor = DisplayMonitor + EndTableForAttributes	   	
									
																		

		LoadOneSourceTaxAttribute  	 
			initialize LocalOneSourceTaxAttribute
			AttributesFound = false

			if (TaxAttributesRel exists)				 

				for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
					if (each.Value entered
					or  each.LoadDynamicField entered)
						Idx +=1
						LocalOneSourceTaxAttribute.UserElement[Idx].Number		= Idx 	
						LocalOneSourceTaxAttribute.UserElement[Idx].Name		= each.UserAttributeName	
						if (each.LoadDynamicField.ValueIs.TaxEntity)
							LocalOneSourceTaxAttribute.UserElement[Idx].Value	= LegalEntity
						else	
						if (each.LoadDynamicField.ValueIs.PaymentAmount)
							LocalOneSourceTaxAttribute.UserElement[Idx].Value	= TaxableAmount	
						else 
						if (each.LoadDynamicField.ValueIs.PostingDate
						or  each.LoadDynamicField.ValueIs.PaymentDate
						or  each.LoadDynamicField.ValueIs.TaxDate)
							LocalOneSourceTaxAttribute.UserElement[Idx].Value	= current corporate date	
						else	
						if (each.LoadDynamicField.ValueIs.UNSPSC
						or  each.LoadDynamicField.ValueIs.CommodityCode)									
							LocalOneSourceTaxAttribute.UserElement[Idx].Value	= CommodityCode				
						else

						if (each.LoadDynamicField.ValueIs.Longitude)										
							if (ShipToAddress.Country entered												
							and ShipToAddress.GeoLongitude entered)											
								LocalOneSourceTaxAttribute.UserElement[Idx].Value	= ShipToAddress.GeoLongitude	
						else
						if (each.LoadDynamicField.ValueIs.Latitude)											
							if (ShipToAddress.Country entered												
							and ShipToAddress.GeoLatitude entered)											
								LocalOneSourceTaxAttribute.UserElement[Idx].Value	= ShipToAddress.GeoLatitude		
						else
						if (each.LoadDynamicField.ValueIs.Altitude)											
							if (ShipToAddress.Country entered												
							and ShipToAddress.GeoAltitude entered)											
								LocalOneSourceTaxAttribute.UserElement[Idx].Value	= ShipToAddress.GeoAltitude		

						else	
							LocalOneSourceTaxAttribute.UserElement[Idx].Value	= each.Value
			else

			if (InputUserAttributesRel exist)
				initialize DisplayMonitor
				initialize Idx
				DisplayMonitor = "[1248]InputUserAttributesExist"					
				for each InputUserAttributesRel 
					if (each.UserAttributeName entered)
						Idx +=1
						LocalOneSourceTaxAttribute.UserElement[Idx].Number		= Idx 	 
						LocalOneSourceTaxAttribute.UserElement[Idx].Name		= each.UserAttributeName	
						LocalOneSourceTaxAttribute.UserElement[Idx].Value		= each.UserAttributeValue


			

			if (LocalOneSourceTaxAttribute.UserElement[1].Number entered)	
				AttributesFound = true
			else	
				AttributesFound = false	
			
			if (SendingToCalculateTax)
				LocalSkipEditHere = true
			else	
				LocalTrigger = EditUserElements  				



		LoadSingleLineItem  		 	 




			display "ToDo:Test.Later"



			DisplayMonitor = DisplayMonitor + "[TLC-1]SabrixClient:LoadOneLine..." 

			EachXmlLine = 1
			invoke Create IndataTypeINVOICELINE
				invoked.OneSourceTaxCalculation			= "1"
				invoked.TaxCalculationRequest			= "1"
				invoked.IndataType             			= "1"
				invoked.IndataTypeINVOICE      			= "1"
				invoked.IndataTypeINVOICELINE			= "1"
				invoked.PRODUCTCODE               		= CommodityCode				 
				invoked.GROSSAMOUNT						= TaxableAmount				 
				invoked.LINENUMBER						= LineNumber				 
				invoked.IndataTypeINVOICELINE0          = LineNumber				 
				if (UseTaxAmountAsInput)                                             
					invoked.VENDORTAX					= TaxAmount	                 
																					 
				LocalInvoiceNumber						= InvoiceNumber				 
				LocalInvoiceAmount						= InvoiceAmount				 
				LocalTaxableAmount						= TaxableAmount				 
				LocalLineNumber							= LineNumber				 
				invoked.ISCREDIT						= IsCredit					 
				if (EAMCommodityCode entered)										 
					invoked.COMMODITYCODE				= EAMCommodityCode	         
				else                                                                 
				if (CommodityCode entered)                                           
					invoked.COMMODITYCODE				= CommodityCode				 
				if (DeliveryTerms entered)                                           
					invoked.DELIVERYTERMS				= DeliveryTerms				 
				if (PartNumber entered)                                              
					invoked.PARTNUMBER					= PartNumber				 
				if (Description entered)	                                         
					invoked.DESCRIPTION					= Description				 
				if (UniqueLineNumber entered)	                                     
					invoked.UNIQUELINENUMBER			= UniqueLineNumber			 	 													
				
			if (QuantityAmount entered)				
				invoke Create IndataTypeINVOICELINEQUANTITIES
					invoked.OneSourceTaxCalculation					= "1"
					invoked.TaxCalculationRequest					= "1"
					invoked.IndataType             					= "1"
					invoked.IndataTypeINVOICE      					= "1"
					invoked.IndataTypeINVOICELINE					= "1"	
					invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
				
				invoke Create IndataTypeINVOICELINEQUANTITIESQUANTITY
					invoked.OneSourceTaxCalculation					= "1"
					invoked.TaxCalculationRequest					= "1"
					invoked.IndataType             					= "1"
					invoked.IndataTypeINVOICE      					= "1"
					invoked.IndataTypeINVOICELINE					= "1"	
					invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
					invoked.IndataTypeINVOICELINEQUANTITIESQUANTITY = "1"
					invoked.AMOUNT									= QuantityAmount	 
					invoked.UOM										= UnitOfMeasure		 


			if (TaxLineItemsRel exist)	 
				for each TaxLineItemsRel
					LocalOneSourceTaxAttribute = each.LineItemUserFieldsRel.UserElementGroup
					Idx = 0
					while (Idx < 25)
						Idx +=1
						if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)
							invoke Create IndataTypeINVOICELINEUSERELEMENT
								invoked.OneSourceTaxCalculation				= "1"
								invoked.TaxCalculationRequest				= "1"				
								invoked.IndataType             				= "1"
								invoked.IndataTypeINVOICE      				= "1"
								invoked.IndataTypeINVOICELINE				= "1"	
								invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalOneSourceTaxAttribute.UserElement[Idx].Number		 
								invoked.NAME								= LocalOneSourceTaxAttribute.UserElement[Idx].Name		 
								invoked.VALUE								= LocalOneSourceTaxAttribute.UserElement[Idx].Value											
			else				
			if (UserElementLevel.Line)
				Idx = 0
				while (Idx < 25)
					Idx +=1
					if (UserElementGroup.UserElement[Idx].Number entered)
						invoke Create IndataTypeINVOICELINEUSERELEMENT
							invoked.OneSourceTaxCalculation				= "1"
							invoked.TaxCalculationRequest				= "1"				
							invoked.IndataType             				= "1"
							invoked.IndataTypeINVOICE      				= "1"
							invoked.IndataTypeINVOICELINE				= "1"	
							invoked.IndataTypeINVOICELINEUSERELEMENT 	= UserElementGroup.UserElement[Idx].Number		 
							invoked.NAME								= UserElementGroup.UserElement[Idx].Name		 
							invoked.VALUE								= UserElementGroup.UserElement[Idx].Value		 
													
			if (TaxCodeEntered entered)
				OutputTaxCodeDescription = TaxCodeEntered.Description
				TaxingJurisdiction = ParseTaxCodeDescription
				if (ShipToAddressFound
				and LocalParsedCountry not entered)
					LocalParsedCountry = "US"	
					
			if (TaxCodeEntered entered
			and ShipToAddressFound)
				LocalContinue = true		
			else
			if (ShipToAddress.Country entered)
				ShipToAddressFound = true 
				LocalParsedCountry					= ShipToAddress.Country			 
				LocalParsedState					= ShipToAddress.StateProvince  
				LocalParsedCity						= ShipToAddress.Municipality 	 
				LocalParsedCounty					= ShipToAddress.County 	



			constraint (ShipToAddressFound)
				"ShipToTaxCodeOrAddressFromLineItemOrHeaderRequired,HdrTaxCode:<TaxCodeEntered>,HdrCountry:<ShipToAddress.Country>."
									
																						
			PostalCodeLast4 = DerivedShipToZipLast4
			PostalCodeLast4 = ShipToAddress.PostalCode[6:10] - "-"
											
			invoke Create IndataTypeINVOICELINESHIPTO
				invoked.OneSourceTaxCalculation			= "1"
				invoked.TaxCalculationRequest			= "1"
				invoked.IndataType             			= "1"
				invoked.IndataTypeINVOICE      			= "1"
				invoked.IndataTypeINVOICELINE			= "1"	
				invoked.IndataTypeINVOICELINESHIPTO 	= "1"
				invoked.COUNTRY							= LocalParsedCountry	
				invoked.STATE							= LocalParsedState	
				invoked.CITY							= LocalParsedCity	
				invoked.COUNTY							= LocalParsedCounty	
				invoked.POSTCODE						= PostalCodeFirst5	
				invoked.GEOCODE							= PostalCodeLast4	//ShipToAddress.PostalCode[6:10] - "-" 
								
			if (ShipFromAddress.Country entered)
				invoke Create IndataTypeINVOICELINESHIPFROM
					invoked.OneSourceTaxCalculation			= "1"
					invoked.TaxCalculationRequest			= "1"
					invoked.IndataType             			= "1"
					invoked.IndataTypeINVOICE      			= "1"
					invoked.IndataTypeINVOICELINE			= "1"	
					invoked.IndataTypeINVOICELINESHIPFROM 	= "1"
					invoked.COUNTRY							= ShipFromAddress.Country		 
					invoked.STATE							= ShipFromAddress.StateProvince  
					invoked.CITY							= ShipFromAddress.Municipality 	 
					invoked.COUNTY							= ShipFromAddress.County 	
					invoked.POSTCODE						= ShipFromAddress.PostalCode[1:5]
					invoked.GEOCODE							= ShipFromAddress.PostalCode[6:10] - "-" 	
																																					
		LoadResults	



			if (LocalActionExecuted not entered)
				LocalActionExecuted = CallOneSourceText


			SuccessStatus = false
			IsSuccess = false
			initialize SabrixErrorSeverity
			
			invoke Delete OutputUserAttributesRel

			if (UseNewResponseCode)

				include SelectResponseUsingXpath
			else


				for each(TaxCalculationResponse) MyResponse.TaxCalculationResponse set

					for each(OutdataType) each.OutdataType set

						for each(REQUESTSTATUS) each.OutdataTypeREQUESTSTATUS set
							SuccessStatus = each(REQUESTSTATUS).ISSUCCESS
							IsSuccess	  = each(REQUESTSTATUS).ISSUCCESS

							
				for each(TaxCalculationResponse) MyResponse.TaxCalculationResponse set

					for each(OutdataType) each.OutdataType set

						for each(Invoice) each.OutdataTypeINVOICE  set

							for each(REQUESTSTATUS) each.OutdataTypeINVOICEREQUESTSTATUS set
							for each(MESSAGE) each.OutdataTypeINVOICEMESSAGE set
								SabrixReturnMessage = each(MESSAGE).MESSAGETEXT
								OneSourceInformationMessage = each(MESSAGE).MESSAGETEXT		 
								TotalTaxAmount = each(Invoice).TOTALTAXAMOUNT

							LocalTrigger = ClearAttributeValues
							initialize Attr	
							for each(USERELEMENT) each.OutdataTypeINVOICEUSERELEMENT set
								display "[TLC:SabrixClient]each(USERELEMENT).NAME:<each(USERELEMENT).NAME>" 		
								display "[TLC:SabrixClient]each(USERELEMENT).VALUE:<each(USERELEMENT).VALUE>" 		

								if (each(USERELEMENT).VALUE entered)
									OutputUserElementLoaded = "I"
									Attr += 1	
									if (Attr = 1)
										DisplayMonitor = DisplayMonitor + BeginDisplayAttributes	
									DisplayField = "NAME:" + each(USERELEMENT).NAME
									DisplayMonitor = DisplayMonitor + DisplayFieldDetail
									DisplayField = "VALUE:" + each(USERELEMENT).VALUE
									DisplayMonitor = DisplayMonitor + DisplayFieldDetail													
									LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							
									LocalReturnedUserElement.UserElement[Attr].Name 	 = each(USERELEMENT).NAME
									LocalReturnedUserElement.UserElement[Attr].Value	 = each(USERELEMENT).VALUE				



							if (OutputUserElementLoaded.InvoiceLevel
							and Attr > 0)
								DisplayMonitor = DisplayMonitor + EndTableForAttributes
								DisplayMonitor = DisplayMonitor + DisplayMidBreak
								include LoadAttributes				
								initialize Attr						
								LocalTrigger = ClearAttributeValues
								OutputUserElementLoaded = blank
							DisplayMonitor = DisplayMonitor + DisplayZoneLevelHeader
							DisplayMonitor = DisplayMonitor + ZoneColumnHeader							
							for each(LINE) each.OutdataTypeINVOICELINE set
								EachLineId				= each(LINE).OutdataTypeINVOICELINE0	

								EachLineItemNumber		= each(LINE).LINENUMBER					
								EachLineTaxAmount		= each(LINE).TOTALTAXAMOUNT				
								display "[TLC:SabrixClient]each(LINE).TOTALTAXAMOUNT:<each(LINE).TOTALTAXAMOUNT>" 
								display "[TLC:SabrixClient]EachLineItemSequence:<EachLineItemSequence>" 
								display "[TLC:SabrixClient]EachLineItemNumber..:<EachLineItemNumber>" 
								display "[TLC:SabrixClient]EachLineTaxAmount...:<EachLineTaxAmount>" 					

								for each(LINEMESSAGE) each.OutdataTypeINVOICELINEMESSAGE set
									LocalErrorSeverity = each(LINEMESSAGE).SEVERITY
									if (each(LINEMESSAGE).SEVERITY = 2)
										SabrixErrorMessage = each(LINEMESSAGE).MESSAGETEXT
										SabrixErrorSeverity = each(LINEMESSAGE).SEVERITY
										SabrixErrorLocation	= each(LINEMESSAGE).LOCATION				 
										SabrixErrorCategory	= each(LINEMESSAGE).CATEGORY				 
										SabrixErrorCode		= each(LINEMESSAGE).CODE										
									SabrixReturnMessage = each(LINEMESSAGE).MESSAGETEXT


								initialize TaxingJurisdiction
								for each(TAX) each.OutdataTypeINVOICELINETAX set
									ReturnedTaxCode = each(TAX).ERPTAXCODE
									display "[TLC:SabrixClient]each(TAX).ZONELEVEL:<each(TAX).ZONELEVEL>" 			
									ZoneLevel = each(TAX).ZONELEVEL	
									ZoneLevelAuthorityType = each(TAX).AUTHORITYTYPE												
									display "[TLC:SabrixClient]each(TAX).TAXABLECITY:<each(TAX).TAXABLECITY>"		
									display "[TLC:SabrixClient]each(TAX).TAXABLESTATE:<each(TAX).TAXABLESTATE>"		
									display "[TLC:SabrixClient]each(TAX).TAXABLECOUNTY:<each(TAX).TAXABLECOUNTY>"	
									TaxableCity	= each(TAX).TAXABLECITY												
									TaxableState = each(TAX).TAXABLESTATE											
									TaxableCounty = each(TAX).TAXABLECOUNTY											
									TaxingJurisdiction = ConcatinatedTaxableStateCountyCity							
									for each(TAXMESSAGE) each.OutdataTypeINVOICELINETAXMESSAGE set
										SabrixReturnMessage = each(TAXMESSAGE).MESSAGETEXT
										LocalErrorSeverity = each(TAXMESSAGE).SEVERITY
										if (each(TAXMESSAGE).SEVERITY = 2)
											SabrixErrorMessage	= each(TAXMESSAGE).MESSAGETEXT	
											SabrixErrorSeverity = each(TAXMESSAGE).SEVERITY
											SabrixErrorLocation	= each(TAXMESSAGE).LOCATION				 
											SabrixErrorCategory	= each(TAXMESSAGE).CATEGORY				 
											SabrixErrorCode		= each(TAXMESSAGE).CODE											
									TotalTaxRate = each(TAX).TAXRATE
									LocalCity 		= each(TAX).TAXABLECITY
									LocalState		= each(TAX).TAXABLEPROVINCE
									LocalZip		= each(TAX).TAXABLEPOSTCODE
									LocalCountry 	= each(TAX).TAXABLECOUNTRY
									TaxableCity 	= each(TAX).TAXABLECITY
									TaxableState	= each(TAX).TAXABLESTATE
									TaxableCounty	= each(TAX).TAXABLECOUNTY									

									for each(CURRENCYCONVERSION) each.OutdataTypeINVOICELINETAXCURRENCYCONVERSION set
									for each(EXEMPTAMOUNT) each.OutdataTypeINVOICELINETAXEXEMPTAMOUNT set
									for each(GROSSAMOUNT) each.OutdataTypeINVOICELINETAXGROSSAMOUNT set
									for each(NONTAXABLEBASIS) each.OutdataTypeINVOICELINETAXNONTAXABLEBASIS set
									for each(TAXABLEBASIS) each.OutdataTypeINVOICELINETAXTAXABLEBASIS set



									for each(TAXAMOUNT) each.OutdataTypeINVOICELINETAXTAXAMOUNT set
										display "[TLC:SabrixClient]each(TAXAMOUNT).DOCUMENTAMOUNT:<each(TAXAMOUNT).DOCUMENTAMOUNT>"									
										ZoneLevelTaxAmount = each(TAXAMOUNT).DOCUMENTAMOUNT
										DisplayMonitor = DisplayMonitor + DisplayZoneLevelDetail
										include LoadTaxTable


								LocalTrigger = ClearAttributeValues
								initialize Attr	
								OutputUserElementLoaded = blank						
								for each(LINEUSERELEMENT) each.OutdataTypeINVOICELINEUSERELEMENT set
									display "[TLC:SabrixClient]each(LINEUSERELEMENT).NAME:<each(LINEUSERELEMENT).NAME>" 	
									display "[TLC:SabrixClient]each(LINEUSERELEMENT).VALUE:<each(LINEUSERELEMENT).VALUE>" 	

									if (each(LINEUSERELEMENT).VALUE entered)

										OutputUserElementLoaded = "L"
										Attr += 1	
										LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 						
										LocalReturnedUserElement.UserElement[Attr].Name 	 = each(LINEUSERELEMENT).NAME
										LocalReturnedUserElement.UserElement[Attr].Value	 = each(LINEUSERELEMENT).VALUE		
										if (Attr = 1)
											DisplayMonitor = DisplayMonitor + BeginDisplayAttributes	
							  			DisplayField = "NAME:" + each(LINEUSERELEMENT).NAME
										DisplayMonitor = DisplayMonitor + DisplayFieldDetail										
										DisplayField = "VALUE:" + each(LINEUSERELEMENT).VALUE
										DisplayMonitor = DisplayMonitor + DisplayFieldDetail					
										DisplayField = "UserAttrValue:" + LocalReturnedUserElement.UserElement[Attr].Value
										DisplayMonitor = DisplayMonitor + DisplayFieldDetail	

								if (OutputUserElementLoaded.LineLevel
								and Attr > 0)
									DisplayMonitor = DisplayMonitor + EndTableForAttributes
									DisplayMonitor = DisplayMonitor + DisplayMidBreak
									include LoadAttributes		
									OutputUserElementLoaded = blank							
								for each(LINEQUANTITIES) each.OutdataTypeINVOICELINEQUANTITIES set
									for each(QUANTITY) each.OutdataTypeINVOICELINEQUANTITIESQUANTITY set
								for each(TAXSUMMARY) each.OutdataTypeINVOICELINETAXSUMMARY set
									TaxRate = each(TAXSUMMARY).TAXRATE
									EffectiveTaxRate = each(TAXSUMMARY).EFFECTIVETAXRATE
									SummaryTaxRate = each(TAXSUMMARY).TAXRATE
							

								if (UpdateLineItems
								and Update1SourceTaxLineItemRel exist)					
									invoke Update Update1SourceTaxLineItemRel
										invoked.CalculatedTaxAmt	= EachLineTaxAmount	
										invoked.TaxRate				= TaxRate
										invoked.TaxingJurisdiction  = TaxingJurisdiction
										invoked.TaxResult			= SabrixReturnMessage	
									invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel	 
										invoked.PrmTaxTable			= TaxTable						


							

							DisplayMonitor = DisplayMonitor + TableEnd	

							Company = each(Invoice).EXTERNALCOMPANYID	 
							Vendor  = each(Invoice).CUSTOMERNUMBER 
							TotalTaxAmount = each(Invoice).TOTALTAXAMOUNT
							TaxAmount = each(Invoice).TOTALTAXAMOUNT						

					
											
































			





			DisplayMonitor = DisplayMonitor + DisplayDetail		
			ReturnedTaxTable = OutputTaxTable
			Trigger = DisplayTaxTable	
			DisplayMonitor = DisplayMonitor + DisplayEnd



		LoadResults2	
			initialize TaxingJurisdiction
			if (UseNewResponseCode)
				DisplayMonitor = DisplayMonitor +"MyXMLDocument:" + MyXMLDocument	 
				include SelectResponseUsingXpath
			else

				for each(TaxCalculationResponse) MyResponse.TaxCalculationResponse set
					for each(OutdataType) each.OutdataType set
						for each(REQUESTSTATUS) each.OutdataTypeREQUESTSTATUS set
							SuccessStatus = each(REQUESTSTATUS).ISSUCCESS
							IsSuccess = each(REQUESTSTATUS).ISSUCCESS					
							for each(ERROR) each.OutdataTypeREQUESTSTATUSERROR set   
								SabrixErrorCode		= each(ERROR).CODE				 
								SabrixReturnMessage = each(ERROR).DESCRIPTION		 	 
								SabrixErrorLocation	= each(ERROR).ERRORLOCATIONPATH  
								if (SabrixErrorCode entered)
									include ParseWebserviceError
									
				for each(TaxCalculationResponse) MyResponse.TaxCalculationResponse set
					for each(OutdataType) each.OutdataType set
						for each(Invoice) each.OutdataTypeINVOICE  set
							for each(REQUESTSTATUS) each.OutdataTypeINVOICEREQUESTSTATUS set
							for each(MESSAGE) each.OutdataTypeINVOICEMESSAGE set
								SabrixReturnMessage = each(MESSAGE).MESSAGETEXT
								TotalTaxAmount = each(Invoice).TOTALTAXAMOUNT						
							for each(USERELEMENT) each.OutdataTypeINVOICEUSERELEMENT set
							initialize TaxingJurisdiction
							include InitializeLineMessages									 					
							for each(LINE) each.OutdataTypeINVOICELINE set                   
								EachLineId = each(LINE).OutdataTypeINVOICELINE0              
								EachLineItemNumber = each(LINE).LINENUMBER					 
								EachLineTaxAmount = each(LINE).TOTALTAXAMOUNT				 
								for each(LINEMESSAGE) each.OutdataTypeINVOICELINEMESSAGE set 
									LocalErrorSeverity = each(LINEMESSAGE).SEVERITY          
									if (each(LINEMESSAGE).SEVERITY = 2						 
									or  each(LINEMESSAGE).SEVERITY = 1)						 
										SabrixErrorMessage = each(LINEMESSAGE).MESSAGETEXT
										SabrixErrorSeverity = each(LINEMESSAGE).SEVERITY
										SabrixErrorLocation	= each(LINEMESSAGE).LOCATION				 
										SabrixErrorCategory	= each(LINEMESSAGE).CATEGORY				 
										SabrixErrorCode		= each(LINEMESSAGE).CODE										
									SabrixReturnMessage = each(LINEMESSAGE).MESSAGETEXT
								for each(TAX) each.OutdataTypeINVOICELINETAX set
									ReturnedTaxCode = each(TAX).ERPTAXCODE
									SabrixReturnMessage = each(TAX).INVOICEDESCRIPTION
									ZoneLevel = each(TAX).ZONELEVEL	
									ZoneName = each(TAX).ZONENAME
									ReturnedImpositionType = each(TAX).AUTHORITYTYPE
									OutputTaxRate = each(TAX).TAXRATE
									TaxableCity	= each(TAX).TAXABLECITY												 
									TaxableState = each(TAX).TAXABLESTATE											 
									TaxableCounty = each(TAX).TAXABLECOUNTY											 
									TaxingJurisdiction = TaxableState + "/" + TaxableCounty + "/" + TaxableCity 
									include LoadTaxTableZoneLevels
									for each(TAXMESSAGE) each.OutdataTypeINVOICELINETAXMESSAGE set

										LocalErrorSeverity = each(TAXMESSAGE).SEVERITY
										if (each(TAXMESSAGE).SEVERITY = 2)
											SabrixErrorMessage	= each(TAXMESSAGE).MESSAGETEXT	
											SabrixErrorSeverity = each(TAXMESSAGE).SEVERITY
											SabrixErrorLocation	= each(TAXMESSAGE).LOCATION				 
											SabrixErrorCategory	= each(TAXMESSAGE).CATEGORY				 
											SabrixErrorCode		= each(TAXMESSAGE).CODE											





									for each(TAXAMOUNT) each.OutdataTypeINVOICELINETAXTAXAMOUNT set
										ZoneLevelTaxAmount = each(TAXAMOUNT).DOCUMENTAMOUNT



								for each(TAXSUMMARY) each.OutdataTypeINVOICELINETAXSUMMARY set
									OutputTaxRate = each(TAXSUMMARY).TAXRATE
									EffectiveTaxRate = each(TAXSUMMARY).EFFECTIVETAXRATE
								
								if (UpdateTaxLineItems
								and Update1SourceTaxLineItemRel exist)					 
									invoke Update Update1SourceTaxLineItemRel
										invoked.CalculatedTaxAmt		= EachLineTaxAmount		 
										invoked.TaxRate					= OutputTaxRate
										invoked.TaxingJurisdiction  	= TaxingJurisdiction
										if (invoked.TaxableAmount not entered)
											invoked.TaxableAmount		= TaxableAmount	
										invoked.ThirdParty				= "S"		
										invoked.TaxResult				= SabrixReturnMessage	 
										invoked.ReturnedErrorMessage 	= SabrixErrorMessage	 
										invoked.SabrixErrorSeverity 	= SabrixErrorSeverity	 
																								 
									invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel	 
										invoked.PrmTaxTable				= TaxTable		


		SelectResponseUsingXpath
			initialize TaxingJurisdiction
			if (UseNewResponseCode)
				ResultsCount 				= MyXMLDocument select "count(//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA)"							 
				SuccessStatus 				= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_SUCCESS"
				IsSuccess					= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_SUCCESS"
				IsPartialSuccess			= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/REQUEST_STATUS/IS_PARTIAL_SUCCESS"	 

				InvoiceIsSuccess		 	= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/REQUEST_STATUS/IS_SUCCESS"			 		
				InvoiceIsPartialSuccess		= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/REQUEST_STATUS/IS_PARTIAL_SUCCESS"
				NbrOfInvoiceLevelMessages	= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/MESSAGE"
				InvoiceTotalTaxAmount		= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/TOTAL_TAX_AMOUNT"
				TotalTaxAmount 				= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/TOTAL_TAX_AMOUNT"		
				

				InvoiceLines				= MyXMLDocument select "count(//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/LINE)"
				LocalNbrInvLines			= MyXMLDocument select "count(//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/LINE)"	
				InvLevelUsrElements			= MyXMLDocument select "count(//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT)" 
				if (InvLevelUsrElements > 0)
					Attr = 1							
					while (InvLevelUsrElements >= Attr)	
						OutputUserElementLoaded = "I"							
						LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							
						LocalReturnedUserElement.UserElement[Attr].Name 	 = MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT[<Attr>]/NAME"  
						LocalReturnedUserElement.UserElement[Attr].Value	 = MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/USER_ELEMENT[<Attr>]/VALUE" 
						Attr += 1	
					if (OutputUserElementLoaded.InvoiceLevel)
						LocalTrigger2 = LoadAttributes																
						OutputUserElementLoaded = blank



				include LoadUsingPartialXmlLines
				






		LoadUsingPartialXmlLines	





			LocalIterator = 1
			while (LocalNbrInvLines >= LocalIterator)	 
				initialize TblIdx
				initialize TaxTable 
				DistLine					= MyXMLDocument select "//Envelope/Body/getOneSourceTaxCalculationResponse/taxCalculationResponse/OUTDATA/INVOICE/LINE[<LocalIterator>]"
				
				EachLineId	 				= DistLine select "/LINE/@ID"	 
				InvoiceLineId				= DistLine select "/LINE/@ID"	 
				InvoiceLineNumber			= DistLine select "/LINE/LINE_NUMBER"
				NbrOfInvoiceLineMessages	= DistLine select "/LINE/MESSAGE"
				InvoiceLineTotalTax			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
				EachLineTaxAmount 			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"		
				DistLineTaxSummary			= DistLine select "/LINE/TAX_SUMMARY"
				TaxRate						= DistLine select "/LINE/TAX_SUMMARY/TAX_RATE"
				EffectiveTaxRate			= DistLine select "/LINE/TAX_SUMMARY/EFFECTIVE_TAX_RATE"
				EachLineUserElement			= DistLine select "/LINE/USER_ELEMENT" 			
				
				LineTaxIdx = 1
				initialize TblIdx
				NbrOfInvoiceLineTaxes		= DistLine select "count(/LINE/TAX)"		
				while (NbrOfInvoiceLineTaxes >= LineTaxIdx)	
					SabrixReturnedTaxCode 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE"
					AdminZoneLevel			= DistLine select "/LINE/TAX[<LineTaxIdx>]/ADMIN_ZONE_LEVEL" 
					AdminZoneLevelTaxRate	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_RATE"
					ZoneName 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_NAME" 
					DistLineTaxableState	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_STATE"
					DistLineTaxableCounty	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTY"
					DistLineTaxableCity		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_CITY"
					TaxingJurisdiction 		= DistLineTaxableState + "/" + DistLineTaxableCounty+ "/" + DistLineTaxableCity 

					LocalEffectiveDate 		= current corporate date 
					ZoneLevel				= AdminZoneLevel
					OutputTaxRate 			= AdminZoneLevelTaxRate
					Description 			= DistLine select "/LINE/TAX[<LineTaxIdx>]/JURISDICTION_TEXT"	// "ZoneLevelAmounts"
					ReturnedTaxCode 		= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE"	 
					ZoneLevelTaxAmount		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_AMOUNT/DOCUMENT_AMOUNT"	
					ReturnedImpositionType  = DistLine select "/LINE/TAX[<LineTaxIdx>]/AUTHORITY_TYPE"
					TaxableAmount			= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_BASIS/DOCUMENT_AMOUNT"
					TaxAmount				= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_AMOUNT/DOCUMENT_AMOUNT"
					LocalTrigger = LoadTaxTableZoneLevels

					

					DistLineTaxMessages		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"																									
					LineTaxMsgIdx = 1
					while (DistLineTaxMessages >= LineTaxMsgIdx)	 				
						DistLineTaxMessageText		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"						
						SabrixReturnMessage			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"
						SabrixErrorSeverity 		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/SEVERITY"
						LocalErrorSeverity 			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/SEVERITY"	
						MessageLevel 				= LineLevelLabel		
						Trigger 					= Display1SourceMessage															
						if (LocalErrorSeverity.Severe)																				
							SabrixErrorSeverity = LocalErrorSeverity																
							SabrixReturnMessage = DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"	

						LineTaxMsgIdx = LineTaxMsgIdx + 1
					EndOfMessages 				= true
					Trigger 					= Display1SourceMessage																
					

					LineTaxIdx = LineTaxIdx + 1		
				
				if (UpdateLineItems
				and Update1SourceTaxLineItemRel exist)	
					invoke Update Update1SourceTaxLineItemRel
						invoked.CalculatedTaxAmt		= EachLineTaxAmount		 	 
						invoked.TaxRate					= TaxRate
						invoked.TaxingJurisdiction  	= TaxingJurisdiction
						if (invoked.TaxableAmount not entered)
							invoked.TaxableAmount		= TaxableAmount	
						invoked.ThirdParty				= "S"		
						invoked.TaxResult				= SabrixReturnMessage	 
						invoked.ReturnedErrorMessage 	= SabrixErrorMessage	 

						invoked.CapturedXml				= DistLine
					invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel	 
						invoked.PrmTaxTable				= TaxTable											


				if (EachLineUserElement > 0)
					LocalTrigger = ClearAttributeValues 		
					Attr = 1						 		
					OutputUserElementLoaded = blank
					while (EachLineUserElement >= Attr)			
						OutputUserElementLoaded = "L"
						LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 									
						LocalReturnedUserElement.UserElement[Attr].Name 	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/NAME"  	
						LocalReturnedUserElement.UserElement[Attr].Value	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/VALUE"	
						Attr += 1	
					if (OutputUserElementLoaded.LineLevel)			
						LocalTrigger2 = LoadAttributes				
						OutputUserElementLoaded = blank							

					

				LocalIterator = LocalIterator + 1
  				
		InitializeLineMessages
			initialize SabrixErrorMessage  
			initialize SabrixErrorSeverity  
			initialize SabrixErrorLocation	 				 
			initialize SabrixErrorCategory	 				 
			initialize SabrixErrorCode		 										
			initialize SabrixReturnMessage  		
		InitializeOutputFields 


















			initialize TaxRate
			initialize TaxAmount
			initialize ReturnedTaxCode
			initialize DisplayMonitor
			initialize SabrixErrorSeverity
			initialize ReturnedErrorMessage
			initialize CapturedXml
			WebServiceError = false 		 



			SabrixReturnMessage = blank  
			initialize TaxingJurisdiction 
			invoke Delete OutputUserAttributesRel        			
			ClearResults = false
			initialize StartTimestamp			 
			initialize StopTimestamp				
		 					
	Actions
        Create is a Create Action
        Update is an Update Action
        	Action Rules

        		if (ClearResults)
        			initialize TaxRate
        			initialize TaxAmount
        			initialize ReturnedTaxCode
        			initialize DisplayMonitor
        			initialize SabrixErrorSeverity
        			initialize ReturnedErrorMessage
        			initialize CapturedXml
					WebServiceError = false 
					IsSuccess = false		 



					SabrixReturnMessage = blank  
					initialize TaxingJurisdiction 
					invoke Delete OutputUserAttributesRel        			
        			ClearResults = false
        			initialize StartTimestamp			 
					initialize StopTimestamp			 			
        		if (TestTaxingJurisdiction)
        			TaxingJurisdiction = ConcatinatedTaxableStateCountyCity	
        			TestTaxingJurisdiction = false


        			
        Delete is a Delete Action
		

        CallOneSource is an Instance Action						
			default label is untranslatable	 
			restricted	

        	valid when (OneSourceVersionType.Original)
            Action Rules
            	constraint (ShipToAddress.Country entered)
            		"ShipToAddressIsRequred"			 
				
				invoke Create OneSourceTaxCalculation 
					invoked.OneSourceTaxCalculation		= "1"
					
				invoke Create TaxCalculationRequest 
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
			
                invoke Create IndataType 
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
                    invoked.IndataType            		= "1"
                    invoked.CALLINGSYSTEMNUMBER    		= CallingSystemNumber	

                invoke Create IndataTypeINVOICE
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
                    invoked.IndataType             		= "1"
                    invoked.IndataTypeINVOICE      		= "1"
					invoked.COMPANYNAME					= ExternalCompanyName	
					invoked.COMPANYROLE					= CompanyRole		//"S"					// "B"
					invoked.CURRENCYCODE				= "USD"
					invoked.VENDORNAME					= VendorCustomerName 					//"SHELL TRD CAN"	
					invoked.VENDORNUMBER				= VendorCustomer    	


					invoked.EXTERNALCOMPANYID			= ExternalCompany	
					invoked.FILTERGROUPNAME				= FilterGroupName	
					invoked.FILTERGROUPOWNER			= FilterGroupOwner	
					invoked.HOSTSYSTEM					= HostSystem		
					invoked.INVOICEDATE					= InvoiceDate			 
					invoked.INVOICENUMBER				= InvoiceNumber			 
					invoked.ISAUDITED					= IsAudited			
					invoked.PRODUCTMAPPINGGROUPNAME		= MappingGroupName	
					invoked.PRODUCTMAPPINGGROUPOWNER 	= MappingGroupOwner	
					invoked.TRANSACTIONTYPE 			= TransactionType	//"GS"					 
					invoked.UNIQUEINVOICENUMBER 		= UniqueID				 		

					LocalCompanyName					= ExternalCompanyName 



					if (OriginalInvoiceNumber entered)
						invoked.ORIGINALINVOICENUMBER	= OriginalInvoiceNumber			
					else	
						invoked.ORIGINALINVOICENUMBER	= InvoiceNumber 				

					invoked.ISCREDIT					= IsCredit						

					if (IsReversed)
						invoked.ISREVERSED				= "Y"							
					else
						invoked.ISREVERSED				= "N"							

					if (DeliveryTerms entered)
						invoked.DELIVERYTERMS			= DeliveryTerms					

				

				LocalLevelUserFieldError = "[1747]Invoice"  
				include LoadOneSourceTaxAttribute			
				if (UserElementLevel.Invoice				
				and AttributesFound)						
					Idx = 0
					while (Idx < 50)
						Idx +=1
						if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)
			                invoke Create IndataTypeINVOICEUSERELEMENT
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"				
			                    invoked.IndataType             			= "1"
			                    invoked.IndataTypeINVOICE      			= "1"
			                    invoked.IndataTypeINVOICEUSERELEMENT    = LocalOneSourceTaxAttribute.UserElement[Idx].Number		 
								invoked.NAME							= LocalOneSourceTaxAttribute.UserElement[Idx].Name		 
								invoked.VALUE							= LocalOneSourceTaxAttribute.UserElement[Idx].Value		 			                    







				if (TaxLineItemsRel exist)




					EachXmlLine = 0
					CountTaxLineItemsExcluded = 0
					for each TaxLineItemsRel
						if (each.ExcludeFromTaxEstimate)
							BypassOneSourceCall = true
							increment CountTaxLineItemsExcluded 

						else
							EachXmlLine = EachXmlLine + 1
							LocalContinue = true	
							invoke Create IndataTypeINVOICELINE			
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
			                    invoked.IndataType             			= "1"
			                    invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine 				//= each.TaxLineItem.Sequence	//"1"	//TODO: If more than two lines, it doesn't work "1"
								invoked.IndataTypeINVOICELINE0          = each.LineItemNumber 		
								invoked.PRODUCTCODE               		= each.CommodityCode		
								invoked.GROSSAMOUNT						= each.TaxableAmount		
								invoked.LINENUMBER						= each.LineItemNumber 		
								invoked.UNIQUELINENUMBER				= each.TaxLineItem.Sequence	
								if (UseTaxAmountAsInput)
									invoked.VENDORTAX					= each.ChargedTax			
									
								LocalInvoiceNumber						= each.InvoiceNumber		
								LocalInvoiceAmount						= each.InvoiceAmount		
								LocalTaxableAmount						= each.TaxableAmount		
								LocalLineNumber							= each.LineItemNumber  		
							 	EachLineItemNumber						= each.LineItemNumber 
							 						














	
							if (each.ShipToTaxCode entered)
								OutputTaxCodeDescription = each.ShipToTaxCode.Description
								TaxingJurisdiction = ParseTaxCodeDescription
								if (LocalParsedCountry not entered)
									LocalParsedCountry = "US"
							else
							if (each.ShipToAddress.Country entered)

								LocalParsedCity						= each.ShipToAddress.Municipality 
								LocalParsedState 					= each.ShipToAddress.StateProvince
								LocalParsedCounty 					= each.ShipToAddress.County	
								LocalParsedCountry 					= each.ShipToAddress.Country
								PostalCodeFirst5					= each.ShipToAddress.PostalCode[1:5]	
								PostalCodeLast4 					= each.ShipToAddress.PostalCode[6:10] - "-"														
							
							if (LocalParsedCountry not entered)
								if (TaxCodeEntered entered)
									OutputTaxCodeDescription = TaxCodeEntered.Description
									TaxingJurisdiction = ParseTaxCodeDescription
									if (LocalParsedCountry not entered)
										LocalParsedCountry = "US"							
								else
									LocalParsedCountry					= ShipToAddress.Country			 
									LocalParsedState					= ShipToAddress.StateProvince  
									LocalParsedCity						= ShipToAddress.Municipality 	 
									LocalParsedCounty					= ShipToAddress.County 	
									PostalCodeFirst5					= ShipToAddress.PostalCode[1:5]
									PostalCodeLast4 					= PostalCodeLast4	
	
							if (LocalParsedCountry not entered)
								display "Error"	
								constraint (LocalParsedCountry entered)   
						      		"ErrorForLineItem[<EachLineItemNumber>];AtMinimum,ShipToAddressOrTaxCodeIsRequiredToCalculateOneSourceTax"		
						      																							
							invoke Create IndataTypeINVOICELINESHIPTO
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
							    invoked.IndataType             			= "1"
			                    invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine //= each.TaxLineItem.Sequence	//"1"	//each.LineItemNumber 	// "1"	
								invoked.IndataTypeINVOICELINESHIPTO 	= "1"	 
								invoked.COUNTRY							= LocalParsedCountry	
								invoked.STATE							= LocalParsedState 		

								invoked.CITY							= LocalParsedCity		
								invoked.COUNTY							= LocalParsedCounty		
								invoked.POSTCODE						= each.ShipToAddress.PostalCode[1:5]	
								invoked.GEOCODE							= each.ShipToAddress.PostalCode[6:10] - "-" 				
			
							invoke Create IndataTypeINVOICELINESHIPFROM
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
							    invoked.IndataType             			= "1"
			                    invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine //= each.TaxLineItem.Sequence	//"1"	//each.LineItemNumber 	// ?? Maybe this should be "1"	
								invoked.IndataTypeINVOICELINESHIPFROM 	= "1"  
								invoked.COUNTRY							= each.ShipFromAddress.Country		 
								invoked.STATE							= each.ShipFromAddress.StateProvince 		

								invoked.CITY							= each.ShipFromAddress.Municipality 	 
								invoked.COUNTY							= each.ShipFromAddress.County 	
								invoked.POSTCODE						= each.ShipFromAddress.PostalCode[1:5]
								invoked.GEOCODE							= each.ShipFromAddress.PostalCode[6:10] - "-" 	
								

							LocalLevelUserFieldError = "[1884]Line"  	

							LocalOneSourceTaxAttribute = each.LineItemUserFieldsRel.UserElementGroup




							Idx = 0
							while (Idx < 50
							and LocalContinue = true)
								Idx +=1
								if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)
									invoke Create IndataTypeINVOICELINEUSERELEMENT
										invoked.OneSourceTaxCalculation				= "1"
										invoked.TaxCalculationRequest				= "1"				
									    invoked.IndataType             				= "1"
					                    invoked.IndataTypeINVOICE      				= "1"
										invoked.IndataTypeINVOICELINE				= EachXmlLine //= each.TaxLineItem.Sequence	//"1"	//each.LineItemNumber 	// "1"	
										invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalOneSourceTaxAttribute.UserElement[Idx].Number		 
										invoked.NAME								= LocalOneSourceTaxAttribute.UserElement[Idx].Name		 
										invoked.VALUE								= LocalOneSourceTaxAttribute.UserElement[Idx].Value							













				else	



					display "[TLC-2_]SabrixClient:LoadOneTaxLine..."
					display "[TLC-2a]SabrixClient:LoadOnlyOne...Idx:<Idx>"
					invoke Create IndataTypeINVOICELINE
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
	                    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"
						invoked.PRODUCTCODE               		= CommodityCode				
						invoked.GROSSAMOUNT						= TaxableAmount				
						invoked.LINENUMBER						= LineNumber				//"1"
						invoked.IndataTypeINVOICELINE0          = LineNumber				
						if (UseTaxAmountAsInput)
							invoked.VENDORTAX					= TaxAmount	
							
						LocalInvoiceNumber						= InvoiceNumber				
						LocalInvoiceAmount						= InvoiceAmount				
						LocalTaxableAmount						= TaxableAmount				
						LocalLineNumber							= LineNumber				

						invoked.ISCREDIT						= IsCredit					
						if (EAMCommodityCode entered)										
							invoked.COMMODITYCODE				= EAMCommodityCode	
						else
						if (CommodityCode entered)
							invoked.COMMODITYCODE				= CommodityCode				

						if (DeliveryTerms entered)
							invoked.DELIVERYTERMS				= DeliveryTerms				
						if (PartNumber entered)
							invoked.PARTNUMBER					= PartNumber				
						if (Description entered)	
							invoked.DESCRIPTION					= Description				
						if (UniqueLineNumber entered)	
							invoked.UNIQUELINENUMBER			= UniqueLineNumber			

						

					if (QuantityAmount entered)				
						invoke Create IndataTypeINVOICELINEQUANTITIES
							invoked.OneSourceTaxCalculation					= "1"
							invoked.TaxCalculationRequest					= "1"
						    invoked.IndataType             					= "1"
		                    invoked.IndataTypeINVOICE      					= "1"
							invoked.IndataTypeINVOICELINE					= "1"	
							invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
						
						invoke Create IndataTypeINVOICELINEQUANTITIESQUANTITY
							invoked.OneSourceTaxCalculation					= "1"
							invoked.TaxCalculationRequest					= "1"
						    invoked.IndataType             					= "1"
		                    invoked.IndataTypeINVOICE      					= "1"
							invoked.IndataTypeINVOICELINE					= "1"	
							invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
							invoked.IndataTypeINVOICELINEQUANTITIESQUANTITY = "1"
							invoked.AMOUNT									= QuantityAmount	//worked //"28600"	
							invoked.UOM										= UnitOfMeasure		//worked //"GAL"		

					

					if (TaxLineItemsRel exist)	

						for each TaxLineItemsRel
							LocalOneSourceTaxAttribute = each.LineItemUserFieldsRel.UserElementGroup
							Idx = 0
							while (Idx < 25)
								Idx +=1

								if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)
									invoke Create IndataTypeINVOICELINEUSERELEMENT
										invoked.OneSourceTaxCalculation				= "1"
										invoked.TaxCalculationRequest				= "1"				
									    invoked.IndataType             				= "1"
					                    invoked.IndataTypeINVOICE      				= "1"
										invoked.IndataTypeINVOICELINE				= "1"	
										invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalOneSourceTaxAttribute.UserElement[Idx].Number		 
										invoked.NAME								= LocalOneSourceTaxAttribute.UserElement[Idx].Name		 
										invoked.VALUE								= LocalOneSourceTaxAttribute.UserElement[Idx].Value											



					else				
					if (UserElementLevel.Line)
						Idx = 0
						while (Idx < 25)
							Idx +=1
							if (UserElementGroup.UserElement[Idx].Number entered)
								invoke Create IndataTypeINVOICELINEUSERELEMENT
									invoked.OneSourceTaxCalculation				= "1"
									invoked.TaxCalculationRequest				= "1"				
								    invoked.IndataType             				= "1"
				                    invoked.IndataTypeINVOICE      				= "1"
									invoked.IndataTypeINVOICELINE				= "1"	
									invoked.IndataTypeINVOICELINEUSERELEMENT 	= UserElementGroup.UserElement[Idx].Number		//"1"
									invoked.NAME								= UserElementGroup.UserElement[Idx].Name		//"ATTRIBUTE2"
									invoked.VALUE								= UserElementGroup.UserElement[Idx].Value		//"12548"
															
					if (TaxCodeEntered entered)
						OutputTaxCodeDescription = TaxCodeEntered.Description



						
					PostalCodeLast4 = DerivedShipToZipLast4
					PostalCodeLast4 = ShipToAddress.PostalCode[6:10] - "-"
													
					invoke Create IndataTypeINVOICELINESHIPTO
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
					    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"	
						invoked.IndataTypeINVOICELINESHIPTO 	= "1"
						invoked.COUNTRY							= ShipToAddress.Country			 
						invoked.STATE							= ShipToAddress.StateProvince 

						invoked.CITY							= ShipToAddress.Municipality 	 
						invoked.COUNTY							= ShipToAddress.County 	
						invoked.POSTCODE						= ShipToAddress.PostalCode[1:5]	
						invoked.GEOCODE							= ShipToAddress.PostalCode[6:10] - "-" 				
	
					invoke Create IndataTypeINVOICELINESHIPFROM
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
					    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"	
						invoked.IndataTypeINVOICELINESHIPFROM 	= "1"
						invoked.COUNTRY							= ShipFromAddress.Country		 
						invoked.STATE							= ShipFromAddress.StateProvince 

						invoked.CITY							= ShipFromAddress.Municipality 	 
						invoked.COUNTY							= ShipFromAddress.County 	
						invoked.POSTCODE						= ShipFromAddress.PostalCode[1:5]
						invoked.GEOCODE							= ShipFromAddress.PostalCode[6:10] - "-" 	
										



				StartTimestamp			= DerivedTimestamp

				if (UseNewResponseCode)			
					invoke CalculateTax2 OneSource
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message						
						invoked.Request     = "1"
						MyXMLDocument       = result.Response	
						MyHTTPInfo			= result.MyHTTPInfo	
					invoke ParseXML TaxFacadeSerializer			
						invoked.Response = MyXMLDocument		
						MyXMLDocument = result.ParsedXML		
				else		
					DisplayMonitor = DisplayMonitor + "[2978]Inhere:" + "<br>"			
					invoke CalculateTax OneSource
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message						
						invoked.Request     = "1"
						MyResponse          = result.Response	
						MyHTTPInfo			= result.MyHTTPInfo			
				
				DisplayMonitor = DisplayMonitor + "[2987]MyResponse:" + MyResponse + "<br>"
				DisplayMonitor = DisplayMonitor + "[2988]MyHTTPInfo.ResponseBody:" + MyHTTPInfo.ResponseBody + "<br>"		
				StopTimestamp = DerivedTimestamp


				initialize ReturnedErrorMessage
				initialize CapturedXml								
				initialize HttpStatusCode							
				if (MyHTTPInfo.Failed)								
					WebServiceError = true							
					LocalExecuteReturnBlank = ParseWebserviceError	
				
				LocalExecuteReturnBlank = CaptureXml				
				if (WebServiceError
				and DisplayWebserviceErrorXml)
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml		
				
				if (LocalCapturedXml not entered)
					LocalCapturedXml = TimestampLabel + DerivedTimestamp
					LocalCapturedXml = LocalCapturedXml + CallURLLabel + MyHTTPInfo.Url
					LocalCapturedXml = LocalCapturedXml + MyHTTPInfo.RequestBody
					if (MyHTTPInfo.Failed)
						LocalCapturedXml = LocalCapturedXml + FailedLabel + MyHTTPInfo.Failed
						LocalCapturedXml = LocalCapturedXml + StatusCodeLabel + MyHTTPInfo.StatusCode		
					LocalCapturedXml 	= LocalCapturedXml + MyHTTPInfo.ResponseBody
					CapturedXml = LocalCapturedXml 

				if (WebServiceErrorMessage not entered)
					WebServiceErrorMessage = SabrixErrorMessage
					
				if (StoreErrors)
					if (WebServiceError)
						SabrixReturnMessage = WebServiceErrorMessage
						OneSourceInformationMessage = WebServiceErrorMessage
						LocalContinue = true	





				else							
					constraint (!WebServiceError)
						"One\SourceWebserviceError:<WebServiceErrorMessage>"  	
	
			 														



				LocalActionExecuted = CallOneSourceText 
				include LoadResults			





















































































				DisplayMonitor = DisplayMonitor + DisplayOutputHeader	
				DisplayMonitor = DisplayMonitor + DisplayDetail			
				DisplayMonitor = DisplayMonitor + DisplayEnd		
				
		LoadDefaults is an Instance Action
			default label is "LoadDefaultParameters"	 


			Parameters
				LoadFrom is Alpha 1
					States
						TaxConfiguration		value is blank
						TaxConfigurationVersion	value is "1"	
			Action Rules
				constraint (OneSourceVersionType = TaxConfigurationRel.OneSourceVersionType)
					"OneSourceVersionTypesAreNotTheSame.ChangeOneSourceVersionTypeToMatch_/Tax/Configuration"
		      	if (LoadFrom.TaxConfigurationVersion)
			      	CallingSystemNumber 	= TaxConfigurationVersionRel.CallingSystem 	 			 
					FilterGroupName			= TaxConfigurationVersionRel.FilterGroupName			 
					FilterGroupOwner		= TaxConfigurationVersionRel.FilterGroupOwner			 
					HostSystem				= TaxConfigurationVersionRel.HostSystem				 
					MappingGroupName		= TaxConfigurationVersionRel.ProductMappingGroupName	 
					MappingGroupOwner		= TaxConfigurationVersionRel.ProductMappingGroupOwner	 
					CompanyRole				= TaxConfigurationVersionRel.CompanyRole 				 
					ExternalCompany			= TaxConfigurationVersionRel.ExternalCompanyId			 	
					ExternalCompanyName		= TaxConfigurationVersionRel.ExternalCompanyIdName		 





			      	CallingSystemNumber 	= TaxConfigurationRel.CallingSystem 	 			 
					FilterGroupName			= TaxConfigurationRel.FilterGroupName			 
					FilterGroupOwner		= TaxConfigurationRel.FilterGroupOwner			 
					HostSystem				= TaxConfigurationRel.HostSystem				 
					IsAudited				= TaxConfigurationRel.IsAudited	 				 
					MappingGroupName		= TaxConfigurationRel.ProductMappingGroupName	 
					MappingGroupOwner		= TaxConfigurationRel.ProductMappingGroupOwner	 
					CompanyRole				= TaxConfigurationRel.CompanyRole 				
					ExternalCompany			= TaxConfigurationRel.ExternalCompanyId			 	
					ExternalCompanyName		= TaxConfigurationRel.ExternalCompanyIdName		 
					LocalCompanyName		= TaxConfigurationRel.ExternalCompanyIdName		



				CurrencyCode			= "USD"	 
				TransactionType			= "GS"
				VendorCustomer			= "44857" 
				VendorCustomerName		= "Vendor1"	
				InvoiceDate				= current corporate date		//"20170428"	
				InvoiceNumber			= "187881859"
				TaxableAmount			= 100.00 	
				LineNumber				= 1
				InvoiceAmount			= 107.50	//"43643.60"
				ShipFromAddress			= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
				ShipToAddress			= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
				OneSourceVersionType    = TaxConfigurationRel.OneSourceVersionType

				
				
		CallUsingCalculateTax  is an Instance Action

			Parameters
			Local Fields
				LocalTrigger is Alpha 1
			Parameter Rules
			Action Rules	
				constraint (TaxConfigurationRel.ThirdParty.Sabrix)
					"TaxConfigurationNotSetToOne\Source"
				constraint (LegalEntity entered)   
		      		"TaxEntityRequiredToCallCalculateTax"
				constraint (TaxConfigurationRel.OneSourceVersionType = LegalEntity.OneSourceVersionType)
					"Tax\EntityVersionTypeNotTheSameAsTax\ConfigurationVersionType;ChangeAndTryAgain"			      		 	
				if (1SourceDummyTaxCodeRel not exist)
					invoke Create TaxCode	 
						invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGrp
						invoked.TaxCode						= "1S"
						invoked.TaxType						= "S"
						invoked.Description					= "Saint Paul" + "/" + "Ramsey" + "/" + "MN"  
								      				
				SabrixReturnMessage = blank
				initialize SabrixErrorSeverity
				CalculateTax.CallingModule					= "SabrixClient"	
				CalculateTax.TaxEntity						= LegalEntity		 
				CalculateTax.InvoiceCompany					= ExternalCompany
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID
				CalculateTax.SabrixUserElement				= UserElementGroup			
				SendingToCalculateTax = true
				include LoadOneSourceTaxAttribute
				if (AttributesFound)	
					CalculateTax.OneSourceTaxAttribute50	= LocalOneSourceTaxAttribute
				CalculateTax.BaseCurrency					= CurrencyCode
				CalculateTax.Vendor							= VendorCustomer
				CalculateTax.VendorCustomerName				= VendorCustomerName
				CalculateTax.Invoice						= InvoiceNumber
				CalculateTax.InvoiceDate					= InvoiceDate
				CalculateTax.TaxCode						= TaxCodeEntered





				CalculateTax.InvoiceAmount					= InvoiceAmount
				if (UseTaxAmountAsInput)
					CalculateTax.TaxAmount					= TaxAmount					
				CalculateTax.TaxableAmount					= TaxableAmount
				CalculateTax.Quantity						= 1
				CalculateTax.LineNumber						= LineNumber 
				CalculateTax.FromPostalAddress				= ShipFromAddress	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"		 
				CalculateTax.PostalAddress					= ShipToAddress		//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
				CalculateTax.Function            			= "C"	



				CalculateTax.ReturnOneSourceTaxIn 			= ReturnOneSourceTaxIn
				CalculateTax.OriginalInvoiceNumber		    = OriginalInvoiceNumber 	 
				CalculateTax.IsCancelled 					= IsReversed          	 
				CalculateTax.UniqueLineNumber 		 		= UniqueLineNumber				 
				CalculateTax.ItemNumber 				 	= PartNumber					
				CalculateTax.QuantityAmount					= QuantityAmount	 
				CalculateTax.UnitOfMeasure					= UnitOfMeasure	
				CalculateTax.DeliveryTerms					= DeliveryTerms	
				CalculateTax.CommodityCode					= CommodityCode	
				CalculateTax.EAMCommodityCode				= EAMCommodityCode	
				CalculateTax.Description					= Description
				CalculateTax.UserElementLevel 				= UserElementLevel
				if (IsCredit)
					CalculateTax.InvoicedOrCreditMemo		= "C"
				else
					CalculateTax.InvoicedOrCreditMemo		= "I"									

				CalculateTax.CreateOutputUserFieldFile		= true
				CalculateTax.SendMultLineItems 				= SendMultLineItems
				CalculateTax.UpdateLineItems				= UpdateLineItems				
				LocalTrigger								= CalculateTax.SabrixThirdParty 
				ReturnedErrorNumber							= CalculateTax.OutputErrorNumber 
				ReturnedErrorMessage                 		= CalculateTax.OutputErrorMessage
				CapturedXml 								= LocalCapturedXml 



				constraint (CalculateTax.OutputErrorNumber not entered)   
		      		"<CalculateTax.OutputErrorMessage>" 


				ReturnedTaxCode								= CalculateTax.SabrixReturnedTaxCode
				TaxAmount									= CalculateTax.OutputTotalTaxAmount
				TotalTaxAmount								= CalculateTax.OutputTotalTaxAmount
				TaxableAmount 								= CalculateTax.TaxableAmount 
				TaxRate 									= CalculateTax.OutputTaxRate
				SuccessStatus								= CalculateTax.SuccessStatus
				IsSuccess									= CalculateTax.SuccessStatus
				SabrixErrorSeverity					 		= CalculateTax.SabrixErrorSeverity					 
				SabrixReturnMessage							= CalculateTax.SabrixReturnMessage
				SabrixErrorMessage		 					= CalculateTax.SabrixReturnMessage
				WebServiceError 							= CalculateTax.WebServiceError 
				WebServiceErrorMessage						= CalculateTax.WebServiceErrorMessage
				SabrixErrorLocation 						= CalculateTax.SabrixErrorLocation	 			 
				SabrixErrorCategory 						= CalculateTax.SabrixErrorCategory	 			 
				SabrixErrorCode								= CalculateTax.SabrixErrorCode	
				TaxingJurisdiction							= CalculateTax.TaxingJurisdiction
				OneSourceInformationMessage					= CalculateTax.OneSourceInformationMessage
				OutputTaxCodeDescription					= CalculateTax.OutputTaxCodeDescription
				NotSentToSabrix								= CalculateTax.NotSentToSabrix
				OutputTaxTable								= CalculateTax.TaxTable
				ReturnedTaxTable							= CalculateTax.TaxTable
				LocalReturnedUserElement					= CalculateTax.LocalReturnedUserElement
				TransientCapturedXml						= CalculateTax.CapturedXml	
				LocalCapturedXml							= CalculateTax.CapturedXml	
				CapturedXml = CalculateTax.CapturedXml 

				if (OneSourceInformationMessage not entered)
					if (SabrixReturnMessage entered)
						OneSourceInformationMessage = SabrixReturnMessage
					else
						OneSourceInformationMessage = SabrixErrorMessage
						
				LocalInvoiceNumber							= InvoiceNumber				 
				LocalInvoiceAmount							= InvoiceAmount				 								
				LocalTaxableAmount							= TaxableAmount				 	
				LocalLineNumber								= LineNumber					
				LocalInvoiceNumber							= InvoiceNumber
				LocalCompanyName							= ExternalCompanyName	
				LocalActionExecuted = CallUsingCalculateTaxText	 
				DisplayMonitor = DisplayHeader	
				DisplayMonitor = DisplayMonitor + DisplayOutputHeader	
				DisplayMonitor = DisplayMonitor + DisplayDetail	
				Trigger = DisplayTaxTable							

				DisplayMonitor = DisplayMonitor + DisplayEnd						

				DisplayMonitor = DisplayMonitor + "<pre>"  
				DisplayMonitor = DisplayMonitor + DisplayMidBreak		
				DisplayMonitor = DisplayMonitor + CalculateTax.RichTextDisplayCalcTax
				
		DeleteLineItems is an Instance Action
			valid when (TaxLineItemsExist)			
			Action Rules
				if (TaxLineItemsRel exist)
					invoke Purge TaxLineItemsRel


		CopyCurrentRecord is an Instance Action

			Parameters
				CopyFromTestSabrixClient		is a SabrixClient	 
				NewSabrixClientKey				is Alpha 50
				CopyTaxLineItems				is Boolean	
			Parameter Rules
				CopyFromTestSabrixClient
					initial value is SabrixClient
			Action Rules
				LocalCopyFromBusclass = CopyFromTestSabrixClient
				if (CopySabrixClientRel exist)
					invoke Create SabrixClient
						fill in fields from this instance
						invoked.FinanceEnterpriseGrp 	= FinanceEnterpriseGrp
						if (NewSabrixClientKey entered)
							invoked.SabrixClient = NewSabrixClientKey
							LocalNewSabrixClientKey	= NewSabrixClientKey 	
						else
							LocalNewSabrixClientKey = DerivedSabrixClientKey
							invoked.SabrixClient = DerivedSabrixClientKey	 

					if (CopyTaxLineItems
				    and NewSabrixClientRel exist
					and TaxLineItemsRel exist)
						for each TaxLineItemsRel
							invoke Create TaxLineItem
								fill in fields from each					 
				                  	except invoked.TaxLineItem.UniqueIdOfRelatedObject
									except invoked.RelatedObjectReference
								invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGrp				  
								invoked.TaxLineItem.UniqueIdOfRelatedObject = NewSabrixClientRel.UniqueID 				
								invoked.RelatedObjectReference 				= reference to NewSabrixClientRel
										












































































































































































































































































































































		LoadMultipleLineItems is an Instance Action		
			completion message is "SuccessfullyLoaded<RecordCount>..Records"








			Parameters
				LoadNumberOfRecords 			is Numeric 6
				LoadShipToAddressFromInvoice	is Boolean
				LoadChargedTaxAmount			is Boolean
				StartingTaxableAmount			is Decimal 12.2
			Local Fields
				RecordCount						is Numeric 6
				LoadTaxableAmount				is Decimal 18.2
				TaxAmount						is Decimal 18.2
				LastLineNumber					is Numeric 6
				LastSequence					is Numeric 6
				LastTaxableAmount				is Decimal 18.2
			Action Rules
				constraint (ShipToAddress.Country entered)
					"ShipToAddressRequired"
				initialize LastSequence

				if (StartingTaxableAmount entered)
					LoadTaxableAmount = StartingTaxableAmount
				else
				if (TaxLineItemsRel exist)
					LastSequence = last TaxLineItemsRel.TaxLineItem.Sequence
					LastTaxableAmount = last TaxLineItemsRel.TaxableAmount
					LoadTaxableAmount = LastTaxableAmount
				else	
					LoadTaxableAmount = 100.00
				
				initialize RecordCount	
				while (RecordCount < LoadNumberOfRecords)
					RecordCount +=1
					LastSequence +=1
					LoadTaxableAmount = LoadTaxableAmount + 1.00
					invoke Create TaxLineItem
						fill in fields from this instance					
						invoked.FinanceEnterpriseGroup  			= FinanceEnterpriseGrp 
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID 			


						invoked.RelatedObjectReference				= reference to this instance			
						invoked.TaxEntity		                 	= "180" 			
						invoked.TaxDate 						 	= DerivedTimestamp date				 
						invoked.TaxableAmount					 	= LoadTaxableAmount 			 


						if (LoadShipToAddressFromInvoice)
							invoked.ShipToAddress					= ShipToAddress
						invoked.ThirdParty							= "S"




					






























				
		ClearResults is an Instance Action				
			Parameters
				ClearTaxLineItems is Boolean	
				ClearTaxAttributes is Boolean	
			Action Rules
				include InitializeOutputFields
				if (ClearTaxAttributes)
					initialize UserElementGroup
				if (ClearTaxLineItems)
					for each TaxLineItemsRel
						invoke ClearResults each	

		GetOneSourceTaxAttribute is an Instance Action	 
			completion message is "OneSourceTaxAttributeSuccessfullyLoadedAttributes"			
			Parameters
				FormatDate is Boolean
				DisplayFormatedAttributes is Boolean
				DisplayMoreAttributes is Boolean		
			Parameter Rules
				DisplayMoreAttributes
					constraint (TotalNumberOfAttributes > 25)
						"ThisFieldCanOnlyBeCheckedIfThereAreMoreThan25Attributes"
						
			Action Rules
				initialize UserElementGroup
				initialize DisplayMonitor
				if (TaxAttributesRel exists)
					initialize DisplayMonitor												 
					DisplayMonitor	  = TaxAttributesRel.Comments

					for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel	
						if (DisplayMoreAttributes									
						and Idx2 < 25)												
							Idx2 +=1												
							LocalSkipThisOne = true									
						else	 
						if (Idx < 25)  
							if (each.Value entered
							or  each.LoadDynamicField entered)
								Idx +=1
								UserElementGroup.UserElement[Idx].Number		= Idx 	 		 
								UserElementGroup.UserElement[Idx].Name			= each.UserAttributeName	

								if (each.LoadDynamicField.ValueIs.Longitude)										
									if (ShipToAddress.Country entered												
									and ShipToAddress.GeoLongitude entered)											
										UserElementGroup.UserElement[Idx].Value	= ShipToAddress.GeoLongitude	
								else
								if (each.LoadDynamicField.ValueIs.Latitude)											
									if (ShipToAddress.Country entered												
									and ShipToAddress.GeoLatitude entered)											
										UserElementGroup.UserElement[Idx].Value	= ShipToAddress.GeoLatitude		
								else
								if (each.LoadDynamicField.ValueIs.Altitude)											
									if (ShipToAddress.Country entered												
									and ShipToAddress.GeoAltitude entered)											
										UserElementGroup.UserElement[Idx].Value	= ShipToAddress.GeoAltitude		

								else
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									UserElementGroup.UserElement[Idx].Value	= LegalEntity
								else	
								if (each.LoadDynamicField.ValueIs.UNSPSC
								or  each.LoadDynamicField.ValueIs.CommodityCode)						
									UserElementGroup.UserElement[Idx].Value	= CommodityCode				
								else	
								if (each.LoadDynamicField.ValueIs.PaymentAmount)
									UserElementGroup.UserElement[Idx].Value	= TaxableAmount	
								else 
								if (each.LoadDynamicField.ValueIs.PostingDate
								or  each.LoadDynamicField.ValueIs.PaymentDate
								or  each.LoadDynamicField.ValueIs.TaxDate)
								 	if (FormatDate)
										UserElementGroup.UserElement[Idx].Value	= FormatedDate
									else	
										UserElementGroup.UserElement[Idx].Value	= current corporate date	 			
								else	
									UserElementGroup.UserElement[Idx].Value		= each.Value
								
								if (UserElementGroup.UserElement[Idx].Value not entered)
									UserElementGroup.UserElement[Idx].Value = "***Blank Value"
								
				LocalOneSourceTaxAttribute = UserElementGroup	 
				if (DisplayFormatedAttributes)
					include DisplayReturnedUserAttributes	
				else
					DisplayMonitor = LocalOneSourceTaxAttribute	

		GetTaxAttributesFromLineItem is an Instance Action
			default label is untranslatable	 
			completion message is "OneSourceTaxAttributeSuccessfullyLoadedToComments"			
			Parameters
			Action Rules
				initialize UserElementGroup
				initialize DisplayMonitor	
				if (TaxLineItemsRel exist)

					for each TaxLineItemsRel
							LocalTrigger = each.Load1SourceUserAttributesFrDerived		 
							DisplayMonitor = each.LocalMoreResults						 				


		CallOneSourceGeneric is an Instance Action		
			completion message is "OneSourceGenericCompletedSuccessfullyLoaded;PasswordTypeUsed:<PasswordTypeUsed>"		
			default label is untranslatable	 			
			valid when (OneSourceVersionType.Generic)		 
            Action Rules
				LocalTrigger = ProcessOneSourceGeneric
			


     	CallOneSourceOriginal is an Instance Action	 
			default label is untranslatable	 
			valid when (OneSourceVersionType.Original)
            Action Rules
				include InitializeOutputFields
				if (ShipToAddress.Country not entered
				and TaxCodeEntered not entered)
	            	constraint (TaxLineItemsRel exist)	 
	            		"AtLeastOneTaxLineItemRequiredForThisActionToWork"	 			 
				
				invoke Create OneSourceTaxCalculation 
					invoked.OneSourceTaxCalculation		= "1"
					
				invoke Create TaxCalculationRequest 
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
			
                invoke Create IndataType 
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
                    invoked.IndataType            		= "1"
                    invoked.CALLINGSYSTEMNUMBER    		= CallingSystemNumber			 

                invoke Create IndataTypeINVOICE
					invoked.OneSourceTaxCalculation		= "1"
					invoked.TaxCalculationRequest		= "1"
                    invoked.IndataType             		= "1"
                    invoked.IndataTypeINVOICE      		= "1"
					invoked.COMPANYNAME					= ExternalCompanyName 
					invoked.COMPANYROLE					= CompanyRole			 
					invoked.CURRENCYCODE				= "USD"
					invoked.VENDORNAME					= VendorCustomerName 	 
					invoked.VENDORNUMBER				= VendorCustomer		 


					invoked.EXTERNALCOMPANYID			= ExternalCompany		 	 
					invoked.FILTERGROUPNAME				= FilterGroupName		 
					invoked.FILTERGROUPOWNER			= FilterGroupOwner		 
					invoked.HOSTSYSTEM					= HostSystem			 
					invoked.INVOICEDATE					= InvoiceDate			 	 
					invoked.INVOICENUMBER				= InvoiceNumber 
					invoked.ISAUDITED					= IsAudited				 
					invoked.PRODUCTMAPPINGGROUPNAME		= MappingGroupName		 
					invoked.PRODUCTMAPPINGGROUPOWNER 	= MappingGroupOwner		 
					invoked.TRANSACTIONTYPE 			= TransactionType		 				 
					invoked.UNIQUEINVOICENUMBER 		= UniqueID				 		
				

				LocalLevelUserFieldError = "[1762]Invoice"
				include LoadOneSourceTaxAttribute
				if (UserElementLevel.Invoice
				and AttributesFound)									 	
					Idx = 0
					while (Idx < 25)
						Idx +=1

						if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)			
			                invoke Create IndataTypeINVOICEUSERELEMENT
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"				
			                    invoked.IndataType             			= "1"
			                    invoked.IndataTypeINVOICE      			= "1"
			                    invoked.IndataTypeINVOICEUSERELEMENT    = LocalOneSourceTaxAttribute.UserElement[Idx].Number		//May need to change this to Idx //"1"
								invoked.NAME							= LocalOneSourceTaxAttribute.UserElement[Idx].Name			//"ATTRIBUTE1"
								invoked.VALUE							= LocalOneSourceTaxAttribute.UserElement[Idx].Value			//"N"







				if  (!SendMultLineItems
				or   SendMultLineItems
				and  TaxLineItemsRel not exist)	



					include LoadSingleLineItem
				else

				if (TaxLineItemsRel exist)



					display "[TLC-1_]SabrixClient:TaxLineItemsExist..."
					EachXmlLine = 0
					CountTaxLineItemsExcluded = 0
					CountLineItemsInError = 0								
					StartTimestamp		= DerivedTimestamp

					for each TaxLineItemsRel
						LocalTaxLineItem = each.LineItemNumber				
						TaxLineItemShipToTaxCode = each.ShipToTaxCode		




















						if (each.ExcludeFromTaxEstimate)

							display "BypassOneSourceCall"	
							increment CountTaxLineItemsExcluded 
						else
							display "LocalContinue=true"	
							EachXmlLine = EachXmlLine + 1				
							invoke Create IndataTypeINVOICELINE			 
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
								invoked.IndataType             			= "1"
								invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine 				// each.TaxLineItem.Sequence	//"1"						//each.LineItemNumber 		// Use Idx or each.TaxLineItem.Sequence	//"1"	//TODO: If more than two lines, it doesn't work "1"
								invoked.IndataTypeINVOICELINE0          = each.LineItemNumber 		
								if (each.ProductTaxCategory entered)
									invoked.PRODUCTCODE               	= each.ProductTaxCategory


								if (each.CommodityCode entered)		
									invoked.COMMODITYCODE				= each.CommodityCode
							
								if (each.TaxableAmount not entered)
									invoked.GROSSAMOUNT					= TaxableAmount
								else	
									invoked.GROSSAMOUNT					= each.TaxableAmount		
								invoked.LINENUMBER						= each.LineItemNumber 		


								invoked.UNIQUELINENUMBER				= each.TaxLineItem.UniqueID	




								invoked.VENDORTAX						= each.ChargedTax			
								if (each.InvoiceNumber not entered)
									LocalInvoiceNumber					= InvoiceNumber	
								else	
									LocalInvoiceNumber					= each.InvoiceNumber		 
								LocalInvoiceAmount						= each.InvoiceAmount		 		
								LocalTaxableAmount						= each.TaxableAmount		 
								LocalLineNumber							= each.LineItemNumber  		 
								EachLineItemNumber						= each.LineItemNumber 


							if (each.ShipToTaxCode entered)
								OutputTaxCodeDescription = each.ShipToTaxCode.Description
								TaxingJurisdiction = ParseTaxCodeDescription	
								DisplayMonitor = DisplayMonitor + "[4373]LineTaxCode-Here1:" + ShipToAddressFound + "<br>"	
								DisplayMonitor = DisplayMonitor + "[4374]LineCountry-Here2:" + LocalParsedCountry + "<br>"	
								DisplayMonitor = DisplayMonitor + "[4375]NbrOfRightSlashes-Here3:" + NbrOfRightSlashes + "<br>"
								if (ShipToAddressFound
								and LocalParsedCountry not entered)
									DisplayMonitor = DisplayMonitor + "[4378]LineTaxCode-Here3:" + ShipToAddressFound + "<br>"  
									if (each.ShipToAddress.Country entered)
										LocalParsedCountry = each.ShipToAddress.Country
										ShipToAddressFound = true	
									else	
									if (ShipToAddress.Country entered)
										LocalParsedCountry = ShipToAddress.Country	
										ShipToAddressFound = true									
									else
										LocalParsedCountry = "US"
										ShipToAddressFound = true
										

										
							if (!ShipToAddressFound
							or LocalParsedCountry not entered) 
								if (each.ShipToAddress.Country entered)

									ShipToAddressFound 					= true		 
									LocalParsedCity						= each.ShipToAddress.Municipality 
									LocalParsedState 					= each.ShipToAddress.StateProvince
									LocalParsedCounty 					= each.ShipToAddress.County	
									LocalParsedCountry 					= each.ShipToAddress.Country
									PostalCodeFirst5					= each.ShipToAddress.PostalCode[1:5]	
									PostalCodeLast4 					= each.ShipToAddress.PostalCode[6:10] - "-"																



							if (!ShipToAddressFound
							or LocalParsedCountry not entered)
								DisplayMonitor = DisplayMonitor + "[Hdr]Address-ShipToAddressFound:Here-a1" + ShipToAddressFound + "Country:" + LocalParsedCountry + "<br>"							 
								if (TaxCodeEntered entered)
									OutputTaxCodeDescription = TaxCodeEntered.Description	
									TaxingJurisdiction = ParseTaxCodeDescription
									DisplayMonitor = DisplayMonitor + "[Hdr]Address-ShipToAddressFound:Here-a2" + ShipToAddressFound + "Country:" + LocalParsedCountry + "<br>"
									if (LocalParsedCountry not entered
									and NbrOfRightSlashes > 1)
										if (each.ShipToAddress.Country entered)
											ShipToAddressFound = true
											LocalParsedCountry = each.ShipToAddress.Country
										else	
										if (ShipToAddress.Country entered)
											ShipToAddressFound = true
											LocalParsedCountry = ShipToAddress.Country										
										else
											ShipToAddressFound = true
											LocalParsedCountry = "US"
								else
								if (ShipToAddress.Country entered)
									DisplayMonitor = DisplayMonitor + "[Hdr]Address-ShipToAddressFound:Here-b1" + ShipToAddressFound + "Country:" + LocalParsedCountry + "<br>"
									DisplayMonitor = DisplayMonitor + "[Hdr]Address-ShipToAddressFound:Here-b2" + ShipToAddressFound + "HdrShipToAddress.Country:" + ShipToAddress.Country + "<br>"
									ShipToAddressFound = true								
									LocalParsedCountry					= ShipToAddress.Country			 
									LocalParsedState					= ShipToAddress.StateProvince  
									LocalParsedCity						= ShipToAddress.Municipality 	 
									LocalParsedCounty					= ShipToAddress.County 	
									PostalCodeFirst5					= ShipToAddress.PostalCode[1:5]
									PostalCodeLast4 					= ShipToAddress.PostalCode[6:10] - "-"				

							if (!ShipToAddressFound
							or LocalParsedCountry not entered)
								if (ShipToAddress.Country entered)	
									ShipToAddressFound = true								
									LocalParsedCountry					= ShipToAddress.Country			 
									LocalParsedState					= ShipToAddress.StateProvince  
									LocalParsedCity						= ShipToAddress.Municipality 	 
									LocalParsedCounty					= ShipToAddress.County 	
									PostalCodeFirst5					= ShipToAddress.PostalCode[1:5]
									PostalCodeLast4 					= ShipToAddress.PostalCode[6:10] - "-"	
																							
							constraint (ShipToAddressFound)
								"ShipToTaxCodeOrAddressFromLineItemOrHeaderRequired,HdrTaxCode:<TaxCodeEntered>,HdrCountry:<ShipToAddress.Country>,Line-TaxCode:<each.ShipToTaxCode>Line-Country:<each.ShipToAddress.Country>."
									
							DisplayMonitor = DisplayMonitor + "[4432]ShipToAddressFound:" + ShipToAddressFound + "<br>"	
							DisplayMonitor = DisplayMonitor + "[4433]LocalParsedCountry:" + LocalParsedCountry + "<br>"		
							DisplayMonitor = DisplayMonitor + "[4434]LocalParsedState..:" + LocalParsedState + "<br>"
							DisplayMonitor = DisplayMonitor + "[4435]LocalParsedCity...:" + LocalParsedCity + "<br>"
							DisplayMonitor = DisplayMonitor + "[4436]LocalParsedCounty.:" + LocalParsedCounty + "<br>"
							DisplayMonitor = DisplayMonitor + "[4437]LocalParsedFirst5.:" + PostalCodeFirst5 + "<br>"
							DisplayMonitor = DisplayMonitor + "[4438]LocalParsedLast4..:" + PostalCodeLast4 + "<br>"
																	
							invoke Create IndataTypeINVOICELINESHIPTO
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
								invoked.IndataType             			= "1"
								invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine //each.TaxLineItem.Sequence	//"1"					//each.LineItemNumber 	// "1"	
								invoked.IndataTypeINVOICELINESHIPTO 	= "1"	 
								invoked.COUNTRY							= LocalParsedCountry	
								invoked.STATE							= LocalParsedState 		

								invoked.CITY							= LocalParsedCity		
								invoked.COUNTY							= LocalParsedCounty		
								invoked.POSTCODE						= each.ShipToAddress.PostalCode[1:5]	
								invoked.GEOCODE							= each.ShipToAddress.PostalCode[6:10] - "-" 				
			
							invoke Create IndataTypeINVOICELINESHIPFROM
								invoked.OneSourceTaxCalculation			= "1"
								invoked.TaxCalculationRequest			= "1"
								invoked.IndataType             			= "1"
								invoked.IndataTypeINVOICE      			= "1"
								invoked.IndataTypeINVOICELINE			= EachXmlLine 								//This works 6/20/19 // this didn't work each.TaxLineItem.Sequence	//"1"	//each.LineItemNumber 	// ?? Maybe this should be "1"	
								invoked.IndataTypeINVOICELINESHIPFROM 	= "1"  
								invoked.COUNTRY							= each.ShipFromAddress.Country		 
								invoked.STATE							= each.ShipFromAddress.StateProvince 		

								invoked.CITY							= each.ShipFromAddress.Municipality 	 
								invoked.COUNTY							= each.ShipFromAddress.County 	
								invoked.POSTCODE						= each.ShipFromAddress.PostalCode[1:5]
								invoked.GEOCODE							= each.ShipFromAddress.PostalCode[6:10] - "-" 	
								





							Trigger = each.Load1SourceUserAttributesFrDerived			
							LocalOneSourceTaxAttribute 	= each.TransientUserElement50	

							LocalLevelUserFieldError = "Line:" + EachXmlLine + ","
							Trigger = EditUserElements  								
							Idx = 0
							while (Idx < 25)
								Idx +=1

								if (LocalOneSourceTaxAttribute.UserElement[Idx].Number entered)
									invoke Create IndataTypeINVOICELINEUSERELEMENT
										invoked.OneSourceTaxCalculation				= "1"
										invoked.TaxCalculationRequest				= "1"				
										invoked.IndataType             				= "1"
										invoked.IndataTypeINVOICE      				= "1"
										invoked.IndataTypeINVOICELINE				= EachXmlLine 								//Test this one	//each.LineItemNumber 	// "1"	
										invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalOneSourceTaxAttribute.UserElement[Idx].Number		 
										invoked.NAME								= LocalOneSourceTaxAttribute.UserElement[Idx].Name		 
										invoked.VALUE								= LocalOneSourceTaxAttribute.UserElement[Idx].Value							





				


					initialize TaxLineItemsToProcess									
					TaxLineItemsToProcess = EachXmlLine 

				DisplayMonitor = DisplayMonitor + "<pre>" + "TimeStamp: " + DerivedTimestamp + "<br>"
				if (EachXmlLine > 0)
					if (UseNewResponseCode)



						DisplayMonitor = DisplayMonitor + "useCalculateTax2:UseNewResponseCode" + UseNewResponseCode + "<br>"
						invoke CalculateTax2 OneSource			
							resume on error						
								WebServiceError = true
								WebServiceErrorMessage = error message						
							invoked.Request     = "1"

							MyResponse          = result.Response							
							MyHTTPInfo			= result.MyHTTPInfo	
						invoke ParseXML TaxFacadeSerializer				
							resume on error								
								WebServiceError = true					// 8-28-19 But this value is still "false" 
								WebServiceErrorMessage = error message	
							invoked.Response 	= MyResponse			
							MyXMLDocument 		= result.ParsedXML		
					else	

						DisplayMonitor = DisplayMonitor + "useCalculateTax2:EachXmlLine" + EachXmlLine + "<br>"
						invoke CalculateTax OneSource
							resume on error
								WebServiceError = true
								WebServiceErrorMessage = error message						
							invoked.Request     = "1"
							MyResponse          = result.Response	
							MyHTTPInfo			= result.MyHTTPInfo					

				RequestStopTimestamp = DerivedTimestamp time	



				if (MyHTTPInfo.Failed)

					RequestXML = MyHTTPInfo.RequestBody			
					ResponseXML = MyHTTPInfo.ResponseBody		
					Trigger = ParseWebserviceError
 					DisplayMonitor = DisplayMonitor + "[1771.Failed]WebServiceError:" + WebServiceError + "<br>"
				else
					DisplayMonitor = DisplayMonitor + "[1773.NotFailed]WebServiceError:" + WebServiceError + "<br>"
					HttpStatusCode = MyHTTPInfo.StatusCode					
					RequestXML = MyHTTPInfo.RequestBody
					ResponseXML =  MyHTTPInfo.ResponseBody




				
				DisplayMonitor = DisplayMonitor + "[1782.]MyHTTPInfo.Failed:" + MyHTTPInfo.Failed + "<br>"
				CapturedXml = CapturedXml + MyHTTPInfo.RequestBody + MyHTTPInfo.ResponseBody

				if (StoreErrors
				and WebServiceError)			
					DisplayMonitor = DisplayMonitor + "[1787]MyHTTPInfo.Failed.....:" + MyHTTPInfo.Failed + "<br>"
					DisplayMonitor = DisplayMonitor + "[1788]WebServiceError.......:" + WebServiceError + "<br>"
					DisplayMonitor = DisplayMonitor + "[1789]WebServiceErrorMessage:" + WebServiceErrorMessage + "<br>"
					DisplayMonitor = DisplayMonitor + "[1790]XMLDocument:" + MyXMLDocument 	
				else	
					constraint (!WebServiceError)
						"MyHTTPInfo.Failed:<MyHTTPInfo.Failed>,WebServiceError:<WebServiceError>,<WebServiceErrorMessage>" 
						
				if (WebServiceError				// this is true, with "could not parse error
				or MyHTTPInfo.Failed)			
					DisplayMonitor = DisplayMonitor + "[1797]WebserviceFailed;DoNotContinue"	
				else

				if (EachXmlLine > 0)		

					ResponseStartTimestamp = DerivedTimestamp time
					include LoadResults				

					ResponseStopTimestamp = DerivedTimestamp time	
				
				StopTimestamp		= DerivedTimestamp
				


		ValidateOneSourceUsingCalculateTax is an Instance Action	 	
			completion message is "One\SourceGenericConnectionSuccessfull;IsSuccess<IsSuccess>;TaxRate:<OutputTaxRate>,<PartialValidationAddress>"					
			valid when (OneSourceVersionType.Generic)
			Local Fields											 
			Parameter Rules											 
			Action Rules	
				constraint (TaxConfigurationRel.ThirdParty.Sabrix)
					"TaxConfigurationNotSetToOne\Source"
				initialize OutputTaxRate
				initialize DisplayMonitor
				CalculateTax.CallingModule				= "SabrixClient"
				CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				CalculateTax.RelatedObjectReference		= reference to this instance
				CalculateTax.InFinanceEnterpriseGroup   = FinanceEnterpriseGrp 
				CalculateTax.HostSystem					= HostSystem			
				CalculateTax.CallingSystem				= CallingSystemNumber		
				CalculateTax.ExternalCompany			= ExternalCompany		
				CalculateTax.ExternalCompanyName		= ExternalCompanyName
				CalculateTax.FilterGroupName			= FilterGroupName	 
				CalculateTax.FilterGroupOwner			= FilterGroupOwner	 
				CalculateTax.ProductMappingGroupName	= MappingGroupName	 
				CalculateTax.ProductMappingGroupOwner	= MappingGroupOwner	 
				
				Trigger									= CalculateTax.ValidateOneSourceGeneric

				DisplayMonitor 							= CalculateTax.DisplayMonitor
				IsSuccess								= CalculateTax.IsSuccess
				if (!StoreErrors)	
					constraint (IsSuccess)   
						"ValidateConnectionFailed;IsSuccess<IsSuccess>,Error:<CalculateTax.OutputErrorMessage>,<WebServiceErrorMessage>" 								
				OutputTaxRate							= CalculateTax.OutputTaxRate
				CapturedXml 							= CalculateTax.CapturedXml	
				ValidationPostalAddress					= CalculateTax.ReturnedValidationAddress
				
		LoadParametersFromTaxConfiguration is an Instance Action
			default label is untranslatable	 
			restricted			
			Parameters
				LoadFrom is Alpha 1
					States
						TaxConfiguration		value is blank
						TaxConfigurationVersion	value is "1"	
				LoadDefaultData					is Boolean		
			Action Rules
				constraint (OneSourceVersionType = TaxConfigurationRel.OneSourceVersionType)
					"OneSourceVersionTypesAreNotTheSame.ChangeOneSourceVersionTypeToMatch_/Tax/Configuration"


		      	if (LoadFrom.TaxConfigurationVersion)
			      	CallingSystemNumber 	= TaxConfigurationVersionRel.CallingSystem 	 			 
					FilterGroupName			= TaxConfigurationVersionRel.FilterGroupName			 
					FilterGroupOwner		= TaxConfigurationVersionRel.FilterGroupOwner			 
					HostSystem				= TaxConfigurationVersionRel.HostSystem				 
					MappingGroupName		= TaxConfigurationVersionRel.ProductMappingGroupName	 
					MappingGroupOwner		= TaxConfigurationVersionRel.ProductMappingGroupOwner	 
					CompanyRole				= TaxConfigurationVersionRel.CompanyRole 				 
					ExternalCompany			= TaxConfigurationVersionRel.ExternalCompanyId			 	
					ExternalCompanyName		= TaxConfigurationVersionRel.ExternalCompanyIdName		 
					OneSourceUserName		= TaxConfigurationVersionRel.UserName	 		 	
					OneSourcePassword	 	= TaxConfigurationVersionRel.OneSourcePassword			      	
		      	else
			      	CallingSystemNumber 	= TaxConfigurationRel.CallingSystem 	 			 
					FilterGroupName			= TaxConfigurationRel.FilterGroupName			 
					FilterGroupOwner		= TaxConfigurationRel.FilterGroupOwner			 
					HostSystem				= TaxConfigurationRel.HostSystem				 
					IsAudited				= TaxConfigurationRel.IsAudited	 				 
					MappingGroupName		= TaxConfigurationRel.ProductMappingGroupName	 
					MappingGroupOwner		= TaxConfigurationRel.ProductMappingGroupOwner	 
					CompanyRole				= TaxConfigurationRel.CompanyRole 				
					ExternalCompany			= TaxConfigurationRel.ExternalCompanyId			 	
					ExternalCompanyName		= TaxConfigurationRel.ExternalCompanyIdName		 
					LocalCompanyName		= TaxConfigurationRel.ExternalCompanyIdName		
					OneSourceUserName		= TaxConfigurationRel.SabrixVersion.UserName	 		 	
					OneSourcePassword	 	= TaxConfigurationRel.SabrixVersion.OneSourcePassword	
				
				if (LoadDefaultData)				
					CurrencyCode			= "USD"	 
					TransactionType			= "GS"
					VendorCustomer			= "44857" 
					VendorCustomerName		= "Vendor1"	
					InvoiceDate				= current corporate date		//"20170428"	
					InvoiceNumber			= "187881859"
					TaxableAmount			= 100.00 	
					LineNumber				= 1
					InvoiceAmount			= 107.50	//"43643.60"
					ShipFromAddress			= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
					ShipToAddress			= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
					OneSourceVersionType    = TaxConfigurationRel.OneSourceVersionType

				
		SaveTheseOneSourceParameters  is an Instance Action	 	

			default label is untranslatable	 
			restricted
			Parameters

			Local Fields
			Parameter Rules	
			Action Rules
				invoke Update TaxConfigurationRel
				    invoked.CallingSystem 	 			    	= CallingSystemNumber 	
					invoked.FilterGroupName			        	= FilterGroupName			
					invoked.FilterGroupOwner			        = FilterGroupOwner		
					invoked.HostSystem				        	= HostSystem				
					invoked.IsAudited	 				        = IsAudited				
					invoked.ProductMappingGroupName	        	= MappingGroupName		
					invoked.ProductMappingGroupOwner	        = MappingGroupOwner		
					invoked.CompanyRole 				        = CompanyRole				
					invoked.ExternalCompanyId			 	    = ExternalCompany			
					invoked.ExternalCompanyIdName		        = ExternalCompanyName		





		TestUpdatingTaxConfigPasswords is an Instance Action	  

			completion message is "SecuredPasswordSuccessfullyUpdated"	
			Parameters
				EncryptedPassword is Password
				TextPassword is Alpha 16
				UpdateWithCurrentPassword is Boolean
				ClearUnencryptedPassword is Boolean
				ClearEncryptedPassword is Boolean
			Action Rules
				if (ClearEncryptedPassword)
					constraint (EncryptedPassword not entered)
						"CannotClearEncryptedPasswordAndEnterItAtTheSameTime"

				if (ClearUnencryptedPassword)
					constraint (TextPassword not entered)
						"CannotClearTextPasswordAndEnterItAtTheSameTime"
												
				invoke UpdatePassword TaxConfigurationVersionRel	
					invoked.UpdateWithCurrentPassword = UpdateWithCurrentPassword
					invoked.ClearUnencryptedPassword = ClearUnencryptedPassword
					invoked.ClearEncryptedPassword = ClearEncryptedPassword
					invoked.EnterPassword = EncryptedPassword  							
				
				if (TextPassword entered)	
					invoke Update TaxConfigurationVersionRel	
						invoked.OneSourcePassword = TextPassword	 					

		TestCalculateBaseAmounts is an Instance Action	  
			completion message is "BaseAmountSuccessfullyCalculated"	
			default label is untranslatable
			restricted		
			Parameters
				JustClearDisplayMonitor is Boolean
				PrmInitializeCurrencyRate is Boolean


			Local Fields

			Action Rules
				initialize LocalComment
				initialize DisplayMonitor
				LocalInitializeCurrencyRate = PrmInitializeCurrencyRate


				LocalCurrencyRate = GetConversionRate	
				LocalComment = LocalComment + "[1573]Begin--------BackToInstanceCall----------------------------"	+ "<br>"
				LocalComment = LocalComment + "LocalCurrencyRate_returned...........:" + LocalCurrencyRate + "<br>" 
				if (JustClearDisplayMonitor)
					display "AllDone"
				else																
				if (InvoiceAmount entered)
					initialize LocalBaseAmount.BaseAmount
					LocalBaseAmount.TransactionAmount = InvoiceAmount

					if (CurrencyRate entered)
						if (PrmInitializeCurrencyRate)
							initialize LocalBaseAmount.BaseAmount.EnteredCurrencyRate 
							initialize CurrencyRate 
							LocalExchangeDate = current corporate date
						else	
							LocalBaseAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate
							LocalExchangeDate = current corporate date							
					
					LocalFromCurrency = CurrencyCode									
					LocalComment = LocalComment + "CurrencyCode..(From)..........:" + CurrencyCode 												+ "<br>"
					LocalBaseAmount.BaseAmount.ToCurrency = LegalEntity.FunctionalCurrency	
					
					LocalComment = LocalComment + "[1576]OutputCurrencyAmount...........:" + LocalBaseAmount.BaseAmount.OutputCurrencyAmount	+ "<br>" 
					LocalComment = LocalComment + "BaseAmount.EnteredCurrencyRate.......:" + LocalBaseAmount.BaseAmount.EnteredCurrencyRate 	+ "<br>"
					LocalComment = LocalComment + "Here2OutputCurrencyRate..............:" + LocalBaseAmount.BaseAmount.OutputCurrencyRate		+ "<br>"


					LocalComment = LocalComment + "BaseAmount.FromCurrency..............:" + LocalBaseAmount.BaseAmount.FromCurrency 			+ "<br>"
									

					LocalBaseAmount.BaseAmount.ToCurrency = LegalEntity.FunctionalCurrency				

					LocalComment = LocalComment + "CurrencyCode(From)............:" + CurrencyCode												+ "<br>"

					LocalComment = LocalComment + "ToCurrency...........................:" + LegalEntity.FunctionalCurrency 					+ "<br>"	
					LocalComment = LocalComment + "LocalExchangeDate....................:" + LocalExchangeDate 									+ "<br>"	
					LocalComment = LocalComment + "CurrencyRate.........................:" + CurrencyRate 										+ "<br>"
					LocalComment = LocalComment + "EnteredCurrencyAmount................:" + LocalBaseAmount.BaseAmount.EnteredCurrencyAmount	+ "<br>"

					LocalComment = LocalComment + "------------------CalculateBaseAmountResults--------------------"  							+ "<br>"   
					LocalComment = LocalComment + "LocalFromCurrency....................:" + LocalFromCurrency 									+ "<br>"	
					LocalComment = LocalComment + "CurrencyCode..................:" + CurrencyCode												+ "<br>"
					LocalComment = LocalComment + "LocalBaseAmount.TransactionAmount....:" + LocalBaseAmount.TransactionAmount 					+ "<br>"
					LocalComment = LocalComment + "BaseAmount.FromCurrency..............:" + LocalBaseAmount.BaseAmount.FromCurrency 			+ "<br>"
					LocalComment = LocalComment + "BaseAmount.TransactionAmount.........:" + LocalBaseAmount.BaseAmount.TransactionAmount		+ "<br>"		 
					LocalComment = LocalComment + "BaseAmount.ExchangeDate..............:" + LocalBaseAmount.BaseAmount.ExchangeDate 			+ "<br>"
					LocalComment = LocalComment + "BaseAmount.ToCurrency................:" + LocalBaseAmount.BaseAmount.ToCurrency				+ "<br>"
					LocalComment = LocalComment + "BaseAmount.ContextToCurrency.........:" + LocalBaseAmount.BaseAmount.ContextToCurrency 		+ "<br>"
				  	LocalComment = LocalComment + "BaseAmount.BaseAmount.CurrencyTable..:" + LocalBaseAmount.BaseAmount.CurrencyTable 			+ "<br>"
				  	LocalComment = LocalComment + "FinanceEnterpriseGroup.CurrencyTable.:" + LegalEntity.FinanceEnterpriseGroup.CurrencyTable   + "<br>"	
					LocalComment = LocalComment + "OutputCurrencyAmount.................:" + LocalBaseAmount.BaseAmount.OutputCurrencyAmount	+ "<br>" 
					LocalComment = LocalComment + "OutputCurrencyRate...................:" + LocalBaseAmount.BaseAmount.OutputCurrencyRate 		+ "<br>"
					LocalComment = LocalComment + "</pre>"
					DisplayMonitor = LocalComment																															
