ContractTierQualifier is a BusinessClass
    owned by po
    prefix is COTQ

    Ontology
    	symbolic key is ContractTierQualifier

	Persistent Fields
		BaseTier                            is Boolean
			default label is "NoQualifierRequired"
		PurchaseType	 					is Numeric size 1
			States
				TotalPurchases					value is 1
				TargetedPurchases				value is 2		
		PurchaseBy 							is Numeric size 1
    		default label is "CalculationBasis"
			States
    			PurchasePrice  					value is 1
					default label is "FromPurchaseOrders"
    			InvoicePrice     				value is 2
					default label is "FromInvoices"
    	PurchaseOperator					is AlphaUpper size 2
    		States
    			LessThanOrEqualTo   			value is "LE"
    			GreaterThanOrEqualTo			value is "GE"
    			EqualTo							value is "EQ"
    			LessThan						value is "LT"
    			GreaterThan						value is "GT"
    	PurchaseAmtPct    			
    	OrGroup								is AlphaUpper size 1
    	TargetedPurchasesFromDate			is Date
    	TargetedPurchasesToDate				is Date
    	PurchaseQuantity				    is an UnsignedItemQuantity	
 		PurchaseBeginRange  				is Date
 		PurchaseEndRange	    			is Date    	    	
		ModifiedLinesExist					is Boolean
    	
	Local Fields
		LocalResult							is Boolean
		LocalContractTierQualifierCode		is a ContractTierQualifierCode
	
	Transient Fields 
		TransientCreateQualifierContract    is Boolean 
		TransientCreateForAllItems          is Boolean 
	
	Context Fields
		ContractTierMember
	 
	Derived Fields
    	ConvertedPercent is a ComputeField
    		type is Decimal size 4.2
    		restricted
   			(PurchaseAmtPct.PurchasePercent * 100)
   			
    	ConvertedAmount is a DerivedField
    		type is like InternationalCost
				precision is 2
   			default label is "Amount"
			return (PurchaseAmtPct.PurchaseAmount * 1)
		
		DerivedPercent is a StringField
			type is Alpha 8
			default label is "Percent"
			ConvertedPercent
			"%"
			
    	FormattedPercentAmount is a ConditionalField
			type is Alpha 30
			if (PurchaseAmtPct.PurchaseAmount > 0)
				ConvertedAmount				
			else
			if (PurchaseAmtPct.PurchasePercent > 0)
				DerivedPercent
			else
				blank
			
		DerivedPurchasePercent is a DerivedField
			type is Percent 4.1
			if (CompanyOnlyMember)
				if (NextTierItemQualifierByAmount)
					return ((sum PolineFactsCompanyForContractRel.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
				if (NextTierCodesQualifierByAmount)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 
			else
			if (CompanyLocationMember)	
				if (NextTierItemQualifierByAmount)
					return ((sum PolineFactsCompanyLocationForContractRel.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
				if (NextTierCodesQualifierByAmount)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 
			else
			if (CompanyRqLocMember)					
				if (NextTierItemQualifierByAmount)
					return ((sum PolineFactsCompanyRqLocForContractRel.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
				if (NextTierCodesQualifierByAmount)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 

		TierMemberLocationMessage is a MessageField
			restricted
			"TierMemberLocation<ContractTierMember.Location>"
		
		AmountPathMessage is a MessageField
			restricted
			"AmountPath"
			
		ReturnZeroMesssage is a MessageField
			restricted
			"ReturnZero"
		
		DerivedThisTierPurchasePercent is a DerivedField
			type is Percent 4.1
			restricted
			if (CompanyOnlyMember)
				if (PurchaseAmountQualifier)
					return ((sum PolineFactsCompanyForContractRel.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
				if (PurchasePercentQualifier)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 
			else
			if (CompanyLocationMember)	
				if (PurchaseAmountQualifier)
					return ((sum PolineFactsCompanyLocationForContractRel.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
				if (PurchasePercentQualifier)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 
			else
			if (CompanyRqLocMember)					
				if (PurchaseAmountQualifier)
					return ((sum PolineFactsCompanyRqLocForContractRel.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
				if (PurchasePercentQualifier)
					return ((sum ContractTierMemberQualifierPurchaseOrderLine set.ExtendedAmt) / PurchaseAmtPct.PurchaseAmount)
				else
					return 0% 

		DerivedNextDisplayOrder is a ComputeField
			type is Numeric 8
			restricted
			(ContractTier.DisplayOrder + 1)
			
		DerivedNextTierDifferentCodes is a DerivedField
			type is Boolean
			restricted
			LocalResult			= false
			for each ContractTierQualifierCodeRel
				LocalContractTierQualifierCode		= each.ContractTierQualifierCode
				if  (!NextTierQualifierCodeRel exists
				or  (NextTierQualifierCodeRel exists
				and (each.CommodityCode				!= NextTierQualifierCodeRel.CommodityCode
				or   each.ManufacturerInfo			!= NextTierQualifierCodeRel.ManufacturerInfo
				or   each.MajorPurchasingClass		!= NextTierQualifierCodeRel.MajorPurchasingClass
				or   each.MinorPurchasingClass		!= NextTierQualifierCodeRel.MinorPurchasingClass
				or   each.UnspscCode				!= NextTierQualifierCodeRel.UnspscCode
				or   each.ItemCategory				!= NextTierQualifierCodeRel.ItemCategory)))
					LocalResult						= true
						
			return LocalResult
			
		DerivedNextTierAchieved is a DerivedField
			type is Boolean
			restricted
			LocalResult			= false
			for each ContractTierMemberQualifierPurchasesPiePiecesRel
				if (each.PurchasesIndicator.AmountOrPercentYetToGo)
					if (each.PurchaseAmount	not entered
					and each.PurchasePercent not entered)
						LocalResult		= true
						
			return LocalResult
			
		PercentProgressToTheNextTierMessage is a MessageField
			restricted
			"ThatIsAPercentProgressToTheNextTierOf<DerivedPurchasePercent>"
			
		PercentOfAllPurchases is a ConditionalField
			type is Alpha 9
			restricted
			if (ContractTierMemberQualifierRel.CurrentPercentOfAllPurchases entered)
				ContractTierMemberQualifierRel.CurrentPercentOfAllPurchases + " "
			else
				"0%"
				
		TotalAllPurchases is a ConditionalField
			type is Alpha 25
			restricted
			if (ContractTierMemberQualifierRel.CurrentTotalAllPurchases entered)
				ContractTierMemberQualifierRel.CurrentTotalAllPurchases
			else
				"0.00"
				
		PercentOfAllPurchasesMessage is a MessageField
			restricted
			"YouHavePurchased<PercentOfAllPurchases>OfPurchasesTotaling<TotalAllPurchases>"
			
		AsOfMessage is a MessageField
			restricted
			"AsOf<ContractTierMemberQualifierRel.TotalPurchasesTimeStamp>"
			
	Conditions
		EmptyQualifier
			restricted
			when (PurchaseType = 0)
		MissingAmtPct
			restricted
			when (PurchaseAmtPct.PurchaseAmount !entered
			and   PurchaseAmtPct.PurchasePercent !entered)
		CodesExist
			restricted
			when (ContractTierQualifierCodeRel exists)
		PurchaseAmountQualifier
			restricted
			when (PurchaseAmtPct.PurchaseAmount entered)
		PurchasePercentQualifier
			restricted
			when (PurchaseAmtPct.PurchasePercent entered)
		CompanyOnlyMember
			restricted
			when (ContractTierMember.Company	entered
			and   ContractTierMember.Location	not entered
			and   ContractTierMember.RequestingLocation		not entered)
		CompanyLocationMember
			restricted
			when (ContractTierMember.Company	entered
			and   ContractTierMember.Location	entered
			and   ContractTierMember.RequestingLocation		not entered)
		CompanyRqLocMember
			restricted
			when (ContractTierMember.Company	entered
			and   ContractTierMember.Location	not entered
			and   ContractTierMember.RequestingLocation		entered)
		ItemAndCompany
			restricted
			when (CompanyOnlyMember
			and   !CodesExist)
		ItemAndLocation
			restricted
			when (CompanyLocationMember
			and   !CodesExist)
		ItemAndRequestingLocation
			restricted
			when (CompanyRqLocMember
			and   !CodesExist)
		HasNextHigherTier
			restricted
			when (NextHigherTierRel exists)
		HasNextTierQualifier
			restricted
			when (NextTierQualifierRel exists)
		NextTierItemQualifierByAmount
			restricted
			when (HasNextHigherTier
			and   NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount entered
			and  !CodesExist)
		NextTierCodesQualifierByAmount
			restricted
			when (HasNextHigherTier
			and   NextTierQualifierRel.PurchaseAmtPct.PurchaseAmount entered
			and   CodesExist)
		HasNextTierProgress
			restricted
			when (HasNextHigherTier
			and   ContractTierMemberQualifierPurchasesPiePiecesRel exists)
		PiePiecesExist
			restricted
			when (ContractTierMemberQualifierPurchasesPiePiecesRel exists)
		PurchaseOrderLinesExist
			restricted
			when (ContractTierMemberQualifierPurchaseOrderLinesRel exists)	
		NextTierDifferentCodes
			restricted
			when (DerivedNextTierDifferentCodes = true)			
		DifferentPurchaseOrderLinesExist
			restricted
			when (PurchaseOrderLinesExist
			and   NextTierDifferentCodes)
		DifferentCodesExist
			restricted
			when (CodesExist
			and   NextTierDifferentCodes)
		CompanyPurchaseOrderLinesExist
			restricted
			when (ItemAndCompany
			and   PolineFactsCompanyForContractRel exists)
		LocationPurchaseOrderLinesExist
			restricted
			when (ItemAndLocation
			and   PolineFactsCompanyLocationForContractRel exists)
		ReqLocPurchaseOrderLinesExist
			restricted
			when (ItemAndRequestingLocation
			and   PolineFactsCompanyRqLocForContractRel exists)
		NextTierHasBeenReached
			restricted
			when (DerivedNextTierAchieved = true)
		LineQualifiersExist
			restricted
			when (ContractLineTierMemberQualRel exists)
		LineMembersExist
			restricted
			when (ContractLineMemberRel exists)
		CanDisplayCodes 
			restricted 
			when (Contract.HasPercentTierQualifier
			and   !OtherQualifierHasCodes)
		OtherQualifierHasCodes
			restricted 
			when (TierQualifierCodeOtherRel exists)
		FirstTierQualifier 
			restricted 
			when (ContractTierQualifierOtherRel !exists)
		QualifierContractDoesNotExist 
			restricted 
			when (TierQualifierPrimaryContractRel !exists)
		QualifierHasItems 
			when (TierQualifierItemRel exists)
		QualifierHasQualifiedItems
			when (QualifiedTierQualifierItemRel exists)
		TargetedQualifier 
			restricted
			when (PurchaseType = 2)
		QuantityEntered 
			restricted 
			when (PurchaseQuantity > 0)
		OpenContractNotBase
			restricted 
			when (!Contract.ContractStatus.Closed
			and   !BaseTier)
		CanDisplayOtherInformation
			restricted 
			when (!BaseTier
			and   (QuantityEntered 
			or     TargetedQualifier))
		CanPerformTierCalculations 
			restricted 
			when (OpenContractNotBase
			and  (QualifierHasQualifiedItems
			or    Contract.TierQualifierItemNoTierRel exists))
		ComparisonsExist	
			restricted 
			when (TierQualifierCalculationRel exists)
		
				
    Relations
    	ContractTierQualifierCodeRel is a ContractTierQualifierCode set
    	
		ContractLineMemberRel
    		one-to-many relation to ContractLineMember
            Field Mapping uses  symbolic key
          		related.ContractGroup					= ContractGroup
           		related.Contract						= Contract
           	Instance Selection
           		where (related.MfgContractTierInfo.Tier = ContractTier
           		and	   related.Modified = false)
           		
    	ContractLineTierMemberQualRel
    		one-to-many relation to ContractLineTierMemberQual
            Field Mapping uses ByTierQual
          		related.ContractGroup		  = ContractGroup
           		related.Contract			  = Contract
           		related.Tier		  		  = ContractTier
    	
    	ManufacturersRel
    		one-to-many relation to Manufacturer
            Field Mapping uses  symbolic key
          		related.ItemGroup = ContractGroup
          		
  		CommodityCodeRel
  			one-to-many relation to CommodityCode
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				
  		UNSPSCCodeRel
  			one-to-many relation to UNSPSCCode
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				
  		MajorClassRel
  			one-to-many relation to MajorClass
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				related.ClassType	= "P"
  				
  		MinorClassRel
  			one-to-many relation to MinorClass
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				related.ClassType	= "P"

		GMDNPTCodeRel 
			one-to-many relation to GMDNPTCode
			Field Mapping uses symbolic key 
				related.ItemGroup	= ContractGroup			
  				
		TierQualifierPrimaryContractRel
			one-to-many relation to TierQualifierContract
			Field Mapping uses ByReportingContract
				related.ContractGroup 			= ContractGroup 
				related.Contract                = Contract 
				related.SelectedContractNumber  = Contract 
  		
		ContractTierQualifierOtherRel 
			one-to-many relation to ContractTierQualifier 
			Field Mapping uses symbolic key 
				related.ContractGroup 			= ContractGroup 
				related.Contract                = Contract 
			Instance Selection 
				where (related.UniqueID != UniqueID
				and    !related.BaseTier)			

		TierQualifierItemRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByTier 
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ContractTier    		= ContractTier 
				related.ContractTierQualifier	= ContractTierQualifier		

		QualifiedTierQualifierItemRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByTier 
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ContractTier    		= ContractTier 
				related.ContractTierQualifier	= ContractTierQualifier	
			Instance Selection 
				where (related.Qualified)				

		TierQualifierCodeOtherRel 
			one-to-many relation to ContractTierQualifierCode
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection 
				where (related.ContractTier 	    != ContractTier
				or    (related.ContractTier 		  = ContractTier
				and    related.ContractTierQualifier != ContractTierQualifier))						
		
		ContractTierMemberQualifierRel
  			one-to-one relation to ContractTierMemberQualifier
  			Field Mapping uses symbolic key
  				related.ContractGroup					= ContractGroup						
  				related.Contract						= Contract
				related.ContractTierMember				= ContractTierMember
  				related.ContractTier					= ContractTier
  				related.ContractTierQualifier			= ContractTierQualifier
  				related.ContractTierMemberQualifier		= blank
  				
  		ContractTierMemberQualifierPurchaseOrderLinesRel
  			one-to-many relation to ContractTierMemberQualifierPurchaseOrderLine
  			Field Mapping uses symbolic key
  				related.ContractGroup					= ContractGroup						
  				related.Contract						= Contract
				related.ContractTierMember				= ContractTierMember
  				related.ContractTier					= ContractTier
  				related.ContractTierQualifier			= ContractTierQualifier
  				related.ContractTierMemberQualifier		= blank
  				
  		ContractTierMemberQualifierPurchasesPiePiecesRel
  			one-to-many relation to ContractTierMemberQualifierPurchasesPiePiece
  			Field Mapping uses symbolic key
  				related.ContractGroup					= ContractGroup						
  				related.Contract						= Contract
				related.ContractTierMember				= ContractTierMember
  				related.ContractTier					= first NextHigherTierRel.ContractTier
  				related.ContractTierQualifier			= ContractTierQualifier

		PolineFactsCompanyForContractRel
			one-to-many relation to PolineFact
			Field Mapping uses ByCompanyItem
				related.PurchasingCompany		= ContractTierMember.Company
				related.CmContract				= Contract

		PolineFactsCompanyLocationForContractRel
			one-to-many relation to PolineFact
			Field Mapping uses ByCompLocItem
				related.PurchasingCompany		= ContractTierMember.Company
				related.Location				= ContractTierMember.Location
				related.CmContract				= Contract

		PolineFactsCompanyRqLocForContractRel
			one-to-many relation to PolineFact
			Field Mapping uses ByCmpRqLcItem
				related.PurchasingCompany		= ContractTierMember.Company
				related.RequestingLocation		= ContractTierMember.RequestingLocation
				related.CmContract				= Contract

		NextHigherTierRel
			one-to-many relation to ContractTier
			Field Mapping uses ByDisplayOrder
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
			Instance Selection
				where (related.DisplayOrder			= DerivedNextDisplayOrder)
				
		NextTierQualifierRel
			one-to-one relation to ContractTierQualifier
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractTier				= first NextHigherTierRel.ContractTier
				related.ContractTierQualifier		= ContractTierQualifier
				
		NextTierQualifierCodeRel
			one-to-one relation to ContractTierQualifierCode
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractTier				= first NextHigherTierRel.ContractTier
				related.ContractTierQualifier		= ContractTierQualifier
				related.ContractTierQualifierCode	= LocalContractTierQualifierCode

		TierQualifierCalculationRel 
			one-to-many relation to TierQualifierCalculation
			Field Mapping uses ByQualifier
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractTier				= ContractTier
				related.ContractTierQualifier		= ContractTierQualifier
				
        ContractTierQualifierCodesUNSPSCRel is a ContractTierQualifierCode set
           	Instance Selection 
           		where (related.ItemCategory.UNSPSCCode)
           		
        ContractTierQualifierCodesCommodityCodeRel is a ContractTierQualifierCode set
           	Instance Selection 
           		where (related.ItemCategory.CommodityCode)

        ContractTierQualifierCodesManufacturerInformationRel is a  ContractTierQualifierCode set
           	Instance Selection 
           		where (related.ItemCategory.ManufacturerInformation)

        ContractTierQualifierCodesPurchasingClassRel is a ContractTierQualifierCode set
           	Instance Selection 
           		where (related.ItemCategory.PurchasingClass)
           		
        ContractTierMembersRel is a ContractTierMember set
            Instance Selection
                where (related.Tier        = ContractTier)
           		
	Sets
		ByPurchaseAmount
			Sort Order
				ContractGroup
				Contract
				PurchaseAmtPct.PurchaseAmount
				ContractTier
				ContractTierQualifier
			Instance Selection
				where (PurchaseAmountQualifier)
				
	Field Rules
						
	    PurchaseBeginRange
	    	if (Contract.EffectiveDate > 0)	    		
	           	constraint (PurchaseBeginRange >= Contract.EffectiveDate)
	                "BeginDateForQuantityQualifierCannotBeLessThanContractEffectiveDate"
	        if (Contract.ExpirationDate > 0)
	            constraint (PurchaseBeginRange <= Contract.ExpirationDate)
	                "BeginDateForQuantityQualifierCannotBeGreaterThanContractExpirationDate"  
	    
	    PurchaseEndRange
           	constraint (PurchaseEndRange > PurchaseBeginRange)
                "QuantityQualifierEndRangeCannotBeLessThanBeginRange"
           	if (Contract.ExpirationDate > 0)
	            constraint (PurchaseEndRange <= Contract.ExpirationDate)
	                "QuantityQualifierEndDateCannotBeGreaterThanContractExpirationDate"
	    	
	    TargetedPurchasesFromDate
	    	if (PurchaseType.TargetedPurchases)
	    		required
	    			"TargetedPurchasesFromDateIsRequiredWhenTargetedPurchasesIsSelected"
			else
				cannot be entered
	    			"TargetedPurchasesFromDateCannotBeEnteredUnlessTargetedPurchasesIsSelected"
			if (Contract.EffectiveDate > 0)	    		
	           	constraint (TargetedPurchasesFromDate >= Contract.EffectiveDate)
	                "TargetedPurchasesFromDateCannotBeLessThanContractEffectiveDate"
	        if (Contract.ExpirationDate > 0)
	            constraint (TargetedPurchasesFromDate <= Contract.ExpirationDate)
	                "TargetedPurchasesFromDateCannotBeGreaterThanContractExpirationDate"                
			
	    TargetedPurchasesToDate
	    	if (PurchaseType.TargetedPurchases)
	    		required
	    			"TargetedPurchasesToDateIsRequiredWhenTargetedPurchasesIsSelected"
			else
				cannot be entered	    		
	    			"TargetedPurchasesToDateCannotBeEnteredUnlessTargetedPurchasesIsSelected"
           	constraint (TargetedPurchasesToDate > TargetedPurchasesFromDate)
                "TargetedPurchasesToDateCannotBeLessThanFromDate"
           	if (Contract.ExpirationDate > 0)
	            constraint (TargetedPurchasesToDate <= Contract.ExpirationDate)
	                "TargetedPurchasesToDateCannotBeGreaterThanContractExpirationDate"
	                                
		ModifiedLinesExist
			default to false
		
	Actions
    	Create is a Create Action
    		valid when (!Contract.ContractStatus.Closed)
    		Action Rules

				if (!BaseTier)
					constraint (PurchaseType entered)
						"PurchaseTypeIsRequired"
					constraint (PurchaseBy entered)
						"CalculationBasisIsRequired"
					constraint (PurchaseOperator entered)
						"PurchaseOperatorIsRequired"

					if (!PurchaseQuantity entered)
						constraint (!MissingAmtPct)
							"PurchasePercentAnd/OrAmountIsRequired"    	
					if (ContractTierQualifierOtherRel exists)
						for each ContractTierQualifierOtherRel
							constraint (each.PurchaseBy  = PurchaseBy)
								"Calculation_BasisMustBeTheSameForAllQualifiersForThisContract"

						for each ContractTierQualifierOtherRel
							if (each.PurchaseType 		!= PurchaseType
							or  each.PurchaseOperator	!= PurchaseOperator)
								confirmation required 
									"QualifiersExistWithADifferent_Purchase_TypeOr_Purchase_Operator;DoYouWantToContinue?"
								end for each 

					if (PurchaseAmtPct.PurchaseAmount entered
					and PurchaseAmtPct.PurchaseAmount < 1)
						PurchaseAmtPct.PurchaseAmount = 1
    			constraint (ContractTier exists)
    				"TierDoesNotExist"
				if (BaseTier)
					initialize PurchaseType	 					
					initialize PurchaseBy 							
			    	initialize PurchaseOperator					
			    	initialize PurchaseAmtPct    			
			    	initialize OrGroup								
			    	initialize TargetedPurchasesFromDate			
			    	initialize TargetedPurchasesToDate				
			    	initialize PurchaseQuantity				    	
			 		initialize PurchaseBeginRange  				
			 		initialize PurchaseEndRange	    

			Exit Rules 

				if (TransientCreateQualifierContract     
				and TierQualifierPrimaryContractRel !exists)	
					invoke Create TierQualifierContract 
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						invoked.SelectedContractNumber  		= Contract 
						invoked.QualifiedOrCompetitiveContract 	= 1
						if (TransientCreateForAllItems)
							invoked.TransientUseAllItems		= true								  
		
    	Update is an Update Action
    		valid when (!Contract.ContractStatus.Closed)
    		Action Rules
				if (!BaseTier)
					constraint (PurchaseType entered)
						"PurchaseTypeIsRequired"
					constraint (PurchaseBy entered)
						"CalculationBasisIsRequired"
					constraint (PurchaseOperator entered)
						"PurchaseOperatorIsRequired"
					if (!PurchaseQuantity entered)
						constraint (!MissingAmtPct)
							"PurchasePercentOrAmountIsRequired"
					if (PurchaseAmtPct.PurchaseAmount entered
					and PurchaseAmtPct.PurchaseAmount < 1)
						PurchaseAmtPct.PurchaseAmount = 1
					if (ContractTierQualifierOtherRel exists)
						for each ContractTierQualifierOtherRel
							if (!BaseTier)
								constraint (each.PurchaseBy  = PurchaseBy)
									"Calculation_BasisMustBeTheSameForAllQualifiersForThisContract"

								if (each.PurchaseType 		!= PurchaseType
								or  each.PurchaseOperator	!= PurchaseOperator)
									confirmation required 
										"QualifiersExistWithADifferent_Purchase_TypeOr_Purchase_Operator;DoYouWantToContinue?"
									end for each 

				if (BaseTier)
					initialize PurchaseType	 					
					initialize PurchaseBy 							
			    	initialize PurchaseOperator					
			    	initialize PurchaseAmtPct    			
			    	initialize OrGroup								
			    	initialize TargetedPurchasesFromDate			
			    	initialize TargetedPurchasesToDate				
			    	initialize PurchaseQuantity				    	
			 		initialize PurchaseBeginRange  				
			 		initialize PurchaseEndRange	 
			Exit Rules

				if (TransientCreateQualifierContract     
				and TierQualifierPrimaryContractRel !exists)	
					invoke Create TierQualifierContract 
						invoked.ContractGroup					= ContractGroup
						invoked.Contract						= Contract
						invoked.SelectedContractNumber  		= Contract 
						invoked.QualifiedOrCompetitiveContract 	= 1
						if (TransientCreateForAllItems)
							invoked.TransientUseAllItems		= true					
		
    	Delete is a Delete Action
    		valid when (Contract.InProgress)
    		
		PerformTierCalculations is an Instance Action 
			valid when (CanPerformTierCalculations)
			Parameters 
				ParmContractDates                       is Boolean 
					default label is "CalculateForContractDateRange"
				ParmTargetedDates                       is Boolean
					default label is "CalculateForQualifierTargetedDatesIfEntered" 
				ParmDateRange                           is a DateRange 

			Parameter Rules 
				ParmDateRange.Begin 
					if (ParmContractDates = false)
						required

				ParmDateRange.End 
					if (ParmContractDates = false)
						required 

			Action Rules 

				constraint (ParmDateRange entered)
					"MustEnterADateRange"

				invoke PerformTierCalculations Contract 
					invoked.ParmContractGroup		= ContractGroup 
					invoked.ParmContract        	= Contract 
					invoked.CalculateCompetitive	= true 
					invoked.ParmTier				= ContractTier								 
					invoked.ParmQualifier    		= ContractTierQualifier
					if (QualifierHasItems)
						invoked.ParmOnlyForTier     = true
					if (ParmContractDates)
						invoked.ParmDateRange.Begin = Contract.EffectiveDate 
						invoked.ParmDateRange.End   = Contract.ExpirationDate 
					else 
					if (ParmTargetedDates
					and TargetedPurchasesFromDate entered)
						invoked.ParmDateRange.Begin = TargetedPurchasesFromDate 
						invoked.ParmDateRange.End   = TargetedPurchasesToDate 
					else 
						invoked.ParmDateRange       = ParmDateRange 
					invoked.ParmFromQualifier       = true 

		PerformCalculationsForThisTier is an Instance Action 
			valid when (CanPerformTierCalculations)
			Parameters 
				ParmContractDates                       is Boolean 
					default label is "CalculateForContractDateRange"
				ParmTargetedDates                       is Boolean
					default label is "CalculateForQualifierTargetedDates" 
				ParmDateRange                           is a DateRange 

			Parameter Rules 
				ParmDateRange.Begin 
					if (ParmContractDates = false
					and ParmTargetedDates = false)
						required

				ParmDateRange.End 
					if (ParmContractDates = false
					and ParmTargetedDates = false)
						required 

			Action Rules 

				constraint (ParmDateRange entered or ParmContractDates or ParmTargetedDates)
					"SelectADateOption"

				if (ParmDateRange entered)
					constraint (ParmContractDates = false and ParmTargetedDates = false)
						"CanOnlySelectOneDateOption"

				if (ParmContractDates)
					constraint (ParmTargetedDates = false and ParmDateRange !entered)
						"CanOnlySelectOneDateOption"

				if (ParmTargetedDates)
					constraint (ParmContractDates = false and ParmDateRange !entered)
						"CanOnlySelectOneDateOption" 

				invoke PerformTierCalculations Contract 
					invoked.ParmContractGroup		= ContractGroup 
					invoked.ParmContract        	= Contract 
					invoked.CalculateCompetitive	= true 
					invoked.ParmTier				= ContractTier								 
					invoked.ParmQualifier    		= ContractTierQualifier
					if (QualifierHasItems)
						invoked.ParmOnlyForTier     = true
					if (ParmContractDates)
						invoked.ParmDateRange.Begin = Contract.EffectiveDate 
						invoked.ParmDateRange.End   = Contract.ExpirationDate 
					else 
					if (ParmTargetedDates
					and TargetedPurchasesFromDate entered)
						invoked.ParmDateRange.Begin = TargetedPurchasesFromDate 
						invoked.ParmDateRange.End   = TargetedPurchasesToDate 
					else 
						invoked.ParmDateRange       = ParmDateRange 
					invoked.ParmFromQualifier       = true 
				    	
					

					
