StudentActivityBankTransaction is a BusinessClass
    owned by studentactivities
    prefix is SABT

    Ontology
    	symbolic key is StudentActivityBankTransaction

    Persistent Fields
		TransactionAmount				is an InternationalAmount
		DebitAmount						is an InternationalAmount
		CreditAmount					is an InternationalAmount
		AmountType						is Numeric 1
			States
				BankDebit	value is 1
				BankCredit	value is 2
		TransferFromBankAccount			is a TransferBankAccount
		TransactionDate					is Date
		Description						is Alpha 60
		VendorGroup
		StudentActivityVendorFields
		OneTimeVendorName				is Alpha 60
		OneTimeVendorAddress			is a PostalAddressV2	
			holds pii
		OneTimeVendorTaxId 				is a StudentActivityTaxId
		PayablesIncomeCode
		ReportableIncomeAmount			is an InternationalAmount
		ReportableIncomeYearPaid		is Year
		ReportableIncomeObjectID								
			classic name is RIC-OBJ-ID
		ReconciledAmount				is an InternationalAmount
		ReconciledDate					is Date
		ReconcilingBankStatement
		VoidDate						is Date
		Status							is Numeric 2
			States
				Entered		value is 0
				Released	value is 1
				Reconciled	value is 2
				Voided		value is 3
		DetailsClosed					is Boolean
		CreatedFromBankStatement		is Boolean
		AmountToTextTranslation
		SelectedForBatchCheckPrinting	is Boolean
		CheckPrinted					is Boolean
		PrintedLaserCheck				is an AlternateAttachment
		NSFPaymentNumber				is Numeric 10
		NSFReDeposit					is Boolean
		NSFReDepositReceiptNumber		is a StudentActivityReceipt
			delete ignored
		NSFFeeTransactionNumber			is Numeric 10
		NSFFeeAmount					is an InternationalAmount
		NSFFeeAccount					is a SchoolActivityAccount
		NSFStudentRecord				is a StudentRecord
		NSFRelatedReceiptRecord			is a StudentActivityReceipt
		SchoolAccountCode

			
	Local Fields
		LocalStudentActivityVendor		is a StudentActivityVendor view
		LocalStudentActivityReceiptView	is a StudentActivityReceipt view
		LocalAttributeCtr   			is Numeric 2			

	Derived Fields
	
		ContextMessageEntityType is a StringField
			type is Alpha 40
			restricted
			"InforStudentActivityBankTransaction"

		ContextMessageText is a MessageField
			restricted
			"TransactionNumber<StudentActivityBankTransaction>"
		
		TotalReceipts	is a DerivedField
			type is like InternationalAmount
			return (sum StudentActivityReceipt set.ReceiptAmount)

		TotalDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum StudentActivityBankTransDetailRel.BankTransDetailAmount) 
						
		TotalTransferToAmount is a DerivedField
			type is like InternationalAmount
			return (sum TransferToBankTransactionRel.TransactionAmount) 

		OutOfBalanceAmount is a DerivedField
			type is like InternationalAmount
			if (Status.Entered
			and BankTransactionType.Deposit)
				return (TransactionAmount - TotalReceipts)
			else
				if  (Status.Entered
				and (BankTransactionType.Adjustment
				or   BankTransactionType.Disbursement
				or   BankTransactionType.NSFRecord))
					return (TransactionAmount - TotalDetailAmount)
				else
					if (Status.Entered
					and BankTransactionType.Transfer)
						return (TransactionAmount - TotalTransferToAmount)

		DerivedTransactionAmount is a DerivedField
			type is like InternationalAmount
			return (CreditAmount - DebitAmount)
			
		DerivedReconciledAmount is a DerivedField
			type is like InternationalAmount
			if (AmountType.BankDebit)
				return ReconciledAmount *-1
			else
				return ReconciledAmount

		DerivedName		is a DerivedField
			type is Alpha 40
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Name
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorName
				else
					return StudentActivityVendorFields.Vendor.VendorName 
			
		DerivedAddress1	is a DerivedField
			type is Alpha 40
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.DeliveryAddress.AddressLine1
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.DeliveryAddress.AddressLine1
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
					
		DerivedAddress2	is a DerivedField
			type is Alpha 40
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.DeliveryAddress.AddressLine2
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.DeliveryAddress.AddressLine2
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2

		DerivedAddress3	is a DerivedField
			type is Alpha 40
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.DeliveryAddress.AddressLine3
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.DeliveryAddress.AddressLine3
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine3

		DerivedAddress4	is a DerivedField
			type is Alpha 40
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.DeliveryAddress.AddressLine4
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.DeliveryAddress.AddressLine4
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine4
		
		DerivedCity	is a DerivedField
			type is Alpha 30
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.Municipality
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.Municipality
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.Municipality

		DerivedState	is a DerivedField
			type is Alpha 3
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.StateProvince
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.StateProvince
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.StateProvince

		DerivedPostalCode	is a DerivedField
			type is Alpha 10
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.PostalCode
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.PostalCode
				else
					return StudentActivityVendorFields.Vendor.CurrentAddressRel.PostalAddress.StateProvince

		DerivedCounty	is a DerivedField
			type is Alpha 30
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				return StudentActivityVendorFields.StudentActivityVendor.Address.County
			else
				if (StudentActivityVendorFields.OneTimeVendor)
					return OneTimeVendorAddress.County

		CheckDate is a MessageField
			"<TransactionDate month>/<TransactionDate day>/<TransactionDate year>"

		CheckAmount	is a DerivedField
			type is like InternationalAmount
			return TransactionAmount

		CheckPayeeCityStateZip is a MessageField
			"<DerivedCity>_<DerivedState>_<DerivedPostalCode>"

		CheckPayeeAddress2 is a DerivedField
			type is Alpha 45
			if (DerivedAddress2 != blank)
				return DerivedAddress2
			else
				if (DerivedAddress3 != blank)
					return DerivedAddress3
				else
					if (DerivedAddress4 != blank)
						return DerivedAddress4
					else
						return CheckPayeeCityStateZip 
					
		CheckPayeeAddress3 is a DerivedField
			type is Alpha 45
			if (DerivedAddress2	!= blank
			and DerivedAddress3	!= blank)
				return DerivedAddress3
			else
				if (DerivedAddress4	!= blank)
					if ((DerivedAddress2	= blank
					and  DerivedAddress3	!= blank)
					or  (DerivedAddress2	!= blank
					and  DerivedAddress3	= blank))
						return DerivedAddress4
			if ((DerivedAddress2	!= blank
			and  DerivedAddress3	= blank
			and  DerivedAddress4	= blank)
			or  (DerivedAddress3	!= blank
			and  DerivedAddress2	= blank
			and  DerivedAddress4	= blank)
			or  (DerivedAddress4	!= blank
			and  DerivedAddress2	= blank
			and  DerivedAddress3	= blank))
				return CheckPayeeCityStateZip 
					
		CheckPayeeAddress4 is a DerivedField
			type is Alpha 45
			if ((DerivedAddress2	= blank
			and  DerivedAddress3	!= blank
			and  DerivedAddress4	!= blank)
			or  (DerivedAddress3	= blank
			and  DerivedAddress2	!= blank
			and  DerivedAddress4	!= blank)
			or  (DerivedAddress2	!= blank
			and  DerivedAddress3	!= blank))
				return CheckPayeeCityStateZip 

		CheckPayeeAddress5 is a DerivedField
			type is Alpha 45
			if (DerivedAddress2 != blank
			and DerivedAddress3 != blank
			and DerivedAddress4 != blank)
				return CheckPayeeCityStateZip 

		UnreconcileButtonMessage is a ConditionalField
			type is Alpha 15
			if (CreatedFromBankStatement)
				"Delete"
			else	
				"UnReconcile"

		DetailsNotPosted is a DerivedField
			type is Boolean
			if (first StudentActivityBankTransDetail set.Status.Released)
				return true
			else
				return false

		VendorInvoiceCount is a ComputeField
			type is Numeric 2
			(instance count of StudentActivityVendorInvoice set)

		NSFRedepositReceiptDescription	is a MessageField
			"NSFReturnNumber<StudentActivityBankTransaction>Returned<TransactionDate>"			

		NSFRecordBankFeeDescription	is a MessageField
			"NSFReturnNumber<StudentActivityBankTransaction>BankFeeForPayment<NSFPaymentNumber>"			

		CheckStatus is a ConditionalField
			type is Alpha 18
			if (SelectedForBatchCheckPrinting
			and !CheckPrinted)
				"SelectedForBatch"
			else
			if (Status.Released
			and !CheckPrinted)
				"ReleasedForPayment"
			else
			if (CheckPrinted)
				"CheckPrinted"
			else
				"Entered"

		ViewCheckMessage is a ConditionalField
			type is Alpha 20
			if (Status.Entered)
				"ViewCheck"
			else
				"ViewAndPrintCheck"


	Transient Fields
		NewVendorName				is Alpha 60
		NewVendorAddress			is a PostalAddressV2	
			holds pii
		NewTaxId					is a StudentActivityTaxId
		DefaultIncomeCode			is a PayablesIncomeCode	
		SchoolActivityAccount
		ActivityDetailAmount		is an InternationalAmount
		TransferToBankAccount		is a TransferBankAccount
		TransferAmount				is an InternationalAmount
		AutoDisbursementMessage		is Alpha 40
		CurrentDisbursementNumber	is Numeric 10

		TransactionCurrencyCode			is a Currency
			derive value from StudentActivitySchool.DefaultAccountingEntity.FunctionalCurrency
			
	Context Fields
 		StudentActivityBankStatement
		DateRangeFilter			is a DateRange
		IncludeAllRecords

	Sets
		ByTransactionNumber
			Sort Order
				StudentActivityDistrict
				StudentActivitySchool
				StudentActivityBankTransaction
				BankTransactionType		
				StudentActivityBankAccount


		ByTransactionDate
			Sort Order
				StudentActivityDistrict
				StudentActivitySchool
				StudentActivityBankAccount
				TransactionDate
				StudentActivityBankTransaction
				BankTransactionType		



	Relations
		StudentRecordRel
			one-to-many relation to StudentRecord
			Field Mapping uses symbolic key
				related.StudentActivityDistrict	= StudentActivityDistrict

		UnassignedReceiptsRel
			one-to-many relation to StudentActivityReceipt
			Field Mapping uses symbolic key
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
			Instance Selection
				where (related.StudentActivityBankTransaction	!entered
				and    related.StudentActivityReceiptBatch		!entered
				and    related.Status.Released)

		UnreleasedAssignedReceiptsRel is a StudentActivityReceipt set
			Instance Selection
				where (related.Status.Entered)
			
		UnassignedBatchReceiptsRel
			one-to-many relation to StudentActivityReceiptBatch
			Field Mapping uses symbolic key
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
			Instance Selection
				where (related.StudentActivityBankTransaction	!entered
				and    related.Status.Released)

		ReconciledVarianceAdjustmentRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (related.ReconciledVarianceAdjustment)
					
		StudentActivityBankTransDetailRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (!related.BankAccountOffset)

		UnreleasedBankTransDetailsRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (related.Status.Entered)

		InProcessBankTransDetailsRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (related.Status.InProcess)

		ReleasedOrClosedBankTransDetailsRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (related.Status.Released
				or     related.Status.Closed)

		PostingReceiptDetailLinesRel is a StudentActivityReceiptDetail set
			Instance Selection
				where (related.GLAccount entered)

		TransferToBankTransactionRel
			one-to-many relation to StudentActivityBankTransaction
			Field Mapping uses ByTransactionNumber
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.StudentActivityBankTransaction	= StudentActivityBankTransaction
				related.BankTransactionType				= BankTransactionType
			Instance Selection
				where (related.TransferFromBankAccount	= StudentActivityBankAccount)

		TransferFromBankTransactionRel
			one-to-many relation to StudentActivityBankTransaction
			Field Mapping uses ByTransactionNumber
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.StudentActivityBankTransaction	= StudentActivityBankTransaction
				related.BankTransactionType				= BankTransactionType
			Instance Selection
				where (related.StudentActivityBankAccount	= TransferFromBankAccount)

		StudentActivityBankAccountRel
			one-to-many relation to StudentActivityBankAccount
			Field Mapping uses symbolic key
				related.StudentActivityDistrict		= StudentActivityDistrict
				related.StudentActivitySchool		= StudentActivitySchool
			Instance Selection
				where (!related.StudentActivityBankAccount	= StudentActivityBankAccount)	

		ReturnedReceiptPaymentDetailsRel
			one-to-many relation to StudentActivityReceiptDetail
			Field Mapping uses symbolic key
				related.StudentActivityDistrict		= StudentActivityDistrict
				related.StudentActivitySchool		= StudentActivitySchool
				related.StudentActivityReceipt		= NSFRelatedReceiptRecord
			Instance Selection
				where (!related.BankAccountOffset
				and    !related.CorrectedPosting)

		NSFFeeTransactionNumberRel
			one-to-one relation to StudentActivityBankTransaction
			Field Mapping uses symbolic key
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.StudentActivityBankAccount		= StudentActivityBankAccount
				related.BankTransactionType				= 10
				related.StudentActivityBankTransaction	= NSFFeeTransactionNumber

		NonPayablesReportableIncomeAdjustmentRel															
			classic name is APRPTBLINC
			one-to-one relation to NonPayablesReportableIncomeAdjustment											
			required
			Field Mapping uses symbolic key																			
				related.VendorGroup														= VendorGroup
				related.NonPayablesReportableIncomeAdjustment.TransactionSource			= "SAS"						//related.ApRptblinc.Source	= "SAS"
				related.NonPayablesReportableIncomeAdjustment.YearPaid					= ReportableIncomeYearPaid	
				related.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID	= ReportableIncomeObjectID		







		ClosedStudentActivityBankTransDetailRel	is a StudentActivityBankTransDetail set
			Instance Selection
				where (related.Status.Closed)








	Conditions
		TransactionExists
			when (StudentActivityBankTransaction exists)
			
		BankTransactionDetailsAllowed
			when (BankTransactionType.Disbursement
			or    BankTransactionType.Adjustment
			or   (BankTransactionType.NSFRecord
			and   !Status.Entered))

		ReleasedDisbursement
			when (BankTransactionType.Disbursement
			and   !Status.Entered)

		ReleasedDeposit
			when (BankTransactionType.Deposit
			and   !Status.Entered)

		UnreleasedDeposit
			when (BankTransactionType.Deposit
			and   Status.Entered)

		TransferHeader
			when (BankTransactionType.Transfer
			and   TransferFromBankAccount	= blank)

		TransferDetail
			when (BankTransactionType.Transfer
			and  (TransferFromBankAccount		entered
			and   StudentActivityBankAccount	!= TransferFromBankAccount))

		CanBeReconciled
			when (StudentActivityBankStatement entered
			and   StudentActivityBankStatement.Status.Entered)

		CanBeReleased
			when (TransactionExists
			and   Status.Entered
			and   !TransferFromBankAccount entered)
		
		LaserCheckImageExists
			when (PrintedLaserCheck entered
			and   !CheckPrinted
			and   !SelectedForBatchCheckPrinting)
		
		ReleasedCheckRecord
			when (Status.Released
			and   PrintedLaserCheck	entered)

		CheckCanBePrinted
			when (Status.Released
			and   PrintedLaserCheck	entered
			and   !CheckPrinted
			and   !SelectedForBatchCheckPrinting)

		EnteredDepositDisbursementTransfer
			when ((BankTransactionType.Deposit
			or     BankTransactionType.Disbursement
			or     TransferHeader)
			and    Status.Entered)

		OutOfBalance
			when (!BankTransactionType.NSFRecord
			and    TransferFromBankAccount = blank
			and   !OutOfBalanceAmount = 0)

		ReportableIncomeFieldsUpdatable
			when (BankTransactionType.Disbursement
			and  (Status.Released
			or    Status.Reconciled))

		CanViewDisbursementNumber
			when (BankTransactionType.Disbursement
			and   StudentActivityBankTransaction entered
			and   StudentActivityBankAccount.AutoNumberDisbursements)

		HasClosedDetails
			when (ClosedStudentActivityBankTransDetailRel exists)
			
		HasBatchReceiptAssigned
			when (StudentActivityReceiptBatch set exists)



		AdjustmentDisbursement
			when (BankTransactionType.Adjustment
			or    BankTransactionType.Disbursement)

	Delete Rules
		include IDM.DeleteNoArchiveRules
			replace AttachmentField with PrintedLaserCheck

	Commit Rules
		include IDM.CommitRules
			replace AttachmentField with PrintedLaserCheck	

	Field Rules
		StudentActivityBankAccount
			default to StudentActivitySchool.DefaultBankAccount
			
		AutoDisbursementMessage
			initial value is StudentActivityBankAccount.AutoDisbursementConditionalMsg

		CurrentDisbursementNumber
			initial value is StudentActivityBankAccount.CurrentDisbursementNumber


		TransactionAmount
			if (!Status.Entered
			or	!BankTransactionType.Deposit)
				required
			if (AmountType.BankCredit)
				CreditAmount = TransactionAmount
				initialize DebitAmount
			else
				DebitAmount	= TransactionAmount
				initialize CreditAmount
			if (BankTransactionType.Disbursement
			and StudentActivityBankAccount.CheckDocumentTemplate	entered)
				AmountToTextTranslation.TranslationAmount	= TransactionAmount

		AmountType
			required

		TransactionDate	
			initial value is current corporate date
			default to current corporate date

		VendorGroup
			initial value is StudentActivitySchool.StudentActivityBackOfficeFields.VendorGroup
			default to StudentActivitySchool.StudentActivityBackOfficeFields.VendorGroup
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				initialize VendorGroup
				default to StudentActivityVendorFields.StudentActivityVendor.VendorGroup
			default to StudentActivityDistrict.StudentActivityBackOfficeFields.VendorGroup

		StudentActivityVendorFields
			mutually exclusive
				"OnlyOneVendorOptionCanBeEntered"
			if (BankTransactionType.Disbursement)
				if (!StudentActivityVendorFields	entered
				and !NewVendorName 					entered)
					required
						"VendorInformationRequired"
			else
				constraint (!StudentActivityVendorFields entered)
					"VendorFieldsOnlyAllowedForDisbursements"
			if (StudentActivityVendorFields changed)
				initialize OneTimeVendorName
				initialize OneTimeVendorAddress
				initialize OneTimeVendorTaxId
				initialize PayablesIncomeCode
				initialize ReportableIncomeAmount			
			
		PayablesIncomeCode																				
			initial value is StudentActivityVendorFields.StudentActivityVendor.IncomeCode		
			default to StudentActivityVendorFields.StudentActivityVendor.IncomeCode				
			default to StudentActivityVendorFields.Vendor.IncomeCode
			if (StudentActivityVendorFields.OneTimeVendor)
				constraint (OneTimeVendorTaxId entered)
					"TaxIDRequiredIfIncomeCodeEntered"
			if (StudentActivityVendorFields.StudentActivityVendor entered)
				constraint (StudentActivityVendorFields.StudentActivityVendor.TaxId entered)
					"TaxIDRequiredOnVendor<StudentActivityVendorFields.StudentActivityVendor>IfIncomeCodeEntered"

		ReportableIncomeAmount
			constraint (PayablesIncomeCode entered)
				"IncomeCodeRequiredForReportableIncomeAmount"
			if (PayablesIncomeCode entered)
				default to TransactionAmount
				constraint (ReportableIncomeAmount <= TransactionAmount)
					"ReportableIncomeAmountCannotBeGreaterThanPaymentAmount"

			if (!StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany entered
			and !StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany entered)
				constraint (StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany entered)
					"DefaultPayablesCompanyRequiredOnSchoolOrDistrictFor1099Reporting"
			if (!StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel entered
			and !StudentActivityDistrict.StudentActivityBackOfficeFields.ProcessLevel entered)
				constraint (StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel entered)
					"BackOfficeProcessLevelRequiredOnSchoolOrDistrictFor1099Reporting"

		ActivityDetailAmount
			default to TransactionAmount

		TransferAmount
			constraint (TransferToBankAccount entered)
				"TransferToBankAccountRequiredIfAmountEntered"

		NSFFeeTransactionNumber
			constraint (NSFFeeAmount entered)
				"FeeAmountRequired"

		NSFFeeAmount
			constraint (NSFFeeTransactionNumber entered)
				"FeeTransactionNumberRequired"

		NSFFeeAccount
			initial value is StudentActivityBankAccount.NonSufficientFundsActivity
			default to StudentActivityBankAccount.NonSufficientFundsActivity

		NSFRelatedReceiptRecord
			constraint (NSFRelatedReceiptRecord.Status.Deposited)
				"RelatedReceiptRecordMustBeInDepositedStatus"
			constraint (TransactionAmount	= NSFRelatedReceiptRecord.ReceiptAmount)
				"NSFAmount<TransactionAmount>MustEqualReceiptAmount<NSFRelatedReceiptRecord.ReceiptAmount>"
			if (NSFRelatedReceiptRecord.ReferenceNumber	entered
			and NSFPaymentNumber	entered)
				constraint (NSFPaymentNumber	= NSFRelatedReceiptRecord.ReferenceNumber)
					"ReturnedPaymentNumber<NSFPaymentNumber>DoesNotEqualRelatedReceiptReferenceNumber<NSFRelatedReceiptRecord.ReferenceNumber>"
		
		NSFPaymentNumber
			initial value is NSFRelatedReceiptRecord.ReferenceNumber
			default to NSFRelatedReceiptRecord.ReferenceNumber

		NSFStudentRecord
			constraint (NSFFeeAmount entered)
				"FeeAmountRequired"
				

		NewVendorAddress
			if (NewVendorAddress.DeliveryAddress entered	
			and !NewVendorAddress.Country entered)
				NewVendorAddress.Country = StudentActivityDistrict.EnterpriseGroup.DefaultCountry

		OneTimeVendorAddress
			if (OneTimeVendorAddress.DeliveryAddress entered	
			and !OneTimeVendorAddress.Country entered)
				OneTimeVendorAddress.Country = StudentActivityDistrict.EnterpriseGroup.DefaultCountry
		SchoolAccountCode
			if (BankTransactionType.Disbursement)
				if (StudentActivityDistrict.AccountCodeRequired)
					required
				constraint (SchoolAccountCode.StudentActivityAccountCode.CodeType.AllTransactions or SchoolAccountCode.StudentActivityAccountCode.CodeType.Disbursement)
					"AccountCodeMustBeForDisbursementsOrAllTransactions"
			if (BankTransactionType.Adjustment)
				if (StudentActivityDistrict.AccountCodeRequired)
					required
				if (AmountType.BankCredit)
					constraint (SchoolAccountCode.StudentActivityAccountCode.CodeType.AllTransactions or SchoolAccountCode.StudentActivityAccountCode.CodeType.Receipt)
						"AccountCodeMustBeForReceiptsOrAllTransactions"
				if (AmountType.BankDebit)
					constraint (SchoolAccountCode.StudentActivityAccountCode.CodeType.AllTransactions or SchoolAccountCode.StudentActivityAccountCode.CodeType.Disbursement)
						"AccountCodeMustBeForDisbursementsOrAllTransactions"
					
						
	Rule Blocks
		AddBankTransDetailLine
			invoke Create Entered StudentActivityBankTransDetail
				invoked.StudentActivityDistrict			= StudentActivityDistrict
				invoked.StudentActivitySchool			= StudentActivitySchool
				invoked.StudentActivityBankAccount		= StudentActivityBankAccount
				invoked.BankTransactionType				= BankTransactionType
				invoked.StudentActivityBankTransaction	= StudentActivityBankTransaction
				invoked.BankTransDetailAmount			= ActivityDetailAmount
				invoked.SchoolActivityAccount			= SchoolActivityAccount

#ifdef module lc4
		CreateApRptblincRecords
			ReportableIncomeYearPaid	= TransactionDate year

			
			invoke CreateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustment	
				assign result to NewAPReportableIncomeAdjustment
				invoked.NonPayablesReportableIncomeAdjustment.TransactionSource	= "SAS"
				invoked.NonPayablesReportableIncomeAdjustment.YearPaid			= ReportableIncomeYearPaid
				invoked.IncomeCode			= PayablesIncomeCode
				invoked.PaymentDate			= TransactionDate
				invoked.PaidAmount			= TransactionAmount
				invoked.ReportableAmount	= ReportableIncomeAmount
				invoked.TransactionNumber	= StudentActivityBankTransaction









				if (StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany entered)
					invoked.Company				= StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany
					invoked.TransactionCurrency	= StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany.Currency
				else
					invoked.Company				= StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany
					invoked.TransactionCurrency	= StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany.Currency
				if (StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel entered)
					invoked.ProcLevel		= StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel
				else
					invoked.ProcLevel		= StudentActivityDistrict.StudentActivityBackOfficeFields.ProcessLevel

				if (StudentActivityVendorFields.StudentActivityVendor entered)
					invoked.PayeeName		= StudentActivityVendorFields.StudentActivityVendor.Name
					invoked.PostalAddress	= StudentActivityVendorFields.StudentActivityVendor.Address
					invoked.TaxID			= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumber
					invoked.TaxIDType		= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumberType









				else	
					if (StudentActivityVendorFields.OneTimeVendor)
						invoked.PayeeName		= OneTimeVendorName
						invoked.PostalAddress	= OneTimeVendorAddress.DeliveryAddress
						invoked.TaxID			= OneTimeVendorTaxId.TaxNumber
						invoked.TaxIDType		= OneTimeVendorTaxId.TaxNumberType









					else
						invoked.VendorGroup	= VendorGroup
						invoked.Vendor		= StudentActivityVendorFields.Vendor	
						invoked.PayeeName	= StudentActivityVendorFields.Vendor.LegalName	
			ReportableIncomeObjectID	= NewAPReportableIncomeAdjustment.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID
#endif			           

#ifndef module lc4
		CreateApRptblincRecords
			ReportableIncomeYearPaid	= TransactionDate year

			
			invoke CreateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustment			
				assign result to NewAPReportableIncomeAdjustment
				invoked.VendorGroup				= VendorGroup															
				invoked.NonPayablesReportableIncomeAdjustment.TransactionSource			= "SAS"							//invoked.ApRptblinc.Source	= "SAS"
				invoked.NonPayablesReportableIncomeAdjustment.YearPaid					= ReportableIncomeYearPaid				
				invoked.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID	= ReportableIncomeObjectID	
				invoked.IncomeCode				= PayablesIncomeCode												
				invoked.PaymentDate				= TransactionDate
				invoked.PaidAmount				= TransactionAmount													
				invoked.ReportableAmount		= ReportableIncomeAmount											
				invoked.TransactionNumber		= StudentActivityBankTransaction								
				if (StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany entered)					
					invoked.Company				= StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany	
					invoked.TransactionCurrency	= StudentActivitySchool.StudentActivityBackOfficeFields.PayablesCompany.Currency
				else
					invoked.Company				= StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany	
					invoked.TransactionCurrency	= StudentActivityDistrict.StudentActivityBackOfficeFields.PayablesCompany.Currency
				if (StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel entered)	
					invoked.ProcessLevel		= StudentActivitySchool.StudentActivityBackOfficeFields.ProcessLevel

				else
					invoked.ProcessLevel		= StudentActivityDistrict.StudentActivityBackOfficeFields.ProcessLevel


				if (StudentActivityVendorFields.StudentActivityVendor entered)
					invoked.PayeeName		= StudentActivityVendorFields.StudentActivityVendor.Name
					invoked.PostalAddress	= StudentActivityVendorFields.StudentActivityVendor.Address
					invoked.TaxID			= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumber
					invoked.TaxIDType			= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumberType









				else	
					if (StudentActivityVendorFields.OneTimeVendor)
						invoked.PayeeName		= OneTimeVendorName
						invoked.PostalAddress	= OneTimeVendorAddress.DeliveryAddress
						invoked.TaxID			= OneTimeVendorTaxId.TaxNumber
						invoked.TaxIDType		= OneTimeVendorTaxId.TaxNumberType









					else
						invoked.VendorGroup	= VendorGroup
						invoked.Vendor		= StudentActivityVendorFields.Vendor
						invoked.PayeeName	= StudentActivityVendorFields.Vendor.LegalName


			ReportableIncomeObjectID	= NewAPReportableIncomeAdjustment.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID
#endif			           

	Actions
		CreateTransferToBankAccount is an Instance Action
			restricted
			Parameters
				PrmTransferToBankAccount 	is a TransferBankAccount
				PrmTransferAmount			is an InternationalAmount
			
			Parameter Rules
				PrmTransferAmount
					initial value is TransactionAmount
					default to TransactionAmount
					
				PrmTransferToBankAccount
					constraint (!PrmTransferToBankAccount = StudentActivityBankAccount)	
						"TransferToBankAccountCannotEqualTransferFromBankAccount"
				
			Action Rules
				invoke CreateTransferToBankRecord Entered StudentActivityBankTransaction
					invoked.StudentActivityDistrict			= StudentActivityDistrict
					invoked.StudentActivitySchool			= StudentActivitySchool
					invoked.StudentActivityBankAccount		= PrmTransferToBankAccount
					invoked.BankTransactionType				= BankTransactionType
					invoked.StudentActivityBankTransaction	= StudentActivityBankTransaction
					invoked.TransferFromBankAccount			= StudentActivityBankAccount
					invoked.TransactionAmount				= PrmTransferAmount
					invoked.TransactionDate					= TransactionDate
					invoked.Description						= Description

		CloseRecord is an Instance Action
			restricted
			Action Rules
				DetailsClosed	= true

		OpenRecord is an Instance Action
			restricted
			Action Rules
				DetailsClosed	= false

		CreateLaserCheckDocument is an Instance Action
			restricted
			Parameters
				PrmPrintedLaserCheck	is a CheckDocumentTemplateGroup
				
			Action Rules
				if (PrintedLaserCheck.FSMAttachmentIDM.IDMUniqueId entered)

					PrintedLaserCheck.File = PrmPrintedLaserCheck.File
					PrintedLaserCheck.Title = PrmPrintedLaserCheck.Title
					PrintedLaserCheck.MimeType = PrmPrintedLaserCheck.MimeType
					PrintedLaserCheck.ExecuteUploadToIDM = true
				else
					PrintedLaserCheck	= PrmPrintedLaserCheck

					include IDM.CreateRules
						replace AttachmentField   with PrintedLaserCheck

		ReleaseUnreleasedDetails is an Instance Action
			restricted
			Action Rules
				invoke Release Entered UnreleasedBankTransDetailsRel

		UpdateReportableIncomeFields is an Instance Action
			valid when (ReportableIncomeFieldsUpdatable)
			Parameters				
				PrmVendorGroup				is a VendorGroup
				IncomeCode					is a PayablesIncomeCode	
				ReportableAmount			is an InternationalAmount
				TaxId						is a StudentActivityTaxId
				VendorName					is Alpha 60 
				Address						is a PostalAddressV2	
					holds pii







				ClearReportableIncomeRecord	is Boolean
				
			Parameter Rules
				PrmVendorGroup
					initial value is VendorGroup
					default to VendorGroup

				IncomeCode
					initial value is PayablesIncomeCode		
					default to PayablesIncomeCode			
					if (!ClearReportableIncomeRecord)
						required

				ReportableAmount
					initial value is ReportableIncomeAmount
					default to ReportableIncomeAmount

				TaxId
					initial value is OneTimeVendorTaxId
					default to OneTimeVendorTaxId

				VendorName
					initial value is NonPayablesReportableIncomeAdjustmentRel.PayeeName
					default to NonPayablesReportableIncomeAdjustmentRel.PayeeName

				Address
					initial value is NonPayablesReportableIncomeAdjustmentRel.PostalAddress
					default to NonPayablesReportableIncomeAdjustmentRel.PostalAddress
					




































			Local Fields
				NewAPReportableIncomeAdjustment			is a NonPayablesReportableIncomeAdjustment view			
			
			Action Rules
				if (ClearReportableIncomeRecord)
					invoke DeleteStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel 	
					ReportableIncomeObjectID = blank
					initialize PayablesIncomeCode			
					initialize ReportableIncomeAmount
					initialize ReportableIncomeYearPaid
					initialize ReportableIncomeObjectID		
				else
					if (Status.Released)
						invoke UpdateReportableIncomeFields Released StudentActivityBankTransaction
							invoked.PayablesIncomeCode		= IncomeCode	
							invoked.ReportableIncomeAmount	= ReportableAmount
							if (StudentActivityVendorFields.OneTimeVendor)
								invoked.OneTimeVendorTaxId	= TaxId
					else
						invoke UpdateReportableIncomeFields Reconciled StudentActivityBankTransaction
							invoked.PayablesIncomeCode		= IncomeCode	
							invoked.ReportableIncomeAmount	= ReportableAmount
							if (StudentActivityVendorFields.OneTimeVendor)
								invoked.OneTimeVendorTaxId	= TaxId
						
					if (NonPayablesReportableIncomeAdjustmentRel exists)		
						invoke UpdateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel	
							invoked.PayeeName			= VendorName
							invoked.PostalAddress		= Address
							invoked.IncomeCode			= IncomeCode
							invoked.TaxID				= TaxId.TaxNumber
							invoked.TaxIDType			= TaxId.TaxNumberType
							invoked.ReportableAmount	= ReportableAmount











					else
						include CreateApRptblincRecords
		
						if (VendorName entered)
							invoke UpdateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel	
								invoked.PayeeName	= VendorName
						if (Address entered)	
							invoke UpdateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel	
								invoked.PostalAddress	= Address








		UpdateReportableIncomeVendor is an Instance Action
			restricted

			Action Rules
				invoke UpdateStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel	
					invoked.PayeeName		= StudentActivityVendorFields.StudentActivityVendor.Name
					invoked.PostalAddress	= StudentActivityVendorFields.StudentActivityVendor.Address
					invoked.TaxID			= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumber
					invoked.TaxIDType		= StudentActivityVendorFields.StudentActivityVendor.TaxId.TaxNumberType










		CreateCheckRecord is an Instance Action
			restricted
			Action Rules
				invoke CreateDetailLaserCheckDocument StudentActivityBankAccount
					invoked.PrmBankTransactionType				= BankTransactionType
					invoked.PrmStudentActivityBankTransaction	= StudentActivityBankTransaction


		UploadToIDM is an Instance Action  
			valid when (PrintedLaserCheck.ValidForIDMUpload)
			Action Rules
				include IDM.MoveAttachmentsToIDM
					replace AttachmentField   with PrintedLaserCheck	
						
									
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (PrintedLaserCheck.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with PrintedLaserCheck			

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop	
						
	StateCycles
		ActivityBankTransactionLifeCycle is a StateCycle
			state field is Status
			
			Entered is a State

				CreateAdjustment is a Create Action
					Action Rules
						BankTransactionType	= 10

					Exit Rules
						if (SchoolActivityAccount entered)
							include AddBankTransDetailLine


				CreateDeposit is a Create Action
					Action Rules
						increment StudentActivityBankAccount.LastDepositNumber
						StudentActivityBankTransaction	= StudentActivityBankAccount.LastDepositNumber
						BankTransactionType				= 20
						AmountType						= 2


				CreateDisbursement is a Create Action
					Action Rules
						if (StudentActivityBankAccount.AutoNumberDisbursements)
							constraint (!StudentActivityBankTransaction entered)
								"DisbursementNumberIsAutoAssigned_-_TransactionNumberCannotBeEntered"
							if (!StudentActivityBankAccount.CurrentDisbursementNumber	= CurrentDisbursementNumber)
								confirmation required
									"LastDisbursementNumberOnAccountHasChanged_-_CurrentDisbursementNumberIs<StudentActivityBankAccount.CurrentDisbursementNumber>_-_Continue?"
							increment StudentActivityBankAccount.LastDisbursementNumber
							StudentActivityBankTransaction	= StudentActivityBankAccount.LastDisbursementNumber
						BankTransactionType					= 30
						AmountType							= 1
						
						if (!StudentActivityVendorFields entered)
							constraint (NewVendorName entered)
								"VendorInformationRequiredForNewVendor"						

						if (StudentActivityVendorFields.OneTimeVendor)
							constraint (NewVendorName entered)
								"VendorInformationRequiredForOneTimeVendor"						

						if (NewVendorName entered)
							if (StudentActivityVendorFields.OneTimeVendor)
								OneTimeVendorName		= NewVendorName
								OneTimeVendorAddress	= NewVendorAddress
								OneTimeVendorTaxId		= NewTaxId
								PayablesIncomeCode		= DefaultIncomeCode		
							else
								invoke Create StudentActivityVendor
									assign result to LocalStudentActivityVendor
									invoked.StudentActivityDistrict		= StudentActivityDistrict
									invoked.Name						= NewVendorName
									invoked.Address						= NewVendorAddress
									invoked.TaxId						= NewTaxId
									invoked.IncomeCode					= DefaultIncomeCode	
									invoked.Active						= true
								
								StudentActivityVendorFields.StudentActivityVendor	= LocalStudentActivityVendor.StudentActivityVendor	
							initialize	NewVendorName 

						
					Exit Rules
						if (SchoolActivityAccount entered)
							include AddBankTransDetailLine

						if (StudentActivityBankAccount.CheckDocumentTemplate entered)
							invoke CreateCheckRecord

				CreateAndReleaseDisbursement is a Create Action
						Action Rules
							invoke Entered.CreateDisbursement this instance
						Exit Rules
							invoke Entered.Release
								resume on error

				CreateNSFRecord is a Create Action
					Action Rules
						BankTransactionType	= 40
						AmountType			= 1


				CreateTransfer is a Create Action
					Field Rules
					
					Action Rules
						if (TransferToBankAccount entered)
							invoke CreateTransferToBankAccount
								invoked.PrmTransferAmount			= TransferAmount
								invoked.PrmTransferToBankAccount	= TransferToBankAccount

						BankTransactionType	= 50
						AmountType			= 1


				CreateTransferToBankRecord is a Create Action
					restricted
					Action Rules
						BankTransactionType	= 50
						AmountType			= 2



				Update is an Update Action
					Exit Rules
						if (TransactionDate changed)
							invoke Update Entered StudentActivityBankTransDetail set
								invoked.TransactionDate	= TransactionDate

						if (AmountType changed)
							invoke UpdateSignedAmount Entered StudentActivityBankTransDetail set
												
						if (BankTransactionType.Disbursement
						and StudentActivityBankAccount.CheckDocumentTemplate entered)
							invoke CreateCheckRecord 

						if (SchoolAccountCode changed)
							invoke Update Entered StudentActivityBankTransDetail set
								initialize invoked.GLAccount

				Delete is a Delete Action
					Action Rules
						if (BankTransactionType.Transfer)
							invoke Delete TransferToBankTransactionRel			
				
				Release is an Instance Action
					valid when (!TransferDetail)
					
					Local Fields
						NewAPReportableIncomeAdjustment is a NonPayablesReportableIncomeAdjustment view
					
					Action Rules
						constraint (TransactionAmount	entered)
							"TransactionAmountRequired"

						if (BankTransactionType.Deposit)

							constraint (TotalReceipts = CreditAmount)
								"TotalReceiptsMustEqualDepositAmount"

							invoke Release Entered UnreleasedAssignedReceiptsRel
							
							invoke Deposit Released StudentActivityReceipt set

						if (BankTransactionType.Disbursement)
							constraint (TotalDetailAmount = DebitAmount)
								"TotalDetailAmountMustEqualDisbursementAmount"

							if (StudentActivityVendorFields.OneTimeVendor)
								constraint (OneTimeVendorName entered)
									"VendorInformationRequired"
								
							if (StudentActivityBankAccount.CheckDocumentTemplate entered)
								invoke CreateCheckRecord
		
							invoke Release Entered UnreleasedBankTransDetailsRel 

							if (PayablesIncomeCode entered)		
								include CreateApRptblincRecords
	
	
						if (BankTransactionType.Adjustment)
							constraint (TotalDetailAmount = TransactionAmount)
								"TotalDetailAmountMustEqualAdjustmentAmount"

							invoke Release Entered UnreleasedBankTransDetailsRel 

						if (BankTransactionType.Transfer)
							constraint (TotalTransferToAmount = DebitAmount)
								"TotalTransferFromAmountMustEqualTransferToAmount"

							invoke CreateTransferDetails Entered StudentActivityBankTransaction

						if (BankTransactionType.NSFRecord)
							invoke CreateNSFDetail Entered StudentActivityBankTransDetail
								invoked.StudentActivityDistrict			= StudentActivityDistrict
								invoked.StudentActivitySchool			= StudentActivitySchool
								invoked.StudentActivityBankAccount		= StudentActivityBankAccount
								invoked.BankTransactionType				= BankTransactionType
								invoked.StudentActivityBankTransaction	= StudentActivityBankTransaction
								invoked.SchoolActivityAccount			= StudentActivityBankAccount.NonSufficientFundsActivity
								invoked.BankTransDetailAmount			-= TransactionAmount
								invoked.StudentRecord					= NSFStudentRecord
								
							invoke Release Entered UnreleasedBankTransDetailsRel 
	
			
							if (NSFFeeAmount entered)
								invoke CreateReleasedTransaction Released StudentActivityBankTransaction
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentActivityBankAccount		= StudentActivityBankAccount
									invoked.BankTransactionType				= 10
									invoked.StudentActivityBankTransaction	= NSFFeeTransactionNumber
									invoked.TransactionAmount				= NSFFeeAmount
									invoked.AmountType						= 1
									invoked.TransactionDate					= TransactionDate
									invoked.Description						= NSFRecordBankFeeDescription
				
								invoke Create Entered StudentActivityBankTransDetail	
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentActivityBankAccount		= StudentActivityBankAccount
									invoked.BankTransactionType				= 10
									invoked.StudentActivityBankTransaction	= NSFFeeTransactionNumber
									invoked.SchoolActivityAccount			= NSFFeeAccount
									if (NSFFeeAccount	= StudentActivityBankAccount.NonSufficientFundsActivity)
										invoked.BankTransDetailAmount		-= NSFFeeAmount
									else
										invoked.BankTransDetailAmount		= NSFFeeAmount
			
							if (NSFStudentRecord entered)
								invoke Create StudentAssignedActivityDetail
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentRecord					= NSFStudentRecord
									invoked.SchoolActivityAccount			= NSFFeeAccount
									invoked.FeeAmount						= NSFFeeAmount
									invoked.Description						= NSFRecordBankFeeDescription
			
			
							if (NSFReDeposit)
								if (NSFRelatedReceiptRecord	entered)
									invoke Create Entered StudentActivityReceipt
										assign result to LocalStudentActivityReceiptView
										fill in fields from NSFRelatedReceiptRecord
										invoked.Description			+= NSFRedepositReceiptDescription
										invoked.ReferenceNumber		= NSFPaymentNumber
										invoked.NSFRepayment		= true
										initialize invoked.StudentActivityReceipt
										initialize invoked.StudentActivityBankAccount
										initialize invoked.BankTransactionType
										initialize invoked.StudentActivityBankTransaction
										initialize invoked.AddedFromStudentRecord
										initialize invoked.PrintedReceipt

								else
									invoke Create Entered StudentActivityReceipt
										assign result to LocalStudentActivityReceiptView
										invoked.StudentActivityDistrict	= StudentActivityDistrict
										invoked.StudentActivitySchool	= StudentActivitySchool
										invoked.ReceiptAmount			= TransactionAmount
										invoked.ReceiptDate				= TransactionDate
										invoked.ReferenceNumber			= NSFPaymentNumber
										invoked.StudentRecord			= NSFStudentRecord
										invoked.Description				= NSFRedepositReceiptDescription
										invoked.NSFRepayment			= true
										
										
								NSFReDepositReceiptNumber	= LocalStudentActivityReceiptView.StudentActivityReceipt
								invoke Release Entered NSFReDepositReceiptNumber

							if (NSFRelatedReceiptRecord entered)
								invoke ReturnedPayment Deposited NSFRelatedReceiptRecord
									invoked.ReturnTransactionNumber	= StudentActivityBankTransaction
									invoked.PrmReturnDate			= TransactionDate
								

					Exit Rules
						make transition to Released
							
				
				CreateTransferDetails is an Instance Action
					restricted
					Local Fields
						LocalToBankAccountActivity		is a SchoolActivityAccount
						LocalFromBankAccountActivity	is a SchoolActivityAccount

					Action Rules
						for each TransferToBankTransactionRel
							LocalToBankAccountActivity		= each.StudentActivityBankAccount.BankAccountActivity
							LocalFromBankAccountActivity	= StudentActivityBankAccount.BankAccountActivity
							
							invoke CreateReleasedTransaction Released StudentActivityBankTransDetail
								invoked.StudentActivityDistrict								= StudentActivityDistrict
								invoked.StudentActivitySchool								= StudentActivitySchool
								invoked.StudentActivityBankAccount							= each.StudentActivityBankAccount
								invoked.BankTransactionType									= each.BankTransactionType
								invoked.StudentActivityBankTransaction						= each.StudentActivityBankTransaction
								invoked.SchoolActivityAccount								= LocalToBankAccountActivity
								invoked.BankTransDetailAmount								= each.TransactionAmount
								invoked.BankAccountOffset									= true
								if (LocalFromBankAccountActivity.GLAccount	entered
								and LocalToBankAccountActivity				entered)
									invoked.GLAccount			= LocalToBankAccountActivity.GLAccount

							invoke CreateReleasedTransaction Released StudentActivityBankTransDetail
								invoked.StudentActivityDistrict								= StudentActivityDistrict
								invoked.StudentActivitySchool								= StudentActivitySchool
								invoked.StudentActivityBankAccount							= StudentActivityBankAccount
								invoked.BankTransactionType									= BankTransactionType
								invoked.StudentActivityBankTransaction						= StudentActivityBankTransaction
								invoked.SchoolActivityAccount								= LocalFromBankAccountActivity
								invoked.BankTransDetailAmount								= each.TransactionAmount
								invoked.BankAccountOffset									= true
								if (LocalFromBankAccountActivity.GLAccount	entered
								and LocalToBankAccountActivity				entered)
									invoked.GLAccount			= LocalFromBankAccountActivity.GLAccount

							invoke ReleaseTransferRecord Entered each.StudentActivityBankTransaction 
							

				ReleaseTransferRecord is an Instance Action
					restricted
					Action Rules
						make transition to Released


			Released is a State
				CreateReleasedTransaction is a Create Action
					restricted
					
				UpdateReportableIncomeFields is an Update Action
					restricted

				ClosePaymentRecord is an Instance Action
					valid when (CheckCanBePrinted)
					confirmation required
						"HasCheckBeenPrinted"
					
					Action Rules
						CheckPrinted	= true
						
				SelectOrRemoveFromBatchPrinting is an Instance Action

					Action Rules
						if (SelectedForBatchCheckPrinting)
							SelectedForBatchCheckPrinting	= false
						else
							SelectedForBatchCheckPrinting	= true

					Exit Rules
						invoke CreateBatchLaserCheckDocument StudentActivityBankAccount
							

				ReconcileTransaction is an Instance Action
					valid when (CanBeReconciled)
					
					Action Rules
						if (BankTransactionType.Disbursement
						and PrintedLaserCheck	entered)
							constraint (CheckPrinted)
								"CannotReconcileCheckHasNotBeenPrinted"
								
						ReconciledAmount			= TransactionAmount
						ReconciledDate				= StudentActivityBankStatement.StatementDate
						ReconcilingBankStatement	= StudentActivityBankStatement
						
					Exit Rules
						make transition to Reconciled
						
				VoidTransaction is an Instance Action
					valid when (!TransferDetail)
					Parameters
						PrmVoidDate	is Date
						
					Parameter Rules
						PrmVoidDate
							initial value is current corporate date
							default to current corporate date
					
					Action Rules
						if (BankTransactionType.Deposit)
							if (HasBatchReceiptAssigned)
								invoke UnassignBatchFromVoidedTransaction Released StudentActivityReceiptBatch set
								
							invoke ReinstateReceipt Deposited StudentActivityReceipt set

						if (BankTransactionType.Disbursement
						or  BankTransactionType.Adjustment
						or  BankTransactionType.Transfer)
							if (BankTransactionType.Transfer)
								constraint (all TransferToBankTransactionRel.Status.Released)
									"ReconciledTransfersExistCannotVoid"
								invoke VoidTransferToRecord Released TransferToBankTransactionRel
									invoked.PrmVoidDate	= PrmVoidDate
									
							if (SelectedForBatchCheckPrinting)
								invoke SelectOrRemoveFromBatchPrinting
							
							for each ReleasedOrClosedBankTransDetailsRel
								invoke CreateInProcessTransaction InProcess StudentActivityBankTransDetail
									fill in fields from each
									invoked.BankTransDetailAmount	= (each.BankTransDetailAmount *-1)
									invoked.TransactionDate			= PrmVoidDate
									initialize invoked.ClosedPeriod

							invoke Release InProcess InProcessBankTransDetailsRel 

							if (PayablesIncomeCode entered)
								invoke DeleteStudentActivityBankTransactionAdjustment NonPayablesReportableIncomeAdjustmentRel	
								ReportableIncomeObjectID = blank
								initialize PayablesIncomeCode
								initialize ReportableIncomeAmount
								initialize ReportableIncomeYearPaid
								initialize ReportableIncomeObjectID					
	
	
						if (BankTransactionType.NSFRecord)
							if (NSFFeeTransactionNumber entered)
								constraint (!NSFFeeTransactionNumberRel.Status.Reconciled)
									"CannotVoidRecord;NSFFeeTransactionAdjustment<NSFFeeTransactionNumber>IsAlreadyReconciled"

								if (NSFFeeTransactionNumberRel.Status.Released)
									invoke VoidTransaction Released NSFFeeTransactionNumberRel


							if (NSFStudentRecord entered)
								invoke Create StudentAssignedActivityDetail
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentRecord					= NSFStudentRecord
									invoked.SchoolActivityAccount			= NSFFeeAccount
									invoked.FeeAmount						= (NSFFeeAmount *-1)
									invoked.Description						= NSFRecordBankFeeDescription
			
			
							if (NSFReDeposit)
								constraint (!NSFReDepositReceiptNumber.StudentActivityBankTransaction entered)
									"CannotVoidRecord;RedepositedReceipt<NSFReDepositReceiptNumber>AlreadyAssignedToDeposit<NSFReDepositReceiptNumber.StudentActivityBankTransaction>"
								invoke Delete Released NSFReDepositReceiptNumber

							if (NSFRelatedReceiptRecord entered)
								invoke VoidReturnedPayment Returned NSFRelatedReceiptRecord

							for each ReleasedOrClosedBankTransDetailsRel
								invoke CreateInProcessTransaction InProcess StudentActivityBankTransDetail
									fill in fields from each
									invoked.BankTransDetailAmount	= (each.BankTransDetailAmount *-1)
									invoked.TransactionDate			= PrmVoidDate
									initialize invoked.ClosedPeriod

							invoke Release InProcess InProcessBankTransDetailsRel 

					Exit Rules
						VoidDate	= PrmVoidDate
						make transition to Voided


				VoidTransferToRecord is an Instance Action
					restricted
					Parameters
						PrmVoidDate	is Date
					Action Rules
						for each StudentActivityBankTransDetail set
							invoke CreateReleasedTransaction Released StudentActivityBankTransDetail
								fill in fields from each
								invoked.BankTransDetailAmount	= (each.BankTransDetailAmount *-1)
								invoked.TransactionDate			= PrmVoidDate
								initialize invoked.ClosedPeriod

					Exit Rules
						VoidDate	= PrmVoidDate
						make transition to Voided


			Reconciled is a State
				CreateReconciledTransaction is a Create Action
					restricted

				UpdateReportableIncomeFields is an Update Action
					restricted
				
				UpdateReconciledDate is an Instance Action
					restricted
					Action Rules
						if (CreatedFromBankStatement
						and TransactionDate = ReconciledDate)
							constraint (!HasClosedDetails)
								"CannotChangeStatementDateIfClosedAdjustmentsExist.YouWillNeedToFirstReopenPeriod."
							TransactionDate				= ReconcilingBankStatement.StudentActivityBankStatement.StatementDate

						ReconciledDate				= ReconcilingBankStatement.StudentActivityBankStatement.StatementDate

					Exit Rules
						if (TransactionDate changed)
							invoke Update Released StudentActivityBankTransDetail set
								invoked.TransactionDate	= TransactionDate

				
				Update is an Update Action
					valid when (ReconcilingBankStatement.StudentActivityBankStatement.Status.Entered)
					Field Rules
						TransactionAmount
							cannot be changed
						ReconciledAmount
							constraint (!BankTransactionType.Transfer)
								"CannotChangeReconcileAmountOnBankTransfers"
						DebitAmount
							cannot be changed
						CreditAmount
							cannot be changed
						AmountType
							cannot be changed
						TransactionDate
							cannot be changed
						Description
							cannot be changed
							
					Action Rules
						if (ReconciledAmount changed)
							if (ReconciledVarianceAdjustmentRel exists)
								if (ReconciledAmount - TransactionAmount = 0)
									invoke Delete Released ReconciledVarianceAdjustmentRel
								else
									invoke Update Released ReconciledVarianceAdjustmentRel
										invoked.BankTransDetailAmount	= ReconciledAmount - TransactionAmount
							else
								invoke CreateReleasedTransaction Released StudentActivityBankTransDetail
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentActivityBankAccount		= StudentActivityBankAccount
									invoked.BankTransactionType				= BankTransactionType
									invoked.StudentActivityBankTransaction	= StudentActivityBankTransaction
									invoked.SchoolActivityAccount			= StudentActivityBankAccount.ReconciledVarianceActivity
									invoked.BankTransDetailAmount			= ReconciledAmount - TransactionAmount
									invoked.ReconciledVarianceAdjustment	= true

								invoke CreateReleasedTransaction Released StudentActivityBankTransDetail
									invoked.StudentActivityDistrict			= StudentActivityDistrict
									invoked.StudentActivitySchool			= StudentActivitySchool
									invoked.StudentActivityBankAccount		= StudentActivityBankAccount
									invoked.BankTransactionType				= BankTransactionType
									invoked.StudentActivityBankTransaction	= StudentActivityBankTransaction
									invoked.SchoolActivityAccount			= StudentActivityBankAccount.BankAccountActivity
									invoked.BankTransDetailAmount			= ReconciledAmount - TransactionAmount
									invoked.ReconciledVarianceAdjustment	= true
									invoked.BankAccountOffset				= true
									if (StudentActivityBankAccount.ReconciledVarianceActivity.GLAccount entered)
										invoked.GLAccount			= StudentActivityBankAccount.BankAccountActivity.GLAccount
					
			
				UnreconcileTransaction is an Instance Action
					valid when (ReconcilingBankStatement.StudentActivityBankStatement.Status.Entered)
					Action Rules
						if (CreatedFromBankStatement)
							invoke Delete Released StudentActivityBankTransDetail set					
							invoke DeleteBankTransaction Reconciled this instance
						else
							initialize ReconciledAmount
							initialize ReconciledDate
							initialize ReconcilingBankStatement
						
							invoke Delete Released ReconciledVarianceAdjustmentRel
						
							make transition to Released
						
				DeleteBankTransaction is a Delete Action
					restricted


			Voided is a State			
