FrontEndSplitDistributions is a BusinessClass
	owned by ap
	
	prefix is FESD
	
	Ontology
		symbolic key is FrontEndSplitDistributions

	Patterns
 		disable Auditing
		disable AuditIndex
 		disable EffectiveDated
		disable AsOfDateProcessing

	Persistent Fields
		CodeBlock   						is a TransactionCodeBlock
		DistributionBy
		DistributionAmount					is an InternationalAmount
		DistributionQuantity				is a Quantity
		DistributionPercent					is Percent size 8.5
		TransactionDate						is an ExchangeDate
		FESAmount							is a CurrencyAmount
		FESPercent 							is Percent size 8.5
		NumberOfDecimalsQuantity	
		FESQuantity							is like Quantity
			primitive decimal size is NumberOfDecimalsQuantity
		DistributionUnitsAmount				is an UnitsAmount
		FESUnitsAmount						is an UnitsAmount
	Local Fields
		LocalFinanceEnterpriseGroup				is like FinanceEnterpriseGroup
		LocalDerivedFESKey						is a FrontEndSplitKey
		LocalContractProject					is like Project
		LocalFundingGroup						is Numeric size 2
		LocalDistribution						is Numeric 15 
		LocalFinanceDimension2					is like FinanceDimension2
		LocalProject							is like Project
		LocalAllPercentages						is Boolean
		LocalRel100Percent 						is Percent size 8.5
		LocalRel0Percent 						is Percent size 8.5
		
	Field Rules
		DistributionBy
			default to DistributionBy.ByPercent
		FESPercent
			default to DerivedPercentPercent
		FESQuantity
			default to DerivedQuantityPercent

	Derived Fields
		DerivedAmountToPercent	is a DerivedField
			type is Percent size 8.5
			restricted
			if(FESAmount < DistributionAmount)
				return (FESAmount/DistributionAmount)
			else
				if(FESAmount < 0 and DistributionAmount < 0 
				and (FESAmount > DistributionAmount))
					return (FESAmount/DistributionAmount)
				else
					return 100%

		DerivedQuantityPercent is a DerivedField
			type is like Quantity
			restricted
			return (DistributionQuantity * DerivedAmountToPercent)

		DerivedPercentPercent		is a DerivedField  
			type is Percent size 8.5
			restricted
			return (DistributionPercent * DerivedAmountToPercent)
			
	Relations
		BudgetTemplateOutputRel
  			one-to-one relation to BudgetTemplateOutput
         	Field Mapping uses symbolic key
         		related.FinanceEnterpriseGroup 				= LocalFinanceEnterpriseGroup
  				related.BudgetTemplateOutput				= LocalDerivedFESKey

		ContractProjectRel
			one-to-one relation to Project
         	Field Mapping uses symbolic key
         		related.FinanceEnterpriseGroup 				= LocalFinanceEnterpriseGroup
  				related.Project								= LocalContractProject
  				
		ActiveProjFundSrcFundGroupRel
			one-to-many relation to ProjectFundingSource
			Field Mapping uses ByPriority
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectContract			= LocalContractProject
			Instance Selection
				where (related.FundingGroup		= LocalFundingGroup
				and related.FinanceDimension2.Active
				and related.Active
				and (LocalAllPercentages or related.Percent = LocalRel100Percent))
 
 		FESDistributionsByFundGroupRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= LocalDistribution
			    related.FrontEndSplitDistributions.FundingGroup 	= LocalFundingGroup
			    
		FundingSourceSelectedProjectRel
			one-to-one relation to FundingSourceSelectedProject
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectContract			= LocalContractProject
				related.FinanceDimension2		= LocalFinanceDimension2
				related.Project					= LocalProject

	Actions
		Create is a Create Action
			restricted
		CreateNoRules is a Create Action
			restricted
			bypass field rules
		Update is an Update Action
			restricted
		Delete is a Delete Action
			restricted
		Purge is a Purge Action
			restricted

		SplitDistribution is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup 				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity         	  		is an AccountingEntity
					default label is "AccountingEntity"
				PrmDistribution							is Numeric 15
					default label is "Distribution"
				PrmDerivedFESKey						is a FrontEndSplitKey
					default label is "FrontEndSplitKey"
				PrmDistributionAmount					is an InternationalAmount
					default label is "DistributionAmount"
				PrmDistributionUnitsAmount				is an UnitsAmount
					default label is "UnitsAmount"
				PrmDistributionQuantity					is a Quantity
					default label is "DistributionQuantity"
				PrmDistributionPercent					is Percent size 8.5
					default label is "DistributionPercent"
				PrmDistributionAmountWithTax			is an InternationalAmount
					default label is "DistributionAmountWithTax"
				PrmTransactionDate						is an ExchangeDate
					default label is "TransactionDate"
				PrmPostingDate							is a PostingDate
					default label is "PostingDate"
				PrmTransactionCurrencyCode				is a Currency
					default label is "TransactionCurrencyCode"
				PrmDistributionBy						is a DistributionBy
					default label is "DistributionBy"
				PrmNumberOfDecimalsQuantity				is a NumberOfDecimalsQuantity
					default label is "NumberOfDecimalsQuantity"
				PrmGeneralLedgerSystemCode				is a GeneralLedgerSystemCode

				PrmTransactionCodeBlock					is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
			Local Fields
				LocalFESGLFinanceCodeBlock				is a FinanceCodeBlock
				LocalSkipGroup							is Boolean
				LocalBudgetCheck						is Boolean
				LocalTempProportion						is Percent size 8.5
				LocalMinProportion						is Percent size 8.5
				LocalProjFundSrcPer 					is Percent size 8.5 
				LocalBudgetAmount						is like TotalAmount 
				LocalMinProportionBudAmt				is an InternationalAmount 
				LocalMinProportionAmoWithTax			is an InternationalAmount 
				LocalCommitmentAmountWithTax			is an InternationalAmount
					precision is PrmTransactionCurrencyCode.NumberOfDecimals
						round to precision
				LocalProjFundSrcPerAmt					is an InternationalAmount
					precision is PrmTransactionCurrencyCode.NumberOfDecimals
						round to precision
				LocalFundGroupAmount					is an InternationalAmount
					precision is PrmTransactionCurrencyCode.NumberOfDecimals
						round to precision
				LocalDistRemainingAmount				is an InternationalAmount
					precision is PrmTransactionCurrencyCode.NumberOfDecimals
						round to precision
				LocalFrontEndSplitDistributionsView		is a FrontEndSplitDistributions view
				LocalValidSource						is Boolean
				LocalValidPercentage					is Boolean
				LocalToleranceAmount					is an InternationalAmount 
				LocalNegToleranceAmount					is an InternationalAmount 
				LocalToleranceCheckAmount				is an InternationalAmount 
				LocalMinActiveProjFundSrcPer			is Percent size 8.5
				LocalTempMinActiveProjFundSrcPer		is Percent size 8.5
				LocalRunningActiveProjFundSrcPer		is Percent size 8.5
				LocalProjFundSrcUnitsAmount				is an UnitsAmount
				LocalFundingGroupUnitsAmount			is an UnitsAmount
				LocalRemainingUnitsAmount				is an UnitsAmount
				LocalToleranceCheckUnitsAmount			is an UnitsAmount
				LocalOnlyUnitsAmount					is Boolean
				LocalBudgetScenario						is Alpha 40
				LocalBudgetTemplate						is Alpha 50
			Instance Selection
				where (false)
			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
					LocalDistribution 					= PrmDistribution
					LocalDerivedFESKey					= PrmDerivedFESKey
					LocalContractProject 				= PrmTransactionCodeBlock.Project.first FESProjectShadowContractRel.SummaryProject
					LocalDistRemainingAmount 			= PrmDistributionAmount
					LocalRemainingUnitsAmount			= PrmDistributionUnitsAmount
					LocalAllPercentages 				= true
					LocalRel100Percent					= 100% 
					LocalRel0Percent					= 0% 
					if(PrmTransactionCurrencyCode.NumberOfDecimals.Three)
						LocalToleranceAmount	= 0.001
					else
						if(PrmTransactionCurrencyCode.NumberOfDecimals.Zero)
							LocalToleranceAmount	= 1
						else
							LocalToleranceAmount	= 0.01
					LocalNegToleranceAmount = (LocalToleranceAmount * -1)
					if (PrmFinanceEnterpriseGroup.UseFundedAmounts)
						if (PrmGeneralLedgerSystemCode.BudgetSystemCode)
							LocalBudgetCheck = true
					else
						if(PrmGeneralLedgerSystemCode.EncumbranceOption.TrackAndEdit)
							LocalBudgetCheck = true
						else
							LocalBudgetCheck = false
					if(PrmDistributionAmount not entered 
					and PrmDistributionUnitsAmount entered)
						LocalOnlyUnitsAmount = true
						LocalBudgetCheck = false
					constraint (instance count of ContractProjectRel.ProjectContract.ActiveProjectFundingSourceRel > 0)
						"NoFundingSourceAvailableForContractProject<ContractProjectRel.Project>"
					for each distinct FundingGroup in ContractProjectRel.ProjectContract.ActiveProjectFundingSourceRel
						LocalFundingGroup 		= each.FundingGroup
						LocalMinProportion 		= 100%
						initialize LocalMinProportionBudAmt
						initialize LocalMinProportionAmoWithTax
						initialize LocalFundGroupAmount
						initialize LocalFundingGroupUnitsAmount
						initialize LocalSkipGroup
						initialize LocalMinActiveProjFundSrcPer
						initialize LocalTempMinActiveProjFundSrcPer
						initialize LocalRunningActiveProjFundSrcPer
						LocalAllPercentages			= true
						LocalMinActiveProjFundSrcPer = first ActiveProjFundSrcFundGroupRel.Percent
						for each ActiveProjFundSrcFundGroupRel
							if(each.Percent != 100%)
								LocalRunningActiveProjFundSrcPer = LocalRunningActiveProjFundSrcPer + each.Percent
								if(each.Percent < LocalMinActiveProjFundSrcPer)
									LocalMinActiveProjFundSrcPer = each.Percent
							else
								if(LocalRunningActiveProjFundSrcPer < LocalRel100Percent)
									LocalTempMinActiveProjFundSrcPer = LocalRel100Percent - LocalRunningActiveProjFundSrcPer
									if(LocalTempMinActiveProjFundSrcPer < LocalMinActiveProjFundSrcPer)
										LocalMinActiveProjFundSrcPer = LocalTempMinActiveProjFundSrcPer
						if(LocalMinActiveProjFundSrcPer > LocalRel0Percent)
							LocalToleranceCheckAmount 	= LocalDistRemainingAmount * LocalMinActiveProjFundSrcPer
							if(LocalOnlyUnitsAmount)
								LocalToleranceCheckUnitsAmount = LocalRemainingUnitsAmount * LocalMinActiveProjFundSrcPer
						else
							LocalToleranceCheckAmount 	= LocalDistRemainingAmount * min ActiveProjFundSrcFundGroupRel.Percent
							if(LocalOnlyUnitsAmount)
								LocalToleranceCheckUnitsAmount 	= LocalRemainingUnitsAmount * min ActiveProjFundSrcFundGroupRel.Percent
						if(!LocalOnlyUnitsAmount)
							if((PrmDistributionAmount > 0
							and LocalToleranceCheckAmount < LocalToleranceAmount)
							or (PrmDistributionAmount < 0 
							and LocalToleranceCheckAmount > LocalNegToleranceAmount))
								LocalAllPercentages = false
						else
							if((LocalToleranceCheckUnitsAmount < 0.01
							and PrmDistributionUnitsAmount > 0)
							or (LocalToleranceCheckUnitsAmount > -0.01
							and PrmDistributionUnitsAmount < 0))
								LocalAllPercentages = false
						
						if(LocalBudgetCheck
						and LocalAllPercentages
						and LocalDistRemainingAmount > 0)

							for each ActiveProjFundSrcFundGroupRel
								if(each.Percent != 100%)
									constraint (each.RevenueCodeBlockOption entered)
										"Revenue_\Structure_\OptionShouldBeEnteredFor<each.FinanceDimension2>"
									initialize LocalFESGLFinanceCodeBlock
									LocalFESGLFinanceCodeBlock 							= PrmTransactionCodeBlock
									LocalFESGLFinanceCodeBlock.FinanceDimension2		= each.FinanceDimension2
									if(PrmFinanceEnterpriseGroup.FundDimension entered)
										if(PrmFinanceEnterpriseGroup.FundDimension.Dimension1)
											if (each.RevenueCodeBlockOption.PartialStructure
											or (each.RevenueCodeBlockOption.None
											and each.RevenuePartialAccount.FinanceDimension1 entered))
												LocalFESGLFinanceCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
											else
												LocalFESGLFinanceCodeBlock.FinanceDimension1 = each.RevenueFullAccount.FinanceDimension1
										else
											if(PrmFinanceEnterpriseGroup.FundDimension.AccountingUnit)
												if (each.RevenueCodeBlockOption.PartialStructure
												or (each.RevenueCodeBlockOption.None
												and each.RevenuePartialAccount.AccountingUnit entered))
													LocalFESGLFinanceCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
												else
													LocalFESGLFinanceCodeBlock.AccountingUnit = each.RevenueFullAccount.AccountingUnit
									initialize LocalBudgetAmount
									initialize LocalProjFundSrcPerAmt
									initialize LocalCommitmentAmountWithTax
									initialize LocalTempProportion
									LocalProjFundSrcPerAmt = (LocalDistRemainingAmount * each.Percent)
									if (PrmFinanceEnterpriseGroup.UseFundedAmounts)
										LocalBudgetAmount = each.FundedAmount - each.FESExpenditures - each.FESCommitments
										if (LocalProjFundSrcPerAmt > 0
										and LocalBudgetAmount > 0)
											LocalCommitmentAmountWithTax 	= ((LocalProjFundSrcPerAmt/PrmDistributionAmount) * PrmDistributionAmountWithTax)
											if(LocalCommitmentAmountWithTax > LocalBudgetAmount)
												LocalTempProportion = (LocalBudgetAmount/LocalCommitmentAmountWithTax)
												if(LocalMinProportion > LocalTempProportion)
													LocalMinProportion = LocalTempProportion
													LocalMinProportionBudAmt = LocalBudgetAmount
													LocalMinProportionAmoWithTax = LocalCommitmentAmountWithTax
										else
											LocalSkipGroup = true
											end for each
									else
										invoke GetRemainingBudget BudgetTemplate
											invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
											invoked.PrmKey 						= LocalDerivedFESKey
											invoked.PrmCurrency 				= PrmTransactionCurrencyCode
											invoked.PrmTransactionCodeBlock		= LocalFESGLFinanceCodeBlock
											invoked.PrmDate 					= PrmTransactionDate
										if (not BudgetTemplateOutputRel.Invalid
										and BudgetTemplateOutputRel.Amount > 0
										and LocalProjFundSrcPerAmt > 0)
											LocalBudgetAmount 		= BudgetTemplateOutputRel.Amount
											LocalCommitmentAmountWithTax 	= ((LocalProjFundSrcPerAmt/PrmDistributionAmount) * PrmDistributionAmountWithTax)
											if(LocalCommitmentAmountWithTax > LocalBudgetAmount)
												LocalTempProportion = (LocalBudgetAmount/LocalCommitmentAmountWithTax)
												if(LocalMinProportion > LocalTempProportion)
													LocalMinProportion = LocalTempProportion
													LocalMinProportionBudAmt = LocalBudgetAmount
													LocalMinProportionAmoWithTax = LocalCommitmentAmountWithTax
										else
											LocalSkipGroup = true
											end for each

						if(!LocalSkipGroup)
							for each ActiveProjFundSrcFundGroupRel
								constraint (each.RevenueCodeBlockOption entered)
									"Revenue_\Structure_\OptionShouldBeEnteredFor<each.FinanceDimension2>"
								initialize LocalFESGLFinanceCodeBlock
								LocalFESGLFinanceCodeBlock 							= PrmTransactionCodeBlock
								LocalFESGLFinanceCodeBlock.FinanceDimension2		= each.FinanceDimension2
								if(PrmFinanceEnterpriseGroup.FundDimension entered)
									if(PrmFinanceEnterpriseGroup.FundDimension.Dimension1)
										if (each.RevenueCodeBlockOption.PartialStructure
										or (each.RevenueCodeBlockOption.None
										and each.RevenuePartialAccount.FinanceDimension1 entered))
											LocalFESGLFinanceCodeBlock.FinanceDimension1 = each.RevenuePartialAccount.FinanceDimension1
										else
											LocalFESGLFinanceCodeBlock.FinanceDimension1 = each.RevenueFullAccount.FinanceDimension1
									else
										if(PrmFinanceEnterpriseGroup.FundDimension.AccountingUnit)
											if (each.RevenueCodeBlockOption.PartialStructure
											or (each.RevenueCodeBlockOption.None
											and each.RevenuePartialAccount.AccountingUnit entered))
												LocalFESGLFinanceCodeBlock.AccountingUnit = each.RevenuePartialAccount.AccountingUnit
											else
												LocalFESGLFinanceCodeBlock.AccountingUnit = each.RevenueFullAccount.AccountingUnit
								initialize LocalProjFundSrcPerAmt
								initialize LocalProjFundSrcPer
								initialize LocalProjFundSrcUnitsAmount
								initialize LocalCommitmentAmountWithTax
								initialize LocalBudgetAmount
								if(each.Percent = 100%)
									if(!LocalOnlyUnitsAmount)
										LocalProjFundSrcPerAmt = (LocalDistRemainingAmount - LocalFundGroupAmount)
										LocalProjFundSrcPer = PrmDistributionPercent * (LocalProjFundSrcPerAmt/PrmDistributionAmount)
										LocalProjFundSrcUnitsAmount = PrmDistributionUnitsAmount * (LocalProjFundSrcPerAmt/PrmDistributionAmount)
									else
										LocalProjFundSrcUnitsAmount = (LocalRemainingUnitsAmount - LocalFundingGroupUnitsAmount)
									if(LocalBudgetCheck
									and LocalProjFundSrcPerAmt > 0)
										if (PrmFinanceEnterpriseGroup.UseFundedAmounts)
											LocalBudgetAmount = each.FundedAmount - each.FESExpenditures - each.FESCommitments
											if (LocalBudgetAmount > 0)
												LocalCommitmentAmountWithTax 	= ((LocalProjFundSrcPerAmt/PrmDistributionAmount) * PrmDistributionAmountWithTax)
												if(LocalCommitmentAmountWithTax > LocalBudgetAmount)
													LocalProjFundSrcPerAmt = ((LocalBudgetAmount/LocalCommitmentAmountWithTax) * LocalProjFundSrcPerAmt)

													LocalProjFundSrcPer = (LocalProjFundSrcPer * (LocalBudgetAmount/LocalCommitmentAmountWithTax))
													LocalProjFundSrcUnitsAmount = (LocalProjFundSrcUnitsAmount * (LocalBudgetAmount/LocalCommitmentAmountWithTax))
											else
												invoke Purge FESDistributionsByFundGroupRel
												LocalProjFundSrcPerAmt = 0
												LocalFundGroupAmount = 0
												end for each
										else
											invoke GetRemainingBudget BudgetTemplate
												invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
												invoked.PrmKey 						= LocalDerivedFESKey
												invoked.PrmCurrency 				= PrmTransactionCurrencyCode
												invoked.PrmTransactionCodeBlock		= LocalFESGLFinanceCodeBlock
												invoked.PrmDate 					= PrmTransactionDate
											if (not BudgetTemplateOutputRel.Invalid
											and BudgetTemplateOutputRel.Amount > 0)
												LocalBudgetAmount 		= BudgetTemplateOutputRel.Amount
												LocalCommitmentAmountWithTax 	= ((LocalProjFundSrcPerAmt/PrmDistributionAmount) * PrmDistributionAmountWithTax)
												if(LocalCommitmentAmountWithTax > LocalBudgetAmount)
													LocalProjFundSrcPerAmt = ((LocalBudgetAmount/LocalCommitmentAmountWithTax) * LocalProjFundSrcPerAmt)

													LocalProjFundSrcPer = LocalProjFundSrcPer * (LocalBudgetAmount/LocalCommitmentAmountWithTax)
													LocalProjFundSrcUnitsAmount = LocalProjFundSrcUnitsAmount * (LocalBudgetAmount/LocalCommitmentAmountWithTax)
											else
												invoke Purge FESDistributionsByFundGroupRel
												LocalProjFundSrcPerAmt = 0
												LocalFundGroupAmount = 0
												end for each
								else
									if(!LocalOnlyUnitsAmount)
										if(LocalMinProportion = 100%)
											LocalProjFundSrcPerAmt = (LocalDistRemainingAmount * each.Percent)
											LocalProjFundSrcPer = PrmDistributionPercent * each.Percent
											LocalProjFundSrcUnitsAmount = PrmDistributionUnitsAmount * each.Percent
										else
											LocalProjFundSrcPerAmt = (LocalDistRemainingAmount * each.Percent * (LocalMinProportionBudAmt/LocalMinProportionAmoWithTax))
											LocalProjFundSrcPer = PrmDistributionPercent * each.Percent * (LocalMinProportionBudAmt/LocalMinProportionAmoWithTax)
											LocalProjFundSrcUnitsAmount = PrmDistributionUnitsAmount * each.Percent * (LocalMinProportionBudAmt/LocalMinProportionAmoWithTax)
									else
										LocalProjFundSrcUnitsAmount = (LocalRemainingUnitsAmount * each.Percent)
								
								if(LocalProjFundSrcPer > 100%)
									LocalProjFundSrcPer = 100%
								LocalValidPercentage = true
								if(PrmDistributionBy.ByPercent)
									if(LocalProjFundSrcPer > 0%)
										LocalValidPercentage = true
									else
										LocalValidPercentage = false
								else
									LocalValidPercentage = true
								if((!LocalOnlyUnitsAmount
								and LocalProjFundSrcPerAmt != 0
								and LocalValidPercentage
								and ((PrmDistributionAmount > 0 
								and LocalProjFundSrcPerAmt >= LocalToleranceAmount)
								or (PrmDistributionAmount < 0
								and LocalProjFundSrcPerAmt <= LocalNegToleranceAmount)))
								or (LocalOnlyUnitsAmount
								and ((LocalRemainingUnitsAmount > 0
								and PrmDistributionUnitsAmount > 0)
								or (LocalRemainingUnitsAmount < 0
								and PrmDistributionUnitsAmount < 0))))
									invoke Create FrontEndSplitDistributions
										assign result to LocalFrontEndSplitDistributionsView
										invoked.FinanceEnterpriseGroup						= PrmFinanceEnterpriseGroup
										invoked.FrontEndSplitDistributions.FundingKey		= LocalDerivedFESKey
										invoked.FrontEndSplitDistributions.Distribution		= PrmDistribution
										invoked.FrontEndSplitDistributions.FundingGroup		= LocalFundingGroup
										invoked.CodeBlock									= LocalFESGLFinanceCodeBlock
										invoked.DistributionBy								= PrmDistributionBy
										invoked.NumberOfDecimalsQuantity					= PrmNumberOfDecimalsQuantity
										invoked.DistributionAmount							= PrmDistributionAmount
										invoked.DistributionQuantity						= PrmDistributionQuantity
										invoked.DistributionPercent							= PrmDistributionPercent
										invoked.FESAmount									= LocalProjFundSrcPerAmt
										if(PrmDistributionUnitsAmount entered)
											invoked.DistributionUnitsAmount					= PrmDistributionUnitsAmount
											invoked.FESUnitsAmount							= LocalProjFundSrcUnitsAmount
										if(PrmDistributionBy.ByPercent)
											invoked.FESPercent								= LocalProjFundSrcPer
										invoked.TransactionDate								= PrmTransactionDate
									LocalValidSource = true
									if (PrmTransactionDate not within each.FinanceDimension2.DateRange)
										LocalValidSource = false
									else
									if (each.SelectedProjectsOnly)
										LocalProject		   = LocalFESGLFinanceCodeBlock.Project
										LocalFinanceDimension2 = each.FinanceDimension2
										if (FundingSourceSelectedProjectRel not exists)
											LocalValidSource = false
									if (LocalValidSource)
										if (each.FESEligibilityGroup entered)
											if ((each.FESEligibilityGroupOption.Include
											and  LocalFrontEndSplitDistributionsView.FrontEndSplitDistributions not within each.FESEligibilityGroup)
											or  (each.FESEligibilityGroupOption.Exclude
											and  LocalFrontEndSplitDistributionsView.FrontEndSplitDistributions within each.FESEligibilityGroup))
												LocalValidSource = false
									if (!LocalValidSource)										
										invoke Purge FESDistributionsByFundGroupRel
										LocalProjFundSrcPerAmt = 0
										LocalFundGroupAmount = 0
										LocalProjFundSrcUnitsAmount = 0
										LocalFundingGroupUnitsAmount = 0
										end for each

								LocalFundGroupAmount	= LocalFundGroupAmount + LocalProjFundSrcPerAmt
								LocalFundingGroupUnitsAmount = LocalFundingGroupUnitsAmount + LocalProjFundSrcUnitsAmount

							LocalDistRemainingAmount = LocalDistRemainingAmount - LocalFundGroupAmount
							LocalRemainingUnitsAmount = LocalRemainingUnitsAmount - LocalFundingGroupUnitsAmount

						if(!LocalOnlyUnitsAmount)
							if ((LocalDistRemainingAmount < LocalToleranceAmount
							and  PrmDistributionAmount > 0)
							or  (LocalDistRemainingAmount > LocalNegToleranceAmount
							and  PrmDistributionAmount < 0))
								end for each
						else
							if((LocalRemainingUnitsAmount < 0.01
							and PrmDistributionUnitsAmount > 0)
							or (LocalRemainingUnitsAmount > -0.01
							and PrmDistributionUnitsAmount < 0))
								end for each


					if(!LocalOnlyUnitsAmount)
						if (!PrmFinanceEnterpriseGroup.UseFundedAmounts)
							invoke Purge BudgetTemplateOutputRel
							if(BudgetTemplateOutputRel.BudgetScenario entered)
								LocalBudgetScenario = "Scenario:" + BudgetTemplateOutputRel.BudgetScenario + ","
							if(BudgetTemplateOutputRel.BudgetTemplate entered)
								LocalBudgetTemplate	= "Budget Template:" + BudgetTemplateOutputRel.BudgetTemplate+ ","
							if (PrmDistributionAmount > 0)				
								constraint (LocalDistRemainingAmount < LocalToleranceAmount)
									"NotEnoughBudgetAvailableFor<LocalBudgetScenario><LocalBudgetTemplate>_\Project:<PrmTransactionCodeBlock.Project>,_ForDistributionUsing_\Account:<PrmTransactionCodeBlock.GeneralLedgerChartAccount>"
							if (PrmDistributionAmount < 0)
								constraint (LocalDistRemainingAmount > LocalNegToleranceAmount)
									"NoValidFundingSourcesAvailableToSplitTransactionFor_\Project:<PrmTransactionCodeBlock.Project>_\TransactionDate:<PrmTransactionDate>"
						else
							if (PrmDistributionAmount > 0)				
								constraint (LocalDistRemainingAmount < LocalToleranceAmount)
									"NotEnoughRemainingFundsToSplitTransactionFor_\Project:<PrmTransactionCodeBlock.Project>"
							if (PrmDistributionAmount < 0)
								constraint (LocalDistRemainingAmount > LocalNegToleranceAmount)
									"NoValidFundingSourcesAvailableToSplitTransactionFor_\Project:<PrmTransactionCodeBlock.Project>_\TransactionDate:<PrmTransactionDate>"

					else
						constraint((LocalRemainingUnitsAmount < 0.01	and PrmDistributionUnitsAmount > 0)	or (LocalRemainingUnitsAmount > -0.01 and PrmDistributionUnitsAmount < 0))
							"NoValidFundingSourcesAvailableToSplitUnitsFor_\Project:<PrmTransactionCodeBlock.Project>"

				Set Rules
					Entrance Rules
	Sets

		ByFundingGroup
			not indexed
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FrontEndSplitDistributions.FundingKey
				FrontEndSplitDistributions.Distribution
				FrontEndSplitDistributions.FundingGroup
