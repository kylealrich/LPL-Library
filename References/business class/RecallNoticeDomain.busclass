RecallNoticeDomain is a BusinessClass
    owned by recall
    prefix is RMRND

    Ontology
    	symbolic key is RecallNoticeDomain
    
    Persistent Fields
   	
   	Local Fields
		LocalRecallUser			is a RecallUser
		LocalRecallAdhocUser 	is a RecallAdhocUser	
	Conditions
		HasOrganizationUsers
			restricted
			when (RecallOrganizationUserRel exists)
			
		HasOrganizationUsersThatCanBeAttached
			when (AllRecallOrganizationUserByDomainRel exists)
				
   	Relations
		AllRecallOrganizationUserByDomainRel
			one-to-many relation to RecallOrganizationUser
			Field Mapping uses ByRecallDomain
				related.RecallGroup		= RecallGroup
				related.RecallDomain	= RecallNoticeDomain.RecallDomain
		
		AdhocUsersByDomain 
			one-to-many relation to RecallAdhocUserOrganization 
			Field Mapping uses symbolic key 
				related.RecallGroup 	= RecallGroup 
			Instance Selection 
				where (related.RecallOrganization.RecallDomain = RecallNoticeDomain.RecallDomain)
		
		AdhocUserRel 
			one-to-many relation to RecallAdhocUser 
			Field Mapping uses symbolic key 
				related.RecallGroup 		= RecallGroup 
				related.RecallAdhocUser 	= LocalRecallAdhocUser	


		RecallAdhocUserNotificationRel 
			one-to-one relation to RecallAdhocUserNotification 
			Field Mapping uses symbolic key 
				related.RecallGroup 		= RecallGroup 
				related.RecallNotice        = RecallNotice 
				related.RecallAdhocUser 	= LocalRecallAdhocUser					
		RecallNotificationRel
			one-to-one relation to RecallNotification
			Field Mapping uses symbolic key
				related.RecallGroup 	= RecallGroup
				related.RecallNotice	= RecallNotice
				related.RecallUser		= LocalRecallUser
		
		AdhocNotificationsForRecallDomainRel
			one-to-many relation to RecallAdhocUserNotification
			Field Mapping uses ByDomain
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.RecallDomain    = RecallNoticeDomain.RecallDomain

		NotificationsForRecallDomainRel
			one-to-many relation to RecallNotification
			Field Mapping uses ByRecallDomain
				related.RecallGroup		= RecallGroup
				related.RecallNotice	= RecallNotice
				related.RecallDomain 	= RecallNoticeDomain.RecallDomain
		
		RecallOrganizationUserRel
			one-to-many relation to RecallOrganizationUser
			Field Mapping uses ByDomainOrganization
				related.RecallGroup	 = RecallGroup
				related.RecallDomain = RecallNoticeDomain.RecallDomain
								
    Actions
    	Create is a Create Action
			restricted
			valid when (!RecallNotice.HistoricalRecallNotice)
   			Parameters
   				RecallGroup
				RecallNotice
				RecallDomain
   			
   			Action Rules
   				
   				invoke CreateRecallNoticeDomain this instance
   					invoked.RecallGroup						= RecallGroup
					invoked.RecallNotice					= RecallNotice
					invoked.RecallNoticeDomain.RecallDomain = RecallDomain
			
				
   				for each AllRecallOrganizationUserByDomainRel
					LocalRecallUser = each.RecallUser
					if (each.RecallUser.Active
					and each.RecallOrganization.Active)
						invoke Update RecallNotificationRel
							invoked.RecallGroup		= RecallGroup
							invoked.RecallNotice	= RecallNotice
							invoked.RecallUser		= each.RecallUser
							invoked.RecallDomain 	= RecallNoticeDomain.RecallDomain

				for each AdhocUsersByDomain 
					LocalRecallAdhocUser = each.RecallAdhocUser 
					if (each.RecallAdhocUser.Active
					and each.RecallOrganization.Active
					and RecallAdhocUserNotificationRel !exists)
						invoke Create RecallAdhocUserNotification	
							invoked.RecallGroup  	= RecallGroup
							invoked.RecallNotice 	= RecallNotice
							invoked.RecallAdhocUser	= LocalRecallAdhocUser 
							invoked.RecallDomain    = RecallNoticeDomain.RecallDomain					

   		CreateRecallNoticeDomain is a Create Action
    		restricted
    								
    	ReCreateNotifications is an Instance Action
			restricted
   			Action Rules
   				for each AllRecallOrganizationUserByDomainRel
					LocalRecallUser = each.RecallUser
					invoke Update RecallNotificationRel
						invoked.RecallDomain = RecallNoticeDomain.RecallDomain

				for each AdhocUsersByDomain 
					LocalRecallAdhocUser = each.RecallAdhocUser 
					if (each.RecallAdhocUser.Active
					and each.RecallOrganization.Active
					and RecallAdhocUserNotificationRel !exists)
						invoke Create RecallAdhocUserNotification	
							invoked.RecallGroup  	= RecallGroup
							invoked.RecallNotice 	= RecallNotice
							invoked.RecallAdhocUser	= LocalRecallAdhocUser 					
   		
		Delete is a Delete Action
			valid when (!RecallNotice.HistoricalRecallNotice)
			Action Rules
				invoke Delete NotificationsForRecallDomainRel
				invoke Delete AdhocNotificationsForRecallDomainRel
		
		Purge is a Purge Action
			restricted
