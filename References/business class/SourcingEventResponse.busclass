SourcingEventResponse is a BusinessClass
    owned by ss
    prefix is EVR

	Ontology
		symbolic key is SourcingEventResponse 
    	    			
    Patterns
        implements CompoundDocument
        	Document Components
        		SourcingEventResponseAttachment set
        		SourcingEventQuestionResponse set
        		SourcingEventLineResponse set
        implements Encrypted
			when (Sealed
			and  ((CloseDate >= current timestamp)
			or   (StepTwoStarted
			and   StepTwoCloseDate >= current timestamp
			and   TechnicalProposalAccepted)
			or   (BestAndFinalStarted
			and   BestAndFinalCloseDate >= current timestamp
			and   BestAndFinalSupplier)))
			
    Persistent Fields
    	Status 						is Numeric size 2	
    		States
                Draft 						value is 1 
                Submitted					value is 2
                Withdrawn					value is 3
        CurrencyCode				is a Currency    
        EnteredCurrencyCode         is a Currency
        ResponseWithdrawDate 		is TimeStamp
    	TermsAcceptedBySupplier		is Boolean
    	ManualResponse				is Boolean
    	NoBid						is Boolean
    	ConsolidateAward			is Boolean
    	ConsolidateOutput			is Boolean
    	NoBidReason
    	PurchaseOrder
    	RequestToNegotiateTerms		is Boolean
    	NegotiateTermsBox			is Text
    	NegotiatedTermsDocument		is a Attachment
    	BidBondId                   is Alpha size 11
    	BidBondValidated            is Boolean
    	PaperBidBond                is an Attachment
    	TechnicalProposalAccepted   is Boolean
    	BestAndFinalSupplier        is Boolean
    	TechnicalProposalDenialReason is an AwardReason
    	Sealed                      is Boolean
    	CloseDate                   is TimeStamp
    	StepTwoStarted              is Boolean
    	StepTwoCloseDate            is TimeStamp
    	BestAndFinalStarted         is Boolean
    	BestAndFinalCloseDate       is TimeStamp
		EventScore                  is an InternationalAmount
		TotalBidAmount              is an InternationalAmount              
		TotalBidAmountInResponseCurrency is an InternationalAmount
		InitialTotalBidAmount       is an InternationalAmount
		ResponseViewed              is Boolean
    
    Transient Fields
		LocalPurchaseOrder			is a PurchaseOrder
		SavedPurchaseOrder			is a PurchaseOrder
		OutputType					is Numeric size 2
    		States
                PO 						value is 1 
                Contract 				value is 2 
                Blanket 				value is 3 
                CatalogQuote 			value is 4 
                Standing 				value is 5 
                Service 				value is 6 
                NoOutput				value is 7
        BidDate                      is Alpha 20
        BidSecurityPercent           is Numeric size 2
        BidSecurityMaximum           is Numeric size 10
        AgencyID                     is Alpha 30
        AgencyName                   is Alpha 30
        AgencyPhone                  is Alpha 30 
        ErrorCode                    is Alpha 30      
		ErrorMessage                 is Alpha 30
		SupplierId                  is Alpha 30
		EventId                     is Alpha 30
		
    Local Fields
    	LocalItem					is an Item			
		UOMCalculation
		LocalPoCode					is a POCode
    	LocalCompany				is like Company 
    	LocalPartCompany			is like Company 
		LocalCurrencyExchange   	is a CurrencyExchange
		LocalAlertDays              is Numeric size 2
		SupplierTest                is Alpha 20
		EventTest                   is Alpha 20
		LocalProxyEmailAddressList  is an EmailAddressMulti 
			holds pii
		LocalProxyEmailAddressFound is Boolean
		LocalTimestamp              is TimeStamp		
		LocalNotifiedSupplier		is a NotifiedSupplier
		LocalSourcingEvent			is a SourcingEvent
    	BidsTotaled                 is Boolean
		TotalOfBid   				is an InternationalCost
		TotalOfAward 				is an InternationalCost
		LocalAddOnCharge        	is an AddOnCharge

		LocalSourcingEventLine				is Numeric size 6
		LocalSourcingEventQuestion			is Numeric size 6
		LocalSourcingEventLineQuestion		is Numeric size 6
		LocalSELSupplierQuestion			is Numeric size 6

	Context Fields
		SupplyManagementReportContext		is a SupplyManagementReport
    	
	Rule Blocks
		ValidateTerms
			if (!NoBid)
				if (TermsExists)
					if (SourcingEvent.AllowTermsToBeNegotiated)
						if (TermsAcceptedBySupplier) 
							constraint (!RequestToNegotiateTerms)
								"CannotSelectBothAcceptTermsAndConditionsAndChooseToNegotiateTerms"
						if (!TermsAcceptedBySupplier) 
							constraint (RequestToNegotiateTerms)
								"MustAcceptTermsAndConditionsOrChooseToNegotiateTermsToRespondToEvent"
						if (!RequestToNegotiateTerms) 
							constraint (TermsAcceptedBySupplier)
								"MustAcceptTermsAndConditionsOrChooseToNegotiateTermsToRespondToEvent"
					else
						if (TermsAcceptedBySupplier) 
							constraint (!RequestToNegotiateTerms)
								"CannotSelectBothAcceptTermsAndConditionsAndChooseToNegotiateTerms"
						constraint (TermsAcceptedBySupplier)
							"MustAcceptTermsAndConditionsToRespondToEvent"
				else
					constraint (!RequestToNegotiateTerms)
						"EventDoesNotHaveAnyTermsToNegotiate"
			else
				constraint (!RequestToNegotiateTerms)
					"CannotNegotiateTermsOnANoBid"

		CreatePlanHolder
			if (SourcingEvent.DisplayPlanHoldersList)
				invoke Create SourcingEventPlanHolder
					invoked.Company								= Company
					invoked.SourcingEvent						= SourcingEvent
					invoked.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
					invoked.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
					invoked.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
					
        VerifyBidBondID 
        	invoke VerifyBondID SuretyService
                invoked.Event           = SourcingEvent
                invoked.Supplier        = NotifiedSupplier.Supplier
                invoked.BondID          = BidBondId
                invoked.Partner         = "INFORLAWSON"
                invoked.SuretyPassword  = "LaWS0NbOND12"
                BidDate                 = result.SuretyResponse.BidDate
                BidSecurityPercent      = result.SuretyResponse.Security.BidSecurityPercent
                BidSecurityMaximum      = result.SuretyResponse.Security.BidSecurityMaximum
                AgencyID                = result.SuretyResponse.Agency.AgencyID
                ErrorCode               = result.ErrorResponse.Error.ErrorCode
                ErrorMessage            = result.ErrorResponse.Error.ErrorMessage
                
        BuildProxyEmailAddressList
			LocalProxyEmailAddressFound = false
			LocalProxyEmailAddressList  = ""
			for each SupplierContactProxyRel
				if (LocalProxyEmailAddressFound)
					LocalProxyEmailAddressList = LocalProxyEmailAddressList + "," + each.EmailAddress
				else
					LocalProxyEmailAddressList = each.EmailAddress
					LocalProxyEmailAddressFound = true 
					
		EditAwardAll
		
			if (SourcingEvent.RequireBidBond)
				constraint (BidBondValidated)
					"CannotAward;ABidBondIsRequiredAndHasNotBeenProvidedOrValidated"
			
			if (SourcingEvent.ResponsesNeedBuyerScoring)
				if (!SourcingEvent.PastBuyerWeightingDate)
					constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
						"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses."
				else
					constraint (!SourcingEvent.IncompleteBuyerScoringEdit.HardEditAtAwardTime)
						"CannotAwardUntilBuyerScoringHasBeenCompletedOnAllResponses;FinalBuyerWeightingDateHasPassed;MustExtendBuyerWeightingDateToEnterMissingResponses."										
					
				if (SourcingEvent.IncompleteBuyerScoringEdit.SoftEditAtAwardTime)
					confirmation required
						"BuyerScoringHasNotBeenCompletedOnAllResponses.AreYouSureYouWantToAwardToThisSupplier?"
			
			if (RequestToNegotiateTerms
			and !TermsHaveBeenNegotiated)
				confirmation required
					"SupplierChoseToNegotiateTerms;AreYouSureYouWantToAwardToThisSupplier?"

			constraint (!NoBid)
				"SupplierRespondedWithNoBid;CannotAwardAll"

			constraint (!ResponseLineAwarded exists)
				"CannotAwardAllIfLinesHaveAlreadyBeenAwarded"
			if (!SourcingEvent.InformalQuote)
				constraint (current timestamp >= SourcingEvent.CloseDate)
					"CannotAwardUntilEventIsClosed"
			
			if (RequiredQuestions exists
			or  RequiredSupplierQuestionsExists)
				if (NeedToValidateForSourcingEventQuestion)
					constraint (AdHocRequiredQuestionsAnsweredExists)
						"MustAnswerAllRequiredQuestionsForEvent"

				constraint ((AllHeaderQuestionsAnswered
					and     !SourcingEvent.AllowsConditionalQuestions)	
					or     (SourcingEvent.AllowsConditionalQuestions
					and     SourcingEventNotifiedSupplierQuestionsExists
					and     AllHeaderConditionalNotifiedQuestionsAnswered)	
					or     (SourcingEvent.AllowsConditionalQuestions
					and     SourcingEventPortalSupplierQuestionsExists
					and     AllHeaderConditionalQuestionsAnswered))
						"MustAnswerAllRequiredQuestionsForEvent"

			if  (!SourcingEvent.AllowsConditionalQuestions)
				for each LineQuestionsThatAreRequiredRel
					LocalSourcingEventLine				= each.SourcingEventLine
					LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
					constraint (LineQuestionsRequiredResponse exists)
						"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"
			else
			if  (SourcingEvent.AllowsConditionalQuestions)
				for each SELSupplierQuestionsThatAreRequiredRel
					LocalSourcingEventLine				= each.SourcingEventLine
					LocalSourcingEventLineQuestion		= each.SourcingEventLineQuestion
					LocalSELSupplierQuestion			= each.SELSupplierQuestion
					constraint (LineSupplierQuestionsRequiredResponse exists)
						"MustAnswerAllRequiredQuestions;EventLine:<LocalSourcingEventLine>,Question:<LocalSourcingEventLineQuestion>"

			for each SourcingEventLineResponse set
				LocalItem       = each.ItemNumber
				if (each.VendorItem entered)
			        if (each.SourcingEventLine.OutputType.PO)
				        if (each.SourcingEventLine.ItemType.Inventoried
				        or  each.SourcingEventLine.ItemType.NonStock)
					        if (each.VendorItemDefault exists)
								constraint (each.VendorItem exists)
									"VendorItem<each.VendorItem>EnteredOnLine<each.SourcingEventLine>NotEqualToVendorItemOnItem<each.SourcingEventLine.ItemNumber>-MustAwardByLine"
								constraint (each.VendorItem.Active)
									"VendorItem<each.VendorItem>EnteredOnLine<each.SourcingEventLine>IsInactive"
						
						constraint (!each.ItemExistsForVendorItemSpecial)
							"ItemExistsForVendorItemForLineDefinedAsSpecialItemTypeOnLine<each.SourcingEventLine>;MustRespondAtLineLevelAndIndicateToUseItemOrNot"
						if (each.VendorItem exists)
							if (each.VendorItem.MinimumOrderQuantity entered)
								if (each.VendorItem.VendorBuyUOM not entered
								or  each.VendorItem.VendorBuyUOM = each.SourcingEventLineResponse.UOM)
									constraint (each.SourcingEventLineResponse.Quantity >= each.VendorItem.MinimumOrderQuantity)
										"ResponseLineQuantityOf<each.SourcingEventLineResponse.Quantity>ForLine<each.SourcingEventLine>WithVendorItem<each.VendorItem>DoesNotMeetTheVendorItemMinimumQuantityPer_POLineOf<each.VendorItem.MinimumOrderQuantity>"
								else
									initialize UOMCalculation
									UOMCalculation.InputUOM 		= each.UOM
									UOMCalculation.InputToUOM		= each.VendorItem.VendorBuyUOM
									UOMCalculation.InputQuantity	= each.AwardQuantity
									UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
									constraint (UOMCalculation.OutputQuantity >= each.VendorItem.MinimumOrderQuantity)
										"ResponseLineLineQuantityConvertedToVendorBuyUOMOf<UOMCalculation.OutputQuantity>_<each.VendorItem.VendorBuyUOM>ForLine<each.SourcingEventLine>WithVendorItem<each.VendorItem>DoesNotMeetTheVendorItemMinimumQuantityPer_POLineOf<each.VendorItem.MinimumOrderQuantity>"

					if (each.VendorItem.VendorPriceUOM entered
					and each.VendorItem.VendorBuyUOM entered)
						constraint (each.VendorItem.VendorPriceUOM = each.SourcingEventLineResponse.UOM)
							"PriceUOMOf<each.VendorItem.VendorPriceUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.SourcingEventLineResponse.UOM>OnLine<each.SourcingEventLine>"
					else
					if (each.VendorItem.VendorBuyUOM entered
					and !each.SourcingEventLine.OutputType.PO)
						constraint (each.VendorItem.VendorBuyUOM = each.SourcingEventLineResponse.UOM)
							"BuyUOMOf<each.VendorItem.VendorBuyUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.SourcingEventLineResponse.UOM>OnLine<each.SourcingEventLine>"
					else
					if (each.VendorItem.VendorPriceUOM entered)
						constraint (each.VendorItem.VendorPriceUOM = each.SourcingEventLineResponse.UOM)
							"PriceUOMOf<each.VendorItem.VendorPriceUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.SourcingEventLineResponse.UOM>OnLine<each.SourcingEventLine>"
	
					if (each.SourcingEventLine.NonServiceContracts)
						if (each.SourcingEventLine.ItemType.Special)
							constraint (!each.SpecialMatchItemVenItemRel exists)
								"SpecifiedItemAndVendorItemCannotHaveDifferentUOMForSameContract-MustAwardByLine"
								
		TotalBidsAndAwards
			if (!BidsTotaled)
				for each SuccessSourcingEventLineResponseRel
					TotalOfBid   += each.BaseExtendedPrice
					TotalOfAward += each.BaseAwardExtendedPrice
			BidsTotaled = true

	Derived Fields
		BidTotal is a DerivedField
			type is like InternationalAmount
			include TotalBidsAndAwards
			return TotalOfBid
			
		AwardTotal is a DerivedField
			type is like InternationalAmount
			include TotalBidsAndAwards
			return TotalOfAward
		
		DerivedEventText is a DerivedField
			type is Alpha size 50
			if (ResponseExists)
				return SourcingEvent.RepresentativeText
			else
				return blank

		SupplierTotalBidAmount is a DerivedField 
    		type is like InternationalAmount
    		return (sum ActiveResponseLines.TotalResponse + sum HeaderAddOnChargeResponseRel.TotalAOCCost)
    	
    	SupplierTotalBidAmountInResponseCurrency is a DerivedField
    		type is like InternationalAmount
    		return (sum ActiveResponseLines.TotalResponseInResponseCurrency + sum HeaderAddOnChargeResponseRel.CurrencyTotalAOCCost)
    	
    	DerivedSupplierTotalBidAmount is a DerivedField 
    		type is Decimal size 21.2
    		return TotalBidAmount

		SupplierInitialTotalBidAmount is a DerivedField 
    		type is like InternationalCost
    		return 0
		
		SupplierInitialTotalBidAmountInResponseCurrency is a DerivedField 
    		type is like InternationalCost
    		return (sum ActiveResponseLines.TotalInitialResponseInResponseCurrency + sum HeaderAddOnChargeResponseRel.CurrencyTotalAOCCost)
		
		BidBondDerived is a DerivedField
        	type is Alpha size 250
            invoke VerifyBondID SuretyService
            	invoked.Event                 = SourcingEvent
                invoked.Supplier              = NotifiedSupplier.Supplier
                invoked.BondID                = BidBondId
                invoked.Partner               = "INFORLAWSON"
                invoked.SuretyPassword        = "LaWS0NbOND12"
                BidDate                       = result.SuretyResponse.BidDate
                BidSecurityPercent            = result.SuretyResponse.Security.BidSecurityPercent
                BidSecurityMaximum            = result.SuretyResponse.Security.BidSecurityMaximum
                AgencyID                      = result.SuretyResponse.Agency.AgencyID
                AgencyName                    = result.SuretyResponse.Agency.AgencyName
                AgencyPhone                   = result.SuretyResponse.Agency.AgencyPhone
		
		
		SupplierOverUnderPercent is a DerivedField
			type is like InternationalAmount
    		restricted
			return (((TotalBidAmount / SourcingEvent.EstimatedTotal) -1) * 100)
			
		SupplierOverUnderSign is a ConditionalField
			type is Alpha size 1
    		restricted
			if (SupplierOverUnderPercent > 0)
				"+"
			else
				" "

		SupplierPrintOverUnderPercent is a StringField
			type is Alpha size 25
			SupplierOverUnderSign + SupplierOverUnderPercent + "%"

		SupplierTotalAwarded is a DerivedField 
    		type is like InternationalAmount
    		return (sum ResponseLineAwarded.AwardTotalResponse + sum AltResponseLineAwarded.AwardTotalResponse)

    	LinesRespondedToBySupplier is a ComputeField
			type is Numeric size 6
			(instance count of ActiveResponseLines)
		
		LinesRespondedString is a StringField
			type is Alpha size 15
			LinesRespondedToBySupplier
			"/"
			SourcingEvent.NumberOfSourcingEventLines
		
		LinesRespondedPrint is a MessageField
			"<LinesRespondedToBySupplier>_OutOf_<SourcingEvent.NumberOfSourcingEventLines>_Lines"
		
		DoesNotIncludeMessage is a MessageField
    		restricted
			"**AmountDoesNotIncludeAmountsFromAlternateResponses"
		
		AlternateResponseNotIncludedPrint is a ConditionalField
			type is Text
			if (ShowAlternateAlert)
				DoesNotIncludeMessage
			else
				blank
				
		AlternateResponseLineCount is a ComputeField
			type is Numeric size 6
    		restricted
			(instance count of AlternateResponsesRel) 
		
		AlternateResponseLineCountPrint is a MessageField
			"**ThisEventHas<AlternateResponseLineCount>Line(s)WithAlternateResponses"
					
		TermsLinkMessage is a MessageField
    		restricted
			"TermsAndConditionsMustBeAcceptedBeforeYouCanRespondToThisEvent"
		
		RequestModificationLinkback	is a MessageField
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is SupplierViewResponse text is \"here\")>"

		TermsLink is a ConditionalField
 			type is Text
    		restricted
			if (DisplayTerms)
 				TermsLinkMessage
 			else
 				blank
 		
 		TermsLink2Message is a MessageField
    		restricted
 			"ClickTheFollowingLinkToReviewAllTermsAndConditions"
 		
 		TermsLink2 is a ConditionalField
 			type is Text
    		restricted
			if (DisplayTerms)
 				TermsLink2Message
 			else
 				blank
 						
		RequiredHeaderMessage is a MessageField
    		restricted
			"YourResponseIsIncomplete"
		
		RequiredHeader is a ConditionalField
			type is Text
    		restricted
			if (RequirementsNotSatisfied)
				RequiredHeaderMessage
			else
				blank
		
		RequiredLine1Message is a MessageField
    		restricted
			"_YouMustRespondToAtLeastOneLineForThisEvent"
			
		RequiredLine2Message is a MessageField
    		restricted
			"_YouMustRespondToAllLinesForThisEvent"
			
		RequiredLine3Message is a MessageField
    		restricted
			"_YouMustRespondToAllRequiredLinesForThisEvent"
			
		RequiredLine is a ConditionalField
			type is Text
    		restricted
			if (!TechnicalProposalOnly)
				if (!SourcingEventLineResponse set exists)
					RequiredLine1Message
				else
				if (SourcingEvent.RequireAllLines
				and !RespondedToAllLines)
					RequiredLine2Message
				else
				if (!AllRequiredLinesAnswered)
					RequiredLine3Message
				else
					blank
			else
				blank
					
		RequiredLineSupplier is a ConditionalField
			type is Text
    		restricted
			if (!TechnicalProposalOnly)
				if (!AllRequiredLinesAnswered)
					RequiredLine3Message
				else
					blank
			else
				blank
					
		RequiredQuestionHeaderMessage is a MessageField
    		restricted
			"_MustAnswerAllRequiredQuestionsForThisEvent"
		
		RequiredQuestionHeader is a ConditionalField
			type is Text
    		restricted
			if (!NoBid)
				if  (!AllHeaderQuestionsAnswered)
					RequiredQuestionHeaderMessage
				else
				if  (RequiredPortalSupplierQuestionsRel exists
				and !AllHeaderConditionalQuestionsAnsweredResponseExists)
					RequiredQuestionHeaderMessage
				else
					blank
			else
				blank
				
		RequiredQuestionLineMessage is a MessageField
    		restricted
			"_MustAnswerAllRequiredLineQuestionsForThisEvent"
		
		RequiredQuestionLine is a ConditionalField
			type is Text
    		restricted
			
			if (!TechnicalProposalOnly
			and !AllLineQuestionsAnswered)
				RequiredQuestionLineMessage
			else
				blank
				
		WarningHeaderMessage is a MessageField
    		restricted
			"BeforeYouSubmitThisEvent,ReviewTheFollowingListToEnsureYourResponseIsAccurate"
		
		WarningHeader is a ConditionalField
			type is Text
    		restricted
			if (!NoBid
			and	WarningResponseValid)
				WarningHeaderMessage
			else
				blank
				
		NoResponseLineMessage is a MessageField
    		restricted
			"_YouHaveNotRespondedToSomeNonRequiredLinesForThisEvent"
		
		NoResponseLine is a ConditionalField
			type is Text
    		restricted
			if (!Status.Submitted
			and	!AllNonRequiredLinesRespondedTo
			and !TechnicalProposalOnly)
				NoResponseLineMessage
			else
				blank
				
		NoResponseQuestionHeaderMessage is a MessageField
    		restricted
			"_YouHaveNotRespondedToSomeNonRequiredQuestionsForThisEvent"
			
		NoResponseQuestionHeader is a ConditionalField
			type is Text
    		restricted
			if (!Status.Submitted
			and !NoBid
			and	!AllNonRequiredHeaderQuestionsRespondedTo)
				NoResponseQuestionHeaderMessage
			else
				blank
				
		NoResponseQuestionLineMessage is a MessageField
    		restricted
			"_YouHaveNotRespondedToSomeNonRequiredLineQuestionsForThisEvent"
		
		NoResponseQuestionLine is a ConditionalField
			type is Text
    		restricted
			if (!Status.Submitted
			and !NoBid
			and	!AllNonRequiredLineQuestionsRespondedTo
			and !TechnicalProposalOnly)
				NoResponseQuestionLineMessage
			else
				blank
		
		NoResponseAOCMessage is a MessageField
    		restricted
			"_YouHaveNotEnteredInformationForSomeRequiredAddOnChargesForThisEvent"
		
		NoResponseAOC is a ConditionalField
			type is Text
    		restricted
			if (!Status.Submitted
			and !NoBid
			and AllRequiredAddOnChargesNotEntered
			and !TechnicalProposalOnly)
				NoResponseAOCMessage
			else
				blank
		
		NoResponseBidBondMessage is a MessageField
    		restricted
			"YouHaveNotEnteredABidBondIdOrAttachedAPaperBidBond;AnIdMustBeEnteredOrAPaperBidBondMustBeAttached"
		
		NoResponseBidBond is a ConditionalField
			type is Text
    		restricted
			if (!Status.Submitted
			and !NoBid
			and SourcingEvent.RequireBidBond
			and BidBondId !entered
			and PaperBidBond !entered)
				NoResponseBidBondMessage
			else
				blank
		
		SubmittedTextWithAmount is a MessageField
    		restricted
			"YourResponseIsReadyToBeSubmitted.YourBidAmountIs<SupplierTotalBidAmount>.ClickThe_SubmitActionToCompleteYourResponse"
		
		SubmittedTextWithAltAmount is a MessageField
    		restricted
			"YourResponseIsReadyToBeSubmitted.YourBidAmountIs<SupplierTotalBidAmount>.__**BidAmountDoesNotIncludeAmountsFromAlternateResponses.__ClickThe_SubmitActionToCompleteYourResponse"
		
		SubmittedTextTechnicalProposal is a MessageField
    		restricted
			"YourResponseIsReadyToBeSubmitted.ThisResponseIsForATechnicalProposalOnly.ClickThe_SubmitActionToCompleteYourResponse"
				
		SubmittedText is a ConditionalField
			type is Text
    		restricted
 			if (NotSubmitted
 			and !TechnicalProposalOnly
 			and MainResponsesOnlyRel exists)
 				SubmittedTextWithAmount
 			else
 			if (NotSubmitted
 			and AlternateResponsesOnlyRel exists)
 				SubmittedTextWithAltAmount
 			else
 			if (NotSubmitted
 			and TechnicalProposalOnly)
 				SubmittedTextTechnicalProposal
 			else
 				blank

 		ContinueRespondingLater1Message is a MessageField
    		restricted
 			"Congratulations,YourResponseHasBeenSubmitted.ClickThe_BackButtonOnTheBrowserToReturnToWhereYouStarted;OrSelectAMenuItemToContinueWithOtherTasks"
 			
 		ContinueRespondingLater3Message is a MessageField
    		restricted
 			"ClickThe_PreviousButtonToFixTheMissingResponseRequirements,OrClickThe_BackButtonOnTheBrowserOrSelectAMenuItemToCompleteYourResponseAtALaterTime"
 		
 		ContinueRespondingLater is a ConditionalField
 			type is Text
    		restricted
 			if (Status.Submitted)
 				ContinueRespondingLater1Message
 			else
 			if (NotSubmitted)
 				blank
 			else
 				blank
 		
 		EventCloseDate is a ConditionalField
			type is TimeStamp
    		restricted
 			if (!Status.Submitted
 			and	SourcingEvent.CloseDate entered)
 				SourcingEvent.CloseDate
 			else
 				blank
 		
 		DerivedCloseDate is a ConditionalField
 			type is TimeStamp
 			if (SourcingEvent.BestAndFinalCloseDate entered)
 				SourcingEvent.BestAndFinalCloseDate
 			else 
 			if (SourcingEvent.StepTwoCloseDate entered)
 				SourcingEvent.StepTwoCloseDate
 			else
 				SourcingEvent.CloseDate
 		
 		SubmissionDateMessage is a MessageField
    		restricted
 			"ToBeEligibleForAward,YourResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>"
 		
 		SubmissionDate is a ConditionalField
 			type is Text
    		restricted
 			if (!Status.Submitted
 			and	SourcingEvent.DerivedCloseDate entered)
 				SubmissionDateMessage
 			else
 				blank
 							   		    	
		SupplierAttachments is a ConditionalField
			type is Alpha size 10
			if (AttachmentsExist)
				ViewMessage
 			else
 				blank
 		
 		ViewPaperBidBond is a ConditionalField
 			type is Alpha size 10
    		restricted
 			if (PaperBidBondEntered)
 				ViewMessage
 			else 
 				blank
 		
 		QuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (SEQuestionResponseExists)
 				ViewMessage
 			else
 				blank	
 		
 		SupplierQuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (HeaderConditionalQuestions exist)
 				ViewMessage
 			else
 				blank	
 		
 		LineQuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (LineQuestionsExists)
 				ViewMessage
 			else
 				blank
 		
 		LineSupplierQuestionResponses is a ConditionalField
 			type is Alpha size 10
 			if (LineSupplierQuestionsExists)
 				ViewMessage
 			else
 				blank
 		
 		TermsAndConditionsString is a MessageField
    		restricted
 			"TermsAndConditions"
 			
 		TermsAcceptance is a MessageField
    		restricted
 			"IAcceptTheTermsAndConditionsForThisEventAndConfirmThatIAmAuthorizedToAcceptTheseTermsAndConditionsAndSubmitBidsForMyCompany"
 		
 		NoBidAcceptance is a MessageField
    		restricted
 			"IDoNotWantToBidOnThisEvent"
 		
 		NegotiateAcceptance is a MessageField
    		restricted
 			"IWouldLikeToNegotiateTheTermsAndConditionsForThisEvent"

 		TotalBuyerScore is a DerivedField
			type is like InternationalAmount
    		restricted
			return (sum ResponseBuyerWeightingRel.CriteriaScore)
			
 		TotalEventScore is a DerivedField 
			type is like InternationalAmount
			return 0
			
    	TotalTechnicalProposalScore is a DerivedField
			type is like InternationalAmount
    		restricted
			return (DiversityScore + TotalQuestionScore + TotalBuyerScore)
    	
    	PriceScore is a DerivedField
    		type is like InternationalAmount
    		return (sum ActiveResponseLines.EventPriceScore)
    	
    	DeliveryScore is a DerivedField
    		type is like InternationalAmount
    		return (sum ActivePoLineResponses.EventDeliveryScore)
    	
    	DiversityScore is a DerivedField
    		type is like InternationalAmount
    		if (NoBid)
    			return 0
    		else
    		if (NotifiedSupplier.Supplier.DiversityRel exists)
    			return (100 * SourcingEvent.WeightingCriteria.DiversityWeighting)
    		else
    			return (SourcingEvent.DiversityScoreAllocation * SourcingEvent.WeightingCriteria.DiversityWeighting)
    						
    	TotalQuestionScore is a DerivedField
    		type is like InternationalAmount
			if (!SourcingEvent.AllowsConditionalQuestions)
	    		return (sum WeightedQuestionResponseRel.QuestionScore)
			else
	    		return (sum WeightedSupplierQuestionResponseRel.QuestionScore)


		EventTotalTechnicalProposalScore is a ConditionalField
			type is AlphaRight size 8
			if (TotalTechnicalProposalScore !=0)
				TotalTechnicalProposalScore
			else
				"0.00"
		
		EventTotalEventScore is a ConditionalField
			type is AlphaRight size 8
			if (EventScore != 0)
				EventScore
			else
				"0.00"
		
		TotalEventCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.TotalWeightingByEvent * 100)
			
		EventTotalEventWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.TotalWeightingByEvent != 0)
				TotalEventCalc
			else
				"0.00"
		
		TotalTechnicalProposalCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.TotalTechnicalProposalWeightingByEvent * 100)
			
		EventTotalTechnicalProposalWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.TotalTechnicalProposalWeightingByEvent !=0)
				TotalTechnicalProposalCalc
			else
				"0.00"
		
		EventPriceScore is a ConditionalField
			type is AlphaRight size 8
			if (PriceScore != 0)
				PriceScore
			else
				"0.00"
		
		EventPriceCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.WeightingCriteria.PriceWeighting * 100)
				
		EventPriceWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.WeightingCriteria.PriceWeighting != 0)
				EventPriceCalc
			else
				"0.00"
		
		EventDeliveryScore is a ConditionalField
			type is AlphaRight size 8
			if (DeliveryScore != 0)
				DeliveryScore
			else
				"0.00"
		
		EventDeliveryCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.WeightingCriteria.DeliveryWeighting * 100)
					
		EventDeliveryWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.WeightingCriteria.DeliveryWeighting != 0)
				EventDeliveryCalc
			else
				"0.00"
		
		EventDiversityScore is a ConditionalField
			type is AlphaRight size 8
			if (DiversityScore != 0)
				DiversityScore
			else
				"0.00"
		
		EventDiversityCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.WeightingCriteria.DiversityWeighting * 100)
						
		EventDiversityWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.WeightingCriteria.DiversityWeighting != 0)
				EventDiversityCalc
			else
				"0.00"
		
		EventTotalQuestionScore is a ConditionalField
			type is AlphaRight size 8 
			if (TotalQuestionScore != 0)
				TotalQuestionScore
			else
				"0.00"
		
		EventTotalBuyerScore is a ConditionalField
			type is AlphaRight size 8 
			if (TotalBuyerScore != 0)
				TotalBuyerScore
			else
				"0.00"
		
		EventQuestionCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.TotalQuestionWeighting * 100)
					
		EventTotalQuestionWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.TotalQuestionWeighting != 0)
				EventQuestionCalc
			else
				"0.00"
			
		EventBuyerCalc is a ComputeField
			type is Decimal size 8.2
    		restricted
			(SourcingEvent.TotalBuyerWeighting * 100)
					
		EventTotalBuyerWeighting is a ConditionalField
			type is AlphaRight size 8
			if (SourcingEvent.TotalBuyerWeighting != 0)
				EventBuyerCalc
			else
				"0.00"
			
    	NumberOfSubmittedResponseLines is a ComputeField	
    		type is Numeric size 6
    		restricted
   			(instance count of SubmittedLineResponses)
   			
   		NumberOfSubmittedResponsePoLines is a ComputeField	
    		type is Numeric size 6
    		restricted
   			(instance count of SubmittedPoLineResponses)
    	
		YesMessage is a MessageField
    		restricted
			"Yes"
			
		NoMessage is a MessageField
    		restricted
			"No"
		
		AwardedStatus is a ConditionalField
			type is Alpha size 5
    		restricted
			if (ShowEventAwarded exists)
				YesMessage
			else
				NoMessage

		ViewMessage is a MessageField
    		restricted
			"View"
		
		DerivedCreateDate is a DerivedField
			type is TimeStamp
			for each audit log records
				if (each.action = "ManualResponseDraft"
				or  each.action = "CreateDraft")
					return each.effective stamp

		DerivedSubmitDate is a DerivedField
			type is TimeStamp
			initialize LocalTimestamp
			for each audit log records
				if (each.action = "SubmitDraft")
					LocalTimestamp = each.effective stamp
			return LocalTimestamp
					
		NegotiateTerms is a ConditionalField
			type is Alpha size 10
			if (RequestToNegotiateTerms
			and (NegotiateTermsBox entered
			or   NegotiatedTermsDocument entered))
				ViewMessage
 			else
 				blank
    	
    	AlternateAlertText is a MessageField
    		restricted
 			"AlternateResponsesExistForThisSupplier;SeeResponsesByLineTabForDetails;AlternateAmountsNotIncludedInTotalBid"
 		
 		AlternateAlertText2 is a MessageField
    		restricted
 			"AlternateResponsesExistForThisSupplier;SeeLineResponsesLinkForDetails;AlternateAmountsNotIncludedInTotalBid"

		AwardAllOnMatrixMessage is a MessageField
			"(AwardAllValidOnlyWhenOutputIsSameForAllLines)"

    	NumberOfActiveResponseLines is a ComputeField	
    		type is Numeric size 6
    		restricted
   			(instance count of ActiveResponseLines)

   		NumberOfActiveResponsePoLines is a ComputeField	
    		type is Numeric size 6
    		restricted
   			(instance count of ActivePoLineResponses)
   			
   		Surety2000 is a StringField
   			type is URL
    		restricted
   			"https://dashboard.surety2000.com"
   			
   		ResponseTotalAOC is a DerivedField
			type is like InternationalAmount
			return(sum HeaderAddOnChargeResponseRel.TotalAOCCost)
   		
   		DerivedProxyEmailAddressList is a DerivedField 
			type is EmailAddressField with multiple addresses
   			holds pii
    		restricted
			include BuildProxyEmailAddressList
			return LocalProxyEmailAddressList
			
		NumberOfResponses is a ComputeField
			type is Numeric size 6
			(instance count of OtherSourcingEventResponseRel)
		
		NumberOfResponseLines is a ComputeField
			type is Numeric size 6
			(instance count of SuccessSourcingEventLineResponseRel)
			
		NumberOfAwardedResponseLines is a ComputeField
			type is Numeric size 6
			(instance count of AwardedSourcingEventLineResponseRel)
		
		SuccessRate is a DerivedField
			type is like Percent
			if (NumberOfResponseLines = 0)
				return 0
			else
				return (NumberOfAwardedResponseLines / NumberOfResponseLines)
			
    	DerivedSupplierName is a DerivedField
    		type is Alpha size 60
    		return NotifiedSupplier.Supplier.SupplierName
    		
		DerivedFullAddressDisplay is a DerivedField
			type is Text
			return NotifiedSupplier.SupplierSourceId.Supplier.FullAddressDisplay    	

		SuccessAmountRate is a DerivedField
			type is like Percent
			if (BidTotal = 0)
				return 0
			else
				return (AwardTotal / BidTotal)


		SupplierParticipationEventNoBid	 is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationNoBidResponseBySourceIDRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventNoBid = SupplierParticipationEventNoBid + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventNoBid
		
		SupplierParticipationEventAward	 is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationAwardedResponseBySourceIDRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventAward = SupplierParticipationEventAward + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventAward
					
		SupplierParticipationEventSuccess is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationEventAward / SupplierParticipationEventNoBid)
		
		SupplierParticipationEventLineNoBid is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationNoBidResponseBySourceIDRel)
			
		SupplierParticipationEventLineAwarded is a ComputeField	
			type is Numeric size 6
			(instance count of SupplierParticipationAwardedResponseBySourceIDRel)			
		
		SupplierParticipationEventLineSuccess is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationEventLineAwarded / SupplierParticipationEventLineNoBid)
		
		SupplierParticipationBidTotal is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationNoBidResponseBySourceIDRel.ExtendedPrice)
		
		SupplierParticipationAwardTotal is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationAwardedResponseBySourceIDRel.TotalOfSupplierResponseAwards)
			
		SupplierParticipationAmountBidSuccess is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationAwardTotal / SupplierParticipationBidTotal)			

		SupplierParticipationResponseBySupplierTermsAccepted is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationResponseTermsAcceptedBySupplierRel)
		
		SupplierParticipationResponseBySupplierTermsNotAccepted is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationResponseTermsNotAcceptedBySupplierRel)
		
		SupplierParticipationEventResponseNoBidBySupplier is a ComputeField	
			type is Numeric size 6
			(instance count of SupplierParticipationEventResponseBySupplierNoBidRel)

		SupplierParticipationEventResponseBidBySupplier is a ComputeField	
			type is Numeric size 6			
			(instance count of SupplierParticipationEventResponseBySupplierBidRel)

		SupplierParticipationEventAwardBySupplier	 is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationAwardedResponseBySupplierRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventAwardBySupplier = SupplierParticipationEventAwardBySupplier + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventAwardBySupplier

		SupplierParticipationEventtBidSuccessBySupplier is a DerivedField
			type is Percent size 6.3 
			return (SupplierParticipationEventAwardBySupplier / SupplierParticipationEventResponseBidBySupplier)

		SupplierParticipationEventLineResponseBySupplierNoBid is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationEventLineResponseBySupplierNoBidRel)
		
		SupplierParticipationEventLineResponseBySupplierBid is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationEventLineResponseBySupplierBidRel)		

		SupplierParticipationAwardedResponseLineBySupplier is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationAwardedResponseBySupplierRel)
			
		SupplierParticipationEventLineBidSuccessBySupplier is a DerivedField
			type is Percent size 6.3 
			return (SupplierParticipationAwardedResponseLineBySupplier / SupplierParticipationEventLineResponseBySupplierBid)				
		
		SupplierParticipationTotalEventBidBySupplier is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationEventLineResponseBySupplierBidRel.ExtendedPrice)
		
		SupplierParticipationTotalEventAwardBySupplier is a DerivedField
			type is like InternationalCost
			return (SupplierParticipationAwardedResponseBySupplierRel.TotalOfSupplierResponseAwards)
		
		SupplierParticipationAmountBidSuccessBySupplier is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationAmountBidSuccessBySupplier / SupplierParticipationTotalEventBidBySupplier)
		
		SupplierParticipationEventResponseNoBidByDiversity is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationEventNoBidResponseByDiversityRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventResponseNoBidByDiversity = SupplierParticipationEventResponseNoBidByDiversity + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventResponseNoBidByDiversity			
			
		SupplierParticipationEventAwardedResponseByDiversity is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationEventAwardedResponseByDiversityRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventAwardedResponseByDiversity = SupplierParticipationEventAwardedResponseByDiversity + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventAwardedResponseByDiversity				

		SupplierParticipationEventTotalAwardResponseByDiversity is a DerivedField
			type is Numeric size 6
			initialize LocalNotifiedSupplier
			initialize LocalSourcingEvent
			for each SupplierParticipationEventTotalAwardResponseByDiversityRel
				if (each.NotifiedSupplier	!= LocalNotifiedSupplier
				and each.SourcingEvent 		!= LocalSourcingEvent)
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
					SupplierParticipationEventTotalAwardResponseByDiversity = SupplierParticipationEventTotalAwardResponseByDiversity + 1
				else
					LocalNotifiedSupplier	= each.NotifiedSupplier
  					LocalSourcingEvent 		= each.SourcingEvent
			return SupplierParticipationEventTotalAwardResponseByDiversity	

		SupplierParticipationTotalEventAwardRateByDiversity is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationEventTotalAwardResponseByDiversity / SupplierParticipationEventResponseNoBidByDiversity)
		
		SupplierParticipationEventLineNoBidResponseByDiversity is a ComputeField
			type is Numeric size 6
			(instance count of SupplierParticipationEventNoBidResponseByDiversityRel)

		SupplierParticipationEventLineAwardedResponseByDiversity is a ComputeField
			type is Numeric size 6			
			(instance count of SupplierParticipationEventAwardedResponseByDiversityRel)
		
		SupplierParticipationEventLineTotalAwardResponseByDiversity is a ComputeField
			type is Numeric size 6			
			(instance count of SupplierParticipationEventTotalAwardResponseByDiversityRel)

		SupplierParticipationLineTotalEventAwardRateByDiversity is a DerivedField
			type is Percent size 6.3
			return (SupplierParticipationEventLineTotalAwardResponseByDiversity / SupplierParticipationEventLineNoBidResponseByDiversity)

		SupplierParticipationDiversityAmountBid is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationEventNoBidResponseByDiversityRel.ExtendedPrice)
			
		SupplierParticipationDiversityAwardAmount is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationEventAwardedResponseByDiversityRel.TotalOfSupplierResponseAwards)
		
		SupplierParticipationAwardedTotal is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationEventTotalAwardResponseByDiversityRel.TotalOfSupplierResponseAwards)
			
		SupplierParticipationAmountAwardRate is a DerivedField
			type is like InternationalCost
			return (sum SupplierParticipationAwardedTotal/ SupplierParticipationDiversityAmountBid)
		

		TotalEventLineAwarded is a ComputeField
			type is Numeric 6
			(instance count of NonAwardedAlternateLines)
		
		EventLineBidSuccess is a DerivedField
			type is like Percent
			return (SourcingEvent.TotalLinesBid / TotalEventLineAwarded)
		
		TotalEventsLineBid is a ComputeField
			type is Numeric size 6
			(instance count of AllNoBidSourcingEventLineResponseRel)
		
		TotalEventsLineAwarded is a ComputeField
			type is Numeric size 6	
			(instance count of AllAwardedSourcingEventLineResponseRel)
		
		SupplierResponseHistoryBidTotal is a DerivedField
			type is like InternationalCost
			return (sum AllSourcingEventLineResponseRel.ExtendedPrice)
			
		LineBidSuccess is a ComputeField
			type is Percent size 6.3
			(TotalEventsLineAwarded / TotalEventsLineBid)
			
		TotalEventsBid is a ComputeField
			type is Numeric 6
			(instance count of AllSourcingEventResponseRel)

		DiversityEventsResponses is a ComputeField
			type is Numeric size 6
			(instance count of AllSourcingEventResponseDiversityRel)
		
		DiversityLinesResponded is a ComputeField
			type is Numeric size 6
			(instance count of AllSourcingEventLineResponseDiversityRel)
		
		DiversityLinesAwarded is a ComputeField
			type is Numeric size 6
			(instance count of AllAwardeSourcingEventLineDiversityRel)

		DiversityAmountBid is a DerivedField
			type is like InternationalCost
			return (sum AllSourcingEventLineResponseDiversityRel.ExtendedPrice)		


		AllEventLineResponseTotalBid is a DerivedField	
			type is like InternationalCost
			return (sum SourcingEventLineResponse set.ExtendedPrice)

		AllEventLineResponseTotalAwards is a DerivedField	
			type is like InternationalCost
			return (sum SourcingEventLineResponse set.TotalOfSupplierResponseAwards)
			

		DerivedFromEmail is a DerivedField
			type is Alpha size 100
			if (Company.EmailAddressOption.UseCompanyEmailAddress)
				return Company.EventEmailAddress
			else
				return SourcingEvent.Buyer.EmailAddress
 	Conditions
 		
 		HasEventBidResponseLines
    		restricted
 			when (BidResponseLinesRel exists)
 		
 		HasPoLines
 			restricted
 			when (SourcingEvent.HasPoLines)
 		
 		HasAwardedEventBidResponseLines
 			when (AwardedBidResponseLinesRel exists)	
 		
 		HasEventBidResponseLinesWithDiversity
    		restricted
 			when (BidResponseLinesWithDiversityRel exists)
 		
 		TermsAcceptedBySupplierOrNoBid
 			restricted
 			when (TermsAcceptedBySupplier
 			or    NoBid)
 		
 		VendorHasInvoiceCurrency
 			restricted
 			when (NotifiedSupplier.Supplier.Vendor entered
 			and   NotifiedSupplier.Supplier.Vendor.InvoiceCurrency entered)
 		
 		HasAwardedEventBidResponseLinesWithDiversity
    		restricted
 			when (AwardedBidResponseLinesWithDiversityRel exists)	 		 		
 			
 		HasResponseOrNotAllowDifferentCurrency
 			restricted
 			when (LineResponsesExist
		    or    !SourcingEvent.AllowResponseInOtherCurrency)
 		
 		OKForSealed
    		restricted
 			when (SourcingEvent.Sealed
			and  ((SourcingEvent.CloseDate >= current timestamp)
			or   (SourcingEvent.StepTwoStarted
			and   SourcingEvent.StepTwoCloseDate >= current timestamp
			and   TechnicalProposalAccepted)
			or   (SourcingEvent.BestAndFinalStarted
			and   SourcingEvent.BestAndFinalCloseDate >= current timestamp
			and   BestAndFinalSupplier)))
 		
 		RespondedToAllLines
 			when (LinesRespondedToBySupplier = SourcingEvent.NumberOfNonCancelledSourcingEventLines)
 		
 		RespondedButNotNotified
 			when (!RespondedAndNotifedRel exists)
 			
 		LineResponseComplete
 			restricted
 			when (LinesRespondedToBySupplier >= 1
 			and	  AllRequiredLinesAnswered)
 		
 		IsSupplierContact
    		restricted
 			when (NotifiedSupplier.SupplierGroup    	= actor.agent(SupplierSourceId).SupplierGroup
 			and   NotifiedSupplier.Supplier   		 	= actor.agent(SupplierSourceId).Supplier
 			and   NotifiedSupplier.SupplierSourceId	    = actor.agent(SupplierSourceId).SupplierSourceId)
 		
 		AttachmentsExist
    		restricted
 			when (SourcingEventResponseAttachment set exists)
 		
 		SEQuestionsExist
    		restricted
 			when (!NoBid
 			and	  SourcingEvent.SourcingEventQuestion set exists)
 		
 		SEQuestionsOldExist
    		restricted
 			when  (SEQuestionsExist
 			and	  !SourcingEvent.AllowsConditionalQuestions)
 		
 		SEQuestionsNewExist
    		restricted
 			when (SEQuestionsExist
 			and	  SourcingEvent.AllowsConditionalQuestions)

 		SESupplierQuestionsExist
    		restricted
 			when (!NoBid
 			and	  SourcingEventSupplierQuestionPortalRel exists)
 		
		SourcingEventRequireBidBond
			restricted
			when (SourcingEvent.RequireBidBond
			and   ResponseExists)

 		SESupplierQuestionResponseExists
    		restricted
 			when (SourcingEventQuestionResponse set exists)
 			
		NeedToValidateForSourcingEventQuestion
			restricted
			when (SourcingEvent.AllowsConditionalQuestions
			and   SourcingEventQuestionRel.Question = 0)

 		SEQuestionResponseExists
    		restricted
 			when (SourcingEventQuestionResponse set exists)
 			
 		TermsExists
    		restricted
			when (SourcingEvent.SourcingEventArticle set exists)
 		
 		DisplayTerms
    		restricted
 			when (TermsExists
    		and	  (!SourcingEventResponse set exists
    		or	   (SourcingEventResponse set exists
    		and	    Status.Draft)))
    			
 		CanRequestResponseModification
 			restricted
 			when (Company.CanRequestResponseModification
 			and   Status.Submitted
 			and  !NoBid
 			and  !HasCurrentModificationRequests
 			and  !SourcingEvent.AnyLinePrelimAwarded
 			and  SourcingEvent.AvailableForResponseModificationRequest)
 		
 		OpenSubmittedOrWithdrawn
    		restricted
 			when (SourcingEvent.Status.Open
 			and  (Status.Submitted
 			or    Status.Withdrawn))
 		
 		NotSubmitted
 			when (!Status.Submitted
 			and	  !RequirementsNotSatisfied)
 			
 		NotSubmittedAndResponseExists
 			when (!Status.Submitted
			and    ResponseExists
 			and	  !RequirementsNotSatisfied)

 		AllRequiredLinesAnswered
    		restricted
			when (all RequiredLines.SourcingEventLine = any SourcingEventLineResponse set.SourcingEventLine)
			
 		AllHeaderQuestionsAnswered
 			when (all RequiredQuestions.SourcingEventQuestion = any HeaderQuestions.SourcingEventQuestion)
 		
 		RequirementsNotSatisfiedResponseExists
			when (ResponseExists
			and   RequirementsNotSatisfied)

		QuestionWithRequiredAttachmentNotifiedSupplier
 			when (all SupplierQuestionWithRequiredAttachmentsNotifiedRel.SourcingEventSupplierQuestion = any SupplierQuestionWithRequiredAttachmentEnteredRel.SourcingEventSupplierQuestion)

		QuestionWithRequiredAttachmentPortalSupplier
 			when (all SupplierQuestionWithRequiredAttachmentsPortalRel.SourcingEventSupplierQuestion = any SupplierQuestionWithRequiredAttachmentEnteredRel.SourcingEventSupplierQuestion)
 		
 		AllHeaderConditionalNotifiedQuestionsAnswered
 			when (all RequiredNotifiedSupplierQuestionsRel.SourcingEventSupplierQuestion = any HeaderConditionalQuestions.SourcingEventSupplierQuestion)
 		
 		AllHeaderConditionalQuestionsAnswered
 			when (all RequiredPortalSupplierQuestionsRel.SourcingEventSupplierQuestion = any HeaderConditionalQuestions.SourcingEventSupplierQuestion)
 		
 		AllHeaderConditionalQuestionsAnsweredResponseExists
 			when (all RequiredPortalSupplierQuestionsRel.SourcingEventSupplierQuestion = any HeaderConditionalQuestions.SourcingEventSupplierQuestion
			and   RequiredPortalSupplierQuestionsRel exists
			and   ResponseExists)
 		
 		SourcingEventNotifiedSupplierQuestionsExists
			when (SourcingEventSupplierQuestionRel exists)
		
 		SourcingEventPortalSupplierQuestionsExists
			when (SourcingEventSupplierQuestionPortalRel exists)
		
		NotAllRequiredConditionalQuestionsAnsweredResponseExists
			when (!AllHeaderConditionalQuestionsAnswered
			and   RequiredPortalSupplierQuestionsRel exists
			and   ResponseExists)

		RequiredQuestionsNotAnsweredResponseExists
			when (OnlyAdHocQuestionsRequiredNotAnsweredResponseExists
			or    OnlyTheAdHocQuestionsAreRequiredNotAnsweredResponseExists
			or    RequirementsNotSatisfiedResponseExists)

		OnlyAdHocQuestionsRequiredNotAnsweredResponseExists
			when (OnlyAdHocQuestionsExists
			and   PortalAdHocRequiredQuestionNoAnswerRel exists
			and   PortalAdHocRequiredQuestionsRel exists
			and   ResponseExists)

		OnlyTheAdHocQuestionsAreRequiredNotAnsweredResponseExists
			when (RepositoryQuestionsExists
			and   RequiredPortalSupplierQuestionsRel !exists
			and   PortalAdHocRequiredQuestionsRel exists
			and   PortalAdHocRequiredQuestionNoAnswerRel exists
			and   ResponseExists)

		AdHocQuestionsRequiredNotAnsweredResponseExists
			when (OnlyAdHocQuestionsRequiredNotAnsweredResponseExists
			or    OnlyTheAdHocQuestionsAreRequiredNotAnsweredResponseExists)
			
		OnlyAdHocQuestionsRequiredAnsweredResponseExists
			when (OnlyAdHocQuestionsExists
			and   PortalAdHocRequiredQuestionNoAnswerRel !exists
			and   SEQuestionsExist
			and   ResponseExists)

		AdHocQuestionsRequiredAnsweredNotRepositoryResponseExists
			when (SourcingEvent.AllowsConditionalQuestions
			and  (OnlyAdHocQuestionsRequiredAnsweredResponseExists
			or    OnlyTheAdHocQuestionsRequiredAnsweredResponseExists))

		OnlyTheAdHocQuestionsRequiredAnsweredResponseExists
			when (PortalAdHocRequiredQuestionsRel exists
			and   PortalAdHocRequiredQuestionNoAnswerRel !exists
			and   RequiredPortalSupplierQuestionsRel !exists
			and   SEQuestionsExist
			and   ResponseExists)

		OnlyAdHocQuestionsExists
			when (RepositorySupplierQuestionsRel !exists)

		RepositoryQuestionsExists
			when (RepositorySupplierQuestionsRel exists)

 		RequiredSupplierQuestionsExists
			when (RequiredNotifiedSupplierQuestionsRel exists
			or    RequiredPortalSupplierQuestionsRel exists)
		
 		AdHocRequiredQuestionsAnsweredExists
			when (SupplierQuestionRequiredNoAnswerRel !exists)
		
 		RequiredQuestionsExists
			when (RequiredQuestions exists)
		
 		NonRequiredConditionalQuestionsOnlyExists
			when (NonRequiredQuestions exists
			and   RequiredQuestions !exists
			and   SourcingEvent.AllowsConditionalQuestions
			and   RequiredPortalSupplierQuestionsRel !exists
			and  !OnlyAdHocQuestionsExists)
		
 		AllLineQuestionsAnswered
			when (all LineResponseRel.AllLineQuestionsAnswered)
		
		HeaderQuestionAnswersExist
			restricted
			when (HeaderQuestions exists)
		
		LineQuestionAnswersExist
			restricted
			when (LineQuestions exists)

 		RequirementsNotSatisfied
 			when ((!SourcingEventLineResponse set exists
 			and   !TechnicalProposalOnly)
			or   (SourcingEvent.RequireAllLines
			and	 !RespondedToAllLines
			and  !TechnicalProposalOnly)
			or   ((!AllRequiredLinesAnswered
			and  !TechnicalProposalOnly)
			or  (!SourcingEvent.AllowsConditionalQuestions
			and  !AllHeaderQuestionsAnswered	
			and  !NoBid)
			or   (SourcingEvent.AllowsConditionalQuestions
			and  !AllHeaderConditionalQuestionsAnswered	
			and  !NoBid)
			or   (SourcingEvent.AllowsConditionalQuestions
			and  (OnlyAdHocQuestionsRequiredNotAnsweredResponseExists	
			or    OnlyTheAdHocQuestionsAreRequiredNotAnsweredResponseExists)
			and   TechnicalProposalOnly)
			or 	 (!AllLineQuestionsAnswered
			and   !TechnicalProposalOnly)))

		SomeLineRequired
    		restricted
			when ((!SourcingEventLineResponse set exists
 			and   !TechnicalProposalOnly)
			or   (SourcingEvent.RequireAllLines
			and	 !RespondedToAllLines
			and  !TechnicalProposalOnly)
			or   ((!AllRequiredLinesAnswered
			and  !TechnicalProposalOnly)))
		
		RequiredQuestionHeaderCondition 
    		restricted
			when (!NoBid
			and	!AllHeaderQuestionsAnswered)
		
		RequiredQuestionLineCondition
    		restricted
			when (!TechnicalProposalOnly
			and !AllLineQuestionsAnswered)
		
		WarningHeaderCondition 
    		restricted
			when (!NoBid
			and	WarningResponseValid)
		
		WarningHeaderConditionResponseExists 
    		restricted
			when (!NoBid
			and	  WarningResponseValid
			and   ResponseExists)
		
		NoResponseLineCondition
    		restricted
			when (!Status.Submitted
			and	!AllNonRequiredLinesRespondedTo
			and !TechnicalProposalOnly)
		
		NoResponseQuestionHeaderCondition
    		restricted
			when (!Status.Submitted
			and !NoBid
			and	!AllNonRequiredHeaderQuestionsRespondedTo)
		
		NoResponseQuestionLineCondition
    		restricted
			when (!Status.Submitted
			and !NoBid
			and	!AllNonRequiredLineQuestionsRespondedTo
			and !TechnicalProposalOnly)
		
		NoResponseAOCCondition
    		restricted
			when (!Status.Submitted
			and !NoBid
			and AllRequiredAddOnChargesNotEntered
			and !TechnicalProposalOnly)
		
		NoResponseBidBondCondition
    		restricted
			when (!Status.Submitted
			and !NoBid
			and SourcingEvent.RequireBidBond
			and BidBondId !entered
			and PaperBidBond !entered)
		
		AllNonRequiredLinesRespondedTo
    		restricted
			when (all NonRequiredLines.SourcingEventLine = any SourcingEventLineResponse set.SourcingEventLine)
			
 		AllNonRequiredHeaderQuestionsRespondedTo
    		restricted
 			when (all NonRequiredQuestions.SourcingEventQuestion = any SourcingEventQuestionResponse set.SourcingEventQuestion)
 		
 		AllNonRequiredLineQuestionsRespondedTo
    		restricted
			when (all LineResponseRel.AllNonRequiredLineQuestionsRespondedTo)

 		AllRequiredAddOnChargesNotEntered
    		restricted
 			when (SourcingEventLineReqAOCNotEnteredRel exists)
 		
 		CurrencyCodeEntered
 			restricted
 			when (CurrencyCode entered)
 		
 		WarningResponseValid
    		restricted
 			when (!Status.Submitted
			and	  ((!AllNonRequiredLinesRespondedTo
			and    !TechnicalProposalOnly)
			or    (!NoBid
			and	   !AllNonRequiredHeaderQuestionsRespondedTo) 
			or 	  (!AllNonRequiredLineQuestionsRespondedTo
			and    !TechnicalProposalOnly)))
		
		AwardAllPO
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.OutputType.PO)
		
		AwardAllCM
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.ContractOutput)

		AwardAllNonServiceContracts
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.NonServiceContracts)
			
		AwardAllNonStandingContracts
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.NonStandingContracts)

		AwardAllNonStandingOrServiceContracts
    		restricted
			when (AwardAllNonServiceContracts
			and   AwardAllNonStandingContracts)
		
		AwardAllNoOutput
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.OutputType.NoOutput)
		
		DifferentResponseCurrency
			restricted
			when (SourcingEvent.CurrencyCode != EnteredCurrencyCode)
		LineStatus
    		restricted
			when (all LineOutputType.Status.Open)
		QuantityStatus
    		restricted
			when (any BidResponseLinesRel.AwardQuantity = 0)
		CMAwardStatus
    		restricted
			when (any BidResponseLinesRel.AwardForContract = false)
		OutputLineType
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.OutputType = all LineOutputType.OutputType)
		CMOutputFlag
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.ContractOutput = all LineOutputType.ContractOutput)
		FirstPOOutput
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.OutputType.PO)
		FirstCMOutput
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.ContractOutput)
		FirstNoOutput
    		restricted
			when (first SourcingEventLineResponse set.SourcingEventLine.OutputType.NoOutput)
		NoBidCheck
    		restricted
			when (!NonNoBidResponses exists)
		DefaultsMatch
    		restricted
			when (first ResponseLinesRel.ContractType 				= all ResponseLinesRel.ContractType
			and   first ResponseLinesRel.ContractSubtype 			= all ResponseLinesRel.ContractSubtype
			and   first ResponseLinesRel.ContractClassification 	= all ResponseLinesRel.ContractClassification
			and   first ResponseLinesRel.ContractSubclassification 	= all ResponseLinesRel.ContractSubclassification
			and   first ResponseLinesRel.EffectiveDate 				= all ResponseLinesRel.EffectiveDate
			and   first ResponseLinesRel.ExpirationDate 			= all ResponseLinesRel.ExpirationDate
			and   first ResponseLinesRel.ScheduleFrequency 			= all ResponseLinesRel.ScheduleFrequency
			and   first ResponseLinesRel.MaxReleaseNumber       	= all ResponseLinesRel.MaxReleaseNumber
			and   first ResponseLinesRel.Participant.Company        = all ResponseLinesRel.Participant.Company
			and   first ResponseLinesRel.Participant.Location       = all ResponseLinesRel.Participant.Location)
		ModifyOrWithdrawResponseValid 
			restricted
			when (CanUpdateResponse)
		ModifyResponseValid
    		restricted
			when((SourcingEvent.CanRespondModifyOrWithdraw
			or    HasCurrentModificationRequests)
			and  (CanModifyOrWithdrawBestAndFinal
			or    HasCurrentModificationRequests)
			and  (CanModifyOrWithdrawTwoStep
			or    HasCurrentModificationRequests)
			and   CanUpdateResponse)
		WithdrawResponseValid
			restricted
			when (SourcingEvent.CanRespondModifyOrWithdraw
			and   CanModifyOrWithdrawBestAndFinal
			and   CanModifyOrWithdrawTwoStep
			and   CanUpdateResponse)			
		CanModifyOrWithdrawBestAndFinal
    		restricted
			when ((BestAndFinalStarted
			and   BestAndFinalSupplier)
			or   !SourcingEvent.BestAndFinalOffer
			or   !BestAndFinalStarted)
		CanModifyOrWithdrawTwoStep
    		restricted
			when ((StepTwoStarted
			and   TechnicalProposalAccepted)
			or   !StepTwoStarted
			or   !SourcingEvent.TwoStepBiddingUsed)
		HasCurrentModificationRequests 
			restricted
			when (CurrentModificationRequestsForASupplierRel exists)		
		HasCanceledModificationRequests
			restricted
			when (CanceledModificationRequestsForASupplierRel exists)
		HasModificationRequests 
			restricted
			when (ModificationRequestsForASupplierRel exists)
		ActorHasCurrentModificationRequests  
			restricted
			when (CurrentResponseModificationRequestsForThisActorRel exists)
		ActorHasCurrentSupplierMessageModificationRequests
			restricted
			when (CurrentModificationRequestsForThisActorRel exists)
		ActorHasModificationRequests 
			restricted
			when (ModificationRequestsForThisActorRel exists)
		AwardAllValid
    		restricted
			when (SourcingEvent.Status.Open
			and   !SourcingEvent.AnyLinePrelimAwardedForAnyQuantity
			and   OutputLineType
			and   CMOutputFlag
			and   !NoBidCheck
			and   DefaultsMatch
			and (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   BestAndFinalSupplier)))
		CMAwardAllValid
    		restricted
			when (SourcingEvent.Status.Open
			and   !SourcingEvent.AnyLinePrelimAwardedForAnyQuantity
			and   CMOutputFlag
			and   FirstCMOutput
			and   !NoBidCheck
			and (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   BestAndFinalSupplier)))
		POAwardAllValid
    		restricted
			when (SourcingEvent.Status.Open
			and   !SourcingEvent.AnyLinePrelimAwardedForAnyQuantity
			and   OutputLineType
			and   FirstPOOutput
			and   !NoBidCheck
			and (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   BestAndFinalSupplier)))
		NoOutputAwardAllValid
    		restricted
			when (SourcingEvent.Status.Open
			and   !SourcingEvent.AnyLinePrelimAwardedForAnyQuantity
			and   OutputLineType
			and   FirstNoOutput
			and   !NoBidCheck
			and (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   BestAndFinalSupplier)))
		NonAwardValid
    		restricted
			when ((NonAwardedLines exists
			or     NonAwardedAlternateLines exists
			or     SourcingEvent.TechnicalProposalsOnly)
			and	    SourcingEvent.Status.Open
			and  (!TechnicalProposalAccepted
			or   ( TechnicalProposalAccepted  
			and    SourcingEvent.StepTwoStarted))
			and  (!BestAndFinalSupplier
			or   ( BestAndFinalSupplier
			and    SourcingEvent.BestAndFinalStarted)))
		DeleteAwardValid
    		restricted
			when (SourcingEvent.Status.Open
			and   LineStatus
			and   !NoBid
			and   ((FirstPOOutput
			and   !QuantityStatus)
			or    (FirstCMOutput
			and   !CMAwardStatus)))
		FinalAwardAvailable
    		restricted
			when (FinalAwardLinesBySupplier exists)
		CreateOutputAvailable
    		restricted
			when (CreateOutputLinesBySupplier exists)
		SupplierAwardedLines
    		restricted
			when (Status.Submitted
			and   ResponseLineAwarded exists)
		SupplierAltAwardedLines
    		restricted
			when (Status.Submitted
			and   AltResponseLineAwarded exists)
		EitherAwardedLines
    		restricted
			when (SupplierAwardedLines
			or    SupplierAltAwardedLines)
		LineResponsesExist
    		restricted
			when (SourcingEventLineResponse set exists)
		ReadyToSubmit
    		restricted
			when (LineResponsesExist
			and   CanSubmitResponse
			or   (SourcingEvent.TwoStepBidding = 1
			and   !TechnicalProposalAccepted))
		ReadyToSubmitNotSubmitted
			restricted
			when (ReadyToSubmit
			and   Status.Draft)   
		EventFinalized
    		restricted
			when (SourcingEvent.FinalizedDate entered)				
		DiversityAward
    		restricted
			when (ResponseLineAwarded exists
			and	  DiversityAwardRel exists)	
		DisplayBid
    		restricted
			when (!NoBid)
		DisplayBidSupplierPortal
    		restricted
			when (!NoBid
			and   ResponseExists)
		DisplayBidAmount
    		restricted
			when (DisplayBid
			and   CanEnterAmounts
			and  !CanEnterBestAndFinalAmounts)
		DisplayBidAmountNoDate
    		restricted
			when (DisplayBid
			and   CanEnterAmounts
			and  !HasPoLines)
		DisplayBidAmountWithDate
    		restricted
			when (DisplayBid
			and   CanEnterAmounts
			and   HasPoLines)		
		DisplayBidAmountNoDateInWizard
    		restricted
			when (DisplayBid
			and   CanEnterAmounts
			and  !CanEnterBestAndFinalAmounts
			and  !HasPoLines
			and   ResponseExists)
		DisplayBidAmountWithDateInWizard
    		restricted
			when (DisplayBid
			and   CanEnterAmounts
			and  !CanEnterBestAndFinalAmounts
			and   HasPoLines
			and   ResponseExists)
		DisplayBidAmountManual
    		restricted
			when (DisplayBid
			and   CanEnterAmountsManual)
		DisplayBidAmountManualNoDate
    		restricted
			when (DisplayBid
			and   CanEnterAmountsManual
			and  !HasPoLines)
		DisplayBidAmountManualWithDate
    		restricted
			when (DisplayBid
			and   CanEnterAmountsManual
			and   HasPoLines)
		CanEnterAmounts
    		restricted
			when ((SourcingEvent.TwoStepBidding != 1
			or     TechnicalProposalAccepted)
			and  (!SourcingEvent.BestAndFinalOffer
			or   (SourcingEvent.BestAndFinalOffer
			and  !SourcingEvent.BestAndFinalStarted)
			or   (SourcingEvent.BestAndFinalOffer
			and   SourcingEvent.BestAndFinalStarted
			and   BestAndFinalSupplier)))
		CanEnterAmountsManual
    		restricted
			when  (SourcingEvent.TwoStepBidding != 1
			or     TechnicalProposalAccepted)
		CanEnterBestAndFinalAmounts
    		restricted
			when (SourcingEvent.BestAndFinalOffer
			and   BestAndFinalSupplier
			and   current timestamp < SourcingEvent.BestAndFinalCloseDate
			and   ResponseExists)			
		DisplayNoBidReason
    		restricted
			when (NotifiedSupplier.SupplierGroup.RequireNoBidReason)
		DisplayNoBidText
    		restricted
			when (NoBid
			and	  Status.Submitted)
		CanUpdateResponse
    		restricted
			when (ManualResponse
			or	 (!ManualResponse
			and	  IsSupplierContact))
		CanSubmitResponse
			when (ManualResponse
			or	 (!ManualResponse
			and	 (IsSupplierContact
			or    ResponseWithdrawDate entered)))
		BestEventScore
    		restricted
			when (EventWeightingDefined
			and   EventScore >= SourcingEvent.BestEventScoreCalc)
		BuyerScoreIncomplete
    		restricted
			when (ResponseBuyerWeightingUnscoredRel exists)
		ScoreWithNoBidLines
    		restricted
			when (EventWeightingDefined
			and   SubmittedNoBidLineResponses exists)
		CanViewSubmittedText
    		restricted
			when ((NotSubmitted
 			and !TechnicalProposalOnly
 			and MainResponsesOnlyRel exists)
 			or (NotSubmitted
 			and AlternateResponsesOnlyRel exists)
 			or (NotSubmitted
			and ResponseExists
 			and TechnicalProposalOnly))
		SubmittedNoBidLineResponseExists
    		restricted
			when (SubmittedNoBidLineResponses exists)
		SubmittedNoChargeLineResponseExists
    		restricted
			when (SubmittedNoChargeLineResponses exists)
		EventWeightingDefined
    		restricted
			when (SourcingEvent.WeightingEnteredForEvent)		
 		AllowedToNegotiateTerms
    		restricted
 			when (SourcingEvent.AllowTermsToBeNegotiated
 			and   TermsExists)
		ShowAlternateAlert
    		restricted
			when (AlternateResponsesRel exists)
		ResponseExists
    		restricted
			when (SourcingEventResponse exists)
		QuestionResponseAttachmentExists
    		restricted
			when (AllowAttachmentRel exists)
		NegotiatedTermsDocumentEntered
    		restricted
			when (NegotiatedTermsDocument entered)
		UnsubmittedResponseForCurrentContactNotPricingNotBestAndFinal
    		restricted
			when (UnsubmittedResponseForCurrentContact
			and ((!SourcingEvent.BestAndFinalStarted
			and  !SourcingEvent.StepTwoStarted)
			or   (SourcingEvent.StepTwoStarted
			and   SourcingEvent.BestAndFinalOffer
			and  !SourcingEvent.BestAndFinalStarted)))
		UnsubmittedResponseForCurrentContact
    		restricted
			when ((SourcingEvent.CanRespondFormal
			or    SourcingEvent.CanRespondInformal
			or    HasCurrentModificationRequests)
			and	  Status.Draft
			and   IsSupplierContact)
		UnsubmittedPricingResponseForCurrentContact
    		restricted
			when ((SourcingEvent.CanRespondTwoStep
			or     HasCurrentModificationRequests)
			and    Status.Draft
			and    TechnicalProposalAccepted
			and    IsSupplierContact)
		UnsubmittedBestAndFinalResponseForCurrentContact
    		restricted
			when ((SourcingEvent.CanRespondBestAndFinal
			or     HasCurrentModificationRequests)
			and    Status.Draft
			and    BestAndFinalSupplier
			and    IsSupplierContact)	
		ResponseWithReqWithPOCode
    		restricted
			when (SELRReqsContainPOCode exists)
		BuyerActorContextExists
    		restricted
    		when (ActorContextBuyerRel exists)
    	CategoryActorContextExists
    		restricted
    		when (ActorContextCategoryRel exists)
    	SubCategoryActorContextExists
    		restricted
			when (ActorContextSubCategoryRel exists)
		TwoStepBiddingActionNeeded
    		restricted
			when (SourcingEvent.TwoStepBiddingUsed
			and   !TechnicalProposalAccepted
			and   !SourcingEvent.StepTwoStarted
			and   !NoBid)
		CanUnacceptTechnicalProposal
    		restricted
			when (TechnicalProposalAccepted
			and   !SourcingEvent.StepTwoStarted)
		BidBondNeeded
    		restricted
			when (SourcingEvent.RequireBidBond
			and   !BidBondValidated)
		CanEnterPaperBidBond
    		restricted
			when (BidBondNeeded
			and  !PaperBidBondEntered)
		BidBondEntered
    		restricted
			when (BidBondId entered)
		BidBondVerified
    		restricted
			when (BidBondEntered
			and   BidBondValidated)
		TechnicalProposalOnly
    		restricted
			when (SourcingEvent.TwoStepBidding.Separate
			and   !TechnicalProposalAccepted)
		TwoStepBiddingStepTwoOrNoTwoStep
    		restricted
			when ((SourcingEvent.TwoStepBiddingUsed
			and    TechnicalProposalAccepted)
			or    (SourcingEvent.TwoStepBidding = 0))
		AcceptedTechnicalProposalsExistOnEvent
    		restricted
			when (AcceptedTechnicalProposalsRel exists)
		BestAndFinalSuppliersExistOnEvent
    		restricted
			when (BestAndFinalSupplierRel exists)
		PricingProcessNotStarted
    		restricted
			when (SourcingEvent.NeedToStartPricingProcess)
		HeaderAOCsAndLineResponsesExist
			restricted
			when (HeaderAddOnChargeRel exists
			and   HasEventBidResponseLines)
		HeaderResponseAOCsExist
			restricted
			when (HeaderAddOnChargeResponseRel exists)
		BestAndFinalProcessNotStarted
    		restricted
			when (SourcingEvent.CanSelectBestAndFinal)
		CanSelectForBestAndFinal
    		restricted
			when (SourcingEvent.CanSelectBestAndFinal
			and  !BestAndFinalSupplier
			and  !NoBid)
		CanUnselectForBestAndFinal
    		restricted
			when (BestAndFinalSupplier
			and   !SourcingEvent.BestAndFinalStarted)
		BestAndFinalSupplierCanUpdate
    		restricted
			when (BestAndFinalSupplier
			and   SourcingEvent.BestAndFinalStarted
			and   current timestamp < SourcingEvent.BestAndFinalCloseDate)
		StepTwoSupplierCanUpdate
    		restricted
			when (TechnicalProposalAccepted
			and   SourcingEvent.StepTwoStarted
			and   SourcingEvent.TwoStepBidding.Separate
			and   current timestamp < SourcingEvent.StepTwoCloseDate)
		BestAndFinalSupplierShouldUpdate
    		restricted
			when (BestAndFinalSupplier
			and   SourcingEvent.BestAndFinalStarted
			and   current timestamp < SourcingEvent.BestAndFinalCloseDate
			and  !Status.Submitted)
		StepTwoSupplierShouldUpdate
    		restricted
			when (TechnicalProposalAccepted
			and   SourcingEvent.StepTwoStarted
			and   SourcingEvent.TwoStepBidding.Separate
			and   current timestamp < SourcingEvent.StepTwoCloseDate
			and  !Status.Submitted)
		LineQuestionsExists
    		restricted
			when (LineQuestions exists)
		LineSupplierQuestionsExists
    		restricted
			when (LineSupplierQuestions exists)
		ConsiderForScoring
    		restricted
			when ((SourcingEvent.NotBestAndFinalNotTwoStep)
			or   (SourcingEvent.BestAndFinalOffer
			and  !BestAndFinalStarted)
			or   (SourcingEvent.TwoStepBiddingUsed
			and  !StepTwoStarted)
			or   (BestAndFinalStarted
			and   BestAndFinalSupplier)
			or   (StepTwoStarted
			and   TechnicalProposalAccepted))
		SupplierHistorical
    		restricted
			when ((SourcingEvent.ClosedOrCancelledOrSuspended)
			or   ((Status.Draft
			or     Status.Withdrawn)
			and  ((current timestamp > SourcingEvent.CloseDate
			and    SourcingEvent.CloseDate entered
			and    !BestAndFinalSupplier
			and    !TechnicalProposalAccepted)
			or    (BestAndFinalSupplier
			and    current timestamp > SourcingEvent.BestAndFinalCloseDate)
			or    (TechnicalProposalAccepted
			and   !SourcingEvent.BestAndFinalOffer
			and    current timestamp > SourcingEvent.StepTwoCloseDate)
			or    (SourcingEvent.BestAndFinalStarted
			and    !BestAndFinalSupplier)
			or    (SourcingEvent.StepTwoStarted
			and    !TechnicalProposalAccepted))))
		BestAndFinalOpen
    		restricted
    		when  ((!SourcingEvent.BestAndFinalOffer)
    		or     (SourcingEvent.BestAndFinalOffer
    		and     SourcingEvent.BestAndFinalStarted
    		and     current timestamp >= SourcingEvent.BestAndFinalCloseDate)
    		or     (SourcingEvent.BestAndFinalOffer
    		and    !SourcingEvent.BestAndFinalStarted)
    		or     (SourcingEvent.BestAndFinalOffer
    		and     SourcingEvent.BestAndFinalStarted
    		and     current timestamp < SourcingEvent.BestAndFinalCloseDate
    		and    !BestAndFinalSupplier))
    	TwoStepBiddingOpen
    		restricted
    		when  ((SourcingEvent.TwoStepBidding = 0)
    		or     (SourcingEvent.TwoStepBiddingUsed
    		and     SourcingEvent.StepTwoStarted
    		and     current timestamp >= SourcingEvent.StepTwoCloseDate)
    		or     (SourcingEvent.TwoStepBiddingUsed
    		and    !SourcingEvent.StepTwoStarted)
    		or     (SourcingEvent.StepTwoStarted
    		and     current timestamp < SourcingEvent.StepTwoCloseDate
    		and    !TechnicalProposalAccepted))
    		
    	PaperBidBondEntered
    		restricted
    		when   (PaperBidBond entered)
    	CanAttachPaperBidBond
    		restricted
    		when   (!BidBondId entered)
    	PaperBidBondEnteredBySupplier
    		restricted
    		when   (PaperBidBondEntered
    		and    !BidBondValidated)	
    	CanModifyOrReinstate
    		restricted
    		when (ModifyResponseValid
    		or    WithdrawResponseValid
			or    Status.Withdrawn)
			
		HeaderSourcingEventResponse
    		restricted
			when (FirstSourcingEventResponseRel not exist)
		
		TermsNotAcceptedBySupplier
    		restricted
			when (not TermsAcceptedBySupplier)
		
		HasDiversity	
			when (NotifiedSupplier.Supplier.DiversityRel exist)
			
		POCommitments
    		restricted
			when (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
		ResponseAttachmentExists
			when (SourcingEventResponseAttachmentRel exists)			
		AddOnChargeAlreadyExists
			restricted
			when (PurchaseOrderHeaderAOCRel exists)
		OpenDateEntered
			restricted
			when (SourcingEvent.OpenDate entered)
		HasTermAndConditionWithAttachment 
			restricted 
			when (SourcingEventTermAndConditionAttachmentRel exists)
		CloseDateEntered
			restricted
			when (CloseDate entered
			or    StepTwoCloseDate entered
			or    BestAndFinalCloseDate entered)
		NegotiationCommentAndAttachmentNotEntered 
			restricted 
			when (NegotiateTermsBox !entered
    		and   NegotiatedTermsDocument !entered)
		
 	Relations
		
		AwardedBidResponseLinesRel is a SourcingEventLineResponse set
			Instance Selection
				where (!related.NoBid
				and related.IsAwarded)
		
		BidResponseLinesWithDiversityRel is a SourcingEventLineResponse set
			Instance Selection
				where (!related.NoBid
				and related.DiversityExist)			
 		
 		SourcingEventLineResponseHeaderAOCRel
			one-to-many relation to SourcingEventLineResponseAOC 
			Field Mapping uses ByEvent
				related.Company                             = Company
				related.SourcingEvent                       = SourcingEvent
				related.SourcingEventLine                   = 0
				related.NotifiedSupplier.SupplierGroup      = NotifiedSupplier.SupplierGroup 
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId 
		
		PurchaseOrderHeaderAOCRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company                             = Company
				related.PurchaseOrder                       = PurchaseOrder  
				related.PurchaseOrderLine                   = 0
 			Instance Selection
 				where (related.AddOnCharge = LocalAddOnCharge)
 		
 		AwardedBidResponseLinesWithDiversityRel is a SourcingEventLineResponse set
			Instance Selection
				where (!related.NoBid
				and related.IsAwarded
				and related.DiversityExist)
				
 		ResponseLinesRel is a SourcingEventLineResponse set
 		 		
 		SourcingEventTermAndConditionAttachmentRel 
			one-to-many relation to SourcingEventTermAndConditionAttachment 
			Field Mapping uses symbolic key 
				related.Company				= Company 
				related.SourcingEvent       = SourcingEvent 
		
		HeaderAddOnChargeRel
 			one-to-many relation to SourcingEventLineAOC
 			Field Mapping uses symbolic key
 				related.Company                = Company
 				related.SourcingEvent          = SourcingEvent
 			Instance Selection
 				where (related.SourcingEventLine      = 0)
 		
 		HeaderAddOnChargeResponseRel
 			one-to-many relation to SourcingEventLineResponseAOC
 			Field Mapping uses ByEvent
 				related.Company                = Company
 				related.SourcingEvent          = SourcingEvent
 				related.SourcingEventLine      = 0
 			Instance Selection
 				where (related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			and    related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			and    related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId)
 		
 		ActiveResponseLines is a SourcingEventLineResponse set
 			Instance Selection
 				where (!related.Status.Withdrawn
 				and	   !related.SourcingEventLine.Status.Cancelled)
 				
		BidResponseLinesRel is a SourcingEventLineResponse set
			Instance Selection
				where (!related.NoBid)
		
		AcceptedTechnicalProposalsRel 
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent	
			Instance Selection
				where (related.TechnicalProposalAccepted)
		
		BestAndFinalSupplierRel 
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent	
			Instance Selection
				where (related.BestAndFinalSupplier)
		
		AllowAttachmentRel is a SourcingEventQuestionResponse set
	       	Instance Selection
        		where (related.Attachment entered) 				
 				
 		CMQuestionAttachments is a SourcingEventQuestionResponse set
 			Instance Selection
 				where (related.Attachment entered
 				and    related.CMAttachment)
 		
 		ResponseLineAwarded is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.IsAwarded)
 		
 		AltResponseLineAwarded is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.AltIsAwarded)
 		
 		NonAwardedLines is a SourcingEventLineResponse set
 			Instance Selection
 				where (!related.IsAwarded
 				and    !related.NonAwardReasonEntered)
 		
		NonAwardedAlternateLines is a SourcingEventLineResponse set
			Instance Selection
				where (!related.AltIsAwarded
				and    !related.NonAwardReasonEntered
				and     related.AlternatesExist)
		
		ItemOnLineResponse is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.ItemNumber entered)
 		
 		PocodeOnRelatedShipTo is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.SourcingEventLine.ShipTo.POCode entered)
 		
 		NonNoBidResponses is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.ResponseAmount.NoCharge
 				or	   related.ResponseAmount.UnitPrice entered)
 				
		RequiredLines is a SourcingEventLine set
            Instance Selection
            	where (related.RequireResponse
            	and    !related.Status.Cancelled)
            	
		RequiredQuestions is a SourcingEventQuestion set
            Instance Selection
            	where (related.ResponseRequired)

		QuestionWithRequiredAttachmentsRel
            one-to-many relation to SourcingEventQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		SupplierQuestionWithRequiredAttachmentsNotifiedRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier					= NotifiedSupplier
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		SupplierQuestionWithRequiredAttachmentsPortalRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.AlwaysRequireResponseAttachment)

		RequiredNotifiedSupplierQuestionsRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier					= NotifiedSupplier
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.ResponseRequired)

		SupplierQuestionRequiredNoAnswerRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier					= NotifiedSupplier
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.RequiredQuestionNoAnswerForSupplier)

		RequiredPortalSupplierQuestionsRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.ResponseRequired)

		PortalAdHocRequiredQuestionNoAnswerRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.RequiredQuestionNoAnswerForSupplier)

		PortalAdHocRequiredQuestionsRel
			one-to-many relation to SourcingEventSupplierQuestion 
			Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.RequiredQuestionAdHoc)

		RepositorySupplierQuestionsRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
            Instance Selection
            	where (related.RepositoryQuestion)

		SourcingEventQuestionRel
            one-to-many relation to SourcingEventQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent

		SourcingEventQuestionRequiredRel
            one-to-many relation to SourcingEventQuestion 
            Field Mapping uses symbolic key
            	related.Company				= Company
            	related.SourcingEvent		= SourcingEvent
			Instance Selection
            	where (related.ResponseRequired)

		SourcingEventSupplierQuestionRel 
			one-to-many relation to SourcingEventSupplierQuestion 
			Field Mapping uses symbolic key  
				related.NotifiedSupplier				= NotifiedSupplier
				related.Company							= Company
				related.SourcingEvent					= SourcingEvent

		SourcingEventSupplierQuestionPortalRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent

		ConditionalQuestionsDirectRel 
			one-to-many relation to ConditionalQuestion 
			Field Mapping uses symbolic key 
				related.ProcurementGroup		= Company.SourcingGroup 
				related.Question				= SourcingEventQuestionRel.Question 

		SourcingEventQuestionResponseWithAttachmentRel is a SourcingEventQuestionResponse set
			Instance Selection
				where (related.SourcingEventResponse	= SourcingEventResponse
				and	   related.Attachment entered)

        NonRequiredLines is a SourcingEventLine set
            Instance Selection
            	where (!related.RequireResponse
            	and    !related.Status.Cancelled)
            	
		NonRequiredQuestions is a SourcingEventQuestion set
            Instance Selection
            	where (!related.ResponseRequired)
        
        RespondedAndNotifedRel
			one-to-one relation to SourcingEventNotification
			Field Mapping uses part of key
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    	
    	UpdateWithPo is a SourcingEventLineResponse set
     		Instance Selection
     			where (related.SourcingEventLine.OutputType.PO
     			and   (!related.PurchaseOrder entered
 				and	   !related.PurchaseOrder pending)
     			or 	  (!related.PurchaseOrder exists
     			and	   !related.PurchaseOrder pending
     			and	    related.PurchaseOrder  = PurchaseOrder
     			and    !related.NonAwardReasonEntered))
     	
        PurchaseOrderRel
        	one-to-one relation to PurchaseOrder
        	Field Mapping uses symbolic key
        		related.Company					= Company 
        		related.PurchaseOrder			= LocalPurchaseOrder

        PurchasingCompanyDirectRel
    		one-to-one relation to PurchasingCompany
            Field Mapping uses Set2
          		related.ProcurementGroup	= Company.SourcingGroup
          		related.Company				= Company
        
        LineQuestions 
        	one-to-many relation to SourcingEventLineQuestionResponse
     		Field Mapping uses part of key
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)
        
        LineSupplierQuestions 
        	one-to-many relation to SELSupplierQuestionResponse
     		Field Mapping uses part of key
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)
        
        LineQuestionsThatAreRequiredRel 
        	one-to-many relation to SourcingEventLineQuestion
     		Field Mapping uses symbolic key
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
			Instance Selection
				where (related.ResponseRequired)
        
        LineSupplierQuestionsThatAreRequiredRel 
        	one-to-many relation to SourcingEventLineQuestion
     		Field Mapping uses symbolic key
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
			Instance Selection
				where (related.ResponseRequired)
        
        SELSupplierQuestionsThatAreRequiredRel 
        	one-to-many relation to SELSupplierQuestion
     		Field Mapping uses symbolic key
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
			Instance Selection
				where (related.ResponseRequired
				or     related.AdHocResponseRequired)
        
        LineQuestionsRequiredResponse 
        	one-to-many relation to SourcingEventLineQuestionResponse
     		Field Mapping uses ByQuestion
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
				related.SourcingEventLine							= LocalSourcingEventLine
				related.SourcingEventLineQuestion					= LocalSourcingEventLineQuestion
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)

        EventQuestionsRequiredResponse 
        	one-to-many relation to SourcingEventQuestionResponse
     		Field Mapping uses ByQuestion
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
				related.SourcingEventQuestion						= LocalSourcingEventQuestion
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)


        LineSupplierQuestionsRequiredResponse 
        	one-to-many relation to SELSupplierQuestionResponse
     		Field Mapping uses ByQuestion
     			related.Company            							= Company
     			related.SourcingEvent		      					= SourcingEvent
				related.SourcingEventLine							= LocalSourcingEventLine
				related.SELSupplierQuestion							= LocalSELSupplierQuestion
			Instance Selection
				where (related.NotifiedSupplier.SupplierGroup  		= NotifiedSupplier.SupplierGroup
				and    related.NotifiedSupplier.Supplier           	= NotifiedSupplier.Supplier
				and    related.NotifiedSupplier.SupplierSourceId   	= NotifiedSupplier.SupplierSourceId)

        HeaderQuestions 
     		one-to-many relation to SourcingEventQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId

        HeaderConditionalQuestions 
     		one-to-many relation to SESupplierQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId

        SupplierQuestionWithRequiredAttachmentEnteredRel 
     		one-to-many relation to SESupplierQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
			Instance Selection
				where (related.Attachment entered)

		SESupplierQuestionResponseRel
			one-to-many relation to SESupplierQuestionResponse
			Field Mapping uses ByQuestion
				related.Company										= Company
				related.SourcingEvent								= SourcingEvent
				related.SourcingEventSupplierQuestion				= LocalSourcingEventQuestion
 			Instance Selection
 				where (related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			and    related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			and    related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId)

        SourcingEventResponseAttachmentRel
        	one-to-many relation to SourcingEventResponseAttachment
        	Field Mapping uses part of key
     			related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier          	= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId  	= NotifiedSupplier.SupplierSourceId
    			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
        
        PurchasingCompanyRel
    		one-to-one relation to PurchasingCompany
            Field Mapping uses Set2
          		related.ProcurementGroup	= Company.SourcingGroup
          		related.Company				= LocalCompany

		LineOutputType
			one-to-many relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
		
		FinalAwardLinesBySupplier is a SourcingEventLineResponse set
 			Instance Selection
 				where ((related.NotifiedSupplier.SupplierGroup	  = NotifiedSupplier.SupplierGroup
    			and     related.NotifiedSupplier.Supplier		  = NotifiedSupplier.Supplier
    			and     related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId)
    			and		related.IsAwarded
    			and		related.SourcingEventLine.Status.Open)
		
		CreateOutputLinesBySupplier is a SourcingEventLineResponse set
 			Instance Selection
 				where ((related.NotifiedSupplier.SupplierGroup	  = NotifiedSupplier.SupplierGroup
    			and     related.NotifiedSupplier.Supplier		  = NotifiedSupplier.Supplier
    			and     related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId)
    			and		related.IsAwarded
    			and		related.SourcingEventLine.Status.Awarded
    			and		related.SourcingEventLine.AwardApprovalStatus.Approved
				and		!related.SourcingEventLine.OutputCreated)

		ShowEventAwarded is a SourcingEventLineResponse set
 			Instance Selection
 				where ((related.NotifiedSupplier.SupplierGroup	  = NotifiedSupplier.SupplierGroup
    			and     related.NotifiedSupplier.Supplier		  = NotifiedSupplier.Supplier
    			and     related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId)
    			and		related.IsAwarded
    			and		related.SourcingEventLine.Status.Awarded
    			and		related.SourcingEventLine.AwardApprovalStatus.Approved)

     	DiversityAwardRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses BySupplier
				related.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.Supplier			= NotifiedSupplier.Supplier
			Instance Selection
				where	(related.EffectiveDate		= blank
				or		(related.EffectiveDate  	<= SourcingEvent.FinalizedDate
				and		 related.ExpirationDate	    >= SourcingEvent.FinalizedDate))	
				
		SupplierDiversityResponseRel
			one-to-many relation to SupplierDiversityResponse					
			Field Mapping uses BySupplier
				related.SupplierGroup		= NotifiedSupplier.SupplierGroup
 				related.Supplier			= NotifiedSupplier.Supplier				

		LineResponseRel is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.NotifiedSupplier.SupplierGroup	  = NotifiedSupplier.SupplierGroup
    			and    related.NotifiedSupplier.Supplier		  = NotifiedSupplier.Supplier
    			and    related.NotifiedSupplier.SupplierSourceId  = NotifiedSupplier.SupplierSourceId
				and    related.Company							  = Company
				and    related.SourcingEvent					  = SourcingEvent)
		
		DropShipAddressRel 
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company			= Company
				related.SourcingEvent	= SourcingEvent
 			Instance Selection
 				where (related.OriginCode	= "RQ"
				and	   related.RequisitionHeaderRel.DropshipAddress entered)
		
		SubmittedLineResponses is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.Status.Submitted)
 		
 		SubmittedNoBidLineResponses
 			one-to-many relation using SubmittedLineResponses
 			Instance Selection
 				where (related.ResponseAmount.NoBid)
 						
 		SubmittedNoChargeLineResponses
 			one-to-many relation using SubmittedLineResponses
 			Instance Selection
 				where (related.ResponseAmount.NoCharge)
 						
		SubmittedPoLineResponses
			one-to-many relation using SubmittedLineResponses  
 			Instance Selection
 				where (related.SourcingEventLine.OutputType.PO)
 		
		WeightedQuestionResponseRel is a SourcingEventQuestionResponse set
			Instance Selection
				where (related.SourcingEventQuestion.QuestionWeighting entered)
		
		WeightedSupplierQuestionResponseRel
			one-to-many relation to SESupplierQuestionResponse
			Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup  	= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier           = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId   = NotifiedSupplier.SupplierSourceId
		
 		AlternateResponsesRel
 			one-to-many relation using SubmittedLineResponses
 			Instance Selection
 				where (related.AlternatesExist)

		AlternateResponsesOnlyRel
 			one-to-many relation using SubmittedLineResponses
 			Instance Selection
 				where (related.AlternatesExist
 				and    related.Quantity = 0)
		
		MainResponsesOnlyRel
			one-to-many relation using SubmittedLineResponses
 			Instance Selection
 				where (!related.AlternatesExist)
		
    	ToPo is a SourcingEventLineResponse set
        	Instance Selection
        		where (related.PurchaseOrder entered)
        
        ToCm is a SourcingEventLineResponse set
        	Instance Selection
        		where (related.Contract entered)
        		
        SupplierCommodityCodeRel 
        	one-to-many relation to SupplierCommodityCode
        	Field Mapping uses ByCommodityCode
        		related.SupplierGroup    = NotifiedSupplier.SupplierGroup
        		related.Supplier         = NotifiedSupplier.Supplier
        		related.SupplierSourceId = NotifiedSupplier.SupplierSourceId

 		SELRReqsContainPOCode is a SourcingEventLineResponse set
 			Instance Selection
 				where (related.POCodeRelExists)
 		
		SupplierPlanHolderExistRel
			one-to-one relation to SourcingEventPlanHolder
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent

		OtherResponseBuyerWeightingRel
			one-to-many relation to SourcingEventResponseBuyerWeighting
			Field Mapping uses ByEvent
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent
			Instance Selection
				where (related.NotifiedSupplier.Supplier  != NotifiedSupplier
				and    related.Employee                   != SourcingEvent.Buyer)
		
		ResponseBuyerWeightingRel 
			one-to-many relation to SourcingEventResponseBuyerWeighting
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent

		ResponseBuyerWeightingUnscoredRel
		 	one-to-many relation to SourcingEventResponseBuyerWeighting
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent
			Instance Selection
				where (related.BuyerScore = 0
				and    related.ScoreOfZero = false)
				
		ActorContextBuyerRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Buyer")	
				
		ActorContextCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Category")	
				
		ActorContextSubCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "SubCategory")	

		ActivePoLineResponses
			one-to-many relation using ActiveResponseLines  
 			Instance Selection
				where (related.SourcingEventLine.OutputType.PO)
				
		SourcingEventLineReqAOCNotEnteredRel is a SourcingEventLineResponseAOC set
			Instance Selection
				where (related.RequiredAOCNotEntered)
				
		NonAwardResponseLinesRel is a SourcingEventLineResponse set
			Instance Selection
				where (related.AwardReason entered)
		
		SourcingCompanyExtensionRel 
			one-to-one relation to SourcingCompanyExtension
			Field Mapping uses symbolic key
				related.Company = Company
		
		CMAttachments is a SourcingEventResponseAttachment set
			Instance Selection
				where (related.CMAttachment)
				
		CurrentResponseModificationRequestsForThisActorRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplierSearch
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
 				related.NotifiedSupplier.Supplier           = actor.agent(SupplierSourceId).Supplier
			Instance Selection
				where (ActorHasCurrentSupplierMessageModificationRequests
				and    related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId)

		CurrentResponseModificationRequestsForASupplierRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplierSearch
    			related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
			Instance Selection
				where (HasCurrentModificationRequests
				and    related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId)

		CurrentModificationRequestsForASupplierRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.Supplier			= NotifiedSupplier.Supplier
    			related.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.ModificationRequested
				and    related.ModifyByDate > current timestamp
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent)    							

		OldModificationRequestsForASupplierRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.Supplier			= NotifiedSupplier.Supplier
    			related.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.ModificationRequested
				and    related.ModifyByDate < current timestamp
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent) 

		CanceledModificationRequestsForASupplierRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.Supplier			= NotifiedSupplier.Supplier
    			related.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.FromModificationRequest = 3
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent)  

		CurrentModificationRequestsForThisActorRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
    			related.Supplier			= actor.agent(SupplierSourceId).Supplier
    			related.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
    		Instance Selection
    			where (related.ModificationRequested
    			and    related.ModifyByDate > current timestamp
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent) 

		ModificationRequestsForASupplierRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.Supplier			= NotifiedSupplier.Supplier
    			related.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.ModificationRequestExists
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent) 

		ModificationRequestsForThisActorRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
    			related.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
    			related.Supplier			= actor.agent(SupplierSourceId).Supplier
    			related.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
    		Instance Selection
    			where (related.ModificationRequestExists
				and    related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent)

		SupplierContactProxyRel
    		one-to-many relation to SupplierContactProxy
    		Field Mapping uses part of key
    			related.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.Supplier			= NotifiedSupplier.Supplier
    			related.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.ReceiveEmailNotification)

    	OtherSourcingEventResponseRel 
    		one-to-many relation to SourcingEventResponse
    		Field Mapping uses symbolic key
    			related.NotifiedSupplier = NotifiedSupplier
    		Instance Selection
    			where (related.SourcingEvent.DerivedStatus = "Closed")
    	


    	FirstSourcingEventResponseRel 
    		one-to-many relation to SourcingEventResponse
    		Field Mapping uses symbolic key
    		Instance Selection
    			where	(related.NotifiedSupplier.SupplierGroup	= NotifiedSupplier.SupplierGroup
    			and		related.NotifiedSupplier.Supplier 		= NotifiedSupplier.Supplier
    			and 	related.SourcingEvent.DerivedStatus 	= "Closed"
    			and		related.UniqueID  < UniqueID)
    	
    	SuccessSourcingEventLineResponseRel
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.SourcingEvent.DerivedStatus = "Closed")

    	AwardedSourcingEventLineResponseRel
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.SourcingEvent.DerivedStatus = "Closed" and related.IsAwarded)


    	BidSuccessEventResponseRel	 
    		one-to-many relation to SourcingEventResponse
    		Field Mapping uses ByEvents
    		Instance Selection
    			where	(related.NotifiedSupplier.SupplierGroup = NotifiedSupplier.SupplierGroup
    			and		related.NotifiedSupplier.Supplier		= NotifiedSupplier.Supplier
    			and 	related.SourcingEvent					= SourcingEvent
    			and		related.SourcingEvent.DerivedStatus		= "Closed"
				and 	((SupplyManagementReportContext.FromDate not entered
				or		related.SourcingEvent.FinalizedDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.SourcingEvent.FinalizedDate	<= SupplyManagementReportContext.ThruDate))
				and		related.HeaderSourcingEventResponse)


    	SupplierParticipationNoBidResponseBySourceIDRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company									= Company
			Instance Selection
				where (related.SourcingEvent					= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				and related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    			and related.SourcingEventResponse.NoBid )

    	SupplierParticipationAwardedResponseBySourceIDRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company									= Company
			Instance Selection
				where (related.SourcingEvent					= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				and related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    			and related.IsAwarded)    	

    	SupplierParticipationResponseTermsAcceptedBySupplierRel	
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.TermsAcceptedBySupplier)

    	SupplierParticipationResponseTermsNotAcceptedBySupplierRel	
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.TermsNotAcceptedBySupplier)

    	SupplierParticipationEventResponseBySupplierNoBidRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.NoBid)

    	SupplierParticipationEventResponseBySupplierBidRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.DisplayBid)
		
    	SupplierParticipationAwardedResponseBySupplierRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company									= Company
			Instance Selection
				where (related.SourcingEvent					= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				and related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				and related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    			and related.IsAwarded)   

    	SupplierParticipationEventLineResponseBySupplierNoBidRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.NoBid)

    	SupplierParticipationEventLineResponseBySupplierBidRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.DisplayBid)
    			
    	SupplierParticipationEventNoBidResponseByDiversityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.DiversityExist
    			and related.NoBid)
    	
    	SupplierParticipationEventAwardedResponseByDiversityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.DiversityAward)   			
 
    	SupplierParticipationEventTotalAwardResponseByDiversityRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses ByNotifiedSupplier
				related.Company											= Company
			Instance Selection
				where (related.SourcingEvent							= SourcingEvent
				and related.NotifiedSupplier.SupplierGroup				= NotifiedSupplier.SupplierGroup
    			and related.NotifiedSupplier.Supplier					= NotifiedSupplier.Supplier
    			and related.IsAwarded)

		SourcingEventResponsesRel	
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
				related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId

    	AllSourcingEventLineResponseRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    			
    	AllNoBidSourcingEventLineResponseRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.SourcingEventResponse.NoBid)
    	
    	AllAwardedSourcingEventLineResponseRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.IsAwarded 
    			or 		related.AwardedAlternateResponsesExist)

		AllSourcingEventResponseRel 
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company			= Company
				related.SourcingEvent	= SourcingEvent	
			Instance Selection
				where (related.NoBid)
    	
		OtherSubmittedResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company			= Company
				related.SourcingEvent	= SourcingEvent	
			Instance Selection
				where (related.Status    = 2
				and    related.UniqueID != UniqueID)			

    	AllSourcingEventResponseDiversityRel
    		one-to-many relation to SourcingEventResponse
    		Field Mapping uses ByEvent
    			related.Company			= Company
				related.SourcingEvent	= SourcingEvent
			Instance Selection
    			where (related.HasDiversity)
    	
    	AllSourcingEventLineResponseDiversityRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.DiversityExist)

    	AllAwardeSourcingEventLineDiversityRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup    = NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier         = NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId = NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where ((related.IsAwarded 
    			or 		related.AwardedAlternateResponsesExist)
    			and 	related.DiversityExist)

		SourcingEventLineResponseRel	
    		one-to-many relation to SourcingEventLineResponse
    		Field Mapping uses BySupplier
    			related.NotifiedSupplier.SupplierGroup		= NotifiedSupplier.SupplierGroup
    			related.NotifiedSupplier.Supplier			= NotifiedSupplier.Supplier
    			related.NotifiedSupplier.SupplierSourceId	= NotifiedSupplier.SupplierSourceId
    		Instance Selection
    			where (related.SourcingEvent	= SourcingEventResponse.SourcingEvent)
    			
    	GeneralLedgerSystemCodeRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"	
		
 	Sets
 		ByEvent
 			indexed
 			Sort Order
 				Company
 				SourcingEvent
				NotifiedSupplier
		
		ByEventAndSupplier
 			Sort Order
 				Company
 				SourcingEvent
 				NotifiedSupplier.Supplier
				NotifiedSupplier.Supplier.SupplierName

        ByEvents
        	Sort Order
        		Company
        		SourcingEvent
        		NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId
        
        BySupplierSearch
        	Sort Order
        		NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
 				Company
 				SourcingEvent
 				NotifiedSupplier.SupplierSourceId
        
        BySupplier
        	indexed
        	Sort Order
 				NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId
 				Company
 				SourcingEvent
 				Status
 			Instance Selection
 				where (Status.Submitted)

        UnsubmittedBySupplier
        	indexed
        	Sort Order
 				NotifiedSupplier.SupplierGroup
 				NotifiedSupplier.Supplier
				NotifiedSupplier.SupplierSourceId
 				Company
 				SourcingEvent
 				Status
 			Instance Selection
 				where (Status.Draft)

	Field Rules
		EnteredCurrencyCode
			
			if (NotifiedSupplier.Supplier.Vendor.InvoiceCurrency entered
			and SourcingEvent.AllowResponseInOtherCurrency)
				force default to NotifiedSupplier.Supplier.Vendor.InvoiceCurrency
			else
			if (!SourcingEvent.AllowResponseInOtherCurrency)
				force default to SourcingEvent.CurrencyCode
			
		CurrencyCode
			if (NotifiedSupplier.Supplier.Vendor.InvoiceCurrency entered
			and SourcingEvent.AllowResponseInOtherCurrency)
				force default to NotifiedSupplier.Supplier.Vendor.InvoiceCurrency
			else
			if (!DifferentResponseCurrency
			or  !SourcingEvent.AllowResponseInOtherCurrency) 
				force default to SourcingEvent.CurrencyCode
		
		NoBid
			if (SourcingEvent.BestAndFinalStarted
			and BestAndFinalSupplier)
				constraint (!NoBid)
					"CannotChangeResponseToNoBidIfSelectedAsABestAndFinalSupplier"
					
			if (SourcingEvent.StepTwoStarted
			and TechnicalProposalAccepted)
				constraint (!NoBid)
					"CannotChangeResponseToNoBidIfTechnicalResponseAccepted"
		
		NoBidReason
			if (NoBid
			and NotifiedSupplier.SupplierGroup.RequireNoBidReason)
				required
					"MustEnterANoBidReason"

			if (!NotifiedSupplier.SupplierGroup.RequireNoBidReason)
				constraint (!NoBidReason entered)
					"CannotEnterNoBidReasonCode"

			if (!NoBid)
				initialize
				constraint (!NoBidReason entered)
					"CanOnlyEnterNoBidReasonWhenResponseIsNoBid"

		NegotiateTermsBox
			if (!RequestToNegotiateTerms)
				initialize

    	NegotiatedTermsDocument
			if (!RequestToNegotiateTerms)
				initialize
	               
	Actions
	
		NotifyPendingResponses is a Set Action
			restricted
			Parameters
    			ParmSourcingGroup                      is a SourcingGroup
    			
    		Instance Selection
    			where (Company.SourcingGroup           = ParmSourcingGroup
    			and    SourcingEvent.Status.Open
    			and    Status                          = 1)
    			
    		Action Rules
    		
    			Instance Rules
    			
	    			if (SourcingCompanyExtensionRel.SendPendingEmail)
		    			if (NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
							if (!BestAndFinalSupplier
							and !TechnicalProposalAccepted
							and !BestAndFinalStarted
							and !StepTwoStarted
							and !SourcingEvent.InformalQuote
							and  DerivedCloseDate > current corporate date)
								send email
									to NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
										"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward." 
							else
							if (!BestAndFinalSupplier
							and !TechnicalProposalAccepted
							and !BestAndFinalStarted
							and !StepTwoStarted
							and  SourcingEvent.InformalQuote) 
								send email
									to NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
							else
							if (BestAndFinalSupplier
							and DerivedCloseDate > current corporate date)
								send email
									to NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
										"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward." 
										"YouHaveBeenSelectedForBestAndFinalOrder.ABestAndFinalAmountMustBeEnteredAndTheResponseMustBeResubmitted."
							else
							if (TechnicalProposalAccepted
							and DerivedCloseDate > current corporate date)
								send email
									to NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
										"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward." 
										"YourTechnicalResponseHasBeenAccepted.APricingAmountMustBeEnteredAndTheResponseSubmitted"

					if (SourcingCompanyExtensionRel.CreatePendingMessage)
						if (!BestAndFinalSupplier
						and !TechnicalProposalAccepted
						and !BestAndFinalStarted
						and !StepTwoStarted
						and !SourcingEvent.InformalQuote
						and  DerivedCloseDate > current corporate date)
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
								invoked.MessageText                     = "The Response Must Be Submitted By <SourcingEvent.DerivedCloseDate> To Be Considered For An Award."
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
								invoked.MessageOwner                    = SourcingEvent.Buyer	
						else
						if (!BestAndFinalSupplier
						and !TechnicalProposalAccepted
						and !BestAndFinalStarted
						and !StepTwoStarted
						and  SourcingEvent.InformalQuote)
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
								invoked.MessageOwner                    = SourcingEvent.Buyer
						else
						if (BestAndFinalSupplier
						and DerivedCloseDate > current corporate date)
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
								invoked.MessageText                     = "You Have Been Selected For Best And Final Order. A Best And Final Amount Must Be Entered And The Response Must Be Resubmitted."
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
						        invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
						        invoked.MessageOwner                    = SourcingEvent.Buyer
						else
						if (TechnicalProposalAccepted
						and DerivedCloseDate > current corporate date)
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
								invoked.MessageText                     = "Your Technical Response Has Been Accepted. A Pricing Amount Must Be Entered And The Response Submitted"
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
							   	invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
							    invoked.MessageOwner                    = SourcingEvent.Buyer
							    	
		UpdateForSealedBids is an Instance Action
			restricted
			
			Parameters
				ParmCloseDate 			  is TimeStamp
				ParmBestAndFinalCloseDate is TimeStamp
				ParmStepTwoCloseDate      is TimeStamp
				ParmBestAndFinalStarted   is Boolean
				ParmStepTwoStarted        is Boolean
				
			Action Rules
				CloseDate 			  = ParmCloseDate
				BestAndFinalCloseDate = ParmBestAndFinalCloseDate
				StepTwoCloseDate      = ParmStepTwoCloseDate
				BestAndFinalStarted   = ParmBestAndFinalStarted
				ParmStepTwoStarted    = ParmStepTwoStarted
		
		CreateBuyerWeighting is an Instance Action
			restricted
			Parameters
				ParmNotifiedSupplier			   	is a NotifiedSupplier
				ParmCompany				   			is like SourcingCompany		
				ParmSourcingEvent		   			is like SourcingEvent
				SourcingEventBuyerWeighting
				
			Action Rules
			
				invoke CreateEventResponseBuyerWeighting SourcingEventWeightingBuyer
					invoked.ParmCompany    				= ParmCompany
					invoked.ParmSourcingEvent 			= ParmSourcingEvent
					invoked.SupplierGroup               = ParmNotifiedSupplier.SupplierGroup
					invoked.Supplier                    = ParmNotifiedSupplier.Supplier
					invoked.SupplierSourceId            = ParmNotifiedSupplier.SupplierSourceId
					invoked.SourcingEventBuyerWeighting	= SourcingEventBuyerWeighting

		PopulateEventScoreTotalBid is a Set Action 
			restricted
			Instance Selection
				where (Status.Submitted)
				
			Action Rules
				Instance Rules
					invoke CalculateEventScore
					invoke CalculateTotalBidAmount
					
		CalculateEventScoreSet is a Set Action 
			restricted
			Parameters 
				ParmCompany	is a SourcingCompany
				ParmEvent   is a SourcingEvent 

			Instance Selection 
				where (ParmCompany = Company
				and    ParmEvent   = SourcingEvent
				and    Status.Submitted)

			Action Rules 

				Instance Rules 
					invoke CalculateEventScore	

		CalculateEventScore is an Instance Action  
			restricted
			Action Rules
			
				EventScore = (PriceScore + DiversityScore + DeliveryScore + TotalQuestionScore + TotalBuyerScore) 

		CalculateTotalBidAmount is an Instance Action  
			restricted
			
			Action Rules
			
				TotalBidAmount 						= (sum ActiveResponseLines.TotalResponse + sum HeaderAddOnChargeResponseRel.TotalAOCCost)
				TotalBidAmountInResponseCurrency 	= (sum ActiveResponseLines.TotalResponseInResponseCurrency + sum HeaderAddOnChargeResponseRel.CurrencyTotalAOCCost)
				InitialTotalBidAmount				= (sum ActiveResponseLines.TotalInitialResponse + sum HeaderAddOnChargeResponseRel.TotalAOCCost)	

		CalculateTotalBidAmountSet is a Set Action 
			restricted 
			Parameters 
				ParmNotifiedSupplier    is a NotifiedSupplier
				ParmCompany				is a SourcingCompany 
				ParmEvent       		is a SourcingEvent 

			Instance Selection 
				where (ParmNotifiedSupplier = NotifiedSupplier
				and    ParmCompany  		= Company
				and    ParmEvent    		= SourcingEvent)

			Action Rules 
				Instance Rules 
					invoke CalculateTotalBidAmount

		
		CancelModificationRequests is a Set Action
			restricted
			Parameters
				ParmSourcingCompany   		is a SourcingCompany
				ParmSourcingEvent 			is a SourcingEvent
				ParmSourcingEventResponse 	is like SourcingEventResponse
				
			Instance Selection
				where (HasCurrentModificationRequests
				and    ParmSourcingCompany = Company
				and    ParmSourcingEvent   = SourcingEvent
				and   (ParmSourcingEventResponse = SourcingEventResponse
				or     ParmSourcingEventResponse !entered))
			
			Action Rules
			
				Instance Rules
					for each CurrentModificationRequestsForASupplierRel 				
						invoke Update each
							invoked.FromModificationRequest = 3		

		CancelModificationRequest is an Instance Action
			valid when (HasCurrentModificationRequests)
			
			Action Rules
					invoke CancelModificationRequests
						invoked.ParmSourcingCompany       = Company
						invoked.ParmSourcingEvent         = SourcingEvent
						invoked.ParmSourcingEventResponse = SourcingEventResponse
		
		ReinstateModificationRequests is a Set Action
			restricted
			Parameters
				ParmSourcingCompany   	is a SourcingCompany
				ParmSourcingEvent 		is a SourcingEvent
				
			Instance Selection
				where (HasCanceledModificationRequests)
			
			Action Rules
			
				Instance Rules
					for each CanceledModificationRequestsForASupplierRel 				
						invoke Update each
							invoked.FromModificationRequest = 1	

		EnterValidatedPaperBidBond is an Instance Action
 			valid when (CanEnterPaperBidBond)
 					
 			Parameters
 				ParmSourcingEvent is a SourcingEvent 
 				ParmPaperBidBond  is an Attachment
 					
 			Parameter Rules
 				ParmSourcingEvent
 					initial value is SourcingEvent
 				
 				ParmPaperBidBond
 					required
						"MustAttachAPaperBidBondToValidateTheBidBond" 	
 					
 			Action Rules
										
 				BidBondValidated  = true
 				PaperBidBond      = ParmPaperBidBond		
	
	StateCycles
    	EventResponseLifeCycle is a StateCycle
    		state field is Status
		
			Draft is a State

				Create is a Create Action
					Action Rules
						constraint (!SourcingEvent.NotificationStatus.Amended)
							"AmendmentInProgress;PleaseTryAgainLater"
						if (!SourcingEvent.InformalQuote)
							constraint (SourcingEvent.CanRespondFormal)
								"CanOnlyRespondBetweenEventOpenDateAndTimeAndCloseDateAndTime"
						else
							if (SourcingEvent.BestAndFinalOffer)
								constraint (!SourcingEvent.BestAndFinalStarted)
									"CannotRespondToEvent;AlreadyInBestAndFinalOfferPhase"
							if (SourcingEvent.TwoStepBiddingUsed)
								constraint (!SourcingEvent.StepTwoStarted)
									"CannotRespondToEvent;AlreadyInBiddingPhaseOfTwoStepProcess"
							constraint (SourcingEvent.CanRespondInformal)
								"EventStatusMustBeOpenToRespond"
 						constraint (NotifiedSupplier.SupplierSourceId.RegistrationComplete)
 							"SupplierRegistrationMustBeCompleteToRespond"
 						constraint (NotifiedSupplier.SupplierGroup = Company.SourcingGroup)
							"SupplierGroupNotAssociatedWithCompanySourcingGroup"
						include ValidateTerms
						if (SourcingEvent.Sealed)
							Sealed		= true
							CloseDate	= SourcingEvent.CloseDate

					Exit Rules
						if (EnteredCurrencyCode !entered)
							EnteredCurrencyCode = SourcingEvent.CurrencyCode

						if (NoBid
						and !TechnicalProposalOnly)
							
							for each SourcingEvent.OpenLines
								invoke Create SourcingEventLineResponse set
									invoked.SourcingEventResponse	= SourcingEventResponse
									invoked.SourcingEventLine		= each.SourcingEventLine
									invoked.ResponseAmount.NoBid	= true
									invoked.NoBidReason				= NoBidReason
						else
							if (!SupplierPlanHolderExistRel exists)
								include CreatePlanHolder

						for each HeaderAddOnChargeRel
							invoke Create SourcingEventLineResponseAOC
								fill in fields from each
								invoked.NotifiedSupplier	= NotifiedSupplier

						if  (SourcingEvent.AllowsConditionalQuestions)
							for each SourcingEventQuestionRel
								invoke Create SourcingEventSupplierQuestion
									fill in fields from each
									invoked.NotifiedSupplier		= NotifiedSupplier
									invoked.SourcingEventQuestion	= each.SourcingEventQuestion

				ManualResponse is a Create Action
					default label is "Create"
					Action Rules
						if (!SourcingEvent.InformalQuote)
							constraint (SourcingEvent.OpenDate < current timestamp
								and SourcingEvent.Status.Open)
								"EventStatusMustBeOpenToRespond"
						else
							if (SourcingEvent.BestAndFinalOffer)
								constraint (!SourcingEvent.BestAndFinalStarted)
									"CannotRespondToEvent;AlreadyInBestAndFinalOfferPhase"
							if (SourcingEvent.TwoStepBiddingUsed)
								constraint (!SourcingEvent.StepTwoStarted)
									"CannotRespondToEvent;AlreadyInBiddingPhaseOfTwoStepProcess"
							constraint (SourcingEvent.Status.Open)
								"EventStatusMustBeOpenToRespond"
						constraint (!SourcingEvent.AnyLinePrelimAwarded)
							"CannotRespond;EventIsInTheProcessOfBeingAwarded"
						constraint (SourcingEvent.ApprovalStatus.Approved)
							"EventMustBeApprovedToRespond"
						constraint (NotifiedSupplier.SupplierSourceId.RegistrationComplete)
							"SupplierRegistrationMustBeCompleteToRespond"
						constraint (NotifiedSupplier.SupplierGroup = Company.SourcingGroup)
							"SupplierGroupNotAssociatedWithCompanySourcingGroup"
						ManualResponse = true
						if (!NoBid
							and TermsExists
							and !RequestToNegotiateTerms)
							TermsAcceptedBySupplier = true

						if (SourcingEvent.Sealed)
							Sealed		= true
							CloseDate	= SourcingEvent.CloseDate

						if (PaperBidBondEntered)
							BidBondValidated = true

 					Exit Rules
 						if (EnteredCurrencyCode !entered)
							EnteredCurrencyCode = SourcingEvent.CurrencyCode
							
 						if (NoBid)
							for each SourcingEvent.OpenLines
								invoke Create SourcingEventLineResponse set
									invoked.SourcingEventResponse	= SourcingEventResponse
									invoked.SourcingEventLine		= each.SourcingEventLine
									invoked.ResponseAmount.NoBid	= true
									invoked.NoBidReason				= NoBidReason
						else
							if (!SupplierPlanHolderExistRel exists)
								include CreatePlanHolder
								
						for each HeaderAddOnChargeRel
							invoke Create SourcingEventLineResponseAOC
								fill in fields from each
								invoked.NotifiedSupplier	= NotifiedSupplier

						if  (SourcingEvent.AllowsConditionalQuestions)
							for each SourcingEventQuestionRel
								invoke Create SourcingEventSupplierQuestion
									fill in fields from each
									invoked.NotifiedSupplier		= NotifiedSupplier
									invoked.SourcingEventQuestion	= each.SourcingEventQuestion

    			Update is an Update Action
    				valid when (SourcingEvent.CanRespond) 
    				Action Rules
    					if (!ManualResponse)
    						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						constraint (!SourcingEvent.AnyLinePrelimAwarded)
 								"CannotRespond;EventIsInTheProcessOfBeingAwarded"
	 						if  (!SourcingEvent.InformalQuote)
	 							if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CannotUpdateResponseAfterEventCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToUpdateResponse"
						    if (SourcingEvent.BestAndFinalStarted)
						    	constraint (BestAndFinalSupplier)
						    		"CannotUpdateResponseIfNotSelectedAsABestAndFinalSupplier"
						    if (SourcingEvent.StepTwoStarted)
						    	constraint (TechnicalProposalAccepted)
						    		"CannotUpdateResponse;TechnicalProposalNotAccepted"
							if (BestAndFinalSupplier)
								constraint (SourcingEvent.BestAndFinalStarted)
									"CannotEnterBestAndFinalResponseUntilProcessIsStartedByBuyer"
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
									"CannotUpdateResponseAfterBestAndFinalCloseDate"
							if (TechnicalProposalAccepted)
								constraint (SourcingEvent.StepTwoStarted)
									"CannotEnterPricingAmountsUntilProcessIsStartedByBuyer"
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"
							constraint (IsSupplierContact
	 						and         NotifiedSupplier.Supplier.Active)
	 							"InactiveSupplierCannotUpdateResponses"
						include ValidateTerms
						if (TermsAcceptedBySupplier)
							initialize NegotiateTermsBox
    						initialize NegotiatedTermsDocument
 						if (NoBid changed)
 							if (NoBid)
	 							invoke Delete SourcingEventLineResponse set
	 							if (!RespondedAndNotifedRel exists)
	 								invoke Delete SupplierPlanHolderExistRel

								if (!TechnicalProposalOnly)
									for each SourcingEvent.SourcingEventLine set
										invoke Create SourcingEventLineResponse set
											invoked.SourcingEventResponse	= SourcingEventResponse
											invoked.SourcingEventLine		= each.SourcingEventLine
											invoked.ResponseAmount.NoBid	= true
											invoked.NoBidReason				= NoBidReason
								for each HeaderQuestions
									invoke Delete each							
							else
								invoke Delete SourcingEventLineResponse set
								if (!SupplierPlanHolderExistRel exists)
									include CreatePlanHolder
						if  (BidBondId entered)
							constraint (!PaperBidBondEntered)
								"CannotEnterBothBidBondIDAndPaperBidBond"
						
							include VerifyBidBondID
								
							
							if (ErrorCode = "101"
							or  ErrorCode = "100")
								constraint (AgencyID entered)
									"AuthorizationOrAccessDenied" 
							
							if (ErrorCode = "201"
							or  ErrorCode = "200"
							or  ErrorCode = "2011")
								constraint (AgencyID entered)
									"BondId<BidBondId>NotValid;BondNotFound,ContractorHasNotSignedBond,OrBondNotExecuted"
							else
							if (ErrorCode = "202")
								constraint (AgencyID entered)
									"EventOnBondDoesNotMatchEventNumber"
							else
							if (ErrorCode = "203")
								constraint (AgencyID entered)
									"SupplierOnBondDoesNotMatchSupplierNumber"
							else
							if (ErrorCode = "300"
							or  ErrorCode = "301"
							or  ErrorCode = "3002"
							or  ErrorCode = "301")
								constraint (AgencyID entered)
									"AgencyInformationNotFound"
							else
							if (ErrorCode = "302")
								constraint (AgencyID entered)
									"SuretyInformationNotLocated"
									
					Exit Rules
					
						if (NoBid changed)
 							if (!NoBid)
 								for each HeaderAddOnChargeRel
									invoke Create SourcingEventLineResponseAOC
										fill in fields from each
										invoked.NotifiedSupplier	= NotifiedSupplier
								
				ManualResponseUpdate is an Update Action
					valid when (CanUpdateResponse)
					default label is "Update"
 					Action Rules
    					if (!ManualResponse)
    						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote)
	 							if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CannotUpdateResponseAfterEventCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToUpdateResponse"
						if (ManualResponse)
							constraint (NotifiedSupplier.Supplier.Active)
	 							"BuyerCannotUpdateResponseForAnInactiveSupplier"
	 					if (SourcingEvent.BestAndFinalStarted)
							constraint (BestAndFinalSupplier)
								"CannotUpdateResponseIfNotSelectedAsABestAndFinalSupplier"
						if (SourcingEvent.StepTwoStarted)
						   	constraint (TechnicalProposalAccepted)
						   		"CannotUpdateResponse;TechnicalProposalNotAccepted"
						if (BestAndFinalSupplier)
							constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
								"CannotUpdateResponseAfterBestAndFinalCloseDate"
							constraint (SourcingEvent.BestAndFinalStarted)
								"CannotEnterBestAndFinalResponseUntilProcessIsStarted"
						if (TechnicalProposalAccepted)
							constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
								"CannotUpdateResponseAfterPricingCloseDateOnTwoStepEvent"
							constraint (SourcingEvent.StepTwoStarted)
								"CannotEnterBidAmountsUntilProcessIsStarted"
						if (NoBid)
							constraint (!NegotiateTermsBox entered)
								"CannotNoBidAndEnterANegotiateTermsComment"
							constraint (!NegotiatedTermsDocument entered)
								"CannotNoBidAndEnterANegotiateTermsAttachment"
						if (RequestToNegotiateTerms)
							TermsAcceptedBySupplier = false 
						if (!RequestToNegotiateTerms)
							TermsAcceptedBySupplier = true 
						include ValidateTerms

 						if (NoBid changed)
 							if (NoBid)
	 							invoke Delete SourcingEventLineResponse set
	 							if (!RespondedAndNotifedRel exists)
	 								invoke Delete SupplierPlanHolderExistRel
 						
								if (!TechnicalProposalOnly)
									for each SourcingEvent.SourcingEventLine set
										invoke Create SourcingEventLineResponse set
											invoked.SourcingEventResponse	= SourcingEventResponse
											invoked.SourcingEventLine		= each.SourcingEventLine
											invoked.ResponseAmount.NoBid	= true
											invoked.NoBidReason				= NoBidReason
								for each HeaderQuestions
									invoke Delete each	
							else
								invoke Delete SourcingEventLineResponse set
								if (!SupplierPlanHolderExistRel exists)
									include CreatePlanHolder
						
						if (PaperBidBondEntered)
							BidBondValidated = true
							
					Exit Rules
					
						if (NoBid changed)
 							if (!NoBid)
 								for each HeaderAddOnChargeRel
									invoke Create SourcingEventLineResponseAOC
										fill in fields from each
										invoked.NotifiedSupplier	= NotifiedSupplier
            			
    			Delete is a Delete Action
    				Action Rules
    					constraint (CanUpdateResponse)
 							"BuyerCannotDeleteAResponseEnteredByASupplier"
    					if (!ManualResponse)
	 						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
    					if (!RespondedAndNotifedRel exists)
    						invoke Delete SupplierPlanHolderExistRel

				Submit is an Instance Action
					valid when (ReadyToSubmit) 
    				
					Action Rules
						include ValidateTerms

						if (!ManualResponse
						and !HasCurrentModificationRequests)
							constraint (IsSupplierContact)
 								"BuyerCannotSubmitAResponseEnteredByASupplier"
 						if (!NoBid)
							if (RequiredQuestionsExists
							or  RequiredSupplierQuestionsExists)
								if (NeedToValidateForSourcingEventQuestion)
									constraint (AdHocRequiredQuestionsAnsweredExists)
										"MustAnswerAllRequiredQuestions"
									constraint ((all QuestionWithRequiredAttachmentsRel.SourcingEventQuestion = any SourcingEventQuestionResponseWithAttachmentRel.SourcingEventQuestion)
										or     (SourcingEvent.AllowsConditionalQuestions
										and     SourcingEventNotifiedSupplierQuestionsExists
										and     QuestionWithRequiredAttachmentNotifiedSupplier)     
										or     (SourcingEvent.AllowsConditionalQuestions
										and     SourcingEventPortalSupplierQuestionsExists
										and     QuestionWithRequiredAttachmentPortalSupplier))
											"MustAttachADocumentForAllQuestionsRequiringAnAttachment"

								constraint ((AllHeaderQuestionsAnswered
									and     !SourcingEvent.AllowsConditionalQuestions)	
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventNotifiedSupplierQuestionsExists
									and     AllHeaderConditionalNotifiedQuestionsAnswered)	
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventPortalSupplierQuestionsExists
									and     AllHeaderConditionalQuestionsAnswered))
										"MustAnswerAllRequiredQuestions"

								constraint ((all QuestionWithRequiredAttachmentsRel.SourcingEventQuestion = any SourcingEventQuestionResponseWithAttachmentRel.SourcingEventQuestion)
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventNotifiedSupplierQuestionsExists
									and     QuestionWithRequiredAttachmentNotifiedSupplier)     
									or     (SourcingEvent.AllowsConditionalQuestions
									and     SourcingEventPortalSupplierQuestionsExists
									and     QuestionWithRequiredAttachmentPortalSupplier))
										"MustAttachADocumentForAllQuestionsRequiringAnAttachment"

	    					if (!TechnicalProposalOnly)
	    						constraint (SourcingEventLineResponse set exists)
   	 								"MustRespondToAtLeastOneEventLine"
								constraint (AllRequiredLinesAnswered)
									"MustRespondToAllRequiredLinesForThisEvent"
						if (!ManualResponse)
							constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote
	 						and !HasCurrentModificationRequests)
	 							if (!SourcingEvent.BestAndFinalStarted
	 							and !SourcingEvent.StepTwoStarted)
		 							constraint (SourcingEvent.CanRespondFormal)  
		 								"CannotSubmitResponseAfterEventCloseDateAndTime"
							else
								if (!HasCurrentModificationRequests)
									constraint (SourcingEvent.CanRespondInformal)
										"EventStatusMustBeOpenToSubmitResponse"
    						constraint (IsSupplierContact
	 						and         NotifiedSupplier.Supplier.Active)
	 							"InactiveSupplierCannotSubmitResponses"
	 					else
							constraint (NotifiedSupplier.Supplier.Active)
	 							"BuyerCannotSubmitResponseForAnInactiveSupplier"
 						if (SourcingEvent.BestAndFinalStarted)
							constraint (BestAndFinalSupplier)
								"CannotSubmitResponseIfNotSelectedAsABestAndFinalSupplier"
						if (SourcingEvent.StepTwoStarted)
						   	constraint (TechnicalProposalAccepted)
						   		"CannotSubmitResponse;TechnicalProposalNotAccepted"
						if (BestAndFinalSupplier
						and !HasCurrentModificationRequests)
							constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
								"CannotSubmitResponseAfterBestAndFinalCloseDate"
						if (TechnicalProposalAccepted
						and !HasCurrentModificationRequests)
							if (!SourcingEvent.BestAndFinalOffer)
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotSubmitResponseAfterPricingCloseDateOnTwoStepEvent"
    					if (SourcingEvent.RequireAllLines
    					and !TechnicalProposalOnly)
    						constraint (RespondedToAllLines)
    							"MustRespondToAllEventLines"
    					
						if (!NoBid
    					and SourcingEvent.HasBuyerWeighting)
    						invoke CreateEventResponseBuyerWeighting SourcingEventWeightingBuyer
    							invoked.ParmCompany          = Company
    							invoked.ParmSourcingEvent    = SourcingEvent
    							invoked.SupplierGroup        = NotifiedSupplier.SupplierGroup
    							invoked.Supplier             = NotifiedSupplier.Supplier
    							invoked.SupplierSourceId     = NotifiedSupplier.SupplierSourceId

    					if  (BidBondId entered)
							include VerifyBidBondID
    					
    						if (SourcingEvent.BidBondPercent > 0)
           	 					constraint (BidSecurityPercent = SourcingEvent.BidBondPercent)
            						"CannotSubmit;BidBondPercentOf<BidSecurityPercent>MustBeEqualToRequiredPercentOf<SourcingEvent.BidBondPercent>"

							if (BidSecurityMaximum > 0)
								constraint (BidSecurityMaximum >= SupplierTotalBidAmount)
									"CannotSubmit;BidAmountOf<SupplierTotalBidAmount>IsGreaterThanBidBondMaximumOf<BidSecurityMaximum>;BidBondMaximumMustBeEqualToOrGreaterThanBidAmount" 
    					
    					if (BidBondId entered)
    						BidBondValidated = true

    					if (SourcingEvent.HasLineQuestions
						or  SourcingEvent.HasLinesThatAllowAlternates
						or  SourcingEvent.HasLinesWithAddOnCharges 
						or  SourcingEvent.HasLinesWithLowestBid)
							invoke Submit Draft SourcingEventLineResponse set
						else 
							invoke QuickSubmit Draft SourcingEventLineResponse set 

    						
   						invoke Update first CurrentModificationRequestsForASupplierRel
   							invoked.FromModificationRequest = 2
   						
   						make transition to Submitted
				
						if (SourcingEvent.NumberOfSourcingEventLines <= 50)
							invoke CalculateTotalBidAmount
						else 
							invoke CalculateTotalBidAmountSet 
								invoked.ParmCompany				= Company 
								invoked.ParmNotifiedSupplier	= NotifiedSupplier
								invoked.ParmEvent               = SourcingEvent

						if (SourcingEvent.EventUsingScoring)
							invoke CalculateEventScoreSet 
								invoked.ParmCompany		= Company
								invoked.ParmEvent       = SourcingEvent 
				
				CreateNoBid is a Create Action
					restricted
    				Action Rules
						NoBid = true

					Exit Rules
						if (!RespondedAndNotifedRel exists)
							invoke Delete SupplierPlanHolderExistRel

						for each SourcingEvent.OpenLines
							invoke Create SourcingEventLineResponse set
								invoked.SourcingEventResponse	= SourcingEventResponse
								invoked.SourcingEventLine		= each.SourcingEventLine
								invoked.Quantity				= each.Quantity
								invoked.ResponseAmount.NoBid	= true

						invoke Submit

				UpdateNoBid is an Update Action
					restricted
    				Action Rules
						NoBid = true

						invoke Delete SourcingEventLineResponse set
						if (!TechnicalProposalOnly)
							for each SourcingEvent.SourcingEventLine set
								invoke Create SourcingEventLineResponse set
									invoked.SourcingEventResponse	= SourcingEventResponse
									invoked.SourcingEventLine		= each.SourcingEventLine
									invoked.Quantity				= each.Quantity
									invoked.ResponseAmount.NoBid	= true

						if (!RespondedAndNotifedRel exists)
							invoke Delete SupplierPlanHolderExistRel

						for each HeaderQuestions
							invoke Delete each

						invoke Submit

				CreateNoBidWithReason is a Create Action
					restricted
    				Action Rules
						NoBid = true

					Exit Rules
						if (!RespondedAndNotifedRel exists)
							invoke Delete SupplierPlanHolderExistRel

						if (!TechnicalProposalOnly)
							for each SourcingEvent.OpenLines
								invoke Create SourcingEventLineResponse set
									invoked.SourcingEventResponse	= SourcingEventResponse
									invoked.SourcingEventLine		= each.SourcingEventLine
									invoked.Quantity				= each.Quantity
									invoked.ResponseAmount.NoBid	= true
									invoked.NoBidReason				= NoBidReason

						for each HeaderQuestions
							invoke Delete each

						invoke Submit

				UpdateNoBidWithReason is an Update Action
					restricted
    				Action Rules
						NoBid = true

						invoke Delete SourcingEventLineResponse set
						for each SourcingEvent.SourcingEventLine set
							invoke Create SourcingEventLineResponse set
								invoked.SourcingEventResponse	= SourcingEventResponse
								invoked.SourcingEventLine		= each.SourcingEventLine
								invoked.Quantity				= each.Quantity
								invoked.ResponseAmount.NoBid	= true
								invoked.NoBidReason				= NoBidReason

						if (!RespondedAndNotifedRel exists)
							invoke Delete SupplierPlanHolderExistRel

						invoke Submit

			Submitted is a State
			
				Update is an Update Action
					restricted
					
				UpdatePurchaseOrder is an Instance Action
					restricted
					Parameters
						ParmPOCode             is a POCode
						ParmPurchaseOrder      is a PurchaseOrder
						
					Action Rules
						
						for each UpdateWithPo
							if ((each.POCode entered
							and each.POCode   = ParmPOCode)
							or  each.POCode !entered)
								invoke Update Submitted each
								 	invoked.PurchaseOrder = ParmPurchaseOrder
				
				UpdateConsolidateOutput is an Instance Action
					restricted
					Parameters
						ConsolidateOutputParam is Boolean
						
					Action Rules
						ConsolidateOutput = ConsolidateOutputParam
					
				ChangeModifyByDate is an Instance Action
					valid when (HasCurrentModificationRequests)
					Parameters
						NewSubmitModificationByDate is TimeStamp
						
					Parameter Rules
						NewSubmitModificationByDate
							required
							constraint (NewSubmitModificationByDate > current timestamp) 
								"NewSubmitModificationByDateMustBeAfterCurrentDateAndTime"
								
					Action Rules
						invoke Update first CurrentModificationRequestsForASupplierRel 
							invoked.ModifyByDate	= NewSubmitModificationByDate

						send email
							to NotifiedSupplier.SupplierSourceId.EmailAddress
							cc DerivedProxyEmailAddressList
							from SourcingEvent.Buyer.EmployeeWorkEmailAddress
							subject "UpdateToModifyByDateForResponseToEvent#<SourcingEvent>"
							Contents
								"TheDateTheModificationMustBeResubmittedByHasBeenChangedTo<NewSubmitModificationByDate>." 
									
				RequestResponseModification is an Instance Action
					valid when (CanRequestResponseModification)
					Parameters
						ResponseModificationRequestDetails is RichText
							default label is "EnterTextToIndicateWhatNeedsToBeModified"
						SubmitModificationByDate           is TimeStamp
							default label is "SubmitModificationBy"
						
					Parameter Rules
						ResponseModificationRequestDetails
							required
						SubmitModificationByDate
							required
							constraint (SubmitModificationByDate > current timestamp)
								"SubmitModificationByDateMustBeAfterCurrentDateAndTime"
						
					Action Rules

						invoke Create SupplierContactMessage
							invoked.SupplierGroup 					= NotifiedSupplier.SupplierSourceId.SupplierGroup
							invoked.Supplier 						= NotifiedSupplier.SupplierSourceId.Supplier
							invoked.SupplierSourceId				= NotifiedSupplier.SupplierSourceId
							invoked.CreationDateTime				= current timestamp
							invoked.MessageTitle					= "Request To Modify Your Response To Event" + SourcingEvent.RepresentativeText
							invoked.MessageText                     = ResponseModificationRequestDetails + "The Response Must Be Resubmitted By " + SubmitModificationByDate + " To Be Considered For An Award."
							invoked.Status							= 1
							invoked.Priority						= 3
							invoked.SystemGenerated					= true
							invoked.ReleaseStatus					= 2
							invoked.OriginatingEvent    			= SourcingEvent
							invoked.OriginatingCompany  			= Company
							invoked.MessageOwner                    = SourcingEvent.Buyer						
							invoked.FromModificationRequest         = 1
							invoked.ModifyByDate                    = SubmitModificationByDate

						send email
							to NotifiedSupplier.SupplierSourceId.EmailAddress
							cc DerivedProxyEmailAddressList
							from SourcingEvent.Buyer.EmployeeWorkEmailAddress
							subject "RequestToModifyYourResponseToEvent#<SourcingEvent.RepresentativeText>"
							Contents
								"<ResponseModificationRequestDetails>"
								"TheModificationMustBeResubmittedBy<SubmitModificationByDate>ToBeConsideredForAnAward." 				
								"Click<RequestModificationLinkback>ToModifyTheResponse."
				
				ModifyResponseFromEvent is an Instance Action
					restricted
					
					Action Rules
						invoke ModifyResponse Submitted SourcingEventLineResponse set
 						make transition to Draft
						ResponseViewed = false					
				
				ModifyResponse is an Instance Action 
					valid when (ModifyResponseValid)
					confirmation required
						"YourResponseMustBeResubmittedOnceModified;ResponseCanBeViewedOnUnsubmittedInitialResponsesTab;DoYouWantToContinue?"
						
					Action Rules
						if (!ManualResponse)
							constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!HasCurrentModificationRequests)
		 						if (!SourcingEvent.InformalQuote)
			 						constraint (SourcingEvent.CanRespondFormal)  
			 							"CannotModifyResponseAfterEventCloseDateAndTime"
								else
									constraint (SourcingEvent.CanRespondInformal)
										"EventStatusMustBeOpenToModifyResponse"
 						if (!HasCurrentModificationRequests)
 							constraint (CanUpdateResponse)
 								"BuyerCannotModifyAResponseSubmittedByASupplier"

						if (!ManualResponse)
							constraint (IsSupplierContact
	 						and         NotifiedSupplier.Supplier.Active)
	 							"InactiveSupplierCannotModifyResponses"
						if (ManualResponse)
							constraint (NotifiedSupplier.Supplier.Active)
	 							"BuyerCannotModifyResponseForAnInactiveSupplier"

						if (SourcingEvent.BestAndFinalStarted)
							constraint (BestAndFinalSupplier)
								"CannotModifyResponseIfNotSelectedAsABestAndFinalSupplier"
						if (SourcingEvent.StepTwoStarted)
						   	constraint (TechnicalProposalAccepted)
						   		"CannotModifyResponse;TechnicalProposalNotAccepted"
						if (!HasCurrentModificationRequests)
							if (BestAndFinalSupplier
							and SourcingEvent.BestAndFinalStarted)
								constraint (current timestamp <= SourcingEvent.BestAndFinalCloseDate)
										"CannotModifyResponseAfterBestAndFinalCloseDate"
							if (TechnicalProposalAccepted
							and SourcingEvent.StepTwoStarted)
								constraint (current timestamp <= SourcingEvent.StepTwoCloseDate)
									"CannotModifyResponseAfterPricingCloseDateOnTwoStepEvent"

 						for each ResponseBuyerWeightingRel
 							invoke Delete each
							
 						ResponseViewed = false
 						invoke ModifyResponse Submitted SourcingEventLineResponse set
 						make transition to Draft
 										
				WithdrawResponse is an Instance Action
					valid when (WithdrawResponseValid)
    				confirmation required
    				
    				Action Rules
    					if (!ManualResponse)
    						constraint (!SourcingEvent.NotificationStatus.Amended)
    							"AmendmentInProgress;PleaseTryAgainLater"
	 						if (!SourcingEvent.InformalQuote)
		 						constraint (SourcingEvent.CanRespondFormal)  
	 								"CannotWithdrawResponseAfterEventCloseDateAndTime"
							else
								constraint (SourcingEvent.CanRespondInformal)
									"EventStatusMustBeOpenToWithdrawResponse"

 						constraint (CanUpdateResponse)
 							"BuyerCannotWithdrawAResponseSubmittedByASupplier"
    					if (!ManualResponse)
							constraint (IsSupplierContact
	 						and         NotifiedSupplier.Supplier.Active)
	 							"InactiveSupplierCannotWithdrawResponses"
						if (ManualResponse)
							constraint (NotifiedSupplier.Supplier.Active)
	 							"BuyerCannotWithdrawResponseForAnInactiveSupplier"

 						for each ResponseBuyerWeightingRel
 							invoke Delete each
						if (SourcingEvent.EventUsingScoring)
							invoke CalculateEventScoreSet 
								invoked.ParmCompany		= Company
								invoked.ParmEvent       = SourcingEvent 
 							
 						ResponseViewed = false
 						invoke WithdrawResponse Submitted SourcingEventLineResponse set
 						make transition to Withdrawn

				AwardAllNewContract is an Instance Action
					valid when (CMAwardAllValid)
 					disable multiple instance selection
 					Parameters
						ReasonCode 				is an AwardReason
						TermsHaveBeenNegotiated is Boolean
				    	EffectiveDate			is Date
				    	ExpirationDate			is Date
				    	PrmCurrencyCode         is a Currency
				    		default label is "CurrencyCode"
				    	ScheduleFrequency		
				    	MaxReleaseNumber		is Numeric size 4
				    	Participant
				    	ParticipantGroup
				    	Contract
				    	ContractType					
						ContractSubtype					
						ContractClassification			
						ContractSubclassification
						AwardQtyToLifetimeMaxQty	is Boolean
				    
				    Parameter Rules
						ReasonCode
							required
								"ReasonCodeIsRequired"

                		ContractType
				    		initial value is first SourcingEventLineResponse set.ContractType
               				required
               				if 	(ContractType entered
               				and !ContractSubtype entered)
               					constraint (ContractType.PurchaseType = first SourcingEventLineResponse set.SourcingEventLine.ContractType)
               						"MustSelectAPurchaseTypeWithATypeOf<first SourcingEventLineResponse set.SourcingEventLine.OutputType>"

						ContractSubtype
				    		initial value is first SourcingEventLineResponse set.ContractSubtype
            				if (ContractSubtype entered)
            					constraint (ContractSubtype.PurchaseType = first SourcingEventLineResponse set.SourcingEventLine.ContractType)
            						"MustSelectAPurchaseSubtypeWithATypeOf<first SourcingEventLineResponse set.SourcingEventLine.OutputType>"

						ContractClassification
				    		initial value is first SourcingEventLineResponse set.ContractClassification
               				required
                		
                		ContractSubclassification
				    		initial value is first SourcingEventLineResponse set.ContractSubclassification
				    			                													
				    	EffectiveDate
							initial value is first SourcingEventLineResponse set.EffectiveDate
				    		
						ExpirationDate
							if (ExpirationDate entered)
								constraint (ExpirationDate > EffectiveDate)
									"ExpirationDateMustBeGreaterThanEffectiveDate"
				    		initial value is first SourcingEventLineResponse set.ExpirationDate
				    		if (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing)
				    			if (MaxReleaseNumber entered)
				    				cannot be entered
				    					"CanEnterEitherExpirationDateOrMaxReleaseNumber"
				    		
				    	PrmCurrencyCode
				    		initial value is EnteredCurrencyCode
				    		required
				    			"MustEnterAContractCurrency"
				    	
				    	ScheduleFrequency
				    		initial value is first SourcingEventLineResponse set.ScheduleFrequency
				    		if (ScheduleFrequency entered)
				    			constraint (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing)
				    				"CanOnlyEnterScheduleFrequencyWhenOutputIsStanding"
				    		
				    	MaxReleaseNumber
				    		initial value is first SourcingEventLineResponse set.MaxReleaseNumber
				    		if (MaxReleaseNumber entered)
				    			constraint (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing)
				    				"CanOnlyEnterMaxReleaseNumberWhenOutputIsStanding"
				    		
				    		if (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing)
				    			if (ExpirationDate entered)
				    				cannot be entered
				    					"CanEnterEitherMaxReleaseNumberOrExpirationDate"
				    		
				    	Participant
							
							initial value is first SourcingEventLineResponse set.Participant
				    		if (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing
				    		and !ParticipantGroup entered)
				    			constraint (Participant.Location entered)
				    				"MustEnterCompany/LocationOnlyForStandingOrder"
				    			if (!first SourcingEventLineResponse set.SourcingEventLine.ContractOutput)
				    				required
				    					"ParticipantInformationRequiredWhenOutputIsStanding"

							if (Participant.Location entered)
								constraint (!Participant.RequestingLocation entered)
									"MustEnterEitherLocationOrRequestingLocation"

							if (Participant.Company entered)
								LocalCompany = Participant.Company
								constraint (Participant.PricingGroup !entered)
									"CannotEnterBothCompanyAndPricingGroup"
								constraint (PurchasingCompanyRel exists)
									"ParticipantCompanysProcurementGroupDoesNotEqualTheSourcingCompanysProcurementGroup"		
							if (Participant.PricingGroup entered)
								constraint (Participant.Company !entered)
									"CannotEnterBothCompanyAndPricingGroup"

						ParticipantGroup
				    		if (ParticipantGroup entered)
					    		constraint (first SourcingEventLineResponse set.SourcingEventLine.NonServiceContracts)
									"CannotEnterParticipantGroupInformationWhenOutputIsPOOrServiceContracts"

								constraint (!Participant entered)
									"CannotEnterBothParticipantGroupAndParticipantInformation"

					    		if (first SourcingEventLineResponse set.SourcingEventLine.OutputType.Standing)
									constraint (any ParticipantGroup.ParticipantGroupLineRel.HasLoc)
					    				"ParticipantGroupMustContainCompany/LocationDefinedParticipantsForStandingOutputTypes"

								if (MaxReleaseNumber entered)
									if (ParticipantGroup.ParticipantGroupLineRel exists)
										initialize LocalPartCompany
										for each ParticipantGroup.ParticipantGroupLineRel
											if (!LocalPartCompany entered)
												LocalPartCompany = 	each.ParticipantGroupLine.ParticipantLocation.Company
											constraint (LocalPartCompany = each.ParticipantGroupLine.ParticipantLocation.Company)
												"DurationDefinedByRelease,MultipleCompaniesCannotParticipate"

				    Local Fields
 						FirstOutputType			is Numeric size 2
 						FirstCMFlag				is Boolean
						ParaPoCode              is a POCode
						LocalBuyUomQuantity     is Decimal 15.4
 						
 					Action Rules
 						
 						include EditAwardAll

						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent
						
						CurrencyCode = PrmCurrencyCode
						
						for each SourcingEventLineResponse set
							invoke AwardAll Submitted each
								invoked.Reasoncode 					= ReasonCode
								invoked.Termshavebeennegotiated		= TermsHaveBeenNegotiated
						    	invoked.Effectivedate				= EffectiveDate
						    	invoked.Expirationdate	            = ExpirationDate			
						    	invoked.Schedulefrequency			= ScheduleFrequency		
						    	invoked.Maxreleasenumber			= MaxReleaseNumber		
                                if (each.SourcingEventLine.NonStandingContracts)
                                	if (each.SourcingEventLine.ServiceCode.Quantity)
                                    	invoked.Lifetimemaxquantity     = each.Quantity
									else
	                                	if (AwardQtyToLifetimeMaxQty
    									and !each.SourcingEventLine.ServiceCode.Amount)
		                                	invoked.Lifetimemaxquantity			= 0
											invoked.Awardqtytolifetimemaxqty	= AwardQtyToLifetimeMaxQty
						    	invoked.Participants				= Participant
						    	invoked.Participantgroups			= ParticipantGroup
						    	invoked.Contracts					= Contract
						    	invoked.Contracttype				= ContractType					
								invoked.Contractsubtype				= ContractSubtype					
								invoked.Contractclassification		= ContractClassification			
								invoked.Contractsubclassification	= ContractSubclassification  
				
				AwardAllAppendToContract is an Instance Action
					valid when (CMAwardAllValid)
 					disable multiple instance selection
 					Parameters
						ReasonCode 				is an AwardReason
						TermsHaveBeenNegotiated is Boolean
				    	Contract
						AwardQtyToLifetimeMaxQty is Boolean
				    
				    Parameter Rules
						ReasonCode
							required
								"ReasonCodeIsRequired"

						Contract
							required
			    			constraint (!Contract.ContractStatus.Closed)
								"ExistingContractMustNotBeInactive,ActiveOrClosed"
							constraint (!Contract.ContractStatus.Inactive)
								"ExistingContractMustNotBeInactive,ActiveOrClosed"
							constraint (NotifiedSupplier.Supplier = Contract.Supplier)
            					"AwardedSupplierMustMatchTheSupplierOnTheExistingContract"
            				constraint (NotifiedSupplier.SupplierSourceId = Contract.SupplierSourceId)
            					"AwardedSupplierContactMustMatchTheSupplierContactOnTheExistingContract"
            				constraint (!Contract.UseHeaderCommitments)
								"CannotAppendToExistingContractThatUsesHeaderCommitments"
							constraint (!Contract.UseLineCommitments)
								"ContractUsesLineOrLineSpreadCommitments;MustAwardAtLineLevelAndEnterALifetimeMaximumAmountForEachLine"
                			                		
				    Local Fields
 						FirstOutputType			is Numeric size 2
 						FirstCMFlag				is Boolean
						LocalBuyUomQuantity     is Decimal 15.4
 						
 					Action Rules
 						
 						include EditAwardAll
 						
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent

						for each SourcingEventLineResponse set
							invoke AwardAll Submitted each
								invoked.Reasoncode 					= ReasonCode
								invoked.Termshavebeennegotiated		= TermsHaveBeenNegotiated
								invoked.Contracts					= Contract
	                            if (each.SourcingEventLine.BlanketOrContract)
									invoked.Awardqtytolifetimemaxqty	= AwardQtyToLifetimeMaxQty

				AwardAllNewPO is an Instance Action
					valid when (POAwardAllValid)
 					disable multiple instance selection
 					Parameters
						ReasonCode 				is an AwardReason
						TermsHaveBeenNegotiated is Boolean
						DeliveryDateOverride	is Date
				    	POCode
				    	PrmCurrencyCode         is a Currency
				    		default label is "CurrencyCode"
				    	
				    Parameter Rules
						ReasonCode
							required
								"ReasonCodeIsRequired"

						DeliveryDateOverride
							if (DeliveryDateOverride entered)
					    		constraint (DeliveryDateOverride >= current corporate date)
					    			"DeliveryDateCannotBeBeforeCurrentDate"
						
						PrmCurrencyCode
				    		initial value is EnteredCurrencyCode
				    		required
				    			"MustEnterAPurchaseOrderCurrency"
						
				    Local Fields
 						FirstOutputType			is Numeric size 2
						ParaPoCode              is a POCode
						LocalBuyUomQuantity     is Decimal 15.4
						FirstCMFlag				is Boolean
 						
 					Action Rules
 						
 						include EditAwardAll
 						
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent

 						FirstOutputType = first SourcingEventLineResponse set.SourcingEventLine.OutputType
 						FirstCMFlag		= first SourcingEventLineResponse set.SourcingEventLine.ContractOutput

						constraint (!NoBid)
							"SupplierRespondedWithNoBid;CannotAwardAll"

						initialize LocalPoCode
				        initialize ParaPoCode
						
						LocalPoCode = POCode
						ParaPoCode =  POCode
						
						CurrencyCode = PrmCurrencyCode


						for each SourcingEventLineResponse set
							for each each.PoCodeRel
								if (ParaPoCode entered)
									if (each.POCode = !ParaPoCode)
										confirmation required
											"POCode<each.POCode>OnRequisitionOnLine<each.SourcingEventLine>ForSupplier<NotifiedSupplier.Supplier>DoesNotMatchEnteredPurchaseOrderPOCode<ParaPoCode>-EnteredPOCodeWillBeUsed;DoYouWishToContinue?"






						if (!Company.ManualPOCodeAllowed.No
						and !LocalPoCode entered) 
							for each SourcingEventLineResponse set
								for each each.PoCodeRel
									if (!LocalPoCode entered) 
										LocalPoCode = each.POCode
									constraint (LocalPoCode = each.POCode)
										"TryingToAwardAllWithDifferentPOCodesOnRequisitions-MustAwardByLineOrEnterAManualPOCode"

							if (!LocalPoCode entered) 
							    if (Company.POCodeDefaultMethod.InventoryLocation)
									for each PocodeOnRelatedShipTo 
										if (!LocalPoCode entered) 
											LocalPoCode = each.SourcingEventLine.ShipTo.POCode
										constraint (LocalPoCode = each.SourcingEventLine.ShipTo.POCode)
											"TryingToAwardAllWithDifferentDefaultPoCodesOnShipToLocations-MustAwardByLineOrEnterAManualPOCode"

							    if (Company.POCodeDefaultMethod.RequestingLocation)
									for each SourcingEventLineResponse set
										for each each.ReqLocWithPocode
											if (!LocalPoCode entered) 
												LocalPoCode = each.RequestingLocationRel.POCode
											constraint (LocalPoCode = each.RequestingLocationRel.POCode)
												"TryingToAwardAllWithDifferentDefaultPoCodesOnRequestingLocations-MustAwardByLineOrEnterAManualPOCode"

						for each SourcingEventLineResponse set
							invoke AwardAll Submitted each
								invoked.Reasoncode 					= ReasonCode
								invoked.Termshavebeennegotiated		= TermsHaveBeenNegotiated
								invoked.Deliverydateoverride		= DeliveryDateOverride
								invoked.Pocode                      = POCode
				
				AwardAllAppendToPO is an Instance Action
					valid when (POAwardAllValid)
 					disable multiple instance selection
 					Parameters
						ReasonCode 				is an AwardReason
						TermsHaveBeenNegotiated is Boolean
						PurchaseOrder			
						DeliveryDateOverride	is Date
				    
				    Parameter Rules
						ReasonCode
							required
								"ReasonCodeIsRequired"

						PurchaseOrder
							constraint (!PurchaseOrder.Closed.Yes)
								"CannotAppendToPurchaseOrderThatIsAlreadyClosed"
							constraint (!PurchaseOrder.Canceled)
								"CannotAppendToPurchaseOrderThatIsCancelled"
							if (DropShipAddressRel exists)
			    				constraint (first DropShipAddressRel.RequisitionHeaderRel.DropshipAddress = PurchaseOrder.DropshipAddress)
									"CannotAppendToAnExistingPurchaseOrderWithDifferentDropshipAddress"	

						DeliveryDateOverride
							if (DeliveryDateOverride entered)
					    		constraint (DeliveryDateOverride >= current corporate date)
					    			"DeliveryDateCannotBeBeforeCurrentDate"
						
				    Local Fields
 						FirstOutputType			is Numeric size 2
 						FirstCMFlag				is Boolean
						ParaPoCode              is a POCode
						LocalBuyUomQuantity     is Decimal 15.4
 						
 					Action Rules
 						
 						include EditAwardAll
 						initialize ParaPoCode
						
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent

						ParaPoCode =  PurchaseOrder.POCode

						for each SourcingEventLineResponse set
							for each each.LineSourceRel
								if (each.HasProcessLevel
								and PurchaseOrder.ProcessLevel entered)
									constraint (each.RequestingLocationProcessLevel = PurchaseOrder.ProcessLevel)
										"CannotAppendToPO;PurchaseOrderProcessLevelAndARequestingLocationProcessLevelAreDifferent"
								if (each.HasProcessLevel)
									constraint (PurchaseOrder.ProcessLevel entered)
										"CannotAppendToPO;ARequestingLocationHasProcessLevelAndPurchaseOrderHasNoProcessLevel"
							
							for each each.PoCodeRel
								if (PurchaseOrder.POCode entered)
									if (each.POCode = !PurchaseOrder.POCode)
										confirmation required
											"POCode<each.POCode>OnRequisitionOnLine<each.SourcingEventLine>ForSupplier<NotifiedSupplier.Supplier>DoesNotMatchEnteredPurchaseOrderPOCode<ParaPoCode>-POCodeOnRequisitionWillBeNotUsed;DoYouWishToContinue?"
						
						LocalPurchaseOrder      = PurchaseOrder
						constraint (PurchaseOrderRel.Vendor = NotifiedSupplier.Supplier.Vendor)
                    		"PurchaseOrderIsSetupForADifferentVendor"
	    				constraint (PurchaseOrderRel.PurchaseFromLocation = NotifiedSupplier.SupplierSourceId.VendorLocation)
                       		"PurchaseOrderIsSetupForADifferentVendorLocation"
						
						for each SourcingEventLineResponseHeaderAOCRel
							LocalAddOnCharge = each.AOC
							constraint (!AddOnChargeAlreadyExists)
								"CannotAppendToPOWhereAddOnChargeOnResponseAlreadyExistsOnPOHeader"
						for each SourcingEventLineResponse set
							invoke AwardAll Submitted each
								invoked.Reasoncode 					= ReasonCode
								invoked.Termshavebeennegotiated		= TermsHaveBeenNegotiated
								invoked.Purchaseorder				= PurchaseOrder
								invoked.Deliverydateoverride		= DeliveryDateOverride
				
				AwardAllNoOutput is an Instance Action
					valid when (NoOutputAwardAllValid)
 					disable multiple instance selection
 					Parameters
						ReasonCode 				is an AwardReason
						TermsHaveBeenNegotiated is Boolean
				    
				    Parameter Rules
						ReasonCode
							required
								"ReasonCodeIsRequired"

				    Local Fields
 						FirstOutputType			is Numeric size 2
 						FirstCMFlag				is Boolean
						ParaPoCode              is a POCode
						LocalBuyUomQuantity     is Decimal 15.4
 						
 					Action Rules
 						
 						include EditAwardAll
 						initialize ParaPoCode
						
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent

						for each SourcingEventLineResponse set
							invoke AwardAll Submitted each
								invoked.Reasoncode 					= ReasonCode
								invoked.Termshavebeennegotiated		= TermsHaveBeenNegotiated
				
				FinalAward is an Instance Action
					valid when (FinalAwardAvailable)
					Action Rules
						for each FinalAwardLinesBySupplier
							invoke FinalAward Open each.SourcingEventLine set
							
				CreateOutput is an Instance Action
					valid when (CreateOutputAvailable)
					Action Rules
						for each CreateOutputLinesBySupplier
							invoke CreateOutput Awarded.Approved each.SourcingEventLine set	
						
				AssignNonAwardReason is an Instance Action
					valid when (NonAwardValid)
					Parameters
						NonAwardReason		is an AwardReason
						
					Parameter Rules 
						NonAwardReason
							initial value is TechnicalProposalDenialReason
							required
					
					Action Rules
						
						if (!SourcingEvent.TechnicalProposalsOnly)
							invoke AssignNonAwardReason Submitted NonAwardedLines
								invoked.NonAwardReason	= NonAwardReason
								
							invoke AssignNonAwardReason Submitted NonAwardedAlternateLines
								invoked.NonAwardReason  = NonAwardReason
						
						else
						if (SourcingEvent.TechnicalProposalsOnly)
							TechnicalProposalDenialReason   = NonAwardReason

 				AcceptTechnicalProposal is an Instance Action
 					valid when (TwoStepBiddingActionNeeded)
 					
 					
 					Action Rules
 						if (TechnicalProposalDenialReason entered)
 							confirmation required
 								"ANonAwardReasonCodeHasBeenEntered;AcceptingTheTechnicalProposalWillClearTheReasonCode;DoYouWantToContinue?"
 						
 						if (SourcingEvent.CloseDate entered)
 							constraint (current timestamp > SourcingEvent.CloseDate)
 								"CannotAcceptTechnicalProposalUntilAfterEventCloseDateOf<SourcingEvent.CloseDate>"
 						
 						TechnicalProposalAccepted = true
 						initialize TechnicalProposalDenialReason
 						
	 					for each HeaderQuestions
							invoke UpdateFromAcceptTechnicalProposal each
								invoked.FromTechnicalProposal = true
						
						for each SourcingEventResponseAttachment set
							invoke UpdateFromAcceptTechnicalProposal each
								invoked.FromTechnicalProposal = true
								
						if (SourcingEvent.TwoStepBidding.Combined)
							for each LineQuestions
								invoke UpdateFromAcceptTechnicalProposal each
									invoked.FromTechnicalProposal = true
 					
					Exit Rules 					
 					
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent 					
 					
 				UnacceptTechnicalProposal is an Instance Action
 					valid when (CanUnacceptTechnicalProposal)
 					
 					Action Rules
 					
 						TechnicalProposalAccepted = false
 						
 						for each HeaderQuestions
							invoke UpdateFromAcceptTechnicalProposal each
								invoked.FromTechnicalProposal = false
						
						for each SourcingEventResponseAttachment set
							invoke UpdateFromAcceptTechnicalProposal each
								invoked.FromTechnicalProposal = false
								
						if (SourcingEvent.TwoStepBidding.Combined)
							for each LineQuestions
								invoke UpdateFromAcceptTechnicalProposal each
									invoked.FromTechnicalProposal = false
 				
 				SelectForBestAndFinal is an Instance Action
 					valid when (CanSelectForBestAndFinal)
 					
 					Action Rules
 						
 						if (NonAwardResponseLinesRel exists)
 							confirmation required
 								"ANonAwardReasonCodeHasBeenEntered;SelectingTheSupplierForBestAndFinalWillClearTheReasonCode;DoYouWantToContinue?"
 						
 						if (SourcingEvent.CloseDate entered)
 							constraint (current timestamp > SourcingEvent.CloseDate)
 								"CannotSelectForBestAndFinalUntilAfterEventCloseDateOf<SourcingEvent.CloseDate>"
 						
 						constraint (!NoBid)
 							"CannotSelectANoBidResponseForBestAndFinal"
 							
 						BestAndFinalSupplier = true
 						
 						if (NonAwardResponseLinesRel exists)
 							for each NonAwardResponseLinesRel
 								if (each.Status.Draft)
 									invoke Draft.ManualLineUpdate each
 										invoked.AwardReason  = blank
 								else
 								if (each.Status.Submitted)
 									invoke Submitted.Update each
 										invoked.AwardReason = blank
 						
					Exit Rules
					
						if (SourcingEvent.ShowResponsesNotViewed)
							invoke MarkResponsesAsViewed SourcingEvent						
 					 				
 				UnselectForBestAndFinal is an Instance Action
 					valid when (CanUnselectForBestAndFinal)
 					
 					Action Rules
 					
 						BestAndFinalSupplier = false
 				
 				ValidateBidBond is an Instance Action
 					valid when (PaperBidBondEnteredBySupplier)
 					
 					Action Rules
 						BidBondValidated  = true
 				
 				DeleteAward is an Instance Action
					valid when (DeleteAwardValid)
					confirmation required
 					Action Rules
						for each BidResponseLinesRel
							invoke DeleteAward Submitted each

			Withdrawn is a State
				Entrance Rules
					ResponseWithdrawDate = current timestamp
					
				ReinstateResponse is an Instance Action   
					confirmation required
						"YourResponseMustBeResubmittedOnceReinstated;DoYouWantToContinue?"
				
					Action Rules
								
						constraint (!SourcingEvent.NotificationStatus.Amended)
   							"AmendmentInProgress;PleaseTryAgainLater"
 						if (!SourcingEvent.InformalQuote)
	 						if (IsSupplierContact)
	 							constraint (SourcingEvent.CanRespondFormal)  
	 								"CannotReinstateResponseAfterEventCloseDateAndTime"
	 						if (!IsSupplierContact)
	 							if (SourcingEvent.CanRespondFormal)
	 								constraint (ManualResponse)
	 									"BuyerCannotReinstateReponseWithdrawnBySupplier"
						if (SourcingEvent.InformalQuote)
							constraint (SourcingEvent.CanRespondInformal)
								"EventStatusMustBeOpenToReinstateResponse"
	 					constraint (NotifiedSupplier.Supplier.Active)
	 						"InactiveSupplierCannotReinstateResponses"

 						invoke ReinstateAll Withdrawn SourcingEventLineResponse set
 						make transition to Draft
 						
				Update is an Update Action
					restricted
