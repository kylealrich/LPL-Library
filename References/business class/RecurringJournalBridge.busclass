RecurringJournalBridge is a BusinessClass
    owned by GeneralLedger
    prefix is GLRJB

    Ontology
    	symbolic key is RecurringJournalBridge

    Patterns

    Persistent Fields
		FrTransactionCodeBlock			is a FinanceCodeBlock
	    FromDimensionCode				is a DimensionCode
		ToTransactionCodeBlock			is a TransactionCodeBlock
	    ToDimensionCode					is a DimensionCode
        GeneralLedgerEvent
        	default label is "GlobalLedgerEvent"
        TransactionDate					is an ExchangeDate
        CurrencyCode					is a FromCurrency
        TransactionAmount				is a CurrencyAmount 
        	precision is CurrencyCode.NumberOfDecimals     
		ReportCurrencyAmount			is a FinanceCurrencyAmount
        UnitsAmount						
		TransactionOrigin				is BusinessObjectReference
        UpdatedTransactionAmount		is an InternationalAmount
		UpdatedCurrencyAmount			is a FinanceCurrencyAmount
        UpdatedUnitsAmount				is a UnitsAmount

	Context Fields
		CurrencyTable
		
	Transient Fields
		TransientBypassStructureRelationEdit	is a BypassStructureRelationEdit

	Local Fields
		LocalClosePeriod				is a GeneralLedgerClosePeriod
		LocalDate						is Date
		LocalTransactionDate			is an ExchangeDate
        LocalCurrencyCode				is a FromCurrency
        LocalToCurrency					is a ToCurrency
        LocalCurrencyAmount				is a CurrencyExchangeGroup
        LocalIsAToCodeBlock				is Numeric 1
        LocalTransactionAmount2			is Decimal size 19.2
        LocalTransactionAmount3			is Decimal size 19.3
        LocalTransactionAmount0			is Numeric size 19

	Derived Fields
		DerivedGLJournalAmount			is a DerivedField
			type is like InternationalAmount
			return TransactionOrigin(GeneralLedgerTransaction).TransactionAmount

		DerivedRecurringJournalAmount	is a DerivedField
			type is like InternationalAmount
			return (sum RecurringJournalBridgeRel.TransactionAmount)

		DerivedPostingDate				is a DerivedField
			type is Date
			restricted
			if (!RecurringJournalControl.PostingDay entered)
				LocalDate				= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			else
				LocalDate	= (GeneralLedgerClosePeriodRel.DerivedBeginGregorian + (RecurringJournalControl.PostingDay - 1))
				if (LocalDate			> GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
					LocalDate			= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			return LocalDate
		DerivedTransactionDate			is a DerivedField
			type is Date
			restricted
			if (!RecurringJournalControl.TransactionDay entered)
				LocalDate				= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			else
				LocalDate				= (GeneralLedgerClosePeriodRel.DerivedBeginGregorian + (RecurringJournalControl.TransactionDay - 1))			
				if (LocalDate			> GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
					LocalDate			= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			return LocalDate
		DerivedTotalPeriodsForJournal		is a DerivedField
			type is Numeric 4
			restricted
			return instance count of RecurringJournalScheduleRel
		DerivedTotalWeeksForJournal			is a DerivedField
			type is Numeric 4
			restricted
			return (sum RecurringJournalScheduleRel.RecurringJournalSchedule.GeneralLedgerClosePeriod.WeeksInPeriod)
		DerivedWeeksForPeriod				is a DerivedField
			type is Numeric 4
			restricted
			return GeneralLedgerClosePeriodRel.WeeksInPeriod
		RecurringJournalDescription		is a DerivedField
			type is like Description
			restricted
			return RecurringJournalControl.Description

		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (!CurrencyCode exists)
    			return .01
    		if (CurrencyCode.NumberOfDecimals = 2)
    			return .01
    		if (CurrencyCode.NumberOfDecimals = 0)
    			return 1
    		if (CurrencyCode.NumberOfDecimals = 3)
    			return .001
    		if (CurrencyCode.NumberOfDecimals = 4)
    			return .0001

		RoundedTransactionAmount	is a DerivedField
    		type is like InternalAmount
    		restricted
    		if (TransactionAmount entered)
	    		RoundedTransactionAmount	   = TransactionAmount
	    		round RoundedTransactionAmount to nearest DerivedRoundTo
	    		return RoundedTransactionAmount
    		return 0

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (CurrencyCode entered)
				return CurrencyCode.Currency.NumberOfDecimals
			else
				if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
					return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
				else
					return 2

		DerivedNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (LocalToCurrency entered)
				return LocalToCurrency.Currency.NumberOfDecimals
			else
				if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
					return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
				else
					return 2

	Relations
		RecurringJournalBridgeRel
			one-to-many relation to RecurringJournalBridge
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl			= RecurringJournalControl

		GeneralLedgerClosePeriodRel
			one-to-one relation to GeneralLedgerClosePeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration = AccountingEntity.CloseConfiguration
				related.GeneralLedgerClosePeriod		= LocalClosePeriod
		RecurringJournalScheduleRel
			one-to-many relation to RecurringJournalSchedule
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl 		= RecurringJournalControl
			Instance Selection
				where (related.PeriodSelected			= true)
		AllRecurringJournalScheduleRel
			one-to-many relation to RecurringJournalSchedule
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl 		= RecurringJournalControl
		RecurringJournalEncumbranceRel
			one-to-one relation to RecurringJournalEncumbrance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl 		= RecurringJournalControl
				related.GeneralLedgerClosePeriod 		= LocalClosePeriod
				related.RecurringJournalEncumbrance.IsAToCodeBlock	= LocalIsAToCodeBlock
				related.RecurringJournalEncumbrance.SequenceNumber	= RecurringJournalBridge

	Conditions
    	RecurringJournalProcessed
    		restricted
			when (RecurringJournalControl.LastProcessedPeriod entered)
		UnreleasedRecurringJournal
			restricted
			when (RecurringJournalControl.Status.Unreleased)

    Sets
		ByTransactionOrigin

			Sort Order

				TransactionOrigin
				RecurringJournalBridge
		ByUniqueID
			Sort Order
				UniqueID 

	Field Rules
		TransactionOrigin
			default to reference to this instance
		FromDimensionCode
			force default to FrTransactionCodeBlock.DimensionCode
		ToDimensionCode
			force default to ToTransactionCodeBlock.DimensionCode

	Rule Blocks

	Actions

		CreateGLTransactionDetail is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmJournalControl			is a RecurringJournalControl
					default label is "Journal Control"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "Period"
				PrmJournalizeGroup			is like JournalizeGroup
					default label is "JournalizeGroup"

			Parameter Rules

			Local Fields
				LocalCurrencyTable				is a CurrencyTable
				LocalPostingDate				is Date
		        LocalTransactionCodeBlock		is a TransactionCodeBlock
				LocalUnitsAmount				is a UnitsAmount
				LocalBalanceCurrencyAmount		is a FinanceCurrencyAmount
				LocalFrBalanceCurrencyAmount	is a FinanceCurrencyAmount
				LocalLastTransaction			is Boolean

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmJournalControl)

			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmJournalControl

			Action Rules
				Empty Set Rules
					invoke UpdateRecurringJournal PrmJournalControl
						invoked.PrmProcessingJournal	= false

				Set Rules
					Entrance Rules
						LocalClosePeriod			= PrmClosePeriod
						LocalPostingDate			= DerivedPostingDate
						LocalLastTransaction		= false
						if (last AllRecurringJournalScheduleRel.GeneralLedgerClosePeriod = PrmClosePeriod)
							LocalLastTransaction				= true

					Exit Rules
						invoke UpdateRecurringJournal PrmJournalControl
							invoked.PrmProcessingJournal	= false

				Instance Rules
					LocalClosePeriod					= PrmClosePeriod		
					LocalTransactionDate				= TransactionDate
		    		if (CurrencyTable not in context)
		 				LocalCurrencyTable					= FinanceEnterpriseGroup.CurrencyTable
					LocalCurrencyCode					= CurrencyCode
					LocalTransactionCodeBlock			= FrTransactionCodeBlock
					if (DerivedTotalWeeksForJournal = 0)
						LocalCurrencyAmount.TransactionAmount				= TransactionAmount / DerivedTotalPeriodsForJournal
						LocalUnitsAmount					= UnitsAmount / DerivedTotalPeriodsForJournal
					else
						LocalCurrencyAmount.TransactionAmount = TransactionAmount * (DerivedWeeksForPeriod / DerivedTotalWeeksForJournal)
						LocalUnitsAmount					  = UnitsAmount * (DerivedWeeksForPeriod / DerivedTotalWeeksForJournal)
					LocalBalanceCurrencyAmount			= ReportCurrencyAmount
					if (LocalLastTransaction)
						LocalCurrencyAmount.TransactionAmount				= TransactionAmount - UpdatedTransactionAmount
						LocalUnitsAmount					= UnitsAmount		- UpdatedUnitsAmount
					if (OutputNumberOfDecimals  = 2)
						LocalTransactionAmount2	= UpdatedTransactionAmount
						LocalTransactionAmount2   += LocalCurrencyAmount.TransactionAmount
						UpdatedTransactionAmount	= LocalTransactionAmount2
					else
						if (OutputNumberOfDecimals  = 3)
							LocalTransactionAmount3	= UpdatedTransactionAmount
							LocalTransactionAmount3   += LocalCurrencyAmount.TransactionAmount
							UpdatedTransactionAmount	= LocalTransactionAmount3
						else
							LocalTransactionAmount0	= UpdatedTransactionAmount
							LocalTransactionAmount0   += LocalCurrencyAmount.TransactionAmount
							UpdatedTransactionAmount	= LocalTransactionAmount0					

					UpdatedUnitsAmount					+= LocalUnitsAmount
					initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
			        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
					LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.FunctionalCurrency
					LocalToCurrency			= AccountingEntity.FunctionalCurrency					
					UpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (AccountingEntity.AlternateCurrency entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency
						UpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (AccountingEntity.AlternateCurrency2 entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency2
						UpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (AccountingEntity.AlternateCurrency3 entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency3
						UpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FrTransactionCodeBlock.Project entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FrTransactionCodeBlock.Project.Currency
						UpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyOne
						UpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
						UpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyThree
						UpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
						UpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyFive
						UpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		+= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount

					LocalFrBalanceCurrencyAmount	= LocalBalanceCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					initialize LocalFrBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

					if (LocalLastTransaction)
						LocalBalanceCurrencyAmount											= ReportCurrencyAmount
						LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	-= UpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	-= UpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	-= UpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	-= UpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		-= UpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	-= UpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		-= UpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		-= UpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		-= UpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		-= UpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

					LocalFrBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount -= LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	-= LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	-= LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount -= LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	-= LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	-= LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 	-= LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 	-= LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 	-= LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					LocalFrBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 	-= LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					
					LocalTransactionDate						= DerivedTransactionDate  
					TransientBypassStructureRelationEdit		= true
					invoke Create Released GLTransactionDetail
						fill in fields from this instance
						invoked.JournalizeGroup					= PrmJournalizeGroup
						invoked.OriginatingTransactionUniqueID	= UniqueID
						invoked.OriginatingTransactionPeriod	= PrmClosePeriod.GeneralLedgerCalendarPeriod
						invoked.PostingDate						= LocalPostingDate
						invoked.TransactionDate					= LocalTransactionDate
						invoked.BaseZoneAccountingUnit			= RecurringJournalControl.BaseZoneAccountingUnit
						invoked.BaseZoneDimension1				= RecurringJournalControl.BaseZoneDimension1
						invoked.System							= RecurringJournalControl.System
						invoked.FinanceCodeBlock				= FrTransactionCodeBlock
						invoked.DimensionCode					= FromDimensionCode
						invoked.PrimaryLedger					= RecurringJournalControl.Ledger
						invoked.TransactionAmount				= (LocalCurrencyAmount.TransactionAmount * -1)
						invoked.UnitsAmount						= (LocalUnitsAmount * -1)
						invoked.ReportCurrencyAmount			= LocalFrBalanceCurrencyAmount

							invoked.ReportCurrencyAmount.KeepRateOnly		= true



					invoke Create Released GLTransactionDetail
						fill in fields from this instance
						invoked.JournalizeGroup					= PrmJournalizeGroup
						invoked.OriginatingTransactionUniqueID	= UniqueID
						invoked.OriginatingTransactionPeriod	= PrmClosePeriod.GeneralLedgerCalendarPeriod
						invoked.PostingDate						= LocalPostingDate
						invoked.TransactionDate					= LocalTransactionDate
						invoked.BaseZoneAccountingUnit			= RecurringJournalControl.BaseZoneAccountingUnit
						invoked.BaseZoneDimension1				= RecurringJournalControl.BaseZoneDimension1
						invoked.System							= RecurringJournalControl.System
						invoked.FinanceCodeBlock				= ToTransactionCodeBlock
						invoked.DimensionCode					= ToDimensionCode
						invoked.PrimaryLedger					= RecurringJournalControl.Ledger
						invoked.TransactionAmount				= LocalCurrencyAmount.TransactionAmount
						invoked.UnitsAmount						= LocalUnitsAmount
						invoked.ReportCurrencyAmount			= LocalBalanceCurrencyAmount

							invoked.ReportCurrencyAmount.KeepRateOnly		= true


					

					LocalIsAToCodeBlock				= 0
					if (RecurringJournalEncumbranceRel exists)
						invoke UpdateGLCommit RecurringJournalEncumbranceRel
					LocalIsAToCodeBlock				= 1
					if (RecurringJournalEncumbranceRel exists)
						invoke UpdateGLCommit RecurringJournalEncumbranceRel

 		Create is a Create Action
			restricted		
			Action Rules
				UpdatedCurrencyAmount			= ReportCurrencyAmount
			Exit Rules
				initialize UpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

    	Update is an Update Action
			valid when (UnreleasedRecurringJournal)
			Entrance Rules
				if (TransactionAmount changed)
					ReportCurrencyAmount.KeepRateOnly	= true
	
			Action Rules
				if (TransactionOrigin.BusinessClassName = "GeneralLedgerTransaction")
					constraint (!DerivedRecurringJournalAmount > DerivedGLJournalAmount)
						"TotalRecurringTransactionAmountCannotExceedGLTransactionAmount"

				UpdatedCurrencyAmount			= ReportCurrencyAmount
			Exit Rules
				initialize UpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				initialize UpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

		Delete is a Delete Action
			valid when (UnreleasedRecurringJournal)
			Entrance Rules

		PurgeForRJControl is a Set Action
			restricted					
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmAccountingEntity					is a AccountingEntity
				PrmRecurringJournalControl			is a RecurringJournalControl
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmRecurringJournalControl
					required
							
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmRecurringJournalControl)
					
			Action Rules
				Instance Rules
					invoke Delete
		
 		CreateRecurringEncumbrance is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmJournalControl			is a RecurringJournalControl
					default label is "Journal Control"

			Parameter Rules

			Local Fields
				LocalCurrencyTable				is a CurrencyTable
		        LocalTransactionCodeBlock		is a TransactionCodeBlock
				LocalUnitsAmount				is a UnitsAmount
				LocalBalanceCurrencyAmount		is a FinanceCurrencyAmount
				LocalLastTransaction			is Boolean
				LocalUpdatedTransactionAmount	is an InternationalAmount 
				LocalUpdatedCurrencyAmount		is a FinanceCurrencyAmount
				LocalUpdatedUnitsAmount			is a UnitsAmount

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmJournalControl)

			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmJournalControl

			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					initialize LocalUpdatedTransactionAmount
					initialize LocalUpdatedCurrencyAmount
					initialize LocalUpdatedUnitsAmount
					LocalTransactionDate				= TransactionDate
		    		if (CurrencyTable not in context)
		 				LocalCurrencyTable					= FinanceEnterpriseGroup.CurrencyTable
					LocalCurrencyCode					= CurrencyCode
					LocalTransactionCodeBlock			= FrTransactionCodeBlock
					if (DerivedTotalWeeksForJournal = 0)
						LocalCurrencyAmount.TransactionAmount				= TransactionAmount / DerivedTotalPeriodsForJournal
						LocalUnitsAmount					= UnitsAmount / DerivedTotalPeriodsForJournal
					else
						LocalCurrencyAmount.TransactionAmount			    = TransactionAmount * (DerivedWeeksForPeriod / DerivedTotalWeeksForJournal)
						LocalUnitsAmount					= UnitsAmount * (DerivedWeeksForPeriod / DerivedTotalWeeksForJournal)

					initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
			        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
					LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.FunctionalCurrency
					LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount

					if (AccountingEntity.AlternateCurrency entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency
						LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (AccountingEntity.AlternateCurrency2 entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency2
						LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (AccountingEntity.AlternateCurrency3 entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= AccountingEntity.AlternateCurrency3
						LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FrTransactionCodeBlock.Project entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FrTransactionCodeBlock.Project.Currency
						LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyOne
						LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyThree
						LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount
					if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
				        LocalCurrencyAmount.BaseAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
				        initialize LocalCurrencyAmount.BaseAmount.EnteredCurrencyAmount
						LocalCurrencyAmount.BaseAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyFive
						LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		= LocalCurrencyAmount.BaseAmount.OutputCurrencyAmount

					for each RecurringJournalScheduleRel
						if (!each.PeriodProcessed)
							LocalClosePeriod					= each.GeneralLedgerClosePeriod
							LocalLastTransaction				= false
							if (last AllRecurringJournalScheduleRel.GeneralLedgerClosePeriod = LocalClosePeriod)
								LocalLastTransaction				= true
							if (LocalLastTransaction)
								LocalCurrencyAmount.TransactionAmount												= TransactionAmount - LocalUpdatedTransactionAmount
								LocalUnitsAmount													= UnitsAmount		- LocalUpdatedUnitsAmount
								LocalBalanceCurrencyAmount											= ReportCurrencyAmount
								LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	-= LocalUpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	-= LocalUpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	-= LocalUpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	-= LocalUpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		-= LocalUpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	-= LocalUpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		-= LocalUpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		-= LocalUpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		-= LocalUpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		-= LocalUpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

							LocalUpdatedTransactionAmount		+= LocalCurrencyAmount.TransactionAmount
							LocalUpdatedUnitsAmount				+= LocalUnitsAmount
							LocalUpdatedCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	+= LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 	+= LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	+= LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	+= LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							LocalUpdatedCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		+= LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
		
							LocalIsAToCodeBlock					= 0
							if (RecurringJournalEncumbranceRel exists)
								invoke Update RecurringJournalEncumbranceRel
									invoked.FinanceCodeBlock				= FrTransactionCodeBlock
									invoked.TransactionDate					= TransactionDate
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= FromDimensionCode
									invoked.TransactionAmount				= (LocalCurrencyAmount.TransactionAmount * -1)
									invoked.UnitsAmount						= (LocalUnitsAmount * -1)
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
							
								LocalIsAToCodeBlock					= 1
								invoke Update RecurringJournalEncumbranceRel
									invoked.FinanceCodeBlock				= ToTransactionCodeBlock
									invoked.TransactionDate					= TransactionDate
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= ToDimensionCode
									invoked.TransactionAmount				= LocalCurrencyAmount.TransactionAmount
									invoked.UnitsAmount						= LocalUnitsAmount
									invoked.ReportCurrencyAmount			= LocalBalanceCurrencyAmount
									initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							else
								invoke Create RecurringJournalEncumbrance
									fill in fields from this instance
									invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
									invoked.AccountingEntity				= AccountingEntity
									invoked.RecurringJournalControl			= RecurringJournalControl
									invoked.GeneralLedgerClosePeriod		= LocalClosePeriod
									invoked.FinanceCodeBlock				= FrTransactionCodeBlock
									invoked.RecurringJournalEncumbrance.IsAToCodeBlock	= 0
									invoked.RecurringJournalEncumbrance.SequenceNumber	= RecurringJournalBridge
									invoked.TransactionDate					= TransactionDate
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= FromDimensionCode
									invoked.TransactionAmount				= (LocalCurrencyAmount.TransactionAmount * -1)
									invoked.UnitsAmount						= (LocalUnitsAmount * -1)
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
	
								invoke Create RecurringJournalEncumbrance
									fill in fields from this instance
									invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
									invoked.AccountingEntity				= AccountingEntity
									invoked.RecurringJournalControl			= RecurringJournalControl
									invoked.GeneralLedgerClosePeriod		= LocalClosePeriod
									invoked.FinanceCodeBlock				= ToTransactionCodeBlock
									invoked.RecurringJournalEncumbrance.IsAToCodeBlock	= 1
									invoked.RecurringJournalEncumbrance.SequenceNumber	= RecurringJournalBridge
									invoked.TransactionDate					= TransactionDate
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= ToDimensionCode
									invoked.TransactionAmount				= LocalCurrencyAmount.TransactionAmount
									invoked.UnitsAmount						= LocalUnitsAmount
									invoked.ReportCurrencyAmount			= LocalBalanceCurrencyAmount
									initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
									
									
