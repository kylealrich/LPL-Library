IntercompanyBillingSettlementHeader is a BusinessClass
	owned by intercobilling
	prefix is ICBSH
	sql name is "ICBSettlementHeader"

	Ontology
		symbolic key is IntercompanyBillingSettlementHeader

	Patterns
		enable explicit context override
		implements StaticJava
		disable AuditIndex

	Persistent Fields
		ReceivableCompany
			disable surrogates
		ReceivableCashCode				is a CashCode
		ReceivableCompanyCashCode		is a CompanyCashCode
		ReceivableBankTransactionCode	is a BankTransactionCode
		ReceivablePaymentHeader
		PaymentAmount					is a CurrencyAmount
		PaymentDate						is an ExchangeDate
		PostDate						is Date
		SettlementCurrency				is a FromCurrency
		Status							is Numeric 1
			States
				Unreleased			value is 0
				Released			value is 4
				Interfaced			value is 6
				PendingReversal		value is 7		
				Reversed			value is 8		

		CashLedgerSourceRecord
		CashLedgerPayablesPayment				
			context of IntercompanyBillingSettlementHeader.PayablesCashCode
		PayableCurrencyInfo
		ReceivableCurrencyInfo
		ReversalDate					is an ExchangeDate  

	Field Rules
		ReceivableCompany
			required

			constraint (ReceivableCompany.IsValidForIntercompanyBillingSettlement)
				"ReceivableCompanyNotValidForIntercompanyBillingSettlement;TheReceivableCompanyAndItsAssociatedPayablesCompanyMustBeSetupWithDefaultsForIntercompanyBilling"

			constraint (ReceivableCompany != IntercompanyBillingSettlementHeader.PayablesCompany)
				"PayableAnd_ReceivableCompanyCannotBeTheSame"

		ReceivableCashCode
			initial value is ReceivableCompany.ICBillingDefaultCashCode
			default to ReceivableCompany.ICBillingDefaultCashCode

		ReceivableCompanyCashCode
			required

		ReceivableBankTransactionCode
			initial value is ReceivableCompany.ICBillingDefaultBankTransactionCode
			default to ReceivableCompany.ICBillingDefaultBankTransactionCode

			required

			constraint (ReceivableBankTransactionCode.BankTransactionType.BankService)
				"ReceivableBankTransactionCodeMustBeBankServiceType"
			constraint (ReceivableBankTransactionCode.TransactionType.CreditTransaction)
				"ReceivableBankTransactionCodeMustBeCreditTransactionType"

		PaymentAmount
			constraint (PaymentAmount > 0)
				"PaymentAmountMustBePositive"

		PaymentDate
			default to current corporate date

			if (ReceivableCompany.CompanySystemClosingControlRel.Control)
				constraint (PaymentDate within ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate)
					"PaymentDateIsNotWithinValidEntryDatesForReceivablesCompany<ReceivableCompany>;ValidDateRangeIs<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"

			if (IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.Control)
				constraint (PaymentDate within IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate)
					"PaymentDateIsNotWithinValidEntryDatesForPayablesCompany<IntercompanyBillingSettlementHeader.PayablesCompany>;ValidDateRangeIs<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"

		PostDate
			default to PaymentDate
			if (PaymentDate entered)
				PostDate = PaymentDate

		SettlementCurrency
			initial value is IntercompanyBillingSettlementHeader.PayablesCashCode.Currency
			default to IntercompanyBillingSettlementHeader.PayablesCashCode.Currency

	Local Fields
		LocalReceivablePayment					is a ReceivablePayment view
		LocalCashLedgerTransaction				is a CashLedgerTransaction view
		LocalSequenceNumber						is a SequenceNumber
		CurrencyWork							is a CurrencyExchange
		LocalFeeTotal							is an InternationalAmount
		LocalIsRateDefined						is Boolean

		LocalCurrencyTable						is a CurrencyTable
		LocalInvoiceCurrencyCalculationGroup	is a CurrencyCalculationGroup
		LocalCurrencyCalculationGroup			is a CurrencyCalculationGroup
		LocalAlternateCurrencyCalculationGroup	is a CurrencyCalculationGroup
		LocalGainLossAmounts					is a FinanceCurrencyAmount
		LocalSystemAccount						is a SystemAccount
		

		LocalTotalInvoiceAmounts				is a FinanceCurrencyAmount
		LocalDocumentHeader						is an IntercompanyBillingDocumentHeader
		LocalPreviewProrateDistribution			is an IntercompanyBillingSettlementPreviewDistribution
		LocalProrateAR							is Boolean
		LocalProrateGain						is Boolean
		

		LocalDistributionAmount					is a FinanceCurrencyAmountGroup
		LocalSplitRate							is like CurrencyExchangeRate
		LocalSplitAmount						is like InternationalAmount
		

		LocalFunctional							is like InternationalAmount
		LocalAlternate							is like InternationalAmount
		LocalAlternate2							is like InternationalAmount
		LocalAlternate3							is like InternationalAmount
		LocalReport1							is like InternationalAmount
		LocalReport2							is like InternationalAmount
		LocalReport3							is like InternationalAmount
		LocalReport4							is like InternationalAmount
		LocalReport5							is like InternationalAmount
		

		LocalCurrency							is a Currency
		LocalTransactionValidation				is like InternationalAmount
		LocalFunctionalValidation				is like InternationalAmount
		LocalAlternateValidation				is like InternationalAmount
		LocalAlternate2Validation				is like InternationalAmount
		LocalAlternate3Validation				is like InternationalAmount
		LocalReport1Validation					is like InternationalAmount
		LocalReport2Validation					is like InternationalAmount
		LocalReport3Validation					is like InternationalAmount
		LocalReport4Validation					is like InternationalAmount
		LocalReport5Validation					is like InternationalAmount


	Transient Fields
		TransientCreateActor			is an Actor
			derive value from DerivedCreateActor

		TransactionAmount				is a CurrencyAmount
		TransientJournalizeGroup		is like JournalizeGroup

	Derived Fields
		DerivedCreateDate is a DerivedField
			type is TimeStamp
			return (create stamp)

		DerivedCreateActor is a DerivedField
			type is Actor
			return (create stamp.actor)

		DerivedDetailPaymentTotal is a DerivedField
			type is like InternationalAmount
			return (sum IntercompanyBillingSettlementDetail set.PaymentAmount)

		DerivedDetailInvoiceTotal is a DerivedField
			type is like InternationalAmount
			return (sum IntercompanyBillingSettlementDetail set.DocumentPaymentAmount)

		DerivedAvailablePaymentToAllocate is a DerivedField
			type is like InternationalAmount
			return (PaymentAmount - DerivedDetailPaymentTotal)

		BlankField is a DerivedField
			type is Alpha 1
			return blank

		DerivedDetailCurrency is a DerivedField
			type is like Currency
			return (first IntercompanyBillingSettlementDetail set.DocumentCurrency)

		MultiplePaymentMessage is a MessageField
			"**Multiple_Payments-_See_Details"

		JournalizationDescription is a MessageField
			"Intercompany_Billing_Journalization"

		ContextMessageEntityType is a StringField
			type is Alpha 40
			restricted
			"InforIntercompanyBillingSettlement"

		DerivedDocumentName	is a DerivedField
			type is Alpha 100
			return

		ContextMessageText is a MessageField
			restricted
			"<IntercompanyBillingSettlementHeader>"

		RealizedGainAccount is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalSystemAccount = SystemAccount.RealizedGainAndLoss
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.RealizedGain
				return first SystemAccountRel.GeneralLedgerChartAccount

		RealizedLossAccount is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalSystemAccount = SystemAccount.RealizedGainAndLoss
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.RealizedLoss
				return first SystemAccountRel.GeneralLedgerChartAccount

		DerivedStrippedSettlementID is a DerivedField
			type is AlphaUpper 22
			restricted
			return com.lawson.apps.procurement.base.StringUtils.trimLeadingSpaces(IntercompanyBillingSettlementHeader.SettlementID)
				
		DerivedNumberOfDecimals is a DerivedField
			type is Numeric 1
			restricted
			if (LocalCurrency entered)
				return LocalCurrency.NumberOfDecimals
			else
				return 2
					
		DerivedRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (DerivedNumberOfDecimals = 2)
				return .01
			else
			if (DerivedNumberOfDecimals = 0)
				return 1
			else
			if (DerivedNumberOfDecimals = 3)
				return .001
			else
			if (DerivedNumberOfDecimals = 4)
				return .0001

		DerivedPayablesPaymentNotProcessed is a DerivedField
			type is Boolean
			if (CashLedgerPayablesPayment entered
			and !CashLedgerPayablesPayment.Status.PaymentCycleProcessed)
				return true
			else
			if (SettlementDetailPaymentsUnprocessedRel exists)
				return true

		ReversalProcessingMessage is a MessageField
			"ASettlementWillBeReversedOnlyWhenItsRelatedTransactionsAreProcessedThrough_Payables_Payment_Closing,_Receivable_Automatic_Cash_Application,And_Receivable_Application_Close"

		OutOfBalanceAmount is a DerivedField		
			type is like CurrencyAmount
			return (DerivedDetailPaymentTotal - PaymentAmount)

		IntercompanyBillingSettlmentFormTitle is a DerivedField 
			type is Alpha 60
			if (IntercompanyBillingSettlementHeader exists)
				return CreatedDocumentMessage 		 
			else
				return NotCreatedDocumentMessage	

		CreatedDocumentMessage is a LabelField		
			restricted
			"Intercompany_Billing_Settlement_<IntercompanyBillingSettlementHeader.SettlementID>"

		NotCreatedDocumentMessage is a LabelField   
			restricted
			"Intercompany_Billing_Settlement"


	Conditions
		HasDetails
			when (IntercompanyBillingSettlementDetail set exists)

		ReleaseValid
			when (Status.Unreleased
			and   HasDetails)

		ValidInterfaceStatus
			when (Status.Released
			or	Status.Interfaced)

		HasBankFees
			when (IntercompanyBillingSettlementFee set exists)

		HasPayableBankFees
			when (PayableIntercompanyBillingSettlementFeeRel exists)

		HasReceivableBankFees
			when (ReceivableIntercompanyBillingSettlementFeeRel exists)

		DisplaySinglePayablesPayment
			when (Status.Released
			and   !SettlementDetailMultipleCurrencyRel exists
			and   !SettlementDetailMultiplePayGroupRel exists)

		DisplayMultiplePaymentMsg
			when (Status.Released
			and  (SettlementDetailMultipleCurrencyRel exists
			or	SettlementDetailMultiplePayGroupRel exists))

		PayableCurrencyNotSettlementCurrency
			when (!IntercompanyBillingSettlementHeader.PayablesCompany.Currency = SettlementCurrency)

		ReceivableCurrencyNotSettlementCurrency
			when (!ReceivableCompany.Currency = SettlementCurrency)

		HasPreviewDistributions
			restricted
			when (IntercompanyBillingSettlementPreviewDistributionRel exists)

		StatusIsPendingReversalOrReversed
			when (Status.PendingReversal
			or Status.Reversed)

		AnyPendingReversalSettlementsExist
			when (any Status.PendingReversal)

		AllocatePaymentValid
			when (Status.Unreleased
			and   PaymentAmount entered
			and   HasDetails)

		RecordExists		
			restricted
			when (IntercompanyBillingSettlementHeader exists)

		AllowSelectDistributionSet 
			when (ReceivableCompany.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
			and   ReceivableCompany.SelectFundDistributionSet)

		OutOfBalance		
			restricted
			when (PaymentAmount != DerivedDetailPaymentTotal)

		BypassReleasedSelectionsValidation
			restricted
			when (config.ICBSettlementBypassReleasedSelectionsValidation = true)

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank or PayCompanySecurityGroupMemberRel exists)


		CashLedgerPayablesPaymentCbtransRelIsOpen	
			when (CashLedgerPayablesPayment.CbtransRel.IsOpen)	


	Relations

		UnsettledBillingDocumentRel
			one-to-many relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByPayableReceivableCompanies
				related.IntercompanyBillingGroup	= IntercompanyBillingGroup
				related.PayableEntity.Company		= IntercompanyBillingSettlementHeader.PayablesCompany
				related.ReceivableEntity.Company	= ReceivableCompany
				related.Status						= 4 
			Instance Selection
				where (related.HasUnsettledAmount
				and !related.AutoApplyInProgress) 


		SettledDocumentHeaderRel		
			one-to-many relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByPayableReceivableCompanies
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.PayableEntity.Company				= IntercompanyBillingSettlementHeader.PayablesCompany
				related.ReceivableEntity.Company			= ReceivableCompany
				related.Status								= 6 
				related.IntercompanyBillingDocumentHeader	= SettlementDetailRel.IntercompanyBillingDocumentHeader

		ReceivablePaymentRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company			= ReceivableCompany
				related.Customer		= IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
				related.TypeOfPayment	= "P" 
				related.PaymentNumber	= IntercompanyBillingSettlementHeader.SettlementID

		SettlementDetailRel is a IntercompanyBillingSettlementDetail set		

		SettlementDetailCurrencyDiffRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.CurrencyDifferentFromHeader)

		SettlementDetailMultipleCurrencyRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.OtherDetailsHaveDifferentCurrency)

		SettlementDetailMultiplePayGroupRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.OtherDetailsHaveDifferentPayGroup)

		SettlementDetailCashBasisRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.DocumentHasCashBasisWithholdings)

		SettlementDetailWithholdingAmountRel is a IntercompanyBillingSettlementDetail set		
			Instance Selection
				where (related.DocumentHasWithholdings)

		SettlementDetailHasNoPaymentRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.HasNoPayment)

		SettlementDetailHasInvoiceNotReleasedRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.HasInvoiceNotReleased)

		SettlementDetailFundApplyOutOfBalanceRel is a IntercompanyBillingSettlementDetail set 
			Instance Selection
				where (related.DerivedFundDistributionStatus != 2)

		DetailHasWithholdingAndPartialPayRel is a IntercompanyBillingSettlementDetail set		
			Instance Selection
				where (related.DocumentHasWithholdings
				and	   related.IsPartialPayment)

		SettlementDetailPaymentsUnprocessedRel is a IntercompanyBillingSettlementDetail set
			Instance Selection
				where (related.PayablesPaymentNotProcessed)

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = IntercompanyBillingGroup
				related.GeneralLedgerSystemCode	 = "IB"

		IntercompanyBillingSettlementPreviewDistributionRel
			one-to-many relation to IntercompanyBillingSettlementPreviewDistribution
			Field Mapping uses ByIntercompanyBillingSettlementHeader
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader

		IntercompanyBillingSettlementPreviewReceivableDistributionRel
			one-to-many relation to IntercompanyBillingSettlementPreviewDistribution
			Field Mapping uses ByIntercompanyBillingSettlementHeader
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
			Instance Selection
				where (related.ICBDistributionType.Receivable
				or	   related.ICBDistributionType.ReceivableBankFee)

		IntercompanyBillingSettlementPreviewPayableDistributionRel
			one-to-many relation to IntercompanyBillingSettlementPreviewDistribution
			Field Mapping uses ByIntercompanyBillingSettlementHeader
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
			Instance Selection
				where (related.ICBDistributionType.Payable
				or	   related.ICBDistributionType.Withholding
				or	   related.ICBDistributionType.PayableBankFee)

		ReceivableCompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company		= ReceivableCompany
				related.CashCode	= ReceivableCashCode

		PayablesCompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company		= IntercompanyBillingSettlementHeader.PayablesCompany
				related.CashCode	= IntercompanyBillingSettlementHeader.PayablesCashCode

		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.SystemAccount						= LocalSystemAccount

		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.AccountingUnitStructure				= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= ReceivableCompany.AccountingEntity

		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension1Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim1Structure

		FinanceDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension2Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim2Structure

		FinanceDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension3Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim3Structure

		FinanceDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension4Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim4Structure

		FinanceDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension5Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim5Structure

		FinanceDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension6Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim6Structure

		FinanceDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension7Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim7Structure

		FinanceDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension8Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim8Structure

		FinanceDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension9Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim9Structure

		FinanceDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= IntercompanyBillingGroup
				related.FinanceDimension10Structure			= IntercompanyBillingGroup.FinanceEnterpriseGroup.EnterpriseDim10Structure

		PayablesICBSettlementGLTransactionDetailRel
			one-to-many relation to ICBSettlementGLTransactionDetail
			Field Mapping uses BySettlementHeader
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
			Instance Selection
				where (related.IsPayablesDistribution)

		ReceivablesICBSettlementGLTransactionDetailRel
			one-to-many relation to ICBSettlementGLTransactionDetail
			Field Mapping uses BySettlementHeader
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
			Instance Selection
				where (related.IsReceivablesDistribution)

		PayableIntercompanyBillingSettlementFeeRel is an IntercompanyBillingSettlementFee set
			Instance Selection
				where (related.Type.Payable)

		ReceivableIntercompanyBillingSettlementFeeRel is an IntercompanyBillingSettlementFee set
			Instance Selection
				where (related.Type.Receivable)

		PayableCBCompanySystemClosingControlRel 
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "CB"
				related.Company					= IntercompanyBillingSettlementHeader.PayablesCompany

		ReceivableCBCompanySystemClosingControlRel 
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "CB"
				related.Company					= ReceivableCompany


		ApplicationCloseResultRel	
			one-to-one relation to ApplicationCloseResult
			Field Mapping uses ByCompany
				related.PrmCompany					 = ReceivableCompany
				related.ApplicationCloseResult		 = blank	
				related.FinanceEnterpriseGroup		 = ReceivableCompany.FinanceEnterpriseGroup

		RTMPaymentRel	
			one-to-many relation to RTMPayment
			Field Mapping uses Set6
				related.Company						 = ReceivableCompany
				related.ReceivablePaymentHeader		 = ReceivablePaymentHeader
				related.Customer					 = IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer	
				related.RTMPayment					 = IntercompanyBillingSettlementHeader.SettlementID
			Instance Selection
				where (related.ReturnDate entered)


		PostedApplicationsAvailableToReverseRel	
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		 = ReceivableCompany
				related.CreditTransaction.CreditBatch		 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	 = 1
			Instance Selection
				where (related.PostedCanBeReversed
				and related.CreditTransaction.CreditNumber		 = IntercompanyBillingSettlementHeader.SettlementID)

		ReceivablePaymentApplyReverseDetailRel	
			classic name is ARPMTRVDTL
			one-to-one relation to ReceivablePaymentApplyReverseDetail
			Field Mapping uses symbolic key
				related.ReceivablePaymentApplyReverseDetail.CreditCompany								 =	PostedApplicationsAvailableToReverseRel.CreditTransaction.CreditCompany	
				related.ReceivablePaymentApplyReverseDetail.CreditBatchNumber							 =	PostedApplicationsAvailableToReverseRel.CreditTransaction.CreditBatch	
				related.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence						 =	1	
				related.ReceivablePaymentApplyReverseDetail.CreditApplicationSequence					 =	PostedApplicationsAvailableToReverseRel.CreditAppliedSequence

		ReceivablePaymentApplyReverseHeaderRel	
			one-to-one relation to ReceivablePaymentApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company														 = ReceivableCompany
				related.ReceivablePaymentApplyReverseHeader.CreditBatchNumber		 = ReceivablePaymentHeader
				related.ReceivablePaymentApplyReverseHeader.CreditPaymentSequence	 = first IntercompanyBillingSettlementDetail set.IntercompanyBillingSettlementDetail

		PayCompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= IntercompanyBillingSettlementHeader.PayablesCompany

	Sets
		ByPaymentDate
			Sort Order
				IntercompanyBillingGroup
				PaymentDate
				IntercompanyBillingSettlementHeader.PayablesCompany
				IntercompanyBillingSettlementHeader.PayablesCashCode
				IntercompanyBillingSettlementHeader.PayablesBankTransactionCode
				IntercompanyBillingSettlementHeader.SettlementID

	Rule Blocks

		CreateReceivablePaymentHeader
			invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
				assign result to ReceivablePaymentHeader
				invoked.Company					= ReceivableCompany
				invoked.ReceivableProcessLevel	= ReceivableCompany.ICBillingDefaultProcessLevel
				invoked.CashCode				= ReceivableCashCode
				invoked.CurrencyTable			= ReceivableCurrencyInfo.CurrencyTable
				invoked.Currency				= SettlementCurrency
				invoked.CurrencyRate			= ReceivableCurrencyInfo.CurrencyExchangeRate
				invoked.DepositBankCode			= ReceivableBankTransactionCode
				invoked.BatchCount				= 1
				invoked.BatchTotal				= PaymentAmount
				invoked.DepositDate				= PaymentDate
				invoked.GeneralLedgerDate		= PostDate
				invoked.Origin					= "I"  

			invoke Unreleased.CreateCustomerPayment ReceivablePayment
				assign result to LocalReceivablePayment
				invoked.Company						= ReceivableCompany
				invoked.ReceivablePaymentHeader		= ReceivablePaymentHeader
				invoked.Customer					= IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
				invoked.PaymentNumber				= IntercompanyBillingSettlementHeader.SettlementID
				invoked.TransactionAmount			= PaymentAmount
				invoked.OriginatingICBSettlement	= reference to this instance
				invoked.Origin						= "I"  

		CreatePayablesPaymentHeader
			CashLedgerSourceRecord	= "CHK"
			invoke Create CashLedgerPayablesPayment
				assign result to CashLedgerPayablesPayment
				invoked.VendorGroup										= IntercompanyBillingSettlementHeader.PayablesCompany.VendorGroup
				invoked.PayGroup										= first IntercompanyBillingSettlementDetail set.PayableEntity.PayablesInvoice.PayGroup
				invoked.PaidVendor										= ReceivableCompany.PayablesCompany.ICBillingDefaultVendor
				invoked.CashCode										= IntercompanyBillingSettlementHeader.PayablesCashCode
				invoked.CashLedgerPayablesPayment.BankTransactionCode	= IntercompanyBillingSettlementHeader.PayablesBankTransactionCode
				invoked.TransactionNumber								= IntercompanyBillingSettlementHeader.SettlementID


				invoked.PaymentDate										= PaymentDate
				invoked.PaymentAmount									= DerivedDetailInvoiceTotal
				invoked.BasePaymentAmount.ToCurrency					= IntercompanyBillingSettlementHeader.PayablesCompany.Currency
				invoked.BasePaymentAmount.EnteredCurrencyAmount			= PayableCurrencyInfo.CurrencyAmount
				invoked.BasePaymentAmount.EnteredCurrencyRate			= PayableCurrencyInfo.CurrencyExchangeRate
				invoked.PayablesCompanyProcessLevel.PayablesProcessLevel = first IntercompanyBillingSettlementDetail set.PayableEntity.PayablesInvoice.ProcessLevel
				invoked.PayablesCompanyProcessLevel.PayablesCompany		= IntercompanyBillingSettlementHeader.PayablesCompany
				invoked.RemitToCode										= first IntercompanyBillingSettlementDetail set.PayableEntity.PayablesInvoice.RemitToCode
				invoked.PayCurrency										= DerivedDetailCurrency 
				invoked.CurrencyTable									= PayableCurrencyInfo.CurrencyTable
				invoked.CheckType										= "M"	
				invoked.Status											= 0		

		UpdateCashLedgerPayablesPayment
			invoke Update CashLedgerPayablesPayment		 
				if (invoked.AppliedAmountBankAccountCurrency.TransactionAmount not entered)
					invoked.AppliedAmountBankAccountCurrency.TransactionAmount		= PaymentAmount
					invoked.AppliedAmountBankAccountCurrency.BaseAmount.ToCurrency	= SettlementCurrency
				invoked.ReleasedStatus												= "Y"
				invoked.Status														= 1	

		DoCurrencyWork
			if (IntercompanyBillingSettlementHeader.PayablesCompany.Currency = SettlementCurrency
			and PayableCurrencyInfo.CurrencyExchangeRate entered)
				constraint (PayableCurrencyInfo.CurrencyExchangeRate = 1)
					"PayableCompanyBaseCurrencyIsTheSameAsSettlementCurrency,TheExchangeRateMustBe1"

			if (Status.Unreleased	
			and action type.Update)	
				if (PaymentDate changed	
				or PayableCurrencyInfo.CurrencyTable changed	
				or ReceivableCurrencyInfo.CurrencyTable changed)	
					constraint (!HasDetails)
						"Intercompany_\Billing_\Settlement_\Header<IntercompanyBillingSettlementHeader.SettlementID>HasDetailRecords.CannotUpdate_Payment_DateOr_Currency_TableWhen_DetailRecordsExists.MustFirstDelete_DetailRecords,ThenUpdate_Payment_DateOr_Currency_Table."
					initialize PayableCurrencyInfo.CurrencyExchangeRate	
					initialize ReceivableCurrencyInfo.CurrencyExchangeRate	

			if (PayableCurrencyInfo.CurrencyExchangeRate not entered)
				initialize CurrencyWork
				LocalCurrencyTable							= PayableCurrencyInfo.CurrencyTable
				TransactionAmount							= PaymentAmount
				CurrencyWork.ToCurrency						= IntercompanyBillingSettlementHeader.PayablesCompany.Currency
				LocalIsRateDefined							= CurrencyWork.IsRateDefined
				PayableCurrencyInfo.CurrencyExchangeRate	= CurrencyWork.OutputCurrencyRate
				PayableCurrencyInfo.CurrencyAmount			= CurrencyWork.OutputCurrencyAmount

			if (ReceivableCompany.Currency = SettlementCurrency
			and ReceivableCurrencyInfo.CurrencyExchangeRate entered)
				constraint (ReceivableCurrencyInfo.CurrencyExchangeRate = 1)
					"ReceivableCompanyBaseCurrencyIsTheSameAsSettlementCurrency,TheExchangeRateMustBe1"

			if (ReceivableCurrencyInfo.CurrencyExchangeRate not entered)
				initialize CurrencyWork
				LocalCurrencyTable							= ReceivableCurrencyInfo.CurrencyTable
				TransactionAmount							= PaymentAmount
				CurrencyWork.ToCurrency						= ReceivableCompany.Currency
				LocalIsRateDefined							= CurrencyWork.IsRateDefined
				ReceivableCurrencyInfo.CurrencyExchangeRate	= CurrencyWork.OutputCurrencyRate
				ReceivableCurrencyInfo.CurrencyAmount		= CurrencyWork.OutputCurrencyAmount
			
			if (PaymentAmount changed
			or  PayableCurrencyInfo.CurrencyExchangeRate changed)
				initialize CurrencyWork
				LocalCurrencyTable					= PayableCurrencyInfo.CurrencyTable
				TransactionAmount					= PaymentAmount
				CurrencyWork.ToCurrency				= IntercompanyBillingSettlementHeader.PayablesCompany.Currency
				CurrencyWork.EnteredCurrencyRate	= PayableCurrencyInfo.CurrencyExchangeRate
				PayableCurrencyInfo.CurrencyAmount	= CurrencyWork.OutputCurrencyAmount

			if (PaymentAmount changed
			or  ReceivableCurrencyInfo.CurrencyExchangeRate changed)
				initialize CurrencyWork
				LocalCurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
				TransactionAmount						= PaymentAmount
				CurrencyWork.ToCurrency					= ReceivableCompany.Currency
				CurrencyWork.EnteredCurrencyRate		= ReceivableCurrencyInfo.CurrencyExchangeRate
				ReceivableCurrencyInfo.CurrencyAmount	= CurrencyWork.OutputCurrencyAmount



		UpdateIntercompanyBillingSettlementHeaderStatusToPendingReversalRuleBlock
			invoke UpdateIntercompanyBillingSettlementHeaderStatusToPendingReversal

		ReverseAllInvoiceApplicationsIfCreditMemoApplicationsExistRuleBlock 
			if (first ReceivablePaymentRel.PostedCreditTransactionApplicationsAvailableToReverseRel exists) 
				invoke CreateAndReverseAll ReceivablePaymentRel
					invoked.ReversalDate				= PrmPostDate
					invoked.NoCreditMemos				= true

				invoke ReleaseReversalForIntercompanySettlementReversal ReceivablePaymentRel
	   

		CreateAndReverseAllReceivablePaymentRelRuleBlock
			invoke CreateAndReverseAll ReceivablePaymentRel														
				invoked.ReversalDate				= PrmPostDate


		ReleaseReversalReceivablePaymentRelRuleBlock
			invoke ReleaseReversalForIntercompanySettlementReversal ReceivablePaymentRel	

		CreateRTMPaymentRuleBlock
			invoke CreateFromICBSettlementReversal RTMPayment 
				invoked.Company					 = ReceivableCompany
				invoked.Customer				 = IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
				invoked.RTMPayment				 = IntercompanyBillingSettlementHeader.SettlementID
				invoked.ReceivablePaymentHeader	 = ReceivablePaymentHeader
				invoked.ReturnDate				 = ReversalDate
				invoked.GeneralLedgerDate		 = PrmPostDate	

		UnreleasedReleaseRTMPaymentRelRuleBlock
			invoke UnreleasedRtm.Release RTMPaymentRel															

		OpenVoidPayablesCashLedgerTransactionRuleBlock
			if (CashLedgerPayablesPayment entered)
				if (!CashLedgerPayablesPaymentCbtransRelIsOpen)
					constraint (CashLedgerPayablesPaymentCbtransRelIsOpen)	
						"Cash_Ledger_Transaction:_Transaction_Identifier<CashLedgerPayablesPayment.CbtransRel.CashLedgerTransactionIdentifier>,_Cash_Code<CashLedgerPayablesPayment.CashCode>,_Bank_Transaction_Code<CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.BankTransactionCode>,_Transaction_Number<CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.TransactionNumber>_IsInA<CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.Status>StatusAndNotInAn_OpenStatus.InOrderToReverseThis_Intercompany_Billing_Settlement,PleaseUpdateTheStatusOnThis_Cash_Ledger_TransactionToAn_OpenStatus."	
				else
					invoke Open.Void CashLedgerPayablesPayment.CbtransRel												
						invoked.PrmReconcileDate			= PrmPostDate
						invoked.PrmCommentText				= PrmComment
			else
				for each SettlementDetailRel
					if (each.HasPayablesPayment)
						constraint (each.CashLedgerPayablesPaymentCbtransRelIsOpen)
							"Cash_Ledger_Transaction:_Transaction_Identifier<each.CashLedgerPayablesPayment.CbtransRel.CashLedgerTransactionIdentifier>,_Cash_Code<each.CashLedgerPayablesPayment.CashCode>,_Bank_Transaction_Code<each.CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.BankTransactionCode>,_Transaction_Number<each.CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.TransactionNumber>_IsInA<each.CashLedgerPayablesPayment.CbtransRel.CashLedgerTransaction.Status>StatusAndNotInAn_OpenStatus.InOrderToReverseThis_Intercompany_Billing_Settlement,PleaseUpdateTheStatusOnThis_Cash_Ledger_TransactionToAn_OpenStatus."	

				for each SettlementDetailRel
					if (each.HasPayablesPayment
					and each.CashLedgerPayablesPayment.CbtransRel.Status.Open)
						invoke Open.Void each.CashLedgerPayablesPayment.CbtransRel												
							invoked.PrmReconcileDate			= PrmPostDate
							invoked.PrmCommentText				= PrmComment


		PaymentVoidStopPayUpdateRuleBlock
			if (CashLedgerPayablesPayment entered)
				invoke PaymentVoidStopPayUpdate PaymentVoidStopPayUpdate 
					invoked.VendorGroup					= IntercompanyBillingSettlementHeader.PayablesCompany.VendorGroup
					invoked.PayGroup					= CashLedgerPayablesPayment.CbtransRel.PayGroup
					invoked.CashCode					= IntercompanyBillingSettlementHeader.PayablesCashCode
					invoked.CheckNum					= IntercompanyBillingSettlementHeader.SettlementID
					invoked.PaymentCode					= IntercompanyBillingSettlementHeader.PayablesBankTransactionCode
					invoked.UpdateOption				= "Y"
			else
				for each distinct PayGroup in SettlementDetailRel
					invoke PaymentVoidStopPayUpdate PaymentVoidStopPayUpdate 
						invoked.VendorGroup					= IntercompanyBillingSettlementHeader.PayablesCompany.VendorGroup
						invoked.PayGroup					= each.PayGroup
						invoked.CashCode					= IntercompanyBillingSettlementHeader.PayablesCashCode
						invoked.CheckNum					= IntercompanyBillingSettlementHeader.SettlementID
						invoked.PaymentCode					= IntercompanyBillingSettlementHeader.PayablesBankTransactionCode
						invoked.UpdateOption				= "Y"


		ReverseBankFeesRuleBlock
			invoke ReverseBankFees IntercompanyBillingSettlementFee											
				invoked.PrmIntercompanyBillingGroup				= IntercompanyBillingGroup
				invoked.PrmIntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
				invoked.PrmReversalDate							= PrmPostDate

		ReverseSettledStatusSettledDocumentHeaderRelRuleBlock
			for each IntercompanyBillingSettlementDetail set										
				invoke ReverseSettledStatus each.IntercompanyBillingDocumentHeader										
					invoked.PrmJournalizeGroup			= TransientJournalizeGroup
					invoked.PrmSettlementAmount			= each.DocumentPaymentAmount

		InitiateJournalizeForRunGroupFinanceEnterpriseGroupRuleBlock
			invoke InitiateJournalizeForRunGroup LocalFinanceEnterpriseGroup
				invoked.PrmJournalizeGroup				= TransientJournalizeGroup
				invoked.PrmJournalizeGroupDescription	= JournalizationDescription

		UpdateIntercompanyBillingSettlementHeaderStatusToReversedRuleBlock
			invoke UpdateIntercompanyBillingSettlementHeaderStatusToReversed



		CreateAndReverseAllReceivablePaymentRelBackgroundGroupImplicit
			invoke CreateAndReverseAll ReceivablePaymentRel														
				run outside of action background group
				run after current action background group
				invoked.ReversalDate				= PrmPostDate

		CreateReceivablePaymentApplyReverseHeaderBackgroundGroupImplicit
			invoke Create ReceivablePaymentApplyReverseHeader
				run outside of action background group
				run after current action background group
				invoked.Company														 = ReceivableCompany
				invoked.ReceivablePaymentApplyReverseHeader.CreditBatchNumber		 = ReceivablePaymentHeader
				invoked.ReceivablePaymentApplyReverseHeader.CreditPaymentSequence	 = 1
				invoked.CreditCustomer												 = IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
				invoked.CreditTransactionNumber										 = IntercompanyBillingSettlementHeader.SettlementID
				invoked.GeneralLedgerDate											 = ReversalDate

		CreateReceivablePaymentApplyReverseDetailBackgroundGroupImplicit
			invoke Create ReceivablePaymentApplyReverseDetail
				run outside of action background group
				run after current action background group
				invoked.ReceivablePaymentApplyReverseDetail.CreditCompany				= PostedApplicationsAvailableToReverseRel.CreditTransaction.CreditCompany
				invoked.ReceivablePaymentApplyReverseDetail.CreditBatchNumber			= PostedApplicationsAvailableToReverseRel.CreditTransaction.CreditBatch
				invoked.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence		= PostedApplicationsAvailableToReverseRel.CreditTransaction.CreditSequence
				invoked.ReceivablePaymentApplyReverseDetail.CreditApplicationSequence	= PostedApplicationsAvailableToReverseRel.CreditAppliedSequence
				invoked.Company															= ReceivableCompany 
				invoked.TransactionType													= PostedApplicationsAvailableToReverseRel.ReceivableApplication.TransType
				invoked.Invoice															= PostedApplicationsAvailableToReverseRel.ReceivableApplication.Invoice
				invoked.PaymentSequence													= PostedApplicationsAvailableToReverseRel.ReceivableApplication.PaymentSeq
				invoked.BatchNumber														= PostedApplicationsAvailableToReverseRel.ReceivableApplication.BatchNumber
				invoked.ApplicationSequence												= PostedApplicationsAvailableToReverseRel.ReceivableApplication.ApplicationSequence

		ReleaseReceivablePaymentApplyReverseHeaderBackgroundGroupImplicit
			invoke Release ReceivablePaymentApplyReverseHeaderRel
				run outside of action background group
				run after current action background group

		UnreleasedCreateRTMPaymentRuleBlockBackgroundGroupImplicit
			invoke UnreleasedRtm.Create RTMPayment
				run outside of action background group
				run after current action background group
				invoked.Company					 = ReceivableCompany
				invoked.Customer				 = IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
				invoked.RTMPayment				 = IntercompanyBillingSettlementHeader.SettlementID
				invoked.ReceivablePaymentHeader	 = ReceivablePaymentHeader
				invoked.ReturnDate				 = ReversalDate

		UnreleasedReleaseRTMPaymentRelBackgroundGroupImplicit
			invoke UnreleasedRtm.Release RTMPaymentRel															
				run outside of action background group
				run after current action background group

		OpenVoidPayablesCashLedgerTransactionRuleBlockImplicit
			invoke Open.Void CashLedgerPayablesPayment.CbtransRel												
				run outside of action background group
				run after current action background group
				invoked.PrmReconcileDate			= PrmPostDate
				invoked.PrmCommentText				= PrmComment

		PaymentVoidStopPayUpdateRuleBlockImplicit
			invoke PaymentVoidStopPayUpdate PaymentVoidStopPayUpdate											
				run outside of action background group
				run after current action background group
				invoked.VendorGroup					= IntercompanyBillingSettlementHeader.PayablesCompany.VendorGroup
				invoked.PayGroup					= CashLedgerPayablesPayment.CbtransRel.PayGroup
				invoked.CashCode					= IntercompanyBillingSettlementHeader.PayablesCashCode
				invoked.CheckNum					= IntercompanyBillingSettlementHeader.SettlementID
				invoked.PaymentCode					= IntercompanyBillingSettlementHeader.PayablesBankTransactionCode
				invoked.UpdateOption				= "Y"

		ReverseBankFeesRuleBlockImplicit
			invoke ReverseBankFees IntercompanyBillingSettlementFee											
				run outside of action background group
				run after current action background group
				invoked.PrmIntercompanyBillingGroup				= IntercompanyBillingGroup
				invoked.PrmIntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
				invoked.PrmReversalDate							= PrmPostDate

		ReverseSettledStatusSettledDocumentHeaderRelRuleBlockImplicit									
			invoke ReverseSettledStatus SettledDocumentHeaderRel										
				run outside of action background group
				run after current action background group
				invoked.PrmJournalizeGroup			= TransientJournalizeGroup

		InitiateJournalizeForRunGroupFinanceEnterpriseGroupRuleBlockImplicit
			invoke InitiateJournalizeForRunGroup LocalFinanceEnterpriseGroup
				run outside of action background group
				run after current action background group
				invoked.PrmJournalizeGroup				= TransientJournalizeGroup
				invoked.PrmJournalizeGroupDescription	= JournalizationDescription

		UpdateIntercompanyBillingSettlementHeaderStatusToReversedRuleBlockImplicit
			invoke UpdateIntercompanyBillingSettlementHeaderStatusToReversed
				run outside of action background group
				run after current action background group
				
		CalculateProratedAmounts
			if (LocalProrateGain)
				if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.FunctionalCurrency
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
					
					LocalSplitAmount = LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.FunctionalAmount.EnteredCurrencyAmount
					LocalFunctional = LocalSplitAmount * LocalSplitRate
					round LocalFunctional to nearest DerivedRoundTo
					
					LocalFunctionalValidation += LocalFunctional
				else
					initialize LocalFunctional
				
				if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount > 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount.EnteredCurrencyAmount
					LocalAlternate = LocalSplitAmount * LocalSplitRate
					round LocalAlternate to nearest DerivedRoundTo
					
					LocalAlternateValidation += LocalAlternate
				else
					initialize LocalAlternate
				
				if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount > 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency2
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount2.EnteredCurrencyAmount
					LocalAlternate2 = LocalSplitAmount * LocalSplitRate
					round LocalAlternate2 to nearest DerivedRoundTo
					
					LocalAlternate2Validation += LocalAlternate2
				else
					initialize LocalAlternate2
				
				if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount > 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency3
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount3.EnteredCurrencyAmount
					LocalAlternate3 = LocalSplitAmount * LocalSplitRate
					round LocalAlternate3 to nearest DerivedRoundTo
					
					LocalAlternate3Validation += LocalAlternate3
				else
					initialize LocalAlternate3
				
				if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount > 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount1.EnteredCurrencyAmount
					LocalReport1 = LocalSplitAmount * LocalSplitRate
					round LocalReport1 to nearest DerivedRoundTo
					
					LocalReport1Validation += LocalReport1
				else
					initialize LocalReport1
				
				if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount > 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount2.EnteredCurrencyAmount
					LocalReport2 = LocalSplitAmount * LocalSplitRate
					round LocalReport2 to nearest DerivedRoundTo
					
					LocalReport2Validation += LocalReport2
				else
					initialize LocalReport2
				
				if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount > 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount3.EnteredCurrencyAmount
					LocalReport3 = LocalSplitAmount * LocalSplitRate
					round LocalReport3 to nearest DerivedRoundTo
					
					LocalReport3Validation += LocalReport3
				else
					initialize LocalReport3
				
				if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount > 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount4.EnteredCurrencyAmount
					LocalReport4 = LocalSplitAmount * LocalSplitRate
					round LocalReport4 to nearest DerivedRoundTo
					
					LocalReport4Validation += LocalReport4
				else
					initialize LocalReport4
				
				if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount > 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFive
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount5.EnteredCurrencyAmount
					LocalReport5 = LocalSplitAmount * LocalSplitRate
					round LocalReport5 to nearest DerivedRoundTo
					
					LocalReport5Validation += LocalReport5
				else
					initialize LocalReport5
			else
				if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount < 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.FunctionalCurrency
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
					
					LocalSplitAmount = LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.FunctionalAmount.EnteredCurrencyAmount
					LocalFunctional = LocalSplitAmount * LocalSplitRate
					round LocalFunctional to nearest DerivedRoundTo
					
					LocalFunctionalValidation += LocalFunctional
				else
					initialize LocalFunctional
				
				if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount < 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount.EnteredCurrencyAmount
					LocalAlternate = LocalSplitAmount * LocalSplitRate
					round LocalAlternate to nearest DerivedRoundTo
					
					LocalAlternateValidation += LocalAlternate
				else
					initialize LocalAlternate
				
				if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount < 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency2
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount2.EnteredCurrencyAmount
					LocalAlternate2 = LocalSplitAmount * LocalSplitRate
					round LocalAlternate2 to nearest DerivedRoundTo
					
					LocalAlternate2Validation += LocalAlternate2
				else
					initialize LocalAlternate2
				
				if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount < 0)
					if (LocalProrateAR)
						LocalCurrency = ReceivableCompany.AccountingEntity.AlternateCurrency3
					else
						LocalCurrency = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
					
					LocalSplitAmount = LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.AlternateAmount3.EnteredCurrencyAmount
					LocalAlternate3 = LocalSplitAmount * LocalSplitRate
					round LocalAlternate3 to nearest DerivedRoundTo
					
					LocalAlternate3Validation += LocalAlternate3
				else
					initialize LocalAlternate3
				
				if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount < 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount1.EnteredCurrencyAmount
					LocalReport1 = LocalSplitAmount * LocalSplitRate
					round LocalReport1 to nearest DerivedRoundTo
					
					LocalReport1Validation += LocalReport1
				else
					initialize LocalReport1
				
				if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount < 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount2.EnteredCurrencyAmount
					LocalReport2 = LocalSplitAmount * LocalSplitRate
					round LocalReport2 to nearest DerivedRoundTo
					
					LocalReport2Validation += LocalReport2
				else
					initialize LocalReport2
				
				if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount < 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount3.EnteredCurrencyAmount
					LocalReport3 = LocalSplitAmount * LocalSplitRate
					round LocalReport3 to nearest DerivedRoundTo
					
					LocalReport3Validation += LocalReport3
				else
					initialize LocalReport3
				
				if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount < 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount4.EnteredCurrencyAmount
					LocalReport4 = LocalSplitAmount * LocalSplitRate
					round LocalReport4 to nearest DerivedRoundTo
					
					LocalReport4Validation += LocalReport4
				else
					initialize LocalReport4
				
				if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount < 0)
					LocalCurrency = IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFive
					LocalSplitAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
					LocalSplitRate = LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount / LocalTotalInvoiceAmounts.ReportAmount5.EnteredCurrencyAmount
					LocalReport5 = LocalSplitAmount * LocalSplitRate
					round LocalReport5 to nearest DerivedRoundTo
					
					LocalReport5Validation += LocalReport5
				else
					initialize LocalReport5
		
			initialize LocalCurrency
			initialize LocalDistributionAmount
		
		AdjustProratedDistributionSameCurrency
			if (LocalFunctionalValidation entered)
				LocalFunctionalValidation	-= (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1)
			if (LocalAlternateValidation entered)
				LocalAlternateValidation	-= (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1)
			if (LocalAlternate2Validation entered)
				LocalAlternate2Validation	-= (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1)
			if (LocalAlternate3Validation entered)
				LocalAlternate3Validation	-= (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1)
			if (LocalReport1Validation entered)
				LocalReport1Validation		-= (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1)
			if (LocalReport2Validation entered)
				LocalReport2Validation		-= (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1)
			if (LocalReport3Validation entered)
				LocalReport3Validation		-= (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1)
			if (LocalReport4Validation entered)
				LocalReport4Validation		-= (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1)
			if (LocalReport5Validation entered)
				LocalReport5Validation		-= (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1)
			
			if (LocalFunctionalValidation entered
			or  LocalAlternateValidation entered
			or  LocalAlternate2Validation entered
			or  LocalAlternate3Validation entered
			or  LocalReport1Validation entered
			or  LocalReport2Validation entered
			or  LocalReport3Validation entered
			or  LocalReport4Validation entered
			or  LocalReport5Validation entered)
				invoke AdjustRoundedAmount LocalPreviewProrateDistribution
					invoked.PrmAmountsAdjustment.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalValidation
					invoked.PrmAmountsAdjustment.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateValidation
					invoked.PrmAmountsAdjustment.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2Validation
					invoked.PrmAmountsAdjustment.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3Validation
					invoked.PrmAmountsAdjustment.ReportAmount1.EnteredCurrencyAmount	= LocalReport1Validation
					invoked.PrmAmountsAdjustment.ReportAmount2.EnteredCurrencyAmount	= LocalReport2Validation
					invoked.PrmAmountsAdjustment.ReportAmount3.EnteredCurrencyAmount	= LocalReport3Validation
					invoked.PrmAmountsAdjustment.ReportAmount4.EnteredCurrencyAmount	= LocalReport4Validation
					invoked.PrmAmountsAdjustment.ReportAmount5.EnteredCurrencyAmount	= LocalReport5Validation
			
			initialize LocalPreviewProrateDistribution
			initialize LocalCurrency
			initialize LocalFunctionalValidation
			initialize LocalAlternateValidation
			initialize LocalAlternate2Validation
			initialize LocalAlternate3Validation
			initialize LocalReport1Validation
			initialize LocalReport2Validation
			initialize LocalReport3Validation
			initialize LocalReport4Validation
			initialize LocalReport5Validation
			
		AdjustProratedDistributionDifferentCurrency
			if (LocalTransactionValidation entered)
				LocalTransactionValidation		-= LocalCurrencyCalculationGroup.CurrencyAmount
				if (LocalProrateAR)
					LocalTransactionValidation	= LocalTransactionValidation * -1
			if (LocalFunctionalValidation entered)
				LocalFunctionalValidation		-= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalFunctionalValidation	= LocalFunctionalValidation * -1
			if (LocalAlternateValidation entered)
				LocalAlternateValidation		-= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalAlternateValidation	= LocalAlternateValidation * -1
			if (LocalAlternate2Validation entered)
				LocalAlternate2Validation		-= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalAlternate2Validation	= LocalAlternate2Validation * -1
			if (LocalAlternate3Validation entered)
				LocalAlternate3Validation		-= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalAlternate3Validation	= LocalAlternate3Validation * -1
			if (LocalReport1Validation entered)
				LocalReport1Validation			-= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalReport1Validation		= LocalReport1Validation * -1
			if (LocalReport2Validation entered)
				LocalReport2Validation			-= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalReport2Validation		= LocalReport2Validation * -1
			if (LocalReport3Validation entered)
				LocalReport3Validation			-= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalReport3Validation		= LocalReport3Validation * -1
			if (LocalReport4Validation entered)
				LocalReport4Validation			-= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalReport4Validation		= LocalReport4Validation * -1
			if (LocalReport5Validation entered)
				LocalReport5Validation			-= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				if (LocalProrateAR)
					LocalReport5Validation		= LocalReport5Validation * -1
			
			if (LocalTransactionValidation entered
			or  LocalFunctionalValidation entered
			or  LocalAlternateValidation entered
			or  LocalAlternate2Validation entered
			or  LocalAlternate3Validation entered
			or  LocalReport1Validation entered
			or  LocalReport2Validation entered
			or  LocalReport3Validation entered
			or  LocalReport4Validation entered
			or  LocalReport5Validation entered)
				invoke AdjustRoundedAmount LocalPreviewProrateDistribution
					invoked.PrmTransactionAmount										= LocalTransactionValidation
					invoked.PrmAmountsAdjustment.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalValidation
					invoked.PrmAmountsAdjustment.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateValidation
					invoked.PrmAmountsAdjustment.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2Validation
					invoked.PrmAmountsAdjustment.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3Validation
					invoked.PrmAmountsAdjustment.ReportAmount1.EnteredCurrencyAmount	= LocalReport1Validation
					invoked.PrmAmountsAdjustment.ReportAmount2.EnteredCurrencyAmount	= LocalReport2Validation
					invoked.PrmAmountsAdjustment.ReportAmount3.EnteredCurrencyAmount	= LocalReport3Validation
					invoked.PrmAmountsAdjustment.ReportAmount4.EnteredCurrencyAmount	= LocalReport4Validation
					invoked.PrmAmountsAdjustment.ReportAmount5.EnteredCurrencyAmount	= LocalReport5Validation
			
			initialize LocalPreviewProrateDistribution
			initialize LocalTransactionValidation
			initialize LocalFunctionalValidation
			initialize LocalAlternateValidation
			initialize LocalAlternate2Validation
			initialize LocalAlternate3Validation
			initialize LocalReport1Validation
			initialize LocalReport2Validation
			initialize LocalReport3Validation
			initialize LocalReport4Validation
			initialize LocalReport5Validation

	Actions

		Create is a Create Action
			Action Rules
				if (PayableCurrencyInfo.CurrencyTable not entered)
					PayableCurrencyInfo.CurrencyTable = IntercompanyBillingSettlementHeader.PayablesCompany.DerivedCurrencyTable

				if (ReceivableCurrencyInfo.CurrencyTable not entered)
					ReceivableCurrencyInfo.CurrencyTable = ReceivableCompany.DerivedCurrencyTable

			Exit Rules
				include DoCurrencyWork

				constraint (IntercompanyBillingSettlementHeader.SettlementID = DerivedStrippedSettlementID)
					"Settlement_\IDCannotContainLeadingSpaces"

		Update is an Update Action
			valid when (Status.Unreleased)
			Action Rules
				if (PayableCurrencyInfo.CurrencyTable not entered)
					PayableCurrencyInfo.CurrencyTable = IntercompanyBillingSettlementHeader.PayablesCompany.DerivedCurrencyTable

				if (ReceivableCurrencyInfo.CurrencyTable not entered)
					ReceivableCurrencyInfo.CurrencyTable = ReceivableCompany.DerivedCurrencyTable

			Exit Rules
				include DoCurrencyWork

				if (ReceivableCashCode changed)
					invoke UpdateReceivableCurrency ReceivableIntercompanyBillingSettlementFeeRel
						invoked.PrmCashCode = ReceivableCashCode
						invoked.PrmCurrency = ReceivableCashCode.Currency

		Delete is a Delete Action
			valid when (Status.Unreleased)
			Action Rules
				for each IntercompanyBillingSettlementPreviewDistributionRel
					invoke Delete each

		PreviewDistributions is an Instance Action
			default label is "GenerateDistributionsPreview"
			valid when (ReleaseValid)
			Local Fields
				LocalPayablesAccrualAccount			is a TransactionCodeBlock
				LocalPreviewAmount					is a CurrencyAmount
			Action Rules
				constraint (PaymentAmount = DerivedDetailPaymentTotal)
					"TotalPaymentOfDetailsDoesNotEqualHeaderTotalPayment"

				for each IntercompanyBillingSettlementPreviewDistributionRel
					invoke Delete each
				

				invoke Create IntercompanyBillingSettlementPreviewDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
					invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
					invoked.Description							= "Cash entry"
					invoked.FinanceCodeBlock					= ReceivableCompanyCashCodeRel.CashAccount
					invoked.TransactionDate						= PaymentDate
					invoked.PostingDate							= PostDate
					invoked.TransactionAmount					= PaymentAmount
					invoked.CurrencyCode						= SettlementCurrency
					invoked.ICBDistributionType					= 1 
					invoked.Origin								= "RP" 
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCurrencyInfo.CurrencyExchangeRate   
				

				invoke Create IntercompanyBillingSettlementPreviewDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
					invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
					invoked.Description							= "Cash entry - RNA"
					invoked.FinanceCodeBlock					= ReceivableCompany.ICBillingDefaultProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
					invoked.TransactionDate						= PaymentDate
					invoked.PostingDate							= PostDate
					invoked.TransactionAmount					= PaymentAmount*-1
					invoked.CurrencyCode						= SettlementCurrency
					invoked.ICBDistributionType					= 1 
					invoked.Origin								= "RP" 
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCurrencyInfo.CurrencyExchangeRate   
				
				
				for each IntercompanyBillingSettlementFee set

					invoke Create IntercompanyBillingSettlementPreviewDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
						invoked.Description							= each.Description
						invoked.FinanceCodeBlock					= each.Account
						invoked.TransactionDate						= PaymentDate
						invoked.PostingDate							= PostDate
						invoked.TransactionAmount					= each.Amount
						invoked.CurrencyCode						= each.Currency
						if (each.Type.Receivable)
							invoked.ICBDistributionType				= 4 
							invoked.AccountingEntity				= ReceivableCompany.AccountingEntity
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = each.ReceivableExchangeRate   
						else
							invoked.ICBDistributionType				= 3 
							invoked.AccountingEntity				= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = each.PayableExchangeRate   
						

					invoke Create IntercompanyBillingSettlementPreviewDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
						invoked.Description							= each.Description
						invoked.TransactionDate						= PaymentDate
						invoked.PostingDate							= PostDate
						invoked.TransactionAmount					= each.Amount*-1
						invoked.CurrencyCode						= each.Currency
						invoked.CashLedgerDistribRecordType			= "C" 
						if (each.Type.Receivable)
							invoked.ICBDistributionType				= 4 
							invoked.AccountingEntity				= ReceivableCompany.AccountingEntity
							invoked.FinanceCodeBlock				= ReceivableCompanyCashCodeRel.CashAccount
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = each.ReceivableExchangeRate   
						else
							invoked.ICBDistributionType				= 3 
							invoked.AccountingEntity				= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
							invoked.FinanceCodeBlock				= PayablesCompanyCashCodeRel.CashAccount
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = each.PayableExchangeRate   
				
				for each IntercompanyBillingSettlementDetail set
					if (each.IntercompanyBillingDocumentHeader.HasCashBasisWithholdingLines
					and each.DocumentPaymentAmount = each.IntercompanyBillingDocumentHeader.DerivedUnsettledAmount) 
						for each each.IntercompanyBillingDocumentHeader.CashBasisWithholdingDocumentLineRel

							initialize LocalCurrencyTable
							initialize LocalInvoiceCurrencyCalculationGroup
							

							LocalCurrencyTable															= PayableCurrencyInfo.CurrencyTable
							

							LocalInvoiceCurrencyCalculationGroup.CurrencyAmount							= each.WithholdingAmount
							LocalInvoiceCurrencyCalculationGroup.FinanceEnterpriseGroup					= IntercompanyBillingGroup
							LocalInvoiceCurrencyCalculationGroup.ExchangeDate							= each.IntercompanyBillingDocumentHeader.InvoiceDate
							LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							LocalInvoiceCurrencyCalculationGroup.FromCurrency							= each.IntercompanyBillingDocumentHeader.DocumentCurrency
							LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
							LocalInvoiceCurrencyCalculationGroup.AlternateAmount.ToCurrency				= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
							LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
							LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
							LocalInvoiceCurrencyCalculationGroup.ReportAmount1.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyOne
							LocalInvoiceCurrencyCalculationGroup.ReportAmount2.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyTwo
							LocalInvoiceCurrencyCalculationGroup.ReportAmount3.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyThree
							LocalInvoiceCurrencyCalculationGroup.ReportAmount4.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFour
							LocalInvoiceCurrencyCalculationGroup.ReportAmount5.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFive
							

							invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup										= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader							= IntercompanyBillingSettlementHeader
								invoked.BillingDocument													= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber													= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
								invoked.AccountingEntity												= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
								invoked.Description														= "Intercompany billing withholding reversal"
								invoked.FinanceCodeBlock												= each.PayableWithholdingAccount
								invoked.TransactionDate													= each.IntercompanyBillingDocumentHeader.InvoiceDate
								invoked.PostingDate														= each.IntercompanyBillingDocumentHeader.PostDate
								invoked.CurrencyCode													= each.IntercompanyBillingDocumentHeader.DocumentCurrency
								invoked.RechargeItem													= each.RechargeItem
								invoked.ICBDistributionType												= 2 
								

								invoked.TransactionAmount												= each.WithholdingAmount
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
								
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							

							invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup										= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader							= IntercompanyBillingSettlementHeader
								invoked.BillingDocument													= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber													= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
								invoked.AccountingEntity												= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
								invoked.Description														= "Intercompany billing withholding reversal"
								invoked.FinanceCodeBlock												= each.CashBasisAccount
								invoked.TransactionDate													= each.IntercompanyBillingDocumentHeader.InvoiceDate
								invoked.PostingDate														= each.IntercompanyBillingDocumentHeader.PostDate
								invoked.CurrencyCode													= each.IntercompanyBillingDocumentHeader.DocumentCurrency
								invoked.RechargeItem													= each.RechargeItem
								invoked.ICBDistributionType												= 2 
								

								invoked.TransactionAmount												= each.WithholdingAmount*-1
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount*-1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount*-1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount*-1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount*-1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount*-1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount*-1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount*-1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount*-1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount*-1
								
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							
							if (each.HasSecondaryWithholdingAmount)

								initialize LocalInvoiceCurrencyCalculationGroup
								

								LocalInvoiceCurrencyCalculationGroup.CurrencyAmount							= each.SecondaryWithholdingAmount
								LocalInvoiceCurrencyCalculationGroup.FinanceEnterpriseGroup					= IntercompanyBillingGroup
								LocalInvoiceCurrencyCalculationGroup.ExchangeDate							= each.IntercompanyBillingDocumentHeader.InvoiceDate
								LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								LocalInvoiceCurrencyCalculationGroup.FromCurrency							= each.IntercompanyBillingDocumentHeader.DocumentCurrency
								LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
								LocalInvoiceCurrencyCalculationGroup.AlternateAmount.ToCurrency				= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
								LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
								LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
								LocalInvoiceCurrencyCalculationGroup.ReportAmount1.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyOne
								LocalInvoiceCurrencyCalculationGroup.ReportAmount2.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyTwo
								LocalInvoiceCurrencyCalculationGroup.ReportAmount3.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyThree
								LocalInvoiceCurrencyCalculationGroup.ReportAmount4.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFour
								LocalInvoiceCurrencyCalculationGroup.ReportAmount5.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFive
								

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup										= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader							= IntercompanyBillingSettlementHeader
									invoked.BillingDocument													= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber													= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
									invoked.AccountingEntity												= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.Description														= "Intercompany billing withholding reversal"
									invoked.FinanceCodeBlock												= each.SecondaryPayableWithholdingAccount
									invoked.TransactionDate													= each.IntercompanyBillingDocumentHeader.InvoiceDate
									invoked.PostingDate														= each.IntercompanyBillingDocumentHeader.PostDate
									invoked.CurrencyCode													= each.IntercompanyBillingDocumentHeader.DocumentCurrency
									invoked.RechargeItem													= each.RechargeItem
									invoked.ICBDistributionType												= 2 
									

									invoked.TransactionAmount												= each.SecondaryWithholdingAmount
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
									
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
									

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup										= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader								= IntercompanyBillingSettlementHeader
									invoked.BillingDocument													= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber													= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
									invoked.AccountingEntity												= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.Description														= "Intercompany billing withholding reversal"
									invoked.FinanceCodeBlock												= each.SecondaryCashBasisAccount
									invoked.TransactionDate													= each.IntercompanyBillingDocumentHeader.InvoiceDate
									invoked.PostingDate														= each.IntercompanyBillingDocumentHeader.PostDate
									invoked.CurrencyCode													= each.IntercompanyBillingDocumentHeader.DocumentCurrency
									invoked.RechargeItem													= each.RechargeItem
									invoked.ICBDistributionType												= 2 
									

									invoked.TransactionAmount												= each.SecondaryWithholdingAmount*-1
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount*-1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount*-1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount*-1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount*-1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount*-1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount*-1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount*-1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount*-1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount*-1
									
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					

					initialize LocalCurrencyTable
					initialize LocalInvoiceCurrencyCalculationGroup
					initialize LocalCurrencyCalculationGroup
					initialize LocalAlternateCurrencyCalculationGroup
					initialize LocalPreviewAmount
					initialize LocalGainLossAmounts
					initialize LocalTotalInvoiceAmounts
					

					LocalCurrencyTable															= ReceivableCurrencyInfo.CurrencyTable
					

					LocalInvoiceCurrencyCalculationGroup.CurrencyAmount							= each.DocumentPaymentAmount 
					LocalInvoiceCurrencyCalculationGroup.FinanceEnterpriseGroup					= IntercompanyBillingGroup
					LocalInvoiceCurrencyCalculationGroup.ExchangeDate							= each.IntercompanyBillingDocumentHeader.InvoiceDate
					LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
					LocalInvoiceCurrencyCalculationGroup.FromCurrency							= each.IntercompanyBillingDocumentHeader.DocumentCurrency
					LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= ReceivableCompany.AccountingEntity.FunctionalCurrency
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount.ToCurrency				= ReceivableCompany.AccountingEntity.AlternateCurrency
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= ReceivableCompany.AccountingEntity.AlternateCurrency2
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= ReceivableCompany.AccountingEntity.AlternateCurrency3
					LocalInvoiceCurrencyCalculationGroup.ReportAmount1.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyOne
					LocalInvoiceCurrencyCalculationGroup.ReportAmount2.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyTwo
					LocalInvoiceCurrencyCalculationGroup.ReportAmount3.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyThree
					LocalInvoiceCurrencyCalculationGroup.ReportAmount4.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFour
					LocalInvoiceCurrencyCalculationGroup.ReportAmount5.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFive
					

					if (each.IntercompanyBillingDocumentHeader.DocumentCurrency = SettlementCurrency)
						LocalPreviewAmount = each.DocumentPaymentAmount 
					else

						LocalAlternateCurrencyCalculationGroup.CurrencyAmount				= each.DocumentPaymentAmount 
						LocalAlternateCurrencyCalculationGroup.FinanceEnterpriseGroup		= IntercompanyBillingGroup
						LocalAlternateCurrencyCalculationGroup.ExchangeDate					= PaymentDate
						LocalAlternateCurrencyCalculationGroup.FromCurrency					= each.IntercompanyBillingDocumentHeader.DocumentCurrency
						LocalAlternateCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= SettlementCurrency
						
						LocalPreviewAmount = LocalAlternateCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount


					

					LocalCurrencyCalculationGroup.CurrencyAmount								= LocalPreviewAmount
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup						= IntercompanyBillingGroup
					LocalCurrencyCalculationGroup.ExchangeDate									= PaymentDate
					LocalCurrencyCalculationGroup.FromCurrency									= SettlementCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency					= ReceivableCompany.AccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate			= ReceivableCurrencyInfo.CurrencyExchangeRate   
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency					= ReceivableCompany.AccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency					= ReceivableCompany.AccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency					= ReceivableCompany.AccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyFive
					

					LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					if (ReceivableCompany.AccountingEntity.AlternateCurrencyEntered)
						LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					if (ReceivableCompany.AccountingEntity.AlternateCurrency2Entered)
						LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					if (ReceivableCompany.AccountingEntity.AlternateCurrency3Entered)
						LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
						LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
						LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
						LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
						LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
						LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					
					if (LocalGainLossAmounts entered
					and ReceivableCompany.ProrateGainLossToDistributions)
						LocalDocumentHeader	= each.IntercompanyBillingDocumentHeader
						
						for each each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice.ReceivableGLDistributionDetailTypeRel
							LocalTotalInvoiceAmounts.FunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount1.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount4.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount5.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
					
					if (each.IntercompanyBillingDocumentHeader.DocumentCurrency = SettlementCurrency)

						invoke Create IntercompanyBillingSettlementPreviewDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
							invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
							invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
							invoked.Description							= "Cash Applied - Receivable"
							invoked.FinanceCodeBlock					= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount
							invoked.TransactionDate						= PaymentDate
							invoked.PostingDate							= PostDate
							invoked.TransactionAmount					= LocalPreviewAmount*-1
							invoked.CurrencyCode						= SettlementCurrency
							invoked.ICBDistributionType					= 1 
							invoked.Origin								= "RL" 
							invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCurrencyInfo.CurrencyExchangeRate   
						

						if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	> 0)
							
							if (ReceivableCompany.ProrateGainLossToDistributions)

								LocalProrateAR = true
								LocalProrateGain = true
								for each each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice.ReceivableGLDistributionDetailTypeRel
									LocalDistributionAmount = each.DistributionAmount
									

									include CalculateProratedAmounts
									
									if (LocalFunctional entered
									or  LocalAlternate entered
									or  LocalAlternate2 entered
									or  LocalAlternate3 entered
									or  LocalReport1 entered
									or  LocalReport2 entered
									or  LocalReport3 entered
									or  LocalReport4 entered
									or  LocalReport5 entered)
										initialize LocalPreviewProrateDistribution
										invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
											assign result to LocalPreviewProrateDistribution
											invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
											invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
											invoked.BillingDocument							= LocalDocumentHeader
											invoked.InvoiceNumber							= each.Invoice
											invoked.AccountingEntity						= ReceivableCompany.AccountingEntity
											invoked.TransactionDate							= PaymentDate
											invoked.PostingDate								= PostDate
											invoked.ICBDistributionType						= 1 
											invoked.Origin									= "RL" 
											invoked.CurrencyTable							= ReceivableCurrencyInfo.CurrencyTable
											invoked.CurrencyCode							= SettlementCurrency
											invoked.Description								= "Realized currency gain"
											

											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
											invoked.FinanceCodeBlock.ToAccountingEntity			= each.GeneralLedgerAccount.ToAccountingEntity
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
												invoked.FinanceCodeBlock.AccountingUnit			= each.GeneralLedgerAccount.AccountingUnit
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
												invoked.FinanceCodeBlock.FinanceDimension1		= each.GeneralLedgerAccount.FinanceDimension1
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
												invoked.FinanceCodeBlock.FinanceDimension2		= each.GeneralLedgerAccount.FinanceDimension2
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
												invoked.FinanceCodeBlock.FinanceDimension3		= each.GeneralLedgerAccount.FinanceDimension3
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
												invoked.FinanceCodeBlock.FinanceDimension4		= each.GeneralLedgerAccount.FinanceDimension4
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
												invoked.FinanceCodeBlock.FinanceDimension5		= each.GeneralLedgerAccount.FinanceDimension5
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
												invoked.FinanceCodeBlock.FinanceDimension6		= each.GeneralLedgerAccount.FinanceDimension6
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
												invoked.FinanceCodeBlock.FinanceDimension7		= each.GeneralLedgerAccount.FinanceDimension7
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
												invoked.FinanceCodeBlock.FinanceDimension8		= each.GeneralLedgerAccount.FinanceDimension8
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
												invoked.FinanceCodeBlock.FinanceDimension9		= each.GeneralLedgerAccount.FinanceDimension9
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
												invoked.FinanceCodeBlock.FinanceDimension10		= each.GeneralLedgerAccount.FinanceDimension10
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctional
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							

								include AdjustProratedDistributionSameCurrency
							else

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
									invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
									invoked.AccountingEntity						= ReceivableCompany.AccountingEntity
									invoked.TransactionDate							= PaymentDate
									invoked.PostingDate								= PostDate
									invoked.ICBDistributionType						= 1 
									invoked.Origin									= "RL" 
									invoked.CurrencyTable							= ReceivableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode							= SettlementCurrency
									invoked.Description								= "Realized currency gain"
									

									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									invoked.FinanceCodeBlock.ToAccountingEntity	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit
										else
											invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1
										else
											invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2
										else
											invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3
										else
											invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4
										else
											invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5
										else
											invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6
										else
											invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7
										else
											invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8
										else
											invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9
										else
											invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10 entered)
											invoked.FinanceCodeBlock.FinanceDimension10	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10
										else
											invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
									

									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
						

						if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	< 0)
							
							if (ReceivableCompany.ProrateGainLossToDistributions)

								LocalProrateAR = true
								LocalProrateGain = false
								for each each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice.ReceivableGLDistributionDetailTypeRel
									LocalDistributionAmount = each.DistributionAmount
									

									include CalculateProratedAmounts
									
									if (LocalFunctional entered
									or  LocalAlternate entered
									or  LocalAlternate2 entered
									or  LocalAlternate3 entered
									or  LocalReport1 entered
									or  LocalReport2 entered
									or  LocalReport3 entered
									or  LocalReport4 entered
									or  LocalReport5 entered)
										initialize LocalPreviewProrateDistribution
										invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
											assign result to LocalPreviewProrateDistribution
											invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
											invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
											invoked.BillingDocument							= LocalDocumentHeader
											invoked.InvoiceNumber							= each.Invoice
											invoked.AccountingEntity						= ReceivableCompany.AccountingEntity
											invoked.TransactionDate							= PaymentDate
											invoked.PostingDate								= PostDate
											invoked.ICBDistributionType						= 1 
											invoked.Origin									= "RL" 
											invoked.CurrencyTable							= ReceivableCurrencyInfo.CurrencyTable
											invoked.CurrencyCode							= SettlementCurrency
											invoked.Description								= "Realized currency loss"
											

											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
											invoked.FinanceCodeBlock.ToAccountingEntity			= each.GeneralLedgerAccount.ToAccountingEntity
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
												invoked.FinanceCodeBlock.AccountingUnit			= each.GeneralLedgerAccount.AccountingUnit
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
												invoked.FinanceCodeBlock.FinanceDimension1		= each.GeneralLedgerAccount.FinanceDimension1
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
												invoked.FinanceCodeBlock.FinanceDimension2		= each.GeneralLedgerAccount.FinanceDimension2
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
												invoked.FinanceCodeBlock.FinanceDimension3		= each.GeneralLedgerAccount.FinanceDimension3
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
												invoked.FinanceCodeBlock.FinanceDimension4		= each.GeneralLedgerAccount.FinanceDimension4
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
												invoked.FinanceCodeBlock.FinanceDimension5		= each.GeneralLedgerAccount.FinanceDimension5
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
												invoked.FinanceCodeBlock.FinanceDimension6		= each.GeneralLedgerAccount.FinanceDimension6
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
												invoked.FinanceCodeBlock.FinanceDimension7		= each.GeneralLedgerAccount.FinanceDimension7
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
												invoked.FinanceCodeBlock.FinanceDimension8		= each.GeneralLedgerAccount.FinanceDimension8
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
												invoked.FinanceCodeBlock.FinanceDimension9		= each.GeneralLedgerAccount.FinanceDimension9
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
												invoked.FinanceCodeBlock.FinanceDimension10		= each.GeneralLedgerAccount.FinanceDimension10
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctional
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							

								include AdjustProratedDistributionSameCurrency
							else

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
									invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
									invoked.AccountingEntity						= ReceivableCompany.AccountingEntity
									invoked.TransactionDate							= PaymentDate
									invoked.PostingDate								= PostDate
									invoked.ICBDistributionType						= 1 
									invoked.Origin									= "RL" 
									invoked.CurrencyTable							= ReceivableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode							= SettlementCurrency
									invoked.Description								= "Realized currency loss"
									

									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit
										else
											invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1
										else
											invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2
										else
											invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3
										else
											invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4
										else
											invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5
										else
											invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6
										else
											invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7
										else
											invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8
										else
											invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9
										else
											invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10 entered)
											invoked.FinanceCodeBlock.FinanceDimension10	= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10
										else
											invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
									

									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					else


						invoke Create IntercompanyBillingSettlementPreviewDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
							invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
							invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
							invoked.Description							= "Cash Applied - Receivable"
							invoked.FinanceCodeBlock					= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount
							invoked.TransactionDate						= PaymentDate
							invoked.PostingDate							= PostDate
							invoked.ICBDistributionType					= 1 
							invoked.Origin								= "RL" 
							invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
							
							invoked.TransactionAmount					= LocalInvoiceCurrencyCalculationGroup.CurrencyAmount * -1
							invoked.CurrencyCode						= each.IntercompanyBillingDocumentHeader.DocumentCurrency
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCurrencyInfo.CurrencyExchangeRate   
							
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount * -1
							if (ReceivableCompany.AccountingEntity.AlternateCurrencyEntered)
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount * -1
							if (ReceivableCompany.AccountingEntity.AlternateCurrency2Entered)
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount * -1
							if (ReceivableCompany.AccountingEntity.AlternateCurrency3Entered)
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount * -1
							if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount * -1
							if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount * -1
							if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount * -1
							if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount * -1
							if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount * -1
						
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							
							
						if (ReceivableCompany.ProrateGainLossToDistributions)
							for each each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice.ReceivableGLDistributionDetailTypeRel
								

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
									invoked.BillingDocument						= LocalDocumentHeader
									invoked.InvoiceNumber						= each.Invoice
									invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
									invoked.TransactionDate						= PaymentDate
									invoked.PostingDate							= PostDate
									invoked.ICBDistributionType					= 1 
									invoked.Origin								= "RL" 
									invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode						= LocalDocumentHeader.DocumentCurrency
									invoked.Description							= "Non invoice currency payment accrual offset"
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount >= 0)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									else
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity				= each.GeneralLedgerAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										invoked.FinanceCodeBlock.AccountingUnit				= each.GeneralLedgerAccount.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										invoked.FinanceCodeBlock.FinanceDimension1			= each.GeneralLedgerAccount.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										invoked.FinanceCodeBlock.FinanceDimension2			= each.GeneralLedgerAccount.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										invoked.FinanceCodeBlock.FinanceDimension3			= each.GeneralLedgerAccount.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										invoked.FinanceCodeBlock.FinanceDimension4			= each.GeneralLedgerAccount.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										invoked.FinanceCodeBlock.FinanceDimension5			= each.GeneralLedgerAccount.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										invoked.FinanceCodeBlock.FinanceDimension6			= each.GeneralLedgerAccount.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										invoked.FinanceCodeBlock.FinanceDimension7			= each.GeneralLedgerAccount.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										invoked.FinanceCodeBlock.FinanceDimension8			= each.GeneralLedgerAccount.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										invoked.FinanceCodeBlock.FinanceDimension9			= each.GeneralLedgerAccount.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										invoked.FinanceCodeBlock.FinanceDimension10			= each.GeneralLedgerAccount.FinanceDimension10
										

									invoked.TransactionAmount												= each.GLTransactionDetailRel.TransactionAmount * -1
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= each.GLTransactionDetailRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
										
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
									

								initialize LocalAlternateCurrencyCalculationGroup
								LocalAlternateCurrencyCalculationGroup.CurrencyAmount				= each.DistributionAmount.CurrencyAmount
								LocalAlternateCurrencyCalculationGroup.FinanceEnterpriseGroup		= IntercompanyBillingGroup
								LocalAlternateCurrencyCalculationGroup.ExchangeDate					= PaymentDate
								LocalAlternateCurrencyCalculationGroup.FromCurrency					= each.OriginalCurrency
								LocalAlternateCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= SettlementCurrency
								

								initialize LocalPreviewProrateDistribution
								invoke Create IntercompanyBillingSettlementPreviewDistribution
									assign result to LocalPreviewProrateDistribution
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
									invoked.BillingDocument						= LocalDocumentHeader
									invoked.InvoiceNumber						= each.Invoice
									invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
									invoked.Description							= "Non invoice currency payment offset"
									invoked.TransactionDate						= PaymentDate
									invoked.PostingDate							= PostDate
									invoked.CurrencyCode						= SettlementCurrency
									invoked.ICBDistributionType					= 1 
									invoked.Origin								= "RL" 
									invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount >= 0)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									else
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity				= each.GeneralLedgerAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										invoked.FinanceCodeBlock.AccountingUnit				= each.GeneralLedgerAccount.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										invoked.FinanceCodeBlock.FinanceDimension1			= each.GeneralLedgerAccount.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										invoked.FinanceCodeBlock.FinanceDimension2			= each.GeneralLedgerAccount.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										invoked.FinanceCodeBlock.FinanceDimension3			= each.GeneralLedgerAccount.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										invoked.FinanceCodeBlock.FinanceDimension4			= each.GeneralLedgerAccount.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										invoked.FinanceCodeBlock.FinanceDimension5			= each.GeneralLedgerAccount.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										invoked.FinanceCodeBlock.FinanceDimension6			= each.GeneralLedgerAccount.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										invoked.FinanceCodeBlock.FinanceDimension7			= each.GeneralLedgerAccount.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										invoked.FinanceCodeBlock.FinanceDimension8			= each.GeneralLedgerAccount.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										invoked.FinanceCodeBlock.FinanceDimension9			= each.GeneralLedgerAccount.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										invoked.FinanceCodeBlock.FinanceDimension10			= each.GeneralLedgerAccount.FinanceDimension10
									

									invoked.TransactionAmount								= LocalAlternateCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
								
								LocalTransactionValidation	+= LocalPreviewProrateDistribution.TransactionAmount * -1
								LocalFunctionalValidation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.FunctionalAmount.OutputCurrencyAmount * -1
								LocalAlternateValidation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount.OutputCurrencyAmount * -1
								LocalAlternate2Validation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount2.OutputCurrencyAmount * -1
								LocalAlternate3Validation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount3.OutputCurrencyAmount * -1
								LocalReport1Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount1.OutputCurrencyAmount * -1
								LocalReport2Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount2.OutputCurrencyAmount * -1
								LocalReport3Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount3.OutputCurrencyAmount * -1
								LocalReport4Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount4.OutputCurrencyAmount * -1
								LocalReport5Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount5.OutputCurrencyAmount * -1
								

							LocalProrateAR	= true
							include AdjustProratedDistributionDifferentCurrency
						else

							invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
								invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
								invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
								invoked.TransactionDate						= PaymentDate
								invoked.PostingDate							= PostDate
								invoked.ICBDistributionType					= 1 
								invoked.Origin								= "RL" 
								invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
								invoked.CurrencyCode						= each.IntercompanyBillingDocumentHeader.DocumentCurrency
								invoked.Description							= "Non invoice currency payment accrual offset"
								

								if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount >= 0)
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
								else
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
								invoked.FinanceCodeBlock.ToAccountingEntity				= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.ToAccountingEntity
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit			= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit
									else
										invoked.FinanceCodeBlock.AccountingUnit			= SystemAccountingUnitRel.AccountingUnit
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1
									else
										invoked.FinanceCodeBlock.FinanceDimension1		= FinanceDimension1Rel.FinanceDimension1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2
									else
										invoked.FinanceCodeBlock.FinanceDimension2		= FinanceDimension2Rel.FinanceDimension2
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3
									else
										invoked.FinanceCodeBlock.FinanceDimension3		= FinanceDimension3Rel.FinanceDimension3
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4
									else
										invoked.FinanceCodeBlock.FinanceDimension4		= FinanceDimension4Rel.FinanceDimension4
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5
									else
										invoked.FinanceCodeBlock.FinanceDimension5		= FinanceDimension5Rel.FinanceDimension5
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6
									else
										invoked.FinanceCodeBlock.FinanceDimension6		= FinanceDimension6Rel.FinanceDimension6
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7
									else
										invoked.FinanceCodeBlock.FinanceDimension7		= FinanceDimension7Rel.FinanceDimension7
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8
									else
										invoked.FinanceCodeBlock.FinanceDimension8		= FinanceDimension8Rel.FinanceDimension8
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9
									else
										invoked.FinanceCodeBlock.FinanceDimension9		= FinanceDimension9Rel.FinanceDimension9
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10 entered)
										invoked.FinanceCodeBlock.FinanceDimension10		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10
									else
										invoked.FinanceCodeBlock.FinanceDimension10	= FinanceDimension10Rel.FinanceDimension10
										

								invoked.TransactionAmount												= LocalInvoiceCurrencyCalculationGroup.CurrencyAmount
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
									
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
							

							invoke Create IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
								invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
								invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
								invoked.Description							= "Non invoice currency payment offset"
								invoked.TransactionDate						= PaymentDate
								invoked.PostingDate							= PostDate
								invoked.CurrencyCode						= SettlementCurrency
								invoked.ICBDistributionType					= 1 
								invoked.Origin								= "RL" 
								invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
								

								if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount >= 0)
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
								else
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
								invoked.FinanceCodeBlock.ToAccountingEntity				= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.ToAccountingEntity
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit			= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.AccountingUnit
									else
										invoked.FinanceCodeBlock.AccountingUnit			= SystemAccountingUnitRel.AccountingUnit
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension1
									else
										invoked.FinanceCodeBlock.FinanceDimension1		= FinanceDimension1Rel.FinanceDimension1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension2
									else
										invoked.FinanceCodeBlock.FinanceDimension2		= FinanceDimension2Rel.FinanceDimension2
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension3
									else
										invoked.FinanceCodeBlock.FinanceDimension3		= FinanceDimension3Rel.FinanceDimension3
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension4
									else
										invoked.FinanceCodeBlock.FinanceDimension4		= FinanceDimension4Rel.FinanceDimension4
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension5
									else
										invoked.FinanceCodeBlock.FinanceDimension5		= FinanceDimension5Rel.FinanceDimension5
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension6
									else
										invoked.FinanceCodeBlock.FinanceDimension6		= FinanceDimension6Rel.FinanceDimension6
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension7
									else
										invoked.FinanceCodeBlock.FinanceDimension7		= FinanceDimension7Rel.FinanceDimension7
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension8
									else
										invoked.FinanceCodeBlock.FinanceDimension8		= FinanceDimension8Rel.FinanceDimension8
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension9
									else
										invoked.FinanceCodeBlock.FinanceDimension9		= FinanceDimension9Rel.FinanceDimension9
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
									if (each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10 entered)
										invoked.FinanceCodeBlock.FinanceDimension10		= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode.DistributionAccount.FinanceDimension10
									else
										invoked.FinanceCodeBlock.FinanceDimension10	= FinanceDimension10Rel.FinanceDimension10
										

								invoked.TransactionAmount	= LocalPreviewAmount * -1
					

					invoke Create IntercompanyBillingSettlementPreviewDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
						invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
						invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.AccountingEntity					= ReceivableCompany.AccountingEntity
						invoked.Description							= "Cash Applied - RNA"
						invoked.FinanceCodeBlock					= ReceivableCompany.ICBillingDefaultProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
						invoked.TransactionDate						= PaymentDate
						invoked.PostingDate							= PostDate
						invoked.TransactionAmount					= LocalPreviewAmount
						invoked.CurrencyCode						= SettlementCurrency
						invoked.ICBDistributionType					= 1 
						invoked.Origin								= "RL" 
						invoked.CurrencyTable						= ReceivableCurrencyInfo.CurrencyTable
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCurrencyInfo.CurrencyExchangeRate   
					

					for each each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesAccrualCode.PayablesAccrualCodeDetail set
						if (each.DistributionAccount.ToAccountingEntity = IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity)
							LocalPayablesAccrualAccount = each.DistributionAccount
							end for each
					

					initialize LocalCurrencyTable
					initialize LocalInvoiceCurrencyCalculationGroup
					initialize LocalCurrencyCalculationGroup
					initialize LocalAlternateCurrencyCalculationGroup
					initialize LocalPreviewAmount
					initialize LocalGainLossAmounts
					initialize LocalTotalInvoiceAmounts
					

					LocalCurrencyTable															= PayableCurrencyInfo.CurrencyTable
					

					LocalInvoiceCurrencyCalculationGroup.CurrencyAmount							= each.DocumentPaymentAmount 
					LocalInvoiceCurrencyCalculationGroup.FinanceEnterpriseGroup					= IntercompanyBillingGroup
					LocalInvoiceCurrencyCalculationGroup.ExchangeDate							= each.IntercompanyBillingDocumentHeader.InvoiceDate
					LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
					LocalInvoiceCurrencyCalculationGroup.FromCurrency							= each.IntercompanyBillingDocumentHeader.DocumentCurrency
					LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount.ToCurrency				= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
					LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
					LocalInvoiceCurrencyCalculationGroup.ReportAmount1.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyOne
					LocalInvoiceCurrencyCalculationGroup.ReportAmount2.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyTwo
					LocalInvoiceCurrencyCalculationGroup.ReportAmount3.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyThree
					LocalInvoiceCurrencyCalculationGroup.ReportAmount4.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFour
					LocalInvoiceCurrencyCalculationGroup.ReportAmount5.ToCurrency				= IntercompanyBillingGroup.ReportCurrencyFive


					if (each.IntercompanyBillingDocumentHeader.DocumentCurrency = SettlementCurrency)
						LocalPreviewAmount = each.DocumentPaymentAmount 
					else

						LocalAlternateCurrencyCalculationGroup.CurrencyAmount				= each.DocumentPaymentAmount 
						LocalAlternateCurrencyCalculationGroup.FinanceEnterpriseGroup		= IntercompanyBillingGroup
						LocalAlternateCurrencyCalculationGroup.ExchangeDate					= PaymentDate
						LocalAlternateCurrencyCalculationGroup.FromCurrency					= each.IntercompanyBillingDocumentHeader.DocumentCurrency
						LocalAlternateCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= SettlementCurrency
						
						LocalPreviewAmount = LocalAlternateCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount


					LocalCurrencyCalculationGroup.CurrencyAmount								= LocalPreviewAmount
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup						= IntercompanyBillingGroup
					LocalCurrencyCalculationGroup.ExchangeDate									= PaymentDate
					LocalCurrencyCalculationGroup.FromCurrency									= SettlementCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency						= IntercompanyBillingGroup.ReportCurrencyFive


					LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount)
					if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
						LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount)
					if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
						LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount)
					if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
						LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount)
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
						LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount)
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
						LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount)
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
						LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount)
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
						LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount)
					if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
						LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	= -1 * (LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount)
					
					if (LocalGainLossAmounts entered
					and IntercompanyBillingSettlementHeader.PayablesCompany.ProrateGainLossToDistributions)
						LocalDocumentHeader	= each.IntercompanyBillingDocumentHeader
						
						for each each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel
							LocalTotalInvoiceAmounts.FunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.AlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount1.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount4.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalTotalInvoiceAmounts.ReportAmount5.EnteredCurrencyAmount	+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
					

					invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
						invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
						invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
						invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
						invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
						invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
						invoked.Description								= "Payment Accrual"
						invoked.FinanceCodeBlock						= LocalPayablesAccrualAccount
						invoked.TransactionDate							= PaymentDate
						invoked.PostingDate								= PostDate
						invoked.PayablesDistributionType				= "Y" 
						invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
						
						invoked.TransactionAmount											= LocalInvoiceCurrencyCalculationGroup.CurrencyAmount
						invoked.CurrencyCode												= each.IntercompanyBillingDocumentHeader.DocumentCurrency
						
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

					if (each.IntercompanyBillingDocumentHeader.DocumentCurrency = SettlementCurrency)

						if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount > 0
						or	LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	> 0
						or	LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	> 0)
							
							if (IntercompanyBillingSettlementHeader.PayablesCompany.ProrateGainLossToDistributions)

								LocalProrateAR = false
								LocalProrateGain = true
								for each each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel
									LocalDistributionAmount = each.DistributionAmount
									

									include CalculateProratedAmounts
									
									if (LocalFunctional entered
									or  LocalAlternate entered
									or  LocalAlternate2 entered
									or  LocalAlternate3 entered
									or  LocalReport1 entered
									or  LocalReport2 entered
									or  LocalReport3 entered
									or  LocalReport4 entered
									or  LocalReport5 entered)
										initialize LocalPreviewProrateDistribution
										invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
											assign result to LocalPreviewProrateDistribution
											invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
											invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
											invoked.BillingDocument							= LocalDocumentHeader
											invoked.InvoiceNumber							= each.Invoice
											invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
											invoked.TransactionDate							= PaymentDate
											invoked.PostingDate								= PostDate
											invoked.PayablesDistributionType				= "Y" 
											invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
											invoked.CurrencyCode							= SettlementCurrency
											invoked.Description								= "Realized currency gain"
											

											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
											invoked.FinanceCodeBlock.ToAccountingEntity			= each.DistributionAccount.ToAccountingEntity
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
												invoked.FinanceCodeBlock.AccountingUnit			= each.DistributionAccount.AccountingUnit
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
												invoked.FinanceCodeBlock.FinanceDimension1		= each.DistributionAccount.FinanceDimension1
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
												invoked.FinanceCodeBlock.FinanceDimension2		= each.DistributionAccount.FinanceDimension2
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
												invoked.FinanceCodeBlock.FinanceDimension3		= each.DistributionAccount.FinanceDimension3
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
												invoked.FinanceCodeBlock.FinanceDimension4		= each.DistributionAccount.FinanceDimension4
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
												invoked.FinanceCodeBlock.FinanceDimension5		= each.DistributionAccount.FinanceDimension5
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
												invoked.FinanceCodeBlock.FinanceDimension6		= each.DistributionAccount.FinanceDimension6
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
												invoked.FinanceCodeBlock.FinanceDimension7		= each.DistributionAccount.FinanceDimension7
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
												invoked.FinanceCodeBlock.FinanceDimension8		= each.DistributionAccount.FinanceDimension8
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
												invoked.FinanceCodeBlock.FinanceDimension9		= each.DistributionAccount.FinanceDimension9
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
												invoked.FinanceCodeBlock.FinanceDimension10		= each.DistributionAccount.FinanceDimension10
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctional
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
											

								include AdjustProratedDistributionSameCurrency			
							else

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
									invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
									invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.TransactionDate							= PaymentDate
									invoked.PostingDate								= PostDate
									invoked.PayablesDistributionType				= "Y" 
									invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode							= SettlementCurrency
									invoked.Description								= "Realized currency gain"
									

									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									invoked.FinanceCodeBlock.ToAccountingEntity	= LocalPayablesAccrualAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										if (LocalPayablesAccrualAccount.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	= LocalPayablesAccrualAccount.AccountingUnit
										else
											invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										if (LocalPayablesAccrualAccount.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	= LocalPayablesAccrualAccount.FinanceDimension1
										else
											invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										if (LocalPayablesAccrualAccount.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	= LocalPayablesAccrualAccount.FinanceDimension2
										else
											invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										if (LocalPayablesAccrualAccount.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	= LocalPayablesAccrualAccount.FinanceDimension3
										else
											invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										if (LocalPayablesAccrualAccount.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	= LocalPayablesAccrualAccount.FinanceDimension4
										else
											invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										if (LocalPayablesAccrualAccount.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	= LocalPayablesAccrualAccount.FinanceDimension5
										else
											invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										if (LocalPayablesAccrualAccount.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	= LocalPayablesAccrualAccount.FinanceDimension6
										else
											invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										if (LocalPayablesAccrualAccount.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	= LocalPayablesAccrualAccount.FinanceDimension7
										else
											invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										if (LocalPayablesAccrualAccount.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	= LocalPayablesAccrualAccount.FinanceDimension8
										else
											invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										if (LocalPayablesAccrualAccount.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	= LocalPayablesAccrualAccount.FinanceDimension9
										else
											invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										if (LocalPayablesAccrualAccount.FinanceDimension10 entered)
											invoked.FinanceCodeBlock.FinanceDimension10	= LocalPayablesAccrualAccount.FinanceDimension10
										else
											invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount > 0)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
									

									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate	
						

						if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount < 0
						or	LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount	< 0
						or	LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount	< 0)
							
							if (IntercompanyBillingSettlementHeader.PayablesCompany.ProrateGainLossToDistributions)

								LocalProrateAR = false
								LocalProrateGain = false
								for each each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel
									LocalDistributionAmount = each.DistributionAmount
									

									include CalculateProratedAmounts
									
									if (LocalFunctional entered
									or  LocalAlternate entered
									or  LocalAlternate2 entered
									or  LocalAlternate3 entered
									or  LocalReport1 entered
									or  LocalReport2 entered
									or  LocalReport3 entered
									or  LocalReport4 entered
									or  LocalReport5 entered)
										initialize LocalPreviewProrateDistribution
										invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
											assign result to LocalPreviewProrateDistribution
											invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
											invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
											invoked.BillingDocument							= LocalDocumentHeader
											invoked.InvoiceNumber							= each.Invoice
											invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
											invoked.TransactionDate							= PaymentDate
											invoked.PostingDate								= PostDate
											invoked.PayablesDistributionType				= "Y" 
											invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
											invoked.CurrencyCode							= SettlementCurrency
											invoked.Description								= "Realized currency loss"
											

											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
											invoked.FinanceCodeBlock.ToAccountingEntity			= each.DistributionAccount.ToAccountingEntity
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
												invoked.FinanceCodeBlock.AccountingUnit			= each.DistributionAccount.AccountingUnit
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
												invoked.FinanceCodeBlock.FinanceDimension1		= each.DistributionAccount.FinanceDimension1
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
												invoked.FinanceCodeBlock.FinanceDimension2		= each.DistributionAccount.FinanceDimension2
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
												invoked.FinanceCodeBlock.FinanceDimension3		= each.DistributionAccount.FinanceDimension3
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
												invoked.FinanceCodeBlock.FinanceDimension4		= each.DistributionAccount.FinanceDimension4
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
												invoked.FinanceCodeBlock.FinanceDimension5		= each.DistributionAccount.FinanceDimension5
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
												invoked.FinanceCodeBlock.FinanceDimension6		= each.DistributionAccount.FinanceDimension6
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
												invoked.FinanceCodeBlock.FinanceDimension7		= each.DistributionAccount.FinanceDimension7
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
												invoked.FinanceCodeBlock.FinanceDimension8		= each.DistributionAccount.FinanceDimension8
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
												invoked.FinanceCodeBlock.FinanceDimension9		= each.DistributionAccount.FinanceDimension9
											if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
												invoked.FinanceCodeBlock.FinanceDimension10		= each.DistributionAccount.FinanceDimension10
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalFunctional
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternate2
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternate3
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5
											

											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
								

								include AdjustProratedDistributionSameCurrency
							else

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
									invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
									invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
									invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.TransactionDate							= PaymentDate
									invoked.PostingDate								= PostDate
									invoked.PayablesDistributionType				= "Y" 
									invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode							= SettlementCurrency
									invoked.Description								= "Realized currency loss"
									

									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity	= LocalPayablesAccrualAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										if (LocalPayablesAccrualAccount.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	= LocalPayablesAccrualAccount.AccountingUnit
										else
											invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										if (LocalPayablesAccrualAccount.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	= LocalPayablesAccrualAccount.FinanceDimension1
										else
											invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										if (LocalPayablesAccrualAccount.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	= LocalPayablesAccrualAccount.FinanceDimension2
										else
											invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										if (LocalPayablesAccrualAccount.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	= LocalPayablesAccrualAccount.FinanceDimension3
										else
											invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										if (LocalPayablesAccrualAccount.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	= LocalPayablesAccrualAccount.FinanceDimension4
										else
											invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										if (LocalPayablesAccrualAccount.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	= LocalPayablesAccrualAccount.FinanceDimension5
										else
											invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										if (LocalPayablesAccrualAccount.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	= LocalPayablesAccrualAccount.FinanceDimension6
										else
											invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										if (LocalPayablesAccrualAccount.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	= LocalPayablesAccrualAccount.FinanceDimension7
										else
											invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										if (LocalPayablesAccrualAccount.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	= LocalPayablesAccrualAccount.FinanceDimension8
										else
											invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										if (LocalPayablesAccrualAccount.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	= LocalPayablesAccrualAccount.FinanceDimension9
										else
											invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										if (LocalPayablesAccrualAccount.FinanceDimension10 entered)
											invoked.FinanceCodeBlock.FinanceDimension10	= LocalPayablesAccrualAccount.FinanceDimension10
										else
											invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalGainLossAmounts.AlternateAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount1.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount2.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount3.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount4.EnteredCurrencyAmount * -1
									if (LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount < 0)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount = LocalGainLossAmounts.ReportAmount5.EnteredCurrencyAmount * -1
									

									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					else

						
						if (IntercompanyBillingSettlementHeader.PayablesCompany.ProrateGainLossToDistributions)
							for each each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel
							

								invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
									invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
									invoked.BillingDocument							= LocalDocumentHeader
									invoked.InvoiceNumber							= each.Invoice
									invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.TransactionDate							= PaymentDate
									invoked.PostingDate								= PostDate
									invoked.PayablesDistributionType				= "Y" 
									invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
									invoked.CurrencyCode							= LocalDocumentHeader.DocumentCurrency
									invoked.Description								= "Non invoice currency payment accrual offset"
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									else
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity				= each.DistributionAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										invoked.FinanceCodeBlock.AccountingUnit				= each.DistributionAccount.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										invoked.FinanceCodeBlock.FinanceDimension1			= each.DistributionAccount.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										invoked.FinanceCodeBlock.FinanceDimension2			= each.DistributionAccount.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										invoked.FinanceCodeBlock.FinanceDimension3			= each.DistributionAccount.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										invoked.FinanceCodeBlock.FinanceDimension4			= each.DistributionAccount.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										invoked.FinanceCodeBlock.FinanceDimension5			= each.DistributionAccount.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										invoked.FinanceCodeBlock.FinanceDimension6			= each.DistributionAccount.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										invoked.FinanceCodeBlock.FinanceDimension7			= each.DistributionAccount.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										invoked.FinanceCodeBlock.FinanceDimension8			= each.DistributionAccount.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										invoked.FinanceCodeBlock.FinanceDimension9			= each.DistributionAccount.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										invoked.FinanceCodeBlock.FinanceDimension10			= each.DistributionAccount.FinanceDimension10
									

									invoked.TransactionAmount												= each.GLTransactionDetailRel.TransactionAmount * -1
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= each.GLTransactionDetailRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= each.GLTransactionDetailRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
									
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
									

								initialize LocalAlternateCurrencyCalculationGroup
								LocalAlternateCurrencyCalculationGroup.CurrencyAmount				= each.DistributionAmount.CurrencyAmount
								LocalAlternateCurrencyCalculationGroup.FinanceEnterpriseGroup		= IntercompanyBillingGroup
								LocalAlternateCurrencyCalculationGroup.ExchangeDate					= PaymentDate
								LocalAlternateCurrencyCalculationGroup.FromCurrency					= each.InvoiceCurrency
								LocalAlternateCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= SettlementCurrency
								

								initialize LocalPreviewProrateDistribution
								invoke Create IntercompanyBillingSettlementPreviewDistribution
									assign result to LocalPreviewProrateDistribution
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
									invoked.BillingDocument						= LocalDocumentHeader
									invoked.InvoiceNumber						= each.Invoice
									invoked.AccountingEntity					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
									invoked.Description							= "Non invoice currency payment offset"
									invoked.TransactionDate						= PaymentDate
									invoked.PostingDate							= PostDate
									invoked.CurrencyCode						= SettlementCurrency
									invoked.PayablesDistributionType			= "P" 
									invoked.CurrencyTable						= PayableCurrencyInfo.CurrencyTable
									

									if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
									else
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
									invoked.FinanceCodeBlock.ToAccountingEntity				= each.DistributionAccount.ToAccountingEntity
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
										invoked.FinanceCodeBlock.AccountingUnit				= each.DistributionAccount.AccountingUnit
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
										invoked.FinanceCodeBlock.FinanceDimension1			= each.DistributionAccount.FinanceDimension1
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
										invoked.FinanceCodeBlock.FinanceDimension2			= each.DistributionAccount.FinanceDimension2
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
										invoked.FinanceCodeBlock.FinanceDimension3			= each.DistributionAccount.FinanceDimension3
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
										invoked.FinanceCodeBlock.FinanceDimension4			= each.DistributionAccount.FinanceDimension4
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
										invoked.FinanceCodeBlock.FinanceDimension5			= each.DistributionAccount.FinanceDimension5
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
										invoked.FinanceCodeBlock.FinanceDimension6			= each.DistributionAccount.FinanceDimension6
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
										invoked.FinanceCodeBlock.FinanceDimension7			= each.DistributionAccount.FinanceDimension7
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
										invoked.FinanceCodeBlock.FinanceDimension8			= each.DistributionAccount.FinanceDimension8
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
										invoked.FinanceCodeBlock.FinanceDimension9			= each.DistributionAccount.FinanceDimension9
									if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
										invoked.FinanceCodeBlock.FinanceDimension10			= each.DistributionAccount.FinanceDimension10
									

									invoked.TransactionAmount								= LocalAlternateCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
									
								LocalTransactionValidation	+= LocalPreviewProrateDistribution.TransactionAmount
								LocalFunctionalValidation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.FunctionalAmount.OutputCurrencyAmount
								LocalAlternateValidation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount.OutputCurrencyAmount
								LocalAlternate2Validation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount2.OutputCurrencyAmount
								LocalAlternate3Validation	+= LocalPreviewProrateDistribution.ReportCurrencyAmount.AlternateAmount3.OutputCurrencyAmount
								LocalReport1Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount1.OutputCurrencyAmount
								LocalReport2Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount2.OutputCurrencyAmount
								LocalReport3Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount3.OutputCurrencyAmount
								LocalReport4Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount4.OutputCurrencyAmount
								LocalReport5Validation		+= LocalPreviewProrateDistribution.ReportCurrencyAmount.ReportAmount5.OutputCurrencyAmount
							

							LocalProrateAR	= false
							include AdjustProratedDistributionDifferentCurrency
						else	

							invoke CreateBypassFieldRules IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup				= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader		= IntercompanyBillingSettlementHeader
								invoked.BillingDocument							= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber							= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
								invoked.AccountingEntity						= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
								invoked.TransactionDate							= PaymentDate
								invoked.PostingDate								= PostDate
								invoked.PayablesDistributionType				= "Y" 
								invoked.CurrencyTable							= PayableCurrencyInfo.CurrencyTable
								invoked.CurrencyCode							= each.IntercompanyBillingDocumentHeader.DocumentCurrency
								invoked.Description								= "Non invoice currency payment accrual offset"
								

								if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
								else
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
								invoked.FinanceCodeBlock.ToAccountingEntity	= LocalPayablesAccrualAccount.ToAccountingEntity
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
									if (LocalPayablesAccrualAccount.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	= LocalPayablesAccrualAccount.AccountingUnit
									else
										invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
									if (LocalPayablesAccrualAccount.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	= LocalPayablesAccrualAccount.FinanceDimension1
									else
										invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
									if (LocalPayablesAccrualAccount.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	= LocalPayablesAccrualAccount.FinanceDimension2
									else
										invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
									if (LocalPayablesAccrualAccount.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	= LocalPayablesAccrualAccount.FinanceDimension3
									else
										invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
									if (LocalPayablesAccrualAccount.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	= LocalPayablesAccrualAccount.FinanceDimension4
									else
										invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
									if (LocalPayablesAccrualAccount.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	= LocalPayablesAccrualAccount.FinanceDimension5
									else
										invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
									if (LocalPayablesAccrualAccount.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	= LocalPayablesAccrualAccount.FinanceDimension6
									else
										invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
									if (LocalPayablesAccrualAccount.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	= LocalPayablesAccrualAccount.FinanceDimension7
									else
										invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
									if (LocalPayablesAccrualAccount.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	= LocalPayablesAccrualAccount.FinanceDimension8
									else
										invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
									if (LocalPayablesAccrualAccount.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	= LocalPayablesAccrualAccount.FinanceDimension9
									else
										invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
									if (LocalPayablesAccrualAccount.FinanceDimension10 entered)
										invoked.FinanceCodeBlock.FinanceDimension10	= LocalPayablesAccrualAccount.FinanceDimension10
									else
										invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
								

								invoked.TransactionAmount												= LocalInvoiceCurrencyCalculationGroup.CurrencyAmount * -1
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount * -1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrencyEntered)
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount * -1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency2Entered)
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount * -1
								if (IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity.AlternateCurrency3Entered)
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount * -1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount * -1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount * -1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount * -1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount * -1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount * -1
								
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalInvoiceCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalInvoiceCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
								

							invoke Create IntercompanyBillingSettlementPreviewDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingSettlementHeader = IntercompanyBillingSettlementHeader
								invoked.BillingDocument						= each.IntercompanyBillingDocumentHeader
								invoked.InvoiceNumber						= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
								invoked.AccountingEntity					= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
								invoked.Description							= "Non invoice currency payment offset"
								invoked.TransactionDate						= PaymentDate
								invoked.PostingDate							= PostDate
								invoked.CurrencyCode						= SettlementCurrency
								invoked.PayablesDistributionType			= "P" 
								invoked.CurrencyTable						= PayableCurrencyInfo.CurrencyTable
								

								if (LocalGainLossAmounts.FunctionalAmount.EnteredCurrencyAmount > 0)
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedGainAccount
								else
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= RealizedLossAccount
								invoked.FinanceCodeBlock.ToAccountingEntity	= LocalPayablesAccrualAccount.ToAccountingEntity
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
									if (LocalPayablesAccrualAccount.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	= LocalPayablesAccrualAccount.AccountingUnit
									else
										invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
									if (LocalPayablesAccrualAccount.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	= LocalPayablesAccrualAccount.FinanceDimension1
									else
										invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
									if (LocalPayablesAccrualAccount.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	= LocalPayablesAccrualAccount.FinanceDimension2
									else
										invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
									if (LocalPayablesAccrualAccount.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	= LocalPayablesAccrualAccount.FinanceDimension3
									else
										invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
									if (LocalPayablesAccrualAccount.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	= LocalPayablesAccrualAccount.FinanceDimension4
									else
										invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
									if (LocalPayablesAccrualAccount.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	= LocalPayablesAccrualAccount.FinanceDimension5
									else
										invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
									if (LocalPayablesAccrualAccount.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	= LocalPayablesAccrualAccount.FinanceDimension6
									else
										invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
									if (LocalPayablesAccrualAccount.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	= LocalPayablesAccrualAccount.FinanceDimension7
									else
										invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
									if (LocalPayablesAccrualAccount.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	= LocalPayablesAccrualAccount.FinanceDimension8
									else
										invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
									if (LocalPayablesAccrualAccount.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	= LocalPayablesAccrualAccount.FinanceDimension9
									else
										invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
								if (IntercompanyBillingGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
									if (LocalPayablesAccrualAccount.FinanceDimension10 entered)
										invoked.FinanceCodeBlock.FinanceDimension10	= LocalPayablesAccrualAccount.FinanceDimension10
									else
										invoked.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10Rel.FinanceDimension10
								

								invoked.TransactionAmount					= LocalPreviewAmount
							

					invoke Create IntercompanyBillingSettlementPreviewDistribution
						invoked.IntercompanyBillingGroup										= IntercompanyBillingGroup
						invoked.IntercompanyBillingSettlementHeader								= IntercompanyBillingSettlementHeader
						invoked.BillingDocument													= each.IntercompanyBillingDocumentHeader
						invoked.InvoiceNumber													= each.IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.Invoice
						invoked.AccountingEntity												= IntercompanyBillingSettlementHeader.PayablesCompany.AccountingEntity
						invoked.Description														= "Cash Disbursement"
						invoked.FinanceCodeBlock												= PayablesCompanyCashCodeRel.CashAccount
						invoked.TransactionDate													= PaymentDate
						invoked.PostingDate														= PostDate
						invoked.CurrencyCode													= SettlementCurrency
						invoked.PayablesDistributionType										= "P" 
						invoked.CurrencyTable													= PayableCurrencyInfo.CurrencyTable
						invoked.TransactionAmount												= LocalPreviewAmount*-1

						
		AllocatePaymentToDetails is an Instance Action
			valid when (AllocatePaymentValid)
			default label is "AllocatePaymentToDetails"
			completion message is "Allocation_Of_Payment_Sent_To_The_Queue_For_Processing._Use_Refresh."
			Action Rules
				invoke AllocateHeaderPayment IntercompanyBillingSettlementDetail
					invoked.PrmIntercompanyBillingGroup				= IntercompanyBillingGroup
					invoked.PrmIntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader

		Release is an Instance Action
			valid when (ReleaseValid)
			Local Fields
				LocalFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
			Action Rules
				confirmation required
					"ReleasingAnIntercompanyBillingSettlementWillImpactBothReceivablesAndPayables.DoYouWishToProceed?"

				constraint (PaymentAmount = DerivedDetailPaymentTotal)
					"TotalPaymentOfDetailsDoesNotEqualHeaderTotalPayment."

				constraint (PaymentAmount entered)
					"TotalPaymentAmountMustBeEntered.SettlementDetailsCannotNetToZero"
					 
				constraint (!SettlementDetailHasNoPaymentRel exists)
					"NotAllDetailsHaveAPaymentAmount.EitherEnterAPaymentAmountOrRemoveTheInvoiceFromTheSettlement."

				if (not BypassReleasedSelectionsValidation)
					constraint (!SettlementDetailHasInvoiceNotReleasedRel exists)
						"Document<first SettlementDetailHasInvoiceNotReleasedRel.IntercompanyBillingDocumentHeader>HasAnInvoiceThatIsNotInAReleasedStatus."
				
				if (AllowSelectDistributionSet) 
					constraint (!SettlementDetailFundApplyOutOfBalanceRel exists)
						"The_\Distribution_\SetFor_\Billing_\Document<first SettlementDetailFundApplyOutOfBalanceRel.IntercompanyBillingDocumentHeader>Is_\Incomplete"
					if (not BypassReleasedSelectionsValidation)
						for each IntercompanyBillingSettlementDetailLine set
							constraint (!each.HasLineNotReleased)
								"Document<each.IntercompanyBillingDocumentHeader>HasASelectedLineThatIsNotInAReleasedStatus."
							if (each.IsReceivablesLine)
								constraint (all each.ICBReceivableApplyDistribution set.DistributionWasReleased)
									"Document<each.IntercompanyBillingDocumentHeader>HasASelectedDistributionThatWasNotReleased."
							if (each.IsPayablesLine)
								constraint (all each.ICBPayablesApplyDistribution set.DistributionWasReleased)
									"Document<each.IntercompanyBillingDocumentHeader>HasASelectedDistributionThatWasNotReleased."


				if (ReceivableCompany.CompanySystemClosingControlRel.Control)
					constraint (PostDate within ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate)
						"PostDateIsNotWithinValidEntryDatesForCompany<ReceivableCompany>;ValidDateRangeIs<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"


				if (IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.Control)
					constraint (PostDate within IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate)
						"PostDateIsNotWithinValidEntryDatesForCompany<IntercompanyBillingSettlementHeader.PayablesCompany>;ValidDateRangeIs<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"


				if (ReceivableIntercompanyBillingSettlementFeeRel exists)
					if (ReceivableCBCompanySystemClosingControlRel.Control)
						constraint (PostDate within ReceivableCBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateIsNotWithinValidEntryDatesForSystemCodeCBAndCompany<ReceivableCompany>;ValidDateRangeIs<ReceivableCBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<ReceivableCBCompanySystemClosingControlRel.ValidEntryDate.End>"


				if (PayableIntercompanyBillingSettlementFeeRel exists)
					if (PayableCBCompanySystemClosingControlRel.Control)
						constraint (PostDate within PayableCBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateIsNotWithinValidEntryDatesForSystemCodeCBAndCompany<IntercompanyBillingSettlementHeader.PayablesCompany>;ValidDateRangeIs<PayableCBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayableCBCompanySystemClosingControlRel.ValidEntryDate.End>"

				for each IntercompanyBillingSettlementPreviewDistributionRel
					invoke Delete each

				if (SettlementDetailCashBasisRel exists)
					increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
					TransientJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup

				include CreateReceivablePaymentHeader
				
				if (!SettlementDetailMultipleCurrencyRel exists
				and !SettlementDetailMultiplePayGroupRel exists) 

					include CreatePayablesPaymentHeader

					for each IntercompanyBillingSettlementDetail set
						invoke ReleaseDetails each
							invoked.PrmPayment	= LocalReceivablePayment.ReceivablePayment
				else
					invoke ReleaseMultiCurrencyDetails IntercompanyBillingSettlementDetail
						invoked.PrmIntercompanyBillingGroup				= IntercompanyBillingGroup
						invoked.PrmIntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader
						invoked.PrmReceivableCompany					= ReceivableCompany
						invoked.PrmReceivablePaymentHeader				= ReceivablePaymentHeader
						invoked.PrmReceivablePayment					= LocalReceivablePayment.ReceivablePayment
					
				if (HasBankFees)
					invoke ProcessBankFees IntercompanyBillingSettlementFee
						invoked.PrmIntercompanyBillingGroup				= IntercompanyBillingGroup
						invoked.PrmIntercompanyBillingSettlementHeader	= IntercompanyBillingSettlementHeader

				Status = Status.Released

			Exit Rules
				if (!SettlementDetailMultipleCurrencyRel exists
				and !SettlementDetailMultiplePayGroupRel exists)
					invoke OpenBatchUnreleased.Release ReceivablePaymentHeader
					invoke Unreleased.Release CashLedgerPayablesPayment

				if (SettlementDetailCashBasisRel exists)
					LocalFinanceEnterpriseGroup = IntercompanyBillingGroup
					invoke InitiateJournalizeForRunGroup LocalFinanceEnterpriseGroup
						invoked.PrmJournalizeGroup				= TransientJournalizeGroup
						invoked.PrmJournalizeGroupDescription	= JournalizationDescription

		UpdateIntercompanyBillingSettlementHeaderStatusToPendingReversal is an Instance Action	
			restricted
			Action Rules
				Status = Status.PendingReversal

		UpdateIntercompanyBillingSettlementHeaderStatusToReversed is an Instance Action	
			restricted
			Action Rules
				Status = Status.Reversed




































































































		ReverseSettlementStep2CreateAndReleaseRTMPayment is an Instance Action	
			valid when Status.PendingReversal
			disable multiple instance selection
			default label is "IntercompanySettlementReversal - Step 2 of 2"
			completion message is "Settlement<IntercompanyBillingSettlementHeader.SettlementID>HasBeenSubmittedForStep2OfReversal"

			Local Fields
				LocalFinanceEnterpriseGroup				is a FinanceEnterpriseGroup

			Action Rules

				invoke Create RTMPayment																		
					invoked.Company					 = ReceivableCompany
					invoked.Customer				 = IntercompanyBillingSettlementHeader.PayablesCompany.ReceivableCompany.ICBillingDefaultCustomer
					invoked.RTMPayment				 = IntercompanyBillingSettlementHeader.SettlementID
					invoked.ReceivablePaymentHeader	 = ReceivablePaymentHeader
					invoked.ReturnDate				 = ReversalDate


				invoke UnreleasedRtm.Release RTMPaymentRel															

				Status = Status.Reversed

		ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground is an Instance Action		
			valid when Status.Released
			disable multiple instance selection
			default label is "IntercompanySettlementReversal"	//-InitialActionNotInBackground-InvokedActionsNotInBackground"
			completion message is "Settlement<IntercompanyBillingSettlementHeader.SettlementID>HasBeenSubmittedForReversal."
			Parameters
				PrmPostDate			is Date
					default label is "PostDate"
				PrmComment			is a CommentText
					default label is "Comment"
			Local Fields
				LocalFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
			Parameter Rules
				PrmPostDate
					initial value is current corporate date
					default to current corporate date
					if (ReceivableCompany.CompanySystemClosingControlRel.Control)									
						constraint (PrmPostDate within ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate)
							"PostDateIsNotWithinValidEntryDatesForCompany<ReceivableCompany>;ValidDateRangeIs<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<ReceivableCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"
					if (IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.Control)	
						constraint (PrmPostDate within IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate)
							"PostDateIsNotWithinValidEntryDatesForCompany<IntercompanyBillingSettlementHeader.PayablesCompany>;ValidDateRangeIs<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<IntercompanyBillingSettlementHeader.PayablesCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"
					if (ReceivableIntercompanyBillingSettlementFeeRel exists)										
						if (ReceivableCBCompanySystemClosingControlRel.Control)
							constraint (PrmPostDate within ReceivableCBCompanySystemClosingControlRel.ValidEntryDate)
								"PostDateIsNotWithinValidEntryDatesForSystemCodeCBAndCompany<ReceivableCompany>;ValidDateRangeIs<ReceivableCBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<ReceivableCBCompanySystemClosingControlRel.ValidEntryDate.End>"
					if (PayableIntercompanyBillingSettlementFeeRel exists)											
						if (PayableCBCompanySystemClosingControlRel.Control)
							constraint (PrmPostDate within PayableCBCompanySystemClosingControlRel.ValidEntryDate)
								"PostDateIsNotWithinValidEntryDatesForSystemCodeCBAndCompany<IntercompanyBillingSettlementHeader.PayablesCompany>;ValidDateRangeIs<PayableCBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayableCBCompanySystemClosingControlRel.ValidEntryDate.End>"
			Entrance Rules


				constraint (DerivedPayablesPaymentNotProcessed)
					"CannotReverseSettlement;PayablesPaymentHasNotBeenProcessedThrough_Payment_Close"
				if (HasPayableBankFees)
					constraint (IntercompanyBillingSettlementHeader.PayablesCompany.ICBillingReverseBankFeeCode	entered)
						"CannotReverseSettlement;AccountsPayableCompany<IntercompanyBillingSettlementHeader.PayablesCompany>ReverseBankFeeCodeNotFound"
				if (HasReceivableBankFees)
					constraint (IntercompanyBillingSettlementHeader.ReceivableCompany.ICBillingReverseBankFeeCode entered)
						"CannotReverseSettlement;AccountsReceivableCompany<ReceivableCompany>ReverseBankFeeCodeNotFound"
				constraint (!ReceivablePaymentRel.ReceivablePaymentApplyReverseHeaderRel exists)					
					"CannotReverseSettlement;ReversalHeaderAlreadyCreated"
				constraint (!ReceivablePaymentRel.HasRTMs)
					"CannotReverseSettlement;RTMPaymentAlreadyExists"

				include UpdateIntercompanyBillingSettlementHeaderStatusToPendingReversalRuleBlock
				ReversalDate = PrmPostDate

				include ReverseAllInvoiceApplicationsIfCreditMemoApplicationsExistRuleBlock 



				include CreateAndReverseAllReceivablePaymentRelRuleBlock						


				include ReleaseReversalReceivablePaymentRelRuleBlock							


				include CreateRTMPaymentRuleBlock												
			Action Rules


				include UnreleasedReleaseRTMPaymentRelRuleBlock									


				include OpenVoidPayablesCashLedgerTransactionRuleBlock							


				include PaymentVoidStopPayUpdateRuleBlock										

				if (HasBankFees)

					include ReverseBankFeesRuleBlock											

				if (SettlementDetailWithholdingAmountRel exists)

					increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
					TransientJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup


				include ReverseSettledStatusSettledDocumentHeaderRelRuleBlock					
			Exit Rules

				if (SettlementDetailWithholdingAmountRel exists)
					LocalFinanceEnterpriseGroup = IntercompanyBillingGroup
					include InitiateJournalizeForRunGroupFinanceEnterpriseGroupRuleBlock

				include UpdateIntercompanyBillingSettlementHeaderStatusToReversedRuleBlock
