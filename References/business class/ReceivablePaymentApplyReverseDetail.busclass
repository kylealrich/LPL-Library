ReceivablePaymentApplyReverseDetail is a BusinessClass
	owned by ar
	prefix is RVT
	sql name is RPaymentApplyReverseDetail
	classic name is ARPMTRVDTL

	Ontology
		symbolic key is ReceivablePaymentApplyReverseDetail
			classic set name is RVTSET1
			classic name for ReceivablePaymentApplyReverseDetail.CreditCompany is CR-COMPANY
			classic name for ReceivablePaymentApplyReverseDetail.CreditBatchNumber is CR-BATCH-NBR
			classic name for ReceivablePaymentApplyReverseDetail.CreditPaymentSequence is CR-PAYMENT-SEQ
			classic name for ReceivablePaymentApplyReverseDetail.CreditApplicationSequence is CR-APP-SEQ

	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable

	Persistent Fields

		Company			is a GeneralLedgerCompany
		TransactionType	is a TransType
			classic name is TRANS-TYPE
		Invoice
		PaymentSequence	is a Sequence
			classic name is PAYMENT-SEQ
		ApplicationSequence
			classic name is APP-SEQ
		BatchNumber
			classic name is BATCH-NBR

	Field Rules

	Local Fields

		NativeLPLRTBODTrigger					is Boolean
		LocalTriggerFrom						is Alpha size 100
		LocalUpdateRecords						is AlphaUpper size 1
		LocalBankTransactionCode				is like BankTransactionCode
		LocalReceivablesJobResult				is like ReceivablesJobResult
		LocalFinanceEnterpriseGroup				is like FinanceEnterpriseGroup
		LocalGeneralLedgerCompanyGroup			is a GeneralLedgerCompanyGroup
		LocalBaseDebitCreditAdjustAmount		is an InternationalAmount

	Derived Fields

		DetailCount is a ComputeField
			type is Numeric 7
			restricted
			(instance count of ReceivablePaymentApplyReverseDetailsRel)

		DetailPostedApplicationCountNotReversed is a ComputeField
			type is Numeric 7
			restricted
			(instance count of ReceivablePaymentRel.PostedApplicationsAvailableToReverseRel)

		
	Conditions

		IsReceivablePayment
			restricted
			when (ReceivablePaymentRel exists)

		IsReceivableInvoiceDetail
			restricted
			when (ReceivableInvoiceDetailRel exists)

		IsReceivableApplication
			when (ReceivableApplicationRel exists)

	Relations
		ReceivableInvoiceApplyReverseDetailRel
			one-to-many relation to ReceivableInvoiceApplyReverseDetail
			Field Mapping uses Set2
				related.CreditCompany 			 = Company
				related.CreditBatchNumber		 = ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				related.CreditTransactionType	 = "P"
			Instance Selection
				where (related.CreditPaymentSequence = ReceivablePaymentApplyReverseDetail.CreditPaymentSequence)

		ReverseDeletionFundsTransferRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = TransactionType
				related.ReceivableInvoiceDetail.Invoice						 = Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = PaymentSequence
			Instance Selection
				where (related.CustomerGroup	 = ReceivablePaymentApplyReverseDetail.CreditCompany.CustomerGroupField.CustomerGroup
				and	related.ProcessingCompany	 = ReceivablePaymentApplyReverseDetail.CreditCompany)

		ReceivablePaymentApplyReverseHeaderRel
			classic name is ARPMTRVHDR
			one-to-one relation to ReceivablePaymentApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company														 = ReceivablePaymentApplyReverseDetail.CreditCompany
				related.ReceivablePaymentApplyReverseHeader.CreditBatchNumber		 = ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				related.ReceivablePaymentApplyReverseHeader.CreditPaymentSequence	 = ReceivablePaymentApplyReverseDetail.CreditPaymentSequence

		ReceivablePaymentRel
			classic name is ARPAYMENT
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = ReceivablePaymentApplyReverseDetail.CreditCompany
				related.ReceivablePaymentHeader	 = ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				related.ReceivablePayment		 = ReceivablePaymentApplyReverseDetail.CreditPaymentSequence

		PostedApplicationsAvailableToReverseRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany					= Company
				related.CreditTransaction.CreditBatch					= ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				related.CreditTransaction.CreditSequence				= ReceivablePaymentApplyReverseDetail.CreditPaymentSequence
			Instance Selection
				where (related.PostedCanBeReversed
				and related.ApplicationAmount.CurrencyAmount not entered)

		ReceivableInvoiceDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail

			Field Mapping uses symbolic key
				related.Company												 = Company 
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = TransactionType
				related.ReceivableInvoiceDetail.Invoice						 = Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = PaymentSequence 

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = TransactionType
				related.ReceivableInvoice		 = Invoice

		ReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-one relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = TransactionType
				related.ReceivableApplication.Invoice				 = Invoice
				related.ReceivableApplication.PaymentSeq			 = PaymentSequence
				related.ReceivableApplication.BatchNumber			 = BatchNumber
				related.ReceivableApplication.ApplicationSequence	 = ApplicationSequence

		ReceivableApplicationsRel
			one-to-one relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany					= Company
				related.CreditTransaction.CreditBatch					= ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				related.CreditTransaction.CreditSequence				= ReceivablePaymentApplyReverseDetail.CreditPaymentSequence
				related.Company										 	= Company
				related.ReceivableApplication.TransType				 	= TransactionType
				related.ReceivableApplication.Invoice				 	= Invoice
				related.ReceivableApplication.PaymentSeq			 	= PaymentSequence
				related.ReceivableApplication.BatchNumber			 	= BatchNumber
				related.ReceivableApplication.ApplicationSequence	 	= ApplicationSequence









		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= ReceivablePaymentApplyReverseDetail.CreditCompany

		ReceivablePaymentApplyReverseDetailsRel
			one-to-many relation to ReceivablePaymentApplyReverseDetail
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivablePaymentApplyReverseDetail.CreditCompany		 = ReceivablePaymentApplyReverseDetail.CreditCompany
				and   related.ReceivablePaymentApplyReverseDetail.CreditBatchNumber		 = ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				and   related.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence	 = ReceivablePaymentApplyReverseDetail.CreditPaymentSequence)

		ReceivablesJobErrorResultRel
			one-to-many relation to ReceivablesJobErrorResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup												= LocalFinanceEnterpriseGroup
				related.ReceivablesJobResult		 										= LocalReceivablesJobResult
			Instance Selection
				where (related.ReceivableApplication.CreditTransaction.CreditCompany	 	= ReceivablePaymentApplyReverseDetail.CreditCompany
				and    related.ReceivableApplication.CreditTransaction.CreditBatch	 		= ReceivablePaymentApplyReverseDetail.CreditBatchNumber
				and    related.ReceivableApplication.CreditTransaction.CreditSequence	 	= ReceivablePaymentApplyReverseDetail.CreditPaymentSequence)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = ReceivablePaymentApplyReverseDetail.CreditCompany

		ReceivablesJobResultRel
			one-to-one relation to ReceivablesJobResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ReceivablesJobResult	= LocalReceivablesJobResult

	Sets

		Set2
			indexed
			Sort Order
				Company
				TransactionType
				Invoice
				PaymentSequence
				ApplicationSequence
				ReceivablePaymentApplyReverseDetail

	Rule Blocks
		CommonEdits
			if (ReceivableApplicationRel.ChargebackAdjustmentRel exists)
				constraint (ReceivableApplicationRel.Company.CreditChargebackPrefix entered)
					"MustEstablishCreditChargebackPrefixForCompany"  

			if (ReceivableApplicationRel.ReceivableApplication.TransType.CustomerPayment)
				constraint (!ReceivableApplicationRel.TransferAdjustmentRel exists)
					"CannotReverse-PaymentWriteOffEstablishedANewPayment"  
			else
				constraint (!ReceivableApplicationRel.ReceivableInvoiceApplyReverseHeaderRel exists)
					"InvoiceReversalHeaderAlreadyExistsForThisApplication" 

			constraint (!ReceivableApplicationRel.ReceivablePendingAdjustmentRel exists)
				"CannotReverse-PendingAdjustmentExists"

			constraint (ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate >= ReceivableApplicationRel.GeneralLedgerDate)
				"ReversalPostDateMustBeGreaterThanApplicationPostDate<ReceivableApplicationRel.GeneralLedgerDate>" 
		
		ProcessReversePaymentDetail
			invoke ApplicationPosted.Reverse ReceivableApplicationRel
				if (initiating action = "ReversePayment")
					invoked.PrmReceivablesJobResult = LocalReceivablesJobResult
					invoked.PrmUpdateRecords 		= LocalUpdateRecords
					invoked.PrmReversalSource		= "PR"

			if(Company.FinanceEnterpriseGroup.BODTrigger) 
				invoke TriggerReceivableTransaction ReceivableInvoiceRel


			if  (!TransactionType.CustomerPayment
			and  ReceivableInvoiceDetailRel.OpenAmount entered
			and  ReceivableInvoiceDetailRel.BankTransactionCode.BankTransactionType.CashPayment
			and  ReceivableInvoiceDetailRel.BankTransactionCode.TransactionOrigin.Receivable)
				invoke EFTUpdate ReceivableInvoiceDetailRel
					invoked.EftAction			= blank
					invoked.EftExtract			= 0
					invoked.EFTNotification		= 0
					if (LocalBankTransactionCode entered)
						invoked.BankTransactionCode = LocalBankTransactionCode


				invoke Delete ReverseDeletionFundsTransferRel

	Actions
		Create is a Create Action
			Action Rules
				include CommonEdits

		Update is an Update Action
			Action Rules
				include CommonEdits

		Delete is a Delete Action
		
		Purge is a Purge Action
			restricted

		ReverseForIntercompanySettlementReversal is an Instance Action	
			restricted
			Action Rules
				constraint (ReceivablePaymentApplyReverseHeaderRel exists)
					"ReversalHeaderRecordDoesNotExist"

				constraint (ReceivableApplicationRel exists)
					"ApplicationDoesNotExist"

				invoke ApplicationPosted.Reverse ReceivableApplicationRel

				invoke TriggerReceivableTransaction ReceivableInvoiceRel



				if  (!TransactionType.CustomerPayment
				and  ReceivableInvoiceDetailRel.OpenAmount entered
				and  ReceivableInvoiceDetailRel.BankTransactionCode.BankTransactionType.CashPayment
				and  ReceivableInvoiceDetailRel.BankTransactionCode.TransactionOrigin.Receivable)
					invoke EFTUpdate ReceivableInvoiceDetailRel
						invoked.EftAction		= blank
						invoked.EftExtract		= 0
						invoked.EFTNotification	= 0


					invoke Delete ReverseDeletionFundsTransferRel

				invoke Delete

		ReverseSet is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmCreditBatchNumber		is Numeric size 12
				PrmCreditPaymentSequence	is Numeric size 6
				PrmBankTransactionCode		is a BankTransactionCode

			Parameter Rules

			Instance Selection
				where (ReceivablePaymentApplyReverseDetail.CreditCompany = PrmCompany
				and	ReceivablePaymentApplyReverseDetail.CreditBatchNumber = PrmCreditBatchNumber
				and	ReceivablePaymentApplyReverseDetail.CreditPaymentSequence = PrmCreditPaymentSequence)

			Action Rules
				Instance Rules



					constraint (ReceivableApplicationRel exists)
						"ApplicationDoesNotExist"
					if (PrmBankTransactionCode entered)
						LocalBankTransactionCode = PrmBankTransactionCode
					include ProcessReversePaymentDetail






		ReversePayment is a Set Action		
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmCompany					is a Company
				PrmReceivablesJobResult		is a ReceivablesJobResult
				PrmIsCreate 				is Boolean
				PrmUpdateRecords			is AlphaUpper size 1
					States
						No		value is "N"
						Yes		value is "Y"

			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupRequired"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

			Instance Selection
				where ((PrmCompanyGroup not entered
				or	  GeneralLedgerCompanyGroupRel exists)
				and	  (PrmCompany not entered
				or	  ReceivablePaymentApplyReverseDetail.CreditCompany = PrmCompany))

			Local Fields
				InvoicePaid										is Boolean
				LocalErrorOccured								is Boolean
				LocalErrorMessage								is Alpha 200
				LocalReverseHeader								is like ReceivablePaymentApplyReverseHeader
				LocalCreditBatchNumber							is a CrBatchNbr
				LocalCreditPaymentSequence 						is a CrPaymentSeq
				LocalReceivablesJobResultView					is a ReceivablesJobResult view
				SumApplicationsFunctionalCurrencyAmountDone 	is Boolean

			Rule Blocks
				SumApplicationsFunctionalCurrencyAmount
					if (!SumApplicationsFunctionalCurrencyAmountDone)
						LocalBaseDebitCreditAdjustAmount = sum PostedApplicationsAvailableToReverseRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						SumApplicationsFunctionalCurrencyAmountDone = true

			Action Rules
				Empty Set Rules
					if (!PrmIsCreate)
						invoke Create ReceivablesJobResult
							assign result to LocalReceivablesJobResultView
							invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
							invoked.PrmCompanyGroup					= PrmCompanyGroup
							invoked.PrmCompany						= PrmCompany
							invoked.RunTime							= current timestamp
							invoked.JobType							= 2

						invoke UpdateStatusOnResult LocalReceivablesJobResultView.ReceivablesJobResult
							initialize invoked.PrmRecordsExists
					else
						LocalReceivablesJobResult 		= PrmReceivablesJobResult
						LocalFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoke FastUpdate ReceivablesJobResultRel
							invoked.PrmRecordsExist = false

				Set Rules
					Entrance Rules
						LocalBankTransactionCode = ReceivablePaymentApplyReverseHeaderRel.BankTransactionCode
						if (!PrmIsCreate)
							invoke Create ReceivablesJobResult
								assign result to LocalReceivablesJobResultView
								invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
								invoked.PrmCompanyGroup					= PrmCompanyGroup
								invoked.PrmCompany						= PrmCompany
								invoked.RunTime							= current timestamp
								invoked.JobType							= 2

							PrmReceivablesJobResult 		= LocalReceivablesJobResultView.ReceivablesJobResult
							invoke UpdateStatusOnResult LocalReceivablesJobResultView.ReceivablesJobResult
								invoked.PrmRecordsExists 	= true
						else
							LocalReceivablesJobResult 		= PrmReceivablesJobResult
							LocalFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoke FastUpdate ReceivablesJobResultRel
								invoked.PrmRecordsExist = true

				Instance Rules
					initialize LocalErrorOccured
					if (ReceivablePaymentRel not exists)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							if (TransactionType = "P")
								invoked.Customer							= ReceivablePaymentApplyReverseHeaderRel.CreditCustomer
							else
								invoked.Customer							= ReceivableApplicationRel.DebitCustomer
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
							invoked.ErrorMessage							= "Payment "+ReceivablePaymentApplyReverseHeaderRel.CreditTransactionNumber+" does not exist - cannot reverse."		
							invoked.UpdateRecords							= PrmUpdateRecords
					else
					if (ReceivablePaymentRel.CancelledOrTransferred)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Payment "+ReceivablePaymentRel.PaymentNumber+ " has been transferred or canceled."		
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (!TransactionType.CustomerPayment
					and ReceivableInvoiceDetailRel not exists)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Transaction "+ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType+" "+ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice+"does not exist- cannot process."		
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.IsZeroPayment
					and DetailCount != DetailPostedApplicationCountNotReversed)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "All applications must be selected for reversal for a zero amount payment "+ReceivablePaymentRel.PaymentNumber+" ."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Customer "+ReceivablePaymentRel.Customer+" is balance forward - payment "+ReceivablePaymentRel.PaymentNumber+" cannot be reversed."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.UnreleasedOrUnassigned)
						LocalErrorOccured = true
						LocalErrorMessage = "Payment " +ReceivablePaymentRel.PaymentNumber+ " unreleased or has unposted application - not eligible for reversal."
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= LocalErrorMessage
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.IsHistorical)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Payment "+ReceivablePaymentRel.PaymentNumber+" is historical - payment company does not allow historical application reversal."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (!ReceivablePaymentRel.TypeOfPayment.CustomerPayment)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Non ar payment "+ReceivablePaymentRel.PaymentNumber+" - not eligible for reversal."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivableInvoiceApplyReverseDetailRel exists)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Receivable invoice reversal already pending for this payment "+ReceivablePaymentRel.PaymentNumber+" ."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.HasPendingAPTransfer)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Unreleased accounts receivable to accounts payable interface records exist."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.HasRTMs)
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Cannot add application for rtm payment"
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
					if (ReceivablePaymentRel.AppliedAmount entered
					and ReceivablePaymentRel.CreditAppliedAmount entered
					and ReceivablePaymentRel.TransientPaymentReversalNewOpenAmount < 0 )
						LocalErrorOccured = true
						invoke Create ReceivablesJobErrorResult
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.ReceivablesJobResult					= PrmReceivablesJobResult
							invoked.Company									= Company
							invoked.Customer								= ReceivableApplicationRel.DebitCustomer
							invoked.ErrorMessage							= "Cannot reverse credit memo application without reversing invoices."
							invoked.UpdateRecords							= PrmUpdateRecords
							invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
							invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
							invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
							invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
							invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
							invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
							if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
								invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
					else
						if (!LocalErrorOccured)
							if (ReceivableApplicationsRel.CreditTransaction.CreditSequence != ReceivablePaymentApplyReverseDetail.CreditPaymentSequence)
								initialize InvoicePaid
							if (LocalReverseHeader entered
							and	LocalReverseHeader != ReceivablePaymentApplyReverseHeaderRel.ReceivablePaymentApplyReverseHeader)
								initialize InvoicePaid
							if (ReceivableApplicationsRel.ReceivableApplication.TransType	 = "P"
							and ReceivableApplicationsRel.CreditTransaction.CreditType		 = "P"
							and !InvoicePaid)
								if (ReceivableApplicationsRel.ReceivableApplicationAdjustmentForReversalRel.ReceivableAdjustType.CreditMemoOrigin)
									LocalErrorOccured = true
									invoke Create ReceivablesJobErrorResult
										invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
										invoked.ReceivablesJobResult					= PrmReceivablesJobResult
										invoked.Company									= Company
										invoked.Customer								= ReceivableApplicationRel.DebitCustomer
										invoked.ErrorMessage							= "Transaction ineligible payment "+ReceivablePaymentRel.PaymentNumber+" turned to credit."
										invoked.UpdateRecords							= PrmUpdateRecords
										invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
										invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
										invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
										invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
										invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
										invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
										invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
										if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
											invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
										else
											invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
										invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication
							else
							if (ReceivableApplicationsRel.ReceivableApplication.TransType	 = "I"
							and ReceivableApplicationsRel.CreditTransaction.CreditType 		 = "P"
							and ReceivablePaymentRel.PaymentOpen != 0)
								InvoicePaid = true

					if (!LocalErrorOccured
					and	ReceivablePaymentRel.CreditAppliedAmount entered
					and TransactionType.CreditMemo)
						if (LocalReverseHeader entered
						and	LocalReverseHeader != ReceivablePaymentApplyReverseHeaderRel.ReceivablePaymentApplyReverseHeader)
							initialize LocalBaseDebitCreditAdjustAmount
						include SumApplicationsFunctionalCurrencyAmount
						if (LocalBaseDebitCreditAdjustAmount > ReceivablePaymentRel.TransactionAmount)
							LocalErrorOccured = true
							invoke Create ReceivablesJobErrorResult
								invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
								invoked.ReceivablesJobResult					= PrmReceivablesJobResult
								invoked.Company									= Company
								invoked.Customer								= ReceivableApplicationRel.DebitCustomer
								invoked.ErrorMessage							= "Reversal for adjustments required."
								invoked.UpdateRecords							= PrmUpdateRecords
								invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
								invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
								invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
								invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
								invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
								invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
								invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
								if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
									invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
								else
									invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
								invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication

					if (!LocalErrorOccured)
						if (CompanySystemClosingControlRel.Control
						and ReceivablePaymentApplyReverseDetail.CreditCompany.VerifyGLDateWithinGLDateRange
						and ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
							LocalErrorOccured = true
							invoke Create ReceivablesJobErrorResult
								invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
								invoked.ReceivablesJobResult					= PrmReceivablesJobResult
								invoked.Company									= Company
								invoked.Customer								= ReceivableApplicationRel.DebitCustomer
								invoked.ErrorMessage							= "Delete reversal header and re-create. Post date "+ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate+" "+"is not within valid entry dates for company "+ReceivablePaymentApplyReverseDetail.CreditCompany+";"+"Valid date range is "+CompanySystemClosingControlRel.ValidEntryDate.Begin+"-"+CompanySystemClosingControlRel.ValidEntryDate.End
								invoked.UpdateRecords							= PrmUpdateRecords
								invoked.PostDate								= ReceivablePaymentRel.GeneralLedgerDate
								invoked.PaymentAmount							= ReceivablePaymentRel.TransactionAmount
								invoked.ReverseHeaderGLDate						= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
								invoked.OriginalCurrency						= ReceivablePaymentRel.OriginalCurrency
								invoked.ReversalOperator						= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
								invoked.TransactionType							= ReceivablePaymentApplyReverseDetail.TransactionType
								invoked.Invoice									= ReceivablePaymentApplyReverseDetail.Invoice
								if (ReceivablePaymentApplyReverseDetail.TransactionType != "P")
									invoked.TransactionDate						= ReceivableInvoiceDetailRel.TransactionDate
								else
									invoked.TransactionDate						= ReceivablePaymentRel.GeneralLedgerDate
								invoked.ReceivableApplication					= ReceivableApplicationRel.ReceivableApplication


					LocalReverseHeader = ReceivablePaymentApplyReverseHeaderRel.ReceivablePaymentApplyReverseHeader
					if (!LocalErrorOccured)
						if (PrmUpdateRecords = "Y")
							LocalUpdateRecords = "Y"
							if (!PrmIsCreate)
								LocalReceivablesJobResult 	= LocalReceivablesJobResultView.ReceivablesJobResult
								LocalFinanceEnterpriseGroup = LocalReceivablesJobResultView.ReceivablesJobResult.FinanceEnterpriseGroup
							else
								LocalReceivablesJobResult 	= PrmReceivablesJobResult
								LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							include ProcessReversePaymentDetail
							if (instance count of ReceivablePaymentApplyReverseDetailsRel != 1)
								invoke Delete
							else
								if (ReceivablesJobErrorResultRel not exists)
									invoke Delete ReceivablePaymentApplyReverseHeaderRel
						else
							invoke ApplicationPosted.Reverse ReceivableApplicationRel
								invoked.PrmReceivablesJobResult = PrmReceivablesJobResult
								invoked.PrmUpdateRecords 		= PrmUpdateRecords
								invoked.PrmReversalSource		= "PR"
