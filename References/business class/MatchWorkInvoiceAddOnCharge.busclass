MatchWorkInvoiceAddOnCharge is a BusinessClass
    owned by ma
    prefix is MWMAA

    Ontology
        symbolic key is MatchWorkInvoiceAddOnCharge

    Patterns

        disable AuditIndex
        disable Auditing
        disable EffectiveDated
      	disable DataTranslations

    Persistent Fields
    	Vendor
        Item
		ItemType
        MatchDetailKey
        MatchAmount								is an InternationalAmount
        MatchedQuantity							is like Quantity
            precision is DerivedNumberOfDecimalsQuantity
        MatchUnitCost							is like UnitCost
            precision is DerivedNumberOfDecimalsCost
		Selected								is Boolean

		MatchToReceipt							is Boolean
		MatchSub								is Numeric 3
		MatchedNotReceivedQuantity				is like Quantity
		DifferenceAmount						is an InternationalCost
		UnmatchedAmount							is an InternationalAmount
		RecordSource							is a RecSource
        LineDistributionHasAmount				is Boolean								
		TaxableAmount							is an InternationalAmount 	
        OpenToMatchQuantity						is a Quantity
		CreateChargeback						is Boolean
				
		RetainagePercent						is a Pct

		EnteredLandTaxUnitCost					is a UnitCost				
		MatchLandTaxUnitCost					is a UnitCost				
		ApprovedUnitCost						is a UnitCost				
		ApprovedLandTaxUnitCost					is a UnitCost				

		NonTaxEnteredUnitCost					is a UnitCost				
		ApprovedAddOnChargeLandTaxUnitCost		is a UnitCost				
		EnteredAddOnChargeLandTaxUnitCost		is a UnitCost				
		NonTaxApprovedUnitCost					is a UnitCost				
		NonTaxMatchUnitCost						is a UnitCost				

		MatchReconQueueSet
		ChargebackReason						is a ProcurementReasonCode

	Context Fields
		FinanceResource
		MatchReconQueue
		
	Transient Fields
		OverrideDetail							is Boolean
		OverrideAOCDetail						is Boolean
		TermsCalculation														
		InvoiceCurrencyExchangeRate				is like Rate			
		CalculateTax												
		WorkDistributionGroup					is a MatchWorkDistributionGroup
		UserElementGroup							
		

	Local Fields
		LocalAutoMatchResult					is an AutoMatchResult			      
		TaxLineItemView							is a TaxLineItem view
		MatchedNotReceivedCount					is Numeric 3				
		CurrentReceipt							is like PurchaseOrderReceipt
		CurrentReceiptLine						is like PurchaseOrderReceiptLine
		LocalMatchWorkInvoiceAddOnCharge		is like PayablesInvoiceAddOnCharge


		
		ThisPurchaseOrder						is like PurchaseOrder
		ThisPurchaseOrderLine					is like PurchaseOrderLine
		ThisReceipt								is like PurchaseOrderReceipt
		ThisReceiptLine							is like PurchaseOrderReceiptLine
		ThisAddOnCharge							is like AddOnCharge

		LocalOriginalInvoiceAddOnCharge			is like PayablesInvoiceAddOnCharge

		LocalPOAddOnCharge						is like PayablesInvoiceAddOnCharge
		
		WorkChargebackInvoice					is like PayablesInvoice			
		NewDistribution							is a PayablesInvoiceDistribution view
		OriginalInvoice							is like PayablesInvoice

		LocalCurrencyRelationship				is a CurrencyRelationship


		DistributionProcessLevel				is like PayablesProcessLevel
		LocalDefaultAccount						is a FinanceCodeBlock
		TempAccount								is a FinanceCodeBlock
		WorkToleranceAccount					is a FinanceCodeBlock

        LocalCurrencyTable                      is a CurrencyTable
        LocalExchangeDate						is an ExchangeDate
		CurrencyWork							is a FromCurrencyExchangeGroup
		TranCurrRelationship					is a CurrencyRelationship
		TranCurrExchangeRate    				is a CurrExchangeRate

		Sub1									is Numeric 3

		I9										is Numeric 3
		Idx										is Numeric 3
		NextSentence							is Boolean
		LocalCreateTaxDistribs					is Boolean 
		
		LocalCalculateTaxExecuted				is Alpha 1				


		UOMCalculation




		ThisOnePassed							is Boolean
		Do712Continue							is Boolean	
		ChargebackMatchedNotReceived			is Numeric 1						
		MNRDistrib								is Boolean						
		AocToDifference							is Boolean						
		TaxTolerance							is Boolean						
		PayablesChargebackIndicator				is Boolean						
		Include993								is Boolean









		MatchSub1								is Numeric 3					
		

















		BestReceiptDate							is Date						




		InvoiceMatchedNotReceived				is Boolean					

		PendingDistributions					is Boolean					
		ExcessQuantity							is like Quantity			

		

		TotalMatchedQuantity					is like Quantity			



		ReceiptLineReceivedQuantity				is like Quantity    		
		TempMatchedQuantity						is like Quantity    		
		TempVbuyMatchQuantity					is like Quantity    		
		PreviousMatchedQuantity					is like Quantity    		

		ServiceLineChargebackAmount				is an InternationalAmount   
		ServiceLineChargebackQuantity			is like Quantity				
		ServiceLineChargebackUnitCost			is like UnitCost				
		SaveServiceLineChargebackQuantity 		is like Quantity				





		DistributionDetailMatchAmount			is an InternationalAmount	


		SkipPostings							is Boolean					
		TotalDistributionAmount					is an InternationalAmount	
		NewOpenPurchaseOrderAmount				is an InternationalAmount	

		ReceivedNotInvoicedQuantity				is a Quantity				
		LocalEnteredUnitCost					is a UnitCost				
		LocalMatchUnitCost						is a UnitCost				
		AdjustedMatchUnitCost					is a UnitCost				

		LocalMatchedQuantity					is a Quantity				


		LocalUnmatchedQuantity					is a Quantity				


		LocalVendorPriceQuantity				is a Quantity				


		LocalCostAdjustQuantity 				is a Quantity				
		LocalTotalReceivedQuantity				is a Quantity				

		NewPOLineMatchedQuantity				is a Quantity				

		NewPOLineMemoQuantity					is a Quantity				

		ProcessMatchExcess						is Numeric 1				
			States
				Chargeback						value is 1
				Writeoff						value is 2
				MatchedNotReceived				value is 3
				
		NewPOLineChargebackQuantity				is a Quantity				

		NewPOLineWriteoffQuantity				is a Quantity				
		NewPOLineMatchedNotReceived				is a Quantity				
		NewInvoiceLinkMatchedNotReceivedQuantity	is a Quantity			
		NewInvoiceLinkChargebackQuantity		is a Quantity				
		NewInvoiceLinkWriteoffQuantity			is a Quantity				
		NewInvoiceLinkMemoQuantity				is a Quantity				
		NewReceiptLineMatchedQuantity 			is a Quantity 				

		NewInvoiceLinkMNRUnitCost				is a UnitCost				
		NewInvoiceLinkMNRAmount					is an InternationalAmount	

		NewInvoiceLinkMNRToleranceUnitCost		is a UnitCost				


		NewInvoiceLinkMNRToleranceTaxUnitCost	is a UnitCost				
		NewInvoiceLinkICVQuantity				is a Quantity				
		NewInvoiceLinkICVUnitCost				is a UnitCost				
		NewInvoiceLinkICVAmount					is an InternationalAmount	
		NewInvoiceLinkMatchUnitCost				is a UnitCost				
		NewInvoiceLinkICVToleranceQuantity		is a Quantity				
		NewInvoiceLinkICVToleranceUnitCost		is a UnitCost				
		NewInvoiceLinkICVToleranceAmount		is an InternationalAmount	
		NewInvoiceLinkPOCostUpdate 				is an InternationalAmount	


		LocalMatchedAmount 						is an InternationalAmount 	
		Work1ReceivedQuantityToMatch				is a Quantity				
		Work2ReceivedQuantityToMatch				is a Quantity				


        WorkReceiptConversionRate    			is an EnteredCurrencyConversionRate  

		ChargebackDetailSequenceNumber			is a SequenceNumber			
				
		DetailsMatchedQuantity              	is a Quantity				
		DetailsMatchUnitCost                	is a UnitCost				
		DetailsVBuyMatchedQuantity          	is a Quantity				

		DetailsSequenceNumber					is a SequenceNumber			
		DetailsAddOnCharge						is like AddOnCharge			

		DetailsInvoiceType						is like InvoiceType			
        DetailsBuyUOMMatchedQuantity       		is a Quantity				
        DetailsEnteredUnitCost					is a UnitCost				
        DetailsEnteredQuantity					is a Quantity				
		DetailsLandedAddOnCharge				is Boolean					
		DetailsRetainLandedAddOnCharge			is Boolean					
		DetailsProductTaxCategory				is like ProductTaxCategory	

		DetailsTaxAmount						is an InternationalAmount	

		LocalLocation							is like InventoryLocation
				
		MatchedNotReceivedExchangeVariance		is Boolean					
		CostChargeback							is Boolean					

		DistributionUnitCost					is a UnitCost				
		CurrentCostDifference					is a UnitCost				
		CostDifference							is a UnitCost				

		MatchedNotReceivedWriteoffQuantity		is a Quantity				
		WorkMatchedNotReceivedQuantity			is a Quantity				


		WorkArchiveQuantity						is a Quantity				
		PendingDistributionAmount				is an InternationalAmount	
		WorkVarianceQuantity					is a Quantity				

		DistributionCompany						is like Company				
		WorkPoDate								is Date						
		AmMatchedQuantity						is like Quantity  			
		RetainedTotalAmount						is an InternationalAmount   
		WorkAccrualCode							is like PayablesAccrualCode	
		
		WorkLandedAddOnCharge					is Boolean					
		WorkRetainLandedAddOnCharge				is Boolean					
		
		ApOnlyLandTaxUnitCost 					is a UnitCost 				
					
		WorkPostingSwitch						is Numeric 1				
        	States
        		TaxGoods			value is 1
        		TaxVariance			value is 2
        		TaxTolerance		value is 3
        		MatchNotReceived	value is 4
        		Writeoff			value is 5
        		TaxWriteoff			value is 6

		WorkInvoiceDetailMatchedNotReceivedQuantity is a Quantity			
		WorkChargebackQuantity 					is a Quantity				


		MtxTotalTaxAmt							is an InternationalAmount	
		MtxPrevMatchQty							is a Quantity				
		MtxMatchedQuantity						is a Quantity
		MtxMatchUnitCost						is a UnitCost

		MtxTaxableAmount						is an InternationalAmount

		WorkTotalTaxAmount 						is an InternationalAmount	
		ChargebackTaxableAmount 				is an InternationalAmount	

		RemainingUnitCost						is a UnitCost				
		SaveRemainingUnitCost					is a UnitCost				
		LastTaxCode								is like TaxCode				



		PurchaseOrderInvoiceTax 				is an InternationalAmount	


        


		TaxWorkCalculateTaxRate					is a CurrencyRate			
		TaxWorkAccrualFlag						is Alpha 1					
		TaxWorkCalculateAccrual 				is Alpha 1					
		TaxWorkTaxableAmount					is an InternationalAmount	










		WorkPercent								is a Percent				

		WorkCost							is like InternationalCost
		WorkQuantity						is like Quantity



		SaveUnmatchedQuantity					is a Quantity				
		FirstDistQuantity						is a Quantity				

		DetailDistAmount						is a Quantity				

		RemainingDistAmount						is an InternationalAmount	
		WorkDistQuantity 						is a Quantity  				







				


		PerformedFrom							is Numeric 1				
			States
				Match			value is 1
				BatchRelease	value is 2
				POADI			value is 3
				MA61			value is 4
				Contract    	value is 5



		NewMiscellaneousAddOnChargeInvoicedAmount	is like InternationalAmount

		LocalVendorPriceMatchedQuantity		is like Quantity
		LocalMiscAOC						is like InternationalAmount

		TotalTax3dp								is an InternationalAmount	
		DetailsTax3dp							is an InternationalAmount	
		TotalGoods								is an InternationalAmount	
		CalcTaxRate								is an OrigRate					


		UsePODate								is Boolean					
		TemporaryTaxType						is a TaxType				
		POTaxDate								is Date						
		WorkTaxAmount							is an InternationalAmount	
		WorkTaxUnitCost							is a UnitCost				

				
		ConvertedCost							is like UnitCost			

        WorkVendorPriceUOM                   	is like UnitOfMeasure		
        WorkVendorPriceUOMMultiplier         	is like UOMMultiplier		
        WorkVendorBuyUOM                   		is like UnitOfMeasure		
        WorkVendorBuyUOMMultiplier         		is like UOMMultiplier		

		TaxOnly									is Boolean
		LocalTaxCode							is a TaxCode
		CalculateTaxCode						is a TaxCode
		LocalSumDistribUpdateDone				is Boolean
		SaveNonTaxEnteredUnitCost				is like UnitCost
		LocalVertexDistributionAccount      	is a FinanceCodeBlock
		LocalInventoryLocation					is like InventoryLocation


	Conditions

		MemoInvoice
			restricted
			when ((PayablesInvoice.InvoiceType.DebitMemo
			or     PayablesInvoice.InvoiceType.CreditMemo)
			and   !PayablesInvoice.MatchProcessType.AOCOnly
			and   !PayablesInvoice.MatchProcessType.Expense)

		CreditForRebill
			restricted
			when (PayablesInvoice.InvoiceType.CreditMemo
			and   PayablesInvoice.InvoiceSource = "Y" 
			and   PayablesInvoice.MatchInvoiceReferenceRel exists)

		DoChargeback
			restricted
			when (CreateChargeback
			or    MatchReconQueue.ChargebackIncludeAOC)
									
		InternalDetailsExist
			restricted
			when (InternalDetailsRel exists)
												
		OneSourceGeneric
			when (TaxEntityRel.ThirdParty.Sabrix
			and   PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)

		CostAndQuantityOverage 
			when (ThisReceiptLineAOCRel exists
			and   ThisReceiptLineAOCRel.UnmatchedQuantity entered  
			and   DetailsMatchedQuantity > ThisReceiptLineAOCRel.UnmatchedQuantity 
			and   NonTaxMatchUnitCost > NonTaxEnteredUnitCost)
		
	Derived Fields
		ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MatchedNotReceivedQuantity)			

		ThisReceiptInvoiceLinkTotalIcvTolUcst is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.IcvTolUcst)

		TotalThisReceiptInvoiceLinkIcvUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.IcvUcst)

		TotalThisReceiptInvoiceLinkMNRTaxUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MatchedNotReceivedTaxUnitCost)

		TotalThisReceiptInvoiceLinkMNRToleranceUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MnrTolUcst)
			



			
		ReceiptInvoiceLinkMatchedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PurchaseOrderReceiptInvoiceLinkMatchRel.MatchAmount)
			
		DerivedExtendedMatchAmount is a DerivedField
			type is like InternationalCost
			return (MatchedQuantity * MatchUnitCost)

		OverbillAmount is a DerivedField
			type is like InternationalCost

			WorkCost = (DerivedExtendedMatchAmount - sum MatchWorkPOLineAOCRel.DerivedExtendedMatchAmount)
			if (WorkCost > 0)
				return WorkCost
								    
		TotalReceiptLineAOC is a DerivedField
			type is like InternationalCost

			return sum MatchWorkPOLineAOCRel.DerivedExtendedMatchAmount
								    
		NetAmount is a DerivedField
			type is like InternationalCost

			return (DerivedExtendedMatchAmount - sum MatchWorkPOLineAOCRel.DerivedExtendedMatchAmount)
    
		DerivedItemType is a DerivedField
			type is Alpha 1
			if (ItemType.Inventoried)
				return "I"
			else
			if (ItemType.NonStock)
				return "N"
			else
			if (ItemType.Special)
				return "X"
			else
			if (ItemType.Service)
				return "S"

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
				
		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8

		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2
					
		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001


		ChargebackYesOrNo is a DerivedField
			type is Alpha 10
			restricted
			if (CreateChargeback)
				return "Yes"
			else
				return "No"

		SingleSpace is a StringField
			type is Alpha 1
			restricted
			" "

		DerivedRoundToCost is a DerivedField
			type is like RoundTo
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)	
				return 0.00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return 0.0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return 0.001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return 0.01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return 0.1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1

		DerivedTaxPointDate2 is a DerivedField	
			type is Date
			restricted
			if (PayablesInvoiceAddOnChargeRel.TaxCode.DerivedTaxPoint = "G")
				return PayablesInvoice.DistributionDate
			else
			if (PayablesInvoiceAddOnChargeRel.TaxCode.DerivedTaxPoint = "P" 
			and PayablesInvoice.DerivedPaymentDate entered)
				return PayablesInvoice.DerivedPaymentDate
			else
				return PayablesInvoice.InvoiceDate

	Relations

		MatchWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice

 		PayablesInvoiceAddOnChargeRel
            one-to-one relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
                related.Contract	  				= Contract
                related.ContractLine    			= ContractLine
				related.AddOnCharge					= AddOnCharge
				related.PayablesInvoiceAddOnCharge	= MatchWorkInvoiceAddOnCharge
				
		TaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company					= Company
				related.Invoice					= PayablesInvoice.Invoice

 		ExactInvoiceDetailRel
            one-to-one relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
                related.Contract	  				= Contract
                related.ContractLine    			= ContractLine
                related.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge

 		PayablesInvoiceDetailRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 					= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
                related.Contract	  				= Contract
                related.ContractLine    			= ContractLine

		MatchWorkReceiptLineAOCRel
			one-to-one relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.AddOnCharge					= AddOnCharge
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine

		MatchWorkReceiptLineItemRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey						= MatchDetailKey
				related.AddOnCharge					= AddOnCharge

		MatchWorkReceiptLineForPOLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey						= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		MatchWorkPOLineAOCRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.AddOnCharge					= AddOnCharge
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		MatchWorkNoReceiptLineAOCRel
			one-to-one relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey						= MatchDetailKey
				related.AddOnCharge					= AddOnCharge
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= blank
				related.PurchaseOrderReceiptLine	= blank

 		MatchWorkInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.Contract					= Contract
				related.ContractLine				= ContractLine
				related.PayablesInvoice				= PayablesInvoice

		PurchaseOrderLineDistributionRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= PurchaseOrder
                related.PurchaseOrderLine				= PurchaseOrderLine

            Instance Selection
                where  (related.AddOnCharge				= LocalPOAddOnCharge)

 		ContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= Contract
                related.ContractLine					= ContractLine

		ThisPurchaseOrderReceiptLineRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine

		ReceiptLinesForPurchaseOrderAndItemRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set4
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.ShipToLocation				= LocalLocation
				related.MatchDetailKey				= MatchDetailKey 
				related.PurchaseOrderLine			= PurchaseOrderLine

		InvoiceDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder				= PurchaseOrder
				and     related.PurchaseOrderLine			= PurchaseOrderLine
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder				= PurchaseOrder
				and     related.PurchaseOrderLine			= PurchaseOrderLine
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						entered
				and     related.NotMatchCreated)
			
 		InvoiceDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract			= Contract
				and     related.ContractLine				= ContractLine
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract			= Contract
				and     related.ContractLine				= ContractLine
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						entered
				and     related.NotMatchCreated)
			
		MiscellaneousInvoiceDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrderLine			= blank
				and     related.ContractLine				= blank
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						= blank
				and     related.NotMatchCreated)
			
		MiscellaneousInvoiceTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrderLine			= blank
				and     related.ContractLine				= blank
				and     related.AddOnCharge 				= AddOnCharge
				and     related.TaxCode						= LocalTaxCode
				and     related.NotMatchCreated)
			
		PurchaseOrderAndLineAddOnChargeRel
			one-to-one relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.AddOnCharge			= AddOnCharge
			
        PayablesCompanyRel
            one-to-one relation to PayablesCompany
            Field Mapping uses symbolic key
                related.Company = Company

		PurchasingCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company						= Company

		SelectedMatchWorkReceiptForPurchaseOrderRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
			Instance Selection
				where (related.PurchaseOrder		= PurchaseOrder
				and    related.Selected)

		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.InventoryLocation				= PayablesInvoiceAddOnChargeRel.PurchaseOrderReceiptLineAOCRel.ShipToLocation

		ThisReceiptRel
			one-to-one relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrderReceipt		= ThisReceipt
			
		ThisReceiptLineRel
			one-to-one relation to MatchWorkReceiptLine
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine
			
		ThisReceiptLineAOCRel
			one-to-one relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine
				related.AddOnCharge					= ThisAddOnCharge
			
 		CurrentInvoiceAddOnChargeRel
			one-to-one relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.Contract					= Contract
				related.ContractLine				= ContractLine
				related.AddOnCharge					= AddOnCharge
				related.MatchWorkInvoiceAddOnCharge = LocalMatchWorkInvoiceAddOnCharge
			
		CurrentPurchaseOrderAndLineAddOnChargeRel
			one-to-one relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.AddOnCharge			= AddOnCharge
			
		ThisReceiptInvoiceLinkRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	    			= AddOnCharge
                and    related.PurchaseOrderLine											= PurchaseOrderLine
				and   (related.Type															= "MA"
				or     related.Type															= "RC")
				and   (related.Status														= 1
				or     related.Status														= 2))

		PurchaseOrderReceiptInvoiceLinkMatchRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt			= CurrentReceipt
                and    related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    	= CurrentReceiptLine
				and    related.Type															= "MA"
				and    related.Status														= 1
				and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= AddOnCharge)

		ThisReceiptAndPayablesInvoiceLinkRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PayablesInvoice												= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
                and    related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	    			= AddOnCharge
                and    related.PurchaseOrderLine											= PurchaseOrderLine
				and   (related.Type															= "MA"
				or     related.Type															= "RC")
				and   (related.Status														= 1
				or     related.Status														= 2))

        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = Company

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= LocalLocation
				related.Item							= Item

		InventoryCostHistoryPOLineRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= PayablesInvoiceAddOnChargeRel.Location
				related.Item											= Item
				related.InventoryTransaction							= PurchaseOrder
				related.InventoryCostHistory.TransactionSystemCode  	= "PO"			
				related.InventoryCostHistory.LineNumber					= PurchaseOrderLine
				related.InventoryCostHistory.ComponentSequence			= 0

		InventoryCostHistoryReceiptLineRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= PayablesInvoiceAddOnChargeRel.Location
				related.Item											= Item
				related.InventoryTransaction							= ThisReceipt
				related.InventoryCostHistory.TransactionSystemCode  	= "PO"			
				related.InventoryCostHistory.LineNumber					= ThisReceiptLine
				related.InventoryCostHistory.ComponentSequence			= 0

		PurchaseOrderSpreadAddOnChargeRel
			one-to-one relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.PurchaseOrder								= PurchaseOrder
				related.AddOnCharge									= AddOnCharge

		InternalDetailsRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrderLine	= PurchaseOrderLine
				and    related.RecordSource.InternalMatchDetails)

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity

		LocalEntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= Company.AccountingEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= Company.AccountingEntity
                related.TaxCode 						= CalculateTaxCode

        MatchInvoiceReferenceRel
            one-to-one relation to MatchInvoiceReference
            Field Mapping uses symbolic key
                related.Company               			= Company
                related.Vendor                			= Vendor
                related.PayablesInvoice					= PayablesInvoice

        LocalOriginalInvoiceAddOnChargeRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
				related.AddOnCharge						= AddOnCharge

        CreditForRebillOriginalDetailRel
            one-to-one relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
				related.AddOnCharge						= AddOnCharge
				related.PayablesInvoiceAddOnCharge		= LocalOriginalInvoiceAddOnCharge

 		AutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= PayablesInvoice


		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
				related.LineItemNumber						= PurchaseOrderLine
				
		BypassOneSourceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "BypassOneSource"

		BypassOneSourceTaxRateRel								
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxCode					= PayablesInvoiceAddOnChargeRel.TaxCode
				
		SkipRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "Skip"

 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= LocalInventoryLocation

	Sets
		ByVendorMatchDetailKey
            indexed
            Sort Order
            	MatchWork
				Company
				Vendor
				ItemType
				MatchDetailKey
				MatchWorkInvoiceAddOnCharge
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoice
				AddOnCharge

		ByPurchaseOrder
			indexed
			Sort Order
				MatchWork
				Company
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoice
				AddOnCharge
				MatchWorkInvoiceAddOnCharge
























	Rule Blocks
		704aDoAocProduct


			initialize ServiceLineChargebackAmount
			initialize ServiceLineChargebackQuantity
			
			initialize TotalDistributionAmount
			
			initialize NewInvoiceLinkMatchedNotReceivedQuantity
			initialize NewInvoiceLinkChargebackQuantity
			initialize NewInvoiceLinkWriteoffQuantity
			initialize NewInvoiceLinkICVToleranceUnitCost
			initialize NewInvoiceLinkICVToleranceQuantity
			initialize NewInvoiceLinkICVToleranceAmount
			initialize NewInvoiceLinkICVQuantity
			initialize NewInvoiceLinkICVUnitCost
			initialize NewInvoiceLinkICVAmount
			initialize NewInvoiceLinkMatchUnitCost
			initialize NewInvoiceLinkMNRAmount
			initialize NewInvoiceLinkMNRUnitCost
			initialize NewInvoiceLinkMNRAmount
			initialize NewInvoiceLinkMNRUnitCost
			initialize NewInvoiceLinkMNRToleranceUnitCost
			initialize NewInvoiceLinkMemoQuantity
			initialize NewInvoiceLinkPOCostUpdate
			



















			Work2ReceivedQuantityToMatch			= ThisReceiptLineAOCRel.ReceivedQuantityToMatch  

			if  (PurchaseOrderLine.IsCatchWeightItem)
				Work1ReceivedQuantityToMatch						= ThisReceiptLineAOCRel.OpenToMatchQuantity
			else
			if  (!ThisReceiptLineAOCRel exists)
				initialize Work1ReceivedQuantityToMatch
				initialize Work2ReceivedQuantityToMatch  
			else
			if  (AddOnCharge entered
			and  PurchaseOrderLine not entered
			and  ThisReceiptLineAOCRel.ReceivedQuantityToMatch not entered)
				Work1ReceivedQuantityToMatch			= MatchedQuantity
			else
			if  ((MatchWork.MatchRuleResult.AllToOne 
			or    MatchWork.MatchRuleResult.AllToAll)
			and   MatchWork.MatchLevel.InvoiceMatch
			and   !PayablesInvoice.MatchProcessType.AOCOnly
			and   PayablesInvoice.CostComponentMatch)
				Work1ReceivedQuantityToMatch			= MatchedQuantity
			else
				Work1ReceivedQuantityToMatch			= ThisReceiptLineAOCRel.ReceivedQuantityToMatch  

			if  (MatchWork.MatchLevel.DetailMatch
			and  DoChargeback
			and  Work1ReceivedQuantityToMatch > ThisReceiptLineAOCRel.ReceivedQuantityToMatch  
			and  !MatchWork.MatchRuleType.AllToOne)
				ReceivedNotInvoicedQuantity             = Work1ReceivedQuantityToMatch - DetailsMatchedQuantity
			else
				initialize ReceivedNotInvoicedQuantity
				


			if  (PurchaseOrderLine.IsCatchWeightItem)

				WorkQuantity = first PayablesInvoiceDetailRel.BuyUOMMatchedQuantity


				if (WorkQuantity > Work1ReceivedQuantityToMatch
				and ThisReceiptLineAOCRel exists)
					TempMatchedQuantity							= Work1ReceivedQuantityToMatch
				else
					TempMatchedQuantity                 		= WorkQuantity - TotalMatchedQuantity

			else

			if  (!ThisReceiptLineAOCRel exists)
				TempMatchedQuantity	                 	= DetailsMatchedQuantity - TotalMatchedQuantity

			else
			if  (Work1ReceivedQuantityToMatch > DetailsMatchedQuantity
			and  ReceivedNotInvoicedQuantity not entered)
				TempMatchedQuantity						= DetailsMatchedQuantity

			else
				TempMatchedQuantity						= Work1ReceivedQuantityToMatch

				if (ThisReceipt not entered
				and PurchaseOrderLine.ServiceCode.Amount
				and PurchaseOrderAndLineAddOnChargeRel exists
				and PurchaseOrderAndLineAddOnChargeRel.Quantity = PurchaseOrderAndLineAddOnChargeRel.MatchedQuantity)
					TempMatchedQuantity	                 	= DetailsMatchedQuantity

				
			if  (ItemType.Service)
				if  (ThisReceiptLineAOCRel.PurchaseOrderLine.ServiceCode.Amount)
					ServiceLineChargebackQuantity		= 1
					NewOpenPurchaseOrderAmount          = ThisReceiptLineAOCRel.TotalAddOnCharge
					NewOpenPurchaseOrderAmount          -= ThisReceiptLineAOCRel.MatchAmount
					NewOpenPurchaseOrderAmount          -= (DetailsMatchedQuantity * PayablesInvoiceAddOnChargeRel.EnteredQuantity)
					if  (NewOpenPurchaseOrderAmount <= 0)
						ServiceLineChargebackAmount		= NewOpenPurchaseOrderAmount
						NewOpenPurchaseOrderAmount 		= 0
				else
				if  (ThisReceiptLineAOCRel.PurchaseOrderLine.ServiceCode.Quantity)
					if  (ThisReceiptLineAOCRel.ReceivedQuantityToMatch < DetailsMatchedQuantity)
						ServiceLineChargebackQuantity	= ThisReceiptLineAOCRel.ReceivedQuantityToMatch - DetailsMatchedQuantity
						Work1ReceivedQuantityToMatch	= 0
					TempMatchedQuantity					= DetailsMatchedQuantity

			TotalMatchedQuantity				+= TempMatchedQuantity


			if  (TotalMatchedQuantity > DetailsMatchedQuantity
			and  ReceivedNotInvoicedQuantity not entered)
				TempMatchedQuantity           		-= (TotalMatchedQuantity - DetailsMatchedQuantity)


			initialize EnteredAddOnChargeLandTaxUnitCost
			initialize ApprovedAddOnChargeLandTaxUnitCost






			ApprovedUnitCost									= PayablesInvoiceAddOnChargeRel.DerivedMatchUnitCost
			initialize ApprovedLandTaxUnitCost
			initialize LocalEnteredUnitCost
			initialize LocalMatchUnitCost
			initialize AdjustedMatchUnitCost
			initialize NonTaxEnteredUnitCost

			LocalMatchUnitCost									= PayablesInvoiceAddOnChargeRel.DerivedMatchUnitCost
			LocalEnteredUnitCost								= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost 


			if  (!PurchaseOrderAndLineAddOnChargeRel exists
			or  (PurchaseOrderAndLineAddOnChargeRel.PurchaseOrderLine entered
			and  PurchaseOrderAndLineAddOnChargeRel.ZeroCost))

				initialize LocalEnteredUnitCost

			if  (NonTaxEnteredUnitCost not entered)
				NonTaxEnteredUnitCost							= LocalEnteredUnitCost 

			if  (ThisReceiptLineAOCRel exists)
				if  (PurchaseOrderLine entered)
					if (PayablesInvoiceAddOnChargeRel.CreatedDuringSpread = 1
					and ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.ReceivedQuantity = PurchaseOrderAndLineAddOnChargeRel.Quantity
					and ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.ReceivedQuantity entered)
						LocalEnteredUnitCost = (ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.TotalAddOnChargeAmount / ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.ReceivedQuantity)

					else

						LocalEnteredUnitCost						= ThisReceiptLineAOCRel.OriginalUnitCost

				else
				if  (ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.TotalAddOnChargeAmount < PayablesInvoiceAddOnChargeRel.EnteredUnitCost)
					LocalEnteredUnitCost						= ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.TotalAddOnChargeAmount
				
			if  (!ThisReceiptLineAOCRel exists
			and  !PurchaseOrderAndLineAddOnChargeRel exists
			and   PurchaseOrderLine not entered)
				LocalEnteredUnitCost							= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost


			if  (ItemType.Inventoried)		
				SaveNonTaxEnteredUnitCost						= NonTaxEnteredUnitCost 

			include DoTaxRuleBlock

			if  (ItemType.Inventoried)		
				NonTaxEnteredUnitCost							= SaveNonTaxEnteredUnitCost 















			NonTaxEnteredUnitCost								= LocalEnteredUnitCost
			NonTaxMatchUnitCost									= LocalMatchUnitCost
			NonTaxApprovedUnitCost								= ApprovedUnitCost

			EnteredAddOnChargeLandTaxUnitCost					= EnteredLandTaxUnitCost
			ApprovedAddOnChargeLandTaxUnitCost					= ApprovedLandTaxUnitCost

			if  (ItemType.Inventoried)
				PurchaseOrderInvoiceTax							= PurchaseOrderInvoiceTax + (EnteredAddOnChargeLandTaxUnitCost * TempMatchedQuantity)








			
			LocalMatchedQuantity								= TempMatchedQuantity
			NonTaxApprovedUnitCost								= ApprovedUnitCost
			AmMatchedQuantity									= LocalMatchedQuantity

			include 706DistItem



			if  (CurrentPurchaseOrderAndLineAddOnChargeRel exists)

				if  (ItemType.Service)
					LocalUnmatchedQuantity 						= ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.Quantity
					LocalUnmatchedQuantity 						-= ThisReceiptLineAOCRel.MatchedQuantity

				initialize ExcessQuantity
				if  (MatchReconQueue.LineChargebackSelected
				and  !CreateChargeback)

					NextSentence							= true
				else
				if  (DoChargeback)
				
					ProcessMatchExcess							= ProcessMatchExcess.Chargeback					














				if  (ExcessQuantity < 0)
					initialize ExcessQuantity

				if  (ProcessMatchExcess.Chargeback)
					NewPOLineChargebackQuantity 				= ExcessQuantity
				else
				if  (!PayablesInvoice.MatchProcessType.DropShip)
					if  (ProcessMatchExcess.Writeoff)
						NewPOLineWriteoffQuantity 				= ExcessQuantity
					else
					if  (ProcessMatchExcess.MatchedNotReceived)
						NewPOLineMatchedNotReceived 			= ExcessQuantity


				if  ((MatchWork.MatchLevel.DetailMatch
				and   MatchWork.ProcessMode.Reconciliation)
				or   (MatchWork.MatchLevel.DetailMatch
				and   MatchWork.MatchRuleType.AllToOne
				and   !ItemType.Service))
					if  (NewPOLineMatchedNotReceived > 0)
						NewInvoiceLinkMatchedNotReceivedQuantity			= NewPOLineMatchedNotReceived
					else
					if  (NewPOLineChargebackQuantity > 0)
						NewInvoiceLinkChargebackQuantity					= NewPOLineChargebackQuantity
					else
					if  (NewPOLineWriteoffQuantity > 0)
						NewInvoiceLinkWriteoffQuantity						= NewPOLineWriteoffQuantity
	      
				if  (ThisReceiptLineAOCRel exists
				and  !MemoInvoice)
					NewPOLineMatchedQuantity 								+= ExcessQuantity
					TotalMatchedQuantity									+= ExcessQuantity

	      

	      		PreviousMatchedQuantity										+= LocalMatchedQuantity

				if  (CurrentPurchaseOrderAndLineAddOnChargeRel exists)

		
					if  (PurchaseOrderLine.ItemType.Inventoried
					or   PurchaseOrderLine.ItemType.NonStock)
						initialize UOMCalculation

						UOMCalculation.InputUOM						= PurchaseOrderLine.VendorPriceUOM
						UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
						UOMCalculation.InputQuantity				= LocalMatchedQuantity
						UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
		
					if (PurchaseOrderLine.ServiceCode.Amount
					and CurrentPurchaseOrderAndLineAddOnChargeRel.MatchedQuantity = 1)
					    initialize LocalMatchedQuantity
		

					invoke UpdateFromMatch CurrentPurchaseOrderAndLineAddOnChargeRel
						invoked.BypassCommitUpdate                   		= true		
						if  (PurchaseOrderLine not entered)
							if (this instance.AddOnCharge.AddOnChargeType.Allowance)
								if (TotalDistributionAmount < invoked.TotalAddOnChargeAmount - invoked.MiscellaneousAddOnChargeInvoicedAmount)
									invoked.MiscellaneousAddOnChargeInvoicedAmount			= CurrentPurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount 
								else
									invoked.MiscellaneousAddOnChargeInvoicedAmount			+= TotalDistributionAmount
							else 
								if (TotalDistributionAmount > invoked.TotalAddOnChargeAmount - invoked.MiscellaneousAddOnChargeInvoicedAmount)
									invoked.MiscellaneousAddOnChargeInvoicedAmount			= CurrentPurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount 
								else
									invoked.MiscellaneousAddOnChargeInvoicedAmount			+= TotalDistributionAmount
						else
						if  (PurchaseOrderLine.ItemType.Inventoried
						or   PurchaseOrderLine.ItemType.NonStock)
							invoked.MatchedQuantity										+= UOMCalculation.OutputQuantity
						else
							invoked.MatchedQuantity										+= LocalMatchedQuantity
						

						


					invoke FastUpdate PurchaseOrder
						invoked.LastActivityDate										= current corporate date




			if  (ThisReceiptLineAOCRel exists
			and  !ItemType.Service)
				LocalMatchedAmount											= TotalDistributionAmount
				include 833aUpdateRecaocdtl

			if (!MemoInvoice)			
				MatchSequence += 1

				invoke Create PurchaseOrderReceiptInvoiceLink
					invoked.Company														= Company
					invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
					invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= MatchSequence
					invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= AddOnCharge
					invoked.Vendor														= PayablesInvoice.Vendor
					invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
					invoked.PurchaseOrder												= PurchaseOrder
					invoked.PurchaseOrderLine											= PurchaseOrderLine
					invoked.Item														= Item
					invoked.MatchDetailKey												= MatchDetailKey
					invoked.MatchUnitCost												= MatchUnitCost
					invoked.MatchedQuantity												= NewReceiptLineMatchedQuantity
					invoked.Type														= "MA"
					if  (ThisReceiptLineAOCRel exists
					or   ThisPurchaseOrderReceiptLineRel exists)
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= ThisReceipt
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= ThisReceiptLine





			if  (MatchWork.MatchLevel.InvoiceMatch
			and  InvoiceDetailKeyed
			and  !OverrideDetail
			and  !ThisReceiptLineAOCRel exists)
				InvoiceMatchedNotReceived									= true

		706DistItem

			
			initialize WorkDistributionGroup
			WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company				= Company
			WorkDistributionGroup.Invoice						= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail			= MatchWorkInvoiceAddOnCharge
			WorkDistributionGroup.MatchedQuantity				= MatchedQuantity

			initialize DistributionCompany
			MatchedNotReceivedExchangeVariance	= true
			CostChargeback						= false
			DistributionProcessLevel			= PurchaseOrder.ProcessLevel

			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= ThisReceiptLineRel.PurchaseOrderReceipt.ReceivedDate
			else
			if  (PurchaseOrder.CurrencyExchangeSetPoint.Entry)
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= PurchaseOrder.PurchaseOrderDate
			else
			if  ((Company.Currency != PayablesInvoice.InvoiceCurrency
			or    PurchaseOrder.CurrencyExchangeSetPoint.Invoicing)
			and  !ItemType.Inventoried)
				WorkDistributionGroup.CurrencyRate	= InvoiceCurrencyExchangeRate
				WorkPoDate						= PayablesInvoice.InvoiceDate
			else
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= PurchaseOrder.PurchaseOrderDate

			if  (MemoInvoice
			and  ItemType.Inventoried)
				include 715ProcessMemo
			else
			if  (ThisReceiptLineAOCRel.ReceivedQuantityToMatch > 0
			and  ThisReceiptLineAOCRel.Status = 2)

	
				initialize WorkArchiveQuantity
				
				if  (ThisReceiptLineAOCRel exists
				and  ThisReceiptLineAOCRel.Status = 2
				and  ThisReceiptLineAOCRel.ItemType.Inventoried)
					if  (ThisReceiptLineAOCRel.ReceivedQuantityToMatch > LocalMatchedQuantity)
						WorkArchiveQuantity					= LocalMatchedQuantity
					else
						WorkArchiveQuantity					= ThisReceiptLineAOCRel.ReceivedQuantityToMatch
	
					WorkDistributionGroup.Amount 					= WorkArchiveQuantity * NonTaxEnteredUnitCost
					if  (WorkDistributionGroup.Amount entered)
						DistributionCompany					= Company
						if  (PayablesInvoice.ProcessLevel.UnderbillAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.UnderbillAccount
						else
						if  (Company.UnderbillAccount entered)
							WorkDistributionGroup.Account				= Company.UnderbillAccount
						else
						if  (PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount
						else
							WorkDistributionGroup.Account				= Company.InventoryReceiptArchivalAccount
						WorkDistributionGroup.CurrencyRate		= PurchaseOrder.ReceiptCurrencyConversionRate
						WorkPoDate							= PurchaseOrder.PurchaseOrderDate
						WorkDistributionGroup.MatchedQuantity		= WorkArchiveQuantity
						include 719MatchDistribCont
	


			else
				include 712CreateAocDistribs



		712CreateAocDistribs





			
			initialize WorkDistributionGroup.Account
			initialize WorkPostingSwitch
			initialize ApOnlyLandTaxUnitCost
			WorkLandedAddOnCharge					= DetailsLandedAddOnCharge
			WorkRetainLandedAddOnCharge				= DetailsRetainLandedAddOnCharge
			
			Do712Continue							= true

			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate							= ThisReceiptLineRel.PurchaseOrderReceipt.ReceivedDate
			else
			if  (Company.Currency != PayablesInvoice.InvoiceCurrency
			or   PurchaseOrder.CurrencyExchangeSetPoint.Invoicing)
				WorkDistributionGroup.CurrencyRate	= InvoiceCurrencyExchangeRate
			else
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate							= PurchaseOrder.PurchaseOrderDate

			if  (MatchWork.MatchLevel.DetailMatch
			and !ThisReceiptLineAOCRel exists
			and !PurchaseOrderAndLineAddOnChargeRel exists
			and ItemType.Inventoried
			and DetailsLandedAddOnCharge)

				ApOnlyLandTaxUnitCost = ApprovedAddOnChargeLandTaxUnitCost - EnteredAddOnChargeLandTaxUnitCost

				
				if (!MatchWorkInvoiceDetailRel exists)
					initialize WorkInvoiceDetailMatchedNotReceivedQuantity
					if (PurchaseOrderLine entered)
						WorkInvoiceDetailMatchedNotReceivedQuantity = LocalMatchedQuantity - PurchaseOrderLine.ReceivedQuantity
						
				if (WorkInvoiceDetailMatchedNotReceivedQuantity > 0)

					DistributionUnitCost = NonTaxApprovedUnitCost
					WorkDistributionGroup.Amount = WorkInvoiceDetailMatchedNotReceivedQuantity * DistributionUnitCost

					
					WorkDistributionGroup.Account = WorkToleranceAccount 

					include 719MatchDistribCont
					
					LocalMatchedQuantity -= WorkInvoiceDetailMatchedNotReceivedQuantity

					
			else
			if   (PayablesInvoice.MatchProcessType.AOCOnly
			and  !PayablesInvoice.CostComponentMatch
			and  !ThisReceiptLineAOCRel exists
			and   PurchaseOrderAndLineAddOnChargeRel exists
			and !ItemType.Service
			and DetailsLandedAddOnCharge)
				WorkDistributionGroup.Account = WorkToleranceAccount 

			else
			if  (!ThisReceiptLineAOCRel exists
			and   PurchaseOrderAndLineAddOnChargeRel exists
			and !ItemType.Service
			and DetailsLandedAddOnCharge)
				if  (Company.PostingAccountNoReceiptLine.MatchedNoReceipt)
					WorkPostingSwitch				= 4
					if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount

					else
						WorkDistributionGroup.Account				= Company.MatchedNotReceivedAccount


				if  (Company.PostingAccountNoReceiptLine.MatchWriteOff)
					WorkPostingSwitch				= 5
					if  (PayablesInvoice.ProcessLevel.MatchWriteOffAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchWriteOffAccount

					else
						WorkDistributionGroup.Account				= Company.MatchWriteOffAccount

			else
			if  (AddOnCharge.PostingAccount entered
			and  !DetailsLandedAddOnCharge)
				WorkDistributionGroup.Account				= AddOnCharge.PostingAccount

			else
			if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
				WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount

			else
				WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount



      		DistributionUnitCost				= NonTaxEnteredUnitCost

			WorkDistributionGroup.Amount				= LocalMatchedQuantity * DistributionUnitCost
			WorkDistributionGroup.MatchedQuantity		= LocalMatchedQuantity


			if  (PurchaseOrderAndLineAddOnChargeRel exists
			or   WorkDistributionGroup.Amount entered
			or   ThisReceiptLineRel.PurchaseOrderReceipt.ERSStatus > 1
			or  (RecordSource.GeneratedByAocSpread
			and !DetailsLandedAddOnCharge))

				include 719MatchDistribCont

			if  (PurchaseOrderLine not entered
			or  ItemType.Inventoried
			or  !PurchaseOrderAndLineAddOnChargeRel exists
			or  !DetailsLandedAddOnCharge)
				TotalDistributionAmount			= WorkDistributionGroup.Amount
			else
				TotalDistributionAmount			= PendingDistributionAmount

			if  (MemoInvoice
			and !ItemType.Inventoried)
				include 715tMemoTax
				Do712Continue					= false


			if  (DoChargeback
			and  WorkPostingSwitch entered)
				if  (!MatchWork.MatchTable.ChargebackType.Overbill
				or   WorkDistributionGroup.Amount >= 0)
					WorkDistributionGroup.Amount		= WorkDistributionGroup.Amount * -1
					WorkChargebackQuantity				= LocalMatchedQuantity
					include 717BuildCbDetails
					initialize WorkPostingSwitch

			if  (Do712Continue)
				include 714CreateVar
				if  (PurchaseOrderLine not entered
				and  !DoChargeback)
					TotalDistributionAmount			+= WorkDistributionGroup.Amount 

				include 725CalcExchRateVar
				include 725tCalcTaxExchRateVar


					
				if  (DoChargeback
				and   PurchaseOrderAndLineAddOnChargeRel exists
				and  ItemType.Service)

		
					initialize ServiceLineChargebackUnitCost
					SaveServiceLineChargebackQuantity					= ServiceLineChargebackQuantity
		
					if  (ThisReceiptLineAOCRel.PurchaseOrderLine.ServiceCode.Amount
					and  ServiceLineChargebackAmount entered)
						ServiceLineChargebackUnitCost					= ServiceLineChargebackAmount * -1
						WorkDistributionGroup.Amount							= ServiceLineChargebackAmount * -1
						ServiceLineChargebackUnitCost					= ServiceLineChargebackAmount
						DistributionUnitCost							= ServiceLineChargebackAmount
						WorkChargebackQuantity							= ServiceLineChargebackQuantity
						include 717BuildCbDetails 
		
					if  (ThisReceiptLineAOCRel.PurchaseOrderLine.ServiceCode.Quantity)
						if  (SaveServiceLineChargebackQuantity entered)
							ServiceLineChargebackQuantity				= SaveServiceLineChargebackQuantity * -1
							ServiceLineChargebackUnitCost				= ThisReceiptLineAOCRel.MatchUnitCost
							WorkDistributionGroup.Amount						= ServiceLineChargebackQuantity * ServiceLineChargebackUnitCost
							if  (!MatchWork.MatchTable.ChargebackType.Overbill
							or    WorkDistributionGroup.Amount <= 0)
								DistributionUnitCost					= ServiceLineChargebackUnitCost
								include 717BuildCbDetails

			if (!PayablesInvoiceAddOnChargeRel.RecordSource.CreatedWithinMatch)
				MatchUnitCost = PayablesInvoiceAddOnChargeRel.MatchUnitCost 
      
		714CreateVar

			
			CostChargeback																= true
			DistributionUnitCost     													= NonTaxMatchUnitCost - NonTaxEnteredUnitCost

			if (PurchaseOrderLine.IsCatchWeightItem)
				DistributionUnitCost = ((NonTaxMatchUnitCost * (PurchaseOrderLine.EnteredBuyUOMMultiplier / PurchaseOrderLine.VendorPriceUOMMultiplier)) - NonTaxEnteredUnitCost)



			WorkVarianceQuantity														= LocalMatchedQuantity


			if  (MatchWork.MatchLevel.DetailMatch
			and  DoChargeback
			and  ReceiptLineReceivedQuantity > DetailsMatchedQuantity
			and  !MatchWork.MatchRuleType.AllToOne)
				WorkVarianceQuantity													= DetailsMatchedQuantity


			WorkDistributionGroup.Amount 				= WorkVarianceQuantity * DistributionUnitCost

				
			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate						= WorkReceiptConversionRate
			else
				WorkDistributionGroup.CurrencyRate						= InvoiceCurrencyExchangeRate

			if  (WorkDistributionGroup.CurrencyRate not entered)
				WorkDistributionGroup.CurrencyRate						= 1

			round WorkDistributionGroup.Amount to nearest DerivedRoundTo


			if  (WorkDistributionGroup.Amount entered)

				AocToDifference															= false
				
	        




				
				if  (PayablesInvoice.MatchProcessType.AOCOnly
				and  !PayablesInvoice.CostComponentMatch
				and   PurchaseOrderAndLineAddOnChargeRel exists
				and  !ThisReceiptLineAOCRel exists
				and  ItemType.Inventoried
				and  DetailsLandedAddOnCharge)

					WorkDistributionGroup.Account = WorkToleranceAccount 
				else
				if  (ItemType.Inventoried
				and  DetailsLandedAddOnCharge
				and  MatchWork.MatchLevel.DetailMatch)

					if (!ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
				else

					WorkDistributionGroup.Account = WorkToleranceAccount 
					if  (!DetailsLandedAddOnCharge)
						if  (PayablesInvoice.CostComponentMatch
						and  MatchWork.MatchLevel.DetailMatch)
							AocToDifference			= true
							if  (AddOnCharge.AddOnChargeDifferenceAccount entered)
								WorkDistributionGroup.Account				= AddOnCharge.AddOnChargeDifferenceAccount 
							else
							if  (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered)
								WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount
							else
							if  (Company.AddOnChargeDifferenceAccount entered)
								WorkDistributionGroup.Account				= Company.AddOnChargeDifferenceAccount
							else
							if  (AddOnCharge.PostingAccount entered
							and  !DetailsLandedAddOnCharge)

								AocToDifference 					= false
								WorkDistributionGroup.Account				= AddOnCharge.PostingAccount
						else
						if  (AddOnCharge.PostingAccount entered)
							WorkDistributionGroup.Account				= AddOnCharge.PostingAccount
							

				
				if  (ItemType.Inventoried
				or  (DetailsLandedAddOnCharge
				and  MatchWork.MatchLevel.DetailMatch))
					NewInvoiceLinkICVQuantity					= WorkVarianceQuantity
					NewInvoiceLinkICVUnitCost					= DistributionUnitCost
					NewInvoiceLinkICVAmount						= WorkDistributionGroup.Amount
				else
					NewReceiptLineMatchedQuantity				= WorkVarianceQuantity
					NewInvoiceLinkMatchUnitCost					= DistributionUnitCost

				include 719MatchDistribCont
				


			if  (ItemType.Inventoried
			and  ItemLocationRel.InventoryTracked		
			and  MatchWork.MatchLevel.DetailMatch)

				if  (DetailsLandedAddOnCharge = 1)
						
					if  (!PurchaseOrderAndLineAddOnChargeRel exists
					or   ThisReceiptLineAOCRel exists)

						include 751AocIcAdjust






			if  (DoChargeback
			and (AdjustedMatchUnitCost not entered
			or   NonTaxApprovedUnitCost > AdjustedMatchUnitCost))

				DistributionUnitCost				= NonTaxMatchUnitCost - NonTaxEnteredUnitCost


				if  (DistributionUnitCost not entered
				and  ThisReceiptLineAOCRel exists
				and  ThisReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount > PayablesInvoiceAddOnChargeRel.EnteredUnitCost)
					DistributionUnitCost = PayablesInvoiceAddOnChargeRel.EnteredUnitCost - ThisReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount






				if  (ItemType.Inventoried
				and  DistributionUnitCost not entered)
					DistributionUnitCost			= (ApprovedAddOnChargeLandTaxUnitCost - EnteredAddOnChargeLandTaxUnitCost)

				else
				if  (ItemType.Inventoried)
					DistributionUnitCost		-= (ApprovedAddOnChargeLandTaxUnitCost - EnteredAddOnChargeLandTaxUnitCost)



				WorkDistributionGroup.Amount 				= WorkVarianceQuantity * DistributionUnitCost

				if  (CostAndQuantityOverage)
					WorkDistributionGroup.Amount 				= DetailsMatchedQuantity * DistributionUnitCost


				if  (ItemType.Inventoried)
					WorkPostingSwitch				= 2
					if  (DetailsLandedAddOnCharge)
						if (!ItemLocationRel.InventoryTracked)								
							WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							WorkDistributionGroup.Account				= Company.CostVarianceAccount
				else
					WorkPostingSwitch				= 1

				if  (MatchWork.MatchTable.ChargebackType.Overbill
				and  WorkDistributionGroup.Amount < 0)
					AocToDifference					= false
				else
					WorkDistributionGroup.Amount 			= WorkDistributionGroup.Amount * -1
					WorkChargebackQuantity			= WorkVarianceQuantity 
					AmMatchedQuantity				= WorkVarianceQuantity

					if  (CostAndQuantityOverage)
						WorkChargebackQuantity 				= DetailsMatchedQuantity


					if  (ItemType.Service)
						ServiceLineChargebackQuantity	-= WorkVarianceQuantity
						if  (ServiceLineChargebackQuantity < 0)
							initialize ServiceLineChargebackQuantity 

					include 717BuildCbDetails	
					initialize WorkPostingSwitch
					AocToDifference	= false

					if  (CostAndQuantityOverage)

						DistributionUnitCost				= ((DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity) * NonTaxEnteredUnitCost)

						if  (DistributionUnitCost entered)
							invoke MemoCreate PayablesInvoiceAddOnCharge
								fill in fields from PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge
									except invoked.PayablesInvoice
									except invoked.PayablesInvoiceAddOnCharge
									except invoked.AddOnChargeAmount
									except invoked.TotalAddOnChargeAmount
									except invoked.TotalDistributionAmount
								invoked.PayablesInvoice					= MatchWork.ChargebackInvoice
								if (ChargebackReason entered)
									invoked.ReasonCode					= ChargebackReason
								else
									invoked.ReasonCode					= MatchWorkInvoiceRel.ChargebackReason
								invoked.MatchedQuantity					= DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity
								invoked.EnteredQuantity 				= DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity
								invoked.MatchUnitCost					= NonTaxEnteredUnitCost * -1
								invoked.EnteredUnitCost					= NonTaxEnteredUnitCost * -1

								invoked.Status 							= 1
								invoked.MatchObjectID					= MatchWork.OutMatchObjectID
								invoked.PurchaseOrderReceipt			= ThisReceipt
								invoked.PurchaseOrderReceiptLine		= ThisReceiptLine
								invoked.RecordSource					= "MA"

							WorkDistributionGroup.Amount				= (((DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity) * NonTaxEnteredUnitCost) * -1)
							WorkDistributionGroup.Invoice				= MatchWork.ChargebackInvoice
							DetailsInvoiceType							= "C"
							RecordSource								= "MA"
							ChargebackDetailSequenceNumber				+= 1
							DetailsSequenceNumber						= ChargebackDetailSequenceNumber
							WorkDistributionGroup.MatchedQuantity		= DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity
							DistributionUnitCost 						= NonTaxEnteredUnitCost * -1

							PayablesChargebackIndicator = "Y"
							include 719MatchDistribCont
							initialize PayablesChargebackIndicator
							if  (PayablesInvoiceAddOnChargeRel.TaxCode entered)
								LastTaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode 
								initialize CalculateTax
								CalculateTax.InvoiceAmount			= ((DetailsMatchedQuantity - ThisReceiptLineAOCRel.UnmatchedQuantity) * NonTaxEnteredUnitCost * -1)
								TaxTolerance 						= true
								include 718BuildCbTax




		715ProcessMemo

      
			TempMatchedQuantity						= DetailsMatchedQuantity 
			TotalMatchedQuantity					= DetailsMatchedQuantity
			TempVbuyMatchQuantity					= DetailsBuyUOMMatchedQuantity 

			initialize MtxTotalTaxAmt




      		
			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  PayablesInvoiceDetailRel.MemoAdjustType.CostAdjustment)

	
				RemainingUnitCost							= MatchUnitCost 
	      

				if  (ThisReceiptInvoiceLinkTotalIcvTolUcst > 0
				and  RemainingUnitCost < 0)


					if  ((MatchUnitCost * -1) > ThisReceiptInvoiceLinkTotalIcvTolUcst)
						DistributionUnitCost						= ThisReceiptInvoiceLinkTotalIcvTolUcst * -1

						RemainingUnitCost							= MatchUnitCost - DistributionUnitCost

					else
						DistributionUnitCost						= MatchUnitCost 


						initialize RemainingUnitCost
		      
						ApprovedUnitCost							= DistributionUnitCost 
						NewInvoiceLinkICVToleranceUnitCost			= DistributionUnitCost
						
						TempMatchedQuantity							= DetailsMatchedQuantity
						WorkVarianceQuantity						= DetailsMatchedQuantity
						NewInvoiceLinkICVToleranceQuantity			= DetailsMatchedQuantity
		
						WorkDistributionGroup.Amount						= WorkVarianceQuantity * DistributionUnitCost
		
						NewInvoiceLinkICVToleranceAmount			= WorkDistributionGroup.Amount
		      
					if  (WorkDistributionGroup.Amount entered)
						WorkDistributionGroup.Account = WorkToleranceAccount 
		      
			      

						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						WorkPostingSwitch							= 3
						include 719MatchDistribCont
			      

						WorkPostingSwitch							= 1
						initialize MtxTotalTaxAmt
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 715tMemoTax
			      







			      

						WorkDistributionGroup.Amount						= MtxTotalTaxAmt
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						DistributionUnitCost						= (MtxTotalTaxAmt / WorkVarianceQuantity)

						WorkDistributionGroup.Account = WorkToleranceAccount 
						include 719MatchDistribCont
			      

						WorkDistributionGroup.Amount 						= MtxTotalTaxAmt * -1
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						DistributionUnitCost						= ((MtxTotalTaxAmt / WorkVarianceQuantity) * -1)

						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 719MatchDistribCont
					

				if  (RemainingUnitCost < 0)

		      
					SaveRemainingUnitCost							= RemainingUnitCost 
		      
					if  ((RemainingUnitCost * -1) > TotalThisReceiptInvoiceLinkIcvUnitCost)
						DistributionUnitCost						= TotalThisReceiptInvoiceLinkIcvUnitCost * -1

						RemainingUnitCost							-= DistributionUnitCost

					else            
						DistributionUnitCost						= RemainingUnitCost 

						initialize RemainingUnitCost

		      
					ApprovedUnitCost								= DistributionUnitCost 
					NewInvoiceLinkICVUnitCost						= DistributionUnitCost
					
					TempMatchedQuantity								= DetailsMatchedQuantity 
					WorkVarianceQuantity							= DetailsMatchedQuantity
					NewInvoiceLinkICVQuantity						= DetailsMatchedQuantity
					
					WorkDistributionGroup.Amount							= WorkVarianceQuantity * DistributionUnitCost
					NewInvoiceLinkICVAmount							= WorkDistributionGroup.Amount 
		      
					if  (WorkDistributionGroup.Amount entered)
						if (ItemType.Inventoried
						and !ItemLocationRel.InventoryTracked)								
							WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							WorkDistributionGroup.Account				= Company.CostVarianceAccount
			      

						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						WorkPostingSwitch							= 2
						include 719MatchDistribCont
			      

						WorkPostingSwitch							= 1
						initialize MtxTotalTaxAmt
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 715tMemoTax
			      







			      

						WorkDistributionGroup.Amount						= MtxTotalTaxAmt 
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity 
						DistributionUnitCost						= (MtxTotalTaxAmt / WorkVarianceQuantity)

						if (ItemType.Inventoried
						and !ItemLocationRel.InventoryTracked)								
							WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							WorkDistributionGroup.Account				= Company.CostVarianceAccount
						include 719MatchDistribCont
			      

						WorkDistributionGroup.Amount 						= MtxTotalTaxAmt * -1.
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity 
						DistributionUnitCost						= ((MtxTotalTaxAmt / WorkVarianceQuantity) * -1)

						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 719MatchDistribCont
		      
					ApprovedUnitCost								= SaveRemainingUnitCost 
					DistributionUnitCost							= SaveRemainingUnitCost

						
					TempMatchedQuantity								= DetailsMatchedQuantity 
					WorkVarianceQuantity							= DetailsMatchedQuantity
		      
					WorkDistributionGroup.Amount							= ((WorkVarianceQuantity * DistributionUnitCost) + MtxTotalTaxAmt)
		      
					WorkDistributionGroup.MatchedQuantity					= WorkVarianceQuantity 
					DistributionUnitCost							= (WorkDistributionGroup.Amount / WorkVarianceQuantity)

		      
					if  (ItemType.Inventoried
					and  ItemLocationRel.InventoryTracked)		
						if  (DetailsLandedAddOnCharge)
							include 751AocIcAdjust
	      
				NewReceiptLineMatchedQuantity					= DetailsMatchedQuantity
	
				include 715uUpdatePomatchobj
      



			
			if  (PayablesInvoice.InvoiceType.DebitMemo
			and  PayablesInvoiceDetailRel.MemoAdjustType.CostAdjustment)

	      
				ApprovedUnitCost								= MatchUnitCost 
				DistributionUnitCost							= MatchUnitCost

				TempMatchedQuantity								= MatchedQuantity
				WorkVarianceQuantity							= MatchedQuantity
				WorkDistributionGroup.Amount							= WorkVarianceQuantity * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount entered)
					WorkPostingSwitch							= 2
					WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
					if (ItemType.Inventoried
					and !ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
					initialize MtxTotalTaxAmt
					include 719MatchDistribCont
					include 715tMemoTax
	      
				WorkDistributionGroup.MatchedQuantity					= WorkVarianceQuantity 
				DistributionUnitCost							= (WorkDistributionGroup.Amount / WorkVarianceQuantity)

	      
				if  (ItemType.Inventoried
				and  ItemLocationRel.InventoryTracked)		
					if (DetailsLandedAddOnCharge = 1)
						include 751AocIcAdjust
	        
				NewInvoiceLinkICVQuantity            			= WorkVarianceQuantity 
				NewInvoiceLinkICVUnitCost            			= DistributionUnitCost
				NewInvoiceLinkICVAmount            				= WorkDistributionGroup.Amount 
				NewReceiptLineMatchedQuantity					= DetailsMatchedQuantity       
				include 715uUpdatePomatchobj
      



			
			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  PurchaseOrderLine.MatchedNotReceivedQuantity > 0
			and  PayablesInvoiceDetailRel.MemoAdjustType.QuantityAdjustment)
				WorkMatchedNotReceivedQuantity				= DetailsMatchedQuantity * -1
				if  (ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity < WorkMatchedNotReceivedQuantity)
					WorkMatchedNotReceivedQuantity			= ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity

				if  (PurchaseOrderLine.MatchedNotReceivedQuantity < WorkMatchedNotReceivedQuantity)
					WorkMatchedNotReceivedQuantity			= PurchaseOrderLine.MatchedNotReceivedQuantity 


	      

				initialize NewInvoiceLinkMNRAmount
				DistributionUnitCost							= first ThisReceiptAndPayablesInvoiceLinkRel.MatchedNotReceivedUnitCost 
				if  (DistributionUnitCost not entered)
					DistributionUnitCost = PayablesInvoiceAddOnChargeRel.EnteredUnitCost

				WorkDistributionGroup.Amount							= WorkMatchedNotReceivedQuantity * -1 * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount != 0)
					NewInvoiceLinkMNRAmount						= WorkDistributionGroup.Amount 
					WorkDistributionGroup.MatchedQuantity				= WorkMatchedNotReceivedQuantity * -1 
					WorkPostingSwitch							= 4
					if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
					else
						WorkDistributionGroup.Account				= Company.MatchedNotReceivedAccount
					include 719MatchDistribCont
					include 715tMemoTax
	      




	      		
				DistributionUnitCost							= TotalThisReceiptInvoiceLinkMNRToleranceUnitCost 

				WorkDistributionGroup.Amount							= WorkMatchedNotReceivedQuantity * -1 * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount entered)
					NewInvoiceLinkMNRAmount						+= WorkDistributionGroup.Amount
					WorkDistributionGroup.MatchedQuantity				= WorkMatchedNotReceivedQuantity * -1 
					WorkPostingSwitch							= 3
					WorkDistributionGroup.Account = WorkToleranceAccount 
					include 719MatchDistribCont
					include 715tMemoTax
	      
				NewPOLineMemoQuantity						+= WorkMatchedNotReceivedQuantity 
				NewPOLineMatchedNotReceived					+= WorkMatchedNotReceivedQuantity * -1 
	  
				NewInvoiceLinkMatchedNotReceivedQuantity	= WorkMatchedNotReceivedQuantity * -1
				NewInvoiceLinkMNRUnitCost					= DistributionUnitCost
				NewInvoiceLinkMNRAmount						= WorkDistributionGroup.Amount 
	  
				NewInvoiceLinkMNRUnitCost					= first ThisReceiptAndPayablesInvoiceLinkRel.MatchedNotReceivedUnitCost
				NewInvoiceLinkMNRToleranceUnitCost			= TotalThisReceiptInvoiceLinkMNRToleranceUnitCost 
	  
				NewInvoiceLinkMemoQuantity					= WorkMatchedNotReceivedQuantity 
				
				include 715uUpdatePomatchobj







      
		715tMemoTax



      

			if  (MemoInvoice
			and  PayablesInvoiceDetailRel.MemoAdjustType.QuantityAdjustment)
				MtxPrevMatchQty						= CurrentPurchaseOrderAndLineAddOnChargeRel.MatchedQuantity + DetailsMatchedQuantity
			else
				MtxPrevMatchQty						= CurrentPurchaseOrderAndLineAddOnChargeRel.MatchedQuantity
      
			if  (PayablesInvoiceAddOnChargeRel.TaxCode entered
			and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable)

				if (DetailsMatchedQuantity entered)
					initialize CalculateTax				
					CalculateTax.InvoiceAmount			= WorkDistributionGroup.MatchedQuantity * DistributionUnitCost


					if  (MNRDistrib
					and  TotalThisReceiptInvoiceLinkMNRTaxUnitCost != 0)
						WorkPostingSwitch							= 4
						if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
							WorkDistributionGroup.Account			= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
						else
							WorkDistributionGroup.Account			= Company.MatchedNotReceivedAccount
						DistributionUnitCost						= TotalThisReceiptInvoiceLinkMNRTaxUnitCost

						WorkDistributionGroup.Amount				= TotalThisReceiptInvoiceLinkMNRTaxUnitCost
					else
					if  (MNRDistrib
					and  EnteredLandTaxUnitCost not entered)
						TaxTolerance			= true




					WorkChargebackInvoice					= MatchWork.ChargebackInvoice
					include 718BuildCbTax  
      
			if  (ChargebackMatchedNotReceived = 1)
				if  (PayablesInvoiceAddOnChargeRel.TaxCode entered)


					CalculateTax.InvoiceAmount			= ((MatchedNotReceivedWriteoffQuantity + WorkDistributionGroup.MatchedQuantity) * DistributionUnitCost * -1)
					TaxTolerance 				= true
					ChargebackMatchedNotReceived		+= 1
					include 718BuildCbTax

				initialize ChargebackMatchedNotReceived
      
			initialize WorkPostingSwitch
      
      
		715uUpdatePomatchobj

			
			invoke Create PurchaseOrderReceiptInvoiceLink
				invoked.Company														= Company
				invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= ThisReceipt
				invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= ThisReceiptLine
				invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
				invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= MatchSequence
				invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= AddOnCharge
				invoked.Vendor														= PayablesInvoice.Vendor
				invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
				invoked.PurchaseOrder												= PurchaseOrder
				invoked.PurchaseOrderLine											= PurchaseOrderLine
				invoked.Item														= Item
				invoked.MatchDetailKey												= MatchDetailKey
				invoked.MatchUnitCost												= MatchUnitCost
				invoked.MatchedQuantity												= NewReceiptLineMatchedQuantity
				invoked.Type														= "MA"

				invoked.MatchedNotReceivedQuantity 			= NewInvoiceLinkMatchedNotReceivedQuantity
				invoked.ChargebackQuantity 					= NewInvoiceLinkChargebackQuantity
				invoked.WriteOffQuantity 					= NewInvoiceLinkWriteoffQuantity
				invoked.IcvTolUcst 							= NewInvoiceLinkICVToleranceUnitCost
				invoked.IcvTolQty 							= NewInvoiceLinkICVToleranceQuantity
				invoked.IcvTolAmt 							= NewInvoiceLinkICVToleranceAmount
				invoked.IcvQty 								= NewInvoiceLinkICVQuantity
				invoked.IcvUcst 							= NewInvoiceLinkICVUnitCost
				invoked.IcvAmt 								= NewInvoiceLinkICVAmount
				invoked.MatchedNotReceivedAmount 			= NewInvoiceLinkMNRAmount
				invoked.MatchedNotReceivedUnitCost 			= NewInvoiceLinkMNRUnitCost
				invoked.MnrTolUcst 							= NewInvoiceLinkMNRToleranceUnitCost
				invoked.MemoQuantity 						= NewInvoiceLinkMemoQuantity
				invoked.PoCostUpd 							= NewInvoiceLinkPOCostUpdate
				
		717BuildCbDetails  



















			if  (WorkDistributionGroup.Amount not entered
			or   MatchWork.ChargebackInvoice not entered
			or   (DetailsAddOnCharge entered
			and   !MatchReconQueue.ChargebackIncludeAOC
			and   !PayablesInvoice.CostComponentMatch))
				initialize WorkPostingSwitch
				initialize PayablesChargebackIndicator
			else
			if  (MatchReconQueue.LineChargebackSelected
			and  !CreateChargeback)

				NextSentence							= true
			else
				WorkDistributionGroup.Invoice			= MatchWork.ChargebackInvoice
				DetailsInvoiceType						= "C"
				RecordSource							= "MA"
				ChargebackDetailSequenceNumber			+= 1
				DetailsSequenceNumber					= ChargebackDetailSequenceNumber

				initialize DetailsTaxAmount
				DetailsMatchUnitCost					= DistributionUnitCost 
				DetailsEnteredUnitCost					= DistributionUnitCost

				if  (ItemType.Service
				and  ServiceLineChargebackQuantity entered)
					WorkDistributionGroup.MatchedQuantity		= ServiceLineChargebackQuantity
					DetailsMatchedQuantity  			= ServiceLineChargebackQuantity
				else
					WorkDistributionGroup.MatchedQuantity		= WorkChargebackQuantity
					if  (CostChargeback)
						DetailsMatchUnitCost			= DistributionUnitCost * -1
						DetailsEnteredUnitCost			= DetailsMatchUnitCost
						DetailsMatchedQuantity			= WorkChargebackQuantity
						CostChargeback					= false
					else
						DetailsMatchedQuantity			= WorkChargebackQuantity * -1

				DetailsEnteredQuantity					= DetailsMatchedQuantity

				if  (PurchaseOrderLine.EnteredBuyUOM = PurchaseOrderLine.VendorPriceUOM)
					DetailsVBuyMatchedQuantity			= DetailsMatchedQuantity
				else
				if  (!ItemType.Inventoried
				and  !ItemType.NonStock)
					DetailsVBuyMatchedQuantity			= DetailsMatchedQuantity
				else
					initialize UOMCalculation

					UOMCalculation.InputUOM						= PurchaseOrderLine.VendorPriceUOM
					UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputQuantity				= DetailsMatchedQuantity
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					DetailsVBuyMatchedQuantity					= UOMCalculation.OutputQuantity

				PayablesChargebackIndicator = "Y"				 
	
				if  (!ItemType.Inventoried)
					DistributionUnitCost 				*= -1





				
				initialize ServiceLineChargebackAmount
				initialize ServiceLineChargebackQuantity
				include 719MatchDistribCont


				if  (PayablesInvoiceAddOnChargeRel.TaxCode entered 
				and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable)
					LastTaxCode					= PayablesInvoiceAddOnChargeRel.TaxCode

					if  (DetailsMatchedQuantity entered)
						initialize CalculateTax
						CalculateTax.InvoiceAmount			= DetailsMatchedQuantity * DistributionUnitCost
						if  (CalculateTax.InvoiceAmount >= 0)
							CalculateTax.InvoiceAmount		*= -1

						if  (MNRDistrib
						and  EnteredLandTaxUnitCost not entered)
							TaxTolerance 					= true
							
						include 718BuildCbTax






	
				if  (ChargebackMatchedNotReceived = 1
				and  ItemType.Inventoried)
					DetailsProductTaxCategory				= PayablesInvoiceAddOnChargeRel.ProductTaxCategory
					if  (PayablesInvoiceAddOnChargeRel.TaxCode entered)
						LastTaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode 
						initialize CalculateTax

						CalculateTax.InvoiceAmount			= ((MatchedNotReceivedWriteoffQuantity + DetailsMatchedQuantity) * DistributionUnitCost * -1)
						TaxTolerance 						= true
						ChargebackMatchedNotReceived		+= 1
						include 718BuildCbTax
						
					initialize ChargebackMatchedNotReceived	


				
				invoke MemoCreate PayablesInvoiceAddOnCharge
					fill in fields from PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge
						except invoked.PayablesInvoice
						except invoked.PayablesInvoiceAddOnCharge
						except invoked.AddOnChargeAmount
						except invoked.TotalAddOnChargeAmount
					invoked.PayablesInvoice					= MatchWork.ChargebackInvoice



					if (ChargebackReason entered)
						invoked.ReasonCode					= ChargebackReason
					else
						invoked.ReasonCode					= MatchWorkInvoiceRel.ChargebackReason
					invoked.MatchedQuantity					= DetailsMatchedQuantity
					invoked.MatchUnitCost					= DetailsMatchUnitCost
					invoked.EnteredUnitCost					= DetailsEnteredUnitCost
					invoked.TaxAmount						= DetailsTaxAmount
					invoked.Status 							= 1
					invoked.MatchObjectID					= MatchWork.OutMatchObjectID
					invoked.PurchaseOrderReceipt			= ThisReceipt
					invoked.PurchaseOrderReceiptLine		= ThisReceiptLine
					invoked.RecordSource					= "MA"

				initialize WorkPostingSwitch
				initialize PayablesChargebackIndicator

				DetailsInvoiceType							= PayablesInvoice.InvoiceType
				WorkDistributionGroup.Invoice				= PayablesInvoice
				DetailsEnteredUnitCost						= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost
				DetailsEnteredQuantity						= PayablesInvoiceAddOnChargeRel.EnteredQuantity
				DetailsMatchedQuantity						= MatchedQuantity 

		718BuildCbTax
			


        
			WorkDistributionGroup.Invoice				= MatchWork.ChargebackInvoice

			if  (PayablesInvoiceAddOnChargeRel.TaxCode not entered
			or   CalculateTax.InvoiceAmount not entered
			or   !PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable)
				initialize CalculateTax
			else
				if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate
				and  PayablesInvoice.TaxCode = PayablesInvoiceAddOnChargeRel.TaxCode)
					if  (MemoInvoice)
						initialize CalculateTax
						CalculateTax.TaxCode 							= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.TaxableAmount						= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
						CalculateTax.TaxAmount							= PayablesInvoiceAddOnChargeRel.TaxAmount



						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
						include CallCalculateTax
						CalculateTax.InvoiceAmount						= CalculateTax.TaxableAmount  
	                    CalculateTax.TaxTable.TaxTableOutput[1].TaxCode	= PayablesInvoiceAddOnChargeRel.TaxCode 
	                    TaxWorkCalculateTaxRate							= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate 
						TaxWorkAccrualFlag								= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag
						TaxWorkCalculateAccrual							= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 
						TaxWorkTaxableAmount							= CalculateTax.TaxableAmount 
					else
						CalculateTax.TaxCode 							= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.Function			 				= CalculateTax.Function.Inquire
						include CallCalculateTax

					CalculateTax.TaxAmount 								= CalculateTax.InvoiceAmount * TaxWorkCalculateTaxRate
	                CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount 	= CalculateTax.TaxAmount 
	                CalculateTax.TaxableAmount							= CalculateTax.InvoiceAmount 
	                CalculateTax.TaxTable.TaxTableOutput[1].TaxRate		= TaxWorkCalculateTaxRate 
	                CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag	= TaxWorkCalculateAccrual 
				else




					if  ((WorkPostingSwitch = 4
					or    WorkPostingSwitch = 5)
					and  ChargebackMatchedNotReceived not entered)
						if  (PurchaseOrderAndLineAddOnChargeRel.TaxCode not entered)
							WorkPostingSwitch							= 3
		      
					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					CalculateTax.TaxCode 								= PayablesInvoiceAddOnChargeRel.TaxCode
					initialize CalculateTax.ProductTaxCategory
		
		            CalculateTax.TaxableAmount							= CalculateTax.InvoiceAmount
					initialize 											  CalculateTax.TaxAmount
					include CallCalculateTax

				initialize WorkTotalTaxAmount

				if  (PayablesInvoice = WorkChargebackInvoice)
					MtxMatchedQuantity				= WorkDistributionGroup.MatchedQuantity
					MtxMatchUnitCost				= DistributionUnitCost
				else
					MtxMatchedQuantity				= DetailsMatchedQuantity
					MtxMatchUnitCost				= DetailsMatchUnitCost
	
				WorkPostingSwitch					= 3
				MtxTotalTaxAmt						= CalculateTax.TaxAmount
				MtxTaxableAmount					= CalculateTax.TaxableAmount
				DetailsTaxAmount					= CalculateTax.TaxAmount


				if  (CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP entered)
					include 991CreateTaxDistrib
		      
					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  CalculateTax.TaxCode.TaxType.TaxTableCode)
						ChargebackTaxableAmount							+= MtxTaxableAmount
		
					if  (WorkPostingSwitch != 3
					and  PayablesInvoiceAddOnChargeRel.TaxCode entered
					and   PurchaseOrderAndLineAddOnChargeRel exists
					and  PurchaseOrderAndLineAddOnChargeRel.TaxCode entered
					and  PurchaseOrderAndLineAddOnChargeRel.TaxCode != PayablesInvoiceAddOnChargeRel.TaxCode)
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
						CalculateTax.TaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode
						initialize 										  CalculateTax.ProductTaxCategory
						include CallCalculateTax
						WorkPostingSwitch								= 3
						CalculateTax.TaxableAmount						-= MtxTotalTaxAmt

						if  (PayablesInvoice = WorkChargebackInvoice)
							MtxMatchedQuantity							= WorkDistributionGroup.MatchedQuantity
							MtxMatchUnitCost							= DistributionUnitCost
						else
							MtxMatchedQuantity							= DetailsMatchedQuantity
							MtxMatchUnitCost							= DetailsMatchUnitCost
			
						WorkPostingSwitch								= 3
						MtxTotalTaxAmt									= CalculateTax.TaxAmount
						MtxTaxableAmount								= CalculateTax.TaxableAmount
						DetailsTaxAmount								= CalculateTax.TaxAmount

						include 991CreateTaxDistrib
		      
					initialize WorkAccrualCode

		719MatchDistribCont  


			if  (WorkDistributionGroup.Amount entered
			and (!SkipPostings
			or   PayablesChargebackIndicator))
				initialize PendingDistributionAmount
				Include993						= false

				if  (!ItemType.Inventoried
				and  !AocToDifference)
					TempAccount					= WorkDistributionGroup.Account
					Include993					= true
				else
				if   (!DetailsLandedAddOnCharge
				and   !PurchaseOrderAndLineAddOnChargeRel exists
				or    PurchaseOrderLine not entered)
					Include993					= false
				else
				if  (PurchaseOrderLine entered
				and  ItemType.Service
				and  DoChargeback
				and  ServiceLineChargebackAmount  < 0
				and  DetailsAddOnCharge not entered)
					initialize WorkPostingSwitch
					initialize PayablesChargebackIndicator
					Include993				= true
				else
				if  (PurchaseOrderLine entered
				and  !ItemType.Inventoried)
					Include993				= true
				else
				if  (ThisReceiptLineRel exists
				and  !ItemType.Inventoried)
					Include993				= true
				else
				if  (!ThisReceiptLineRel exists
				and  DetailsAddOnCharge not entered
				and  !ItemType.Inventoried
				and   PurchaseOrderLine not entered
				and   DetailsSequenceNumber entered)
					Include993				= true


				if  (!ItemType.Inventoried
				and  !AocToDifference)
					TempAccount					= WorkDistributionGroup.Account
					Include993					= true
				else
				if  (PurchaseOrderLine entered
				and  !ItemType.Inventoried)
					Include993				= true
				else
				if  (ThisReceiptLineRel exists
				and  !ItemType.Inventoried)
					Include993				= true

				if  (Include993)

					include 6300MmdistDistribs
				else	

					WorkDistributionGroup.AddOnCharge			= DetailsAddOnCharge
					WorkDistributionGroup.UnitAmount			= WorkDistributionGroup.MatchedQuantity
					if  (Company.SummarizeDistribution.DoNotSummarize
					or   PayablesInvoice.RetainageAccrualCode entered)
						WorkDistributionGroup.Description	= AddOnCharge.Description
					else
						initialize WorkDistributionGroup.Description

					if (PayablesInvoice.InvoiceType.CreditMemo
					and !MemoInvoice)
						WorkDistributionGroup.Invoice			= WorkChargebackInvoice

					if  (RecordSource.GeneratedByAocSpread)
						if  (PurchaseOrderSpreadAddOnChargeRel exists
						and  PurchaseOrderSpreadAddOnChargeRel.SpreadMethod.NoSpread)
							WorkDistributionGroup.Account = PurchaseOrderSpreadAddOnChargeRel.PostingAccount

					if  (PurchaseOrderLine not entered
					and  PurchaseOrderAndLineAddOnChargeRel exists)
						WorkDistributionGroup.UnitAmount		= 1
					else
						WorkDistributionGroup.UnitAmount		= 0

					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  !MemoInvoice
					and  WorkDistributionGroup.UnitAmount > 0)
						WorkDistributionGroup.UnitAmount			*= -1
							
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PendingDistributions)
						if  (PayablesInvoice.MatchProcessType.ServiceContract)
							if (!LocalSumDistribUpdateDone)							
								LocalSumDistribUpdateDone			= true			
								for each InvoiceDistributionsForContractLineRel
									increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
						else
						if  (WorkDistributionGroup.Invoice = PayablesInvoice	
						and  PurchaseOrderLine entered)
							if (!LocalSumDistribUpdateDone)							
								LocalSumDistribUpdateDone			= true			
								for each InvoiceDistributionsForPurchaseOrderLineRel
									increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
						else
						if  (WorkDistributionGroup.Invoice = PayablesInvoice	
						and  PurchaseOrderLine not entered
						and  ContractLine not entered)
							if (!LocalSumDistribUpdateDone)							
								LocalSumDistribUpdateDone			= true			
								for each MiscellaneousInvoiceDistributionsRel
									increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else

						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount

					initialize WorkAccrualCode


			
		719aPostFullInvoiceLine

			
			initialize AmMatchedQuantity

			WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company					= Company
			WorkDistributionGroup.Invoice					= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge
      
			WorkDistributionGroup.Amount				= MatchedQuantity * MatchUnitCost
			AmMatchedQuantity								= DetailsMatchedQuantity 
			if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
				WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
			else
				WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount




      
			WorkDistributionGroup.MatchedQuantity					= MatchedQuantity
			DistributionUnitCost							= MatchUnitCost 



      		
      		if  (PurchaseOrderLine entered
      		and  !ItemType.Inventoried)
      			include 6300MmdistDistribs
				SkipPostings = false
      
				TotalDistributionAmount						= PendingDistributionAmount 

		725CalcExchRateVar




			if  (Company.Currency  != PayablesInvoice.InvoiceCurrency
			and  PurchaseOrder.CurrencyExchangeSetPoint.Invoicing
			and  InvoiceCurrencyExchangeRate != WorkReceiptConversionRate
			and  InvoiceCurrencyExchangeRate entered
			and  WorkReceiptConversionRate entered
			and  ItemType.Inventoried
			and  WorkVarianceQuantity entered)




				LocalCurrencyRelationship.FromCurrency	      		= PayablesInvoice.InvoiceCurrency
				LocalCurrencyRelationship.ToCurrency		      	= Company.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CostDifference 									= (NonTaxEnteredUnitCost * InvoiceCurrencyExchangeRate)
					CostDifference 									-= (NonTaxEnteredUnitCost * WorkReceiptConversionRate)
				else
					CostDifference 									= (NonTaxEnteredUnitCost / InvoiceCurrencyExchangeRate)
					CostDifference									-= (NonTaxEnteredUnitCost / WorkReceiptConversionRate)


				include 726CreateExchRateApdist

				if  (!MatchedNotReceivedExchangeVariance
				and  CostDifference entered)
					include 726aIcUpdates	

		725tCalcTaxExchRateVar






			if  (Company.Currency = PayablesInvoice.InvoiceCurrency
			or   InventoryCompanyRel.CostingMethod.StandardCosting
			or   PayablesInvoiceAddOnChargeRel.TaxCode.TaxType = "A"
			or  InvoiceCurrencyExchangeRate = WorkReceiptConversionRate
			or  (ApprovedAddOnChargeLandTaxUnitCost not entered)
			or  !PurchaseOrder.CurrencyExchangeSetPoint.Invoicing
			or   WorkVarianceQuantity <= 0
			or  !ItemType.Inventoried)
				NextSentence = true
			else




				LocalCurrencyRelationship.FromCurrency	      		= PayablesInvoice.InvoiceCurrency
				LocalCurrencyRelationship.ToCurrency		      	= Company.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CostDifference 								= (ApprovedAddOnChargeLandTaxUnitCost * InvoiceCurrencyExchangeRate) 
					CostDifference								-= (ApprovedAddOnChargeLandTaxUnitCost * WorkReceiptConversionRate)
				else
					CostDifference 								= (ApprovedAddOnChargeLandTaxUnitCost / InvoiceCurrencyExchangeRate) 
					CostDifference								-= (ApprovedAddOnChargeLandTaxUnitCost / WorkReceiptConversionRate)


				include 726CreateExchRateApdist

				if  (!MatchedNotReceivedExchangeVariance
				and  CostDifference entered)
					include 726aIcUpdates	

		726CreateExchRateApdist

			
			initialize WorkDistributionGroup
			WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company				= Company
			WorkDistributionGroup.Invoice				= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail			= MatchWorkInvoiceAddOnCharge
			WorkDistributionGroup.AddOnCharge					= AddOnCharge

			WorkDistributionGroup.Description							= "ExchangeRateCostVariance"
			WorkDistributionGroup.Amount				= WorkVarianceQuantity * CostDifference  
			WorkDistributionGroup.RetainageAccrualCode					= PayablesInvoice.RetainageAccrualCode




			if  (MatchedNotReceivedExchangeVariance)
				WorkDistributionGroup.Account = WorkToleranceAccount 
			else
			if (!ItemLocationRel.InventoryTracked)								
				WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
			else
			if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
				WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
			else
				WorkDistributionGroup.Account				= Company.CostVarianceAccount

			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate						= WorkReceiptConversionRate
			else
				WorkDistributionGroup.CurrencyRate						= InvoiceCurrencyExchangeRate

			if  (WorkDistributionGroup.CurrencyRate not entered)
				WorkDistributionGroup.CurrencyRate						= 1

			if  (WorkAccrualCode not entered)
				WorkAccrualCode															= PayablesInvoice.RetainageAccrualCode

			invoke CreateDistribution MatchWork
				invoked.PrmWorkDistributionGroup		= WorkDistributionGroup


			increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount

			initialize 												  		PayablesChargebackIndicator

		726aIcUpdates


            LocalLocation = first PayablesInvoiceDetailRel.Location
            if (ThisReceiptLineRel.ShipToLocation entered)
                LocalLocation = ThisReceiptLineRel.ShipToLocation
           	if (LocalLocation not entered)
           	    LocalLocation = PurchaseOrderLine.ShipToLocation

			if  (ItemLocationRel exists
			and  ItemLocationRel.InventoryTracked)								
				LocalCurrencyTable							= PayablesInvoice.CurrencyTable
				LocalExchangeDate							= PayablesInvoice.InvoiceDate				
	            CurrencyWork.TransactionAmount				= ConvertedCost
	            CurrencyWork.FromCurrency					= PayablesInvoice.InvoiceCurrency
				CurrencyWork.BaseAmount.ToCurrency			= Company.Currency
				ConvertedCost								= CurrencyWork.BaseAmount.OutputCurrencyAmount


				
				invoke UpdateForCostAdjustment ItemLocationRel
					if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						invoked.PrmOffsetAccount			= Company.CostVarianceAccount
					invoked.PrmCostDifference				= ConvertedCost
					invoked.PrmQuantity						= WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
					invoked.PrmDocumentNumber				= ThisPurchaseOrderReceiptLineRel.first InventoryTransactionLineRel.InventoryTransaction
					invoked.PrmLineNumber					= ThisReceiptLine
					invoked.PrmAddOnChargeDifference		= true

				if  (LocalAutoMatchResult entered)
					invoke FastUpdate LocalAutoMatchResult
						invoked.CostVariance				+= ConvertedCost * WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier

					invoke MarkAsCostVarianceCreatedToTrue AutoMatchResultInvoiceRel

		733TolAccount


			if  (MatchWork.MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !PayablesInvoice.InvoiceType.CreditMemo
			and  PayablesInvoice.ProcessLevel.UnderbillAccount entered)
				WorkToleranceAccount						= PayablesInvoice.ProcessLevel.UnderbillAccount
			else
			if  (MatchWork.MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !PayablesInvoice.InvoiceType.CreditMemo
			and  Company.UnderbillAccount entered)
				WorkToleranceAccount						= Company.UnderbillAccount
			else
			if  (MatchWork.PayablesInvoice.InvoiceType.MatchPrepayment)
				if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
					WorkToleranceAccount						= PayablesInvoice.ProcessLevel.PrepayAccount
				else
					WorkToleranceAccount						= Company.PrepayAccount
			else
			if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
				WorkToleranceAccount						= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
			else
				WorkToleranceAccount						= Company.ToleranceOffsetAccount



		751AocIcAdjust

			if  (!DoChargeback
			or   !PayablesInvoice.CostComponentMatch)
				if  (DoChargeback
				and  Difference3Amount!= 0
				and  LocalEnteredUnitCost != 0
				and  NonTaxApprovedUnitCost != 0)
					DistributionUnitCost = (((ApprovedUnitCost * LocalEnteredUnitCost) / NonTaxApprovedUnitCost) - LocalEnteredUnitCost)







				if  (DistributionUnitCost entered)
					CurrentCostDifference				= DistributionUnitCost


				CurrentCostDifference					= DistributionUnitCost + ApOnlyLandTaxUnitCost

				ConvertedCost									= CurrentCostDifference



				if  (ExactInvoiceDetailRel.EnteredUOM != Item.StockUOM
				or   ExactInvoiceDetailRel.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM) 







					ConvertedCost									= CurrentCostDifference / WorkVendorPriceUOMMultiplier
				else
					ConvertedCost									= CurrentCostDifference



				if (PayablesInvoice.InvoiceCurrency != Company.Currency)
					LocalCurrencyTable								= PayablesInvoice.CurrencyTable				
					LocalExchangeDate								= PayablesInvoice.InvoiceDate				
					TranCurrRelationship.FromCurrency	      		= PayablesInvoice.InvoiceCurrency
					TranCurrRelationship.ToCurrency		      		= Company.Currency
					TranCurrExchangeRate.CurrencyRelationship 		= TranCurrRelationship

					if (TranCurrRelationship.MultDiv.Multiply)
						ConvertedCost 								= (CurrentCostDifference * TranCurrExchangeRate.Rate)
					else				
						ConvertedCost 								= (CurrentCostDifference / TranCurrExchangeRate.Rate)




	            LocalLocation = first PayablesInvoiceDetailRel.Location
    	        if (ThisReceiptLineRel.ShipToLocation entered)
        	        LocalLocation = ThisReceiptLineRel.ShipToLocation
               	if (LocalLocation not entered)
               	    LocalLocation = PurchaseOrderLine.ShipToLocation



				
				if  (ConvertedCost entered
				and  ItemLocationRel exists)
					if  (MatchWork.MatchLevel.DetailMatch
					and  ReceiptLinesForPurchaseOrderAndItemRel exists)
						initialize LocalTotalReceivedQuantity
						for each ReceiptLinesForPurchaseOrderAndItemRel





							if  (ExactInvoiceDetailRel.PurchaseOrderReceipt entered
							and (ExactInvoiceDetailRel.PurchaseOrderReceipt != each.PurchaseOrderReceipt
							or   ExactInvoiceDetailRel.PurchaseOrderReceiptLine != each.PurchaseOrderReceiptLine))

								NextSentence = true
							else
							if  (each.Status > 0
							and (each.CatchWeightQuantity entered
							or   each.EnteredReceivedQuantity > each.RejectedQuantity))



								if (each.CatchWeightQuantity entered)
									LocalCostAdjustQuantity				= each.CatchWeightQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
								else
									LocalCostAdjustQuantity				= ((each.EnteredReceivedQuantity - each.RejectedQuantity)  * PurchaseOrderLine.VendorPriceUOMMultiplier)


								if  (LocalCostAdjustQuantity not < WorkVarianceQuantity - LocalTotalReceivedQuantity)

									LocalCostAdjustQuantity = ((WorkVarianceQuantity - LocalTotalReceivedQuantity) * PurchaseOrderLine.VendorPriceUOMMultiplier)
									
								LocalTotalReceivedQuantity += LocalCostAdjustQuantity


								
								invoke UpdateForCostAdjustment ItemLocationRel
									invoked.PrmCostDifference			= ConvertedCost
									invoked.PrmQuantity					= LocalCostAdjustQuantity
									invoked.PrmDocumentNumber			= each.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
									invoked.PrmLineNumber				= each.PurchaseOrderReceiptLine 
									invoked.PrmAddOnChargeDifference	= true
									if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
										invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
									else
										invoked.PrmOffsetAccount			= Company.CostVarianceAccount

								if  (LocalAutoMatchResult entered)
									invoke FastUpdate LocalAutoMatchResult
										invoked.CostVariance				+= ConvertedCost * LocalCostAdjustQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier

									invoke MarkAsCostVarianceCreatedToTrue AutoMatchResultInvoiceRel
								
					else

						invoke UpdateForCostAdjustment ItemLocationRel
							if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
								invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
							else
								invoked.PrmOffsetAccount			= Company.CostVarianceAccount
							invoked.PrmCostDifference					= ConvertedCost
							invoked.PrmQuantity							= MatchedQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
							invoked.PrmDocumentNumber					= ThisPurchaseOrderReceiptLineRel.first InventoryTransactionLineRel.InventoryTransaction
							invoked.PrmLineNumber						= ThisReceiptLine
							invoked.PrmAddOnChargeDifference			= true

						if  (LocalAutoMatchResult entered)
							invoke FastUpdate LocalAutoMatchResult
								invoked.CostVariance				+= ConvertedCost * MatchedQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
							
							invoke MarkAsCostVarianceCreatedToTrue AutoMatchResultInvoiceRel

		844aFindMatrecwrkRecord





			ThisOnePassed								= true
			
			if  (ThisReceiptLineAOCRel.MatchDetailKey != MatchDetailKey)

				ThisOnePassed							= false 
			else
			if  (!MatchWork.ProcessMode.Reconciliation
			and  !MemoInvoice
			and   PayablesInvoice.CostComponentMatch
			and  (ThisReceiptLineAOCRel.MatchSub != MatchSub1
			or    !ThisReceiptLineAOCRel.Selected))

				ThisOnePassed							= false 
			else
			if  (MatchWork.ProcessMode.Reconciliation
			and  !ThisReceiptLineAOCRel.Selected)

				ThisOnePassed							= false 
			else
			if  ((MatchWork.MatchRuleType.OneToOne
			or    MatchWork.MatchRuleType.OneToAll)
			and   ThisReceiptLine entered 
			and   ThisReceiptLineAOCRel.MatchObjectID entered)

				ThisOnePassed							= false 
			else
			if  (MatchWork.ProcessMode.Reconciliation
			and  InvoiceDetailKeyed
			and (MatchWork.MatchRuleResult.AllToOne
			or   MatchWork.MatchRuleResult.AllToAll)
			and  ThisReceiptLineAOCRel.MatchObjectID entered)

				ThisOnePassed							= false
			

			if   (ThisReceiptLineAOCRel.MatchDetailKey 				= MatchDetailKey
			and  (PurchaseOrderLine 	!= ThisReceiptLineAOCRel.PurchaseOrderLine
			or    AddOnCharge 			!= ThisReceiptLineAOCRel.AddOnCharge))  
				if  ((MatchWork.MatchLevel.InvoiceMatch
				and  !MatchWork.MatchRuleResult.AllToAll
				and  !MatchWork.MatchRuleResult.OneToAll)
				or  (MatchWork.MatchLevel.DetailMatch
				and  PurchaseOrderLine entered))

					ThisOnePassed							= false

			if  (PurchaseOrder != ThisReceiptLineAOCRel.PurchaseOrder)
				if  (PurchaseOrder not entered
				or   MatchWork.MatchLevel.DetailMatch)

					ThisOnePassed							= false

			if  (AddOnCharge != ThisReceiptLineAOCRel.AddOnCharge)  

				ThisOnePassed								= false

			if  (!ThisOnePassed)
				initialize ThisReceipt
				initialize ThisReceiptLine
				initialize ThisPurchaseOrderLine
				initialize ThisAddOnCharge

			include 899BuildVpriCnv


		899BuildVpriCnv 

				
			initialize WorkVendorPriceUOM
			initialize WorkVendorBuyUOM
			WorkVendorPriceUOMMultiplier				= 1
			WorkVendorBuyUOMMultiplier					= 1

			if  (PurchaseOrderLine entered
			and  PurchaseOrderLine.VendorPriceUOMMultiplier entered)
				WorkVendorPriceUOM						= PurchaseOrderLine.VendorPriceUOM 
				WorkVendorPriceUOMMultiplier			= PurchaseOrderLine.VendorPriceUOMMultiplier
				WorkVendorBuyUOM						= PurchaseOrderLine.EnteredBuyUOM
				WorkVendorBuyUOMMultiplier				= PurchaseOrderLine.EnteredBuyUOMMultiplier
			else
			if  (ThisPurchaseOrderReceiptLineRel exists
			and  ThisPurchaseOrderReceiptLineRel.VendorPriceUOMMultiplier entered)
				WorkVendorPriceUOM						= ThisPurchaseOrderReceiptLineRel.VendorPriceUOM 
				WorkVendorPriceUOMMultiplier			= ThisPurchaseOrderReceiptLineRel.VendorPriceUOMMultiplier
				WorkVendorBuyUOM						= ThisPurchaseOrderReceiptLineRel.VendorBuyUOM
				WorkVendorBuyUOMMultiplier				= ThisPurchaseOrderReceiptLineRel.VendorBuyUOMMultiplier




		833aUpdateRecaocdtl





				
			include 835aGetBestRecDate

			initialize NewInvoiceLinkPOCostUpdate
			NewReceiptLineMatchedQuantity							= LocalMatchedQuantity
			NewInvoiceLinkPOCostUpdate								= LocalMatchedAmount


			invoke FastUpdate ThisReceiptLineAOCRel

				if  (!PayablesInvoice.CostComponentMatch)
					invoked.Selected								= true




				invoked.MatchedQuantity								= LocalMatchedQuantity
				
				invoked.MatchAmount										= LocalMatchedAmount

				if  (invoked.PurchaseOrderReceiptLine entered)
					invoked.ReceivedQuantityToMatch						-= LocalMatchedQuantity
					if  (LocalMatchedAmount >= invoked.ReceivedAmountToMatch)
						initialize invoked.ReceivedAmountToMatch
					else
						invoked.ReceivedAmountToMatch					-= LocalMatchedAmount



				else
					if (LocalMatchedAmount >= invoked.MiscellaneousAddOnChargeInvoicedAmount)
						initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
						invoked.ReceivedQuantityToMatch						-= LocalMatchedQuantity
					else
						invoked.MiscellaneousAddOnChargeInvoicedAmount		-= LocalMatchedAmount

				if  (!AddOnCharge.AddOnChargeType.Allowance)
					if  (invoked.ReceivedAmountToMatch < 0)
						initialize invoked.ReceivedAmountToMatch
					if  (invoked.ReceivedQuantityToMatch < 0)
						initialize invoked.ReceivedAmountToMatch

				invoked.MatchObjectID									= MatchWork.OutMatchObjectID
				invoked.MatchSequence									= MatchSequence
				initialize invoked.OpenToMatchQuantity




			if  ((MatchWork.MatchRuleType.AllToOne
			and   MatchWork.MatchLevel.DetailMatch)
			or  (WithPreviousDetailMatch)
			or  (MatchWork.MatchLevel.DetailMatch
			and  MatchWork.ProcessMode.Reconciliation)
			or  (PayablesInvoice.MatchProcessType.AOCOnly
			and  !PayablesInvoice.CostComponentMatch
			and  MatchWork.MatchLevel.DetailMatch))

				if  (ThisReceiptLineAOCRel.Status     != 2)
					if  ((ThisReceiptLineAOCRel.ReceivedQuantityToMatch not entered
					and   ThisReceiptLineAOCRel.PurchaseOrderReceiptLine entered)
					or   (ThisReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount not entered
					and   ThisReceiptLineAOCRel.PurchaseOrderReceiptLine not entered))
						invoke FastUpdate ThisReceiptLineAOCRel
							if  (invoked.PurchaseOrderReceiptLine entered)
								invoked.OpenToMatchQuantity				= ThisReceiptLineAOCRel.ReceivedQuantityToMatch
								invoked.Status								= 9
								invoked.Closed								= "Y"
							else 
							if (PurchaseOrderAndLineAddOnChargeRel.Closed = "Y")
								invoked.Status								= 9
								invoked.Closed								= "Y"
							initialize invoked.ReceivedAmountToMatch
							initialize invoked.ReceivedQuantityToMatch
							initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
							initialize invoked.OpenToMatch
					else
						invoke FastUpdate ThisReceiptLineAOCRel
							if  (invoked.PurchaseOrderReceiptLine entered)
								invoked.OpenToMatchQuantity				= ThisReceiptLineAOCRel.ReceivedQuantityToMatch
							invoked.Status								= 1
			else
				if  (ThisReceiptLineAOCRel.Status     != 2)
					if  (ThisReceiptLineAOCRel.ReceivedQuantityToMatch not entered)
						invoke FastUpdate ThisReceiptLineAOCRel
							invoked.Status								= 9
							invoked.Closed										= "Y"
							initialize invoked.ReceivedAmountToMatch
							initialize invoked.ReceivedQuantityToMatch
							initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
							initialize invoked.OpenToMatchQuantity
					else
						invoke FastUpdate ThisReceiptLineAOCRel
							invoked.Status								= 5


						
			if  (ItemType.Inventoried
			or   ItemType.NonStock)
				initialize UOMCalculation

				UOMCalculation.InputUOM						= PurchaseOrderLine.VendorPriceUOM
				UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.InputQuantity				= ThisReceiptLineAOCRel.MatchedQuantity
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
				DetailsVBuyMatchedQuantity					= UOMCalculation.OutputQuantity




			invoke UpdateFromMatch ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel
				invoked.MatchObjectID						= MatchWork.OutMatchObjectID
				invoked.MatchSequence						= MatchSequence

				if  (ItemType.Inventoried
				or   ItemType.NonStock)
					invoked.MatchedQuantity					= UOMCalculation.OutputQuantity
				else
					invoked.MatchedQuantity					= ThisReceiptLineAOCRel.MatchedQuantity

				invoked.ChargebackQuantity					= ThisReceiptLineAOCRel.ChargebackQuantity
				invoked.OpenToMatchQuantity					= ThisReceiptLineAOCRel.OpenToMatchQuantity
				invoked.ReceivedQuantityToMatch				= ThisReceiptLineAOCRel.ReceivedQuantityToMatch
				invoked.ReceivedAmountToMatch				= ThisReceiptLineAOCRel.ReceivedAmountToMatch
				invoked.MiscellaneousAddOnChargeInvoicedAmount		= ThisReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
				invoked.Closed								= ThisReceiptLineAOCRel.Closed
				invoked.Status								= ThisReceiptLineAOCRel.Status






		835aGetBestRecDate

			
			if  (ThisReceiptRel exists)
				if  (TermsCalculation.UseLatestReceiptDate
				and  ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate > BestReceiptDate)
					BestReceiptDate						 		= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate
				else
				if  (TermsCalculation.UseShipToArriveDate)
					if  (ThisReceiptRel.PurchaseOrderReceipt.ShipToArriveDate > BestReceiptDate)
						BestReceiptDate							= ThisReceiptRel.PurchaseOrderReceipt.ShipToArriveDate
					else 
					if  (ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate > BestReceiptDate)
						BestReceiptDate						 	= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate
				else
				if  (TermsCalculation.UseEarliestReceiptDate)
					if  (ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate < BestReceiptDate
					or   BestReceiptDate not entered)
						BestReceiptDate						 	= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate

		787WriteNegAccApdistrib


			if  (RecordSource.InternalMatchDetails
			or   DetailsMatchedQuantity not entered
			or   NonTaxEnteredUnitCost != DetailsMatchUnitCost)
				NextSentence = true
			else
				initialize WorkDistributionGroup.Amount
				
				if  (EnteredAddOnChargeLandTaxUnitCost entered
				and  ApprovedAddOnChargeLandTaxUnitCost > EnteredAddOnChargeLandTaxUnitCost
				and  !PayablesInvoice.CostComponentMatch)
					WorkDistributionGroup.Amount					= DetailsMatchedQuantity * (EnteredAddOnChargeLandTaxUnitCost - ApprovedAddOnChargeLandTaxUnitCost)

				if  (WorkDistributionGroup.Amount entered)
					LastTaxCode														= PayablesInvoiceAddOnChargeRel.TaxCode

					initialize WorkDistributionGroup
					WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
					WorkDistributionGroup.Company				= Company
					WorkDistributionGroup.Invoice				= PayablesInvoice
					WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
					WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
					WorkDistributionGroup.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge

					WorkDistributionGroup.AddOnCharge				= DetailsAddOnCharge
					WorkDistributionGroup.Description				= "ExchangeRateCostVariance"
					WorkDistributionGroup.RetainageAccrualCode		= PayablesInvoice.RetainageAccrualCode
					WorkDistributionGroup.Amount					= WorkDistributionGroup.Amount * -1
		
					if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
						WorkDistributionGroup.Account	= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
					else
						WorkDistributionGroup.Account	= Company.ReceiptAccrualAccount
		
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					initialize WorkAccrualCode

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount

		2122aGetLndtaxUcst



			MtxPrevMatchQty												= PurchaseOrderAndLineAddOnChargeRel.MatchedQuantity

			initialize ApprovedLandTaxUnitCost
			initialize NonTaxEnteredUnitCost
			initialize NonTaxMatchUnitCost
			
			ApprovedUnitCost											= MatchUnitCost 
			NonTaxApprovedUnitCost										= MatchUnitCost
			NonTaxMatchUnitCost											= MatchUnitCost

			if (TaxOnly)
				if  (PayablesInvoice.TaxAdjustment.Calculate
				or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					initialize ApprovedUnitCost
					initialize NonTaxApprovedUnitCost
					initialize NonTaxMatchUnitCost

			if  (PurchaseOrderLine.IsCatchWeightItem 
			and PurchaseOrderAndLineAddOnChargeRel exists) 
				NonTaxEnteredUnitCost = (PurchaseOrderAndLineAddOnChargeRel.EnteredUnitCost * (PurchaseOrderLine.VendorPriceUOMMultiplier / PurchaseOrderLine.EnteredBuyUOMMultiplier))

			else
			if  (ItemType.Inventoried
			and PayablesInvoiceAddOnChargeRel.MatchedQuantity = PurchaseOrderAndLineAddOnChargeRel.Quantity
			and PurchaseOrderAndLineAddOnChargeRel.EnteredUnitCost entered)
				NonTaxEnteredUnitCost									= PurchaseOrderAndLineAddOnChargeRel.EnteredUnitCost
			else
			if (PurchaseOrderAndLineAddOnChargeRel exists)
				if (PurchaseOrderLine not entered)
					NonTaxEnteredUnitCost								= PurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount 
				else
					NonTaxEnteredUnitCost								= PurchaseOrderAndLineAddOnChargeRel.EnteredUnitCost 
			else
				NonTaxEnteredUnitCost									= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost
      
			initialize EnteredLandTaxUnitCost
			initialize MatchLandTaxUnitCost
			initialize TaxableAmount

			if  (PayablesInvoice.CallVertexByDocument)
				NextSentence = true 
			else 			
			if  (PurchaseOrderAndLineAddOnChargeRel.TaxCode entered)
				initialize CalculateTax
				CalculateTax.TaxCode				= PurchaseOrderAndLineAddOnChargeRel.TaxCode
				CalculateTax.InvoiceAmount 			= NonTaxEnteredUnitCost
				UsePODate							= true
				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax

				UsePODate							= false
				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					EnteredLandTaxUnitCost			= CalculateTax.OutputTotalLandedTaxAmount5DP

				initialize CalculateTax
				CalculateTax.TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
				CalculateTax.InvoiceAmount 			= NonTaxMatchUnitCost
				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax

				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					MatchLandTaxUnitCost		= CalculateTax.OutputTotalLandedTaxAmount5DP
					MatchUnitCost				+= MatchLandTaxUnitCost
								
				if  (PayablesInvoiceAddOnChargeRel.TaxCode entered
				and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable
				and  PayablesInvoiceAddOnChargeRel.TaxCode = PurchaseOrderAndLineAddOnChargeRel.TaxCode)
					initialize CalculateTax
					CalculateTax.TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
					CalculateTax.InvoiceAmount 			= NonTaxApprovedUnitCost
					if  (CalculateTax.InvoiceAmount entered)

						CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
						CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
						include CallCalculateTax
	
					TaxableAmount					= CalculateTax.TaxableAmount
					if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
						ApprovedLandTaxUnitCost			= CalculateTax.OutputTotalLandedTaxAmount5DP

						ApprovedUnitCost 				+= CalculateTax.OutputTotalLandedTaxAmount5DP


			if  (PayablesInvoiceAddOnChargeRel.TaxCode entered
			and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable
			and  !PayablesInvoice.TaxCode.TaxType.CalculatedRate)
				initialize CalculateTax
				CalculateTax.TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
				CalculateTax.InvoiceAmount 			= NonTaxApprovedUnitCost

				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax

				TaxableAmount					= CalculateTax.TaxableAmount



				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					ApprovedLandTaxUnitCost			= CalculateTax.OutputTotalLandedTaxAmount5DP

					ApprovedUnitCost 				+= CalculateTax.OutputTotalLandedTaxAmount5DP

			if  (PayablesInvoiceAddOnChargeRel.TaxCode entered
			and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable
			and  PayablesInvoice.TaxCode.TaxType.CalculatedRate)
				include 2123GetCalcTaxRate

		2123GetCalcTaxRate

			
			initialize CalculateTax
			CalculateTaxCode								= PayablesInvoiceAddOnChargeRel.TaxCode
			CalculateTax.TaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode
			CalculateTax.ProductTaxCategory					= PayablesInvoiceAddOnChargeRel.ProductTaxCategory
			CalculateTax.TaxableAmount						= MatchedQuantity * NonTaxApprovedUnitCost
			CalculateTax.TaxAmount							= PayablesInvoiceAddOnChargeRel.TaxAmount
			
			CalculateTax.InvoiceAmount						= CalculateTax.TaxableAmount
			TaxableAmount									= CalculateTax.TaxableAmount

			CalcTaxRate										= PayablesInvoiceAddOnChargeRel.TaxAmount / TaxableAmount
			
			initialize CalculateTax.OutputTotalLandedTaxAmount5DP
			
			if  (LocalEntityTaxCodeRel.LandedCost)
				CalculateTax.OutputTotalLandedTaxAmount5DP	= PayablesInvoiceAddOnChargeRel.TaxAmount
				CalculateTax.OutputTotalTaxAmount			= PayablesInvoiceAddOnChargeRel.TaxAmount

			ApprovedLandTaxUnitCost							= CalculateTax.OutputTotalLandedTaxAmount5DP / MatchedQuantity

			ApprovedUnitCost								+= ApprovedLandTaxUnitCost
			
			if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
				CalculateTax.TaxableAmount					= MatchedQuantity * NonTaxMatchUnitCost
				MatchLandTaxUnitCost						= NonTaxMatchUnitCost * CalcTaxRate
				MatchUnitCost								+= MatchLandTaxUnitCost 

		2124CreateVariance















			WorkTaxUnitCost								= (NonTaxApprovedUnitCost - NonTaxMatchUnitCost)
			if  (WorkTaxUnitCost entered)
				if (ItemType.Inventoried)
					WorkPostingSwitch						= 2
				else
					WorkPostingSwitch						= 1
				
				initialize CalculateTax
				CalculateTax.InvoiceAmount					= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)

				include 2125BuildTaxDetails
				








			WorkTaxUnitCost								= (NonTaxMatchUnitCost - NonTaxEnteredUnitCost)



			if  (WorkTaxUnitCost entered)
				if  ((PerformedFrom.Match
				and   MatchWork.MatchWork.MatchLevel.DetailMatch)
				or   (!ItemType.Inventoried
				and   PerformedFrom.MA61))
					WorkPostingSwitch						= 1
				else
				if  (ItemType.Inventoried)
					WorkPostingSwitch						= 2
				else
					WorkPostingSwitch						= 3

				initialize CalculateTax
				CalculateTax.InvoiceAmount					= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)

				include 2125BuildTaxDetails
				


			if  (MatchedQuantity    	>= WorkMatchedNotReceivedQuantity
			and  WorkMatchedNotReceivedQuantity        	> 0
			and  !PayablesInvoice.TaxAdjustment.Calculate)
				if  (ItemType.Inventoried)
						WorkPostingSwitch					= 2
				else
					WorkPostingSwitch						= 1
					
				initialize CalculateTax.TaxCode
				initialize MatchedNotReceivedCount
				LocalTaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode

				if  (PayablesInvoice.TaxAdjustment not entered 
				or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
					LocalTaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode
					if  (MatchWorkReceiptLineForPOLineRel exists
					and  NewPOLineMatchedNotReceived entered
					and  first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.TaxCode entered
					and  first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.ItemType.Inventoried)
						WorkPostingSwitch						= 4
						MatchedNotReceivedCount					+= 1
						initialize TemporaryTaxType


				initialize CalculateTax
				if  (ItemType.Inventoried)
					WorkTaxUnitCost							= NonTaxEnteredUnitCost
				else
					WorkTaxUnitCost							= NonTaxApprovedUnitCost	
				
				CalculateTax.InvoiceAmount					= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost

				include 2125BuildTaxDetails
				if  (ItemType.Inventoried)
					WorkPostingSwitch					= 3
				else
					WorkPostingSwitch					= 1

				initialize CalculateTax.TaxCode
				initialize WorkDistributionGroup.TaxCode
				initialize CalculateTax.ProductTaxCategory
				initialize WorkDistributionGroup.TaxRate
				
				if  (ItemType.Inventoried
				and  MatchedNotReceivedCount entered)

					LocalTaxCode							= PayablesInvoiceAddOnChargeRel.TaxCode
					TemporaryTaxType						= CalculateTax.TaxCode.TaxType 
					initialize CalculateTax
					MatchedNotReceivedCount						+= 1
					WorkTaxUnitCost							= NonTaxEnteredUnitCost
					CalculateTax.InvoiceAmount				= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost

					include 2125BuildTaxDetails
					initialize MatchedNotReceivedCount




				if  (ItemType.Inventoried)
					WorkTaxUnitCost							= NonTaxMatchUnitCost -  NonTaxEnteredUnitCost
					
					if  (WorkTaxUnitCost entered)
						initialize CalculateTax
						TaxTolerance						= true
						WorkPostingSwitch					= 3
						CalculateTax.InvoiceAmount			= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost

						include 2125BuildTaxDetails

		2125BuildTaxDetails


			if (CalculateTax.TaxableAmount not entered							
			or  CalculateTax.TaxableAmount > CalculateTax.InvoiceAmount)		
				CalculateTax.TaxableAmount = CalculateTax.InvoiceAmount			



							
			if  (CalculateTax.InvoiceAmount entered)
				if  (CalculateTax.TaxCode not entered
				and  LocalTaxCode entered)
					CalculateTax.TaxCode							= LocalTaxCode
					CalculateTax.ProductTaxCategory					= PayablesInvoiceAddOnChargeRel.ProductTaxCategory
				else
				if  (PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				or   PayablesInvoice.TaxAdjustment.Calculate
				or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					if  (MatchWorkReceiptLineForPOLineRel exists
					and  first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.TaxCode entered)
						CalculateTax.TaxCode					= first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.TaxCode
						CalculateTax.ProductTaxCategory			= first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.ProductTaxCategory
					else
					if  (PurchaseOrderLine exists)
						CalculateTax.TaxCode					= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.ProductTaxCategory			= PurchaseOrderLine.ProductTaxCategory


										
				if  (CalculateTax.TaxCode entered
				and  TemporaryTaxType != "C")

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax
	
					if  (MatchedNotReceivedCount   = 2)
						if  (ItemType.Inventoried)
							WorkPostingSwitch					= 3
							
						Sub1 = 1
						while (Sub1 <= 8 and CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode entered)

				            CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP	-= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP
            				CalculateTax.TaxableAmount								-= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxableAmount
            				initialize CalculateTax.OutputTotalTaxAmount
            				Sub1 += 1



					WorkTaxAmount								+= CalculateTax.OutputTotalTaxAmount
					if  (!PerformedFrom.Contract)
						include 991CreateTaxDistrib

				if  (CalculateTax.TaxCode entered
				and  TemporaryTaxType  = "C")
					CalculateTaxCode 								= PayablesInvoiceAddOnChargeRel.TaxCode
					CalculateTax.TaxableAmount						= CalculateTax.InvoiceAmount
					CalculateTax.OutputTotalTaxAmount				= CalculateTax.InvoiceAmount * CalcTaxRate
						
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP		= CalculateTax.OutputTotalTaxAmount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate				= CalcTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount		= CalculateTax.TaxableAmount
					if  (LocalEntityTaxCodeRel.LandedCost)
						CalculateTax.OutputTotalLandedTaxAmount5DP				= CalculateTax.OutputTotalTaxAmount
						
					WorkTaxAmount												+= CalculateTax.OutputTotalTaxAmount

					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxCode not entered)
						CalculateTaxCode 											= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
			

					if  (!PerformedFrom.Contract)
						include 991CreateTaxDistrib

		991CreateTaxDistrib  


			if  (ItemType.Inventoried)

				if  (WorkPostingSwitch.MatchNotReceived)
					if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
					else
						LocalDefaultAccount									= Company.MatchedNotReceivedAccount
				else
				if  (WorkPostingSwitch.Writeoff)
					if  (PayablesInvoice.ProcessLevel.MatchWriteOffAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.MatchWriteOffAccount
					else
						LocalDefaultAccount									= Company.MatchWriteOffAccount
				else
				if  (WorkPostingSwitch.TaxVariance)
					if (!ItemLocationRel.InventoryTracked)								
						LocalDefaultAccount									= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						LocalDefaultAccount									= Company.CostVarianceAccount
				else
				if  (WorkPostingSwitch.TaxTolerance)
					if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.PrepayAccount
					else
					if  (MatchWork.PayablesInvoice.InvoiceType.MatchPrepayment)
						LocalDefaultAccount									= Company.PrepayAccount
					else
					if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else
						LocalDefaultAccount									= Company.ToleranceOffsetAccount
				else
				if  (WorkPostingSwitch.TaxWriteoff)
					if  (PayablesInvoice.ProcessLevel.UnderbillAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.UnderbillAccount
					else
					if  (Company.UnderbillAccount entered)
						LocalDefaultAccount									= Company.UnderbillAccount
					else
					if  (PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount
					else
						LocalDefaultAccount									= Company.InventoryReceiptArchivalAccount

				else
					if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
					else
						LocalDefaultAccount									= Company.ReceiptAccrualAccount


			I9 = 1
			while (I9 <= 8
			and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)


				
				if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP entered)
					if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

			
						if  (MatchWork.MatchWork.MatchLevel.InvoiceMatch
						and  WorkPostingSwitch.TaxTolerance)
							if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
								WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
							else
								WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
						else
						if (PurchaseOrderLine not entered
						and ContractLine not entered)

							if  (!PurchaseOrderLineDistributionRel exists)
								if  (PayablesInvoice.BypassMatch)
									if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
										WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
									else
										WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
			                	else
									if  (AddOnCharge.SpreadMethod.NoSpread
									or  (CurrentPurchaseOrderAndLineAddOnChargeRel exists
									and  !CurrentPurchaseOrderAndLineAddOnChargeRel.CreatedDuringSpread)
									or   AddOnCharge.AddOnChargeDifferenceAccount not entered)
									    if (PayablesInvoiceAddOnChargeRel.MiscellaneousAccount entered)
											WorkDistributionGroup.Account			= PayablesInvoiceAddOnChargeRel.MiscellaneousAccount 
										else
											WorkDistributionGroup.Account			= AddOnCharge.PostingAccount 
									else
										WorkDistributionGroup.Account				= AddOnCharge.AddOnChargeDifferenceAccount 
						else
						if (!ItemType.Inventoried
						and PurchaseOrderLine entered)

							if  (!PurchaseOrderLineDistributionRel exists
							and  !ContractLineDistributionRel exists
							and  !InvoiceDistributionsForPurchaseOrderLineRel exists
							and  !InvoiceDistributionsForContractLineRel exists)
								if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
									WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
								else
									WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
						else
						if (ItemType.Inventoried
						and PurchaseOrderLine entered)

							if  (LocalDefaultAccount entered)
								WorkDistributionGroup.Account 					= LocalDefaultAccount
							else
							if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
								WorkDistributionGroup.Account					= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
							else
								WorkDistributionGroup.Account					= Company.ReceiptAccrualAccount
						else
						if  (PayablesInvoice.MatchProcessType.ServiceContract)

							if (!InvoiceDistributionsForContractLineRel exists
							and  ContractLine entered)
								WorkDistributionGroup.Account					= first ContractLineDistributionRel.DistributionAccount 
						else

							if  (!PurchaseOrderLineDistributionRel exists
							and  !ContractLineDistributionRel exists
							and  !PendingDistributions)
								if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
									WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
								else
									WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
		

		

						
					else

						if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
						else
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
				      
		

					

		
					WorkDistributionGroup.FinanceEnterpriseGroup 		= Company.FinanceEnterpriseGroup
					WorkDistributionGroup.Company						= Company
					if (WorkDistributionGroup.Invoice not entered)
					    WorkDistributionGroup.Invoice					= PayablesInvoice
					WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
					WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
					WorkDistributionGroup.PayablesInvoiceDetail			= MatchWorkInvoiceAddOnCharge
		
					WorkDistributionGroup.AddOnCharge					= AddOnCharge
		
					initialize WorkDistributionGroup.Amount
					initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemTaxTransaction
					
		
					WorkDistributionGroup.TaxCode				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
					WorkDistributionGroup.TaxType				= CalculateTax.TaxTable.TaxTableOutput[I9].AccrualFlag
		
					WorkDistributionGroup.TaxRate				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
					WorkDistributionGroup.ProductTaxCategory	= CalculateTax.ProductTaxCategory

					if (WorkDistributionGroup.TaxCode entered)
						initialize WorkDistributionGroup.UnitAmount
					else	
						WorkDistributionGroup.UnitAmount		= MatchedQuantity
					WorkDistributionGroup.MatchedQuantity		= MatchedQuantity
		





		


		      





		       
					if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

						WorkDistributionGroup.RetainageLanded	= true
					else

						WorkDistributionGroup.RetainageLanded	= false
		
					WorkDistributionGroup.RetainageAccrualCode	= PayablesInvoice.RetainageAccrualCode
		       

		     		
		     		if  (ItemType.Service)
		     			initialize WorkDistributionGroup.LandedCost
		
		       



















		
					WorkDistributionGroup.MatchedQuantity						= MatchedQuantity
		      

		
					if  (PurchaseOrderLine exists)
						WorkDistributionGroup.Description						= PurchaseOrderLine.Description 
		
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  PendingDistributions)
						invoke DoInvoiceDistributionsForContractLine
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
					else
					if (PendingDistributions)

						invoke DoInvoiceDistributionsForPurchaseOrderLine
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
					else
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  ContractLineDistributionRel exists)

			
						invoke DoContractLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
					else
					if  (PurchaseOrderLineDistributionRel exists)

			
						invoke DoPOLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
					else
						WorkDistributionGroup.FinanceEnterpriseGroup 						= Company.FinanceEnterpriseGroup
						WorkDistributionGroup.Company										= Company
						WorkDistributionGroup.PurchaseOrder									= PurchaseOrder
						WorkDistributionGroup.PurchaseOrderLine								= PurchaseOrderLine
						WorkDistributionGroup.PayablesInvoiceDetail							= MatchWorkInvoiceAddOnCharge
						WorkDistributionGroup.AddOnCharge									= AddOnCharge
						WorkDistributionGroup.Contract										= PayablesInvoiceAddOnChargeRel.Contract
						WorkDistributionGroup.ContractLine									= ContractLine
		
						WorkDistributionGroup.TaxableAmount									= CalculateTax.TaxableAmount
						WorkDistributionGroup.Amount										= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup								= WorkDistributionGroup
		
		
	


				I9 += 1

			initialize WorkDistributionGroup.TaxCode
			initialize WorkDistributionGroup.TaxableAmount
			initialize WorkDistributionGroup.TaxType
			initialize WorkDistributionGroup.TaxRate
			

		6300MmdistDistribs


			if  (PurchaseOrderLine not entered
			or   !DetailsLandedAddOnCharge)

				if  (WorkDistributionGroup.Account not entered
				and  PurchaseOrderLine entered)
					WorkDistributionGroup.Account			= first InvoiceDistributionsForPurchaseOrderLineRel.DistributionAccount

				if  (WorkDistributionGroup.Account not entered
				and  ContractLine entered)
					WorkDistributionGroup.Account			= first InvoiceDistributionsForContractLineRel.DistributionAccount

				if  (WorkDistributionGroup.Account not entered)
					WorkDistributionGroup.Account			= first PurchaseOrderLineDistributionRel.DistributionAccount
				
				if  (WorkDistributionGroup.Account not entered)
					WorkDistributionGroup.Account			= TempAccount
				
				if  (WorkDistributionGroup.Account not entered
				and  CurrentPurchaseOrderAndLineAddOnChargeRel exists
				and  !CurrentPurchaseOrderAndLineAddOnChargeRel.CreatedDuringSpread)
					WorkDistributionGroup.Account			= CurrentPurchaseOrderAndLineAddOnChargeRel.AddOnCharge.PostingAccount
					
				if  (WorkDistributionGroup.Account not entered)
					WorkDistributionGroup.Account			= Company.ToleranceOffsetAccount
				 

				if  (WorkDistributionGroup.Account not entered)
					WorkDistributionGroup.Account			= Company.ToleranceOffsetAccount
				 
				WorkDistributionGroup.MatchedQuantity					= DetailsMatchedQuantity
				WorkDistributionGroup.AddOnCharge						= DetailsAddOnCharge
				WorkDistributionGroup.Description						= PurchaseOrderLine.Description
				
				if  (CurrentPurchaseOrderAndLineAddOnChargeRel exists)
					PurchaseOrder					= PurchaseOrder 
					PurchaseOrderLine				= PurchaseOrderLine
					if  (PurchaseOrderLine not entered)
						WorkDistributionGroup.UnitAmount					= 1


				if  (WorkDistributionGroup.Invoice = PayablesInvoice	
				and  PendingDistributions)
					if  (PayablesInvoice.MatchProcessType.ServiceContract)
						if (!LocalSumDistribUpdateDone)							
							LocalSumDistribUpdateDone			= true			
							for each InvoiceDistributionsForContractLineRel
								increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PurchaseOrderLine entered)
						if (!LocalSumDistribUpdateDone)							
							LocalSumDistribUpdateDone			= true			
							for each InvoiceDistributionsForPurchaseOrderLineRel
								increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PurchaseOrderLine not entered
					and  ContractLine not entered)
						if (!LocalSumDistribUpdateDone)							
							LocalSumDistribUpdateDone			= true			
							for each MiscellaneousInvoiceDistributionsRel
								increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
				else
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					if (DetailsInvoiceType = "C"
					and !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount
			else
			if  (!ItemType.Inventoried)









				initialize PendingDistributionAmount
				initialize FirstDistQuantity
	
				initialize DetailDistAmount
	

				if  (PurchaseOrderLine not entered
				or   PurchaseOrderLineDistributionRel exists
				or   InvoiceDistributionsForPurchaseOrderLineRel exists
				or  (!ItemType.Inventoried
				and  !PendingDistributions)
				or  (ContractLine entered
				and  InvoiceDistributionsForContractLineRel exists)
				or   !PayablesInvoice.BypassMatch)
					if  (WorkDistributionGroup.MatchedQuantity entered)
						DetailDistAmount							= WorkDistributionGroup.MatchedQuantity * DistributionUnitCost
					else
						DetailDistAmount							= DistributionUnitCost
	
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  PendingDistributions)

						for each InvoiceDistributionsForContractLineRel
							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PendingDistributions
					and  PurchaseOrderLine entered)

						for each InvoiceDistributionsForPurchaseOrderLineRel
							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  ContractLineDistributionRel exists)

						invoke DoContractLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= DetailDistAmount
							invoked.PrmDistributionUnitCost									= DistributionUnitCost
					else
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PendingDistributions
					and  PurchaseOrderLine not entered
					and  ContractLine not entered)

						for each MiscellaneousInvoiceDistributionsRel
							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (PurchaseOrderLineDistributionRel exists)

						invoke DoPOLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= DetailDistAmount
							invoked.PrmDistributionUnitCost									= DistributionUnitCost
					else
					if  (PayablesInvoice.BypassMatch
					or   PurchaseOrderLine not entered)

						initialize WorkDistributionGroup
						WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
						WorkDistributionGroup.Company					= Company
						WorkDistributionGroup.Invoice					= PayablesInvoice
						WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
						WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
						WorkDistributionGroup.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge
						WorkDistributionGroup.AddOnCharge				= AddOnCharge
						
						if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
						else
							WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
			
						WorkDistributionGroup.Amount					= DetailDistAmount			 
						WorkDistributionGroup.MatchedQuantity			= DetailsMatchedQuantity
						WorkDistributionGroup.AddOnCharge				= DetailsAddOnCharge
						WorkDistributionGroup.Description				= PurchaseOrderLine.Description

						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount




































		CallCalculateTax

			CalculateTax.TaxEntity 													= Company.AccountingEntity
			CalculateTax.CallingModule												= "Payables_Invoice"
			CalculateTax.Invoice 													= PayablesInvoice.Invoice
			CalculateTax.System														= "AP"
			CalculateTax.TransactionCurrency										= PayablesInvoice.InvoiceCurrency
			CalculateTax.BaseCurrency												= Company.Currency
			CalculateTax.Location													= PayablesInvoiceAddOnChargeRel.Location
			if (PayablesInvoiceAddOnChargeRel.EnteredQuantity entered)
				CalculateTax.Quantity												= PayablesInvoiceAddOnChargeRel.EnteredQuantity
			else 
				CalculateTax.Quantity												= 1
			CalculateTax.PostalAddress												= InventoryLocationRel.PostalAddress
			if  (PayablesInvoice.VendorLocationRel exists)
				CalculateTax.FromPostalAddress										= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
			else
				CalculateTax.FromPostalAddress										= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
	
			if  (UsePODate
			and  POTaxDate entered)
				CalculateTax.InvoiceDate											= POTaxDate
				CalculateTax.PaymentDate 											= POTaxDate
				CalculateTax.GeneralLedgerDate 										= POTaxDate
				CalculateTax.TaxDate												= POTaxDate
			else
				CalculateTax.InvoiceDate											= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate 											= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 										= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate												= PayablesInvoice.InvoiceDate
						
			if  (PayablesInvoice.TaxEntityUsesThirdPartyTax)
				CalculateTax.InputReturnVertexTaxIn									= "D"	
		   		CalculateTax.InvoiceCompany							= Company
		   		CalculateTax.ProcessLevel							= PayablesInvoice.ProcessLevel 
				CalculateTax.VendorGrp								= PayablesCompanyRel.VendorGroup
				CalculateTax.Vendor									= Vendor 
				CalculateTax.VendorCustomerName						= PurchaseOrder.Vendor.VendorName 	

			if (TaxEntityRel.ThirdParty.Sabrix)

				UserElementGroup.UserElement[1].Number 				= 1
				UserElementGroup.UserElement[1].Name				= "ATTRIBUTE1"
				UserElementGroup.UserElement[1].Value				= "INVC"

				UserElementGroup.UserElement[2].Number 				= 2
				UserElementGroup.UserElement[2].Name				= "ATTRIBUTE3"
				UserElementGroup.UserElement[2].Value				= PayablesInvoice.FirstPurchaseOrder		

				if  (PayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
					UserElementGroup.UserElement[3].Number 			= 3
					UserElementGroup.UserElement[3].Name			= "ATTRIBUTE4"
					UserElementGroup.UserElement[3].Value			= PayablesInvoice.FirstPurchaseOrder.AribaPOType		

				CalculateTax.SabrixUserElement						= UserElementGroup	
				CalculateTax.CreateOutputUserFieldFile				= false
		
				CalculateTax.ReceiptSite							= PayablesInvoice.ProcessLevel							
				CalculateTax.UniqueIdOfRelatedObject				= PayablesInvoice.UniqueID								
				CalculateTax.UserElementLevel						= blank

				CalculateTax.BypassEditing							= true  
				CalculateTax.Description							= AddOnCharge.Description                                    
				CalculateTax.ItemNumber								= AddOnCharge
				CalculateTax.LineNumber								= PurchaseOrderLine
				CalculateTax.UniqueLineNumber						= PayablesInvoiceAddOnChargeRel.UniqueID

				if (PurchaseOrderLine.ShipToLocation entered)
					if (PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder entered)
						CalculateTax.PostalAddress					= PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
					else 	
						CalculateTax.PostalAddress					= PurchaseOrderLine.ShipToLocation.PostalAddress
				else
				if (PayablesInvoice.Location entered)									
					if (PayablesInvoice.Location.PostalAddressForPurchaseOrder entered)
						CalculateTax.PostalAddress					= PayablesInvoice.Location.PostalAddressForPurchaseOrder
					else 	
						CalculateTax.PostalAddress 					= PayablesInvoice.Location.PostalAddress	
				else
					CalculateTax.PostalAddress						= PayablesInvoice.ProcessLevel.PostalAddress	
						
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PayablesInvoice.PurchaseFromLocation.VendorAddress 	
				else	
					CalculateTax.FromPostalAddress					= Vendor.VendorAddress


			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if  (DetailsLandedAddOnCharge)						
					if (ItemType.Inventoried)
						LocalVertexDistributionAccount 		= PurchaseOrderLine.ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
					else 
					if  (PurchaseOrderLine entered)
						LocalVertexDistributionAccount    		= PayablesInvoiceAddOnChargeRel.first PurchaseOrderLineDistributionRel.DistributionAccount
					else
					if  (ContractLine entered)
						LocalVertexDistributionAccount    		= PayablesInvoiceAddOnChargeRel.first ContractLineDistributionsRel.DistributionAccount
				else 
				if (PayablesInvoiceAddOnChargeRel.POAndLineAOCRel exists)
					LocalVertexDistributionAccount				= PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.Account
				else
				if  (PayablesInvoiceAddOnChargeRel.MiscellaneousAccount entered)
					LocalVertexDistributionAccount    			= PayablesInvoiceAddOnChargeRel.MiscellaneousAccount
				else
					LocalVertexDistributionAccount				= AddOnCharge.PostingAccount

				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress							= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress							= PayablesInvoice.Vendor.VendorAddress





				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit     


				CalculateTax.PostDate                          		= PayablesInvoice.DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if  (AddOnCharge.UNSPSCCode entered)
					CalculateTax.CommodityCodeType      		= "UNSPSC"
					CalculateTax.UNSPSCCode						= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
				else 
				if  (AddOnCharge.HSNSACCode entered)
					CalculateTax.CommodityCodeType      				= "HSN"
					CalculateTax.CommodityCode 						= AddOnCharge.HSNSACCode 

				if (TaxAttributesRel.VertexFlexibleFieldExist
				and !PayablesInvoice.CallVertexByDocument)

					if (PayablesInvoiceAddOnChargeRel.Location entered)
						LocalInventoryLocation = PayablesInvoiceAddOnChargeRel.Location
					else
						LocalInventoryLocation = PurchaseOrderLine.ShipToLocation	




					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
							else    
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceAddOnChargeRel.Location 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
							else    
							if (each.ExternalValue.ValueIs.AddOnCharge)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = AddOnCharge 
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceAddOnChargeRel.EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    






							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceAddOnChargeRel.ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceAddOnChargeRel.TaxUsageCode
							else 



							if (each.ExternalValue.ValueIs.PaymentDate)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate 
							else 









							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3 
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoiceAddOnChargeRel.EnteredUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								if (PayablesInvoice.DerivedTaxPointDate entered)
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
								else 
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  






			if  (OneSourceGeneric
			and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered
			and  PayablesInvoiceAddOnChargeRel.AccruedTaxAmount not entered)			

				if (TaxAttributesRel.OneSourceTaxAttributeRel exists)


					for each TaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each
					
					invoke Create TaxLineItem
						assign result to TaxLineItemView
					
						invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
						invoked.TaxLineItem.UniqueIdOfRelatedObject = PayablesInvoice.UniqueID
						invoked.RelatedObjectReference 				= reference to PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge
						invoked.InvoiceNumber						= PayablesInvoice.Invoice
						invoked.LineItemId							= PurchaseOrderLine	
						invoked.RelatedLineItemUniqueId				= PayablesInvoiceAddOnChargeRel.UniqueID											
						invoked.InvoiceDate							= PayablesInvoice.InvoiceDate
						invoked.TaxEntity							= Company.AccountingEntity
					
						invoked.LineItemNumber						= PurchaseOrderLine	
						invoked.InvoiceAmount						= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
						invoked.TaxableAmount						= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
						if (PayablesInvoiceAddOnChargeRel.TaxCode != "00")
							invoked.ShipToTaxCode					= PayablesInvoiceAddOnChargeRel.TaxCode									
							invoked.ShipToTaxCodeDescription		= PayablesInvoiceAddOnChargeRel.TaxCode.Description									
						invoked.CommodityCode						= PurchaseOrderLine.DerivedCommodityCodeNoDash											
					
						if (PayablesInvoice.Dropship
						and PayablesInvoice.FirstPurchaseOrder entered)
							invoked.ShipToAddress 					= PayablesInvoice.FirstPurchaseOrder.DropshipAddress
						else
						if (PayablesInvoice.FirstPurchaseOrder entered
						and PayablesInvoice.FirstPurchaseOrder.ShipToLocation entered)
							invoked.ShipToAddress					= PayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
						else
						if (PayablesInvoice.Location entered)
							invoked.ShipToAddress 					= PayablesInvoice.Location.PostalAddressForPurchaseOrder
						else
							invoked.ShipToAddress 					= PayablesInvoice.DefaultProcessLevelRel.PostalAddress

					initialize Idx
					invoke Create TaxLineItemUserFields

						for each TaxAttributesRel.OneSourceTaxAttributeRel

							TempAccount	= WorkDistributionGroup.Account
							if (TempAccount not entered)
								if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
									TempAccount	= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
								else
									TempAccount	= Company.ReceiptAccrualAccount
							



							if ((each.LoadDynamicField.System	= "AP"
							or   each.LoadDynamicField.System not entered)
							and Idx < 50)
								invoked.FinanceEnterpriseGroup							= Company.FinanceEnterpriseGroup 
								invoked.TaxLineItem.UniqueIdOfRelatedObject 			= PayablesInvoice.UniqueID
								invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Company.AccountingEntity

								else
								if (each.LoadDynamicField.ValueIs.Company)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Company

								else
								if (each.LoadDynamicField.ValueIs.Vendor)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Vendor

								else
								if (each.LoadDynamicField.ValueIs.PostingDate)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.DistributionDate

								else
								if (each.LoadDynamicField.ValueIs.TaxDate)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedTaxPointDate2

								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.GeneralLedgerChartAccount

								else
								if (each.LoadDynamicField.ValueIs.Location)
									if (!PayablesInvoice.MatchProcessType.Expense
									and  PurchaseOrderLine.ShipToLocation entered)																
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number = Idx
										invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value	= PurchaseOrderLine.ShipToLocation
									else
									if (PayablesInvoice.RemitToCode entered)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number = Idx
										invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.RemitToCode

								else
								if (each.LoadDynamicField.ValueIs.Currency)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.InvoiceCurrency

								else
								if (each.LoadDynamicField.ValueIs.AddOnCharge
								and AddOnCharge entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= AddOnCharge

								else
								if (each.LoadDynamicField.ValueIs.DiscountAmount
								and PayablesInvoice.DiscountAmount.CurrencyAmount entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.DiscountAmount.CurrencyAmount

								else
								if (each.LoadDynamicField.ValueIs.UnitCost
								and MatchUnitCost entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= MatchUnitCost

								else
								if (each.LoadDynamicField.ValueIs.ContractType
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.LoadDynamicField.ValueIs.WorkType
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else
								if (each.LoadDynamicField.ValueIs.AccountSubType
								and TempAccount.GeneralLedgerChartAccount.AccountSubType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.LoadDynamicField.ValueIs.ServiceType
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else
								if (each.LoadDynamicField.ValueIs.UsageType
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else
								if (each.LoadDynamicField.ValueIs.CustomerType
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.LoadDynamicField.ValueIs.Project
								and TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= TempAccount.Project.ProjectInEnterpriseStructureRel.ParentProject
								else
								if (each.LoadDynamicField.ValueIs.CommodityCode
								and PurchaseOrderLine.CommodityCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PurchaseOrderLine.CommodityCode

								else
								if (each.LoadDynamicField.ValueIs.UNSPSC
								and PurchaseOrderLine.UNSPSCCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay

								else
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory		//	"Category" is spelled wrong in 'UserFieldDynamicValue' state field
								and PayablesInvoiceAddOnChargeRel.ProductTaxCategory entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoiceAddOnChargeRel.ProductTaxCategory

								else
								if (each.LoadDynamicField.ValueIs.TaxUsageCode
								and PayablesInvoiceAddOnChargeRel.TaxUsageCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoiceAddOnChargeRel.TaxUsageCode
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
									if (TempAccount.ToAccountingEntity entered)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx 
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.ToAccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1
								and TempAccount.FinanceDimension1 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2
								and TempAccount.FinanceDimension2 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3
								and TempAccount.FinanceDimension3 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4
								and TempAccount.FinanceDimension4 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5
								and TempAccount.FinanceDimension5 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6
								and TempAccount.FinanceDimension6 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7
								and TempAccount.FinanceDimension7 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8
								and TempAccount.FinanceDimension8 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9
								and TempAccount.FinanceDimension9 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10
								and TempAccount.FinanceDimension10 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= TempAccount.FinanceDimension10
								else
								if (each.Value entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= each.Value


			if  ((OneSourceGeneric
			or    PayablesInvoice.CallVertexByDocument)
			and (PayablesInvoiceAddOnChargeRel.TaxAmount entered
			or   PayablesInvoiceAddOnChargeRel.AccruedTaxAmount entered))




				if (PayablesInvoiceAddOnChargeRel.OneCallTaxLineItemRel2 exists
				and PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount not entered)

					CalculateTaxCode                                            = PayablesInvoiceAddOnChargeRel.TaxCode
					if (PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					else
					if (PayablesInvoiceAddOnChargeRel.TaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.TaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					else
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.AccruedTaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					CalculateTax.OutputTotalLandedTaxAmount5DP 					= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate  
					CalculateTax.OutputTotalTaxAmount							= CalculateTax.OutputTotalLandedTaxAmount5DP

					initialize Sub1 
					for each PayablesInvoiceAddOnChargeRel.OneCallTaxLineItemRel2
						for each each.TaxDetailOutRel
							Sub1 += 1

							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode			= each.TaxCode
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxRate			= each.TaxRate
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount		= each.TaxAmount
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP		= each.TaxAmount5DP
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxableAmount	= each.TaxableAmount
							CalculateTax.TaxTable.TaxTableOutput[Sub1].LandCostFlag 	= each.LandCostFlag
							CalculateTax.TaxTable.TaxTableOutput[Sub1].AccrualFlag 		= each.AccrualFlag
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxInputAccount 	= each.TaxInputAccount
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxInputDueAccount = each.TaxInputDueAccount
							CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxPoint 		= each.TaxPoint

				if (PayablesInvoiceAddOnChargeRel.OneCallTaxLineItemRel2 not exists
				or  PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered
				or  CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount not entered)

					if (PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					else
					if (PayablesInvoiceAddOnChargeRel.TaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.TaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					else
						CalculateTax.OutputTaxRate								= PayablesInvoiceAddOnChargeRel.AccruedTaxAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					CalculateTax.OutputTotalLandedTaxAmount5DP 					= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate  
					CalculateTax.OutputTotalTaxAmount							= CalculateTax.OutputTotalLandedTaxAmount5DP
					CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
					CalculateTaxCode                                            = PayablesInvoiceAddOnChargeRel.TaxCode
					if (PayablesInvoiceAddOnChargeRel.TaxCode not entered)
						CalculateTax.TaxTable.TaxTableOutput[1].TaxCode = PayablesInvoiceAddOnChargeRel.Location.PurchaseOrderTaxCode

					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate				= CalculateTax.OutputTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount			= CalculateTax.OutputTotalTaxAmount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP		= CalculateTax.OutputTotalLandedTaxAmount5DP
					CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount		= CalculateTax.TaxableAmount
					if (LocalEntityTaxCodeRel exists)
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= LocalEntityTaxCodeRel.LandedCost
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= LocalEntityTaxCodeRel.TaxPoint
					else
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= TaxEntityRel.LandedCost
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= TaxEntityRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= TaxEntityRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= TaxEntityRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= TaxEntityRel.TaxPoint
					
			else
			if (TaxEntityRel.ThirdParty.TaxEngine)
				CalculateTax.TaxAmount = 0
			else

				LocalCalculateTaxExecuted												= CalculateTax.ExecuteCalculateTax  

		DoTaxRuleBlock

					
			if  (!PayablesInvoice.MatchProcessType.ServiceContract)
				POTaxDate						= first SelectedMatchWorkReceiptForPurchaseOrderRel.PurchaseOrderReceipt.ReceivedDate

			initialize WorkTaxAmount
			initialize DetailsTax3dp

			LocalTaxCode = PayablesInvoiceAddOnChargeRel.TaxCode
			if  (PayablesInvoiceAddOnChargeRel.TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = PayablesInvoiceAddOnChargeRel.TaxCode.TaxTableRel.TaxCode1

			if (TaxEntityRel.ThirdParty.Sabrix
			and LocalTaxCode not entered
			and PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
				LocalTaxCode		= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
				


			if  ((OneSourceGeneric
			or    PayablesInvoice.CallVertexByDocument)
			and  !PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable)
			    NextSentence = true
			else
			if  (ContractLine entered
			and (!TaxEntityRel.ThirdParty.Sabrix
			or   PayablesInvoiceAddOnChargeRel.TaxCode entered)
			and  TaxDistributionsForContractLineRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
						invoke AccrueTax PayablesInvoiceAddOnChargeRel
				else			
				if  (PayablesInvoiceAddOnChargeRel.IsAccruedTax
				and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
					invoke AccrueTax PayablesInvoiceAddOnChargeRel
			else
			if  (PurchaseOrderLine entered
			and (!TaxEntityRel.ThirdParty.Sabrix
			or   PayablesInvoiceAddOnChargeRel.TaxCode entered)
			and  TaxDistributionsForPurchaseOrderLineRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
						invoke AccrueTax PayablesInvoiceAddOnChargeRel
				else			
				if  (PayablesInvoiceAddOnChargeRel.IsAccruedTax
				and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
					invoke AccrueTax PayablesInvoiceAddOnChargeRel
			else
			if  (PurchaseOrderLine not entered
			and  ContractLine not entered
			and  MiscellaneousInvoiceTaxDistributionsRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
						invoke AccrueTax PayablesInvoiceAddOnChargeRel
				else			
				if  (PayablesInvoiceAddOnChargeRel.IsAccruedTax
				and  PayablesInvoiceAddOnChargeRel.TaxAmount not entered)
					invoke AccrueTax PayablesInvoiceAddOnChargeRel
			else
			if  (MemoInvoice)

	      
				initialize CalculateTax
	
				if  (PayablesInvoiceAddOnChargeRel.TaxCode not entered)
					WorkTaxAmount												= PayablesInvoiceAddOnChargeRel.TaxAmount
					CalculateTax.TaxCode										= PayablesInvoiceAddOnChargeRel.TaxCode
					CalculateTax.ProductTaxCategory								= PayablesInvoiceAddOnChargeRel.ProductTaxCategory
					CalculateTax.InvoiceAmount									= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
					CalculateTax.TaxableAmount									= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
	

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					include CallCalculateTax
	
					if  (PerformedFrom.Contract)
						WorkTaxAmount											+= CalculateTax.OutputTotalTaxAmount
						include 991CreateTaxDistrib
					else
					if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function 									= CalculateTax.Function.Inquire
						include CallCalculateTax
						  
						if  (!RecordSource.GeneratedByAocSpread
						and  !RecordSource.CreatedByAocSpreadFromPo)
							Sub1 = 1
							while (Sub1 <= 8)
								if  (CalculateTax.TaxTable.TaxTableOutput[Sub1].AccrualCode = "I")
									TotalTax3dp									+= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP
									DetailsTax3dp								+= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP 
	            				Sub1 += 1
			else

			




				if (ThisReceiptLineAOCRel exists)
					WorkMatchedNotReceivedQuantity 								= MatchedQuantity - ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.ReceivedQuantity

				if (ThisReceiptLineAOCRel exists
				and PurchaseOrderLine.IsCatchWeightItem)
					WorkMatchedNotReceivedQuantity 								= TempMatchedQuantity - ThisReceiptLineAOCRel.PurchaseOrderReceiptLineAOCRel.ReceivedQuantity


				LocalCreateTaxDistribs = false 
				if  (!ItemType.Inventoried
				and  !TaxDistributionsForPurchaseOrderLineRel exist)
					LocalCreateTaxDistribs = true 


				if  (ItemType.Inventoried
				or   LocalCreateTaxDistribs
				or   !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					if  (PerformedFrom.Contract)
						NonTaxEnteredUnitCost								= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost
						NonTaxApprovedUnitCost								= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost
						if  (PayablesInvoiceAddOnChargeRel.TaxCode entered
						and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable
						and  PayablesInvoice.TaxCode.TaxType.CalculatedRate)
							include 2123GetCalcTaxRate
					else
						include 2122aGetLndtaxUcst


					if  (!ItemType.Inventoried
					or  (!PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly))

						WorkTaxUnitCost										= NonTaxEnteredUnitCost
						TemporaryTaxType									= CalculateTax.TaxCode.TaxType 
	
						if  (ItemType.Inventoried
						and  !PurchaseOrderAndLineAddOnChargeRel exists)
							WorkPostingSwitch								= 2
						else
							WorkPostingSwitch								= 1
			        
						if (PurchaseOrderLine.IsCatchWeightItem)
							if  (WorkTaxUnitCost entered
							and  TempMatchedQuantity       >  WorkMatchedNotReceivedQuantity)
								initialize CalculateTax
								CalculateTax.InvoiceAmount						= ((DetailsMatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)
								if (CalculateTax.TaxableAmount not entered)
									CalculateTax.TaxableAmount					= CalculateTax.InvoiceAmount
								TotalGoods										+= CalculateTax.InvoiceAmount

								include 2125BuildTaxDetails
						else 
						if  (WorkTaxUnitCost entered
						and  MatchedQuantity       >  WorkMatchedNotReceivedQuantity)
							initialize CalculateTax
							CalculateTax.InvoiceAmount						= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)
							if (CalculateTax.TaxableAmount not entered)
								CalculateTax.TaxableAmount					= CalculateTax.InvoiceAmount
							TotalGoods										+= CalculateTax.InvoiceAmount

							include 2125BuildTaxDetails
							
						if  (!PerformedFrom.Contract
						and  !TaxEntityRel.ThirdParty.VertexOSeries 
						and  !TaxEntityRel.ThirdParty.TaxEngine)
							include 2124CreateVariance
					

				if (!TaxEntityRel.ThirdParty.Sabrix)
					invoke FastUpdate PayablesInvoiceAddOnChargeRel
						invoked.TaxAmount					= WorkTaxAmount
						invoked.InvoicedTaxAmount			= DetailsTax3dp
						invoked.AccruedTaxAmount			= WorkTaxAmount - DetailsTax3dp

		1500CreditForRebill  
			

            OriginalInvoice	= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice

			LocalTaxCode = PayablesInvoiceAddOnChargeRel.TaxCode
			
			LocalOriginalInvoiceAddOnCharge = first LocalOriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge


						
			if  (ContractLine entered)
				if (!InvoiceDistributionsForContractLineRel exist)
				
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.AddOnCharge entered
						and each.TaxCode not entered)
							include 1500CreditForRebillDistribution

				if  (LocalTaxCode entered
				and  !TaxDistributionsForContractLineRel exists)
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.AddOnCharge entered
						and each.TaxCode entered)
							include 1500CreditForRebillDistribution

			else
				if (!InvoiceDistributionsForPurchaseOrderLineRel exist)

					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.AddOnCharge entered
						and each.TaxCode not entered)
							include 1500CreditForRebillDistribution

				if  (LocalTaxCode entered
				and  !TaxDistributionsForPurchaseOrderLineRel exists)

			
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.AddOnCharge entered
						and each.TaxCode entered)
							include 1500CreditForRebillDistribution


	
			LocalMiscAOC 				= PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount - PayablesInvoiceAddOnChargeRel.MatchUnitCost 


			if  (PayablesInvoiceAddOnChargeRel.POAndLineAOCRel exists
			and  !PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.AddOnChargeOrigin.Matching)


				if (PayablesInvoiceAddOnChargeRel.PurchaseOrderLine not entered)
					invoke UpdateFromMatch PayablesInvoiceAddOnChargeRel.POAndLineAOCRel
						invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
						if (PayablesInvoiceAddOnChargeRel.MatchUnitCost > invoked.MiscellaneousAddOnChargeInvoicedAmount)
							initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
						else
							invoked.MiscellaneousAddOnChargeInvoicedAmount	+= PayablesInvoiceAddOnChargeRel.MatchUnitCost 

				else
					if  (PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM entered
					and  PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM != PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.PurchaseOrderLine.PurchaseOrderLine.EnteredBuyUOM)
		
						initialize UOMCalculation

						UOMCalculation.InputQuantity				= PayablesInvoiceAddOnChargeRel.MatchedQuantity
						UOMCalculation.InputUOMConversion			= PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOMMultiplier
						UOMCalculation.InputToUOMConversion			= PayablesInvoiceAddOnChargeRel.POAndLineAOCRel.PurchaseOrderLine.EnteredBuyUOMMultiplier
						UOMCalculation.Method					    = UOMCalculation.Method.ConvertToAlternate
	
						invoke UpdateFromMatch PayablesInvoiceAddOnChargeRel.POAndLineAOCRel
							invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
							invoked.MatchedQuantity					+= UOMCalculation.OutputQuantity * -1
							invoked.ReceivedQuantityToMatch			= PayablesInvoiceAddOnChargeRel.PurchaseOrderLine.ReceivedQuantity

					else
						invoke UpdateFromMatch PayablesInvoiceAddOnChargeRel.POAndLineAOCRel
							invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
							invoked.MatchedQuantity					+= PayablesInvoiceAddOnChargeRel.MatchedQuantity
							invoked.ReceivedQuantityToMatch			= PayablesInvoiceAddOnChargeRel.PurchaseOrderLine.ReceivedQuantity





			if (PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice.ReceiptLinkMatchIDRel exists)  

				if  (MatchWork.MatchLevel.DetailMatch
				and  PayablesInvoiceAddOnChargeRel.ItemType.Inventoried
				and  PayablesInvoice.MatchProcessType.AOCOnly)


					for each PayablesInvoiceAddOnChargeRel.PurchaseOrderReceiptLineSet4Rel





						WorkCost = each.first InventoryTransactionLineRel.InventoryCostHistoryForReceivingAdjustmentRel.last CostAdjustmentInventoryTransactionLineRel.UnitCost * -1
						WorkQuantity = each.first InventoryTransactionLineRel.InventoryCostHistoryForReceivingAdjustmentRel.last CostAdjustmentInventoryTransactionLineRel.Quantity


						if  (WorkCost entered
						or   WorkQuantity entered)
							invoke UpdateForCostAdjustment each.ItemLocationRel
								invoked.PrmCostDifference			= WorkCost
								invoked.PrmQuantity					= WorkQuantity

								invoked.PrmDocumentNumber			= each.first InventoryTransactionLineRel.InventoryTransaction
								invoked.PrmLineNumber				= each.PurchaseOrderReceiptLine
								invoked.PrmAddOnChargeDifference	= true
								if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
									invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
								else
									invoked.PrmOffsetAccount			= Company.CostVarianceAccount
																								
				for each PayablesInvoiceAddOnChargeRel.PurchaseOrderReceiptInvoiceLinkSet4Rel		



					if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine not entered)	
						NewMiscellaneousAddOnChargeInvoicedAmount	= each.PurchaseOrderReceiptLineAOCRel.TotalAddOnChargeAmount - LocalMiscAOC
		
						invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel
							if (NewMiscellaneousAddOnChargeInvoicedAmount < 0)
								invoked.MiscellaneousAddOnChargeInvoicedAmount	= PurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount
							else
								invoked.MiscellaneousAddOnChargeInvoicedAmount	= NewMiscellaneousAddOnChargeInvoicedAmount
								
							initialize invoked.MatchedQuantity
							initialize invoked.ReceivedQuantityToMatch

							initialize invoked.MatchObjectID
							initialize invoked.MatchSequence
							invoked.Status					= 1
							invoked.Closed					= "N"
					else
						LocalVendorPriceMatchedQuantity			= each.MatchedQuantity
						if  (each.PurchaseOrderLine.VendorPriceUOMMultiplier entered
						and  each.PurchaseOrderLine.EnteredBuyUOMMultiplier entered
						and  each.PurchaseOrderLine.VendorPriceUOMMultiplier != each.PurchaseOrderLine.EnteredBuyUOMMultiplier)
							LocalVendorPriceMatchedQuantity	= (each.MatchedQuantity * (each.PurchaseOrderLine.EnteredBuyUOMMultiplier / each.PurchaseOrderLine.VendorPriceUOMMultiplier))								
		
						invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel		
							initialize invoked.MatchObjectID
							initialize invoked.MatchSequence
							invoked.MatchedQuantity 			-= each.MatchedQuantity
							invoked.ReceivedQuantityToMatch 	+= each.MatchedQuantity
							invoked.ReceivedAmountToMatch 		+= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * LocalVendorPriceMatchedQuantity
							invoked.OpenToMatchQuantity			= each.PurchaseOrderReceiptLineAOCRel.ReceivedQuantityToMatch + each.MatchedQuantity
							invoked.Status						= 1
							invoked.Closed						= "N"				
		
					if (PayablesInvoice.MatchProcessType.AOCOnly
					and !each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt.Status.Released)
						invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
							invoked.Status = 1
			else
				for each PayablesInvoiceAddOnChargeRel.ReceiptLineAOCByMatchObjectIdRel		


					if (each.PurchaseOrderReceiptLine not entered)	
						NewMiscellaneousAddOnChargeInvoicedAmount	= each.TotalAddOnChargeAmount - LocalMiscAOC
		
						invoke UpdateFromMatch each
							if (NewMiscellaneousAddOnChargeInvoicedAmount < 0)
								invoked.MiscellaneousAddOnChargeInvoicedAmount	= PurchaseOrderAndLineAddOnChargeRel.TotalAddOnChargeAmount
							else
								invoked.MiscellaneousAddOnChargeInvoicedAmount	= NewMiscellaneousAddOnChargeInvoicedAmount
								
							initialize invoked.MatchedQuantity
							initialize invoked.ReceivedQuantityToMatch
					else
						LocalVendorPriceMatchedQuantity			= each.MatchedQuantity
		
						invoke UpdateFromMatch each		
							initialize invoked.MatchObjectID
							initialize invoked.MatchSequence
							invoked.MatchedQuantity 			-= each.MatchedQuantity
							invoked.ReceivedQuantityToMatch 	+= each.MatchedQuantity
							invoked.ReceivedAmountToMatch 		+= each.OriginalUnitCost * LocalVendorPriceMatchedQuantity
							invoked.OpenToMatchQuantity			= each.ReceivedQuantityToMatch + each.MatchedQuantity
							invoked.Status						= 1
							invoked.Closed						= "N"				
		
					if (PayablesInvoice.MatchProcessType.AOCOnly
					and !each.PurchaseOrderReceipt.Status.Released)
						invoke UpdateFromMatch each.PurchaseOrderReceipt
							invoked.Status = 1

			invoke FastUpdate PayablesInvoiceAddOnChargeRel
				invoked.Status									= 1
				invoked.MatchObjectID							= MatchWork.OutMatchObjectID
				invoked.MatchSequence							= MatchSequence
				invoked.DistributionDate						= PayablesInvoice.DistributionDate
	
		1500CreditForRebillDistribution

			invoke CreateFromMatch each
				assign result to NewDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.Status								= 1
				invoked.UnitAmount							= each.UnitAmount * -1
				invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
				invoked.DistributionAmount.KeepRateOnly		= true
				invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
				invoked.GLFinanceCodeBlock					= each.DistributionAccount
				invoked.DistributionAccount					= each.DistributionAccount

				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= MatchWorkInvoiceAddOnCharge
				invoked.AddOnCharge							= AddOnCharge
				invoked.CommentText							= each.CommentText
				invoked.TransientAsset						= each.AssetDetailRel.Asset 
				invoked.TransientAssetTemplate				= each.AssetDetailRel.AssetTemplate
				invoked.Retainage							= each.Retainage
				invoked.AccrualCode 						= each.AccrualCode 

				invoked.BypassUpdatingInvoiceTotals			= true
				invoked.Status								= 1
				invoked.MatchCreated						= "D"
				invoked.TransientOriginalPayablesInvoiceTaxableAmount 	= MatchWorkInvoiceRel.TaxableAmount
				invoked.TransientOriginalPayablesInvoiceTaxAmount		= MatchWorkInvoiceRel.TaxAmount
				invoked.TransientBypassErrorUpdate				= true

				if (LocalTaxCode entered)
					invoked.ProductTaxCategory 				= each.ProductTaxCategory
					invoked.TaxRate							= each.TaxRate
					invoked.TaxableAmount					= each.TaxableAmount * -1
					invoked.TaxCode							= each.TaxCode
					invoked.TransientTaxingJurisdiction		= each.PayablesTaxDetailRel.TaxingJurisdiction  
					invoked.Imposition						= each.Imposition
					
			if  (PayablesInvoice.RetainageAccrualCode entered)
				for each each.PayablesInvoiceRetainageDistributionRel
					invoke Create PayablesInvoiceRetainageDistribution
						fill in fields from each
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = PayablesInvoice
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = NewDistribution.PayablesInvoiceDistribution
						invoked.PaymentAmount										= each.PaymentAmount * -1
						invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1
	

	Actions
		Create is a Create Action
			restricted
			Entrance Rules
				if (PurchaseOrder not entered)
					PurchaseOrder = MatchWork.PurchaseOrder
			Action Rules











		Update is an Update Action
			restricted
		FastUpdate is an Update Action
			restricted
		Delete is a Delete Action
			restricted
			bypass relational integrity rules
		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		MatchAddOnChargesSet is a Set Action
			restricted
			Parameters
				PrmCompany						is a MatchCompany
				PrmMatchWork					is a MatchWork
				PrmPayablesInvoice				is a PayablesInvoice
				Difference3Amount				is an InternationalCost
				InvoiceDetailKeyed				is Boolean						
				WithPreviousDetailMatch			is Boolean
				MatchSub1						is Numeric 3					
				MatchSequence
				PrmAutoMatchResult 				is an AutoMatchResult
			Set Is  
				PrmCompany
				PrmPayablesInvoice

			Instance Selection
				where (Company 			= PrmCompany
				and    MatchWork		= PrmMatchWork
				and    PayablesInvoice	= PrmPayablesInvoice)

			Action Rules
				Empty Set Rules

					if  (PrmMatchWork.MatchLevel.InvoiceMatch
					and (PrmMatchWork.MatchRuleResult.AllToOne
					or   PrmMatchWork.MatchRuleResult.AllToAll))
						if  (PrmPayablesInvoice = last PrmMatchWork.MatchWorkInvoiceRel.PayablesInvoice)
							invoke AfterDetailSetAction PrmMatchWork
								invoked.PrmAutoMatchResult	= PrmAutoMatchResult
					else
						invoke AfterDetailSetAction PrmMatchWork
							invoked.PrmAutoMatchResult	= PrmAutoMatchResult
				Set Rules
					Exit Rules


						if  (PrmMatchWork.MatchLevel.InvoiceMatch
						and (PrmMatchWork.MatchRuleResult.AllToOne
						or   PrmMatchWork.MatchRuleResult.AllToAll))
							if  (PrmPayablesInvoice = last PrmMatchWork.MatchWorkInvoiceRel.PayablesInvoice)
								invoke AfterDetailSetAction PrmMatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult
						else
							invoke AfterDetailSetAction PrmMatchWork
								invoked.PrmAutoMatchResult	= PrmAutoMatchResult

				Instance Rules
					if  (PayablesInvoice.AsyncErrorRel exists)
						invoke Purge PayablesInvoice.AsyncErrorRel

					if  (PayablesInvoiceAddOnChargeRel.MatchObjectID entered
					and  PayablesInvoiceAddOnChargeRel.MatchObjectID = MatchWork.OutMatchObjectID)
						NextSentence = true
					else
						MatchSequence += 1
						invoke 704DoMaaocdtl
							invoked.Difference3Amount			= Difference3Amount
							invoked.InvoiceDetailKeyed			= InvoiceDetailKeyed
							invoked.WithPreviousDetailMatch		= WithPreviousDetailMatch				
							invoked.MatchSub1					= MatchSub1
							invoked.MatchSequence				= MatchSequence
							invoked.PrmAutoMatchResult			= PrmAutoMatchResult

		704DoMaaocdtl is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				Difference3Amount						is an InternationalCost
				InvoiceDetailKeyed						is Boolean						
				WithPreviousDetailMatch					is Boolean
				MatchSub1								is Numeric 3					
				MatchSequence
				PrmAutoMatchResult						is an AutoMatchResult
			Action Rules
			
				LocalAutoMatchResult					= PrmAutoMatchResult





				if (PayablesInvoiceAddOnChargeRel.LandedAddOnCharge
				or  PurchaseOrderAndLineAddOnChargeRel.LandedAddOnCharge)
					initialize LocalPOAddOnCharge
				else
					LocalPOAddOnCharge							= AddOnCharge
	
				if  (MatchWork.MatchLevel.InvoiceMatch
				and  InternalDetailsExist
				and  !RecordSource.InternalMatchDetails)
					NextSentence = true
				else	
				if  (CreditForRebill)
					include 1500CreditForRebill
				else	

					include 733TolAccount
					
					ThisPurchaseOrder							= PurchaseOrder
					ThisPurchaseOrderLine						= PurchaseOrderLine
					ThisAddOnCharge								= AddOnCharge
					LocalMatchWorkInvoiceAddOnCharge			= MatchWorkInvoiceAddOnCharge
					
					initialize ExcessQuantity
					InvoiceMatchedNotReceived					= true
		
					DetailsAddOnCharge							= AddOnCharge
					DetailsLandedAddOnCharge					= PayablesInvoiceAddOnChargeRel.LandedAddOnCharge
					DetailsEnteredUnitCost						= PayablesInvoiceAddOnChargeRel.DerivedEnteredUnitCost
					DetailsEnteredQuantity						= PayablesInvoiceAddOnChargeRel.EnteredQuantity
					DetailsMatchedQuantity						= MatchedQuantity 
					DetailsInvoiceType							= PayablesInvoice.InvoiceType			
					DetailsSequenceNumber						= ExactInvoiceDetailRel.PayablesInvoiceDetail
		            LocalLocation 								= first PayablesInvoiceDetailRel.Location
                	if (LocalLocation not entered)
                	    LocalLocation = PurchaseOrderLine.ShipToLocation
		





					initialize TotalMatchedQuantity
					initialize RetainedTotalAmount
					initialize Work1ReceivedQuantityToMatch
					initialize ReceiptLineReceivedQuantity
					initialize TempMatchedQuantity
		
					PendingDistributions									= false
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  InvoiceDistributionsForContractLineRel exists)
						PendingDistributions								= true
					else
					if (PurchaseOrderLine entered
					and InvoiceDistributionsForPurchaseOrderLineRel exists)
						PendingDistributions								= true
					else
					if (PurchaseOrderLine not entered
					and ContractLine not entered
					and MiscellaneousInvoiceDistributionsRel exists)
						PendingDistributions								= true


					WorkReceiptConversionRate			= PurchaseOrder.ReceiptCurrencyConversionRate
					if  (WorkReceiptConversionRate not entered)
						WorkReceiptConversionRate		= PurchaseOrder.EnteredCurrencyConversionRate
					if  (WorkReceiptConversionRate not entered)
						WorkReceiptConversionRate		= 1

					if (InvoiceCurrencyExchangeRate not entered)
						InvoiceCurrencyExchangeRate = InvoiceCurrencyExchangeRate
					else
						InvoiceCurrencyExchangeRate = 1
		
					SkipPostings								= false
					initialize DistributionDetailMatchAmount
		
					if  (PayablesInvoiceAddOnChargeRel.LandedAddOnCharge)
						if  ((MatchWork.MatchLevel.DetailMatch
						or    MatchWork.ProcessMode.Reconciliation)
						and   !ItemType.Inventoried
						and   PurchaseOrderLine entered)
							if  (MatchWorkInvoiceDetailRel exists
							and  MatchWorkInvoiceDetailRel.LineDistributionHasAmount)
								DistributionDetailMatchAmount			= MatchWorkInvoiceDetailRel.MatchAmount
								SkipPostings							= true
							else
								DistributionDetailMatchAmount			= (sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount.CurrencyAmount + sum InvoiceDistributionsForContractLineRel.DistributionAmount.CurrencyAmount)
								if  (DistributionDetailMatchAmount entered)
									SkipPostings							= true
	
					initialize ThisReceipt
					initialize ThisReceiptLine






					if (PurchaseOrderLine entered
					and PayablesInvoiceAddOnChargeRel.PurchaseOrderReceipt entered 
					and ExactInvoiceDetailRel.PurchaseOrderReceiptLine entered)

						ThisReceipt 					= ExactInvoiceDetailRel.PurchaseOrderReceipt	
						ThisReceiptLine 				= ExactInvoiceDetailRel.PurchaseOrderReceiptLine

						include 844aFindMatrecwrkRecord

						if  (ThisReceiptLineRel exists)
							include 704aDoAocProduct
					else
					if (PurchaseOrderLine entered
					and PayablesInvoiceAddOnChargeRel.PurchaseOrderReceipt entered 
					and first PayablesInvoiceDetailRel.PurchaseOrderReceiptLine entered)

						ThisReceipt 					= first PayablesInvoiceDetailRel.PurchaseOrderReceipt	
						ThisReceiptLine 				= first PayablesInvoiceDetailRel.PurchaseOrderReceiptLine	
						include 844aFindMatrecwrkRecord

						if  (ThisReceiptLineRel exists)
							include 704aDoAocProduct
					else
					if (MatchWorkPOLineAOCRel exists)

						for each MatchWorkPOLineAOCRel
							ThisReceipt						= each.PurchaseOrderReceipt
							ThisReceiptLine					= each.PurchaseOrderReceiptLine


							if (PurchaseOrderLine not entered 
							and MatchReconQueue.ChargebackIncludeAOC)

								invoke FastUpdate each 
									invoked.Selected = true

							include 844aFindMatrecwrkRecord
							if  (ThisReceiptLineRel exists
							or  (PurchaseOrderLine not entered
							and  ThisReceiptLineAOCRel exists))
								include 704aDoAocProduct


							if  ((MatchWork.ProcessMode.Reconciliation
							and   TotalMatchedQuantity < DetailsMatchedQuantity
							and  !ItemType.Service)
							or   (MatchWork.MatchRuleType.OneToAll
							and   TotalMatchedQuantity < DetailsMatchedQuantity
							and  !ItemType.Service))
								NextSentence = true
							else

								end for each
					else
						include 899BuildVpriCnv	
						if  (MatchWork.MatchLevel.InvoiceMatch
						and  MatchWork.ProcessMode.Reconciliation
						and  !OverrideDetail
						and  !MatchWorkInvoiceDetailRel.ItemType.Service)
							TotalMatchedQuantity				= DetailsMatchedQuantity

		            LocalLocation = first PayablesInvoiceDetailRel.Location
        		    if (ThisReceiptLineRel.ShipToLocation entered)
                		LocalLocation = ThisReceiptLineRel.ShipToLocation
                	if (LocalLocation not entered)
                	    LocalLocation = PurchaseOrderLine.ShipToLocation

					if  (PayablesInvoiceAddOnChargeRel.CostAdjustment)
						NextSentence = true
					else		
					if  (TotalMatchedQuantity not entered)

						include 704aDoAocProduct
							
					if  (SkipPostings)
						include 719aPostFullInvoiceLine
		
					if  (MatchWork.MatchLevel.DetailMatch
					and  ItemType.Inventoried
					and  PayablesInvoiceAddOnChargeRel.TaxCode entered
					and  PayablesInvoiceAddOnChargeRel.InvoiceLineTaxable)
						include 787WriteNegAccApdistrib
		





		
					if  (!OverrideDetail
					or   RecordSource.CreatedWithinMatch
					or   !PayablesInvoice.InvoiceType.CreditMemo)
						if  (!RecordSource.InternalMatchDetails)

							invoke FastUpdate PayablesInvoiceAddOnChargeRel
								invoked.Status									= 1
								invoked.MatchObjectID							= MatchWork.OutMatchObjectID
								invoked.MatchSequence							= MatchSequence
								invoked.DistributionDate						= PayablesInvoice.DistributionDate
				
								if  (InvoiceMatchedNotReceived)
									initialize invoked.PurchaseOrderReceipt
									invoked.PurchaseOrderReceiptLine			= ThisReceiptLine
									if  (!PurchaseOrderAndLineAddOnChargeRel exists)
										initialize invoked.PurchaseOrderReceiptLine
									else
										invoked.PurchaseOrderReceiptLine		= ThisReceiptLine
								else
									invoked.PurchaseOrderReceipt				= ThisReceipt
									invoked.PurchaseOrderReceiptLine			= ThisReceiptLine
								
		SelectRecordForRecon is an Instance Action
			valid when (!Selected)
			default label is "Select"
			Action Rules
				Selected = true

			Exit Rules
				if (Selected
				and !MatchWorkInvoiceRel.Selected)
					invoke FastUpdate MatchWorkInvoiceRel
						invoked.Selected = true

		UnselectRecordForRecon is an Instance Action
			valid when (Selected)
			default label is "Unselect"
			Action Rules
				Selected = false
				initialize MatchReconQueueSet
				
		SetChargeback is an Instance Action
			valid when (!FinanceResource.RestrictChargebacks) 
			Parameters
				PrmChargeback			is Boolean
				PrmChargebackReason		is a ProcurementReasonCode
			Parameter Rules
				PrmChargeback
					initial value is CreateChargeback
				PrmChargebackReason
					initial value is ChargebackReason
					if (PrmChargeback)
						required
			Action Rules
				CreateChargeback = PrmChargeback
				ChargebackReason = PrmChargebackReason
				if (PrmChargeback = false)
					initialize ChargebackReason
				else
					Selected = true
					invoke FastUpdate MatchWorkPOLineAOCRel
						invoked.Selected = true


		DoInvoiceDistributionsForPurchaseOrderLine is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				PrmImposition					is a VertexImpositionType
			Action Rules
				SaveUnmatchedQuantity									= MatchedQuantity


				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 			= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company							= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice						= PrmInvoice
				else
					WorkDistributionGroup.Invoice						= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder						= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine					= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail				= MatchWorkInvoiceAddOnCharge
				WorkDistributionGroup.AddOnCharge						= AddOnCharge
				WorkDistributionGroup.MatchedQuantity					= MatchedQuantity
				WorkDistributionGroup.TaxCode							= PrmTaxCode
				WorkDistributionGroup.TaxType							= PrmTaxType
				WorkDistributionGroup.TaxRate							= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory				= PrmProductTaxCategory
				WorkDistributionGroup.Imposition						= PrmImposition

				initialize WorkDistributionGroup.LandedCost
				RemainingDistAmount										= PrmDistributionAmount

				for each InvoiceDistributionsForPurchaseOrderLineRel
					WorkPercent											= (each.DistributionAmount.CurrencyAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount)
		
					WorkDistributionGroup.Amount						= PrmDistributionAmount * WorkPercent
					WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount * WorkPercent 
					
					if  (WorkDistributionGroup.Amount entered)
						WorkDistributionGroup.UnitAmount				= MatchedQuantity * WorkPercent 
		
						if  (WorkPercent = 100%)
							WorkDistributionGroup.ItemQuantity			= PurchaseOrderLine.Quantity
						else
							WorkDistributionGroup.ItemQuantity			= MatchedQuantity * WorkPercent 
							
						RemainingDistAmount  							-= WorkDistributionGroup.Amount
		
						WorkDistributionGroup.Account					= each.DistributionAccount
						WorkDistributionGroup.Asset						= each.AssetDetailRel.Asset
						WorkDistributionGroup.AssetTemplate				= each.AssetDetailRel.AssetTemplate


						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
					
						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount


					if  (RemainingDistAmount <= 0)
						end for each

				if  (RemainingDistAmount entered)

					if (WorkDistributionGroup.TaxCode entered)
						WorkDistributionGroup.TaxableAmount = RemainingDistAmount
					else
						initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemQuantity
					WorkDistributionGroup.Amount	= RemainingDistAmount
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount


		DoInvoiceDistributionsForContractLine is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				PrmImposition					is a VertexImpositionType
			Action Rules

				SaveUnmatchedQuantity									= MatchedQuantity


				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 			= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company							= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice						= PrmInvoice
				else
					WorkDistributionGroup.Invoice						= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder						= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine					= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail				= MatchWorkInvoiceAddOnCharge
				WorkDistributionGroup.AddOnCharge						= AddOnCharge
				WorkDistributionGroup.MatchedQuantity					= MatchedQuantity
				WorkDistributionGroup.TaxCode							= PrmTaxCode
				WorkDistributionGroup.TaxType							= PrmTaxType
				WorkDistributionGroup.TaxRate							= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory				= PrmProductTaxCategory
				WorkDistributionGroup.Imposition						= PrmImposition

				initialize WorkDistributionGroup.LandedCost
				RemainingDistAmount										= PrmDistributionAmount

				for each InvoiceDistributionsForContractLineRel
					WorkPercent											= (each.DistributionAmount.CurrencyAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount)
		
					WorkDistributionGroup.Amount						= PrmDistributionAmount * WorkPercent
					WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount * WorkPercent 
					
					if  (WorkDistributionGroup.Amount entered)
						WorkDistributionGroup.UnitAmount				= MatchedQuantity * WorkPercent 
		
						if  (WorkPercent = 100%)
							WorkDistributionGroup.ItemQuantity			= PurchaseOrderLine.Quantity
						else
							WorkDistributionGroup.ItemQuantity			= MatchedQuantity * WorkPercent 
							
						RemainingDistAmount  							-= WorkDistributionGroup.Amount
		
						WorkDistributionGroup.Account					= each.DistributionAccount
						WorkDistributionGroup.Asset						= each.AssetDetailRel.Asset
						WorkDistributionGroup.AssetTemplate				= each.AssetDetailRel.AssetTemplate
		
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
					
						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount



						
					if  (RemainingDistAmount <= 0)
						end for each

				if  (RemainingDistAmount entered)

					initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemQuantity
					WorkDistributionGroup.Amount	= RemainingDistAmount
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount



		DoPOLineDistributions is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				PrmImposition					is a VertexImpositionType
			Action Rules


				SaveUnmatchedQuantity													= MatchedQuantity

				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company					= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice				= PrmInvoice
				else
					WorkDistributionGroup.Invoice				= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge
				WorkDistributionGroup.AddOnCharge				= AddOnCharge
				WorkDistributionGroup.MatchedQuantity			= MatchedQuantity
				WorkDistributionGroup.TaxCode					= PrmTaxCode
				WorkDistributionGroup.TaxType					= PrmTaxType
				WorkDistributionGroup.TaxRate					= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory		= PrmProductTaxCategory
				WorkDistributionGroup.Imposition				= PrmImposition

				if  (first PurchaseOrderLineDistributionRel.DistributionPercent entered
				or  first PurchaseOrderLineDistributionRel.DistributionQuantity entered)
					for each PurchaseOrderLineDistributionRel
			

						WorkDistributionGroup.Account				= each.DistributionAccount
						WorkDistributionGroup.Asset						= each.AssetInformation.Asset
						WorkDistributionGroup.AssetTemplate				= each.AssetInformation.AssetTemplate
        				WorkDistributionGroup.OriginalDistribution		= each.PurchaseOrderLineDistribution
		
						initialize WorkDistributionGroup.ItemQuantity
		
						if  (each.DistributionPercent entered)
							WorkDistributionGroup.Amount		= (PrmDistributionAmount * each.DistributionPercent)
							WorkDistributionGroup.TaxableAmount					= (PrmTaxableAmount *  each.DistributionPercent)
							WorkDistributionGroup.ItemQuantity					= SaveUnmatchedQuantity * (each.DistributionPercent)
						else
							WorkDistQuantity													= each.DistributionQuantity
							if  (FirstDistQuantity entered)

								WorkDistQuantity												= FirstDistQuantity
								initialize FirstDistQuantity
								
							if  (WorkDistQuantity > SaveUnmatchedQuantity)

								WorkDistQuantity												= SaveUnmatchedQuantity
			
							SaveUnmatchedQuantity												-= WorkDistQuantity
			
							if  (WorkDistributionGroup.LandedCost
							and  WorkDistributionGroup.AssetTemplate entered)
								WorkDistributionGroup.ItemQuantity				= each.DistributionQuantity
			
							WorkDistributionGroup.Amount		= ((WorkDistQuantity / each.PurchaseOrderLine.Quantity) * PrmDistributionAmount)
							WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount
							
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount


				else
					initialize WorkDistributionGroup.LandedCost
					RemainingDistAmount												= PrmDistributionAmount

					for each PurchaseOrderLineDistributionRel
						
						WorkPercent													= each.DistributionAmount/PurchaseOrderLine.ExtendedAmount
			
						WorkDistributionGroup.Amount								= PrmDistributionAmount * WorkPercent
						WorkDistributionGroup.TaxableAmount							= PrmTaxableAmount * WorkPercent
						WorkDistributionGroup.OriginalDistribution					= each.PurchaseOrderLineDistribution
						

							
						if  (WorkDistributionGroup.Amount entered)
							WorkDistributionGroup.UnitAmount						= MatchedQuantity * WorkPercent 
			
							if  (WorkPercent = 100%)
								WorkDistributionGroup.ItemQuantity					= PurchaseOrderLine.Quantity
							else
								WorkDistributionGroup.ItemQuantity					= MatchedQuantity * WorkPercent
								
							RemainingDistAmount  									-= WorkDistributionGroup.Amount
			
							WorkDistributionGroup.Account							= each.DistributionAccount
							WorkDistributionGroup.Asset								= each.AssetInformation.Asset
							WorkDistributionGroup.AssetTemplate						= each.AssetInformation.AssetTemplate
			
							invoke CreateDistribution MatchWork
								invoked.PrmWorkDistributionGroup					= WorkDistributionGroup
						
							if (DetailsInvoiceType = "C"
							and  !MemoInvoice)
								increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

							else

								increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount





							
						if  (RemainingDistAmount <= 0)
							end for each

					if  (RemainingDistAmount entered)

						initialize WorkDistributionGroup.TaxableAmount
						initialize WorkDistributionGroup.UnitAmount
						initialize WorkDistributionGroup.ItemQuantity
						WorkDistributionGroup.Amount	= RemainingDistAmount
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalAddOnChargeDistributionAmount by WorkDistributionGroup.Amount


		DoContractLineDistributions is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				PrmImposition					is a VertexImpositionType
			Action Rules


				SaveUnmatchedQuantity													= MatchedQuantity

				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company					= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice				= PrmInvoice
				else
					WorkDistributionGroup.Invoice				= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail		= MatchWorkInvoiceAddOnCharge
				WorkDistributionGroup.AddOnCharge				= AddOnCharge
				WorkDistributionGroup.MatchedQuantity			= MatchedQuantity
				WorkDistributionGroup.TaxCode					= PrmTaxCode
				WorkDistributionGroup.TaxType					= PrmTaxType
				WorkDistributionGroup.TaxRate					= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory		= PrmProductTaxCategory
				WorkDistributionGroup.Imposition				= PrmImposition

				for each ContractLine.DistributionsRel
			

						
					WorkDistributionGroup.Account				= each.DistributionAccount
					WorkDistributionGroup.Amount				= (PrmDistributionAmount * each.Percent)
					WorkDistributionGroup.TaxableAmount			= (PrmTaxableAmount *  each.Percent)
					WorkDistributionGroup.ItemQuantity			= SaveUnmatchedQuantity * (each.Percent)
       				WorkDistributionGroup.OriginalDistribution	= each.ContractLineDistribution
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

			
