WarehouseDemandLineDetail is a BusinessClass
    owned by wh
    prefix is WDD
    classic name is WHDEMNDDTL

	Ontology
		symbolic key is WarehouseDemandLineDetail
            classic set name is WDDSET0
            classic name for WarehouseDemandLine.DemandDocumentType is DOC-TYPE
            classic name for WarehouseDemandLine.LineNumber is LINE-NBR
            classic name for WarehouseDemandLine.ComponentSequence is COMPONENT-SEQ
            classic name for WarehouseDemand.DemandSystemCode is SYSTEM-CD
            classic name for WarehouseDemand.DemandDocument is DOC-NBR
            classic name for InventoryLocation is LOCATION

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        DocumentNumberNumeric
            classic name is DOC-NBR-NUM
        UOMMultiplier
            classic name is UOM-MULT
        Quantity
			precision is Item.NumberOfDecimalsQuantity
        CatchWeightQuantity   is a Quantity
            classic name is CATCH-WT-QTY
        UpdateDate            is TimeStamp

   	Transient Fields
		TransientQuantityInLocationStockUOM		is like Quantity
			derive value from DerivedQuantityInLocationStockUOM
			precision is Item.NumberOfDecimalsQuantity
			default label is "Quantity"
		TransientOnline							is Alpha size 1
			derive value from DeriveReturnYes

    Derived Fields
    	StockOnHandAvailable is a DerivedField
    		type is like Quantity
    			precision is Item.NumberOfDecimalsQuantity
			return StockOnHandDetailRel.Available

		DerivedDatePriorToExpiringLot is a DerivedField
			type is Date
			return (WarehouseDemandLineDetail.Lot.LotExpirationDate - Company.DaysPriorToExpiringLots as days)

		DerivedLocationStockUOM						is a DerivedField 
			type is like UnitOfMeasure
			return WarehouseDemandLine.ItemLocation.ItemLocationStockUOM.UnitOfMeasure

  		DerivedLocationStockUOMMultiplier			is a DerivedField  
			type is like UOMMultiplier
			return WarehouseDemandLine.ItemLocation.ItemLocationStockUOM.ItemUOM.UOMConversion     	       

		DerivedUOMDisplay 							is a DerivedField
			type is like UnitOfMeasure
			default label is "Unit_of_Measure"
			if (HasItemLocationStockUOM)
				return DerivedLocationStockUOM
			else
				return WarehouseDemandLineDetail.UnitOfMeasure

		DerivedQuantityInLocationStockUOM				is a DerivedField
			type is like Quantity
			if (action type.Update)
				return 0
			else
				return DerivedQuantityInDemandLineLocationStockUOM 

		DerivedQuantityInDemandLineLocationStockUOM 	is a DerivedField
			type is like Quantity
			if (HasItemLocationStockUOM)
				return Quantity / DerivedLocationStockUOMMultiplier
			else
				return Quantity

		QuantityInLocationStockUOM					is a DerivedField
			type is like Quantity
			if (HasItemLocationStockUOM)
				return Quantity / DerivedLocationStockUOMMultiplier
			else
				return Quantity

		DeriveReturnYes is a DerivedField
			type is Alpha size 1
			return "Y"

	Local Fields
		LocalUOM  								is a UnitOfMeasure
		LocalDetailQuantity  					is like Quantity					
		TempCounter1  							is Numeric 2
		UOMCalculation 
		LocalQuantity							is like Quantity		
		LocalOldQuantity						is like Quantity					
		LocalTotalDetailQuantity				is like Quantity					
		LocalAllocatedQuantityForStockOnHand	is like Quantity					
		LocalConvertedQuantity					is like Quantity					
		LocalConvertedOldQuantity				is like Quantity					
		LocalConvertedAllocatedQuantityForStockOnHandToStock	is like Quantity	
		
    Relations
        StockOnHandDetailRel
            one-to-one relation to StockOnHandDetail
            Field Mapping uses symbolic key
                related.Company                         = Company
                related.InventoryLocation               = InventoryLocation
                related.Item                            = Item
                related.StockOnHandDetail.UnitOfMeasure = WarehouseDemandLineDetail.UnitOfMeasure
                related.StockOnHandDetail.Lot           = WarehouseDemandLineDetail.Lot
                related.StockOnHandDetail.Sublot        = WarehouseDemandLineDetail.Sublot
                related.StockOnHandDetail.Bin           = WarehouseDemandLineDetail.Bin
		
		StockOnHandDetailDependingOnUOMRel
            one-to-one relation to StockOnHandDetail
            Field Mapping uses symbolic key
                related.Company                         = Company
                related.InventoryLocation               = InventoryLocation
                related.Item                            = Item
                related.StockOnHandDetail.UnitOfMeasure = LocalUOM
                related.StockOnHandDetail.Lot           = WarehouseDemandLineDetail.Lot
                related.StockOnHandDetail.Sublot        = WarehouseDemandLineDetail.Sublot
                related.StockOnHandDetail.Bin           = WarehouseDemandLineDetail.Bin
    	
    	ItemUOMRel
    		one-to-one relation to ItemUOM
    		Field Mapping uses symbolic key
    			related.ItemGroup		= Company.ItemGroup
    			related.Item			= Item
    			related.UnitOfMeasure 	= WarehouseDemandLineDetail.UnitOfMeasure

		RequisitionRel 
			one-to-one relation to Requisition
			Field Mapping uses symbolic key
				related.Company			= WarehouseDemandLine.CompanyAndLocation.RequestingCompany
				related.Requisition		= WarehouseDemandLine.DocumentNumberNumeric
				
    Conditions
		IsSerialTrackedAtIssue
			restricted
			when (WarehouseDemandLine.ItemLocation.SerialTracked.SerialRequiredAtIssue)
		
		IsSerialTrackedAtReceipts
			restricted
			when (WarehouseDemandLine.ItemLocation.SerialTracked.SerialRequiredAtReceipt)  	         
        
        IsLotTrackedAtReceipts
        	restricted
        	when (WarehouseDemandLine.ItemLocation.LotTracked.LotRequiredAtReceipt)

		IsExpiredLot
			restricted
			when (WarehouseDemandLineDetail.Lot entered
			and   WarehouseDemandLineDetail.Lot.ExpiredItems)

		IsLotWithinExpiration
			restricted
			when (WarehouseDemandLineDetail.Lot entered
			and   WarehouseDemandLineDetail.Lot.LotExpirationDate entered
			and   Company.DaysPriorToExpiringLots entered
			and   current corporate date >= DerivedDatePriorToExpiringLot)

		HasItemLocationStockUOM
			when (WarehouseDemandLine.ItemLocation.HasItemLocationStockUOM)

	Rule Blocks
		RoundingQuantity
			LocalTotalDetailQuantity = WarehouseDemandLine.DetailQuantity
			LocalDetailQuantity = WarehouseDemandLine.DetailQuantity
			
			if (WarehouseDemandLineDetail.UnitOfMeasure not entered)
				WarehouseDemandLineDetail.UnitOfMeasure = Item.StockUOM
				
			if (WarehouseDemandLineDetail.UnitOfMeasure != Item.StockUOM 
			and !Item.IsCatchWeightItem)
				initialize LocalQuantity
				initialize UOMCalculation
				initialize LocalOldQuantity
				UOMCalculation.InputUOM			= WarehouseDemandLineDetail.UnitOfMeasure
				UOMCalculation.InputToUOM		= Item.StockUOM
    			UOMCalculation.InputQuantity 	= Quantity
    			UOMCalculation.DoRounding		= true
    			UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
    			LocalQuantity					= UOMCalculation.OutputQuantity
    			
    			UOMCalculation.InputUOM			= WarehouseDemandLineDetail.UnitOfMeasure
    			UOMCalculation.InputToUOM		= Item.StockUOM
    			UOMCalculation.InputQuantity 	= old Quantity
    			UOMCalculation.DoRounding		= true
    			UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
    			LocalOldQuantity				= UOMCalculation.OutputQuantity
    			include ConversionOfQuantityToStock									
				include ConversionOfOldQuantityToStock
        	else 
				LocalQuantity 		= Quantity
				LocalOldQuantity	= old Quantity
				
			
		ConversionOfQuantityToStock
			initialize UOMCalculation
			UOMCalculation.InputUOM							= WarehouseDemandLineDetail.UnitOfMeasure  
			UOMCalculation.InputToUOM						= Item.StockUOM 
			UOMCalculation.InputQuantity					= Quantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			LocalConvertedQuantity							= UOMCalculation.OutputQuantity				
		
		ConversionOfOldQuantityToStock
			initialize UOMCalculation
			UOMCalculation.InputUOM							= WarehouseDemandLineDetail.UnitOfMeasure 
			UOMCalculation.InputToUOM						= Item.StockUOM  
			UOMCalculation.InputQuantity					= old Quantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			LocalConvertedOldQuantity						= UOMCalculation.OutputQuantity
		
		ConversionOfLocalAllocatedQuantityForStockOnHandToStock
			initialize UOMCalculation
			UOMCalculation.InputUOM							= WarehouseDemandLineDetail.UnitOfMeasure
			UOMCalculation.InputToUOM						= Item.StockUOM   
			UOMCalculation.InputQuantity					= LocalAllocatedQuantityForStockOnHand
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			LocalConvertedAllocatedQuantityForStockOnHandToStock = UOMCalculation.OutputQuantity
				
		AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileAdding
			if (ItemUOMRel exists
			or  Item.IsCatchWeightItem)  
				LocalDetailQuantity += LocalConvertedQuantity
			LocalTotalDetailQuantity += LocalQuantity - LocalOldQuantity
			LocalAllocatedQuantityForStockOnHand = Quantity - old Quantity 
			
		AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileUpdate
			if (Item.IsCatchWeightItem)
				LocalDetailQuantity += (Quantity - old Quantity)
			else
				LocalDetailQuantity += LocalConvertedQuantity - LocalConvertedOldQuantity 
			LocalTotalDetailQuantity += LocalQuantity - LocalOldQuantity
			LocalAllocatedQuantityForStockOnHand = Quantity - old Quantity
			
		AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileDelete
			if (Item.IsCatchWeightItem)
				LocalDetailQuantity	+= (Quantity * -1)
			else
				LocalDetailQuantity += (LocalConvertedQuantity * -1) 	
			LocalTotalDetailQuantity += LocalQuantity * -1
			LocalAllocatedQuantityForStockOnHand = Quantity * -1
		
		AllocationCalculationForSerialWhileAdd
			Quantity = 1
			LocalDetailQuantity 		= WarehouseDemandLine.DetailQuantity + 1
			LocalTotalDetailQuantity   	= WarehouseDemandLine.DetailQuantity + 1	
			if (WarehouseDemandLine.IsBinTracked)
				LocalAllocatedQuantityForStockOnHand = 1
					
		AllocationCalculationForSerialWhileDelete
			LocalDetailQuantity 		= WarehouseDemandLine.DetailQuantity - 1
			LocalTotalDetailQuantity 	= WarehouseDemandLine.DetailQuantity - 1
			if (WarehouseDemandLine.IsBinTracked)
				LocalAllocatedQuantityForStockOnHand = -1
		
		ValidateBin
			if (WarehouseDemandLineDetail.Bin entered)
				constraint (WarehouseDemandLine.ItemLocation.BinTracked)
					"Bin<WarehouseDemandLineDetail.Bin>NotAllowedAtThisItemLocation"				
				
			if (WarehouseDemandLine.IsBinTracked)
				constraint (WarehouseDemandLineDetail.Bin entered)
					"BinIsReuired"																	
			if (WarehouseDemandLineDetail.Bin.BinType entered)
				while (TempCounter1 < 9)
					TempCounter1 += 1
					if (Company.BinTypeArray.BinTypeGroup[TempCounter1].BinType = WarehouseDemandLineDetail.Bin.BinType)
						constraint (Company.BinTypeArray.BinTypeGroup[TempCounter1].AllowsIssue)
							"Bin<WarehouseDemandLineDetail.Bin>DoesNotAllowIssues"					
								
		UpdateStockOnHand
			if (((Item.IsAlternateUOMExists or HasItemLocationStockUOM)
			and !WarehouseDemandLine.ItemLocation.BinTracked
			and WarehouseDemandLine.ItemLocation.IsNotLotTracked)
			or (WarehouseDemandLine.ItemLocation.BinTracked
			or  IsLotTrackedAtReceipts))              						
				if (HasItemLocationStockUOM)
					include ConversionOfLocalAllocatedQuantityForStockOnHandToStock
				invoke UpdateStockOnHandDetailByWarehouseDemandLineDetail StockOnHandDetailDependingOnUOMRel
					if (HasItemLocationStockUOM)
						invoked.PrmAllocatedQuantity = LocalConvertedAllocatedQuantityForStockOnHandToStock
					else
						invoked.PrmAllocatedQuantity = LocalAllocatedQuantityForStockOnHand
			
			if (WarehouseDemandLine.IsLotTracked)
				if (WarehouseDemandLineDetail.Lot not exists)
					invoke Create ItemLot
						invoked.Company								= Company
						invoked.InventoryLocation					= InventoryLocation
						invoked.Item								= Item
						invoked.ItemLot								= WarehouseDemandLineDetail.Lot

		UpdateWarehouseDemandLine
			constraint (LocalTotalDetailQuantity <= WarehouseDemandLine.AllocatedQuantity)
				"AllocatedQuantityCannotBeGreaterThanDemandQuantity"
				
			invoke FastUpdate WarehouseDemandLine
				invoked.DetailQuantity  = LocalTotalDetailQuantity              						
		
		ValidateStockOnHandRecord
			if (Item.IsCatchWeightItem
			or  HasItemLocationStockUOM)
				LocalUOM = WarehouseDemandLine.Item.StockUOM
			else
				LocalUOM = WarehouseDemandLineDetail.UnitOfMeasure
				
			if (WarehouseDemandLine.IsBinTrackedAndNotLotOrSerialTracked
			or  IsLotTrackedAtReceipts)
				constraint (StockOnHandDetailDependingOnUOMRel exists)
					"StockOnHandDetailRecordNotFound"												
						
			if (WarehouseDemandLine.IsSerialTracked
			and WarehouseDemandLine.IsBinTracked)
				if (not HasItemLocationStockUOM)
					LocalUOM = WarehouseDemandLine.TransactionUOM
				constraint (StockOnHandDetailDependingOnUOMRel exists)
					"StockOnHandDetailRecordNotFound"												
				
			if (WarehouseDemandLine.UnitOfMeasureTracked
			and not HasItemLocationStockUOM)
				constraint (StockOnHandDetailDependingOnUOMRel exists)
					"StockOnHandDetailRecordNotFound"												

		ValidateAllocatedQuantityForStockOnHand
				if (WarehouseDemandLine.IsBinTrackedAndNotLotOrSerialTracked
				or  IsLotTrackedAtReceipts)
					constraint (LocalAllocatedQuantityForStockOnHand <= StockOnHandDetailDependingOnUOMRel.AvailableQuantity)
						"NotEnoughAvailableDetailToAllocate"										

		UpdateOverrideTransientInLocationStockUOM 
			if  (HasItemLocationStockUOM
			and  TransientOnline entered)
				if (TransientQuantityInLocationStockUOM 	not = QuantityInLocationStockUOM)
					if (TransientQuantityInLocationStockUOM entered)
						Quantity = (TransientQuantityInLocationStockUOM * DerivedLocationStockUOMMultiplier)
					else
						Quantity = 0

	Field Rules
		UOMMultiplier





			
			default to ItemUOMRel.UOMConversion
			
		WarehouseDemandLineDetail
			if (WarehouseDemandLine.IsBinTrackedAndNotLotOrSerialTracked)
				include ValidateBin	
				if (Item.IsAlternateUOMExists)
					constraint (WarehouseDemandLineDetail.UnitOfMeasure entered)					 
						"U\O\MRequiredForAlternateTrackedItem"										
			
			if (WarehouseDemandLineDetail.UnitOfMeasure not entered) 
				if (Item.IsCatchWeightItem)
					WarehouseDemandLineDetail.UnitOfMeasure = WarehouseDemandLine.TransactionUOM
				else
					WarehouseDemandLineDetail.UnitOfMeasure = Item.StockUOM	
					
			if (Item.IsCatchWeightItem)
				constraint (WarehouseDemandLineDetail.UnitOfMeasure = WarehouseDemandLine.TransactionUOM)
					"UnitOfMeasureMustBeTheSameAsTheDemandLineTransactionUOM"				
			else
				if (WarehouseDemandLineDetail.UnitOfMeasure != Item.StockUOM)
					constraint (ItemUOMRel exists)
						"EnteredU\O\MIsNotAValidStockU\O\M"	

			if (IsLotTrackedAtReceipts)
				constraint (StockOnHandDetailDependingOnUOMRel.IsItemLotNotOnHold)
					"LotIsOnHold;CannotAllocate"														
				if (WarehouseDemandLineDetail.Lot.LotExpirationDate entered)						
					constraint (WarehouseDemandLineDetail.Lot.LotExpirationDate > WarehouseDemandLine.EstimatedTransactionDate)     
						"Lot<WarehouseDemandLineDetail.Lot>HasExpired;CannotAllocate"				
				if (WarehouseDemandLine.IsBinTracked)
					include ValidateBin	
			
		Quantity
			if (Item.IsCatchWeightItem
			or  HasItemLocationStockUOM)
				LocalUOM = Item.StockUOM
			else
				LocalUOM = WarehouseDemandLineDetail.UnitOfMeasure
				
			if (WarehouseDemandLine.IsSerialTracked)
				constraint (Quantity = 1)
					"ForSerialTrackedQuantityMustBeOne"
			else
				constraint (Quantity >= 0)
					"CannotAllocateANegativeQuantity"												
					
					
	Actions
        Create is a Create Action
			Action Rules
				if (WarehouseDemandLine.IsSerialTracked)
					if (IsSerialTrackedAtIssue)
						constraint (WarehouseDemandLineDetail.Serial not exists)
							"SerialNumber<WarehouseDemandLineDetail.Serial>RecordAlreadyExists"	
					if (IsSerialTrackedAtReceipts)
						constraint (WarehouseDemandLineDetail.Serial exists)
							"SerialNumber<WarehouseDemandLineDetail.Serial>RecordDoesNotExists"				
						constraint (WarehouseDemandLineDetail.Serial.Bin = WarehouseDemandLineDetail.Bin)	
							"SerialNumber<WarehouseDemandLineDetail.Serial>WithBinDoesNotExists"				
						constraint (InventoryLocation = WarehouseDemandLineDetail.Serial.InventoryLocation)
							"SerialNumber<WarehouseDemandLineDetail.Serial>DoesNotExistInLocation<InventoryLocation>"	
					include UpdateOverrideTransientInLocationStockUOM
					include AllocationCalculationForSerialWhileAdd
					if (WarehouseDemandLine.IsBinTracked)	
						include ValidateBin
					include ValidateStockOnHandRecord	
				else
					if (WarehouseDemandLine.IsLotTracked)
						if (Company.DoNotAllowExpiredLotOnTransaction)
							constraint (not IsLotWithinExpiration)
								"Lot<WarehouseDemandLineDetail.Lot>IsEitherExpiredOrExpiringIn<Company.DaysPriorToExpiringLots>DaysAndCannotBeUsed"
						else 
							if (IsLotWithinExpiration)
								confirmation required
									"Lot<WarehouseDemandLineDetail.Lot>IsExpiredOrWillBeExpiringSoon.Continue?"


					include UpdateOverrideTransientInLocationStockUOM
					include RoundingQuantity
					include ValidateStockOnHandRecord
					include AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileAdding
						
				constraint (LocalDetailQuantity <= WarehouseDemandLine.AllocatedQuantity)
					"DetailQuantityCannotExceedAllocatedQuantity"									
	
				include ValidateAllocatedQuantityForStockOnHand	
				include UpdateWarehouseDemandLine
				include UpdateStockOnHand
				
				if (WarehouseDemandLine.IsSerialTracked)
					if (WarehouseDemandLineDetail.Serial not exists)
						invoke Create ItemSerialNumber
							invoked.Company				= Company
							invoked.Item				= Item
							invoked.InventoryLocation   = InventoryLocation
							invoked.Bin                 = WarehouseDemandLineDetail.Bin
							invoked.ItemSerialNumber 	= WarehouseDemandLineDetail.Serial
							invoked.Status				= WarehouseDemandLineDetail.Serial.Status.Allocated
					else
						invoke Update WarehouseDemandLineDetail.Serial
							invoked.Status				= WarehouseDemandLineDetail.Serial.Status.Allocated
				
				
        Update is an Update Action
        	Action Rules
        		constraint (!WarehouseDemandLine.FutureDemand)
					"DemandsFuture;CannotAllocate"													
					  	
        		if (!WarehouseDemandLine.IsSerialTracked)
	        		include UpdateOverrideTransientInLocationStockUOM
	        		include RoundingQuantity
	        		include ValidateStockOnHandRecord
	        		include AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileUpdate
	        		constraint (LocalDetailQuantity <= WarehouseDemandLine.AllocatedQuantity)
						"DetailQuantityCannotExceedAllocatedQuantity"								

					include ValidateAllocatedQuantityForStockOnHand
	        		include UpdateWarehouseDemandLine
	        		include UpdateStockOnHand
        		
        Delete is a Delete Action
			Entrance Rules
				include UpdateOverrideTransientInLocationStockUOM
				if (WarehouseDemandLine.IsSerialTracked)
					include AllocationCalculationForSerialWhileDelete
				else
					include RoundingQuantity
					include AllocationCalculationForBinTrackedLotTrackedAndUOMTrackedWhileDelete
					
				constraint (LocalDetailQuantity <= WarehouseDemandLine.AllocatedQuantity)
					"DetailQuantityCannotExceedAllocatedQuantity"									
					
				include ValidateStockOnHandRecord	
				include UpdateWarehouseDemandLine
				include UpdateStockOnHand

				if (WarehouseDemandLine.IsSerialTracked)
					if (IsSerialTrackedAtIssue)
						invoke Delete WarehouseDemandLineDetail.Serial					
					else
						invoke Update WarehouseDemandLineDetail.Serial
							invoked.Status = WarehouseDemandLineDetail.Serial.Status.OnHand
		
		QuickCreate is a Create Action
			restricted
			bypass field rules

		QuickDelete is a Delete Action
			restricted

		Purge is a Purge Action
			restricted
			bypass relational integrity rules

