PricingWorksheet is a BusinessClass
    owned by bl
    prefix is OWK
    classic name is OEWKSHEET

    Ontology
        symbolic key is PricingWorksheet
            classic set name is OWKSET1
            classic name is WORK-NAME

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        SourceCurrency             is a Currency
            classic name is SEL-CURR
        SourceLocation             is an InventoryLocation
            classic name is SEL-BASE-LOC
        SourceBaseName             is a PriceBase	
            classic name is SEL-BASE
            context of SourceCurrency
            context of SourceLocation
        UpdateCurrency             is a Currency
            classic name is UPD-CURR
        UpdateLocation             is an InventoryLocation
            classic name is UPD-LOC
        UpdateBaseName             is a PriceBase	
            classic name is UPD-BASE
            context of UpdateCurrency
            context of UpdateLocation
        PlannedEffectiveDate       is Date
            classic name is PLAN-EFF-DATE
        Location               is an InventoryLocation       
        IssueCostPriority          is a DefaultNumberOfDecimalsCost
            classic name is ISS-COST-PRI
        LastReceivedCostPriority   is a DefaultNumberOfDecimalsCost
            classic name is LAST-COST-PRI
		ItemsByMultipliers		   is a ItemsInWorksheetArray
			classic name for ItemsByMultipliers.ItemsInWorksheet.BeginningItem  is BEG-ITEM
			classic name for ItemsByMultipliers.ItemsInWorksheet.EndingItem 	is END-ITEM
			classic name for ItemsByMultipliers.ItemsInWorksheet.ItemMultiplier is ITEM-MULT
		MajorSalesClassesByMultipliers	is a MajorSalesClassesArray
			classic name for MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet.BeginningMajorSalesClass  is BEG-MAJ-SCLS
			classic name for MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet.EndingMajorSalesClass     is END-MAJ-SCLS
			classic name for MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet.MajorSalesClassMultiplier is SCLASS-MULT
        SelectedVendor             is a Vendor
            classic name is SEL-VENDOR
        VendorMultiplier           is Decimal size 5.4
            classic name is VENDOR-MULT
        Status                     is Numeric size 1
            States
                Edit      value is 0
                Created   value is 1
                Released  value is 2
                Processed value is 3
        WorksheetUpdatable		            is Boolean    
            classic name is SPRDSHEET-FL

	Local Fields
	
		LoopCounter					is Numeric 2
		NextOccurrence 				is Numeric 2  

    Conditions

        IsCreated
        	restricted
            when (Status.Created)
            
        IsWorksheetInProcessed
        	restricted
            when (Status.Created
            or    Status.Released)
        
        IsNoWorksheetUpdatable
        	restricted
            when (!WorksheetUpdatable)
        	
		IsEditAndCreated
			restricted
			when (Status.Edit
			or    Status.Created)	
			
        IsCreatedReleaseAndProcessed                   
        	restricted
        	when (Status.Created
        	or    Status.Released
        	or    Status.Processed)	

		IsReleasedAndProcessed                           
			restricted
			when (Status.Released
			or    Status.Processed)
		
			
    Relations
                
		PricingWorksheetItemRel             is a PricingWorksheetItem set
		
    Sets

        Set2
            indexed
            Sort Order
                PricingWorksheet
                Company
    
    Derived Fields
    	WorksheetMessage					is a MessageField
    		restricted
			"UseWorksheetCreationProcessToCreateAWorksheet"
    	
    	
    Field Rules
    

		SourceCurrency
			if (Location not entered)
				required               
			
			if (!Company.CurrencyBasedPricing)
				constraint (SourceCurrency =  Company.Currency)  
					"CurrencyCodeMustEqualCompanyCurrencyCode"   
			
		SourceLocation
		
			if (SourceBaseName entered)
				if (Company.LocationBasedPricing
				or  SelectedVendor entered)   
					required
						"LocationIsRequired"										
				else		
					cannot be entered
						"Company<Company>IsNotALocationBasedPricingCompany;LocationCannotBeEntered"  
			

			if (SourceBaseName not entered)
				cannot be entered
					"BaseNameIsNotEntered;LocationCannotBeEntered"  
				
				
		SourceBaseName
		
			if (Location not entered)
				required
					"EitherBaseNameMustBeEnteredOrInventoryLocationMustBeEntered"
			else
				cannot be entered
					"CannotEnteredBaseNameAndInventoryLocationTogether"
					
			constraint (SourceBaseName exists)
				"SourcePriceBaseDoesNotExist"
									
		UpdateCurrency             
			required

			if (!Company.CurrencyBasedPricing)
				constraint (UpdateCurrency =  Company.Currency)
					"CurrencyCodeMustEqualCompanyCurrencyCode"   

        UpdateLocation	
        
			if (Company.LocationBasedPricing)
				required
					"LocationIsRequired"   // @e.BL41.127"
			else	
				cannot be entered
					"Company<Company>IsNotALocationBasedPricingCompany;LocationCannotBeEntered"  
				
		UpdateBaseName
            required
            
        PlannedEffectiveDate
            required
            constraint (PlannedEffectiveDate > current corporate date)
				"EffectiveDateShouldBeGreaterThanToday'sDate"   
				
		Location
			
			if (SelectedVendor entered)
				required
				
		IssueCostPriority     
		
			if (Location entered
			and LastReceivedCostPriority not entered)
				required
					"EitherIssueCostOrReceivedCostIsRequiredForLocation" 
					
			if (Location not entered)
				cannot be entered
					"InventoryLocationIsNotEntered;IssueCostCannotBeEnetered"  
		
		LastReceivedCostPriority
		
			if (Location entered)
				constraint (LastReceivedCostPriority != IssueCostPriority )  
					"IssueCostAndReceivedCostShouldNotBeEqual"	
			else		
				cannot be entered
					"InventoryLocationIsNotEntered;ReceivedCostCannotBeEnetered"  
				
        SelectedVendor             

			if (SourceBaseName not entered       			
        	and !Company.LocationBasedPricing)
        		cannot be entered  
        			"Company<Company>IsNotALocationBasedPricingCompanyAndBaseNameIsNotEntered;VendorCannotBeEntered" 

		VendorMultiplier           
			
			if (SelectedVendor not entered)
				cannot be entered
					"VendorIsNotEntered;VendorMultiplierCannotBeEntered"  
					
		ItemsByMultipliers 
		
			initialize LoopCounter
			LoopCounter  = 1
			while (LoopCounter <= 7)	   
				initialize NextOccurrence 
				NextOccurrence  = LoopCounter + 1
				if (ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem entered)
					while (NextOccurrence  <= 7)
						constraint (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem != ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem)
								"EndingItem<ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem>ShouldNotBeEqualToPreviousOccuranceOfBeginningItem<ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem>" 
								
						if (ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem > ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem)
							constraint (ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem >= ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem)
								"ItemRangeOverlapsWithAnotherItemRange" 								
							
							
						if (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem > ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem)
							constraint (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem >= ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem)
								"ItemRangeOverlapsWithAnotherItemRange" 								
	
						constraint (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem != ItemsByMultipliers.ItemsInWorksheet[LoopCounter].EndingItem)
							"BeginningItem<ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem>ShouldNotBeEqualToPreviousOccuranceOfEndingItem<ItemsByMultipliers.ItemsInWorksheet[LoopCounter].EndingItem>" 
						
						if (ItemsByMultipliers.ItemsInWorksheet[LoopCounter].EndingItem > ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].BeginningItem)
							constraint (ItemsByMultipliers.ItemsInWorksheet[LoopCounter].EndingItem >= ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem)
								"ItemRangeOverlapsWithAnotherItemRange" 								 
	
						if (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem > ItemsByMultipliers.ItemsInWorksheet[LoopCounter].BeginningItem)
							constraint (ItemsByMultipliers.ItemsInWorksheet[NextOccurrence ].EndingItem >= ItemsByMultipliers.ItemsInWorksheet[LoopCounter].EndingItem)
								"ItemRangeOverlapsWithAnotherItemRange"  
								
						NextOccurrence  +=1
					LoopCounter +=1
				else
					LoopCounter += 10
							

		MajorSalesClassesByMultipliers 
			
			initialize LoopCounter
			LoopCounter  = 1
			
			while (LoopCounter <= 14)	
				initialize NextOccurrence 
				NextOccurrence  = LoopCounter + 1
				if (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass entered)
					while (NextOccurrence  <= 14)
						constraint (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass != MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass)
							"EndingMajorSalesClass<MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass>ShouldNotBeEqualToPreviousOccuranceOfBeginningMajorSalesClasses<MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass>" 		
							
						if (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass > MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass)
							constraint (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass >= MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass)	
								"MajorSalesClassRangeOverlapsWithAnotherMajorSalesClassRange" 
							
						if (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass > MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass)
							constraint(MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass >= MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass)
								"MajorSalesClassRangeOverlapsWithAnotherMajorSalesClassRange" 
								
						constraint (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass != MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass)
							"BeginningMajorSalesClass<MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass>ShouldNotBeEqualToPreviousOccuranceOfEndingMajorSalesClass<MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass>"		
							
						if (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass > MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].BeginningMajorSalesClass)
							constraint (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass >= MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass)
								"MajorSalesClassRangeOverlapsWithAnotherMajorSalesClassRange" 
							
						if (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass > MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].BeginningMajorSalesClass)
							constraint (MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[NextOccurrence ].EndingMajorSalesClass >= MajorSalesClassesByMultipliers.MajorSalesClassesInWorksheet[LoopCounter].EndingMajorSalesClass)
								"MajorSalesClassRangeOverlapsWithAnotherMajorSalesClassRange" 
								
						NextOccurrence  +=1
					LoopCounter +=1
				else
					LoopCounter +=20
			
	Actions
		Create 			is a Create Action
			completion message is "<WorksheetMessage>"
		
		Update 			is an Update Action
			Action Rules
				constraint (IsNoWorksheetUpdatable)
					"WorksheetUpdatableFormatHasBeenCreated;CannotBeUpdated"   	// @e.BL41.129"
					
		Delete			is a Delete Action
			Action Rules
				constraint (IsEditAndCreated)
					"CannotDelete;UseWorksheetPurgeProcess"   
		
		Release			is an Instance Action
			valid when (IsCreated)
			Action Rules
				constraint (IsCreated)
					"ReleaseActionIsNotValidForWorksheetInEditReleaseAndProcessedState"
					
				Status      = 2
		  
		BaseListWorksheetPurge is a Set Action
			restricted								 
			Parameters 
				PrmCompany                 is a BillingCompany
        		PrmWorkName                is a PricingWorksheet
        		
			Parameter Rules
				PrmCompany
            		required
            		
            Local Fields
	        	RecordCount					is Numeric 10
				LocalActor					is an Actor
				
			Instance Selection
				include deleted records 	
				where (PrmCompany = Company
				and   ((PrmWorkName entered 
				and 	PrmWorkName = PricingWorksheet) 
				or 	  (PrmWorkName not entered 
				and    Status > 2)))
			
			
						
			Action Rules
				Empty Set Rules 
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoPricingWorksheetRecordsFoundToPurge"
						priority is high
						detail is "BaseListWorksheetPurgehasbeencompletedfor<RecordCount>records"
				Set Rules
					Entrance Rules
						initialize RecordCount
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "BaseListWorksheetPurgeProcessCompleted"
							priority is high
							detail is "PricingWorksheetRecordsPurged:<RecordCount>"
															
				Instance Rules
					increment RecordCount
					invoke Purge
					
		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge PricingWorksheetItemRel	 
