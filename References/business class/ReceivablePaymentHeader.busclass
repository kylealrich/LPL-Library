ReceivablePaymentHeader is a BusinessClass
	owned by ar
	prefix is APH
	classic name is ARPYMNTHDR

	Ontology
		symbolic key is ReceivablePaymentHeader
			classic set name is APHSET1
			classic name is BATCH-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		implements BODId
		implements Archivable

	Persistent Fields

		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		Status											is Numeric size 1
			States
				OpenBatchUnreleased		value is 0
					default label is "OpenBatch_-Unreleased"
				ReleasedBatch			value is 1
					default label is "ReleasedBatch"
		ReceivableOperator
			classic name is OPR-CODE
		CurrencyTable
		DepositDate										is an ExchangeDate
		GeneralLedgerDate								is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		CashCode
		Currency 										is a FromCurrency
			classic name is CURRENCY-CD
		CurrencyRate									is an OrigRate
			classic name is ORIG-RATE
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		BaseCash										is an InternationalAmount
			precision is Company.Currency.NumberOfDecimals
		BaseRna											is an InternationalAmount
			precision is Company.Currency.NumberOfDecimals
		RnaTotal										is an InternationalAmount
		ReceivableLockBox
			classic name is LOCK-BOX
			default label is "ReceivableLockbox"	
		LocBoxBatch										is a LastArBatch
		BatchTotal										is an InternationalAmount
			precision is Currency.NumberOfDecimals
		BatchCount										is a DetailCount
		AdditionalAmount								is an InternationalAmount
			classic name is ADDTNL-AMT
			precision is Currency.NumberOfDecimals

		DetailTotal										is an InternationalAmount
			precision is Currency.NumberOfDecimals
		DetailCount
		LastLogSeq										is a Sequence
			disable Auditing
		CurrencyDecimalsNumber							is an OrigNd
			classic name is ORIG-ND
		Reference
		ReceivedNotAppliedReceivableGeneralLedgerCode	is a ReceivableGeneralLedgerCode
			sql name is RNAReceivableGeneralLedgerCode
			classic name is NOT-APPLD-CD
			default label is "ReceivedNotAppliedReceivableGlobalLedgerCode"
		PrepaymentReceivableGeneralLedgerCode			is a ReceivableGeneralLedgerCode
			sql name is PReceivableGeneralLedgerCode
			classic name is PRE-PAY-CODE
			default label is "PrepaymentReceivableGlobalLedgerCode"
		DepositBankCode									is a BankTransactionCode
			classic name is DEP-INST-CODE
		TransactionIDNumber
			classic name is TRANS-IDENT
		DepositAdjustmentBankCode						is a BankTransactionCode
			classic name is ADJ-INST-CODE
		AdjustmentTransactionIDNumber					is a TransactionIDNumber
			classic name is ADJ-TRANS-IDNT
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		CashLedgerStatement								is like CashLedgerStatement
			classic name is RECON-STMT-NBR
		JournalBookSequenceNumber						is a JbkSeqNbr
			classic name is JBK-SEQ-NBR
			restricted
		Origin											is AlphaUpper size 1
			classic name is ORIG-CODE
			States
				Manual									value is " "	
				Conversion								value is "C"	
				PaymentInterface						value is "N"	
				BankStatementInterface					value is "B"	
				ElectronicFundsTransfer					value is "E"	
				ThirdPartyPaymentProcessing				value is "T"	
				IntercompanyBilling						value is "I"	
		BackgroundProcessing							is Numeric size 1
			States
				NotProcessingInBackground				value is 0
				ReleaseInProcess						value is 1
				ReleaseFailure							value is 2
				SuccessfulBackgroundRelease				value is 3
				TaxProcessing							value is 4
				ProcessingInBackground					value is 9
		ErrorMessage									is Alpha size 200
		CbUserField1									is AlphaUpper size 30
			classic name is CB-USER-FIELD1
			default label is "TransactionData1"		
		CbUserField2									is AlphaUpper size 30
			classic name is CB-USER-FIELD2
			default label is "TransactionData2"		
		CbUserField3									is AlphaUpper size 30
			classic name is CB-USER-FIELD3
			default label is "TransactionData3"		
		CbUserField4									is AlphaUpper size 30
			classic name is CB-USER-FIELD4
			default label is "TransactionData4"		
		AdditionalAmountAccount							is a FinanceCodeBlockFull
			classic name for AdditionalAmountAccount.AccountingUnit is ACCT-UNIT
			classic name for AdditionalAmountAccount.GeneralLedgerChartAccount is ACCOUNT
		CompanyCashCode
		OriginatingInterfaceRun							is like ReceivablesInterfaceResult
		InterfaceInProcess								is Boolean




	Context Fields
		DepositDateRange								is a DateRange
		PostingDateRange								is a DateRange2
		FSMInboundBODTracker


	Transient Fields
		BillOfExchange									is Boolean
		TransientReceivableOperator						is like ReceivableOperator
			derive value from ReceivableOperator
		UnreleasedIndicator 							is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedIsUnreleased
		UnpostedDistributionsIndicator					is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasUnpostedDistributions
		RTMPendingIndicator								is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasUnreleasedRTMs
		PaymentReversalPendingIndicator					is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasReverseDetail
		ARToAPPendingIndicator							is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasARtoAPSelect
		PendingApplicationsIndicator					is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasPendingApplications
		UnpostedApplicationsIndicator					is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasUnpostedApplications
		CompanyCashCodeCashAccount						is a FinanceCodeBlockFull
			derive value from CompanyCashCodeRel.CashAccount


	Local Fields
		CurrencyWork												is a ReceivableExchange
		LocalCurrencyExchange										is a CurrencyExchange
		FromCurrencyExchangeGroup
		LocalCurrencyRelationship									is a CurrencyRelationship
		LocalCompany												is like Company
		LocalDistribType											is Alpha 1
			States
				Cash					value is "C"
				RNA						value is "R"
		LocalAmount													is an InternationalAmount
		LocalBypassActiveCodeBlockEdit								is a BypassActiveCodeBlockEdit		
		LocalContinueRelease										is Boolean
		LocalAmountCompanyCurrency									is an InternationalAmount

		LocalTransactionAmount										is an InternationalAmount
		LocalTransactionSummaryAmount								is an InternationalAmount
		LocalReceivablePayment										is a ReceivablePayment
		LocalRNACode												is a ReceivableGeneralLedgerCode




		LocalDescription											is like Description
		LocalPreEditRelease											is Boolean
		LocalBackgroundGroup										is AlphaUpper up to 200
		LocalReceivableTransactionSummary							is AlphaUpper size 2
			States
				PaymentsCharges			value is "03"
				NonArPaymentsEntered	value is "04"
		LocalCashLedgerType											is Alpha 1
			States
				Header					value is "H"
				BankCharges				value is "B"
		LocalCashLedgerTransaction									is a CashLedgerTransaction view
		LocalReceivablePaymentPaymentCount							is Numeric size 5
		LocalPaymentType											is AlphaUpper size 10
		LocalTitle													is Alpha size 255
		ActionCode													is Alpha size 1
			States
				Create					value is "C"
				Update					value is "U"
				Delete					value is "D"
		LocalReceivableInvoice										is Alpha size 255
		LocalBatchNumber											is Numeric size 5

		LocalGeneralLedgerCompanyGroup								is a GeneralLedgerCompanyGroup

		LocalActor													is Actor

		SumOfReceivablePaymentsWithSameRNACodeRelAmountsDone		is Boolean	
		SumOfReceivablePaymentsWithSameRNACodeRelTransactionAmount	is an InternationalAmount	

		NativeLPLBODTrigger								is Boolean
		LocalSequence									is Numeric size 9

		LocalTriggerFrom								is Alpha size 100
		LocalLineCounter								is Numeric size 9
		LocalBatchCounter								is Numeric 9
		LocalBatchSequence								is Numeric 9
		LocalLastBatch									is Boolean
		LocalBODID										is Alpha size 200
		LocalReceivablePaymentBatchCount				is Numeric 9
		LocalCurrentReceivablePaymentBatchCount			is Numeric 9
		LocalBODTrigger									is Boolean
		EFTLocalPaymentType								is Alpha size 50
		LocalProcessingMethod							is Alpha size 50
		LocalNativeLPLRestrict							is Alpha size 50
		LocalDebtorPartyXML								is XMLDocument
		LocalDebitTransferPaymentBatchXML				is XMLDocument
		LocalUserTemplate								is Alpha size 250
		LocalBODPaymentType								is Alpha size 20




		NewReceivablePaymentHeader						is a ReceivablePaymentHeader view	
		NewReceivablePayment							is a ReceivablePayment view	
		LocalThirdPartyPaymentProcessingResponseTransactionId					is Alpha size 36 
		LocalThirdPartyPaymentProcessingTransactionAmount						is an InternationalAmount 
		LocalThirdPartyPaymentProcessingCustomerId								is a Customer	
		NewBODTracker  									is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker						is Numeric 15
		Error											is Boolean
		LocalErrorMessage	 							is Alpha 300
		NextSentence									is Boolean
		LocalLPLBODTrigger								is Boolean
		LocalDebitTransferBatchTrackerXML				is XMLDocument
		RestartNativelpl								is Boolean
		LocalConfigurationParameter						is Alpha size up to 200

	Field Rules

		ReceivablePaymentHeader
			if (!Company.PaymentBatchNumbering)
				required
					"BatchNumberIsRequired"

		ReceivableLockBox


			constraint (ReceivableLockBox.Company = Company)
				"Receivable_\Lockbox_\CompanyDoesNotMatch_\Payment_\Header_\Company"	

		CurrencyTable	
			default to CompanySystemClosingControlRel.CurrencyTable
			default to Company.FinanceEnterpriseGroup.CurrencyTable

			if (CurrencyTable changed)
				constraint (!PaymentsExist)
					"CannotChange_\Currency_\Table;PaymentsExist"

		ReceivableProcessLevel
			required
			default to ReceivableLockBox.ReceivableProcessLevel
			default to Company.DefaultReceivableProcessLevel






		CashCode
			required
			default to ReceivableLockBox.CashCode
			default to ReceivableProcessLevel.CashCode

		CompanyCashCode
			required

		Currency
			required
			default to ReceivableLockBox.Currency
			default to CashCode.Currency
			if (!Company.MultiCurrencyProcessing)
				constraint (Currency = Company.Currency)
					"CurrencyMustMatch_\Company_\Currency<Company.Currency>.CompanyIsNotMultiCurrency"

		CurrencyRate


			if (Currency != Company.Currency
			and Currency changed
			and CurrencyRate not changed)
				confirmation required
					"CurrencyHasChangedButNotRate.Continue?"

			if (Currency changed
			or  CurrencyRate not changed
			or  CurrencyRate not entered)

				initialize LocalCurrencyExchange.EnteredCurrencyRate
				LocalCurrencyExchange.ToCurrency			= Company.Currency

				if (CurrencyRate not entered)
					CurrencyRate = LocalCurrencyExchange.OutputCurrencyRate

				if (Company.CurrencyRateOverride.No)
					constraint (CurrencyRate = LocalCurrencyExchange.OutputCurrencyRate)
						"CompanyDoesNotAllow_\Currency_\Rate_\Override"

			if (Currency = Company.Currency)
				constraint (CurrencyRate = 1)
					"CurrencyExchangeRateMustBe1IfSameAsCompanyCurrency"

		CurrencyMultiplicationOrDivision
			required
			if (Currency = Company.Currency)
				CurrencyMultiplicationOrDivision = "M"
			else
				LocalCurrencyRelationship.FromCurrency				= Currency
				LocalCurrencyRelationship.ToCurrency				= Company.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CurrencyMultiplicationOrDivision 				= "M"
				else
					CurrencyMultiplicationOrDivision 				= "D"

		CurrencyRateToCustomerGroupCurrency
			required
			FromCurrencyExchangeGroup.FromCurrency					= Company.Currency
			FromCurrencyExchangeGroup.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
			CurrencyRateToCustomerGroupCurrency 					= FromCurrencyExchangeGroup.BaseAmount.OutputCurrencyRate

		CustomerGroupCurrencyMultiplicationOrDivision
			required
			if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
				CustomerGroupCurrencyMultiplicationOrDivision = "M"
			else
				LocalCurrencyRelationship.FromCurrency				= Company.Currency
				LocalCurrencyRelationship.ToCurrency				= Company.CustomerGroupField.CustomerGroup.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CustomerGroupCurrencyMultiplicationOrDivision 	= "M"
				else
					CustomerGroupCurrencyMultiplicationOrDivision 	= "D"

		CurrencyDecimalsNumber
			default to Currency.NumberOfDecimals

		DepositBankCode
			default to Company.DepositBankCode
			if (!BillOfExchange)
				constraint (DepositBankCode.BankTransactionType.BankService)
					"MustBeABankServiceTypeDepositBankPayCode"
				constraint (DepositBankCode.TransactionType.CreditTransaction)
					"DepositBankCodeMustBeACreditType"

		ReceivedNotAppliedReceivableGeneralLedgerCode
			default to ReceivableProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
			if (BaseRna entered)
				cannot be changed
					"PaymentsExist-CannotChangeRNACode"

		PrepaymentReceivableGeneralLedgerCode
			default to ReceivableProcessLevel.PrepaymentReceivableGeneralLedgerCode

		DepositDate

			default to current corporate date

		GeneralLedgerDate
			required
			default to DepositDate
			if (action type.Create				
			or  GeneralLedgerDate changed)		
				if (!Origin.ThirdPartyPaymentProcessing)  
					if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
						constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
							"Global_\Ledger_\Date<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				else  
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange  
					and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)  
						GeneralLedgerDate = CompanySystemClosingControlRel.ValidEntryDate.Begin  



		AdditionalAmount
			if (AdditionalAmountAccount entered)
				required
					"BankChargesRequiredIfAccountEntered"

		AdditionalAmountAccount
			if (AdditionalAmount entered)
				required
					"AccountRequiredIfBankChargesEntered"

		TransactionIDNumber
			autosequence using DepositBankCode.TransactionIDNumber
			cannot be changed


		BaseCash
			if (parentcontext.name != "ReceivablePayment")
				cannot be changed

		BaseRna
			if (parentcontext.name != "ReceivablePayment")
				cannot be changed

		RnaTotal
			if (parentcontext.name != "ReceivablePayment")
				cannot be changed

		DetailTotal
			if (parentcontext.name != "ReceivablePayment")
				cannot be changed

		DetailCount
			if (parentcontext.name != "ReceivablePayment")
				cannot be changed

		ReceivableOperator
			if (Company.CashOperatorRequired)
				constraint (ReceivableOperatorRel exists)
					"OperatorDoesNotExist"

		TransientReceivableOperator
			ReceivableOperator = TransientReceivableOperator
			if (Company.CashOperatorRequired)
				constraint (TransientReceivableOperator entered)
					"OperatorRequired"
				constraint (ReceivableOperatorRel exists)
					"OperatorDoesNotExist"
				constraint (ReceivableOperatorRel.ActiveStatus.Active)
					"OperatorIsNotActive"
			if (TransientReceivableOperator not entered
			and ReceivableOperator not entered)			
				default to actor
				ReceivableOperator = TransientReceivableOperator

		Status
			cannot be changed


	SubType PaymentsExist Field Rules
		ReceivableProcessLevel
			cannot be changed
				"CannotBeChanged-PaymentsExist"

		ReceivableLockBox
			cannot be changed
				"CannotBeChanged-PaymentsExist"

		CashCode
			cannot be changed
				"CannotBeChanged-PaymentsExist"



	Rule Blocks

		ReleaseEdits
			if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
				constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
					"Global_\Ledger_\Date<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"









			constraint (PaymentsExist)
				"CannotReleaseBatchWithNoPayments"

			if (Company.PaymentBatchTotalBalancing)
				constraint (BatchTotal = DetailTotal and BatchCount = DetailCount)
					"DetailAndBatchControlsNotInBalance"









		BatchReleaseFundDistributions
			LocalTransactionAmount 						= sum ReceivablePaymentsRel.BaseAmount
			LocalTransactionSummaryAmount 				+= LocalTransactionAmount
			invoke ReleaseFundNonARDistributions ReceivablePayment
				run after background group (LocalBackgroundGroup)
				invoked.PrmCompany						= Company
				invoked.PrmHeader						= ReceivablePaymentHeader
				invoked.PrmBypassActiveCodeBlockEdit	= LocalBypassActiveCodeBlockEdit		


		BatchReleaseDetailDistributions
			LocalTransactionAmount 						= sum ReceivablePaymentsRel.BaseAmount
			LocalTransactionSummaryAmount 				+= LocalTransactionAmount

			invoke BatchReleaseDetailDistributions ReceivablePayment
				run after background group (LocalBackgroundGroup)
				invoked.PrmCompany						= Company
				invoked.PrmHeader						= ReceivablePaymentHeader
				invoked.PrmBypassActiveCodeBlockEdit	= LocalBypassActiveCodeBlockEdit		


		BatchReleaseSummaryDistributions
			initialize LocalReceivablePayment
			LocalDistribType					= "C"
			LocalAmount							= DetailTotal
			if (LocalAmount entered)
				include CreateDistribution

			if (SumOfPaymentsWithSameRNACode != 0)
				LocalRNACode						= ReceivedNotAppliedReceivableGeneralLedgerCode
				initialize LocalReceivablePayment
				LocalDistribType					= "R"
				LocalAmount							= SumOfPaymentsWithSameRNACode * -1
				include CreateDistribution

				if (BaseRna > 0)
					LocalTransactionAmount =  BaseRna * -1
				else
					LocalTransactionAmount =  BaseRna
				LocalTransactionSummaryAmount += LocalTransactionAmount

			initialize LocalCompany
			initialize LocalRNACode
			initialize LocalAmount
			initialize LocalReceivablePayment

			for each ReceivablePaymentsWithDifferentRNACodeRel
				if (LocalRNACode entered
				and LocalRNACode != each.ReceivedNotAppliedReceivableGeneralLedgerCode
				and LocalAmount entered)
					include RnaDistribution
					initialize LocalAmount
					LocalRNACode = each.ReceivedNotAppliedReceivableGeneralLedgerCode

				LocalCompany				= each.Company
				LocalRNACode				= each.ReceivedNotAppliedReceivableGeneralLedgerCode
				LocalAmount				   += each.TransactionAmount * -1

			if  (LocalRNACode entered
			and  LocalAmount entered)
				include RnaDistribution


		RnaDistribution
			LocalDistribType					= "R"
			include CreateDistribution

			if (LocalAmount > 0)
				LocalTransactionAmount =  LocalAmount * -1
			else
				LocalTransactionAmount =  LocalAmount

			LocalTransactionSummaryAmount += LocalTransactionAmount


		BankChargeDistributions

			initialize LocalReceivablePayment
			LocalDistribType					= blank
			LocalAmount							= AdditionalAmount
			LocalDescription					= "Batch " + ReceivablePaymentHeader + " additional amount"
			include CreateDistribution

			initialize LocalReceivablePayment
			LocalDistribType					= "C"
			LocalAmount							= AdditionalAmount * -1
			LocalDescription					= "Batch " + ReceivablePaymentHeader + " additional amount"
			include CreateDistribution

			LocalTransactionAmount =  AdditionalAmount
			LocalTransactionSummaryAmount += LocalTransactionAmount


		CreateDistribution

			if (CurrencyMultiplicationOrDivision.Multiply)
				LocalAmountCompanyCurrency = (LocalAmount * CurrencyRate)
			else
				LocalAmountCompanyCurrency = (LocalAmount / CurrencyRate)

			invoke CreatePaymentDistribution ReceivableGLDistribution
				invoked.FinanceEnterpriseGroup												= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.ReceivableCompanyDataGroup.TransactionCompany						= Company
				invoked.ReceivableCompanyGroup.OriginCompany								= Company
				invoked.BatchNumber															= ReceivablePaymentHeader
				if (LocalReceivablePayment entered)
					invoked.AccumulationType												= "D"
					invoked.DocumentNumber													= "6-" + PaymentHeaderString + "-" + LocalReceivablePayment.PaymentString
				else
					invoked.AccumulationType												= "S"
					invoked.DocumentNumber													= "5-" + PaymentHeaderString

				if (LocalDistribType.Cash)
					invoked.ReceivableGLDistribution.GeneralLedgerAccount					= CompanyCashCodeRel.CashAccount
					if (Company.FinanceEnterpriseGroup.FundAccounting)
						invoked.TransientUpdateCashCodeFund									= true
					invoked.BypassStructureRelationEdit									= true 
					invoked.TransientNonARCashOffset									= true	
				else
				if (LocalDistribType.RNA)
					invoked.ReceivableGLDistribution.GeneralLedgerAccount					= LocalRNACode.DistributionAccount
					invoked.BypassStructureRelationEdit	 								= true 
				else
					invoked.ReceivableGLDistribution.GeneralLedgerAccount					= AdditionalAmountAccount

				if (LocalDescription entered)
					invoked.Description														= LocalDescription
				else
					invoked.Description														= "Batch " + ReceivablePaymentHeader + " cash entry"

				invoked.ReceivableCompanyGroup.GlCompany									= Company
				invoked.DistributionAmount.CurrencyAmount									= LocalAmount
				invoked.OriginalCurrency													= Currency
				invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate				= CurrencyRate
				invoked.Status																= 2
				invoked.GeneralLedgerDate													= GeneralLedgerDate
				invoked.BypassActiveCodeBlockEdit											= LocalBypassActiveCodeBlockEdit		
















			initialize LocalDescription


		UpdateTransactionSummary

			if  (LocalTransactionAmount entered)
				LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.PaymentsCharges
				if (!ReceivableTransactionSummaryRel exists)
					invoke Create ReceivableTransactionSummaryRel
				invoke AddAmount ReceivableTransactionSummaryRel
					if (LocalTransactionAmount < 0)
						invoked.Amount		= LocalTransactionAmount
					else
						invoked.Amount		= LocalTransactionAmount * -1


		ProcessOneSource
			if 	(TaxEntityUsesOneSource
			and (BackgroundProcessing.NotProcessingInBackground
			or	BackgroundProcessing.ReleaseFailure))

				ErrorMessage			= blank

				if (invoking action = "ReleaseOpenBatchUnreleased"
				and OriginatingInterfaceRun entered)
					BackgroundProcessing = BackgroundProcessing.ReleaseInProcess
				else
				if (invoking action != "ReleaseOpenBatchUnreleased"
				or	!NonARPaymentsOneSourceTaxableRel exists)
					BackgroundProcessing = BackgroundProcessing.ReleaseInProcess
				else
					invoke EditReceivablePaymentHeaderForOneSource
					BackgroundProcessing = BackgroundProcessing.TaxProcessing
					invoke CreateTaxLineItemsNonARPayments ReceivablePayment 
						invoked.PrmCompany			= Company
						invoked.PrmHeader			= ReceivablePaymentHeader
						invoked.PrmReleaseBatch		= true
			else
			if (TaxEntityUsesOneSource)
				constraint (!BackgroundProcessing.TaxProcessing)
					"TaxProcessingIsAlreadyOngoing"
				constraint ((invoking action = "ReceivablePayment.ProcessOneSourceForNonARPayments"
				or			 invoking action = "ReceivableNonARPaymentImport.ProcessOneSourceInterfaceNonARPayments")
				and			 BackgroundProcessing.ReleaseInProcess)
					"ReleaseIsStillProcessingInTheBackground"
				LocalPreEditRelease		= true		


		ProcessVertex
			if 	(CallVertexByTransaction
			and (BackgroundProcessing.NotProcessingInBackground
			or	BackgroundProcessing.ReleaseFailure))

				ErrorMessage			= blank

				if (invoking action = "ReleaseOpenBatchUnreleased"
				and OriginatingInterfaceRun entered)
					BackgroundProcessing = BackgroundProcessing.ReleaseInProcess
				else
				if (invoking action != "ReleaseOpenBatchUnreleased"
				or	!NonARPaymentsVertexTaxableRel exists)
					BackgroundProcessing = BackgroundProcessing.ReleaseInProcess
				else

					BackgroundProcessing = BackgroundProcessing.TaxProcessing
					invoke VertexCreateTaxLineItemsNonARPayments ReceivablePayment 
						invoked.PrmCompany			= Company
						invoked.PrmHeader			= ReceivablePaymentHeader
						invoked.PrmReleaseBatch		= true
			else
			if (CallVertexByTransaction)
				constraint (!BackgroundProcessing.TaxProcessing)
					"TaxProcessingIsAlreadyOngoing"
				constraint ((invoking action = "ReceivablePayment.ProcessVertexForNonARPayments"
				or			 invoking action = "ReceivableNonARPaymentImport.ProcessVertexInterfaceNonARPayments")
				and			 BackgroundProcessing.ReleaseInProcess)
					"ReleaseIsStillProcessingInTheBackground"
				LocalPreEditRelease		= true		

		ProcessTaxesForBatch
			include ProcessOneSource						
			include ProcessVertex

			if (TaxEntityUsesOneSource
			or  CallVertexByTransaction)
				if (BackgroundProcessing.ReleaseInProcess)
					LocalContinueRelease = true
				else
					LocalContinueRelease = false

		CashLedger
			if (LocalCashLedgerType.Header)
				LocalAmount											= DetailTotal
			else
			if (LocalCashLedgerType.BankCharges)
				LocalAmount											= AdditionalAmount

			if (LocalAmount entered)

				initialize CurrencyWork
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
				CurrencyWork.ExchangeDate								= DepositDate
				CurrencyWork.TransactionAmount							= LocalAmount
				CurrencyWork.FromCurrency								= Currency
				CurrencyWork.BaseAmount.ToCurrency						= CashCode.Currency







				invoke Unreleased.CreateFromReceivables CashLedgerTransaction
					assign result to LocalCashLedgerTransaction
					invoked.CashCode											= CashCode
					invoked.CashManagementGroup									= DepositBankCode.CashManagementGroup
					if (LocalCashLedgerType.Header)
						invoked.BankTransactionSign								= "CR"
						if (ReceivablePaymentHeader.DepositBankCode entered)
							invoked.BankTransactionCode							= DepositBankCode
						else
							invoked.BankTransactionCode							= Company.DepositBankCode
						invoked.Description										= "Payment Released"
					else
					if (LocalCashLedgerType.BankCharges)
						invoked.BankTransactionSign								= "DR"
						invoked.BankTransactionCode								= Company.DepositAdjustmentBankCode
						invoked.Description 									= "Batch " + ReceivablePaymentHeader + " Additional Charges"
					invoked.IssueTranAmt										= LocalAmount
					invoked.BankAccountCurrencyExchangeRate						= CurrencyWork.BaseAmount.OutputCurrencyRate
					invoked.IssuedBankAmount	 								= CurrencyWork.BaseAmount.OutputCurrencyAmount
					invoked.BankTransactionType									= "B"
					invoked.Currency   					 						= CashCode.Currency
					invoked.TransactionNumber									= DerivedCashLedgerTransactionNumber
					invoked.TransactionNumberSuffix								 = 0
					invoked.SourceCode											= "AR"
					invoked.Company												= Company
					invoked.ReceivablesCompanyProcessLevel.ReceivableCompany	 = Company
					invoked.IssueDate											= DepositDate
					invoked.GeneralLedgerPostDate		 						= GeneralLedgerDate
					invoked.TransactionCurrencyNumberOfDecimals 				= CurrencyDecimalsNumber
					invoked.BaseCurrencyNumberOfDecimals						= Company.BaseNumberOfDecimals


					if (Reference entered)		
						invoked.Reference									= Reference
					else
						invoked.Reference									= ReceivablePaymentHeader


					invoked.CurrencyTable									= CurrencyTable
					invoked.TransactionData1								= CbUserField1		
					invoked.TransactionData2								= CbUserField2		
					invoked.TransactionData3								= CbUserField3		
					invoked.TransactionData4								= CbUserField4		

				if (LocalCashLedgerType.Header)
					TransactionIDNumber										= LocalCashLedgerTransaction.CashLedgerTransaction
				else
				if (LocalCashLedgerType.BankCharges)
					AdjustmentTransactionIDNumber							= LocalCashLedgerTransaction.CashLedgerTransaction
					DepositAdjustmentBankCode								= Company.DepositAdjustmentBankCode



		TriggerDebitTransferRules

			trigger PayablesService.DebitTransferService PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from ReceivablePaymentHeader
					include persistent fields from Company
					include persistent fields from TaxEntityRel.TaxEntity
					include persistent fields from CashCode


					include persistent fields from Company.AccountingEntity.AddressCode
					bod id.VariationID
						variable name is VariationId
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					LocalReceivablePaymentPaymentCount
						variable name is ReceivablePaymentPaymentCount
					LocalReceivableInvoice
						variable name is ReceivableInvoiceList
					CashCode.SwiftID
						variable name is CashCodeBIC
					LocalBatchNumber
						variable name is BatchNumber
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity
					Company
						variable name is ReceivableCompany
					LocalPaymentType
						variable name is EFTPaymentType


		SumReceivablePaymentsWithSameRNACodeRelAmounts	
			if (!SumOfReceivablePaymentsWithSameRNACodeRelAmountsDone)	
				initialize SumOfReceivablePaymentsWithSameRNACodeRelTransactionAmount	
					for each ReceivablePaymentsWithSameRNACodeRel
						SumOfReceivablePaymentsWithSameRNACodeRelTransactionAmount	 += each.TransactionAmount	
				SumOfReceivablePaymentsWithSameRNACodeRelAmountsDone = true	


		CreateReceivablePaymentHeader
			invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
				assign result to NewReceivablePaymentHeader
				invoked.Company					= Company






				invoked.BatchCount				= 1
				invoked.Reference				= LocalThirdPartyPaymentProcessingResponseTransactionId
				invoked.BatchTotal				= LocalThirdPartyPaymentProcessingTransactionAmount







			invoke Unreleased.CreateCustomerPayment ReceivablePayment
				assign result to NewReceivablePayment
				invoked.Company						= Company
				invoked.ReceivablePaymentHeader		= NewReceivablePaymentHeader
				invoked.Customer					= LocalThirdPartyPaymentProcessingCustomerId
				invoked.PaymentNumber				= 1
				invoked.TransactionAmount			= LocalThirdPartyPaymentProcessingTransactionAmount




	Derived Fields

		CountMsg is a MessageField
			"Control"

		EntryMsg is a MessageField
			"Entry"

		DifferenceMsg is a MessageField
			"Difference"

		PaymentHeaderTitleWithRecord is a LabelField
			"ReceivablePaymentBatch<ReceivablePaymentHeader>forCompany<Company.RepresentativeText>"	

		PaymentHeaderTitleNoRecord is a LabelField
			"ReceivablePaymentBatch"

		PaymentHeaderTitle is a DerivedField
			type is MessageField
			if (RecordExists)
				return PaymentHeaderTitleWithRecord
			else
				return PaymentHeaderTitleNoRecord

		DerivedDetailCount is a DerivedField
			type is Decimal size 5
			return DetailCount


		DerivedDetailTotal is a DerivedField
			type is like InternationalAmount
			return DetailTotal


		PaymentsExistMessage is a MessageField
			restricted
			"CannotBeChanged.PaymentsExist"


		CountDifference is a ComputeField
			type is Decimal size 5
			(BatchCount - DetailCount)


		TotalDifference is a DerivedField
			type is like InternationalAmount
				precision is Currency.NumberOfDecimals
			return (BatchTotal - DetailTotal)


		PaymentHeaderAlpha is a MessageField

			restricted
			"<ReceivablePaymentHeader>"


		PaymentHeaderString is a StringField
			type is Alpha size 12 
			restricted
			PaymentHeaderAlpha[1:12] 


		SumOfPaymentsWithSameRNACode is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivablePaymentsWithSameRNACodeRelAmounts	

			return (SumOfReceivablePaymentsWithSameRNACodeRelTransactionAmount)	


		PaymentGLEndDate is a DerivedField
			type is Date
			restricted
			return (first GLClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)


		PaymentGLYear is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodRel.GeneralLedgerCloseYear)


		PaymentGLPeriod is a DerivedField
			type is Alpha 25
			restricted
			return (first GLClosePeriodRel.PeriodName)



		CountMessage is a MessageField
			"Count"
		AmountMessage	is a MessageField
			"Amount"




		DerivedDelimiter is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedDebitTransferProcessMethod is a DerivedField
			type is Boolean
			restricted
			LocalConfigurationParameter	= "DebitTransferProcessMethod"
			if(FSMBODConfigurationParameterRel exists)
				if(FSMBODConfigurationParameterRel.Value = "B")
					return true

		DerivedDebitTransferBatchCounterValue is a DerivedField
			type is Numeric size 9
			restricted
			LocalConfigurationParameter	= "DebitTransferBatchCounter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedDebitTransferBatchCounter is a DerivedField
			type is Numeric size 9
			restricted
			if (DerivedDebitTransferBatchCounterValue > 0)
				return DerivedDebitTransferBatchCounterValue
			else
				return 100


		BODActionCode is a DerivedField
			type is Alpha 10
			restricted
			return "Add"

		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		DerivedLocation is a DerivedField
			type is AlphaUpper size 22
			restricted
			return ""

		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCurrentTimeStamp = system current timestamp
			return BODCurrentTimeStamp

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14]

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		DerivedCompanyName is a DerivedField
			type is Alpha size 80
			restricted
			return Company.Name

		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity

		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity

		DerviedReceivablePaymentHeader is a DerivedField
			type is Numeric 6
			restricted
			return ReceivablePaymentHeader using "%d"

		BODDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return Company using "%d" + DerivedDelimiter + DerviedReceivablePaymentHeader

		DerivedBODID is a DerivedField
			type is Alpha 100
			restricted
			if(DerivedDebitTransferProcessMethod)
				return LocalBODID
			else
				return "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + BODDocumentID + ":" + "?DebitTransfer&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedBatchID is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedDebitTransferProcessMethod)
				return	DerivedLogicalID +":" + DerviedReceivablePaymentHeader
			else
				return ""

		BODStatusCode is a DerivedField
			type is Alpha size 10
			restricted
			return "Open"

		DerivedAuthorizationID is a DerivedField
			type is Numeric 5
			restricted
			return CashCode.FinancialInstitutionBranch.AuthorizationID

		DerivedReceivablePaymentCount is a DerivedField
			type is Numeric 9
			restricted
			return instance count of ReceivablePaymentsRel

		DerivedItalySchemaName	is a DerivedField
			type is Alpha size 60
			restricted
			return "CountryIdentificationNumber"

		DerivedTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			return TaxEntityRel.TaxEntity.TaxID

		DerivedTaxEntityVatRegistrationNumber is a DerivedField
			type is AlphaUpper size 25
			restricted
			return TaxEntityRel.TaxEntity.VATRegistrationNumber

		DerivedPaymentTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(LocalBODPaymentType = "P")
				if(DerivedTaxEntityVatRegistrationNumber != "")
					return DerivedTaxEntityVatRegistrationNumber
				else
					return DerivedTaxID
			else
				return DerivedTaxID

		DerivedItalyTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(Company.AccountingEntity.AddressCode.PostalAddress.Country = "IT")
				return DerivedTaxID

		DerivedTaxIDScheme is a DerivedField
			type is Alpha size 60
			restricted
			return "TaxIdentificationNumber"

		DerivedBankIDSchema is a DerivedField
			type is Alpha size 60
			restricted
			if(Company.AccountingEntity.AddressCode.PostalAddress.Country = "SE" or Company.AccountingEntity.AddressCode.PostalAddress.Country = "NO")
				return DerivedItalySchemaName
			else
				return ""

		DerivedBankClientIdentifier is a DerivedField
			type is AlphaUpper 50
			restricted
			return CashCode.FinancialInstitutionBranch.BankClientIdentifier

		DerivedCountrySpecificID is a DerivedField
			type is AlphaUpper 50
			restricted
			if(Company.AccountingEntity.AddressCode.PostalAddress.Country = "SE")
				return DerivedTaxID
			else
				return DerivedBankClientIdentifier

		DerivedCompanyAddressLine1 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCompanyAddressLine2 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCompanyAddressLine3 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCompanyAddressLine4 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCompanyMunicipality	is a DerivedField
			type is Alpha 58
			restricted
			return Company.PostalAddress.Municipality

		DerivedCompanyStateProvince is a DerivedField
			type is Alpha 58
			restricted
			return Company.PostalAddress.StateProvince

		DerivedCompanyPostalCode is a DerivedField
			type is Alpha 10
			restricted
			return Company.PostalAddress.PostalCode

		DerivedCompanyCountry is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.PostalAddress.Country

		DerivedCCFinancialInstitution is a DerivedField
			type is AlphaUpper size 60
			restricted
			return CashCode.FinancialInstitution

		DerivedCashCodeID	is a DerivedField
			type is Alpha size 60
			restricted
			return CashCode + DerivedDelimiter + DerivedCCFinancialInstitution

		DerivedSwiftID is a DerivedField
			type is AlphaUpper size 12
			restricted
			return CashCode.SwiftID

		DerivedTransferMethod	is a DerivedField
			type is Alpha 10
			restricted
			return "DD"

		DerivedCompanyCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.Currency

		DerivedOrignalCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Currency

		DerivedDistributionCount is a DerivedField
			type is Numeric 6
			restricted
			return instance count of PaymentBatchDistributionsRel

		DerivedEFTPaymentType is a DerivedField
			type is Alpha size 50
			restricted
			if(EFTLocalPaymentType = "YES")
				return "EFT Payment"

		DerivedIsUnreleased is a DerivedField  
			type is Alpha 3
			if (IsUnreleased)
				return "Yes"

		DerivedHasUnpostedDistributions is a DerivedField  
			type is Alpha 3
			if (HasUnpostedDistributions)
				return "Yes"

		DerivedHasUnreleasedRTMs is a DerivedField  
			type is Alpha 3
			if (HasUnreleasedRTMs)
				return "Yes"

		DerivedHasReverseDetail is a DerivedField  
			type is Alpha 3
			if (HasReverseDetail)
				return "Yes"

		DerivedHasARtoAPSelect is a DerivedField  
			type is Alpha 3
			if (HasARtoAPSelect)
				return "Yes"

		DerivedHasPendingApplications is a DerivedField  
			type is Alpha 3
			if (HasPendingApplications)
				return "Yes"

		DerivedHasUnpostedApplications is a DerivedField  
			type is Alpha 3
			if (HasUnpostedApplications)
				return "Yes"


		DebitTransferPaymentHeaderXML is a DerivedField
			type is XMLDocument
			restricted
			DebitTransferPaymentHeaderXML = template.IONSyncDebitTransferXML_ReceivablePaymentHeader_ST document for this instance


		DebitTransferPaymentHeaderBatchXML is a DerivedField
			type is XMLDocument
			restricted
			DebitTransferPaymentHeaderBatchXML = template.IONSyncDebitTransferXML_ReceivablePaymentHeader_Batch_ST document for this instance


		DebitTransferPaymentXML is a DerivedField
			type is XMLDocument
			restricted
			if(ReceivablePaymentsRel exists)
				initialize LocalSequence
				for each ReceivablePaymentsRel
					LocalSequence +=1
					LocalBODPaymentType					= each.TypeOfPayment
					each.LocalOriginalCurrency 			= DerivedOrignalCurrency
					each.LocalCountrySpecificID 		= DerivedCountrySpecificID
					each.LocalReceivablePaymentCount 	= DerivedReceivablePaymentCount
					each.LocalTaxID						= DerivedPaymentTaxID
					each.LocalItalyTaxID 				= DerivedItalyTaxID
					each.LocalReceivablePaymentHeader 	= DerviedReceivablePaymentHeader
					each.LocalBODVariationID			= BODVariationID
					each.LocalDistSequence				= LocalSequence
					if(each.Customer entered)
						each.LocalDebtorPartyXML = template.IONDebtorPartyPaymentXML_ReceivablePaymentHeader_ST document for each
					else
						LocalDebtorPartyXML = ""
					DebitTransferPaymentXML += template.IONDebitTransferPaymentXML_ReceivablePayment_ST document for each
				return DebitTransferPaymentXML

		DerivedCashLedgerTransactionReference is a DerivedField
			type is like Reference
			restricted
			if (Reference entered)
				return Reference
			else
				return ReceivablePaymentHeader

		DerivedCashLedgerTransactionNumber is a DerivedField
			type is like TransactionNumber
			restricted
			return ("AR-" + PaymentHeaderString)

		BatchAndCompanyTitleWithRecord is a LabelField	
			"-_Batch<ReceivablePaymentHeader>forCompany<Company>_-_<Company.Name>"

		BatchAndCompanyTitle is a DerivedField	
			type is MessageField
			return BatchAndCompanyTitleWithRecord
		
		BatchPrinterMsg is a MessageField
			"TheTransactionPrinterWillBeUsedIfBatchPrinterIsNotEntered."


	Relations
		EFTReceivableInvoiceRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
			Instance Selection
				where (related.HasEFTRelatedApplicationSelect)


		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AR"
				related.Company						= Company

		GLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date > GeneralLedgerDate)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company

		ReceivablePaymentsRel
			classic name is AR-PYMNT-DETLS
			one-to-many relation to ReceivablePayment
			delete cascades
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader

		CustomerPaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
				related.TypeOfPayment				= "P"

		CashNonArPaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
				related.TypeOfPayment				= "N"

		NonARPaymentsOneSourceTaxableRel
			one-to-many relation using CashNonArPaymentsRel
			Instance Selection
				where (related.HasOneSourceTaxableDistributions)

		NonARPaymentsVertexTaxableRel
			one-to-many relation using CashNonArPaymentsRel
			Instance Selection
				where (related.HasVertexTaxableDistributions)








		ReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany	= Company
				related.CreditTransaction.CreditBatch	= ReceivablePaymentHeader

		ReceivableOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableOperator			= ReceivableOperator








		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company 				= Company
				related.CashCode				= CashCode










		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= LocalReceivableTransactionSummary

		PaymentBatchDistributionsRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	= Company
				related.BatchNumber										= ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.Payment
				and	related.DistributionSource.AccountsReceivable)

		GLDistributionsNotToPurgeRel
			one-to-many relation using PaymentBatchDistributionsRel
			Instance Selection
				where (related.IsProjectSetNotToAllowPurge)
		
		UnpostedPaymentBatchDistributionsRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	= Company
				related.BatchNumber										= ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.Payment
				and	!related.Status.Posted)

		ReceivablePaymentDistributionsRequiringCustodialAccountRel			
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	= Company
				related.BatchNumber										= ReceivablePaymentHeader
			Instance Selection
				where (related.Origin.Payment
				and	   !related.Status.Posted
				and	   related.DistributionSource.AccountsReceivable
				and    related.CustodialAccountRequiredForFund)

		ReceivablePaymentsWithSameRNACodeRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company													= Company
				related.ReceivablePaymentHeader									= ReceivablePaymentHeader
			Instance Selection
				where (related.ReceivedNotAppliedReceivableGeneralLedgerCode	= ReceivedNotAppliedReceivableGeneralLedgerCode
				and	!related.TypeOfPayment.NonArPayment)

		ReceivablePaymentsWithDifferentRNACodeRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.ReceivablePaymentHeader					= ReceivablePaymentHeader
			Instance Selection
				where (related.ReceivedNotAppliedReceivableGeneralLedgerCode		!= ReceivedNotAppliedReceivableGeneralLedgerCode)

		CashLedgerTransactionRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByReference
				related.CashManagementGroup						= CashCode.CashManagementGroup	
				related.CashCode								= CashCode
				related.Reference								= DerivedCashLedgerTransactionReference
			Instance Selection
				where (related.SourceCode						= "AR"
				and	   related.Company			 				= Company
				and    related.TransactionNumber				= DerivedCashLedgerTransactionNumber)





















		ARToAPApplicationSelectRel
			classic name is ARAPSELECT
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses symbolic key
				related.Company							 = Company
			Instance Selection
				where (related.ARToAPApplicationSelect.BatchNumber = ReceivablePaymentHeader)

		ReceivablePaymentApplyReverseDetailRel
			classic name is ARPMTRVDTL
			one-to-many relation to ReceivablePaymentApplyReverseDetail
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivablePaymentApplyReverseDetail.CreditCompany = Company
				and	related.ReceivablePaymentApplyReverseDetail.CreditBatchNumber = ReceivablePaymentHeader)

		RTMPaymentRel
			classic name is ARRTM1
			one-to-many relation to RTMPayment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivablePaymentHeader 	= ReceivablePaymentHeader

		UnreleasedRTMPaymentRel
			one-to-many relation to RTMPayment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivablePaymentHeader 	= ReceivablePaymentHeader
			Instance Selection
				where (related.Status.UnreleasedRtm)

		ReceivableApplicationSelectRel
			classic name is ARSAPPLIED
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set3
				related.Company					 = Company
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader

		ReceivableInvoiceApplyReverseDetailRel
			classic name is ARTRNRVDTL
			one-to-many relation to ReceivableInvoiceApplyReverseDetail
			delete restricted
			Field Mapping uses Set2
				related.CreditCompany		 = Company
				related.CreditBatchNumber	 = ReceivablePaymentHeader

		UnpostedReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany  = Company
				related.CreditTransaction.CreditBatch	= ReceivablePaymentHeader
			Instance Selection
				where (!related.Status.ApplicationPosted)

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				= GeneralLedgerCompanyRel.AccountingEntity

		TaxConfigurationRel
			one-to-one relation to TaxConfiguration
			Field Mapping uses symbolic key
				related.TaxConfiguration			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		ReceivableLockBoxRel
			one-to-many relation to ReceivableLockBox
			Field Mapping uses ByCompanyProcessLevel
				related.Company			= Company

		KeyReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= actor.context.FinanceEnterpriseGroup
				related.ReceivableLockBox				= ReceivableLockBox

		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company

		NonHistoricalReceivablePaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader
			Instance Selection
				where (related.Status != 9)

		HistoricalReceivablePaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader
			Instance Selection
				where (related.Status = 9)


		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "DebitTransfer"
				related.FSMBODConfiguration.Direction 	= 1



		CashManagementAccountLegalEntityWithThirdPartyPaymentPortalProcessLevelRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.LegalEntity				= Company
				and related.ThirdPartyPaymentProcessingReceivableProcessLevel exists)

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker	= LocalFSMInboundBODTracker

		PaymentReceiptForIDMEmailOrPrintRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
			Instance Selection
				where	(related.IsValidForIDMEmailOrPrint)

		PaymentReceiptForIDMGenerationRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
				related.TypeOfPayment				= "P"
			Instance Selection
				where	(related.Customer entered
				and      related.ValidForIDMActions)

		GeneralLedgerCompanyGroupMembersRel
            one-to-many relation to GeneralLedgerCompanyGroupMember
            Field Mapping uses Set2
                related.GeneralLedgerCompanyGroup = LocalGeneralLedgerCompanyGroup
	
	Sets
		Set2
			indexed
			Instance Selection
				where (IsUnreleased)
			Sort Order
				Company
				ReceivablePaymentHeader

		Set3
			indexed
			Sort Order
				Company
				GeneralLedgerDate
				ReceivablePaymentHeader

		Set4
			indexed
			Instance Selection
				where (IsDepositBankCode)
			Sort Order
				Company
				ReceivablePaymentHeader
				DepositBankCode
				TransactionIDNumber

		Set5
			indexed
			Instance Selection
				where (IsAdjustBankCode)
			Sort Order
				Company
				ReceivablePaymentHeader
				DepositAdjustmentBankCode
				AdjustmentTransactionIDNumber

		Set6
			indexed
			Sort Order
				Company
				ReceivablePaymentHeader descending



	Conditions
		CashLedgerStatementInProcess



			restricted
			when (CashLedgerStatement entered
			and   DetailTotal > 0)

		RecordExists
			restricted
			when (ReceivablePaymentHeader exists)

		PaymentsExist
			restricted
			when (ReceivablePayment set exists)

		HasBatchDistributions
			restricted
			when (PaymentBatchDistributionsRel exists)

		IsUnreleased
			restricted
			classic name is APHSET2
			when (Status.OpenBatchUnreleased)

		IsDepositBankCode
			restricted
			classic name is APHSET4
			when (DepositBankCode entered)

		IsAdjustBankCode
			restricted
			classic name is APHSET5
			when (DepositAdjustmentBankCode entered)

		IsLockBox
			restricted
			classic name is AR-LOCK-BOX
			when (ReceivableLockBox entered)

		IsOperator
			restricted
			classic name is AROPTR
			when (ReceivableOperator entered)

		IsReleased
			restricted
			when (Status.ReleasedBatch)

		TotalsDoNotMatch
			restricted
			when (BatchTotal != DetailTotal)

		CountsDoNotMatch
			restricted
			when (BatchCount != DetailCount)

		HasCustomerPayments
			restricted
			when (CustomerPaymentsRel exists)

		HasRTMs
			restricted
			when (first RTMPaymentRel exists)

		HasUnreleasedRTMs
			restricted
			when (first UnreleasedRTMPaymentRel exists)

		HasReverseDetail
			restricted
			when (first ReceivablePaymentApplyReverseDetailRel exists)

		HasReceivableInvoiceReverseDetail
			restricted
			when (first ReceivableInvoiceApplyReverseDetailRel exists)

		HasARtoAPSelect
			restricted
			when (first ARToAPApplicationSelectRel exists)

		HasPendingApplications
			restricted
			when (first ReceivableApplicationSelectRel exists)

		HasUnpostedDistributions
			restricted
			when (first UnpostedPaymentBatchDistributionsRel exists)

		WithinCashExceptionFilter
			restricted
			when ((DepositDateRange not entered
			or	 DepositDate within DepositDateRange)
			and   (PostingDateRange not entered
			or	 GeneralLedgerDate within PostingDateRange))

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank
			or	   CompanySecurityGroupMemberRel exists)

		HasUnpostedApplications
			restricted
			when (UnpostedReceivableApplicationRel exists)

		HasApplications
			restricted
			when (ReceivableApplicationRel exists)

		IsPaymentExists
			restricted
			when (ReceivablePaymentsRel exists and PaymentsExist)

		TaxEntityUsesOneSource
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		CallVertexByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction) 

		AllowSelectDistributionSet 
			restricted
			when (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
			and   Company.SelectFundDistributionSet)


		FrontEndSplitsEnabled
			restricted
			when (Company.FinanceEnterpriseGroup.FrontEndSplits)

		ExecuteNonARCashFrontEndSplits
			restricted
			when (FrontEndSplitsEnabled)
		

		IsValidForBatchGenerate
			restricted
			when (IsReleased
			and   Company.UseIDM
			and   PaymentReceiptForIDMGenerationRel exists)

		IsValidForIDMEmailOrPrint
			restricted
			when (PaymentReceiptForIDMEmailOrPrintRel exists)





	Create Rules

		if (DepositDate not entered)
			DepositDate = current corporate date

		if (GeneralLedgerDate not entered)
			GeneralLedgerDate = DepositDate



	StateCycles
		ReceivablePaymentHeaderLifeCycle is a StateCycle

			state field is Status

			OpenBatchUnreleased is a State

				Create is a Create Action
					Entrance Rules




					Action Rules
						constraint (!ReceivableApplicationRel exists)
							"BatchNumberStillInUseForApplicationRecord"





				CreateFromPortal is a Create Action	
					restricted
					Action Rules
						constraint (!ReceivableApplicationRel exists)
							"BatchNumberStillInUseForApplicationRecord"










				Update is an Update Action
					Entrance Rules




					Action Rules
						if (CurrencyRate entered
						and PaymentsExist)
							constraint (CurrencyRate = old CurrencyRate)
								"RateCannotBeChanged-PaymentsExist"

					Exit Rules
						if (DepositDate changed or CurrencyRate changed or GeneralLedgerDate changed)
							invoke Unreleased.DateOrRateChange ReceivablePayment set


				Delete is a Delete Action
					Entrance Rules
						if (ReceivablePayment set exists)
							confirmation required
								"All_Customer_Payments_and_Non_AR_Payments_with_its_Distributions_for_this_Batch_will_be_deleted.Continue?"	



						for each ReceivablePayment set
							invoke Unreleased.Delete each


						for each PaymentBatchDistributionsRel
							invoke Delete each

					Action Rules


				Release is an Instance Action
					Action Rules
						LocalContinueRelease = true

						include ProcessTaxesForBatch

						if (LocalContinueRelease)	

							if (Company.FinanceEnterpriseGroup.FundAccounting
							and ReceivablePaymentDistributionsRequiringCustodialAccountRel exists		
							and Origin.Manual) 
								confirmation required
									"OneOrMoreDistributionsMayRequireCustodialAccount;Continue?"
							if (initiating action = "ElectronicFundsTransferTransaction.EFTPaymentCreation")		
								LocalBypassActiveCodeBlockEdit = true

							initialize LocalTransactionSummaryAmount
							LocalBackgroundGroup = "ReceivablePaymentHeader-ReleaseBatch-" + Company + "-" + ReceivablePaymentHeader + "-" + current timestamp

							include ReleaseEdits
							if (ExecuteNonARCashFrontEndSplits)
								invoke FrontEndSplitNonARCashDistributions CashNonArPaymentsRel
							if (OriginatingInterfaceRun entered
							or  LocalPreEditRelease)
								invoke EditRelease CustomerPaymentsRel
								invoke EditRelease CashNonArPaymentsRel

							LocalCashLedgerType = LocalCashLedgerType.Header
							include CashLedger

							if (OriginatingInterfaceRun entered
							or  Origin = "E")
								invoke ReleaseBatchPayments ReceivablePayment in background group (LocalBackgroundGroup)
									invoked.PrmCompany			= Company
									invoked.PrmHeader			= ReceivablePaymentHeader
							else
								invoke Release CustomerPaymentsRel
								invoke Release CashNonArPaymentsRel

							if (Company.FinanceEnterpriseGroup.FundAccounting
							and CashNonArPaymentsRel exists)
								include BatchReleaseFundDistributions
							else
								if (Company.DetailGLTransPerPayment.YesDetailAccrualInterfacing)
									include BatchReleaseDetailDistributions
								else
									include BatchReleaseSummaryDistributions

							if (AdditionalAmount entered)
								include BankChargeDistributions
								LocalCashLedgerType = LocalCashLedgerType.BankCharges
								include CashLedger

							LocalTransactionAmount = LocalTransactionSummaryAmount
							include UpdateTransactionSummary

					Exit Rules
						if (LocalContinueRelease) 

							if (BackgroundProcessing.ReleaseInProcess)
								BackgroundProcessing = BackgroundProcessing.NotProcessingInBackground

							make transition to ReleasedBatch
							if(Company.DetailGLTransPerPayment.NoDetailAccrualInterfacing)
								increment bod id.VariationID
							
							if (Company.UseIDM
							and Company.GenerateIDMPaymentReceiptUponRelease

							and invoking action != "ReceivablePortalPaymentHeader.CreateReceivablePaymentHeaderInstanceAction")

								invoke BatchGenerateIDMPaymentReceiptsInBackground in background
									run after background group (LocalBackgroundGroup)	




			ReleasedBatch is a State

				CreateReleasedBatch is a Create Action
					restricted


				Delete is a Delete Action   
					restricted
					Action Rules
						invoke Open.Delete ReceivablePayment set


				Purge is a Purge Action
					restricted



	Actions


		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity	is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation			is Alpha size 22
					default label is "Location"
				PrmDocumentID		is Alpha size 100
					default label is "DocumentID"
				PrmRevision			is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord	is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity		!= PrmAccountingEntity)
					bod id.AccountingEntity		= PrmAccountingEntity
				if (bod id.Location				!= PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID			!= PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision				!= PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord		!= PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord


		TriggerDebitTransferForNonArPayment is an Instance Action
			restricted
			Action Rules
				increment bod id.VariationID
				invoke FastUpdate UnpostedPaymentBatchDistributionsRel
					invoked.TransientBODTriggeredFlag = true



		TriggerDebitTransfer is an Instance Action 
			restricted
			Parameters
				PrmReceivableInvoice	is Alpha size 100
				PrmBatchNumber			is Numeric size 5
			Action Rules

				if (Company.FinanceEnterpriseGroup.BODTrigger and !LocalBODTrigger)

					LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+"  CO:"+Company+" RPH:"+ReceivablePaymentHeader

					increment bod id.VariationID
					ActionCode = ActionCode.Create
					LocalReceivablePaymentPaymentCount = instance count of ReceivablePaymentsRel
					LocalPaymentType = "YES"



					include TriggerDebitTransferRules
					LocalBODTrigger = true

		BODDataInitialLoadCriteriaReceivablePayment is a Set Action
			restricted
			Parameters
				PrmFromCompany						is a ReceivableCompany
				PrmToCompany						is a ReceivableCompany
				PrmFromReceivablePaymentHeader		is a ReceivablePaymentHeader
					context of PrmFromCompany
				PrmToReceivablePaymentHeader		is a ReceivablePaymentHeader
					context of PrmFromCompany
				PrmDateRange						is a DateRange
				PrmStatus							is Numeric size 1
			Instance Selection
				where  (((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and		((PrmToCompany entered
				and		  PrmToCompany >= Company)
				or		PrmToCompany not entered)
				and		((PrmFromReceivablePaymentHeader entered
				and		  PrmFromReceivablePaymentHeader <= ReceivablePaymentHeader)
				or		PrmFromReceivablePaymentHeader not entered)
				and		((PrmToReceivablePaymentHeader entered
				and		  PrmToReceivablePaymentHeader >= ReceivablePaymentHeader)
				or		PrmToReceivablePaymentHeader not entered)
				and		(DepositDate within PrmDateRange
				or		PrmDateRange not entered)
				and	 (Status.ReleasedBatch))

			Sort Order
			Action Rules
				Instance Rules
					if(Company.FinanceEnterpriseGroup.BODTrigger and ReceivablePaymentsRel.TypeOfPayment != "" and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
						if (!action type.Delete)
							if (action != "UpdateBODIdFields")
								LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+"  CO:"+Company+" RPH:"+ReceivablePaymentHeader
								increment bod id.VariationID
								ActionCode = ActionCode.Create
								if(first ReceivableApplicationRel.ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.EFTTransaction)
									LocalPaymentType = "YES"
								else
									LocalPaymentType = "NO"
								LocalReceivablePaymentPaymentCount = instance count of ReceivablePaymentsRel
								include TriggerDebitTransferRules






		UpdateBatchTotals is an Instance Action
			restricted
			Parameters
				Count						is Decimal size 5.0
				Amount						is an InternationalAmount
				AmountCompanyCurrency		is an InternationalAmount
				Detail 						is Boolean
				RNA							is Boolean
			Action Rules
				if (Detail)
					BaseCash				+= AmountCompanyCurrency
					DetailTotal				+= Amount
					DetailCount				+= Count
				if (RNA)
					BaseRna					+= AmountCompanyCurrency
					RnaTotal				+= Amount


		FastUpdate is an Update Action
			bypass field rules
			restricted

		TransitionBackgroundProcessing is an Instance Action
			restricted
			Parameters
				PrmBackgroundProcessing		is Numeric 1
				PrmErrorMessage				is Alpha 200
			Action Rules
				BackgroundProcessing	= PrmBackgroundProcessing
				ErrorMessage			= PrmErrorMessage


		EditReceivablePaymentHeaderForOneSource is an Instance Action
			restricted
			Action Rules

				constraint (TaxConfigurationRel.OneSourceVersionType.Generic)
					"One_\Source_\Version_\TypeMustBe_\Generic"

				constraint (ReceivableProcessLevel.PostalAddress entered
				or			Company.PostalAddress entered)
					"Company_\AddressIsRequiredIf_\Process_\Level_\AddressIsNotEntered"


		ReceivablePaymentHeaderRecordsPurge is a Set Action
			restricted
			Parameters
				PrmCompany 				is a ReceivableCompany
				PrmCompanyGroup			is a GeneralLedgerCompanyGroup
				PrmPaymentDate			is Date

			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterCompanyIfCompanyGroupEntered"
					
					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"

					if (PrmCompany not entered and PrmCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupIsRequired"

					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

					constraint (GeneralLedgerCompanyGroupMembersRel exists)
						"CompanyGroup<PrmCompanyGroup>ContainsNoCompanies"
					
					constraint (first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup.PurgeCutOffDate entered)
						"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup>"

				PrmPaymentDate

					initial value is actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					default to actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					
			Local Fields
				PurgePaymentHeader	is Boolean
				RecordCount			is Numeric 10
				PaymentCount		is Numeric 10
				TotalPaymentCount	is Numeric 10

			Instance Selection
				include deleted records
				where ((PrmCompany not entered or Company = PrmCompany)
				and   (PrmCompanyGroup not entered or GeneralLedgerCompanyGroupRel exists)
				and   (PrmPaymentDate entered and GeneralLedgerDate <= PrmPaymentDate)
				and	Status.ReleasedBatch)

			Sort Order
				Company
				ReceivablePaymentHeader descending




			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoReceivablePaymentBatchRecordsFoundToPurge"
						priority is high
						detail is "ReceivablePaymentBatchsPurged=<RecordCount>;ReceivablePaymentsPurged=<TotalPaymentCount>"
				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivablePaymentsPurgeHasCompleted"
							priority is high
							detail is "ReceivablePaymentBatchsPurged=<RecordCount>;ReceivablePaymentsPurged=<TotalPaymentCount>"

				ReceivablePaymentHeader Set Rules
					Exit Rules
						if (PurgePaymentHeader)
							invoke ReleasedBatch.Purge
							initialize PurgePaymentHeader
				Instance Rules
					if (GLDistributionsNotToPurgeRel not exists)
						if (any NonHistoricalReceivablePaymentsRel exists
						or  any UnpostedReceivableApplicationRel exists)
							PurgePaymentHeader = false
						else
							increment RecordCount
							PurgePaymentHeader = true
							PaymentCount = instance count of HistoricalReceivablePaymentsRel
							TotalPaymentCount += PaymentCount
							invoke HistoricalPaymentRecordsPurge HistoricalReceivablePaymentsRel
							invoke Purge ReceivablePaymentHeaderAttachment set

		TriggerDebitTransferForNativeLPL is an Instance Action
			restricted
			Parameters
				PrmTriggerFrom 			   	is Alpha size 100
				PrmRestartFlag  			 is Boolean
			Action Rules
				if(DerivedDebitTransferProcessMethod)
					LocalUserTemplate = "IONSyncDebitTransferXML_ReceivablePaymentHeader_Batch_ST"
				else
					LocalUserTemplate = "IONSyncDebitTransferXML_ReceivablePaymentHeader_ST"
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "DebitTransfer"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= PrmTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCompany 					= Company
					invoked.PrmAccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
					invoked.PrmMainUserTemplate			= LocalUserTemplate
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(PrmTriggerFrom="EFTPaymentCreation")
					increment bod id.VariationID
					EFTLocalPaymentType = "YES"
				LocalLPLBODTrigger=true
				RestartNativelpl = PrmRestartFlag
				if (Company.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(!DerivedDebitTransferProcessMethod)
						if(FSMInboundBODTracker not entered)
							invoke Create FSMInboundBODTracker
								assign result to NewBODTracker
								invoked.Verb 					= 1
								invoked.Noun 					= "DebitTransfer"
								invoked.BODDocumentID			= BODDocumentID
								invoked.BODVariationID			= BODVariationID
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.Direction				= 1
								invoked.BODAccountingEntity		= DerivedAccountingEntity
								invoked.Reference1				= Company
								invoked.Reference2				= ReceivablePaymentHeader
								invoked.Reference3				= PrmTriggerFrom
								initialize invoked.Error
								initialize invoked.ErrorMessage
							LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
						else
							LocalFSMInboundBODTracker			= FSMInboundBODTracker
							invoke Update FSMInboundBODTrackerRel
								invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.BODDocumentID			= BODDocumentID
								invoked.BODVariationID			= BODVariationID
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.Direction				= 1
								invoked.BODAccountingEntity		= DerivedAccountingEntity
								invoked.Reference1				= Company
								invoked.Reference2				= ReceivablePaymentHeader
								invoked.Reference3				= PrmTriggerFrom
								initialize invoked.Error
								initialize invoked.ErrorMessage
						invoke SendDebitTransferBODNativeLPL
							resume on error
								Error										= true
								LocalErrorMessage	 						= error message
						if(Error)
							invoke Update FSMInboundBODTrackerRel
								invoked.Error 								= Error
								invoked.ErrorMessage 						= LocalErrorMessage
								invoked.Status								= 2
								invoked.CloseDate							= system current timestamp
								invoked.BODXML								= DebitTransferPaymentHeaderXML
								invoked.BODID								= DerivedBODID
						else
							invoke Update FSMInboundBODTrackerRel
								invoked.Status									= 3
								invoked.CloseDate								= system current timestamp
								invoked.BODXML									= DebitTransferPaymentHeaderXML
								invoked.BODID									= DerivedBODID
					if(DerivedDebitTransferProcessMethod)
						LocalReceivablePaymentBatchCount = instance count of ReceivablePaymentsRel
						if(ReceivablePaymentsRel exists)
							initialize LocalLineCounter
							for each ReceivablePaymentsRel
								LocalLineCounter += 1
								LocalBatchCounter = LocalBatchCounter+1
								LocalCurrentReceivablePaymentBatchCount = LocalCurrentReceivablePaymentBatchCount + 1
								LocalBODPaymentType					= each.TypeOfPayment
								each.LocalOriginalCurrency 			= DerivedOrignalCurrency
								each.LocalCountrySpecificID 		= DerivedCountrySpecificID
								each.LocalReceivablePaymentCount 	= DerivedReceivablePaymentCount
								each.LocalTaxID						= DerivedPaymentTaxID
								each.LocalItalyTaxID 				= DerivedItalyTaxID
								each.LocalReceivablePaymentHeader 	= DerviedReceivablePaymentHeader
								each.LocalBODVariationID			= BODVariationID
								each.LocalLineCounter				= LocalLineCounter
								if(each.Customer entered)
									each.LocalDebtorPartyXML = template.IONDebtorPartyPaymentXML_ReceivablePaymentHeader_ST document for each
								else
									LocalDebtorPartyXML = ""
								LocalDebitTransferPaymentBatchXML += template.IONDebitTransferPayment_ReceivablePayment_Batch_XML_ST document for each
								if (LocalBatchCounter = DerivedDebitTransferBatchCounter)
									LocalDebitTransferBatchTrackerXML += LocalDebitTransferPaymentBatchXML
									LocalBatchSequence = LocalBatchSequence + 1
									if(FSMInboundBODTracker not entered and FSMInboundBODTrackerRel not exist)
										invoke Create FSMInboundBODTracker
											assign result to NewBODTracker
											invoked.Verb 					= 1
											invoked.Noun 					= "DebitTransfer"
											invoked.BODDocumentID			= BODDocumentID
											invoked.BODVariationID			= BODVariationID
											invoked.Status					= 1
											invoked.StartDate				= system current timestamp
											invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.Direction				= 1
											invoked.BODAccountingEntity		= DerivedAccountingEntity
											invoked.Reference1				= Company
											invoked.Reference2				= ReceivablePaymentHeader
											invoked.Reference3				= PrmTriggerFrom
											initialize invoked.Error
											initialize invoked.ErrorMessage
										LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
									else
										if(FSMInboundBODTrackerRel exist)
											LocalFSMInboundBODTracker		= FSMInboundBODTrackerRel.FSMInboundBODTracker
										else
											LocalFSMInboundBODTracker		= FSMInboundBODTracker
										invoke Update FSMInboundBODTrackerRel
											invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.BODDocumentID			= BODDocumentID
											invoked.BODVariationID			= BODVariationID
											invoked.Status					= 1
											invoked.StartDate				= system current timestamp
											invoked.Direction				= 1
											invoked.BODAccountingEntity		= DerivedAccountingEntity
											invoked.Reference1				= Company
											invoked.Reference2				= ReceivablePaymentHeader
											invoked.Reference3				= PrmTriggerFrom
											initialize invoked.Error
											initialize invoked.ErrorMessage
									if(LocalReceivablePaymentBatchCount = LocalCurrentReceivablePaymentBatchCount)
										LocalLastBatch = true
										LocalBODID =  "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + BODDocumentID + ":" +"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID+"&batchSize="+LocalBatchSequence  + "?DebitTransfer&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
									else
										LocalBODID =  "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + BODDocumentID + ":" +"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID  + "?DebitTransfer&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
									invoke SendDebitTransferBODNativeLPL
										resume on error
											Error										= true
											LocalErrorMessage	 						= error message
									if(Error)
										LocalDebitTransferPaymentBatchXML = LocalDebitTransferBatchTrackerXML
										invoke Update FSMInboundBODTrackerRel
											invoked.Error 								= Error
											invoked.ErrorMessage 						= LocalErrorMessage
											invoked.Status								= 2
											invoked.CloseDate							= system current timestamp
											invoked.BODXML								= DebitTransferPaymentHeaderBatchXML
											invoked.BODID								= DerivedBODID
									else
										LocalDebitTransferPaymentBatchXML = LocalDebitTransferBatchTrackerXML
										invoke Update FSMInboundBODTrackerRel
											invoked.Status									= 3
											invoked.CloseDate								= system current timestamp
											invoked.BODXML									= DebitTransferPaymentHeaderBatchXML
											invoked.BODID									= DerivedBODID
									LocalBatchCounter = 0
									initialize LocalDebitTransferPaymentBatchXML
							if(LocalBatchCounter < DerivedDebitTransferBatchCounter and !LocalLastBatch)
								LocalDebitTransferBatchTrackerXML += LocalDebitTransferPaymentBatchXML
								LocalBatchSequence += 1
								if(FSMInboundBODTracker not entered and FSMInboundBODTrackerRel not exist)
									invoke Create FSMInboundBODTracker
										assign result to NewBODTracker
										invoked.Verb 					= 1
										invoked.Noun 					= "DebitTransfer"
										invoked.BODDocumentID			= BODDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										invoked.Direction				= 1
										invoked.BODAccountingEntity		= DerivedAccountingEntity
										invoked.Reference1				= Company
										invoked.Reference2				= ReceivablePaymentHeader
										invoked.Reference3				= PrmTriggerFrom
										initialize invoked.Error
										initialize invoked.ErrorMessage
									LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
								else
									if(FSMInboundBODTrackerRel exist)
										LocalFSMInboundBODTracker		= FSMInboundBODTrackerRel.FSMInboundBODTracker
									else
										LocalFSMInboundBODTracker			= FSMInboundBODTracker
									invoke Update FSMInboundBODTrackerRel
										invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										invoked.BODDocumentID			= BODDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.Direction				= 1
										invoked.BODAccountingEntity		= DerivedAccountingEntity
										invoked.Reference1				= Company
										invoked.Reference2				= ReceivablePaymentHeader
										invoked.Reference3				= PrmTriggerFrom
										initialize invoked.Error
										initialize invoked.ErrorMessage
								LocalBODID =  "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + BODDocumentID + ":" +"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID+"&batchSize="+LocalBatchSequence  + "?DebitTransfer&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
								invoke SendDebitTransferBODNativeLPL
									resume on error
										Error										= true
										LocalErrorMessage	 						= error message
								if(Error)
									LocalDebitTransferPaymentBatchXML = LocalDebitTransferBatchTrackerXML
									invoke Update FSMInboundBODTrackerRel
										invoked.Error 								= Error
										invoked.ErrorMessage 						= LocalErrorMessage
										invoked.Status								= 2
										invoked.CloseDate							= system current timestamp
										invoked.BODXML								= DebitTransferPaymentHeaderBatchXML
										invoked.BODID								= DerivedBODID
								else
									LocalDebitTransferPaymentBatchXML = LocalDebitTransferBatchTrackerXML
									invoke Update FSMInboundBODTrackerRel
										invoked.Status									= 3
										invoked.CloseDate								= system current timestamp
										invoked.BODXML									= DebitTransferPaymentHeaderBatchXML
										invoked.BODID									= DerivedBODID

		SendDebitTransferBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(!DerivedDebitTransferProcessMethod)
					send ion bod
						bod is DebitTransferPaymentHeaderXML
						bod type is "Sync.DebitTransfer"
						document id is BODDocumentID
						variation id is BODVariationID
						accounting entity is BODAccountingEntity
				else
					send ion bod
						bod is DebitTransferPaymentHeaderBatchXML
						bod type is "Sync.DebitTransfer"

		BatchGenerateIDMPaymentReceipts is an Instance Action
			valid when (IsValidForBatchGenerate)
			default label is "Generate Receipts"
			Action Rules
				invoke BatchGenerateIDMPaymentReceipts ReceivablePayment
					invoked.PrmCompany 					= Company
					invoked.PrmReceivablePaymentHeader 	= ReceivablePaymentHeader

		BatchGenerateIDMPaymentReceiptsInBackground is an Instance Action	

			restricted
			Action Rules
				invoke BatchGenerateIDMPaymentReceipts ReceivablePayment
					invoked.PrmCompany 					= Company
					invoked.PrmReceivablePaymentHeader 	= ReceivablePaymentHeader

		BatchEmailIDMPaymentReceipts is an Instance Action
			valid when (IsValidForIDMEmailOrPrint)
			default label is "Email Receipts"
			Action Rules
				invoke BatchEmailIDMPaymentReceipts ReceivablePayment
					invoked.PrmCompany 					= Company
					invoked.PrmReceivablePaymentHeader 	= ReceivablePaymentHeader

		BatchPrintIDMPaymentReceipts is an Instance Action
			valid when (IsValidForIDMEmailOrPrint)
			default label is "Print Receipts"
			Parameters
				PrmBatchPrinter is an IDMPrinter
					default label is "BatchPrinter"
			
			Parameter Rules
				PrmBatchPrinter
					initial value is Company.UserDefaultPrinterRel.IDMPrinter
					
			Action Rules
				invoke BatchPrintIDMPaymentReceipts ReceivablePayment
					invoked.PrmCompany 					= Company
					invoked.PrmReceivablePaymentHeader 	= ReceivablePaymentHeader
					invoked.PrmBatchPrinter				= PrmBatchPrinter

	Action Exit Rules
		if (Company.FinanceEnterpriseGroup.BODTrigger)
			if(action != "BODDataInitialLoadCriteriaReceivablePayment")
				if (!action type.Delete and Status.ReleasedBatch)
					if (action != "UpdateBODIdFields")
						LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+"  CO:"+Company+" RPH:"+ReceivablePaymentHeader
						increment bod id.VariationID
						ActionCode = ActionCode.Create
						LocalReceivablePaymentPaymentCount = instance count of ReceivablePaymentsRel
						LocalPaymentType = "NO"
						if(!LocalBODTrigger and LocalProcessingMethod != "NativeLPL" and !RestartNativelpl)
							include TriggerDebitTransferRules
							LocalBODTrigger = true













