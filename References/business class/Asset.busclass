Asset is a BusinessClass
    owned by am
    prefix is AST
    classic name is AMASSET
	representative text is "<Asset>-<Description>"
	representative image is Picture.File
		missing image is random background
			foreground text is "<XiAssetDescriptionAbbreviation>"


    Ontology
        symbolic key is Asset
            classic set name is ASTSET1

    Patterns
    	implements InlineUserFields
    		size is 1000
        implements StaticJava
        disable AuditIndex
        implements BODId

    Persistent Fields
		Reference1			is a Reference
		Reference2			is a Reference
        DisposedAsset               				is an Asset
            classic name is DSP-ASSET
            delete ignored
        Description
        Classification              				is AlphaUpper size 1
            States
                Purchased value is "P"
                Finance   value is "C"
                Operating value is "O"
        AssetLease
		FundOverride								is Boolean
        TagNumber
            classic name is TAG-NBR
        AssetGroup
        AssetObjectID
            classic name is OBJ-ID
        Status                      				is Numeric size 1
            States
                Unreleased  value is 1
                Released    value is 2
                PostRelease value is 3
                Disposed    value is 9
        AssetProcess
        ProcessDate                 				is Date
        AssetCategory
        Simulated                   				is Boolean
        WorkInProcess               				is Boolean
            classic name is WORK-IN-PROC
        TaxExempt                   				is Boolean
        Used                        				is Boolean
        Company                     				is an AssetCompany
			disable surrogates
       	CurrencyTable
        Currency
            classic name is CURRENCY-CODE
		BaseNumberOfDecimals
            classic name is BASE-ND
        TransactionNumberOfDecimals 				is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        TotalItemQuantity
            classic name is ITEM-TOT-QTY
            disable Auditing
        ItemTotalBaseCost           				is an InternationalAmount
            classic name is IT-TOT-CSTBASE
            disable Auditing
                precision is BaseNumberOfDecimals
        ItemTotalBaseTax            				is an InternationalAmount
            classic name is IT-TOT-TAXBASE
            disable Auditing
                precision is BaseNumberOfDecimals
        ItemTotalTransactionCost    				is an InternationalAmount
            classic name is IT-TOT-CSTTRAN
            disable Auditing
                precision is TransactionNumberOfDecimals
        ItemTotalTransactionTax     				is an InternationalAmount
            classic name is IT-TOT-TAXTRAN
            disable Auditing
                precision is TransactionNumberOfDecimals
        LastAssetItemPurchaseDate   				is Date
            classic name is ITEM-LAST-DATE
            disable Auditing
        LastAssetItem               				is a Sequence
            classic name is ITEM-LAST-SEQ
        	disable Auditing
        AssetLocation
            classic name is LOCATION-NAME
        AssetDivision
            classic name is DIVISION
        AssetAccountingUnitGroup
        	default label is "AssetDimensionGroup"
            classic name is AU-GROUP
        AssetAccountingUnit						 	is a FinanceCodeBlockNoAccountFull
        	default label is "DefaultTransactionDimensions"
            classic name for AssetAccountingUnit.AccountingUnit is ACCT-UNIT
        AssetType
            classic name for AssetType.Type 		is ASSET-TYPE
            classic name for AssetType.SubType		is SUB-TYPE
      	AssetProject	 							is a FinanceCodeBlockProjectOnly
      		default label is "AssetProject"
        	classic name for AssetProject.Project is ACTIVITY
        DepreciationExpenseProject					is a FinanceCodeBlockProjectOnly
      		default label is "DepreciationExpenseProject"
            classic name for DepreciationExpenseProject.Project is DEP-EXP-ACTVTY
        AssetAccountGroup
            classic name is ACCT-GRP
        OriginatingCompany          				is Numeric size 4
            classic name is ORIG-CO
        LastAssetSequence           				is a Sequence
            classic name is ASSET-LAST-SEQ
            disable Auditing
        LastTransactionSequence     				is a Sequence
            classic name is TRAN-LAST-SEQ
            disable Auditing
        LastCommentSequence         				is a Sequence
            classic name is COMM-LAST-SEQ
            disable Auditing
        CreationDate                				is TimeStamp
        CreatedBy                   				is an Operator 
        	holds pii
            classic name is CREATOR-ID
        IncludeInPhysicalInventory  				is Boolean
            classic name is INV-FLAG
        AssetOwner									is an Employee
        ReinstatementDate           				is Date
            classic name is REINSTATE-DATE
        Reinstated                  				is Boolean
            classic name is REINSTATE-FLAG
        GeographicalType            				is a GISType
            classic name is GEO-TYPE
        GeographicalLatitude        				is a GISCoordinate
            classic name is GEO-LATITUDE
        GeographicalLongitude       				is a GISCoordinate
            classic name is GEO-LONGITUDE
        GeographicalAltitude        				is a GISCoordinate
            classic name is GEO-ALTITUDE
        GeographicalDate            				is TimeStamp
            classic name is GEO-DATE
		Picture										is an AlternateAttachment

		AssetManagementInterfaceResult
			delete ignored
		InterfaceInProgress							is Boolean
		CompanyAsset								is like Asset
			default label is "CompanyAssetNumber"
			disable Auditing
		AssetSummaryGroup
		AssetSearchDocument					is Text
			text searchable
			disable Auditing
			default label is "SearchAssets"
		AssetGuidelineClass
		ApprovalStatus								is AlphaUpper size 1
            States
                Approved	value is "A"
                Rejected	value is "R"
				Submitted	value is "S"
		AssetAppend                             is Boolean


	Local Fields
		LocalTransactionItemCost					is an InternationalAmount
		LocalBook									is a Book
		LocalAssetItem								is like AssetItem
		LocalAssetDisposal							is like AssetDisposal
		LocalAssetProcess							is like AssetProcess
		AssetItemTotalsDone							is Boolean
		AdjustmentDateIsValid						is Boolean
		NewAssetItemTotalsDone						is Boolean
		LocalDefaultingDone							is Boolean
		LocalAssetAccount							is a FinanceCodeBlock
		LocalAccumulatedDepreciationAccount			is a FinanceCodeBlock
		LocalDepreciationExpenseAccount				is a FinanceCodeBlock
		LocalProceedsAccount						is a FinanceCodeBlock
		LocalGainAccount							is a FinanceCodeBlock
		LocalLossAccount							is a FinanceCodeBlock
		LocalClearingAccount						is a FinanceCodeBlock
		LocalDisposalExpenseAccount					is a FinanceCodeBlock
		LocalDeferredGainAccount					is a FinanceCodeBlock
		LocalDeferredLossAccount					is a FinanceCodeBlock
		LocalRevalueSurplusAccount					is a FinanceCodeBlock
		LocalRevalueLossAccount						is a FinanceCodeBlock
		LocalImpairmentLossAccount					is a FinanceCodeBlock
		LocalAccumulatedImpairmentLossAccount		is a FinanceCodeBlock
		LocalImpairmentWriteOffAccount				is a FinanceCodeBlock
		LocalImpairmentAmortizationAccount			is a FinanceCodeBlock
		LocalRevalueAmortizationAccount				is a FinanceCodeBlock
		LocalRevalueReserveAccount					is a FinanceCodeBlock
		AnnualDepreciation
		SavedAsset									is an Asset
		LocalAsset									is an Asset
		LocalToAsset								is an Asset
		NewDspAsset									is an Asset view
		LocalMassSelectionType						is a MassSelectionType
		LocalMassSelection							is a MassSelection
		LocalMethod									is a Method
		LocalLife 									is a Life
		LocalBasis									is an InternationalAmount
		LocalBookAmount								is an InternationalAmount
		LocalConvention								is a Convention
		LocalJournalizeGroup      					is a JournalizeGroup
		LocalTitle 				                    is Alpha size 255
		ActionCode							        is Alpha size 1
			States
				Create  value is "C"
				Update	value is "U"
				Delete	value is "D"
        LocalBODCurrentTimeStamp					is a BODCurrentTimeStamp
        LocalLastCompanyAsset						is like Asset
		LocalPersonalUseCode						is like PersonalUseCode
		LocalBusinessPercent						is a BusinessPercent
		LocalAssetTaxCreditTable					is an AssetTaxCreditTable
		LocalActive									is like Active
		LocalLifeInYears							is like LifeInYears
		LocalInsuranceCalculationMethod				is like Method
		LocalReplacementCalculationMethod			is like Method
		LocalCreatingFromTemplate					is Boolean
		LocalSalvageValue							is like InternationalAmount
        LocalComputeOption							is like Compute
        LocalCurrentYear							is Year 
        LocalCurrentMonth							is Numeric 2 
        LocalAssetBook								is a Book
        LocalHighPurchaseDate						is Date
		LocalToAssetForTransfer						is an Asset
		LocalFromDisposalAsset						is an Asset
        LocalDescription							is like Description
		LocalCompanyGroup							is a GeneralLedgerCompanyGroup
		LocalAccountingEntity						is like AccountingEntity
		LocalAccountingUnit							is like AccountingUnit
        LocalFund 									is an AssetFundField
        LocalFundAmount								is an InternationalAmount
        AllocatedAmount								is an InternationalAmount
        AllocatedPercent							is Percent size 9.6
		LocalFundAllocatedAmount					is an InternationalAmount
		LocalFundPercentContribution        		is Percent size 9.6
        LocalFundPercent							is Percent size 9.6
        LocalTotalFundAmount						is an InternationalAmount
        LocalProject								is like Project
  		LocalFinanceDimension1						is like FinanceDimension1
  		LocalFinanceDimension2						is like FinanceDimension2
  		LocalFinanceDimension3						is like FinanceDimension3
  		LocalFinanceDimension4						is like FinanceDimension4
  		LocalFinanceDimension5						is like FinanceDimension5
  		LocalFinanceDimension6						is like FinanceDimension6
  		LocalFinanceDimension7						is like FinanceDimension7
  		LocalFinanceDimension8						is like FinanceDimension8
  		LocalFinanceDimension9						is like FinanceDimension9
  		LocalFinanceDimension10						is like FinanceDimension10
        LocalPercentContribution					is Percent size 9.6
        FundCount									is Numeric 3
        LocalBODProcessing							is Boolean 

        LocalNativeLPLBODTrigger					is Boolean
		LocalTriggerNoun							is Alpha size 50
		LocalNounTemplate							is Alpha size 250
		LocalNumberOfDecimals						is Numeric 1
		LocalAmount									is an InternationalAmount
		LocalCreditBalance							is an InternationalAmount
		LocalDeditBalance							is an InternationalAmount
		LocalCompany								is like AssetCompany
		LocalExchangeDate   						is an ExchangeDate
		LocalCurrencyAmount 						is a CurrencyAmount
		LocalFromCurrency							is a FromCurrency
		LocalToCurrency								is a Currency
		LocalBaseAmount								is a CurrencyExchange
		LocalCurrencyRate							is a CurrencyExchangeRate
		LocalConfigurationParameter					is Alpha size up to 200
		LocalAEAlreadyExecuted						is Boolean
		LocalBODAccountingEntity  					is Alpha 50


		LocalAssetTransactionLineXML				is XMLDocument
		LocalTransactionDate						is Date
		LocalBODAssetBook							is Alpha size 25
		LocalCounter								is Numeric 3
		AssetTransferFundCount						is Numeric 3

		LocalAssetMassReleaseResult					is a AssetBatchUpdateResult
		LocalDetailView								is Numeric 2
		LocalReleaseSetAction						is Boolean
		LocalFinanceEnterpriseGroup					is like FinanceEnterpriseGroup


		LocalCrossAccountingEntity					is Alpha size 60
		LocalCSFCrossReferenceGLC					is Alpha size 20
		LocalDocumentID								is Alpha size 15
		LocalAssetAccountType						is like AssetAccountType
		LocalTransactionAmount						is an InternationalAmount
		LocalTransferItem							is like AssetItem
		LocalTransferFund 							is an AssetFundField
		LocalFundAllocationUpdated					is Boolean
		LocalAssetTransfer							is like AssetTransfer
		LocalUpdateFromTransfer						is Boolean
		LocalAdjPriorHistory						is Boolean

		Localseqnumber								is Numeric 9
		LocalTagNumber								is like TagNumber
		LocalTransferFromAsset						is an Asset

		BypassActiveCodeBlockEdit
		LocalGuidelineClass							is like AssetGuidelineClass
		LocalBookRegulation							is like BookRegulation
		LocalCurrencyBookAmount						is Decimal size 19.3
		LocalToCompany								is like Company
		LocalToAssetType							is like AssetType
		LocalParentAssetType						is AlphaUpper size 10
		TransferOutAccount  						is a GeneralLedgerChartAccount
		TransferInAccount   						is a GeneralLedgerChartAccount
		LocalTransactionStatus 						is like TransactionStatus
		NewBODTracker  								is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker					is Numeric 15
		Error            							is Boolean
	    ErrorMessage								is Alpha 300
		BalanceAccountType							is like AssetAccountType   
		LocalReference								is like Reference
		LocalGeneralLedgerEvent						is AlphaUpper 6
		LocalTransferCompany 						is like Company
		LocalAttributeCtr   						is Numeric 2
		LocalSkipDeleteManualEntry					is Boolean
		LocalAssetBookDebitBalance					is like InternationalAmount
		LocalNewAssetBookCreditBalance				is like InternationalAmount
		LocalPartialAssetBookBalance				is like InternationalAmount
		LocalPartialNewAssetBookBalance				is like InternationalAmount
		MassReleaseReportOnly						is Boolean
		LocalCancelResume							is Boolean					
		LocalAssetTranCompany                       is like AssetCompany
		LocalAssetTranAsset                         is like Asset
		ManualProcess								is Boolean
		LocalAssetReview							is Date
		LocalDistributionAccount					is a FinanceCodeBlock
		BypassStructureRelationEdit
		LocalFinanceCodeBlockFull					is a FinanceCodeBlockFull
		LocalToAccountingEntity						is a ToAccountingEntity
		LocalBatchResult							is a AssetBatchUpdateResult
		LocalCodeBlockRelationArray					is a CodeBlockRelationArray
		LocalNoOfRelations							is Numeric 3
		LocalRelationIdx							is Numeric 3
		LocalArraySize								is Numeric 4
		LocalFromField								is Numeric 2
		LocalToField								is Numeric 2
		LocalCodeBlockRelation						is a CodeBlockRelation
		LocalKeyFromValue							is Alpha 200
		LocalKeyToValue								is Alpha 200
		LocalToLabel								is Alpha 25
		LocalFromLabel								is Alpha 25
		LocalKeyToValueSaved						is Alpha 200

   	Transient Fields
		AdjustmentDate								is Date
		PostingDate									is Date
			derive value from DerivedNewPostingDate
		TranAssetAccount							is a FinanceCodeBlockFull
		TranAccumulatedDepreciationAccount			is a FinanceCodeBlockFull
		TranDepreciationExpenseAccount				is a FinanceCodeBlockFull
		TranProceedsAccount							is a FinanceCodeBlockFull
		TranGainAccount								is a FinanceCodeBlockFull
		TranLossAccount								is a FinanceCodeBlockFull
		TranClearingAccount							is a FinanceCodeBlockFull
		TranDisposalExpenseAccount					is a FinanceCodeBlockFull
		TranDeferredGainAccount						is a FinanceCodeBlockFull
		TranDeferredLossAccount						is a FinanceCodeBlockFull
		TranRevalueSurplusAccount					is a FinanceCodeBlockFull
		TranRevalueLossAccount 						is a FinanceCodeBlockFull
		TranRevalueAmortization			 			is a FinanceCodeBlockFull
		TranRevalueReserve 							is a FinanceCodeBlockFull
		TranImpairmentLoss				 			is a FinanceCodeBlockFull
		TranAccumulatedImpairmentLoss				is a FinanceCodeBlockFull
		TranImpairmentAmortization			 		is a FinanceCodeBlockFull
		TranImpairmentWriteOff				 		is a FinanceCodeBlockFull

		Book
		TranPartialAsset							is an Asset
		TotalSalvageValue 							is an InternationalAmount
			derive value from AssetBookRel.SalvageValue
		TransientStructure							is a ProjectStructure
			derive value from FinanceEnterpriseGroup.EnterpriseProjectStructure
		CreateFromBatch								is Boolean
		SystemControlDateViolation					is like Asset
		NewTransactionDate							is Date
        TransientRefreshControlTimeStamp			is TimeStamp
    	TransientCategoryUpdate						is Boolean
    	OriginalAsset								is like Asset
    		derive value from DisposedAssetOriginatingAsset
    	LocalPartialControlCreditBalance			is like InternationalAmount
    	LocalPartialControlDebitBalance				is like InternationalAmount
    	PostImpairmentHistoryTransactions			is Boolean
    	AdjustmentItemsAdded						is Numeric 3
    	AdjustmentItemTotal							is like InternationalAmount   
    	TransientFromReinstatement					is Boolean
    	TransientJournalizeGroup					is like JournalizeGroup
   		TransientDetailView							is Numeric 2
   		ValidEntryDate								is a DateRange
   			derive value from (CompanySystemClosingControlRel.ValidEntryDate)
   		TransientFullTransfer						is Boolean
   		TransientPartialTransfer					is Boolean
   		TransientIntercompanyTransfer				is Boolean
   		TransientFromReset							is Boolean
   		TransientToAsset							is like Asset
   		FundsUpdated								is Boolean
		FromAssetTransferRelease					is Boolean
		TransientAssetGuidelineClass				is an AssetGuidelineClass
			derive value from AssetGuidelineClass

    Context Fields
    	ContextMassSelectionType					is a MassSelectionType
    	ContextMassSelection						is a MassSelection
    	AssetTransactionAssetProcess
    	PurchaseDateRange							is a DateRange
		FSMInboundBODTracker

	Rule Blocks
		GetLocalNumberOfDecimals
			if (each.Book.PostCurrency.Book)
				LocalNumberOfDecimals =  each.Book.Currency.NumberOfDecimals
			else
				LocalNumberOfDecimals =  each.Asset.Currency.NumberOfDecimals

		NewGetLocalNumberOfDecimals
			if(each.Book.PostCurrency.Book)
				if (each.Asset.Currency.NumberOfDecimals < each.Book.Currency.NumberOfDecimals)
					LocalNumberOfDecimals = each.Asset.Currency.NumberOfDecimals
				else
					LocalNumberOfDecimals =  each.Book.Currency.NumberOfDecimals

		ValidateSummaryGroupFields    
			if (AssetSummaryGroup entered)
				if (AssetSummaryGroupValuesRel exists)
					constraint (Company						= first AssetSummaryGroupValuesRel.Company)
						"AllMembersOfSummaryGroupMustHaveSameCompany"
					constraint (Currency 					= first AssetSummaryGroupValuesRel.Currency)
						"AllMembersOfSummaryGroupMustHaveSameCurrency"
					constraint (CurrencyTable				= first AssetSummaryGroupValuesRel.CurrencyTable)
						"AllMembersOfSummaryGroupMustHaveSameCurrencyTable"
			for each AssetItem set
				invoke UpdateSummaryGroup each
					invoked.AssetSummaryGroupParameter = AssetSummaryGroup
			for each AssetBook set
				invoke UpdateSummaryGroup each
					invoked.AssetSummaryGroupParameter = AssetSummaryGroup

		BuildTextIndexes
			build text search field AssetSearchDocument
				Fields
					Asset
					Description
					TagNumber
					Reference1
					Reference2
					AssetComment set.Comment


		TriggerAssetMasterServiceRules
			trigger PayablesService.AssetMasterService PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from Asset
					bod id.VariationID
						variable name is VariationId
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp

		TriggerAssetTransactionRules
			trigger "AssetTransactionService" PA service
				resume on error
				title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>AM:<Asset>"
				Criteria
					FinanceEnterpriseGroup
					Company.AccountingEntity
				Variables
					ActionCode
					bod id.VariationID
						variable name is VariationId
					include persistent fields from Asset
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity

		TriggerProcessAssetMasterServiceRules
			trigger "ProcessAssetMasterService" PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from Asset
					bod id.VariationID
						variable name is VariationId
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp

		CalculateAssetItemTotals
			if (!AssetItemTotalsDone)
		      	initialize TotalItemQuantity
		       	initialize ItemTotalBaseCost
		       	initialize ItemTotalBaseTax
		       	initialize ItemTotalTransactionCost
		       	initialize ItemTotalTransactionTax
				for each AssetItemsRel
					TotalItemQuantity			+= each.ItemQuantity
					ItemTotalTransactionCost	+= each.TransactionItemCost
					ItemTotalBaseCost			+= each.BaseItemCost
					ItemTotalTransactionTax		+= each.TransactionItemTax
					ItemTotalBaseTax			+= each.BaseItemTax
				AssetItemTotalsDone = true
				if (FundOverride)
					invoke RefreshFund AssetFundsRel

		CalculateNewAssetItemTotals
			if (!NewAssetItemTotalsDone)
		      	initialize TotalItemQuantity
		       	initialize ItemTotalBaseCost
		       	initialize ItemTotalBaseTax
		       	initialize ItemTotalTransactionCost
		       	initialize ItemTotalTransactionTax
				for each LocalAssetItemsRel
					TotalItemQuantity			+= each.ItemQuantity
					ItemTotalTransactionCost	+= each.TransactionItemCost
					ItemTotalBaseCost			+= each.BaseItemCost
					ItemTotalTransactionTax		+= each.TransactionItemTax
					ItemTotalBaseTax			+= each.BaseItemTax
				NewAssetItemTotalsDone = true
				if (FundOverride)
					invoke RefreshFund AssetFundsRel


		AccountDefaulting
			initialize LocalAssetAccount
			initialize LocalAccumulatedDepreciationAccount
			initialize LocalDepreciationExpenseAccount
			initialize LocalProceedsAccount
			initialize LocalGainAccount
			initialize LocalLossAccount
			initialize LocalClearingAccount
			initialize LocalDisposalExpenseAccount
			initialize LocalDeferredGainAccount
			initialize LocalDeferredLossAccount
			initialize LocalRevalueSurplusAccount
			initialize LocalRevalueLossAccount
			initialize LocalImpairmentLossAccount
			initialize LocalAccumulatedImpairmentLossAccount
			initialize LocalImpairmentAmortizationAccount
			initialize LocalImpairmentWriteOffAccount
			initialize LocalRevalueAmortizationAccount
			initialize LocalRevalueReserveAccount

			if (AssetAccountingUnitGroup entered)  
				if (AssetAccountingUnitGroup.AssetAccountingUnit entered)
					LocalAssetAccount						= AssetAccountingUnitGroup.AssetAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"AssetProcessDimension(s)AreRequired"
					LocalAssetAccount						= AssetAccountingUnit

				if (AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit entered)
					LocalAccumulatedDepreciationAccount		= AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"AssetAccumulatedDepreciationDimension(s)AreRequired"
					LocalAccumulatedDepreciationAccount		= AssetAccountingUnit

				if (AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit entered)
					LocalDepreciationExpenseAccount			= AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"AssetDepreciationExpenseDimension(s)AreRequired"
					LocalDepreciationExpenseAccount			= AssetAccountingUnit


				if (DepreciationExpenseProject entered)
					LocalDepreciationExpenseAccount.Project	= DepreciationExpenseProject

				if (AssetAccountingUnitGroup.ProceedsAccountingUnit entered)
					LocalProceedsAccount					= AssetAccountingUnitGroup.ProceedsAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"ProceedsDimension(s)AreRequired"
					LocalProceedsAccount					= AssetAccountingUnit

				if (AssetAccountingUnitGroup.GainAccountingUnit entered)
					LocalGainAccount						= AssetAccountingUnitGroup.GainAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"GainDimension(s)AreRequired"
					LocalGainAccount						= AssetAccountingUnit

				if (AssetAccountingUnitGroup.LossAccountingUnit	entered)
					LocalLossAccount						= AssetAccountingUnitGroup.LossAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"LossDimension(s)AreRequired"
					LocalLossAccount						= AssetAccountingUnit

				if (AssetAccountingUnitGroup.ClearingAccountingUnit entered)
					LocalClearingAccount					= AssetAccountingUnitGroup.ClearingAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"ClearingDimension(s)AreRequired"
					LocalClearingAccount					= AssetAccountingUnit

				if (AssetAccountingUnitGroup.DisposalExpenseAccountingUnit entered)
					LocalDisposalExpenseAccount				= AssetAccountingUnitGroup.DisposalExpenseAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"DisposalExpenseDimension(s)AreRequired"
					LocalDisposalExpenseAccount 			= AssetAccountingUnit

				if (AssetAccountingUnitGroup.DeferredGainAccountingUnit	entered)
					LocalDeferredGainAccount				= AssetAccountingUnitGroup.DeferredGainAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"DeferredGainDimension(s)AreRequired"
					LocalDeferredGainAccount				= AssetAccountingUnit

				if (AssetAccountingUnitGroup.DeferredLossAccountingUnit entered)
					LocalDeferredLossAccount				= AssetAccountingUnitGroup.DeferredLossAccountingUnit
				else
					constraint (AssetAccountingUnit entered)
						"DeferredLossDimension(s)AreRequired"
					LocalDeferredLossAccount				= AssetAccountingUnit
				if (AssetType.PostToAccount entered)
					if (AssetAccountingUnitGroup.RevalueReserve entered)
						LocalRevalueReserveAccount				= AssetAccountingUnitGroup.RevalueReserve
					else
						constraint (AssetAccountingUnit entered)
							"RevalueReserveDimensionsAreRequired"
						LocalRevalueReserveAccount				= AssetAccountingUnit

					if (AssetAccountingUnitGroup.RevalueAmortization entered)
						LocalRevalueAmortizationAccount			= AssetAccountingUnitGroup.RevalueAmortization
					else
						constraint (AssetAccountingUnit entered)
							"RevalueAmortizationDefaultDimensionsAreRequired"
						LocalRevalueAmortizationAccount			= AssetAccountingUnit
				if (AssetType.Impairment)
					if (AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss entered)
						LocalImpairmentLossAccount				= AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss
					else
						constraint (AssetAccountingUnit entered)
							"ImpairmentDimensionsAreRequired"
						LocalImpairmentLossAccount				= AssetAccountingUnit

					if (AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss entered)
						LocalAccumulatedImpairmentLossAccount	= AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss
					else
						constraint (AssetAccountingUnit entered)
							"AccumulatedImpairmentLossDimensionsAreRequired"
						LocalAccumulatedImpairmentLossAccount	= AssetAccountingUnit

					if (AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentAmortization entered)
						LocalImpairmentAmortizationAccount		= AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentAmortization
					else
						constraint (AssetAccountingUnit entered)
							"ImpairmentAmortizationDimensionsAreRequired"
						LocalImpairmentAmortizationAccount		= AssetAccountingUnit

					if (AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentWriteOff entered)
						LocalImpairmentWriteOffAccount			= AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentWriteOff
					else
						constraint (AssetAccountingUnit entered)
							"ImpairmentAmortizationDimensionsAreRequired"
						LocalImpairmentWriteOffAccount			= AssetAccountingUnit
			else
				constraint (AssetAccountingUnit entered)
					"ATransactionDimensionIsNotAvailable;ProvideDefaultTransactionDimensionsOrAnAssetDimensionGroup"
				LocalAssetAccount						= AssetAccountingUnit
				LocalAccumulatedDepreciationAccount		= AssetAccountingUnit
				LocalDepreciationExpenseAccount			= AssetAccountingUnit

				if (DepreciationExpenseProject.Project entered)
					LocalDepreciationExpenseAccount.Project	= DepreciationExpenseProject.Project

				LocalProceedsAccount					= AssetAccountingUnit
				LocalGainAccount						= AssetAccountingUnit
				LocalLossAccount						= AssetAccountingUnit
				LocalClearingAccount					= AssetAccountingUnit
				LocalDisposalExpenseAccount 			= AssetAccountingUnit

				LocalDeferredGainAccount				= AssetAccountingUnit
				LocalDeferredLossAccount				= AssetAccountingUnit
				LocalRevalueSurplusAccount				= AssetAccountingUnit
				LocalRevalueLossAccount					= AssetAccountingUnit
				LocalRevalueAmortizationAccount			= AssetAccountingUnit
				LocalRevalueReserveAccount				= AssetAccountingUnit
				LocalImpairmentLossAccount				= AssetAccountingUnit
				LocalAccumulatedImpairmentLossAccount	= AssetAccountingUnit
				LocalImpairmentAmortizationAccount		= AssetAccountingUnit
				LocalImpairmentWriteOffAccount			= AssetAccountingUnit


			LocalAssetAccount.GeneralLedgerChartAccount 					= AssetType.ResolveASTDistributionAccount
			LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount 	= AssetType.ResolveACMDistributionAccount
			LocalDepreciationExpenseAccount.GeneralLedgerChartAccount		= AssetType.ResolveEXPDistributionAccount

			LocalClearingAccount.GeneralLedgerChartAccount 					= AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount
			LocalProceedsAccount.GeneralLedgerChartAccount 					= AssetAccountGroup.PRODistributionAccount.GeneralLedgerChartAccount
			LocalDisposalExpenseAccount.GeneralLedgerChartAccount 			= AssetAccountGroup.COSDistributionAccount.GeneralLedgerChartAccount
			LocalGainAccount.GeneralLedgerChartAccount 						= AssetAccountGroup.GANDistributionAccount.GeneralLedgerChartAccount
			LocalLossAccount.GeneralLedgerChartAccount 						= AssetAccountGroup.LOSDistributionAccount.GeneralLedgerChartAccount
			LocalDeferredGainAccount.GeneralLedgerChartAccount 				= AssetAccountGroup.DGNDistributionAccount.GeneralLedgerChartAccount
			LocalDeferredLossAccount.GeneralLedgerChartAccount 				= AssetAccountGroup.DLSDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueSurplusAccount.GeneralLedgerChartAccount			= AssetAccountGroup.RVSDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueLossAccount.GeneralLedgerChartAccount				= AssetAccountGroup.RVLDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueAmortizationAccount.GeneralLedgerChartAccount		= AssetAccountGroup.RVADistributionAccount.GeneralLedgerChartAccount
			LocalRevalueReserveAccount.GeneralLedgerChartAccount			= AssetAccountGroup.RRADistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentLossAccount.GeneralLedgerChartAccount			= AssetAccountGroup.IMLDistributionAccount.GeneralLedgerChartAccount
			LocalAccumulatedImpairmentLossAccount.GeneralLedgerChartAccount	= AssetAccountGroup.IMTDistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentAmortizationAccount.GeneralLedgerChartAccount	= AssetAccountGroup.IMADistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentWriteOffAccount.GeneralLedgerChartAccount		= AssetAccountGroup.IMWDistributionAccount.GeneralLedgerChartAccount

			if (AssetType.Revalue)
				if (AssetType.ResolveRVSDistributionAccount entered)
					LocalRevalueSurplusAccount.GeneralLedgerChartAccount 		= AssetType.ResolveRVSDistributionAccount
				if (AssetType.ResolveRVLDistributionAccount entered)
					LocalRevalueLossAccount.GeneralLedgerChartAccount 			= AssetType.ResolveRVLDistributionAccount
				if (AssetType.ResolveRVADistributionAccount entered)
					LocalRevalueAmortizationAccount.GeneralLedgerChartAccount 	= AssetType.ResolveRVADistributionAccount
				if (AssetType.ResolveRRADistributionAccount entered)
					LocalRevalueReserveAccount.GeneralLedgerChartAccount 		= AssetType.ResolveRRADistributionAccount

			if (AssetType.ResolveIMLDistributionAccount entered)
				LocalImpairmentLossAccount.GeneralLedgerChartAccount			= AssetType.ResolveIMLDistributionAccount
			if (AssetType.ResolveIMTDistributionAccount entered)
				LocalAccumulatedImpairmentLossAccount.GeneralLedgerChartAccount	= AssetType.ResolveIMTDistributionAccount
			if (AssetType.ResolveIMADistributionAccount entered)
				LocalImpairmentAmortizationAccount.GeneralLedgerChartAccount	= AssetType.ResolveIMADistributionAccount
			if (AssetType.ResolveIMWDistributionAccount entered)
				LocalImpairmentWriteOffAccount.GeneralLedgerChartAccount		= AssetType.ResolveIMWDistributionAccount
			
			if (Company.UseEventAccounts)
				if (AssetProcess.Addition
				or	AssetTransactionAssetProcess.Addition) 

					if (AssetType.ASTAdditionChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ASTAdditionAccount.GeneralLedgerChartAccount
					if (AssetType.ACMAdditionChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ACMAdditionAccount.GeneralLedgerChartAccount
				if (AssetProcess.Adjustment
				or	AssetTransactionAssetProcess.Adjustment)
					if (AssetType.ASTAdjustmentChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ASTAdjustmentAccount.GeneralLedgerChartAccount
					if (AssetType.ACMAdjustmentChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ACMAdjustmentAccount.GeneralLedgerChartAccount
				if (AssetProcess.Transfer
				or	AssetTransactionAssetProcess.Transfer)
					if (AssetType.ASTTransferChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ASTTransferAccount.GeneralLedgerChartAccount
					if (AssetType.ACMTransferChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ACMTransferAccount.GeneralLedgerChartAccount
				if (AssetProcess.Disposal
				or	AssetTransactionAssetProcess.Disposal)
					if (AssetType.ASTDisposalChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ASTDisposalAccount.GeneralLedgerChartAccount
					if (AssetType.ACMDisposalChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ACMDisposalAccount.GeneralLedgerChartAccount
				if (AssetProcess.Reinstatement
				or	AssetTransactionAssetProcess.Reinstatement)
					if (AssetType.ASTReinstatementChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ASTReinstatementAccount.GeneralLedgerChartAccount
					if (AssetType.ACMReinstatementChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ACMReinstatementAccount.GeneralLedgerChartAccount
				if (AssetProcess.Revalue
				or	AssetTransactionAssetProcess.Revalue)
					if (AssetType.ASTRevalueChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ASTRevalueAccount.GeneralLedgerChartAccount
					if (AssetType.ACMRevalueChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ACMRevalueAccount.GeneralLedgerChartAccount
				if (AssetProcess.Impairment
				or	AssetTransactionAssetProcess.Impairment)
					if (AssetType.ASTImpairmentChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= AssetType.ASTImpairmentAccount.GeneralLedgerChartAccount
					if (AssetType.ACMImpairmentChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= AssetType.ACMImpairmentAccount.GeneralLedgerChartAccount

			if (DepreciationExpenseProject entered)
				LocalDepreciationExpenseAccount.Project = DepreciationExpenseProject.Project

			if (AssetLease entered
			and (Classification.Finance
			or  AssetLease.Lease.LongTermOperatingLease))
				LocalClearingAccount				= AssetLease.Lease.DebtAccount

			TranAssetAccount						= LocalAssetAccount
			TranAccumulatedDepreciationAccount		= LocalAccumulatedDepreciationAccount
			TranDepreciationExpenseAccount			= LocalDepreciationExpenseAccount
			TranClearingAccount						= LocalClearingAccount
			TranProceedsAccount						= LocalProceedsAccount
			TranDisposalExpenseAccount				= LocalDisposalExpenseAccount
			TranGainAccount							= LocalGainAccount
			TranLossAccount							= LocalLossAccount
			TranDeferredGainAccount					= LocalDeferredGainAccount
			TranDeferredLossAccount					= LocalDeferredLossAccount
			TranRevalueSurplusAccount				= LocalRevalueSurplusAccount
			TranRevalueLossAccount					= LocalRevalueLossAccount
			TranRevalueAmortization			 		= LocalRevalueAmortizationAccount
			TranRevalueReserve 						= LocalRevalueReserveAccount
			TranImpairmentLoss				 		= LocalImpairmentLossAccount
			TranAccumulatedImpairmentLoss			= LocalAccumulatedImpairmentLossAccount
			TranImpairmentAmortization			 	= LocalImpairmentAmortizationAccount
			TranImpairmentWriteOff					= LocalImpairmentWriteOffAccount

		DeleteRules
			if (AssetControlTransactionRel exists)
				invoke Delete AssetControlTransactionRel
			for each ImportedAsset set
				invoke Delete each
			for each AssetTransactionsRel
				invoke Delete each
			for each AssetBookTransactionsRel
				invoke Delete each
			for each AssetComment set
				invoke Delete each
			for each AssetItem set
				invoke ForceDelete each
			for each AssetBook set
				invoke DeleteFromAsset each
			for each AssetBookDisposalsRel
				invoke Delete each
			for each AssetErrorResultRel
				invoke Delete each

		DeleteAllAssetTransactions
			for each AssetBooksRel
				invoke BalanceUpdate AssetBookRel
					initialize invoked.DebitBalance
					initialize invoked.CreditBalance
			if (AssetControlTransactionRel exists)
				invoke Delete AssetControlTransactionRel
			if(LocalSkipDeleteManualEntry)
				invoke DeleteReleasedTrans NonManualAssetTransactionsRel
			else
				invoke DeleteReleasedTrans AssetTransactionsRel

		DeleteAllAssetBookTransactions
			if(LocalSkipDeleteManualEntry)
				invoke Delete NonManualAssetBookTransactionsRel
			else
				invoke Delete AllAssetBookTransactionsRel

		CloseControlDateEdit  
			initialize SystemControlDateViolation
			if (CloseControlIsActive)
				for each UnreleasedAssetSystemControlTransactionRel
					if (each.PostingDate not within ValidEntryDate)
						SystemControlDateViolation = Asset
						constraint (SystemControlDateViolation not entered)
							"Asset<SystemControlDateViolation>CannotBeProcessed;TransactionsAreOutsideSystemControlDateRange"
						end for each

		ReleaseSetActionEdits
			if (Status.Unreleased)
				if (AssetProcess.Addition)
					if (AssetControlTransactionRel exists)
						constraint ((AssetControlTransactionRel.CreditBalance * -1) = AssetControlTransactionRel.DebitBalance)
							"AssetDebitsAndCreditsMustBalance"
					else
						for each AssetBooksRel
							LocalBook = each.Book
							LocalCompany = Company
							if (FromBookCalendarRel.DepreciationCalculated)
								invoke NoEditUpdate FromBookCalendarRel
									invoked.DepreciationCalculated = false
							constraint ((each.CreditBalance * -1) = each.DebitBalance)
								"AssetDebitsAndCreditsMustBalance"
					constraint (HasUnreleasedBookTrnasactionTotalEqualsZero)
						"BookTransactionDebitsAndCreditsMustBalance"
			else
			if (Status.PostRelease)
				if (FromAssetDisposal)
					constraint ((sum Asset.UnreleasedBookTransactionsRel.TransactionAmount + sum DisposedAsset.UnreleasedBookTransactionsRel.TransactionAmount) = 0)
						"BookTransactionDebitsAndCreditsMustBalance"
					if (UnreleasedPartialAssetDisposalCreated)
						LocalAssetDisposal = UnreleasedAssetDisposalRel.AssetDisposal
						for each AssetBooksRel
							if (!each.Disposed)
								LocalBook		= each.Book
								LocalAsset		= DisposedAsset
								if (AssetControlTransactionRel exists
								or DisposedAsset.AssetControlTransactionRel exists)
									LocalPartialControlDebitBalance 	= (DisposedAsset.AssetControlTransactionRel.DebitBalance + Asset.AssetControlTransactionRel.DebitBalance)
									LocalPartialControlCreditBalance 	= (DisposedAsset.AssetControlTransactionRel.CreditBalance + Asset.AssetControlTransactionRel.CreditBalance)
									constraint ((LocalPartialControlDebitBalance * -1) =  LocalPartialControlCreditBalance)
										"AssetDebitsAndCreditsMustBalance"
								else
									LocalPartialControlDebitBalance 	= (DisposedAssetBookRel.DebitBalance + each.DebitBalance)
									LocalPartialControlCreditBalance 	= (DisposedAssetBookRel.CreditBalance + each.CreditBalance)
									constraint ((LocalPartialControlDebitBalance * -1) =  LocalPartialControlCreditBalance)
										"AssetDebitsAndCreditsMustBalance"
					else
						if (AssetControlTransactionRel exists)
							if ((AssetControlTransactionRel.DebitBalance * -1) not =  AssetControlTransactionRel.CreditBalance)
								invoke CheckBalance AssetControlTransactionRel
								constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"
						else
							for each AssetBooksRel
								constraint ((each.DebitBalance * -1) =  each.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"
				else
				if (!RevalueInProgress)
					if (!AssetProcess.Transfer
					or UnreleasedAssetTransferRel.FullOrPartial.Full)
						if (AssetControlTransactionRel exists)
							if (!AssetControlTransactionRel.IsInBalance)
								invoke CheckBalance AssetControlTransactionRel
								constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"
						else
							if (UnreleasedAssetTransferRel.TransferType.InterCompany)
								for each BookTransferRel
									initialize LocalAssetBookDebitBalance
									LocalAssetBook = each.Book
									LocalBook = each.Book
									LocalCompany = UnreleasedAssetTransferRel.Company
									if (each.Book != each.ToBook)
										if (each.ToBook.PostCurrency.Book)
											LocalToCurrency = each.ToBook.Currency
										else
											LocalToCurrency = Asset.Currency
										if ((each.Book.PostCurrency.Asset
										and each.Asset.Currency != each.Book.Currency)
										or (each.ToBook.PostCurrency.Asset
										and each.ToAsset.Currency != each.ToBook.Currency))
											LocalExchangeDate		= Asset.LastAssetItemPurchaseDate
										else
											LocalExchangeDate		= UnreleasedAssetTransferRel.TransferDate
										if (FromBookCalendarRel.IsPostingBook)
											for each AssetTransactionsBookRel
												if (each.TransactionCurrency ! = LocalToCurrency)
													LocalFromCurrency           	= each.TransactionCurrency
													LocalBaseAmount.ToCurrency		= LocalToCurrency
													LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
													LocalCurrencyAmount				= each.TransactionAmount
													LocalAssetBookDebitBalance 		+= LocalBaseAmount.OutputCurrencyAmount
												else
													LocalAssetBookDebitBalance		+= each.TransactionAmount
										else
											for each AssetBookTransactionsBookRel
												if (each.TransactionCurrency ! = LocalToCurrency)
													LocalFromCurrency           		= each.TransactionCurrency
													LocalBaseAmount.ToCurrency			= LocalToCurrency
													LocalCurrencyRate					= LocalBaseAmount.OutputCurrencyRate
													LocalCurrencyAmount					= each.TransactionAmount
													LocalAssetBookDebitBalance 			+= LocalBaseAmount.OutputCurrencyAmount
												else
													LocalAssetBookDebitBalance		+= each.TransactionAmount
										LocalAsset = Asset
										LocalBook = each.ToBook

										LocalNewAssetBookCreditBalance = TransferToAssetBookRel.DebitBalance + TransferToAssetBookRel.CreditBalance
										constraint ((LocalNewAssetBookCreditBalance + LocalAssetBookDebitBalance) = 0)
											"AssetDebitsAndCreditsMustBalance"
									else
										LocalBook = each.Book
										LocalAssetBookDebitBalance = TransferToAssetBookRel.DebitBalance + TransferToAssetBookRel.CreditBalance
										constraint (LocalAssetBookDebitBalance = 0)
											"AssetDebitsAndCreditsMustBalance"
							else
								for each AssetBooksRel
									constraint ((each.DebitBalance * -1) =  each.CreditBalance)
										"AssetDebitsAndCreditsMustBalance"
					else
						if (AssetProcess.Transfer
						and !UnreleasedAssetTransferRel.TransferType.InterCompany)
							for each AssetBooksRel
								if (!each.Disposed)
									if (each.CreditBalance entered
									and each.DebitBalance entered)
										LocalBook = each.Book
										LocalAssetBookDebitBalance		= each.DebitBalance + ToAssetBookRel.DebitBalance
										LocalNewAssetBookCreditBalance	= each.CreditBalance + ToAssetBookRel.CreditBalance
										constraint((LocalAssetBookDebitBalance + LocalNewAssetBookCreditBalance) = 0)
											"AssetDebitsAndCreditsMustBalance"
									else
										LocalAssetBook = each.Book
										LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
										if (each.PostingBookCalendarRel.PostingBook)
											LocalPartialAssetBookBalance 	= sum AssetTransactionsBookRel.TransactionAmount
											LocalPartialNewAssetBookBalance = sum ToAssetTransactionsBookRel.TransactionAmount
											constraint((LocalPartialAssetBookBalance + LocalPartialNewAssetBookBalance) = 0)
												"AssetTransactionsAreNotBalancedForAssetBook(<LocalAssetBook>)"
										else
											LocalPartialAssetBookBalance 	= sum AssetBookTransactionsBookRel.TransactionAmount
											LocalPartialNewAssetBookBalance = sum ToAssetBookTransactionsBookRel.TransactionAmount
											constraint((LocalPartialAssetBookBalance + LocalPartialNewAssetBookBalance) = 0)
												"AssetTransactionsAreNotBalancedForAssetBook(<LocalAssetBook>)"
						else
						if (UnreleasedAssetTransferRel.TransferType.InterCompany)
							LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
							if (AssetControlTransactionRel exists
							and ToAssetControlTransactionRel exists)
								LocalPartialAssetBookBalance 	= AssetControlTransactionRel.DebitBalance + AssetControlTransactionRel.CreditBalance
								LocalPartialNewAssetBookBalance = ToAssetControlTransactionRel.DebitBalance + ToAssetControlTransactionRel.CreditBalance
								constraint ((LocalPartialAssetBookBalance * -1) = LocalPartialNewAssetBookBalance)
									"AssetDebitsAndCreditsMustBalance"
							else
								for each AssetBooksRel
									if (!each.Disposed)
										LocalBook = each.Book
										LocalBook = AssetBookTransferRel.ToBook
										if (each.Book.PostCurrency.Book)
											LocalFromCurrency = each.Book.Currency
										else
											LocalFromCurrency = Asset.Currency
										if (ToAssetBookRel.Book.PostCurrency.Book)
											LocalToCurrency = ToAssetBookRel.Book.Currency
										else
											LocalToCurrency = Asset.Currency
										if (LocalFromCurrency ! = LocalToCurrency)
											if ((each.Book.PostCurrency.Asset
											and each.Asset.Currency != each.Book.Currency)
											or (ToAssetBookRel.Book.PostCurrency.Asset
											and ToAssetBookRel.Asset.Currency != ToAssetBookRel.Book.Currency))
												LocalExchangeDate			= Asset.LastAssetItemPurchaseDate
											else
												LocalExchangeDate			= UnreleasedAssetTransferRel.TransferDate
											LocalBaseAmount.ToCurrency		= LocalToCurrency
											LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
											LocalCurrencyAmount				= each.DebitBalance
											LocalAssetBookDebitBalance		= LocalBaseAmount.OutputCurrencyAmount + ToAssetBookRel.DebitBalance
											LocalBaseAmount.ToCurrency		= LocalToCurrency
											LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
											LocalCurrencyAmount				= each.CreditBalance
											LocalNewAssetBookCreditBalance 	= LocalBaseAmount.OutputCurrencyAmount + ToAssetBookRel.CreditBalance
										else
											LocalAssetBookDebitBalance		= each.DebitBalance + ToAssetBookRel.DebitBalance
											LocalNewAssetBookCreditBalance 	= each.CreditBalance + ToAssetBookRel.CreditBalance
										constraint ((LocalAssetBookDebitBalance + LocalNewAssetBookCreditBalance) = 0)
											"AssetDebitsAndCreditsMustBalance"


		ReleaseAssetEdits
			if (LeasedAsset)
				constraint (PostingBookRel exist)
					"CannotRelease;PostingBookRequiredOnLeaseAssets"
			if (FundAccounting)
				if (FundOverride)
					FundCount = instance count of AssetTransferFundsRel
					if (AssetTransferFundsRel exists
					and AssetProcess.Transfer)
						constraint (sum AssetTransferFundsRel.PercentContribution = 1)
							"AssetTransferFundAllocationMustEqual100%"
					else
						if (AssetFundRel exists)
							constraint (sum AssetFundRel.PercentContribution = 1)
								"AssetFundAllocationMustEqual100%"
				else
					if (AssetItemTransferFundsRel exists
					and AssetProcess.Transfer)
						constraint (UnreleasedAssetTransferRel.ItemTransferFundAllocationsComplete)
							"AssetItemTransferFundAllocationMustEqual100%"
					else
						if (AssetItemFundRel exists)
						    for each AssetItemsRel
								constraint (each.FundAllocationsComplete)
									"AllItemFundAllocationsMustEqual100%"

			LocalToAsset = Asset
			if (OriginatingCompany entered
			and Company not = OriginatingCompany)
				if (Asset.Status.Unreleased)


					LocalToAsset = first UnreleasedAssetTransfersRel.AssetTransferTo.ToAsset
			constraint (!WorkInProcess)
				"CannotRelease;AssetIsWorkInProcess"

			constraint (AssetItem set exists)
				"CannotRelease;Asset<Asset>MustHaveAtLeastOneItem"

			constraint (AssetBook set exists)
				"CannotRelease;AssetMustHaveAtLeastOneBook"

			if (!AssetProcess.Transfer
			and !AssetProcess.Disposal
			or (AssetProcess.Transfer
			and (not UnreleasedAssetTransferRel.TransferType.InterCompany
			and UnreleasedAssetTransferRel.FullOrPartial.Full)))

				for each RequiredCurrentCalendarsRel
					Book = each.Book
					constraint (AssetBookRel exists)
						"CannotRelease;ARequiredBook<Book>IsNotDefined"
			if (!AssetProcess.Disposal)
				if (OriginatingCompany not entered
				or OriginatingCompany = Company)
					for each AssetBooksRel
						if (!each.Disposed)
							include GetLocalNumberOfDecimals
							if (each.ImpairmentBookOfOrigin = blank)
								LocalFromCurrency 	= each.PostingCurrency
								LocalBook			= each.Book
								LocalBookAmount		= each.Basis
								if (each.Book.PostCurrency.Asset)
									LocalAmount					= LocalBookAmount
									LocalBookAmount				= RoundedTransactionAmount
									LocalAmount					= ItemTotalTransactionCost
									ItemTotalTransactionCost	= RoundedTransactionAmount
									if (LocalBookAmount not = ItemTotalTransactionCost)
										confirmation required
											"Warning;Book<LocalBook>Basis<LocalBookAmount>IsNotEqualToTotalItemCost<ItemTotalTransactionCost>"
								else
									for each AssetItemsRel
										if (Currency != Company.Currency)
											LocalExchangeDate						= LastAssetItemPurchaseDate
											LocalFromCurrency           			= Currency
											LocalBaseAmount.ToCurrency				= Company.Currency
											LocalCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
									if (each.IsPostingBook
									or (Asset.Currency = each.PostingCurrency
									or Asset.Currency = Book.Currency
									or GeneralLedgerCompanyRel.Currency = each.PostingCurrency))
										include NewGetLocalNumberOfDecimals
										LocalAmount					= LocalBookAmount
										LocalBookAmount				= RoundedTransactionAmount
										if (Currency != Company.Currency)
											LocalAmount					= AssetBaseItemCost
										else
											LocalAmount					= ItemTotalBaseCost
										LocalCurrencyBookAmount		= RoundedTransactionAmount
										ItemTotalBaseCost			= RoundedTransactionAmount
										if (LocalCurrencyBookAmount not = LocalBookAmount)
											confirmation required
												"Warning;Book<LocalBook>Basis<LocalBookAmount>IsNotEqualToTotalItemBaseCost<ItemTotalBaseCost>"


							if (AssetCategory.NonDepreciable)
								constraint (each.Life not entered)
									"LifeCannotBeEnteredForNonDepreciableAsset"
								constraint (each.Method not entered)
									"MethodCannotBeEnteredForNonDepreciableAsset"
							else
								if (LocalBook.DepreciationType.AssetLevel)
									constraint (each.Method entered)
										"MethodForAssetBook<LocalBook>IsRequired"

								if (LocalBook.Book.DepreciationType.ClassLevel)
									constraint (each.Convention not entered)
										"ConventionCannotBeEnteredForClassTypeAssetBook<LocalBook>"
									constraint (each.Life not entered)
										"LifeCannotBeEnteredForClassTypeAssetBook<LocalBook>"
									constraint (each.Method not entered)
										"MethodCannotBeEnteredForClassTypeAssetBook<LocalBook>"
								else
									constraint (each.Convention entered)
										"ConventionForAssetBook<LocalBook>IsRequired"
									constraint (each.Life entered)
										"LifeForAssetBook<LocalBook>IsRequired"

							constraint (each.InServiceDate entered)
								"InServiceDateForAssetBook<LocalBook>IsRequired"
			else
			if (OriginatingCompany entered
			and OriginatingCompany not = Company)
				for each ToAssetBooksRel
					LocalBook	= each.Book



					if (AssetCategory.NonDepreciable)
						constraint (each.Life not entered)
							"LifeCannotBeEnteredForNonDepreciableAsset"
						constraint (each.Method not entered)
							"MethodCannotBeEnteredForNonDepreciableAsset"
					else
						if (each.Book.DepreciationType.AssetLevel)
							constraint (each.Method entered)
								"MethodForAssetBook<LocalBook>IsRequired"

						if (each.Book.DepreciationType.ClassLevel)
							constraint (each.Convention not entered)
								"ConventionCannotBeEnteredForClassTypeAssetBook<LocalBook>"
							constraint (each.Life not entered)
								"LifeCannotBeEnteredForClassTypeAssetBook<LocalBook>"
							constraint (each.Method not entered)
								"MethodCannotBeEnteredForClassTypeAssetBook<LocalBook>"
						else
							constraint (each.Convention entered)
								"ConventionForAssetBook<LocalBook>IsRequired"
							constraint (each.Life entered)
								"LifeForAssetBook<LocalBook>IsRequired"

					constraint (each.InServiceDate entered)
						"InServiceDateForAssetBook<LocalBook>IsRequired"
			if (MassReleaseReportOnly)
				for each UnreleasedAssetTransactionRel
					if (each.DistributionAccount.Ledger entered)
						constraint (each.DistributionAccount.Ledger.Active)
							"Ledger<each.DistributionAccount.Ledger>IsInactive"
					if (each.DistributionAccount.ToAccountingEntity entered)
						constraint (each.DistributionAccount.ToAccountingEntity.Status.Active)
							"<FinanceEnterpriseGroup.AccountingEntityLabel><each.DistributionAccount.ToAccountingEntity>IsInactive"
					if (each.DistributionAccount.AccountingUnit entered)
						constraint (each.DistributionAccount.GeneralLedgerChartAccount.Active)
							"Account<each.DistributionAccount.GeneralLedgerChartAccount>IsInactive"
					if (each.DistributionAccount.Project entered)
						constraint (each.DistributionAccount.Project.Active)
							"<FinanceEnterpriseGroup.ProjectLabel><each.DistributionAccount.Project>IsInactive"
					if (each.DistributionAccount.FinanceDimension1 entered)
						constraint (each.DistributionAccount.FinanceDimension1.Active)
							"<FinanceEnterpriseGroup.FinanceDimension1Label><each.DistributionAccount.FinanceDimension1>IsInactive"
					if (each.DistributionAccount.FinanceDimension2 entered)
						constraint (each.DistributionAccount.FinanceDimension2.Active)
							"<FinanceEnterpriseGroup.FinanceDimension2Label><each.DistributionAccount.FinanceDimension2>IsInactive"
					if (each.DistributionAccount.FinanceDimension3 entered)
						constraint (each.DistributionAccount.FinanceDimension3.Active)
							"<FinanceEnterpriseGroup.FinanceDimension3Label><each.DistributionAccount.FinanceDimension3>IsInactive" 
					if (each.DistributionAccount.FinanceDimension4 entered)
						constraint (each.DistributionAccount.FinanceDimension4.Active)
							"<FinanceEnterpriseGroup.FinanceDimension4Label><each.DistributionAccount.FinanceDimension4>IsInactive"
					if (each.DistributionAccount.FinanceDimension5 entered)
						constraint (each.DistributionAccount.FinanceDimension5.Active)
							"<FinanceEnterpriseGroup.FinanceDimension5Label><each.DistributionAccount.FinanceDimension5>IsInactive"
					if (each.DistributionAccount.FinanceDimension6 entered)
						constraint (each.DistributionAccount.FinanceDimension6.Active)
							"<FinanceEnterpriseGroup.FinanceDimension6Label><each.DistributionAccount.FinanceDimension6>IsInactive"
					if (each.DistributionAccount.FinanceDimension7 entered)
						constraint (each.DistributionAccount.FinanceDimension7.Active)
							"<FinanceEnterpriseGroup.FinanceDimension7Label><each.DistributionAccount.FinanceDimension7>IsInactive"
					if (each.DistributionAccount.FinanceDimension8 entered)
						constraint (each.DistributionAccount.FinanceDimension8.Active)
							"<FinanceEnterpriseGroup.FinanceDimension8Label><each.DistributionAccount.FinanceDimension8>IsInactive"
					if (each.DistributionAccount.FinanceDimension9 entered)
						constraint (each.DistributionAccount.FinanceDimension9.Active)
							"<FinanceEnterpriseGroup.FinanceDimension9Label><each.DistributionAccount.FinanceDimension9>IsInactive"
					if (each.DistributionAccount.FinanceDimension10 entered)
						constraint (each.DistributionAccount.FinanceDimension10.Active)
							"<FinanceEnterpriseGroup.FinanceDimension10Label><each.DistributionAccount.FinanceDimension10>IsInactive" 
				for each UnreleasedAssetBookTransactionRel
					if (each.DistributionAccount.Ledger entered)
						constraint (each.DistributionAccount.Ledger.Active)
							"Ledger<each.DistributionAccount.Ledger>IsInactive"
					if (each.DistributionAccount.ToAccountingEntity entered)
						constraint (each.DistributionAccount.ToAccountingEntity.Status.Active)
							"<FinanceEnterpriseGroup.AccountingEntityLabel><each.DistributionAccount.ToAccountingEntity>IsInactive"
					if (each.DistributionAccount.AccountingUnit entered)
						constraint (each.DistributionAccount.GeneralLedgerChartAccount.Active)
							"Account<each.DistributionAccount.GeneralLedgerChartAccount>IsInactive"
					if (each.DistributionAccount.Project entered)
						constraint (each.DistributionAccount.Project.Active)
							"<FinanceEnterpriseGroup.ProjectLabel><each.DistributionAccount.Project>IsInactive"
					if (each.DistributionAccount.FinanceDimension1 entered)
						constraint (each.DistributionAccount.FinanceDimension1.Active)
							"<FinanceEnterpriseGroup.FinanceDimension1Label><each.DistributionAccount.FinanceDimension1>IsInactive"
					if (each.DistributionAccount.FinanceDimension2 entered)
						constraint (each.DistributionAccount.FinanceDimension2.Active)
							"<FinanceEnterpriseGroup.FinanceDimension2Label><each.DistributionAccount.FinanceDimension2>IsInactive"
					if (each.DistributionAccount.FinanceDimension3 entered)
						constraint (each.DistributionAccount.FinanceDimension3.Active)
							"<FinanceEnterpriseGroup.FinanceDimension3Label><each.DistributionAccount.FinanceDimension3>IsInactive" 
					if (each.DistributionAccount.FinanceDimension4 entered)
						constraint (each.DistributionAccount.FinanceDimension4.Active)
							"<FinanceEnterpriseGroup.FinanceDimension4Label><each.DistributionAccount.FinanceDimension4>IsInactive"
					if (each.DistributionAccount.FinanceDimension5 entered)
						constraint (each.DistributionAccount.FinanceDimension5.Active)
							"<FinanceEnterpriseGroup.FinanceDimension5Label><each.DistributionAccount.FinanceDimension5>IsInactive"
					if (each.DistributionAccount.FinanceDimension6 entered)
						constraint (each.DistributionAccount.FinanceDimension6.Active)
							"<FinanceEnterpriseGroup.FinanceDimension6Label><each.DistributionAccount.FinanceDimension6>IsInactive"
					if (each.DistributionAccount.FinanceDimension7 entered)
						constraint (each.DistributionAccount.FinanceDimension7.Active)
							"<FinanceEnterpriseGroup.FinanceDimension7Label><each.DistributionAccount.FinanceDimension7>IsInactive"
					if (each.DistributionAccount.FinanceDimension8 entered)
						constraint (each.DistributionAccount.FinanceDimension8.Active)
							"<FinanceEnterpriseGroup.FinanceDimension8Label><each.DistributionAccount.FinanceDimension8>IsInactive"
					if (each.DistributionAccount.FinanceDimension9 entered)
						constraint (each.DistributionAccount.FinanceDimension9.Active)
							"<FinanceEnterpriseGroup.FinanceDimension9Label><each.DistributionAccount.FinanceDimension9>IsInactive"
					if (each.DistributionAccount.FinanceDimension10 entered)
						constraint (each.DistributionAccount.FinanceDimension10.Active)
							"<FinanceEnterpriseGroup.FinanceDimension10Label><each.DistributionAccount.FinanceDimension10>IsInactive"

		ReleaseFundUpdates
			if (FundOverride)
				if (AssetFundsRel exists)
					invoke UpdateItemFunds AssetFundsRel
					include UpdateAssetFundRecords
			else
				include GenerateFundAllocation

		AssetTransferBalance
			if (Company != UnreleasedAssetTransferRel.AssetTransferTo.ToAssetCompany)
				constraint (Company.BalanceTransfers = UnreleasedAssetTransferRel.AssetTransferTo.ToAssetCompany.BalanceTransfers)
					"FromAndToCompaniesMustHaveTheSameOptionSelectedForTransferBalancing"
			TransferOutAccount  		= UnreleasedAssetTransferRel.AssetType.ATOTransferAccount
			if (TransferOutAccount not entered)
				LocalTransferCompany	= UnreleasedAssetTransferRel.Company
				LocalParentAssetType	= UnreleasedAssetTransferRel.AssetType.Type
				TransferOutAccount 		= ParentAssetTypeRel.ATOTransferAccount

			TransferInAccount			= UnreleasedAssetTransferRel.AssetTransferTo.ToAssetType.ATITransferAccount
			if (TransferInAccount not entered)
				LocalTransferCompany	= UnreleasedAssetTransferRel.AssetTransferTo.ToAssetCompany
				LocalParentAssetType	= UnreleasedAssetTransferRel.AssetTransferTo.ToAssetType.Type
				TransferInAccount  		= ParentAssetTypeRel.ATITransferAccount



			if (TransferInAccount entered
			and TransferOutAccount entered)

				if (UnreleasedAssetTransactionsRel exists)
					for each UnreleasedAssetTransactionsRel
						if (!each.FundAccountType
						or ((each.Reference 	= "Mass Transfer To"
						or each.Reference 		= "Transfer To")
						and !AssetTransferFundsExist)
						or ((each.Reference 	= "Mass Transfer From"   
						or each.Reference 		= "Transfer From")
						and !AssetFundsExist))
							invoke CreateTransferBalancingTransactions each  
								invoked.PrmFinanceEnterpriseGroup   	= FinanceEnterpriseGroup
								invoked.PrmAsset                   	 	= Asset
								invoked.TransferOutAccount         		= TransferOutAccount
								invoked.TransferInAccount           	= TransferInAccount
					if (UnreleasedAssetTransferRel.FullOrPartial.Partial
					and Asset != UnreleasedAssetTransferRel.AssetTransferTo.ToAsset)
						LocalToAsset = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
						for each UnreleasedToAssetTransactionsRel
							if (!each.FundAccountType
							or ((each.Reference 	= "Mass Transfer To"
							or each.Reference 		= "Transfer To")
							and !AssetTransferFundsExist)
							or ((each.Reference 	= "Mass Transfer From"
							or each.Reference 		= "Transfer From")
							and !AssetFundsExist))
								invoke CreateTransferBalancingTransactions each
									invoked.PrmFinanceEnterpriseGroup   = FinanceEnterpriseGroup
									invoked.PrmAsset                    = LocalToAsset
									invoked.TransferOutAccount          = TransferOutAccount
									invoked.TransferInAccount           = TransferInAccount

				if (UnreleasedTransferBookTransactionsRel exists)

					for each UnreleasedTransferBookTransactionsRel
						if (!each.FundAccountType
						or ((each.Reference 	= "Mass Transfer To"
						or each.Reference 		= "Transfer To")
						and !AssetTransferFundsExist)
						or ((each.Reference 	= "Mass Transfer From"
						or each.Reference 		= "Transfer From")
						and !AssetFundsExist))
							invoke CreateTransferBalancingTransactions each
								invoked.PrmFinanceEnterpriseGroup   	= FinanceEnterpriseGroup
								invoked.PrmAsset                   	 	= Asset
								invoked.TransferOutAccount         		= TransferOutAccount
								invoked.TransferInAccount           	= TransferInAccount

					if (UnreleasedAssetTransferRel.FullOrPartial.Partial
					and Asset != UnreleasedAssetTransferRel.AssetTransferTo.ToAsset)
						LocalToAsset = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
						for each UnreleasedToAssetBookTransactionsRel
							if (!each.FundAccountType
							or ((each.Reference 	= "Mass Transfer To"
							or each.Reference 		= "Transfer To")
							and !AssetTransferFundsExist)
							or ((each.Reference 	= "Mass Transfer From"
							or each.Reference 		= "Transfer From")
							and !AssetFundsExist))
								invoke CreateTransferBalancingTransactions each
									invoked.PrmFinanceEnterpriseGroup   = FinanceEnterpriseGroup
									invoked.PrmAsset                    = LocalToAsset
									invoked.TransferOutAccount          = TransferOutAccount
									invoked.TransferInAccount           = TransferInAccount

		ReleaseAssetUpdates
			if (AssetProcess.Addition)
				if (FundAccounting)
					include ReleaseFundUpdates
			if (AssetProcess.Reinstatement)
				invoke Release UnreleasedAssetReinstatementsRel
					invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
					if (IsBookDisposal)
						invoked.PrmBookDisposal			= true
				LocalAssetProcess = "RAD"
			else
			if (AssetProcess.Disposal)
				if (UnreleasedAssetDisposalRel exists)
					invoke Unreleased.Release UnreleasedAssetDisposalRel
						if (LocalDetailView entered)
							invoked.TransientDetailView = LocalDetailView
						if (LocalAssetMassReleaseResult entered)
							invoked.TransientAssetReleaseResult = LocalAssetMassReleaseResult
						if (LocalCompanyGroup entered)
							invoked.TransientCompanyGroup	= LocalCompanyGroup
			else
			if (AssetProcess.Adjustment)
				if (UnreleasedAssetAdjustmentRel.NewAssetItemsAdded)
					AdjustmentItemsAdded = UnreleasedAssetAdjustmentRel.NumberOfItemsAdded
					AdjustmentItemTotal  = UnreleasedAssetAdjustmentRel.ItemTotalTransactionCost


				if (UnreleasedAssetAdjustmentRel.Simulated
				and !UnreleasedAssetAdjustmentRel.AssetAdjustmentTo.Simulated)
					invoke Delete AssetTransfer set
					invoke Delete AssetItemsTransferRel
					invoke Delete AssetBookTransfersRel
					invoke Delete AssetDisposalRel
					invoke Delete AssetItemDisposalsRel
					invoke Delete AssetBookDisposalsRel

				invoke Update UnreleasedAssetAdjustmentRel
					invoked.AdjustmentStatus = "R"
				if (FundAccounting)
					if (FundOverride)
						invoke UpdateItemFunds AssetFundsRel
					else
						include GenerateFundAllocation
			else
			if (AssetProcess.Transfer)
				if (first UnreleasedAssetTransfersRel.FullTransfer)
					TagNumber								= first UnreleasedAssetTransfersRel.AssetTransferTo.ToTagNumber
					AssetGroup								= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetGroup
					Company									= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetCompany
					AssetType								= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetType
					AssetAccountGroup						= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetAccountGroup
					AssetAccountingUnit						= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetAccountingUnit
					AssetAccountingUnitGroup				= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetAccountingUnitGroup
					AssetDivision							= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetDivision
					AssetLocation							= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetLocation
					AssetProject							= first UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetProject
					if (first UnreleasedAssetTransfersRel.TransferType.InterCompany)
						invoke SetNewCompanyAsset
				else
					if (UnreleasedAssetTransferRel.PartialTransfer)
						TransientPartialTransfer	= true
					else
						TransientPartialTransfer	= false


				if (UnreleasedAssetTransferRel.PartialTransfer)
					SavedAsset = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset







					if (SavedAsset entered)
						invoke UpdateFundAllocation SavedAsset
						if (UnreleasedAssetTransferRel.TransferType.InterCompany
						or UnreleasedAssetTransferRel.PartialTransfer)
							if (FundAccounting
							and !FundOverride)
								invoke DeleteFromAsset AssetTransferFundsRel
								include RefreshAssetTransferFunds
							invoke Unreleased.ReleaseTransferToAsset SavedAsset
								invoked.PrmJournalizeGroup = TransientJournalizeGroup
								invoked.PrmAssetMassReleaseResult	= LocalAssetMassReleaseResult
						else
							invoke Unreleased.Release SavedAsset
				include GenerateFundAllocation

				invoke Release UnreleasedAssetTransfersRel

		JournalizeUnreleasedTransactions
			if(TransientJournalizeGroup entered)
				LocalJournalizeGroup = TransientJournalizeGroup
			else
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
			if (AssetProcess.Transfer
			and (UnreleasedAssetTransferRel.TransferType.InterCompany
			or UnreleasedAssetTransferRel.FullOrPartial.Partial))

				if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
					TransientPartialTransfer	= true
				else
					TransientPartialTransfer	= false

				if (FundAllocationRequired)
					constraint ((sum AssetFundsRel.TransactionAmount = ItemTotalTransactionCost) or (sum AssetFundsRel.PercentContribution = 1))
						"AssetFundAllocationIsNotComplete"
					for each UnreleasedTransferTransactionsRel
						if (each.FundAccountType)
							invoke CreateFundTransactions each
								invoked.PrmTransactionDate	  = each.TransactionDate
								if (TransientPartialTransfer
								and UnreleasedAssetTransferRel not exists)
									invoked.TransferFromAsset = TransferFromAsset
								else
									invoked.TransferFromAsset = Asset
				for each UnreleasedTransferTransactionsRel
					invoke Release each
						invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
						invoked.PrmJournalizeGroup			= LocalJournalizeGroup
						invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
				if (LocalCompanyGroup not entered)
					invoke JournalizeInterCompanyDistributions ReleasedTransferTransactionsRel
						invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
						invoked.PrmJournalizeGroup				= LocalJournalizeGroup

			else
				if (FundAllocationRequired)
					for each UnreleasedAssetTransactionRel
						LocalTransactionAmount 	= each.TransactionAmount
						if (each.FundAccountType)
							invoke CreateFundTransactions each
								invoked.PrmTransactionDate	  = each.TransactionDate
				for each UnreleasedAssetTransactionRel
					invoke Release each
						LocalTransactionAmount 	= each.TransactionAmount
						invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
						invoked.PrmJournalizeGroup			= LocalJournalizeGroup
						invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
				if (!LocalReleaseSetAction)
					invoke JournalizeDistributionsForGroup AssetCompanyRel
						invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
						invoked.PrmAssetCompany					= Company
						invoked.PrmJournalizeGroup				= LocalJournalizeGroup
						invoked.PrmAsset						= Asset


		CheckCloseReleaseFlag
			if (PostReleaseAssetsRel not exists
			and UnreleasedNonWIPAssetsRel not exists)
				invoke SetPeriodCloseRelease AssetCompanyRel
					invoked.PrmPeriodCloseRelease	= "Y"
			else
				if (Company.PeriodCloseRelease	!= "N")
					invoke SetPeriodCloseRelease AssetCompanyRel
						invoked.PrmPeriodCloseRelease	= "N"
		CreateEntranceRules
			if (LeaseExists)
				constraint (AllowCreateForLeaseAssets)
					"LeaseNumberOfAssetEnteredNoAdditionalAssetsCanBeAdded"

			if (AssetGuidelineClass entered)
				constraint (GuidelineClassRel exists)
					"AssetGuidelineClassDoesNotExist"
				constraint (ActiveGuidelineClassRel exists)
					"CannotAddAnInactiveAssetGuidelineClass"
			if (!AssetGroupRel exists
			and AssetGroup entered)
				invoke Create AssetGroup
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AssetGroup				= AssetGroup
					invoked.Description				= AssetGroup
			constraint (AssetType entered)
				"AssetTypeIsRequired"

		RefreshAssetTransferFunds  
			initialize LocalCounter
			invoke DeleteFromAsset AssetTransferFundsRel
			if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
				initialize FundCount
				initialize LocalFund
				initialize LocalCounter
				initialize LocalPercentContribution
				initialize AllocatedPercent
				initialize AllocatedAmount
				LocalTotalFundAmount	= UnreleasedAssetTransferRel.AssetTransferTo.ToItemTotalTransactionCost
				for each distinct FundFieldGroup in AssetItemTransferFundsRel
					FundCount += 1
				for each distinct FundFieldGroup in AssetItemTransferFundsRel
					LocalCounter += 1
					LocalAsset					= each.Asset
					LocalAssetTransfer			= each.AssetTransfer
					LocalAccountingEntity		= each.AccountingEntity
					LocalAccountingUnit			= each.AccountingUnit
					LocalProject				= each.Project
					if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						LocalFund 				= each.AccountingUnit
					else
						LocalFund				= each.FinanceDimension1
					LocalFinanceDimension1		= each.FinanceDimension1
					LocalFinanceDimension2		= each.FinanceDimension2
					LocalFinanceDimension3		= each.FinanceDimension3
					LocalFinanceDimension4		= each.FinanceDimension4
					LocalFinanceDimension5		= each.FinanceDimension5
					LocalFinanceDimension6 		= each.FinanceDimension6
					LocalFinanceDimension7		= each.FinanceDimension7
					LocalFinanceDimension8		= each.FinanceDimension8
					LocalFinanceDimension9		= each.FinanceDimension9
					LocalFinanceDimension10 	= each.FinanceDimension10
					LocalFundAmount  			= sum LocalItemTransferFundsRel.TransactionAmount
					invoke Create LocalAssetTransferFundRel
						invoked.AssetTransfer			= LocalAssetTransfer
						invoked.FinanceDimension1		= LocalFinanceDimension1
						if (FundCount = LocalCounter)
							LocalPercentContribution		= (LocalTotalFundAmount - AllocatedAmount / LocalTotalFundAmount)
							invoked.TransactionAmount		= LocalTotalFundAmount - AllocatedAmount
							invoked.PercentContribution 	= LocalPercentContribution
						else
							LocalPercentContribution		= (LocalFundAmount / LocalTotalFundAmount)
							invoked.TransactionAmount		= LocalFundAmount
							invoked.PercentContribution 	= LocalPercentContribution
							AllocatedAmount 				+= LocalFundAmount
			else
				invoke CreateTransferFunds UnreleasedAssetTransferRel


		GenerateFundAllocation
			FundsUpdated = true
			if (FundOverride = false)

				invoke DeleteFromAsset AssetFundsRel
				invoke DeleteFromAsset AssetFundOldRel
				if (AssetItemFundsRel exists)
					if (AssetProcess.Addition
					or UnreleasedAssetTransferRel.FullOrPartial.Full)
						LocalTotalFundAmount = ItemTotalTransactionCost
					else
						LocalTotalFundAmount = sum AssetItemFundsRel.TransactionAmount
					initialize LocalFund
					initialize LocalCounter
					initialize LocalPercentContribution
					initialize AllocatedPercent
					initialize AllocatedAmount
					initialize FundCount

					for each distinct FundFieldGroup in AssetItemFundsRel
						LocalCounter += 1
					for each distinct FundFieldGroup in AssetItemFundsRel
						FundCount += 1
						LocalAccountingEntity		= each.AccountingEntity
						LocalAccountingUnit			= each.AccountingUnit
						LocalProject				= each.Project
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalFund 				= each.AccountingUnit
						else
							LocalFund				= each.FinanceDimension1
						LocalFinanceDimension1		= each.FinanceDimension1
						LocalFinanceDimension2		= each.FinanceDimension2
						LocalFinanceDimension3		= each.FinanceDimension3
						LocalFinanceDimension4		= each.FinanceDimension4
						LocalFinanceDimension5		= each.FinanceDimension5
						LocalFinanceDimension6 		= each.FinanceDimension6
						LocalFinanceDimension7		= each.FinanceDimension7
						LocalFinanceDimension8		= each.FinanceDimension8
						LocalFinanceDimension9		= each.FinanceDimension9
						LocalFinanceDimension10 	= each.FinanceDimension10
						LocalFundAmount  			= sum LocalAssetItemFundsRel.TransactionAmount
						LocalPercentContribution		= (LocalFundAmount / LocalTotalFundAmount)
						if (LocalPercentContribution entered)
							invoke Create LocalFundRel
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Asset					= Asset
								invoked.FinanceDimension1		= LocalFinanceDimension1
								if (FundCount < LocalCounter)
									invoked.TransactionAmount		= LocalFundAmount
									invoked.PercentContribution 	= LocalPercentContribution
									AllocatedPercent				+= LocalPercentContribution
									AllocatedAmount 				+= LocalFundAmount
								else
									invoked.TransactionAmount		= LocalTotalFundAmount - AllocatedAmount
									invoked.PercentContribution 	=  1 - AllocatedPercent

					if (AssetItemTransferFundsRel exists)
						include RefreshAssetTransferFunds
						if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
							LocalToAssetForTransfer		= UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
							invoke Delete ToAssetItemFundsRel  
							for each AssetItemTransferFundsRel
								invoke CreateFromItem AssetItemFund
									invoked.Asset		= LocalToAssetForTransfer
									fill in fields from each
							invoke UpdateFundAllocation LocalToAssetForTransfer
			else
				if (UnreleasedAssetTransferRel exists)
					if (UnreleasedAssetTransferRel.FullOrPartial = "P")
						invoke UpdateToAssetFund AssetTransferFundsRel

				AllocatedPercent						= sum AssetFundsRel.PercentContribution
				initialize LocalCounter
				initialize LocalTotalFundAmount
				FundCount 								= instance count of AssetFundsRel
				for each AssetFundsRel
					LocalCounter 						+= 1
					LocalPercentContribution 			= each.PercentContribution
					invoke RefreshFundAmount each
						if (LocalCounter 					= FundCount)
							if (AllocatedPercent = 1)
								invoked.PrmTransactionAmount 	= (ItemTotalTransactionCost - LocalTotalFundAmount)
							else
								LocalFundAmount					= ItemTotalTransactionCost * each.PercentContribution
								invoked.PrmTransactionAmount 	= LocalFundAmount
								LocalTotalFundAmount			+= LocalFundAmount
						else
							LocalFundAmount					= ItemTotalTransactionCost * each.PercentContribution
							invoked.PrmTransactionAmount 	= LocalFundAmount
							LocalTotalFundAmount			+= LocalFundAmount

		ApplyItemCostChangeToAssetFunds
			if (sum AssetFundsRel.TransactionAmount not = ItemTotalTransactionCost)
				initialize LocalCounter
				initialize LocalTotalFundAmount
				FundCount 								= instance count of AssetFundsRel
				for each AssetFundsRel
					LocalCounter 						+= 1
					LocalPercentContribution 			= each.PercentContribution
					invoke RefreshFundAmount each
						if (LocalCounter 					= FundCount)
							invoked.PrmTransactionAmount 	= (ItemTotalTransactionCost - LocalTotalFundAmount)
						else
							LocalFundAmount					= ItemTotalTransactionCost * each.PercentContribution
							invoked.PrmTransactionAmount 	= LocalFundAmount
							LocalTotalFundAmount			+= LocalFundAmount


		PartialFundUpdate
			for each AssetItemFundsRel
				LocalPercentContribution 	= each.PercentContribution
				LocalFundAmount				= each.DerivedItemCost
				invoke Update each
					invoked.PercentContribution = LocalPercentContribution
					invoked.TransactionAmount 	= LocalFundAmount * LocalPercentContribution

		UpdateAssetFundRecords
			for each AssetFundsRel   
				invoke UpdateFromItemFund each

		GenerateTransferFunds
			if (FundAccounting)
				if (TransientFullTransfer)
					if (FundOverride)
						if (AssetTransferFundsRel exists)
							if (!TransientFromReset)
								invoke DeleteFromAsset AssetFundsRel
								invoke DeleteFromAsset AssetFundOldRel
								invoke DeleteFromAsset AssetItemFundsRel
								for each AssetTransferFundsRel
									LocalTransferFund	= each.FinanceDimension1
									invoke Create AssetFund
										if (each.Fund not entered)
											if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
												constraint (each.AccountingUnit entered)
													"FundDimensionIsRequired"
												invoked.Fund = each.AccountingUnit
											else
												constraint (each.FinanceDimension1 entered)
													"FundDimensionIsRequired"
												invoked.Fund = each.FinanceDimension1
										fill in fields from each
											except invoked.TransactionAmount

					else
						if (AssetItemTransferFundsRel exists)
							if (!TransientFromReset)
								invoke DeleteFromAsset AssetFundsRel
								invoke DeleteFromAsset AssetFundOldRel
								invoke DeleteFromAsset AssetItemFundsRel
								for each AssetItemTransferFundsRel
									LocalTransferItem	= each.AssetItem
									LocalTransferFund	= each.FinanceDimension1
									invoke Create AssetItemFund
										invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										if (each.Fund not entered)
											if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
												constraint (each.AccountingUnit entered)
													"FundDimensionIsRequired"
												invoked.Fund = each.AccountingUnit
											else
												constraint (each.FinanceDimension1 entered)
													"FundDimensionIsRequired"
												invoked.Fund = each.FinanceDimension1
										fill in fields from each
								if (!FundOverride)
									invoke UpdateFundAllocation
				else
					if (CreateFromBatch
					and TransientPartialTransfer)
						if (FundOverride)
							if (UnreleasedAssetTransferRel exists)
								if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
									invoke UpdateToAssetFund AssetTransferFundsRel
				invoke Delete AssetTransferFundsRel
				invoke Delete AssetItemTransferFundsRel

		InitiateApprovalProcessFlow
			initiate AssetApproval process
				title is "ApprovalFor<AssetProcess>ofAsset<Asset>-<Description>"
				Variables
					FinanceEnterpriseGroup
					Asset
					AssetProcess
					Description
					DerivedStatus
					ApprovalStatus
				URLs
					"<linkback(webapp is JournalApprover navigation is ProcessFlowForm text is \"ViewAssetDocument\")>"

		CreateAssetReviewDetail
			LocalAssetReview  =  PrmAssetReview
			if(!AssetReviewDetailRel exists)
				invoke Create AssetReviewDetail
					if(Company.CopyUserFields)
						fill in user fields from this instance
					invoked.Company  				= PrmCompany
					invoked.AssetReview				= PrmAssetReview
					invoked.Asset					= Asset
					invoked.AssetType				= AssetType
					invoked.AssetCost				= ItemTotalTransactionCost
					invoked.AssetOwner				= AssetOwner
					invoked.AssetDimensionGroup		= AssetAccountingUnitGroup
					invoked.AssetLocation			= AssetLocation
					invoked.AssetDivision			= AssetDivision
					invoked.ReviewStatus			= 1
					if (Company.ApprovalLevel.Company)
						invoked.ApprovalCode   = Company.ReviewApprovalCode
					else
					if (Company.ApprovalLevel.AssetDimensionGroup)
						invoked.ApprovalCode   = AssetAccountingUnitGroup.ReviewApprovalCode

		ValidateStructureRelations
			LocalCodeBlockRelationArray		= FinanceEnterpriseGroupExtRel.CodeBlockRelationString
			LocalArraySize					= FinanceEnterpriseGroupExtRel.CodeBlockRelationString size
			LocalNoOfRelations				= (LocalArraySize / 10)
			LocalRelationIdx       	    	= 1
			while (LocalRelationIdx		<= LocalNoOfRelations)
				LocalCodeBlockRelation		= LocalCodeBlockRelationArray.CodeBlockRelationGroup[LocalRelationIdx].BlockRelation
				LocalFromField				= LocalCodeBlockRelationArray.CodeBlockRelationGroup[LocalRelationIdx].FromField
				LocalToField				= LocalCodeBlockRelationArray.CodeBlockRelationGroup[LocalRelationIdx].ToField
				if (LocalFromField = 0)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.Ledger
					LocalFromLabel				= FinanceEnterpriseGroup.LedgerMessage
				else
				if (LocalFromField = 1)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.ToAccountingEntity
					LocalFromLabel				= FinanceEnterpriseGroup.AccountingEntityLabel
				else
				if (LocalFromField = 2)
					LocalKeyFromValue			= DerivedEntityAccountingUnit
					LocalFromLabel				= FinanceEnterpriseGroup.AccountingUnitLabel
				else
				if (LocalFromField = 3)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.GeneralLedgerChartAccount
					LocalFromLabel				= FinanceEnterpriseGroup.AccountLabel
				else
				if (LocalFromField = 4)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.Project
					LocalFromLabel				= FinanceEnterpriseGroup.ProjectLabel
				else						
				if (LocalFromField = 6)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension1
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension1Label
				else
				if (LocalFromField = 7)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension2
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension2Label
				else
				if (LocalFromField = 8)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension3
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension3Label
				else
				if (LocalFromField = 9)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension4
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension4Label
				else
				if (LocalFromField = 10)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension5
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension5Label
				else
				if (LocalFromField = 11)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension6
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension6Label
				else
				if (LocalFromField = 12)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension7
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension7Label
				else
				if (LocalFromField = 13)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension8
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension8Label
				else
				if (LocalFromField = 14)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension9
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension9Label
				else
				if (LocalFromField = 15)
					LocalKeyFromValue			= LocalFinanceCodeBlockFull.FinanceDimension10
					LocalFromLabel				= FinanceEnterpriseGroup.FinanceDimension10Label

				if (LocalToField = 0)
					LocalKeyToValue				= LocalFinanceCodeBlockFull.Ledger
					LocalToLabel				= FinanceEnterpriseGroup.LedgerMessage
				else
				if (LocalToField = 1)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.ToAccountingEntity
					LocalToLabel				= FinanceEnterpriseGroup.AccountingEntityLabel		
				else
				if (LocalToField = 2)
					LocalKeyToValue 			= DerivedEntityAccountingUnit
					LocalToLabel				= FinanceEnterpriseGroup.AccountingUnitLabel		
				else
				if (LocalToField = 3)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.GeneralLedgerChartAccount
					LocalToLabel				= FinanceEnterpriseGroup.AccountLabel		
				else
				if (LocalToField = 4)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.Project
					LocalToLabel				= FinanceEnterpriseGroup.ProjectLabel		
				else						
				if (LocalToField = 6)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension1
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension1Label		
				else
				if (LocalToField = 7)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension2
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension2Label		
				else
				if (LocalToField = 8)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension3
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension3Label		
				else
				if (LocalToField = 9)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension4
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension4Label		
				else
				if (LocalToField = 10)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension5
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension5Label		
				else
				if (LocalToField = 11)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension6
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension6Label		
				else
				if (LocalToField = 12)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension7
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension7Label		
				else
				if (LocalToField = 13)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension8
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension8Label		
				else
				if (LocalToField = 14)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension9
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension9Label		
				else
				if (LocalToField = 15)
					LocalKeyToValue 			= LocalFinanceCodeBlockFull.FinanceDimension10
					LocalToLabel				= FinanceEnterpriseGroup.FinanceDimension10Label
				if (!CodeBlockRelationDetailRel exists)
					LocalKeyToValueSaved		= LocalKeyToValue
					LocalKeyToValue				= DerivedAllAreValid

























					if (LocalCodeBlockRelation > 0)


						if (CodeBlockRelationDetailRel not exists)	
							invoke Create AssetErrorResult
								invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
								invoked.Company				   = PrmCompany
								invoked.Asset				   = Asset
								invoked.ErrorClass			   = 3
								invoked.ErrorLevel             = 1
								invoked.AssetBatchUpdateResult = PrmCloseBatchResult
								invoked.ErrorMessage		   = "" + InvalidLocalToMessage+ " " + InvalidLocalFromMessage












				
				LocalRelationIdx           	+= 1

	Derived Fields

		CompanyDisplay							is a LabelField
			"Company:<Company.AssetCompanyName>"

		CostAndCurrency 						is a LabelField
			"<ItemTotalTransactionCost>_<Currency>"
		
		CurrencyAndCost 						is a LabelField
			"<Currency>_<ItemTotalTransactionCost>"

		AssetOwnerName							is a LabelField
			"<AssetOwner>-<AssetOwner.Name.FirstAndLastName>"

		DerivedAssetAccountingUnitDimensionCode		is a StringField
			type is Alpha 70
			restricted
			AssetAccountingUnit.DimensionCode
		AssetDisplay							is a LabelField
			"Asset:<Asset>"
		DescriptionDisplay						is a LabelField
			"Description:<Description>"
		TagNumberDisplay						is a LabelField
			"Tag:<TagNumber>"
		StatusDisplay							is a LabelField
			"Status:<DerivedStatus>"
		PostingBookBasisDisplay					is a LabelField
			"Basis:<PostingBookBasis>"
		AssetDescriptionMessage					is a LabelField
			"<Asset>_-_<Description>"
		Reference1CardView						is a LabelField
			"Reference1:<Reference1>"
		Reference1CardViewDisplay				is a DerivedField
			type is MessageField
			if (Reference1 entered)
				return Reference1CardView
			else
				return blank

		Reference2CardView						is a LabelField
			"Reference2:<Reference2>"

		Reference2CardViewDisplay				is a DerivedField
			type is MessageField
			if (Reference2 entered)
				return Reference2CardView
			else
				return blank

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforAssetMaster"

		ContextMessageText is a MessageField
			"Asset<Asset>"

		InvalidLocalToMessage is a MessageField
			restricted
			"Invalid<LocalToLabel>_<LocalKeyToValueSaved>"
			
		InvalidLocalFromMessage is a MessageField
			restricted
			"For<LocalFromLabel>_<LocalKeyFromValue>"

		DerivedAllAreValid is a DerivedField
			type is Alpha 15
			DerivedAllAreValid			 = "_"
			DerivedAllAreValid			+= "ALL"
			DerivedAllAreValid			+= "_"
			DerivedAllAreValid			+= "ARE"
			DerivedAllAreValid			+= "_"
			DerivedAllAreValid			+= "VALID"
			DerivedAllAreValid			+= "_"

		DerivedEntityAccountingUnit	is a StringField
			type is Alpha 40
			restricted
			LocalFinanceCodeBlockFull.ToAccountingEntity
			"-"
			LocalFinanceCodeBlockFull.AccountingUnit

		AssetAndDescription is a DerivedField
			type is Alpha 60
			if (RecordExists)
				return AssetAndDescriptionExisting
			else
				return AssetAndDescriptionNewRecord

		AssetAndDescriptionExisting is a MessageField
			"Asset<Asset>_-_<Description>"

		AssetAndDescriptionNewRecord is a MessageField
			"Asset"

		XiAssetDescriptionAbbreviation is a DerivedField
			type is AlphaUpper 3
			return Description

		ActorCompanySecurityGroup is a DerivedField
			type is like CompanySecurityGroup
			return actor.context.CompanySecurityGroup

        AssetTypeProperty is a DerivedField
            type is like Property
            restricted
            classic name is ATP-PROPERTY
            return AssetType.Property

        CompanyName is a StringField 
            type is like Name
        	holds pii
            restricted
            classic name is GL-NAME
            Company.Name

        CompanyCurrency is a DerivedField
            type is like Currency
            restricted
            classic name is GL-CURR-CODE
            return Company.Currency

        AccountGroupDescription is a DerivedField
            type is like Description
            restricted
            classic name is ACCT-GRP-DESC
            return AssetAccountGroup.Description

        AssetLocationDescription is a DerivedField
            type is like Description
            restricted
            classic name is LOC-DESC
            return AssetLocation.Description

        AssetDivisionDescription is a DerivedField
            type is like Description
            restricted
            classic name is DIV-DESC
            return AssetDivision.Description

        AssetTypeDescription is a DerivedField
            type is like Description
            restricted
            classic name is TYPE-DESC
            return AssetType.Description

        AssetDisposalDisposalMethod is a DerivedField
            type is like DisposalMethod
            restricted
            classic name is ASD-DSP-METHOD
            return AssetDisposalRel.DisposalMethod

        AssetDisposalFullOrPartial is a DerivedField
            type is like FullOrPartial
            restricted
            classic name is ASD-DSP-FL-PRT
            return AssetDisposalRel.FullOrPartial

        AssetDisposalDate is a DerivedField
            type is Date

            classic name is ASD-DSP-DATE
            return AssetDisposalRel.DisposalDate

        AssetDisposalDisposalProperty is a DerivedField
            type is like DisposalProperty
            restricted
            classic name is ASD-DSP-PROP
            return AssetDisposalRel.DisposalProperty

        AssetDisposalDisposalQuantity is a DerivedField
            type is like TotalItemQuantity
            restricted
            classic name is ASD-DSP-QTY
            return AssetDisposalRel.DisposalQuantity

        AssetDisposalProceedsCurrency is a DerivedField
            type is like Currency
            restricted
            classic name is ASD-PROC-CURR
            return AssetDisposalRel.ProceedsCurrency

        AssetDisposalProceeds is a DerivedField
            type is like InternationalAmount
            restricted
            classic name is ASD-PROCEEDS
            return AssetDisposalRel.Proceeds

		ToAssetUnreleasedBalance is a DerivedField
			type is like InternationalAmount
			return (UnreleasedAssetTransferRel.TotalUnreleasedTransactionAmount)

		UnreleasedTransactionTotal is a DerivedField
			type is like InternationalAmount
			return (sum UnreleasedAssetTransactionRel.TransactionAmount)

        AssetDisposalCostOfSaleCurrency is a DerivedField
            type is like Currency
            restricted
            classic name is ASD-COS-CURR
            return AssetDisposalRel.CostOfSaleCurrency

        AssetDisposalCostSale is a DerivedField
            type is like InternationalAmount
            restricted
            classic name is ASD-COST-SALE
            return AssetDisposalRel.CostOfSale

		TotalItemsBaseCost is a DerivedField
			type is like InternationalAmount
			return (sum AssetItemsRel.BaseItemCost)

		NumberOfAssetItems is a DerivedField
			type is Numeric 6
			restricted
			return (instance count of AssetItemsRel)

		LTDDepreciation is a DerivedField
			type is like InternationalAmount
			return (AssetBookRel.LifeToDateDepreciation)

		PostingBookBasis is a DerivedField
			type is like InternationalAmount
			return (first PostingBookRel.Basis)

		PostingBookBookValue is a DerivedField
			type is like InternationalAmount
			return (first PostingBookRel.BookValue)

		OLPostingBookBookValue is a DerivedField
			type is like InternationalAmount
			return (first PostingBookRel.OperatingBookValue)

		LTDDepreciationAllowed is a DerivedField
			type is like InternationalAmount
			restricted
			return (AssetBookRel.LifeToDateDepreciationAllowed)

		TotalDepreciationExpense is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum	EXPTypeTransactionsRel.TransactionAmount)

		TotalAccumulatedDepreciation is a DerivedField
			type is like InternationalAmount
			return (PostingBookRel.LifeToDateDepreciation)

		DepreciationToAssetCost is a DerivedField
			type is Percent size 5.2
			return (TotalAccumulatedDepreciation / ItemTotalBaseCost)

		AssetBookValue is a DerivedField
			type is like InternationalAmount
			return (ItemTotalBaseCost - TotalAccumulatedDepreciation)

		PostingBookValue is a DerivedField
			type is like InternationalAmount
			return (PostingBookRel.Basis)

		DepreciationToAllowableDepreciation is a DerivedField
			type is Percent size 5.2
			restricted
			return (TotalAccumulatedDepreciation / LTDDepreciationAllowed)

		RemainingDepreciation is a DerivedField
			type is like InternationalAmount
			return (LTDDepreciationAllowed - TotalAccumulatedDepreciation)

		PercentOfDepreciableLifeRemaining is a DerivedField
			type is Percent size 5.2
			return ((AssetBookRel.Life - AssetBookRel.LifeRemaining) / AssetBookRel.Life)

		PriorYearDepreciation is a DerivedField
			type is like InternationalAmount
			return (sum	PriorYearACMTransactionsRel.TransactionAmount)

		DerivedCPDepreciation is a DerivedField
			type is like InternationalAmount
			return (AssetBookRel.CurrentPeriodDepreciation)

		LTDDepreciationExpense is a DerivedField
			type is like InternationalAmount
			return (sum EXPTypeTransactionsRel.TransactionAmount)

		DerivedBasis is a DerivedField
			type is like InternationalAmount
			return (AssetBookRel.Basis)

		DerivedNewPostingDate is a DerivedField
			type is Date
			if(AdjustmentInProgress)
				return (AssetAdjustmentRel.PostingDate)
			if(RevalueInProgress)
				return (UnreleasedAssetBookRevaluationRel.PostingDate)
			if(IsRevaluation)
				return (ReleasedAssetBookRevaluationRel.PostingDate)


		UnreleasedMessage				is a MessageField
			restricted
			"Unreleased"
		ReleasedMessage					is a MessageField
			restricted
			"Released"
		LeaseTerminatedMessage			is a MessageField
			restricted
			"LeaseTerminated"
		LeaseDeactivatedMessage			is a MessageField
			restricted
			"LeaseDeactivated"
		DisposedMessage					is a MessageField
			restricted
			"Disposed"
		AdjustmentInProgressMessage		is a MessageField
			restricted
			"AdjustmentInProgress"
		TransferInProgressMessage		is a MessageField
			restricted
			"TransferInProgress"
		DisposalInProgressMessage		is a MessageField
			restricted
			"DisposalInProgress"
		ReinstatementInProgressMessage	is a MessageField
			restricted
			"ReinstatementInProgress"
		RevalueInProgressMessage		is a MessageField
			restricted
			"RevalueInProgress"
		ImpairmentInProgressMessage		is a MessageField
			restricted
			"ImpairmentInProgress"

		DerivedStatus is a DerivedField
			type is Alpha 25
			default label is "Status"
			if (Status.Unreleased)
				if (AssetProcess.Transfer)
					return TransferInProgressMessage
				else
					return UnreleasedMessage
			else
			if (Status.Released)
				if (AssetLease.Lease not entered)
					return ReleasedMessage
				else
				if (AssetLease.Lease.Status.Terminated)
					return LeaseTerminatedMessage
				else
				if (AssetLease.Lease.Status.Deactivated)
					return LeaseDeactivatedMessage
				else
					return ReleasedMessage
			else
			if (Status.Disposed)
				return DisposedMessage
			else
			if (Status.PostRelease)
				if (AssetProcess.Adjustment)
					return AdjustmentInProgressMessage
				else
				if (AssetProcess.Transfer)
					return TransferInProgressMessage
				else
				if (AssetProcess.Disposal)
					return DisposalInProgressMessage
				else
				if (AssetProcess.Reinstatement)
					return ReinstatementInProgressMessage
				else
				if (AssetProcess.Revalue)
					return RevalueInProgressMessage
				else
				if (AssetProcess.Impairment)
					return ImpairmentInProgressMessage

		DerivedLeaseStatus is a DerivedField   
			type is Alpha 30
			if (AssetLease.Lease.Status.Unreleased)
				return "Unreleased"
			else
			if (AssetLease.Lease.Status.Released)
				return "Released"
			else
			if (AssetLease.Lease.Status.Closed)
				return "Closed"
			else
			if (AssetLease.Lease.Status.Termination)
				return "Termination In Progress"
			else
			if (AssetLease.Lease.Status.Modify)
				return "Modification In Progress"
			else
			if (AssetLease.Lease.Status.LeaseAdjustments)
				return "Lease Adjustment In Progress"
			else
			if (AssetLease.Lease.Status.Deactivated)
				return "Deactivated"
			else
			if (AssetLease.Lease.Status.Terminated)
				return "Terminated"

		LeasedAssetID is a MessageField    
			"<AssetLease.Lease>-<AssetLease.Lease.Description>"

		1YearAgo is a DerivedField
			type is Date
			restricted
			return (current corporate date - 1 year)

		HighPurchaseDate is a DerivedField
			type is Date
			return first ItemsByDateDescendingRel.PurchaseDate

		DisplayAssetTransactionDate is a DerivedField
			type is Date
			if (UnreleasedTransactionsExist)
				return (first UnreleasedAssetTransactionRel.TransactionDate)
			else
				return (LastAssetItemPurchaseDate)

		DisposedAssetOriginatingAsset is a DerivedField
			type is like Asset
			return (first DisposedAssetDisposalRel.Asset)

		EnteredQuantity is a DerivedField
			type is like ItemQuantity
			return sum AssetItemsRel.ItemQuantity

		EnteredTransactionCost is a DerivedField
			type is like InternationalAmount
			return sum AssetItemsRel.TransactionItemCost

		EnteredBaseCost is a DerivedField
			type is like InternationalAmount
			restricted
			return sum AssetItemsRel.BaseItemCost

		EnteredTransactionTax is a DerivedField
			type is like InternationalAmount
			restricted
			include CalculateAssetItemTotals
			return ItemTotalTransactionTax

		EnteredBaseTax is a DerivedField
			type is like InternationalAmount
			restricted
			include CalculateAssetItemTotals
			return ItemTotalBaseTax


		DerivedBODStatus is a DerivedField
			type is Alpha 10
			restricted
			if (Status="2")
				return "Open"
			else
			if (Status="3")
				return "Released"
			else
			if (Status="9")
				return "Closed"
			else
				return ""

		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (ActionCode="C")
				return "Add"
			else
			if (ActionCode="U")
				return "Replace"
			else
			if (ActionCode="D")
				return "Delete"
			else
				return ""

		DerivedBODRevision is a DerivedField
			type is Alpha 25
			restricted
			return ""

		DerivedBODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return  bod id.VariationID

		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return current timestamp

		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedBODCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return  create stamp.timestamp

		DerivedAssetCreationDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCreateTimeStamp[1:4] + "-" + DerivedBODCreateTimeStamp[5:6] + "-" + DerivedBODCreateTimeStamp[7:8]

		DerivedBODDisplayID is a DerivedField
			type is Alpha size 25
			restricted
			return Asset

		DerivedAECrossAccountingEntity is a DerivedField
			type is Alpha size 50
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalCrossAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
					return LocalCrossAccountingEntity
				else
					LocalCrossAccountingEntity = LocalCSFCrossReferenceGLC
					return LocalCrossAccountingEntity
			else
				return LocalCrossAccountingEntity

		DerivedAccountingEntity is a DerivedField
			type is Alpha size 20
			restricted
			if(LocalTriggerNoun = "Sync.AssetMaster" and DerivedConfigDocumentID = "Y")
				return DerivedAECrossAccountingEntity
			else
				return FinanceEnterpriseGroup+DerivedDelimiter+Company.AccountingEntity

		DerivedCompany is a DerivedField
			type is Alpha size 10
			restricted
			return Company using "%d"

		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			if(LocalTriggerNoun = "Sync.AssetMaster" and DerivedConfigDocumentID = "Y")
				return Asset
			else
				return DerivedCompany+DerivedDelimiter+Asset

		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + ":" +":"+DerivedDocumentID + ":" +DerivedBODRevision+"?AssetMaster&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value


		DerivedATBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (ActionCode="C" or DerivedBODVariationID <= 1)
				return "Add"
			else
				return "Replace"

		DerivedAsset is a DerivedField
			type is Alpha size 10
			restricted
			return DerivedCompany+DerivedDelimiter+Asset

		DerivedATStatus is a DerivedField
			type is Alpha 10
			restricted
			if (Status="2")
				return "Open"
			else
			if (Status="3")
				return "Open"
			else
			if (Status="9")
				return "Closed"

		DerivedATBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + "::"  +DerivedDocumentID + ":" +"?AssetTransaction&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedPostingDate is a DerivedField
			type is Alpha 25
			restricted
			DerivedPostingDate = LocalTransactionDate
			return DerivedPostingDate[1:4] + "-" + DerivedPostingDate[5:6] + "-" + DerivedPostingDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		AssetMasterBODXML is a DerivedField
			type is XMLDocument
			restricted
			AssetMasterBODXML = template.IONSyncAssetMaster_Asset_Header_ST document for this instance

		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter = "IntegrationApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		FixedAssetXML is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				if(AssetBooksRel exists)
					initialize Localseqnumber
					for each AssetBooksRel
						Localseqnumber +=1
						each.LocaLine = Localseqnumber
						FixedAssetXML +=template.IONSyncAssetMaster_Asset_Header_FixedAssetXML_ST document for each
					return FixedAssetXML
				else
					return ""
			else
				return ""

		AssetItemID is a DerivedField
			type is XMLDocument
			restricted
			if(!action type.Delete)
				if (AssetItemsRel exist)
					for each AssetItemsRel
						AssetItemID += template.IONSyncAssetMaster_Asset_Header_AssetItemID_ST document for each
					return AssetItemID
				else
					return ""
			else
				return ""

		AssetItemDesc is a DerivedField
			type is XMLDocument
			restricted
			if(!action type.Delete)
				if (AssetItemsRel exist)
					for each AssetItemsRel
						AssetItemDesc += template.IONSyncAssetMaster_Asset_Header_AssetItemDesc_ST document for each
					return AssetItemDesc
				else
					return ""
			else
				return ""

		AssetItemSN is a DerivedField
			type is XMLDocument
			restricted
			if(!action type.Delete)
				if (AssetItemsRel exist)
					for each AssetItemsRel
						AssetItemSN += template.IONSyncAssetMaster_Asset_Header_AssetItemSN_ST document for each
					return AssetItemSN
				else
					return ""
			else
				return ""

		AssetTransactionBODXML is a DerivedField
			type is XMLDocument
			restricted
			AssetTransactionBODXML = template.IONSyncAssetTransaction_Asset_Header_ST document for this instance

		DerivedSummaryGroupBaseCost is a DerivedField
			type is like InternationalAmount
			return sum AssetSummaryGroupRel.ItemTotalBaseCost

		DerivedSummaryGroupTransactionCost is a DerivedField
			type is like InternationalAmount
			return sum AssetSummaryGroupRel.ItemTotalTransactionCost

		LastAssetImpairment is a DerivedField
			type is like AssetImpairment
			return first LastAssetImpairmentRel.AssetImpairment

		DefaultAssetCategory is a DerivedField
			type is AlphaUpper 1
			restricted
			if (LeasedAsset)
				if (AssetLease.Lease.LeaseClassification.Finance
				and !AssetLease.Lease.LandAndBuilding.LandOnly
				and !AssetLease.Lease.ShortTermGASBLease)
					return "D"
				else
					if (AssetLease.Lease.LeaseClassification.Operating
					or AssetLease.Lease.ShortTermGASBLease)
						return "N"
			else
				return "D"


		DerivedPAMBODID is a DerivedField
			type is Alpha 200
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + ":" +":"+DerivedDocID + ":" +DerivedBODRevision+"?AssetMaster&verb=Process&TrackerID=" + LocalFSMInboundBODTracker

		DerivedDocID is a DerivedField
			type is Alpha size 60
			restricted
			return Reference1

		DerivedAssetCategory is a DerivedField
			type is Alpha size 25
			restricted
			if (AssetCategory = "D")
				return "Depreciable"
			else
				return "NonDepreciable"

		DerivedProcessAMStatus is a DerivedField
			type is Alpha size 25
			restricted
			if (Status="2")
				return "Open"
			else
				return "Released"

		DerivedPurchaseDate is a DerivedField
			type is Alpha size 25
			restricted
			for each AssetItemsRel
				DerivedPurchaseDate = each.PurchaseDate
			return DerivedPurchaseDate[1:4] + "-" + DerivedPurchaseDate[5:6] + "-" + DerivedPurchaseDate[7:8]

		ProcessAssetMasterBODXML is a DerivedField
			type is XMLDocument
			restricted
			ProcessAssetMasterBODXML = template.IONProcessAssetMaster_Asset_Header_ST document for this instance

		ProcessAssetItemID is a DerivedField
			type is XMLDocument
			restricted
			if (AssetItemsRel exist)
				for each AssetItemsRel
					ProcessAssetItemID += template.IONProcessAssetMaster_Asset_Header_AssetItemID_ST document for each
				return ProcessAssetItemID
			else
				return ""

		ProcessAssetItemInstance is a DerivedField
			type is XMLDocument
			restricted
			if (AssetItemsRel exist)
				for each AssetItemsRel
					ProcessAssetItemInstance += template.IONProcessAssetMaster_Asset_Header_AssetItemInstance_ST document for each
				return ProcessAssetItemInstance
			else
				return ""
		MassReleaseCompleteMessage is a MessageField
			restricted
			"MassReleaseComplete;SeeResultsRecord"


		DerivedConfigDocumentID is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedConfigFEG is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedBODAccountingEntity is a DerivedField
			type is Alpha size 60
			restricted
			if(LocalTriggerNoun = "Sync.AssetMaster" and DerivedConfigDocumentID = "Y")
				return DerivedAECrossAccountingEntity
			else
				return Company.GeneralLedgerCompany.AccountingEntity

       	TransferFromAsset is a DerivedField

       		type is like Asset
       		return first ToAssetTransferRel.Asset


       	DerivedDocumentDateTime is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				return DerivedAssetCreationDate
			else
				return ""


		DerivedAssetCreateDateTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				return DerivedAssetCreationDate + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
			else
				return ""

		DerivedLastModificationDate is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedIntegrationApplication="Local.ly")
				return DerivedBODFormattedCurrentTimeStamp
			else
				return ""


		RoundedTransactionAmount is a DerivedField
			type is like InternationalAmount	
    		restricted
    		if (LocalAmount entered)
	    		RoundedTransactionAmount	      = LocalAmount
	    		round RoundedTransactionAmount to nearest DerivedRoundTo
	    		return RoundedTransactionAmount

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			return LocalNumberOfDecimals

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		AssetTransferFullOrPartial is a DerivedField
            type is like FullOrPartial
            return UnreleasedAssetTransferRel.FullOrPartial

		AssetWidgetDisposalFullOrPartial is a DerivedField
            type is like FullOrPartial
            return AssetDisposalRel.FullOrPartial

		AssetBaseItemCost is a DerivedField
			type is like InternationalAmount
			return (LocalCurrencyRate * ItemTotalTransactionCost)

		DerivedNumberOfAssets is a DerivedField
			type is Numeric 3
			return instance count of Asset.AssetLease.Lease.AssetsRel

		TransferFromCompany is a DerivedField
       		type is like Asset
			restricted
       		return first ToAssetTransferRel.Company

	Conditions

		IsAssetEdit
			when (Status.Unreleased
			or    Status.Released
			or (Status.PostRelease
			and	  AssetProcess.Adjustment))


		IsNotWorkInProcessAndPostReleaseAsset
			restricted
			when(AssetEntered 
			and IsUnreleased 
			and !InterfaceInProgress 
			and !WorkInProcess)

		RecordExists
			restricted
			when (Asset exists)
			
		RevalueTransactionsExists
			restricted
			when (RevalueTransactionsRel exists)
		
		RevalueBookTransactionsExists
			restricted
			when (RevalueBookTransactionsRel exists)


		AllAssetTransactions
			restricted
			when (AssetTransactionsRel exists)

		AllAssetBookTransactions
			restricted
			when (AllAssetBookTransactionsRel exists)

		ACMAssetTransactions
			restricted
			when(ACMTypeTransactionsRel exists)

		IsAssetSearchFieldsUpdated
			restricted
			when (Asset changed
			or Description changed
			or TagNumber changed
			or Reference1 changed
			or Reference2 changed)

        AccumulatedDepreciationAccountingUnitEntered
        	restricted
            classic name is ACCUM-AU-EXIST
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit entered)

        NonDisposedAssetBookAdjustmentExists
        	restricted
            classic name is ADJ-BK-EXIST
            when (first AssetBookAdjustmentsRel exists
            and   not Status.Disposed)

        AssetTypeAllocationExists
        	restricted
            classic name is ALLOC-EXISTS
            when (first AssetTypeAllocationsRel exists)

        AssetDisposalMethodExchanged
        	restricted
            classic name is ASD-EXCHANGE
            when (AssetDisposalRel.DisposalMethod.Exchanged)

        AssetAccountingUnitGroupAssetAccountingUnitEntered
        	restricted
            classic name is ASSET-AU-EXIST
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.AssetAccountingUnit entered)

        AssetEntered
            classic name is ASSET-EXIST
            when (Asset entered)

        AssetGroupEntered
            classic name is ASSETGRP-EXIST
            when (AssetGroup entered)

        AssetGroupExists
        	restricted
            classic name is ASTGROUP-EXIST
            when (AssetGroup exists)

        AssetAccountingUnitGroupEntered
        	restricted
            classic name is AU-GROUP-EXIST
            when (AssetAccountingUnitGroup entered)

        ClassificationFinance
            classic name is CAPITAL
            when (Classification.Finance)

        AssetAccountingUnitGroupClearingAccountingUnitEntered
        	restricted
            classic name is CLEAR-AU-EXIST
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.ClearingAccountingUnit entered)

        IsUnreleased
            classic name is COLUMN-LABELS
            when (Status.Unreleased)

		HasUnreleasedTransactions
			when (UnreleasedAssetTransactionsRel exists)

		HasReleasedTransactions
			when (ReleasedAssetTransactionsRel exists)

		HasReleasedBookTransactions
			when(ReleasedBookTransactionsRel exists)

		HasUnreleasedBookTransactions
			when (UnreleasedBookTransactionsRel exists)

		UnreleasedTransactionsExists
			when (Company.DisplayJournalEntries
			and (HasUnreleasedTransactions
			or HasUnreleasedBookTransactions
			or Status.PostRelease
			or Status.Unreleased))

		ReleasedTransactionsExists
			when (Company.DisplayJournalEntries
			and (HasReleasedBookTransactions
			or HasReleasedTransactions))

		IsPostRelease
			restricted
			when (Status.PostRelease)

		RequestAssetValidation
			when (Status.PostRelease
			or (Status.Unreleased
			and AssetProcess.Transfer))

		ToAssetFromDisposalOrTransfer
			when ((Status.PostRelease
			and AssetProcess.Disposal
			and OriginalAssetRel exists)
			or (Status.Unreleased
			and AssetProcess.Transfer
			and IncompleteTransferRel exists))

		FromAssetDisposal
			when (Status.PostRelease
			and AssetProcess.Disposal
			and UnreleasedAssetDisposalCreated)

		FromBookDisposal
			when (Status.PostRelease
			and AssetProcess.Disposal
			and UnreleasedAssetDisposalCreated
			and FullPostReleaseBookDisposal)

		ToAssetDisposal
			when (Status.PostRelease
			and AssetProcess.Disposal
			and OriginalAssetRel exists)

		IsAssetDisposal
			when (ToAssetDisposal
			or FromAssetDisposal)

		AllowRelease
			restricted
			when (IsAssetDisposal
			or RevalueInProgress)

		IsNonDepreciable
			restricted
			when (AssetCategory.NonDepreciable)

        CompanyEntered
            classic name is COMPANY-EXIST
            when (Company exists)

        HasOwner
			when (AssetOwner entered)

		IsCompanyAsset
			restricted
			when (Company.TransactionReference.CompanyAsset)

        AssetAccountingUnitGroupCostAccountingUnitEntered
        	restricted
            classic name is COST-AU-EXISTS
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.DisposalExpenseAccountingUnit entered)

        AssetAccountingUnitGroupDeferredGainAccountingUnitEntered
        	restricted
            classic name is DEFGN-AU-EXIST
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.DeferredGainAccountingUnit entered)

        AssetAccountingUnitGroupDeferredLossAccountingUnitEntered
        	restricted
            classic name is DEFLS-AU-EXIST
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.DeferredLossAccountingUnit entered)

        HasDepreciationProject
        	restricted
            classic name is DEP-EXP-ACTVTY
            when (DepreciationExpenseProject.Project entered)

        AssetAccountingUnitGroupExpenseAccountingUnitEntered
        	restricted
            classic name is DEPR-AU-EXISTS
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit entered)

        NotDisposedAndDisplayJournalEntries
        	restricted
        	when (((Company.DisplayJournalEntries
        	and  HasUnreleasedTransactions)
 			and  (IsPostRelease
 			and  (AssetProcess.Adjustment
 			or 	  AssetProcess.Transfer
 			or    AssetProcess.Disposal
 			or 	  AssetProcess.Impairment
 			or 	  AssetProcess.Revalue)))
 			or	 (AssetProcess.Adjustment
 			and	  UnreleasedAssetAdjustmentExists))

		ReinstatedAndDisplayJournalEntries
        	restricted
        	when (Company.DisplayJournalEntries
        	and  HasUnreleasedTransactions
 			and  IsPostRelease
 			and  AssetProcess.Reinstatement)

 		ReinstatedBookEntries
        	restricted
        	when (Company.DisplayJournalEntries
        	and  HasUnreleasedBookTransactions
 			and  IsPostRelease
 			and  AssetProcess.Reinstatement)

		AssetCreatePostingTransactionList
			restricted
        	when ((Company.DisplayJournalEntries
        	and  HasUnreleasedTransactions)
 			and  IsUnreleased
 			and  UnreleasedTransactionsExist)

  		NotPostingBookDisplayJournalEntries
        	when (((Company.DisplayJournalEntries
        	and  HasUnreleasedBookTransactions)
        	and  ((IsUnreleased
        	and  NonPostingBooksRel exists)
 			or   (IsPostRelease
 			and (AssetProcess.Adjustment
 			or 	 AssetProcess.Transfer
 			or 	 AssetProcess.Disposal
 			or 	 AssetProcess.Impairment
 			or	 AssetProcess.Revalue))))
 			or	(AssetProcess.Adjustment
 			and	 UnreleasedAssetAdjustmentExists))

 		HasTag
 			when (TagNumber entered)

 		IsReleased
 			restricted
 			when (Status.Released)

		IsReleasedOrUnreleased
 			restricted
 			when (Status.Released
			or Status.Unreleased)        
		
		IsDisposed
        	restricted
            when (Status.Disposed)

        IsDisposedNotUpdatable
        	restricted
            classic name is DSP-NOT-UPDATE
            when (Status.PostRelease
            and   AssetProcess.Disposal
            and   DisposedAsset entered)

        IsEnteredOrPostActiveProcess
        	restricted
            classic name is ENTRD-POST-ACT
            when (Status.Unreleased
            or    Status.PostRelease)

        AssetAccountingUnitGroupGainAccountingUnitEntered
        	restricted
            classic name is GAIN-AU-EXISTS
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.GainAccountingUnit entered)

        LeaseExists
            when (AssetLease.LeaseCompany entered
            and   AssetLease.Lease entered
            and   AssetLease.Lease exists)

		DisplayOnlyLeaseFields
			when (LeaseExists
			and ThisRecordRel exists)

        AssetAccountingUnitGroupLossAccountingUnitEntered
        	restricted
            classic name is LOSS-AU-EXISTS
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.LossAccountingUnit entered)

        IsNotDisposed
        	restricted
            when (not Status.Disposed)

        IsOperating
            when (Classification.Operating)

        IsPartiallyDisposed
        	restricted
            classic name is PARTIAL-DISPOS
            when (first AssetItemDisposalsRel exists
            and   not Status.Disposed
            and   not Status.PostRelease)

        AssetAccountingUnitGroupDisposalAccountingUnitEntered
        	restricted
            classic name is PROC-AU-EXISTS
            when (AssetAccountingUnitGroup exists
            and   AssetAccountingUnitGroup.ProceedsAccountingUnit entered)

        IsPurchased
            when (Classification.Purchased
            or    Classification not entered)

        AssetReinstatementExists
        	restricted
            classic name is REINST-EXIST
            when (first AssetReinstatementsRel exists)

        TagNumberEntered
            classic name is TAG-EXIST
            when (TagNumber entered)

        AssetTransactionExists
        	restricted
            classic name is TRANS-EXIST
            when (first ReleasedAssetTransactionsRel exists)

        AssetBookTransferIsDisposed
        	restricted
            classic name is TRF-BK-EXIST
            when (first AssetBookTransfersRel exists
            and   not Status.Disposed)

        IsUpdated
        	restricted
            when (Status.Released)

        IsWorkInProcess
        	restricted
            classic name is WIP
            when (Status.Unreleased)

		IsFundUnreleased
			restricted
			when (Status.Unreleased
			and (FundOverride = false
			or (FundOverride = true
			and ManualAllocationComplete)))

		ManualAllocationComplete
			restricted
			when (sum AssetFundsRel.PercentContribution = 1)

        IsWorkInProcessAndTagNumberEntered
        	restricted
            classic name is WIP-TAG
            when (Status.Unreleased
            and   TagNumber entered)

		AccountFieldsUpdated
			restricted
			when ((AssetType changed)
			or (AssetAccountingUnit changed)
			or (AssetAccountGroup changed)
			or (AssetAccountingUnitGroup changed))

		FullDisposed
			when (AssetDisposalRel.FullOrPartial.Full
			and Status.Disposed)











		IsBookDisposal
			when (AssetDisposalRel.IsBookDisposal)

		PartialDisposal
			when (AssetDisposalRel.FullOrPartial.Partial)

		AssetItemsExist
			restricted
        	when (AssetItemsRel exists)

		AllowLeasedAssetModification 
			restricted
			when (AssetLease.Lease.Status.Unreleased
			or AssetLease.Lease.Status.Modify
			or AssetLease.Lease.Status.Impairment
			or AssetLease.Lease.Status.LeaseAdjustments)
			

		DisplayAdjustmentDate
			when (Status.Released
			and Asset entered)

		NotDisposed
			restricted
			when (Status.Unreleased
			or    Status.Released
			or    Status.PostRelease)

		UnreleasedTransactionsExist
			restricted
			when (UnreleasedAssetTransactionRel exists)

		UnreleasedWithUnreleasedTransactions
			restricted
			when (Status.Unreleased
			and (UnreleasedAssetTransactionRel exists
			or UnreleasedBookTransactionsRel exists))

		DisplayUnreleasedToAssetTransactions
			when (UnreleasedToAssetTransferRel exists
			or UnreleasedToAssetDisposalRel exists)

		PostReleaseWithUnreleasedTransactions
			restricted
			when (Status.PostRelease
			and !AdjustmentInProgress
			and (UnreleasedAssetTransactionRel exists
			or UnreleasedBookTransactionsRel exists))

		UnreleasedAssetAdjustmentExists
			restricted
			when (UnreleasedAssetAdjustmentRel exists)

		AssetTransferExists
			restricted
			when (AssetTransfer set exists)

		AssetReportAssetTransferExists
			restricted
			when (AssetTransferExists)

		AssetImpairmentsExists
			restricted
			when (AssetImpairmentsRel exists)

		AssetRevaluationsExists
			restricted
			when (AssetRevaluationsRel exists)

		AssetBookRevaluationsExists
			restricted
			when (AssetBookRevaluationsRel exists)

		AssetReportAssetRevaluationsExists
			restricted
			when (AssetRevaluationsExists)

		AssetAdjustmentExists
			restricted
			when (AssetAdjustment set exists)

		AssetReportAssetAdjustmentExists
			restricted
			when (AssetAdjustmentExists)

		AssetDisposalExists
			restricted
			when (AssetDisposal set exists)

		AssetReportDisposalExists
			restricted
			when (AssetDisposalExists)

		AssetRepairExists
			restricted
			when (AssetRepairsRel exists)

		AssetReportRepairsExist
			restricted
			when (AssetRepairExists)

		UnreleasedAssetTransferExists
			restricted
			when (UnreleasedAssetTransfersRel exists)

		AssetBookDisposalExists
			when (AssetBookDisposalsRel exists)


		UnreleasedAssetReinstatementsExists
			restricted
			when (UnreleasedAssetReinstatementsRel exists)

		UnreleasedAssetDisposalCreated
			restricted
			when (UnreleasedAssetDisposalRel exists)

		UnreleasedPartialAssetDisposalCreated
			restricted
			when (Status.PostRelease
			and UnreleasedAssetDisposalRel exists
			and UnreleasedAssetDisposalRel.PartialDisposal)

		UnreleasedFullAssetDisposalCreated
			restricted
			when (Status.PostRelease
			and UnreleasedAssetDisposalRel exists
			and UnreleasedAssetDisposalRel.FullDisposal)

		UnreleasedAssetImpairmentExists
			restricted
			when (UnreleasedAssetImpairmentRel exists
			and Status.PostRelease)

		ReleaseImpairmentIsValid
			restricted
			when (UnreleasedAssetImpairmentRel exists
			and ImpairmentBooksWithUnreleasedTransactionsRel exists
			and Status.PostRelease)

		AllowAssetImpairmentRelease
			when (ReleaseImpairmentIsValid
			and !ToAssetFromDisposalOrTransfer)

		AllowAssetImpairmentReset
			when (UnreleasedAssetImpairmentExists
			and !ToAssetFromDisposalOrTransfer)

		HasUnreleasedImpairmentAdjustment
			when (first LastAssetImpairmentRel.UnReleasedTransactionsExist
			and	 first LastAssetImpairmentRel.Status.PostRelease)

		UpdateAllow
			when (AssetProcess.Adjustment
			and	 !HasUnreleasedImpairmentAdjustment)

		ReleasedAssetImpairmentExists
			restricted
			when (ReleasedAssetImpairmentRel exists)

		HasImpairment
			restricted
			when (AssetImpairmentRel exists)

		AssetReportAssetImpairmentsExists
			when (HasImpairment)

		ResetDisposalIsValid
			restricted
			when (UnreleasedAssetDisposalRel exists)


		PostHistoryActionIsVisible
			restricted
			when (PostHistoryBookRel exists
			and Status.Unreleased)

		PostReleaseAndNeedsRelease
			restricted
			when   (Status.PostRelease
			and     UnreleasedAssetAdjustmentExists
			or 		UnreleasedAssetTransferExists)

		UnreleasedAndNeedsRelease
			restricted
			when   (Status.Unreleased
			and		!FromTransfer
			and 	AssetItemsRel exists
			and 	AssetBooksRel exists)

		PostReleaseDisposal
			restricted
			when (Status.PostRelease
			and UnreleasedAssetDisposalCreated)


		AllowPostReleaseRelease
			restricted
			when ((Status.PostRelease
			and UnreleasedAssetDisposalCreated)
			and !UnreleasedAssetDisposalRel.DisposalQuantityError)

		FullPostReleaseDisposal

			when (Status.PostRelease
			and UnreleasedAssetDisposalCreated
			and !IsBookDisposal)

		FullPostReleaseBookDisposal
			restricted
			when (Status.PostRelease
			and UnreleasedAssetDisposalCreated
			and IsBookDisposal)

		AdjustmentAllowed
			restricted
			when ((Status.Released
			and  (AssetProcess not entered
			or    AssetProcess.Addition))
			or 	 !UnreleasedAssetDisposalCreated
			or 	 !AssetDisposalExists)

		AdjustmentInProgress
			restricted
			when (Status.PostRelease
			and	  AssetProcess.Adjustment)

		TransferAllowed
			restricted
			when (Asset entered
			and	  Status.Released
			and  (AssetProcess not entered
			or    AssetProcess.Addition)
			and   UnreleasedAssetTransfersRel not exists)  

		RevalueAllowed
			restricted
			when (Asset entered
			and	  Status.Released
			and  (AssetProcess not entered
			or    AssetProcess.Addition)
			and   Company.Revalue
			and	  AssetType.Revalue)

		ImpairmentAllowed
			restricted
			when (AssetType.Impairment
			and Status.Released
			and !IsNonDepreciable
			and HasImpairmentBook)

		AllowImpairment
			when (ImpairmentAllowed
			and !IsRevaluation
			and HasNonZeroBasisBooks)

		HasNonZeroBasisBooks
			when (any AssetBooksRel.Basis entered)

		FromTransfer
			restricted
			when (Status.Unreleased
			and   AssetProcess.Transfer)

		ManualApprovalValid
			restricted
			when (PfiUserTaskRel exists
			and ApprovalStatus.Submitted)

		SubmittedOrRejected
			when (ApprovalStatus.Submitted
			or ApprovalStatus.Rejected)

		ReleaseValid
			restricted
			when (!FromTransfer
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		UpdateValid
			restricted
			when (!FromTransfer
			and !ApprovalStatus.Submitted)

		PostRelReleaseValid
			restricted
			when (!AllowRelease
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		PostReleaseUpdateValid
			restricted
			when (UpdateAllow
			and !ApprovalStatus.Submitted)

		UnreleasedPostingDateUpdateValid
			restricted	
			when (UnreleasedWithUnreleasedTransactions
			and !ApprovalStatus.Submitted)

		PostReleasePostingDateValid
			restricted
			when (PostReleaseWithUnreleasedTransactions
			and !ApprovalStatus.Submitted)

		ApprovalUnreleasedAndNeedsRelease
			restricted
			when (UnreleasedAndNeedsRelease
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalPostReleaseAndNeedsRelease
			restricted
			when (PostReleaseAndNeedsRelease
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalFullPostReleaseBookDisposal
			restricted
			when (FullPostReleaseBookDisposal
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalFullPostReleaseDisposal
			restricted
			when (FullPostReleaseDisposal
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalUnreleasedAssetReinstatementsExists
			restricted
			when (UnreleasedAssetReinstatementsExists
			and !ApprovalStatus.Submitted)

		ApprovalReleaseReinstatementValid
			restricted
			when (UnreleasedAssetReinstatementsExists
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalAllowAssetImpairmentRelease
			restricted
			when (AllowAssetImpairmentRelease
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalRevalueReleaseValid
			restricted
			when (RevalueInProgress
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		ApprovalRevalueInProgress
			restricted
			when (RevalueInProgress
			and !ApprovalStatus.Submitted)

		ApprovalUnreleasedAssetAdjustmentExists
			restricted
			when (UnreleasedAssetAdjustmentExists
			and !ApprovalStatus.Submitted)

		ApprovalUnreleasedAssetTransferExists
			restricted
			when (UnreleasedAssetTransferExists
			and !ApprovalStatus.Submitted)

		ApprovalReleaseTransferVisible
			restricted	
			when (UnreleasedAssetTransferExists
			and !Company.NeedsApproval)

		ApprovalResetDisposalIsValid
			restricted
			when (ResetDisposalIsValid
			and !ApprovalStatus.Submitted)

		ApprovalAllowAssetImpairmentReset
			restricted
			when (AllowAssetImpairmentReset
			and !ApprovalStatus.Submitted)

		ApprovalUnreleasedAssetDisposalCreated
			restricted
			when (UnreleasedAssetDisposalCreated
			and !ApprovalStatus.Submitted)

		ApprovalFromAssetDisposal
			restricted
			when (FromAssetDisposal
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))
			
		ApprovalPostReleaseDisposal
			restricted
			when (PostReleaseDisposal
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))
			
		ApprovalUpdateAllow
			restricted
			when (UpdateAllow
			and (!Company.NeedsApproval
			or (Company.NeedsApproval
			and ApprovalStatus.Approved)))

		PostingDateValidation
			when (UnreleasedAssetTransferExists
			or UnreleasedAssetDisposalCreated
			or UnreleasedAssetReinstatementsExists
			or RevalueInProgress
			or UnreleasedAssetImpairmentExists
			or Asset not entered
			or (Status.Unreleased
			and !TransactionsExists))

		CreatedByDisposal
			restricted
			when (AssetProcess.Disposal
			and DisposedAsset entered
			and DisposedAsset != Asset)

		CreatedByOtherAction
			restricted
			when (AssetProcess.Reinstatement
			or AssetProcess.Transfer
			or AssetProcess.Adjustment)

		LeasedAsset
			when (AssetLease entered)

		LeaseEligible
			restricted
			when (Status.Unreleased
			and !AssetItemsExist)

		LeaseDisplayOnly
			restricted
			when (LeasedAsset
			and AssetItemsExist)

		RestrictLeaseUpdate
			restricted
			when (LeasedAsset
			and ThisRecordRel exists)

		LeaseTerminated
			restricted
			when (AssetLease.Lease.Status.Closed
			or	  AssetLease.Lease.Status.Terminated)

		DisposalAllowed
			restricted
			when (Asset entered
			and	  Status.Released
			and   !LeasedAsset
			and   UnreleasedAssetDisposalRel not exists
			and   (!CreatedByOtherAction
			or    !CreatedByDisposal))

		DisposalExists
			restricted
			when (AssetDisposalsRel exists)

		AssetBookExists
			restricted
			when (AssetBookRel exists)

		IsMassSelectionDetailNotExists
			restricted
			when (MassSelectionDetailRel not exists)

		AllSimulated
			restricted
			when (Simulated
			or    not Simulated)

		ReleaseIsValid
			when (UnreleasedAssetDisposalCreated 
			or UnreleasedAssetTransfersRel exists
			or ToAssetFromDisposalOrTransfer
			or WorkInProcess = true
			or not AssetItemsExist)

		PostingBookBasisAvailable
			restricted
			when (PostingBookBasis not = 0)

		PostRelReleaseIsValid
			when (!UnreleasedAssetImpairmentExists)

		ProjectsInUse
			restricted
			when (FinanceEnterpriseGroup.ProjectLabel entered)

		HasInterfacing
			restricted
			when (HasInterfacingRepairs
			or	  HasInterfacingAdjustments)

		HasInterfacingRepairs
			when (AssetRepairImport set exists)

		HasInterfacingAdjustments
			when (AssetItemAdjustmentImportsRel exists)

		RelatedProjectsExist
			restricted
			when (ProjectRel exists)

		HasRevalueTransactions
			when (RevalueTransactionsRel exists)

		HasRevalueAccounts
			when ((AssetType.Revalue
			and   (AssetAccountGroup.HasRevalueAccounts)
			or     AssetType.RevalueAccountsExist)
			and   (AssetAccountingUnit entered
			or 	  (AssetAccountingUnitGroup.RevalueSurplusAccountingUnit entered
			and    AssetAccountingUnitGroup.RevalueLossAccountingUnit entered))
			or    !AssetType.Revalue)

		HasRevalueReserveAccount
			when ((AssetType.PostToAccount.RevaluationReserve
			and   (AssetAccountGroup.HasRevaluationReserveAccount
			or     AssetType.RevalueReserveAccountExists)
			and   (AssetAccountingUnit entered
			or 	   AssetAccountingUnitGroup.RevalueReserve entered)
			or    !AssetType.PostToAccount.RevaluationReserve))


		RevalueAmortizationAccountExists
			when ((AssetType.AmortizeRevaluation
			and   (AssetAccountGroup.HasRevalueAmortizationAccount
			or     AssetType.RevalueAmortizationAccountExists)
			and   (AssetAccountingUnit entered
			or 	   AssetAccountingUnitGroup.RevalueAmortization entered)
			or    !AssetType.AmortizeRevaluation))


		ImpairmentAccountsExist  
			when  (AssetType.Impairment
			and   (AssetAccountGroup.HasImpairmentAccounts
			or     AssetType.ImpairmentAccountsExist)
			and   (AssetAccountingUnit entered
			or 	   AssetAccountingUnitGroup.HasImpairmentAccounts)
			or    !AssetType.Impairment)

		ImpairmentAmortizationAccountExists
			when  (ImpairmentAccountsExist)


		HasRequiredRevalueAndImpairmentAccounts
			when (ImpairmentAccountsExist
			and RevalueAmortizationAccountExists
			and HasRevalueReserveAccount
			and HasRevalueAccounts)

		TransactionsTabNotValid
			when (!NotDisposedAndDisplayJournalEntries
			and !AssetCreatePostingTransactionList)

		CloseInProgress
			when (AssetCompanyRel.PendingYearEndCount entered
			or AssetCompanyRel.PeriodCloseRelease = "X")

		IsExcludedFromSelectAll
			when (ContextMassSelection.SelectAll
			and	  ContextMassSelectionDetailRel exists)

		IncludeInMassSelectAll
			when (ContextMassSelection.SelectAll
			and	  IsExcludedFromSelectAll)

		ExcludeFromMassSelectAll
			when (ContextMassSelection.SelectAll
			and	  !IsExcludedFromSelectAll)

		DisposedOriginatingAssetEntered
			when (DisposedAssetOriginatingAsset entered)

		HasSummaryGroup
			when (AssetSummaryGroup entered)

		HasImpairmentBook
			when (ImpairmentBooksRel exists)

		SecurityGroupAllowsAccess
			restricted
			when ((actor.context.CompanySecurityGroup = "")
			or    (actor.context.CompanySecurityGroup != ""
			and    CompanySecurityGroupMemberRel exists))

		TransactionsExists
			when (UnreleasedAssetTransactionRel exists
			or 	  UnreleasedAssetBookTransactionRel exists)

		HasUnreleasedBookTrnasactionTotalEqualsZero
			restricted
			when (sum UnreleasedAssetBookTransactionRel.TransactionAmount = 0)

		ValidForPurging
			restricted
			when (PurgeAssetAdjustmentRel not exists
			and  PurgeAssetTransferRel not exists
			and  PurgeAssetDisposalRel not exists
			and  PurgeAssetReinstatementsRel not exists
			and  PurgeAssetTransactionRel not exists
			and  PurgeAssetRepairsRel not exists)

		FundAccounting
			restricted
			when (FinanceEnterpriseGroup.FundAccounting
			and not AssetType.AllocateDepreciationExpense)

		FundOverrideSelected
			restricted
			when (FundOverride = true
			and not AssetLease.Lease.CreateAssetFundRecords)

		FundOverrideNotSelected
			restricted
			when (FundOverride = false
			and AssetFundsRel exists)

		FundOverridesRequired
			restricted
			when (FundOverride = true
			and sum AssetFundsRel.PercentContribution not = 1)

		AssetFundAllocationComplete
			restricted
			when (FundOverride = true
			and sum AssetFundsRel.PercentContribution = 1)

		FundAllocationRequired
			restricted
			when (FundAccounting
			and AssetFundsRel exists)

		AssetFundsExist
			when (AssetFundsRel exists)

		AssetTransferFundsExist
			when (AssetTransferFundsRel exists)

		FromTransferFundsExist
			when (FromAssetTransferFundsRel exists)

		ToTransferFundsExist
			when (ToAssetTransferFundsRel exists)

		NewCompanyGroupExists
			when (NewCompanyGroupRel exists)

		RevalueInProgress
			restricted
			when (UnreleasedAssetBookRevaluationRel exists
			and AssetProcess.Revalue
			and Status.PostRelease)

		AssetIsSelected
			restricted
			when (PurchaseDateRange not entered
			or    LastAssetItemPurchaseDate within PurchaseDateRange)

		IsUnreleasedOrRelease
			restricted
			when (IsUnreleased
			or IsReleased)

		CopyLeasedAsset
			restricted
			when ((LeasedAsset
			and AssetLease.Lease.Status.Unreleased)
			or (IsUnreleasedOrRelease
			and not LeasedAsset))

		IsRevaluation
			when (ReleasedAssetBookRevaluationRel exists)

		AllowRevaluation
			when (AssetType.Revalue
			and IsReleased
			and !IsNonDepreciable
			and !IsImpairment)

		IsImpairment
			when (AssetImpairmentRel exists
			and AssetImpairmentBooksRel exists)

		CloseControlIsActive
			restricted
			when (CompanySystemClosingControlRel exists
			and CompanySystemClosingControlRel.Control)

		IsUnreleasedAndNotReleaseTransferInProgress
			restricted
			when (IsUnreleasedOrRelease
			and   !AssetProcess.Transfer)

		IsFundUnreleasedAndNotTransferInProgress
			restricted
			when (IsFundUnreleased
			and   !AssetProcess.Transfer)

		IsUnreleasedAndNotTransferInProgress
			restricted
			when (IsUnreleased
			and  !AssetProcess.Transfer)

		AseetGuidelineClassesExists
			restricted
			when (AssetGuidelineClassRel exists)

		AseetGuidelineClassesExist
			restricted
			when (action type.Create
			and AssetGuidelineClassRel exists)

		LocalGeneralLedgerEventExists
			restricted
			when (LocalGeneralLedgerEventRel exists)


		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		FromImport
			when (AssetManagementInterfaceResult entered
			and	  Status.Unreleased)

		AllowCreateForLeaseAssets
			when (DerivedNumberOfAssets < Asset.AssetLease.Lease.NumberOfAssets)

		FinanceLeaseAsset
			when (AssetLease.Lease.LeaseClassification.Finance)

		OperatingLeaseAsset
			when (AssetLease.Lease.LeaseClassification.Operating
			and   !AssetLease.Lease.IsShortTermLease)

		SubmitForApprovalValid
			when (Company.NeedsApproval
			and ((Status.Unreleased
			and !FromTransfer)
			or (Status.PostRelease
			and !ToAssetDisposal))
			and !ApprovalStatus.Submitted)

	Form Invokes
		CreateUnreleasedAssetTransfer
			if (!CloseInProgress)
				invoke Create AssetTransfer(Asset) set
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"



		MCreateUnreleasedAssetTransfer
			if (!CloseInProgress)
				invoke MAssetTransfer AssetTransfer(Asset) set
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"

		MobileAssetTransfer
			if (!CloseInProgress)
				invoke MobileAssetTransfer AssetTransfer(Asset) set
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"

		MobileAssetDisposal
			if (!CloseInProgress)
				if (UnreleasedAssetDisposalRel exists)
					invoke Unreleased.Update AssetDisposalRel
				else
					invoke Unreleased.Dispose AssetDisposal(Asset) set
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"


		CreateUnreleasedAssetDisposal
			if (!CloseInProgress)
				if (UnreleasedAssetDisposalRel exists)
					invoke Unreleased.Update AssetDisposalRel
				else
					invoke Unreleased.Dispose AssetDisposal(Asset) set
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"
		CreateAssetReinstatement
			if (!CloseInProgress)
				invoke Create AssetReinstatement(Asset)
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"

		CreateAssetBookRevaluation
			if (!CloseInProgress)
				invoke Create AssetBookRevaluation(Asset)
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"



		MCreateAssetReinstatement
			if (!CloseInProgress)
				invoke MCreateAssetReinstatement AssetReinstatement(Asset)
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"



		CreateUnreleasedAssetImpairment
			if (!CloseInProgress)


				invoke Create AssetImpairment(Asset)
					invoked.Asset	 	= Asset
					invoked.Status		= "U"
			else
				constraint (!CloseInProgress)
					"ActionNotAvailableWhileCloseIsInProgress"

	Field Rules
		LocalAssetAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalAccumulatedDepreciationAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalDepreciationExpenseAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalProceedsAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalGainAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalLossAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalClearingAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalDisposalExpenseAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalDeferredGainAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		LocalDeferredLossAccount
			if (!LocalDefaultingDone)
				include AccountDefaulting
				LocalDefaultingDone = true

		FundOverride
			if (AssetInterfaceOptionsRel exists)
				constraint (FundOverride = blank)
					"ThisAssetIsAssignedToAProjectInterfaceControlRecord;FundOverrideNotAllowed"
			if (FundOverride)
				constraint (not AssetType.AllocateDepreciationExpense)
					"FundOverrideIsNotValidWhenAssetTypeHasDepreciationExpenseAllocationEnabled"

		AssetLease
			if (!AssetLease.Lease.Status.Closed
			and !AssetLease.Lease.Status.Terminated
			and (!AssetLease.Lease.LeaseAccountingMethod.GASB87
			and  !AssetLease.Lease.Ownership))
				constraint (Classification = AssetLease.Lease.LeaseClassification)
					"ClassificationMustEqualAssetLeaseClassificationOnLeasedAsset"
				constraint (AllowLeasedAssetModification) 
					"CannotAddOrChangeAsset;LeaseStatusIsNotUnreleased,Impairment,Modification,OrLeaseAdjustment"

		Description
			required
				"AssetDescriptionIsRequired"

		Company
			initial value is AssetLease.LeaseCompany
			required
				"CompanyIsRequired"
			cannot be changed
				"CannotChangeCompany;MustTransferToAnotherCompany"
			constraint (AssetCompanyRel exists)
				"CompanyMustBeAValidAssetCompany"
			constraint (Company.PendingYearEndCount = 0)
				"YearEndPending,CannotUpdate"
			if (!CreateFromBatch)
				constraint (!Company.PeriodCloseRelease.InProcess)
					"CannotRelease;PeriodOrYearEndCloseIsInProcess"

		AssetAccountingUnitGroup
			constraint (AssetAccountingUnitGroupRel exists)
				"AssetDimensionGroup<AssetAccountingUnitGroup>DoesNotExistForCompany<Company>"
			if (AssetAccountingUnit not entered)
				constraint (AssetAccountingUnitGroup entered)
					"AssetDimensionGroupOrDefaultTransactionDimensionsRequired"
				constraint (AssetAccountingUnitGroup.HasAllRequiredDimensions)
					"AssetDimensionGroupIsIncomplete;ProvideAdditionalDimensionsToDimensionGroupOrProvideDefaultTransactionDimensions"

		AssetType
			required
				"AssetTypeIsRequired"
			constraint (Company entered)
				"CompanyIsRequired"

			if (AssetCategory.Depreciable)
				constraint (!AssetType.Property.Stock and !AssetType.Property.Land)
					"PropertyTypeNotValidWithDepreciableAsset"

			if (AssetAccountingUnit not entered)
				constraint (AssetAccountingUnitGroup entered)
					"EitherDefaultAssetDimensionsOrAnAssetDimensionGroupIsRequired"
			if (AssetType.Impairment)
				if (!AssetType.ImpairmentAccountsExist)
					constraint (AssetAccountGroup.HasImpairmentAccounts)
						"ImpairmentAccountsRequiredOnEitherAssetTypeOrAssetAccountGroup"
				if (AssetAccountingUnit not entered)
					constraint (AssetAccountingUnitGroup.HasImpairmentAccounts)
						"ImpairmentDefaultsRequiredOnAssetDimensionGroup"

			if (AssetType.Revalue)
				if (!AssetType.RevalueAccountsExist)
					constraint (AssetAccountGroup.HasRevalueAccounts)
						"Asset<Asset>AssetTypeAllowsRevaluationDefineRevalueGainLossAccountsOnEitherAssetType<AssetType>OrAssetAccountGroup<AssetAccountGroup>"

				if (AssetType.PostToAccount.RevaluationReserve)
					if (!AssetType.RevalueReserveAccountExists)
						constraint (AssetAccountGroup.HasRevaluationReserveAccount)
							"Asset<Asset>AssetType<AssetType>RequiresARevaluationReserveAccountEitherOntheAssetTypeOrAssetAccountGroup<AssetAccountGroup>"
					if (AssetAccountingUnit not entered)
						constraint (AssetAccountingUnitGroup.RevalueReserve entered)
							"Asset<Asset>AssetType<AssetType>RequiresDefaultDimensionsForRevalueReserve;AssignDefaultDimensionCodesOrUpdateAssetDimensionGroup<AssetAccountingUnitGroup>"
					if (AssetType.AmortizeRevaluation)
						if (!AssetType.RevalueAmortizationAccountExists)
							constraint (AssetAccountGroup.AssetAccountRRARel.DistributionAccount entered)
								"AssetType<AssetType>RequiresAnAssetRevalueAmortizationAccountToBeDefined"
						if (AssetAccountingUnit not entered)
							constraint (AssetAccountingUnitGroup.RevalueAmortization entered)
								"AssetType<AssetType>RequiresAnAssetRevalueAmortizationDimensionsToBeDefined"
			if (AssetType.AllocateDepreciationExpense)
				constraint (!FundOverride)
					"FundOverrideIsNotValidWhenAssetTypeHasDepreciationExpenseAllocationEnabled"
		AssetAccountGroup
			required
				"AssetAccountGroupIsRequired"

		CurrencyTable
			if (CompanySystemClosingControlRel exists)
				default to (CompanySystemClosingControlRel.CurrencyTable)
			else
				default to (Company.CurrencyTable)
			required

		Currency
			if (LeasedAsset)
				default to AssetLease.Lease.Currency
				constraint (Currency = AssetLease.Lease.Currency)
					"AssetCurrencyMustBeSameAsLeaseCurrency"
			else
				default to Company.Currency

		AssetCategory
			initial value is DefaultAssetCategory
			if (LeasedAsset)
				if (AssetLease.Lease.IsLeaseAccountingMethodGASB87) 
					force default to AssetLease.Lease.LeaseCategory
					if (AssetLease.Lease.ShortTermGASBLease)
						constraint (AssetCategory.NonDepreciable)
							"AssetCategoryMustBeNonDepreciableForShortTermGASBLeases"
				if (!AssetLease.Lease.IsLeaseAccountingMethodGASB87)
					if (AssetLease.Lease.LeaseClassification.Finance)
						if (AssetLease.Lease.LandAndBuilding.LandOnly)
							constraint (AssetCategory.NonDepreciable)
								"LandOnlyLeaseMustHaveAssetCategorySetToNonDepreciable"
						else
							constraint (AssetCategory.Depreciable)
								"FinanceLeaseMustHaveAssetCategorySetToDepreciable"
					else
						if (AssetLease.Lease.LeaseClassification.Operating)
							constraint (AssetCategory.NonDepreciable)
								"OperatingLeaseMustHaveAssetCategorySetToNonDepreciable"
			else
				default to AssetCategory.Depreciable
			if (!IsUnreleased)
				if (AssetCategory changed)
					if (old AssetCategory.Depreciable
					and AssetCategory.NonDepreciable)
						confirmation required
							"ThisUpdateWillRemoveMethodsAndLifeFromRelatedAssetBooks"
						for each AssetBooksRel
							invoke InitializeMethodAndLife each

		Classification
			initial value is AssetLease.Lease.LeaseClassification
			if (LeasedAsset)
				if (AssetLease.Lease.LeaseAccountingMethod.GASB87
				and AssetLease.Lease.Ownership)
					Classification = "Purchased"
					constraint (Classification.Purchased)
						"AssetClassificationMustBePurchasedForGASB87LeasesWithOwnershipFlagSelected"
				else
					default to AssetLease.Lease.LeaseClassification
					if (AssetLease.Lease.Status.Closed
					or  AssetLease.Lease.Status.Terminated)
						constraint (Classification.Purchased)
							"AssetClassificationMustBePurchasedWhenLeaseIsTerminatedOrClosed"
					else
						if (Classification.Purchased)
							constraint (AssetLease.Lease.Status.Closed
							or          AssetLease.Lease.Status.Terminated)
								"LeaseMustBeClosedOrTerminatedBeforeAssetsCanBePurchased"
						if (AssetLease.Lease.LeaseClassification.Finance)
							if (AssetLease.LeaseCompany changed
							or  AssetLease.Lease changed
							or  Classification changed)
								constraint (AssetLease.Lease.Status.Unreleased)
									"CannotAddOrChangeAsset;LeaseIsNotUnreleased"
							if (Classification.Operating)
								constraint (AssetLease.Lease.LandAndBuilding.LandOnly)
									"LeaseCategoryMustBeNonDepreciableIfAssetClassificationIsOperating"
						else
							if (AssetLease.Lease.LeaseClassification.Operating)
								constraint (AssetCategory.NonDepreciable)
									"OperatingLeaseMustHaveAssetCategorySetToNonDepreciable"
							if (AssetLease.Lease.LeaseClassification entered)
								constraint (Classification = AssetLease.Lease.LeaseClassification)
									"AssetClassificationMustMatchLeaseClassification"
			else
				default to Classification.Purchased
				constraint (Classification.Purchased)
					"AssetIsNotLeased;ClassificationMustBePurchased"


		OriginatingCompany
			default to Company

		AssetLocation
			if (AssetLocation changed)
				if (AssetLocation not entered)
					constraint (AssetItemsWithLocationDetailRel not exists)
						"LocationDetailsExistOnAssetItems;RemoveItemLocationDetailBeforeChangingLocation"
				else
					for each AssetItemsWithLocationDetailRel
						constraint (each.LocationDetail exists)
							"LocationDetailsOnAssetItemsAreNotValidForNewLocation;RemoveItemLocationDetailBeforeChangingLocation"

		BaseNumberOfDecimals
			default to Company.GeneralLedgerCompany.CurrencyNumberOfDecimals

		TransactionNumberOfDecimals
			default to Currency.NumberOfDecimals

		Simulated
			if (LeasedAsset)
				if (AssetLease.Lease.Simulated)
					constraint (Simulated = AssetLease.Lease.Simulated)
						"SimulatedLeaseRequiresSimulatedAssets"

			if (Status.Released)
				if (Simulated changed
				and !old Simulated)
					constraint (!Simulated)
						"AssetIsReleased;CannotChangeToSimulated"

		WorkInProcess
			if (!IsUnreleased)
				cannot be changed
					"CannotChangeWorkInProcess;AssetHasBeenReleased"

		CreationDate
			default to current timestamp

		CreatedBy
			default to actor

		GeographicalDate
			if (GeographicalLatitude changed
			or GeographicalLongitude changed
			or GeographicalAltitude changed)
				force default to current timestamp


		LastAssetItemPurchaseDate
			default to first ItemsByDateDescendingRel.PurchaseDate

		AssetSummaryGroup
			if (AssetSummaryGroup entered
			or AssetSummaryGroup changed)
				include ValidateSummaryGroupFields

		TagNumber
			if (!DisposedAssetDisposalRel.PartialDisposal)
				if (TagNumber entered)
					if (Company.RequireUniqueTags = true)
						constraint (UniqueAssetsTagRel not exists)
							"TagNumber<TagNumber>IsInUse"
		Used
			if (Used changed)
				confirmation required
					"ThisChangeWillUpdateTheUsedFlagOnAllAssetBooks;SelectOkToContinue"
				invoke Update AssetBooksRel
					invoked.Used = Used

	Relations
		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AM"
				related.Company						= Company
        AssetAccountACMRel
            classic name is AMACCOUNT-ACM
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = blank
                related.AssetType.Type                = AssetType.Type
                related.AssetType.SubType             = AssetType.SubType
                related.AssetAccount.AssetAccountType = "ACM"
                related.AssetAccount.AssetEvent       = blank

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup   = actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                 	= Company

		ACMTypeTransactionsRel
			one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset                   	= Asset
			Instance Selection
				where (related.TransactionStatus	= "R"
                and related.Company                 = Company
                and related.AssetAccountType.AccumulatedDepreciation
				and	related.IsCoreLedger)

		PriorYearACMTransactionsRel
			one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset                   	= Asset
			Instance Selection
				where (	related.TransactionStatus	= "R"
                and related.Company                 = Company
                and related.AssetAccountType.AccumulatedDepreciation
				and related.TransactionDate < 1YearAgo
				and	related.IsCoreLedger)

		AssetAccountingUnitGroupRel
			one-to-one relation to AssetAccountingUnitGroup
			Field Mapping uses symbolic key
				related.Company						= Company
				related.AssetAccountingUnitGroup	= AssetAccountingUnitGroup

      	GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode     = "AM"

		JournalizeGroupResultsRel
			one-to-many relation to JournalizeGroupResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup

		EXPTypeTransactionsRel
			one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
               	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset                   	= Asset
			Instance Selection
				where (related.TransactionStatus	= "R"
                and related.Company                 = Company
				and related.AssetAccountType.DepreciationExpense
				and	related.IsCoreLedger)

        AssetAccountASTRel
            classic name is AMACCOUNT-AST
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = blank
                related.AssetType.Type                = AssetType.Type
                related.AssetType.SubType             = AssetType.SubType
                related.AssetAccount.AssetAccountType = "AST"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountCLRRel
            classic name is AMACCOUNT-CLR
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = AssetAccountGroup
                related.AssetType.Type                = blank
                related.AssetType.SubType             = blank
                related.AssetAccount.AssetAccountType = "CLR"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountCOSRel
            classic name is AMACCOUNT-COS
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = AssetAccountGroup
                related.AssetType.Type                = blank
                related.AssetType.SubType             = blank
                related.AssetAccount.AssetAccountType = "COS"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountDGNRel
            classic name is AMACCOUNT-DGN
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = AssetAccountGroup
                related.AssetType.Type                = blank
                related.AssetType.SubType             = blank
                related.AssetAccount.AssetAccountType = "DGN"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountDLSRel
            classic name is AMACCOUNT-DLS
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = AssetAccountGroup
                related.AssetType.Type                = blank
                related.AssetType.SubType             = blank
                related.AssetAccount.AssetAccountType = "DLS"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountEXPRel
            classic name is AMACCOUNT-EXP
            one-to-one relation to AssetAccount  
            Field Mapping uses symbolic key
                related.Company                       = Company
                related.AssetAccountGroup             = blank
                related.AssetType.Type                = AssetType.Type
                related.AssetType.SubType             = AssetType.SubType
                related.AssetAccount.AssetAccountType = "EXP"
                related.AssetAccount.AssetEvent       = blank

        AssetAccountGANRel
            classic name is AMACCOUNT-GAN
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= AssetAccountGroup
                related.AssetType.Type                	= blank
                related.AssetType.SubType             	= blank
                related.AssetAccount.AssetAccountType 	= "GAN"
                related.AssetAccount.AssetEvent       	= blank

        AssetAccountLOSRel
            classic name is AMACCOUNT-LOS
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= AssetAccountGroup
                related.AssetType.Type                	= blank
                related.AssetType.SubType             	= blank
                related.AssetAccount.AssetAccountType 	= "LOS"
                related.AssetAccount.AssetEvent       	= blank

        AssetAccountPRORel
            classic name is AMACCOUNT-PRO
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= AssetAccountGroup
                related.AssetType.Type                	= blank
                related.AssetType.SubType             	= blank
                related.AssetAccount.AssetAccountType 	= "PRO"
                related.AssetAccount.AssetEvent       	= blank

        AssetAccountACMAdditionRel
            classic name is AMACCT-ACM-ADD
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "ACM"
                related.AssetAccount.AssetEvent       	= "1"

        AssetAccountACMAdjustmentRel
            classic name is AMACCT-ACM-ADJ
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "ACM"
                related.AssetAccount.AssetEvent       	= "2"

        AssetAccountACMDisposalRel
            classic name is AMACCT-ACM-DSP
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "ACM"
                related.AssetAccount.AssetEvent       	= "4"

        AssetAccountACMReinstatementRel
            classic name is AMACCT-ACM-RIN
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "ACM"
                related.AssetAccount.AssetEvent       	= "5"

        AssetAccountACMTransferRel
            classic name is AMACCT-ACM-TRF
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                      	= Company
                related.AssetAccountGroup            	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "ACM"
                related.AssetAccount.AssetEvent       	= "3"

        AssetAccountASTAdditionRel
            classic name is AMACCT-AST-ADD
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "AST"
                related.AssetAccount.AssetEvent       	= "1"

        AssetAccountASTAdjustmentRel
            classic name is AMACCT-AST-ADJ
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "AST"
                related.AssetAccount.AssetEvent       	= "2"

        AssetAccountASTDisposalRel
            classic name is AMACCT-AST-DSP
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "AST"
                related.AssetAccount.AssetEvent       	= "4"

        AssetAccountASTReinstatementRel
            classic name is AMACCT-AST-RIN
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType             	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "AST"
                related.AssetAccount.AssetEvent       	= "5"

        AssetAccountASTTransferRel
            classic name is AMACCT-AST-TRF
            one-to-one relation to AssetAccount
            Field Mapping uses symbolic key
                related.Company                       	= Company
                related.AssetAccountGroup             	= blank
                related.AssetType.Type                	= AssetType.Type
                related.AssetType.SubType            	= AssetType.SubType
                related.AssetAccount.AssetAccountType 	= "AST"
                related.AssetAccount.AssetEvent       	= "3"

		AssetCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company					= Company

		ToAssetCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company					= LocalCompany

		UniqueAssetsTagRel
			one-to-many relation to Asset
			Field Mapping uses ByCompanyTagAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company 				= Company
				related.TagNumber				= TagNumber
			Instance Selection
				where (related.Asset			!= Asset)

		ThisRecordRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset

		PriorAssetBookDisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses ByAssetDisposal
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.AssetDisposal		< LastAssetSequence
				and related.IsBookDisposal)

        AssetDisposalRel
			classic name is AMASSETDSP
			one-to-one relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset
				related.AssetDisposal 			= LastAssetSequence


		AssetDisposalsRel  
			classic name is AMASSETDSP
			one-to-many relation to AssetDisposal
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset

		DisposedAssetRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.DisposedAsset	= Asset)

		DisposedAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.DisposalAsset	= Asset)

		DisposalOriginatingAssetRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= DisposedAssetDisposalRel.Asset












		AssetImpairmentsRel
			one-to-many relation to AssetImpairment
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset

		LastAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset


		AssetRevaluationsRel
			one-to-many relation to AssetRevaluation
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset

		UnreleasedAssetBookRevaluationRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.RevalueStatus	= "U")

		ReleasedAssetBookRevaluationRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.RevalueStatus	= "R")

		AssetBookRevaluationsRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetRevalueTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.ProcessSequence	= LastAssetSequence
				and (related.AssetProcess.Revalue
				or related.AssetProcess.RevalueAmortization))

		AssetImpairmentBooksRel
            one-to-many relation to AssetImpairmentBook
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
         	Instance Selection
         		where (related.ImpairmentAmount != 0)

        AssetReinstatementsRel
            classic name is AMASSETRIN
            one-to-many relation to AssetReinstatement
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset

        AssetBookAdjustmentsRel
            classic name is AMASTBKADJ
            one-to-many relation to AssetBookAdjustment
            Field Mapping uses Set2
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset 					= Asset

        AssetBookTransferRel
            one-to-many relation to AssetBookTransfer
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            	related.Asset					= Asset
            	related.AssetTransfer 			= UnreleasedAssetTransferRel.AssetTransfer
            	related.Book					= LocalBook

        BookTransferRel
            one-to-many relation to AssetBookTransfer
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            	related.Asset					= Asset
            	related.AssetTransfer 			= UnreleasedAssetTransferRel.AssetTransfer

        AssetBookTransfersRel
            classic name is AMASTBKTRF
            one-to-many relation to AssetBookTransfer
            Field Mapping uses Set2
                related.Asset 					= Asset

		AssetBookDisposalsRel
            classic name is AMASTBKDSP
            one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset

		NewAssetBookDisposalsRel
            classic name is AMASTBKDSP
            one-to-many relation to AssetBookDisposal

            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= DisposedAsset

        DisposedAssetBookDisposalRel
            classic name is AMASTBKDSP
            one-to-one relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= DisposedAsset
                related.Book  						= LocalBook

        PartialAssetBookDisposalRel
            one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= DisposedAsset
                related.Book  						= LocalBook
			Instance Selection
				where (related.DerivedAssetDisposal = LocalAssetDisposal)

		ItemsByDateDescendingRel
			one-to-many relation to AssetItem
			Field Mapping uses ItemsByDateDescending
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

        AssetItemDisposalsRel
            classic name is AMASTITDSP
            one-to-many relation to AssetItemDisposal
            Field Mapping uses Set1
                related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset 					= Asset

 		NewAssetItemDisposalsRel
            classic name is AMASTITDSP
            one-to-many relation to AssetItemDisposal
            Field Mapping uses Set1
                related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset 					= DisposedAsset

        AssetItemsRel
            classic name is AMASTITEM
            one-to-many relation to AssetItem
            delete cascades
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset 					= Asset

		LocalAssetItemsRel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= LocalAsset

		LocalToAssetItemsRel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= LocalToAsset

		LocalAssetItemsDisposalRel
			classic name is AMASTITDSP
			one-to-many relation to AssetItemDisposal
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= LocalAsset
				related.AssetDisposal			= LocalAssetDisposal
				related.AssetItem				= LocalAssetItem

		AllAssetsRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup

		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset = LocalAsset

		OriginalAssetRel
			one-to-many relation to Asset
			Field Mapping uses ByDisposedAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.DisposedAsset 			= Asset
			Instance Selection
				where (related.Asset 			!= Asset)

		NewAssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= DisposedAsset

		LeaseAssetRel
			one-to-many relation to Asset
			Field Mapping uses Set13
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.AssetLease.LeaseCompany = AssetLease.LeaseCompany
				related.AssetLease.Lease = AssetLease.Lease
			Instance Selection
				where (related.Asset != Asset)

        AssetTransactionsRel
            classic name is AMTRANS
            one-to-many relation to AssetTransaction
            delete cascades
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset

        NonManualAssetTransactionsRel
            one-to-many relation to AssetTransaction
            delete cascades
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset
			Instance Selection
				where(!related.AssetAccountType = blank)      

		NonManualAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where(!related.AssetAccountType = blank)     

        ReleasedAssetTransactionsRel
            classic name is AMTRANS
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset
            Instance Selection
                where (related.TransactionStatus		= "R"
                or related.TransactionStatus		= "H")

        HistoryAssetTransactionsRel
            classic name is AMTRANSHIST
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset
           	Instance Selection
                where (related.TransactionStatus = "H")

		AssetTransactionsBookRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset
                related.Book					= LocalAssetBook
            Instance Selection
            	where (related.TransactionStatus.Unreleased)

		ToAssetTransactionsBookRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = LocalToAssetForTransfer
                related.Book					= LocalAssetBook
            Instance Selection
            	where (related.TransactionStatus.Unreleased)

		AssetBookTransactionsBookRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = Asset
                related.Book					= LocalAssetBook
            Instance Selection
            	where (related.TransactionStatus.Unreleased)

		ToAssetBookTransactionsBookRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset                   = LocalToAssetForTransfer
                related.Book					= LocalAssetBook
            Instance Selection
            	where (related.TransactionStatus.Unreleased)



        AssetTypeAllocationsRel
            classic name is AMTYPALLOC
            one-to-many relation to AssetTypeAllocation
            Field Mapping uses symbolic key
                related.Company 				= Company
            Instance Selection
                where (related.AssetType.Type = AssetType.Type
                and   related.AssetType.SubType = AssetType.SubType)

		MethodRel
			one-to-one relation to Method
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Method					= LocalMethod

		BookCalendarRel
			classic name is AMCALENDAR
			one-to-one relation to BookCalendar
			Field Mapping uses Set5
				related.Book    				= Book
				related.Company 				= Company

		FromBookCalendarRel
			classic name is AMCALENDAR
			one-to-one relation to BookCalendar
			Field Mapping uses Set5
				related.Book    				= LocalBook
				related.Company 				= LocalCompany


		UnreleasedNonWIPAssetsRel
			one-to-many relation to Asset
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Status					= 1
				related.Company					= Company
			Instance Selection
				where (!related.WorkInProcess)

		PostReleaseAssetsRel
			one-to-many relation to Asset
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Status					= 3
				related.Company					= Company

		FromCompanyUnreleasedNonWIPAssetsRel
			one-to-many relation to Asset
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Status					= 1
				related.Company					= LocalCompany
			Instance Selection
				where (!related.WorkInProcess)

		FromCompanyPostReleaseAssetsRel
			one-to-many relation to Asset
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Status					= 3
				related.Company					= LocalCompany

		TransferAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	= LocalAsset

		DisposalAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalAsset
			Instance Selection
				where (related.AssetTransaction.AssetProcess.Disposal
				or related.AssetProcess.Reinstatement)

		TransferAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	= LocalAsset

		DisposalAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	= LocalAsset

		UnreleasedAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		UnreleasedAssetSystemControlTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	   related.AssetProcess	   != "RIN")

		UnreleasedNotReAddTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset					= Asset
				related.TransactionStatus		= "U"
				related.Company					= Company
			Instance Selection
				where (related.AssetProcess 	!= "RVL")

		UnreleasedAssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

        HistoryTransactionsToBePostedRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
         	Instance Selection
         		where (related.IsPostHistory
         		and related.AssetTransaction.TransactionStatus.History
         		and related.IsPostedToGL		= false
         		and related.Reference			= "Posted History Transaction")

        ImpairmentTransactionsToBePostedRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
         	Instance Selection
         		where (related.IsZeroImpairment
         		and related.AssetTransaction.TransactionStatus.History
         		and related.IsPostedToGL		= false
         		and related.Reference			= "Posted History Transaction")

		UnreleasedTransferTransactionsRel
			one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.ProcessAsset		= Asset
				and related.IsMemoOrUnreleased)

		UnreleasedTransferManualToTransactionsRel
			one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			 	related.Asset                   = LocalToAssetForTransfer
            Instance Selection
            	where (related.TransactionStatus.Unreleased
            	and	related.AssetAccountType = blank)


		ReleasedTransferTransactionsRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
                related.Asset                   = Asset
            Instance Selection
                where (related.TransactionStatus    = "R"
                and related.ProcessSequence         = LastAssetSequence)

		UnreleasedNewAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= DisposedAsset
			Instance Selection
				where (related.AssetTransaction.TransactionStatus.Unreleased)

		MemoAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetTransaction.TransactionStatus.Memo)

		AssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company

		AllAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset


		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= Company

		RequiredCurrentCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses BookCalendarsByStatus
				related.Company					= Company
				related.CalendarStatus			= "C"
				related.RequiredBook			= true

		RequiredCompanyCurrentCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses BookCalendarsByStatus
				related.Company					= LocalCompany
				related.CalendarStatus			= "C"
				related.RequiredBook			= true

		AssetBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= Company
				related.Book					= AssetBookRel.Book


		AssetItemsWithLocationDetailRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				where (related.LocationDetail entered)

		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book

		NonPostingBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsPostingBook = false)

		LocalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalAsset
				related.Book					= LocalBook

		PostingBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsPostingBook
				and related.Book.Ledger			= FinanceEnterpriseGroup.CoreLedger)

		ToAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
				related.Book					= LocalBook

		TransferToAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= LocalBook

		DisposedAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalAsset
				related.Book					= LocalBook

		AssetBooksRel
			one-to-many relation to AssetBook
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		FunctionalBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsImpairmentBook = false
				and !related.Disposed)

		AssetBooksForDisplayRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsImpairmentBook = false)

		ImpairmentBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.HasRelatedImpairmentBook)

		ToAssetBooksRel
			one-to-many relation to AssetBook
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalToAsset

		AssetRepairsRel
			one-to-many relation to AssetRepair
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		ToAssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalToAssetForTransfer

		UnreleasedAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses Set7
				related.Asset					= Asset

		UnreleasedAssetBookAdjustmentRel
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetAdjustment			= UnreleasedAssetAdjustmentRel.AssetAdjustment
				related.Book					= Book

		UnreleasedAssetAdjustmentTransactionsRel
            one-to-many relation to AssetTransaction
            Field Mapping uses Set4
                related.ProcessAsset        = Asset
                related.ProcessSequence     = UnreleasedAssetAdjustmentRel.AssetAdjustment
                related.TransactionStatus   = "U"
            Instance Selection
                where (related.FinanceEnterpriseGroup   = FinanceEnterpriseGroup)

		UnreleasedAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset					= Asset
				related.TransactionStatus       = "U"

		UnreleasedToAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset					= LocalToAsset
				related.TransactionStatus       = "U"

		UnreleasedToAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Asset					= LocalToAsset

		UnreleasedTransferBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TransactionStatus		= "U"
				related.AssetProcess			= "TRF"
				related.Asset					= Asset

		UnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TransactionStatus		= "U"
				related.AssetProcess			= LocalAssetProcess
				related.Asset					= Asset

		AllUnreleasedTransferBookTransRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and   (related.AssetProcess 	= "TRF"
				or     related.AssetProcess		= "ATB"))

		UnreleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		ReleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.TransactionStatus.Released
				or related.TransactionStatus.History)

		ReleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TransactionStatus		= "R"
				related.AssetProcess			= LocalAssetProcess
				related.Asset					= Asset

		UnreleasedAssetTransferRel
			one-to-one relation to AssetTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
				related.AssetTransfer 			= LastAssetSequence


		UnreleasedAssetTransfersRel
			one-to-many relation to AssetTransfer
			Field Mapping uses Set7
				related.Asset 					= Asset
			Instance Selection
				where (related.TransferStatus.NotReleased)

		IncompleteTransferRel
			one-to-many relation to AssetTransfer
			Field Mapping uses Set7
			Instance Selection
				where (related.AssetTransferTo.ToAsset = Asset)

		AssetGuidelineClassRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup

		ActiveGuidelineClassesRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Active = true)

		ActiveGuidelineClassRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetGuidelineClass = AssetGuidelineClass
				and related.Active = true)

		GuidelineClassRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetGuidelineClass = AssetGuidelineClass)

		ActiveGuidelineClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= LocalGuidelineClass
                related.BookRegulation          = LocalBookRegulation
			Instance Selection
				where (related.Active = true)

		GuidelineClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= LocalGuidelineClass
                related.BookRegulation          = LocalBookRegulation
			Instance Selection
				where (related.EffectiveDate 	<= LocalHighPurchaseDate
				and related.Active = true)
		ReleasedAssetTransfersRel
			one-to-many relation to AssetTransfer
			Field Mapping uses Set8
				related.Asset 					= Asset
			Instance Selection
				where (related.TransferStatus.Released)

		ToAssetTransferRel
			one-to-many relation to AssetTransfer
        	Field Mapping uses ToAssetTransfer
	     		related.AssetTransferTo.ToAssetCompany 	= Company
                related.AssetTransferTo.ToAsset			= Asset

		UnreleasedToAssetDisposalRel
			one-to-many relation to AssetDisposal
        	Field Mapping uses ByDisposalAsset
	     		related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
                related.DisposalAsset					= Asset
			Instance Selection
				where (related.DisposalStatus.Unreleased)

		UnreleasedToAssetTransferRel
			one-to-many relation to AssetTransfer
        	Field Mapping uses ToAssetTransfer
	     		related.AssetTransferTo.ToAssetCompany 	= Company
                related.AssetTransferTo.ToAsset			= Asset
			Instance Selection
				where (related.TransferStatus.NotReleased)

		UnreleasedAssetDisposalRel
			one-to-one relation to AssetDisposal
			Field Mapping uses UnreleasedAssetDisposal
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
				related.AssetDisposal 			= LastAssetSequence

		UnreleasedAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses UnreleasedAssetImpairment
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				where (related.Status.Unreleased)

		PostReleaseAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				where (related.Status.PostRelease)

		ImpairmentBooksWithUnreleasedTransactionsRel
			one-to-many relation to AssetImpairment
			Field Mapping uses UnreleasedAssetImpairment
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				where (related.Status.Unreleased
				and related.UnReleasedTransactionsExist)

		ReleasedAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				where (related.Status.Released)

		AssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset

		UnreleasedNewAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses Set7
				related.Asset 					= DisposedAsset
			Instance Selection
				where (related.UnReleased)

		UnreleasedAssetReinstatementsRel
			one-to-many relation to AssetReinstatement
			Field Mapping uses Set7 
				related.Asset 					= Asset

		AssetItemsTransferRel
			one-to-many relation to AssetItemTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetItemsDisposalRel
			one-to-many relation to AssetItemDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		PrimaryAssetDisposalRel
			one-to-one relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetDisposal			= Asset

		MassSelectionDetailRel
			one-to-one relation to MassSelectionDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.MassSelectionType		= LocalMassSelectionType
				related.MassSelection			= LocalMassSelection
				related.Asset					= Asset

		AssetGroupRel
			one-to-one relation to AssetGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGroup				= AssetGroup

		RequiredBookRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= LocalBook

		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= LocalBook
				related.Company					= Company
			Instance Selection
				where (related.IsFuture)

		AssetBookAdditionalImportRel
			one-to-many relation to AssetBookAdditionalImport
			Field Mapping uses ByAsset
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AssetBookAdditionalImport.Asset	= Asset

		AssetItemAdjustmentImportsRel
			one-to-many relation to AssetItemAdjustmentImport
			Field Mapping uses ByAssetRunGroupSequence
				related.Asset					= Asset

		UnreleasedAssetAdjustmentsRel
			one-to-many relation to AssetAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

			Instance Selection
				where (related.AdjustmentStatusNotReleased)

		AssetAdjustmentsRel
			one-to-many relation to AssetInterface
			Field Mapping uses Set3
				related.Company					= Company
			Instance Selection
				where (related.InterfaceOptionsAppendToAsset = Asset)

		ProjectAssetsRel
			one-to-many relation to ProjectAsset
			Field Mapping uses ByAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		ProjectRel
			one-to-one relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= ProjectAssetsRel.FinanceEnterpriseGroup
				related.Project 				= ProjectAssetsRel.Project


		RevalueTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set10
				related.Asset					= Asset
			Instance Selection
				where (related.AssetProcess.Revalue
				or related.AssetProcess.RevalueAmortization)

		RevalueBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetProcess.Revalue
				or related.AssetProcess.RevalueAmortization)

		PostHistoryBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsPostingBook
				and related.Book.PostHistory)

		ContextMassSelectionDetailRel
			one-to-one relation to MassSelectionDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.MassSelectionType		= ContextMassSelectionType
				related.MassSelection			= ContextMassSelection
				related.Asset					= Asset

		AssetBookPeriodHistoryRel 
			one-to-many relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
			Instance Selection
				where(related.Asset								=	Asset
				and related.Company								=	Company
				and related.YearEndDate	year					=	LocalCurrentYear
				and related.AssetBookPeriodHistory.Period		=	LocalCurrentMonth)

		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter

		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "AssetMaster"
            	related.FSMBODConfiguration.Direction 	= 1

		FSMBODConfigRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "AssetMaster"
            	related.FSMBODConfiguration.Direction 	= 1

		FSMBODConfigurationATRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "AssetTransaction"
            	related.FSMBODConfiguration.Direction 	= 1

		AssetTransactionRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
      			related.Book					= LocalBODAssetBook
      			related.Company					= Company

      	AssetBookCalendarRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= LocalBODAssetBook
				related.Company					= Company
			Instance Selection
				where (related.IsPostingBook = true)

		PostReleaseHistoryTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetProcess = LocalAssetProcess
				and related.ProcessSequence = LastAssetSequence
				and related.AssetTransaction.TransactionStatus.History)

		TransferHistoryTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where ((related.AssetProcess = "TRF"
				or related.AssetProcess = "ATB")
				and related.ProcessSequence = LastAssetSequence
				and related.AssetTransaction.TransactionStatus.History)

		AssetSummaryGroupValuesRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetSummaryGroup = AssetSummaryGroup
				and related.Asset 				!= Asset)

		AssetSummaryGroupRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetSummaryGroup = AssetSummaryGroup)

		AssetSummaryGroupItemsRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Asset.AssetSummaryGroup = AssetSummaryGroup)

		AssetSummaryGroupBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Asset.AssetSummaryGroup = AssetSummaryGroup)

		AssetSummaryGroupViewBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses ByAssetSummaryGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Asset.AssetSummaryGroup = AssetSummaryGroup)


		PurgeAssetCommentRel is an AssetComment set
			Instance Selection
				include deleted records

		PurgeAssetItemRel is an AssetItem set
			Instance Selection
				include deleted records

		PurgeAssetBookRel is an AssetBook set
			Instance Selection
				include deleted records
				where (related.Company	 = Company)

		PurgeAssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records
				where (related.Company			= Company)

		PurgeImportedAssetRel is an ImportedAsset set
			Instance Selection
				include deleted records

		PurgeAssetBookDisposalRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				include deleted records

		PurgeAssetAdjustmentRel is an AssetAdjustment set

		PurgeAssetTransferRel
			one-to-many relation to AssetTransfer
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset

		PurgeAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset

		PurgeAssetReinstatementsRel is an AssetReinstatement set

		PurgeAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		PurgeAssetRepairsRel
			one-to-many relation to AssetRepair
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		DeletedAssetAdjustmentRel is an AssetAdjustment set
			Instance Selection
				include only deleted records

		DeletedAssetTransferRel
			one-to-many relation to AssetTransfer
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				include only deleted records

		DeletedAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset
			Instance Selection
				include only deleted records

		DeletedAssetReinstatementsRel is an AssetReinstatement set
			Instance Selection
				include only deleted records

		DeletedAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include only deleted records

		DeletedAssetRepairsRel
			one-to-many relation to AssetRepair
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include only deleted records

		CompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalCompanyGroup
				related.Company						= Company
		GeneralLedgerCompanyGroupRel
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalCompanyGroup
		PurgeDisposedAssetAdjustmentRel is an AssetAdjustment set
			Instance Selection
				include deleted records

		PurgeDisposedAssetTransferRel
			one-to-many relation to AssetTransfer
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= Asset
			Instance Selection
				include deleted records

		PurgeDisposedAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset    				= Asset
			Instance Selection
				include deleted records

		PurgeDisposedAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records

		PurgeDisposedAssetRepairRel
			one-to-many relation to AssetRepair
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records

		PurgeDisposedAssetReinstatementRel
			one-to-many relation to AssetReinstatement
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records

		PurgeAssetBookPeriodHistoryRel
			one-to-many relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
			Instance Selection
				include deleted records
				where (related.Asset			= Asset
				and    related.Company			= Company)

		PurgePersonalUseHistoryRel
			one-to-many relation to PersonalUseHistory
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records

		PurgeAssetRecaptureRel
			one-to-many relation to AssetRecapture
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				include deleted records

		PurgeAssetBookHistoryRel
			one-to-many relation to AssetBookHistory
			Field Mapping uses symbolic key
			Instance Selection
				include deleted records
				where (related.Company			= Company
				and    related.Asset			= Asset)

		NewCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= "NEW"
				related.Company						= Company

		AssetFundsRel
			one-to-many relation to AssetFund
			delete cascades
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0

		ToAssetFundsRel
			one-to-many relation to AssetFund
			delete cascades
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= LocalToAssetForTransfer
				related.RecordType				= 0

		LeaseFundsRel
			one-to-many relation to LeaseFund
			Field Mapping uses ByLeaseFund
				related.Company					= AssetLease.LeaseCompany
				related.Lease	 				= AssetLease.Lease

		ToAssetItemFundsRel
			one-to-many relation to AssetItemFund
			delete cascades
			Field Mapping uses ByAssetFundItem
				related.Asset	 				= LocalToAssetForTransfer
				related.RecordType				= 0

		AssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
		
		AssetItemFundRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
			Instance Selection
				where (related.RecordType		= 0
				or     related.RecordType		= 2)

		AssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
			Instance Selection
				where (related.RecordType		= 0
				or     related.RecordType		= 2)

		AssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		FromAssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= LocalTransferFromAsset
				related.AssetTransfer			= LocalTransferFromAsset.LastAssetSequence



		LocalAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10

		LocalAssetTransferFundRel
			one-to-one relation to AssetTransferFund
			Field Mapping uses ByAssetTransferFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10

		ToAssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= LocalToAsset


		AssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset

		LocalItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses ByTransferFundItem
				related.Asset					= LocalAsset
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6 		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10 		= LocalFinanceDimension10

		ToAssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= LocalToAssetForTransfer

		LocalItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType		        = 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6 		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10 		= LocalFinanceDimension10

		LocalFundRel
			one-to-one relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6 		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10 		= LocalFinanceDimension10

		AssetInterfaceOptionsRel
			one-to-many relation to AssetInterfaceOptions
			Field Mapping uses ByAppendToAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetCompany			= Company
				related.AppendToAsset			= Asset


        GeneralLedgerCompanyRel
            one-to-one relation to GeneralLedgerCompany
            required
            Field Mapping uses symbolic key
                related.Company = Company

		UnJournalizedGLTransactionDetailsRel
    		one-to-many relation to GLTransactionDetail
   		 	Field Mapping uses BySystemAndCodeBlock
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
        		related.System                 = "AM"
    		Instance Selection
        		where (related.JournalizeGroup not entered
        		and   related.Status.Released)


		NewAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.NewAssetItemFund)

		AllAssetTransactionsRel
            one-to-many relation to AssetTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = LocalFinanceEnterpriseGroup
                related.Asset                     = LocalAssetTranAsset    
            Instance Selection
                where(related.Company                   = LocalAssetTranCompany)

		AssetTransactionDetailRel
			one-to-many relation to AssetTransactionDetail
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.AssetBatchUpdateResult		= LocalAssetMassReleaseResult
				related.RecordType					= 2

		AssetBatchUpdateResultRel
			one-to-many relation to AssetBatchUpdateResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetBatchUpdateResult		= LocalBatchResult)

		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
            	related.FSMBODCrossReference.SourceField 		= "CSFGLC"
            	related.FSMBODCrossReference.DestinationField 	= "DESTAE"
            Instance Selection
				where (related.SourceValue	= LocalCSFCrossReferenceGLC)

		AssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetAdjustment			= Asset.LastAssetSequence

        BookAdjustmentRel
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetAdjustment			= AssetAdjustmentRel.AssetAdjustment
				related.Book					= LocalBook

		UniqueAssetsTagAdjustmentRel
			one-to-many relation to Asset
			Field Mapping uses ByCompanyTagAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company 				= Company
				related.TagNumber				= UnreleasedAssetAdjustmentRel.TagNumber
			Instance Selection
				where (related.Asset		   != Asset
				and    related.TagNumber entered)

		UniqueAssetsTagTransferRel
			one-to-many relation to Asset
			Field Mapping uses ByCompanyTagAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company 				= UnreleasedAssetTransfersRel.Company
				related.TagNumber				= UnreleasedAssetTransfersRel.TagNumber
			Instance Selection
				where (related.Asset		   != Asset
				and    related.TagNumber entered)

		UnreleasedAssetPartialDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses ByDisposalAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.DisposalAsset			= Asset

		UnreleasedToAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset 					= LocalAsset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		UnreleasedToAssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalAsset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		ParentAssetTypeRel
			one-to-one relation to AssetType
			Field Mapping uses symbolic key
				related.Company						= LocalTransferCompany
				related.AssetType.Type 				= LocalParentAssetType
				related.AssetType.SubType        	= blank








		LocalGeneralLedgerEventRel
			one-to-one relation to GeneralLedgerEvent
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerEvent			= LocalGeneralLedgerEvent

		AssetErrorResultRel
			one-to-many relation to AssetErrorResult
			Field Mapping uses ByCompanyAsset
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Company 				= Company
				related.Asset 					= Asset

		AssetFundAdjustmentAdditionRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 2

		AssetFundOldRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 1

		AssetFundItemAdjustmentAdditionRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset	 				= Asset
				related.RecordType				= 2

		AssetItemFundAdjustmentAdditionRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
				related.Asset	 				= Asset
				related.AssetItem  				= LocalAssetItem
				related.RecordType				= 2

		AssetItemFundOldRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
				related.Asset	 				= Asset
				related.AssetItem  				= LocalAssetItem
				related.RecordType				= 1

		AssetItemFundActiveRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
				related.Asset					= Asset
				related.AssetItem				= LocalAssetItem
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6 		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10 		= LocalFinanceDimension10

		AssetFundItemOldRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset	 				= Asset
				related.RecordType				= 1

		ItemFundRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset	 				= Asset
			Instance Selection
				where (related.RecordsDeleted = true)	

		PfiUserTaskRel
			one-to-many relation to PfiUserTask
			Field Mapping uses symbolic key
			Instance Selection
				where (related.PfiTask.TaskName 	= "AssetApprover"
				and related.PfiUserProfile 		= actor)

		AssetReviewDetailRel
            one-to-one relation to AssetReviewDetail
            Field Mapping uses Set1
				related.AssetReview			= LocalAssetReview
				related.Company				= Company
				related.Asset	            = Asset

		FinanceEnterpriseGroupExtRel		
			one-to-one relation to FinanceEnterpriseGroupExt
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroupExt	= FinanceEnterpriseGroup

		CodeBlockRelationDetailRel
			one-to-one relation to CodeBlockRelationDetail
			Field Mapping uses ByKeyValues
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.CodeBlockRelation					= LocalCodeBlockRelation
				related.KeyFromValue						= LocalKeyFromValue
				related.KeyToValue							= LocalKeyToValue

	Field Groups

		TransactionEditFieldGroup	
			FinanceEnterpriseGroup
			Company
			AssetType
			AssetAccountGroup
			AssetAccountingUnitGroup
			AssetAccountingUnit
			DepreciationExpenseProject


    Sets

		ByCompanyAsset
			indexed
			Sort Order
				FinanceEnterpriseGroup
				Company
				CompanyAsset
				Asset

		ByCompanyAssetDescending
			indexed
			Sort Order
				FinanceEnterpriseGroup
				Company
				CompanyAsset descending
				Asset

        Set12
            indexed
            Sort Order
                FinanceEnterpriseGroup
                AssetGroup
                Asset

        Set13
            indexed
            Sort Order
                FinanceEnterpriseGroup
                AssetLease
                Asset

        Set2
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Company
                Asset

        ByAssetDescending
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Asset		descending

		ByAsset
			duplicates
            Sort Order
                Asset


        Set3
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Status
                AssetLocation
                DisposedAsset
                Asset

		Set4
			indexed
            Sort Order
                FinanceEnterpriseGroup
                Status
                AssetDivision
                DisposedAsset
                Asset

        Set5
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Status
                Company
                AssetType
                DisposedAsset
                Asset

        Set6
            indexed
            Instance Selection
                where (AssetGroupEntered)
            Sort Order
                FinanceEnterpriseGroup
                Status
                Company
                AssetGroup
                DisposedAsset
                Asset

        Set7
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Status
                Company
                AssetLocation
                AssetDivision
                AssetType
                DisposedAsset
                Asset

        Set8
            indexed
            Instance Selection
                where (IsDisposedNotUpdatable)
            Sort Order
                FinanceEnterpriseGroup
                Asset
                DisposedAsset

        Set9
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Status
                Company
                DisposedAsset
                Asset


        ByDisposedAsset
        	indexed
        	Sort Order
        		FinanceEnterpriseGroup
        		DisposedAsset
        		Asset
        		Company
        		Status

        ByAssetManagementInterfaceResult
            indexed
            Sort Order
                FinanceEnterpriseGroup
				AssetManagementInterfaceResult
                Asset

		ByCompanyTagAsset
			indexed
			Sort Order
				FinanceEnterpriseGroup
				Company
				TagNumber
				Asset

		ByStatus
			indexed
			Sort Order
				Status
				AssetProcess
				DisposedAsset
				FinanceEnterpriseGroup
				InterfaceInProgress
				Company
				Asset









	Create Rules

		if (!IncludeInPhysicalInventory)
			IncludeInPhysicalInventory = AssetType.IncludeInPhysicalInventory

		constraint (!Company.PeriodCloseRelease = "X")
			"PeriodOrYearEndCloseIsIncomplete"
		if (AssetProcess not entered)
			AssetProcess = "ADD"

		if (!WorkInProcess)
			if (Company.PeriodCloseRelease != "N")
				invoke SetPeriodCloseRelease Company
					invoked.PrmPeriodCloseRelease	= "N"
   		if (AssetManagementInterfaceResult not entered)
	   		invoke SetLastAsset AssetCompanyRel
				invoked.PrmLastAsset = Asset

		include IDM.CreateRules
			replace AttachmentField with Picture

	Delete Rules
		include IDM.DeleteNoArchiveRules
			replace AttachmentField with Picture

	Commit Rules
		include IDM.CommitRules
			replace AttachmentField with Picture


	Actions

		EditAsset is an Instance Action
			valid when (!ApprovalStatus.Submitted)
			Parameters
				PrmDescription is a Description
					default label is "Description"
				PrmTagNumber is a TagNumber
					default label is "TagNumber"
				PrmAssetOwner is an Employee
					default label is "Owner"


				PrmAdjustmentDate is Date
					default label is "AssetAdjustmentDate"
			Parameter Rules
				PrmDescription
					initial value is Description
					default to Description
				PrmTagNumber
					initial value is TagNumber
					default to TagNumber
				PrmAssetOwner
					initial value is AssetOwner
					default to AssetOwner



			Action Rules
				Description = PrmDescription
				TagNumber   = PrmTagNumber
				AssetOwner  = PrmAssetOwner

				if(Status.Released)
					AdjustmentDate = PrmAdjustmentDate
					invoke Released.Adjust ThisRecordRel
				else
				if(Status.PostRelease and AssetProcess.Adjustment)
					invoke Update UnreleasedAssetAdjustmentRel
						invoked.Description							= old Description
						invoked.AssetAdjustmentTo.Description		= Description
						invoked.TagNumber							= old TagNumber
						invoked.AssetAdjustmentTo.TagNumber			= TagNumber
						invoked.AssetOwner							= old AssetOwner
						invoked.ToAssetOwner						= AssetOwner

		BalanceAssetTransfer is an Instance Action  
			restricted
			Action Rules

				LocalGeneralLedgerEvent			= "TB"







		FullDispose is an Instance Action
			valid when (DisposalAllowed)
			Parameters
				PrmQuickDisposal	is Boolean
				PrmDisposalDate 	is Date
				PrmDisposalMethod	is a DisposalMethod
				PrmDisposalProperty is a DisposalProperty
				PrmProceedsCurrency	is a Currency
				PrmProceeds			is an InternationalAmount
				PrmCostOfSaleCurrency	is a Currency
				PrmCostOfSale		is an InternationalAmount
				PrmRelease			is Boolean
				PrmFullOrPartial	is a FullOrPartial

			Parameter Rules

			Action Rules
				invoke Unreleased.Dispose AssetDisposal(Asset) set
					invoked.QuickDisposal		= PrmQuickDisposal
					invoked.DisposalDate		= PrmDisposalDate
					invoked.DisposalMethod		= PrmDisposalMethod
					invoked.DisposalProperty	= PrmDisposalProperty
					invoked.ProceedsCurrency	= PrmProceedsCurrency
					invoked.Proceeds			= PrmProceeds
					invoked.CostOfSaleCurrency	= PrmCostOfSaleCurrency
					invoked.CostOfSale			= PrmCostOfSale
					invoked.FullOrPartial		= PrmFullOrPartial.Full
				if (PrmRelease)
					if (PostReleaseDisposal)
						if (AssetDisposal(Asset) set.DisposalStatus.Unreleased)
							invoke PostRelease.ReleaseDisposal




















	    CreateFromBatch is a Create Action
	        restricted

		CreateFromBatchFundTransactions is an Instance Action
			restricted
			Action Rules
				if (TransientPartialTransfer = false)
					if (UnreleasedAssetTransferRel.PartialTransfer)
						TransientPartialTransfer	= true
				for each UnreleasedAssetTransactionRel
					if (FundAllocationRequired
					and each.FundAccountType)
						invoke CreateFundTransactions each
							invoked.PrmTransactionDate	  = each.TransactionDate
							if (TransientPartialTransfer)
								invoked.TransferFromAsset = TransferFromAsset
							else
								invoked.TransferFromAsset = Asset
							if (AdjustmentItemsAdded entered)
								invoked.AdjustmentItemsAdded	= AdjustmentItemsAdded
								invoked.AdjustmentItemTotal  	= UnreleasedAssetAdjustmentRel.ItemTotalTransactionCost

		UpdateAsset is an Update Action
			restricted
			bypass field rules

		SubmitForApproval is an Instance Action
			valid when (SubmitForApprovalValid)
			Entrance Rules
				constraint (AssetItem set exists)
					"CannotSubmit;Asset<Asset>MustHaveAtLeastOneItem"

				constraint (AssetBook set exists)
					"CannotSubmit;AssetMustHaveAtLeastOneBook"
				
				if (!AssetProcess.Transfer
				and !AssetProcess.Disposal
				or (AssetProcess.Transfer
				and (not UnreleasedAssetTransferRel.TransferType.InterCompany
				and UnreleasedAssetTransferRel.FullOrPartial.Full)))
					for each RequiredCurrentCalendarsRel
						Book = each.Book
						constraint (AssetBookRel exists)
							"CannotSubmit;ARequiredBook<Book>IsNotDefined"

				if (!AssetProcess.Disposal)
					if (OriginatingCompany not entered
					or OriginatingCompany = Company)
						for each AssetBooksRel
							if (!each.Disposed)
								if (AssetCategory.NonDepreciable)
									constraint (each.Life not entered)
										"LifeCannotBeEnteredForNonDepreciableAsset"
									constraint (each.Method not entered)
										"MethodCannotBeEnteredForNonDepreciableAsset"
							else
								if (LocalBook.DepreciationType.AssetLevel)
									constraint (each.Method entered)
										"MethodForAssetBook<LocalBook>IsRequired"

								if (LocalBook.Book.DepreciationType.ClassLevel)
									constraint (each.Convention not entered)
										"ConventionCannotBeEnteredForClassTypeAssetBook<LocalBook>"
									constraint (each.Life not entered)
										"LifeCannotBeEnteredForClassTypeAssetBook<LocalBook>"
									constraint (each.Method not entered)
										"MethodCannotBeEnteredForClassTypeAssetBook<LocalBook>"
								else
									constraint (each.Convention entered)
										"ConventionForAssetBook<LocalBook>IsRequired"
									constraint (each.Life entered)
										"LifeForAssetBook<LocalBook>IsRequired"

							constraint (each.InServiceDate entered)
								"InServiceDateForAssetBook<LocalBook>IsRequired"
					if (AssetProcess.Transfer)
						if (UnreleasedAssetTransfersRel.TransferType.InterCompany)
							if (BookTransferRel exists)
								for each BookTransferRel
									if (each.FromBookCalendarCurrentRel.IsPostingBook)
										constraint (each.ToBook entered)
											"ToBookIsRequired"
										constraint (each.CurrentToBookCalendarRel.IsPostingBook)
											"FromBookIsAPostingBook,ToBookMustAlsoBeAPostingBook"
									else
										if (each.ToBook entered)
											constraint (!each.CurrentToBookCalendarRel.IsPostingBook)
												"ToBookMustBeANonPostingBook"
									if (each.ToBook entered)				//"TransferDateNotInCurr/1stFutureYearOfBook"    
										constraint (each.CurrentBookCalendarRel.BookCalendar.YearBeginDate = each.CurrentToBookCalendarRel.BookCalendar.YearBeginDate)
											"FromAndToCalendarYearsMustBeEqual"
										constraint (each.CurrentBookCalendarRel.BookCalendar.PostingBook = each.CurrentToBookCalendarRel.BookCalendar.PostingBook)
											"FromAndToCalendarsMustHaveSimilarSetup"
										constraint (each.CurrentBookCalendarRel.BookCalendar.NumberOfDepreciationPeriodsClosed = each.CurrentToBookCalendarRel.BookCalendar.NumberOfDepreciationPeriodsClosed)
											"FromAndToCalendarsMustBeInTheSameCurrentPeriod"
										constraint (each.CurrentBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodEndDates = each.CurrentToBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodEndDates)
											"FromAndToCalendarsMustHaveTheSamePeriodEndDates"
										constraint (each.CurrentBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodNumbers = each.CurrentToBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodNumbers)
											"FromAndToCalendarsMustHaveTheSamePeriodStructure"
										constraint (each.Book.MethodSwitch = each.ToBook.MethodSwitch)
											"FromAndToBooksMustTheSameMethodSwitch"
										constraint (each.Book.DepreciationType = each.ToBook.DepreciationType)
											"FromAndToBooksMustHaveTheSameDepreciationType"
										constraint (each.Book.Convention = each.ToBook.Convention)
											"FromAndToBooksMustHaveTheSameConvention"


										if (each.ToCompanyCurrentCalendarTransferDateRel not exists)
											if (UnreleasedAssetTransfersRel.TransferDate > each.CurrentToBookCalendarRel.BookCalendar.YearEndDate)
												constraint (each.ToCompanyFutureBookCalendarsRel exists)
													"TransferDateRequiresAFutureCalendarForToBook"		//"TransferDateNotInCurr/1stFutureYearOfBook"    
											if (UnreleasedAssetTransfersRel.TransferDate < each.CurrentToBookCalendarRel.BookCalendar.YearBeginDate)
												constraint (each.ToCompanyHistoryBookCalendarsRel exists)
													"TransferDateRequiresAHistoryCalendarForToBook"
						
			
			Action Rules

				include InitiateApprovalProcessFlow

		ManualApprove is an Instance Action
			valid when (ManualApprovalValid)
			default label is "Approve"
			Action Rules
				ManualProcess	= true
				if (Status.Unreleased)
					invoke Unreleased.Release
				else
					if (!AssetProcess.Disposal)
						invoke PostRelease.Release
					else
						invoke PostRelease.ReleaseDisposal

				cancel AssetApproval process

		ManualReject is an Instance Action
			valid when (ManualApprovalValid)
			default label is "Reject"
			Action Rules
				ManualProcess	= true
				invoke UpdateAsset
					invoked.ApprovalStatus		= ApprovalStatus.Rejected
				cancel AssetApproval process

		RequestNewAsset is an Instance RequestAction
			valid when (!RequestAssetValidation)
			request action process is RequestNewAsset
			request action linkback webapp is AssetManager
			allow user fields as parameters
			Parameters
				RequestPriority			is Numeric 1
					States
						High		value is 1
						Medium		value is 2
						Low			value is 3
				NeededBy				is Date
				Company 		is an AssetCompany
				Description
				TagNumber 				is like TagNumber
				Currency
				AssetType
				AssetCategory
				AssetGroup
				AssetSummaryGroup
				AssetAccountGroup
				AssetAccountingUnitGroup
					default label is "AssetDimensionGroup"
				AssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				IncludeInPhysicalInventory  is Boolean
		        AssetLease
		        AssetOwner					is an Employee
				Simulated                   is Boolean
		        WorkInProcess               is Boolean
		        TaxExempt                   is Boolean
		        Used                        is Boolean
		        AssetLocation
		        AssetDivision
		        AssetProject	 			is a FinanceCodeBlockProjectOnly
		        DepreciationExpenseProject	is a FinanceCodeBlockProjectOnly
		        	default label is "DepreciationExpenseProject"
		        AddComment					is Boolean
		        Name						is a CommentName
					default label is "Title"
				Type				is AlphaUpper 1
					States
						Addition		value is "A"
						Adjustment		value is "J"
						Disposal		value is "D"
						Transfer		value is "T"
						General			value is "C"
		        Comment						is a NewCommentText
		        Attachment					is a DocumentAttachment
			Parameter Rules
				RequestPriority
					required

				NeededBy
					required

				Description
					required
						"AssetDescriptionIsRequired"

				Company
					required
						"CompanyIsRequired"
					constraint (AssetCompanyRel exists)
						"CompanyMustBeAValidAssetCompany"
					constraint (Company.PendingYearEndCount = 0)
						"YearEndPending,CannotUpdate"

				AssetAccountingUnitGroup
					constraint (AssetAccountingUnitGroupRel exists)
						"AssetDimensionGroup<AssetAccountingUnitGroup>DoesNotExistForCompany<Company>"
					if (AssetAccountingUnit not entered)
						constraint (AssetAccountingUnitGroup entered)
							"AssetDimensionGroupOrDefaultTransactionDimensionsRequired"
						constraint (AssetAccountingUnitGroup.HasAllRequiredDimensions)
							"AssetDimensionGroupIsIncomplete;ProvideAdditionalDimensionsToDimensionGroupOrProvideDefaultTransactionDimensions"

				AssetType
					required
						"AssetTypeIsRequired"
					if (AssetCategory.Depreciable)
						constraint (!AssetType.Property.Stock and !AssetType.Property.Land)
							"PropertyTypeNotValidWithDepreciableAsset"

					if (AssetAccountingUnit not entered)
						constraint (AssetAccountingUnitGroup entered)
							"EitherDefaultAssetDimensionsOrAnAssetDimensionGroupIsRequired"
					if (AssetType.Impairment)
						if (!AssetType.ImpairmentAccountsExist)
							constraint (AssetAccountGroup.HasImpairmentAccounts)
								"ImpairmentAccountsRequiredOnEitherAssetTypeOrAssetAccountGroup"
						if (AssetAccountingUnit not entered)
							constraint (AssetAccountingUnitGroup.HasImpairmentAccounts)
								"ImpairmentDefaultsRequiredOnAssetDimensionGroup"

					if (AssetType.Revalue)
						if (!AssetType.RevalueAccountsExist)
							constraint (AssetAccountGroup.HasRevalueAccounts)
								"Asset<Asset>AssetTypeAllowsRevaluationDefineRevalueGainLossAccountsOnEitherAssetType<AssetType>OrAssetAccountGroup<AssetAccountGroup>"

						if (AssetType.PostToAccount.RevaluationReserve)
							if (!AssetType.RevalueReserveAccountExists)
								constraint (AssetAccountGroup.HasRevaluationReserveAccount)
									"Asset<Asset>AssetType<AssetType>RequiresARevaluationReserveAccountEitherOntheAssetTypeOrAssetAccountGroup<AssetAccountGroup>"
							if (AssetAccountingUnit not entered)
								constraint (AssetAccountingUnitGroup.RevalueReserve entered)
									"Asset<Asset>AssetType<AssetType>RequiresDefaultDimensionsForRevalueReserve;AssignDefaultDimensionCodesOrUpdateAssetDimensionGroup<AssetAccountingUnitGroup>"
							if (AssetType.AmortizeRevaluation)
								if (!AssetType.RevalueAmortizationAccountExists)
									constraint (AssetAccountGroup.AssetAccountRRARel.DistributionAccount entered)
										"AssetType<AssetType>RequiresAnAssetRevalueAmortizationAccountToBeDefined"
								if (AssetAccountingUnit not entered)
									constraint (AssetAccountingUnitGroup.RevalueAmortization entered)
										"AssetType<AssetType>RequiresAnAssetRevalueAmortizationDimensionsToBeDefined"

				AssetAccountGroup
					required
						"AssetAccountGroupIsRequired"

				Currency
					if (LeasedAsset)
						default to AssetLease.Lease.Currency
						constraint (Currency = AssetLease.Lease.Currency)
							"AssetCurrencyMustBeSameAsLeaseCurrency"
					else
						default to Company.Currency

				AssetCategory
					if (!LeasedAsset)
						default to AssetCategory.Depreciable
					else
						if (AssetLease.Lease.ShortTermGASBLease)
							default to AssetCategory.NonDepreciable
							constraint (AssetCategory.NonDepreciable)
								"ShortTermGASBLeaseMustHaveAssetCategorySetToNonDepreciable"
						if (AssetLease.Lease.LeaseClassification.Finance
						and !AssetLease.Lease.ShortTermGASBLease)
							if (AssetLease.Lease.LandAndBuilding.LandOnly)
								constraint (AssetCategory.NonDepreciable)
									"LandOnlyLeaseMustHaveAssetCategorySetToNonDepreciable"
							else
								constraint (AssetCategory.Depreciable)
									"FinanceLeaseMustHaveAssetCategorySetToDepreciable"
						else
							if (AssetLease.Lease.LeaseClassification.Operating)
								constraint (AssetCategory.NonDepreciable)
									"OperatingLeaseMustHaveAssetCategorySetToNonDepreciable"
					if (!IsUnreleased)
						if (AssetCategory changed)
							if (old AssetCategory.Depreciable
							and AssetCategory.NonDepreciable)
								confirmation required
									"ThisUpdateWillRemoveMethodsAndLifeFromRelatedAssetBooks"

				Classification
					initial value is AssetLease.Lease.LeaseClassification
					if (LeasedAsset)
						default to AssetLease.Lease.LeaseClassification
						if (Classification.Purchased)
							constraint (AssetLease.Lease.Status.Closed
							or          AssetLease.Lease.Status.Terminated)
								"LeaseMustBeClosedOrTerminatedBeforeAssetsCanBePurchased"
						if (AssetLease.Lease.LeaseClassification.Finance)
							if (AssetLease.LeaseCompany changed
							or  AssetLease.Lease changed
							or  Classification changed)
								constraint (AssetLease.Lease.Status.Unreleased)
									"CannotAddOrChangeAsset;LeaseIsNotUnreleased"
						else
							if (AssetLease.Lease.LeaseClassification.Operating)
								constraint (AssetCategory.NonDepreciable)
									"OperatingLeaseMustHaveAssetCategorySetToNonDepreciable"
							if (AssetLease.Lease.LeaseClassification entered)
								constraint (Classification = AssetLease.Lease.LeaseClassification)
									"AssetClassificationMustMatchLeaseClassification"
					else
						default to Classification.Purchased
						constraint (Classification.Purchased)
							"AssetIsNotLeased;ClassificationMustBePurchased"


				Simulated
					if (LeasedAsset)
						if (AssetLease.Lease.Simulated)
							constraint (Simulated = AssetLease.Lease.Simulated)
								"SimulatedLeaseRequiresSimulatedAssets"

					if (Status.Released)
						if (Simulated changed
						and !old Simulated)
							constraint (!Simulated)
								"AssetIsReleased;CannotChangeToSimulated"
				AddComment
					if (AddComment)
						constraint (Name entered
						and Type entered)
							"TitleAndTypeAreRequired"
			Local Fields
				LocalNewAsset	is an Asset






			Action Rules
				LocalBODProcessing = true
				invoke Create
					assign result to LocalNewAsset
					fill in user fields from parameters
					invoked.FinanceEnterpriseGroup 		= Company.FinanceEnterpriseGroup
					invoked.Company 					= Company
					invoked.Description 				= Description
					invoked.TagNumber					= TagNumber
					invoked.Currency 					= Currency
					invoked.AssetType					= AssetType
					invoked.AssetCategory 				= AssetCategory
					invoked.AssetGroup					= AssetGroup
					invoked.AssetAccountGroup 			= AssetAccountGroup
					invoked.AssetAccountingUnitGroup	= AssetAccountingUnitGroup
					invoked.AssetAccountingUnit			= AssetAccountingUnit
					invoked.IncludeInPhysicalInventory 	= IncludeInPhysicalInventory
	        		invoked.AssetLease					= AssetLease
	        		invoked.AssetOwner					= AssetOwner
					invoked.Simulated 					= Simulated
	       			invoked.WorkInProcess				= WorkInProcess
	        		invoked.TaxExempt 					= TaxExempt
	        		invoked.Used						= Used
	       	 		invoked.AssetLocation				= AssetLocation
	        		invoked.AssetDivision				= AssetDivision
	        		invoked.AssetProject				= AssetProject
	        		invoked.DepreciationExpenseProject 	= DepreciationExpenseProject
	        		invoked.LocalBODProcessing 			= true
	        		invoked.CreatedBy 					= actor
	        	if (AddComment)
	        		invoke Create AssetComment
	        			invoked.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
	        			invoked.Asset					= LocalNewAsset
	        			invoked.Name					= Name
	        			invoked.Type					= Type
	        			if (Comment entered)
	        				invoked.Comment 			= Comment
	        			if (Attachment entered)
	        				invoked.Attachment 			= Attachment
































		CopyExistingAsset is an Instance Action
			valid when (CopyLeasedAsset)
			Parameters
				PrmAssetCompany 		is an AssetCompany
					default label is "Company"
				PrmAssetDescription		is a Description
					default label is "Description"
				PrmTagNumber 			is like TagNumber
					default label is "TagNumber"
				PrmCurrency 			is a Currency
					default label is "Currency"
				AssetType
				PrmAssetGroup 			is an AssetGroup
					default label is "AssetGroup"
				PrmAssetAccountGroup 	is an AssetAccountGroup
					default label is "AssetAccountGroup"
				PrmAssetAccountingUnitGroup is an AssetAccountingUnitGroup
					default label is "AssetDimensionGroup"
				PrmAssetGuidelineClass	is an	AssetGuidelineClass	
					default label is "AssetGuidelineClass"
				PrmCopyExistingItem 	is Boolean
					default label is "CopyExistingItems"
				PrmCopyExistingBook		is Boolean
					default label is "CopyExistingBooks"
				PrmCopyFunds			is Boolean
					default label is "CopyFundAllocation"
				PrmPurchaseDate			is Date
					default label is "PurchaseDate"
				PrmComputeOption		is a Compute
					default label is "ComputeOption"
				PrmNumberOfCopies is Numeric size 2
					default label is "NumberOfCopies"
			Parameter Rules
				PrmAssetCompany
					default to Company
					initial value is Company
				PrmAssetDescription
					default to Description
					initial value is Description
				PrmCurrency
					default to Currency
					initial value is Currency
				AssetType
					default to Asset.AssetType
					initial value is Asset.AssetType
				PrmAssetGroup
					default to AssetGroup
					initial value is AssetGroup
				PrmAssetAccountGroup
					default to AssetAccountGroup
					initial value is AssetAccountGroup
				PrmAssetAccountingUnitGroup
					default to AssetAccountingUnitGroup
					initial value is AssetAccountingUnitGroup
				PrmPurchaseDate
					if (PrmCopyExistingItem entered)
						required
				PrmCopyExistingBook
					if (PrmCopyExistingBook)
						constraint (PrmAssetCompany = Company)
							"BooksCannotBeCopiedWhenCompanyIsChanged"
				PrmNumberOfCopies
					default to 1
					initial value is 1

				PrmAssetGuidelineClass
					default to AssetGuidelineClass
					initial value is AssetGuidelineClass

			Local Fields
				LocalNewAsset	                			is an Asset





				LocalNumberOfCopies                         is Numeric 2

			Action Rules
				constraint(PrmNumberOfCopies > 0)
					"NumberOfCopiesMustBeAtLeastOne"

				LocalNumberOfCopies = PrmNumberOfCopies
				while (PrmNumberOfCopies > 0)
					initialize LocalNewAsset
					invoke ImportCreate Asset
						assign result to LocalNewAsset
						fill in fields from this instance
							except invoked.DisposedAsset
							except invoked.LastAssetSequence
							except invoked.AssetManagementInterfaceResult
							except invoked.ApprovalStatus
						invoked.TagNumber						= PrmTagNumber
						invoked.AssetGroup						= PrmAssetGroup
						invoked.Company							= PrmAssetCompany
						invoked.Description						= PrmAssetDescription
						invoked.AssetType						= AssetType
						invoked.AssetAccountGroup				= PrmAssetAccountGroup
						invoked.AssetAccountingUnitGroup		= PrmAssetAccountingUnitGroup
						invoked.Currency						= PrmCurrency
						invoked.AssetGuidelineClass				= PrmAssetGuidelineClass
						invoked.CreatedBy						= actor
					if (PrmCopyExistingItem)
						for each AssetItemsRel
							if (Currency != PrmCurrency)
								LocalExchangeDate						= PrmPurchaseDate
								LocalFromCurrency           			= Currency
								LocalBaseAmount.ToCurrency				= PrmCurrency
								LocalCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
								LocalCurrencyAmount						= each.TransactionItemCost
							invoke Create AssetItem
								fill in fields from each
									except invoked.BarCode
									except invoked.InvoiceAndPurchaseOrderInformation
								invoked.Asset				= LocalNewAsset
								if (Currency != PrmCurrency)
									invoked.TransactionItemCost = LocalBaseAmount.OutputCurrencyAmount
								if (PrmPurchaseDate entered)
									invoked.PurchaseDate	= PrmPurchaseDate
					else
						confirmation required
							"ItemsShouldBeProvidedOnAssetAsTheCopyExistingItemsIsNotSelected"





					if (PrmCopyExistingItem
					and PrmCopyExistingBook
					and Asset.Company = PrmAssetCompany)





						for each FunctionalBooksRel
							LocalAsset = LocalNewAsset
							LocalBook = each.Book










							if (PrmComputeOption entered)
								invoke Create AssetBook
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= LocalNewAsset
									invoked.Book					= each.Book
									invoked.Convention				= each.Convention
									invoked.Method					= each.Method
									invoked.Life					= each.Life
									invoked.Active					= true
									invoked.InServiceDate			= PrmPurchaseDate
									invoked.ComputeOption			= PrmComputeOption
									invoked.BookRegulation			= each.BookRegulation
									invoked.ClassificationOfProperty = each.ClassificationOfProperty
									invoked.Used 					= Used
									invoked.IndianReservation		= each.IndianReservation
									invoked.PropertyType			= each.PropertyType
									invoked.QualifiedImprovement	= each.QualifiedImprovement
									invoked.ForeignProperty			= each.ForeignProperty
									invoked.CostRecoverySystem		= each.CostRecoverySystem
									invoked.NonConforming			= each.NonConforming
									invoked.Farming					= each.Farming
									invoked.MineralReserves			= each.MineralReserves
									invoked.LowIncomeHousing		= each.LowIncomeHousing
									invoked.Section179				= each.Section179
									invoked.Listed					= each.Listed
									invoked.DepreciableIntangible	= each.DepreciableIntangible
									invoked.TransitionalRuleFlag	= each.TransitionalRuleFlag
									invoked.TransientOtherPrograms	= true
									invoked.BonusAmount				= each.BonusAmount
									invoked.Section179Expense		= each.Section179Expense
							else
								invoke Create LocalAssetBookRel
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= LocalNewAsset
									invoked.Book					= each.Book
									invoked.Convention				= each.Convention
									invoked.Active					= true
									invoked.Method					= each.Method
									invoked.DepreciationStartDate	= LastAssetItemPurchaseDate
									invoked.Life					= each.Life
									invoked.LifeRemaining			= each.LifeRemaining
									invoked.BookRegulation			= each.BookRegulation
									if (PrmPurchaseDate entered)
										invoked.InServiceDate	= PrmPurchaseDate
									invoked.ClassificationOfProperty = each.ClassificationOfProperty
									invoked.Used 					= Used
									invoked.IndianReservation		= each.IndianReservation
									invoked.PropertyType			= each.PropertyType
									invoked.QualifiedImprovement	= each.QualifiedImprovement
									invoked.ForeignProperty			= each.ForeignProperty
									invoked.CostRecoverySystem		= each.CostRecoverySystem
									invoked.NonConforming			= each.NonConforming
									invoked.Farming					= each.Farming
									invoked.MineralReserves			= each.MineralReserves
									invoked.LowIncomeHousing		= each.LowIncomeHousing
									invoked.Section179				= each.Section179
									invoked.Listed					= each.Listed
									invoked.DepreciableIntangible	= each.DepreciableIntangible
									invoked.TransitionalRuleFlag	= each.TransitionalRuleFlag
									invoked.TransientOtherPrograms	= true
									invoked.BonusAmount				= each.BonusAmount
									invoked.Section179Expense		= each.Section179Expense
					else
						if (PrmCopyExistingBook not entered
						and Asset.Company = PrmAssetCompany)
							confirmation required
								"RequiredBooksWillBeAddedAsTheCopyExistingBooksIsNotSelected"
						if (!PrmCopyExistingItem
						and PrmCopyExistingBook
						and Asset.Company = PrmAssetCompany)
							for each FunctionalBooksRel
								LocalAsset = LocalNewAsset
								LocalBook = each.Book
								invoke CreateRequiredBooks LocalAssetBookRel
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= LocalNewAsset
									invoked.Book					= each.Book
									invoked.Convention				= RequiredBookRel.Convention
									invoked.Active					= true
									invoked.BookRegulation			= each.BookRegulation
									invoked.ClassificationOfProperty	= each.ClassificationOfProperty
									invoked.Used 						= Used
									invoked.IndianReservation			= each.IndianReservation
									invoked.PropertyType				= each.PropertyType
									invoked.QualifiedImprovement		= each.QualifiedImprovement
									invoked.ForeignProperty				= each.ForeignProperty
									invoked.CostRecoverySystem			= each.CostRecoverySystem
									invoked.NonConforming				= each.NonConforming
									invoked.Farming						= each.Farming
									invoked.MineralReserves				= each.MineralReserves
									invoked.LowIncomeHousing			= each.LowIncomeHousing
									invoked.Section179					= each.Section179
									invoked.Listed						= each.Listed
									invoked.DepreciableIntangible		= each.DepreciableIntangible
									invoked.TransitionalRuleFlag		= each.TransitionalRuleFlag
									invoked.TransientOtherPrograms		= true

						else
							LocalCompany = PrmAssetCompany
							for each RequiredCompanyCurrentCalendarsRel
								invoke CreateRequiredBooks AssetBook
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= LocalNewAsset
									invoked.Book					= each.Book
									invoked.Convention				= RequiredBookRel.Convention
									invoked.Active					= true
									invoked.BookRegulation			= RequiredBookRel.BookRegulation
									if (PrmPurchaseDate entered)
										invoked.InServiceDate		= PrmPurchaseDate
									if (!each.Book.BookRegulation entered)
										if (Used)
											invoked.Used = true

					PrmNumberOfCopies -= 1

				if (LocalNewAsset entered and LocalNumberOfCopies = 1)
					confirmation required
						"Asset(<LocalNewAsset>)IsAddedForCompany(<PrmAssetCompany>)"
				if (LocalNewAsset entered and LocalNumberOfCopies > 1)
					confirmation required
						"AssetWasSuccessfullyCopied<LocalNumberOfCopies>Times"



		AssetEdits is an Instance Action
			restricted
			Action Rules
				MassReleaseReportOnly = true
				include CloseControlDateEdit
				include CalculateAssetItemTotals
				include ReleaseAssetEdits
				include ReleaseSetActionEdits

		CheckAPC is an Instance Action
			restricted
			Parameters
				PrmCloseBatchResult					is an AssetBatchUpdateResult
				PrmCompany							is an AssetCompany
				PeriodCloseErrorMessage				is Alpha 150
				PeriodCloseError					is Boolean


			Action Rules

				include AccountDefaulting

				if (TranDepreciationExpenseAccount.Ledger entered)
					if (!TranDepreciationExpenseAccount.Ledger.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Ledger "+TranDepreciationExpenseAccount.Ledger+" Is Inactive"
				if (TranDepreciationExpenseAccount.ToAccountingEntity entered)
					if (!TranDepreciationExpenseAccount.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranDepreciationExpenseAccount.ToAccountingEntity+" Is Inactive"
				if (TranDepreciationExpenseAccount.AccountingUnit entered)
					if (!TranDepreciationExpenseAccount.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranDepreciationExpenseAccount.AccountingUnit+" Is Inactive"
				if (TranDepreciationExpenseAccount.GeneralLedgerChartAccount entered)
					if (!TranDepreciationExpenseAccount.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Account "+TranDepreciationExpenseAccount.GeneralLedgerChartAccount+" Is Inactive"
				if (TranDepreciationExpenseAccount.Project entered)
					if (!TranDepreciationExpenseAccount.Project.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranDepreciationExpenseAccount.Project+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension1 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension1.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranDepreciationExpenseAccount.FinanceDimension1+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension2 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension2.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranDepreciationExpenseAccount.FinanceDimension2+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension3 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension3.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranDepreciationExpenseAccount.FinanceDimension3+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension4 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension4.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranDepreciationExpenseAccount.FinanceDimension4+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension5 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension5.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranDepreciationExpenseAccount.FinanceDimension5+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension6 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension6.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranDepreciationExpenseAccount.FinanceDimension6+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension7 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension7.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranDepreciationExpenseAccount.FinanceDimension7+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension8 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension8.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranDepreciationExpenseAccount.FinanceDimension8+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension9 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension9.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranDepreciationExpenseAccount.FinanceDimension9+" Is Inactive"
				if (TranDepreciationExpenseAccount.FinanceDimension10 entered)
					if (!TranDepreciationExpenseAccount.FinanceDimension10.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranDepreciationExpenseAccount.FinanceDimension10+" Is Inactive"

				if (TranAccumulatedDepreciationAccount.Ledger entered)
					if (!TranAccumulatedDepreciationAccount.Ledger.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Ledger "+TranAccumulatedDepreciationAccount.Ledger+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.ToAccountingEntity entered)
					if (!TranAccumulatedDepreciationAccount.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranAccumulatedDepreciationAccount.ToAccountingEntity+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.AccountingUnit entered)
					if (!TranAccumulatedDepreciationAccount.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranAccumulatedDepreciationAccount.AccountingUnit+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.GeneralLedgerChartAccount entered)
					if (!TranAccumulatedDepreciationAccount.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Account "+TranAccumulatedDepreciationAccount.GeneralLedgerChartAccount+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.Project entered)
					if (!TranAccumulatedDepreciationAccount.Project.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranAccumulatedDepreciationAccount.Project+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension1 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension1.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension1+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension2 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension2.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension2+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension3 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension3.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension3+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension4 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension4.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension4+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension5 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension5.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension5+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension6 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension6.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension6+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension7 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension7.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension7+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension8 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension8.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension8+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension9 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension9.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension9+" Is Inactive"
				if (TranAccumulatedDepreciationAccount.FinanceDimension10 entered)
					if (!TranAccumulatedDepreciationAccount.FinanceDimension10.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranAccumulatedDepreciationAccount.FinanceDimension10+" Is Inactive"

				if (TranRevalueAmortization.Ledger entered)
					if (!TranRevalueAmortization.Ledger.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Ledger "+TranRevalueAmortization.Ledger+" Is Inactive"
				if (TranRevalueAmortization.ToAccountingEntity entered)
					if (!TranRevalueAmortization.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranRevalueAmortization.ToAccountingEntity+" Is Inactive"
				if (TranRevalueAmortization.AccountingUnit entered)
					if (!TranRevalueAmortization.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranRevalueAmortization.AccountingUnit+" Is Inactive"
				if (TranRevalueAmortization.GeneralLedgerChartAccount entered)
					if (!TranRevalueAmortization.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = "Account "+TranRevalueAmortization.GeneralLedgerChartAccount+" Is Inactive"	
				if (TranRevalueAmortization.Project entered)
					if (!TranRevalueAmortization.Project.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranRevalueAmortization.Project+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension1 entered)
					if (!TranRevalueAmortization.FinanceDimension1.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranRevalueAmortization.FinanceDimension1+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension2 entered)
					if (!TranRevalueAmortization.FinanceDimension2.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranRevalueAmortization.FinanceDimension2+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension3 entered)
					if (!TranRevalueAmortization.FinanceDimension3.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranRevalueAmortization.FinanceDimension3+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension4 entered)
					if (!TranRevalueAmortization.FinanceDimension4.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranRevalueAmortization.FinanceDimension4+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension5 entered)
					if (!TranRevalueAmortization.FinanceDimension5.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranRevalueAmortization.FinanceDimension5+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension6 entered)
					if (!TranRevalueAmortization.FinanceDimension6.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranRevalueAmortization.FinanceDimension6+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension7 entered)
					if (!TranRevalueAmortization.FinanceDimension7.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranRevalueAmortization.FinanceDimension7+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension8 entered)
					if (!TranRevalueAmortization.FinanceDimension8.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranRevalueAmortization.FinanceDimension8+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension9 entered)
					if (!TranRevalueAmortization.FinanceDimension9.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranRevalueAmortization.FinanceDimension9+" Is Inactive"
				if (TranRevalueAmortization.FinanceDimension10 entered)
					if (!TranRevalueAmortization.FinanceDimension10.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranRevalueAmortization.FinanceDimension10+" Is Inactive"
	
				if (TranRevalueReserve.Ledger entered)
                    if (!TranRevalueReserve.Ledger.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Ledger "+TranRevalueReserve.Ledger+" Is Inactive"
                if (TranRevalueReserve.ToAccountingEntity entered)
                    if (!TranRevalueReserve.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranRevalueReserve.ToAccountingEntity+" Is Inactive"
                if (TranRevalueReserve.AccountingUnit entered)
					if (!TranRevalueReserve.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranRevalueReserve.AccountingUnit+" Is Inactive"
				if (TranRevalueReserve.GeneralLedgerChartAccount entered)
                    if (!TranRevalueReserve.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Account "+TranRevalueReserve.GeneralLedgerChartAccount+" Is Inactive"
                if (TranRevalueReserve.Project entered)
                    if (!TranRevalueReserve.Project.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranRevalueReserve.Project+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension1 entered)
                    if (!TranRevalueReserve.FinanceDimension1.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranRevalueReserve.FinanceDimension1+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension2 entered)
                    if (!TranRevalueReserve.FinanceDimension2.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranRevalueReserve.FinanceDimension2+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension3 entered)
                    if (!TranRevalueReserve.FinanceDimension3.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranRevalueReserve.FinanceDimension3+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension4 entered)
                    if (!TranRevalueReserve.FinanceDimension4.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranRevalueReserve.FinanceDimension4+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension5 entered)
                    if (!TranRevalueReserve.FinanceDimension5.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranRevalueReserve.FinanceDimension5+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension6 entered)
                    if (!TranRevalueReserve.FinanceDimension6.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranRevalueReserve.FinanceDimension6+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension7 entered)
                    if (!TranRevalueReserve.FinanceDimension7.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranRevalueReserve.FinanceDimension7+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension8 entered)
                    if (!TranRevalueReserve.FinanceDimension8.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranRevalueReserve.FinanceDimension8+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension9 entered)
                    if (!TranRevalueReserve.FinanceDimension9.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranRevalueReserve.FinanceDimension9+" Is Inactive"
                if (TranRevalueReserve.FinanceDimension10 entered)
                    if (!TranRevalueReserve.FinanceDimension10.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranRevalueReserve.FinanceDimension10+" Is Inactive"

				if (TranAccumulatedImpairmentLoss.Ledger entered)
                    if (!TranAccumulatedImpairmentLoss.Ledger.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Ledger "+TranAccumulatedImpairmentLoss.Ledger+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.ToAccountingEntity entered)
                    if (!TranAccumulatedImpairmentLoss.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranAccumulatedImpairmentLoss.ToAccountingEntity+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.AccountingUnit entered)
					if (!TranAccumulatedImpairmentLoss.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranAccumulatedImpairmentLoss.AccountingUnit+" Is Inactive"
				if (TranAccumulatedImpairmentLoss.GeneralLedgerChartAccount entered)
                    if (!TranAccumulatedImpairmentLoss.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Account "+TranAccumulatedImpairmentLoss.GeneralLedgerChartAccount+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.Project entered)
                    if (!TranAccumulatedImpairmentLoss.Project.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranAccumulatedImpairmentLoss.Project+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension1 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension1.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension1+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension2 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension2.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension2+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension3 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension3.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension3+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension4 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension4.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension4+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension5 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension5.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension5+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension6 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension6.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension6+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension7 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension7.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension7+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension8 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension8.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension8+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension9 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension9.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension9+" Is Inactive"
                if (TranAccumulatedImpairmentLoss.FinanceDimension10 entered)
                    if (!TranAccumulatedImpairmentLoss.FinanceDimension10.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranAccumulatedImpairmentLoss.FinanceDimension10+" Is Inactive"

				if (TranImpairmentAmortization.Ledger entered)
                    if (!TranImpairmentAmortization.Ledger.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Ledger "+TranImpairmentAmortization.Ledger+" Is Inactive"
                if (TranImpairmentAmortization.ToAccountingEntity entered)
                    if (!TranImpairmentAmortization.ToAccountingEntity.Status.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.AccountingEntityLabel+" "+TranImpairmentAmortization.ToAccountingEntity+" Is Inactive"
                if (TranImpairmentAmortization.AccountingUnit entered)
					if (!TranImpairmentAmortization.AccountingUnit.Active)
						PeriodCloseError	= true
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
							invoked.Company				   = PrmCompany
							invoked.Asset				   = Asset
							invoked.ErrorClass			   = 3
							invoked.ErrorLevel             = 1
							invoked.AssetBatchUpdateResult = PrmCloseBatchResult
							invoked.ErrorMessage		   = ""+FinanceEnterpriseGroup.AccountingUnitLabel+" "+TranImpairmentAmortization.AccountingUnit+" Is Inactive"
				if (TranImpairmentAmortization.GeneralLedgerChartAccount entered)
                    if (!TranImpairmentAmortization.GeneralLedgerChartAccount.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = "Account "+TranImpairmentAmortization.GeneralLedgerChartAccount+" Is Inactive"
                if (TranImpairmentAmortization.Project entered)
                    if (!TranImpairmentAmortization.Project.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.ProjectLabel+" "+TranImpairmentAmortization.Project+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension1 entered)
                    if (!TranImpairmentAmortization.FinanceDimension1.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension1Label+" "+TranImpairmentAmortization.FinanceDimension1+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension2 entered)
                    if (!TranImpairmentAmortization.FinanceDimension2.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension2Label+" "+TranImpairmentAmortization.FinanceDimension2+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension3 entered)
                    if (!TranImpairmentAmortization.FinanceDimension3.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension3Label+" "+TranImpairmentAmortization.FinanceDimension3+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension4 entered)
                    if (!TranImpairmentAmortization.FinanceDimension4.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension4Label+" "+TranImpairmentAmortization.FinanceDimension4+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension5 entered)
                    if (!TranImpairmentAmortization.FinanceDimension5.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension5Label+" "+TranImpairmentAmortization.FinanceDimension5+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension6 entered)
                    if (!TranImpairmentAmortization.FinanceDimension6.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension6Label+" "+TranImpairmentAmortization.FinanceDimension6+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension7 entered)
                    if (!TranImpairmentAmortization.FinanceDimension7.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension7Label+" "+TranImpairmentAmortization.FinanceDimension7+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension8 entered)
                    if (!TranImpairmentAmortization.FinanceDimension8.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension8Label+" "+TranImpairmentAmortization.FinanceDimension8+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension9 entered)
                    if (!TranImpairmentAmortization.FinanceDimension9.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension9Label+" "+TranImpairmentAmortization.FinanceDimension9+" Is Inactive"
                if (TranImpairmentAmortization.FinanceDimension10 entered)
                    if (!TranImpairmentAmortization.FinanceDimension10.Active)
						PeriodCloseError	= true
                        invoke Create AssetErrorResult
                            invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup 
                            invoked.Company                = PrmCompany
							invoked.Asset				   = Asset
                            invoked.ErrorClass             = 3
                            invoked.ErrorLevel             = 1
                            invoked.AssetBatchUpdateResult = PrmCloseBatchResult
                            invoked.ErrorMessage           = ""+FinanceEnterpriseGroup.FinanceDimension10Label+" "+TranImpairmentAmortization.FinanceDimension10+" Is Inactive"

				if (TranDepreciationExpenseAccount entered)
					LocalFinanceCodeBlockFull		= TranDepreciationExpenseAccount
					include ValidateStructureRelations

				if (TranAccumulatedDepreciationAccount entered)
					LocalFinanceCodeBlockFull		= TranAccumulatedDepreciationAccount
					include ValidateStructureRelations

				if (TranRevalueAmortization entered)
					LocalFinanceCodeBlockFull		= TranRevalueAmortization
					include ValidateStructureRelations

				if (TranRevalueReserve entered)
					LocalFinanceCodeBlockFull		= TranRevalueReserve
					include ValidateStructureRelations

				if (TranAccumulatedImpairmentLoss entered)
					LocalFinanceCodeBlockFull		= TranAccumulatedImpairmentLoss
					include ValidateStructureRelations

				if (TranImpairmentAmortization entered)
					LocalFinanceCodeBlockFull		= TranImpairmentAmortization
					include ValidateStructureRelations
		
		BuildTextIndex is an Instance Action
			restricted
			Action Rules
				include BuildTextIndexes

		BuildTextIndexSetAction is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup 			is a FinanceEnterpriseGroup
				PrmAssetManagementInterfaceResult	is a AssetManagementInterfaceResult

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and PrmAssetManagementInterfaceResult = AssetManagementInterfaceResult)

			Sort Order is ByAssetManagementInterfaceResult

			Action Rules
				Instance Rules
					include BuildTextIndexes


		MassRelease is a Set Action
			restricted
			completion message is "<MassReleaseCompleteMessage>"
			run in background
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmRelease      		is AlphaUpper size 1
            		States
                		Yes value is "Y"
                		No  value is "N"
				Process         		is AlphaUpper size 3
            		States
		                All        value is blank
		                Addition   value is "ADD"
		                Adjustment value is "ADJ"
		                Disposal   value is "DSP"
		                Transfer   value is "TRF"
		                Reinstate  value is "RIN"
		                Impair	   value is "IMP"
		                Revalue	   value is "RVL"
				PrmCompany 				is an AssetCompany
				PrmCompanyGroup         is a GeneralLedgerCompanyGroup
		        PrmLocationName         is an AssetLocation
		        	context of PrmFinanceEnterpriseGroup
		        PrmDivision             is an AssetDivision
		        	context of PrmFinanceEnterpriseGroup
		        PrmAssetGroup           is an AssetGroup
		        	context of PrmFinanceEnterpriseGroup
		        PrmAuGroup              is an AssetAccountingUnitGroup
		        PrmAssetType            is an AssetType
		        PrmCreatorId            is an Actor
		        PrmAssetMassReleaseResult is an AssetBatchUpdateResult
		        	context of PrmFinanceEnterpriseGroup
		        PrmJournalizeGroup      		is like JournalizeGroup
		        PrmReferenceToAssetRelease is BusinessObjectReference
		        PrmDetailView			is Numeric 2
				PrmDefaultTransactionDimension	is a FinanceCodeBlockNoAccount
			Parameter Rules
				PrmFinanceEnterpriseGroup
		    		LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
		    	PrmCompanyGroup
		    		LocalCompanyGroup = PrmCompanyGroup
		    		if (PrmCompanyGroup entered)
						for each GeneralLedgerCompanyGroupRel
							LocalCompany = each.Company
				PrmRelease
					initial value is "Y"
           		    default to "Y"
           	Local Fields
				RecordCount						is Numeric 10
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
           		LocalReleaseCount				is Numeric 12
				LocalErrorCount					is Numeric 12
				IncrementJournalizeGroup 		is Boolean
				LocalAssetTransactionDetail		is an AssetTransactionDetail view
				LocalTranCompany                is like AssetCompany
				LocalTranAsset                  is like Asset
           	Instance Selection
       			where (((PrmCompany not entered or Asset.Company = PrmCompany)
				and (PrmCompanyGroup not entered or CompanyGroupRel exists)
           		and ((Status.Unreleased
           		and !AssetProcess.Transfer)
           		or (Status.PostRelease
				and OriginalAsset not entered)))
           		and ( Process not entered
           		or  AssetProcess = Process)
           		and (PrmLocationName not entered
           		or AssetLocation = PrmLocationName)
           		and (PrmDivision not entered
           		or  AssetDivision = PrmDivision)
           		and (PrmAssetGroup not entered
           		or  AssetGroup = PrmAssetGroup)
           		and (PrmAuGroup not entered
           		or  AssetAccountingUnitGroup = PrmAuGroup)
           		and ( PrmAssetType not entered
           		or  AssetType = PrmAssetType)
           		and (PrmDefaultTransactionDimension not entered
				or	((PrmDefaultTransactionDimension.Ledger not entered
				or	AssetAccountingUnit.Ledger	= PrmDefaultTransactionDimension.Ledger)
				and	(PrmDefaultTransactionDimension.ToAccountingEntity not entered
				or  AssetAccountingUnit.ToAccountingEntity	= PrmDefaultTransactionDimension.ToAccountingEntity)
				and	(PrmDefaultTransactionDimension.AccountingUnit not entered
				or 	AssetAccountingUnit.AccountingUnit	= PrmDefaultTransactionDimension.AccountingUnit)
				and	(PrmDefaultTransactionDimension.Project not entered
				or 	AssetAccountingUnit.Project	= PrmDefaultTransactionDimension.Project)
				and	(PrmDefaultTransactionDimension.FinanceDimension1 not entered
				or AssetAccountingUnit.FinanceDimension1	= PrmDefaultTransactionDimension.FinanceDimension1)
				and	(PrmDefaultTransactionDimension.FinanceDimension2 not entered
				or AssetAccountingUnit.FinanceDimension2	= PrmDefaultTransactionDimension.FinanceDimension2)
				and	(PrmDefaultTransactionDimension.FinanceDimension3 not entered
				or AssetAccountingUnit.FinanceDimension3	= PrmDefaultTransactionDimension.FinanceDimension3)
				and	(PrmDefaultTransactionDimension.FinanceDimension4 not entered
				or AssetAccountingUnit.FinanceDimension4	= PrmDefaultTransactionDimension.FinanceDimension4)
				and	(PrmDefaultTransactionDimension.FinanceDimension5 not entered
				or AssetAccountingUnit.FinanceDimension5	= PrmDefaultTransactionDimension.FinanceDimension5)
				and	(PrmDefaultTransactionDimension.FinanceDimension6 not entered
				or AssetAccountingUnit.FinanceDimension6	= PrmDefaultTransactionDimension.FinanceDimension6)
				and	(PrmDefaultTransactionDimension.FinanceDimension7 not entered
				or AssetAccountingUnit.FinanceDimension7	= PrmDefaultTransactionDimension.FinanceDimension7)
				and	(PrmDefaultTransactionDimension.FinanceDimension8 not entered
				or AssetAccountingUnit.FinanceDimension8	= PrmDefaultTransactionDimension.FinanceDimension8)
				and	(PrmDefaultTransactionDimension.FinanceDimension9 not entered
				or AssetAccountingUnit.FinanceDimension9	= PrmDefaultTransactionDimension.FinanceDimension9)
				and	(PrmDefaultTransactionDimension.FinanceDimension10 not entered
				or AssetAccountingUnit.FinanceDimension10	= PrmDefaultTransactionDimension.FinanceDimension10)))
           		and (PrmCreatorId not entered
           		or CreatedBy = PrmCreatorId)
           		and not WorkInProcess)

           	Sort Order
				FinanceEnterpriseGroup
				Company
				Asset

			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules
						initialize RecordCount
					Exit Rules
						if (PrmRelease.Yes)
							LocalAssetTranCompany = LocalTranCompany
							LocalAssetTranAsset   = LocalTranAsset
							invoke JournalizeDistributionsForBatch  last AllAssetTransactionsRel
								invoked.PrmOptions					= "1"
								invoked.PrmUpdateOrigin				= "1"
								invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
								if (PrmCompany entered)
									invoked.PrmAssetCompany 		= PrmCompany
								else
								if (PrmCompanyGroup entered)
									invoked.PrmCompanyGroup			= PrmCompanyGroup
								invoked.PrmDescription				= "Asset Batch Release"
								invoked.PrmJournalizeGroup			= PrmJournalizeGroup


							if (RecordCount > 0)
								invoke Update PrmAssetMassReleaseResult
									invoked.JournalizeGroup				= PrmJournalizeGroup

				Instance Rules
					LocalAssetMassReleaseResult	= PrmAssetMassReleaseResult
					LocalCompanyGroup 			= PrmCompanyGroup

					LocalReleaseSetAction 		= true
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError				 = false
					if (PrmRelease.Yes)
						if(IncrementJournalizeGroup = false)
							increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
							PrmJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							IncrementJournalizeGroup = true
						TransientJournalizeGroup = PrmJournalizeGroup



























						if(Status.Unreleased)
							invoke Unreleased.Release
								resume on error
									MassReleaseError = true
									MassReleaseErrorMessage = error message
									if (LocalCancelResume)
										cancel resume
						if(Status.PostRelease)
							if (FromAssetDisposal)
								if (IsBookDisposal)
									invoke PostRelease.InvokeAssetReleaseDisposal
										resume on error
											MassReleaseError = true
											MassReleaseErrorMessage = error message
											if (LocalCancelResume)
												cancel resume
								else
									invoke PostRelease.ReleaseDisposal
										resume on error
											MassReleaseError = true
											MassReleaseErrorMessage = error message
											if (LocalCancelResume)
												cancel resume
							else
								if (RevalueInProgress)
									invoke PostRelease.ReleaseRevalue
										resume on error
											MassReleaseError = true
											MassReleaseErrorMessage = error message
											if (LocalCancelResume)
												cancel resume

								else
									if (UnreleasedAssetReinstatementsExists)
										invoke PostRelease.ReleaseReinstatement
											resume on error
												MassReleaseError = true
												MassReleaseErrorMessage = error message
												if (LocalCancelResume)
													cancel resume

									else
										invoke PostRelease.Release
											resume on error
												MassReleaseError = true
												MassReleaseErrorMessage = error message
												if (LocalCancelResume)
													cancel resume
						if(!MassReleaseError)
							LocalTranCompany = Company
							LocalTranAsset   = Asset
							
					else
						invoke AssetEdits
							resume on error
								MassReleaseError = true
								MassReleaseErrorMessage = error message


					if (MassReleaseError)

						LocalErrorCount +=1
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
							invoked.Company				   = Company
							invoked.ErrorClass			   = 2
							invoked.ErrorLevel             = 1
							invoked.Asset				   = Asset
							invoked.AssetBatchUpdateResult = PrmAssetMassReleaseResult
							invoked.ErrorMessage		   = MassReleaseErrorMessage


		CalculateAssetTotals is a Set Action
			restricted
        	Instance Selection
        		where  (Asset > 0)

			Action Rules
	        	Instance Rules
	        		AssetItemTotalsDone = false
					include CalculateAssetItemTotals
					if (Status.PostRelease)
						invoke ReinstateTransaction UnreleasedAssetTransactionRel
							invoked.ProcessSequence = LastAssetSequence
							if (UnreleasedAssetTransfersRel exists
							or UnreleasedAssetAdjustmentsRel exists)
							 	invoked.ProcessAsset = Asset



		TransferCommentsFromBatch is an Instance Action
			restricted
			Parameters
				PrmToAsset			is like Asset

			Parameter Rules
				PrmToAsset
					required

			Action Rules
				for each AssetComment set
					if (each.Type = "A"
					or each.Type = "J"
					or each.Type = "T"
					or each.Type = "D")
						invoke Create AssetComment
							fill in fields from each
							invoked.Asset = PrmToAsset

		DeleteCommentsFromBatch is an Instance Action
			restricted
			Action Rules
				for each AssetComment set
					if (each.Type = "A"
					or each.Type = "J"
					or each.Type = "T"
					or each.Type = "D")
						invoke Delete each


		SetBackToActive is an Instance Action
			restricted
			Action Rules
				Status 					= "2"
				Reinstated 				= true
				initialize AssetProcess
				initialize ProcessDate
				initialize DisposedAsset
				initialize ReinstatementDate
				if (FundAllocationRequired)
					include GenerateFundAllocation
				make transition to Released

		JournalizeAsset is an Instance Action
			restricted
			Parameters
				PrmOptions						is Numeric 1
		            States
		              	ReleaseTransactions value is blank
		               	ReportOnly			value is 1
				PrmUpdateOrigin					is Numeric 1
					States
						Online				value is blank
						Batch				value is 1
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAssetCompany					is an AssetCompany
					default label is "Company"
				PrmJournalizeGroup      		is like JournalizeGroup
				PrmAsset						is an Asset
					context of PrmFinanceEnterpriseGroup
					default label is "Asset"

			Action Rules
				invoke JournalizeDistributions first UnreleasedAssetTransactionRel
					invoked.PrmOptions					= blank
					invoked.PrmUpdateOrigin				= blank
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAssetCompany				= Company
					if (PrmUpdateOrigin = blank)
						invoked.PrmAsset				= Asset

		RemoveDisposal is an Instance Action
			restricted
			Action Rules
				if (DisposedAsset entered
				and Asset != DisposedAsset)
					invoke PostRelease.DeletePartial DisposedAsset

				initialize AssetProcess
				initialize ProcessDate
				initialize DisposedAsset
				LastAssetSequence		-= 1
				if (FundAllocationRequired)
					include GenerateFundAllocation
				make transition to Released


		DecrementLastTransactionSequence is an Instance Action
			restricted
			Action Rules
				decrement LastTransactionSequence

		DecrementLastAssetSequence is an Instance Action
			restricted
			Action Rules
				decrement LastAssetSequence by 1

		UpdateLastPurchaseDate is an Instance Action
			restricted
			Action Rules
				LastAssetItemPurchaseDate = HighPurchaseDate

		IncludeInMassSelection is an Instance Action 
			valid when (!ContextMassSelection.SelectAll)
			Parameters
				MassSelectionType
				MassSelection

			Parameter Rules
				MassSelection
					constraint (!MassSelection.SelectAll)
						"CannotIncludeAssetForSelectAllOption"

			Action Rules
				LocalMassSelectionType	= MassSelectionType
				LocalMassSelection		= MassSelection

				constraint (MassSelectionDetailRel not exist)
					"MassSelectionDetailAlreadyExist"

				invoke Create MassSelectionDetail
					invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
					invoked.MassSelectionType			= MassSelectionType
					invoked.MassSelection		   		= MassSelection
					invoked.Asset						= Asset
					invoked.IncludeOrExcludeAsset		= "I"
					invoked.TagNumber					= TagNumber

		IncludeInMassSelectAll is an Instance Action 
			valid when (IncludeInMassSelectAll)
			Action Rules
				constraint (ContextMassSelection.SelectAll)
					"CannotIncludeAssetWhenSelectAllIsNotSet"

				invoke Delete ContextMassSelectionDetailRel

		ExcludeFromMassSelectAll is an Instance Action 
			valid when (ExcludeFromMassSelectAll)
			Action Rules
				constraint (ContextMassSelection.SelectAll)
					"CannotExcludeAssetWhenSelectAllIsNotSet"

				invoke Create MassSelectionDetail
					invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
					invoked.MassSelectionType			= ContextMassSelectionType
					invoked.MassSelection		   		= ContextMassSelection
					invoked.Asset						= Asset
					invoked.IncludeOrExcludeAsset		= "E"
					invoked.TagNumber					= TagNumber


		UpdateLastAssetSequence is an Instance Action
			restricted
			Parameters
				PrmLastAssetSequence	is a Sequence
			Action Rules
				if (PrmLastAssetSequence > 0)
					LastAssetSequence 		= PrmLastAssetSequence
				else
					initialize LastAssetSequence

		TransistiontoPostRelease is an Instance Action
			restricted
			Parameters
				PrmAssetProcess 		is a AssetProcess
				PrmProcessDate			is Date
				PrmLastAssetSequence	is a Sequence
				PrmDisposedAsset		is an Asset
				PrmReInstateFlag		is Boolean
				PrmReInstateDate		is Date

			Action Rules
				if (PrmAssetProcess entered)
					AssetProcess 			= PrmAssetProcess
				if (PrmProcessDate entered)
					ProcessDate				= PrmProcessDate
				if (PrmLastAssetSequence entered)
					LastAssetSequence 		= PrmLastAssetSequence
				if (PrmDisposedAsset entered)
					DisposedAsset 			= PrmDisposedAsset
				make transition to PostRelease

		TransistiontoDisposed is an Instance Action
			restricted
			Action Rules
				make transition to Disposed


		RestoreAsset is an Instance Action
			restricted
			Parameters
				PrmAssetProcess 		is a AssetProcess
				PrmRestoreDate			is Date
			Action Rules
				AssetProcess 		= PrmAssetProcess
				ReinstatementDate 	= PrmRestoreDate

				make transition to Disposed

		DefaultAccounts is an Instance Action
			restricted
			Action Rules
				include AccountDefaulting

		UpdateFromAssetItemTransfer is an Instance Action
			restricted
			Action Rules
				AssetItemTotalsDone = false
				include CalculateAssetItemTotals
				if (FundAccounting
				and !FundsUpdated)
					include GenerateFundAllocation


		UpdateFromAssetDisposal is an Instance Action
			restricted
			Parameters
				PrmTotalItemQty			is an ItemQuantity
				PrmTotalItemCost		is an InternationalAmount
				PrmTotalItemTax			is an InternationalAmount
				PrmTotalCostTran		is an InternationalAmount
				PrmTotalTaxTran			is an InternationalAmount

			Action Rules
				TotalItemQuantity			+= PrmTotalItemQty
				ItemTotalBaseCost			+= PrmTotalItemCost
				ItemTotalBaseTax			+= PrmTotalItemTax
				ItemTotalTransactionCost	+= PrmTotalCostTran
				ItemTotalTransactionTax		+= PrmTotalTaxTran

		UpdateFundAllocation is an Instance Action
			restricted
			Action Rules
				if (Asset.FundOverride
				and AssetProcess.Transfer
				and TransientFullTransfer)
					if (FundCount = LocalCounter)
						include GenerateFundAllocation
				else
					if (FundAccounting)
						LocalFromDisposalAsset = first OriginalAssetRel.Asset
						if (AssetProcess.Disposal
						and LocalFromDisposalAsset entered)
							invoke UpdateFundAllocation LocalFromDisposalAsset
						include GenerateFundAllocation

		UpdateFromAssetItem is an Instance Action
			restricted
			Parameters
				PrmTotalItemQty			is an ItemQuantity
				PrmTotalItemCost		is like InternationalAmount
				PrmTotalItemTax			is like InternationalAmount
				PrmTotalCostTran		is an InternationalAmount
				PrmTotalTaxTran			is an InternationalAmount
				CreateFromTransfer		is Boolean

			Action Rules
				TotalItemQuantity			= PrmTotalItemQty
				ItemTotalBaseCost			= PrmTotalItemCost
				ItemTotalBaseTax			= PrmTotalItemTax
				ItemTotalTransactionCost	= PrmTotalCostTran
				ItemTotalTransactionTax		= PrmTotalTaxTran
				if (FundAccounting)
					include GenerateFundAllocation

		UpdateFromAssetItemDisposal is an Instance Action
			restricted
			Action Rules
				AssetItemTotalsDone = false
				include CalculateAssetItemTotals

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID

		ReinstateDisposalTransactions is an Instance Action
			restricted
			Action Rules
				for each MemoAssetTransactionRel
					invoke AttachToAsset each

		UpdateFromDisposal is an Instance Action
			restricted
			Parameters
				PrmTotalItemQty			is an ItemQuantity
				PrmTotalItemCost		is an InternationalAmount
				PrmTotalItemTax			is an InternationalAmount
				PrmTotalCostTran		is an InternationalAmount
				PrmTotalTaxTran			is an InternationalAmount

			Action Rules
				TotalItemQuantity			+= PrmTotalItemQty
				ItemTotalBaseCost			+= PrmTotalItemCost
				ItemTotalBaseTax			+= PrmTotalItemTax
				ItemTotalTransactionCost	+= PrmTotalCostTran
				ItemTotalTransactionTax		+= PrmTotalTaxTran

			Exit Rules
				include CheckCloseReleaseFlag

		UpdateFromTransfer is an Instance Action
			restricted
			Parameters
				PrmTagNumber					is a TagNumber
				PrmAssetGroup					is an AssetGroup
				PrmCompany						is an AssetCompany
				PrmCurrency						is a Currency
				PrmAssetLocation				is an AssetLocation
				PrmAssetDivision				is an AssetDivision
				PrmAssetType					is an AssetType
				PrmAssetAccountGroup			is an AssetAccountGroup
				PrmAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				PrmAssetAccountingUnitGroup		is an AssetAccountingUnitGroup
				PrmItemTotalBaseCost			is an InternationalAmount
				PrmItemTotalBaseTax				is an InternationalAmount
				PrmItemTotalTransactionCost		is an InternationalAmount
				PrmItemTotalTransactionTax		is an InternationalAmount
				PrmDepreciationExpenseProject	is a FinanceCodeBlockProjectOnly
				PrmAssetProject					is a FinanceCodeBlockProjectOnly
				PrmLastAssetItemPurchaseDate 	is Date
				PrmAssetOwner					is an Employee

			Parameter Rules
				PrmCurrency
					default to Currency
					BypassActiveCodeBlockEdit 	= true

			Action Rules
				BypassActiveCodeBlockEdit 	= true
				TagNumber					= PrmTagNumber
				AssetGroup					= PrmAssetGroup
				Company						= PrmCompany
				Currency					= PrmCurrency
				AssetLocation				= PrmAssetLocation
				AssetDivision				= PrmAssetDivision
				AssetType					= PrmAssetType
				AssetAccountGroup			= PrmAssetAccountGroup
				AssetAccountingUnit			= PrmAssetAccountingUnit
				AssetAccountingUnitGroup	= PrmAssetAccountingUnitGroup
				ItemTotalBaseCost			= PrmItemTotalBaseCost
				ItemTotalBaseTax			= PrmItemTotalBaseTax
				ItemTotalTransactionCost 	= PrmItemTotalTransactionCost
				ItemTotalTransactionTax		= PrmItemTotalTransactionTax
				DepreciationExpenseProject	= PrmDepreciationExpenseProject
				AssetProject				= PrmAssetProject
				AssetOwner					= PrmAssetOwner
				if(PrmLastAssetItemPurchaseDate entered)
					LastAssetItemPurchaseDate = PrmLastAssetItemPurchaseDate

			Exit Rules
				include CheckCloseReleaseFlag
				include BuildTextIndexes

		UpdateFromTransferReset is an Instance Action
			restricted
			Parameters
				PrmTagNumber					is a TagNumber
				PrmAssetGroup					is an AssetGroup
				PrmCompany						is an AssetCompany
				PrmCurrency						is a Currency
				PrmAssetLocation				is an AssetLocation
				PrmAssetDivision				is an AssetDivision
				PrmAssetType					is an AssetType
				PrmAssetAccountGroup			is an AssetAccountGroup
				PrmAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
				PrmAssetAccountingUnitGroup		is an AssetAccountingUnitGroup
				PrmAssetProject					is a FinanceCodeBlockProjectOnly
				PrmDepreciationExpenseProject	is a FinanceCodeBlockProjectOnly
				PrmLastAssetItemPurchaseDate	is Date
				PrmAssetOwner					is an Employee

			Parameter Rules
				PrmCurrency
					default to Currency

			Action Rules
				TagNumber						= PrmTagNumber
				AssetGroup						= PrmAssetGroup
				Company							= PrmCompany
				Currency						= PrmCurrency
				AssetLocation					= PrmAssetLocation
				AssetDivision					= PrmAssetDivision
				AssetType						= PrmAssetType
				AssetAccountGroup				= PrmAssetAccountGroup
				AssetAccountingUnit				= PrmAssetAccountingUnit
				AssetAccountingUnitGroup		= PrmAssetAccountingUnitGroup
				AssetProject					= PrmAssetProject
				DepreciationExpenseProject		= PrmDepreciationExpenseProject
				LastAssetItemPurchaseDate		= PrmLastAssetItemPurchaseDate
				AssetOwner						= PrmAssetOwner

			Exit Rules
				include CheckCloseReleaseFlag
				include BuildTextIndexes

		TriggerAsset is an Instance Action
			restricted
			Parameters
				PrmDeleteAsset	is Alpha size 10
				PrmUpdateAsset  is Alpha size 10
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+" CO:"+Company+" Asset:"+Asset
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							if (PrmUpdateAsset = "")
								ActionCode = ActionCode.Update
							else
								ActionCode = PrmUpdateAsset
							if (action type.Create)
								ActionCode = ActionCode.Create
							if (PrmDeleteAsset = "Delete")
								ActionCode = ActionCode.Delete
							increment bod id.VariationID
							if (bod id.VariationID = 1)
								ActionCode = ActionCode.Create
							include TriggerAssetMasterServiceRules
							include TriggerProcessAssetMasterServiceRules



		DeleteAssetControlTransactionsFromBatch is an Instance Action
			restricted
			Action Rules
				if (AssetControlTransactionRel exists)
					invoke DeleteFromBatch AssetControlTransactionRel

		SetNewCompanyAsset is an Instance Action
			restricted
			Action Rules
				CompanyAsset = AssetCompanyRel.LastCompanyAsset + 1
		   		invoke SetLastCompanyAsset AssetCompanyRel
					invoked.PrmLastCompanyAsset = CompanyAsset

		UpdateBookUsedField is an Instance Action
			restricted
			Parameters
				UpdateUsedFieldOnBooks is Boolean

			Action Rules
				if (UpdateUsedFieldOnBooks)
					invoke Update AssetBooksRel
						invoked.Used = Used

		TriggerProcessAssetMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				initialize  LocalTriggerNoun
				invoke NativeLPLBODTriggerChecks FSMBODConfigRel
					invoked.PrmVerb 					= 2
					invoked.PrmNoun						= "AssetMaster"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "Asset"
					invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate			= "IONProcessAssetMaster_Asset_Header_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigRel.NativeLPLBODTrigger

				if(Company.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 2
							invoked.Noun 					= "AssetMaster"
							invoked.Direction				= 1
							invoked.BODDocumentID			= DerivedDocID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker			= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
					invoke SendProcessAssetMasterNativeLPLBOD
						resume on error
	                   		Error            				= true
	                        ErrorMessage     				= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 					= Error
							invoked.ErrorMessage 			= ErrorMessage
							invoked.Status					= 2
							invoked.BODID					= DerivedPAMBODID
							invoked.CloseDate				= system current timestamp
							invoked.BODXML					= ProcessAssetMasterBODXML
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status					= 3
							invoked.CloseDate				= system current timestamp
							invoked.BODID					= DerivedPAMBODID
							invoked.BODXML					= ProcessAssetMasterBODXML

		SendProcessAssetMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is ProcessAssetMasterBODXML
					bod type is "Process.AssetMaster"
					accounting entity is DerivedAccountingEntity
					document id is DerivedDocID
					variation id is DerivedBODVariationID

		TriggerAssetMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				LocalTriggerNoun = "Sync.AssetMaster"
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "AssetMaster"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "Asset"
					invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate			= "IONSyncAssetMaster_Asset_Header_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger

				if(Company.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if (DerivedConfigDocumentID = "Y")
						if (DerivedConfigFEG ="Y")
							LocalCSFCrossReferenceGLC  = FinanceEnterpriseGroup + DerivedDelimiter + Company.GeneralLedgerCompany.AccountingEntity
						else
							LocalCSFCrossReferenceGLC = Company.GeneralLedgerCompany.AccountingEntity

					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "AssetMaster"
							invoked.Direction				= 1
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker			= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
					invoke SendSyncAssetMasterNativeLPLBOD
						resume on error
	                   		Error            				= true
	                        ErrorMessage     				= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 					= Error
							invoked.ErrorMessage 			= ErrorMessage
							invoked.Status					= 2
							invoked.BODID					= DerivedBODID
							invoked.CloseDate				= system current timestamp
							invoked.BODXML					= AssetMasterBODXML
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status					= 3
							invoked.CloseDate				= system current timestamp
							invoked.BODID					= DerivedBODID
							invoked.BODXML					= AssetMasterBODXML

		SendSyncAssetMasterNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is AssetMasterBODXML
					bod type is "Sync.AssetMaster"
					accounting entity is DerivedAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID


		TriggerAssetTransactionNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				initialize  LocalTriggerNoun
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationATRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "AssetTransaction"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "Asset"
					invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate			= "IONSyncAssetTransaction_Asset_Header_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationATRel.NativeLPLBODTrigger

				if(Company.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "AssetTransaction"
							invoked.Direction				= 1
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker = FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Reference1				= Company
							invoked.Reference2				= Asset
							initialize invoked.Error
							initialize invoked.ErrorMessage
					invoke SendSyncAssetTransactionNativeLPLBOD
						resume on error
	                   		Error            				= true
	                        ErrorMessage     				= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 					= Error
							invoked.ErrorMessage 			= ErrorMessage
							invoked.Status					= 2
							invoked.BODID					= DerivedATBODID
							invoked.CloseDate				= system current timestamp
							invoked.BODXML					= AssetTransactionBODXML
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status					= 3
							invoked.CloseDate				= system current timestamp
							invoked.BODXML					= AssetTransactionBODXML
							invoked.BODID					= DerivedATBODID

		SendSyncAssetTransactionNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(AssetBooksRel exist)
					for each AssetBooksRel
						LocalBODAssetBook = each.Book
						if (AssetTransactionRel exist and AssetBookCalendarRel exist)
							for each AssetTransactionRel
								LocalCounter = LocalCounter + 1
								LocalTransactionDate = each.TransactionDate
								LocalAssetTransactionLineXML += template.IONSyncAssetTransaction_AssetTransaction_ST document for each
				if(LocalCounter > 0)
					send ion bod
						bod is AssetTransactionBODXML
						bod type is "Sync.AssetTransaction"
						accounting entity is DerivedAccountingEntity
						document id is DerivedDocumentID
						variation id is DerivedBODVariationID

		TriggerAssetTransaction is an Instance Action
			restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							ActionCode = ActionCode.Update
							if (action type.Create)
								ActionCode = ActionCode.Create
							increment bod id.VariationID
							include TriggerAssetTransactionRules


		UploadToIDM is an Instance Action
			valid when (Picture.ValidForIDMUpload)
			Action Rules
				include IDM.MoveAttachmentsToIDM
					replace AttachmentField   with Picture

		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (Picture.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount

					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with Picture

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop

		AssetBuildIndexSetAction is a Set Action
			default label is "BuildTextIndex"
			restricted
			Action Rules
				Instance Rules
					include BuildTextIndexes

		BODDataInitialLoadAssetCriteria is a Set Action
			restricted
			Parameters
				PrmFEG					is a FinanceEnterpriseGroup
				PrmFromCompany			is a Company
				PrmToCompany			is a Company
				PrmFromAsset			is a Asset
				PrmToAsset				is a Asset
			Parameter Rules

			Instance Selection

				where  (((PrmFEG entered
				and		  PrmFEG = FinanceEnterpriseGroup)
				or		  PrmFEG not entered)
				and	   ((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and	   ((PrmToCompany entered
				and		 PrmToCompany >= Company)
				or		 PrmToCompany not entered)
				and    ((PrmFromAsset entered
				and		 PrmFromAsset <= Asset)
				or		 PrmFromAsset not entered)
				and    ((PrmToAsset entered
				and		 PrmToAsset >= Asset)
				or		 PrmToAsset not entered)
				and 	(Status.Released
				or 		Status.Disposed))

			Action Rules
				Instance Rules
					if (Company.FinanceEnterpriseGroup.BODTrigger)
						LocalTitle = "EG:"+Company.FinanceEnterpriseGroup+" CO:"+Company+" Asset:"+Asset
						ActionCode	= ActionCode.Create
						increment bod id.VariationID
						include TriggerAssetMasterServiceRules
						include TriggerProcessAssetMasterServiceRules



		BODDataInitialLoadAssetTransactionCriteria is a Set Action
			restricted
			Parameters
				PrmFEG					is a FinanceEnterpriseGroup
				PrmFromCompany			is a Company
				PrmToCompany			is a Company
				PrmFromAsset			is a Asset
				PrmToAsset				is a Asset
			Parameter Rules

			Instance Selection

				where  (((PrmFEG entered
				and		  PrmFEG = FinanceEnterpriseGroup)
				or		  PrmFEG not entered)
				and	   ((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and	   ((PrmToCompany entered
				and		 PrmToCompany >= Company)
				or		 PrmToCompany not entered)
				and    ((PrmFromAsset entered
				and		 PrmFromAsset <= Asset)
				or		 PrmFromAsset not entered)
				and    ((PrmToAsset entered
				and		 PrmToAsset >= Asset)
				or		 PrmToAsset not entered)
				and 	(Status.Released
				or 		Status.Disposed))

			Action Rules
				Instance Rules
					if (Company.FinanceEnterpriseGroup.BODTrigger)
						ActionCode	= ActionCode.Create
						increment bod id.VariationID
						include TriggerAssetTransactionRules



		PurgeAssets is a Set Action
			restricted

			Parameters
				PrmPurgeSimulated		is Boolean
				PrmCompany				is an AssetCompany
				PrmDisposalHistory		is Boolean
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType
				PrmAdjustmentCount 		is Numeric 10
				PrmTransferCount		is Numeric 10
				PrmDisposalCount		is Numeric 10
				PrmReinstatementCount	is Numeric 10
				PrmTransactionCount		is Numeric 10
				PrmBookTransactionCount is Numeric 10
				PrmCommentCount			is Numeric 10
				PrmRepairCount			is Numeric 10
				PrmImportCount			is Numeric 10

			Local Fields
				LocalActor				is an Actor
				LocalNotification		is LPLText
				LocalNewLine			is LPLText
				LocalSetAssetCount		is Numeric 10

			Instance Selection
				include deleted records
				where (Company	= PrmCompany
				and (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and (PrmAssetType not entered or AssetType.Type = PrmAssetType)
				and (PrmAssetSubType not entered or AssetType.SubType = PrmAssetSubType))

			Action Rules
				Set Rules
					Exit Rules
						LocalNewLine		= "\u000a"
						LocalNotification	+= LocalNewLine + "Company: "	+ PrmCompany				+ LocalNewLine
						LocalNotification	+= "Adjustment History: "		+ PrmAdjustmentCount		+ LocalNewLine
						LocalNotification	+= "Transfer History: "			+ PrmTransferCount			+ LocalNewLine
						LocalNotification	+= "Disposal History: "			+ PrmDisposalCount			+ LocalNewLine
						LocalNotification	+= "Reinstatement History: "	+ PrmReinstatementCount		+ LocalNewLine
						LocalNotification	+= "Asset Transactions: "		+ PrmTransactionCount		+ LocalNewLine
						LocalNotification   += "Asset Book Transactions: "	+ PrmBookTransactionCount   + LocalNewLine
						LocalNotification	+= "Comments: "					+ PrmCommentCount			+ LocalNewLine
						LocalNotification	+= "Repair: "					+ PrmRepairCount			+ LocalNewLine
						LocalNotification	+= "Imported Assets: "			+ PrmImportCount			+ LocalNewLine
						LocalNotification	+= "Assets: "					+ LocalSetAssetCount		+ LocalNewLine

						LocalActor = actor
						send notification
							to LocalActor
							description is "PurgeAssetHistoryHasBeenCompletedForCompany:<PrmCompany>"
							priority is high
							detail is "<LocalNotification>"

				Instance Rules
					if  (ValidForPurging
					and ((PrmPurgeSimulated and Simulated)
					or  (PrmDisposalHistory
					and  Status.Disposed
					and  (PrmFromDate not entered or ProcessDate >= PrmFromDate)
					and  (PrmToDate not entered or ProcessDate <= PrmToDate)
					and  ((not Simulated and not PrmPurgeSimulated) or (Simulated and PrmPurgeSimulated)))))
						LocalSetAssetCount += 1
						invoke Purge PurgeImportedAssetRel
						invoke Purge PurgeAssetCommentRel
						invoke Purge PurgeAssetBookTransactionRel
						invoke Purge PurgeAssetItemRel
						invoke Purge PurgeAssetBookRel
						invoke Purge PurgeAssetBookDisposalRel
						invoke Purge DeletedAssetAdjustmentRel
						invoke Purge DeletedAssetTransferRel
						invoke Purge DeletedAssetDisposalRel
						invoke Purge DeletedAssetReinstatementsRel
						invoke Purge DeletedAssetTransactionRel
						invoke Purge DeletedAssetRepairsRel
						invoke Purge

		PurgeDeletedAssets is a Set Action
			restricted
			Instance Selection
				include only deleted records
			Action Rules
				Instance Rules
					invoke Purge PurgeImportedAssetRel
					invoke Purge PurgeAssetCommentRel
					invoke Purge PurgeAssetBookTransactionRel
					invoke Purge PurgeAssetItemRel
					invoke Purge PurgeAssetBookRel
					invoke Purge PurgeAssetBookDisposalRel
					invoke Purge DeletedAssetAdjustmentRel
					invoke Purge DeletedAssetTransferRel
					invoke Purge DeletedAssetDisposalRel
					invoke Purge DeletedAssetReinstatementsRel
					invoke Purge DeletedAssetTransactionRel
					invoke Purge DeletedAssetRepairsRel
					invoke Purge

		PurgeDisposedAssets is a Set Action
			restricted
			Parameters
				PrmCompany					is an AssetCompany
				PrmAsset					is an Asset
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmLeaseCompany				is like GeneralLedgerCompany
				PrmLocationName				is like AssetLocation
				PrmDivision					is like AssetDivision
				PrmAssetGroup				is like AssetGroup
				PrmFromDate					is Date
				PrmToDate					is Date

			Instance Selection
				include deleted records
				where (Asset.Company = PrmCompany
				and   (PrmAsset not entered or (Asset = PrmAsset and Asset.Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup))
				and   (PrmLeaseCompany not entered or Asset.AssetLease.LeaseCompany = PrmLeaseCompany)
				and   (PrmLocationName not entered or Asset.AssetLocation = PrmLocationName)
				and   (PrmDivision not entered or Asset.AssetDivision = PrmDivision)
				and   (PrmAssetGroup not entered or Asset.AssetGroup = PrmAssetGroup)
				and   (PrmFromDate not entered or Asset.AssetDisposalDate >= PrmFromDate)
				and   (PrmToDate not entered or Asset.AssetDisposalDate <= PrmToDate)
				and   Status.Disposed)

			Action Rules
				Instance Rules
					invoke Purge PurgeAssetItemRel
					invoke Purge PurgeDisposedAssetDisposalRel
					invoke Purge PurgeAssetBookRel
					invoke Purge PurgeAssetBookDisposalRel
					invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		RemovePurgedLeaseDataOnAsset is a Set Action  
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmLeaseCompany is like GeneralLedgerCompany
					default label is "LeaseCompany"
				PrmLease	     is like Lease
					default label is "Lease"

			Instance Selection
				include deleted records
				where (Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    AssetLease.LeaseCompany = PrmLeaseCompany
				and    AssetLease.Lease = PrmLease)

			Action Rules
				Instance Rules
					initialize AssetLease
					AssetCategory				= "N"

					if (PurgeAssetAdjustmentRel exists)
						for each PurgeAssetAdjustmentRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetTransferRel exists)
						for each PurgeAssetTransferRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetDisposalRel exists)
						for each PurgeAssetDisposalRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetReinstatementsRel exists)
						for each PurgeAssetReinstatementsRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetTransactionRel exists)
						for each PurgeAssetTransactionRel
							invoke RemovePurgedLeaseID each

		ASC840OldLeaseDataPurge is a Set Action  
			restricted

			Instance Selection
				where (AssetLease entered)

			Action Rules

				Instance Rules
	        		initialize AssetLease
	        		AssetCategory				= "N"

	        		if (PurgeAssetAdjustmentRel exists)
	        			for each PurgeAssetAdjustmentRel
	        				invoke RemovePurgedLeaseID each
					if (PurgeAssetTransferRel exists)
						for each PurgeAssetTransferRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetDisposalRel exists)
						for each PurgeAssetDisposalRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetReinstatementsRel exists)
						for each PurgeAssetReinstatementsRel
							invoke RemovePurgedLeaseID each
					if (PurgeAssetTransactionRel exists)
						for each PurgeAssetTransactionRel
							invoke RemovePurgedLeaseID each

#ifdef module truecost
		LoadToTrueCostAssetManagementInterface is a Set Action
			default label is "InterfaceAssetTransactions"
			Parameters
				PrmRunGroup			is a RunGroup
		 			default label is "RunGroup"
		 		PrmDate				is Date
		 			default label is "Date"

			Parameter Rules
				PrmRunGroup
					required
				PrmDate
					default to current corporate date
					initial value is current corporate date
					LocalCurrentYear	=	PrmDate year
					LocalCurrentMonth	=	PrmDate month

			Instance Selection
					where(Status.Released)

			Local Fields
				LocalFirstCount						is Numeric 10
				LocalFinalCount						is Numeric 10
				LocalActor							is an Actor

			Sort Order
				Company
				Asset

			Action Rules
				Set Rules
					Entrance Rules
						LocalCurrentYear	=	PrmDate year
						LocalCurrentMonth	=	PrmDate month
						LocalFirstCount =	instance count of AssetBookPeriodHistoryRel
						LocalActor = actor

					Exit Rules
						LocalFinalCount =	LocalFirstCount - instance count of AssetBookPeriodHistoryRel
						send notification
							to LocalActor
							description is "GenerateResourceRateDataHasCompleted"
							priority is high
							detail is "NumberOfSuccessfulRecords<LocalFinalCount>.___NumberOfFailedRecords<instance count of AssetBookPeriodHistoryRel>.___TotalRecordsProcessed<LocalFirstCount>."

				Asset Set Rules
					Entrance Rules

						LocalCurrentYear	=	PrmDate year
						LocalCurrentMonth	=	PrmDate month
						if(AssetBookPeriodHistoryRel exists)
							invoke Create TrueCostAssetManagementInterface
								invoked.TrueCostAssetManagementInterface.RunGroup	=	PrmRunGroup
								invoked.TrueCostConfiguration						= 	Asset.FinanceEnterpriseGroup
								invoked.AccountingEntity							=	AssetBookPeriodHistoryRel.Company

								invoked.AssetAccountingUnitGroup					=	Asset.AssetAccountingUnitGroup
								invoked.Asset										=	AssetBookPeriodHistoryRel.Asset
								invoked.CurrentPeriodDepreciation					=	AssetBookPeriodHistoryRel.CurrentPeriodDepreciation
								invoked.YearEndDate									=	AssetBookPeriodHistoryRel.YearEndDate
								invoked.Period										=	AssetBookPeriodHistoryRel.AssetBookPeriodHistory.Period
					Exit Rules

				Instance Rules

		CreateAssetReviewDetail is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmCompany					is an AssetCompany
				PrmAssetOwner 				is like Employee
				PrmAssetType				is an AssetType
				PrmAssetDimensionGroup   	is an AssetAccountingUnitGroup
				PrmThreshold				is an InternationalAmount
				PrmAssetReview  			is Date
				PrmThread 					is Numeric size 2
				PrmQueue  					is Numeric size 2
			Instance Selection
				where  (PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				and Status.Released
				and PrmCompany = Company
				and (PrmAssetOwner not entered or PrmAssetOwner = AssetOwner)
				and (PrmAssetDimensionGroup not entered or PrmAssetDimensionGroup = AssetAccountingUnitGroup)
				and ((PrmThreshold entered
				and ItemTotalTransactionCost >= PrmThreshold)
				or  (PrmThreshold not entered
				and ItemTotalTransactionCost >= Company.AssetCostThreshold))
				and ((PrmAssetType entered
				and PrmAssetType.Type = AssetType.Type
				and PrmAssetType.SubType = AssetType.SubType)
				or (PrmAssetType not entered
				and (!Company.SelectAssetTypeForReview
				or (Company.SelectAssetTypeForReview
				and AssetType.FlagForReview))))
				and (PrmQueue             <=1
				or  Asset % PrmQueue    = PrmThread))
			Sort Order is Set5
			Action Rules
				Instance Rules
					include CreateAssetReviewDetail

		ReBuildAssetReviewDetail is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmCompany					is an AssetCompany
				PrmAssetReview  			is Date
				PrmThread 					is Numeric size 2
				PrmQueue  					is Numeric size 2
			Instance Selection
				where  (PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				and Status.Released
				and PrmCompany = Company
				and (!Company.SelectAssetTypeForReview
				or (Company.SelectAssetTypeForReview
				and AssetType.FlagForReview))
				and ItemTotalBaseCost >= Company.AssetCostThreshold
				and (PrmQueue             <=1
				or  Asset % PrmQueue    = PrmThread))
			Sort Order is Set5
			Action Rules
				Instance Rules
					include CreateAssetReviewDetail

#endif
	StateCycles
		AssetLifeCycle is a StateCycle
			state field is Status

			Unreleased is a State
				Create is a Create Action
					Entrance Rules
						include CreateEntranceRules
					Action Rules
						if (AssetProcess.Transfer)
							BypassActiveCodeBlockEdit = true
					Exit Rules
						if(!LocalBODProcessing)		
							constraint (Company.AccountingEntity.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
								"CompanyDoesNotExist"
						if (AssetProcess = "ADD")
							for each RequiredCurrentCalendarsRel
								LocalBook = each.Book
								invoke CreateRequiredBooks AssetBook
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Company 				= Company
									invoked.Asset 					= Asset
									invoked.Book					= LocalBook
									invoked.Convention				= RequiredBookRel.Convention
									invoked.Active					= true
									invoked.DepreciationStartDate	= LastAssetItemPurchaseDate
									if(each.IsPostingBook)		
										if(AssetCategory.Depreciable and LeasedAsset)
											invoked.Method = "SL"
											invoked.Life   = AssetLease.Lease.DerivedROUAmortization
									if (each.Book.BookRegulation entered)
										invoked.BookRegulation		= each.Book.BookRegulation
										if (AssetGuidelineClass not entered)
											invoked.Used = Used

									else
										invoked.Used = Used

						include CheckCloseReleaseFlag
						include BuildTextIndexes
						if (AssetLease.Lease.CreateAssetFundRecords)
							FundOverride	= true
							for each LeaseFundsRel
								invoke CreateFromAssetGenerate AssetFund
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= Asset
									invoked.AccountingEntity		= each.AccountingEntity
									invoked.AccountingUnit			= each.AccountingUnit
									invoked.Project					= each.Project
									invoked.FinanceDimension1		= each.FinanceDimension1
									invoked.FinanceDimension2		= each.FinanceDimension2
									invoked.FinanceDimension3		= each.FinanceDimension3
									invoked.FinanceDimension4		= each.FinanceDimension4
									invoked.FinanceDimension5		= each.FinanceDimension5
									invoked.FinanceDimension6		= each.FinanceDimension6
									invoked.FinanceDimension7		= each.FinanceDimension7
									invoked.FinanceDimension8		= each.FinanceDimension8
									invoked.FinanceDimension9		= each.FinanceDimension9
									invoked.FinanceDimension10		= each.FinanceDimension10
									invoked.PercentContribution		= each.PercentContribution
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										invoked.Fund = each.AccountingUnit
									else
										invoked.Fund = each.FinanceDimension1

				ImportCreate is a Create Action
					restricted
					Entrance Rules
						include CreateEntranceRules

					Exit Rules
						include CheckCloseReleaseFlag
						include BuildTextIndexes

				CreateAssetFromTemplate is a Create Action  
					restricted
					Exit Rules
						include BuildTextIndexes


				PortableCreateFromTemplate is a Create Action
					default label is "CreateAssetFromTemplate"
					Parameters
						FinanceEnterpriseGroup
						Company						is an AssetCompany
						AssetTemplate
							context of FinanceEnterpriseGroup
						AssetLease
						Description
						AssetType
						AssetCategory
						AssetGroup
							context of FinanceEnterpriseGroup
						TagNumber
						AssetAccountGroup
						AssetAccountingUnitGroup
						AssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
						DepreciationExpenseProject 	is a FinanceCodeBlockProjectOnly
						AssetGuidelineClass		
							context of FinanceEnterpriseGroup
						AssetOwner					is an Employee
							context of FinanceEnterpriseGroup
						AssetLocation
							context of FinanceEnterpriseGroup
						AssetDivision
							context of FinanceEnterpriseGroup
						ComputeOption				is Boolean
						Currency
						Simulated					is Boolean
						WorkInProcess				is Boolean
						TaxExempt					is Boolean
						Used						is Boolean
						IncludeInPhysicalInventory	is Boolean
						AssetTemplateItemArray
							context of FinanceEnterpriseGroup
						BypassAssetItem				is Boolean
						AssetProject				is a FinanceCodeBlockProjectOnly
						ShowItem1					is Boolean
						ShowItem2					is Boolean
						ShowItem3					is Boolean
						ShowItem4					is Boolean
						ShowItem5					is Boolean
						ShowItem6					is Boolean
						ShowItem7					is Boolean
						ShowItem8					is Boolean
						BODProcessing				is Boolean		
						FundOverride				is Boolean
						ReferenceFieldType1 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType2 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType3 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType4 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType5 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType6 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType7 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3
						ReferenceFieldType8 is Numeric 2
							States
								None   								value is 1
								Internal        					value is 2
								External							value is 3

					Parameter Rules
						AssetTemplate
							required
						Company
							initial value is AssetTemplate.Company
							default to AssetTemplate.Company
							required
						AssetLease
							if (AssetLease.Lease entered)
								constraint (AssetLease.LeaseCompany entered)
									"LeaseCompanyMustBeEntered"
						Description
							initial value is AssetTemplate.Description
							default to AssetTemplate.Description
							required
						AssetType
							initial value is AssetTemplate.AssetType
							default to AssetTemplate.AssetType
							required
						AssetCategory
							initial value is AssetTemplate.AssetCategory
							default to AssetTemplate.AssetCategory
						AssetAccountGroup
							initial value is AssetTemplate.AssetAccountGroup
							default to AssetTemplate.AssetAccountGroup
							required
						AssetAccountingUnit
							initial value is AssetTemplate.AccountingUnit
							default to AssetTemplate.AccountingUnit
							if (AssetAccountingUnitGroup not entered)
								required
									"DefaultTransactionDimensionsAreRequiredWhenAssetDimensionGroupIsNotProvided"
						AssetAccountingUnitGroup
							initial value is AssetTemplate.AssetAccountingUnitGroup
							default to AssetTemplate.AssetAccountingUnitGroup
							if (AssetAccountingUnit not entered)
								required
									"AssetDimensionGroupIsRequiredWhenDefaultTransactionDimensionsAreNotProvided"
						AssetProject
							default to AssetTemplate.Project
						DepreciationExpenseProject
							initial value is AssetTemplate.DepreciationExpenseProject
							default to AssetTemplate.DepreciationExpenseProject

						AssetGuidelineClass
							initial value is AssetTemplate.AssetGuidelineClass
							default to AssetTemplate.AssetGuidelineClass
							constraint (AssetGuidelineClass.Active)
								"GuidelineClass<AssetGuidelineClass>IsNotActive"

						AssetLocation
							initial value is AssetTemplate.AssetLocation
							default to AssetTemplate.AssetLocation
						AssetDivision
							initial value is AssetTemplate.AssetDivision
							default to AssetTemplate.AssetDivision
						Simulated
							initial value is AssetTemplate.Simulated
							default to AssetTemplate.Simulated
						WorkInProcess
							initial value is AssetTemplate.WorkInProcess
							default to AssetTemplate.WorkInProcess
						TaxExempt
							initial value is AssetTemplate.TaxExempt
							default to AssetTemplate.TaxExempt
						Used
							initial value is AssetTemplate.Used
							default to AssetTemplate.Used
						Currency
							default to Company.Currency


						ComputeOption
							initial value is AssetTemplate.Company.ComputeOption

							if (AssetTemplateItemArray not entered)
								initialize ComputeOption

						FundOverride
							if (AssetLease.Lease.CreateAssetFundRecords)
								FundOverride	= true

					Local Fields
						NewAsset			is an Asset
							context of FinanceEnterpriseGroup
						CreatingFromTemplate is Boolean
						I1					is Numeric 1

					Action Rules
						CreatingFromTemplate	= true
						LocalBODProcessing      = BODProcessing	
						invoke Unreleased.Create this instance
							invoked.FinanceEnterpriseGroup					= AssetTemplate.FinanceEnterpriseGroup
							invoked.Company									= Company
							invoked.AssetLease								= AssetLease
							invoked.Description								= Description
							invoked.AssetType								= AssetType
							invoked.AssetCategory							= AssetCategory
							invoked.AssetGroup								= AssetGroup
							invoked.TagNumber								= TagNumber
							invoked.AssetAccountGroup						= AssetAccountGroup
							invoked.AssetAccountingUnitGroup				= AssetAccountingUnitGroup
							invoked.AssetAccountingUnit						= AssetAccountingUnit
							invoked.DepreciationExpenseProject				= DepreciationExpenseProject
							invoked.AssetOwner								= AssetOwner
							invoked.AssetLocation							= AssetLocation
							invoked.AssetDivision							= AssetDivision
							invoked.Currency								= Currency
							invoked.Simulated								= Simulated
							invoked.WorkInProcess							= WorkInProcess
							invoked.TaxExempt								= TaxExempt
							invoked.Used									= Used
							invoked.IncludeInPhysicalInventory				= IncludeInPhysicalInventory
							invoked.AssetProject							= AssetProject
							invoked.AssetGuidelineClass						= AssetGuidelineClass
						NewAsset = this instance.Asset

						if (!BypassAssetItem)
							I1 = 1
							while (I1 < 9)
								if (AssetTemplateItemArray.AssetTemplateItem[I1].PurchaseDate entered)
									if (AssetTemplateItemArray.AssetTemplateItem[I1].PurchaseDate > LocalHighPurchaseDate)
										LocalHighPurchaseDate = AssetTemplateItemArray.AssetTemplateItem[I1].PurchaseDate
									invoke Create AssetItem
										fill in fields from AssetTemplate
										invoked.Asset 				= NewAsset
										invoked.ItemNumber			= AssetTemplateItemArray.AssetTemplateItem[I1].ItemNumber
										if (AssetTemplateItemArray.AssetTemplateItem[I1].ItemDescription not entered)
											invoked.Description		= Description
										else
											invoked.Description		= AssetTemplateItemArray.AssetTemplateItem[I1].ItemDescription
										invoked.PurchaseDate		= AssetTemplateItemArray.AssetTemplateItem[I1].PurchaseDate
										invoked.ItemQuantity		= AssetTemplateItemArray.AssetTemplateItem[I1].ItemQuantity
										invoked.BaseItemCost		= AssetTemplateItemArray.AssetTemplateItem[I1].BaseItemCost
										invoked.BaseItemTax			= AssetTemplateItemArray.AssetTemplateItem[I1].BaseItemTax
										invoked.TransactionItemCost	= AssetTemplateItemArray.AssetTemplateItem[I1].TransactionItemCost
										invoked.TransactionItemTax	= AssetTemplateItemArray.AssetTemplateItem[I1].TransactionItemTax
										invoked.ModelNumber			= AssetTemplateItemArray.AssetTemplateItem[I1].ModelNumber
										invoked.SerialNumber		= AssetTemplateItemArray.AssetTemplateItem[I1].SerialNumber
										invoked.BarCode				= AssetTemplateItemArray.AssetTemplateItem[I1].BarCode
										invoked.LocationDetail		= AssetTemplateItemArray.AssetTemplateItem[I1].LocationDetail
										invoked.InvoiceAndPurchaseOrderInformation	= AssetTemplateItemArray.AssetTemplateItem[I1].InvoiceAndPurchaseOrderInformation
										invoked.AssetItemReferenceFields			= AssetTemplateItemArray.AssetTemplateItem[I1].AssetItemReferenceFields
								I1 += 1

							for each AssetTemplate.AssetTemplateBook set
								LocalAsset  		= NewAsset
								LocalBook 			= each.Book
								LocalMethod			= each.Method
								LocalLife			= each.Life


								constraint (AssetTemplateItemArray entered)
									"BooksAreDefinedOnAssetTemplate;AtleastOneItemIsRequired"
								if (ComputeOption = true)
									LocalComputeOption	= "Y"
								else
									LocalComputeOption	= "N"
								LocalConvention 					= each.Convention
								LocalPersonalUseCode				= each.PersonalUseCode
								LocalBusinessPercent				= each.BusinessPercent
								LocalAssetTaxCreditTable			= each.AssetTaxCreditTable
								LocalActive							= each.Active
								LocalLifeInYears					= each.LifeInYears
								LocalInsuranceCalculationMethod		= each.InsuranceCalculationMethod
								LocalReplacementCalculationMethod 	= each.ReplacementCalculationMethod
								LocalCreatingFromTemplate 			= true
								LocalBasis							= EnteredTransactionCost
								LocalSalvageValue					= (EnteredTransactionCost * (each.SalvagePercentage/100))

								if (!LocalAssetBookRel exists)
									invoke Create AssetBook
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.Asset					= LocalAsset
										invoked.Book					= LocalBook
										invoked.InServiceDate			= LocalHighPurchaseDate
										invoked.Convention				= LocalConvention
										invoked.PersonalUseCode			= LocalPersonalUseCode
										invoked.BusinessPercent			= LocalBusinessPercent
										invoked.AssetTaxCreditTable		= LocalAssetTaxCreditTable
										invoked.Active					= LocalActive
										invoked.LifeInYears				= LocalLifeInYears
										invoked.InsuranceCalculationMethod		= LocalInsuranceCalculationMethod
										invoked.ReplacementCalculationMethod 	= LocalReplacementCalculationMethod
										invoked.CreatingFromTemplate 	= LocalCreatingFromTemplate
										invoked.Method					= LocalMethod
										invoked.Life					= LocalLife
										invoked.Basis					= LocalBasis
										invoked.SalvageValue		    = (LocalBasis * (each.SalvagePercentage/100))
										if (LocalLife entered
										and LocalMethod entered)
											invoked.ComputeOption		= LocalComputeOption
										if (each.BookRegulation entered)
											invoked.BookRegulation		= each.BookRegulation
										invoked.ClassificationOfProperty	= each.ClassificationOfProperty
										invoked.FirstYearExpenseAmount		= LocalBasis * (each.FirstYearExpensePercent/100)
										invoked.Used 						= Used
										invoked.IndianReservation			= each.IndianReservation
										invoked.PropertyType				= each.PropertyType
										invoked.QualifiedImprovement		= each.QualifiedImprovement
										invoked.ForeignProperty				= each.ForeignProperty
										invoked.CostRecoverySystem			= each.CostRecoverySystem
										invoked.NonConforming				= each.NonConforming
										invoked.Farming						= each.Farming
										invoked.MineralReserves				= each.MineralReserves
										invoked.LowIncomeHousing			= each.LowIncomeHousing
										invoked.Section179					= each.Section179
										invoked.Listed						= each.Listed
										invoked.DepreciableIntangible		= each.DepreciableIntangible
										invoked.TransitionalRuleFlag		= each.TransitionalRuleFlag
										invoked.TransientOtherPrograms		= true
										invoked.BonusAmount					= each.BonusAmount
										invoked.Section179Expense			= each.Section179Expense
										invoked.TransientUpdateFromAsset 	= true
								else
									invoke Update LocalAssetBookRel
										invoked.Method					= LocalMethod
										invoked.Life					= LocalLife
										invoked.Convention				= each.Convention
										invoked.PersonalUseCode			= each.PersonalUseCode
										invoked.BusinessPercent			= each.BusinessPercent
										invoked.AssetTaxCreditTable		= each.AssetTaxCreditTable
										invoked.Active					= each.Active
										invoked.LifeInYears				= each.LifeInYears
										invoked.InsuranceCalculationMethod		= each.InsuranceCalculationMethod
										invoked.ReplacementCalculationMethod 	= each.ReplacementCalculationMethod
										invoked.Basis                   = LocalAssetBookRel.Basis
										invoked.SalvageValue		    = (LocalAssetBookRel.Basis * (each.SalvagePercentage/100))
										if (LocalLife entered
										and LocalMethod entered)
											invoked.ComputeOption		= LocalComputeOption
										if (each.BookRegulation entered)
											invoked.BookRegulation		= each.BookRegulation
										invoked.ClassificationOfProperty	= each.ClassificationOfProperty
										invoked.FirstYearExpenseAmount		= LocalBasis * (each.FirstYearExpensePercent/100)
										invoked.Used 						= Used
										invoked.IndianReservation			= each.IndianReservation
										invoked.PropertyType				= each.PropertyType
										invoked.QualifiedImprovement		= each.QualifiedImprovement
										invoked.ForeignProperty				= each.ForeignProperty
										invoked.CostRecoverySystem			= each.CostRecoverySystem
										invoked.NonConforming				= each.NonConforming
										invoked.Farming						= each.Farming
										invoked.MineralReserves				= each.MineralReserves
										invoked.LowIncomeHousing			= each.LowIncomeHousing
										invoked.Section179					= each.Section179
										invoked.Listed						= each.Listed
										invoked.DepreciableIntangible		= each.DepreciableIntangible
										invoked.TransitionalRuleFlag		= each.TransitionalRuleFlag
										invoked.BonusAmount					= each.BonusAmount
										invoked.Section179Expense			= each.Section179Expense
										invoked.TransientOtherPrograms		= true
										invoked.TransientUpdateFromAsset 	= true
					Exit Rules
						include CheckCloseReleaseFlag
						if (AssetLease.Lease.CreateAssetFundRecords)
							FundOverride	= true
							for each LeaseFundsRel
								invoke CreateFromAssetGenerate AssetFund
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset 					= NewAsset
									invoked.AccountingEntity		= each.AccountingEntity
									invoked.AccountingUnit			= each.AccountingUnit
									invoked.Project					= each.Project
									invoked.FinanceDimension1		= each.FinanceDimension1
									invoked.FinanceDimension2		= each.FinanceDimension2
									invoked.FinanceDimension3		= each.FinanceDimension3
									invoked.FinanceDimension4		= each.FinanceDimension4
									invoked.FinanceDimension5		= each.FinanceDimension5
									invoked.FinanceDimension6		= each.FinanceDimension6
									invoked.FinanceDimension7		= each.FinanceDimension7
									invoked.FinanceDimension8		= each.FinanceDimension8
									invoked.FinanceDimension9		= each.FinanceDimension9
									invoked.FinanceDimension10		= each.FinanceDimension10
									invoked.PercentContribution		= each.PercentContribution
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										invoked.Fund = each.AccountingUnit
									else
										invoked.Fund = each.FinanceDimension1

				UnreleasedTransactionDateUpdate is an Instance Action
					default label is "UpdatePostingDate"
					valid when (UnreleasedPostingDateUpdateValid)
					Parameters
						NewPostingDate is Date
					Parameter Rules
						NewPostingDate
							constraint (NewPostingDate within ValidEntryDate)
								"PostingDateIsNotWithinSystemControlValidEntryDateRange"
							required
					Action Rules
						for each UnreleasedAssetTransactionRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = NewPostingDate
						for each UnreleasedAssetBookTransactionRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = NewPostingDate
						LocalAsset  = IncompleteTransferRel.Asset
						if(AssetProcess.Transfer)
							if(UnreleasedAssetTransferRel.FullOrPartial.Full)
								invoke NewPostingDateUpdate UnreleasedAssetTransfersRel
									invoked.PostingDate = NewPostingDate
							else
								for each UnreleasedToAssetTransactionRel
									invoke UpdateTransactionDate each
										invoked.PostingDate = NewPostingDate
								for each UnreleasedToAssetBookTransactionRel
									invoke UpdateTransactionDate each
										invoked.PostingDate = NewPostingDate
								invoke NewPostingDateUpdate first ToAssetTransferRel
									invoked.PostingDate = NewPostingDate

				NoEditUpdate is an Update Action
					restricted
					bypass field rules


				Update is an Update Action
					valid when (UpdateValid)

					Entrance Rules
						constraint (AssetType entered)
							"AssetTypeIsRequired"
						if (AssetGuidelineClass entered)
							constraint (GuidelineClassRel exists)
								"AssetGuidelineClassDoesNotExist"
							constraint (ActiveGuidelineClassRel exists)
								"CannotAddAnInactiveAssetGuidelineClass"
					Action Rules
						initialize ApprovalStatus
						BypassActiveCodeBlockEdit = true
						if (AssetCategory changed)
							TransientCategoryUpdate = true
							if (AssetCategory.NonDepreciable)
								for each AssetBook set
									invoke AssetCategoryChangeInitializeFields each

						if(WorkInProcess changed)
							if(WorkInProcess)
								for each AssetBook set
									invoke BalanceUpdate each
										initialize invoked.YearToDateDepreciation
										initialize invoked.YearToDateDepreciationAllowed
										initialize invoked.LifeToDateDepreciation
										initialize invoked.LifeToDateDepreciationAllowed
										initialize invoked.LifeRemaining

						if (Simulated changed
						and !Simulated)
							for each AssetBook set
								invoke SimulatedChangeInitializeFields each

						if (Simulated)
							include DeleteAllAssetTransactions
							include DeleteAllAssetBookTransactions
















						if (AssetGuidelineClass changed)
							for each AssetBook set


								invoke Update each
									invoked.TransientUpdateFromAsset = true
						
						if (Currency changed)
							confirmation required
						    	"CurrencyHasChangedAfterCompute,PerformComputeOnAssetBookToUpdateDepreciation."
							for each AssetBook set
								LocalTransactionItemCost = (sum AssetItemsRel.TransactionItemCost)
								invoke UpdateBasisFromAsset each
									invoked.PrmBasis = LocalTransactionItemCost

						if (AssetGroup entered
						or  AssetGroup changed)
							invoke UpdateAssetGroup UnreleasedAssetTransactionRel
								invoked.PrmAssetGroup = AssetGroup

						if (AccountFieldsUpdated
						or (WorkInProcess changed
						and !WorkInProcess))
							if (!FromImport)
								LocalSkipDeleteManualEntry  = true
								include DeleteAllAssetTransactions
								include DeleteAllAssetBookTransactions
								initialize LocalSkipDeleteManualEntry
								for each AssetBook set
									if (each.Basis entered
									and each.Method entered)
										invoke CreateAssetTransactions each
											if (PostingDate entered
											or PostingDate changed)
												invoked.NewPostingDate = PostingDate
							else
								confirmation required
    								"Warning;TransactionsForImportedAssetWillNotBeUpdated"
						else
							if (PostingDate entered
							or PostingDate changed)
								invoke UnreleasedTransactionDateUpdate
									invoked.NewPostingDate	= PostingDate


					Exit Rules
						if (WorkInProcess changed)
							if (WorkInProcess)
								include DeleteAllAssetTransactions
								include DeleteAllAssetBookTransactions
								if (PostReleaseAssetsRel not exists
								and UnreleasedNonWIPAssetsRel not exists)   
									invoke SetPeriodCloseRelease AssetCompanyRel
										invoked.PrmPeriodCloseRelease	= "Y"
								else
									invoke SetPeriodCloseRelease AssetCompanyRel
										invoked.PrmPeriodCloseRelease	= "N"
							else
								invoke SetPeriodCloseRelease AssetCompanyRel
									invoked.PrmPeriodCloseRelease	= "N"
						if (IsAssetSearchFieldsUpdated)
							include BuildTextIndexes

				Delete is a Delete Action
					valid when (UpdateValid)

					Entrance Rules
						for each AssetBarCode set
							invoke Delete each
						include DeleteRules


					Exit Rules
						include CheckCloseReleaseFlag

				DeleteSavedAsset is a Delete Action
					restricted
					valid when (!FromTransfer)

					Entrance Rules
						for each AssetBarCode set
							invoke Delete each
						include DeleteRules


					Exit Rules
						include CheckCloseReleaseFlag





				Release is an Instance Action
					valid when (ReleaseValid)
					Local Fields
						LocalUpdateOrigin					is Numeric 1
							States
								Online				value is blank
								Batch				value is 1
						LocalOptions						is Numeric 1
				            States
				                ReleaseTransactions value is blank
				               	ReportOnly	 		value is 1
						LocalAsset						is an Asset
						PrmJournalizeGroup      		is like JournalizeGroup
						PrmEnterpriseGroup				is a FinanceEnterpriseGroup
						PrmAssetCompany					is a Company

					Entrance Rules
						PrmJournalizeGroup = TransientJournalizeGroup
						include CloseControlDateEdit
						constraint (!WorkInProcess)
							"CannotReleaseAWorkInProcessAsset"
						if (!ManualProcess)
							constraint (!ApprovalStatus.Submitted)
								"CannotReleaseAsset<Asset>;AssetIsSubmittedForApproval"
						if (AssetProcess.Addition)
							if (AssetControlTransactionRel exists)
								constraint ((AssetControlTransactionRel.CreditBalance * -1) = AssetControlTransactionRel.DebitBalance)
									"AssetDebitsAndCreditsMustBalance"
							else
								for each AssetBooksRel
									LocalBook = each.Book
									LocalCompany = Company
									if (FromBookCalendarRel.DepreciationCalculated)
										invoke NoEditUpdate FromBookCalendarRel
											invoked.DepreciationCalculated = false
									constraint ((each.CreditBalance * -1) = each.DebitBalance)
										"AssetDebitsAndCreditsMustBalance"
							constraint (HasUnreleasedBookTrnasactionTotalEqualsZero)
								"BookTransactionDebitsAndCreditsMustBalance"




						initialize LocalUpdateOrigin
						initialize LocalOptions
						initialize LocalAsset
					Action Rules
						if (LocalUpdateOrigin = blank)
							LocalAsset = Asset
						include CalculateAssetItemTotals
						include ReleaseAssetEdits
						LocalCancelResume	= true
						if (AssetCategory.NonDepreciable)
							for each AssetBook set
								if (each.InServiceDate not entered)
									invoke Update each
						include ReleaseAssetUpdates
						invoke SetNewCompanyAsset

						make transition to Released


					Exit Rules
						if (FinanceEnterpriseGroup.FundAccounting)
							include UpdateAssetFundRecords
						if (UnreleasedAssetTransactionRel exists)
							if(PrmJournalizeGroup not entered)
				            	increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
								PrmJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							if (AssetProcess.Transfer
							and (UnreleasedAssetTransferRel.TransferType.InterCompany
							or UnreleasedAssetTransferRel.FullOrPartial.Partial))
								if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
									TransientPartialTransfer	= true
								else
									TransientPartialTransfer	= false
								if (FundAllocationRequired)
									for each UnreleasedTransferTransactionsRel
										if (each.FundAccountType)
											invoke CreateFundTransactions each
												invoked.PrmTransactionDate	  = each.TransactionDate
												if (TransientPartialTransfer
												and UnreleasedAssetTransferRel not exists)
													invoked.TransferFromAsset = TransferFromAsset
												else
													invoked.TransferFromAsset = Asset
								for each UnreleasedTransferTransactionsRel

									invoke Release each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= LocalJournalizeGroup
										invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult











								if(LocalCompanyGroup not entered)
									invoke JournalizeInterCompanyDistributions ReleasedTransferTransactionsRel
										invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup				= LocalJournalizeGroup
							else
								if (FundAllocationRequired)
									for each HistoryTransactionsToBePostedRel
										if (each.FundAccountType)
											invoke CreateFundHistoryTransactions each
									for each UnreleasedAssetTransactionRel
										if (each.FundAccountType)
											invoke CreateFundTransactions each
												invoked.PrmTransactionDate	  = each.TransactionDate
								for each UnreleasedAssetTransactionRel
									invoke Release each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup
										invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult











								for each HistoryTransactionsToBePostedRel
									invoke PostHistory each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup











								if(!LocalReleaseSetAction)
									invoke JournalizeDistributionsForGroup AssetCompanyRel
										invoked.PrmFinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
										invoked.PrmAssetCompany					= Company
										invoked.PrmJournalizeGroup				= PrmJournalizeGroup
										invoked.PrmAsset						= Asset



						for each AssetBook set
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
						if (AssetControlTransactionRel exists)
							invoke Delete AssetControlTransactionRel
						invoke TriggerAsset
						invoke TriggerAssetTransaction
						include CheckCloseReleaseFlag
						initialize LocalCancelResume
						initialize ApprovalStatus


				ReleaseTransferToAsset is an Instance Action
					restricted
					Parameters
						PrmJournalizeGroup      		is like JournalizeGroup
						PrmAssetMassReleaseResult 		is an AssetBatchUpdateResult
					Local Fields
						LocalUpdateOrigin					is Numeric 1
							States
								Online				value is blank
								Batch				value is 1
						LocalOptions						is Numeric 1
				            States
				                ReleaseTransactions value is blank
				               	ReportOnly	 		value is 1
						LocalAsset						is an Asset

						PrmEnterpriseGroup				is a FinanceEnterpriseGroup
						PrmAssetCompany					is a Company

					Entrance Rules
						include CloseControlDateEdit
						if (AssetCategory.NonDepreciable)
							for each AssetBook set
								if (each.InServiceDate not entered)
									invoke Update each
						initialize LocalUpdateOrigin
						initialize LocalOptions
						initialize LocalAsset

					Action Rules
						LocalAssetMassReleaseResult	= PrmAssetMassReleaseResult
						if (LocalUpdateOrigin = blank)
							LocalAsset = Asset
						include CalculateAssetItemTotals
						include ReleaseAssetUpdates
						invoke SetNewCompanyAsset
						if (FundAccounting)
							for each UnreleasedBookTransactionsRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate  = each.TransactionDate
										invoked.TransferFromAsset 	= TransferFromAsset
										invoked.PrmAssetType		= AssetType
										invoked.PrmToCompany		= Company


						for each UnreleasedBookTransactionsRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult

						if (FundAccounting)
				   			if (FundOverride)
								invoke Delete AssetFundsRel
								invoke Delete AssetFundOldRel
								LocalTransferFromAsset    		= TransferFromAsset
								for each FromAssetTransferFundsRel
									invoke Create AssetFund
										invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
										invoked.Asset					= Asset
										invoked.AccountingEntity 		= each.AccountingEntity
										invoked.AccountingUnit 			= each.AccountingUnit
										invoked.Project					= each.Project
										invoked.Fund 					= each.Fund
										invoked.FinanceDimension1		= each.FinanceDimension1
										invoked.FinanceDimension2		= each.FinanceDimension2
										invoked.FinanceDimension3		= each.FinanceDimension3
										invoked.FinanceDimension4		= each.FinanceDimension4
										invoked.FinanceDimension5		= each.FinanceDimension5
										invoked.FinanceDimension6		= each.FinanceDimension6
										invoked.FinanceDimension7		= each.FinanceDimension7
										invoked.FinanceDimension8		= each.FinanceDimension8
										invoked.FinanceDimension9		= each.FinanceDimension9
										invoked.FinanceDimension10		= each.FinanceDimension10
										invoked.TransactionAmount		= each.TransactionAmount
										invoked.PercentContribution		= each.PercentContribution
							else
								include PartialFundUpdate
								include GenerateFundAllocation
								include UpdateAssetFundRecords
								invoke RefreshAssetItemFunds AssetItemFundsRel
						make transition to Released

					Exit Rules
						invoke Release UnreleasedAssetImpairmentRel
						for each AssetBook set
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
								if (PrmJournalizeGroup entered)
									invoked.PrmJournalizeGroup	= PrmJournalizeGroup
						invoke TriggerAsset
						invoke TriggerAssetTransaction
						include CheckCloseReleaseFlag

				CreatePartialAsset is an Instance Action
					restricted
					Parameters
						PrmPartialAsset			is an Asset


					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke Unreleased.Create Asset
							fill in fields from PrmPartialAsset
								except invoked.Asset
								except invoked.AssetObjectID

						invoke SetPeriodCloseRelease AssetCompanyRel
							invoked.PrmPeriodCloseRelease	= "N"

					Exit Rules
						include BuildTextIndexes

				DeleteUnreleasedAssetsSetAction is a Set Action
					restricted
					default label is "DeleteAllUnreleasedAssets"
					Parameters
						PrmAssetCompany						is an AssetCompany
							default label is "Company"

		        	Instance Selection
		        		where  (PrmAssetCompany = Company
		        		and Status.Unreleased)

		        	Action Rules
		        		Instance Rules
							invoke Delete

				CheckAssetControlBalance is an Instance Action
					restricted


				CheckAssetBookBalance is an Instance Action
					Action Rules
						if(Status.Unreleased)
							if (AssetControlTransactionRel exists)
								invoke DeleteFromBatch AssetControlTransactionRel
							for each AssetBooksRel
								LocalCreditBalance = 0
								LocalDeditBalance = 0


								LocalAssetBook = each.Book
								if (each.IsPostingBook)
									for each AssetTransactionsBookRel
										if (each.TransactionAmount > 0)
											LocalDeditBalance	+= each.TransactionAmount
										else
											LocalCreditBalance	+= each.TransactionAmount
								else
									for each AssetBookTransactionsBookRel
										if (each.TransactionAmount > 0)
											LocalDeditBalance	+= each.TransactionAmount
										else
											LocalCreditBalance	+= each.TransactionAmount
								invoke BalanceUpdate each
									invoked.CreditBalance	= 	LocalCreditBalance
									invoked.DebitBalance	=	LocalDeditBalance


				RefreshFundAllocations is an Instance Action
					restricted
					Action Rules
						include GenerateFundAllocation

			Released is a State
				Entrance Rules
					initialize AssetProcess
					initialize ProcessDate
					initialize ApprovalStatus


				NoEditUpdate is an Update Action
					restricted
					bypass field rules

				UpdateReleasedSequenceNumbers is an Update Action
					restricted
					bypass field rules


				Adjust is an Update Action
					valid when (AdjustmentAllowed)

					Entrance Rules
						initialize ApprovalStatus
						AssetAppend = false
						if (AssetGuidelineClass entered
						and AssetGuidelineClass changed)
							if (AssetGuidelineClass entered)
								constraint (GuidelineClassRel exists)
									"AssetGuidelineClassDoesNotExist"
								constraint (ActiveGuidelineClassRel exists)
									"CannotAddAnInactiveAssetGuidelineClass"
						if (AssetGuidelineClass changed)
							confirmation required
								"Warning:UpdateToAssetGuidelineClassOnAReleasedAssetWon'tUpdateGuidelineClassRegulationDefaultings"
						if (!AdjustmentDate entered)
							if (CloseControlIsActive)
								AdjustmentDateIsValid = false
								constraint (current corporate date within ValidEntryDate)
									"AdjustmentDateIsRequired"
							confirmation required
								"AdjustmentDateIsRequired;UseCurrentDateAsAdjustmentDate?"
							AdjustmentDate = current corporate date
							AdjustmentDateIsValid = true

						if (PostingDate not entered)
							PostingDate = AdjustmentDate


						if (LastAssetItemPurchaseDate not entered)
							LastAssetItemPurchaseDate = HighPurchaseDate
						constraint (AssetType entered)
							"AssetTypeIsRequired"
						AssetProcess	= "ADJ"
						ProcessDate		= AdjustmentDate
					Action Rules
						BypassActiveCodeBlockEdit = true
						constraint (!WorkInProcess)
							"AssetIsReleased;CannotChangeWorkInProcessFromNoToYes"
						if (AdjustmentDateIsValid = false)
							constraint (PostingDate within ValidEntryDate)
								"PostingDateIsNotWithinSystemControlValidEntryDateRange"
						include CalculateAssetItemTotals
						constraint (!Currency changed)
							"AssetIsReleased;CannotChangeCurrency"
						make transition to PostRelease
						if (UnreleasedAssetAdjustmentRel not exists)
							invoke Create AssetAdjustment
								invoked.Asset								= Asset
								invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
								invoked.AdjustmentDate						= AdjustmentDate
								if (PostingDate entered)
									invoked.PostingDate						= PostingDate
								invoked.AdjustmentStatus					= "N"
								invoked.Description							= old Description
								invoked.TagNumber							= old TagNumber
								invoked.AssetGroup							= old AssetGroup
								invoked.AssetCategory						= old AssetCategory
								invoked.Simulated							= old Simulated
								invoked.WorkInProcess						= old WorkInProcess
								invoked.TaxExempt							= old TaxExempt
								invoked.Used								= old Used
								invoked.ItemTotalBaseCost					= old EnteredBaseCost
								invoked.ItemTotalBaseTax					= old EnteredBaseTax
								invoked.ItemTotalTransactionTax				= old EnteredTransactionTax
								invoked.BaseNumberOfDecimals				= old BaseNumberOfDecimals
								invoked.TransactionNumberOfDecimals			= old TransactionNumberOfDecimals
								invoked.Currency							= old Currency
								invoked.LastAssetItemPurchaseDate			= old LastAssetItemPurchaseDate
								invoked.Company								= old Company
								invoked.AssetLocation						= old AssetLocation
								invoked.AssetDivision						= old AssetDivision
								invoked.AssetType							= old AssetType
								invoked.AssetAccountGroup					= old AssetAccountGroup
								invoked.AssetAccountingUnit					= old AssetAccountingUnit
								invoked.AssetAccountingUnitGroup			= old AssetAccountingUnitGroup
								invoked.AssetSummaryGroup					= old AssetSummaryGroup
								invoked.DepreciationExpenseProject			= old DepreciationExpenseProject
								invoked.OriginatingCompany					= old OriginatingCompany
								invoked.AssetLease							= old AssetLease
								invoked.FundOverride						= old FundOverride
								invoked.Classification						= old Classification
								invoked.IncludeInPhysicalInventory			= old IncludeInPhysicalInventory
								invoked.AssetOwner							= old AssetOwner
								invoked.AssetProject						= old AssetProject
								invoked.AssetGuidelineClass					= old AssetGuidelineClass
								invoked.Reference1							= old Reference1										
								invoked.Reference2							= old Reference2
								invoked.GeographicalLatitude				= old GeographicalLatitude
							 	invoked.GeographicalLongitude				= old GeographicalLongitude
							 	invoked.GeographicalAltitude				= old GeographicalAltitude
								invoked.AssetAdjustmentTo.Company					= Company
								invoked.AssetAdjustmentTo.Description				= Description
								invoked.AssetAdjustmentTo.TagNumber					= TagNumber
								invoked.AssetAdjustmentTo.AssetGroup				= AssetGroup
								invoked.AssetAdjustmentTo.AssetCategory				= AssetCategory
								invoked.AssetAdjustmentTo.AssetType					= AssetType
								invoked.AssetAdjustmentTo.AssetAccountGroup			= AssetAccountGroup
								invoked.AssetAdjustmentTo.AssetAccountingUnit		= AssetAccountingUnit
								invoked.AssetAdjustmentTo.AssetProject				= AssetProject
								invoked.AssetAdjustmentTo.AssetAccountingUnitGroup	= AssetAccountingUnitGroup
								invoked.AssetAdjustmentTo.AssetSummaryGroup			= AssetSummaryGroup
								invoked.AssetAdjustmentTo.Division					= AssetDivision
								invoked.AssetAdjustmentTo.Location					= AssetLocation
								invoked.AssetAdjustmentTo.Simulated					= Simulated
								invoked.AssetAdjustmentTo.WorkInProcess				= WorkInProcess
								invoked.AssetAdjustmentTo.TaxExempt					= TaxExempt
								invoked.AssetAdjustmentTo.Used						= Used
								invoked.AssetAdjustmentTo.TotalItemQuantity			= TotalItemQuantity
								invoked.AssetAdjustmentTo.ItemTotalBaseCost			= ItemTotalBaseCost
								invoked.AssetAdjustmentTo.ItemTotalBaseTax			= ItemTotalBaseTax
								invoked.AssetAdjustmentTo.ItemTotalTransactionCost	= ItemTotalTransactionCost
								invoked.AssetAdjustmentTo.ItemTotalTransactionTax	= ItemTotalTransactionTax
								invoked.AssetAdjustmentTo.Currency					= Currency
								invoked.AssetAdjustmentTo.LastAssetItemPurchaseDate	= LastAssetItemPurchaseDate
								invoked.AssetAdjustmentTo.FundOverride				= FundOverride
								invoked.ToClassification							= Classification
								invoked.ToTransactionNumberOfDecimals				= TransactionNumberOfDecimals
								invoked.ToDepreciationExpenseProject				= DepreciationExpenseProject
								invoked.ToIncludeInPhysicalInventory				= IncludeInPhysicalInventory
								invoked.ToAssetOwner								= AssetOwner
								invoked.ToAssetGuidelineClass						= AssetGuidelineClass
								invoked.ToReference1								= Reference1										
								invoked.ToReference2								= Reference2
								invoked.ToGeographicalLatitude						= GeographicalLatitude
							 	invoked.ToGeographicalLongitude						= GeographicalLongitude
							 	invoked.ToGeographicalAltitude						= GeographicalAltitude


						if (Simulated changed
						and !Simulated)
							for each AssetBook set
								invoke SimulatedChangeInitializeFields each
						if (IsAssetSearchFieldsUpdated)
							include BuildTextIndexes

					Exit Rules
						if (Currency changed)
							TransactionNumberOfDecimals = Currency.NumberOfDecimals
							for each AssetItemsRel
								invoke Update
									invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals

						include CheckCloseReleaseFlag
						invoke TriggerAssetTransaction

				Transfer is an Instance Action
					restricted
					Action Rules
						AssetProcess	= "TRF"
						ProcessDate		= first UnreleasedAssetTransfersRel.TransferDate

						make transition to PostRelease

					Exit Rules
						include CheckCloseReleaseFlag

				Revalue is an Instance Action
					restricted
					Action Rules
						AssetProcess	= "RVL"
						ProcessDate		= first UnreleasedAssetBookRevaluationRel.RevalueDate

						make transition to PostRelease

					Exit Rules
						include CheckCloseReleaseFlag

				Dispose is an Instance Action
					restricted

					Action Rules
						AssetProcess	= "DSP"
						ProcessDate		= AssetDisposalRel.DisposalDate

						make transition to PostRelease

					Exit Rules
						include CheckCloseReleaseFlag

				TransitiontoDisposed is an Instance Action
					restricted
					Action Rules
						make transition to Disposed
					Exit Rules
						include CheckCloseReleaseFlag

				ImpairAsset is an Update Action
					restricted
					Action Rules
						BypassActiveCodeBlockEdit = true
						if (AssetAccountGroup entered)
							constraint (AssetAccountGroup.HasImpairmentAccounts
							or AssetType.ImpairmentAccountsExist)
								"ImpairmentAccountsMustBeProvidedOnEitherAssetTypeOrAccountGroup"

						if (AssetAccountingUnit not entered)
							constraint (AssetAccountingUnitGroup.HasImpairmentAccounts)
								"ImpairmentDefaultsRequiredOnAssetDimensionGroup"

						AssetProcess	= "IMP"
						make transition to PostRelease
						if (Company.PeriodCloseRelease	!= "N")
							invoke SetPeriodCloseRelease AssetCompanyRel
								invoked.PrmPeriodCloseRelease	= "N"


				CreateTransferFunds is an Instance Action
					restricted
					Action Rules
						if (!CreateFromBatch
						and TransientFullTransfer)
							for each UnreleasedBookTransactionsRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	= each.TransactionDate
										invoked.TransferFromAsset 	= Asset
						if (!CreateFromBatch
						and not FundOverride)
								include GenerateTransferFunds

				Delete is a Delete Action
					valid when (Simulated)
					Entrance Rules
						constraint (Simulated)
							"AssetHasBeenReleased;OnlySimulatedAssetCanBeDeletedAfterRelease"

						include DeleteRules
					Exit Rules
						include CheckCloseReleaseFlag
				Update is an Update Action
					restricted
					Exit Rules
						include BuildTextIndexes

			PostRelease is a State

				Entrance Rules
					initialize ApprovalStatus

				CreatePartial is a Create Action
					restricted
					Action Rules
						BypassActiveCodeBlockEdit = true
					Exit Rules
						include BuildTextIndexes

				CreateNewAsset is an Instance Action
					restricted
					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke PostRelease.CreatePartial Asset
							assign result to NewDspAsset
							fill in fields from Asset
								except invoked.AssetProcess
								except invoked.Status
								except invoked.ProcessDate
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.AssetProcess			= "DSP"
							invoked.Status					= 3 
							invoked.ProcessDate				= AssetDisposalRel.DisposalDate
							initialize invoked.AssetObjectID
							initialize invoked.LastAssetItem
							initialize invoked.LastAssetSequence
							initialize invoked.LastTransactionSequence
							initialize invoked.LastCommentSequence
							initialize invoked.CreationDate
							initialize invoked.TagNumber
							invoked.DisposedAsset			= NewDspAsset.Asset

						DisposedAsset = NewDspAsset.Asset

					Exit Rules
						include BuildTextIndexes

				Update is an Update Action
					valid when (PostReleaseUpdateValid)
					Entrance Rules
						initialize ApprovalStatus
						if (AssetGuidelineClass entered
						and AssetGuidelineClass changed)
							if (AssetGuidelineClass entered)
								constraint (GuidelineClassRel exists)
									"AssetGuidelineClassDoesNotExist"
								constraint (ActiveGuidelineClassRel exists)
									"CannotAddAnInactiveAssetGuidelineClass"
						if (AssetGuidelineClass changed)
							confirmation required
								"Warning:UpdateToAssetGuidelineClassOnAReleasedAssetWon'tUpdateGuidelineClassRegulationDefaultings"
						if (FundOverrideNotSelected)
							constraint (!UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
								"WhenUsingFundAccountingTheAssetCannotBeUpdatedWhenUnreleasedItemAdjustmentsExist"
						if (FundOverride changed)
							constraint (AssetFundOldRel not exists)
								"CannotSwitchToAssetItemFundsWhenAdjustmentIsInProgressForAssetFund"
							constraint (AssetFundItemOldRel not exists)
								"CannotSwitchToAssetFundsWhenAdjustmentIsInProgressForAssetItemFund"

						constraint (AssetType entered)
							"AssetTypeIsRequired"



						if(PostingDate entered
						and PostingDate changed)
							constraint (PostingDate within ValidEntryDate)
								"PostingDateIsNotWithinSystemControlValidEntryDateRange"

					Action Rules
						BypassActiveCodeBlockEdit = true
						constraint (!AssetProcess.Transfer)
							"CannotUpdate;AssetIsInTransferProcess"
						constraint (!AssetProcess.Disposal)
							"CannotUpdate;AssetIsInDisposalProcess"
						constraint (!UnreleasedAssetDisposalCreated)
							"CannotUpdate;AssetIsInDisposalProcess"
						if (AccountFieldsUpdated)  				
							invoke UpdateAssetSetupMain UnreleasedAssetAdjustmentRel
								invoked.AssetAdjustmentTo.Company					= Company
								invoked.AssetAdjustmentTo.Description				= Description
								invoked.AssetAdjustmentTo.TagNumber					= TagNumber
								invoked.AssetAdjustmentTo.AssetGroup				= AssetGroup
								invoked.AssetAdjustmentTo.AssetCategory				= AssetCategory
								invoked.AssetAdjustmentTo.AssetType					= AssetType
								invoked.AssetAdjustmentTo.AssetAccountGroup			= AssetAccountGroup
								invoked.AssetAdjustmentTo.AssetAccountingUnit		= AssetAccountingUnit
								invoked.AssetAdjustmentTo.AssetProject				= AssetProject
								invoked.AssetAdjustmentTo.AssetAccountingUnitGroup	= AssetAccountingUnitGroup
								invoked.AssetAdjustmentTo.Division					= AssetDivision
								invoked.AssetAdjustmentTo.Location					= AssetLocation
								invoked.AssetAdjustmentTo.Simulated					= Simulated
								invoked.AssetAdjustmentTo.WorkInProcess				= WorkInProcess
								invoked.AssetAdjustmentTo.TaxExempt					= TaxExempt
								invoked.AssetAdjustmentTo.Used						= Used
								invoked.AssetAdjustmentTo.AssetSummaryGroup			= AssetSummaryGroup
								invoked.AssetAdjustmentTo.TotalItemQuantity			= TotalItemQuantity
								invoked.AssetAdjustmentTo.ItemTotalBaseCost			= ItemTotalBaseCost
								invoked.AssetAdjustmentTo.ItemTotalBaseTax			= ItemTotalBaseTax
								invoked.AssetAdjustmentTo.ItemTotalTransactionCost	= ItemTotalTransactionCost
								invoked.AssetAdjustmentTo.ItemTotalTransactionTax	= ItemTotalTransactionTax
								invoked.AssetAdjustmentTo.Currency					= Currency
								invoked.AssetAdjustmentTo.LastAssetItemPurchaseDate	= LastAssetItemPurchaseDate
								invoked.AssetAdjustmentTo.FundOverride				= FundOverride
								invoked.ToClassification							= Classification
								invoked.ToTransactionNumberOfDecimals				= TransactionNumberOfDecimals
								invoked.ToDepreciationExpenseProject				= DepreciationExpenseProject
								invoked.ToIncludeInPhysicalInventory				= IncludeInPhysicalInventory
								invoked.ToAssetOwner								= AssetOwner
								invoked.ToAssetGuidelineClass						= AssetGuidelineClass
								invoked.ToReference1								= Reference1										
								invoked.ToReference2								= Reference2
								invoked.ToGeographicalLatitude						= GeographicalLatitude
							 	invoked.ToGeographicalLongitude						= GeographicalLongitude
							 	invoked.ToGeographicalAltitude						= GeographicalAltitude
								if (PostingDate entered
								or PostingDate changed)
									invoked.PostingDate			= PostingDate
						else
							invoke Update UnreleasedAssetAdjustmentRel 
								invoked.AssetAdjustmentTo.Company					= Company
								invoked.AssetAdjustmentTo.Description				= Description
								invoked.AssetAdjustmentTo.TagNumber					= TagNumber
								invoked.AssetAdjustmentTo.AssetGroup				= AssetGroup
								invoked.AssetAdjustmentTo.AssetCategory				= AssetCategory
								invoked.AssetAdjustmentTo.AssetType					= AssetType
								invoked.AssetAdjustmentTo.AssetAccountGroup			= AssetAccountGroup
								invoked.AssetAdjustmentTo.AssetAccountingUnit		= AssetAccountingUnit
								invoked.AssetAdjustmentTo.AssetProject				= AssetProject
								invoked.AssetAdjustmentTo.AssetAccountingUnitGroup	= AssetAccountingUnitGroup
								invoked.AssetAdjustmentTo.Division					= AssetDivision
								invoked.AssetAdjustmentTo.Location					= AssetLocation
								invoked.AssetAdjustmentTo.Simulated					= Simulated
								invoked.AssetAdjustmentTo.WorkInProcess				= WorkInProcess
								invoked.AssetAdjustmentTo.TaxExempt					= TaxExempt
								invoked.AssetAdjustmentTo.Used						= Used
								invoked.AssetAdjustmentTo.AssetSummaryGroup			= AssetSummaryGroup
								invoked.AssetAdjustmentTo.TotalItemQuantity			= TotalItemQuantity
								invoked.AssetAdjustmentTo.ItemTotalBaseCost			= ItemTotalBaseCost
								invoked.AssetAdjustmentTo.ItemTotalBaseTax			= ItemTotalBaseTax
								invoked.AssetAdjustmentTo.ItemTotalTransactionCost	= ItemTotalTransactionCost
								invoked.AssetAdjustmentTo.ItemTotalTransactionTax	= ItemTotalTransactionTax
								invoked.AssetAdjustmentTo.Currency					= Currency
								invoked.AssetAdjustmentTo.LastAssetItemPurchaseDate	= LastAssetItemPurchaseDate
								invoked.AssetAdjustmentTo.FundOverride				= FundOverride
								invoked.ToClassification							= Classification
								invoked.ToTransactionNumberOfDecimals				= TransactionNumberOfDecimals
								invoked.ToDepreciationExpenseProject				= DepreciationExpenseProject
								invoked.ToIncludeInPhysicalInventory				= IncludeInPhysicalInventory
								invoked.ToAssetOwner								= AssetOwner
								invoked.ToAssetGuidelineClass						= AssetGuidelineClass
								invoked.ToReference1								= Reference1										
								invoked.ToReference2								= Reference2
								invoked.ToGeographicalLatitude						= GeographicalLatitude
							 	invoked.ToGeographicalLongitude						= GeographicalLongitude
							 	invoked.ToGeographicalAltitude						= GeographicalAltitude
								if (PostingDate entered
								or PostingDate changed)
									invoked.PostingDate			= PostingDate

					Exit Rules
						if(IsAssetSearchFieldsUpdated)
							include BuildTextIndexes


				PostReleaseTransactionDateUpdate is an Instance Action
					default label is "UpdatePostingDate"
					valid when (PostReleasePostingDateValid)
					Parameters
						NewPostingDate is Date
					Parameter Rules
						NewPostingDate
							constraint (NewPostingDate within ValidEntryDate)
								"PostingDateIsNotWithinSystemControlValidEntryDateRange"
							required
					Action Rules
						for each UnreleasedAssetTransactionRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = NewPostingDate
						for each UnreleasedAssetBookTransactionRel
							invoke UpdateTransactionDate each
								invoked.PostingDate = NewPostingDate

						if(AssetProcess.Transfer)
							LocalAsset = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
							if(UnreleasedAssetTransferRel.FullOrPartial.Full)
								invoke NewPostingDateUpdate UnreleasedAssetTransferRel
									invoked.PostingDate = NewPostingDate
							else
								invoke NewPostingDateUpdate UnreleasedAssetTransferRel
									invoked.PostingDate = NewPostingDate
								for each UnreleasedToAssetTransactionRel
									invoke UpdateTransactionDate each
										invoked.PostingDate = NewPostingDate
								for each UnreleasedToAssetBookTransactionRel
									invoke UpdateTransactionDate each
										invoked.PostingDate = NewPostingDate

						if(AssetProcess.Disposal)
							if(AssetDisposalRel.FullOrPartial.Full)
								invoke NewPostingDateUpdate AssetDisposalRel
									invoked.PostingDate = NewPostingDate
							else
								invoke NewPostingDateUpdate UnreleasedAssetPartialDisposalRel
									invoked.PostingDate = NewPostingDate

						if(AssetProcess.Impairment)
							for each UnreleasedAssetImpairmentRel
								invoke NewPostingDateUpdate each
									invoked.PostingDate = NewPostingDate

						if(AssetProcess.Revalue)
							for each UnreleasedAssetBookRevaluationRel
								invoke Update each
									invoked.PostingDate = NewPostingDate

						if(AssetProcess.Reinstatement)
							for each UnreleasedAssetReinstatementsRel
								invoke NewPostingDateUpdate each
									invoked.PostingDate = NewPostingDate


				UpdateTransferLastSeq is an Update Action
					restricted
					bypass field rules

				NoEditUpdate is an Update Action
					restricted
					bypass field rules

				UpdatePostReleasedSequenceNumbers is an Update Action
					restricted
					bypass field rules


				TransistiontoDisposed is an Instance Action
					restricted

					Action Rules
						make transition to Disposed
					Exit Rules
						include CheckCloseReleaseFlag


				ResetAdjustment is an Instance Action
					valid when (ApprovalUnreleasedAssetAdjustmentExists)
					Entrance Rules
						if (Company.RequireUniqueTags)
							LocalTagNumber = UnreleasedAssetAdjustmentRel.TagNumber
							LocalAsset = UniqueAssetsTagAdjustmentRel.Asset
							constraint (UniqueAssetsTagAdjustmentRel not exists)
								"TagNumber<LocalTagNumber>IsInUseOnAsset<LocalAsset>"

					Action Rules
						BypassActiveCodeBlockEdit = true
						TransientFromReset	= true
						initialize ProcessDate
						initialize AssetProcess
						for each UnreleasedAssetAdjustmentRel.AssetAdjustment.AssetItemAdjustment set
							AssetProcess = "ADJ"
							invoke ResetAdjustment each
								invoked.PrmUpdateType = 1 
						for each UnreleasedAssetAdjustmentRel.AssetAdjustment.AssetBookAdjustment set
							AssetProcess = "ADJ"
							invoke ResetAdjustment each

						invoke Delete AssetControlTransactionRel
						invoke Delete UnreleasedAssetAdjustmentTransactionsRel

						LocalAssetProcess = "ADJ"
						invoke Delete PostReleaseHistoryTransactionsRel
						invoke Delete UnreleasedAssetBookTransactionsRel




						if (UnreleasedAssetAdjustmentRel exists)
							if (UnreleasedAssetAdjustmentRel.IsFundOverrideAdjusted)
								confirmation required
									"Warning;AnyUpdatedFundAllocationsMustBeManuallyReset,SelectYesToContinue"
							Description								= UnreleasedAssetAdjustmentRel.Description
							TagNumber								= UnreleasedAssetAdjustmentRel.TagNumber
							AssetGroup								= UnreleasedAssetAdjustmentRel.AssetGroup
							AssetCategory							= UnreleasedAssetAdjustmentRel.AssetCategory
							Simulated								= UnreleasedAssetAdjustmentRel.Simulated
							WorkInProcess							= UnreleasedAssetAdjustmentRel.WorkInProcess
							TaxExempt								= UnreleasedAssetAdjustmentRel.TaxExempt
							Used									= UnreleasedAssetAdjustmentRel.Used
							TotalItemQuantity						= UnreleasedAssetAdjustmentRel.TotalItemQuantity
							ItemTotalBaseCost						= UnreleasedAssetAdjustmentRel.ItemTotalBaseCost
							ItemTotalBaseTax						= UnreleasedAssetAdjustmentRel.ItemTotalBaseTax
							ItemTotalTransactionCost				= UnreleasedAssetAdjustmentRel.ItemTotalTransactionCost
							ItemTotalTransactionTax					= UnreleasedAssetAdjustmentRel.ItemTotalTransactionTax
							BaseNumberOfDecimals					= UnreleasedAssetAdjustmentRel.BaseNumberOfDecimals
							TransactionNumberOfDecimals				= UnreleasedAssetAdjustmentRel.TransactionNumberOfDecimals
							Currency								= UnreleasedAssetAdjustmentRel.Currency
							LastAssetItemPurchaseDate				= UnreleasedAssetAdjustmentRel.LastAssetItemPurchaseDate
							Company									= UnreleasedAssetAdjustmentRel.Company
							AssetLocation							= UnreleasedAssetAdjustmentRel.AssetLocation
							AssetDivision							= UnreleasedAssetAdjustmentRel.AssetDivision
							AssetType								= UnreleasedAssetAdjustmentRel.AssetType
							AssetAccountGroup						= UnreleasedAssetAdjustmentRel.AssetAccountGroup
							AssetProject							= UnreleasedAssetAdjustmentRel.AssetProject
							AssetAccountingUnit 					= UnreleasedAssetAdjustmentRel.AssetAccountingUnit
							AssetAccountingUnitGroup				= UnreleasedAssetAdjustmentRel.AssetAccountingUnitGroup
							DepreciationExpenseProject				= UnreleasedAssetAdjustmentRel.DepreciationExpenseProject
							OriginatingCompany						= UnreleasedAssetAdjustmentRel.OriginatingCompany
							AssetLease								= UnreleasedAssetAdjustmentRel.AssetLease
							FundOverride							= UnreleasedAssetAdjustmentRel.FundOverride
							Classification							= UnreleasedAssetAdjustmentRel.Classification
							IncludeInPhysicalInventory				= UnreleasedAssetAdjustmentRel.IncludeInPhysicalInventory
							AssetOwner								= UnreleasedAssetAdjustmentRel.AssetOwner
							AssetSummaryGroup						= UnreleasedAssetAdjustmentRel.AssetSummaryGroup
							AssetGuidelineClass						= UnreleasedAssetAdjustmentRel.AssetGuidelineClass
							Reference1								= UnreleasedAssetAdjustmentRel.Reference1
							Reference2								= UnreleasedAssetAdjustmentRel.Reference2
							GeographicalLatitude					= UnreleasedAssetAdjustmentRel.GeographicalLatitude
							GeographicalLongitude					= UnreleasedAssetAdjustmentRel.GeographicalLongitude
							GeographicalAltitude					= UnreleasedAssetAdjustmentRel.GeographicalAltitude

						if (FundAccounting)
							if (FundOverride)
								if (AssetFundAdjustmentAdditionRel exists)
									invoke DeleteFund AssetFundAdjustmentAdditionRel
								for each AssetFundOldRel
									LocalAccountingEntity		= each.AccountingEntity
									LocalAccountingUnit			= each.AccountingUnit
									if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
										LocalFund 				= each.AccountingUnit
									else
										LocalFund				= each.FinanceDimension1
									LocalProject				= each.Project
									LocalFinanceDimension1		= each.FinanceDimension1
									LocalFinanceDimension2		= each.FinanceDimension2
									LocalFinanceDimension3		= each.FinanceDimension3
									LocalFinanceDimension4		= each.FinanceDimension4
									LocalFinanceDimension5		= each.FinanceDimension5
									LocalFinanceDimension6 		= each.FinanceDimension6
									LocalFinanceDimension7		= each.FinanceDimension7
									LocalFinanceDimension8		= each.FinanceDimension8
									LocalFinanceDimension9		= each.FinanceDimension9
									LocalFinanceDimension10 	= each.FinanceDimension10
									if(LocalFundRel exists)
										invoke DeleteFund LocalFundRel
									invoke UpdateAssetFund each
										invoked.RecordType				= 0
								if (ItemFundRel exists)
									invoke UpdateAssetItemFund ItemFundRel
										invoked.RecordsDeleted = false
							else
								for each AssetItemsRel
									LocalAssetItem = each.AssetItem
									if (AssetItemFundAdjustmentAdditionRel exists)
										invoke DeleteItemFund AssetItemFundAdjustmentAdditionRel
									for each AssetItemFundOldRel
										LocalAccountingEntity		= each.AccountingEntity
										LocalAccountingUnit			= each.AccountingUnit
										if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
											LocalFund 				= each.AccountingUnit
										else
											LocalFund				= each.FinanceDimension1
										LocalProject				= each.Project
										LocalFinanceDimension1		= each.FinanceDimension1
										LocalFinanceDimension2		= each.FinanceDimension2
										LocalFinanceDimension3		= each.FinanceDimension3
										LocalFinanceDimension4		= each.FinanceDimension4
										LocalFinanceDimension5		= each.FinanceDimension5
										LocalFinanceDimension6 		= each.FinanceDimension6
										LocalFinanceDimension7		= each.FinanceDimension7
										LocalFinanceDimension8		= each.FinanceDimension8
										LocalFinanceDimension9		= each.FinanceDimension9
										LocalFinanceDimension10 	= each.FinanceDimension10
										if(AssetItemFundActiveRel exists)
											invoke DeleteItemFund AssetItemFundActiveRel

										invoke UpdateAssetItemFund each
											invoked.RecordType 			= 0
							invoke Update Asset.UnreleasedAssetAdjustmentRel
								invoked.FundsAllocationUpdated         = false			

						AssetItemTotalsDone = false

						if (first LastAssetImpairmentRel.Status.PostRelease)
							invoke ResetImpairmentAdjustment first LastAssetImpairmentRel
						if (AssetSummaryGroup changed)
							include ValidateSummaryGroupFields
						include CalculateAssetItemTotals
						if (FundAllocationRequired)
							include GenerateFundAllocation
						make transition to Released
					Exit Rules
						include CheckCloseReleaseFlag
						invoke Delete UnreleasedAssetAdjustmentRel
						include BuildTextIndexes

				ResetTransfer is an Instance Action
					valid when (ApprovalUnreleasedAssetTransferExists)
					Local Fields
						SavedAsset							is an Asset
					Entrance Rules
						if (UnreleasedAssetTransfersRel.Company.RequireUniqueTags)
							LocalTagNumber = UnreleasedAssetTransfersRel.TagNumber
							LocalAsset = UniqueAssetsTagTransferRel.Asset
							constraint (UniqueAssetsTagTransferRel not exists)
								"TagNumber<LocalTagNumber>IsInUseOnAsset<LocalAsset>"

					Action Rules
						BypassActiveCodeBlockEdit = true
						TransientFromReset							= true
						invoke PostRelease.UpdateFromTransferReset Asset
							invoked.PrmCompany						= first UnreleasedAssetTransfersRel.Company
							invoked.PrmTagNumber					= first UnreleasedAssetTransfersRel.TagNumber
							invoked.PrmAssetGroup					= first UnreleasedAssetTransfersRel.AssetGroup
							invoked.PrmAssetLocation				= first UnreleasedAssetTransfersRel.AssetLocation
							invoked.PrmAssetDivision				= first UnreleasedAssetTransfersRel.AssetDivision
							invoked.PrmAssetType					= first UnreleasedAssetTransfersRel.AssetType
							invoked.PrmAssetAccountGroup			= first UnreleasedAssetTransfersRel.AssetAccountGroup
							invoked.PrmAssetAccountingUnitGroup		= first UnreleasedAssetTransfersRel.AssetAccountingUnitGroup
							invoked.PrmAssetAccountingUnit			= first UnreleasedAssetTransfersRel.AssetAccountingUnit
							invoked.PrmAssetProject					= first UnreleasedAssetTransfersRel.AssetProject
							invoked.PrmDepreciationExpenseProject	= first UnreleasedAssetTransfersRel.DepreciationExpenseProject
							invoked.PrmLastAssetItemPurchaseDate	= LastAssetItemPurchaseDate
							invoked.PrmAssetOwner					= first UnreleasedAssetTransfersRel.AssetOwner

						LocalAssetProcess = "TRF"

						invoke Delete PostReleaseHistoryTransactionsRel

						if (UnreleasedAssetTransfersRel.FullOrPartial.Full)
							LocalAsset		= 	UnreleasedAssetTransfersRel.AssetTransferTo.ToAsset
							LocalCompany	=	UnreleasedAssetTransfersRel.AssetTransferTo.ToAssetCompany

						invoke ResetTransfer UnreleasedAssetTransfersRel
						SavedAsset = first UnreleasedAssetTransfersRel.AssetTransferTo.ToAsset


						invoke Delete UnreleasedAssetTransactionRel

						LocalAssetProcess = AssetProcess

						invoke Delete UnreleasedAssetBookTransactionsRel

						if (UnreleasedAssetTransfersRel.FullOrPartial.Full)
							for each AssetBooksRel
								invoke BalanceUpdate each
									initialize invoked.DebitBalance
									initialize invoked.CreditBalance

						invoke Delete UnreleasedAssetTransfersRel


						if (AssetControlTransactionRel exists)
							invoke Delete AssetControlTransactionRel
						if (SavedAsset entered)
							LocalAsset	= SavedAsset
							invoke DeleteReleasedTrans TransferAssetTransactionsRel
							invoke Delete TransferAssetBookTransactionsRel
							invoke DeleteSavedAsset SavedAsset
						else
							if (FromCompanyPostReleaseAssetsRel not exists
							and FromCompanyUnreleasedNonWIPAssetsRel not exists)
								invoke SetPeriodCloseRelease ToAssetCompanyRel
									invoked.PrmPeriodCloseRelease	= "Y"
						AssetItemTotalsDone = false
						include CalculateAssetItemTotals
						if (FundAllocationRequired)
							include GenerateFundAllocation
						make transition to Released
					Exit Rules
						initialize ProcessDate
						initialize AssetProcess
						include CheckCloseReleaseFlag

				ResetDisposal is an Instance Action
					valid when (ApprovalUnreleasedAssetDisposalCreated)
					Local Fields
						SavedAsset						is an Asset

					Action Rules
						BypassActiveCodeBlockEdit = true
						TransientFromReset	= true
						LocalAsset 			= Asset
						LocalAssetProcess 	= "DSP"
						if (!UnreleasedAssetDisposalRel.PartialDisposal)
							for each AssetBooksRel
								invoke DisposalReset each


						invoke Delete UnreleasedAssetTransactionRel

						invoke Delete PostReleaseHistoryTransactionsRel


						invoke Delete UnreleasedAssetBookTransactionsRel
						invoke ResetDisposal UnreleasedAssetDisposalRel

						AssetItemTotalsDone = false

						if (Status.PostRelease)
							if (FundAllocationRequired)
								include GenerateFundAllocation
							make transition to Released

					Exit Rules
						include CheckCloseReleaseFlag
						include BuildTextIndexes


				ResetReinstatement is an Instance Action
					valid when (ApprovalUnreleasedAssetReinstatementsExists)
					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke Delete UnreleasedAssetReinstatementsRel
						if (AssetControlTransactionRel exists)
							invoke Delete AssetControlTransactionRel
					Exit Rules
						include CheckCloseReleaseFlag

				ResetRevalue is an Instance Action
					valid when (ApprovalRevalueInProgress)
					Action Rules
						BypassActiveCodeBlockEdit = true
						if (UnreleasedAssetBookRevaluationRel exists)
							invoke ResetRevalue UnreleasedAssetBookRevaluationRel
						if (Status.PostRelease)
							make transition to Released
					Exit Rules
						initialize ProcessDate
						initialize AssetProcess
						include CheckCloseReleaseFlag

				ReleaseRevalue is an Instance Action
					valid when (ApprovalRevalueReleaseValid)
					Action Rules
						LocalCancelResume	= true
						BypassActiveCodeBlockEdit = true
						invoke Release UnreleasedAssetBookRevaluationRel
					Exit Rules
						invoke PostRelease.Release
						initialize LocalCancelResume

				InvokeAssetReleaseDisposal is an Instance Action
					default label is "ReleaseDisposal"
					valid when (FromBookDisposal)
					Action Rules
						LocalCancelResume	= true
						invoke AssetReleaseDisposal UnreleasedAssetDisposalRel
						initialize LocalCancelResume



				ReleaseDisposal is an Instance Action

					valid when (ApprovalFromAssetDisposal)
					Entrance Rules
						constraint ((sum Asset.UnreleasedBookTransactionsRel.TransactionAmount + sum DisposedAsset.UnreleasedBookTransactionsRel.TransactionAmount) = 0)
							"BookTransactionDebitsAndCreditsMustBalance"
						if (UnreleasedPartialAssetDisposalCreated)
							LocalAssetDisposal = UnreleasedAssetDisposalRel.AssetDisposal
							for each AssetBooksRel
								if (!each.Disposed)	
									LocalBook		= each.Book
									LocalAsset		= DisposedAsset

















									if (AssetControlTransactionRel exists
									or DisposedAsset.AssetControlTransactionRel exists)
										LocalPartialControlDebitBalance 	= (DisposedAsset.AssetControlTransactionRel.DebitBalance + Asset.AssetControlTransactionRel.DebitBalance)
										LocalPartialControlCreditBalance 	= (DisposedAsset.AssetControlTransactionRel.CreditBalance + Asset.AssetControlTransactionRel.CreditBalance)
										constraint ((LocalPartialControlDebitBalance * -1) =  LocalPartialControlCreditBalance)
											"AssetDebitsAndCreditsMustBalance"
									else
										LocalPartialControlDebitBalance 	= (DisposedAssetBookRel.DebitBalance + each.DebitBalance)
										LocalPartialControlCreditBalance 	= (DisposedAssetBookRel.CreditBalance + each.CreditBalance)
										constraint ((LocalPartialControlDebitBalance * -1) =  LocalPartialControlCreditBalance)
											"AssetDebitsAndCreditsMustBalance"
						else
							if (AssetControlTransactionRel exists)
								if ((AssetControlTransactionRel.DebitBalance * -1) not =  AssetControlTransactionRel.CreditBalance)
									invoke CheckBalance AssetControlTransactionRel
									constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
										"AssetDebitsAndCreditsMustBalance"
							else
								for each AssetBooksRel
									constraint ((each.DebitBalance * -1) =  each.CreditBalance)
										"AssetDebitsAndCreditsMustBalance"
					Action Rules
						BypassActiveCodeBlockEdit = true
						include CloseControlDateEdit
						LocalCancelResume	= true
						if (UnreleasedPartialAssetDisposalCreated)
							LocalAssetDisposal = UnreleasedAssetDisposalRel.AssetDisposal
							for each AssetBooksRel
								if (!each.Disposed)
									LocalBook		= each.Book
									LocalAsset		= DisposedAsset

									invoke UpdateBookFromDisposal each  
										invoked.PrmPartialDisposal			= true
										if (each.AssetTaxCreditTable entered)
											LocalBasis = LocalAssetBookRel.Basis - (DisposedAssetBookDisposalRel.TaxCreditRecapture * each.AssetTaxCreditTable.BasisReductionPercentage)/100
											invoked.PrmBasis				= LocalBasis
										else
											invoked.PrmBasis				= LocalAssetBookRel.Basis
										invoked.PrmYearToDateDepreciation	= DisposedAssetBookDisposalRel.YearToDateDepreciation - DisposedAssetBookDisposalRel.DepreciationExpense
										invoked.PrmLifeToDateDepreciation	= DisposedAssetBookDisposalRel.LifeToDateDepreciation - DisposedAssetBookDisposalRel.DepreciationExpense
										invoked.PrmSalvageValue				= DisposedAssetBookDisposalRel.SalvageValue
									invoke UpdateBookFromDisposal DisposedAssetBookRel  
										invoked.PrmPartialDisposal			= true
										invoked.PrmYearToDateDepreciation	= DisposedAssetBookDisposalRel.YearToDateDepreciation - DisposedAssetBookDisposalRel.DepreciationExpense
										invoked.PrmLifeToDateDepreciation	= DisposedAssetBookDisposalRel.LifeToDateDepreciation - DisposedAssetBookDisposalRel.DepreciationExpense
										invoked.PrmDepreciationExpense		= DisposedAssetBookDisposalRel.DepreciationExpense
										invoked.PrmDepreciationExpenseOverride = DisposedAssetBookDisposalRel.DepreciationExpenseOverride
					Exit Rules
						for each AssetItemsRel
							if(each.ItemQuantity=0)
								invoke ForceDelete each.AssetItem
						if (FundAccounting
						and DisposedAsset entered
						and UnreleasedPartialAssetDisposalCreated)
							include PartialFundUpdate
						invoke PostRelease.Release
						if (DisposedAsset entered
						and DisposedAsset.Status.PostRelease)
							LocalLastCompanyAsset = AssetCompanyRel.LastCompanyAsset + 1
							invoke SetLastCompanyAsset AssetCompanyRel
								invoked.PrmLastCompanyAsset	= LocalLastCompanyAsset
							invoke PostRelease.NoEditUpdate DisposedAsset
						   		invoked.CompanyAsset = LocalLastCompanyAsset




							if(!LocalReleaseSetAction)
								invoke PostRelease.Release DisposedAsset
							else
								invoke PostRelease.ReleaseFromBatch DisposedAsset
									invoked.TransientJournalizeGroup	= TransientJournalizeGroup
									invoked.LocalDetailView			 	= LocalDetailView
									invoked.LocalAssetMassReleaseResult	= LocalAssetMassReleaseResult
									invoked.LocalCompanyGroup 			= LocalCompanyGroup
									invoked.LocalReleaseSetAction		= LocalReleaseSetAction
						include JournalizeUnreleasedTransactions
						initialize LocalCancelResume



				ReleaseReinstatement is an Instance Action
					restricted
					Entrance Rules
						BypassActiveCodeBlockEdit = true
						include CloseControlDateEdit
						if (AssetControlTransactionRel exists)
							constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
								"AssetDebitsAndCreditsMustBalance"
						else
							for each AssetBooksRel
								constraint ((each.DebitBalance * -1) =  each.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"

					Action Rules
						TransientFromReinstatement = true
						invoke PostRelease.Release


				ReleaseTransfer is an Instance Action
					restricted
					Entrance Rules
						BypassActiveCodeBlockEdit = true
						include CloseControlDateEdit
						if (AssetControlTransactionRel exists)
							constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
								"AssetDebitsAndCreditsMustBalance"
						else
							for each AssetBooksRel
								constraint ((each.DebitBalance * -1) =  each.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"

					Action Rules








						invoke Release UnreleasedAssetTransfersRel
						include JournalizeUnreleasedTransactions

					Exit Rules
						invoke PostRelease.Release
						invoke Delete AssetTransferFundsRel
						invoke Delete AssetItemTransferFundsRel

				ReleaseImpairment is an Instance Action
					restricted

					Entrance Rules
						BypassActiveCodeBlockEdit = true
						include CloseControlDateEdit
						if (AssetControlTransactionRel exists)
							constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
								"AssetDebitsAndCreditsMustBalance"
						else
							for each AssetBooksRel
								constraint ((each.DebitBalance * -1) =  each.CreditBalance)
									"AssetDebitsAndCreditsMustBalance"


					Action Rules
						invoke Release UnreleasedAssetImpairmentRel

					Exit Rules
						invoke PostRelease.Release

				ReleaseImpairmentForBatch is an Instance Action
					restricted
					Parameters
						PrmDescription				is a Description

					Entrance Rules
						LocalDescription = PrmDescription
					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke PostRelease.ReleaseImpairment

				ResetImpairment is an Instance Action
					restricted
					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke ResetImpairment UnreleasedAssetImpairmentRel
						if (AssetControlTransactionRel exists)
							invoke Delete AssetControlTransactionRel
						if (FundAllocationRequired)
							include GenerateFundAllocation
						make transition to Released
					Exit Rules
						include CheckCloseReleaseFlag

				ReleaseFromBatch is an Update Action
					restricted
					bypass field rules
					Action Rules
						BypassActiveCodeBlockEdit = true
						invoke Release

				Release is an Instance Action

					valid when (PostRelReleaseValid)
					Local Fields
						LocalUpdateOrigin				is Numeric 1
							States
								Online				value is blank
								Batch				value is 1
						LocalOptions					is Numeric 1
				            States
				                ReleaseTransactions value is blank
				               	ReportOnly	 		value is 1
						LocalAsset						is an Asset
						PrmJournalizeGroup      		is like JournalizeGroup
						PrmEnterpriseGroup				is a FinanceEnterpriseGroup






					Entrance Rules
						BypassActiveCodeBlockEdit = true








						initialize TransientFullTransfer
						initialize TransientPartialTransfer
						initialize TransientIntercompanyTransfer
						PrmJournalizeGroup = TransientJournalizeGroup
						if (!ManualProcess)
							constraint (!ApprovalStatus.Submitted)
								"CannotReleaseAsset<Asset>;AssetIsSubmittedForApproval"
						if(LocalDetailView not entered)
							LocalDetailView = TransientDetailView
						if (AssetProcess.Transfer)
							FromAssetTransferRelease			= true
						if (UnreleasedAssetTransferRel.FullOrPartial.Full)
							TransientFullTransfer 			= true
						if (UnreleasedAssetTransferRel.TransferType.InterCompany)
							TransientIntercompanyTransfer 	= true
						if (UnreleasedAssetTransferRel.FundAllocationUpdated)
							LocalFundAllocationUpdated		= true
						TransientToAsset 					= UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
						include CloseControlDateEdit
						if (!AssetProcess.Transfer
						or UnreleasedAssetTransferRel.FullOrPartial.Full)
							if (AssetControlTransactionRel exists)
								if (!AssetControlTransactionRel.IsInBalance)
									invoke CheckBalance AssetControlTransactionRel
									constraint ((AssetControlTransactionRel.DebitBalance * -1) =  AssetControlTransactionRel.CreditBalance)
										"AssetDebitsAndCreditsMustBalance"
							else
								if (UnreleasedAssetTransferRel.TransferType.InterCompany)
									for each BookTransferRel
										initialize LocalAssetBookDebitBalance
										LocalAssetBook = each.Book
										LocalBook = each.Book
										LocalCompany = UnreleasedAssetTransferRel.Company
										if (each.Book != each.ToBook)
											if (each.ToBook.PostCurrency.Book)
												LocalToCurrency = each.ToBook.Currency
											else
												LocalToCurrency = Asset.Currency
					 						if ((each.Book.PostCurrency.Asset
											and each.Asset.Currency != each.Book.Currency)
											or (each.ToBook.PostCurrency.Asset
											and each.ToAsset.Currency != each.ToBook.Currency))
												LocalExchangeDate		= Asset.LastAssetItemPurchaseDate
											else
												LocalExchangeDate		= UnreleasedAssetTransferRel.TransferDate
											if (FromBookCalendarRel.IsPostingBook)
												for each AssetTransactionsBookRel
													if (each.TransactionCurrency ! = LocalToCurrency)

														LocalFromCurrency           	= each.TransactionCurrency
														LocalBaseAmount.ToCurrency		= LocalToCurrency
														LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
														LocalCurrencyAmount				= each.TransactionAmount
														LocalAssetBookDebitBalance 		+= LocalBaseAmount.OutputCurrencyAmount
													else
														LocalAssetBookDebitBalance		+= each.TransactionAmount
											else
												for each AssetBookTransactionsBookRel
													if (each.TransactionCurrency ! = LocalToCurrency)

														LocalFromCurrency           		= each.TransactionCurrency
														LocalBaseAmount.ToCurrency			= LocalToCurrency
														LocalCurrencyRate					= LocalBaseAmount.OutputCurrencyRate
														LocalCurrencyAmount					= each.TransactionAmount
														LocalAssetBookDebitBalance 			+= LocalBaseAmount.OutputCurrencyAmount
													else
														LocalAssetBookDebitBalance		+= each.TransactionAmount
											LocalAsset = Asset
											LocalBook = each.ToBook

											LocalNewAssetBookCreditBalance = TransferToAssetBookRel.DebitBalance + TransferToAssetBookRel.CreditBalance
											constraint ((LocalNewAssetBookCreditBalance + LocalAssetBookDebitBalance) = 0)
												"AssetDebitsAndCreditsMustBalance"
										else
											LocalBook = each.Book
											LocalAssetBookDebitBalance = TransferToAssetBookRel.DebitBalance + TransferToAssetBookRel.CreditBalance
											constraint (LocalAssetBookDebitBalance = 0)
												"AssetDebitsAndCreditsMustBalance"
								else
									for each AssetBooksRel
										constraint ((each.DebitBalance * -1) =  each.CreditBalance)
											"AssetDebitsAndCreditsMustBalance"
						else
							if (AssetProcess.Transfer
							and !UnreleasedAssetTransferRel.TransferType.InterCompany)
								for each AssetBooksRel
									if (!each.Disposed)
										if (each.CreditBalance entered
										and each.DebitBalance entered)
											LocalBook = each.Book
											LocalAssetBookDebitBalance		= each.DebitBalance + ToAssetBookRel.DebitBalance
											LocalNewAssetBookCreditBalance	= each.CreditBalance + ToAssetBookRel.CreditBalance
											constraint((LocalAssetBookDebitBalance + LocalNewAssetBookCreditBalance) = 0)
												"AssetDebitsAndCreditsMustBalance"
										else
											LocalAssetBook = each.Book
											LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
											if (each.PostingBookCalendarRel.PostingBook)
												LocalPartialAssetBookBalance 	= sum AssetTransactionsBookRel.TransactionAmount
												LocalPartialNewAssetBookBalance = sum ToAssetTransactionsBookRel.TransactionAmount
												constraint((LocalPartialAssetBookBalance + LocalPartialNewAssetBookBalance) = 0)
													"AssetTransactionsAreNotBalancedForAssetBook(<LocalAssetBook>)"
											else
												LocalPartialAssetBookBalance 	= sum AssetBookTransactionsBookRel.TransactionAmount
												LocalPartialNewAssetBookBalance = sum ToAssetBookTransactionsBookRel.TransactionAmount
												constraint((LocalPartialAssetBookBalance + LocalPartialNewAssetBookBalance) = 0)
													"AssetTransactionsAreNotBalancedForAssetBook(<LocalAssetBook>)"
							else
							if (UnreleasedAssetTransferRel.TransferType.InterCompany)
								LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
								if (AssetControlTransactionRel exists
								and ToAssetControlTransactionRel exists)
									LocalPartialAssetBookBalance 	= AssetControlTransactionRel.DebitBalance + AssetControlTransactionRel.CreditBalance
									LocalPartialNewAssetBookBalance = ToAssetControlTransactionRel.DebitBalance + ToAssetControlTransactionRel.CreditBalance
									constraint ((LocalPartialAssetBookBalance * -1) = LocalPartialNewAssetBookBalance)
										"AssetDebitsAndCreditsMustBalance"
								else
									for each AssetBooksRel
										if (!each.Disposed)
											LocalBook = each.Book
											LocalBook = AssetBookTransferRel.ToBook
											if (each.Book.PostCurrency.Book)
												LocalFromCurrency = each.Book.Currency
											else
												LocalFromCurrency = Asset.Currency
											if (ToAssetBookRel.Book.PostCurrency.Book)
												LocalToCurrency = ToAssetBookRel.Book.Currency
											else
												LocalToCurrency = Asset.Currency
											if (LocalFromCurrency ! = LocalToCurrency)
												if ((each.Book.PostCurrency.Asset
												and each.Asset.Currency != each.Book.Currency)
												or (ToAssetBookRel.Book.PostCurrency.Asset
												and ToAssetBookRel.Asset.Currency != ToAssetBookRel.Book.Currency))
													LocalExchangeDate			= Asset.LastAssetItemPurchaseDate
												else
													LocalExchangeDate			= UnreleasedAssetTransferRel.TransferDate

												LocalBaseAmount.ToCurrency		= LocalToCurrency
												LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
												LocalCurrencyAmount				= each.DebitBalance
												LocalAssetBookDebitBalance		= LocalBaseAmount.OutputCurrencyAmount + ToAssetBookRel.DebitBalance

												LocalBaseAmount.ToCurrency		= LocalToCurrency
												LocalCurrencyRate				= LocalBaseAmount.OutputCurrencyRate
												LocalCurrencyAmount				= each.CreditBalance
												LocalNewAssetBookCreditBalance 	= LocalBaseAmount.OutputCurrencyAmount + ToAssetBookRel.CreditBalance
											else
												LocalAssetBookDebitBalance		= each.DebitBalance + ToAssetBookRel.DebitBalance
												LocalNewAssetBookCreditBalance 	= each.CreditBalance + ToAssetBookRel.CreditBalance
											constraint ((LocalAssetBookDebitBalance + LocalNewAssetBookCreditBalance) = 0)
												"AssetDebitsAndCreditsMustBalance"
					Action Rules
						include CalculateAssetItemTotals
						include ReleaseAssetEdits
						LocalCancelResume	= true
						if(AssetFundAdjustmentAdditionRel exists)
							invoke UpdateAssetFund AssetFundAdjustmentAdditionRel
								invoked.RecordType	= 0
						if(AssetFundItemAdjustmentAdditionRel exists)
							invoke UpdateAssetItemFund AssetFundItemAdjustmentAdditionRel
								invoked.RecordType	= 0
						if (AssetProcess.Transfer)
							FromAssetTransferRelease			= true
							if (Company.BalanceTransfers.Yes
							and (!FundAccounting
							or (FundAccounting
							and (!AssetTransferFundsRel exists
							and !AssetFundsRel exists))))
								include AssetTransferBalance
						if (UnreleasedAssetTransactionRel exists)
							if (PrmJournalizeGroup not entered)
					            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
								PrmJournalizeGroup 			= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
								TransientJournalizeGroup 	= PrmJournalizeGroup
						include ReleaseAssetUpdates
						if (UnreleasedAssetTransactionRel exists)
							if (AssetProcess.Transfer
							and (UnreleasedAssetTransferRel.TransferType.InterCompany
							or UnreleasedAssetTransferRel.FullOrPartial.Partial))
								if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
									TransientPartialTransfer	= true
								else
									TransientPartialTransfer	= false
								if (UnreleasedAssetTransferRel.FullOrPartial.Full)
									LocalUpdateFromTransfer 	= true








								LocalReference = first UnreleasedTransferTransactionsRel.Reference
								if (((UnreleasedAssetTransferRel.TransferType.InterCompany
								and AssetTransferFundsRel exists)
								or TransientPartialTransfer)
								or ((LocalReference = "Mass Transfer From"
								or LocalReference = "Mass Transfer To")
								and AssetFundsRel exists))
									if (FundAllocationRequired)
										for each UnreleasedTransferTransactionsRel
											if (each.FundAccountType)
												invoke CreateFundTransactions each
													invoked.PrmTransactionDate	  = each.TransactionDate
													if (TransientPartialTransfer
													and UnreleasedAssetTransferRel not exists)
														invoked.TransferFromAsset = TransferFromAsset
													else
														invoked.TransferFromAsset = Asset
								for each UnreleasedTransferTransactionsRel
									invoke Release each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup
										invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult












								if (UnreleasedAssetTransferRel.FullOrPartial.Partial)
									TransientPartialTransfer	= true
									LocalToAssetForTransfer 	= UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
									if (FundAllocationRequired)
										for each UnreleasedTransferManualToTransactionsRel
											if (each.FundAccountType)
												invoke CreateFundTransactions each
													invoked.PrmTransactionDate	  = each.TransactionDate
													if (TransientPartialTransfer
													and UnreleasedAssetTransferRel not exists)
														invoked.TransferFromAsset = TransferFromAsset
													else
														invoked.TransferFromAsset = Asset
									for each UnreleasedTransferManualToTransactionsRel
										invoke Release each
											invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
											invoked.PrmJournalizeGroup			= PrmJournalizeGroup
											invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult












							else

								if (FundAllocationRequired
								or AssetTransferFundsExist)
									if (TransientFromReinstatement = false) 
										for each UnreleasedAssetTransactionRel
											if (each.FundAccountType)
												invoke CreateFundTransactions each
													invoked.PrmTransactionDate	  = each.TransactionDate
													if (TransientPartialTransfer
													and UnreleasedAssetTransferRel not exists)
														invoked.TransferFromAsset = TransferFromAsset
													else
														invoked.TransferFromAsset = Asset

													if (AdjustmentItemsAdded entered)
														invoked.AdjustmentItemsAdded	= AdjustmentItemsAdded
														invoked.AdjustmentItemTotal  	= UnreleasedAssetAdjustmentRel.ItemTotalTransactionCost

								for each UnreleasedAssetTransactionRel
									invoke Release each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup
										invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult











							if (!AssetProcess.Transfer
							and FundAllocationRequired
							and HistoryTransactionsToBePostedRel exists)
								for each HistoryTransactionsToBePostedRel
									invoke PostHistory each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup











							if (Asset.AssetProcess.Adjustment)
								for each HistoryTransactionsToBePostedRel
									invoke PostHistory each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup











							if (ImpairmentTransactionsToBePostedRel exists)
								for each ImpairmentTransactionsToBePostedRel
									invoke PostHistory each
										invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.PrmJournalizeGroup			= PrmJournalizeGroup











							if (!LocalReleaseSetAction)
								invoke JournalizeDistributionsForGroup AssetCompanyRel
									invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.PrmAssetCompany					= Company
									invoked.PrmJournalizeGroup				= PrmJournalizeGroup
									invoked.PrmAsset						= Asset
									invoked.PrmDescription					= LocalDescription
						if (AssetProcess.Adjustment
						or	AssetProcess.Transfer
						or	AssetProcess.Disposal
						or	AssetProcess.Revalue)
							LocalAssetProcess = AssetProcess
							if (!AssetProcess.Adjustment)
								for each PostReleaseHistoryTransactionsRel
									invoke ReleaseHistory each

						if (FundAllocationRequired)
							if (TransientFromReinstatement = false)

								if (UnreleasedAssetTransferRel.TransferType.InterCompany)
									LocalToCompany = UnreleasedAssetTransferRel.AssetTransferTo.ToAssetCompany
								else
									LocalToCompany = Company
								if (UnreleasedAssetTransferRel.AssetTransferTo.ToAssetType entered)
									LocalToAssetType = UnreleasedAssetTransferRel.AssetTransferTo.ToAssetType
								else
									LocalToAssetType = AssetType
								for each UnreleasedBookTransactionsRel


									if (each.FundAccountType)
										invoke CreateFundTransactions each
											invoked.PrmToCompany 	= LocalToCompany
											invoked.PrmAssetType	= LocalToAssetType
											invoked.PrmTransactionDate	  = each.TransactionDate
											if (TransientPartialTransfer
											and UnreleasedAssetTransferRel not exists)
												invoked.TransferFromAsset = TransferFromAsset
											else
												invoked.TransferFromAsset = Asset
											if (AdjustmentItemsAdded entered)
												invoked.AdjustmentItemsAdded	= AdjustmentItemsAdded
												invoked.AdjustmentItemTotal  	= UnreleasedAssetAdjustmentRel.ItemTotalTransactionCost
						for each UnreleasedBookTransactionsRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
						if (UnreleasedAssetImpairmentRel exists)
							invoke Release UnreleasedAssetImpairmentRel
						if (PostReleaseAssetImpairmentRel exists)
							invoke Release PostReleaseAssetImpairmentRel
						if (!AssetProcess.Disposal)
							make transition to Released
						else
						if (DisposedAsset entered
						and Asset != DisposedAsset
						or (AssetDisposalRel.BookDisposal
						and instance count of AssetBooksRel != instance count of AssetBookDisposalsRel))
							make transition to Released
						else
							make transition to Disposed

					Exit Rules
						for each CurrentBookCalendarsRel
							invoke SetDepreciationCalculated each
								invoked.PrmDepreciationCalculated	= false
						for each AssetBook set
							LocalBook = each.Book
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= LocalAssetMassReleaseResult
								if (LocalAssetProcess.Adjustment
								and AssetAdjustmentRel exists
								and BookAdjustmentRel.IsLifeToDateDepreciationAdjusted
								and !BookAdjustmentRel.IsYearToDateDepreciationAdjusted
								and !BookAdjustmentRel.IsBasisAdjusted
								and each.AdjustPriorYearHistoryTransactions.YesWithTransactions)
									invoked.PrmPriorHistory	= true
									if (each.Book.PostHistory
									and PrmJournalizeGroup not entered)
										increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
										PrmJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
										LocalAdjPriorHistory = true
									invoked.PrmJournalizeGroup	= PrmJournalizeGroup
									if (!LocalAdjPriorHistory
									and each.Book.PostHistory)
										LocalAdjPriorHistory = true

						if (LocalUpdateOrigin = blank)
							if (!UnreleasedAssetDisposalCreated
							and PrmJournalizeGroup not entered)
								increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
								PrmJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							if (!AssetCompanyRel.JournalizationComplete
							and !LocalReleaseSetAction)
								if (LocalAssetProcess.Adjustment
								and LocalAdjPriorHistory
								and PrmJournalizeGroup entered)
									invoke JournalizeDistributionsForGroup AssetCompanyRel
										invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
										invoked.PrmAssetCompany					= Company
										invoked.PrmAsset						= Asset
										invoked.PrmDescription					= LocalDescription
										invoked.PrmJournalizeGroup				= PrmJournalizeGroup
								else
									invoke JournalizeDistributions first UnreleasedAssetTransactionRel
										invoked.PrmOptions					= LocalOptions
										invoked.PrmUpdateOrigin				= LocalUpdateOrigin
										invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.PrmAssetCompany				= Company
										if (LocalUpdateOrigin = blank)
											invoked.PrmAsset				= Asset

						invoke Delete AssetControlTransactionRel
						invoke Delete ToAssetControlTransactionRel
						include GenerateTransferFunds


						if (LocalUpdateFromTransfer)
							LocalCompany = UnreleasedAssetTransferRel.Company
							if (FromCompanyUnreleasedNonWIPAssetsRel not exists
							and FromCompanyPostReleaseAssetsRel not exists)
								invoke SetPeriodCloseRelease UnreleasedAssetTransferRel.Company
									invoked.PrmPeriodCloseRelease	= "Y"
							else
								if (UnreleasedAssetTransferRel.Company.PeriodCloseRelease	!= "N")
									invoke SetPeriodCloseRelease UnreleasedAssetTransferRel.Company
										invoked.PrmPeriodCloseRelease	= "N"

						if (!(DisposedAsset entered
						and DisposedAsset.Status.PostRelease))
							include CheckCloseReleaseFlag
						invoke TriggerAssetTransaction
						invoke TriggerAsset
						initialize AssetProcess
						initialize LocalCancelResume
						initialize ApprovalStatus
						if(FundAccounting)
							invoke DeleteFund AssetFundOldRel
							invoke DeleteItemFund AssetFundItemOldRel
							invoke DeleteItemFund ItemFundRel


				TransitiontoDisposed is an Instance Action
					restricted
					Action Rules
						make transition to Disposed
					Exit Rules
						include CheckCloseReleaseFlag

				TransitiontoUnreleased is an Instance Action
					restricted
					Action Rules
						make transition to Unreleased
					Exit Rules
						include CheckCloseReleaseFlag

				DeletePartial is a Delete Action
					restricted
					Entrance Rules
						for each AssetBarCode set
							invoke Delete each
						include DeleteRules

					Exit Rules
						include CheckCloseReleaseFlag

				CheckAssetControlBalance is an Instance Action
					restricted


				CheckAssetBookBalance is an Instance Action
					default label is "CheckAssetBookBalance"
					Action Rules
						if(Status.PostRelease
						or Status.Unreleased)
							if (AssetControlTransactionRel exists)
								invoke DeleteFromBatch AssetControlTransactionRel
							if (UnreleasedAssetTransferRel exists)
								LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
								if (ToAssetControlTransactionRel exists)
									invoke DeleteFromBatch ToAssetControlTransactionRel
							for each AssetBooksRel
								LocalCreditBalance = 0
								LocalDeditBalance = 0
								LocalAssetBook = each.Book
								if (each.IsPostingBook)
									for each AssetTransactionsBookRel
										if (each.TransactionAmount > 0)
											LocalDeditBalance	+= each.TransactionAmount
										else
											LocalCreditBalance	+= each.TransactionAmount
								else
									for each AssetBookTransactionsBookRel
										if (each.TransactionAmount > 0)
											LocalDeditBalance	+= each.TransactionAmount
										else
											LocalCreditBalance	+= each.TransactionAmount
								invoke BalanceUpdate each
									invoked.CreditBalance	= 	LocalCreditBalance
									invoked.DebitBalance	=	LocalDeditBalance

							if (AssetProcess.Transfer
							and UnreleasedAssetTransferRel.FullOrPartial.Partial)
								LocalToAsset = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
								for each ToAssetBooksRel
									LocalCreditBalance = 0
									LocalDeditBalance = 0
									LocalToAssetForTransfer = UnreleasedAssetTransferRel.AssetTransferTo.ToAsset
									LocalAssetBook = each.Book
									if (each.IsPostingBook)
										for each ToAssetTransactionsBookRel
											if (each.TransactionAmount > 0)
												LocalDeditBalance	+= each.TransactionAmount
											else
												LocalCreditBalance	+= each.TransactionAmount
									else
										for each ToAssetBookTransactionsBookRel
											if (each.TransactionAmount > 0)
												LocalDeditBalance	+= each.TransactionAmount
											else
												LocalCreditBalance	+= each.TransactionAmount
									invoke BalanceUpdate each
										invoked.CreditBalance	= 	LocalCreditBalance
										invoked.DebitBalance	=	LocalDeditBalance

				JournalizeReleasedGLTrans is an Instance Action 
					restricted									
					Action Rules								
				        if (first UnJournalizedGLTransactionDetailsRel exists)
				            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				            LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				            for each UnJournalizedGLTransactionDetailsRel
				                invoke UpdateJournalizeGroup each
				                    invoked.PrmJournalizeGroup = LocalJournalizeGroup

			Disposed is a State
				UpdateDisposedSequenceNumbers is an Update Action
					restricted
					bypass field rules

FileCreationLogic.Asset is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"Asset_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
				LocalAssetGroupSelection		is a Asset group in subject FileCreationAsset
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      Asset % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
					LocalAssetGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalAssetGroupSelection not entered
					or	Asset within LocalAssetGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= Asset
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
