RecurringJournalTransaction is a BusinessClass
	owned by GeneralLedger
	prefix is RJTRN
	
	Ontology
		symbolic key is RecurringJournalTransaction
		
	Patterns
	
	Persistent Fields
		FinanceCodeBlock				is a TransactionCodeBlock
	    DimensionCode
		GeneralLedgerEvent
			default label is "GlobalLedgerEvent"
		Reference
		Description						is Alpha up to 60
			translatable
		AutoReverse						is Boolean
		CurrencyCode					is a FromCurrency
		TransactionAmount				is a CurrencyAmount


        TransactionDate					is Date

		ReportCurrencyAmount			is a FinanceCurrencyAmount

		JournalType						is Numeric 1
		Volume
		VolumeRate
        UnitsAmount
		ApprovalClosePeriod				is a GeneralLedgerClosePeriod

	Context Fields
		CurrencyTable
		GeneralLedgerSystemCode

	Transient Fields

	Local Fields
		LocalClosePeriod				is a GeneralLedgerClosePeriod
		LocalJournalAmountUpdated		is Boolean
		LocalDate						is Date
		LocalInstPostingDate			is a PostingDate
		LocalInstTransactionDate		is an ExchangeDate
		LocalCurrencyAmount				is a CurrencyExchange
        LocalIsAToCodeBlock				is Numeric 1
		LocalMatrixApprovalCode			is like ResponsibilityMatrixApproval
		LocalResponsibilityMatrix		is like ResponsibilityMatrix
		LocalInstLedger					is like Ledger

	Derived Fields
		DerivedTransactionAmount		is a DerivedField
			type is like InternationalAmount
			restricted
			return (Volume * VolumeRate)
		DerivedPostingDate				is a DerivedField
			type is Date
			restricted
			if (!RecurringJournalControl.PostingDay entered)
				LocalDate				=  GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			else
				LocalDate				= (GeneralLedgerClosePeriodRel.DerivedBeginGregorian + (RecurringJournalControl.PostingDay - 1))
				if (LocalDate			> GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
					LocalDate			= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			return LocalDate
		DerivedTransactionDate			is a DerivedField
			type is Date
			restricted
			if (!RecurringJournalControl.TransactionDay entered)
				LocalDate				= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			else
				LocalDate				= (GeneralLedgerClosePeriodRel.DerivedBeginGregorian + (RecurringJournalControl.TransactionDay - 1))			
				if (LocalDate			> GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
					LocalDate			= GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
			return LocalDate
		RecurringJournalDescription		is a DerivedField
			type is like Description
			restricted
			return RecurringJournalControl.Description

		ApprovalTitle		is a StringField
			type is Alpha 150
			restricted
			"MatrixApproval:"
			FinanceEnterpriseGroup.AccountingEntityLabel
			"-"
			RecurringJournalControl.AccountingEntity
			":RecurringJournal-"
			RecurringJournalControl
			":Transaction-"
			RecurringJournalTransaction

	Conditions
		UnreleasedRecurringJournal
			restricted
			when (RecurringJournalControl.Status.Unreleased)
		SecurityGroupAllowsAccess
			when (actor.context.AccountingEntitySecurityGroup = blank
			or   (AccountingEntitySecurityGroupMemberRel exists))
		IsStatisticalAccount
			restricted
			when (FinanceCodeBlock.GeneralLedgerChartAccount.AccountType = 6
			or   (FinanceCodeBlock.GeneralLedgerChartAccount.AccountType = 7))

		ResponsibilityMatrixApprovalExists
			restricted
			when (ResponsibilityMatrixApprovalProcessorRel exists)
		ManualAllowed
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)
		PendingForApproval
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)
		Rejected
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.Rejected)
		EncumbranceOptionForUpdate
			restricted
			when (GeneralLedgerSystemCode.EncumbranceOption.Track
			or    GeneralLedgerSystemCode.EncumbranceOption.TrackAndEdit)
    	InterEntityTransaction
    		restricted
    		when (!AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)

	Sets
		ByUniqueID
			Sort Order
				UniqueID 

	Relations
		GeneralLedgerClosePeriodRel
			one-to-one relation to GeneralLedgerClosePeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration = AccountingEntity.CloseConfiguration
				related.GeneralLedgerClosePeriod		= LocalClosePeriod
		RecurringJournalTransRel
			one-to-many relation to RecurringJournalTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AccountingEntity		= AccountingEntity
				related.RecurringJournalControl = RecurringJournalControl
		RecurringJournalScheduleRel
			one-to-many relation to RecurringJournalSchedule
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl 		= RecurringJournalControl
			Instance Selection
				where (related.PeriodSelected			= true)
		RecurringJournalEncumbranceRel
			one-to-one relation to RecurringJournalEncumbrance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntity
				related.RecurringJournalControl 		= RecurringJournalControl
				related.GeneralLedgerClosePeriod 		= LocalClosePeriod
				related.RecurringJournalEncumbrance.IsAToCodeBlock	= LocalIsAToCodeBlock
				related.RecurringJournalEncumbrance.SequenceNumber	= RecurringJournalTransaction
		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntityGroup			= actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity				= AccountingEntity
#ifdef module cb			
		CashCodeByAccountRel
			one-to-many relation to CompanyCashCode
			Field Mapping uses ByCashGLAccount
				related.CashAccount.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount
			Instance Selection
				where (related.CashCode.CashManagementGroup		= FinanceEnterpriseGroup)
		CashCodeFundEditByAccountingUnitRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to RecurringJournalControl
		 		related.CashCode				= first CashCodeByAccountRel.CashCode
		 		related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= FinanceCodeBlock.AccountingUnit
		 		related.FinanceDimension1		= blank
		CashCodeFundEditByDimension1Rel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to RecurringJournalControl
		 		related.CashCode				= first CashCodeByAccountRel.CashCode
		 		related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= blank
		 		related.FinanceDimension1		= FinanceCodeBlock.FinanceDimension1
#endif
		BudgetEntityLedgerRel
			one-to-one relation to BudgetEntityLedger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.Ledger						= LocalInstLedger

		ResponsibilityMatrixApprovalRel
			one-to-many relation to ResponsibilityMatrixApproval
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ResponsibilityMatrix        		= LocalResponsibilityMatrix
				related.ResponsibilityMatrixApproval		= LocalMatrixApprovalCode
			Instance Selection
                where (related.DocumentType.GLJournalEntry
				and		related.Active)

		ResponsibilityMatrixApprovalProcessorRel
			one-to-one relation to ApprovalProcessor
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ApprovalProcessor.ApprovalType					= "CD"
				related.ApprovalProcessor.SystemCode					= RecurringJournalControl.System
				related.ApprovalProcessor.ApprovalTransactionForm		= ApprovalTransactionForm.GLJournalEntry
				related.ApprovalProcessor.TransactionHeader1			= AccountingEntity										
				related.ApprovalProcessor.TransactionHeader2			= RecurringJournalControl
				related.ApprovalProcessor.TransactionHeader3			= ApprovalClosePeriod	
				related.ApprovalProcessor.TransactionHeader4			= blank
				related.ApprovalProcessor.TransactionLine1				= blank
            	related.ApprovalProcessor.TransactionLine2            	= blank
				related.ApprovalProcessor.Transaction					= RecurringJournalTransaction

		ResponsibilityMatrixResourceRel
			one-to-many relation to ResponsibilityMatrixResource
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ResponsibilityMatrix        	= LocalResponsibilityMatrix
				related.ResponsibilityMatrixApproval	= LocalMatrixApprovalCode
			Instance Selection
				where (related.DocumentType 	 	 = ApprovalTransactionForm.GLJournalEntry
				and		related.ApprovalAmount 		<= TransactionAmount)

		ResponsibilityMatrixRel
			one-to-many relation to ResponsibilityMatrix
			Field Mapping uses ByPriorityAndDimensionCount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
                where (related.Active)

	Field Rules
		CurrencyCode
			initial value is RecurringJournalControl.Currency
			default to RecurringJournalControl.Currency
			default to AccountingEntity.FunctionalCurrency
			required
		DimensionCode
			force default to FinanceCodeBlock.DimensionCode
		GeneralLedgerEvent
			initial value is RecurringJournalControl.GeneralLedgerEvent
			default to RecurringJournalControl.GeneralLedgerEvent	
			required
		Description
			if (RecurringJournalControl.DescriptionDefault.JournalHeader)
				default to RecurringJournalControl.Description
			else
				default to last RecurringJournalTransRel.Description
		JournalType
			initial value is RecurringJournalControl.JournalType
			default to RecurringJournalControl.JournalType
		TransactionDate
			initial value is DerivedTransactionDate
			default to DerivedTransactionDate
		TransactionAmount
			initial value is DerivedTransactionAmount
			default to DerivedTransactionAmount
		FinanceCodeBlock
			required
		AutoReverse
			initial value is RecurringJournalControl.AutoReverse

	Rule Blocks
		AddJournalTotals
			invoke UpdateJournalTotals RecurringJournalControl
				if (TransactionAmount					> 0)
					invoked.PrmTotalDrAmount			= TransactionAmount
					if (AutoReverse)
						invoked.PrmAutoReverseDrAmount		= TransactionAmount
				else
					invoked.PrmTotalCrAmount			= TransactionAmount
					if (AutoReverse)
						invoked.PrmAutoReverseCrAmount		= TransactionAmount
				if (UnitsAmount > 0)
					invoked.PrmUnitsDrAmount			= UnitsAmount
					if (AutoReverse)
						invoked.PrmAutoReverseUnitsDrAmount	= UnitsAmount
				else
					invoked.PrmUnitsCrAmount			= UnitsAmount
					if (AutoReverse)
						invoked.PrmAutoReverseUnitsCrAmount	= UnitsAmount

		DeleteJournalTotals
			invoke UpdateJournalTotals RecurringJournalControl
				if (old TransactionAmount				> 0)
					invoked.PrmTotalDrAmount			-= old TransactionAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseDrAmount		-= old TransactionAmount
				else
					invoked.PrmTotalCrAmount			-= old TransactionAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseCrAmount		-= old TransactionAmount
				if (old UnitsAmount > 0)
					invoked.PrmUnitsDrAmount	-= old UnitsAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseUnitsDrAmount	-= old UnitsAmount
				else
					invoked.PrmUnitsCrAmount	-= old UnitsAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseUnitsCrAmount	-= old UnitsAmount
		
		SystemAllowedOnAccount
			if (FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (RecurringJournalControl.System within FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemForAccount.ThisAccountDoesNotAllowRecurringJournals"
																
	Actions

		CreateGLTransactionDetail is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmJournalControl			is a RecurringJournalControl
					default label is "JournalControl"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "Period"
				PrmUnprocess				is Boolean
					default label is "Unprocess"
				PrmJournalizeGroup			is like JournalizeGroup
					default label is "JournalizeGroup"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"	 

			Parameter Rules

			Local Fields
				LocalPostingDate				is Date
				LocalTransactionDate			is Date
				LocalCurrencyTable              is a CurrencyTable 

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmJournalControl)
				
			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmJournalControl

			Action Rules
				Empty Set Rules
					invoke UpdateRecurringJournal PrmJournalControl
						invoked.PrmProcessingJournal	= false

				Set Rules
					Entrance Rules
						LocalClosePeriod			= PrmClosePeriod
						LocalPostingDate			= DerivedPostingDate
						LocalTransactionDate		= DerivedTransactionDate
		 				LocalCurrencyTable				= PrmCurrencyTable

					Exit Rules
						invoke UpdateRecurringJournal PrmJournalControl
							invoked.PrmProcessingJournal	= false

				Instance Rules	
					if (TransactionAmount != blank  
					or  UnitsAmount != blank)
						invoke Create Released GLTransactionDetail
							fill in fields from this instance
								except invoked.ReportCurrencyAmount
							invoked.JournalizeGroup					= PrmJournalizeGroup
							invoked.OriginatingTransactionUniqueID	= UniqueID
							invoked.OriginatingTransactionPeriod	= PrmClosePeriod.GeneralLedgerCalendarPeriod
							invoked.PostingDate						= LocalPostingDate
							invoked.TransactionDate					= LocalTransactionDate
							invoked.BaseZoneAccountingUnit			= RecurringJournalControl.BaseZoneAccountingUnit
							invoked.BaseZoneDimension1				= RecurringJournalControl.BaseZoneDimension1
							invoked.System							= RecurringJournalControl.System
							invoked.PrimaryLedger					= RecurringJournalControl.Ledger
							if (PrmUnprocess)
								invoked.TransactionAmount			= (TransactionAmount * -1)
							else
								invoked.TransactionAmount			= TransactionAmount
						if (RecurringJournalControl.AutoZero)
							include DeleteJournalTotals
							initialize TransactionAmount
							initialize UnitsAmount
						else
							LocalClosePeriod				= PrmClosePeriod
							LocalIsAToCodeBlock				= 0
							if (RecurringJournalEncumbranceRel exists)
								invoke UpdateGLCommit RecurringJournalEncumbranceRel
									invoked.PrmUnprocess		= PrmUnprocess

 		Create is a Create Action
			valid when (UnreleasedRecurringJournal)
			Entrance Rules
				LocalClosePeriod			= AccountingEntity.CurrentPeriod
				LocalInstPostingDate		= DerivedPostingDate
				LocalInstTransactionDate	= DerivedTransactionDate
				if (AutoReverse not entered)
					AutoReverse				= RecurringJournalControl.AutoReverse
				include SystemAllowedOnAccount
			Exit Rules
				include AddJournalTotals
					

    	Update is an Update Action
			valid when (UnreleasedRecurringJournal)
			Entrance Rules
				LocalClosePeriod			= AccountingEntity.CurrentPeriod
				LocalInstPostingDate		= DerivedPostingDate
				LocalInstTransactionDate	= DerivedTransactionDate
				if (CurrencyCode changed
				or  AutoReverse changed
				or  TransactionAmount changed
				or	UnitsAmount changed)
					LocalJournalAmountUpdated			= true
					include DeleteJournalTotals
				include SystemAllowedOnAccount
			Action Rules

			Exit Rules
				if (LocalJournalAmountUpdated)
					include AddJournalTotals

		Delete is a Delete Action
			valid when (UnreleasedRecurringJournal)
		
			Entrance Rules
				include DeleteJournalTotals

 		CreateRecurringEncumbrance is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmJournalControl			is a RecurringJournalControl
					default label is "Journal Control"

			Parameter Rules

			Local Fields
				LocalCurrencyTable				is a CurrencyTable
				LocalBalanceCurrencyAmount		is a FinanceCurrencyAmount
		        LocalIsAToCodeBlock				is Numeric 1

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmJournalControl)

			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmJournalControl

			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
		    		if (CurrencyTable not in context)
		 				LocalCurrencyTable					= FinanceEnterpriseGroup.CurrencyTable					
					LocalBalanceCurrencyAmount			= ReportCurrencyAmount
					for each RecurringJournalScheduleRel
						if (!each.PeriodProcessed)
							LocalClosePeriod					= each.GeneralLedgerClosePeriod
							LocalInstTransactionDate			= DerivedTransactionDate
							initialize LocalCurrencyAmount.EnteredCurrencyAmount
					        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
							LocalCurrencyAmount.ToCurrency			= AccountingEntity.FunctionalCurrency
							LocalBalanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalCurrencyAmount.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency entered)
								if (CurrencyCode			!= AccountingEntity.AlternateCurrency)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= AccountingEntity.AlternateCurrency
									LocalBalanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyAmount.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency2 entered)
								if (CurrencyCode			!= AccountingEntity.AlternateCurrency2)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= AccountingEntity.AlternateCurrency2
									LocalBalanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyAmount.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency3 entered)
								if (CurrencyCode		!= AccountingEntity.AlternateCurrency3)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= AccountingEntity.AlternateCurrency3
									LocalBalanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceCodeBlock.Project entered)
								if (CurrencyCode		!= FinanceCodeBlock.Project.Currency)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceCodeBlock.Project.Currency
									LocalBalanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
								if (CurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyOne)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyOne
									LocalBalanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
								if (CurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyTwo)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
									LocalBalanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
								if (CurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyThree)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyThree
									LocalBalanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
								if (CurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyFour)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
									LocalBalanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		= LocalCurrencyAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
								if (CurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyFive)
							        LocalCurrencyAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
							        initialize LocalCurrencyAmount.EnteredCurrencyAmount
									LocalCurrencyAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyFive
									LocalBalanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		= LocalCurrencyAmount.OutputCurrencyAmount
		
							LocalIsAToCodeBlock					= 0
							if (RecurringJournalEncumbranceRel exists)
								invoke Update RecurringJournalEncumbranceRel
									invoked.FinanceCodeBlock				= FinanceCodeBlock
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= DimensionCode
									invoked.TransactionAmount				= TransactionAmount
									invoked.UnitsAmount						= UnitsAmount 
									invoked.ReportCurrencyAmount			= LocalBalanceCurrencyAmount
							else						
								invoke Create RecurringJournalEncumbrance
									fill in fields from this instance
									invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
									invoked.AccountingEntity				= AccountingEntity
									invoked.RecurringJournalControl			= RecurringJournalControl
									invoked.GeneralLedgerClosePeriod		= LocalClosePeriod
									invoked.FinanceCodeBlock				= FinanceCodeBlock
									invoked.RecurringJournalEncumbrance.IsAToCodeBlock	= 0
									invoked.RecurringJournalEncumbrance.SequenceNumber	= RecurringJournalTransaction
									invoked.CurrencyCode					= CurrencyCode
									invoked.PostingDate						= DerivedPostingDate
									invoked.DimensionCode					= DimensionCode
									invoked.TransactionAmount				= TransactionAmount
									invoked.UnitsAmount						= UnitsAmount
									invoked.ReportCurrencyAmount			= LocalBalanceCurrencyAmount

#ifdef module cb			
		UpdateCashCodeFundEdit is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (first CashCodeByAccountRel.CashCode.EditAvailableFunds)
					if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						invoke Update CashCodeFundEditByAccountingUnitRel
							invoked.EditAmount += (TransactionAmount *-1)
					else
						invoke Update CashCodeFundEditByDimension1Rel
							invoked.EditAmount += (TransactionAmount *-1)
				if (first CashCodeByAccountRel.CashCode.RestrictedFunds)
					if (FinanceEnterpriseGroup.FundDimension.AccountingUnit
					and CashCodeFundEditByAccountingUnitRel !exists)
						invoke Update CashCodeFundEditByAccountingUnitRel
					else
						if (FinanceEnterpriseGroup.FundDimension.Dimension1
						and CashCodeFundEditByDimension1Rel !exists)
							invoke Update CashCodeFundEditByDimension1Rel
#endif		      

		SubmitForApproval is an Instance Action
			restricted
			Parameters
				PrmApprovalPeriod			is a GeneralLedgerClosePeriod
			Action Rules
				ApprovalClosePeriod = PrmApprovalPeriod
				invoke SubmitForMatrixApproval first ResponsibilityMatrixRel
					invoked.PrmFinanceEnterpriseGroup 		= FinanceEnterpriseGroup
					invoked.PrmApprovalType					= "CD"
					invoked.PrmSystemCode					= RecurringJournalControl.System
					invoked.PrmApprovalTransactionForm		= ApprovalTransactionForm.GLJournalEntry
					invoked.PrmTransactionHeader1			= AccountingEntity
					invoked.PrmTransactionHeader2			= RecurringJournalControl
					invoked.PrmTransactionHeader3			= PrmApprovalPeriod
					invoked.PrmTransactionHeader4			= blank
					invoked.PrmTransactionLine1				= blank
					invoked.PrmTransactionLine2				= blank
					invoked.PrmTransaction					= RecurringJournalTransaction
					invoked.PrmFinanceCodeBlock				= FinanceCodeBlock
					invoked.PrmApprovalTitle				= ApprovalTitle
					invoked.PrmApprovalAmount				= TransactionAmount

		ManualApprove is an Instance Action
			valid when (ManualAllowed)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Entrance Rules
				constraint (!create stamp.actor	= actor)
					"PersonCreatingTheTransactionCannotBeTheApprover"
				constraint (!update stamp.actor	= actor)
					"PersonUpdatingTheTransactionCannotBeTheApprover"
				
			Action Rules
				invoke ManualApprove ResponsibilityMatrixApprovalProcessorRel

		ManualReject is an Instance Action
			valid when (ManualAllowed)
			Action Rules
				invoke ManualReject ResponsibilityMatrixApprovalProcessorRel

		RecalculateBTGT is a Set Action
			restricted
			Parameters
				PrmSkipAttachRule			is a SkipAttachRule
					default label is untranslatable:"SkipAttachRule"
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmJournalControl			is a RecurringJournalControl
					default label is "JournalControl"
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    RecurringJournalControl		= PrmJournalControl)
			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmJournalControl
			Action Rules
				Instance Rules
					LocalInstLedger				= FinanceCodeBlock.Ledger
					if (BudgetEntityLedgerRel exists
					and EncumbranceOptionForUpdate)
						invoke UpdateGroupTotals BudgetTemplate
							invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup					= RecurringJournalControl.UniqueID
							invoked.PrmTransactionCodeBlock				= FinanceCodeBlock
							invoked.PrmEndDate							= DerivedPostingDate	
							invoked.PrmReportAmounts.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.PrmReportAmounts.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.PrmReportAmounts.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.PrmReportAmounts.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.PrmReportAmounts.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.PrmReportAmounts.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							if (!InterEntityTransaction)
								invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							else
								invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
							invoked.PrmAllowRebuild						= true

