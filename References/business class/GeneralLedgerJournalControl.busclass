




















GeneralLedgerJournalControl is a BusinessClass
	default label is "GlobalLedgerJournalControl"
    owned by GeneralLedger
    prefix is GLGLC

    Ontology
    	symbolic key is GeneralLedgerJournalControl

    Patterns
        implements BODId 

    Context Fields
#ifdef module integration
		FSMInboundBODTracker
#endif

    Persistent Fields
    	UniqueJournalID
        Status            				is Numeric 1
            States
                Unreleased			value is 0
                Released			value is 1
                PendingApproval		value is 2
                CopyInProcess		value is 3
                PostInProcess		value is 4
                Posted              value is 5
                Deleted				value is 6
                DeleteInProcess		value is 7
    	System							is a GeneralLedgerSystemCode
        TransactionDate
        ReleaseOperator   				is Actor
        PostingOperator   				is Actor
        Released	      				is AlphaUpper 1					
            States
                Yes             	value is "Y"
                No              	value is "N"
                SystemGenerated 	value is "S"
        	disable Auditing
        PostingDate
        Description
        GeneralLedgerEvent
        	default label is "GlobalLedgerEvent"
        ActPostDate       				is Date
        	disable Auditing
        BaseZoneAccountingUnit			is a  AccountingUnit
        BaseZoneDimension1				is a FinanceDimension1
        FunctionalDebitAmount			is an InternationalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        	disable Auditing
        FunctionalCreditAmount			is an InternationalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        	disable Auditing
        AlternateDebitAmount			is an InternationalAmount
			precision is AccountingEntity.AlternateCurrency.NumberOfDecimals
        	disable Auditing
        AlternateCreditAmount			is an InternationalAmount
			precision is AccountingEntity.AlternateCurrency.NumberOfDecimals
        	disable Auditing
        Alternate2DebitAmount			is an InternationalAmount
			precision is AccountingEntity.AlternateCurrency2.NumberOfDecimals
        	disable Auditing
        Alternate2CreditAmount			is an InternationalAmount
			precision is AccountingEntity.AlternateCurrency2.NumberOfDecimals
        	disable Auditing
        Alternate3DebitAmount			is an InternationalAmount
			precision is AccountingEntity.AlternateCurrency3.NumberOfDecimals
        	disable Auditing
        Alternate3CreditAmount			is an InternationalAmount        
			precision is AccountingEntity.AlternateCurrency3.NumberOfDecimals
        	disable Auditing
        AutoReverseDebitAmount			is an InternationalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        	disable Auditing
        AutoReverseCreditAmount			is an InternationalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        	disable Auditing
        UnitsDebits						is an UnitsAmount
        	disable Auditing
		UnitsCredits					is an UnitsAmount
        	disable Auditing
        AutoReverseUnitsDebits			is an UnitsAmount
        	disable Auditing
		AutoReverseUnitsCredits			is an UnitsAmount		
        	disable Auditing
        Rpt1DebitAmount					is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
        	disable Auditing
        Rpt1CreditAmount				is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
        	disable Auditing
        Rpt2DebitAmount					is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
        	disable Auditing
        Rpt2CreditAmount				is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
        	disable Auditing
        Rpt3DebitAmount					is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
        	disable Auditing
        Rpt3CreditAmount				is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
        	disable Auditing
        Rpt4DebitAmount					is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
        	disable Auditing
        Rpt4CreditAmount				is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
        	disable Auditing
        Rpt5DebitAmount					is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
        	disable Auditing
        Rpt5CreditAmount				is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
        	disable Auditing
		JournalType						is Numeric 1
            States
                Normal					value is 0
                InterEntity				value is 1
                AutoReverseNormal		value is 2
                AutoReverseInterEntity	value is 3
                ManualEncumbrance		value is 4
        AutoReverse			        	is Boolean
		Ledger
		GeneralLedgerCalendarPeriod
			default label is "GlobalLedgerCalendarPeriod"

        ReleaseDate       				is Date
        AutoReverseDate       			is Date
        HoldCode						is a GeneralLedgerHoldCode
		RelatedJournalTransaction		is BusinessObjectReference
        	disable Auditing
		RelatedRJSchedule 				is BusinessObjectReference
			disable Auditing
        Reference
        Currency
        AllowUnrelease		        	is Boolean
        DefaultAutoReverse	        	is Boolean
		JournalCurrencyRate				is a FinanceCurrencyAmount
		OriginatingInterfaceRun			is a GLTransactionInterfaceResult
			delete ignored								
        IsAutoReversed		        	is Boolean
		PrimaryLedger					is a Ledger
    	GainLossRunSequence				is like RunSequence
		JournalPostingResult
			delete ignored
		JournalizeGroupResult
			delete ignored
#ifdef module sharedfinance
		ApprovalCode
		ApprovalLevel					is Numeric 8
		ReassignToApprovalLevel			is an ApprovalCodeResource
		Approver						is a FinanceResource
		ApproverTeam					is a FinanceTeamField
#endif
#ifndef module sharedfinance
		ApprovalCode					is AlphaUpper 30
		ApprovalLevel					is Numeric 8
		ReassignToApprovalLevel			is Numeric 8
		Approver						is Numeric 13
		ApproverTeam					is a GlonlyFinanceTeamField
#endif
		PendingBudgetEdit				is Boolean
		GainLossReportingBasis			is like ReportingBasis
		CurrencyTable

		IsAIntercompanyBillingJournal	is Boolean
			default label is "IsAnIntercompanyBillingJournal"
		InterEntityNettingJournal		is Boolean	
		EligibleForElimination			is Boolean
		EliminationStatus				is Numeric 1
			States
                AvailableForElimination			value is 0
                EliminationProcessed			value is 1
		ReleaseErrorMessage				is Alpha 150
		ContainsESTransaction			is Boolean
		
	Transient Fields
		ApprovalProcessRequiredThroughNetting 	is Boolean
		QuickPostForNetting						is Boolean 
		NewJournalControlType					is Numeric 1
			derive value from DerivedJournalType		
            States
                Normal							value is 0
                InterEntity						value is 1
		NewManualJournalControlType				is Numeric 1
			derive value from DerivedJournalType		
            States
                ManualEncumbrance				value is 4
		
		TransientFromGainLoss					is Boolean
		TransientUpdateStamp					is TimeStamp
			derive value from update stamp
			
	Local Fields
		LocalReleaseErrorMsg			is Alpha 150
		LocalEntityCount				is Numeric 2					
		LocalElimToEntity				is like AccountingEntity		
		LocalUnsignedAmount				is Unsigned Decimal 19.3
		LocalUniqueJournalID			is a UniqueJournalID
		LocalPostingDate				is Date
		LocalEndDate					is a GeneralLedgerCalendarPeriod
		LocalCurrencyCode				is a Currency
		LocalEntityTopNode				is AlphaUpper 12
		LocalLedgerTopNode				is AlphaUpper 20
		LocalReportingBasis				is a ReportingBasis
		LocalYear						is Year
		LocalSystemAccount				is a SystemAccount
        LocalTransactionDate			is an ExchangeDate
		LocalFromCurrencyCode			is a FromCurrency
        LocalCurrencyAmount				is a CurrencyAmount 
		LocalExchangeAmount				is a CurrencyExchange
		LocalGeneralLedgerTransaction	is like GeneralLedgerTransaction
		LocalFunctionalRate   		 	is a CurrencyExchangeRate
		LocalAlternateRate    			is a CurrencyExchangeRate
		LocalAlternate2Rate    			is a CurrencyExchangeRate
		LocalAlternate3Rate    			is a CurrencyExchangeRate
		LocalReport1Rate    			is a CurrencyExchangeRate
		LocalReport2Rate		    	is a CurrencyExchangeRate
		LocalReport3Rate    			is a CurrencyExchangeRate
		LocalReport4Rate    			is a CurrencyExchangeRate
		LocalReport5Rate    			is a CurrencyExchangeRate
		BypassStructureRelationEdit
		BypassCubeRefresh
		LocalBudgetEditGroup			is UniqueID
		LocalInstBudgetEditDetail		is a BudgetEditDetail
		LocalCloseYear					is like GeneralLedgerCloseYear
		LocalClosePeriod				is a GeneralLedgerClosePeriod
		LocalJournalControl 			is like GeneralLedgerJournalControl
		LocalRelatedJournalTransaction	is BusinessObjectReference
		UseInputValue					is Boolean
		AsyncId							is a AsyncActionRequest
		LocalTitle 						is Alpha size 255
		LocalApprovalLevel			   	is Numeric 8
		LocalApproverList			   	is Alpha 250
		LocalFirstApproverAssigned	  	is Boolean
#ifdef module sharedfinance
		LocalApprover				   	is a FinanceResource  
		LocalApproverTeam			   	is a FinanceTeamField  
#endif
#ifndef module sharedfinance
		LocalApprover				   	is Numeric 13
		LocalApproverTeam			   	is AlphaUpper 20		
#endif
		LocalBaseAccountingUnit			is like AccountingUnit
		LocalBaseDimension1				is like FinanceDimension1
		LocalQPostJournalInterEntity	is Boolean
		LocalCount						is Numeric 2
		LocalFinanceCodeBlock			is a TransactionCodeBlock
		LocalGLZoneBalance				is a GLZoneBalance
		LocalBaseZoneAccount			is like GeneralLedgerChartAccount
		LocalZoneAccount				is like GeneralLedgerChartAccount
		ActionCode
		Service							is Alpha size 30
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		LocalRunGroup					is AlphaUpper 30
		LocalEntity						is like AccountingEntity
		LocalAccountingUnit				is like AccountingUnit
		LocalOutOfBalanceMessage		is Alpha 150
		LocalTotalLines 				is Numeric 10
    	LocalGeneralLedgerSystemCode	is like GeneralLedgerSystemCode
		LocalSequenceNum6				is AlphaUpper 6
		LocalSequenceNum12				is AlphaUpper 12
		LocalTempJournalReference		is AlphaUpper 50
    		Text Variables
				YearYYYY		  value is PostingDate year
				YearYY			  value is DerivedYear[3:4]
				MonthMM			  value is DerivedPaddedMonth
				999999999999	  value is LocalSequenceNum12
				000000000009	  value is DerivedZeroPaddedSequenceNum12
				999999			  value is LocalSequenceNum6
				000009			  value is DerivedZeroPaddedSequenceNum6
				Ledger			  value is Ledger
				System			  value is System		
		LocalFinanceEnterpriseGroup 	   is like FinanceEnterpriseGroup						
		LocalReportingBasisYearEndJournal  is Numeric 1								
			States
				BalanceSheetOpening	value is 1
				ProfitAndLoss		value is 2
				BalanceSheetClosing	value is 3			
		LocalTempYearEndJournalReference	is AlphaUpper 50								
    		Text Variables
				YearYYYY		  value is LocalYear
				YearYY			  value is DerivedYearEndYear[3:4]
				MonthMM			  value is DerivedPaddedMonth
				999999999999	  value is LocalSequenceNum12
				000000000009	  value is DerivedZeroPaddedSequenceNum12
				999999			  value is LocalSequenceNum6
				000009			  value is DerivedZeroPaddedSequenceNum6
				Ledger			  value is LocalYearEndLedger
				System			  value is LocalYearEndSystem		
		LocalYearEndSystem					is a GeneralLedgerSystemCode					
		LocalYearEndLedger					is a Ledger
#ifdef module idm
		IDMAttributes									
#endif
#ifdef module closemgmt
		LocalCloseManagementGroup			is like CloseManagementGroup
		LocalCloseMgmtPeriod				is like ClosePeriod
		LocalClosePeriodTask				is like ClosePeriodTask
#endif
		LocalFunctionalDebitAmount			is Decimal 19.5
		LocalFunctionalCreditAmount			is Decimal 19.5
		LocalAlternateDebitAmount			is Decimal 19.5
		LocalAlternateCreditAmount			is Decimal 19.5
		LocalAlternate2DebitAmount			is Decimal 19.5
		LocalAlternate2CreditAmount			is Decimal 19.5
		LocalAlternate3DebitAmount			is Decimal 19.5
		LocalAlternate3CreditAmount			is Decimal 19.5
		LocalRpt1DebitAmount				is Decimal 19.5
		LocalRpt1CreditAmount				is Decimal 19.5
		LocalRpt2DebitAmount				is Decimal 19.5
		LocalRpt2CreditAmount				is Decimal 19.5
		LocalRpt3DebitAmount				is Decimal 19.5
		LocalRpt3CreditAmount				is Decimal 19.5
		LocalRpt4DebitAmount				is Decimal 19.5
		LocalRpt4CreditAmount				is Decimal 19.5
		LocalRpt5DebitAmount				is Decimal 19.5
		LocalRpt5CreditAmount				is Decimal 19.5
		SetTotalAmountsBack					is Boolean
		LocalContinue						is Boolean		
		LocalCashOffsetAccount				is like GeneralLedgerChartAccount	
		LocalCalculateGLFinanceStructure	is a CalculateGLFinanceStructure	
		LocalAnswer 						is Alpha size 1						
		NegativeFinanceCurrencyAmount											
		LocalBoolean			 			is Boolean							
		LocalRJControl						is like RecurringJournalControl

		NativeLPLBODTrigger					is Boolean
		LocalBatchCounter					is Numeric 9
		LocalBatchSequence					is Numeric 9
		LocalLastBatch						is Boolean
		LocalBODID							is Alpha size 200
		LocalGLTransactionCount				is Numeric 9
		LocalCurrentGLTransactionCount		is Numeric 9
		LocalSSJEGLTransactionBatchLineXML	is XMLDocument
		LocalSSJETotalBatchLineXML			is XMLDocument
#ifdef module integration
		NewBODTracker  						is a FSMInboundBODTracker view
#endif
		LocalCommitGLTransaction			is Numeric 9
		LocalFSMInboundBODTracker			is Numeric 15
		LocalSourceSystemJournalEntryGLTransactionXML	is XMLDocument
		LocalMainTemplate					is Alpha size 250
		LocalRejectTitle					is Alpha size 50
		LocalMassBODTrigger					is Boolean
		LocalSSJEBODTitle					is Alpha up to 255
		Error            					is Boolean
		LocalConfigurationParameter			is Alpha size up to 200	
	    ErrorMessage    					is Alpha 300
		IDMConnected						is Boolean
#ifdef module intercobilling  
		LocalICBillToCompany				is like Company 
		LocalICBillFromCompany				is like Company 
		LocalICBillAmountMismatch 			is Boolean
#endif
		LocalCounter						is Numeric 8



	Action Exit Rules

	Rule Blocks

		InitiateJournalFlow


			trigger "JournalApproval" PA service
				resume on error
				title is "<JournalApprovalTitle>"
				Variables
					include persistent fields from GeneralLedgerJournalControl
				URLs
					"<linkback(webapp is JournalApprover navigation is JournalLinkbackNav text is \"ViewJournal\")>"


		SendRejectNotificationToUser
			send notification
				to	create stamp.actor
				description is	"<JournalRejectedMessage>"
				priority is very high

				linkback(webapp is JournalApprover navigation is JournalLinkbackNav text is "GlobalLedgerJournalControlRejected")				
												
		SendManualApproveNotificationToUser
			send notification
				to	create stamp.actor
				description is	"<JournalApprovedMessage>"
				priority is very high

				linkback(webapp is JournalApprover navigation is JournalLinkbackNav text is "GloballLedgerJournalControlApproved")				

		SetTotalAmounts		
			if (!SetTotalAmountsBack)
				LocalFunctionalDebitAmount	= FunctionalDebitAmount
				LocalFunctionalCreditAmount	= FunctionalCreditAmount
				LocalAlternateDebitAmount	= AlternateDebitAmount
				LocalAlternateCreditAmount	= AlternateCreditAmount
				LocalAlternate2DebitAmount	= Alternate2DebitAmount
				LocalAlternate2CreditAmount	= Alternate2CreditAmount
				LocalAlternate3DebitAmount	= Alternate3DebitAmount
				LocalAlternate3CreditAmount	= Alternate3CreditAmount
				LocalRpt1DebitAmount		= Rpt1DebitAmount
				LocalRpt1CreditAmount		= Rpt1CreditAmount
				LocalRpt2DebitAmount		= Rpt2DebitAmount
				LocalRpt2CreditAmount		= Rpt2CreditAmount
				LocalRpt3DebitAmount		= Rpt3DebitAmount
				LocalRpt3CreditAmount		= Rpt3CreditAmount
				LocalRpt4DebitAmount		= Rpt4DebitAmount
				LocalRpt4CreditAmount		= Rpt4CreditAmount
				LocalRpt5DebitAmount		= Rpt5DebitAmount
				LocalRpt5CreditAmount		= Rpt5CreditAmount
			else
				FunctionalDebitAmount	= LocalFunctionalDebitAmount
				FunctionalCreditAmount	= LocalFunctionalCreditAmount
				AlternateDebitAmount	= LocalAlternateDebitAmount
				AlternateCreditAmount	= LocalAlternateCreditAmount
				Alternate2DebitAmount	= LocalAlternate2DebitAmount
				Alternate2CreditAmount	= LocalAlternate2CreditAmount
				Alternate3DebitAmount	= LocalAlternate3DebitAmount
				Alternate3CreditAmount	= LocalAlternate3CreditAmount
				Rpt1DebitAmount			= LocalRpt1DebitAmount
				Rpt1CreditAmount		= LocalRpt1CreditAmount
				Rpt2DebitAmount			= LocalRpt2DebitAmount
				Rpt2CreditAmount		= LocalRpt2CreditAmount
				Rpt3DebitAmount			= LocalRpt3DebitAmount
				Rpt3CreditAmount		= LocalRpt3CreditAmount
				Rpt4DebitAmount			= LocalRpt4DebitAmount
				Rpt4CreditAmount		= LocalRpt4CreditAmount
				Rpt5DebitAmount			= LocalRpt5DebitAmount
				Rpt5CreditAmount		= LocalRpt5CreditAmount
				initialize SetTotalAmountsBack

#ifdef module sharedfinance
		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true

		GetNextEscalationApprovalLevel
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam

		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first ApprovalCodeResourceRel.ApprovalLevel
				LocalApprover		= first ApprovalCodeResourceRel.Approver
				LocalApproverTeam	= first ApprovalCodeResourceRel.ApprovalTeam
			else
				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
					LocalApprover		= first LocalApprovalCodeLevelRel.Approver
					LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
				else
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam
#endif					

		InitializePrmFields
			initialize PrmFunctionalDrAmount
			initialize PrmAlternateDrAmount
			initialize PrmAlternateDrAmount2
			initialize PrmAlternateDrAmount3			
			initialize PrmAutoReverseDrAmount
			initialize PrmRpt1DrAmount
			initialize PrmRpt2DrAmount
			initialize PrmRpt3DrAmount
			initialize PrmRpt4DrAmount
			initialize PrmRpt5DrAmount
			initialize PrmFunctionalCrAmount
			initialize PrmAlternateCrAmount
			initialize PrmAlternateCrAmount2
			initialize PrmAlternateCrAmount3
			initialize PrmAutoReverseCrAmount
			initialize PrmRpt1CrAmount
			initialize PrmRpt2CrAmount
			initialize PrmRpt3CrAmount
			initialize PrmRpt4CrAmount
			initialize PrmRpt5CrAmount
			initialize PrmUnitsDrAmount
			initialize PrmUnitsCrAmount
			initialize PrmAutoReverseUnitsDrAmount
			initialize PrmAutoReverseUnitsCrAmount

		UpdateTotals
        	FunctionalDebitAmount		+= PrmFunctionalDrAmount
        	AlternateDebitAmount		+= PrmAlternateDrAmount
        	Alternate2DebitAmount		+= PrmAlternateDrAmount2
        	Alternate3DebitAmount		+= PrmAlternateDrAmount3
        	AutoReverseDebitAmount		+= PrmAutoReverseDrAmount
	        Rpt1DebitAmount				+= PrmRpt1DrAmount
	        Rpt2DebitAmount				+= PrmRpt2DrAmount
	        Rpt3DebitAmount				+= PrmRpt3DrAmount
	        Rpt4DebitAmount				+= PrmRpt4DrAmount
	        Rpt5DebitAmount				+= PrmRpt5DrAmount
			FunctionalCreditAmount		+= PrmFunctionalCrAmount
			AlternateCreditAmount		+= PrmAlternateCrAmount
			Alternate2CreditAmount		+= PrmAlternateCrAmount2
			Alternate3CreditAmount		+= PrmAlternateCrAmount3
			AutoReverseCreditAmount		+= PrmAutoReverseCrAmount
    		Rpt1CreditAmount			+= PrmRpt1CrAmount
    		Rpt2CreditAmount			+= PrmRpt2CrAmount
    		Rpt3CreditAmount			+= PrmRpt3CrAmount
    		Rpt4CreditAmount			+= PrmRpt4CrAmount
    		Rpt5CreditAmount			+= PrmRpt5CrAmount
    		UnitsDebits					+= PrmUnitsDrAmount
    		UnitsCredits			    += PrmUnitsCrAmount
    		AutoReverseUnitsDebits      += PrmAutoReverseUnitsDrAmount
    		AutoReverseUnitsCredits     += PrmAutoReverseUnitsCrAmount
    		if (!GainLossRunSequence entered)
				if (AutoReverseDebitAmount entered
				or  AutoReverseCreditAmount entered
				or  AutoReverseUnitsDebits entered
				or  AutoReverseUnitsCredits entered)
					AutoReverse				= true
				else
					AutoReverse				= false
					initialize AutoReverseDate
			include InitializePrmFields

		CurrencyRateCalculation
			if (Currency	changed
			or 	TransactionDate changed
			or  CurrencyTable changed)
				initialize JournalCurrencyRate
			LocalFromCurrencyCode			= Currency
			LocalTransactionDate			= TransactionDate
	        LocalCurrencyAmount				= 1000
	        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate
	        initialize LocalExchangeAmount.EnteredCurrencyAmount
			LocalExchangeAmount.ToCurrency			= AccountingEntity.FunctionalCurrency
			LocalFunctionalRate						= LocalExchangeAmount.OutputCurrencyRate
			if (AccountingEntity.AlternateCurrency entered)
				if (LocalFromCurrencyCode		!= AccountingEntity.AlternateCurrency)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= AccountingEntity.AlternateCurrency
					LocalAlternateRate						= LocalExchangeAmount.OutputCurrencyRate
			if (AccountingEntity.AlternateCurrency2 entered)
				if (LocalFromCurrencyCode		!= AccountingEntity.AlternateCurrency2)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= AccountingEntity.AlternateCurrency2
					LocalAlternate2Rate						= LocalExchangeAmount.OutputCurrencyRate
			if (AccountingEntity.AlternateCurrency3 entered)
				if (LocalFromCurrencyCode		!= AccountingEntity.AlternateCurrency3)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= AccountingEntity.AlternateCurrency3
					LocalAlternate3Rate						= LocalExchangeAmount.OutputCurrencyRate					
			if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
				if (LocalFromCurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyOne)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyOne
					LocalReport1Rate						= LocalExchangeAmount.EnteredCurrencyRate
			if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				if (LocalFromCurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyTwo)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalReport2Rate						= LocalExchangeAmount.EnteredCurrencyRate
			if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
				if (LocalFromCurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyThree)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyThree
					LocalReport3Rate						= LocalExchangeAmount.EnteredCurrencyRate
			if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
				if (LocalFromCurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyFour)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyFour
					LocalReport4Rate						= LocalExchangeAmount.EnteredCurrencyRate
			if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
				if (LocalFromCurrencyCode		!= FinanceEnterpriseGroup.ReportCurrencyFive)
			        LocalExchangeAmount.EnteredCurrencyRate	= JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate
			        initialize LocalExchangeAmount.EnteredCurrencyAmount
					LocalExchangeAmount.ToCurrency			= FinanceEnterpriseGroup.ReportCurrencyFive
					LocalReport5Rate						= LocalExchangeAmount.EnteredCurrencyRate

			if (JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate changed
			or !JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate entered)
				JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate	= LocalFunctionalRate
			if (JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate changed
			or !JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate entered)
				JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate		= LocalAlternateRate
			if (JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate changed
			or !JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate entered)
				JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate	= LocalAlternate2Rate
			if (JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate changed
			or !JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate entered)
				JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate	= LocalAlternate3Rate
			if (JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate changed
			or !JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate entered)
				JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate		= LocalReport1Rate
			if (JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate changed
			or !JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate entered)
				JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate		= LocalReport2Rate
			if (JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate changed
			or !JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate entered)
				JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate		= LocalReport3Rate
			if (JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate changed
			or !JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate entered)
				JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate		= LocalReport4Rate
			if (JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate changed
			or !JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate entered)
				JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate		= LocalReport5Rate

			initialize LocalCurrencyAmount
			initialize JournalCurrencyRate.FunctionalAmount.EnteredCurrencyAmount
			initialize JournalCurrencyRate.AlternateAmount.EnteredCurrencyAmount
			initialize JournalCurrencyRate.AlternateAmount2.EnteredCurrencyAmount
			initialize JournalCurrencyRate.AlternateAmount3.EnteredCurrencyAmount
			initialize JournalCurrencyRate.ReportAmount1.EnteredCurrencyAmount
			initialize JournalCurrencyRate.ReportAmount2.EnteredCurrencyAmount
			initialize JournalCurrencyRate.ReportAmount3.EnteredCurrencyAmount
			initialize JournalCurrencyRate.ReportAmount4.EnteredCurrencyAmount
			initialize JournalCurrencyRate.ReportAmount5.EnteredCurrencyAmount

		UpdateGLZoneBalance
			initialize LocalTransactionAmount
     		initialize LocalFunctionalAmount
  			initialize LocalAlternateAmount
			initialize LocalAlternateAmount2
			initialize LocalAlternateAmount3
			initialize LocalProjectAmount
			initialize LocalReportAmount1
			initialize LocalReportAmount2
			initialize LocalReportAmount3
			initialize LocalReportAmount4
			initialize LocalReportAmount5
			initialize LocalUnitsAmount

			if (each.TransactionAmount	< 0
			or  each.FunctionalAmount	< 0
			or  each.AlternateAmount	< 0
			or  each.AlternateAmount2	< 0
			or  each.AlternateAmount3	< 0
			or  each.ProjectAmount		< 0
			or  each.ReportAmount1		< 0
			or  each.ReportAmount2		< 0
			or  each.ReportAmount3		< 0
			or  each.ReportAmount4		< 0
			or  each.ReportAmount5		< 0)
				LocalBaseZoneAccount	= InterZonePayablesAccount
				LocalZoneAccount		= InterZoneReceivablesAccount
			else
				LocalBaseZoneAccount	= InterZoneReceivablesAccount
				LocalZoneAccount		= InterZonePayablesAccount

			LocalGLZoneBalance.Ledger						= Ledger
			LocalGLZoneBalance.System						= System
			LocalGLZoneBalance.Currency						= Currency
			LocalGLZoneBalance.EntityYearPeriod				= GeneralLedgerCalendarPeriod
			LocalGLZoneBalance.BaseZoneAccountingUnit		= BaseZoneAccountingUnit
			LocalGLZoneBalance.BaseZoneFinanceDimension		= BaseZoneDimension1
			if (FinanceEnterpriseGroup.FinanceDimension1Required
			and !BaseZoneDimension1 entered)
				LocalGLZoneBalance.BaseZoneFinanceDimension		= each.GeneralLedgerZoneTotal.ZoneFinanceDimension
			LocalGLZoneBalance.ZoneAccountingUnit			= each.GeneralLedgerZoneTotal.ZoneAccountingUnit
			LocalGLZoneBalance.ZoneFinanceDimension			= each.GeneralLedgerZoneTotal.ZoneFinanceDimension
			LocalGLZoneBalance.BaseZoneAccount				= LocalBaseZoneAccount
			LocalGLZoneBalance.ZoneAccount					= LocalZoneAccount

			if (FinanceEnterpriseGroup.AccountingUnitRequired
			and !LocalGLZoneBalance.BaseZoneAccountingUnit entered)
				LocalGLZoneBalance.BaseZoneAccountingUnit		= each.GeneralLedgerZoneTotal.ZoneAccountingUnit

			if ((AccountingEntity.AccountingUnitZoneBalancing
			and  LocalGLZoneBalance.BaseZoneAccountingUnit = GeneralLedgerJournalControl.DefaultZoneAccountingUnitRel.ZoneAccountingUnit)
			or 	(FinanceEnterpriseGroup.Dimension1ZoneBalancing
			and  LocalGLZoneBalance.BaseZoneFinanceDimension = GeneralLedgerJournalControl.DefaultZoneFinanceDimension1Rel.ZoneDimension))
				LocalTransactionAmount	= each.TransactionAmount
				LocalFunctionalAmount	= each.FunctionalAmount
				LocalAlternateAmount	= each.AlternateAmount
				LocalAlternateAmount2	= each.AlternateAmount2
				LocalAlternateAmount3	= each.AlternateAmount3
				LocalProjectAmount		= each.ProjectAmount
				LocalReportAmount1		= each.ReportAmount1
				LocalReportAmount2		= each.ReportAmount2
				LocalReportAmount3		= each.ReportAmount3
				LocalReportAmount4		= each.ReportAmount4
				LocalReportAmount5		= each.ReportAmount5
				LocalUnitsAmount		= each.UnitsAmount
			else
				LocalTransactionAmount	= (each.TransactionAmount * -1)
				LocalFunctionalAmount	= (each.FunctionalAmount * -1)
				LocalAlternateAmount	= (each.AlternateAmount * -1)
				LocalAlternateAmount2	= (each.AlternateAmount2 * -1)
				LocalAlternateAmount3	= (each.AlternateAmount3 * -1)
				LocalProjectAmount		= (each.ProjectAmount * -1)
				LocalReportAmount1		= (each.ReportAmount1 * -1)
				LocalReportAmount2		= (each.ReportAmount2 * -1)
				LocalReportAmount3		= (each.ReportAmount3 * -1)
				LocalReportAmount4		= (each.ReportAmount4 * -1)
				LocalReportAmount5		= (each.ReportAmount5 * -1)
				LocalUnitsAmount		= (each.UnitsAmount * -1)

			invoke Update LocalGLZoneBalance
				invoked.BaseTransactionAmount	= LocalTransactionAmount
				invoked.BaseFunctionalAmount	= LocalFunctionalAmount
				invoked.BaseAlternateAmount		= LocalAlternateAmount
				invoked.BaseAlternateAmount2	= LocalAlternateAmount2
				invoked.BaseAlternateAmount3	= LocalAlternateAmount3
				invoked.BaseProjectAmount		= LocalProjectAmount
				invoked.BaseReportAmount1		= LocalReportAmount1
				invoked.BaseReportAmount2		= LocalReportAmount2
				invoked.BaseReportAmount3		= LocalReportAmount3
				invoked.BaseReportAmount4		= LocalReportAmount4
				invoked.BaseReportAmount5		= LocalReportAmount5
				invoked.BaseUnitsAmount			= LocalUnitsAmount
				invoked.ZoneTransactionAmount	= (LocalTransactionAmount * -1)
				invoked.ZoneFunctionalAmount	= (LocalFunctionalAmount * -1)
				invoked.ZoneAlternateAmount		= (LocalAlternateAmount * -1)
				invoked.ZoneAlternateAmount2	= (LocalAlternateAmount2 * -1)
				invoked.ZoneAlternateAmount3	= (LocalAlternateAmount3 * -1)
				invoked.ZoneProjectAmount		= (LocalProjectAmount * -1)
				invoked.ZoneReportAmount1		= (LocalReportAmount1 * -1)
				invoked.ZoneReportAmount2		= (LocalReportAmount2 * -1)
				invoked.ZoneReportAmount3		= (LocalReportAmount3 * -1)
				invoked.ZoneReportAmount4		= (LocalReportAmount4 * -1)
				invoked.ZoneReportAmount5		= (LocalReportAmount5 * -1)
				invoked.ZoneUnitsAmount			= (LocalUnitsAmount * -1)

		CreateZoneBalancingTransactions
			BypassStructureRelationEdit = true
			if (FinanceEnterpriseGroup.UpdateInterZoneBalance)
				include UpdateGLZoneBalance

			LocalTransactionSequence += 1
			invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
				assign result to LocalTransactionView
				invoked.FinanceEnterpriseGroup					= each.FinanceEnterpriseGroup
				invoked.AccountingEntity						= each.AccountingEntity
				invoked.GeneralLedgerClosePeriod				= each.GeneralLedgerClosePeriod
				invoked.GeneralLedgerJournalControl				= each.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction				= LocalTransactionSequence
				invoked.FinanceCodeBlock.ToAccountingEntity		= each.AccountingEntity
				invoked.FinanceCodeBlock.Ledger					= each.GeneralLedgerJournalControl.Ledger
				if (each.TransactionAmount	< 0
				or  each.FunctionalAmount	< 0
				or  each.AlternateAmount	< 0
				or  each.AlternateAmount2	< 0
				or  each.AlternateAmount3	< 0
				or  each.ProjectAmount		< 0
				or  each.ReportAmount1		< 0
				or  each.ReportAmount2		< 0
				or  each.ReportAmount3		< 0
				or  each.ReportAmount4		< 0
				or  each.ReportAmount5		< 0)
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZonePayablesAccount
					constraint (InterZonePayablesAccount entered)
						"InvalidInterZonePayables<FinanceEnterpriseGroup.AccountLabel>"
				else
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZoneReceivablesAccount
					constraint (InterZoneReceivablesAccount entered)
						"InvalidInterZoneReceivables<FinanceEnterpriseGroup.AccountLabel>"
				LocalBaseAccountingUnit			= each.GeneralLedgerJournalControl.BaseZoneAccountingUnit
				LocalBaseDimension1				= each.GeneralLedgerJournalControl.BaseZoneDimension1
				if (AccountingEntity.AccountingUnitZoneBalancing
				and !LocalBaseAccountingUnit entered)
					LocalBaseAccountingUnit		= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
				if (FinanceEnterpriseGroup.Dimension1ZoneBalancing
				and !LocalBaseDimension1 entered)
					LocalBaseDimension1			= DefaultZoneFinanceDimension1Rel.ZoneDimension
				invoked.FinanceCodeBlock.AccountingUnit		 		= LocalBaseAccountingUnit
				invoked.FinanceCodeBlock.FinanceDimension1 			= LocalBaseDimension1
				invoked.CurrencyCode								= each.GeneralLedgerZoneTotal.Currency
				invoked.GeneralLedgerEvent							= "ZB"
				invoked.TransactionAmount												= each.TransactionAmount
				invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= each.FunctionalAmount
				invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= each.AlternateAmount
				invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AlternateAmount2
				invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= each.AlternateAmount3
				invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= each.ProjectAmount
				invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= each.ReportAmount1
				invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= each.ReportAmount2
				invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= each.ReportAmount3
				invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= each.ReportAmount4
				invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= each.ReportAmount5
				invoked.Description														= FromZoneBalancingMessage
				invoked.DoNotUpdateZoneTotal											= true
				invoked.TransientJournalizeGroup										= PrmJournalizeGroup
				invoked.JournalizeSystemTransactions									= true

			if (PrmEligibleForElimination)
				LocalTransactionSequence += 1
				invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
					assign result to LocalTransactionView
					invoked.FinanceEnterpriseGroup					= each.FinanceEnterpriseGroup
					invoked.AccountingEntity						= each.AccountingEntity
					invoked.GeneralLedgerClosePeriod				= each.GeneralLedgerClosePeriod
					invoked.GeneralLedgerJournalControl				= each.GeneralLedgerJournalControl
					invoked.GeneralLedgerTransaction				= LocalTransactionSequence
					invoked.FinanceCodeBlock.ToAccountingEntity		= each.AccountingEntity
					invoked.FinanceCodeBlock.Ledger					= PrmEliminationLedger		
					invoked.PrimaryLedger							= PrmEliminationLedger
					if (each.TransactionAmount	< 0
					or  each.FunctionalAmount	< 0
					or  each.AlternateAmount	< 0
					or  each.AlternateAmount2	< 0
					or  each.AlternateAmount3	< 0
					or  each.ProjectAmount		< 0
					or  each.ReportAmount1		< 0
					or  each.ReportAmount2		< 0
					or  each.ReportAmount3		< 0
					or  each.ReportAmount4		< 0
					or  each.ReportAmount5		< 0)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZonePayablesAccount
						constraint (InterZonePayablesAccount entered)
							"InvalidInterZonePayables<FinanceEnterpriseGroup.AccountLabel>"
					else
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZoneReceivablesAccount
						constraint (InterZoneReceivablesAccount entered)
							"InvalidInterZoneReceivables<FinanceEnterpriseGroup.AccountLabel>"
					LocalBaseAccountingUnit			= each.GeneralLedgerJournalControl.BaseZoneAccountingUnit
					LocalBaseDimension1				= each.GeneralLedgerJournalControl.BaseZoneDimension1
					if (AccountingEntity.AccountingUnitZoneBalancing
					and !LocalBaseAccountingUnit entered)
						LocalBaseAccountingUnit		= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
					if (FinanceEnterpriseGroup.Dimension1ZoneBalancing
					and !LocalBaseDimension1 entered)
						LocalBaseDimension1			= DefaultZoneFinanceDimension1Rel.ZoneDimension
					invoked.FinanceCodeBlock.AccountingUnit		 		= LocalBaseAccountingUnit
					invoked.FinanceCodeBlock.FinanceDimension1 			= LocalBaseDimension1
					invoked.CurrencyCode								= each.GeneralLedgerZoneTotal.Currency
					invoked.GeneralLedgerEvent							= "ZB"
					invoked.TransactionAmount												= each.TransactionAmount * -1
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= each.FunctionalAmount * -1
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= each.AlternateAmount * -1
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AlternateAmount2 * -1
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= each.AlternateAmount3 * -1
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= each.ProjectAmount * -1
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= each.ReportAmount1 * -1
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= each.ReportAmount2 * -1
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= each.ReportAmount3 * -1
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= each.ReportAmount4 * -1
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= each.ReportAmount5 * -1
					invoked.Description														= ElimFromZoneBalancingMessage
					invoked.DoNotUpdateZoneTotal											= true
					invoked.TransientJournalizeGroup										= PrmJournalizeGroup
					invoked.JournalizeSystemTransactions									= true



			LocalTransactionSequence += 1
			invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
				assign result to LocalTransactionView
				invoked.FinanceEnterpriseGroup					= each.FinanceEnterpriseGroup
				invoked.AccountingEntity						= each.AccountingEntity
				invoked.GeneralLedgerClosePeriod				= each.GeneralLedgerClosePeriod
				invoked.GeneralLedgerJournalControl				= each.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction				= LocalTransactionSequence
				invoked.FinanceCodeBlock.ToAccountingEntity		= each.AccountingEntity
				invoked.FinanceCodeBlock.Ledger					= each.GeneralLedgerJournalControl.Ledger
				if (each.TransactionAmount	< 0
				or  each.FunctionalAmount	< 0
				or  each.AlternateAmount	< 0
				or  each.AlternateAmount2	< 0
				or  each.AlternateAmount3	< 0
				or  each.ProjectAmount		< 0
				or  each.ReportAmount1		< 0
				or  each.ReportAmount2		< 0
				or  each.ReportAmount3		< 0
				or  each.ReportAmount4		< 0
				or  each.ReportAmount5		< 0)
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZoneReceivablesAccount
					constraint (InterZoneReceivablesAccount entered)
						"InvalidInterZoneReceivables<FinanceEnterpriseGroup.AccountLabel>"
				else
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZonePayablesAccount
					constraint (InterZonePayablesAccount entered)
						"InvalidInterZonePayables<FinanceEnterpriseGroup.AccountLabel>"
				invoked.FinanceCodeBlock.AccountingUnit			 	= each.GeneralLedgerZoneTotal.ZoneAccountingUnit
				invoked.FinanceCodeBlock.FinanceDimension1 			= each.GeneralLedgerZoneTotal.ZoneFinanceDimension
				invoked.CurrencyCode								= each.GeneralLedgerZoneTotal.Currency
				invoked.GeneralLedgerEvent							= "ZB"
				invoked.TransactionAmount												-= each.TransactionAmount
				invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		-= each.FunctionalAmount
				invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		-= each.AlternateAmount
				invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		-= each.AlternateAmount2
				invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		-= each.AlternateAmount3
				invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		-= each.ProjectAmount
				invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		-= each.ReportAmount1
				invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		-= each.ReportAmount2
				invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		-= each.ReportAmount3
				invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		-= each.ReportAmount4
				invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		-= each.ReportAmount5
				invoked.Description														= ToZoneBalancingMessage
				invoked.DoNotUpdateZoneTotal											= true
				invoked.TransientJournalizeGroup										= PrmJournalizeGroup
				invoked.JournalizeSystemTransactions									= true

			if (PrmEligibleForElimination)
				LocalTransactionSequence += 1
				invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
					assign result to LocalTransactionView
					invoked.FinanceEnterpriseGroup					= each.FinanceEnterpriseGroup
					invoked.AccountingEntity						= each.AccountingEntity
					invoked.GeneralLedgerClosePeriod				= each.GeneralLedgerClosePeriod
					invoked.GeneralLedgerJournalControl				= each.GeneralLedgerJournalControl
					invoked.GeneralLedgerTransaction				= LocalTransactionSequence
					invoked.FinanceCodeBlock.ToAccountingEntity		= each.AccountingEntity
					invoked.FinanceCodeBlock.Ledger					= PrmEliminationLedger		
					invoked.PrimaryLedger							= PrmEliminationLedger
					if (each.TransactionAmount	< 0
					or  each.FunctionalAmount	< 0
					or  each.AlternateAmount	< 0
					or  each.AlternateAmount2	< 0
					or  each.AlternateAmount3	< 0
					or  each.ProjectAmount		< 0
					or  each.ReportAmount1		< 0
					or  each.ReportAmount2		< 0
					or  each.ReportAmount3		< 0
					or  each.ReportAmount4		< 0
					or  each.ReportAmount5		< 0)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZoneReceivablesAccount
						constraint (InterZoneReceivablesAccount entered)
							"InvalidInterZoneReceivables<FinanceEnterpriseGroup.AccountLabel>"
					else
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= InterZonePayablesAccount
						constraint (InterZonePayablesAccount entered)
							"InvalidInterZonePayables<FinanceEnterpriseGroup.AccountLabel>"
					invoked.FinanceCodeBlock.AccountingUnit			 	= each.GeneralLedgerZoneTotal.ZoneAccountingUnit
					invoked.FinanceCodeBlock.FinanceDimension1 			= each.GeneralLedgerZoneTotal.ZoneFinanceDimension
					invoked.CurrencyCode								= each.GeneralLedgerZoneTotal.Currency
					invoked.GeneralLedgerEvent							= "ZB"
					invoked.TransactionAmount												-= each.TransactionAmount * -1
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		-= each.FunctionalAmount * -1
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		-= each.AlternateAmount * -1
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		-= each.AlternateAmount2 * -1
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		-= each.AlternateAmount3 * -1
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		-= each.ProjectAmount * -1
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		-= each.ReportAmount1 * -1
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		-= each.ReportAmount2 * -1
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		-= each.ReportAmount3 * -1
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		-= each.ReportAmount4 * -1
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		-= each.ReportAmount5 * -1
					invoked.Description														= ElimToZoneBalancingMessage
					invoked.DoNotUpdateZoneTotal											= true
					invoked.TransientJournalizeGroup										= PrmJournalizeGroup
					invoked.JournalizeSystemTransactions									= true

			if (AccountingEntity.BalanceTransactionCurrency)
				LocalCurrencyCode			= each.GeneralLedgerZoneTotal.Currency
				invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
					if (each.TransactionAmount > 0 ) 
						invoked.PrmTransactionDrAmount			= each.TransactionAmount
						invoked.PrmTransactionCrAmount			-= each.TransactionAmount
					else
						invoked.PrmTransactionDrAmount			-= each.TransactionAmount
						invoked.PrmTransactionCrAmount			= each.TransactionAmount
					if (each.FunctionalAmount > 0 ) 
						invoked.PrmFunctionalDrAmount			= each.FunctionalAmount
						invoked.PrmFunctionalCrAmount			-= each.FunctionalAmount
					else
						invoked.PrmFunctionalDrAmount			-= each.FunctionalAmount
						invoked.PrmFunctionalCrAmount			= each.FunctionalAmount
					if (each.AlternateAmount > 0 ) 
						invoked.PrmAlternateDrAmount			= each.AlternateAmount
						invoked.PrmAlternateCrAmount			-= each.AlternateAmount
					else
						invoked.PrmAlternateDrAmount			-= each.AlternateAmount
						invoked.PrmAlternateCrAmount			= each.AlternateAmount
					if (each.AlternateAmount2 > 0 ) 
						invoked.PrmAlternateDrAmount2			= each.AlternateAmount2
						invoked.PrmAlternateCrAmount2			-= each.AlternateAmount2
					else
						invoked.PrmAlternateDrAmount2			-= each.AlternateAmount2
						invoked.PrmAlternateCrAmount2			= each.AlternateAmount2
					if (each.AlternateAmount3 > 0 ) 
						invoked.PrmAlternateDrAmount3			= each.AlternateAmount3
						invoked.PrmAlternateCrAmount3			-= each.AlternateAmount3
					else
						invoked.PrmAlternateDrAmount3			-= each.AlternateAmount3
						invoked.PrmAlternateCrAmount3			= each.AlternateAmount3						
					if (each.ReportAmount1 > 0 ) 
						invoked.PrmRpt1DrAmount					= each.ReportAmount1
						invoked.PrmRpt1CrAmount					-= each.ReportAmount1
					else
						invoked.PrmRpt1DrAmount					-= each.ReportAmount1
						invoked.PrmRpt1CrAmount					= each.ReportAmount1
					if (each.ReportAmount2 > 0 ) 
						invoked.PrmRpt2DrAmount					= each.ReportAmount2
						invoked.PrmRpt2CrAmount					-= each.ReportAmount2
					else
						invoked.PrmRpt2DrAmount					-= each.ReportAmount2
						invoked.PrmRpt2CrAmount					= each.ReportAmount2
					if (each.ReportAmount3 > 0 ) 
						invoked.PrmRpt3DrAmount					= each.ReportAmount3
						invoked.PrmRpt3CrAmount					-= each.ReportAmount3
					else
						invoked.PrmRpt3DrAmount					-= each.ReportAmount3
						invoked.PrmRpt3CrAmount					= each.ReportAmount3
					if (each.ReportAmount4 > 0 ) 
						invoked.PrmRpt4DrAmount					= each.ReportAmount4
						invoked.PrmRpt4CrAmount					-= each.ReportAmount4
					else
						invoked.PrmRpt4DrAmount					-= each.ReportAmount4
						invoked.PrmRpt4CrAmount					= each.ReportAmount4
					if (each.ReportAmount5 > 0 ) 
						invoked.PrmRpt5DrAmount					= each.ReportAmount5
						invoked.PrmRpt5CrAmount					-= each.ReportAmount5
					else
						invoked.PrmRpt5DrAmount					-= each.ReportAmount5
						invoked.PrmRpt5CrAmount					= each.ReportAmount5

			if (each.FunctionalAmount > 0 ) 
				PrmFunctionalDrAmount			 += each.FunctionalAmount
				PrmFunctionalCrAmount			 -= each.FunctionalAmount
			else
				PrmFunctionalDrAmount			 -= each.FunctionalAmount
				PrmFunctionalCrAmount			 += each.FunctionalAmount
			if (each.AlternateAmount > 0 ) 
				PrmAlternateDrAmount			 += each.AlternateAmount
				PrmAlternateCrAmount			 -= each.AlternateAmount
			else
				PrmAlternateDrAmount			 -= each.AlternateAmount
				PrmAlternateCrAmount			 += each.AlternateAmount
			if (each.AlternateAmount2 > 0 ) 
				PrmAlternateDrAmount2			 += each.AlternateAmount2
				PrmAlternateCrAmount2			 -= each.AlternateAmount2
			else
				PrmAlternateDrAmount2			 -= each.AlternateAmount2
				PrmAlternateCrAmount2			 += each.AlternateAmount2
			if (each.AlternateAmount3 > 0 ) 
				PrmAlternateDrAmount3			 += each.AlternateAmount3
				PrmAlternateCrAmount3			 -= each.AlternateAmount3
			else
				PrmAlternateDrAmount3			 -= each.AlternateAmount3
				PrmAlternateCrAmount3			 += each.AlternateAmount3				
			if (each.ReportAmount1 > 0 ) 
				PrmRpt1DrAmount					 += each.ReportAmount1
				PrmRpt1CrAmount					 -= each.ReportAmount1
			else
				PrmRpt1DrAmount					 -= each.ReportAmount1
				PrmRpt1CrAmount					 += each.ReportAmount1
			if (each.ReportAmount2 > 0 ) 
				PrmRpt2DrAmount					 += each.ReportAmount2
				PrmRpt2CrAmount					 -= each.ReportAmount2
			else
				PrmRpt2DrAmount					 -= each.ReportAmount2
				PrmRpt2CrAmount					 += each.ReportAmount2
			if (each.ReportAmount3 > 0 ) 
				PrmRpt3DrAmount					 += each.ReportAmount3
				PrmRpt3CrAmount					 -= each.ReportAmount3
			else
				PrmRpt3DrAmount					 -= each.ReportAmount3
				PrmRpt3CrAmount					 += each.ReportAmount3
			if (each.ReportAmount4 > 0 ) 
				PrmRpt4DrAmount					 += each.ReportAmount4
				PrmRpt4CrAmount					 -= each.ReportAmount4
			else
				PrmRpt4DrAmount					 -= each.ReportAmount4
				PrmRpt4CrAmount					 += each.ReportAmount4
			if (each.ReportAmount5 > 0 ) 
				PrmRpt5DrAmount					 += each.ReportAmount5
				PrmRpt5CrAmount					 -= each.ReportAmount5
			else
				PrmRpt5DrAmount					 -= each.ReportAmount5
				PrmRpt5CrAmount					 += each.ReportAmount5

		CreateBalancingCurrencyTransactions
			initialize LocalAutoReverseAmount
			initialize LocalTransactionAmount
			initialize LocalFunctionalAmount
			initialize LocalAlternateAmount
			initialize LocalAlternateAmount2
			initialize LocalAlternateAmount3
			initialize LocalReportAmount1
			initialize LocalReportAmount2
			initialize LocalReportAmount3
			initialize LocalReportAmount4
			initialize LocalReportAmount5
			initialize LocalESCreated
			BypassStructureRelationEdit = true
			LocalAutoReverseAmount	-= (each.AutoReverseDebitAmount + each.AutoReverseCreditAmount)
			LocalTransactionAmount	-= (each.TransactionDebitAmount + each.TransactionCreditAmount)
			LocalFunctionalAmount	-= (each.FunctionalDebitAmount + each.FunctionalCreditAmount)
			LocalAlternateAmount	-= (each.AlternateDebitAmount + each.AlternateCreditAmount)
			LocalAlternateAmount2	-= (each.Alternate2DebitAmount + each.Alternate2CreditAmount)
			LocalAlternateAmount3	-= (each.Alternate3DebitAmount + each.Alternate3CreditAmount)
			LocalReportAmount1		-= (each.Rpt1DebitAmount + each.Rpt1CreditAmount)
			LocalReportAmount2		-= (each.Rpt2DebitAmount + each.Rpt2CreditAmount)
			LocalReportAmount3		-= (each.Rpt3DebitAmount + each.Rpt3CreditAmount)
			LocalReportAmount4		-= (each.Rpt4DebitAmount + each.Rpt4CreditAmount)
			LocalReportAmount5		-= (each.Rpt5DebitAmount + each.Rpt5CreditAmount)
			LocalSetAutoRev			= false
			if (!LocalAutoReverseAmount	= 0)
				LocalSetAutoRev			= true

			if (LocalTransactionAmount entered
			or  LocalFunctionalAmount entered
			or  LocalAlternateAmount entered
			or  LocalAlternateAmount2 entered
			or  LocalAlternateAmount3 entered
			or  LocalReportAmount1 entered
			or  LocalReportAmount2 entered
			or  LocalReportAmount3 entered
			or  LocalReportAmount4 entered
			or  LocalReportAmount5 entered)
				if (LocalTransactionAmount entered
				and AccountingEntity.CurrencyLedger.TransactionAmount)
					if (LocalFunctionalAmount	entered
					and each.FromCurrency	= AccountingEntity.FunctionalCurrency)
						LocalFunctionalAmount	= LocalTransactionAmount
					if (LocalAlternateAmount	entered
					and each.FromCurrency	= AccountingEntity.AlternateCurrency)
						LocalAlternateAmount	= LocalTransactionAmount
					if (LocalAlternateAmount2	entered
					and each.FromCurrency	= AccountingEntity.AlternateCurrency2)
						LocalAlternateAmount2	= LocalTransactionAmount
					if (LocalAlternateAmount3	entered
					and each.FromCurrency	= AccountingEntity.AlternateCurrency3)
						LocalAlternateAmount3	= LocalTransactionAmount
					if (LocalReportAmount1		entered
					and each.FromCurrency	= FinanceEnterpriseGroup.ReportCurrencyOne)
						LocalReportAmount1		= LocalTransactionAmount
					if (LocalReportAmount2		entered
					and each.FromCurrency	= FinanceEnterpriseGroup.ReportCurrencyTwo)
						LocalReportAmount2		= LocalTransactionAmount
					if (LocalReportAmount3		entered
					and each.FromCurrency	= FinanceEnterpriseGroup.ReportCurrencyThree)
						LocalReportAmount3		= LocalTransactionAmount
					if (LocalReportAmount4		entered
					and each.FromCurrency	= FinanceEnterpriseGroup.ReportCurrencyFour)
						LocalReportAmount4		= LocalTransactionAmount
					if (LocalReportAmount5		entered
					and each.FromCurrency	= FinanceEnterpriseGroup.ReportCurrencyFive)
						LocalReportAmount5		= LocalTransactionAmount

				if ((LocalTransactionAmount entered
				and AccountingEntity.CurrencyLedger.TransactionAmount)
				or  AccountingEntity.CurrencyLedger.AllCurrencyAmounts)	
					if (AccountingEntity.CurrencyLedger.TransactionAmount)	
						LocalSystemAccount = SystemAccount.ErrorSuspense 
						constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
							"Invalid_Error_Suspense<FinanceEnterpriseGroup.AccountLabel>"
					else
						LocalSystemAccount = SystemAccount.AutoBalance
						constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
							"Invalid_Auto_Balance<FinanceEnterpriseGroup.AccountLabel>"
						
					LocalTransactionSequence += 1
					invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
						assign result to LocalTransactionView
						invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
						invoked.AccountingEntity						= AccountingEntity
						invoked.GeneralLedgerClosePeriod				= GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl				= GeneralLedgerJournalControl
						invoked.GeneralLedgerTransaction				= LocalTransactionSequence
						invoked.FinanceCodeBlock.ToAccountingEntity		= AccountingEntity
						invoked.FinanceCodeBlock.Ledger					= GeneralLedgerJournalControl.Ledger
						invoked.FinanceCodeBlock.AccountingUnit		 	= SystemAccountingUnitRel.AccountingUnit
						if (FinanceEnterpriseGroup.FinanceDimension1Required)
							invoked.FinanceCodeBlock.FinanceDimension1 		= FinanceDimension1Rel.FinanceDimension1
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount   = first SystemAccountRel.GeneralLedgerChartAccount
						invoked.CurrencyCode							= each.FromCurrency
						if (AccountingEntity.CurrencyLedger.TransactionAmount)
							invoked.GeneralLedgerEvent					= "ES"
							LocalESCreated								= true
						else
							invoked.GeneralLedgerEvent					= "AB"
						invoked.AutoReverse								= LocalSetAutoRev
						invoked.TransactionAmount												= LocalTransactionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalFunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalAlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalAlternateAmount3
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5
						invoked.Description														= CurrencyBalanceMessage
						invoked.TransientJournalizeGroup										= PrmJournalizeGroup
						invoked.JournalizeSystemTransactions									= true

					if (EligibleForElimination)
						LocalTransactionSequence += 1
						invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
							assign result to LocalTransactionView
							invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
							invoked.AccountingEntity						= AccountingEntity
							invoked.GeneralLedgerClosePeriod				= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl				= GeneralLedgerJournalControl
							invoked.GeneralLedgerTransaction				= LocalTransactionSequence
							invoked.FinanceCodeBlock.ToAccountingEntity		= AccountingEntity
							invoked.FinanceCodeBlock.Ledger					= DerivedEliminationLedger		
							invoked.PrimaryLedger							= DerivedEliminationLedger
							invoked.FinanceCodeBlock.AccountingUnit		 	= SystemAccountingUnitRel.AccountingUnit
							if (FinanceEnterpriseGroup.FinanceDimension1Required)
								invoked.FinanceCodeBlock.FinanceDimension1 		= FinanceDimension1Rel.FinanceDimension1
							invoked.FinanceCodeBlock.GeneralLedgerChartAccount   = first SystemAccountRel.GeneralLedgerChartAccount
							invoked.CurrencyCode							= each.FromCurrency
							if (AccountingEntity.CurrencyLedger.TransactionAmount)
								invoked.GeneralLedgerEvent					= "ES"
								LocalESCreated								= true
							else
								invoked.GeneralLedgerEvent					= "AB"
							invoked.AutoReverse								= false		
							invoked.TransactionAmount												= LocalTransactionAmount * -1
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalFunctionalAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalAlternateAmount2 * -1
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalAlternateAmount3 * -1
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1 * -1
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2 * -1
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3 * -1
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4 * -1
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5 * -1
							invoked.Description														= ElimCurrencyBalanceMessage
							invoked.TransientJournalizeGroup										= PrmJournalizeGroup
							invoked.JournalizeSystemTransactions									= true

					invoke UpdateJournalCurrencyTotals each
						if (LocalTransactionAmount	> 0)
							invoked.PrmTransactionDrAmount			 = LocalTransactionAmount
						else
							invoked.PrmTransactionCrAmount			 = LocalTransactionAmount
						if (LocalSetAutoRev)
							if (LocalFunctionalAmount	> 0)
								PrmAutoReverseCrAmount					+= LocalFunctionalAmount
								invoked.PrmAutoReverseDrAmount			 = LocalFunctionalAmount
							else
								PrmAutoReverseCrAmount					+= LocalFunctionalAmount
								invoked.PrmAutoReverseCrAmount			 = LocalFunctionalAmount

					if (LocalFunctionalAmount	> 0)
						FunctionalDebitAmount			+= LocalFunctionalAmount
					else
						FunctionalCreditAmount			+= LocalFunctionalAmount
					if (LocalAlternateAmount	> 0)
						AlternateDebitAmount			+= LocalAlternateAmount
					else
						AlternateCreditAmount			+= LocalAlternateAmount
					if (LocalAlternateAmount2	> 0)
						Alternate2DebitAmount			+= LocalAlternateAmount2
					else
						Alternate2CreditAmount			+= LocalAlternateAmount2
					if (LocalAlternateAmount3	> 0)
						Alternate3DebitAmount			+= LocalAlternateAmount3
					else
						Alternate3CreditAmount			+= LocalAlternateAmount3					
					if (LocalReportAmount1		> 0)
						Rpt1DebitAmount					+= LocalReportAmount1
					else
						Rpt1CreditAmount				+= LocalReportAmount1
					if (LocalReportAmount2		> 0)
						Rpt2DebitAmount					+= LocalReportAmount2
					else
						Rpt2CreditAmount				+= LocalReportAmount2
					if (LocalReportAmount3		> 0)
						Rpt3DebitAmount					+= LocalReportAmount3
					else
						Rpt3CreditAmount				+= LocalReportAmount3
					if (LocalReportAmount4		> 0)
						Rpt4DebitAmount					+= LocalReportAmount4
					else
						Rpt4CreditAmount				+= LocalReportAmount4
					if (LocalReportAmount5		> 0)
						Rpt5DebitAmount					+= LocalReportAmount5
					else
						Rpt5CreditAmount				+= LocalReportAmount5
					if (LocalSetAutoRev)
						if (LocalAutoReverseAmount	> 0)
							AutoReverseDebitAmount			+= LocalAutoReverseAmount
						else
							AutoReverseCreditAmount			+= LocalAutoReverseAmount
								
		CreateBaseBalancingTransactions
			BypassStructureRelationEdit = true
			initialize LocalAutoReverseAmount
			initialize LocalFunctionalAmount
			initialize LocalAlternateAmount
			initialize LocalAlternateAmount2
			initialize LocalAlternateAmount3
			initialize LocalReportAmount1
			initialize LocalReportAmount2
			initialize LocalReportAmount3
			initialize LocalReportAmount4
			initialize LocalReportAmount5
			LocalSetAutoRev			= false
			if (!TotalAutoReverseAmount	= 0)
				LocalSetAutoRev			= true
			LocalAutoReverseAmount	-= TotalAutoReverseAmount
			LocalFunctionalAmount	-= TotalFunctionalAmount
			LocalAlternateAmount	-= TotalAlternateAmount
			LocalAlternateAmount2	-= TotalAlternate2Amount
			LocalAlternateAmount3	-= TotalAlternate3Amount
			LocalReportAmount1		-= TotalRpt1Amount
			LocalReportAmount2		-= TotalRpt2Amount
			LocalReportAmount3		-= TotalRpt3Amount
			LocalReportAmount4		-= TotalRpt4Amount
			LocalReportAmount5		-= TotalRpt5Amount
			if (LocalFunctionalAmount entered
			or  LocalAlternateAmount entered
			or  LocalAlternateAmount2 entered
			or  LocalAlternateAmount3 entered
			or  LocalReportAmount1 entered
			or  LocalReportAmount2 entered
			or  LocalReportAmount3 entered
			or  LocalReportAmount4 entered
			or  LocalReportAmount5 entered)
				LocalSystemAccount = SystemAccount.ErrorSuspense 
				constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
					"InvalidErrorSuspense<FinanceEnterpriseGroup.AccountLabel>"
				if (AccountingEntity.AutoBalance)
					LocalSystemAccount		= SystemAccount.AutoBalance 
					constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
						"InvalidAutoBalance<FinanceEnterpriseGroup.AccountLabel>"
				LocalTransactionSequence	+= 1
				invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
					invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
					invoked.AccountingEntity						= AccountingEntity
					invoked.GeneralLedgerClosePeriod				= GeneralLedgerClosePeriod
					invoked.GeneralLedgerJournalControl				= GeneralLedgerJournalControl
					invoked.GeneralLedgerTransaction				= LocalTransactionSequence
					invoked.FinanceCodeBlock.ToAccountingEntity		= AccountingEntity
					invoked.FinanceCodeBlock.Ledger					= Ledger
					invoked.FinanceCodeBlock.AccountingUnit		 	= SystemAccountingUnitRel.AccountingUnit
					if (FinanceEnterpriseGroup.FinanceDimension1Required)
						invoked.FinanceCodeBlock.FinanceDimension1 		= FinanceDimension1Rel.FinanceDimension1
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount = first SystemAccountRel.GeneralLedgerChartAccount
					invoked.CurrencyCode  							= AccountingEntity.FunctionalCurrency
					if (AccountingEntity.AutoBalance)
						invoked.GeneralLedgerEvent						= "AB"
						invoked.Description								= AutoBalanceMessage
					else
						invoked.GeneralLedgerEvent						= "ES"
						LocalESCreated									= true
						invoked.Description								= ErrorBalanceMessage
					initialize invoked.TransactionAmount
					if (LocalSetAutoRev
					and LocalAutoReverseAmount = LocalFunctionalAmount)
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalFunctionalAmount
						invoked.AutoReverse														= true
					else
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= (LocalFunctionalAmount - LocalAutoReverseAmount)
						invoked.AutoReverse														= false
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalAlternateAmount2
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalAlternateAmount3
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5
					invoked.TransientJournalizeGroup										= PrmJournalizeGroup
					invoked.JournalizeSystemTransactions									= true

				if (EligibleForElimination)
					LocalTransactionSequence	+= 1
					invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
						invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
						invoked.AccountingEntity						= AccountingEntity
						invoked.GeneralLedgerClosePeriod				= GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl				= GeneralLedgerJournalControl
						invoked.GeneralLedgerTransaction				= LocalTransactionSequence
						invoked.FinanceCodeBlock.ToAccountingEntity		= AccountingEntity
						invoked.FinanceCodeBlock.Ledger					= DerivedEliminationLedger
						invoked.PrimaryLedger							= DerivedEliminationLedger
						invoked.FinanceCodeBlock.AccountingUnit		 	= SystemAccountingUnitRel.AccountingUnit
						if (FinanceEnterpriseGroup.FinanceDimension1Required)
							invoked.FinanceCodeBlock.FinanceDimension1 		= FinanceDimension1Rel.FinanceDimension1
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount = first SystemAccountRel.GeneralLedgerChartAccount
						invoked.CurrencyCode  							= AccountingEntity.FunctionalCurrency
						if (AccountingEntity.AutoBalance)
							invoked.GeneralLedgerEvent						= "AB"
							invoked.Description								= AutoBalanceMessage
						else
							invoked.GeneralLedgerEvent						= "ES"
							LocalESCreated									= true
							invoked.Description								= ErrorBalanceMessage
						initialize invoked.TransactionAmount
						if (LocalSetAutoRev
						and LocalAutoReverseAmount = LocalFunctionalAmount)
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalFunctionalAmount * -1
							invoked.AutoReverse														= false			
						else
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ((LocalFunctionalAmount - LocalAutoReverseAmount) * -1)
							invoked.AutoReverse														= false
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount * -1
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalAlternateAmount2 * -1
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalAlternateAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1 * -1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2 * -1
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4 * -1
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5 * -1
						invoked.TransientJournalizeGroup										= PrmJournalizeGroup
						invoked.JournalizeSystemTransactions									= true

				if  (LocalSetAutoRev
				and !LocalAutoReverseAmount = LocalFunctionalAmount)
					LocalTransactionSequence	+= 1
					invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
						invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
						invoked.AccountingEntity						= AccountingEntity
						invoked.GeneralLedgerClosePeriod				= GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl				= GeneralLedgerJournalControl
						invoked.GeneralLedgerTransaction				= LocalTransactionSequence
						invoked.FinanceCodeBlock.ToAccountingEntity		= AccountingEntity
						invoked.FinanceCodeBlock.Ledger					= Ledger
						invoked.FinanceCodeBlock.AccountingUnit		 	= SystemAccountingUnitRel.AccountingUnit
						if (FinanceEnterpriseGroup.FinanceDimension1Required)
							invoked.FinanceCodeBlock.FinanceDimension1 		= FinanceDimension1Rel.FinanceDimension1
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount = first SystemAccountRel.GeneralLedgerChartAccount
						invoked.CurrencyCode  							= AccountingEntity.FunctionalCurrency
						if (AccountingEntity.AutoBalance)
							invoked.GeneralLedgerEvent						= "AB"
							invoked.Description								= AutoBalanceMessage
						else
							invoked.GeneralLedgerEvent						= "ES"
							invoked.Description								= ErrorBalanceMessage
							LocalESCreated									= true
						invoked.AutoReverse									= true
						initialize invoked.TransactionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalAutoReverseAmount
						invoked.TransientJournalizeGroup										= PrmJournalizeGroup
						invoked.JournalizeSystemTransactions									= true
				if (LocalFunctionalAmount	> 0)
					FunctionalDebitAmount			+= LocalFunctionalAmount
				else
					FunctionalCreditAmount			+= LocalFunctionalAmount
				if (LocalAlternateAmount	> 0)
					AlternateDebitAmount			+= LocalAlternateAmount
				else
					AlternateCreditAmount			+= LocalAlternateAmount
				if (LocalAlternateAmount2	> 0)
					Alternate2DebitAmount			+= LocalAlternateAmount2
				else
					Alternate2CreditAmount			+= LocalAlternateAmount2
				if (LocalAlternateAmount3	> 0)
					Alternate3DebitAmount			+= LocalAlternateAmount3
				else
					Alternate3CreditAmount			+= LocalAlternateAmount3					
				if (LocalReportAmount1		> 0)
					Rpt1DebitAmount					+= LocalReportAmount1
				else
					Rpt1CreditAmount				+= LocalReportAmount1
				if (LocalReportAmount2		> 0)
					Rpt2DebitAmount					+= LocalReportAmount2
				else
					Rpt2CreditAmount				+= LocalReportAmount2
				if (LocalReportAmount3		> 0)
					Rpt3DebitAmount					+= LocalReportAmount3
				else
					Rpt3CreditAmount				+= LocalReportAmount3
				if (LocalReportAmount4		> 0)
					Rpt4DebitAmount					+= LocalReportAmount4
				else
					Rpt4CreditAmount				+= LocalReportAmount4
				if (LocalReportAmount5		> 0)
					Rpt5DebitAmount					+= LocalReportAmount5
				else
					Rpt5CreditAmount				+= LocalReportAmount5
				if (LocalSetAutoRev)
					if (LocalAutoReverseAmount	> 0)
						AutoReverseDebitAmount			+= LocalAutoReverseAmount
					else
						AutoReverseCreditAmount			+= LocalAutoReverseAmount

		CreateGLCommitRecords
			make transition to Posted
			if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
				invoke CreateGLCommit GeneralLedgerTransaction in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity	= AccountingEntity
					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
			else
				invoke CreateGLCommit GeneralLedgerTransaction in foreground
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity	= AccountingEntity
					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
		
		CreateGLTransactionDetailCreation
			if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
				invoke CreateGLTransactionDetail GeneralLedgerTransaction in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity	= AccountingEntity
					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
			else
				invoke CreateGLTransactionDetail GeneralLedgerTransaction in foreground
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity	= AccountingEntity
					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
		
		JournalizeGLTransactionDetail
			if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
				invoke JournalizeTransactions  GLTransactionDetail in background
					run after AsyncId
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmJournalizeGroup	= "GL"+AccountingEntity+GeneralLedgerClosePeriod+GeneralLedgerJournalControl
					invoked.PrmJournalCreated	= true
					invoked.PrmAccountingEntity	= AccountingEntity

					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
					invoked.PrmInterfaceInDetail = true 
					invoked.PrmAutoReverseDate   = AutoReverseDate
					invoked.PrmCurrencyTable	= CurrencyTable
					invoked.PrmEligibleForElimination = EligibleForElimination		
					invoked.PrmElimToAccountingEntity = LocalElimToEntity			
					invoked.PrmEliminationLedger	  = DerivedEliminationLedger	
			else
				invoke JournalizeTransactions  GLTransactionDetail in foreground
					invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmJournalizeGroup	= "GL"+AccountingEntity+GeneralLedgerClosePeriod+GeneralLedgerJournalControl
					invoked.PrmJournalCreated	= true
					invoked.PrmAccountingEntity	= AccountingEntity

					invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
					invoked.PrmJournalControl	= GeneralLedgerJournalControl
					invoked.PrmInterfaceInDetail = true
					invoked.PrmAutoReverseDate   = AutoReverseDate
					invoked.PrmCurrencyTable	= CurrencyTable
					invoked.PrmEligibleForElimination = EligibleForElimination		
					invoked.PrmElimToAccountingEntity = LocalElimToEntity			
					invoked.PrmEliminationLedger	  = DerivedEliminationLedger	

		JournalPostStatusChange
			Status		= Status.Posted
			PostingOperator = actor
			JournalPostingResult	= PrmJournalPostingResult						
			if (AccountingEntityLedgerPeriodRel.PeriodStatus.Backpost)
				invoke UpdateReportingBasisPreviousYear
				
			invoke TriggerBOD GeneralLedgerJournalControl

#ifdef module closemgmt					
			if (HasClosePeriodTaskJournals)
				for each ClosePeriodTaskJournalAbleToCloseRel
					invoke CloseTask each.ClosePeriodTask
#endif
		TriggerSSJERules
			if(LocalMassBODTrigger)
				LocalSSJEBODTitle ="MassBOD:"+MassBODTitleDate+": EG:"+FinanceEnterpriseGroup+" AE:"+AccountingEntity+" GLJC:"+GeneralLedgerJournalControl
			else
				LocalSSJEBODTitle ="EG:"+FinanceEnterpriseGroup+" AE:"+AccountingEntity+" GLJC:"+GeneralLedgerJournalControl
			
			Service		= "GLJournalControlService"
			LocalBODCurrentTimeStamp.CurrentTimeStamp = current timestamp
			LocalTotalLines = instance count of GeneralLedgerTransaction set
			trigger Service PA service
				resume on error
				title is "<LocalSSJEBODTitle>"
				Criteria
					FinanceEnterpriseGroup
					Ledger
					AccountingEntity
				Variables
					ActionCode
					include persistent fields from FinanceEnterpriseGroup
					include persistent fields from GeneralLedgerJournalControl
					include persistent fields from AccountingEntity
					include persistent fields from GeneralLedgerClosePeriod
					GeneralLedgerCalendarPeriod.Date
						variable name is CalendarPeriodDate
					GeneralLedgerCalendarPeriod.DisplayPeriod
						variable name is CalendaryDisplayPeriod
					GeneralLedgerCalendarPeriod.Year
						variable name is CalendarYear
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					LocalTotalLines
						variable name is TotalLines
					GeneralLedgerJournalControlRefRel.JournalReferenceNumber
						variable name is JournalRefNumber
		EditsForMassRelease
			if (!PendingBudgetEdit)
				if (!AllowUnrelease)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg		= InterfacedJournalError
				if (LocalJournalCanBeReleased
				and ReleaseDate entered)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg		= ReleaseDateError
#ifdef module intercobilling
			if (LocalJournalCanBeReleased
			and IsAIntercompanyBillingJournal)
				if (!IntercompanyBillingTransactionRel exists)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg	= InterCoBillingError

#endif							

			if (LocalJournalCanBeReleased
			and JournalType.InterEntity)
				LocalJournalIsInterEntity	= false
				for each GeneralLedgerTransaction set
					if (each.FinanceCodeBlock.ToAccountingEntity	= AccountingEntity)
						LocalJournalIsInterEntity	= true
						end for each
				if (!LocalJournalIsInterEntity)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg = NoFromEntityTransactionError

			if (LocalJournalCanBeReleased
			and JournalType.InterEntity)
				if (!InterEntityGLTransactionRel exists)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg 		= NoInterEntityTransactionError

			if (LocalJournalCanBeReleased
			and JournalType.ManualEncumbrance)
				if (TotalFunctionalAmount	= 0)
					LocalJournalCanBeReleased			= false
					LocalReleaseErrorMsg		= FunctionalDebitAmountError

			if (LocalJournalCanBeReleased
			and !JournalType.ManualEncumbrance)
				if (AccountingEntity.BalanceTransactionCurrency)
					for each GLCurrencyJournalControl set
						LocalCurrencyCode	= each.FromCurrency
						if (!each.TotalTransactionAmount	= 0)
							LocalJournalCanBeReleased			= false
							LocalReleaseErrorMsg		= CurrencyAmountsError

			
			if (LocalJournalCanBeReleased)
				if  (AccountingEntity.AutoBalance
				and !JournalAmountsAreBalanced)
					LocalDifferenceWithinThreshold		= true																			
					if (!TotalFunctionalAmount	  = 0)
						if (AccountingEntity.FunctionalAutoBalanceThreshold entered)

							if (TotalFunctionalAmount < 0)
								LocalUnsignedAmount = -1 * TotalFunctionalAmount
							else
								LocalUnsignedAmount = TotalFunctionalAmount
							if (!LocalUnsignedAmount <= AccountingEntity.FunctionalAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false
								LocalReleaseErrorMsg		= AutoBalanceLimitExceededError

					if (!TotalAlternateAmount	  = 0)
						if (AccountingEntity.AlternateAutoBalanceThreshold entered)
							if (TotalAlternateAmount < 0)
								LocalUnsignedAmount = -1 * TotalAlternateAmount
							else
								LocalUnsignedAmount = TotalAlternateAmount
							if (!LocalUnsignedAmount <= AccountingEntity.AlternateAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalAlternate2Amount	  = 0)
						if (AccountingEntity.Alternate2AutoBalanceThreshold entered)
							if (TotalAlternate2Amount < 0)
								LocalUnsignedAmount = -1 * TotalAlternate2Amount
							else
								LocalUnsignedAmount = TotalAlternate2Amount
							if (!LocalUnsignedAmount <= AccountingEntity.Alternate2AutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalAlternate3Amount	  = 0)
						if (AccountingEntity.Alternate3AutoBalanceThreshold entered)
							if (TotalAlternate3Amount < 0)
								LocalUnsignedAmount = -1 * TotalAlternate3Amount
							else
								LocalUnsignedAmount = TotalAlternate3Amount
							if (!LocalUnsignedAmount <= AccountingEntity.Alternate3AutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalRpt1Amount		  = 0)
						if (FinanceEnterpriseGroup.ReportOneAutoBalanceThreshold entered)
							if (TotalRpt1Amount < 0)
								LocalUnsignedAmount = -1 * TotalRpt1Amount
							else
								LocalUnsignedAmount = TotalRpt1Amount
							if (!LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportOneAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalRpt2Amount		  = 0)
						if (FinanceEnterpriseGroup.ReportTwoAutoBalanceThreshold entered)
							if (TotalRpt2Amount < 0)
								LocalUnsignedAmount = -1 * TotalRpt2Amount
							else
								LocalUnsignedAmount = TotalRpt2Amount
							if (!LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportTwoAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalRpt3Amount		  = 0)
						if (FinanceEnterpriseGroup.ReportThreeAutoBalanceThreshold entered)
							if (TotalRpt3Amount < 0)
								LocalUnsignedAmount = -1 * TotalRpt3Amount
							else
								LocalUnsignedAmount = TotalRpt3Amount
							if (!LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportThreeAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalRpt4Amount		  = 0)
						if (FinanceEnterpriseGroup.ReportFourAutoBalanceThreshold entered)
							if (TotalRpt4Amount < 0)
								LocalUnsignedAmount = -1 * TotalRpt4Amount
							else
								LocalUnsignedAmount = TotalRpt4Amount
							if (!LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportFourAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (!TotalRpt5Amount		  = 0)
						if (FinanceEnterpriseGroup.ReportFiveAutoBalanceThreshold entered)
							if (TotalRpt5Amount < 0)
								LocalUnsignedAmount = -1 * TotalRpt5Amount
							else
								LocalUnsignedAmount = TotalRpt5Amount
							if (!LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportFiveAutoBalanceThreshold)
								LocalDifferenceWithinThreshold		= false

					if (LocalDifferenceWithinThreshold)
						confirmation required
							"<AutoBalanceConfirmationMessage>"
					else
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= AutoBalanceLimitExceededError
				if (LocalJournalCanBeReleased
				and !AccountingEntity.AutoBalance)
					if (!TotalAutoReverseAmount	= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalFunctionalAmount	= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalAlternateAmount	= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalAlternate2Amount	= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalAlternate3Amount	= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalRpt1Amount			= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalRpt2Amount			= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalRpt3Amount			= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalRpt4Amount			= 0)
						LocalJournalCanBeReleased			= false

					if (!TotalRpt5Amount			= 0)
						LocalJournalCanBeReleased			= false

					if (!LocalJournalCanBeReleased)
						LocalReleaseErrorMsg		= TotalDebitCreditAmountsError
#ifdef module sharedfinance
			if (LocalJournalCanBeReleased)
				if ((!AccountingEntity.JournalApproval.None)
				and (FunctionalDebitAmount		> AccountingEntity.JournalApprovalAmount)
				or  (!FunctionalDebitAmount entered
				and  (UnitsDebits entered
				or    UnitsCredits entered)			
				and	 AccountingEntity.JournalApproval.AmountAndUnit))
					if (!ApprovalCode entered)
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= ApprovalCodeRequiredError

					
			if (LocalJournalCanBeReleased)
				if	(AccountingEntity.JournalApproval.AmountAndUnit					
				and  !FunctionalDebitAmount entered
				and (UnitsDebits entered
				or   UnitsCredits entered))			
					if (!ApprovalCode entered)
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= BypassApprovalNotValidForUnitsOnly


			if (LocalJournalCanBeReleased)
				if	(AccountingEntity.JournalApproval.AmountAndUnit					
				and  !FunctionalDebitAmount entered
				and (UnitsDebits entered
				or   UnitsCredits entered))			
					if  (ApprovalCode entered
					and  ApprovalCode = AccountingEntity.BypassApprovalCode)
						LocalJournalCanBeReleased			= true


			if (LocalJournalCanBeReleased)
				if (ApprovalCode entered
				and !AccountingEntity.JournalApproval.None
				and AccountingEntity.BypassApprovalCode	!= ApprovalCode)


					LocalApprover = create stamp.actor.agent(Employee).Employee
					if (ApprovalCodeResourceByResourceRel exists)
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= CreatorAndJournalApproverError

					else
					if (!ApprovalCode.HasApprovalLevels) 
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= ApprovalLevelsMissing

					else
					if (ApprovalCode.HasTeamWithNoMembers) 
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= ApprovalTeamHasNoMembers

					else
					if (ApprovalCode.HasInvalidEscalations)
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= InvalidEscalationSettings

					else
					if (ApprovalCode.HasInactiveResources)
						LocalJournalCanBeReleased			= false
						LocalReleaseErrorMsg		= InactiveApprovers


#endif
#ifdef module cb			
			if (LocalJournalCanBeReleased
			and FinanceEnterpriseGroup.FundAccounting)
				include PerformCashFundAmountEdit
				if (ExceedesCashCodeFundBalanceRel exists)
					LocalJournalCanBeReleased	= false
					LocalReleaseErrorMsg		= FundBalanceExceeded
				invoke Delete CashCodeFundEditRel
#endif
#ifdef module cam
			if (LocalJournalCanBeReleased
			and FinanceEnterpriseGroup.CustodialAccountManagement)
				include PerformCustodialAmountEdit
				if (ExceedsCustodialAccountBalanceRel exists)
					LocalJournalCanBeReleased	= false
					LocalReleaseErrorMsg		= CustodialAccountBalanceExceeded
				invoke Delete CustodialAccountEditRel
#endif

		VerifyTemplatesAreNotProcessing
			constraint (ProcessingTemplatesRel not exists)
				"CannotPostWhileTemplatesAreProcessing"

#ifdef module cb			
		PerformCashFundAmountEdit
			if (!JournalType.ManualEncumbrance
			and FinanceEnterpriseGroup.FundAccounting
			and TransactionsRequiringFundCashEditRel exists)
				invoke Delete CashCodeFundEditRel
				invoke UpdateCashCodeFundEdit TransactionsRequiringFundCashEditRel
#endif

#ifdef module cam
		PerformCustodialAmountEdit
			if (FinanceEnterpriseGroup.CustodialAccountManagement
			and CamTransactionsRequiringCashEditRel exists)
				invoke Delete CustodialAccountEditRel
				invoke UpdateCustodialAccountEdit CamTransactionsRequiringCashEditRel
#endif

    Derived Fields

		BudgetErrorMsg			is a MessageField
			restricted
			"ReleaseFailed;BudgetErrorExists"	
		InterfacedJournalError	is a MessageField
			restricted
			"InterfacedJournalsCannotBeMaintained"	
		ReleaseDateError 		is a MessageField
			restricted
			"CannotRelease;ReleaseDateAlreadyHasAValue"
		InterCoBillingError		is a MessageField
			restricted
			"JournalDoesNotHaveInterCompanyBillingTransactions"
		NoFromEntityTransactionError	is a MessageField
			restricted
			"Inter\EntityJournalRequiresTransactionFor<AccountingEntity.AccountingEntityLabel>_<AccountingEntity>"
		NoInterEntityTransactionError	is a MessageField
			restricted
			"CannotRelease;JournalDoesNotHaveInter\EntityTransactions"
		FunctionalDebitAmountError		is a MessageField
			restricted
			"TotalFunctionalDebitAmountCannotBeZeroesForManualEncumbrance"
		CurrencyAmountsError		is a MessageField
			restricted
			"<LocalCurrencyCode>TransactionDebitsDoNotEqualCredits"
		AutoBalanceLimitExceededError	is a MessageField
			restricted
			"CannotAutoBalance,DifferenceExceedsThresholdAmount"
		TotalDebitCreditAmountsError	is a MessageField
			restricted
			"CannotRelease,TotalDebitAndTotalCreditAmountsNotEqual"
		ApprovalCodeRequiredError		is a MessageField
			restricted
			"CannotRelease,ApprovalCodeIsRequired"
		BypassApprovalNotValidForUnitsOnly	is a MessageField
			restricted
			"CannotUse_\Bypass_\Approval_\CodeForUnits-onlyTransactions"
		CreatorAndJournalApproverError		is a MessageField
			restricted
			"PersonCreatingTheJournalCannotBeTheApprover"
		ApprovalLevelsMissing		is a MessageField
			restricted
			"ApprovalCodeHasNoApprovalLevels"
		ApprovalTeamHasNoMembers	is a MessageField
			restricted
			"ApprovalTeamHasNoMembers"
		InvalidEscalationSettings	is a MessageField
			restricted
			"ApprovalCodeHasInvalidEscalationSettings"
		InactiveApprovers	is a MessageField
			restricted
			"ApprovalCodeHasInactiveResources"
		FundBalanceExceeded is a MessageField
			restricted
			"CashCodeFundBalanceAmountExceeded"
		CustodialAccountBalanceExceeded is a MessageField
			restricted
			"CustodialAccountBalanceExceeded"
		JournalOutOfBalanceError	is a MessageField
			restricted
			"CannotRelease,_\JournalIsOutOfBalance"

       	DerivedCopyOptionInitialValue is a DerivedField
            type is Numeric 1
            restricted
            if (ValidForCopyOptionOtherThanNewJournal)
                return 2 
            else
                return 0

		DerivedEliminationLedger is a DerivedField					
			type is like Ledger
			restricted
			if (GLInterEntityRelationRel exists)
				return GLInterEntityRelationRel.EliminationLedger
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSourceSystemJournalEntry"

		ContextMessageText is a MessageField
			restricted
			"GlobalLedgerJournalControl<GeneralLedgerJournalControl>"
			
    	DerivedJournalType  is a DerivedField
			type is Numeric 1
			restricted
    		if (UseInputValue)
    			return 0
    		else
				return JournalType
		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
        TotalFunctionalAmount is a DerivedField
        	type is like InternationalAmount 
        	restricted
        	return (FunctionalDebitAmount + FunctionalCreditAmount)
        TotalAlternateAmount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (AlternateDebitAmount + AlternateCreditAmount)
        TotalAlternate2Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Alternate2DebitAmount + Alternate2CreditAmount)
        TotalAlternate3Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Alternate3DebitAmount + Alternate3CreditAmount)        	
        TotalAutoReverseAmount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (AutoReverseDebitAmount + AutoReverseCreditAmount)
        TotalRpt1Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Rpt1DebitAmount + Rpt1CreditAmount)
        TotalRpt2Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Rpt2DebitAmount + Rpt2CreditAmount)
        TotalRpt3Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Rpt3DebitAmount + Rpt3CreditAmount)
        TotalRpt4Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Rpt4DebitAmount + Rpt4CreditAmount)
        TotalRpt5Amount is a DerivedField
        	type is like InternationalAmount
        	restricted
        	return (Rpt5DebitAmount + Rpt5CreditAmount)
        TotalUnits is a DerivedField
        	type is like UnitsAmount
        	restricted
        	return (UnitsDebits + UnitsCredits) 
        TotalAutoReverseUnits is a DerivedField
        	type is like UnitsAmount
        	restricted
        	return (AutoReverseUnitsDebits + AutoReverseUnitsCredits)         	       	
        DerivedCommentLabel is a DerivedField
        	type is Alpha size 15
        	restricted
        	if (HasComments)	
        		return "HasComment"
        DerivedDocumentLabel is a DerivedField
        	type is Alpha size 15
        	restricted
        	if (HasDocuments)
        		return "HasDocument"
        DerivedGLTransaction is a DerivedField
        	type is Numeric 12
        	restricted
			return last GLTransactionRel.GeneralLedgerTransaction
        DerivedGLTransactionForElim is a DerivedField
        	type is Numeric 12
        	restricted
			return last GeneralLedgerTransaction set.GeneralLedgerTransaction
		InterZonePayablesAccount			is a DerivedField
			type is AlphaUpper 26
			restricted
			LocalSystemAccount = SystemAccount.ZonePayables 
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.ZonePayablesAndReceivables 
				return first SystemAccountRel.GeneralLedgerChartAccount
		InterZoneReceivablesAccount			is a DerivedField
			type is AlphaUpper 26
			restricted
			LocalSystemAccount = SystemAccount.ZoneReceivables 
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.ZonePayablesAndReceivables 
				return first SystemAccountRel.GeneralLedgerChartAccount

		AutoBalanceConfirmationMessage is a DerivedField
    		type is Alpha 150
			restricted
			LocalOutOfBalanceMessage      = AutoBalanceErrorMessage
			if (!TotalAutoReverseAmount	  = 0)
				LocalOutOfBalanceMessage += AutoReverseAmountMessage
			if (!TotalFunctionalAmount	  = 0)
				LocalOutOfBalanceMessage += FunctionalAmountMessage
			if (!TotalAlternateAmount	  = 0)
				LocalOutOfBalanceMessage += AlternateAmountMessage
			if (!TotalAlternate2Amount	  = 0)
				LocalOutOfBalanceMessage += Alternate2AmountMessage
			if (!TotalAlternate3Amount	  = 0)
				LocalOutOfBalanceMessage += Alternate3AmountMessage
			if (!TotalRpt1Amount		  = 0)
				LocalOutOfBalanceMessage += ReportOneMessage
			if (!TotalRpt2Amount		  = 0)
				LocalOutOfBalanceMessage += ReportTwoMessage
			if (!TotalRpt3Amount		  = 0)
				LocalOutOfBalanceMessage += ReportThreeMessage
			if (!TotalRpt4Amount		  = 0)
				LocalOutOfBalanceMessage += ReportFourMessage
			if (!TotalRpt5Amount		  = 0)
				LocalOutOfBalanceMessage += ReportFiveMessage
			return LocalOutOfBalanceMessage
		AutoBalanceErrorMessage		is a MessageField
			restricted
			"AutoBalanceFor"
		AutoReverseAmountMessage is a StringField
    		type is Alpha 50
			restricted
			" AutoReverse:"
			TotalAutoReverseAmount
		FunctionalAmountMessage is a StringField
    		type is Alpha 50
			restricted
			" Functional:"
			TotalFunctionalAmount
		AlternateAmountMessage is a StringField
    		type is Alpha 50
			restricted
			" Alternate:"
			TotalAlternateAmount
		Alternate2AmountMessage is a StringField
    		type is Alpha 50
			restricted
			" Alternate2:"
			TotalAlternate2Amount
		Alternate3AmountMessage is a StringField
    		type is Alpha 50
			restricted
			" Alternate3:"
			TotalAlternate3Amount								
		ReportOneMessage is a StringField
    		type is Alpha 50
			restricted
			" "
			FinanceEnterpriseGroup.ReportOne
			":"
			TotalRpt1Amount
		ReportTwoMessage is a StringField
    		type is Alpha 50
			restricted
			" "
			FinanceEnterpriseGroup.ReportTwo
			":"
			TotalRpt2Amount
		ReportThreeMessage is a StringField
    		type is Alpha 50
			restricted
			" "
			FinanceEnterpriseGroup.ReportThree
			":"
			TotalRpt3Amount
		ReportFourMessage is a StringField
    		type is Alpha 50
			restricted
			" "
			FinanceEnterpriseGroup.ReportFour
			":"
			TotalRpt4Amount
		ReportFiveMessage is a StringField
    		type is Alpha 50
			restricted
			" "
			FinanceEnterpriseGroup.ReportFive
			":"
			TotalRpt5Amount
		JournalMessage				is a MessageField
			restricted
			"Journal"
		PendingBudgetEditText		is a MessageField
			"PendingBudgetEdit"
		AutoBalanceMessage			is a MessageField
			restricted
			"AutomaticBalancingEntry"
		ErrorBalanceMessage			is a MessageField
			restricted
			"BalancingEntry"
		CurrencyBalanceMessage		is a MessageField
			restricted
			"CurrencyBalancingEntry"
		FromZoneBalancingMessage	is a MessageField
			restricted
			"FromZoneBalancingEntry"
		ToZoneBalancingMessage		is a MessageField
			restricted
			"ToZoneBalancingEntry"
		ElimCurrencyBalanceMessage		is a MessageField
			restricted
			"CurrencyBalancing_\EliminationEntry"
		ElimFromZoneBalancingMessage	is a MessageField
			restricted
			"FromZoneBalancing_\EliminationEntry"
		ElimToZoneBalancingMessage		is a MessageField
			restricted
			"ToZoneBalancing-\EliminationEntry"
		DerivedJournalizeGroup		is a DerivedField
			type is AlphaUpper 30
			restricted
			return "GL"+AccountingEntity+GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod+GeneralLedgerJournalControl
		GlSystemMessage				is a MessageField
			restricted
			"GL"
		JournalControlLinkBack 		is a MessageField
        	restricted
			"<linkback(webapp is JournalApprover navigation is JournalLinkbackNav text is \"ViewJournal\")>"
		JournalApprovalTitle		is a StringField
			type is Alpha 150
			restricted
			FinanceEnterpriseGroup.AccountingEntityLabel
			"-"
			AccountingEntity
			":Journal-"
			GeneralLedgerJournalControl
		ActorSecurityGroup is a DerivedField
			type is like AccountingEntitySecurityGroup
			return actor.context.AccountingEntitySecurityGroup
		DerivedCurrentApprovalResource is a DerivedField
			type is Numeric 9
			restricted
#ifdef module sharedfinance
			return first CurrentApprovalCodeLevelRel.Approver
#endif
#ifndef module sharedfinance
			return 0
#endif

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
#ifdef module sharedfinance
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor
#endif
#ifndef module sharedfinance
			return blank
#endif

		DerivedCurrentApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
#ifdef module sharedfinance
			return first CurrentApprovalCodeLevelRel.ApprovalTeam
#endif
#ifndef module sharedfinance
			return blank
#endif

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
#ifdef module sharedfinance
			include BuildTeamApproverActorList
			return LocalApproverList
#endif
#ifndef module sharedfinance
			return blank
#endif

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
#ifdef module sharedfinance
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays	
			else
				return 10000
#endif
#ifndef module sharedfinance
			return 0
#endif

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
#ifdef module sharedfinance
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99
#endif
#ifndef module sharedfinance
			return 0
#endif
		DerivedJournalZoneTotalRecords	is a DerivedField
			type is Numeric 4
			restricted
			return instance count of GeneralLedgerJournalControl.GeneralLedgerZoneTotalRel
		RejectedMessage 			is a MessageField
			restricted
			"Rejected"
		ApprovedMessage 			is a MessageField
			restricted
			"Approved"
		JournalRejectedMessage		is a StringField
			type is Alpha 150
			restricted
			JournalMessage
			" "
			GeneralLedgerJournalControl
			" "
			RejectedMessage
		JournalApprovedMessage		is a StringField
			type is Alpha 150
			restricted
			JournalMessage
			" "
			GeneralLedgerJournalControl
			" "
			ApprovedMessage

    	OneByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"           "
			LocalAccountingUnit
			
    	TwoByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"          "
			LocalAccountingUnit
    	
    	ThreeByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"         "
    		LocalAccountingUnit
    		
    	FourByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"        "
    		LocalAccountingUnit
    	
    	FiveByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"       "
    		LocalAccountingUnit
    	
		SixByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"      "
    		LocalAccountingUnit
		
		SevenByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"     "
    		LocalAccountingUnit
		
		EightByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"    "
    		LocalAccountingUnit
		
		NineByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"   "
    		LocalAccountingUnit
		
		TenByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		"  "
    		LocalAccountingUnit
		
		ElevenByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		" "
    		LocalAccountingUnit	
    		
		TwelveByteEntityOrgCode is a StringField
    		type is AlphaUpper 35
    		restricted
    		LocalEntity
    		LocalAccountingUnit	
    	
    	DerivedOrgCode is a DerivedField
    		type is AlphaUpper 35
    		restricted
    		if (LocalEntity size = 1)
    			return OneByteEntityOrgCode
    		else
    		if (LocalEntity size = 2)
    			return TwoByteEntityOrgCode
    		else
    		if (LocalEntity size = 3)
    			return ThreeByteEntityOrgCode
    		else
    		if (LocalEntity size = 4)
    			return FourByteEntityOrgCode
            else
            if (LocalEntity size = 5)
            	return FiveByteEntityOrgCode		
			else
        	if (LocalEntity size = 6)
        		return SixByteEntityOrgCode
    		else
            if (LocalEntity size = 7)
            	return SevenByteEntityOrgCode	
        	else
            if (LocalEntity size = 8)
            	return EightByteEntityOrgCode	
        	else
            if (LocalEntity size = 9)
        		return NineByteEntityOrgCode	
        	else
            if (LocalEntity size = 10)
            	return TenByteEntityOrgCode	
        	else
            if (LocalEntity size = 11)
            	return ElevenByteEntityOrgCode	
        	else
            	return TwelveByteEntityOrgCode

		DerivedYear is a DerivedField
			type is AlphaUpper size 4
			restricted
			return PostingDate year

		DerivedMonth is a DerivedField
			type is Numeric size 2
			restricted
			return PostingDate month
			
		DerivedSequence6 is a DerivedField
			type is AlphaRight size 6
			restricted
			return LocalSequenceNum6

		DerivedSequence12 is a DerivedField
			type is AlphaRight size 12
			restricted
			return LocalSequenceNum12

 		DerivedPaddedMonth is a DerivedField
			type is AlphaUpper 2
			restricted
			if (PostingDate month < 10)
				DerivedPaddedMonth	= "0" + DerivedMonth
			else
				return PostingDate month
            
 		DerivedZeroPaddedSequenceNum12 is a DerivedField
 			type is AlphaUpper size 12
 			restricted
 			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence12)
 			
		DerivedZeroPaddedSequenceNum6 is a DerivedField
 			type is AlphaUpper size 6
  			restricted
 			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence6)

  		DerivedStructuredJournalReferenceNumber is a DerivedField
 			type is AlphaUpper size 50 		
  			restricted
  			DerivedStructuredJournalReferenceNumber = LocalTempJournalReference text

		NumericGeneralLedgerCalendarPeriod is a DerivedField
			type is Numeric 7
			restricted
			return GeneralLedgerCalendarPeriod

 		DerivedCloseLedger		is a DerivedField								
			type is AlphaUpper 20
			return LocalReportingBasis + " CLOSE"

  		DerivedYearEndStructuredJournalReferenceNumber is a DerivedField		
 			type is AlphaUpper size 50 		
  			restricted
  			DerivedYearEndStructuredJournalReferenceNumber = LocalTempYearEndJournalReference text

		DerivedYearEndYear is a DerivedField									
			type is AlphaUpper size 4
			restricted
			return LocalYear

		DerivedCalendarPeriodString is a StringField
			type is AlphaUpper 20
			restricted
			LocalYear
			"000"


		DerivedAccountingEntityNameID is a DerivedField
			type is Alpha 40
			default label is "AccountingEntity"
			if (AccountingEntity entered)	
				return AccountingEntity + " (" + AccountingEntity.Name + ")"
			else
				return ""
		DerivedJournalID is a DerivedField
			type is Alpha 40
			default label is "Journal"
			if (GeneralLedgerJournalControl entered)	
				return GeneralLedgerJournalControl + " (" + Description + ")"
			else
				return ""



#ifdef module integration	
		DerivedFunctionalDebitAmt is a DerivedField 
	        type is Alpha size 100
	        restricted 
	        return FunctionalDebitAmount
		
		DerivedReleaseOperator is a DerivedField
			type is Alpha size 250
			restricted
			return GeneralLedgerJournalControl.ReleaseOperator
			
		DerivedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8]
				
		DerivedPostingDate is a DerivedField
			type is Alpha size 25
			restricted
			return BODPostingDateTimeStamp[1:4] + "-" + BODPostingDateTimeStamp[5:6] + "-" + BODPostingDateTimeStamp[7:8]
							
		DerivedPostOperator is a DerivedField
			type is Alpha size 250
			restricted
			return GeneralLedgerJournalControl.PostingOperator
			
		DerivedGRCJournalType is a DerivedField
			type is Alpha size 150
			restricted
			if(JournalType = 0)
				DerivedGRCJournalType = "Normal"
			else 
			if(JournalType = 1)
				DerivedGRCJournalType = "Inter Entity"
			else 
			if(JournalType = 2)
				DerivedGRCJournalType = "Auto Reverse Normal"	
			else 
			if(JournalType = 3)
				DerivedGRCJournalType = "Auto Reverse Inter Entity"
			else 
			if(JournalType = 4)
				DerivedGRCJournalType = "Manual Encumbrance"
			else
				DerivedGRCJournalType = ""
			return 	DerivedGRCJournalType
		
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedSSJEProcessMethod is a DerivedField
			type is Boolean
			restricted
			LocalConfigurationParameter = "SSJEProcessMethod"
			if (FSMBODConfigurationParameterRel.Value = "B")
				return true
		
		DerivedSSJEBatchCounterValue is a DerivedField
			type is Numeric size 9
			restricted
			LocalConfigurationParameter = "SSJEBatchCounter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedSSJEBatchCounter is a DerivedField
			type is Numeric size 9
			restricted
			if (DerivedSSJEBatchCounterValue > 0)
				return DerivedSSJEBatchCounterValue
			else
				return 1000

		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + AccountingEntity
		
		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCalendarPeriod + DerivedDelimiter + GeneralLedgerJournalControl using "%d"
 		
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted
			return "infor-nid:" + DerivedTenantID +":" + BODAccountingEntity + ":" +DerivedDefaultBODLocation+ ":" +DerivedDocumentID + ":" +BODRevision+"?SourceSystemJournalEntry&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker									
			
		DerivedBatchID is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedSSJEProcessMethod)
				return	DerivedLogicalID +":" + DerivedDisplayID
			else 
				return ""
#endif		
		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID
			
		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCurrentTimeStamp = current timestamp
			return BODCurrentTimeStamp
			
		MassBODTitleDate is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[7:8]+BODCurrentTimeStamp[5:6]+BODCurrentTimeStamp[1:4]
			
		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
		
 		BODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODUpdateTimeStamp = update stamp.timestamp
			return BODUpdateTimeStamp
			
		BODFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODUpdateTimeStamp[1:4] + "-" + BODUpdateTimeStamp[5:6] + "-" + BODUpdateTimeStamp[7:8] + "T" + BODUpdateTimeStamp[9:10] + ":" + BODUpdateTimeStamp[11:12] + ":" + BODUpdateTimeStamp[13:14] + "Z"
 		
		BODRevision is a DerivedField
			type is Alpha 25
			return ""
					
		DerivedDefaultBODLocation is a DerivedField
			type is AlphaUpper size 20
			return ""
		
 		DerivedDisplayID is a DerivedField
			type is Alpha size 12
			restricted
			return GeneralLedgerJournalControl using "%d"
			
		DerivedCreatedBy is a DerivedField
			type is Alpha size 60
			restricted
			return create stamp.actor
			
		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor
			
		BODPostingDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODPostingDateTimeStamp = PostingDate
			return BODPostingDateTimeStamp
			
		BODFormattedPostingDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODPostingDateTimeStamp[1:4] + "-" + BODPostingDateTimeStamp[5:6] + "-" + BODPostingDateTimeStamp[7:8]
		
		BODCalendarYear is a DerivedField
			type is Alpha size 5
			restricted
			return GeneralLedgerCalendarPeriod.Year
			
		BODCalendarPeriod is a DerivedField
			type is Alpha size 25
			restricted
			return GeneralLedgerClosePeriod.PeriodName
		
		BODJeType is a DerivedField
			type is Alpha size 25
			restricted
			if (JournalType="0")
				return "Normal"
			else
			if (JournalType="1")
				return "Inter Entity"
			else
			if (JournalType="2")
				return "Auto Reverse Normal"
			else
			if (JournalType="3")
				return "Auto Reverse Inter Entity"
			else
				return ""
		
		DerivedPostingActor is a DerivedField
			type is Alpha size 250
			restricted
			return GeneralLedgerJournalControl.PostingOperator
		
		DerivedGeneralLedgerCalendarPeriod is a DerivedField
			type is Alpha size 20
			restricted
			return	GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			

		SourceSystemJournalEntryXML is a DerivedField 
	        type is XMLDocument
	        restricted 
			SourceSystemJournalEntryXML = template.IONSyncSourceSystemJournalEntry_GeneralLedgerJournalControl_Header_ST document for this instance
#ifdef module integration			
		DerivedIntegrationType is a DerivedField
			type is Alpha size 10
			restricted
			LocalConfigurationParameter = "IntegrationApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
    	DerivedJournalRefNum is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedIntegrationType = "Local.ly" and AccountingEntity.AddressCode.PostalAddress.Country = "FR" and GeneralLedgerJournalControlRefRel exists)
				return GeneralLedgerJournalControlRefRel.JournalReferenceNumber
		    else
		    	return ""
		    	
		DerivedSystem is a DerivedField
			type is Alpha 10
			restricted
			if(DerivedIntegrationType = "Local.ly")
				return System
			else
				return ""

		DerivedActionCode is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerJournalControlRefRel.JournalReferenceNumber entered)
				return "Replace"
			else
				return "Add"		
#endif		    	

		SourceSystemJournalEntryBatchXML is a DerivedField 
	        type is XMLDocument
	        restricted 
			SourceSystemJournalEntryBatchXML = template.IONSyncSourceSystemJournalEntry_GeneralLedgerJournalControl_Batch_Header_ST document for this instance


		CompletionMessage is a DerivedField
			type is MessageField
			restricted
			if (System.EncumbranceOption.TrackAndEdit)
				return JournalWithTrackAndEdit
			else
				return JournalWithNoTrackAndEdit
				
		JournalWithTrackAndEdit is a MessageField
			restricted
			"JournalWillBeReleasedIfBudgetEditsArePassed"		
		
		JournalWithNoTrackAndEdit is a MessageField
			restricted
			"JournalReleaseComplete"	
			
		UnreleasedStatusLabel is a LabelField
			"Unreleased"
		ReleasedStatusLabel is a LabelField
			"Released"
		PendingApprovalStatusLabel is a LabelField
			"PendingApproval"
		CopyInProcessStatusLabel is a LabelField
			"CopyInProcess"
		PostInProcessStatusLabel is a LabelField
			"PostInProcess"
		PostedStatusLabel is a LabelField
			"Posted"
		DeletedStatusLabel is a LabelField
			"Deleted"
		DeleteInProcessStatusLabel is a LabelField
			"DeleteInProcess"
		
		StatusTagDisplay is a DerivedField
			type is MessageField
			default label is "Status"
			if (Status.Unreleased)
				return UnreleasedStatusLabel
			if (Status.Released)
				return ReleasedStatusLabel
			if (Status.PendingApproval)
				return PendingApprovalStatusLabel
			if (Status.CopyInProcess)
				return CopyInProcessStatusLabel
			if (Status.PostInProcess)
				return PostInProcessStatusLabel
			if (Status.Posted)
				return PostedStatusLabel
			if (Status.Deleted)
				return DeletedStatusLabel
			if (Status.DeleteInProcess)
				return DeleteInProcessStatusLabel
		
#ifdef module idm		
		DerivedIDMConnected is a DerivedField
			type is Boolean
			restricted
			if (IDMConfigurationRel exists)
				IDMConnected = true
				invoke BackgroundTestConnection IDMConfigurationRel
					resume on error
						IDMConnected = false
				return IDMConnected
#endif
		DerivedOneYearReplicationData is a DerivedField 
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false

		MatrixPendingApprovalCount	is a DerivedField
			type is Numeric size 6
			if (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixPendingApprovalRel exists)
				return instance count of ResponsibilityMatrixPendingApprovalRel
			else
				return 0

		MatrixRejectedCount	is a DerivedField
			type is Numeric size 6
			if (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixRejectedRel exists)
				return instance count of ResponsibilityMatrixRejectedRel
			else
				return 0

		ProcessIndicatorNotFoundMessage is a LabelField
			"ProcessIndicatorNotFound"

		DerivedAppsValue	is a DerivedField
			type is like PfiAppsValue
			restricted
			return "JournalApproval" + UniqueID

		DerivedMilestoneLabel is a DerivedField
			type is Text
			restricted
			DerivedMilestoneLabel += "Level "+ ApprovalLevel
#ifdef module sharedfinance
			if (Approver entered)
				DerivedMilestoneLabel += " - " + Approver.PreferredGivenName
				DerivedMilestoneLabel += " " + Approver.PreferredFamilyName
			else
			if (ApproverTeam entered)
				DerivedMilestoneLabel += " - " + ApproverTeam.FinanceTeam.Description
#endif

		DerivedApprovalJSON is a DerivedField
			type is Text
			restricted
			LocalCounter = 0
			DerivedApprovalJSON = "{ "
#ifdef module sharedfinance
			for each ApprovalCode.ApprovalCodeResourceRel  
				if (LocalCounter > 0)
					DerivedApprovalJSON += ","
				increment LocalCounter
				LocalApprovalLevel = each.ApprovalLevel
				DerivedApprovalJSON += "\"" + LocalApprovalLevel + "\": {"
				DerivedApprovalJSON += "\"Label\": \"Level "+ LocalApprovalLevel
				if (each.Approver entered)
					DerivedApprovalJSON += " - " + each.Approver.PreferredGivenName
					DerivedApprovalJSON += " " + each.Approver.PreferredFamilyName
				else
				if (each.ApprovalTeam entered)
					DerivedApprovalJSON += " - " + each.ApprovalTeam.Description
				DerivedApprovalJSON += "\", "
				DerivedApprovalJSON += "\"Approver\": \"" + each.Approver + "\", "
				DerivedApprovalJSON += "\"Actor\": \"" + each.Approver.FinanceResourceActor + "\", "
				DerivedApprovalJSON += "\"ApprovalTeam\": \"" + each.ApprovalTeam + "\", "
				DerivedApprovalJSON += "\"TeamActorList\": ["
				LocalFirstApproverAssigned = false
				for each each.FinanceTeamMemberRel
					if (LocalFirstApproverAssigned)
						DerivedApprovalJSON += ", \"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor + "\""
					else
						DerivedApprovalJSON += "\"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor + "\""
						LocalFirstApproverAssigned = true
				DerivedApprovalJSON += "], "
				DerivedApprovalJSON += "\"EscalationDays\": " + each.EscalationDays + "}"
#endif
			DerivedApprovalJSON += "}"
			return DerivedApprovalJSON
		

  	Field Groups
		FEGAndEntity
			FinanceEnterpriseGroup
			AccountingEntity
 		FEGEntityAndPeriod
			FinanceEnterpriseGroup			
			AccountingEntity
    		GeneralLedgerClosePeriod  	
		AllAmountFields
			FunctionalDebitAmount
			FunctionalCreditAmount
			AlternateDebitAmount
			AlternateCreditAmount
			Alternate2DebitAmount
			Alternate2CreditAmount
			Alternate3DebitAmount
			Alternate3CreditAmount			
			AutoReverseDebitAmount
			AutoReverseCreditAmount
			Rpt1DebitAmount
			Rpt1CreditAmount
			Rpt2DebitAmount
			Rpt2CreditAmount
			Rpt3DebitAmount
			Rpt3CreditAmount
			Rpt4DebitAmount
			Rpt4CreditAmount
			Rpt5DebitAmount
			Rpt5CreditAmount
        	UnitsDebits	
			UnitsCredits
        	AutoReverseUnitsDebits
			AutoReverseUnitsCredits	

	Attach Rules

    Conditions
		JournalHasESTransaction
			restricted
			when (ContainsESTransaction)
		MassReleaseErrorsExist
			restricted
			when (ReleaseErrorMessage entered)
        ValidForCopyOptionOtherThanNewJournal
            restricted
            when (System = "CA"
            and   GLTransactionsForInterestAllocationRel exists)

		IsValidForElimination
			restricted
			when (JournalType.InterEntity
			and   FinanceEnterpriseGroup.EnableRelatedPartyElimination)
		IsValidStatusForElimination
			restricted
			when (IsValidForElimination
			and   EligibleForElimination)
		EnterJournalType
			restricted
			when (!GeneralLedgerJournalControl exists
			or	  Status.Unreleased)
		TransactionsExist
			restricted
			when (GeneralLedgerTransaction set exists)
		IsValidToRelease
			restricted
			when (Status.Unreleased
			and   TransactionsExist
			and  !ReleaseDate entered)
		NormalAutoReverse
			when (AutoReverse
			and   RelatedJournalConrtolRel exists)
		TransactionsAreReleased
			when (any GeneralLedgerTransaction set.Status.Released)
		WithLinkedRecurringJournal
			when (any GeneralLedgerTransaction set.RecurringJournalExists)
		IsPendingApproval
			restricted
			when (Status.PendingApproval
			and  !JournalType.ManualEncumbrance)
		IsReleased
			restricted
			when (Status.Released
			and  !JournalType.ManualEncumbrance)
		IsValidToPost
			restricted
			when (Status.Released
			and  !Released.No
			and	  HoldCode not entered)
		IsUnreleased
			restricted
			when (Status.Unreleased
			and  !JournalType.ManualEncumbrance)
		IsPosted
			restricted
			when (Status.Posted
			and  !JournalType.ManualEncumbrance)
		IsDeleted
			restricted
			when (Status.Deleted)
		IsManualCommitJournal
			restricted
			when (JournalType.ManualEncumbrance)
		RecurringJournalSystem 
			restricted
			when (System = "RJ"
			and   RelatedRJSchedule entered
			or    GeneralLedgerJournalControl.RelatedJournalTransaction.BusinessClassName = "RecurringJournalControl")
		OldRJLink
			restricted
			when (System = "RJ"      
			and  GeneralLedgerJournalControl.RelatedJournalTransaction.BusinessClassName = "RecurringJournalControl")  
		UpdatedRJLink
			restricted
			when (System = "RJ"     
			and	 GeneralLedgerJournalControl.RelatedRJSchedule.BusinessClassName = "RecurringJournalControl")
		ValidRJObject
			restricted
			when (System = "RJ"
			and   !Status.Deleted
            and   !Status.DeleteInProcess
			and    GeneralLedgerJournalControl.RelatedJournalTransaction.BusinessClassName = "RecurringJournalControl")	
		CanUnreleaseReleased
			restricted
			when (Status.Released
			and   JournalType.Normal
			and   AllowUnrelease
			and   AccountingEntity.UnreleaseOfReleasedEntries
			and   !AccountingEntity.ProcessStatus.PostInProcess)
		AlternateCurrencyExists
			restricted
			when (AccountingEntity.AlternateCurrency entered)
		AlternateCurrency2Exists
			restricted
			when (AccountingEntity.AlternateCurrency2 entered)
		AlternateCurrency3Exists
			restricted
			when (AccountingEntity.AlternateCurrency3 entered)			
		Report1Used
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyOne entered)
		Report2Used
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
		Report3Used
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyThree entered)
		Report4Used
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyFour entered)
		Report5Used
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyFive entered)
		AutoReverseExists
			restricted
			when (AutoReverseDebitAmount entered
			or    AutoReverseCreditAmount entered
			or	  AutoReverseUnitsDebits entered
			or    AutoReverseUnitsCredits entered)
		JournalAmountsAreBalanced
			restricted
			when (TotalAutoReverseAmount	= 0
			and   TotalFunctionalAmount		= 0
			and   TotalAlternateAmount		= 0
			and   TotalAlternate2Amount		= 0
			and   TotalAlternate3Amount		= 0
			and   TotalRpt1Amount			= 0
			and   TotalRpt2Amount			= 0
			and   TotalRpt3Amount			= 0
			and   TotalRpt4Amount			= 0
			and   TotalRpt5Amount			= 0)
		HasComments
			restricted
			when (GeneralLedgerJournalCommentRel exists)
		HasDocuments
			restricted
			when (GeneralLedgerJournalDocumentRel exists)
		HasHoldCode
			restricted
			when (HoldCode entered)
		BalanceByTransactionCurrency
			restricted
			when (AccountingEntity.BalanceTransactionCurrency)
		NormalJournalType
			restricted
			when (JournalType.Normal
			or	  JournalType.AutoReverseNormal)
		NewJournalType
			restricted
			when (JournalType.Normal
			or	  JournalType.InterEntity)
		EncumbranceJournalType
			restricted
			when (JournalType.ManualEncumbrance)
		NewJournalTypeNotDeleted
			restricted
			when ((JournalType.Normal
			or	   JournalType.InterEntity)
			and    !EligibleForElimination
			and	   !Status.Deleted)
		EnterpriseAndEntityCurrencyExists
			restricted
			when (AccountingEntity.AlternateCurrency entered
			or    AccountingEntity.AlternateCurrency2 entered
			or    AccountingEntity.AlternateCurrency3 entered			
			or    FinanceEnterpriseGroup.ReportCurrencyOne entered
			or    FinanceEnterpriseGroup.ReportCurrencyTwo entered
			or    FinanceEnterpriseGroup.ReportCurrencyThree entered
			or    FinanceEnterpriseGroup.ReportCurrencyFour entered
			or    FinanceEnterpriseGroup.ReportCurrencyFive entered)
		AllowCurrencyRates
			restricted
			when (EnterpriseAndEntityCurrencyExists
			and  (!GeneralLedgerJournalControl exists
			or   (GeneralLedgerJournalControl exists
			and	  AllowUnrelease)))
		DimensionIsZoned
			restricted
			when (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
		EntityIsZoned	
			restricted	
			when (AccountingEntity.AccountingUnitZoneBalancing)
		IsAutoReversedJournal	
			restricted
            when (JournalType.AutoReverseNormal
            or    JournalType.AutoReverseInterEntity)
		IsInterEntityJournal
			restricted
			when (JournalType.InterEntity
			and  !RelatedJournalTransaction entered)
		InterEntityToJournal
			restricted
			when (JournalType.InterEntity
			and   GeneralLedgerJournalControl.RelatedJournalTransaction.BusinessClassName = "GeneralLedgerJournalControl")
		IsGainLossJournal
			restricted
			when (GainLossRunSequence entered)
		BudgetErrorsExist
			restricted
			when (BudgetEditErrorRel exists
			and   Status.Unreleased)
		IsDeleteInProcess
			restricted
			when (Status.DeleteInProcess)
		GLProcessingSystems
			restricted
			when (System 	= "GL"
			or    System	= "RJ"
			or    System 	= "CA")
		IsReleaseInProcess	
			restricted
			when ((Status.Released
			and   !Released.Yes)
			or    (Status.Unreleased
			and	   ReleaseDate entered))
		RelatedJournalTransactionExists
			restricted
			when (RelatedJournalTransaction.BusinessClassName entered)
		UniqueJournalIDEntered
			when (UniqueJournalID entered)
		JournalWasCopied
			when (GeneralLedgerJournalCopyLog set exists)
		CopiedFromAnotherJournal
			when (CopiedFromJournalLogRel exists)
		ActionCreate
			when (action = "create")
		ActionUpdate
			when (!action = "create"
			and	!action = "DeleteUnreleased")
		ActionDelete
			when (action = "DeleteUnreleased")
		AccountingEntityUpdate
			when (!AccountingEntity = old AccountingEntity)
		LedgerUpdate
			when (!Ledger = old Ledger)
		PostingDateUpdate
			when (!PostingDate = old PostingDate)
		ActPostDateUpdate
			when (!ActPostDate = old ActPostDate)
		YearUpdate
			when (!GeneralLedgerClosePeriod.GeneralLedgerCloseYear = old GeneralLedgerClosePeriod.GeneralLedgerCloseYear)
		PeriodUpdate					
			when (!GeneralLedgerClosePeriod = old GeneralLedgerClosePeriod)
		JournalTypeUpdate
			when (!JournalType = old JournalType)
		JournalControlUpdate
			when (!GeneralLedgerJournalControl = old GeneralLedgerJournalControl)
		UniqueJournalIDUpdate
			when (!UniqueJournalID = old UniqueJournalID)
		DescriptionUpdate
			when (!Description = old Description)
		SystemUpdate
			when (!System = old System)
		StatusUpdate
			when (!Status = old Status)
		TransactionDateUpdate
			when (!TransactionDate = old TransactionDate)
		CurrencyTableUpdate	
			when (!CurrencyTable = old CurrencyTable)
		CurrencyUpdate
			when (!Currency = old Currency)
		GeneralLedgerEventUpdate	
			when (!GeneralLedgerEvent = old GeneralLedgerEvent)
		HoldCodeUpdate			
			when (!HoldCode = old HoldCode)
		BaseZoneAccountingUnitUPdate			
			when (!BaseZoneAccountingUnit = old BaseZoneAccountingUnit)
		BaseZoneDimension1Update			
			when (!BaseZoneDimension1 = old BaseZoneDimension1)				
		ReferenceUpdate
			when (!Reference = old Reference)
		PrimaryLedgerUpdate
			when (!PrimaryLedger = old PrimaryLedger)
		AutoReverseUpdate
			when (!AutoReverse = old AutoReverse)
		AutoReverseDateUpdate
			when (!AutoReverseDate = old AutoReverseDate)
#ifdef module sharedfinance
		ApprovalCodeUpdate
			when (!ApprovalCode = old ApprovalCode)
		ApproverUpdate
			when (!Approver = old Approver)
		ApproverTeamUpdate
			when (!ApproverTeam.FinanceTeam = old ApproverTeam.FinanceTeam)
		ApprovalLevelUpdate
			when (!ApprovalLevel = old ApprovalLevel)
		ReassignToApprovalLevelUpdate
			when (!ReassignToApprovalLevel = old ReassignToApprovalLevel)	
#endif
		ReleaseOperatorUpdate
			when (!ReleaseOperator = old ReleaseOperator)
		ReleaseDateUpdate
			when (!ReleaseDate = old ReleaseDate)
		AllowUnreleaseUpdate
			when (!AllowUnrelease = old AllowUnrelease)
		DefaultAutoReverseUpdate
			when (!DefaultAutoReverse = old DefaultAutoReverse)
		IsAutoReversedUpdate
			when (!IsAutoReversed = old IsAutoReversed)
		IsAIntercompanyBillingJournalUpdate
			when (!IsAIntercompanyBillingJournal = old IsAIntercompanyBillingJournal)
		GainLossRunSequenceUpdate
			when (!GainLossRunSequence = old GainLossRunSequence)
		JournalPostingResultUpdate
			when (!JournalPostingResult = old JournalPostingResult)
		JournalizeGroupResultUpdate
			when (!JournalizeGroupResult = old JournalizeGroupResult)
		PendingBudgetEditUpdate
			when (!PendingBudgetEdit = old PendingBudgetEdit)
		GainLossReportingBasisUpdate
			when (!GainLossReportingBasis = old GainLossReportingBasis)	
		FunctionalCurrencyUpdate
			when (!JournalCurrencyRate.AccountingEntity.FunctionalCurrency = old JournalCurrencyRate.AccountingEntity.FunctionalCurrency)
		FunctionalRateUpdate
			when (!JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate = old JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate)
		AlternateCurrencyUpdate
			when (!JournalCurrencyRate.AccountingEntity.AlternateCurrency = old JournalCurrencyRate.AccountingEntity.AlternateCurrency)
		AlternateCurrencyRateUpdate
			when (!JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate = old JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate)
		AlternateCurrency2Update
			when (!JournalCurrencyRate.AccountingEntity.AlternateCurrency2 = old JournalCurrencyRate.AccountingEntity.AlternateCurrency2)
		AlternateCurrencyRate2Update
			when (!JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate = old JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate)
		AlternateCurrency3Update
			when (!JournalCurrencyRate.AccountingEntity.AlternateCurrency3 = old JournalCurrencyRate.AccountingEntity.AlternateCurrency3)
		AlternateCurrencyRate3Update
			when (!JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate = old JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate)
		Report1Update
			when (!JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyOne = old JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyOne)
		ReportRate1Update
			when (!JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate = old JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate)
		Report2Update
			when (!JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyTwo = old JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyTwo)
		ReportRate2Update
			when (!JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate = old JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate)
		Report3Update
			when (!JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyThree = old JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyThree)
		ReportRate3Update
			when (!JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate = old JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate)
		Report4Update
			when (!JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyFour = old JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyFour)
		ReportRate4Update
			when (!JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate = old JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate)
		Report5Update
			when (!JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyFive = old JournalCurrencyRate.FinanceEnterpriseGroup.ReportCurrencyFive)
		ReportRate5Update
			when (!JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate = old JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate)
		HasJournalReferenceNumber
			when (GeneralLedgerJournalControlRefRel exists)
		CreateEncumbranceJournal
			when (actor.context.FinanceEnterpriseGroup.GLSystemTrackAndEdit)
		SecurityGroupAllowsAccess
			when ((actor.context.AccountingEntitySecurityGroup = "")
			or    (actor.context.AccountingEntitySecurityGroup != ""
			and    AccountingEntitySecurityGroupMemberRel exists))
		MemoAccountUsed
			when (any GeneralLedgerTransactionsRel.FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)


		FrontEndSplitsEnabled
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits)

		AllowFrontEndSplit
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits
			and Status.Unreleased)

		HasFrontEndSplitDistributions
			restricted
			when (FESGLTransactionsRel exist
			and Status.Unreleased)

		ExecuteFrontEndSplits
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits
			and Status.Unreleased)
		
		StatusTagYellowDisplay 
			restricted
			when (Status.Released
			or 	  Status.PendingApproval
			or    Status.PostInProcess)

		StatusTagGrayDisplay
			restricted
			when (IsDeleted
			or    Status.CopyInProcess)

		IsValidForActorContext
			restricted
			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

#ifdef module idm
		IsIDMConfigured
			restricted
			when (IDMConfigurationRel.DerivedDefaultConnection entered
			or IsIDMAuthDSConfigured)
		
		IsIDMAuthDSConfigured
			restricted
			when (config.AUTH_DS_PUBLIC_KEY != blank
			and config.AUTH_DS_SECRET_KEY != blank
			and config.AUTH_DS_URL != blank)
#endif

		ResponsibilityMatrixPendingApprovalsExist
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixPendingApprovalRel exists)

		ResponsibilityMatrixRejectedApprovalsExist
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixRejectedRel exists)

		ManualAllowed
			restricted
			when (Status.PendingApproval
			and !ResponsibilityMatrixPendingApprovalRel exists)

		InterEntityTransactionClosePeriod 
			restricted
			when (any GeneralLedgerTransaction set.ClosedPeriodAccountingEntity)

		InterEntityJournalHasClosePeriod
			restricted
			when (InterEntityTransactionClosePeriod
			and   Status.Unreleased
			and   JournalType.InterEntity)

		ApprovalCodeApprovalExists
			restricted
			when (GeneralControlApprovalProcessorRel exists
			and   first PfiWorkunitRel.HasProcessIndicator)

		AuditStatusTagBlue
			restricted
			when (GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Assigned
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Reassigned
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.PendingApprover)

		AuditStatusTagRed
			restricted
			when (GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Rejected
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Disapproved
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Cancelled
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.ManuallyRejected)

		AuditStatusTagGreen
			restricted
			when (GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Approved
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.AutoApproved
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.ManuallyApproved
			or    GeneralControlApprovalProcessorRel.last ApprovalProcessorAuditRel.Status.Released)
		
	Relations
	
		GLInterEntityRelationRel												
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.ToAccountingEntity			= LocalElimToEntity

		GeneralLedgerTransactionsRel is a GeneralLedgerTransaction set
		
        GLTransactionsForInterestAllocationRel is a GeneralLedgerTransaction set
            Instance Selection
                where (related.GeneralLedgerEvent = "INT")
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < LocalPostingDate)
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.Ledger						= Ledger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)
		EntityLedgerCurrentPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.Ledger						= Ledger
				related.GeneralLedgerClosePeriod	= AccountingEntity.CurrentPeriod
		GLCalendarPeriodPostDateRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod	= AccountingEntityLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
		AccountingEntityLedgerPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.Ledger						= Ledger
		AutoReverseGLTransactionRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.AutoReverse)
		CopyAutoReverseGLTransactionRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.AutoReverse
				and	  !related.SystemTransactionEvents)
		CopyGLTransactionRel is a GeneralLedgerTransaction set
			Instance Selection
				where (!related.SystemTransactionEvents)
		ReleasedTransactionDetailsRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.Status.Released)
		GLTransactionRel is a GeneralLedgerTransaction set
		GeneralLedgerJournalCommentRel is a GeneralLedgerJournalComment set
		GeneralLedgerJournalDocumentRel is a GeneralLedgerJournalDocument set
		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID

		BudgetEditDetailRel
			one-to-many relation to BudgetEditDetail
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.BudgetEditDetail.BudgetEditGroup	= LocalBudgetEditGroup
		GLCurrencyJournalControlRel
			one-to-one relation to GLCurrencyJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
				related.FromCurrency				= LocalCurrencyCode
		AccountingEntityHierarchyRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SubordinateAccountingEntity	= AccountingEntity
		ReportingBasisRel
			one-to-many relation to ReportingBasis
			Field Mapping uses ByAccountingEntityTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntityTopNode		= LocalEntityTopNode
				related.AccountAnalysisString		= blank
		PeriodShadowForYearRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = LocalReportingBasis.GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod		   <= AccountingEntityLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.SummaryPeriodType.Year)
		ReportingBasisYearRel								
			one-to-many relation to ReportingBasisYear
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= LocalReportingBasis
			Instance Selection
				where (related.ReportingBasisYear			>= LocalYear
				and    related.ReportingBasisYear			<  LocalReportingBasis.BasisYear)
		LedgerHierarchyRel
			one-to-one relation to LedgerHierarchy
			Field Mapping uses ByTopNodeInSubordinate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SubordinateLedger			= Ledger
				related.TopNode						= LocalLedgerTopNode
		DefaultZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByDefaultZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= AccountingEntity
		DefaultZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByDefaultZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount
		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= AccountingEntity
		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension1Structure			= FinanceEnterpriseGroup.EnterpriseDim1Structure
		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup		= UniqueID
		CodeBlockRelationRel
			one-to-one relation to CodeBlockRelation
			Field Mapping uses ByFromTo
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FromField				= 0
				related.ToField					= 1
		CodeBlockRelationDetailRel
			one-to-one relation to CodeBlockRelationDetail
			Field Mapping uses ByKeyValues
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.CodeBlockRelation		= CodeBlockRelationRel.CodeBlockRelation
				related.KeyFromValue			= Ledger
				related.KeyToValue				= AccountingEntity
		GLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.JournalizeGroup		   = DerivedJournalizeGroup
		RelatedJournalConrtolRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByRelatedJournalTransaction
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.RelatedJournalTransaction	= reference to this instance 
		InterEntityGLTransactionRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.InterEntityTransaction)
		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= AccountingEntity
				related.GeneralLedgerSystemCode		= System
		SystemClosingControlEditRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= AccountingEntity
				related.GeneralLedgerSystemCode		= LocalGeneralLedgerSystemCode
				
		GLTransactionInterfaceRel
			one-to-many relation to GLTransactionInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
			Instance Selection
				where (related.GLTransactionInterface.RunGroup = LocalRunGroup)
#ifdef module sharedfinance
		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel
		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
			Instance Selection
				where (!related.Approver.FinanceResourceActor = update stamp.actor
				and    !related.Approver.FinanceResourceActor = create stamp.actor)
		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel
			Instance Selection
				where (!related.Approver.FinanceResourceActor = update stamp.actor
				and    !related.Approver.FinanceResourceActor = create stamp.actor)
		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam
			Instance Selection
				where (!related.FinanceTeamMember.TeamMember.FinanceResourceActor = update stamp.actor  
				and    !related.FinanceTeamMember.TeamMember.FinanceResourceActor = create stamp.actor) 
		ApprovalCodeResourceByResourceRel
			one-to-one relation to ApprovalCodeResource
			Field Mapping uses ByApprover
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.Approver				= LocalApprover
		ApproverNameRel
			one-to-one relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization			= FinanceEnterpriseGroup.HROrganization
				related.Employee				= Approver				
#endif
		GeneralLedgerZoneTotalRel
			one-to-many relation to GeneralLedgerZoneTotal
			Field Mapping uses ForZoneProcessing
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
				related.AmountsExist				= true
		UniqueJournalIDRel
			one-to-one relation to GeneralLedgerJournalControl
			Field Mapping uses ByUniqueJournalID
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.UniqueJournalID		   = LocalUniqueJournalID

		CopyLogRel
			one-to-many relation to GeneralLedgerJournalCopyLog
			Field Mapping uses ByOrderCopied
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl = GeneralLedgerJournalControl
				
		CopiedToJournalRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = CopyLogRel.FinanceEnterpriseGroup
				related.AccountingEntity	        = CopyLogRel.AccountingEntity
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod    = CopyLogRel.DerivedPeriod
				related.GeneralLedgerJournalControl = CopyLogRel.DerivedJournal							

		CopiedFromJournalLogRel
			one-to-many relation to GeneralLedgerJournalCopyLog
			Field Mapping uses ByCopiedJournalID
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.CopiedJournalID		   = UniqueID
				
		CopiedFromJournalRel
			one-to-one relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.AccountingEntity	        = AccountingEntity
				related.GeneralLedgerClosePeriod    = first CopiedFromJournalLogRel.GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl = first CopiedFromJournalLogRel.GeneralLedgerJournalControl
				
#ifdef module intercobilling
		IntercompanyBillingTransactionRel
			one-to-many relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingDocument
				related.IntercompanyBillingGroup	= FinanceEnterpriseGroup
				related.OriginatingDocument			= reference to this instance

		IntercompanyBillingBillToCompanyTransactionRel  
			one-to-many relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingDocument
				related.IntercompanyBillingGroup	= FinanceEnterpriseGroup
				related.OriginatingDocument			= reference to this instance
			Instance Selection
				where (related.ToCompany			 = LocalICBillToCompany
				and    related.FromCompany			 = LocalICBillFromCompany)
#endif

		CopyActionRequestRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByClass
				related.ImplementingClass = "GeneralLedgerJournalControl"
				related.AsyncAction		  = "ReverseJournalDetail"
			Instance Selection
				where (related.DataArea = parentcontext.dataarea
				and    !related.SuccessfullyCompleted)
				
		GeneralLedgerJournalControlRefRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByGeneralLedgerJournalControl
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.BasisYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
				related.GeneralLedgerJournalControl = GeneralLedgerJournalControl
			Instance Selection 
				where (related.Ledger				= Ledger
				and    related.System               = System
				and    related.PostingDate			= PostingDate)

		ReportingBasisYearEndJournalRel															  
			one-to-one relation to  ReportingBasisYearEndJournal					
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = LocalFinanceEnterpriseGroup
				related.ReportingBasis				 = LocalReportingBasis
				related.ReportingBasisYear			 = LocalYear
				related.AccountingEntity			 = LocalEntity
				related.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal  

		GeneralLedgerJournalControlRefByLedgerYearEndRel												
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByLedgerYearEnd
				related.FinanceEnterpriseGroup		 = LocalFinanceEnterpriseGroup
				related.ReportingBasis				 = LocalReportingBasis
				related.AccountingEntity			 = LocalEntity
				related.BasisYear					 = LocalYear
			Instance Selection
				where (related.Ledger				 	 = DerivedCloseLedger
				and related.ReportingBasisYear		     = LocalYear
				and related.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal)				

		AccountingEntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.AccountingEntity			= LocalEntity

		ReportingBasisYearEndJournalTransactionByLedgerRel										
			one-to-many relation to ReportingBasisYearEndJournalTransaction
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup		 = ReportingBasisYearEndJournalRel.FinanceEnterpriseGroup
				related.ReportingBasis				 = ReportingBasisYearEndJournalRel.ReportingBasis
				related.ReportingBasisYear			 = LocalYear
				related.AccountingEntity			 = ReportingBasisYearEndJournalRel.AccountingEntity
				related.ReportingBasisYearEndJournal = ReportingBasisYearEndJournalRel.ReportingBasisYearEndJournal  
			Instance Selection
				where (related.ReportingBasisYearEndJournalTransaction.Ledger	=	DerivedCloseLedger)

		GeneralLedgerCalendarPeriodYearEndRel													
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
				related.TopNode							= LocalReportingBasis.GeneralLedgerCalendar.TopNode
				related.Year							= LocalYear
				related.PeriodType						= 1		

 		GeneralLedgerJournalControlRefBySystemRel												
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses BySystemYearEnd
				related.FinanceEnterpriseGroup		 = LocalFinanceEnterpriseGroup
				related.ReportingBasis				 = LocalReportingBasis
				related.AccountingEntity			 = LocalEntity
				related.BasisYear					 = LocalYear
				related.System						 = LocalYearEndSystem		
			Instance Selection
				where (related.ReportingBasisYear		 = LocalYear
				and related.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal)

		ReportingBasisYearEndJournalTransactionRel												
			one-to-many relation to ReportingBasisYearEndJournalTransaction
			Field Mapping uses BySystem
				related.FinanceEnterpriseGroup		 = ReportingBasisYearEndJournalRel.FinanceEnterpriseGroup
				related.ReportingBasis				 = ReportingBasisYearEndJournalRel.ReportingBasis
				related.ReportingBasisYear			 = LocalYear
				related.AccountingEntity			 = ReportingBasisYearEndJournalRel.AccountingEntity
			Instance Selection
				where (related.ReportingBasisYearEndJournal = ReportingBasisYearEndJournalRel.ReportingBasisYearEndJournal)
				
		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AccountingEntityGroup   = actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity        = AccountingEntity
		
		RecurringJournalControlRel
			one-to-one relation to RecurringJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity 			= AccountingEntity
				related.RecurringJournalControl 	= LocalRJControl		

#ifdef module closemgmt		
		ClosePeriodTaskJournalRel
			one-to-one relation to ClosePeriodTaskJournal
			Field Mapping uses symbolic key
				related.CloseManagementGroup							= LocalCloseManagementGroup
				related.ClosePeriod										= LocalCloseMgmtPeriod
				related.ClosePeriodTask									= LocalClosePeriodTask
				related.ClosePeriodTaskJournal.AccountingEntity			= AccountingEntity
				related.ClosePeriodTaskJournal.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.ClosePeriodTaskJournal.JournalEntryNumber		= GeneralLedgerJournalControl
			
		ClosePeriodTaskByJournalRel
			one-to-many relation to ClosePeriodTaskJournal
			Field Mapping uses ByGeneralLedgerJournalControl
				related.CloseManagementGroup							= FinanceEnterpriseGroup
				related.ClosePeriodTaskJournal.AccountingEntity			= AccountingEntity
				related.ClosePeriodTaskJournal.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.ClosePeriodTaskJournal.JournalEntryNumber		= GeneralLedgerJournalControl
		
		ClosePeriodTaskJournalByEntityRel
			one-to-many relation to ClosePeriodTaskJournal
			Field Mapping uses ByGeneralLedgerJournalControl
				related.CloseManagementGroup							= LocalFinanceEnterpriseGroup
				related.ClosePeriodTaskJournal.AccountingEntity			= LocalEntity
			Instance Selection
				where (related.ClosePeriodTask.TaskStatus < 5) 
		
		ClosePeriodTaskJournalAbleToCloseRel
			one-to-many relation using ClosePeriodTaskByJournalRel
			Instance Selection
				where (related.CanCloseTaskViaGLPosting)
		
		ClosePeriodTaskRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.OpenPeriodTask)
#endif

		TransactionsRequiringOffsetsRel is a GeneralLedgerTransaction set		
			Instance Selection
				where (related.FinanceCodeBlock.GeneralLedgerChartAccount	!= LocalCashOffsetAccount)

		TransactionsRequiringFundCashEditRel is a GeneralLedgerTransaction set	
			Instance Selection
				where ((related.GLProcessingSystems
				or      related.System.RecordType.User)
				and     related.FinanceCodeBlock.GeneralLedgerChartAccount.AccountSubType	= "CASH")

#ifdef module cb			
		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedesFundBalance		= true
#endif


#ifdef module integration					
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "SourceSystemJournalEntry"
            	related.FSMBODConfiguration.Direction 	= 1
            	
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker				= LocalFSMInboundBODTracker      	
#endif


	
		ProcessingTemplatesRel	
			one-to-many relation to BudgetTemplate 
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status	!= 2 
				and related.Status 		!= 0 
				and related.Status 		!= 3) 

		FESGLTransactionsRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.CreatedByFES)

		ResponsibilityMatrixRejectedRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.ResponsibilityMatrixApprovalProcessorRel.Status.Rejected)

		ResponsibilityMatrixPendingApprovalRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)

#ifdef module cam
		ExceedsCustodialAccountBalanceRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByExceedsBalance
		 		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedsBalance			= true

		CustodialAccountEditRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance

		CamTransactionsRequiringCashEditRel is a GeneralLedgerTransaction set
			Instance Selection
				where (related.CustodialProcessingSystems
				and     related.FinanceCodeBlock.GeneralLedgerChartAccount.AccountSubType	= "CASH")		
#endif
#ifdef module cb
		GLTransactionsRequiringCustodialAccountRel is a GeneralLedgerTransaction set	
			Instance Selection
				where (related.CustodialAccountRequiredForFund)	
#endif
#ifdef module idm
		IDMConfigurationRel
			one-to-one relation to IDMConfiguration
			Field Mapping uses symbolic key
				related.IDMConfiguration = actor.context.FinanceEnterpriseGroup
#endif
		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "GENERALLEDGERJOURNALCONTROL"
				related.AppsValue	= DerivedAppsValue

		GeneralControlApprovalProcessorRel
			one-to-one relation to ApprovalProcessor
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ApprovalProcessor.ApprovalType					= "GA"
				related.ApprovalProcessor.SystemCode					= System
				related.ApprovalProcessor.ApprovalTransactionForm		= ApprovalTransactionForm.GLJournalEntry
				related.ApprovalProcessor.TransactionHeader1			= AccountingEntity								
				related.ApprovalProcessor.TransactionHeader2			= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
				related.ApprovalProcessor.TransactionHeader3			= GeneralLedgerJournalControl	
				related.ApprovalProcessor.TransactionHeader4			= blank
				related.ApprovalProcessor.TransactionLine1				= blank
            	related.ApprovalProcessor.TransactionLine2            	= blank
				related.ApprovalProcessor.Transaction					= blank

    Sets
    	ByEntityLedgerJournal
    		Sort Order
    			FinanceEnterpriseGroup
    			AccountingEntity
    			Ledger
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl
		ByOriginatingInterfaceRun
			Sort Order
				FinanceEnterpriseGroup
				OriginatingInterfaceRun
    			AccountingEntity
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl				
		ByStatus
			Sort Order
				FinanceEnterpriseGroup			
				Status
				AccountingEntity
    			GeneralLedgerClosePeriod
				Ledger
				System
    			GeneralLedgerJournalControl					
		ByRelatedJournalTransaction
			Sort Order
				FinanceEnterpriseGroup
				RelatedJournalTransaction
    			AccountingEntity
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl				
		ByGainLossRun
            Instance Selection
                where (IsGainLossJournal)
			Sort Order
				FinanceEnterpriseGroup
				GainLossReportingBasis
				GainLossRunSequence
    			AccountingEntity
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl				
		ByJournalPostingResult
			Sort Order
				FinanceEnterpriseGroup
				JournalPostingResult
    			AccountingEntity
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl				
		ByEntityJournalStatus
			Sort Order
				FinanceEnterpriseGroup			
				Status
				AccountingEntity
    			GeneralLedgerClosePeriod
    			GeneralLedgerJournalControl
    	ByJournalUniqueID
    		indexed
    		Sort Order
    			UniqueID					
		ByUniqueJournalID
			Sort Order
				FinanceEnterpriseGroup
				UniqueJournalID
			Instance Selection
				where (UniqueJournalIDEntered)	
												
	Field Rules
		CurrencyTable
            initial value is FinanceEnterpriseGroup.CurrencyTable
            if(SystemClosingControlRel exists
            and SystemClosingControlRel.CurrencyTable != blank)
                default to SystemClosingControlRel.CurrencyTable
            else   
                default to FinanceEnterpriseGroup.CurrencyTable
		System
			initial value is "GL"
			default to "GL"
 		AccountingEntity
			if (AccountingEntity.ValidSystems entered
			and !GLProcessingSystems)
				constraint (System within AccountingEntity.ValidSystems)
					"InvalidSystemFor<FinanceEnterpriseGroup.AccountingEntityLabel>"
		TransactionDate
			initial value is current corporate date
			default to current corporate date
			required
		Description
			if (!Status.Unreleased)
				cannot be changed
			else
				required		
		Released
			initial value is Released.No
			default to Released.No
		GeneralLedgerEvent
			initial value is "JE"
			default to "JE"
		Ledger
			initial value is FinanceEnterpriseGroup.CoreLedger
			default to FinanceEnterpriseGroup.CoreLedger
			constraint (CodeBlockRelationDetailRel exists)
				"Invalid<FinanceEnterpriseGroup.LedgerMessage>For<FinanceEnterpriseGroup.AccountingEntityLabel>"
			required
		AutoReverseDate
			if (!FinanceEnterpriseGroup.AutoReverseWithinSamePeriod)
				constraint (AutoReverseDate		> AccountingEntityLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
					"AutoReverseDateCannotBeLessThanCurrentPeriodEndDate"
			else
				constraint (AutoReverseDate		> PostingDate)
					"AutoReverseDateMustBeGreaterThanOriginalPostDate"
		Currency
			initial value is AccountingEntity.FunctionalCurrency
			default to AccountingEntity.FunctionalCurrency
			if (Currency	!= AccountingEntity.FunctionalCurrency
			or (AccountingEntity.AlternateCurrency entered
			and Currency	!= AccountingEntity.AlternateCurrency)
			or (AccountingEntity.AlternateCurrency2 entered
			and  Currency	!= AccountingEntity.AlternateCurrency2)
			or (AccountingEntity.AlternateCurrency3 entered
			and  Currency	!= AccountingEntity.AlternateCurrency3))
				constraint (FinanceEnterpriseGroup.CurrencyTable entered)
					"CurrencyExchangeTableIsRequiredOnFinanceEnterpriseGroupForCurrencyTransaction"
			required
		JournalType
			if (JournalType changed
			and old JournalType.ManualEncumbrance)
				constraint (!TransactionsExist)
					"TransactionsExist;CannotChangeCommitmentJournalType"
		PrimaryLedger
			default to Ledger
		UniqueJournalID
			cannot be changed
		InterEntityNettingJournal 
			cannot be changed	
	
	Create Rules
		initialize ActPostDate

	Actions
		CopyJournal is an Instance Action
			valid when (NewJournalType)
			run in foreground
			completion message is "CopySubmitted"
			Parameters
				CopyOption					is Numeric 1
					States
						CopyToNewJournal					value is 1
						CopyDetailToTransactionInterface	value is 2
				NewPostDate					is Date
				NewTransactionDate			is Date
				NewUniqueJournalID			is a UniqueJournalID	

				AutoReverseOption			is Numeric 1 
					States
						OriginalJournal		value is 0 
						NonReversingLines	value is 1 
						ReversingLines		value is 2 
				ReverseAmounts 				is Boolean
				NewReference				is a Reference
				NewDescription				is like Description
				CopyJournalComments			is Boolean
				CopyTransactionComments		is Boolean
				AutoReverseTransactionsOnly is Boolean
				AssignToRunGroup			is AlphaUpper 30
				RetainCurrencyAmounts       is Boolean
				CopyAttachments				is Boolean
				NewLedger                   is a Ledger
				
			Parameter Rules
				CopyOption
					required
                    initial value is DerivedCopyOptionInitialValue
                    if (ValidForCopyOptionOtherThanNewJournal)
                        force default to CopyOption.CopyDetailToTransactionInterface
					if (Status.Unreleased)
						constraint (CopyOption.CopyToNewJournal)
							"OptionNotValidForUnreleasedJournal"
					if (EligibleForElimination)
						constraint(CopyOption.CopyToNewJournal)
							"CopyDetailTo_\Transaction_\InterfaceIsNotValidForAn_\Elimination_\Journal"						
												
				NewPostDate
					if (AccountingEntityLedgerPeriodRel.OpenPeriod)
						default to PostingDate
					else
						default to EntityLedgerCurrentPeriodRel.DerivedPeriodEndDate
					LocalPostingDate              = NewPostDate
					LocalEndDate                  = DerivedEntityCalendarPeriod
					constraint (EntityLedgerPeriodRel exists)
						"PeriodIsNotDefinedForPostingDate"
					constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
					or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
						"PeriodIsClosed"
					if (!System.RecordType.User)
						LocalGeneralLedgerSystemCode	= "GL"
					if (SystemClosingControlEditRel.Control)	
		        		constraint (NewPostDate within SystemClosingControlEditRel.ValidEntryDate)
							"NewPostDateNotWithinValidEntryDatesFor<FinanceEnterpriseGroup.AccountingEntityLabel>_<AccountingEntity>"
												
				AutoReverseTransactionsOnly
					if (CopyOption.CopyToNewJournal)				
						constraint (CopyAutoReverseGLTransactionRel exists)
							"JournalHasNoAutoReverseTransaction"
							
				NewUniqueJournalID
					if (CopyOption.CopyToNewJournal)
						if (FinanceEnterpriseGroup.RequireUniqueJournalID)
							required
						LocalUniqueJournalID = NewUniqueJournalID
						constraint (!UniqueJournalIDRel exists)
							"UniqueJournalIDAlreadyExists"
							
				AssignToRunGroup
					if (CopyOption.CopyDetailToTransactionInterface)
						required
						LocalRunGroup = AssignToRunGroup
				
				ReverseAmounts
					initial value is true
					
				RetainCurrencyAmounts
					initial value is true
											
				CopyAttachments
					constraint (CopyOption.CopyToNewJournal)
						"CopyAttachmentsIsOnlyValidForCopyToNewJournal"

			Local Fields
				LocalJournalView				is a GeneralLedgerJournalControl view
				LocalJournalTransactionView		is a GeneralLedgerTransaction view
		    	LocalSystem						is a GeneralLedgerSystemCode
				LocalAsyncID					is an AsyncActionRequest
				
			Action Rules
				if (CopyOption.CopyToNewJournal)
					if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
						invoke CopyJournalTransaction GeneralLedgerTransaction in background
							invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.PrmAccountingEntity			= AccountingEntity
							invoked.PrmClosePeriod				= GeneralLedgerClosePeriod
							invoked.PrmJournalControl			= GeneralLedgerJournalControl
							invoked.NewPostDate					= NewPostDate
							invoked.NewTransactionDate			= NewTransactionDate
							invoked.NewUniqueJournalID			= NewUniqueJournalID
							invoked.AutoReverseOption			= AutoReverseOption
							invoked.ReverseAmounts				= ReverseAmounts
							invoked.RetainCurrencyAmounts		= RetainCurrencyAmounts
							invoked.NewReference				= NewReference
							invoked.NewDescription				= NewDescription
							invoked.NewLedger					= NewLedger
							invoked.CopyJournalComments			= CopyJournalComments
							invoked.CopyTransactionComments		= CopyTransactionComments
							invoked.AutoReverseTransactionsOnly	= AutoReverseTransactionsOnly
							invoked.CopyAttachments				= CopyAttachments
					else
						invoke CopyJournalTransaction GeneralLedgerTransaction in foreground
							invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.PrmAccountingEntity			= AccountingEntity
							invoked.PrmClosePeriod				= GeneralLedgerClosePeriod
							invoked.PrmJournalControl			= GeneralLedgerJournalControl
							invoked.NewPostDate					= NewPostDate
							invoked.NewTransactionDate			= NewTransactionDate
							invoked.NewUniqueJournalID			= NewUniqueJournalID
							invoked.AutoReverseOption			= AutoReverseOption
							invoked.ReverseAmounts				= ReverseAmounts
							invoked.RetainCurrencyAmounts		= RetainCurrencyAmounts
							invoked.NewReference				= NewReference
							invoked.NewDescription				= NewDescription
							invoked.NewLedger					= NewLedger
							invoked.CopyJournalComments			= CopyJournalComments
							invoked.CopyTransactionComments		= CopyTransactionComments
							invoked.AutoReverseTransactionsOnly	= AutoReverseTransactionsOnly
							invoked.CopyAttachments				= CopyAttachments
				else
					if (GLTransactionInterfaceRel exists)
						confirmation required
							"TransactionsWillBeAddedToRunGroup<LocalRunGroup>"
					LocalAsyncID = last CopyActionRequestRel.AsyncActionRequest
					invoke ReverseJournalDetail in background
						run after LocalAsyncID
						invoked.AssignToRunGroup		= AssignToRunGroup
						invoked.NewPostingDate			= NewPostDate
						invoked.NewTransactionDate		= NewTransactionDate
						invoked.ReverseAmounts			= ReverseAmounts
						invoked.RetainCurrencyAmounts	= RetainCurrencyAmounts
						
		CopyEncumbranceJournal is an Instance Action
			valid when (EncumbranceJournalType)
			run in foreground
			completion message is "CopySubmitted"
			Parameters
				NewPostDate					is Date
				NewTransactionDate			is Date
				NewReference				is a Reference
				NewDescription				is like Description
				CopyJournalComments			is Boolean
				CopyTransactionComments		is Boolean
				RetainCurrencyAmounts       is Boolean
				CopyAttachments				is Boolean
				
			Parameter Rules
				NewPostDate
					if (AccountingEntityLedgerPeriodRel.OpenPeriod)
						default to PostingDate
					else
						default to EntityLedgerCurrentPeriodRel.DerivedPeriodEndDate
					LocalPostingDate              = NewPostDate
					LocalEndDate                  = DerivedEntityCalendarPeriod
					constraint (EntityLedgerPeriodRel exists)
						"PeriodIsNotDefinedForPostingDate"
					constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
					or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
						"PeriodIsClosed"

					
				RetainCurrencyAmounts
					initial value is true
											
			Local Fields
				LocalReverseAmounts				is Boolean
				
			Action Rules
				if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
					invoke CopyJournalTransaction GeneralLedgerTransaction in background
						invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity			= AccountingEntity
						invoked.PrmClosePeriod				= GeneralLedgerClosePeriod
						invoked.PrmJournalControl			= GeneralLedgerJournalControl
						invoked.NewPostDate					= NewPostDate
						invoked.NewTransactionDate			= NewTransactionDate
						invoked.ReverseAmounts				= LocalReverseAmounts	
						invoked.RetainCurrencyAmounts		= RetainCurrencyAmounts
						invoked.NewReference				= NewReference
						invoked.NewDescription				= NewDescription
						invoked.CopyJournalComments			= CopyJournalComments
						invoked.CopyTransactionComments		= CopyTransactionComments
						invoked.CopyAttachments				= CopyAttachments
				else						
					invoke CopyJournalTransaction GeneralLedgerTransaction in foreground
						invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity			= AccountingEntity
						invoked.PrmClosePeriod				= GeneralLedgerClosePeriod
						invoked.PrmJournalControl			= GeneralLedgerJournalControl
						invoked.NewPostDate					= NewPostDate
						invoked.NewTransactionDate			= NewTransactionDate
						invoked.ReverseAmounts				= LocalReverseAmounts	
						invoked.RetainCurrencyAmounts		= RetainCurrencyAmounts
						invoked.NewReference				= NewReference
						invoked.NewDescription				= NewDescription
						invoked.CopyJournalComments			= CopyJournalComments
						invoked.CopyTransactionComments		= CopyTransactionComments
						invoked.CopyAttachments				= CopyAttachments

		ReverseJournalDetail is an Instance Action
			restricted
			Parameters
				AssignToRunGroup			is AlphaUpper 30
				NewPostingDate				is Date
				NewTransactionDate			is Date
				ReverseAmounts 				is Boolean
				RetainCurrencyAmounts       is Boolean
				
			Parameter Rules
				AssignToRunGroup
					required
					LocalRunGroup = AssignToRunGroup
			Local Fields
				LocalSequence					is Numeric 12
				LocalUpdateCount				is Numeric 4
				
			Action Rules
				if (GLTransactionInterfaceRel exists)
					LocalSequence = last GLTransactionInterfaceRel.GLTransactionInterface.SequenceNumber

				for each GeneralLedgerTransaction set
					if (!each.SystemTransactionEvents)
						if (each.GLTransactionDetailExistsRel exists)
							for each each.GLTransactionDetailExistsRel
								LocalSequence    	  += 1
								LocalUpdateCount 	  += 1
								LocalEntity 		  = each.FinanceCodeBlock.ToAccountingEntity
								LocalAccountingUnit	  = each.FinanceCodeBlock.AccountingUnit
								invoke Create GLTransactionInterface
									fill in fields from each
									invoked.FinanceEnterpriseGroup 					= FinanceEnterpriseGroup
									invoked.GLTransactionInterface.RunGroup 		= AssignToRunGroup
									invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
									invoked.AccountingEntity						= each.AccountingEntity
	        						invoked.Status									= 0
	        						invoked.ToAccountingEntity						= each.FinanceCodeBlock.ToAccountingEntity
	        						invoked.AccountingUnit							= each.FinanceCodeBlock.AccountingUnit
									invoked.AccountCode								= each.FinanceCodeBlock.GeneralLedgerChartAccount
									invoked.GeneralLedgerEvent						= each.GeneralLedgerEvent
									invoked.JournalCode								= each.JournalCode
									if (NewTransactionDate entered)
										invoked.TransactionDate						= NewTransactionDate
									else
										invoked.TransactionDate						= each.TransactionDate
									invoked.Reference								= each.Reference
									invoked.Description								= each.Description
									invoked.CurrencyCode							= each.CurrencyCode
									if (!ReverseAmounts)
										invoked.UnitsAmount							= each.UnitsAmount
										invoked.TransactionAmount					= each.TransactionAmount
										if (RetainCurrencyAmounts)
											invoked.ReportCurrencyAmount			 = each.ReportCurrencyAmount
										else
											initialize invoked.ReportCurrencyAmount
									else
										invoked.UnitsAmount							= (each.UnitsAmount * -1)
										invoked.TransactionAmount					= (each.TransactionAmount * -1)
										if (RetainCurrencyAmounts)
											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
											invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= (each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate  	= (each.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	 	= (each.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate		= (each.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate		= (each.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate)
											invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate)
										else
											initialize invoked.ReportCurrencyAmount																												
									invoked.System									= each.System
									invoked.AutoReverse								= each.AutoReverse
									if (NewPostingDate entered)
										invoked.PostingDate 						= NewPostingDate
									else
										invoked.PostingDate							= each.PostingDate
									invoked.Project									= each.FinanceCodeBlock.Project
									invoked.FinanceDimension1						= each.FinanceCodeBlock.FinanceDimension1
									invoked.FinanceDimension2						= each.FinanceCodeBlock.FinanceDimension2
									invoked.FinanceDimension3						= each.FinanceCodeBlock.FinanceDimension3
									invoked.FinanceDimension4						= each.FinanceCodeBlock.FinanceDimension4
									invoked.FinanceDimension5						= each.FinanceCodeBlock.FinanceDimension5
									invoked.FinanceDimension6						= each.FinanceCodeBlock.FinanceDimension6
									invoked.FinanceDimension7						= each.FinanceCodeBlock.FinanceDimension7
									invoked.FinanceDimension8						= each.FinanceCodeBlock.FinanceDimension8
									invoked.FinanceDimension9						= each.FinanceCodeBlock.FinanceDimension9
									invoked.FinanceDimension10						= each.FinanceCodeBlock.FinanceDimension10
									invoked.Ledger									= each.FinanceCodeBlock.Ledger
									invoked.DocumentNumber							= each.DocumentNumber
									invoked.Resource								= each.Resource
									invoked.VendorGroupAndVendor					= each.VendorGroupAndVendor
							
								if (LocalUpdateCount = 100)
									commit transaction
									LocalUpdateCount = 0
						else
							LocalSequence    	  += 1
							LocalUpdateCount 	  += 1
							LocalEntity 		  = each.FinanceCodeBlock.ToAccountingEntity
							LocalAccountingUnit	  = each.FinanceCodeBlock.AccountingUnit
							invoke Create GLTransactionInterface
								fill in fields from each
								invoked.FinanceEnterpriseGroup 					= FinanceEnterpriseGroup
								invoked.GLTransactionInterface.RunGroup 		= AssignToRunGroup
								invoked.GLTransactionInterface.SequenceNumber 	= LocalSequence
								invoked.AccountingEntity						= each.AccountingEntity
        						invoked.Status									= 0
	        					invoked.ToAccountingEntity						= each.FinanceCodeBlock.ToAccountingEntity
	        					invoked.AccountingUnit							= each.FinanceCodeBlock.AccountingUnit
								invoked.AccountCode								= each.FinanceCodeBlock.GeneralLedgerChartAccount
								invoked.GeneralLedgerEvent						= each.GeneralLedgerEvent
								if (NewTransactionDate entered)
									invoked.TransactionDate						= NewTransactionDate
								else
									invoked.TransactionDate						= each.TransactionDate
								invoked.Reference								= each.Reference
								invoked.Description								= each.Description
								invoked.CurrencyCode							= each.CurrencyCode
								if (!ReverseAmounts)
									invoked.UnitsAmount							= each.UnitsAmount
									invoked.TransactionAmount					= each.TransactionAmount
									if (RetainCurrencyAmounts)
										invoked.ReportCurrencyAmount			= each.ReportCurrencyAmount
									else
										initialize invoked.ReportCurrencyAmount
								else
									invoked.UnitsAmount							= (each.UnitsAmount * -1)
									invoked.TransactionAmount					= (each.TransactionAmount * -1)
									if (RetainCurrencyAmounts)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= (each.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= (each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
										invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= (each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= (each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate  	= (each.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	 	= (each.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate		= (each.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate		= (each.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate)
										invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= (each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate)
									else
										initialize invoked.ReportCurrencyAmount																												
								invoked.System									= each.System
								invoked.AutoReverse								= each.AutoReverse
								if (NewPostingDate entered)
									invoked.PostingDate 						= NewPostingDate
								else
									invoked.PostingDate							= each.PostingDate
								invoked.Project									= each.FinanceCodeBlock.Project
								invoked.FinanceDimension1						= each.FinanceCodeBlock.FinanceDimension1
								invoked.FinanceDimension2						= each.FinanceCodeBlock.FinanceDimension2
								invoked.FinanceDimension3						= each.FinanceCodeBlock.FinanceDimension3
								invoked.FinanceDimension4						= each.FinanceCodeBlock.FinanceDimension4
								invoked.FinanceDimension5						= each.FinanceCodeBlock.FinanceDimension5
								invoked.FinanceDimension6						= each.FinanceCodeBlock.FinanceDimension6
								invoked.FinanceDimension7						= each.FinanceCodeBlock.FinanceDimension7
								invoked.FinanceDimension8						= each.FinanceCodeBlock.FinanceDimension8
								invoked.FinanceDimension9						= each.FinanceCodeBlock.FinanceDimension9
								invoked.FinanceDimension10						= each.FinanceCodeBlock.FinanceDimension10
								invoked.Ledger									= each.FinanceCodeBlock.Ledger
						
							if (LocalUpdateCount = 100)
								commit transaction
								LocalUpdateCount = 0						

		MakeJournalTemplate is an Instance Action
			valid when (NewJournalTypeNotDeleted)
			completion message is "TemplateCreationComplete"
			Parameters
				NewTemplate						is Alpha 20
				NewDescription					is like Description
				NewActive						is Boolean
				NewAllowMultiplePerDay			is Boolean
        		NewUseCurrentDateForPostingDate	is Boolean
        		NewAutoReverse					is Boolean
        		NewKeepAmount					is Boolean
        		NewKeepUnit						is Boolean
        		
        	Parameter Rules
				NewTemplate
					required
				NewDescription
					required
				NewActive
					initial value is true
				NewAllowMultiplePerDay
					initial value is true
				NewUseCurrentDateForPostingDate
					initial value is true
				NewKeepAmount
					initial value is true
				NewKeepUnit
					initial value is true
				
			Local Fields
				LocalIncludeLines 				is Boolean
					
			Action Rules
				LocalIncludeLines = true
				invoke Create GLJournalTemplate
					invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.GLJournalTemplate				= NewTemplate
					invoked.Description						= NewDescription
					invoked.Active							= NewActive
					invoked.Ledger							= Ledger
					invoked.AccountingEntity				= AccountingEntity
					invoked.GeneralLedgerEvent				= GeneralLedgerEvent
					invoked.AllowMultiplePerDay				= NewAllowMultiplePerDay
					invoked.UseCurrentDateForPostingDate	= NewUseCurrentDateForPostingDate
					invoked.AutoReverse						= NewAutoReverse
					invoked.JournalType						= JournalType
					invoked.Currency						= Currency
					invoked.GeneralLedgerEvent				= "JT"
				
			Exit Rules	
				if (LocalIncludeLines)
					for each CopyGLTransactionRel
						invoke Create GLJournalTemplateDetail
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.GLJournalTemplate			= NewTemplate
							invoked.FinanceCodeBlock			= each.FinanceCodeBlock
							invoked.CurrencyCode				= each.CurrencyCode
							if (NewKeepAmount)
								invoked.TransactionAmount		= each.TransactionAmount
							else
								invoked.TransactionAmount		= 0
							invoked.Reference					= each.Reference
							invoked.Description					= each.Description
							if (NewKeepUnit)
								invoked.UnitsAmount				= each.UnitsAmount
							else
								invoked.UnitsAmount				= 0
							invoked.AutoReverse					= NewAutoReverse

		UpdateJournalTotals is an Instance Action
			refresh and lock this instance
			restricted
			Parameters
				PrmFunctionalDrAmount		is Decimal 19.5 
					default label is "FunctionalDrAmount"
				PrmAlternateDrAmount		is Decimal 19.5 
					default label is "AlternateDrAmount"
				PrmAlternateDrAmount2		is Decimal 19.5 
					default label is "AlternateDrAmount2"
				PrmAlternateDrAmount3		is Decimal 19.5 
					default label is "AlternateDrAmount3"
				PrmAutoReverseDrAmount		is Decimal 19.5 
					default label is "AutoReverseDrAmount"
				PrmRpt1DrAmount				is Decimal 19.5 
					default label is "Report1DrAmount"
				PrmRpt2DrAmount				is Decimal 19.5 
					default label is "Report2DrAmount"
				PrmRpt3DrAmount				is Decimal 19.5 
					default label is "Report3DrAmount"
				PrmRpt4DrAmount				is Decimal 19.5 
					default label is "Report4DrAmount"
				PrmRpt5DrAmount				is Decimal 19.5 
					default label is "Report5DrAmount"
				PrmFunctionalCrAmount		is Decimal 19.5 
					default label is "FunctionalCrAmount"
				PrmAlternateCrAmount		is Decimal 19.5 
					default label is "AlternateCrAmount"
				PrmAlternateCrAmount2		is Decimal 19.5 
					default label is "AlternateCrAmount2"
				PrmAlternateCrAmount3		is Decimal 19.5 
					default label is "AlternateCrAmount3"
				PrmAutoReverseCrAmount		is Decimal 19.5 
					default label is "AutoReverseCrAmount"
				PrmRpt1CrAmount				is Decimal 19.5 
					default label is "Report1CrAmount"
				PrmRpt2CrAmount				is Decimal 19.5 
					default label is "Report2CrAmount"
				PrmRpt3CrAmount				is Decimal 19.5 
					default label is "Report3CrAmount"
				PrmRpt4CrAmount				is Decimal 19.5 
					default label is "Report4CrAmount"
				PrmRpt5CrAmount				is Decimal 19.5 
					default label is "Report5CrAmount"
				PrmUnitsDrAmount			is an UnitsAmount
					default label is "UnitsDrAmount"
				PrmUnitsCrAmount			is an UnitsAmount
					default label is "UnitsCrAmount"
				PrmAutoReverseUnitsDrAmount is an UnitsAmount
					default label is "AutoReverseUnitsDrAmount"
				PrmAutoReverseUnitsCrAmount is an UnitsAmount
					default label is "AutoReverseUnitsCrAmount"

			Action Rules
				include UpdateTotals

		ChangeToInterEntityJournal is an Instance Action
			refresh and lock this instance
			restricted
			Action Rules
				JournalType = JournalType.InterEntity
		
		DeleteBackground is an Instance Action
			restricted
			run in background
			Parameters
				DelBlankOutUniqueJournalID	is Boolean
			
			Action Rules
				invoke Delete GLTransactionDetailRel
				if (System.EncumbranceOption.TrackAndEdit
				or  System.EncumbranceOption.Track)
					invoke PurgeGroupTotalsForEditGroup BudgetTemplateGroupTotal
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup				= UniqueID
					invoke Purge BudgetEditErrorRel
				if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
					invoke PurgeForJournalControl GeneralLedgerTransaction in background
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= AccountingEntity
						invoked.PrmClosePeriod					= GeneralLedgerClosePeriod
						invoked.PrmJournal						= GeneralLedgerJournalControl
				else
					invoke PurgeForJournalControl GeneralLedgerTransaction in foreground
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= AccountingEntity
						invoked.PrmClosePeriod					= GeneralLedgerClosePeriod
						invoked.PrmJournal						= GeneralLedgerJournalControl
				if (DelBlankOutUniqueJournalID)
					initialize UniqueJournalID				
				Status = Status.Deleted
				
		ReleaseJournalEntries is a Set Action

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity		  is a AccountingEntity
					default label is "AccountingEntity"
				PrmBlankHoldCodeOnly	  is Boolean
					default label is "BlankHoldCodeOnly"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
					required
						"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>IsRequired"
			Local Fields
				LocalEntityHasJournalApproval		is Boolean
				LocalJournalIsInterEntity			is Boolean
				LocalUnbalancedTransactionCurrency	is Boolean
				LocalUnbalancedJournal				is Boolean
				LocalJournalCanBeReleased			is Boolean
				LocalDifferenceWithinThreshold		is Boolean
				
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroup
				and    AccountingEntity       = PrmAccountingEntity
				and    Status.Unreleased
				and    !ReleaseDate entered)			

			Sort Order
				FinanceEnterpriseGroup
				Status
				AccountingEntity
				GeneralLedgerClosePeriod
				GeneralLedgerJournalControl

			Action Rules
				Empty Set Rules
				AccountingEntity Set Rules
					Entrance Rules
						LocalEntityHasJournalApproval	= false
						if (!AccountingEntity.JournalApproval.None)
							LocalEntityHasJournalApproval	= true

				Instance Rules
					LocalJournalCanBeReleased	= true
					if (!TransactionsExist)
						LocalJournalCanBeReleased	= false
				
#ifdef module intercobilling
					if  (IsAIntercompanyBillingJournal
					and !IntercompanyBillingTransactionRel exists)
						LocalJournalCanBeReleased	= false
#endif				
					if (LocalJournalCanBeReleased)						
						include EditsForMassRelease						
					if (LocalJournalCanBeReleased						
					and LocalEntityHasJournalApproval)
						if (FunctionalDebitAmount		> AccountingEntity.JournalApprovalAmount 
						and !ApprovalCode entered)
							LocalJournalCanBeReleased	= false		
						
					if (LocalJournalCanBeReleased						
					and AccountingEntity.JournalApproval.AmountAndUnit
					and !FunctionalDebitAmount entered
					and (UnitsDebits entered
					or   UnitsCredits entered) 					
					and (!ApprovalCode entered))
						LocalJournalCanBeReleased	= false		


					if (LocalJournalCanBeReleased						
					and AccountingEntity.JournalApproval.AmountAndUnit
					and !FunctionalDebitAmount entered
					and (UnitsDebits entered
					or   UnitsCredits entered) 					
					and (ApprovalCode entered
					and (ApprovalCode = AccountingEntity.BypassApprovalCode)))
						LocalJournalCanBeReleased	= true


					if (LocalJournalCanBeReleased						
					and JournalType.InterEntity)
						LocalJournalIsInterEntity	= false
						for each GeneralLedgerTransaction set
							if (each.FinanceCodeBlock.ToAccountingEntity	= AccountingEntity)
								LocalJournalIsInterEntity	= true
						if (!LocalJournalIsInterEntity)
							LocalJournalCanBeReleased	= false

						if (!InterEntityGLTransactionRel exists)
							LocalJournalCanBeReleased	= false

					if (LocalJournalCanBeReleased						
					and AccountingEntity.BalanceTransactionCurrency)
						LocalUnbalancedTransactionCurrency	= false
						for each GLCurrencyJournalControl set
							if (each.TotalTransactionAmount	!= 0)
								LocalUnbalancedTransactionCurrency	= true

						if (LocalUnbalancedTransactionCurrency)
							LocalJournalCanBeReleased	= false
						
					if (LocalJournalCanBeReleased						
					and !AccountingEntity.AutoBalance)
						LocalUnbalancedJournal		= false
						if (!TotalAutoReverseAmount		= 0)
							LocalUnbalancedJournal		= true
						if (!TotalFunctionalAmount		= 0)
							LocalUnbalancedJournal		= true
						if (!TotalAlternateAmount		= 0)
							LocalUnbalancedJournal		= true
						if (!TotalAlternate2Amount		= 0)
							LocalUnbalancedJournal		= true
						if (!TotalAlternate3Amount		= 0)
							LocalUnbalancedJournal		= true
						if (!TotalRpt1Amount			= 0)
							LocalUnbalancedJournal		= true
						if (!TotalRpt2Amount			= 0)
							LocalUnbalancedJournal		= true
						if (!TotalRpt3Amount			= 0)
							LocalUnbalancedJournal		= true
						if(!TotalRpt4Amount			= 0)
							LocalUnbalancedJournal		= true
						if (!TotalRpt5Amount			= 0)
							LocalUnbalancedJournal		= true

						if (LocalUnbalancedJournal)
							LocalJournalCanBeReleased	= false

					if (LocalJournalCanBeReleased)
						if (!PrmBlankHoldCodeOnly)
							invoke Unreleased.Release
						else
							if (!HoldCode entered)
								invoke Unreleased.Release
					else
						invoke UpdateOnError Unreleased this instance

		BudgetEditCallBackRelease is an Instance Action
			restricted
			run in background
			
			Action Rules
				invoke Release Unreleased this instance 

				
							
		RemoveHoldCode is a Set Action
			run in foreground

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmStatus					is Numeric 1
					default label is "Status"
		            States
		                Unreleased				value is 0
		                Released				value is 1
				PrmHoldCode				  	is a GeneralLedgerHoldCode
					default label is "HoldCode"
				PrmPeriod				  	is a GeneralLedgerClosePeriod
					default label is "Period"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
					required
						"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>IsRequired"
				PrmPeriod
					required
					
			Instance Selection
				where (FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				and    AccountingEntity			= PrmAccountingEntity
				and    Status					= PrmStatus
				and	   GeneralLedgerClosePeriod = PrmPeriod
				and   ((PrmHoldCode entered
				and	    HoldCode				= PrmHoldCode)
				or     !PrmHoldCode entered))

			Action Rules
				Instance Rules
					if (Status.Unreleased)
						invoke Unreleased.ReleaseHoldCode
					else
						invoke Released.ClearHoldCode
							
		ChangeStatusAndReleasedFlag is a Set Action
			restricted

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmLedger					is a Ledger
					default label is "Ledger"
				PrmSystemCode				is a GeneralLedgerSystemCode
					default label is "SystemCode"
				PrmJournalPostingResult		is a JournalPostingResult
					default label is "JournalPostingResult"	
				PrmGeneralLedgerCalendarPeriod	is a GeneralLedgerCalendarPeriod
					default label is "GlobalLedgerCalendarPeriod"
				PrmPostingTimeStamp			is TimeStamp
					default label is "PostingTimeStamp"
				PrmReleaseInProcessOnly		is Boolean
					default label is "ReleaseInProcessOnly"
				PrmPostThroughDate			is Date		
				PrmSkipAttachRule			is a SkipAttachRule		
					
			Sort Order
				FinanceEnterpriseGroup
				Status
				AccountingEntity

				
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    AccountingEntity			= PrmAccountingEntity
				and    Status.Released
				and    HoldCode not entered
				and   ((PrmPostThroughDate entered  
				and    PostingDate <= PrmPostThroughDate)
				or     PrmPostThroughDate !entered)
				and    ((PrmGeneralLedgerCalendarPeriod entered
				and    GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod)
				or 	  !PrmGeneralLedgerCalendarPeriod entered)
				and  ((Released.Yes
				and    update stamp < PrmPostingTimeStamp
				and    !PrmReleaseInProcessOnly)
				or    !ActPostDate entered))

			Local Fields
				CommitNow					is Boolean
				LocalAsyncId 				is an AsyncActionRequest
				HasClosePeriodTaskJournals	is Boolean
				LocalPostInterEntity		is Boolean
				
			Action Rules
				Empty Set Rules
					if (!PrmReleaseInProcessOnly)
						invoke UpdateProcessStatus PrmAccountingEntity
							invoked.PrmProcessStatus			= 0
					else
						LocalAsyncId		= current async action request id
						invoke BatchPost GeneralLedgerTransaction in background	
							run after LocalAsyncId
							assign async action request id to LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.PrmAccountingEntity				= PrmAccountingEntity
							invoked.PrmGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
							invoked.PrmLedger						= PrmLedger
							invoked.PrmSystemCode					= PrmSystemCode
							invoked.PrmStatus						= 1							
							invoked.PrmJournalPostingResult			= PrmJournalPostingResult
							invoked.PrmPostingTimeStamp				= (current timestamp + 1)	
							invoked.PrmPostThroughDate				= PrmPostThroughDate		
							invoked.PrmSkipAttachRule				= true						
						
						invoke UpdateAsyncId PrmAccountingEntity
							invoked.PrmAsyncId						= LocalAsyncId 

				Set Rules

				AccountingEntity Set Rules
					Entrance Rules
						if (!PrmReleaseInProcessOnly)					
							invoke UpdateProcessStatus PrmAccountingEntity
								invoked.PrmProcessStatus			= 0
							CommitNow = true

#ifdef module closemgmt					
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						LocalEntity = PrmAccountingEntity
						if (ClosePeriodTaskJournalByEntityRel exists)
							HasClosePeriodTaskJournals = true
						else
							HasClosePeriodTaskJournals = false
#endif
						
					Exit Rules
						if (PrmReleaseInProcessOnly)
							LocalAsyncId		= current async action request id
							invoke BatchPost GeneralLedgerTransaction in background	
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmAccountingEntity				= PrmAccountingEntity
								invoked.PrmGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
								invoked.PrmLedger						= PrmLedger
								invoked.PrmSystemCode					= PrmSystemCode
								invoked.PrmStatus						= 1							
								invoked.PrmJournalPostingResult			= PrmJournalPostingResult
								invoked.PrmPostingTimeStamp				= (current timestamp + 1)					
								invoked.PrmPostThroughDate				= PrmPostThroughDate		
							
							invoke UpdateAsyncId PrmAccountingEntity
								invoked.PrmAsyncId						= LocalAsyncId 												

				Instance Rules

					if (CommitNow)
						commit transaction
						CommitNow = false

					if (!PrmReleaseInProcessOnly)										
						if (Released.Yes
						and ActPostDate entered
						and HoldCode not entered)
							if (PrmLedger entered
							and PrmSystemCode entered
							and Ledger		= PrmLedger
							and System		= PrmSystemCode)
								include JournalPostStatusChange
							else								
								if (PrmLedger entered
								and Ledger		= PrmLedger
								and !PrmSystemCode entered)
									include JournalPostStatusChange
								else
									if (PrmSystemCode entered
									and System		= PrmSystemCode
									and !PrmLedger entered)
										include JournalPostStatusChange
									else
										if (!PrmLedger entered
										and !PrmSystemCode entered)
											include JournalPostStatusChange

					if (Status.Released)
						if (Released.No)
							Released	= "Y"
							
						if (Released.Yes)
							if (!ActPostDate entered)
								ActPostDate = current corporate date
						
						if (Released.Yes
						and ActPostDate entered)
							if  (SystemClosingControlRel.AutoPost
							and	!HoldCode entered)
								BypassCubeRefresh		= true
								invoke Released.QuickPost
								commit transaction
						

		UpdateJournalControlStatus is an Instance Action
			restricted
			Parameters
				PrmStatus					is Numeric 1
					default label is "Status"
				PrmGeneralLedgerCloseYear		is a GeneralLedgerCloseYear		
					default label is "FiscalYear"								

			Action Rules
				Status					= PrmStatus

				if (PrmStatus	= 1)
					if(!AccountingEntity.ProcessStatus.PostInProcess)
						Released	= "Y"
	
					if  (SystemClosingControlRel.AutoPost
					and  Released.Yes
					and	!HoldCode entered)
						BypassCubeRefresh		= true
						invoke Released.QuickPost

                if  (PrmStatus    = 5
                and (AccountingEntityLedgerPeriodRel.PeriodStatus.Backpost
                or   AccountingEntityLedgerPeriodRel.PeriodStatus.Limited
                and  PrmGeneralLedgerCloseYear not entered)      
                or (PrmGeneralLedgerCloseYear entered           
                and AccountingEntityLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCloseYear >= PrmGeneralLedgerCloseYear))      
                	invoke UpdateReportingBasisPreviousYear

				if (PrmStatus = Status.Posted)
					ActPostDate = current corporate date
					PostingOperator = actor					
					invoke TriggerBOD GeneralLedgerJournalControl 
				
#ifdef module closemgmt					
					for each ClosePeriodTaskJournalAbleToCloseRel
						invoke CloseTask each.ClosePeriodTask
#endif

#ifdef module closemgmt
		CreateClosePeriodTaskJournal is an Instance Action
			default label is "SelectJournal"
			Parameters
				PrmCloseManagementGroup		is a CloseManagementGroup
				PrmClosePeriod				is a ClosePeriod
				PrmClosePeriodTask			is a ClosePeriodTask
			
			Parameter Rules
				PrmCloseManagementGroup
					initial value is FinanceEnterpriseGroup
					default to FinanceEnterpriseGroup
				PrmClosePeriodTask
					constraint (PrmClosePeriodTask.OpenPeriodOpenTask)
						"CannotSelectJournal;CloseTask<PrmClosePeriodTask.TaskName>IsNotScheduledOrInProcess"
									
			Action Rules 
                LocalCloseManagementGroup 	= PrmCloseManagementGroup
				LocalCloseMgmtPeriod		= PrmClosePeriod
				LocalClosePeriodTask		= PrmClosePeriodTask
                invoke Update ClosePeriodTaskJournalRel
#endif

		UpdateReportingBasisPreviousYear is an Instance Action
			restricted
			Action Rules
				for each AccountingEntityHierarchyRel
					LocalEntityTopNode		= each.TopNode
					LocalReportingBasis		= first ReportingBasisRel.ReportingBasis
					LocalYear				= last PeriodShadowForYearRel.SummaryGeneralLedgerCalendarPeriod.Year 
					LocalLedgerTopNode		= first ReportingBasisRel.LedgerTopNode
					if (LedgerHierarchyRel exists
					and LocalYear entered)
						for each ReportingBasisYearRel
							if (each.YearClosed)
								invoke OpenBasisYear each

#ifdef module sharedfinance

		UpdateApprovalLevel is an Instance Action
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
				ParmActor		is an Actor
			Action Rules
				if(!ParmEscalate)
					if(GeneralControlApprovalProcessorRel exist)
						invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
							invoked.ParmActor 	= ParmActor
							invoked.ParmStatus	= 4
				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
						if(GeneralControlApprovalProcessorRel exist)
							invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
								invoked.ParmActor	= ParmActor
								invoked.ParmStatus	= 2
				else
				if (ParmEscalate)
					include GetNextEscalationApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
					if(GeneralControlApprovalProcessorRel exist)
						if(LocalApprover entered)
							invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
								invoked.PrmFinanceResource		= LocalApprover
								invoked.PrmStatus				= 1
								invoked.PrmEscalated			= ParmEscalate
						if(LocalApproverTeam entered)
							invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
								invoked.PrmFinanceTeam			= LocalApproverTeam
								invoked.PrmStatus				= 1
								invoked.PrmEscalated			= ParmEscalate
				else
					include GetNextApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
					if(GeneralControlApprovalProcessorRel exist)
						if(LocalApprover entered)
							invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
								invoked.PrmFinanceResource		= LocalApprover
								invoked.PrmStatus				= 1
						if(LocalApproverTeam entered)
							invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
								invoked.PrmFinanceTeam			= LocalApproverTeam
								invoked.PrmStatus				= 1
#endif


		PostInProcessJournals is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"

			Sort Order
				FinanceEnterpriseGroup			
				Status
				AccountingEntity
    			GeneralLedgerClosePeriod
				Ledger
				System
    			GeneralLedgerJournalControl					

			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Status					= 4)

			Action Rules
				Instance Rules
					if (!ReleasedTransactionDetailsRel exists)
						Status		= Status.Posted
						PostingOperator = actor						
					if (ReleasedTransactionDetailsRel exists)
						if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
							invoke Post GeneralLedgerTransaction in background
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity			= AccountingEntity
								invoked.PrmGeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
								invoked.PrmJournalControl			= GeneralLedgerJournalControl
						else						
							invoke Post GeneralLedgerTransaction in foreground
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity			= AccountingEntity
								invoked.PrmGeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
								invoked.PrmJournalControl			= GeneralLedgerJournalControl
					
		
		TriggerBOD is an Instance Action
			restricted
			Action Rules
				if (FinanceEnterpriseGroup.BODTrigger)
					ActionCode	= ActionCode.Update
					if (action type.Create)
						ActionCode	= ActionCode.Create				
					increment bod id.VariationID
					include TriggerSSJERules





					
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		UpdateIsAutoReversed is an Instance Action
			restricted
			Action Rules
				IsAutoReversed = true
										
		UpdateJournalControl is an Instance Action
			restricted
			Action Rules
				if (Status.Unreleased)
					Released	= "N" 

		DeleteTransaction is a Delete Action
			restricted

		DeleteData is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmLedger					is like Ledger
					default label is "Ledger"
				PrmAccountingEntity			is like AccountingEntity
					default label is "AccountingEntity"
				PrmPrimaryLedger			is like Ledger
					default label is "Ledger"
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity 			= PrmAccountingEntity
				and	   Ledger						= PrmLedger
				and   ((PrmPrimaryLedger entered
				and    	PrimaryLedger		=  PrmPrimaryLedger)
				or	  (!PrmPrimaryLedger entered)))

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				Ledger
				PrimaryLedger

			Action Rules
				Empty Set Rules
				Instance Rules
					invoke Delete GLCurrencyJournalControl set 
					invoke DeleteTransaction 
					
		BODDataInitialLoadJournalEntryCriteria is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmFromAccountingEntity				is an AccountingEntity
				PrmToAccountingEntity				is an AccountingEntity
				PrmFromJournal						is Numeric 5
				PrmToJournal						is Numeric 5
				PrmPostingDateRange					is a DateRange
				PrmCreateDateRange					is a DateRange
				PrmFromPeriod						is a GeneralLedgerCalendarPeriod
				PrmToPeriod							is a GeneralLedgerCalendarPeriod
			Parameter Rules
			Instance Selection
				where(((PrmFinanceEnterpriseGroup entered
				and	   PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup)
				or	   PrmFinanceEnterpriseGroup not entered)
				and  ((PrmFromAccountingEntity entered
				and    PrmFromAccountingEntity <= AccountingEntity)
				or	   PrmFromAccountingEntity not entered)
				and  ((PrmToAccountingEntity entered
				and    PrmToAccountingEntity >= AccountingEntity)
				or     PrmToAccountingEntity not entered)
				and  ((PrmFromJournal entered
				and    PrmFromJournal <= GeneralLedgerJournalControl)
				or     PrmFromJournal not entered)
				and  ((PrmToJournal entered
				and    PrmToJournal >= GeneralLedgerJournalControl)
				or     PrmToJournal not entered)
				and  ((PrmFromPeriod entered
				and    PrmFromPeriod <= GeneralLedgerCalendarPeriod)
				or     PrmFromPeriod not entered)
				and  ((PrmToPeriod entered
				and    PrmToPeriod >= GeneralLedgerCalendarPeriod)
				or     PrmToPeriod not entered)
				and     (PostingDate within PrmPostingDateRange
				or		PrmPostingDateRange not entered)
				and     (create date within PrmCreateDateRange
				or		PrmCreateDateRange not entered)
				and		(Status.Posted))
			Action Rules												
				Instance Rules	
					if (FinanceEnterpriseGroup.BODTrigger)
						Service		= "GLJournalControlService"
						ActionCode	= ActionCode.Create				
						increment bod id.VariationID
						LocalMassBODTrigger = true
						include TriggerSSJERules




						
		CreateGeneralLedgerJournalControlRef is a Set Action
			restricted
			default label is "CreateGlobalLedgerJournalControlRef"
			run in foreground
			Parameters
				PrmReportingBasis 				is a ReportingBasis
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmLedgerTopNode				is like Ledger
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
  	        	PrmBasisYear					is a Year					
    	        			
			Local Fields
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6	
    		
			Instance Selection		
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    AccountingEntity             = PrmAccountingEntity
				and   (NumericGeneralLedgerCalendarPeriod >= PrmStartDateJulian
				and    NumericGeneralLedgerCalendarPeriod <= PrmEndDateJulian)
				and	   Status.Posted)	

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				PostingDate 
				GeneralLedgerJournalControl		
			
			Action Rules
				Set Rules													
					Entrance Rules
						if (PrmReportingBasis.YearEndJournalReports)						
							LocalReportingBasis						=	PrmReportingBasis										
							LocalEntity								=	PrmAccountingEntity																				
							LocalFinanceEnterpriseGroup				=	PrmFinanceEnterpriseGroup								
							LocalYear								=	PrmBasisYear
							LocalYearEndSystem						=	"GL"
							
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetOpening
							if (ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger				= DerivedCloseLedger	
								LocalLineCounter6  			    = 1
								LocalSequenceNum6				= LocalLineCounter6
								LocalLineCounter12 			    = 1	
								LocalSequenceNum12				= LocalLineCounter12
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat		
																		
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
									invoked.ReportingBasis 				= LocalReportingBasis
									invoked.AccountingEntity 			= LocalEntity
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger						= LocalYearEndLedger
									invoked.System						= LocalYearEndSystem 
									initialize invoked.PostingDate
									invoked.BasisYear					= LocalYear
									invoked.ReportingBasisYear			= LocalYear
									invoked.ReportingBasisYearEndJournal =	LocalReportingBasisYearEndJournal
									initialize invoked.GeneralLedgerClosePeriod									
									invoked.GeneralLedgerCalendarPeriod	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod						
									invoked.JournalReferenceSequence	= LocalLineCounter12					
					Exit Rules												
						if (PrmReportingBasis.YearEndJournalReports)
							LocalFinanceEnterpriseGroup				=	PrmFinanceEnterpriseGroup							
							LocalReportingBasis						=	PrmReportingBasis										
							LocalEntity								=	PrmAccountingEntity																										
							LocalYear								=	PrmBasisYear
							LocalYearEndSystem						=	"GL"
													
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.ProfitAndLoss																																			
							if (ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger				= DerivedCloseLedger
								LocalLineCounter6  			   += 1
								LocalSequenceNum6				= LocalLineCounter6
								LocalLineCounter12 			   += 1	
								LocalSequenceNum12				= LocalLineCounter12
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat		
											
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
									invoked.ReportingBasis 				= LocalReportingBasis
									invoked.AccountingEntity 			= LocalEntity
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger						= LocalYearEndLedger
									invoked.System						= LocalYearEndSystem  
									initialize invoked.PostingDate
									invoked.BasisYear					= LocalYear
									invoked.ReportingBasisYear			= LocalYear
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 = ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod 				
									invoked.GeneralLedgerCalendarPeriod	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence	= LocalLineCounter12				
																
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetClosing																
							if (ReportingBasisYearEndJournalTransactionByLedgerRel exists)
								LocalYearEndLedger				= DerivedCloseLedger
								LocalLineCounter6  			   += 1
								LocalSequenceNum6				= LocalLineCounter6
								LocalLineCounter12 			   += 1	
								LocalSequenceNum12				= LocalLineCounter12
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat		
																			
								invoke Create GeneralLedgerJournalControlRef
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
									invoked.ReportingBasis 				= LocalReportingBasis
									invoked.AccountingEntity 			= LocalEntity
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report
									invoked.Ledger						= LocalYearEndLedger
									invoked.System						= LocalYearEndSystem
									initialize invoked.PostingDate						
									invoked.BasisYear					= LocalYear
									invoked.ReportingBasisYear			= LocalYear
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal
									invoked.GeneralLedgerClosePeriod	 = ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod											
									invoked.GeneralLedgerCalendarPeriod	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence	= LocalLineCounter12			
				Instance Rules
					LocalLedgerTopNode = PrmLedgerTopNode
					
					if (LedgerHierarchyRel exists)
						LocalLineCounter6  += 1
						LocalSequenceNum6   = LocalLineCounter6
						LocalLineCounter12 += 1	
						LocalSequenceNum12  = LocalLineCounter12
						LocalTempJournalReference = PrmReportingBasis.JournalReferenceFormat
						
						invoke Create GeneralLedgerJournalControlRef
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis 				= PrmReportingBasis
							invoked.AccountingEntity 			= AccountingEntity
							invoked.GeneralLedgerClosePeriod 	= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl = GeneralLedgerJournalControl
							invoked.JournalReferenceNumber		= DerivedStructuredJournalReferenceNumber
							invoked.Status 						= Status
							invoked.Ledger						= Ledger
							invoked.System						= System
							invoked.PostingDate 				= PostingDate
							invoked.BasisYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
							initialize invoked.ReportingBasisYear
							initialize invoked.ReportingBasisYearEndJournal						
							invoked.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod							
							invoked.JournalReferenceSequence	= LocalLineCounter12							
						
		CreateGeneralLedgerJournalControlRefPerLedger is a Set Action
			restricted
			default label is "CreateGlobalLedgerJournalControlRefPerLedger"
			run in foreground
			Parameters
				PrmReportingBasis 				is a ReportingBasis
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmLedger						is a Ledger
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
    	        PrmBasisYear					is a Year			
				PrmGLJournalControlCallBackReportingBasis 	is a GLJournalControlCallBackReportingBasis
				PrmStartingNumber							is Numeric 14
    	        			
			Local Fields
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6				
    			LocalLedger						is like Ledger
 				LocalInternalGLJournalReference	is Numeric size 14
 				LocalResult						is Boolean  
				LocalAccountingEntity			is a AccountingEntity
				LocalStartDateJulian			is Numeric 7
				LocalEndDateJulian				is Numeric 7
				LocalBasisYear					is a Year 		
    						
			Instance Selection		
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    AccountingEntity       		= PrmAccountingEntity
				and    Ledger				  		= PrmLedger			
				and   (NumericGeneralLedgerCalendarPeriod >= PrmStartDateJulian
				and    NumericGeneralLedgerCalendarPeriod <= PrmEndDateJulian)
				and	   Status.Posted) 	

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				Ledger
				PostingDate 
				GeneralLedgerJournalControl		
			
			Action Rules
				Set Rules																															
					Entrance Rules
						LocalAccountingEntity	        = PrmAccountingEntity
						LocalLedger		                = PrmLedger
						LocalStartDateJulian	        = PrmStartDateJulian
						LocalEndDateJulian		        = PrmEndDateJulian
						LocalBasisYear				    = PrmBasisYear		
						LocalInternalGLJournalReference	= PrmStartingNumber	

					Exit Rules		
						PrmGLJournalControlCallBackReportingBasis.TransientAccountingEntity 	= LocalAccountingEntity
						PrmGLJournalControlCallBackReportingBasis.TransientStartDateJulian		= LocalStartDateJulian
						PrmGLJournalControlCallBackReportingBasis.TransientEndDateJulian		= LocalEndDateJulian
						PrmGLJournalControlCallBackReportingBasis.TransientBasisYear			= LocalBasisYear
						PrmGLJournalControlCallBackReportingBasis.TransientLedger				= LocalLedger
						PrmGLJournalControlCallBackReportingBasis.TransientStartingNumber		= LocalInternalGLJournalReference

						LocalResult = PrmGLJournalControlCallBackReportingBasis.ReportingBasisPerLedgerCallBack

				Instance Rules
					LocalLineCounter6  += 1
					LocalSequenceNum6   = LocalLineCounter6
					LocalLineCounter12 += 1	
					LocalSequenceNum12  = LocalLineCounter12
					LocalInternalGLJournalReference  +=1
					LocalTempJournalReference = PrmReportingBasis.JournalReferenceFormat
					invoke Create GeneralLedgerJournalControlRef
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.ReportingBasis 				= PrmReportingBasis
						invoked.AccountingEntity 			= AccountingEntity
						invoked.GeneralLedgerClosePeriod 	= GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl = GeneralLedgerJournalControl
						invoked.JournalReferenceNumber		= DerivedStructuredJournalReferenceNumber
						invoked.Status 						= Status
						invoked.Ledger						= Ledger
						invoked.System						= System
						invoked.PostingDate 				= PostingDate
						invoked.BasisYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
						initialize invoked.ReportingBasisYear
						initialize invoked.ReportingBasisYearEndJournal					
						invoked.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod													
						invoked.JournalReferenceSequence	= LocalInternalGLJournalReference													

		CreateGeneralLedgerJournalControlRefPerSystem is a Set Action
			restricted
			default label is "CreateGlobalLedgerJournalControlRefPerSystem"
			run in foreground
			Parameters
				PrmReportingBasis 				is a ReportingBasis
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmLedgerTopNode				is like Ledger				
    	        PrmStartDateJulian				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
   	      		PrmBasisYear					is a Year	
    	        			
			Local Fields
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6				
    			LocalSystem						is like GeneralLedgerSystemCode
    			LocalYearEndSequenceNum6		is Numeric size 6			
    			LocalYearEndSequenceNum12		is Numeric size 12			
     			LocalAssignBalanceSheetOpening	is Boolean
				LocalInternalGLJournalReference	 is Numeric size 14
     			    						
			Instance Selection		
				where (FinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
				and    AccountingEntity      		= PrmAccountingEntity
				and   (NumericGeneralLedgerCalendarPeriod >= PrmStartDateJulian
				and    NumericGeneralLedgerCalendarPeriod <= PrmEndDateJulian)
				and	   Status.Posted)

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				System
				PostingDate 
				GeneralLedgerJournalControl		
			
			Action Rules
				Set Rules																	
					Entrance Rules
						initialize LocalYearEndSequenceNum6
						initialize LocalYearEndSequenceNum12
						if (PrmReportingBasis.YearEndJournalReports)									
							LocalYearEndSystem						=   "GL"
							LocalReportingBasis						=	PrmReportingBasis
							LocalEntity								=	PrmAccountingEntity
							LocalYear								=	PrmBasisYear
							LocalFinanceEnterpriseGroup				=	PrmFinanceEnterpriseGroup
													
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetOpening			
							if (ReportingBasisYearEndJournalTransactionRel exists)  
								LocalYearEndLedger		   = DerivedCloseLedger																	
								LocalYearEndSequenceNum6   = 1
								LocalSequenceNum6		   = LocalYearEndSequenceNum6
								LocalYearEndSequenceNum12  = 1	
								LocalSequenceNum12		   = LocalYearEndSequenceNum12
								LocalInternalGLJournalReference	 += 1						
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat						

								invoke Create GeneralLedgerJournalControlRef						
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup						
									invoked.ReportingBasis 				= PrmReportingBasis						
									invoked.AccountingEntity 			= LocalEntity											
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber						
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report						
									invoked.Ledger						= LocalYearEndLedger						
									invoked.System						= LocalYearEndSystem
									initialize invoked.PostingDate																
									invoked.BasisYear					= LocalYear						
									invoked.ReportingBasisYear			= LocalYear						
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal		
									initialize invoked.GeneralLedgerClosePeriod											
									invoked.GeneralLedgerCalendarPeriod = ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence	= LocalInternalGLJournalReference
								LocalAssignBalanceSheetOpening = true
					Exit Rules
						if(PrmReportingBasis.YearEndJournalReports)														
							LocalYearEndSystem						=   "GL"
							LocalReportingBasis						=	PrmReportingBasis
							LocalEntity								=	PrmAccountingEntity
							LocalYear								=	PrmBasisYear
							LocalFinanceEnterpriseGroup				=	PrmFinanceEnterpriseGroup
								
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.ProfitAndLoss
							if (ReportingBasisYearEndJournalTransactionRel exists)
								LocalYearEndLedger		   = DerivedCloseLedger																		
								LocalYearEndSequenceNum6  += 1
								LocalSequenceNum6		   = LocalYearEndSequenceNum6
								LocalYearEndSequenceNum12 += 1	
								LocalSequenceNum12		   = LocalYearEndSequenceNum12
								LocalInternalGLJournalReference	 += 1									
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat						

								invoke Create GeneralLedgerJournalControlRef						
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup						
									invoked.ReportingBasis 				= PrmReportingBasis						
									invoked.AccountingEntity 			= LocalEntity										
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber						
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report						
									invoked.Ledger						= LocalYearEndLedger						
									invoked.System						= LocalYearEndSystem		
									initialize invoked.PostingDate														
									invoked.BasisYear					= LocalYear						
									invoked.ReportingBasisYear			= LocalYear						
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal	
									invoked.GeneralLedgerClosePeriod	 = ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod														
									invoked.GeneralLedgerCalendarPeriod	= ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence	= LocalInternalGLJournalReference
									
							LocalReportingBasisYearEndJournal 		=	LocalReportingBasisYearEndJournal.BalanceSheetClosing		
							if (ReportingBasisYearEndJournalTransactionRel exists)
								LocalYearEndLedger		   = DerivedCloseLedger																		
								LocalYearEndSequenceNum6  += 1
								LocalSequenceNum6		   = LocalYearEndSequenceNum6
								LocalYearEndSequenceNum12 += 1	
								LocalSequenceNum12		   = LocalYearEndSequenceNum12
								LocalInternalGLJournalReference	 += 1										
								LocalTempYearEndJournalReference = PrmReportingBasis.JournalReferenceFormat						

								invoke Create GeneralLedgerJournalControlRef						
									invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup						
									invoked.ReportingBasis 				= PrmReportingBasis						
									invoked.AccountingEntity 			= LocalEntity												
									invoked.JournalReferenceNumber		= DerivedYearEndStructuredJournalReferenceNumber						
									invoked.Status 						= GeneralLedgerJournalControlRef.Status.Report						
									invoked.Ledger						= LocalYearEndLedger						
									invoked.System						= LocalYearEndSystem		
									initialize invoked.PostingDate														
									invoked.BasisYear					= LocalYear						
									invoked.ReportingBasisYear			= LocalYear						
									invoked.ReportingBasisYearEndJournal = LocalReportingBasisYearEndJournal	
									invoked.GeneralLedgerClosePeriod	 = ReportingBasisYearEndJournalRel.GeneralLedgerClosePeriod														
									invoked.GeneralLedgerCalendarPeriod = ReportingBasisYearEndJournalRel.GeneralLedgerCalendarPeriod
									invoked.JournalReferenceSequence	= LocalInternalGLJournalReference									
				Instance Rules
					LocalLedgerTopNode = PrmLedgerTopNode
					
					if (LedgerHierarchyRel exists)				
						if (LocalSystem != System)
							LocalSystem  = System
							
							if (LocalSystem = "GL"				
							and	PrmReportingBasis.YearEndJournalReports
							and LocalAssignBalanceSheetOpening)
								LocalLineCounter6  = LocalYearEndSequenceNum6
								LocalLineCounter12 = LocalYearEndSequenceNum12
								initialize LocalAssignBalanceSheetOpening
							else
								initialize LocalLineCounter6	
								initialize LocalLineCounter12												 
											
						LocalLineCounter6  += 1
						LocalSequenceNum6   = LocalLineCounter6
						LocalLineCounter12 += 1	
						LocalSequenceNum12  = LocalLineCounter12
						LocalInternalGLJournalReference	 += 1
						LocalTempJournalReference = PrmReportingBasis.JournalReferenceFormat
						
						invoke Create GeneralLedgerJournalControlRef
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis 				= PrmReportingBasis
							invoked.AccountingEntity 			= AccountingEntity
							invoked.GeneralLedgerClosePeriod 	= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl = GeneralLedgerJournalControl
							invoked.JournalReferenceNumber		= DerivedStructuredJournalReferenceNumber
							invoked.Status 						= Status
							invoked.Ledger						= Ledger
							invoked.System						= System
							invoked.PostingDate 				= PostingDate
							invoked.BasisYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
							initialize invoked.ReportingBasisYear
							initialize invoked.ReportingBasisYearEndJournal							
							invoked.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod
							invoked.JournalReferenceSequence	= LocalInternalGLJournalReference
							
						if (LocalSystem = "GL"														
						and	PrmReportingBasis.YearEndJournalReports)				
							LocalYearEndSequenceNum6 	+=1
							LocalYearEndSequenceNum12	+=1							

		CreateGeneralLedgerJournalControlRefPerLedgerAndSystem is a Set Action
			restricted
			default label is "CreateGlobalLedgerJournalControlRefPerLedgerAndSystem"
			run in foreground
			Parameters
				PrmReportingBasis 				is a ReportingBasis
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmLedgerTopNode				is like Ledger				
				PrmLedger						is like Ledger
    	        PrmStartDateJulian 				is Numeric 7
    	        PrmEndDateJulian				is Numeric 7
     	        PrmBasisYear					is a Year					
				PrmGLJournalControlCallBackReportingBasis 	is a GLJournalControlCallBackReportingBasis
				PrmStartingNumber							is Numeric 14

			Local Fields
    			LocalLineCounter12				is Numeric size 12
    			LocalLineCounter6				is Numeric size 6				
    			LocalSystem						is like GeneralLedgerSystemCode
    			LocalLedger						is like Ledger
 				LocalResult						is Boolean  
				LocalAccountingEntity			is a AccountingEntity
				LocalStartDateJulian			is Numeric 7
				LocalEndDateJulian				is Numeric 7
				LocalBasisYear					is a Year 		
    			LocalInternalGLJournalReference	is Numeric size 14
    			    						
			Instance Selection		
				where (FinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
				and    AccountingEntity       		= PrmAccountingEntity
				and    Ledger				 		= PrmLedger
				and   (NumericGeneralLedgerCalendarPeriod >= PrmStartDateJulian
				and    NumericGeneralLedgerCalendarPeriod <= PrmEndDateJulian)
				and	   Status.Posted) 	

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				System
				PostingDate 
				GeneralLedgerJournalControl		
			
			Action Rules
				Set Rules
					Entrance Rules
						LocalAccountingEntity	        = PrmAccountingEntity
						LocalLedger		                = PrmLedger
						LocalStartDateJulian	        = PrmStartDateJulian
						LocalEndDateJulian		        = PrmEndDateJulian
						LocalBasisYear				    = PrmBasisYear
						LocalInternalGLJournalReference	= PrmStartingNumber

					Exit Rules
						PrmGLJournalControlCallBackReportingBasis.TransientAccountingEntity 	= LocalAccountingEntity
						PrmGLJournalControlCallBackReportingBasis.TransientStartDateJulian		= LocalStartDateJulian
						PrmGLJournalControlCallBackReportingBasis.TransientEndDateJulian		= LocalEndDateJulian
						PrmGLJournalControlCallBackReportingBasis.TransientBasisYear			= LocalBasisYear 
						PrmGLJournalControlCallBackReportingBasis.TransientLedger				= LocalLedger
						PrmGLJournalControlCallBackReportingBasis.TransientStartingNumber		= LocalInternalGLJournalReference

						LocalResult = PrmGLJournalControlCallBackReportingBasis.ReportingBasisPerLedgerAndSystemCallBack

				Instance Rules
					LocalLedgerTopNode = PrmLedgerTopNode
					
					if (LedgerHierarchyRel exists)				
						if (LocalSystem != System)
							LocalSystem  = System
							initialize LocalLineCounter6	
							initialize LocalLineCounter12												 
											
						LocalLineCounter6  += 1
						LocalSequenceNum6   = LocalLineCounter6
						LocalLineCounter12 += 1	
						LocalSequenceNum12  = LocalLineCounter12
						LocalInternalGLJournalReference	 += 1
						LocalTempJournalReference = PrmReportingBasis.JournalReferenceFormat
						
						invoke Create GeneralLedgerJournalControlRef
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.ReportingBasis 				= PrmReportingBasis
							invoked.AccountingEntity 			= AccountingEntity
							invoked.GeneralLedgerClosePeriod 	= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl = GeneralLedgerJournalControl
							invoked.JournalReferenceNumber		= DerivedStructuredJournalReferenceNumber
							invoked.Status 						= Status
							invoked.Ledger						= Ledger
							invoked.System						= System
							invoked.PostingDate 				= PostingDate
							invoked.BasisYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
							initialize invoked.ReportingBasisYear
							initialize invoked.ReportingBasisYearEndJournal						
							invoked.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod
							invoked.JournalReferenceSequence	= LocalInternalGLJournalReference														

#ifdef module idm
		UpdateIDMAttributes is an Instance Action
			run in background
			restricted
			Local Fields
				LocalAttrsSearch		is an IDMAttributeOccurs
				LocalColSequence		is Numeric size 3
				LocalResult				is Boolean
				
			Action Rules
				LocalAttrsSearch.IDMAttribute[1].IDMAttributeName	= "FinanceEnterpriseGroup"
				LocalAttrsSearch.IDMAttribute[1].IDMAttributeValue 	= FinanceEnterpriseGroup
				LocalAttrsSearch.IDMAttribute[2].IDMAttributeName  	= "GeneralLedgerJournalControl"
				LocalAttrsSearch.IDMAttribute[2].IDMAttributeValue  = GeneralLedgerJournalControl
				LocalAttrsSearch.IDMAttribute[3].IDMAttributeName  	= "AccountingEntity"
				LocalAttrsSearch.IDMAttribute[3].IDMAttributeValue  = AccountingEntity
				LocalAttrsSearch.IDMAttribute[4].IDMAttributeName  	= "GeneralLedgerCalendarPeriod"
				LocalAttrsSearch.IDMAttribute[4].IDMAttributeValue  = GeneralLedgerClosePeriod
				
				
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Ledger"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Ledger
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "GeneralLedgerCloseYear"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "GeneralLedgerCalendarPeriod"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= GeneralLedgerClosePeriod
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "System"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= System
				
				initialize LocalColSequence
				
				for each distinct FinanceCodeBlock.Project in GeneralLedgerTransactionsRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue1.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.FinanceCodeBlock.Project
					else
						end for each
					
				IDMAttributes.MultiValue1.IDMAttributeName = "Project"
				
				initialize LocalColSequence
				
				for each distinct FinanceCodeBlock.AccountingUnit in GeneralLedgerTransactionsRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue2.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.FinanceCodeBlock.AccountingUnit
					else
						end for each
					
				IDMAttributes.MultiValue2.IDMAttributeName = "AccountingUnit"
				
				initialize LocalColSequence
				
				for each distinct FinanceCodeBlock.GeneralLedgerChartAccount in GeneralLedgerTransactionsRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue3.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.FinanceCodeBlock.GeneralLedgerChartAccount
					else
						end for each
					
				IDMAttributes.MultiValue3.IDMAttributeName = "Account"
				
				IDMAttributes.IDMDocumentType = "FSM_GeneralLedgerJournalControl"
    			IDMAttributes.AttributeSearch = LocalAttrsSearch

    			LocalResult = IDMAttributes.ExecuteUpdateAttribute
#endif
				

#ifdef module integration		
		TriggerSourceSystemJournalEntryNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
				RestartFlag 			is Boolean
				PrmFSMInboundBODTracker	is Numeric 15
			Action Rules
				if(RestartFlag)
					LocalFSMInboundBODTracker	= PrmFSMInboundBODTracker
				if(!DerivedSSJEProcessMethod)
					LocalMainTemplate = "IONSyncSourceSystemJournalEntry_GeneralLedgerJournalControl_Header_ST"
				else
					LocalMainTemplate = "IONSyncSourceSystemJournalEntry_GeneralLedgerJournalControl_Batch_Header_ST"
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "SourceSystemJournalEntry"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "GeneralLedgerJournalControl"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity 		= AccountingEntity
					invoked.PrmMainUserTemplate 		= LocalMainTemplate
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(!DerivedSSJEProcessMethod)
						if(LocalFSMInboundBODTracker not entered)
							invoke Create FSMInboundBODTracker
								assign result to NewBODTracker
								invoked.Verb 					= 1
								invoked.Noun 					= "SourceSystemJournalEntry"					
								invoked.BODDocumentID			= DerivedDocumentID
								invoked.BODVariationID			= BODVariationID
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.BODAccountingEntity		= BODAccountingEntity
								invoked.Direction				= 1
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.Reference1				= AccountingEntity
								invoked.Reference2				= GeneralLedgerClosePeriod
								invoked.Reference3				= GeneralLedgerJournalControl
								initialize invoked.Error			
								initialize invoked.ErrorMessage					
							LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
						else 
							invoke Update FSMInboundBODTrackerRel
								invoked.BODDocumentID			= DerivedDocumentID
								invoked.BODVariationID			= BODVariationID
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.BODAccountingEntity		= BODAccountingEntity
								invoked.Direction				= 1
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.Reference1				= AccountingEntity
								invoked.Reference2				= GeneralLedgerClosePeriod
								invoked.Reference3				= GeneralLedgerJournalControl
								initialize invoked.Error			
								initialize invoked.ErrorMessage
								initialize invoked.BODXML
						if(GeneralLedgerTransactionsRel	exist)	
							for each GeneralLedgerTransactionsRel
								LocalCommitGLTransaction += 1
								each.LocalGLJCCurrency = Currency
								each.LocalGLJCJournalType = DerivedGRCJournalType
								each.LocalGLJCCalendarYear = BODCalendarYear
								each.LocalGLJCClosePeriod = GeneralLedgerCalendarPeriod
								LocalSourceSystemJournalEntryGLTransactionXML += template.IONSyncSourceSystemJournalEntry_GLTransaction_JournalEntryLine_ST document for each						
								if(LocalCommitGLTransaction = 500)
									invoke Update FSMInboundBODTrackerRel
										invoked.BODXML += LocalSourceSystemJournalEntryGLTransactionXML
									initialize LocalSourceSystemJournalEntryGLTransactionXML
									initialize LocalCommitGLTransaction
									commit transaction
							if(FSMInboundBODTrackerRel exists)
								invoke Update FSMInboundBODTrackerRel
									invoked.BODXML += LocalSourceSystemJournalEntryGLTransactionXML
								LocalSourceSystemJournalEntryGLTransactionXML = FSMInboundBODTrackerRel.BODXML
						invoke SendSourceSystemJournalEntryNativeLPLBOD
							resume on error
			                   	Error            				= true
			                    ErrorMessage  					= error message	
			            if(Error)
							invoke Update FSMInboundBODTrackerRel
								invoked.Error 								= Error
								invoked.ErrorMessage 						= ErrorMessage
								invoked.Status								= 2
								invoked.CloseDate							= system current timestamp
								invoked.BODXML								= SourceSystemJournalEntryXML
								invoked.BODID								= DerivedBODID
						else
							invoke Update FSMInboundBODTrackerRel
								invoked.Status									= 3
								invoked.CloseDate								= system current timestamp
								invoked.BODXML									= SourceSystemJournalEntryXML
								invoked.BODID									= DerivedBODID
					if(DerivedSSJEProcessMethod)
						LocalGLTransactionCount = instance count of GeneralLedgerTransactionsRel
						for each GeneralLedgerTransactionsRel
							each.LocalGLJCCurrency 		= Currency
							each.LocalGLJCCalendarYear 	= BODCalendarYear
							each.LocalGLJCClosePeriod 	= GeneralLedgerCalendarPeriod
							LocalBatchCounter = LocalBatchCounter+1 
							LocalCurrentGLTransactionCount = LocalCurrentGLTransactionCount + 1
							LocalSSJEGLTransactionBatchLineXML += template.IONSyncSourceSystemJournalEntry_GLTransaction_Batch_JournalEntryLine_ST document for each
							if (LocalBatchCounter = DerivedSSJEBatchCounter)
								LocalSSJETotalBatchLineXML+=LocalSSJEGLTransactionBatchLineXML
								LocalBatchSequence = LocalBatchSequence + 1
								if(LocalFSMInboundBODTracker not entered and FSMInboundBODTrackerRel not exist)
									invoke Create FSMInboundBODTracker
										assign result to NewBODTracker
										invoked.Verb 					= 1
										invoked.Noun 					= "SourceSystemJournalEntry"					
										invoked.BODDocumentID			= DerivedDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.BODAccountingEntity		= BODAccountingEntity
										invoked.Direction				= 1
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.Reference1				= AccountingEntity
										invoked.Reference2				= GeneralLedgerClosePeriod
										invoked.Reference3				= GeneralLedgerJournalControl 
										initialize invoked.Error			
										initialize invoked.ErrorMessage					
									LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
								else
									if(FSMInboundBODTrackerRel exist)
										LocalFSMInboundBODTracker		= FSMInboundBODTrackerRel.FSMInboundBODTracker
									invoke Update FSMInboundBODTrackerRel
										invoked.BODDocumentID			= DerivedDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
										invoked.BODAccountingEntity		= BODAccountingEntity
										invoked.Direction				= 1
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.Reference1				= AccountingEntity
										invoked.Reference2				= GeneralLedgerClosePeriod
										invoked.Reference3				= GeneralLedgerJournalControl
										initialize invoked.Error			
										initialize invoked.ErrorMessage	
								if(LocalGLTransactionCount = LocalCurrentGLTransactionCount)
									LocalLastBatch = true
									LocalBODID = "infor-nid:" + DerivedTenantID +":" + BODAccountingEntity + ":" +DerivedDefaultBODLocation+ ":" +DerivedDocumentID + ":" +BODRevision+"?SourceSystemJournalEntry&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker+"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID+"&batchSize="+LocalBatchSequence
								else
									LocalBODID = "infor-nid:" + DerivedTenantID +":" + BODAccountingEntity + ":" +DerivedDefaultBODLocation+ ":" +DerivedDocumentID + ":" +BODRevision+"?SourceSystemJournalEntry&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker+"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID
								
								invoke SendSourceSystemJournalEntryNativeLPLBOD
									resume on error
					                	Error            				= true
					                   	ErrorMessage  					= error message	
					            if(Error)
					            	LocalSSJEGLTransactionBatchLineXML = LocalSSJETotalBatchLineXML
									invoke Update FSMInboundBODTrackerRel
										invoked.Error 					= Error
										invoked.ErrorMessage 			= ErrorMessage
										invoked.Status					= 2
										invoked.CloseDate				= system current timestamp
										invoked.BODID					= DerivedBODID
										invoked.BODXML					= SourceSystemJournalEntryBatchXML
								else
					            	LocalSSJEGLTransactionBatchLineXML = LocalSSJETotalBatchLineXML
									invoke Update FSMInboundBODTrackerRel
										invoked.Status					= 3
										invoked.CloseDate				= system current timestamp
										invoked.BODID					= DerivedBODID
										invoked.BODXML					= SourceSystemJournalEntryBatchXML
								LocalBatchCounter = 0
								initialize LocalSSJEGLTransactionBatchLineXML
						if(LocalBatchCounter < DerivedSSJEBatchCounter and !LocalLastBatch)
							LocalSSJETotalBatchLineXML+=LocalSSJEGLTransactionBatchLineXML
							LocalBatchSequence += 1
							if(LocalFSMInboundBODTracker not entered and  FSMInboundBODTrackerRel not exist)
								invoke Create FSMInboundBODTracker
									assign result to NewBODTracker
									invoked.Verb 						= 1
									invoked.Noun 						= "SourceSystemJournalEntry"					
									invoked.BODDocumentID				= DerivedDocumentID
									invoked.BODVariationID				= BODVariationID
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.BODAccountingEntity			= BODAccountingEntity
									invoked.Direction					= 1
									invoked.Status						= 1
									invoked.StartDate					= system current timestamp
									invoked.Reference1					= AccountingEntity
									invoked.Reference2					= GeneralLedgerClosePeriod
									invoked.Reference3					= GeneralLedgerJournalControl 
									initialize invoked.Error			
									initialize invoked.ErrorMessage					
								LocalFSMInboundBODTracker				= NewBODTracker.FSMInboundBODTracker
							else 
								if(FSMInboundBODTrackerRel exist)
									LocalFSMInboundBODTracker			= FSMInboundBODTrackerRel.FSMInboundBODTracker
								invoke Update FSMInboundBODTrackerRel
									invoked.BODDocumentID				= DerivedDocumentID
									invoked.BODVariationID				= BODVariationID
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
									invoked.BODAccountingEntity			= BODAccountingEntity
									invoked.Direction					= 1
									invoked.Status						= 1
									invoked.StartDate					= system current timestamp
									invoked.Reference1					= AccountingEntity
									invoked.Reference2					= GeneralLedgerClosePeriod
									invoked.Reference3					= GeneralLedgerJournalControl
									initialize invoked.Error			
									initialize invoked.ErrorMessage	
							LocalBODID = "infor-nid:" + DerivedTenantID +":" + BODAccountingEntity + ":" +DerivedDefaultBODLocation+ ":" +DerivedDocumentID + ":" +BODRevision+"?SourceSystemJournalEntry&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker+"&batchSequence="+LocalBatchSequence+"&batchID="+DerivedBatchID+"&batchSize="+LocalBatchSequence
							invoke SendSourceSystemJournalEntryNativeLPLBOD
								resume on error
				                   	Error            					= true
				                    ErrorMessage  						= error message	
				            if(Error)
								LocalSSJEGLTransactionBatchLineXML = LocalSSJETotalBatchLineXML
								invoke Update FSMInboundBODTrackerRel
									invoked.Error 						= Error
									invoked.ErrorMessage 				= ErrorMessage
									invoked.Status						= 2
									invoked.CloseDate					= system current timestamp
									invoked.BODID						= DerivedBODID
									invoked.BODXML						= SourceSystemJournalEntryBatchXML
							else
								LocalSSJEGLTransactionBatchLineXML = LocalSSJETotalBatchLineXML
								invoke Update FSMInboundBODTrackerRel
									invoked.Status						= 3
									invoked.CloseDate					= system current timestamp
									invoked.BODID						= DerivedBODID
									invoked.BODXML						= SourceSystemJournalEntryBatchXML

		SendSourceSystemJournalEntryNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				if(DerivedSSJEProcessMethod)
					send ion bod
						bod is SourceSystemJournalEntryBatchXML
						bod type is "Sync.SourceSystemJournalEntry"
						accounting entity is BODAccountingEntity
						document id is DerivedDocumentID
						variation id is BODVariationID	
				else
					send ion bod
						bod is SourceSystemJournalEntryXML
						bod type is "Sync.SourceSystemJournalEntry"
						accounting entity is BODAccountingEntity
						document id is DerivedDocumentID
						variation id is BODVariationID	
#endif



		PurgeGLJournalPostedRecords is a Set Action
			restricted
			disable checkpoint
	
			completion message is "<RecordsPurged>RecordsPurged"
		
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is an AccountingEntity
				PrmGeneralLedgerCloseYear		is a GeneralLedgerCloseYear
				PrmGeneralLedgerSystemCode 		is a GeneralLedgerSystemCode
				PrmPurgeGLRecordsResult 		is a PurgeGLRecordsResult
				PrmPurgeGLRecordsResultDetail	is a PurgeGLRecordsResultDetail
				PrmRecordType					is a RecordType
				PrmSystemCodeSelectionOption 	is Numeric 1
				PrmReportOnly					is Boolean
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmGeneralLedgerCloseYear
					required
				PrmAccountingEntity
					required
				PrmPurgeGLRecordsResultDetail
					required
				PrmSystemCodeSelectionOption
					required
			
			Local Fields
				RecordsPurged			is Numeric 12
				LocalGLTransactionCount	is Numeric 12
				
			Sort Order is ByStatus 	
				
			Instance Selection
				where (FinanceEnterpriseGroup 									 = PrmFinanceEnterpriseGroup
				and   	Status.Posted
				and 	AccountingEntity	       								 = PrmAccountingEntity
				and 	GeneralLedgerClosePeriod.GeneralLedgerCloseConfiguration = PrmGeneralLedgerCloseYear.GeneralLedgerCloseConfiguration
				and    	GeneralLedgerClosePeriod.GeneralLedgerCloseYear 		 = PrmGeneralLedgerCloseYear		
				and 	((PrmSystemCodeSelectionOption = 1 
				and 	System = PrmGeneralLedgerSystemCode )
				or		(PrmSystemCodeSelectionOption = 2 
				and 	System.RecordType							= PrmRecordType
				and 	System					!= "TC"
				and 	System					!= "CA")))
				
			Action Rules
			
				Set Rules
					Entrance Rules
						initialize RecordsPurged
						initialize LocalGLTransactionCount
						
					Exit Rules
						invoke Update PrmPurgeGLRecordsResultDetail.PurgeGLRecordsResultDetail
							invoked.GLJournalControlRecords = RecordsPurged

				Instance Rules
					LocalGLTransactionCount = instance count of GeneralLedgerTransactionsRel
					if (LocalGLTransactionCount = 0)
						if (!PrmReportOnly)
							invoke Purge Posted this instance
						RecordsPurged += 1	

		
		CopyCommentsFromRecuringJournal is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmRecurringJournalControl	is like RecurringJournalControl
			Action Rules
				LocalRJControl = PrmRecurringJournalControl
				if(RecurringJournalControlRel exists and RecurringJournalControlRel.CopyComments)
					for each RecurringJournalControlRel.RecurringJournalCommentRel
						invoke Create GeneralLedgerJournalComment
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.AccountingEntity			= AccountingEntity
							invoked.GeneralLedgerClosePeriod 	= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
							invoked.Title						= each.Title
							invoked.Comment						= each.Comment

		RebuildCommitmentTotals is an Instance Action
			restricted
			Parameters
				IsBatch        is Boolean
			Action Rules
				invoke PurgeGroupTotalsForEditGroup BudgetTemplateGroupTotal in background
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup		  = UniqueID

				invoke RecalculateBTGT GeneralLedgerTransaction in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmSkipAttachRule			= true				
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmAccountingEntity			= AccountingEntity
					invoked.PrmGeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
					invoked.PrmJournalControl			= GeneralLedgerJournalControl
			Exit Rules
				if (initiating action != "FinanceEnterpriseGroup.InterEntityNetting")
					if (System.EncumbranceOption.TrackAndEdit)
						LocalBudgetEditGroup = UniqueID
						invoke EditTotalsRoute BudgetTemplateGroupTotal in background
							run after AsyncId
							invoked.PrmFinanceEnterpriseGroup					= FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup							= LocalBudgetEditGroup
							invoked.PrmMode										= BudgetEditMode.Hard
							invoked.PrmBudgetEditCallBack.BudgetEditCallBackReference	= reference to this instance
							invoked.PrmBusinessClassName				= "GeneralLedgerJournalControl"
							invoked.PrmEditContext						= "ReleaseGLJournalControl"
							invoked.PrmCurrencyTable					= CurrencyTable
					
					if (System.EncumbranceOption.Track)
						LocalBudgetEditGroup = UniqueID
						invoke EditTotalsRoute BudgetTemplateGroupTotal in background
							run after AsyncId
							invoked.PrmFinanceEnterpriseGroup					= FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup							= LocalBudgetEditGroup
							invoked.PrmMode										= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName				= "GeneralLedgerJournalControl"
							invoked.PrmEditContext						= "ReleaseGLJournalControlTrackOnly"
							invoked.PrmCurrencyTable					= CurrencyTable
		
		ResolveRJDrill is a Set Action 
			default label is "ResolveRecurringJournalDrill"
			restricted

			Sort Order is primary

			Instance Selection
				where (ValidRJObject)

			Action Rules
				Instance Rules
					RelatedRJSchedule = RelatedJournalTransaction
					initialize RelatedJournalTransaction
	StateCycles
		JournalControlLifeCycle is a StateCycle
			state field is Status
			
			Unreleased	is a State
		 		CreateEncumbranceJournal is a Create Action
					default label is "CreateEncumbranceJournal"
					valid when (CreateEncumbranceJournal)
					Field Rules
						Description
							required
						PostingDate
							required
						NewManualJournalControlType
							default to JournalType.ManualEncumbrance
					Entrance Rules
						initialize DefaultAutoReverse
						initialize AutoReverseDate
						JournalType						= NewManualJournalControlType
						Ledger							= FinanceEnterpriseGroup.CoreLedger
						PrimaryLedger					= Ledger
						System							= "GL"
						IsAIntercompanyBillingJournal	= false
						constraint (!System.EncumbranceOption.NotUsed)
							"InvalidEncumbranceOptionForManualCommitJournalFor<System>"

 						if (PostingDate not entered)
 							GeneralLedgerClosePeriod  = AccountingEntity.CurrentPeriod
							PostingDate               = AccountingEntityLedgerPeriodRel.DerivedPeriodEndDate                        
						LocalPostingDate              = PostingDate
						LocalEndDate                  = DerivedEntityCalendarPeriod
						constraint (EntityLedgerPeriodRel exists)
							"PeriodIsNotDefinedForPostingDate"
						constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
						or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
							"PeriodIsClosed"
						if (SystemClosingControlRel.Control)
			        		constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostDateNotWithinValidEntryDatesFor<FinanceEnterpriseGroup.AccountingEntityLabel>_<AccountingEntity>"
#ifdef module sharedfinance
						if (ApprovalCode entered
						and AccountingEntity.JournalApproval.None
						and AccountingEntity.BypassApprovalCode	!= ApprovalCode)

							LocalApprover = actor.agent(Employee).Employee
							constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonCreatingTheJournalCannotBeTheApprover"
#endif
					Action Rules
						constraint (CodeBlockRelationDetailRel exists)
							"Invalid<FinanceEnterpriseGroup.LedgerMessage>For<FinanceEnterpriseGroup.AccountingEntityLabel>"
						LocalPostingDate				= PostingDate
						LocalEndDate					= DerivedEntityCalendarPeriod
						GeneralLedgerCalendarPeriod 	= DerivedEntityCalendarPeriod
						GeneralLedgerClosePeriod		= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod
						if (AccountingEntity.AccountingUnitZoneBalancing)
							if (!BaseZoneAccountingUnit entered)
								BaseZoneAccountingUnit	= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
							constraint (BaseZoneAccountingUnit entered)
								"<FinanceEnterpriseGroup.AccountingUnitLabel>_Base_ZoneIsRequired"
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							if (!BaseZoneDimension1 entered)
								BaseZoneDimension1		= DefaultZoneFinanceDimension1Rel.ZoneDimension
							constraint (BaseZoneDimension1 entered)
								"<FinanceEnterpriseGroup.FinanceDimension1Label>_Base_ZoneIsRequired"
						AllowUnrelease					= true
						if (!JournalType entered)
							JournalType						= JournalType.ManualEncumbrance
						if (Currency	not entered)
							Currency	= AccountingEntity.FunctionalCurrency
						if(SystemClosingControlRel exists
						and SystemClosingControlRel.CurrencyTable != blank)
							CurrencyTable = SystemClosingControlRel.CurrencyTable
							include CurrencyRateCalculation
						else
							CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
							include CurrencyRateCalculation	

				Create is a Create Action
					Field Rules
						Description
							required
						PostingDate
							required
                        JournalType
							constraint (NewJournalType)
								"CanEnterOnlyNormalOrInterEntityJournalTypes"
						System
							if (!System.RecordType.User)
								constraint (System        = "GL")
									"SystemCanOnlyBe<GlSystemMessage>"
						UniqueJournalID
							if (FinanceEnterpriseGroup.RequireUniqueJournalID)
								required

						
					Entrance Rules
						constraint (!GeneralLedgerJournalControl entered)
							"DoNotEnterAJournalNumber"
						constraint (!Ledger.NotValidForJournalControl)		
							"CannotCreateJournalEntryFor_\Ledger_'<Ledger>'"
#ifdef module intercobilling
						if (IsAIntercompanyBillingJournal)
							constraint (JournalType.Normal)
								"IntercompanyBillingJournalCannotBeInterEntityJournalType"
#endif
						if (AutoReverseDate entered)  
							LocalPostingDate		  = AutoReverseDate
							LocalEndDate			  = DerivedEntityCalendarPeriod
							constraint (EntityLedgerPeriodRel exists)
								"PeriodIsNotDefinedForAutoReverseDate"
							constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
							or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
								"PeriodIsClosed"
							LocalGeneralLedgerSystemCode	= System
							if (SystemClosingControlEditRel.Control)
								if (AutoReverseDate not within SystemClosingControlEditRel.ValidEntryDate)
									confirmation required
										"AutoReverseDateIsOutsideSystemDateRange;Continue?"

 						if (PostingDate not entered)
 							GeneralLedgerClosePeriod  = AccountingEntity.CurrentPeriod
							PostingDate               = AccountingEntityLedgerPeriodRel.DerivedPeriodEndDate                        
						LocalPostingDate              = PostingDate
						LocalEndDate                  = DerivedEntityCalendarPeriod
						constraint (AccountingEntity entered)
							"<FinanceEnterpriseGroup.AccountingEntityLabel>_isRequired"
						constraint (EntityLedgerPeriodRel exists)
							"PeriodIsNotDefinedForPostingDate"
						constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
						or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
							"PeriodIsClosed"
						LocalGeneralLedgerSystemCode	= System
						if (SystemClosingControlEditRel.Control)
			        		constraint (PostingDate within SystemClosingControlEditRel.ValidEntryDate)
								"PostDateNotWithinValidEntryDatesFor<FinanceEnterpriseGroup.AccountingEntityLabel>_<AccountingEntity>"

						LocalUniqueJournalID = UniqueJournalID
						constraint (!UniqueJournalIDRel exists)
							"UniqueJournalIDAlreadyExists"								                          
#ifdef module sharedfinance
						if (ApprovalCode entered
						and !AccountingEntity.JournalApproval.None
						and AccountingEntity.BypassApprovalCode	!= ApprovalCode)

							LocalApprover = actor.agent(Employee).Employee
							constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonCreatingTheJournalCannotBeTheApprover"
#endif
					Action Rules
						constraint (CodeBlockRelationDetailRel exists)
							"Invalid<FinanceEnterpriseGroup.LedgerMessage>For<FinanceEnterpriseGroup.AccountingEntityLabel>"
						LocalPostingDate				= PostingDate
						LocalEndDate					= DerivedEntityCalendarPeriod
						GeneralLedgerCalendarPeriod 	= DerivedEntityCalendarPeriod
						GeneralLedgerClosePeriod		= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod
						if (AccountingEntity.AccountingUnitZoneBalancing)
							if (!BaseZoneAccountingUnit entered)
								BaseZoneAccountingUnit	= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
							constraint (BaseZoneAccountingUnit entered)
								"<FinanceEnterpriseGroup.AccountingUnitLabel>_Base_ZoneIsRequired"
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							if (!BaseZoneDimension1 entered)
								BaseZoneDimension1		= DefaultZoneFinanceDimension1Rel.ZoneDimension
							constraint (BaseZoneDimension1 entered)
								"<FinanceEnterpriseGroup.FinanceDimension1Label>_Base_ZoneIsRequired"
						AllowUnrelease					= true
						if (!JournalType entered)
							JournalType						= NewJournalControlType
						if (Currency	not entered)
							Currency	= AccountingEntity.FunctionalCurrency
						if (CurrencyTable not entered)
							if(SystemClosingControlRel exists
							and SystemClosingControlRel.CurrencyTable != blank)
								CurrencyTable = SystemClosingControlRel.CurrencyTable
								include CurrencyRateCalculation
							else
								CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
								include CurrencyRateCalculation
						else
							include CurrencyRateCalculation	

					Exit Rules
						TransientUpdateStamp = update stamp
						
				AutoCreate is a Create Action
					restricted
					Field Rules
						PostingDate
							required

					Action Rules
						if (TransientFromGainLoss) 
    						CurrencyTable = FinanceEnterpriseGroup.CurrencyTable	
						LocalPostingDate			= PostingDate
						LocalEndDate				= DerivedEntityCalendarPeriod
						if (!PrimaryLedger entered)
							PrimaryLedger				= Ledger
						if (DerivedEntityCalendarPeriod entered
						and !first EntityLedgerPeriodRel.BackPostPeriod)
							while (!first EntityLedgerPeriodRel.OpenPeriod)
								LocalPostingDate = first GeneralLedgerCalendarPeriodRel.Date + 1
								LocalEndDate	 = DerivedEntityCalendarPeriod
						if (!EntityLedgerPeriodRel exists
						or  !DerivedEntityCalendarPeriod entered)
							LocalEndDate	 = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
							LocalPostingDate = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
						GeneralLedgerCalendarPeriod 	= DerivedEntityCalendarPeriod
						GeneralLedgerClosePeriod		= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod
						if (!BaseZoneAccountingUnit entered)
							if (AccountingEntity.AccountingUnitZoneBalancing)
								BaseZoneAccountingUnit			= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
						if (!BaseZoneDimension1 entered)
							if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
								BaseZoneDimension1				= DefaultZoneFinanceDimension1Rel.ZoneDimension

						if (TransientFromGainLoss)
							invoke TriggerBOD GeneralLedgerJournalControl

				Update is an Update Action
					Field Rules
						PostingDate
							if (PostingDate changed)
								LocalPostingDate				= PostingDate
								LocalEndDate					= DerivedEntityCalendarPeriod
								constraint (GeneralLedgerClosePeriod	= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod)
									"PostDateNotWithinPeriod"
						JournalType
							if (!JournalType.ManualEncumbrance)
								constraint (NewJournalType)
									"CanEnterOnlyNormalOrInterEntityJournalTypes"
						System
							if (!System.RecordType.User)
								constraint (System		= "GL")
									"SystemCanOnlyBe<GlSystemMessage>"
#ifdef module intercobilling
						IsAIntercompanyBillingJournal
							if (IntercompanyBillingTransactionRel exists)
								cannot be changed
									"IntercompanyBillingJournalFlagCannotBeChanged;IntercompanyBillingTransactionsExists"
#endif
					Entrance Rules
						constraint (TransientUpdateStamp = update stamp)
							"RecordHasChangedSinceLastInquiry,PleaseDiscardChangesAndRefresh"
							
						if (JournalType.ManualEncumbrance)						
							initialize DefaultAutoReverse
							initialize AutoReverseDate
							Ledger							= FinanceEnterpriseGroup.CoreLedger
							PrimaryLedger					= Ledger
							System							= "GL"
							IsAIntercompanyBillingJournal	= false
							constraint (!System.EncumbranceOption.NotUsed)
								"InvalidEncumbranceOptionForManualCommitJournalFor<System>"
						else								
						if (!NewManualJournalControlType.ManualEncumbrance)
							if (SystemClosingControlRel.Control)	
				        		constraint (PostingDate within SystemClosingControlRel.ValidEntryDate)
									"PostDateNotWithinValidEntryDatesFor<FinanceEnterpriseGroup.AccountingEntityLabel>_<AccountingEntity>"

						UseInputValue = true
						if (JournalType.InterEntity   
						and NewJournalControlType.Normal) 
							constraint (!InterEntityGLTransactionRel exists)
								"CannotChangeJournalTypeToNormal,InterentityTransactionsExist"
								
#ifdef module sharedfinance
						if (ApprovalCode entered
						and !AccountingEntity.JournalApproval.None
						and AccountingEntity.BypassApprovalCode	!= ApprovalCode)

							LocalApprover = actor.agent(Employee).Employee
							constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonUpdatingTheJournalCannotBeTheApprover"
#endif
					Action Rules
						if (EligibleForElimination)
							constraint (!DefaultAutoReverse)
								"AutoReverseIsNotValidFor_\Third_\Party_\Elimination_\Journal"

						if (DefaultAutoReverse)
							constraint (!EligibleForElimination)
								"Third_\Party_\Elimination_\JournalCannotBeCombinedWith_\Auto-_\Reversed"
													
						constraint (AllowUnrelease)
							"InterfacedJournalCannotBeMaintained"
						constraint (!ReleaseDate entered)
							"ReleaseInProcess;JournalCannotBeMaintained"
						constraint (PostingDate entered)
							"PostDateCannotBeBlank"
						if (AutoReverseDate entered)  
							LocalPostingDate		  = AutoReverseDate
							LocalEndDate			  = DerivedEntityCalendarPeriod
							constraint (EntityLedgerPeriodRel exists)
								"PeriodIsNotDefinedForAutoReverseDate"
							constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
							or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
								"PeriodIsClosed"
							LocalGeneralLedgerSystemCode	= System
							if (SystemClosingControlEditRel.Control)
								if (AutoReverseDate not within SystemClosingControlEditRel.ValidEntryDate)
									confirmation required
										"AutoReverseDateIsOutsideSystemDateRange;Continue?"
						UseInputValue = true
						if (!JournalType.ManualEncumbrance)						
							JournalType				= NewJournalControlType
						if(!PrimaryLedger entered
						or (!Ledger.CurrencyLedger and PrimaryLedger != Ledger))
							PrimaryLedger = Ledger
						if (AccountingEntity.AccountingUnitZoneBalancing)
							if (!BaseZoneAccountingUnit entered)
								BaseZoneAccountingUnit	= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
							constraint (BaseZoneAccountingUnit entered)
								"<FinanceEnterpriseGroup.AccountingUnitLabel>_Base_ZoneIsRequired"
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							if (!BaseZoneDimension1 entered)
								BaseZoneDimension1		= DefaultZoneFinanceDimension1Rel.ZoneDimension
							constraint (BaseZoneDimension1 entered)
								"<FinanceEnterpriseGroup.FinanceDimension1Label>_Base_ZoneIsRequired"
						if (Currency	not entered)
							Currency	= AccountingEntity.FunctionalCurrency
						if (CurrencyTable = blank)
							if (SystemClosingControlRel.CurrencyTable exists) 
								CurrencyTable = SystemClosingControlRel.CurrencyTable	
								include CurrencyRateCalculation
							else
								CurrencyTable = FinanceEnterpriseGroup.CurrencyTable		
								include CurrencyRateCalculation
						else	
							include CurrencyRateCalculation
						include SetTotalAmounts		
					Exit Rules
								
						SetTotalAmountsBack = true	
						include SetTotalAmounts		
						if (Ledger changed)
							for each GLTransactionRel
								invoke Unreleased.Update each
									invoked.FinanceCodeBlock.Ledger	= Ledger
									invoked.PrimaryLedger			= PrimaryLedger
						
						TransientUpdateStamp = update stamp
						

				Delete is an Instance Action
					default label is "MoveToDeleted"
					completion message is "JournalsMovedToDeletedStatus"

					Parameters
						BlankOutUniqueJournalID	is Boolean
					Entrance Rules
						constraint (AllowUnrelease)
							"InterfacedJournalCannotBeDeleted"
						constraint (!IsDeleteInProcess)
							"MoveToDeletedIsAlreadyInProgress"
						constraint (!ReleaseDate entered)
							"ReleaseInProcess;JournalCannotBeDeleted"
						constraint (!WithLinkedRecurringJournal)
							"CannotDelete;Linked_\Recurring_\Journal_\ControlRecordExists"
					
					Action Rules
						Status = Status.DeleteInProcess
						invoke DeleteBackground
							invoked.DelBlankOutUniqueJournalID = BlankOutUniqueJournalID

				AutoRelease is an Instance Action
					restricted
					Parameters
						PrmFunctionalDrAmount		is Decimal 19.5 
							default label is "FunctionalDrAmount"
						PrmAlternateDrAmount		is Decimal 19.5 
							default label is "AlternateDrAmount"
						PrmAlternateDrAmount2		is Decimal 19.5 
							default label is "AlternateDrAmount2"
						PrmAlternateDrAmount3		is Decimal 19.5 
							default label is "AlternateDrAmount3"
						PrmAutoReverseDrAmount		is Decimal 19.5 
							default label is "AutoReverseDrAmount"
						PrmRpt1DrAmount				is Decimal 19.5 
							default label is "Report1DrAmount"
						PrmRpt2DrAmount				is Decimal 19.5 
							default label is "Report2DrAmount"
						PrmRpt3DrAmount				is Decimal 19.5 
							default label is "Report3DrAmount"
						PrmRpt4DrAmount				is Decimal 19.5 
							default label is "Report4DrAmount"
						PrmRpt5DrAmount				is Decimal 19.5 
							default label is "Report5DrAmount"
						PrmFunctionalCrAmount		is Decimal 19.5 
							default label is "FunctionalCrAmount"
						PrmAlternateCrAmount		is Decimal 19.5 
							default label is "AlternateCrAmount"
						PrmAlternateCrAmount2		is Decimal 19.5 
							default label is "AlternateCrAmount2"
						PrmAlternateCrAmount3		is Decimal 19.5 
							default label is "AlternateCrAmoun3"
						PrmAutoReverseCrAmount		is Decimal 19.5 
							default label is "AutoReverseCrAmount"
						PrmRpt1CrAmount				is Decimal 19.5 
							default label is "Report1CrAmount"
						PrmRpt2CrAmount				is Decimal 19.5 
							default label is "Report2CrAmount"
						PrmRpt3CrAmount				is Decimal 19.5 
							default label is "Report3CrAmount"
						PrmRpt4CrAmount				is Decimal 19.5 
							default label is "Report4CrAmount"
						PrmRpt5CrAmount				is Decimal 19.5 
							default label is "Report5CrAmount"
						PrmUnitsDrAmount			is an UnitsAmount
							default label is "UnitsDrAmount"
						PrmUnitsCrAmount			is an UnitsAmount
							default label is "UnitsCrAmount"
						PrmAutoReverseUnitsDrAmount is an UnitsAmount
							default label is "AutoReverseUnitsDrAmount"
						PrmAutoReverseUnitsCrAmount is an UnitsAmount
							default label is "AutoReverseUnitsCrAmount"
						PrmJeType					is Numeric 1
							default label is "JeType"
						PrmUpdateTotal				is Boolean
							default label is "UpdateTotal"
						PrmJournalizeGroup			is a JournalizeGroup
							default label is "JournalizeGroup"

						PrmEligibleForElimination	is Boolean
							default label is untranslatable:"EligibleForElimination"
						PrmEliminationLedger		is like Ledger
							default label is untranslatable:"EliminationLedger"


					Local Fields	
						AsyncId							is a AsyncActionRequest
						LocalAutoReverseAmount			is Decimal 19.5 
						LocalTransactionAmount			is Decimal 19.5 
						LocalFunctionalAmount			is Decimal 19.5 
						LocalAlternateAmount			is Decimal 19.5 
						LocalAlternateAmount2			is Decimal 19.5 
						LocalAlternateAmount3			is Decimal 19.5 
						LocalProjectAmount				is Decimal 19.5 
						LocalReportAmount1				is Decimal 19.5 
						LocalReportAmount2				is Decimal 19.5 
						LocalReportAmount3				is Decimal 19.5 
						LocalReportAmount4				is Decimal 19.5 
						LocalReportAmount5				is Decimal 19.5 
						LocalUnitsAmount				is an UnitsAmount
						LocalTransactionSequence		is Numeric 12
						LocalTransactionView			is a GeneralLedgerTransaction view
						LocalAccountingUnit				is a AccountingUnit
						LocalFinanceDimension1			is a FinanceDimension1
						LocalSetActionPerformed			is Boolean
						LocalSetAutoRev					is Boolean
						LocalESCreated					is Boolean

					Action Rules
						BypassStructureRelationEdit = true
						if (!ReleaseDate entered)
							ReleaseDate			= current corporate date

						if (PrmUpdateTotal)
							JournalType		= PrmJeType
							include UpdateTotals
						LocalTransactionSequence		= DerivedGLTransaction
						if (PrmEligibleForElimination)
							LocalTransactionSequence	= DerivedGLTransactionForElim

						if (AccountingEntity.BalanceTransactionCurrency
						and GLCurrencyJournalControl set exists)
							for each GLCurrencyJournalControl set
								include CreateBalancingCurrencyTransactions
						include UpdateTotals

						include CreateBaseBalancingTransactions

						if (LocalESCreated)
							ContainsESTransaction = true
						ReleaseOperator = actor
						LocalSetActionPerformed		= false
						if (AccountingEntity.AccountingUnitZoneBalancing
						or  FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							if (DerivedJournalZoneTotalRecords > 50)
								LocalSetActionPerformed		= true
								invoke ProcessZoneBalancingTransactions GeneralLedgerZoneTotal in background
									invoked.PrmEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.PrmAccountingEntity			= AccountingEntity

									invoked.PrmGeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
									invoked.PrmJournalControl			= GeneralLedgerJournalControl
									invoked.PrmJournalizeGroup			= PrmJournalizeGroup
									invoked.PrmEligibleForElimination	= PrmEligibleForElimination
									invoked.PrmEliminationLedger		= PrmEliminationLedger
							else
								for each GeneralLedgerZoneTotalRel

									include CreateZoneBalancingTransactions
									if (FinanceEnterpriseGroup.UpdateInterZoneBalance)
										invoke Update each
											invoked.BalanceUpdated		= true

								include UpdateTotals

						if (!LocalSetActionPerformed)
							make transition to Released

						if (Status.Released
						and	Released.No
						and !AccountingEntity.ProcessStatus.PostInProcess)
							Released 	= "Y"
#ifdef module intercobilling
						if (IsAIntercompanyBillingJournal)
							AllowUnrelease				= false
							invoke MakeReleased IntercompanyBillingTransactionRel
#endif
					
					Exit Rules
						if  ((SystemClosingControlRel.AutoPost
						and	!Released.No
						and	!HoldCode entered)
						or  (QuickPostForNetting))	
							BypassCubeRefresh		= true
							invoke Released.QuickPost

#ifdef module intercobilling
						if (IsAIntercompanyBillingJournal)
							invoke ProcessIntoBillingDocuments IntercompanyBillingTransaction
								invoked.PrmIntercompanyBillingGroup			= FinanceEnterpriseGroup
								invoked.PrmOriginatingDocument				= reference to this instance
#endif

				ReleaseHoldCode is an Instance Action
					valid when (HasHoldCode)
					restricted
					Action Rules
						initialize HoldCode

				UpdateToRelease is an Instance Action
					restricted
					Action Rules
						make transition to Released

				ClearPendingFlag is an Instance Action
					restricted
					Action Rules
						initialize ReleaseDate
						PendingBudgetEdit = false
						if (BudgetEditErrorRel exists)
							ReleaseErrorMessage = BudgetErrorMsg


				CreateCashOffsets is an Instance Action
					valid when (FinanceEnterpriseGroup.FundAccounting)
					Parameters
						PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
						PrmCashOffsetAccount		is a GeneralLedgerChartAccount

					Action Rules
						constraint (PrmCashOffsetAccount.AccountSubType	= "CASH")
							"CashOffsetAccountMustBeAccountSubType_\CASH"
						constraint (TransactionsRequiringFundCashEditRel !exists)
							"JournalsHaveAlreadyBeenCreatedForCashOffsetAccount"
						LocalCashOffsetAccount	= PrmCashOffsetAccount
						for each TransactionsRequiringOffsetsRel
#ifdef module ap
							if(FinanceEnterpriseGroup.FrontEndSplits)
								constraint(!each.RecordEligibleForFES)
									"RunFrontEndSplitBeforeCreateCashOffsets"
#endif
							initialize LocalCalculateGLFinanceStructure
							LocalCalculateGLFinanceStructure.InputFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							LocalCalculateGLFinanceStructure.InputAccountingEntity				= AccountingEntity
							LocalCalculateGLFinanceStructure.InputGeneralLedgerClosePeriod		= GeneralLedgerClosePeriod
							LocalCalculateGLFinanceStructure.InputGeneralLedgerJournalControl	= GeneralLedgerJournalControl
							LocalCalculateGLFinanceStructure.InputGeneralLedgerTransaction		= each.GeneralLedgerTransaction
							LocalCalculateGLFinanceStructure.InputGLFinanceStructureType		= "T"
							LocalCalculateGLFinanceStructure.InputOffsetCashAccount				= PrmCashOffsetAccount
							LocalAnswer = LocalCalculateGLFinanceStructure.CalculateGLFinanceStructure
		
							NegativeFinanceCurrencyAmount	= each.ReportCurrencyAmount
							LocalBoolean					= NegativeFinanceCurrencyAmount.PerformCalculation
							
							invoke Create GeneralLedgerTransaction
								fill in fields from this instance
								invoked.TransactionAmount		= each.TransactionAmount *-1
								invoked.ReportCurrencyAmount	= NegativeFinanceCurrencyAmount
								invoked.FinanceCodeBlock		= LocalCalculateGLFinanceStructure.OutputFinanceCodeBlock
								invoked.UnitsAmount				= each.UnitsAmount *-1
						
				UpdateOnError is an Instance Action
					refresh and lock this instance
					restricted
					default label is untranslatable
					Action Rules
						ReleaseErrorMessage			= LocalReleaseErrorMsg

				Release is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (IsValidToRelease)
					refresh and lock this instance

					Local Fields	

						LocalJournalIsInterEntity		is Boolean
						LocalReleaseJournal				is Boolean
						LocalPendingMatrixApproval  	is Boolean
						LocalCanMoveToPendingApproval  	is Boolean


					Entrance Rules
#ifdef module cb
						if (FinanceEnterpriseGroup.FundAccounting
						and GLTransactionsRequiringCustodialAccountRel exists)	
							confirmation required
								"OneOrMoreTransactionsMayRequireCustodialAccount;Continue?"	
#endif
#ifdef module ap
						if(ExecuteFrontEndSplits)
							invoke FrontEndSplitTransactions GeneralLedgerTransaction in foreground
								invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity					= AccountingEntity
								invoked.PrmGeneralLedgerClosePeriod			= GeneralLedgerClosePeriod
								invoked.PrmGeneralLedgerJournalControl		= GeneralLedgerJournalControl
#endif
						if (!PendingBudgetEdit)
							constraint (AllowUnrelease)
								"InterfacedJournalCannotBeReleased"
							constraint (!ReleaseDate entered)
								"ReleaseInProcess"
#ifdef module intercobilling
						if (IsAIntercompanyBillingJournal)
							constraint (IntercompanyBillingTransactionRel exists)
								"JournalDoesNotHaveAnyIntercompanyBillingTransactions"
							LocalICBillAmountMismatch	 = false 
							for each distinct FromCompanyAndToCompany in IntercompanyBillingTransactionRel
								LocalICBillToCompany = each.ToCompany
								LocalICBillFromCompany = each.FromCompany
								if (sum IntercompanyBillingBillToCompanyTransactionRel.TransactionAmount = 0)
									LocalICBillAmountMismatch	 = true
									end for each
							constraint (!LocalICBillAmountMismatch)
								"SumOfIntercompanyBillingBillToCompany<LocalICBillToCompany>JournalAmountsEqualsZero;MustSumToANonZeroAmount"
#endif							

						if (JournalType.InterEntity)
							LocalJournalIsInterEntity	= false
							for each GeneralLedgerTransaction set
								if (each.FinanceCodeBlock.ToAccountingEntity	= AccountingEntity)
									LocalJournalIsInterEntity	= true
									end for each
							if (!LocalJournalIsInterEntity
							and !EligibleForElimination)				
								confirmation required
									"NoTransactionsFoundFor<AccountingEntity.AccountingEntityLabel>_<AccountingEntity>,ProceedWith_\Release?"
							if (EligibleForElimination)					
								constraint (LocalJournalIsInterEntity)	
									"RelatedPartyEliminationRequiresATransactionFor<AccountingEntity.AccountingEntityLabel>_<AccountingEntity>"

						if (JournalType.InterEntity)
							constraint (InterEntityGLTransactionRel exists)
								"CannotRelease;JournalDoesNotHaveInterEntityTransactions"
						if (JournalType.ManualEncumbrance)
							constraint (!TotalFunctionalAmount	= 0)
								"FunctionalDebitsCannotBeZero"

						if (!JournalType.ManualEncumbrance)
							if (AccountingEntity.BalanceTransactionCurrency)
								for each GLCurrencyJournalControl set
									LocalCurrencyCode	= each.FromCurrency
									constraint (each.TotalTransactionAmount	= 0)
										"<LocalCurrencyCode>TransactionDebitsDoNotEqualCredits"
						
							if (!AccountingEntity.AutoBalance
							or  (AccountingEntity.AutoBalance
							and MemoAccountUsed))
								constraint (TotalAutoReverseAmount	= 0)
									"AutoReverseDebitsDoNotEqualCredits"
								constraint (TotalFunctionalAmount	= 0)
									"FunctionalDebitsDoNotEqualCredits"
								constraint (TotalAlternateAmount	= 0)
									"AlternateDebitsDoNotEqualCredits"
								constraint (TotalAlternate2Amount	= 0)
									"Alternate2DebitsDoNotEqualCredits"
								constraint (TotalAlternate3Amount	= 0)
									"Alternate3DebitsDoNotEqualCredits"								
								constraint (TotalRpt1Amount			= 0)
									"<FinanceEnterpriseGroup.ReportOne>AmountDebitsDoNotEqualCredits"
								constraint (TotalRpt2Amount			= 0)
									"<FinanceEnterpriseGroup.ReportTwo>AmountDebitsDoNotEqualCredits"
								constraint (TotalRpt3Amount			= 0)
									"<FinanceEnterpriseGroup.ReportThree>AmountDebitsDoNotEqualCredits"
								constraint (TotalRpt4Amount			= 0)
									"<FinanceEnterpriseGroup.ReportFour>AmountDebitsDoNotEqualCredits"
								constraint (TotalRpt5Amount			= 0)
									"<FinanceEnterpriseGroup.ReportFive>AmountDebitsDoNotEqualCredits"

							if  (AccountingEntity.AutoBalance
							and !JournalAmountsAreBalanced)																			
								if (!TotalFunctionalAmount	  = 0)
									if (AccountingEntity.FunctionalAutoBalanceThreshold entered)

										if (TotalFunctionalAmount < 0)
											LocalUnsignedAmount = -1 * TotalFunctionalAmount
										else
											LocalUnsignedAmount = TotalFunctionalAmount
										constraint (LocalUnsignedAmount <= AccountingEntity.FunctionalAutoBalanceThreshold)
											"CannotAutoBalance_FunctionalAmount,DifferenceExceedsThreshold"
								if (!TotalAlternateAmount	  = 0)
									if (AccountingEntity.AlternateAutoBalanceThreshold entered)
										if (TotalAlternateAmount < 0)
											LocalUnsignedAmount = -1 * TotalAlternateAmount
										else
											LocalUnsignedAmount = TotalAlternateAmount
										constraint (LocalUnsignedAmount <= AccountingEntity.AlternateAutoBalanceThreshold)
											"CannotAutoBalance_AlternateAmount,DifferenceExceedsThreshold"
								if (!TotalAlternate2Amount	  = 0)
									if (AccountingEntity.Alternate2AutoBalanceThreshold entered)
										if (TotalAlternate2Amount < 0)
											LocalUnsignedAmount = -1 * TotalAlternate2Amount
										else
											LocalUnsignedAmount = TotalAlternate2Amount
										constraint (LocalUnsignedAmount <= AccountingEntity.Alternate2AutoBalanceThreshold)
											"CannotAutoBalance_Alternate2Amount,DifferenceExceedsThreshold"							
								if (!TotalAlternate3Amount	  = 0)
									if (AccountingEntity.Alternate3AutoBalanceThreshold entered)
										if (TotalAlternate3Amount < 0)
											LocalUnsignedAmount = -1 * TotalAlternate3Amount
										else
											LocalUnsignedAmount = TotalAlternate3Amount
										constraint (LocalUnsignedAmount <= AccountingEntity.Alternate3AutoBalanceThreshold)
											"CannotAutoBalance_Alternate3Amount,DifferenceExceedsThreshold"							
								if (!TotalRpt1Amount		  = 0)
									if (FinanceEnterpriseGroup.ReportOneAutoBalanceThreshold entered)
										if (TotalRpt1Amount < 0)
											LocalUnsignedAmount = -1 * TotalRpt1Amount
										else
											LocalUnsignedAmount = TotalRpt1Amount
										constraint (LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportOneAutoBalanceThreshold)
											"CannotAutoBalance_Report1Amount,DifferenceExceedsThreshold"							
								if (!TotalRpt2Amount		  = 0)
									if (FinanceEnterpriseGroup.ReportTwoAutoBalanceThreshold entered)
										if (TotalRpt2Amount < 0)
											LocalUnsignedAmount = -1 * TotalRpt2Amount
										else
											LocalUnsignedAmount = TotalRpt2Amount
										constraint (LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportTwoAutoBalanceThreshold)
											"CannotAutoBalance_Report2Amount,DifferenceExceedsThreshold"	
								if (!TotalRpt3Amount		  = 0)
									if (FinanceEnterpriseGroup.ReportThreeAutoBalanceThreshold entered)
										if (TotalRpt3Amount < 0)
											LocalUnsignedAmount = -1 * TotalRpt3Amount
										else
											LocalUnsignedAmount = TotalRpt3Amount
										constraint (LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportThreeAutoBalanceThreshold)
											"CannotAutoBalance_Report3Amount,DifferenceExceedsThreshold"	
								if (!TotalRpt4Amount		  = 0)
									if (FinanceEnterpriseGroup.ReportFourAutoBalanceThreshold entered)
										if (TotalRpt4Amount < 0)
											LocalUnsignedAmount = -1 * TotalRpt4Amount
										else
											LocalUnsignedAmount = TotalRpt4Amount
										constraint (LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportFourAutoBalanceThreshold)
											"CannotAutoBalance_Report4Amount,DifferenceExceedsThreshold"								
								if (!TotalRpt5Amount		  = 0)
									if (FinanceEnterpriseGroup.ReportFiveAutoBalanceThreshold entered)
										if (TotalRpt5Amount < 0)
											LocalUnsignedAmount = -1 * TotalRpt5Amount
										else
											LocalUnsignedAmount = TotalRpt5Amount
										constraint (LocalUnsignedAmount <= FinanceEnterpriseGroup.ReportFiveAutoBalanceThreshold)
											"CannotAutoBalance_Report5Amount,DifferenceExceedsThreshold"	
		
							if  (AccountingEntity.AutoBalance
							and !JournalAmountsAreBalanced)
								confirmation required
									"<AutoBalanceConfirmationMessage>"
						
						if (IsValidStatusForElimination)					
							initialize LocalEntityCount
							initialize LocalElimToEntity
							for each distinct FinanceCodeBlock.ToAccountingEntity in GeneralLedgerTransactionsRel
								LocalEntityCount += 1
								if (AccountingEntity != each.FinanceCodeBlock.ToAccountingEntity)
									LocalElimToEntity = each.FinanceCodeBlock.ToAccountingEntity
								if (LocalEntityCount > 2)
									end for each
							
							constraint (LocalEntityCount = 2)		
								"JournalFor_\Related_\Party_\ElimnationCanOnlyHaveTwoEntities"
							constraint (GLInterEntityRelationRel.EliminationLedger entered)
								"Elimination_\LedgerIsRequiredFor_\Related_\Party_\Elimination"

#ifdef module sharedfinance
						if ((!AccountingEntity.JournalApproval.None
						and  initiating action != "FinanceEnterpriseGroup.InterEntityNetting"
						and  FunctionalDebitAmount	> AccountingEntity.JournalApprovalAmount)
						or  (!FunctionalDebitAmount entered
						and  initiating action != "FinanceEnterpriseGroup.InterEntityNetting"
						and  (UnitsDebits entered
						or    UnitsCredits entered)			
						and	 AccountingEntity.JournalApproval.AmountAndUnit)
						or  (initiating action = "FinanceEnterpriseGroup.InterEntityNetting"
						and  ApprovalProcessRequiredThroughNetting
						and  FunctionalDebitAmount	> AccountingEntity.JournalApprovalAmount
						and  AccountingEntity.BypassApprovalCode	!= ApprovalCode)) 
							constraint (ApprovalCode entered)
								"ApprovalCodeIsRequired"

						if (ApprovalCode entered
						and !AccountingEntity.JournalApproval.None
						and AccountingEntity.BypassApprovalCode	!= ApprovalCode)


							LocalApprover = actor.agent(Employee).Employee
							constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonReleasingTheJournalCannotBeTheApprover"
							LocalApprover = create stamp.actor.agent(Employee).Employee
							constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonCreatingTheJournalCannotBeTheApprover"
							constraint (ApprovalCode.HasApprovalLevels) 
								"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
							constraint (!ApprovalCode.HasTeamWithNoMembers) 
								"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
							constraint (!ApprovalCode.HasInvalidEscalations)
								"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
							constraint (!ApprovalCode.HasInactiveResources)
								"CannotComplete;TheApprovalCodeHasInactiveResources"











#endif
						LocalPendingMatrixApproval = false
						LocalCanMoveToPendingApproval = false
						if (FinanceEnterpriseGroup.EnableResponsibilityMatrix)
							for each GeneralLedgerTransaction set 
								invoke SubmitForApproval each 
								if (!LocalPendingMatrixApproval and each.ResponsibilityMatrixApprovalProcessorRel exists
								and !each.ResponsibilityMatrixApprovalProcessorRel.Status.Approved)
									LocalPendingMatrixApproval = true
									if(!LocalCanMoveToPendingApproval and each.ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)
										LocalCanMoveToPendingApproval = true	
#ifdef module cb			
						if (!LocalPendingMatrixApproval)
							if (FinanceEnterpriseGroup.FundAccounting)
								include PerformCashFundAmountEdit
								constraint (ExceedesCashCodeFundBalanceRel !exists)
									"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
								invoke Delete CashCodeFundEditRel
#endif
#ifdef module cam
							if (FinanceEnterpriseGroup.CustodialAccountManagement)
								include PerformCustodialAmountEdit
								constraint (ExceedsCustodialAccountBalanceRel !exists)
									"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
								invoke Delete CustodialAccountEditRel
#endif
							
					Action Rules
						if (!LocalPendingMatrixApproval)
							ReleaseDate			= current corporate date
							initialize ReleaseErrorMessage

					Exit Rules
						if(LocalPendingMatrixApproval)
							if(LocalCanMoveToPendingApproval)
								make transition to PendingApproval
						else
							if (System.EncumbranceOption.TrackAndEdit
							and !PendingBudgetEdit
							and initiating action != "FinanceEnterpriseGroup.InterEntityNetting")
								LocalBudgetEditGroup = UniqueID
								invoke EditTotalsRoute BudgetTemplateGroupTotal
									invoked.PrmFinanceEnterpriseGroup					= FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup							= LocalBudgetEditGroup
									invoked.PrmMode										= BudgetEditMode.Hard
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackReference	= reference to this instance
									invoked.PrmBusinessClassName				= "GeneralLedgerJournalControl"
									invoked.PrmEditContext						= "ReleaseGLJournalControl"
									invoked.PrmCurrencyTable					= CurrencyTable
							
							if (System.EncumbranceOption.Track
							and initiating action != "FinanceEnterpriseGroup.InterEntityNetting")
								LocalBudgetEditGroup = UniqueID
								invoke EditTotalsRoute BudgetTemplateGroupTotal
									invoked.PrmFinanceEnterpriseGroup					= FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup							= LocalBudgetEditGroup
									invoked.PrmMode										= BudgetEditMode.UpdateOnly
									invoked.PrmBusinessClassName				= "GeneralLedgerJournalControl"
									invoked.PrmEditContext						= "ReleaseGLJournalControlTrackOnly"
									invoked.PrmCurrencyTable					= CurrencyTable

							if ((!System.EncumbranceOption.TrackAndEdit)
							or  (System.EncumbranceOption.TrackAndEdit
							and  PendingBudgetEdit))
								LocalReleaseJournal			= false
								if ((!AccountingEntity.JournalApproval.None
								and  initiating action != "FinanceEnterpriseGroup.InterEntityNetting"
								and  FunctionalDebitAmount	> AccountingEntity.JournalApprovalAmount
								and  AccountingEntity.BypassApprovalCode	!= ApprovalCode)
								or  (AccountingEntity.JournalApproval.AmountAndUnit
								and  initiating action != "FinanceEnterpriseGroup.InterEntityNetting"
								and  !FunctionalDebitAmount entered
								and	 AccountingEntity.BypassApprovalCode	!= ApprovalCode
								and  (UnitsDebits entered
								or    UnitsCredits entered))	
								or  (initiating action = "FinanceEnterpriseGroup.InterEntityNetting"
								and  ApprovalProcessRequiredThroughNetting
								and  FunctionalDebitAmount	> AccountingEntity.JournalApprovalAmount
								and  AccountingEntity.BypassApprovalCode	!= ApprovalCode))
#ifdef module sharedfinance
									include GetNextApprovalLevel
#endif
									ApprovalLevel	= LocalApprovalLevel
									Approver 		= LocalApprover
									ApproverTeam 	= LocalApproverTeam
									if (!LocalApprover entered)
										constraint (LocalApproverTeam entered)
											"PersonUpdatingJournalCannotBeTheApprover"
										constraint (DerivedCurrentTeamActorList entered)
											"PersonUpdatingJournalCannotBeATeamMembers"

									if(!GeneralControlApprovalProcessorRel exist)
										invoke Create GeneralControlApprovalProcessorRel
									if (LocalApprover entered)
										invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
											invoked.PrmFinanceResource	= LocalApprover
											invoked.PrmStatus			= 1	
									else
									if(LocalApproverTeam entered)
										invoke AddToApprovalHistory GeneralControlApprovalProcessorRel
											invoked.PrmFinanceTeam		= LocalApproverTeam
											invoked.PrmStatus			= 1
									include InitiateJournalFlow
									make transition to PendingApproval
								else
									LocalReleaseJournal			= true
									if (JournalType.ManualEncumbrance)	
										include CreateGLCommitRecords		
									else	
										include CreateGLTransactionDetailCreation
										include JournalizeGLTransactionDetail
								PendingBudgetEdit				= false
								invoke Purge BudgetEditErrorRel
							else
								if (System.EncumbranceOption.TrackAndEdit)
									PendingBudgetEdit 			= true






















#ifdef module idm
							if (FinanceEnterpriseGroup.IDMConfiguration.UpdateJournalEntryAttributes)
								if (IsIDMConfigured)							
									invoke UpdateIDMAttributes
#endif
#ifdef module ap

				FrontEndSplitTransactions	is an Instance Action
					valid when(AllowFrontEndSplit)
					Action Rules
						invoke FrontEndSplitTransactions GeneralLedgerTransaction in foreground
							invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.PrmAccountingEntity					= AccountingEntity
							invoked.PrmGeneralLedgerClosePeriod			= GeneralLedgerClosePeriod
							invoked.PrmGeneralLedgerJournalControl		= GeneralLedgerJournalControl

				DeleteFrontEndSplitTransactions	is an Instance Action
					valid when(HasFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitTransactions GeneralLedgerTransaction in foreground
							invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.PrmAccountingEntity					= AccountingEntity
							invoked.PrmGeneralLedgerClosePeriod			= GeneralLedgerClosePeriod
							invoked.PrmGeneralLedgerJournalControl		= GeneralLedgerJournalControl
#endif
			PendingApproval is a State			



				MoveToUnreleased is an Instance Action
					restricted
					Action Rules
						make transition to Unreleased

				Reject is an Instance Action
					restricted
					Parameters
						ParmActor		is an Actor
					Action Rules
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam
						initialize ReleaseDate
						include SendRejectNotificationToUser

						if (System.EncumbranceOption.TrackAndEdit
						or  System.EncumbranceOption.Track)
							if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
								invoke RelieveObligation GeneralLedgerTransaction in background
									run after AsyncId
									assign async action request id to AsyncId
									invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.PrmAccountingEntity	= AccountingEntity
									invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
									invoked.PrmJournalControl	= GeneralLedgerJournalControl
							else
								invoke RelieveObligation GeneralLedgerTransaction in foreground
									invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.PrmAccountingEntity	= AccountingEntity
									invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
									invoked.PrmJournalControl	= GeneralLedgerJournalControl
						if(GeneralControlApprovalProcessorRel exist)
							invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
								invoked.ParmActor = ParmActor
								invoked.ParmStatus = 3
		
						make transition to Unreleased

				ManualReject is an Instance Action
		    		valid when (ManualAllowed)
					Action Rules
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam		
						initialize ReleaseDate
						include SendRejectNotificationToUser

						if (System.EncumbranceOption.TrackAndEdit
						or  System.EncumbranceOption.Track)
							if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
								invoke RelieveObligation GeneralLedgerTransaction in background
									run after AsyncId
									assign async action request id to AsyncId
									invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.PrmAccountingEntity	= AccountingEntity
									invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
									invoked.PrmJournalControl	= GeneralLedgerJournalControl
							else
								invoke RelieveObligation GeneralLedgerTransaction in foreground
									invoked.PrmEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.PrmAccountingEntity	= AccountingEntity
									invoked.PrmClosePeriod		= GeneralLedgerClosePeriod
									invoked.PrmJournalControl	= GeneralLedgerJournalControl
						if(GeneralControlApprovalProcessorRel exist)
							invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
								invoked.ParmActor = actor
								invoked.ParmStatus = 14
						make transition to Unreleased
						cancel "JournalApproval" PA service

			
		   		ManualApprove is an Instance Action
		    		valid when (ManualAllowed)
					confirmation required
						"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
					Entrance Rules
						constraint (!create stamp.actor	= actor)
							"PersonCreatingTheJournalCannotBeTheApprover"
						constraint (!update stamp.actor	= actor)
							"PersonUpdatingTheJournalCannotBeTheApprover"
						
					Action Rules
						if(GeneralControlApprovalProcessorRel exist)
							invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
								invoked.ParmActor = actor
								invoked.ParmStatus = 13			
						make transition to Unreleased
						include SendManualApproveNotificationToUser
						cancel "JournalApproval" PA service

					Exit Rules
						if (JournalType.ManualEncumbrance)
							include CreateGLCommitRecords		
						else
							if (IsValidStatusForElimination)					
								initialize LocalElimToEntity
								for each distinct FinanceCodeBlock.ToAccountingEntity in GeneralLedgerTransactionsRel
									if (AccountingEntity != each.FinanceCodeBlock.ToAccountingEntity)
										LocalElimToEntity = each.FinanceCodeBlock.ToAccountingEntity
										end for each
							include CreateGLTransactionDetailCreation
							include JournalizeGLTransactionDetail

				Approve is an Instance Action
					restricted
					Action Rules
						make transition to Unreleased
					Exit Rules
						if (JournalType.ManualEncumbrance)
							include CreateGLCommitRecords		
						else
							if (IsValidStatusForElimination)					
								initialize LocalElimToEntity
								for each distinct FinanceCodeBlock.ToAccountingEntity in GeneralLedgerTransactionsRel
									if (AccountingEntity != each.FinanceCodeBlock.ToAccountingEntity)
										LocalElimToEntity = each.FinanceCodeBlock.ToAccountingEntity
										end for each
							include CreateGLTransactionDetailCreation
							include JournalizeGLTransactionDetail

				RejectWithReasonCode is an Instance Action
					restricted
					subject is RejectJournalEntry
					reason code required
					action comment required
					Parameters
						ParmActor			is an Actor
		
					Action Rules
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam		
						initialize ReleaseDate
						include SendRejectNotificationToUser
						if(GeneralControlApprovalProcessorRel exist)
							invoke UpdateApprovalHistory GeneralControlApprovalProcessorRel 
								invoked.ParmActor = ParmActor
								invoked.ParmStatus = 3
						make transition to Unreleased
			
					Exit Rules
						LocalRejectTitle = reason code + ": " + current timestamp
						invoke Create GeneralLedgerJournalComment
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.AccountingEntity			= AccountingEntity
							invoked.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
#ifdef module sharedfinance
							invoked.Title						= LocalRejectTitle	
#endif
#ifndef module sharedfinance
							invoked.Title						= action comment
#endif
							invoked.Comment						= action comment

            Released	is a State

				Unrelease is an Instance Action
					valid when (CanUnreleaseReleased)
					Entrance Rules
						constraint (JournalType.Normal)
							"CannotUnreleaseInterEntityJournal"
						constraint (!AccountingEntity.ProcessStatus.PostInProcess)
							"CannotUnreleaseJournalWhilePostingIsRunning"							
					Action Rules
						invoke Released.Unrelease ReleasedTransactionDetailsRel
						initialize ApprovalLevel		
						initialize Approver				
						initialize ReleaseOperator
						initialize ReleaseDate
						invoke Delete GeneralLedgerZoneTotal set
						if (System.EncumbranceOption.Track
						or  System.EncumbranceOption.TrackAndEdit)
							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup					= UniqueID
								invoked.PrmMode								= BudgetEditMode.UpdateOnly
								invoked.PrmTotalsProcessing					= BudgetEditTotalsProcessing.Reverse
								invoked.PrmBusinessClassName				= "GeneralLedgerJournalControl"
								invoked.PrmEditContext						= "UnreleaseReleasedGLJournalControl"
						make transition to Unreleased

				ClearHoldCode is an Instance Action
					valid when (HasHoldCode)
					Action Rules
						initialize HoldCode

				AttachHoldCode is an Instance Action
					Parameters
						PrmHoldCode			is a GeneralLedgerHoldCode
							default label is "HoldCode"
					Parameter Rules
						PrmHoldCode
							required
					Action Rules
						HoldCode	= PrmHoldCode

				QuickPost is an Instance Action
					completion message is "JournalPostingSubmitted"
					valid when (IsValidToPost)
					Entrance Rules
						if (!BypassCubeRefresh)
							constraint (!AccountingEntity.ProcessStatus.PostInProcess)
								"PostInProcess;CannotQuickPost"
						include VerifyTemplatesAreNotProcessing
					Action Rules

						if (JournalType.InterEntity)
							LocalQPostJournalInterEntity	= false
							for each GeneralLedgerTransaction set
								if (each.FinanceCodeBlock.ToAccountingEntity	= AccountingEntity)
									LocalQPostJournalInterEntity	= true
									end for each
							if (LocalQPostJournalInterEntity		= false)	
								Status = 5
								ActPostDate = current corporate date
								PostingOperator = actor					


						if (!JournalType.InterEntity
						or	LocalQPostJournalInterEntity	= true)

							make transition to PostInProcess
							invoke Post GeneralLedgerTransaction in background
								invoked.PrmSkipAttachRule			= true				
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity			= AccountingEntity
								invoked.PrmGeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
								invoked.PrmJournalControl			= GeneralLedgerJournalControl
								if (QuickPostForNetting
								or  FinanceEnterpriseGroup.BypassCubeRefreshOnPost)
									invoked.PrmBypassCubeRefresh    = true
								else
									invoked.PrmBypassCubeRefresh	= BypassCubeRefresh
																		
			CopyInProcess			is a State
				Create is a Create Action
					restricted
					Entrance Rules
 						if (PostingDate not entered)
 							GeneralLedgerClosePeriod  = AccountingEntity.CurrentPeriod
							PostingDate               = AccountingEntityLedgerPeriodRel.DerivedPeriodEndDate                        
						LocalPostingDate              = PostingDate
						LocalEndDate                  = DerivedEntityCalendarPeriod
						constraint (EntityLedgerPeriodRel exists)
							"PeriodIsNotDefinedForPostingDate"
						constraint (first EntityLedgerPeriodRel.PeriodStatus.Open
						or          first EntityLedgerPeriodRel.PeriodStatus.Backpost)
							"PeriodIsClosed"
						LocalUniqueJournalID = UniqueJournalID
						constraint (!UniqueJournalIDRel exists)
							"UniqueJournalIDAlreadyExists"								                          
					Action Rules
						LocalPostingDate				= PostingDate
						LocalEndDate					= DerivedEntityCalendarPeriod
						GeneralLedgerCalendarPeriod 	= DerivedEntityCalendarPeriod
						GeneralLedgerClosePeriod		= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod
						if (AccountingEntity.AccountingUnitZoneBalancing)
							BaseZoneAccountingUnit			= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							BaseZoneDimension1				= DefaultZoneFinanceDimension1Rel.ZoneDimension
						AllowUnrelease					= true
						if (NewManualJournalControlType entered)
							JournalType					= NewManualJournalControlType
						else
							JournalType					= NewJournalControlType
						if (Currency	not entered)
							Currency	= AccountingEntity.FunctionalCurrency		
						if(SystemClosingControlRel exists
						and SystemClosingControlRel.CurrencyTable != blank)
							CurrencyTable = SystemClosingControlRel.CurrencyTable
							include CurrencyRateCalculation
						else
							CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
							include CurrencyRateCalculation	

				Delete is an Instance Action
					default label is "MoveToDeleted"
					completion message is "JournalMovedToDeletedStatus"
					run in background
					Parameters
						BlankOutUniqueJournalID	is Boolean
					Entrance Rules
						constraint (AllowUnrelease)
							"InterfacedJournalCannotBeDeleted"
					Exit Rules
						invoke Delete GLTransactionDetailRel

						if (System.EncumbranceOption.TrackAndEdit
						or  System.EncumbranceOption.Track)
							invoke PurgeGroupTotalsForEditGroup BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup				= UniqueID
							invoke Purge BudgetEditErrorRel
						if (last GeneralLedgerTransaction set.GeneralLedgerTransaction > 100)
							invoke PurgeForJournalControl GeneralLedgerTransaction in background
								invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity				= AccountingEntity
								invoked.PrmClosePeriod					= GeneralLedgerClosePeriod
								invoked.PrmJournal						= GeneralLedgerJournalControl
						else
							invoke PurgeForJournalControl GeneralLedgerTransaction in foreground
								invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity				= AccountingEntity
								invoked.PrmClosePeriod					= GeneralLedgerClosePeriod
								invoked.PrmJournal						= GeneralLedgerJournalControl
						if (BlankOutUniqueJournalID)
							initialize UniqueJournalID
						make transition to Deleted

			PostInProcess			is a State

            Posted 					is a State
            
            	SetBackToReleased is an Instance Action
            		restricted
					confirmation required
						"DoNotRunThisActionUnlessInstructedToDoSoBy_Infor._Proceed?"
					Action Rules
						constraint (any GeneralLedgerTransaction set.Status.Released)
							"CannotRunThisActionUnlessTransactionsAreIn_ReleasedStatus"
						Status = Status.Released
						initialize JournalPostingResult
						
				CreatePostedJournal is a Create Action		
					restricted
					Action Rules
						Released 					= "Y"
						ActPostDate					= current corporate date
						
				AutoCreatePosted is a Create Action
					restricted
					Field Rules
						PostingDate
							required

					Action Rules
						if (TransientFromGainLoss)
    						CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
						Released 					= "Y"
						ActPostDate					= current corporate date
						LocalPostingDate			= PostingDate
						LocalEndDate				= DerivedEntityCalendarPeriod
						if (!PrimaryLedger entered)
							PrimaryLedger				= Ledger
						if (DerivedEntityCalendarPeriod entered
						and !first EntityLedgerPeriodRel.BackPostPeriod)
							while (!first EntityLedgerPeriodRel.OpenPeriodOnly)
								LocalPostingDate = first GeneralLedgerCalendarPeriodRel.Date + 1
								LocalEndDate	 = DerivedEntityCalendarPeriod
						if (!EntityLedgerPeriodRel exists
						or  !DerivedEntityCalendarPeriod entered)
							LocalEndDate	 = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
							LocalPostingDate = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
						if (Ledger.RetainedEarningsLedger)		
							LocalContinue = true
						else 
							GeneralLedgerCalendarPeriod 	= DerivedEntityCalendarPeriod
							GeneralLedgerClosePeriod		= first EntityLedgerPeriodRel.GeneralLedgerClosePeriod


						if (!BaseZoneAccountingUnit entered)
							if (AccountingEntity.AccountingUnitZoneBalancing)
								BaseZoneAccountingUnit			= DefaultZoneAccountingUnitRel.ZoneAccountingUnit
						if (!BaseZoneDimension1 entered)
							if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
								BaseZoneDimension1				= DefaultZoneFinanceDimension1Rel.ZoneDimension

						if (TransientFromGainLoss)
							invoke TriggerBOD GeneralLedgerJournalControl

				Update is an Update Action
					restricted
					bypass field rules
				

				Purge is a Purge Action
					restricted

					
			Deleted 		is a State

			DeleteInProcess is a State
FileCreationLogic.GeneralLedgerJournalControl is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"GeneralLedgerJournalControl_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation								
				FileCreationSetupPrm	is a FileCreationSetup
#endif				
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation							
				LocalGeneralLedgerJournalControlGroupSelection		is a GeneralLedgerJournalControl group in subject FileCreationGeneralLedgerJournalControl
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      GeneralLedgerJournalControl % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation															
					LocalGeneralLedgerJournalControlGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalGeneralLedgerJournalControlGroupSelection not entered
					or	GeneralLedgerJournalControl within LocalGeneralLedgerJournalControlGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= AccountingEntity
							invoked.Key2				= GeneralLedgerClosePeriod
							invoked.Key3				= GeneralLedgerJournalControl
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
#endif
