CashLedgerCashReceiptDetail is a BusinessClass
    owned by cb
    prefix is CBA
    classic name is CBRECPTDTL

    Ontology
        symbolic key is CashLedgerCashReceiptDetail
            classic set name is CBASET1
            classic name is SEQ-NBR
            classic name for CashLedgerCashReceiptHeader.BankTransactionCode is BANK-INST-CODE
            classic name for CashLedgerCashReceiptHeader.TransactionNumber is TRANS-NBR

    Patterns
        implements ContextualParent
        implements InlineUserFields
			size is 1000	 
        implements StaticJava
        disable AuditIndex

    Persistent Fields
    	ReceiptCompany				is a  CompanyIsolated  

		CashCategory  
            classic name is PROD-TAX-CAT
        ReceiptBankAmount         	is a  CurrencyAmount
            classic name is RECEIPT-AMOUNT 
		ReceiptBaseAmount         	is a  FinanceCurrencyAmount  
            classic name is BASE-RECPT-AMT
        ReceiptDistributionAmount 	is an InternationalAmount  
            classic name is TO-RCPT-AMT
        ReceiptAccount            	is a  TransactionCodeBlock  
            classic name for ReceiptAccount.ToAccountingEntity is RCPT-COMPANY
            classic name for ReceiptAccount.AccountingUnit is RCPT-ACCT-UNIT
            classic name for ReceiptAccount.GeneralLedgerChartAccount is RCPT-ACCOUNT
            classic name for ReceiptAccount.Project is ACTIVITY

		TaxCode
		TaxableData				  	is a  FinanceCurrencyAmountGroup 
        	classic name for TaxableData.CurrencyAmount is TAXABLE-AMT
        	classic name for TaxableData.FunctionalAmount.EnteredCurrencyAmount is  BASE-TXBL-AMT




        TaxableDistributionAmount 	is an InternationalAmount 

            classic name is TO-TXBL-AMT 
		TaxAmountData			  	is a  FinanceCurrencyAmountGroup  
        	classic name for TaxAmountData.CurrencyAmount is TAX-AMOUNT
        	classic name for TaxAmountData.FunctionalAmount.EnteredCurrencyAmount is  BASE-TAX-AMT




        TaxDistributionAmount     	is an InternationalAmount
            classic name is TO-TAX-AMT 
        TaxRate                   	is a  ChrgRate
		ContractRebateGroup
		Reference
        Description
        CashAllocationCode			
        CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected
		UnitsAmount							is an InternationalAmount	
			default label is "Units"
	Local Fields
		ExchangeDate
		CurrencyTable
		CalculateTax
        TaxTableOutput
        ProcessTaxHistory
		TaxOut 										is Alpha 1
		LocalReceiptBaseAmount						is a  FinanceCurrencyAmount

    	LocalDocumentCurrencyTotals 				is a  DocumentCurrencyTotals
    	LocalFinanceCurrencyAmount					is a  FinanceCurrencyAmount
    	CatTaxEntityHasValue						is Boolean
		GeneralLedgerSystemCode
		LocalPostingDate							is a  PostingDate


		BypassNegativeRateEdit									
		LocalBaseCurrency							is a Currency
		LocalFinanceCurrencyAmountGroup				is a FinanceCurrencyAmountGroup		
		LocalFEGtext								is like FinanceEnterpriseGroup
		LocalDerivedFESKey 							is a FrontEndSplitKey
#ifdef module cam
		LocalFinanceDimension10						is a FinanceDimension10				
#endif
	Transient Fields
		TransientFromCurrency						is a FromCurrency
			derive value from CashCode.Currency
    	ConfirmationMessage							is Alpha 150
		CatTaxEntity			    				is a ToAccountingEntity  
			derive value from DerivedCatTaxEntity  				        	        	            		
		CompanyAccountingEntity		    			is an AccountingEntity
			derive value from DerivedCompanyAccountingEntity
		CreatedFromImport							is Boolean  
		
	Derived Fields
		DerivedCatTaxEntity							is a DerivedField
			type is like ToAccountingEntity
			restricted
			if (CatTaxEntityHasValue)
				return blank
			else
				return ReceiptAccount.ToAccountingEntity	

		DerivedCompanyAccountingEntity				is a DerivedField
			type is like AccountingEntity
			restricted
			return CashLedgerCashReceiptHeader.Company.OrigCompany.AccountingEntity

		ReEnterCodeBlockMessage						is a MessageField
			restricted
			"EntityChangedAndCategoryIsBlank;YouWillBeRequiredToReenterFinanceStructureData"	


		DerivedEnteredCurrencyAmt is a DerivedField
			type is Decimal size 19.3
			restricted
			return ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount
			
		DerivedAccountingEntity is a DerivedField
			type is Alpha size 12
			restricted
			return ReceiptAccount.AccountingEntity
			
		DerivedAccountingUnit is a DerivedField
			type is Alpha size 25
			restricted
			return ReceiptAccount.AccountingUnit
		
		DerivedGeneralLedgerChartAccount is a DerivedField
			type is Alpha size 26
			restricted
			return ReceiptAccount.GeneralLedgerChartAccount
		
		DerivedTaxableCurrencyAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			return TaxableData.CurrencyAmount
			
		DerivedTaxAmtDataCurrencyAmount is a DerivedField
			type is Decimal size 19.3
			restricted 
			return TaxAmountData.CurrencyAmount
				

    Conditions
        IsNonBaseTransaction
        	restricted
            classic name is FOREIGN-CURR
            when (ReceiptBankAmount != ReceiptBaseAmount.FunctionalAmount)

		IsRebatePaymentType
			restricted
			when (CashLedgerCashReceiptHeader.TransactionType = 5)

		HasRebates
			restricted
			when (ContractRebateGroup.ContractGroup entered)
		
		CustodialAccountRequiredForFund			
            when (ReceiptAccount.FinanceDimension10 !entered
			and  CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
            and  (CashCodeFundByAccountingUnitRel.FundUsedForCustodialAccounting
			or    CashCodeFundByDimension1Rel.FundUsedForCustodialAccounting))
			
    Relations
        CashLedgerCashReceiptHeaderRel
            classic name is CBRECPTHDR
            one-to-one relation to CashLedgerCashReceiptHeader
            required
            Field Mapping uses symbolic key
            	related.CashManagementGroup 							= CashManagementGroup	
                related.CashCode                         				= CashCode 
                related.CashLedgerCashReceiptHeader.BankTransactionCode = CashLedgerCashReceiptHeader.BankTransactionCode
                related.CashLedgerCashReceiptHeader.TransactionNumber   = CashLedgerCashReceiptHeader.TransactionNumber

		CashCategoryDetailRel
			one-to-one relation to CashCategoryDetail
			Field Mapping uses CategoryByEntity
				related.CashManagementGroup 				= CashManagementGroup
				related.CashCategory						= CashCategory
				related.CashProcessLevel					= CashLedgerCashReceiptHeader.CashProcessLevel
				related.RevenueAccount.ToAccountingEntity 	= CatTaxEntity

		CashCodeFundByAccountingUnitRel		
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= ReceiptAccount.ToAccountingEntity
		 		related.AccountingUnit			= ReceiptAccount.AccountingUnit
				related.FinanceDimension1		= blank

		CashCodeFundByDimension1Rel			
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= ReceiptAccount.ToAccountingEntity
		 		related.AccountingUnit			= blank
				related.FinanceDimension1		= ReceiptAccount.FinanceDimension1


		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= CashLedgerCashReceiptDetail

#ifdef module cam
		CustodialDetailAmountRel	
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = CashManagementGroup
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity = ReceiptAccount.ToAccountingEntity
				and    related.CustodialPosting = LocalFinanceDimension10
				and 	related.EditLevel.Individual)
#endif

	Sets

		ByRebate
        	Instance Selection
        		where (HasRebates)
        	Sort Order	
        		ContractRebateGroup.ContractGroup
        		ContractRebateGroup.Contract
        		ContractRebateGroup.ContractRebateType
        		ContractRebateGroup.ContractRebateDue
        		CashManagementGroup
        		CashCode
        		CashLedgerCashReceiptHeader.BankTransactionCode
        		CashLedgerCashReceiptHeader.TransactionNumber
        		CashLedgerCashReceiptDetail			
	
	Rule Blocks
		SetCurrencyData

			TransientFromCurrency 	= CashCode.Currency
			LocalPostingDate		= CashLedgerCashReceiptHeader.PostDate
			ExchangeDate 			= CashLedgerCashReceiptHeader.DepositDate
			CurrencyTable 			= CashLedgerCashReceiptHeader.CurrencyTable
			if (TaxableData.CurrencyAmount entered)
				TaxableData.ExchangeDate 	= CashLedgerCashReceiptHeader.DepositDate
			if (TaxAmountData.CurrencyAmount entered)
				TaxAmountData.ExchangeDate 	= CashLedgerCashReceiptHeader.DepositDate								
					
		SaveDocumentCurrencyTotals
			LocalDocumentCurrencyTotals 					= CashLedgerCashReceiptHeaderRel.AppliedBaseAmount
			LocalDocumentCurrencyTotals.OldCurrencyAmount	= old ReceiptBaseAmount

		ReverseBaseAmounts	
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1

		ReverseTaxBaseAmounts	
			LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount		*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount 	 	*= -1

		ReverseNetReceiptBaseAmounts	
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	= ((ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	- TaxAmountData.FunctionalAmount.EnteredCurrencyAmount) 	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount 	- TaxAmountData.AlternateAmount.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	= ((ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	- TaxAmountData.AlternateAmount2.EnteredCurrencyAmount) 	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	= ((ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	- TaxAmountData.AlternateAmount3.EnteredCurrencyAmount) 	* -1)
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = ((ReceiptBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	- TaxAmountData.ToFunctionalAmount.EnteredCurrencyAmount)	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= ((ReceiptBaseAmount.ToAlternateAmount.EnteredCurrencyAmount 	- TaxAmountData.ToAlternateAmount.EnteredCurrencyAmount) 	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = ((ReceiptBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	- TaxAmountData.ToAlternateAmount2.EnteredCurrencyAmount)	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = ((ReceiptBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	- TaxAmountData.ToAlternateAmount3.EnteredCurrencyAmount)	* -1)
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	= ((ReceiptBaseAmount.ProjectAmount.EnteredCurrencyAmount 		- TaxAmountData.ProjectAmount.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		= ((ReceiptBaseAmount.ReportAmount1.EnteredCurrencyAmount 		- TaxAmountData.ReportAmount1.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		= ((ReceiptBaseAmount.ReportAmount2.EnteredCurrencyAmount 		- TaxAmountData.ReportAmount2.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		= ((ReceiptBaseAmount.ReportAmount3.EnteredCurrencyAmount 		- TaxAmountData.ReportAmount3.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		= ((ReceiptBaseAmount.ReportAmount4.EnteredCurrencyAmount 		- TaxAmountData.ReportAmount4.EnteredCurrencyAmount) 		* -1)
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		= ((ReceiptBaseAmount.ReportAmount5.EnteredCurrencyAmount 		- TaxAmountData.ReportAmount5.EnteredCurrencyAmount) 		* -1)

		SetLocalFinanceCurrencyAmounts	
			LocalFinanceCurrencyAmount.FunctionalAmount   	= LocalFinanceCurrencyAmountGroup.FunctionalAmount	 
			LocalFinanceCurrencyAmount.AlternateAmount    	= LocalFinanceCurrencyAmountGroup.AlternateAmount    	
			LocalFinanceCurrencyAmount.AlternateAmount2   	= LocalFinanceCurrencyAmountGroup.AlternateAmount2 
			LocalFinanceCurrencyAmount.AlternateAmount3   	= LocalFinanceCurrencyAmountGroup.AlternateAmount3   	
			LocalFinanceCurrencyAmount.ToFunctionalAmount 	= LocalFinanceCurrencyAmountGroup.ToFunctionalAmount 	
			LocalFinanceCurrencyAmount.ToAlternateAmount  	= LocalFinanceCurrencyAmountGroup.ToAlternateAmount  	
			LocalFinanceCurrencyAmount.ToAlternateAmount2 	= LocalFinanceCurrencyAmountGroup.ToAlternateAmount2
			LocalFinanceCurrencyAmount.ToAlternateAmount3 	= LocalFinanceCurrencyAmountGroup.ToAlternateAmount3  	
			LocalFinanceCurrencyAmount.ProjectAmount 	  	= LocalFinanceCurrencyAmountGroup.ProjectAmount 	 	
			LocalFinanceCurrencyAmount.ReportAmount1 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount1 	 	
			LocalFinanceCurrencyAmount.ReportAmount2 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount2 		 
			LocalFinanceCurrencyAmount.ReportAmount3 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount3 		 
			LocalFinanceCurrencyAmount.ReportAmount4 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount4 		 
			LocalFinanceCurrencyAmount.ReportAmount5 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount5 		 

		CreateTaxTran	
			initialize CalculateTax
            CalculateTax.Function                      	 	= "I"
            CalculateTax.TaxCode                       	 	= TaxCode
            CalculateTax.TaxEntity                     		= CashLedgerCashReceiptHeader.Company.OrigCompany.AccountingEntity	
            CalculateTax.System                         	= "CB"
            TaxOut                                      	= CalculateTax.ExecuteCalculateTax
			TaxTableOutput    						 		= CalculateTax.TaxTable.TaxTableOutput[1]
			initialize ProcessTaxHistory
			if (CashCategory entered)
				if (CashCategory exists)
					ProcessTaxHistory.VendorOrCustomerName 	= CashCategory.Description
				else
					ProcessTaxHistory.VendorOrCustomerName 	= CashLedgerCashReceiptHeader.Description
			ProcessTaxHistory.HistoryType                 	= "O"
			ProcessTaxHistory.InvoiceCompany               	= CashLedgerCashReceiptHeader.Company
			ProcessTaxHistory.TaxCode                     	= TaxCode
			ProcessTaxHistory.SystemCode                  	= "CB"
			ProcessTaxHistory.Invoice                     	= CashLedgerCashReceiptHeader.TransactionNumber
			ProcessTaxHistory.TaxEntity               		= ReceiptAccount.ToAccountingEntity 
			ProcessTaxHistory.TaxTransactionAccount       	= TaxTableOutput.TaxOutputAccount
			ProcessTaxHistory.VoucherNumber               	= CashLedgerCashReceiptHeader.TransactionNumber
			ProcessTaxHistory.TaxPointDate                	= CashLedgerCashReceiptHeader.DepositDate
			ProcessTaxHistory.InvoiceDate                 	= CashLedgerCashReceiptHeader.DepositDate
			ProcessTaxHistory.PostDate                    	= CashLedgerCashReceiptHeader.PostDate
			ProcessTaxHistory.TransactionCurrency         	= CashLedgerCashReceiptHeader.Currency
			ProcessTaxHistory.TransactionInvoiceAmount    	= ReceiptBankAmount * -1
			ProcessTaxHistory.TransactionTaxableAmount    	= TaxableData.CurrencyAmount * -1
			ProcessTaxHistory.TransactionTaxAmount        	= TaxAmountData.CurrencyAmount * -1
			ProcessTaxHistory.TransactionNumberOfDecimals 	= CashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
			ProcessTaxHistory.TaxRate                     	= TaxRate
			ProcessTaxHistory.AccruedOrInvoiced           	= "I"
			ProcessTaxHistory.ProcessLevel                	= CashLedgerCashReceiptHeader.CashProcessLevel
			TaxOut 										  	= ProcessTaxHistory.TaxHistoryProcessed
			constraint (ProcessTaxHistory.OutputErrorMessage not entered)
				"<ProcessTaxHistory.OutputErrorMessage>"


    Field Rules

		CashCategory
			if (CashCategory entered)				
				constraint (CatTaxEntity entered)
					"EntityRequiredWithCategory"				
				if (CashCategory changed)
					initialize ReceiptAccount 
						
        ReceiptBankAmount
			if (ReceiptBankAmount changed)
	       		initialize ReceiptBaseAmount
	       	if	(ReceiptBankAmount not entered
	       	and UnitsAmount not entered)
	       		required
	       			"DistributionAmountOrUnitsAmountRequired"

		ReceiptBaseAmount
			required	
			
		ReceiptAccount
			if (CatTaxEntity entered
			and CashCategory entered)
				constraint (CashCategoryDetailRel exist)
					"CashCategoryDetailDoesNotExistForEntity" 
				default to CashCategoryDetailRel.RevenueAccount
					default individual fields

			if (CompanyAccountingEntity.ValidSystems entered)
				constraint (GeneralLedgerSystemCode within CompanyAccountingEntity.ValidSystems)
					"InvalidSystemFor<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
			if (ReceiptAccount.ToAccountingEntity.ValidSystems entered)
				constraint (GeneralLedgerSystemCode within ReceiptAccount.ToAccountingEntity.ValidSystems)
					"InvalidSystemForPosting<CashManagementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>"
			if (ReceiptAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (GeneralLedgerSystemCode within ReceiptAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemForAccount"
            required    
#ifdef module cam
            if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement 
            and ReceiptAccount.FinanceDimension10 entered)
            	LocalFinanceDimension10 = ReceiptAccount.FinanceDimension10
				constraint (CustodialDetailAmountRel exists)
					"<CashManagementGroup.FinanceEnterpriseGroup.FinanceDimension10Label>:<LocalFinanceDimension10>_MustBeSetupUnderCustodialAccounts"
#endif

		TaxCode
			if (CashCategory entered)
				default to CashCategoryDetailRel.TaxCode
			if (TaxCode not entered)
				constraint (TaxableData.CurrencyAmount not entered)
					"TaxCodeRequiredWithTaxableAmount"                        
				constraint (TaxAmountData.CurrencyAmount not entered)
					"TaxCodeRequiredWithTaxAmount"                            
			else
				constraint (CatTaxEntity entered)
					"EntityRequiredWithTaxCode"
				include SetCurrencyData
				initialize CalculateTax
				if (TaxAmountData.CurrencyAmount not entered)
					CalculateTax.Function        = "C"
				else
					CalculateTax.Function        = "V"
				if (CatTaxEntity entered)
					CalculateTax.TaxEntity		 = CatTaxEntity
				else						
					CalculateTax.TaxEntity		 = CashLedgerCashReceiptHeader.Company.OrigCompany.AccountingEntity
				CalculateTax.TaxCode             = TaxCode
				CalculateTax.ProductTaxCategory  = CashCategory  
				CalculateTax.InvoiceAmount       = ReceiptBankAmount
				CalculateTax.TaxCodeAccount      = ReceiptAccount
				CalculateTax.PaymentDate         = CashLedgerCashReceiptHeader.DepositDate
				CalculateTax.InvoiceDate         = CashLedgerCashReceiptHeader.DepositDate
				CalculateTax.TaxAmount           = TaxAmountData.CurrencyAmount
				CalculateTax.TaxableAmount       = TaxableData.CurrencyAmount
				CalculateTax.NumberOfDecimals    = CashCode.BankAccountNumber.Currency.NumberOfDecimals
				CalculateTax.System              = "CB"
				CalculateTax.TransactionCurrency = CashLedgerCashReceiptHeader.Currency
				CalculateTax.BaseCurrency        = CashLedgerCashReceiptHeader.Company.OrigCompany.Currency
				TaxOut 							 = CalculateTax.ExecuteCalculateTax
				TaxTableOutput 					 = CalculateTax.TaxTable.TaxTableOutput[1]
				constraint (CalculateTax.OutputErrorNumber not entered)
	            	"<CalculateTax.OutputErrorMessage>"
	            constraint (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode not entered)
	            	"TaxCodeCannotBeATaxTable"                        
	            constraint (TaxTableOutput.TaxPoint = "I")
	            	"TaxPointMustBeInvoiceDate"                       
	            constraint (CalculateTax.VerifiedOK)
	            	"TaxRateOutsideTaxCodeRateRange"                  
	            TaxRate 							= TaxTableOutput.TaxRate
	            if (CalculateTax.TaxAmount = 0)
	            	TaxAmountData.CurrencyAmount	= TaxTableOutput.TaxAmount
				if (TaxAmountData.CurrencyAmount entered)
					TaxAmountData.ExchangeDate		= CashLedgerCashReceiptHeader.DepositDate
	            TaxableData.CurrencyAmount 			= TaxTableOutput.TaxableAmount
				if (TaxableData.CurrencyAmount entered)
					TaxableData.ExchangeDate 		= CashLedgerCashReceiptHeader.DepositDate

				if (TaxableData.CurrencyAmount entered)	
					if (TaxableData.CurrencyAmount < 0)
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 0)
							if (TaxAmountData.CurrencyAmount < .1)
								TaxAmountData.CurrencyAmount = -.1
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 2)
							if (TaxAmountData.CurrencyAmount < .01)
								TaxAmountData.CurrencyAmount = -.01
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 3)
							if (TaxAmountData.CurrencyAmount < .001)
								TaxAmountData.CurrencyAmount = -.001
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 4)
							if (TaxAmountData.CurrencyAmount < .0001)
								TaxAmountData.CurrencyAmount = -.0001
					else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 0)
							if (TaxAmountData.CurrencyAmount < .1)
								TaxAmountData.CurrencyAmount = .1
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 2)
							if (TaxAmountData.CurrencyAmount < .01)
								TaxAmountData.CurrencyAmount = .01
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 3)
							if (TaxAmountData.CurrencyAmount < .001)
								TaxAmountData.CurrencyAmount = .001
						else
						if (CashCode.BankAccountNumber.Currency.NumberOfDecimals = 4)
							if (TaxAmountData.CurrencyAmount < .0001)
								TaxAmountData.CurrencyAmount = .0001		
												
		TaxableData
			if (TaxableData.CurrencyAmount changed)
				TaxableData.KeepRateOnly = true
			
		TaxAmountData
			if (TaxAmountData.CurrencyAmount changed)
				TaxAmountData.KeepRateOnly = true
	
        Description
        	default to CashLedgerCashReceiptHeader.Description

		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(ReceiptAccount.Ledger changed
			or	ReceiptAccount.ToAccountingEntity changed
			or	ReceiptAccount.AccountingUnit changed
			or	ReceiptAccount.GeneralLedgerChartAccount changed
			or	ReceiptAccount.Project changed
			or	ReceiptAccount.FinanceDimension1 changed
			or	ReceiptAccount.FinanceDimension2 changed
			or	ReceiptAccount.FinanceDimension3 changed
			or	ReceiptAccount.FinanceDimension4 changed
			or	ReceiptAccount.FinanceDimension5 changed
			or	ReceiptAccount.FinanceDimension6 changed
			or	ReceiptAccount.FinanceDimension7 changed
			or	ReceiptAccount.FinanceDimension8 changed
			or	ReceiptAccount.FinanceDimension9 changed
			or	ReceiptAccount.FinanceDimension10 changed
        	or	ReceiptBankAmount changed))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true

	Actions
		Create is a Create Action
			valid when (CashLedgerCashReceiptHeader.CanUpdateDetails)
			Entrance Rules
				include SetCurrencyData
				if (!CreatedFromImport)
					include SaveDocumentCurrencyTotals
				GeneralLedgerSystemCode = "CB"
			Action Rules
				if (ReceiptAccount.ToAccountingEntity entered
				and CatTaxEntity not entered)	
					CatTaxEntity = ReceiptAccount.ToAccountingEntity
			Exit Rules
				if (!CreatedFromImport)
					increment CashLedgerCashReceiptHeaderRel.AppliedBankAmount by ReceiptBankAmount
					LocalDocumentCurrencyTotals.NewCurrencyAmount	= ReceiptBaseAmount	 
					LocalDocumentCurrencyTotals.PerformUpdate	 	= true	
					if (LocalDocumentCurrencyTotals.UpdateTotals)
						invoke UpdateDocumentTotals CashLedgerCashReceiptHeaderRel	 											 
							invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals												
					





















																												
		Update is an Update Action
			valid when (CashLedgerCashReceiptHeader.CanUpdateDetails)
			completion message is "<ConfirmationMessage>"
			Entrance Rules
				include SetCurrencyData
				include SaveDocumentCurrencyTotals
				GeneralLedgerSystemCode = "CB"
			Action Rules
				constraint (!CashLedgerCashReceiptHeader.BudgetEditInProgress)		
					"CannotUpdate;BudgetEditInProgress"
				CatTaxEntityHasValue = true
				if (TaxCode changed)
					initialize TaxAmountData.CurrencyAmount
				if (CatTaxEntity not = ReceiptAccount.ToAccountingEntity)
					initialize ReceiptAccount
					if (CashCategory not entered)
						ConfirmationMessage = ReEnterCodeBlockMessage
						confirmation required
							"<ConfirmationMessage>"							   
				if (ReceiptAccount.ToAccountingEntity entered
				and CatTaxEntity not entered)	
					CatTaxEntity = ReceiptAccount.ToAccountingEntity
			Exit Rules					
				increment CashLedgerCashReceiptHeaderRel.AppliedBankAmount by (ReceiptBankAmount - old ReceiptBankAmount)
				LocalDocumentCurrencyTotals.NewCurrencyAmount 	= ReceiptBaseAmount
				LocalDocumentCurrencyTotals.PerformUpdate		= true
				if (LocalDocumentCurrencyTotals.UpdateTotals)
					invoke UpdateDocumentTotals CashLedgerCashReceiptHeaderRel	 											 
						invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals		

		Delete is a Delete Action
			valid when (CashLedgerCashReceiptHeader.CanUpdateDetails)
			Entrance Rules
				include SaveDocumentCurrencyTotals
			Action Rules
				constraint (!CashLedgerCashReceiptHeader.BudgetEditInProgress)		
					"CannotDelete;BudgetEditInProgress"				
				decrement CashLedgerCashReceiptHeaderRel.AppliedBankAmount by ReceiptBankAmount	
				LocalDocumentCurrencyTotals.PerformUpdate	= true
				if (LocalDocumentCurrencyTotals.UpdateTotals)
					invoke UpdateDocumentTotals CashLedgerCashReceiptHeaderRel	 											 
						invoked.PrmDocumentCurrencyTotals = LocalDocumentCurrencyTotals	
						
		Purge is a Purge Action
			restricted
						
			



		AdjustDistributionCurrencyAmounts is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrencyAmountAdjustment	is a DocumentCurrencyTotals
			Action Rules
				include SetCurrencyData
				include SaveDocumentCurrencyTotals
				CatTaxEntity												= ReceiptAccount.ToAccountingEntity
				ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.FunctionalTotal
				ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount 	= ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount   	+ PrmCurrencyAmountAdjustment.AlternateTotal
				ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.AlternateTotal2
				ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyAmount		+ PrmCurrencyAmountAdjustment.AlternateTotal3





				ReceiptBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= ReceiptBaseAmount.ReportAmount1.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal1
				ReceiptBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= ReceiptBaseAmount.ReportAmount2.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal2
				ReceiptBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= ReceiptBaseAmount.ReportAmount3.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal3
				ReceiptBaseAmount.ReportAmount4.EnteredCurrencyAmount		= ReceiptBaseAmount.ReportAmount4.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal4
				ReceiptBaseAmount.ReportAmount5.EnteredCurrencyAmount		= ReceiptBaseAmount.ReportAmount5.EnteredCurrencyAmount			+ PrmCurrencyAmountAdjustment.ReportTotal5
				invoke Update	
					invoked.ReceiptBaseAmount.KeepRateOnly					= false
					invoked.BypassNegativeRateEdit							= true	
				LocalDocumentCurrencyTotals.NewCurrencyAmount 				= ReceiptBaseAmount  
				LocalDocumentCurrencyTotals.PerformUpdate					= true
				if (LocalDocumentCurrencyTotals.UpdateTotals)
					invoke UpdateDocumentTotals CashLedgerCashReceiptHeaderRel	 											 
						invoked.PrmDocumentCurrencyTotals 					= LocalDocumentCurrencyTotals
							






































																								

		RecalcCurrencyAmountsForAllDistributions is an Instance Action
            default label is untranslatable
            restricted
            Action Rules

				CatTaxEntity	= ReceiptAccount.ToAccountingEntity
				initialize ReceiptBaseAmount.FunctionalAmount
				initialize ReceiptBaseAmount.AlternateAmount
				initialize ReceiptBaseAmount.AlternateAmount2
				initialize ReceiptBaseAmount.AlternateAmount3
				initialize ReceiptBaseAmount.ToFunctionalAmount
				initialize ReceiptBaseAmount.ToAlternateAmount
				initialize ReceiptBaseAmount.ToAlternateAmount2
				initialize ReceiptBaseAmount.ToAlternateAmount3
				initialize ReceiptBaseAmount.ProjectAmount
				initialize ReceiptBaseAmount.ReportAmount1
				initialize ReceiptBaseAmount.ReportAmount2
				initialize ReceiptBaseAmount.ReportAmount3
				initialize ReceiptBaseAmount.ReportAmount4
				initialize ReceiptBaseAmount.ReportAmount5
				if (TaxableData entered)
					initialize TaxableData.FunctionalAmount
					initialize TaxableData.AlternateAmount
					initialize TaxableData.AlternateAmount2
					initialize TaxableData.AlternateAmount3
					initialize TaxableData.ToFunctionalAmount
					initialize TaxableData.ToAlternateAmount
					initialize TaxableData.ToAlternateAmount2
					initialize TaxableData.ToAlternateAmount3
					initialize TaxableData.ProjectAmount
					initialize TaxableData.ReportAmount1
					initialize TaxableData.ReportAmount2
					initialize TaxableData.ReportAmount3
					initialize TaxableData.ReportAmount4
					initialize TaxableData.ReportAmount5	
				if (TaxAmountData entered)				
					initialize TaxAmountData.FunctionalAmount
					initialize TaxAmountData.AlternateAmount
					initialize TaxAmountData.AlternateAmount2
					initialize TaxAmountData.AlternateAmount3
					initialize TaxAmountData.ToFunctionalAmount
					initialize TaxAmountData.ToAlternateAmount
					initialize TaxAmountData.ToAlternateAmount2
					initialize TaxAmountData.ToAlternateAmount3
					initialize TaxAmountData.ProjectAmount
					initialize TaxAmountData.ReportAmount1
					initialize TaxAmountData.ReportAmount2
					initialize TaxAmountData.ReportAmount3
					initialize TaxAmountData.ReportAmount4
					initialize TaxAmountData.ReportAmount5	
				invoke Update																

		ReleaseCashReceiptDetailsSetAction is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup 			is a CashManagementGroup	
                PrmCashCode						is a CashCode
		        PrmBankTransactionCode 			is a BankTransactionCode
		        PrmTransactionNumber 			is a TransactionNumber
		        PrmTransactionIDNumber			is a TransactionIDNumber
		        PrmJournalizeGroup				is like JournalizeGroup
		        PrmCashLedgerCashReceiptHeader	is a CashLedgerCashReceiptHeader
				PrmInterfaceAsPosted			is Boolean	
				
			Instance Selection
                where (CashManagementGroup								= PrmCashManagementGroup
                and    CashCode											= PrmCashCode
                and    CashLedgerCashReceiptHeader.BankTransactionCode	= PrmBankTransactionCode
                and    CashLedgerCashReceiptHeader.TransactionNumber	= PrmTransactionNumber)		
            
            Local Fields
				LocalDistribBankAmount				is an InternationalAmount
				LocalBaseDistribAmount				is a  FinanceCurrencyAmount
				LocalDistribBaseAmount				is an InternationalAmount
				LocalTaxableBankAmount				is an InternationalAmount
				LocalTaxBankAmount					is an InternationalAmount
				                    
			Action Rules
				Set Rules
						
					Exit Rules
						if (PrmCashLedgerCashReceiptHeader.BankTransactionCode.TransactionType.DebitTransaction)
							LocalDistribBankAmount		= PrmCashLedgerCashReceiptHeader.DepositAmount * -1
							LocalFinanceCurrencyAmount	= PrmCashLedgerCashReceiptHeader.BaseAmount
							include ReverseBaseAmounts
							LocalBaseDistribAmount		= LocalFinanceCurrencyAmount
						else
							LocalDistribBankAmount		= PrmCashLedgerCashReceiptHeader.DepositAmount
							LocalFinanceCurrencyAmount	= PrmCashLedgerCashReceiptHeader.BaseAmount
							LocalBaseDistribAmount		= LocalFinanceCurrencyAmount
						




						if (PrmCashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
							invoke CreateReceiptFundAccountOffsets CashLedgerGLDistribution	
				            	invoked.PrmCashManagementGroup 			= PrmCashManagementGroup	
				                invoked.PrmCashCode						= PrmCashCode
				                invoked.PrmCashLedgerSourceRecord		= "CBT"
				                invoked.PrmBankTransactionCode 			= PrmBankTransactionCode
				                invoked.PrmTransactionIDNumber 			= PrmTransactionIDNumber
				                invoked.PrmTransactionNumber 			= PrmTransactionNumber
				                invoked.PrmCashLedgerCashReceiptHeader	= PrmCashLedgerCashReceiptHeader  
				                invoked.PrmJournalizeGroup				= PrmJournalizeGroup
								invoked.PrmInterfaceAsPosted			= PrmInterfaceAsPosted	
				        else        
							invoke Create CashLedgerGLDistribution	
								fill in fields from PrmCashLedgerCashReceiptHeader
								invoked.CashCode										= PrmCashCode
								invoked.CashLedgerSourceRecord							= "CBT"
								invoked.CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
								invoked.TransactionNumber 								= PrmTransactionNumber
								invoked.TransactionNumberSuffix							= 0
								invoked.GeneralLedgerSourceCode							= PrmCashLedgerCashReceiptHeader.GeneralLedgerSourceCode
								invoked.Company											= PrmCashLedgerCashReceiptHeader.Company
								invoked.CashLedgerGLDistribution.DistributionType		= "E"
								invoked.RecordType										= "C"
								invoked.Status 											= 1
								invoked.PostDate										= PrmCashLedgerCashReceiptHeader.PostDate
								if (PrmCashLedgerCashReceiptHeader.BankTransactionCode.AutomaticReconciliation 
								and PrmCashLedgerCashReceiptHeader.CompanyCashCode.ReconcileGeneralLedgerEntry)
									invoked.GLFinanceCodeBlock							= PrmCashLedgerCashReceiptHeader.CompanyCashCode.ReconciliationAccount
								else
									invoked.GLFinanceCodeBlock							= PrmCashLedgerCashReceiptHeader.CompanyCashCode.CashAccount
								invoked.GLTransactionAmount								= LocalDistribBankAmount
								invoked.DistributionToBankAmount						= LocalDistribBankAmount
								invoked.GLBaseAmount									= LocalBaseDistribAmount
								invoked.Description										= Description
								invoked.ToTransactionCurrencyNumberOfDecimals			= PrmCashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
								invoked.TransactionCurrencyNumberOfDecimals				= PrmCashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
								invoked.ToBaseCurrencyNumberOfDecimals					= PrmCashLedgerCashReceiptHeader.BaseCurrencyNumberOfDecimals
								invoked.BaseCurrencyNumberOfDecimals					= PrmCashLedgerCashReceiptHeader.BaseCurrencyNumberOfDecimals
								invoked.GLTJournalizeGroup								= PrmJournalizeGroup
								invoked.BypassStatusEdit								= true
								if (LocalDistribBankAmount entered)									
									invoked.BypassUnitAndAmountEdit						= false		
								else																
									invoked.BypassUnitAndAmountEdit						= true		
								if (PrmInterfaceAsPosted)
									invoked.SetToHistorical 							= true		

						invoke ProcessBudgetEdits PrmCashLedgerCashReceiptHeader	
						
				Instance Rules
					LocalDistribBankAmount 		= ((ReceiptBankAmount - TaxAmountData.CurrencyAmount) * -1)
					LocalFinanceCurrencyAmount	= ReceiptBaseAmount
					include ReverseNetReceiptBaseAmounts
					LocalBaseDistribAmount 		= LocalFinanceCurrencyAmount
					if (LocalDistribBankAmount	entered)		
						invoke Create CashLedgerGLDistribution
							fill in fields from CashLedgerCashReceiptHeader
							fill in fields from this instance
								except invoked.TaxCode
							invoked.CashCode										= PrmCashCode
							invoked.CashLedgerSourceRecord							= "CBT"
							invoked.CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
							invoked.TransactionNumber								= PrmTransactionNumber
							invoked.TransactionNumberSuffix							= 0
							invoked.GeneralLedgerSourceCode							= CashLedgerCashReceiptHeader.GeneralLedgerSourceCode
							invoked.Company											= CashLedgerCashReceiptHeader.Company
							invoked.CashLedgerGLDistribution.DistributionType		= "E"
							invoked.RecordType										= ""
							invoked.Status											= 1
							invoked.PostDate										= CashLedgerCashReceiptHeader.PostDate
							invoked.GLFinanceCodeBlock								= ReceiptAccount
							invoked.GLTransactionAmount								= LocalDistribBankAmount
							invoked.DistributionToBankAmount						= LocalDistribBankAmount
							invoked.GLBaseAmount									= LocalBaseDistribAmount
							invoked.Reference										= Reference	
							invoked.Description										= Description
							invoked.ToTransactionCurrencyNumberOfDecimals			= CashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals				= CashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals					= CashLedgerCashReceiptHeader.BaseCurrencyNumberOfDecimals
							invoked.BaseCurrencyNumberOfDecimals					= CashLedgerCashReceiptHeader.BaseCurrencyNumberOfDecimals
							invoked.BypassBudgetEditing								= true
							invoked.GLTJournalizeGroup								= PrmJournalizeGroup
							invoked.BypassStatusEdit								= true
							if (PrmInterfaceAsPosted)
								invoked.SetToHistorical 							= true		

					if (TaxCode entered)


						LocalTaxBankAmount = TaxAmountData.CurrencyAmount * -1
						LocalFinanceCurrencyAmountGroup = TaxAmountData
						include ReverseTaxBaseAmounts
						include SetLocalFinanceCurrencyAmounts
						LocalBaseDistribAmount = LocalFinanceCurrencyAmount

						LocalTaxableBankAmount = TaxableData.CurrencyAmount * -1

						include CreateTaxTran
						invoke Create CashLedgerGLDistribution
							fill in fields from CashLedgerCashReceiptHeader
							fill in fields from this instance
							invoked.CashCode										= PrmCashCode
							invoked.CashLedgerSourceRecord							= "CBT"
							invoked.CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber	= PrmTransactionIDNumber
							invoked.TransactionNumber								= PrmTransactionNumber
							invoked.TransactionNumberSuffix							= blank
							invoked.GeneralLedgerSourceCode							= CashLedgerCashReceiptHeader.GeneralLedgerSourceCode
							invoked.Company											= CashLedgerCashReceiptHeader.Company
							invoked.CashLedgerGLDistribution.DistributionType		= "E"
							invoked.RecordType										= ""
							invoked.Status											= 1
							invoked.PostDate										= CashLedgerCashReceiptHeader.PostDate
							invoked.GLFinanceCodeBlock								= TaxTableOutput.TaxOutputAccount
							invoked.Reference										= Reference	
							invoked.Description										= Description
							invoked.TaxCode											= TaxCode
							invoked.GLTransactionAmount								= LocalTaxBankAmount
							invoked.DistributionToBankAmount						= LocalTaxBankAmount
							invoked.GLBaseAmount									= LocalBaseDistribAmount
							invoked.TaxableBankAmount								= LocalTaxableBankAmount
							invoked.ToTransactionCurrencyNumberOfDecimals			= CashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals				= CashLedgerCashReceiptHeader.TransactionCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals					= CashLedgerCashReceiptHeader.BaseCurrencyNumberOfDecimals
							invoked.BypassBudgetAndCommitmentProcessing				= true
							invoked.GLTJournalizeGroup								= PrmJournalizeGroup
							invoked.BypassStatusEdit								= true		
							if (PrmInterfaceAsPosted)
								invoked.SetToHistorical 							= true		
		FrontEndSplitCashReceiptDetails is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmBankTransactionCode				is a BankTransactionCode
				PrmTransactionNumber				is a TransactionNumber
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmBankTransactionCode
					required
				PrmTransactionNumber
					required
			Local Fields
				LocalForEachSumFESAmount					is an InternationalAmount
			Rule Blocks
				AssignFEGAndFESKeyToLocal
					LocalFEGtext		= PrmCashManagementGroup.FinanceEnterpriseGroup
        			LocalDerivedFESKey	= "CB-"+PrmCashCode+"-"+PrmBankTransactionCode+"-"+PrmTransactionNumber
			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	CashCode = PrmCashCode
				and	CashLedgerCashReceiptHeader.BankTransactionCode = PrmBankTransactionCode
				and	CashLedgerCashReceiptHeader.TransactionNumber = PrmTransactionNumber
				and	ReceiptBankAmount entered
				and not CreatedByFES
				and ReceiptAccount.FinanceDimension2 not entered
				and ReceiptAccount.Project entered
				and !ReceiptAccount.Project.ExcludeFromFES
        		and ReceiptAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Action Rules
				Empty Set Rules	
					display "FESCB:NothingToProcess"
				Set Rules
					Entrance Rules
						include AssignFEGAndFESKeyToLocal
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						include AssignFEGAndFESKeyToLocal
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					include AssignFEGAndFESKeyToLocal
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= PrmCashManagementGroup
						invoked.PrmAccountingEntity				= ReceiptAccount.AccountingEntity
						invoked.PrmDistribution					= CashLedgerCashReceiptDetail
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= ReceiptBankAmount
						invoked.PrmDistributionAmountWithTax	= ReceiptBankAmount
						invoked.PrmTransactionDate				= CashLedgerCashReceiptHeader.DepositDate
						invoked.PrmPostingDate					= CashLedgerCashReceiptHeader.PostDate
						invoked.PrmTransactionCurrencyCode		= TransientFromCurrency
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= "CB"
						invoked.PrmTransactionCodeBlock			= ReceiptAccount
					initialize LocalForEachSumFESAmount
					if(FESDistByDistributionRel exists)
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount += each.FESAmount
							invoke Create CashLedgerCashReceiptDetail
								fill in fields from this instance
									except invoked.ReceiptBaseAmount
									except invoked.TaxableData
									except invoked.TaxAmountData
								invoked.CashLedgerCashReceiptDetail		= blank
								invoked.ReceiptAccount					= each.CodeBlock
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.ReceiptBankAmount		= each.FESAmount + (ReceiptBankAmount - LocalForEachSumFESAmount)
								else
									invoked.ReceiptBankAmount		= each.FESAmount
								invoked.CreatedByFES					= true
						invoke Delete 

		DeleteFrontEndSplitCashReceiptDetails is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup				is a CashManagementGroup
				PrmCashCode							is a CashCode
				PrmBankTransactionCode				is a BankTransactionCode
				PrmTransactionNumber				is a TransactionNumber
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmBankTransactionCode
					required
				PrmTransactionNumber
					required
			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	CashCode = PrmCashCode
				and	CashLedgerCashReceiptHeader.BankTransactionCode = PrmBankTransactionCode
				and	CashLedgerCashReceiptHeader.TransactionNumber = PrmTransactionNumber
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Delete
