BudgetEditBatch is a BusinessClass
	owned by GeneralLedger
	
	prefix is BUDEB
	
	Ontology
		symbolic key is BudgetEditBatch
			
	Patterns
		disable Auditing
		disable EffectiveDated
		disable AsOfDateProcessing
	
	Persistent Fields
		DocumentID					is UniqueID
			default label is "DocumentID"
		PActionCode					is a ActionCode
			default label is "Action"
		BudgetEditMode
		BudgetEditTotalsProcessing
		BudgetEditCallBackWrap
		CreateTime					is TimeStamp
		BusinessClassName			is Alpha 100
		EditContext					is Alpha 256		

		StartTime					is TimeStamp
		CompletionTime				is TimeStamp
		ErrorMessage				is Alpha 150
		
		RequestID					is a AsyncActionRequest
			delete ignored
		CommitCounter				is Numeric 7
		GenerationCounter			is Numeric 7

		CallBackBatch				is Numeric size 12
		CallBackCompletionTime		is TimeStamp
				
	Derived Fields
		HasCompleted is a DerivedField
			type is Boolean
			if (CompletionTime entered)
				return true
			return false
		ProcessingMsg is a MessageField				
			"BudgetTemplate<BudgetTemplate>InScenario<Scenario>IsInProcessingState"
		ScenarioLoadingMsg is a MessageField
			"Scenario<Scenario>IsLoadingData"
		RebuildMsg is a MessageField
			"Re-SubmittedForRetry"
		
		GroupNotInitializedMsg is a MessageField
			"BudgetGroup<BudgetGroup.DisplayMessage>InTemplate<BudgetTemplate>IsNotInitialized.RerunProcessBatchEdits"

	Field Rules

	Sets
		ByCompletionTime	
			Sort Order
				CompletionTime 
				BudgetEditCallBackWrap.FEG
				StartTime
				DocumentID
				BudgetEditBatch descending
				
		ByDocumentID		
			Sort Order
				DocumentID
				CompletionTime
				BudgetEditBatch descending
				
		ByFEG
			allow duplicates
			Sort Order
				BudgetEditCallBackWrap.FEG

	Relations
		BudgetEditConfigurationRel
			one-to-one relation to BudgetEditConfiguration
			Field Mapping uses symbolic key
				related.BudgetEditConfiguration = LocalFEG	
		IncompleteBudgetEditBatchRel
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByCompletionTime
				related.CompletionTime				= blank
				related.BudgetEditCallBackWrap.FEG	= LocalFEG
			Instance Selection
				where (LocalBusinessClassName not entered or related.BusinessClassName = LocalBusinessClassName)
		PreviousGenBudgetEditBatchRel		
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByCompletionTime
				related.CompletionTime				= blank
				related.BudgetEditCallBackWrap.FEG	= LocalFEG
			Instance Selection
				where ((LocalBusinessClassName not entered or related.BusinessClassName = LocalBusinessClassName)
				and related.GenerationCounter < CurrentGeneration) 
		GroupTotalsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup						= LocalFEG
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalID
		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= LocalFEG
				related.BudgetEditError.BudgetEditGroup		= LocalID
		BudgetGroupTotalRel
			one-to-one relation to BudgetGroupTotal
			Field Mapping uses symbolic key			
				related.FinanceEnterpriseGroup				= LocalFEG
				related.Scenario							= Scenario
				related.BudgetTemplate						= BudgetTemplate
				related.BudgetGroup 						= BudgetGroup
				related.GeneralLedgerCalendarPeriod 		= GeneralLedgerCalendarPeriod
		BudgetGroupCheckRel
			one-to-one relation to BudgetGroupCheck
			Field Mapping uses symbolic key			
				related.FinanceEnterpriseGroup				= LocalFEG
				related.Scenario							= Scenario
				related.BudgetTemplate						= BudgetTemplate
				related.BudgetGroup 						= BudgetGroup
				related.GeneralLedgerCalendarPeriod 		= GeneralLedgerCalendarPeriod
		BudgetTemplateGroupTotalRel
			one-to-one relation to BudgetTemplateGroupTotal
			Field Mapping uses symbolic key			
				related.FinanceEnterpriseGroup				= LocalFEG
				related.Scenario							= Scenario
				related.BudgetTemplate						= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup 					= LocalID
				related.BudgetTemplateGroupTotal.BudgetGroup 						= BudgetGroup
				related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod 		= GeneralLedgerCalendarPeriod
				related.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	 		= GeneralLedgerCalendarYear		
		RebuildTemplatesRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses ByStatus
			Instance Selection
				where (related.Status						!= BudgetTemplate.Status.Clearing)				
		RebuildTotalsRel
			one-to-one relation to BudgetRebuildBTGT
			Field Mapping uses symbolic key
				related.BudgetRebuildBTGT.DocumentID		= LocalID

		BudgetChangeOrderRel
			one-to-one relation to BudgetChangeOrder
			Field Mapping uses unique id key
				related.UniqueID	= LocalID
	Conditions
		HasError
			when(ErrorMessage entered)

		IsBudgetChangeOrder
			when (BusinessClassName = "BudgetChangeOrder" or BusinessClassName = "BudgetChangeOrderApproval")

		IsBudgetChangeOrderApproval
			when (BusinessClassName = "BudgetChangeOrderApproval")
		
		BatchBudgetEdit 
			when (BudgetEditConfigurationRel.BatchBudgetEdit)
			
	Local Fields
		LocalFEG				is a FinanceEnterpriseGroup
		Scenario
		BudgetTemplate
		BudgetGroup
		GeneralLedgerCalendarPeriod		
		GeneralLedgerCalendarYear
		BudgetTemplateGroupTotal
		LocalID					is UniqueID
		CurrentGeneration		is Numeric 7
		BudgetGroupTotal
		PreviousAmount			is a TotalAmount
		LocalLastTimeStamp		is TimeStamp 
		LocalCurrentTimeStamp	is TimeStamp
		LocalElapsedTime		is Numeric size 12
		LocalBusinessClassName  is Alpha size 100
		LocalCallBackBatch		is Numeric size 12
		BudgetGroupAmount
		BudgetGroupCheck
		LocalIsBudgetChangeOrder is Boolean
		
	Rule Blocks
		ClearRecoveryCountforBTGT

			for each GroupTotalsRel
				if (each.RecoveryCount > 0) 
					invoke ClearRecoveryCount each.BudgetTemplateGroupTotal
					TCounter		+= 1
					if (TCounter 	> 500)	
						include DoCommit
		DoCommit
			invoke Update CurrentBatch	
				invoked.CommitCounter	+= 1
			TCounter	= 0
			commit transaction
			
		CheckCommitWithTimer
			LocalCurrentTimeStamp		= current timestamp
			if (LocalLastTimeStamp not entered)
				LocalLastTimeStamp		= LocalCurrentTimeStamp

			LocalElapsedTime = LocalCurrentTimeStamp - LocalLastTimeStamp

			if (TCounter >= 100
			or  LocalElapsedTime > 30)
				invoke Update CurrentBatch	
					invoked.CommitCounter	+= 1
				commit transaction
				initialize TCounter
				LocalLastTimeStamp = LocalCurrentTimeStamp
			
		IncludeProcessBatchEditsInstances			
			LocalFEG				= FEG
			initialize LocalCallBackBatch
			
			for each IncompleteBudgetEditBatchRel
				if (each.GenerationCounter > CurrentGeneration)

					CurrentGeneration		= each.GenerationCounter
			CurrentGeneration				+= 1
			
			for each PreviousGenBudgetEditBatchRel
				ErrorCount	= 0
				CurrentBatch				= each.BudgetEditBatch

				LocalFEG					= each.BudgetEditBatch.BudgetEditCallBackWrap.FEG
				LocalID						= each.BudgetEditBatch.DocumentID
				LocalTotalsProcessing		= each.BudgetEditBatch.BudgetEditTotalsProcessing
				LocalBudgetEditMode			= each.BudgetEditBatch.BudgetEditMode
				LocalEditCallBack			= each.BudgetEditBatch.BudgetEditCallBackWrap.BudgetEditCallBack				
				ActionCode					= each.BudgetEditBatch.PActionCode
				LocalIsBudgetChangeOrder	= each.IsBudgetChangeOrder
				if (LocalEditCallBack entered or LocalIsBudgetChangeOrder)
					LocalHasCallBack = true
				else 
					LocalHasCallBack = false
				if (each.StartTime entered and each.CompletionTime not entered)
					display "Restarting<each.BudgetEditBatch>ForFEG<LocalFEG>"
					
				invoke Update each.BudgetEditBatch
					invoked.StartTime					= current timestamp								
					invoked.RequestID					= current async action request id
					invoked.GenerationCounter			= CurrentGeneration


				invoke Purge BudgetEditErrorRel
				initialize ErrorMsg
				commit transaction	
				
				if (RebuildTotalsRel.BudgetRebuildBTGT.DocumentID entered)

					RebuildTotals				= true

				if (!RebuildTotals
				and !LocalBudgetEditMode.UpdateOnly)
					for each GroupTotalsRel
						LocalFEG					= each.FinanceEnterpriseGroup
						Scenario					= each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate.Scenario
						BudgetTemplate				= each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate
						BudgetGroup					= each.BudgetTemplateGroupTotal.BudgetGroup
						if (each.BudgetTemplate.LazyActivation)

							if (!each.BudgetTemplateGroupTotal.BudgetGroup.LazyInitialized)
								ErrorMsg = GroupNotInitializedMsg



						if (each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate.Status.Processing)
							ErrorMsg = ProcessingMsg
							end for each


						if (each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate.Scenario.IsLoading)
							ErrorMsg = ScenarioLoadingMsg
							end for each
						if (each.HasError)
							invoke SetErrorFalse each.BudgetTemplateGroupTotal
						if (LocalIsBudgetChangeOrder)
							invoke CheckGroupTotalBudget each.BudgetTemplate
								resume on error
									ErrorMsg = error message
								invoked.PrmGroupTotal	= each.BudgetTemplateGroupTotal
								invoked.PrmCounter		= ErrorCount						
						else
							invoke CheckGroupTotal each.BudgetTemplate
								resume on error
									ErrorMsg = error message
								invoked.PrmGroupTotal	= each.BudgetTemplateGroupTotal
								invoked.PrmCounter		= ErrorCount

						if (ErrorMsg entered) 
							display "ErrorMessage:<ErrorMsg>"
							invoke Purge BudgetEditErrorRel
							end for each
						if (each.HasError)
							increment ErrorCount
							if (ErrorCount >= 100)
								end for each

						TCounter += 1
						include CheckCommitWithTimer
					include DoCommit							
										

				if (((ErrorCount = 0
						and !LocalBudgetEditMode.Test)
					or LocalBudgetEditMode.Soft)
				and ErrorMsg not entered
				and !RebuildTotals)

					for each GroupTotalsRel
						if (each.RecoveryCount = 0)
							constraint (!each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate.Status.Processing)
								"BudgetTemplate<BudgetTemplate>InScenario<Scenario>IsInProcessingState"
							if (each.RecoveryCount > 0)
								display "Skipping,RecoveryCount=<each.RecoveryCount>"
							else
								LocalFEG					= each.FinanceEnterpriseGroup
								Scenario					= each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate.Scenario
								BudgetTemplate				= each.BudgetTemplateGroupTotal.BudgetGroup.BudgetTemplate
								BudgetGroup					= each.BudgetTemplateGroupTotal.BudgetGroup
								GeneralLedgerCalendarPeriod	= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod												
								GeneralLedgerCalendarYear	= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear												
								Amount						= each.Amount

								if (LocalIsBudgetChangeOrder)
									BudgetGroup					= each.BudgetTemplateGroupTotal.BudgetGroup
									GeneralLedgerCalendarPeriod	= each.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
									if (Amount entered)
										if (BudgetGroupAmount not exists)
											invoke CopyBudgetAmounts BudgetGroup
										increment BudgetGroupAmount.Amount by Amount
										if (BudgetTemplate.CheckGroups)
											increment BudgetGroupCheck.Count
									invoke Purge each.BudgetTemplateGroupTotal									
								else
									PreviousAmount					= BudgetGroupTotal.Amount 
									invoke Update BudgetGroupTotal
										invoked.BusinessClassName	= CurrentBatch.BusinessClassName
										invoked.EditContext			= CurrentBatch.EditContext
										invoked.IncrementAmount		= Amount
										invoked.Amount				+= Amount
										invoked.IsSetAmounts		= true
										invoked.PreviousAmount		= PreviousAmount
									if (BudgetTemplate.CheckGroups)
										if (config.BypassBudgetGroupUpdate != true)
											increment BudgetGroupCheckRel.BudgetGroupCheck.Count
										else
											if (BudgetGroupCheckRel not exists)				
												invoke Update BudgetGroupCheckRel			
										TCounter	+= 1							
									if (LocalTotalsProcessing.Purge)

										invoke Purge each.BudgetTemplateGroupTotal
										TCounter	+= 1
									else
									if (LocalTotalsProcessing.Reverse)

										increment BudgetTemplateGroupTotalRel.Amount by -2.0 * Amount							
										TCounter	+= 1
									if (!LocalTotalsProcessing.Purge)

										invoke UsedInBatch each.BudgetTemplateGroupTotal
											invoked.PrmBudgetEditBatch	= CurrentBatch.BudgetEditBatch
										TCounter	+= 1
								include CheckCommitWithTimer

				if (TCounter > 0)						
					include DoCommit
					TCounter	= 0


				display "BudgetEditBatchExit:ErrorCount=<ErrorCount>,ErrorMsg=<ErrorMsg>"
				if (!RebuildTotals)
					if (ErrorMsg not entered)					
						if (ErrorCount = 0
						or LocalBudgetEditMode.Test
						or LocalBudgetEditMode.Soft)
							if (LocalEditCallBack entered and not BatchBudgetEdit)
								Result	= each.BudgetEditBatch.BudgetEditCallBackWrap.BudgetEditCallBack.Success

						else
							if (LocalEditCallBack entered)

								Result	= each.BudgetEditBatch.BudgetEditCallBackWrap.BudgetEditCallBack.Failure


							else 
							if (LocalIsBudgetChangeOrder)
								invoke EditInProgress.Failure BudgetChangeOrderRel

								
						if (LocalEditCallBack entered and not BatchBudgetEdit)

							Result	= each.BudgetEditBatch.BudgetEditCallBackWrap.BudgetEditCallBack.InitiateFlow

						LocalCallbackCount	+=1
				else

					invoke Update each.BudgetEditBatch					
						invoked.CompletionTime					= current timestamp
						invoked.ErrorMessage					= RebuildMsg			
					invoke ReleaseCallback first RebuildTemplatesRel.BudgetTemplate 	
						invoked.PrmBusinessClassName			= CurrentBatch.BusinessClassName
						invoked.PrmBusinessObjectKey			= LocalID
						invoked.PrmIsBatch						= true	
						invoked.PrmBudgetEditMode				= LocalBudgetEditMode
						invoked.PrmBudgetEditTotalsProcessing	= LocalTotalsProcessing										
				
				include DoCommit


				if (!RebuildTotals)
					if (ErrorMsg not entered)
						include ClearRecoveryCountforBTGT
						if (BatchBudgetEdit)

							if (LocalHasCallBack and ErrorCount = 0) 
 								CallBackBatchCount += 1
								if (LocalCallBackBatch not entered)
									invoke NextCallBackBatch BudgetEditConfigurationRel
									LocalCallBackBatch		= BudgetEditConfigurationRel.LastCallBackBatch

								invoke Update each.BudgetEditBatch					
									invoked.CompletionTime					= current timestamp
									invoked.ErrorMessage					= blank
									invoked.CallBackBatch					= LocalCallBackBatch

								if (CallBackBatchCount > 500)
									invoke ProcessCallBack BudgetEditBatch
										invoked.FEG 				= FEG
										invoked.PrmCallBackBatch	= LocalCallBackBatch

									invoke NextCallBackBatch BudgetEditConfigurationRel
									LocalCallBackBatch		= BudgetEditConfigurationRel.LastCallBackBatch
									initialize CallBackBatchCount

							else 
							if (BudgetEditConfigurationRel.AutoPruneBudgetEditBatch) 
								invoke Delete each
							else 
								invoke Update each.BudgetEditBatch					
									invoked.CompletionTime					= current timestamp
									invoked.ErrorMessage					= blank

						else 
							invoke Update each.BudgetEditBatch					
								invoked.CompletionTime					= current timestamp
								invoked.ErrorMessage					= blank

					else
						invoke Update each.BudgetEditBatch					
							invoked.ErrorMessage					= ErrorMsg

					commit transaction
					
				TCounter	= 0
				if (not BatchBudgetEdit and LocalCallbackCount	= 2000)							
					invoke ProcessBudgetEditCallback BudgetEditCallBackBatch
						invoked.PrmFinanceEnterpriseGroup	= LocalFEG

			if (BatchBudgetEdit)
				if (LocalCallBackBatch entered)
					invoke ProcessCallBack BudgetEditBatch
						invoked.FEG 				= FEG
						invoked.PrmCallBackBatch	= LocalCallBackBatch
			else
				invoke ProcessBudgetEditCallback BudgetEditCallBackBatch 	
					invoked.PrmFinanceEnterpriseGroup	= LocalFEG
					if (LocalCallbackCount	< 2000)
						invoked.PrmNumberOfThreads	= 1						
			


																						
	Actions
		Create is an Action
			restricted
		Update is an Action
			restricted
		Delete is an Action
			restricted
		Purge is a Purge Action	
			restricted

		PruneCompletedEdits is a Set Action
			Parameters
				FEG		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				UpTo	is TimeStamp
			Parameter Rules
				UpTo

					required 
			Instance Selection
				where (CompletionTime entered
				and CompletionTime < UpTo
				and BudgetEditCallBackWrap.FEG = FEG)
			Sort Order
				CompletionTime
				BudgetEditCallBackWrap.FEG
			Action Rules
				Instance Rules

					invoke Purge BudgetEditBatch
						resume on error		
							ErrorMessage = error message

		ProcessBatchEdits is a Set Action
			run in foreground

			confirmation required												
			completion message is "ProcessBatchEditsInstancesIsInProcess"			
			Parameters
				FEG		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				FEG
					required
			Sort Order
				BudgetEditCallBackWrap.FEG
			Action Rules
				Set Rules
					Entrance Rules
						LocalFEG = FEG
						if (BatchBudgetEdit)
							invoke InitiateBudgetEdit BudgetEditConfigurationRel
						else					
							invoke ProcessBatchEditsInstances BudgetEditBatch in background
								invoked.FEG		= FEG
						










		ProcessBatchEditsInstances is an Instance Action
			restricted

			run in background
			Parameters
				FEG		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"					
				PrmBusinessClassName			is Alpha size 100
					default label is "BusinessClass"
			Local Fields
				ErrorCount				is Numeric 4
				TCounter				is Numeric 6
				Result					is Boolean
				ActionCode
				LocalTotalsProcessing	is a BudgetEditTotalsProcessing
				LocalBudgetEditMode		is a BudgetEditMode
				LocalEditCallBack		is a BudgetEditCallBack
				LocalHasCallBack		is Boolean
				Amount					is a TotalAmount
				CurrentBatch			is a BudgetEditBatch
				RebuildTotals			is Boolean
				ErrorMsg				is Alpha 150
				LocalCallbackCount		is Numeric 6
				CallBackBatchCount		is Numeric 6
			Action Rules
				LocalBusinessClassName = PrmBusinessClassName
				include IncludeProcessBatchEditsInstances

				

		ProcessInterfaceBatchEdits is a Set Action
			restricted		
			run in foreground
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmBusinessClassName			is Alpha size 100
					default label is "BusinessClass"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmBusinessClassName
					required
			Sort Order is ByCompletionTime
			Instance Selection
				where (CompletionTime             not entered
				and    BudgetEditCallBackWrap.FEG = PrmFinanceEnterpriseGroup
				and    BusinessClassName 	      = PrmBusinessClassName)
			Action Rules
				Set Rules
					Entrance Rules
						LocalFEG = PrmFinanceEnterpriseGroup
						if (BatchBudgetEdit)
							invoke InitiateBudgetEdit BudgetEditConfigurationRel
						else					
							invoke ProcessBatchEditsInstances BudgetEditBatch in background
								run outside of action background group				
								run after current action background group			
								invoked.FEG					 = PrmFinanceEnterpriseGroup
								invoked.PrmBusinessClassName = PrmBusinessClassName
		
		ProcessCallBack is a Set Action
			disable checkpoint
			synchronized on untranslatable:"BudgetEditBatch_ProcessCallBackThread_<FEG>_<PrmCallBackBatch>"
			restricted
			Parameters
				FEG				 is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"					
				PrmCallBackBatch is Numeric size 12
			Local Fields
				Result					is Boolean
				ForceForegroundCallback

			Sort Order
				CallBackBatch
				CallBackCompletionTime
			Instance Selection
				where (BudgetEditCallBackWrap.FEG	= FEG
				and	   CallBackBatch                = PrmCallBackBatch 
				and    CallBackCompletionTime not entered 
				and    ErrorMessage not entered) 
			Action Rules
				Set Rules
				
				Instance Rules
					LocalFEG				= FEG
					if (IsBudgetChangeOrder)
						LocalID = DocumentID
						if (IsBudgetChangeOrderApproval)
							invoke EditInProgress.InitiateApproval BudgetChangeOrderRel
						else
							invoke EditInProgress.Success BudgetChangeOrderRel
					else
						ForceForegroundCallback = true
						Result	= BudgetEditCallBackWrap.BudgetEditCallBack.Success
						Result  = BudgetEditCallBackWrap.BudgetEditCallBack.InitiateFlow
					CallBackCompletionTime = current timestamp

					if (BudgetEditConfigurationRel.AutoPruneBudgetEditBatch)
						invoke Delete

