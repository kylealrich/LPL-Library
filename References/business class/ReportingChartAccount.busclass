ReportingChartAccount is a BusinessClass
	owned by GeneralLedger
	prefix is GLRCA   
    
    Ontology
    	symbolic key is ReportingChartAccount

    Patterns
		implements BODId
		implements Resequence on DisplayOrder
			new sequence field is NewDisplayOrder
			set is ByParentAccount

	Context Fields
		ReportingBasis
#ifdef module integration
		FSMInboundBODTracker
#endif

    Persistent Fields
    	ParentChartAccount 			is a GeneralLedgerChartAccount
    		delete ignored
		ChartAccountNode			is a GeneralLedgerChartAccount
			delete ignored
		UnrealizedGainAccount		is a GeneralLedgerChartAccount
		UnrealizedLossAccount		is a GeneralLedgerChartAccount
		TranslationGainAccount		is a GeneralLedgerChartAccount
		TranslationLossAccount		is a GeneralLedgerChartAccount
    	DisplayAccount				is Alpha 60 
    		translatable        	
		DisplayOrder				is Numeric 6
			disable Auditing
		TranslationCode				is a GeneralLedgerTranslationCode			
		Revalue						is Boolean
		XbrlTag						is Alpha 60
		ChartType
		CloseToAccount				is a GeneralLedgerChartAccount
		IsGainLossAccount			is Boolean
		IncludeInBudgetEdit			is Boolean
		BudgetSection1				is Numeric 4
			disable Auditing
		BudgetSection2				is Numeric 4
			disable Auditing
		BudgetSection3				is Numeric 4
			disable Auditing
    	RequireProject				is Boolean

    Transient Fields
    	DefaultSettings				is Boolean
    	NewDisplayOrder				is Numeric 6
		ReportingChartAccountNew	is Numeric 1
			derive value from ReportingChartAccountExists
		RetainDefaultValues 		is Boolean
		BypassNewStructureNotification is Boolean		

	Field Groups
		ChangeChildrenFields
			TranslationCode 
			Revalue
			RequireProject
			XbrlTag 
			UnrealizedGainAccount 
			UnrealizedLossAccount 
			TranslationGainAccount 
			TranslationLossAccount 
			CloseToAccount 	

	Rule Blocks

		FindParent
			LocalReportChartAccount	= GeneralLedgerChartAccount
			LocalParentAccount		= ParentChartAccount
			LocalParentDisplayOrder	= NextParentRel.DisplayOrder

			if (LocalParentAccount.Level < LocalLevel)
				LocalParentAccount 		= GeneralLedgerChartAccount
				LocalParentDisplayOrder	= DisplayOrder
			else
				while (LocalParentAccount.Level > LocalLevel)
					LocalReportChartAccount	= LocalParentAccount
					LocalParentAccount		= LocalReportingChartAccountRel.ParentChartAccount
					LocalParentDisplayOrder	= LocalReportingChartAccountRel.NextParentRel.DisplayOrder


		FindGLAccountParentLevel1
			if (!LocalParentLevel1Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 1
				include FindParent
				LocalParentLevel1Found = true

		FindGLAccountParentLevel2
			if (!LocalParentLevel2Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 2
				include FindParent
				LocalParentLevel2Found = true

		FindGLAccountParentLevel3
			if (!LocalParentLevel3Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 3
				include FindParent
				LocalParentLevel3Found = true

		FindGLAccountParentLevel4
			if (!LocalParentLevel4Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 4
				include FindParent
				LocalParentLevel4Found = true

		FindGLAccountParentLevel5
			if (!LocalParentLevel5Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 5
				include FindParent
				LocalParentLevel5Found = true

		FindGLAccountParentLevel6
			if (!LocalParentLevel6Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 6
				include FindParent
				LocalParentLevel6Found = true

		FindGLAccountParentLevel7
			if (!LocalParentLevel7Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 7
				include FindParent
				LocalParentLevel7Found = true

		FindGLAccountParentLevel8
			if (!LocalParentLevel8Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 8
				include FindParent
				LocalParentLevel8Found = true

		FindGLAccountParentLevel9
			if (!LocalParentLevel9Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 9
				include FindParent
				LocalParentLevel9Found = true

		FindGLAccountParentLevel10
			if (!LocalParentLevel10Found
			or	LocalLevel != LocalLastLevel)
				LocalLastLevel			= LocalLevel
				LocalReportChartAccount	= GeneralLedgerChartAccount
				LocalParentAccount		= ParentChartAccount
				LocalParentDisplayOrder	= NextParentRel.DisplayOrder
				LocalLevel = 10
				include FindParent
				LocalParentLevel10Found = true

		ChartOfAccountRules
			trigger "ReportingChartAccountService" PA service
				resume on error
				title is "EG:<FinanceEnterpriseGroup>RC:<ReportingChart>RCA:<GeneralLedgerChartAccount>"
				Criteria
					FinanceEnterpriseGroup
					ReportingChart
					ReportingChartAccount
				Variables
					LocalActionCode
						variable name is ActionCode
					include persistent fields from FinanceEnterpriseGroup
					include persistent fields from ReportingChart
					include persistent fields from ReportingChartAccount
					include persistent fields from GeneralLedgerChartAccount
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
	

 	Apply Pending Effective Rules
		if (FinanceEnterpriseGroup.BODTrigger and (!LocalBODTriggered))
			if (action != "UpdateBODIdFields") 
				LocalActionCode = LocalActionCode.Update 

				if (bod id.VariationID <= 1)
					LocalActionCode = LocalActionCode.Create
				else
					if (action type.Delete)
						LocalActionCode = LocalActionCode.Delete
				LocalBODTriggered = true
				increment bod id.VariationID
				include ChartOfAccountRules



	
	Audit Entry Rules
		if(not audit period.Future)
			if (FinanceEnterpriseGroup.BODTrigger and (!LocalBODTriggered))
				if (!action type.Delete)
					LocalBODTriggered = true
					include ChartOfAccountRules



 	Action Exit Rules
 		if ((action = "Create"
 		or   action = "Delete")
 		or  (action = "Update"
 		and  ParentChartAccount != old ParentChartAccount))
	 		if (ReportingChart.SecurityGroupsNotRequiringRebuildRel exists)
 				invoke SetRequiresRebuild ReportingChart.SecurityGroupsNotRequiringRebuildRel 
						
		if (FinanceEnterpriseGroup.BODTrigger and (!LocalBODTriggered))
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update 
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete

					increment bod id.VariationID



















	Derived Fields
		ReportingChartAccountExists	is a DerivedField
			type is Boolean
			restricted
			if (this instance exists)
				return true

		DerivedOldPrefix	is a StringField
			type is AlphaUpper 26
			restricted
			LocalOldChartSequence
			"_"
			
		DerivedNewPrefix    is a StringField
			type is AlphaUpper 26
			restricted
			LocalNewChartSequence
			"_"
			
		DerivedNewAccount   is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			I1 = DerivedOldPrefix size
			I1 += 1
			DerivedNewAccount = DerivedNewPrefix + LocalCopyAccount[I1:26]
  		
		DerivedUnrealizedGainAccount    is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentReportingChartAccountRel.UnrealizedGainAccount entered)
				return ParentReportingChartAccountRel.UnrealizedGainAccount
			else
				LocalSystemAccount = SystemAccount.UnrealizedGain
				if (SystemAccountRel exists)
					return SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
					return SystemAccountRel.GeneralLedgerChartAccount
		DerivedUnrealizedLossAccount    is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentReportingChartAccountRel.UnrealizedLossAccount entered)
				return ParentReportingChartAccountRel.UnrealizedLossAccount
			else
				LocalSystemAccount = SystemAccount.UnrealizedLoss
				if (SystemAccountRel exists)
					return SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.UnrealizedGainAndLoss
					return SystemAccountRel.GeneralLedgerChartAccount
		DerivedTranslationGainAccount   is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentReportingChartAccountRel.TranslationGainAccount entered)
				return ParentReportingChartAccountRel.TranslationGainAccount
			else
				LocalSystemAccount = SystemAccount.TranslationGain
				if (SystemAccountRel exists)
					return SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.TranslationGainAndLoss
					return SystemAccountRel.GeneralLedgerChartAccount
		DerivedTranslationLossAccount   is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (ParentReportingChartAccountRel.TranslationLossAccount entered)
				return ParentReportingChartAccountRel.TranslationLossAccount
			else
				LocalSystemAccount = SystemAccount.TranslationLoss
				if (SystemAccountRel exists)
					return SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.TranslationGainAndLoss
					return SystemAccountRel.GeneralLedgerChartAccount

		DerivedTranslationCode	is a DerivedField
			type is AlphaUpper 15
			restricted
			if (TranslationCode entered)
				return TranslationCode
			else
				return ParentReportingChartAccountRel.TranslationCode

		DerivedRevalue	is a DerivedField
			type is Boolean
			restricted
			if (Revalue entered)
				return Revalue
			else
				return ParentReportingChartAccountRel.Revalue				

		DerivedRequireProject	is a DerivedField
			type is Boolean
			restricted
			if (RequireProject entered)
				return RequireProject
			else
				return ParentReportingChartAccountRel.RequireProject

		DerivedXbrlTag	is a DerivedField
			type is Alpha 60
			restricted
			if (XbrlTag entered)
				return XbrlTag
			else
				return ParentReportingChartAccountRel.XbrlTag
				
		DerivedFutureChanges 	is a DerivedField
			type is Boolean
			restricted
			if (this instance.has future changes)
				return true

		DerivedCloseToAccount				is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			if (CloseToAccount entered)
				return CloseToAccount
			else
				if (ParentReportingChartAccountRel.CloseToAccount entered)
					return ParentReportingChartAccountRel.CloseToAccount




#ifdef module integration
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedLinkAccountingUnit is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "SyncChartOfAccount_LinkAccountingUnit"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		BODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or LocalActionCode.Create)
				return "Add"
			if (action type.Update)
				return "Replace"
			if (action type.Delete)
				return "Replace"
			else
				return ""
		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID
			
		DerivedSystemOfRecord is a DerivedField
			type is Alpha size 10
			restricted
			return 0
			
		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCurrentTimeStamp = current timestamp
			return BODCurrentTimeStamp
			
		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
		
		BODCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCreateTimeStamp =  create stamp.timestamp
			return BODCreateTimeStamp
			
		BODFormattedCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCreateTimeStamp[1:4] + "-" + BODCreateTimeStamp[5:6] + "-" + BODCreateTimeStamp[7:8] + "T" + BODCreateTimeStamp[9:10] + ":" + BODCreateTimeStamp[11:12] + ":" + BODCreateTimeStamp[13:14] + "Z"
		
		BODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODUpdateTimeStamp = update stamp.timestamp
			return BODUpdateTimeStamp
			
		BODFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODUpdateTimeStamp[1:4] + "-" + BODUpdateTimeStamp[5:6] + "-" + BODUpdateTimeStamp[7:8] + "T" + BODUpdateTimeStamp[9:10] + ":" + BODUpdateTimeStamp[11:12] + ":" + BODUpdateTimeStamp[13:14] + "Z"
		
		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return GeneralLedgerChartAccount
		DerivedBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID + ":" +DerivedDocumentID + ":" +"?ChartOfAccounts&verb=Sync&TrackerID="+ LocalFSMInboundBODTracker
			
		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedCleanDocumentIDFlag is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedCleanDocumentID = "Y")
				return DerivedCleanDocumentID
			else
				return "N"
		
		DerivedTriggerBODBasedOnCrossReference is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "TriggerBODBasedOnCrossReference"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor
			
		DerivedBODStatusCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Delete or LocalActionCode.Delete)
				return "Deleted"
			else
				if (GeneralLedgerChartAccount.Active)
					return "Open"
				else	
					return "Closed"
		DerivedAccountDescription is a DerivedField
			type is Alpha 60
			restricted
			return GeneralLedgerChartAccount.AccountDescription
		DerivedNominalAccount is a DerivedField
			type is AlphaUpper 26
			restricted 
			return GeneralLedgerChartAccount
		DerivedGLChartAccountType is a DerivedField
			type is Alpha 50
			restricted
			if(GeneralLedgerChartAccount.AccountType = 1 )
				return "Asset"
			if(GeneralLedgerChartAccount.AccountType = 2)
				return "Liability"
			if(GeneralLedgerChartAccount.AccountType = 3)
				return "Equity"
			if(GeneralLedgerChartAccount.AccountType = 4)
				return "Revenue"
			if(GeneralLedgerChartAccount.AccountType = 5)
				return "Expense"
			if(GeneralLedgerChartAccount.AccountType = 6)
				return "StatCumulative"
			if(GeneralLedgerChartAccount.AccountType = 7)
				return "StatNonCumulative"
		DerivedCurrency is a DerivedField
			type is AlphaUpper 5
			restricted
			return GeneralLedgerChartAccount.Currency

		DerivedAccountingChartDocumentID is a DerivedField
			type is Alpha 60
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + ReportingChart

		DerivedReportingChartDescription is a DerivedField
			type is Alpha 60
			restricted
			return ReportingChart.Description
		DerivedDebitCreditFlag is a DerivedField
			type is Alpha 60
			restricted
			if(GeneralLedgerChartAccount.NaturalBalance = 1)
				return "DEBIT"
			if(GeneralLedgerChartAccount.NaturalBalance = 2) 
				return "CREDIT"
			else
				return ""
		DerivedXbrlListID is a DerivedField
			type is Alpha 60
			restricted
			if(XbrlTag!= "")
				return "XBRL Tag"
		DerivedAccountType is a DerivedField
			type is Alpha 60
			restricted
			if(GeneralLedgerChartAccount.AccountType = 1)
				return "BalanceSheet"
			else
				return "ProfitAndLoss"
		DerivedChartType is a DerivedField
			type is Alpha 60
			restricted
			if(ChartType = 1)
				return "Summary"
			if(ChartType = 2)
				return "Posting"
				
		LinkAccountingUnitXMLBOD is a DerivedField
			type is XMLDocument
	        restricted
	        if (CodeBlockRelationDetailRel exist and DerivedLinkAccountingUnit = "Y")
	        	initialize LocalSequence
				for each CodeBlockRelationDetailRel
					LocalSequence +=1
					LocalAUandAE = each.AccountingEntity + DerivedDelimiter + each.AccountingUnit
					LinkAccountingUnitXMLBOD += template.IONSyncChartOfAccounts_ReportingChartAccount_LinkAU_ST document for this instance
				return LinkAccountingUnitXMLBOD
			else 
				return ""
				
		ChartOfAccountsXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			ChartOfAccountsXMLBOD = template.IONSyncChartOfAccounts_ReportingChartAccount_ST document for this instance
#endif		

		DerivedLevel1Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalParentLevel1Found = false
			LocalLevel = 1
			include FindGLAccountParentLevel1
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel1ParentDescription is a DerivedField
			type is like AccountDescription
			restricted
			LocalLevel = 1
			include FindGLAccountParentLevel1
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel1ParentChartType is a DerivedField
			type is like ChartType
			restricted
			LocalLevel = 1
			include FindGLAccountParentLevel1
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType			

		DerivedLevel1ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 1
			include FindGLAccountParentLevel1
			return LocalParentDisplayOrder

		DerivedLevel1ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 1
			include FindGLAccountParentLevel1
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel2Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel2Found = false
			LocalLevel = 2
			include FindGLAccountParentLevel2
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel2ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 2
			include FindGLAccountParentLevel2
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel2ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 2
			include FindGLAccountParentLevel2
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel2ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 2
			include FindGLAccountParentLevel2
			return LocalParentDisplayOrder

		DerivedLevel2ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 2
			include FindGLAccountParentLevel2
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel3Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel3Found = false
			LocalLevel = 3
			include FindGLAccountParentLevel3
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel3ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 3
			include FindGLAccountParentLevel3
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel3ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 3
			include FindGLAccountParentLevel3
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel3ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 3
			include FindGLAccountParentLevel3
			return LocalParentDisplayOrder

		DerivedLevel3ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 3
			include FindGLAccountParentLevel3
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel4Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel4Found = false
			LocalLevel = 4
			include FindGLAccountParentLevel4
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel4ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 4
			include FindGLAccountParentLevel4
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel4ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 4
			include FindGLAccountParentLevel4
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel4ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 4
			include FindGLAccountParentLevel4
			return LocalParentDisplayOrder	

		DerivedLevel4ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 4
			include FindGLAccountParentLevel4
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel5Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel5Found = false
			LocalLevel = 5
			include FindGLAccountParentLevel5
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel5ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 5
			include FindGLAccountParentLevel5
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel5ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 5
			include FindGLAccountParentLevel5
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel5ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 5
			include FindGLAccountParentLevel5
			return LocalParentDisplayOrder

		DerivedLevel5ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 5
			include FindGLAccountParentLevel5
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel6Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel6Found = false
			LocalLevel = 6
			include FindGLAccountParentLevel6
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel6ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 6
			include FindGLAccountParentLevel6
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel6ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 6
			include FindGLAccountParentLevel6
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel6ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 6
			include FindGLAccountParentLevel6
			return LocalParentDisplayOrder	

		DerivedLevel6ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 6
			include FindGLAccountParentLevel6
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel7Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel7Found = false
			LocalLevel = 7
			include FindGLAccountParentLevel7
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel7ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 7
			include FindGLAccountParentLevel7
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel7ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 7
			include FindGLAccountParentLevel7
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel7ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 7
			include FindGLAccountParentLevel7
			return LocalParentDisplayOrder

		DerivedLevel7ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 7
			include FindGLAccountParentLevel7
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel8Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel8Found = false
			LocalLevel = 8
			include FindGLAccountParentLevel8
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel8ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 8
			include FindGLAccountParentLevel8
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel8ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 8
			include FindGLAccountParentLevel8
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel8ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 8
			include FindGLAccountParentLevel8
			return LocalParentDisplayOrder

		DerivedLevel8ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 8
			include FindGLAccountParentLevel8
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel9Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel9Found = false
			LocalLevel = 9
			include FindGLAccountParentLevel9
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel9ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 9
			include FindGLAccountParentLevel9
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel9ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 9
			include FindGLAccountParentLevel9
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel9ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 9
			include FindGLAccountParentLevel9
			return LocalParentDisplayOrder

		DerivedLevel9ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 9
			include FindGLAccountParentLevel9
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

		DerivedLevel10Parent is a DerivedField
			type is like GeneralLedgerChartAccount
			LocalParentLevel10Found = false
			LocalLevel = 10
			include FindGLAccountParentLevel10
			return LocalParentAccount.GeneralLedgerChartAccount

		DerivedLevel10ParentDescription is a DerivedField
			type is like AccountDescription
			LocalLevel = 10
			include FindGLAccountParentLevel10
			return LocalParentAccount.GeneralLedgerChartAccount.AccountDescription

		DerivedLevel10ParentChartType is a DerivedField
			type is like ChartType
			LocalLevel = 10
			include FindGLAccountParentLevel10
			return LocalParentAccount.GeneralLedgerChartAccount.ChartType

		DerivedLevel10ParentDisplayOrder is a DerivedField
			type is Numeric 6
			LocalLevel = 10
			include FindGLAccountParentLevel10
			return LocalParentDisplayOrder

		DerivedLevel10ParentAccountType is a DerivedField
			type is like AccountType
			LocalLevel = 10
			include FindGLAccountParentLevel10
			return LocalParentAccount.GeneralLedgerChartAccount.AccountType

	Local Fields
		LocalReportingBasis			is a ReportingBasis
		LocalSystemAccount 			is a SystemAccount
		LocalReportChartAccount		is a GeneralLedgerChartAccount
		LocalCopyAccount        	is a GeneralLedgerChartAccount
		LocalNewAccount         	is a GeneralLedgerChartAccount
		LocalNewChartSequence   	is Numeric 4
		LocalOldChartSequence   	is Numeric 4		
		LocalParentAccount	    	is a GeneralLedgerChartAccount
		TopNodeFound				is Boolean
		I1					    	is Numeric 2
		LocalLevel					is Numeric 3
		LocalActionCode				is an ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalBODTriggered			is Boolean
		NativeLPLBODTrigger			is Boolean
		NativeLPLBODTriggerExclude 	is Boolean
		LocalSequence				is Numeric size 9       
		LocalBodAccountingEntity	is AlphaUpper size 12
		LocalCrossAccountingEntity 	is Alpha 40
		LocalCleanDocIDAccountingentity 	is Alpha 40
		LocalBODFormattedID					is Alpha 100
		ChartOfAccountsCleanDocIDXMLBOD		is XMLDocument
#ifdef module integration
		NewBODTracker  				is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker	is Numeric 15
		Error            			is Boolean
	    ErrorMessage     			is Alpha 300
	    LocalConfigurationParameter	is Alpha size up to 200
	    LocalSourceValue			is Alpha 20
#endif	
		LocalAUandAE				is Alpha 45
		Counter						is Numeric 6
		LocalLastLevel				is Numeric 3
		LocalParentLevelFound		is Boolean
		LocalParentLevel1Found		is Boolean
		LocalParentLevel2Found		is Boolean
		LocalParentLevel3Found		is Boolean
		LocalParentLevel4Found		is Boolean
		LocalParentLevel5Found		is Boolean
		LocalParentLevel6Found		is Boolean
		LocalParentLevel7Found		is Boolean
		LocalParentLevel8Found		is Boolean
		LocalParentLevel9Found		is Boolean
		LocalParentLevel10Found		is Boolean
		LocalParentDisplayOrder		is Numeric 6
#ifdef module reconciliation
		LocalReconciliationManagementGroup       is a ReconciliationManagementGroup
	    LocalAccountingEntity			         is a AccountingEntity
	    LocalAccountingUnit				         is an AccountingUnit
		LocalProject					         is a Project
		LocalDimensionCodeValue			         is AlphaUpper 15
		LocalReconciliationAccountStructure	     is a ReconciliationAccountStructure
		LocalTransactionCodeBlock	             is a TransactionCodeBlock
#endif
	    
	Conditions
		GainLossAccountsForChart
			restricted
			when (IsGainLossAccount)
		NotUsedInAChart
			restricted
			when (GeneralLedgerChartAccount.ChartType.Posting
			and   !AccountInAnotherChartRel exists)	
		BalanceSheetTranslationCodes
			restricted
			when (TranslationCode = "BS"
			or    TranslationCode = "HB" )

		
	Sets
		ByParentAccount
			Sort Order
				FinanceEnterpriseGroup
				ParentChartAccount
				DisplayOrder
				GeneralLedgerChartAccount
		BySubordinateAccount
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerChartAccount

				ParentChartAccount
		SubordinatesByTopNode
			Sort Order
				FinanceEnterpriseGroup
				ChartAccountNode
				GeneralLedgerChartAccount
				ParentChartAccount
		SubordinateInTopNode
			Sort Order
				FinanceEnterpriseGroup
				ChartAccountNode
				GeneralLedgerChartAccount
		ChildrenInTopNode
			Sort Order
				FinanceEnterpriseGroup
				ChartAccountNode
				ParentChartAccount
				GeneralLedgerChartAccount
		ByChartParentAccount
			Sort Order
				FinanceEnterpriseGroup
				ReportingChart
				ParentChartAccount
				DisplayOrder
				GeneralLedgerChartAccount
		AccountByChartType
			Sort Order
				FinanceEnterpriseGroup
				ReportingChart
				ChartType
				GeneralLedgerChartAccount
		ByDisplayAccount
			Sort Order
				FinanceEnterpriseGroup
				ReportingChart
				DisplayAccount
				GeneralLedgerChartAccount
		ByCloseToAccount
			Sort Order
				FinanceEnterpriseGroup
				ReportingChart
				CloseToAccount
				GeneralLedgerChartAccount





				
	Relations
		ReportingChartRel
			one-to-many relation to ReportingChart
			Field Mapping uses ByChartAccountNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.ChartAccountNode       = ChartAccountNode
		ChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerChartAccount	!= GeneralLedgerChartAccount)
		ParentReportingChartAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup			     = FinanceEnterpriseGroup
				related.ChartAccountNode					 = ChartAccountNode
				related.GeneralLedgerChartAccount			 = ParentChartAccount
		SiblingsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByParentAccount
				related.FinanceEnterpriseGroup			    = FinanceEnterpriseGroup
				related.ParentChartAccount 					= ParentChartAccount
			Instance Selection
				where (related.UniqueID != UniqueID)
		PostingSiblingsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByParentAccount
				related.FinanceEnterpriseGroup			    = FinanceEnterpriseGroup
				related.ParentChartAccount 					= ParentChartAccount
			Instance Selection
				where (related.ChartType.Posting
				and related.UniqueID != UniqueID)
		NextHigherPostingSiblingsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByParentAccount
				related.FinanceEnterpriseGroup			    = FinanceEnterpriseGroup
				related.ParentChartAccount 					= ParentChartAccount
			Instance Selection
				where (related.ChartType.Posting
				and related.GeneralLedgerChartAccount > GeneralLedgerChartAccount)
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount
		NextHighestSiblingAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ChildrenInTopNode
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ChartAccountNode   					= ChartAccountNode
				related.ParentChartAccount 					= ParentChartAccount
			Instance Selection
				where (related.GeneralLedgerChartAccount > GeneralLedgerChartAccount)
		NotifyBudgetTemplateRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.NotifyOnAccount
				and related.AccountStructure	= ReportingChart)
		BasisLedgerHierarchyRel
			one-to-many relation to LedgerHierarchy
			Field Mapping uses ByParent  
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= ReportingBasis.LedgerTopNode
			Instance Selection
				where (related.AllCurrencyLedger)
		GeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGainLossRunSequence
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Ledger						= BasisLedgerHierarchyRel.SubordinateLedger
				related.FinanceCodeBlock.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount
		LocalReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 = FinanceEnterpriseGroup
				related.ReportingChart					 = ReportingChart
				related.GeneralLedgerChartAccount		 = LocalReportChartAccount
		GLChartAccountShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount						
		MemberOfUnusedChartRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= FinanceEnterpriseGroup.UnusedAccountChart
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount	
		DisplayAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByDisplayAccount
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.DisplayAccount   			= DisplayAccount
			Instance Selection
				where (related.GeneralLedgerChartAccount != GeneralLedgerChartAccount)	
		AccountInAnotherChartRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses BySubordinateAccount
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.ReportingChart != ReportingChart)
		RetainedEarningAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= 11		
			Instance Selection
				where (related.GeneralLedgerChartAccount	= LocalReportChartAccount
				and   !related.GeneralLedgerSubAccount 		= FinanceEnterpriseGroup.SystemSubAccount)
		ReportingChartCloseToAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByCloseToAccount
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ReportingChart					= ReportingChart
				related.CloseToAccount					= GeneralLedgerChartAccount

		
		CodeBlockRelationDetailRel
        	one-to-many relation to CodeBlockRelationDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.SortFromValue = "AccountingUnit"
				and related.SortToValue = "Account"
				and related.GeneralLedgerChartAccount = DisplayAccount)
				
		TemplatesWithIncludeInBudgetEditRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup 
			Instance Selection
				where (related.Status 				= 2 
				and related.PostingAccount
				and related.AccountStructure		= ReportingChart)

#ifdef module integration				
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
        
        BODAccountingEntityRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
			Instance Selection
				where (related.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
		
		BODCrossAccountingEntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingEntity 		= LocalBodAccountingEntity
		
		FSMBODAECrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
            	related.FSMBODCrossReference.SourceField 		= "CSFAE"
            	related.FSMBODCrossReference.DestinationField 	= "DESTAE"
            Instance Selection
				where (related.SourceValue	= LocalCleanDocIDAccountingentity )
		
		FSMCleanBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
            	related.FSMBODCrossReference.SourceField 		= "CSFAE"
            	related.FSMBODCrossReference.DestinationField 	= "DESTAE"
				
        FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "ChartOfAccounts"
            	related.FSMBODConfiguration.Direction 	= 1
				
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
#endif



		NextParentRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = ParentChartAccount

		NextParent1Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = ParentChartAccount.ParentChartAccount

		NextParent2Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent1Rel.ParentChartAccount

		NextParent3Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent2Rel.ParentChartAccount

		NextParent4Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent3Rel.ParentChartAccount

		NextParent5Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent4Rel.ParentChartAccount

		NextParent6Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent5Rel.ParentChartAccount

		NextParent7Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent6Rel.ParentChartAccount

		NextParent8Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent7Rel.ParentChartAccount

		NextParent9Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent8Rel.ParentChartAccount

		NextParent10Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent9Rel.ParentChartAccount

		NextParent11Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent10Rel.ParentChartAccount

		NextParent12Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent11Rel.ParentChartAccount

		NextParent13Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent12Rel.ParentChartAccount

		NextParent14Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent13Rel.ParentChartAccount

		NextParent15Rel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
				related.ReportingChart            = ReportingChart
				related.GeneralLedgerChartAccount = NextParent14Rel.ParentChartAccount

#ifdef module reconciliation		
		ReconciliationAccountAccountingEntityRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = LocalReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = LocalAccountingEntity
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity)
				
		ReconciliationAccountAccountingUnitRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = LocalReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = LocalAccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = LocalAccountingUnit
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit)
		
		ReconciliationAccountProjectRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = LocalReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = LocalAccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = blank
				related.ReconciliationCodeBlock.Project 				  = LocalProject
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.Project)
		
		ReconciliationAccountDimensionRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = LocalReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = LocalAccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = blank
				related.ReconciliationCodeBlock.Project 				  = blank
				related.DimensionCodeValue 								  = LocalDimensionCodeValue
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type >= 6
				and	   related.ReconciliationAccountStructure.ReconciliationLevel.Type = LocalReconciliationAccountStructure.ReconciliationLevel.Type)
#endif
						
	Field Rules
		DisplayAccount
			default to GeneralLedgerChartAccount
			constraint (!DisplayAccountRel exists)
				"DisplayValueAlreadyExistsFor<first DisplayAccountRel.GeneralLedgerChartAccount>"			
		ReportingChart
			default to first ReportingChartRel.ReportingChart 
 		ChartType
 			ChartType = GeneralLedgerChartAccount.ChartType
 		IncludeInBudgetEdit
 			if (IncludeInBudgetEdit changed)
 				invoke NotifyChangeIncludeAccount NotifyBudgetTemplateRel
					invoked.PrmAccount       = GeneralLedgerChartAccount
					invoked.PrmParentAccount = ParentChartAccount
		TranslationCode
			if (GeneralLedgerChartAccount.AccountType.Equity)
				default to "HB"
			else
				if (GeneralLedgerChartAccount.AccountType.Asset
				or  GeneralLedgerChartAccount.AccountType.Liability)
					default to "BS"
					constraint (TranslationCode != "IS")
						"CannotUseIncomeStatementTranslationCodeOnBalanceSheetAccounts"
				else
					if (GeneralLedgerChartAccount.AccountType.Revenue
					or  GeneralLedgerChartAccount.AccountType.Expense)
						default to "IS"
						constraint (!BalanceSheetTranslationCodes)
							"CannotUseBalanceSheetTranslationCodeOnIncomeStatementAccounts"
					else
						if (GeneralLedgerChartAccount.ChartSection.IncomeStatement)
							default to "IS"
							constraint (!BalanceSheetTranslationCodes)
								"CannotUseBalanceSheetTranslationCodeOnIncomeStatementAccounts"
						else
							if (GeneralLedgerChartAccount.ChartSection.BalanceSheet)
								default to "BS"
								constraint (TranslationCode != "IS")
									"CannotUseIncomeStatementTranslationCodeOnBalanceSheetAccounts"
		CloseToAccount
			constraint (CloseToAccount.ChartSection.BalanceSheet)
				"CanOnlyEnterBalanceSheet<FinanceEnterpriseGroup.AccountLabel>"
			constraint (!ReportingChartCloseToAccountRel exists)
				"CannotEnterCloseTo<FinanceEnterpriseGroup.AccountLabel>"
			LocalReportChartAccount = CloseToAccount				
			constraint (LocalReportingChartAccountRel exists)
				"<CloseToAccount>_<FinanceEnterpriseGroup.AccountLabel>DoesNotExistInChart"
			if (CloseToAccount.ChartSection.BalanceSheet)
				constraint (CloseToAccount	!= GeneralLedgerChartAccount)
					"<CloseToAccount>_<FinanceEnterpriseGroup.AccountLabel>ItselfCannotBeACloseTo"
			if (GeneralLedgerChartAccount.ChartSection.IncomeStatement)
				constraint (RetainedEarningAccountRel exists)
					"CanEnterOnlyRetainedEarningSub<FinanceEnterpriseGroup.AccountLabel>"

	
    Actions

		Create is a Create Action
			restricted

			Field Rules

				DisplayOrder
					autosequence using ByParentAccount
					
			Action Rules
							
				if (DefaultSettings)
					TranslationCode				= DerivedTranslationCode
					Revalue						= DerivedRevalue
					RequireProject				= DerivedRequireProject
					XbrlTag						= DerivedXbrlTag
					UnrealizedGainAccount  		= DerivedUnrealizedGainAccount
					UnrealizedLossAccount  		= DerivedUnrealizedLossAccount
					TranslationGainAccount 		= DerivedTranslationGainAccount
					TranslationLossAccount 		= DerivedTranslationLossAccount
					CloseToAccount 				= DerivedCloseToAccount
			

			Exit Rules
				if(NewDisplayOrder not entered)
					if (ChartType.Posting)
						if (NextHigherPostingSiblingsRel exists)
							NewDisplayOrder = (first NextHigherPostingSiblingsRel.DisplayOrder)
						else
							NewDisplayOrder = (last PostingSiblingsRel.DisplayOrder + 1)

				invoke NotifyCreateAccount NotifyBudgetTemplateRel
					invoked.PrmAccount			= GeneralLedgerChartAccount
					invoked.PrmParentAccount	= ParentChartAccount
				if (ReportingChart.IsEnterpriseChart
				and ChartType.Posting)

					if (!BypassNewStructureNotification)
						invoke NotifyNewStructureComponent FinanceEnterpriseGroup
							invoked.PrmNewAccount					= GeneralLedgerChartAccount			
				if (!ReportingChart.UnusedDimensionStructure)
					if (MemberOfUnusedChartRel exists)
						invoke RemoveAccountFromUnusedChart FinanceEnterpriseGroup.UnusedAccountChart
							invoked.GeneralLedgerChartAccount = GeneralLedgerChartAccount
				if (ChartType.Posting
				and IsGainLossAccount)
					invoke UpdateIsGainLossAccount 

				if(NewDisplayOrder entered
				and NewDisplayOrder != DisplayOrder)
					invoke FastUpdate
						invoked.NewDisplayOrder = NewDisplayOrder
								
		Update is an Update Action
			restricted
			Action Rules
				if (ReportingChart not entered)
					confirmation required
						"ReportingChartNotAvailable._BudgetTemplatesMayTrackPostingElementsInThisDimension._Proceed?"
				if (IncludeInBudgetEdit changed)
					if (not IncludeInBudgetEdit
					and TemplatesWithIncludeInBudgetEditRel exists) 
						Counter		= instance count of TemplatesWithIncludeInBudgetEditRel
						if (Counter	= 1)
							confirmation required
								"BudgetTemplate<first TemplatesWithIncludeInBudgetEditRel.BudgetTemplate>UsesPosting<DisplayAccount>.Proceed?"
						else
						if (Counter > 1)
							Counter -= 1
							if (Counter = 1) 
								confirmation required
									"BudgetTemplate<first TemplatesWithIncludeInBudgetEditRel.BudgetTemplate>And<last TemplatesWithIncludeInBudgetEditRel.BudgetTemplate>UsePosting<DisplayAccount>.Proceed?"
							else
								confirmation required
									"BudgetTemplate<first TemplatesWithIncludeInBudgetEditRel.BudgetTemplate>And<Counter>OtherTemplatesUsePosting<DisplayAccount>.Proceed?"
				if (ParentChartAccount changed)
					if (ChartType.Posting)
						if (NextHigherPostingSiblingsRel exists)
							NewDisplayOrder = (first NextHigherPostingSiblingsRel.DisplayOrder -1)
							if(NewDisplayOrder not entered)
								invoke FastUpdate
									invoked.NewDisplayOrder = 1
						else
							if(PostingSiblingsRel exists)
								NewDisplayOrder = (last PostingSiblingsRel.DisplayOrder)
							else
								invoke FastUpdate
									invoked.NewDisplayOrder = 1
			Exit Rules	
				if (ChartType.Summary
				and	ChangeChildrenFields changed)
					invoke UpdateChartAccount GeneralLedgerChartAccount
						invoked.PrmTranslationCode			= TranslationCode
						invoked.PrmRevalue					= Revalue
						invoked.PrmRequireProject			= RequireProject
						invoked.PrmXbrlTag					= XbrlTag
						invoked.PrmUnrealizedGainAccount	= UnrealizedGainAccount
						invoked.PrmUnrealizedLossAccount	= UnrealizedLossAccount
						invoked.PrmTranslationGainAccount	= TranslationGainAccount
						invoked.PrmTranslationLossAccount	= TranslationLossAccount
						invoked.PrmCloseToAccount			= CloseToAccount
						invoked.RetainDefaultValues			= RetainDefaultValues
				if (ChartType.Posting
				and IsGainLossAccount)
					invoke UpdateIsGainLossAccount 

		FastUpdate is an Update Action
			restricted
			bypass field rules

#ifdef module integration	
		SendChartOfAccountsNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(DerivedCleanDocumentID = "Y")
					send ion bod
						bod is ChartOfAccountsCleanDocIDXMLBOD
						bod type is "Sync.ChartOfAccounts"
						accounting entity is LocalCrossAccountingEntity
						document id is DerivedDocumentID
						variation id is	BODVariationID
				else
					send ion bod
						bod is ChartOfAccountsXMLBOD
						bod type is "Sync.ChartOfAccounts"
						document id is DerivedDocumentID
						variation id is BODVariationID
					
		TriggerChartOfAccountsNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
				RestartFlag is Boolean
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "ChartOfAccounts"
					invoked.PrmTriggerFrom				= "ReportingChartAccount"
					invoked.PrmDirection				= 1
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmMainUserTemplate         = "IONSyncChartOfAccounts_ReportingChartAccount_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODTriggered = true
				if(FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(DerivedCleanDocumentID = "Y")
						if(RestartFlag)
							initialize LocalBodAccountingEntity
							initialize LocalCleanDocIDAccountingentity
							initialize LocalCrossAccountingEntity
							initialize ChartOfAccountsCleanDocIDXMLBOD
							if (BODAccountingEntityRel exist)
								LocalBodAccountingEntity = FSMInboundBODTracker.Reference3
								if(DerivedMultipleFEG = "Y")
									LocalCleanDocIDAccountingentity = FinanceEnterpriseGroup + DerivedDelimiter + LocalBodAccountingEntity
								else
									LocalCleanDocIDAccountingentity = LocalBodAccountingEntity	
								
								if(DerivedTriggerBODBasedOnCrossReference = "Y")
									if(FSMBODAECrossReferenceDetailRel.DestinationValue entered)
										LocalCrossAccountingEntity = FSMBODAECrossReferenceDetailRel.DestinationValue	
								else
								if(DerivedTriggerBODBasedOnCrossReference = "N")
									LocalCrossAccountingEntity = LocalCleanDocIDAccountingentity
								
								if(LocalCrossAccountingEntity entered)
									LocalFSMInboundBODTracker		= FSMInboundBODTracker
									invoke Update FSMInboundBODTrackerRel
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.BODDocumentID			= DerivedDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.Direction				= 1
										invoked.Reference1				= ReportingChart
										invoked.BODAccountingEntity		= LocalCrossAccountingEntity
										invoked.Reference2				= GeneralLedgerChartAccount
										invoked.Reference3				= LocalBodAccountingEntity
										initialize invoked.Error			
										initialize invoked.ErrorMessage
									initialize LocalBODFormattedID
									LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?ChartOfAccounts&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker	
									ChartOfAccountsCleanDocIDXMLBOD = template.IONSyncChartOfAccounts_ChartOfAccountsCleanDocID_ST document for this instance
									invoke SendChartOfAccountsNativeLPL
										resume on error
					               			Error            							= true
					                    	ErrorMessage     							= error message
					                if(Error)
										invoke Update FSMInboundBODTrackerRel
											invoked.Error 								= Error
											invoked.ErrorMessage 						= ErrorMessage
											invoked.Status								= 2
											invoked.CloseDate							= system current timestamp
											invoked.BODID								= LocalBODFormattedID
											invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
									else
										invoke Update FSMInboundBODTrackerRel
											invoked.Status								= 3
											invoked.CloseDate							= system current timestamp
											invoked.BODID								= LocalBODFormattedID	    	
					                    	invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
					    
					    else
					    if(DerivedTriggerBODBasedOnCrossReference = "Y")
							if(FSMCleanBODCrossReferenceDetailRel exists)
								for each FSMCleanBODCrossReferenceDetailRel
									initialize ChartOfAccountsCleanDocIDXMLBOD
									initialize LocalCrossAccountingEntity
									initialize LocalSourceValue
									LocalSourceValue = each.SourceValue
									if (LocalSourceValue entered)
										for each LocalSourceValue split on "<DerivedDelimiter>"
											initialize LocalBodAccountingEntity
											LocalBodAccountingEntity = each
									if(BODCrossAccountingEntityRel exists)
										LocalCrossAccountingEntity = each.DestinationValue
					    
					    			if(LocalCrossAccountingEntity entered)
										if(FSMInboundBODTracker not entered)
											invoke Create FSMInboundBODTracker
												assign result to NewBODTracker
												invoked.Verb 					= 1
												invoked.Noun 					= "ChartOfAccounts"				
												invoked.BODDocumentID			= DerivedDocumentID
												invoked.BODVariationID			= BODVariationID
												invoked.Status					= 1
												invoked.StartDate				= system current timestamp
												invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
												invoked.Direction				= 1
												invoked.Reference1				= ReportingChart
												invoked.BODAccountingEntity		= LocalCrossAccountingEntity
												invoked.Reference2				= GeneralLedgerChartAccount
												invoked.Reference3				= LocalBodAccountingEntity
												initialize invoked.Error			
												initialize invoked.ErrorMessage
											LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
										initialize LocalBODFormattedID
										LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?ChartOfAccounts&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker	
					    				ChartOfAccountsCleanDocIDXMLBOD = template.IONSyncChartOfAccounts_ChartOfAccountsCleanDocID_ST document for this instance
					    				invoke SendChartOfAccountsNativeLPL
											resume on error
					               				Error            							= true
					                    		ErrorMessage     							= error message
					                	if(Error)
											invoke Update FSMInboundBODTrackerRel
												invoked.Error 								= Error
												invoked.ErrorMessage 						= ErrorMessage
												invoked.Status								= 2
												invoked.CloseDate							= system current timestamp
												invoked.BODID								= LocalBODFormattedID
												invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
										else
											invoke Update FSMInboundBODTrackerRel
												invoked.Status								= 3
												invoked.CloseDate							= system current timestamp
												invoked.BODID								= LocalBODFormattedID	    	
					                    		invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
						else
						if(DerivedTriggerBODBasedOnCrossReference = "N")
							if(BODAccountingEntityRel exist)
								for each BODAccountingEntityRel
									initialize LocalBodAccountingEntity
									initialize ChartOfAccountsCleanDocIDXMLBOD
									initialize LocalCrossAccountingEntity
									initialize LocalBODFormattedID
									LocalBodAccountingEntity = each.AccountingEntity
									if(DerivedMultipleFEG = "Y")
										LocalCrossAccountingEntity = FinanceEnterpriseGroup + DerivedDelimiter + LocalBodAccountingEntity
									else
										LocalCrossAccountingEntity = LocalBodAccountingEntity	
									
									if(LocalCrossAccountingEntity entered)
										if(FSMInboundBODTracker not entered)
											invoke Create FSMInboundBODTracker
												assign result to NewBODTracker
												invoked.Verb 					= 1
												invoked.Noun 					= "ChartOfAccounts"				
												invoked.BODDocumentID			= DerivedDocumentID
												invoked.BODVariationID			= BODVariationID
												invoked.Status					= 1
												invoked.StartDate				= system current timestamp
												invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
												invoked.Direction				= 1
												invoked.Reference1				= ReportingChart
												invoked.BODAccountingEntity		= LocalCrossAccountingEntity
												invoked.Reference2				= GeneralLedgerChartAccount
												invoked.Reference3				= LocalBodAccountingEntity
												initialize invoked.Error			
												initialize invoked.ErrorMessage
											LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
										LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?ChartOfAccounts&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker	
					    				ChartOfAccountsCleanDocIDXMLBOD = template.IONSyncChartOfAccounts_ChartOfAccountsCleanDocID_ST document for this instance
					    				invoke SendChartOfAccountsNativeLPL
											resume on error
					               				Error            							= true
					                    		ErrorMessage     							= error message
					                	if(Error)
											invoke Update FSMInboundBODTrackerRel
												invoked.Error 								= Error
												invoked.ErrorMessage 						= ErrorMessage
												invoked.Status								= 2
												invoked.CloseDate							= system current timestamp
												invoked.BODID								= LocalBODFormattedID
												invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
										else
											invoke Update FSMInboundBODTrackerRel
												invoked.Status								= 3
												invoked.CloseDate							= system current timestamp
												invoked.BODID								= LocalBODFormattedID	    	
					                    		invoked.BODXML								= ChartOfAccountsCleanDocIDXMLBOD
					else
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "ChartOfAccounts"				
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Reference1				= ReportingChart
							invoked.Reference2				= GeneralLedgerChartAccount
							initialize invoked.Error			
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker = FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.Reference1				= ReportingChart
							invoked.Reference2				= GeneralLedgerChartAccount
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendChartOfAccountsNativeLPL
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= ChartOfAccountsXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODID									= DerivedBODID
							invoked.BODXML									= ChartOfAccountsXMLBOD
#endif					                    		
		
		TriggerChartOfAccountBOD is an Instance Action
			restricted
			Action Rules

				if (FinanceEnterpriseGroup.BODTrigger and (!LocalBODTriggered))
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							LocalActionCode = LocalActionCode.Update 


							if (bod id.VariationID = 0)
								LocalActionCode = LocalActionCode.Create
							else
								if (action type.Delete)
									LocalActionCode = LocalActionCode.Delete
							LocalBODTriggered = true

							increment bod id.VariationID
							include ChartOfAccountRules



		UpdateReportChartAccount is an Instance Action
			restricted
			Parameters
				PrmTranslationCode 			is a GeneralLedgerTranslationCode
					default label is "TranslationCode"
				PrmRevalue 					is Boolean
					default label is "Revalue"
				PrmRequireProject			is Boolean
					default label is "Require_<FinanceEnterpriseGroup.ProjectLabel>"
				PrmXbrlTag		 			is Alpha 60
					default label is "XbrlTag"
				PrmUnrealizedGainAccount	is like GeneralLedgerChartAccount
					default label is "UnrealizedGainAccount"
				PrmUnrealizedLossAccount	is like GeneralLedgerChartAccount
					default label is "UnrealizedLossAccount"
				PrmTranslationGainAccount	is like GeneralLedgerChartAccount
					default label is "TranslationGainAccount"
				PrmTranslationLossAccount	is like GeneralLedgerChartAccount
					default label is "TranslationLossAccount"
				PrmCloseToAccount			is like GeneralLedgerChartAccount
					default label is "CloseToAccount"
				RetainDefaultValues 		is Boolean
			Action Rules
				if (!RetainDefaultValues)
					TranslationCode			= PrmTranslationCode
					Revalue					= PrmRevalue
					RequireProject			= PrmRequireProject
					XbrlTag					= PrmXbrlTag
					UnrealizedGainAccount	= PrmUnrealizedGainAccount
					UnrealizedLossAccount	= PrmUnrealizedLossAccount
					TranslationGainAccount	= PrmTranslationGainAccount
					TranslationLossAccount	= PrmTranslationLossAccount
					CloseToAccount			= PrmCloseToAccount
			Exit Rules
				if (ChartType.Summary)
					invoke UpdateChartAccount GeneralLedgerChartAccount
						if (!RetainDefaultValues)
							invoked.PrmTranslationCode			= TranslationCode
							invoked.PrmRevalue					= Revalue
							invoked.PrmRequireProject			= RequireProject
							invoked.PrmXbrlTag					= XbrlTag
							invoked.PrmUnrealizedGainAccount	= UnrealizedGainAccount
							invoked.PrmUnrealizedLossAccount	= UnrealizedLossAccount
							invoked.PrmTranslationGainAccount	= TranslationGainAccount
							invoked.PrmTranslationLossAccount	= TranslationLossAccount
							invoked.PrmCloseToAccount			= CloseToAccount
						invoked.RetainDefaultValues			= RetainDefaultValues

		Delete is a Delete Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				if (FinanceEnterpriseGroup.BODTrigger)
					LocalActionCode = LocalActionCode.Delete
					increment bod id.VariationID
					include ChartOfAccountRules



			Exit Rules
				if (ReportingChart != FinanceEnterpriseGroup.UnusedAccountChart
				and NotUsedInAChart)
					invoke AddAccountToUnusedChart FinanceEnterpriseGroup.UnusedAccountChart
						invoked.GeneralLedgerChartAccount = GeneralLedgerChartAccount

		DeleteAll is a Set Action 
			restricted 
			Parameters 
				PrmFinanceEnterpriseGroup    is a FinanceEnterpriseGroup
				PrmReportingChart 			 is a ReportingChart 
			
			Instance Selection 
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart	 	  = PrmReportingChart)
						
			Action Rules 
				Instance Rules
					invoke Delete
		
		UpdateDisplayOrder is an Instance Action
			restricted
			Parameters
				PrmDisplayOrder		 is Numeric 6
					default label is "DisplayOrder"
					
			Parameter Rules
				PrmDisplayOrder
					required
			
			Action Rules
				DisplayOrder = PrmDisplayOrder
				
		CopyChartAccounts is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart				is a ReportingChart
					default label is "ReportingChart"
				PrmNewChart						is a ReportingChart
					default label is "NewChart"

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart	 	  = PrmReportingChart)

			Sort Order
				FinanceEnterpriseGroup
				ReportingChart
				GeneralLedgerChartAccount

			Local Fields
				LocalNewReportingChartAccount		is a ReportingChartAccount view
				
			Action Rules

				Instance Rules
					LocalOldChartSequence = PrmReportingChart.ChartSequence
					LocalNewChartSequence = PrmNewChart.ChartSequence				
					LocalCopyAccount   	  = ParentChartAccount
					LocalParentAccount 	  = DerivedNewAccount
					if (!ChartType.Posting)
						LocalCopyAccount  		= GeneralLedgerChartAccount
						LocalNewAccount   		= DerivedNewAccount
						if (!LocalNewAccount exists)
							invoke CreateCopy GeneralLedgerChartAccount
								fill in fields from LocalCopyAccount
								invoked.GeneralLedgerChartAccount = LocalNewAccount
								invoked.TopNode                   = PrmNewChart.ChartAccountNode
					else
						LocalNewAccount         = GeneralLedgerChartAccount

					LocalCopyAccount  			= ParentChartAccount
					if (!LocalParentAccount exists)
						invoke CreateCopy GeneralLedgerChartAccount
							fill in fields from LocalCopyAccount
							invoked.GeneralLedgerChartAccount = LocalParentAccount
							invoked.TopNode                   = PrmNewChart.ChartAccountNode
							
					invoke Create ReportingChartAccount
						assign result to LocalNewReportingChartAccount
						fill in fields from this instance
							except invoked.CloseToAccount
						invoked.ReportingChart				= PrmNewChart
						invoked.ParentChartAccount 			= LocalParentAccount
						invoked.GeneralLedgerChartAccount   = LocalNewAccount
						invoked.ChartAccountNode   			= PrmNewChart.ChartAccountNode								
					if (CloseToAccount entered)
						invoke UpdateCloseToAccount LocalNewReportingChartAccount.ReportingChartAccount
							invoked.PrmCloseToAccount   = CloseToAccount
	
		UpdateCloseToAccount is an Instance Action
			restricted
			Parameters
				PrmCloseToAccount			is like GeneralLedgerChartAccount
					default label is "CloseToAccount"
				
			Action Rules
				CloseToAccount = PrmCloseToAccount
											
		BuildShadowFile is a Set Action
			restricted

			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				PrmAccount					is a GeneralLedgerChartAccount
					default label is "Account"
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart
				and  ((PrmAccount entered
				and    GeneralLedgerChartAccount = PrmAccount)
				or   (!PrmAccount entered
				and    GeneralLedgerChartAccount entered)))
				
			Action Rules
			
				Set Rules
						
				Instance Rules
					
					LocalReportChartAccount		   = GeneralLedgerChartAccount
					TopNodeFound   				   = false
					if (PrmAccount entered)
						invoke Delete GLChartAccountShadowRel
					while (!TopNodeFound)
						invoke Create GLChartAccountShadow
							invoked.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
							invoked.ReportingChart	  			   	   = ReportingChart
							invoked.GeneralLedgerChartAccount		   = GeneralLedgerChartAccount
							invoked.ChartType						   = ChartType
							invoked.SummaryGeneralLedgerChartAccount   = LocalReportingChartAccountRel.ParentChartAccount
						if (!LocalReportingChartAccountRel.ParentChartAccount.ChartType.Summary)	
							TopNodeFound = true
						else
							LocalReportChartAccount = LocalReportingChartAccountRel.ParentChartAccount
													
					if (ChartType.Summary)
						invoke SetLevel

		ClearBudgetSection1 is a Set Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart
				and    BudgetSection1        != 0)
			Action Rules
			
				Instance Rules
					initialize BudgetSection1

		ClearBudgetSection2 is a Set Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart
				and    BudgetSection2        != 0)
			Action Rules
			
				Instance Rules
					initialize BudgetSection2

		ClearBudgetSection3 is a Set Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart
				and    BudgetSection3        != 0)
			Action Rules
			
				Instance Rules
					initialize BudgetSection1

		SetLevel is an Instance Action
			restricted
			
			Action Rules
				if (ChartType.Summary)
					LocalReportChartAccount = GeneralLedgerChartAccount
					LocalLevel				= 0
					while (!LocalReportChartAccount = ReportingChart.ChartAccountNode)
						LocalReportChartAccount	= LocalReportingChartAccountRel.ParentChartAccount
						LocalLevel			    += 1
					invoke UpdateLevel GeneralLedgerChartAccount
						invoked.PrmLevel 		 = LocalLevel
						invoked.PrmParentAccount = ParentChartAccount
																			


















		UpdateIsGainLossAccount is an Instance Action
			restricted
			Action Rules
				IsGainLossAccount	= true
				invoke UpdateGLChartAccount GeneralLedgerChartAccount
	 				invoked.UsedByATransaction		= true

		UpdateBlankCurrencyAccount is a Set Action
			restricted

			
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart
				and    ChartType.Posting
				and   (!UnrealizedGainAccount entered
				or     !UnrealizedLossAccount entered
				or     !TranslationGainAccount entered
				or     !TranslationLossAccount entered))
				
			Action Rules
			
				Set Rules

				Instance Rules
					if (!UnrealizedGainAccount entered)
						UnrealizedGainAccount		= DerivedUnrealizedGainAccount
					if (!UnrealizedLossAccount entered)
						UnrealizedLossAccount		= DerivedUnrealizedLossAccount
					if (!TranslationGainAccount entered)
						TranslationGainAccount		= DerivedTranslationGainAccount
					if (!TranslationLossAccount entered)
						TranslationLossAccount		= DerivedTranslationLossAccount




































		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		MarkBudgetSection is an Instance Action
			restricted
			Parameters
				PrmSection          is Numeric 1
					default label is "Section"
				PrmCounter		    is Numeric 4
					default label is "Counter"
			Action Rules			
				if (PrmSection = 1)
					BudgetSection1 = PrmCounter
				else
				if (PrmSection = 2)
					BudgetSection2 = PrmCounter
				else
				if (PrmSection = 3)
					BudgetSection3 = PrmCounter
				else
					constraint (false)
						"InternalError;InvalidBudgetSectionAssignment"

		ExportToUpload is a Set Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart is a ReportingChart
					default label is "ReportingChart"
				PrmGeneralLedgerChartAccountGroup   is a GeneralLedgerChartAccount group
					default label is "CustomGroup"
	    				
	    	Instance Selection
	    		where (FinanceEnterpriseGroup     = PrmFinanceEnterpriseGroup
	    		and	   ReportingChart 			  = PrmReportingChart
	    		and    GeneralLedgerChartAccount within PrmGeneralLedgerChartAccountGroup
	    		and	   !ChartType.Node)
							    		
	    	Action Rules
	    	
	    		Instance Rules
	    		
	    			invoke ExportToUpload GeneralLedgerChartAccount
						invoked.PrmFinanceEnterpriseGroup         = FinanceEnterpriseGroup
						invoked.PrmReportingChart			      = ReportingChart	    			
	    				invoked.SingleRecordOnly = true
	    				
		BODDataInitialLoadChartOfAccountCriteria1 is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmFromReportingChart				is a ReportingChart
				PrmToReportingChart					is a ReportingChart
				PrmFromGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
				PrmToGeneralLedgerChartAccount		is a GeneralLedgerChartAccount
			Parameter Rules
			Instance Selection			
				where  (((PrmFinanceEnterpriseGroup entered
				and		  PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup)
				or		  PrmFinanceEnterpriseGroup not entered)	
				and    ((PrmFromReportingChart entered
				and		 PrmFromReportingChart <= ReportingChart)
				or		 PrmFromReportingChart not entered)			
				and    ((PrmToReportingChart entered
				and		 PrmToReportingChart >= ReportingChart)
				or		 PrmToReportingChart not entered))	
		
			Sort Order
				ReportingChart
				GeneralLedgerChartAccount
			
			Local Fields
			
			Action Rules										
						
				Instance Rules	
					if (FinanceEnterpriseGroup.BODTrigger)
						LocalActionCode = LocalActionCode.Create
						increment bod id.VariationID
						include ChartOfAccountRules




		AutoResequenceDisplayOrder is an Instance Action
			restricted
			Parameters
				PrmDisplayOrder		is Numeric 6
			Local Fields
				NewDisplayOrder		is Numeric 6
			Action Rules		
				PrmDisplayOrder = DisplayOrder

				for each NextHighestSiblingAccountRel
					if (NextHighestSiblingAccountRel exists)
						each.NewDisplayOrder = each.DisplayOrder +1
						if (each.NewDisplayOrder <= PrmDisplayOrder)
							each.NewDisplayOrder = each.DisplayOrder + 1
					else
						each.NewDisplayOrder = (last SiblingsRel.DisplayOrder)

					if (each.NewDisplayOrder not entered)
						each.NewDisplayOrder = each.DisplayOrder

					invoke UpdateDisplayOrder each
						invoked.PrmDisplayOrder		= each.NewDisplayOrder
						
#ifdef module reconciliation		
		ValidateStructureRules is an Instance Action
			default label is untranslatable
			restricted
			refresh and lock this instance
			Parameters
				PrmTransactionCodeBlock 		is like TransactionCodeBlock
				
			Parameter Rules
				PrmTransactionCodeBlock
					required
					
			Local Fields
				BypassUnitAndAmountEdit
				PostingDate
				LocalValidateEditCodeBlockRelationDetail is Numeric 1
			Action Rules
				LocalTransactionCodeBlock	             = PrmTransactionCodeBlock
				BypassUnitAndAmountEdit                  = true
				PostingDate	                             = current corporate date
				LocalTransactionCodeBlock.LocalEditMode  = true
				LocalValidateEditCodeBlockRelationDetail = LocalTransactionCodeBlock.EditCodeBlockRelationDetail
										
		CreateReconciliationAccounts is a Set Action
			restricted
			Parameters
				PrmChartAccountRule		 		  is a GeneralLedgerChartAccount group
				PrmReconcileFrequency			  is a ReconcileFrequency
				PrmPeriodWithinQuarter			  is a PeriodWithinQuarter
				PrmAccountType					  is a ReconciliationAccountType
				PrmCashManagementAccount		  is a CashManagementAccount
				PrmReconciliationAccountGroup	  is a ReconciliationAccountGroup
				PrmRisk							  is Numeric 1
					States
						Low			value is 0
						Medium		value is 1
						High		value is 2
				PrmPriority						  is Numeric 1
					States
						Low			value is 0
						Medium		value is 1
						High		value is 2
				PrmCloseTask					  is a CloseTask
				PrmFinanceTeam					  is a FinanceTeam
				PrmFinanceTeamMember			  is a FinanceTeamMember
				PrmRequiresApproval				  is Boolean
				PrmApprovalCode					  is an ApprovalCode
				PrmRequireSupportingDoco		  is Boolean
				PrmReconciliationPolicy			  is a ReconciliationPolicy
				PrmReconciliationManagementGroup  is a ReconciliationManagementGroup
				PrmReportingChart 				  is a ReportingChart
	    		PrmReconciliationAccountStructure is a ReconciliationAccountStructure
	    		PrmAccountingEntity				  is a AccountingEntity
	    		PrmCloseConfiguration             is a GeneralLedgerCloseConfiguration
	    		PrmAccountingUnit				  is a AccountingUnit
	    		PrmReconciliationLevel            is a StructureRow
	    		PrmProject						  is a Project
	    		PrmFinanceDimension1			  is a FinanceDimension1
	    		PrmFinanceDimension2			  is a FinanceDimension2
	    		PrmFinanceDimension3			  is a FinanceDimension3
	    		PrmFinanceDimension4			  is a FinanceDimension4
	    		PrmFinanceDimension5			  is a FinanceDimension5
	    		PrmFinanceDimension6			  is a FinanceDimension6
	    		PrmFinanceDimension7			  is a FinanceDimension7
	    		PrmFinanceDimension8			  is a FinanceDimension8
	    		PrmFinanceDimension9			  is a FinanceDimension9
	    		PrmFinanceDimension10			  is a FinanceDimension10
				BypassActiveCodeBlockEdit
									
	    	Instance Selection
	    		where (FinanceEnterpriseGroup     = PrmReconciliationManagementGroup.FinanceEnterpriseGroup
	    		and	   ReportingChart 			  = PrmReportingChart
	    		and    ChartType.Posting
	    		and    GeneralLedgerChartAccount.IsReconcilable
	    		and   (!PrmChartAccountRule entered
				or 	   GeneralLedgerChartAccount within PrmChartAccountRule)
				and   (PrmAccountingEntity = PrmAccountingEntity 
				and   (PrmReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity
				or    (PrmAccountingUnit entered
		        and    PrmAccountingUnit = PrmAccountingUnit)
		        or    (PrmProject entered
		        and    PrmProject = PrmProject)
		        or    (PrmFinanceDimension1 entered
		        and    PrmFinanceDimension1 = PrmFinanceDimension1)
		        or    (PrmFinanceDimension2 entered
		        and    PrmFinanceDimension2 = PrmFinanceDimension2)
		        or    (PrmFinanceDimension3 entered
		        and    PrmFinanceDimension3 = PrmFinanceDimension3)
		        or    (PrmFinanceDimension4 entered
		        and    PrmFinanceDimension4 = PrmFinanceDimension4)
		        or    (PrmFinanceDimension5 entered
		        and    PrmFinanceDimension5 = PrmFinanceDimension5)
		        or    (PrmFinanceDimension6 entered
		        and    PrmFinanceDimension6 = PrmFinanceDimension6)
		        or    (PrmFinanceDimension7 entered
		        and    PrmFinanceDimension7 = PrmFinanceDimension7)
		        or    (PrmFinanceDimension8 entered
		        and    PrmFinanceDimension8 = PrmFinanceDimension8)
		        or    (PrmFinanceDimension9 entered
		        and    PrmFinanceDimension9 = PrmFinanceDimension9)
		        or    (PrmFinanceDimension10 entered
		        and    PrmFinanceDimension10 = PrmFinanceDimension10))))
			
			Sort Order is AccountByChartType
			
			Local Fields
				TransactionError is Boolean
				TransactionErrorMessage				is Alpha 150
								    		
	    	Action Rules
	    	
	    		Instance Rules
	    			LocalReconciliationManagementGroup  = PrmReconciliationManagementGroup
	    			LocalAccountingEntity               = PrmAccountingEntity
	    			LocalReconciliationAccountStructure = PrmReconciliationAccountStructure
	    			initialize TransactionError
	    			initialize TransactionErrorMessage
					if(PrmReconciliationLevel.Type.AccountingEntity)
						if (!ReconciliationAccountAccountingEntityRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		    = PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
						            invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
									invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if(PrmReconciliationLevel.Type.AccountingUnit)
						LocalAccountingUnit	 = PrmAccountingUnit
						if (!ReconciliationAccountAccountingUnitRel exists)
								invoke ValidateStructureRules
									resume on error
										TransactionError										= true
										TransactionErrorMessage 								= error message
									invoked.PrmTransactionCodeBlock.ToAccountingEntity		    = PrmAccountingEntity
									invoked.PrmTransactionCodeBlock.AccountingUnit			    = PrmAccountingUnit
									invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
									invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
								if (!TransactionError)
									invoke Create ReconciliationAccount
										fill in fields from this instance
										invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
										invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
							            invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
										invoked.ReconciliationCodeBlock.AccountingUnit				= PrmAccountingUnit
										invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
										invoked.CloseConfiguration									= PrmCloseConfiguration
										invoked.ReconcileFrequency									= PrmReconcileFrequency
										invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
										invoked.ReconciliationAccountType							= PrmAccountType
										invoked.CashManagementAccount								= PrmCashManagementAccount
										invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
										invoked.Risk												= PrmRisk
										invoked.Priority											= PrmPriority
										invoked.CloseTask											= PrmCloseTask
										invoked.FinanceTeam											= PrmFinanceTeam
										invoked.AssignedResource 									= PrmFinanceTeamMember
										invoked.RequiresApproval									= PrmRequiresApproval
										invoked.ApprovalCode										= PrmApprovalCode
										invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
							            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
							            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
							            	invoked.NewAccount										= true
							            invoked.Active												= true
							            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if(PrmReconciliationLevel.Type.Project)
						LocalProject      =  PrmProject
						if (!ReconciliationAccountProjectRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		    = PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.Project		                = PrmProject
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.Project						= PrmProject
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension1)
						LocalDimensionCodeValue = PrmFinanceDimension1
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										=  true
									TransactionErrorMessage 								=  error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		    =  PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension1		    =  PrmFinanceDimension1
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	=  GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						=  PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension1			= PrmFinanceDimension1
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension2)
						LocalDimensionCodeValue = PrmFinanceDimension2
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 							 	= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		   	= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension2		   	= PrmFinanceDimension2
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount  	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger					   	= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension2			= PrmFinanceDimension2
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension3)
						LocalDimensionCodeValue = PrmFinanceDimension3
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										=  true
									TransactionErrorMessage 								=  error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		    =  PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension3		    =  PrmFinanceDimension3
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	=  GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						=  PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension3			= PrmFinanceDimension3
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension4)
						LocalDimensionCodeValue = PrmFinanceDimension4
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity		  	= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension4		  	= PrmFinanceDimension4
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger					  	= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension4			= PrmFinanceDimension4
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension5)
						LocalDimensionCodeValue = PrmFinanceDimension5
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension5			= PrmFinanceDimension5
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension5			= PrmFinanceDimension5
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension6)
						LocalDimensionCodeValue = PrmFinanceDimension6
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension6			= PrmFinanceDimension6
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension6			= PrmFinanceDimension6
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension7)
						LocalDimensionCodeValue = PrmFinanceDimension7
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension7			= PrmFinanceDimension7
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension7			= PrmFinanceDimension7
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension8)
						LocalDimensionCodeValue = PrmFinanceDimension8
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension8			= PrmFinanceDimension8
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension8			= PrmFinanceDimension8
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension9)
						LocalDimensionCodeValue = PrmFinanceDimension9
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension9			= PrmFinanceDimension9
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension9			= PrmFinanceDimension9
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
					else
					if (PrmReconciliationLevel.Type.Dimension10)
						LocalDimensionCodeValue = PrmFinanceDimension10
						if (!ReconciliationAccountDimensionRel exists)
							invoke ValidateStructureRules
								resume on error
									TransactionError										= true
									TransactionErrorMessage 								= error message
								invoked.PrmTransactionCodeBlock.ToAccountingEntity			= PrmAccountingEntity
								invoked.PrmTransactionCodeBlock.FinanceDimension10			= PrmFinanceDimension10
								invoked.PrmTransactionCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
								invoked.PrmTransactionCodeBlock.Ledger						= PrmReconciliationManagementGroup.FinanceEnterpriseGroup.CoreLedger
							if (!TransactionError)
								invoke Create ReconciliationAccount
									fill in fields from this instance
									invoked.ReconciliationManagementGroup 						= PrmReconciliationManagementGroup
									invoked.ReconciliationAccountStructure 						= PrmReconciliationAccountStructure
									invoked.ReconciliationCodeBlock.AccountingEntity			= PrmAccountingEntity
						            invoked.ReconciliationCodeBlock.FinanceDimension10			= PrmFinanceDimension10
						            invoked.ReconciliationCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						            invoked.CloseConfiguration									= PrmCloseConfiguration
									invoked.ReconcileFrequency									= PrmReconcileFrequency
									invoked.PeriodWithinQuarter									= PrmPeriodWithinQuarter
									invoked.ReconciliationAccountType							= PrmAccountType
									invoked.CashManagementAccount								= PrmCashManagementAccount
									invoked.ReconciliationAccountGroup							= PrmReconciliationAccountGroup
									invoked.Risk												= PrmRisk
									invoked.Priority											= PrmPriority
									invoked.CloseTask											= PrmCloseTask
									invoked.FinanceTeam											= PrmFinanceTeam
									invoked.AssignedResource 									= PrmFinanceTeamMember
									invoked.RequiresApproval									= PrmRequiresApproval
									invoked.ApprovalCode										= PrmApprovalCode
									invoked.RequireSupportingDoco								= PrmRequireSupportingDoco
						            invoked.ReconciliationPolicy								= PrmReconciliationPolicy
						            if (PrmReconciliationAccountStructure.HaveCreatedAccounts)
						            	invoked.NewAccount										= true
						            invoked.Active												= true
						            invoked.BypassActiveCodeBlockEdit		  					= BypassActiveCodeBlockEdit
#endif
FileCreationLogic.ReportingChartAccount is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
#ifdef module filecreation
		LocalFileCreationSetup		is like FileCreationSetup
#endif
        LocalGeneralLedgerChartAccount  is like GeneralLedgerChartAccount
					
	Relations

#ifdef module filecreation
		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalFinanceEnterpriseGroup
				related.Key2					= LocalGeneralLedgerChartAccount

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalFinanceEnterpriseGroup
				related.Key2					= LocalGeneralLedgerChartAccount

#endif
		
	Derived Fields
		GeneralLedgerChartAccountHash is a NativeField
			type is Numeric 8
			restricted
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"ReportingChartAccount_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Sort Order is primary
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation
				FileCreationSetupPrm	is a FileCreationSetup
#endif
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InGeneralLedgerChartAccountGroup					is Boolean
#ifdef module filecreation
				LocalGeneralLedgerChartAccountGroupSelection		is a GeneralLedgerChartAccount group in subject FileCreationGeneralLedgerChartAccount
#endif

			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      GeneralLedgerChartAccountHash % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
#ifdef module filecreation
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup			= FileCreationSetupPrm
					LocalGeneralLedgerChartAccount	= GeneralLedgerChartAccount
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)
						LocalGeneralLedgerChartAccountGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalGeneralLedgerChartAccountGroupSelection entered)
							InGeneralLedgerChartAccountGroup = false
							if (GeneralLedgerChartAccount within LocalGeneralLedgerChartAccountGroupSelection)
								InGeneralLedgerChartAccountGroup = true

						if (LocalGeneralLedgerChartAccountGroupSelection not entered
						or	InGeneralLedgerChartAccountGroup)
												
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= FinanceEnterpriseGroup
								invoked.Key2				= GeneralLedgerChartAccount
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
#endif
