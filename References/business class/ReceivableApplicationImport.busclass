ReceivableApplicationImport is a BusinessClass
	owned by ar
	prefix is IAP
	classic name is ARIAPPLIED

	Ontology
		symbolic key is ReceivableApplicationImport
			classic set name is IAPSET1
			classic name for ReceivableApplicationImport.TransactionCompany is COMPANY
			classic name for ReceivableApplicationImport.TransactionCustomer is CUSTOMER
			classic name for ReceivableApplicationImport.ApplicationSequence is APP-SEQ
			classic name for Company is CR-COMPANY
			classic name for Customer is CR-CUSTOMER

	Patterns
		implements StaticJava
		disable AuditIndex
		disable Auditing 
		disable EffectiveDated
		disable DataTranslations

	Persistent Fields
		RunGroup
		CreditAppliedAmount					is an InternationalAmount
			classic name is CR-ORIG-AP-AMT
		BaseCreditAppliedAmount				is an InternationalAmount
			classic name is CR-APP-AMT
			precision is Company.Currency.NumberOfDecimals
		BaseDebitAppliedAmount				is an InternationalAmount
			classic name is APPLD-AMT
			precision is Company.Currency.NumberOfDecimals
		BaseAppliedAmount					is an InternationalAmount
			classic name is BASE-APP-AMT
			precision is Company.Currency.NumberOfDecimals
		GeneralLedgerDate					is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		ReceivableOperator
			classic name is OPR-CODE
		ErrorMessage						is Alpha 150
		InterfaceRun						is a ReceivablesInterfaceResult
			delete ignored

	Transient Fields
		TransientReceivableOperator			is like ReceivableOperator
			derive value from ReceivableOperator
		TransientFunctionalType  	is AlphaUpper 1  
			States
				CreditMemo 			    value is C
				DebitMemo  			    value is D
				Invoice    			    value is I
				CustomerPayment		    value is P
					default label is "CustomerPayment"
				BillOfExchangePayment	value is B
					default label is "BillOfExchangePayment"
			derive value from ReceivableApplicationImport.TransType
		TransientFunctionalCreditType  	is AlphaUpper 1  
			States
				CreditMemo 			    value is C
				DebitMemo  			    value is D
				Invoice    			    value is I
				CustomerPayment		    value is P
					default label is "CustomerPayment"
				BillOfExchangePayment	value is B
					default label is "BillOfExchangePayment"
			derive value from ReceivableApplicationImport.CrType



	Local Fields
		LocalReceivablesInterfaceResult		is a ReceivablesInterfaceResult
		ConvertedApplication				is a ReceivableApplication view


		LocalDebitCustomer					is like Customer
		LocalCreditCustomer					is like Customer

		LocalErrorOccurred					is Boolean


		


	Derived Fields
		Msg212 is a MessageField
			restricted
			"AppliedAmountRequiredIfCreditTransactionNumberEntered"	

		Msg232 is a MessageField
			restricted
			"BaseDebitAppliedAmountCannotBeNegative"
		Msg215 is a MessageField
			restricted
			"CreditTransactionTypeMustBe'P'Or'C'"
		Msg345 is a MessageField
			restricted
			"AppliedAmountEntered-CreditFieldsRequired"
		Msg248 is a MessageField
			restricted
			"OnlyPaymentsCanBeAppliedToCreditMemos"
		Msg218 is a MessageField
			restricted
			"PaymentOrCreditDoesNotExist"
		Msg257 is a MessageField
			restricted
			"ApplicationConversionNotAllowedForAnUnreleasedPayment"	//was "UnreleasedPaymentNotAllowedForApplicationConversion"
		Msg258 is a MessageField	
			restricted
			"ApplicationConversionNotAllowedForAFullyAppliedPayment"
		Msg259 is a MessageField	
			restricted
			"ApplicationConversionNotAllowedForAClosedPayment"
		Msg260 is a MessageField	
			restricted
			"ApplicationConversionNotAllowedForAHistoricalPayment"
		Msg223 is a MessageField
			restricted
			"AppliedAmountRequiredIfCreditTransactionNumberEntered"
		Msg221 is a MessageField
			restricted
			"AdjustRecordRequiredIfNoAppliedAmountEntered"
		Msg222 is a MessageField
			restricted
			"AppliedAmountMustBeEnteredIfThereIsNoOverShortAdjustment"
		Msg206 is a MessageField						
			restricted
			"TransactionDoesNotExist"
		Msg261 is a MessageField						
			restricted
			"ApplicationAmountPlusSumOfAdjustmentAmountsCannotBeGreaterThanTransactionOpenAmount;TransactionType<ReceivableApplicationImport.TransType>Transaction<ReceivableApplicationImport.Invoice>"
		Msg262 is a MessageField						
			restricted
			"ApplicationAmountPlusSumOfPaymentWriteoffAdjustmentAmountsCannotBeGreaterThanPaymentOpenAmount;Payment<ReceivableApplicationImport.CrNbr>"
		Msg263 is a MessageField						
			restricted
			"ApplicationAmountPlusSumOfCreditMemoWriteoffAdjustmentAmountsCannotBeGreaterThanCreditMemoOpenAmount;CreditMemo<ReceivableApplicationImport.CrNbr>"

		Msg264 is a MessageField						
			restricted
			"ApplicationAmountCannotBeEnteredForFullyApplied,Closed,OrHistoricalInvoiceTransaction"
		Msg265 is a MessageField						
			restricted
			"ApplicationAmountCannotBeEnteredForFullyApplied,Closed,OrHistoricalPaymentTransaction"
		Msg266 is a MessageField						
			restricted
			"ApplicationAmountCannotBeEnteredForFullyApplied,Closed,OrHistoricalCreditMemoTransaction"

		DerivedDebitCustomer is a DerivedField
			type is like Customer
			if  (ReceivableApplicationImport.TransactionCustomer not entered				
			and  DebitCustomerMappingTableInterfaceRel exists)
				return DebitCustomerMappingTableInterfaceRel.Customer
			else
				return ReceivableApplicationImport.TransactionCustomer						

		DerivedCreditCustomer is a DerivedField
			type is like Customer
			if  (Customer not entered														
			and  CreditCustomerMappingTableInterfaceRel exists)
				return CreditCustomerMappingTableInterfaceRel.Customer
			else
				return Customer																

		AdjustmentCountForRAI is a DerivedField
			type is Numeric 10
			return instance count of AdjustmentImportRel


	Field Rules
		RunGroup
			required
			
		ReceivableOperator
			if (Company.TransactionOperatorRequired)
				constraint (ReceivableOperatorRel exists)
					"OperatorDoesNotExist"

		TransientReceivableOperator
			ReceivableOperator = TransientReceivableOperator
			if (Company.TransactionOperatorRequired)
				constraint (TransientReceivableOperator entered)
					"OperatorRequired"	
				constraint (ReceivableOperatorRel exists)
					"OperatorDoesNotExist"
			if (TransientReceivableOperator not entered)
				default to actor

	Conditions

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		InError
			when (ErrorMessage entered)

	Relations

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		ReceivableOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					= Company
				related.ReceivableOperator		= ReceivableOperator

		CreditCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					= ReceivableApplicationImport.TransactionCompany
				related.Customer				= LocalCreditCustomer

		ReceivableInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 = ReceivableApplicationImport.TransactionCompany				
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableApplicationImport.TransType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableApplicationImport.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableApplicationImport.PaymentSeq

		ReceivableInvoiceDetailCreditRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses Set5
				related.Company												 = Company									
				related.Customer											 = LocalCreditCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableApplicationImport.CrType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableApplicationImport.CrNbr
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableApplicationImport.CrPymntSeq

		ReceivablePaymentRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set7
				related.PaymentNumber					= ReceivableApplicationImport.Invoice
				related.Customer						= LocalDebitCustomer
				related.Company							= ReceivableApplicationImport.TransactionCompany				
				related.TypeOfPayment					= ReceivableApplicationImport.TransType

		ReceivablePaymentCreditRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set7
				related.PaymentNumber					= ReceivableApplicationImport.CrNbr
				related.Customer						= LocalCreditCustomer
				related.Company							= Company														
				related.TypeOfPayment					= ReceivableApplicationImport.CrType

		CreditPaymentReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditCustomer	= LocalCreditCustomer
				related.CreditTransaction.CreditType		= ReceivableApplicationImport.CrType
				related.CreditTransaction.CreditNumber		= ReceivableApplicationImport.CrNbr

		CreditAdjustmentImportRel
			one-to-many relation to ReceivableApplicationAdjustmentImport
			Field Mapping uses symbolic key
				related.Company															= Company						
			Instance Selection
				where (related.ReceivableApplicationAdjustmentImport.Customer			= Customer
				and	related.ReceivableApplicationAdjustmentImport.InterfacedCustomer	= ReceivableApplicationImport.InterfacedCustomer		
				and	related.ReceivableApplicationAdjustmentImport.TransType				= ReceivableApplicationImport.CrType
				and	related.ReceivableApplicationAdjustmentImport.Invoice				= ReceivableApplicationImport.CrNbr
				and	related.ReceivableApplicationAdjustmentImport.PaymentSeq			= ReceivableApplicationImport.CrPymntSeq
				and	related.ReceivableApplicationAdjustmentImport.ApplicationSequence	= ReceivableApplicationImport.ApplicationSequence)

		AdjustmentImportRel
			one-to-many relation to ReceivableApplicationAdjustmentImport
			Field Mapping uses symbolic key
				related.Company															= ReceivableApplicationImport.TransactionCompany		
			Instance Selection
				where (related.ReceivableApplicationAdjustmentImport.Customer			= ReceivableApplicationImport.TransactionCustomer
				and	related.ReceivableApplicationAdjustmentImport.InterfacedCustomer	= ReceivableApplicationImport.InterfacedTransactionCustomer		
				and	related.ReceivableApplicationAdjustmentImport.TransType				= ReceivableApplicationImport.TransType
				and	related.ReceivableApplicationAdjustmentImport.Invoice				= ReceivableApplicationImport.Invoice
				and	related.ReceivableApplicationAdjustmentImport.PaymentSeq			= ReceivableApplicationImport.PaymentSeq
				and	related.ReceivableApplicationAdjustmentImport.ApplicationSequence	= ReceivableApplicationImport.ApplicationSequence)

		AdjustmentImportOverShortRel
			one-to-many relation to ReceivableApplicationAdjustmentImport
			Field Mapping uses symbolic key
				related.Company															= ReceivableApplicationImport.TransactionCompany			
			Instance Selection
				where (related.ReceivableApplicationAdjustmentImport.Customer			= ReceivableApplicationImport.TransactionCustomer
				and	related.ReceivableApplicationAdjustmentImport.InterfacedCustomer	= ReceivableApplicationImport.InterfacedTransactionCustomer
				and	related.ReceivableApplicationAdjustmentImport.TransType				= ReceivableApplicationImport.TransType
				and	related.ReceivableApplicationAdjustmentImport.Invoice				= ReceivableApplicationImport.Invoice
				and	related.ReceivableApplicationAdjustmentImport.PaymentSeq			= ReceivableApplicationImport.PaymentSeq
				and	related.ReceivableApplicationAdjustmentImport.ApplicationSequence	= ReceivableApplicationImport.ApplicationSequence
				and	related.ReceivableReasonRel.ReceivableAdjustmentReasonType.OverShort)
	
		CreditAdjustmentImportOverShortRel							
			one-to-many relation to ReceivableApplicationAdjustmentImport
			Field Mapping uses symbolic key
				related.Company															= Company
			Instance Selection
				where (related.ReceivableApplicationAdjustmentImport.Customer			= Customer
				and	related.ReceivableApplicationAdjustmentImport.InterfacedCustomer	= ReceivableApplicationImport.InterfacedCustomer
				and	related.ReceivableApplicationAdjustmentImport.TransType				= ReceivableApplicationImport.CrType
				and	related.ReceivableApplicationAdjustmentImport.Invoice				= ReceivableApplicationImport.CrNbr
				and	related.ReceivableApplicationAdjustmentImport.PaymentSeq			= ReceivableApplicationImport.CrPymntSeq
				and	related.ReceivableApplicationAdjustmentImport.ApplicationSequence	= ReceivableApplicationImport.ApplicationSequence
				and	related.ReceivableReasonRel.ReceivableAdjustmentReasonType.OverShort)
		
		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult		= LocalReceivablesInterfaceResult

		DebitCustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= ReceivableApplicationImport.TransactionCompany.CustomerGroupField.CustomerGroup		
				related.InterfacedCustomer			= ReceivableApplicationImport.InterfacedTransactionCustomer								

		CreditCustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup				
				related.InterfacedCustomer			= ReceivableApplicationImport.InterfacedCustomer		

	Sets
		ByInterfaceRun
			Sort Order
				InterfaceRun
				Company
				Customer
				ReceivableApplicationImport.InterfacedCustomer
				ReceivableApplicationImport.TransactionCompany
				ReceivableApplicationImport.TransactionCustomer
				ReceivableApplicationImport.InterfacedTransactionCustomer
				ReceivableApplicationImport.CrType
				ReceivableApplicationImport.CrNbr
				ReceivableApplicationImport.CrPymntSeq
				ReceivableApplicationImport.TransType
				ReceivableApplicationImport.Invoice
				ReceivableApplicationImport.PaymentSeq
				ReceivableApplicationImport.ApplicationSequence

	Actions
		Create is a Create Action
			Entrance Rules  
				if (TransientFunctionalType entered)    
					ReceivableApplicationImport.TransType = TransientFunctionalType

				if (TransientFunctionalCreditType entered)    
					ReceivableApplicationImport.CrType = TransientFunctionalCreditType				



		Update is an Update Action
			Entrance Rules  
				if (TransientFunctionalType entered)    
					ReceivableApplicationImport.TransType = TransientFunctionalType

				if (TransientFunctionalCreditType entered)    
					ReceivableApplicationImport.CrType = TransientFunctionalCreditType				


		Delete is a Delete Action
			Action Rules
				invoke Delete CreditAdjustmentImportRel
				invoke Delete AdjustmentImportRel
				invoke Delete AdjustmentImportOverShortRel

		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules


		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)

			Action Rules
				Instance Rules
					invoke Delete CreditAdjustmentImportRel
					invoke Delete AdjustmentImportRel
					invoke Delete AdjustmentImportOverShortRel
					invoke FastDelete


		ConvertApplications is a Set Action
			default label is "ConvertApplications"
			Parameters
				PrmRunGroup						is a RunGroup
					default label is "RunGroup"
				PrmCompany						is a ReceivableCompany

			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Sort Order
				RunGroup
				Company

			Local Fields
				LocalConvertResultView			is a ReceivablesInterfaceResult view
				LocalAdjustmentCount			is Numeric 12
				LocalReceivableInvoiceCount		is Numeric 12

			Accumulators
				AccumBaseDebitApplied
				AccumBaseDebitAdjust
				InstanceCount

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	(ReceivableApplicationImport.TransactionCompany.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup			
				or 	Company.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)
				and	(PrmCompany not entered
				or	 (Company	= PrmCompany
				or ReceivableApplicationImport.TransactionCompany = PrmCompany)))					

			Rule Blocks

				1020EditAriapplied
					if (!LocalErrorOccurred)											
						if  (ReceivableApplicationImport.CrNbr entered
						and  BaseDebitAppliedAmount not entered
						and	 !Company = ReceivableApplicationImport.TransactionCompany)
							ErrorMessage = Msg212
						else
						if (BaseDebitAppliedAmount  < 0)
							ErrorMessage = Msg232
						else
						if (ReceivableApplicationImport.CrType entered
						and !ReceivableApplicationImport.CrType.CreditMemo
						and !ReceivableApplicationImport.CrType.Payment)
							ErrorMessage = Msg215
						else
						if  ((Company													 = blank			
						or  (Customer													 = blank
						and  ReceivableApplicationImport.InterfacedTransactionCustomer	 = blank)
						or   ReceivableApplicationImport.CrType							 = blank
						or   ReceivableApplicationImport.CrNbr							 = blank)
						and  BaseDebitAppliedAmount entered)
							ErrorMessage = Msg345
						else
						if	(ReceivableApplicationImport.CrType entered
						and ReceivableApplicationImport.TransType.CreditMemo
						and !ReceivableApplicationImport.CrType.Payment)
							ErrorMessage = Msg248
						else
						if 	(ReceivableApplicationImport.CrType.CreditMemo
						and !ReceivableInvoiceDetailCreditRel exists)
							ErrorMessage = Msg218
						else
						if 	(ReceivableApplicationImport.CrType.CreditMemo  
						and  ReceivableInvoiceDetailCreditRel exists
						and  ReceivableInvoiceDetailCreditRel.Status > 6)
							ErrorMessage = Msg266
						else
						if 	((ReceivableApplicationImport.TransType.CreditMemo					
						or 	ReceivableApplicationImport.TransType.DebitMemo
						or  ReceivableApplicationImport.TransType.Invoice)
						and !ReceivableInvoiceDetailRel exists)
							ErrorMessage = Msg206					
						else
						if 	((ReceivableApplicationImport.TransType.CreditMemo	 
						or 	ReceivableApplicationImport.TransType.DebitMemo
						or  ReceivableApplicationImport.TransType.Invoice)
						and	ReceivableInvoiceDetailRel exists
						and ReceivableInvoiceDetailRel.Status > 6)
							ErrorMessage = Msg264	
						else
						if 	(ReceivableApplicationImport.TransType.CustomerPayment
						and	!ReceivablePaymentRel exists)
							ErrorMessage = Msg206
						else
						if 	(ReceivableApplicationImport.TransType.CustomerPayment 
						and	ReceivablePaymentRel exists
						and ReceivablePaymentRel.Status > 6)
							ErrorMessage = Msg265
						else
						if (ReceivablePaymentCreditRel exists  
						and	ReceivablePaymentCreditRel.Status > 6)
							ErrorMessage = Msg265
						else
						if ((ReceivableApplicationImport.TransType.Invoice  
						or  ReceivableApplicationImport.TransType.DebitMemo
						or  ReceivableApplicationImport.TransType.CreditMemo)
						and BaseDebitAppliedAmount + sum AdjustmentImportRel.AdjustAmount  > ReceivableInvoiceDetailRel.OpenAmount)
							ErrorMessage = Msg261
						else
						if (ReceivablePaymentCreditRel exists  
						and BaseDebitAppliedAmount + sum CreditAdjustmentImportRel.AdjustAmount  > ReceivablePaymentCreditRel.PaymentOpen)  
							ErrorMessage = Msg262
						else
						if (ReceivableInvoiceDetailCreditRel exists  
						and BaseDebitAppliedAmount + sum AdjustmentImportRel.AdjustAmount  > ReceivableInvoiceDetailCreditRel.OpenAmount)
							ErrorMessage = Msg263
						else
						if  (Company 													= blank		
						and Customer													= blank
						and ReceivableApplicationImport.InterfacedCustomer				= blank
						and ReceivableApplicationImport.CrType							= blank
						and ReceivableApplicationImport.CrNbr							= blank
						and !AdjustmentImportRel exists)
							ErrorMessage = Msg221
						else
						if  (BaseDebitAppliedAmount not entered
						and (!AdjustmentImportOverShortRel exists												
						and  !CreditAdjustmentImportOverShortRel exists))
							ErrorMessage = Msg222
						else
						if	(ReceivableApplicationImport.CrType.Payment)
							if  (!ReceivablePaymentCreditRel exists)
								ErrorMessage = Msg218
							else
								for each ReceivablePaymentCreditRel
									if  (each.Status.Unreleased)
										ErrorMessage = Msg257	//"UnreleasedPaymentNotAllowedForApplicationConversion"
									else
									if  (each.Status.FullyApplied)	
										ErrorMessage = Msg258	//"FullyAppliedPaymentNotAllowedForApplicationConversion"
									else
									if  (each.Status.Closed)	
										ErrorMessage = Msg259	//"ClosedPaymentNotAllowedForApplicationConversion"
									else
									if  (each.Status.Historical)	
										ErrorMessage = Msg260	//"HistoricalPaymentNotAllowedForApplicationConversion"
										end for each

					if 	(CreditAppliedAmount not entered)
						if (BaseCreditAppliedAmount not entered)
							CreditAppliedAmount = BaseDebitAppliedAmount
						else 
							CreditAppliedAmount = BaseCreditAppliedAmount
						
					if	(BaseCreditAppliedAmount not entered)
						if (CreditAppliedAmount not entered)
							CreditAppliedAmount = BaseDebitAppliedAmount
						else
							BaseCreditAppliedAmount = CreditAppliedAmount
					
					if	(ReceivableApplicationImport.CrPymntSeq = 0)
						ReceivableApplicationImport.CrPymntSeq = 1











































								
























			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 8
						invoked.Company						= PrmCompany
						invoked.Status						= 1

				RunGroup Set Rules
					Entrance Rules

						invoke Create ReceivablesInterfaceResult
							assign result to LocalConvertResultView
							invoked.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
							invoked.RunTime					= current timestamp
							invoked.RunGroup				= PrmRunGroup
							invoked.RunType					= 8
							invoked.Company					= PrmCompany

					Exit Rules
						invoke Update LocalConvertResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed								= InstanceCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivableInvoiceCount
							invoked.ReceivableInterfaceCounts.AdditionalDetailCount	= LocalAdjustmentCount
							if (LocalConvertResultView.Status != 2)
								invoked.Status					= 1

				Instance Rules

					LocalReceivablesInterfaceResult	= LocalConvertResultView.ReceivablesInterfaceResult
					InterfaceRun						= LocalConvertResultView.ReceivablesInterfaceResult
					LocalErrorOccurred					= false
					InstanceCount						+= 1
					LocalAdjustmentCount				+= AdjustmentCountForRAI

					initialize ErrorMessage

					LocalDebitCustomer					= DerivedDebitCustomer
					LocalCreditCustomer					= DerivedCreditCustomer	

					include 1020EditAriapplied

					if (ErrorMessage entered)
						LocalErrorOccurred				= true
						invoke Update LocalInterfaceResultsRel
								invoked.Status			= 2
					else


						invoke ApplicationPosted.CreateFromConversion ReceivableApplication
							assign result to ConvertedApplication

							resume on error
								LocalErrorOccurred				= true
								ErrorMessage					= error message

							invoked.Company										= ReceivableApplicationImport.TransactionCompany				

							invoked.ReceivableApplication.TransType				= ReceivableApplicationImport.TransType
							invoked.ReceivableApplication.Invoice				= ReceivableApplicationImport.Invoice
							invoked.ReceivableApplication.PaymentSeq			= ReceivableApplicationImport.PaymentSeq
							invoked.Status										= 5

							if (ReceivableApplicationImport.TransType.CustomerPayment)
								invoked.ReceivableApplication.BatchNumber		= ReceivablePaymentRel.ReceivablePaymentHeader
								invoked.ReceivableGeneralLedgerCode				= ReceivablePaymentRel.ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
							else
								invoked.ReceivableApplication.BatchNumber		= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber
								invoked.ReceivableGeneralLedgerCode				= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableGeneralLedgerCode

							if (ReceivableApplicationImport.CrType.Payment)
								invoked.CreditTransaction.CreditBatch			= ReceivablePaymentCreditRel.ReceivablePaymentHeader
								invoked.CreditTransaction.CreditSequence		= ReceivablePaymentCreditRel.ReceivablePayment
								invoked.GLOffsetCode							= ReceivablePaymentCreditRel.ReceivedNotAppliedReceivableGeneralLedgerCode
								invoked.ApplicationCurrency						= ReceivablePaymentCreditRel.OriginalCurrency
							else
							if (ReceivableApplicationImport.CrType.CreditMemo)
								invoked.CreditTransaction.CreditBatch			= ReceivableInvoiceDetailCreditRel.ReceivableInvoiceRel.BatchNumber
								invoked.CreditTransaction.CreditSequence		= ReceivableInvoiceDetailCreditRel.ReceivableInvoiceDetail.PaymentSeq
								invoked.GLOffsetCode							= ReceivableInvoiceDetailCreditRel.ReceivableInvoiceRel.ReceivableGeneralLedgerCode
								invoked.ApplicationCurrency						= ReceivableInvoiceDetailCreditRel.OriginalCurrency
							else
							if (ReceivableApplicationImport.TransType.CustomerPayment)
								invoked.ApplicationCurrency						= ReceivablePaymentRel.OriginalCurrency
							else
								invoked.ApplicationCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency

							invoked.CreditTransaction.CreditCompany				= Company							
							invoked.CreditTransaction.CreditCustomer			= DerivedCreditCustomer
							invoked.CreditTransaction.CreditType				= ReceivableApplicationImport.CrType
							invoked.CreditTransaction.CreditNumber				= ReceivableApplicationImport.CrNbr

							invoked.DepositDate									= GeneralLedgerDate
							invoked.GeneralLedgerDate							= GeneralLedgerDate

							invoked.EnteredAmount								= CreditAppliedAmount
							invoked.ApplicationAmount.CurrencyAmount			= BaseDebitAppliedAmount
							invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount = BaseAppliedAmount
							invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount = CreditAppliedAmount
							invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount = BaseCreditAppliedAmount

							invoked.ReceivableOperator							= ReceivableOperator
							invoked.ApplicationSource							= "C"

							if (BaseDebitAppliedAmount not entered)
								invoked.CreditTransaction.CreditCompany			= ReceivableApplicationImport.TransactionCompany		
								invoked.CreditTransaction.CreditCustomer		= DerivedDebitCustomer
								invoked.CreditTransaction.CreditType			= ReceivableApplicationImport.TransType
								invoked.CreditTransaction.CreditNumber			= ReceivableApplicationImport.Invoice
								invoked.CreditTransaction.CreditSequence		= ReceivableApplicationImport.PaymentSeq
								if (ReceivableApplicationImport.TransType.CustomerPayment)
									invoked.CreditTransaction.CreditBatch		= ReceivablePaymentRel.ReceivablePaymentHeader			
								else
									invoked.CreditTransaction.CreditBatch		= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber	
		

							if  (ReceivableApplicationImport.TransType.CustomerPayment
							and  ReceivableApplicationImport.CrType	= blank)
								invoked.CreditTransaction.CreditCompany			= ReceivableApplicationImport.TransactionCompany			
								invoked.CreditTransaction.CreditCustomer		= DerivedDebitCustomer
								invoked.CreditTransaction.CreditType			= ReceivableApplicationImport.TransType
								invoked.CreditTransaction.CreditNumber			= ReceivableApplicationImport.Invoice
								invoked.CreditTransaction.CreditSequence		= ReceivableApplicationImport.PaymentSeq

							invoked.OriginatingInterfaceRun						= LocalReceivablesInterfaceResult




						if (LocalErrorOccurred)
							invoke Update LocalInterfaceResultsRel
									invoked.Status					= 2

						if (!LocalErrorOccurred)
							invoke Update LocalInterfaceResultsRel
									invoked.Status					= 1							
									invoked.ReceivableInterfaceCounts.PassedHeaderCount =+1

							for each CreditAdjustmentImportRel


								invoke CreateFromConversion ReceivableApplicationAdjustment
									resume on error
										LocalErrorOccurred				= true
										ErrorMessage					= error message
									fill in fields from this instance
									invoked.Company										= ConvertedApplication.CreditTransaction.CreditCompany			
									invoked.ReceivableApplication.TransType				= ConvertedApplication.CreditTransaction.CreditType
									invoked.ReceivableApplication.Invoice				= ConvertedApplication.CreditTransaction.CreditNumber
									invoked.ReceivableApplication.PaymentSeq			= ConvertedApplication.CreditTransaction.CreditSequence
									invoked.ReceivableApplication.BatchNumber			= ConvertedApplication.CreditTransaction.CreditBatch


									invoked.TransientCustomer							= LocalCreditCustomer

									if (ReceivableApplicationImport.CrType.Payment)
										invoked.ApplicationCurrency						= ReceivablePaymentCreditRel.OriginalCurrency
									else
									if (ReceivableApplicationImport.CrType.CreditMemo)
										invoked.ApplicationCurrency						= ReceivableInvoiceDetailCreditRel.OriginalCurrency

									invoked.ReceivableApplication.ApplicationSequence	= ConvertedApplication.ReceivableApplication.CreditAppliedSequence

									invoked.AdjustmentReason							= each.ReasonCode
									invoked.DistributionAccount							= each.DistributionAccount
									invoked.Description									= each.Description

									invoked.ReceivableAdjustType						= "N"

									if  (each.ReceivableApplicationAdjustmentImport.TransType.CreditMemo)
										invoked.AdjustSource							= "C"
									else
										invoked.AdjustSource							= "D"

									invoked.AdjustmentAmount.CurrencyAmount				= each.CreditAdjustAmount			

									invoked.CreditAdjustAmount							= each.CreditAdjustAmount			

								if (LocalErrorOccurred)
									invoke Update LocalInterfaceResultsRel
											invoked.Status					= 2
								else
									invoke FastDelete each		


						if (!LocalErrorOccurred)

							for each AdjustmentImportRel


								invoke CreateFromConversion ReceivableApplicationAdjustment
									resume on error
										LocalErrorOccurred				= true
										ErrorMessage					= error message
									fill in fields from this instance

									invoked.Company										= ConvertedApplication.Company					
									invoked.ReceivableApplication.TransType				= ConvertedApplication.ReceivableApplication.TransType
									invoked.ReceivableApplication.Invoice				= ConvertedApplication.ReceivableApplication.Invoice
									invoked.ReceivableApplication.PaymentSeq			= ConvertedApplication.ReceivableApplication.PaymentSeq
									invoked.ReceivableApplication.BatchNumber			= ConvertedApplication.ReceivableApplication.BatchNumber
									invoked.ReceivableApplication.ApplicationSequence	= ConvertedApplication.ReceivableApplication.ApplicationSequence

									invoked.TransientCustomer							= LocalDebitCustomer

									if (ReceivableApplicationImport.TransType.CustomerPayment)
										invoked.ApplicationCurrency						= ReceivablePaymentRel.OriginalCurrency
									else
									if (ReceivableApplicationImport.TransType.CreditMemo)
										invoked.ApplicationCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency

									invoked.AdjustmentReason							= each.ReasonCode
									invoked.DistributionAccount							= each.DistributionAccount
									invoked.Description									= each.Description

									invoked.ReceivableAdjustType						= "N"

									if  (each.ReceivableApplicationAdjustmentImport.TransType.CreditMemo)
										invoked.AdjustSource							= "C"
									else
										invoked.AdjustSource							= "D"

									invoked.AdjustmentAmount.CurrencyAmount				= each.AdjustAmount

									invoked.CreditAdjustAmount							= each.AdjustAmount				

								if (LocalErrorOccurred)
									invoke Update LocalInterfaceResultsRel
											invoked.Status					= 2
								else
									invoke FastDelete each		

						if (!LocalErrorOccurred)
							invoke ApplicationPosted.UpdateResultAndCheckGainLoss ConvertedApplication.ReceivableApplication

							invoke FastDelete
							LocalReceivableInvoiceCount				+= 1































