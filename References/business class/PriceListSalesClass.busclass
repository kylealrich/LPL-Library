PriceListSalesClass is a BusinessClass
    owned by bl
    prefix is OPC
    classic name is OEPLCLASS

    Ontology
        symbolic key is PriceListSalesClass
        	classic set name is OPCSET1
            classic name for PriceListSalesClass.MajorSalesClass is SALES-MAJCL
            classic name for PriceListSalesClass.MinorSalesClass is SALES-MINCL

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        BeginDate         is Date
            classic name is BEG-DATE
        EndDate           is Date
        SalesProhibited		is Boolean
            classic name is PROHIBIT-FL
        AmalgamatedPricing	is Boolean
            classic name is CLASS-PRC-FL
		QuantityBreak		is a QuantityPercentGroupArray
			classic name for QuantityBreak.QuantityPercentGroup.BreakQuantity is BRK-QTY
			classic name for QuantityBreak.QuantityPercentGroup.BreakPercent is BRK-PCT
        PriceDiscountCode
            classic name is DISC-CODE
        NoCharge			is Boolean
            classic name is NO-CHARGE-FL
	
	Derived Fields
		ProhibitedSaleMessage				is a MessageField
			restricted
			"ProhibitedSaleClass"
		NoChargeMessage						is a MessageField
			restricted
			"NoChargeSalesClass"
		MinorSalesClassMessageField			is a MessageField
			restricted
			"AndMinorSalesClass"
		DerivedMessageForSales				is a DerivedField
			type is MessageField
			restricted
   			if (SalesProhibited)
				return ProhibitedSaleMessage
			else
				return NoChargeMessage
		DerivedSalesClass  					is a DerivedField
			type is MessageField
			restricted
			if (PriceListSalesClass.MinorSalesClass entered)
				return MinorSalesClassMessageField
				
    Conditions

        IsContract
            classic name is OPCSET4
            when (PriceListContractPromotion.Customer entered)

       	IsMinorSalesClass 		
       		restricted																	
            when (PriceListSalesClass.MinorSalesClass entered)

        IsPromotionNotEntered																		
            classic name is OPCSET3
            restricted
            when (PriceListContractPromotion.Promotion not entered)

        IsPriceList
            when (PriceListContractPromotion.Customer not entered
            and   PriceListContractPromotion.Promotion not entered)

        IsPromotion
            classic name is OPCSET2
            restricted
            when (PriceListContractPromotion.Promotion entered)
        
        IsValidPriceList
        	restricted
			when (PriceListContractPromotion.ListName entered)

		IsPriceListOrPromotion
			restricted
			when (PriceListContractPromotion.ListName entered
			or    PriceListContractPromotion.Promotion entered)
			
		IsPriceListContractPromotion
			when (PriceListContractPromotion.Customer entered
			or    PriceListContractPromotion.ListName entered
			or    PriceListContractPromotion.Promotion entered)

    Relations
        PriceListContractPromotionForPromotionRel																								
            one-to-one relation to PriceListContractPromotion
            Field Mapping uses symbolic key
                related.Company                              = Company
                related.PriceListContractPromotion.Customer  = PriceListContractPromotion.Customer
                related.PriceListContractPromotion.ListName  = PriceListContractPromotion.ListName
                related.PriceListContractPromotion.Promotion = PriceListContractPromotion.Promotion

        PriceListContractPromotionsForPromotionRel																								
            one-to-many relation to PriceListContractPromotion
            Field Mapping uses symbolic key
                related.Company                              = Company

     	PriceListRel											
	     	one-to-many relation to PriceListContractPromotion
	        valid when (IsValidPriceList)
            Field Mapping uses symbolic key
                related.Company                              		= Company
            Instance Selection
            	where (related.PriceListContractPromotion.ListName  = PriceListContractPromotion.ListName)
               
		OtherPriceListSalesClassesRel     
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set6
				related.Company										 = Company
				related.PriceListContractPromotion.ListName			     = PriceListContractPromotion.ListName
				related.PriceListSalesClass.MajorSalesClass 	     = PriceListSalesClass.MajorSalesClass
				related.PriceListSalesClass.MinorSalesClass 	     = PriceListSalesClass.MinorSalesClass
			Instance Selection
				where (related.PriceListContractPromotion.Promotion	    != PriceListContractPromotion.Promotion)
		
		PriceListSalesContractRel 
            one-to-many relation to PriceListSalesClass
            Field Mapping uses Set5
                related.Company                                      = Company
                related.PriceListContractPromotion.Customer		         = PriceListContractPromotion.Customer
                related.PriceListSalesClass.MajorSalesClass          = PriceListSalesClass.MajorSalesClass
                related.PriceListSalesClass.MinorSalesClass          = PriceListSalesClass.MinorSalesClass
            Instance Selection 
                where (related.PriceListContractPromotion.ListName  		!= PriceListContractPromotion.ListName)
		
    Sets
        Set2
            indexed
            Instance Selection
                where (IsPromotion)
            Sort Order
                Company
                PriceListContractPromotion.ListName
                PriceListContractPromotion.Promotion
                PriceListSalesClass.MajorSalesClass
                PriceListSalesClass.MinorSalesClass

        Set3
            indexed
            Instance Selection
                where (IsPromotionNotEntered)
            Sort Order
                Company
                PriceListContractPromotion.Customer
                PriceListContractPromotion.ListName
                PriceListSalesClass.MajorSalesClass
                PriceListSalesClass.MinorSalesClass

        Set5
            indexed
            Instance Selection
                where (IsContract)
            Sort Order
                Company
                PriceListContractPromotion.Customer
                PriceListSalesClass.MajorSalesClass
                PriceListSalesClass.MinorSalesClass
                EndDate

        Set6
            indexed
            Instance Selection
                where (IsPromotion)
            Sort Order
                Company
                PriceListContractPromotion.ListName
                PriceListSalesClass.MajorSalesClass
                PriceListSalesClass.MinorSalesClass
                EndDate
		
	Local Fields
		I1 is Numeric 2 																		
		I2 is Numeric 2 									

    Field Rules
		
		BeginDate
			if (IsPromotion
			or  IsContract)
				default to PriceListContractPromotionForPromotionRel.BeginDate
		
		EndDate
			if (IsPromotion
			or  IsContract)
				default to PriceListContractPromotionForPromotionRel.EndDate
			
			if (IsPromotion)
				for each OtherPriceListSalesClassesRel
					if (each.BeginDate >= BeginDate)
						constraint (each.BeginDate > EndDate)
							"SalesClassAlreadyDefinedInAnotherPromotion"       	
					if (each.EndDate >= BeginDate) 
						constraint (each.EndDate > EndDate)
							"SalesClassAlreadyDefinedInAnotherPromotion"
					if (each.BeginDate <  BeginDate)
						constraint (each.EndDate < EndDate)
							"SalesClassAlreadyDefinedInAnotherPromotion"
			
			if (IsContract)
				for each PriceListSalesContractRel
					if (each.BeginDate >= BeginDate)
						constraint (each.BeginDate > EndDate)
							"SalesClassAlreadyDefinedInAnotherContract"       	
					if (each.EndDate >= BeginDate) 
						constraint (each.EndDate > EndDate)
							"SalesClassAlreadyDefinedInAnotherContract"
					if (each.BeginDate <  BeginDate)
						constraint (each.EndDate < EndDate)
							"SalesClassAlreadyDefinedInAnotherContract"
			
		PriceListSalesClass
    		if (PriceListContractPromotion.ListName entered)
				constraint (PriceListRel exist)
					"PriceListDoesNotExist"											
					
			if (PriceListContractPromotion.Promotion entered)
    			constraint (PriceListContractPromotionForPromotionRel exist)
    				"PromotionDoesNotExist"	 
    				



    				
    				


        AmalgamatedPricing
			if (SalesProhibited
			or  NoCharge)
				cannot be entered
					"CannotEnterAmalgamatedPricingFor<DerivedMessageForSales>"				
			
       		if (QuantityBreak.QuantityPercentGroup[1].BreakQuantity = 999999999)
       			constraint (!AmalgamatedPricing)
       				"AmalgamationRequiresAtLeastTwoBreakQtys"						
        
        NoCharge
			if (SalesProhibited)
				cannot be entered
					"CannotEnterNoChargeForAProhibitedSales"						

		PriceDiscountCode
			if (SalesProhibited
			or  NoCharge)
				cannot be entered
					"CannotEnterPriceDiscountCodeFor<DerivedMessageForSales>"				
		
		QuantityBreak
			if (SalesProhibited
			or  NoCharge)
				constraint (QuantityBreak.QuantityPercentGroup.BreakQuantity not entered) 
					"CannotEnterBreakQuantityFor<DerivedMessageForSales>"						
			
			if (SalesProhibited
			or  NoCharge)
				constraint (QuantityBreak.QuantityPercentGroup.BreakPercent not entered) 
					"CannotEnterBreakPercentFor<DerivedMessageForSales>"						
					
			if (!SalesProhibited
			and	!NoCharge
			and QuantityBreak.QuantityPercentGroup.BreakQuantity not entered)
				QuantityBreak.QuantityPercentGroup[1].BreakQuantity = 999999999
						
			if (QuantityBreak.QuantityPercentGroup.BreakQuantity entered)
				I1 = 1
				while (I1 <= 6)
					I2 = I1 + 1
					if (QuantityBreak.QuantityPercentGroup[I2].BreakQuantity not entered)
						constraint (QuantityBreak.QuantityPercentGroup[I1].BreakQuantity = 999999999
						or			QuantityBreak.QuantityPercentGroup[I1].BreakQuantity not entered)
							"LastUpperLimitShouldBe999999999"											
					else		
						constraint (QuantityBreak.QuantityPercentGroup[I2].BreakQuantity > QuantityBreak.QuantityPercentGroup[I1].BreakQuantity)
							"BreakQuantityShouldBeInAscendingSequence"
							
						constraint (QuantityBreak.QuantityPercentGroup[I2].BreakPercent < QuantityBreak.QuantityPercentGroup[I1].BreakPercent)	
							"BreakPercentShouldBeInDescendingSequence"
					I1 += 1
			
	Actions
		Create is a Create Action
			Entrance Rules
				constraint (PriceListContractPromotion entered)
					"PriceListContractPromotionDoesNotExist"
			Action Rules
				constraint (PriceListSalesClass.MajorSalesClass entered)
					"MajorSalesClassIsRequired"
					
				increment PriceListContractPromotionForPromotionRel.SalesClassPriceModifierCount
		
		Update is an Update Action
			
		UpdateFromPriceListContractPromotion is an Instance Action
			Parameters
				PrmBeginDate is Date
				PrmEndDate   is Date
			Action Rules				
				if (PrmBeginDate entered)
					BeginDate = PrmBeginDate
				
				if (PrmEndDate entered)
					EndDate   = PrmEndDate
		
		Delete is a Delete Action
			Action Rules
				decrement PriceListContractPromotionForPromotionRel.SalesClassPriceModifierCount

					

