FSMBODConfiguration is a BusinessClass
    owned by integration
    prefix is BDC
    
    Ontology
        symbolic key is FSMBODConfiguration

    Patterns
        implements StaticJava
        disable AuditIndex
        implements InlineUserFields
			size is 3000
    Persistent Fields
    	Enable                            is Boolean
    	ProcessingMethod 		is Numeric 1
    		States
    			IPA				value is 1
    			NativeLPL		value is 2
    	CriteriaType			is Numeric 1
    		States
    			Exclude			value is 1
    			Include			value is 2
    
    Local Fields
    	LocalIdentity 			is Alpha size 200
    	ActorIdentity			is Alpha size 200			
    	LocalRegexPatternGUID	is Alpha size 200
		LocalRegexPatternUPN 	is Alpha size 200
		LocalDescription		is Alpha size 200
		LocalActorGroup			is Alpha size 100
		LocalBODID				is Alpha size 100
		LocalMainAlertXML		is XMLDocument
		LocalActorGroupXML		is XMLDocument	

		LocalFinanceEnterpriseGroup 	is Alpha size 4
		LocalBusinessGroup				is Alpha size 4
		NativeLPLBODTriggerExclude		is Boolean
		LocalVerb						is Numeric 2
		LocalNoun						is Alpha size 50
		LocalDirection					is Numeric 1
		LocalTriggerFrom				is Alpha size 100
		LocalCompany					is Alpha size 4
		LocalAccountingEntity           is Alpha size 12
		LocalCustomerBusinessGroup		is Alpha size 5
		LocalMainUserTemplate			is Alpha size 250
		LocalService					is Alpha size 100
		LocalFlowName					is Alpha size 100
		LocalBODType					is Alpha size up to 250
		LocalConfigurationParameter		is Alpha size 100
		LocalParameterValue				is Alpha size up to 1000
		LocalAlertEnable				is Boolean
		LocalIPAOutboundDisable			is Boolean
		LocalIPAInboundDisable			is Boolean
    Transient Fields
    	NativeLPLBODTrigger				is Boolean
    
    Derived Fields
    	DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			for each FSMBODConfigurationParameterRel
				if (each.FSMBODConfigurationParameter = "tenantID")
					return each.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			for each FSMBODConfigurationParameterRel
				if (each.FSMBODConfigurationParameter = "logicalID")
					return each.Value

		BODCurrentTimeStamp is a DerivedField
			type is TimeStamp
			restricted
			BODCurrentTimeStamp = system current timestamp
			return BODCurrentTimeStamp
			
		AlphaCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			return BODCurrentTimeStamp
			
		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCurrentTimeStamp[1:4] + "-" + AlphaCurrentTimeStamp[5:6] + "-" + AlphaCurrentTimeStamp[7:8] + "T" + AlphaCurrentTimeStamp[9:10] + ":" + AlphaCurrentTimeStamp[11:12] + ":" + AlphaCurrentTimeStamp[13:14] + "Z"
		
		NativeActor	is a NativeField
			type is Alpha 200
			restricted
		
		PulseAlertXML is a DerivedField
			type is XMLDocument
			restricted
			PulseAlertXML = template.IONProcessPulseAlert_FSMBODConfiguration_ST document for this instance
    
    	
    	DerivedVerb is a DerivedField
    		type is Alpha 20
			restricted
			if	(FSMBODConfiguration.Verb.Sync)
				return "Sync"
			else
			if	(FSMBODConfiguration.Verb.Process)
				return "Process"
			else
			if	(FSMBODConfiguration.Verb.Load)
				return "Load"
			else
			if	(FSMBODConfiguration.Verb.Show)
				return "Show"
			else
				return "Acknowledge"
		
		DerivedDirection is a DerivedField
    		type is Alpha 20
			restricted
			if	(FSMBODConfiguration.Direction.Outbound)
				return "Outbound"
			else
				return "Inbound"
    	
    	DerivedUserTemplateDescription is a DerivedField
			type is Alpha size 200
			restricted
			return DerivedVerb+"."+FSMBODConfiguration.Noun+"_"+DerivedDirection
    	
    	DerivedBODName is a DerivedField
    		type is Alpha size 200
			return DerivedVerb + "." + FSMBODConfiguration.Noun
		
		DerivedActiveBODs is a DerivedField
			type is Boolean
			for each FSMBODConfigurationDetailActiveCheckRel
				if (each.Enable = true)
					return true
			
    Conditions
    	IsSync
    		restricted
			when (FSMBODConfiguration.Verb.Sync)
		IsProcess
			restricted
			when(FSMBODConfiguration.Verb.Process)
		IsPulseAlert
			restricted
			when(FSMBODConfiguration.Noun = "PulseAlert")
		IsDirection
			restricted
			when(FSMBODConfiguration.Direction.Inbound
				or FSMBODConfiguration.Noun = "PulseAlert")

    Relations
    	FSMBODConfigurationDetailRel      is a FSMBODConfigurationDetail set
    	FSMBODConfigurationCriteriaRel    is a FSMBODConfigurationCriteria set
    	FSMBODConfigurationParameterRel   is a FSMBODConfigurationParameter set
    	
    	ActorGroupMemberRel 
			one-to-many relation to ActorGroupMember
			Field Mapping uses part of key
				related.ActorGroup      = LocalActorGroup
				
		FSMBODConfigurationUserTemplateRel
			one-to-many relation to UserTemplate
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Description   = DerivedUserTemplateDescription)
				
		ActorGroupRel 
			one-to-many relation to ActorGroup
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Description   = DerivedUserTemplateDescription)
				          	
        FSMBODConfigurationDetailTriggercheckRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= LocalVerb	
            	related.FSMBODConfiguration.Noun 			= LocalNoun
            	related.FSMBODConfiguration.Direction 		= LocalDirection
            Instance Selection
				where (related.TriggerFrom					= LocalTriggerFrom)
				
		FSMBODConfigurationCriteriaTriggercheckRel
        	one-to-many relation to FSMBODConfigurationCriteria
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= LocalVerb
            	related.FSMBODConfiguration.Noun 			= LocalNoun
            	related.FSMBODConfiguration.Direction 		= LocalDirection
        
        FSMBODConfigurationDetailActiveCheckRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= FSMBODConfiguration.Verb
            	related.FSMBODConfiguration.Noun 			= FSMBODConfiguration.Noun
            	related.FSMBODConfiguration.Direction 		= FSMBODConfiguration.Direction
        
        UserTemplateRel
			one-to-many relation to UserTemplate
			Field Mapping uses symbolic key
			Instance Selection
				where (related.UserTemplate   = LocalMainUserTemplate)
 

        PfiServiceDefinitionRel
			one-to-many relation to PfiServiceDefinition
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsServiceEnabled   = true)
        
        PfiServiceFlowDefinitionRel
			one-to-many relation to PfiServiceFlowDefinition
			Field Mapping uses symbolic key
			Instance Selection
				where (related.PfiServiceDefinition   = LocalService
				and    related.IsServiceFlowEnabled   = true)
		
		DisablePfiServiceFlowDefinitionRel
			one-to-many relation to PfiServiceFlowDefinition
			Field Mapping uses symbolic key
			Instance Selection
				where (related.PfiServiceDefinition   = LocalService
				and    related.FlowDefinition		  = LocalFlowName
				and    related.IsServiceFlowEnabled   = true)
		
		PfiReceiverRel
			one-to-many relation to PfiReceiver
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Status   = 2)
		







		
		PfiConfigurationPropertyRel
			one-to-many relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
			Instance Selection
				where (related.PfiConfigurationProperty entered
				and related.Value entered)

		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= LocalVerb	
            	related.FSMBODConfiguration.Noun 			= LocalNoun
            	related.FSMBODConfiguration.Direction 		= LocalDirection
        
        FSMBODConfigurationDetailAlertRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= LocalVerb	
            	related.FSMBODConfiguration.Noun 			= LocalNoun
            	related.FSMBODConfiguration.Direction 		= LocalDirection
            Instance Selection
				where (related.Alert 	= LocalFlowName)
        
        CopyFSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter	
            	
            	    	
    Field Rules
    	ProcessingMethod
    		default to ProcessingMethod.NativeLPL
    	Enable
   			if(Enable)
				cannot be changed
					"NativeLPL_BO\Ds_are_deprecated,useIPA_BO\D_process"
    	
    	CriteriaType
    		if(FSMBODConfigurationCriteriaRel exist and CriteriaType not entered)
    			default to CriteriaType.Include
    	
    Actions
    	Create is a Create Action
    		restricted
    	Update is an Update Action
    	Delete is a Delete Action
    		restricted
		
		
		TriggerPulseAlert is an Instance Action
			restricted
			Parameters
				PrmActorGroup 			is Alpha size 100
				PrmDescription			is Alpha size 200
				PrmBODID				is Alpha size 100
				PrmMainXML				is XMLDocument
			Local Fields
				ActorGroupXML			is XMLDocument
			Action Rules
				LocalActorGroup 		= PrmActorGroup
				LocalDescription		= PrmDescription
				LocalBODID				= PrmBODID
				LocalMainAlertXML 		= PrmMainXML
				LocalMainUserTemplate	= "IONProcessPulseAlert_FSMBODConfiguration_ST"
				
				for each ActorGroupMemberRel  
		            initialize LocalIdentity
					if (instance count of each.Actor.IdentityActorPrimaryRel = 1)
						for each each.Actor.IdentityActorPrimaryRel
							LocalIdentity = each.Identity
					else 
						if ((instance count of each.Actor.IdentityActorPrimaryRel > 1))
							LocalRegexPatternGUID = "^User:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
							LocalRegexPatternUPN = "^User:[A-Za-z0-9\\_\\-\\+\\.\\%]+@[A-Za-z0-9\\-\\.]+[\\.A-Za-z0-9]{2,6}$"
							
							for each each.Actor.IdentityActorPrimaryRel
								if (each.Identity matches LocalRegexPatternGUID)
									LocalIdentity = each.Identity
									end for each
		
							if (LocalIdentity not entered)	
								for each each.Actor.IdentityActorPrimaryRel
									if (each.Identity matches LocalRegexPatternUPN)
										LocalIdentity = each.Identity
										end for each
					
					ActorIdentity = NativeActor
					ActorGroupXML += template.IONPulseAlert_ActorGroup_FSMBODConfiguration_ST document for this instance
				
				LocalActorGroupXML = ActorGroupXML	
				if(UserTemplateRel exists)
					send ion bod
						bod is PulseAlertXML
						bod type is "Process.PulseAlert"

		AcknowledgePulseAlertImport is an Import Action
			restricted
			bod type is Acknowledge.PulseAlert			
			Action Rules
				
		NativeLPLBODTriggerChecks is an Instance Action
			restricted
			Entrance Rules
			Parameters
				PrmVerb							is Numeric 2
				PrmNoun							is Alpha 50
				PrmDirection					is Numeric 1
				PrmTriggerFrom					is Alpha size 100
				PrmFinanceEnterpriseGroup		is Alpha size 4
				PrmBusinessGroup				is Alpha size 5
				PrmCompany						is Alpha size 4	
				PrmAccountingEntity				is Alpha size 12
				PrmCustomerBusinessGroup		is Alpha size 5
				PrmMainUserTemplate				is Alpha size 250
			Action Rules
				initialize NativeLPLBODTrigger
				LocalVerb						= PrmVerb
				LocalNoun						= PrmNoun
				LocalDirection					= PrmDirection
				LocalTriggerFrom     			= PrmTriggerFrom
				LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
				LocalBusinessGroup				= PrmBusinessGroup
				LocalCompany 					= PrmCompany
				LocalAccountingEntity			= PrmAccountingEntity
				LocalCustomerBusinessGroup		= PrmCustomerBusinessGroup
				LocalMainUserTemplate			= PrmMainUserTemplate
				
				if(Enable)
					if(FSMBODConfigurationDetailTriggercheckRel exists and FSMBODConfigurationDetailTriggercheckRel.Enable and UserTemplateRel exists)
						NativeLPLBODTrigger = true
						if(FSMBODConfigurationCriteriaTriggercheckRel exists)
							if(CriteriaType.Include)
								NativeLPLBODTrigger = false
								for each FSMBODConfigurationCriteriaTriggercheckRel
									if(!NativeLPLBODTrigger)
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity entered and each.Company not entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.AccountingEntity= LocalAccountingEntity)
												NativeLPLBODTrigger = true		
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup)
												NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company not entered and each.CustomerBusinessGroup not entered )
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup)
												NativeLPLBODTrigger = true										
										
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity entered and each.Company not entered and each.CustomerBusinessGroup not entered )
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.AccountingEntity= LocalAccountingEntity)
												NativeLPLBODTrigger = true		
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company entered and each.CustomerBusinessGroup not entered )
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity  entered and each.Company entered and each.CustomerBusinessGroup not entered )
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										
										if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company not entered and each.CustomerBusinessGroup not entered )
											NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company  entered)
											if(each.BusinessGroup = LocalBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
												
										if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
											if(each.BusinessGroup = LocalBusinessGroup)
												NativeLPLBODTrigger = true		
										if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company entered and each.CustomerBusinessGroup not entered )
											if(each.Company = LocalCompany)
												NativeLPLBODTrigger = true		
										
										if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity entered and each.Company not entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.AccountingEntity= LocalAccountingEntity)
												NativeLPLBODTrigger = true		
										if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup)
												NativeLPLBODTrigger = true
										
										if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
										
										if(each.FinanceEnterpriseGroup not entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company  entered)
											if(each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTrigger = true
												
										if(each.FinanceEnterpriseGroup not entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
											if(each.CustomerBusinessGroup = LocalCustomerBusinessGroup)
												NativeLPLBODTrigger = true		
												
							if(CriteriaType.Exclude)
								NativeLPLBODTrigger = false
								for each FSMBODConfigurationCriteriaRel
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity entered and each.Company entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.AccountingEntity= LocalAccountingEntity)
											NativeLPLBODTriggerExclude = true		
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company not entered and each.CustomerBusinessGroup not entered )
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup)
											NativeLPLBODTriggerExclude = true
									
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity entered and each.Company not entered and each.CustomerBusinessGroup not entered )
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.AccountingEntity= LocalAccountingEntity)
											NativeLPLBODTriggerExclude = true		
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity  entered and each.Company entered and each.CustomerBusinessGroup not entered )
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
												NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.BusinessGroup = LocalBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company entered and each.CustomerBusinessGroup not entered )
										if(each.FinanceEnterpriseGroup =LocalFinanceEnterpriseGroup and  each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
									
									if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company not entered and each.CustomerBusinessGroup not entered )
										NativeLPLBODTrigger = true
									if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company  entered)
										if(each.BusinessGroup = LocalBusinessGroup and each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
											
									if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.BusinessGroup = LocalBusinessGroup)
											NativeLPLBODTriggerExclude = true		
									if(each.FinanceEnterpriseGroup not entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company entered and each.CustomerBusinessGroup not entered )
										if(each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
									
									if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity entered and each.Company entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.AccountingEntity= LocalAccountingEntity and each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.AccountingEntity= LocalAccountingEntity)
											NativeLPLBODTriggerExclude = true		
									if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.BusinessGroup not entered and each.AccountingEntity not entered and each.Company entered and each.CustomerBusinessGroup not entered )
										if(each.FinanceEnterpriseGroup =LocalFinanceEnterpriseGroup and  each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true		
									
									if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup)
											NativeLPLBODTriggerExclude = true
									if(each.FinanceEnterpriseGroup entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company entered)
											if(each.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup and each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.Company = LocalCompany)
												NativeLPLBODTriggerExclude = true
									
									if(each.FinanceEnterpriseGroup not entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company  entered)
										if(each.CustomerBusinessGroup = LocalCustomerBusinessGroup and each.Company = LocalCompany)
											NativeLPLBODTriggerExclude = true
											
									if(each.FinanceEnterpriseGroup not entered and each.CustomerBusinessGroup entered and each.AccountingEntity not entered and each.Company not entered)
										if(each.CustomerBusinessGroup = LocalCustomerBusinessGroup)
											NativeLPLBODTriggerExclude = true		
								if(!NativeLPLBODTriggerExclude) 
									NativeLPLBODTrigger = true
	
		EnableIntegration is a Set Action
			restricted
			Parameters
				PrmIntegration	is Alpha size 2
		            States
		                EAM				value is "1"
						GFC				value is "2"
						GRC				value is "3"
						GHR				value is "4"
						HRCM			value is "5"
						IPS				value is "6"
						WMS				value is "7"
						XM				value is "8"
						Lawson			value is "9"


			Parameter Rules
				PrmIntegration
					if (PrmIntegration not entered)
						required
							"SelectIntegration"
			Instance Selection
				where (Enable = false)
			Action Rules	
				Instance Rules
					if(PrmIntegration.EAM)
						if(FSMBODConfiguration.Noun = "PurchaseOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "InventoryCount" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AssetMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierInvoice" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ItemMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Shipment" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceiveDelivery" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierRMA" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Requisition" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "MaintenanceOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.GFC)
						if(FSMBODConfiguration.Noun = "ChartOfAccounts" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AccountingEntity" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AccountingChart" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ProjectMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierInvoice" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SourceSystemJournalEntry" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.GRC)
						if(FSMBODConfiguration.Noun = "Requisition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceivableTransaction" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceiveDelivery" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ChartOfAccounts" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Contract" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SourceSystemJournalEntry" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierInvoice" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CustomerPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ItemMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Invoice" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SalesOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "PurchaseOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Shipment" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "PayableTransaction" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CustomerReturn" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.GHR)
						if(FSMBODConfiguration.Noun = "Personnel" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true	
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.HRCM)
						if(FSMBODConfiguration.Noun = "AccountingChart" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ChartOfAccounts" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CurrencyExchangeRateMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AccountingEntity" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SourceSystemJournalEntry" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL	
					else
					if(PrmIntegration.IPS)
						if(FSMBODConfiguration.Noun = "AccountingEntity" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AssetMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ProjectMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceiveDelivery" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "PurchaseOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ItemMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "RemittanceAdvice" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Shipment" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true	
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Requisition" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "RemittanceAdvice" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SourceSystemJournalEntry" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceiveDelivery" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.WMS)
						if(FSMBODConfiguration.Noun = "Shipment" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Location" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ShipFromPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ItemMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "PurchaseOrder" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AdvanceShipNotice" and FSMBODConfiguration.Verb.Process and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "Shipment" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "InventoryHold" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "AdvanceShipNotice" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "InventoryAdjustment" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ReceiveDelivery" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.XM)
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CurrencyExchangeRateMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "ExpenseReport" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
						else
						if(FSMBODConfiguration.Noun = "CodeDefinition" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Inbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL
					else
					if(PrmIntegration.Lawson)
						if(FSMBODConfiguration.Noun = "SupplierPartyMaster" and FSMBODConfiguration.Verb.Sync and FSMBODConfiguration.Direction.Outbound)
							Enable = true
							ProcessingMethod = ProcessingMethod.NativeLPL

		SwitchFromIPAToLPLBODs is a Set Action
			default label is "SwitchFromIPAToLPL_BO\Ds"
			restricted
			Parameter Rules
			Instance Selection
				where (Enable = false)
			Action Rules
				Set Rules
					Entrance Rules
						if(PfiServiceDefinitionRel exists)	
							for each PfiServiceDefinitionRel
								LocalService = each.PfiServiceDefinition
								if(PfiServiceFlowDefinitionRel exists)
									for each PfiServiceFlowDefinitionRel
										LocalService = each.PfiServiceDefinition
										LocalFlowName = each.FlowDefinition
										invoke EnableBODFlows
											invoked.PrmService		= LocalService
											invoked.PrmFlowName 	= LocalFlowName
											invoked.PrmDirection 	= FSMBODConfiguration.Direction.Outbound
						
						if(PfiReceiverRel exists)	
							for each PfiReceiverRel
								LocalBODType = each.IONReceiver.BODType
								LocalFlowName = each.PfiFlowDefinition
								invoke EnableBODFlows
									invoked.PrmService		= LocalBODType
									invoked.PrmFlowName 	= LocalFlowName
									invoked.PrmDirection 	= FSMBODConfiguration.Direction.Inbound
									
						if(PfiConfigurationPropertyRel exists) 
							for each PfiConfigurationPropertyRel
								initialize LocalConfigurationParameter
								initialize LocalParameterValue
								LocalConfigurationParameter = each.PfiConfigurationProperty
								LocalParameterValue         = each.Value
								
								if(LocalConfigurationParameter = "versionID")
									LocalConfigurationParameter = "VersionID"
								else
								if(LocalConfigurationParameter = "logicalID")
									LocalParameterValue = "lid://infor.fsm.fsm:ims"
									
								if(CopyFSMBODConfigurationParameterRel exists and LocalParameterValue entered)
									invoke Update CopyFSMBODConfigurationParameterRel	
										invoked.Value		= LocalParameterValue
										
		EnableBODFlows is an Instance Action	
			restricted
			Parameters
				PrmService 			is Alpha size 100
				PrmFlowName			is Alpha size 100
				PrmDirection		is Numeric 1
			Action Rules
				LocalService 		= PrmService
				LocalFlowName		= PrmFlowName
				LocalDirection		= PrmDirection
				
				if(LocalDirection = 1)
					if(LocalService = "AccountingEntityService" and LocalFlowName = "FSM_ION_SyncAccountingEntity_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AccountingEntity"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "AssetMasterService" and LocalFlowName = "FSM_ION_SyncAssetMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AssetMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "AssetTransactionService" and LocalFlowName = "FSM_ION_SyncAssetTransaction_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AssetTransaction"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "BankEntityService" and LocalFlowName = "FSM_ION_SyncFinancialPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "FinancialPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "BillOfMaterialsService" and LocalFlowName = "FSM_ION_SyncBillOfMaterials_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "BillOfMaterials"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "BillToInventoryService" or LocalService = "CustomerBillToService") and LocalFlowName = "FSM_ION_SyncBillToPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "BillToPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CashLedgerCashReceiptHeaderService" and LocalFlowName = "FSM_ION_SyncCashReceipt_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CashReceipt"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "CashLedgerPayablesPaymentService" or LocalService = "WireTransferService" or 
					    LocalService = "PaymentOutputFileService") and LocalFlowName = "FSM_ION_SyncCreditTransfer_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CreditTransfer"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CloseConfigurationService" and LocalFlowName = "FSM_ION_SyncFinancialCalendar_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "FinancialCalendar"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CompanyCustomerService" and LocalFlowName = "FSM_ION_SyncCustPrtyMstr_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CustomerPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "ContactMasterAPService" or LocalService = "ContactMasterARService"
					or LocalService = "ContactMasterPOService" or LocalService = "ContactMasterRQService") and LocalFlowName = "FSM_ION_SyncContactMaster_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ContactMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ContractService" and LocalFlowName = "FSM_ION_SyncContract_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Contract"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "CurrExchangeRateService" or LocalService = "PeriodRateService") and LocalFlowName = "FSM_ION_SyncCurrencyExchangeRateMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CurrencyExchangeRateMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CustomerOrderService" and LocalFlowName = "FSM_ION_SyncSalesOrder_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SalesOrder"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CustomerPayFromService" and LocalFlowName = "FSM_ION_SyncPayFromPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "PayFromPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CustomerRemittanceAdviceService" and LocalFlowName = "FSM_ION_SyncCustRemitAdvice_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CustomerRemittanceAdvice"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CustomerShipToService" and LocalFlowName = "FSM_ION_SyncShipToPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ShipToPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "EUSalesService" and LocalFlowName = "FSM_ION_SyncLCLTradeStatisticsEUSales_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "LCLTradeStatistics"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "FSMRemitAdvice" and LocalFlowName = "FSM_ION_SyncRemittanceAdvice_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "RemittanceAdvice"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "GLJournalControlService" or LocalService = "RBYearEndJournalService") and LocalFlowName = "FSM_ION_SyncSourceSystemJournalEntry_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SourceSystemJournalEntry"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "GLTransactionInterfaceService" and LocalFlowName = "FSM_ION_AcknowledgeSourceSystemJournalEntry_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "SourceSystemJournalEntry"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "GeneralLedgerClosePeriodService" and LocalFlowName = "FSM_ION_SyncFinancialCalendar_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "FinancialCalendar"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "GLCPBeginningBalanceService" and LocalFlowName = "FSM_ION_SyncFinancialCalendar_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "FinancialCalendar"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "GeneralLedgerTotalService" and LocalFlowName = "FSM_ION_SyncSourceSystemGLMovement_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SourceSystemGLMovement"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "InspectDeliveryService" and LocalFlowName = "FSM_ION_SyncInspectDelivery_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InspectDelivery"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "IntrastatService" and LocalFlowName = "FSM_ION_SyncLCLTradeStatisticsIntrastat_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "LCLTradeStatistics"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "InventoryAdjustmentService" and LocalFlowName = "FSM_ION_SyncInventoryAdj_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InventoryAdjustment"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "InventoryCountService" and LocalFlowName = "FSM_ION_SyncInvCount_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InventoryCount"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "InventoryLocationService" and LocalFlowName = "FSM_ION_SyncLocation_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Location"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "InventoryTransactionService" and LocalFlowName = "FSM_ION_ProcessInventoryTrans_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "AdvanceShipNotice"
						if(FSMBODConfigurationRel exists)
							invoke Update FSMBODConfigurationRel 	
								invoked.Enable = true
						LocalNoun = "Shipment"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "ItemLocationService" or LocalService = "ItemService") and LocalFlowName = "FSM_ION_SyncItemMaster_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ItemMaster"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "POVendorLocationService" or LocalService = "VendorLocationService") and LocalFlowName = "FSM_ION_SyncShipFromPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ShipFromPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PayableTrackerService" and LocalFlowName = "FSM_ION_SyncPayableTracker_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "PayableTracker"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PayablesInvoiceImportService" and LocalFlowName = "FSM_ION_AcknowledgeSupplierInvoice_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "SupplierInvoice"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PayablesInvoicePaymentService" and LocalFlowName = "FSM_ION_SyncPayableTransaction_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "PayableTransaction"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PayablesInvoiceService" and LocalFlowName = "FSM_ION_SyncSupplierInvoice_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierInvoice"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PersonService" and LocalFlowName = "FSM_ION_SyncPerson_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Person"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessAssetMasterService" and LocalFlowName = "FSM_ION_ProcessAssetMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "AssetMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessBankEntityService" and LocalFlowName = "FSM_ION_ProcessFinancialPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "FinancialPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessContactMasterAPService" and LocalFlowName = "FSM_ION_ProcessContactMaster_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ContactMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessContractService" and LocalFlowName = "FSM_ION_ProcessContract_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "Contract"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessPurchaseOrderService" and LocalFlowName = "FSM_ION_ProcessPurchaseOrder_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "PurchaseOrder"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessVendorGroupService" and LocalFlowName = "FSM_ION_ProcessSupplierPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "SupplierPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProjectContractService" and LocalFlowName = "FSM_ION_SyncProjectContract_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ProjectContract"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProjectService" and LocalFlowName = "FSM_ION_SyncProjectMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ProjectMaster"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "PurchaseOrderReceiptService" or LocalService = "InventoryReturnService") and LocalFlowName = "FSM_ION_SyncReceiveDelivery_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ReceiveDelivery"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "PurchaseOrderService" and LocalFlowName = "FSM_ION_SyncPurchaseOrder_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "PurchaseOrder"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReceivableInvoiceImportService" and LocalFlowName = "FSM_ION_AcknowledgeInvoice_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "Invoice"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "ReceivableInvoiceService" or LocalService = "BillingInvoiceService") and LocalFlowName = "FSM_ION_SyncInvoice_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Invoice"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReceivablePaymentHeaderService" and LocalFlowName = "FSM_ION_SyncDebitTransfer_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "DebitTransfer"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReceivableTrackerService" and LocalFlowName = "FSM_ION_SyncReceivableTracker_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ReceivableTracker"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReceivableTransactionService" and LocalFlowName = "FSM_ION_SyncReceivableTransaction_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ReceivableTransaction"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "RemitToLocationService" and LocalFlowName = "FSM_ION_SyncRemitToPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "RemitToPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReportingChartAccountService" and LocalFlowName = "FSM_ION_SyncChartOfAccounts_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ChartOfAccounts"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ReportingChartService" and LocalFlowName = "FSM_ION_SyncAccountingChart_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AccountingChart"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "RequestingLocationService" and LocalFlowName = "FSM_ION_RequestingLocation_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Location"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "RequisitionReturnService" and LocalFlowName = "FSM_ION_SyncRequisitionReturn_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "AdvanceShipNotice"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "RequisitionService" and LocalFlowName = "FSM_ION_SyncRequisition_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Requisition"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ShipmentService" and LocalFlowName = "FSM_ION_SyncShipment_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Shipment"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "SupplierBalanceService" and LocalFlowName = "FSM_ION_SyncSupplierBalance_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierBalance"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "SupplierRMAService" and LocalFlowName = "FSM_ION_SyncSupplierRMA_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierRMA"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "TaxReportService" and LocalFlowName = "FSM_ION_SyncLCLTaxReport_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "LCLTaxReport"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "VendorGroupService" and LocalFlowName = "FSM_ION_SyncSupplierPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "VendorReturnService" and LocalFlowName = "FSM_ION_ProcessVendorReturn_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "VendorReturn"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "WarehouseShipmentService" and LocalFlowName = "FSM_ION_ProcessShipment_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "Shipment"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "CustomerReturnService" and LocalFlowName = "FSM_ION_SyncCustomerReturn_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CustomerReturn"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "WorkOrderService" and LocalFlowName = "FSM_ION_SyncProductionOrder_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ProductionOrder"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessCustomerBillToService" and LocalFlowName = "FSM_ION_ProcessBillToPartyMaster_Outbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "BillToPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "ProcessCustomerShipToService" and LocalFlowName = "FSM_ION_ProcessShipToPartyMaster_Out")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ShipToPartyMaster"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "AccountService" or LocalService = "AccountingEntityGroupService" or LocalService = "AccountingUnitService"
					or LocalService = "CashCodeService" or LocalService = "CommodityCodeService" or LocalService = "CustomerMajorClassService"
					or LocalService = "GeneralLedgerCompanyService" or LocalService = "ItemGroupService" or LocalService = "ProcurementGroupService"
					or LocalService = "ReportingBasisLedgerService" or LocalService = "TermsCodeService" or LocalService = "ManufacturerService"
					or LocalService = "TerritoryService" or LocalService = "UnitOfMeasureService" or LocalService = "VendorGroupCDService" 
					or LocalService = "GeneralLedgerSystemCodeService" or LocalService = "MajorClassService") and LocalFlowName = "FSM_ION_SyncCodeDefinition_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CodeDefinition"
						LocalIPAOutboundDisable = true
					else
					if((LocalService = "FinanceDimension1Service" or LocalService = "FinanceDimension2Service" or LocalService = "FinanceDimension3Service"
					or LocalService = "FinanceDimension4Service" or LocalService = "FinanceDimension5Service" or LocalService = "FinanceDimension6Service"
					or LocalService = "FinanceDimension7Service" or LocalService = "FinanceDimension8Service" or LocalService = "FinanceDimension9Service" 
					or LocalService = "FinanceDimension10Service") and LocalFlowName = "FSM_ION_SyncCodeDefinition_Out")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CodeDefinition"
						LocalIPAOutboundDisable = true
					else
					if(LocalService = "BLPriceOverrideService" and LocalFlowName = "FSM_ION_BLPriceOverrideAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "BudgetExceedsService" and LocalFlowName = "FSM_ION_BudgetExceedsAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true	
					else
					if(LocalService = "ChargeDisputeService" and LocalFlowName = "FSM_ION_PcardChargeDisputeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ChargeRejectedService" and LocalFlowName = "FSM_ION_PcardChargeRejectedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ChargeReleasedService" and LocalFlowName = "FSM_ION_PcardChargeReleasedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerAddCreditLimitChangeService" and LocalFlowName = "FSM_ION_CustomerAddCreditLimitChangeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerOrderCanceledService" and LocalFlowName = "FSM_ION_CustomerOrderCanceledAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerOrderHoldService" and LocalFlowName = "FSM_ION_CustomerOrderHoldAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerOrderLineHoldService" and LocalFlowName = "FSM_ION_CustomerOrderLineHoldAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerOrderQuoteService" and LocalFlowName = "FSM_ION_CustomerOrderQuoteAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "CustomerOrderReturnService" and LocalFlowName = "FSM_ION_CustomerOrderReturnAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ErrorSuspenseService" and LocalFlowName = "FSM_ION_ErrorSuspenseAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "InspectionRejService" and LocalFlowName = "FSM_ION_InspectionItemRejectedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "InspectionReqService" and LocalFlowName = "FSM_ION_InspectionReqAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true	
					else
					if(LocalService = "MatchInvoiceImportService" and LocalFlowName = "FSM_ION_MatchInvoiceImportAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "OrderEntryBackOrderService" and LocalFlowName = "FSM_ION_OrderEntryBackOrderAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "OverShipClearedService" and LocalFlowName = "FSM_ION_POOverShipClearedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "OverShipExistsService" and LocalFlowName = "FSM_ION_POOverShipExistsAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "POContractService" and LocalFlowName = "FSM_ION_POContractNotifyAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "POCostMessageService" and LocalFlowName = "FSM_ION_POCostMsgAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProcurementCardRejectService" and LocalFlowName = "FSM_ION_ProcurementCardRejectAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProcurementCardRequestService" and LocalFlowName = "FSM_ION_ProcurementCardRequestAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectAdditionService" and LocalFlowName = "FSM_ION_ProjectAddAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectContractAmountChangedService" and LocalFlowName = "FSM_ION_ProjectContractAmountChangedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectDateChangeService" and LocalFlowName = "FSM_ION_ProjectDateChangedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectDeletionService" and LocalFlowName = "FSM_ION_ProjectDeleteAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingActiveService" and LocalFlowName = "FSM_ION_ProjectFundingSourceActiveAndDateRangeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingAmountChangedService" and LocalFlowName = "FSM_ION_ProjectFundingAmountChangedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingDateRangeService" and LocalFlowName = "FSM_ION_ProjectFundingSourceActiveAndDateRangeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingSourceActiveChangeService" and LocalFlowName = "FSM_ION_ProjectFundingSourceActiveAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingSourceAmountChangedService" and LocalFlowName = "FSM_ION_ProjectFundingSourceAmountChangedAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectFundingSourcePriorityService" and LocalFlowName = "FSM_ION_ProjectFundingSourcePriorityAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectPercentChangeService" and LocalFlowName = "FSM_ION_ProjectPercentchangeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectStatusChangedService" and LocalFlowName = "FSM_ION_ProjectStatusChangeAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectStructureAdditionService" and LocalFlowName = "FSM_ION_ProjectStructureAddAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectWatchService" and LocalFlowName = "FSM_ION_ProjectWatchAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "PurchaseOrderReceiptImportService" and LocalFlowName = "FSM_ION_PurchaseOrderReceiptImportAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ReconcilationInvoiceMessageService" and LocalFlowName = "FSM_ION_ReconcilationInvoiceMessageAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "RequisitionImportService" and LocalFlowName = "FSM_ION_RequisitionImportAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ShipmentBkordVoidService" and LocalFlowName = "FSM_ION_ShipmentBackordVoidAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ShipmentReleaseService" and LocalFlowName = "FSM_ION_ShipmentReleaseAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "WHBatchCreationService" and LocalFlowName = "FSM_ION_WHBatchCreationAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "WHShipmentCreationService" and LocalFlowName = "FSM_ION_WHShipmentCreationAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "WarehouseDemandCancelService" and LocalFlowName = "FSM_ION_WarehouseDemandCancelAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectDeletionService" and LocalFlowName = "FSM_ION_ProjectDeleteAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
					else
					if(LocalService = "ProjectDeletionService" and LocalFlowName = "FSM_ION_ProjectDeleteAlert")
						LocalNoun = "PulseAlert"
						LocalAlertEnable = true
				else
				if(LocalDirection = 2)
					if(LocalService = "Acknowledge.AdvanceShipNotice" and LocalFlowName = "FSM_ION_AcknowledgeAdvanceShipNotice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "AdvanceShipNotice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Acknowledge.FinancialPartyMaster" and LocalFlowName = "FSM_ION_AcknowledgeFinancialPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "FinancialPartyMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Acknowledge.PurchaseOrder" and LocalFlowName = "FSM_ION_AcknowledgePurchaseOrder_In")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "PurchaseOrder"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Acknowledge.Shipment" and LocalFlowName = "FSM_ION_AcknowledgeShipment_In")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "Shipment"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Acknowledge.SupplierPartyMaster" and LocalFlowName = "FSM_ION_AcknowledgeSupplierPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Acknowledge
						LocalNoun = "SupplierPartyMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Load.BankStatement" and LocalFlowName = "FSM_ION_LoadBankStatement_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Load
						LocalNoun = "BankStatement"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Load.ReceiveDelivery" and LocalFlowName = "FSM_ION_LoadReceiveDelivery_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Load
						LocalNoun = "ReceiveDelivery"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Load.SupplierInvoice" and LocalFlowName = "FSM_ION_LoadSupplierInvoice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Load
						LocalNoun = "SupplierInvoice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.CodeDefinition" and LocalFlowName = "FSM_ION_ProcessCodeDefinition_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "CodeDefinition"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.ContactMaster" and LocalFlowName = "FSM_ION_ProcessContactMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ContactMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.CurrencyExchangeRateMaster" and LocalFlowName = "FSM_ION_ProcessCurrencyExchangeRateMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "CurrencyExchangeRateMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.CustomerPartyMaster" and LocalFlowName = "FSM_ION_ProcessCustomerPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "CustomerPartyMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.Invoice" and LocalFlowName = "FSM_ION_ProcessInvoice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "Invoice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.ItemMaster" and LocalFlowName = "FSM_ION_ProcessItemMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ItemMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.PurchaseOrder" and LocalFlowName = "FSM_ION_ProcessPurchaseOrder_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "PurchaseOrder"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.ReceiveDelivery" and LocalFlowName = "FSM_ION_ProcessReceiveDelivery_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ReceiveDelivery"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.RemittanceAdvice" and LocalFlowName = "FSM_ION_ProcessRemitAdvice_In")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "RemittanceAdvice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.Requisition" and LocalFlowName = "FSM_ION_ProcessRequisition_In")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "Requisition"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.SourceSystemJournalEntry" and LocalFlowName = "FSM_ION_ProcessSourceSystemJournalEntry_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "SourceSystemJournalEntry"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.SalesOrder" and LocalFlowName = "FSM_ION_ProcessSalesOrder_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "SalesOrder"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.ShipToPartyMaster" and LocalFlowName = "FSM_ION_ProcessShipToPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "ShipToPartyMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.Shipment" and LocalFlowName = "FSM_ION_ProcessShipment_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "Shipment"
						LocalIPAInboundDisable = true		
					else
					if(LocalService = "Process.SupplierInvoice" and LocalFlowName = "FSM_ION_ProcessSupplierInvoice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "SupplierInvoice"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Show.ChartOfAccounts" and LocalFlowName = "FSM_ION_ShowChartOfAccounts_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Show
						LocalNoun = "ChartOfAccounts"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Show.CodeDefinition" and LocalFlowName = "FSM_ION_ShowCodeDefinition_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Show
						LocalNoun = "CodeDefinition"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Show.ItemMaster" and LocalFlowName = "FSM_ION_ShowItemMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Show
						LocalNoun = "ItemMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.AdvanceShipNotice" and LocalFlowName = "FSM_ION_SyncAdvanceShipNotice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AdvanceShipNotice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.AssetMaster" and LocalFlowName = "FSM_ION_SyncAssetMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AssetMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.ChartOfAccounts" and LocalFlowName = "FSM_ION_SyncChartOfAccounts_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ChartOfAccounts"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.CodeDefinition" and LocalFlowName = "FSM_ION_SyncCodeDefinition_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CodeDefinition"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.ExpenseReport" and LocalFlowName = "FSM_ION_SyncExpenseReport_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ExpenseReport"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.InventoryAdjustment" and LocalFlowName = "FSM_ION_SyncInventoryAdjustment_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InventoryAdjustment"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.InventoryCount" and LocalFlowName = "FSM_ION_SyncInventoryCount_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InventoryCount"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.InventoryHold" and LocalFlowName = "FSM_ION_SyncInventoryHold_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "InventoryHold"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.Invoice" and LocalFlowName = "FSM_ION_SyncInvoice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Invoice"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.ItemMaster" and LocalFlowName = "FSM_ION_SyncItemMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ItemMaster"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.MaintenanceOrder" and LocalFlowName = "FSM_ION_SyncMaintenanceOrder_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "MaintenanceOrder"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.Personnel" and LocalFlowName = "FSM_ION_SyncPersonnel_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Personnel"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.ProjectMaster" and LocalFlowName = "FSM_ION_SyncProjectMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ProjectMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.ReceiveDelivery" and LocalFlowName = "FSM_ION_SyncReceiveDelivery_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ReceiveDelivery"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.Requisition" and LocalFlowName = "FSM_ION_SyncRequisition_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Requisition"
						LocalIPAInboundDisable = true	
					else
					if(LocalService = "Sync.Shipment" and LocalFlowName = "FSM_ION_SyncShipment_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "Shipment"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.SupplierInvoice" and LocalFlowName = "FSM_ION_SyncSupplierInvoice_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierInvoice"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.SupplierPartyMaster" and LocalFlowName = "FSM_ION_SyncSupplierPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SupplierPartyMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.SupplierRMA" and LocalFlowName = "FSM_ION_SyncSupplierRMA_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "ProjectMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.BankStatement" and LocalFlowName = "FSM_ION_ProcessBankStatement_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "BankStatement"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.SourceSystemJournalEntry" and LocalFlowName = "FSM_ION_SyncSourceSystemJournalEntry_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "SourceSystemJournalEntry"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.AccountingEntity" and LocalFlowName = "FSM_ION_SyncAccountingEntity_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AccountingEntity"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.AccountingChart" and LocalFlowName = "FSM_ION_SyncAccountingChart_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "AccountingChart"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Sync.CurrencyExchangeRateMaster" and LocalFlowName = "FSM_ION_SyncCurrencyExchangeRateMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Sync
						LocalNoun = "CurrencyExchangeRateMaster"
						LocalIPAInboundDisable = true
					else
					if(LocalService = "Process.BillToPartyMaster" and LocalFlowName = "FSM_ION_ProcessBillToPartyMaster_Inbound")
						LocalVerb = FSMBODConfiguration.Verb.Process
						LocalNoun = "BillToPartyMaster"
						LocalIPAInboundDisable = true
						
				if(LocalNoun = "PulseAlert")
					LocalVerb = FSMBODConfiguration.Verb.Process	
				
				if(FSMBODConfigurationRel exists)
					invoke Update FSMBODConfigurationRel 	
						invoked.Enable = true
					
					if(LocalIPAOutboundDisable)		
						invoke EnableDisable DisablePfiServiceFlowDefinitionRel 
					




				if(LocalAlertEnable and FSMBODConfigurationDetailAlertRel exists)
					invoke Update FSMBODConfigurationDetailAlertRel 	
						invoked.Enable = true
					
					invoke EnableDisable DisablePfiServiceFlowDefinitionRel 	
				
				initialize LocalVerb
				initialize LocalNoun
				initialize LocalDirection
				initialize LocalService
				initialize LocalAlertEnable
				initialize LocalFlowName
				initialize LocalIPAOutboundDisable
				initialize LocalIPAInboundDisable														
