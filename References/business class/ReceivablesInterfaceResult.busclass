ReceivablesInterfaceResult is a BusinessClass
	owned by ar
	prefix is RcvIR

	Ontology
		symbolic key is ReceivablesInterfaceResult

	Patterns
		disable AuditIndex
		disable EffectiveDated

	Persistent Fields
		RunGroup					is AlphaUpper 30
		RunTime						is TimeStamp
		RunType						is Numeric 2
			States
				TransactionInterface		value is 1
				PaymentInterface			value is 2
				LockBoxInterface			value is 3
					default label is "LockboxInterface"	
				Payment2Interface			value is 4
				NonARPaymentInterface		value is 11
				DocumentInterface			value is 12
				TransactionConversion		value is 5
				PaymentConversion			value is 6
				DistributionConversion		value is 7
				ApplicationConversion		value is 8
				DisputeConversion			value is 9
				CommentConversion			value is 10
		Status						is Numeric 1
			disable Auditing
			States
				InProcess						value is 0
				Complete						value is 1
				Incomplete						value is 2
				CompleteWithReleaseFailures		value is 3
				IncompleteWithReleaseFailures	value is 4
		ErrorRunGroup				is AlphaUpper 30
		ResultErrorMessage			is Alpha 150
		RecordsProcessed			is Numeric 10
		Company						is a ReceivableCompany
		CustomerRange
		InterfacedCustomerRange
		PrmReference				is like Reference
		ReleaseBatch				is Boolean
		DepositBankCode				is a BankTransactionCode
		LockBox						is a ReceivableLockBox
			default label is "Lockbox"	
		CashLedgerUserField1		is AlphaUpper size 30
		CashLedgerUserField2		is AlphaUpper size 30
		CashLedgerUserField3		is AlphaUpper size 30
		CashLedgerUserField4		is AlphaUpper size 30


		PostDate					is Date
		DepositDate					is Date
		Operator					is a ReceivableOperator
		Batch						is like ReceivablePaymentHeader
		AddToUnreleasedBatch		is Boolean
		ProcessLevel				is a ReceivableProcessLevel
		CashCode
		Currency
		ExchangeRate				is an OrigRate
		BankCharges					is like InternationalAmount
		BankChargesAccount			is a TransactionCodeBlock	
		ReceivableInterfaceCounts


	Local Fields

		SumOfReceivablePaymentsRelAmountsDone											is Boolean	
		SumOfReceivableInvoicesRelAmountsDone											is Boolean	

		SumOfReceivablePaymentsRelBaseAmount											is an InternationalAmount	
		SumOfReceivableInvoicesRelInvoiceAmountFunctionalAmountEnteredCurrencyAmount	is an InternationalAmount	
		SumOfReceivableInvoicesRelDerivedTransactionCount								is Numeric 7	
		SumOfReceivableInvoicesRelNumberOfLines											is Numeric 3	
		SumOfReceivablePaymentsRelDerivedTransactionCount								is Numeric 7	
		LocalActor																		is Actor		
		SumOfReceivablePaymentRemittanceRelAmountsDone									is Boolean
		SumOfReceivablePaymentRemittanceRelDerivedTransactionCount						is Numeric 7

	Rule Blocks

		SumReceivablePaymentsRelAmounts	
			if (!SumOfReceivablePaymentsRelAmountsDone)	
				initialize SumOfReceivablePaymentsRelBaseAmount	
				initialize SumOfReceivablePaymentsRelDerivedTransactionCount	
					for each ReceivablePaymentsRel
						SumOfReceivablePaymentsRelBaseAmount				 += each.BaseAmount	
						SumOfReceivablePaymentsRelDerivedTransactionCount	 += each.DerivedTransactionCount	
				SumOfReceivablePaymentsRelAmountsDone = true	

		SumReceivableInvoicesRelAmounts	
			if (!SumOfReceivableInvoicesRelAmountsDone)	
				initialize SumOfReceivableInvoicesRelInvoiceAmountFunctionalAmountEnteredCurrencyAmount	
				initialize SumOfReceivableInvoicesRelDerivedTransactionCount	
				initialize SumOfReceivableInvoicesRelNumberOfLines	
					for each ReceivableInvoicesRel
						SumOfReceivableInvoicesRelInvoiceAmountFunctionalAmountEnteredCurrencyAmount	 += each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	
						SumOfReceivableInvoicesRelDerivedTransactionCount								 += each.DerivedTransactionCount	
						SumOfReceivableInvoicesRelNumberOfLines											 += each.NumberOfLines	
				SumOfReceivableInvoicesRelAmountsDone = true	
		
		SumReceivablePaymentRemittanceRelAmounts
			if (!SumOfReceivablePaymentRemittanceRelAmountsDone)
				initialize SumOfReceivablePaymentRemittanceRelDerivedTransactionCount
					for each ReceivablePaymentRemittanceRel
						SumOfReceivablePaymentRemittanceRelDerivedTransactionCount	 += 1
				SumOfReceivablePaymentRemittanceRelAmountsDone = true



	Derived Fields

		NoRecordsToProcessMsg is a MessageField
			restricted
			"NoRecordsToProcess"

		InProcessMessage is a MessageField
			restricted
			"InProcess"

		CompleteMessage is a MessageField
			restricted
			"Complete"

		CompleteWithReleaseFailuresMsg is a MessageField
			"CompleteWithReleaseFailures"

		IncompleteMessage is a MessageField
			restricted
			"Incomplete"

		NoRecordsMessage is a MessageField
			restricted
			"AllErrorsProcessed"

		ResultErrorStatusMesssage is a MessageField
			restricted
			"FatalError:NoRecordsProcessed"

		InterfacedPaymentAmount is a DerivedField	
			type is like InternationalAmount
			include SumReceivablePaymentsRelAmounts	

			return (SumOfReceivablePaymentsRelBaseAmount)	

		InterfacedTransactionsAmount is a DerivedField	
			type is like InternationalAmount
			include SumReceivableInvoicesRelAmounts	

			return (SumOfReceivableInvoicesRelInvoiceAmountFunctionalAmountEnteredCurrencyAmount)	

		InterfacedPaymentCount is a ComputeField	
			type is Numeric 7
			(instance count of ReceivablePaymentsRel)

		InterfacedTransactionsCount is a ComputeField	
			type is Numeric 7
			(instance count of ReceivableInvoicesRel)

		DerivedStatus is a DerivedField
			type is Alpha 50
			if (Status.InProcess)
				return InProcessMessage
			else
			if (Status.CompleteWithReleaseFailures)
				return CompleteWithReleaseFailuresMsg
			else
			if (Status.Complete)
				return CompleteMessage
			else

			if (Incomplete
			and ResultError)
				return ResultErrorStatusMesssage
			else
			if (IncompleteHasPendingRecords)
				return IncompleteMessage
			else
				return NoRecordsMessage

		InvoiceSuccessfulCount is a DerivedField	
			type is Numeric 12
			include SumReceivableInvoicesRelAmounts	

			return (SumOfReceivableInvoicesRelDerivedTransactionCount)	

		TransactionsSuccessfulCount is a DerivedField	
			type is Numeric 12
			include SumReceivableInvoicesRelAmounts	

			return (SumOfReceivableInvoicesRelNumberOfLines)	

		InterfaceInvoiceErrorCount is a DerivedField
			type is Numeric 12
			return (ReceivableInterfaceCounts.TotalHeaderCount - InterfacedTransactionsCount)

		ConversionInvoiceErrorCount is a DerivedField	
			type is Numeric 12
			return (ReceivableInterfaceCounts.TotalHeaderCount - TransactionsSuccessfulCount)

		PaymentSuccessfulCount is a DerivedField
			type is Numeric 12
			include SumReceivablePaymentsRelAmounts	

			return (SumOfReceivablePaymentsRelDerivedTransactionCount)	

		PaymentErrorCount is a DerivedField
			type is Numeric 12
			return (ReceivableInterfaceCounts.TotalHeaderCount - PaymentSuccessfulCount)

		TotalPayment2Count is a DerivedField
			type is Numeric 12
			return (ReceivableInterfaceCounts.TotalHeaderCount + ReceivableInterfaceCounts.AdditionalDetailCount)

		TotalRecordsProcessed is a DerivedField
			type is Numeric 12
			return (RecordsProcessed + ReceivableInterfaceCounts.AdditionalDetailCount)

		TotalDispDistCommentErrorsProcessed is a DerivedField
			type is Numeric 12
			return (RecordsProcessed - ReceivableInterfaceCounts.TotalHeaderCount)

		DerivedRunDate is a DerivedField		
			type is Date
			restricted
			return RunTime date

		RemitSuccessfulCount is a DerivedField
			type is Numeric 12
			include SumReceivablePaymentRemittanceRelAmounts
			return (SumOfReceivablePaymentRemittanceRelDerivedTransactionCount)

		RemitErrorCount is a DerivedField
			type is Numeric 12
			return (ReceivableInterfaceCounts.AdditionalDetailCount - RemitSuccessfulCount)


	Transient Fields
		TransientDerivedStatus is Numeric size 1	
			default label is "Status"
			States
				InProcess						value is 0
				Complete						value is 1
				Incomplete						value is 2
				CompleteWithReleaseFailures		value is 3
				IncompleteWithReleaseFailures	value is 4
			derive value from Status	

		InterfaceRunType						is Numeric 2
			default label is "RunType"
			States
				TransactionInterface		value is 1
				PaymentInterface			value is 2
				LockBoxInterface			value is 3
					default label is "LockboxInterface"	
				Payment2Interface			value is 4
				NonARPaymentInterface		value is 11
				DocumentInterface			value is 12
			derive value from RunType

		ConversionRunType						is Numeric 2
			default label is "RunType"
			States
				TransactionConversion		value is 5
				PaymentConversion			value is 6
				DistributionConversion		value is 7
				ApplicationConversion		value is 8
				DisputeConversion			value is 9
				CommentConversion			value is 10
			derive value from RunType
		RunTypeShort						is Numeric 2
			default label is "RunType"
			derive value from RunType
			States
				TransactionInterface		value is 1
					default label is "Transaction"
				PaymentInterface			value is 2
					default label is "Payment"
				LockBoxInterface			value is 3
					default label is "Lockbox"
				Payment2Interface			value is 4
					default label is "Payment2"	
				NonARPaymentInterface		value is 11
					default label is "NonARPayment"
				DocumentInterface			value is 12
					default label is "DocumentARPayment"













		BypassProjectDateEdit	


	Field Rules
		BankChargesAccount	
			BypassProjectDateEdit = true	


	Conditions

		Incomplete
			when (Status.Incomplete
			or	Status.IncompleteWithReleaseFailures)

		ConversionType
			when (RunType.TransactionConversion
			or	RunType.PaymentConversion
			or	RunType.DistributionConversion
			or	RunType.ApplicationConversion
			or	RunType.DistributionConversion
			or	RunType.DisputeConversion
			or	RunType.CommentConversion)

		InterfaceType
			when (RunType.TransactionInterface
			or	RunType.PaymentInterface
			or	RunType.LockBoxInterface
			or	RunType.Payment2Interface
			or	RunType.NonARPaymentInterface
			or  RunType.DocumentInterface)

		PaymentInterfaceTypeNotPayment2
			when (RunType.PaymentInterface
			or	RunType.LockBoxInterface
			or RunType.NonARPaymentInterface)

		PaymentInterfaceTypeNotPayment2NotNonAR
			when (RunType.PaymentInterface
			or	RunType.LockBoxInterface)

		PaymentInterfaceTypePayment2
			when (RunType.Payment2Interface)

		NonARPaymentInterfaceType
			when (RunType.NonARPaymentInterface)

		Payment2OrDocumentInterface
			when (PaymentInterfaceTypePayment2
			or   RunType.DocumentInterface)

		HasNonARPaymentsCreated
			when (NonARPaymentInterfaceType
			and first ReceivablePaymentsRel exists)

		IncompleteHasPendingRecords
			when (Incomplete
			and  ((RunType.PaymentInterface
			and	first ReceivablePaymentImportRel exists)
			or	(RunType.TransactionInterface
			and	first ReceivableInvoiceImportRel exists)
			or	(RunType.TransactionConversion
			and	first ReceivableInvoiceImportRel exists)
			or	(RunType.Payment2Interface
			and	first ReceivablePaymentImport2Rel exists)
			or  (RunType.NonARPaymentInterface
			and first ReceivableNonARPaymentImportRel exists)
			or	(RunType.DocumentInterface
			and	first DocumentARPaymentImportRel exists)
			or	(RunType.LockBoxInterface
			and	first ReceivableLockBoxImportRel exists)
			or	(RunType.PaymentConversion
			and	first ReceivablePaymentConversionRel exists)
			or	(RunType.ApplicationConversion
			and	first ReceivableApplicationImportRel exists)
			or	(RunType.DistributionConversion
			and	first ReceivableInvoiceDistributionImportRel exists)
			or	(RunType.DisputeConversion
			and	first ReceivableInvoiceDisputeImportRel exists)
			or	(RunType.CommentConversion
			and	first ReceivableInvoiceCommentImportRel exists)))

		IncompleteHasPendingInterfacePayments
			when (Incomplete
			and   RunType.PaymentInterface
			and  first ReceivablePaymentImportRel exists)

		IncompleteHasPendingConversionPayments
			when (Incomplete
			and   RunType.PaymentConversion
			and  first ReceivablePaymentConversionRel exists)

		IncompleteHasPendingInterfaceInvoices
			when (Incomplete
			and   RunType.TransactionInterface
			and   first ReceivableInvoiceImportRel exists)

		IncompleteHasPendingConversionInvoices
			when (Incomplete
			and   RunType.TransactionConversion
			and   first ReceivableInvoiceImportRel exists)

		IncompleteHasPendingPayments2
			when (RunType.Payment2Interface
			and   first ReceivablePaymentImport2RecordInErrorRel exists)	

		IncompleteHasPendingLockBox
			when (Incomplete
			and   RunType.LockBoxInterface
			and   first ReceivableLockBoxImportRel exists)

		IncompleteHasPendingNonARPayments
			when (Incomplete
			and RunType.NonARPaymentInterface
			and first ReceivableNonARPaymentImportRel exists)

		IncompleteHasPendingDocumentARPaymentImport
			when (RunType.DocumentInterface
			and   first DocumentARPaymentImportsWithErrorRel exists)

		HasPaymentsCreated
			restricted
			when ((PaymentInterface
			or	 RunType.PaymentConversion)
			and  first ReceivablePaymentsRel exists)

		HasCustomerPaymentsCreated
			restricted
			when ((PaymentInterface
			or RunType.PaymentConversion)
			and first ReceivablePaymentsRel exists
			and !NonARPaymentInterfaceType)

		HasPaymentsNotCreated
			restricted
			when ((PaymentInterface
			or	 RunType.PaymentConversion)
			and   !ReceivablePaymentsRel exists)

		HasUnreleasedPayments
			restricted
			when (first UnreleasedReceivablePaymentsRel exists)

		InterfaceReleaseFailure
			restricted
			when (PaymentInterface
			and   ReleaseBatch
			and   HasUnreleasedPayments)

		HasTransactionsCreated
			restricted
			when ((RunType.TransactionInterface
			and	first ReceivableInvoicesRel exists)
			or	(RunType.TransactionConversion
			and	first ReceivableInvoicesRel exists))

		HasTransactionsNotCreated
			restricted
			when ((RunType.TransactionInterface
			and	!ReceivableInvoicesRel exists)
			or	(RunType.TransactionConversion
			and	!ReceivableInvoicesRel exists))

		HasUnprocessedWorkDistSum
			when (UnprocessedWorkDistSumRel exists)

		NoRecordsToProcess
			when (Status entered
			and   RecordsProcessed not entered
			and  !IncompleteHasPendingRecords)

		PaymentInterface
			when (RunType.PaymentInterface
			or	RunType.Payment2Interface
			or	RunType.LockBoxInterface
			or RunType.NonARPaymentInterface
			or RunType.DocumentInterface)

		ResultError
			when (ResultErrorMessage entered)

		HasConvertedApplications
			restricted
			when (RunType.ApplicationConversion
			and   first ReceivableApplicationsRel exists)

		IncompleteHasPendingConversionApplications
			when (Incomplete
			and   RunType.ApplicationConversion
			and   first ReceivableApplicationImportRel exists)

		HasConvertedDistributions
			restricted
			when (RunType.DistributionConversion
			and   first ReceivableDistributionsRel exists)

		IncompleteHasPendingConversionDistributions
			when (Incomplete
			and   RunType.DistributionConversion
			and   first ReceivableInvoiceDistributionImportRel exists)

		HasConvertedDisputes
			restricted
			when (RunType.DisputeConversion
			and  first ReceivableInvoiceDisputeRel exists)

		IncompleteHasPendingConversionDisputes
			when (Incomplete
			and   RunType.DisputeConversion
			and   first ReceivableInvoiceDisputeImportRel exists)

		HasConvertedComments
			restricted
			when (RunType.CommentConversion
			and   first CompanyCustomerCommentRel exists)

		IncompleteHasPendingConversionComments
			when (Incomplete
			and   RunType.CommentConversion
			and   first ReceivableInvoiceCommentImportRel exists)

		IsConversionApplication
			when (RunType.ApplicationConversion)

		IsDistDispCommType
			when (RunType.DistributionConversion
			or	RunType.DisputeConversion
			or	RunType.CommentConversion)

		IsTransactionInterface
			restricted
			when (RunType.TransactionInterface)

		IsTransactionConversion
			restricted
			when (RunType.TransactionConversion)

		IsPaymentConversion
			restricted
			when (RunType.PaymentConversion)

		IsApplicationConversion
			restricted
			when (RunType.ApplicationConversion)

		IsDispDistCommConversion
			restricted
			when (RunType.DisputeConversion
			or	RunType.DistributionConversion
			or	RunType.CommentConversion)

		AnyReceivablesInterfaceResultInterfaceTypeRelExists
			restricted
			when (AnyReceivablesInterfaceResultInterfaceTypeRel exists)

		AnyReceivablesInterfaceResultConversionTypeRelExists
			restricted
			when (AnyReceivablesInterfaceResultConversionTypeRel exists)

		SecurityGroupAllowsAccess
			restricted
			when (Company !entered
			or   (Company entered
			and   Company.SecurityGroupAllowsAccess))

		IncompleteHasPendingPayment2Remittances
			restricted
			when (Incomplete
			and   RunType.Payment2Interface
			and   first ReceivablePaymentRemitImportRel exists)

	Relations
		ReceivablePaymentImportRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivablePaymentConversionRel
			one-to-many relation to ReceivablePaymentConversion
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivablePaymentImport2Rel
			one-to-many relation to ReceivablePaymentImport2
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivablePaymentImport2RecordInErrorRel	
			one-to-many relation using ReceivablePaymentImport2Rel
			Instance Selection
				where (related.RecordInError)

		DocumentARPaymentImportRel
			one-to-many relation to DocumentARPaymentImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		DocumentARPaymentImportsWithErrorRel
			one-to-many relation using DocumentARPaymentImportRel
			Instance Selection
				where (related.RecordInError)
				
		ReceivableNonARPaymentImportRel
			one-to-many relation to ReceivableNonARPaymentImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivableInvoiceImportRel
			one-to-many relation to ReceivableInvoiceImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		= ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivableLockBoxImportRel
			one-to-many relation to ReceivableLockBoxImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.ReceivableLockBoxImport.LockBox.Company.FinanceEnterpriseGroup	 = actor.context.FinanceEnterpriseGroup)

		ReceivableApplicationImportRel
			one-to-many relation to ReceivableApplicationImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivableInvoiceDistributionImportRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivableInvoiceDisputeImportRel
			one-to-many relation to ReceivableInvoiceDisputeImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivableInvoiceCommentImportRel
			one-to-many relation to ReceivableInvoiceCommentImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		ReceivablePaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and	related.OriginatingInterfaceRun				 = ReceivablesInterfaceResult)


		UnreleasedReceivablePaymentsRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and	related.OriginatingInterfaceRun				 = ReceivablesInterfaceResult
				and	related.ReceivablePaymentHeader.Status.OpenBatchUnreleased)

		ReceivableInvoicesRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and	related.OriginatingInterfaceRun				 = ReceivablesInterfaceResult
				and	!related.InterfaceInProcess)

		ReceivableApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and   related.OriginatingInterfaceRun			 = ReceivablesInterfaceResult)

		ReceivableDistributionsRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and   related.OriginatingInterfaceRun			 = ReceivablesInterfaceResult)

		ReceivableInvoiceDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses ByInterfaceRun
				related.OriginatingInterfaceRun					 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)

		CompanyCustomerCommentRel
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses ByInterfaceRun
				related.OriginatingInterfaceRun			 = ReceivablesInterfaceResult
			Instance Selection
				where (related.GeneralLedgerCompanyRel.FinanceEnterpriseGroup	 = actor.context.FinanceEnterpriseGroup)


		AnyReceivablesInterfaceResultInterfaceTypeRel
			one-to-many relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
			Instance Selection
				where (related.InterfaceType)

		AnyReceivablesInterfaceResultConversionTypeRel
			one-to-many relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
			Instance Selection
				where (related.ConversionType)

		UnprocessedWorkDistSumRel
			one-to-many relation to ARWorkDistSum
			Field Mapping uses ByResult
				related.ReceivablesInterfaceResult			= ReceivablesInterfaceResult
			Instance Selection
				where (related.GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)

		ReceivablePaymentRemitImportRel
			one-to-many relation to ReceivablePaymentRemitImport
			Field Mapping uses ByInterfaceRun
				related.InterfaceRun		 = ReceivablesInterfaceResult
			Instance Selection
				where (related.IsValidForActorContext)
		
		ReceivablePaymentRemittanceRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses symbolic key
			Instance Selection
				where (related.IsValidForActorContext
				and	related.OriginatingInterfaceRun				 = ReceivablesInterfaceResult)

	Sets
		ByRunTime
			Sort Order
				RunTime descending
				ReceivablesInterfaceResult
				FinanceEnterpriseGroup

		ByRunGroup
			Sort Order
				RunGroup
				ReceivablesInterfaceResult
				FinanceEnterpriseGroup

		ByRunType
			Sort Order
				RunType
				ReceivablesInterfaceResult
				FinanceEnterpriseGroup


	Actions
		Create is a Create Action
			restricted

		Update is an Update Action
			restricted

		FastUpdate is an Update Action
			bypass field rules
			restricted

		Delete is a Delete Action
			valid when (!HasUnprocessedWorkDistSum)

		ProcessSummarizedDistributions is an Instance Action
			valid when (HasUnprocessedWorkDistSum)
			Action Rules
				for each UnprocessedWorkDistSumRel


					invoke CreateSummarizedOffset ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup										= FinanceEnterpriseGroup
						invoked.ReceivableCompanyDataGroup.TransactionCompany				= each.Company
						invoked.ReceivableCompanyGroup.OriginCompany						= each.Company
						invoked.ReceivableCompanyGroup.GlCompany							= each.Company
						invoked.TransactionDate 											= each.ARWorkDistSum.GLDate
						invoked.GeneralLedgerDate											= each.ARWorkDistSum.GLDate
						invoked.Origin														= each.ARWorkDistSum.Origin
						invoked.OriginalCurrency											= each.ARWorkDistSum.Currency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= each.ARWorkDistSum.Rate
						invoked.Status														= 9
						invoked.GeneralLedgerAccount										= each.ReceivableGeneralLedgerCode.DistributionAccount
						invoked.BatchNumber													= 1
						invoked.AccumulationType											= "S"
						invoked.DistributionSource											= "A"
						invoked.DistributionAmount.CurrencyAmount							= each.Amount
						invoked.Description													= "CreatedOffsetFromInvoiceInterface"

				invoke Purge UnprocessedWorkDistSumRel

		ResubmitInterface is an Instance Action
			valid when (IncompleteHasPendingRecords)
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				ResubmitRunGroup				is a RunGroup
				ResubmitCompany					is a ReceivableCompany
				ResubmitCustomerRange			is a CustomerRange
				ResubmitInterfacedCustomerRange	is a InterfacedCustomerRange
				ResubmitReference				is like Reference
				ResubmitReleaseBatch			is Boolean
				ResubmitDepositBankCode			is a BankTransactionCode
					context of PrmFinanceEnterpriseGroup
				ResubmitLockBox					is a ReceivableLockBox
					context of PrmFinanceEnterpriseGroup
					default label is "ResubmitLockbox"	
				ResubmitCashLedgerUserField1	is AlphaUpper size 30
				ResubmitCashLedgerUserField2	is AlphaUpper size 30
				ResubmitCashLedgerUserField3	is AlphaUpper size 30
				ResubmitCashLedgerUserField4	is AlphaUpper size 30

				ResubmitPostDate				is Date
				ResubmitDepositDate				is Date
				ResubmitOperator				is a ReceivableOperator
				ResubmitBatch					is a ReceivablePaymentHeader
				ResubmitAddToUnreleasedBatch	is Boolean
				ResubmitProcessLevel			is a ReceivableProcessLevel
				ResubmitCashCode				is a CashCode
					context of PrmFinanceEnterpriseGroup
				ResubmitCurrency				is a Currency
				ResubmitExchangeRate			is an OrigRate
				ResubmitBankCharges				is like InternationalAmount
				ResubmitBankChargesAccount		is like TransactionCodeBlock	

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				ResubmitRunGroup
					initial value is RunGroup
				ResubmitCompany
					initial value is Company
				ResubmitCustomerRange
					initial value is CustomerRange
				ResubmitInterfacedCustomerRange
					initial value is InterfacedCustomerRange
				ResubmitReference
					initial value is PrmReference
				ResubmitReleaseBatch
					initial value is ReleaseBatch
				ResubmitDepositBankCode
					initial value is DepositBankCode
				ResubmitLockBox
					initial value is LockBox
				ResubmitCashLedgerUserField1
					initial value is CashLedgerUserField1
				ResubmitCashLedgerUserField2
					initial value is CashLedgerUserField2
				ResubmitCashLedgerUserField3
					initial value is CashLedgerUserField3
				ResubmitCashLedgerUserField4
					initial value is CashLedgerUserField4
				ResubmitPostDate
					initial value is PostDate
				ResubmitDepositDate
					initial value is DepositDate
				ResubmitOperator
					initial value is Operator
				ResubmitBatch
					initial value is Batch
				ResubmitAddToUnreleasedBatch
					initial value is AddToUnreleasedBatch
				ResubmitProcessLevel
					initial value is ProcessLevel
				ResubmitCashCode
					initial value is CashCode
				ResubmitCurrency
					initial value is Currency
				ResubmitExchangeRate
					initial value is ExchangeRate
				ResubmitBankCharges
					initial value is BankCharges
				ResubmitBankChargesAccount
					initial value is BankChargesAccount
					BypassProjectDateEdit = true	

			Action Rules
				if  (RunType.TransactionInterface)
					invoke InterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup	 = PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup					 = ResubmitRunGroup
						invoked.PrmCompany					 = ResubmitCompany
						invoked.CustomerRange				 = ResubmitCustomerRange
						invoked.InterfacedCustomerRange		 = ResubmitInterfacedCustomerRange
				else
				if  (RunType.PaymentInterface)
					invoke InterfacePayments ReceivablePaymentImport
						invoked.PrmFinanceEnterpriseGroup	 = PrmFinanceEnterpriseGroup	
						invoked.PrmRunGroup					 = ResubmitRunGroup
						invoked.PrmReference				 = ResubmitReference
						invoked.ReleaseBatch				 = ResubmitReleaseBatch
						invoked.DepositBankCode				 = ResubmitDepositBankCode
				else
				if  (RunType.LockBoxInterface)
					invoke InterfaceLockBox ReceivableLockBoxImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.ReleaseBatch			= ResubmitReleaseBatch
						invoked.DepositBankCode			= ResubmitDepositBankCode
						invoked.LockBox					= ResubmitLockBox
						invoked.CashLedgerUserField1	= ResubmitCashLedgerUserField1
						invoked.CashLedgerUserField2	= ResubmitCashLedgerUserField2
						invoked.CashLedgerUserField3	= ResubmitCashLedgerUserField3
						invoked.CashLedgerUserField4	= ResubmitCashLedgerUserField4
				else
				if  (RunType.Payment2Interface)
					invoke InterfacePayments ReceivablePaymentImport2
						invoked.PrmCompany				= ResubmitCompany
						invoked.PostDate				= ResubmitPostDate
						invoked.DepositDate				= ResubmitDepositDate
						invoked.LockBox					= ResubmitLockBox
						invoked.Operator				= ResubmitOperator
						invoked.Batch					= ResubmitBatch
						invoked.AddToUnreleasedBatch	= ResubmitAddToUnreleasedBatch
						invoked.ProcessLevel			= ResubmitProcessLevel
						invoked.CashCode				= ResubmitCashCode
						invoked.Currency				= ResubmitCurrency
						invoked.ExchangeRate			= ResubmitExchangeRate
						invoked.ReleaseBatch			= ResubmitReleaseBatch
						invoked.PrmReference			= ResubmitReference
						invoked.DepositBankCode			= ResubmitDepositBankCode
						invoked.BankCharges				= ResubmitBankCharges
						invoked.BankChargesAccount		= ResubmitBankChargesAccount
						invoked.CashLedgerUserField1	= ResubmitCashLedgerUserField1
						invoked.CashLedgerUserField2	= ResubmitCashLedgerUserField2
						invoked.CashLedgerUserField3	= ResubmitCashLedgerUserField3
						invoked.CashLedgerUserField4	= ResubmitCashLedgerUserField4
				else
				if (RunType.NonARPaymentInterface)
					invoke InterfaceNonARPayments ReceivableNonARPaymentImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
						invoked.PrmReference			= ResubmitReference
						invoked.PrmOperator				= ResubmitOperator
						invoked.ReleaseBatch			= ResubmitReleaseBatch
				else
				if  (RunType.DocumentInterface)
					invoke InterfacePayments DocumentARPaymentImport
						invoked.PrmCompany				= ResubmitCompany
						invoked.PostDate				= ResubmitPostDate
						invoked.DepositDate				= ResubmitDepositDate
						invoked.LockBox					= ResubmitLockBox
						invoked.Operator				= ResubmitOperator
						invoked.Batch					= ResubmitBatch
						invoked.AddToUnreleasedBatch	= ResubmitAddToUnreleasedBatch
						invoked.ProcessLevel			= ResubmitProcessLevel
						invoked.CashCode				= ResubmitCashCode
						invoked.Currency				= ResubmitCurrency
						invoked.ExchangeRate			= ResubmitExchangeRate
						invoked.ReleaseBatch			= ResubmitReleaseBatch
						invoked.PrmReference			= ResubmitReference
						invoked.DepositBankCode			= ResubmitDepositBankCode
						invoked.BankCharges				= ResubmitBankCharges
						invoked.BankChargesAccount		= ResubmitBankChargesAccount
						invoked.CashLedgerUserField1	= ResubmitCashLedgerUserField1
						invoked.CashLedgerUserField2	= ResubmitCashLedgerUserField2
						invoked.CashLedgerUserField3	= ResubmitCashLedgerUserField3
						invoked.CashLedgerUserField4	= ResubmitCashLedgerUserField4
				else
				if  (RunType.TransactionConversion)
					invoke ConvertInvoices ReceivableInvoiceImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
				else
				if  (RunType.PaymentConversion)
					invoke ConvertPayments ReceivablePaymentConversion
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
				else
				if  (RunType.ApplicationConversion)
					invoke ConvertApplications ReceivableApplicationImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
				else
				if  (RunType.DistributionConversion)
					invoke ConvertDistributions ReceivableInvoiceDistributionImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
				else
				if  (RunType.DisputeConversion)
					invoke ConvertDisputes ReceivableInvoiceDisputeImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany
				else
				if  (RunType.CommentConversion)
					invoke ConvertComments ReceivableInvoiceCommentImport
						invoked.PrmRunGroup				= ResubmitRunGroup
						invoked.PrmCompany				= ResubmitCompany


		DeleteAllInterfaceResults is a Set Action		
			default label is "DeleteAllResults"
			confirmation required
				"DeletingInterfaceResultsWillPreventAccessToAnyListViewsAssociatedWithTheResultSet"

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCutoffDate			  is Date
					default label is "CutoffDate"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				PrmCutoffDate
					required

			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	   DerivedRunDate <= PrmCutoffDate
				and	   InterfaceType
				and	   !HasUnprocessedWorkDistSum)

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoInterfaceResultRecordsFoundToDelete"
						priority is medium

				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "InterfaceResultsHaveBeenDeletedThrough<PrmCutoffDate>"
							priority is medium

				Instance Rules
					invoke Delete

		DeleteAllConversionResults is a Set Action
			default label is "DeleteAllResults"
			confirmation required
				"DeletingConversionResultsWillPreventAccessToAnyListViewsAssociatedWithTheResultSet"

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCutoffDate			  is Date
					default label is "CutoffDate"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				PrmCutoffDate
					required

			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	   DerivedRunDate <= PrmCutoffDate
				and	   ConversionType
				and	   !HasUnprocessedWorkDistSum)

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoConversionResultRecordsFoundToDelete"
						priority is medium

				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "ConversionResultsHaveBeenDeletedThrough<PrmCutoffDate>"
							priority is medium

				Instance Rules
					invoke Delete

