GeneralLedgerTotal is a BusinessClass
	default label is "GlobalLedgerTotal"
    owned by GeneralLedger
    prefix is GLTOT

    Ontology
    	symbolic key is GeneralLedgerTotal

    Patterns
 		implements DynamicCreation 
 		implements AnalyticCube
 			disable continuous update
 			dynamically calculate totals
 			write to base level only 

		implements LightweightAuditing
		implements BODId
		disable AuditIndex
 		disable EffectiveDated
		disable AsOfDateProcessing 		

	Context Fields
		ReportingBasis
		SearchDateRange			        
		ContextStructure				is a ProjectStructure
		Actor
		AccountAnalysisSettings	
		ProjectContract	
		ProjectReportingSettings
		ProjectReportingSettingsAll
		ContextProjectReportingSettings is a ProjectReportingSettings		
		ContextProjectReportingSettingsAll is a ProjectReportingSettingsAll		
		SearchGroup						is a GeneralLedgerTotal group
		BudgetContext					is a Scenario
#ifdef module integration
		FSMInboundBODTracker
#endif
		ColumnarSearchFinanceDimension1Structure	is a FinanceDimension1Structure
		ColumnarSearchFinanceDimension1				is a FinanceDimension1
		ColumnarSearchFinanceDimension2Structure	is a FinanceDimension2Structure
		ColumnarSearchFinanceDimension2				is a FinanceDimension2
		ColumnarSearchFinanceDimension3Structure	is a FinanceDimension3Structure
		ColumnarSearchFinanceDimension3				is a FinanceDimension3
		ColumnarSearchFinanceDimension4Structure	is a FinanceDimension4Structure
		ColumnarSearchFinanceDimension4				is a FinanceDimension4
		ColumnarSearchFinanceDimension5Structure	is a FinanceDimension5Structure
		ColumnarSearchFinanceDimension5				is a FinanceDimension5
		ColumnarSearchFinanceDimension6Structure	is a FinanceDimension6Structure
		ColumnarSearchFinanceDimension6				is a FinanceDimension6
		ColumnarSearchFinanceDimension7Structure	is a FinanceDimension7Structure
		ColumnarSearchFinanceDimension7				is a FinanceDimension7
		ColumnarSearchFinanceDimension8Structure	is a FinanceDimension8Structure
		ColumnarSearchFinanceDimension8				is a FinanceDimension8
		ColumnarSearchFinanceDimension9Structure	is a FinanceDimension9Structure
		ColumnarSearchFinanceDimension9				is a FinanceDimension9
		ColumnarSearchFinanceDimension10Structure	is a FinanceDimension10Structure
		ColumnarSearchFinanceDimension10			is a FinanceDimension10
		ColumnarSearchProjectStructure				is a ProjectStructure
		ColumnarSearchProject						is a Project
		ColumnarSearchAccountingUnitStructure		is a AccountingUnitStructure
		ColumnarSearchAccountingUnit				is a AccountingUnit
		ColumnarSearchReportingChart				is a ReportingChart
		ColumnarSearchGeneralLedgerChartAccount		is a GeneralLedgerChartAccount

    Persistent Fields
		PeriodEndingDate				is Date
    	ChartSection
		FinanceDimension1
		FinanceDimension2
		FinanceDimension3
		FinanceDimension4
		FinanceDimension5
		FinanceDimension6
		FinanceDimension7
		FinanceDimension8
		FinanceDimension9
		FinanceDimension10		
        NetTransactionAmount			is an TotalAmount
			precision is GeneralLedgerTotal.Currency.NumberOfDecimals
        NetFunctionalAmount				is an TotalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        NetAlternateAmount				is an TotalAmount
			precision is AccountingEntity.AlternateCurrency.NumberOfDecimals
        NetAlternateAmount2				is an TotalAmount
			precision is AccountingEntity.AlternateCurrency2.NumberOfDecimals
        NetAlternateAmount3				is an TotalAmount
			precision is AccountingEntity.AlternateCurrency3.NumberOfDecimals
        NetProjectAmount				is an TotalAmount
			precision is GeneralLedgerTotal.Project.Currency.NumberOfDecimals
        NetReportAmount1				is an TotalAmount
 			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
        	default label is "<FinanceEnterpriseGroup.ReportCurrencyOne>"
        NetReportAmount2				is an TotalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
	        default label is "<FinanceEnterpriseGroup.ReportCurrencyTwo>"
		NetReportAmount3				is an TotalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
	        default label is "<FinanceEnterpriseGroup.ReportCurrencyThree>"
		NetReportAmount4				is an TotalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
	        default label is "<FinanceEnterpriseGroup.ReportCurrencyFour>"
		NetReportAmount5				is an TotalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
	        default label is "<FinanceEnterpriseGroup.ReportCurrencyFive>"
        NetUnitsAmount					is an UnitsAmount
		Account
		GeneralLedgerSubAccount
			default label is "GlobalLedgerSubAccount"
		IsUREChartAccount				is Boolean	
        NetFunctionalAmountDebit				is an TotalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
		NetFunctionalAmountCredit				is an TotalAmount
			precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
        NetReportAmount1Debit				is an TotalAmount
 			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
			default label is "<FinanceEnterpriseGroup.ReportCurrencyOne>Debit"
        NetReportAmount1Credit				is an TotalAmount
 			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
			default label is "<FinanceEnterpriseGroup.ReportCurrencyOne>Credit"

	Local Fields
		LocalSystemAccount					is a SystemAccount
		LocalInstAccountingUnit				is like AccountingUnit
		LocalInstFinanceDimension1			is like FinanceDimension1
		LocalInstAccountingEntity			is like AccountingEntity
		LocalToBudgetCurrency				is like Currency 
		LocalBudgetRateGroup				is a BudgetRateScenarioGroup
		LocalCalendarYear					is Alpha 4
		LocalReportingChart					is like ReportingChart
		LocalGeneralLedgerCalendarPeriod	is like GeneralLedgerCalendarPeriod
		LocalCurrencyLedger					is like Ledger
		LocalReportingBasis					is a ReportingBasis
		LocalBasisYear						is Year
		LocalInstLedger						is like Ledger
		BypassActiveCodeBlockEdit



		LocalBudgetTranslationRate			is a BudgetTranslationRate
		LocalAccountingEntity				is like AccountingEntity
		LocalProcess						is Numeric 1
		LocalCloseYear						is Year
		LocalClosePeriod					is a GeneralLedgerClosePeriod
		LocalJournalControl					is Numeric 12
		LocalCurrencyCode					is like Currency
		LocalFrCurrency						is a Currency
		LocalInstTranslationCode			is a GeneralLedgerTranslationCode
		LocalCurrRelationship				is a CurrencyRelationship
		TriangulateFrRel					is a CurrencyRelationship
		TriangulateToRel					is a CurrencyRelationship
		LocalTranslationDate				is a TranslationDate
		LocalTransactionAmount	   		 	is a TotalAmount
		LocalFunctionalAmount	   		 	is a TotalAmount
		LocalAlternateAmount	   		 	is a TotalAmount
		LocalAlternateAmount2	   		 	is a TotalAmount
		LocalAlternateAmount3	   		 	is a TotalAmount
		LocalProjectAmount		   	 		is a TotalAmount
		LocalReportAmount1		    		is a TotalAmount
		LocalReportAmount2			    	is a TotalAmount
		LocalReportAmount3			    	is a TotalAmount
		LocalReportAmount4			    	is a TotalAmount
		LocalReportAmount5			    	is a TotalAmount
		LocalFunctionalRate   			 	is a CurrencyExchangeRate
		LocalAlternateRate    				is a CurrencyExchangeRate
		LocalAlternate2Rate    				is a CurrencyExchangeRate
		LocalAlternate3Rate    				is a CurrencyExchangeRate
		LocalProjectRate    				is a CurrencyExchangeRate
		LocalReport1Rate    				is a CurrencyExchangeRate
		LocalReport2Rate		    		is a CurrencyExchangeRate
		LocalReport3Rate    				is a CurrencyExchangeRate
		LocalReport4Rate    				is a CurrencyExchangeRate
		LocalReport5Rate    				is a CurrencyExchangeRate
		LocalFunctional						is Boolean
		LocalAlternate					 	is Boolean
		LocalAlternate2						is Boolean
		LocalAlternate3						is Boolean
		LocalIsProject						is Boolean
		LocalReport1						is Boolean
		LocalReport2						is Boolean
		LocalReport3						is Boolean
		LocalReport4						is Boolean
		LocalReport5						is Boolean
		LocalProject 						is a Project
		LocalErrorMesage					is Alpha 150
		LocalGainLossResult					is like GainLossResult
		LocalRunSequence					is like RunSequence
		LocalCalculatedAmount	   		 	is a TotalAmount
		LocalCalculatedRate   			 	is a CurrencyExchangeRate
		LocalRoundAmount					is a RoundAmount
		LocalCurrencyTable					is a CurrencyTable		
		LocalCurrencyCalculationGroup		is a CurrencyCalculationGroup
		LocalSkipCalcTranslationCode		is Boolean
		LocalInstFinanceCodeBlock			is a FinanceCodeBlock
		LocalInstRateType					is Numeric 1
  			States
				EndingBalance		value is 1
				PeriodBalance		value is 2
				HistoricalBalance	value is 3
				NoCalculation		value is 4
		LocalGainLossTotal					is a GainLossTotal
		LocalSystemCode						is a GeneralLedgerSystemCode

		LocalBasisYearTotal				is a ReportingBasisYearTotal
		LocalGeneralLedgerTotal			is a GeneralLedgerTotal
		LocalAUZoneBalance				is a AccountingUnitZoneBalance
		LocalChartSection				is a ChartSection
		ActionCode
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		LocalAccountingBookTypeCode		is Alpha 10
		LocalAccountType				is Alpha 15
		LocalWorkUnitTitle				is a PfiWorkTitle
		OldDimensionCode				is like DimensionCode
		LocalYearEndReportBegPeriod			is a GeneralLedgerCalendarYear
		LocalYearEndReportingBasisYear		is a ReportingBasisYear
		LocalYearEndCalendarPeriod			is a GeneralLedgerCalendarPeriod
		LocalYearEndReportingBasisLedger	is a Ledger
		LocalYearEndGLTotalLedger			is a Ledger
		LocalYearEndSystem					is a GeneralLedgerSystemCode
		LocalYearEndCurrency				is a Currency
		LocalYearEndAccountingUnit			is an AccountingUnit
		LocalYearEndProject					is a Project
		LocalYearEndDimensionCode				is a DimensionCode
		LocalYearEndGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
		LocalYearEndReportType					is Numeric 1
			States
				BalanceSheetOpening			value is 1
				ProfitAndLoss    			value is 2
				BalanceSheetClosing			value is 3			
		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalInstGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
		LocalInstADBOrganizationDimension	is like AccountingUnit
		LocalDate							is Date
		LocalYearEndJournalYear				is a ReportingBasisYear
		LocalFinanceCodeBlockRE				is a FinanceCodeBlock		
		LocalBasisEndPeriod					is a GeneralLedgerCalendarPeriod
		LocalRECurrency						is a Currency
		LocalEndCalendarPeriod			is a GeneralLedgerCalendarPeriod	
		LocalCodeBlockDimensionType			is like CodeBlockDimensionType	
		LocalFinanceCodeBlockADB			is a FinanceCodeBlock			
		LocalZeroStringLength				is Numeric 2
		LocalBudgetScenario					is like Scenario
		LocalBudgetCodeBlock				is a BudgetCodeBlock
		

		LocalNativeLPLBODTrigger			is Boolean
		LocalBODTrigger						is Boolean
		Error            					is Boolean
	    ErrorMessage    					is Alpha 300
	    LocalFSMInboundBODTracker			is Numeric 15
	    LocalConfigurationParameter			is Alpha size up to 200
#ifdef module integration
		NewBODTracker  						is a FSMInboundBODTracker view
#endif


		LocalGLCloseConfiguration			is a GeneralLedgerCloseConfiguration
		LocalGLCloseYear					is a GeneralLedgerCloseYear



	Transient Fields
		TransactionType			is Numeric 1
		TransactionAmount		is an InternationalAmount
		FunctionalAmount		is an InternationalAmount
		AlternateAmount			is an InternationalAmount
		AlternateAmount2		is an InternationalAmount
		AlternateAmount3		is an InternationalAmount
		ProjectAmount			is an InternationalAmount
		ReportAmount1			is an InternationalAmount
		ReportAmount2			is an InternationalAmount
		ReportAmount3			is an InternationalAmount
		ReportAmount4			is an InternationalAmount
		ReportAmount5			is an InternationalAmount
		UnitsAmount
		FunctionalAmountDebit		is an InternationalAmount
		FunctionalAmountCredit		is an InternationalAmount
		ReportAmount1Debit			is an InternationalAmount
		ReportAmount1Credit			is an InternationalAmount
		TransientCalendarYear	is Alpha 4
			derive value from DerivedCalendarYear
		UpdateChangesOnly		is Boolean

  	Field Groups
		FEGAndEntity
			FinanceEnterpriseGroup
			AccountingEntity
  	
	Dimensions
		Scenario
			caption is representative text
			Attributes
				Description
				CommitmentType
		AccountingEntity
			top node is ReportingBasis.AccountingEntityTopNode
			label is "<FinanceEnterpriseGroup.AccountingEntityLabel>"
			caption is representative text
			Attributes
				Name
				FiscalYear
				CurrentPeriod.GeneralLedgerCalendarPeriod
				FunctionalCurrency
				AlternateCurrency
				AlternateCurrency2
				AlternateCurrency3
				SequenceNumber
		GeneralLedgerTotal.Currency
			dimension name is Currency
			Attributes
				Description
				ISOCode
		GeneralLedgerTotal.AccountingUnit
			suppress dimension when (!FinanceEnterpriseGroup.AccountingUnitOrder entered)
			top node is ReportingBasis.AccountingUnitTopNodeGroup
			label is "<FinanceEnterpriseGroup.AccountingUnitLabel>"
			dimension name is AccountingUnit
			caption is representative text
			Attributes
				Description
				Level
				SequenceNumber
				FundType
		GeneralLedgerTotal.GeneralLedgerChartAccount
			top node is ReportingBasis.ChartAccountTopNode
			label is "<FinanceEnterpriseGroup.AccountLabel>"
			dimension name is ChartAccount
			caption is representative text
			Attributes
				AccountDescription
				ChartSection				
				AccountType
				AccountSubType
				ChartType
				SystemAccount
				NaturalBalance
				Account
				GeneralLedgerSubAccount
				Level
				SequenceNumber
				XbrlTag
				DisplayAccount
		GeneralLedgerTotal.Project
			suppress dimension when (!FinanceEnterpriseGroup.ProjectOrder entered)
			top node is ReportingBasis.ProjectTopNode
			label is "<FinanceEnterpriseGroup.ProjectLabel>"
			dimension name is Project
			caption is representative text
			Attributes
				DisplayProject
				ProjectType
				Level	
				Description
				Billable
				Watch
				WatchedBy
				WatchedByEmail
				WatchedByPhone
				WatchedByName
				SequenceNumber
				Active
				PersonResponsible
				PersonResponsibleEmail
				PersonResponsiblePhone
				PersonResponsibleName
				ProjectDateRange.BeginDate
				ProjectDateRange.EndDate
				Contract
				Currency
				BudgetIdentifier	
				ProjectTeam							
		FinanceDimension1
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension1Order entered)
			top node is ReportingBasis.FinanceDimension1TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension1Label>"
			caption is representative text
			Attributes
				Description
				FundType
		FinanceDimension2
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension2Order entered)
			top node is ReportingBasis.FinanceDimension2TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension2Label>"
			caption is representative text
			Attributes
				Description		
		        Amount		
				CFDANumber	
				DateRange.Begin
				DateRange.End
		FinanceDimension3
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension3Order entered)
			top node is ReportingBasis.FinanceDimension3TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension3Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension4
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension4Order entered)
			top node is ReportingBasis.FinanceDimension4TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension4Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension5
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension5Order entered)
			top node is ReportingBasis.FinanceDimension5TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension5Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension6
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension6Order entered)
			top node is ReportingBasis.FinanceDimension6TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension6Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension7
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension7Order entered)
			top node is ReportingBasis.FinanceDimension7TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension7Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension8
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension8Order entered)
			top node is ReportingBasis.FinanceDimension8TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension8Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension9
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension9Order entered)
			top node is ReportingBasis.FinanceDimension9TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension9Label>"
			caption is representative text
			Attributes
				Description		
		FinanceDimension10
			suppress dimension when (!FinanceEnterpriseGroup.FinanceDimension10Order entered)
			top node is ReportingBasis.FinanceDimension10TopNode
			label is "<FinanceEnterpriseGroup.FinanceDimension10Label>"
			caption is representative text
			Attributes
				Description	
	    GeneralLedgerTotal.EntityYearPeriod
	    	is a variable period dimension with year of DerivedPeriodYear

				default label is "<PeriodName>"
				current date period is DerivedCurrentDatePeriodDimValue 
				year when PeriodType.Year		
				quarter when PeriodType.Quarter	
				month when PeriodType.Month		
				week when PeriodType.Week		
				day when PeriodType.EndDate		

				start date is DerivedStartDate	
				end date is DerivedEndDate	
				parent period is DerivedParentPeriodDimValue	
				next period is DerivedNextPeriodDimValue	
				previous period is DerivedPreviousPeriodDimValue	
				beginning balance is DerivedLTDBeginningBalancePeriodDimValue	
				ending balance is DerivedLTDEndingBalancePeriodDimValue	
				beginning ytd balance is DerivedYTDBeginningBalancePeriodDimValue
				ending ytd balance is DerivedYTDEndingBalancePeriodDimValue
			top node is ReportingBasis.GeneralLedgerCalendar.TopNode  
	    	label is "CalendarPeriod"
			dimension name is CalendarPeriod
			caption is representative text
	    	Attributes
	    		DisplayPeriod
	    		PeriodType
	    		DerivedDEPMPeriod
	    		BICalendarSequence
	    		YTDCrossReference
	    GeneralLedgerTotal.System
			label is "System"
	    	dimension name is System
			caption is representative text
	    	Attributes
	    		Description
	    GeneralLedgerTotal.Ledger
			top node is ReportingBasis.LedgerTopNode
			label is "Ledger"
	    	dimension name is Ledger
			caption is representative text
	    	Attributes
	    		Description
	    





	Measures
	    NetFunctionalAmount
	    	measure name is FunctionalAmount
			Dimension Based Measures
             	ActualFunctionalAmount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentFunctionalAmount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceFunctionalAmount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetFunctionalAmount
					Dimension Values
						Scenario value is BudgetContext
	    NetTransactionAmount
	    	measure name is TransactionAmount
			Dimension Based Measures
             	ActualTransactionAmount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentTransactionAmount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceTransactionAmount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetTransactionAmount
					Dimension Values
						Scenario value is BudgetContext
	    NetAlternateAmount
	    	measure name is AlternateAmount
			Dimension Based Measures
             	ActualAlternateAmount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentAlternateAmount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceAlternateAmount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetAlternateAmount
					Dimension Values
						Scenario value is BudgetContext
	    NetAlternateAmount2
	    	measure name is AlternateAmount2
			Dimension Based Measures
             	ActualAlternate2Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentAlternate2Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceAlternate2Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetAlternate2Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetAlternateAmount3
	    	measure name is AlternateAmount3
			Dimension Based Measures
             	ActualAlternate3Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentAlternate3Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceAlternate3Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetAlternate3Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetProjectAmount
	    	measure name is ProjectAmount
			Dimension Based Measures
             	ActualProjectAmount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentProjectAmount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceProjectAmount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetProjectAmount
					Dimension Values
						Scenario value is BudgetContext
	    NetReportAmount1
	    	measure name is ReportAmount1
			Dimension Based Measures
             	ActualReport1Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReport1Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReport1Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReport1Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetReportAmount2
	    	measure name is ReportAmount2
			Dimension Based Measures
             	ActualReport2Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReport2Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReport2Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReport2Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetReportAmount3
	    	measure name is ReportAmount3
			Dimension Based Measures
             	ActualReport3mount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReport3Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReport3Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReport3Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetReportAmount4
	    	measure name is ReportAmount4
			Dimension Based Measures
             	ActualReport4Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReport4Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReport4Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReport4Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetReportAmount5
	    	measure name is ReportAmount5
			Dimension Based Measures
             	ActualReport5Amount
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReport5Amount
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReport5Amount
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReport5Amount
					Dimension Values
						Scenario value is BudgetContext
	    NetUnitsAmount
	    	measure name is UnitsAmount
		NetFunctionalAmountDebit
			measure name is FunctionalAmountDebit
			Dimension Based Measures
             	ActualFunctionalAmountDebit
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentFunctionalAmountDebit
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceFunctionalAmountDebit
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetFunctionalAmountDebit
					Dimension Values
						Scenario value is BudgetContext
        NetReportAmount1Debit
			measure name is ReportAmount1Debit
			Dimension Based Measures
             	ActualReportAmount1Debit
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReportAmount1Debit
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReportAmount1Debit
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReportAmount1Debit
					Dimension Values
						Scenario value is BudgetContext
		NetFunctionalAmountCredit
			measure name is FunctionalAmountCredit
			Dimension Based Measures
             	ActualFunctionalAmountCredit
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentFunctionalAmountCredit
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceFunctionalAmountCredit
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetFunctionalAmountCredit
					Dimension Values
						Scenario value is BudgetContext
        NetReportAmount1Credit
			measure name is ReportAmount1Credit
			Dimension Based Measures
             	ActualReportAmount1Credit
                 	Dimension Values
                      	Scenario value is FinanceEnterpriseGroup.ActualsScenario
           		CommitmentReportAmount1Credit
                   	Dimension Values
						Scenario value is FinanceEnterpriseGroup.CommitmentsScenario
				EncumbranceReportAmount1Credit
                    Dimension Values
                        Scenario value is FinanceEnterpriseGroup.EncumbrancesScenario
				BudgetReportAmount1Credit
					Dimension Values
						Scenario value is BudgetContext

	Rule Blocks
		InitializeAmounts
		    initialize NetTransactionAmount
		    initialize NetFunctionalAmount
		    initialize NetAlternateAmount
		    initialize NetAlternateAmount2
		    initialize NetAlternateAmount3
		    initialize NetProjectAmount
		    initialize NetReportAmount1
		    initialize NetReportAmount2
		    initialize NetReportAmount3
		    initialize NetReportAmount4
		    initialize NetReportAmount5
		    initialize NetUnitsAmount
			initialize NetFunctionalAmountDebit
			initialize NetReportAmount1Debit
			initialize NetFunctionalAmountCredit
			initialize NetReportAmount1Credit
		
		UpdateActualTotal
			if (!Account entered)
				Account 				= GeneralLedgerTotal.GeneralLedgerChartAccount.Account
				GeneralLedgerSubAccount = GeneralLedgerTotal.GeneralLedgerChartAccount.GeneralLedgerSubAccount
			if  (GeneralLedgerTotal.EntityYearPeriod.PeriodType.BeginningBalance
			and !UpdateChangesOnly)
				include InitializeAmounts

	    	ChartSection	= GeneralLedgerTotal.GeneralLedgerChartAccount.ChartSection

			NetTransactionAmount		+= TransactionAmount
			NetFunctionalAmount			+= FunctionalAmount
			NetAlternateAmount			+= AlternateAmount
			NetAlternateAmount2			+= AlternateAmount2
			NetAlternateAmount3			+= AlternateAmount3
			NetProjectAmount			+= ProjectAmount
			NetReportAmount1			+= ReportAmount1
			NetReportAmount2			+= ReportAmount2
			NetReportAmount3			+= ReportAmount3
			NetReportAmount4			+= ReportAmount4
			NetReportAmount5			+= ReportAmount5
			NetUnitsAmount				+= UnitsAmount
			NetFunctionalAmountDebit	+= FunctionalAmountDebit
			NetReportAmount1Debit		+= ReportAmount1Debit
			NetFunctionalAmountCredit	+= FunctionalAmountCredit
			NetReportAmount1Credit		+= ReportAmount1Credit
			UpdateChangesOnly			= false

			initialize TransactionAmount
			initialize FunctionalAmount
			initialize AlternateAmount
			initialize AlternateAmount2
			initialize AlternateAmount3
			initialize ProjectAmount
			initialize ReportAmount1
			initialize ReportAmount2
			initialize ReportAmount3
			initialize ReportAmount4
			initialize ReportAmount5
			initialize UnitsAmount
			initialize FunctionalAmountDebit
			initialize ReportAmount1Debit
			initialize FunctionalAmountCredit
			initialize ReportAmount1Credit


		SetLocalCurrencyFlag
			LocalFunctional					= PrmFunctional
			LocalAlternate					= PrmAlternate
			LocalAlternate2					= PrmAlternate2
			LocalAlternate3					= PrmAlternate3
			LocalIsProject					= PrmProject
			LocalReport1					= PrmReport1
			LocalReport2					= PrmReport2
			LocalReport3					= PrmReport3
			LocalReport4					= PrmReport4
			LocalReport5					= PrmReport5
			if (!PrmReport1
			and	PrmFunctional
			and PrmOption.Revalue
			and PrmEnterpriseGroup.ReportCurrencyOne entered
			and PrmAccountingEntity.FunctionalCurrency = PrmEnterpriseGroup.ReportCurrencyOne)
				LocalReport1					= true
			if (!PrmReport2
			and	PrmFunctional
			and PrmOption.Revalue
			and PrmEnterpriseGroup.ReportCurrencyTwo entered
			and PrmAccountingEntity.FunctionalCurrency = PrmEnterpriseGroup.ReportCurrencyTwo)
				LocalReport2					= true
			if (!PrmReport3
			and	PrmFunctional
			and PrmOption.Revalue
			and PrmEnterpriseGroup.ReportCurrencyThree entered
			and PrmAccountingEntity.FunctionalCurrency = PrmEnterpriseGroup.ReportCurrencyThree)
				LocalReport3					= true
			if (!PrmReport4
			and	PrmFunctional
			and PrmOption.Revalue
			and PrmEnterpriseGroup.ReportCurrencyFour entered
			and PrmAccountingEntity.FunctionalCurrency = PrmEnterpriseGroup.ReportCurrencyFour)
				LocalReport4					= true
			if (!PrmReport5
			and	PrmFunctional
			and PrmOption.Revalue
			and PrmEnterpriseGroup.ReportCurrencyFive entered
			and PrmAccountingEntity.FunctionalCurrency = PrmEnterpriseGroup.ReportCurrencyFive)
				LocalReport5					= true

		TranslationCodeCalculation
			initialize LocalFunctionalAmount
			initialize LocalAlternateAmount
			initialize LocalAlternateAmount2
			initialize LocalAlternateAmount3
			initialize LocalProjectAmount
			initialize LocalReportAmount1
			initialize LocalReportAmount2
			initialize LocalReportAmount3
			initialize LocalReportAmount4
			initialize LocalReportAmount5
			initialize LocalSkipCalcTranslationCode

			LocalInstFinanceCodeBlock		= LocalFinanceCodeBlock

			LocalCurrRelationship.FromCurrency	    = LocalFrCurrency
			if (LocalFunctional)
				if (LocalFrCurrency			= PrmAccountingEntity.FunctionalCurrency)
					initialize LocalFunctionalAmount
					initialize GltotFunctionalAmount


				else
					LocalCurrRelationship.ToCurrency	= PrmAccountingEntity.FunctionalCurrency
					include GetAmountAndRate
					LocalFunctionalRate					= LocalCalculatedRate
					LocalFunctionalAmount				= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalFunctionalAmount
						initialize LocalFunctionalRate
						initialize GltotFunctionalAmount

			if (LocalAlternate
			and PrmAccountingEntity.AlternateCurrency entered)
				if (LocalFrCurrency			= PrmAccountingEntity.AlternateCurrency)
					initialize LocalAlternateAmount
					initialize GltotAlternateAmount


				else
					LocalCurrRelationship.ToCurrency	= PrmAccountingEntity.AlternateCurrency
					include GetAmountAndRate
					LocalAlternateRate					= LocalCalculatedRate
					LocalAlternateAmount				= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalAlternateAmount
						initialize LocalAlternateRate
						initialize GltotAlternateAmount

			if (LocalAlternate2
			and PrmAccountingEntity.AlternateCurrency2 entered)
				if (LocalFrCurrency			= PrmAccountingEntity.AlternateCurrency2)
					initialize LocalAlternateAmount2
					initialize GltotAlternateAmount2


				else
					LocalCurrRelationship.ToCurrency	= PrmAccountingEntity.AlternateCurrency2
					include GetAmountAndRate
					LocalAlternate2Rate					= LocalCalculatedRate
					LocalAlternateAmount2				= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalAlternateAmount2
						initialize LocalAlternate2Rate
						initialize GltotAlternateAmount2

			if (LocalAlternate3
			and PrmAccountingEntity.AlternateCurrency3 entered)
				if (LocalFrCurrency			= PrmAccountingEntity.AlternateCurrency3)
					initialize LocalAlternateAmount3
					initialize GltotAlternateAmount3


				else
					LocalCurrRelationship.ToCurrency	= PrmAccountingEntity.AlternateCurrency3
					include GetAmountAndRate
					LocalAlternate3Rate					= LocalCalculatedRate
					LocalAlternateAmount3				= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalAlternateAmount3
						initialize LocalAlternate3Rate
						initialize GltotAlternateAmount3

			if (LocalIsProject
			and LocalProject.Currency entered)
				if (LocalFrCurrency		= LocalProject.Currency)
					initialize LocalProjectAmount
					initialize GltotProjectAmount


				else
					LocalCurrRelationship.ToCurrency 	= LocalProject.Currency
					include GetAmountAndRate
					LocalProjectRate					= LocalCalculatedRate
					LocalProjectAmount					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalProjectAmount
						initialize LocalProjectRate
						initialize GltotProjectAmount

			if (LocalReport1
			and FinanceEnterpriseGroup.ReportCurrencyOne entered)
				if (LocalFrCurrency			= FinanceEnterpriseGroup.ReportCurrencyOne)
					initialize LocalReportAmount1
					initialize GltotReportAmount1


				else
					LocalCurrRelationship.ToCurrency	= FinanceEnterpriseGroup.ReportCurrencyOne
					include GetAmountAndRate
					LocalReport1Rate					= LocalCalculatedRate
					LocalReportAmount1					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalReportAmount1
						initialize LocalReport1Rate
						initialize GltotReportAmount1

			if (LocalReport2
			and FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				if (LocalFrCurrency			= FinanceEnterpriseGroup.ReportCurrencyTwo)
					initialize LocalReportAmount2
					initialize GltotReportAmount2


				else
					LocalCurrRelationship.ToCurrency	= FinanceEnterpriseGroup.ReportCurrencyTwo
					include GetAmountAndRate
					LocalReport2Rate					= LocalCalculatedRate
					LocalReportAmount2					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalReportAmount2
						initialize LocalReport2Rate
						initialize GltotReportAmount2

			if (LocalReport3
			and FinanceEnterpriseGroup.ReportCurrencyThree entered)
				if (LocalFrCurrency			= FinanceEnterpriseGroup.ReportCurrencyThree)
					initialize LocalReportAmount3
					initialize GltotReportAmount3


				else
					LocalCurrRelationship.ToCurrency	= FinanceEnterpriseGroup.ReportCurrencyThree
					include GetAmountAndRate
					LocalReport3Rate					= LocalCalculatedRate
					LocalReportAmount3					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalReportAmount3
						initialize LocalReport3Rate
						initialize GltotReportAmount3

			if (LocalReport4
			and FinanceEnterpriseGroup.ReportCurrencyFour entered)
				if (LocalFrCurrency			= FinanceEnterpriseGroup.ReportCurrencyFour)
					initialize LocalReportAmount4
					initialize GltotReportAmount4


				else
					LocalCurrRelationship.ToCurrency    = FinanceEnterpriseGroup.ReportCurrencyFour
					include GetAmountAndRate
					LocalReport4Rate					= LocalCalculatedRate
					LocalReportAmount4					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalReportAmount4
						initialize LocalReport4Rate
						initialize GltotReportAmount4

			if (LocalReport5
			and FinanceEnterpriseGroup.ReportCurrencyFive entered)
				if (LocalFrCurrency			= FinanceEnterpriseGroup.ReportCurrencyFive)
					initialize LocalReportAmount5
					initialize GltotReportAmount5


				else
					LocalCurrRelationship.ToCurrency	= FinanceEnterpriseGroup.ReportCurrencyFive
					include GetAmountAndRate
					LocalReport5Rate					= LocalCalculatedRate
					LocalReportAmount5					= LocalCalculatedAmount



					if (LocalErrorMesage entered)
						initialize LocalReportAmount5
						initialize LocalReport5Rate
						initialize GltotReportAmount5

		GainLossResultError
			if (!LocalSkipCalcTranslationCode)
				invoke Create GainLossResultDetail
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.ReportingBasis			= LocalReportingBasis 
					invoked.GainLossResult		  	= LocalGainLossResult
					invoked.ErrorMessage		  	= LocalErrorMesage

		JournalControlFields
			invoked.PostingDate				= LocalPostingDate
			invoked.TransactionDate			= LocalPostingDate
			invoked.Ledger					= LocalLedger
			invoked.System					= "GL"
			invoked.ReleaseDate				= current corporate date
			invoked.Description			= NewJournalDescription
			invoked.GainLossRunSequence	= PrmRunSequence	
			invoked.AutoReverse				= PrmAutoReverse
			invoked.DefaultAutoReverse		= PrmAutoReverse
			invoked.GainLossReportingBasis	= PrmReportingBasis
			invoked.Currency				= LocalFromCurrency
			invoked.PrimaryLedger			= LocalPrimaryLedger
			initialize invoked.NewManualJournalControlType

		LedgerTransactitonFields
			invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
			invoked.AccountingEntity							= PrmAccountingEntity
			invoked.GeneralLedgerClosePeriod					= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
			invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
			invoked.GeneralLedgerTransaction					= LocalTransactionSequence
			invoked.FinanceCodeBlock							= LocalFinanceCodeBlock
			invoked.DimensionCode								= LocalDimensionCode
			invoked.CurrencyCode								= LocalTranCurrency
			invoked.AutoReverse									= PrmAutoReverse
			if (LocalProcess	= 1)
				invoked.GeneralLedgerEvent						= "GR"
			else
				invoked.GeneralLedgerEvent						= "CT"
			invoked.System										= LocalSystem
			initialize invoked.TransactionAmount	
			invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalAmount
			invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateAmount
			invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateAmount2
			invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateAmount3
			invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= LocalProjectAmount
			invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReportAmount1
			invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReportAmount2
			invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReportAmount3
			invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReportAmount4
			invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReportAmount5							
			invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate 	= LocalFunctionalRate
			invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= LocalAlternateRate
			invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= LocalAlternate2Rate
			invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= LocalAlternate3Rate
			invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= LocalProjectRate
			invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalReport1Rate
			invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalReport2Rate
			invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalReport3Rate
			invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalReport4Rate
			invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalReport5Rate						
			invoked.GainLossRunSequence											= PrmRunSequence	
			invoked.PrimaryLedger												= LocalPrimaryLedger	
			invoked.TransientJournalizeGroup									= LocalJournalizeGroup
			invoked.DoNotUpdateZoneTotal										= true
			invoked.GainLosslinkSequence										= LocalTransactionLinkSequence	

		CreateRetainedEarningsRevenueTransaction		
			invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
				invoked.TransientFromProcessRE						= true
				invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
				invoked.AccountingEntity							= PrmAccountingEntity
				invoked.GeneralLedgerClosePeriod					= PrmBasisEndPeriod
				invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction					= LocalTransactionSequence
				invoked.FinanceCodeBlock							= LocalFinanceCodeBlockRE	
				invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalChartAccount
				invoked.CurrencyCode								= PrmAccountingEntity.FunctionalCurrency
				invoked.GeneralLedgerEvent							= "JE"
				invoked.System										= "GL"
				invoked.TransactionAmount											= (RevenueFunctionalAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = (RevenueFunctionalAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (RevenueAlternateAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (RevenueAlternateAmount2Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (RevenueAlternateAmount3Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= (RevenueProjectAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (RevenueReportAmount1Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (RevenueReportAmount2Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (RevenueReportAmount3Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (RevenueReportAmount4Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (RevenueReportAmount5Total * LocalMultiplier)
				invoked.PrimaryLedger												= LocalPrimaryLedger

		CreateRetainedEarningsExpenseTransaction		
			invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
				invoked.TransientFromProcessRE						= true
				invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
				invoked.AccountingEntity							= PrmAccountingEntity
				invoked.GeneralLedgerClosePeriod					= PrmBasisEndPeriod
				invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction					= LocalTransactionSequence
				invoked.FinanceCodeBlock							= LocalFinanceCodeBlockRE	
				invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalChartAccount
				invoked.CurrencyCode								= PrmAccountingEntity.FunctionalCurrency
				invoked.GeneralLedgerEvent							= "JE"
				invoked.System										= "GL"
				invoked.TransactionAmount											= (ExpenseFunctionalAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = (ExpenseFunctionalAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (ExpenseAlternateAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (ExpenseAlternateAmount2Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (ExpenseAlternateAmount3Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= (ExpenseProjectAmountTotal * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (ExpenseReportAmount1Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (ExpenseReportAmount2Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (ExpenseReportAmount3Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (ExpenseReportAmount4Total * LocalMultiplier)
				invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (ExpenseReportAmount5Total * LocalMultiplier)
				invoked.PrimaryLedger												= LocalPrimaryLedger

		GainLossLedgerTransactitonFields
			LocalTransactionSequence 		+= 1
			invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
			invoked.AccountingEntity							= PrmAccountingEntity
			invoked.GeneralLedgerClosePeriod					= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
			invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
			invoked.GeneralLedgerTransaction					= LocalTransactionSequence
			invoked.FinanceCodeBlock.Ledger						= LocalAccountingEntityJournalView.Ledger
			invoked.FinanceCodeBlock.ToAccountingEntity			= PrmAccountingEntity
			invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGainLossAccount
			if (FinanceEnterpriseGroup.AccountingUnitRequired)
				invoked.FinanceCodeBlock.AccountingUnit				= LocalZoneAccountingUnit
			if (FinanceEnterpriseGroup.FinanceDimension1Required)
				invoked.FinanceCodeBlock.FinanceDimension1			= LocalZoneDimension1
			if (PrmOtherDimensions)
				invoked.FinanceCodeBlock.FinanceDimension1			= LocalGainLossFinanceDimension1
				invoked.FinanceCodeBlock.FinanceDimension2			= LocalGainLossFinanceDimension2
				invoked.FinanceCodeBlock.FinanceDimension3			= LocalGainLossFinanceDimension3
				invoked.FinanceCodeBlock.FinanceDimension4			= LocalGainLossFinanceDimension4
				invoked.FinanceCodeBlock.FinanceDimension5			= LocalGainLossFinanceDimension5
				invoked.FinanceCodeBlock.FinanceDimension6			= LocalGainLossFinanceDimension6
				invoked.FinanceCodeBlock.FinanceDimension7			= LocalGainLossFinanceDimension7
				invoked.FinanceCodeBlock.FinanceDimension8			= LocalGainLossFinanceDimension8
				invoked.FinanceCodeBlock.FinanceDimension9			= LocalGainLossFinanceDimension9
				invoked.FinanceCodeBlock.FinanceDimension10			= LocalGainLossFinanceDimension10
				invoked.DimensionCode								= LocalGainLossDimensionCode
			invoked.CurrencyCode								= LocalTranCurrency
			invoked.AutoReverse									= PrmAutoReverse
			if (LocalProcess	= 1)
				invoked.GeneralLedgerEvent						= "GR"
			else
				invoked.GeneralLedgerEvent						= "CT"
			invoked.System										= LocalSystem
			initialize invoked.TransactionAmount	
			invoked.GainLossRunSequence							= PrmRunSequence
			invoked.PrimaryLedger								= LocalPrimaryLedger	
			invoked.TransientJournalizeGroup					= LocalJournalizeGroup
			invoked.DoNotUpdateZoneTotal						= true
			invoked.GainLosslinkSequence						= LocalTransactionLinkSequence	
			invoked.IsGainLossAccountTransaction				= true
			if (LocalFromTransaction	= 1)
				invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalGainLoss
				invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateGainLoss
				invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateGainLoss2
				invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateGainLoss3
				invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= LocalProjectGainLoss
				invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1GainLoss
				invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2GainLoss
				invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3GainLoss
				invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4GainLoss
				invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5GainLoss						
			if (LocalFromTransaction	= 2)
				if (LocalFunctionalGainLoss		> 0)
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalGainLoss
				if (LocalAlternateGainLoss		> 0)
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateGainLoss
				if (LocalAlternateGainLoss2		> 0)
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateGainLoss2
				if (LocalAlternateGainLoss3		> 0)
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateGainLoss3											
				if (LocalProjectGainLoss		> 0)
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= LocalProjectGainLoss
				if (LocalReport1GainLoss		> 0)
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1GainLoss
				if (LocalReport2GainLoss		> 0)
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2GainLoss
				if (LocalReport3GainLoss		> 0)
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3GainLoss
				if (LocalReport4GainLoss		> 0)
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4GainLoss
				if (LocalReport5GainLoss		> 0)
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5GainLoss						
			if (LocalFromTransaction	= 3)
				if (LocalFunctionalGainLoss		< 0)
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalGainLoss
				if (LocalAlternateGainLoss		< 0)
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateGainLoss
				if (LocalAlternateGainLoss2		< 0)
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAlternateGainLoss2
				if (LocalAlternateGainLoss3		< 0)
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAlternateGainLoss3											
				if (LocalProjectGainLoss		< 0)
					invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= LocalProjectGainLoss
				if (LocalReport1GainLoss		< 0)
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= LocalReport1GainLoss
				if (LocalReport2GainLoss		< 0)
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReport2GainLoss
				if (LocalReport3GainLoss		< 0)
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= LocalReport3GainLoss
				if (LocalReport4GainLoss		< 0)
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= LocalReport4GainLoss
				if (LocalReport5GainLoss		< 0)
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= LocalReport5GainLoss						

		UpdateJournalTotals
			invoked.PrmFunctionalDrAmount	= JournalFunctionalAmountDr
			invoked.PrmFunctionalCrAmount	= JournalFunctionalAmountCr
			invoked.PrmAlternateDrAmount	= JournalAlternateAmountDr
			invoked.PrmAlternateCrAmount	= JournalAlternateAmountCr
			invoked.PrmAlternateDrAmount2	= JournalAlternateAmount2Dr
			invoked.PrmAlternateCrAmount2	= JournalAlternateAmount2Cr
			invoked.PrmAlternateDrAmount3	= JournalAlternateAmount3Dr
			invoked.PrmAlternateCrAmount3	= JournalAlternateAmount3Cr								
			invoked.PrmRpt1DrAmount			= JournalReportAmount1Dr
			invoked.PrmRpt1CrAmount			= JournalReportAmount1Cr
			invoked.PrmRpt2DrAmount			= JournalReportAmount2Dr
			invoked.PrmRpt2CrAmount			= JournalReportAmount2Cr
			invoked.PrmRpt3DrAmount			= JournalReportAmount3Dr
			invoked.PrmRpt3CrAmount			= JournalReportAmount3Cr
			invoked.PrmRpt4DrAmount			= JournalReportAmount4Dr
			invoked.PrmRpt4CrAmount			= JournalReportAmount4Cr
			invoked.PrmRpt5DrAmount			= JournalReportAmount5Dr
			invoked.PrmRpt5CrAmount			= JournalReportAmount5Cr
			if (PrmAutoReverse)
				invoked.PrmAutoReverseDrAmount	= JournalFunctionalAmountDr
				invoked.PrmAutoReverseCrAmount	= JournalFunctionalAmountCr

		CalculateGainLoss

			include SetLocalCurrencyFlag
			if (PrmOption.Translation)
				initialize TransactionYearToDate
				initialize TransactionAmountTotal
			else
				if (!PrmFunctional)
					initialize FunctionalYearToDate
					initialize FunctionalAmountTotal
			if (!PrmAlternate)
				initialize AlternateYearToDate
				initialize AlternateAmountTotal
			if (!PrmAlternate2)
				initialize AlternateYearToDate2
				initialize AlternateAmountTotal2
			if (!PrmAlternate3)
				initialize AlternateYearToDate3
				initialize AlternateAmountTotal3						
			if (!PrmProject)
				initialize ProjectYearToDate
				initialize ProjectAmountTotal
			if (!LocalReport1)
				initialize Report1YearToDate
				initialize ReportAmount1Total
			if (!LocalReport2)
				initialize Report2YearToDate
				initialize ReportAmount2Total
			if (!LocalReport3)
				initialize Report3YearToDate
				initialize ReportAmount3Total
			if (!LocalReport4)
				initialize Report4YearToDate
				initialize ReportAmount4Total
			if (!LocalReport5)
				initialize Report5YearToDate
				initialize ReportAmount5Total
			initialize LocalTransactionAmount

			if  (LocalChartSection.BalanceSheet
			or  (PrmOption.Translation
			and (LocalRateType.EndingBalance
			or   LocalRateType.HistoricalBalance)))


				LocalTransactionAmount	= TransactionYearToDate
				GltotFunctionalAmount	= FunctionalYearToDate
				GltotAlternateAmount	= AlternateYearToDate
				GltotAlternateAmount2	= AlternateYearToDate2
				GltotAlternateAmount3	= AlternateYearToDate3
				GltotProjectAmount		= ProjectYearToDate
				GltotReportAmount1		= Report1YearToDate
				GltotReportAmount2		= Report2YearToDate
				GltotReportAmount3		= Report3YearToDate
				GltotReportAmount4		= Report4YearToDate
				GltotReportAmount5		= Report5YearToDate
			else
				LocalTransactionAmount	= TransactionAmountTotal
				GltotFunctionalAmount	= FunctionalAmountTotal 
				GltotAlternateAmount	= AlternateAmountTotal 
				GltotAlternateAmount2	= AlternateAmountTotal2
				GltotAlternateAmount3	= AlternateAmountTotal3 
				GltotProjectAmount		= ProjectAmountTotal 
				GltotReportAmount1		= ReportAmount1Total 
				GltotReportAmount2		= ReportAmount2Total 
				GltotReportAmount3		= ReportAmount3Total 
				GltotReportAmount4		= ReportAmount4Total 
				GltotReportAmount5		= ReportAmount5Total 
			initialize LocalFunctionalAmount
			initialize LocalFunctionalRate
			initialize LocalAlternateAmount
			initialize LocalAlternateRate
			initialize LocalAlternateAmount2
			initialize LocalAlternate2Rate
			initialize LocalAlternateAmount3
			initialize LocalAlternate3Rate						
			initialize LocalProjectAmount
			initialize LocalProjectRate
			initialize LocalReportAmount1
			initialize LocalReport1Rate
			initialize LocalReportAmount2
			initialize LocalReport2Rate
			initialize LocalReportAmount3
			initialize LocalReport3Rate
			initialize LocalReportAmount4
			initialize LocalReport4Rate
			initialize LocalReportAmount5
			initialize LocalReport5Rate

			LocalProject					= LocalFinanceCodeBlock.Project
			if (PrmRateOption.DailyRate)
				LocalCurrencyTable														= FinanceEnterpriseGroup.CurrencyTable
				LocalCurrencyCalculationGroup.CurrencyAmount							= LocalTransactionAmount
				LocalCurrencyCalculationGroup.ExchangeDate								= LocalPostingDate
				LocalCurrencyCalculationGroup.FromCurrency								= LocalFromCurrency
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= PrmEnterpriseGroup
				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= PrmAccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= PrmAccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= PrmAccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= PrmAccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency					= LocalProject.Currency
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= PrmEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= PrmEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= PrmEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= PrmEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= PrmEnterpriseGroup.ReportCurrencyFive
				if (LocalFunctional
				and LocalFromCurrency			!= PrmAccountingEntity.FunctionalCurrency)
					LocalFunctionalRate				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					LocalFunctionalAmount			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
				else
					initialize GltotFunctionalAmount
				if (LocalAlternate
				and PrmAccountingEntity.AlternateCurrency entered
				and LocalFromCurrency			!= PrmAccountingEntity.AlternateCurrency)
					LocalAlternateRate				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
					LocalAlternateAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				else
					initialize GltotAlternateAmount
				if (LocalAlternate2
				and PrmAccountingEntity.AlternateCurrency2 entered
				and LocalFromCurrency			!= PrmAccountingEntity.AlternateCurrency2)
					LocalAlternate2Rate				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
					LocalAlternateAmount2			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				else
					initialize GltotAlternateAmount2
				if (LocalAlternate3
				and PrmAccountingEntity.AlternateCurrency3 entered
				and LocalFromCurrency			!= PrmAccountingEntity.AlternateCurrency3)
					LocalAlternate3Rate				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
					LocalAlternateAmount3			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount								
				else
					initialize GltotAlternateAmount3
				if (PrmProject
				and LocalProject.Currency entered
				and LocalFromCurrency			!= LocalProject.Currency)
					LocalProjectRate				= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
					LocalProjectAmount				= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
				else
					initialize GltotProjectAmount
				if (LocalReport1
				and PrmEnterpriseGroup.ReportCurrencyOne entered
				and LocalFromCurrency			!= PrmEnterpriseGroup.ReportCurrencyOne)
					LocalReport1Rate				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
					LocalReportAmount1				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				else
					initialize GltotReportAmount1
				if (LocalReport2
				and PrmEnterpriseGroup.ReportCurrencyTwo entered
				and LocalFromCurrency			!= PrmEnterpriseGroup.ReportCurrencyTwo)
					LocalReport2Rate				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
					LocalReportAmount2				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				else
					initialize GltotReportAmount2
				if (LocalReport3
				and PrmEnterpriseGroup.ReportCurrencyThree entered
				and LocalFromCurrency			!= PrmEnterpriseGroup.ReportCurrencyThree)
					LocalReport3Rate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
					LocalReportAmount3				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				else
					initialize GltotReportAmount3
				if (LocalReport4
				and PrmEnterpriseGroup.ReportCurrencyFour entered
				and LocalFromCurrency			!= PrmEnterpriseGroup.ReportCurrencyFour)
					LocalReport4Rate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
					LocalReportAmount4				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				else
					initialize GltotReportAmount4
				if (LocalReport5
				and PrmEnterpriseGroup.ReportCurrencyFive entered
				and LocalFromCurrency			!= PrmEnterpriseGroup.ReportCurrencyFive)
					LocalReport5Rate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					LocalReportAmount5				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				else
					initialize GltotReportAmount5
			if (PrmRateOption.PeriodRate)
				LocalFrCurrency					= LocalFromCurrency
				LocalAccountingEntity			= PrmAccountingEntity		
				if (PrmOption.Translation)
					LocalTransactionAmount		= GltotFunctionalAmount
				LocalTranslationDate			= PrmGeneralLedgerCalendarPeriod.Date
				LocalReportingBasis				= PrmReportingBasis
				LocalGainLossResult 			= PrmGainLossResult
				LocalInstTranslationCode		= LocalTranslationCode
				LocalInstRateType				= LocalRateType
				if (PrmOption.Translation
				and LocalRateType.HistoricalBalance)

					LocalAlternateAmount	= AlternateAmountTotal 
					LocalAlternateAmount	= AlternateAmountTotal 
					LocalAlternateAmount2	= AlternateAmountTotal2
					LocalAlternateAmount3	= AlternateAmountTotal3 
					LocalProjectAmount		= ProjectAmountTotal
					LocalReportAmount1		= ReportAmount1Total 
					LocalReportAmount2		= ReportAmount2Total 
					LocalReportAmount3		= ReportAmount3Total 
					LocalReportAmount4		= ReportAmount4Total 
					LocalReportAmount5		= ReportAmount5Total
				else
					include TranslationCodeCalculation
				if (PrmOption.Translation)
					initialize LocalFunctionalAmount
			LocalAlternateAmount	-= GltotAlternateAmount
			LocalAlternateAmount2	-= GltotAlternateAmount2
			LocalAlternateAmount3	-= GltotAlternateAmount3							
			LocalProjectAmount		-= GltotProjectAmount
			LocalReportAmount1		-= GltotReportAmount1
			LocalReportAmount2		-= GltotReportAmount2
			LocalReportAmount3		-= GltotReportAmount3
			LocalReportAmount4		-= GltotReportAmount4
			LocalReportAmount5		-= GltotReportAmount5
			if (PrmOption.Revalue)
				LocalFunctionalAmount	-= GltotFunctionalAmount
			if (LocalFunctionalAmount entered
			or  LocalAlternateAmount entered
			or  LocalAlternateAmount2 entered
			or  LocalAlternateAmount3 entered

			or  LocalReportAmount1 entered
			or  LocalReportAmount2 entered
			or  LocalReportAmount3 entered
			or  LocalReportAmount4 entered
			or  LocalReportAmount5 entered)
				LocalProcess			= PrmOption
				if (!JournalCreated)
					LocalAccountingEntity	= PrmAccountingEntity
					JournalCreated			= true
					LocalJournalCreated		= true
					initialize LocalLinkBackSequence
					if (PrmReleased)
						invoke AutoCreate Unreleased JournalControlRel
							assign result to LocalAccountingEntityJournalView
							invoked.TransientFromGainLoss	= true
							include JournalControlFields
					else
						invoke AutoCreatePosted Posted JournalControlRel
							assign result to LocalAccountingEntityJournalView
							invoked.TransientFromGainLoss	= true
							include JournalControlFields
				LocalTransactionSequence	+= 1
				LocalReportingBasis						= PrmReportingBasis
				LocalGainLossTotal.RunSequence			= PrmRunSequence
				LocalGainLossTotal.OptionType			= PrmOption
				LocalGainLossTotal.AccountingEntity		= PrmAccountingEntity
				LocalGainLossTotal.CurrencyLedger		= PrmCurrencyLedger
				LocalGainLossTotal.System				= LocalSystem
				LocalGainLossTotal.Ledger				= LocalPrimaryLedger
				if (!PrmPostOption.ZoneOrSystem)
					LocalGainLossTotal.ZoneAccountingUnit		= LocalAccountingUnit
					LocalGainLossTotal.ZoneDimension1			= LocalFinanceDimension1
					if(PrmOtherDimensions)
						LocalGainLossTotal.DimensionCode		= LocalDimensionCode
				if (PrmPostOption.ZoneOrSystem)
					if (PrmAccountingEntity.AccountingUnitZoneBalancing)
			        	LocalInstAccountingEntity				= PrmAccountingEntity
						LocalInstAccountingUnit					= LocalAccountingUnit
						LocalGainLossTotal.ZoneAccountingUnit	= DerivedZoneAccountingUnit
					else
			        	LocalInstAccountingEntity				= PrmAccountingEntity
			        	LocalGainLossTotal.ZoneAccountingUnit	= SystemAccountingUnitRel.AccountingUnit
					if (PrmEnterpriseGroup.Dimension1ZoneBalancing)
						LocalInstFinanceDimension1				= LocalFinanceDimension1
						LocalGainLossTotal.ZoneDimension1		= DerivedZoneFinanceDimension1
					else
						LocalGainLossTotal.ZoneDimension1		= FinanceDimension1Rel.FinanceDimension1
				if (LocalGainAccount		= LocalLossAccount)
					LocalGainLossTotal.GainAccount		= LocalGainAccount
					LocalGainLossTotal.LossAccount		= LocalLossAccount
					LocalGainLossTotal.Currency			= LocalTranCurrency
					if (!LocalGainLossTotal exists)
						LocalLinkBackSequence			+= 1
						LocalTransactionLinkSequence	= LocalLinkBackSequence
					else
						LocalTransactionLinkSequence	= LocalGainLossTotal.LinkBackSequence
					invoke Update LocalGainLossTotal 
						invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
						invoked.ReportingBasis						= PrmReportingBasis
						invoked.TransientFunctionalAmount			= LocalFunctionalAmount
						invoked.TransientAlternateAmount			= LocalAlternateAmount
						invoked.TransientAlternateAmount2			= LocalAlternateAmount2
						invoked.TransientAlternateAmount3			= LocalAlternateAmount3
						invoked.TransientProjectAmount				= LocalProjectAmount
						invoked.TransientReportAmount1				= LocalReportAmount1
						invoked.TransientReportAmount2				= LocalReportAmount2
						invoked.TransientReportAmount3				= LocalReportAmount3
						invoked.TransientReportAmount4				= LocalReportAmount4
						invoked.TransientReportAmount5				= LocalReportAmount5
						invoked.TransientLinkBackSequence			= LocalTransactionLinkSequence
						if(PrmOtherDimensions)
							invoked.FinanceDimension1				= LocalFinanceCodeBlock.FinanceDimension1
							invoked.FinanceDimension2				= LocalFinanceCodeBlock.FinanceDimension2
							invoked.FinanceDimension3				= LocalFinanceCodeBlock.FinanceDimension3
							invoked.FinanceDimension4				= LocalFinanceCodeBlock.FinanceDimension4
							invoked.FinanceDimension5				= LocalFinanceCodeBlock.FinanceDimension5
							invoked.FinanceDimension6				= LocalFinanceCodeBlock.FinanceDimension6
							invoked.FinanceDimension7				= LocalFinanceCodeBlock.FinanceDimension7
							invoked.FinanceDimension8				= LocalFinanceCodeBlock.FinanceDimension8
							invoked.FinanceDimension9				= LocalFinanceCodeBlock.FinanceDimension9
							invoked.FinanceDimension10				= LocalFinanceCodeBlock.FinanceDimension10
				else
					if (LocalFunctionalAmount	> 0
					or  LocalAlternateAmount	> 0
					or  LocalAlternateAmount2	> 0
					or  LocalAlternateAmount3	> 0
					or  LocalProjectAmount		> 0
					or  LocalReportAmount1		> 0
					or  LocalReportAmount2		> 0
					or  LocalReportAmount3		> 0
					or  LocalReportAmount4		> 0
					or  LocalReportAmount5		> 0)
						initialize LocalGainLossTotal.GainAccount
						LocalGainLossTotal.LossAccount		= LocalLossAccount
						LocalGainLossTotal.Currency			= LocalTranCurrency
						if (!LocalGainLossTotal exists)
							LocalLinkBackSequence			+= 1
							LocalTransactionLinkSequence	= LocalLinkBackSequence
						else
							LocalTransactionLinkSequence	= LocalGainLossTotal.LinkBackSequence
						invoke Update LocalGainLossTotal 
							invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
							invoked.ReportingBasis						= PrmReportingBasis
							if (LocalFunctionalAmount	> 0)
								invoked.TransientFunctionalAmount			= LocalFunctionalAmount
							if (LocalAlternateAmount	> 0)
								invoked.TransientAlternateAmount			= LocalAlternateAmount
							if (LocalAlternateAmount2	> 0)
								invoked.TransientAlternateAmount2			= LocalAlternateAmount2
							if (LocalAlternateAmount3	> 0)
								invoked.TransientAlternateAmount3			= LocalAlternateAmount3
							if (LocalProjectAmount		> 0)
								invoked.TransientProjectAmount				= LocalProjectAmount
							if (LocalReportAmount1		> 0)
								invoked.TransientReportAmount1				= LocalReportAmount1
							if (LocalReportAmount2		> 0)
								invoked.TransientReportAmount2				= LocalReportAmount2
							if (LocalReportAmount3		> 0)
								invoked.TransientReportAmount3				= LocalReportAmount3
							if (LocalReportAmount4		> 0)
								invoked.TransientReportAmount4				= LocalReportAmount4
							if (LocalReportAmount5		> 0)
								invoked.TransientReportAmount5				= LocalReportAmount5
							invoked.TransientLinkBackSequence			= LocalTransactionLinkSequence
							if(PrmOtherDimensions)
								invoked.FinanceDimension1				= LocalFinanceCodeBlock.FinanceDimension1
								invoked.FinanceDimension2				= LocalFinanceCodeBlock.FinanceDimension2
								invoked.FinanceDimension3				= LocalFinanceCodeBlock.FinanceDimension3
								invoked.FinanceDimension4				= LocalFinanceCodeBlock.FinanceDimension4
								invoked.FinanceDimension5				= LocalFinanceCodeBlock.FinanceDimension5
								invoked.FinanceDimension6				= LocalFinanceCodeBlock.FinanceDimension6
								invoked.FinanceDimension7				= LocalFinanceCodeBlock.FinanceDimension7
								invoked.FinanceDimension8				= LocalFinanceCodeBlock.FinanceDimension8
								invoked.FinanceDimension9				= LocalFinanceCodeBlock.FinanceDimension9
								invoked.FinanceDimension10				= LocalFinanceCodeBlock.FinanceDimension10
					if (!LocalGainAccount		= LocalLossAccount)
						if (LocalFunctionalAmount	< 0
						or  LocalAlternateAmount	< 0
						or  LocalAlternateAmount2	< 0
						or  LocalAlternateAmount3	< 0
						or  LocalProjectAmount		< 0
						or  LocalReportAmount1		< 0
						or  LocalReportAmount2		< 0
						or  LocalReportAmount3		< 0
						or  LocalReportAmount4		< 0
						or  LocalReportAmount5		< 0)
							LocalGainLossTotal.GainAccount		= LocalGainAccount
							initialize LocalGainLossTotal.LossAccount
							LocalGainLossTotal.Currency			= LocalTranCurrency
							if (!LocalGainLossTotal exists)
								LocalLinkBackSequence			+= 1
								LocalTransactionLinkSequence	= LocalLinkBackSequence
							else
								LocalTransactionLinkSequence	= LocalGainLossTotal.LinkBackSequence
							invoke Update LocalGainLossTotal 
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.ReportingBasis						= PrmReportingBasis
								if (LocalFunctionalAmount	< 0)
									invoked.TransientFunctionalAmount			= LocalFunctionalAmount
								if (LocalAlternateAmount	< 0)
									invoked.TransientAlternateAmount			= LocalAlternateAmount
								if (LocalAlternateAmount2	< 0)
									invoked.TransientAlternateAmount2			= LocalAlternateAmount2
								if (LocalAlternateAmount3	< 0)
									invoked.TransientAlternateAmount3			= LocalAlternateAmount3
								if (LocalProjectAmount		< 0)
									invoked.TransientProjectAmount				= LocalProjectAmount
								if (LocalReportAmount1		< 0)
									invoked.TransientReportAmount1				= LocalReportAmount1
								if (LocalReportAmount2		< 0)
									invoked.TransientReportAmount2				= LocalReportAmount2
								if (LocalReportAmount3		< 0)
									invoked.TransientReportAmount3				= LocalReportAmount3
								if (LocalReportAmount4		< 0)
									invoked.TransientReportAmount4				= LocalReportAmount4
								if (LocalReportAmount5		< 0)
									invoked.TransientReportAmount5				= LocalReportAmount5
								invoked.TransientLinkBackSequence			= LocalTransactionLinkSequence
								if(PrmOtherDimensions)
									invoked.FinanceDimension1				= LocalFinanceCodeBlock.FinanceDimension1
									invoked.FinanceDimension2				= LocalFinanceCodeBlock.FinanceDimension2
									invoked.FinanceDimension3				= LocalFinanceCodeBlock.FinanceDimension3
									invoked.FinanceDimension4				= LocalFinanceCodeBlock.FinanceDimension4
									invoked.FinanceDimension5				= LocalFinanceCodeBlock.FinanceDimension5
									invoked.FinanceDimension6				= LocalFinanceCodeBlock.FinanceDimension6
									invoked.FinanceDimension7				= LocalFinanceCodeBlock.FinanceDimension7
									invoked.FinanceDimension8				= LocalFinanceCodeBlock.FinanceDimension8
									invoked.FinanceDimension9				= LocalFinanceCodeBlock.FinanceDimension9
									invoked.FinanceDimension10				= LocalFinanceCodeBlock.FinanceDimension10
				if (PrmReleased)
					invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
						fill in fields from this instance
						invoked.TransientFromGainLoss	= true
						include LedgerTransactitonFields
				else
					invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
						fill in fields from this instance
						invoked.TransientFromGainLoss	= true
						include LedgerTransactitonFields

				if (LocalFunctionalAmount		> 0)
					JournalFunctionalAmountDr	+= LocalFunctionalAmount
				else
					JournalFunctionalAmountCr	+= LocalFunctionalAmount
				if (LocalAlternateAmount		> 0)
					JournalAlternateAmountDr	+= LocalAlternateAmount
				else
					JournalAlternateAmountCr	+= LocalAlternateAmount
				if (LocalAlternateAmount2		> 0)
					JournalAlternateAmount2Dr	+= LocalAlternateAmount2
				else
					JournalAlternateAmount2Cr	+= LocalAlternateAmount2
				if (LocalAlternateAmount3		> 0)
					JournalAlternateAmount3Dr	+= LocalAlternateAmount3
				else
					JournalAlternateAmount3Cr	+= LocalAlternateAmount3
				if (LocalReportAmount1			> 0)
					JournalReportAmount1Dr		+= LocalReportAmount1
				else
					JournalReportAmount1Cr		+= LocalReportAmount1
				if (LocalReportAmount2			> 0)
					JournalReportAmount2Dr		+= LocalReportAmount2
				else
					JournalReportAmount2Cr		+= LocalReportAmount2
				if (LocalReportAmount3			> 0)
					JournalReportAmount3Dr		+= LocalReportAmount3
				else
					JournalReportAmount3Cr		+= LocalReportAmount3
				if (LocalReportAmount4			> 0)
					JournalReportAmount4Dr		+= LocalReportAmount4
				else
					JournalReportAmount4Cr		+= LocalReportAmount4
				if (LocalReportAmount5			> 0)
					JournalReportAmount5Dr		+= LocalReportAmount5
				else
					JournalReportAmount5Cr		+= LocalReportAmount5
				if (PrmSaveCalculation)
					invoke Create GainLossTransactionAmount
						invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
						invoked.AccountingEntity					= PrmAccountingEntity
						invoked.GeneralLedgerClosePeriod			= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl			= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
						invoked.GainLossTransactionAmount			= LocalTransactionSequence
						invoked.TranslationCode						= LocalTranslationCode
						invoked.YearToDateTransactionAmount			= TransactionYearToDate
						invoked.YearToDateFunctionalAmount			= FunctionalYearToDate
						invoked.YearToDateAlternateAmount			= AlternateYearToDate
						invoked.YearToDateAlternateAmount2			= AlternateYearToDate2
						invoked.YearToDateAlternateAmount3			= AlternateYearToDate3
						invoked.YearToDateProjectAmount				= ProjectYearToDate
						invoked.YearToDateReportAmount1				= Report1YearToDate
						invoked.YearToDateReportAmount2				= Report2YearToDate
						invoked.YearToDateReportAmount3				= Report3YearToDate
						invoked.YearToDateReportAmount4				= Report4YearToDate
						invoked.YearToDateReportAmount5				= Report5YearToDate
						invoked.PeriodTransactionAmount				= TransactionAmountTotal
						invoked.PeriodFunctionalAmount				= FunctionalAmountTotal
						invoked.PeriodAlternateAmount				= AlternateAmountTotal
						invoked.PeriodAlternateAmount2				= AlternateAmountTotal2
						invoked.PeriodAlternateAmount3				= AlternateAmountTotal3
						invoked.PeriodProjectAmount					= ProjectAmountTotal
						invoked.PeriodReportAmount1					= ReportAmount1Total
						invoked.PeriodReportAmount2					= ReportAmount2Total
						invoked.PeriodReportAmount3					= ReportAmount3Total
						invoked.PeriodReportAmount4					= ReportAmount4Total
						invoked.PeriodReportAmount5					= ReportAmount5Total

		CreateGainLossTransactions
			LocalFunctionalGainLoss		*= -1
			LocalAlternateGainLoss		*= -1
			LocalAlternateGainLoss2		*= -1
			LocalAlternateGainLoss3		*= -1
			LocalProjectGainLoss		*= -1
			LocalReport1GainLoss		*= -1
			LocalReport2GainLoss		*= -1
			LocalReport3GainLoss		*= -1
			LocalReport4GainLoss		*= -1
			LocalReport5GainLoss		*= -1
			initialize LocalFromTransaction
			if  (JournalCreated
			and (LocalFunctionalGainLoss entered
			or   LocalAlternateGainLoss entered
			or   LocalAlternateGainLoss2 entered
			or   LocalAlternateGainLoss3 entered
			or   LocalProjectGainLoss entered
			or   LocalReport1GainLoss entered
			or   LocalReport2GainLoss entered
			or   LocalReport3GainLoss entered
			or   LocalReport4GainLoss entered
			or   LocalReport5GainLoss entered))
				LocalProcess			= PrmOption
				LocalAccountingEntity		= PrmAccountingEntity
				LocalGainLossAccount		= LocalGainAccount
				if (LocalGainAccount		= LocalLossAccount)
					LocalFromTransaction		= 1
					if (PrmReleased)
						invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
							include GainLossLedgerTransactitonFields
					else
						invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
							include GainLossLedgerTransactitonFields
				else
					if (LocalFunctionalGainLoss		> 0
					or  LocalAlternateGainLoss		> 0
					or  LocalAlternateGainLoss2		> 0
					or  LocalAlternateGainLoss3		> 0
					or  LocalProjectGainLoss		> 0
					or  LocalReport1GainLoss		> 0
					or  LocalReport2GainLoss		> 0
					or  LocalReport3GainLoss		> 0
					or  LocalReport4GainLoss		> 0
					or  LocalReport5GainLoss		> 0)
						LocalFromTransaction		= 2
						if (PrmReleased)
							invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
								include GainLossLedgerTransactitonFields
						else
							invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
								include GainLossLedgerTransactitonFields
					if (LocalGainAccount		!= LocalLossAccount)
						LocalGainLossAccount	 = LocalLossAccount
					if (LocalFunctionalGainLoss		< 0
					or  LocalAlternateGainLoss		< 0
					or  LocalAlternateGainLoss2		< 0
					or  LocalAlternateGainLoss3		< 0
					or  LocalProjectGainLoss		< 0
					or  LocalReport1GainLoss		< 0
					or  LocalReport2GainLoss		< 0
					or  LocalReport3GainLoss		< 0
					or  LocalReport4GainLoss		< 0
					or  LocalReport5GainLoss		< 0)
						LocalFromTransaction		= 3
						if (PrmReleased)
							invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
								include GainLossLedgerTransactitonFields
						else
							invoke CreatePostedGLSystemTransactionsNoRules Posted GeneralLedgerTransaction
								include GainLossLedgerTransactitonFields
				if (LocalFunctionalGainLoss		> 0)
					JournalFunctionalAmountDr	+= LocalFunctionalGainLoss
				else
					JournalFunctionalAmountCr	+= LocalFunctionalGainLoss
				if (LocalAlternateGainLoss		> 0)
					JournalAlternateAmountDr	+= LocalAlternateGainLoss
				else
					JournalAlternateAmountCr	+= LocalAlternateGainLoss
				if (LocalAlternateGainLoss2		> 0)
					JournalAlternateAmount2Dr	+= LocalAlternateGainLoss2
				else
					JournalAlternateAmount2Cr	+= LocalAlternateGainLoss2
				if (LocalAlternateGainLoss3		> 0)
					JournalAlternateAmount3Dr	+= LocalAlternateGainLoss3
				else
					JournalAlternateAmount3Cr	+= LocalAlternateGainLoss3
				if (LocalReport1GainLoss		> 0)
					JournalReportAmount1Dr		+= LocalReport1GainLoss
				else
					JournalReportAmount1Cr		+= LocalReport1GainLoss
				if (LocalReport2GainLoss		> 0)
					JournalReportAmount2Dr		+= LocalReport2GainLoss
				else
					JournalReportAmount2Cr		+= LocalReport2GainLoss
				if (LocalReport3GainLoss		> 0)
					JournalReportAmount3Dr		+= LocalReport3GainLoss
				else
					JournalReportAmount3Cr		+= LocalReport3GainLoss
				if (LocalReport4GainLoss		> 0)
					JournalReportAmount4Dr		+= LocalReport4GainLoss
				else
					JournalReportAmount4Cr		+= LocalReport4GainLoss
				if (LocalReport5GainLoss		> 0)
					JournalReportAmount5Dr		+= LocalReport5GainLoss
				else
					JournalReportAmount5Cr		+= LocalReport5GainLoss
		GetAmountAndRate
			initialize LocalErrorMesage
			initialize LocalCalculatedAmount
			initialize LocalCalculatedRate
			if (LocalInstRateType.NoCalculation)
				LocalErrorMesage			= NoCalculationTranslationCode

				LocalSkipCalcTranslationCode	= true			
				include GainLossResultError
			else	
				if (!LocalCurrRelationship exists)
					LocalErrorMesage			= CurrencyRelationshipError

					include GainLossResultError
				else
					if (!LocalCurrRelationship.Triangulate)
						if (!TranslationRateRel exists)
							LocalErrorMesage			= CurrencyRateError

							include GainLossResultError
						else
							LocalCalculatedRate					= TranslationRateRel.Rate
							LocalRoundAmount.Amount				= LocalTransactionAmount
							LocalRoundAmount.TransientMultDiv	= LocalCurrRelationship.MultDiv		
							LocalRoundAmount.Rate				= LocalCalculatedRate
							LocalRoundAmount.NumberOfDecimals	= LocalCurrRelationship.ToCurrency.NumberOfDecimals
							LocalCalculatedAmount				= LocalRoundAmount.OutputAmount
					else
						TriangulateFrRel.FromCurrency	        = LocalCurrRelationship.FromCurrency
						TriangulateFrRel.ToCurrency		        = LocalCurrRelationship.TriangulateVia
						TriangulateToRel.FromCurrency	        = LocalCurrRelationship.TriangulateVia
						TriangulateToRel.ToCurrency		        = LocalCurrRelationship.ToCurrency
						if (TriangulateFrRel exists
						and TriangulateToRel exists)
							if (TranslationFrRateRel exists
							and TranslationToRateRel exists)
								LocalCalculatedRate					= (TranslationFrRateRel.Rate * TranslationToRateRel.Rate)
								LocalRoundAmount.Amount				= LocalTransactionAmount
								LocalRoundAmount.TransientMultDiv	= LocalCurrRelationship.MultDiv		
								LocalRoundAmount.Rate				= LocalCalculatedRate
								LocalRoundAmount.NumberOfDecimals	= LocalCurrRelationship.ToCurrency.NumberOfDecimals
								LocalCalculatedAmount				= LocalRoundAmount.OutputAmount
							else
								if (!TranslationFrRateRel exists)
									LocalErrorMesage			= FrTriangCurrRateError

									include GainLossResultError
								else
									if (!TranslationToRateRel exists)
										LocalErrorMesage			= ToTriangCurrRateError

										include GainLossResultError
						else
							if (!TriangulateFrRel exists)
								LocalErrorMesage			= FrTriangCurrRelationError

								include GainLossResultError
							else
								if (!TriangulateToRel exists)
									LocalErrorMesage			= ToTriangCurrRelationError

									include GainLossResultError

		TiggerGLMovementRules
			trigger "GeneralLedgerTotalService" PA service
				resume on error
				title is "<LocalWorkUnitTitle>" 
					
				Criteria
					FinanceEnterpriseGroup
					AccountingEntity
					GeneralLedgerTotal.Ledger
				Variables
					ActionCode
					include persistent fields from FinanceEnterpriseGroup
					include persistent fields from AccountingEntity
					include persistent fields from Scenario
					include persistent fields from GeneralLedgerTotal
					include persistent fields from GeneralLedgerTotal.GeneralLedgerChartAccount
					include persistent fields from GeneralLedgerTotal.Ledger
					include persistent fields from GeneralLedgerTotal.EntityYearPeriod	

		SendIndividualBOD
			if (FinanceEnterpriseGroup.BODTrigger
			and FinanceEnterpriseGroup.ActualsScenario entered
			and !action type.Delete
			and action != "UpdateBODIdFields" and !LocalBODTrigger) 
				ActionCode = ActionCode.Update
				if (action type.Create)
					ActionCode = ActionCode.Create
						
				LocalWorkUnitTitle = "EG:"+FinanceEnterpriseGroup+"LG:"+GeneralLedgerTotal.Ledger+"AE:"+AccountingEntity+"PD:"+GeneralLedgerTotal.EntityYearPeriod+"AU:"+GeneralLedgerTotal.AccountingUnit+"RCA:"+GeneralLedgerTotal.GeneralLedgerChartAccount+"PJ:"+GeneralLedgerTotal.Project
				
				increment bod id.VariationID
				LocalBODCurrentTimeStamp.CurrentTimeStamp 	= current timestamp
				include TiggerGLMovementRules




#ifdef module ad
		ADBAccountMasterUpdate
			LocalInstAccountingEntity			= PrmAccountingEntity	
			LocalInstGeneralLedgerChartAccount	= LocalGeneralLedgerTotal.GeneralLedgerChartAccount

			if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
				initialize LocalInstAccountingUnit
				initialize LocalInstFinanceDimension1
				initialize LocalInstADBOrganizationDimension
				if (FinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
					LocalInstAccountingUnit					= LocalAccountingUnit	
					LocalInstADBOrganizationDimension       = LocalAccountingUnit	
				else
				if (FinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
					LocalInstFinanceDimension1				= LocalFinanceDimension1
					LocalInstADBOrganizationDimension       = LocalFinanceDimension1
				if (ADBAccountMasterByAccountRel not exists)
					invoke Create ADBAccountMaster
						invoked.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
						invoked.AccountingEntity          = LocalInstAccountingEntity
						invoked.GeneralLedgerChartAccount = LocalInstGeneralLedgerChartAccount
						invoked.AccountingUnit            = LocalInstAccountingUnit
						invoked.FinanceDimension1         = LocalInstFinanceDimension1
						invoked.Active                    = true
						invoked.NonChartAccount           = true 
			else
			if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
				initialize LocalInstLedger
				initialize LocalCurrencyCode
				initialize LocalFinanceCodeBlockADB
				if (FinanceEnterpriseGroup.IncludeLedgerInAverageDailyBalance)
					LocalInstLedger 	= LocalGeneralLedgerTotal.PrimaryLedger
				if (FinanceEnterpriseGroup.CalculateADBOption.AllCurrencyAmounts)
					LocalCurrencyCode	= LocalSetCurrencyCode
				LocalFinanceCodeBlockADB.ToAccountingEntity		= LocalInstAccountingEntity
				LocalFinanceCodeBlockADB.AccountingUnit			= LocalAccountingUnit
				LocalFinanceCodeBlockADB.Project				= LocalProject
				LocalFinanceCodeBlockADB.FinanceDimension1		= LocalFinanceDimension1
				LocalFinanceCodeBlockADB.FinanceDimension2		= LocalFinanceDimension2
				LocalFinanceCodeBlockADB.FinanceDimension3		= LocalFinanceDimension3
				LocalFinanceCodeBlockADB.FinanceDimension4		= LocalFinanceDimension4
				LocalFinanceCodeBlockADB.FinanceDimension5		= LocalFinanceDimension5
				LocalFinanceCodeBlockADB.FinanceDimension6		= LocalFinanceDimension6
				LocalFinanceCodeBlockADB.FinanceDimension7		= LocalFinanceDimension7
				LocalFinanceCodeBlockADB.FinanceDimension8		= LocalFinanceDimension8
				LocalFinanceCodeBlockADB.FinanceDimension9		= LocalFinanceDimension9
				LocalFinanceCodeBlockADB.FinanceDimension10		= LocalFinanceDimension10
				if (AverageDailyBalanceAccountRel not exists)
					invoke Create AverageDailyBalanceAccount
						invoked.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
						invoked.AccountingEntity										= LocalInstAccountingEntity
						invoked.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
						invoked.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
						invoked.ADBDimension1		= DerivedADBDimension1
						invoked.ADBDimension2		= DerivedADBDimension2
						invoked.ADBDimension3		= DerivedADBDimension3
						invoked.Active				= true
						invoked.NonChartAccount		= true 
						invoked.TransactionLedger	= LocalInstLedger
						invoked.TransactionCurrency	= LocalCurrencyCode
#endif

	Derived Fields
		Variance is a ComputeField
			type is Decimal size 15.2 
			(NetFunctionalAmount - NetFunctionalAmount prior period 1)

		VariancePercent is a ComputeField
			type is Percent size 5.2
			((NetFunctionalAmount - NetFunctionalAmount prior period 1)
			/ NetFunctionalAmount prior period 1)

		YearVariance is a ComputeField
			type is Decimal size 15.2  
			(NetFunctionalAmount year - NetFunctionalAmount prior year)

		YearVariancePercent is a ComputeField
			type is Percent size 5.2
			((NetFunctionalAmount year - NetFunctionalAmount prior year)
			/ NetFunctionalAmount prior year)
		
		TotalObligationCaculation is a ComputeField
			type is Decimal size 15.2
			(ActualFunctionalAmount + CommitmentFunctionalAmount + EncumbranceFunctionalAmount)

		TotalCommitEncumbranceCalculation is a ComputeField
			type is Decimal size 15.2
			(CommitmentTransactionAmount + EncumbranceTransactionAmount)

		TotalCommitEncumbranceYTDCalculation is a ComputeField
			type is Decimal size 15.2
			(CommitmentTransactionAmount period ending ytd balance + EncumbranceTransactionAmount period ending ytd balance)

		BudgetObligationDifference is a ComputeField
			type is Decimal size 15.2
			(TotalObligationCaculation - BudgetFunctionalAmount)
		
		ProjectTotalObligationCaculation is a ComputeField
			type is Decimal size 15.2
			(ActualReport1Amount + CommitmentReport1Amount + EncumbranceReport1Amount)

		ProjectRemainingBudget is a ComputeField
			type is Decimal size 15.2		
			(BudgetReport1Amount - ProjectTotalObligationCaculation)

		BudgetActualDifference is a ComputeField
			type is Decimal size 15.2
			(ActualFunctionalAmount - BudgetFunctionalAmount)

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforBudgetCode"
		
		ContextMessageEntityType2 is a StringField
			type is Alpha 50
			restricted
			"InforERPEnterpriseFinancialsBudgetAmountPerPeriod"
			
		ContextMessageText is a StringField
			type is Alpha 30
			restricted
			"GeneralLedgerTotal<GeneralLedgerTotal>"
			
		DerivedCalendarYear			is a DerivedField
			type is Alpha 4

			initialize LocalCalendarYear
			if (GeneralLedgerTotal.EntityYearPeriod.PeriodType.EndDate
			or  GeneralLedgerTotal.EntityYearPeriod.PeriodType.BeginningBalance)
				LocalCalendarYear	= GeneralLedgerTotal.EntityYearPeriod.Year 
				if (!LocalCalendarYear entered)
					LocalCalendarYear	= GeneralLedgerTotal.EntityYearPeriod[1:4] 
				return LocalCalendarYear
		DerivedZoneAccountingUnit	is a DerivedField
			type is like AccountingUnit
			restricted
			if (AccountingEntity.AccountingUnitZoneBalancing)
				if (AccountingUnitHierarchyRel.ZoneAccountingUnit entered)
					return AccountingUnitHierarchyRel.ZoneAccountingUnit
				else
					return EntityZoneAccountingUnitRel.AccountingUnit
		DerivedZoneFinanceDimension1	is a DerivedField
			type is like FinanceDimension1
			restricted
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				if (FinanceDimension1HierarchyRel.ZoneDimension entered)
					return FinanceDimension1HierarchyRel.ZoneDimension
				else
					return EnterpriseZoneFinanceDimension1Rel.FinanceDimension1
		DerivedPeriod			is a DerivedField
			type is Alpha 3
			restricted
			return GeneralLedgerTotal.EntityYearPeriod[5:7]
		DerivedBudgetRoundTo	is a DerivedField
    		type is Decimal 5.4
    		restricted

    		if (!LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency exists)
    			return .01
    		if (LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency.NumberOfDecimals = 2)
    			return .01
    		if (LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency.NumberOfDecimals = 0)
    			return 1
    		if (LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency.NumberOfDecimals = 3)
    			return .001
    		if (LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency.NumberOfDecimals = 4)
    			return .0001
		DerivedBudgetMeasure	is a DerivedField
			type is like TotalAmount
			restricted
			if (LocalToBudgetCurrency not entered)
				DerivedBudgetMeasure	= 0
			else
			if (LocalToBudgetCurrency	= GeneralLedgerTotal.Currency)
				DerivedBudgetMeasure	= NetTransactionAmount
			else
				initialize LocalBudgetRateGroup
				LocalBudgetRateGroup.BudgetTranslationRate				= true
				LocalBudgetRateGroup.Scenario							= Scenario.Parent
				LocalBudgetRateGroup.TranslationDate					= GeneralLedgerTotal.EntityYearPeriod.Date
				LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.FromCurrency		= GeneralLedgerTotal.Currency
				LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency		= LocalToBudgetCurrency
				if (GeneralLedgerTotal.GeneralLedgerChartAccount entered)
					LocalBudgetRateGroup.GeneralLedgerTranslationCode	= GeneralLedgerTotal.GeneralLedgerChartAccount.TranslationCode
				else
					LocalBudgetRateGroup.GeneralLedgerTranslationCode	= "IS"
				DerivedBudgetMeasure	= NetTransactionAmount*LocalBudgetRateGroup.GeneralLedgerTranslationRate.Rate
				round DerivedBudgetMeasure to nearest DerivedBudgetRoundTo
			return DerivedBudgetMeasure
		DerivedPeriodYear		is a DerivedField
			type is Numeric 4
			restricted
			return GeneralLedgerTotal.EntityYearPeriod[1:4]

		DerivedREFunctionalAmount	is a DerivedField 	
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
		DerivedREAlternateAmount	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
		DerivedREAlternateAmount2	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
		DerivedREAlternateAmount3	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
		DerivedREProjectAmount	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
		DerivedREReportAmount1	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
		DerivedREReportAmount2	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
		DerivedREReportAmount3	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
		DerivedREReportAmount4	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
		DerivedREReportAmount5	is a DerivedField
			type is like CurrencyAmount
			restricted
			return sum GeneralLedgerTransactionRERel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

		RevaluationMessage				is a MessageField
			restricted
			"JournalCreatedByRevaluation"
		TranslationMessage				is a MessageField
			restricted
			"JournalCreatedByTranslation"
		NewJournalDescription			is a DerivedField
			type is Alpha 50
			restricted
			if (LocalProcess	= 1)
				return RevaluationMessage
			else
				return TranslationMessage
		RetainedEarningsJournalDescription		is a MessageField	
			restricted
			"ProcessedRetainedEarningsEntry"

		CurrencyRelationshipMessage				is a MessageField
			restricted
			"CurrencyRelationBetween"
		DoesNotExistMessage						is a MessageField	
			restricted
			"DoesNotExist"
		ToMessage								is a MessageField
			restricted
			"To"
		CurrencyRateMessage						is a MessageField
			restricted
			"CurrencyRateBetween"
		TriangulationMessage					is a MessageField
			restricted
			"Triangulation"
		ForTranslationCodeMessage				is a MessageField
			restricted
			"ForTranslationCode"
		AccountSkippedMessage					is a MessageField
			"AccountSkipped"
		NoCalculationTranslationCode			is a MessageField	
			restricted

			"<LocalInstFinanceCodeBlock.GeneralLedgerChartAccount>AccountSkippedForTranslationCode<LocalInstTranslationCode>"







		CurrencyRelationshipError				is a MessageField	

			restricted
			"CurrencyRelationBetween<LocalCurrRelationship.FromCurrency>To<LocalCurrRelationship.ToCurrency>DoesNotExist"









		CurrencyRateError						is a MessageField	

			restricted
			"CurrencyRateBetween<LocalCurrRelationship.FromCurrency>To<LocalCurrRelationship.ToCurrency>DoesNotExistForTranslationCode<LocalInstTranslationCode>"













		FrTriangCurrRelationError				is a MessageField	

			restricted
			"TriangulationCurrencyRelationBetween<TriangulateFrRel.FromCurrency>To<TriangulateFrRel.ToCurrency>DoesNotExist"











		ToTriangCurrRelationError				is a MessageField	

			restricted
			"TriangulationCurrencyRelationBetween<TriangulateToRel.FromCurrency>To<TriangulateToRel.ToCurrency>DoesNotExist"











		FrTriangCurrRateError					is a MessageField	

			restricted
			"TriangulationCurrencyRateBetween<TriangulateFrRel.FromCurrency>To<TriangulateFrRel.ToCurrency>DoesNotExistForTranslationCode<LocalInstTranslationCode>"















		ToTriangCurrRateError					is a MessageField	

			restricted
			"TriangulationCurrencyRateBetween<TriangulateToRel.FromCurrency>To<TriangulateToRel.ToCurrency>DoesNotExistForTranslationCode<LocalInstTranslationCode>"




























































		





		DerivedPeriodEndingDate is a DerivedField
			type is Date
			restricted
			if (GeneralLedgerTotal.EntityYearPeriod like "*000")
			    return (GeneralLedgerTotal.EntityYearPeriod[1:4] + "0101")
			else
			    return GeneralLedgerTotal.EntityYearPeriod.Date


#ifdef module integration
		DerivedBODStatus is a DerivedField
			type is Alpha 10
			restricted
			if (ActionCode = "D") 
				return "Deleted"
			else 
				return "Open"

		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (ActionCode="C") 
				return "Add" 
			else 
				return "Replace"
				
		DerivedBODRevision is a DerivedField
			type is Alpha 25
			restricted
			return ""
			
		DerivedSystemOfRecord is a DerivedField
			type is Alpha size 2
			restricted
			return 0
		
		DerivedBODVariationID is a DerivedField
			type is Alpha size 10
			restricted
			return  bod id.VariationID
			
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return current timestamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedBODCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return create stamp.timestamp
			
		DerivedGLTotalGLChartAccount is a DerivedField
			type is Alpha size 26
			restricted
			return GeneralLedgerTotal.GeneralLedgerChartAccount
			
		DerivedGLChartAccountAccountDesc is a DerivedField
			type is Alpha size 60
			restricted
			return GeneralLedgerTotal.GeneralLedgerChartAccount.AccountDescription
			
		DerivedAccountType is a DerivedField
			type is Alpha size 25
			restricted
			if (ChartSection ="1") 
				return "BalanceSheet"
			else 
				return "ProfitAndLoss"

		DerivedGLTotalActor is a DerivedField
			type is Alpha size 25
			restricted
			return update stamp.actor
			
		DerivedPostingKey is a DerivedField
			type is Alpha size 200
			restricted
			return FinanceEnterpriseGroup+ "-" + Scenario+ "-" +GeneralLedgerTotal.Ledger+ "-" + UniqueID
		
		DerivedScenarioDescription is a DerivedField
			type is Alpha size 60
			restricted
			return Scenario.Description
			
		DerivedBODDisplayID is a DerivedField
			type is Alpha size 255
			restricted
			return Scenario+ "-" +GeneralLedgerTotal.Ledger+ "-" +DerivedAccountingEntity+ "-" +DerivedGLTotalGLChartAccount+ "-" +GeneralLedgerTotal.EntityYearPeriod
		
		DerivedPeriodEndingYear is a DerivedField
			type is Alpha size 10
			restricted
			DerivedPeriodEndingYear = PeriodEndingDate
			return DerivedPeriodEndingYear[1:4]
			
		DerivedGLTotalPeriodEndingDate is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedPeriodEndingYear > 0)
				DerivedGLTotalPeriodEndingDate=PeriodEndingDate
				return DerivedGLTotalPeriodEndingDate[1:4] + "-" + DerivedGLTotalPeriodEndingDate[5:6] + "-" + DerivedGLTotalPeriodEndingDate[7:8]
			else
				return ""
				
		DerivedcalendarYear is a DerivedField
			type is Alpha size 10
			restricted
			return GeneralLedgerTotal.EntityYearPeriod.Year 
			
		DerivedCalendarDisplayPeriod is a DerivedField
			type is Alpha size 10
			restricted
			return GeneralLedgerTotal.EntityYearPeriod.DisplayPeriod
			
		DerivedGLFullAccount is a DerivedField
			type is Alpha size 60
			restricted
			return DerivedAccountingEntity+ "-" +DerivedGLTotalGLChartAccount
			
		DerivedReportAmount1Currency  is a DerivedField
			type is Alpha size 15
			restricted
			return FinanceEnterpriseGroup.ReportCurrencyOne
			
		DerivedAlternateCurrency  is a DerivedField
			type is Alpha size 5
			restricted
			return AccountingEntity.AlternateCurrency
			
		DerivedDebitFunctionalAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetFunctionalAmount  >0) 
				return NetFunctionalAmount
			else
				return ""
		
		DerivedCreditFunctionalAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetFunctionalAmount  <0) 
				return NetFunctionalAmount
			else
				return ""
				
		DerivedDebitTransactionAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetTransactionAmount  >0) 
				return NetTransactionAmount
			else
				return ""
				
		DerivedCreditTransactionAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetTransactionAmount  <0) 
				return NetTransactionAmount
			else
				return ""
				
		DerivedDebitAlternateAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetAlternateAmount  >0) 
				return NetAlternateAmount
			else
				return ""
				
		DerivedCreditAlternateAmount is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetAlternateAmount  <0) 
				return NetAlternateAmount
			else
				return ""
		
		DerivedDebitReportAmount1 is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetReportAmount1  >0) 
				return NetReportAmount1
			else
				return ""
		
		DerivedCreditReportAmount1 is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetReportAmount1  <0) 
				return NetReportAmount1
			else
				return ""
		
		DerivedDebitAlternateAmount2 is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetAlternateAmount2  >0) 
				return NetAlternateAmount2
			else
				return ""
		
		DerivedCreditAlternateAmount2 is a DerivedField
			type is Decimal size 21.3
			restricted
			if (NetAlternateAmount2  <0) 
				return NetAlternateAmount2
			else
				return ""
				
		DerivedFunctionalCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return AccountingEntity.FunctionalCurrency
				
		DerivedLocation is a DerivedField
			type is Alpha size 25
			restricted
			return ""

		DerivedDocumentID is a DerivedField
			type is Alpha size 255
			restricted
			return FinanceEnterpriseGroup+ "-" +Scenario+ "-" +GeneralLedgerTotal.Ledger+ "-" +GeneralLedgerTotal.EntityYearPeriod+ "-" +UniqueID
		
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			if (DerivedDelimiter="")
				return "-"
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedBODID is a DerivedField
			type is Alpha 400
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + ":"+DerivedLocation + ":"+DerivedDocumentID + ":" +DerivedBODRevision+"?SourceSystemGLMovement&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker		
			
		DerivedEnterpriseChartID is a DerivedField
			type is Alpha size 30
			restricted
			return FinanceEnterpriseGroup+ DerivedDelimiter + FinanceEnterpriseGroup.EnterpriseChart
			
		DerivedAccountingEntity is a DerivedField
			type is Alpha size 20
			restricted
			return FinanceEnterpriseGroup+DerivedDelimiter+AccountingEntity



		SourceSystemGLMovementBODXML is a DerivedField
			type is XMLDocument
			restricted
			SourceSystemGLMovementBODXML = template.IONSyncSourceSystemGLMovement_GeneralLedgerTotal_ST document for this instance
#endif

			
		DerivedBalanceSheetOpening is a MessageField
			restricted
			"Balance_\Sheet_\Opening_\Journal"
			
		DerivedIncomeStatement is a MessageField
			restricted
			"Income_\Statement_\Closing_\Journal"
			
		DerivedBalanceSheetClosing is a MessageField
			restricted
			"Balance_\Sheet_\Closing_\Journal"
				
		DerivedYearEndJournalDescription	is a ConditionalField
			type is like Description
			if (LocalYearEndReportType.BalanceSheetOpening)
				DerivedBalanceSheetOpening
			else
			if (LocalYearEndReportType.ProfitAndLoss)
				DerivedIncomeStatement
			else
				DerivedBalanceSheetClosing





		DerivedADBDimension1	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension1 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension1.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension2	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension2 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension2.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension3	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension3 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension3.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension		is a DerivedField
			type is like AccountingUnit
			restricted
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.AccountingUnit)
				return LocalFinanceCodeBlockADB.AccountingUnit
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Project)
				return LocalFinanceCodeBlockADB.Project
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension1)
				return LocalFinanceCodeBlockADB.FinanceDimension1
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension2)
				return LocalFinanceCodeBlockADB.FinanceDimension2
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension3)
				return LocalFinanceCodeBlockADB.FinanceDimension3
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension4)
				return LocalFinanceCodeBlockADB.FinanceDimension4
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension5)
				return LocalFinanceCodeBlockADB.FinanceDimension5
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension6)
				return LocalFinanceCodeBlockADB.FinanceDimension6
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension7)
				return LocalFinanceCodeBlockADB.FinanceDimension7
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension8)
				return LocalFinanceCodeBlockADB.FinanceDimension8
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension9)
				return LocalFinanceCodeBlockADB.FinanceDimension9
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension10)
				return LocalFinanceCodeBlockADB.FinanceDimension10
			else
				return ""
		DerivedADBDimensionCode	is a StringField
			type is Alpha 70
			restricted
			DerivedADBTransactionCurrency
			DerivedADBLedger
			DerivedADBDimension1SeqNumber
			DerivedADBDimension2SeqNumber
			DerivedADBDimension3SeqNumber

		DerivedZeroString	is a StringField
			type is AlphaUpper 20
			restricted
			"00000000000000000000"

		DerivedADBLedger				is a DerivedField
			type is like Ledger
			restricted
			if (FinanceEnterpriseGroup.IncludeLedgerInAverageDailyBalance)
				LocalZeroStringLength = (DerivedZeroString size - LocalInstLedger size)
				if (LocalZeroStringLength > 0)
					DerivedADBLedger = DerivedZeroString[1:LocalZeroStringLength] + LocalInstLedger
				else
					return LocalInstLedger
			else
				return ""
		DerivedADBTransactionCurrency	is a DerivedField
			type is like Currency
			restricted
			if (FinanceEnterpriseGroup.CalculateADBOption.AllCurrencyAmounts)
				LocalZeroStringLength = (5 - LocalCurrencyCode size)
				if (LocalZeroStringLength > 0)
					DerivedADBTransactionCurrency = DerivedZeroString[1:LocalZeroStringLength] + LocalCurrencyCode
				else
					return LocalCurrencyCode
			else
				return ""

		DerivedADBDimension1SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension1 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension1.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimension2SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension2 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension2.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimension3SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension3 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension3.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimensionSeqNumber		is a DerivedField
			type is AlphaRight 7
			restricted
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.AccountingUnit)
				return LocalFinanceCodeBlockADB.AccountingUnit.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Project)
				return LocalFinanceCodeBlockADB.Project.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension1)
				return LocalFinanceCodeBlockADB.FinanceDimension1.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension2)
				return LocalFinanceCodeBlockADB.FinanceDimension2.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension3)
				return LocalFinanceCodeBlockADB.FinanceDimension3.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension4)
				return LocalFinanceCodeBlockADB.FinanceDimension4.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension5)
				return LocalFinanceCodeBlockADB.FinanceDimension5.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension6)
				return LocalFinanceCodeBlockADB.FinanceDimension6.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension7)
				return LocalFinanceCodeBlockADB.FinanceDimension7.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension8)
				return LocalFinanceCodeBlockADB.FinanceDimension8.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension9)
				return LocalFinanceCodeBlockADB.FinanceDimension9.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension10)
				return LocalFinanceCodeBlockADB.FinanceDimension10.DerivedSequenceNumber
			else
				return ""

		DerivedBudgetDimensionCode        is a StringField
		    type is Alpha 105
		    restricted
			AccountingEntity.DerivedSequenceNumber
			GeneralLedgerTotal.AccountingUnit.DerivedSequenceNumber
			GeneralLedgerTotal.GeneralLedgerChartAccount.DerivedSequenceNumber
			GeneralLedgerTotal.Project.DerivedSequenceNumber
			FinanceDimension1.DerivedSequenceNumber
			FinanceDimension2.DerivedSequenceNumber
			FinanceDimension3.DerivedSequenceNumber
			FinanceDimension4.DerivedSequenceNumber
			FinanceDimension5.DerivedSequenceNumber
			FinanceDimension6.DerivedSequenceNumber
			FinanceDimension7.DerivedSequenceNumber
			FinanceDimension8.DerivedSequenceNumber
			FinanceDimension9.DerivedSequenceNumber
			FinanceDimension10.DerivedSequenceNumber
				
    Conditions
		NotBeginningBalancePeriod									
			restricted												
			when (!GeneralLedgerTotal.EntityYearPeriod like "*000")
		AlternateCurrencyExists
			restricted
			when (AccountingEntity.AlternateCurrencyEntered)
		AlternateCurrency2Exists
			restricted
			when (AccountingEntity.AlternateCurrency2Entered)
		AlternateCurrency3Exists
			restricted
			when (AccountingEntity.AlternateCurrency3Entered)			
		ReportCurrencyOneExists
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyOneEntered)
		ReportCurrencyTwoExists
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
		ReportCurrencyThreeExists
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
		ReportCurrencyFourExists
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyFourEntered)
		ReportCurrencyFiveExists
			restricted
			when (FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
		UnitsAmountExists
			restricted
			when (NetUnitsAmount entered)
		Dimension1Used
			restricted
			when (FinanceEnterpriseGroup.FinanceDimension1Label entered)
        ProjectExists
        	restricted
        	when (GeneralLedgerTotal.Project entered)
        ProjectUsed
        	restricted
        	when (FinanceEnterpriseGroup.ProjectLabel entered)
		AccountingUnitUsed
			restricted
			when (FinanceEnterpriseGroup.AccountingUnitLabel entered)
		ProjectReportCurrencyOneExists
			restricted	
			when (ProjectRel.DynamicMeasure = "NetReportAmount1")
		ProjectReportCurrencyTwoExists
			restricted		
			when (ProjectRel.DynamicMeasure = "NetReportAmount2")					
		ProjectReportCurrencyThreeExists
			restricted		
			when (ProjectRel.DynamicMeasure = "NetReportAmount3")					
		ProjectReportCurrencyFourExists
			restricted		
			when (ProjectRel.DynamicMeasure = "NetReportAmount4")					
		ProjectReportCurrencyFiveExists
			restricted		
			when (ProjectRel.DynamicMeasure = "NetReportAmount5")
		ProjectReportCurrencyProjectExists
			restricted		
			when (ProjectRel.DynamicMeasure = "NetProjectAmount")	
		SEFAReportCurrencyOneExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Report1)
		SEFAReportCurrencyTwoExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Report2)					
		SEFAReportCurrencyThreeExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Report3)					
		SEFAReportCurrencyFourExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Report4)					
		SEFAReportCurrencyFiveExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Report5)
		SEFAReportCurrencyProjectExists
			restricted		
			when (ProjectReportingSettingsRel.ReportingCurrency.Project)					
		SEFAReportCurrencyOneAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Report1)
		SEFAReportCurrencyTwoAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Report2)					
		SEFAReportCurrencyThreeAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Report3)					
		SEFAReportCurrencyFourAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Report4)					
		SEFAReportCurrencyFiveAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Report5)
		SEFAReportCurrencyProjectAllExists
			restricted		
			when (ProjectReportingSettingsAllRel.ReportingCurrency.Project)		
		DimensionZoneBalancing
			restricted
			when (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
		WithinSearchDateRange		
			restricted
			when ((SearchDateRange not entered)
			or 	 (PeriodEndingDate entered	
			and   SearchDateRange entered
			and   PeriodEndingDate within SearchDateRange))
				






		SecurityGroupAllowsAccess
			when ((actor.context.AccountingEntitySecurityGroup = ""
            or   (actor.context.AccountingEntitySecurityGroup != ""
            and   AccountingEntitySecurityGroupMemberRel exists))
			and  (GeneralLedgerTotal.AccountingUnit !entered
			or   (GeneralLedgerTotal.AccountingUnit entered   
			and  (FinanceEnterpriseGroup.AccountingUnitSelected = false)
			or   (actor.context.AccountingUnitSecurityGroup = "")
			or   (actor.context.AccountingUnitSecurityGroup != ""
			and  (GeneralLedgerTotal.AccountingUnit.AccountingUnitType.Node
			or   (AccountingUnitSecurityGroupDetailRel exists
			and  !AccountingUnitSecurityGroupDetailRel.CreatedForHierarchyAccess)))))
			and  (GeneralLedgerTotal.Project !entered
			or   (GeneralLedgerTotal.Project entered
			and  (FinanceEnterpriseGroup.ProjectEntry = false)
			or   (actor.context.ProjectSecurityGroup = "")      
			or   (actor.context.ProjectSecurityGroup != ""
			and  (GeneralLedgerTotal.Project.ProjectType.Node
			or   ((ProjectSecurityGroupDetailRel exists)
			or    !ProjectSecurityGroupDetailRel.CreatedForHierarchyAccess)))))
		    and ((actor.context.ChartAccountSecurityGroup = "")
		    or   (actor.context.ChartAccountSecurityGroup != ""
		    and  (GeneralLedgerTotal.GeneralLedgerChartAccount.ChartType.Node
		    or   (ChartAccountSecurityGroupDetailRel exists
		    and  !ChartAccountSecurityGroupDetailRel.CreatedForHierarchyAccess))))			
			and  (FinanceDimension1 !entered
			or   (FinanceDimension1 entered
			and ((FinanceEnterpriseGroup.FinanceDimension1Entry = false)
			or   (actor.context.FinanceDimension1SecurityGroup = "")      
			or   (actor.context.FinanceDimension1SecurityGroup != ""
			and  (FinanceDimension1.DimensionType.Node
			or   (FinanceDimension1SecurityGroupDetailRel exists
			and  !FinanceDimension1SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension10 !entered
			or   (FinanceDimension10 entered
			and ((FinanceEnterpriseGroup.FinanceDimension10Entry = false)
			or   (actor.context.FinanceDimension10SecurityGroup = "")      
			or   (actor.context.FinanceDimension10SecurityGroup != ""
			and  (FinanceDimension10.DimensionType.Node
			or   (FinanceDimension10SecurityGroupDetailRel exists
			and  !FinanceDimension10SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension2 !entered
			or   (FinanceDimension2 entered
			and ((FinanceEnterpriseGroup.FinanceDimension2Entry = false)
			or   (actor.context.FinanceDimension2SecurityGroup = "")      
			or   (actor.context.FinanceDimension2SecurityGroup != ""
			and  (FinanceDimension2.DimensionType.Node
			or   (FinanceDimension2SecurityGroupDetailRel exists
			and  !FinanceDimension2SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension3 !entered
			or   (FinanceDimension3 entered
			and ((FinanceEnterpriseGroup.FinanceDimension3Entry = false)
			or   (actor.context.FinanceDimension3SecurityGroup = "")      
			or   (actor.context.FinanceDimension3SecurityGroup != ""
			and  (FinanceDimension3.DimensionType.Node
			or   (FinanceDimension3SecurityGroupDetailRel exists
			and  !FinanceDimension3SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension4 !entered
			or   (FinanceDimension4 entered
			and ((FinanceEnterpriseGroup.FinanceDimension4Entry = false)
			or   (actor.context.FinanceDimension4SecurityGroup = "")      
			or   (actor.context.FinanceDimension4SecurityGroup != ""
			and  (FinanceDimension4.DimensionType.Node
			or   (FinanceDimension4SecurityGroupDetailRel exists
			and  !FinanceDimension4SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension5 !entered
			or   (FinanceDimension5 entered
			and ((FinanceEnterpriseGroup.FinanceDimension5Entry = false)
			or   (actor.context.FinanceDimension5SecurityGroup = "")      
			or   (actor.context.FinanceDimension5SecurityGroup != ""
			and  (FinanceDimension5.DimensionType.Node
			or   (FinanceDimension5SecurityGroupDetailRel exists
			and  !FinanceDimension5SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension6 !entered
			or   (FinanceDimension6 entered
			and ((FinanceEnterpriseGroup.FinanceDimension6Entry = false)
			or   (actor.context.FinanceDimension6SecurityGroup = "")      
			or   (actor.context.FinanceDimension6SecurityGroup != ""
			and  (FinanceDimension6.DimensionType.Node
			or   (FinanceDimension6SecurityGroupDetailRel exists
			and  !FinanceDimension6SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension7 !entered
			or   (FinanceDimension7 entered
			and ((FinanceEnterpriseGroup.FinanceDimension7Entry = false)
			or   (actor.context.FinanceDimension7SecurityGroup = "")      
			or   (actor.context.FinanceDimension7SecurityGroup != ""
			and  (FinanceDimension7.DimensionType.Node
			or   (FinanceDimension7SecurityGroupDetailRel exists
			and  !FinanceDimension7SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension8 !entered
			or   (FinanceDimension8 entered
			and ((FinanceEnterpriseGroup.FinanceDimension8Entry = false)
			or   (actor.context.FinanceDimension8SecurityGroup = "")      
			or   (actor.context.FinanceDimension8SecurityGroup != ""
			and  (FinanceDimension8.DimensionType.Node
			or   (FinanceDimension8SecurityGroupDetailRel exists
			and  !FinanceDimension8SecurityGroupDetailRel.CreatedForHierarchyAccess))))))
			and  (FinanceDimension9 !entered
			or   (FinanceDimension9 entered
			and ((FinanceEnterpriseGroup.FinanceDimension9Entry = false)
			or   (actor.context.FinanceDimension9SecurityGroup = "")      
			or   (actor.context.FinanceDimension9SecurityGroup != ""
			and  (FinanceDimension9.DimensionType.Node
			or   (FinanceDimension9SecurityGroupDetailRel exists
			and  !FinanceDimension9SecurityGroupDetailRel.CreatedForHierarchyAccess)))))))															
		
		SecurityGroupAllowsAccessBlankValuesExcluded
			when (GeneralLedgerTotal.AccountingEntity.AccountingEntitySecurityGroupAllowsAccess
			and  ((FinanceEnterpriseGroup.AccountingUnitSelected  
			and    GeneralLedgerTotal.AccountingUnit.SecurityGroupAllowsAccess)
			or    !FinanceEnterpriseGroup.AccountingUnitSelected)
			and  ((FinanceEnterpriseGroup.ProjectEntry  
			and   GeneralLedgerTotal.Project.SecurityGroupAllowsAccess)
			or    !FinanceEnterpriseGroup.ProjectEntry)
			and   GeneralLedgerTotal.GeneralLedgerChartAccount.SecurityGroupAllowsAccess
			and  ((FinanceEnterpriseGroup.FinanceDimension1Entry
			and   FinanceDimension1.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension1Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension2Entry
			and   FinanceDimension2.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension2Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension3Entry
			and   FinanceDimension3.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension3Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension4Entry
			and   FinanceDimension4.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension4Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension5Entry
			and   FinanceDimension5.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension5Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension6Entry
			and   FinanceDimension6.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension6Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension7Entry
			and   FinanceDimension7.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension7Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension8Entry
			and   FinanceDimension8.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension8Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension9Entry
			and   FinanceDimension9.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension9Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension10Entry
			and   FinanceDimension10.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension10Entry))

		IsNotBudgetScenario	
			restricted				
			when (Scenario.CommitmentType.Actuals
			or    Scenario.CommitmentType.Encumbrances
			or    Scenario.CommitmentType.Commitments)

		CommitmentScenario	
			restricted				
			when (Scenario.CommitmentType.Encumbrances
			or    Scenario.CommitmentType.Commitments)
		
		IsZeroBudget
			restricted
			when (NetUnitsAmount not entered
			and   NetTransactionAmount not entered)

		CanDeleteZeroBudget
			restricted
			when (IsZeroBudget
			and	  Scenario.Parent.CanDeleteZeroBudget)

		IsInterEntity		
			restricted
			when (GeneralLedgerTotal.GeneralLedgerChartAccount.IsAInterEntityAccount 
			and   GeneralLedgerTotal.Ledger.CloseLedger         = false
			and   Scenario                                      = FinanceEnterpriseGroup.ActualsScenario)

		IsInterDepartment		
			restricted
			when (GeneralLedgerTotal.GeneralLedgerChartAccount.IsAInterDepartmentAccount 
			and   GeneralLedgerTotal.Ledger.CloseLedger         = false
			and   Scenario                                      = FinanceEnterpriseGroup.ActualsScenario)
		
		IsOpenPeriod
			when (EntityLedgerPeriodRel.OpenPeriod)
			
 		WithinSearchGroup
 			restricted
 			when (SearchGroup not entered
 			or    this instance within SearchGroup)

		MatchesColumnarSearchFinanceDimensions
			when (MatchesColumnarSearchFinanceDimension1
			and   MatchesColumnarSearchFinanceDimension2
			and   MatchesColumnarSearchFinanceDimension3
			and   MatchesColumnarSearchFinanceDimension4
			and   MatchesColumnarSearchFinanceDimension5
			and   MatchesColumnarSearchFinanceDimension6
			and   MatchesColumnarSearchFinanceDimension7
			and   MatchesColumnarSearchFinanceDimension8
			and   MatchesColumnarSearchFinanceDimension9
			and   MatchesColumnarSearchFinanceDimension10)
		MatchesColumnarSearchFinanceDimension1
			when ((ColumnarSearchFinanceDimension1Structure not entered
			and   ColumnarSearchFinanceDimension1 not entered)
			or   ((ColumnarSearchFinanceDimension1Structure entered
			and   ColumnarSearchFinanceDimension1 entered)
			and  (ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension1)))
		MatchesColumnarSearchFinanceDimension2
			when ((ColumnarSearchFinanceDimension2Structure not entered
			and   ColumnarSearchFinanceDimension2 not entered)
			or   ((ColumnarSearchFinanceDimension2Structure entered
			and   ColumnarSearchFinanceDimension2 entered)
			and  (ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension2)))
		MatchesColumnarSearchFinanceDimension3
			when ((ColumnarSearchFinanceDimension3Structure not entered
			and   ColumnarSearchFinanceDimension3 not entered)
			or   ((ColumnarSearchFinanceDimension3Structure entered
			and   ColumnarSearchFinanceDimension3 entered)
			and  (ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension3)))
		MatchesColumnarSearchFinanceDimension4
			when ((ColumnarSearchFinanceDimension4Structure not entered
			and   ColumnarSearchFinanceDimension4 not entered)
			or   ((ColumnarSearchFinanceDimension4Structure entered
			and   ColumnarSearchFinanceDimension4 entered)
			and  (ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension4)))
		MatchesColumnarSearchFinanceDimension5
			when ((ColumnarSearchFinanceDimension5Structure not entered
			and   ColumnarSearchFinanceDimension5 not entered)
			or   ((ColumnarSearchFinanceDimension5Structure entered
			and   ColumnarSearchFinanceDimension5 entered)
			and  (ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension5)))
		MatchesColumnarSearchFinanceDimension6
			when ((ColumnarSearchFinanceDimension6Structure not entered
			and   ColumnarSearchFinanceDimension6 not entered)
			or   ((ColumnarSearchFinanceDimension6Structure entered
			and   ColumnarSearchFinanceDimension6 entered)
			and  (ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension6)))
		MatchesColumnarSearchFinanceDimension7
			when ((ColumnarSearchFinanceDimension7Structure not entered
			and   ColumnarSearchFinanceDimension7 not entered)
			or   ((ColumnarSearchFinanceDimension7Structure entered
			and   ColumnarSearchFinanceDimension7 entered)
			and  (ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension7)))
		MatchesColumnarSearchFinanceDimension8
			when ((ColumnarSearchFinanceDimension8Structure not entered
			and   ColumnarSearchFinanceDimension8 not entered)
			or   ((ColumnarSearchFinanceDimension8Structure entered
			and   ColumnarSearchFinanceDimension8 entered)
			and  (ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension8)))
		MatchesColumnarSearchFinanceDimension9
			when ((ColumnarSearchFinanceDimension9Structure not entered
			and   ColumnarSearchFinanceDimension9 not entered)
			or   ((ColumnarSearchFinanceDimension9Structure entered
			and   ColumnarSearchFinanceDimension9 entered)
			and  (ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension9)))
		MatchesColumnarSearchFinanceDimension10
			when ((ColumnarSearchFinanceDimension10Structure not entered
			and   ColumnarSearchFinanceDimension10 not entered)
			or   ((ColumnarSearchFinanceDimension10Structure entered
			and   ColumnarSearchFinanceDimension10 entered)
			and  (ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension10)))
		MatchesColumnarSearchProject
			when ((ColumnarSearchProjectStructure not entered
			and   ColumnarSearchProject not entered)
			or   ((ColumnarSearchProjectStructure entered
			and   ColumnarSearchProject entered)
			and  (ColumnarSearchProjectHierarchyRel.DerivedLevel1Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel2Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel3Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel4Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel5Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel6Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel7Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel8Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel9Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel10Parent			= ColumnarSearchProject)))
		MatchesColumnarSearchAccountingUnit
			when ((ColumnarSearchAccountingUnitStructure not entered
			and   ColumnarSearchAccountingUnit not entered)
			or   ((ColumnarSearchAccountingUnitStructure entered
			and   ColumnarSearchAccountingUnit entered)
			and  (ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel1Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel2Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel3Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel4Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel5Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel6Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel7Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel8Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel9Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel10Parent		= ColumnarSearchAccountingUnit)))
		MatchesColumnarSearchAccount
			when ((ColumnarSearchReportingChart not entered
			and   ColumnarSearchGeneralLedgerChartAccount not entered)
			or   ((ColumnarSearchReportingChart entered
			and   ColumnarSearchGeneralLedgerChartAccount entered)
			and  (ColumnarSearchReportingChartAccountRel.DerivedLevel1Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel2Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel3Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel4Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel5Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel6Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel7Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel8Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel9Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel10Parent	= ColumnarSearchGeneralLedgerChartAccount)))

	Relations
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.SystemAccount					= LocalSystemAccount
		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ReportingChart					= LocalReportingChart
				related.ChartType						= 2 
				related.GeneralLedgerChartAccount		= GeneralLedgerTotal.GeneralLedgerChartAccount
		GeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGeneralLedgerTotalOrder
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= AccountingEntity
				related.GeneralLedgerCalendarPeriod					= GeneralLedgerTotal.EntityYearPeriod				
				related.FinanceCodeBlock.Ledger						= GeneralLedgerTotal.Ledger
				related.System										= GeneralLedgerTotal.System
				related.CurrencyCode								= GeneralLedgerTotal.Currency
				related.FinanceCodeBlock.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
				related.FinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
				related.FinanceCodeBlock.Project					= GeneralLedgerTotal.Project
				related.DimensionCode								= GeneralLedgerTotal.DimensionCode
				related.PrimaryLedger								= GeneralLedgerTotal.PrimaryLedger
			Instance Selection
				where (related.Status.Posted)
		GeneralLedgerTransactionRERel    
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGeneralLedgerTotalOrder
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= AccountingEntity
				related.GeneralLedgerCalendarPeriod					= LocalBasisEndPeriod				
				related.FinanceCodeBlock.Ledger						= LocalFinanceCodeBlockRE.Ledger
				related.System										= "GL"
				related.CurrencyCode								= LocalRECurrency
				related.FinanceCodeBlock.AccountingUnit				= LocalFinanceCodeBlockRE.AccountingUnit
				related.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalFinanceCodeBlockRE.GeneralLedgerChartAccount
			Instance Selection
				where (related.PrimaryLedger						= GeneralLedgerTotal.Ledger
				and related.Status.Posted)
		GLCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses ByGeneralLedgerTotalOrder
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.ToAccountingEntity			= AccountingEntity
				related.EntityYearPeriod							= GeneralLedgerTotal.EntityYearPeriod				
				related.FinanceCodeBlock.Ledger						= GeneralLedgerTotal.Ledger
				related.System										= GeneralLedgerTotal.System
				related.CurrencyCode								= GeneralLedgerTotal.Currency
				related.FinanceCodeBlock.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
				related.FinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
				related.FinanceCodeBlock.Project					= GeneralLedgerTotal.Project
				related.DimensionCode								= GeneralLedgerTotal.DimensionCode

			Instance Selection
				where (related.Status.Released
				or	   related.Status.History)
		AccountingUnitHierarchyRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AccountingUnitStructure = FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity		= LocalInstAccountingEntity
				related.AccountingUnit		    = LocalInstAccountingUnit
		FinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1		    = LocalInstFinanceDimension1
		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalInstAccountingEntity
		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension1Structure			= FinanceEnterpriseGroup.EnterpriseDim1Structure
		FinanceDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension2Structure			= FinanceEnterpriseGroup.EnterpriseDim2Structure
		FinanceDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension3Structure			= FinanceEnterpriseGroup.EnterpriseDim3Structure
		FinanceDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension4Structure			= FinanceEnterpriseGroup.EnterpriseDim4Structure
		FinanceDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension5Structure			= FinanceEnterpriseGroup.EnterpriseDim5Structure
		FinanceDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension6Structure			= FinanceEnterpriseGroup.EnterpriseDim6Structure
		FinanceDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension7Structure			= FinanceEnterpriseGroup.EnterpriseDim7Structure
		FinanceDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension8Structure			= FinanceEnterpriseGroup.EnterpriseDim8Structure
		FinanceDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension9Structure			= FinanceEnterpriseGroup.EnterpriseDim9Structure
		FinanceDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension10Structure			= FinanceEnterpriseGroup.EnterpriseDim10Structure
		SystemProjectRel   
			one-to-one relation to ProjectHierarchy
			Field Mapping uses BySystemProjectInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ProjectStructure					= FinanceEnterpriseGroup.EnterpriseProjectStructure
		EntityZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByEntityZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalInstAccountingEntity
		EnterpriseZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByEnterpriseZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
		DefaultZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByDefaultZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= AccountingEntity
		EntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= AccountingEntity
		ProjectRel
			one-to-one relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.Project			       				= GeneralLedgerTotal.Project
		JournalControlRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
		GainLossTotalRel
			one-to-many relation to GainLossTotal
			Field Mapping uses ForGainLossProcess
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingBasis						= ReportingBasis
				related.GainLossTotal.AccountingEntity		= LocalAccountingEntity
				related.GainLossTotal.Ledger				= LocalInstLedger
				related.GainLossTotal.RunSequence			= LocalRunSequence
            Instance Selection
                where (related.Status.UnProcessed)
		TranslationRateRel
			one-to-one relation to GeneralLedgerTranslationRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerTranslationCode		= LocalInstTranslationCode
				related.BudgetTranslationRate				= false
				related.Scenario							= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTranslationRate.CurrencyRelationship	= LocalCurrRelationship
				related.TranslationDate						= LocalTranslationDate
		TranslationFrRateRel
			one-to-one relation to GeneralLedgerTranslationRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerTranslationCode		= LocalInstTranslationCode
				related.BudgetTranslationRate				= false
				related.Scenario							= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTranslationRate.CurrencyRelationship	= TriangulateFrRel
				related.TranslationDate						= LocalTranslationDate
		TranslationToRateRel
			one-to-one relation to GeneralLedgerTranslationRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.GeneralLedgerTranslationCode		= LocalInstTranslationCode
				related.BudgetTranslationRate				= false
				related.Scenario							= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTranslationRate.CurrencyRelationship	= TriangulateToRel
				related.TranslationDate						= LocalTranslationDate
		EntityCurrencyLedgerPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByLedgerEntity
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.Ledger						= LocalCurrencyLedger				
				related.AccountingEntity			= LocalAccountingEntity
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = LocalGeneralLedgerCalendarPeriod
		ReportingBasisYearRel
			one-to-one relation to ReportingBasisYear
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= LocalReportingBasis
				related.ReportingBasisYear			= LocalBasisYear
		GLBaseZoneBalanceRel
			one-to-many relation to GLZoneBalance
			Field Mapping uses ByBaseZone
				related.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
				related.AccountingEntity						= AccountingEntity
				related.GLZoneBalance.Ledger					= GeneralLedgerTotal.Ledger
				related.GLZoneBalance.System					= GeneralLedgerTotal.System
				related.GLZoneBalance.Currency					= GeneralLedgerTotal.Currency
				related.GLZoneBalance.EntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
				related.GLZoneBalance.BaseZoneAccountingUnit	= GeneralLedgerTotal.AccountingUnit
				related.GLZoneBalance.BaseZoneFinanceDimension	= FinanceDimension1
				related.GLZoneBalance.BaseZoneAccount			= GeneralLedgerTotal.GeneralLedgerChartAccount
            Instance Selection
                where (related.DerivedBaseZoneAmountsExist)
		GLZoneBalanceRel
			one-to-many relation to GLZoneBalance
			Field Mapping uses ByZone
				related.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
				related.AccountingEntity						= AccountingEntity
				related.GLZoneBalance.Ledger					= GeneralLedgerTotal.Ledger
				related.GLZoneBalance.System					= GeneralLedgerTotal.System
				related.GLZoneBalance.Currency					= GeneralLedgerTotal.Currency
				related.GLZoneBalance.EntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
				related.GLZoneBalance.ZoneAccountingUnit		= GeneralLedgerTotal.AccountingUnit
				related.GLZoneBalance.ZoneFinanceDimension		= FinanceDimension1
				related.GLZoneBalance.ZoneAccount				= GeneralLedgerTotal.GeneralLedgerChartAccount
            Instance Selection
                where (related.DerivedZoneAmountsExist)
		PeriodShadowForYearRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar			   = LocalReportingBasis.GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod		   <= EntityCurrencyLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.SummaryPeriodType.Year)
		OpenReportingBasisYearRel								
			one-to-many relation to ReportingBasisYear
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingBasis				= LocalReportingBasis
			Instance Selection
				where (related.ReportingBasisYear			>= LocalBasisYear
				and    related.ReportingBasisYear			<  LocalReportingBasis.BasisYear)

		GeneralLedgerTransactionsForOldDimensionCodeRel
		    one-to-many relation to GeneralLedgerTransaction
		    Field Mapping uses ByGeneralLedgerTotalOrder
		        related.FinanceEnterpriseGroup                     = FinanceEnterpriseGroup
		        related.AccountingEntity                           = AccountingEntity
		        related.GeneralLedgerCalendarPeriod                = GeneralLedgerTotal.EntityYearPeriod
		        related.FinanceCodeBlock.Ledger                    = GeneralLedgerTotal.Ledger
		        related.System                                     = GeneralLedgerTotal.System
		        related.CurrencyCode                               = GeneralLedgerTotal.Currency
		        related.FinanceCodeBlock.AccountingUnit            = GeneralLedgerTotal.AccountingUnit
		        related.FinanceCodeBlock.GeneralLedgerChartAccount = GeneralLedgerTotal.GeneralLedgerChartAccount
		        related.FinanceCodeBlock.Project                   = GeneralLedgerTotal.Project
		        related.DimensionCode                              = OldDimensionCode
		        related.PrimaryLedger                              = GeneralLedgerTotal.PrimaryLedger
		    Instance Selection
		        where (related.Status.Posted)

		YearEndJournalPerEntityRel
			one-to-one relation to ReportingBasisYearEndJournal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup			
				related.ReportingBasis								= LocalReportingBasis		
				related.ReportingBasisYear							= LocalYearEndReportingBasisYear						
				related.AccountingEntity							= LocalAccountingEntity
				related.ReportingBasisYearEndJournal				= LocalYearEndReportType

		GeneralLedgerTotalYearEndJournalTransactionRel
			one-to-one relation to ReportingBasisYearEndJournalTransaction
			Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup			          								= LocalFinanceEnterpriseGroup			
                related.ReportingBasis															= LocalReportingBasis
                related.ReportingBasisYear														= LocalYearEndReportingBasisYear
                related.AccountingEntity														= LocalAccountingEntity
				related.ReportingBasisYearEndJournal											= LocalYearEndReportType                
				related.ReportingBasisYearEndJournalTransaction.EntityYearPeriod				= LocalYearEndCalendarPeriod
				related.ReportingBasisYearEndJournalTransaction.PrimaryLedger		 		  	= LocalYearEndGLTotalLedger						
				related.ReportingBasisYearEndJournalTransaction.System							= LocalYearEndSystem
				related.ReportingBasisYearEndJournalTransaction.Currency			 		  	= LocalYearEndCurrency						
				related.ReportingBasisYearEndJournalTransaction.AccountingUnit 		  			= LocalYearEndAccountingUnit
				related.ReportingBasisYearEndJournalTransaction.Project                  		= LocalYearEndProject
                related.ReportingBasisYearEndJournalTransaction.DimensionCode					= LocalYearEndDimensionCode
				related.ReportingBasisYearEndJournalTransaction.GeneralLedgerChartAccount		= LocalYearEndGeneralLedgerChartAccount                	
				related.ReportingBasisYearEndJournalTransaction.Ledger							= LocalYearEndReportingBasisLedger

		ReportingChartAccountByCloseAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByCloseToAccount
				related.FinanceEnterpriseGroup					= LocalFinanceEnterpriseGroup
				related.ReportingChart							= LocalReportingBasis.ReportingChart
				related.CloseToAccount							= LocalYearEndGeneralLedgerChartAccount
			Instance Selection	
				where (related.ChartType.Posting)

		ReportingChartAccountBySubordinateAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup					= LocalFinanceEnterpriseGroup
				related.ReportingChart							= LocalReportingBasis.ReportingChart	
				related.ChartType								= ChartType.Posting					
				related.GeneralLedgerChartAccount				= LocalYearEndGeneralLedgerChartAccount		
			Instance Selection	
				where (related.CloseToAccount entered)
				
		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AccountingEntityGroup	= actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity		= AccountingEntity
		
		AccountingUnitSecurityGroupDetailRel
			one-to-one relation to AccountingUnitSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitSecurityGroup = actor.context.AccountingUnitSecurityGroup
				related.AccountingEntity			= AccountingEntity
				related.AccountingUnit				= GeneralLedgerTotal.AccountingUnit

		ProjectSecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 13
				related.FinanceDimensionSecurityGroup   	= actor.context.ProjectSecurityGroup
				related.FinanceDimensionSecurityGroupDetail = GeneralLedgerTotal.Project   

		ChartAccountSecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 14
				related.FinanceDimensionSecurityGroup   	= actor.context.ChartAccountSecurityGroup
				related.FinanceDimensionSecurityGroupDetail = GeneralLedgerTotal.GeneralLedgerChartAccount

		FinanceDimension1SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 3
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension1SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension1

		FinanceDimension2SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 4
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension2SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension2
				
		FinanceDimension3SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 5
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension3SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension3				

		FinanceDimension4SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 6
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension4SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension4
				
		FinanceDimension5SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 7
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension5SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension5
				
		FinanceDimension6SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 8
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension6SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension6								

		FinanceDimension7SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 9
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension7SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension7

		FinanceDimension8SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 10
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension8SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension8
				
		FinanceDimension9SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 11
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension9SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension9
				
		FinanceDimension10SecurityGroupDetailRel
			one-to-one relation to FinanceDimensionSecurityGroupDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		    	= FinanceEnterpriseGroup
				related.DimensionGroupType					= 12
				related.FinanceDimensionSecurityGroup       = actor.context.FinanceDimension10SecurityGroup
				related.FinanceDimensionSecurityGroupDetail = FinanceDimension10												

		EntityLedgerPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByLedgerEntity
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= GeneralLedgerTotal.Ledger				
				related.AccountingEntity			= AccountingEntity 
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerTotal.EntityYearPeriod 
				
		GeneralLedgerCalendarPeriodRel					
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod > LocalEndCalendarPeriod)
				
		CubeDrillLinkTransactionsRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGeneralLedgerTotalOrder
				related.FinanceEnterpriseGroup                        = FinanceEnterpriseGroup
				related.AccountingEntity                              = cube drill set.AccountingEntity
				related.GeneralLedgerCalendarPeriod                   = cube drill set.GeneralLedgerTotal.EntityYearPeriod                     
				related.FinanceCodeBlock.Ledger                       = cube drill set.GeneralLedgerTotal.Ledger
				related.System                                        = cube drill set.GeneralLedgerTotal.System
				related.CurrencyCode                                  = cube drill set.GeneralLedgerTotal.Currency
				related.FinanceCodeBlock.AccountingUnit               = cube drill set.GeneralLedgerTotal.AccountingUnit
				related.FinanceCodeBlock.GeneralLedgerChartAccount    = cube drill set.GeneralLedgerTotal.GeneralLedgerChartAccount
				related.FinanceCodeBlock.Project                      = cube drill set.GeneralLedgerTotal.Project
				related.DimensionCode                                 = cube drill set.GeneralLedgerTotal.DimensionCode
				related.PrimaryLedger                                 = cube drill set.GeneralLedgerTotal.PrimaryLedger
			Instance Selection
				where (related.Status.Posted)

		
#ifdef module integration				

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "SourceSystemGLMovement"
            	related.FSMBODConfiguration.Direction 	= 1
				
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker				= LocalFSMInboundBODTracker
		

#endif

#ifdef module ad
		ADBAccountMasterByAccountRel
			one-to-one relation to ADBAccountMaster
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AccountingEntity			= LocalInstAccountingEntity
				related.AccountingUnit				= LocalInstAccountingUnit
				related.FinanceDimension1			= LocalInstFinanceDimension1
		UpdateADBDailyAmountRel
			one-to-one relation to ADBDailyAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ReportingBasis									= LocalReportingBasis
				related.AccountingEntity								= LocalInstAccountingEntity
				related.ADBDailyAmount.ADBOrganizationDimension			= LocalInstADBOrganizationDimension
				related.ADBDailyAmount.GeneralLedgerChartAccount		= LocalInstGeneralLedgerChartAccount
				related.ADBDailyAmount.RunDate 							= LocalDate
		AverageDailyBalanceAccountRel
			one-to-one relation to AverageDailyBalanceAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
				related.AccountingEntity										= LocalInstAccountingEntity
				related.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
		UpdateAverageDailyBalanceAmountRel
			one-to-one relation to AverageDailyBalanceAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup								= FinanceEnterpriseGroup
				related.ReportingBasis										= LocalReportingBasis
				related.AccountingEntity									= LocalInstAccountingEntity
				related.AverageDailyBalanceAmount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AverageDailyBalanceAmount.DimensionCode				= DerivedADBDimensionCode
				related.AverageDailyBalanceAmount.RunDate					= LocalDate
#endif

		YearEndJournalPerEntityBODRel								 
			one-to-many relation to ReportingBasisYearEndJournal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup	
			Instance Selection
				where	((related.ReportingBasis					= LocalReportingBasis)
				and		(related.ReportingBasisYear					= LocalYearEndJournalYear)
				and 	(related.AccountingEntity					= LocalAccountingEntity))
				

		ClosePeriodRel
			one-to-one relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDateForYear 	
				related.FinanceEnterpriseGroup		    = LocalFinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration = LocalGLCloseConfiguration
				related.GeneralLedgerCloseYear 			= LocalGLCloseYear
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerTotal.EntityYearPeriod


		BudgetPeriodRel
		    one-to-one relation to GeneralLedgerPeriodShadow
		    Field Mapping uses BySummaryPeriodType
		        related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
		        related.GeneralLedgerCalendar       = LocalReportingBasis.GeneralLedgerCalendar
		        related.GeneralLedgerCalendarPeriod = GeneralLedgerTotal.EntityYearPeriod
		        related.SummaryPeriodType           = 3		

		BudgetImportByDimensionCodeRel
			one-to-one relation to BudgetImport
			Field Mapping uses ByDimensionCodeAndPeriod
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Scenario				= LocalBudgetScenario
				related.DimensionCode			= DerivedBudgetDimensionCode
				related.BudgetPeriod			= LocalGeneralLedgerCalendarPeriod

		ColumnarSearchFinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= ColumnarSearchFinanceDimension1Structure
				related.FinanceDimension1			= FinanceDimension1

		ColumnarSearchFinanceDimension2HierarchyRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= ColumnarSearchFinanceDimension2Structure
				related.FinanceDimension2			= FinanceDimension2

		ColumnarSearchFinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= ColumnarSearchFinanceDimension3Structure
				related.FinanceDimension3			= FinanceDimension3

		ColumnarSearchFinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= ColumnarSearchFinanceDimension4Structure
				related.FinanceDimension4			= FinanceDimension4

		ColumnarSearchFinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= ColumnarSearchFinanceDimension5Structure
				related.FinanceDimension5			= FinanceDimension5

		ColumnarSearchFinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= ColumnarSearchFinanceDimension6Structure
				related.FinanceDimension6			= FinanceDimension6

		ColumnarSearchFinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= ColumnarSearchFinanceDimension7Structure
				related.FinanceDimension7			= FinanceDimension7

		ColumnarSearchFinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= ColumnarSearchFinanceDimension8Structure
				related.FinanceDimension8			= FinanceDimension8

		ColumnarSearchFinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= ColumnarSearchFinanceDimension9Structure
				related.FinanceDimension9			= FinanceDimension9

		ColumnarSearchFinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= ColumnarSearchFinanceDimension10Structure
				related.FinanceDimension10			= FinanceDimension10

		ColumnarSearchProjectHierarchyRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ProjectStructure			= ColumnarSearchProjectStructure
				related.Project						= GeneralLedgerTotal.Project

		ColumnarSearchAccountingUnitHierarchyRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingUnitStructure		= ColumnarSearchAccountingUnitStructure
				related.AccountingEntity			= GeneralLedgerTotal.AccountingEntity
				related.AccountingUnit				= GeneralLedgerTotal.AccountingUnit	

		ColumnarSearchReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ColumnarSearchReportingChart
				related.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount

		ProjectReportingSettingsRel
			one-to-one relation to ProjectReportingSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.Actor				     = actor
				related.ProjectReportingSettings = ContextProjectReportingSettings
		ProjectReportingSettingsAllRel
			one-to-one relation to ProjectReportingSettingsAll
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.ProjectReportingSettingsAll = ContextProjectReportingSettingsAll

		CommitmentEncumbranceVarianceResultRel
			one-to-many relation to CommitmentEncumbranceVarianceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = LocalFinanceEnterpriseGroup

    Sets
		ByChartAccount
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.EntityYearPeriod
				GeneralLedgerTotal.GeneralLedgerChartAccount
		ByGeneralLedgerChartAccountPeriod
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.GeneralLedgerChartAccount
				AccountingEntity
				GeneralLedgerTotal.EntityYearPeriod
				GeneralLedgerTotal.Ledger
		ByPeriodEndDate
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				IsUREChartAccount

				PeriodEndingDate
				update stamp
				UniqueID
				










						
		ByProjectAccount
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerTotal.Project
				Scenario
				GeneralLedgerTotal.GeneralLedgerChartAccount				
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.EntityYearPeriod
										
		ByLedger
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity
				GeneralLedgerTotal.EntityYearPeriod
				GeneralLedgerTotal.GeneralLedgerChartAccount

		ByAccountPeriodUnitDim1
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity

				GeneralLedgerTotal.EntityYearPeriod
				GeneralLedgerTotal.GeneralLedgerChartAccount
				GeneralLedgerTotal.AccountingUnit
				FinanceDimension1


	Field Rules
		PeriodEndingDate
			required

	Actions
		Create is a Create Action
			restricted
			bypass field rules
			Action Rules
				include UpdateActualTotal

		PostTransactions is an Update Action
			restricted
			refresh and lock this instance
			bypass field rules
			Action Rules
				include UpdateActualTotal

		PostTransactionsNoRefresh is an Update Action
			restricted
			bypass field rules
			Action Rules
				include UpdateActualTotal
				
    	Delete is a Delete Action
			restricted

		InitializeAmountsForCommitments is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmSystem					is a GeneralLedgerSystemCode
			
			Local Fields
				LocalScenario 				is a Scenario

			Action Rules
				FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				LocalScenario				= FinanceEnterpriseGroup.EncumbrancesScenario
				if (PrmSystem = "RQ")
					LocalScenario			= FinanceEnterpriseGroup.CommitmentsScenario
				include InitializeAmounts

		InitializeAmounts is an Update Action	
			restricted
			Action Rules
				include InitializeAmounts
		
		DeleteZeroBudget is a Delete Action
			valid when (CanDeleteZeroBudget)
			completion message is "Budget_DataDeleted"
		
		InitializeAmountsNoRules is an Update Action
			restricted
			refresh and lock this instance
			bypass field rules
			Action Rules
				include InitializeAmounts

		Purge is a Purge Action
			restricted


#ifdef module Allocations			
		CopyToAllocationSnapshot is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAllocationSourceSystem		is an AllocationSourceSystem
					default label is "AllocationSourceSystem"
				PrmAllocationSnapshot			is an AllocationSnapshot
					default label is "AllocationSnapshot"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmLedger						is a Ledger
					default label is "Ledger"
				PrmPeriod 						is a GeneralLedgerCalendarPeriod
					default label is "Period"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAllocationSnapshot
					required
				PrmScenario
					required
				PrmLedger
					required
				PrmPeriod
					required

			Local Fields
				Counter										is Numeric 8

			Instance Selection
				where (FinanceEnterpriseGroup 				= PrmFinanceEnterpriseGroup
				and    Scenario								= PrmScenario
				and	   GeneralLedgerTotal.Ledger 			= PrmLedger
				and    GeneralLedgerTotal.EntityYearPeriod	= PrmPeriod
				and    Account.AccountType.Expense)

			Sort Order is ByLedger

			Action Rules
				FinanceEnterpriseGroup Set Rules
					Entrance Rules
						if (PrmAllocationSnapshot.LastCounter entered)
							Counter = PrmAllocationSnapshot.LastCounter

					Exit Rules
						invoke Update PrmAllocationSnapshot
							invoked.LastCounter								= Counter

				Instance Rules
					Counter	+= 1
					invoke Create AllocationSnapshotDetail
						invoked.FinanceEnterpriseGroup						= PrmFinanceEnterpriseGroup
						invoked.AllocationSourceSystem						= PrmAllocationSourceSystem
						invoked.AllocationSnapshot							= PrmAllocationSnapshot
						invoked.AllocationSnapshotDetail					= Counter
						invoked.FinanceCodeBlock.Ledger						= GeneralLedgerTotal.Ledger
						invoked.FinanceCodeBlock.ToAccountingEntity			= GeneralLedgerTotal.AccountingEntity
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
						invoked.FinanceCodeBlock.Project					= GeneralLedgerTotal.Project
						invoked.FinanceCodeBlock.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
						invoked.FinanceCodeBlock.FinanceDimension1			= FinanceDimension1
						invoked.FinanceCodeBlock.FinanceDimension2			= FinanceDimension2
						invoked.FinanceCodeBlock.FinanceDimension3			= FinanceDimension3
						invoked.FinanceCodeBlock.FinanceDimension4			= FinanceDimension4
						invoked.FinanceCodeBlock.FinanceDimension5			= FinanceDimension5
						invoked.FinanceCodeBlock.FinanceDimension6			= FinanceDimension6
						invoked.FinanceCodeBlock.FinanceDimension7			= FinanceDimension7
						invoked.FinanceCodeBlock.FinanceDimension8			= FinanceDimension8
						invoked.FinanceCodeBlock.FinanceDimension9			= FinanceDimension9
						invoked.FinanceCodeBlock.FinanceDimension10			= FinanceDimension10
						invoked.CurrencyCode								= GeneralLedgerTotal.Currency
						invoked.TransactionAmount							= NetTransactionAmount
						invoked.UnitsAmount									= NetUnitsAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= NetFunctionalAmount 
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= NetAlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= NetAlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= NetAlternateAmount3
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= NetProjectAmount
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= NetReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= NetReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= NetReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= NetReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= NetReportAmount5
						invoked.System										= GeneralLedgerTotal.System
						invoked.EntityYearPeriod							= GeneralLedgerTotal.EntityYearPeriod
#endif
		ProcessRetainedEarningsSummary is a Set Action		
			restricted
			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmReportingBasis				is a ReportingBasis
				PrmReportingBasisYear			is a ReportingBasisYear
				PrmAccountingEntity				is a AccountingEntity
				PrmRetainedEarningsLedger		is a Ledger
				PrmDateRange					is a DateRange
				PrmBasisEndPeriod				is a GeneralLedgerCalendarPeriod
				PrmSequenceNumber       		is a SequenceNumber


				PrmLedgerGroup					is a GeneralLedgerTotal group
				PrmLedgerGroup2					is a Ledger group	
				PrmLedger						is a Ledger

			Parameter Rules
				PrmReportingBasis
					LocalReportingChart		= PrmReportingBasis.ReportingChart
				PrmLedgerGroup
					initial value is ("_" + FinanceEnterpriseGroup + "/" + ReportingBasis + "/" + "RE" + "_")

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Set Is
				PrmEnterpriseGroup
				PrmReportingBasis
				PrmAccountingEntity
				PrmSequenceNumber

			Local Fields
				LocalSetCurrencyCode				is a Currency
				LocalProject						is a Project
				LocalDimensionCode					is a DimensionCode
				LocalPrimaryLedger					is a Ledger
				LocalChartAccount					is a GeneralLedgerChartAccount
				LocalFinanceDimension1				is a FinanceDimension1
				LocalFinanceDimension2				is a FinanceDimension2
				LocalFinanceDimension3				is a FinanceDimension3
				LocalFinanceDimension4				is a FinanceDimension4
				LocalFinanceDimension5				is a FinanceDimension5
				LocalFinanceDimension6				is a FinanceDimension6
				LocalFinanceDimension7				is a FinanceDimension7
				LocalFinanceDimension8				is a FinanceDimension8
				LocalFinanceDimension9				is a FinanceDimension9
				LocalFinanceDimension10				is a FinanceDimension10
				SummaryRevenue						is like GeneralLedgerChartAccount
				SummaryExpense						is like GeneralLedgerChartAccount
				RetainedEarnings					is like GeneralLedgerChartAccount
				LocalFinanceCodeBlock				is a FinanceCodeBlock
				LocalTransactionDiff	   		 	is a TotalAmount
				LocalFunctionalDiff	 	  		 	is a TotalAmount
				LocalAlternateDiff	   			 	is a TotalAmount
				LocalAlternateDiff2	   			 	is a TotalAmount
				LocalAlternateDiff3	   			 	is a TotalAmount
				LocalProjectDiff	   		 		is a TotalAmount
				LocalReport1Diff		   	 		is a TotalAmount
				LocalReport2Diff			    	is a TotalAmount
				LocalReport3Diff			    	is a TotalAmount
				LocalReport4Diff			    	is a TotalAmount
				LocalReport5Diff			    	is a TotalAmount
				LocalTransactionAudit	   		 	is a TotalAmount
				LocalFunctionalAudit	  		 	is a TotalAmount
				LocalAlternateAudit	   			 	is a TotalAmount
				LocalAlternateAudit2   			 	is a TotalAmount
				LocalAlternateAudit3   			 	is a TotalAmount
				LocalProjectAudit	   		 		is a TotalAmount
				LocalReport1Audit		   	 		is a TotalAmount
				LocalReport2Audit			    	is a TotalAmount
				LocalReport3Audit			    	is a TotalAmount
				LocalReport4Audit			    	is a TotalAmount
				LocalReport5Audit			    	is a TotalAmount
				LocalScenario						is a Scenario	
				LocalSetChartSection				is like ChartSection
				LocalAccountingEntityJournalView	is a GeneralLedgerJournalControl view
				LocalLinkBackSequence				is Numeric 6
				LocalTransactionSequence			is Numeric 12
				LocalMultiplier						is Numeric 3

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and    ChartSection						= 2			
				and    GeneralLedgerTotal				 within PrmLedgerGroup
				and   ((PrmLedger entered
				and    GeneralLedgerTotal.Ledger		= PrmLedger)		
				or    !PrmLedger entered)
				and   ((PrmLedgerGroup2 entered
				and    GeneralLedgerTotal.Ledger		within PrmLedgerGroup2)
				or    !PrmLedgerGroup2 entered)
				and    AccountingEntity					= PrmAccountingEntity
				and    PeriodEndingDate 				within PrmDateRange)




			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity

			Accumulators
				RevenueFunctionalAmountTotal
				RevenueAlternateAmountTotal
				RevenueAlternateAmount2Total
				RevenueAlternateAmount3Total
				RevenueProjectAmountTotal
				RevenueReportAmount1Total
				RevenueReportAmount2Total
				RevenueReportAmount3Total
				RevenueReportAmount4Total
				RevenueReportAmount5Total
				ExpenseFunctionalAmountTotal
				ExpenseAlternateAmountTotal
				ExpenseAlternateAmount2Total
				ExpenseAlternateAmount3Total
				ExpenseProjectAmountTotal
				ExpenseReportAmount1Total
				ExpenseReportAmount2Total
				ExpenseReportAmount3Total
				ExpenseReportAmount4Total
				ExpenseReportAmount5Total

			Action Rules

				GeneralLedgerTotal.Ledger Set Rules
					Entrance Rules
						LocalPrimaryLedger										= GeneralLedgerTotal.Ledger
						
					Exit Rules
						LocalFinanceCodeBlockRE.Ledger							= PrmRetainedEarningsLedger		
						LocalFinanceCodeBlockRE.ToAccountingEntity				= PrmAccountingEntity
						if (PrmEnterpriseGroup.AccountingUnitRequired)
							LocalInstAccountingEntity							= PrmAccountingEntity
							LocalFinanceCodeBlockRE.AccountingUnit				= SystemAccountingUnitRel.AccountingUnit
						if (PrmEnterpriseGroup.FinanceDimension1Required)
							LocalFinanceCodeBlockRE.FinanceDimension1			= FinanceDimension1Rel.FinanceDimension1
						if (PrmEnterpriseGroup.FinanceDimension2Required)
							LocalFinanceCodeBlockRE.FinanceDimension2			= FinanceDimension2Rel.FinanceDimension2
						if (PrmEnterpriseGroup.FinanceDimension3Required)
							LocalFinanceCodeBlockRE.FinanceDimension3			= FinanceDimension3Rel.FinanceDimension3
						if (PrmEnterpriseGroup.FinanceDimension4Required)
							LocalFinanceCodeBlockRE.FinanceDimension4			= FinanceDimension4Rel.FinanceDimension4
						if (PrmEnterpriseGroup.FinanceDimension5Required)
							LocalFinanceCodeBlockRE.FinanceDimension5			= FinanceDimension5Rel.FinanceDimension5
						if (PrmEnterpriseGroup.FinanceDimension6Required)
							LocalFinanceCodeBlockRE.FinanceDimension6			= FinanceDimension6Rel.FinanceDimension6
						if (PrmEnterpriseGroup.FinanceDimension7Required)
							LocalFinanceCodeBlockRE.FinanceDimension7			= FinanceDimension7Rel.FinanceDimension7
						if (PrmEnterpriseGroup.FinanceDimension8Required)
							LocalFinanceCodeBlockRE.FinanceDimension8			= FinanceDimension8Rel.FinanceDimension8
						if (PrmEnterpriseGroup.FinanceDimension9Required)
							LocalFinanceCodeBlockRE.FinanceDimension9			= FinanceDimension9Rel.FinanceDimension9
						if (PrmEnterpriseGroup.FinanceDimension10Required)
							LocalFinanceCodeBlockRE.FinanceDimension10			= FinanceDimension10Rel.FinanceDimension10
						if (RevenueProjectAmountTotal entered
						or	ExpenseProjectAmountTotal entered)
							LocalFinanceCodeBlockRE.Project						= SystemProjectRel.Project
						SummaryRevenue									= PrmEnterpriseGroup.DerivedSummaryRevenue
						SummaryExpense									= PrmEnterpriseGroup.DerivedSummaryExpense
						RetainedEarnings								= PrmEnterpriseGroup.DerivedRetainedEarnings
						LocalBasisEndPeriod								= PrmBasisEndPeriod		
						LocalRECurrency									= PrmAccountingEntity.FunctionalCurrency
						LocalFinanceCodeBlockRE.GeneralLedgerChartAccount = SummaryRevenue 
						if (RevenueFunctionalAmountTotal 	!= (DerivedREFunctionalAmount *-1)		
						or	RevenueAlternateAmountTotal 	!= (DerivedREAlternateAmount *-1)
						or	RevenueAlternateAmount2Total 	!= (DerivedREAlternateAmount2 *-1)
						or	RevenueAlternateAmount3Total 	!= (DerivedREAlternateAmount3 *-1)
						or	RevenueProjectAmountTotal		!= (DerivedREProjectAmount *-1)
						or	RevenueReportAmount1Total 		!= (DerivedREReportAmount1 *-1)
						or	RevenueReportAmount2Total 		!= (DerivedREReportAmount2 *-1)
						or	RevenueReportAmount3Total 		!= (DerivedREReportAmount3 *-1)
						or	RevenueReportAmount4Total 		!= (DerivedREReportAmount4 *-1)
						or	RevenueReportAmount5Total 		!= (DerivedREReportAmount5 *-1))
							RevenueFunctionalAmountTotal 	+= DerivedREFunctionalAmount
							RevenueAlternateAmountTotal 	+= DerivedREAlternateAmount
							RevenueAlternateAmount2Total 	+= DerivedREAlternateAmount2
							RevenueAlternateAmount3Total 	+= DerivedREAlternateAmount3
							RevenueProjectAmountTotal		+= DerivedREProjectAmount
							RevenueReportAmount1Total 		+= DerivedREReportAmount1
							RevenueReportAmount2Total 		+= DerivedREReportAmount2
							RevenueReportAmount3Total 		+= DerivedREReportAmount3
							RevenueReportAmount4Total 		+= DerivedREReportAmount4
							RevenueReportAmount5Total 		+= DerivedREReportAmount5
						else 
							initialize RevenueFunctionalAmountTotal
							initialize RevenueAlternateAmountTotal
							initialize RevenueAlternateAmount2Total
							initialize RevenueAlternateAmount3Total
							initialize RevenueProjectAmountTotal
							initialize RevenueReportAmount1Total
							initialize RevenueReportAmount2Total
							initialize RevenueReportAmount3Total
							initialize RevenueReportAmount4Total
							initialize RevenueReportAmount5Total
						LocalFinanceCodeBlockRE.GeneralLedgerChartAccount = SummaryExpense 
						if (ExpenseFunctionalAmountTotal 	!= (DerivedREFunctionalAmount *-1)		
						or	ExpenseAlternateAmountTotal		!= (DerivedREAlternateAmount *-1)
						or	ExpenseAlternateAmount2Total	!= (DerivedREAlternateAmount2 *-1)
						or	ExpenseAlternateAmount3Total	!= (DerivedREAlternateAmount3 *-1)
						or	ExpenseProjectAmountTotal		!= (DerivedREProjectAmount *-1)
						or	ExpenseReportAmount1Total		!= (DerivedREReportAmount1 *-1)
						or	ExpenseReportAmount2Total		!= (DerivedREReportAmount2 *-1)
						or	ExpenseReportAmount3Total		!= (DerivedREReportAmount3 *-1)
						or	ExpenseReportAmount4Total		!= (DerivedREReportAmount4 *-1)
						or	ExpenseReportAmount5Total		!= (DerivedREReportAmount5 *-1))
							ExpenseFunctionalAmountTotal 	+= DerivedREFunctionalAmount
							ExpenseAlternateAmountTotal		+= DerivedREAlternateAmount
							ExpenseAlternateAmount2Total	+= DerivedREAlternateAmount2
							ExpenseAlternateAmount3Total	+= DerivedREAlternateAmount3
							ExpenseProjectAmountTotal		+= DerivedREProjectAmount
							ExpenseReportAmount1Total		+= DerivedREReportAmount1
							ExpenseReportAmount2Total		+= DerivedREReportAmount2
							ExpenseReportAmount3Total		+= DerivedREReportAmount3
							ExpenseReportAmount4Total		+= DerivedREReportAmount4
							ExpenseReportAmount5Total		+= DerivedREReportAmount5
						else 
							initialize ExpenseFunctionalAmountTotal
							initialize ExpenseAlternateAmountTotal
							initialize ExpenseAlternateAmount2Total
							initialize ExpenseAlternateAmount3Total
							initialize ExpenseProjectAmountTotal
							initialize ExpenseReportAmount1Total
							initialize ExpenseReportAmount2Total
							initialize ExpenseReportAmount3Total
							initialize ExpenseReportAmount4Total
							initialize ExpenseReportAmount5Total
						if (ExpenseFunctionalAmountTotal 	entered		
						or	ExpenseAlternateAmountTotal		entered
						or	ExpenseAlternateAmount2Total	entered
						or	ExpenseAlternateAmount3Total	entered
						or	ExpenseProjectAmountTotal		entered
						or	ExpenseReportAmount1Total		entered
						or	ExpenseReportAmount2Total		entered
						or	ExpenseReportAmount3Total		entered
						or	ExpenseReportAmount4Total		entered
						or	ExpenseReportAmount5Total		entered
						or 	RevenueFunctionalAmountTotal 	entered
						or	RevenueAlternateAmountTotal 	entered
						or	RevenueAlternateAmount2Total 	entered
						or	RevenueAlternateAmount3Total 	entered
						or	RevenueProjectAmountTotal		entered
						or	RevenueReportAmount1Total 		entered
						or	RevenueReportAmount2Total 		entered
						or	RevenueReportAmount3Total 		entered
						or	RevenueReportAmount4Total 		entered
						or	RevenueReportAmount5Total 		entered)
							if (RevenueProjectAmountTotal entered
							or	ExpenseProjectAmountTotal entered)
								constraint(SystemProjectRel exists)
									"SystemProjectIsRequired"
							LocalAccountingEntity	= PrmAccountingEntity
							initialize LocalLinkBackSequence
							invoke AutoCreatePosted Posted JournalControlRel
								assign result to LocalAccountingEntityJournalView
								invoked.PostingDate				= PrmReportingBasisYear.BasisEndDate
								invoked.TransactionDate			= PrmReportingBasisYear.BasisEndDate
								invoked.GeneralLedgerCalendarPeriod = PrmBasisEndPeriod
								invoked.GeneralLedgerClosePeriod = PrmBasisEndPeriod
								invoked.Ledger					= PrmRetainedEarningsLedger
								invoked.System					= "GL"
								invoked.ReleaseDate				= current corporate date
								invoked.Description				= RetainedEarningsJournalDescription
								invoked.Currency				= PrmAccountingEntity.FunctionalCurrency
								invoked.PrimaryLedger			= LocalPrimaryLedger
								initialize invoked.NewManualJournalControlType
							if (RevenueFunctionalAmountTotal 	entered		
							or	RevenueAlternateAmountTotal 	entered
							or	RevenueAlternateAmount2Total 	entered
							or	RevenueAlternateAmount3Total 	entered
							or	RevenueProjectAmountTotal		entered
							or	RevenueReportAmount1Total 		entered
							or	RevenueReportAmount2Total 		entered
							or	RevenueReportAmount3Total 		entered
							or	RevenueReportAmount4Total 		entered
							or	RevenueReportAmount5Total 		entered)
								LocalTransactionSequence	+= 1
								LocalMultiplier				= -1
								LocalChartAccount			= SummaryRevenue
								include CreateRetainedEarningsRevenueTransaction
								LocalTransactionSequence	+= 1
								LocalMultiplier				= 1
								LocalChartAccount			= RetainedEarnings
								include CreateRetainedEarningsRevenueTransaction
							if (ExpenseFunctionalAmountTotal 	entered		
							or	ExpenseAlternateAmountTotal		entered
							or	ExpenseAlternateAmount2Total	entered
							or	ExpenseAlternateAmount3Total	entered
							or	ExpenseProjectAmountTotal		entered
							or	ExpenseReportAmount1Total		entered
							or	ExpenseReportAmount2Total		entered
							or	ExpenseReportAmount3Total		entered
							or	ExpenseReportAmount4Total		entered
							or	ExpenseReportAmount5Total		entered)
								LocalTransactionSequence	+= 1
								LocalMultiplier				= -1
								LocalChartAccount			= SummaryExpense
								include CreateRetainedEarningsExpenseTransaction
								LocalTransactionSequence	+= 1
								LocalMultiplier				= 1
								LocalChartAccount			= RetainedEarnings
								include CreateRetainedEarningsExpenseTransaction

				Instance Rules
					FinanceEnterpriseGroup			= PrmEnterpriseGroup
					if (GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Revenue)
						if (!PeriodEndingDate 				within PrmDateRange)


							display "****************************************************"
							display "SkippingErroneousRecord"
							display "Scenario=<Scenario>"
							display "AccountingEntity=<AccountingEntity>"
							display "Ledger=<GeneralLedgerTotal.Ledger>"
							display "System=<GeneralLedgerTotal.System>"
							display "Currency=<GeneralLedgerTotal.Currency>"
							display "EntityYearPeriod=<GeneralLedgerTotal.EntityYearPeriod>"
							display "AccountingUnit=<GeneralLedgerTotal.AccountingUnit>"
							display "GeneralLedgerChartAccount=<GeneralLedgerTotal.GeneralLedgerChartAccount>"
							display "Project=<GeneralLedgerTotal.Project>"
							display "DimensionCode=<GeneralLedgerTotal.DimensionCode>"
							display "PrimaryLedger=<GeneralLedgerTotal.PrimaryLedger>"
							display "PeriodEndingDate=<PeriodEndingDate>"


							display "****************************************************"
						else




































							LocalFunctionalDiff	 	  	= NetFunctionalAmount
							LocalAlternateDiff	   		= NetAlternateAmount
							LocalAlternateDiff2	   		= NetAlternateAmount2
							LocalAlternateDiff3	   		= NetAlternateAmount3
							LocalProjectDiff	   		= NetProjectAmount
							LocalReport1Diff		   	= NetReportAmount1
							LocalReport2Diff			= NetReportAmount2
							LocalReport3Diff			= NetReportAmount3
							LocalReport4Diff			= NetReportAmount4
							LocalReport5Diff			= NetReportAmount5
		
							RevenueFunctionalAmountTotal		+= LocalFunctionalDiff
							RevenueAlternateAmountTotal			+= LocalAlternateDiff
							RevenueAlternateAmount2Total		+= LocalAlternateDiff2
							RevenueAlternateAmount3Total		+= LocalAlternateDiff3
							RevenueProjectAmountTotal			+= LocalProjectDiff
							RevenueReportAmount1Total			+= LocalReport1Diff
							RevenueReportAmount2Total			+= LocalReport2Diff
							RevenueReportAmount3Total			+= LocalReport3Diff
							RevenueReportAmount4Total			+= LocalReport4Diff
							RevenueReportAmount5Total			+= LocalReport5Diff
					else
						if (GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Expense)
							if (!PeriodEndingDate 				within PrmDateRange)


								display "****************************************************"
								display "SkippingErroneousRecord"
								display "Scenario=<Scenario>"
								display "AccountingEntity=<AccountingEntity>"
								display "Ledger=<GeneralLedgerTotal.Ledger>"
								display "System=<GeneralLedgerTotal.System>"
								display "Currency=<GeneralLedgerTotal.Currency>"
								display "EntityYearPeriod=<GeneralLedgerTotal.EntityYearPeriod>"
								display "AccountingUnit=<GeneralLedgerTotal.AccountingUnit>"
								display "GeneralLedgerChartAccount=<GeneralLedgerTotal.GeneralLedgerChartAccount>"
								display "Project=<GeneralLedgerTotal.Project>"
								display "DimensionCode=<GeneralLedgerTotal.DimensionCode>"
								display "PrimaryLedger=<GeneralLedgerTotal.PrimaryLedger>"
								display "PeriodEndingDate=<PeriodEndingDate>"


								display "****************************************************"
							else




































								LocalFunctionalDiff	 	  	= NetFunctionalAmount
								LocalAlternateDiff	   		= NetAlternateAmount
								LocalAlternateDiff2	   		= NetAlternateAmount2
								LocalAlternateDiff3	   		= NetAlternateAmount3
								LocalProjectDiff	   		= NetProjectAmount
								LocalReport1Diff		   	= NetReportAmount1
								LocalReport2Diff			= NetReportAmount2
								LocalReport3Diff			= NetReportAmount3
								LocalReport4Diff			= NetReportAmount4
								LocalReport5Diff			= NetReportAmount5
			
								ExpenseFunctionalAmountTotal		+= LocalFunctionalDiff
								ExpenseAlternateAmountTotal			+= LocalAlternateDiff
								ExpenseAlternateAmount2Total		+= LocalAlternateDiff2
								ExpenseAlternateAmount3Total		+= LocalAlternateDiff3
								ExpenseProjectAmountTotal			+= LocalProjectDiff
								ExpenseReportAmount1Total			+= LocalReport1Diff
								ExpenseReportAmount2Total			+= LocalReport2Diff
								ExpenseReportAmount3Total			+= LocalReport3Diff
								ExpenseReportAmount4Total			+= LocalReport4Diff
								ExpenseReportAmount5Total			+= LocalReport5Diff

		YearEndClose is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmReportingBasisYear			is like ReportingBasisYear
					default label is "ReportingBasisYear"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmCloseLedger					is a Ledger
					default label is "CloseLedger"
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmNewYear						is a GeneralLedgerCalendarPeriod
					default label is "NewYear"
				PrmSequenceNumber       		is a SequenceNumber
					default label is "SequenceNumber"
				PrmLedgerGroup					is a GeneralLedgerTotal group
					default label is "LedgerGroup"
				PrmISWithCloseAccountGroup		is a GeneralLedgerTotal group
					default label is "IncomeStatementAccountsWithCloseToAccount"					
				PrmTimeStampRange				is a TimeStampRange
					default label is "TimeStampRange"
				PrmChangedTotalsOnly			is Boolean
					default label is "ChangedTotalsOnly"
				PrmNewYearDate					is Date
					default label is "NewYearDate"

			Parameter Rules
				PrmReportingBasis
					LocalReportingChart		= PrmReportingBasis.ReportingChart

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Set Is
				PrmEnterpriseGroup
				PrmReportingBasis
				PrmAccountingEntity
				PrmSequenceNumber

			Local Fields	

				LocalPrimaryLedger				is a Ledger
				LocalSetCurrencyCode			is a Currency
    	    	LocalAccountingUnit				is a AccountingUnit
        	    LocalGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
            	LocalProject					is a Project
				LocalDimensionCode				is a DimensionCode
				LocalSystem						is a GeneralLedgerSystemCode
				LocalFinanceDimension1			is a FinanceDimension1
				LocalFinanceDimension2			is a FinanceDimension2
				LocalFinanceDimension3			is a FinanceDimension3
				LocalFinanceDimension4			is a FinanceDimension4
				LocalFinanceDimension5			is a FinanceDimension5
				LocalFinanceDimension6			is a FinanceDimension6
				LocalFinanceDimension7			is a FinanceDimension7
				LocalFinanceDimension8			is a FinanceDimension8
				LocalFinanceDimension9			is a FinanceDimension9
				LocalFinanceDimension10			is a FinanceDimension10
				LocalCloseToAccount				is a GeneralLedgerChartAccount
        	    UndistributedRetainedEarnings	is like GeneralLedgerChartAccount
        	    RetainedEarnings				is like GeneralLedgerChartAccount

				LocalTransactionDiff	   		 	is a TotalAmount
				LocalFunctionalDiff	 	  		 	is a TotalAmount
				LocalAlternateDiff	   			 	is a TotalAmount
				LocalAlternateDiff2	   			 	is a TotalAmount
				LocalAlternateDiff3	   			 	is a TotalAmount
				LocalProjectDiff	   		 		is a TotalAmount
				LocalReport1Diff		   	 		is a TotalAmount
				LocalReport2Diff			    	is a TotalAmount
				LocalReport3Diff			    	is a TotalAmount
				LocalReport4Diff			    	is a TotalAmount
				LocalReport5Diff			    	is a TotalAmount
				LocalUnitsDiff				    	is a UnitsAmount
				LocalTransactionAudit	   		 	is a TotalAmount
				LocalFunctionalAudit	  		 	is a TotalAmount
				LocalAlternateAudit	   			 	is a TotalAmount
				LocalAlternateAudit2   			 	is a TotalAmount
				LocalAlternateAudit3   			 	is a TotalAmount
				LocalProjectAudit	   		 		is a TotalAmount
				LocalReport1Audit		   	 		is a TotalAmount
				LocalReport2Audit			    	is a TotalAmount
				LocalReport3Audit			    	is a TotalAmount
				LocalReport4Audit			    	is a TotalAmount
				LocalReport5Audit			    	is a TotalAmount
				LocalUnitsAudit				    	is a UnitsAmount
				LocalScenario						is a Scenario	

				LocalSetChartSection				is like ChartSection

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and   (ChartSection						= 1						
				or    (PrmISWithCloseAccountGroup entered
				and    ChartSection						= 2						
				and    GeneralLedgerTotal        		within PrmISWithCloseAccountGroup))

				and    GeneralLedgerTotal				within PrmLedgerGroup
				and    AccountingEntity					= PrmAccountingEntity
				and    PeriodEndingDate 				within PrmDateRange
				and   ((PrmChangedTotalsOnly
				and     update stamp 				 	within PrmTimeStampRange)
				or	   (!PrmChangedTotalsOnly)))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				ChartSection
				GeneralLedgerTotal.PrimaryLedger
				AccountingEntity
				GeneralLedgerTotal.System
    	    	GeneralLedgerTotal.AccountingUnit
        	    GeneralLedgerTotal.GeneralLedgerChartAccount
            	GeneralLedgerTotal.Project
				GeneralLedgerTotal.DimensionCode
				GeneralLedgerTotal.Currency
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				update stamp

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal

			Action Rules
				Empty Set Rules

				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules
						LocalSystemAccount				= SystemAccount.UndistributedRetainedEarnings
						UndistributedRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
						LocalSystemAccount				= SystemAccount.RetainedEarnings
						if (PrmEnterpriseGroup.SystemSubAccount entered)
							RetainedEarnings		= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmEnterpriseGroup.SystemSubAccount
						else
							RetainedEarnings		= first SystemAccountRel.GeneralLedgerChartAccount
						constraint (RetainedEarnings entered)
							"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"

				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalSetChartSection			= ChartSection
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
		    	    	LocalAccountingUnit				= GeneralLedgerTotal.AccountingUnit
        			    LocalGeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
            			LocalProject					= GeneralLedgerTotal.Project
						LocalDimensionCode				= GeneralLedgerTotal.DimensionCode
						LocalSystem						= GeneralLedgerTotal.System
						LocalFinanceDimension1			= FinanceDimension1
						LocalFinanceDimension2			= FinanceDimension2
						LocalFinanceDimension3			= FinanceDimension3
						LocalFinanceDimension4			= FinanceDimension4
						LocalFinanceDimension5			= FinanceDimension5
						LocalFinanceDimension6			= FinanceDimension6
						LocalFinanceDimension7			= FinanceDimension7
						LocalFinanceDimension8			= FinanceDimension8
						LocalFinanceDimension9			= FinanceDimension9
						LocalFinanceDimension10			= FinanceDimension10
						LocalReportingChart				= PrmReportingBasis.ReportingChart
						initialize LocalCloseToAccount
						if (ReportingChartAccountRel exists)
	        			    LocalCloseToAccount				= ReportingChartAccountRel.CloseToAccount
						
					Exit Rules
						initialize LocalInstFinanceCodeBlock
						if (LocalGeneralLedgerChartAccount	= UndistributedRetainedEarnings)
							LocalGeneralLedgerChartAccount	= RetainedEarnings

						LocalReportingBasis				= PrmReportingBasis
						LocalChartSection				= LocalSetChartSection
						if (LocalChartSection.IncomeStatement
						and LocalCloseToAccount entered)
							if (PrmEnterpriseGroup.AccountingUnitRequired
							and PrmAccountingEntity.AccountingUnitZoneBalancing)
					        	LocalInstAccountingEntity					= PrmAccountingEntity
								LocalInstAccountingUnit						= LocalAccountingUnit
								LocalAccountingUnit							= DerivedZoneAccountingUnit
							LocalInstFinanceCodeBlock.FinanceDimension1		= LocalFinanceDimension1
							if (PrmEnterpriseGroup.FinanceDimension1Required
							and PrmEnterpriseGroup.Dimension1ZoneBalancing)
								LocalInstFinanceDimension1					= LocalFinanceDimension1
								LocalInstFinanceCodeBlock.FinanceDimension1	= DerivedZoneFinanceDimension1
							LocalInstFinanceCodeBlock.FinanceDimension2		= LocalFinanceDimension2
							LocalInstFinanceCodeBlock.FinanceDimension3		= LocalFinanceDimension3
							LocalInstFinanceCodeBlock.FinanceDimension4		= LocalFinanceDimension4
							LocalInstFinanceCodeBlock.FinanceDimension5		= LocalFinanceDimension5
							LocalInstFinanceCodeBlock.FinanceDimension6		= LocalFinanceDimension6
							LocalInstFinanceCodeBlock.FinanceDimension7		= LocalFinanceDimension7
							LocalInstFinanceCodeBlock.FinanceDimension8		= LocalFinanceDimension8
							LocalInstFinanceCodeBlock.FinanceDimension9		= LocalFinanceDimension9
							LocalInstFinanceCodeBlock.FinanceDimension10	= LocalFinanceDimension10
							LocalFinanceDimension1							= LocalInstFinanceCodeBlock.FinanceDimension1
							LocalDimensionCode								= LocalInstFinanceCodeBlock.DimensionCode
						LocalBasisYearTotal.AccountingEntity				= PrmAccountingEntity
						LocalBasisYearTotal.CloseLedger						= PrmCloseLedger
						LocalBasisYearTotal.EntityYear						= PrmNewYear
						LocalBasisYearTotal.AccountingUnit					= LocalAccountingUnit
						LocalBasisYearTotal.GeneralLedgerChartAccount		= LocalGeneralLedgerChartAccount
						if (LocalCloseToAccount entered)
							LocalBasisYearTotal.GeneralLedgerChartAccount		= LocalCloseToAccount
						LocalBasisYearTotal.Project							= LocalProject
						LocalBasisYearTotal.DimensionCode					= LocalDimensionCode
						LocalBasisYearTotal.System							= LocalSystem
						LocalBasisYearTotal.Currency						= LocalSetCurrencyCode
						LocalBasisYearTotal.PrimaryLedger					= LocalPrimaryLedger
						LocalBasisYearTotal.SequenceNumber					= PrmSequenceNumber

						LocalScenario										= FinanceEnterpriseGroup.ActualsScenario
						LocalGeneralLedgerTotal.Ledger						= PrmCloseLedger
						LocalGeneralLedgerTotal.System						= LocalSystem
						LocalGeneralLedgerTotal.Currency					= LocalSetCurrencyCode
						LocalGeneralLedgerTotal.EntityYearPeriod			= PrmNewYear
						LocalGeneralLedgerTotal.AccountingUnit				= LocalAccountingUnit
						LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
						if (LocalCloseToAccount entered)
							LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= LocalCloseToAccount
						LocalGeneralLedgerTotal.Project						= LocalProject
						LocalGeneralLedgerTotal.DimensionCode				= LocalDimensionCode
						LocalGeneralLedgerTotal.PrimaryLedger				= LocalPrimaryLedger

						invoke PostTransactions LocalGeneralLedgerTotal 
							invoked.TransactionAmount			= TransactionAmountTotal 
							invoked.FunctionalAmount			= FunctionalAmountTotal
							invoked.AlternateAmount				= AlternateAmountTotal
							invoked.AlternateAmount2			= AlternateAmount2Total
							invoked.AlternateAmount3			= AlternateAmount3Total
							invoked.ProjectAmount				= ProjectAmountTotal
							invoked.ReportAmount1				= ReportAmount1Total
							invoked.ReportAmount2				= ReportAmount2Total
							invoked.ReportAmount3				= ReportAmount3Total
							invoked.ReportAmount4				= ReportAmount4Total
							invoked.ReportAmount5				= ReportAmount5Total
							invoked.UnitsAmount					= UnitsAmountTotal
							invoked.FinanceDimension1			= LocalFinanceDimension1
							invoked.FinanceDimension2			= LocalFinanceDimension2
							invoked.FinanceDimension3			= LocalFinanceDimension3
							invoked.FinanceDimension4			= LocalFinanceDimension4
							invoked.FinanceDimension5			= LocalFinanceDimension5
							invoked.FinanceDimension6			= LocalFinanceDimension6
							invoked.FinanceDimension7			= LocalFinanceDimension7
							invoked.FinanceDimension8			= LocalFinanceDimension8
							invoked.FinanceDimension9			= LocalFinanceDimension9
							invoked.FinanceDimension10			= LocalFinanceDimension10							
							invoked.PeriodEndingDate			= PrmNewYearDate
							if (PrmChangedTotalsOnly
							or  LocalBasisYearTotal exists)
								invoked.UpdateChangesOnly		= true
							else
								invoked.UpdateChangesOnly		= false
#ifdef module ad
						if (PrmEnterpriseGroup.AllBalanceSheetAccounts						
						and LocalGeneralLedgerTotal.GeneralLedgerChartAccount = RetainedEarnings
						and PrmAccountingEntity.AverageDailyBalance)	
							include ADBAccountMasterUpdate
#endif
								
						invoke Update LocalBasisYearTotal 
							invoked.FinanceEnterpriseGroup		= PrmEnterpriseGroup
							invoked.ReportingBasis				= PrmReportingBasis
							invoked.PrmTransactionAmount		= TransactionAmountTotal
							invoked.PrmFunctionalAmount			= FunctionalAmountTotal
							invoked.PrmAlternateAmount			= AlternateAmountTotal
							invoked.PrmAlternateAmount2			= AlternateAmount2Total
							invoked.PrmAlternateAmount3			= AlternateAmount3Total
							invoked.PrmProjectAmount			= ProjectAmountTotal
							invoked.PrmReportAmount1			= ReportAmount1Total
							invoked.PrmReportAmount2			= ReportAmount2Total
							invoked.PrmReportAmount3			= ReportAmount3Total
							invoked.PrmReportAmount4			= ReportAmount4Total
							invoked.PrmReportAmount5			= ReportAmount5Total
							invoked.PrmUnitsAmount				= UnitsAmountTotal
							invoked.FinanceDimension1			= LocalFinanceDimension1
							invoked.FinanceDimension2			= LocalFinanceDimension2
							invoked.FinanceDimension3			= LocalFinanceDimension3
							invoked.FinanceDimension4			= LocalFinanceDimension4
							invoked.FinanceDimension5			= LocalFinanceDimension5
							invoked.FinanceDimension6			= LocalFinanceDimension6
							invoked.FinanceDimension7			= LocalFinanceDimension7
							invoked.FinanceDimension8			= LocalFinanceDimension8
							invoked.FinanceDimension9			= LocalFinanceDimension9
							invoked.FinanceDimension10			= LocalFinanceDimension10
							invoked.OrigAccount					= LocalGeneralLedgerChartAccount
							invoked.TotalsUpdated 				= true
								
						LocalChartSection				= LocalSetChartSection
						if (LocalChartSection.IncomeStatement
						and LocalCloseToAccount entered)
							LocalBasisYearTotal.AccountingEntity				= PrmAccountingEntity
							LocalBasisYearTotal.CloseLedger						= PrmCloseLedger
							LocalBasisYearTotal.EntityYear						= PrmNewYear
							LocalBasisYearTotal.AccountingUnit					= LocalAccountingUnit
							LocalBasisYearTotal.GeneralLedgerChartAccount		= RetainedEarnings
							LocalBasisYearTotal.Project							= LocalProject
							LocalBasisYearTotal.DimensionCode					= LocalDimensionCode
							LocalBasisYearTotal.System							= LocalSystem
							LocalBasisYearTotal.Currency						= LocalSetCurrencyCode
							LocalBasisYearTotal.PrimaryLedger					= LocalPrimaryLedger
							LocalBasisYearTotal.SequenceNumber					= PrmSequenceNumber
	
							LocalScenario										= FinanceEnterpriseGroup.ActualsScenario
							LocalGeneralLedgerTotal.Ledger						= PrmCloseLedger
							LocalGeneralLedgerTotal.System						= LocalSystem
							LocalGeneralLedgerTotal.Currency					= LocalSetCurrencyCode
							LocalGeneralLedgerTotal.EntityYearPeriod			= PrmNewYear
							LocalGeneralLedgerTotal.AccountingUnit				= LocalAccountingUnit
							LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= RetainedEarnings
							LocalGeneralLedgerTotal.Project						= LocalProject
							LocalGeneralLedgerTotal.DimensionCode				= LocalDimensionCode
							LocalGeneralLedgerTotal.PrimaryLedger				= LocalPrimaryLedger

							invoke PostTransactions LocalGeneralLedgerTotal 
								invoked.TransactionAmount			-= TransactionAmountTotal 
								invoked.FunctionalAmount			-= FunctionalAmountTotal
								invoked.AlternateAmount				-= AlternateAmountTotal
								invoked.AlternateAmount2			-= AlternateAmount2Total
								invoked.AlternateAmount3			-= AlternateAmount3Total
								invoked.ProjectAmount				-= ProjectAmountTotal
								invoked.ReportAmount1				-= ReportAmount1Total
								invoked.ReportAmount2				-= ReportAmount2Total
								invoked.ReportAmount3				-= ReportAmount3Total
								invoked.ReportAmount4				-= ReportAmount4Total
								invoked.ReportAmount5				-= ReportAmount5Total
								invoked.UnitsAmount					-= UnitsAmountTotal
								invoked.FinanceDimension1			= LocalFinanceDimension1
								invoked.FinanceDimension2			= LocalFinanceDimension2
								invoked.FinanceDimension3			= LocalFinanceDimension3
								invoked.FinanceDimension4			= LocalFinanceDimension4
								invoked.FinanceDimension5			= LocalFinanceDimension5
								invoked.FinanceDimension6			= LocalFinanceDimension6
								invoked.FinanceDimension7			= LocalFinanceDimension7
								invoked.FinanceDimension8			= LocalFinanceDimension8
								invoked.FinanceDimension9			= LocalFinanceDimension9
								invoked.FinanceDimension10			= LocalFinanceDimension10							
								invoked.PeriodEndingDate			= PrmNewYearDate
								if (PrmChangedTotalsOnly
								or  LocalBasisYearTotal exists)
									invoked.UpdateChangesOnly		= true
								else
									invoked.UpdateChangesOnly		= false
									
							invoke Update LocalBasisYearTotal 
								invoked.FinanceEnterpriseGroup		= PrmEnterpriseGroup
								invoked.ReportingBasis				= PrmReportingBasis
								invoked.PrmTransactionAmount		-= TransactionAmountTotal
								invoked.PrmFunctionalAmount			-= FunctionalAmountTotal
								invoked.PrmAlternateAmount			-= AlternateAmountTotal
								invoked.PrmAlternateAmount2			-= AlternateAmount2Total
								invoked.PrmAlternateAmount3			-= AlternateAmount3Total
								invoked.PrmProjectAmount			-= ProjectAmountTotal
								invoked.PrmReportAmount1			-= ReportAmount1Total
								invoked.PrmReportAmount2			-= ReportAmount2Total
								invoked.PrmReportAmount3			-= ReportAmount3Total
								invoked.PrmReportAmount4			-= ReportAmount4Total
								invoked.PrmReportAmount5			-= ReportAmount5Total
								invoked.PrmUnitsAmount				-= UnitsAmountTotal
								invoked.FinanceDimension1			= LocalFinanceDimension1
								invoked.FinanceDimension2			= LocalFinanceDimension2
								invoked.FinanceDimension3			= LocalFinanceDimension3
								invoked.FinanceDimension4			= LocalFinanceDimension4
								invoked.FinanceDimension5			= LocalFinanceDimension5
								invoked.FinanceDimension6			= LocalFinanceDimension6
								invoked.FinanceDimension7			= LocalFinanceDimension7
								invoked.FinanceDimension8			= LocalFinanceDimension8
								invoked.FinanceDimension9			= LocalFinanceDimension9
								invoked.FinanceDimension10			= LocalFinanceDimension10
								invoked.OrigAccount					= LocalGeneralLedgerChartAccount
								invoked.TotalsUpdated 				= true
						
				Instance Rules
					if ((!PeriodEndingDate 				within PrmDateRange)
					or  (PrmChangedTotalsOnly
					and  !update stamp 				 	within PrmTimeStampRange))
						display "****************************************************"
						display "SkippingErroneousRecord"
						display "Scenario=<Scenario>"
						display "AccountingEntity=<AccountingEntity>"
						display "Ledger=<GeneralLedgerTotal.Ledger>"
						display "System=<GeneralLedgerTotal.System>"
						display "Currency=<GeneralLedgerTotal.Currency>"
						display "EntityYearPeriod=<GeneralLedgerTotal.EntityYearPeriod>"
        				display "AccountingUnit=<GeneralLedgerTotal.AccountingUnit>"
            			display "GeneralLedgerChartAccount=<GeneralLedgerTotal.GeneralLedgerChartAccount>"
            			display "Project=<GeneralLedgerTotal.Project>"
						display "DimensionCode=<GeneralLedgerTotal.DimensionCode>"
						display "PrimaryLedger=<GeneralLedgerTotal.PrimaryLedger>"					
						display "PeriodEndingDate=<PeriodEndingDate>"
						if (PrmChangedTotalsOnly)
							display "UpdateStamp=<update stamp>"
						display "****************************************************"
					else				
						if (PrmChangedTotalsOnly)
							initialize LocalTransactionAudit
							initialize LocalFunctionalAudit
							initialize LocalAlternateAudit
							initialize LocalAlternateAudit2
							initialize LocalAlternateAudit3
							initialize LocalProjectAudit
							initialize LocalReport1Audit
							initialize LocalReport2Audit
							initialize LocalReport3Audit
							initialize LocalReport4Audit
							initialize LocalReport5Audit
							initialize LocalUnitsAudit
							for each this instance.audit log records
								if (each.applied stamp < PrmTimeStampRange.Begin)
									LocalTransactionAudit		= each.NetTransactionAmount
									LocalFunctionalAudit 	  	= each.NetFunctionalAmount
									LocalAlternateAudit	   		= each.NetAlternateAmount
									LocalAlternateAudit2   		= each.NetAlternateAmount2
									LocalAlternateAudit3		= each.NetAlternateAmount3
									LocalProjectAudit	   		= each.NetProjectAmount
									LocalReport1Audit		   	= each.NetReportAmount1
									LocalReport2Audit			= each.NetReportAmount2
									LocalReport3Audit			= each.NetReportAmount3
									LocalReport4Audit			= each.NetReportAmount4
									LocalReport5Audit			= each.NetReportAmount5
									LocalUnitsAudit				= each.NetUnitsAmount
								else
									end for each
							LocalTransactionDiff		= NetTransactionAmount	- LocalTransactionAudit
							LocalFunctionalDiff	 	  	= NetFunctionalAmount	- LocalFunctionalAudit
							LocalAlternateDiff	   		= NetAlternateAmount	- LocalAlternateAudit
							LocalAlternateDiff2	   		= NetAlternateAmount2	- LocalAlternateAudit2
							LocalAlternateDiff3	   		= NetAlternateAmount3	- LocalAlternateAudit3
							LocalProjectDiff	   		= NetProjectAmount		- LocalProjectAudit
							LocalReport1Diff		   	= NetReportAmount1		- LocalReport1Audit
							LocalReport2Diff			= NetReportAmount2		- LocalReport2Audit
							LocalReport3Diff			= NetReportAmount3		- LocalReport3Audit
							LocalReport4Diff			= NetReportAmount4		- LocalReport4Audit
							LocalReport5Diff			= NetReportAmount5		- LocalReport5Audit
							LocalUnitsDiff				= NetUnitsAmount		- LocalUnitsAudit
						else
							LocalTransactionDiff		= NetTransactionAmount
							LocalFunctionalDiff	 	  	= NetFunctionalAmount
							LocalAlternateDiff	   		= NetAlternateAmount
							LocalAlternateDiff2	   		= NetAlternateAmount2
							LocalAlternateDiff3	   		= NetAlternateAmount3
							LocalProjectDiff	   		= NetProjectAmount
							LocalReport1Diff		   	= NetReportAmount1
							LocalReport2Diff			= NetReportAmount2
							LocalReport3Diff			= NetReportAmount3
							LocalReport4Diff			= NetReportAmount4
							LocalReport5Diff			= NetReportAmount5
							LocalUnitsDiff				= NetUnitsAmount
	
						TransactionAmountTotal		+= LocalTransactionDiff
						FunctionalAmountTotal		+= LocalFunctionalDiff
						AlternateAmountTotal		+= LocalAlternateDiff
						AlternateAmount2Total		+= LocalAlternateDiff2
						AlternateAmount3Total		+= LocalAlternateDiff3
						ProjectAmountTotal			+= LocalProjectDiff
						ReportAmount1Total			+= LocalReport1Diff
						ReportAmount2Total			+= LocalReport2Diff
						ReportAmount3Total			+= LocalReport3Diff
						ReportAmount4Total			+= LocalReport4Diff
						ReportAmount5Total			+= LocalReport5Diff
						UnitsAmountTotal			+= LocalUnitsDiff

		InitializeBeginBalance is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"


				PrmCloseLedger					is a Ledger
					default label is "CloseLedger"
				PrmNewYear						is a GeneralLedgerCalendarPeriod
					default label is "NewYear"
				PrmSequenceNumber       		is a SequenceNumber
					default label is "SequenceNumber"
				PrmNewYearDate					is Date
					default label is "NewYearDate"

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Set Is
				PrmEnterpriseGroup
				PrmReportingBasis
				PrmAccountingEntity
				PrmSequenceNumber

			Instance Selection
				where (FinanceEnterpriseGroup						= PrmEnterpriseGroup
				and    Scenario  									= PrmEnterpriseGroup.ActualsScenario
				and	   AccountingEntity								= PrmAccountingEntity
				and    PeriodEndingDate								= PrmNewYearDate
				and    GeneralLedgerTotal.EntityYearPeriod			= PrmNewYear
				and	   GeneralLedgerTotal.Ledger					= PrmCloseLedger)


			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.GeneralLedgerChartAccount
				GeneralLedgerTotal.EntityYearPeriod

			Action Rules
				Empty Set Rules

				Set Rules

				Instance Rules
					include InitializeAmounts

					include SendIndividualBOD

		InitializeTotals is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmDateRange  				is a DateRange
					default label is "DateRange"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmDateRange
					required

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    Scenario  					= PrmFinanceEnterpriseGroup.ActualsScenario
				and	   AccountingEntity				= PrmAccountingEntity
				and    PeriodEndingDate 			within PrmDateRange
				and	   !GeneralLedgerTotal.Ledger.CloseLedger)

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmDateRange

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.GeneralLedgerChartAccount
				GeneralLedgerTotal.EntityYearPeriod

			Action Rules
				Empty Set Rules

				Set Rules

				AccountingEntity Set Rules
					Entrance Rules

				Instance Rules

					include InitializeAmounts



		ClearCommitmentTotals is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"

				PrmSystemCode				is a RebuildSystem
					default label is "SystemCodeForRebuild"
				PrmProject				    is a Project
					default label is "Project (Optional)"
				PrmRefresh	is Boolean
					default label is "RefreshCubeOnCompletionOfRebuild"
				PrmRecalcObligations	is Boolean
					default label is "RecalculateLocalObligationsAfterCubeRefresh"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmRefresh
					if (PrmRefresh)
						confirmation required
							"AfterCommitments/EncumbrancesRebuildCompletes,CubeRefreshWillBeInitiated.Continue?"
				PrmRecalcObligations
					if (PrmRecalcObligations)
						PrmRefresh = true
						confirmation required
							"AfterCommitments/EncumbrancesRebuildCompletes,CubeWillBeRefreshedAndLocalObligationsRecalculated.Continue?"
						constraint (PrmProject entered)
							"RecalculatingLocalObligationsIsOnlyValidOnProjectRebuild.PleaseEnterAProjectOrClearRecalculateObligationsFlag"
			Local Fields	
				LocalAsyncId							is an AsyncActionRequest		
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and (!PrmProject entered
				or  (PrmProject entered
				and  GeneralLedgerTotal.Project = PrmProject))
				and (!PrmSystemCode entered
				or  (PrmSystemCode entered
				and  GeneralLedgerTotal.System = PrmSystemCode))
				and    (Scenario 					= PrmFinanceEnterpriseGroup.CommitmentsScenario
				or     Scenario						= PrmFinanceEnterpriseGroup.EncumbrancesScenario))
			Set Is
				PrmFinanceEnterpriseGroup
				
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerTotal.Project
				Scenario
			Action Rules
				Empty Set Rules

				Set Rules
					Exit Rules
#ifdef module ap
						invoke FixGLTotal GLCommit in background
							assign async action request id to LocalAsyncId
							run after LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							invoked.PrmSystemCode = PrmSystemCode
							invoked.PrmProject = PrmProject
							invoked.PrmRefresh = PrmRefresh
							invoked.PrmRecalcObligations = PrmRecalcObligations
#endif

				Instance Rules
					if (!PrmProject entered)
							if (PrmSystemCode = "RQ"
							and Scenario = PrmFinanceEnterpriseGroup.CommitmentsScenario)
								include InitializeAmounts
							else
								if (PrmSystemCode entered
								and Scenario = PrmFinanceEnterpriseGroup.EncumbrancesScenario)
									include InitializeAmounts
								else
									if (!PrmSystemCode entered)
										include InitializeAmounts
							if (PeriodEndingDate not entered)
								PeriodEndingDate = GeneralLedgerTotal.EntityYearPeriod.Date
					else
						if (PrmSystemCode = "RQ"
						and Scenario = PrmFinanceEnterpriseGroup.CommitmentsScenario
						and GeneralLedgerTotal.Project = PrmProject)
							include InitializeAmounts
						else
							if (PrmSystemCode entered
							and Scenario = PrmFinanceEnterpriseGroup.EncumbrancesScenario
							and GeneralLedgerTotal.Project = PrmProject)
								include InitializeAmounts
							else
								if (!PrmSystemCode entered
								and GeneralLedgerTotal.Project = PrmProject)
									include InitializeAmounts
						if (PeriodEndingDate not entered)
							PeriodEndingDate = GeneralLedgerTotal.EntityYearPeriod.Date

		ProcessGainLoss is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmLedger						is a Ledger
					default label is "Ledger"
				PrmCurrencyLedger				is a Ledger
					default label is "CurrencyLedger"
				PrmCloseLedger					is a Ledger
					default label is "CloseLedger"
				PrmYearToDate  					is a DateRange
					default label is "YearToDate"
				PrmOption						is Numeric 1
					default label is "Option"
					States
						Revalue					value is 1		
						Translation				value is 2		
				PrmRunSequence 					is Alpha 10
					default label is "RunSequence"
				PrmRateOption					is Numeric 1
					default label is "RateOption"
					States
						DailyRate				value is 0
						PeriodRate				value is 1
				PrmPostOption					is Numeric 1
					default label is "PostOption"
					States
						ZoneOrSystem			value is 0
						OriginatingDimension	value is 1
				PrmFunctional					is Boolean
					default label is "Functional"
				PrmAlternate					is Boolean
					default label is "Alternate"
				PrmAlternate2					is Boolean
					default label is "Alternate2"
				PrmAlternate3					is Boolean
					default label is "Alternate3"
				PrmProject						is Boolean
					default label is "Project"
				PrmReport1						is Boolean
					default label is "Report1"
				PrmReport2						is Boolean
					default label is "Report2"
				PrmReport3						is Boolean
					default label is "Report3"
				PrmReport4						is Boolean
					default label is "Report4"
				PrmReport5						is Boolean
					default label is "Report5"
				PrmBySystemCode					is Boolean
					default label is "BySystemCode"
				PrmGainLossResult				is a GainLossResult
					default label is "GainLossResult"
				PrmGeneralLedgerCalendarPeriod	is a GeneralLedgerCalendarPeriod
					default label is "GlobalLedgerCalendarPeriod"
				PrmAutoReverse					is Boolean
					default label is "AutoReverse"
				PrmReleased						is Boolean
					default label is "CreateReleased"
				PrmSaveCalculation				is Boolean
					default label is "SaveCalculationAmount"
				PrmLedgerGroup					is a GeneralLedgerTotal group
					default label is "LedgerGroup"
				PrmChangesOnly					is Boolean
					default label is "ChangedTotalsOnly"
				PrmTimeStampRange				is a TimeStampRange
					default label is "TimeStampRange"
				PrmAccount						is a GeneralLedgerChartAccount
					default label is "Account"
				PrmGeneralLedgerTotalGroup		is a GeneralLedgerTotal group 
					default label is "AccountGroup"
				PrmChartSection				is Numeric 1
					default label is "ChartSection"
					States
						BalanceSheet    	value is 1
						IncomeStatement 	value is 2	
				PrmFunctionalCurrency       is a Currency 		
					default label is "FunctionalCurrency"
				PrmOtherDimensions			is Boolean
					default label is "OtherDimensions"	
					
			Parameter Rules
				PrmReportingBasis
					LocalReportingChart		= PrmReportingBasis.ReportingChart

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Set Is
				PrmEnterpriseGroup
				PrmReportingBasis
				PrmAccountingEntity
				PrmRunSequence

			Local Fields	
				JournalCreated						is Boolean
				LocalAccountingEntityJournalView	is a GeneralLedgerJournalControl view
				LocalPostingDate					is Date
				LocalFromCurrency					is a Currency
				LocalPrimaryLedger					is a Ledger
    	    	LocalAccountingUnit					is a AccountingUnit
				LocalDimensionCode					is a DimensionCode
				LocalFinanceDimension1				is a FinanceDimension1
				LocalTranslationCode				is a GeneralLedgerTranslationCode
				LocalGainAccount					is a GeneralLedgerChartAccount
				LocalLossAccount					is a GeneralLedgerChartAccount
				LocalIsCurrentPeriod				is Boolean
				LocalIsBegBalance					is Boolean
				LocalCalendarPeriod					is like GeneralLedgerCalendarPeriod
				LocalSystem							is a GeneralLedgerSystemCode
				CommitNow							is Boolean

				LocalFinanceCodeBlock				is a FinanceCodeBlock
				GltotFunctionalAmount	   		 	is a TotalAmount
				GltotAlternateAmount	   		 	is a TotalAmount
				GltotAlternateAmount2	   		 	is a TotalAmount
				GltotAlternateAmount3	   		 	is a TotalAmount
				GltotProjectAmount		   	 		is a TotalAmount
				GltotReportAmount1		    		is a TotalAmount
				GltotReportAmount2			    	is a TotalAmount
				GltotReportAmount3			    	is a TotalAmount
				GltotReportAmount4			    	is a TotalAmount
				GltotReportAmount5			    	is a TotalAmount
				LocalFunctionalGainLoss	   		 	is a TotalAmount
				LocalAlternateGainLoss	   		 	is a TotalAmount
				LocalAlternateGainLoss2	   		 	is a TotalAmount
				LocalAlternateGainLoss3	   		 	is a TotalAmount
				LocalProjectGainLoss	   	 		is a TotalAmount
				LocalReport1GainLoss	    		is a TotalAmount
				LocalReport2GainLoss		    	is a TotalAmount
				LocalReport3GainLoss		    	is a TotalAmount
				LocalReport4GainLoss		    	is a TotalAmount
				LocalReport5GainLoss		    	is a TotalAmount

				LocalLedger							is a Ledger
				LocalGainLossAccount				is a GeneralLedgerChartAccount
		        LocalZoneAccountingUnit				is a AccountingUnit
        		LocalZoneDimension1					is a FinanceDimension1
				LocalGainLossFinanceDimension1		is a FinanceDimension1
				LocalGainLossFinanceDimension2		is a FinanceDimension2
				LocalGainLossFinanceDimension3		is a FinanceDimension3
				LocalGainLossFinanceDimension4		is a FinanceDimension4
				LocalGainLossFinanceDimension5		is a FinanceDimension5
				LocalGainLossFinanceDimension6		is a FinanceDimension6
				LocalGainLossFinanceDimension7		is a FinanceDimension7
				LocalGainLossFinanceDimension8		is a FinanceDimension8
				LocalGainLossFinanceDimension9		is a FinanceDimension9
				LocalGainLossFinanceDimension10		is a FinanceDimension10
				LocalGainLossDimensionCode			is a DimensionCode

				JournalFunctionalAmountDr			is an TotalAmount
				JournalAlternateAmountDr			is an TotalAmount
				JournalAlternateAmount2Dr			is an TotalAmount
				JournalAlternateAmount3Dr			is an TotalAmount
				JournalReportAmount1Dr				is an TotalAmount
				JournalReportAmount2Dr				is an TotalAmount
				JournalReportAmount3Dr				is an TotalAmount
				JournalReportAmount4Dr				is an TotalAmount
				JournalReportAmount5Dr				is an TotalAmount

				JournalFunctionalAmountCr			is an TotalAmount
				JournalAlternateAmountCr			is an TotalAmount
				JournalAlternateAmount2Cr			is an TotalAmount
				JournalAlternateAmount3Cr			is an TotalAmount
				JournalReportAmount1Cr				is an TotalAmount
				JournalReportAmount2Cr				is an TotalAmount
				JournalReportAmount3Cr				is an TotalAmount
				JournalReportAmount4Cr				is an TotalAmount
				JournalReportAmount5Cr				is an TotalAmount

				LocalTransactionSequence			is Numeric 12

				LocalFromTransaction				is Numeric 1

				LocalJournalizeGroup				is like JournalizeGroup

				LocalTranCurrency					is like Currency

				LocalLinkBackSequence				is Numeric 6
				LocalTransactionLinkSequence		is Numeric 6

				LocalTransactionDiff	   		 	is a TotalAmount
				LocalFunctionalDiff	 	  		 	is a TotalAmount
				LocalAlternateDiff	   			 	is a TotalAmount
				LocalAlternateDiff2	   			 	is a TotalAmount
				LocalAlternateDiff3	   			 	is a TotalAmount
				LocalProjectDiff	   		 		is a TotalAmount
				LocalReport1Diff		   	 		is a TotalAmount
				LocalReport2Diff			    	is a TotalAmount
				LocalReport3Diff			    	is a TotalAmount
				LocalReport4Diff			    	is a TotalAmount
				LocalReport5Diff			    	is a TotalAmount
				LocalTransactionAudit	   		 	is a TotalAmount
				LocalFunctionalAudit	  		 	is a TotalAmount
				LocalAlternateAudit	   			 	is a TotalAmount
				LocalAlternateAudit2   			 	is a TotalAmount
				LocalAlternateAudit3   			 	is a TotalAmount
				LocalProjectAudit	   		 		is a TotalAmount
				LocalReport1Audit		   	 		is a TotalAmount
				LocalReport2Audit			    	is a TotalAmount
				LocalReport3Audit			    	is a TotalAmount
				LocalReport4Audit			    	is a TotalAmount
				LocalReport5Audit			    	is a TotalAmount
				LocalSkipCalculation				is Boolean
				LocalAutoBalanceAccount				is like GeneralLedgerChartAccount
				LocalSystemGainAccount				is like GeneralLedgerChartAccount
				LocalSystemLossAccount				is like GeneralLedgerChartAccount
				LocalSkipAccount					is Boolean
				LocalJournalCreated					is Boolean
				LocalSetChartSection				is like ChartSection
				LocalRateType						is Numeric 1
		  			States
						EndingBalance		value is 1
						PeriodBalance		value is 2
						HistoricalBalance	value is 3
						NoCalculation		value is 4

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and    Scenario  					= PrmEnterpriseGroup.ActualsScenario
				and    AccountingEntity				= PrmAccountingEntity
				and   ((PrmChartSection entered 
				and     PrmChartSection = ChartSection)
				or		PrmChartSection not entered)
				and   ((PrmFunctionalCurrency entered
				and     GeneralLedgerTotal.Currency != PrmFunctionalCurrency)
				or		PrmFunctionalCurrency not entered)
				and   !IsUREChartAccount
				and   ((PrmOption.Revalue
				and     ReportingChartAccountRel.Revalue)
				or     (PrmOption.Translation))


				and   ((ChartSection				= 1						
				and     PeriodEndingDate 			within PrmYearToDate)
				or     (ChartSection				= 2						
				and     PeriodEndingDate 			within PrmDateRange))
				and   ((PrmAccount entered
				and     GeneralLedgerTotal.GeneralLedgerChartAccount	= PrmAccount)
				or    (!PrmAccount entered))
				and   ((PrmGeneralLedgerTotalGroup entered
				and     GeneralLedgerTotal					within PrmGeneralLedgerTotalGroup)
				or    (!PrmGeneralLedgerTotalGroup entered))
				and   ((PrmChangesOnly
				and     update stamp 						within PrmTimeStampRange)
				or    (!PrmChangesOnly))
				and	GeneralLedgerTotal.Ledger.Active
				and GeneralLedgerTotal.PrimaryLedger.Active
				and   ((!PrmLedger entered
				and      GeneralLedgerTotal					within PrmLedgerGroup)
				or     (PrmLedger entered
				and     (GeneralLedgerTotal.PrimaryLedger	= PrmLedger
				and      GeneralLedgerTotal.Ledger			= PrmLedger)
				or      (GeneralLedgerTotal.PrimaryLedger	= PrmLedger
				and      (GeneralLedgerTotal.Ledger			= PrmCurrencyLedger
				or        GeneralLedgerTotal.Ledger			= PrmCloseLedger)))))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				IsUREChartAccount
				AccountingEntity
				GeneralLedgerTotal.PrimaryLedger
				GeneralLedgerTotal.Currency
				ChartSection
        	    GeneralLedgerTotal.GeneralLedgerChartAccount
    	    	GeneralLedgerTotal.AccountingUnit
            	GeneralLedgerTotal.Project
				GeneralLedgerTotal.DimensionCode
				GeneralLedgerTotal.System
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				update stamp

			Accumulators
				TransactionYearToDate
				FunctionalYearToDate
				AlternateYearToDate
				AlternateYearToDate2
				AlternateYearToDate3
				ProjectYearToDate
				Report1YearToDate
				Report2YearToDate
				Report3YearToDate
				Report4YearToDate
				Report5YearToDate
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmountTotal2
				AlternateAmountTotal3
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total

			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup 		= PrmEnterpriseGroup
					LocalAccountingEntity				= PrmAccountingEntity		
					LocalCurrencyLedger					= PrmCurrencyLedger
					LocalGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
					invoke UpdateGainLossTimeStamp EntityCurrencyLedgerPeriodRel
						invoked.GainLossOption		= PrmOption

				Set Rules
				
				AccountingEntity Set Rules
					Entrance Rules
						initialize LocalJournalCreated
						LocalSystemCode				= "GL"
			            increment LocalSystemCode.LastJournalizeGroup
						LocalJournalizeGroup 		 = LocalSystemCode.DerivedJournalizeGroup						 
						CommitNow = true

						LocalSystemAccount 					= SystemAccount.AutoBalance 
						LocalAutoBalanceAccount				= first SystemAccountRel.GeneralLedgerChartAccount
						if (PrmOption.Revalue)
							LocalSystemAccount 				= SystemAccount.UnrealizedGainAndLoss 
							if (SystemAccountRel exists)
								LocalSystemGainAccount		= first SystemAccountRel.GeneralLedgerChartAccount
								LocalSystemLossAccount		= LocalSystemGainAccount
							else						
								LocalSystemAccount 			= SystemAccount.UnrealizedGain 
								LocalSystemGainAccount		= first SystemAccountRel.GeneralLedgerChartAccount
							if (!LocalSystemLossAccount entered)
								LocalSystemAccount 			= SystemAccount.UnrealizedLoss 
								LocalSystemLossAccount		= first SystemAccountRel.GeneralLedgerChartAccount
						else
							LocalSystemAccount 				= SystemAccount.TranslationGainAndLoss 
							if (SystemAccountRel exists)
								LocalSystemGainAccount		= first SystemAccountRel.GeneralLedgerChartAccount
								LocalSystemLossAccount		= LocalSystemGainAccount
							else						
								LocalSystemAccount 			= SystemAccount.TranslationGain 
								LocalSystemGainAccount		= first SystemAccountRel.GeneralLedgerChartAccount
							if (!LocalSystemGainAccount entered)
								LocalSystemAccount 			= SystemAccount.TranslationLoss 
								LocalSystemLossAccount		= first SystemAccountRel.GeneralLedgerChartAccount

					Exit Rules
						LocalFinanceEnterpriseGroup			= PrmEnterpriseGroup
						LocalAccountingEntity				= PrmAccountingEntity
						LocalCurrencyLedger					= PrmCurrencyLedger
						LocalGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
						if (!PrmReleased)			


							invoke UpdateGainLossTimeStamp EntityCurrencyLedgerPeriodRel
								invoked.GainLossOption		= PrmOption
						if (EntityCurrencyLedgerPeriodRel.PeriodStatus.Backpost
						and LocalJournalCreated)
							LocalReportingBasis			= PrmReportingBasis
							LocalBasisYear				= last PeriodShadowForYearRel.SummaryGeneralLedgerCalendarPeriod.Year
							if (ReportingBasisYearRel.YearClosed)
								invoke OpenBasisYear OpenReportingBasisYearRel

				GeneralLedgerTotal.PrimaryLedger	Set Rules
					Entrance Rules
						JournalCreated			= false
						initialize LocalTransactionSequence
						LocalPrimaryLedger		= GeneralLedgerTotal.PrimaryLedger

						initialize JournalFunctionalAmountDr
						initialize JournalAlternateAmountDr
						initialize JournalAlternateAmount2Dr
						initialize JournalAlternateAmount3Dr
						initialize JournalReportAmount1Dr
						initialize JournalReportAmount2Dr
						initialize JournalReportAmount3Dr
						initialize JournalReportAmount4Dr
						initialize JournalReportAmount5Dr

						initialize JournalFunctionalAmountCr
						initialize JournalAlternateAmountCr
						initialize JournalAlternateAmount2Cr
						initialize JournalAlternateAmount3Cr
						initialize JournalReportAmount1Cr
						initialize JournalReportAmount2Cr
						initialize JournalReportAmount3Cr
						initialize JournalReportAmount4Cr
						initialize JournalReportAmount5Cr


					Exit Rules

						if (JournalCreated)
							if  (PrmReleased)

								invoke AutoRelease LocalAccountingEntityJournalView.GeneralLedgerJournalControl
									invoked.PrmUpdateTotal			= true
									include UpdateJournalTotals
							else
								invoke UpdateJournalTotals LocalAccountingEntityJournalView.GeneralLedgerJournalControl
									include UpdateJournalTotals
									
                        	if(!PrmReleased)
								invoke TriggerBOD LocalAccountingEntityJournalView.GeneralLedgerJournalControl
								














		
				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalTranCurrency					= GeneralLedgerTotal.Currency
						if (PrmOption.Revalue)
							LocalFromCurrency				= GeneralLedgerTotal.Currency
						else
							LocalFromCurrency				= PrmAccountingEntity.FunctionalCurrency

					Exit Rules
					
						LocalRunSequence				= PrmRunSequence
						LocalAccountingEntity			= PrmAccountingEntity
						LocalInstLedger					= LocalAccountingEntityJournalView.PrimaryLedger




						CommitNow = true












							
						for each GainLossTotalRel
							LocalFunctionalGainLoss			= each.FunctionalTotal
							LocalAlternateGainLoss			= each.AlternateTotal
							LocalAlternateGainLoss2			= each.AlternateTotal2
							LocalAlternateGainLoss3			= each.AlternateTotal3
							LocalProjectGainLoss			= each.ProjectTotal
							LocalReport1GainLoss			= each.ReportTotal1
							LocalReport2GainLoss			= each.ReportTotal2
							LocalReport3GainLoss			= each.ReportTotal3
							LocalReport4GainLoss			= each.ReportTotal4
							LocalReport5GainLoss			= each.ReportTotal5
							LocalGainAccount				= each.GainLossTotal.GainAccount
							LocalLossAccount				= each.GainLossTotal.LossAccount
							LocalZoneAccountingUnit			= each.GainLossTotal.ZoneAccountingUnit
							LocalZoneDimension1				= each.GainLossTotal.ZoneDimension1
							if (PrmOtherDimensions)
								LocalGainLossFinanceDimension1	= each.FinanceDimension1
								LocalGainLossFinanceDimension2	= each.FinanceDimension2
								LocalGainLossFinanceDimension3	= each.FinanceDimension3
								LocalGainLossFinanceDimension4	= each.FinanceDimension4
								LocalGainLossFinanceDimension5	= each.FinanceDimension5
								LocalGainLossFinanceDimension6	= each.FinanceDimension6
								LocalGainLossFinanceDimension7	= each.FinanceDimension7
								LocalGainLossFinanceDimension8	= each.FinanceDimension8
								LocalGainLossFinanceDimension9	= each.FinanceDimension9
								LocalGainLossFinanceDimension10	= each.FinanceDimension10
								LocalGainLossDimensionCode		= each.GainLossTotal.DimensionCode
							LocalTranCurrency				= each.GainLossTotal.Currency
							LocalSystem						= each.GainLossTotal.System
							LocalPrimaryLedger				= each.GainLossTotal.Ledger
							LocalTransactionLinkSequence	= each.LinkBackSequence
							
							include CreateGainLossTransactions
							invoke Update each
								invoked.Status			= 1

				GeneralLedgerTotal.DimensionCode Set Rules
					Entrance Rules
						LocalSetChartSection							= ChartSection
						LocalDimensionCode								= GeneralLedgerTotal.DimensionCode
						LocalReportingChart								= PrmReportingBasis.ReportingChart
						if (ReportingChartAccountRel exists)
							LocalTranslationCode						= ReportingChartAccountRel.TranslationCode
							LocalRateType								= ReportingChartAccountRel.TranslationCode.RateType
						else
							LocalTranslationCode						= GeneralLedgerTotal.GeneralLedgerChartAccount.TranslationCode
							LocalRateType								= GeneralLedgerTotal.GeneralLedgerChartAccount.TranslationCode.RateType
						LocalFinanceCodeBlock.Ledger					= PrmCurrencyLedger
						LocalFinanceCodeBlock.ToAccountingEntity		= PrmAccountingEntity
						LocalFinanceCodeBlock.AccountingUnit			= GeneralLedgerTotal.AccountingUnit
						LocalFinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
						LocalFinanceCodeBlock.Project					= GeneralLedgerTotal.Project
						LocalPrimaryLedger								= GeneralLedgerTotal.PrimaryLedger

						LocalFinanceCodeBlock.FinanceDimension1			= FinanceDimension1
						LocalFinanceCodeBlock.FinanceDimension2			= FinanceDimension2
						LocalFinanceCodeBlock.FinanceDimension3			= FinanceDimension3
						LocalFinanceCodeBlock.FinanceDimension4			= FinanceDimension4
						LocalFinanceCodeBlock.FinanceDimension5			= FinanceDimension5
						LocalFinanceCodeBlock.FinanceDimension6			= FinanceDimension6
						LocalFinanceCodeBlock.FinanceDimension7			= FinanceDimension7
						LocalFinanceCodeBlock.FinanceDimension8			= FinanceDimension8
						LocalFinanceCodeBlock.FinanceDimension9			= FinanceDimension9
						LocalFinanceCodeBlock.FinanceDimension10		= FinanceDimension10
						LocalLedger										= PrmCurrencyLedger
						LocalPostingDate								= PrmDateRange.End
		    	    	LocalAccountingUnit								= GeneralLedgerTotal.AccountingUnit
						LocalFinanceDimension1							= FinanceDimension1
						if (PrmOption.Revalue)
							LocalGainAccount				= ReportingChartAccountRel.UnrealizedGainAccount
							LocalLossAccount				= ReportingChartAccountRel.UnrealizedLossAccount
						else
							LocalGainAccount				= ReportingChartAccountRel.TranslationGainAccount
							LocalLossAccount				= ReportingChartAccountRel.TranslationLossAccount
						if (!LocalGainAccount entered)
							LocalGainAccount				= LocalSystemGainAccount
						if (!LocalLossAccount entered)
							LocalLossAccount				= LocalSystemLossAccount
						LocalSkipAccount		= false
						if (!ReportingChartAccountRel exists)
							LocalSkipAccount		= true

					Exit Rules
						LocalChartSection				= LocalSetChartSection
						if (!PrmBySystemCode)
							LocalSystem			= "GL"
							LocalSkipCalculation		= false
							if  (PrmOption.Revalue
							and (LocalAutoBalanceAccount	= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or  (LocalGainAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or   LocalLossAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount))
							and !TransactionYearToDate entered
							and !TransactionAmountTotal entered)
								LocalSkipCalculation		= true
							
							if  (PrmOption.Translation
							and (LocalGainAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or   LocalLossAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount)
							and !FunctionalYearToDate entered
							and !FunctionalAmountTotal entered)
								LocalSkipCalculation		= true
							if (LocalSkipAccount)
								LocalSkipCalculation		= true
							if  (!LocalSkipCalculation)
								include CalculateGainLoss
							if (1  > 2)
								display "NotBySystemCode<TransactionAmountTotal>"

				GeneralLedgerTotal.System Set Rules
					Entrance Rules
						LocalSystem				= GeneralLedgerTotal.System

					Exit Rules
						LocalChartSection				= LocalSetChartSection
						if (PrmBySystemCode)
							LocalSkipCalculation		= false
							if  (PrmOption.Revalue
							and (LocalAutoBalanceAccount	= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or  (LocalGainAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or   LocalLossAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount))
							and !TransactionYearToDate entered
							and !TransactionAmountTotal entered)
								LocalSkipCalculation		= true
							
							if  (PrmOption.Translation
							and (LocalGainAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount
							or   LocalLossAccount			= LocalFinanceCodeBlock.GeneralLedgerChartAccount)
							and !FunctionalYearToDate entered
							and !FunctionalAmountTotal entered)
								LocalSkipCalculation		= true
							if (LocalSkipAccount)
								LocalSkipCalculation		= true
							if  (!LocalSkipCalculation)
								include CalculateGainLoss
						if (1  > 2)
							display "BySystemCode<TransactionAmountTotal>"

				PeriodEndingDate Set Rules
					Entrance Rules
						LocalIsCurrentPeriod			= false
						LocalIsBegBalance				= false
						if (PeriodEndingDate within PrmDateRange)
							LocalIsCurrentPeriod		= true
						if (DerivedPeriod		 		= "000") 
							LocalIsBegBalance			= true
					Exit Rules
						if (1  > 2)
							display "EndingDate<TransactionAmountTotal>"

				Instance Rules
					if (CommitNow)
						commit transaction
						CommitNow = false
					initialize LocalTransactionDiff
					initialize LocalFunctionalDiff
					initialize LocalAlternateDiff
					initialize LocalAlternateDiff2
					initialize LocalAlternateDiff3
					initialize LocalProjectDiff
					initialize LocalReport1Diff
					initialize LocalReport2Diff
					initialize LocalReport3Diff
					initialize LocalReport4Diff
					initialize LocalReport5Diff
					if (PrmChangesOnly)
						initialize LocalTransactionAudit
						initialize LocalFunctionalAudit
						initialize LocalAlternateAudit
						initialize LocalAlternateAudit2
						initialize LocalAlternateAudit3
						initialize LocalProjectAudit
						initialize LocalReport1Audit
						initialize LocalReport2Audit
						initialize LocalReport3Audit
						initialize LocalReport4Audit
						initialize LocalReport5Audit
						for each this instance.audit log records
							if (each.applied stamp < PrmTimeStampRange.Begin)
								LocalTransactionAudit		= each.NetTransactionAmount
								LocalFunctionalAudit 	  	= each.NetFunctionalAmount
								LocalAlternateAudit	   		= each.NetAlternateAmount
								LocalAlternateAudit2   		= each.NetAlternateAmount2
								LocalAlternateAudit3		= each.NetAlternateAmount3
								LocalProjectAudit	   		= each.NetProjectAmount
								LocalReport1Audit		   	= each.NetReportAmount1
								LocalReport2Audit			= each.NetReportAmount2
								LocalReport3Audit			= each.NetReportAmount3
								LocalReport4Audit			= each.NetReportAmount4
								LocalReport5Audit			= each.NetReportAmount5
							else
								end for each
						LocalTransactionDiff		= NetTransactionAmount	- LocalTransactionAudit
						LocalFunctionalDiff	 	  	= NetFunctionalAmount	- LocalFunctionalAudit
						LocalAlternateDiff	   		= NetAlternateAmount	- LocalAlternateAudit
						LocalAlternateDiff2	   		= NetAlternateAmount2	- LocalAlternateAudit2
						LocalAlternateDiff3	   		= NetAlternateAmount3	- LocalAlternateAudit3
						LocalProjectDiff	   		= NetProjectAmount		- LocalProjectAudit
						LocalReport1Diff		   	= NetReportAmount1		- LocalReport1Audit
						LocalReport2Diff			= NetReportAmount2		- LocalReport2Audit
						LocalReport3Diff			= NetReportAmount3		- LocalReport3Audit
						LocalReport4Diff			= NetReportAmount4		- LocalReport4Audit
						LocalReport5Diff			= NetReportAmount5		- LocalReport5Audit
					else
						LocalTransactionDiff		= NetTransactionAmount
						LocalFunctionalDiff	 	  	= NetFunctionalAmount
						LocalAlternateDiff	   		= NetAlternateAmount
						LocalAlternateDiff2	   		= NetAlternateAmount2
						LocalAlternateDiff3	   		= NetAlternateAmount3
						LocalProjectDiff	   		= NetProjectAmount
						LocalReport1Diff		   	= NetReportAmount1
						LocalReport2Diff			= NetReportAmount2
						LocalReport3Diff			= NetReportAmount3
						LocalReport4Diff			= NetReportAmount4
						LocalReport5Diff			= NetReportAmount5

					TransactionYearToDate		+= LocalTransactionDiff
					FunctionalYearToDate		+= LocalFunctionalDiff
					AlternateYearToDate			+= LocalAlternateDiff
					AlternateYearToDate2		+= LocalAlternateDiff2
					AlternateYearToDate3		+= LocalAlternateDiff3
					ProjectYearToDate			+= LocalProjectDiff
					Report1YearToDate			+= LocalReport1Diff
					Report2YearToDate			+= LocalReport2Diff
					Report3YearToDate			+= LocalReport3Diff
					Report4YearToDate			+= LocalReport4Diff
					Report5YearToDate			+= LocalReport5Diff
					if (PrmOption.Translation

					and LocalRateType.HistoricalBalance)


						LocalAccountingEntity			= AccountingEntity
						LocalFrCurrency					= AccountingEntity.FunctionalCurrency
						LocalTransactionAmount			= NetFunctionalAmount
						LocalTranslationDate			= GeneralLedgerTotal.EntityYearPeriod.Date
						LocalProject					= GeneralLedgerTotal.Project
						LocalGainLossResult 			= PrmGainLossResult
						LocalReportingBasis				= PrmReportingBasis
						LocalInstTranslationCode		= LocalTranslationCode
						LocalInstRateType				= LocalRateType
						if (!LocalIsBegBalance)			
							include SetLocalCurrencyFlag
							include TranslationCodeCalculation				
							FunctionalAmountTotal 			+= LocalFunctionalAmount
							AlternateAmountTotal			+= LocalAlternateAmount
							AlternateAmountTotal2			+= LocalAlternateAmount2
							AlternateAmountTotal3			+= LocalAlternateAmount3
							ProjectAmountTotal	 			+= LocalProjectAmount
							ReportAmount1Total				+= LocalReportAmount1
							ReportAmount2Total				+= LocalReportAmount2
							ReportAmount3Total				+= LocalReportAmount3
							ReportAmount4Total				+= LocalReportAmount4
							ReportAmount5Total				+= LocalReportAmount5
						else							
							FunctionalAmountTotal 			+= NetFunctionalAmount
							AlternateAmountTotal			+= NetAlternateAmount
							AlternateAmountTotal2			+= NetAlternateAmount2
							AlternateAmountTotal3			+= NetAlternateAmount3
							ProjectAmountTotal	 			+= NetProjectAmount
							ReportAmount1Total				+= NetReportAmount1
							ReportAmount2Total				+= NetReportAmount2
							ReportAmount3Total				+= NetReportAmount3
							ReportAmount4Total				+= NetReportAmount4
							ReportAmount5Total				+= NetReportAmount5
					else
					if (LocalIsCurrentPeriod)	

						TransactionAmountTotal			+= LocalTransactionDiff
						FunctionalAmountTotal 			+= LocalFunctionalDiff
						AlternateAmountTotal			+= LocalAlternateDiff
						AlternateAmountTotal2			+= LocalAlternateDiff2
						AlternateAmountTotal3			+= LocalAlternateDiff3
						ProjectAmountTotal	 			+= LocalProjectDiff
						ReportAmount1Total				+= LocalReport1Diff
						ReportAmount2Total				+= LocalReport2Diff
						ReportAmount3Total				+= LocalReport3Diff
						ReportAmount4Total				+= LocalReport4Diff
						ReportAmount5Total				+= LocalReport5Diff

		BuildZoneBalanceTotal is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmCalendarPeriod				is a GeneralLedgerCalendarPeriod

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	

				LocalZoneAccountingUnit			is like AccountingUnit
				LocalSetCurrencyCode			is like Currency
				LocalEntityYearPeriod			is like GeneralLedgerCalendarPeriod
				LocalLedger						is like Ledger
				LocalPrimaryLedger				is like Ledger

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and    AccountingEntity					= PrmAccountingEntity
				and    GeneralLedgerTotal.AccountingUnit entered
				and   ((PrmCalendarPeriod entered
				and     GeneralLedgerTotal.EntityYearPeriod	>= PrmCalendarPeriod)
				or     (!PrmCalendarPeriod entered))
				and   (!IsUREChartAccount)

				and   (!GeneralLedgerTotal.Ledger.CloseLedger))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.PrimaryLedger
				GeneralLedgerTotal.EntityYearPeriod
    	    	GeneralLedgerTotal.AccountingUnit
				GeneralLedgerTotal.Currency

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal

			Action Rules
				Empty Set Rules

				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

				GeneralLedgerTotal.AccountingUnit Set Rules
					Entrance Rules
			        	LocalInstAccountingEntity		= PrmAccountingEntity
						LocalInstAccountingUnit			= GeneralLedgerTotal.AccountingUnit
						LocalZoneAccountingUnit			= DerivedZoneAccountingUnit
						LocalEntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
						LocalLedger						= GeneralLedgerTotal.Ledger
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger

				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
						
					Exit Rules
						if (TransactionAmountTotal entered
						or	FunctionalAmountTotal entered
						or	AlternateAmountTotal entered
						or	AlternateAmount2Total entered
						or	AlternateAmount3Total entered
						or	ProjectAmountTotal entered
						or	ReportAmount1Total entered
						or	ReportAmount2Total entered
						or	ReportAmount3Total entered
						or	ReportAmount4Total entered
						or	ReportAmount5Total entered
						or	UnitsAmountTotal entered)
							LocalAUZoneBalance.Ledger						= LocalLedger
							LocalAUZoneBalance.PrimaryLedger				= LocalPrimaryLedger
							LocalAUZoneBalance.GeneralLedgerCalendarPeriod	= LocalEntityYearPeriod
							LocalAUZoneBalance.ZoneAccountingUnit			= LocalZoneAccountingUnit
							LocalAUZoneBalance.Currency						= LocalSetCurrencyCode
							invoke Update LocalAUZoneBalance 
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= PrmAccountingEntity
								invoked.PrmTransactionAmount				= TransactionAmountTotal
								invoked.PrmFunctionalAmount					= FunctionalAmountTotal
								invoked.PrmAlternateAmount					= AlternateAmountTotal
								invoked.PrmAlternateAmount2					= AlternateAmount2Total
								invoked.PrmAlternateAmount3					= AlternateAmount3Total
								invoked.PrmProjectAmount					= ProjectAmountTotal
								invoked.PrmReportAmount1					= ReportAmount1Total
								invoked.PrmReportAmount2					= ReportAmount2Total
								invoked.PrmReportAmount3					= ReportAmount3Total
								invoked.PrmReportAmount4					= ReportAmount4Total
								invoked.PrmReportAmount5					= ReportAmount5Total
								invoked.PrmUnitsAmount						= UnitsAmountTotal

				Instance Rules
					TransactionAmountTotal				+= NetTransactionAmount
					FunctionalAmountTotal				+= NetFunctionalAmount
					AlternateAmountTotal				+= NetAlternateAmount
					AlternateAmount2Total				+= NetAlternateAmount2
					AlternateAmount3Total				+= NetAlternateAmount3
					ProjectAmountTotal					+= NetProjectAmount
					ReportAmount1Total					+= NetReportAmount1
					ReportAmount2Total					+= NetReportAmount2
					ReportAmount3Total					+= NetReportAmount3
					ReportAmount4Total					+= NetReportAmount4
					ReportAmount5Total					+= NetReportAmount5
					UnitsAmountTotal					+= NetUnitsAmount
					

		BuildPeriodZeroZoneBalanceTotal is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmCalendarPeriod				is a GeneralLedgerCalendarPeriod


			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	

				LocalZoneAccountingUnit			is like AccountingUnit
				LocalSetCurrencyCode			is like Currency
				LocalEntityYearPeriod			is like GeneralLedgerCalendarPeriod
				LocalLedger						is like Ledger
				LocalPrimaryLedger				is like Ledger
				LocalGeneralLedgerChartAccount  is a GeneralLedgerChartAccount
				LocalFinanceDimension1			is a FinanceDimension1
				LocalFinanceDimension2			is a FinanceDimension2
				LocalFinanceDimension3			is a FinanceDimension3
				LocalFinanceDimension4			is a FinanceDimension4
				LocalFinanceDimension5			is a FinanceDimension5
				LocalFinanceDimension6			is a FinanceDimension6
				LocalFinanceDimension7			is a FinanceDimension7
				LocalFinanceDimension8			is a FinanceDimension8
				LocalFinanceDimension9			is a FinanceDimension9
				LocalFinanceDimension10			is a FinanceDimension10
				LocalPeriodEndingDate			is Date								
				

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and    AccountingEntity					= PrmAccountingEntity
				and    GeneralLedgerTotal.AccountingUnit entered
				and   (PrmCalendarPeriod entered
				and     GeneralLedgerTotal.EntityYearPeriod	= PrmCalendarPeriod)

				and   (!IsUREChartAccount)		

				and   (GeneralLedgerTotal.Ledger.CloseLedger))							



			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.PrimaryLedger
				GeneralLedgerTotal.EntityYearPeriod
    	    	GeneralLedgerTotal.AccountingUnit
				GeneralLedgerTotal.Currency

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal

			Action Rules
				Empty Set Rules

				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

				GeneralLedgerTotal.AccountingUnit Set Rules
					Entrance Rules
			        	LocalInstAccountingEntity		= PrmAccountingEntity
						LocalInstAccountingUnit			= GeneralLedgerTotal.AccountingUnit
						LocalZoneAccountingUnit			= DerivedZoneAccountingUnit

						LocalEntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod	
						if (GeneralLedgerTotal.Ledger.CloseLedger)							
							LocalEndCalendarPeriod		= GeneralLedgerTotal.EntityYearPeriod	


							LocalLedger					= GeneralLedgerTotal.Ledger				
						else
							LocalLedger					= GeneralLedgerTotal.Ledger			
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger	
						

				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
						LocalPeriodEndingDate			= PeriodEndingDate		
						
					Exit Rules
						if (TransactionAmountTotal entered
						or	FunctionalAmountTotal entered
						or	AlternateAmountTotal entered
						or	AlternateAmount2Total entered
						or	AlternateAmount3Total entered
						or	ProjectAmountTotal entered
						or	ReportAmount1Total entered
						or	ReportAmount2Total entered
						or	ReportAmount3Total entered
						or	ReportAmount4Total entered
						or	ReportAmount5Total entered
						or	UnitsAmountTotal entered)
							LocalAUZoneBalance.Ledger						= LocalLedger
							LocalAUZoneBalance.PrimaryLedger				= LocalPrimaryLedger
							LocalAUZoneBalance.GeneralLedgerCalendarPeriod	= LocalEntityYearPeriod
							LocalAUZoneBalance.ZoneAccountingUnit			= LocalZoneAccountingUnit
							LocalAUZoneBalance.Currency						= LocalSetCurrencyCode

							invoke Update LocalAUZoneBalance 
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= PrmAccountingEntity
								invoked.PrmTransactionAmount				= TransactionAmountTotal
								invoked.PrmFunctionalAmount					= FunctionalAmountTotal
								invoked.PrmAlternateAmount					= AlternateAmountTotal
								invoked.PrmAlternateAmount2					= AlternateAmount2Total
								invoked.PrmAlternateAmount3					= AlternateAmount3Total
								invoked.PrmProjectAmount					= ProjectAmountTotal
								invoked.PrmReportAmount1					= ReportAmount1Total
								invoked.PrmReportAmount2					= ReportAmount2Total
								invoked.PrmReportAmount3					= ReportAmount3Total
								invoked.PrmReportAmount4					= ReportAmount4Total
								invoked.PrmReportAmount5					= ReportAmount5Total
								invoked.PrmUnitsAmount						= UnitsAmountTotal
								invoked.PeriodEndingDate					= LocalPeriodEndingDate		
								

				Instance Rules
					TransactionAmountTotal				+= NetTransactionAmount
					FunctionalAmountTotal				+= NetFunctionalAmount
					AlternateAmountTotal				+= NetAlternateAmount
					AlternateAmount2Total				+= NetAlternateAmount2
					AlternateAmount3Total				+= NetAlternateAmount3
					ProjectAmountTotal					+= NetProjectAmount
					ReportAmount1Total					+= NetReportAmount1
					ReportAmount2Total					+= NetReportAmount2
					ReportAmount3Total					+= NetReportAmount3
					ReportAmount4Total					+= NetReportAmount4
					ReportAmount5Total					+= NetReportAmount5
					UnitsAmountTotal					+= NetUnitsAmount
		












































		BuildFinanceDimension1ZoneTotal is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmCalendarPeriod				is a GeneralLedgerCalendarPeriod

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	
				LocalDim1ZoneBalance			is a FinanceDimension1ZoneBalance
				LocalZoneFinanceFimension1		is like FinanceDimension1
				LocalSetCurrencyCode			is like Currency
				LocalEntityYearPeriod			is like GeneralLedgerCalendarPeriod
				LocalLedger						is like Ledger
				LocalPrimaryLedger				is like Ledger
				

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and    AccountingEntity					= PrmAccountingEntity
				and    FinanceDimension1 entered
				and   ((PrmCalendarPeriod entered
				and     GeneralLedgerTotal.EntityYearPeriod	>= PrmCalendarPeriod)
				or     (!PrmCalendarPeriod entered))
				and   (!IsUREChartAccount)

				and   (!GeneralLedgerTotal.Ledger.CloseLedger))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.PrimaryLedger
				GeneralLedgerTotal.EntityYearPeriod
    	    	FinanceDimension1
				GeneralLedgerTotal.Currency

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal

			Action Rules
				Empty Set Rules

				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

				FinanceDimension1 Set Rules
					Entrance Rules
						LocalInstFinanceDimension1		= FinanceDimension1
						LocalZoneFinanceFimension1		= DerivedZoneFinanceDimension1
						LocalEntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
						LocalLedger						= GeneralLedgerTotal.Ledger
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger

				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
						
					Exit Rules
						if (TransactionAmountTotal entered
						or	FunctionalAmountTotal entered
						or	AlternateAmountTotal entered
						or	AlternateAmount2Total entered
						or	AlternateAmount3Total entered
						or	ProjectAmountTotal entered
						or	ReportAmount1Total entered
						or	ReportAmount2Total entered
						or	ReportAmount3Total entered
						or	ReportAmount4Total entered
						or	ReportAmount5Total entered
						or	UnitsAmountTotal entered)
							LocalDim1ZoneBalance.Ledger							= LocalLedger
							LocalDim1ZoneBalance.PrimaryLedger					= LocalPrimaryLedger
							LocalDim1ZoneBalance.GeneralLedgerCalendarPeriod	= LocalEntityYearPeriod
							LocalDim1ZoneBalance.ZoneFinanceFimension1			= LocalZoneFinanceFimension1
							LocalDim1ZoneBalance.Currency						= LocalSetCurrencyCode
							invoke Update LocalDim1ZoneBalance 
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= PrmAccountingEntity
								invoked.PrmTransactionAmount				= TransactionAmountTotal
								invoked.PrmFunctionalAmount					= FunctionalAmountTotal
								invoked.PrmAlternateAmount					= AlternateAmountTotal
								invoked.PrmAlternateAmount2					= AlternateAmount2Total
								invoked.PrmAlternateAmount3					= AlternateAmount3Total
								invoked.PrmProjectAmount					= ProjectAmountTotal
								invoked.PrmReportAmount1					= ReportAmount1Total
								invoked.PrmReportAmount2					= ReportAmount2Total
								invoked.PrmReportAmount3					= ReportAmount3Total
								invoked.PrmReportAmount4					= ReportAmount4Total
								invoked.PrmReportAmount5					= ReportAmount5Total
								invoked.PrmUnitsAmount						= UnitsAmountTotal

				Instance Rules
					TransactionAmountTotal				+= NetTransactionAmount
					FunctionalAmountTotal				+= NetFunctionalAmount
					AlternateAmountTotal				+= NetAlternateAmount
					AlternateAmount2Total				+= NetAlternateAmount2
					AlternateAmount3Total				+= NetAlternateAmount3
					ProjectAmountTotal					+= NetProjectAmount
					ReportAmount1Total					+= NetReportAmount1
					ReportAmount2Total					+= NetReportAmount2
					ReportAmount3Total					+= NetReportAmount3
					ReportAmount4Total					+= NetReportAmount4
					ReportAmount5Total					+= NetReportAmount5
					UnitsAmountTotal					+= NetUnitsAmount
					
		BuildPeriodZeroFinanceDimension1ZoneTotal is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmCalendarPeriod				is a GeneralLedgerCalendarPeriod

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields
				LocalDim1ZoneBalance			is a FinanceDimension1ZoneBalance
				LocalZoneFinanceFimension1		is like FinanceDimension1
				LocalSetCurrencyCode			is like Currency
				LocalEntityYearPeriod			is like GeneralLedgerCalendarPeriod
				LocalLedger						is like Ledger
				LocalPrimaryLedger				is like Ledger
				LocalGeneralLedgerChartAccount  is a GeneralLedgerChartAccount
				LocalFinanceDimension1			is a FinanceDimension1
				LocalFinanceDimension2			is a FinanceDimension2
				LocalFinanceDimension3			is a FinanceDimension3
				LocalFinanceDimension4			is a FinanceDimension4
				LocalFinanceDimension5			is a FinanceDimension5
				LocalFinanceDimension6			is a FinanceDimension6
				LocalFinanceDimension7			is a FinanceDimension7
				LocalFinanceDimension8			is a FinanceDimension8
				LocalFinanceDimension9			is a FinanceDimension9
				LocalFinanceDimension10			is a FinanceDimension10
				LocalPeriodEndingDate			is Date
				

			Instance Selection				
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmEnterpriseGroup.ActualsScenario
				and    AccountingEntity					= PrmAccountingEntity
				and    FinanceDimension1 entered
				and   (PrmCalendarPeriod entered
				and     GeneralLedgerTotal.EntityYearPeriod	= PrmCalendarPeriod)
				and   (!IsUREChartAccount)
				and   (GeneralLedgerTotal.Ledger.CloseLedger))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.PrimaryLedger
				GeneralLedgerTotal.EntityYearPeriod
    	    	FinanceDimension1
				GeneralLedgerTotal.Currency

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal

			Action Rules
				Empty Set Rules

				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

				FinanceDimension1 Set Rules
					Entrance Rules
						LocalInstFinanceDimension1		= FinanceDimension1
						LocalZoneFinanceFimension1		= DerivedZoneFinanceDimension1
						LocalEntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
						if (GeneralLedgerTotal.Ledger.CloseLedger)
							LocalEndCalendarPeriod		= GeneralLedgerTotal.EntityYearPeriod
							LocalLedger					= GeneralLedgerTotal.Ledger
						else
							LocalLedger					= GeneralLedgerTotal.Ledger
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger

				GeneralLedgerTotal.Currency Set Rules
					Entrance Rules
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
						LocalPeriodEndingDate			= PeriodEndingDate
						
					Exit Rules
						if (TransactionAmountTotal entered
						or	FunctionalAmountTotal entered
						or	AlternateAmountTotal entered
						or	AlternateAmount2Total entered
						or	AlternateAmount3Total entered
						or	ProjectAmountTotal entered
						or	ReportAmount1Total entered
						or	ReportAmount2Total entered
						or	ReportAmount3Total entered
						or	ReportAmount4Total entered
						or	ReportAmount5Total entered
						or	UnitsAmountTotal entered)
							LocalDim1ZoneBalance.Ledger							= LocalLedger
							LocalDim1ZoneBalance.PrimaryLedger					= LocalPrimaryLedger
							LocalDim1ZoneBalance.GeneralLedgerCalendarPeriod	= LocalEntityYearPeriod
							LocalDim1ZoneBalance.ZoneFinanceFimension1			= LocalZoneFinanceFimension1
							LocalDim1ZoneBalance.Currency						= LocalSetCurrencyCode
							invoke Update LocalDim1ZoneBalance 
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= PrmAccountingEntity
								invoked.PrmTransactionAmount				= TransactionAmountTotal
								invoked.PrmFunctionalAmount					= FunctionalAmountTotal
								invoked.PrmAlternateAmount					= AlternateAmountTotal
								invoked.PrmAlternateAmount2					= AlternateAmount2Total
								invoked.PrmAlternateAmount3					= AlternateAmount3Total
								invoked.PrmProjectAmount					= ProjectAmountTotal
								invoked.PrmReportAmount1					= ReportAmount1Total
								invoked.PrmReportAmount2					= ReportAmount2Total
								invoked.PrmReportAmount3					= ReportAmount3Total
								invoked.PrmReportAmount4					= ReportAmount4Total
								invoked.PrmReportAmount5					= ReportAmount5Total
								invoked.PrmUnitsAmount						= UnitsAmountTotal
								invoked.PeriodEndingDate					= LocalPeriodEndingDate

								
				Instance Rules
					TransactionAmountTotal				+= NetTransactionAmount
					FunctionalAmountTotal				+= NetFunctionalAmount
					AlternateAmountTotal				+= NetAlternateAmount
					AlternateAmount2Total				+= NetAlternateAmount2
					AlternateAmount3Total				+= NetAlternateAmount3
					ProjectAmountTotal					+= NetProjectAmount
					ReportAmount1Total					+= NetReportAmount1
					ReportAmount2Total					+= NetReportAmount2
					ReportAmount3Total					+= NetReportAmount3
					ReportAmount4Total					+= NetReportAmount4
					ReportAmount5Total					+= NetReportAmount5
					UnitsAmountTotal					+= NetUnitsAmount			

		DeleteBudgetData is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmScenario)

			Sort Order
				FinanceEnterpriseGroup
				Scenario
			Action Rules
				Instance Rules
					invoke Delete

		DeleteBudgetDataInRange is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"
				PrmFromPeriod					is a GeneralLedgerCalendarPeriod
					default label is "FromPeriod"
				PrmToPeriod					is a GeneralLedgerCalendarPeriod
					default label is "ToPeriod"

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmScenario
				and	   GeneralLedgerTotal.EntityYearPeriod	>= PrmFromPeriod
				and	   GeneralLedgerTotal.EntityYearPeriod	<= PrmToPeriod)

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.EntityYearPeriod
				
			Action Rules
				Instance Rules
					invoke Delete

		CalculateMeasuresForBudget is a Set Action
			restricted

			Parameters
				PrmEnterpriseGroup				is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is a Scenario
					default label is "Scenario"

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    Scenario      					= PrmScenario)

			Action Rules
				Instance Rules
					if (NetTransactionAmount entered)
						invoke CalculateMeasuresForBudgetRecord

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				
				
		CalculateMeasuresForBudgetRecord is an Instance Action
			restricted
			Action Rules
				if (AccountingEntity entered)
					LocalToBudgetCurrency			= AccountingEntity.FunctionalCurrency
					NetFunctionalAmount				= DerivedBudgetMeasure
					LocalToBudgetCurrency			= AccountingEntity.AlternateCurrency
					NetAlternateAmount				= DerivedBudgetMeasure
					LocalToBudgetCurrency			= AccountingEntity.AlternateCurrency2
					NetAlternateAmount2				= DerivedBudgetMeasure
					LocalToBudgetCurrency			= AccountingEntity.AlternateCurrency3
					NetAlternateAmount3				= DerivedBudgetMeasure
				if (GeneralLedgerTotal.Project entered)
					LocalToBudgetCurrency			= GeneralLedgerTotal.Project.Currency
					NetProjectAmount				= DerivedBudgetMeasure
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyOne
				NetReportAmount1					= DerivedBudgetMeasure
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyTwo
				NetReportAmount2					= DerivedBudgetMeasure
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyThree
				NetReportAmount3					= DerivedBudgetMeasure
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyFour
				NetReportAmount4					= DerivedBudgetMeasure
				LocalToBudgetCurrency				= FinanceEnterpriseGroup.ReportCurrencyFive
				NetReportAmount5					= DerivedBudgetMeasure

		DeleteData is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is like AccountingEntity
					default label is "AccountingEntity"
				PrmCurrencyLedger			is like Ledger
					default label is "Ledger"
				PrmCloseLedger				is like Ledger
					default label is "Ledger"
				PrmPrimaryLedger			is like Ledger
					default label is "Ledger"

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup

				and	   GeneralLedgerTotal.AccountingEntity 	= PrmAccountingEntity
				and	  (GeneralLedgerTotal.Ledger	= PrmCurrencyLedger
				or	   GeneralLedgerTotal.Ledger	= PrmCloseLedger)
				and   ((PrmPrimaryLedger entered
				and    	GeneralLedgerTotal.PrimaryLedger		=  PrmPrimaryLedger)
				or	  (!PrmPrimaryLedger entered)))

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				PeriodEndingDate
				GeneralLedgerTotal.Ledger

			Action Rules
				Empty Set Rules
				Instance Rules
					invoke Delete 

		InitializeUndistributedRetainedEarnings is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmDateRange  				is a DateRange
					default label is "DateRange"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmDateRange
					required

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	
				CommitNow						is Boolean

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    Scenario  					= PrmFinanceEnterpriseGroup.ActualsScenario
				and	   AccountingEntity				= PrmAccountingEntity
				and    PeriodEndingDate 			within PrmDateRange
				and	   IsUREChartAccount
				and	   !GeneralLedgerTotal.Ledger.CloseLedger)

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmDateRange

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				AccountingEntity
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				GeneralLedgerTotal.GeneralLedgerChartAccount
				GeneralLedgerTotal.EntityYearPeriod

			Action Rules
				Empty Set Rules

				Set Rules

				AccountingEntity Set Rules
					Entrance Rules

				Instance Rules
					include InitializeAmounts
					
		RebuildUndistributedRetainedEarnings is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmDateRange  				is a DateRange
					default label is "DateRange"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmDateRange
					required

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	
				CommitNow						is Boolean
				LocalLedger						is like Ledger
				LocalPrimaryLedger				is like Ledger
				LocalSetCurrencyCode			is like Currency
    	    	LocalAccountingUnit				is like AccountingUnit
        	    LocalGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
            	LocalProject					is like Project
				LocalSystem						is like GeneralLedgerSystemCode
				LocalFinanceDimension1			is like FinanceDimension1
				LocalFinanceDimension2			is like FinanceDimension2
				LocalFinanceDimension3			is like FinanceDimension3
				LocalFinanceDimension4			is like FinanceDimension4
				LocalFinanceDimension5			is like FinanceDimension5
				LocalFinanceDimension6			is like FinanceDimension6
				LocalFinanceDimension7			is like FinanceDimension7
				LocalFinanceDimension8			is like FinanceDimension8
				LocalFinanceDimension9			is like FinanceDimension9
				LocalFinanceDimension10			is like FinanceDimension10
        	    UndistributedRetainedEarnings	is like GeneralLedgerChartAccount
        	    LocalEntityYearPeriod			is like GeneralLedgerCalendarPeriod
        	    LocalPeriodEndingDate			is Date


			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    Scenario  					= PrmFinanceEnterpriseGroup.ActualsScenario
				and	   AccountingEntity				= PrmAccountingEntity
				and    ChartSection					= 2						
				and    PeriodEndingDate 			within PrmDateRange
				and	  (!IsUREChartAccount)
				and	  (!GeneralLedgerTotal.Ledger.CloseLedger)
				and   (!GeneralLedgerTotal.GeneralLedgerChartAccount.AccountType.Memo))      

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmDateRange

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				ChartSection
				GeneralLedgerTotal.PrimaryLedger
				AccountingEntity
				GeneralLedgerTotal.System
    	    	GeneralLedgerTotal.AccountingUnit
        	    GeneralLedgerTotal.GeneralLedgerChartAccount
            	GeneralLedgerTotal.Project
				GeneralLedgerTotal.DimensionCode
				GeneralLedgerTotal.Currency
				PeriodEndingDate
				GeneralLedgerTotal.Ledger
				update stamp

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
				FunctionalAmountDebitTotal
				ReportAmount1DebitTotal
				FunctionalAmountCreditTotal
				ReportAmount1CreditTotal

			Action Rules
				Empty Set Rules

				Set Rules

				FinanceEnterpriseGroup Set Rules
					Entrance Rules
						LocalSystemAccount 				= SystemAccount.UndistributedRetainedEarnings 
						UndistributedRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
						constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
							"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"

				GeneralLedgerTotal.Ledger Set Rules
					Entrance Rules
						LocalPrimaryLedger				= GeneralLedgerTotal.PrimaryLedger
						LocalLedger						= GeneralLedgerTotal.Ledger
						LocalSetCurrencyCode			= GeneralLedgerTotal.Currency
		    	    	LocalAccountingUnit				= GeneralLedgerTotal.AccountingUnit
        			    LocalGeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
            			LocalProject					= GeneralLedgerTotal.Project
						LocalSystem						= GeneralLedgerTotal.System
						LocalEntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
						LocalFinanceDimension1			= FinanceDimension1
						LocalFinanceDimension2			= FinanceDimension2
						LocalFinanceDimension3			= FinanceDimension3
						LocalFinanceDimension4			= FinanceDimension4
						LocalFinanceDimension5			= FinanceDimension5
						LocalFinanceDimension6			= FinanceDimension6
						LocalFinanceDimension7			= FinanceDimension7
						LocalFinanceDimension8			= FinanceDimension8
						LocalFinanceDimension9			= FinanceDimension9
						LocalFinanceDimension10			= FinanceDimension10
						LocalPeriodEndingDate			= PeriodEndingDate

					Exit Rules
						LocalInstFinanceCodeBlock.FinanceDimension1		= FinanceDimension1
						LocalInstFinanceCodeBlock.FinanceDimension2		= FinanceDimension2
						LocalInstFinanceCodeBlock.FinanceDimension3		= FinanceDimension3
						LocalInstFinanceCodeBlock.FinanceDimension4		= FinanceDimension4
						LocalInstFinanceCodeBlock.FinanceDimension5		= FinanceDimension5
						LocalInstFinanceCodeBlock.FinanceDimension6		= FinanceDimension6
						LocalInstFinanceCodeBlock.FinanceDimension7		= FinanceDimension7
						LocalInstFinanceCodeBlock.FinanceDimension8		= FinanceDimension8
						LocalInstFinanceCodeBlock.FinanceDimension9		= FinanceDimension9
						LocalInstFinanceCodeBlock.FinanceDimension10	= FinanceDimension10

						if (PrmFinanceEnterpriseGroup.FinanceDimension1Required
						and PrmFinanceEnterpriseGroup.Dimension1ZoneBalancing)
							LocalInstFinanceDimension1				= LocalFinanceDimension1
							LocalInstFinanceCodeBlock.FinanceDimension1		= DerivedZoneFinanceDimension1
						LocalGeneralLedgerTotal.Ledger						= LocalLedger
						LocalGeneralLedgerTotal.System						= LocalSystem
						LocalGeneralLedgerTotal.Currency					= LocalSetCurrencyCode
						LocalGeneralLedgerTotal.EntityYearPeriod			= LocalEntityYearPeriod
						LocalGeneralLedgerTotal.AccountingUnit				= LocalAccountingUnit
						if (PrmFinanceEnterpriseGroup.AccountingUnitRequired
						and PrmAccountingEntity.AccountingUnitZoneBalancing)
				        	LocalInstAccountingEntity					= PrmAccountingEntity
							LocalInstAccountingUnit						= LocalAccountingUnit
							LocalGeneralLedgerTotal.AccountingUnit		= DerivedZoneAccountingUnit
						LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= UndistributedRetainedEarnings
						LocalGeneralLedgerTotal.Project						= LocalProject
						if (FinanceEnterpriseGroup.NoDimensionUREPosting)
							initialize LocalGeneralLedgerTotal.Project
							initialize LocalInstFinanceCodeBlock.FinanceDimension2
							initialize LocalInstFinanceCodeBlock.FinanceDimension3
							initialize LocalInstFinanceCodeBlock.FinanceDimension4
							initialize LocalInstFinanceCodeBlock.FinanceDimension5
							initialize LocalInstFinanceCodeBlock.FinanceDimension6
							initialize LocalInstFinanceCodeBlock.FinanceDimension7
							initialize LocalInstFinanceCodeBlock.FinanceDimension8
							initialize LocalInstFinanceCodeBlock.FinanceDimension9
							initialize LocalInstFinanceCodeBlock.FinanceDimension10
						LocalGeneralLedgerTotal.DimensionCode				= LocalInstFinanceCodeBlock.DimensionCode
						LocalGeneralLedgerTotal.PrimaryLedger				= LocalPrimaryLedger
						invoke PostTransactions LocalGeneralLedgerTotal 
							invoked.TransactionAmount	= TransactionAmountTotal
							invoked.FunctionalAmount	= FunctionalAmountTotal
							invoked.AlternateAmount		= AlternateAmountTotal
							invoked.AlternateAmount2	= AlternateAmount2Total
							invoked.AlternateAmount3	= AlternateAmount3Total
							if (FinanceEnterpriseGroup.NoDimensionUREPosting)
								invoked.ProjectAmount	= 0
							else
								invoked.ProjectAmount	= ProjectAmountTotal
							invoked.ReportAmount1		= ReportAmount1Total
							invoked.ReportAmount2		= ReportAmount2Total
							invoked.ReportAmount3		= ReportAmount3Total
							invoked.ReportAmount4		= ReportAmount4Total
							invoked.ReportAmount5		= ReportAmount5Total
							invoked.UnitsAmount			= UnitsAmountTotal
							invoked.FunctionalAmountDebit		= FunctionalAmountDebitTotal
							invoked.ReportAmount1Debit			= ReportAmount1DebitTotal
							invoked.FunctionalAmountCredit		= FunctionalAmountCreditTotal
							invoked.ReportAmount1Credit			= ReportAmount1CreditTotal
							invoked.FinanceDimension1	= LocalInstFinanceCodeBlock.FinanceDimension1
							invoked.FinanceDimension2	= LocalInstFinanceCodeBlock.FinanceDimension2
							invoked.FinanceDimension3	= LocalInstFinanceCodeBlock.FinanceDimension3
							invoked.FinanceDimension4	= LocalInstFinanceCodeBlock.FinanceDimension4
							invoked.FinanceDimension5	= LocalInstFinanceCodeBlock.FinanceDimension5
							invoked.FinanceDimension6	= LocalInstFinanceCodeBlock.FinanceDimension6
							invoked.FinanceDimension7	= LocalInstFinanceCodeBlock.FinanceDimension7
							invoked.FinanceDimension8	= LocalInstFinanceCodeBlock.FinanceDimension8
							invoked.FinanceDimension9	= LocalInstFinanceCodeBlock.FinanceDimension9
							invoked.FinanceDimension10	= LocalInstFinanceCodeBlock.FinanceDimension10							
							invoked.PeriodEndingDate	= LocalPeriodEndingDate
							invoked.IsUREChartAccount	= true

				Instance Rules
					TransactionAmountTotal				+= NetTransactionAmount
					FunctionalAmountTotal				+= NetFunctionalAmount
					AlternateAmountTotal				+= NetAlternateAmount
					AlternateAmount2Total				+= NetAlternateAmount2
					AlternateAmount3Total				+= NetAlternateAmount3
					ProjectAmountTotal					+= NetProjectAmount
					ReportAmount1Total					+= NetReportAmount1
					ReportAmount2Total					+= NetReportAmount2
					ReportAmount3Total					+= NetReportAmount3
					ReportAmount4Total					+= NetReportAmount4
					ReportAmount5Total					+= NetReportAmount5
					UnitsAmountTotal					+= NetUnitsAmount
					if(NetFunctionalAmount >= 0)
						FunctionalAmountDebitTotal		+= NetFunctionalAmount
					else
						FunctionalAmountCreditTotal		+= NetFunctionalAmount

					if(NetReportAmount1 >= 0)
						ReportAmount1DebitTotal			+= NetReportAmount1
					else
						ReportAmount1CreditTotal		+= NetReportAmount1
						
		FixDimensionCode is a Set Action
		    restricted
		    Parameters
		        PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
		            default label is "FinanceEnterpriseGroup"		            
				PrmStartingPeriod		  is a GeneralLedgerCalendarPeriod
					default label is "StartingPeriod"
		        PrmEndingPeriod			  is a GeneralLedgerCalendarPeriod
		        	default label is "EndingPeriod"
				PrmChartSection			  is a ChartSection
					default label is "ChartSection"
				PrmAccountingEntity		  is an AccountingEntity
					default label is "<actor.context.FinanceEnterpriseGroup.AccountingEntityLabel>"
		        PrmBusinessClassGroup     is a GeneralLedgerTotal group
		            default label is "CustomGroup"
		        PrmStartTime			  is TimeStamp
		        	default label is "StartTime"
		        PrmDetailTransactionThreshold is Numeric 2
		     		default label is "DetailTransactionThreshold"    
		    Parameter Rules
		        PrmFinanceEnterpriseGroup
		            required
		    	PrmDetailTransactionThreshold
		    		default to 5
		    Local Fields
		        LocalCodeBlockMismatch           is Boolean
		        LocalSummarizationWasIncorrect	 is Boolean
		        LocalCodeBlock                   is a FinanceCodeBlock
		        NewTotalsDimensionCode			 is like DimensionCode
		        LocalOldTransactionDimensionCode is like DimensionCode
		        LocalNewTransactionDimensionCode is like DimensionCode
		    	LocalJournalType				 is Numeric 1
		    	LocalDeleteCurrentRecord		 is Boolean
		    	LocalCorrectFinanceDimension1	 is like FinanceDimension1
		    	LocalCorrectFinanceDimension2	 is like FinanceDimension2
		    	LocalCorrectFinanceDimension3	 is like FinanceDimension3
		    	LocalCorrectFinanceDimension4	 is like FinanceDimension4
		    	LocalCorrectFinanceDimension5	 is like FinanceDimension5
		    	LocalCorrectFinanceDimension6	 is like FinanceDimension6
		    	LocalCorrectFinanceDimension7	 is like FinanceDimension7
		    	LocalCorrectFinanceDimension8	 is like FinanceDimension8
		    	LocalCorrectFinanceDimension9	 is like FinanceDimension9
		    	LocalCorrectFinanceDimension10	 is like FinanceDimension10
		    	
		    Instance Selection
		        where (((PrmAccountingEntity entered
		        and      AccountingEntity 		= PrmAccountingEntity)
		       	or		 PrmAccountingEntity 	= blank)
		       	and 	 GeneralLedgerTotal.EntityYearPeriod >= PrmStartingPeriod
		       	and    ((PrmEndingPeriod entered
		       	and      GeneralLedgerTotal.EntityYearPeriod <= PrmEndingPeriod
		       	or       GeneralLedgerTotal.EntityYearPeriod like "*000")
		       	or       PrmEndingPeriod		= blank)
		       	and    ((PrmChartSection entered
		       	and      ChartSection			= PrmChartSection)
		       	or		 PrmChartSection 		= blank)
		        and    	 GeneralLedgerTotal within PrmBusinessClassGroup
		        and      update stamp.timestamp < PrmStartTime)
		    
		    Action Rules
		        Instance Rules
		        	OldDimensionCode 							= GeneralLedgerTotal.DimensionCode
					if (instance count of GeneralLedgerTransactionsForOldDimensionCodeRel > 1000)
						invoke FixIndividualTotalDimensionCode in background
					else		        
			        	LocalDeleteCurrentRecord 					= false

			            LocalInstFinanceCodeBlock.Ledger			= GeneralLedgerTotal.Ledger
			            LocalInstFinanceCodeBlock.ToAccountingEntity  = AccountingEntity
			            LocalInstFinanceCodeBlock.AccountingUnit    = GeneralLedgerTotal.AccountingUnit
			            LocalInstFinanceCodeBlock.GeneralLedgerChartAccount = GeneralLedgerTotal.GeneralLedgerChartAccount
			            LocalInstFinanceCodeBlock.FinanceDimension1 = FinanceDimension1
			            LocalInstFinanceCodeBlock.FinanceDimension2 = FinanceDimension2
			            LocalInstFinanceCodeBlock.FinanceDimension3 = FinanceDimension3
			            LocalInstFinanceCodeBlock.FinanceDimension4 = FinanceDimension4
			            LocalInstFinanceCodeBlock.FinanceDimension5 = FinanceDimension5
			            LocalInstFinanceCodeBlock.FinanceDimension6 = FinanceDimension6
			            LocalInstFinanceCodeBlock.FinanceDimension7 = FinanceDimension7
			            LocalInstFinanceCodeBlock.FinanceDimension8 = FinanceDimension8
			            LocalInstFinanceCodeBlock.FinanceDimension9 = FinanceDimension9
			            LocalInstFinanceCodeBlock.FinanceDimension10 = FinanceDimension10
			            LocalInstFinanceCodeBlock.Project 			= GeneralLedgerTotal.Project

			            NewTotalsDimensionCode						= LocalInstFinanceCodeBlock.DimensionCode


						
						LocalGeneralLedgerTotal 					= GeneralLedgerTotal
			            LocalGeneralLedgerTotal.DimensionCode 		= NewTotalsDimensionCode
						if (OldDimensionCode != NewTotalsDimensionCode)
				            if (LocalGeneralLedgerTotal exists) 
								if ((FinanceDimension1 	!= LocalGeneralLedgerTotal.FinanceDimension1)
		                        or (FinanceDimension2 	!= LocalGeneralLedgerTotal.FinanceDimension2)
		                        or (FinanceDimension3 	!= LocalGeneralLedgerTotal.FinanceDimension3)
		                        or (FinanceDimension4 	!= LocalGeneralLedgerTotal.FinanceDimension4)
		                        or (FinanceDimension5 	!= LocalGeneralLedgerTotal.FinanceDimension5)
		                        or (FinanceDimension6 	!= LocalGeneralLedgerTotal.FinanceDimension6)
		                        or (FinanceDimension7 	!= LocalGeneralLedgerTotal.FinanceDimension7)
		                        or (FinanceDimension8 	!= LocalGeneralLedgerTotal.FinanceDimension8)
		                        or (FinanceDimension9 	!= LocalGeneralLedgerTotal.FinanceDimension9)
		                        or (FinanceDimension10 	!= LocalGeneralLedgerTotal.FinanceDimension10))
		                        	display "PROBLEM:CurrentTotalRecordIs<FinanceEnterpriseGroup>,<Scenario>,<AccountingEntity>,<GeneralLedgerTotal>WithDimensions<FinanceDimension1>,<FinanceDimension2>,<FinanceDimension3>,<FinanceDimension4>,<FinanceDimension5>,<FinanceDimension6>,<FinanceDimension7>,<FinanceDimension8>,<FinanceDimension9>,<FinanceDimension10>"
		                        	display "........TotalAlreadyExistsFor<FinanceEnterpriseGroup>,<Scenario>,<AccountingEntity>,<LocalGeneralLedgerTotal>NewDimensionCodeButWithDifferentDimensions<LocalGeneralLedgerTotal.FinanceDimension1>,<LocalGeneralLedgerTotal.FinanceDimension2>,<LocalGeneralLedgerTotal.FinanceDimension3>,<LocalGeneralLedgerTotal.FinanceDimension4>,<LocalGeneralLedgerTotal.FinanceDimension5>,<LocalGeneralLedgerTotal.FinanceDimension6>,<LocalGeneralLedgerTotal.FinanceDimension7>,<LocalGeneralLedgerTotal.FinanceDimension8>,<LocalGeneralLedgerTotal.FinanceDimension9>,<LocalGeneralLedgerTotal.FinanceDimension10>"


	                        if (GeneralLedgerTotal.EntityYearPeriod like "*000")		            
























			          			initialize NetTransactionAmount
			                    initialize NetFunctionalAmount
			                    initialize NetAlternateAmount
			                    initialize NetAlternateAmount2
			                    initialize NetAlternateAmount3
			                    initialize NetProjectAmount
			                    initialize NetReportAmount1
			                    initialize NetReportAmount2
			                    initialize NetReportAmount3
			                    initialize NetReportAmount4
			                    initialize NetReportAmount5
			                    initialize NetUnitsAmount	
			                    LocalDeleteCurrentRecord = true




						
						if (!GeneralLedgerTotal.EntityYearPeriod like "*000")					
		          			initialize NetTransactionAmount
		                    initialize NetFunctionalAmount
		                    initialize NetAlternateAmount
		                    initialize NetAlternateAmount2
		                    initialize NetAlternateAmount3
		                    initialize NetProjectAmount
		                    initialize NetReportAmount1
		                    initialize NetReportAmount2
		                    initialize NetReportAmount3
		                    initialize NetReportAmount4
		                    initialize NetReportAmount5
		                    initialize NetUnitsAmount			                    
			                LocalDeleteCurrentRecord = true
	
							if (Scenario = FinanceEnterpriseGroup.ActualsScenario)
					            for each GeneralLedgerTransactionsForOldDimensionCodeRel
					                LocalOldTransactionDimensionCode = each.DimensionCode
									LocalNewTransactionDimensionCode = each.GeneralLedgerTransaction.FinanceCodeBlock.DimensionCode
					                
					                if (LocalNewTransactionDimensionCode = OldDimensionCode)
					                	LocalDeleteCurrentRecord = false
					                
					                LocalCodeBlockMismatch 			 = false
					                
					                if ((each.FinanceCodeBlock.FinanceDimension1  != LocalInstFinanceCodeBlock.FinanceDimension1)
					                or  (each.FinanceCodeBlock.FinanceDimension2  != LocalInstFinanceCodeBlock.FinanceDimension2)
					                or  (each.FinanceCodeBlock.FinanceDimension3  != LocalInstFinanceCodeBlock.FinanceDimension3)
					                or  (each.FinanceCodeBlock.FinanceDimension4  != LocalInstFinanceCodeBlock.FinanceDimension4)
					                or  (each.FinanceCodeBlock.FinanceDimension5  != LocalInstFinanceCodeBlock.FinanceDimension5)
					                or  (each.FinanceCodeBlock.FinanceDimension6  != LocalInstFinanceCodeBlock.FinanceDimension6)
					                or  (each.FinanceCodeBlock.FinanceDimension7  != LocalInstFinanceCodeBlock.FinanceDimension7)
					                or  (each.FinanceCodeBlock.FinanceDimension8  != LocalInstFinanceCodeBlock.FinanceDimension8)
					                or  (each.FinanceCodeBlock.FinanceDimension9  != LocalInstFinanceCodeBlock.FinanceDimension9)
					                or  (each.FinanceCodeBlock.FinanceDimension10 != LocalInstFinanceCodeBlock.FinanceDimension10))

					                    LocalCodeBlockMismatch 	= true















									if (LocalNewTransactionDimensionCode     != OldDimensionCode)
					                    LocalGeneralLedgerTotal.DimensionCode = LocalNewTransactionDimensionCode
					                    invoke PostTransactionsNoRefresh LocalGeneralLedgerTotal
					                        invoked.TransactionAmount 	= each.TransactionAmount
					                        invoked.FunctionalAmount 	= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					                        invoked.AlternateAmount 	= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					                        invoked.AlternateAmount2 	= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					                        invoked.AlternateAmount3 	= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					                        invoked.ProjectAmount 		= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					                        invoked.ReportAmount1 		= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					                        invoked.ReportAmount2 		= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					                        invoked.ReportAmount3 		= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					                        invoked.ReportAmount4 		= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					                        invoked.ReportAmount5 		= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					                        invoked.UnitsAmount 		= each.UnitsAmount
					                        invoked.FinanceDimension1 	= each.FinanceCodeBlock.FinanceDimension1
					                        invoked.FinanceDimension2 	= each.FinanceCodeBlock.FinanceDimension2
					                        invoked.FinanceDimension3 	= each.FinanceCodeBlock.FinanceDimension3
					                        invoked.FinanceDimension4 	= each.FinanceCodeBlock.FinanceDimension4
					                        invoked.FinanceDimension5 	= each.FinanceCodeBlock.FinanceDimension5
					                        invoked.FinanceDimension6 	= each.FinanceCodeBlock.FinanceDimension6
					                        invoked.FinanceDimension7 	= each.FinanceCodeBlock.FinanceDimension7
					                        invoked.FinanceDimension8 	= each.FinanceCodeBlock.FinanceDimension8
					                        invoked.FinanceDimension9 	= each.FinanceCodeBlock.FinanceDimension9
					                        invoked.FinanceDimension10 	= each.FinanceCodeBlock.FinanceDimension10
					                        invoked.PeriodEndingDate 	= each.GeneralLedgerCalendarPeriod.Date
					                else
					                    NetTransactionAmount 	+= each.TransactionAmount
					                    NetFunctionalAmount 	+= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					                    NetAlternateAmount 		+= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					                    NetAlternateAmount2 	+= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					                    NetAlternateAmount3 	+= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					                    NetProjectAmount 		+= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					                    NetReportAmount1 		+= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					                    NetReportAmount2 		+= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					                    NetReportAmount3 		+= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					                    NetReportAmount4 		+= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					                    NetReportAmount5 		+= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					                    NetUnitsAmount 			+= each.UnitsAmount			                
					                	LocalCorrectFinanceDimension1  = each.FinanceCodeBlock.FinanceDimension1
					                	LocalCorrectFinanceDimension2  = each.FinanceCodeBlock.FinanceDimension2
					                	LocalCorrectFinanceDimension3  = each.FinanceCodeBlock.FinanceDimension3
					                	LocalCorrectFinanceDimension4  = each.FinanceCodeBlock.FinanceDimension4
					                	LocalCorrectFinanceDimension5  = each.FinanceCodeBlock.FinanceDimension5
					                	LocalCorrectFinanceDimension6  = each.FinanceCodeBlock.FinanceDimension6
					                	LocalCorrectFinanceDimension7  = each.FinanceCodeBlock.FinanceDimension7
					                	LocalCorrectFinanceDimension8  = each.FinanceCodeBlock.FinanceDimension8
					                	LocalCorrectFinanceDimension9  = each.FinanceCodeBlock.FinanceDimension9
					                	LocalCorrectFinanceDimension10 = each.FinanceCodeBlock.FinanceDimension10
					                	
					                LocalCodeBlock 					= each.FinanceCodeBlock
									LocalJournalType				= each.GeneralLedgerJournalControl.JournalType
									LocalSummarizationWasIncorrect	= false
									if (instance count of each.GLTransactionDetailExistsRel > PrmDetailTransactionThreshold)
					                	invoke FixDimensionCodeForTransaction GLTransactionDetail in background
					                		invoked.PrmBusinessObjectReference = reference to each
						                    invoked.PrmOldDimensionCode 	   = LocalOldTransactionDimensionCode
						                    invoked.PrmNewDimensionCode 	   = LocalNewTransactionDimensionCode
						                    invoked.PrmJournalType			   = LocalJournalType
						                    invoked.PrmCodeBlockMismatch       = LocalCodeBlockMismatch
									else
						                for each each.GLTransactionDetailExistsRel
						                    if (each.FinanceCodeBlock != LocalCodeBlock
						                    and LocalJournalType < 2)
												LocalSummarizationWasIncorrect = true
						                    if (each.DimensionCode != each.FinanceCodeBlock.DimensionCode)
						                    	invoke UpdateDimensionCode each
	
									if (LocalOldTransactionDimensionCode != LocalNewTransactionDimensionCode)
										invoke UpdateDimensionCode each		










									if (LocalCodeBlockMismatch
									or  LocalSummarizationWasIncorrect)
						                if (!each.GLTransactionWithInvalidDimensionCode set exists)
						                    invoke Create each.GLTransactionWithInvalidDimensionCode set
						                        invoked.OldDimensionCode 		  = LocalOldTransactionDimensionCode
						                        invoked.NewDimensionCode 		  = LocalNewTransactionDimensionCode
						                        if (LocalCodeBlockMismatch)
						                            invoked.TransactionStatus 	  = 1
						                        invoked.SummarizationWasIncorrect = LocalSummarizationWasIncorrect
							
						if (LocalDeleteCurrentRecord
						and NetTransactionAmount 	= 0
					    and NetFunctionalAmount  	= 0
					    and NetAlternateAmount 		= 0
					    and NetAlternateAmount2 	= 0
					    and NetAlternateAmount3 	= 0
					    and NetProjectAmount 		= 0
					    and NetReportAmount1 		= 0
					    and NetReportAmount2 		= 0
					    and NetReportAmount3 		= 0
					    and NetReportAmount4 		= 0
					    and NetReportAmount5 		= 0
					    and NetUnitsAmount 			= 0)

			                invoke Delete
			            else
			            	FinanceDimension1  = LocalCorrectFinanceDimension1
			            	FinanceDimension2  = LocalCorrectFinanceDimension2
			            	FinanceDimension3  = LocalCorrectFinanceDimension3
			            	FinanceDimension4  = LocalCorrectFinanceDimension4
			            	FinanceDimension5  = LocalCorrectFinanceDimension5
			            	FinanceDimension6  = LocalCorrectFinanceDimension6
			            	FinanceDimension7  = LocalCorrectFinanceDimension7
			            	FinanceDimension8  = LocalCorrectFinanceDimension8
			            	FinanceDimension9  = LocalCorrectFinanceDimension9
			            	FinanceDimension10  = LocalCorrectFinanceDimension10


			                			                            
			            commit transaction

		FixIndividualTotalDimensionCode is an Instance Action
			restricted
		    Local Fields
		        LocalCodeBlockMismatch           is Boolean
		        LocalSummarizationWasIncorrect	 is Boolean
		        LocalCodeBlock                   is a FinanceCodeBlock
		        NewTotalsDimensionCode			 is like DimensionCode
		        LocalOldTransactionDimensionCode is like DimensionCode
		        LocalNewTransactionDimensionCode is like DimensionCode
		    	LocalJournalType				 is Numeric 1
		    	LocalDeleteCurrentRecord		 is Boolean
		    	LocalCorrectFinanceDimension1	 is like FinanceDimension1
		    	LocalCorrectFinanceDimension2	 is like FinanceDimension2
		    	LocalCorrectFinanceDimension3	 is like FinanceDimension3
		    	LocalCorrectFinanceDimension4	 is like FinanceDimension4
		    	LocalCorrectFinanceDimension5	 is like FinanceDimension5
		    	LocalCorrectFinanceDimension6	 is like FinanceDimension6
		    	LocalCorrectFinanceDimension7	 is like FinanceDimension7
		    	LocalCorrectFinanceDimension8	 is like FinanceDimension8
		    	LocalCorrectFinanceDimension9	 is like FinanceDimension9
		    	LocalCorrectFinanceDimension10	 is like FinanceDimension10
		    	RecordCount						 is Numeric 3
		    	
		    Action Rules
	        	LocalDeleteCurrentRecord 					= false
	            OldDimensionCode 							= GeneralLedgerTotal.DimensionCode

	            LocalInstFinanceCodeBlock.Ledger			= GeneralLedgerTotal.Ledger
	            LocalInstFinanceCodeBlock.ToAccountingEntity  = AccountingEntity
	            LocalInstFinanceCodeBlock.AccountingUnit    = GeneralLedgerTotal.AccountingUnit
	            LocalInstFinanceCodeBlock.GeneralLedgerChartAccount = GeneralLedgerTotal.GeneralLedgerChartAccount
	            LocalInstFinanceCodeBlock.FinanceDimension1 = FinanceDimension1
	            LocalInstFinanceCodeBlock.FinanceDimension2 = FinanceDimension2
	            LocalInstFinanceCodeBlock.FinanceDimension3 = FinanceDimension3
	            LocalInstFinanceCodeBlock.FinanceDimension4 = FinanceDimension4
	            LocalInstFinanceCodeBlock.FinanceDimension5 = FinanceDimension5
	            LocalInstFinanceCodeBlock.FinanceDimension6 = FinanceDimension6
	            LocalInstFinanceCodeBlock.FinanceDimension7 = FinanceDimension7
	            LocalInstFinanceCodeBlock.FinanceDimension8 = FinanceDimension8
	            LocalInstFinanceCodeBlock.FinanceDimension9 = FinanceDimension9
	            LocalInstFinanceCodeBlock.FinanceDimension10 = FinanceDimension10
	            LocalInstFinanceCodeBlock.Project 			= GeneralLedgerTotal.Project

	            NewTotalsDimensionCode						= LocalInstFinanceCodeBlock.DimensionCode


				
				LocalGeneralLedgerTotal 					= GeneralLedgerTotal
	            LocalGeneralLedgerTotal.DimensionCode 		= NewTotalsDimensionCode
				if (OldDimensionCode != NewTotalsDimensionCode)
		            if (LocalGeneralLedgerTotal exists) 
						if ((FinanceDimension1 	!= LocalGeneralLedgerTotal.FinanceDimension1)
                        or (FinanceDimension2 	!= LocalGeneralLedgerTotal.FinanceDimension2)
                        or (FinanceDimension3 	!= LocalGeneralLedgerTotal.FinanceDimension3)
                        or (FinanceDimension4 	!= LocalGeneralLedgerTotal.FinanceDimension4)
                        or (FinanceDimension5 	!= LocalGeneralLedgerTotal.FinanceDimension5)
                        or (FinanceDimension6 	!= LocalGeneralLedgerTotal.FinanceDimension6)
                        or (FinanceDimension7 	!= LocalGeneralLedgerTotal.FinanceDimension7)
                        or (FinanceDimension8 	!= LocalGeneralLedgerTotal.FinanceDimension8)
                        or (FinanceDimension9 	!= LocalGeneralLedgerTotal.FinanceDimension9)
                        or (FinanceDimension10 	!= LocalGeneralLedgerTotal.FinanceDimension10))
                        	display "PROBLEM:CurrentTotalRecordIs<FinanceEnterpriseGroup>,<Scenario>,<AccountingEntity>,<GeneralLedgerTotal>WithDimensions<FinanceDimension1>,<FinanceDimension2>,<FinanceDimension3>,<FinanceDimension4>,<FinanceDimension5>,<FinanceDimension6>,<FinanceDimension7>,<FinanceDimension8>,<FinanceDimension9>,<FinanceDimension10>"
                        	display "........TotalAlreadyExistsFor<FinanceEnterpriseGroup>,<Scenario>,<AccountingEntity>,<LocalGeneralLedgerTotal>NewDimensionCodeButWithDifferentDimensions<LocalGeneralLedgerTotal.FinanceDimension1>,<LocalGeneralLedgerTotal.FinanceDimension2>,<LocalGeneralLedgerTotal.FinanceDimension3>,<LocalGeneralLedgerTotal.FinanceDimension4>,<LocalGeneralLedgerTotal.FinanceDimension5>,<LocalGeneralLedgerTotal.FinanceDimension6>,<LocalGeneralLedgerTotal.FinanceDimension7>,<LocalGeneralLedgerTotal.FinanceDimension8>,<LocalGeneralLedgerTotal.FinanceDimension9>,<LocalGeneralLedgerTotal.FinanceDimension10>"


                    if (GeneralLedgerTotal.EntityYearPeriod like "*000")		            
























	          			initialize NetTransactionAmount
	                    initialize NetFunctionalAmount
	                    initialize NetAlternateAmount
	                    initialize NetAlternateAmount2
	                    initialize NetAlternateAmount3
	                    initialize NetProjectAmount
	                    initialize NetReportAmount1
	                    initialize NetReportAmount2
	                    initialize NetReportAmount3
	                    initialize NetReportAmount4
	                    initialize NetReportAmount5
	                    initialize NetUnitsAmount	
	                    LocalDeleteCurrentRecord = true




				
				if (!GeneralLedgerTotal.EntityYearPeriod like "*000")					
          			initialize NetTransactionAmount
                    initialize NetFunctionalAmount
                    initialize NetAlternateAmount
                    initialize NetAlternateAmount2
                    initialize NetAlternateAmount3
                    initialize NetProjectAmount
                    initialize NetReportAmount1
                    initialize NetReportAmount2
                    initialize NetReportAmount3
                    initialize NetReportAmount4
                    initialize NetReportAmount5
                    initialize NetUnitsAmount			                    
	                LocalDeleteCurrentRecord = true

					if (Scenario = FinanceEnterpriseGroup.ActualsScenario)
			            for each GeneralLedgerTransactionsForOldDimensionCodeRel
			                LocalOldTransactionDimensionCode = each.DimensionCode
							LocalNewTransactionDimensionCode = each.GeneralLedgerTransaction.FinanceCodeBlock.DimensionCode
			                
			                if (LocalNewTransactionDimensionCode = OldDimensionCode)
			                	LocalDeleteCurrentRecord = false
			                
			                LocalCodeBlockMismatch 			 = false
			                
			                if ((each.FinanceCodeBlock.FinanceDimension1  != LocalInstFinanceCodeBlock.FinanceDimension1)
			                or  (each.FinanceCodeBlock.FinanceDimension2  != LocalInstFinanceCodeBlock.FinanceDimension2)
			                or  (each.FinanceCodeBlock.FinanceDimension3  != LocalInstFinanceCodeBlock.FinanceDimension3)
			                or  (each.FinanceCodeBlock.FinanceDimension4  != LocalInstFinanceCodeBlock.FinanceDimension4)
			                or  (each.FinanceCodeBlock.FinanceDimension5  != LocalInstFinanceCodeBlock.FinanceDimension5)
			                or  (each.FinanceCodeBlock.FinanceDimension6  != LocalInstFinanceCodeBlock.FinanceDimension6)
			                or  (each.FinanceCodeBlock.FinanceDimension7  != LocalInstFinanceCodeBlock.FinanceDimension7)
			                or  (each.FinanceCodeBlock.FinanceDimension8  != LocalInstFinanceCodeBlock.FinanceDimension8)
			                or  (each.FinanceCodeBlock.FinanceDimension9  != LocalInstFinanceCodeBlock.FinanceDimension9)
			                or  (each.FinanceCodeBlock.FinanceDimension10 != LocalInstFinanceCodeBlock.FinanceDimension10))

			                    LocalCodeBlockMismatch 	= true















							if (LocalNewTransactionDimensionCode     != OldDimensionCode)
			                    LocalGeneralLedgerTotal.DimensionCode = LocalNewTransactionDimensionCode
			                    invoke PostTransactionsNoRefresh LocalGeneralLedgerTotal
			                        invoked.TransactionAmount 	= each.TransactionAmount
			                        invoked.FunctionalAmount 	= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			                        invoked.AlternateAmount 	= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
			                        invoked.AlternateAmount2 	= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
			                        invoked.AlternateAmount3 	= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
			                        invoked.ProjectAmount 		= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			                        invoked.ReportAmount1 		= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			                        invoked.ReportAmount2 		= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
			                        invoked.ReportAmount3 		= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
			                        invoked.ReportAmount4 		= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
			                        invoked.ReportAmount5 		= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
			                        invoked.UnitsAmount 		= each.UnitsAmount
			                        invoked.FinanceDimension1 	= each.FinanceCodeBlock.FinanceDimension1
			                        invoked.FinanceDimension2 	= each.FinanceCodeBlock.FinanceDimension2
			                        invoked.FinanceDimension3 	= each.FinanceCodeBlock.FinanceDimension3
			                        invoked.FinanceDimension4 	= each.FinanceCodeBlock.FinanceDimension4
			                        invoked.FinanceDimension5 	= each.FinanceCodeBlock.FinanceDimension5
			                        invoked.FinanceDimension6 	= each.FinanceCodeBlock.FinanceDimension6
			                        invoked.FinanceDimension7 	= each.FinanceCodeBlock.FinanceDimension7
			                        invoked.FinanceDimension8 	= each.FinanceCodeBlock.FinanceDimension8
			                        invoked.FinanceDimension9 	= each.FinanceCodeBlock.FinanceDimension9
			                        invoked.FinanceDimension10 	= each.FinanceCodeBlock.FinanceDimension10
			                        invoked.PeriodEndingDate 	= each.GeneralLedgerCalendarPeriod.Date
			                else
			                    NetTransactionAmount 	+= each.TransactionAmount
			                    NetFunctionalAmount 	+= each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			                    NetAlternateAmount 		+= each.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
			                    NetAlternateAmount2 	+= each.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
			                    NetAlternateAmount3 	+= each.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
			                    NetProjectAmount 		+= each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			                    NetReportAmount1 		+= each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			                    NetReportAmount2 		+= each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
			                    NetReportAmount3 		+= each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
			                    NetReportAmount4 		+= each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
			                    NetReportAmount5 		+= each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
			                    NetUnitsAmount 			+= each.UnitsAmount			                
			                	LocalCorrectFinanceDimension1  = each.FinanceCodeBlock.FinanceDimension1
			                	LocalCorrectFinanceDimension2  = each.FinanceCodeBlock.FinanceDimension2
			                	LocalCorrectFinanceDimension3  = each.FinanceCodeBlock.FinanceDimension3
			                	LocalCorrectFinanceDimension4  = each.FinanceCodeBlock.FinanceDimension4
			                	LocalCorrectFinanceDimension5  = each.FinanceCodeBlock.FinanceDimension5
			                	LocalCorrectFinanceDimension6  = each.FinanceCodeBlock.FinanceDimension6
			                	LocalCorrectFinanceDimension7  = each.FinanceCodeBlock.FinanceDimension7
			                	LocalCorrectFinanceDimension8  = each.FinanceCodeBlock.FinanceDimension8
			                	LocalCorrectFinanceDimension9  = each.FinanceCodeBlock.FinanceDimension9
			                	LocalCorrectFinanceDimension10 = each.FinanceCodeBlock.FinanceDimension10
			                	
			                LocalCodeBlock 					= each.FinanceCodeBlock
							LocalJournalType				= each.GeneralLedgerJournalControl.JournalType
							LocalSummarizationWasIncorrect	= false
			                for each each.GLTransactionDetailExistsRel
			                    if (each.FinanceCodeBlock != LocalCodeBlock
			                    and LocalJournalType < 2)
									LocalSummarizationWasIncorrect = true
			                    if (each.DimensionCode != each.FinanceCodeBlock.DimensionCode)
			                    	invoke UpdateDimensionCode each
				                    RecordCount += 1
				                    if (RecordCount > 100)
				                    	initialize RecordCount
				                    	commit transaction

							if (LocalOldTransactionDimensionCode != LocalNewTransactionDimensionCode)
								invoke UpdateDimensionCode each
								RecordCount += 1		










							if (LocalCodeBlockMismatch
							or  LocalSummarizationWasIncorrect)
				                if (!each.GLTransactionWithInvalidDimensionCode set exists)
				                    invoke Create each.GLTransactionWithInvalidDimensionCode set
				                        invoked.OldDimensionCode 		  = LocalOldTransactionDimensionCode
				                        invoked.NewDimensionCode 		  = LocalNewTransactionDimensionCode
				                        if (LocalCodeBlockMismatch)
				                            invoked.TransactionStatus 	  = 1
				                        invoked.SummarizationWasIncorrect = LocalSummarizationWasIncorrect
			                		RecordCount += 1
	                		if (RecordCount > 100)
								initialize RecordCount
	                    		commit transaction
			                    								
				if (LocalDeleteCurrentRecord
				and NetTransactionAmount 	= 0
			    and NetFunctionalAmount  	= 0
			    and NetAlternateAmount 		= 0
			    and NetAlternateAmount2 	= 0
			    and NetAlternateAmount3 	= 0
			    and NetProjectAmount 		= 0
			    and NetReportAmount1 		= 0
			    and NetReportAmount2 		= 0
			    and NetReportAmount3 		= 0
			    and NetReportAmount4 		= 0
			    and NetReportAmount5 		= 0
			    and NetUnitsAmount 			= 0)

	                invoke Delete
	            else
	            	FinanceDimension1  = LocalCorrectFinanceDimension1
	            	FinanceDimension2  = LocalCorrectFinanceDimension2
	            	FinanceDimension3  = LocalCorrectFinanceDimension3
	            	FinanceDimension4  = LocalCorrectFinanceDimension4
	            	FinanceDimension5  = LocalCorrectFinanceDimension5
	            	FinanceDimension6  = LocalCorrectFinanceDimension6
	            	FinanceDimension7  = LocalCorrectFinanceDimension7
	            	FinanceDimension8  = LocalCorrectFinanceDimension8
	            	FinanceDimension9  = LocalCorrectFinanceDimension9
	            	FinanceDimension10  = LocalCorrectFinanceDimension10

		CreateYearEndReport is a Set Action					
			restricted			
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmReportingBasisYear			is a ReportingBasisYear
					default label is "ReportingBasisYear"
				PrmAccountingEntity				is a AccountingEntity	
					default label is "AccountingEntity"
				PrmReportingBasisLedger			is a Ledger
					default label is "Ledger"
				PrmEntityYearPeriod				is a GeneralLedgerCalendarPeriod
					default label is "EntiyYearPeriod"
				PrmProfitAndLossReport			is Boolean
					default label is "ProfitAndLossReport"
				PrmBalanceSheetClosing			is Boolean
					default label is "BalanceSheetClosing"
				PrmBalanceSheetOpening			is Boolean
					default label is "BalanceSheetOpening"	
				PrmEndingBalancePeriod			is a GeneralLedgerCalendarPeriod
					default label is "EndingBalancePeriod"
			Local Fields		
				LocalYearEndJournalView					is a ReportingBasisYearEndJournal view
				LocalAsyncId							is an AsyncActionRequest														
			Instance Selection
				where (FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
				and Scenario							= PrmFinanceEnterpriseGroup.ActualsScenario
				and AccountingEntity					= PrmAccountingEntity					
				and GeneralLedgerTotal.Ledger			= PrmReportingBasisLedger											
				and GeneralLedgerTotal.EntityYearPeriod = PrmEntityYearPeriod 
				and	GeneralLedgerTotal.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
			Rule Blocks
				YearEndReportRule
					if (YearEndJournalPerEntityRel not exists)	
						invoke Create ReportingBasisYearEndJournal
							assign result to LocalYearEndJournalView
							invoked.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup			
							invoked.ReportingBasis								= LocalReportingBasis
							invoked.ReportingBasisYear							= LocalYearEndReportingBasisYear
							invoked.AccountingEntity							= LocalAccountingEntity
						    invoked.ReportingBasisYearEndJournal				= LocalYearEndReportType	
							invoked.GeneralLedgerCalendarPeriod					= LocalYearEndCalendarPeriod
							invoked.Description 								= DerivedYearEndJournalDescription						    								
							if (not LocalYearEndReportType.BalanceSheetOpening)
								invoked.GeneralLedgerClosePeriod				= LocalYearEndCalendarPeriod		
						
					LocalYearEndGLTotalLedger				= GeneralLedgerTotal.PrimaryLedger
					LocalYearEndSystem						= GeneralLedgerTotal.System
					LocalYearEndCurrency					= GeneralLedgerTotal.Currency
					LocalYearEndAccountingUnit				= GeneralLedgerTotal.AccountingUnit
					LocalYearEndProject						= GeneralLedgerTotal.Project
					LocalYearEndDimensionCode				= GeneralLedgerTotal.DimensionCode
					LocalYearEndGeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount					
					
					if (GeneralLedgerTotalYearEndJournalTransactionRel exists)
						if (LocalYearEndReportType.BalanceSheetClosing
						or (LocalYearEndReportType.ProfitAndLoss										
						and  not GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.RetainedEarnings))	
							invoke Update GeneralLedgerTotalYearEndJournalTransactionRel																		
								invoked.NetTransactionAmount	+= NetTransactionAmount * -1
								invoked.NetFunctionalAmount		+= NetFunctionalAmount * -1		
								invoked.NetAlternateAmount		+= NetAlternateAmount  * -1	 	
								invoked.NetAlternateAmount2		+= NetAlternateAmount2 * -1	
								invoked.NetAlternateAmount3		+= NetAlternateAmount3 * -1	
								invoked.NetProjectAmount		+= NetProjectAmount	 * -1	
								invoked.NetReportAmount1		+= NetReportAmount1 * -1   	
								invoked.NetReportAmount2		+= NetReportAmount2 * -1   	
								invoked.NetReportAmount3		+= NetReportAmount3 * -1  	
								invoked.NetReportAmount4		+= NetReportAmount4 * -1   	
								invoked.NetReportAmount5		+= NetReportAmount5 * -1   	
						else			
							invoke Update GeneralLedgerTotalYearEndJournalTransactionRel																		
								invoked.NetTransactionAmount	+= NetTransactionAmount
								invoked.NetFunctionalAmount		+= NetFunctionalAmount	
								invoked.NetAlternateAmount		+= NetAlternateAmount 	
								invoked.NetAlternateAmount2		+= NetAlternateAmount2	
								invoked.NetAlternateAmount3		+= NetAlternateAmount3	
								invoked.NetProjectAmount		+= NetProjectAmount	
								invoked.NetReportAmount1		+= NetReportAmount1   	
								invoked.NetReportAmount2		+= NetReportAmount2   	
								invoked.NetReportAmount3		+= NetReportAmount3  	
								invoked.NetReportAmount4		+= NetReportAmount4   	
								invoked.NetReportAmount5		+= NetReportAmount5   	
					else	
						if (YearEndJournalPerEntityRel exists)			
							LocalYearEndJournalView			=	YearEndJournalPerEntityRel.ReportingBasisYearEndJournal

						invoke Create ReportingBasisYearEndJournalTransaction
							invoked.FinanceEnterpriseGroup												= LocalYearEndJournalView.FinanceEnterpriseGroup
							invoked.ReportingBasis														= LocalYearEndJournalView.ReportingBasisYear.ReportingBasis
							invoked.ReportingBasisYear													= LocalYearEndJournalView.ReportingBasisYear
							invoked.ReportingBasisYearEndJournal										= LocalYearEndJournalView.ReportingBasisYearEndJournal 				
							invoked.AccountingEntity													= LocalAccountingEntity
							invoked.ReportingBasisYearEndJournalTransaction.EntityYearPeriod			= LocalYearEndCalendarPeriod	
							invoked.ReportingBasisYearEndJournalTransaction.PrimaryLedger				= GeneralLedgerTotal.PrimaryLedger
							invoked.ReportingBasisYearEndJournalTransaction.System						= GeneralLedgerTotal.System
							invoked.ReportingBasisYearEndJournalTransaction.Currency					= GeneralLedgerTotal.Currency
							invoked.ReportingBasisYearEndJournalTransaction.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
							invoked.ReportingBasisYearEndJournalTransaction.Project						= GeneralLedgerTotal.Project
							invoked.ReportingBasisYearEndJournalTransaction.DimensionCode				= GeneralLedgerTotal.DimensionCode		
							invoked.ReportingBasisYearEndJournalTransaction.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.ReportingBasisYearEndJournalTransaction.Ledger						= LocalYearEndReportingBasisLedger
							invoked.ReportType															= LocalYearEndReportType						
							invoked.FinanceDimension1													= FinanceDimension1
							invoked.FinanceDimension2													= FinanceDimension2
							invoked.FinanceDimension3													= FinanceDimension3
							invoked.FinanceDimension4													= FinanceDimension4
							invoked.FinanceDimension5													= FinanceDimension5
							invoked.FinanceDimension6													= FinanceDimension6
							invoked.FinanceDimension7													= FinanceDimension7
							invoked.FinanceDimension8													= FinanceDimension8
							invoked.FinanceDimension9													= FinanceDimension9
							invoked.FinanceDimension10													= FinanceDimension10
							if (LocalYearEndReportType.BalanceSheetClosing
							or (LocalYearEndReportType.ProfitAndLoss										
							and  not GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.RetainedEarnings))	
								invoked.NetTransactionAmount	= NetTransactionAmount * -1
								invoked.NetFunctionalAmount		= NetFunctionalAmount * -1		
								invoked.NetAlternateAmount		= NetAlternateAmount  * -1	 	
								invoked.NetAlternateAmount2		= NetAlternateAmount2 * -1	
								invoked.NetAlternateAmount3		= NetAlternateAmount3 * -1	
								invoked.NetProjectAmount		= NetProjectAmount	 * -1	
								invoked.NetReportAmount1		= NetReportAmount1 * -1   	
								invoked.NetReportAmount2		= NetReportAmount2 * -1   	
								invoked.NetReportAmount3		= NetReportAmount3 * -1  	
								invoked.NetReportAmount4		= NetReportAmount4 * -1   	
								invoked.NetReportAmount5		= NetReportAmount5 * -1   	
							else			
								invoked.NetTransactionAmount	= NetTransactionAmount
								invoked.NetFunctionalAmount		= NetFunctionalAmount	
								invoked.NetAlternateAmount		= NetAlternateAmount 	
								invoked.NetAlternateAmount2		= NetAlternateAmount2	
								invoked.NetAlternateAmount3		= NetAlternateAmount3	
								invoked.NetProjectAmount		= NetProjectAmount	
								invoked.NetReportAmount1		= NetReportAmount1   	
								invoked.NetReportAmount2		= NetReportAmount2   	
								invoked.NetReportAmount3		= NetReportAmount3  	
								invoked.NetReportAmount4		= NetReportAmount4   	
								invoked.NetReportAmount5		= NetReportAmount5    		

					if (LocalYearEndReportType.BalanceSheetClosing
					or (LocalYearEndReportType.ProfitAndLoss										
					and  not GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.RetainedEarnings))	
						invoke Update YearEndJournalPerEntityRel
							if (NetFunctionalAmount >= 0)
								invoked.FunctionalCreditAmount += NetFunctionalAmount * -1
							else
								invoked.FunctionalDebitAmount  += NetFunctionalAmount * -1
					else
						invoke Update YearEndJournalPerEntityRel
							if (NetFunctionalAmount >= 0)				
								invoked.FunctionalDebitAmount  += NetFunctionalAmount
							else
								invoked.FunctionalCreditAmount += NetFunctionalAmount	
			Action Rules
				Set Rules
		        	Exit Rules
		        		if (PrmFinanceEnterpriseGroup.BODTrigger)
				        	LocalYearEndJournalYear 		= PrmReportingBasisYear + 1
				        	LocalFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				        	LocalReportingBasis				= PrmReportingBasis
				        	LocalAccountingEntity       	= PrmAccountingEntity
							invoke YearEndSSJEBODTrigger YearEndJournalPerEntityBODRel
				Instance Rules	
					LocalFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
					LocalReportingBasis					= PrmReportingBasis
					LocalAccountingEntity				= PrmAccountingEntity					
					LocalYearEndReportingBasisLedger	= PrmReportingBasisLedger

	            	if (PrmProfitAndLossReport
	            	and GeneralLedgerTotal.GeneralLedgerChartAccount.SystemAccount.RetainedEarnings)
	            		LocalYearEndReportType			= LocalYearEndReportType.ProfitAndLoss
	            		LocalYearEndCalendarPeriod		= PrmEndingBalancePeriod
						LocalYearEndReportingBasisYear	= PrmReportingBasisYear		            		
	            		include YearEndReportRule		
	            		
	            	if (PrmBalanceSheetClosing)
	            		LocalYearEndReportType			= LocalYearEndReportType.BalanceSheetClosing
	            		LocalYearEndCalendarPeriod		= PrmEndingBalancePeriod
	            		LocalYearEndReportingBasisYear	= PrmReportingBasisYear
						include YearEndReportRule		            	
	            	
	            	if (PrmBalanceSheetOpening)		
	            		LocalYearEndReportType			= LocalYearEndReportType.BalanceSheetOpening
	            		LocalYearEndCalendarPeriod		= PrmEntityYearPeriod
						LocalYearEndReportingBasisYear	= PrmReportingBasisYear + 1	            		
	            		include YearEndReportRule	

		CreateYearEndForCloseToAccount  is a Set Action			
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmYearEndLedger				is a Ledger
				PrmBeginningBalancePeriod		is a GeneralLedgerCalendarPeriod
				PrmEndingBalancePeriod			is a GeneralLedgerCalendarPeriod
				PrmAccountingUnit				is a AccountingUnit
				PrmProject						is a Project
				PrmDimensionCode				is a DimensionCode
				PrmCurrency						is a Currency	
				PrmGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
				PrmReportingBasis				is a ReportingBasis
				PrmReportingBasisYear			is a ReportingBasisYear
				PrmReportingBasisYearEndJournal is a ReportingBasisYearEndJournal
				PrmReportingBasisLedger			is a Ledger
			Instance Selection
				where (FinanceEnterpriseGroup				  = PrmFinanceEnterpriseGroup
				and Scenario								  = PrmFinanceEnterpriseGroup.ActualsScenario
				and AccountingEntity						  = PrmAccountingEntity	
				and GeneralLedgerTotal.Ledger				  = PrmYearEndLedger							
				and (GeneralLedgerTotal.EntityYearPeriod 	 >= PrmBeginningBalancePeriod
				and  GeneralLedgerTotal.EntityYearPeriod 	 <= PrmEndingBalancePeriod)
				and GeneralLedgerTotal.GeneralLedgerChartAccount = PrmGeneralLedgerChartAccount
				and GeneralLedgerTotal.AccountingUnit		  = PrmAccountingUnit
				and GeneralLedgerTotal.Project				  = PrmProject
				and GeneralLedgerTotal.DimensionCode		  = PrmDimensionCode
				and GeneralLedgerTotal.Currency			 	  = PrmCurrency
				and ChartSection.IncomeStatement)							
			Action Rules
				Instance Rules

																
		CreateYearEndForIncomeStatement	is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmLedger						is a Ledger								
				PrmDateRange  					is a DateRange
				PrmReportingBasis				is a ReportingBasis
				PrmReportingBasisYear			is a ReportingBasisYear
				PrmReportingBasisLedger			is a Ledger	
				PrmEndingBalancePeriod			is a GeneralLedgerCalendarPeriod
			Local Fields
				LocalNetFunctionalAmount        is like TotalAmount
				LocalYearEndJournalView			is a ReportingBasisYearEndJournal view
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup 					
				and	Scenario					= PrmFinanceEnterpriseGroup.ActualsScenario		
				and	AccountingEntity			= PrmAccountingEntity							
				and	GeneralLedgerTotal.Ledger	= PrmLedger								




				and PeriodEndingDate 			within PrmDateRange
				and ChartSection.IncomeStatement)																			
			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
					LocalReportingBasis						= PrmReportingBasis
					LocalAccountingEntity					= PrmAccountingEntity					
					LocalYearEndReportingBasisYear			= PrmReportingBasisYear						
					LocalYearEndCalendarPeriod				= PrmEndingBalancePeriod
					LocalYearEndReportingBasisLedger		= PrmReportingBasisLedger									
					LocalYearEndReportType					= LocalYearEndReportType.ProfitAndLoss

					LocalYearEndGLTotalLedger				= GeneralLedgerTotal.PrimaryLedger
					LocalYearEndSystem						= GeneralLedgerTotal.System
					LocalYearEndCurrency					= GeneralLedgerTotal.Currency
					LocalYearEndAccountingUnit				= GeneralLedgerTotal.AccountingUnit
					LocalYearEndProject						= GeneralLedgerTotal.Project
					LocalYearEndDimensionCode				= GeneralLedgerTotal.DimensionCode
					LocalYearEndGeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount					

					if (YearEndJournalPerEntityRel exists)			
						LocalYearEndJournalView			=	YearEndJournalPerEntityRel.ReportingBasisYearEndJournal
					else
						invoke Create ReportingBasisYearEndJournal
							assign result to LocalYearEndJournalView
							invoked.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup			
							invoked.ReportingBasis								= LocalReportingBasis
							invoked.ReportingBasisYear							= LocalYearEndReportingBasisYear
							invoked.AccountingEntity							= LocalAccountingEntity
						    invoked.ReportingBasisYearEndJournal				= LocalYearEndReportType	
						    invoked.GeneralLedgerClosePeriod					= LocalYearEndCalendarPeriod
							invoked.GeneralLedgerCalendarPeriod					= LocalYearEndCalendarPeriod
							invoked.Description 								= DerivedYearEndJournalDescription							
					
					LocalNetFunctionalAmount += NetFunctionalAmount * -1
						
					if (GeneralLedgerTotalYearEndJournalTransactionRel exists)
						invoke Update GeneralLedgerTotalYearEndJournalTransactionRel
							invoked.NetTransactionAmount	+= NetTransactionAmount * -1
							invoked.NetFunctionalAmount 	+= NetFunctionalAmount * -1	
							invoked.NetAlternateAmount  	+= NetAlternateAmount  * -1	
							invoked.NetAlternateAmount2 	+= NetAlternateAmount2 * -1	
							invoked.NetAlternateAmount3 	+= NetAlternateAmount3 * -1	
							invoked.NetProjectAmount	  	+= NetProjectAmount	 * -1
							invoked.NetReportAmount1 		+= NetReportAmount1 * -1   	
							invoked.NetReportAmount2 		+= NetReportAmount2 * -1   	
							invoked.NetReportAmount3 		+= NetReportAmount3 * -1  	
							invoked.NetReportAmount4 		+= NetReportAmount4 * -1   	
							invoked.NetReportAmount5 		+= NetReportAmount5 * -1   
					else
						invoke Create ReportingBasisYearEndJournalTransaction
							invoked.FinanceEnterpriseGroup												= LocalYearEndJournalView.FinanceEnterpriseGroup
							invoked.ReportingBasis														= LocalYearEndJournalView.ReportingBasisYear.ReportingBasis
							invoked.ReportingBasisYear													= LocalYearEndJournalView.ReportingBasisYear
							invoked.ReportingBasisYearEndJournal										= LocalYearEndJournalView.ReportingBasisYearEndJournal 	
							invoked.AccountingEntity													= LocalAccountingEntity
							invoked.ReportingBasisYearEndJournalTransaction.EntityYearPeriod			= LocalYearEndCalendarPeriod
							invoked.ReportingBasisYearEndJournalTransaction.PrimaryLedger				= GeneralLedgerTotal.PrimaryLedger
							invoked.ReportingBasisYearEndJournalTransaction.System						= GeneralLedgerTotal.System
							invoked.ReportingBasisYearEndJournalTransaction.Currency					= GeneralLedgerTotal.Currency
							invoked.ReportingBasisYearEndJournalTransaction.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
							invoked.ReportingBasisYearEndJournalTransaction.Project						= GeneralLedgerTotal.Project
							invoked.ReportingBasisYearEndJournalTransaction.DimensionCode				= GeneralLedgerTotal.DimensionCode		
							invoked.ReportingBasisYearEndJournalTransaction.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.ReportingBasisYearEndJournalTransaction.Ledger						= LocalYearEndReportingBasisLedger
							invoked.ReportType															= LocalYearEndReportType						
							invoked.FinanceDimension1													= FinanceDimension1
							invoked.FinanceDimension2													= FinanceDimension2
							invoked.FinanceDimension3													= FinanceDimension3
							invoked.FinanceDimension4													= FinanceDimension4
							invoked.FinanceDimension5													= FinanceDimension5
							invoked.FinanceDimension6													= FinanceDimension6
							invoked.FinanceDimension7													= FinanceDimension7
							invoked.FinanceDimension8													= FinanceDimension8
							invoked.FinanceDimension9													= FinanceDimension9
							invoked.FinanceDimension10													= FinanceDimension10
							invoked.NetTransactionAmount												= NetTransactionAmount * -1
							invoked.NetFunctionalAmount 												= NetFunctionalAmount * -1	
							invoked.NetAlternateAmount  												= NetAlternateAmount  * -1	
							invoked.NetAlternateAmount2 												= NetAlternateAmount2 * -1	
							invoked.NetAlternateAmount3 												= NetAlternateAmount3 * -1	
							invoked.NetProjectAmount	  												= NetProjectAmount	 * -1
							invoked.NetReportAmount1 													= NetReportAmount1 * -1   	
							invoked.NetReportAmount2 													= NetReportAmount2 * -1   	
							invoked.NetReportAmount3 													= NetReportAmount3 * -1  	
							invoked.NetReportAmount4 													= NetReportAmount4 * -1   	
							invoked.NetReportAmount5 													= NetReportAmount5 * -1   
						
					invoke Update YearEndJournalPerEntityRel
						if (NetFunctionalAmount >= 0)
							invoked.FunctionalCreditAmount += NetFunctionalAmount * -1
						else
							invoked.FunctionalDebitAmount  += NetFunctionalAmount * -1

		AddToChangeRequest is an Instance Action
		    Parameters
		        PrmScenario        				is a Scenario
		        	default label is "Scenario"
		        PrmBudgetChangeOrder    		is a BudgetChangeOrder
		        	default label is "ChangeRequest"
		    Parameter Rules
		        PrmScenario
		            required
		        PrmBudgetChangeOrder
		            required
		    Action Rules
	            if (PrmBudgetChangeOrder.HasNoUnitsAmount)
	            	if (GeneralLedgerTotal.NetUnitsAmount entered)
	            		confirmation required
	            			"HideUnitsSelected.SelectedBudgetDataHaveUnitsAmount.WouldYouLikeToProceed?"
						
				invoke CreateChangeRequestLine BudgetChangeOrderLine
		            invoked.PrmFinanceEnterpriseGroup				 	 =  FinanceEnterpriseGroup
		            invoked.PrmScenario									 =  PrmScenario
					invoked.PrmBudgetChangeOrder						 =  PrmBudgetChangeOrder
					invoked.PrmAmount									 =  NetTransactionAmount
					invoked.PrmUnitsAmount								 =  NetUnitsAmount
					invoked.PrmBudgetCodeBlock.AccountingEntity 		 =  AccountingEntity
					invoked.PrmBudgetCodeBlock.AccountingUnit			 =  GeneralLedgerTotal.AccountingUnit
					invoked.PrmBudgetCodeBlock.GeneralLedgerChartAccount =  GeneralLedgerTotal.GeneralLedgerChartAccount
					invoked.PrmBudgetCodeBlock.Project					 =  GeneralLedgerTotal.Project
					invoked.PrmBudgetCodeBlock.FinanceDimension1   		 =  FinanceDimension1
		        	invoked.PrmBudgetCodeBlock.FinanceDimension2   		 =  FinanceDimension2
		        	invoked.PrmBudgetCodeBlock.FinanceDimension3         =  FinanceDimension3
		        	invoked.PrmBudgetCodeBlock.FinanceDimension4         =  FinanceDimension4
		        	invoked.PrmBudgetCodeBlock.FinanceDimension5         =  FinanceDimension5
		        	invoked.PrmBudgetCodeBlock.FinanceDimension6         =  FinanceDimension6
		        	invoked.PrmBudgetCodeBlock.FinanceDimension7         =  FinanceDimension7
		        	invoked.PrmBudgetCodeBlock.FinanceDimension8         =  FinanceDimension8
		        	invoked.PrmBudgetCodeBlock.FinanceDimension9         =  FinanceDimension9
		        	invoked.PrmBudgetCodeBlock.FinanceDimension10        =  FinanceDimension10
		        	invoked.PrmGeneralLedgerCalendarPeriod				 =  GeneralLedgerTotal.EntityYearPeriod
		        	
		            									
		FixPeriodEndingDates is a Set Action
			default label is "FixPeriodEndingDatesForBudgetaryRows"
			restricted
		    Parameters
		        PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
		            default label is "FinanceEnterpriseGroup"
		    Parameter Rules
		        PrmFinanceEnterpriseGroup
		            required
		    Instance Selection
		        where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   Scenario.CommitmentType.Budget
		        and   PeriodEndingDate not entered)
		    Sort Order
		        FinanceEnterpriseGroup
		        Scenario
		        AccountingEntity
		        GeneralLedgerTotal
		    Action Rules
		        Instance Rules
		            PeriodEndingDate = DerivedPeriodEndingDate

		ExportBudgetData is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				SourceScenario					is a Scenario 
				DataToExport					is Numeric 1
					States
						AllBudgetData			value is 0 
						BudgetOriginalOnly		value is 1
				TargetScenario					is a Scenario
				BudgetDateRange					is a DateRange
				PrmBudgetCodeBlock				is a BudgetCodeBlock
					default label is "BudgetCodeBlock"
				PrmRunGroup		is a RunGroup
					default label is "RunGroup"							
				PrmExportZeroBudgetOriginal	is Boolean
					default label is "ExportZeroBudget"

			Instance Selection
				where (FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
				and    ((DataToExport.AllBudgetData and SourceScenario = Scenario.Parent) or (DataToExport.BudgetOriginalOnly and SourceScenario.OriginalScenario = Scenario))
				and    PeriodEndingDate					within BudgetDateRange
				and    (PrmBudgetCodeBlock.AccountingEntity          not entered or PrmBudgetCodeBlock.AccountingEntity = AccountingEntity)
				and    (PrmBudgetCodeBlock.GeneralLedgerChartAccount not entered or PrmBudgetCodeBlock.GeneralLedgerChartAccount = GeneralLedgerTotal.GeneralLedgerChartAccount)
				and    (PrmBudgetCodeBlock.AccountingUnit            not entered or PrmBudgetCodeBlock.AccountingUnit = GeneralLedgerTotal.AccountingUnit)
				and    (PrmBudgetCodeBlock.Project           not entered or PrmBudgetCodeBlock.Project = GeneralLedgerTotal.Project)
				and    (PrmBudgetCodeBlock.FinanceDimension1 not entered or PrmBudgetCodeBlock.FinanceDimension1 = FinanceDimension1)
				and    (PrmBudgetCodeBlock.FinanceDimension2 not entered or PrmBudgetCodeBlock.FinanceDimension2 = FinanceDimension2)
				and    (PrmBudgetCodeBlock.FinanceDimension3 not entered or PrmBudgetCodeBlock.FinanceDimension3 = FinanceDimension3)
				and    (PrmBudgetCodeBlock.FinanceDimension4 not entered or PrmBudgetCodeBlock.FinanceDimension4 = FinanceDimension4)
				and    (PrmBudgetCodeBlock.FinanceDimension5 not entered or PrmBudgetCodeBlock.FinanceDimension5 = FinanceDimension5)
				and    (PrmBudgetCodeBlock.FinanceDimension6 not entered or PrmBudgetCodeBlock.FinanceDimension6 = FinanceDimension6)
				and    (PrmBudgetCodeBlock.FinanceDimension7 not entered or PrmBudgetCodeBlock.FinanceDimension7 = FinanceDimension7)
				and    (PrmBudgetCodeBlock.FinanceDimension8 not entered or PrmBudgetCodeBlock.FinanceDimension8 = FinanceDimension8)
				and    (PrmBudgetCodeBlock.FinanceDimension9 not entered or PrmBudgetCodeBlock.FinanceDimension9 = FinanceDimension9)
				and    (PrmBudgetCodeBlock.FinanceDimension10 not entered or PrmBudgetCodeBlock.FinanceDimension10 = FinanceDimension10))

			Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity

			Rule Blocks
				CreateBudgetImport
					invoke Create BudgetImport
						invoked.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
						invoked.Scenario                    = TargetScenario
						invoked.AccountingEntity            = AccountingEntity
						invoked.AccountingUnit              = GeneralLedgerTotal.AccountingUnit
						invoked.GeneralLedgerChartAccount   = GeneralLedgerTotal.GeneralLedgerChartAccount
						invoked.Project                     = GeneralLedgerTotal.Project
						invoked.FinanceDimension1           = FinanceDimension1
						invoked.FinanceDimension2           = FinanceDimension2
						invoked.FinanceDimension3           = FinanceDimension3
						invoked.FinanceDimension4           = FinanceDimension4
						invoked.FinanceDimension5           = FinanceDimension5
						invoked.FinanceDimension6           = FinanceDimension6
						invoked.FinanceDimension7           = FinanceDimension7
						invoked.FinanceDimension8           = FinanceDimension8
						invoked.FinanceDimension9           = FinanceDimension9
						invoked.FinanceDimension10          = FinanceDimension10
						invoked.BudgetPeriod                = LocalGeneralLedgerCalendarPeriod	
						invoked.Amount                      = NetTransactionAmount
						invoked.Currency                    = GeneralLedgerTotal.Currency
						invoked.UnitsAmount                 = NetUnitsAmount
						invoked.LocalBypassEdits			= true
						invoked.RunGroup					= PrmRunGroup
			Action Rules
				Instance Rules
					LocalReportingBasis = SourceScenario.Basis
					LocalGeneralLedgerCalendarPeriod = BudgetPeriodRel.SummaryGeneralLedgerCalendarPeriod
					if (Scenario.CommitmentType.BudgetOriginal)
						if (PrmExportZeroBudgetOriginal
						or  not (PrmExportZeroBudgetOriginal or IsZeroBudget)) 
							include CreateBudgetImport
					else
						LocalBudgetScenario						= TargetScenario
						if (BudgetImportByDimensionCodeRel exists)
							invoke Update BudgetImportByDimensionCodeRel.BudgetImport
								invoked.Amount			+= NetTransactionAmount
								invoked.UnitsAmount		+= NetUnitsAmount
								invoked.LocalBypassEdits = true
						else
							include CreateBudgetImport

		CalculateVarianceReport is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario						is Numeric 1
					default label is "Scenario"
					States
						Commitments		value is 1
						Encumbrances	value is 2
						Both			value is 3
				PrmSystemCode					is a GeneralLedgerSystemCode
					default label is "System"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
						"FinanceEnterpriseGroupIsRequired"
				PrmScenario
					required
						"ScenarioIsRequired"

			Local Fields
				TotalGLCommitmentAmount			is a CurrencyAmount
				
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and  ((PrmScenario.Commitments 
				and    Scenario = PrmFinanceEnterpriseGroup.CommitmentsScenario)
				or    (PrmScenario.Encumbrances 
				and    Scenario = PrmFinanceEnterpriseGroup.EncumbrancesScenario)
				or    (PrmScenario.Both 
				and   (Scenario = PrmFinanceEnterpriseGroup.CommitmentsScenario
				or     Scenario = PrmFinanceEnterpriseGroup.EncumbrancesScenario)))
				and   (!PrmSystemCode entered
				or    (PrmSystemCode entered
				and    GeneralLedgerTotal.System = PrmSystemCode)))

			Sort Order is primary

			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					invoke Purge CommitmentEncumbranceVarianceResultRel

				Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						invoke Purge CommitmentEncumbranceVarianceResultRel

				Instance Rules
					initialize TotalGLCommitmentAmount
					TotalGLCommitmentAmount = sum GLCommitRel.TransactionAmount
					if (NetTransactionAmount - TotalGLCommitmentAmount != 0)
						BypassActiveCodeBlockEdit = true
						invoke Create CommitmentEncumbranceVarianceResult
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.OriginatingTransaction		= reference to this instance
							invoked.Scenario					= Scenario
							invoked.AccountingEntity			= AccountingEntity
							invoked.Ledger						= GeneralLedgerTotal.Ledger
							invoked.System						= GeneralLedgerTotal.System
							invoked.CurrencyCode				= GeneralLedgerTotal.Currency
							invoked.EntityYearPeriod			= GeneralLedgerTotal.EntityYearPeriod
							invoked.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
							invoked.GeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.Project						= GeneralLedgerTotal.Project
							invoked.DimensionCode				= GeneralLedgerTotal.DimensionCode
							invoked.PrimaryLedger				= GeneralLedgerTotal.PrimaryLedger
							invoked.FinanceDimension1   		= FinanceDimension1
							invoked.FinanceDimension2   		= FinanceDimension2
							invoked.FinanceDimension3   		= FinanceDimension3
							invoked.FinanceDimension4   		= FinanceDimension4
							invoked.FinanceDimension5   		= FinanceDimension5
							invoked.FinanceDimension6   		= FinanceDimension6
							invoked.FinanceDimension7   		= FinanceDimension7
							invoked.FinanceDimension8   		= FinanceDimension8
							invoked.FinanceDimension9   		= FinanceDimension9
							invoked.FinanceDimension10  		= FinanceDimension10
							invoked.GLTTransactionAmount		= NetTransactionAmount
							invoked.GLCommitTransactionAmount	= TotalGLCommitmentAmount
							invoked.GLCommitTransactionVariance = (NetTransactionAmount - TotalGLCommitmentAmount)

#ifdef module ad
		GetBeginBalanceForAllBSAccounts	is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is a AccountingEntity
				PrmReportingBasis				is a ReportingBasis
				PrmBeginBalancePeriod			is AlphaUpper size 10
				PrmProcessingType				is Numeric 1
					States
						DailyBalanceProcessing	value is 0
						RecalculatePreviousYear value is 4
						RecalculateCurrentYear	value is 5

		    Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmReportingBasis
					required

		    Local Fields
		    	RetainedEarnings				is like GeneralLedgerChartAccount

		    Instance Selection
				where (FinanceEnterpriseGroup              = PrmFinanceEnterpriseGroup
				and    Scenario                            = PrmFinanceEnterpriseGroup.ActualsScenario
				and    GeneralLedgerTotal.Ledger           = PrmReportingBasis.DerivedCloseLedger
				and    GeneralLedgerTotal.EntityYearPeriod = PrmBeginBalancePeriod
				and	   AccountingEntity		               = PrmAccountingEntity
				and    GeneralLedgerTotal.GeneralLedgerChartAccount.ChartSection.BalanceSheet)

		    Sort Order
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity

			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						initialize RetainedEarnings
						LocalSystemAccount			= SystemAccount.RetainedEarnings
						if (PrmFinanceEnterpriseGroup.SystemSubAccount entered)
							RetainedEarnings		= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmFinanceEnterpriseGroup.SystemSubAccount
						else
							RetainedEarnings		= first SystemAccountRel.GeneralLedgerChartAccount
						constraint (RetainedEarnings entered)
							"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"

				Instance Rules	
					initialize LocalInstAccountingUnit
					initialize LocalInstFinanceDimension1
					initialize LocalInstADBOrganizationDimension
					initialize LocalDate
					LocalReportingBasis					= PrmReportingBasis
					LocalInstAccountingEntity			= PrmAccountingEntity
					LocalInstGeneralLedgerChartAccount	= GeneralLedgerTotal.GeneralLedgerChartAccount
					LocalDate							= PeriodEndingDate

					if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)
						if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
							LocalInstAccountingUnit					= GeneralLedgerTotal.AccountingUnit
							LocalInstADBOrganizationDimension       = GeneralLedgerTotal.AccountingUnit
						else
						if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
							LocalInstFinanceDimension1				= FinanceDimension1
							LocalInstADBOrganizationDimension       = FinanceDimension1
						if (ADBAccountMasterByAccountRel not exists)
							invoke Create ADBAccountMaster
								invoked.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
								invoked.AccountingEntity          = LocalInstAccountingEntity
								invoked.GeneralLedgerChartAccount = LocalInstGeneralLedgerChartAccount
								invoked.AccountingUnit            = LocalInstAccountingUnit
								invoked.FinanceDimension1         = LocalInstFinanceDimension1
								invoked.Active                    = true
								if (LocalInstGeneralLedgerChartAccount = RetainedEarnings)
									invoked.NonChartAccount       = true
						if (ADBAccountMasterByAccountRel exists)
							invoke Update UpdateADBDailyAmountRel
								invoked.PrmBalanceOnPostDate			= NetFunctionalAmount
								invoked.PrmBalanceOnTransactionDate		= NetFunctionalAmount
					else
					if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)
						initialize LocalFinanceCodeBlockADB
						initialize LocalInstLedger
						initialize LocalCurrencyCode
						if (FinanceEnterpriseGroup.IncludeLedgerInAverageDailyBalance)
							LocalInstLedger								= GeneralLedgerTotal.PrimaryLedger
						if (FinanceEnterpriseGroup.CalculateADBOption.AllCurrencyAmounts)
							LocalCurrencyCode							= GeneralLedgerTotal.Currency
						LocalFinanceCodeBlockADB.ToAccountingEntity		= LocalInstAccountingEntity
						LocalFinanceCodeBlockADB.AccountingUnit			= GeneralLedgerTotal.AccountingUnit
						LocalFinanceCodeBlockADB.Project				= GeneralLedgerTotal.Project
						LocalFinanceCodeBlockADB.FinanceDimension1		= FinanceDimension1
						LocalFinanceCodeBlockADB.FinanceDimension2		= FinanceDimension2
						LocalFinanceCodeBlockADB.FinanceDimension3		= FinanceDimension3
						LocalFinanceCodeBlockADB.FinanceDimension4		= FinanceDimension4
						LocalFinanceCodeBlockADB.FinanceDimension5		= FinanceDimension5
						LocalFinanceCodeBlockADB.FinanceDimension6		= FinanceDimension6
						LocalFinanceCodeBlockADB.FinanceDimension7		= FinanceDimension7
						LocalFinanceCodeBlockADB.FinanceDimension8		= FinanceDimension8
						LocalFinanceCodeBlockADB.FinanceDimension9		= FinanceDimension9
						LocalFinanceCodeBlockADB.FinanceDimension10		= FinanceDimension10
						if (AverageDailyBalanceAccountRel not exists)
							invoke Create AverageDailyBalanceAccount
								invoked.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
								invoked.AccountingEntity										= LocalInstAccountingEntity
								invoked.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
								invoked.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
								invoked.ADBDimension1		= DerivedADBDimension1
								invoked.ADBDimension2		= DerivedADBDimension2
								invoked.ADBDimension3		= DerivedADBDimension3
								invoked.Active				= true
								invoked.TransactionLedger	= LocalInstLedger
								invoked.TransactionCurrency	= LocalCurrencyCode
								if (PrmProcessingType.DailyBalanceProcessing) 
									invoked.LastADBDate		= LocalDate			
								if (LocalInstGeneralLedgerChartAccount = RetainedEarnings)
									invoked.NonChartAccount = true
						else  
							if (PrmProcessingType.DailyBalanceProcessing)
								invoke Update AverageDailyBalanceAccountRel
									invoked.LastADBDate		= LocalDate
						if (AverageDailyBalanceAccountRel exists)
							invoke Update UpdateAverageDailyBalanceAmountRel
								invoked.ADBDimension1						= AverageDailyBalanceAccountRel.ADBDimension1
								invoked.ADBDimension2						= AverageDailyBalanceAccountRel.ADBDimension2
								invoked.ADBDimension3						= AverageDailyBalanceAccountRel.ADBDimension3
								invoked.PrmBalanceOnPostDate				= NetFunctionalAmount
								invoked.PrmBalanceOnTransactionDate			= NetFunctionalAmount
								invoked.TransactionLedger					= AverageDailyBalanceAccountRel.TransactionLedger
								invoked.TransactionCurrency					= AverageDailyBalanceAccountRel.TransactionCurrency
						        invoked.PrmOnPostDateTransactionAmount		= NetTransactionAmount
						        invoked.PrmOnPostDateAlternateAmount1		= NetAlternateAmount
						        invoked.PrmOnPostDateAlternateAmount2		= NetAlternateAmount2
						        invoked.PrmOnPostDateAlternateAmount3		= NetAlternateAmount3
								invoked.PrmOnPostDateReportAmount1			= NetReportAmount1
								invoked.PrmOnPostDateReportAmount2			= NetReportAmount2
								invoked.PrmOnPostDateReportAmount3			= NetReportAmount3
								invoked.PrmOnPostDateReportAmount4			= NetReportAmount4
								invoked.PrmOnPostDateReportAmount5			= NetReportAmount5

		GetBeginBalance is a Set Action
			restricted
			disable checkpoint
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmAccountingEntity				is a AccountingEntity
					default label is "AccountingEntity"
				PrmBeginBalancePeriod			is like GeneralLedgerCalendarPeriod
					default label is "BeginBalancePeriod"






			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmReportingBasis
					required
				PrmAccountingEntity
					required
			Local Fields
				RetainedEarnings		is like GeneralLedgerChartAccount
				LocalDate				is Date
				LocalAlphaYear			is Alpha 4
				LocalAlphaDay			is Alpha 3
				LocalEndDateJulian		is AlphaUpper 20
				LocalScenario			is a Scenario
				LocalDailyPeriodTotal	is a DailyPeriodTotal
				LocalDailyCalendarPeriod    is a DailyCalendarPeriod
			Instance Selection
				where (FinanceEnterpriseGroup	 = PrmFinanceEnterpriseGroup
				and    Scenario					 = PrmFinanceEnterpriseGroup.ActualsScenario
				and    GeneralLedgerTotal.Ledger = PrmReportingBasis.DerivedCloseLedger
				and    AccountingEntity			 = PrmAccountingEntity
				and    GeneralLedgerTotal.EntityYearPeriod = PrmBeginBalancePeriod)
			Sort Order	
				FinanceEnterpriseGroup
				Scenario
				GeneralLedgerTotal.Ledger
				AccountingEntity
				GeneralLedgerTotal.EntityYearPeriod
				GeneralLedgerTotal.GeneralLedgerChartAccount
			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules

				Instance Rules
					LocalDailyCalendarPeriod = GeneralLedgerTotal.EntityYearPeriod
					if (LocalDailyCalendarPeriod exists)
						LocalScenario										= FinanceEnterpriseGroup.ActualsScenario
						LocalDailyPeriodTotal.Ledger						= GeneralLedgerTotal.Ledger
						LocalDailyPeriodTotal.System						= GeneralLedgerTotal.System
						LocalDailyPeriodTotal.Currency						= GeneralLedgerTotal.Currency
						LocalDailyPeriodTotal.EntityYearPeriod				= GeneralLedgerTotal.EntityYearPeriod
						LocalDailyPeriodTotal.AccountingUnit				= GeneralLedgerTotal.AccountingUnit
						LocalDailyPeriodTotal.GeneralLedgerChartAccount		= GeneralLedgerTotal.GeneralLedgerChartAccount
						LocalDailyPeriodTotal.Project						= GeneralLedgerTotal.Project
						LocalDailyPeriodTotal.DimensionCode					= GeneralLedgerTotal.DimensionCode
						LocalDailyPeriodTotal.PrimaryLedger					= GeneralLedgerTotal.PrimaryLedger
						invoke PostTransactions LocalDailyPeriodTotal
							invoked.PeriodEndingDate    = PeriodEndingDate
							invoked.ChartSection        = GeneralLedgerTotal.GeneralLedgerChartAccount.ChartSection
							invoked.FinanceDimension1   = FinanceDimension1
							invoked.FinanceDimension2   = FinanceDimension2
							invoked.FinanceDimension3   = FinanceDimension3
							invoked.FinanceDimension4   = FinanceDimension4
							invoked.FinanceDimension5   = FinanceDimension5
							invoked.FinanceDimension6   = FinanceDimension6
							invoked.FinanceDimension7   = FinanceDimension7
							invoked.FinanceDimension8   = FinanceDimension8
							invoked.FinanceDimension9   = FinanceDimension9
							invoked.FinanceDimension10  = FinanceDimension10
							invoked.TransactionAmount   = NetTransactionAmount
							invoked.FunctionalAmount    = NetFunctionalAmount
							invoked.AlternateAmount     = NetAlternateAmount
							invoked.AlternateAmount2    = NetAlternateAmount2
							invoked.AlternateAmount3    = NetAlternateAmount3
							invoked.ProjectAmount       = NetProjectAmount
							invoked.ReportAmount1       = NetReportAmount1
							invoked.ReportAmount2       = NetReportAmount2
							invoked.ReportAmount3       = NetReportAmount3
							invoked.ReportAmount4       = NetReportAmount5
							invoked.ReportAmount5       = NetReportAmount5
							invoked.UnitsAmount         = NetUnitsAmount
							invoked.Account             = Account
							invoked.GeneralLedgerSubAccount = GeneralLedgerSubAccount
							invoked.IsUREChartAccount       = IsUREChartAccount
#endif				

		BODDataInitialLoadGeneralLedgerTotalCriteria is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmFromAccountingEntity				is an AccountingEntity
				PrmToAccountingEntity				is an AccountingEntity
				PrmDateRange						is a DateRange
				PrmCreateDateRange					is a DateRange
			Parameter Rules
			Instance Selection			
				where  (((PrmFinanceEnterpriseGroup entered
				and		  PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup)
				or		  PrmFinanceEnterpriseGroup not entered)
				and		((PrmFromAccountingEntity entered
				and		  PrmFromAccountingEntity <= AccountingEntity)
				or		  PrmFromAccountingEntity not entered)	
				and		((PrmToAccountingEntity entered
				and		  PrmToAccountingEntity >= AccountingEntity)
				or		  PrmToAccountingEntity not entered)	
				and     (PeriodEndingDate within PrmDateRange
				or		PrmDateRange not entered)
				and     (create date within PrmCreateDateRange
				or		PrmCreateDateRange not entered))
		
			Sort Order
			Action Rules												
				Instance Rules	


					if (FinanceEnterpriseGroup.BODTrigger)
						ActionCode = ActionCode.Create	
						LocalWorkUnitTitle = "EG:"+FinanceEnterpriseGroup+"LG:"+GeneralLedgerTotal.Ledger+"AE:"+AccountingEntity+"PD:"+GeneralLedgerTotal.EntityYearPeriod+"AU:"+GeneralLedgerTotal.AccountingUnit+"RCA:"+GeneralLedgerTotal.GeneralLedgerChartAccount+"PJ:"+GeneralLedgerTotal.Project
						
						increment bod id.VariationID
						LocalBODCurrentTimeStamp.CurrentTimeStamp 	= current timestamp
						include TiggerGLMovementRules




#ifdef module integration							
		SendGLMovementBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is SourceSystemGLMovementBODXML
					bod type is "Sync.SourceSystemGLMovement"
					accounting entity is DerivedAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID
					
		TriggerGLMovementBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "SourceSystemGLMovement"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "GeneralLedgerTotal"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmAccountingEntity			= AccountingEntity
					invoked.PrmMainUserTemplate			= "IONSyncSourceSystemGLMovement_GeneralLedgerTotal_ST"	
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger						
				LocalBODTrigger = true
				if(FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "SourceSystemGLMovement"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.BODAccountingEntity		= AccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Customer				= Scenario
							invoked.Reference1				= GeneralLedgerTotal.Ledger
							invoked.Reference2				= GeneralLedgerTotal.System
							invoked.Reference3				= GeneralLedgerTotal.Currency
							invoked.Reference4				= GeneralLedgerTotal.EntityYearPeriod
							invoked.Reference5				= GeneralLedgerTotal.AccountingUnit
							invoked.RunGroup				= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.BODLocation				= GeneralLedgerTotal.Project
							invoked.Invoice					= GeneralLedgerTotal.DimensionCode
							initialize invoked.Error			
							initialize invoked.ErrorMessage		
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.BODAccountingEntity		= AccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Customer				= Scenario
							invoked.Reference1				= GeneralLedgerTotal.Ledger
							invoked.Reference2				= GeneralLedgerTotal.System
							invoked.Reference3				= GeneralLedgerTotal.Currency
							invoked.Reference4				= GeneralLedgerTotal.EntityYearPeriod
							invoked.Reference5				= GeneralLedgerTotal.AccountingUnit
							invoked.RunGroup				= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.BODLocation				= GeneralLedgerTotal.Project
							invoked.Invoice					= GeneralLedgerTotal.DimensionCode
							initialize invoked.Error			
							initialize invoked.ErrorMessage
							
					invoke SendGLMovementBODNativeLPL
						resume on error
		                   	Error            						= true
		                    ErrorMessage    						= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= SourceSystemGLMovementBODXML
							invoked.BODID								= DerivedBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODXML									= SourceSystemGLMovementBODXML
							invoked.BODID									= DerivedBODID
#endif

		PurgeGLTotalRecords is a Set Action
			restricted
			disable checkpoint
	
			completion message is "<RecordsPurged>RecordsPurged"
		
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is an AccountingEntity
				PrmGeneralLedgerCloseYear		is a GeneralLedgerCloseYear
				PrmGeneralLedgerSystemCode 		is a GeneralLedgerSystemCode
				PrmPurgeGLRecordsResult 		is a PurgeGLRecordsResult
				PrmPurgeGLRecordsResultDetail	is a PurgeGLRecordsResultDetail
				PrmRecordType					is a RecordType
				PrmSystemCodeSelectionOption 	is Numeric 1
				PrmReportOnly					is Boolean
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				PrmGeneralLedgerCloseYear
					required
					LocalGLCloseYear = PrmGeneralLedgerCloseYear
					LocalGLCloseConfiguration = PrmGeneralLedgerCloseYear.GeneralLedgerCloseConfiguration
				PrmAccountingEntity
					required
				PrmPurgeGLRecordsResultDetail
					required
				PrmSystemCodeSelectionOption
					required
			
			Local Fields
				RecordsPurged		is Numeric 12
				
			Instance Selection
				where (FinanceEnterpriseGroup 						= PrmFinanceEnterpriseGroup
				and 	Scenario.CommitmentType.Actuals
				and 	AccountingEntity 							= PrmAccountingEntity
				and 	((PrmSystemCodeSelectionOption 				= 1 
				and 	GeneralLedgerTotal.System					= PrmGeneralLedgerSystemCode )
				or		(PrmSystemCodeSelectionOption 				= 2 
				and 	GeneralLedgerTotal.System.RecordType 		= PrmRecordType
				and 	GeneralLedgerTotal.System					!= "TC"
				and 	GeneralLedgerTotal.System					!= "CA"))
				and 	ClosePeriodRel exists
				and		((GeneralLedgerTotal.Project entered
				and		GeneralLedgerTotal.Project.ProjectStatus.AllowPurge)
				or		GeneralLedgerTotal.Project not entered ) )
				
			Action Rules
				Set Rules
					Entrance Rules
						initialize RecordsPurged
					Exit Rules
						invoke Update PrmPurgeGLRecordsResultDetail.PurgeGLRecordsResultDetail
							invoked.GLTotalRecords = RecordsPurged
				
				Instance Rules
					if (!PrmReportOnly)
						invoke Purge
					RecordsPurged += 1

			



		
	
	
	Action Exit Rules
	



		include SendIndividualBOD


			



FileCreationLogic.GeneralLedgerTotal is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
		SystemHash is a NativeField
			type is Numeric 8
			restricted	
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"GeneralLedgerTotal_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Sort Order is ByChartAccount
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation				
				FileCreationSetupPrm	is a FileCreationSetup
#endif				
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation							
				LocalGeneralLedgerTotalGroupSelection		is a GeneralLedgerTotal group in subject FileCreationGeneralLedgerTotal
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      SystemHash % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation															
					LocalGeneralLedgerTotalGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalGeneralLedgerTotalGroupSelection not entered
					or	GeneralLedgerTotal within LocalGeneralLedgerTotalGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup			= FileCreationSetupPrm
							invoked.Key1						= Scenario
							invoked.Key2						= AccountingEntity
							invoked.Key3						= GeneralLedgerTotal.Ledger
							invoked.Key4						= GeneralLedgerTotal.System
							invoked.Key5						= GeneralLedgerTotal.Currency
							invoked.Key6						= GeneralLedgerTotal.EntityYearPeriod
							invoked.Key7						= GeneralLedgerTotal.AccountingUnit
							invoked.Key8						= GeneralLedgerTotal.GeneralLedgerChartAccount
							invoked.Key9						= GeneralLedgerTotal.Project
							invoked.Key10						= GeneralLedgerTotal.DimensionCode
							invoked.Key11						= GeneralLedgerTotal.PrimaryLedger
							invoked.SystemTimeStamp				= EndTimeStamp
							invoked.EffectiveDate				= system current corporate date
							invoked.Status						= 1
#endif

