ItemUOM is a BusinessClass
	owned by ic
	prefix is IUOM

	Ontology
		symbolic key is ItemUOM

	Patterns
		implements StaticJava
		disable AuditIndex

	Persistent Fields
		UOMConversion
		TrackedIn						is Boolean
		ValidForInventoryTransactions	is Numeric 1
			States
				NotValid	value is 0
				Default		value is 1
				Valid		value is 2
				Inactive	value is 9
		ValidForSelling					is Numeric 1
			States
				NotValid	value is 0
				Default		value is 1
				Valid		value is 2
				Inactive	value is 9
		ValidForSellPrice				is Numeric 1
			States	
				NotValid	value is 0
				Default		value is 1
				Valid		value is 2
				Inactive	value is 9
		ValidForBuying					is Numeric 1
			States
				NotValid	value is 0
				Default		value is 1
				Valid		value is 2
				Inactive	value is 9
		PackingWeight					is Decimal 9.3
		PackingVolume					is Decimal 9.3
		PackLevel						is Numeric 1
			States
				1 value is 1
				2 value is 2
				3 value is 3
				4 value is 4			


	Derived Fields
		UOMMultiplierMessage			is a MessageField
			"1<UnitOfMeasure>_(<UnitOfMeasure.Description>)_contains<UOMConversion>_<Item.StockUOM>_(<Item.StockUOM.Description>)"
		ShortUOMMultiplierMessage			is a MessageField
			"1<UnitOfMeasure>_contains<UOMConversion>_<Item.StockUOM>"
		TrackedInMessage				is a MessageField
			restricted
			"TrackedIn:<TrackedIn>"
		InventoryTransactionsMessage	is a MessageField
			restricted
			"InventoryTransactions:<ValidForInventoryTransactions>"
		SellingMessage					is a MessageField
			restricted
			"Selling:<ValidForSelling>"
		SellPriceMessage				is a MessageField
			restricted
			"SellPrice:<ValidForSellPrice>"
		BuyingMessage					is a MessageField
			restricted
			"Buying:<ValidForBuying>"
		UOMChangeWarningMessage			is a MessageField
			restricted
			"Warning,UOMMayBeInUse;Continue?"

	    
	    DerivedItemDescription is a DerivedField
	    	type is Alpha 60
	    	restricted
	    	return Item.Description
	    	
	    DerivedItemStockUOM is a DerivedField
	    	type is Alpha 4
	    	restricted
	    	return Item.StockUOM
	    	
	    DerivedItemStockWeight is a DerivedField
	    	type is Alpha 10
	    	restricted
	    	return Item.StockWeight
	    	
	    DerivedItemStockVolume is a DerivedField
	    	type is Alpha 10
	    	restricted
	    	return Item.StockVolume
	    	
	   	DerivedUPCPackLevel is a DerivedField
	    	type is Alpha 1
	    	restricted
	    	if(PackLevel = "0")
	    		return ""
	    	else
	    		return PackLevel

		
		DerivedItemLocationSerialCompany is a DerivedField
			type is like Company
			restricted
			return first Item.SerialTrackedItemLocationsRel.Company
		
		DerivedItemLocationSerialInventoryLocation is a DerivedField
			type is like InventoryLocation
			restricted
			return first Item.SerialTrackedItemLocationsRel.InventoryLocation


	Context Fields
		AuditDateRange is a DateRange

	Local Fields
		LocalInventoryCompany	is an InventoryCompany
		LocalInventoryLocation	is an InventoryLocation
		LocalCreateFromCopy		is Boolean

	Conditions
		RecordExists
			restricted
			when (ItemUOM exists)
		IsStockUOM
			restricted
			when (UnitOfMeasure = Item.StockUOM)
		HasBuyUOMOnVendorItem
			restricted
			when (first VendorItemBuyUOMRel exists)
		HasPriceUOMOnVendorItem
			restricted
			when (first VendorItemPriceUOMRel exists)
		HasItemAsGtinItem
			restricted
			when (ItemGTINRel exists)
		IsCatchWeightItem
			restricted
			when (!Item.CatchWeightCode.NotCatchWeight)
		IsSecondaryUOM
			restricted
			when (UnitOfMeasure = Item.SecondaryUOM)	
		OKForBuying
			restricted
			when (not ValidForBuying.NotValid
			and   not ValidForBuying.Inactive)
		OKForTransaction
			restricted
			when (not ValidForInventoryTransactions.NotValid
			and   not ValidForInventoryTransactions.Inactive)
		OKForSelling
			restricted
			when (not ValidForSelling.NotValid 
			and   not ValidForSelling.Inactive)
		OKForSellPrice
			restricted
			when (not ValidForSellPrice.NotValid
			and   not ValidForSellPrice.Inactive)
		HasValidUOM
			restricted
			when (OKForTransaction
			or OKForSelling
			or OKForSellPrice
			or OKForBuying)
		DefaultForInventoryTransactions
			restricted
			when (ValidForInventoryTransactions.Default)
		DefaultForSelling
			restricted
			when (ValidForSelling.Default)
		DefaultForSellPrice
			restricted
			when (ValidForSellPrice.Default)
		DefaultForBuying
			restricted
			when (ValidForBuying.Default)
		SerialTrackIssueOrReceipt
			restricted
			when ((Item.SerialTracked.SerialRequiredAtIssue)
			or (Item.SerialTracked.SerialRequiredAtReceipt))
		BuyingNotEnteredExist
			restricted
			when (ValidForBuying not entered)

		HasOrderableUOMGTIN
			restricted
			when (OrderableUnitItemGTINRel exists)

		ConsolidatedItemMasterExists
            restricted
            when (ConsolidatedItemMasterRel exists)

	Sets
		ByUOMConversion
			Sort Order
				ItemGroup
				Item
				UOMConversion
				UnitOfMeasure

	Relations
		OtherAlternateTrackedUOMsRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup   = ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.UnitOfMeasure != UnitOfMeasure
				and	   related.UnitOfMeasure != Item.StockUOM
				and    related.TrackedIn)
				
		HasAnotherDefaultTransUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.ValidForInventoryTransactions.Default
				and	   related.UnitOfMeasure not = UnitOfMeasure) 		

		HasAnotherDefaultSellUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.ValidForSelling.Default
				and	   related.UnitOfMeasure not = UnitOfMeasure) 		

		HasAnotherDefaultSellPriceUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.ValidForSellPrice.Default
				and	   related.UnitOfMeasure not = UnitOfMeasure) 		

		HasAnotherDefaultBuyUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.ValidForBuying.Default
				and	   related.UnitOfMeasure not = UnitOfMeasure)

		HasAnotherUOMWithSamePackLevelRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.PackLevel entered
				and    related.PackLevel			= PackLevel
				and	   related.UnitOfMeasure	not = UnitOfMeasure)

		ItemUOMIsStockUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.UnitOfMeasure = Item.StockUOM)	

		VendorItemBuyUOMRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.VendorBuyUOM = UnitOfMeasure)

		VendorItemPriceUOMRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.VendorPriceUOM = UnitOfMeasure)

		AllActiveItemLocationsRel is a ItemLocation(Item) set
			Instance Selection
				where (related.Item.ItemGroup	= ItemGroup
				and    related.Active)
				
		ProcurementTemplateLineItemUOMRel
			one-to-many relation to	ProcurementTemplateLine
			Field Mapping uses	Set3
				related.ProcurementGroup		=	ItemGroup
				related.Item					=	Item
			Instance Selection
				where (related.UnitOfMeasure	=	UnitOfMeasure)
				
				
		ItemContractLineRel
		 	one-to-many relation to ContractLine
		 	Field Mapping uses ByItemContractLine
		 		related.ContractGroup		=	ItemGroup
				related.ItemNumber			=	Item
			Instance Selection
				where (related.UOM      	= 	UnitOfMeasure)

		ItemOpenContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	=	ItemGroup
				related.ItemNumber		=	Item
			Instance Selection
				where (related.UOM		= 	UnitOfMeasure
				and    not related.ContractLineState.Closed)
				
		ClosedContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	=	ItemGroup
				related.ItemNumber		=	Item
			Instance Selection
				where (related.UOM		= 	UnitOfMeasure
				and    related.ContractLineState.Closed)
				
		ItemGTINRel
	 		one-to-many relation to ItemGTIN
		 	Field Mapping uses Set3
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure	
   				
   		UOMItemUPCRel
   			one-to-many relation to ItemUPC
		 	Field Mapping uses Set6
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   				
   		
   		UOMItemUPN1Rel
   			one-to-many relation to HIBCCItemUPN
		 	Field Mapping uses Set5
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   				
   		UOMItemUPN2Rel
   			one-to-many relation to UCCEANItemUPN
		 	Field Mapping uses Set5
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   				
   				
   		UOMItemSKURel
   			one-to-many relation to ItemSKU
		 	Field Mapping uses Set6
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   				
   		ItemUOMNDCRel
   	   		one-to-many relation to NationalDrugCode
		 	Field Mapping uses Set5
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   				
 		StockOnHandItemRel is a StockOnHandDetail(Item) set
			Instance Selection
				where (related.Item.ItemGroup	= ItemGroup)  
				
		OpenRequisitionLineUOMRel
			one-to-many relation to	RequisitionLine
			Field Mapping uses	Set8
				related.Company					=	LocalInventoryCompany
				related.Item					=	Item
			Instance Selection
				where ((related.Status.Unreleased)
				and   ((related.EnteredUOM		=	UnitOfMeasure) 
				or    (related.EnteredUOM		=	old UnitOfMeasure
				and    related.EnteredUOM		!=	UnitOfMeasure))) 
				
		OpenCustomerOrderUOMRel
			one-to-many relation to	CustomerOrderLine
			Field Mapping uses	Set3
				related.Company					=	LocalInventoryCompany
			Instance Selection
				where ((not related.Status.Released
				and	 	related.SellUOM			=	UnitOfMeasure
				and 	related.Item			=	Item)
				or 		(related.SellUOM		=	old UnitOfMeasure
				and 	related.SellUOM			!=	UnitOfMeasure
				and 	related.Item			=	Item))
		
		CustomerOrderLineWithOpenTransactionsRel
			one-to-many relation to CustomerOrderLine
			Field Mapping uses Set13
				related.Company					= LocalInventoryCompany
			Instance Selection
				where (not related.Status.Released
				and 	   related.Item			= Item
				and        related.SellUOM		= UnitOfMeasure)
				
		OpenTransactionLineRel		
			one-to-many relation to	InventoryTransactionLine
			Field Mapping uses	Set5
				related.Company					=	LocalInventoryCompany
			Instance Selection
				where ((not related.Status.Released
				and related.TransactionUOM		=	UnitOfMeasure
				and related.Item      			= 	Item)
				or (related.TransactionUOM		=	old UnitOfMeasure
				and related.TransactionUOM		!=	UnitOfMeasure
				and related.Item      			= 	Item))
		
		OpenTransactionLinesRel		
			one-to-many relation to	InventoryTransactionLine
			Field Mapping uses	Set5
				related.Company					=	LocalInventoryCompany
			Instance Selection
				where (related.Item      			= 	Item
				and    related.TransactionUOM		=	UnitOfMeasure
				and    not related.Status.Released)
						
		OpenVendorReturnLineRel		
			one-to-many relation to	VendorReturnLine
			Field Mapping uses symbolic key
				related.Company					=	LocalInventoryCompany
			Instance Selection
				where ((not related.VendorReturn.Status.Closed
				and related.VendorPriceUOM 		=	UnitOfMeasure
				and related.Item      			= 	Item)
				or (related.VendorPriceUOM		=	old UnitOfMeasure
				and related.VendorPriceUOM		!=	UnitOfMeasure
				and related.Item      			= 	Item))
				
		VendorReturnLineWithOpenTransactionsRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses symbolic key
				related.Company 					= LocalInventoryCompany
			Instance Selection
				where (not related.VendorReturn.Status.Closed
				and        related.Item				= Item
				and        related.VendorPriceUOM	= UnitOfMeasure)
				
		OpenPurchaseOrderLineRel		
			one-to-many relation to	PurchaseOrderLine
			Field Mapping uses Set6
				related.Company					=	LocalInventoryCompany
				related.Item      				= 	Item
			Instance Selection
				where (related.Closed.No
				and	related.ReceivedQuantity entered
				and related.VendorPriceUOMQuantity > (related.ReceivedQuantity + related.CancelQuantity )
				and related.VendorPriceUOM 		=	UnitOfMeasure
				and related.VendorPriceUOM      =	Item.StockUOM)

		PurchaseOrderLineRel		
			one-to-many relation to	PurchaseOrderLine
			Field Mapping uses Set6
				related.Company					=	LocalInventoryCompany
				related.Item      				= 	Item
			Instance Selection
				where (related.VendorPriceUOMQuantity > (related.ReceivedQuantity + related.CancelQuantity )
				and related.VendorPriceUOM 		=	UnitOfMeasure
				and (not related.Released
				or related.Closed.No))
				
		PurchaseOrderLineWithOpenTransactionsRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByItem
				related.ProcurementGroup			= 	ItemGroup
				related.Item						=	Item
			Instance Selection
				where (   related.VendorPriceUOM 	= UnitOfMeasure
				and   ((  related.ReceiptRequired and not related.IsFullyReceived)
				or   (not related.ReceiptRequired and not related.IsFullyMatched)))
							
		OpenPurchaseOrderInterfaceRel		
			one-to-many relation to	PurchaseOrderInterface
			Field Mapping uses Set3
				related.ProcurementGroup		=	ItemGroup
				related.Company					=	LocalInventoryCompany
				related.Item      				= 	Item
			Instance Selection
				where ((related.EnteredUOM 		=	UnitOfMeasure)
				or (related.EnteredUOM			=	old UnitOfMeasure
				and related.EnteredUOM			!=	UnitOfMeasure))
				
		PurchaseOrderInterfaceWithOpenTransactionsRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses Set3
				related.ProcurementGroup		= ItemGroup
				related.Company					= LocalInventoryCompany
				related.Item					= Item
			Instance Selection
				where (related.EnteredUOM		= UnitOfMeasure)
				
		StockUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= ItemGroup
				related.Item			= Item
				
		ContractLineItemUOMRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemOpen     
				related.ContractGroup	= ItemGroup
				related.ItemNumber		= Item
			Instance Selection
				where (related.UOM      = UnitOfMeasure)
				
		ConsolidatedItemMasterRel
			one-to-many relation to ConsolidatedItemMaster
			Field Mapping uses ByInternalItem     
				related.ContractGroup	    = ItemGroup
				related.InternalItem		= Item
				
		ContractLineImportItemUOMRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByItemVendorItem     
				related.ContractGroup	= ItemGroup
				related.ItemNumber		= Item
			Instance Selection
				where (related.UOM      = UnitOfMeasure)

		StockOnHandRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company							= LocalInventoryCompany
				related.InventoryLocation				= LocalInventoryLocation
				related.Item							= Item
				related.StockOnHandDetail.UnitOfMeasure	= Item.StockUOM
				related.StockOnHandDetail.Lot			= blank
				related.StockOnHandDetail.Sublot		= blank
				related.StockOnHandDetail.Bin			= blank
				
		StockOnHandQuantityRel
			one-to-many relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company									= LocalInventoryCompany
				related.InventoryLocation						= LocalInventoryLocation
				related.Item									= Item
			Instance Selection
				where (related.StockOnHandDetail.UnitOfMeasure	= UnitOfMeasure)

		PriceBaseItemsRel
  			one-to-many relation to PriceBaseItem
  			Field Mapping uses ByItem
				related.Item					= Item
			Instance Selection
				where (related.Item.ItemGroup	= ItemGroup)
				
		ItemLocationDefaultSourceUOMRel
			one-to-many relation to ItemLocation
			Field Mapping uses ByItem
				related.Item		= Item
			Instance Selection
				where (related.Company.ItemGroup = ItemGroup
				and    related.DefaultSourceUOM.UnitOfMeasure = UnitOfMeasure)

		ItemLocationDefaultTransUOMRel
			one-to-many relation to ItemLocation
			Field Mapping uses ByItem
				related.Item		   = Item
			Instance Selection
				where (related.Company.ItemGroup = ItemGroup
				and    related.DefaultTransactionUOM.UnitOfMeasure = UnitOfMeasure)

		ItemLocationSupplementalUOMRel
			one-to-many relation to ItemLocation
			Field Mapping uses ByItem
				related.Item		   = Item
			Instance Selection
				where (related.Company.ItemGroup 				= ItemGroup
				and    related.SupplementalUOM.UnitOfMeasure 	= UnitOfMeasure)

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses ByItemUOM
				related.Item								= Item
				related.UnitOfMeasure						= UnitOfMeasure
			Instance Selection
				where (related.LocationStockUOM)			

		OrderableUnitItemGTINRel
	 		one-to-many relation to ItemGTIN
		 	Field Mapping uses Set3
			 	related.ItemGroup			=	ItemGroup
			 	related.Item				=	Item		
   				related.UnitOfMeasure		=	UnitOfMeasure
   			Instance Selection
   				where (related.OrderableUnit)

	Field Rules
		UnitOfMeasure
			required
			
					
  	 		if (SerialTrackIssueOrReceipt)
				if ((UnitOfMeasure entered)
				or (UOMConversion entered))
					constraint (IsStockUOM)	
						"SerialNumberTrackedItem,AlternateUOMSNotAllowed"  				
						
					
			if 	((ValidForInventoryTransactions.Inactive)
			or 	(ValidForSelling.Inactive)
			or	(ValidForSellPrice.Inactive)
			or 	(ValidForBuying.Inactive))
				constraint (!TrackedIn)
					"CannotInactivateTrackedUOM" 										


			
			if (action type.Create)
				constraint (Item.SerialTrackedItemLocationsRel not exists)
					"CannotAddUOM,ItemIsSerial-TrackedInCompany:_<DerivedItemLocationSerialCompany>_Location:_<DerivedItemLocationSerialInventoryLocation>"
			
					
		UOMConversion
			if (IsStockUOM)
				default to 1
			required

			if (IsStockUOM)
				constraint (UOMConversion = 1)
					"UOMConversionMustBe1ForStockUOM"
					
			if (UOMConversion changed
			and not ItemGroup.AllowUOMChangesWithOpenTransactions)
				constraint (PurchaseOrderLineWithOpenTransactionsRel not exists)
					"CannotChangeUOMInfo;OpenPurchaseOrdersExist"
				for each ItemGroup.InventoryCompaniesRel
					LocalInventoryCompany = each.Company
					constraint (OpenTransactionLinesRel not exists)
						"CannotChangeUOMInfo;OpenTransactionsExist"
					constraint (CustomerOrderLineWithOpenTransactionsRel not exists)
						"CannotChangeUOMInfo;OpenCustomerOrderLinesExist"
					constraint (VendorReturnLineWithOpenTransactionsRel not exists)
						"CannotChangeUOMInfo;OpenPOReturnLinesExist"
					constraint (PurchaseOrderInterfaceWithOpenTransactionsRel not exists)
						"CannotChangeUOMInfo;OpenPOInterfaceRecordsExist"






						








					
		TrackedIn
			if ((TrackedIn changed
			or   action type.Create)
			and  not IsStockUOM)
				if (TrackedIn)
					for each Item.AllItemLocationsRel
						if (not each.BinTracked
						and  each.IsNotSerialTracked
						and  each.IsNotLotTracked)
							LocalInventoryCompany   = each.Company
							LocalInventoryLocation  = each.InventoryLocation
							if (StockOnHandRel not exist)
								if  (each.StockOnHandQuantity entered
								or   each.InspectionHoldQuantity entered
								or   each.AllocatedQuantity entered)
				
									invoke Create StockOnHandDetail					
										invoked.Company            				= each.Company
										invoked.InventoryLocation  				= each.InventoryLocation
										invoked.Item               				= Item
										invoked.StockOnHandDetail.UnitOfMeasure	= Item.StockUOM
										invoked.StockOnHandQuantity	    		= each.StockOnHandQuantity
										invoked.InspectionHoldQuantity	    	= each.InspectionHoldQuantity
										invoked.AllocatedQuantity	    		= each.AllocatedQuantity     		 
				
				else
					for each ItemGroup.InventoryCompaniesRel 
						LocalInventoryCompany	= each.Company
						constraint (OpenTransactionLineRel not exists)
							"CannotChangeUOMInfo;OpenTransactionsExist"          				
						constraint (OpenCustomerOrderUOMRel not exists)
							"CannotChangeUOMInfo;UnreleasedOrdersExist"         				
						constraint (OpenVendorReturnLineRel not exists)
							"CannotChangeUOMInfo;VendorReturnLinesExist"        				
						constraint (OpenPurchaseOrderLineRel not exists)
							"CannotChangeUOMInfo;PurchaseOrderLinesExist"       				
						constraint (OpenPurchaseOrderInterfaceRel not exists)  
							"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"   				
				
					for each Item.AllActiveItemLocationsRel
						LocalInventoryCompany   = each.Company
						LocalInventoryLocation  = each.InventoryLocation
						
						constraint (not StockOnHandQuantityRel exists)
							"CannotChangeTrackingFlag;QuantitiesExistInThisUOM"
						
						if ((not each.BinTracked
						and  each.IsNotSerialTracked
						and  each.IsNotLotTracked)
						and  OtherAlternateTrackedUOMsRel not exists)
							invoke Delete StockOnHandRel	
		
			if (TrackedIn)
				constraint (ValidForInventoryTransactions entered)
					"TrackingUOMMustBeATransactionUOM"  
			else 
			if (TrackedIn changed) 
				constraint(LocationItemUOMRel not exists)
					"CannotChangeTrackingFlag;UOMIsUsedByLocationItemUOM"
					 

		ValidForInventoryTransactions
		
			if  (ValidForInventoryTransactions changed
			and (ValidForInventoryTransactions.Inactive
			or   ValidForInventoryTransactions.NotValid)) 
				for each ItemGroup.InventoryCompaniesRel 
					LocalInventoryCompany	= each.Company
					constraint (OpenTransactionLineRel not exists)
						"CannotChangeUOMInfo;OpenTransactionsExist"          				
					constraint (OpenCustomerOrderUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedOrdersExist"         				
					constraint (OpenVendorReturnLineRel not exists)
						"CannotChangeUOMInfo;VendorReturnLinesExist"        				
					constraint (OpenPurchaseOrderLineRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderLinesExist"       				
					constraint (OpenPurchaseOrderInterfaceRel not exists)  
						"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"   				
				if (not OKForTransaction)
	 				constraint (ItemLocationSupplementalUOMRel not exists)
						"CannotChangeUOMInfoWhenUsedAsSupplementalUOMOnItemLocation"						
						
						
			if (ValidForInventoryTransactions.Inactive 
			and !old ValidForInventoryTransactions.Inactive)
				constraint(UOMItemUPCRel not exist)
					"CannotInactivate;UPCCodeExistsForUOM"   							
				constraint(UOMItemUPN1Rel not exist)
					"CannotInactivate;UPN1CodeExistsForUOM"  							
				constraint(UOMItemUPN2Rel not exist)
					"CannotInactivate;UPN2CodeExistsForUOM"  							
				constraint(UOMItemSKURel not exist)
					"CannotInactivate;SKUCodeExistsForUOM" 								 
				constraint(ItemUOMNDCRel not exist)
					"CannotInactivate;NDCCodeExistsForUOM"  							
				constraint(ItemGTINRel not exist)
					"CannotInactivate;GTINExistsForUOM"    								
			
					
		ValidForSelling
		
			if  (ValidForSelling changed
			and (ValidForSelling.Inactive
			or   ValidForSelling.NotValid)) 
				for each ItemGroup.InventoryCompaniesRel 
					LocalInventoryCompany	= each.Company
					constraint (OpenTransactionLineRel not exists)
						"CannotChangeUOMInfo;OpenTransactionsExist"  				 		
					constraint (OpenCustomerOrderUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedOrdersExist"        					
					constraint (OpenVendorReturnLineRel not exists)
						"CannotChangeUOMInfo;VendorReturnLineExist"         				
					constraint (OpenPurchaseOrderLineRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderLinesExist"        				
					constraint (OpenPurchaseOrderInterfaceRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"     				
						
			if (ValidForSelling.Inactive 
			and !old ValidForSelling.Inactive)
				constraint(UOMItemUPCRel not exist)
					"CannotInactivate;UPCCodeExistsForUOM"   							
				constraint(UOMItemUPN1Rel not exist)
					"CannotInactivate;UPN1CodeExistsForUOM"  							
				constraint(UOMItemUPN2Rel not exist)
					"CannotInactivate;UPN2CodeExistsForUOM"  							
				constraint(UOMItemSKURel not exist)
					"CannotInactivate;SKUCodeExistsForUOM" 								 
				constraint(ItemUOMNDCRel not exist)
					"CannotInactivate;NDCCodeExistsForUOM"  							
				constraint(ItemGTINRel not exist)
					"CannotInactivate;GTINExistsForUOM"    								
					
					
					
		ValidForSellPrice
		
			if  (ValidForSellPrice changed
			and (ValidForSellPrice.Inactive
			or   ValidForSellPrice.NotValid))
				for each ItemGroup.InventoryCompaniesRel 
					LocalInventoryCompany	= each.Company
					constraint (OpenTransactionLineRel not exists)
						"CannotChangeUOMInfo;OpenTransactionsExist"        					
					constraint (OpenCustomerOrderUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedOrdersExist"        					
					constraint (OpenVendorReturnLineRel not exists)
						"CannotChangeUOMInfo;VendorReturnLineExist"         				
					constraint (OpenPurchaseOrderLineRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderLinesExist"        				
					constraint (OpenPurchaseOrderInterfaceRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"     				
						
					
			if (ValidForSellPrice.Inactive  
			and !old ValidForSellPrice.Inactive)
				constraint(UOMItemUPCRel not exist)
					"CannotInactivate;UPCCodeExistsForUOM"   							
				constraint(UOMItemUPN1Rel not exist)
					"CannotInactivate;UPN1CodeExistsForUOM"  							
				constraint(UOMItemUPN2Rel not exist)
					"CannotInactivate;UPN2CodeExistsForUOM"  							
				constraint(UOMItemSKURel not exist)
					"CannotInactivate;SKUCodeExistsForUOM" 								
				constraint(ItemUOMNDCRel not exist)
					"CannotInactivate;NDCCodeExistsForUOM"  							
				constraint(ItemGTINRel not exist)
					"CannotInactivate;GTINExistsForUOM"    		
					
							
		ValidForBuying
		
			if  (ValidForBuying changed
			and (ValidForBuying.Inactive
			or   ValidForBuying.NotValid))
				for each ItemGroup.InventoryCompaniesRel 
					LocalInventoryCompany	= each.Company
					constraint (OpenTransactionLineRel not exists)
						"CannotChangeUOMInfo;OpenTransactionsExist"   						
					constraint (OpenCustomerOrderUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedOrdersExist"        					
					constraint (OpenVendorReturnLineRel not exists)
						"CannotChangeUOMInfo;VendorReturnLineExist"         				
					constraint (OpenPurchaseOrderLineRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderLinesExist"        				
					constraint (OpenPurchaseOrderInterfaceRel not exists)
						"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"     				
					
				constraint (ProcurementTemplateLineItemUOMRel not exists)
					"CannotChangeProcurementTemplateLineItemExists"   						
					
				for each  ItemContractLineRel 
					if (not each.ContractLineState.Closed)
						constraint ((each.ExpirationDate entered
									and current corporate date > each.ExpirationDate)
									or each.OnHold)
							"CannotChangeToBeNotValidForBuying;ContractLineItemExists"  	
				
				if (ValidForBuying.Inactive)
					constraint(UOMItemUPCRel not exist)
						"CannotInactivate;UPCCodeExistsForUOM"   							
					constraint(UOMItemUPN1Rel not exist)
						"CannotInactivate;UPN1CodeExistsForUOM"  							
					constraint(UOMItemUPN2Rel not exist)
						"CannotInactivate;UPN2CodeExistsForUOM"  							
					constraint(UOMItemSKURel not exist)
						"CannotInactivate;SKUCodeExistsForUOM" 								
					constraint(ItemUOMNDCRel not exist)
						"CannotInactivate;NDCCodeExistsForUOM"  							
					constraint(ItemGTINRel not exist)
						"CannotInactivate;GTINExistsForUOM"    								
						
				if (ItemLocationDefaultSourceUOMRel exists)
					constraint (OKForBuying)
						"CannotChangeUOM;UOMIsUsedByItemLocation"

		PackLevel
			constraint (HasAnotherUOMWithSamePackLevelRel not exists)
				"PackLevel<PackLevel>CannotBeDuplicated;AlreadyAssignedTo<first HasAnotherUOMWithSamePackLevelRel.UnitOfMeasure>"

        PackingWeight		
			constraint (PackingWeight > 0)
				"PackingWeightCannotBeNegative" 			
		PackingVolume	
            constraint (PackingVolume > 0)
				"PackingVolumeCannotBeNegative" 

	Rule Blocks
		ValidateInactiveUOM
			if ((ValidForInventoryTransactions changed and old ValidForInventoryTransactions.Inactive)
			or  (ValidForSelling changed and old ValidForSelling.Inactive)
			or  (ValidForSellPrice changed and old ValidForSellPrice.Inactive)
			or  (ValidForBuying changed and old ValidForBuying.Inactive))
				if (ValidForInventoryTransactions not changed)
					ValidForInventoryTransactions = ValidForInventoryTransactions.NotValid
				if (ValidForSelling not changed)
					ValidForSelling = ValidForSelling.NotValid
				if (ValidForSellPrice not changed)
					ValidForSellPrice = ValidForSellPrice.NotValid
				if (ValidForBuying not changed)
					ValidForBuying = ValidForBuying.NotValid
			else
				if (ValidForInventoryTransactions.Inactive
				or  ValidForSelling.Inactive
				or  ValidForSellPrice.Inactive
				or  ValidForBuying.Inactive)
					ValidForInventoryTransactions 	= ValidForInventoryTransactions.Inactive
					ValidForSelling 				= ValidForSelling.Inactive
					ValidForSellPrice 				= ValidForSellPrice.Inactive
					ValidForBuying 					= ValidForBuying.Inactive
				
		ValidateDefaultUOM

			if ((DefaultForInventoryTransactions and HasAnotherDefaultTransUOMRel exists)
			or  (DefaultForSelling and HasAnotherDefaultSellUOMRel exists)
			or  (DefaultForSellPrice and HasAnotherDefaultSellPriceUOMRel exists)
			or  (DefaultForBuying and HasAnotherDefaultBuyUOMRel exists))

				if (not LocalCreateFromCopy)
					confirmation required
						"Warning:_ExistingDefaultUOM(s)WillChangeIntoValidUOM(s);Proceed?"
				if (DefaultForInventoryTransactions and HasAnotherDefaultTransUOMRel exists)	
					invoke UpdateItemUOM HasAnotherDefaultTransUOMRel
						invoked.ValidForInventoryTransactions = ValidForInventoryTransactions.Valid	
				if (DefaultForSelling and HasAnotherDefaultSellUOMRel exists)
					invoke UpdateItemUOM HasAnotherDefaultSellUOMRel
						invoked.ValidForSelling = ValidForSelling.Valid  	 						
				if (DefaultForSellPrice and HasAnotherDefaultSellPriceUOMRel exists)
					invoke UpdateItemUOM HasAnotherDefaultSellPriceUOMRel
						invoked.ValidForSellPrice = ValidForSellPrice.Valid
				if (DefaultForBuying and HasAnotherDefaultBuyUOMRel exists)
					invoke UpdateItemUOM HasAnotherDefaultBuyUOMRel
						invoked.ValidForBuying = ValidForBuying.Valid
			else







 				if (ValidForInventoryTransactions changed
				or  ValidForSelling changed
				or  ValidForSellPrice changed
				or  ValidForBuying changed)
					confirmation required
						"UOMMayBeInUse;Proceed?"

	Action Exit Rules
		if (action != "T2VCreate"
		and action != "T2VUpdate")
			invoke ItemDetailChanged Item 

		if  (ConsolidatedItemMasterExists)
			invoke Update ConsolidatedItemMasterRel 			

	Actions
		CreateItemUOM is a Create Action
			restricted

		T2VCreate is a Create Action
			restricted
			default label is untranslatable
			
  		Create is a Create Action
  			valid when (!IsCatchWeightItem)   
  	 		Action Rules
  	 			include ValidateInactiveUOM
 				include ValidateDefaultUOM						
  	 			
			Exit Rules
				if (PackingWeight not entered)
					PackingWeight = Item.StockWeight * UOMConversion

				if (PackingVolume not entered)
					PackingVolume = Item.StockVolume * UOMConversion

				for each ContractLineItemUOMRel
  	 				invoke RemoveInvalidItemUOMError each
  	 				
				for each ContractLineImportItemUOMRel
					invoke RecheckErrorsAfterUOMChanges each

  	 	T2VUpdate is an Update Action
			restricted
			default label is untranslatable

  	 	Update is an Update Action
			Action Rules
				if (IsStockUOM)
					constraint (!TrackedIn changed)
						"CannotChange,StockUOMMustBeTrackedInUOM"  							
						
					if (IsCatchWeightItem)
						constraint (!ValidForSelling entered)
							"StockUOMCannotBeASellUOMForCatchWeightItem"   					
							
						constraint (!ValidForBuying entered)
							"StockUOMCannotBeABuyUOMForCatchWeightItem"    					
							
						constraint (ValidForInventoryTransactions.Default)
							"StockUOMMustBeDefaultTransactionUOMForCatchWeightItem"	
							
				if (IsSecondaryUOM)
					constraint (!TrackedIn)
						"SecondaryUOMCannotBeATrackedInUOM"   								
		
					constraint (ValidForSelling.Default)
						"SecondaryUOMMustBeDefaultSellUOMForCatchWeightItem"
						
					constraint (!ValidForSellPrice entered)
						"SecondaryUOMCannotBeASellPriceUOMForCatchWeightItem"   			
						
					constraint (ValidForBuying.Default)
						"SecondaryUOMMustBeDefaultBuyUOMForCatchWeightItem"
						
					constraint (ValidForInventoryTransactions.Valid)
						"SecondaryUOMMustBeValidTransactionUOMForCatchWeightItem"   			
				
				if (ValidForInventoryTransactions changed)
	 				constraint (not old ValidForInventoryTransactions.Default)
	 					"TheNewDefaultUOMForTransactionsMustBeUpdatedFirst"
	 				
	 			if (ValidForSelling changed)
	 				constraint (not old ValidForSelling.Default)
	 					"TheNewDefaultUOMForSellingMustBeUpdatedFirst"
	 			
	 			if (ValidForSellPrice changed)
	 				constraint (not old ValidForSellPrice.Default)
	 					"TheNewDefaultUOMForSellPriceMustBeUpdatedFirst"
	 				 
	 			if (ValidForBuying changed)
	 				constraint (not old ValidForBuying.Default)
	 					"TheNewDefaultUOMForBuyingMustBeUpdatedFirst"
	 					
				include ValidateInactiveUOM
				include ValidateDefaultUOM
	 					















						
				if (ValidForBuying changed)
					if (ValidForBuying not entered)
						if ((IsStockUOM)
	  	 				or (!IsStockUOM
	  	 				and Item.SecondaryUOM not entered))
	  	 					if (HasBuyUOMOnVendorItem)
								constraint (ValidForBuying entered)
		 							"CannotChange,UsedAsBuyUOMOnVendorItem<first VendorItemBuyUOMRel.VendorItem>"  		
		 					if (HasPriceUOMOnVendorItem)
		 						constraint (ValidForBuying entered)
		 							"CannotChange,UsedAsPriceUOMOnVendorItem<first VendorItemPriceUOMRel.VendorItem>"   
							if (HasOrderableUOMGTIN)
								constraint (ValidForBuying entered)
									"OrderableItemGTINExists.<UnitOfMeasure>MustBeAValidBuyUOM"
  	 				if (ValidForBuying.Inactive)
  	 					for each ContractLineItemUOMRel
  	 						invoke CreateInactiveItemUOMError each
  	 				if (ValidForBuying.Default
  	 				or  ValidForBuying.Valid)
  	 					if (old ValidForBuying.Inactive)
  	 						for each ContractLineItemUOMRel
  	 							invoke RemoveInactiveItemUOMError each
  	 		Exit Rules
  	 			if (UOMConversion changed
  	 			and IsSecondaryUOM)
  	 				invoke UpdateSecondaryUOMConversion Item
  	 					invoked.PrmUOMConversion	= UOMConversion
  	 			if (Item.ItemGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger)		
					increment Item.bod id.VariationID
		  	 		invoke TriggerItemMasterBOD Item
				for each ContractLineImportItemUOMRel
					invoke RecheckErrorsAfterUOMChanges each	
				if (UOMConversion changed)
					if (ItemOpenContractLineRel exists)
						for each ItemOpenContractLineRel 
							if (each.UOM.UnitOfMeasure != Item.StockUOM)
								invoke FastUpdate each
									invoked.UOMConversion = UOMConversion 
  	 								
  	 	UpdateItemUOM is an Update Action
  	 		restricted


  	 	Delete is a Delete Action
  	 	  						
  	 		valid when (!IsStockUOM)
  	 			
  	 		Entrance Rules
				constraint (!HasBuyUOMOnVendorItem)
					"CannotDelete,UsedAsBuyUOMOnVendorItem<first VendorItemBuyUOMRel.VendorItem>"    		 
 				constraint (!HasPriceUOMOnVendorItem)
					"CannotDelete,UsedAsPriceUOMOnVendorItem<first VendorItemPriceUOMRel.VendorItem>" 		 
  	 			constraint (!ValidForInventoryTransactions.Default)
  	 				"CannotDeleteUOMThatIsDefaultUOMForInventoryTransactions"
  	 			constraint (!ValidForSelling.Default)
  	 				"CannotDeleteUOMThatIsDefaultUOMForSelling"
  	 			constraint (!ValidForSellPrice.Default)
  	 				"CannotDeleteUOMThatIsDefaultUOMForSellPrice"
  	 			constraint (!ValidForBuying.Default)
  	 				"CannotDeleteUOMThatIsDefaultUOMForBuying"
  	 			constraint (ItemOpenContractLineRel not exist)
					"CannotDelete;ContractLineItemUOMExists"
				constraint (ItemLocationDefaultTransUOMRel not exists)
					"CannotDeleteUOM;UOMIsUsedByItemLocation"
 				constraint (ItemLocationSupplementalUOMRel not exists)
					"CannotDeleteUOM;UOMIsUsedByItemLocation"
				constraint (LocationItemUOMRel not exists)
					"CannotDeleteUOM;UOMIsUsedByLocationItemUOM"
  	 			
  	 			for each Item.AllActiveItemLocationsRel
					LocalInventoryCompany 	= each.Company
					LocalInventoryLocation  = each.InventoryLocation
				
					constraint (StockOnHandQuantityRel not exists)
						"CannotDelete;QuantitiesExistInThisUOM"
  	 			
  	 			for each ItemGroup.InventoryCompaniesRel 
					LocalInventoryCompany	= each.Company
	  	 			constraint (OpenTransactionLinesRel not exists)
	  	 				"CannotDeleteItemUOMUsedInInventoryTransaction"
	  	 			constraint (PurchaseOrderLineRel not exists)
	  	 				"CannotDeleteItemUOMUsedInPurchaseOrder"
  	 				constraint (OpenRequisitionLineUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedRequisitionsExist"
					constraint (OpenCustomerOrderUOMRel not exists)
						"CannotChangeUOMInfo;UnreleasedOrdersExist"
					constraint (OpenVendorReturnLineRel not exists)
						"CannotChangeUOMInfo;VendorReturnLinesExist"
					constraint (OpenPurchaseOrderInterfaceRel not exists)  
						"CannotChangeUOMInfo;PurchaseOrderInterfaceExist"
	  	 		
	  	 		if (Item.ItemGroup.BusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					increment Item.bod id.VariationID
		  	 		invoke TriggerItemMasterBOD Item
		  	 				
  	 		Action Rules
				constraint (ItemGroup.AllowUOMChangesWithOpenTransactions
				or	 		not PriceBaseItemsRel exists)
					"CannotChangeUOMInfo;OEInvoicesExist"

			Exit Rules 
				for each ContractLineImportItemUOMRel
					invoke RecheckErrorsAfterUOMChanges each


  	 	DeleteItemUOM is a Delete Action
  	 		restricted

