BankStatement is a BusinessClass
	owned by cashmgmt
	prefix is CBBS

	Ontology
		symbolic key is BankStatement

	Patterns
		implements StaticJava

	Persistent Fields
		ReferenceNumber					is Alpha 16
		StatementDate					is Date
		ExchangeDate
		StatementType					is Numeric 2
			States
				PreviousDay	value is 0
				Intraday	value is 1
		EndingBalance					is an InternationalAmount 
		AccumulatedLineAmount			is an InternationalAmount
		CurrentReconMatchNumber			is a BankStatementReconciliation
			delete ignored
		StatementCurrency				is a FromCurrency
			default label is "Currency"
		StatementStatus					is Numeric 1
			States
				Unreconciled	value is 0
				Reconciled		value is 1
				Closed			value is 2
		PostingStatus					is Numeric 1
			States
				Unposted		value is 0
				Posted			value is 1
				NoDistributions	value is 2
				PendingApproval	value is 3
				Released		value is 4	
		PositionStatus					is Numeric 1
			States
				Open		value is 0
				Finalized	value is 1
		OpeningLedger					is an InternationalAmount
		ClosingLedger					is an InternationalAmount
		OpeningAvailable				is an InternationalAmount
		ClosingAvailable				is an InternationalAmount
		OneDayFloat						is an InternationalAmount
		TwoOrMoreDaysFloat				is an InternationalAmount
			default label is "Two or More Days Float"
		ThreeOrMoreDaysFloat			is an InternationalAmount
			default label is "Three or More Days Float"
		GLCompany						is a GeneralLedgerCompany
			disable surrogates
			default label is "GlobalLedgerCompany"
		LastBankStatementLine			is Numeric 8
			disable Auditing
		BankStatementInterfaceHeader
			delete ignored
		ContextBankStatement
		CorporateBaseEndingBalance		is a CurrencyExchange
		CompanyCurrencyEndingBalance	is a CurrencyExchange
		LocationCurrencyEndingBalance	is a CurrencyExchange
		AccumulatedBaseGainLoss			is an InternationalAmount
		AccumulatedCompanyGainLoss		is an InternationalAmount
		AccumulatedLocationGainLoss		is an InternationalAmount
		MultiplyBaseCurrencyRate		is Boolean
		MultiplyCompanyCurrencyRate		is Boolean
		MultiplyLocationCurrencyRate	is Boolean
		CategorizationGroupsProcessed	is a CategorizationGroup
			disable Auditing
		CompletedReconLoadProcesses		is Numeric 3
			disable Auditing
		ApprovalCode					
		ApprovalLevel					is Numeric 8
		ReassignToApprovalLevel			is an ApprovalCodeResource
			context of ApprovalCode
		Approver						is a FinanceResource
		ApproverTeam					is a FinanceTeamField
		BackgroundGroupAsyncId			is an AsyncActionRequest
			delete ignored
		ReconciliationBalancesReport	is BinaryDocument
		CommentText
		ReconciliationApprovalStatus	is Numeric size 1
			States
				Unapproved		value is 0
				PendingApproval	value is 1
				Approved		value is 2
				Rejected		value is 3
		ReconciliationApprovalCode					is an ApprovalCode
		ReconciliationApprovalLevel					is Numeric 8
		ReconciliationReassignToApprovalLevel		is an ApprovalCodeResource
			context of ReconciliationApprovalCode
		ReconciliationApprover						is a FinanceResource
		ReconciliationApproverTeam					is a FinanceTeamField

		LineAmountTotal					is an InternationalAmount	

	Transient Fields
		InitialImport 					is Boolean
		ActiveCashForecast				is a CashForecast
			derive value from last ActiveCashForecastAccountRel.CashForecast 

	Local Fields
		CurrencyTable
		CurrencyAmount
		LocalStatementDate				is Date
		LocalBaseAmount					is an InternationalAmount
		LocalBasePeriod					is Numeric 2
		LocalCalendarStatementDate		is Date
		LocalNewCashManagementAccount	is AlphaUpper 35
		LocalDatesCreated				is Numeric 2
		LocalCreateStatementDate		is Date
		LocalCurrencyRelationship		is a CurrencyRelationship
		LocalCashManagementGroup		is like CashManagementGroup
		LocalFinancialPeriodDate		is Date
		LocalGeneralLedgerCompany		is like GeneralLedgerCompany
		LocalCashManagementAccount		is AlphaUpper 35
		LocalCashTransactionCategory	is a CashTransactionCategory
		LocalBankStatement				is a BankStatement
		LocalApprovalLevel				is Numeric 8
		LocalApprover					is a FinanceResource
		LocalApproverTeam				is a FinanceTeamField
		LocalApproverList				is Alpha 250
		LocalFirstApproverAssigned		is Boolean
		LocalRejectReason				is AlphaUpper 20
		LocalRejectComment				is Alpha size up to 500
		LocalReconciliationApprovalLevel			is Numeric 8
		LocalReconciliationApprover					is a FinanceResource
		LocalReconciliationApproverTeam				is a FinanceTeamField
		LocalReconciliationApproverList				is Alpha 250
		LocalFirstReconciliationApproverAssigned	is Boolean
		LocalReconciliationRejectReason				is AlphaUpper 20
		LocalReconciliationRejectComment			is Alpha size up to 500
		LocalPostingDate				is a PostingDate
		LocalPostingPeriod				is like GeneralLedgerCalendarPeriod
		BackgroundGroup					is AlphaUpper up to 50



		LocalReconcileByAmount			is a ReconcileByAmount

		LocalMatchedFlag				is Boolean
		LocalBoolean					is Boolean

	Context Fields
		StatementDateRange			is a DateRange
		IncludeAllStatements		is a BooleanB

	Rule Blocks
		CreateIncomingBankStatementHeaderRecords
			LocalCalendarStatementDate = StatementDate
			LocalDatesCreated = 0
			while (LocalDatesCreated < 7)
				if (CorporateCalendarDateRel exists)


					invoke Update IncomingBankStatementHeaderRel		
						invoked.EnterpriseGroup				= CashManagementGroup.EnterpriseGroup
						invoked.SystemCalendar				= CashManagementGroup.CorporateCalendar
						invoked.IncomingBankStatementHeader	= LocalCalendarStatementDate
						invoked.CashManagementGroup			= CashManagementGroup
				LocalDatesCreated = LocalDatesCreated + 1
				if (LocalCalendarStatementDate != StatementDate
				and	LocalCalendarStatementDate < current corporate date)
					LocalCreateStatementDate = LocalCalendarStatementDate
					include CreateIncomingBankStatementDetails
				LocalCalendarStatementDate = LocalCalendarStatementDate + 1 day
			LocalCreateStatementDate = StatementDate

		CreateIncomingBankStatementDetails
			if (IncomingBankStatementDetailRel exists
			and LocalCreateStatementDate = LocalStatementDate)
				invoke Update IncomingBankStatementDetailRel
					invoked.Status			= 2	
					invoked.CompletedStatus	= 2	
					invoked.TimeReceived 	= current timestamp
			else
				for each CashManagementAccountRel
					LocalNewCashManagementAccount = each.CashManagementAccount
					if (NewIncomingBankStatementDetailRel not exists)
						if (CorporateCalendarStatementDateRel.IsBankDay
						or	NewBankStatementRel exists)
							invoke Create IncomingBankStatementDetail
								invoked.EnterpriseGroup					= CashManagementGroup.EnterpriseGroup
								invoked.SystemCalendar					= CashManagementGroup.CorporateCalendar
								invoked.IncomingBankStatementHeader		= LocalCreateStatementDate
								invoked.IncomingBankStatementDetail 	= LocalNewCashManagementAccount
								if (LocalNewCashManagementAccount = CashManagementAccount
								and LocalCreateStatementDate = StatementDate)
									invoked.Status			= 2	
									invoked.CompletedStatus	= 2	
									invoked.TimeReceived 	= current timestamp
								else
								if (NewBankStatementRel exists)
									if (NewBankStatementRel.BankStatementInterfaceHeader entered)
										invoked.Status = 2	
										invoked.CompletedStatus = 1	
									else
										invoked.Status = 2	
										invoked.CompletedStatus = 2	
								else
								if (each.NoBankStatementsExpected)
									invoked.Status 			= 3	
									invoked.ExcludedStatus	= 2	
								else
									invoked.Status 			= 1	
									invoked.MissingStatus 	= 1	

		CreateIncomingBankStatementDetail
			if (IncomingBankStatementDetailRel exists)
				invoke Update IncomingBankStatementDetailRel
					invoked.Status			= 2	
					invoked.CompletedStatus	= 2	
					invoked.TimeReceived 	= current timestamp
			else
				invoke Create IncomingBankStatementDetail
					invoked.EnterpriseGroup					= CashManagementGroup.EnterpriseGroup
					invoked.SystemCalendar					= CashManagementGroup.CorporateCalendar
					invoked.IncomingBankStatementHeader		= StatementDate
					invoked.IncomingBankStatementDetail 	= CashManagementAccount
					invoked.Status							= 2	
					invoked.CompletedStatus					= 2	
					invoked.TimeReceived 					= current timestamp

		InitiateApprovalProcessFlow
			LocalCashManagementGroup		= CashManagementGroup
			LocalCashManagementAccount		= CashManagementAccount
			LocalBankStatement				= BankStatement

			initiate BankStatementDistributionApproval process
				title is "DistributionsForBankStatement:<BankStatement>WaitingForApproval"
				Variables
					LocalCashManagementGroup
					LocalCashManagementAccount
					LocalBankStatement
				URLs
					"<linkback(webapp is CashManager navigation is ProcessFlowForm text is \"ViewBankStatement\")>"

		InitiateReconciliationApprovalProcessFlow
			LocalCashManagementGroup		= CashManagementGroup
			LocalCashManagementAccount		= CashManagementAccount
			LocalBankStatement				= BankStatement

			initiate BankStatementReconciliationApproval process
				title is "ReconciliationForBankStatement:<BankStatement>WaitingForApproval"
				Variables
					LocalCashManagementGroup
					LocalCashManagementAccount
					LocalBankStatement
				URLs
					"<linkback(webapp is CashManager navigation is ProcessFlowForm text is \"ViewBankStatement\")>"
					

		BuildTeamReconciliationApproverActorList
			LocalReconciliationApproverList = ""
			LocalFirstReconciliationApproverAssigned = false
			for each FinanceTeamMembersFromCurrentReconciliationApprovalLevelRel
				if (LocalFirstReconciliationApproverAssigned)
					LocalReconciliationApproverList = LocalReconciliationApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalReconciliationApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstReconciliationApproverAssigned = true

		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true

		GetNextEscalationApprovalLevel
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam

		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first ApprovalCodeResourceRel.ApprovalLevel
				LocalApprover		= first ApprovalCodeResourceRel.Approver
				LocalApproverTeam	= first ApprovalCodeResourceRel.ApprovalTeam
			else
				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
					LocalApprover		= first LocalApprovalCodeLevelRel.Approver
					LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
				else
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam

		GetNextReconciliationEscalationApprovalLevel
			LocalReconciliationApprovalLevel		= ReconciliationApprovalLevel
			if (first LocalReconciliationApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalReconciliationApprovalLevel	= ReconciliationApprovalLevel + 1
				LocalReconciliationApprover			= first LocalReconciliationApprovalCodeLevelRel.Approver
				LocalReconciliationApproverTeam		= first LocalReconciliationApprovalCodeLevelRel.ApprovalTeam
			else
				LocalReconciliationApprovalLevel	= first LocalReconciliationApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalReconciliationApprover			= first LocalReconciliationApprovalCodeLevelRel.Approver
				LocalReconciliationApproverTeam		= first LocalReconciliationApprovalCodeLevelRel.ApprovalTeam

		GetNextReconciliationApprovalLevel
			if (ReconciliationApprovalLevel < 1)
				LocalReconciliationApprovalLevel	= first ReconciliationApprovalCodeResourceRel.ApprovalLevel
				LocalReconciliationApprover			= first ReconciliationApprovalCodeResourceRel.Approver
				LocalReconciliationApproverTeam		= first ReconciliationApprovalCodeResourceRel.ApprovalTeam
			else
				LocalReconciliationApprovalLevel		= ReconciliationApprovalLevel + 1
				if (LocalReconciliationApprovalCodeLevelRel exists)
					LocalReconciliationApprovalLevel	= first LocalReconciliationApprovalCodeLevelRel.ApprovalLevel
					LocalReconciliationApprover			= first LocalReconciliationApprovalCodeLevelRel.Approver
					LocalReconciliationApproverTeam		= first LocalReconciliationApprovalCodeLevelRel.ApprovalTeam
				else
					initialize LocalReconciliationApprovalLevel
					initialize LocalReconciliationApprover
					initialize LocalReconciliationApproverTeam

	Derived Fields
		BeginningBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.EndingBalance
			else
				return CashManagementAccount.BeginningAccountBalance

		BeginningCorporateBaseCurrencyBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.CorporateBaseEndingBalance.EnteredCurrencyAmount

		BeginningCorporateBaseCurrencyRate is a DerivedField
			type is like CurrencyExchangeRate
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.CorporateBaseEndingBalance.EnteredCurrencyRate

		BeginningCompanyCurrencyBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.CompanyCurrencyEndingBalance.EnteredCurrencyAmount

		BeginningCompanyCurrencyRate is a DerivedField
			type is like CurrencyExchangeRate
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.CompanyCurrencyEndingBalance.EnteredCurrencyRate

		BeginningLocationCurrencyBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.LocationCurrencyEndingBalance.EnteredCurrencyAmount

		BeginningLocationCurrencyRate is a DerivedField
			type is like CurrencyExchangeRate
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.LocationCurrencyEndingBalance.EnteredCurrencyRate

		ReconciledAmount is a DerivedField
			type is like InternationalAmount
			return (ReconciledDeposits + PendingDeposits - ReconciledPayments - PendingPayments)

		ReconciledDeposits is a DerivedField
			type is like InternationalAmount
			return (ReconciledDepositLineAmount + ReconciledDepositLineDetailAmount)

		ReconciledDepositLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledDepositLinesRel.LineAmount)

		ReconciledDepositLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledDepositLineDetailsRel.LineAmount)

		PendingDeposits is a DerivedField
			type is like InternationalAmount
			return (PendingDepositLineAmount + PendingDepositLineDetailAmount)

		PendingDepositLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum PendingDepositLinesRel.LineAmount)

		PendingDepositLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum PendingDepositLineDetailsRel.LineAmount)

		ReconciledPayments is a DerivedField
			type is like InternationalAmount
			return (ReconciledPaymentLineAmount + ReconciledPaymentLineDetailAmount)

		ReconciledPaymentLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPaymentLinesRel.LineAmount * -1)

		ReconciledPaymentLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPaymentLineDetailsRel.LineAmount * -1)

		PendingPayments is a DerivedField
			type is like InternationalAmount
			return (PendingPaymentLineAmount + PendingPaymentLineDetailAmount)

		PendingPaymentLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum PendingPaymentLinesRel.LineAmount * -1)

		PendingPaymentLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum PendingPaymentLineDetailsRel.LineAmount * -1)

		AllPendingDeposits is a DerivedField
			type is like InternationalAmount
			return (AllPendingDepositLineAmount + AllPendingDepositLineDetailAmount)

		AllPendingDepositLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllPendingDepositLinesRel.LineAmount)

		AllPendingDepositLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllPendingDepositLineDetailsRel.LineAmount)

		AllPendingPayments is a DerivedField
			type is like InternationalAmount
			return (AllPendingPaymentLineAmount + AllPendingPaymentLineDetailAmount)

		AllPendingPaymentLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllPendingPaymentLinesRel.LineAmount * -1)

		AllPendingPaymentLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllPendingPaymentLineDetailsRel.LineAmount * -1)

		ClearedDeposits is a DerivedField
			type is like InternationalAmount
			return (sum ClearedDepositsRel.LineAmount)

		ClearedPayments is a DerivedField
			type is like InternationalAmount
			return (sum ClearedPaymentsRel.LineAmount)

		AllUnreconciled is a DerivedField
			type is like InternationalAmount
			return (AllUnreconciledAmount + AllUnreconciledLineDetailAmount)

		AllUnreconciledAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllUnreconciledLinesRel.LineAmount)

		AllUnreconciledLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllUnreconciledLineDetailsRel.LineAmount)

		UnreconciledAmount is a DerivedField
			type is like InternationalAmount
			return (UnreconciledDeposits - UnreconciledPayments)

		UnreconciledDeposits is a DerivedField
			type is like InternationalAmount
			return (UnreconciledDepositLineAmount + UnreconciledDepositLineDetailAmount)

		UnreconciledDepositLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum UnreconciledDepositLinesRel.LineAmount)

		UnreconciledDepositLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum UnreconciledDepositLineDetailsRel.LineAmount)

		UnreconciledPayments is a DerivedField
			type is like InternationalAmount
			return (UnreconciledPaymentLineAmount + UnreconciledPaymentLineDetailAmount)

		UnreconciledPaymentLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum UnreconciledPaymentLinesRel.LineAmount * -1)

		UnreconciledPaymentLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum UnreconciledPaymentLineDetailsRel.LineAmount * -1)

		ReconciledPendingDeposits is a DerivedField
			type is like InternationalAmount
			return (ReconciledPendingDepositLineAmount + ReconciledPendingDepositLineDetailAmount)

		ReconciledPendingDepositLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPendingDepositLinesRel.LineAmount)

		ReconciledPendingDepositLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPendingDepositLineDetailsRel.LineAmount)

		ReconciledPendingPayments is a DerivedField
			type is like InternationalAmount
			return (ReconciledPendingPaymentLineAmount + ReconciledPendingPaymentLineDetailAmount)

		ReconciledPendingPaymentLineAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPendingPaymentLinesRel.LineAmount)

		ReconciledPendingPaymentLineDetailAmount is a DerivedField
			type is like InternationalAmount
			return (sum ReconciledPendingPaymentLineDetailsRel.LineAmount)

		AssignLocalPostingPeriod is a DerivedField
			type is Boolean
			LocalPostingDate = StatementDate
			LocalPostingPeriod = first GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			return true 

		OutstandingDeposits is a DerivedField
			type is like InternationalAmount
			LocalBoolean = AssignLocalPostingPeriod
			if  (CashManagementAccount.ReconcileToCashLedger.Primary
			and  CashManagementAccount.ReconcileToOtherSystem.Primary)
				return (sum UnreconciledCashLedgerDepositsRel.IssuedBankAmount + sum UnreconciledNonCashLedgerDepositsRel.TransactionAmount - ReconciledPendingDeposits)
			if  (CashManagementAccount.ReconcileToCashLedger.Primary)
				return (sum UnreconciledCashLedgerDepositsRel.IssuedBankAmount - ReconciledPendingDeposits)
			if  (CashManagementAccount.ReconcileToOtherSystem.Primary)
				return (sum UnreconciledNonCashLedgerDepositsRel.TransactionAmount - ReconciledPendingDeposits)

		OutstandingPayments is a DerivedField
			type is like InternationalAmount
			LocalBoolean = AssignLocalPostingPeriod
			if  (CashManagementAccount.ReconcileToCashLedger.Primary
			and  CashManagementAccount.ReconcileToOtherSystem.Primary)
				return (sum UnreconciledCashLedgerPaymentsRel.IssuedBankAmount + sum UnreconciledNonCashLedgerPaymentsRel.TransactionAmount + ReconciledPendingPayments)
			if  (CashManagementAccount.ReconcileToCashLedger.Primary)
				return (sum UnreconciledCashLedgerPaymentsRel.IssuedBankAmount + ReconciledPendingPayments)
			if  (CashManagementAccount.ReconcileToOtherSystem.Primary)
				return (sum UnreconciledNonCashLedgerPaymentsRel.TransactionAmount + ReconciledPendingPayments)

		UnpostedDistribution is a DerivedField
			type is like InternationalAmount
			return (sum AllEnteredStatementLineDistributionsRel.GLTransactionAmount + sum AllReleasedStatementLineDistributionsRel.GLTransactionAmount - sum AllReleasedNonCashLedgerDistributionsRel.DistributionAmount - sum AllEnteredNonCashLedgerDistributionsRel.DistributionAmount)

		PostedDistributionsForPeriod is a DerivedField
			type is like InternationalAmount
			return (sum PostedStatementLineDistributionsForPeriodRel.GLTransactionAmount - sum PostedNonCashLedgerDistributionsForPeriodRel.DistributionAmount)

		VarianceAdjustmentsNotPostedInPeriod is a DerivedField
			type is like InternationalAmount
			return (sum VarianceAdjustmentsNotPostedInPeriodRel.DerivedBankDifferenceAmount)

		ReconciledTransactionsNotPostedInPeriod is a DerivedField		
			type is like InternationalAmount
			return (sum ReconciledTransactionsNotPostedInPeriodRel.RptIssueAmt)

		CalculatedBankBalance is a DerivedField
			type is like InternationalAmount
			return (BeginningBalance + ReconciledAmount + UnreconciledAmount)

		NetLineOutOfBalanceAmount is a DerivedField
			type is like InternationalAmount
			return (EndingBalance - (BeginningBalance + NetLineAmount))

		OutOfBalanceAmount is a DerivedField
			type is like InternationalAmount
			return (EndingBalance - CalculatedBankBalance)

		OutOfBalanceDisplay is a DerivedField		
			type is MessageField
			if (NetLineAmountOutOfBalance)
				return OutOfBalanceMessage

		OutOfBalanceMessage is a MessageField
			"OutOf_Balance"

		CalculatedGeneralLedgerBalance is a DerivedField
			type is like InternationalAmount
			default label is "CalculatedGlobalLedgerBalance"
			return (CalculatedBankBalance + OutstandingDeposits - AllPendingDeposits - OutstandingPayments + AllPendingPayments - AllUnreconciled - UnpostedDistribution + PostedDistributionsForPeriod - VarianceAdjustmentsNotPostedInPeriod - ReconciledTransactionsNotPostedInPeriod)

		GeneralLedgerBalance is a DerivedField
			type is like InternationalAmount
			default label is "GlobalLedgerBalance"
			return LedgerAmount

		GeneralLedgerBalanceVariance is a DerivedField
			type is like InternationalAmount
			default label is "GlobalLedgerBalanceVariance"
			return (CalculatedGeneralLedgerBalance - GeneralLedgerBalance)

		WeeklyBeginDate is a DerivedField
			type is Date
			restricted
			return (first BankStatementByDateRel.StatementDate - 7 days)

		NumberOfNonGainLossStatementLines is a DerivedField
			type is Numeric 6
			return (instance count of NonGainLossStatementLineRel)

		CategorizationGroupsSubmitted is a DerivedField
			type is Numeric 3
			restricted
			if (ManuallyCreatedStatement)
				return 1
			else
			if (NumberOfNonGainLossStatementLines < CashManagementGroup.NumberOfCategorizationGroups)
				return (NumberOfNonGainLossStatementLines)
			else
				return (CashManagementGroup.NumberOfCategorizationGroups)

		PercentReconciled is a ComputeField
			type is Percent 3
			restricted
			((instance count of ReconciledLinesRel) / (instance count of BankStatementLine set))

		NumberOfLinesReconciled is a ComputeField
			type is Numeric 5
			restricted
			(instance count of ReconciledLinesRel)

		NumberOfLinesUnreconciled is a ComputeField
			type is Numeric 5
			restricted
			(instance count of UnreconciledLinesRel)

		NumberOfExceptionLines is a ComputeField
			type is Numeric 5
			(instance count of BankStatementLineExceptionRel)

		NetLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LineAmountTotal)	

		NetBaseCurrencyLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum NonGainLossStatementLineRel.CorporateBaseAmount)

		NetCompanyCurrencyLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum NonGainLossStatementLineRel.CompanyCurrencyAmount)

		NetLocationCurrencyLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum NonGainLossStatementLineRel.LocationCurrencyAmount)

		BaseCurrencyGainLossAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (CorporateBaseEndingBalance.EnteredCurrencyAmount - (BeginningCorporateBaseCurrencyBalance + NetBaseCurrencyLineAmount))

		CompanyCurrencyGainLossAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (CompanyCurrencyEndingBalance.EnteredCurrencyAmount - (BeginningCompanyCurrencyBalance + NetCompanyCurrencyLineAmount))

		LocationCurrencyGainLossAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocationCurrencyEndingBalance.EnteredCurrencyAmount - (BeginningLocationCurrencyBalance + NetLocationCurrencyLineAmount))

		UnadjustedBaseEndingBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (CorporateBaseEndingBalance.EnteredCurrencyAmount - AccumulatedBaseGainLoss)

		UnadjustedCompanyEndingBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (CompanyCurrencyEndingBalance.EnteredCurrencyAmount - AccumulatedCompanyGainLoss)

		UnadjustedLocationEndingBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocationCurrencyEndingBalance.EnteredCurrencyAmount - AccumulatedLocationGainLoss)

		LineDistribOutOfBalanceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum BankStatementLine set.OutOfBalanceAmount)

		BeginningCollectedBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByDateRel exists)
				return first PreviousBankStatementByDateRel.OpeningAvailable

		PositionReceipts is a DerivedField
			type is like InternationalAmount
			default label is "Receipts"
			return (sum PositionReceiptsRel.PositionAmount)

		PositionDisbursements is a DerivedField
			type is like InternationalAmount
			default label is "Disbursements"
			return (sum PositionDisbursementsRel.PositionAmount)

		PositionOtherAmounts is a DerivedField
			type is like InternationalAmount
			default label is "Other"
			return (sum PositionOtherRel.PositionAmount)

		PositionAmounts is a DerivedField
			type is like InternationalAmount
			return (PositionReceipts + PositionDisbursements + PositionOtherAmounts)

		NetCashBalance is a DerivedField
			type is like InternationalAmount
			default label is "ProjectedCashBalance"
			return (BeginningCollectedBalance + PositionReceipts + PositionDisbursements + PositionOtherAmounts)

		TargetBalance is a DerivedField
			type is like InternationalAmount
			return (CashManagementAccount.CashPositionTarget)

		TargetBalanceVariance is a DerivedField
			type is like InternationalAmount
			default label is "Variance"
			return (NetCashBalance - TargetBalance)

		TwoAndThreeDayFloat is a DerivedField
			type is like InternationalAmount
			restricted
			return (TwoOrMoreDaysFloat + ThreeOrMoreDaysFloat)

		LedgerBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (NetCashBalance + first PreviousBankStatementByDateRel.TwoAndThreeDayFloat)

		AvailableBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (LedgerBalance - TwoAndThreeDayFloat)

		CollectedBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (AvailableBalance - OneDayFloat)

		CurrentAvailableBalance is a DerivedField	
			type is like InternationalAmount
			restricted
			return CurrentAvailableBalanceRel.Balance

		IntradayBeginningBalance is a DerivedField	
			type is like InternationalAmount
			restricted
			default label is "BeginningCollectedBalance"
			if (HasCashPositionWorksheet)
				return BeginningCollectedBalance
			else
				return CurrentAvailableBalance

		IntradayEndingBalance is a DerivedField	
			type is like InternationalAmount
			restricted
			default label is "ProjectedCashBalance"
			if (HasCashPositionWorksheet)
				return NetCashBalance
			else
				return CurrentAvailableBalance

		ReportLocationStructure is a DerivedField
			type is Alpha up to 500
			restricted
			return CashManagementAccount.FullLocationStructure

		CashPositionEmailSubject is a MessageField
			restricted
			"CashPositionSummaryFor<StatementDate>"

		ReconcileToCashLedgerCount is a DerivedField
			type is Numeric 3
			restricted
			if (CashManagementAccount.ReconcileToCashLedger entered)
				return 2 














		ReconcileToOtherSystemCount is a DerivedField
			type is Numeric 3
			restricted
			if (CashManagementAccount.ReconcileToOtherSystem entered)
				return 1

		ReconcileToForecastCount is a DerivedField
			type is Numeric 3
			restricted
			if (CashManagementAccount.ReconcileToForecast entered
			and ActiveForecastExists)
				return 1

		TotalReconciliationProcesses is a ComputeField
			type is Numeric 3
			restricted
			(ReconcileToCashLedgerCount + ReconcileToOtherSystemCount + ReconcileToForecastCount + 3) 

		AllReceiptLinesAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllReceiptLinesRel.LineAmount)

		AllDisbursementLinesAmount is a DerivedField
			type is like InternationalAmount
			return (sum AllDisbursementLinesRel.ClearedPayment)

		ReceiptLinesNetActivity is a DerivedField
			type is like InternationalAmount
			default label is "NetActivity"
			return (AllReceiptLinesAmount + AllDisbursementLinesAmount)


		DerivedNextApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = ApprovalLevel
			include GetNextApprovalLevel
			return LocalApprovalLevel

		DerivedCurrentApprovalResource is a DerivedField
			type is like FinanceResource
			restricted
			return first CurrentApprovalCodeLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is like FinanceTeam
			restricted
			return first CurrentApprovalCodeLevelRel.ApprovalTeam

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays	
			else
				return 10000

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99

		DerivedCurrentReconciliationApprovalResource is a DerivedField
			type is like FinanceResource
			restricted
			return first CurrentReconciliationApprovalCodeLevelRel.Approver

		DerivedCurrentReconciliationApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentReconciliationApprovalCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentReconciliationApprovalTeam is a DerivedField
			type is like FinanceTeam
			restricted
			return first CurrentReconciliationApprovalCodeLevelRel.ApprovalTeam

		DerivedCurrentReconciliationTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamReconciliationApproverActorList
			return LocalReconciliationApproverList

		DerivedCurrentReconciliationApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentReconciliationApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentReconciliationApprovalCodeLevelRel.EscalationDays	
			else
				return 10000

		DerivedCurrentReconciliationApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentReconciliationApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentReconciliationApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99

		DisplayCurrentApproverDesc is a ConditionalField
			type is Alpha 100
			restricted
			if (Approver entered)
				Approver.PreferredSimplePresentationName
			else
				ApproverTeam.FinanceTeam.Description

		NumberOfStatementsByStatus is a ComputeField
			type is Numeric 4
			(instance count of AllBankStatementsByStatusRel)

		IsFirstStatementByStatus is a ConditionalField
			type is Boolean
			if (StatementType.PreviousDay
			and first AllBankStatementsByStatusRel.StatementStatus			= StatementStatus
			and first AllBankStatementsByStatusRel.CashManagementAccount	= CashManagementAccount
			and first AllBankStatementsByStatusRel.BankStatement			= BankStatement)
				true
			else
				false

		EndingBalanceByDate is a DerivedField
			type is like InternationalAmount
			return (sum AllBankStatementsByDateRel.CorporateBaseEndingBalance.EnteredCurrencyAmount)

		IsFirstStatementByDate is a ConditionalField
			type is Boolean
			if (StatementType.PreviousDay
			and first AllBankStatementsByDateRel.StatementDate			= StatementDate
			and first AllBankStatementsByDateRel.CashManagementAccount	= CashManagementAccount
			and first AllBankStatementsByDateRel.BankStatement			= BankStatement)
				true
			else
				false

		CashBalanceBeginDate is a DerivedField
			type is Date
			restricted
			return (first BankStatementsByDateRel.StatementDate - 7 days)

		CurrentCashCodeBalance is a DerivedField
			type is like InternationalAmount
			return (sum CashCodeRel.CurrentReconciledBalance)

		CashCodeCashPosition is a DerivedField
			type is like InternationalAmount
			return (sum CashCodeCashPositionRel.EndingBalance.TransactionAmount)

		EntryMethod is a DerivedField 
			type is Alpha 20
			if (ManuallyCreatedStatement)
				return ManualCreateMessage
			else
			if (BankStatementInterfaceHeader.FileFormat.BAI)
				return ImportBAIMessage
			else
			if (BankStatementInterfaceHeader.FileFormat.BAI2)
				return ImportBAI2Message
			else
			if (BankStatementInterfaceHeader.FileFormat.MT940)
				return ImportMT940Message
			else
			if (BankStatementInterfaceHeader.FileFormat.MT942)
				return ImportMT942Message
			else
			if (BankStatementInterfaceHeader.FileFormat.CSV)
				return ImportCSVMessage
			else
			if (BankStatementInterfaceHeader.FileFormat.CAMT053)
				return ImportCAMT053Message
			else
			if (BankStatementInterfaceHeader.FileFormat.CAMT052)
				return ImportCAMT052Message
			else
				return ImportMessage

		ManualCreateMessage is a MessageField
			"Manual"
		ImportBAIMessage is a MessageField
			"Imported-BAI"
		ImportBAI2Message is a MessageField
			"Imported-BAI2"
		ImportMT940Message is a MessageField
			"Imported-MT940"
		ImportMT942Message is a MessageField
			"Imported-MT942"
		ImportCSVMessage is a MessageField
			"Imported-CSV"
		ImportCAMT053Message is a MessageField
			"Imported-CAMT053"
		ImportCAMT052Message is a MessageField
			"Imported-CAMT052"
		ImportMessage is a MessageField
			"Imported"


		PostingPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			LocalPostingDate = StatementDate
			return first GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod

		PostingPeriodDate is a DerivedField
			type is Date
			LocalPostingDate = StatementDate
			return first GeneralLedgerClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date

		CashLedgerPostingDate is a DerivedField
			type is Date
			if (CompanySystemClosingControlRel.Control)
				if (StatementDate within CompanySystemClosingControlRel.ValidEntryDate)
					return StatementDate
				else
					return CompanySystemClosingControlRel.ValidEntryDate.Begin
			return StatementDate

		DerivedCashPositionDate is a DerivedField		
			type is Date
			if (UsePeriodEndCashCodeCashPosition)
				return PostingPeriodDate
			return StatementDate

		DerivedAppsValue	is a DerivedField
			type is like PfiAppsValue
			return "BankStatementDistributionApproval" + UniqueID	

		DerivedReconciliationAppsValue	is a DerivedField
			type is like PfiAppsValue
			return "BankStatementReconciliationApproval" + UniqueID	

		UserActionRoutingAsHtml	is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml

		DynamicMeasure is a DerivedField
			type is LPLText
			DynamicMeasure = "NetFunctionalAmount"





















		LedgerAmount is a DerivedField
			type is like InternationalAmount
			if (DynamicMeasure = "NetFunctionalAmount")
				return GeneralLedgerTotalCubeRel.NetFunctionalAmount



















		DerivedYTDTopNodeCubeValue is a StringField
			type is AlphaUpper up to 30
			CashManagementGroup.FinanceEnterpriseGroup
			"/"
			first GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod
			"_YTD"

		DerivedLTDTopNodeCubeValue is a StringField
			type is AlphaUpper up to 30
			CashManagementGroup.FinanceEnterpriseGroup
			"/"
			first GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod
			"_LTD"

		GeneralLedgerTotalCubeMap is a DerivedField
			type is LPLText
			default label is "GlobalLedgerTotalCubeMap"
			if (CashManagementAccount.ReportingBasis.CalendarTopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.EntityYearPeriod = DerivedYTDTopNodeCubeValue\n"
				else
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.EntityYearPeriod = PostingPeriod\n"

			if (CashManagementAccount.ReportingBasis.AccountingUnitTopNodeGroup.DimensionNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.AccountingUnit entered)
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.AccountingUnit = CashManagementAccount.LedgerBalanceGLAccount.AccountingUnit\n"
				else
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.AccountingUnit = CashManagementAccount.ReportingBasis.AccountingUnitTopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.ProjectTopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.Project entered)
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.Project = CashManagementAccount.LedgerBalanceGLAccount.Project\n"
				else
					GeneralLedgerTotalCubeMap += "related.GeneralLedgerTotal.Project = CashManagementAccount.ReportingBasis.ProjectTopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension1TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension1 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension1 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension1\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension1 = CashManagementAccount.ReportingBasis.FinanceDimension1TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension2TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension2 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension2 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension2\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension2 = CashManagementAccount.ReportingBasis.FinanceDimension2TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension3TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension3 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension3 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension3\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension3 = CashManagementAccount.ReportingBasis.FinanceDimension3TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension4TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension4 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension4 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension4\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension4 = CashManagementAccount.ReportingBasis.FinanceDimension4TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension5TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension5 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension5 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension5\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension5 = CashManagementAccount.ReportingBasis.FinanceDimension5TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension6TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension6 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension6 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension6\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension6 = CashManagementAccount.ReportingBasis.FinanceDimension6TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension7TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension7 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension7 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension7\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension7 = CashManagementAccount.ReportingBasis.FinanceDimension7TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension8TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension8 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension8 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension8\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension8 = CashManagementAccount.ReportingBasis.FinanceDimension8TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension9TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension9 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension9 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension9\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension9 = CashManagementAccount.ReportingBasis.FinanceDimension9TopNodeCubeValue\n"

			if (CashManagementAccount.ReportingBasis.FinanceDimension10TopNode entered)
				if (CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension10 entered)
					GeneralLedgerTotalCubeMap += "related.FinanceDimension10 = CashManagementAccount.LedgerBalanceGLAccount.FinanceDimension10\n"
				else
					GeneralLedgerTotalCubeMap += "related.FinanceDimension10 = CashManagementAccount.ReportingBasis.FinanceDimension10TopNodeCubeValue\n"

		DerivedNumberOfBankStatementLines is a DerivedField
            type is Numeric 4
            if (config.NumberOfBankStatementLines > 0)
                return config.NumberOfBankStatementLines
            else
                return 1000
		
		ImportEmailSubject is a MessageField
			restricted
			"BankStatement<BankStatement>HasBeenImported"

		ImportEmailContent is a MessageField
			restricted
			"AllRecordsHaveBeenProcessed"

		LinkbackTextForBankStatementNotifications is a MessageField
			restricted
			"ViewBankStatementNotifications"

		StatementOutOfBalanceErrorMessage is a MessageField       
			"StatementOutOfBalanceBy<NetLineOutOfBalanceAmount>"
		
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforBankStatement"

		ContextMessageText is a MessageField
			restricted
			"BankStatement<BankStatement>"
					
		DerivedPlainTextComment   is a DerivedField  
		    type is Text
		    return CommentText plain text

	Sets
		ByBankStatement
			Sort Order
				BankStatement
				CashManagementGroup
				CashManagementAccount

		ByStatementDate
			Sort Order
				CashManagementGroup
				StatementDate descending
				CashManagementAccount
				BankStatement descending	

		ByAccountDate
			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementDate
				StatementType
				BankStatement descending	

		ByAccountDescendDate
			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementDate descending
				StatementType descending
				BankStatement descending	

		ByPostingStatus
			Sort Order
				CashManagementGroup
				CashManagementAccount
				PostingStatus
				StatementStatus
				BankStatement

		ByStatementStatusAccount
			Sort Order
				CashManagementGroup
				StatementStatus
				CashManagementAccount
				BankStatement

		ByStatementAccountStatusTypeDate
			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementStatus
				StatementType
				StatementDate
				BankStatement descending	

	Conditions
		RecordExists
			restricted
			when (BankStatement exists)

		CanBeManuallyReconciled
			restricted
			when (BankStatement exists
			and   StatementType.PreviousDay
			and	  !HideReconAndCBActionRel exists
			and   !HideAnalysisButtonsForAuditor exists)

 		AccountCanBeManuallyReconciled
 			restricted
			when (StatementType.PreviousDay
			and   !HideReconAndCBActionRel exists
			and   !HideAnalysisButtonsForAuditor exists)

		WeeklyActivity
			restricted
			when (StatementDate > WeeklyBeginDate)

		HasCurrentReconciliationTransactions
			restricted
			when (CurrentReconMatchNumber	entered)

		CurrentReconciliationCanBeReconciled
			restricted
			when (CurrentReconMatchNumber.SummaryRecordCanBeReconciled)

		IsFullyReconciled
			restricted
			when (!UnreconciledStatementLinesRel exists)

		HasUncategorizedStatementLines
			restricted
			when (UncategorizedStatementLinesRel exists)

		LineDistributionsCanBeReleased
			restricted
			when (!StatementStatus.Unreconciled
			and   HasUnreleasedDistributions)

		CashLedgerTransactionsCanBeReleased
			restricted
			when (UnreleasedLineCashLedgerTransactionsRel	exists
			and   !CashManagementGroup.BankStatementDistribApprovalRequired)

		CashLedgerTransactionsCanBeReleasedByAccount		
			restricted
			when (UnreleasedLineCashLedgerTransactionsByAccountRel exists
			and  !CashManagementGroup.BankStatementDistribApprovalRequired)

		CashLedgerTransactionsCanBeSubmittedForApproval
			restricted
			when (UnreleasedLineCashLedgerTransactionsRel	exists
			and   CashManagementGroup.BankStatementDistribApprovalRequired)

		CashLedgerReconciliationCanBeSubmittedForApproval
			restricted
			when (CashManagementGroup.BankStatementReconciliationApprovalRequired 
			and  (ReconciliationApprovalStatus = ReconciliationApprovalStatus.Unapproved
				or ReconciliationApprovalStatus = ReconciliationApprovalStatus.Rejected) 
			and ReconciliationBalancesReport entered)

		LineDistributionsCanBePosted
			restricted
			when (HasReleasedDistributions)

		HasStatementLineDistributions
			restricted
			when (BankStatementLineDistribution set exists)

		HasNonCashLedgerDistributions
			restricted
			when (NonCashLedgerDistribution set exists)

		HasUnpostedStatementLineDistributions
			restricted
			when (UnpostedStatementLineDistributionsRel exists)

		HasUnpostedNonCashLedgerDistributions
			restricted
			when (UnpostedNonCashLedgerDistributionsRel exists)

		HasAnyUnpostedDistributions
			restricted
			when (AllUnpostedStatementLineDistributionsRel exists
			or    AllUnpostedNonCashLedgerDistributionsRel exists)

		HasPostedDistributionsForPeriod
			restricted
			when (PostedStatementLineDistributionsForPeriodRel exists
			or    PostedNonCashLedgerDistributionsForPeriodRel exists)

		HasPostedStatementLineDistributionsForPeriod
			restricted
			when (PostedStatementLineDistributionsForPeriodRel exists)

		HasPostedNonCashLedgerDistributionsForPeriod
			restricted
			when (PostedNonCashLedgerDistributionsForPeriodRel exists)

		HasUnreleasedDistributions
			restricted
			when (UnreleasedStatementLineDistributionsRel exists
			or    UnreleasedNonCashLedgerDistributionsRel exists)

		HasReleasedDistributions
			restricted
			when (ReleasedStatementLineDistributionsRel exists
			or    ReleasedNonCashLedgerDistributionsRel exists)

		HasBankStatementLineExceptions
			restricted
			when (BankStatementLineExceptionRel exists)

		HasPendingPaymentLines
			restricted
			when (PendingPaymentLinesRel exists
			or	  PendingPaymentLineDetailsRel exists
			or    AllPendingPaymentLinesRel	exists
			or    AllPendingPaymentLineDetailsRel exists)

		HasPendingDepositLines
			restricted
			when (PendingDepositLinesRel exists
			or	  PendingDepositLineDetailsRel exists
			or    AllPendingDepositLinesRel	exists
			or    AllPendingDepositLineDetailsRel exists)

		HasAnyPendingLines
			restricted
			when (HasPendingLines
			or	  HasPendingLineDetails)

		HasPendingLines
			restricted
			when (AllPendingLinesRel exists)

		HasPendingLineDetails
			restricted
			when (AllPendingLineDetailsRel exists)

		HasAnyUnreconciledLines
			restricted
			when (HasUnreconciledLines
			or	  HasUnreconciledLineDetails)

		HasUnreconciledLines
			restricted
			when (AllUnreconciledLinesRel exists)

		HasUnreconciledLineDetails
			restricted
			when (AllUnreconciledLineDetailsRel exists)

		OpenBankStatement
			restricted
			when (StatementType.PreviousDay
			and  (!StatementStatus.Closed
			or    PostingStatus.Unposted))

		ActiveForecastExists
			restricted
			when (ActiveCashForecastAccountRel exists)

		StatementLoadedIntoReconciliation
			restricted
			when (BankStatementReconciliation set exists)

		CanClearAllReconciliations
			restricted
			when (!StatementStatus.Closed
			and   ReconciliationSummaryRecordRel exists
			and   !HasPostedDistributionsForPeriod
			and   !HasReleasedDistributions)

		CanDeleteStatementLineReconciliations
			restricted
			when (StatementLoadedIntoReconciliation
			and   !ReconciliationSummaryRecordRel exists)

		CanDeleteOpenReconciliationTransactions
			restricted
			when (!StatementStatus.Closed
			and   OpenReconciliationTransactionsRel exists)

		StatementCanBeClosed
			restricted
			when (!PostingStatus.Unposted)

		ManuallyCreatedStatement 
			when (BankStatementInterfaceHeader !entered)

		ImportedStatementHasManuallyCreatedLines 
			when (!ManuallyCreatedStatement
			and   ManuallyCreatedImportedLineRel exists)

		CanUpdateStatement
			restricted
			when (ManuallyCreatedStatement
			and   StatementStatus.Unreconciled)

		CanLoadCashPositionWorksheet
			restricted
			when (StatementType.Intraday
			and   PositionStatus.Open)

		HasCashPositionWorksheet
			restricted
			when (StatementType.Intraday
			and   BankStatementPosition set exists
			and   !HideAnalysisButtonsForAuditor exists)

		CashPositionIsFinalized
			restricted
			when (PositionStatus.Finalized)

		CanFinalizeCashPosition
			restricted
			when (!CashPositionIsFinalized
			and	  HasCashPositionWorksheet)





		AllStatementLinesMatched
			restricted
			when (!UnmatchedStatementLineRel exists)

		HasMatchedTransactions
			restricted
			when (MatchedReconciliationTransactionsRel exists)

		HasMatchedDetailTransactions
			restricted
			when (MatchedStatementLineRel exists)

		HasPendingTransactions
			restricted
			when (RelatedPendingReconciliationTransactionsRel exists)

		HasCashLedgerReconciledVariances
			restricted
			when (CashLedgerReconciledVariancesRel exists)

		HasVarianceAdjustmentsNotPostedInPeriod
			restricted
			when (VarianceAdjustmentsNotPostedInPeriodRel exists)

		HasReconciledTransactionsNotPostedInPeriod	
			restricted
			when (ReconciledTransactionsNotPostedInPeriodRel exists)

		HasLines
			restricted
			when (BankStatementLineRel exists
			and !HideAnalysisButtonsForAuditor exists)

		HasBalances
			restricted
			when (BankStatementBalance set exists)

		ShowReconciliationAnalysisButton
			restricted
			when (StatementType.PreviousDay
			and   !HideAnalysisButtonsForAuditor exists)

		ManualStatementInBalance
			restricted
			when (ManuallyCreatedStatement
			and  (BeginningBalance + AccumulatedLineAmount) = EndingBalance)

		AccountCurrencyDifferentFromBase
			restricted
			when (CashManagementAccount.Currency != CashManagementGroup.Currency)

		AccountCurrencyDifferentFromCompany
			restricted
			when (CashManagementAccount.Currency	!= CashManagementAccount.LegalEntity.Currency)

		AccountCurrencyDifferentFromLocation
			restricted
			when (CashManagementAccount.Currency	!= CashManagementAccount.CashManagementLocation.Currency)

		HasDifferentBaseOrCompanyOrLocationCurrency
			restricted
			when (AccountCurrencyDifferentFromBase
			or    AccountCurrencyDifferentFromCompany
			or    AccountCurrencyDifferentFromLocation)

		AccountNotReconciled
			restricted
			when (CashManagementAccount.ReconcileToCashLedger.NotReconciled
			and   CashManagementAccount.ReconcileToForecast.NotReconciled

			and   CashManagementAccount.ReconcileToOtherSystem.NotReconciled)

		CanCloseNotReconciledAccount
			restricted
			when (StatementType.Intraday
			or   (AccountNotReconciled
			and   !BankStatementLineDistribution set exists
			and   !NonCashLedgerDistribution set exists))

		HasApprovalComments
			restricted
			when (BankStatementReasonCodeUsage set exists)

		CanReconcileNotReconciledAccount
			restricted
			when (AccountNotReconciled
			and  (BankStatementLineDistribution set exists
				or NonCashLedgerDistribution set exists))

		NetLineAmountOutOfBalance
			restricted
			when (NetLineOutOfBalanceAmount entered)

		IsBalanceOnly
			restricted
			when (!BankStatementLine set exists)

		RejectStatementDistribReasonCodeRequired
			restricted
			when (CashManagementGroup.RejectStatementDistribReasonCodeRequired)

		RejectStatementReconReasonCodeRequired
			restricted
			when (CashManagementGroup.RejectBankStatementReconReasonCodeRequired)

		WeeklyCashBalanceActivity
			restricted
			when (StatementDate > CashBalanceBeginDate)

		HasCashLedgerTransactionCreatedFromLine
			restricted
			when (CashLedgerTransaction set exists)

		HasCashCodeBalancesForPeriod
			restricted
			when (BankAccountBalanceRel exists)

		HasCashLedgerConsolidationForPeriod
			restricted
			when (LastStatementForPeriod
			and   LastCashLedgerConsolidationForPeriodRel exists)

		HasCashLedgerConsolidationForDay
			restricted
			when (!LastStatementForPeriod
			and   CashLedgerConsolidationRel exists)

		LastStatementForPeriod
			restricted
			when (NextBankStatementByDateRel	exists
			and   NextBankStatementByDateRel.PostingPeriodDate > PostingPeriodDate)

		UsePeriodEndCashCodeCashPosition					
			restricted
			when (StatementDateCashCodeCashPosition	!exists
			and   PeriodEndCashCodeCashPositionRel	exists
			and  (NextBankStatementByDateRel		!exists
			or    LastStatementForPeriod))

		HasNonFinishedTriggers
			restricted
			when (BackgroundGroupNonFinishedTriggersRel exists)

		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		ShowSelectedTransactionsHelperList
			restricted
			when (SummaryReconHelperListTransactionsRel exists)

		ReportingBasisNotEntered
			restricted
			when (!CashManagementAccount.ReportingBasis entered)

		TransactionApprovalCodeRequired
			restricted
			when (CashManagementGroup.BankStatementDistribApprovalRequired
			and   !CashManagementGroup.ApprovalCodesNotUsedForCashTransactions)

		ReconciliationApprovalCodeRequired
			restricted
			when (CashManagementGroup.BankStatementReconciliationApprovalRequired
			and   !CashManagementGroup.ApprovalCodesNotUsedForBankStatementReconciliation)

		HasReconciliationApprovalComments
			restricted
			when (BankStmtReconReasonCodeUsage set exists)

		HasApprovedReconciliation
			restricted
			when (ReconciliationApprovalStatus = ReconciliationApprovalStatus.Approved)

		StatementCanBeReconciled
			restricted
			when ((CashManagementAccount.ReconcileToCashLedger.Primary
			and    StatementDate	> all CashCodeRel.CurrentAccountBalanceDate)
			or     !CashManagementAccount.ReconcileToCashLedger.Primary)

		LoadAndReconcileValid		
			restricted
			when (StatementStatus.Unreconciled
			and   StatementType.PreviousDay)

		StatementBalancesReportCreated
			restricted
			when (ReconciliationBalancesReport entered)

		WithinAccountDateRange
			restricted
			when (StatementDateRange not entered
			or	 (StatementDateRange entered
			and	  StatementDate within StatementDateRange))

		HasLinesMissingDetails
			restricted
			when (BankStatementLineMissingDetailsRel exists)

		HasLinesNotEqualToDetails
			restricted
			when (BankStatementLineDetailsNotEqualRel exists)

		UsesListOverListManualReconView
			restricted
			when (!CashManagementAccountReconciliationViewRel exists
			or	  CashManagementAccountReconciliationViewRel.UseListOverListView)

		ReconciliationBalancesReportVersionsExist	
			restricted
			when (BankStatementHistoryRel exists)

		BankStatementHasReconDifferences							
			restricted
			when (SummaryRecordsWithReconDifferenceRel exists)

		BudgetEditInProgress
			restricted
			when (PostingStatus.Released
			and  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  (BankStatementLineBudgetEditInProcessRel exists
			or   NonCashLedgerTransactionBudgetEditInProcessRel exists))
 
		BudgetEditInFailure
			restricted
			when (PostingStatus.Released
			and  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  (BankStatementLineBudgetFailureRel exists
			or   NonCashLedgerTransactionBudgetFailureRel exists))

		CanStatementUnreconcile		
			restricted
			when (!ReconciliationSummaryRecordRel exists
			and !HasReleasedDistributions
			and !HasPostedDistributionsForPeriod
			and AccountNotReconciled)
		
		IsValidForActorContext	
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))
				
	Relations
		BankStatementLineRel is a BankStatementLine set

		BankStatementLineReconStatusRel is a BankStatementLineReconStatus set

		AllReceiptLinesRel is a BankStatementLine set
			Instance Selection
				where (related.DebitCreditIndicator.Credit)

		AllDisbursementLinesRel is a BankStatementLine set
			Instance Selection
				where (related.DebitCreditIndicator.Debit)

		CashLedgerReconciliationStatementRel
			one-to-many relation to CashLedgerReconciliationStatement
			Field Mapping uses ByStatementNumber
				related.CashLedgerReconciliationStatement.StatementNumber = BankStatement








		ClearedDepositsRel is a BankStatementLine set
			Instance Selection
				where (related.DebitCreditIndicator.Credit)

		ReconciledLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
			Instance Selection
				where (!related.LineStatus.Unreconciled)

		UnreconciledLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 0 

		ReconciledDepositLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and	  !related.HasStatementLineDetails)

		ReconciledDepositLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Credit)

		UnreconciledDepositLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 0 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and	  !related.HasStatementLineDetails)

		UnreconciledDepositLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 0 
			Instance Selection
				where (related.DebitCreditIndicator.Credit)

		PendingDepositLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and	  !related.HasStatementLineDetails)

		PendingDepositLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Credit)

		ReconciledPendingDepositLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and    related.PendingReconcileDate	entered
				and    (related.PendingReconcileDate	> StatementDate
				or     (related.PendingReconcileDate 	= StatementDate		
				and     related.BankStatement 			> BankStatement))	
				and	   !related.HasStatementLineDetails)

		ReconciledPendingDepositLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and    related.PendingReconcileDate	entered
				and    (related.PendingReconcileDate	> StatementDate
				or     (related.PendingReconcileDate 	= StatementDate		
				and     related.BankStatement 			> BankStatement)))	

		AllPendingDepositLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineStatus				= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and    related.StatementDate <= StatementDate
				and	  !related.HasStatementLineDetails)

		AllPendingDepositLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineDetailStatus		= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Credit
				and    related.StatementDate <= StatementDate)

		ClearedPaymentsRel is a BankStatementLine set
			Instance Selection
				where (related.DebitCreditIndicator.Debit)

		ReconciledPaymentLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and	  !related.HasStatementLineDetails)

		ReconciledPaymentLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Debit)

		UnreconciledPaymentLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 0 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and	  !related.HasStatementLineDetails)

		UnreconciledPaymentLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 0 
			Instance Selection
				where (related.DebitCreditIndicator.Debit)

		PendingPaymentLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and	  !related.HasStatementLineDetails)

		PendingPaymentLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Debit)

		ReconciledPendingPaymentLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and    related.PendingReconcileDate	entered
				and    (related.PendingReconcileDate	> StatementDate
				or     (related.PendingReconcileDate 	= StatementDate		
				and     related.BankStatement 			> BankStatement))	
				and	  !related.HasStatementLineDetails)

		ReconciledPendingPaymentLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineDetailStatus		= 1 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and    related.PendingReconcileDate	entered
				and    (related.PendingReconcileDate	> StatementDate
				or     (related.PendingReconcileDate 	= StatementDate		
				and     related.BankStatement 			> BankStatement)))	

		AllPendingPaymentLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineStatus				= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and    related.StatementDate <= StatementDate
				and	  !related.HasStatementLineDetails)

		AllPendingPaymentLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineDetailStatus		= 2 
			Instance Selection
				where (related.DebitCreditIndicator.Debit
				and    related.StatementDate <= StatementDate)

		AllPendingLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineStatus				= 2 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllPendingLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineDetailStatus		= 2 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllUnreconciledLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineStatus				= 0 
			Instance Selection
				where (related.StatementDate <= StatementDate
				and	   related.BankStatement.StatementType.PreviousDay
				and	  !related.HasStatementLineDetails)

		AllUnreconciledLineDetailsRel
			one-to-many relation to BankStatementLineDetail
			Field Mapping uses	ByReconciledStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineDetailStatus		= 0 
			Instance Selection
				where (related.StatementDate <= StatementDate
				and	   related.BankStatement.StatementType.PreviousDay)

		UnreconciledStatementLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses	ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.LineStatus				= 0 

		UnreleasedLineCashLedgerTransactionsRel is a CashLedgerTransaction set
			Instance Selection
				where (related.Status.Unreleased)

		ReleasedLineCashLedgerTransactionsRel is a CashLedgerTransaction set
			Instance Selection
				where (!related.Status.Unreleased)

		UnreleasedLineCashLedgerTransactionsByAccountRel		
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where (related.Status.Unreleased
				and    related.CreatedFromBankStatement entered)

		UnreconciledCashLedgerTransactionsRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where (related.GeneralLedgerPostDate <= PostingPeriodDate		
				and   (related.Status.Open
				or    (related.Status.Reconciled
				and    related.ReconciliationData.ExchangeDate > StatementDate)
				or    (related.Status > 2
				and    related.ReconciliationData.ExchangeDate > PostingPeriodDate)))

		UnreconciledCashLedgerDepositsRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.GeneralLedgerPostDate <= PostingPeriodDate		
				and     related.BankTransactionSign	= "CR")
				and    (related.Status.Open
				or     (related.Status.Reconciled
				and     related.ReconciliationData.ExchangeDate > StatementDate)
				or     (related.Status > 2
				and     related.ReconciliationData.ExchangeDate > PostingPeriodDate)))

		UnreconciledCashLedgerPaymentsRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.GeneralLedgerPostDate <= PostingPeriodDate		
				and     related.BankTransactionSign	= "DR")
				and    (related.Status.Open
				or     (related.Status.Reconciled
				and     related.ReconciliationData.ExchangeDate	> StatementDate)
				or     (related.Status > 2
				and     related.ReconciliationData.ExchangeDate	> PostingPeriodDate)))

		ReconciledTransactionsNotPostedInPeriodRel						
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where (related.GeneralLedgerPostDate > PostingPeriodDate
				and    related.Status.Reconciled
				and    related.ReconciliationData.ExchangeDate <= StatementDate)

		CashLedgerReconciledVariancesRel
			one-to-many relation to CashLedgerReconciliationAdjustment
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup	   			= CashManagementGroup
				related.CashManagementAccount  			= CashManagementAccount
				related.Status				   			= "0"

		VarianceAdjustmentsNotPostedInPeriodRel
			one-to-many relation to CashLedgerReconciliationAdjustment
			Field Mapping uses ByCashManagementAccountByPostDate
				related.CashManagementGroup	   			= CashManagementGroup
				related.CashManagementAccount  			= CashManagementAccount
			Instance Selection
				where (related.PostDate			   				> PostingPeriodDate
				and    related.ReconciliationData.ExchangeDate	<= PostingPeriodDate)

		UnreconciledNonCashLedgerTransactionsRel
			one-to-many relation to NonCashLedgerTransaction
			Field Mapping uses ByStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.Status.Open
				or     (related.Status.Reconciled
				and     related.ReconciledDate > StatementDate)
				or     (related.VoidTransaction
				and     related.VoidDatePeriod >= PostingPeriod))
				and     related.TransactionPostingDatePeriod <= PostingPeriod)

		UnreconciledNonCashLedgerDepositsRel
			one-to-many relation to NonCashLedgerTransaction
			Field Mapping uses ByStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.Status.Open
				or     (related.Status.Reconciled
				and     related.ReconciledDate > StatementDate)
				or     (related.VoidTransaction
				and     related.VoidDatePeriod >= LocalPostingPeriod))
				and     related.TransactionPostingDatePeriod <= LocalPostingPeriod
				and     related.DebitCreditIndicator.Credit)

		UnreconciledNonCashLedgerPaymentsRel
			one-to-many relation to NonCashLedgerTransaction
			Field Mapping uses ByStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.Status.Open
				or     (related.Status.Reconciled
				and     related.ReconciledDate > StatementDate)
				or     (related.VoidTransaction
				and     related.VoidDatePeriod >= LocalPostingPeriod))
				and     related.TransactionPostingDatePeriod <= LocalPostingPeriod
				and     related.DebitCreditIndicator.Debit)

		BankStatementByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDescendDate
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount

		PreviousBankStatementByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDescendDate
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where ((related.StatementDate 	< StatementDate		
				or     (related.StatementDate 	= StatementDate		
				and     related.BankStatement 	< BankStatement))	
				and     related.StatementType.PreviousDay)

		NextBankStatementByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup	  = CashManagementGroup
				related.CashManagementAccount = CashManagementAccount
			Instance Selection
				where (related.BankStatement	!= BankStatement
				and    (related.StatementDate 	> StatementDate
				or     (related.StatementDate 	= StatementDate		
				and     related.BankStatement 	> BankStatement))	
				and    related.StatementType.PreviousDay)

		NextUnreconciledBankStatementByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup	  = CashManagementGroup
				related.CashManagementAccount = CashManagementAccount
			Instance Selection
				where (related.BankStatement	!= BankStatement
				and    (related.StatementDate 	> StatementDate
				or     (related.StatementDate 	= StatementDate		
				and     related.BankStatement 	< BankStatement))	
				and    related.StatementType.PreviousDay
				and    related.StatementStatus.Unreconciled)

		DuplicateBankStatementRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.StatementDate			= StatementDate
			Instance Selection
				where (related.StatementType.PreviousDay)

		BankStatementLinesByCategoryRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByCategory
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement

		UncategorizedCategoryRel
			one-to-many relation to CashTransactionCategory
			Field Mapping uses ByUncategorizedCategory
				related.CashManagementGroup		= CashManagementGroup
				related.UncategorizedCategory	= true

		UncategorizedStatementLinesRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByCategory
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.CashTransactionCategory	= first UncategorizedCategoryRel.CashTransactionCategory

		BankStatementLinesByReconciledStatusRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByReconciledStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement

		CategorizedBankStatementLinesRel is a BankStatementLine set
			Instance Selection
				where (related.CashTransactionCategory entered)

		CashTransactionCategoryRel
			one-to-many relation to CashTransactionCategory
			Field Mapping uses symbolic key
				related.CashManagementGroup	= CashManagementGroup

		ActiveCashForecastAccountRel
			one-to-many relation to CashForecastAccount
			Field Mapping uses ByCashManagementAccount
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecastAccount.CashManagementAccount = CashManagementAccount
			Instance Selection
				where (related.CashForecast.Status.Active
				and    !related.CashForecast.Simulated
				and	   StatementDate within related.CashForecast.ForecastDateRange)

		UnreleasedStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 0 

		PendingApprovalStatementLineDistributionsRel	
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 3 

		ReleasedStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 1 

		UnpostedStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
			Instance Selection
				where (!related.Status.Posted)

		PostedStatementLineDistributionsRel		
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
			Instance Selection
				where (related.Status.Posted)

		AllEnteredStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 0 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllReleasedStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 1 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllUnpostedStatementLineDistributionsRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where (!related.Status.Posted
				and     related.StatementDate <= StatementDate)

		PostedStatementLineDistributionsForPeriodRel
			one-to-many relation to BankStatementLineDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 2 
			Instance Selection
				where (related.StatementDate > StatementDate
				and    related.PostingDate <= PostingPeriodDate)

		UnreleasedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 0 

		PendingApprovalNonCashLedgerDistributionsRel	
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 3 

		ReleasedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 1 

		UnpostedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
			Instance Selection
				where (!related.Status.Posted)

		AllEnteredNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 0 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllReleasedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 1 
			Instance Selection
				where (related.StatementDate <= StatementDate)

		AllUnpostedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
			Instance Selection
				where (!related.Status.Posted
				and     related.StatementDate <= StatementDate)

		PostedNonCashLedgerDistributionsForPeriodRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatusByAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.Status					= 2 
			Instance Selection
				where (related.StatementDate > StatementDate
				and    related.PostingDate <= PostingPeriodDate)

		OutOfBalanceNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 0 
			Instance Selection
				where (related.OutOfBalance)

		PostedNonCashLedgerDistributionsRel
			one-to-many relation to NonCashLedgerDistribution
			Field Mapping uses ByDistributionStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.Status					= 2 

		BlankCategorizationGroupRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByCategorizationGroup
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.CategorizationGroup		= blank

		BankStatementLinesByCategorizationGroupRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByCategorizationGroup
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement







		BankStatementLineExceptionRel
			one-to-many relation to BankStatementLine
			Field Mapping uses ByHasLineException
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.HasLineException		= true

		BankStatementReconciliationRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= false
			Instance Selection
				where (related.BankStatement	= BankStatement
				or     related.BankStatement	!entered)

		SummaryReconciliationTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= true
			Instance Selection
				where (related.BankStatement	= BankStatement
				or     related.BankStatement	!entered)

		SummaryReconHelperListTransactionsRel
			one-to-many relation using SummaryReconciliationTransactionsRel
			Instance Selection
				where (related.HelperListTransactions)








		MatchedReconciliationTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= true
				related.BankStatement			= BankStatement

		RelatedPendingReconciliationTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses ByPendingStatementLine
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.PendingStatementLine	= true
			Instance Selection
				where (related.BankStatement	= BankStatement
				or    (related.BankStatement	!entered
				and    related.SummaryRecord))

		SummaryPendingReconciliationTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses ByPendingStatementLine
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.PendingStatementLine	= true
			Instance Selection
				where (related.SummaryRecord)

		ReconciliationSummaryRecordRel is a BankStatementReconciliation set
			Instance Selection
				where (related.SummaryRecord
				or     related.LineStatus.Pending)

		OpenReconciliationTransactionsRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses ByLineStatus
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.LineStatus				= "0" 
			Instance Selection
				where (related.LineType					> 1
				and    related.ReconMatchNumber			!entered
				and   !related.SelectedForReconciliation
				and   !related.SummaryRecord)

		UnmatchedStatementLineRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= false
				related.BankStatement			= BankStatement
			Instance Selection
				where (related.ReconSummaryRecord !entered)

		MatchedStatementLineRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= false
				related.BankStatement			= BankStatement
			Instance Selection
				where (related.ReconMatchNumber entered)

		SelectedBankStatementReconciliationRel
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses ByTransactionDate
				related.CashManagementGroup			= CashManagementGroup
				related.CashManagementAccount		= CashManagementAccount
				related.SelectedForReconciliation	= true
			Instance Selection
				where (CurrentReconMatchNumber	entered
				and    related.ReconMatchNumber	= CurrentReconMatchNumber)

		SummaryRecordsWithReconDifferenceRel											
			one-to-many relation to BankStatementReconciliation
			Field Mapping uses BySummaryRecordBankStatement
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.SummaryRecord			= true 
				related.BankStatement			= BankStatement
			Instance Selection
				where (related.SummaryIncludesReconDiff)










































		UnenteredPositionAmountRel is a BankStatementPosition set
			Instance Selection
				where (related.PositionAmount = 0)

		EnteredPositionAmountRel is a BankStatementPosition set
			Instance Selection
				where (related.PositionAmount entered)

		PositionReceiptsRel
			one-to-many relation to BankStatementPosition
			Field Mapping uses ByNaturalBalance
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.NaturalBalance			= "C" 

		PositionDisbursementsRel
			one-to-many relation to BankStatementPosition
			Field Mapping uses ByNaturalBalance
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.NaturalBalance			= "D" 

		PositionOtherRel
			one-to-many relation to BankStatementPosition
			Field Mapping uses ByNaturalBalance
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
				related.NaturalBalance			= blank

		CurrentAvailableBalanceRel	
			one-to-many relation to BankStatementBalance
			Field Mapping uses symbolic key
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement
			Instance Selection
				where (related.TransactionType = "060")






		CorporateCalendarDateRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup	= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar	= CashManagementGroup.CorporateCalendar

		CorporateCalendarStatementDateRel
			one-to-one relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup		= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar		= CashManagementGroup.CorporateCalendar
				related.SystemCalendarDate	= LocalCreateStatementDate

		IncomingBankStatementHeaderRel
			one-to-one relation to IncomingBankStatementHeader
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar				= CashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCalendarStatementDate

		IncomingBankStatementDetailRel
			one-to-one relation to IncomingBankStatementDetail
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar 				= CashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCreateStatementDate
				related.IncomingBankStatementDetail	= CashManagementAccount

		CashManagementAccountRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup = CashManagementGroup

		NewIncomingBankStatementDetailRel
			one-to-one relation to IncomingBankStatementDetail
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar				= CashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCreateStatementDate
				related.IncomingBankStatementDetail	= LocalNewCashManagementAccount

		NewBankStatementRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= LocalNewCashManagementAccount
				related.StatementDate			= LocalCreateStatementDate

		HideReconAndCBActionRel
			one-to-many relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor = actor
			Instance Selection
				where (related.ActorRole.Role	= "RECONReconciler_ST"
				or     related.ActorRole.Role	= "RECONJournalProcessor_ST"
				or		related.ActorRole.Role	= "RECONAuditor_ST")

		HideAnalysisButtonsForAuditor
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= actor
				related.ActorRole.Role	= "RECONAuditor_ST"

		StatementLineCurrencyGainLossRel is a BankStatementLine set
			Instance Selection
				where (related.CurrencyGainLossLine)

		NonGainLossStatementLineRel is a BankStatementLine set
			Instance Selection
				where (!related.CurrencyGainLossLine)

		BankStatementTotalRel
			one-to-one relation to BankStatementTotal
			Field Mapping uses symbolic key
				related.CashManagementGroup							= LocalCashManagementGroup
				related.BankStatementTotal.FinancialPeriodDate		= LocalFinancialPeriodDate
				related.BankStatementTotal.LegalEntity				= LocalGeneralLedgerCompany
				related.BankStatementTotal.CashManagementAccount	= LocalCashManagementAccount
				related.BankStatementTotal.CashTransactionCategory	= LocalCashTransactionCategory

		BankStatementTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "BankStatementTotal"

		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel

		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode

		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel
				
		LocalReconciliationApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ReconciliationApprovalCode
				related.ApprovalLevel			= LocalReconciliationApprovalLevel

		CurrentReconciliationApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ReconciliationApprovalCode
				related.ApprovalLevel			= ReconciliationApprovalLevel

		ReconciliationApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ReconciliationApprovalCode

		FinanceTeamMembersFromCurrentReconciliationApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.FinanceTeam				= first CurrentReconciliationApprovalCodeLevelRel.ApprovalTeam

		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam

		IntradayStatementDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByStatementDate
				related.CashManagementGroup		= CashManagementGroup
				related.StatementDate			= LocalStatementDate
				related.CashManagementAccount	= LocalCashManagementAccount
			Instance Selection
				where (related.StatementType.Intraday
				and    related.UniqueID != UniqueID)

		NoCashPositionIntradayStatementDateRel
			one-to-many relation using IntradayStatementDateRel
			Instance Selection
				where (!related.HasCashPositionWorksheet)

		BankStatementsByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByStatementDate
				related.CashManagementGroup = CashManagementGroup
			Instance Selection
				where (StatementType.PreviousDay)

		AllBankStatementsByDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByStatementDate
				related.CashManagementGroup	= CashManagementGroup
				related.StatementDate		= StatementDate
			Instance Selection
				where (StatementType.PreviousDay)

		AllBankStatementsByStatusRel
			one-to-many relation to BankStatement
			Field Mapping uses ByStatementStatusAccount
				related.CashManagementGroup	= CashManagementGroup
				related.StatementStatus		= StatementStatus
			Instance Selection
				where (StatementType.PreviousDay)

		CashCodeRel
			one-to-many relation to CashCode
			Field Mapping uses Set3
				related.CashManagementGroup			= CashManagementGroup
				related.FinancialInstitution		= CashManagementAccount.FinancialInstitution
				related.FinancialInstitutionBranch	= CashManagementAccount.FinancialInstitutionBranch
				related.BankAccountNumber			= CashManagementAccount

		BankAccountBalanceDateRel
			one-to-many relation to BankAccountBalance
			Field Mapping uses symbolic key
				related.CashManagementGroup	= CashManagementGroup
				related.CashCode			= CashCodeRel.CashCode
			Instance Selection
				where (related.BankAccountBalance <= PostingPeriodDate)

		BankAccountBalanceRel
			one-to-many relation to BankAccountBalance
			Field Mapping uses ByBankAccountBalance
				related.CashManagementGroup	= CashManagementGroup
				related.BankAccountBalance	= last BankAccountBalanceDateRel.BankAccountBalance
			Instance Selection
				where (related.CashCode		= any CashCodeRel.CashCode)

		CashLedgerConsolidationDateRel
			one-to-many relation to CashLedgerConsolidation
			Field Mapping uses symbolic key
				related.CashManagementGroup	= CashManagementGroup
				related.CashCode			= CashCodeRel.CashCode
			Instance Selection
				where (related.CashLedgerConsolidation.BankTransactionCode	= blank
				and    related.CashLedgerConsolidation.Company				= blank
				and    related.CashLedgerConsolidation.LastMaintenanceDate <= PostingPeriodDate)

		LastCashLedgerConsolidationForPeriodRel
			one-to-many relation to CashLedgerConsolidation
			Field Mapping uses Set2
				related.CashManagementGroup							= CashManagementGroup
				related.CashLedgerConsolidation.LastMaintenanceDate	= last CashLedgerConsolidationDateRel.CashLedgerConsolidation.LastMaintenanceDate
			Instance Selection
				where (related.CashCode										= any CashCodeRel.CashCode
				and    related.CashLedgerConsolidation.Company				= blank
				and    related.CashLedgerConsolidation.BankTransactionCode	= blank)

		CashLedgerConsolidationRel
			one-to-many relation to CashLedgerConsolidation
			Field Mapping uses Set2
				related.CashManagementGroup							= CashManagementGroup
				related.CashLedgerConsolidation.LastMaintenanceDate	= StatementDate
			Instance Selection
				where (related.CashCode										= any CashCodeRel.CashCode
				and    related.CashLedgerConsolidation.Company				= blank
				and    related.CashLedgerConsolidation.BankTransactionCode	= blank)

		ManuallyCreatedImportedLineRel is a BankStatementLine set
			Instance Selection
				where (related.ManuallyCreatedForImportedStatement)

		GeneralLedgerClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.GeneralLedgerCloseConfiguration	= CashManagementAccount.LegalEntity.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date >= LocalPostingDate)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "CB"
				related.Company					= CashManagementAccount.LegalEntity

		BackgroundGroupNonFinishedTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = BackgroundGroupAsyncId
			Instance Selection
				where (related.BackgroundGroup entered
				and	   related.NonFinishedTriggersExist)

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "BANKSTATEMENT"	
				related.AppsValue	= DerivedAppsValue

		PfiReconciliationWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "BANKSTATEMENT"	
				related.AppsValue	= DerivedReconciliationAppsValue

		GeneralLedgerPeriodShadowRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= CashManagementGroup
				related.GeneralLedgerCalendar		= CashManagementAccount.ReportingBasis.GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod	= PostingPeriod
			Instance Selection
				where (related.SummaryPeriodType.Month)

		CashCodeCashPositionRel
			one-to-many relation to CashCodeCashPosition
			Field Mapping uses ByDescendingDateCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashCodeCashPosition	= DerivedCashPositionDate 	
				related.CashManagementAccount	= CashManagementAccount

		StatementDateCashCodeCashPosition									
			one-to-many relation to CashCodeCashPosition
			Field Mapping uses ByDescendingDateCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashCodeCashPosition	= StatementDate
				related.CashManagementAccount	= CashManagementAccount

		PeriodEndCashCodeCashPositionRel									
			one-to-many relation to CashCodeCashPosition
			Field Mapping uses ByDescendingDateCashManagementAccount
				related.CashManagementGroup		= CashManagementGroup
				related.CashCodeCashPosition	= PostingPeriodDate
				related.CashManagementAccount	= CashManagementAccount

		BankStatementLineMissingDetailsRel is a BankStatementLine set
			Instance Selection
				where (related.LineMissingDetails)

		BankStatementLineDetailsNotEqualRel is a BankStatementLine set
			Instance Selection
				where (related.LineAmountDoesNotEqualLineDetails)

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"

		BankStatementLineBudgetEditInProcessRel is a BankStatementLine set
            Instance Selection
                where (related.BudgetEditProcessing.InProcess)

        BankStatementLineBudgetFailureRel is a BankStatementLine set
            Instance Selection
                where (related.BudgetEditProcessing.Failure)

		NonCashLedgerTransactionBudgetEditInProcessRel is a NonCashLedgerTransaction set
            Instance Selection
                where (related.BudgetEditProcessing.InProcess)

		NonCashLedgerTransactionBudgetFailureRel is a NonCashLedgerTransaction set
            Instance Selection
                where (related.BudgetEditProcessing.Failure)

		CashManagementAccountReconciliationViewRel
			one-to-one relation to CashManagementAccountReconciliationView
			Field Mapping uses symbolic key
				related.CashManagementGroup		 = CashManagementGroup
				related.CashManagementAccount	 = CashManagementAccount
				related.Actor					 = actor
		
		BankStatementHistoryRel	
			one-to-many relation to BankStatementHistory
			Field Mapping uses ByUpdateDate
				related.CashManagementGroup		= CashManagementGroup
				related.CashManagementAccount	= CashManagementAccount
				related.BankStatement			= BankStatement

	Cube Relations
		GeneralLedgerTotalCubeRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is GeneralLedgerTotalCubeMap
			Dimension Mapping
				related.Scenario										= CashManagementGroup.FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger						= CashManagementAccount.ReportingBasis.LedgerTopNode
				related.AccountingEntity 								= CashManagementAccount.LedgerBalanceGLAccount.ToAccountingEntity		 
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= CashManagementAccount.LedgerBalanceGLAccount.GeneralLedgerChartAccount 
			dynamic preload measures are DynamicMeasure

	Field Rules
		ContextBankStatement
			force default to BankStatement

		ExchangeDate
			default to StatementDate

		StatementCurrency
			initial value is CashManagementAccount.Currency
			default to CashManagementAccount.Currency
			if (StatementCurrency changed)
				initialize CorporateBaseEndingBalance
				initialize CompanyCurrencyEndingBalance
				initialize LocationCurrencyEndingBalance































		StatementDate
			required
			constraint (CashManagementGroup.CorporateCalendar entered)
				"MustAttachACalendarToCashManagementGroup<CashManagementGroup>BeforeYouCanEnterABankStatement"
			LocalStatementDate = StatementDate

		EndingBalance
			initialize CorporateBaseEndingBalance.EnteredCurrencyAmount
			initialize CompanyCurrencyEndingBalance.EnteredCurrencyAmount
			initialize LocationCurrencyEndingBalance.EnteredCurrencyAmount
			CurrencyTable								= CashManagementGroup.FinanceEnterpriseGroup.CurrencyTable
			CurrencyAmount								= EndingBalance
			CorporateBaseEndingBalance.ToCurrency		= CashManagementGroup.Currency
			CompanyCurrencyEndingBalance.ToCurrency		= CashManagementAccount.LegalEntity.Currency
			LocationCurrencyEndingBalance.ToCurrency	= CashManagementAccount.CashManagementLocation.Currency

		ClosingLedger
			default to EndingBalance

		ApprovalCode
			if (CashManagementGroup.BankStatementDistribApprovalRequired
			and CashManagementGroup.ApprovalCodesNotUsedForBankStatementDist)
				default to CashManagementAccount.ApprovalCode

	Actions
	
		BankStatementPurge is a Set Action
	  		restricted
			Parameters
				PrmCashManagementGroup       is a CashManagementGroup
				PrmCashManagementAccount	 is a CashManagementAccount
				PrmBankStatementCutOffDate   is Date
				
			Parameter Rules
			
			Instance Selection
				where (CashManagementGroup		    =  PrmCashManagementGroup
				and    CashManagementAccount        =  PrmCashManagementAccount
				and    StatementStatus.Closed
				and    StatementDate <= PrmBankStatementCutOffDate)
			
			Action Rules
				Instance Rules
					invoke Purge BankStatementLine set	
					invoke Purge BankStatementLineReconStatus set
					invoke Purge BankStatementPosition set
					invoke Delete BankStatementReasonCodeUsage set
					invoke Delete BankStmtReconReasonCodeUsage set
					invoke Purge BankStatementBalance set
					invoke PurgeInternal
					
		ClearCurrentReconciliationList is an Instance Action
			default label is "SaveAndClearCurrentReconciliation"
			valid when (HasCurrentReconciliationTransactions)
			Action Rules
				invoke MarkTransactionAsUnselected CurrentReconMatchNumber
				if (!CurrentReconMatchNumber descendants exist)
					invoke Purge CurrentReconMatchNumber
				initialize CurrentReconMatchNumber
				if (StatementStatus.Unreconciled)
					invoke UpdateReconciliationStatus

		ClearAllReconciliations is an Instance Action
			completion message is "ClearAllReconciliationsHasBeenSubmittedToTheQueueForProcessing"
			valid when (CanClearAllReconciliations)
			confirmation required
			Action Rules
				constraint (!HasNonFinishedTriggers)
					"CannotClearAllReconciliations;OtherReconciliationProcessesRunning"
				invoke ClearCurrentReconciliationList
				BackgroundGroup = CashManagementGroup + CashManagementAccount + BankStatement
				invoke UnmatchMatchedSummaryTransactions BankStatementReconciliation in background group(BackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement

		UpdateCurrentReconMatchNumber is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmReconMatchNumber	is a BankStatementReconciliation

			Action Rules
				CurrentReconMatchNumber	= PrmReconMatchNumber
				invoke MarkTransactionAsSelected CurrentReconMatchNumber

 		ReconcileSelectedTransactions is an Instance Action
			valid when (CurrentReconciliationCanBeReconciled)
			Action Rules
				invoke ReconcileSelectedMatchedTransactions CurrentReconMatchNumber

		InvokeReclassifyAllStatementLines is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (BankStatementLine set exists)
					InitialImport = true
					invoke ReclassifyAllStatementLines
				else
				if (StatementStatus.Unreconciled)
					invoke Unreconciled.UpdateReconciliationStatus

		ReleaseDistributions is an Instance Action
			completion message is "ReleaseDistributionsHasBeenSubmittedToTheQueueForProcessing"
			valid when (LineDistributionsCanBeReleased)
			Action Rules
				constraint (CashManagementAccount.GLAccount	entered)
					"CashPostingAccountMustBeEnteredOnCashManagementAccount<CashManagementAccount>"
				constraint (all UnreleasedStatementLineDistributionsRel.GLTransactionAmount != 0)
					"BankStatementHasDistributionsWithZeroAmount:CannotRelease"

				invoke ReleaseAllStatementDistributions BankStatementLine
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
					if (CashManagementGroup.BankStatementDistribApprovalRequired)
						invoked.PrmRequiresApproval		= true
				constraint (all UnreleasedNonCashLedgerDistributionsRel.DistributionAmount entered)
					"NonCashLedgerVarianceHasDistributionsWithZeroAmount:CannotRelease"
				invoke ReleaseAllStatementDistributions NonCashLedgerTransaction
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
					if (CashManagementGroup.BankStatementDistribApprovalRequired)
						invoked.PrmRequiresApproval		= true

				if (CashManagementGroup.BankStatementDistribApprovalRequired)
					if (!CashManagementGroup.ApprovalCodesNotUsedForBankStatementDist)
						if (ApprovalCode !entered)
							ApprovalCode = CashManagementAccount.ApprovalCode
							constraint (ApprovalCode entered)
								"ApprovalCodeRequiredOnCashManagementAccount<CashManagementAccount>"
						constraint (ApprovalCode.HasApprovalLevels)		
							"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
						constraint (!ApprovalCode.HasTeamWithNoMembers)	
							"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
						constraint (!ApprovalCode.HasInvalidEscalations)
							"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
						constraint (!ApprovalCode.HasInactiveResources)
							"CannotComplete;TheApprovalCodeHasInactiveResources"

						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam
						include GetNextApprovalLevel
						ApprovalLevel = LocalApprovalLevel
						Approver = LocalApprover
						ApproverTeam = LocalApproverTeam
					include InitiateApprovalProcessFlow

					PostingStatus	= PostingStatus.PendingApproval
				else
					PostingStatus	= PostingStatus.Released	

		ReleaseCashLedgerTransactions is an Instance Action
			completion message is "ReleaseCashLedgerTransactionsHasBeenSubmittedToTheQueueForProcessing"
			valid when (CashLedgerTransactionsCanBeReleased)
			confirmation required
				"ThisWillReleaseAllLineCashLedgerTransactionsForBankStatement;DoYouWantToContinue"
			Action Rules

				invoke MassReleaseByBankStatement CashLedgerTransaction
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount		
					invoked.PrmBankStatement			= BankStatement

		ReleaseCashLedgerTransactionsForAnAccount is an Instance Action		
			valid when (CashLedgerTransactionsCanBeReleasedByAccount)
			confirmation required
				"ThisWillReleaseAllLineCashLedgerTransactionsFor_\Cash_\Management_\Account<CashManagementAccount>;DoYouWantToContinue"
			Action Rules
				invoke MassReleaseByBankStatement CashLedgerTransaction
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount

		SubmitCashLedgerTransactionsForApproval is an Instance Action
			completion message is "SubmitCashLedgerTransactionsForApprovalHasBeenSubmittedToTheQueueForProcessing"
 			valid when (CashLedgerTransactionsCanBeSubmittedForApproval)
 			confirmation required
 				"ThisWillSubmitAllLineCashLedgerTransactionsForApproval;DoYouWantToContinue"
			Parameters
				PrmApprovalCode		is a ApprovalCode
					default label is "OverrideApprovalCode"
				PrmCommentText		is a CommentText
					default label is "Comment"
			Parameter Rules
				PrmApprovalCode
					constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
						"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
			Action Rules
				invoke Unreleased.SubmitForApproval UnreleasedLineCashLedgerTransactionsRel
					invoked.PrmApprovalCode	= PrmApprovalCode
					invoked.PrmCommentText	= PrmCommentText

		UpdateApprovalLevel is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
			Action Rules

				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
				else
				if (ParmEscalate)
					include GetNextEscalationApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
				else
					include GetNextApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam

		Approve is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				PostingStatus	= 4	

				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				invoke ApproveAllStatementDistributionsByLine BankStatementLine
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement

				invoke ApproveAllStatementDistributionsByLine NonCashLedgerTransaction
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement


		Reject is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				PostingStatus	= 0 

				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				invoke RejectAllStatementDistributions BankStatementLineDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
				invoke RejectAllStatementDistributions NonCashLedgerDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement

		RejectWithReasonCode is an Instance Action
			default label is untranslatable
			restricted
			subject is RejectBankStatementDistribution
			reason code required
			action comment required

			Action Rules
				PostingStatus	= 0 

				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				invoke RejectAllStatementDistributions BankStatementLineDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
				invoke RejectAllStatementDistributions NonCashLedgerDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
			Exit Rules
				invoke Create BankStatementReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.CashManagementAccount		= CashManagementAccount
					invoked.BankStatement				= BankStatement
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= action comment

		ManualApprove is an Instance Action
			valid when (PostingStatus.PendingApproval)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Action Rules
				PostingStatus	= 4 

				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				cancel BankStatementDistributionApproval process

				invoke ApproveAllStatementDistributionsByLine BankStatementLine
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement

				invoke ApproveAllStatementDistributionsByLine NonCashLedgerTransaction
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement


		ManualReject is an Instance Action
			valid when (PostingStatus.PendingApproval)
			subject is RejectBankStatementDistribution
			Parameters
				PrmComment		is Alpha size up to 500
			Action Rules
				if (CashManagementGroup.RejectStatementDistribReasonCodeRequired)
					constraint (reason code entered)
						"ReasonCodeIsRequiredForRejectingBankStatementDistributions"

				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				PostingStatus	= 0 

				cancel BankStatementDistributionApproval process
				invoke RejectAllStatementDistributions BankStatementLineDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
				invoke RejectAllStatementDistributions NonCashLedgerDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement

			Exit Rules
				invoke Create BankStatementReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.CashManagementAccount		= CashManagementAccount
					invoked.BankStatement				= BankStatement
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= PrmComment



		UpdateReconciliationApprovalLevel is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
			Action Rules

				if (ParmReassign)
					if (ReconciliationReassignToApprovalLevel entered)
						ReconciliationApprovalLevel = ReconciliationReassignToApprovalLevel.ApprovalLevel
						initialize ReconciliationReassignToApprovalLevel
				else
				if (ParmEscalate)
					include GetNextReconciliationEscalationApprovalLevel
					ReconciliationApprovalLevel		= LocalReconciliationApprovalLevel
					ReconciliationApprover			= LocalReconciliationApprover
					ReconciliationApproverTeam		= LocalReconciliationApproverTeam
				else
					include GetNextReconciliationApprovalLevel
					ReconciliationApprovalLevel		= LocalReconciliationApprovalLevel
					ReconciliationApprover			= LocalReconciliationApprover
					ReconciliationApproverTeam		= LocalReconciliationApproverTeam


		UpdateReconciliationApprovalFields is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrentApprover	is a FinanceResource
				PrmCurrentTeam		is a FinanceTeam
				PrmApprovalLevel	is Numeric 8
			Action Rules
				ReconciliationApprover		= PrmCurrentApprover
				ReconciliationApproverTeam	= PrmCurrentTeam
				ReconciliationApprovalLevel	= PrmApprovalLevel

		SubmitReconciliationBalanceReportForApproval is an Instance Action
			completion message is "ApproveBankStatementReconciliationReportHasBeenSubmittedToTheQueueForProcessing"
	 		valid when (CashLedgerReconciliationCanBeSubmittedForApproval)
			Parameters
				PrmApprovalCode		is a ApprovalCode
					default label is "ApprovalCode"
				PrmCommentText		is a CommentText
					default label is "Comment"

			Parameter Rules
				PrmApprovalCode
					if (!CashManagementGroup.ApprovalCodesNotUsedForBankStatementReconciliation)
						required
							"ApprovalCodeIsRequired"
					constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
						"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
					
		    Entrance Rules

			Action Rules
				CommentText += PrmCommentText
				if (!CashManagementGroup.ApprovalCodesNotUsedForBankStatementReconciliation)
					ReconciliationApprovalCode		 = PrmApprovalCode
					constraint (ReconciliationApprovalCode.HasApprovalLevels) 
						"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
					constraint (!ReconciliationApprovalCode.HasTeamWithNoMembers) 
						"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
					constraint (!ReconciliationApprovalCode.HasInvalidEscalations)
						"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
					constraint (!ReconciliationApprovalCode.HasInactiveResources)
						"CannotComplete;TheApprovalCodeHasInactiveResources"

					initialize ReconciliationApprovalLevel
					initialize ReconciliationApprover
					initialize ReconciliationApproverTeam	
					include GetNextReconciliationApprovalLevel
					ReconciliationApprovalLevel	= LocalReconciliationApprovalLevel
					ReconciliationApprover		= LocalReconciliationApprover
					ReconciliationApproverTeam	= LocalReconciliationApproverTeam
				
				include InitiateReconciliationApprovalProcessFlow

				ReconciliationApprovalStatus = ReconciliationApprovalStatus.PendingApproval

		ApproveReconciliation is an Instance Action
			default label is untranslatable
			valid when (StatementBalancesReportCreated)
			restricted
			
			Entrance Rules
			Action Rules
				initialize ReconciliationApprovalLevel
				initialize ReconciliationApprover
				initialize ReconciliationApproverTeam	

				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Approved
				
		RejectReconciliation is an Instance Action
			default label is untranslatable
			restricted
			Action Rules


				
				initialize ReconciliationApprovalLevel
				initialize ReconciliationApprover
				initialize ReconciliationApproverTeam	

				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Rejected

		RejectReconciliationWithReasonCode is an Instance Action
			default label is untranslatable
			restricted
			subject is RejectBankStatementReconciliation
			reason code required
			action comment required

			Action Rules


				
				initialize ReconciliationApprovalLevel
				initialize ReconciliationApprover
				initialize ReconciliationApproverTeam	

				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Rejected

			Exit Rules
				invoke Create BankStmtReconReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.CashManagementAccount		= CashManagementAccount
					invoked.BankStatement				= BankStatement
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= action comment	
					
		ManualRejectReconciliation is an Instance Action
			valid when (ReconciliationApprovalStatus.PendingApproval)
			subject is RejectBankStatementReconciliation
			Parameters
				PrmComment		is Alpha size up to 500
			Action Rules
				if (CashManagementGroup.RejectBankStatementReconReasonCodeRequired)
					constraint (reason code entered)
						"ReasonCodeIsRequiredForRejectingBankStatementReconciliation"

				initialize ReconciliationApprovalLevel
				initialize ReconciliationApprover
				initialize ReconciliationApproverTeam
				
				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Rejected

				cancel BankStatementReconciliationApproval process

			Exit Rules
				invoke Create BankStmtReconReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.CashManagementAccount		= CashManagementAccount
					invoked.BankStatement				= BankStatement
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= PrmComment

		ManualApproveReconciliation is an Instance Action
			valid when (ReconciliationApprovalStatus.PendingApproval)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Action Rules
				initialize ReconciliationApprovalLevel
				initialize ReconciliationApprover
				initialize ReconciliationApproverTeam
				
				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Approved

				cancel BankStatementReconciliationApproval process















		DeleteOpenReconciliationTransactions is an Instance Action
			valid when (CanDeleteOpenReconciliationTransactions)
 			confirmation required
  			completion message is "DeleteOpenReconciliationTransactionsHasBeenSubmittedToTheQueueForProcessing"
			Action Rules
				constraint (!HasNonFinishedTriggers)
					"CannotDeleteOpenReconciliationTransactions;OtherReconciliationProcessesRunning"
				invoke DeleteOpenTransactionLines BankStatementReconciliation
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount

		UpdatePostedStatus is an Instance Action
			default label is untranslatable
			restricted
			refresh and lock this instance
			Action Rules
				if (BankStatementLineDistribution set	exists
				or  NonCashLedgerDistribution set	exists)






					if (UnreleasedStatementLineDistributionsRel exists
					or  UnreleasedNonCashLedgerDistributionsRel	exists)
						PostingStatus	= 0 
					else
					if (PendingApprovalStatementLineDistributionsRel exists	
					or  PendingApprovalNonCashLedgerDistributionsRel exists)
						PostingStatus	= 3 
					else
					if (ReleasedStatementLineDistributionsRel exists
					or  ReleasedNonCashLedgerDistributionsRel exists)
						PostingStatus	= 4 
					else
					if (PostedStatementLineDistributionsRel exists
					or  PostedNonCashLedgerDistributionsRel	exists)
						PostingStatus	= 1 

				else
					PostingStatus	= 2

		UnpostBankStatement is an Instance Action
			default label is untranslatable
			restricted
			refresh and lock this instance
			Action Rules
				PostingStatus	= 0

		LoadCashPositionWorksheet is an Instance Action
			valid when (CanLoadCashPositionWorksheet)
			completion message is "LoadCashPositionWorksheetHasBeenSubmittedToTheQueueForProcessing"
			Action Rules
				if (HasCashPositionWorksheet)
					confirmation required
						"TheCurrentCashPositionWorksheetWillBeReloaded;WouldYouLikeToContinue?"

					invoke Purge BankStatementPosition set

				invoke LoadBankStatementPosition BankStatementLine
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashManagementAccount	= CashManagementAccount
					invoked.PrmBankStatement			= BankStatement
					invoked.PrmStatementDate			= StatementDate
					invoked.PrmCashForecast				= last ActiveCashForecastAccountRel.CashForecast

		FinalizeCashPosition is an Instance Action
			valid when (CanFinalizeCashPosition)
			Action Rules
				if (UnenteredPositionAmountRel exists)
					confirmation required
						"APositionAmountWasNotEnteredForCategory<first UnenteredPositionAmountRel.CashTransactionCategory>;WouldYouLikeToContinue?"

				PositionStatus = 1 

		ReopenCashPosition is an Instance Action
			valid when (CashPositionIsFinalized)
			Action Rules
				PositionStatus = 0 

		EmailCashPositionSummary is an Instance Action
			valid when (CashPositionIsFinalized)
			Parameters
				EmailNotification
				EmailComments		is Alpha 500

			Parameter Rules
				EmailNotification
					required

			Action Rules
				if (EmailNotification.FinanceResource entered)
					send email
						to 		EmailNotification.FinanceResource.EmailAddress
						from 	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "<CashPositionEmailSubject>"
						Contents
							"BeginningCollectedBalance:<BeginningCollectedBalance>"
							"Receipts:<PositionReceipts>"
							"Disbursements:<PositionDisbursements>"
							"Other:<PositionOtherAmounts>"
							"NetCashBalance:<NetCashBalance>"


							"Comments:<EmailComments>"
				else
					for each EmailNotification.FinanceTeam.FinanceTeamMemberRel
						send email
							to 		each.FinanceTeamMember.TeamMember.EmailAddress
							from 	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "<CashPositionEmailSubject>"
							Contents
								"BeginningCollectedBalance:<BeginningCollectedBalance>"
								"Receipts:<PositionReceipts>"
								"Disbursements:<PositionDisbursements>"
								"Other:<PositionOtherAmounts>"
								"NetCashBalance:<NetCashBalance>"


								"Comments:<EmailComments>"

		UpdateCurrencyRate is an Instance Action
			valid when (HasDifferentBaseOrCompanyOrLocationCurrency)
			Parameters
				PrmOverrideBaseCurrencyRate     is a CurrencyExchangeRate
				PrmOverrideCompanyCurrencyRate	is a CurrencyExchangeRate
				PrmOverrideLocationCurrencyRate	is a CurrencyExchangeRate
				PrmRevalueUsingPeriodEndRate	is Boolean
				PrmUpdateThroughDate			is Date

  			Parameter Rules
  				PrmUpdateThroughDate
  					default to StatementDate

 				PrmRevalueUsingPeriodEndRate
 					constraint (PrmOverrideBaseCurrencyRate		!entered
 					and         PrmOverrideCompanyCurrencyRate	!entered
 					and         PrmOverrideLocationCurrencyRate	!entered)
 						"CannotEnterOverrideRatesAndSelectRevalueUsingPeriodEndRate"

			Action Rules
				initialize CorporateBaseEndingBalance
				initialize CompanyCurrencyEndingBalance
				initialize LocationCurrencyEndingBalance
				if (PrmRevalueUsingPeriodEndRate)
					invoke CurrencyRevaluationUpdate
						invoked.ExchangeDate										= PostingPeriodDate
				else
					invoke CurrencyRevaluationUpdate
						invoked.ExchangeDate										= StatementDate
						invoked.CorporateBaseEndingBalance.EnteredCurrencyRate		= PrmOverrideBaseCurrencyRate
						invoked.CompanyCurrencyEndingBalance.EnteredCurrencyRate	= PrmOverrideCompanyCurrencyRate
						invoked.LocationCurrencyEndingBalance.EnteredCurrencyRate	= PrmOverrideLocationCurrencyRate

			Exit Rules
				invoke Update BankStatementLine set
				if (StatementDate < PrmUpdateThroughDate)
					invoke UpdateCurrencyBalances
						invoked.SkipNextStatementUpdate	= true
					invoke UpdateCurrencyRate first NextBankStatementByDateRel
						invoked.PrmOverrideBaseCurrencyRate		= PrmOverrideBaseCurrencyRate
						invoked.PrmOverrideCompanyCurrencyRate	= PrmOverrideCompanyCurrencyRate
						invoked.PrmOverrideLocationCurrencyRate	= PrmOverrideLocationCurrencyRate
						invoked.PrmRevalueUsingPeriodEndRate	= PrmRevalueUsingPeriodEndRate
						invoked.PrmUpdateThroughDate			= PrmUpdateThroughDate
				else
					invoke UpdateCurrencyBalances

		CurrencyRevaluationUpdate	is an Update Action
			default label is untranslatable
			restricted

		UpdateCurrencyBalances is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				SkipNextStatementUpdate	is Boolean

			Action Rules
				if (BaseCurrencyGainLossAmount 		entered
				or  CompanyCurrencyGainLossAmount	entered
				or  LocationCurrencyGainLossAmount	entered)
					constraint (CashManagementGroup.StatementCurrencyGainLossCategory entered)
						"StatementCurrencyGainLossCategoryMustBeDefinedOnCashManagementGroup"
					if (StatementLineCurrencyGainLossRel exists)
						invoke UpdateCurrencyGainLossLine StatementLineCurrencyGainLossRel
							invoked.PrmBaseCurrencyGainLossAmount		= BaseCurrencyGainLossAmount
							invoked.PrmCompanyCurrencyGainLossAmount	= CompanyCurrencyGainLossAmount
							invoked.PrmLocationCurrencyGainLossAmount	= LocationCurrencyGainLossAmount
					else
						invoke Create BankStatementLine
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.SkipCashAccountAttachRule		= true
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.CashTransactionCategory			= CashManagementGroup.StatementCurrencyGainLossCategory
							invoked.LineStatus						= 1 
							invoked.CurrencyGainLossLine			= true
							invoked.CorporateBaseAmount				= BaseCurrencyGainLossAmount
							invoked.CompanyCurrencyAmount			= CompanyCurrencyGainLossAmount
							invoked.LocationCurrencyAmount			= LocationCurrencyGainLossAmount
				else
					invoke Delete StatementLineCurrencyGainLossRel

			Exit Rules
				if (PreviousBankStatementByDateRel.PostingPeriod = PostingPeriod)
					AccumulatedBaseGainLoss		= PreviousBankStatementByDateRel.AccumulatedBaseGainLoss + BaseCurrencyGainLossAmount
					AccumulatedCompanyGainLoss	= PreviousBankStatementByDateRel.AccumulatedCompanyGainLoss + CompanyCurrencyGainLossAmount
					AccumulatedLocationGainLoss	= PreviousBankStatementByDateRel.AccumulatedLocationGainLoss + LocationCurrencyGainLossAmount
				else
					AccumulatedBaseGainLoss		= BaseCurrencyGainLossAmount
					AccumulatedCompanyGainLoss	= CompanyCurrencyGainLossAmount
					AccumulatedLocationGainLoss	= LocationCurrencyGainLossAmount

				if (NextBankStatementByDateRel exists
				and !SkipNextStatementUpdate)
					invoke UpdateCurrencyBalances first NextBankStatementByDateRel

		UpdateStatementCurrencyBalances is a Set Action
			default label is untranslatable
			restricted
			run in background
			Parameters
				PrmCashManagementGroup        is a CashManagementGroup
                PrmCashManagementAccount      is a CashManagementAccount
                PrmBeginningStatementDate     is Date

			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashManagementAccount
					required
				PrmBeginningStatementDate
					required

			Sort Order is ByAccountDate

			Instance Selection
                where (CashManagementGroup        = PrmCashManagementGroup
                and    CashManagementAccount    = PrmCashManagementAccount
                and    StatementDate            >= PrmBeginningStatementDate)

			Action Rules
				Instance Rules
					invoke UpdateCurrencyBalances
						invoked.SkipNextStatementUpdate	= true

		UpdateBankStatementTotalBalanceOnly is a Set Action
			default label is untranslatable
			restricted
			run in background
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmDateRange				is a DateRange
				PrmIncludeUnreconciled		is Boolean
				PrmCashManagementAccount	is a CashManagementAccount

			Parameter Rules
				PrmDateRange
					required

			Sort Order
				CashManagementGroup
				StatementDate
				CashManagementAccount
				BankStatement

			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and    StatementDate within PrmDateRange
				and   ((PrmCashManagementAccount	entered
				and     CashManagementAccount = PrmCashManagementAccount)
				or      !PrmCashManagementAccount entered)
				and	   IsBalanceOnly
				and   ((!PrmIncludeUnreconciled
				and     !StatementStatus.Unreconciled)
				or      PrmIncludeUnreconciled)
				and	   StatementType.PreviousDay)

			Action Rules
				Set Rules



				Instance Rules
					LocalCashManagementGroup = PrmCashManagementGroup
					LocalFinancialPeriodDate = StatementDate
					LocalGeneralLedgerCompany = CashManagementAccount.LegalEntity
					LocalCashManagementAccount = CashManagementAccount
					LocalCashTransactionCategory = blank

					invoke Update BankStatementTotalRel
						invoked.TransactionType						= 1 
						invoked.CashManagementLocation				= CashManagementAccount.CashManagementLocation
						invoked.FinancialInstitution				= CashManagementAccount.FinancialInstitution
						invoked.AccountEndingBalance				= EndingBalance
						invoked.AccountCurrency						= CashManagementAccount.Currency
						invoked.BaseCurrency						= CashManagementGroup.Currency
						invoked.BaseExchangeRate					= CorporateBaseEndingBalance.EnteredCurrencyRate
						invoked.MultiplyBaseCurrencyRate			= MultiplyBaseCurrencyRate
						invoked.CompanyCurrency						= CashManagementAccount.LegalEntity.Currency
						invoked.CompanyExchangeRate					= CompanyCurrencyEndingBalance.EnteredCurrencyRate
						invoked.MultiplyCompanyCurrencyRate			= MultiplyCompanyCurrencyRate
						invoked.LocationCurrency					= CashManagementAccount.CashManagementLocation.Currency
						invoked.LocationExchangeRate				= LocationCurrencyEndingBalance.EnteredCurrencyRate
						invoked.MultiplyLocationCurrencyRate		= MultiplyLocationCurrencyRate
						initialize invoked.AccountTransactionAmount
						initialize invoked.BaseTransactionAmount
						initialize invoked.CompanyTransactionAmount
						initialize invoked.LocationTransactionAmount

		ReconcileByAmountAction is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmReconcileByAccount	is a ReconcileByAmount
			Action Rules
				LocalReconcileByAmount	= PrmReconcileByAccount
				LocalMatchedFlag		= LocalReconcileByAmount.MatchFound


































		ReconcileMatchedAmounts is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmStatementReconciliationOccurs	is a StatementReconciliationOccurs
				PrmStatementGroupSize				is Numeric 4
				PrmTransactionReconciliationOccurs	is a TransactionReconciliationOccurs
				PrmTransactionGroupSize				is Numeric 5


			Local Fields
				LocalReconMatchNumber				is a BankStatementReconciliation view
				LocalBankStatementReconciliation	is a BankStatementReconciliation
				LocalCombinationCounter 			is Numeric 5

			Action Rules
				initialize LocalReconMatchNumber
				invoke Create BankStatementReconciliation
					assign result to LocalReconMatchNumber
					invoked.CashManagementGroup				= CashManagementGroup
					invoked.CashManagementAccount			= CashManagementAccount
					invoked.LineMatchField					= PrmStatementReconciliationOccurs.BankStatementReconciliation[1].LineMatchField
					invoked.BankStatement					= BankStatement
					invoked.SummaryRecord					= true
					invoked.BankReconciliationMatchRule		= PrmStatementReconciliationOccurs.BankStatementReconciliation[1].BankReconciliationMatchRule
					invoked.NumberOfMatchedStatementLines	= PrmStatementGroupSize
					invoked.NumberOfMatchedSystemLines		= PrmTransactionGroupSize

				LocalCombinationCounter	= 1
				while (LocalCombinationCounter <= PrmStatementGroupSize)
					LocalBankStatementReconciliation = PrmStatementReconciliationOccurs.BankStatementReconciliation[LocalCombinationCounter]
					invoke Update LocalBankStatementReconciliation
						invoked.ReconMatchNumber	= LocalReconMatchNumber.BankStatementReconciliation
						invoked.LineStatus			= LocalReconMatchNumber.BankStatementReconciliation.LineStatus
						invoked.MatchedDate			= current timestamp
						invoked.MatchedActor		= actor




					LocalCombinationCounter	+= 1

				LocalCombinationCounter	= 1
				while (LocalCombinationCounter <= PrmTransactionGroupSize)
					LocalBankStatementReconciliation = PrmTransactionReconciliationOccurs.BankStatementReconciliation[LocalCombinationCounter]
					invoke Update LocalBankStatementReconciliation
						invoked.ReconMatchNumber	= LocalReconMatchNumber.BankStatementReconciliation
						invoked.LineStatus			= LocalReconMatchNumber.BankStatementReconciliation.LineStatus
						invoked.MatchedDate			= current timestamp
						invoked.MatchedActor		= actor




					LocalCombinationCounter	+= 1

				invoke ReconcileWithinTolerance LocalReconMatchNumber.BankStatementReconciliation
					invoked.PrmBankStatement		= BankStatement



		ReconcileNextBankStatement is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (NextUnreconciledBankStatementByDateRel exists)
					BackgroundGroup = CashManagementGroup + current corporate date
					invoke ReconcileStatementLines BankStatementReconciliation in background group(BackgroundGroup)
						invoked.PrmCashManagementGroup		= CashManagementGroup
						invoked.PrmCashManagementAccount	= CashManagementAccount
						invoked.PrmBankStatement			= first NextUnreconciledBankStatementByDateRel.BankStatement
						invoked.PrmMassReconcile			= true

		MassLoadAndReconcile is a Set Action
			run in background
			completion message is "MassLoadAndReconcileHasBeenSubmittedToTheQueueForProcessing"
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmMassStatementLoad		is Boolean

			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementStatus
				StatementDate
				BankStatement

			Instance Selection
				where  (CashManagementGroup = PrmCashManagementGroup
				and   ((PrmCashManagementAccount	entered
				and     CashManagementAccount = PrmCashManagementAccount)
				or      !PrmCashManagementAccount entered)
				and     StatementStatus.Unreconciled
				and     StatementType.PreviousDay)

			Action Rules
				Instance Rules
					if (StatementCanBeReconciled
					and !HasNonFinishedTriggers)
						BackgroundGroup = CashManagementGroup + current corporate date
						invoke InvokedLoadAndReconcile in background group(BackgroundGroup)
							assign async background group id to BackgroundGroupAsyncId
							invoked.PrmMassStatementLoad	= true

		Purge is a Purge Action
			valid when (StatementType.Intraday)
			Action Rules
				if (HasCashPositionWorksheet)
					confirmation required
						"ACashPositionWorksheetExistsForBankStatement<BankStatement>;WouldYouLikeToContinue?"

				invoke Purge BankStatementLineDistribution set 
				invoke Purge BankStatementLine set

				if (BankStatementInterfaceHeader.Status.Imported)
					invoke Purge Imported BankStatementInterfaceHeader set
					
		PurgeInternal is a Purge Action
			restricted
			Action Rules
				invoke Purge BankStatementLine set

		SwitchToCombinedListView is an Instance Action
			valid when (UsesListOverListManualReconView)
			Action Rules
				invoke SwitchReconciliationListView CashManagementAccount
					invoked.UseCombinedListView	= true

		SwitchToListOverListView is an Instance Action
			valid when (!UsesListOverListManualReconView)
			Action Rules
				invoke SwitchReconciliationListView CashManagementAccount
					invoked.UseListOverListView	= true

		SendBankStatementNotifications is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup	 	is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount

			Parameter Rules
				PrmCashManagementGroup		required
				PrmCashManagementAccount	required

			Local Fields
				LocalActor					is Actor

			Action Rules
				if (PrmCashManagementAccount.ImportNotification.FinanceResource entered)
					LocalActor = PrmCashManagementAccount.ImportNotification.FinanceResource.Employee.agent(Actor).Actor
					if (LocalActor entered)
						send notification
							to LocalActor
							description is "<ImportEmailSubject>"
							priority is high
							detail is "<ImportEmailContent>"
							linkback(webapp is CashManager navigation is BankStatementNavigation)	

					send email
						to 		PrmCashManagementAccount.ImportNotification.FinanceResource.EmailAddress
						from 	PrmCashManagementGroup.BankInterfaceAdministrator.EmailAddress
						subject "<ImportEmailSubject>"
						Contents
							"<ImportEmailContent>"
				else
					for each PrmCashManagementAccount.ImportNotification.FinanceTeam.FinanceTeamMemberRel
						LocalActor = each.FinanceTeamMember.TeamMember.Employee.agent(Actor).Actor
						if (LocalActor entered)
							send notification
								to LocalActor
								description is "<ImportEmailSubject>"
								priority is high
								detail is "<ImportEmailContent>"
								linkback(webapp is CashManager navigation is BankStatementNavigation)	

						send email
							to 		each.FinanceTeamMember.TeamMember.EmailAddress
							from 	PrmCashManagementGroup.BankInterfaceAdministrator.EmailAddress
							subject "<ImportEmailSubject>"
							Contents
								"<ImportEmailContent>"

		UpdateCashCodeCashPosition is an Instance Action
			run in background
			Parameters
				PrmAllPeriodTransInPostedBalance	is Boolean
					default label is "IncludeAllPeriodTransactionsInPostedBalance"
			Action Rules
				invoke RunCashCodeCashPosition CashCodeRel in background
					invoked.PrmCashPositionDate					= StatementDate
					invoked.PrmAllPeriodTransInPostedBalance	= PrmAllPeriodTransInPostedBalance


		DeleteReconciliationDetailsForAccount is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount

			Parameter Rules
				PrmCashManagementAccount	required

			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    StatementStatus.Unreconciled)

			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementStatus

			Action Rules
				Instance Rules
					if (CanDeleteStatementLineReconciliations
					and !HasNonFinishedTriggers)
						invoke Unreconciled.DeleteStatementReconciliationDetails

		RunReconciliationBalancesReport is a Set Action
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmFromAccount				is a CashManagementAccount
				PrmToAccount				is a CashManagementAccount
				PrmAccountSelectionRule		is a CashManagementAccount group
				PrmStatementDateRange		is a DateRange
				PrmLastStatementInDateRange	is Boolean

			Parameter Rules
				PrmCashManagementGroup	required
				PrmToAccount
					constraint (PrmToAccount >= PrmFromAccount)
						"ToAccountMustBeGreaterThanFromAccount"
				PrmStatementDateRange
						required

			Instance Selection
				where (CashManagementGroup 			= PrmCashManagementGroup
				and    StatementType.PreviousDay
				and  ((PrmFromAccount				entered
				and    CashManagementAccount		>= PrmFromAccount
				and    CashManagementAccount		<= PrmToAccount)
				or     PrmFromAccount				!entered)
				and  ((PrmAccountSelectionRule		entered
				and    CashManagementAccount		within PrmAccountSelectionRule)
				or     PrmAccountSelectionRule		!entered)
				and    StatementDate				within PrmStatementDateRange
				and  ((PrmLastStatementInDateRange
				and   (NextBankStatementByDateRel	!exists
				or     NextBankStatementByDateRel.StatementDate > PrmStatementDateRange.End)
				or     !PrmLastStatementInDateRange)))

			Sort Order
				CashManagementGroup
				CashManagementAccount
				StatementDate
				StatementType
				BankStatement

			Action Rules
				Instance Rules
					invoke CreateReconciliationBalancesReport

		CreateReconciliationBalancesReport is an Instance Action
			Action Rules
				if (HasApprovedReconciliation)
					confirmation required
						"ReportHasAlreadyBeenApproved;CreatingANewReportWillChangeStatusToUnapproved;WouldYouLikeToContinue?"
				if (CashManagementAccount.SaveAllVersionsOfReconciliationBalancesReport)	
					if (!BankStatementHistory set exists)
						invoke Create BankStatementHistory 
							fill in user fields from this instance
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.Resource						= actor.agent(Employee).Employee
							invoked.UpdateDate						= StatementDate
							invoked.ReconciliationBalancesReport	= ReconciliationBalancesReport
				initialize ReconciliationBalancesReport
				initialize CommentText
				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Unapproved
				generate document PrintReconciliationBalances as pdf in landscape font offset is -2
          			set using action SetReconciliationBalancesReport
        
        SetReconciliationBalancesReport is an Instance Action
		    default label is untranslatable
		    restricted
		    Parameters
		        Report is BinaryDocument
		
		    Action Rules
				ReconciliationBalancesReport = Report
				ReconciliationApprovalStatus = ReconciliationApprovalStatus.Unapproved

			Exit Rules
				if (CashManagementAccount.SaveAllVersionsOfReconciliationBalancesReport)	
					invoke Create BankStatementHistory 
						fill in user fields from this instance
						invoked.CashManagementGroup				= CashManagementGroup
						invoked.CashManagementAccount			= CashManagementAccount
						invoked.BankStatement					= BankStatement
						invoked.Resource						= actor.agent(Employee).Employee
						invoked.UpdateDate						= current timestamp
						invoked.ReconciliationBalancesReport	= ReconciliationBalancesReport	

		DeleteReconciliationBalancesReport is an Instance Action
			valid when (StatementBalancesReportCreated)
			Action Rules
				initialize ReconciliationBalancesReport

		EmailReconciliationBalancesReport is an Instance Action
			valid when (StatementBalancesReportCreated)
			run in background
			completion message is "EmailSent"
			disable multiple instance selection
			Parameters
				ToEmail 								is EmailAddressField with multiple addresses 
					holds pii
				FromEmail 								is an EmailAddress 
					holds pii
				CCEmail									is EmailAddressField with multiple addresses 
					holds pii
				BccEmail 								is EmailAddressField with multiple addresses 
					holds pii
				Subject 	   							is Text
				EmailContents   						is RichText
				ToResource								is a FinanceResource

			Parameter Rules
				ToEmail
					constraint (!ToResource entered)
						"EnterEitherAnEmailAddressOrAResource,NotBoth"
					if (ToResource not entered)
						required
							"MustSelectToSendEmailToAResourceOrToAnEmailAddress"
				ToResource
					constraint (ToResource.EmailAddressAvailable)
						"To_\ResourceMustHaveAnEmailAddress"
				FromEmail
					required
					initial value is actor.agent(Employee).Employee.EmployeeWorkEmailAddress
				Subject
					required
					initial value is "ReconciliationBalancesReport"
				EmailContents
					required
					initial value is "ReconciliationBalancesReportForYourReview"

			Local Fields
				LocalToEmail is EmailAddressField with multiple addresses

			Action Rules
				if (ToResource entered)
					LocalToEmail = ToResource.EmailAddress
				else
					LocalToEmail = ToEmail
				send email
					to LocalToEmail
					from FromEmail
					cc CCEmail
					bcc BccEmail
					subject "<Subject>"
					Attachments
						attachment ReconciliationBalancesReport
							name is "ReconciliationBalancesReport"
							mime type is "application/pdf"
					Contents
						"<EmailContents>"

		UpdateLineAmountTotal is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmLineAmountTotal	is an InternationalAmount
			Action Rules
				LineAmountTotal		= PrmLineAmountTotal

		UpdateCategorizationGroupsProcessed is an Instance Action
			default label is untranslatable
			restricted
			refresh and lock this instance
	  		Action Rules
	  			CategorizationGroupsProcessed += 1

	StateCycles
		StatementCycle is a StateCycle
			state field is StatementStatus

			Unreconciled is a State
				Create is a Create Action
		  			restricted
		  			Action Rules
		  				if (!CashManagementAccount.AllowMultipleStatementsPerDay)	
							constraint (!DuplicateBankStatementRel exists)
								"BankStatement<first DuplicateBankStatementRel.BankStatement>AlreadyExistsForAccount<CashManagementAccount>On<StatementDate>"

					Exit Rules
						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 1

						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 2
							invoked.LineStatus						= 1

						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 3
							invoked.LineStatus						= 2

				ManuallyCreateStatement is a Create Action
		  			Action Rules
		  				if (!CashManagementAccount.AllowMultipleStatementsPerDay)	
							constraint (!DuplicateBankStatementRel exists)
								"BankStatement<first DuplicateBankStatementRel.BankStatement>AlreadyExistsForAccount<CashManagementAccount>On<StatementDate>"

					Exit Rules
						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 1

						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 2
							invoked.LineStatus						= 1

						invoke Create BankStatementLineReconStatus
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.BankStatement					= BankStatement
							invoked.BankStatementLineReconStatus	= 3
							invoked.LineStatus						= 2

						LocalCreateStatementDate = StatementDate
						include CreateIncomingBankStatementHeaderRecords
						if (CorporateCalendarStatementDateRel.IsBankDay)
							include CreateIncomingBankStatementDetails
						else
							include CreateIncomingBankStatementDetail

				ManuallyCreateIntradayStatement is a Create Action
		  			Action Rules
						StatementType	= 1 

					Exit Rules
						LocalStatementDate = StatementDate
						LocalCashManagementAccount = CashManagementAccount

						if (CashManagementGroup.IntradayStatementProcessing.KeepLatestStatementAndAnyWithCashPosition
						and NoCashPositionIntradayStatementDateRel exists)
							confirmation required
								"OtherIntradayStatementsFor<StatementDate>WithoutACashPositionWorksheetWillBeDeleted;WouldYouLikeToContinue?"

							invoke Purge NoCashPositionIntradayStatementDateRel

						if (CashManagementGroup.IntradayStatementProcessing.KeepOnlyLatestStatement
						and IntradayStatementDateRel exists)
							confirmation required
								"OtherIntradayStatementsFor<StatementDate>WillBeDeleted;WouldYouLikeToContinue?"

							invoke Purge IntradayStatementDateRel

		  		Update is an Update Action
		  			Exit Rules
		  				if (StatementDate changed)
	  						invoke Update BankStatementLine set
	  							invoked.StatementDate	= StatementDate
	  						if (HasDifferentBaseOrCompanyOrLocationCurrency)
	  							invoke UpdateCurrencyRate
		  				if (EndingBalance changed
		  				and HasDifferentBaseOrCompanyOrLocationCurrency
		  				and ManualStatementInBalance)
							invoke UpdateCurrencyBalances

		  		Delete is a Delete Action
		  			valid when (!StatementLoadedIntoReconciliation)
					Entrance Rules
						constraint (ReleasedLineCashLedgerTransactionsRel !exist)
							"BankStatementHasReleasedLineCashLedgerTransactions;CannotDelete"
						if (UnreleasedLineCashLedgerTransactionsRel exists)
							invoke DeleteBankStatementCreatedTransactions CashLedgerTransaction in background
								invoked.PrmCashManagementGroup		= CashManagementGroup
								invoked.PrmCashManagementAccount	= CashManagementAccount
								invoked.PrmBankStatement			= BankStatement
						if (initiating action != "BankStatementInterfaceHeader.RemoveBankStatements" 
						and HasDifferentBaseOrCompanyOrLocationCurrency
                      	and NextBankStatementByDateRel exists)
                        	confirmation required
                        		"DeletingBankStatementsMayRequireUpdatingAccumulatedCurrencyBalancesOnCurrentStatements;RunUpdateStatementCurrencyBalances"

		  				if(instance count of BankStatementLine set > DerivedNumberOfBankStatementLines)
		  					invoke DeleteLineForBankStatement BankStatementLine
		  						invoked.PrmCashManagementGroup		= CashManagementGroup
								invoked.PrmCashManagementAccount	= CashManagementAccount
								invoked.PrmBankStatement			= BankStatement
		  				else
		  					invoke Delete BankStatementLine set
		  					
		  			Action Rules
						LocalCreateStatementDate = StatementDate
						if (IncomingBankStatementDetailRel exists)
							invoke Update IncomingBankStatementDetailRel
								invoked.Status			= 1	
								invoked.MissingStatus	= 1	
								initialize invoked.TimeReceived
								initialize invoked.TimeImported
								initialize invoked.CompletedStatus
								initialize invoked.ExcludedStatus
								initialize invoked.BankStatementInterfaceHeader
								initialize invoked.Comment
								initialize invoked.ExcludedBy

					Exit Rules




				AutoReconcileStatementLines is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						if (StatementType.PreviousDay
						and CashManagementAccount.AutoReconcileStatementLines
						and StatementCanBeReconciled)
							BackgroundGroup = CashManagementGroup + CashManagementAccount + BankStatement
							invoke InvokedLoadAndReconcile in background group(BackgroundGroup)
								assign async background group id to BackgroundGroupAsyncId

				LoadAndReconcile is an Instance Action
					valid when (StatementType.PreviousDay)
					completion message is "LoadAndReconcileHasBeenSubmittedToTheQueueForProcessing"
					Action Rules
						constraint (StatementCanBeReconciled)
							"CannotLoadAndReconcile;BankStatementDateIsWithinAClosedBankPeriod"
						constraint (!HasNonFinishedTriggers)
							"CannotLoadAndReconcile;OtherReconciliationProcessesRunning"
						constraint (!HasLinesMissingDetails)
							"CannotLoadAndReconcile;BankStatementLine<first BankStatementLineMissingDetailsRel.DerivedLineNumber>IsMissingRequiredDetails"
						constraint (!HasLinesNotEqualToDetails)
							"CannotLoadAndReconcile;BankStatementLine<first BankStatementLineDetailsNotEqualRel.DerivedLineNumber>AmountDoesNotEqualLineDetails"

						BackgroundGroup = CashManagementGroup + CashManagementAccount + BankStatement
						invoke InvokedLoadAndReconcile in background group(BackgroundGroup)
							assign async background group id to BackgroundGroupAsyncId

				InvokedLoadAndReconcile is an Instance Action
					default label is untranslatable
					run in background
					restricted
					Parameters
						PrmMassStatementLoad	is Boolean

					Action Rules
						initialize CompletedReconLoadProcesses
						if (PrmMassStatementLoad)
							BackgroundGroup = CashManagementGroup + current corporate date
						else
							BackgroundGroup = CashManagementGroup + CashManagementAccount + BankStatement

						invoke LoadLinesIntoReconciliation BankStatementLine in background group(BackgroundGroup)
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashManagementAccount	= CashManagementAccount
							invoked.PrmBankStatement			= BankStatement
							invoked.PrmMassStatementLoad		= PrmMassStatementLoad

						invoke LoadLineDetailsIntoReconciliation BankStatementLineDetail in background group(BackgroundGroup)
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashManagementAccount	= CashManagementAccount
							invoked.PrmBankStatement			= BankStatement
							invoked.PrmMassStatementLoad		= PrmMassStatementLoad

						invoke ProcessMatchRulesForBlankLineMatchField BankStatementReconciliation in background group(BackgroundGroup)	
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashManagementAccount	= CashManagementAccount
							invoked.PrmBankStatement			= BankStatement
							invoked.PrmMassStatementLoad		= PrmMassStatementLoad

						if (CashManagementAccount.ReconcileToCashLedger entered)







							if (CashManagementAccount.ReconcileToCashLedger entered)
								invoke LoadCBTransIntoReconciliation CashLedgerTransaction in background group(BackgroundGroup)
									invoked.PrmCashManagementGroup		= CashManagementGroup
									invoked.PrmCashManagementAccount	= CashManagementAccount
									invoked.PrmBankStatement			= BankStatement
									invoked.PrmMassStatementLoad		= PrmMassStatementLoad

								invoke LoadLineDetailsIntoReconciliation CashLedgerTransactionDetail in background group(BackgroundGroup)
									invoked.PrmCashManagementGroup		= CashManagementGroup
									invoked.PrmCashManagementAccount	= CashManagementAccount
									invoked.PrmBankStatement			= BankStatement
									invoked.PrmMassStatementLoad		= PrmMassStatementLoad

						if (CashManagementAccount.ReconcileToOtherSystem entered)
							invoke LoadTransactionsIntoReconciliation NonCashLedgerTransaction in background group(BackgroundGroup)
								invoked.PrmCashManagementGroup		= CashManagementGroup
								invoked.PrmCashManagementAccount	= CashManagementAccount
								invoked.PrmBankStatement			= BankStatement
								invoked.PrmMassStatementLoad		= PrmMassStatementLoad

						if (CashManagementAccount.ReconcileToForecast entered
						and ActiveForecastExists)
							invoke LoadDetailsIntoReconciliation CashForecastDetail in background group(BackgroundGroup)
								invoked.PrmCashManagementGroup	 	= CashManagementGroup
								invoked.PrmCashForecast				= last ActiveCashForecastAccountRel.CashForecast
								invoked.PrmCashManagementAccount	= CashManagementAccount
								invoked.PrmBankStatement			= BankStatement
								invoked.PrmStatementDate			= StatementDate
								invoked.PrmMassStatementLoad		= PrmMassStatementLoad

				DeleteStatementReconciliationDetails	is an Instance Action
					confirmation required
					completion message is "DeleteStatementReconciliationDetailsHasBeenSubmittedToTheQueueForProcessing"
					valid when (CanDeleteStatementLineReconciliations)
					Action Rules
						constraint (!HasNonFinishedTriggers)
							"CannotDeleteStatementReconciliationDetails;OtherReconciliationProcessesRunning"
						invoke Purge BankStatementReconciliation set
						invoke DeleteStatementReconciliationDetails BankStatementReconciliation
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashManagementAccount	= CashManagementAccount
							invoked.PrmBankStatement			= BankStatement

				ReclassifyAllStatementLines is an Instance Action
					valid when (!StatementLoadedIntoReconciliation)
					confirmation required
					completion message is "ReclassifyAllStatementLinesHasBeenSubmittedToTheQueueForProcessing"
					Local Fields
						LocalCategorizationGroup is a CategorizationGroup
						LocalSubmittedGroups	 is Numeric 3

					Action Rules
						constraint (CashManagementGroup.NumberOfCategorizationGroups entered)
							"MustEnterNumberOfCategorizationGroupsOnCashManagementGroup"

						constraint (!BlankCategorizationGroupRel exists)
							"MustRunUpdateCategorizationGroupBeforeStatementLinesCanBeReclassified"

						initialize CategorizationGroupsProcessed
						LocalCategorizationGroup = 1
						LocalSubmittedGroups = CategorizationGroupsSubmitted
						while (LocalCategorizationGroup <= LocalSubmittedGroups)
							invoke ExecuteTransactionProcessingRules BankStatementLine
								invoked.PrmCashManagementGroup	 		= CashManagementGroup
								invoked.PrmAccount		 				= CashManagementAccount
								invoked.PrmBankStatement 				= BankStatement
								invoked.PrmCategorizationGroup			= LocalCategorizationGroup
								invoked.PrmInitialImport   				= InitialImport
								if (BankStatementInterfaceHeader exists)
									invoked.PrmBankStatementInterfaceHeader	= BankStatementInterfaceHeader

							LocalCategorizationGroup += 1

				MassLoadCashForecast is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmMassAccountLoad	is Boolean

					Action Rules
						if (CashManagementAccount.ReconcileToForecast entered
						and ActiveForecastExists)
							if (PrmMassAccountLoad)
								BackgroundGroup = CashManagementGroup + current corporate date
							else
								BackgroundGroup = CashManagementGroup + CashManagementAccount + current corporate date
							invoke LoadDetailsIntoReconciliation CashForecastDetail in background group(BackgroundGroup)
								invoked.PrmCashManagementGroup	 	= CashManagementGroup
								invoked.PrmCashForecast				= last ActiveCashForecastAccountRel.CashForecast
								invoked.PrmCashManagementAccount	= CashManagementAccount
								invoked.PrmBankStatement			= BankStatement
								invoked.PrmStatementDate			= StatementDate
								invoked.PrmReconcileByAccount		= true
								invoked.PrmMassAccountLoad			= PrmMassAccountLoad

				ReclassifyUncategorizedLines is an Instance Action
					valid when (HasUncategorizedStatementLines)
					Parameters
						PrmCategory		is a CashTransactionCategory

					Parameter Rules
						PrmCategory	required

					Action Rules
						invoke ReclassifyUncategorizedLines BankStatementLine
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashManagementAccount	= CashManagementAccount
							invoked.PrmBankStatement			= BankStatement
							invoked.PrmUncategorizedCategory	= first UncategorizedCategoryRel.CashTransactionCategory
							invoked.PrmReclassifiedCategory		= PrmCategory

				UpdateReconciliationStatus is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						if (IsFullyReconciled)
							make transition to Reconciled

				ReconcileStatement is an Instance Action
					valid when (CanReconcileNotReconciledAccount)
					Action Rules
						invoke UpdateLineStatus BankStatementLine set
							invoked.PrmLineStatus = 1 
						make transition to Reconciled

				Reconcile is an Instance Action
					valid when (IsBalanceOnly)
					Action Rules
						make transition to Reconciled

				CloseStatement is an Instance Action
					valid when (CanCloseNotReconciledAccount)
					Action Rules
						PostingStatus	= 2
						invoke UpdateLineStatus BankStatementLine set
							invoked.PrmLineStatus = 1 
						make transition to Closed

			Reconciled is a State
				Entrance Rules
					if (!BankStatementLineDistribution set exists
					and !NonCashLedgerDistribution set exists)
						PostingStatus	= 2
					else






						if (UnreleasedStatementLineDistributionsRel exists
						or  UnreleasedNonCashLedgerDistributionsRel	exists)
							PostingStatus	= 0 
						else
						if (PendingApprovalStatementLineDistributionsRel exists	
						or  PendingApprovalNonCashLedgerDistributionsRel exists)
							PostingStatus	= 3 
						else
						if (ReleasedStatementLineDistributionsRel exists
						or  ReleasedNonCashLedgerDistributionsRel exists)
							PostingStatus	= 4 
						else
						if (PostedStatementLineDistributionsRel exists
						or  PostedNonCashLedgerDistributionsRel	exists)
							PostingStatus	= 1 


				UnreconcileStatement is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Unreconciled

				Unreconcile is an Instance Action
					valid when (IsBalanceOnly)
					Action Rules
						make transition to Unreconciled

				CloseStatement is an Instance Action
					valid when (StatementCanBeClosed)
					Action Rules
						make transition to Closed

				StatementUnreconcile is an Instance Action		
					default label is "UnreconcileStatement"
					valid when (CanStatementUnreconcile)
					Action Rules
						invoke UpdateLineStatus BankStatementLine set
							invoked.PrmLineStatus = 0 
						make transition to Unreconciled

			Closed is a State
				ReopenStatement is an Instance Action
					Action Rules
						if (AccountNotReconciled
						or  StatementType.Intraday)
							make transition to Unreconciled
							invoke UpdateLineStatus BankStatementLine set
								invoked.PrmLineStatus = 0 
						else
							make transition to Reconciled
